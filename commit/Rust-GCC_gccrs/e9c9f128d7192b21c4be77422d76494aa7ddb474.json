{"sha": "e9c9f128d7192b21c4be77422d76494aa7ddb474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljOWYxMjhkNzE5MmIyMWM0YmU3NzQyMmQ3NjQ5NGFhN2RkYjQ3NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-01-19T10:43:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-01-19T10:43:54Z"}, "message": "re PR bootstrap/50237 (bootstrap comparison failure for libcpp/lex.o)\n\n\tPR bootstrap/50237\n\t* config/initfini-array.h: Guard content of the header\n\twith #ifdef HAVE_INITFINI_ARRAY.\n\t* configure.ac: Move gcc_AC_INITFINI_ARRAY much later into the file.\n\tAdd initfini-array.h to tm_file here.\n\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): For non-ia64 do a linker\n\ttest.\n\t* config.gcc: Don't add initfini-array.h to tm_file here.\n\t* configure: Regenerated.\n\nFrom-SVN: r183299", "tree": {"sha": "332a507497df8b7c686c17eba8ff17d9630b03c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332a507497df8b7c686c17eba8ff17d9630b03c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9c9f128d7192b21c4be77422d76494aa7ddb474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c9f128d7192b21c4be77422d76494aa7ddb474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c9f128d7192b21c4be77422d76494aa7ddb474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c9f128d7192b21c4be77422d76494aa7ddb474/comments", "author": null, "committer": null, "parents": [{"sha": "7b4eaf7e352385b571bb75fd60eccf973b24c451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4eaf7e352385b571bb75fd60eccf973b24c451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4eaf7e352385b571bb75fd60eccf973b24c451"}], "stats": {"total": 492, "additions": 226, "deletions": 266}, "files": [{"sha": "0dabe647147e795d41dd7ffac039ed4810db3965", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9c9f128d7192b21c4be77422d76494aa7ddb474", "patch": "@@ -1,4 +1,16 @@\n-2012-01-19 Andrey Belevantsev <abel@ispras.ru>\n+2012-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/50237\n+\t* config/initfini-array.h: Guard content of the header\n+\twith #ifdef HAVE_INITFINI_ARRAY.\n+\t* configure.ac: Move gcc_AC_INITFINI_ARRAY much later into the file.\n+\tAdd initfini-array.h to tm_file here.\n+\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): For non-ia64 do a linker\n+\ttest.\n+\t* config.gcc: Don't add initfini-array.h to tm_file here.\n+\t* configure: Regenerated.\n+\n+2012-01-19  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/51505\n \t* df-problems.c (df_kill_notes): New parameter live. Update comment."}, {"sha": "933f81167c6291fe7d5102833b094925093db61a", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 68, "deletions": 102, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=e9c9f128d7192b21c4be77422d76494aa7ddb474", "patch": "@@ -376,119 +376,85 @@ AC_DEFUN([gcc_AC_INITFINI_ARRAY],\n AC_CACHE_CHECK(for .preinit_array/.init_array/.fini_array support,\n \t\t gcc_cv_initfini_array, [dnl\n   if test \"x${build}\" = \"x${target}\" && test \"x${build}\" = \"x${host}\"; then\n-    AC_RUN_IFELSE([AC_LANG_SOURCE([\n+    case \"${target}\" in\n+      ia64-*)\n+\tAC_RUN_IFELSE([AC_LANG_SOURCE([\n #ifndef __ELF__\n #error Not an ELF OS\n #endif\n-#ifdef __ia64__\n /* We turn on .preinit_array/.init_array/.fini_array support for ia64\n    if it can be used.  */\n static int x = -1;\n int main (void) { return x; }\n int foo (void) { x = 0; }\n int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;\n-#else\n-extern void abort ();\n-static int count;\n-\n-static void\n-init1005 ()\n-{\n-  if (count != 0)\n-    abort ();\n-  count = 1005;\n-}\n-void (*const init_array1005[]) ()\n-  __attribute__ ((section (\".init_array.01005\"), aligned (sizeof (void *))))\n-  = { init1005 };\n-static void\n-fini1005 ()\n-{\n-  if (count != 1005)\n-    abort ();\n-}\n-void (*const fini_array1005[]) ()\n-  __attribute__ ((section (\".fini_array.01005\"), aligned (sizeof (void *))))\n-  = { fini1005 };\n-\n-static void\n-ctor1007 ()\n-{\n-  if (count != 1005)\n-    abort ();\n-  count = 1007;\n-}\n-void (*const ctors1007[]) ()\n-  __attribute__ ((section (\".ctors.64528\"), aligned (sizeof (void *))))\n-  = { ctor1007 };\n-static void\n-dtor1007 ()\n-{\n-  if (count != 1007)\n-    abort ();\n-  count = 1005;\n-}\n-void (*const dtors1007[]) ()\n-  __attribute__ ((section (\".dtors.64528\"), aligned (sizeof (void *))))\n-  = { dtor1007 };\n-\n-static void\n-init65530 ()\n-{\n-  if (count != 1007)\n-    abort ();\n-  count = 65530;\n-}\n-void (*const init_array65530[]) ()\n-  __attribute__ ((section (\".init_array.65530\"), aligned (sizeof (void *))))\n-  = { init65530 };\n-static void\n-fini65530 ()\n-{\n-  if (count != 65530)\n-    abort ();\n-  count = 1007;\n-}\n-void (*const fini_array65530[]) ()\n-  __attribute__ ((section (\".fini_array.65530\"), aligned (sizeof (void *))))\n-  = { fini65530 };\n-\n-static void\n-ctor65535 ()\n-{\n-  if (count != 65530)\n-    abort ();\n-  count = 65535;\n-}\n-void (*const ctors65535[]) ()\n-  __attribute__ ((section (\".ctors\"), aligned (sizeof (void *))))\n-  = { ctor65535 };\n-static void\n-dtor65535 ()\n-{\n-  if (count != 65535)\n-    abort ();\n-  count = 65530;\n-}\n-void (*const dtors65535[]) ()\n-  __attribute__ ((section (\".dtors\"), aligned (sizeof (void *))))\n-  = { dtor65535 };\n-\n-int\n-main ()\n-{\n-  if (count != 65535)\n-    abort ();\n-  return 0;\n-}\n-#endif\n ])],\n \t     [gcc_cv_initfini_array=yes], [gcc_cv_initfini_array=no],\n-\t     [gcc_cv_initfini_array=no])\n-   else\n-     AC_MSG_CHECKING(cross compile... guessing)\n-     gcc_cv_initfini_array=no\n-   fi])\n+\t     [gcc_cv_initfini_array=no]);;\n+      *)\n+\tgcc_cv_initfini_array=no\n+\tif test $in_tree_ld = yes ; then\n+\t  if test \"$gcc_cv_gld_major_version\" -eq 2 \\\n+\t     -a \"$gcc_cv_gld_minor_version\" -ge 22 \\\n+\t     -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+\t     && test $in_tree_ld_is_elf = yes; then\n+\t    gcc_cv_initfini_array=yes\n+\t  fi\n+\telif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+\t  cat > conftest.s <<\\EOF\n+.section .dtors,\"a\",%progbits\n+.balign 4\n+.byte 'A', 'A', 'A', 'A'\n+.section .ctors,\"a\",%progbits\n+.balign 4\n+.byte 'B', 'B', 'B', 'B'\n+.section .fini_array.65530,\"a\",%progbits\n+.balign 4\n+.byte 'C', 'C', 'C', 'C'\n+.section .init_array.65530,\"a\",%progbits\n+.balign 4\n+.byte 'D', 'D', 'D', 'D'\n+.section .dtors.64528,\"a\",%progbits\n+.balign 4\n+.byte 'E', 'E', 'E', 'E'\n+.section .ctors.64528,\"a\",%progbits\n+.balign 4\n+.byte 'F', 'F', 'F', 'F'\n+.section .fini_array.01005,\"a\",%progbits\n+.balign 4\n+.byte 'G', 'G', 'G', 'G'\n+.section .init_array.01005,\"a\",%progbits\n+.balign 4\n+.byte 'H', 'H', 'H', 'H'\n+.text\n+EOF\n+\t  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t     && $gcc_cv_ld -e 0 -o conftest conftest.o > /dev/null 2>&1 \\\n+\t     && $gcc_cv_objdump -s -j .init_array conftest \\\n+\t\t| grep HHHHFFFFDDDDBBBB > /dev/null 2>&1 \\\n+\t     && $gcc_cv_objdump -s -j .fini_array conftest \\\n+\t\t| grep GGGGEEEECCCCAAAA > /dev/null 2>&1; then\n+\t    gcc_cv_initfini_array=yes\n+\t  fi\n+changequote(,)dnl\n+\t  rm -f conftest conftest.*\n+changequote([,])dnl\n+\tfi\n+\tAC_PREPROC_IFELSE([AC_LANG_SOURCE([\n+#ifndef __ELF__\n+#error Not an ELF OS\n+#endif\n+#include <stdlib.h>\n+#if defined __GLIBC_PREREQ && __GLIBC_PREREQ (2, 4)\n+#else\n+#error The C library not known to support .init_array/.fini_array\n+#endif\n+])],, [gcc_cv_initfini_array=no]);;\n+    esac\n+  else\n+    AC_MSG_CHECKING(cross compile... guessing)\n+    gcc_cv_initfini_array=no\n+  fi])\n   enable_initfini_array=$gcc_cv_initfini_array\n ])\n if test $enable_initfini_array = yes; then"}, {"sha": "e8155cd9a4e7d1d3cd433f4d8b3f5b5a1867f80a", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e9c9f128d7192b21c4be77422d76494aa7ddb474", "patch": "@@ -2941,11 +2941,6 @@ if test x$with_schedule = x; then\n \tesac\n fi\n \n-# Support --enable-initfini-array.\n-if test x$enable_initfini_array = xyes; then\n-  tm_file=\"${tm_file} initfini-array.h\"\n-fi\n-\n # Validate and mark as valid any --with options supported\n # by this target.  In order to use a particular --with option\n # you must list it in supported_defaults; validating the value"}, {"sha": "bb48c70a9209a8ea76c626bc1091ca3a763547ab", "filename": "gcc/config/initfini-array.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfig%2Finitfini-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfig%2Finitfini-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finitfini-array.h?ref=e9c9f128d7192b21c4be77422d76494aa7ddb474", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for ELF systems with .init_array/.fini_array section\n    support.\n-   Copyright (C) 2011\n+   Copyright (C) 2011, 2012\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -19,6 +19,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifdef HAVE_INITFINI_ARRAY\n+\n #define USE_INITFINI_ARRAY\n \n #undef INIT_SECTION_ASM_OP\n@@ -35,3 +37,5 @@\n #define TARGET_ASM_CONSTRUCTOR default_elf_init_array_asm_out_constructor\n #undef TARGET_ASM_DESTRUCTOR\n #define TARGET_ASM_DESTRUCTOR default_elf_fini_array_asm_out_destructor\n+\n+#endif"}, {"sha": "7a2f03490dad27a74376c147a8399e53f57dfd59", "filename": "gcc/configure", "status": "modified", "additions": 133, "deletions": 155, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e9c9f128d7192b21c4be77422d76494aa7ddb474", "patch": "@@ -893,7 +893,6 @@ enable_languages\n with_multilib_list\n enable_rpath\n with_libiconv_prefix\n-enable_initfini_array\n enable_sjlj_exceptions\n enable_secureplt\n enable_leading_mingw64_underscores\n@@ -906,6 +905,7 @@ enable_fast_install\n enable_libtool_lock\n with_plugin_ld\n enable_gnu_indirect_function\n+enable_initfini_array\n enable_comdat\n enable_gnu_unique_object\n enable_linker_build_id\n@@ -1591,7 +1591,6 @@ Optional Features:\n   --disable-shared        don't provide a shared libgcc\n   --enable-languages=LIST specify which front-ends to build\n   --disable-rpath         do not hardcode runtime library paths\n-  --enable-initfini-array\tuse .init_array/.fini_array sections\n   --enable-sjlj-exceptions\n                           arrange to use setjmp/longjmp exception handling\n   --enable-secureplt      enable -msecure-plt by default for PowerPC\n@@ -1615,6 +1614,7 @@ Optional Features:\n   --enable-gnu-indirect-function\n                           enable the use of the @gnu_indirect_function to\n                           glibc systems\n+  --enable-initfini-array\tuse .init_array/.fini_array sections\n   --enable-comdat         enable COMDAT group support\n   --enable-gnu-unique-object\n                           enable the use of the @gnu_unique_object ELF\n@@ -10986,157 +10986,6 @@ fi\n CFLAGS=\"$saved_CFLAGS\"\n CXXFLAGS=\"$saved_CXXFLAGS\"\n \n-# Check whether --enable-initfini-array was given.\n-if test \"${enable_initfini_array+set}\" = set; then :\n-  enableval=$enable_initfini_array;\n-else\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for .preinit_array/.init_array/.fini_array support\" >&5\n-$as_echo_n \"checking for .preinit_array/.init_array/.fini_array support... \" >&6; }\n-if test \"${gcc_cv_initfini_array+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-    if test \"x${build}\" = \"x${target}\" && test \"x${build}\" = \"x${host}\"; then\n-    if test \"$cross_compiling\" = yes; then :\n-  gcc_cv_initfini_array=no\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-#ifndef __ELF__\n-#error Not an ELF OS\n-#endif\n-#ifdef __ia64__\n-/* We turn on .preinit_array/.init_array/.fini_array support for ia64\n-   if it can be used.  */\n-static int x = -1;\n-int main (void) { return x; }\n-int foo (void) { x = 0; }\n-int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;\n-#else\n-extern void abort ();\n-static int count;\n-\n-static void\n-init1005 ()\n-{\n-  if (count != 0)\n-    abort ();\n-  count = 1005;\n-}\n-void (*const init_array1005) ()\n-  __attribute__ ((section (\".init_array.01005\"), aligned (sizeof (void *))))\n-  = { init1005 };\n-static void\n-fini1005 ()\n-{\n-  if (count != 1005)\n-    abort ();\n-}\n-void (*const fini_array1005) ()\n-  __attribute__ ((section (\".fini_array.01005\"), aligned (sizeof (void *))))\n-  = { fini1005 };\n-\n-static void\n-ctor1007 ()\n-{\n-  if (count != 1005)\n-    abort ();\n-  count = 1007;\n-}\n-void (*const ctors1007) ()\n-  __attribute__ ((section (\".ctors.64528\"), aligned (sizeof (void *))))\n-  = { ctor1007 };\n-static void\n-dtor1007 ()\n-{\n-  if (count != 1007)\n-    abort ();\n-  count = 1005;\n-}\n-void (*const dtors1007) ()\n-  __attribute__ ((section (\".dtors.64528\"), aligned (sizeof (void *))))\n-  = { dtor1007 };\n-\n-static void\n-init65530 ()\n-{\n-  if (count != 1007)\n-    abort ();\n-  count = 65530;\n-}\n-void (*const init_array65530) ()\n-  __attribute__ ((section (\".init_array.65530\"), aligned (sizeof (void *))))\n-  = { init65530 };\n-static void\n-fini65530 ()\n-{\n-  if (count != 65530)\n-    abort ();\n-  count = 1007;\n-}\n-void (*const fini_array65530) ()\n-  __attribute__ ((section (\".fini_array.65530\"), aligned (sizeof (void *))))\n-  = { fini65530 };\n-\n-static void\n-ctor65535 ()\n-{\n-  if (count != 65530)\n-    abort ();\n-  count = 65535;\n-}\n-void (*const ctors65535) ()\n-  __attribute__ ((section (\".ctors\"), aligned (sizeof (void *))))\n-  = { ctor65535 };\n-static void\n-dtor65535 ()\n-{\n-  if (count != 65535)\n-    abort ();\n-  count = 65530;\n-}\n-void (*const dtors65535) ()\n-  __attribute__ ((section (\".dtors\"), aligned (sizeof (void *))))\n-  = { dtor65535 };\n-\n-int\n-main ()\n-{\n-  if (count != 65535)\n-    abort ();\n-  return 0;\n-}\n-#endif\n-\n-_ACEOF\n-if ac_fn_c_try_run \"$LINENO\"; then :\n-  gcc_cv_initfini_array=yes\n-else\n-  gcc_cv_initfini_array=no\n-fi\n-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n-  conftest.$ac_objext conftest.beam conftest.$ac_ext\n-fi\n-\n-   else\n-     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking cross compile... guessing\" >&5\n-$as_echo_n \"checking cross compile... guessing... \" >&6; }\n-     gcc_cv_initfini_array=no\n-   fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_initfini_array\" >&5\n-$as_echo \"$gcc_cv_initfini_array\" >&6; }\n-  enable_initfini_array=$gcc_cv_initfini_array\n-\n-fi\n-\n-if test $enable_initfini_array = yes; then\n-\n-$as_echo \"#define HAVE_INITFINI_ARRAY 1\" >>confdefs.h\n-\n-fi\n-\n # mkdir takes a single argument on some systems.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if mkdir takes one argument\" >&5\n $as_echo_n \"checking if mkdir takes one argument... \" >&6; }\n@@ -11255,6 +11104,11 @@ if test x\"$tmake_file\" = x\n then tmake_file=$cpu_type/t-$cpu_type\n fi\n \n+# Support --enable-initfini-array.\n+if test x$enable_initfini_array != xno; then\n+  tm_file=\"${tm_file} initfini-array.h\"\n+fi\n+\n if test x\"$dwarf2\" = xyes\n then tm_file=\"$tm_file tm-dwarf2.h\"\n fi\n@@ -18116,7 +17970,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18119 \"configure\"\n+#line 17973 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18222,7 +18076,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18225 \"configure\"\n+#line 18079 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -22496,6 +22350,130 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_ro_rw_mix\" >&5\n $as_echo \"$gcc_cv_ld_ro_rw_mix\" >&6; }\n \n+# Check whether --enable-initfini-array was given.\n+if test \"${enable_initfini_array+set}\" = set; then :\n+  enableval=$enable_initfini_array;\n+else\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for .preinit_array/.init_array/.fini_array support\" >&5\n+$as_echo_n \"checking for .preinit_array/.init_array/.fini_array support... \" >&6; }\n+if test \"${gcc_cv_initfini_array+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+    if test \"x${build}\" = \"x${target}\" && test \"x${build}\" = \"x${host}\"; then\n+    case \"${target}\" in\n+      ia64-*)\n+\tif test \"$cross_compiling\" = yes; then :\n+  gcc_cv_initfini_array=no\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifndef __ELF__\n+#error Not an ELF OS\n+#endif\n+/* We turn on .preinit_array/.init_array/.fini_array support for ia64\n+   if it can be used.  */\n+static int x = -1;\n+int main (void) { return x; }\n+int foo (void) { x = 0; }\n+int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  gcc_cv_initfini_array=yes\n+else\n+  gcc_cv_initfini_array=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+;;\n+      *)\n+\tgcc_cv_initfini_array=no\n+\tif test $in_tree_ld = yes ; then\n+\t  if test \"$gcc_cv_gld_major_version\" -eq 2 \\\n+\t     -a \"$gcc_cv_gld_minor_version\" -ge 22 \\\n+\t     -o \"$gcc_cv_gld_major_version\" -gt 2 \\\n+\t     && test $in_tree_ld_is_elf = yes; then\n+\t    gcc_cv_initfini_array=yes\n+\t  fi\n+\telif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+\t  cat > conftest.s <<\\EOF\n+.section .dtors,\"a\",%progbits\n+.balign 4\n+.byte 'A', 'A', 'A', 'A'\n+.section .ctors,\"a\",%progbits\n+.balign 4\n+.byte 'B', 'B', 'B', 'B'\n+.section .fini_array.65530,\"a\",%progbits\n+.balign 4\n+.byte 'C', 'C', 'C', 'C'\n+.section .init_array.65530,\"a\",%progbits\n+.balign 4\n+.byte 'D', 'D', 'D', 'D'\n+.section .dtors.64528,\"a\",%progbits\n+.balign 4\n+.byte 'E', 'E', 'E', 'E'\n+.section .ctors.64528,\"a\",%progbits\n+.balign 4\n+.byte 'F', 'F', 'F', 'F'\n+.section .fini_array.01005,\"a\",%progbits\n+.balign 4\n+.byte 'G', 'G', 'G', 'G'\n+.section .init_array.01005,\"a\",%progbits\n+.balign 4\n+.byte 'H', 'H', 'H', 'H'\n+.text\n+EOF\n+\t  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t     && $gcc_cv_ld -e 0 -o conftest conftest.o > /dev/null 2>&1 \\\n+\t     && $gcc_cv_objdump -s -j .init_array conftest \\\n+\t\t| grep HHHHFFFFDDDDBBBB > /dev/null 2>&1 \\\n+\t     && $gcc_cv_objdump -s -j .fini_array conftest \\\n+\t\t| grep GGGGEEEECCCCAAAA > /dev/null 2>&1; then\n+\t    gcc_cv_initfini_array=yes\n+\t  fi\n+\t  rm -f conftest conftest.*\n+\tfi\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifndef __ELF__\n+#error Not an ELF OS\n+#endif\n+#include <stdlib.h>\n+#if defined __GLIBC_PREREQ && __GLIBC_PREREQ (2, 4)\n+#else\n+#error The C library not known to support .init_array/.fini_array\n+#endif\n+\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+\n+else\n+  gcc_cv_initfini_array=no\n+fi\n+rm -f conftest.err conftest.$ac_ext;;\n+    esac\n+  else\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking cross compile... guessing\" >&5\n+$as_echo_n \"checking cross compile... guessing... \" >&6; }\n+    gcc_cv_initfini_array=no\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_initfini_array\" >&5\n+$as_echo \"$gcc_cv_initfini_array\" >&6; }\n+  enable_initfini_array=$gcc_cv_initfini_array\n+\n+fi\n+\n+if test $enable_initfini_array = yes; then\n+\n+$as_echo \"#define HAVE_INITFINI_ARRAY 1\" >>confdefs.h\n+\n+fi\n+\n # Check if we have .[us]leb128, and support symbol arithmetic with it.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .sleb128 and .uleb128\" >&5\n $as_echo_n \"checking assembler for .sleb128 and .uleb128... \" >&6; }"}, {"sha": "d72be3c5b5846517cbbdc18c13dd2d9c1bd0f0ef", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c9f128d7192b21c4be77422d76494aa7ddb474/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e9c9f128d7192b21c4be77422d76494aa7ddb474", "patch": "@@ -1197,8 +1197,6 @@ fi\n CFLAGS=\"$saved_CFLAGS\"\n CXXFLAGS=\"$saved_CXXFLAGS\"\n \n-gcc_AC_INITFINI_ARRAY\n-\n # mkdir takes a single argument on some systems. \n gcc_AC_FUNC_MKDIR_TAKES_ONE_ARG\n \n@@ -1271,6 +1269,11 @@ if test x\"$tmake_file\" = x\n then tmake_file=$cpu_type/t-$cpu_type\n fi\n \n+# Support --enable-initfini-array.\n+if test x$enable_initfini_array != xno; then\n+  tm_file=\"${tm_file} initfini-array.h\"\n+fi\n+\n if test x\"$dwarf2\" = xyes\n then tm_file=\"$tm_file tm-dwarf2.h\"\n fi\n@@ -2422,6 +2425,8 @@ if test x$gcc_cv_ld_ro_rw_mix = xread-write; then\n fi\n AC_MSG_RESULT($gcc_cv_ld_ro_rw_mix)\n \n+gcc_AC_INITFINI_ARRAY\n+\n # Check if we have .[us]leb128, and support symbol arithmetic with it.\n gcc_GAS_CHECK_FEATURE([.sleb128 and .uleb128], gcc_cv_as_leb128,\n   [elf,2,11,0],,"}]}