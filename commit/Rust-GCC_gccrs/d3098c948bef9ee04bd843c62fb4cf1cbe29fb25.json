{"sha": "d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwOThjOTQ4YmVmOWVlMDRiZDg0M2M2MmZiNGNmMWNiZTI5ZmIyNQ==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-07-23T22:17:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-23T22:17:31Z"}, "message": "condition_variable: Update to N2691 WD.\n\n2008-07-23  Chris Fairles <chris.fairles@gmail.com>\n\n        * include/std/condition_variable: Update to N2691 WD.\n        * include/std/mutex: Likewise.\n        * testsuite/30_threads/mutex/cons/assign_neg.cc: Adjust line numbers.\n        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r138096", "tree": {"sha": "2a71cd4193b35a3043959082880232fa29e4995c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a71cd4193b35a3043959082880232fa29e4995c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e293154d69acf16281d5b9b038ca741c1cf53d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e293154d69acf16281d5b9b038ca741c1cf53d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e293154d69acf16281d5b9b038ca741c1cf53d6"}], "stats": {"total": 228, "additions": 163, "deletions": 65}, "files": [{"sha": "1dc05f3cb0ec9627491789e9c2508e9b8f10486b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -1,3 +1,12 @@\n+2008-07-23  Chris Fairles <chris.fairles@gmail.com>\n+\n+        * include/std/condition_variable: Update to N2691 WD.\n+        * include/std/mutex: Likewise.\n+        * testsuite/30_threads/mutex/cons/assign_neg.cc: Adjust line numbers.\n+        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n+\n 2008-07-23  Chris Fairles <chris.fairles@gmail.com>\n \n         * acinclude.m4 ([GLIBCXX_CHECK_CLOCK_GETTIME]): Define GLIBCXX_LIBS.\n@@ -78,10 +87,10 @@\n \tUpdate error lineno.\n \t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n \tUpdate error lineno.\n-\t* testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc:\n-\tUpdate error lineno.\n-\t* testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc:\n-\tUpdate error lineno.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Update error lineno.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Update error lineno.\n \t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n \tUpdate error lineno.\n \t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:"}, {"sha": "1a7a7cd1f37d14549bb8aa54d5ff20ff77e10d1a", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 46, "deletions": 29, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -44,8 +44,14 @@\n \n namespace std \n {\n-  // XXX\n-  class system_time;\n+  namespace chrono\n+  {\n+    template<typename _Rep, typename _Period>\n+      struct duration;\n+\n+    template<typename _Clock, typename _Duration>\n+      struct time_point;\n+  }\n \n   /// condition_variable\n   class condition_variable\n@@ -78,22 +84,27 @@ namespace std\n \t  wait(__lock);\n       }\n   \n-    template<typename _Duration>\n-      bool \n-      timed_wait(unique_lock<mutex>& __lock, const _Duration& __rtime);\n-\n-    bool \n-    timed_wait(unique_lock<mutex>& __lock, const system_time& __atime);\n-\n-    template<typename _Predicate>\n-      bool \n-      timed_wait(unique_lock<mutex>& __lock, const system_time& __atime,\n-\t\t _Predicate pred);\n-\n-    template<typename _Duration, typename _Predicate>\n+    template<typename _Clock, typename _Duration>\n       bool \n-      timed_wait(unique_lock<mutex>& __lock, const _Duration& __rtime, \n-\t\t _Predicate pred);\n+      wait_until(unique_lock<mutex>& __lock, \n+\t\t const chrono::time_point<_Clock, _Duration>& __atime);\n+\n+    template<typename _Clock, typename _Duration, typename _Predicate>\n+      bool\n+      wait_until(unique_lock<mutex>& __lock,\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime,\n+\t\t _Predicate __p);\n+\n+    template<typename _Rep, typename _Period>\n+      bool\n+      wait_for(unique_lock<mutex>& __lock,\n+\t       const chrono::duration<_Rep, _Period>& __rtime);\n+\n+    template<typename _Rep, typename _Period, typename _Predicate>\n+      bool\n+      wait_for(unique_lock<mutex>& __lock,\n+\t       const chrono::duration<_Rep, _Period>& __rtime,\n+\t       _Predicate __p);\n \n     native_handle_type \n     native_handle() { return _M_cond; }\n@@ -132,21 +143,27 @@ namespace std\n       void \n       wait(_Lock& __lock, _Predicate __p);\n \n-    template<typename _Lock>\n-      bool \n-      timed_wait(_Lock& __lock, const system_time& __atime);\n-\n-    template<typename _Lock, typename _Duration>\n-      bool \n-      timed_wait(_Lock& __lock, const _Duration& __rtime);\n-\n-    template<typename _Lock, typename _Predicate>\n+    template<typename _Lock, typename _Clock, typename _Duration>\n       bool \n-      timed_wait(_Lock& __lock, const system_time& __atime, _Predicate __p);\n+      wait_until(_Lock& __lock,\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime);\n \n-    template<typename _Lock, typename _Duration, typename _Predicate>\n+    template<typename _Lock, typename _Clock, \n+\t     typename _Duration, typename _Predicate>\n       bool \n-      timed_wait(_Lock& __lock, const _Duration& __rtime, _Predicate __p);\n+      wait_until(_Lock& __lock,\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime,\n+\t\t _Predicate __p);\n+    \n+    template<typename _Lock, typename _Rep, typename _Period>\n+      bool\n+      wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime);\n+\n+    template<typename _Lock, typename _Rep,\n+\t     typename _Period, typename _Predicate>\n+      bool\n+      wait_for(_Lock& __lock, \n+\t       const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p);\n \n     native_handle_type \n     native_handle() { return _M_cond; }"}, {"sha": "779394a5891416939c82fd9b4f6ed1751c2ecce1", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 100, "deletions": 28, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -48,8 +48,14 @@\n \n namespace std\n {\n-  // XXX\n-  class system_time;\n+  namespace chrono\n+  {\n+    template<typename _Rep, typename _Period>\n+      struct duration;\n+\n+    template<typename _Clock, typename _Duration>\n+      struct time_point;\n+  }\n \n   /// mutex\n   class mutex\n@@ -74,22 +80,22 @@ namespace std\n       int __e = __gthread_mutex_lock(&_M_mutex);\n \n       // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n-     if (__e)\n-       __throw_system_error(__e);\n+      if (__e)\n+\t__throw_system_error(__e);\n     }\n \n     bool\n     try_lock()\n     {\n-     // XXX EINVAL, EAGAIN, EBUSY\n-     return !__gthread_mutex_trylock(&_M_mutex);\n+      // XXX EINVAL, EAGAIN, EBUSY\n+      return !__gthread_mutex_trylock(&_M_mutex);\n     }\n \n     void\n     unlock()\n     {\n       // XXX EINVAL, EAGAIN, EPERM\n-     __gthread_mutex_unlock(&_M_mutex);\n+      __gthread_mutex_unlock(&_M_mutex);\n     }\n \n     native_handle_type\n@@ -102,7 +108,6 @@ namespace std\n     mutex& operator=(const mutex&);\n   };\n \n-\n   /// recursive_mutex\n   class recursive_mutex\n   {\n@@ -126,8 +131,8 @@ namespace std\n       int __e = __gthread_recursive_mutex_lock(&_M_mutex);\n \n       // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n-     if (__e)\n-       __throw_system_error(__e);\n+      if (__e)\n+\t__throw_system_error(__e);\n     }\n \n     bool\n@@ -145,7 +150,8 @@ namespace std\n     }\n \n     native_handle_type\n-    native_handle() { return _M_mutex; }\n+    native_handle()\n+    { return _M_mutex; }\n \n   private:\n     native_handle_type _M_mutex;\n@@ -154,9 +160,65 @@ namespace std\n     recursive_mutex& operator=(const recursive_mutex&);\n   };\n \n+  /// timed_mutex\n+  class timed_mutex\n+  {\n+  public:\n+    typedef __gthread_mutex_t native_handle_type;\n+\n+    void lock();\n+    bool try_lock();\n+\n+    template <class _Rep, class _Period>\n+      bool\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime);\n+\n+    template <class _Clock, class _Duration>\n+      bool\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime);\n+\n+    void unlock();\n \n-  // class timed_mutex;\n-  // class recursive_timed_mutex;\n+    native_handle_type\n+    native_handle()\n+    { return _M_mutex; }\n+    \n+  private:\n+    native_handle_type _M_mutex;\n+\n+    timed_mutex(const timed_mutex&);\n+    timed_mutex& operator=(const timed_mutex&);\n+  };\n+\n+  /// recursive_timed_mutex\n+  class recursive_timed_mutex\n+  {\n+  public:\n+    typedef __gthread_mutex_t native_handle_type;\n+\n+    void lock();\n+    bool try_lock();\n+\n+    template <class _Rep, class _Period>\n+      bool\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime);\n+\n+    template <class _Clock, class _Duration>\n+      bool\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime);\n+\n+    void unlock();\n+\n+    native_handle_type\n+    native_handle()\n+    { return _M_mutex; }\n+    \n+  private:\n+    native_handle_type _M_mutex;\n+\n+    recursive_timed_mutex(const recursive_timed_mutex&);\n+    recursive_timed_mutex& operator=(const recursive_timed_mutex&);\n+  };\n \n   /// Do not acquire ownership of the mutex.\n   struct defer_lock_t { };\n@@ -211,30 +273,38 @@ namespace std\n     public:\n       typedef _Mutex mutex_type;\n \n-      unique_lock() : _M_device(NULL), _M_owns(false) { }\n+      unique_lock()\n+      : _M_device(NULL), _M_owns(false)\n+      { }\n \n-      explicit unique_lock(mutex_type& __m) : _M_device(&__m)\n+      explicit unique_lock(mutex_type& __m)\n+      : _M_device(&__m)\n       {\n \tlock();\n \t_M_owns = true;\n       }\n \n       unique_lock(mutex_type& __m, defer_lock_t)\n-      : _M_device(&__m), _M_owns(false) { }\n+      : _M_device(&__m), _M_owns(false)\n+      { }\n \n       unique_lock(mutex_type& __m, try_to_lock_t)\n-      : _M_device(&__m), _M_owns(_M_device->try_lock()) { }\n+      : _M_device(&__m), _M_owns(_M_device->try_lock())\n+      { }\n \n       unique_lock(mutex_type& __m, adopt_lock_t)\n       : _M_device(&__m), _M_owns(true)\n       {\n \t// XXX calling thread owns mutex\n       }\n \n-      unique_lock(mutex_type& __m, const system_time& abs_time);\n+      template<typename _Clock, typename _Duration>\n+\tunique_lock(mutex_type& __m, \n+\t\t    const chrono::time_point<_Clock, _Duration>& __atime);\n \n-      template<typename _Duration>\n-\tunique_lock(mutex_type& __m, const _Duration& rel_time);\n+      template<typename _Rep, typename _Period>\n+\tunique_lock(mutex_type& __m, \n+\t\t    const chrono::duration<_Rep, _Period>& __rtime);\n \n       ~unique_lock()\n       {\n@@ -246,7 +316,6 @@ namespace std\n \n       unique_lock& operator=(unique_lock&&);\n \n-\n       void\n       lock()\n       {\n@@ -276,12 +345,13 @@ namespace std\n \t  throw lock_error();\n       }\n \n+      template<typename _Rep, typename _Period>\n+\tbool\n+\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime);\n \n-      template<typename _Duration>\n-\tbool timed_lock(const _Duration& rel_time);\n-\n-      bool\n-      timed_lock(const system_time& abs_time);\n+      template<typename _Clock, typename _Duration>\n+\tbool\n+\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime);\n \n       void\n       swap(unique_lock&& __u);\n@@ -296,9 +366,11 @@ namespace std\n       }\n \n       bool\n-      owns_lock() const { return _M_owns; }\n+      owns_lock() const\n+      { return _M_owns; }\n \n-      operator bool () const { return owns_lock(); }\n+      operator bool () const\n+      { return owns_lock(); }\n \n       mutex_type*\n       mutex() const"}, {"sha": "8c66bb53cd7f2c0a9bc275c86896d3e4e21f7446", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -39,4 +39,4 @@ void test01()\n   m1 = m2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 102 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 108 } "}, {"sha": "666506a36b14009b211d77fae5c7df13e7fa24a6", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -38,4 +38,4 @@ void test01()\n   mutex_type m2(m1);\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 101 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 107 } "}, {"sha": "b7e27847667f0326a6331451f13648b0becb1b64", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -39,4 +39,4 @@ void test01()\n   m1 = m2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 154 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 160 } "}, {"sha": "2d20cb98c3df149fa9c9f1cf416bbd0c39f7a174", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3098c948bef9ee04bd843c62fb4cf1cbe29fb25/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=d3098c948bef9ee04bd843c62fb4cf1cbe29fb25", "patch": "@@ -38,4 +38,4 @@ void test01()\n   mutex_type m2(m1);\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 153 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 159 } "}]}