{"sha": "ea057359a72da39e2938bbaa97b540822995f2b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwNTczNTlhNzJkYTM5ZTI5MzhiYmFhOTdiNTQwODIyOTk1ZjJiNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-14T14:16:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-14T14:16:18Z"}, "message": "cfgexpand.c (expand_used_vars): Use virtual_operand_p.\n\n2012-08-14  Richard Guenther  <rguenther@suse.de>\n\n\t* cfgexpand.c (expand_used_vars): Use virtual_operand_p.\n\t* gimple-pretty-print.c (dump_phi_nodes): Likewise.\n\t* gimple-streamer-out.c (output_bb): Likewise.\n\t* graphite-sese-to-poly.c (scalar_close_phi_node_p): Likewise.\n\t(rewrite_reductions_out_of_ssa): Likewise.\n\t(rewrite_commutative_reductions_out_of_ss): Likewise.\n\t* ipa-split.c (verify_non_ssa_vars): Likewise.\n\t(consider_split): Likewise.\n\t(visit_bb): Likewise.\n\t(split_function): Likewise.\n\t* lto-streamer-out.c (output_ssa_names): Likewise.\n\t* sese.c (rename_uses): Likewise.\n\t* tree-cfg.c (replace_uses_by): Likewise.\n\t(gimple_merge_blocks): Likewise.\n\t(gimple_cfg2dot): Likewise.\n\t(verify_gimple_phi): Likewise.\n\t(replace_ssa_name): Likewise.\n\t(move_block_to_fn): Likewise.\n\t* tree-eh.c (cleanup_empty_eh_merge_phis): Likewise.\n\t* tree-if-conv.c (if_convertible_phi_p): Likewise.\n\t(predicate_scalar_phi): Likewise.\n\t* tree-inline.c (update_ssa_across_abnormal_edges): Likewise.\n\t(copy_phis_for_bb): Likewise.\n\t* tree-loop-distribution.c (generate_loops_for_partition): Likewise.\n\t(destroy_loop): Likewise.\n\t* tree-outof-ssa.c (eliminate_useless_phis): Likewise.\n\t(insert_backedge_copies): Likewise.\n\t* tree-parloops.c (transform_to_exit_first_loop): Likewise.\n\t(gather_scalar_reductions): Likewise.\n\t(try_create_reduction_list): Likewise.\n\t* tree-scalar-evolution.c (analyze_scalar_evolution_for_all_loop_ph):\n\tLikewise.\n\t(scev_const_prop): Likewise.\n\t* tree-ssa-ccp.c (debug_lattice_value): Likewise.\n\t(get_default_value): Likewise.\n\t(ccp_initialize): Likewise.\n\t* tree-ssa-coalesce.c (create_outofssa_var_map): Likewise.\n\t* tree-ssa-copy.c (may_propagate_copy): Likewise.\n\t(init_copy_prop): Likewise.\n\t* tree-ssa-dce.c (propagate_necessity): Likewise.\n\t(remove_dead_phis): Likewise.\n\t(forward_edge_to_pdom): Likewise.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-live.c (partition_view_init): Likewise.\n\t(remove_unused_locals): Likewise.\n\t(register_ssa_partition_check): Likewise.\n\t* tree-ssa-loop-im.c (movement_possibility): Likewise.\n\t(move_computations_stmt): Likewise.\n\t* tree-ssa-loop-ivopts.c (determine_biv_step): Likewise.\n\t(record_invariant): Likewise.\n\t(find_interesting_uses_outside): Likewise.\n\t(determine_set_costs): Likewise.\n\t* tree-ssa-loop-manip.c (add_exit_phis_var): Likewise.\n\t(find_uses_to_rename_use): Likewise.\n\t(check_loop_closed_ssa_use): Likewise.\n\t(rewrite_phi_with_iv): Likewise.\n\t(canonicalize_loop_ivs): Likewise.\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Likewise.\n\t* tree-ssa-phiopt.c (hoist_adjacent_loads): Likewise.\n\t* tree-ssa-pre.c (make_values_for_phi): Likewise.\n\t(compute_avail): Likewise.\n\t(eliminate): Likewise.\n\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n\t* tree-ssa-reassoc.c (phi_rank): Likewise.\n\t* tree-ssa-strlen.c (strlen_enter_block): Likewise.\n\t* tree-ssa-structalias.c (compute_points_to_sets): Likewise.\n\t(ipa_pta_execute): Likewise.\n\t* tree-ssa-tail-merge.c (same_succ_hash): Likewise.\n\t(release_last_vdef): Likewise.\n\t(same_phi_alternatives_1): Likewise.\n\t(bb_has_non_vop_phi): Likewise.\n\t(vop_phi): Likewise.\n\t* tree-ssa-threadedge.c (record_temporary_equivalences_from_phis):\n\tLikewise.\n\t* tree-ssa-uninit.c (warn_uninitialized_phi): Likewise.\n\t(execute_late_warn_uninitialized): Likewise.\n\t* tree-ssa.c (verify_ssa_name): Likewise.\n\t(verify_phi_args): Likewise.\n\t(verify_ssa): Likewise.\n\t* tree-stdarg.c (execute_optimize_stdarg): Likewise.\n\t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1): Likewise.\n\t(slpeel_tree_peel_loop_to_edge): Likewise.\n\t(vect_can_advance_ivs_p): Likewise.\n\t(vect_update_ivs_after_vectorizer): Likewise.\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Likewise.\n\t* tree-vrp.c (remove_range_assertions): Likewise.\n\t* value-prof.c (gimple_divmod_values_to_profile): Likewise.\n\nFrom-SVN: r190385", "tree": {"sha": "b38a67eaafc48783434ab6dd1c724690d27e7f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b38a67eaafc48783434ab6dd1c724690d27e7f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea057359a72da39e2938bbaa97b540822995f2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea057359a72da39e2938bbaa97b540822995f2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea057359a72da39e2938bbaa97b540822995f2b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea057359a72da39e2938bbaa97b540822995f2b7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c8f7377380290e84a80fb0ca8a68375593af8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8f7377380290e84a80fb0ca8a68375593af8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8f7377380290e84a80fb0ca8a68375593af8a1"}], "stats": {"total": 324, "additions": 204, "deletions": 120}, "files": [{"sha": "bc539945b2385e980a38628373b2f8344e8b2a06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1,3 +1,93 @@\n+2012-08-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cfgexpand.c (expand_used_vars): Use virtual_operand_p.\n+\t* gimple-pretty-print.c (dump_phi_nodes): Likewise.\n+\t* gimple-streamer-out.c (output_bb): Likewise.\n+\t* graphite-sese-to-poly.c (scalar_close_phi_node_p): Likewise.\n+\t(rewrite_reductions_out_of_ssa): Likewise.\n+\t(rewrite_commutative_reductions_out_of_ss): Likewise.\n+\t* ipa-split.c (verify_non_ssa_vars): Likewise.\n+\t(consider_split): Likewise.\n+\t(visit_bb): Likewise.\n+\t(split_function): Likewise.\n+\t* lto-streamer-out.c (output_ssa_names): Likewise.\n+\t* sese.c (rename_uses): Likewise.\n+\t* tree-cfg.c (replace_uses_by): Likewise.\n+\t(gimple_merge_blocks): Likewise.\n+\t(gimple_cfg2dot): Likewise.\n+\t(verify_gimple_phi): Likewise.\n+\t(replace_ssa_name): Likewise.\n+\t(move_block_to_fn): Likewise.\n+\t* tree-eh.c (cleanup_empty_eh_merge_phis): Likewise.\n+\t* tree-if-conv.c (if_convertible_phi_p): Likewise.\n+\t(predicate_scalar_phi): Likewise.\n+\t* tree-inline.c (update_ssa_across_abnormal_edges): Likewise.\n+\t(copy_phis_for_bb): Likewise.\n+\t* tree-loop-distribution.c (generate_loops_for_partition): Likewise.\n+\t(destroy_loop): Likewise.\n+\t* tree-outof-ssa.c (eliminate_useless_phis): Likewise.\n+\t(insert_backedge_copies): Likewise.\n+\t* tree-parloops.c (transform_to_exit_first_loop): Likewise.\n+\t(gather_scalar_reductions): Likewise.\n+\t(try_create_reduction_list): Likewise.\n+\t* tree-scalar-evolution.c (analyze_scalar_evolution_for_all_loop_ph):\n+\tLikewise.\n+\t(scev_const_prop): Likewise.\n+\t* tree-ssa-ccp.c (debug_lattice_value): Likewise.\n+\t(get_default_value): Likewise.\n+\t(ccp_initialize): Likewise.\n+\t* tree-ssa-coalesce.c (create_outofssa_var_map): Likewise.\n+\t* tree-ssa-copy.c (may_propagate_copy): Likewise.\n+\t(init_copy_prop): Likewise.\n+\t* tree-ssa-dce.c (propagate_necessity): Likewise.\n+\t(remove_dead_phis): Likewise.\n+\t(forward_edge_to_pdom): Likewise.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-live.c (partition_view_init): Likewise.\n+\t(remove_unused_locals): Likewise.\n+\t(register_ssa_partition_check): Likewise.\n+\t* tree-ssa-loop-im.c (movement_possibility): Likewise.\n+\t(move_computations_stmt): Likewise.\n+\t* tree-ssa-loop-ivopts.c (determine_biv_step): Likewise.\n+\t(record_invariant): Likewise.\n+\t(find_interesting_uses_outside): Likewise.\n+\t(determine_set_costs): Likewise.\n+\t* tree-ssa-loop-manip.c (add_exit_phis_var): Likewise.\n+\t(find_uses_to_rename_use): Likewise.\n+\t(check_loop_closed_ssa_use): Likewise.\n+\t(rewrite_phi_with_iv): Likewise.\n+\t(canonicalize_loop_ivs): Likewise.\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Likewise.\n+\t* tree-ssa-phiopt.c (hoist_adjacent_loads): Likewise.\n+\t* tree-ssa-pre.c (make_values_for_phi): Likewise.\n+\t(compute_avail): Likewise.\n+\t(eliminate): Likewise.\n+\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n+\t* tree-ssa-reassoc.c (phi_rank): Likewise.\n+\t* tree-ssa-strlen.c (strlen_enter_block): Likewise.\n+\t* tree-ssa-structalias.c (compute_points_to_sets): Likewise.\n+\t(ipa_pta_execute): Likewise.\n+\t* tree-ssa-tail-merge.c (same_succ_hash): Likewise.\n+\t(release_last_vdef): Likewise.\n+\t(same_phi_alternatives_1): Likewise.\n+\t(bb_has_non_vop_phi): Likewise.\n+\t(vop_phi): Likewise.\n+\t* tree-ssa-threadedge.c (record_temporary_equivalences_from_phis):\n+\tLikewise.\n+\t* tree-ssa-uninit.c (warn_uninitialized_phi): Likewise.\n+\t(execute_late_warn_uninitialized): Likewise.\n+\t* tree-ssa.c (verify_ssa_name): Likewise.\n+\t(verify_phi_args): Likewise.\n+\t(verify_ssa): Likewise.\n+\t* tree-stdarg.c (execute_optimize_stdarg): Likewise.\n+\t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1): Likewise.\n+\t(slpeel_tree_peel_loop_to_edge): Likewise.\n+\t(vect_can_advance_ivs_p): Likewise.\n+\t(vect_update_ivs_after_vectorizer): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Likewise.\n+\t* tree-vrp.c (remove_range_assertions): Likewise.\n+\t* value-prof.c (gimple_divmod_values_to_profile): Likewise.\n+\n 2012-08-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54146"}, {"sha": "da383a932f36c41898624d46e0f88b1c24250b3e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1471,7 +1471,7 @@ expand_used_vars (void)\n     {\n       tree var = partition_to_var (SA.map, i);\n \n-      gcc_assert (is_gimple_reg (var));\n+      gcc_assert (!virtual_operand_p (var));\n \n       /* Assign decls to each SSA name partition, share decls for partitions\n          we could have coalesced (those with the same type).  */"}, {"sha": "3b25020340c6461cb7ce1dd88ce6babd969f3e39", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -2128,7 +2128,7 @@ dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent, int flags)\n   for (i = gsi_start_phis (bb); !gsi_end_p (i); gsi_next (&i))\n     {\n       gimple phi = gsi_stmt (i);\n-      if (is_gimple_reg (gimple_phi_result (phi)) || (flags & TDF_VOPS))\n+      if (!virtual_operand_p (gimple_phi_result (phi)) || (flags & TDF_VOPS))\n         {\n           INDENT (indent);\n           pp_string (buffer, \"# \");"}, {"sha": "5be8567d69a420bb462541ea7c0f77fc79de8bff", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -210,7 +210,7 @@ output_bb (struct output_block *ob, basic_block bb, struct function *fn)\n \t  /* Only emit PHIs for gimple registers.  PHI nodes for .MEM\n \t     will be filled in on reading when the SSA form is\n \t     updated.  */\n-\t  if (is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (!virtual_operand_p (gimple_phi_result (phi)))\n \t    output_phi (ob, phi);\n \t}\n "}, {"sha": "67412a0529fa928d9bf3ec217ed109492c99b0b5", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -2110,7 +2110,7 @@ static bool\n scalar_close_phi_node_p (gimple phi)\n {\n   if (gimple_code (phi) != GIMPLE_PHI\n-      || !is_gimple_reg (gimple_phi_result (phi)))\n+      || virtual_operand_p (gimple_phi_result (phi)))\n     return false;\n \n   /* Note that loop close phi nodes should have a single argument\n@@ -2318,7 +2318,7 @@ rewrite_reductions_out_of_ssa (scop_p scop)\n \t{\n \t  gimple phi = gsi_stmt (psi);\n \n-\t  if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    {\n \t      gsi_next (&psi);\n \t      continue;\n@@ -3079,7 +3079,7 @@ rewrite_commutative_reductions_out_of_ssa_loop (scop_p scop,\n \n   for (gsi = gsi_start_phis (exit->dest); !gsi_end_p (gsi); gsi_next (&gsi))\n     if ((res = gimple_phi_result (gsi_stmt (gsi)))\n-\t&& is_gimple_reg (res)\n+\t&& !virtual_operand_p (res)\n \t&& !scev_analyzable_p (res, SCOP_REGION (scop)))\n       changed |= rewrite_commutative_reductions_out_of_ssa_close_phi\n \t(scop, gsi_stmt (gsi));"}, {"sha": "4e5a179bbcaf5004ddf889e6c5c411db4c2e8ded", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -258,7 +258,7 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n \t      gimple stmt = gsi_stmt (bsi);\n \t      tree op = gimple_phi_arg_def (stmt, e->dest_idx);\n \n-\t      if (!is_gimple_reg (gimple_phi_result (stmt)))\n+\t      if (virtual_operand_p (gimple_phi_result (stmt)))\n \t\tcontinue;\n \t      if (TREE_CODE (op) != SSA_NAME\n \t\t  && test_nonssa_use (stmt, op, non_ssa_vars))\n@@ -402,7 +402,7 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n       gimple stmt = gsi_stmt (bsi);\n       tree val = NULL;\n \n-      if (!is_gimple_reg (gimple_phi_result (stmt)))\n+      if (virtual_operand_p (gimple_phi_result (stmt)))\n \tcontinue;\n       for (i = 0; i < gimple_phi_num_args (stmt); i++)\n \t{\n@@ -553,7 +553,7 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n       gimple_stmt_iterator psi;\n \n       for (psi = gsi_start_phis (return_bb); !gsi_end_p (psi); gsi_next (&psi))\n-\tif (is_gimple_reg (gimple_phi_result (gsi_stmt (psi)))\n+\tif (!virtual_operand_p (gimple_phi_result (gsi_stmt (psi)))\n \t    && !(retval\n \t\t && current->split_part_set_retval\n \t\t && TREE_CODE (retval) == SSA_NAME\n@@ -804,9 +804,7 @@ visit_bb (basic_block bb, basic_block return_bb,\n       gimple stmt = gsi_stmt (bsi);\n       unsigned int i;\n \n-      if (is_gimple_debug (stmt))\n-\tcontinue;\n-      if (!is_gimple_reg (gimple_phi_result (stmt)))\n+      if (virtual_operand_p (gimple_phi_result (stmt)))\n \tcontinue;\n       bitmap_set_bit (set_ssa_names,\n \t\t      SSA_NAME_VERSION (gimple_phi_result (stmt)));\n@@ -830,9 +828,7 @@ visit_bb (basic_block bb, basic_block return_bb,\n \t    gimple stmt = gsi_stmt (bsi);\n \t    tree op = gimple_phi_arg_def (stmt, e->dest_idx);\n \n-\t    if (is_gimple_debug (stmt))\n-\t      continue;\n-\t    if (!is_gimple_reg (gimple_phi_result (stmt)))\n+\t    if (virtual_operand_p (gimple_phi_result (stmt)))\n \t      continue;\n \t    if (TREE_CODE (op) == SSA_NAME)\n \t      bitmap_set_bit (used_ssa_names, SSA_NAME_VERSION (op));\n@@ -1158,7 +1154,7 @@ split_function (struct split_point *split_point)\n       for (gsi = gsi_start_phis (return_bb); !gsi_end_p (gsi);)\n \t{\n \t  gimple stmt = gsi_stmt (gsi);\n-\t  if (is_gimple_reg (gimple_phi_result (stmt)))\n+\t  if (!virtual_operand_p (gimple_phi_result (stmt)))\n \t    {\n \t      gsi_next (&gsi);\n \t      continue;\n@@ -1275,7 +1271,7 @@ split_function (struct split_point *split_point)\n \t\t  /* See if there is PHI defining return value.  */\n \t\t  for (psi = gsi_start_phis (return_bb);\n \t\t       !gsi_end_p (psi); gsi_next (&psi))\n-\t\t    if (is_gimple_reg (gimple_phi_result (gsi_stmt (psi))))\n+\t\t    if (!virtual_operand_p (gimple_phi_result (gsi_stmt (psi))))\n \t\t      break;\n \n \t\t  /* When there is PHI, just update its value.  */"}, {"sha": "2adae7445a24f6550e0d6e1dd882cb4f4b7e49ef", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -613,7 +613,7 @@ output_ssa_names (struct output_block *ob, struct function *fn)\n \n       if (ptr == NULL_TREE\n \t  || SSA_NAME_IN_FREE_LIST (ptr)\n-\t  || !is_gimple_reg (ptr))\n+\t  || virtual_operand_p (ptr))\n \tcontinue;\n \n       streamer_write_uhwi (ob, i);"}, {"sha": "bfb797150ba7f36e4f9611e4c0a1fad599c7730b", "filename": "gcc/sese.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -480,14 +480,13 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n       return false;\n     }\n \n-  FOR_EACH_SSA_USE_OPERAND (use_p, copy, op_iter, SSA_OP_ALL_USES)\n+  FOR_EACH_SSA_USE_OPERAND (use_p, copy, op_iter, SSA_OP_USE)\n     {\n       tree old_name = USE_FROM_PTR (use_p);\n       tree new_expr, scev;\n       gimple_seq stmts;\n \n       if (TREE_CODE (old_name) != SSA_NAME\n-\t  || !is_gimple_reg (old_name)\n \t  || SSA_NAME_IS_DEFAULT_DEF (old_name))\n \tcontinue;\n \n@@ -499,8 +498,7 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n \t  tree type_new_expr = TREE_TYPE (new_expr);\n \n \t  if (type_old_name != type_new_expr\n-\t      || (TREE_CODE (new_expr) != SSA_NAME\n-\t\t  && is_gimple_reg (old_name)))\n+\t      || TREE_CODE (new_expr) != SSA_NAME)\n \t    {\n \t      tree var = create_tmp_var (type_old_name, \"var\");\n "}, {"sha": "6ee01a36ef2910cd32ed44a9f105c70440d38336", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1589,7 +1589,7 @@ replace_uses_by (tree name, tree val)\n \t\t  /* This can only occur for virtual operands, since\n \t\t     for the real ones SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n \t\t     would prevent replacement.  */\n-\t\t  gcc_checking_assert (!is_gimple_reg (name));\n+\t\t  gcc_checking_assert (virtual_operand_p (name));\n \t\t  SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val) = 1;\n \t\t}\n \t    }\n@@ -1664,21 +1664,21 @@ gimple_merge_blocks (basic_block a, basic_block b)\n       gimple phi = gsi_stmt (psi);\n       tree def = gimple_phi_result (phi), use = gimple_phi_arg_def (phi, 0);\n       gimple copy;\n-      bool may_replace_uses = !is_gimple_reg (def)\n-\t\t\t      || may_propagate_copy (def, use);\n+      bool may_replace_uses = (virtual_operand_p (def)\n+\t\t\t       || may_propagate_copy (def, use));\n \n       /* In case we maintain loop closed ssa form, do not propagate arguments\n \t of loop exit phi nodes.  */\n       if (current_loops\n \t  && loops_state_satisfies_p (LOOP_CLOSED_SSA)\n-\t  && is_gimple_reg (def)\n+\t  && !virtual_operand_p (def)\n \t  && TREE_CODE (use) == SSA_NAME\n \t  && a->loop_father != b->loop_father)\n \tmay_replace_uses = false;\n \n       if (!may_replace_uses)\n \t{\n-\t  gcc_assert (is_gimple_reg (def));\n+\t  gcc_assert (!virtual_operand_p (def));\n \n \t  /* Note that just emitting the copies is fine -- there is no problem\n \t     with ordering of phi nodes.  This is because A is the single\n@@ -1693,7 +1693,7 @@ gimple_merge_blocks (basic_block a, basic_block b)\n \t  /* If we deal with a PHI for virtual operands, we can simply\n \t     propagate these without fussing with folding or updating\n \t     the stmt.  */\n-\t  if (!is_gimple_reg (def))\n+\t  if (virtual_operand_p (def))\n \t    {\n \t      imm_use_iterator iter;\n \t      use_operand_p use_p;\n@@ -4357,7 +4357,7 @@ verify_gimple_phi (gimple phi)\n       return true;\n     }\n \n-  virtual_p = !is_gimple_reg (phi_result);\n+  virtual_p = virtual_operand_p (phi_result);\n   if (TREE_CODE (phi_result) != SSA_NAME\n       || (virtual_p\n \t  && SSA_NAME_VAR (phi_result) != gimple_vop (cfun)))\n@@ -4379,7 +4379,7 @@ verify_gimple_phi (gimple phi)\n       /* Addressable variables do have SSA_NAMEs but they\n \t are not considered gimple values.  */\n       else if ((TREE_CODE (t) == SSA_NAME\n-\t\t&& virtual_p != !is_gimple_reg (t))\n+\t\t&& virtual_p != virtual_operand_p (t))\n \t       || (virtual_p\n \t\t   && (TREE_CODE (t) != SSA_NAME\n \t\t       || SSA_NAME_VAR (t) != gimple_vop (cfun)))\n@@ -5948,7 +5948,7 @@ replace_ssa_name (tree name, struct pointer_map_t *vars_map,\n   void **loc;\n   tree new_name;\n \n-  gcc_assert (is_gimple_reg (name));\n+  gcc_assert (!virtual_operand_p (name));\n \n   loc = pointer_map_contains (vars_map, name);\n \n@@ -6235,7 +6235,7 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n       tree op = PHI_RESULT (phi);\n       ssa_op_iter oi;\n \n-      if (!is_gimple_reg (op))\n+      if (virtual_operand_p (op))\n \t{\n \t  /* Remove the phi nodes for virtual operands (alias analysis will be\n \t     run for the new function, anyway).  */"}, {"sha": "9220931ffff20a2bfcf071c2f3f5ccc5c295eb02", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -3857,7 +3857,7 @@ cleanup_empty_eh_merge_phis (basic_block new_bb, basic_block old_bb,\n \t}\n       /* If we didn't find the PHI, but it's a VOP, remember to rename\n \t it later, assuming all other tests succeed.  */\n-      else if (!is_gimple_reg (nresult))\n+      else if (virtual_operand_p (nresult))\n \tbitmap_set_bit (rename_virts, SSA_NAME_VERSION (nresult));\n       /* If we didn't find the PHI, and it's a real variable, we know\n \t from the fact that OLD_BB is tree_empty_eh_handler_p that the"}, {"sha": "1086004d3fb1cb0ad7f557c74260df94aab56338", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -410,7 +410,7 @@ if_convertible_phi_p (struct loop *loop, basic_block bb, gimple phi)\n   /* When the flag_tree_loop_if_convert_stores is not set, check\n      that there are no memory writes in the branches of the loop to be\n      if-converted.  */\n-  if (!is_gimple_reg (gimple_phi_result (phi)))\n+  if (virtual_operand_p (gimple_phi_result (phi)))\n     {\n       imm_use_iterator imm_iter;\n       use_operand_p use_p;\n@@ -1262,7 +1262,7 @@ predicate_scalar_phi (gimple phi, tree cond,\n \n   res = gimple_phi_result (phi);\n   /* Do not handle virtual phi nodes.  */\n-  if (!is_gimple_reg (res))\n+  if (virtual_operand_p (res))\n     return;\n \n   bb = gimple_bb (phi);"}, {"sha": "fe46e5d5353d179ff971356b321f5836fb242b80", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1830,7 +1830,7 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n \t    gcc_assert ((e->flags & EDGE_EH)\n \t\t\t|| SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)));\n \n-\t    if (!is_gimple_reg (PHI_RESULT (phi)))\n+\t    if (virtual_operand_p (PHI_RESULT (phi)))\n \t      {\n \t\tmark_virtual_operands_for_renaming (cfun);\n \t\tcontinue;\n@@ -1970,7 +1970,7 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n       phi = gsi_stmt (si);\n       res = PHI_RESULT (phi);\n       new_res = res;\n-      if (is_gimple_reg (res))\n+      if (!virtual_operand_p (res))\n \t{\n \t  walk_tree (&new_res, copy_tree_body_r, id, NULL);\n \t  new_phi = create_phi_node (new_res, new_bb);"}, {"sha": "f340eab2a0fed4f7a66608e7a5b753e8cf0f4908", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -288,7 +288,7 @@ generate_loops_for_partition (struct loop *loop, partition_t partition,\n \tif (!bitmap_bit_p (partition->stmts, x++))\n \t  {\n \t    gimple phi = gsi_stmt (bsi);\n-\t    if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t    if (virtual_operand_p (gimple_phi_result (phi)))\n \t      mark_virtual_phi_result_for_renaming (phi);\n \t    remove_phi_node (&bsi, true);\n \t  }\n@@ -492,7 +492,7 @@ destroy_loop (struct loop *loop)\n       for (gsi = gsi_start_phis (bbs[i]); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gimple phi = gsi_stmt (gsi);\n-\t  if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    mark_virtual_phi_result_for_renaming (phi);\n \t}\n       for (gsi = gsi_start_bb (bbs[i]); !gsi_end_p (gsi); gsi_next (&gsi))"}, {"sha": "5c2e93b9317e4c7c16250c19a16c9e76bf437fb9", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -762,7 +762,7 @@ eliminate_useless_phis (void)\n         {\n \t  gimple phi = gsi_stmt (gsi);\n \t  result = gimple_phi_result (phi);\n-\t  if (!is_gimple_reg (result))\n+\t  if (virtual_operand_p (result))\n \t    {\n #ifdef ENABLE_CHECKING\n \t      size_t i;\n@@ -772,7 +772,7 @@ eliminate_useless_phis (void)\n \t        {\n \t\t  tree arg = PHI_ARG_DEF (phi, i);\n \t\t  if (TREE_CODE (arg) == SSA_NAME\n-\t\t      && is_gimple_reg (arg))\n+\t\t      && !virtual_operand_p (arg))\n \t\t    {\n \t\t      fprintf (stderr, \"Argument of PHI is not virtual (\");\n \t\t      print_generic_expr (stderr, arg, TDF_SLIM);\n@@ -1032,7 +1032,7 @@ insert_backedge_copies (void)\n \t  tree result = gimple_phi_result (phi);\n \t  size_t i;\n \n-\t  if (!is_gimple_reg (result))\n+\t  if (virtual_operand_p (result))\n \t    continue;\n \n \t  for (i = 0; i < gimple_phi_num_args (phi); i++)"}, {"sha": "76bb265954e2183407a2712a436af382fcd28f22", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1517,7 +1517,7 @@ transform_to_exit_first_loop (struct loop *loop, htab_t reduction_list, tree nit\n     {\n       phi = gsi_stmt (gsi);\n       res = PHI_RESULT (phi);\n-      if (!is_gimple_reg (res))\n+      if (virtual_operand_p (res))\n \t{\n \t  gsi_next (&gsi);\n \t  continue;\n@@ -1953,7 +1953,7 @@ gather_scalar_reductions (loop_p loop, htab_t reduction_list)\n       tree res = PHI_RESULT (phi);\n       bool double_reduc;\n \n-      if (!is_gimple_reg (res))\n+      if (virtual_operand_p (res))\n \tcontinue;\n \n       if (!simple_iv (loop, loop, res, &iv, true)\n@@ -2019,7 +2019,7 @@ try_create_reduction_list (loop_p loop, htab_t reduction_list)\n       gimple reduc_phi;\n       tree val = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n \n-      if (is_gimple_reg (val))\n+      if (!virtual_operand_p (val))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -2074,7 +2074,7 @@ try_create_reduction_list (loop_p loop, htab_t reduction_list)\n       tree def = PHI_RESULT (phi);\n       affine_iv iv;\n \n-      if (is_gimple_reg (def) && !simple_iv (loop, loop, def, &iv, true))\n+      if (!virtual_operand_p (def) && !simple_iv (loop, loop, def, &iv, true))\n \t{\n \t  struct reduction_info *red;\n "}, {"sha": "d88bb1aa861371950c79edc5d90de6307a2b162f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -3039,7 +3039,7 @@ analyze_scalar_evolution_for_all_loop_phi_nodes (VEC(gimple,heap) **exit_conditi\n       for (psi = gsi_start_phis (bb); !gsi_end_p (psi); gsi_next (&psi))\n \t{\n \t  phi = gsi_stmt (psi);\n-\t  if (is_gimple_reg (PHI_RESULT (phi)))\n+\t  if (!virtual_operand_p (PHI_RESULT (phi)))\n \t    {\n \t      chrec = instantiate_parameters\n \t\t        (loop,\n@@ -3328,7 +3328,7 @@ scev_const_prop (void)\n \t  phi = gsi_stmt (psi);\n \t  name = PHI_RESULT (phi);\n \n-\t  if (!is_gimple_reg (name))\n+\t  if (virtual_operand_p (name))\n \t    continue;\n \n \t  type = TREE_TYPE (name);\n@@ -3404,7 +3404,7 @@ scev_const_prop (void)\n \t  phi = gsi_stmt (psi);\n \t  rslt = PHI_RESULT (phi);\n \t  def = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n-\t  if (!is_gimple_reg (def))\n+\t  if (virtual_operand_p (def))\n \t    {\n \t      gsi_next (&psi);\n \t      continue;"}, {"sha": "8e42a51d53d7d516359162f02ee80d69781b8413", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -236,7 +236,6 @@ debug_lattice_value (prop_value_t val)\n static prop_value_t\n get_default_value (tree var)\n {\n-  tree sym = SSA_NAME_VAR (var);\n   prop_value_t val = { UNINITIALIZED, NULL_TREE, { 0, 0 } };\n   gimple stmt;\n \n@@ -248,8 +247,8 @@ get_default_value (tree var)\n \t before being initialized.  If VAR is a local variable, we\n \t can assume initially that it is UNDEFINED, otherwise we must\n \t consider it VARYING.  */\n-      if (is_gimple_reg (sym)\n-\t  && TREE_CODE (sym) == VAR_DECL)\n+      if (!virtual_operand_p (var)\n+\t  && TREE_CODE (SSA_NAME_VAR (var)) == VAR_DECL)\n \tval.lattice_val = UNDEFINED;\n       else\n \t{\n@@ -762,7 +761,7 @@ ccp_initialize (void)\n         {\n           gimple phi = gsi_stmt (i);\n \n-\t  if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n             prop_set_simulate_again (phi, false);\n \t  else\n             prop_set_simulate_again (phi, true);"}, {"sha": "f4f5eb3373cff528c4b7ec625d33c5a799b45464", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1101,7 +1101,7 @@ create_outofssa_var_map (coalesce_list_p cl, bitmap used_in_copy)\n   for (i = 1; i < num_ssa_names; i++)\n     {\n       var = ssa_name (i);\n-      if (var != NULL_TREE && is_gimple_reg (var))\n+      if (var != NULL_TREE && !virtual_operand_p (var))\n         {\n \t  /* Add coalesces between all the result decls.  */\n \t  if (SSA_NAME_VAR (var)"}, {"sha": "04a376ed970b04164c2be32b730388f37d090074", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -74,10 +74,10 @@ may_propagate_copy (tree dest, tree orig)\n     return false;\n \n   /* Propagating virtual operands is always ok.  */\n-  if (TREE_CODE (dest) == SSA_NAME && !is_gimple_reg (dest))\n+  if (TREE_CODE (dest) == SSA_NAME && virtual_operand_p (dest))\n     {\n       /* But only between virtual operands.  */\n-      gcc_assert (TREE_CODE (orig) == SSA_NAME && !is_gimple_reg (orig));\n+      gcc_assert (TREE_CODE (orig) == SSA_NAME && virtual_operand_p (orig));\n \n       return true;\n     }\n@@ -713,7 +713,7 @@ init_copy_prop (void)\n           tree def;\n \n \t  def = gimple_phi_result (phi);\n-\t  if (!is_gimple_reg (def))\n+\t  if (virtual_operand_p (def))\n             prop_set_simulate_again (phi, false);\n \t  else\n             prop_set_simulate_again (phi, true);"}, {"sha": "0112fc4c1c3f090f10beec3224c7fb105ff7d13d", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -720,7 +720,7 @@ propagate_necessity (struct edge_list *el)\n       if (gimple_code (stmt) == GIMPLE_PHI\n \t  /* We do not process virtual PHI nodes nor do we track their\n \t     necessity.  */\n-\t  && is_gimple_reg (gimple_phi_result (stmt)))\n+\t  && !virtual_operand_p (gimple_phi_result (stmt)))\n \t{\n \t  /* PHI nodes are somewhat special in that each PHI alternative has\n \t     data and control dependencies.  All the statements feeding the\n@@ -1052,7 +1052,7 @@ remove_dead_phis (basic_block bb)\n \n       /* We do not track necessity of virtual PHI nodes.  Instead do\n          very simple dead PHI removal here.  */\n-      if (!is_gimple_reg (gimple_phi_result (phi)))\n+      if (virtual_operand_p (gimple_phi_result (phi)))\n \t{\n \t  /* Virtual PHI nodes with one or identical arguments\n \t     can be removed.  */\n@@ -1130,7 +1130,7 @@ forward_edge_to_pdom (edge e, basic_block post_dom_bb)\n \n \t  /* PHIs for virtuals have no control dependency relation on them.\n \t     We are lost here and must force renaming of the symbol.  */\n-\t  if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    {\n \t      mark_virtual_phi_result_for_renaming (phi);\n \t      remove_phi_node (&gsi, true);\n@@ -1391,7 +1391,7 @@ eliminate_unnecessary_stmts (void)\n \t      || !(bb->flags & BB_REACHABLE))\n \t    {\n \t      for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t\tif (!is_gimple_reg (gimple_phi_result (gsi_stmt (gsi))))\n+\t\tif (virtual_operand_p (gimple_phi_result (gsi_stmt (gsi))))\n \t\t  {\n \t\t    bool found = false;\n \t\t    imm_use_iterator iter;"}, {"sha": "bd6ac9a76dbc3d3516e2832710279264d8dffd2c", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -240,7 +240,7 @@ partition_view_init (var_map map)\n   for (x = 0; x < map->partition_size; x++)\n     {\n       tmp = partition_find (map->var_partition, x);\n-      if (ssa_name (tmp) != NULL_TREE && is_gimple_reg (ssa_name (tmp))\n+      if (ssa_name (tmp) != NULL_TREE && !virtual_operand_p (ssa_name (tmp))\n \t  && (!has_zero_uses (ssa_name (tmp))\n \t      || !SSA_NAME_IS_DEFAULT_DEF (ssa_name (tmp))))\n \tbitmap_set_bit (used, tmp);\n@@ -750,7 +750,7 @@ remove_unused_locals (void)\n \t  tree def;\n \t  gimple phi = gsi_stmt (gsi);\n \n-\t  if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    continue;\n \n \t  def = gimple_phi_result (phi);\n@@ -1216,7 +1216,7 @@ void\n register_ssa_partition_check (tree ssa_var)\n {\n   gcc_assert (TREE_CODE (ssa_var) == SSA_NAME);\n-  if (!is_gimple_reg (ssa_var))\n+  if (virtual_operand_p (ssa_var))\n     {\n       fprintf (stderr, \"Illegally registering a virtual SSA name :\");\n       print_generic_expr (stderr, ssa_var, TDF_SLIM);"}, {"sha": "e40a6e4098dedc2de18d4fce3590ecc5b1332b2e", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -356,7 +356,7 @@ movement_possibility (gimple stmt)\n \n   if (gimple_code (stmt) == GIMPLE_PHI\n       && gimple_phi_num_args (stmt) <= 2\n-      && is_gimple_reg (gimple_phi_result (stmt))\n+      && !virtual_operand_p (gimple_phi_result (stmt))\n       && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_phi_result (stmt)))\n     return MOVE_POSSIBLE;\n \n@@ -1327,7 +1327,7 @@ move_computations_stmt (struct dom_walk_data *dw_data,\n \t       !gsi_end_p (gsi2); gsi_next (&gsi2))\n \t    {\n \t      gimple phi = gsi_stmt (gsi2);\n-\t      if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t      if (virtual_operand_p (gimple_phi_result (phi)))\n \t\t{\n \t\t  gimple_set_vuse (stmt, PHI_ARG_DEF_FROM_EDGE (phi, e));\n \t\t  break;"}, {"sha": "9e0c40a7347389510a881af00b5eda4dea2c0305", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -980,7 +980,7 @@ determine_biv_step (gimple phi)\n   tree name = PHI_RESULT (phi);\n   affine_iv iv;\n \n-  if (!is_gimple_reg (name))\n+  if (virtual_operand_p (name))\n     return NULL_TREE;\n \n   if (!simple_iv (loop, loop, name, &iv, true))\n@@ -1225,7 +1225,7 @@ record_invariant (struct ivopts_data *data, tree op, bool nonlinear_use)\n   struct version_info *info;\n \n   if (TREE_CODE (op) != SSA_NAME\n-      || !is_gimple_reg (op))\n+      || virtual_operand_p (op))\n     return;\n \n   bb = gimple_bb (SSA_NAME_DEF_STMT (op));\n@@ -1927,7 +1927,7 @@ find_interesting_uses_outside (struct ivopts_data *data, edge exit)\n     {\n       phi = gsi_stmt (psi);\n       def = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n-      if (is_gimple_reg (def))\n+      if (!virtual_operand_p (def))\n         find_interesting_uses_op (data, def);\n     }\n }\n@@ -5048,7 +5048,7 @@ determine_set_costs (struct ivopts_data *data)\n       phi = gsi_stmt (psi);\n       op = PHI_RESULT (phi);\n \n-      if (!is_gimple_reg (op))\n+      if (virtual_operand_p (op))\n \tcontinue;\n \n       if (get_iv (data, op))"}, {"sha": "5045eccd55da13f90afe4facadf9e9b6eb93ce87", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -169,7 +169,7 @@ add_exit_phis_var (tree var, bitmap livein, bitmap exits)\n   basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (var));\n   bitmap_iterator bi;\n \n-  gcc_checking_assert (is_gimple_reg (var));\n+  gcc_checking_assert (! virtual_operand_p (var));\n   bitmap_clear_bit (livein, def_bb->index);\n \n   def = BITMAP_ALLOC (&loop_renamer_obstack);\n@@ -243,7 +243,7 @@ find_uses_to_rename_use (basic_block bb, tree use, bitmap *use_blocks,\n     return;\n \n   /* We don't need to keep virtual operands in loop-closed form.  */\n-  if (!is_gimple_reg (use))\n+  if (virtual_operand_p (use))\n     return;\n \n   ver = SSA_NAME_VERSION (use);\n@@ -417,7 +417,7 @@ check_loop_closed_ssa_use (basic_block bb, tree use)\n   gimple def;\n   basic_block def_bb;\n \n-  if (TREE_CODE (use) != SSA_NAME || !is_gimple_reg (use))\n+  if (TREE_CODE (use) != SSA_NAME || virtual_operand_p (use))\n     return;\n \n   def = SSA_NAME_DEF_STMT (use);\n@@ -1121,7 +1121,7 @@ rewrite_phi_with_iv (loop_p loop,\n   gimple stmt, phi = gsi_stmt (*psi);\n   tree atype, mtype, val, res = PHI_RESULT (phi);\n \n-  if (!is_gimple_reg (res) || res == main_iv)\n+  if (virtual_operand_p (res) || res == main_iv)\n     {\n       gsi_next (psi);\n       return;\n@@ -1205,7 +1205,7 @@ canonicalize_loop_ivs (struct loop *loop, tree *nit, bool bump_in_latch)\n       bool uns;\n \n       type = TREE_TYPE (res);\n-      if (!is_gimple_reg (res)\n+      if (virtual_operand_p (res)\n \t  || (!INTEGRAL_TYPE_P (type)\n \t      && !POINTER_TYPE_P (type))\n \t  || TYPE_PRECISION (type) < precision)"}, {"sha": "0d6eeb69055f4fd80f79d47df003435d7525c64f", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -531,8 +531,8 @@ execute_cse_reciprocals (void)\n \t{\n \t  phi = gsi_stmt (gsi);\n \t  def = PHI_RESULT (phi);\n-\t  if (FLOAT_TYPE_P (TREE_TYPE (def))\n-\t      && is_gimple_reg (def))\n+\t  if (! virtual_operand_p (def)\n+\t      && FLOAT_TYPE_P (TREE_TYPE (def)))\n \t    execute_cse_reciprocals_1 (NULL, def);\n \t}\n "}, {"sha": "0dcfbc7a8bc2250c7bd6d0e903670566b75a6b91", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1820,7 +1820,8 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n       gimple_stmt_iterator gsi2;\n       basic_block bb_for_def1, bb_for_def2;\n \n-      if (gimple_phi_num_args (phi_stmt) != 2)\n+      if (gimple_phi_num_args (phi_stmt) != 2\n+\t  || virtual_operand_p (gimple_phi_result (phi_stmt)))\n \tcontinue;\n \n       arg1 = gimple_phi_arg_def (phi_stmt, 0);\n@@ -1829,9 +1830,7 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n       if (TREE_CODE (arg1) != SSA_NAME\n \t  || TREE_CODE (arg2) != SSA_NAME\n \t  || SSA_NAME_IS_DEFAULT_DEF (arg1)\n-\t  || SSA_NAME_IS_DEFAULT_DEF (arg2)\n-\t  || !is_gimple_reg (arg1)\n-\t  || !is_gimple_reg (arg2))\n+\t  || SSA_NAME_IS_DEFAULT_DEF (arg2))\n \tcontinue;\n \n       def1 = SSA_NAME_DEF_STMT (arg1);"}, {"sha": "3571479102a0845edfa71e7977f8cc4242e88797", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -3803,7 +3803,7 @@ make_values_for_phi (gimple phi, basic_block block)\n \n   /* We have no need for virtual phis, as they don't represent\n      actual computations.  */\n-  if (is_gimple_reg (result))\n+  if (!virtual_operand_p (result))\n     {\n       pre_expr e = get_or_alloc_expr_for_name (result);\n       add_to_value (get_expr_value_id (e), e);\n@@ -3853,7 +3853,7 @@ compute_avail (void)\n       if (!name\n \t  || !SSA_NAME_IS_DEFAULT_DEF (name)\n \t  || has_zero_uses (name)\n-\t  || !is_gimple_reg (name))\n+\t  || virtual_operand_p (name))\n \tcontinue;\n \n       e = get_or_alloc_expr_for_name (name);\n@@ -4456,7 +4456,7 @@ eliminate (void)\n \t     replacing the PHI with a single copy if possible.\n \t     Do not touch inserted, single-argument or virtual PHIs.  */\n \t  if (gimple_phi_num_args (phi) == 1\n-\t      || !is_gimple_reg (res))\n+\t      || virtual_operand_p (res))\n \t    {\n \t      gsi_next (&gsi);\n \t      continue;"}, {"sha": "e56b012cd6154cd8364812cfc17ba3cc44e271b1", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1028,7 +1028,7 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n \tgimple_stmt_iterator gsi;\n \n \tif (!name\n-\t    || !is_gimple_reg (name))\n+\t    || virtual_operand_p (name))\n \t  continue;\n \n \tdef_stmt = SSA_NAME_DEF_STMT (name);"}, {"sha": "9c85391218abab72e2106a9e939492dfd7c4a500", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -234,7 +234,7 @@ phi_rank (gimple stmt)\n \n   /* Ignore virtual SSA_NAMEs.  */\n   res = gimple_phi_result (stmt);\n-  if (!is_gimple_reg (res))\n+  if (virtual_operand_p (res))\n     return bb_rank[bb->index];\n \n   /* The phi definition must have a single use, and that use must be"}, {"sha": "d2b6e25f138b57b7638afa4e2eb9736d5607b09a", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1890,7 +1890,7 @@ strlen_enter_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t    {\n \t      gimple phi = gsi_stmt (gsi);\n-\t      if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t      if (virtual_operand_p (gimple_phi_result (phi)))\n \t\t{\n \t\t  bitmap visited = BITMAP_ALLOC (NULL);\n \t\t  int count_vdef = 100;\n@@ -1908,7 +1908,7 @@ strlen_enter_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n     {\n       gimple phi = gsi_stmt (gsi);\n       tree result = gimple_phi_result (phi);\n-      if (is_gimple_reg (result) && POINTER_TYPE_P (TREE_TYPE (result)))\n+      if (!virtual_operand_p (result) && POINTER_TYPE_P (TREE_TYPE (result)))\n \t{\n \t  int idx = get_stridx (gimple_phi_arg_def (phi, 0));\n \t  if (idx != 0)"}, {"sha": "6c60e002532b4e79db1ba90e6fe4df7b280accdb", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -6589,7 +6589,7 @@ compute_points_to_sets (void)\n \t{\n \t  gimple phi = gsi_stmt (gsi);\n \n-\t  if (is_gimple_reg (gimple_phi_result (phi)))\n+\t  if (! virtual_operand_p (gimple_phi_result (phi)))\n \t    find_func_aliases (phi);\n \t}\n \n@@ -6966,7 +6966,7 @@ ipa_pta_execute (void)\n \t    {\n \t      gimple phi = gsi_stmt (gsi);\n \n-\t      if (is_gimple_reg (gimple_phi_result (phi)))\n+\t      if (! virtual_operand_p (gimple_phi_result (phi)))\n \t\tfind_func_aliases (phi);\n \t    }\n "}, {"sha": "8d55030e071aac01f041696b3735922feaa5a76a", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -480,7 +480,7 @@ same_succ_hash (const void *ve)\n \t  tree lhs = gimple_phi_result (phi);\n \t  tree val = gimple_phi_arg_def (phi, n);\n \n-\t  if (!is_gimple_reg (lhs))\n+\t  if (virtual_operand_p (lhs))\n \t    continue;\n \t  update_dep_bb (bb, val);\n \t}\n@@ -834,7 +834,7 @@ release_last_vdef (basic_block bb)\n       gimple phi = gsi_stmt (i);\n       tree res = gimple_phi_result (phi);\n \n-      if (is_gimple_reg (res))\n+      if (!virtual_operand_p (res))\n \tcontinue;\n \n       mark_virtual_phi_result_for_renaming (phi);\n@@ -1252,7 +1252,7 @@ same_phi_alternatives_1 (basic_block dest, edge e1, edge e2)\n       tree val1 = gimple_phi_arg_def (phi, n1);\n       tree val2 = gimple_phi_arg_def (phi, n2);\n \n-      if (!is_gimple_reg (lhs))\n+      if (virtual_operand_p (lhs))\n \tcontinue;\n \n       if (operand_equal_for_phi_arg_p (val1, val2))\n@@ -1310,7 +1310,7 @@ bb_has_non_vop_phi (basic_block bb)\n     return true;\n \n   phi = gimple_seq_first_stmt (phis);\n-  return is_gimple_reg (gimple_phi_result (phi));\n+  return !virtual_operand_p (gimple_phi_result (phi));\n }\n \n /* Returns true if redirecting the incoming edges of FROM to TO maintains the\n@@ -1432,7 +1432,7 @@ vop_phi (basic_block bb)\n   for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       stmt = gsi_stmt (gsi);\n-      if (is_gimple_reg (gimple_phi_result (stmt)))\n+      if (! virtual_operand_p (gimple_phi_result (stmt)))\n \tcontinue;\n       return stmt;\n     }"}, {"sha": "105e3abdec3122930f21534f400acae0602e49b9", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -204,7 +204,7 @@ record_temporary_equivalences_from_phis (edge e, VEC(tree, heap) **stack)\n \n       /* We consider any non-virtual PHI as a statement since it\n \t count result in a constant assignment or copy operation.  */\n-      if (is_gimple_reg (dst))\n+      if (!virtual_operand_p (dst))\n \tstmt_count++;\n \n       record_temporary_equivalence (dst, src, stack);"}, {"sha": "cc58870c7d841bc49c3887d64cdf1d92d5eebfba", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1923,8 +1923,8 @@ warn_uninitialized_phi (gimple phi, VEC(gimple, heap) **worklist,\n   gimple uninit_use_stmt = 0;\n   tree uninit_op;\n \n-  /* Don't look at memory tags.  */\n-  if (!is_gimple_reg (gimple_phi_result (phi)))\n+  /* Don't look at virtual operands.  */\n+  if (virtual_operand_p (gimple_phi_result (phi)))\n     return;\n \n   uninit_opnds = compute_uninit_opnds_pos (phi);\n@@ -1988,8 +1988,8 @@ execute_late_warn_uninitialized (void)\n \n         n = gimple_phi_num_args (phi);\n \n-        /* Don't look at memory tags.  */\n-        if (!is_gimple_reg (gimple_phi_result (phi)))\n+        /* Don't look at virtual operands.  */\n+        if (virtual_operand_p (gimple_phi_result (phi)))\n           continue;\n \n         for (i = 0; i < n; ++i)"}, {"sha": "97a8ba5eb6079064427b909e0836db251b5fd0dd", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -642,7 +642,7 @@ verify_ssa_name (tree ssa_name, bool is_virtual)\n       return true;\n     }\n \n-  if (is_virtual && is_gimple_reg (ssa_name))\n+  if (is_virtual && !virtual_operand_p (ssa_name))\n     {\n       error (\"found a virtual definition for a GIMPLE register\");\n       return true;\n@@ -654,7 +654,7 @@ verify_ssa_name (tree ssa_name, bool is_virtual)\n       return true;\n     }\n \n-  if (!is_virtual && !is_gimple_reg (ssa_name))\n+  if (!is_virtual && virtual_operand_p (ssa_name))\n     {\n       error (\"found a real definition for a non-register\");\n       return true;\n@@ -864,7 +864,7 @@ verify_phi_args (gimple phi, basic_block bb, basic_block *definition_block)\n \n       if (TREE_CODE (op) == SSA_NAME)\n \t{\n-\t  err = verify_ssa_name (op, !is_gimple_reg (gimple_phi_result (phi)));\n+\t  err = verify_ssa_name (op, virtual_operand_p (gimple_phi_result (phi)));\n \t  err |= verify_use (e->src, definition_block[SSA_NAME_VERSION (op)],\n \t\t\t     op_p, phi, e->flags & EDGE_ABNORMAL, NULL);\n \t}\n@@ -938,14 +938,14 @@ verify_ssa (bool check_modified_stmt)\n \t  gimple stmt;\n \t  TREE_VISITED (name) = 0;\n \n-\t  verify_ssa_name (name, !is_gimple_reg (name));\n+\t  verify_ssa_name (name, virtual_operand_p (name));\n \n \t  stmt = SSA_NAME_DEF_STMT (name);\n \t  if (!gimple_nop_p (stmt))\n \t    {\n \t      basic_block bb = gimple_bb (stmt);\n \t      verify_def (bb, definition_block,\n-\t\t\t  name, stmt, !is_gimple_reg (name));\n+\t\t\t  name, stmt, virtual_operand_p (name));\n \n \t    }\n \t}"}, {"sha": "8965ca3790cc840fb0fb6c0e278a9617b2801945", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -791,7 +791,7 @@ execute_optimize_stdarg (void)\n \t      gimple phi = gsi_stmt (i);\n \t      lhs = PHI_RESULT (phi);\n \n-\t      if (!is_gimple_reg (lhs))\n+\t      if (virtual_operand_p (lhs))\n \t\tcontinue;\n \n \t      FOR_EACH_PHI_ARG (uop, phi, soi, SSA_OP_USE)"}, {"sha": "29ed23fd65e1d3aa97ec4e4af1e3264d4abe48be", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -545,7 +545,7 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n \n       /** 2. Handle loop-closed-ssa-form phis  **/\n \n-      if (!is_gimple_reg (PHI_RESULT (orig_phi)))\n+      if (virtual_operand_p (PHI_RESULT (orig_phi)))\n \tcontinue;\n \n       /* 2.1. Generate new phi node in NEW_EXIT_BB:  */\n@@ -1176,12 +1176,12 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n      in the same form).  Doing this early simplifies the checking what\n      uses should be renamed.  */\n   for (gsi = gsi_start_phis (loop->header); !gsi_end_p (gsi); gsi_next (&gsi))\n-    if (!is_gimple_reg (gimple_phi_result (gsi_stmt (gsi))))\n+    if (virtual_operand_p (gimple_phi_result (gsi_stmt (gsi))))\n       {\n \tgimple phi = gsi_stmt (gsi);\n \tfor (gsi = gsi_start_phis (exit_e->dest);\n \t     !gsi_end_p (gsi); gsi_next (&gsi))\n-\t  if (!is_gimple_reg (gimple_phi_result (gsi_stmt (gsi))))\n+\t  if (virtual_operand_p (gimple_phi_result (gsi_stmt (gsi))))\n \t    break;\n \tif (gsi_end_p (gsi))\n \t  {\n@@ -1659,7 +1659,7 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n       /* Skip virtual phi's. The data dependences that are associated with\n          virtual defs/uses (i.e., memory accesses) are analyzed elsewhere.  */\n \n-      if (!is_gimple_reg (PHI_RESULT (phi)))\n+      if (virtual_operand_p (PHI_RESULT (phi)))\n \t{\n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    fprintf (vect_dump, \"virtual phi. skip.\");\n@@ -1789,7 +1789,7 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n         }\n \n       /* Skip virtual phi's.  */\n-      if (!is_gimple_reg (PHI_RESULT (phi)))\n+      if (virtual_operand_p (PHI_RESULT (phi)))\n \t{\n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    fprintf (vect_dump, \"virtual phi. skip.\");"}, {"sha": "67d0eb17d137a316898f43708b0cf998d60b6a4f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -555,7 +555,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \n       /* Skip virtual phi's.  The data dependences that are associated with\n          virtual defs/uses (i.e., memory accesses) are analyzed elsewhere.  */\n-      if (!is_gimple_reg (def))\n+      if (virtual_operand_p (def))\n \tcontinue;\n \n       STMT_VINFO_DEF_TYPE (stmt_vinfo) = vect_unknown_def_type;\n@@ -604,8 +604,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n           print_gimple_stmt (vect_dump, phi, 0, TDF_SLIM);\n         }\n \n-      gcc_assert (is_gimple_reg (def));\n-      gcc_assert (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n+      gcc_assert (!virtual_operand_p (def)\n+\t\t  && STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n \n       nested_cycle = (loop != LOOP_VINFO_LOOP (loop_vinfo));\n       reduc_stmt = vect_force_simple_reduction (loop_vinfo, phi, !nested_cycle,"}, {"sha": "156bdd4730ec33869b8fac075848f5a05b1bc364", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -6142,11 +6142,13 @@ remove_range_assertions (void)\n static bool\n stmt_interesting_for_vrp (gimple stmt)\n {\n-  if (gimple_code (stmt) == GIMPLE_PHI\n-      && is_gimple_reg (gimple_phi_result (stmt))\n-      && (INTEGRAL_TYPE_P (TREE_TYPE (gimple_phi_result (stmt)))\n-\t  || POINTER_TYPE_P (TREE_TYPE (gimple_phi_result (stmt)))))\n-    return true;\n+  if (gimple_code (stmt) == GIMPLE_PHI)\n+    {\n+      tree res = gimple_phi_result (stmt);\n+      return (!virtual_operand_p (res)\n+\t      && (INTEGRAL_TYPE_P (TREE_TYPE (res))\n+\t\t  || POINTER_TYPE_P (TREE_TYPE (res))));\n+    }\n   else if (is_gimple_assign (stmt) || is_gimple_call (stmt))\n     {\n       tree lhs = gimple_get_lhs (stmt);"}, {"sha": "25445a10924845cadee14edef4271ab2bf39f4e3", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea057359a72da39e2938bbaa97b540822995f2b7/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=ea057359a72da39e2938bbaa97b540822995f2b7", "patch": "@@ -1669,7 +1669,7 @@ gimple_divmod_values_to_profile (gimple stmt, histogram_values *values)\n \n       VEC_reserve (histogram_value, heap, *values, 3);\n \n-      if (is_gimple_reg (divisor))\n+      if (TREE_CODE (divisor) == SSA_NAME)\n \t/* Check for the case where the divisor is the same value most\n \t   of the time.  */\n \tVEC_quick_push (histogram_value, *values,"}]}