{"sha": "e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "node_id": "C_kwDOANBUbNoAKGUzZGVmYTEwYmM2M2JhM2Y4MWRhMDBmYzMyMmI1YjFlMGQxNzE3ZWQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-30T23:02:58Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-02T11:26:23Z"}, "message": "Support Typechecking of ADT's of enums\n\nEnums are ADT's with multiple variants where as structs are ADT's with a\nsingle variant, this changes the typechecking on construction of these to\nsupport enums.\n\nAddresses #79", "tree": {"sha": "9865d6531fa25b201170de5045167bb7c52e2b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9865d6531fa25b201170de5045167bb7c52e2b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8043380b63ffe4fc6e7d01e6b58119aac26ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8043380b63ffe4fc6e7d01e6b58119aac26ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8043380b63ffe4fc6e7d01e6b58119aac26ebb"}], "stats": {"total": 152, "additions": 121, "deletions": 31}, "files": [{"sha": "2a6bae9ca7d26c76f8514d0106e673d633d515bc", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -198,7 +198,33 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = TyTy::TypeCheckCallExpr::go (function_tyty, expr, context);\n+    TyTy::VariantDef &variant = TyTy::VariantDef::get_error_node ();\n+    if (function_tyty->get_kind () == TyTy::TypeKind::ADT)\n+      {\n+\tTyTy::ADTType *adt = static_cast<TyTy::ADTType *> (function_tyty);\n+\tif (adt->is_enum ())\n+\t  {\n+\t    // lookup variant id\n+\t    HirId variant_id;\n+\t    bool ok = context->lookup_variant_definition (\n+\t      expr.get_fnexpr ()->get_mappings ().get_hirid (), &variant_id);\n+\t    rust_assert (ok);\n+\n+\t    TyTy::VariantDef *lookup_variant = nullptr;\n+\t    ok = adt->lookup_variant_by_id (variant_id, &lookup_variant);\n+\t    rust_assert (ok);\n+\n+\t    variant = *lookup_variant;\n+\t  }\n+\telse\n+\t  {\n+\t    rust_assert (adt->number_of_variants () == 1);\n+\t    variant = *adt->get_variants ().at (0);\n+\t  }\n+      }\n+\n+    infered\n+      = TyTy::TypeCheckCallExpr::go (function_tyty, expr, variant, context);\n     if (infered == nullptr)\n       {\n \trust_error_at (expr.get_locus (), \"failed to lookup type to CallExpr\");"}, {"sha": "8aa4484f62816eb744bcf95c586eeb55b1ccd81f", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -359,7 +359,24 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n       prev_segment = tyseg;\n       tyseg = candidate.ty;\n \n-      if (candidate.is_impl_candidate ())\n+      if (candidate.is_enum_candidate ())\n+\t{\n+\t  const TyTy::VariantDef *variant = candidate.item.enum_field.variant;\n+\n+\t  CrateNum crate_num = mappings->get_current_crate ();\n+\t  HirId variant_id = variant->get_id ();\n+\n+\t  HIR::Item *enum_item\n+\t    = mappings->lookup_hir_item (crate_num, variant_id);\n+\t  rust_assert (enum_item != nullptr);\n+\n+\t  resolved_node_id = enum_item->get_mappings ().get_nodeid ();\n+\n+\t  // insert the id of the variant we are resolved to\n+\t  context->insert_variant_definition (expr_mappings.get_hirid (),\n+\t\t\t\t\t      variant_id);\n+\t}\n+      else if (candidate.is_impl_candidate ())\n \t{\n \t  resolved_node_id\n \t    = candidate.item.impl.impl_item->get_impl_mappings ().get_nodeid ();"}, {"sha": "4c4b128fc98bf6903736ccfceaaf39fcf552999e", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct-field.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -51,14 +51,16 @@ class TypeCheckStructExpr : public TypeCheckBase\n   TypeCheckStructExpr (HIR::Expr *e)\n     : TypeCheckBase (),\n       resolved (new TyTy::ErrorType (e->get_mappings ().get_hirid ())),\n-      struct_path_resolved (nullptr)\n+      struct_path_resolved (nullptr),\n+      variant (&TyTy::VariantDef::get_error_node ())\n   {}\n \n   // result\n   TyTy::BaseType *resolved;\n \n   // internal state:\n   TyTy::ADTType *struct_path_resolved;\n+  TyTy::VariantDef *variant;\n   TyTy::BaseType *resolved_field_value_expr;\n   std::set<std::string> fields_assigned;\n   std::map<size_t, HIR::StructExprField *> adtFieldIndexToField;"}, {"sha": "78340c3f1824a18ce68cef539c61d91fcd8e03f7", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct.cc", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -53,6 +53,25 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \t}\n     }\n \n+  // figure out the variant\n+  if (struct_path_resolved->is_enum ())\n+    {\n+      // lookup variant id\n+      HirId variant_id;\n+      bool ok = context->lookup_variant_definition (\n+\tstruct_expr.get_struct_name ().get_mappings ().get_hirid (),\n+\t&variant_id);\n+      rust_assert (ok);\n+\n+      ok = struct_path_resolved->lookup_variant_by_id (variant_id, &variant);\n+      rust_assert (ok);\n+    }\n+  else\n+    {\n+      rust_assert (struct_path_resolved->number_of_variants () == 1);\n+      variant = struct_path_resolved->get_variants ().at (0);\n+    }\n+\n   std::vector<TyTy::StructFieldType *> infered_fields;\n   bool ok = true;\n \n@@ -80,10 +99,6 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n     }\n \n   // check the arguments are all assigned and fix up the ordering\n-  rust_assert (!struct_path_resolved->is_enum ());\n-  rust_assert (struct_path_resolved->number_of_variants () == 1);\n-  TyTy::VariantDef *variant = struct_path_resolved->get_variants ().at (0);\n-\n   if (fields_assigned.size () != variant->num_fields ())\n     {\n       if (struct_def->is_union ())\n@@ -197,10 +212,6 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n       return;\n     }\n \n-  rust_assert (!struct_path_resolved->is_enum ());\n-  rust_assert (struct_path_resolved->number_of_variants () == 1);\n-  TyTy::VariantDef *variant = struct_path_resolved->get_variants ().at (0);\n-\n   size_t field_index;\n   TyTy::StructFieldType *field_type;\n   bool ok = variant->lookup_field (field.field_name, &field_type, &field_index);\n@@ -230,10 +241,6 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n       return;\n     }\n \n-  rust_assert (!struct_path_resolved->is_enum ());\n-  rust_assert (struct_path_resolved->number_of_variants () == 1);\n-  TyTy::VariantDef *variant = struct_path_resolved->get_variants ().at (0);\n-\n   size_t field_index;\n   TyTy::StructFieldType *field_type;\n   bool ok = variant->lookup_field (field_name, &field_type, &field_index);\n@@ -262,10 +269,6 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n       return;\n     }\n \n-  rust_assert (!struct_path_resolved->is_enum ());\n-  rust_assert (struct_path_resolved->number_of_variants () == 1);\n-  TyTy::VariantDef *variant = struct_path_resolved->get_variants ().at (0);\n-\n   size_t field_index;\n   TyTy::StructFieldType *field_type;\n   bool ok = variant->lookup_field (field.get_field_name (), &field_type,"}, {"sha": "aa10f411d015b5ab8a9779a6d06c6bc7d269c0eb", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -214,6 +214,24 @@ class TypeCheckContext\n     return true;\n   }\n \n+  void insert_variant_definition (HirId id, HirId variant)\n+  {\n+    auto it = variants.find (id);\n+    rust_assert (it == variants.end ());\n+\n+    variants[id] = variant;\n+  }\n+\n+  bool lookup_variant_definition (HirId id, HirId *variant)\n+  {\n+    auto it = variants.find (id);\n+    if (it == variants.end ())\n+      return false;\n+\n+    *variant = it->second;\n+    return true;\n+  }\n+\n private:\n   TypeCheckContext ();\n \n@@ -234,6 +252,9 @@ class TypeCheckContext\n \n   // adjustment mappings\n   std::map<HirId, std::vector<Adjustment>> autoderef_mappings;\n+\n+  // variants\n+  std::map<HirId, HirId> variants;\n };\n \n class TypeResolution"}, {"sha": "9ff5f6f393475acbbd9566c1858a0bd567b8e14e", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -32,9 +32,10 @@ class TypeCheckCallExpr : private TyVisitor\n {\n public:\n   static BaseType *go (BaseType *ref, HIR::CallExpr &call,\n+\t\t       TyTy::VariantDef &variant,\n \t\t       Resolver::TypeCheckContext *context)\n   {\n-    TypeCheckCallExpr checker (call, context);\n+    TypeCheckCallExpr checker (call, variant, context);\n     ref->accept_vis (checker);\n     return checker.resolved;\n   }\n@@ -58,23 +59,25 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (PlaceholderType &) override { gcc_unreachable (); }\n   void visit (ProjectionType &) override { gcc_unreachable (); }\n   void visit (DynamicObjectType &) override { gcc_unreachable (); }\n+  void visit (ClosureType &type) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n \n   // call fns\n   void visit (FnType &type) override;\n   void visit (FnPtr &type) override;\n-  void visit (ClosureType &type) override { gcc_unreachable (); }\n \n private:\n-  TypeCheckCallExpr (HIR::CallExpr &c, Resolver::TypeCheckContext *context)\n-    : resolved (nullptr), call (c), context (context),\n+  TypeCheckCallExpr (HIR::CallExpr &c, TyTy::VariantDef &variant,\n+\t\t     Resolver::TypeCheckContext *context)\n+    : resolved (nullptr), call (c), variant (variant), context (context),\n       mappings (Analysis::Mappings::get ())\n   {}\n \n   BaseType *resolved;\n   HIR::CallExpr &call;\n+  TyTy::VariantDef &variant;\n   Resolver::TypeCheckContext *context;\n   Analysis::Mappings *mappings;\n };"}, {"sha": "16cabc8bb1b9972b031b49ac5ebced1fc6cb137c", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -2537,7 +2537,8 @@ DynamicObjectType::get_object_items () const\n void\n TypeCheckCallExpr::visit (ADTType &type)\n {\n-  if (!type.is_tuple_struct ())\n+  rust_assert (!variant.is_error ());\n+  if (variant.get_variant_type () != TyTy::VariantDef::VariantType::TUPLE)\n     {\n       rust_error_at (\n \tcall.get_locus (),\n@@ -2546,22 +2547,18 @@ TypeCheckCallExpr::visit (ADTType &type)\n       return;\n     }\n \n-  rust_assert (!type.is_enum ());\n-  rust_assert (type.number_of_variants () == 1);\n-  TyTy::VariantDef *variant = type.get_variants ().at (0);\n-\n-  if (call.num_params () != variant->num_fields ())\n+  if (call.num_params () != variant.num_fields ())\n     {\n       rust_error_at (call.get_locus (),\n \t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t     call.num_params (), variant->num_fields ());\n+\t\t     call.num_params (), variant.num_fields ());\n       return;\n     }\n \n   size_t i = 0;\n   for (auto &argument : call.get_arguments ())\n     {\n-      StructFieldType *field = variant->get_field_at_index (i);\n+      StructFieldType *field = variant.get_field_at_index (i);\n       BaseType *field_tyty = field->get_field_type ();\n \n       BaseType *arg = Resolver::TypeCheckExpr::Resolve (argument.get (), false);"}, {"sha": "5ffd95c29da719381fa57bc2412a00640fb5f0fd", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "patch": "@@ -1045,6 +1045,14 @@ class VariantDef\n \t\t || (type == VariantType::STRUCT && discriminant == 0));\n   }\n \n+  static VariantDef &get_error_node ()\n+  {\n+    static VariantDef node = VariantDef (UNKNOWN_HIRID, \"\", -1);\n+    return node;\n+  }\n+\n+  bool is_error () const { return get_id () == UNKNOWN_HIRID; }\n+\n   HirId get_id () const { return id; }\n \n   VariantType get_variant_type () const { return type; }\n@@ -1249,6 +1257,19 @@ class ADTType : public BaseType, public SubstitutionRef\n     return false;\n   }\n \n+  bool lookup_variant_by_id (HirId id, VariantDef **found_variant) const\n+  {\n+    for (auto &variant : variants)\n+      {\n+\tif (variant->get_id () == id)\n+\t  {\n+\t    *found_variant = variant;\n+\t    return true;\n+\t  }\n+      }\n+    return false;\n+  }\n+\n   ADTType *\n   handle_substitions (SubstitutionArgumentMappings mappings) override final;\n "}]}