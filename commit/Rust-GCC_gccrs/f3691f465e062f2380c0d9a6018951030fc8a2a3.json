{"sha": "f3691f465e062f2380c0d9a6018951030fc8a2a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2OTFmNDY1ZTA2MmYyMzgwYzBkOWE2MDE4OTUxMDMwZmM4YTJhMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-07-29T14:56:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T14:56:34Z"}, "message": "sem_ch3.adb: Move Has_Defaulted_Discriminants to sem_util.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: Move Has_Defaulted_Discriminants to sem_util.\n\t* sem_ch4.adb (Analyze_Allocator): Defer resolution of expression\n\tuntil context type is available.\n\t* sem_res.adb (Resolve_Allocator): In the case of a qualified\n\texpression, complete resolution of expression.\n\t(Check_Aliased_Parameter): New procedure within Resolve_Actuals,\n\tto apply Ada2012 checks on aliased formals, as well as\n\taccesibility checks when the context of the call is an allocator\n\tor a qualified expression.\n\t* sem_util.ads, sem_util.adb (Has_Defaulted_Discriminants):\n\tMoved here from sem_ch3.\n\t(Object_Access_Level): Handle properly aliased formals and\n\taggregates.\n\t* exp_ch6.adb (Expand_Call): Remove check on aliased parameters,\n\tnow properly performed in sem_res (Resolve_Actuals,\n\tCheck_Aliased_Parameter).\n\nFrom-SVN: r213206", "tree": {"sha": "d192de0ecbcd76febdcc593744d443a54f4ffd7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d192de0ecbcd76febdcc593744d443a54f4ffd7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3691f465e062f2380c0d9a6018951030fc8a2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3691f465e062f2380c0d9a6018951030fc8a2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3691f465e062f2380c0d9a6018951030fc8a2a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3691f465e062f2380c0d9a6018951030fc8a2a3/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d180af122bda9206c06441fee99f9adf873bdde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d180af122bda9206c06441fee99f9adf873bdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d180af122bda9206c06441fee99f9adf873bdde"}], "stats": {"total": 158, "additions": 122, "deletions": 36}, "files": [{"sha": "9f1ccb7f1bfe5ba888040496d555e9f24d357359", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -1,3 +1,22 @@\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: Move Has_Defaulted_Discriminants to sem_util.\n+\t* sem_ch4.adb (Analyze_Allocator): Defer resolution of expression\n+\tuntil context type is available.\n+\t* sem_res.adb (Resolve_Allocator): In the case of a qualified\n+\texpression, complete resolution of expression.\n+\t(Check_Aliased_Parameter): New procedure within Resolve_Actuals,\n+\tto apply Ada2012 checks on aliased formals, as well as\n+\taccesibility checks when the context of the call is an allocator\n+\tor a qualified expression.\n+\t* sem_util.ads, sem_util.adb (Has_Defaulted_Discriminants):\n+\tMoved here from sem_ch3.\n+\t(Object_Access_Level): Handle properly aliased formals and\n+\taggregates.\n+\t* exp_ch6.adb (Expand_Call): Remove check on aliased parameters,\n+\tnow properly performed in sem_res (Resolve_Actuals,\n+\tCheck_Aliased_Parameter).\n+\n 2014-07-29  Yannick Moy  <moy@adacore.com>\n \n \t* debug.adb Enable GNATprove inlining under debug flag -gnatdQ for now."}, {"sha": "de2ded83fd67fdd59a6ad7457899c7856b316890", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -3138,18 +3138,6 @@ package body Exp_Ch6 is\n             end if;\n          end if;\n \n-         --  For Ada 2012, if a parameter is aliased, the actual must be a\n-         --  tagged type or an aliased view of an object.\n-\n-         if Is_Aliased (Formal)\n-           and then not Is_Aliased_View (Actual)\n-           and then not Is_Tagged_Type (Etype (Formal))\n-         then\n-            Error_Msg_NE\n-              (\"actual for aliased formal& must be aliased object\",\n-               Actual, Formal);\n-         end if;\n-\n          --  For IN OUT and OUT parameters, ensure that subscripts are valid\n          --  since this is a left side reference. We only do this for calls\n          --  from the source program since we assume that compiler generated"}, {"sha": "0a75c5cad24c2389111faf75d598739830f117b1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -11252,24 +11252,6 @@ package body Sem_Ch3 is\n       Desig_Subtype : Entity_Id := Create_Itype (E_Void, Related_Nod);\n       Constraint_OK : Boolean := True;\n \n-      function Has_Defaulted_Discriminants (Typ : Entity_Id) return Boolean;\n-      --  Simple predicate to test for defaulted discriminants\n-      --  Shouldn't this be in sem_util???\n-\n-      ---------------------------------\n-      -- Has_Defaulted_Discriminants --\n-      ---------------------------------\n-\n-      function Has_Defaulted_Discriminants (Typ : Entity_Id) return Boolean is\n-      begin\n-         return Has_Discriminants (Typ)\n-          and then Present (First_Discriminant (Typ))\n-          and then Present\n-            (Discriminant_Default_Value (First_Discriminant (Typ)));\n-      end Has_Defaulted_Discriminants;\n-\n-   --  Start of processing for Constrain_Access\n-\n    begin\n       if Is_Array_Type (Desig_Type) then\n          Constrain_Array (Desig_Subtype, S, Related_Nod, Def_Id, 'P');"}, {"sha": "968619762d8bbd6253c2aa615819219fa78bda90", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -501,8 +501,6 @@ package body Sem_Ch4 is\n          Type_Id := Etype (E);\n          Set_Directly_Designated_Type (Acc_Type, Type_Id);\n \n-         Resolve (Expression (E), Type_Id);\n-\n          --  Allocators generated by the build-in-place expansion mechanism\n          --  are explicitly marked as coming from source but do not need to be\n          --  checked for limited initialization. To exclude this case, ensure\n@@ -529,10 +527,9 @@ package body Sem_Ch4 is\n          --     Wrong_Type (Expression (E), Type_Id);\n          --  end if;\n \n-         Check_Non_Static_Context (Expression (E));\n-\n          --  We don't analyze the qualified expression itself because it's\n-         --  part of the allocator\n+         --  part of the allocator. It is fully analyzed and resolved when\n+         --  the allocator is resolved with the context type.\n \n          Set_Etype  (E, Type_Id);\n "}, {"sha": "c0ae52d11bf1165f382aa42ae0286269acdd6640", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -2976,6 +2976,10 @@ package body Sem_Res is\n       Prev   : Node_Id := Empty;\n       Orig_A : Node_Id;\n \n+      procedure Check_Aliased_Parameter;\n+      --  Check rules on aliased parameters and related accessibility rules\n+      --  in (3.10.2 (10.2-10.4)).\n+\n       procedure Check_Argument_Order;\n       --  Performs a check for the case where the actuals are all simple\n       --  identifiers that correspond to the formal names, but in the wrong\n@@ -3012,6 +3016,70 @@ package body Sem_Res is\n       --  This must be determined before the actual is resolved and expanded\n       --  because if needed the transient scope must be introduced earlier.\n \n+      ------------------------------\n+      --  Check_Aliased_Parameter --\n+      ------------------------------\n+\n+      procedure Check_Aliased_Parameter is\n+         Nominal_Subt : Entity_Id;\n+\n+      begin\n+         if Is_Aliased (F) then\n+            if Is_Tagged_Type (A_Typ) then\n+               null;\n+\n+            elsif Is_Aliased_View (A) then\n+               if Is_Constr_Subt_For_U_Nominal (A_Typ) then\n+                  Nominal_Subt := Base_Type (A_Typ);\n+               else\n+                  Nominal_Subt := A_Typ;\n+               end if;\n+\n+               if Subtypes_Statically_Match (F_Typ, Nominal_Subt) then\n+                  null;\n+\n+               --  In a generic body assume the worst for generic formals:\n+               --  they can have a constrained partial view (AI05-041).\n+\n+               elsif Has_Discriminants (F_Typ)\n+                 and then not Is_Constrained (F_Typ)\n+                 and then not Has_Constrained_Partial_View (F_Typ)\n+                 and then not Is_Generic_Type (F_Typ)\n+               then\n+                  null;\n+\n+               else\n+                  Error_Msg_NE (\"untagged actual does not match \"\n+                    & \"aliased formal&\", A, F);\n+               end if;\n+\n+            else\n+               Error_Msg_NE (\"actual for aliased formal& must be \"\n+                 & \"aliased object\", A, F);\n+            end if;\n+\n+            if Ekind (Nam) = E_Procedure then\n+               null;\n+\n+            elsif Ekind (Etype (Nam)) = E_Anonymous_Access_Type then\n+               if Nkind (Parent (N)) = N_Type_Conversion\n+                 and then Type_Access_Level (Etype (Parent (N)))\n+                   < Object_Access_Level (A)\n+               then\n+                  Error_Msg_N (\"aliased actual has wrong accessibility\", A);\n+               end if;\n+\n+            elsif Nkind (Parent (N)) = N_Qualified_Expression\n+              and then Nkind (Parent (Parent (N))) = N_Allocator\n+              and then Type_Access_Level (Etype (Parent (Parent (N))))\n+                < Object_Access_Level (A)\n+            then\n+               Error_Msg_N\n+                 (\"Aliased actual in allocator has wrong accessibility\", A);\n+            end if;\n+         end if;\n+      end Check_Aliased_Parameter;\n+\n       --------------------------\n       -- Check_Argument_Order --\n       --------------------------\n@@ -4213,6 +4281,8 @@ package body Sem_Res is\n                end if;\n             end if;\n \n+            Check_Aliased_Parameter;\n+\n             Eval_Actual (A);\n \n             --  If it is a named association, treat the selector_name as a\n@@ -4426,6 +4496,7 @@ package body Sem_Res is\n          end if;\n \n          Resolve (Expression (E), Etype (E));\n+         Check_Non_Static_Context (Expression (E));\n          Check_Unset_Reference (Expression (E));\n \n          --  A qualified expression requires an exact match of the type."}, {"sha": "c1d7581121cecb0e729a8035d017d6eefc7aea3e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -7337,6 +7337,18 @@ package body Sem_Util is\n                                   N_Package_Specification);\n    end Has_Declarations;\n \n+   ---------------------------------\n+   -- Has_Defaulted_Discriminants --\n+   ---------------------------------\n+\n+   function Has_Defaulted_Discriminants (Typ : Entity_Id) return Boolean is\n+   begin\n+      return Has_Discriminants (Typ)\n+       and then Present (First_Discriminant (Typ))\n+       and then Present\n+         (Discriminant_Default_Value (First_Discriminant (Typ)));\n+   end Has_Defaulted_Discriminants;\n+\n    -------------------\n    -- Has_Denormals --\n    -------------------\n@@ -14414,7 +14426,15 @@ package body Sem_Util is\n             return Type_Access_Level (Scope (E)) + 1;\n \n          else\n-            return Scope_Depth (Enclosing_Dynamic_Scope (E));\n+            --  Aliased formals take their access level from the point of call.\n+            --  This is smaller than the level of the subprogram itself.\n+\n+            if Is_Formal (E) and then Is_Aliased (E) then\n+               return Type_Access_Level (Etype (E));\n+\n+            else\n+               return Scope_Depth (Enclosing_Dynamic_Scope (E));\n+            end if;\n          end if;\n \n       elsif Nkind (Obj) = N_Selected_Component then\n@@ -14586,6 +14606,12 @@ package body Sem_Util is\n       elsif Nkind (Obj) = N_Qualified_Expression then\n          return Object_Access_Level (Expression (Obj));\n \n+      --  Ditto for aggregates. They have the level of the temporary that\n+      --  will hold their value.\n+\n+      elsif Nkind (Obj) = N_Aggregate then\n+         return Object_Access_Level (Current_Scope);\n+\n       --  Otherwise return the scope level of Standard. (If there are cases\n       --  that fall through to this point they will be treated as having\n       --  global accessibility for now. ???)"}, {"sha": "6a0e126888afdc24e76dca84e34f5092d4f33381", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3691f465e062f2380c0d9a6018951030fc8a2a3/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f3691f465e062f2380c0d9a6018951030fc8a2a3", "patch": "@@ -884,6 +884,9 @@ package Sem_Util is\n    --  as an access type internally, this function tests only for access types\n    --  known to the programmer. See also Has_Tagged_Component.\n \n+      function Has_Defaulted_Discriminants (Typ : Entity_Id) return Boolean;\n+      --  Simple predicate to test for defaulted discriminants\n+\n    type Alignment_Result is (Known_Compatible, Unknown, Known_Incompatible);\n    --  Result of Has_Compatible_Alignment test, description found below. Note\n    --  that the values are arranged in increasing order of problematicness."}]}