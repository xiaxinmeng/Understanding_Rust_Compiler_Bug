{"sha": "3c61a5ba3726b053bf21d243f25c9986dc209543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2MWE1YmEzNzI2YjA1M2JmMjFkMjQzZjI1Yzk5ODZkYzIwOTU0Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-06-03T17:48:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-03T17:48:36Z"}, "message": "DR 1423 PR c++/52174\n\ngcc/cp\n2014-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1423\n\tPR c++/52174\n\t* call.c (standard_conversion): Convert nullptr to bool only\n\tin case of direct-initialization.\n\t(convert_like_real): Provide informative error message.\n\ngcc/testsuite\n2014-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1423\n\tPR c++/52174\n\t* g++.dg/cpp0x/nullptr31.C: New.\n\t* g++.dg/cpp0x/sfinae-nullptr1.C: Likewise.\n\t* g++.dg/cpp0x/nullptr17.C: Update.\n\nlibstdc++-v3\n2014-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1423\n\tPR c++/52174\n\t* testsuite/20_util/is_assignable/value.cc: Update.\n\nFrom-SVN: r211195", "tree": {"sha": "54b27c0d7522595986d603e6ad8e917772e53451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b27c0d7522595986d603e6ad8e917772e53451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c61a5ba3726b053bf21d243f25c9986dc209543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c61a5ba3726b053bf21d243f25c9986dc209543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c61a5ba3726b053bf21d243f25c9986dc209543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c61a5ba3726b053bf21d243f25c9986dc209543/comments", "author": null, "committer": null, "parents": [{"sha": "fedfecef5e3e78daf0d970d8edb4ab33a167535c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedfecef5e3e78daf0d970d8edb4ab33a167535c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedfecef5e3e78daf0d970d8edb4ab33a167535c"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "9a22842bf17e4bad21672b6f929989ff2451728b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -1,3 +1,11 @@\n+2014-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1423\n+\tPR c++/52174\n+\t* call.c (standard_conversion): Convert nullptr to bool only\n+\tin case of direct-initialization.\n+\t(convert_like_real): Provide informative error message.\n+\n 2014-06-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60439"}, {"sha": "75a6a4acc29e56b406f818818d9e6fd413ba640c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -1311,10 +1311,10 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n     {\n       /* [conv.bool]\n \n-\t  An rvalue of arithmetic, unscoped enumeration, pointer, or\n-\t  pointer to member type can be converted to an rvalue of type\n-\t  bool. ... An rvalue of type std::nullptr_t can be converted\n-\t  to an rvalue of type bool;  */\n+\t  A prvalue of arithmetic, unscoped enumeration, pointer, or pointer\n+\t  to member type can be converted to a prvalue of type bool. ...\n+\t  For direct-initialization (8.5 [dcl.init]), a prvalue of type\n+\t  std::nullptr_t can be converted to a prvalue of type bool;  */\n       if (ARITHMETIC_TYPE_P (from)\n \t  || UNSCOPED_ENUM_P (from)\n \t  || fcode == POINTER_TYPE\n@@ -1328,6 +1328,8 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t\t  && conv->rank < cr_pbool)\n \t      || NULLPTR_TYPE_P (from))\n \t    conv->rank = cr_pbool;\n+\t  if (NULLPTR_TYPE_P (from) && (flags & LOOKUP_ONLYCONVERTING))\n+\t    conv->bad_p = true;\n \t  return conv;\n \t}\n \n@@ -6062,6 +6064,14 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    expr = CONSTRUCTOR_ELT (expr, 0)->value;\n \t}\n \n+      /* Give a helpful error if this is bad because a conversion to bool\n+\t from std::nullptr_t requires direct-initialization.  */\n+      if (NULLPTR_TYPE_P (TREE_TYPE (expr))\n+\t  && TREE_CODE (totype) == BOOLEAN_TYPE)\n+\tcomplained = permerror (loc, \"converting to %qT from %qT requires \"\n+\t\t\t\t\"direct-initialization\",\n+\t\t\t\ttotype, TREE_TYPE (expr));\n+\n       for (; t ; t = next_conversion (t))\n \t{\n \t  if (t->kind == ck_user && t->cand->reason)"}, {"sha": "d3af1482b17126516e387a00e0161d1de57ad4ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -1,3 +1,11 @@\n+2014-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1423\n+\tPR c++/52174\n+\t* g++.dg/cpp0x/nullptr31.C: New.\n+\t* g++.dg/cpp0x/sfinae-nullptr1.C: Likewise.\n+\t* g++.dg/cpp0x/nullptr17.C: Update.\n+\n 2014-06-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60439"}, {"sha": "616cd67581fcb597c9cfdc7ba3fae31a7277a66c", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr17.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr17.C?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -1,6 +1,7 @@\n // { dg-do compile { target c++11 } }\n \n-// Test that bool is a better overload match than int\n+// Used to test that bool is a better overload match than int\n+// Updated for DR 1423\n \n template <typename T, typename U> struct tType_equal;\n template <typename T> struct tType_equal<T, T> { typedef void type; };\n@@ -16,7 +17,7 @@ bool i( bool );\n void test_i()\n {\n   // Overload to bool, not int\n-  type_equal<bool>(i(nullptr));\n+  type_equal<bool>(i(nullptr));  // { dg-error \"direct\" }\n   decltype(nullptr) mynull = 0;\n-  type_equal<bool>(i(mynull));\n+  type_equal<bool>(i(mynull));   // { dg-error \"direct\" }\n }"}, {"sha": "01b8339b1c6e3356fe19db378594a8bfc11f62a5", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr31.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr31.C?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -0,0 +1,11 @@\n+// DR 1423, PR c++/52174\n+// { dg-do compile { target c++11 } }\n+\n+bool b1 = nullptr;  // { dg-error \"direct\" }\n+\n+bool b2(nullptr);\n+bool b3{nullptr};\n+\n+int  i1 = nullptr;  // { dg-error \"cannot convert\" }\n+int  i2(nullptr);   // { dg-error \"cannot convert\" }\n+int  i3{nullptr};   // { dg-error \"cannot convert\" }"}, {"sha": "7f3c5c4eb3d1e2572c472595a8114efe45f01978", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae-nullptr1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae-nullptr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae-nullptr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae-nullptr1.C?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -0,0 +1,18 @@\n+// DR 1423, PR c++/52174\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+T&& make();\n+\n+template<class T>\n+void sink(T);\n+\n+template<class T1, class T2,\n+  class = decltype(sink<T2>(make<T1>()))\n+>\n+auto f(int) -> char(&)[1];\n+\n+template<class, class>\n+auto f(...) -> char(&)[2];\n+\n+static_assert(sizeof(f<decltype(nullptr), bool>(0)) != 1, \"\");"}, {"sha": "976ce975736573a5956f1021a91b67b4ed5b341e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -1,3 +1,9 @@\n+2014-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1423\n+\tPR c++/52174\n+\t* testsuite/20_util/is_assignable/value.cc: Update.\n+\n 2014-06-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/condition_variable (condition_variable_any::_Unlock): Do"}, {"sha": "e9db58e6d1618099755b6d5538252dd48fb1b644", "filename": "libstdc++-v3/testsuite/20_util/is_assignable/value.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c61a5ba3726b053bf21d243f25c9986dc209543/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c61a5ba3726b053bf21d243f25c9986dc209543/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc?ref=3c61a5ba3726b053bf21d243f25c9986dc209543", "patch": "@@ -174,7 +174,7 @@ static_assert(!std::is_assignable<bool&, SE>::value, \"Error\");\n static_assert(std::is_assignable<bool&, void*>::value, \"Error\");\n static_assert(std::is_assignable<bool&, int B::*>::value, \"Error\");\n static_assert(std::is_assignable<bool&, void*>::value, \"Error\");\n-static_assert(std::is_assignable<bool&, std::nullptr_t>::value, \"Error\");\n+static_assert(!std::is_assignable<bool&, std::nullptr_t>::value, \"Error\");\n \n static_assert(std::is_assignable<std::nullptr_t&,\n std::nullptr_t>::value, \"Error\");"}]}