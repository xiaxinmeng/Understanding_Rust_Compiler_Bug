{"sha": "dea4a32b24fb888532c47f3920f6910b3c94a8a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhNGEzMmIyNGZiODg4NTMyYzQ3ZjM5MjBmNjkxMGIzYzk0YThhMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-14T20:39:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-14T20:39:14Z"}, "message": "analyzer: fixes to -fdump-analyzer-json\n\nI've been implementing a PyGTK viewer for the output of\n-fdump-analyzer-json, to help me debug analyzer issues:\n  https://github.com/davidmalcolm/gcc-analyzer-viewer\nThe viewer is very much just a work in progress.\n\nThis patch adds some fields that were missing from the dump, and\nfixes some mistakes I spotted whilst working on the viewer.\n\ngcc/analyzer/ChangeLog:\n\t* engine.cc (strongly_connected_components::to_json): New.\n\t(worklist::to_json): New.\n\t(exploded_graph::to_json): JSON-ify the worklist.\n\t* exploded-graph.h (strongly_connected_components::to_json): New\n\tdecl.\n\t(worklist::to_json): New decl.\n\t* store.cc (store::to_json): Fix comment.\n\t* supergraph.cc (supernode::to_json): Fix reference to\n\t\"returning_call\" in comment.  Add optional \"fun\" to JSON.\n\t(edge_kind_to_string): New.\n\t(superedge::to_json): Add \"kind\" to JSON.", "tree": {"sha": "a8a10ba4456583d6457f1bd4144d0bae0e824229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a10ba4456583d6457f1bd4144d0bae0e824229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea4a32b24fb888532c47f3920f6910b3c94a8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea4a32b24fb888532c47f3920f6910b3c94a8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea4a32b24fb888532c47f3920f6910b3c94a8a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea4a32b24fb888532c47f3920f6910b3c94a8a0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a18261afd923151b8d2a37f667e4673b27acd3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a18261afd923151b8d2a37f667e4673b27acd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a18261afd923151b8d2a37f667e4673b27acd3f"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "fc81e7523fbaf427f0eb1cd028eaf06129c2c5c6", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=dea4a32b24fb888532c47f3920f6910b3c94a8a0", "patch": "@@ -1772,6 +1772,17 @@ strongly_connected_components::dump () const\n     }\n }\n \n+/* Return a new json::array of per-snode SCC ids.  */\n+\n+json::array *\n+strongly_connected_components::to_json () const\n+{\n+  json::array *scc_arr = new json::array ();\n+  for (int i = 0; i < m_sg.num_nodes (); i++)\n+    scc_arr->append (new json::integer_number (get_scc_id (i)));\n+  return scc_arr;\n+}\n+\n /* Subroutine of strongly_connected_components's ctor, part of Tarjan's\n    SCC algorithm.  */\n \n@@ -1968,6 +1979,22 @@ worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n   return ka.m_enode->m_index - kb.m_enode->m_index;\n }\n \n+/* Return a new json::object of the form\n+   {\"scc\" : [per-snode-IDs]},  */\n+\n+json::object *\n+worklist::to_json () const\n+{\n+  json::object *worklist_obj = new json::object ();\n+\n+  worklist_obj->set (\"scc\", m_scc.to_json ());\n+\n+  /* The following field isn't yet being JSONified:\n+     queue_t m_queue;  */\n+\n+  return worklist_obj;\n+}\n+\n /* exploded_graph's ctor.  */\n \n exploded_graph::exploded_graph (const supergraph &sg, logger *logger,\n@@ -3315,10 +3342,10 @@ exploded_graph::to_json () const\n   /* m_sg is JSONified at the top-level.  */\n \n   egraph_obj->set (\"ext_state\", m_ext_state.to_json ());\n+  egraph_obj->set (\"worklist\", m_worklist.to_json ());\n   egraph_obj->set (\"diagnostic_manager\", m_diagnostic_manager.to_json ());\n \n   /* The following fields aren't yet being JSONified:\n-     worklist m_worklist;\n      const state_purge_map *const m_purge_map;\n      const analysis_plan &m_plan;\n      stats m_global_stats;"}, {"sha": "7ce1e85800d625678c59a30c3a64a85db9a46db0", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=dea4a32b24fb888532c47f3920f6910b3c94a8a0", "patch": "@@ -622,6 +622,8 @@ class strongly_connected_components\n \n   void dump () const;\n \n+  json::array *to_json () const;\n+\n private:\n   struct per_node_data\n   {\n@@ -664,6 +666,8 @@ class worklist\n     return m_scc.get_scc_id (snode.m_index);\n   }\n \n+  json::object *to_json () const;\n+\n private:\n   class key_t\n   {"}, {"sha": "abdb336da91d249489f4516a1de17d3bef93553e", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=dea4a32b24fb888532c47f3920f6910b3c94a8a0", "patch": "@@ -1740,7 +1740,7 @@ store::dump (bool simple) const\n    {PARENT_REGION_DESC: {BASE_REGION_DESC: object for binding_map,\n \t\t\t ... for each cluster within parent region},\n     ...for each parent region,\n-    \"called_unknown_function\": true/false}.  */\n+    \"called_unknown_fn\": true/false}.  */\n \n json::object *\n store::to_json () const"}, {"sha": "4b934568db62da2a5f389aaee662b00185da88eb", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea4a32b24fb888532c47f3920f6910b3c94a8a0/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=dea4a32b24fb888532c47f3920f6910b3c94a8a0", "patch": "@@ -634,8 +634,9 @@ supernode::dump_dot_id (pretty_printer *pp) const\n \n /* Return a new json::object of the form\n    {\"idx\": int,\n+    \"fun\": optional str\n     \"bb_idx\": int,\n-    \"m_returning_call\": optional str,\n+    \"returning_call\": optional str,\n     \"phis\": [str],\n     \"stmts\" : [str]}.  */\n \n@@ -646,6 +647,8 @@ supernode::to_json () const\n \n   snode_obj->set (\"idx\", new json::integer_number (m_index));\n   snode_obj->set (\"bb_idx\", new json::integer_number (m_bb->index));\n+  if (function *fun = get_function ())\n+    snode_obj->set (\"fun\", new json::string (function_name (fun)));\n \n   if (m_returning_call)\n     {\n@@ -753,6 +756,26 @@ supernode::get_stmt_index (const gimple *stmt) const\n   gcc_unreachable ();\n }\n \n+/* Get a string for PK.  */\n+\n+static const char *\n+edge_kind_to_string (enum edge_kind kind)\n+{\n+  switch (kind)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case SUPEREDGE_CFG_EDGE:\n+      return \"SUPEREDGE_CFG_EDGE\";\n+    case SUPEREDGE_CALL:\n+      return \"SUPEREDGE_CALL\";\n+    case SUPEREDGE_RETURN:\n+      return \"SUPEREDGE_RETURN\";\n+    case SUPEREDGE_INTRAPROCEDURAL_CALL:\n+      return \"SUPEREDGE_INTRAPROCEDURAL_CALL\";\n+    }\n+};\n+\n /* Dump this superedge to PP.  */\n \n void\n@@ -855,14 +878,16 @@ superedge::dump_dot (graphviz_out *gv, const dump_args_t &) const\n }\n \n /* Return a new json::object of the form\n-   {\"src_idx\": int, the index of the source supernode,\n+   {\"kind\"   : str,\n+    \"src_idx\": int, the index of the source supernode,\n     \"dst_idx\": int, the index of the destination supernode,\n     \"desc\"   : str.  */\n \n json::object *\n superedge::to_json () const\n {\n   json::object *sedge_obj = new json::object ();\n+  sedge_obj->set (\"kind\", new json::string (edge_kind_to_string (m_kind)));\n   sedge_obj->set (\"src_idx\", new json::integer_number (m_src->m_index));\n   sedge_obj->set (\"dst_idx\", new json::integer_number (m_dest->m_index));\n "}]}