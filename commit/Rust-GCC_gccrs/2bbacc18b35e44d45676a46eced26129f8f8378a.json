{"sha": "2bbacc18b35e44d45676a46eced26129f8f8378a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiYWNjMThiMzVlNDRkNDU2NzZhNDZlY2VkMjYxMjlmOGY4Mzc4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-10T12:57:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-10T14:00:06Z"}, "message": "libstdc++: Rename test type to avoid clashing with std::any\n\nWhen PCH are enabled this test file includes <any> and so the\nusing-directive brings std::any into the global scope. It isn't\ncurrently a problem, because the -std option in the dg-options means\nthat PCH is not used. If that option is removed, the test fails with PCH\nand passes without.\n\nThis just renames the type to avoid the name classh (and also the 'none'\ntype for consistency).\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/variant/compile.cc: Rename 'any' to avoid\n\tclash with std::any.", "tree": {"sha": "a7aa61ecde6684f00aaa19b9a7a02d7868740174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7aa61ecde6684f00aaa19b9a7a02d7868740174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bbacc18b35e44d45676a46eced26129f8f8378a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbacc18b35e44d45676a46eced26129f8f8378a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbacc18b35e44d45676a46eced26129f8f8378a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbacc18b35e44d45676a46eced26129f8f8378a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd1a54ba32df4316ea920e9877c66f79605df50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd1a54ba32df4316ea920e9877c66f79605df50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd1a54ba32df4316ea920e9877c66f79605df50"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e5042751e66e9ce6603e155006dc526c5e2a3638", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbacc18b35e44d45676a46eced26129f8f8378a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbacc18b35e44d45676a46eced26129f8f8378a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=2bbacc18b35e44d45676a46eced26129f8f8378a", "patch": "@@ -172,23 +172,23 @@ void arbitrary_ctor()\n   static_assert(is_constructible_v<variant<bool, int>, ConvertibleToBool>);\n }\n \n-struct none { none() = delete; };\n-struct any { template <typename T> any(T&&) {} };\n+struct None { None() = delete; };\n+struct Any { template <typename T> Any(T&&) {} };\n \n void in_place_index_ctor()\n {\n   variant<string, string> a(in_place_index<0>, \"a\");\n   variant<string, string> b(in_place_index<1>, {'a'});\n \n-  static_assert(!is_constructible_v<variant<none, any>, std::in_place_index_t<0>>, \"PR libstdc++/90165\");\n+  static_assert(!is_constructible_v<variant<None, Any>, std::in_place_index_t<0>>, \"PR libstdc++/90165\");\n }\n \n void in_place_type_ctor()\n {\n   variant<int, string, int> a(in_place_type<string>, \"a\");\n   variant<int, string, int> b(in_place_type<string>, {'a'});\n   static_assert(!is_constructible_v<variant<string, string>, in_place_type_t<string>, const char*>);\n-  static_assert(!is_constructible_v<variant<none, any>, std::in_place_type_t<none>>, \"PR libstdc++/90165\");\n+  static_assert(!is_constructible_v<variant<None, Any>, std::in_place_type_t<None>>, \"PR libstdc++/90165\");\n }\n \n void dtor()"}]}