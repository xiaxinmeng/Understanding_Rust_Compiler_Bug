{"sha": "24a4dd31f80136aadf69774545916675b50836d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhNGRkMzFmODAxMzZhYWRmNjk3NzQ1NDU5MTY2NzViNTA4MzZkNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-06-03T09:06:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-06-03T09:06:55Z"}, "message": "configure.in (HAVE_LD_PIE): Check for ld -pie.\n\n\t* configure.in (HAVE_LD_PIE): Check for ld -pie.\n\t* config.in: Rebuilt.\n\t* configure: Rebuilt.\n\t* toplev.c (flag_pie, flag_shlib): New variables.\n\t(f_options): Add -fpie and -fPIE.\n\t(parse_options_and_default_flags): Set flag_pic if -fpie/-fPIE.\n\tSet flag_shlib if flag_pic and not -fpie/-fPIE.\n\t* flags.h (flag_pic, flag_shlib): Add.\n\t* varasm.c (default_binds_local_p): Use flag_shlib instead of\n\tflag_pic.\n\t* gcc.c (LINK_PIE_SPEC): Define.\n\t(LINK_COMMAND_SPEC): Use LINK_PIE_SPEC.\n\t(option_map): Add --pie -> -pie mapping.\n\t* config/sol2.h (ASM_SPEC): Handle -fpie the same way as -fpic\n\tand -fPIE the same way as -fPIC.\n\t* config/openbsd.h (ASM_SPEC): Likewise.\n\t* config/frv/frv.h (ASM_SPEC): Likewise.\n\t* config/arm/linux-gas.h (SUBTARGET_CPP_SPEC): Likewise.\n\t* config/arm/semi.h (ASM_SPEC): Likewise.\n\t* config/arm/netbsd-elf.h (SUBTARGET_EXTRA_ASM_SPEC): Likewise.\n\t* config/freebsd-spec.h (FBSD_CPP_SPEC): Likewise.\n\t* config/i386/beos-elf.h (CC1_SPEC): Likewise.\n\t* config/i386/freebsd-aout.h (ASM_SPEC): Likewise.\n\t* config/m68k/linux.h (CPP_SPEC): Likewise.\n\t* config/m68k/netbsd.h (ASM_SPEC): Likewise.\n\t* config/m68k/openbsd.h (ASM_SPEC): Likewise.\n\t* config/m68k/netbsd-elf.h (ASM_SPEC): Likewise.\n\t* config/mips/linux.h (SUBTARGET_CPP_SPEC): Likewise.\n\t* config/mips/openbsd.h (SUBTARGET_ASM_SPEC): Likewise.\n\t* config/pa/pa-linux.h (CPP_SPEC): Likewise.\n\t* config/netbsd-aout.h (ASM_SPEC): Likewise.\n\t* config/rs6000/sysv4.h (ASM_SPEC, CPP_SYSV_SPEC): Likewise.\n\t* config/rs6000/vxworks.h (CPP_SPEC): Likewise.\n\t* config/sparc/linux.h (CPP_SUBTARGET_SPEC, ASM_SPEC): Likewise.\n\t* config/sparc/linux64.h (CPP_SUBTARGET_SPEC, ASM_SPEC): Likewise.\n\t* config/sparc/sparc.h (ASM_SPEC): Likewise.\n\t* config/sparc/sp64-elf.h (ASM_SPEC): Likewise.\n\t* config/sparc/sysv4.h (ASM_SPEC): Likewise.\n\t* config/sparc/netbsd-elf.h (ASM_SPEC): Likewise.\n\t* config/sparc/openbsd64.h (ASM_SPEC): Likewise.\n\t* config/cris/linux.h (CRIS_ASM_SUBTARGET_SPEC): Likewise.\n\t* config/linux.h (STARTFILE_SPEC, ENDFILE_SPEC): Handle -pie.\n\tSimplify.\n\t* config/alpha/elf.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* config/i386/linux64.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* config/ia64/linux.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* config/rs6000/sysv4.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* config/rs6000/linux64.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* config/sparc/linux.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* config/sparc/linux64.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n\t* doc/invoke.texi: Document -pie, -fpie and -fPIE options.\n\nFrom-SVN: r67359", "tree": {"sha": "9086bda0149c0c0178acfce160ac6deb805491fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9086bda0149c0c0178acfce160ac6deb805491fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a4dd31f80136aadf69774545916675b50836d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a4dd31f80136aadf69774545916675b50836d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a4dd31f80136aadf69774545916675b50836d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a4dd31f80136aadf69774545916675b50836d6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fd3cf4e17c97036b4f9cecbe2f438a2da920351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd3cf4e17c97036b4f9cecbe2f438a2da920351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd3cf4e17c97036b4f9cecbe2f438a2da920351"}], "stats": {"total": 341, "additions": 251, "deletions": 90}, "files": [{"sha": "30b502ddb3a3f61e6839577c115e37940670c229", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -1,3 +1,57 @@\n+2003-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.in (HAVE_LD_PIE): Check for ld -pie.\n+\t* config.in: Rebuilt.\n+\t* configure: Rebuilt.\n+\t* toplev.c (flag_pie, flag_shlib): New variables.\n+\t(f_options): Add -fpie and -fPIE.\n+\t(parse_options_and_default_flags): Set flag_pic if -fpie/-fPIE.\n+\tSet flag_shlib if flag_pic and not -fpie/-fPIE.\n+\t* flags.h (flag_pic, flag_shlib): Add.\n+\t* varasm.c (default_binds_local_p): Use flag_shlib instead of\n+\tflag_pic.\n+\t* gcc.c (LINK_PIE_SPEC): Define.\n+\t(LINK_COMMAND_SPEC): Use LINK_PIE_SPEC.\n+\t(option_map): Add --pie -> -pie mapping.\n+\t* config/sol2.h (ASM_SPEC): Handle -fpie the same way as -fpic\n+\tand -fPIE the same way as -fPIC.\n+\t* config/openbsd.h (ASM_SPEC): Likewise.\n+\t* config/frv/frv.h (ASM_SPEC): Likewise.\n+\t* config/arm/linux-gas.h (SUBTARGET_CPP_SPEC): Likewise.\n+\t* config/arm/semi.h (ASM_SPEC): Likewise.\n+\t* config/arm/netbsd-elf.h (SUBTARGET_EXTRA_ASM_SPEC): Likewise.\n+\t* config/freebsd-spec.h (FBSD_CPP_SPEC): Likewise.\n+\t* config/i386/beos-elf.h (CC1_SPEC): Likewise.\n+\t* config/i386/freebsd-aout.h (ASM_SPEC): Likewise.\n+\t* config/m68k/linux.h (CPP_SPEC): Likewise.\n+\t* config/m68k/netbsd.h (ASM_SPEC): Likewise.\n+\t* config/m68k/openbsd.h (ASM_SPEC): Likewise.\n+\t* config/m68k/netbsd-elf.h (ASM_SPEC): Likewise.\n+\t* config/mips/linux.h (SUBTARGET_CPP_SPEC): Likewise.\n+\t* config/mips/openbsd.h (SUBTARGET_ASM_SPEC): Likewise.\n+\t* config/pa/pa-linux.h (CPP_SPEC): Likewise.\n+\t* config/netbsd-aout.h (ASM_SPEC): Likewise.\n+\t* config/rs6000/sysv4.h (ASM_SPEC, CPP_SYSV_SPEC): Likewise.\n+\t* config/rs6000/vxworks.h (CPP_SPEC): Likewise.\n+\t* config/sparc/linux.h (CPP_SUBTARGET_SPEC, ASM_SPEC): Likewise.\n+\t* config/sparc/linux64.h (CPP_SUBTARGET_SPEC, ASM_SPEC): Likewise.\n+\t* config/sparc/sparc.h (ASM_SPEC): Likewise.\n+\t* config/sparc/sp64-elf.h (ASM_SPEC): Likewise.\n+\t* config/sparc/sysv4.h (ASM_SPEC): Likewise.\n+\t* config/sparc/netbsd-elf.h (ASM_SPEC): Likewise.\n+\t* config/sparc/openbsd64.h (ASM_SPEC): Likewise.\n+\t* config/cris/linux.h (CRIS_ASM_SUBTARGET_SPEC): Likewise.\n+\t* config/linux.h (STARTFILE_SPEC, ENDFILE_SPEC): Handle -pie.\n+\tSimplify.\n+\t* config/alpha/elf.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* config/i386/linux64.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* config/ia64/linux.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* config/rs6000/sysv4.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* config/rs6000/linux64.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* config/sparc/linux.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* config/sparc/linux64.h (STARTFILE_SPEC, ENDFILE_SPEC): Likewise.\n+\t* doc/invoke.texi: Document -pie, -fpie and -fPIE options.\n+\n 2003-06-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* builtins.c (expand_builtin_memcpy): Remove endp argument and endp"}, {"sha": "dca4a1bd656329b59b2d1275a7f16484ddb78c64", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -631,6 +631,9 @@\n /* Define if your linker supports --eh-frame-hdr option. */\n #undef HAVE_LD_EH_FRAME_HDR\n \n+/* Define if your linker supports -pie option. */\n+#undef HAVE_LD_PIE\n+\n /* Define if your MIPS libgloss linker scripts consistently include STARTUP directives. */\n #undef HAVE_MIPS_LIBGLOSS_STARTUP_DIRECTIVES\n "}, {"sha": "abdb92af5014ada81072641ff8cda6d2480d8895", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -413,11 +413,15 @@ void FN ()\t\t\t\t\t\\\n    before entering `main'.   */\n \n #undef\tSTARTFILE_SPEC\n+#ifdef HAVE_LD_PIE\n #define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n-   crti.o%s %{static:crtbeginT.o%s}\\\n-   %{!static:%{shared:crtbeginS.o%s}%{!shared:crtbegin.o%s}}\"\n+  \"%{!shared: %{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+#else\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: %{pg|p:gcrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+#endif\n \n /* Provide a ENDFILE_SPEC appropriate for ELF.  Here we tack on the\n    magical crtend.o file which provides part of the support for\n@@ -427,7 +431,7 @@ void FN ()\t\t\t\t\t\\\n #undef\tENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{shared:crtendS.o%s}%{!shared:crtend.o%s} crtn.o%s\"\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n /* We support #pragma.  */\n #define HANDLE_SYSV_PRAGMA 1"}, {"sha": "f3ed5f8867002edd9ce93a3b4a8935720c87bb76", "filename": "gcc/config/arm/linux-gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Farm%2Flinux-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Farm%2Flinux-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-gas.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -31,7 +31,7 @@\n #define DEFAULT_SIGNED_CHAR 0\n \n #undef  SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC  \"%{posix:-D_POSIX_SOURCE} %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__}\"\n+#define SUBTARGET_CPP_SPEC  \"%{posix:-D_POSIX_SOURCE} %{fPIC|fPIE:-D__PIC__ -D__pic__} %{fpic|fpie:-D__PIC__ -D__pic__}\"\n \n #undef  SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\""}, {"sha": "91ba9cd445c1758994acbd96b40e36a3e47c5646", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -59,7 +59,7 @@\n \n #undef SUBTARGET_EXTRA_ASM_SPEC\n #define SUBTARGET_EXTRA_ASM_SPEC\t\\\n-  \"-matpcs %{fpic:-k} %{fPIC:-k}\"\n+  \"-matpcs %{fpic|fpie:-k} %{fPIC|fPIE:-k}\"\n \n /* Default floating point model is soft-VFP.\n    FIXME: -mhard-float currently implies FPA.  */"}, {"sha": "8847f8c2369dbbc016adae98c24eb837513353ac", "filename": "gcc/config/arm/semi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Farm%2Fsemi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Farm%2Fsemi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsemi.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -59,7 +59,7 @@\n    binutils can't.  */\n #ifndef ASM_SPEC\n #define ASM_SPEC \"\\\n-%{fpic: -k} %{fPIC: -k} \\\n+%{fpic|fpie: -k} %{fPIC|fPIE: -k} \\\n %{mbig-endian:-EB} \\\n %{mcpu=*:-mcpu=%*} \\\n %{march=*:-march=%*} \\"}, {"sha": "288c2856ee636c4d1a8ffab0eb2074e42dc834dc", "filename": "gcc/config/cris/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fcris%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fcris%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Flinux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -60,7 +60,7 @@ Boston, MA 02111-1307, USA.  */\n #define CRIS_ASM_SUBTARGET_SPEC \\\n  \"--em=criself\\\n   %{!fleading-underscore:--no-underscore}\\\n-  %{fPIC|fpic: --pic}\"\n+  %{fPIC|fpic|fPIE|fpie: --pic}\"\n \n /* Provide a legacy -mlinux option.  */\n #undef CRIS_SUBTARGET_SWITCHES"}, {"sha": "2f4261b6abad18fa029a85c4c2df2f128bc01a3f", "filename": "gcc/config/freebsd-spec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Ffreebsd-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Ffreebsd-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-spec.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -78,7 +78,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define FBSD_CPP_SPEC \"\t\t\t\t\t\t\t\\\n   %(cpp_cpu)\t\t\t\t\t\t\t\t\\\n-  %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__}\t\t\\\n+  %{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__}\t\t\t\t\\\n   %{posix:-D_POSIX_SOURCE}\"\n \n /* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add"}, {"sha": "4adcabae8284372b9fba0e410fbc590797f6a0f4", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -86,7 +86,7 @@\n     %{mmedia} %{mno-media} \\\n     %{mmuladd} %{mno-muladd} \\\n     %{mpack} %{mno-pack} \\\n-    %{fpic: -mpic} %{fPIC: -mPIC} %{mlibrary-pic}}\"\n+    %{fpic|fpie: -mpic} %{fPIC|fPIE: -mPIC} %{mlibrary-pic}}\"\n \n /* Another C string constant used much like `LINK_SPEC'.  The difference\n    between the two is that `STARTFILE_SPEC' is used at the very beginning of"}, {"sha": "075e16aefd5ec536d4697aa5f6ba006b4b7d502e", "filename": "gcc/config/i386/beos-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fi386%2Fbeos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbeos-elf.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -78,7 +78,7 @@ Boston, MA 02111-1307, USA.  */\n    CC1_SPEC is used for both cc1 and cc1plus.  */\n \n #undef CC1_SPEC\n-#define CC1_SPEC \"%{!no-fpic:%{!fPIC:-fpic}} %{!Wmultichar: -Wno-multichar} %(cc1_cpu) %{profile:-p}\"\n+#define CC1_SPEC \"%{!no-fpic:%{!fno-pic:%{!fno-pie:%{!fpie:%{!fPIC:%{!fPIE:-fpic}}}}}} %{!Wmultichar: -Wno-multichar} %(cc1_cpu) %{profile:-p}\"\n \n #undef CC1PLUS_SPEC\n #define CC1PLUS_SPEC \"%{!Wctor-dtor-privacy:-Wno-ctor-dtor-privacy}\""}, {"sha": "da3202da451a0ae70ca9d6f0a3a6c965fd3fb698", "filename": "gcc/config/i386/freebsd-aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -210,7 +210,7 @@ do {                                                                    \\\n   } while (0)\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n-#define ASM_SPEC   \"%{fpic:-k} %{fPIC:-k}\"\n+#define ASM_SPEC   \"%{fpic|fpie|fPIC|fPIE:-k}\"\n #define LINK_SPEC \\\n   \"%{p:%e`-p' not supported; use `-pg' and gprof(1)} \\\n    %{shared:-Bshareable} \\"}, {"sha": "575cbee10cce4528c781fbdb04ce1b6da3965f24", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -65,17 +65,6 @@ Boston, MA 02111-1307, USA.  */\n       %{!m32:%{!dynamic-linker:-dynamic-linker /lib64/ld-linux-x86-64.so.2}}} \\\n     %{static:-static}}\"\n \n-#undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n-     %{!p:%{profile:gcrt1.o%s} %{!profile:crt1.o%s}}}} \\\n-   crti.o%s %{static:crtbeginT.o%s} \\\n-   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n-\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n-\n #define MULTILIB_DEFAULTS { \"m64\" }\n \n /* Do code reading to identify a signal frame, and set the frame"}, {"sha": "c24c70c8d5a435f5ecbf6de5389507d2ea25983c", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -21,18 +21,21 @@ do {\t\t\t\t\t\t\\\n \n /* Need to override linux.h STARTFILE_SPEC, since it has crtbeginT.o in.  */\n #undef STARTFILE_SPEC\n+#ifdef HAVE_LD_PIE\n #define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n-\t\t       %{!p:%{profile:gcrt1.o%s} \\\n-\t\t\t %{!profile:crt1.o%s}}}} \\\n-   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+  \"%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+#else\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: %{pg|p|profile:gcrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+#endif\n \n /* Similar to standard Linux, but adding -ffast-math support.  */\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n /* Define this for shared library support because it isn't in the main\n    linux.h file.  */"}, {"sha": "ea322b36d8554bf81e037f0870f45c7df015bc07", "filename": "gcc/config/linux.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -53,14 +53,14 @@ Boston, MA 02111-1307, USA.  */\n \t\t       %{!p:%{profile:gcrt1.o%s} \\\n \t\t\t %{!profile:crt1.o%s}}}} \\\n    crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+#elif defined HAVE_LD_PIE\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #else\n #define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n-\t\t       %{!p:%{profile:gcrt1.o%s} \\\n-\t\t\t %{!profile:crt1.o%s}}}} \\\n-   crti.o%s %{static:crtbeginT.o%s}\\\n-   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+  \"%{!shared: %{pg|p|profile:gcrt1.o%s;:crt1.o%s}} \\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #endif\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n@@ -71,7 +71,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tENDFILE_SPEC\n #define ENDFILE_SPEC \\\n-  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n /* This is for -profile to use -lc_p instead of -lc.  */\n #ifndef CC1_SPEC"}, {"sha": "9e81a0a810964b2886a2e92ae4e92219076ed7cf", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -121,10 +121,10 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_SPEC\n #if TARGET_DEFAULT & MASK_68881\n #define CPP_SPEC \\\n-  \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{!msoft-float:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+  \"%{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__} %{!msoft-float:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n #else\n #define CPP_SPEC \\\n-  \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{m68881:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+  \"%{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__} %{m68881:-D__HAVE_68881__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n #endif\n \n /* We override the ASM_SPEC from svr4.h because we must pass -m68040 down"}, {"sha": "0787c6accd642114007ec3acce6d3bbbc992417e", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -105,7 +105,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_SPEC \\\n   \"%(asm_default_spec) \\\n     %{m68010} %{m68020} %{m68030} %{m68040} %{m68060} \\\n-    %{fpic:-k} %{fPIC:-k -K}\"\n+    %{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n "}, {"sha": "382adc0fa17df742e40985f7c909133fffc6d417", "filename": "gcc/config/m68k/netbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -31,7 +31,7 @@\n   \"%{!msoft-float:-D__HAVE_68881__ -D__HAVE_FPU__} %(netbsd_cpp_spec)\"\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"%{m68030} %{m68040} %{m68060} %{fpic:-k} %{fPIC:-k -K}\"\n+#define ASM_SPEC \"%{m68030} %{m68040} %{m68060} %{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n "}, {"sha": "48e9eb91e1d1f3dbe01f2f7eced8a43a9d201ca8", "filename": "gcc/config/m68k/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fopenbsd.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* m68k as needs to know about the processor subtype.  */\n #undef ASM_SPEC\n-#define ASM_SPEC \"%{m68030} %{m68040} %{m68060} %{fpic:-k} %{fPIC:-k -K}\"\n+#define ASM_SPEC \"%{m68030} %{m68040} %{m68060} %{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n "}, {"sha": "9986fa312f8914c3ca4fc65a38a7c1b02ab19506", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -163,7 +163,7 @@ void FN ()\t\t\t\t\t\t\t\\\n #undef  SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n %{fno-PIC:-U__PIC__ -U__pic__} %{fno-pic:-U__PIC__ -U__pic__} \\\n-%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} \\\n+%{fPIC|fPIE|fpic|fpie:-D__PIC__ -D__pic__} \\\n %{pthread:-D_REENTRANT}\"\n \n /* From iris5.h */"}, {"sha": "8b1c124cf8e5082671ea6427a455aa28e5534f74", "filename": "gcc/config/mips/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fopenbsd.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n /* Definitions needed for OpenBSD, to avoid picking mips 'defaults'.  */\n \n /* GAS must know this.  */\n-#define SUBTARGET_ASM_SPEC \"%{fPIC:-KPIC}\"\n+#define SUBTARGET_ASM_SPEC \"%{fPIC|fPIE:-KPIC}\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n "}, {"sha": "f77fc2e2d9b9608c02ea0c97c119aba35e0fbdf7", "filename": "gcc/config/netbsd-aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fnetbsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fnetbsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-aout.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02111-1307, USA.  */\n    with the options for generating PIC code.  */\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"%{fpic:-k} %{fPIC:-k -K}\"\n+#define ASM_SPEC \"%{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n "}, {"sha": "00f645dd9800718fb24a7e7913f80dcc75b301c8", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -106,7 +106,7 @@ Boston, MA 02111-1307, USA.  */\n    still uses a special flavor of gas that needs to be told when generating \n    pic code.  */\n #undef ASM_SPEC\n-#define ASM_SPEC \"%{fpic:-k} %{fPIC:-k -K}\"\n+#define ASM_SPEC \"%{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\"\n #endif\n \n /* Since we use gas, stdin -> - is a good idea.  */"}, {"sha": "fa20da08ed52532eb90437e0fbdb7435a1654602", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -66,7 +66,7 @@ Boston, MA 02111-1307, USA.  */\n   while (0)\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SPEC \"%{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n \n #undef\tLIB_SPEC\n #define LIB_SPEC \\"}, {"sha": "5a31366dbf2b51f340a5f86c49b4cbfcbcb2520a", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -215,14 +215,19 @@\n #endif\n \n #undef  STARTFILE_LINUX_SPEC\n+#ifdef HAVE_LD_PIE\n #define STARTFILE_LINUX_SPEC \"\\\n-%{!shared: %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}} crti.o%s \\\n-%{static:crtbeginT.o%s} \\\n-%{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+%{!shared: %{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} crti.o%s \\\n+%{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+#else\n+#define STARTFILE_LINUX_SPEC \"\\\n+%{!shared: %{pg|p:gcrt1.o%s;:crt1.o%s}} crti.o%s \\\n+%{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+#endif\n \n #undef  ENDFILE_LINUX_SPEC\n #define ENDFILE_LINUX_SPEC \"\\\n-%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n #undef  TOC_SECTION_ASM_OP\n #define TOC_SECTION_ASM_OP \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\""}, {"sha": "d91dd3d89154829a3b566649bc310cb454bcdbc7", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -810,7 +810,7 @@ extern int fixuplabelno;\n #define\tASM_SPEC \"%(asm_cpu) \\\n %{.s: %{mregnames} %{mno-regnames}} %{.S: %{mregnames} %{mno-regnames}} \\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n-%{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{mrelocatable} %{mrelocatable-lib} %{fpic|fpie|fPIC|fPIE:-K PIC} \\\n %{memb|msdata|msdata=eabi: -memb} \\\n %{mlittle|mlittle-endian:-mlittle; \\\n   mbig|mbig-endian      :-mbig;    \\\n@@ -947,8 +947,8 @@ extern int fixuplabelno;\n \n #define CPP_SYSV_SPEC \\\n \"%{mrelocatable*: -D_RELOCATABLE} \\\n-%{fpic: -D__PIC__=1 -D__pic__=1} \\\n-%{!fpic: %{fPIC: -D__PIC__=2 -D__pic__=2}}\"\n+%{fpic|fpie: -D__PIC__=1 -D__pic__=1} \\\n+%{!fpic: %{fPIC|fPIE: -D__PIC__=2 -D__pic__=2}}\"\n \n /* Override rs6000.h definition.  */\n #undef\tCPP_SPEC\n@@ -1107,12 +1107,16 @@ extern int fixuplabelno;\n %{!shared: %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}} \\\n %{mnewlib: ecrti.o%s} %{!mnewlib: crti.o%s} \\\n %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+#elif defined HAVE_LD_PIE\n+#define\tSTARTFILE_LINUX_SPEC \"\\\n+%{!shared: %{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \\\n+%{mnewlib:ecrti.o%s;:crti.o%s} \\\n+%{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #else\n #define\tSTARTFILE_LINUX_SPEC \"\\\n-%{!shared: %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}} \\\n-%{mnewlib: ecrti.o%s} %{!mnewlib: crti.o%s} \\\n-%{static:crtbeginT.o%s} \\\n-%{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+%{!shared: %{pg|p:gcrt1.o%s;:crt1.o%s}} \\\n+%{mnewlib:ecrti.o%s;:crti.o%s} \\\n+%{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #endif\n \n #define\tENDFILE_LINUX_SPEC \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} \\"}, {"sha": "e7a70922e7ac88036490bdfe73a7647673676312", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -48,8 +48,8 @@\n    t860: -DCPU=PPC860 -D_SOFT_FLOAT ; \\\n        : -DCPU=PPC604}  \\\n  %{!msoft-float:-D__hardfp}\t   \\\n- %{fpic: -D__PIC__=1 -D__pic__=1 ; \\\n-   fPIC: -D__PIC__=2 -D__pic__=2 } \\\n+ %{fpic|fpie: -D__PIC__=1 -D__pic__=1 ; \\\n+   fPIC|fPIE: -D__PIC__=2 -D__pic__=2 } \\\n  %(cpp_cpu)\"\n \n #define CC1_SPEC \\"}, {"sha": "92353cff87e1bc33a557891c003253adac389059", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -81,7 +81,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n-%{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{fpic|fpie|fPIC|fPIE:-K PIC} \\\n %(asm_cpu) \\\n \"\n "}, {"sha": "63ce3b95e68fa7e7110ca9e792c81af90bb5fc43", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -57,12 +57,14 @@ Boston, MA 02111-1307, USA.  */\n   \"%{!shared: \\\n      %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n    crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+#elif defined HAVE_LD_PIE\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: %{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #else\n #define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n-   crti.o%s %{static:crtbeginT.o%s}\\\n-   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+  \"%{!shared: %{pg|p:gcrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n #endif\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n@@ -74,7 +76,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n /* This is for -profile to use -lc_p instead of -lc.  */\n #undef\tCC1_SPEC\n@@ -112,11 +114,11 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_SUBTARGET_SPEC\n #ifdef USE_GNULIBC_1\n #define CPP_SUBTARGET_SPEC \\\n-\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n+\"%{fPIC|fPIE|fpic|fpie:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n %{mlong-double-128:-D__LONG_DOUBLE_128__}\"\n #else\n #define CPP_SUBTARGET_SPEC \\\n-\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n+\"%{fPIC|fPIE|fpic|fpie:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} \\\n %{pthread:-D_REENTRANT} %{mlong-double-128:-D__LONG_DOUBLE_128__}\"\n #endif\n \n@@ -192,8 +194,8 @@ Boston, MA 02111-1307, USA.  */\n    It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n-  \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} \\\n-   %{fPIC:-K PIC} %(asm_cpu) %(asm_relax)\"\n+  \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n+   %{fpic|fPIC|fpie|fPIE:-K PIC} %(asm_cpu) %(asm_relax)\"\n \n /* Same as sparc.h */\n #undef DBX_REGISTER_NUMBER"}, {"sha": "ecdd5204ee6ae3ca1795099c00ca399a01bb49ef", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -66,10 +66,15 @@ Boston, MA 02111-1307, USA.  */\n    \n #undef  STARTFILE_SPEC\n \n+#ifdef HAVE_LD_PIE\n #define STARTFILE_SPEC \\\n-  \"%{!shared:%{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n-   crti.o%s %{static:crtbeginT.o%s}\\\n-   %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n+  \"%{!shared:%{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbeginS.o%s}\"\n+#else\n+#define STARTFILE_SPEC \\\n+  \"%{!shared:%{pg|p:gcrt1.o%s;:crt1.o%s}}\\\n+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbeginS.o%s}\"\n+#endif\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n    the GNU/Linux magical crtend.o file (see crtstuff.c) which\n@@ -80,7 +85,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  ENDFILE_SPEC\n \n #define ENDFILE_SPEC \\\n-  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\\\n+  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\\\n    %{ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n \n /* The GNU C++ standard library requires that these macros be defined.  */\n@@ -124,8 +129,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\\n-%{fPIC:-D__PIC__ -D__pic__} \\\n-%{fpic:-D__PIC__ -D__pic__} \\\n+%{fPIC|fpic|fPIE|fpie:-D__PIC__ -D__pic__} \\\n %{posix:-D_POSIX_SOURCE} \\\n %{pthread:-D_REENTRANT} \\\n \"\n@@ -254,7 +258,7 @@ Boston, MA 02111-1307, USA.  */\n %{T} \\\n %{Ym,*} \\\n %{Wa,*:%*} \\\n--s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+-s %{fpic|fPIC|fpie|fPIE:-K PIC} \\\n %{mlittle-endian:-EL} \\\n %(asm_cpu) %(asm_arch) %(asm_relax)\"\n "}, {"sha": "06783f3bf5ceb6bd5f556f2d8c8b98a669873bdb", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -86,7 +86,7 @@ Boston, MA 02111-1307, USA.  */\n #define USER_LABEL_PREFIX \"\"\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"%{fpic:-K PIC} %{fPIC:-K PIC} %{V} %{v:%{!V:-V}} \\\n+#define ASM_SPEC \"%{fpic|fPIC|fpie|fPIE:-K PIC} %{V} %{v:%{!V:-V}} \\\n %{mlittle-endian:-EL} \\\n %(asm_cpu) %(asm_arch) %(asm_relax)\"\n "}, {"sha": "e13c8862554b9530428e8feee497dacc0ff41bec", "filename": "gcc/config/sparc/openbsd64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n-%{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{v:-V} -s %{fpic|fPIC|fpie|fPIE:-K PIC} \\\n %{mlittle-endian:-EL} \\\n %(asm_cpu) %(asm_arch) \\\n \""}, {"sha": "2782d688c51429b4afe93bd9e847abd9ca6b120c", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n-%{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{v:-V} -s %{fpic|fPIC|fpie|fPIE:-K PIC} \\\n %{mlittle-endian:-EL} \\\n %(asm_cpu) %(asm_arch) \\\n \""}, {"sha": "e08e4030ec7db3a6a24cd38b2a09d50948a9b303", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -336,7 +336,7 @@ extern enum cmodel sparc_cmodel;\n /* Special flags to the Sun-4 assembler when using pipe for input.  */\n \n #define ASM_SPEC \"\\\n-%{R} %{!pg:%{!p:%{fpic:-k} %{fPIC:-k}}} %{keep-local-as-symbols:-L} \\\n+%{R} %{!pg:%{!p:%{fpic|fPIC|fpie|fPIE:-k}}} %{keep-local-as-symbols:-L} \\\n %(asm_cpu) %(asm_relax)\"\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT"}, {"sha": "80defea56fc11d868b02d96bff6afa8fc9361290", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -59,7 +59,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n   \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n-   %{fpic:-K PIC} %{fPIC:-K PIC} %(asm_cpu)\"\n+   %{fpic|fPIC|fpie|fPIE:-K PIC} %(asm_cpu)\"\n \n /* Define the names of various pseudo-op used by the SPARC/svr4 assembler.\n    Note that many of these are different from the typical pseudo-ops used"}, {"sha": "c03bd4d179a1629d042b4214f11a24cc37e049a4", "filename": "gcc/configure", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -8838,11 +8838,32 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_ld_eh_frame_hdr\" 1>&6\n \n+echo $ac_n \"checking linker position independent executable support\"\"... $ac_c\" 1>&6\n+echo \"configure:8843: checking linker position independent executable support\" >&5\n+gcc_cv_ld_pie=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 15 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n+    gcc_cv_ld_pie=yes\n+  fi\n+elif test x$gcc_cv_ld != x; then\n+\t# Check if linker supports -pie option\n+\tif $gcc_cv_ld --help 2>/dev/null | grep -- -pie > /dev/null; then\n+\t\tgcc_cv_ld_pie=yes\n+\tfi\n+fi\n+if test x\"$gcc_cv_ld_pie\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_LD_PIE 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_ld_pie\" 1>&6\n+\n # Miscellaneous target-specific checks.\n case \"$target\" in\n   mips*-*-*)\n     echo $ac_n \"checking whether libgloss uses STARTUP directives consistently\"\"... $ac_c\" 1>&6\n-echo \"configure:8846: checking whether libgloss uses STARTUP directives consistently\" >&5\n+echo \"configure:8867: checking whether libgloss uses STARTUP directives consistently\" >&5\n     gcc_cv_mips_libgloss_startup=no\n     gcc_cv_libgloss_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/libgloss\n     if test \"x$exec_prefix\" = xNONE; then\n@@ -8870,7 +8891,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_mips_libgloss_startup\" 1>&6\n \n     echo $ac_n \"checking whether the assembler has explicit relocation support\"\"... $ac_c\" 1>&6\n-echo \"configure:8874: checking whether the assembler has explicit relocation support\" >&5\n+echo \"configure:8895: checking whether the assembler has explicit relocation support\" >&5\n     if test x$gcc_cv_mips_explicit_relocs = x; then\n       gcc_cv_mips_explicit_relocs=no\n       if test x$gcc_cv_as != x; then\n@@ -9065,7 +9086,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:9069: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:9090: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "a37f1ccfba3b0d389736801db4ad06a779d3730d", "filename": "gcc/configure.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -2631,6 +2631,24 @@ if test x\"$gcc_cv_ld_eh_frame_hdr\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_ld_eh_frame_hdr)\n \n+AC_MSG_CHECKING(linker position independent executable support)\n+gcc_cv_ld_pie=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 15 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n+    gcc_cv_ld_pie=yes\n+  fi\n+elif test x$gcc_cv_ld != x; then\n+\t# Check if linker supports -pie option\n+\tif $gcc_cv_ld --help 2>/dev/null | grep -- -pie > /dev/null; then\n+\t\tgcc_cv_ld_pie=yes\n+\tfi\n+fi\n+if test x\"$gcc_cv_ld_pie\" = xyes; then\n+\tAC_DEFINE(HAVE_LD_PIE, 1,\n+[Define if your linker supports -pie option.])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_pie)\n+\n # Miscellaneous target-specific checks.\n case \"$target\" in\n   mips*-*-*)"}, {"sha": "17584dba87b16e60d606db65d1c65e1876a4622b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -310,7 +310,7 @@ in the following sections.\n @item Linker Options\n @xref{Link Options,,Options for Linking}.\n @gccoptlist{@var{object-file-name}  -l@var{library} @gol\n--nostartfiles  -nodefaultlibs  -nostdlib @gol\n+-nostartfiles  -nodefaultlibs  -nostdlib -pie @gol\n -s  -static  -static-libgcc  -shared  -shared-libgcc  -symbolic @gol\n -Wl,@var{option}  -Xlinker @var{option} @gol\n -u @var{symbol}}\n@@ -672,7 +672,7 @@ in the following sections.\n -fasynchronous-unwind-tables @gol\n -finhibit-size-directive  -finstrument-functions @gol\n -fno-common  -fno-ident  -fno-gnu-linker @gol\n--fpcc-struct-return  -fpic  -fPIC @gol\n+-fpcc-struct-return  -fpic  -fPIC -fpie -fPIE @gol\n -freg-struct-return  -fshared-data  -fshort-enums @gol\n -fshort-double  -fshort-wchar @gol\n -fverbose-asm  -fpack-struct  -fstack-check @gol\n@@ -4815,6 +4815,13 @@ library subroutines.  (For example, @samp{__main}, used to ensure C++\n constructors will be called; @pxref{Collect2,,@code{collect2}, gccint,\n GNU Compiler Collection (GCC) Internals}.)\n \n+@item -pie\n+@opindex pie\n+Produce a position independent executable on targets which support it.\n+For predictable results, you must also specify the same set of options\n+that were used to generate code (@option{-fpie}, @option{-fPIE},\n+or model suboptions) when you specify this option.\n+\n @item -s\n @opindex s\n Remove all symbol table and relocation information from the executable.\n@@ -11040,6 +11047,15 @@ and the SPARC.\n Position-independent code requires special support, and therefore works\n only on certain machines.\n \n+@item -fpie\n+@itemx -fPIE\n+@opindex fpie\n+@opindex fPIE\n+These options are similar to @option{-fpic} and @option{-fPIC}, but\n+generated position independent code can be only linked into executables.\n+Usually these options are used when @option{-pie} GCC option will be\n+used during linking.\n+\n @item -ffixed-@var{reg}\n @opindex ffixed\n Treat the register named @var{reg} as a fixed register; generated code"}, {"sha": "766b24dc4d7464a565a03a71ac167bd3775100fc", "filename": "gcc/flags.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -462,6 +462,16 @@ extern int flag_pedantic_errors;\n \n extern int flag_pic;\n \n+/* Nonzero if we are compiling position independent code for executable.\n+   1 vs 2 for a target-dependent \"small\" or \"large\" mode.  */\n+      \n+extern int flag_pie;\n+      \n+/* Nonzero if we are compiling code for a shared library, zero for\n+   executable.  */\n+\n+extern int flag_shlib;\n+\n /* Nonzero means generate extra code for exception handling and enable\n    exception handling.  */\n "}, {"sha": "e71a0e85f2f861775c98078cf6541ca0bf0618a9", "filename": "gcc/gcc.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -664,6 +664,14 @@ proper position among the other output files.  */\n #define LINK_GCC_C_SEQUENCE_SPEC \"%G %L %G\"\n #endif\n \n+#ifndef LINK_PIE_SPEC\n+#ifdef HAVE_LD_PIE\n+#define LINK_PIE_SPEC \"%{pie:-pie} \"\n+#else\n+#define LINK_PIE_SPEC \"%{pie:} \"\n+#endif\n+#endif\n+\n /* -u* was put back because both BSD and SysV seem to support it.  */\n /* %{static:} simply prevents an error message if the target machine\n    doesn't handle -static.  */\n@@ -673,8 +681,8 @@ proper position among the other output files.  */\n #ifndef LINK_COMMAND_SPEC\n #define LINK_COMMAND_SPEC \"\\\n %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n-    %(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r} %{s} %{t}\\\n-    %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n+    %(linker) %l \" LINK_PIE_SPEC \"%X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r}\\\n+    %{s} %{t} %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n     %{static:} %{L*} %(link_libgcc) %o %{fprofile-arcs:-lgcov}\\\n     %{!nostdlib:%{!nodefaultlibs:%(link_gcc_c_sequence)}}\\\n     %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n@@ -1021,6 +1029,7 @@ static const struct option_map option_map[] =\n    {\"--param\", \"--param\", \"a\"},\n    {\"--pedantic\", \"-pedantic\", 0},\n    {\"--pedantic-errors\", \"-pedantic-errors\", 0},\n+   {\"--pie\", \"-pie\", 0},\n    {\"--pipe\", \"-pipe\", 0},\n    {\"--prefix\", \"-B\", \"a\"},\n    {\"--preprocess\", \"-E\", 0},"}, {"sha": "660b4e1efaccc655223f758cafb68d016b203418", "filename": "gcc/toplev.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -759,6 +759,17 @@ int flag_delayed_branch;\n \n int flag_pic;\n \n+/* Nonzero if we are compiling position independent code for executable.\n+   The value is 1 if we are doing \"small\" pic; value is 2 if we're doing\n+   \"large\" pic.  */\n+\n+int flag_pie;\n+\n+/* Nonzero if we are compiling code for a shared library, zero for\n+   executable.  */\n+\n+int flag_shlib;\n+\n /* Set to the default thread-local storage (tls) model to use.  */\n \n enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n@@ -1156,6 +1167,9 @@ static const lang_independent_options f_options[] =\n   {\"pic\", &flag_pic, 1,\n    N_(\"Generate position independent code, if possible\") },\n   {\"PIC\", &flag_pic, 2, \"\"},\n+  {\"pie\", &flag_pie, 1,\n+   N_(\"Generate position independent code for executables, if possible\") },\n+  {\"PIE\", &flag_pie, 2, \"\"},\n   {\"exceptions\", &flag_exceptions, 1,\n    N_(\"Enable exception handling\") },\n   {\"unwind-tables\", &flag_unwind_tables, 1,\n@@ -5338,6 +5352,11 @@ parse_options_and_default_flags (int argc, char **argv)\n \t}\n     }\n \n+  if (flag_pie)\n+    flag_pic = flag_pie;\n+  if (flag_pic && !flag_pie)\n+    flag_shlib = 1;\n+\n   if (flag_no_inline == 2)\n     flag_no_inline = 0;\n   else"}, {"sha": "cf2722cf2e8ee510d4cc5f25f6784f132ff2c407", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4dd31f80136aadf69774545916675b50836d6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=24a4dd31f80136aadf69774545916675b50836d6", "patch": "@@ -5280,7 +5280,7 @@ bool\n default_binds_local_p (exp)\n      tree exp;\n {\n-  return default_binds_local_p_1 (exp, flag_pic);\n+  return default_binds_local_p_1 (exp, flag_shlib);\n }\n \n bool"}]}