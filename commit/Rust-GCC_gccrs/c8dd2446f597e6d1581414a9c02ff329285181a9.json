{"sha": "c8dd2446f597e6d1581414a9c02ff329285181a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkZDI0NDZmNTk3ZTZkMTU4MTQxNGE5YzAyZmYzMjkyODUxODFhOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-06T11:21:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-07T16:58:43Z"}, "message": "libstdc++: Implement P1878R1 \"Constraining Readable Types\"\n\n\t* include/bits/iterator_concepts.h (iter_difference_t, iter_value_t):\n\tUse remove_cvref_t.\n\t(readable_traits): Rename to indirectly_readable_traits.\n\t(readable): Rename to indirectly_readable.\n\t(writable): Rename to indirectly_writable.\n\t(__detail::__iter_exchange_move): Do not use remove_reference_t.\n\t(indirectly_swappable): Adjust requires expression parameter types.\n\texpression.\n\t* include/bits/ranges_algo.h (ranges::transform, ranges::replace)\n\t(ranges::replace_if, ranges::generate_n, ranges::generate)\n\t(ranges::remove): Use new name for writable.\n\t* include/bits/stl_iterator.h (__detail::__common_iter_has_arrow):\n\tUse new name for readable.\n\t* include/ext/pointer.h (readable_traits<_Pointer_adapter<P>>): Use\n\tnew name for readable_traits.\n\t* testsuite/24_iterators/associated_types/readable.traits.cc: Likewise.\n\t* testsuite/24_iterators/indirect_callable/projected.cc: Adjust for\n\tnew definition of indirectly_readable.", "tree": {"sha": "2bd00d96b1d21587481af2fa80055328911e0f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd00d96b1d21587481af2fa80055328911e0f73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8dd2446f597e6d1581414a9c02ff329285181a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dd2446f597e6d1581414a9c02ff329285181a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8dd2446f597e6d1581414a9c02ff329285181a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dd2446f597e6d1581414a9c02ff329285181a9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d222d8ec3c100f5c0a6974e7dcee16903f6f0e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d222d8ec3c100f5c0a6974e7dcee16903f6f0e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d222d8ec3c100f5c0a6974e7dcee16903f6f0e3a"}], "stats": {"total": 227, "additions": 139, "deletions": 88}, "files": [{"sha": "1781e63f1ccbb2d3c34a0bfd9105f5fd5220e146", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -1,5 +1,24 @@\n 2020-02-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/iterator_concepts.h (iter_difference_t, iter_value_t):\n+\tUse remove_cvref_t.\n+\t(readable_traits): Rename to indirectly_readable_traits.\n+\t(readable): Rename to indirectly_readable.\n+\t(writable): Rename to indirectly_writable.\n+\t(__detail::__iter_exchange_move): Do not use remove_reference_t.\n+\t(indirectly_swappable): Adjust requires expression parameter types.\n+\texpression.\n+\t* include/bits/ranges_algo.h (ranges::transform, ranges::replace)\n+\t(ranges::replace_if, ranges::generate_n, ranges::generate)\n+\t(ranges::remove): Use new name for writable.\n+\t* include/bits/stl_iterator.h (__detail::__common_iter_has_arrow):\n+\tUse new name for readable.\n+\t* include/ext/pointer.h (readable_traits<_Pointer_adapter<P>>): Use\n+\tnew name for readable_traits.\n+\t* testsuite/24_iterators/associated_types/readable.traits.cc: Likewise.\n+\t* testsuite/24_iterators/indirect_callable/projected.cc: Adjust for\n+\tnew definition of indirectly_readable.\n+\n \t* include/bits/stl_iterator.h (__detail::__common_iter_ptr): Change\n \tto take parameters of common_iterator, instead of the common_iterator\n \ttype itself. Fix argument for __common_iter_has_arrow constraint."}, {"sha": "04c862a4b97829f5eefd5cb2a1720e2028e7e3ac", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 73, "deletions": 48, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -173,11 +173,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // ITER_TRAITS\n     template<typename _Iter, typename _Tp = _Iter>\n       using __iter_traits = typename __iter_traits_impl<_Iter, _Tp>::type;\n+\n+    template<typename _Tp>\n+      using __iter_diff_t = typename\n+\t__iter_traits<_Tp, incrementable_traits<_Tp>>::difference_type;\n   } // namespace __detail\n \n   template<typename _Tp>\n-    using iter_difference_t = typename\n-      __detail::__iter_traits<_Tp, incrementable_traits<_Tp>>::difference_type;\n+    using iter_difference_t = __detail::__iter_diff_t<remove_cvref_t<_Tp>>;\n \n   namespace __detail\n   {\n@@ -188,35 +191,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { using value_type = remove_cv_t<_Tp>; };\n   } // namespace __detail\n \n-  template<typename> struct readable_traits { };\n+  template<typename> struct indirectly_readable_traits { };\n \n   template<typename _Tp>\n-    struct readable_traits<_Tp*>\n+    struct indirectly_readable_traits<_Tp*>\n     : __detail::__cond_value_type<_Tp>\n     { };\n \n   template<typename _Iter> requires is_array_v<_Iter>\n-    struct readable_traits<_Iter>\n+    struct indirectly_readable_traits<_Iter>\n     { using value_type = remove_cv_t<remove_extent_t<_Iter>>; };\n \n   template<typename _Iter>\n-    struct readable_traits<const _Iter>\n-    : readable_traits<_Iter>\n+    struct indirectly_readable_traits<const _Iter>\n+    : indirectly_readable_traits<_Iter>\n     { };\n \n   template<typename _Tp> requires requires { typename _Tp::value_type; }\n-    struct readable_traits<_Tp>\n+    struct indirectly_readable_traits<_Tp>\n     : __detail::__cond_value_type<typename _Tp::value_type>\n     { };\n \n   template<typename _Tp> requires requires { typename _Tp::element_type; }\n-    struct readable_traits<_Tp>\n+    struct indirectly_readable_traits<_Tp>\n     : __detail::__cond_value_type<typename _Tp::element_type>\n     { };\n \n+  namespace __detail\n+  {\n+    template<typename _Tp>\n+      using __iter_value_t = typename\n+\t__iter_traits<_Tp, indirectly_readable_traits<_Tp>>::value_type;\n+  } // namespace __detail\n+\n   template<typename _Tp>\n-    using iter_value_t = typename\n-      __detail::__iter_traits<_Tp, readable_traits<_Tp>>::value_type;\n+    using iter_value_t = __detail::__iter_value_t<remove_cvref_t<_Tp>>;\n \n   namespace __detail\n   {\n@@ -235,11 +244,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t&& requires(_Iter __it)\n \t{\n \t  typename incrementable_traits<_Iter>::difference_type;\n-\t  typename readable_traits<_Iter>::value_type;\n+\t  typename indirectly_readable_traits<_Iter>::value_type;\n \t  typename common_reference_t<iter_reference_t<_Iter>&&,\n-\t\t   typename readable_traits<_Iter>::value_type&>;\n+\t\t   typename indirectly_readable_traits<_Iter>::value_type&>;\n \t  typename common_reference_t<decltype(*__it++)&&,\n-\t\t   typename readable_traits<_Iter>::value_type&>;\n+\t\t   typename indirectly_readable_traits<_Iter>::value_type&>;\n \t  requires signed_integral<typename incrementable_traits<_Iter>::difference_type>;\n \t};\n \n@@ -248,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t&& constructible_from<_Iter>\n \t&& is_lvalue_reference_v<iter_reference_t<_Iter>>\n \t&& same_as<remove_cvref_t<iter_reference_t<_Iter>>,\n-\t\t   typename readable_traits<_Iter>::value_type>\n+\t\t   typename indirectly_readable_traits<_Iter>::value_type>\n \t&& requires(_Iter __it)\n \t{\n \t  {  __it++ } -> convertible_to<const _Iter&>;\n@@ -290,6 +299,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Iter>\n       concept __iter_without_nested_types = !__iter_with_nested_types<_Iter>;\n \n+    // FIXME: These have to be at namespace-scope because of PR 92103.\n     template<typename _Iter, bool __use_arrow = false>\n       struct __ptr\n       { using type = void; };\n@@ -376,7 +386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       using iterator_category = typename __detail::__cat<_Iterator>::type;\n       using value_type\n-\t= typename readable_traits<_Iterator>::value_type;\n+\t= typename indirectly_readable_traits<_Iterator>::value_type;\n       using difference_type\n \t= typename incrementable_traits<_Iterator>::difference_type;\n       using pointer\t      = typename __detail::__ptr<_Iterator, true>::type;\n@@ -429,29 +439,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // ITER_CONCEPT\n     template<typename _Iter>\n       using __iter_concept = typename __iter_concept_impl<_Iter>::type;\n-  } // namespace __detail\n \n-  /// Requirements for types that are readable by applying operator*.\n   template<typename _In>\n-    concept readable = requires\n+    concept __indirectly_readable_impl = requires(const _In __in)\n       {\n \ttypename iter_value_t<_In>;\n \ttypename iter_reference_t<_In>;\n \ttypename iter_rvalue_reference_t<_In>;\n+\t{ *__in } -> same_as<iter_reference_t<_In>>;\n+\t{ ranges::iter_move(__in) } -> same_as<iter_rvalue_reference_t<_In>>;\n       }\n       && common_reference_with<iter_reference_t<_In>&&, iter_value_t<_In>&>\n       && common_reference_with<iter_reference_t<_In>&&,\n \t\t\t      iter_rvalue_reference_t<_In>&&>\n       && common_reference_with<iter_rvalue_reference_t<_In>&&,\n \t\t\t       const iter_value_t<_In>&>;\n \n-  template<readable _Tp>\n+  } // namespace __detail\n+\n+  /// Requirements for types that are readable by applying operator*.\n+  template<typename _In>\n+    concept indirectly_readable\n+      = __detail::__indirectly_readable_impl<remove_cvref_t<_In>>;\n+\n+  template<indirectly_readable _Tp>\n     using iter_common_reference_t\n       = common_reference_t<iter_reference_t<_Tp>, iter_value_t<_Tp>&>;\n \n   /// Requirements for writing a value into an iterator's referenced object.\n   template<typename _Out, typename _Tp>\n-    concept writable = requires(_Out&& __o, _Tp&& __t)\n+    concept indirectly_writable = requires(_Out&& __o, _Tp&& __t)\n       {\n \t*__o = std::forward<_Tp>(__t);\n \t*std::forward<_Out>(__o) = std::forward<_Tp>(__t);\n@@ -523,13 +540,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Iter>\n     concept input_iterator = input_or_output_iterator<_Iter>\n-      && readable<_Iter>\n+      && indirectly_readable<_Iter>\n       && requires { typename __detail::__iter_concept<_Iter>; }\n       && derived_from<__detail::__iter_concept<_Iter>, input_iterator_tag>;\n \n   template<typename _Iter, typename _Tp>\n     concept output_iterator = input_or_output_iterator<_Iter>\n-      && writable<_Iter, _Tp>\n+      && indirectly_writable<_Iter, _Tp>\n       && requires(_Iter __i, _Tp&& __t) { *__i++ = std::forward<_Tp>(__t); };\n \n   template<typename _Iter>\n@@ -579,15 +596,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // [indirectcallable.indirectinvocable], indirect callables\n \n   template<typename _Fn, typename _Iter>\n-    concept indirectly_unary_invocable = readable<_Iter>\n+    concept indirectly_unary_invocable = indirectly_readable<_Iter>\n       && copy_constructible<_Fn> && invocable<_Fn&, iter_value_t<_Iter>&>\n       && invocable<_Fn&, iter_reference_t<_Iter>>\n       && invocable<_Fn&, iter_common_reference_t<_Iter>>\n       && common_reference_with<invoke_result_t<_Fn&, iter_value_t<_Iter>&>,\n \t\t\t       invoke_result_t<_Fn&, iter_reference_t<_Iter>>>;\n \n   template<typename _Fn, typename _Iter>\n-    concept indirectly_regular_unary_invocable = readable<_Iter>\n+    concept indirectly_regular_unary_invocable = indirectly_readable<_Iter>\n       && copy_constructible<_Fn>\n       && regular_invocable<_Fn&, iter_value_t<_Iter>&>\n       && regular_invocable<_Fn&, iter_reference_t<_Iter>>\n@@ -596,13 +613,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t       invoke_result_t<_Fn&, iter_reference_t<_Iter>>>;\n \n   template<typename _Fn, typename _Iter>\n-    concept indirect_unary_predicate = readable<_Iter>\n+    concept indirect_unary_predicate = indirectly_readable<_Iter>\n       && copy_constructible<_Fn> && predicate<_Fn&, iter_value_t<_Iter>&>\n       && predicate<_Fn&, iter_reference_t<_Iter>>\n       && predicate<_Fn&, iter_common_reference_t<_Iter>>;\n \n   template<typename _Fn, typename _I1, typename _I2>\n-    concept indirect_binary_predicate = readable<_I1> && readable<_I2>\n+    concept indirect_binary_predicate\n+      = indirectly_readable<_I1> && indirectly_readable<_I2>\n       && copy_constructible<_Fn>\n       && predicate<_Fn&, iter_value_t<_I1>&, iter_value_t<_I2>&>\n       && predicate<_Fn&, iter_value_t<_I1>&, iter_reference_t<_I2>>\n@@ -612,7 +630,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   iter_common_reference_t<_I2>>;\n \n   template<typename _Fn, typename _I1, typename _I2 = _I1>\n-    concept indirect_equivalence_relation = readable<_I1> && readable<_I2>\n+    concept indirect_equivalence_relation\n+      = indirectly_readable<_I1> && indirectly_readable<_I2>\n       && copy_constructible<_Fn>\n       && equivalence_relation<_Fn&, iter_value_t<_I1>&, iter_value_t<_I2>&>\n       && equivalence_relation<_Fn&, iter_value_t<_I1>&, iter_reference_t<_I2>>\n@@ -623,7 +642,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      iter_common_reference_t<_I2>>;\n \n   template<typename _Fn, typename _I1, typename _I2 = _I1>\n-    concept indirect_strict_weak_order = readable<_I1> && readable<_I2>\n+    concept indirect_strict_weak_order\n+      = indirectly_readable<_I1> && indirectly_readable<_I2>\n       && copy_constructible<_Fn>\n       && strict_weak_order<_Fn&, iter_value_t<_I1>&, iter_value_t<_I2>&>\n       && strict_weak_order<_Fn&, iter_value_t<_I1>&, iter_reference_t<_I2>>\n@@ -633,12 +653,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   iter_common_reference_t<_I2>>;\n \n   template<typename _Fn, typename... _Is>\n-    requires (readable<_Is> && ...)\n+    requires (indirectly_readable<_Is> && ...)\n       && invocable<_Fn, iter_reference_t<_Is>...>\n     using indirect_result_t = invoke_result_t<_Fn, iter_reference_t<_Is>...>;\n \n   /// [projected], projected\n-  template<readable _Iter, indirectly_regular_unary_invocable<_Iter> _Proj>\n+  template<indirectly_readable _Iter,\n+\t   indirectly_regular_unary_invocable<_Iter> _Proj>\n     struct projected\n     {\n       using value_type = remove_cvref_t<indirect_result_t<_Proj&, _Iter>>;\n@@ -655,23 +676,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// [alg.req.ind.move], concept `indirectly_movable`\n \n   template<typename _In, typename _Out>\n-    concept indirectly_movable = readable<_In>\n-      && writable<_Out, iter_rvalue_reference_t<_In>>;\n+    concept indirectly_movable = indirectly_readable<_In>\n+      && indirectly_writable<_Out, iter_rvalue_reference_t<_In>>;\n \n   template<typename _In, typename _Out>\n     concept indirectly_movable_storable = indirectly_movable<_In, _Out>\n-      && writable<_Out, iter_value_t<_In>> && movable<iter_value_t<_In>>\n+      && indirectly_writable<_Out, iter_value_t<_In>>\n+      && movable<iter_value_t<_In>>\n       && constructible_from<iter_value_t<_In>, iter_rvalue_reference_t<_In>>\n       && assignable_from<iter_value_t<_In>&, iter_rvalue_reference_t<_In>>;\n \n   /// [alg.req.ind.copy], concept `indirectly_copyable`\n   template<typename _In, typename _Out>\n-    concept indirectly_copyable = readable<_In>\n-      && writable<_Out, iter_reference_t<_In>>;\n+    concept indirectly_copyable = indirectly_readable<_In>\n+      && indirectly_writable<_Out, iter_reference_t<_In>>;\n \n   template<typename _In, typename _Out>\n     concept indirectly_copyable_storable = indirectly_copyable<_In, _Out>\n-      && writable<_Out, const iter_value_t<_In>&>\n+      && indirectly_writable<_Out, const iter_value_t<_In>&>\n       && copyable<iter_value_t<_In>>\n       && constructible_from<iter_value_t<_In>, iter_reference_t<_In>>\n       && assignable_from<iter_value_t<_In>&, iter_reference_t<_In>>;\n@@ -692,12 +714,12 @@ namespace ranges\n \t};\n \n     template<typename _Xp, typename _Yp>\n-      constexpr iter_value_t<remove_reference_t<_Xp>>\n+      constexpr iter_value_t<_Xp>\n       __iter_exchange_move(_Xp&& __x, _Yp&& __y)\n-      noexcept(noexcept(iter_value_t<remove_reference_t<_Xp>>(iter_move(__x)))\n+      noexcept(noexcept(iter_value_t<_Xp>(iter_move(__x)))\n \t       && noexcept(*__x = iter_move(__y)))\n       {\n-\titer_value_t<remove_reference_t<_Xp>> __old_value(iter_move(__x));\n+\titer_value_t<_Xp> __old_value(iter_move(__x));\n \t*__x = iter_move(__y);\n \treturn __old_value;\n       }\n@@ -712,8 +734,9 @@ namespace ranges\n \t  if constexpr (__adl_iswap<_Tp, _Up>)\n \t    return noexcept(iter_swap(std::declval<_Tp>(),\n \t\t\t\t      std::declval<_Up>()));\n-\t  else if constexpr (readable<_Tp> && readable<_Up>\n-\t    && swappable_with<iter_reference_t<_Tp>, iter_reference_t<_Up>>)\n+\t  else if constexpr (indirectly_readable<_Tp>\n+\t      && indirectly_readable<_Up>\n+\t      && swappable_with<iter_reference_t<_Tp>, iter_reference_t<_Up>>)\n \t    return noexcept(ranges::swap(*std::declval<_Tp>(),\n \t\t\t\t\t *std::declval<_Up>()));\n \t  else\n@@ -725,8 +748,8 @@ namespace ranges\n     public:\n       template<typename _Tp, typename _Up>\n \trequires __adl_iswap<_Tp, _Up>\n-\t|| (readable<remove_reference_t<_Tp>>\n-\t    && readable<remove_reference_t<_Up>>\n+\t|| (indirectly_readable<remove_reference_t<_Tp>>\n+\t    && indirectly_readable<remove_reference_t<_Up>>\n \t    && swappable_with<iter_reference_t<_Tp>, iter_reference_t<_Up>>)\n \t|| (indirectly_movable_storable<_Tp, _Up>\n \t    && indirectly_movable_storable<_Up, _Tp>)\n@@ -736,8 +759,9 @@ namespace ranges\n \t{\n \t  if constexpr (__adl_iswap<_Tp, _Up>)\n \t    iter_swap(static_cast<_Tp&&>(__e1), static_cast<_Up&&>(__e2));\n-\t  else if constexpr (readable<_Tp> && readable<_Up>\n-\t    && swappable_with<iter_reference_t<_Tp>, iter_reference_t<_Up>>)\n+\t  else if constexpr (indirectly_readable<_Tp>\n+\t      && indirectly_readable<_Up>\n+\t      && swappable_with<iter_reference_t<_Tp>, iter_reference_t<_Up>>)\n \t    ranges::swap(*__e1, *__e2);\n \t  else\n \t    *__e1 = __iter_exchange_move(__e2, __e1);\n@@ -754,8 +778,9 @@ namespace ranges\n \n   /// [alg.req.ind.swap], concept `indirectly_swappable`\n   template<typename _I1, typename _I2 = _I1>\n-    concept indirectly_swappable = readable<_I1> && readable<_I2>\n-      && requires(_I1& __i1, _I2& __i2)\n+    concept indirectly_swappable\n+      = indirectly_readable<_I1> && indirectly_readable<_I2>\n+      && requires(const _I1 __i1, const _I2 __i2)\n       {\n \tranges::iter_swap(__i1, __i1);\n \tranges::iter_swap(__i2, __i2);"}, {"sha": "e065ff2a9740ff65fafc00eac9d17b14bc58d694", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -1219,7 +1219,9 @@ namespace ranges\n   template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n \t   weakly_incrementable _Out,\n \t   copy_constructible _Fp, typename _Proj = identity>\n-    requires writable<_Out, indirect_result_t<_Fp&, projected<_Iter, _Proj>>>\n+    requires indirectly_writable<_Out,\n+\t\t\t\t indirect_result_t<_Fp&,\n+\t\t\t\t   projected<_Iter, _Proj>>>\n     constexpr unary_transform_result<_Iter, _Out>\n     transform(_Iter __first1, _Sent __last1, _Out __result,\n \t      _Fp __op, _Proj __proj = {})\n@@ -1231,9 +1233,9 @@ namespace ranges\n \n   template<input_range _Range, weakly_incrementable _Out,\n \t   copy_constructible _Fp, typename _Proj = identity>\n-    requires writable<_Out,\n-\t\t      indirect_result_t<_Fp&, projected<iterator_t<_Range>,\n-\t\t\t\t\t\t      _Proj>>>\n+    requires indirectly_writable<_Out,\n+\t\t\t\t indirect_result_t<_Fp&,\n+\t\t\t\t   projected<iterator_t<_Range>, _Proj>>>\n     constexpr unary_transform_result<safe_iterator_t<_Range>, _Out>\n     transform(_Range&& __r, _Out __result, _Fp __op, _Proj __proj = {})\n     {\n@@ -1268,8 +1270,10 @@ namespace ranges\n \t   input_iterator _Iter2, sentinel_for<_Iter2> _Sent2,\n \t   weakly_incrementable _Out, copy_constructible _Fp,\n \t   typename _Proj1 = identity, typename _Proj2 = identity>\n-    requires writable<_Out, indirect_result_t<_Fp&, projected<_Iter1, _Proj1>,\n-\t\t\t\t\t   projected<_Iter2, _Proj2>>>\n+    requires indirectly_writable<_Out,\n+\t\t\t\t indirect_result_t<_Fp&,\n+\t\t\t\t   projected<_Iter1, _Proj1>,\n+\t\t\t\t   projected<_Iter2, _Proj2>>>\n     constexpr binary_transform_result<_Iter1, _Iter2, _Out>\n     transform(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n \t      _Out __result, _Fp __binary_op,\n@@ -1286,11 +1290,10 @@ namespace ranges\n   template<input_range _Range1, input_range _Range2,\n \t   weakly_incrementable _Out, copy_constructible _Fp,\n \t   typename _Proj1 = identity, typename _Proj2 = identity>\n-    requires writable<_Out, indirect_result_t<_Fp&,\n-\t\t\t\t\t      projected<iterator_t<_Range1>,\n-\t\t\t\t\t\t\t_Proj1>,\n-\t\t\t\t\t      projected<iterator_t<_Range2>,\n-\t\t\t\t\t\t\t_Proj2>>>\n+    requires indirectly_writable<_Out,\n+\t\t\t\t indirect_result_t<_Fp&,\n+\t\t\t\t   projected<iterator_t<_Range1>, _Proj1>,\n+\t\t\t\t   projected<iterator_t<_Range2>, _Proj2>>>\n     constexpr binary_transform_result<safe_iterator_t<_Range1>,\n \t\t\t\t      safe_iterator_t<_Range2>, _Out>\n     transform(_Range1&& __r1, _Range2&& __r2, _Out __result,\n@@ -1304,9 +1307,9 @@ namespace ranges\n \n   template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n \t   typename _Tp1, typename _Tp2, typename _Proj = identity>\n-    requires writable<_Iter, const _Tp2&> &&\n-\t     indirect_binary_predicate<ranges::equal_to,\n-\t\t\t\t       projected<_Iter, _Proj>, const _Tp1*>\n+    requires indirectly_writable<_Iter, const _Tp2&>\n+      && indirect_binary_predicate<ranges::equal_to, projected<_Iter, _Proj>,\n+\t\t\t\t   const _Tp1*>\n     constexpr _Iter\n     replace(_Iter __first, _Sent __last,\n \t    const _Tp1& __old_value, const _Tp2& __new_value,\n@@ -1320,10 +1323,10 @@ namespace ranges\n \n   template<input_range _Range,\n \t   typename _Tp1, typename _Tp2, typename _Proj = identity>\n-    requires writable<iterator_t<_Range>, const _Tp2&> &&\n-\t     indirect_binary_predicate<ranges::equal_to,\n-\t\t\t\t       projected<iterator_t<_Range>, _Proj>,\n-\t\t\t\t\t\t const _Tp1*>\n+    requires indirectly_writable<iterator_t<_Range>, const _Tp2&>\n+      && indirect_binary_predicate<ranges::equal_to,\n+\t\t\t\t   projected<iterator_t<_Range>, _Proj>,\n+\t\t\t\t   const _Tp1*>\n     constexpr safe_iterator_t<_Range>\n     replace(_Range&& __r,\n \t    const _Tp1& __old_value, const _Tp2& __new_value,\n@@ -1336,7 +1339,7 @@ namespace ranges\n   template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n \t   typename _Tp, typename _Proj = identity,\n \t   indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n-    requires writable<_Iter, const _Tp&>\n+    requires indirectly_writable<_Iter, const _Tp&>\n     constexpr _Iter\n     replace_if(_Iter __first, _Sent __last,\n \t       _Pred __pred, const _Tp& __new_value, _Proj __proj = {})\n@@ -1349,7 +1352,7 @@ namespace ranges\n \n   template<input_range _Range, typename _Tp, typename _Proj = identity,\n \t   indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n-    requires writable<iterator_t<_Range>, const _Tp&>\n+    requires indirectly_writable<iterator_t<_Range>, const _Tp&>\n     constexpr safe_iterator_t<_Range>\n     replace_if(_Range&& __r,\n \t       _Pred __pred, const _Tp& __new_value, _Proj __proj = {})\n@@ -1496,7 +1499,8 @@ namespace ranges\n     }\n \n   template<input_or_output_iterator _Out, copy_constructible _Fp>\n-    requires invocable<_Fp&> && writable<_Out, invoke_result_t<_Fp&>>\n+    requires invocable<_Fp&>\n+      && indirectly_writable<_Out, invoke_result_t<_Fp&>>\n     constexpr _Out\n     generate_n(_Out __first, iter_difference_t<_Out> __n, _Fp __gen)\n     {\n@@ -1507,7 +1511,8 @@ namespace ranges\n \n   template<input_or_output_iterator _Out, sentinel_for<_Out> _Sent,\n \t   copy_constructible _Fp>\n-    requires invocable<_Fp&> && writable<_Out, invoke_result_t<_Fp&>>\n+    requires invocable<_Fp&>\n+      && indirectly_writable<_Out, invoke_result_t<_Fp&>>\n     constexpr _Out\n     generate(_Out __first, _Sent __last, _Fp __gen)\n     {\n@@ -1573,10 +1578,10 @@ namespace ranges\n     }\n \n   template<forward_range _Range, typename _Tp, typename _Proj = identity>\n-    requires permutable<iterator_t<_Range>> &&\n-\t     indirect_binary_predicate<ranges::equal_to,\n-\t\t\t\t       projected<iterator_t<_Range>, _Proj>,\n-\t\t\t\t       const _Tp*>\n+    requires permutable<iterator_t<_Range>>\n+      && indirect_binary_predicate<ranges::equal_to,\n+\t\t\t\t   projected<iterator_t<_Range>, _Proj>,\n+\t\t\t\t   const _Tp*>\n     constexpr safe_subrange_t<_Range>\n     remove(_Range&& __r, const _Tp& __value, _Proj __proj = {})\n     {"}, {"sha": "4e70672924b6a808f6bbae3d28a4f0f799f8b6a4", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -1417,7 +1417,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n \n     template<typename _It>\n-      concept __common_iter_has_arrow = readable<const _It>\n+      concept __common_iter_has_arrow = indirectly_readable<const _It>\n \t&& (requires(const _It& __it) { __it.operator->(); }\n \t    || is_reference_v<iter_reference_t<_It>>\n \t    || constructible_from<iter_value_t<_It>, iter_reference_t<_It>>);"}, {"sha": "aef622e2e23b4b61dccf0de7c8969df7933b261e", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -47,7 +47,7 @@\n # include <bits/ptr_traits.h>\n #endif\n #if __cplusplus > 201703L\n-# include <iterator> // for readable_traits\n+# include <iterator> // for indirectly_readable_traits\n #endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n@@ -598,11 +598,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if __cpp_lib_concepts\n-  template<typename _Storage_policy>\n-    struct readable_traits<__gnu_cxx::_Pointer_adapter<_Storage_policy>>\n+  template<typename _Policy>\n+    struct indirectly_readable_traits<__gnu_cxx::_Pointer_adapter<_Policy>>\n     {\n       using value_type\n-\t= typename __gnu_cxx::_Pointer_adapter<_Storage_policy>::value_type;\n+\t= typename __gnu_cxx::_Pointer_adapter<_Policy>::value_type;\n     };\n #endif\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "b503b0cdc1ebaca8c0021bdffd441cd554e6e3a7", "filename": "libstdc++-v3/testsuite/24_iterators/associated_types/readable.traits.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Freadable.traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Freadable.traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Freadable.traits.cc?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -24,9 +24,9 @@ struct none;\n \n template<typename T>\n   concept has_readable_traits_type\n-    = requires { typename std::readable_traits<T>::value_type; };\n+    = requires { typename std::indirectly_readable_traits<T>::value_type; };\n \n-// Check std::readable_traits<T>::value_type is U (or doesn't exist).\n+// Check std::indirectly_readable_traits<T>::value_type is U (or doesn't exist).\n template<typename T, typename U>\n   concept check_readable_traits\n     = (has_readable_traits_type<T> != std::same_as<U, none>);\n@@ -62,7 +62,7 @@ static_assert( check_readable_traits<const D, none> );\n \n struct E { };\n template<>\n-  struct std::readable_traits<E> { using value_type = long; };\n+  struct std::indirectly_readable_traits<E> { using value_type = long; };\n static_assert( check_readable_traits<E, long> );\n static_assert( check_readable_traits<const E, long> );\n \n@@ -103,15 +103,15 @@ static_assert( check_alias<F, std::iterator_traits<F>::value_type> );\n \n struct G { };\n template<>\n-  struct std::readable_traits<G> { using value_type = G; };\n+  struct std::indirectly_readable_traits<G> { using value_type = G; };\n template<>\n   struct std::iterator_traits<G> { using value_type = int; };\n // iterator_traits<G> is specialized, so use its value_type.\n static_assert( check_alias<G, std::iterator_traits<G>::value_type> );\n \n struct H { };\n template<>\n-  struct std::readable_traits<H> { using value_type = H; };\n+  struct std::indirectly_readable_traits<H> { using value_type = H; };\n template<>\n   struct std::iterator_traits<H>\n   {\n@@ -128,8 +128,8 @@ struct I\n   using value_type = I;\n };\n // iterator_traits<I> is not specialized, and no standard specialization\n-// matches, so use readable_traits.\n-static_assert( check_alias<I, std::readable_traits<I>::value_type> );\n+// matches, so use indirectly_readable_traits.\n+static_assert( check_alias<I, std::indirectly_readable_traits<I>::value_type> );\n \n struct J\n {"}, {"sha": "f6e4afb7dc91513c40d9ec6f9b76eff0a1450282", "filename": "libstdc++-v3/testsuite/24_iterators/indirect_callable/projected.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2Fprojected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dd2446f597e6d1581414a9c02ff329285181a9/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2Fprojected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2Fprojected.cc?ref=c8dd2446f597e6d1581414a9c02ff329285181a9", "patch": "@@ -29,9 +29,11 @@ static_assert(std::same_as<decltype(*std::declval<const PI<int*>&>()), int&>);\n struct X\n {\n   using value_type = char*;\n-  char* const& operator*() &;\n+  char* const& operator*() const;\n };\n-static_assert( std::readable<X> );\n+static_assert( std::indirectly_readable<X> );\n+static_assert( std::indirectly_readable<X&> );\n+static_assert( std::indirectly_readable<const X> );\n static_assert(std::same_as<PI<X>::value_type, char*>);\n static_assert(std::same_as<decltype(*std::declval<PI<X>&>()), char* const&>);\n "}]}