{"sha": "ad1a6d451fc204825c147a83195b545e6ac3f423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxYTZkNDUxZmMyMDQ4MjVjMTQ3YTgzMTk1YjU0NWU2YWMzZjQyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-12-12T10:32:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-12-12T10:32:03Z"}, "message": "extend.texi (Deprecated Features): Deprecate implicit typename.\n\n\t* doc/extend.texi (Deprecated Features): Deprecate implicit\n\ttypename. Document that named return and initializer lists are now\n\tremoved.\ncp:\n\t* decl.c (grokdeclarator): Deprecated implicit typename use.\ntestsuite:\n\t* g++.old-deja/g++.brendan/crash56.C: Adjust implicit typename.\n\t* g++.old-deja/g++.jason/2371.C: Likewise.\n\t* g++.old-deja/g++.jason/template33.C: Likewise.\n\t* g++.old-deja/g++.jason/template34.C: Likewise.\n\t* g++.old-deja/g++.jason/template36.C: Likewise.\n\t* g++.old-deja/g++.oliva/typename1.C: Likewise.\n\t* g++.old-deja/g++.oliva/typename2.C: Likewise.\n\t* g++.old-deja/g++.other/typename1.C: Likewise.\n\t* g++.old-deja/g++.pt/inherit2.C: Likewise.\n\t* g++.old-deja/g++.pt/nontype5.C: Likewise.\n\t* g++.old-deja/g++.pt/typename11.C: Likewise.\n\t* g++.old-deja/g++.pt/typename14.C: Likewise.\n\t* g++.old-deja/g++.pt/typename16.C: Likewise.\n\t* g++.old-deja/g++.pt/typename3.C: Likewise.\n\t* g++.old-deja/g++.pt/typename4.C: Likewise.\n\t* g++.old-deja/g++.pt/typename5.C: Likewise.\n\t* g++.old-deja/g++.pt/typename7.C: Likewise.\n\t* g++.old-deja/g++.robertl/eb9.C: Likewise.\n\nFrom-SVN: r47927", "tree": {"sha": "99b2a32054b3589da751ba02c5758f319cb48548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b2a32054b3589da751ba02c5758f319cb48548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1a6d451fc204825c147a83195b545e6ac3f423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1a6d451fc204825c147a83195b545e6ac3f423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1a6d451fc204825c147a83195b545e6ac3f423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1a6d451fc204825c147a83195b545e6ac3f423/comments", "author": null, "committer": null, "parents": [{"sha": "3f2c5d1a0d08e8d9b3048a71c56de9ddc4293924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2c5d1a0d08e8d9b3048a71c56de9ddc4293924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2c5d1a0d08e8d9b3048a71c56de9ddc4293924"}], "stats": {"total": 228, "additions": 161, "deletions": 67}, "files": [{"sha": "8aa25f0e958a0c57ccab33194640ed51d4721fca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,3 +1,9 @@\n+2001-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/extend.texi (Deprecated Features): Deprecate implicit\n+\ttypename. Document that named return and initializer lists are now\n+\tremoved.\n+\n 2001-12-11  Roger Sayle <roger@eyesopen.com>\n \n \t* except.c (reachable_next_level): Handle ERT_UNKNOWN to avoid"}, {"sha": "0676fb1484573363277b876b497d1b8b5c1cf695", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,3 +1,7 @@\n+2001-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (grokdeclarator): Deprecated implicit typename use.\n+\n 2001-12-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR g++/51"}, {"sha": "30050fe0dea2121f7b122555574a207fb1d441ab", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -10137,6 +10137,21 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n       type = integer_type_node;\n     }\n+  \n+  if (type && TREE_CODE (type) == TYPENAME_TYPE && TREE_TYPE (type))\n+    {\n+      /* The implicit typename extension is deprecated and will be\n+\t removed.  Warn about its use now.  */\n+      cp_warning (\"`%T' is implicitly a typename\", type);\n+      cp_deprecated (\"implicit typename\");\n+\n+      /* Now remove its implicitness, so that we don't warn again.\n+         For instance this might be a typedef, and we do not want to\n+         warn on uses of the typedef itself.  Simply clearing the\n+         TREE_TYPE is insufficient.  */\n+      type = copy_node (type);\n+      TREE_TYPE (type) = NULL_TREE;\n+    }\n \n   ctype = NULL_TREE;\n "}, {"sha": "80addd33160ac0dfc25a1f8ff63b9ffa9ab5feb9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -5450,11 +5450,19 @@ parameters, as C++ demands.  This feature has been removed, except where\n it is required for backwards compatibility @xref{Backwards Compatibility}.\n @end table\n \n-The named return value extension has been deprecated, and will be\n-removed from g++ at some point.\n+The named return value extension has been deprecated, and is now\n+removed from g++.\n \n The use of initializer lists with new expressions has been deprecated,\n-and will be removed from g++ at some point.\n+and is now removed from g++.\n+\n+Floating and complex non-type template parameters have been deprecated,\n+and are now removed from g++.\n+\n+The implicit typename extension has been deprecated and will be removed\n+from g++ at some point.  In some cases g++ determines that a dependant\n+type such as @code{TPL<T>::X} is a type without needing a\n+@code{typename} keyword, contrary to the standard.\n \n @node Backwards Compatibility\n @section Backwards Compatibility\n@@ -5477,7 +5485,7 @@ the end of the scope which contained the for statement (rather than just\n within the for scope).  G++ retains this, but issues a warning, if such a\n variable is accessed outside the for scope.\n \n-@item implicit C language\n+@item Implicit C language\n Old C system header files did not contain an @code{extern \"C\" @{@dots{}@}}\n scope to set the language.  On such systems, all header files are\n implicitly scoped inside a C language scope.  Also, an empty prototype"}, {"sha": "534af00eea37c937072106dd40dbcac237584e07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,3 +1,24 @@\n+2001-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.brendan/crash56.C: Adjust implicit typename.\n+\t* g++.old-deja/g++.jason/2371.C: Likewise.\n+\t* g++.old-deja/g++.jason/template33.C: Likewise.\n+\t* g++.old-deja/g++.jason/template34.C: Likewise.\n+\t* g++.old-deja/g++.jason/template36.C: Likewise.\n+\t* g++.old-deja/g++.oliva/typename1.C: Likewise.\n+\t* g++.old-deja/g++.oliva/typename2.C: Likewise.\n+\t* g++.old-deja/g++.other/typename1.C: Likewise.\n+\t* g++.old-deja/g++.pt/inherit2.C: Likewise.\n+\t* g++.old-deja/g++.pt/nontype5.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename11.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename14.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename16.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename3.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename4.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename5.C: Likewise.\n+\t* g++.old-deja/g++.pt/typename7.C: Likewise.\n+\t* g++.old-deja/g++.robertl/eb9.C: Likewise.\n+\n 2001-12-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/other/linkage1.C: New test."}, {"sha": "4aeb330274d79d76b5b4dad5ceaa8ffa136bf834", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash56.C", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -140,10 +140,13 @@ public:\n     ListD<T>::length;\n     ListD<T>::empty;\n     ListD<T>::clear;\n-    typedef ListD<T>::Vix Vix;\n+    typedef typename ListD<T>::Vix Vix;\n     ListD<T>::first;\n     ListD<T>::next;\n     ListD<T>::operator();\n+\n+  using ListD<T>::NORMAL;\n+  using ListD<T>::REMOVE_CURRENT;\n };\n extern \"C\" {\n extern void __eprintf (const char *, const char *, unsigned, const char *);\n@@ -255,7 +258,7 @@ template<class T>\n void\n SetLD<T>::add(const ListD<T>& other)\n {\n-    ListD<T>::Vix x;\n+    typename ListD<T>::Vix x;\n     for (first(x); 0 != x; next(x))\n \tadd(other(x));\n }\n@@ -270,7 +273,7 @@ template<class T>\n void\n SetLD<T>::remove(const T& item)\n {\n-    Action a = NORMAL;\n+    typename ListD<T>::Action a = NORMAL;\n     Vix x;\n     for (first(x); 0 != x && REMOVE_CURRENT != a; next(x, a))\n \ta = operator()(x) == item ? REMOVE_CURRENT: NORMAL;// ERROR - .*\n@@ -292,7 +295,7 @@ operator==(const SetLD<T>& a, const SetLD<T>& b)\n {\n     if (a.length() != b.length())\n \treturn FALSE;\n-    SetLD<T>::Vix x;\n+    typename SetLD<T>::Vix x;\n     for (a.first(x); 0 != x; a.next(x)) {\n \tif ( ! b.contains(a(x)) )\n \t    return FALSE;\n@@ -313,7 +316,7 @@ operator<=(const SetLD<T>& a, const SetLD<T>& b)\n {\n     if (a.length() > b.length())\n \treturn FALSE;\n-    SetLD<T>::Vix x;\n+    typename SetLD<T>::Vix x;\n     for (x=a.first(); 0 != x; a.next(x)) {\n \tif ( ! b.contains(a(x)) )\n \t    return FALSE;"}, {"sha": "70ca0548aa43bd9aca605c8120c6c27a8422dfa3", "filename": "gcc/testsuite/g++.old-deja/g++.jason/2371.C", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2F2371.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2F2371.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2F2371.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,4 +1,3 @@\n-# 1 \"SetLS.cc\"\n // GROUPS passed templates nested-classes\n // Special g++ Options: \n //\n@@ -14,7 +13,6 @@\n #include <iostream>\n using namespace std;\n \n-# 1 \"../../templates/SetLS.h\" 1\n // -*- C++ -*-\n \n \n@@ -38,10 +36,8 @@ using namespace std;\n #define XTRUE true\n #define XFALSE false\n \n-# 37 \"../../templates/SetLS.h\"\n \n \n-# 1 \"../../templates/ListS.h\" 1\n // -*- C++ -*-\n \n \n@@ -63,7 +59,6 @@ using namespace std;\n \n \n \n-# 1 \"/projects/gnu-cygnus/gnu-cygnus-14/mips/lib/gcc-lib/decstation/cygnus-reno-1/g++-include/bool.h\" 1 3\n // Defining XTRUE and XFALSE is usually a Bad Idea,\n // because you will probably be inconsistent with anyone\n // else who had the same clever idea.\n@@ -77,9 +72,7 @@ using namespace std;\n \n \n \n-# 23 \"../../templates/ListS.h\" 2\n \n-# 37 \"../../templates/ListS.h\"\n \n \n \n@@ -189,7 +182,6 @@ public:\n \t{ check(x);\n \t  return x.index->item; }\n protected:\n-# 154 \"../../templates/ListS.h\"\n \n \n     unsigned count;\n@@ -320,10 +312,8 @@ ListS<T>::remove_head_filling(T* fill)\n }\n \n \n-# 40 \"../../templates/SetLS.h\" 2\n \n \n-# 62 \"../../templates/SetLS.h\"\n \n template<class T>\n class SetLS {\n@@ -361,11 +351,11 @@ public:\n     private:\n \tfriend class SetLS<T>;\n \n-\tVix(const SetLS<T> *o, const ListS<T>::Vix& x): owner(o), vix(x)\n+\tVix(const SetLS<T> *o, const typename ListS<T>::Vix& x): owner(o), vix(x)\n \t    { }\n \n \tconst SetLS<T> *owner;\n-\tListS<T>::Vix vix;\n+\ttypename ListS<T>::Vix vix;\n     };\n     friend class Vix;\n     \n@@ -422,7 +412,6 @@ SetLS<T>::contains(const T& item) const\n }\n \n \n-# 17 \"SetLS.cc\" 2\n \n \n "}, {"sha": "1ceb56b8c00be57cc4f3d72dd59c014f2b703831", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template33.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate33.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -12,6 +12,6 @@ public:\n };\n \n template <class T>\n-A<T>::muni A<T>::f() { return X; }\n+typename A<T>::muni A<T>::f() { return X; }\n \n template class A<int>;"}, {"sha": "e601b1e7d8ccd8cda6f0ef1542f739f4bbe8cb4c", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate34.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -14,7 +14,7 @@ int gen_cmp(const T& a, const T& b) {\n }\n \n template<class T>\n-Set<T>::Compare Set<T>::cmp1 = &gen_cmp;\n+typename Set<T>::Compare Set<T>::cmp1 = &gen_cmp;\n \n template<class T>\n int (*Set<T>::cmp2)(const T&, const T&) = &gen_cmp;"}, {"sha": "04d31602230768ccea3e1b89454bf6c0b3b2e73d", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template36.C", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate36.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -18,14 +18,15 @@ struct base_trait {\n     typedef base1 base;\n };\n \n+template<>\n struct base_trait<float> {\n     typedef base2 base;\n };\n \n template<class T>\n class weird : public base_trait<T>::base {\n public:\n-    typedef base_trait<T>::base base;\n+    typedef typename base_trait<T>::base base;\n \n     base f ();\n     int base::* g ();\n@@ -35,14 +36,18 @@ public:\n };\n \n template <class T>\n-weird<T>::base weird<T>::f ()\n+typename weird<T>::base weird<T>::f ()\n {\n     return base();\n }\n \n+// The standard does not allow this case; the `typename' keyword may\n+// not appear in a ptr-operator.\n+#if 0\n template <class T>\n-int weird<T>::base::* weird<T>::g ()\n+int typename weird<T>::base::* weird<T>::g ()\n { return 0; }\n+#endif\n \n int main()\n {"}, {"sha": "bd536e357b90f7a7c26969a981045acaa560dc75", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/typename1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftypename1.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -12,6 +12,5 @@ template <class T> struct bar {\n };\n \n template <class T> struct baz {\n-  typedef bar<T>::foo foo; // ERROR - missing typename - XFAIL *-*-*\n-  void m(foo);\n+  typedef bar<T>::foo foo; // ERROR - missing typename\n };"}, {"sha": "271fd57acbc90ebed75c98750e97bec9dcef09f8", "filename": "gcc/testsuite/g++.old-deja/g++.other/typename1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -2,7 +2,7 @@\n // Based on a test case by Louidor Erez <s3824888@techst02.technion.ac.il>\n \n // Build don't link:\n-// Special g++ Options: -pedantic\n+// Special g++ Options: -pedantic -Wno-deprecated\n \n template<class T>\n class Vector {\n@@ -13,5 +13,5 @@ public:\n template<class T>\n void f()\n {\n-  Vector<T>::iterator i = 0; // ERROR - missing typename - XFAIL *-*-*\n+  Vector<T>::iterator i = 0; // WARNING - missing typename\n }"}, {"sha": "30cbebe1a1edf705c64d7fbd18dbf8b565a6812b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/inherit2.C", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finherit2.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,20 +1,67 @@\n-// Test that we warn about unqualified references to implicit typenames.\n-\n-// Special g++ Options:\n // Build don't link:\n \n-template <class T> struct A {\n-  struct AA { };\n-  struct AB { };\n-  struct AC { };\n+// Make sure we make the right unqualified class a friend\n+// See PR c++/4403\n+\n+template <class T> struct A\n+{\n+  struct AA;\n+  struct AC;\n+};\n+\n+template <class T> class B\n+  :public A<T>\n+{\n+  friend struct B::AA;\t\t// OK, this has an implicit typename\n+\t\t\t\t// as if it is 'friend struct typename B::AA'\n+\t\t\t\t// (I think there's a defect report\n+\t\t\t\t// about that)\n+  friend struct AC;\t// this makes ::AC a friend *not* A<T>::AC\n+\n+  private: // only our friends can get out values\n+  static T valueA_AA;\n+  static T valueA_AC;\n+  static T value_AC;\n+};\n+template <typename T> T B<T>::valueA_AA;\n+template <typename T> T B<T>::valueA_AC;// ERROR - private - XFAIL *-*-*\n+template <typename T> T B<T>::value_AC;\t// gets bogus error - XFAIL *-*-*\n+\n+// this one is a friend\n+template <class T> struct A<T>::AA\n+{\n+  int M ()\n+  {\n+    return B<T>::valueA_AA;\n+  }\n+};\n+\n+// this is not a friend\n+template <class T> struct A<T>::AC\n+{\n+  T M ()\n+  {\n+    return B<T>::valueA_AC;\t// ERROR - within this context - XFAIL *-*-*\n+  }\n };\n \n-template <class T> struct B: public A<T> {\n-  friend struct B::AA;\t\t// OK\n-  friend AB;\t\t\t// WARNING - needs class-key\n-  friend struct AC;\t\t// WARNING - refers to ::AC\n+// this is a friend\n+struct AC \n+{\n+  int M ()\n+  {\n+    return B<int>::value_AC;\t// gets bogus error - XFAIL *-*-*\n+  }\n };\n \n B<int> b;\n+A<int>::AA a_aa;\n+A<int>::AC a_ac;\n+AC ac;\n \n-int main () { }\n+int main ()\n+{\n+  a_aa.M ();\n+  a_ac.M ();\n+  ac.M ();\n+}"}, {"sha": "ada6bb1db13e417b45947ce614443c6af37b1f24", "filename": "gcc/testsuite/g++.old-deja/g++.pt/nontype5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnontype5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnontype5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fnontype5.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -11,13 +11,13 @@ struct A {\n typedef int F();\n };\n \n-template<class T, A<T>::F f>\n+template<class T, typename A<T>::F f>\n struct B {\n static int g() { return f(); };\n };\n \n-int f() { return 0; };\n+int f() { return 0; }\n \n int main() {\n return B<int,&f>::g();  // ERROR - could not convert arg\n-};\n+}"}, {"sha": "cfc9f131ee9e2138719a87c7194f346f11e02190", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename11.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename11.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,14 +1,13 @@\n // Build don't link:\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n template <class T, int I>\n struct S {\n   struct X {};\n };\n \n template <class T, class U, int I>\n-S<T,I>::X f(T, U)\n-{\n+S<T,I>::X f(T, U) {   // WARNING - implicit typename\n   S<T, I>::X();\n   return S<T, I>::X();\n }"}, {"sha": "d2783abe1692108f780e9c3d2e38295e55a3c86c", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename14.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n template <class T>\n struct B {\n@@ -10,6 +10,6 @@ template <class T>\n struct S : public B<T>\n {\n   struct I {\n-    void f(X x);\n+    void f(X x);   // WARNING - implicit typename\n   };\n };"}, {"sha": "225cc894a050440952339b5fe02ce31423e75068", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename16.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename16.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,5 +1,5 @@\n // Build don't run:\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n struct B {\n   typedef int I;\n@@ -11,7 +11,7 @@ struct D1 : public B {\n \n template <class T>\n struct D2 : public D1<T> {\n-  I i;\n+  I i;  // WARNING - implicit typename\n };\n \n template <>"}, {"sha": "8aea44639719c8a224781ba8804dbb85758a9aa6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename3.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename3.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n template <class T>\n struct A\n@@ -11,11 +11,10 @@ struct A\n template <class U>\n struct B : public A<U>\n {\n-  A_Type Func();\n+  A_Type Func(); // WARNING - implicit typename\n };\n \n \n template <class U>\n-B<U>::A_Type B<U>::Func()\n-{\n+B<U>::A_Type B<U>::Func() { // WARNING - implicit typename\n }"}, {"sha": "07719e051a241d3c90075e9dc816d2a2321d0a70", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename4.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n template <class T>\n struct A\n@@ -17,11 +17,10 @@ struct B : public A<U>\n template <class U>\n struct C : public B<U>\n {\n-  A_Type Func();\n+  A_Type Func(); // WARNING - implicit typename\n };\n \n \n template <class U>\n-C<U>::A_Type C<U>::Func()\n-{\n+C<U>::A_Type C<U>::Func() { // WARNING - implicit typename\n }"}, {"sha": "bbf4af744d21618261ba1fc720adf4b3e50a81bf", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename5.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// Special g++ Options:\n+// Special g++ Options: -Wno-deprecated\n \n template <class T>\n struct A\n@@ -17,11 +17,10 @@ struct B : public A<U>\n template <class U>\n struct C : public B<U>\n {\n-  void Func(A_Type);\n+  void Func(A_Type);  // WARNING - implicit typename\n };\n \n \n template <class U>\n-void C<U>::Func(A_Type)\n-{\n+void C<U>::Func(A_Type) { // WARNING - implicit typename\n }"}, {"sha": "6b4ef223bd60115cccd06078154922c89cad6ec0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename7.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -15,6 +15,6 @@ template <class T>\n struct D : public A <C <T> > {\n   void f ()\n     {\n-      B* new_entries = (B *) 0;\n+      B* new_entries = (B *) 0;  // WARNING - implicit typename\n     }\n };"}, {"sha": "968c9428efeed0fa651c68915b46fdd94d6410f1", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb9.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1a6d451fc204825c147a83195b545e6ac3f423/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb9.C?ref=ad1a6d451fc204825c147a83195b545e6ac3f423", "patch": "@@ -15,7 +15,8 @@ public:\n \n \n template <class Key>\n-d0om_Hashmap<Key>::value_type* d0om_Hashmap<Key>::iterator::operator-> () const\n+typename d0om_Hashmap<Key>::value_type*\n+d0om_Hashmap<Key>::iterator::operator-> () const\n {\n   return 0;\n }"}]}