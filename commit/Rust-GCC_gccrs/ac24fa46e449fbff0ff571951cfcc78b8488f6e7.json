{"sha": "ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyNGZhNDZlNDQ5ZmJmZjBmZjU3MTk1MWNmY2M3OGI4NDg4ZjZlNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-08T05:03:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-08T11:58:40Z"}, "message": "c++: improve specialization mismatch diagnostic [PR94529]\n\nWe were telling users they needed more template<> to specialize a member\ntemplate in a testcase with no member templates.  Only produce that message\nif we actually see a member template, and also always print the candidates.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94529\n\t* pt.c (determine_specialization): Improve diagnostic.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94529\n\t* g++.dg/template/mem-spec2.C: New test.", "tree": {"sha": "dd9ddd62074c1c4746200d8dd58a3ffe66292122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd9ddd62074c1c4746200d8dd58a3ffe66292122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac24fa46e449fbff0ff571951cfcc78b8488f6e7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd5333d16419f596d07a830bb3f1c40fa8a7b5c"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "46b237f2ec0a2ba8b4d89975853526fc8780bef7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac24fa46e449fbff0ff571951cfcc78b8488f6e7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac24fa46e449fbff0ff571951cfcc78b8488f6e7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "patch": "@@ -2201,6 +2201,7 @@ determine_specialization (tree template_id,\n     ++header_count;\n \n   tree orig_fns = fns;\n+  bool header_mismatch = false;\n \n   if (variable_template_p (fns))\n     {\n@@ -2248,7 +2249,10 @@ determine_specialization (tree template_id,\n \t     specialization but rather a template instantiation, so there\n \t     is no check we can perform here.  */\n \t  if (header_count && header_count != template_count + 1)\n-\t    continue;\n+\t    {\n+\t      header_mismatch = true;\n+\t      continue;\n+\t    }\n \n \t  /* Check that the number of template arguments at the\n \t     innermost level for DECL is the same as for FN.  */\n@@ -2482,13 +2486,12 @@ determine_specialization (tree template_id,\n     {\n       error (\"template-id %qD for %q+D does not match any template \"\n \t     \"declaration\", template_id, decl);\n-      if (header_count && header_count != template_count + 1)\n+      if (header_mismatch)\n \tinform (DECL_SOURCE_LOCATION (decl),\n \t\t\"saw %d %<template<>%>, need %d for \"\n \t\t\"specializing a member function template\",\n \t\theader_count, template_count + 1);\n-      else\n-\tprint_candidates (orig_fns);\n+      print_candidates (orig_fns);\n       return error_mark_node;\n     }\n   else if ((templates && TREE_CHAIN (templates))"}, {"sha": "bc96159522c93e76cdca2584b114082ed063db65", "filename": "gcc/testsuite/g++.dg/template/mem-spec2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac24fa46e449fbff0ff571951cfcc78b8488f6e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem-spec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac24fa46e449fbff0ff571951cfcc78b8488f6e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem-spec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem-spec2.C?ref=ac24fa46e449fbff0ff571951cfcc78b8488f6e7", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/94529\n+\n+template <class T>\n+struct foo {\n+    // the issue is const here\n+    void bar(T& foobar) const { foobar = 0; } // { dg-message \"candidate\" }\n+};\n+\n+template <> void\n+foo<int>::bar(int& foobar) { foobar = 9; } // { dg-error \"does not match\" }\n+// { dg-bogus \"member function template\" \"\" { target *-*-* } .-1 }"}]}