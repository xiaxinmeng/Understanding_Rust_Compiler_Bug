{"sha": "9b10be32fd3295d086c4a4cef68e9139a7a07f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIxMGJlMzJmZDMyOTVkMDg2YzRhNGNlZjY4ZTkxMzlhN2EwN2Y4NQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2012-06-18T12:22:37Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-06-18T12:22:37Z"}, "message": "re PR tree-optimization/53703 (verify_ssa: definition in block 105 does not dominate use in block 103)\n\ngcc:\n\n2012-06-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\tPR tree-optimization/53703\n\t* tree-ssa-phiopt.c (hoist_adjacent_loads): Skip virtual phis;\n\tcorrectly set bb_for_def[12].\n\ngcc/testsuite:\n\n2012-06-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\tPR tree-optimization/53703\n\t* gcc.dg/torture/pr53703.c: New test.\n\nFrom-SVN: r188731", "tree": {"sha": "050a04211fcff225eb26ab491fbd34278b2cb418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050a04211fcff225eb26ab491fbd34278b2cb418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b10be32fd3295d086c4a4cef68e9139a7a07f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b10be32fd3295d086c4a4cef68e9139a7a07f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b10be32fd3295d086c4a4cef68e9139a7a07f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b10be32fd3295d086c4a4cef68e9139a7a07f85/comments", "author": null, "committer": null, "parents": [{"sha": "d421b10cd17c92b2705aeb4f279792dced9f896d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d421b10cd17c92b2705aeb4f279792dced9f896d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d421b10cd17c92b2705aeb4f279792dced9f896d"}], "stats": {"total": 176, "additions": 166, "deletions": 10}, "files": [{"sha": "194601dc714cbc796fa73c1c64522f5a0a5381f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b10be32fd3295d086c4a4cef68e9139a7a07f85", "patch": "@@ -1,3 +1,9 @@\n+2012-06-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR tree-optimization/53703\n+\t* tree-ssa-phiopt.c (hoist_adjacent_loads): Skip virtual phis;\n+\tcorrectly set bb_for_def[12].\n+\n 2012-06-18  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/vax/vax.h (VMS_TARGET): Remove."}, {"sha": "933dca32d824eed26afc6f04a02de5ac98f7236e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b10be32fd3295d086c4a4cef68e9139a7a07f85", "patch": "@@ -1,3 +1,8 @@\n+2012-06-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR tree-optimization/53703\n+\t* gcc.dg/torture/pr53703.c: New test.\n+\n 2012-06-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR middle-end/53698"}, {"sha": "c9e10abf594fccf3338cea58a07823103305e4c4", "filename": "gcc/testsuite/gcc.dg/torture/pr53703.c", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53703.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53703.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53703.c?ref=9b10be32fd3295d086c4a4cef68e9139a7a07f85", "patch": "@@ -0,0 +1,149 @@\n+/* Reduced test case from PR53703.  Used to ICE.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+\n+typedef long unsigned int size_t;\n+typedef unsigned short int sa_family_t;\n+struct sockaddr   {};\n+typedef unsigned char __u8;\n+typedef unsigned short __u16;\n+typedef unsigned int __u32;\n+struct nlmsghdr {\n+  __u32 nlmsg_len;\n+  __u16 nlmsg_type;\n+};\n+struct ifaddrmsg {\n+  __u8 ifa_family;\n+};\n+enum {\n+  IFA_ADDRESS,\n+  IFA_LOCAL,\n+};\n+enum {\n+  RTM_NEWLINK = 16,\n+  RTM_NEWADDR = 20,\n+};\n+struct rtattr {\n+  unsigned short rta_len;\n+  unsigned short rta_type;\n+};\n+struct ifaddrs {\n+  struct ifaddrs *ifa_next;\n+  unsigned short ifa_flags;\n+};\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+struct nlmsg_list {\n+  struct nlmsg_list *nlm_next;\n+  int size;\n+};\n+struct rtmaddr_ifamap {\n+  void *address;\n+  void *local;\n+  int address_len;\n+  int local_len;\n+};\n+int usagi_getifaddrs (struct ifaddrs **ifap)\n+{\n+  struct nlmsg_list *nlmsg_list, *nlmsg_end, *nlm;\n+  size_t dlen, xlen, nlen;\n+  int build;\n+  for (build = 0; build <= 1; build++)\n+    {\n+      struct ifaddrs *ifl = ((void *)0), *ifa = ((void *)0);\n+      struct nlmsghdr *nlh, *nlh0;\n+      uint16_t *ifflist = ((void *)0);\n+      struct rtmaddr_ifamap ifamap;\n+      for (nlm = nlmsg_list; nlm; nlm = nlm->nlm_next)\n+\t{\n+\t  int nlmlen = nlm->size;\n+\t  for (nlh = nlh0;\n+\t       ((nlmlen) >= (int)sizeof(struct nlmsghdr)\n+\t\t&& (nlh)->nlmsg_len >= sizeof(struct nlmsghdr)\n+\t\t&& (nlh)->nlmsg_len <= (nlmlen));\n+\t       nlh = ((nlmlen) -= ( (((nlh)->nlmsg_len)+4U -1) & ~(4U -1) ),\n+\t\t      (struct nlmsghdr*)(((char*)(nlh))\n+\t\t\t\t\t + ( (((nlh)->nlmsg_len)+4U -1)\n+\t\t\t\t\t     & ~(4U -1) ))))\n+\t    {\n+\t      struct ifinfomsg *ifim = ((void *)0);\n+\t      struct ifaddrmsg *ifam = ((void *)0);\n+\t      struct rtattr *rta;\n+\t      sa_family_t nlm_family = 0;\n+\t      uint32_t nlm_scope = 0, nlm_index = 0;\n+\t      memset (&ifamap, 0, sizeof (ifamap));\n+\t      switch (nlh->nlmsg_type)\n+\t\t{\n+\t\tcase RTM_NEWLINK:\n+\t\t  ifim = (struct ifinfomsg *)\n+\t\t    ((void*)(((char*)nlh)\n+\t\t\t     + ((0)+( ((((int)\n+\t\t\t\t\t ( ((sizeof(struct nlmsghdr))+4U -1)\n+\t\t\t\t\t   & ~(4U -1) )))+4U -1)\n+\t\t\t\t      & ~(4U -1) ))));\n+\t\tcase RTM_NEWADDR:\n+\t\t  ifam = (struct ifaddrmsg *)\n+\t\t    ((void*)(((char*)nlh)\n+\t\t\t     + ((0)+( ((((int)\n+\t\t\t\t\t ( ((sizeof(struct nlmsghdr))+4U -1)\n+\t\t\t\t\t   & ~(4U -1) )))+4U -1)\n+\t\t\t\t      & ~(4U -1) ))));\n+\t\t  nlm_family = ifam->ifa_family;\n+\t\t  if (build)\n+\t\t    ifa->ifa_flags = ifflist[nlm_index];\n+\t\t  break;\n+\t\tdefault:\n+\t\t  continue;\n+\t\t}\n+\t      if (!build)\n+\t\t{\n+\t\t  void *rtadata = ((void*)(((char*)(rta))\n+\t\t\t\t\t   + (( ((sizeof(struct rtattr))+4 -1)\n+\t\t\t\t\t\t& ~(4 -1) ) + (0))));\n+\t\t  size_t rtapayload = ((int)((rta)->rta_len)\n+\t\t\t\t       - (( ((sizeof(struct rtattr))+4 -1)\n+\t\t\t\t\t    & ~(4 -1) ) + (0)));\n+\t\t  switch (nlh->nlmsg_type)\n+\t\t    {\n+\t\t    case RTM_NEWLINK:\n+\t\t      break;\n+\t\t    case RTM_NEWADDR:\n+\t\t      if (nlm_family == 17)\n+\t\t\tbreak;\n+\t\t      switch (rta->rta_type)\n+\t\t\t{\n+\t\t\tcase IFA_ADDRESS:\n+\t\t\t  ifamap.address = rtadata;\n+\t\t\t  ifamap.address_len = rtapayload;\n+\t\t\tcase IFA_LOCAL:\n+\t\t\t  ifamap.local = rtadata;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t      if (nlh->nlmsg_type == RTM_NEWADDR && nlm_family != 17)\n+\t\t{\n+\t\t  if (!ifamap.local)\n+\t\t    {\n+\t\t      ifamap.local = ifamap.address;\n+\t\t      ifamap.local_len = ifamap.address_len;\n+\t\t    }\n+\t\t  if (!ifamap.address)\n+\t\t    {\n+\t\t      ifamap.address = ifamap.local;\n+\t\t    }\n+\t\t  if (ifamap.address_len != ifamap.local_len\n+\t\t      || (ifamap.address != ((void *)0)\n+\t\t\t  && memcmp (ifamap.address, ifamap.local,\n+\t\t\t\t     ifamap.address_len)))\n+\t\t    {\n+\t\t      if (!build)\n+\t\t\tdlen += (((ifa_sa_len (nlm_family,\n+\t\t\t\t\t       ifamap.address_len))+4U -1)\n+\t\t\t\t & ~(4U -1) );\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "52be15006d07be986568aba4557f19d4b7dbb53d", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b10be32fd3295d086c4a4cef68e9139a7a07f85/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9b10be32fd3295d086c4a4cef68e9139a7a07f85", "patch": "@@ -1853,7 +1853,9 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n       if (TREE_CODE (arg1) != SSA_NAME\n \t  || TREE_CODE (arg2) != SSA_NAME\n \t  || SSA_NAME_IS_DEFAULT_DEF (arg1)\n-\t  || SSA_NAME_IS_DEFAULT_DEF (arg2))\n+\t  || SSA_NAME_IS_DEFAULT_DEF (arg2)\n+\t  || !is_gimple_reg (arg1)\n+\t  || !is_gimple_reg (arg2))\n \tcontinue;\n \n       def1 = SSA_NAME_DEF_STMT (arg1);\n@@ -1914,17 +1916,11 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n \t  defswap = def1;\n \t  def1 = def2;\n \t  def2 = defswap;\n-\t  /* Don't swap bb1 and bb2 as we may have more than one\n-\t     phi to process successfully.  */\n-\t  bb_for_def1 = bb2;\n-\t  bb_for_def2 = bb1;\n-\t}\n-      else\n-\t{\n-\t  bb_for_def1 = bb1;\n-\t  bb_for_def2 = bb2;\n \t}\n \n+      bb_for_def1 = gimple_bb (def1);\n+      bb_for_def2 = gimple_bb (def2);\n+\n       /* Check for proper alignment of the first field.  */\n       tree_offset1 = bit_position (field1);\n       tree_offset2 = bit_position (field2);"}]}