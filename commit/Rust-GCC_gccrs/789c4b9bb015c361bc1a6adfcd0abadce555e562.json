{"sha": "789c4b9bb015c361bc1a6adfcd0abadce555e562", "node_id": "C_kwDOANBUbNoAKDc4OWM0YjliYjAxNWMzNjFiYzFhNmFkZmNkMGFiYWRjZTU1NWU1NjI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-07-25T15:13:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-07-26T00:06:37Z"}, "message": "c++: aggregate prvalue as for range [PR106230]\n\nSince my PR94041 work on temporary lifetime in aggregate initialization, we\nend up calling build_vec_init to initialize the reference-extended temporary\nfor the artificial __for_range variable.  And build_vec_init uses\nfinish_for_stmt to implement its loop.  That function assumes that if\n__for_range is in current_binding_level, we're finishing a range-for, and we\nshould fix up the variable as it goes out of scope.  But when called from\nbuild_vec_init we aren't finishing a range-for, and do_poplevel doesn't\nremove the variable from scope because stmts_are_full_exprs_p is false.  So\nlet's check that here as well, and leave the DECL_NAME alone.\n\n\tPR c++/106230\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (finish_for_stmt): Check stmts_are_full_exprs_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/range-for38.C: New test.", "tree": {"sha": "bb5dc941642a5255063a67d9c777cb9828ca4e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb5dc941642a5255063a67d9c777cb9828ca4e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/789c4b9bb015c361bc1a6adfcd0abadce555e562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789c4b9bb015c361bc1a6adfcd0abadce555e562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789c4b9bb015c361bc1a6adfcd0abadce555e562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789c4b9bb015c361bc1a6adfcd0abadce555e562/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6efab5fbc468b6f98a7522295b7991d2036588b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6efab5fbc468b6f98a7522295b7991d2036588b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6efab5fbc468b6f98a7522295b7991d2036588b"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "16dea0593b0125c7b4d013b5950638e1f65fe5cc", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789c4b9bb015c361bc1a6adfcd0abadce555e562/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789c4b9bb015c361bc1a6adfcd0abadce555e562/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=789c4b9bb015c361bc1a6adfcd0abadce555e562", "patch": "@@ -1411,6 +1411,11 @@ finish_for_stmt (tree for_stmt)\n \n   add_stmt (do_poplevel (scope));\n \n+  /* If we're being called from build_vec_init, don't mess with the names of\n+     the variables for an enclosing range-for.  */\n+  if (!stmts_are_full_exprs_p ())\n+    return;\n+\n   for (int i = 0; i < 3; i++)\n     if (range_for_decl[i])\n       DECL_NAME (range_for_decl[i])"}, {"sha": "39845b937c13db49a14b548779ceeaeaaccc123b", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for38.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789c4b9bb015c361bc1a6adfcd0abadce555e562/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789c4b9bb015c361bc1a6adfcd0abadce555e562/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for38.C?ref=789c4b9bb015c361bc1a6adfcd0abadce555e562", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/106230\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  A();\n+  operator int();\n+};\n+template <int N> struct array {\n+  A elts[N];\n+  A *begin();\n+  A *end();\n+};\n+void fn() {\n+  for (int i : array<4>{})\n+    ;\n+}"}]}