{"sha": "d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0YWQ3ZDZlOTM5N2JjMTUxNGZlMzllOTg1NWIwYWM2YTU0ODlhMg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2011-05-25T13:35:53Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2011-05-25T13:35:53Z"}, "message": "re PR tree-optimization/46728 (GCC does not generate fmadd for pow (x, 0.75)+y on powerpc)\n\n2011-05-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/46728\n\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): New.\n\t(execute_cse_sincos): Add switch case for BUILT_IN_POW.\n\nFrom-SVN: r174196", "tree": {"sha": "7aef98f176403ef59adcfbd7101af4ca1c6fce14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aef98f176403ef59adcfbd7101af4ca1c6fce14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9f8303fb6886eb46fa66c4a7595dc8219a52160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f8303fb6886eb46fa66c4a7595dc8219a52160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f8303fb6886eb46fa66c4a7595dc8219a52160"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "1fc7adb540fdbe9aaefb244a6a235451b6f43312", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2", "patch": "@@ -1,3 +1,9 @@\n+2011-05-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/46728\n+\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): New.\n+\t(execute_cse_sincos): Add switch case for BUILT_IN_POW.\n+\t\n 2011-05-25  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree.h (struct tree_exp): Inherit from struct tree_typed.\n@@ -150,6 +156,12 @@\n \n 2011-05-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n+\tPR tree-optimization/46728\n+\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): New.\n+\t(execute_cse_sincos): Add switch case for BUILT_IN_POW.\n+\t\n+2011-05-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t\n \tPR tree-optimization/46728\n \t* tree-ssa-math-opts.c (powi_table): New.\n \t(powi_lookup_cost): New."}, {"sha": "cd601e3dd0cb3c050e18478c7960ed6015576819", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=d24ad7d6e9397bc1514fe39e9855b0ac6a5489a2", "patch": "@@ -1,5 +1,5 @@\n /* Global, SSA-based optimizations using mathematical identities.\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1024,6 +1024,39 @@ gimple_expand_builtin_powi (gimple_stmt_iterator *gsi, location_t loc,\n   return NULL_TREE;\n }\n \n+/* ARG0 and ARG1 are the two arguments to a pow builtin call in GSI\n+   with location info LOC.  If possible, create an equivalent and\n+   less expensive sequence of statements prior to GSI, and return an\n+   expession holding the result.  */\n+\n+static tree\n+gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc, \n+\t\t\t   tree arg0, tree arg1)\n+{\n+  REAL_VALUE_TYPE c, cint;\n+  HOST_WIDE_INT n;\n+\n+  /* If the exponent isn't a constant, there's nothing of interest\n+     to be done.  */\n+  if (TREE_CODE (arg1) != REAL_CST)\n+    return NULL_TREE;\n+\n+  /* If the exponent is equivalent to an integer, expand it into\n+     multiplies when profitable.  */\n+  c = TREE_REAL_CST (arg1);\n+  n = real_to_integer (&c);\n+  real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n+\n+  if (real_identical (&c, &cint)\n+      && ((n >= -1 && n <= 2)\n+\t  || (flag_unsafe_math_optimizations\n+\t      && optimize_insn_for_speed_p ()\n+\t      && powi_cost (n) <= POWI_MAX_MULTS)))\n+    return gimple_expand_builtin_powi (gsi, loc, arg0, n);\n+\n+  return NULL_TREE;\n+}\n+\n /* Go through all calls to sin, cos and cexpi and call execute_cse_sincos_1\n    on the SSA_NAME argument of each of them.  Also expand powi(x,n) into\n    an optimal number of multiplies, when n is a constant.  */\n@@ -1065,6 +1098,23 @@ execute_cse_sincos (void)\n \t\t    cfg_changed |= execute_cse_sincos_1 (arg);\n \t\t  break;\n \n+\t\tCASE_FLT_FN (BUILT_IN_POW):\n+\t\t  arg0 = gimple_call_arg (stmt, 0);\n+\t\t  arg1 = gimple_call_arg (stmt, 1);\n+\n+\t\t  loc = gimple_location (stmt);\n+\t\t  result = gimple_expand_builtin_pow (&gsi, loc, arg0, arg1);\n+\n+\t\t  if (result)\n+\t\t    {\n+\t\t      tree lhs = gimple_get_lhs (stmt);\n+\t\t      gimple new_stmt = gimple_build_assign (lhs, result);\n+\t\t      gimple_set_location (new_stmt, loc);\n+\t\t      unlink_stmt_vdef (stmt);\n+\t\t      gsi_replace (&gsi, new_stmt, true);\n+\t\t    }\n+\t\t  break;\n+\n \t\tCASE_FLT_FN (BUILT_IN_POWI):\n \t\t  arg0 = gimple_call_arg (stmt, 0);\n \t\t  arg1 = gimple_call_arg (stmt, 1);"}]}