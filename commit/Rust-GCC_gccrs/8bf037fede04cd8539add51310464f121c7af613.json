{"sha": "8bf037fede04cd8539add51310464f121c7af613", "node_id": "C_kwDOANBUbNoAKDhiZjAzN2ZlZGUwNGNkODUzOWFkZDUxMzEwNDY0ZjEyMWM3YWY2MTM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-05T09:33:31Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T12:20:21Z"}, "message": "privacy: Add base for privacy-related visitors", "tree": {"sha": "35dc7adcb5c4ca758161121b9ffe2ea40d2f20f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35dc7adcb5c4ca758161121b9ffe2ea40d2f20f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf037fede04cd8539add51310464f121c7af613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf037fede04cd8539add51310464f121c7af613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf037fede04cd8539add51310464f121c7af613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf037fede04cd8539add51310464f121c7af613/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "544958743884a85b1dba6d67a92901077767d99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544958743884a85b1dba6d67a92901077767d99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544958743884a85b1dba6d67a92901077767d99b"}], "stats": {"total": 373, "additions": 373, "deletions": 0}, "files": [{"sha": "840a2452f96d3fdc2aa1a4f27aa70a5e950ef25e", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -89,6 +89,9 @@ GRS_OBJS = \\\n     rust/rust-ast-resolve-expr.o \\\n     rust/rust-ast-resolve-type.o \\\n     rust/rust-hir-type-check.o \\\n+    rust/rust-privacy-check.o \\\n+    rust/rust-privacy-ctx.o \\\n+    rust/rust-reachability.o \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\\n@@ -278,6 +281,7 @@ RUST_INCLUDES = -I $(srcdir)/rust \\\n \t-I $(srcdir)/rust/resolve \\\n \t-I $(srcdir)/rust/util \\\n \t-I $(srcdir)/rust/typecheck \\\n+\t-I $(srcdir)/rust/privacy \\\n \t-I $(srcdir)/rust/lint\n \n # add files that require cross-folder includes - currently rust-lang.o, rust-lex.o\n@@ -339,6 +343,11 @@ rust/%.o: rust/typecheck/%.cc\n \t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n \t$(POSTCOMPILE)\n \n+# build rust/privacy files in rust folder\n+rust/%.o: rust/privacy/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n # build rust/lint files in rust folder\n rust/%.o: rust/lint/%.cc\n \t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<"}, {"sha": "cbacb6d90a9541ce12232c4be388bc4b225daa6c", "filename": "gcc/rust/privacy/rust-privacy-check.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-privacy-check.h\"\n+#include \"rust-reachability.h\"\n+\n+extern bool\n+saw_errors (void);\n+\n+namespace Rust {\n+namespace Privacy {\n+void\n+Resolver::resolve (HIR::Crate &crate)\n+{\n+  PrivacyContext ctx;\n+  auto visitor = ReachabilityVisitor (ctx);\n+\n+  const auto &items = crate.items;\n+  for (auto &item : items)\n+    {\n+      if (item->get_hir_kind () == HIR::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (visitor);\n+\t}\n+    }\n+\n+  if (saw_errors ())\n+    return;\n+}\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "e0c4091f3e4287b02990c45c4dc9b5ac709e304b", "filename": "gcc/rust/privacy/rust-privacy-check.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.h?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_PRIVACY_CHECK_H\n+#define RUST_PRIVACY_CHECK_H\n+\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+class Resolver\n+{\n+public:\n+  /**\n+   * Perform the full privacy resolving pass on a crate.\n+   *\n+   * This resolver first computes the reachability of all items in a crate,\n+   * before checking for privacy violations.\n+   */\n+  static void resolve (HIR::Crate &crate);\n+};\n+} // namespace Privacy\n+} // namespace Rust\n+\n+#endif // !RUST_PRIVACY_CHECK_H"}, {"sha": "e876e7855c76bb9934e0ce45054d2f6fa51079a1", "filename": "gcc/rust/privacy/rust-privacy-ctx.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.cc?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-privacy-ctx.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+void\n+PrivacyContext::insert_reachability (const Analysis::NodeMapping &mapping,\n+\t\t\t\t     ReachLevel reach)\n+{}\n+\n+const ReachLevel *\n+PrivacyContext::lookup_reachability (const Analysis::NodeMapping &mapping)\n+{\n+  return nullptr;\n+}\n+\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "2f10fd35cc58e7eb8083c8fa8fe90863d95eef20", "filename": "gcc/rust/privacy/rust-privacy-ctx.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-ctx.h?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-hir-map.h\"\n+#include \"rust-privacy-check.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+/**\n+ * Reachability levels of HIR nodes. These levels are computed through the\n+ * `ReachabilityVisitor` visitor.\n+ */\n+enum ReachLevel\n+{\n+  Private,\n+  Public,\n+};\n+\n+class PrivacyContext\n+{\n+public:\n+  /**\n+   * Insert a new resolved visibility for a given node\n+   *\n+   * @param mappings Mappings of the node to store the reach level for\n+   * @param reach Level of reachability for the given node\n+   */\n+  void insert_reachability (const Analysis::NodeMapping &mapping,\n+\t\t\t    ReachLevel reach);\n+\n+  /**\n+   * Lookup the visibility of an already declared Node\n+   *\n+   * @param mapping Mappings of the node to fetch the reach level of\n+   *\n+   * @return `nullptr` if the reach level for the current node has not been\n+   * added, a valid pointer otherwise\n+   */\n+  const ReachLevel *lookup_reachability (const Analysis::NodeMapping &mapping);\n+\n+private:\n+  std::unordered_map<HirId, ReachLevel> reachability_map;\n+};\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "3d6ae8243540e53d64fd7a03e36828fcbf948553", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-reachability.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+void\n+ReachabilityVisitor::visit (HIR::Module &mod)\n+{\n+  for (auto &item : mod.get_items ())\n+    {\n+      // FIXME: How do we refactor this pattern into something more ergonomic?\n+      // FIXME: Add helper functions\n+      // FIXME: Is that what we want to do? Yes? Only visit the items with\n+      // visibility?\n+      if (item->get_hir_kind () == HIR::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (*this);\n+\t}\n+    }\n+}\n+\n+void\n+ReachabilityVisitor::visit (HIR::ExternCrate &crate)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::UseDeclaration &use_decl)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::Function &func)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::TypeAlias &type_alias)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n+{\n+  auto struct_reach = ReachLevel::Private;\n+  // FIXME: This feels very wrong. Should we check for `has_visibility`\n+  // beforehand? Is it just private otherwise? Should the `HIR::Visibility` also\n+  // keep variants for private items?\n+  if (struct_item.get_visibility ().get_vis_type () == HIR::Visibility::NONE)\n+    struct_reach = ReachLevel::Public;\n+\n+  // FIXME: Here we want to update only if the visibility is higher\n+  ctx.insert_reachability (struct_item.get_mappings (), struct_reach);\n+\n+  for (auto &field : struct_item.get_fields ())\n+    ctx.insert_reachability (field.get_mappings (), struct_reach);\n+\n+  // FIXME: How do we get the constructor from `struct_item`? We need to update\n+  // its visibility as well. Probably by keeping a reference to the TypeCtx?\n+}\n+\n+void\n+ReachabilityVisitor::visit (HIR::TupleStruct &tuple_struct)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::Enum &enum_item)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::Union &union_item)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::ConstantItem &const_item)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::StaticItem &static_item)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::Trait &trait)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::ImplBlock &impl)\n+{}\n+\n+void\n+ReachabilityVisitor::visit (HIR::ExternBlock &block)\n+{}\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "157ef740c73da14fdae6f578c217567e34430c5e", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_REACHABILITY_H\n+#define RUST_REACHABILITY_H\n+\n+#include \"rust-privacy-ctx.h\"\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+// FIXME: The EmbargoVisitor from rustc is a fixed-point visitor which tries\n+// to reach more and more nodes until nothing has changed anymore.\n+// Do we need to reproduce this behavior? How long does it take to do this?\n+\n+class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n+{\n+public:\n+  ReachabilityVisitor (PrivacyContext &ctx)\n+    : current_level (ReachLevel::Private), ctx (ctx)\n+  {}\n+\n+  virtual void visit (HIR::Module &mod);\n+  virtual void visit (HIR::ExternCrate &crate);\n+  virtual void visit (HIR::UseDeclaration &use_decl);\n+  virtual void visit (HIR::Function &func);\n+  virtual void visit (HIR::TypeAlias &type_alias);\n+  virtual void visit (HIR::StructStruct &struct_item);\n+  virtual void visit (HIR::TupleStruct &tuple_struct);\n+  virtual void visit (HIR::Enum &enum_item);\n+  virtual void visit (HIR::Union &union_item);\n+  virtual void visit (HIR::ConstantItem &const_item);\n+  virtual void visit (HIR::StaticItem &static_item);\n+  virtual void visit (HIR::Trait &trait);\n+  virtual void visit (HIR::ImplBlock &impl);\n+  virtual void visit (HIR::ExternBlock &block);\n+\n+private:\n+  ReachLevel current_level;\n+  PrivacyContext &ctx;\n+};\n+} // namespace Privacy\n+} // namespace Rust\n+\n+#endif // !RUST_REACHABILITY_H"}, {"sha": "ec99be7be9000d6205ec21905cd2b3f9eff8e72b", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf037fede04cd8539add51310464f121c7af613/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=8bf037fede04cd8539add51310464f121c7af613", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-ast-resolve.h\"\n #include \"rust-ast-lower.h\"\n #include \"rust-hir-type-check.h\"\n+#include \"rust-privacy-check.h\"\n #include \"rust-tycheck-dump.h\"\n #include \"rust-compile.h\"\n #include \"rust-cfg-parser.h\"\n@@ -609,6 +610,9 @@ Session::parse_file (const char *filename)\n   if (saw_errors ())\n     return;\n \n+  // privacy pass\n+  Privacy::Resolver::resolve (hir);\n+\n   // do compile to gcc generic\n   Compile::Context ctx (backend);\n   Compile::CompileCrate::Compile (hir, &ctx);"}]}