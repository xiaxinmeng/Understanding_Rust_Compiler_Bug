{"sha": "88b504b7a8c5affb0ffa97990d22af2b199e36ed", "node_id": "C_kwDOANBUbNoAKDg4YjUwNGI3YThjNWFmZmIwZmZhOTc5OTBkMjJhZjJiMTk5ZTM2ZWQ", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-10-26T20:34:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-10-26T22:42:16Z"}, "message": "Detect overflow by atomic functions [PR102453].\n\nResolves:\nPR middle-end/102453 - buffer overflow by atomic built-ins not diagnosed\n\ngcc/ChangeLog:\n\n\tPR middle-end/102453\n\t* gimple-ssa-warn-access.cc (pass_waccess::check_atomic_builtin): New.\n\t(pass_waccess::check_atomic_builtin): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/102453\n\t* gcc.dg/Warray-bounds-90.c: New test.\n\t* gcc.dg/Wstringop-overflow-77.c: New test.\n\t* gcc.dg/Wstringop-overflow-78.c: New test.\n\t* gcc.dg/Wstringop-overflow-79.c: New test.\n\t* gcc.dg/Wstringop-overflow-80.c: New test.\n\t* c-c++-common/gomp/atomic-4.c: Avoid an out-of-bounds access.", "tree": {"sha": "1518210385ea1d93a2eb30912565a2391f289dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1518210385ea1d93a2eb30912565a2391f289dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b504b7a8c5affb0ffa97990d22af2b199e36ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b504b7a8c5affb0ffa97990d22af2b199e36ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b504b7a8c5affb0ffa97990d22af2b199e36ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b504b7a8c5affb0ffa97990d22af2b199e36ed/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f711203d6c2c2d1a4f90fc61cc074f87568827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f711203d6c2c2d1a4f90fc61cc074f87568827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f711203d6c2c2d1a4f90fc61cc074f87568827"}], "stats": {"total": 1414, "additions": 1410, "deletions": 4}, "files": [{"sha": "88a2e72645b72f12c203708a1cbf8eb57bed5ac6", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 88, "deletions": 3, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -2109,6 +2109,9 @@ class pass_waccess : public gimple_opt_pass\n   pass_waccess (pass_waccess &) = delete;\n   void operator= (pass_waccess &) = delete;\n \n+  /* Check a call to an atomic built-in function.  */\n+  bool check_atomic_builtin (gcall *);\n+\n   /* Check a call to a built-in function.  */\n   bool check_builtin (gcall *);\n \n@@ -2681,6 +2684,87 @@ pass_waccess::check_memop_access (gimple *stmt, tree dest, tree src, tree size)\n \t\tsrcsize, dstsize, data.mode, &data);\n }\n \n+/* Check a call STMT to an atomic or sync built-in.  */\n+\n+bool\n+pass_waccess::check_atomic_builtin (gcall *stmt)\n+{\n+  tree callee = gimple_call_fndecl (stmt);\n+  if (!callee)\n+    return false;\n+\n+  /* The size in bytes of the access by the function, and the number\n+     of the second argument to check (if any).  */\n+  unsigned bytes = 0, arg2 = UINT_MAX;\n+\n+  switch (DECL_FUNCTION_CODE (callee))\n+    {\n+#define BUILTIN_ACCESS_SIZE_FNSPEC(N)\t\t\t\\\n+      BUILT_IN_ATOMIC_LOAD_ ## N:\t\t\t\\\n+    case BUILT_IN_SYNC_FETCH_AND_ADD_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_FETCH_AND_SUB_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_FETCH_AND_OR_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_FETCH_AND_AND_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_FETCH_AND_XOR_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_FETCH_AND_NAND_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_ADD_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_SUB_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_OR_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_AND_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_XOR_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_NAND_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_LOCK_TEST_AND_SET_ ## N:\t\t\\\n+    case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_ ## N:\t\\\n+    case BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_ ## N:\t\\\n+    case BUILT_IN_SYNC_LOCK_RELEASE_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_EXCHANGE_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_STORE_ ## N:\t\t\t\\\n+    case BUILT_IN_ATOMIC_ADD_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_SUB_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_AND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_NAND_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_XOR_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_OR_FETCH_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_FETCH_ADD_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_FETCH_SUB_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_FETCH_AND_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_FETCH_NAND_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_FETCH_OR_ ## N:\t\t\\\n+    case BUILT_IN_ATOMIC_FETCH_XOR_ ## N:\t\t\\\n+\tbytes = N;\t\t\t\t\t\\\n+\tbreak;\t\t\t\t\t\t\\\n+    case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_ ## N:\t\\\n+\tbytes = N;\t\t\t\t\t\\\n+\targ2 = 1\n+\n+    case BUILTIN_ACCESS_SIZE_FNSPEC (1);\n+      break;\n+    case BUILTIN_ACCESS_SIZE_FNSPEC (2);\n+      break;\n+    case BUILTIN_ACCESS_SIZE_FNSPEC (4);\n+      break;\n+    case BUILTIN_ACCESS_SIZE_FNSPEC (8);\n+      break;\n+    case BUILTIN_ACCESS_SIZE_FNSPEC (16);\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+\n+  tree size = build_int_cstu (sizetype, bytes);\n+  tree dst = gimple_call_arg (stmt, 0);\n+  check_memop_access (stmt, dst, NULL_TREE, size);\n+\n+  if (arg2 != UINT_MAX)\n+    {\n+      tree dst = gimple_call_arg (stmt, arg2);\n+      check_memop_access (stmt, dst, NULL_TREE, size);\n+    }\n+\n+  return true;\n+}\n+\n /* Check call STMT to a built-in function for invalid accesses.  Return\n    true if a call has been handled.  */\n \n@@ -2795,10 +2879,11 @@ pass_waccess::check_builtin (gcall *stmt)\n       }\n \t\n     default:\n-      return false;\n+      if (check_atomic_builtin (stmt))\n+\treturn true;\n+      break;\n     }\n-\n-  return true;\n+  return false;\n }\n \n /* Returns the type of the argument ARGNO to function with type FNTYPE"}, {"sha": "5dd18d1d5fa0b19585cea7000218e981cb6a7ab8", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-4.c?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -8,7 +8,7 @@ int *bar(void);\n void f1(void)\n {\n   #pragma omp atomic\n-    a[4] += 1;\n+    a[3] += 1;\n   #pragma omp atomic\n     *p += 1;\n   #pragma omp atomic"}, {"sha": "2e72a3daa1c61b9fd14e98ec29bb3522ad43c576", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-90.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-90.c?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -0,0 +1,147 @@\n+/* PR middle-end/102453 - buffer overflow by atomic built-ins not diagnosed\n+   Verify that out-of-bounds accesses by atomic functions are diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" }  */\n+\n+#ifndef __cplusplus\n+#  define bool _Bool\n+#endif\n+\n+#define load        __atomic_load\n+#define store       __atomic_store\n+#define add_fetch   __atomic_add_fetch\n+#define sub_fetch   __atomic_sub_fetch\n+#define and_fetch   __atomic_and_fetch\n+#define or_fetch    __atomic_or_fetch\n+#define xor_fetch   __atomic_xor_fetch\n+#define nand_fetch  __atomic_nand_fetch\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*, ...);\n+#define sink(...) sink (0, __VA_ARGS__)\n+\n+extern _Bool eb;\n+extern char ec;\n+extern short int esi;\n+extern int ei;\n+extern long int eli;\n+extern long long int elli;\n+\n+extern const _Bool ecb;\n+extern const char ecc;\n+extern const short int ecsi;\n+extern const int eci;\n+extern const long int ecli;\n+extern const long long int eclli;\n+\n+extern _Atomic _Bool eab;\n+extern _Atomic char eac;\n+extern _Atomic short int easi;\n+extern _Atomic int eai;\n+extern _Atomic long int eali;\n+extern _Atomic long long int ealli;\n+\n+extern _Atomic const _Bool eacb;\n+extern _Atomic const char eacc;\n+extern _Atomic const short int eacsi;\n+extern _Atomic const int eaci;\n+extern _Atomic const long int eacli;\n+extern _Atomic const long long int eaclli;\n+\n+\n+void nowarn_atomic_load (void)\n+{\n+  load (&eacb, &eb, 0);\n+  load (&eacc, &ec, 0);\n+  load (&eacsi, &esi, 0);\n+  load (&eaci, &ei, 0);\n+  load (&eacli, &eli, 0);\n+  load (&eaclli, &elli, 0);\n+}\n+\n+\n+void warn_atomic_load_note (void)\n+{\n+  int i;                            // { dg-message \"'i'\" }\n+\n+  int *pi = (int*)((char*)&i + 1);\n+  load (&eaci, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  sink (&i);\n+\n+  pi = (int*)((char*)&i + 2);\n+  load (&eaci, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  sink (&i);\n+\n+  pi = &i + 1;\n+  load (&eaci, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  sink (&i);\n+}\n+\n+\n+void warn_atomic_load (void)\n+{\n+  bool *pb = &eb + 1;\n+  load (&eacb, pb, 0);              // { dg-warning \"-Warray-bounds\" }\n+\n+  char *pc = &ec + 1;\n+  load (&eacc, pc, 0);              // { dg-warning \"-Warray-bounds\" }\n+\n+  short *psi = (short*)((char*)&esi + 1);\n+  load (&eacsi, psi, 0);            // { dg-warning \"-Warray-bounds\" }\n+  psi = (short*)((char*)&esi + 2);\n+  load (&eacsi, psi, 0);            // { dg-warning \"-Warray-bounds\" }\n+\n+  int *pi = (int*)((char*)&ei + 1);\n+  load (&eaci, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  pi = (int*)((char*)&ei + 2);\n+  load (&eaci, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  pi = (int*)((char*)&ei + sizeof ei);\n+  load (&eaci, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+\n+  long *pli = (long*)((char*)&eli + 1);\n+  load (&eacli, pli, 0);            // { dg-warning \"-Warray-bounds\" }\n+  pli = (long*)((char*)&eli + 1);\n+  load (&eacli, pli, 0);            // { dg-warning \"-Warray-bounds\" }\n+  pli = &eli + 1;\n+  load (&eacli, pli, 0);            // { dg-warning \"-Warray-bounds\" }\n+\n+  long long *plli = (long long*)((char*)&elli + 1);\n+  load (&eaclli, plli, 0);          // { dg-warning \"-Warray-bounds\" }\n+  plli = (long long*)((char*)&elli + 1);\n+  load (&eacli, plli, 0);           // { dg-warning \"-Warray-bounds\" }\n+  plli = &elli + 1;\n+  load (&eaclli, plli, 0);          // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+void warn_atomic_store (void)\n+{\n+  const bool *pb = &eb + 1;\n+  store (&eab, pb, 0);              // { dg-warning \"-Warray-bounds\" }\n+\n+  const char *pc = &ec + 1;\n+  store (&eac, pc, 0);              // { dg-warning \"-Warray-bounds\" }\n+\n+  const short *psi = (const short*)((const char*)&ecsi + 1);\n+  store (&easi, psi, 0);            // { dg-warning \"-Warray-bounds\" }\n+  psi = (const short*)((const char*)&esi + 2);\n+  store (&easi, psi, 0);            // { dg-warning \"-Warray-bounds\" }\n+\n+  const int *pi = (const int*)((const char*)&eci + 1);\n+  store (&eai, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  pi = (const int*)((const char*)&ei + 2);\n+  store (&eai, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+  pi = (const int*)((const char*)&ei + sizeof ei);\n+  store (&eai, pi, 0);              // { dg-warning \"-Warray-bounds\" }\n+\n+  const long *pli = (const long*)((const char*)&eli + 1);\n+  store (&eali, pli, 0);            // { dg-warning \"-Warray-bounds\" }\n+  pli = (const long*)((const char*)&eli + sizeof (eli));\n+  store (&eali, pli, 0);            // { dg-warning \"-Warray-bounds\" }\n+\n+  const long long *plli = (const long long*)((const char*)&elli + 1);\n+  store (&ealli, plli, 0);          // { dg-warning \"-Warray-bounds\" }\n+  plli = (const long long*)((const char*)&elli + sizeof elli);\n+  store (&ealli, plli, 0);          // { dg-warning \"-Warray-bounds\" }\n+}"}, {"sha": "732f56849ae8aa2e7ab6cd6e92ecb9f1a872e80e", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-77.c", "status": "added", "additions": 516, "deletions": 0, "changes": 516, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-77.c?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -0,0 +1,516 @@\n+/* PR middle-end/102453 - buffer overflow by atomic built-ins not diagnosed\n+   Verify that out-of-bounds accesses by atomic functions are diagnosed with\n+   optimization disabled.\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -ftrack-macro-expansion=0\" }  */\n+\n+#ifndef __cplusplus\n+#  define bool _Bool\n+#endif\n+\n+#define add_fetch(p, q)    __atomic_add_fetch (p, q, 0)\n+#define sub_fetch(p, q)    __atomic_sub_fetch (p, q, 0)\n+#define and_fetch(p, q)    __atomic_and_fetch (p, q, 0)\n+#define or_fetch(p, q)     __atomic_or_fetch (p, q, 0)\n+#define xor_fetch(p, q)    __atomic_xor_fetch (p, q, 0)\n+#define nand_fetch(p, q)   __atomic_nand_fetch (p, q, 0)\n+#define exchange(p, q, r)  __atomic_exchange (p, q, r, 0)\n+#define exchange_n(p, n)   __atomic_exchange_n (p, n, 0)\n+#define cmpxchg(p, q, r)   __atomic_compare_exchange (p, q, r, 0, 0, 0)\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*, ...);\n+#define sink(...) sink (0, __VA_ARGS__)\n+\n+extern _Bool eb;\n+extern char ec;\n+extern short int esi;\n+extern int ei;\n+extern long int eli;\n+extern long long int elli;\n+\n+extern const _Bool ecb;\n+extern const char ecc;\n+extern const short int ecsi;\n+extern const int eci;\n+extern const long int ecli;\n+extern const long long int eclli;\n+\n+extern _Atomic _Bool eab;\n+extern _Atomic char eac;\n+extern _Atomic short int easi;\n+extern _Atomic int eai;\n+extern _Atomic long int eali;\n+extern _Atomic long long int ealli;\n+\n+extern _Atomic const _Bool eacb;\n+extern _Atomic const char eacc;\n+extern _Atomic const short int eacsi;\n+extern _Atomic const int eaci;\n+extern _Atomic const long int eacli;\n+extern _Atomic const long long int eaclli;\n+\n+\n+void nowarn_atomic_add_fetch (void)\n+{\n+  add_fetch (&eac, ecc);\n+  add_fetch (&easi, esi);\n+  add_fetch (&eai, ei);\n+  add_fetch (&eali, eli);\n+  add_fetch (&ealli, elli);\n+}\n+\n+\n+void warn_atomic_add_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  add_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  add_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  add_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  add_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  add_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  add_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  add_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  add_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  add_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  add_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  add_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  add_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+void nowarn_atomic_sub_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  sub_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  sub_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  sub_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  sub_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  sub_fetch (plli, elli);\n+}\n+\n+\n+void warn_atomic_sub_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  sub_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  sub_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  sub_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  sub_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  sub_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  sub_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  sub_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  sub_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  sub_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  sub_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  sub_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  sub_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+void nowarn_atomic_and_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  and_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  and_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  and_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  and_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  and_fetch (plli, elli);\n+}\n+\n+\n+void warn_atomic_and_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  and_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  and_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  and_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  and_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  and_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  and_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  and_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  and_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  and_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  and_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  and_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  and_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+void nowarn_atomic_or_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  or_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  or_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  or_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  or_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  or_fetch (plli, elli);\n+}\n+\n+\n+void warn_atomic_or_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  or_fetch (pc, ecc);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  or_fetch (psi, esi);                  // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  or_fetch (psi, esi);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  or_fetch (pi, ei);                    // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  or_fetch (pi, ei);                    // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  or_fetch (pi, ei);                    // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  or_fetch (pli, eli);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  or_fetch (pli, eli);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  or_fetch (pli, eli);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  or_fetch (plli, elli);                // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  or_fetch (plli, eali);                // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  or_fetch (plli, elli);                // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+void nowarn_atomic_xor_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  xor_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  xor_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  xor_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  xor_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  xor_fetch (plli, elli);\n+}\n+\n+\n+void warn_atomic_xor_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  xor_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  xor_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 1);\n+  xor_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  xor_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  xor_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  xor_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  xor_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  xor_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  xor_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  xor_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&eali + 1);\n+  xor_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  xor_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+void nowarn_atomic_nand_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  nand_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  nand_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  nand_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  nand_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  nand_fetch (plli, elli);\n+}\n+\n+\n+void warn_atomic_nand_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  nand_fetch (pc, ecc);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  nand_fetch (psi, esi);                // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 1);\n+  nand_fetch (psi, esi);                // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  nand_fetch (pi, ei);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  nand_fetch (pi, ei);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  nand_fetch (pi, ei);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  nand_fetch (pli, eli);                // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  nand_fetch (pli, eli);                // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  nand_fetch (pli, eli);                // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  nand_fetch (plli, elli);              // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&eai + 1);\n+  nand_fetch (plli, eali);              // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  nand_fetch (plli, elli);              // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+void nowarn_atomic_exchange (void)\n+{\n+  char rc;\n+  _Atomic char *pc = &eac;\n+  exchange (pc, &ecc, &rc);\n+\n+  short rsi;\n+  _Atomic short *psi = &easi;\n+  exchange (psi, &esi, &rsi);\n+\n+  int ri;\n+  _Atomic int *pi = &eai;\n+  exchange (pi, &ei, &ri);\n+\n+  long rli;\n+  _Atomic long *pli = &eali;\n+  exchange (pli, &eli, &rli);\n+\n+  long long rlli;\n+  _Atomic long long *plli = &ealli;\n+  exchange (plli, &elli, &rlli);\n+\n+  sink (&rc, &rsi, &ri, &rli, &rlli);\n+}\n+\n+void warn_atomic_exchange (void)\n+{\n+  char rc;\n+  _Atomic char *pc = &eac + 1;\n+  exchange (pc, &ecc, &rc);             // { dg-warning \"-Wstringop-overflow\" }\n+\n+  short rsi[2];\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  exchange (psi, &ecsi, rsi);           // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  exchange (psi, &ecsi, rsi + 1);       // { dg-warning \"-Wstringop-overflow\" }\n+\n+  int ri[3];\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  exchange (pi, &eci, ri);              // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  exchange (pi, &eci, ri + 1);          // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  exchange (pi, &eci, ri + 2);          // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long rli[3];\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  exchange (pli, &ecli, rli);           // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  exchange (pli, &ecli, rli + 1);       // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  exchange (pli, &ecli, rli + 2);       // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long long rlli[3];\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  exchange (plli, &eclli, rlli);        // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  exchange (plli, &eclli, rlli + 1);    // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  exchange (plli, &eclli, rlli + 2);    // { dg-warning \"-Wstringop-overflow\" }\n+\n+  sink (&rc, rsi, ri, rli, rlli);\n+}\n+\n+\n+void nowarn_atomic_exchange_n (_Atomic unsigned char *pauc,\n+\t\t\t       _Atomic unsigned short *pausi,\n+\t\t\t       _Atomic unsigned int *paui,\n+\t\t\t       _Atomic unsigned long *pauli,\n+\t\t\t       _Atomic unsigned long long *paulli)\n+{\n+  char rc = exchange_n (&eac, ecc);\n+  short rsi = exchange_n (&easi, esi);\n+  int ri = exchange_n (&eai, ei);\n+  long rli = exchange_n (&eali, eli);\n+  long long rlli = exchange_n (&ealli, elli);\n+\n+  sink (rc, rsi, ri, rli, rlli);\n+\n+  char ruc = exchange_n (pauc, ecc);\n+  short rusi = exchange_n (pausi, esi);\n+  int rui = exchange_n (paui, ei);\n+  long ruli = exchange_n (pauli, eli);\n+  long long rulli = exchange_n (paulli, elli);\n+\n+  sink (ruc, rusi, rui, ruli, rulli);\n+}\n+\n+\n+void warn_atomic_exchange_n (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  char rc = exchange_n (pc, ecc);       // { dg-warning \"-Wstringop-overflow\" }\n+\n+  short rsi[2];\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  rsi[0] = exchange_n (psi, ecsi);      // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  rsi[1] = exchange_n (psi, ecsi);      // { dg-warning \"-Wstringop-overflow\" }\n+\n+  int ri[3];\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  ri[0] = exchange_n (pi, eci);         // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  ri[1] = exchange_n (pi, eci);         // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  ri[2] = exchange_n (pi, eci);         // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long rli[3];\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  rli[0] = exchange_n (pli, ecli);      // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  rli[1] = exchange_n (pli, ecli);      // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  rli[2] = exchange_n (pli, ecli);      // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long long rlli[3];\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  rlli[0] = exchange_n (plli, eclli);   // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  rlli[1] = exchange_n (plli, eclli);   // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  rlli[2] = exchange_n (plli, eclli);   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  sink (&rc, rsi, ri, rli, rlli);\n+}\n+\n+\n+void warn_atomic_compare_exchange (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  cmpxchg (pc, &ec, &ecc);              // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  cmpxchg (psi, &esi, &ecsi);           // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  cmpxchg (psi, &esi, &ecsi);           // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  cmpxchg (pi, &ei, &eci);              // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  cmpxchg (pi, &ei, &eci);              // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  cmpxchg (pi, &ei, &eci);              // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  cmpxchg (pli, &eli, &ecli);           // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  cmpxchg (pli, &eli, &ecli);           // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  cmpxchg (pli, &eli, &ecli);           // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  cmpxchg (plli, &elli, &eclli);        // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  cmpxchg (plli, &elli, &eclli);        // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  cmpxchg (plli, &elli, &eclli);        // { dg-warning \"-Wstringop-overflow\" }\n+}"}, {"sha": "a25a418ed76fce52bf1bf97a4e7cd9a36f75d3bc", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-78.c", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-78.c?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -0,0 +1,518 @@\n+/* PR middle-end/102453 - buffer overflow by atomic built-ins not diagnosed\n+   Verify that out-of-bounds accesses by atomic functions are diagnosed with\n+   optimization enabled.\n+   { dg-do compile }\n+   { dg-options \"-O3 -Wall -ftrack-macro-expansion=0\" }  */\n+\n+#ifndef __cplusplus\n+#  define bool _Bool\n+#endif\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+#define add_fetch(p, q)   __atomic_add_fetch (p, q, 0)\n+#define sub_fetch(p, q)   __atomic_sub_fetch (p, q, 0)\n+#define and_fetch(p, q)   __atomic_and_fetch (p, q, 0)\n+#define or_fetch(p, q)    __atomic_or_fetch (p, q, 0)\n+#define xor_fetch(p, q)   __atomic_xor_fetch (p, q, 0)\n+#define nand_fetch(p, q)  __atomic_nand_fetch (p, q, 0)\n+#define exchange(p, q, r) __atomic_exchange (p, q, r, 0)\n+#define exchange_n(p, n)  __atomic_exchange_n (p, n, 0)\n+#define cmpxchg(p, q, r)  __atomic_compare_exchange (p, q, r, __COUNTER__, 0, 0)\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void sink (void*, ...);\n+#define sink(...) sink (0, __VA_ARGS__)\n+\n+extern _Bool eb;\n+extern char ec;\n+extern short int esi;\n+extern int ei;\n+extern long int eli;\n+extern long long int elli;\n+\n+extern const _Bool ecb;\n+extern const char ecc;\n+extern const short int ecsi;\n+extern const int eci;\n+extern const long int ecli;\n+extern const long long int eclli;\n+\n+extern _Atomic _Bool eab;\n+extern _Atomic char eac;\n+extern _Atomic short int easi;\n+extern _Atomic int eai;\n+extern _Atomic long int eali;\n+extern _Atomic long long int ealli;\n+\n+extern _Atomic const _Bool eacb;\n+extern _Atomic const char eacc;\n+extern _Atomic const short int eacsi;\n+extern _Atomic const int eaci;\n+extern _Atomic const long int eacli;\n+extern _Atomic const long long int eaclli;\n+\n+\n+NOIPA void nowarn_atomic_add_fetch (void)\n+{\n+  add_fetch (&eac, ecc);\n+  add_fetch (&easi, esi);\n+  add_fetch (&eai, ei);\n+  add_fetch (&eali, eli);\n+  add_fetch (&ealli, elli);\n+}\n+\n+\n+NOIPA void warn_atomic_add_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  add_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  add_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  add_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  add_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  add_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  add_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  add_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  add_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  add_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  add_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  add_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  add_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void nowarn_atomic_sub_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  sub_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  sub_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  sub_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  sub_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  sub_fetch (plli, elli);\n+}\n+\n+\n+NOIPA void warn_atomic_sub_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  sub_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  sub_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  sub_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  sub_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  sub_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  sub_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  sub_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  sub_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  sub_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  sub_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  sub_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  sub_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void nowarn_atomic_and_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  and_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  and_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  and_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  and_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  and_fetch (plli, elli);\n+}\n+\n+\n+NOIPA void warn_atomic_and_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  and_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  and_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  and_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  and_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  and_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  and_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  and_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  and_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  and_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  and_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  and_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  and_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void nowarn_atomic_or_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  or_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  or_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  or_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  or_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  or_fetch (plli, elli);\n+}\n+\n+\n+NOIPA void warn_atomic_or_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  or_fetch (pc, ecc);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  or_fetch (psi, esi);                  // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  or_fetch (psi, esi);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  or_fetch (pi, ei);                    // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  or_fetch (pi, ei);                    // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  or_fetch (pi, ei);                    // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  or_fetch (pli, eli);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  or_fetch (pli, eli);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  or_fetch (pli, eli);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  or_fetch (plli, elli);                // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  or_fetch (plli, eali);                // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  or_fetch (plli, elli);                // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void nowarn_atomic_xor_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  xor_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  xor_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  xor_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  xor_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  xor_fetch (plli, elli);\n+}\n+\n+\n+NOIPA void warn_atomic_xor_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  xor_fetch (pc, ecc);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  xor_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 1);\n+  xor_fetch (psi, esi);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  xor_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  xor_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  xor_fetch (pi, ei);                   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  xor_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  xor_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  xor_fetch (pli, eli);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  xor_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&eali + 1);\n+  xor_fetch (plli, eali);               // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  xor_fetch (plli, elli);               // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void nowarn_atomic_nand_fetch (void)\n+{\n+  _Atomic char *pc = &eac;\n+  nand_fetch (pc, ecc);\n+\n+  _Atomic short *psi = &easi;\n+  nand_fetch (psi, esi);\n+\n+  _Atomic int *pi = &eai;\n+  nand_fetch (pi, ei);\n+\n+  _Atomic long *pli = &eali;\n+  nand_fetch (pli, eli);\n+\n+  _Atomic long long *plli = &ealli;\n+  nand_fetch (plli, elli);\n+}\n+\n+\n+NOIPA void warn_atomic_nand_fetch (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  nand_fetch (pc, ecc);                 // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  nand_fetch (psi, esi);                // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 1);\n+  nand_fetch (psi, esi);                // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  nand_fetch (pi, ei);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  nand_fetch (pi, ei);                  // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  nand_fetch (pi, ei);                  // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  nand_fetch (pli, eli);                // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  nand_fetch (pli, eli);                // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  nand_fetch (pli, eli);                // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  nand_fetch (plli, elli);              // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&eai + 1);\n+  nand_fetch (plli, eali);              // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  nand_fetch (plli, elli);              // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+NOIPA void nowarn_atomic_exchange (void)\n+{\n+  char rc;\n+  _Atomic char *pc = &eac;\n+  exchange (pc, &ecc, &rc);\n+\n+  short rsi;\n+  _Atomic short *psi = &easi;\n+  exchange (psi, &esi, &rsi);\n+\n+  int ri;\n+  _Atomic int *pi = &eai;\n+  exchange (pi, &ei, &ri);\n+\n+  long rli;\n+  _Atomic long *pli = &eali;\n+  exchange (pli, &eli, &rli);\n+\n+  long long rlli;\n+  _Atomic long long *plli = &ealli;\n+  exchange (plli, &elli, &rlli);\n+\n+  sink (&rc, &rsi, &ri, &rli, &rlli);\n+}\n+\n+NOIPA void warn_atomic_exchange (void)\n+{\n+  char rc;\n+  _Atomic char *pc = &eac + 1;\n+  exchange (pc, &ecc, &rc);             // { dg-warning \"-Wstringop-overflow\" }\n+\n+  short rsi[2];\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  exchange (psi, &ecsi, rsi);           // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  exchange (psi, &ecsi, rsi + 1);       // { dg-warning \"-Wstringop-overflow\" }\n+\n+  int ri[3];\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  exchange (pi, &eci, ri);              // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  exchange (pi, &eci, ri + 1);          // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  exchange (pi, &eci, ri + 2);          // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long rli[3];\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  exchange (pli, &ecli, rli);           // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  exchange (pli, &ecli, rli + 1);       // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  exchange (pli, &ecli, rli + 2);       // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long long rlli[3];\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  exchange (plli, &eclli, rlli);        // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  exchange (plli, &eclli, rlli + 1);    // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  exchange (plli, &eclli, rlli + 2);    // { dg-warning \"-Wstringop-overflow\" }\n+\n+  sink (&rc, rsi, ri, rli, rlli);\n+}\n+\n+\n+NOIPA void nowarn_atomic_exchange_n (_Atomic unsigned char *pauc,\n+\t\t\t       _Atomic unsigned short *pausi,\n+\t\t\t       _Atomic unsigned int *paui,\n+\t\t\t       _Atomic unsigned long *pauli,\n+\t\t\t       _Atomic unsigned long long *paulli)\n+{\n+  char rc = exchange_n (&eac, ecc);\n+  short rsi = exchange_n (&easi, esi);\n+  int ri = exchange_n (&eai, ei);\n+  long rli = exchange_n (&eali, eli);\n+  long long rlli = exchange_n (&ealli, elli);\n+\n+  sink (rc, rsi, ri, rli, rlli);\n+\n+  char ruc = exchange_n (pauc, ecc);\n+  short rusi = exchange_n (pausi, esi);\n+  int rui = exchange_n (paui, ei);\n+  long ruli = exchange_n (pauli, eli);\n+  long long rulli = exchange_n (paulli, elli);\n+\n+  sink (ruc, rusi, rui, ruli, rulli);\n+}\n+\n+\n+NOIPA void warn_atomic_exchange_n (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  char rc = exchange_n (pc, ecc);       // { dg-warning \"-Wstringop-overflow\" }\n+\n+  short rsi[2];\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  rsi[0] = exchange_n (psi, ecsi);      // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  rsi[1] = exchange_n (psi, ecsi);      // { dg-warning \"-Wstringop-overflow\" }\n+\n+  int ri[3];\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  ri[0] = exchange_n (pi, eci);         // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  ri[1] = exchange_n (pi, eci);         // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  ri[2] = exchange_n (pi, eci);         // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long rli[3];\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  rli[0] = exchange_n (pli, ecli);      // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  rli[1] = exchange_n (pli, ecli);      // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  rli[2] = exchange_n (pli, ecli);      // { dg-warning \"-Wstringop-overflow\" }\n+\n+  long long rlli[3];\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  rlli[0] = exchange_n (plli, eclli);   // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  rlli[1] = exchange_n (plli, eclli);   // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  rlli[2] = exchange_n (plli, eclli);   // { dg-warning \"-Wstringop-overflow\" }\n+\n+  sink (&rc, rsi, ri, rli, rlli);\n+}\n+\n+\n+NOIPA void warn_atomic_compare_exchange (void)\n+{\n+  _Atomic char *pc = &eac + 1;\n+  cmpxchg (pc, &ec, &ecc);              // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic short *psi = (_Atomic short*)((char*)&easi + 1);\n+  cmpxchg (psi, &esi, &ecsi);           // { dg-warning \"-Wstringop-overflow\" }\n+  psi = (_Atomic short*)((char*)&easi + 2);\n+  cmpxchg (psi, &esi, &ecsi);           // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic int *pi = (_Atomic int*)((char*)&eai + 1);\n+  cmpxchg (pi, &ei, &eci);              // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + 2);\n+  cmpxchg (pi, &ei, &eci);              // { dg-warning \"-Wstringop-overflow\" }\n+  pi = (_Atomic int*)((char*)&eai + sizeof eai);\n+  cmpxchg (pi, &ei, &eci);              // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long *pli = (_Atomic long*)((char*)&eali + 1);\n+  cmpxchg (pli, &eli, &ecli);           // { dg-warning \"-Wstringop-overflow\" }\n+  pli = (_Atomic long*)((char*)&eali + 1);\n+  cmpxchg (pli, &eli, &ecli);           // { dg-warning \"-Wstringop-overflow\" }\n+  pli = &eali + 1;\n+  cmpxchg (pli, &eli, &ecli);           // { dg-warning \"-Wstringop-overflow\" }\n+\n+  _Atomic long long *plli = (_Atomic long long*)((char*)&ealli + 1);\n+  cmpxchg (plli, &elli, &eclli);        // { dg-warning \"-Wstringop-overflow\" }\n+  plli = (_Atomic long long*)((char*)&ealli + 1);\n+  cmpxchg (plli, &elli, &eclli);        // { dg-warning \"-Wstringop-overflow\" }\n+  plli = &ealli + 1;\n+  cmpxchg (plli, &elli, &eclli);        // { dg-warning \"-Wstringop-overflow\" }\n+}"}, {"sha": "15eb26fbdb73fc8496b38c9bf62788b66b892b47", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-79.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-79.c?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -0,0 +1,70 @@\n+/* Verify that a separate note is issued for each offset into the same\n+   object after a -Wstringop-overflow.  Since all arguments are known\n+   the test doesn't need optimization.  Wstringop-overflow-79.c verifies\n+   they're also issued at -O2.\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wno-array-bounds\" } */\n+\n+extern char a[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'a'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'a'\" \"note 2\" { target *-*-* } .-1 }\n+\n+void test_2_notes (int i)\n+{\n+  char *p = i ? a + 3 : a + 5;\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+extern char b[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'b'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[4, 7] into destination object 'b'\" \"note 2\" { target *-*-* } .-1 }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'b'\" \"note 3\" { target *-*-* } .-2 }\n+\n+void test_3_notes (int i)\n+{\n+  char *p = i < 0 ? b + 3 : 0 < i ? b + 5 : b + 4;\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+extern char c[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'c'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[4, 7] into destination object 'c'\" \"note 2\" { target *-*-* } .-1 }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'c'\" \"note 3\" { target *-*-* } .-2 }\n+                                  // dg-message at offset \\\\\\[6, 8] into destination object 'c'\" \"note 3\" { target *-*-* } .-2 }\n+\n+void test_4_notes (int i)\n+{\n+  char *p;\n+  if (i < -1)\n+    p = c + 3;\n+  else if (i < 0)\n+    p = c + 4;\n+  else if (0 < i)\n+    p = c + 6;\n+  else\n+    p = c + 5;\n+\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+extern char d[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'd'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[4, 7] into destination object 'd'\" \"note 2\" { target *-*-* } .-1 }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'd'\" \"note 3\" { target *-*-* } .-2 }\n+                                  // dg-message at offset \\\\\\[6, 8] into destination object 'd'\" \"note 3\" { target *-*-* } .-3 }\n+                                  // dg-message at offset \\\\\\[7, 8] into destination object 'd'\" \"note 3\" { target *-*-* } .-4 }\n+\n+void test_5_notes (int i)\n+{\n+  char *p;\n+  switch (i)\n+    {\n+    case -9: p = d + 3; break;\n+    case -5: p = d + 4; break;\n+    case  0: p = d + 5; break;\n+    case  3: p = d + 6; break;\n+    case  4: p = d + 7; break;\n+    default: return;\n+    }\n+\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}"}, {"sha": "1628c2f0159c8651814ac3a34626f7518428cc9a", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-80.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b504b7a8c5affb0ffa97990d22af2b199e36ed/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-80.c?ref=88b504b7a8c5affb0ffa97990d22af2b199e36ed", "patch": "@@ -0,0 +1,70 @@\n+/* Verify that a separate note is issued for each offset into the same\n+   object after a -Wstringop-overflow.  Even though the warnings don't\n+   need optimization the test enables it to verify they're still issued\n+   with it.  Wstringop-overflow-78.c verifies they're issued at -O0.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wno-array-bounds\" } */\n+\n+extern char a[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'a'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'a'\" \"note 2\" { target *-*-* } .-1 }\n+\n+void test_2_notes (int i)\n+{\n+  char *p = i ? a + 3 : a + 5;\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+extern char b[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'b'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[4, 7] into destination object 'b'\" \"note 2\" { target *-*-* } .-1 }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'b'\" \"note 3\" { target *-*-* } .-2 }\n+\n+void test_3_notes (int i)\n+{\n+  char *p = i < 0 ? b + 3 : 0 < i ? b + 5 : b + 4;\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+extern char c[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'c'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[4, 7] into destination object 'c'\" \"note 2\" { target *-*-* } .-1 }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'c'\" \"note 3\" { target *-*-* } .-2 }\n+                                  // dg-message at offset \\\\\\[6, 8] into destination object 'c'\" \"note 3\" { target *-*-* } .-2 }\n+\n+void test_4_notes (int i)\n+{\n+  char *p;\n+  if (i < -1)\n+    p = c + 3;\n+  else if (i < 0)\n+    p = c + 4;\n+  else if (0 < i)\n+    p = c + 6;\n+  else\n+    p = c + 5;\n+\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}\n+\n+\n+extern char d[8];                 // dg-message at offset \\\\\\[3, 6] into destination object 'd'\" \"note 1\" }\n+                                  // dg-message at offset \\\\\\[4, 7] into destination object 'd'\" \"note 2\" { target *-*-* } .-1 }\n+                                  // dg-message at offset \\\\\\[5, 8] into destination object 'd'\" \"note 3\" { target *-*-* } .-2 }\n+                                  // dg-message at offset \\\\\\[6, 8] into destination object 'd'\" \"note 3\" { target *-*-* } .-3 }\n+                                  // dg-message at offset \\\\\\[7, 8] into destination object 'd'\" \"note 3\" { target *-*-* } .-4 }\n+\n+void test_5_notes (int i)\n+{\n+  char *p;\n+  switch (i)\n+    {\n+    case -9: p = d + 3; break;\n+    case -5: p = d + 4; break;\n+    case  0: p = d + 5; break;\n+    case  3: p = d + 6; break;\n+    case  4: p = d + 7; break;\n+    default: return;\n+    }\n+\n+  __builtin_memset (p, 0, 7);     // { dg-warning \"-Wstringop-overflow\" }\n+}"}]}