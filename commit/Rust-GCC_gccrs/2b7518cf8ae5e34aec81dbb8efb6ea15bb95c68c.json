{"sha": "2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3NTE4Y2Y4YWU1ZTM0YWVjODFkYmI4ZWZiNmVhMTViYjk1YzY4Yw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-16T16:02:26Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-18T10:01:57Z"}, "message": "Add struct_field_expression support\n\nThis adds in struct field expressions and should be generic enough for\ntuples later on.", "tree": {"sha": "6698017f6a9d29113e9d2087152cda3e57712a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6698017f6a9d29113e9d2087152cda3e57712a5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02132139efa60954c3f9d5aeb4d87210066b1b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02132139efa60954c3f9d5aeb4d87210066b1b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02132139efa60954c3f9d5aeb4d87210066b1b58"}], "stats": {"total": 102, "additions": 100, "deletions": 2}, "files": [{"sha": "98e8ee14f5f4963b9737ecb57b85a268d6aa7795", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -433,6 +433,31 @@ class CompileExpr : public HIRCompileBase\n     translated = CompileExpr::Compile (expr.get_expr_in_parens ().get (), ctx);\n   }\n \n+  void visit (HIR::FieldAccessExpr &expr)\n+  {\n+    // resolve the receiver back to ADT type\n+    TyTy::TyBase *receiver = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (\n+\t  expr.get_receiver_expr ()->get_mappings ().get_hirid (), &receiver))\n+      {\n+\trust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n+\t\t       \"unresolved type for receiver\");\n+\treturn;\n+      }\n+    rust_assert (receiver->get_kind () == TyTy::TypeKind::ADT);\n+\n+    TyTy::ADTType *adt = (TyTy::ADTType *) receiver;\n+    size_t index = 0;\n+    adt->get_field (expr.get_field_name (), &index);\n+\n+    Bexpression *struct_ref\n+      = CompileExpr::Compile (expr.get_receiver_expr ().get (), ctx);\n+\n+    translated\n+      = ctx->get_backend ()->struct_field_expression (struct_ref, index,\n+\t\t\t\t\t\t      expr.get_locus ());\n+  }\n+\n private:\n   CompileExpr (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n "}, {"sha": "29be5cc896de557fbcc73a0045774290aacd73e7", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -544,6 +544,25 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t      std::move (outer_attribs), expr.get_locus ());\n   }\n \n+  void visit (AST::FieldAccessExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> inner_attribs;\n+    std::vector<HIR::Attribute> outer_attribs;\n+\n+    HIR::Expr *receiver\n+      = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+    translated\n+      = new HIR::FieldAccessExpr (mapping,\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (receiver),\n+\t\t\t\t  expr.get_field_name (),\n+\t\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+  }\n+\n private:\n   ASTLoweringExpr ()\n     : translated (nullptr), translated_array_elems (nullptr), terminated (false)"}, {"sha": "cc717a8e46e0e9150e6308193fac65e00cafe963", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -2370,6 +2370,14 @@ class FieldAccessExpr : public ExprWithoutBlock\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_receiver_expr ()\n+  {\n+    rust_assert (receiver != nullptr);\n+    return receiver;\n+  }\n+\n+  Identifier get_field_name () const { return field; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "21b219417fb1af540a978694294672e0a9d05d0a", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -187,6 +187,11 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_expr_in_parens ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::FieldAccessExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_receiver_expr ().get (), expr.get_node_id ());\n+  }\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "a6cf28626776312eddab8bf8d3bdf10a52a78c44", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -440,6 +440,30 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = TypeCheckExpr::Resolve (expr.get_expr_in_parens ().get ());\n   }\n \n+  void visit (HIR::FieldAccessExpr &expr)\n+  {\n+    auto struct_base\n+      = TypeCheckExpr::Resolve (expr.get_receiver_expr ().get ());\n+    if (struct_base->get_kind () != TyTy::TypeKind::ADT)\n+      {\n+\trust_error_at (expr.get_locus (), \"expected ADT Type got: [%s]\",\n+\t\t       struct_base->as_string ().c_str ());\n+\treturn;\n+      }\n+\n+    TyTy::ADTType *adt = (TyTy::ADTType *) struct_base;\n+    auto resolved = adt->get_field (expr.get_field_name ());\n+    if (resolved == nullptr)\n+      {\n+\trust_error_at (expr.get_locus (), \"unknown field [%s] for type [%s]\",\n+\t\t       expr.get_field_name ().c_str (),\n+\t\t       adt->as_string ().c_str ());\n+\treturn;\n+      }\n+\n+    infered = resolved->get_field_type ();\n+  }\n+\n private:\n   TypeCheckExpr (bool is_final_expr)\n     : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr),"}, {"sha": "db34f7e81df1ff5379294007225801a12d80db89", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -194,12 +194,19 @@ class ADTType : public TyBase\n \n   StructFieldType *get_field (size_t index) { return fields.at (index); }\n \n-  StructFieldType *get_field (const std::string &lookup)\n+  StructFieldType *get_field (const std::string &lookup,\n+\t\t\t      size_t *index = nullptr)\n   {\n+    size_t i = 0;\n     for (auto &field : fields)\n       {\n \tif (field->get_name ().compare (lookup) == 0)\n-\t  return field;\n+\t  {\n+\t    if (index != nullptr)\n+\t      *index = i;\n+\t    return field;\n+\t  }\n+\ti++;\n       }\n     return nullptr;\n   }"}, {"sha": "bc12b93181f8681e49438928e0c5678b9c58ff65", "filename": "gcc/testsuite/rust.test/compilable/struct_access1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_access1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_access1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_access1.rs?ref=2b7518cf8ae5e34aec81dbb8efb6ea15bb95c68c", "patch": "@@ -0,0 +1,10 @@\n+struct Foo {\n+    one: i32,\n+    two: i32,\n+}\n+\n+fn main() {\n+    let struct_test = Foo { one: 1, two: 2 };\n+    let a = struct_test.one;\n+    let b = struct_test.two;\n+}"}]}