{"sha": "0025cb638168df0f3d7a845fa9e11a308a719b05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyNWNiNjM4MTY4ZGYwZjNkN2E4NDVmYTllMTFhMzA4YTcxOWIwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-26T20:32:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-26T20:32:17Z"}, "message": "decl.c (gnat_to_gnu_field): Always check components declared as atomic.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Always check components\n\tdeclared as atomic.  Move around conditionally executed code.\n\nFrom-SVN: r180539", "tree": {"sha": "64fc8636996c2d631bd7438c08224c14fa23f469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64fc8636996c2d631bd7438c08224c14fa23f469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0025cb638168df0f3d7a845fa9e11a308a719b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0025cb638168df0f3d7a845fa9e11a308a719b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0025cb638168df0f3d7a845fa9e11a308a719b05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0025cb638168df0f3d7a845fa9e11a308a719b05/comments", "author": null, "committer": null, "parents": [{"sha": "24847495f3558a50ce191cc8c70bc4b24b58ac09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24847495f3558a50ce191cc8c70bc4b24b58ac09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24847495f3558a50ce191cc8c70bc4b24b58ac09"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "3bd55bffb8b1dbe856dc08a3c6771d5bc90c1cea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0025cb638168df0f3d7a845fa9e11a308a719b05", "patch": "@@ -1,3 +1,8 @@\n+2011-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Always check components\n+\tdeclared as atomic.  Move around conditionally executed code.\n+\n 2011-10-24  Robert Dewar  <dewar@adacore.com>\n \n \t* sem.adb (Initialize): Fix bug that blew up if called a second"}, {"sha": "d6bfe9c235878ee6c9422a83b62afb22a1c4b8a4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0025cb638168df0f3d7a845fa9e11a308a719b05", "patch": "@@ -6853,10 +6853,8 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t}\n     }\n \n-  /* If we are packing the record and the field is BLKmode, round the\n-     size up to a byte boundary.  */\n-  if (packed && TYPE_MODE (gnu_field_type) == BLKmode && gnu_size)\n-    gnu_size = round_up (gnu_size, BITS_PER_UNIT);\n+  if (Is_Atomic (gnat_field))\n+    check_ok_for_atomic (gnu_field_type, gnat_field, false);\n \n   if (Present (Component_Clause (gnat_field)))\n     {\n@@ -6946,9 +6944,6 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t      gnu_pos = NULL_TREE;\n \t    }\n \t}\n-\n-      if (Is_Atomic (gnat_field))\n-\tcheck_ok_for_atomic (gnu_field_type, gnat_field, false);\n     }\n \n   /* If the record has rep clauses and this is the tag field, make a rep\n@@ -6961,7 +6956,14 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n     }\n \n   else\n-    gnu_pos = NULL_TREE;\n+    {\n+      gnu_pos = NULL_TREE;\n+\n+      /* If we are packing the record and the field is BLKmode, round the\n+\t size up to a byte boundary.  */\n+      if (packed && TYPE_MODE (gnu_field_type) == BLKmode && gnu_size)\n+\tgnu_size = round_up (gnu_size, BITS_PER_UNIT);\n+    }\n \n   /* We need to make the size the maximum for the type if it is\n      self-referential and an unconstrained type.  In that case, we can't"}, {"sha": "89819e6d91935f7d5435689153056d4e8fe9f796", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0025cb638168df0f3d7a845fa9e11a308a719b05", "patch": "@@ -1,3 +1,7 @@\n+2011-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/atomic1.ads: New test.\n+\n 2011-10-26  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement C++11 user-defined literals."}, {"sha": "500cad787f333a10e4703873dc0dbb7404722ec3", "filename": "gcc/testsuite/gnat.dg/specs/atomic1.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fatomic1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0025cb638168df0f3d7a845fa9e11a308a719b05/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fatomic1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fatomic1.ads?ref=0025cb638168df0f3d7a845fa9e11a308a719b05", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+\n+package Atomic1 is\n+\n+  type Arr is array (Integer range <>) of Boolean;\n+  type UA is access all Arr;\n+\n+  U : UA;\n+  pragma Atomic (U);  -- { dg-error \"atomic access\" }\n+\n+  type R is record\n+    U : UA;\n+    pragma Atomic (U);  -- { dg-error \"atomic access\" }\n+  end record;\n+\n+end Atomic1;"}]}