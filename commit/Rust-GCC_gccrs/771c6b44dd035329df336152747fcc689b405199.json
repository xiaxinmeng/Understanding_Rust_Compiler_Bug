{"sha": "771c6b44dd035329df336152747fcc689b405199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcxYzZiNDRkZDAzNTMyOWRmMzM2MTUyNzQ3ZmNjNjg5YjQwNTE5OQ==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2017-10-20T14:03:07Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2017-10-20T14:03:07Z"}, "message": "Add documentation for fcf-protection option and nocf_check attribute\n\ngcc/doc/\n\t* extend.texi: Add 'nocf_check' documentation.\n\t* gimple.texi: Add second parameter to gimple_build_call_from_tree.\n\t* invoke.texi: Add -fcf-protection documentation.\n\t* rtl.texi: Add REG_CALL_NOTRACK documenation.\n\nFrom-SVN: r253938", "tree": {"sha": "311cc53283a3e5bb735bf534def54979c88b9f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311cc53283a3e5bb735bf534def54979c88b9f7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/771c6b44dd035329df336152747fcc689b405199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771c6b44dd035329df336152747fcc689b405199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771c6b44dd035329df336152747fcc689b405199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771c6b44dd035329df336152747fcc689b405199/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51e28fffbec42be94bd281b0234a38774bdf6c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e28fffbec42be94bd281b0234a38774bdf6c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e28fffbec42be94bd281b0234a38774bdf6c21"}], "stats": {"total": 111, "additions": 106, "deletions": 5}, "files": [{"sha": "42fc979fcf1843e5c928775873d719bd5f00bf50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771c6b44dd035329df336152747fcc689b405199/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771c6b44dd035329df336152747fcc689b405199/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=771c6b44dd035329df336152747fcc689b405199", "patch": "@@ -1,3 +1,11 @@\n+2017-10-20  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\t* extend.texi: Add 'nocf_check' documentation.\n+\t* gimple.texi: Add second parameter to\n+\tgimple_build_call_from_tree.\n+\t* invoke.texi: Add -fcf-protection documentation.\n+\t* rtl.texi: Add REG_CALL_NOTRACK documenation.\n+\n 2017-10-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82473"}, {"sha": "71d638f05c01719364c9c26cc30bf78ef8e1dedf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=771c6b44dd035329df336152747fcc689b405199", "patch": "@@ -5690,6 +5690,58 @@ Specify which floating-point unit to use.  You must specify the\n @code{target(\"fpmath=sse,387\")} option as\n @code{target(\"fpmath=sse+387\")} because the comma would separate\n different options.\n+\n+@item nocf_check\n+@cindex @code{nocf_check} function attribute\n+The @code{nocf_check} attribute on a function is used to inform the\n+compiler that the function's prologue should not be instrumented when\n+compiled with the @option{-fcf-protection=branch} option.  The\n+compiler assumes that the function's address is a valid target for a\n+control-flow transfer.\n+\n+The @code{nocf_check} attribute on a type of pointer to function is\n+used to inform the compiler that a call through the pointer should\n+not be instrumented when compiled with the\n+@option{-fcf-protection=branch} option.  The compiler assumes\n+that the function's address from the pointer is a valid target for\n+a control-flow transfer.  A direct function call through a function\n+name is assumed to be a safe call thus direct calls are not\n+instrumented by the compiler.\n+\n+The @code{nocf_check} attribute is applied to an object's type.\n+In case of assignment of a function address or a function pointer to\n+another pointer, the attribute is not carried over from the right-hand\n+object's type; the type of left-hand object stays unchanged.  The\n+compiler checks for @code{nocf_check} attribute mismatch and reports\n+a warning in case of mismatch.\n+\n+@smallexample\n+@{\n+int foo (void) __attribute__(nocf_check);\n+void (*foo1)(void) __attribute__(nocf_check);\n+void (*foo2)(void);\n+\n+int\n+foo (void) /* The function's address is assumed to be valid.  */\n+\n+  /* This call site is not checked for control-flow validity.  */\n+  (*foo1)();\n+\n+  foo1 = foo2; /* A warning is printed about attribute mismatch.  */\n+  /* This call site is still not checked for control-flow validity.  */\n+  (*foo1)();\n+\n+  /* This call site is checked for control-flow validity.  */\n+  (*foo2)();\n+\n+  foo2 = foo1; /* A warning is printed about attribute mismatch.  */\n+  /* This call site is still checked for control-flow validity.  */\n+  (*foo2)();\n+\n+  return 0;\n+@}\n+@end smallexample\n+\n @end table\n \n On the x86, the inliner does not inline a"}, {"sha": "fa98800a675b91a29cdccbebf7994e4dcbc9435c", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=771c6b44dd035329df336152747fcc689b405199", "patch": "@@ -1310,11 +1310,13 @@ operand is validated with @code{is_gimple_operand}).\n @end deftypefn\n \n \n-@deftypefn {GIMPLE function} gcall *gimple_build_call_from_tree (tree call_expr)\n-Build a @code{GIMPLE_CALL} from a @code{CALL_EXPR} node.  The arguments and the\n-function are taken from the expression directly.  This routine\n-assumes that @code{call_expr} is already in GIMPLE form.  That is, its\n-operands are GIMPLE values and the function call needs no further\n+@deftypefn {GIMPLE function} gcall *gimple_build_call_from_tree (tree call_expr, @\n+tree fnptrtype)\n+Build a @code{GIMPLE_CALL} from a @code{CALL_EXPR} node.  The arguments\n+and the function are taken from the expression directly.  The type of the\n+@code{GIMPLE_CALL} is set from the second parameter passed by a caller.\n+This routine assumes that @code{call_expr} is already in GIMPLE form.\n+That is, its operands are GIMPLE values and the function call needs no further\n simplification.  All the call flags in @code{call_expr} are copied over\n to the new @code{GIMPLE_CALL}.\n @end deftypefn"}, {"sha": "7b1a697d5bbd51fa83c9e1d4e5bb1068652b97e9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=771c6b44dd035329df336152747fcc689b405199", "patch": "@@ -461,6 +461,7 @@ Objective-C and Objective-C++ Dialects}.\n -fchkp-check-read  -fchkp-check-write  -fchkp-store-bounds @gol\n -fchkp-instrument-calls  -fchkp-instrument-marked-only @gol\n -fchkp-use-wrappers  -fchkp-flexible-struct-trailing-arrays@gol\n+-fcf-protection==@r{[}full@r{|}branch@r{|}return@r{|}none@r{]} @gol\n -fstack-protector  -fstack-protector-all  -fstack-protector-strong @gol\n -fstack-protector-explicit  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n@@ -11418,6 +11419,28 @@ is used to link a program, the GCC driver automatically links\n against @file{libmpxwrappers}.  See also @option{-static-libmpxwrappers}.\n Enabled by default.\n \n+@item -fcf-protection==@r{[}full@r{|}branch@r{|}return@r{|}none@r{]}\n+@opindex fcf-protection\n+Enable code instrumentation of control-flow transfers to increase\n+program security by checking that target addresses of control-flow\n+transfer instructions (such as indirect function call, function return,\n+indirect jump) are valid.  This prevents diverting the flow of control\n+to an unexpected target.  This is intended to protect against such\n+threats as Return-oriented Programming (ROP), and similarly\n+call/jmp-oriented programming (COP/JOP).\n+\n+The value @code{branch} tells the compiler to implement checking of\n+validity of control-flow transfer at the point of indirect branch\n+instructions, i.e. call/jmp instructions.  The value @code{return}\n+implements checking of validity at the point of returning from a\n+function.  The value @code{full} is an alias for specifying both\n+@code{branch} and @code{return}. The value @code{none} turns off\n+instrumentation.\n+\n+You can also use the @code{nocf_check} attribute to identify\n+which functions and calls should be skipped from instrumentation\n+(@pxref{Function Attributes}).\n+\n @item -fstack-protector\n @opindex fstack-protector\n Emit extra code to check for buffer overflows, such as stack smashing"}, {"sha": "8b474160030548d5ca0e371b6274278e81c5a02a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/771c6b44dd035329df336152747fcc689b405199/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=771c6b44dd035329df336152747fcc689b405199", "patch": "@@ -4040,6 +4040,22 @@ is used in place of the actual insn pattern.  This is done in cases where\n the pattern is either complex or misleading.\n @end table\n \n+The note @code{REG_CALL_NOCF_CHECK} is used in conjunction with the\n+@option{-fcf-protection=branch} option.  The note is set if a\n+@code{nocf_check} attribute is specified for a function type or a\n+pointer to function type.  The note is stored in the @code{REG_NOTES}\n+field of an insn.\n+\n+@table @code\n+@findex REG_CALL_NOCF_CHECK\n+@item REG_CALL_NOCF_CHECK\n+Users have control through the @code{nocf_check} attribute to identify\n+which calls to a function should be skipped from control-flow instrumentation\n+when the option @option{-fcf-protection=branch} is specified.  The compiler\n+puts a @code{REG_CALL_NOCF_CHECK} note on each @code{CALL_INSN} instruction\n+that has a function type marked with a @code{nocf_check} attribute.\n+@end table\n+\n For convenience, the machine mode in an @code{insn_list} or\n @code{expr_list} is printed using these symbolic codes in debugging dumps.\n "}]}