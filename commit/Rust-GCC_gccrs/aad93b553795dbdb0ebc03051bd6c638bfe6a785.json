{"sha": "aad93b553795dbdb0ebc03051bd6c638bfe6a785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkOTNiNTUzNzk1ZGJkYjBlYmMwMzA1MWJkNmM2MzhiZmU2YTc4NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-04-06T09:21:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:21:37Z"}, "message": "sem_aggr.adb (Resolve_Record_Aggregate): In semantics-only mode treat an association with a box as providing a value...\n\n2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): In semantics-only mode treat\n\tan association with a box as providing a value even though the\n\tinitialization procedure for the type is not available.\n\t(Resolve_Record_Aggregate): Check that a choice of an association with a\n\tbox corresponds to a component of the type.\n\t(Resolve_Record_Aggregate): Split Is_Abstract flag into\n\tIs_Abstract_Subprogram and Is_Abstract_Type.\n\n\t* exp_tss.adb (Base_Init_Proc): Use Is_Type instead of Type_Kind for\n\tassert.\n\n\t* inline.adb (Add_Inlined_Body): Split Is_Abstract flag into\n\tIs_Abstract_Subprogram and Is_Abstract_Type. Make sure these are\n\tcalled only when appropriate.\n\nFrom-SVN: r123569", "tree": {"sha": "fdf888bff81dc3df2c7b5e364e71912e05220bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf888bff81dc3df2c7b5e364e71912e05220bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aad93b553795dbdb0ebc03051bd6c638bfe6a785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad93b553795dbdb0ebc03051bd6c638bfe6a785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad93b553795dbdb0ebc03051bd6c638bfe6a785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad93b553795dbdb0ebc03051bd6c638bfe6a785/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c7f763304968fceca1b40a7ffb9851c0df7f7c"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "65bf431033f1e8d007441fb26387b640062f9d4b", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad93b553795dbdb0ebc03051bd6c638bfe6a785/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad93b553795dbdb0ebc03051bd6c638bfe6a785/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=aad93b553795dbdb0ebc03051bd6c638bfe6a785", "patch": "@@ -44,7 +44,7 @@ package body Exp_Tss is\n       Proc      : Entity_Id;\n \n    begin\n-      pragma Assert (Ekind (Typ) in Type_Kind);\n+      pragma Assert (Is_Type (Typ));\n \n       if Is_Private_Type (Typ) then\n          Full_Type := Underlying_Type (Base_Type (Typ));"}, {"sha": "f39bbbaf34483b0885947c9ff39b64c426bf3fc4", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad93b553795dbdb0ebc03051bd6c638bfe6a785/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad93b553795dbdb0ebc03051bd6c638bfe6a785/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=aad93b553795dbdb0ebc03051bd6c638bfe6a785", "patch": "@@ -308,7 +308,7 @@ package body Inline is\n       --  no enclosing package to retrieve. In this case, it is the body of\n       --  the function that will have to be loaded.\n \n-      if not Is_Abstract (E) and then not Is_Nested (E)\n+      if not Is_Abstract_Subprogram (E) and then not Is_Nested (E)\n         and then Convention (E) /= Convention_Protected\n       then\n          Pack := Scope (E);"}, {"sha": "4ca446cba80ac797bff1c7c6af009007b23d7918", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad93b553795dbdb0ebc03051bd6c638bfe6a785/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad93b553795dbdb0ebc03051bd6c638bfe6a785/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=aad93b553795dbdb0ebc03051bd6c638bfe6a785", "patch": "@@ -2612,7 +2612,7 @@ package body Sem_Aggr is\n \n       --  STEP 1: abstract type and null record verification\n \n-      if Is_Abstract (Typ) then\n+      if Is_Abstract_Type (Typ) then\n          Error_Msg_N (\"type of aggregate cannot be abstract\",  N);\n       end if;\n \n@@ -3000,7 +3000,9 @@ package body Sem_Aggr is\n                --  pass the component to the expander, which will generate\n                --  the call to such IP.\n \n-               if Has_Non_Null_Base_Init_Proc (Ctyp) then\n+               if Has_Non_Null_Base_Init_Proc (Ctyp)\n+                 or else not Expander_Active\n+               then\n                   Add_Association\n                     (Component      => Component,\n                      Expr           => Empty,\n@@ -3075,22 +3077,42 @@ package body Sem_Aggr is\n                end loop;\n \n                --  If no association, this is not a legal component of\n-               --  of the type in question,  except if this is an internal\n-               --  component supplied by a previous expansion.\n+               --  of the type in question, except if its association\n+               --  is provided with a box.\n \n                if No (New_Assoc) then\n                   if Box_Present (Parent (Selectr)) then\n-                     null;\n+\n+                     --  This may still be a bogus component with a box. Scan\n+                     --  list of components to verify that a component with\n+                     --  that name exists.\n+\n+                     declare\n+                        C : Entity_Id;\n+\n+                     begin\n+                        C := First_Component (Typ);\n+                        while Present (C) loop\n+                           if Chars (C) = Chars (Selectr) then\n+                              exit;\n+                           end if;\n+\n+                           Next_Component (C);\n+                        end loop;\n+\n+                        if No (C) then\n+                           Error_Msg_Node_2 := Typ;\n+                           Error_Msg_N (\"& is not a component of}\", Selectr);\n+                        end if;\n+                     end;\n \n                   elsif Chars (Selectr) /= Name_uTag\n                     and then Chars (Selectr) /= Name_uParent\n                     and then Chars (Selectr) /= Name_uController\n                   then\n                      if not Has_Discriminants (Typ) then\n                         Error_Msg_Node_2 := Typ;\n-                        Error_Msg_N\n-                          (\"& is not a component of}\",\n-                            Selectr);\n+                        Error_Msg_N (\"& is not a component of}\", Selectr);\n                      else\n                         Error_Msg_N\n                           (\"& is not a component of the aggregate subtype\","}]}