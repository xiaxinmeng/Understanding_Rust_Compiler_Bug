{"sha": "b6dabe8938fd45e84fe3c82f62fbfc946958302f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkYWJlODkzOGZkNDVlODRmZTNjODJmNjJmYmZjOTQ2OTU4MzAyZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-02T23:36:26Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-02T23:36:26Z"}, "message": "libjava.exp: Correct typo...\n\n\t* testsuite/lib/libjava.exp: Correct typo: 'output from source\n\tcompiled test', not 'execution from source compiled test'.\n\tUse UNTESTED, not XFAIL, for tests which are not run because\n\tthey depend on a previous test which failed.\n\nFrom-SVN: r41026", "tree": {"sha": "1ed717f83ae23b0f3721011d805254f54e8cae69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed717f83ae23b0f3721011d805254f54e8cae69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6dabe8938fd45e84fe3c82f62fbfc946958302f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dabe8938fd45e84fe3c82f62fbfc946958302f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6dabe8938fd45e84fe3c82f62fbfc946958302f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dabe8938fd45e84fe3c82f62fbfc946958302f/comments", "author": null, "committer": null, "parents": [{"sha": "212a2676d3ae43af27cfb87b532a1e3dc21c3a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212a2676d3ae43af27cfb87b532a1e3dc21c3a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212a2676d3ae43af27cfb87b532a1e3dc21c3a84"}], "stats": {"total": 440, "additions": 217, "deletions": 223}, "files": [{"sha": "bd7b9a8ca89e07839743e21ce8af92c48e213918", "filename": "libjava/ChangeLog", "status": "modified", "additions": 205, "deletions": 198, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dabe8938fd45e84fe3c82f62fbfc946958302f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dabe8938fd45e84fe3c82f62fbfc946958302f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b6dabe8938fd45e84fe3c82f62fbfc946958302f", "patch": "@@ -1,3 +1,10 @@\n+2001-04-02 Zack Weinberg <zackw@stanford.edu>\n+\n+\t* testsuite/lib/libjava.exp: Correct typo: 'output from source\n+\tcompiled test', not 'execution from source compiled test'.\n+\tUse UNTESTED, not XFAIL, for tests which are not run because\n+\tthey depend on a previous test which failed.\n+\n 2001-04-02  Richard Henderson  <rth@redhat.com>\n \n \t* configure.in (GCC_UNWIND_INCLUDE): Assume we're built within\n@@ -78,10 +85,10 @@\n \t1.3-Compliant Implementation of java.io.File.\n \t* java/lang/natSystem.cc (init_properties): Get \"file.separator\",\n \t\"path.separator\", and \"java.io.tmpdir\" from the File class, instead\n-\tof setting them explicitly. \n+\tof setting them explicitly.\n \t* java/io/File.java: Do not canonicalize paths for security manager\n-\tchecks. Call init_native() from static initializer. Do not pass path \n-\targument to native methods. New native method declarations. Some \n+\tchecks. Call init_native() from static initializer. Do not pass path\n+\targument to native methods. New native method declarations. Some\n \tsecurity manager checks moved to checkWrite().\n \t(equals): Check file system case sensitivity and act appropriatly.\n \t(hashCode): Likewise.\n@@ -102,24 +109,24 @@\n \t(stat): Handle ISHIDDEN query.\n \t(isAbsolute): Remove WIN32 cruft.\n \t(performList): New arguments. Handle returning either File[] or String[]\n-\tarrays. Check with FileFilter or FilenameFilter arguments as \n+\tarrays. Check with FileFilter or FilenameFilter arguments as\n \tappropriate. Use an ArrayList, not a Vector, for the temporary list.\n \t(performSetReadOnly): New method implemented.\n \t(performListRoots): Likewise.\n \t(performSetLastModified): Likewise.\n \t(performCreate): Likewise.\n \t(init_native): New initialization function.\n-\t* java/io/natFileWin32.cc: Various functions no longer take canonical \n+\t* java/io/natFileWin32.cc: Various functions no longer take canonical\n \tpath argument.\n \t(stat): Add FIXME about ISHIDDEN query.\n \t(performList): New arguments. Handle returning either File[] or String[]\n-\tarrays. Check with FileFilter or FilenameFilter arguments as \n+\tarrays. Check with FileFilter or FilenameFilter arguments as\n \tappropriate. Use an ArrayList, not a Vector, for the temporary list.\n \t(performSetReadOnly): New. Stubbed.\n \t(performListRoots): Likewise.\n \t(performSetLastModified): Likewise.\n \t(performCreate): Likewise.\n-\t(init_native) New initialization function.\t\n+\t(init_native) New initialization function.\n \t* configure.in: Check for utime() and chmod().\n \t* configure: Rebuilt.\n \t* include/config.h.in: Rebuilt.\n@@ -159,7 +166,7 @@\n \t(addToEnvironment): Remove unnecessary semicolon.\n \t(addToEnvironment): Use put() instead of add().\n \n-\t* javax/naming/InitialContext.java (InitialContext): \n+\t* javax/naming/InitialContext.java (InitialContext):\n \tMake public.\n \t(destroySubcontext): Method doesn't return a result.\n \t* javax/naming/Context.java: Import java.util.Hashtable.\n@@ -185,11 +192,11 @@\n \tprims.cc, resolve.cc, gnu/gcj/runtime/natFirstThread.cc,\n \tgnu/gcj/xlib/natDrawable.cc, gnu/gcj/xlib/natFont.cc,\n \tgnu/gcj/xlib/natWMSizeHints.cc, gnu/gcj/xlib/natWindowAttributes.cc,\n-\tgnu/gcj/xlib/natXImage.cc, java/io/natFile.cc, \n+\tgnu/gcj/xlib/natXImage.cc, java/io/natFile.cc,\n \tjava/io/natFileDescriptorEcos.cc, java/io/natFileDescriptorPosix.cc,\n \tjava/io/natFileDescriptorWin32.cc, java/io/natFileWin32.cc,\n \tjava/lang/natClass.cc, java/lang/natClassLoader.cc,\n-\tjava/lang/natDouble.cc, java/lang/natObject.cc, \n+\tjava/lang/natDouble.cc, java/lang/natObject.cc,\n \tjava/lang/natPosixProcess.cc, java/lang/natRuntime.cc,\n \tjava/lang/natString.cc, java/lang/natSystem.cc,\n \tjava/lang/natThread.cc, java/lang/reflect/natArray.cc,\n@@ -200,7 +207,7 @@\n \n 2001-03-24  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/util/HashMap.java (HashMap): If 0 is given for initialCapacity \n+\t* java/util/HashMap.java (HashMap): If 0 is given for initialCapacity\n \tparamater, bump it to 1.\n \t* java/util/Hashtable.java (Hashtable): Likewise.\n \n@@ -236,7 +243,7 @@\n \tFix for PR libgcj/1736. Thanks to Robert Boehne and Alexandre Oliva\n \tfor libtool hacking.\n \t* Makefile.am (libgcj.la): New explicit rule. Echo the list of objects\n-\tto a temporary file, then invoke libtool with the -objectlist \n+\tto a temporary file, then invoke libtool with the -objectlist\n \tparamater.\n \t(libgcjx.la): Likewise.\n \t* Makefile.in: Rebuilt.\n@@ -254,7 +261,7 @@\n \t* java/lang/reflect/Method.java (getExceptionTypes): Call getType() to\n \tinitialize if exception_types is null.\n \t* java/lang/reflect/Constructor.java: Likewise.\n-\t* java/lang/reflect/natConstructor.cc (getType): Initialize \n+\t* java/lang/reflect/natConstructor.cc (getType): Initialize\n \texception_types to an empty Object array.\n \n 2001-03-21  Tom Tromey  <tromey@redhat.com>\n@@ -304,7 +311,7 @@\n \t(UNMASK_PTR): New macro.\n \t(intern): Unmask pointer before returning it.  Register finalizer\n \tfor the string.\n-\t(unintern): Handle case where \n+\t(unintern): Handle case where\n \t(MASK_PTR): New macro.\n \t(PTR_MAKSED): Likewise.\n \t(_Jv_NewStringUtf8Const): Use UNMASK_PTR.\n@@ -313,7 +320,7 @@\n \n \t* java/lang/natThrowable.cc (printRawStackTrace): Copy the\n \tstackTrace buffer to a correctly aligned pointer array.\n- \n+\n 2001-03-12  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/Runtime.java (_exit): Declare new package-private native.\n@@ -323,7 +330,7 @@\n \t* prims.cc (JvRunMain): Call Runtime._exit to shutdown the runtime\n \t\"naturally\".\n \t* java/lang/System.java (setSecurityManager): If a security manager\n-\tis already in place, call checkPermission. \n+\tis already in place, call checkPermission.\n \t* java/lang/ThreadGroup.java (uncaughtException): If printStackTrace()\n \tthrows an exception, try to deal with it gracefully.\n \t* java/lang/ExceptionInInitializerError.java (printStackTrace):\n@@ -344,10 +351,10 @@\n 2001-03-05  Jochen Hoenicke  <jochen@gnu.org>\n \n \t* java/util/TreeMap.java (writeObject): Use defaultWriteObject()\n-\tinstead of the new JDK1.2 API.  This is simpler and makes \n+\tinstead of the new JDK1.2 API.  This is simpler and makes\n \tback-porting the classes to JDK1.1 trivial.\n \t(readObject): likewise.\n-\t\n+\n 2001-03-01  Per Bothner  <per@bothner.com>\n \n \tChanges merged from Kawa's gnu.math.\n@@ -385,14 +392,14 @@\n 2001-02-22  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tFix for PR java/2040:\n-\t* java/util/HashMap.java (HashMap): Don't throw exception for \n+\t* java/util/HashMap.java (HashMap): Don't throw exception for\n \tloadFactor > 1. Add exception messages.\n \t* java/util/Hashtable.java (Hashtable): Likewise.\n \n 2001-02-21  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tDisable libgcjx by default.\n-\t* configure.in: Add support for --enable-java-awt configure option. \n+\t* configure.in: Add support for --enable-java-awt configure option.\n \tUse --enable-java-awt=xlib to build the xlib peers (libgcjx).\n \t* Makefile.am: Make libgcjx conditional on XLIB_AWT, instead of NO_X.\n \t* Makefile.in: Rebuilt.\n@@ -428,7 +435,7 @@\n \tproperty is not set. Don't call decode with null argument.\n \t* java/lang/Long.java (getLong): Likewise.\n \n-\t* java/io/CharArrayReader.java (CharArrayReader): Throw \n+\t* java/io/CharArrayReader.java (CharArrayReader): Throw\n \tIllegalArgumentException if constructor arguments are illegal.\n \t(ready): Return false if no more characters can be read.\n \t* java/io/ByteArrayInputStream.java (ByteArrayInputStream): Likewise.\n@@ -476,14 +483,14 @@\n \n 2001-02-16  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/util/TreeSet.java (clone): Made subclass safe, use \n+\t* java/util/TreeSet.java (clone): Made subclass safe, use\n \tsuper.clone(), not new.\n \t* java/util/TreeMap.java (clone): Likewise.\n-\t\n+\n \t* java/util/TreeMap.java (nil): Made non-final.\n \t(clone): Create new nil node for copy.\n-\t\n-\t* java/util/HashSet.java (clone): Made subclass safe, use \n+\n+\t* java/util/HashSet.java (clone): Made subclass safe, use\n \tsuper.clone(), not new.\n \n 2001-02-14  Andrew Haley  <aph@redhat.com>\n@@ -501,17 +508,17 @@\n \n 2001-02-15  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/util/TreeSet.java (clone): Call TreeMap.clone(), not \n+\t* java/util/TreeSet.java (clone): Call TreeMap.clone(), not\n \tObject.clone().\n \t* java/util/Collections.java (ReverseComparator): New static class.\n \t(reverseOrder): Return static instance of ReverseComparator.\n-\t\n+\n \t* gnu/awt/j2d/DirectRasterGraphics.java (clone): Hoist to public.\n-\t* gnu/awt/j2d/IntegerGraphicsState.java (setClip): Call \n+\t* gnu/awt/j2d/IntegerGraphicsState.java (setClip): Call\n \tRectangle.clone(), not Object.clone().\n \n \t* java/util/HashSet.java (clone): Remove try/catch.\n-\t\n+\n \t* java/util/AbstractSequentialList.java: Synchronize with Classpath.\n \t* java/util/Collection.java: Likewise.\n \t* java/util/Comparator.java: Likewise.\n@@ -532,12 +539,12 @@\n \t* java/util/SortedSet.java: Sync with classpath.\n \t* java/util/HashMap.java (hash): Use if statement instead of ternary,\n \tfor clarity.\n-\t\n-\t* java/lang/natClass.cc (getSignature): Don't try to dereference \n+\n+\t* java/lang/natClass.cc (getSignature): Don't try to dereference\n \tparam_types if it is null. Instead, take this to mean \"no parameters\".\n-\t* java/lang/TreeMap.java (TreeIterator.next): Throw \n+\t* java/lang/TreeMap.java (TreeIterator.next): Throw\n \tNoSuchElementException in preference to ConcurrentModificationException.\n-\t(TreeIterator.remove): Throw IllegalStateException in preference to \n+\t(TreeIterator.remove): Throw IllegalStateException in preference to\n \tConcurrentModificationException.\n \t(SubMap.firstKey): Do a better check for empty SubMap, and if it is,\n \tthrow a NoSuchElementException.\n@@ -568,13 +575,13 @@\n 2001-02-13  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/io/BlockDataException.java: Removed.\n-\t* java/io/ObjectInputStream.java (readObject): Throw \n+\t* java/io/ObjectInputStream.java (readObject): Throw\n \tStreamCorruptedException, not BlockDataException.\n \t* Makefile.am: Remove BlockDataException.\n \t* Makefile.in: Rebuild.\n \n 2001-02-12  Jeff Sturm  <jeff.sturm@commerceone.com>\n-            Tom Tromey  <tromey@redhat.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n \n \t* interpret.cc (continue1): [insn_invokevirtual] Do an explicit\n \tnull pointer check.\n@@ -608,7 +615,7 @@\n \t* java/lang/Float.java: As above.\n \t(floatToRawIntBits): New method.\n \n-\t* java/io/OutputStreamWriter.java: (flush, writeChars): Throw \n+\t* java/io/OutputStreamWriter.java: (flush, writeChars): Throw\n \tIOException if stream closed.\n \n 2001-02-08  Tom Tromey  <tromey@redhat.com>\n@@ -665,7 +672,7 @@\n 2001-01-26  Andrew Haley  <aph@redhat.com>\n \n \t(INIT_FPE): Use a direct system call to set the handler.\n-\t\n+\n 2001-01-27  Richard Henderson  <rth@redhat.com>\n \n \t* configure.host (alpha*-*) [libgcj_flags]: Add -mieee.\n@@ -679,10 +686,10 @@\n \n \t* java/io/ObjectInputStream.java (read): AND byte with 0xff to make\n \tresult unsigned.\n-\t(read (byte[], int, int)): Only call readNextBlock() if the block \n+\t(read (byte[], int, int)): Only call readNextBlock() if the block\n \tbuffer would actually be overrun. Increment blockDataPosition.\n \t(callReadMethod): Propagate exceptions from invocation target.\n-\t* java/io/ObjectOutputStream.java (callWriteMethod): Propagate \n+\t* java/io/ObjectOutputStream.java (callWriteMethod): Propagate\n \texceptions from invocation target.\n \n 2001-01-26  Tom Tromey  <tromey@redhat.com>\n@@ -719,7 +726,7 @@\n \n 2001-01-17  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/lang/Class.h (isInterface): Move implementation from \n+\t* java/lang/Class.h (isInterface): Move implementation from\n \tnatClass.cc. Declare inline.\n \t(Class): Add default constructor.\n \t* java/lang/Object.h: Update comments.\n@@ -828,13 +835,13 @@\n \t(_Jv_GetArrayClass): New inline function.\n \t(arrayclass): New field.\n \t* prims.cc (_Jv_NewObjectArray): Use _Jv_GetArrayClass. Don't use\n-\t_Jv_GetArrayElementFromElementType. \n+\t_Jv_GetArrayElementFromElementType.\n \t(_Jv_NewPrimArray): Ditto.\n \t(_Jv_PrimClass constructor): Initialize \"depth\", \"ancestors\", and\n \t\"idt\" for completeness. Initialze \"arrayclass\" using _Jv_NewArrayClass.\n \tSet Modifier::ABSTRACT.\n \t* java/lang/natClassLoader.cc (_Jv_NewClass): Initialize \"arrayclass\".\n-\t(_Jv_NewArrayClass): Renamed from _Jv_FindArrayClass. Now void. \n+\t(_Jv_NewArrayClass): Renamed from _Jv_FindArrayClass. Now void.\n \tNow synchronized. Array classes are now referenced from\n \telementClass->arrayclass. Don't use _Jv_FindClassInCache.\n \tSet array classes' accessibility flags correctly. Optimize so that\n@@ -881,7 +888,7 @@\n \t* java/lang/Object.h (struct _JvObjectPrefix): New virtuals\n \tnacd_1 and nacd_2 (for compatibility with the new C++ ABI.)\n \t(class java::lang::Object): `finalize' moved up front.\n-\t* java/lang/natClass.cc \n+\t* java/lang/natClass.cc\n \t(isAssignableFrom): Turned outline.\n \t(isInstance): Likewise.\n \t(isInterface): Likewise, fixed indentation.\n@@ -934,7 +941,7 @@\n \n \t* java/io/PipedInputStream: Rewrote to be simpler and more correct.\n \t* java/io/PipedOutputStream: Updated to match new PipedInputStream.\n-\t* java/io/PipedReader: New implementation based on new \n+\t* java/io/PipedReader: New implementation based on new\n \tPipedInputStream.\n \t* java/io/PipedWriter: Updated to match new PipedReader.\n \n@@ -986,15 +993,15 @@\n \t* include/win32-threads.h: Ditto.\n \t* include/no-threads.h: Ditto.\n \t* posix-threads.cc (_Jv_ThreadInitData): Implement new prototype.\n-\t(_Jv_ThreadDestroyData): New function. Free native thread \"data\" and \n+\t(_Jv_ThreadDestroyData): New function. Free native thread \"data\" and\n \tmove mutex and condition variable destroy code from:\n \t(really_start): ...here.\n \t(_Jv_ThreadStart): Set PTHREAD_CREATE_DETACHED.\n \t* win32-threads.cc (_Jv_ThreadInitData): Implement new prototype.\n \t(_Jv_ThreadDestroyData): Implemented.\n \t* nogc.cc (_Jv_AllocObject): Use \"void *\" not \"ptr_t\".\n-\t(_Jv_AllocArray): Ditto.\t\n-\t\n+\t(_Jv_AllocArray): Ditto.\n+\n 2000-12-27  Jeff Sturm  <jeff.sturm@commerceone.com>\n \n \t* java/sql/DriverManager.java (getConnection): Don't set user/password\n@@ -1023,8 +1030,8 @@\n \tFix for PR libgcj/1516:\n \t* java/lang/reflect/natMethod.cc (primitives): Remove void entry.\n \tAdd boolean entry.\n-\t(can_widen): Declared inline. Remove redundant checks for void \n-\targuments and char->short conversion. Add special case for boolean \n+\t(can_widen): Declared inline. Remove redundant checks for void\n+\targuments and char->short conversion. Add special case for boolean\n \tconversions.\n \t(ffi_type): Declared inline.\n \t(_Jv_CallAnyMethodA): Move unwrapping logic inside isPrimitive() block.\n@@ -1138,7 +1145,7 @@\n \n 2000-12-18  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/awt/Window.java (addNotify): Remove peer casting hack now that \n+\t* java/awt/Window.java (addNotify): Remove peer casting hack now that\n \tgcj/312 is fixed.\n \t* java/awt/Button.java (addNotify): Likewise.\n \t* java/awt/Label.java (addNotify): Likewise.\n@@ -1155,7 +1162,7 @@\n \n 2000-12-18  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/util/zip/natInflater.cc (inflate): Treat Z_BUF_ERROR as \n+\t* java/util/zip/natInflater.cc (inflate): Treat Z_BUF_ERROR as\n \tend-of-stream if avail_in is 0.\n \n 2000-12-17  Bryce McKinlay  <bryce@albatross.co.nz>\n@@ -1220,11 +1227,11 @@\n \n \t* configure.in: Remove check for -fuse-divide-subroutine.\n \t* configure: Rebuilt.\n-\t\n+\n \t* java/util/Hashtable.java (Enumerator.nextElement): Initialize `e'.\n \n \t* gcj/javaprims.h: Rebuilt CNI namespace declarations.\n-\t\n+\n 2000-12-11  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* Makefile.am: Add HashSet.java and java/lang/ref classes.\n@@ -1238,14 +1245,14 @@\n \t* java/util/BasicMapEntry.java: Deleted.\n \t* java/util/Collections.java (search): Use a for-loop, not iterator\n \thasNext().\n-\t(copy): Use a for-loop. Throw an IndexOutOfBoundsException if run out \n+\t(copy): Use a for-loop. Throw an IndexOutOfBoundsException if run out\n \tof elements in source.\n \t(max): Use a for-loop.\n \t(min): Ditto.\n-\t(reverse): Keep track of positions instead of using Iterator's \n+\t(reverse): Keep track of positions instead of using Iterator's\n \tnextIndex() and previousIndex().\n-\t(shuffle(List)): Initialize defaultRandom if required using \n-\tdouble-check thread safety idiom. Call two-argument shuffle method \n+\t(shuffle(List)): Initialize defaultRandom if required using\n+\tdouble-check thread safety idiom. Call two-argument shuffle method\n \tusing defaultRandom.\n \t(defaultRandom): New field.\n \t(shuffle(List, Random)): Use a for-loop. Keep track of pos instead of\n@@ -1260,7 +1267,7 @@\n \t* java/lang/ref/ReferenceQueue.java: Ditto.\n \n 2000-12-10  Richard Henderson <rth@redhat.com>\n-\t\n+\n \t* configure.host: Recognize alpha*-*, not alphaev6-*.\n \n 2000-12-09  Anthony Green  <green@redhat.com>\n@@ -1285,10 +1292,10 @@\n \tjava/lang/String.h:, java/lang/reflect/Constructor.h:,\n \tjava/lang/reflect/Field.h:, java/lang/reflect/Method.h:,\n \tgnu/gcj/runtime/VMClassLoader.h:,\n-\tjava/io/ObjectInputStream$$GetField.h:, \n+\tjava/io/ObjectInputStream$$GetField.h:,\n \tjava/io/ObjectOutputStream$$PutField.h:, header-check:): Likewise.\n \t(Makefile.in): Rebuilt.\n-\t\n+\n 2000-12-08  Tom Tromey  <tromey@redhat.com>\n \n \tFrom Phil Edwards:\n@@ -1340,7 +1347,7 @@\n \n 2000-12-04  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/lang/natDouble.cc: Include fdlibm.h, not mprec.h. From \n+\t* java/lang/natDouble.cc: Include fdlibm.h, not mprec.h. From\n \tEdgar Villanueva <edgarvil@home.com>.\n \n 2000-12-03  Tom Tromey  <tromey@redhat.com>\n@@ -1391,7 +1398,7 @@\n \t* java/lang/dtoa.c: Include string.h.\n \t* java/lang/natString.cc (toLowerCase): Initialize `ch' to prevent\n \tcompiler warning.\n-\t\n+\n \tFrom Adam Welc <welc@cs.purdue.edu>:\n \t* java/util/LinkedList.java (removeFirst): Update `first' field.\n \tHandle the last == first case.\n@@ -1438,7 +1445,7 @@\n \t* configure.in: Check for setlocale.\n \t* configure: Rebuilt.\n \t* include/config.h.in: Rebuilt.\n-\t\n+\n \t* java/util/zip/InflaterInputStream (read): Don't return -1 unless\n \tthe infate() call didn't deliver any output. Throw a ZipException if\n \tthe needsDictionary() call returns true.\n@@ -1456,11 +1463,11 @@\n 2000-11-28  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/io/DataInputStream.java: Merge classpath docs. Call in.read()\n-\tdirectly rather than read() in all cases. Make primitive read \n+\tdirectly rather than read() in all cases. Make primitive read\n \timplementations\tmore efficient, as defined in JDK online docs.\n \t(skipBytes): Behave like the JDK's implementation.\n-\t* java/io/BufferedReader.java: Merge classpath docs. Check for a \n-\tclosed stream with checkStatus() whenever an IOException can be \n+\t* java/io/BufferedReader.java: Merge classpath docs. Check for a\n+\tclosed stream with checkStatus() whenever an IOException can be\n \tthrown.\n \t(checkStatus): New private method.\n \n@@ -1495,7 +1502,7 @@\n \t(addAll): Ditto.\n \t* java/util/Collections.java (UnmodifiableCollection): Implement\n \ttoString().\n-\t(UnmodifiableList): Throw UnsupportedOperationException from \n+\t(UnmodifiableList): Throw UnsupportedOperationException from\n \tmodification methods. Set `l' from the one-parameter constructor.\n \t(UnmodifiableMap): Implement toString().\n \t(SynchronizedCollection): Ditto.\n@@ -1515,7 +1522,7 @@ Sun Nov 26 23:59:55 2000  Anthony Green  <green@redhat.com>\n \tjavax/naming/directory/InvalidSearchFilterException.java,\n \tjavax/naming/directory/NoSuchAttributeException.java,\n \tjavax/naming/directory/SchemaViolationException.java: New files.\n-\t\n+\n Sun Nov 26 22:35:53 2000  Anthony Green  <green@redhat.com>\n \n \t* javax/naming/InitialContext.java (rebind): Implement.\n@@ -1637,7 +1644,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n  \tjavax/naming/NamingEnumeration.java, javax/naming/Name.java,\n  \tjavax/naming/InitialContext.java,\n  \tjavax/naming/NoInitialContextException.java: New files.\n-\t\n+\n 2000-11-25  Anthony Green  <green@redhat.com>\n \n \t* prims.cc (_Jv_NewObjectArray): Undo placement change.\n@@ -1660,29 +1667,29 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t(URLClassLoader): Call jarFileize.  Use addElement instead of\n \tinsertElementAt.\n \t(findResources): New method.\n-\t\n+\n \t* java/lang/ClassLoader.java: Import java.util.Enumeration.\n \t(getResource): Implement correct logic.\n \t(findResource): New method.\n \t(getResources): New method.\n \t(findClass): Create a ClassNotFoundException with the name of the\n \tclass rather than nothing at all.\n \t(defineClass) Only throw ClassFormatError.\n-\t\n+\n \t* java/lang/Class.java (forName): New method.\n \t* java/lang/Class.h (forName): New method.\n \t* java/lang/natClass.cc (forName): New method.\n \n 2000-11-24  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/System.java (setProperties): Only call init_properties()\n-\tif properties is null.\t\n+\tif properties is null.\n \t(getProperties): Ditto.\n \t(getProperty): Ditto.\n \t(setProperty): Call init_properties if properties are null.\n \t(prop_init): Remove field.\n \t* java/lang/natSystem.cc (init_properties): Synchronize the entire\n-\tmethod. Check for null properties after synchronizing instead of \n+\tmethod. Check for null properties after synchronizing instead of\n \tprop_init flag. Set the properties field last for thread safety.\n \n \t* java/io/ObjectInputStream.java (ObjectInputStream): If DEBUG is set,\n@@ -1700,8 +1707,8 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* configure: Rebuilt.\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (built_java_source_files): Add Configuration.java.\n-\t* configure.in: Add Configuration.java to CONFIG_FILES. Set \n-\tLIBGCJDEBUG substitution if --enable-libgcj-debug is specified. \n+\t* configure.in: Add Configuration.java to CONFIG_FILES. Set\n+\tLIBGCJDEBUG substitution if --enable-libgcj-debug is specified.\n \tCreate `gnu' directory in the build tree.\n \t* gnu/classpath/Configuration.java.in: New file.\n \n@@ -1734,16 +1741,16 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (core_java_source_files): Added Collections.java.\n \t* java/util/List.java: Merged from classpath.\n-\t* java/util/Vector.java: Ditto.\t\n+\t* java/util/Vector.java: Ditto.\n \t* java/util/Collections.java: From classpath.\n-\t* java/util/ArrayList.java (addAll(Collection)): Call \n+\t* java/util/ArrayList.java (addAll(Collection)): Call\n \taddAll(int,Collection) instead of duplicating code.\n \t(indexOf): Clean up int initialization.\n-\t(clear): Set cleared array entries to null, to allow garbage \n+\t(clear): Set cleared array entries to null, to allow garbage\n \tcollection.\n-\t* java/util/List.java: Minor formatting fixes.\t\n+\t* java/util/List.java: Minor formatting fixes.\n \t* java/util/SimpleTimeZone.java: ditto.\n-\t\n+\n 2000-11-18  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.in: Rebuilt.\n@@ -1906,24 +1913,24 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n 2000-11-02  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/util/AbstractList.java: Throw messages with \n+\t* java/util/AbstractList.java: Throw messages with\n \tIndexOutOfBoundsExceptions.\n \t (listIterator()): Call listIterator(0).\n \t(size): New field. Initialize to size().\n \t(hasNext): Test position against size, not size().\n-\t(remove): Increment knownMod by one instead of resetting it from \n+\t(remove): Increment knownMod by one instead of resetting it from\n \tmodCount.\n \t(add): Ditto.\n \t(SubList.upMod): Removed.\n \t(SubList.set): Don't call upMod() or update knownMod.\n \t(SubList.add(int,Object)): Increment modCount instead of caling upMod().\n \t(SubList.remove): Ditto.\n-\t(SubList.addAll): Don't call backingList.size(). Increment size from \n+\t(SubList.addAll): Don't call backingList.size(). Increment size from\n \tc.size().\n \t(SubList.iterator): New method. Call listIterator(0).\n \t(SubList.listIterator): New method. Restore code to return an anonymous\n \tlistIterator implementation (with some changes).\n-\t* java/util/AbstractSequentialList.java: Throw messages with \n+\t* java/util/AbstractSequentialList.java: Throw messages with\n \tIndexOutOfBoundsExceptions.\n \t(addAll): Add a specnote.\n \t* java/util/ArrayList.java (removeRange): Get the math right.\n@@ -1969,7 +1976,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n \t* java/io/Reader.java: Merge docs from classpath.\n \t(skip): Synchronize on `lock'.\n-\t* java/io/FileReader.java: Import correct implementation from \n+\t* java/io/FileReader.java: Import correct implementation from\n \tclasspath.\n \t* java/io/StringReader.java: Merge docs from classpath.\n \t(ready): Throw IOException if stream is closed.\n@@ -1993,16 +2000,16 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t(hashCode): Ditto.\n \t(indexOf): Ditto. Don't take null check outside of the loop.\n \t(iterator): Return an AbstractListItr instead of anonymous class.\n-\t(lastIndexOf): Use a for loop bounded by size() instead of \n+\t(lastIndexOf): Use a for loop bounded by size() instead of\n \thasPrevious() in iterator loop.\n \t(listIterator): Return an AbstractListItr.\n \t(removeRange): Remove bounds checking code and docs.\n-\t(AbstractListItr): New inner class. Code moved here from \n+\t(AbstractListItr): New inner class. Code moved here from\n \tlistIterator().\n-\t(SubList.iterator): Removed. Use default implementation from \n+\t(SubList.iterator): Removed. Use default implementation from\n \tAbstractList instead.\n \t(SubList.listIterator): As above.\n-\t* java/util/AbstractMap.java (clear): Use a for loop bounded by size() \n+\t* java/util/AbstractMap.java (clear): Use a for loop bounded by size()\n \tinstead of hasNext() in iterator loop.\n \t(containsValue): Ditto.\n \t(equals): Ditto.\n@@ -2012,7 +2019,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t(remove): Ditto.\n \t(toString): Ditto. Use string concatenation operators, not\n \tStringBuffer.\n-\t* java/util/AbstractSequentialList.java (addAll): Use a for loop \n+\t* java/util/AbstractSequentialList.java (addAll): Use a for loop\n \tbounded by size() instead of hasNext() in iterator loop.\n \t* java/util/AbstractSet.java (hashCode): Don't catch exception as\n \tpart of normal execution flow. Do an explicit null check instead.\n@@ -2024,7 +2031,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t(removeRange): Make protected. Don't check bounds.\n \t(add): Check lower bounds also. Simplify IndexOutOfBoundsException\n \tmessage.\n-\t(addAll (Collection)): Use a size-bounded for loop instead of hasNext() \n+\t(addAll (Collection)): Use a size-bounded for loop instead of hasNext()\n \tcheck.\n \t(addAll (int, Collection)): Check lower bounds. Simplify exception\n \tstring.\n@@ -2036,11 +2043,11 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t(toArray): Correct comment.\n \t(trimToSize): Don't update modCount, this is not a structural change.\n \tAdd comment.\n-\t\n+\n \t* java/util/BitSet.java: Merged with classpath, new JDK 1.2 methods\n \timplemented.\n \t(toString): Declare `bit' as long, not int.\n-\t(data): Made package-private, not private.\t\n+\t(data): Made package-private, not private.\n \n 2000-10-27  Warren Levy  <warrenl@cygnus.com>\n \n@@ -2084,9 +2091,9 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n \t* Makefile.am (GCJCOMPILE): Pass --tag=GCJ to libtool.\n \t(core_java_source_files): Put java.lang, java.io, and java.util here.\n-\t(ordinary_java_source_files): Order so that core_java_source_files are \n+\t(ordinary_java_source_files): Order so that core_java_source_files are\n \tbuilt first.\n-\t(java_source_files): Reorder so that special_java_source_files are \n+\t(java_source_files): Reorder so that special_java_source_files are\n \tbuilt first.\n \t* configure.in: Don't pass -I flag to gcj.\n \t* Makefile.in: Rebuilt.\n@@ -2100,7 +2107,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n 2000-10-24  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/util/EventObject.java: Merged from classpath.\n-\t\n+\n \t* java/lang/ThreadGroup.java (uncaughtException): Print thread name\n \twith stack dump.\n \n@@ -2276,7 +2283,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n \t* include/jvm.h: Enable __builtin_expect().\n \n-\t* name-finder.cc (lookup): Don't trust dladdr() if the address is from \n+\t* name-finder.cc (lookup): Don't trust dladdr() if the address is from\n \tthe main program. Fix for PR libgcj/341.\n \n 2000-10-07  Tom Tromey  <tromey@cygnus.com>\n@@ -2352,7 +2359,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* java/security/interfaces/DSAPrivateKey.java (serialVersionUID):\n \tNew field.\n \t* java/security/interfaces/DSAPublicKey.java (serialVersionUID):\n-        New field.\n+\tNew field.\n \t* java/sql/DataTruncation.java (serialVersionUID): New field.\n \t* java/sql/SQLException.java (serialVersionUID): New field.\n \t* java/sql/SQLWarning.java (serialVersionUID): New field.\n@@ -2399,15 +2406,15 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n 2000-09-30  Hans Boehm  <boehm@acm.org>\n \t    Bryce McKinlay  <bryce@albatross.co.nz>\n-\t    \n+\n \tImplement bitmap descriptor based marking for Boehm GC.\n \n \t* configure.in: Define JC1GCSPEC. Set it if boehm-gc is used.\n \t* configure: Rebuilt.\n \t* libgcj.spec.in: Pass JC1GCSPEC to jc1.\n \t* include/jvm.h (struct _Jv_VTable): New field `gc_descr'. New inline\n \tmethod get_finalizer().\n-\t(struct _Jv_ArrayVTable): Ditto. Declare method array with \n+\t(struct _Jv_ArrayVTable): Ditto. Declare method array with\n \tNUM_OBJECT_METHODS elements instead of NUM_OBJECT_METHODS + 1.\n \t(_Jv_AllocObj): Add new jclass parameter.\n \t(_Jv_AllocArray): Ditto.\n@@ -2422,18 +2429,18 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* resolve.cc (METHOD_NOT_THERE, METHOD_INACCESSIBLE): New #defines.\n \t(_Jv_ResolvePoolEntry): Use METHOD_NOT_THERE and METHOD_INACCESSIBLE.\n \t(_Jv_DetermineVTableIndex): Ditto.\n-\t(_Jv_PrepareClass): Ditto. Remove offset-by-one adjustments from vtable \n+\t(_Jv_PrepareClass): Ditto. Remove offset-by-one adjustments from vtable\n \tcalculations to account for new gc_descr field.\n \t* boehm.cc: #include gc_gcj.h.\n \t(obj_kind_x, obj_free_list): `#if 0'-ed away.\n \t(_Jv_MarkObj): Check that vtable doesn't point to a cleared object.\n \tNew commentary from HB. Mark the classes vtable.\n \t(_Jv_MarkArray): Check that vtable doesn't point to a cleared object.\n \t(GC_DEFAULT_DESCR): New #define.\n-\t(_Jv_BuildGCDescr): New function. Use GC_DEFAULT_DESCR, for now.\t\n+\t(_Jv_BuildGCDescr): New function. Use GC_DEFAULT_DESCR, for now.\n \t(_Jv_AllocObj): New parameter `klass'. Use GC_GCJ_MALLOC ().\n \t(_Jv_AllocArray): New parameter `klass'. Allocate with GC_MALLOC and\n-\tscan conservativly if size is less than min_heap_addr. Set vtable \n+\tscan conservativly if size is less than min_heap_addr. Set vtable\n \tpointer of new object before returning.\n \t(_Jv_AllocBytes): Use GC_MALLOC_ATOMIC, not GC_GENERIC_MALLOC.\n \t(_Jv_InitGC): Call GC_init_gcj_malloc(). Don't set up marking and\n@@ -2444,10 +2451,10 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* java/lang/Class.h (_Jv_NewObjectArray): No longer a friend.\n \t(_Jv_NewPrimArray): Ditto.\n \t(_Jv_AllocObj): Declare as a friend.\n-\t(_Jv_AllocArray): Ditto.\t\n+\t(_Jv_AllocArray): Ditto.\n \t* java/lang/natClassLoader.cc (_Jv_FindArrayClass): Copy gc_descr\n-\tfrom &ObjectClass into new array class. Remove offset-by-one \n-\tadjustments from `method' size calculations to account for gc_descr \n+\tfrom &ObjectClass into new array class. Remove offset-by-one\n+\tadjustments from `method' size calculations to account for gc_descr\n \tfield.\n \n 2000-09-26  Tom Tromey  <tromey@cygnus.com>\n@@ -2494,7 +2501,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \t* java/lang/String.java (CASE_INSENSITIVE_ORDER): New static field.\n \tInitialize with anonymous class.\n \t(compareToIgnoreCase): New method.\n-\t\n+\n \t* java/lang/ThreadGroup.java (had_uncaught_exception): New field.\n \t(uncaughtException): Set had_uncaught_exception.\n \t* prims.cc (JvRunMain): Check value of had_uncaught_exception and\n@@ -2580,7 +2587,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n 2000-09-07  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* Makefile.am (Thread.h): Don't be friends with native threads \n+\t* Makefile.am (Thread.h): Don't be friends with native threads\n \tfunctions.\n \t* Makefile.in: Rebuilt.\n \t* java/lang/Thread.java (interrupt_flag): Make package-private.\n@@ -2612,7 +2619,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \tcalls to `throw'.\n \t(send): Undo last patch. Remove the label only.\n \t(mcastGrp): Ditto.\n-\t* java/net/natPlainSocketImpl.cc: Change various `JvThrow' calls to \n+\t* java/net/natPlainSocketImpl.cc: Change various `JvThrow' calls to\n \t`throw'.\n \t* java/net/natInetAdress.cc: Ditto.\n \n@@ -2630,7 +2637,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \tstack. Synchronize.\n \t* java/lang/fdlibm.h: #undef __P if previously defined.\n \t* java/lang/natSystem.cc (currentTimeMillis): Remove unused local.\n-\t* java/net/natPlainDatagramSocketImpl.cc (send): Remove unreachable \n+\t* java/net/natPlainDatagramSocketImpl.cc (send): Remove unreachable\n \tblock.\n \t(mcastGrp): Ditto.\n \n@@ -2641,10 +2648,10 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n 2000-09-04  Anthony Green  <green@redhat.com>\n \n-        Fix for PR java.io/203:\n-        * java/io/File.java (createTempFile): Obey directory argument.\n+\tFix for PR java.io/203:\n+\t* java/io/File.java (createTempFile): Obey directory argument.\n \tUse java.io.tmpdir if needed.  Don't leave FileDescripators open.\n-        * java/lang/natSystem.cc (init_properties): Use TMPDIR environment\n+\t* java/lang/natSystem.cc (init_properties): Use TMPDIR environment\n \tvariable to set java.io.tmpdir on non-WIN32 systems.\n \n 2000-09-04  Anthony Green  <green@redhat.com>\n@@ -2664,10 +2671,10 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \n 2000-09-01  Andrew Haley  <aph@redhat.com>\n \n-        * java/io/StreamTokenizer.java: Don't throw a\n-        NumberFormatException if a field is numeric as far as the\n-        StreamTokenizer is concerned but not as far as Double.valueOf() is\n-        concerned: return a zero instead.\t\n+\t* java/io/StreamTokenizer.java: Don't throw a\n+\tNumberFormatException if a field is numeric as far as the\n+\tStreamTokenizer is concerned but not as far as Double.valueOf() is\n+\tconcerned: return a zero instead.\n \n 2000-08-30  Tom Tromey  <tromey@cygnus.com>\n \n@@ -2714,7 +2721,7 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n \tjava/util/SortedSet.java: Imported from GNU Classpath.\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am: Added new files.\n-\t\n+\n 2000-08-26  Anthony Green  <green@redhat.com>\n \n \t* Makefile.in: Rebuilt.\n@@ -2811,7 +2818,7 @@ Sun Aug 20 12:33:43 2000  Anthony Green  <green@redhat.com>\n \t* java/util/jar/JarFile.java: Don't call\n \tjava.util.zip.ZipFile.getEntry twice.  From Mark Wielaard\n \t<mark@klomp.org>.\n-\t\n+\n Sun Aug 20 09:51:48 2000  Anthony Green  <green@redhat.com>\n \n \t* java/net/URLClassLoader.java: Find the JarEntry via the JarFile.\n@@ -2865,7 +2872,7 @@ Sat Aug 19 11:00:53 2000  Anthony Green  <green@redhat.com>\n \n \t* Makefile.in, gcj/Makefile.in: Rebuilt.\n \t* Makefile.am (ordinary_java_source_files): Add these new classes.\n-\t\n+\n 2000-08-16  Rolf W. Rasmussen  <rolfwr@ii.uib.no>\n \n \t* gnu/gcj/awt/ComponentDataBlitOp.java: New file.\n@@ -3051,18 +3058,18 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t    John Stracke <francis@ecal.com>\n \n \t* gnu/gcj/protocol/http/Connection.java (gotHeaders): Removed.\n-\t(connect): Don't falsely claim HTTP/1.1 compliance. Call \n+\t(connect): Don't falsely claim HTTP/1.1 compliance. Call\n \tgetHttpHeaders().\n \t(disconnect): Don't unset connected flag.\n \t(getHeaderField (String)): Call connect() if not connected.\n \t(getHeaderField (int)): Ditto.\n \t(getHeaderFieldKey): Ditto.\n-\t(getHttpHeaders): Don't call connect(). \n+\t(getHttpHeaders): Don't call connect().\n \t* java/net/HttpURLConnection.java (instanceFollowRedirects,\n \tgotResponseVals): New fields.\n \t(getResponseCode): Call getResponseVals() conditionally.\n \t(getResponseMessage): Ditto.\n-\t(getResponseVals): Call connect(). Don't throw FileNotFoundException.\t\n+\t(getResponseVals): Call connect(). Don't throw FileNotFoundException.\n \n 2000-08-09  Bryce McKinlay  <bryce@albatross.co.nz>\n \n@@ -3083,8 +3090,8 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* java/awt/geom/Point2D.java (clone): Ditto.\n \t* java/awt/geom/RectangularShape.java (clone): Ditto.\n \t* java/awt/image/ColorModel.java (bits, cspace, transparency, hasAlpha,\n-\tisAlphaPremultiplied): Make package-private, not private.\t\n-\t\n+\tisAlphaPremultiplied): Make package-private, not private.\n+\n 2000-08-08  Tom Tromey  <tromey@cygnus.com>\n \n \t* gnu/gcj/convert/Input_UTF8.java (read): Fixed handling of\n@@ -3150,22 +3157,22 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \n 2000-08-03  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-        * Makefile.am: Add new AWT stubs.\n-        * java/awt/Canvas.java: New placeholder class.\n-        * java/awt/Checkbox.java: Ditto.\n-        * java/awt/CheckboxMenuItem.java: Ditto.\n-        * java/awt/Choice.java: Ditto.\n-        * java/awt/Dialog.java: Ditto.\n-        * java/awt/FileDialog.java: Ditto.\n-        * java/awt/List.java: Ditto.\n-        * java/awt/ScrollPane.java: Ditto.\n-        * java/awt/TextField.java: Ditto.\n-        * java/awt/datatransfer/Clipboard.java: Ditto.\n-        * java/awt/Component.java (treeLock): Now a static String. Add comment.\n-        * java/awt/MenuItem.java (MenuItem): Add default constructor.\n-        * java/awt/Toolkit.java: Added all methods from J2SE 1.3 API docs. \n-        Some commented out. Partially implemented.\n-        * java/awt/natToolkit.cc: Removed file.\n+\t* Makefile.am: Add new AWT stubs.\n+\t* java/awt/Canvas.java: New placeholder class.\n+\t* java/awt/Checkbox.java: Ditto.\n+\t* java/awt/CheckboxMenuItem.java: Ditto.\n+\t* java/awt/Choice.java: Ditto.\n+\t* java/awt/Dialog.java: Ditto.\n+\t* java/awt/FileDialog.java: Ditto.\n+\t* java/awt/List.java: Ditto.\n+\t* java/awt/ScrollPane.java: Ditto.\n+\t* java/awt/TextField.java: Ditto.\n+\t* java/awt/datatransfer/Clipboard.java: Ditto.\n+\t* java/awt/Component.java (treeLock): Now a static String. Add comment.\n+\t* java/awt/MenuItem.java (MenuItem): Add default constructor.\n+\t* java/awt/Toolkit.java: Added all methods from J2SE 1.3 API docs.\n+\tSome commented out. Partially implemented.\n+\t* java/awt/natToolkit.cc: Removed file.\n \n 2000-08-03  Bryce McKinlay  <bryce@albatross.co.nz>\n \n@@ -3203,26 +3210,26 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \n 2000-08-02  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-        * interpret.cc (_Jv_InterpMethod::continue1): Type of `fun' changed\n+\t* interpret.cc (_Jv_InterpMethod::continue1): Type of `fun' changed\n \tto match C declaration in ffi.h.\n \t* Makefile.am: Add java/awt/Button.java.\n \t* Makefile.in: Rebuilt.\n \n 2000-07-29  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n-        * java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Type of the\n-        cast of the second argument to `ffi_raw_call' changed to match\n-        prototype.\n+\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Type of the\n+\tcast of the second argument to `ffi_raw_call' changed to match\n+\tprototype.\n \n 2000-07-26  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n-        * jni.cc (_Jv_JNIMethod::call): Type of the cast of the second\n-        argument to `ffi_raw_call' changed to match prototype.\n+\t* jni.cc (_Jv_JNIMethod::call): Type of the cast of the second\n+\targument to `ffi_raw_call' changed to match prototype.\n \n 2000-07-31  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/awt/Component.java (toString): Implemented.\n-\t* java/awt/Container.java (addImpl): Remove FIXME. Only call \n+\t* java/awt/Container.java (addImpl): Remove FIXME. Only call\n \tdispatchEvent() to dispatch the event.\n \t(removeImpl): Ditto.\n \n@@ -3418,7 +3425,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* java/awt/geom/RectangularShape.java: New file.\n \t* java/awt/geom/Point2D.java (Double, Float): New inner classes.\n \t* java/awt/geom/IllegalPathStateException.java: New file.\n-\t\n+\n \t* scripts/showval.java: New file.\n \n \t* scripts/classes.pl (scan): Print inner classes properly.\n@@ -3469,26 +3476,26 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* java/util/ResourceBundle.java (getLocale): stub.\n \t* Makefile.am: Added new AWT classes.\n \t* Makefile.in: Rebuilt.\n-\t* java/awt/AWTEvent.java: Add EVENT_MASK constants, isConsumed, \n+\t* java/awt/AWTEvent.java: Add EVENT_MASK constants, isConsumed,\n \tconstructors. Fix toString() and paramString().\n \t* java/awt/AWTEventMulticaster.java: New class. Implemented.\n \t* java/awt/CheckboxGroup.java: New class.\n \t* java/awt/ColorModel.java: New class.\n-\t* java/awt/Component.java: Added stubs for most methods. Implemented \n+\t* java/awt/Component.java: Added stubs for most methods. Implemented\n \tevent dispatch.\n \t* java/awt/Container.java: ditto.\n \t* java/awt/ComponentOrientation.java: New class. Partly implemented.\n \t* java/awt/Cursor.java: ditto.\n \t* java/awt/Event.java: Fix paramString().\n \t* java/awt/EventQueue.java: New class. Implemented.\n-\t* java/awt/Font.java: Added additional stub methods. Implemented \n+\t* java/awt/Font.java: Added additional stub methods. Implemented\n \ttoString().\n \t* java/awt/FontMetrics.java: New class. Stubbed.\n-\t* java/awt/GraphicsConfiguration.java: New class. Complete, except for \n+\t* java/awt/GraphicsConfiguration.java: New class. Complete, except for\n \tJava2D parts.\n \t* java/awt/Insets.java: New class. Implemented.\n \t* java/awt/Menu.java: Add new methods. Partially implemented.\n-\t* java/awt/MenuItem.java: Add new methods and fields. Partially \n+\t* java/awt/MenuItem.java: Add new methods and fields. Partially\n \timplemented.\n \t* java/awt/MenuShortcut.java: New class. Implemented.\n \t* java/awt/Panel.java: New class. Placeholder.\n@@ -3505,15 +3512,15 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* java/awt/event/HierarchyEvent.java: New class.\n \t* java/awt/event/HierarchyListener.java: New class.\n \t* java/awt/event/InputMethodEvent.java: Implement paramString().\n-\t* java/awt/event/InvocationEvent.java: Implement paramString(). Throw \n+\t* java/awt/event/InvocationEvent.java: Implement paramString(). Throw\n \texception if !catchExceptions.\n \t* java/awt/event/ItemEvent.java: Implement paramString().\n \t* java/awt/event/KeyEvent.java: Implement paramString().\n \t* java/awt/event/MouseEvent.java: Implement paramString().\n \t* java/awt/event/PaintEvent.java: Implement paramString().\n \t* java/awt/event/TextEvent.java: Implement paramString().\n \t* java/awt/event/WindowEvent.java: Implement paramString().\n-\t\n+\n \tAWT Peer interfaces:\n \t* java/awt/peer/ButtonPeer.java: New file.\n \t* java/awt/peer/ListPeer.java: New file.\n@@ -3578,7 +3585,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \n \t* java/lang/ThreadGroup.java: Added synchronized flag to many methods.\n \t(destroyed_flag): Removed.\n-\t(isDestroyed, removeGroup, removeThread): Test for parent == null.\t\n+\t(isDestroyed, removeGroup, removeThread): Test for parent == null.\n \t(activeCount): Added spec note.\n \n 2000-06-27  Warren Levy  <warrenl@cygnus.com>\n@@ -3653,8 +3660,8 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* prims.cc (_Jv_RunMain): Don't use `main_group'.\n \t* gnu/gcj/runtime/FirstThread.java: Remove ThreadGroup constructor\n \targument.\n-\t* java/lang/Thread.java (Thread): Bootstrap initial thread from \n-\tThreadGroup.root if Thread.currentThread is null. Honour the \n+\t* java/lang/Thread.java (Thread): Bootstrap initial thread from\n+\tThreadGroup.root if Thread.currentThread is null. Honour the\n \tThreadGroup's max priority setting.\n \n 2000-06-18  Tom Tromey  <tromey@cygnus.com>\n@@ -3680,11 +3687,11 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n 2000-06-15  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tFix for PR java.lang/258:\n-\t* prims.cc (_Jv_PrimClass): Set state of primitive class to \n+\t* prims.cc (_Jv_PrimClass): Set state of primitive class to\n \tJV_STATE_DONE, to prevent accidental initialization.\n-\t* java/lang/natClass.cc (_Jv_IsAssignableFrom): Call \n+\t* java/lang/natClass.cc (_Jv_IsAssignableFrom): Call\n \t_Jv_InterfaceAssignableFrom if target is an interface and source is an\n-\tinterface or an abstract class.\tRemove redundant initializeClass calls. \n+\tinterface or an abstract class.\tRemove redundant initializeClass calls.\n \tRemove duplicate if_idt test.\n \t(_Jv_InterfaceAssignableFrom): New function.\n \t* java/lang/Class.h (_Jv_InterfaceAssignableFrom): Prototype.\n@@ -3726,13 +3733,13 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \tFix for PR libgcj/226:\n \t* java/lang/Class.h (_Jv_InitClass): Don't call __builtin_expect,\n \tsince this is an installed header.\n-\t\n+\n \tFix for PR libgcj/228:\n-\t* java/util/zip/ZipFile (getInputStream): Create inflater with \n+\t* java/util/zip/ZipFile (getInputStream): Create inflater with\n \tnowrapper option.\n-\t\n+\n \t* java/util/zip/natInflater.cc (inflate): Throw zlib's error message\n-\twith DataFormatException.\t\n+\twith DataFormatException.\n \n 2000-05-20  Tom Tromey  <tromey@cygnus.com>\n \n@@ -3877,7 +3884,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \n 2000-04-17  Andrew Haley  <aph@cygnus.com>\n \n-\t* Makefile.am: Add new files: \n+\t* Makefile.am: Add new files:\n \tgnu/gcj/io/SimpleSHSStream.java, gnu/gcj/io/natSimpleSHSStream.cc,\n \tgnu/gcj/io/shs.cc.\n \t* Makefile.in: Rebuilt.\n@@ -3901,12 +3908,12 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \tpunctuation from the classname of an array element.\n \n \t* gcj/javaprims.h: Add SimpleDigestStream.\n-\t\n+\n 2000-04-17  Andrew Haley  <aph@cygnus.com>\n \n \t* java/lang/natClass.cc (getPrivateField): Make recursive calls\n \tto getPrivateField for superclasses.\n- \n+\n 2000-04-14  Andrew Haley  <aph@cygnus.com>\n \n \t* Makefile.am: Add new files:\n@@ -3923,7 +3930,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* java/lang/natClass.cc (getPrivateField): New method.\n \t(getPrivateMethod): Ditto.\n \t(_Jv_IsAssignableFrom): Return false for Interface with no IDT.\n-\t* gcj/javaprims.h: Add serialization classes.\t\n+\t* gcj/javaprims.h: Add serialization classes.\n \t* java/io/ObjectInputStream.java (setBooleanField): Rewrite in Java.\n \t(setByteField): Ditto.\n \t(setCharField): Ditto.\n@@ -3949,7 +3956,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t(getDefinedSUID): Ditto.\n \t* java/io/natObjectOutputStream.cc: New file.\n \t* java/io/natObjectInputStream.cc: New file.\n-\t\n+\n 2000-04-13  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/io/ObjectInputStream.java: Temporary workarounds for compiler\n@@ -4166,7 +4173,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* sysdep/ia64.c (rse_address_add): Delete.\n \t(IS_NaT_COLLECTION_ADDR): Delete.\n \t(ia64_backtrace_helper): check for null unwind_info.\n-\t\n+\n \t* sysdep/ia64-frame.h: add calc_caller_bsp.\n \n \t* java/lang/natThrowable.cc (printRawStackTrace): Flush\n@@ -4176,7 +4183,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t(_Jv_remI): Likewise.\n \t(_Jv_divJ): Likewise.\n \t(_Jv_remJ): Likewise.\n-\t\n+\n \t* interpret.cc (continue1): Use divide subroutines to guarantee\n \tcorrect Java standard behaviour.\n \tFloating-point division should not abort; make it so.\n@@ -4197,7 +4204,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \tlookups on ia64.\n \t* java/lang/natThrowable.cc(printRawStackTrace): Don't print out a\n \tblank line.\n-\t\n+\n 2000-03-22  Andrew Haley  <aph@cygnus.com>\n \n \t* configure.host: Add -funwind-tables for IA64.\n@@ -4208,7 +4215,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t* sysdep/ia64-frame.h: New file.\n \t* configure.in: Add sysdep/ia64.c for ia64.\n \t* configure: Rebuilt.\n-\t\n+\n 2000-03-17  Andrew Haley  <aph@cygnus.com>\n \n \t* java/lang/natString.cc: Remove `register' keyword.\n@@ -4270,7 +4277,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t(StringBuffer (String)): Use DEFAULT_CAPACITY.\n \n \t(replace): Calculate length for arraycopy() correctly.\n-\t\n+\n 2000-05-09  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/StringBuffer.java (toString): Don't mark buffer as\n@@ -4324,7 +4331,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \t(_Jv_IsInstanceOf): Ditto.\n \t(_Jv_CheckCast): Ditto.\n \t(_Jv_CheckArrayStore): Ditto.\n-\t* java/lang/Class.h (_Jv_InitClass): Ditto.\t\n+\t* java/lang/Class.h (_Jv_InitClass): Ditto.\n \t* java/lang/natObject.cc (_Jv_MonitorEnter): __builtin_expect `false',\n \tnot `0'.\n \t(notify): Ditto.\n@@ -4548,7 +4555,7 @@ Sun Aug 13 19:53:01 2000  Anthony Green  <green@redhat.com>\n \n \t* include/posix-threads.h (_Jv_MutexUnlock): Replace\n \t_JV_NOT_OWNER.\n-\t\n+\n 2000-04-08  Anthony Green  <green@cygnus.com>\n \n \t* posix-threads.cc (_Jv_MutexLock): Moved back to posix-threads.h.\n@@ -4654,7 +4661,7 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t* configure.in: Add --disable-jvmpi.\n \t* include/config.h.in: Rebuilt.\n \t* acconfig.h: Add ENABLE_JVMPI.\n-\t \n+\n \t* include/jvm.h: Declare _Jv_DisableGC and _Jv_EnableGC.\n \t(_Jv_JVMPI_Notify_OBJECT_ALLOC): New define.\n \t(_Jv_JVMPI_Notify_THREAD_END): New define.\n@@ -4680,12 +4687,12 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t(disable_gc_mutex): Declare.\n \t* nogc.cc (_Jv_DisableGC): New function.\n \t(_Jv_EnableGC): New function.\n-\t  \n+\n \t* jni.cc (_Jv_JNI_GetEnv): Handle JVMPI interface requests.\n \t(_Jv_JVMPI_Interface): Define.\n \t(jvmpiEnableEvent): New function.\n \t(_Jv_JNI_Init): Initialize _Jv_JVMPI_Interface.\n-\t  \n+\n \t* include/jvmpi.h: New file.\n \n 2000-03-27  Bryce McKinlay  <bryce@albatross.co.nz>\n@@ -4702,10 +4709,10 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \tthe target thread by signaling its wait condition.\n \t(_Jv_ThreadInitData): Set `thread_obj' in the thread data struct,\n \tnot the starter struct. Initialize wait_mutex and wait_cond.\n-\t(_Jv_MutexLock): New recursive mutex implementation. Moved from \n+\t(_Jv_MutexLock): New recursive mutex implementation. Moved from\n \tposix-threads.h.\n \t(_Jv_MutexUnlock): Ditto.\n-\t(really_start): Set info->data->thread from pthread_self() to work \n+\t(really_start): Set info->data->thread from pthread_self() to work\n \taround a race condition. Destroy wait_mutex and wait_cond when run()\n \treturns.\n \t* java/lang/Thread.java: (isInterrupted_): Renamed to overloaded\n@@ -4714,7 +4721,7 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \tstartable_flag: New private field.\n \t(Thread): Initialize `startable_flag'.\n \t(toString): Check for null thread group.\n-\t* java/lang/natThread.cc: (struct natThread): New fields \n+\t* java/lang/natThread.cc: (struct natThread): New fields\n \t`join_mutex', `join_cond'. Removed fields `joiner', `next'.\n \t(class locker): Removed.\n \t(initialize_native): Initialize `join_cond' and `join_mutex'.\n@@ -4729,7 +4736,7 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t#defines and #ifdefs.\n \t(struct _Jv_Thread_t): New fields `thread_obj', `wait_cond',\n \t`wait_mutex', `next'.\n-\t(struct _Jv_ConditionVariable_t): Define as a struct instead of \n+\t(struct _Jv_ConditionVariable_t): Define as a struct instead of\n \tdirectly mapping to pthread_cond_t.\n \t(struct _Jv_Mutex_t): New recursive implementation.\n \t(_Jv_PthreadCheckMonitor): Reimplemented. Simple `owner' check.\n@@ -4742,10 +4749,10 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t(_Jv_MutexDestroy): Ditto.\n \t(_Jv_CondDestroy): Removed.\n \t(_Jv_PthreadGetMutex): Removed.\n-\t* include/win32-threads.h: (_Jv_CondNotify): Guess _JV_NOT_OWNER on an \n+\t* include/win32-threads.h: (_Jv_CondNotify): Guess _JV_NOT_OWNER on an\n \terror. Add a FIXME about this.\n \t(_Jv_CondNotifyAll): Ditto.\n-\t* win32-threads.cc: (_Jv_CondWait): Return 0 on a timeout. Guess \n+\t* win32-threads.cc: (_Jv_CondWait): Return 0 on a timeout. Guess\n \t_JV_NOT_OWNER on other errors. Add FIXME.\n \n 2000-03-26  Tom Tromey  <tromey@cygnus.com>\n@@ -4782,7 +4789,7 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t* interpret.cc (PUSHL, PUSHD, POPL, POPD, LOADL, LOADD, STOREL,\n \tSTORED): Define differently on a 64 bit machine.\n \t(continue1): Use ffi_java_raw_call when appropriate.\n- \n+\n 2000-03-24  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/math/BigInteger.java(divide): Handle the special case when\n@@ -4813,9 +4820,9 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \n \t* java/lang/natClass.cc (isInstance): Initialize `this'.\n \t(isAssignableFrom): Initialize `this' and `klass'.\n-\t(_Jv_IsAssignableFrom): If an interface has no idt, it is not \n+\t(_Jv_IsAssignableFrom): If an interface has no idt, it is not\n \timplemented by any loaded class, so return false.\n-\t* java/lang/natClass.cc (isInstance): Use _Jv_IsAssignableFrom(), \n+\t* java/lang/natClass.cc (isInstance): Use _Jv_IsAssignableFrom(),\n \tnot Class.isAssignableFrom(). Use JV_CLASS, not getClass().\n \n 2000-03-19  Warren Levy  <warrenl@cygnus.com>\n@@ -5010,17 +5017,17 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t* java/lang/natClass.cc (isAssignableFrom): Move functionality to\n \tinline function `_Jv_IsAssignableFrom'. Use that function.\n \t(isInstance): Declare `inline'.\n-\t(initializeClass): Get lock on class before checking `state'. Unlock \n-\tbefore calling resolveClass0. Call _Jv_PrepareConstantTimeTables with \n+\t(initializeClass): Get lock on class before checking `state'. Unlock\n+\tbefore calling resolveClass0. Call _Jv_PrepareConstantTimeTables with\n \tthe lock held.\n \t(_Jv_LookupInterfaceMethod): Use _Jv_GetMessageString.\n-\t(_Jv_IsAssignableFrom): New inline function. Test assignability using \n+\t(_Jv_IsAssignableFrom): New inline function. Test assignability using\n \tclass->depth and ancestor table.\n \t(_Jv_IsInstanceOf): Use _Jv_IsAssignableFrom.\n \t(_Jv_CheckCast): Move from prims.cc. Use JV_CLASS and\n \t_Jv_IsAssignableFrom.\n \t(_Jv_CheckArrayStore): Ditto.\n-\t(_Jv_LookupInterfaceMethodIdx): New function. \n+\t(_Jv_LookupInterfaceMethodIdx): New function.\n \tINITIAL_IOFFSETS_LEN, INITIAL_IFACES_LEN: New #defines.\n \t(_Jv_PrepareConstantTimeTables): New function.\n \t(_Jv_IndexOf): Ditto.\n@@ -5312,7 +5319,7 @@ Sun Apr  2 08:27:18 2000  Anthony Green  <green@redhat.com>\n \t* java/lang/natRuntime.cc (_load): Include library path with\n \texception message.\n \n-\t* java/lang/natSystem.cc (init_properties): set java.lang.classpath \n+\t* java/lang/natSystem.cc (init_properties): set java.lang.classpath\n \tproperty.\n \n \t* java/lang/natThread.cc (dumpStack): Removed.\n@@ -5452,7 +5459,7 @@ Fri Feb 11 19:48:08 2000  Anthony Green  <green@cygnus.com>\n \t* java/lang/natThread.cc (stop): Don't abort, throw an exception\n \tinstead.\n \t(suspend): Ditto.\n-\t\n+\n 2000-02-09  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/natRuntime.cc (_load): Call add_library.\n@@ -5849,9 +5856,9 @@ Tue Jan 25 08:51:16 2000  Tom Tromey  <tromey@ferrule.cygnus.com>\n \t(printStackTrace): Call native method to do this.\n \t(Throwable): Call fillInStackTrace.\n \t(stackTrace): New variable.\n-\t\n+\n \t* include/jvm.h: Add _Jv_ThisExecutable functions.\n-\t\n+\n \t* prims.cc: (_Jv_execName): New variable.\n \t(catch_segv): Call fillInStackTrace.\n \t(catch_fpe): Ditto."}, {"sha": "1fca9f400f64f600b2273dddc1c3c141c18b83ee", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dabe8938fd45e84fe3c82f62fbfc946958302f/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dabe8938fd45e84fe3c82f62fbfc946958302f/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=b6dabe8938fd45e84fe3c82f62fbfc946958302f", "patch": "@@ -374,10 +374,8 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \n \tfail \"$errname compilation from source\"\n \tif {[info exists opts(xfail-gcj)] || ! [info exists opts(no-exec)]} {\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname execution from source compiled test\"\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname output from source compiled test\"\n+\t    untested \"$errname execution from source compiled test\"\n+\t    untested \"$errname output from source compiled test\"\n \t}\n \treturn\n     }\n@@ -400,8 +398,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     }\n     $status \"$errname execution from source compiled test\"\n     if { $status != \"pass\" } {\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname execution from source compiled test\"\n+\tuntested \"$errname output from source compiled test\"\n \treturn;\n     }\n \n@@ -488,13 +485,10 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \t    return\n \t}\n \tfail \"$errname byte compilation\"\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname compilation from bytecode\"\n+\tuntested \"$errname compilation from bytecode\"\n \tif {! [info exists opts(no-exec)]} {\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname execution from bytecode->native test\"\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname output from bytecode->native test\"\n+\t    untested \"$errname execution from bytecode->native test\"\n+\t    untested \"$errname output from bytecode->native test\"\n \t}\n \treturn\n     }\n@@ -520,14 +514,10 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \n     if {[string match \"*parse error*\" $main_name]\n \t|| [string match \"*parse error*\" $class_out]} {\n-\t# Do the remaining fails.\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname compilation from bytecode\"\n+\tuntested \"$errname compilation from bytecode\"\n \tif {! [info exists opts(no-exec)]} {\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname execution from bytecode->native test\"\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname output from bytecode->native test\"\n+\t    untested \"$errname execution from bytecode->native test\"\n+\t    untested \"$errname output from bytecode->native test\"\n \t}\n \treturn\n     }\n@@ -603,11 +593,9 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     if { $x != \"\" } {\n \tverbose \"target_compile failed: $x\" 2\n \tfail \"$errname compilation from bytecode\"\n-\tsetup_xfail \"*-*-*\"\n \tif {! [info exists opts(no-exec)]} {\n-\t    fail \"$errname execution from bytecode->native test\"\n-\t    setup_xfail \"*-*-*\"\n-\t    fail \"$errname output from bytecode->native test\"\n+\t    untested \"$errname execution from bytecode->native test\"\n+\t    untested \"$errname output from bytecode->native test\"\n \t}\n \treturn;\n     }\n@@ -625,8 +613,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     }\n     $status \"$errname execution from bytecode->native test\"\n     if { $status != \"pass\" } {\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname output from bytecode->native test\"\n+\tuntested \"$errname output from bytecode->native test\"\n \treturn;\n     }\n "}]}