{"sha": "47a6cc4e2932003063c2b56021f4b31bdeb5f746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhNmNjNGUyOTMyMDAzMDYzYzJiNTYwMjFmNGIzMWJkZWI1Zjc0Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-23T14:58:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-23T14:58:23Z"}, "message": "re PR rtl-optimization/82628 (wrong code at -Os on x86_64-linux-gnu in the 32-bit mode)\n\n\tPR target/82628\n\t* config/i386/predicates.md (x86_64_dwzext_immediate_operand): New.\n\t* config/i386/constraints.md (Wf): New constraint.\n\t* config/i386/i386.md (UNSPEC_SBB): New unspec.\n\t(cmp<dwi>_doubleword): Removed.\n\t(sub<mode>3_carry_ccc, *sub<mode>3_carry_ccc_1): New patterns.\n\t(sub<mode>3_carry_ccgz): Use unspec instead of compare.\n\t* config/i386/i386.c (ix86_expand_branch) <case E_TImode>: Don't\n\texpand with cmp<dwi>_doubleword.  For LTU and GEU use\n\tsub<mode>3_carry_ccc instead of sub<mode>3_carry_ccgz and use CCCmode.\n\nFrom-SVN: r254011", "tree": {"sha": "0381d8addc68400ea5960b3dd777fcfb5c3d3da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0381d8addc68400ea5960b3dd777fcfb5c3d3da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47a6cc4e2932003063c2b56021f4b31bdeb5f746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a6cc4e2932003063c2b56021f4b31bdeb5f746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a6cc4e2932003063c2b56021f4b31bdeb5f746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a6cc4e2932003063c2b56021f4b31bdeb5f746/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8008dd1c93cf12b8f6d8a23612e988d606281fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8008dd1c93cf12b8f6d8a23612e988d606281fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8008dd1c93cf12b8f6d8a23612e988d606281fdf"}], "stats": {"total": 145, "additions": 109, "deletions": 36}, "files": [{"sha": "cc64d7d3a2a2cf2079fd0e82236e92a4916545ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47a6cc4e2932003063c2b56021f4b31bdeb5f746", "patch": "@@ -1,5 +1,16 @@\n 2017-10-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82628\n+\t* config/i386/predicates.md (x86_64_dwzext_immediate_operand): New.\n+\t* config/i386/constraints.md (Wf): New constraint.\n+\t* config/i386/i386.md (UNSPEC_SBB): New unspec.\n+\t(cmp<dwi>_doubleword): Removed.\n+\t(sub<mode>3_carry_ccc, *sub<mode>3_carry_ccc_1): New patterns.\n+\t(sub<mode>3_carry_ccgz): Use unspec instead of compare.\n+\t* config/i386/i386.c (ix86_expand_branch) <case E_TImode>: Don't\n+\texpand with cmp<dwi>_doubleword.  For LTU and GEU use\n+\tsub<mode>3_carry_ccc instead of sub<mode>3_carry_ccgz and use CCCmode.\n+\n \t* common.opt (gcolumn-info): Enable by default.\n \t* doc/invoke.texi (gcolumn-info): Document new default.\n "}, {"sha": "619b465f0597d3c259c9eb8505af094512fc4ba6", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=47a6cc4e2932003063c2b56021f4b31bdeb5f746", "patch": "@@ -332,6 +332,11 @@\n    of it satisfies the e constraint.\"\n   (match_operand 0 \"x86_64_hilo_int_operand\"))\n \n+(define_constraint \"Wf\"\n+  \"32-bit signed integer constant zero extended from word size\n+   to double word size.\"\n+  (match_operand 0 \"x86_64_dwzext_immediate_operand\"))\n+\n (define_constraint \"Z\"\n   \"32-bit unsigned integer constant, or a symbolic reference known\n    to fit that range (for immediate operands in zero-extending x86-64"}, {"sha": "5840a2736850ea6d975a5083dbd29c972197ef93", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=47a6cc4e2932003063c2b56021f4b31bdeb5f746", "patch": "@@ -22378,27 +22378,45 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \tswitch (code)\n \t  {\n \t  case LE: case LEU: case GT: case GTU:\n-\t    std::swap (op0, op1);\n+\t    std::swap (lo[0], lo[1]);\n+\t    std::swap (hi[0], hi[1]);\n \t    code = swap_condition (code);\n \t    /* FALLTHRU */\n \n \t  case LT: case LTU: case GE: case GEU:\n \t    {\n-\t      rtx (*cmp_insn) (rtx, rtx, rtx);\n+\t      rtx (*cmp_insn) (rtx, rtx);\n+\t      rtx (*sbb_insn) (rtx, rtx, rtx);\n+\t      bool uns = (code == LTU || code == GEU);\n \n \t      if (TARGET_64BIT)\n-\t\tcmp_insn = gen_cmpti_doubleword;\n+\t\t{\n+\t\t  cmp_insn = gen_cmpdi_1;\n+\t\t  sbb_insn\n+\t\t    = uns ? gen_subdi3_carry_ccc : gen_subdi3_carry_ccgz;\n+\t\t}\n \t      else\n-\t\tcmp_insn = gen_cmpdi_doubleword;\n+\t\t{\n+\t\t  cmp_insn = gen_cmpsi_1;\n+\t\t  sbb_insn\n+\t\t    = uns ? gen_subsi3_carry_ccc : gen_subsi3_carry_ccgz;\n+\t\t}\n+\n+\t      if (!nonimmediate_operand (lo[0], submode))\n+\t\tlo[0] = force_reg (submode, lo[0]);\n+\t      if (!x86_64_general_operand (lo[1], submode))\n+\t\tlo[1] = force_reg (submode, lo[1]);\n \n-\t      if (!register_operand (op0, mode))\n-\t\top0 = force_reg (mode, op0);\n-\t      if (!x86_64_hilo_general_operand (op1, mode))\n-\t\top1 = force_reg (mode, op1);\n+\t      if (!register_operand (hi[0], submode))\n+\t\thi[0] = force_reg (submode, hi[0]);\n+\t      if ((uns && !nonimmediate_operand (hi[1], submode))\n+\t\t  || (!uns && !x86_64_general_operand (hi[1], submode)))\n+\t\thi[1] = force_reg (submode, hi[1]);\n \n-\t      emit_insn (cmp_insn (gen_rtx_SCRATCH (mode), op0, op1));\n+\t      emit_insn (cmp_insn (lo[0], lo[1]));\n+\t      emit_insn (sbb_insn (gen_rtx_SCRATCH (submode), hi[0], hi[1]));\n \n-\t      tmp = gen_rtx_REG (CCGZmode, FLAGS_REG);\n+\t      tmp = gen_rtx_REG (uns ? CCCmode : CCGZmode, FLAGS_REG);\n \n \t      ix86_expand_branch (code, tmp, const0_rtx, label);\n \t      return;"}, {"sha": "57d258298aa919be0cd557375f3cc509313a875c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=47a6cc4e2932003063c2b56021f4b31bdeb5f746", "patch": "@@ -112,6 +112,7 @@\n   UNSPEC_STOS\n   UNSPEC_PEEPSIB\n   UNSPEC_INSN_FALSE_DEP\n+  UNSPEC_SBB\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -1273,26 +1274,6 @@\n \t(compare:CC (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t\t    (match_operand:SWI48 1 \"<general_operand>\")))])\n \n-(define_insn_and_split \"cmp<dwi>_doubleword\"\n-  [(set (reg:CCGZ FLAGS_REG)\n-\t(compare:CCGZ\n-\t  (match_operand:<DWI> 1 \"register_operand\" \"0\")\n-\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"ro<di>\")))\n-   (clobber (match_scratch:<DWI> 0 \"=r\"))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (match_dup 1) (match_dup 2)))\n-   (parallel [(set (reg:CCGZ FLAGS_REG)\n-\t\t   (compare: CCGZ\n-\t\t     (match_dup 4)\n-\t\t     (plus:DWIH\n-\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n-\t\t       (match_dup 5))))\n-\t      (clobber (match_dup 3))])]\n-  \"split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\")\n-\n (define_insn \"*cmp<mode>_ccno_1\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>,?m<r>\")\n@@ -6911,13 +6892,46 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*sub<mode>3_carry_ccgz\"\n+(define_insn \"sub<mode>3_carry_ccc\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extend:<DWI> (match_operand:DWIH 1 \"register_operand\" \"0\"))\n+\t  (plus:<DWI>\n+\t    (ltu:<DWI> (reg:CC FLAGS_REG) (const_int 0))\n+\t    (zero_extend:<DWI>\n+\t      (match_operand:DWIH 2 \"x86_64_sext_operand\" \"rmWe\")))))\n+   (clobber (match_scratch:DWIH 0 \"=r\"))]\n+  \"\"\n+  \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*sub<mode>3_carry_ccc_1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extend:<DWI> (match_operand:DWIH 1 \"register_operand\" \"0\"))\n+\t  (plus:<DWI>\n+\t    (ltu:<DWI> (reg:CC FLAGS_REG) (const_int 0))\n+\t    (match_operand:<DWI> 2 \"x86_64_dwzext_immediate_operand\" \"Wf\"))))\n+   (clobber (match_scratch:DWIH 0 \"=r\"))]\n+  \"\"\n+{\n+  operands[3] = simplify_subreg (<MODE>mode, operands[2], <DWI>mode, 0);\n+  return \"sbb{<imodesuffix>}\\t{%3, %0|%0, %3}\";\n+}\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; The sign flag is set from the\n+;; (compare (match_dup 1) (plus:DWIH (ltu:DWIH ...) (match_dup 2)))\n+;; result, the overflow flag likewise, but the overflow flag is also\n+;; set if the (plus:DWIH (ltu:DWIH ...) (match_dup 2)) overflows.\n+(define_insn \"sub<mode>3_carry_ccgz\"\n   [(set (reg:CCGZ FLAGS_REG)\n-\t(compare:CCGZ\n-\t  (match_operand:DWIH 1 \"register_operand\" \"0\")\n-\t  (plus:DWIH\n-\t    (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n-\t    (match_operand:DWIH 2 \"x86_64_general_operand\" \"rme\"))))\n+\t(unspec:CCGZ [(match_operand:DWIH 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:DWIH 2 \"x86_64_general_operand\" \"rme\")\n+\t\t      (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))]\n+\t\t     UNSPEC_SBB))\n    (clobber (match_scratch:DWIH 0 \"=r\"))]\n   \"\"\n   \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\""}, {"sha": "c46dd5c83e324e110d9d7867e1a79814351e54f4", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6cc4e2932003063c2b56021f4b31bdeb5f746/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=47a6cc4e2932003063c2b56021f4b31bdeb5f746", "patch": "@@ -366,6 +366,31 @@\n     }\n })\n \n+;; Return true if VALUE is a constant integer whose value is\n+;; x86_64_immediate_operand value zero extended from word mode to mode.\n+(define_predicate \"x86_64_dwzext_immediate_operand\"\n+  (match_code \"const_int,const_wide_int\")\n+{\n+  switch (GET_CODE (op))\n+    {\n+    case CONST_INT:\n+      if (!TARGET_64BIT)\n+\treturn UINTVAL (op) <= HOST_WIDE_INT_UC (0xffffffff);\n+      return UINTVAL (op) <= HOST_WIDE_INT_UC (0x7fffffff);\n+\n+    case CONST_WIDE_INT:\n+      if (!TARGET_64BIT)\n+\treturn false;\n+      return (CONST_WIDE_INT_NUNITS (op) == 2\n+\t      && CONST_WIDE_INT_ELT (op, 1) == 0\n+\t      && (trunc_int_for_mode (CONST_WIDE_INT_ELT (op, 0), SImode)\n+\t\t  == (HOST_WIDE_INT) CONST_WIDE_INT_ELT (op, 0)));\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+})\n+\n ;; Return true if size of VALUE can be stored in a sign\n ;; extended immediate field.\n (define_predicate \"x86_64_immediate_size_operand\""}]}