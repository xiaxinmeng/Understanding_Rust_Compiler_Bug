{"sha": "875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "node_id": "C_kwDOANBUbNoAKDg3NWU0OTNiZjVlYjA0YzExYmMzODQ2YTZiZmVlNDdhNmYxODNlM2Y", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-16T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-16T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "cdb838f26b4cf0d80534e9d59a3d214ff7fcbd3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdb838f26b4cf0d80534e9d59a3d214ff7fcbd3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/comments", "author": null, "committer": null, "parents": [{"sha": "3d8d8e34f796fefda53be9a6cec7c6c950856a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8d8e34f796fefda53be9a6cec7c6c950856a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8d8e34f796fefda53be9a6cec7c6c950856a14"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "f3de0c15902cf6e7fd5707f2dbdadce44827a442", "filename": "gcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,85 @@\n+2022-02-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/104526\n+\t* gimple-range-fold.cc (fold_using_range::range_of_cond_expr): Call\n+\tnew routine.\n+\t* gimple-range-gori.cc (range_def_chain::get_def_chain): Force a build\n+\tof dependency chain if there isn't one.\n+\t(gori_compute::condexpr_adjust): New.\n+\t* gimple-range-gori.h (class gori_compute): New prototype.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/100874\n+\t* config/aarch64/aarch64-protos.h (aarch64_maxmin_plus_const):\n+\tDeclare.\n+\t* config/aarch64/aarch64.cc (aarch64_maxmin_plus_const): New function.\n+\t* config/aarch64/aarch64.md (*aarch64_minmax_plus): New pattern.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_scalar_ops_slice): New struct.\n+\t(vect_scalar_ops_slice_hash): Likewise.\n+\t(vect_scalar_ops_slice::op): New function.\n+\t* tree-vect-slp.cc (vect_scalar_ops_slice::all_same_p): New function.\n+\t(vect_scalar_ops_slice_hash::hash): Likewise.\n+\t(vect_scalar_ops_slice_hash::equal): Likewise.\n+\t(vect_prologue_cost_for_slp): Check for duplicate vectors.\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_vector_costs::m_stp_sequence_cost): New member variable.\n+\t(aarch64_aligned_constant_offset_p): New function.\n+\t(aarch64_stp_sequence_cost): Likewise.\n+\t(aarch64_vector_costs::add_stmt_cost): Handle new STP heuristic.\n+\t(aarch64_vector_costs::finish_cost): Likewise.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.cc (vect_bb_vectorization_profitable_p): Fix\n+\tuse after free.\n+\n+2022-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104543\n+\t* gimple-loop-jam.cc (unroll_jam_possible_p): Check outer loop exits\n+\tcome after the inner loop.\n+\n+2022-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104536\n+\t* config/i386/host-cygwin.cc (cygwin_gt_pch_get_address): Use\n+\tcannot instead of can%'t in diagnostics.  Formatting fixes.\n+\n+2022-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/104522\n+\t* fold-const.h (native_interpret_real): Declare.\n+\t* fold-const.cc (native_interpret_real): No longer static.  Don't\n+\tperform MODE_COMPOSITE_P verification here.\n+\t(native_interpret_expr) <case REAL_TYPE>: But perform it here instead\n+\tfor all modes.\n+\t* gimple-fold.cc (clear_padding_type): Call native_interpret_real\n+\tinstead of native_interpret_expr.\n+\t* simplify-rtx.cc (simplify_immed_subreg): Perform the native_encode_rtx\n+\tand comparison verification for all FLOAT_MODE_P modes, not just\n+\tMODE_COMPOSITE_P.\n+\n+2022-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104519\n+\t* fold-const.cc (multiple_of_p): Remove never true condition.\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_ne): Use\n+\tthe appropriate types for determining whether the difference\n+\tof final and base is a multiple of the step.\n+\n+2022-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/104517\n+\t* omp-low.cc (task_cpyfns): New variable.\n+\t(delete_omp_context): Don't call finalize_task_copyfn from here.\n+\t(create_task_copyfn): Push task_stmt into task_cpyfns.\n+\t(execute_lower_omp): Call finalize_task_copyfn here on entries from\n+\ttask_cpyfns vector and release the vector.\n+\n 2022-02-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/104355"}, {"sha": "07f9f515ad857932b5a1eed16304c768bfc6f054", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1 +1 @@\n-20220215\n+20220216"}, {"sha": "cab2746569b9bf7b703195ed743e3403aba12767", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,22 @@\n+2022-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104524\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_sub_svalue): Only call\n+\tget_or_create_cast if type is non-NULL.\n+\n+2022-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102692\n+\t* exploded-graph.h (impl_region_model_context::get_stmt): New.\n+\t* region-model.cc: Include \"gimple-ssa.h\", \"tree-phinodes.h\",\n+\t\"tree-ssa-operands.h\", and \"ssa-iterators.h\".\n+\t(within_short_circuited_stmt_p): New.\n+\t(region_model::check_for_poison): Don't warn about uninit values\n+\tif within_short_circuited_stmt_p.\n+\t* region-model.h (region_model_context::get_stmt): New vfunc.\n+\t(noop_region_model_context::get_stmt): New.\n+\n 2022-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104274"}, {"sha": "90d4a7922b9da9842337e9fb3444fe637fe1acec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,13 @@\n+2022-02-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104107\n+\tPR c++/95036\n+\t* pt.cc (coerce_template_template_parms): Take full parms.\n+\tAvoid adding too much of outer_args.\n+\t(coerce_template_template_parm): Adjust.\n+\t(template_template_parm_bindings_ok_p): Adjust.\n+\t(convert_template_argument): Adjust.\n+\n 2022-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/104513"}, {"sha": "4a1371b95bcc2f44721eddd7d0cbfc99f9f91171", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,13 @@\n+2022-02-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_depobj): Fix to alloc/ptr dummy\n+\tand for c_ptr.\n+\n+2022-02-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):\n+\tDepend on the proper addr, for ptr/alloc depend on pointee.\n+\n 2022-02-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104211"}, {"sha": "5230f00c7179489cc596507f04d33f1661a069ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,108 @@\n+2022-02-15  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/htm-1.c: Retry intermittent failing tbegins.\n+\n+2022-02-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/104526\n+\t* gcc.dg/pr104526.c: New.\n+\n+2022-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104524\n+\t* gcc.dg/analyzer/pr104524.c: New test.\n+\n+2022-02-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102692\n+\t* gcc.dg/analyzer/pr102692-2.c: New test.\n+\t* gcc.dg/analyzer/pr102692.c: Remove xfail.  Remove -O2 from\n+\toptions and move to...\n+\t* gcc.dg/analyzer/torture/pr102692.c: ...here.\n+\n+2022-02-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/depend-4.f90: Add VALUE test, update scan test.\n+\t* gfortran.dg/gomp/depend-5.f90: Fix scan tree for -m32.\n+\t* gfortran.dg/gomp/depend-6.f90: New test.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/max_plus_1.c: New test.\n+\t* gcc.target/aarch64/max_plus_2.c: Likewise.\n+\t* gcc.target/aarch64/max_plus_3.c: Likewise.\n+\t* gcc.target/aarch64/max_plus_4.c: Likewise.\n+\t* gcc.target/aarch64/max_plus_5.c: Likewise.\n+\t* gcc.target/aarch64/max_plus_6.c: Likewise.\n+\t* gcc.target/aarch64/max_plus_7.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_1.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_2.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_3.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_4.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_5.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_6.c: Likewise.\n+\t* gcc.target/aarch64/min_plus_7.c: Likewise.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/store_v2vec_lanes.c: Add -fno-tree-vectorize.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/shl-combine-2.c: New test.\n+\t* gcc.target/aarch64/shl-combine-3.c: Likewise.\n+\t* gcc.target/aarch64/shl-combine-4.c: Likewise.\n+\t* gcc.target/aarch64/shl-combine-5.c: Likewise.\n+\t* gcc.target/aarch64/xtn-combine-1.c: Likewise.\n+\t* gcc.target/aarch64/xtn-combine-2.c: Likewise.\n+\t* gcc.target/aarch64/xtn-combine-3.c: Likewise.\n+\t* gcc.target/aarch64/xtn-combine-4.c: Likewise.\n+\t* gcc.target/aarch64/xtn-combine-5.c: Likewise.\n+\t* gcc.target/aarch64/xtn-combine-6.c: Likewise.\n+\n+2022-02-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/ldp_stp_5.c: Require -mstrict-align.\n+\t* gcc.target/aarch64/ldp_stp_14.h,\n+\t* gcc.target/aarch64/ldp_stp_14.c: New test.\n+\t* gcc.target/aarch64/ldp_stp_15.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_16.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_17.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_18.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_19.c: Likewise.\n+\n+2022-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104543\n+\t* gcc.dg/torture/pr104543.c: New testcase.\n+\n+2022-02-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/depend-4.f90: New test.\n+\t* gfortran.dg/gomp/depend-5.f90: New test.\n+\n+2022-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/104522\n+\t* gcc.dg/pr104522.c: New test.\n+\n+2022-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104519\n+\t* gcc.dg/torture/pr104519.c: New testcase.\n+\n+2022-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/104517\n+\t* gcc.dg/gomp/pr104517.c: New test.\n+\n+2022-02-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104107\n+\tPR c++/95036\n+\t* g++.dg/cpp0x/alias-decl-ttp2.C: New test.\n+\t* g++.dg/cpp1z/ttp2.C: New test.\n+\n 2022-02-14  Michael Meissner  <meissner@the-meissners.org>\n \n \tPR target/104253"}, {"sha": "eaeaf57475175bd8b905576e87e5307f7f6b9776", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,7 @@\n+2022-02-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/depend-4.f90: New test.\n+\n 2022-02-10  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR c++/102204"}, {"sha": "ef98eaf18202cc0edeaf5eb19e612f5c07ea0306", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,8 @@\n+2022-02-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sanitizer_common/sanitizer_linux_libcdep.cpp: Cherry-pick\n+\tllvm-project revision ef14b78d9a144ba81ba02083fe21eb286a88732b.\n+\n 2022-02-03  David Seifert  <soap@gentoo.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "9c159c835fb26e3d3954009f88b1ed4dfbce6bdc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875e493bf5eb04c11bc3846a6bfee47a6f183e3f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=875e493bf5eb04c11bc3846a6bfee47a6f183e3f", "patch": "@@ -1,3 +1,11 @@\n+2022-02-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104542\n+\t* include/bits/uses_allocator_args.h (make_obj_using_allocator)\n+\t(uninitialized_construct_using_allocator): Add constexpr.\n+\t* testsuite/20_util/uses_allocator/make_obj.cc: Check constexpr.\n+\t* testsuite/20_util/uses_allocator/uninitialized_construct.cc: New test.\n+\n 2022-02-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/100912"}]}