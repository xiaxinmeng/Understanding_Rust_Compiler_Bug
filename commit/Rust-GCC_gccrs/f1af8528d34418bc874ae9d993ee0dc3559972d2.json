{"sha": "f1af8528d34418bc874ae9d993ee0dc3559972d2", "node_id": "C_kwDOANBUbNoAKGYxYWY4NTI4ZDM0NDE4YmM4NzRhZTlkOTkzZWUwZGMzNTU5OTcyZDI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-24T10:50:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-24T12:15:04Z"}, "message": "tree-optimization/102131 - fix niter analysis wrt overflow\n\nThis fixes the overflow issues seen with analyzing\nBASE0 + STEP0 cmp BASE1 + STEP1 as BASE0 + STEP0 - STEP1 cmp BASE1\nby following the logic we have when simplifying comparisons.\n\n2022-01-24  Richard Biener  <rguenther@suse.de>\n\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR tree-optimization/100740\n\tPR tree-optimization/101508\n\tPR tree-optimization/101972\n\tPR tree-optimization/102131\n\t* tree-ssa-loop-niter.cc (number_of_iterations_cond): Properly\n\tconstrain BASE0 + STEP0 cmp BASE1 + STEP1 to\n\tBASE0 + STEP0 - STEP1 cmp BASE1 transform.\n\n\t* gcc.dg/torture/pr100740.c: New testcase.\n\t* gcc.dg/torture/pr101508.c: Likewise.\n\t* gcc.dg/torture/pr101972.c: Likewise.\n\t* gcc.dg/torture/pr102131-1.c: Likewise.\n\t* gcc.dg/torture/pr102131-2.c: Likewise.\n\t* gcc.dg/torture/pr102131-3.c: Likewise.\n\t* gcc.dg/torture/pr102131-4.c: Likewise.", "tree": {"sha": "eb630f44b977759455a3e27d6a6d31b4fb9ab3ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb630f44b977759455a3e27d6a6d31b4fb9ab3ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1af8528d34418bc874ae9d993ee0dc3559972d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1af8528d34418bc874ae9d993ee0dc3559972d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1af8528d34418bc874ae9d993ee0dc3559972d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1af8528d34418bc874ae9d993ee0dc3559972d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2755037e40aa3549b38f6d080108e26fb5cb677b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2755037e40aa3549b38f6d080108e26fb5cb677b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2755037e40aa3549b38f6d080108e26fb5cb677b"}], "stats": {"total": 153, "additions": 143, "deletions": 10}, "files": [{"sha": "a85855ebe185b91693132487c845cd20573e072b", "filename": "gcc/testsuite/gcc.dg/torture/pr100740.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100740.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100740.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100740.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+\n+unsigned a, b;\n+int main()\n+{\n+  unsigned c = 0;\n+  for (a = 0; a < 2; a++)\n+    for (b = 0; b < 2; b++)\n+      if (++c < a)\n+\t__builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e1cb2645a3113649079e8b8dd6d58c5fb0a870d8", "filename": "gcc/testsuite/gcc.dg/torture/pr101508.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101508.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+\n+int\n+main ()\n+{\n+  unsigned i;\n+  for (i = 0; i < 3; ++i)\n+    {\n+      if (i > i * 2)\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "3adb4828ea558d87758a38c54cba23ad8204f79e", "filename": "gcc/testsuite/gcc.dg/torture/pr101972.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101972.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101972.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101972.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run  } */\n+/* { dg-require-effective-target int32plus } */\n+\n+int a, b, c, d, f;\n+static short e = 63891;\n+char g = 30;\n+unsigned h(int i, int j) { return i << j; }\n+int *l(int *);\n+void m()\n+{\n+  a = 0;\n+  for (; a >= 0; a--)\n+    {\n+      int *k = &b;\n+      *k = e < 0;\n+    }\n+  c = b;\n+  l(&c);\n+}\n+int *l(int *i)\n+{\n+  d = 2;\n+  for (; d <= 6; d++)\n+    {\n+      if (h(d, *i) <= d)\n+\t;\n+      else\n+\tcontinue;\n+      g = 0;\n+      return &f;\n+    }\n+  return (void *)0;\n+}\n+int main()\n+{\n+  m();\n+  if (g != 30)\n+    __builtin_abort ();\n+}"}, {"sha": "5ff576d8634613ffecb16446a191ca49586d63d8", "filename": "gcc/testsuite/gcc.dg/torture/pr102131-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-1.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+\n+int a;\n+int main()\n+{\n+  unsigned b = 0;\n+  int c = 1;\n+  for (; b < 3; b++)\n+    {\n+      while (c < b)\n+\t__builtin_abort ();\n+      for (a = 0; a < 3; a++)\n+\tc++;\n+    }\n+  return 0;\n+}"}, {"sha": "830c72c23d94f54f1f33b604125cd4716d118a24", "filename": "gcc/testsuite/gcc.dg/torture/pr102131-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-2.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+\n+int a;\n+int main()\n+{\n+  unsigned b = 0;\n+  int c = 1;\n+  for (;b < 3; b++)\n+    {\n+      if (c < b)\n+\t__builtin_abort ();\n+      c+=3;\n+    }\n+  return 0;\n+}"}, {"sha": "aed10c973e60e2e0ea79b06f4ce2c82f034f25b2", "filename": "gcc/testsuite/gcc.dg/torture/pr102131-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-3.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+int a;\n+int main()\n+{\n+  unsigned b = 0;\n+  for (a = 2; a < 8; a += 2)\n+    if (++b > a)\n+      __builtin_abort();\n+  return 0;\n+}"}, {"sha": "c63c08b2137f8510fdb07b1a074b2c75e6127fbf", "filename": "gcc/testsuite/gcc.dg/torture/pr102131-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102131-4.c?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+unsigned a;\n+int main()\n+{\n+  unsigned b = 1;\n+  for (; b < 4; b++) {\n+      a = (a ^ 2000000000) * -b;\n+      if (b > a)\n+\t__builtin_abort ();\n+      a = 3000000000;\n+  }\n+  return 0;\n+}"}, {"sha": "04c209561d85dd495c0b002fcf0aeff279806389", "filename": "gcc/tree-ssa-loop-niter.cc", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftree-ssa-loop-niter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1af8528d34418bc874ae9d993ee0dc3559972d2/gcc%2Ftree-ssa-loop-niter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.cc?ref=f1af8528d34418bc874ae9d993ee0dc3559972d2", "patch": "@@ -1894,7 +1894,8 @@ number_of_iterations_cond (class loop *loop,\n      provided that either below condition is satisfied:\n \n        a) the test is NE_EXPR;\n-       b) iv0.step - iv1.step is integer and iv0/iv1 don't overflow.\n+       b) iv0 and iv1 do not overflow and iv0.step - iv1.step is of\n+\t  the same sign and of less or equal magnitude than iv0.step\n \n      This rarely occurs in practice, but it is simple enough to manage.  */\n   if (!integer_zerop (iv0->step) && !integer_zerop (iv1->step))\n@@ -1903,17 +1904,28 @@ number_of_iterations_cond (class loop *loop,\n       tree step = fold_binary_to_constant (MINUS_EXPR, step_type,\n \t\t\t\t\t   iv0->step, iv1->step);\n \n-      /* No need to check sign of the new step since below code takes care\n-\t of this well.  */\n-      if (code != NE_EXPR\n-\t  && (TREE_CODE (step) != INTEGER_CST\n-\t      || !iv0->no_overflow || !iv1->no_overflow))\n-\treturn false;\n+      /* For code other than NE_EXPR we have to ensure moving the evolution\n+\t of IV1 to that of IV0 does not introduce overflow.  */\n+      if (TREE_CODE (step) != INTEGER_CST\n+\t  || !iv0->no_overflow || !iv1->no_overflow)\n+\t{\n+\t  if (code != NE_EXPR)\n+\t    return false;\n+\t  iv0->no_overflow = false;\n+\t}\n+      /* If the new step of IV0 has changed sign or is of greater\n+\t magnitude then we do not know whether IV0 does overflow\n+\t and thus the transform is not valid for code other than NE_EXPR  */\n+      else if (tree_int_cst_sign_bit (step) != tree_int_cst_sign_bit (iv0->step)\n+\t       || wi::gtu_p (wi::abs (wi::to_widest (step)),\n+\t\t\t     wi::abs (wi::to_widest (iv0->step))))\n+\t{\n+\t  if (code != NE_EXPR)\n+\t    return false;\n+\t  iv0->no_overflow = false;\n+\t}\n \n       iv0->step = step;\n-      if (!POINTER_TYPE_P (type))\n-\tiv0->no_overflow = false;\n-\n       iv1->step = build_int_cst (step_type, 0);\n       iv1->no_overflow = true;\n     }"}]}