{"sha": "7e0b4eaea174caaaae3a50074623b58d1cdfe410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UwYjRlYWVhMTc0Y2FhYWFlM2E1MDA3NDYyM2I1OGQxY2RmZTQxMA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2007-07-23T16:43:24Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2007-07-23T16:43:24Z"}, "message": "PR middle-end/PR28690\n\n\tPR middle-end/PR28690\n\t* optabs.c (expand_binop): (emit_cmp_and_jump_insns): Allow EQ compares.\n\t* rtlanal.c (commutative_operand_precedence): Prefer both REG_POINTER\n\tand MEM_POINTER operands over REG and MEM operands.\n\t(swap_commutative_operands_p): Change return value to bool.\n\t* rtl.h: Update the corresponding prototype.\n\t* tree-ssa-address.c (gen_addr_rtx): Use simplify_gen_binary\n\tinstead of gen_rtx_PLUS.\n\t* simplify-rtx.c (simplify_plus_minus_op_data_cmp): Change return\n\tvalue to bool.  Change function arguments to rtx's and update code\n\tto match.\n\t(simplify_plus_minus): Update the simplify_plus_minus_op_data_cmp\n\tcalls to match the new declaration.\n\t* simplify-rtx.c (simplify_associative_operation): Don't\n\treorder simplify_binary_operation arguments.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r126852", "tree": {"sha": "ff49113424954fc128f22d29310fdf6c0c984bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff49113424954fc128f22d29310fdf6c0c984bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e0b4eaea174caaaae3a50074623b58d1cdfe410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0b4eaea174caaaae3a50074623b58d1cdfe410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0b4eaea174caaaae3a50074623b58d1cdfe410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0b4eaea174caaaae3a50074623b58d1cdfe410/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de2b3a07713724618330b6bde404a32d0af811c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2b3a07713724618330b6bde404a32d0af811c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2b3a07713724618330b6bde404a32d0af811c0"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "a40140f7a2e9258c5c5e89dc7b03d6d3b9e44c34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e0b4eaea174caaaae3a50074623b58d1cdfe410", "patch": "@@ -1,3 +1,22 @@\n+2007-07-23  Peter Bergner  <bergner@vnet.ibm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/PR28690\n+\t* optabs.c (expand_binop): (emit_cmp_and_jump_insns): Allow EQ compares.\n+\t* rtlanal.c (commutative_operand_precedence): Prefer both REG_POINTER\n+\tand MEM_POINTER operands over REG and MEM operands.\n+\t(swap_commutative_operands_p): Change return value to bool.\n+\t* rtl.h: Update the corresponding prototype.\n+\t* tree-ssa-address.c (gen_addr_rtx): Use simplify_gen_binary\n+\tinstead of gen_rtx_PLUS.\n+\t* simplify-rtx.c (simplify_plus_minus_op_data_cmp): Change return\n+\tvalue to bool.  Change function arguments to rtx's and update code\n+\tto match.\n+\t(simplify_plus_minus): Update the simplify_plus_minus_op_data_cmp\n+\tcalls to match the new declaration.\n+\t* simplify-rtx.c (simplify_associative_operation): Don't\n+\treorder simplify_binary_operation arguments.\n+\n 2007-07-23  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.c (override_options): Use mips_costs to derive"}, {"sha": "b65d6002f2b75d4ce8db7b05506e1760055c0306", "filename": "gcc/optabs.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7e0b4eaea174caaaae3a50074623b58d1cdfe410", "patch": "@@ -4070,9 +4070,11 @@ emit_cmp_and_jump_insns (rtx x, rtx y, enum rtx_code comparison, rtx size,\n   /* Swap operands and condition to ensure canonical RTL.  */\n   if (swap_commutative_operands_p (x, y))\n     {\n-      /* If we're not emitting a branch, this means some caller\n-         is out of sync.  */\n-      gcc_assert (label);\n+      /* If we're not emitting a branch, callers are required to pass\n+\t operands in an order conforming to canonical RTL.  We relax this\n+\t for commutative comparsions so callers using EQ don't need to do\n+\t swapping by hand.  */\n+      gcc_assert (label || (comparison == swap_condition (comparison)));\n \n       op0 = y, op1 = x;\n       comparison = swap_condition (comparison);"}, {"sha": "b658ff0d6aeea22b87558913e4c9648b242db240", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7e0b4eaea174caaaae3a50074623b58d1cdfe410", "patch": "@@ -1690,7 +1690,7 @@ extern int reg_referenced_p (rtx, rtx);\n extern int reg_used_between_p (rtx, rtx, rtx);\n extern int reg_set_between_p (rtx, rtx, rtx);\n extern int commutative_operand_precedence (rtx);\n-extern int swap_commutative_operands_p (rtx, rtx);\n+extern bool swap_commutative_operands_p (rtx, rtx);\n extern int modified_between_p (rtx, rtx, rtx);\n extern int no_labels_between_p (rtx, rtx);\n extern int modified_in_p (rtx, rtx);"}, {"sha": "d948a08d421aabc94d9f94e4f7a82effa91fe050", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7e0b4eaea174caaaae3a50074623b58d1cdfe410", "patch": "@@ -2877,32 +2877,34 @@ commutative_operand_precedence (rtx op)\n   \n   /* Constants always come the second operand.  Prefer \"nice\" constants.  */\n   if (code == CONST_INT)\n-    return -7;\n+    return -8;\n   if (code == CONST_DOUBLE)\n-    return -6;\n+    return -7;\n   op = avoid_constant_pool_reference (op);\n   code = GET_CODE (op);\n \n   switch (GET_RTX_CLASS (code))\n     {\n     case RTX_CONST_OBJ:\n       if (code == CONST_INT)\n-        return -5;\n+        return -6;\n       if (code == CONST_DOUBLE)\n-        return -4;\n-      return -3;\n+        return -5;\n+      return -4;\n \n     case RTX_EXTRA:\n       /* SUBREGs of objects should come second.  */\n       if (code == SUBREG && OBJECT_P (SUBREG_REG (op)))\n-        return -2;\n-\n+        return -3;\n       return 0;\n \n     case RTX_OBJ:\n       /* Complex expressions should be the first, so decrease priority\n-         of objects.  */\n-      return -1;\n+         of objects.  Prefer pointer objects over non pointer objects.  */\n+      if ((REG_P (op) && REG_POINTER (op))\n+\t  || (MEM_P (op) && MEM_POINTER (op)))\n+\treturn -1;\n+      return -2;\n \n     case RTX_COMM_ARITH:\n       /* Prefer operands that are themselves commutative to be first.\n@@ -2929,7 +2931,7 @@ commutative_operand_precedence (rtx op)\n /* Return 1 iff it is necessary to swap operands of commutative operation\n    in order to canonicalize expression.  */\n \n-int\n+bool\n swap_commutative_operands_p (rtx x, rtx y)\n {\n   return (commutative_operand_precedence (x)"}, {"sha": "40fedde9a0ba2a799f89eabbada09d5522a46c17", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=7e0b4eaea174caaaae3a50074623b58d1cdfe410", "patch": "@@ -52,7 +52,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n static rtx neg_const_int (enum machine_mode, rtx);\n static bool plus_minus_operand_p (rtx);\n-static int simplify_plus_minus_op_data_cmp (const void *, const void *);\n+static bool simplify_plus_minus_op_data_cmp (rtx, rtx);\n static rtx simplify_plus_minus (enum rtx_code, enum machine_mode, rtx, rtx);\n static rtx simplify_immed_subreg (enum machine_mode, rtx, enum machine_mode,\n \t\t\t\t  unsigned int);\n@@ -1499,16 +1499,12 @@ simplify_associative_operation (enum rtx_code code, enum machine_mode mode,\n \t}\n \n       /* Attempt to simplify \"(a op b) op c\" as \"a op (b op c)\".  */\n-      tem = swap_commutative_operands_p (XEXP (op0, 1), op1)\n-\t    ? simplify_binary_operation (code, mode, op1, XEXP (op0, 1))\n-\t    : simplify_binary_operation (code, mode, XEXP (op0, 1), op1);\n+      tem = simplify_binary_operation (code, mode, XEXP (op0, 1), op1);\n       if (tem != 0)\n         return simplify_gen_binary (code, mode, XEXP (op0, 0), tem);\n \n       /* Attempt to simplify \"(a op b) op c\" as \"(a op c) op b\".  */\n-      tem = swap_commutative_operands_p (XEXP (op0, 0), op1)\n-\t    ? simplify_binary_operation (code, mode, op1, XEXP (op0, 0))\n-\t    : simplify_binary_operation (code, mode, XEXP (op0, 0), op1);\n+      tem = simplify_binary_operation (code, mode, XEXP (op0, 0), op1);\n       if (tem != 0)\n         return simplify_gen_binary (code, mode, tem, XEXP (op0, 1));\n     }\n@@ -3313,23 +3309,21 @@ struct simplify_plus_minus_op_data\n   short neg;\n };\n \n-static int\n-simplify_plus_minus_op_data_cmp (const void *p1, const void *p2)\n+static bool\n+simplify_plus_minus_op_data_cmp (rtx x, rtx y)\n {\n-  const struct simplify_plus_minus_op_data *d1 = p1;\n-  const struct simplify_plus_minus_op_data *d2 = p2;\n   int result;\n \n-  result = (commutative_operand_precedence (d2->op)\n-\t    - commutative_operand_precedence (d1->op));\n+  result = (commutative_operand_precedence (y)\n+\t    - commutative_operand_precedence (x));\n   if (result)\n-    return result;\n+    return result > 0;\n \n   /* Group together equal REGs to do more simplification.  */\n-  if (REG_P (d1->op) && REG_P (d2->op))\n-    return REGNO (d1->op) - REGNO (d2->op);\n+  if (REG_P (x) && REG_P (y))\n+    return REGNO (x) > REGNO (y);\n   else\n-    return 0;\n+    return false;\n }\n \n static rtx\n@@ -3473,14 +3467,14 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n         {\n           struct simplify_plus_minus_op_data save;\n           j = i - 1;\n-          if (simplify_plus_minus_op_data_cmp (&ops[j], &ops[i]) < 0)\n+          if (!simplify_plus_minus_op_data_cmp (ops[j].op, ops[i].op))\n \t    continue;\n \n           canonicalized = 1;\n           save = ops[i];\n           do\n \t    ops[j + 1] = ops[j];\n-          while (j-- && simplify_plus_minus_op_data_cmp (&ops[j], &save) > 0);\n+          while (j-- && simplify_plus_minus_op_data_cmp (ops[j].op, save.op));\n           ops[j + 1] = save;\n         }\n "}, {"sha": "b81135b636a0c92c2152513a7e307d8462279445", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0b4eaea174caaaae3a50074623b58d1cdfe410/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=7e0b4eaea174caaaae3a50074623b58d1cdfe410", "patch": "@@ -125,7 +125,7 @@ gen_addr_rtx (rtx symbol, rtx base, rtx index, rtx step, rtx offset,\n   if (base)\n     {\n       if (*addr)\n-\t*addr = gen_rtx_PLUS (Pmode, *addr, base);\n+\t*addr = simplify_gen_binary (PLUS, Pmode, base, *addr);\n       else\n \t*addr = base;\n     }"}]}