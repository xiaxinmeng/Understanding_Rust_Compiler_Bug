{"sha": "2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkMDIwNDM5YWQ2M2FhNzgzMzNjZjBlNjZmNmI4Y2EwYjYzNjg1Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-04-12T18:07:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-12T18:07:06Z"}, "message": "configure.in: Check for wchar.h, mbstowcs, and wcswidth.\n\n        * configure.in: Check for wchar.h, mbstowcs, and wcswidth.\n        * configure, config.in: Regenerate.\n        * intl.c (gcc_gettext_width): New function.\n        * intl.h: Prototype it.\ncp:\n        * call.c (print_z_candidates): Use gcc_gettext_width, not\n        strlen, to determine how much padding to use.\n\nFrom-SVN: r65517", "tree": {"sha": "5dc781e893303cba5531a0313f6b03e3fbcd2c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc781e893303cba5531a0313f6b03e3fbcd2c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/comments", "author": null, "committer": null, "parents": [{"sha": "48ed72a399f21ba568bb51bdc70829cbace8ebff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ed72a399f21ba568bb51bdc70829cbace8ebff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ed72a399f21ba568bb51bdc70829cbace8ebff"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "ee654718d632278a89878db288c6e15a0cfa9a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -1,3 +1,10 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* configure.in: Check for wchar.h, mbstowcs, and wcswidth.\n+\t* configure, config.in: Regenerate.\n+\t* intl.c (gcc_gettext_width): New function.\n+\t* intl.h: Prototype it.\n+\n 2003-04-12  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.h (TARGET_SWITCHES): Fix -mnominmax option;\n@@ -52,7 +59,7 @@\n \t* configure: Regenerate.\n \t* config.in: Regenerate.\n \t* config/alpha/t-crtfm: Use -frandom-seed.\n-\t\n+\n \t* doc/extend.texi (Empty Structures): New.\n \n \t* c-pch.c: Include flags.h.  Add comments to routines."}, {"sha": "ba0366fd3d9e73e6dbd813b34c650a6bb10a7e66", "filename": "gcc/config.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -162,6 +162,9 @@\n /* Define if you have the lstat function.  */\n #undef HAVE_LSTAT\n \n+/* Define if you have the mbstowcs function.  */\n+#undef HAVE_MBSTOWCS\n+\n /* Define if you have the mempcpy function.  */\n #undef HAVE_MEMPCPY\n \n@@ -216,6 +219,9 @@\n /* Define if you have the tsearch function.  */\n #undef HAVE_TSEARCH\n \n+/* Define if you have the wcswidth function.  */\n+#undef HAVE_WCSWIDTH\n+\n /* Define if you have the <argz.h> header file.  */\n #undef HAVE_ARGZ_H\n \n@@ -279,6 +285,9 @@\n /* Define if you have the <unistd.h> header file.  */\n #undef HAVE_UNISTD_H\n \n+/* Define if you have the <wchar.h> header file.  */\n+#undef HAVE_WCHAR_H\n+\n /* Define to enable the use of a default linker. */\n #undef DEFAULT_LINKER\n "}, {"sha": "d92e7c85ce271f1c7a221e56ed3444528ce707ef", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -2434,7 +2434,7 @@ fi\n \n \n # Find some useful tools\n-for ac_prog in gawk mawk nawk awk\n+for ac_prog in mawk gawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -3102,7 +3102,7 @@ fi\n for ac_hdr in limits.h stddef.h string.h strings.h stdlib.h time.h \\\n \t\t fcntl.h unistd.h sys/file.h sys/time.h \\\n \t\t sys/resource.h sys/param.h sys/times.h sys/stat.h \\\n-\t\t direct.h malloc.h langinfo.h ldfcn.h\n+\t\t direct.h malloc.h langinfo.h ldfcn.h wchar.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -3714,7 +3714,7 @@ fi\n for ac_func in times clock dup2 kill getrlimit setrlimit atoll atoq \\\n \tsysconf strsignal putc_unlocked fputc_unlocked fputs_unlocked \\\n \tfwrite_unlocked fprintf_unlocked getrusage nl_langinfo lstat \\\n-        scandir alphasort gettimeofday\n+        scandir alphasort gettimeofday mbstowcs wcswidth\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:3721: checking for $ac_func\" >&5"}, {"sha": "c6bd27350479ffbe300cecff7b1870a69641057e", "filename": "gcc/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -688,7 +688,7 @@ AC_HEADER_SYS_WAIT\n AC_CHECK_HEADERS(limits.h stddef.h string.h strings.h stdlib.h time.h \\\n \t\t fcntl.h unistd.h sys/file.h sys/time.h \\\n \t\t sys/resource.h sys/param.h sys/times.h sys/stat.h \\\n-\t\t direct.h malloc.h langinfo.h ldfcn.h)\n+\t\t direct.h malloc.h langinfo.h ldfcn.h wchar.h)\n \n # Check for thread headers.\n AC_CHECK_HEADER(thread.h, [have_thread_h=yes], [have_thread_h=])\n@@ -787,7 +787,7 @@ dnl gcc_AC_C_ENUM_BF_UNSIGNED\n AC_CHECK_FUNCS(times clock dup2 kill getrlimit setrlimit atoll atoq \\\n \tsysconf strsignal putc_unlocked fputc_unlocked fputs_unlocked \\\n \tfwrite_unlocked fprintf_unlocked getrusage nl_langinfo lstat \\\n-        scandir alphasort gettimeofday)\n+        scandir alphasort gettimeofday mbstowcs wcswidth)\n \n AC_CHECK_TYPE(ssize_t, int)\n "}, {"sha": "1b13649d13196b9c343030b6d910abb22e407ff3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -1,3 +1,8 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* call.c (print_z_candidates): Use gcc_gettext_width, not\n+\tstrlen, to determine how much padding to use.\n+\n 2003-04-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* decl.c: Update all calls to shadow_warning."}, {"sha": "d70b1a1c0c571794ba9032009525fae701514d96", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -2508,9 +2508,9 @@ print_z_candidates (struct z_candidate *candidates)\n   print_z_candidate (str, candidates);\n   if (candidates->next)\n     {\n-      /* Indent successive candidates by the length of the translation of\n-\t the above string.  */\n-      size_t len = strlen (str) + 1;\n+      /* Indent successive candidates by the width of the translation\n+\t of the above string.  */\n+      size_t len = gcc_gettext_width (str) + 1;\n       char *spaces = alloca (len);\n       memset (spaces, ' ', len-1);\n       spaces[len] = '\\0';"}, {"sha": "5a885bfec5d398f854be147190bf735b6cb18310", "filename": "gcc/intl.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fintl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fintl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.c?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -45,4 +45,35 @@ gcc_init_libintl ()\n   (void) textdomain (\"gcc\");\n }\n \n+#if defined HAVE_WCHAR_H && defined HAVE_MBSTOWCS && defined HAVE_WCSWIDTH\n+#include <wchar.h>\n+\n+/* Returns the width in columns of MSGSTR, which came from gettext.\n+   This is for indenting subsequent output.  */\n+\n+size_t\n+gcc_gettext_width (msgstr)\n+     const char *msgstr;\n+{\n+  size_t nwcs = mbstowcs (0, msgstr, 0);\n+  wchar_t *wmsgstr = alloca ((nwcs + 1) * sizeof (wchar_t));\n+\n+  mbstowcs (wmsgstr, msgstr, nwcs + 1);\n+  return wcswidth (wmsgstr, nwcs);\n+}\n+\n+#else  /* no wcswidth */\n+\n+/* We don't have any way of knowing how wide the string is.  Guess\n+   the length of the string.  */\n+\n+size_t\n+gcc_gettext_width (msgstr)\n+     const char *msgstr;\n+{\n+  return strlen (msgstr);\n+}\n+\n #endif\n+\n+#endif /* ENABLE_NLS */"}, {"sha": "57d44a80b2199c68307c00b062c68a7f3105fc25", "filename": "gcc/intl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fintl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bd020439ad63aa78333cf0e66f6b8ca0b63685c/gcc%2Fintl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.h?ref=2bd020439ad63aa78333cf0e66f6b8ca0b63685c", "patch": "@@ -39,6 +39,7 @@\n \n #ifdef ENABLE_NLS\n extern void gcc_init_libintl PARAMS ((void));\n+extern size_t gcc_gettext_width PARAMS ((const char *));\n #else\n /* Stubs.  */\n # undef textdomain"}]}