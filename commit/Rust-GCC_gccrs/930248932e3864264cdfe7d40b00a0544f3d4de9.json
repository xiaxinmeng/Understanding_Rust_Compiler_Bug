{"sha": "930248932e3864264cdfe7d40b00a0544f3d4de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMwMjQ4OTMyZTM4NjQyNjRjZGZlN2Q0MGIwMGEwNTQ0ZjNkNGRlOQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-05-28T19:26:08Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-05-28T19:26:08Z"}, "message": "[multiple changes]\n\nFri May 28 18:22:45 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n        * parse.y (lookup_field_wrapper): Unified returned value to NULL\n          or the searched field decl.\nFri May 28 11:34:05 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n        * parse.y (fold_constant_for_init): Convert numerical constant\n        values to the type of the assigned field.\nThu May 27 19:57:40 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n        * expr.c (lookup_field): Relaxed the test on class loading error\n        detection.\n        * parse.y (fold_constant_for_init): Enabeled old code.\nWed May 26 18:06:02 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n        * parse.y (valid_ref_assignconv_cast_p): Let `_Jv_CheckCast'\n        decide the validity of the cast of a java.lang.Cloneable reference\n        to an array.\n        (patch_conditional_expr): Fixed first argument passed to\n        binary_numeric_promotion.\n\nFrom-SVN: r27229", "tree": {"sha": "6e83ec300251b7f8543755d3a5cf328700d28684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e83ec300251b7f8543755d3a5cf328700d28684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/930248932e3864264cdfe7d40b00a0544f3d4de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930248932e3864264cdfe7d40b00a0544f3d4de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930248932e3864264cdfe7d40b00a0544f3d4de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930248932e3864264cdfe7d40b00a0544f3d4de9/comments", "author": null, "committer": null, "parents": [{"sha": "04b1e34d64fd6493fcec4ccb32345a8254f56f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b1e34d64fd6493fcec4ccb32345a8254f56f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b1e34d64fd6493fcec4ccb32345a8254f56f8d"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "35e7d99f966c4999db8fdc2b198bd8b4d6d2cc8f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=930248932e3864264cdfe7d40b00a0544f3d4de9", "patch": "@@ -1,3 +1,27 @@\n+Fri May 28 18:22:45 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+        * parse.y (lookup_field_wrapper): Unified returned value to NULL\n+          or the searched field decl.\n+\t\n+Fri May 28 11:34:05 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (fold_constant_for_init): Convert numerical constant\n+ \tvalues to the type of the assigned field.\n+\n+Thu May 27 19:57:40 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* expr.c (lookup_field): Relaxed the test on class loading error\n+ \tdetection.\n+\t* parse.y (fold_constant_for_init): Enabeled old code.\n+\n+Wed May 26 18:06:02 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (valid_ref_assignconv_cast_p): Let `_Jv_CheckCast'\n+ \tdecide the validity of the cast of a java.lang.Cloneable reference\n+ \tto an array.\n+\t(patch_conditional_expr): Fixed first argument passed to\n+ \tbinary_numeric_promotion.\n+\n Wed May 26 15:33:06 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (qualify_ambiguous_name): Take into account that a"}, {"sha": "64651f5ddc75f29a696adb6fc46e6fbf5c23d44f", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=930248932e3864264cdfe7d40b00a0544f3d4de9", "patch": "@@ -1162,7 +1162,7 @@ lookup_field (typep, name)\n   if (CLASS_P (*typep) && !CLASS_LOADED_P (*typep))\n     {\n       load_class (*typep, 1);\n-      if (TREE_CODE (TYPE_SIZE (*typep)) == ERROR_MARK)\n+      if (!TYPE_SIZE (*typep) || TREE_CODE (TYPE_SIZE (*typep)) == ERROR_MARK)\n \treturn error_mark_node;\n     }\n   do"}, {"sha": "1606859213cc8d33a7743f245b3231938b401492", "filename": "gcc/java/parse.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=930248932e3864264cdfe7d40b00a0544f3d4de9", "patch": "@@ -5666,7 +5666,7 @@ lookup_field_wrapper (class, name)\n   java_parser_context_save_global ();\n   decl = lookup_field (&type, name);\n   java_parser_context_restore_global ();\n-  return decl;\n+  return decl == error_mark_node ? NULL : decl;\n }\n \n /* Find duplicate field within the same class declarations and report\n@@ -11682,7 +11682,8 @@ valid_ref_assignconv_cast_p (source, dest, cast)\n \t    return source == dest || interface_of_p (dest, source);\n \t}\n       else\t\t\t/* Array */\n-\treturn 0;\n+\treturn (cast ? \n+\t\t(DECL_NAME (TYPE_NAME (source)) == java_lang_cloneable) : 0);\n     }\n   if (TYPE_ARRAY_P (source))\n     {\n@@ -14049,7 +14050,7 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n       /* Otherwise, binary numeric promotion is applied and the\n \t resulting type is the promoted type of operand 1 and 2 */\n       else \n-\tresulting_type = binary_numeric_promotion (t2, t2, \n+\tresulting_type = binary_numeric_promotion (t1, t2, \n \t\t\t\t\t\t   &TREE_OPERAND (node, 1), \n \t\t\t\t\t\t   &TREE_OPERAND (node, 2));\n     }\n@@ -14106,8 +14107,11 @@ fold_constant_for_init (node, context)\n   tree op0, op1, val;\n   enum tree_code code = TREE_CODE (node);\n \n-  if (code == INTEGER_CST || code == REAL_CST || code == STRING_CST)\n+  if (code == STRING_CST)\n     return node;\n+\n+  if (code == INTEGER_CST || code == REAL_CST)\n+    return convert (TREE_TYPE (context), node);\n   if (TREE_TYPE (node) != NULL_TREE && code != VAR_DECL)\n     return NULL_TREE;\n \n@@ -14202,13 +14206,11 @@ fold_constant_for_init (node, context)\n \t    }\n \t  else\n \t    {\n-#if 0\n \t      /* Wait until the USE_COMPONENT_REF re-write.  FIXME. */\n \t      qualify_ambiguous_name (node);\n \t      if (resolve_field_access (node, &decl, NULL)\n \t\t  && decl != NULL_TREE)\n \t\treturn fold_constant_for_init (decl, decl);\n-#endif\n \t      return NULL_TREE;\n \t    }\n \t}"}, {"sha": "5a5c6744bd190912a08444cff48c0e3a383bf1c6", "filename": "gcc/java/parse.y", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930248932e3864264cdfe7d40b00a0544f3d4de9/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=930248932e3864264cdfe7d40b00a0544f3d4de9", "patch": "@@ -3081,7 +3081,7 @@ lookup_field_wrapper (class, name)\n   java_parser_context_save_global ();\n   decl = lookup_field (&type, name);\n   java_parser_context_restore_global ();\n-  return decl;\n+  return decl == error_mark_node ? NULL : decl;\n }\n \n /* Find duplicate field within the same class declarations and report\n@@ -9097,7 +9097,8 @@ valid_ref_assignconv_cast_p (source, dest, cast)\n \t    return source == dest || interface_of_p (dest, source);\n \t}\n       else\t\t\t/* Array */\n-\treturn 0;\n+\treturn (cast ? \n+\t\t(DECL_NAME (TYPE_NAME (source)) == java_lang_cloneable) : 0);\n     }\n   if (TYPE_ARRAY_P (source))\n     {\n@@ -11464,7 +11465,7 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n       /* Otherwise, binary numeric promotion is applied and the\n \t resulting type is the promoted type of operand 1 and 2 */\n       else \n-\tresulting_type = binary_numeric_promotion (t2, t2, \n+\tresulting_type = binary_numeric_promotion (t1, t2, \n \t\t\t\t\t\t   &TREE_OPERAND (node, 1), \n \t\t\t\t\t\t   &TREE_OPERAND (node, 2));\n     }\n@@ -11521,8 +11522,11 @@ fold_constant_for_init (node, context)\n   tree op0, op1, val;\n   enum tree_code code = TREE_CODE (node);\n \n-  if (code == INTEGER_CST || code == REAL_CST || code == STRING_CST)\n+  if (code == STRING_CST)\n     return node;\n+\n+  if (code == INTEGER_CST || code == REAL_CST)\n+    return convert (TREE_TYPE (context), node);\n   if (TREE_TYPE (node) != NULL_TREE && code != VAR_DECL)\n     return NULL_TREE;\n \n@@ -11617,13 +11621,11 @@ fold_constant_for_init (node, context)\n \t    }\n \t  else\n \t    {\n-#if 0\n \t      /* Wait until the USE_COMPONENT_REF re-write.  FIXME. */\n \t      qualify_ambiguous_name (node);\n \t      if (resolve_field_access (node, &decl, NULL)\n \t\t  && decl != NULL_TREE)\n \t\treturn fold_constant_for_init (decl, decl);\n-#endif\n \t      return NULL_TREE;\n \t    }\n \t}"}]}