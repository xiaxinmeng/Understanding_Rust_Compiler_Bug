{"sha": "93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkNDVkOWVkYTkzNGNmOGQ5YWIzZTRlNGM4MWZjZTllZDk5NGEwNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-04-02T19:42:53Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-04-02T19:42:53Z"}, "message": "cppopts.texi (-dU): Document.\n\ngcc:\n\t* doc/cppopts.texi (-dU): Document.\n\t* c-common.h (flag_dump_macros): Update comment.\n\t* c-opts.c (handle_OPT_d): Handle -dU.\n\t* c-ppoutput.c (macro_queue, define_queue, undef_queue,\n\tdump_queued_macros, cb_used_define, cb_used_undef): New.\n\t(init_pp_output): Handle -dU.\n\t(cb_line_change): Call dump_queued_macros.\n\t* toplev.c (decode_d_option): Accept -dU as preprocessor option.\n\ngcc/testsuite:\n\t* gcc.dg/cpp/cmdlne-dU-1.c, gcc.dg/cpp/cmdlne-dU-2.c,\n\tgcc.dg/cpp/cmdlne-dU-3.c, gcc.dg/cpp/cmdlne-dU-4.c,\n\tgcc.dg/cpp/cmdlne-dU-5.c, gcc.dg/cpp/cmdlne-dU-6.c,\n\tgcc.dg/cpp/cmdlne-dU-7.c, gcc.dg/cpp/cmdlne-dU-8.c,\n\tgcc.dg/cpp/cmdlne-dU-9.c, gcc.dg/cpp/cmdlne-dU-10.c,\n\tgcc.dg/cpp/cmdlne-dU-11.c, gcc.dg/cpp/cmdlne-dU-12.c,\n\tgcc.dg/cpp/cmdlne-dU-13.c, gcc.dg/cpp/cmdlne-dU-14.c,\n\tgcc.dg/cpp/cmdlne-dU-15.c, gcc.dg/cpp/cmdlne-dU-16.c,\n\tgcc.dg/cpp/cmdlne-dU-17.c, gcc.dg/cpp/cmdlne-dU-18.c,\n\tgcc.dg/cpp/cmdlne-dU-19.c, gcc.dg/cpp/cmdlne-dU-20.c,\n\tgcc.dg/cpp/cmdlne-dU-21.c, gcc.dg/cpp/cmdlne-dU-22.c: New tests.\n\nlibcpp:\n\t* include/cpplib.h (struct cpp_callbacks): Add used_define,\n\tused_undef and before_define.\n\t(NODE_USED): Define.\n\t* directives.c (do_define, do_undef, undefine_macros, do_ifdef,\n\tdo_ifndef, cpp_pop_definition): Handle new flag and use new\n\tcallbacks.\n\t* expr.c (parse_defined): Handle new flag and use new callbacks.\n\t* macro.c (enter_macro_context, _cpp_free_definition): Handle new\n\tflag and use new callbacks.\n\nFrom-SVN: r133847", "tree": {"sha": "f70286f28df6c1a7f1cb8695448540d74ba1f396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70286f28df6c1a7f1cb8695448540d74ba1f396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b69d0e5667a210ed70b677de4778f6f50396a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b69d0e5667a210ed70b677de4778f6f50396a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b69d0e5667a210ed70b677de4778f6f50396a4"}], "stats": {"total": 366, "additions": 360, "deletions": 6}, "files": [{"sha": "e32f8846aea843e3b950b0c9740ad5486d11799d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -1,3 +1,14 @@\n+2008-04-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/cppopts.texi (-dU): Document.\n+\t* c-common.h (flag_dump_macros): Update comment.\n+\t* c-opts.c (handle_OPT_d): Handle -dU.\n+\t* c-ppoutput.c (macro_queue, define_queue, undef_queue,\n+\tdump_queued_macros, cb_used_define, cb_used_undef): New.\n+\t(init_pp_output): Handle -dU.\n+\t(cb_line_change): Call dump_queued_macros.\n+\t* toplev.c (decode_d_option): Accept -dU as preprocessor option.\n+\n 2008-04-02  Anatoly Sokolov <aesok@post.ru>\n \n \t* config/avr/predicates.md (io_address_operand): New predicate. "}, {"sha": "10933e9dd82f12f8be745a5bfb87ff71f8740993", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -358,8 +358,8 @@ extern char flag_no_line_commands;\n \n extern char flag_no_output;\n \n-/* Nonzero means dump macros in some fashion; contains the 'D', 'M' or\n-   'N' of the command line switch.  */\n+/* Nonzero means dump macros in some fashion; contains the 'D', 'M',\n+   'N' or 'U' of the command line switch.  */\n \n extern char flag_dump_macros;\n "}, {"sha": "1413b7f8036bf5b271d9ea109b0f9178a448d68e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -1668,6 +1668,7 @@ handle_OPT_d (const char *arg)\n       case 'M':\t\t\t/* Dump macros only.  */\n       case 'N':\t\t\t/* Dump names.  */\n       case 'D':\t\t\t/* Dump definitions.  */\n+      case 'U':\t\t\t/* Dump used macros.  */\n \tflag_dump_macros = c;\n \tbreak;\n "}, {"sha": "5fb41b20975f70a04f0d171f6917a704b16bbf56", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -39,13 +39,25 @@ static struct\n   bool first_time;\t\t/* pp_file_change hasn't been called yet.  */\n } print;\n \n+/* Defined and undefined macros being queued for output with -dU at\n+   the next newline.  */\n+typedef struct macro_queue\n+{\n+  struct macro_queue *next;\t/* Next macro in the list.  */\n+  char *macro;\t\t\t/* The name of the macro if not\n+\t\t\t\t   defined, the full definition if\n+\t\t\t\t   defined.  */\n+} macro_queue;\n+static macro_queue *define_queue, *undef_queue;\n+\n /* General output routines.  */\n static void scan_translation_unit (cpp_reader *);\n static void print_lines_directives_only (int, const void *, size_t);\n static void scan_translation_unit_directives_only (cpp_reader *);\n static void scan_translation_unit_trad (cpp_reader *);\n static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n+static void dump_queued_macros (cpp_reader *);\n \n static void print_line (source_location, const char *);\n static void maybe_print_line (source_location);\n@@ -55,6 +67,8 @@ static void maybe_print_line (source_location);\n static void cb_line_change (cpp_reader *, const cpp_token *, int);\n static void cb_define (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_undef (cpp_reader *, source_location, cpp_hashnode *);\n+static void cb_used_define (cpp_reader *, source_location, cpp_hashnode *);\n+static void cb_used_undef (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_include (cpp_reader *, source_location, const unsigned char *,\n \t\t\tconst char *, int, const cpp_token **);\n static void cb_ident (cpp_reader *, source_location, const cpp_string *);\n@@ -125,6 +139,13 @@ init_pp_output (FILE *out_stream)\n       cb->undef  = cb_undef;\n     }\n \n+  if (flag_dump_macros == 'U')\n+    {\n+      cb->before_define = dump_queued_macros;\n+      cb->used_define = cb_used_define;\n+      cb->used_undef = cb_used_undef;\n+    }\n+\n   /* Initialize the print structure.  Setting print.src_line to -1 here is\n      a trick to guarantee that the first token of the file will cause\n      a linemarker to be output by maybe_print_line.  */\n@@ -320,6 +341,9 @@ cb_line_change (cpp_reader *pfile, const cpp_token *token,\n {\n   source_location src_loc = token->src_loc;\n \n+  if (define_queue || undef_queue)\n+    dump_queued_macros (pfile);\n+\n   if (token->type == CPP_EOF || parsing_args)\n     return;\n \n@@ -379,6 +403,68 @@ cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n   print.src_line++;\n }\n \n+static void\n+cb_used_define (cpp_reader *pfile, source_location line ATTRIBUTE_UNUSED,\n+\t\tcpp_hashnode *node)\n+{\n+  macro_queue *q;\n+  q = XNEW (macro_queue);\n+  q->macro = xstrdup ((const char *) cpp_macro_definition (pfile, node));\n+  q->next = define_queue;\n+  define_queue = q;\n+}\n+\n+static void\n+cb_used_undef (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+\t       source_location line ATTRIBUTE_UNUSED,\n+\t       cpp_hashnode *node)\n+{\n+  macro_queue *q;\n+  q = XNEW (macro_queue);\n+  q->macro = xstrdup ((const char *) NODE_NAME (node));\n+  q->next = undef_queue;\n+  undef_queue = q;\n+}\n+\n+static void\n+dump_queued_macros (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  macro_queue *q;\n+\n+  /* End the previous line of text.  */\n+  if (print.printed)\n+    {\n+      putc ('\\n', print.outf);\n+      print.src_line++;\n+      print.printed = 0;\n+    }\n+\n+  for (q = define_queue; q;)\n+    {\n+      macro_queue *oq;\n+      fputs (\"#define \", print.outf);\n+      fputs (q->macro, print.outf);\n+      putc ('\\n', print.outf);\n+      print.src_line++;\n+      oq = q;\n+      q = q->next;\n+      free (oq->macro);\n+      free (oq);\n+    }\n+  define_queue = NULL;\n+  for (q = undef_queue; q;)\n+    {\n+      macro_queue *oq;\n+      fprintf (print.outf, \"#undef %s\\n\", q->macro);\n+      print.src_line++;\n+      oq = q;\n+      q = q->next;\n+      free (oq->macro);\n+      free (oq);\n+    }\n+  undef_queue = NULL;\n+}\n+\n static void\n cb_include (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n \t    const unsigned char *dir, const char *header, int angle_brackets,"}, {"sha": "4b02a87cb8e79c23a6d507a30bf7d847cb6635b4", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -682,6 +682,14 @@ Like @samp{D}, but emit only the macro names, not their expansions.\n @opindex dI\n Output @samp{#include} directives in addition to the result of\n preprocessing.\n+\n+@item U\n+@opindex dU\n+Like @samp{D} except that only macros that are expanded, or whose\n+definedness is tested in preprocessor directives, are output; the\n+output is delayed until the use or test of the macro; and\n+@samp{#undef} directives are also output for macros tested but\n+undefined at the time.\n @end table\n \n @item -P"}, {"sha": "1e2d40d9afeb74055eecdce84c2ed88a2264be29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -1,3 +1,17 @@\n+2008-04-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/cmdlne-dU-1.c, gcc.dg/cpp/cmdlne-dU-2.c,\n+\tgcc.dg/cpp/cmdlne-dU-3.c, gcc.dg/cpp/cmdlne-dU-4.c,\n+\tgcc.dg/cpp/cmdlne-dU-5.c, gcc.dg/cpp/cmdlne-dU-6.c,\n+\tgcc.dg/cpp/cmdlne-dU-7.c, gcc.dg/cpp/cmdlne-dU-8.c,\n+\tgcc.dg/cpp/cmdlne-dU-9.c, gcc.dg/cpp/cmdlne-dU-10.c,\n+\tgcc.dg/cpp/cmdlne-dU-11.c, gcc.dg/cpp/cmdlne-dU-12.c,\n+\tgcc.dg/cpp/cmdlne-dU-13.c, gcc.dg/cpp/cmdlne-dU-14.c,\n+\tgcc.dg/cpp/cmdlne-dU-15.c, gcc.dg/cpp/cmdlne-dU-16.c,\n+\tgcc.dg/cpp/cmdlne-dU-17.c, gcc.dg/cpp/cmdlne-dU-18.c,\n+\tgcc.dg/cpp/cmdlne-dU-19.c, gcc.dg/cpp/cmdlne-dU-20.c,\n+\tgcc.dg/cpp/cmdlne-dU-21.c, gcc.dg/cpp/cmdlne-dU-22.c: New tests.\n+\n 2008-04-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/14495"}, {"sha": "ce3f5b72128abfa8206f269a9709dc483cabb262", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-1.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-1.i \"^\\n*#undef A\\n*$\" } } */\n+#ifdef A\n+#endif"}, {"sha": "dd1474ad0ebaa33862eeffb8544adae62b08b293", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-10.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-10.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-10.i \"^\\n*C\\n+#define B C\\n+#define A B\\n*$\" } } */\n+/* This file deliberately has no final newline.  */\n+#define A B\n+#define B C\n+A\n\\ No newline at end of file"}, {"sha": "c9cc593463179288ae3d4e280209224661419346", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-11.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-11.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-11.i \"^\\n*\\n*$\" } } */\n+#define A B\n+#if 0\n+A\n+#endif"}, {"sha": "bf765fbf0eb836e39f219f77d05e4a25a338b0b4", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-12.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-12.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-12.i \"^\\n*#define A 1\\n*$\" } } */\n+#define A 1\n+#if A\n+#endif"}, {"sha": "3ab08d5d59c6236500cf628c106402766f7eed8e", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-13.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-13.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-13.i \"^\\n*#undef A\\n*$\" } } */\n+#ifdef A\n+#endif\n+#ifdef A\n+#endif"}, {"sha": "5d36f1acb098a9049bfb9152be93a6cf7076b88d", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-14.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-14.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-14.i \"^\\n*B\\n+#define A B\\n+B\\n*$\" } } */\n+#define A B\n+A\n+A"}, {"sha": "a6a9618267850ddcd50779c718941129762c3da1", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-15.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-15.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-15.i \"^\\n*\\n*$\" } } */\n+#if A\n+#endif"}, {"sha": "8e5078b5c272d0bef7e1fe74a203f2fc2a831464", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-16.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-16.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-16.i \"^\\n*#define __STDC__ 1\\n*$\" } } */\n+#ifdef __STDC__\n+#endif"}, {"sha": "c543439e71e15ce231057ca06455d337bc18ec5f", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-17.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-17.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-17.i \"^\\n*1\\n+#define __STDC__ 1\\n*$\" } } */\n+__STDC__"}, {"sha": "0b2c54307ee94c686e7136e11b2e13b8ab1384c5", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-18.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-18.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-18.i \"^\\n*x 1 y\\n+#define A 1\\n*$\" } } */\n+#define A 1\n+x A y"}, {"sha": "50edfc2b959e16580993eadf5bb124b386887b53", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-19.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-19.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-19.i \"^\\n*B\\n+#define A B\\n+#undef A\\n*$\" } } */\n+#define A B\n+A\n+#undef A\n+#ifdef A\n+#endif"}, {"sha": "e4754630405ad063e7977b54463981ac61cb2cd2", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-2.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-2.i \"^\\n*#define A *\\n*$\" } } */\n+#define A\n+#ifdef A\n+#endif"}, {"sha": "4845b51e77bed9e477d57b8fb295ebdb7a5a3e45", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-20.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-20.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-20.i \"^\\n*A B\\n*$\" } } */\n+#define A(x) x\n+A B"}, {"sha": "c17a0435ed76cc683f61496706eea69cd8c6c523", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-21.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-21.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-21.i \"^\\n*hello There\\n+#define ASTRING There\\n+#define MACROARGS\\\\(A\\\\) A\\n+#undef BSTRING\\n*$\" } } */\n+#define ASTRING There\n+#define MACROARGS(A) A\n+MACROARGS(hello) ASTRING\n+#ifdef BSTRING\n+bye\n+#endif"}, {"sha": "383a29f85e825b41926255281cb3d412ef40d1a7", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-22.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-22.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-22.i \"^\\n*#undef AAA\\n+AAA is undefined\\n+#undef BBB\\n+BBB is undefined\\n+#undef CCC\\n+CCC is undefined\\n*$\" } } */\n+#ifndef AAA\n+AAA is undefined\n+#endif\n+\n+#ifndef BBB\n+BBB is undefined\n+#endif\n+\n+#ifndef CCC\n+CCC is undefined\n+#endif"}, {"sha": "26c6ec1de26fecf7cb08e126a44a9e946b9d8d12", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-3.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-3.i \"^\\n*#define A B\\n*$\" } } */\n+#define A B\n+#ifndef A\n+#endif"}, {"sha": "9c57ffe7c74dcb502e204e6433d63ebe5e464480", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-4.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-4.i \"^\\n*#undef A\\n*$\" } } */\n+#if defined(A)\n+#endif"}, {"sha": "01880b77b5f74073f4faccce16f05cf7cb889ce4", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-5.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-5.i \"^\\n*#undef A\\n*$\" } } */\n+#ifdef A\n+#ifdef B\n+#endif\n+#endif"}, {"sha": "edf6b4445184a1fb1bcf7d1ecf9d2489119fed4d", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-6.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-6.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-6.i \"^\\n*#undef A\\n+#define A *\\n*$\" } } */\n+#ifdef A\n+#endif\n+#define A\n+#ifdef A\n+#endif"}, {"sha": "43a66341d0c34b628674997f344dba999fdadb43", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-7.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-7.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-7.i \"^\\n*B\\n+#define A B\\n+C\\n+#define A C\\n*$\" } } */\n+#define A B\n+A\n+#undef A\n+#define A C\n+A"}, {"sha": "d5984a31494d40bfc2d06c8255ba2de01d0b197b", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-8.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-8.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-8.i \"^\\n*B D\\n+#define A\\\\(x\\\\) B x\\n+#define C D\\n*$\" } } */\n+#define A(x) B x\n+#define C D\n+A(C)"}, {"sha": "ac8b92114ac15e5247b6415a227ce9005dcedc4a", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-9.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-9.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-P -dU\" } */\n+/* { dg-final { scan-file cmdlne-dU-9.i \"^\\n*C\\n+#define B C\\n+#define A B\\n*$\" } } */\n+#define A B\n+#define B C\n+A"}, {"sha": "b4b628d210cf139d38b6e6599afc4ffd7fcd0a7e", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -1067,6 +1067,7 @@ decode_d_option (const char *arg)\n       case 'I':\n       case 'M':\n       case 'N':\n+      case 'U':\n \tbreak;\n       case 'H':\n \tsetup_core_dumping();"}, {"sha": "f5c623db910cb751a750d0ef4fb5299cdeca6767", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -1,3 +1,15 @@\n+2008-04-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_callbacks): Add used_define,\n+\tused_undef and before_define.\n+\t(NODE_USED): Define.\n+\t* directives.c (do_define, do_undef, undefine_macros, do_ifdef,\n+\tdo_ifndef, cpp_pop_definition): Handle new flag and use new\n+\tcallbacks.\n+\t* expr.c (parse_defined): Handle new flag and use new callbacks.\n+\t* macro.c (enter_macro_context, _cpp_free_definition): Handle new\n+\tflag and use new callbacks.\n+\n 2008-04-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR pch/13675"}, {"sha": "0ca1117c19a56241c946c31f178343e7e789a01d", "filename": "libcpp/directives.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -559,9 +559,14 @@ do_define (cpp_reader *pfile)\n       pfile->state.save_comments =\n \t! CPP_OPTION (pfile, discard_comments_in_macro_exp);\n \n+      if (pfile->cb.before_define)\n+\tpfile->cb.before_define (pfile);\n+\n       if (_cpp_create_definition (pfile, node))\n \tif (pfile->cb.define)\n \t  pfile->cb.define (pfile, pfile->directive_line, node);\n+\n+      node->flags &= ~NODE_USED;\n     }\n }\n \n@@ -573,6 +578,9 @@ do_undef (cpp_reader *pfile)\n \n   if (node)\n     {\n+      if (pfile->cb.before_define)\n+\tpfile->cb.before_define (pfile);\n+\n       if (pfile->cb.undef)\n \tpfile->cb.undef (pfile, pfile->directive_line, node);\n \n@@ -603,7 +611,7 @@ undefine_macros (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *h,\n   /* Body of _cpp_free_definition inlined here for speed.\n      Macros and assertions no longer have anything to free.  */\n   h->type = NT_VOID;\n-  h->flags &= ~(NODE_POISONED|NODE_BUILTIN|NODE_DISABLED);\n+  h->flags &= ~(NODE_POISONED|NODE_BUILTIN|NODE_DISABLED|NODE_USED);\n   return 1;\n }\n \n@@ -1638,12 +1646,26 @@ do_ifdef (cpp_reader *pfile)\n \n   if (! pfile->state.skipping)\n     {\n-      const cpp_hashnode *node = lex_macro_node (pfile, false);\n+      cpp_hashnode *node = lex_macro_node (pfile, false);\n \n       if (node)\n \t{\n \t  skip = node->type != NT_MACRO;\n \t  _cpp_mark_macro_used (node);\n+\t  if (!(node->flags & NODE_USED))\n+\t    {\n+\t      node->flags |= NODE_USED;\n+\t      if (node->type == NT_MACRO)\n+\t\t{\n+\t\t  if (pfile->cb.used_define)\n+\t\t    pfile->cb.used_define (pfile, pfile->directive_line, node);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (pfile->cb.used_undef)\n+\t\t    pfile->cb.used_undef (pfile, pfile->directive_line, node);\n+\t\t}\n+\t    }\n \t  check_eol (pfile);\n \t}\n     }\n@@ -1656,7 +1678,7 @@ static void\n do_ifndef (cpp_reader *pfile)\n {\n   int skip = 1;\n-  const cpp_hashnode *node = 0;\n+  cpp_hashnode *node = 0;\n \n   if (! pfile->state.skipping)\n     {\n@@ -1666,6 +1688,20 @@ do_ifndef (cpp_reader *pfile)\n \t{\n \t  skip = node->type == NT_MACRO;\n \t  _cpp_mark_macro_used (node);\n+\t  if (!(node->flags & NODE_USED))\n+\t    {\n+\t      node->flags |= NODE_USED;\n+\t      if (node->type == NT_MACRO)\n+\t\t{\n+\t\t  if (pfile->cb.used_define)\n+\t\t    pfile->cb.used_define (pfile, pfile->directive_line, node);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (pfile->cb.used_undef)\n+\t\t    pfile->cb.used_undef (pfile, pfile->directive_line, node);\n+\t\t}\n+\t    }\n \t  check_eol (pfile);\n \t}\n     }\n@@ -2145,6 +2181,9 @@ cpp_pop_definition (cpp_reader *pfile, const char *str, cpp_macro *dfn)\n   if (node == NULL)\n     return;\n \n+  if (pfile->cb.before_define)\n+    pfile->cb.before_define (pfile);\n+\n   if (node->type == NT_MACRO)\n     {\n       if (pfile->cb.undef)"}, {"sha": "9e89dd9574af1fe47fb2d05a131ca1099ee8ceff", "filename": "libcpp/expr.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -637,6 +637,20 @@ parse_defined (cpp_reader *pfile)\n \t\t   \"this use of \\\"defined\\\" may not be portable\");\n \n       _cpp_mark_macro_used (node);\n+      if (!(node->flags & NODE_USED))\n+\t{\n+\t  node->flags |= NODE_USED;\n+\t  if (node->type == NT_MACRO)\n+\t    {\n+\t      if (pfile->cb.used_define)\n+\t\tpfile->cb.used_define (pfile, pfile->directive_line, node);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (pfile->cb.used_undef)\n+\t\tpfile->cb.used_undef (pfile, pfile->directive_line, node);\n+\t    }\n+\t}\n \n       /* A possible controlling macro of the form #if !defined ().\n \t _cpp_parse_expr checks there was no other junk on the line.  */"}, {"sha": "84de0e099754a91c781822999b362449ec1e2bfb", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -480,6 +480,14 @@ struct cpp_callbacks\n      This callback receives the translated message.  */\n   void (*error) (cpp_reader *, int, const char *, va_list *)\n        ATTRIBUTE_FPTR_PRINTF(3,0);\n+\n+  /* Callbacks for when a macro is expanded, or tested (whether\n+     defined or not at the time) in #ifdef, #ifndef or \"defined\".  */\n+  void (*used_define) (cpp_reader *, unsigned int, cpp_hashnode *);\n+  void (*used_undef) (cpp_reader *, unsigned int, cpp_hashnode *);\n+  /* Called before #define and #undef or other macro definition\n+     changes are processed.  */\n+  void (*before_define) (cpp_reader *);\n };\n \n /* Chain of directories to look for include files in.  */\n@@ -537,6 +545,7 @@ extern const char *progname;\n #define NODE_WARN\t(1 << 4)\t/* Warn if redefined or undefined.  */\n #define NODE_DISABLED\t(1 << 5)\t/* A disabled macro.  */\n #define NODE_MACRO_ARG\t(1 << 6)\t/* Used during #define processing.  */\n+#define NODE_USED\t(1 << 7)\t/* Dumped with -dU.  */\n \n /* Different flavors of hash node.  */\n enum node_type"}, {"sha": "587b94814cc376c0d2c585c8da89c3ab946b0fd3", "filename": "libcpp/macro.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=93d45d9eda934cf8d9ab3e4e4c81fce9ed994a07", "patch": "@@ -815,6 +815,13 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n \n   pfile->state.angled_headers = false;\n \n+  if ((node->flags & NODE_BUILTIN) && !(node->flags & NODE_USED))\n+    {\n+      node->flags |= NODE_USED;\n+      if (pfile->cb.used_define)\n+\tpfile->cb.used_define (pfile, pfile->directive_line, node);\n+    }\n+\n   /* Handle standard macros.  */\n   if (! (node->flags & NODE_BUILTIN))\n     {\n@@ -854,6 +861,13 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n       /* Disable the macro within its expansion.  */\n       node->flags |= NODE_DISABLED;\n \n+      if (!(node->flags & NODE_USED))\n+\t{\n+\t  node->flags |= NODE_USED;\n+\t  if (pfile->cb.used_define)\n+\t    pfile->cb.used_define (pfile, pfile->directive_line, node);\n+\t}\n+\n       macro->used = 1;\n \n       if (macro->paramc == 0)\n@@ -1393,7 +1407,7 @@ _cpp_free_definition (cpp_hashnode *h)\n   /* Macros and assertions no longer have anything to free.  */\n   h->type = NT_VOID;\n   /* Clear builtin flag in case of redefinition.  */\n-  h->flags &= ~(NODE_BUILTIN | NODE_DISABLED);\n+  h->flags &= ~(NODE_BUILTIN | NODE_DISABLED | NODE_USED);\n }\n \n /* Save parameter NODE to the parameter list of macro MACRO.  Returns"}]}