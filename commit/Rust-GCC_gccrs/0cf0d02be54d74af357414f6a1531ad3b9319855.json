{"sha": "0cf0d02be54d74af357414f6a1531ad3b9319855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmMGQwMmJlNTRkNzRhZjM1NzQxNGY2YTE1MzFhZDNiOTMxOTg1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-01-02T14:38:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-01-02T14:38:05Z"}, "message": "re PR middle-end/38690 (Missing parentheses for  (a-1)/2 in final_cleanup)\n\n\tPR middle-end/38690\n\t* tree-flow.h (op_code_prio, op_prio): New prototypes.\n\t* tree-pretty-print.c (op_code_prio): New function.\n\t(op_prio): No longer static.  Use op_code_prio.\n\t* gimple-pretty-print.c (dump_unary_rhs, dump_binary_rhs):\n\tUse op_prio and op_code_prio to determine if () should be\n\tprinted around operand(s) or not.\n\n\t* gimple-pretty-print.c (dump_unary_rhs, dump_binary_rhs,\n\tdump_gimple_call, dump_gimple_switch, dump_gimple_cond,\n\tdump_gimple_label, dump_gimple_try, dump_symbols, dump_gimple_phi,\n\tdump_gimple_mem_ops, dump_bb_header, dump_bb_end, pp_cfg_jump): Use\n\tpp_character instead of pp_string for single letter printing.\n\nFrom-SVN: r143012", "tree": {"sha": "77592e561a3eb185ce8cb757924ea596164cef4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77592e561a3eb185ce8cb757924ea596164cef4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cf0d02be54d74af357414f6a1531ad3b9319855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf0d02be54d74af357414f6a1531ad3b9319855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf0d02be54d74af357414f6a1531ad3b9319855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf0d02be54d74af357414f6a1531ad3b9319855/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3606f3bda110bcec675134174c8d72f09cce75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3606f3bda110bcec675134174c8d72f09cce75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3606f3bda110bcec675134174c8d72f09cce75d"}], "stats": {"total": 153, "additions": 106, "deletions": 47}, "files": [{"sha": "9f3f0ee7ef7c8984c752404b63cb141079d21294", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cf0d02be54d74af357414f6a1531ad3b9319855", "patch": "@@ -1,3 +1,19 @@\n+2009-01-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/38690\n+\t* tree-flow.h (op_code_prio, op_prio): New prototypes.\n+\t* tree-pretty-print.c (op_code_prio): New function.\n+\t(op_prio): No longer static.  Use op_code_prio.\n+\t* gimple-pretty-print.c (dump_unary_rhs, dump_binary_rhs):\n+\tUse op_prio and op_code_prio to determine if () should be\n+\tprinted around operand(s) or not.\n+\n+\t* gimple-pretty-print.c (dump_unary_rhs, dump_binary_rhs,\n+\tdump_gimple_call, dump_gimple_switch, dump_gimple_cond,\n+\tdump_gimple_label, dump_gimple_try, dump_symbols, dump_gimple_phi,\n+\tdump_gimple_mem_ops, dump_bb_header, dump_bb_end, pp_cfg_jump): Use\n+\tpp_character instead of pp_string for single letter printing.\n+\n 2009-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* doc/extend.texi: Fix '#pragma GCC option' typo."}, {"sha": "733a449cacef7fe062ffe7fbca483c8383fa3d9d", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 66, "deletions": 33, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=0cf0d02be54d74af357414f6a1531ad3b9319855", "patch": "@@ -1,5 +1,5 @@\n /* Pretty formatting of GIMPLE statements and expressions.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez <aldyh@redhat.com> and\n    Diego Novillo <dnovillo@google.com>\n@@ -257,10 +257,17 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n     CASE_CONVERT:\n-      pp_string (buffer, \"(\");\n+      pp_character (buffer, '(');\n       dump_generic_node (buffer, TREE_TYPE (lhs), spc, flags, false);\n       pp_string (buffer, \") \");\n-      dump_generic_node (buffer, rhs, spc, flags, false);\n+      if (op_prio (rhs) < op_code_prio (rhs_code))\n+\t{\n+\t  pp_character (buffer, '(');\n+\t  dump_generic_node (buffer, rhs, spc, flags, false);\n+\t  pp_character (buffer, ')');\n+\t}\n+      else\n+\tdump_generic_node (buffer, rhs, spc, flags, false);\n       break;\n       \n     case PAREN_EXPR:\n@@ -272,7 +279,7 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case ABS_EXPR:\n       pp_string (buffer, \"ABS_EXPR <\");\n       dump_generic_node (buffer, rhs, spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_character (buffer, '>');\n       break;\n \n     default:\n@@ -282,21 +289,31 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t  || rhs_code == SSA_NAME\n \t  || rhs_code == ADDR_EXPR\n \t  || rhs_code == CONSTRUCTOR)\n-\t; /* do nothing.  */\n+\t{\n+\t  dump_generic_node (buffer, rhs, spc, flags, false);\n+\t  break;\n+\t}\n       else if (rhs_code == BIT_NOT_EXPR)\n-\tpp_string (buffer, \"~\");\n+\tpp_character (buffer, '~');\n       else if (rhs_code == TRUTH_NOT_EXPR)\n-\tpp_string (buffer, \"!\");\n+\tpp_character (buffer, '!');\n       else if (rhs_code == NEGATE_EXPR)\n-\tpp_string (buffer, \"-\");\n+\tpp_character (buffer, '-');\n       else\n \t{\n-\t  pp_string (buffer, \"[\");\n+\t  pp_character (buffer, '[');\n \t  pp_string (buffer, tree_code_name [rhs_code]);\n \t  pp_string (buffer, \"] \");\n \t}\n \n-      dump_generic_node (buffer, rhs, spc, flags, false);\n+      if (op_prio (rhs) < op_code_prio (rhs_code))\n+\t{\n+\t  pp_character (buffer, '(');\n+\t  dump_generic_node (buffer, rhs, spc, flags, false);\n+\t  pp_character (buffer, ')');\n+\t}\n+      else\n+\tdump_generic_node (buffer, rhs, spc, flags, false);\n       break;\n     }\n }\n@@ -334,11 +351,27 @@ dump_binary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       break;\n \n     default:\n-      dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n+      if (op_prio (gimple_assign_rhs1 (gs)) <= op_code_prio (code))\n+\t{\n+\t  pp_character (buffer, '(');\n+\t  dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags,\n+\t\t\t     false);\n+\t  pp_character (buffer, ')');\n+\t}\n+      else\n+\tdump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n       pp_space (buffer);\n       pp_string (buffer, op_symbol_code (gimple_assign_rhs_code (gs)));\n       pp_space (buffer);\n-      dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n+      if (op_prio (gimple_assign_rhs2 (gs)) <= op_code_prio (code))\n+\t{\n+\t  pp_character (buffer, '(');\n+\t  dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags,\n+\t\t\t     false);\n+\t  pp_character (buffer, ')');\n+\t}\n+      else\n+\tdump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n     }\n }\n \n@@ -461,7 +494,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n           pp_string (buffer, \", \");\n           dump_gimple_call_args (buffer, gs, flags);\n         }\n-      pp_string (buffer, \">\");\n+      pp_character (buffer, '>');\n     }\n   else\n     {\n@@ -478,7 +511,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_call_fn (gs), spc, flags, false);\n       pp_string (buffer, \" (\");\n       dump_gimple_call_args (buffer, gs, flags);\n-      pp_string (buffer, \")\");\n+      pp_character (buffer, ')');\n       if (!(flags & TDF_RHS_ONLY))\n \tpp_semicolon (buffer);\n     }\n@@ -524,12 +557,12 @@ dump_gimple_switch (pretty_printer *buffer, gimple gs, int spc, int flags)\n \tcontinue;\n \n       dump_generic_node (buffer, case_label, spc, flags, false);\n-      pp_string (buffer, \" \");\n+      pp_character (buffer, ' ');\n       dump_generic_node (buffer, CASE_LABEL (case_label), spc, flags, false);\n       if (i < gimple_switch_num_labels (gs) - 1)\n         pp_string (buffer, \", \");\n     }\n-  pp_string (buffer, \">\");\n+  pp_character (buffer, '>');\n }\n \n \n@@ -555,7 +588,7 @@ dump_gimple_cond (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_cond_rhs (gs), spc, flags, false);\n       if (!(flags & TDF_RHS_ONLY))\n \t{\n-\t  pp_string (buffer, \")\");\n+\t  pp_character (buffer, ')');\n \n \t  if (gimple_cond_true_label (gs))\n \t    {\n@@ -589,7 +622,7 @@ dump_gimple_label (pretty_printer *buffer, gimple gs, int spc, int flags)\n   else\n     {\n       dump_generic_node (buffer, label, spc, flags, false);\n-      pp_string (buffer, \":\");\n+      pp_character (buffer, ':');\n     }\n   if (DECL_NONLOCAL (label))\n     pp_string (buffer, \" [non-local]\");\n@@ -667,26 +700,26 @@ dump_gimple_try (pretty_printer *buffer, gimple gs, int spc, int flags)\n     {\n       pp_string (buffer, \"try\");\n       newline_and_indent (buffer, spc + 2);\n-      pp_string (buffer, \"{\");\n+      pp_character (buffer, '{');\n       pp_newline (buffer);\n \n       dump_gimple_seq (buffer, gimple_try_eval (gs), spc + 4, flags);\n       newline_and_indent (buffer, spc + 2);\n-      pp_string (buffer, \"}\");\n+      pp_character (buffer, '}');\n \n       if (gimple_try_kind (gs) == GIMPLE_TRY_CATCH)\n \t{\n \t  newline_and_indent (buffer, spc);\n \t  pp_string (buffer, \"catch\");\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_string (buffer, \"{\");\n+\t  pp_character (buffer, '{');\n \t}\n       else if (gimple_try_kind (gs) == GIMPLE_TRY_FINALLY)\n \t{\n \t  newline_and_indent (buffer, spc);\n \t  pp_string (buffer, \"finally\");\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_string (buffer, \"{\");\n+\t  pp_character (buffer, '{');\n \t}\n       else\n \tpp_string (buffer, \" <UNKNOWN GIMPLE_TRY> {\");\n@@ -1118,10 +1151,10 @@ dump_symbols (pretty_printer *buffer, bitmap syms, int flags)\n \t{\n \t  tree sym = referenced_var_lookup (i);\n \t  dump_generic_node (buffer, sym, 0, flags, false);\n-\t  pp_string (buffer, \" \");\n+\t  pp_character (buffer, ' ');\n \t}\n \n-      pp_string (buffer, \"}\");\n+      pp_character (buffer, '}');\n     }\n }\n \n@@ -1146,13 +1179,13 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n     {\n       dump_generic_node (buffer, gimple_phi_arg_def (phi, i), spc, flags,\n \t\t\t false);\n-      pp_string (buffer, \"(\");\n+      pp_character (buffer, '(');\n       pp_decimal_int (buffer, gimple_phi_arg_edge (phi, i)->src->index);\n-      pp_string (buffer, \")\");\n+      pp_character (buffer, ')');\n       if (i < gimple_phi_num_args (phi) - 1)\n \tpp_string (buffer, \", \");\n     }\n-  pp_string (buffer, \">\");\n+  pp_character (buffer, '>');\n }\n \n \n@@ -1390,7 +1423,7 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t    pp_string (buffer, \", \");\n \t}\n \n-      pp_string (buffer, \">\");\n+      pp_character (buffer, '>');\n \n       if (flags & TDF_MEMSYMS)\n \tdump_symbols (buffer, gimple_loaded_syms (gs), flags);\n@@ -1414,7 +1447,7 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t    pp_string (buffer, \", \");\n \t}\n \n-      pp_string (buffer, \">\");\n+      pp_character (buffer, '>');\n \n       if ((flags & TDF_MEMSYMS) && vdefs->next == NULL)\n \tdump_symbols (buffer, gimple_stored_syms (gs), flags);\n@@ -1639,7 +1672,7 @@ dump_bb_header (pretty_printer *buffer, basic_block bb, int indent, int flags)\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tif (flags & TDF_SLIM)\n \t  {\n-\t    pp_string (buffer, \" \");\n+\t    pp_character (buffer, ' ');\n \t    if (e->src == ENTRY_BLOCK_PTR)\n \t      pp_string (buffer, \"ENTRY\");\n \t    else\n@@ -1681,7 +1714,7 @@ dump_bb_end (pretty_printer *buffer, basic_block bb, int indent, int flags)\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     if (flags & TDF_SLIM)\n       {\n-\tpp_string (buffer, \" \");\n+\tpp_character (buffer, ' ');\n \tif (e->dest == EXIT_BLOCK_PTR)\n \t  pp_string (buffer, \"EXIT\");\n \telse\n@@ -1727,12 +1760,12 @@ pp_cfg_jump (pretty_printer *buffer, basic_block bb)\n \n   pp_string (buffer, \"goto <bb \");\n   pp_decimal_int (buffer, bb->index);\n-  pp_string (buffer, \">\");\n+  pp_character (buffer, '>');\n   if (stmt && gimple_code (stmt) == GIMPLE_LABEL)\n     {\n       pp_string (buffer, \" (\");\n       dump_generic_node (buffer, gimple_label_label (stmt), 0, 0, false);\n-      pp_string (buffer, \")\");\n+      pp_character (buffer, ')');\n       pp_semicolon (buffer);\n     }\n   else"}, {"sha": "4657862967347ef45a77aa1e17cd5ff471e88fdc", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=0cf0d02be54d74af357414f6a1531ad3b9319855", "patch": "@@ -1,5 +1,5 @@\n /* Data and Control Flow Analysis for Trees.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -752,6 +752,8 @@ extern bool cleanup_tree_cfg (void);\n \n /* In tree-pretty-print.c.  */\n extern void dump_generic_bb (FILE *, basic_block, int, int);\n+extern int op_code_prio (enum tree_code);\n+extern int op_prio (const_tree);\n extern const char *op_symbol_code (enum tree_code);\n \n /* In tree-dfa.c  */"}, {"sha": "ff45ecc635d8a3d650b5847fcd5757c40421d6b8", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf0d02be54d74af357414f6a1531ad3b9319855/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=0cf0d02be54d74af357414f6a1531ad3b9319855", "patch": "@@ -1,5 +1,5 @@\n /* Pretty formatting of GENERIC trees in C syntax.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Adapted from c-pretty-print.c by Diego Novillo <dnovillo@redhat.com>\n \n@@ -38,7 +38,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"predict.h\"\n \n /* Local functions, macros and variables.  */\n-static int op_prio (const_tree);\n static const char *op_symbol (const_tree);\n static void pretty_print_string (pretty_printer *, const char*);\n static void print_call_name (pretty_printer *, const_tree);\n@@ -2223,7 +2222,7 @@ print_struct_decl (pretty_printer *buffer, const_tree node, int spc, int flags)\n   pp_character (buffer, '}');\n }\n \n-/* Return the priority of the operator OP.\n+/* Return the priority of the operator CODE.\n \n    From lowest to highest precedence with either left-to-right (L-R)\n    or right-to-left (R-L) associativity]:\n@@ -2247,13 +2246,10 @@ print_struct_decl (pretty_printer *buffer, const_tree node, int spc, int flags)\n    unary +, - and * have higher precedence than the corresponding binary\n    operators.  */\n \n-static int\n-op_prio (const_tree op)\n+int\n+op_code_prio (enum tree_code code)\n {\n-  if (op == NULL)\n-    return 9999;\n-\n-  switch (TREE_CODE (op))\n+  switch (code)\n     {\n     case TREE_LIST:\n     case COMPOUND_EXPR:\n@@ -2374,17 +2370,29 @@ op_prio (const_tree op)\n     case VEC_PACK_SAT_EXPR:\n       return 16;\n \n-    case SAVE_EXPR:\n-    case NON_LVALUE_EXPR:\n-      return op_prio (TREE_OPERAND (op, 0));\n-\n     default:\n       /* Return an arbitrarily high precedence to avoid surrounding single\n \t VAR_DECLs in ()s.  */\n       return 9999;\n     }\n }\n \n+/* Return the priority of the operator OP.  */\n+\n+int\n+op_prio (const_tree op)\n+{\n+  enum tree_code code;\n+\n+  if (op == NULL)\n+    return 9999;\n+\n+  code = TREE_CODE (op);\n+  if (code == SAVE_EXPR || code == NON_LVALUE_EXPR)\n+    return op_prio (TREE_OPERAND (op, 0));\n+\n+  return op_code_prio (code);\n+}\n \n /* Return the symbol associated with operator CODE.  */\n "}]}