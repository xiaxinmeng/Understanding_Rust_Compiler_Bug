{"sha": "6591e422692d80d066bacdcdafea2f864d8259c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5MWU0MjI2OTJkODBkMDY2YmFjZGNkYWZlYTJmODY0ZDgyNTljNg==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-12-01T23:41:08Z"}, "committer": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-12-01T23:43:17Z"}, "message": "Add feature test macro for atomic<T>::wait\n\nAdds __cpp_lib_atomic_wait feature test macro which was overlooked in\nthe initial commit of this feature. Replaces uses of\n_GLIBCXX_HAVE_ATOMIC_WAIT.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_base.h: Replace usage of\n\t_GLIBCXX_HAVE_ATOMIC_WAIT with __cpp_lib_atomic_wait.\n\t* include/bits/atomic_timed_wait.h: Likewise.\n\t* include/bits/atomic_wait.h: Define __cpp_lib_atomic_wait\n\tfeature test macro.\n\t* include/bits/semaphore_base.h: Replace usage of\n\t_GLIBCXX_HAVE_ATOMIC_WAIT with __cpp_lib_atomic_wait.\n\t* include/std/atomic: Likewise.\n\t* include/std/latch: Likewise.\n\t* include/std/semaphore: Likewise.\n\t* include/std/version: Define __cpp_lib_atomic wait\n\tfeature test macro and replace usage of\n\t_GLIBCXX_HAVE_ATOMIC_WAIT.\n\t* testsuite/29_atomics/atomic/wait_notify/1.cc: New test.\n\t* testsuite/29_atomics/atomic/wait_notify/2.cc: Likewise.", "tree": {"sha": "264e546f31035d1075cfbd6b673fdb6aa1e5c98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/264e546f31035d1075cfbd6b673fdb6aa1e5c98c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6591e422692d80d066bacdcdafea2f864d8259c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6591e422692d80d066bacdcdafea2f864d8259c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6591e422692d80d066bacdcdafea2f864d8259c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6591e422692d80d066bacdcdafea2f864d8259c6/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abef36919f741c8e4f7380b2c2ffbc6ad97c2b6b"}], "stats": {"total": 138, "additions": 100, "deletions": 38}, "files": [{"sha": "89f66a23ab6686e7c716bf54a56591ad08b5b968", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -230,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __v == __GCC_ATOMIC_TEST_AND_SET_TRUEVAL;\n     }\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n     _GLIBCXX_ALWAYS_INLINE void\n     wait(bool __old,\n \tmemory_order __m = memory_order_seq_cst) const noexcept\n@@ -253,7 +253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { std::__atomic_notify(&_M_i, true); }\n \n     // TODO add const volatile overload\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n #endif // C++20\n \n     _GLIBCXX_ALWAYS_INLINE void\n@@ -604,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__m));\n       }\n \n-#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(__int_type __old,\n \t  memory_order __m = memory_order_seq_cst) const noexcept\n@@ -627,7 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(&_M_i, true); }\n \n       // TODO add const volatile overload\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n       _GLIBCXX_ALWAYS_INLINE __int_type\n       fetch_add(__int_type __i,\n@@ -898,7 +898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t   int(__m1), int(__m2));\n       }\n \n-#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(__pointer_type __old,\n \t   memory_order __m = memory_order_seq_cst) noexcept\n@@ -921,7 +921,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(&_M_p, true); }\n \n       // TODO add const volatile overload\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n       fetch_add(ptrdiff_t __d,\n@@ -1011,7 +1011,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t int(__success), int(__failure));\n       }\n \n-#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n     template<typename _Tp>\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(const _Tp* __ptr, _Val<_Tp> __old,\n@@ -1036,7 +1036,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(__ptr, true); }\n \n       // TODO add const volatile overload\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n     template<typename _Tp>\n       _GLIBCXX_ALWAYS_INLINE _Tp\n@@ -1291,7 +1291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(&_M_fp, __old, __m); }\n@@ -1309,7 +1309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(&_M_fp); }\n \n       // TODO add const volatile overload\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1448,7 +1448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1466,7 +1466,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n     private:\n       _Tp* _M_ptr;\n@@ -1563,7 +1563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1581,7 +1581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait \n \n       value_type\n       fetch_add(value_type __i,\n@@ -1738,7 +1738,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1756,7 +1756,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1867,7 +1867,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1885,7 +1885,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n       _GLIBCXX_ALWAYS_INLINE value_type\n       fetch_add(difference_type __d,"}, {"sha": "6dd1a145e6995cf20facd4e87a49675097babd74", "filename": "libstdc++-v3/include/bits/atomic_timed_wait.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -33,7 +33,8 @@\n #pragma GCC system_header\n \n #include <bits/atomic_wait.h>\n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+\n+#ifdef __cpp_lib_atomic_wait\n #include <bits/functional_hash.h>\n \n #include <chrono>\n@@ -292,5 +293,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n #endif // _GLIBCXX_ATOMIC_TIMED_WAIT_H"}, {"sha": "5efd96d22a1675b3ba90da35a647f72e2e65f21e", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -50,8 +50,7 @@\n # include <bits/std_mutex.h>  // std::mutex, std::__condvar\n #endif\n \n-// Other headers use this to check for the facilities defined in this header.\n-#define _GLIBCXX_HAVE_ATOMIC_WAIT 1\n+#define __cpp_lib_atomic_wait 201907L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "0ed1f5895afada0e77e4b37195f30ccb7b404b52", "filename": "libstdc++-v3/include/bits/semaphore_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -33,7 +33,7 @@\n #pragma GCC system_header\n \n #include <bits/atomic_base.h>\n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#ifdef __cpp_lib_atomic_wait \n #include <bits/atomic_timed_wait.h>\n \n #include <ext/numeric_traits.h>\n@@ -297,5 +297,5 @@ template<ptrdiff_t __least_max_value>\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n #endif // _GLIBCXX_SEMAPHORE_BASE_H"}, {"sha": "4a9b00182a39622f156d4684728c9f4dffcd74d2", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -164,7 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    memory_order __m = memory_order_seq_cst) volatile noexcept\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m); }\n \n-#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n     void\n     wait(bool __old, memory_order __m = memory_order_seq_cst) const noexcept\n     { _M_base.wait(__old, __m); }\n@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     notify_all() const noexcept\n     { _M_base.notify_all(); }\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n   };\n \n #if __cplusplus <= 201703L\n@@ -380,7 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return compare_exchange_strong(__e, __i, __m,\n                                        __cmpexch_failure_order(__m)); }\n \n-#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait \n     void\n     wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n     {\n@@ -404,7 +404,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     notify_all() const noexcept\n     { std::__atomic_notify(&_M_i, true); }\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait \n \n     };\n #undef _GLIBCXX20_INIT\n@@ -644,7 +644,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t    __cmpexch_failure_order(__m));\n       }\n \n-#if __cplusplus > 201703L && _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait \n     void\n     wait(__pointer_type __old, memory_order __m = memory_order_seq_cst) noexcept\n     { _M_b.wait(__old, __m); }\n@@ -658,7 +658,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     notify_all() const noexcept\n     { _M_b.notify_all(); }\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n       __pointer_type\n       fetch_add(ptrdiff_t __d,\n \t\tmemory_order __m = memory_order_seq_cst) noexcept\n@@ -1412,7 +1412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n-#if __cplusplus > 201703L && _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n   template<typename _Tp>\n     inline void\n     atomic_wait(const atomic<_Tp>* __a,\n@@ -1435,7 +1435,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     atomic_notify_all(atomic<_Tp>* __a) noexcept\n     { __a->notify_all(); }\n-#endif // C++20 && HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n \n   // Function templates for atomic_integral and atomic_pointer operations only.\n   // Some operations (and, or, xor) are only available for atomic integrals,"}, {"sha": "d4a00c4361c32ba2da26e89510ccec186f1eaa7c", "filename": "libstdc++-v3/include/std/latch", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flatch", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flatch", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flatch?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -36,7 +36,7 @@\n #include <bits/atomic_base.h>\n #include <ext/numeric_traits.h>\n \n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -89,6 +89,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n #endif // __cplusplus > 201703L\n #endif // _GLIBCXX_LATCH"}, {"sha": "ff83a56af4b5a3b81be43473d74692474e58676c", "filename": "libstdc++-v3/include/std/semaphore", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -33,7 +33,7 @@\n \n #if __cplusplus > 201703L\n #include <bits/semaphore_base.h>\n-#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#if __cpp_lib_atomic_wait\n #include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -90,6 +90,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  using binary_semaphore = std::counting_semaphore<1>;\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // HAVE_ATOMIC_WAIT\n+#endif // __cpp_lib_atomic_wait\n #endif // C++20\n #endif // _GLIBCXX_SEMAPHORE"}, {"sha": "4bb45b7805cabe303102df58b6633fd9bc1434dd", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -197,6 +197,9 @@\n #if _GLIBCXX_HOSTED\n #define __cpp_lib_array_constexpr 201811L\n #define __cpp_lib_assume_aligned 201811L\n+#if defined _GLIBCXX_HAS_GTHREADS || defined _GLIBCXX_HAVE_LINUX_FUTEX\n+# define __cpp_lib_atomic_wait 201907L\n+#endif\n #define __cpp_lib_bind_front 201907L\n // FIXME: #define __cpp_lib_execution 201902L\n #define __cpp_lib_integer_comparison_functions 202002L\n@@ -216,7 +219,7 @@\n #ifdef _GLIBCXX_HAS_GTHREADS\n # define __cpp_lib_jthread 201911L\n #endif\n-#if defined _GLIBCXX_HAS_GTHREADS || defined _GLIBCXX_HAVE_LINUX_FUTEX\n+#if __cpp_lib_atomic_wait \n # define __cpp_lib_latch 201907L\n #endif\n #define __cpp_lib_list_remove_return_type 201806L\n@@ -228,7 +231,7 @@\n #if __cpp_lib_concepts\n # define __cpp_lib_ranges 201911L\n #endif\n-#if defined _GLIBCXX_HAS_GTHREADS || defined _GLIBCXX_HAVE_LINUX_FUTEX\n+#if __cpp_lib_atomic_wait \n # define __cpp_lib_semaphore 201907L\n #endif\n #define __cpp_lib_shift 201806L"}, {"sha": "7b183b271dbcf2e171cd40f1b8b6dd4bc7dc7797", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/1.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F1.cc?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target gthreads }\n+\n+#include <atomic>\n+\n+#ifndef __cpp_lib_atomic_wait\n+# error \"Feature-test macro for atomic wait missing in <atomic>\"\n+#elif __cpp_lib_atomic_wait != 201907L\n+# error \"Feature-test macro for atomic wait has wrong value in <atomic>\"\n+#endif\n+"}, {"sha": "249bf2da9f0b0677c8ababbe54d14e19bedde2b1", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/2.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6591e422692d80d066bacdcdafea2f864d8259c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2F2.cc?ref=6591e422692d80d066bacdcdafea2f864d8259c6", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-effective-target gthreads }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_atomic_wait\n+# error \"Feature-test macro for atomic wait missing in <version>\"\n+#elif __cpp_lib_atomic_wait != 201907L\n+# error \"Feature-test macro for atomic wait has wrong value in <version>\"\n+#endif\n+\n+"}]}