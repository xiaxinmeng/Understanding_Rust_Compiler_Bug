{"sha": "5f00df5925082c7b66da91270f2ed29bf4818c93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwMGRmNTkyNTA4MmM3YjY2ZGE5MTI3MGYyZWQyOWJmNDgxOGM5Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-03-31T21:48:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-01T14:04:38Z"}, "message": "c++: Add ABI version for PR98481 fix\n\nThe PR98481 fix corrects an ABI regression in GCC 10, but we don't want to\nintroduce an ABI change in the middle of the GCC 10 cycle.  This patch\nintroduces ABI v15 for the fix, which will be available but not default in\nGCC 10.3; the broken behavior remains in ABI v14.  Compatibility aliases\nwill not be generated for this change.\n\ngcc/ChangeLog:\n\n\tPR c++/98481\n\t* common.opt: Document v15 and v16.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/98481\n\t* c-opts.c (c_common_post_options): Bump latest_abi_version.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98481\n\t* mangle.c (write_expression): Adjust.\n\t* class.c (find_abi_tags_r): Disable PR98481 fix for ABI v14.\n\t(mark_abi_tags_r): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98481\n\t* g++.dg/abi/abi-tag24a.C: New test.\n\t* g++.dg/abi/macro0.C: Adjust expected value.", "tree": {"sha": "8a28c3c9d6bb27eefba0e44fb21407d17c0a0199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a28c3c9d6bb27eefba0e44fb21407d17c0a0199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f00df5925082c7b66da91270f2ed29bf4818c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f00df5925082c7b66da91270f2ed29bf4818c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f00df5925082c7b66da91270f2ed29bf4818c93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f00df5925082c7b66da91270f2ed29bf4818c93/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "584731ecedf09c2c067913c4af9ed0a30cf19e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584731ecedf09c2c067913c4af9ed0a30cf19e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584731ecedf09c2c067913c4af9ed0a30cf19e8d"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "89e05a4c55181e211f6ffe917beddcc25aae580e", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=5f00df5925082c7b66da91270f2ed29bf4818c93", "patch": "@@ -965,7 +965,7 @@ c_common_post_options (const char **pfilename)\n \n   /* Change flag_abi_version to be the actual current ABI level, for the\n      benefit of c_cpp_builtins, and to make comparison simpler.  */\n-  const int latest_abi_version = 15;\n+  const int latest_abi_version = 16;\n   /* Generate compatibility aliases for ABI v11 (7.1) by default.  */\n   const int abi_compat_default = 11;\n "}, {"sha": "a75b44ee47e7016966143c6587ad798b47285286", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5f00df5925082c7b66da91270f2ed29bf4818c93", "patch": "@@ -960,7 +960,11 @@ Driver Undocumented\n ; 14: Corrects the mangling of nullptr expression.\n ;     Default in G++ 10.\n ;\n-; 15: Changes the mangling of __alignof__ to be distinct from that of alignof.\n+; 15: Corrects G++ 10 ABI tag regression [PR98481].\n+;     Available, but not default, in G++ 10.3.\n+;\n+; 16: Changes the mangling of __alignof__ to be distinct from that of alignof.\n+;     Adds missing 'on' in mangling of operator names in some cases.\n ;     Default in G++ 11.\n ;\n ; Additional positive integers will be assigned as new versions of"}, {"sha": "4bffec4a707d0ccb4d4efc423c68aca6911aaf49", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5f00df5925082c7b66da91270f2ed29bf4818c93", "patch": "@@ -1494,8 +1494,8 @@ mark_or_check_tags (tree t, tree *tp, abi_tag_data *p, bool val)\n static tree\n find_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n {\n-  if (TYPE_P (*tp) && *walk_subtrees == 1)\n-    /* Tell cp_walk_subtrees to look though typedefs.  */\n+  if (TYPE_P (*tp) && *walk_subtrees == 1 && flag_abi_version != 14)\n+    /* Tell cp_walk_subtrees to look though typedefs. [PR98481] */\n     *walk_subtrees = 2;\n \n   if (!OVERLOAD_TYPE_P (*tp))\n@@ -1518,7 +1518,7 @@ find_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n static tree\n mark_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n {\n-  if (TYPE_P (*tp) && *walk_subtrees == 1)\n+  if (TYPE_P (*tp) && *walk_subtrees == 1 && flag_abi_version != 14)\n     /* Tell cp_walk_subtrees to look though typedefs.  */\n     *walk_subtrees = 2;\n "}, {"sha": "6c111342b9703bbcfe5ca3620b2acf27d908c8bc", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5f00df5925082c7b66da91270f2ed29bf4818c93", "patch": "@@ -3119,9 +3119,9 @@ write_expression (tree expr)\n     {\n       if (!ALIGNOF_EXPR_STD_P (expr))\n \t{\n-\t  if (abi_warn_or_compat_version_crosses (15))\n+\t  if (abi_warn_or_compat_version_crosses (16))\n \t    G.need_abi_warning = true;\n-\t  if (abi_version_at_least (15))\n+\t  if (abi_version_at_least (16))\n \t    {\n \t      /* We used to mangle __alignof__ like alignof.  */\n \t      write_string (\"u11__alignof__\");\n@@ -3350,9 +3350,9 @@ write_expression (tree expr)\n       tree name = dependent_name (expr);\n       if (IDENTIFIER_ANY_OP_P (name))\n \t{\n-\t  if (abi_version_at_least (15))\n+\t  if (abi_version_at_least (16))\n \t    write_string (\"on\");\n-\t  if (abi_warn_or_compat_version_crosses (15))\n+\t  if (abi_warn_or_compat_version_crosses (16))\n \t    G.need_abi_warning = 1;\n \t}\n       write_unqualified_id (name);"}, {"sha": "83f930dfdde37fcbb364b30094e9895e055ef5ed", "filename": "gcc/testsuite/g++.dg/abi/abi-tag24a.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag24a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag24a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag24a.C?ref=5f00df5925082c7b66da91270f2ed29bf4818c93", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/98481\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -fabi-version=14 }\n+inline namespace N __attribute ((__abi_tag__ (\"myabi\")))\n+{\n+  struct A {};\n+}\n+template <typename T>\n+struct B { typedef int size_type; };\n+struct S1 { B<A>::size_type foo () const { return 1; } };\n+struct S2 { B<A>::size_type foo () const; };\n+int S2::foo () const { return 2; }\n+int (S1::*f1) () const = &S1::foo;\n+int (S2::*f2) () const = &S2::foo;\n+\n+// { dg-final { scan-assembler-not \"_ZNK2S13fooEv\" } }\n+// { dg-final { scan-assembler \"_ZNK2S23fooEv\" } }\n+// { dg-final { scan-assembler \"_ZNK2S13fooB5myabiEv\" } }"}, {"sha": "f25f291dba671d41b3f0f3b8f2ea8c01e1b4cbdc", "filename": "gcc/testsuite/g++.dg/abi/macro0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f00df5925082c7b66da91270f2ed29bf4818c93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C?ref=5f00df5925082c7b66da91270f2ed29bf4818c93", "patch": "@@ -1,6 +1,6 @@\n // This testcase will need to be kept in sync with c_common_post_options.\n // { dg-options \"-fabi-version=0\" }\n \n-#if __GXX_ABI_VERSION != 1015\n+#if __GXX_ABI_VERSION != 1016\n #error \"Incorrect value of __GXX_ABI_VERSION\"\n #endif"}]}