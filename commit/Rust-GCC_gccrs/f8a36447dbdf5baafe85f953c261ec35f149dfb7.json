{"sha": "f8a36447dbdf5baafe85f953c261ec35f149dfb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhMzY0NDdkYmRmNWJhYWZlODVmOTUzYzI2MWVjMzVmMTQ5ZGZiNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-27T13:42:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-27T13:42:37Z"}, "message": "re PR c++/80534 (7.1 RC - internal compiler error: in finish_member_declaration, at cp/semantics.c:2963)\n\n\tPR c++/80534\n\t* tree.c (type_cache_hasher::equal): Only compare\n\tTYPE_TYPELESS_STORAGE flag on non-aggregate element types.\n\t(build_array_type_1): Only hash TYPE_TYPELESS_STORAGE flag on\n\tnon-aggregate element types.\n\t* tree.h (TYPE_TYPELESS_STORAGE): Fix comment typo, add more details\n\tabout the flag on ARRAY_TYPEs in the comment, formatting fix.\nc-family/\n\t* c-common.c (complete_array_type): Only hash TYPE_TYPELESS_STORAGE\n\tflag on non-aggregate element types.\ntestsuite/\n\t* g++.dg/other/pr80534-1.C: New test.\n\t* g++.dg/other/pr80534-2.C: New test.\n\nFrom-SVN: r247334", "tree": {"sha": "69656f2b41db491442a54946801bbcfbc2ded408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69656f2b41db491442a54946801bbcfbc2ded408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8a36447dbdf5baafe85f953c261ec35f149dfb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a36447dbdf5baafe85f953c261ec35f149dfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a36447dbdf5baafe85f953c261ec35f149dfb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a36447dbdf5baafe85f953c261ec35f149dfb7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "304757d2ceec74e12ac43312b7eab9aa3b092126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304757d2ceec74e12ac43312b7eab9aa3b092126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304757d2ceec74e12ac43312b7eab9aa3b092126"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "0197625970976d83f99bb9505e1c02a7df058cd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -1,3 +1,13 @@\n+2017-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/80534\n+\t* tree.c (type_cache_hasher::equal): Only compare\n+\tTYPE_TYPELESS_STORAGE flag on non-aggregate element types.\n+\t(build_array_type_1): Only hash TYPE_TYPELESS_STORAGE flag on\n+\tnon-aggregate element types.\n+\t* tree.h (TYPE_TYPELESS_STORAGE): Fix comment typo, add more details\n+\tabout the flag on ARRAY_TYPEs in the comment, formatting fix.\n+\n 2017-04-27  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80533"}, {"sha": "8f6f55b73bfcb30548674bd5d3cf1187c85e38fc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -1,3 +1,9 @@\n+2017-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/80534\n+\t* c-common.c (complete_array_type): Only hash TYPE_TYPELESS_STORAGE\n+\tflag on non-aggregate element types.\n+\n 2017-04-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-common.c (c_type_hasher, type_hash_table): Remove."}, {"sha": "4c91103f083e231c81e8f8d2fff514139e551ec5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -6371,7 +6371,8 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)\n   inchash::hash hstate;\n   hstate.add_object (TYPE_HASH (unqual_elt));\n   hstate.add_object (TYPE_HASH (TYPE_DOMAIN (main_type)));\n-  hstate.add_flag (TYPE_TYPELESS_STORAGE (main_type));\n+  if (!AGGREGATE_TYPE_P (unqual_elt))\n+    hstate.add_flag (TYPE_TYPELESS_STORAGE (main_type));\n   main_type = type_hash_canon (hstate.end (), main_type);\n \n   /* Fix the canonical type.  */"}, {"sha": "e97e20ca964d8684b5fa9ab8f3793bd3317d238b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -1,3 +1,9 @@\n+2017-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/80534\n+\t* g++.dg/other/pr80534-1.C: New test.\n+\t* g++.dg/other/pr80534-2.C: New test.\n+\n 2017-04-27  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80539"}, {"sha": "a8545a7b65f3ca0f944cc56ed0d6b5dd8f517b27", "filename": "gcc/testsuite/g++.dg/other/pr80534-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80534-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80534-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80534-1.C?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/80534\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+template <int> struct A {\n+  struct type {\n+    char __data[0];\n+  };\n+};\n+template <typename _Tp, typename = _Tp> struct B;\n+template <typename _Tp, typename _Dp> struct B<_Tp[], _Dp> {\n+  _Tp _M_t;\n+  using pointer = int;\n+  void m_fn1() {}\n+};\n+struct C {\n+  using Storage = A<0>::type;\n+  using StorageUniquePointer = B<Storage[]>;\n+  void m_fn2() { storageUniquePointer_.m_fn1(); }\n+  StorageUniquePointer storageUniquePointer_;\n+};"}, {"sha": "e56e7e0a9aef07a4967fa6ccd6acd0ae53dbf8b5", "filename": "gcc/testsuite/g++.dg/other/pr80534-2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80534-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80534-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr80534-2.C?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/80534\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+template <int, int> struct aligned_storage {\n+  struct type {\n+    char __data[0];\n+  };\n+};\n+struct A {};\n+template <typename _Tp, typename = _Tp> struct unique_ptr;\n+template <typename _Tp, typename _Dp> struct unique_ptr<_Tp[], _Dp> {\n+  int _M_t;\n+  void get() { _M_t; }\n+};\n+struct B {\n+  using Association = A;\n+  using Storage = aligned_storage<sizeof(Association), alignof(Association)>::type;\n+  using StorageUniquePointer = unique_ptr<Storage[]>;\n+  void getAssociationsBegin() { storageUniquePointer_.get(); }\n+  StorageUniquePointer storageUniquePointer_;\n+};\n+struct C {};\n+using MainThreadStaticSignalsReceiver = C;\n+aligned_storage<sizeof(MainThreadStaticSignalsReceiver),\n+                alignof(MainThreadStaticSignalsReceiver)>::type\n+    mainThreadStaticSignalsReceiverStorage;"}, {"sha": "bef0071d08777a36ac308e140d662ffa86ea155b", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -7073,9 +7073,16 @@ type_cache_hasher::equal (type_hash *a, type_hash *b)\n         break;\n       return 0;\n     case ARRAY_TYPE:\n-      return (TYPE_TYPELESS_STORAGE (a->type)\n-\t      == TYPE_TYPELESS_STORAGE (b->type)\n-\t      && TYPE_DOMAIN (a->type) == TYPE_DOMAIN (b->type));\n+      /* Don't compare TYPE_TYPELESS_STORAGE flag on aggregates,\n+\t where the flag should be inherited from the element type\n+\t and can change after ARRAY_TYPEs are created; on non-aggregates\n+\t compare it and hash it, scalars will never have that flag set\n+\t and we need to differentiate between arrays created by different\n+\t front-ends or middle-end created arrays.  */\n+      return (TYPE_DOMAIN (a->type) == TYPE_DOMAIN (b->type)\n+\t      && (AGGREGATE_TYPE_P (TREE_TYPE (a->type))\n+\t\t  || (TYPE_TYPELESS_STORAGE (a->type)\n+\t\t      == TYPE_TYPELESS_STORAGE (b->type))));\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n@@ -8386,7 +8393,8 @@ build_array_type_1 (tree elt_type, tree index_type, bool typeless_storage,\n       hstate.add_object (TYPE_HASH (elt_type));\n       if (index_type)\n \thstate.add_object (TYPE_HASH (index_type));\n-      hstate.add_flag (typeless_storage);\n+      if (!AGGREGATE_TYPE_P (elt_type))\n+\thstate.add_flag (TYPE_TYPELESS_STORAGE (t));\n       t = type_hash_canon (hstate.end (), t);\n     }\n "}, {"sha": "6851cd7e0fc0ab4c812c39110e1e344d8e5b7eba", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a36447dbdf5baafe85f953c261ec35f149dfb7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f8a36447dbdf5baafe85f953c261ec35f149dfb7", "patch": "@@ -2037,10 +2037,16 @@ extern machine_mode element_mode (const_tree t);\n \n /* For an ARRAY_TYPE, a RECORD_TYPE, a UNION_TYPE or a QUAL_UNION_TYPE\n    whether the array is typeless storage or the type contains a member\n-   with this flag set.  Such types are excempt from type-based alias\n-   analysis.  */\n+   with this flag set.  Such types are exempt from type-based alias\n+   analysis.  For ARRAY_TYPEs with AGGREGATE_TYPE_P element types\n+   the flag should be inherited from the element type, can change\n+   when type is finalized and because of that should not be used in\n+   type hashing.  For ARRAY_TYPEs with non-AGGREGATE_TYPE_P element types\n+   the flag should not be changed after the array is created and should\n+   be used in type hashing.  */\n #define TYPE_TYPELESS_STORAGE(NODE) \\\n-  (TREE_CHECK4 (NODE, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE, ARRAY_TYPE)->type_common.typeless_storage)\n+  (TREE_CHECK4 (NODE, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE, \\\n+\t\tARRAY_TYPE)->type_common.typeless_storage)\n \n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */"}]}