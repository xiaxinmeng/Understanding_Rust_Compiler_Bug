{"sha": "b928d32b668a27f88fa29204411a98262d9dfa44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyOGQzMmI2NjhhMjdmODhmYTI5MjA0NDExYTk4MjYyZDlkZmE0NA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-03-12T17:53:57Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-03-12T17:53:57Z"}, "message": "tree-ssa-phiopt.c (single_non_singleton_phi_for_edges): New function.\n\n2012-03-12  Andrew Pinski  <apinski@cavium.com>\n\n\t* tree-ssa-phiopt.c (single_non_singleton_phi_for_edges): New function.\n\t(tree_ssa_phiopt_worker): Use single_non_singleton_phi_for_edges.\n\t(value_replacement): Likewise.\n\t(empty_block_p): Check also if the PHIs for the block are empty.\n\n2012-03-12  Andrew Pinski  <apinski@cavium.com>\n\n\t* gcc.dg/tree-ssa/phi-opt-7.c: New testcase.\n\nFrom-SVN: r185254", "tree": {"sha": "8ddbdd3046d09f0c4df8090dc9b2e60b4c9b77a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ddbdd3046d09f0c4df8090dc9b2e60b4c9b77a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b928d32b668a27f88fa29204411a98262d9dfa44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b928d32b668a27f88fa29204411a98262d9dfa44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b928d32b668a27f88fa29204411a98262d9dfa44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b928d32b668a27f88fa29204411a98262d9dfa44/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f986dce2c1dd37ac86ae4da1c0e51c9b516858a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f986dce2c1dd37ac86ae4da1c0e51c9b516858a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f986dce2c1dd37ac86ae4da1c0e51c9b516858a"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "051d7f2507989e2d6fc5e291682f79a282f93ba1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b928d32b668a27f88fa29204411a98262d9dfa44", "patch": "@@ -1,3 +1,10 @@\n+2012-03-12  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* tree-ssa-phiopt.c (single_non_singleton_phi_for_edges): New function.\n+\t(tree_ssa_phiopt_worker): Use single_non_singleton_phi_for_edges.\n+\t(value_replacement): Likewise.\n+\t(empty_block_p): Check also if the PHIs for the block are empty.\n+\n 2012-03-12  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/52148"}, {"sha": "a6bb689a2851ca7f283b3d6495ae302175d3c103", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b928d32b668a27f88fa29204411a98262d9dfa44", "patch": "@@ -1,3 +1,7 @@\n+2012-03-12  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.dg/tree-ssa/phi-opt-7.c: New testcase.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/abi/rtti3.C: Remove alpha*-dec-osf* handling."}, {"sha": "944acf94921fd64b675f09828d1839af5d2b6d24", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-7.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-7.c?ref=b928d32b668a27f88fa29204411a98262d9dfa44", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int g(int,int);\n+int f(int t, int c)\n+{\n+  int d = 0;\n+  int e = 0;\n+  if (t)\n+    {\n+      d = t;\n+      if (c) e = 1;\n+    }\n+  else d = 0, e = 0;\n+  return g(d,e);\n+}\n+\n+/* There should be one ifs as one of them should be changed into\n+   a conditional and the other should be there still.  */\n+/* { dg-final { scan-tree-dump-times \"if\" 1 \"optimized\" }  }*/\n+/* { dg-final { scan-tree-dump-times \"D.\\[0-9\\]*_\\[0-9\\]* = c_\\[0-9\\]*.D. != 0\" 1 \"optimized\"  } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "775926da98065c7695f9be7946b85e8d18c07c66", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-8.c?ref=b928d32b668a27f88fa29204411a98262d9dfa44", "patch": "@@ -19,7 +19,7 @@ int f(int t, int c)\n    but currently is not as PHI-OPT does not reduce the t PHI as we have\n    two phis.  Note this is fixed with\n    http://gcc.gnu.org/ml/gcc-patches/2012-01/msg01195.html .  */\n-/* { dg-final { scan-tree-dump-not \"if\" \"phiopt1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-not \"if\" \"phiopt1\" } } */\n /* { dg-final { scan-tree-dump \"g .t_\\[0-9\\]*.D.,\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump-not \"PHI\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"phiopt1\" } } */"}, {"sha": "798721993cd4ecb4430631dab97199148502b214", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b928d32b668a27f88fa29204411a98262d9dfa44/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=b928d32b668a27f88fa29204411a98262d9dfa44", "patch": "@@ -193,6 +193,33 @@ tree_ssa_cs_elim (void)\n   return tree_ssa_phiopt_worker (true);\n }\n \n+/* Return the singleton PHI in the SEQ of PHIs for edges E0 and E1. */\n+\n+static gimple\n+single_non_singleton_phi_for_edges (gimple_seq seq, edge e0, edge e1)\n+{\n+  gimple_stmt_iterator i;\n+  gimple phi = NULL;\n+  if (gimple_seq_singleton_p (seq))\n+    return gsi_stmt (gsi_start (seq));\n+  for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n+    {\n+      gimple p = gsi_stmt (i);\n+      /* If the PHI arguments are equal then we can skip this PHI. */\n+      if (operand_equal_for_phi_arg_p (gimple_phi_arg_def (p, e0->dest_idx),\n+\t\t\t\t       gimple_phi_arg_def (p, e1->dest_idx)))\n+\tcontinue;\n+\n+      /* If we already have a PHI that has the two edge arguments are\n+\t different, then return it is not a singleton for these PHIs. */\n+      if (phi)\n+\treturn NULL;\n+\n+      phi = p;\n+    }\n+  return phi;\n+}\n+\n /* For conditional store replacement we need a temporary to\n    put the old contents of the memory in.  */\n static tree condstoretemp;\n@@ -316,6 +343,7 @@ tree_ssa_phiopt_worker (bool do_store_elim)\n \t  gimple_seq phis = phi_nodes (bb2);\n \t  gimple_stmt_iterator gsi;\n \t  bool candorest = true;\n+\n \t  /* Value replacement can work with more than one PHI\n \t     so try that first. */\n \t  for (gsi = gsi_start (phis); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -333,21 +361,8 @@ tree_ssa_phiopt_worker (bool do_store_elim)\n \n \t  if (!candorest)\n \t    continue;\n-\t  /* Check to make sure that there is only one non-virtual PHI node.\n-\t     TODO: we could do it with more than one iff the other PHI nodes\n-\t     have the same elements for these two edges.  */\n-\t  phi = NULL;\n-\t  for (gsi = gsi_start (phis); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t    {\n-\t      if (!is_gimple_reg (gimple_phi_result (gsi_stmt (gsi))))\n-\t\tcontinue;\n-\t      if (phi)\n-\t\t{\n-\t\t  phi = NULL;\n-\t\t  break;\n-\t\t}\n-\t      phi = gsi_stmt (gsi);\n-\t    }\n+\t  \n+\t  phi = single_non_singleton_phi_for_edges (phis, e1, e2);\n \t  if (!phi)\n \t    continue;\n \n@@ -447,6 +462,8 @@ empty_block_p (basic_block bb)\n {\n   /* BB must have no executable statements.  */\n   gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+  if (phi_nodes (bb))\n+    return false;\n   if (gsi_end_p (gsi))\n     return true;\n   if (is_gimple_debug (gsi_stmt (gsi)))\n@@ -736,10 +753,11 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \targ = arg1;\n \n       /* If the middle basic block was empty or is defining the\n-\t PHI arguments and this is a singleton phi then we can remove\n-         the middle basic block. */\n+\t PHI arguments and this is a single phi where the args are different\n+\t for the edges e0 and e1 then we can remove the middle basic block. */\n       if (emtpy_or_with_defined_p\n-\t  && gimple_seq_singleton_p (phi_nodes (gimple_bb (phi))))\n+\t  && single_non_singleton_phi_for_edges (phi_nodes (gimple_bb (phi)),\n+\t\t\t\t\t\t\t    e0, e1))\n \t{\n           replace_phi_edge_with_variable (cond_bb, e1, phi, arg);\n \t  /* Note that we optimized this PHI.  */\n@@ -754,7 +772,8 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t    {\n \t      fprintf (dump_file, \"PHI \");\n \t      print_generic_expr (dump_file, gimple_phi_result (phi), 0);\n-\t      fprintf (dump_file, \" reduced for COND_EXPR in block %d to \", cond_bb->index);\n+\t      fprintf (dump_file, \" reduced for COND_EXPR in block %d to \",\n+\t\t       cond_bb->index);\n \t      print_generic_expr (dump_file, arg, 0);\n \t      fprintf (dump_file, \".\\n\");\n             }"}]}