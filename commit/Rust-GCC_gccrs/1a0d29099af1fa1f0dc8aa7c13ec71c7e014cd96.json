{"sha": "1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEwZDI5MDk5YWYxZmExZjBkYzhhYTdjMTNlYzcxYzdlMDE0Y2Q5Ng==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-06-05T19:41:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-16T09:18:05Z"}, "message": "[Ada] Spurious accessibility error on allocator in generic instance\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Remove flawed test for\n\twhether \"statically deeper\" accessibility rules apply to a given\n\ttarget type and instead use the new routine\n\tStatically_Deeper_Relation_Applies.\n\t(Statically_Deeper_Relation_Applies): Created to centralize the\n\tcalculation of whether a target type within a conversion must\n\thave static accessibility checks.\n\t* sem_ch13.adb (Check_One_Function): Minor comment revision.", "tree": {"sha": "92ba419d2288c42101e7bc78b5ba769734ce76b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ba419d2288c42101e7bc78b5ba769734ce76b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04292126821fad06d0f13c5faaa46447798dc5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04292126821fad06d0f13c5faaa46447798dc5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04292126821fad06d0f13c5faaa46447798dc5a8"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "c35fea3eae5dd93b7e762d096e068e40aea9d797", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "patch": "@@ -11305,6 +11305,11 @@ package body Exp_Ch4 is\n       --  True iff Present (Effective_Extra_Accessibility (Id)) successfully\n       --  evaluates to True.\n \n+      function Statically_Deeper_Relation_Applies (Targ_Typ : Entity_Id)\n+        return Boolean;\n+      --  Given a target type for a conversion, determine whether the\n+      --  statically deeper accessibility rules apply to it.\n+\n       --------------------------\n       -- Discrete_Range_Check --\n       --------------------------\n@@ -11887,6 +11892,25 @@ package body Exp_Ch4 is\n          end if;\n       end Has_Extra_Accessibility;\n \n+      ----------------------------------------\n+      -- Statically_Deeper_Relation_Applies --\n+      ----------------------------------------\n+\n+      function Statically_Deeper_Relation_Applies (Targ_Typ : Entity_Id)\n+        return Boolean\n+      is\n+      begin\n+         --  The case where the target type is an anonymous access type is\n+         --  ignored since they have different semantics and get covered by\n+         --  various runtime checks depending on context.\n+\n+         --  Note, the current implementation of this predicate is incomplete\n+         --  and doesn't fully reflect the rules given in RM 3.10.2 (19) and\n+         --  (19.1) ???\n+\n+         return Ekind (Targ_Typ) /= E_Anonymous_Access_Type;\n+      end Statically_Deeper_Relation_Applies;\n+\n    --  Start of processing for Expand_N_Type_Conversion\n \n    begin\n@@ -12133,21 +12157,7 @@ package body Exp_Ch4 is\n          --  Note: warnings are issued by the analyzer for the instance cases\n \n          elsif In_Instance_Body\n-\n-           --  The case where the target type is an anonymous access type of\n-           --  a discriminant is excluded, because the level of such a type\n-           --  depends on the context and currently the level returned for such\n-           --  types is zero, resulting in warnings about check failures\n-           --  in certain legal cases involving class-wide interfaces as the\n-           --  designated type (some cases, such as return statements, are\n-           --  checked at run time, but not clear if these are handled right\n-           --  in general, see 3.10.2(12/2-12.5/3) ???).\n-\n-           and then\n-             not (Ekind (Target_Type) = E_Anonymous_Access_Type\n-                   and then Present (Associated_Node_For_Itype (Target_Type))\n-                   and then Nkind (Associated_Node_For_Itype (Target_Type)) =\n-                                                  N_Discriminant_Specification)\n+           and then Statically_Deeper_Relation_Applies (Target_Type)\n            and then\n              Type_Access_Level (Operand_Type) > Type_Access_Level (Target_Type)\n          then"}, {"sha": "01f2a4cc9a091b4f43a42454a691300998c7048f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1a0d29099af1fa1f0dc8aa7c13ec71c7e014cd96", "patch": "@@ -5488,7 +5488,7 @@ package body Sem_Ch13 is\n                end if;\n             end if;\n \n-            --  All checks succeeded.\n+            --  All checks succeeded\n \n             Indexing_Found := True;\n          end Check_One_Function;"}]}