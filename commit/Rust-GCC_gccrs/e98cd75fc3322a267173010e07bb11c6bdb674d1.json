{"sha": "e98cd75fc3322a267173010e07bb11c6bdb674d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4Y2Q3NWZjMzMyMmEyNjcxNzMwMTBlMDdiYjExYzZiZGI2NzRkMQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:06:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:06:22Z"}, "message": "exp_imgv.adb (Expand_Image_Attribute): Disable the optimized expansion of user-defined enumeration types when...\n\ngcc/ada/\n\n2017-09-25  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_imgv.adb (Expand_Image_Attribute): Disable the optimized\n\texpansion of user-defined enumeration types when the generation of\n\tnames for enumeration literals is suppressed.\n\n2017-09-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* libgnarl/s-taprop__linux.adb: Minor reformatting.\n\n2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Resolve_Aspect_Expressions): Do not resolve identifiers\n\tthat appear as selector names of parameter associations, as these are\n\tnever resolved by visibility.\n\n2017-09-25  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_res.adb (Resolve_Entry): Generate reference for index entities.\n\ngcc/testsuite/\n\n2017-09-25  Justin Squirek  <squirek@adacore.com>\n\n\t* gnat.dg/entry_family.adb: New testcase\n\nFrom-SVN: r253139", "tree": {"sha": "bd8dd493b931350dff7e70d84fa390d60b80bb1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8dd493b931350dff7e70d84fa390d60b80bb1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98cd75fc3322a267173010e07bb11c6bdb674d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98cd75fc3322a267173010e07bb11c6bdb674d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98cd75fc3322a267173010e07bb11c6bdb674d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98cd75fc3322a267173010e07bb11c6bdb674d1/comments", "author": null, "committer": null, "parents": [{"sha": "49742f9981bcb0c58c668b0ccc047a14d7865d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49742f9981bcb0c58c668b0ccc047a14d7865d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49742f9981bcb0c58c668b0ccc047a14d7865d59"}], "stats": {"total": 127, "additions": 98, "deletions": 29}, "files": [{"sha": "44ce6dbad70e3f77c96d4bd0067ddfd25427f6b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -1,3 +1,23 @@\n+2017-09-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Disable the optimized\n+\texpansion of user-defined enumeration types when the generation of\n+\tnames for enumeration literals is suppressed.\n+\n+2017-09-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* libgnarl/s-taprop__linux.adb: Minor reformatting.\n+\n+2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Resolve_Aspect_Expressions): Do not resolve identifiers\n+\tthat appear as selector names of parameter associations, as these are\n+\tnever resolved by visibility.\n+\n+2017-09-25  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Entry): Generate reference for index entities.\n+\n 2017-09-25  Doug Rupp  <rupp@adacore.com>\n \n \t* libgnarl/s-taprop__linux.adb (Compute_Base_Monotonic_Clock): Refine."}, {"sha": "0a400ec43138af50d4aa5fc4d377ed52e2e24a94", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -174,7 +174,7 @@ package body Exp_Imgv is\n    -- Expand_Image_Attribute --\n    ----------------------------\n \n-   --  For all cases other than user defined enumeration types, the scheme\n+   --  For all cases other than user-defined enumeration types, the scheme\n    --  is as follows. First we insert the following code:\n \n    --    Snn : String (1 .. rt'Width);\n@@ -270,10 +270,10 @@ package body Exp_Imgv is\n \n       function Is_User_Defined_Enumeration_Type\n         (Typ : Entity_Id) return Boolean;\n-      --  Return True if Typ is an user-defined enumeration type\n+      --  Return True if Typ is a user-defined enumeration type\n \n       procedure Expand_User_Defined_Enumeration_Image;\n-      --  Expand attribute 'Image in user-defined enumeration types avoiding\n+      --  Expand attribute 'Image in user-defined enumeration types, avoiding\n       --  string copy.\n \n       -------------------------------------------\n@@ -314,7 +314,7 @@ package body Exp_Imgv is\n                    Prefix         => New_Occurrence_Of (Ptyp, Loc),\n                    Expressions    => New_List (Expr)))));\n \n-         --  Compute the index of the string start generating:\n+         --  Compute the index of the string start, generating:\n          --    P2 : constant Natural := call_put_enumN (P1);\n \n          Append_To (Ins_List,\n@@ -331,7 +331,7 @@ package body Exp_Imgv is\n                    Expressions =>\n                      New_List (New_Occurrence_Of (P1_Id, Loc))))));\n \n-         --  Compute the index of the next value generating:\n+         --  Compute the index of the next value, generating:\n          --    P3 : constant Natural := call_put_enumN (P1 + 1);\n \n          declare\n@@ -455,11 +455,13 @@ package body Exp_Imgv is\n          Rewrite_Object_Image (N, Pref, Name_Image, Standard_String);\n          return;\n \n-      --  Enable speed optimized expansion of user-defined enumeration types\n-      --  if we are compiling with optimizations enabled. Otherwise the call\n-      --  will be expanded into a call to the runtime library.\n+      --  Enable speed-optimized expansion of user-defined enumeration types\n+      --  if we are compiling with optimizations enabled and enumeration type\n+      --  literals are generated. Otherwise the call will be expanded into a\n+      --  call to the runtime library.\n \n       elsif Optimization_Level > 0\n+        and then not Global_Discard_Names\n         and then Is_User_Defined_Enumeration_Type (Root_Type (Entity (Pref)))\n       then\n          Expand_User_Defined_Enumeration_Image;\n@@ -561,7 +563,7 @@ package body Exp_Imgv is\n          Imid := RE_Image_Floating_Point;\n          Tent := Standard_Long_Long_Float;\n \n-      --  Only other possibility is user defined enumeration type\n+      --  Only other possibility is user-defined enumeration type\n \n       else\n          if Discard_Names (First_Subtype (Ptyp))\n@@ -856,7 +858,7 @@ package body Exp_Imgv is\n       elsif Is_Real_Type (Rtyp) then\n          Vid := RE_Value_Real;\n \n-      --  Only other possibility is user defined enumeration type\n+      --  Only other possibility is user-defined enumeration type\n \n       else\n          pragma Assert (Is_Enumeration_Type (Rtyp));\n@@ -929,7 +931,7 @@ package body Exp_Imgv is\n          return;\n       end if;\n \n-      --  Fall through for all cases except user defined enumeration type\n+      --  Fall through for all cases except user-defined enumeration type\n       --  and decimal types, with Vid set to the Id of the entity for the\n       --  Value routine and Args set to the list of parameters for the call.\n \n@@ -1246,7 +1248,7 @@ package body Exp_Imgv is\n    --  because the base type is always static, and hence the expression\n    --  in the else is reduced to an integer literal.\n \n-   --  For user defined enumeration types, typ'Width expands into\n+   --  For user-defined enumeration types, typ'Width expands into\n \n    --    Result_Type (Width_Enumeration_NN\n    --                  (typS,\n@@ -1371,7 +1373,7 @@ package body Exp_Imgv is\n          Analyze_And_Resolve (N, Typ);\n          return;\n \n-      --  User defined enumeration types\n+      --  User-defined enumeration types\n \n       else\n          pragma Assert (Is_Enumeration_Type (Rtyp));"}, {"sha": "77fe26f0b7207002eaf940ebf82aedc07a92d66a", "filename": "gcc/ada/libgnarl/s-taprop__linux.adb", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taprop__linux.adb?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -165,10 +165,9 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Handler (signo : Signal);\n \n    function Compute_Base_Monotonic_Clock return Duration;\n-   --  The monotonic clock epoch is set to some undetermined time\n-   --  in the past (typically system boot time).  In order to use the\n-   --  monotonic clock for absolute time, the offset from a known epoch\n-   --  is needed.\n+   --  The monotonic clock epoch is set to some undetermined time in the past\n+   --  (typically system boot time). In order to use the monotonic clock for\n+   --  absolute time, the offset from a known epoch is needed.\n \n    function GNAT_pthread_condattr_setup\n      (attr : access pthread_condattr_t) return C.int;\n@@ -288,14 +287,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Res_A = 0);\n \n       for I in 1 .. 10 loop\n-         --  Guard against a leap second which will cause CLOCK_REALTIME\n-         --  to jump backwards.  In the extrenmely unlikely event we call\n-         --  clock_gettime before and after the jump the epoch result will\n-         --  be off slightly.\n-         --  Use only results where the tv_sec values match for the sake\n-         --  of convenience.\n-         --  Also try to calculate the most accurate\n-         --  epoch by taking the minimum difference of 10 tries.\n+         --  Guard against a leap second that will cause CLOCK_REALTIME to jump\n+         --  backwards. In the extrenmely unlikely event we call clock_gettime\n+         --  before and after the jump the epoch, the result will be off\n+         --  slightly.\n+         --  Use only results where the tv_sec values match, for the sake of\n+         --  convenience.\n+         --  Also try to calculate the most accurate epoch by taking the\n+         --  minimum difference of 10 tries.\n \n          Res_B := clock_gettime\n           (clock_id => OSC.CLOCK_REALTIME, tp => TS_Bef'Unchecked_Access);\n@@ -309,13 +308,13 @@ package body System.Task_Primitives.Operations is\n \n          if (TS_Bef0.tv_sec /= TS_Aft0.tv_sec and then\n              TS_Bef.tv_sec  = TS_Aft.tv_sec)\n-            --  The calls to clock_gettime before the loop were no good.\n+            --  The calls to clock_gettime before the loop were no good\n             or else\n             (TS_Bef0.tv_sec = TS_Aft0.tv_sec and then\n              TS_Bef.tv_sec  = TS_Aft.tv_sec and then\n             (TS_Aft.tv_nsec  - TS_Bef.tv_nsec <\n              TS_Aft0.tv_nsec - TS_Bef0.tv_nsec))\n-            --  The most recent calls to clock_gettime were more better.\n+            --  The most recent calls to clock_gettime were better\n          then\n             TS_Bef0 := TS_Bef;\n             TS_Aft0 := TS_Aft;\n@@ -328,7 +327,7 @@ package body System.Task_Primitives.Operations is\n       Aft := To_Duration (TS_Aft0);\n \n       return Bef / 2 + Aft / 2 - Mon;\n-      --  Distribute the division to avoid potential type overflow someday.\n+      --  Distribute the division, to avoid potential type overflow someday\n    end Compute_Base_Monotonic_Clock;\n \n    --------------"}, {"sha": "a352f3c8bde03cfffeb57f435b5b982e04d92650", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -12797,7 +12797,14 @@ package body Sem_Ch13 is\n \n             return Skip;\n \n-         elsif Nkind (N) = N_Identifier and then Chars (N) /= Chars (E) then\n+         --  Resolve identifiers that are not selectors in parameter\n+         --  associations (these are never resolved by visibility).\n+\n+         elsif Nkind (N) = N_Identifier\n+           and then Chars (N) /= Chars (E)\n+           and then (Nkind (Parent (N)) /= N_Parameter_Association\n+                      or else N /= Selector_Name (Parent (N)))\n+         then\n             Find_Direct_Name (N);\n \n             --  In ASIS mode we must analyze overloaded identifiers to ensure"}, {"sha": "ada86c2af74e9eb48cf6f93721da7ae1d50bd28b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -7474,6 +7474,15 @@ package body Sem_Res is\n          Index := First (Expressions (Entry_Name));\n          Resolve (Index, Entry_Index_Type (Nam));\n \n+         --  Generate a reference for the index entity when the index is not a\n+         --  literal.\n+\n+         if Nkind (Index) in N_Has_Entity\n+           and then Nkind (Entity (Index)) in N_Entity\n+         then\n+            Generate_Reference (Entity (Index), Nam, ' ');\n+         end if;\n+\n          --  Up to this point the expression could have been the actual in a\n          --  simple entry call, and be given by a named association.\n "}, {"sha": "6a25a14582951c61fee1365bbcd87687239dd855", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -1,3 +1,7 @@\n+2017-09-25  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnat.dg/entry_family.adb: New testcase\n+\n 2017-09-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/82267"}, {"sha": "21d208ff06c57ab27f373c32ceb57debae59de78", "filename": "gcc/testsuite/gnat.dg/entry_family.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Ftestsuite%2Fgnat.dg%2Fentry_family.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98cd75fc3322a267173010e07bb11c6bdb674d1/gcc%2Ftestsuite%2Fgnat.dg%2Fentry_family.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fentry_family.adb?ref=e98cd75fc3322a267173010e07bb11c6bdb674d1", "patch": "@@ -0,0 +1,28 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatwu\" }\n+\n+with Ada.Numerics.Discrete_Random; use Ada.Numerics;\n+\n+procedure Entry_Family is\n+   protected Family is\n+      entry Call (Boolean);\n+   end Family;\n+\n+   protected body Family is\n+      entry Call (for P in Boolean) when True is\n+      begin\n+         null;\n+      end Call;\n+\n+   end Family;\n+\n+   package Random_Boolean is new Discrete_Random (Result_Subtype => Boolean);\n+   use Random_Boolean;\n+\n+   Boolean_Generator : Generator;\n+\n+   B : constant Boolean := Random (Boolean_Generator);\n+\n+begin\n+   Family.Call (B);\n+end Entry_Family;"}]}