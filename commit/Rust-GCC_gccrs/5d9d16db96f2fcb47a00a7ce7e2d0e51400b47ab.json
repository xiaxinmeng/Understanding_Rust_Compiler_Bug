{"sha": "5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "node_id": "C_kwDOANBUbNoAKDVkOWQxNmRiOTZmMmZjYjQ3YTAwYTdjZTdlMmQwZTUxNDAwYjQ3YWI", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2021-11-07T13:40:11Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2021-11-16T18:07:50Z"}, "message": "fortran: simplify elemental arguments walking\n\nThis adds two functions working with the wrapper struct gfc_dummy_arg\nand makes usage of them to simplify a bit the walking of elemental\nprocedure arguments for scalarization.  As information about dummy arguments\ncan be obtained from the actual argument through the just-introduced\nassociated_dummy field, there is no need to carry around the procedure\ninterface and walk dummy arguments manually together with actual arguments.\n\ngcc/fortran/ChangeLog:\n\t* interface.c (gfc_dummy_arg_get_typespec,\n\tgfc_dummy_arg_is_optional): New functions.\n\t* gfortran.h (gfc_dummy_arg_get_typespec,\n\tgfc_dummy_arg_is_optional): Declare them.\n\t* trans.h (gfc_ss_info::dummy_arg): Use the wrapper type\n\tas declaration type.\n\t* trans-array.c (gfc_scalar_elemental_arg_saved_as_reference):\n\tuse gfc_dummy_arg_get_typespec function to get the type.\n\t(gfc_walk_elemental_function_args): Remove proc_ifc argument.\n\tGet info about the dummy arg using the associated_dummy field.\n\t* trans-array.h (gfc_walk_elemental_function_args): Update declaration.\n\t* trans-intrinsic.c (gfc_walk_intrinsic_function):\n\tUpdate call to gfc_walk_elemental_function_args.\n\t* trans-stmt.c (gfc_trans_call): Ditto.\n\t(get_proc_ifc_for_call): Remove.", "tree": {"sha": "718310f59f42f530df5e0028651fbf76b9f565b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/718310f59f42f530df5e0028651fbf76b9f565b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/comments", "author": null, "committer": null, "parents": [{"sha": "5888512f24121032a438e3aaf10dc93550dc2819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5888512f24121032a438e3aaf10dc93550dc2819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5888512f24121032a438e3aaf10dc93550dc2819"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "4230b5ae2dcc14cb34fcaf11387c62559c3f0c69", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -2334,6 +2334,10 @@ struct gfc_dummy_arg\n #define gfc_get_dummy_arg() XCNEW (gfc_dummy_arg)\n \n \n+const gfc_typespec & gfc_dummy_arg_get_typespec (gfc_dummy_arg &);\n+bool gfc_dummy_arg_is_optional (gfc_dummy_arg &);\n+\n+\n /* Specifies the various kinds of check functions used to verify the\n    argument lists of intrinsic functions. fX with X an integer refer\n    to check functions of intrinsics with X arguments. f1m is used for"}, {"sha": "9194fe745edd7154e6d5c3b595d4e933d5358445", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -5537,3 +5537,37 @@ gfc_get_formal_from_actual_arglist (gfc_symbol *sym,\n       f = &((*f)->next);\n     }\n }\n+\n+\n+const gfc_typespec &\n+gfc_dummy_arg_get_typespec (gfc_dummy_arg & dummy_arg)\n+{\n+  switch (dummy_arg.intrinsicness)\n+    {\n+    case GFC_INTRINSIC_DUMMY_ARG:\n+      return dummy_arg.u.intrinsic->ts;\n+\n+    case GFC_NON_INTRINSIC_DUMMY_ARG:\n+      return dummy_arg.u.non_intrinsic->sym->ts;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+\n+bool\n+gfc_dummy_arg_is_optional (gfc_dummy_arg & dummy_arg)\n+{\n+  switch (dummy_arg.intrinsicness)\n+    {\n+    case GFC_INTRINSIC_DUMMY_ARG:\n+      return dummy_arg.u.intrinsic->optional;\n+\n+    case GFC_NON_INTRINSIC_DUMMY_ARG:\n+      return dummy_arg.u.non_intrinsic->sym->attr.optional;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}"}, {"sha": "d37c1e7ad7f0463b32222ad3dfeceff4da7b3dd1", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -3010,7 +3010,8 @@ gfc_scalar_elemental_arg_saved_as_reference (gfc_ss_info * ss_info)\n   /* If the expression is of polymorphic type, it's actual size is not known,\n      so we avoid copying it anywhere.  */\n   if (ss_info->data.scalar.dummy_arg\n-      && ss_info->data.scalar.dummy_arg->ts.type == BT_CLASS\n+      && gfc_dummy_arg_get_typespec (*ss_info->data.scalar.dummy_arg).type\n+\t == BT_CLASS\n       && ss_info->expr->ts.type == BT_CLASS)\n     return true;\n \n@@ -11521,9 +11522,8 @@ arg_evaluated_for_scalarization (gfc_intrinsic_sym *function,\n gfc_ss *\n gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n \t\t\t\t  gfc_intrinsic_sym *intrinsic_sym,\n-\t\t\t\t  gfc_symbol *proc_ifc, gfc_ss_type type)\n+\t\t\t\t  gfc_ss_type type)\n {\n-  gfc_formal_arglist *dummy_arg;\n   int scalar;\n   gfc_ss *head;\n   gfc_ss *tail;\n@@ -11532,15 +11532,11 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n   head = gfc_ss_terminator;\n   tail = NULL;\n \n-  if (proc_ifc)\n-    dummy_arg = gfc_sym_get_dummy_args (proc_ifc);\n-  else\n-    dummy_arg = NULL;\n-\n   int arg_num = 0;\n   scalar = 1;\n   for (; arg; arg = arg->next)\n     {\n+      gfc_dummy_arg * const dummy_arg = arg->associated_dummy;\n       if (!arg->expr\n \t  || arg->expr->expr_type == EXPR_NULL\n \t  || !arg_evaluated_for_scalarization (intrinsic_sym, *arg, arg_num))\n@@ -11554,13 +11550,13 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n \t  newss = gfc_get_scalar_ss (head, arg->expr);\n \t  newss->info->type = type;\n \t  if (dummy_arg)\n-\t    newss->info->data.scalar.dummy_arg = dummy_arg->sym;\n+\t    newss->info->data.scalar.dummy_arg = dummy_arg;\n \t}\n       else\n \tscalar = 0;\n \n       if (dummy_arg != NULL\n-\t  && dummy_arg->sym->attr.optional\n+\t  && gfc_dummy_arg_is_optional (*dummy_arg)\n \t  && arg->expr->expr_type == EXPR_VARIABLE\n \t  && (gfc_expr_attr (arg->expr).optional\n \t      || gfc_expr_attr (arg->expr).allocatable\n@@ -11577,8 +11573,6 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n \n loop_continue:\n       arg_num++;\n-      if (dummy_arg != NULL)\n-\tdummy_arg = dummy_arg->next;\n     }\n \n   if (scalar)\n@@ -11638,7 +11632,6 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n       ss = gfc_walk_elemental_function_args (old_ss,\n \t\t\t\t\t     expr->value.function.actual,\n \t\t\t\t\t     gfc_get_intrinsic_for_expr (expr),\n-\t\t\t\t\t     gfc_get_proc_ifc_for_expr (expr),\n \t\t\t\t\t     GFC_SS_REFERENCE);\n       if (ss != old_ss\n \t  && (comp"}, {"sha": "9c4bd06d41446acb0691af08062913f0e2765fc9", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -87,7 +87,7 @@ gfc_ss *gfc_walk_array_ref (gfc_ss *, gfc_expr *, gfc_ref * ref);\n /* Walk the arguments of an elemental function.  */\n gfc_ss *gfc_walk_elemental_function_args (gfc_ss *, gfc_actual_arglist *,\n \t\t\t\t\t  gfc_intrinsic_sym *,\n-\t\t\t\t\t  gfc_symbol *, gfc_ss_type);\n+\t\t\t\t\t  gfc_ss_type);\n /* Walk an intrinsic function.  */\n gfc_ss *gfc_walk_intrinsic_function (gfc_ss *, gfc_expr *,\n \t\t\t\t     gfc_intrinsic_sym *);"}, {"sha": "c1b51f4da266b31d74564109835be385cc0c954d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -11085,7 +11085,7 @@ gfc_walk_intrinsic_function (gfc_ss * ss, gfc_expr * expr,\n   if (isym->elemental)\n     return gfc_walk_elemental_function_args (ss, expr->value.function.actual,\n \t\t\t\t\t     expr->value.function.isym,\n-\t\t\t\t\t     NULL, GFC_SS_SCALAR);\n+\t\t\t\t\t     GFC_SS_SCALAR);\n \n   if (expr->rank == 0)\n     return ss;"}, {"sha": "1fc6d3adda544a22eed1ab5b1eac5547ee6f33cf", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -375,27 +375,6 @@ get_intrinsic_for_code (gfc_code *code)\n }\n \n \n-/* Get the interface symbol for the procedure corresponding to the given call.\n-   We can't get the procedure symbol directly as we have to handle the case\n-   of (deferred) type-bound procedures.  */\n-\n-static gfc_symbol *\n-get_proc_ifc_for_call (gfc_code *c)\n-{\n-  gfc_symbol *sym;\n-\n-  gcc_assert (c->op == EXEC_ASSIGN_CALL || c->op == EXEC_CALL);\n-\n-  sym = gfc_get_proc_ifc_for_expr (c->expr1);\n-\n-  /* Fall back/last resort try.  */\n-  if (sym == NULL)\n-    sym = c->resolved_sym;\n-\n-  return sym;\n-}\n-\n-\n /* Translate the CALL statement.  Builds a call to an F95 subroutine.  */\n \n tree\n@@ -422,7 +401,6 @@ gfc_trans_call (gfc_code * code, bool dependency_check,\n   if (code->resolved_sym->attr.elemental)\n     ss = gfc_walk_elemental_function_args (ss, code->ext.actual,\n \t\t\t\t\t   get_intrinsic_for_code (code),\n-\t\t\t\t\t   get_proc_ifc_for_call (code),\n \t\t\t\t\t   GFC_SS_REFERENCE);\n \n   /* MVBITS is inlined but needs the dependency checking found here.  */"}, {"sha": "15012a336ffa19ed2e7e66a17dab53b2feaf94a6", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "patch": "@@ -266,8 +266,8 @@ typedef struct gfc_ss_info\n     struct\n     {\n       /* If the scalar is passed as actual argument to an (elemental) procedure,\n-\t this is the symbol of the corresponding dummy argument.  */\n-      gfc_symbol *dummy_arg;\n+\t this is the corresponding dummy argument.  */\n+      gfc_dummy_arg *dummy_arg;\n       tree value;\n       /* Tells that the scalar is a reference to a variable that might\n \t be present on the lhs, so that we should evaluate the value"}]}