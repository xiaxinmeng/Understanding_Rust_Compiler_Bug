{"sha": "e5aac417cb727715f1d592aca1e05b25e4de1ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVhYWM0MTdjYjcyNzcxNWYxZDU5MmFjYTFlMDViMjVlNGRlMWJhOA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@imgtec.com", "date": "2015-07-06T17:29:33Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2015-07-06T17:29:33Z"}, "message": "config.gcc: Add fused-madd.opt.\n\n2015-07-06  Steve Ellcey  <sellcey@imgtec.com>\n\n\t* config.gcc <mips*-*-*>: Add fused-madd.opt.\n\t* config/mips/mips.opt (mfused-madd): Remove.\n\t* config/mips/mips.c (mips_rtx_costs): Update cost calculations.\n\t* config/mips/mips.h (TARGET_MIPS8000): New.\n\t(ISA_HAS_FP_MADD4_MSUB4): Remove.\n\t(ISA_HAS_FP_MADDF_MSUBF): Remove.\n\t(ISA_HAS_FP_MADD3_MSUB3): Remove.\n\t(ISA_HAS_NMADD4_NMSUB4): Remove.\n\t(ISA_HAS_NMADD3_NMSUB3): Remove.\n\t(ISA_HAS_FUSED_MADD4): New.\n\t(ISA_HAS_UNFUSED_MADD4): New.\n\t(ISA_HAS_FUSED_MADDF): New.\n\t(ISA_HAS_FUSED_MADD3): New.\n\t* config/mips/mips.md: (fma<mode>4) Change from insn to expand.\n\t(*fma<mode>4_madd3) New.\n\t(*fma<mode>4_madd4) New.\n\t(*fma<mode>4_maddf) New.\n\t(fms<mode>4) New.\n\t(*fms<mode>4_msub3) New.\n\t(*fms<mode>4_msub4) New.\n\t(fnma<mode>4) New.\n\t(*fnma<mode>4_nmadd3) New.\n\t(*fnma<mode>4_nmadd4) New.\n\t(fnms<mode>4) New.\n\t(*fnms<mode>4_nmsub3) New.\n\t(*fnms<mode>4_nmsub4) New.\n\t(*madd4<mode>) Modify to be unfused only.\n\t(*msub4<mode>) Modify to be unfused only.\n\t(*nmadd4<mode>) Modify to be unfused only.\n\t(*nmsub4<mode>) Modify to be unfused only.\n\t(*madd3<mode>) Remove.\n\t(*msub3<mode>) Remove.\n\t(*nmadd3<mode>) Remove.\n\t(*nmsub3<mode>) Remove.\n\t(*nmadd3<mode>_fastmath) Remove.\n\t(*nmsub3<mode>_fastmath) Remove.\n\t(*nmadd4<mode>_fastmath) Update condition.\n\t(*nmsub4<mode>_fastmath) Update condition.\n\nFrom-SVN: r225468", "tree": {"sha": "eeb68eda2252eab992fcaa371458ca9022d1d8a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeb68eda2252eab992fcaa371458ca9022d1d8a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5aac417cb727715f1d592aca1e05b25e4de1ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5aac417cb727715f1d592aca1e05b25e4de1ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5aac417cb727715f1d592aca1e05b25e4de1ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5aac417cb727715f1d592aca1e05b25e4de1ba8/comments", "author": null, "committer": null, "parents": [{"sha": "25a57facdda63f94a915caece613985c972463a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a57facdda63f94a915caece613985c972463a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a57facdda63f94a915caece613985c972463a8"}], "stats": {"total": 364, "additions": 234, "deletions": 130}, "files": [{"sha": "7c73d50d052497a0107e086e0815977711b06ea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5aac417cb727715f1d592aca1e05b25e4de1ba8", "patch": "@@ -1,3 +1,44 @@\n+2015-07-06  Steve Ellcey  <sellcey@imgtec.com>\n+\n+\t* config.gcc <mips*-*-*>: Add fused-madd.opt.\n+\t* config/mips/mips.opt (mfused-madd): Remove.\n+\t* config/mips/mips.c (mips_rtx_costs): Update cost calculations.\n+\t* config/mips/mips.h (TARGET_MIPS8000): New.\n+\t(ISA_HAS_FP_MADD4_MSUB4): Remove.\n+\t(ISA_HAS_FP_MADDF_MSUBF): Remove.\n+\t(ISA_HAS_FP_MADD3_MSUB3): Remove.\n+\t(ISA_HAS_NMADD4_NMSUB4): Remove.\n+\t(ISA_HAS_NMADD3_NMSUB3): Remove.\n+\t(ISA_HAS_FUSED_MADD4): New.\n+\t(ISA_HAS_UNFUSED_MADD4): New.\n+\t(ISA_HAS_FUSED_MADDF): New.\n+\t(ISA_HAS_FUSED_MADD3): New.\n+\t* config/mips/mips.md: (fma<mode>4) Change from insn to expand.\n+\t(*fma<mode>4_madd3) New.\n+\t(*fma<mode>4_madd4) New.\n+\t(*fma<mode>4_maddf) New.\n+\t(fms<mode>4) New.\n+\t(*fms<mode>4_msub3) New.\n+\t(*fms<mode>4_msub4) New.\n+\t(fnma<mode>4) New.\n+\t(*fnma<mode>4_nmadd3) New.\n+\t(*fnma<mode>4_nmadd4) New.\n+\t(fnms<mode>4) New.\n+\t(*fnms<mode>4_nmsub3) New.\n+\t(*fnms<mode>4_nmsub4) New.\n+\t(*madd4<mode>) Modify to be unfused only.\n+\t(*msub4<mode>) Modify to be unfused only.\n+\t(*nmadd4<mode>) Modify to be unfused only.\n+\t(*nmsub4<mode>) Modify to be unfused only.\n+\t(*madd3<mode>) Remove.\n+\t(*msub3<mode>) Remove.\n+\t(*nmadd3<mode>) Remove.\n+\t(*nmsub3<mode>) Remove.\n+\t(*nmadd3<mode>_fastmath) Remove.\n+\t(*nmsub3<mode>_fastmath) Remove.\n+\t(*nmadd4<mode>_fastmath) Update condition.\n+\t(*nmsub4<mode>_fastmath) Update condition.\n+\n 2015-07-06  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR target/65956"}, {"sha": "900aa18c95d3fed5b25bc4f44af9bc2e06dfa569", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e5aac417cb727715f1d592aca1e05b25e4de1ba8", "patch": "@@ -418,7 +418,7 @@ microblaze*-*-*)\n mips*-*-*)\n \tcpu_type=mips\n \textra_headers=\"loongson.h\"\n-\textra_options=\"${extra_options} g.opt mips/mips-tables.opt\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt mips/mips-tables.opt\"\n \t;;\n nds32*)\n \tcpu_type=nds32"}, {"sha": "ce21a0fd215108b04d5b8f84f950f6ccc7294300", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e5aac417cb727715f1d592aca1e05b25e4de1ba8", "patch": "@@ -4054,13 +4054,11 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       return true;\n \n     case MINUS:\n-      if (float_mode_p\n-\t  && (ISA_HAS_NMADD4_NMSUB4 || ISA_HAS_NMADD3_NMSUB3)\n-\t  && TARGET_FUSED_MADD\n-\t  && !HONOR_SIGNED_ZEROS (mode))\n+      if (float_mode_p && ISA_HAS_UNFUSED_MADD4 && !HONOR_SIGNED_ZEROS (mode))\n \t{\n-\t  /* See if we can use NMADD or NMSUB.  See mips.md for the\n-\t     associated patterns.  */\n+\t  /* See if we can use NMADD or NMSUB via the *nmadd4<mode>_fastmath\n+\t     or *nmsub4<mode>_fastmath patterns.  These patterns check for\n+\t     HONOR_SIGNED_ZEROS so we check here too.  */\n \t  rtx op0 = XEXP (x, 0);\n \t  rtx op1 = XEXP (x, 1);\n \t  if (GET_CODE (op0) == MULT && GET_CODE (XEXP (op0, 0)) == NEG)\n@@ -4087,9 +4085,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t{\n \t  /* If this is part of a MADD or MSUB, treat the PLUS as\n \t     being free.  */\n-\t  if ((ISA_HAS_FP_MADD4_MSUB4 || ISA_HAS_FP_MADD3_MSUB3)\n-\t      && TARGET_FUSED_MADD\n-\t      && GET_CODE (XEXP (x, 0)) == MULT)\n+\t  if (ISA_HAS_UNFUSED_MADD4 && GET_CODE (XEXP (x, 0)) == MULT)\n \t    *total = 0;\n \t  else\n \t    *total = mips_cost->fp_add;\n@@ -4121,13 +4117,10 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       return true;\n \n     case NEG:\n-      if (float_mode_p\n-\t  && (ISA_HAS_NMADD4_NMSUB4 || ISA_HAS_NMADD3_NMSUB3)\n-\t  && TARGET_FUSED_MADD\n-\t  && HONOR_SIGNED_ZEROS (mode))\n+      if (float_mode_p && ISA_HAS_UNFUSED_MADD4)\n \t{\n-\t  /* See if we can use NMADD or NMSUB.  See mips.md for the\n-\t     associated patterns.  */\n+\t  /* See if we can use NMADD or NMSUB via the *nmadd4<mode> or\n+\t     *nmsub4<mode> patterns.  */\n \t  rtx op = XEXP (x, 0);\n \t  if ((GET_CODE (op) == PLUS || GET_CODE (op) == MINUS)\n \t      && GET_CODE (XEXP (op, 0)) == MULT)\n@@ -4147,8 +4140,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       return false;\n \n     case FMA:\n-      if (ISA_HAS_FP_MADDF_MSUBF)\n-\t*total = mips_fp_mult_cost (mode);\n+      *total = mips_fp_mult_cost (mode);\n       return false;\n \n     case MULT:"}, {"sha": "7a6f9171ac7e7fcfb764b4a965959dcee2c0de5f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e5aac417cb727715f1d592aca1e05b25e4de1ba8", "patch": "@@ -236,6 +236,7 @@ struct mips_cpu_info {\n #define TARGET_MIPS5500             (mips_arch == PROCESSOR_R5500)\n #define TARGET_MIPS5900             (mips_arch == PROCESSOR_R5900)\n #define TARGET_MIPS7000             (mips_arch == PROCESSOR_R7000)\n+#define TARGET_MIPS8000             (mips_arch == PROCESSOR_R8000)\n #define TARGET_MIPS9000             (mips_arch == PROCESSOR_R9000)\n #define TARGET_OCTEON\t\t    (mips_arch == PROCESSOR_OCTEON\t\\\n \t\t\t\t     || mips_arch == PROCESSOR_OCTEON2\t\\\n@@ -998,22 +999,21 @@ struct mips_cpu_info {\n /* Integer multiply-accumulate instructions should be generated.  */\n #define GENERATE_MADD_MSUB\t(TARGET_IMADD && !TARGET_MIPS16)\n \n-/* ISA has floating-point madd and msub instructions 'd = a * b [+-] c'.  */\n-#define ISA_HAS_FP_MADD4_MSUB4  ISA_HAS_FP4\n+/* ISA has 4 operand fused madd instructions of the form\n+   'd = [+-] (a * b [+-] c)'.  */\n+#define ISA_HAS_FUSED_MADD4\tTARGET_MIPS8000\n \n-/* ISA has floating-point MADDF and MSUBF instructions 'd = d [+-] a * b'.  */\n-#define ISA_HAS_FP_MADDF_MSUBF  (mips_isa_rev >= 6)\n+/* ISA has 4 operand unfused madd instructions of the form\n+   'd = [+-] (a * b [+-] c)'.  */\n+#define ISA_HAS_UNFUSED_MADD4\t(ISA_HAS_FP4 && !TARGET_MIPS8000)\n \n-/* ISA has floating-point madd and msub instructions 'c = a * b [+-] c'.  */\n-#define ISA_HAS_FP_MADD3_MSUB3  TARGET_LOONGSON_2EF\n+/* ISA has 3 operand r6 fused madd instructions of the form\n+   'c = c [+-] (a * b)'.  */\n+#define ISA_HAS_FUSED_MADDF\t(mips_isa_rev >= 6)\n \n-/* ISA has floating-point nmadd and nmsub instructions\n-   'd = -((a * b) [+-] c)'.  */\n-#define ISA_HAS_NMADD4_NMSUB4\tISA_HAS_FP4\n-\n-/* ISA has floating-point nmadd and nmsub instructions\n-   'c = -((a * b) [+-] c)'.  */\n-#define ISA_HAS_NMADD3_NMSUB3\tTARGET_LOONGSON_2EF\n+/* ISA has 3 operand loongson fused madd instructions of the form\n+   'c = [+-] (a * b [+-] c)'.  */\n+#define ISA_HAS_FUSED_MADD3\tTARGET_LOONGSON_2EF\n \n /* ISA has floating-point RECIP.fmt and RSQRT.fmt instructions.  The\n    MIPS64 rev. 1 ISA says that RECIP.D and RSQRT.D are unpredictable when"}, {"sha": "4f5692ce662e78a08147d9959785d4d1c4a0b426", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 170, "deletions": 95, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=e5aac417cb727715f1d592aca1e05b25e4de1ba8", "patch": "@@ -2475,164 +2475,239 @@\n \n ;; Floating point multiply accumulate instructions.\n \n-;; The various multiply accumulate instructions can be used even when\n-;; HONOR_NANS is true because while IEEE 754-2008 requires the negate\n-;; operation to negate the sign of a NAN and the MIPS neg instruction does\n-;; not do this, the multiply and add (or minus) parts of these instructions\n-;; have no requirement on how the sign of a NAN is handled and so the final\n-;; sign bit of the entire operation is undefined.\n+(define_expand \"fma<mode>4\"\n+  [(set (match_operand:ANYF 0 \"register_operand\")\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\")))]\n+  \"ISA_HAS_FUSED_MADDF || ISA_HAS_FUSED_MADD3 || ISA_HAS_FUSED_MADD4\")\n \n-(define_insn \"*madd4<mode>\"\n+(define_insn \"*fma<mode>4_madd3\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(plus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n-  \"ISA_HAS_FP_MADD4_MSUB4 && TARGET_FUSED_MADD\"\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+  \"ISA_HAS_FUSED_MADD3\"\n+  \"madd.<fmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n+\n+(define_insn \"*fma<mode>4_madd4\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_FUSED_MADD4\"\n   \"madd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"fma<mode>4\"\n+(define_insn \"*fma<mode>4_maddf\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n \t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n \t\t  (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n-  \"ISA_HAS_FP_MADDF_MSUBF\"\n+  \"ISA_HAS_FUSED_MADDF\"\n   \"maddf.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*madd3<mode>\"\n+;; The fms, fnma, and fnms instructions can be used even when HONOR_NANS\n+;; is true because while IEEE 754-2008 requires the negate operation to\n+;; negate the sign of a NAN and the MIPS neg instruction does not do this,\n+;; the fma part of the instruction has no requirement on how the sign of\n+;; a NAN is handled and so the final sign bit of the entire operation is\n+;; undefined.\n+\n+(define_expand \"fms<mode>4\"\n+  [(set (match_operand:ANYF 0 \"register_operand\")\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\")\n+\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\"))))]\n+  \"(ISA_HAS_FUSED_MADD3 || ISA_HAS_FUSED_MADD4)\")\n+\n+(define_insn \"*fms<mode>4_msub3\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(plus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t\t   (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n-  \"ISA_HAS_FP_MADD3_MSUB3 && TARGET_FUSED_MADD\"\n-  \"madd.<fmt>\\t%0,%1,%2\"\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n+  \"ISA_HAS_FUSED_MADD3\"\n+  \"msub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*msub4<mode>\"\n+(define_insn \"*fms<mode>4_msub4\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(minus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t       (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t\t    (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n-  \"ISA_HAS_FP_MADD4_MSUB4 && TARGET_FUSED_MADD\"\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_FUSED_MADD4\"\n   \"msub.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*msub3<mode>\"\n+;; fnma is defined in GCC as (fma (neg op1) op2 op3)\n+;; (-op1 * op2) + op3 ==> -(op1 * op2) + op3 ==> -((op1 * op2) - op3)\n+;; The mips nmsub instructions implement -((op1 * op2) - op3)\n+;; This transformation means we may return the wrong signed zero\n+;; so we check HONOR_SIGNED_ZEROS.\n+\n+(define_expand \"fnma<mode>4\"\n+  [(set (match_operand:ANYF 0 \"register_operand\")\n+\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\"))\n+\t\t  (match_operand:ANYF 2 \"register_operand\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\")))]\n+  \"(ISA_HAS_FUSED_MADD3 || ISA_HAS_FUSED_MADD4)\n+   && !HONOR_SIGNED_ZEROS (<MODE>mode)\")\n+\n+(define_insn \"*fnma<mode>4_nmsub3\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(minus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t       (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t\t    (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n-  \"ISA_HAS_FP_MADD3_MSUB3 && TARGET_FUSED_MADD\"\n-  \"msub.<fmt>\\t%0,%1,%2\"\n+\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+  \"ISA_HAS_FUSED_MADD3 && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"nmsub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmadd4<mode>\"\n+(define_insn \"*fnma<mode>4_nmsub4\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(neg:ANYF (plus:ANYF\n-\t\t   (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n-  \"ISA_HAS_NMADD4_NMSUB4\n-   && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (<MODE>mode)\"\n-  \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n+\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_FUSED_MADD4 && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"nmsub.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmadd3<mode>\"\n+;; fnms is defined as: (fma (neg op1) op2 (neg op3))\n+;; ((-op1) * op2) - op3 ==> -(op1 * op2) - op3 ==> -((op1 * op2) + op3)\n+;; The mips nmadd instructions implement -((op1 * op2) + op3)\n+;; This transformation means we may return the wrong signed zero\n+;; so we check HONOR_SIGNED_ZEROS.\n+\n+(define_expand \"fnms<mode>4\"\n+  [(set (match_operand:ANYF 0 \"register_operand\")\n+\t(fma:ANYF\n+\t  (neg:ANYF (match_operand:ANYF 1 \"register_operand\"))\n+\t  (match_operand:ANYF 2 \"register_operand\")\n+\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\"))))]\n+  \"(ISA_HAS_FUSED_MADD3 || ISA_HAS_FUSED_MADD4)\n+   && !HONOR_SIGNED_ZEROS (<MODE>mode)\")\n+\n+(define_insn \"*fnms<mode>4_nmadd3\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(neg:ANYF (plus:ANYF\n-\t\t   (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t\t   (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n-  \"ISA_HAS_NMADD3_NMSUB3\n-   && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+\t(fma:ANYF\n+\t  (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n+  \"ISA_HAS_FUSED_MADD3 && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmadd4<mode>_fastmath\"\n+(define_insn \"*fnms<mode>4_nmadd4\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(minus:ANYF\n-\t (mult:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n-  \"ISA_HAS_NMADD4_NMSUB4\n-   && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+\t(fma:ANYF\n+\t  (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_FUSED_MADD4 && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmadd3<mode>_fastmath\"\n+;; Non-fused Floating point multiply accumulate instructions.\n+\n+;; These instructions are not fused and round in between the multiply\n+;; and the add (or subtract) so they are equivalent to the separate\n+;; multiply and add/sub instructions.\n+\n+(define_insn \"*madd4<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(minus:ANYF\n-\t (mult:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\"))\n-\t (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n-  \"ISA_HAS_NMADD3_NMSUB3\n-   && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n-  \"nmadd.<fmt>\\t%0,%1,%2\"\n+\t(plus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_UNFUSED_MADD4\"\n+  \"madd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmsub4<mode>\"\n+(define_insn \"*msub4<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(neg:ANYF (minus:ANYF\n-\t\t   (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t\t      (match_operand:ANYF 3 \"register_operand\" \"f\"))\n-\t\t   (match_operand:ANYF 1 \"register_operand\" \"f\"))))]\n-  \"ISA_HAS_NMADD4_NMSUB4\n-   && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (<MODE>mode)\"\n-  \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n+\t(minus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t       (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t    (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_UNFUSED_MADD4\"\n+  \"msub.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmsub3<mode>\"\n+;; Like with the fused fms, fnma, and fnms instructions, these unfused\n+;; instructions can be used even if HONOR_NANS is set because while\n+;; IEEE 754-2008 requires the negate operation to negate the sign of a\n+;; NAN and the MIPS neg instruction does not do this, the multiply and\n+;; add (or subtract) part of the instruction has no requirement on how\n+;; the sign of a NAN is handled and so the final sign bit of the entire\n+;; operation is undefined.\n+\n+(define_insn \"*nmadd4<mode>\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(neg:ANYF (plus:ANYF\n+\t\t   (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_UNFUSED_MADD4\"\n+  \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n+\n+(define_insn \"*nmsub4<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(neg:ANYF (minus:ANYF\n-\t\t   (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t\t      (match_operand:ANYF 3 \"register_operand\" \"f\"))\n-\t\t   (match_operand:ANYF 1 \"register_operand\" \"0\"))))]\n-  \"ISA_HAS_NMADD3_NMSUB3\n-   && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (<MODE>mode)\"\n-  \"nmsub.<fmt>\\t%0,%1,%2\"\n+\t\t   (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_UNFUSED_MADD4\"\n+  \"nmsub.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmsub4<mode>_fastmath\"\n+;; Fast-math Non-fused Floating point multiply accumulate instructions.\n+\n+;; These instructions are not fused but the expressions they match are\n+;; not exactly what the instruction implements in the sense that they\n+;; may not generate the properly signed zeros.\n+\n+;; This instruction recognizes  ((-op1) * op2) - op3 and generates an\n+;; nmadd which is really -((op1 * op2) + op3).  They are equivalent\n+;; except for the sign bit when the result is zero or NaN.\n+\n+(define_insn \"*nmadd4<mode>_fastmath\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(minus:ANYF\n-\t (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t    (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n-  \"ISA_HAS_NMADD4_NMSUB4\n-   && TARGET_FUSED_MADD\n+\t  (mult:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t\t     (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t  (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_UNFUSED_MADD4\n    && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n-  \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n+  \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmsub3<mode>_fastmath\"\n+;; This instruction recognizes (op1 - (op2 * op3) and generates an\n+;; nmsub which is really -((op2 * op3) - op1).  They are equivalent\n+;; except for the sign bit when the result is zero or NaN.\n+\n+(define_insn \"*nmsub4<mode>_fastmath\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(minus:ANYF\n-\t (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t    (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n-  \"ISA_HAS_NMADD3_NMSUB3\n-   && TARGET_FUSED_MADD\n+\t  (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t  (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t     (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_UNFUSED_MADD4\n    && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n-  \"nmsub.<fmt>\\t%0,%1,%2\"\n+  \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n "}, {"sha": "348c6e03f1ef5d571b70c0380c2ca7f3f4e9820a", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5aac417cb727715f1d592aca1e05b25e4de1ba8/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=e5aac417cb727715f1d592aca1e05b25e4de1ba8", "patch": "@@ -209,10 +209,6 @@ mflush-func=\n Target RejectNegative Joined Var(mips_cache_flush_func) Init(CACHE_FLUSH_FUNC)\n -mflush-func=FUNC\tUse FUNC to flush the cache before calling stack trampolines\n \n-mfused-madd\n-Target Report Var(TARGET_FUSED_MADD) Init(1)\n-Generate floating-point multiply-add instructions\n-\n mabs=\n Target RejectNegative Joined Enum(mips_ieee_754_value) Var(mips_abs) Init(MIPS_IEEE_754_DEFAULT)\n -mabs=MODE\tSelect the IEEE 754 ABS/NEG instruction execution mode"}]}