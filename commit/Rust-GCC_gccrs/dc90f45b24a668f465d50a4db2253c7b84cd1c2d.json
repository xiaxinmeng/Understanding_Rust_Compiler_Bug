{"sha": "dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5MGY0NWIyNGE2NjhmNDY1ZDUwYTRkYjIyNTNjN2I4NGNkMWMyZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-15T22:31:17Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-02-15T22:31:17Z"}, "message": "re PR c/26494 (-pedantic-errors can be overridden by -W*)\n\n2007-02-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/26494\n\t* doc/invoke.texi (Warning Options): Remove\n\t-Werror-implicit-function-declaration.\n\t(Wimplicit-function-declaration): Update description.\n\t* opts.c (common_handle_option): Move handling of -Werror=* to...\n\t(enable_warning_as_error): ...here.\n\t* opts.h (enable_warning_as_error): Declare.\n\t* c-decl.c (implicit_decl_warning): Unless\n\t-Wno-implicit-function-declaration is given, emit a pedwarn if\n\t-std=c99 or emit a warning if -Wimplicit-function-declaration.\n\t* c.opt (Wimplicit-function-declaration): Replace\n\tmesg_implicit_function_declaration with\n\twarn_implicit_function_declaration.\n\t* c-opts.c (c_common_handle_option):\n\t-Werror-implicit-function-declaration is exactly equal as\n\t-Werror=implicit-function-declaration.\n\t(set_Wimplicit): Replace mesg_implicit_function_declaration with\n\twarn_implicit_function_declaration.\n\t(c_common_post_options): -Wimplict-function-declaration is enabled\n\tby default by -std=c99, otherwise is disabled by default.\n\t* c-objc-common.c (c_objc_common_init): Remove flawed logic.\ntestsuite/\n\t* gcc.dg/Wimplicit-function-declaration-c89.c: New.\n\t* gcc.dg/Wimplicit-function-declaration-c89-default.c: New.\n\t* gcc.dg/Wimplicit-function-declaration-c89-pedantic.c: New.\n\t* gcc.dg/Wimplicit-function-declaration-c99.c: New.\n\t* gcc.dg/Wimplicit-function-declaration-c99-pedantic.c: New.\n\t* gcc.dg/Werror-implicit-function-declaration.c: New.\n\nFrom-SVN: r122017", "tree": {"sha": "73dcde30921d36f76037d1d0106b2271a8aa2058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73dcde30921d36f76037d1d0106b2271a8aa2058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/comments", "author": null, "committer": null, "parents": [{"sha": "214931020be4420e7a5eb537813dc918b9cada58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214931020be4420e7a5eb537813dc918b9cada58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214931020be4420e7a5eb537813dc918b9cada58"}], "stats": {"total": 199, "additions": 136, "deletions": 63}, "files": [{"sha": "70efcfe011698fe4baef21f4234c4d126bc47c57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -1,3 +1,27 @@\n+2007-02-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/26494\n+\t* doc/invoke.texi (Warning Options): Remove\n+\t-Werror-implicit-function-declaration.\n+\t(Wimplicit-function-declaration): Update description.\n+\t* opts.c (common_handle_option): Move handling of -Werror=* to...\n+\t(enable_warning_as_error): ...here.\n+\t* opts.h (enable_warning_as_error): Declare.\n+\t* c-decl.c (implicit_decl_warning): Unless\n+\t-Wno-implicit-function-declaration is given, emit a pedwarn if\n+\t-std=c99 or emit a warning if -Wimplicit-function-declaration.\n+\t* c.opt (Wimplicit-function-declaration): Replace\n+\tmesg_implicit_function_declaration with\n+\twarn_implicit_function_declaration.\n+\t* c-opts.c (c_common_handle_option):\n+\t-Werror-implicit-function-declaration is exactly equal as\n+\t-Werror=implicit-function-declaration.\n+\t(set_Wimplicit): Replace mesg_implicit_function_declaration with\n+\twarn_implicit_function_declaration.\n+\t(c_common_post_options): -Wimplict-function-declaration is enabled\n+\tby default by -std=c99, otherwise is disabled by default.\n+\t* c-objc-common.c (c_objc_common_init): Remove flawed logic.\n+\n 2007-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_modify_expr): During gimplification, attach a"}, {"sha": "ed0bf9cb25d3431f30a709081fb0754e7da4703d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -2376,18 +2376,16 @@ pushdecl_top_level (tree x)\n static void\n implicit_decl_warning (tree id, tree olddecl)\n {\n-  void (*diag) (const char *, ...) ATTRIBUTE_GCC_CDIAG(1,2);\n-  switch (mesg_implicit_function_declaration)\n+  if (warn_implicit_function_declaration)\n     {\n-    case 0: return;\n-    case 1: diag = warning0; break;\n-    case 2: diag = error;   break;\n-    default: gcc_unreachable ();\n+      if (flag_isoc99)\n+\tpedwarn (G_(\"implicit declaration of function %qE\"), id);\n+      else \n+\twarning (OPT_Wimplicit_function_declaration, \n+\t\t G_(\"implicit declaration of function %qE\"), id);\n+      if (olddecl)\n+\tlocate_old_decl (olddecl, inform);\n     }\n-\n-  diag (G_(\"implicit declaration of function %qE\"), id);\n-  if (olddecl)\n-    locate_old_decl (olddecl, diag);\n }\n \n /* Generate an implicit declaration for identifier FUNCTIONID as a"}, {"sha": "7604bc284db82b9f9c1f18a19e3c07db45c58cfa", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -135,16 +135,6 @@ c_objc_common_init (void)\n      want an enhanced ObjC implementation.  */\n   diagnostic_format_decoder (global_dc) = &c_tree_printer;\n \n-  /* If still unspecified, make it match -std=c99\n-     (allowing for -pedantic-errors).  */\n-  if (mesg_implicit_function_declaration < 0)\n-    {\n-      if (flag_isoc99)\n-\tmesg_implicit_function_declaration = flag_pedantic_errors ? 2 : 1;\n-      else\n-\tmesg_implicit_function_declaration = 0;\n-    }\n-\n   return true;\n }\n "}, {"sha": "76ad8271d7222551b3bafe9b0d4b0206c91227ad", "filename": "gcc/c-opts.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -451,8 +451,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       global_dc->warning_as_error_requested = value;\n       break;\n \n-    case OPT_Werror_implicit_function_declaration:\n-      mesg_implicit_function_declaration = 2;\n+    case OPT_Werror_implicit_function_declaration: \n+      /* For backward compatibility, this is the same as\n+\t -Werror=implicit-function-declaration.  */\n+      enable_warning_as_error (\"implicit-function-declaration\", value, CL_C | CL_ObjC); \n       break;\n \n     case OPT_Wformat:\n@@ -1079,6 +1081,10 @@ c_common_post_options (const char **pfilename)\n \t       \"-Wformat-security ignored without -Wformat\");\n     }\n \n+  /* -Wimplicit-function-declaration is enabled by default for C99.  */\n+  if (warn_implicit_function_declaration == -1) \n+    warn_implicit_function_declaration = flag_isoc99;\n+\n   /* C99 requires special handling of complex multiplication and division;\n      -ffast-math and -fcx-limited-range are handled in process_options.  */\n   if (flag_isoc99)\n@@ -1570,13 +1576,7 @@ set_Wimplicit (int on)\n {\n   warn_implicit = on;\n   warn_implicit_int = on;\n-  if (on)\n-    {\n-      if (mesg_implicit_function_declaration != 2)\n-\tmesg_implicit_function_declaration = 1;\n-    }\n-  else\n-    mesg_implicit_function_declaration = 0;\n+  warn_implicit_function_declaration = on;\n }\n \n /* Args to -d specify what to dump.  Silently ignore"}, {"sha": "512882bc64b70290a911075ded3c2d7ff07221aa", "filename": "gcc/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -194,7 +194,7 @@ C ObjC C++ ObjC++\n \n Werror-implicit-function-declaration\n C ObjC RejectNegative Warning\n-Make implicit function declarations an error\n+This switch is deprecated; use -Werror=implicit-function-declaration instead\n \n Wfloat-equal\n C ObjC C++ ObjC++ Var(warn_float_equal) Warning\n@@ -235,7 +235,7 @@ Wimplicit\n C ObjC C++ ObjC++ Warning\n \n Wimplicit-function-declaration\n-C ObjC Var(mesg_implicit_function_declaration) Init(-1) Warning\n+C ObjC Var(warn_implicit_function_declaration) Init(-1) Warning\n Warn about implicit function declarations\n \n Wimplicit-int"}, {"sha": "3bc4d9001849435912d846990f278289d9100a8f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -229,7 +229,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wconversion -Wcoverage-mismatch -Wno-deprecated-declarations @gol\n -Wdisabled-optimization  -Wno-div-by-zero  @gol\n -Wempty-body  -Wno-endif-labels @gol\n--Werror  -Werror-* -Werror-implicit-function-declaration @gol\n+-Werror  -Werror=* @gol\n -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-extra-args -Wformat-nonliteral @gol\n -Wformat-security  -Wformat-y2k @gol\n@@ -2626,13 +2626,13 @@ Warn when a declaration does not specify a type.\n This warning is enabled by @option{-Wall}.\n \n @item -Wimplicit-function-declaration\n-@itemx -Werror-implicit-function-declaration\n @opindex Wimplicit-function-declaration\n-@opindex Werror-implicit-function-declaration\n-Give a warning (or error) whenever a function is used before being\n-declared.  The form @option{-Wno-error-implicit-function-declaration}\n-is not supported.\n-This warning is enabled by @option{-Wall} (as a warning, not an error).\n+@opindex Wno-implicit-function-declaration\n+Give a warning whenever a function is used before being declared. In\n+C99 mode (@option{-std=c99} or @option{-std=gnu99}), this warning is\n+enabled by default and it is made into an error by\n+@option{-pedantic-errors}. This warning is also enabled by\n+@option{-Wall}.\n \n @item -Wimplicit\n @opindex Wimplicit"}, {"sha": "c84bc2a3c3593fe59356ed7e266f6572b6e34da7", "filename": "gcc/opts.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -1067,31 +1067,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Werror_:\n-      {\n-\tchar *new_option;\n-\tint option_index;\n-\n-\tnew_option = XNEWVEC (char, strlen (arg) + 2);\n-\tnew_option[0] = 'W';\n-\tstrcpy (new_option+1, arg);\n-\toption_index = find_opt (new_option, lang_mask);\n-\tif (option_index == N_OPTS)\n-\t  {\n-\t    error (\"-Werror-%s: No option -%s\", arg, new_option);\n-\t  }\n-\telse\n-\t  {\n-\t    int kind = value ? DK_ERROR : DK_WARNING;\n-\t    diagnostic_classify_diagnostic (global_dc, option_index, kind);\n-\n-\t    /* -Werror=foo implies -Wfoo.  */\n-\t    if (cl_options[option_index].var_type == CLVC_BOOLEAN\n-\t\t&& cl_options[option_index].flag_var\n-\t\t&& kind == DK_ERROR)\n-\t      *(int *) cl_options[option_index].flag_var = 1;\n-\t    free (new_option);\n-\t  }\n-      }\n+      enable_warning_as_error (arg, value, lang_mask);\n       break;\n \n     case OPT_Wextra:\n@@ -1607,3 +1583,34 @@ get_option_state (int option, struct cl_option_state *state)\n     }\n   return true;\n }\n+\n+/* Enable a warning option as an error.  This is used by -Werror= and\n+   also by legacy Werror-implicit-function-declaration.  */\n+\n+void\n+enable_warning_as_error (const char *arg, int value, unsigned int lang_mask)\n+{\n+  char *new_option;\n+  int option_index;\n+\n+  new_option = XNEWVEC (char, strlen (arg) + 2);\n+  new_option[0] = 'W';\n+  strcpy (new_option + 1, arg);\n+  option_index = find_opt (new_option, lang_mask);\n+  if (option_index == N_OPTS)\n+    {\n+      error (\"-Werror=%s: No option -%s\", arg, new_option);\n+    }\n+  else\n+    {\n+      int kind = value ? DK_ERROR : DK_WARNING;\n+      diagnostic_classify_diagnostic (global_dc, option_index, kind);\n+      \n+      /* -Werror=foo implies -Wfoo.  */\n+      if (cl_options[option_index].var_type == CLVC_BOOLEAN\n+\t  && cl_options[option_index].flag_var\n+\t  && kind == DK_ERROR)\n+\t*(int *) cl_options[option_index].flag_var = 1;\n+    }\n+  free (new_option);\n+}"}, {"sha": "485cc22e20e0e11499ac3fef098b95b1779013f7", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -104,4 +104,6 @@ extern void decode_options (unsigned int argc, const char **argv);\n extern int option_enabled (int opt_idx);\n extern bool get_option_state (int, struct cl_option_state *);\n \n+extern void enable_warning_as_error (const char *arg, int value,\n+\t\t\t\t     unsigned int lang_mask);\n #endif"}, {"sha": "67076ea1c804dc9abf187d1e51255303260dade4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -1,3 +1,13 @@\n+2007-02-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/26494\n+\t* gcc.dg/Wimplicit-function-declaration-c89.c: New.\n+\t* gcc.dg/Wimplicit-function-declaration-c89-default.c: New.\n+\t* gcc.dg/Wimplicit-function-declaration-c89-pedantic.c: New.\n+\t* gcc.dg/Wimplicit-function-declaration-c99.c: New.\n+\t* gcc.dg/Wimplicit-function-declaration-c99-pedantic.c: New.\n+\t* gcc.dg/Werror-implicit-function-declaration.c: New.\n+\n 2007-02-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/28943"}, {"sha": "f8f0f81d40816c1fac58277bc25ab98e1ee012ed", "filename": "gcc/testsuite/gcc.dg/Werror-implicit-function-declaration.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89 -Werror-implicit-function-declaration\" } */\n+\n+void f(void) \n+{ \n+  puts(\"Hello\"); /* { dg-error \"error: implicit declaration of function\" } */\n+}"}, {"sha": "c725ffaca4670f5abb37cced660a3931699ed16c", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c89-default.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-default.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89\" } */\n+\n+void f(void) \n+{ \n+  puts(\"Hello\"); /* { dg-bogus \"warning: implicit declaration of function\" } */\n+}"}, {"sha": "f476e6af18702be6a85692f3e4a065edace2f2b8", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c89-pedantic.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89-pedantic.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89 -pedantic-errors -Wimplicit-function-declaration\" } */\n+\n+void f(void) \n+{ \n+  puts(\"Hello\"); /* { dg-warning \"warning: implicit declaration of function\" } */\n+}"}, {"sha": "6f2916d0ab301d7719093039a13fe3ee08010b71", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c89.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c89.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89 -Wimplicit-function-declaration\" } */\n+\n+void f(void) \n+{ \n+  puts(\"Hello\"); /* { dg-warning \"warning: implicit declaration of function\" } */\n+}"}, {"sha": "6ea5eeda3f1de1c4733ebe3be301308258844940", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c99-pedantic.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99-pedantic.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors -Wall\" } */\n+\n+void f(void) \n+{ \n+  puts(\"Hello\"); /* { dg-error \"error: implicit declaration of function\" } */\n+}"}, {"sha": "004fc5ac5af281260d7a59a373affec60d310955", "filename": "gcc/testsuite/gcc.dg/Wimplicit-function-declaration-c99.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90f45b24a668f465d50a4db2253c7b84cd1c2d/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWimplicit-function-declaration-c99.c?ref=dc90f45b24a668f465d50a4db2253c7b84cd1c2d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+void f(void) \n+{ \n+  puts(\"Hello\"); /* { dg-warning \"warning: implicit declaration of function\" } */\n+}"}]}