{"sha": "ddc9b5ee13cd686c8674f92d46045563c06a23ea", "node_id": "C_kwDOANBUbNoAKGRkYzliNWVlMTNjZDY4NmM4Njc0ZjkyZDQ2MDQ1NTYzYzA2YTIzZWE", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2023-04-06T13:44:30Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2023-04-06T14:21:42Z"}, "message": "arm: mve: fix auto-inc generation [PR107674]\n\nMy change r13-416-g485a0ae0982abe caused the compiler to stop\ngenerating auto-inc operations on mve loads and stores.  The fix\nis to check whether there is a replacement register available\nwhen in strict mode and the register is still a pseudo.\n\ngcc:\n\n\tPR target/107674\n\t* config/arm/arm.cc (arm_effective_regno): New function.\n\t(mve_vector_mem_operand): Use it.", "tree": {"sha": "40f2402eac2e02132aa951f07d32f5423c40bc75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f2402eac2e02132aa951f07d32f5423c40bc75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc9b5ee13cd686c8674f92d46045563c06a23ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9b5ee13cd686c8674f92d46045563c06a23ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc9b5ee13cd686c8674f92d46045563c06a23ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9b5ee13cd686c8674f92d46045563c06a23ea/comments", "author": null, "committer": null, "parents": [{"sha": "7f056d5f4a0b9e29561d0375d5b4ad42c9f3f61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f056d5f4a0b9e29561d0375d5b4ad42c9f3f61e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f056d5f4a0b9e29561d0375d5b4ad42c9f3f61e"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "bf7ff9a97048c62a360e04945c97b6a4d71cbb03", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9b5ee13cd686c8674f92d46045563c06a23ea/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9b5ee13cd686c8674f92d46045563c06a23ea/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=ddc9b5ee13cd686c8674f92d46045563c06a23ea", "patch": "@@ -13639,6 +13639,19 @@ arm_coproc_mem_operand_no_writeback (rtx op)\n   return arm_coproc_mem_operand_wb (op, 0);\n }\n \n+/* In non-STRICT mode, return the register number; in STRICT mode return\n+   the hard regno or the replacement if it won't be a mem.  Otherwise, return\n+   the original pseudo number.  */\n+static int\n+arm_effective_regno (rtx op, bool strict)\n+{\n+  gcc_assert (REG_P (op));\n+  if (!strict || REGNO (op) < FIRST_PSEUDO_REGISTER\n+      || !reg_renumber || reg_renumber[REGNO (op)] < 0)\n+    return REGNO (op);\n+  return reg_renumber[REGNO (op)];\n+}\n+\n /* This function returns TRUE on matching mode and op.\n 1. For given modes, check for [Rn], return TRUE for Rn <= LO_REGS.\n 2. For other modes, check for [Rn], return TRUE for Rn < R15 (expect R13).  */\n@@ -13651,7 +13664,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n   /* Match: (mem (reg)).  */\n   if (REG_P (op))\n     {\n-      int reg_no = REGNO (op);\n+      reg_no = arm_effective_regno (op, strict);\n       return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n \t       ? reg_no <= LAST_LO_REGNUM\n \t       : reg_no < LAST_ARM_REGNUM)\n@@ -13662,7 +13675,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n   if (code == POST_INC || code == PRE_DEC\n       || code == PRE_INC || code == POST_DEC)\n     {\n-      reg_no = REGNO (XEXP (op, 0));\n+      reg_no = arm_effective_regno (XEXP (op, 0), strict);\n       return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n \t       ? reg_no <= LAST_LO_REGNUM\n \t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n@@ -13678,7 +13691,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n \t   || (reload_completed && code == PLUS && REG_P (XEXP (op, 0))\n \t       && GET_CODE (XEXP (op, 1)) == CONST_INT))\n     {\n-      reg_no = REGNO (XEXP (op, 0));\n+      reg_no = arm_effective_regno (XEXP (op, 0), strict);\n       if (code == PLUS)\n \tval = INTVAL (XEXP (op, 1));\n       else"}]}