{"sha": "03459f403ea66cc694767e8ca351cf6550e148a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0NTlmNDAzZWE2NmNjNjk0NzY3ZThjYTM1MWNmNjU1MGUxNDhhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-12T10:43:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-12T10:43:18Z"}, "message": "[multiple changes]\n\n2012-07-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_disp.adb: Minor reformatting\n\t* s-bytswa.ads: Minor comment update.\n\n2012-07-12  Vincent Pucci  <pucci@adacore.com>\n\n\t* exp_ch9.adb (Build_Lock_Free_Unprotected_Subprogram_Body):\n\tAtomic_Load_N replaced by Lock_Free_Read_N. Atomic_Compare_Exchange_N\n\treplaced by Lock_Free_Try_Write_N.\n\tRenaming of several local variables. For\n\tprocedure, Expected_Comp declaration moved to the declaration\n\tlist of the procedure.\n\t* rtsfind.ads: RE_Atomic_Compare_Exchange_8,\n\tRE_Atomic_Compare_Exchange_16, RE_Atomic_Compare_Exchange_32,\n\tRE_Atomic_Compare_Exchange_64, RE_Atomic_Load_8,\n\tRE_Atomic_Load_16, RE_Atomic_Load_32, RE_Atomic_Load_64,\n\tRE_Atomic_Synchronize, RE_Relaxed removed.  RE_Lock_Free_Read_8,\n\tRE_Lock_Free_Read_16, RE_Lock_Free_Read_32, RE_Lock_Free_Read_64,\n\tRE_Lock_Free_Try_Write_8, RE_Lock_Free_Try_Write_16,\n\tRE_Lock_Free_Try_Write_32, RE_Lock_Free_Try_Write_64 added.\n\t* s-atopri.adb: New file.\n\t* s-atopri.ads (Atomic_Compare_Exchange_8): Renaming of\n\tparameters.  Import primitive __sync_val_compare_and_swap_1.\n\t(Atomic_Compare_Exchange_16): Renaming of parameters.\n\tImport primitive __sync_val_compare_and_swap_2.\n\t(Atomic_Compare_Exchange_32): Renaming of parameters.\n\tImport primitive __sync_val_compare_and_swap_4.\n\t(Atomic_Compare_Exchange_64): Renaming of parameters.  Import\n\tprimitive __sync_val_compare_and_swap_8.\n\t(Atomic_Load_8): Ptr renames parameter X.\n\t(Atomic_Load_16): Ptr renames parameter X.\n\t(Atomic_Load_32): Ptr renames parameter X.\n\t(Atomic_Load_64): Ptr renames parameter X.\n\t(Lock_Free_Read_8): New routine.\n\t(Lock_Free_Read_16): New routine.\n\t(Lock_Free_Read_32): New routine.\n\t(Lock_Free_Read_64): New routine.\n\t(Lock_Free_Try_Write_8): New routine.\n\t(Lock_Free_Try_Write_16): New routine.\n\t(Lock_Free_Try_Write_32): New routine.\n\t(Lock_Free_Try_Write_64): New routine.\n\nFrom-SVN: r189437", "tree": {"sha": "bc7e956cccbaa03f37ea854149f790994331ebe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc7e956cccbaa03f37ea854149f790994331ebe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03459f403ea66cc694767e8ca351cf6550e148a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03459f403ea66cc694767e8ca351cf6550e148a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03459f403ea66cc694767e8ca351cf6550e148a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03459f403ea66cc694767e8ca351cf6550e148a7/comments", "author": null, "committer": null, "parents": [{"sha": "8926d369393f06729ccc645681359ae72c5bf6f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926d369393f06729ccc645681359ae72c5bf6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8926d369393f06729ccc645681359ae72c5bf6f1"}], "stats": {"total": 630, "additions": 424, "deletions": 206}, "files": [{"sha": "e83f1a78ac011974d890f8ece57f91dfd11de3b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -1,3 +1,46 @@\n+2012-07-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_disp.adb: Minor reformatting\n+\t* s-bytswa.ads: Minor comment update.\n+\n+2012-07-12  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Lock_Free_Unprotected_Subprogram_Body):\n+\tAtomic_Load_N replaced by Lock_Free_Read_N. Atomic_Compare_Exchange_N\n+\treplaced by Lock_Free_Try_Write_N.\n+\tRenaming of several local variables. For\n+\tprocedure, Expected_Comp declaration moved to the declaration\n+\tlist of the procedure.\n+\t* rtsfind.ads: RE_Atomic_Compare_Exchange_8,\n+\tRE_Atomic_Compare_Exchange_16, RE_Atomic_Compare_Exchange_32,\n+\tRE_Atomic_Compare_Exchange_64, RE_Atomic_Load_8,\n+\tRE_Atomic_Load_16, RE_Atomic_Load_32, RE_Atomic_Load_64,\n+\tRE_Atomic_Synchronize, RE_Relaxed removed.  RE_Lock_Free_Read_8,\n+\tRE_Lock_Free_Read_16, RE_Lock_Free_Read_32, RE_Lock_Free_Read_64,\n+\tRE_Lock_Free_Try_Write_8, RE_Lock_Free_Try_Write_16,\n+\tRE_Lock_Free_Try_Write_32, RE_Lock_Free_Try_Write_64 added.\n+\t* s-atopri.adb: New file.\n+\t* s-atopri.ads (Atomic_Compare_Exchange_8): Renaming of\n+\tparameters.  Import primitive __sync_val_compare_and_swap_1.\n+\t(Atomic_Compare_Exchange_16): Renaming of parameters.\n+\tImport primitive __sync_val_compare_and_swap_2.\n+\t(Atomic_Compare_Exchange_32): Renaming of parameters.\n+\tImport primitive __sync_val_compare_and_swap_4.\n+\t(Atomic_Compare_Exchange_64): Renaming of parameters.  Import\n+\tprimitive __sync_val_compare_and_swap_8.\n+\t(Atomic_Load_8): Ptr renames parameter X.\n+\t(Atomic_Load_16): Ptr renames parameter X.\n+\t(Atomic_Load_32): Ptr renames parameter X.\n+\t(Atomic_Load_64): Ptr renames parameter X.\n+\t(Lock_Free_Read_8): New routine.\n+\t(Lock_Free_Read_16): New routine.\n+\t(Lock_Free_Read_32): New routine.\n+\t(Lock_Free_Read_64): New routine.\n+\t(Lock_Free_Try_Write_8): New routine.\n+\t(Lock_Free_Try_Write_16): New routine.\n+\t(Lock_Free_Try_Write_32): New routine.\n+\t(Lock_Free_Try_Write_64): New routine.\n+\n 2012-07-12  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_attr.adb, exp_ch9.adb, sem_ch9.adb, exp_aggr.adb: Minor"}, {"sha": "2ce8aedafae0095217105b372dbd8bf735cd5bfa", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 103, "deletions": 105, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -2955,30 +2955,40 @@ package body Exp_Ch9 is\n    --  manner:\n \n    --    procedure P (...) is\n+   --       Expected_Comp : constant Comp_Type :=\n+   --                         Comp_Type\n+   --                           (System.Atomic_Primitives.Lock_Free_Read_N\n+   --                              (_Object.Comp'Address));\n    --    begin\n    --       loop\n    --          declare\n    --             <original declarations before the object renaming declaration\n    --              of Comp>\n-   --             Saved_Comp   : constant ... :=\n-   --                              Atomic_Load (_Object.Comp'Address, Relaxed);\n-   --             Current_Comp : ... := Saved_Comp;\n-   --             Comp         : Comp_Type renames Current_Comp;\n+   --\n+   --             Desired_Comp : Comp_Type := Expected_Comp;\n+   --             Comp         : Comp_Type renames Desired_Comp;\n+   --\n    --             <original delarations after the object renaming declaration\n    --              of Comp>\n+   --\n    --          begin\n    --             <original statements>\n-   --             exit when Atomic_Compare\n-   --                         (_Object.Comp, Saved_Comp, Current_Comp);\n+   --             exit when System.Atomic_Primitives.Lock_Free_Try_Write_N\n+   --                         (_Object.Comp'Address,\n+   --                          Interfaces.Unsigned_N (Expected_Comp),\n+   --                          Interfaces.Unsigned_N (Desired_Comp));\n    --          end;\n-   --          <<L0>>\n    --       end loop;\n    --    end P;\n \n    --  Each return and raise statement of P is transformed into an atomic\n    --  status check:\n \n-   --    if Atomic_Compare (_Object.Comp, Saved_Comp, Current_Comp) then\n+   --    if System.Atomic_Primitives.Lock_Free_Try_Write_N\n+   --         (_Object.Comp'Address,\n+   --          Interfaces.Unsigned_N (Expected_Comp),\n+   --          Interfaces.Unsigned_N (Desired_Comp));\n+   --    then\n    --       <original statement>\n    --    else\n    --       goto L0;\n@@ -2991,10 +3001,16 @@ package body Exp_Ch9 is\n    --    function F (...) return ... is\n    --       <original declarations before the object renaming declaration\n    --        of Comp>\n-   --       Saved_Comp : constant ... := Atomic_Load (_Object.Comp'Address);\n-   --       Comp       : Comp_Type renames Saved_Comp;\n+   --\n+   --       Expected_Comp : constant Comp_Type :=\n+   --                         Comp_Type\n+   --                           (System.Atomic_Primitives.Lock_Free_Read_N\n+   --                              (_Object.Comp'Address));\n+   --       Comp          : Comp_Type renames Expected_Comp;\n+   --\n    --       <original delarations after the object renaming declaration of\n    --        Comp>\n+   --\n    --    begin\n    --       <original statements>\n    --    end F;\n@@ -3003,11 +3019,6 @@ package body Exp_Ch9 is\n      (N        : Node_Id;\n       Prot_Typ : Node_Id) return Node_Id\n    is\n-      Is_Procedure : constant Boolean    :=\n-                       Ekind (Corresponding_Spec (N)) = E_Procedure;\n-      Loc          : constant Source_Ptr := Sloc (N);\n-      Label_Id     : Entity_Id := Empty;\n-\n       function Referenced_Component (N : Node_Id) return Entity_Id;\n       --  Subprograms which meet the lock-free implementation criteria are\n       --  allowed to reference only one unique component. Return the prival\n@@ -3068,9 +3079,10 @@ package body Exp_Ch9 is\n \n       --  Local variables\n \n-      Comp          : constant Entity_Id := Referenced_Component (N);\n-      Hand_Stmt_Seq : Node_Id            := Handled_Statement_Sequence (N);\n-      Decls         : List_Id            := Declarations (N);\n+      Comp          : constant Entity_Id  := Referenced_Component (N);\n+      Loc           : constant Source_Ptr := Sloc (N);\n+      Hand_Stmt_Seq : Node_Id             := Handled_Statement_Sequence (N);\n+      Decls         : List_Id             := Declarations (N);\n \n    --  Start of processing for Build_Lock_Free_Unprotected_Subprogram_Body\n \n@@ -3088,19 +3100,24 @@ package body Exp_Ch9 is\n             Comp_Decl    : constant Node_Id   := Parent (Comp);\n             Comp_Sel_Nam : constant Node_Id   := Name (Comp_Decl);\n             Comp_Type    : constant Entity_Id := Etype (Comp);\n-            Block_Decls  : List_Id;\n-            Compare      : Entity_Id;\n-            Current_Comp : Entity_Id;\n-            Decl         : Node_Id;\n-            Label        : Node_Id;\n-            Load         : Entity_Id;\n-            Load_Params  : List_Id;\n-            Saved_Comp   : Entity_Id;\n-            Stmt         : Node_Id;\n-            Stmts        : List_Id :=\n-                             New_Copy_List (Statements (Hand_Stmt_Seq));\n-            Typ_Size     : Int;\n-            Unsigned     : Entity_Id;\n+\n+            Is_Procedure : constant Boolean :=\n+                             Ekind (Corresponding_Spec (N)) = E_Procedure;\n+            --  Indicates if N is a protected procedure body\n+\n+            Block_Decls   : List_Id;\n+            Try_Write     : Entity_Id;\n+            Desired_Comp  : Entity_Id;\n+            Decl          : Node_Id;\n+            Label         : Node_Id;\n+            Label_Id      : Entity_Id := Empty;\n+            Read          : Entity_Id;\n+            Expected_Comp : Entity_Id;\n+            Stmt          : Node_Id;\n+            Stmts         : List_Id :=\n+                              New_Copy_List (Statements (Hand_Stmt_Seq));\n+            Typ_Size      : Int;\n+            Unsigned      : Entity_Id;\n \n             function Process_Node (N : Node_Id) return Traverse_Result;\n             --  Transform a single node if it is a return statement, a raise\n@@ -3110,10 +3127,10 @@ package body Exp_Ch9 is\n             --  Given a statement sequence Stmts, wrap any return or raise\n             --  statements in the following manner:\n             --\n-            --    if System.Atomic_Primitives.Atomic_Compare_Exchange\n-            --         (Comp'Address,\n-            --          Interfaces.Unsigned (Saved_Comp),\n-            --          Interfaces.Unsigned (Current_Comp))\n+            --    if System.Atomic_Primitives.Lock_Free_Try_Write_N\n+            --         (_Object.Comp'Address,\n+            --          Interfaces.Unsigned_N (Expected_Comp),\n+            --          Interfaces.Unsigned_N (Desired_Comp))\n             --    then\n             --       <Stmt>;\n             --    else\n@@ -3149,10 +3166,10 @@ package body Exp_Ch9 is\n \n                   --  Generate:\n \n-                  --    if System.Atomic_Primitives.Atomic_Compare_Exchange\n-                  --         (Comp'Address,\n-                  --          Interfaces.Unsigned (Saved_Comp),\n-                  --          Interfaces.Unsigned (Current_Comp))\n+                  --    if System.Atomic_Primitives.Lock_Free_Try_Write_N\n+                  --         (_Object.Comp'Address,\n+                  --          Interfaces.Unsigned_N (Expected_Comp),\n+                  --          Interfaces.Unsigned_N (Desired_Comp))\n                   --    then\n                   --       <Stmt>;\n                   --    else\n@@ -3164,17 +3181,17 @@ package body Exp_Ch9 is\n                       Condition =>\n                         Make_Function_Call (Loc,\n                           Name                   =>\n-                            New_Reference_To (Compare, Loc),\n+                            New_Reference_To (Try_Write, Loc),\n                           Parameter_Associations => New_List (\n                             Make_Attribute_Reference (Loc,\n                               Prefix         => Relocate_Node (Comp_Sel_Nam),\n                               Attribute_Name => Name_Address),\n \n                             Unchecked_Convert_To (Unsigned,\n-                              New_Reference_To (Saved_Comp, Loc)),\n+                              New_Reference_To (Expected_Comp, Loc)),\n \n                             Unchecked_Convert_To (Unsigned,\n-                              New_Reference_To (Current_Comp, Loc)))),\n+                              New_Reference_To (Desired_Comp, Loc)))),\n \n                       Then_Statements => New_List (Relocate_Node (Stmt)),\n \n@@ -3253,67 +3270,53 @@ package body Exp_Ch9 is\n \n             case Typ_Size is\n                when 8 =>\n-                  Compare  := RTE (RE_Atomic_Compare_Exchange_8);\n-                  Load     := RTE (RE_Atomic_Load_8);\n-                  Unsigned := RTE (RE_Uint8);\n+                  Try_Write := RTE (RE_Lock_Free_Try_Write_8);\n+                  Read      := RTE (RE_Lock_Free_Read_8);\n+                  Unsigned  := RTE (RE_Uint8);\n \n                when 16 =>\n-                  Compare  := RTE (RE_Atomic_Compare_Exchange_16);\n-                  Load     := RTE (RE_Atomic_Load_16);\n-                  Unsigned := RTE (RE_Uint16);\n+                  Try_Write := RTE (RE_Lock_Free_Try_Write_16);\n+                  Read      := RTE (RE_Lock_Free_Read_16);\n+                  Unsigned  := RTE (RE_Uint16);\n \n                when 32 =>\n-                  Compare  := RTE (RE_Atomic_Compare_Exchange_32);\n-                  Load     := RTE (RE_Atomic_Load_32);\n-                  Unsigned := RTE (RE_Uint32);\n+                  Try_Write := RTE (RE_Lock_Free_Try_Write_32);\n+                  Read      := RTE (RE_Lock_Free_Read_32);\n+                  Unsigned  := RTE (RE_Uint32);\n \n                when 64 =>\n-                  Compare  := RTE (RE_Atomic_Compare_Exchange_64);\n-                  Load     := RTE (RE_Atomic_Load_64);\n-                  Unsigned := RTE (RE_Uint64);\n+                  Try_Write := RTE (RE_Lock_Free_Try_Write_64);\n+                  Read      := RTE (RE_Lock_Free_Read_64);\n+                  Unsigned  := RTE (RE_Uint64);\n \n                when others =>\n                   raise Program_Error;\n             end case;\n \n             --  Generate:\n-            --    For functions:\n-\n-            --       Saved_Comp : constant Comp_Type :=\n-            --                      Comp_Type (Atomic_Load (Comp'Address));\n \n-            --    For procedures:\n+            --  Expected_Comp : constant Comp_Type :=\n+            --                    Comp_Type\n+            --                      (System.Atomic_Primitives.Lock_Free_Read_N\n+            --                         (_Object.Comp'Address));\n \n-            --       Saved_Comp : constant Comp_Type :=\n-            --                      Comp_Type (Atomic_Load (Comp'Address),\n-            --                                             Relaxed);\n-\n-            Saved_Comp :=\n+            Expected_Comp :=\n               Make_Defining_Identifier (Loc,\n                 New_External_Name (Chars (Comp), Suffix => \"_saved\"));\n \n-            Load_Params := New_List (\n-              Make_Attribute_Reference (Loc,\n-                Prefix         => Relocate_Node (Comp_Sel_Nam),\n-                Attribute_Name => Name_Address));\n-\n-            --  For protected procedures, set the memory model to be relaxed\n-\n-            if Is_Procedure then\n-               Append_To (Load_Params,\n-                 New_Reference_To (RTE (RE_Relaxed), Loc));\n-            end if;\n-\n             Decl :=\n               Make_Object_Declaration (Loc,\n-                Defining_Identifier => Saved_Comp,\n-                Constant_Present    => True,\n+                Defining_Identifier => Expected_Comp,\n                 Object_Definition   => New_Reference_To (Comp_Type, Loc),\n+                Constant_Present    => True,\n                 Expression          =>\n                   Unchecked_Convert_To (Comp_Type,\n                     Make_Function_Call (Loc,\n-                      Name                   => New_Reference_To (Load, Loc),\n-                      Parameter_Associations => Load_Params)));\n+                      Name                   => New_Reference_To (Read, Loc),\n+                      Parameter_Associations => New_List (\n+                        Make_Attribute_Reference (Loc,\n+                          Prefix         => Relocate_Node (Comp_Sel_Nam),\n+                          Attribute_Name => Name_Address)))));\n \n             --  Protected procedures\n \n@@ -3322,48 +3325,46 @@ package body Exp_Ch9 is\n \n                Block_Decls := Decls;\n \n-               --  Reset the declarations list of the protected procedure to be\n-               --  an empty list.\n+               --  Reset the declarations list of the protected procedure to\n+               --  contain only Decl.\n \n-               Decls := Empty_List;\n+               Decls := New_List (Decl);\n \n                --  Generate:\n-               --    Current_Comp : Comp_Type := Saved_Comp;\n+               --    Desired_Comp : Comp_Type := Expected_Comp;\n \n-               Current_Comp :=\n+               Desired_Comp :=\n                  Make_Defining_Identifier (Loc,\n                    New_External_Name (Chars (Comp), Suffix => \"_current\"));\n \n-               --  Insert the declarations of Saved_Comp and Current_Comp in\n+               --  Insert the declarations of Expected_Comp and Desired_Comp in\n                --  the block declarations right before the renaming of the\n                --  protected component.\n \n-               Insert_Before (Comp_Decl, Decl);\n-\n                Insert_Before (Comp_Decl,\n                  Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Current_Comp,\n+                   Defining_Identifier => Desired_Comp,\n                    Object_Definition   => New_Reference_To (Comp_Type, Loc),\n                    Expression          =>\n-                     New_Reference_To (Saved_Comp, Loc)));\n+                     New_Reference_To (Expected_Comp, Loc)));\n \n             --  Protected function\n \n             else\n-               Current_Comp := Saved_Comp;\n+               Desired_Comp := Expected_Comp;\n \n-               --  Insert the declaration of Saved_Comp in the function\n+               --  Insert the declaration of Expected_Comp in the function\n                --  declarations right before the renaming of the protected\n                --  component.\n \n                Insert_Before (Comp_Decl, Decl);\n             end if;\n \n             --  Rewrite the protected component renaming declaration to be a\n-            --  renaming of Current_Comp.\n+            --  renaming of Desired_Comp.\n \n             --  Generate:\n-            --    Comp : Comp_Type renames Current_Comp;\n+            --    Comp : Comp_Type renames Desired_Comp;\n \n             Rewrite (Comp_Decl,\n               Make_Object_Renaming_Declaration (Loc,\n@@ -3372,7 +3373,7 @@ package body Exp_Ch9 is\n                 Subtype_Mark      =>\n                   New_Occurrence_Of (Comp_Type, Loc),\n                 Name              =>\n-                  New_Reference_To (Current_Comp, Loc)));\n+                  New_Reference_To (Desired_Comp, Loc)));\n \n             --  Wrap any return or raise statements in Stmts in same the manner\n             --  described in Process_Stmts.\n@@ -3381,28 +3382,28 @@ package body Exp_Ch9 is\n \n             --  Generate:\n \n-            --    exit when System.Atomic_Primitives.Atomic_Compare_Exchange\n-            --                (Comp'Address,\n-            --                 Interfaces.Unsigned (Saved_Comp),\n-            --                 Interfaces.Unsigned (Current_Comp))\n+            --    exit when System.Atomic_Primitives.Lock_Free_Try_Write_N\n+            --                (_Object.Comp'Address,\n+            --                 Interfaces.Unsigned_N (Expected_Comp),\n+            --                 Interfaces.Unsigned_N (Desired_Comp))\n \n             if Is_Procedure then\n                Stmt :=\n                  Make_Exit_Statement (Loc,\n                    Condition =>\n                      Make_Function_Call (Loc,\n                        Name                   =>\n-                         New_Reference_To (Compare, Loc),\n+                         New_Reference_To (Try_Write, Loc),\n                        Parameter_Associations => New_List (\n                          Make_Attribute_Reference (Loc,\n                            Prefix         => Relocate_Node (Comp_Sel_Nam),\n                            Attribute_Name => Name_Address),\n \n                          Unchecked_Convert_To (Unsigned,\n-                           New_Reference_To (Saved_Comp, Loc)),\n+                           New_Reference_To (Expected_Comp, Loc)),\n \n                          Unchecked_Convert_To (Unsigned,\n-                           New_Reference_To (Current_Comp, Loc)))));\n+                           New_Reference_To (Desired_Comp, Loc)))));\n \n                --  Small optimization: transform the default return statement\n                --  of a procedure into the atomic exit statement.\n@@ -3439,9 +3440,6 @@ package body Exp_Ch9 is\n             if Is_Procedure then\n                Stmts :=\n                  New_List (\n-                   Make_Procedure_Call_Statement (Loc,\n-                      Name =>\n-                        New_Reference_To (RTE (RE_Atomic_Synchronize), Loc)),\n                    Make_Loop_Statement (Loc,\n                      Statements => New_List (\n                        Make_Block_Statement (Loc,"}, {"sha": "2a16fdf97ecd773107701f500c6b0037e2c00ea1", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -731,16 +731,14 @@ package Rtsfind is\n      RE_Assert_Failure,                  -- System.Assertions\n      RE_Raise_Assert_Failure,            -- System.Assertions\n \n-     RE_Atomic_Compare_Exchange_8,       -- System.Atomic_Primitives\n-     RE_Atomic_Compare_Exchange_16,      -- System.Atomic_Primitives\n-     RE_Atomic_Compare_Exchange_32,      -- System.Atomic_Primitives\n-     RE_Atomic_Compare_Exchange_64,      -- System.Atomic_Primitives\n-     RE_Atomic_Load_8,                   -- System.Atomic_Primitives\n-     RE_Atomic_Load_16,                  -- System.Atomic_Primitives\n-     RE_Atomic_Load_32,                  -- System.Atomic_Primitives\n-     RE_Atomic_Load_64,                  -- System.Atomic_Primitives\n-     RE_Atomic_Synchronize,              -- System.Atomic_Primitives\n-     RE_Relaxed,                         -- System.Atomic_Primitives\n+     RE_Lock_Free_Read_8,                -- System.Atomic_Primitives\n+     RE_Lock_Free_Read_16,               -- System.Atomic_Primitives\n+     RE_Lock_Free_Read_32,               -- System.Atomic_Primitives\n+     RE_Lock_Free_Read_64,               -- System.Atomic_Primitives\n+     RE_Lock_Free_Try_Write_8,           -- System.Atomic_Primitives\n+     RE_Lock_Free_Try_Write_16,          -- System.Atomic_Primitives\n+     RE_Lock_Free_Try_Write_32,          -- System.Atomic_Primitives\n+     RE_Lock_Free_Try_Write_64,          -- System.Atomic_Primitives\n      RE_Uint8,                           -- System.Atomic_Primitives\n      RE_Uint16,                          -- System.Atomic_Primitives\n      RE_Uint32,                          -- System.Atomic_Primitives\n@@ -1955,16 +1953,14 @@ package Rtsfind is\n      RE_Assert_Failure                   => System_Assertions,\n      RE_Raise_Assert_Failure             => System_Assertions,\n \n-     RE_Atomic_Compare_Exchange_8        => System_Atomic_Primitives,\n-     RE_Atomic_Compare_Exchange_16       => System_Atomic_Primitives,\n-     RE_Atomic_Compare_Exchange_32       => System_Atomic_Primitives,\n-     RE_Atomic_Compare_Exchange_64       => System_Atomic_Primitives,\n-     RE_Atomic_Load_8                    => System_Atomic_Primitives,\n-     RE_Atomic_Load_16                   => System_Atomic_Primitives,\n-     RE_Atomic_Load_32                   => System_Atomic_Primitives,\n-     RE_Atomic_Load_64                   => System_Atomic_Primitives,\n-     RE_Atomic_Synchronize               => System_Atomic_Primitives,\n-     RE_Relaxed                          => System_Atomic_Primitives,\n+     RE_Lock_Free_Read_8                 => System_Atomic_Primitives,\n+     RE_Lock_Free_Read_16                => System_Atomic_Primitives,\n+     RE_Lock_Free_Read_32                => System_Atomic_Primitives,\n+     RE_Lock_Free_Read_64                => System_Atomic_Primitives,\n+     RE_Lock_Free_Try_Write_8            => System_Atomic_Primitives,\n+     RE_Lock_Free_Try_Write_16           => System_Atomic_Primitives,\n+     RE_Lock_Free_Try_Write_32           => System_Atomic_Primitives,\n+     RE_Lock_Free_Try_Write_64           => System_Atomic_Primitives,\n      RE_Uint8                            => System_Atomic_Primitives,\n      RE_Uint16                           => System_Atomic_Primitives,\n      RE_Uint32                           => System_Atomic_Primitives,"}, {"sha": "af52128d7de20148277947dfba59fd62f19254ba", "filename": "gcc/ada/s-atopri.adb", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fs-atopri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fs-atopri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atopri.adb?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -0,0 +1,128 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--               S Y S T E M . A T O M I C _ P R I M I T I V E S            --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--              Copyright (C) 2012, Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Atomic_Primitives is\n+   ---------------------------\n+   -- Lock_Free_Try_Write_8 --\n+   ---------------------------\n+\n+   function Lock_Free_Try_Write_8\n+      (Ptr       : Address;\n+       Expected  : in out uint8;\n+       Desired   : uint8) return Boolean\n+   is\n+      Actual : uint8;\n+\n+   begin\n+      if Expected /= Desired then\n+         Actual := Atomic_Compare_Exchange_8 (Ptr, Expected, Desired);\n+\n+         if Actual /= Expected then\n+            Expected := Actual;\n+            return False;\n+         end if;\n+      end if;\n+\n+      return True;\n+   end Lock_Free_Try_Write_8;\n+\n+   ----------------------------\n+   -- Lock_Free_Try_Write_16 --\n+   ----------------------------\n+\n+   function Lock_Free_Try_Write_16\n+      (Ptr       : Address;\n+       Expected  : in out uint16;\n+       Desired   : uint16) return Boolean\n+   is\n+      Actual : uint16;\n+\n+   begin\n+      if Expected /= Desired then\n+         Actual := Atomic_Compare_Exchange_16 (Ptr, Expected, Desired);\n+\n+         if Actual /= Expected then\n+            Expected := Actual;\n+            return False;\n+         end if;\n+      end if;\n+\n+      return True;\n+   end Lock_Free_Try_Write_16;\n+\n+   ----------------------------\n+   -- Lock_Free_Try_Write_32 --\n+   ----------------------------\n+\n+   function Lock_Free_Try_Write_32\n+      (Ptr       : Address;\n+       Expected  : in out uint32;\n+       Desired   : uint32) return Boolean\n+   is\n+      Actual : uint32;\n+\n+   begin\n+      if Expected /= Desired then\n+         Actual := Atomic_Compare_Exchange_32 (Ptr, Expected, Desired);\n+\n+         if Actual /= Expected then\n+            Expected := Actual;\n+            return False;\n+         end if;\n+      end if;\n+\n+      return True;\n+   end Lock_Free_Try_Write_32;\n+\n+   ----------------------------\n+   -- Lock_Free_Try_Write_64 --\n+   ----------------------------\n+\n+   function Lock_Free_Try_Write_64\n+      (Ptr       : Address;\n+       Expected  : in out uint64;\n+       Desired   : uint64) return Boolean\n+   is\n+      Actual : uint64;\n+\n+   begin\n+      if Expected /= Desired then\n+         Actual := Atomic_Compare_Exchange_64 (Ptr, Expected, Desired);\n+\n+         if Actual /= Expected then\n+            Expected := Actual;\n+            return False;\n+         end if;\n+      end if;\n+\n+      return True;\n+   end Lock_Free_Try_Write_64;\n+end System.Atomic_Primitives;"}, {"sha": "c0a970383dd40e727e4e399de461935052f25b1c", "filename": "gcc/ada/s-atopri.ads", "status": "modified", "additions": 84, "deletions": 29, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fs-atopri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fs-atopri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atopri.ads?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -29,10 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains atomic primitives defined from gcc built-in functions\n-\n---  For now, these operations are only used by the compiler to generate the\n---  lock-free implementation of protected objects.\n+--  This package contains both atomic primitives defined from gcc built-in\n+--  functions and operations used by the compiler to generate the lock-free\n+--  implementation of protected objects.\n \n package System.Atomic_Primitives is\n    pragma Preelaborate;\n@@ -59,69 +58,125 @@ package System.Atomic_Primitives is\n \n    subtype Mem_Model is Integer range Relaxed .. Last;\n \n+   ------------------------------------\n+   -- GCC built-in atomic primitives --\n+   ------------------------------------\n+\n    function Atomic_Compare_Exchange_8\n-     (X             : Address;\n-      X_Old         : uint8;\n-      X_Copy        : uint8) return Boolean;\n+     (Ptr      : Address;\n+      Expected : uint8;\n+      Desired  : uint8) return uint8;\n    pragma Import (Intrinsic,\n                   Atomic_Compare_Exchange_8,\n-                  \"__sync_bool_compare_and_swap_1\");\n+                  \"__sync_val_compare_and_swap_1\");\n \n    --  ??? Should use __atomic_compare_exchange_1 (doesn't work yet):\n    --  function Atomic_Compare_Exchange_8\n-   --    (X             : Address;\n-   --     X_Old         : Address;\n-   --     X_Copy        : uint8;\n+   --    (Ptr           : Address;\n+   --     Expected      : Address;\n+   --     Desired       : uint8;\n+   --     Weak          : Boolean   := False;\n    --     Success_Model : Mem_Model := Seq_Cst;\n    --     Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n    --  pragma Import (Intrinsic,\n    --                 Atomic_Compare_Exchange_8,\n    --                 \"__atomic_compare_exchange_1\");\n \n    function Atomic_Compare_Exchange_16\n-     (X             : Address;\n-      X_Old         : uint16;\n-      X_Copy        : uint16) return Boolean;\n+     (Ptr      : Address;\n+      Expected : uint16;\n+      Desired  : uint16) return uint16;\n    pragma Import (Intrinsic,\n                   Atomic_Compare_Exchange_16,\n-                  \"__sync_bool_compare_and_swap_2\");\n+                  \"__sync_val_compare_and_swap_2\");\n \n    function Atomic_Compare_Exchange_32\n-     (X             : Address;\n-      X_Old         : uint32;\n-      X_Copy        : uint32) return Boolean;\n+     (Ptr      : Address;\n+      Expected : uint32;\n+      Desired  : uint32) return uint32;\n    pragma Import (Intrinsic,\n                   Atomic_Compare_Exchange_32,\n-                  \"__sync_bool_compare_and_swap_4\");\n+                  \"__sync_val_compare_and_swap_4\");\n \n    function Atomic_Compare_Exchange_64\n-     (X             : Address;\n-      X_Old         : uint64;\n-      X_Copy        : uint64) return Boolean;\n+     (Ptr      : Address;\n+      Expected : uint64;\n+      Desired  : uint64) return uint64;\n    pragma Import (Intrinsic,\n                   Atomic_Compare_Exchange_64,\n-                  \"__sync_bool_compare_and_swap_8\");\n+                  \"__sync_val_compare_and_swap_8\");\n \n    function Atomic_Load_8\n-     (X     : Address;\n+     (Ptr   : Address;\n       Model : Mem_Model := Seq_Cst) return uint8;\n    pragma Import (Intrinsic, Atomic_Load_8, \"__atomic_load_1\");\n \n    function Atomic_Load_16\n-     (X     : Address;\n+     (Ptr   : Address;\n       Model : Mem_Model := Seq_Cst) return uint16;\n    pragma Import (Intrinsic, Atomic_Load_16, \"__atomic_load_2\");\n \n    function Atomic_Load_32\n-     (X     : Address;\n+     (Ptr   : Address;\n       Model : Mem_Model := Seq_Cst) return uint32;\n    pragma Import (Intrinsic, Atomic_Load_32, \"__atomic_load_4\");\n \n    function Atomic_Load_64\n-     (X     : Address;\n+     (Ptr   : Address;\n       Model : Mem_Model := Seq_Cst) return uint64;\n    pragma Import (Intrinsic, Atomic_Load_64, \"__atomic_load_8\");\n \n-   procedure Atomic_Synchronize;\n-   pragma Import (Intrinsic, Atomic_Synchronize, \"__sync_synchronize\");\n+   --------------------------\n+   -- Lock-free operations --\n+   --------------------------\n+\n+   --  The lock-free implementation uses two atomic instructions for the\n+   --  expansion of protected operations:\n+\n+   --  * Lock_Free_Read_N atomically loads the value of the protected component\n+   --    accessed by the current protected operation.\n+\n+   --  * Lock_Free_Try_Write_N tries to write the the Desired value into Ptr\n+   --    only if Expected and Desired mismatch.\n+\n+   function Lock_Free_Read_8 (Ptr : Address) return uint8 is\n+     (Atomic_Load_8 (Ptr, Acquire));\n+\n+   function Lock_Free_Read_16 (Ptr : Address) return uint16 is\n+      (Atomic_Load_16 (Ptr, Acquire));\n+\n+   function Lock_Free_Read_32 (Ptr : Address) return uint32 is\n+      (Atomic_Load_32 (Ptr, Acquire));\n+\n+   function Lock_Free_Read_64 (Ptr : Address) return uint64 is\n+      (Atomic_Load_64 (Ptr, Acquire));\n+\n+   function Lock_Free_Try_Write_8\n+      (Ptr       : Address;\n+       Expected  : in out uint8;\n+       Desired   : uint8) return Boolean;\n+\n+   function Lock_Free_Try_Write_16\n+      (Ptr       : Address;\n+       Expected  : in out uint16;\n+       Desired   : uint16) return Boolean;\n+\n+   function Lock_Free_Try_Write_32\n+      (Ptr       : Address;\n+       Expected  : in out uint32;\n+       Desired   : uint32) return Boolean;\n+\n+   function Lock_Free_Try_Write_64\n+      (Ptr       : Address;\n+       Expected  : in out uint64;\n+       Desired   : uint64) return Boolean;\n+\n+   pragma Inline (Lock_Free_Read_8);\n+   pragma Inline (Lock_Free_Read_16);\n+   pragma Inline (Lock_Free_Read_32);\n+   pragma Inline (Lock_Free_Read_64);\n+   pragma Inline (Lock_Free_Try_Write_8);\n+   pragma Inline (Lock_Free_Try_Write_16);\n+   pragma Inline (Lock_Free_Try_Write_32);\n+   pragma Inline (Lock_Free_Try_Write_64);\n end System.Atomic_Primitives;"}, {"sha": "675e7d8ee5acc9a69450bb14469db5692b2b7c25", "filename": "gcc/ada/s-bytswa.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fs-bytswa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fs-bytswa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bytswa.ads?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -29,8 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Supporting routines for GNAT.Byte_Swapping, also used directly by\n---  expended code.\n+--  Intrinsic routines for byte swapping. These are used by the expanded code\n+--  (supporting alternative byte ordering), and by the GNAT.Byte_Swapping run\n+--  time package which provides user level routines for byte swapping.\n \n package System.Byte_Swapping is\n "}, {"sha": "988a78f5781bc48c9626ee4017c712a6233ef045", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 47, "deletions": 50, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03459f403ea66cc694767e8ca351cf6550e148a7/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=03459f403ea66cc694767e8ca351cf6550e148a7", "patch": "@@ -497,22 +497,20 @@ package body Sem_Disp is\n          Par  : Node_Id;\n \n          procedure Abstract_Context_Error;\n-         --  Indicate that the abstract call that dispatches on result is not\n-         --  dispatching.\n+         --  Error for abstract call dispatching on result is not dispatching\n \n-         -----------------------------\n-         --  Bastract_Context_Error --\n-         -----------------------------\n+         ----------------------------\n+         -- Abstract_Context_Error --\n+         ----------------------------\n \n          procedure Abstract_Context_Error is\n          begin\n             if Ekind (Subp) = E_Function then\n                Error_Msg_N\n                  (\"call to abstract function must be dispatching\", N);\n \n-            --  This error can occur for a procedure in the case of a\n-            --  call to an abstract formal procedure with a statically\n-            --  tagged operand.\n+            --  This error can occur for a procedure in the case of a call to\n+            --  an abstract formal procedure with a statically tagged operand.\n \n             else\n                Error_Msg_N\n@@ -521,6 +519,8 @@ package body Sem_Disp is\n             end if;\n          end Abstract_Context_Error;\n \n+      --  Start of processing for Check_Dispatching_Context\n+\n       begin\n          if Is_Abstract_Subprogram (Subp)\n            and then No (Controlling_Argument (N))\n@@ -552,14 +552,14 @@ package body Sem_Disp is\n                end if;\n \n                Par := Parent (N);\n+\n                if Nkind (Par) = N_Parameter_Association then\n                   Par := Parent (Par);\n                end if;\n \n                while Present (Par) loop\n-                  if Nkind_In (Par,\n-                                 N_Function_Call,\n-                                 N_Procedure_Call_Statement)\n+                  if Nkind_In (Par, N_Function_Call,\n+                                    N_Procedure_Call_Statement)\n                     and then Is_Entity_Name (Name (Par))\n                   then\n                      declare\n@@ -571,12 +571,9 @@ package body Sem_Disp is\n \n                         F := First_Formal (Entity (Name (Par)));\n                         A := First_Actual (Par);\n-\n                         while Present (F) loop\n-\n                            if Is_Controlling_Formal (F)\n-                             and then\n-                               (N = A or else Parent (N) = A)\n+                             and then (N = A or else Parent (N) = A)\n                            then\n                               return;\n                            end if;\n@@ -590,8 +587,8 @@ package body Sem_Disp is\n                         return;\n                      end;\n \n-                  --  For equalitiy operators, one of the operands must\n-                  --  be statically or dynamically tagged.\n+                  --  For equalitiy operators, one of the operands must be\n+                  --  statically or dynamically tagged.\n \n                   elsif Nkind_In (Par, N_Op_Eq, N_Op_Ne) then\n                      if N = Right_Opnd (Par)\n@@ -667,17 +664,17 @@ package body Sem_Disp is\n \n          --  If the call doesn't have a controlling actual but does have an\n          --  indeterminate actual that requires dispatching treatment, then an\n-         --  object is needed that will serve as the controlling argument for a\n-         --  dispatching call on the indeterminate actual. This can only occur\n-         --  in the unusual situation of a default actual given by a\n-         --  tag-indeterminate call and where the type of the call is an\n+         --  object is needed that will serve as the controlling argument for\n+         --  a dispatching call on the indeterminate actual. This can only\n+         --  occur in the unusual situation of a default actual given by\n+         --  a tag-indeterminate call and where the type of the call is an\n          --  ancestor of the type associated with a containing call to an\n          --  inherited operation (see AI-239).\n \n-         --  Rather than create an object of the tagged type, which would be\n-         --  problematic for various reasons (default initialization,\n-         --  discriminants), the tag of the containing call's associated tagged\n-         --  type is directly used to control the dispatching.\n+         --  Rather than create an object of the tagged type, which would\n+         --  be problematic for various reasons (default initialization,\n+         --  discriminants), the tag of the containing call's associated\n+         --  tagged type is directly used to control the dispatching.\n \n          if No (Control)\n            and then Indeterm_Ancestor_Call\n@@ -716,8 +713,8 @@ package body Sem_Disp is\n                      --  The tag is inherited from the enclosing call (the node\n                      --  we are currently analyzing). Explicitly expand the\n                      --  actual, since the previous call to Expand (from\n-                     --  Resolve_Call) had no way of knowing about the required\n-                     --  dispatching.\n+                     --  Resolve_Call) had no way of knowing about the\n+                     --  required dispatching.\n \n                      Propagate_Tag (Control, Actual);\n \n@@ -1034,16 +1031,16 @@ package body Sem_Disp is\n                   Decl_Item : Node_Id;\n \n                begin\n-                  --  ??? The checks here for whether the type has been\n-                  --  frozen prior to the new body are not complete. It's\n-                  --  not simple to check frozenness at this point since\n-                  --  the body has already caused the type to be prematurely\n-                  --  frozen in Analyze_Declarations, but we're forced to\n-                  --  recheck this here because of the odd rule interpretation\n-                  --  that allows the overriding if the type wasn't frozen\n-                  --  prior to the body. The freezing action should probably\n-                  --  be delayed until after the spec is seen, but that's\n-                  --  a tricky change to the delicate freezing code.\n+                  --  ??? The checks here for whether the type has been frozen\n+                  --  prior to the new body are not complete. It's not simple\n+                  --  to check frozenness at this point since the body has\n+                  --  already caused the type to be prematurely frozen in\n+                  --  Analyze_Declarations, but we're forced to recheck this\n+                  --  here because of the odd rule interpretation that allows\n+                  --  the overriding if the type wasn't frozen prior to the\n+                  --  body. The freezing action should probably be delayed\n+                  --  until after the spec is seen, but that's a tricky\n+                  --  change to the delicate freezing code.\n \n                   --  Look at each declaration following the type up until the\n                   --  new subprogram body. If any of the declarations is a body\n@@ -1081,7 +1078,7 @@ package body Sem_Disp is\n                   elsif Is_Frozen (Subp) then\n \n                      --  The subprogram body declares a primitive operation.\n-                     --  if the subprogram is already frozen, we must update\n+                     --  If the subprogram is already frozen, we must update\n                      --  its dispatching information explicitly here. The\n                      --  information is taken from the overridden subprogram.\n                      --  We must also generate a cross-reference entry because\n@@ -1149,8 +1146,8 @@ package body Sem_Disp is\n          --  (3.2.3(6)). Only report cases where the type and subprogram are\n          --  in the same declaration list (by checking the enclosing parent\n          --  declarations), to avoid spurious warnings on subprograms in\n-         --  instance bodies when the type is declared in the instance spec but\n-         --  hasn't been frozen by the instance body.\n+         --  instance bodies when the type is declared in the instance spec\n+         --  but hasn't been frozen by the instance body.\n \n          elsif not Is_Frozen (Tagged_Type)\n            and then In_Same_List (Parent (Tagged_Type), Parent (Parent (Subp)))\n@@ -1643,12 +1640,12 @@ package body Sem_Disp is\n             then\n                Set_Alias (Old_Subp, Alias (Subp));\n \n-               --  The derived subprogram should inherit the abstractness\n-               --  of the parent subprogram (except in the case of a function\n+               --  The derived subprogram should inherit the abstractness of\n+               --  the parent subprogram (except in the case of a function\n                --  returning the type). This sets the abstractness properly\n-               --  for cases where a private extension may have inherited\n-               --  an abstract operation, but the full type is derived from\n-               --  a descendant type and inherits a nonabstract version.\n+               --  for cases where a private extension may have inherited an\n+               --  abstract operation, but the full type is derived from a\n+               --  descendant type and inherits a nonabstract version.\n \n                if Etype (Subp) /= Tagged_Type then\n                   Set_Is_Abstract_Subprogram\n@@ -1946,9 +1943,9 @@ package body Sem_Disp is\n          E := Homonym (E);\n       end loop;\n \n-      --  Search in the list of primitives of the type. Required to locate the\n-      --  covering primitive if the covering primitive is not visible (for\n-      --  example, non-visible inherited primitive of private type).\n+      --  Search in the list of primitives of the type. Required to locate\n+      --  the covering primitive if the covering primitive is not visible\n+      --  (for example, non-visible inherited primitive of private type).\n \n       El := First_Elmt (Primitive_Operations (Tagged_Type));\n       while Present (El) loop\n@@ -2275,8 +2272,8 @@ package body Sem_Disp is\n         and then Has_Interfaces (Tagged_Type)\n       then\n          --  Ada 2005 (AI-251): Update the attribute alias of all the aliased\n-         --  entities of the overridden primitive to reference New_Op, and also\n-         --  propagate the proper value of Is_Abstract_Subprogram. Verify\n+         --  entities of the overridden primitive to reference New_Op, and\n+         --  also propagate the proper value of Is_Abstract_Subprogram. Verify\n          --  that the new operation is subtype conformant with the interface\n          --  operations that it implements (for operations inherited from the\n          --  parent itself, this check is made when building the derived type)."}]}