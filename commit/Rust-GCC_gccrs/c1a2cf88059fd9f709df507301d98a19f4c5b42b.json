{"sha": "c1a2cf88059fd9f709df507301d98a19f4c5b42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhMmNmODgwNTlmZDlmNzA5ZGY1MDczMDFkOThhMTlmNGM1YjQyYg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-01-14T18:17:05Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-01-14T18:17:05Z"}, "message": "Revert \"PR fortran/98661 - valgrind issues with error recovery\"\n\nThis reverts commit d0d2becf2dfe8316c9014d962e7f77773ec5c27e.", "tree": {"sha": "996f5d30af6f64ea4c19357fe4a2e3e452fa9013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/996f5d30af6f64ea4c19357fe4a2e3e452fa9013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1a2cf88059fd9f709df507301d98a19f4c5b42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a2cf88059fd9f709df507301d98a19f4c5b42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a2cf88059fd9f709df507301d98a19f4c5b42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a2cf88059fd9f709df507301d98a19f4c5b42b/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d2becf2dfe8316c9014d962e7f77773ec5c27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d2becf2dfe8316c9014d962e7f77773ec5c27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d2becf2dfe8316c9014d962e7f77773ec5c27e"}], "stats": {"total": 49, "additions": 7, "deletions": 42}, "files": [{"sha": "f243bd185b014b6dafc79b096485eef9dcd0fad5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2cf88059fd9f709df507301d98a19f4c5b42b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2cf88059fd9f709df507301d98a19f4c5b42b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c1a2cf88059fd9f709df507301d98a19f4c5b42b", "patch": "@@ -5068,8 +5068,8 @@ resolve_array_ref (gfc_array_ref *ar)\n }\n \n \n-bool\n-gfc_resolve_substring (gfc_ref *ref, bool *equal_length)\n+static bool\n+resolve_substring (gfc_ref *ref, bool *equal_length)\n {\n   int k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);\n \n@@ -5277,7 +5277,7 @@ gfc_resolve_ref (gfc_expr *expr)\n \n       case REF_SUBSTRING:\n \tequal_length = false;\n-\tif (!gfc_resolve_substring (*prev, &equal_length))\n+\tif (!resolve_substring (*prev, &equal_length))\n \t  return false;\n \n \tif (expr->expr_type != EXPR_SUBSTRING && equal_length)\n@@ -5563,10 +5563,6 @@ resolve_variable (gfc_expr *e)\n   if (e->symtree == NULL)\n     return false;\n   sym = e->symtree->n.sym;\n-  if (sym == NULL)\n-    return false;\n-//  if (e->ts.type == BT_UNKNOWN)\n-//    return false;\n \n   /* Use same check as for TYPE(*) below; this check has to be before TYPE(*)\n      as ts.type is set to BT_ASSUMED in resolve_symbol.  */\n@@ -7042,8 +7038,7 @@ fixup_unique_dummy (gfc_expr *e)\n   gfc_symtree *st = NULL;\n   gfc_symbol *s = NULL;\n \n-  if (e->symtree->n.sym->ns\n-      && e->symtree->n.sym->ns->proc_name\n+  if (e->symtree->n.sym->ns->proc_name\n       && e->symtree->n.sym->ns->proc_name->formal)\n     s = e->symtree->n.sym->ns->proc_name->formal->sym;\n \n@@ -7081,8 +7076,8 @@ gfc_resolve_expr (gfc_expr *e)\n       first_actual_arg = false;\n     }\n   else if (e->symtree != NULL\n-\t   && e->symtree->name && *e->symtree->name == '@'\n-\t   && e->symtree->n.sym && e->symtree->n.sym->attr.dummy)\n+\t   && *e->symtree->name == '@'\n+\t   && e->symtree->n.sym->attr.dummy)\n     {\n       /* Deal with submodule specification expressions that are not\n \t found to be referenced in module.c(read_cleanup).  */\n@@ -7179,7 +7174,6 @@ gfc_resolve_expr (gfc_expr *e)\n   /* For some reason, resolving these expressions a second time mangles\n      the typespec of the expression itself.  */\n   if (t && e->expr_type == EXPR_VARIABLE\n-      && e->symtree && e->symtree->n.sym\n       && e->symtree->n.sym->attr.select_rank_temporary\n       && UNLIMITED_POLY (e->symtree->n.sym))\n     e->do_not_resolve_again = 1;\n@@ -12437,13 +12431,7 @@ resolve_charlen (gfc_charlen *cl)\n   saved_specification_expr = specification_expr;\n   specification_expr = true;\n \n-  /* if (cl->length == NULL) */\n-  /*   { */\n-  /*     specification_expr = saved_specification_expr; */\n-  /*     return true; // return false; */\n-  /*   } */\n-\n-  if (cl->length_from_typespec && cl->length)\n+  if (cl->length_from_typespec)\n     {\n       if (!gfc_resolve_expr (cl->length))\n \t{\n@@ -14735,10 +14723,6 @@ resolve_component (gfc_component *c, gfc_symbol *sym)\n         && sym != c->ts.u.derived)\n     add_dt_to_dt_list (c->ts.u.derived);\n \n-  if (c->as && c->as->type != AS_DEFERRED\n-      && (c->attr.pointer || c->attr.allocatable))\n-    return false;\n-\n   if (!gfc_resolve_array_spec (c->as,\n                                !(c->attr.pointer || c->attr.proc_pointer\n                                  || c->attr.allocatable)))"}, {"sha": "40ddff05d436b062473afbda4fcd2d1939f9d0e4", "filename": "gcc/testsuite/gfortran.dg/pr98661.f90", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d2becf2dfe8316c9014d962e7f77773ec5c27e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98661.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d2becf2dfe8316c9014d962e7f77773ec5c27e/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98661.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98661.f90?ref=d0d2becf2dfe8316c9014d962e7f77773ec5c27e", "patch": "@@ -1,19 +0,0 @@\n-! { dg-do compile }\n-! PR fortran/98661 - valgrind issues with error recovery\n-!\n-! Test issues related to former testcase charlen_03.f90\n-program p\n-  implicit none\n-  type t\n-     character(:), pointer :: c(n) ! { dg-error \"must have a deferred shape\" }\n-     real,     allocatable :: x(n) ! { dg-error \"must have a deferred shape\" }\n-  end type\n-end\n-\n-subroutine s\n-! no 'implicit none'\n-  type u\n-     character(:), pointer :: c(n) ! { dg-error \"must have a deferred shape\" }\n-     real,     allocatable :: x(n) ! { dg-error \"must have a deferred shape\" }\n-  end type\n-end"}]}