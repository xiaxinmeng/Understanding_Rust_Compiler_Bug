{"sha": "a988a398d6daef3072cd2d07a21980911d8f93fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4OGEzOThkNmRhZWYzMDcyY2QyZDA3YTIxOTgwOTExZDhmOTNmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-07T22:21:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-08T20:11:46Z"}, "message": "c++: Distinguish ambiguity from no valid candidate\n\nSeveral recent C++ features are specified to try overload resolution, and if\nno viable candidate is found, do something else.  But our error return\ndoesn't distinguish between that situation and finding multiple viable\ncandidates that end up being ambiguous.  We're already trying to separately\nreturn the single function we found even if it ends up being ill-formed for\nsome reason; for ambiguity let's pass back error_mark_node, to be\ndistinguished from NULL_TREE meaning no viable candidate.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_new_op_1): Set *overload for ambiguity.\n\t(build_new_method_call_1): Likewise.", "tree": {"sha": "1bea0109feb54d7acc3e67c0630da2d2e4dcca03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bea0109feb54d7acc3e67c0630da2d2e4dcca03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a988a398d6daef3072cd2d07a21980911d8f93fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a988a398d6daef3072cd2d07a21980911d8f93fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a988a398d6daef3072cd2d07a21980911d8f93fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a988a398d6daef3072cd2d07a21980911d8f93fc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "447f99b3b8baabbfb33b29123113637e54c5e652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447f99b3b8baabbfb33b29123113637e54c5e652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447f99b3b8baabbfb33b29123113637e54c5e652"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "221e3de0c705a88fb7de75de1306fa3b61c53104", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a988a398d6daef3072cd2d07a21980911d8f93fc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a988a398d6daef3072cd2d07a21980911d8f93fc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a988a398d6daef3072cd2d07a21980911d8f93fc", "patch": "@@ -6357,6 +6357,8 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t      print_z_candidates (loc, candidates);\n \t    }\n \t  result = error_mark_node;\n+\t  if (overload)\n+\t    *overload = error_mark_node;\n \t}\n       else if (TREE_CODE (cand->fn) == FUNCTION_DECL)\n \t{\n@@ -10438,6 +10440,8 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\tfree (pretty_name);\n \t    }\n \t  call = error_mark_node;\n+\t  if (fn_p)\n+\t    *fn_p = error_mark_node;\n \t}\n       else\n \t{"}]}