{"sha": "23ed71c60c5a2783c092a00cd39133c2f057d4dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNlZDcxYzYwYzVhMjc4M2MwOTJhMDBjZDM5MTMzYzJmMDU3ZDRkYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-05-25T18:59:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-05-25T18:59:19Z"}, "message": "complex (complex<>::real(_Tp), [...]): Add per DR 387.\n\n2008-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/complex (complex<>::real(_Tp), complex<>::imag(_Tp),\n\tcomplex<float>::real(float), complex<float>::imag(float),\n\tcomplex<double>::real(double), complex<double>::imag(double),\n\tcomplex<long double>::real(long double),\n\tcomplex<long double>::imag(long double)): Add per DR 387.\n\t(complex<>::real(), complex<>::imag(), complex<float>::real(),\n\tcomplex<float>::imag(), complex<double>::real(),\n\tcomplex<double>::imag(), complex<long double>::real(),\n\tcomplex<long double>::imag(long double)): Adjust in C++0x mode.\n\t(real(complex<>&), imag(complex<>&), real(const complex<>&),\n\timag(const complex<>&)): Likewise.\n\t* testsuite/26_numerics/complex/dr387.cc: New.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 387.\n\nFrom-SVN: r135878", "tree": {"sha": "b3a4f720e115cd023d9f9984f7ecd887e8198454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a4f720e115cd023d9f9984f7ecd887e8198454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23ed71c60c5a2783c092a00cd39133c2f057d4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ed71c60c5a2783c092a00cd39133c2f057d4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ed71c60c5a2783c092a00cd39133c2f057d4dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ed71c60c5a2783c092a00cd39133c2f057d4dc/comments", "author": null, "committer": null, "parents": [{"sha": "5ec81069e5422ce9e606abc35ff3152a9478caf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec81069e5422ce9e606abc35ff3152a9478caf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec81069e5422ce9e606abc35ff3152a9478caf5"}], "stats": {"total": 178, "additions": 171, "deletions": 7}, "files": [{"sha": "a5003293c7beb4d8f2eb7b5bf7179c9578e5f9d8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23ed71c60c5a2783c092a00cd39133c2f057d4dc", "patch": "@@ -1,3 +1,19 @@\n+2008-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/complex (complex<>::real(_Tp), complex<>::imag(_Tp),\n+\tcomplex<float>::real(float), complex<float>::imag(float),\n+\tcomplex<double>::real(double), complex<double>::imag(double),\n+\tcomplex<long double>::real(long double),\n+\tcomplex<long double>::imag(long double)): Add per DR 387.\n+\t(complex<>::real(), complex<>::imag(), complex<float>::real(),\n+\tcomplex<float>::imag(), complex<double>::real(),\n+\tcomplex<double>::imag(), complex<long double>::real(),\n+\tcomplex<long double>::imag(long double)): Adjust in C++0x mode.\n+\t(real(complex<>&), imag(complex<>&), real(const complex<>&),\n+\timag(const complex<>&)): Likewise.\n+\t* testsuite/26_numerics/complex/dr387.cc: New.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 387.\n+\n 2008-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/complex: Trivial stylistic changes, define inline"}, {"sha": "55c48a6d1fc0b619e1ddef84c905907349c9d600", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=23ed71c60c5a2783c092a00cd39133c2f057d4dc", "patch": "@@ -475,19 +475,21 @@\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#303\">303</ulink>:\n         <emphasis>Bitset input operator underspecified</emphasis>\n     </term>\n-    <listitem><para>Basically, compare the input character to <code>is.widen(0)</code>\n-        and <code>is.widen(1)</code>.\n+    <listitem><para>Basically, compare the input character to \n+                    <code>is.widen(0)</code> and <code>is.widen(1)</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#305\">305</ulink>:\n-        <emphasis>Default behavior of codecvt&lt;wchar_t, char, mbstate_t&gt;::length()</emphasis>\n+        <emphasis>Default behavior of codecvt&lt;wchar_t, char, \n+                  mbstate_t&gt;::length()</emphasis>\n     </term>\n-    <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char, mbstate_t&gt;::do_length</code>\n-        must return.\n+    <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char, \n+                    mbstate_t&gt;::do_length</code> must return.\n     </para></listitem></varlistentry>\n \n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#328\">328</ulink>:\n-        <emphasis>Bad sprintf format modifier in money_put&lt;&gt;::do_put()</emphasis>\n+        <emphasis>Bad sprintf format modifier in \n+                  money_put&lt;&gt;::do_put()</emphasis>\n     </term>\n     <listitem><para>Change the format string to &quot;%.0Lf&quot;.\n     </para></listitem></varlistentry>\n@@ -498,8 +500,18 @@\n     <listitem><para>Add const overloads of <code>is_open</code>.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#387\">387</ulink>:\n+        <emphasis>std::complex over-encapsulated</emphasis>\n+    </term>\n+    <listitem><para>Add the <code>real(T)</code> and <code>imag(T)</code>\n+                    members;  in C++0x mode, also adjust the existing \n+                    <code>real()</code> and <code>imag()</code> members and \n+                    free functions.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#389\">389</ulink>:\n-        <emphasis>Const overload of valarray::operator[] returns by value</emphasis>\n+        <emphasis>Const overload of valarray::operator[] returns \n+                  by value</emphasis>\n     </term>\n     <listitem><para>Change it to return a <code>const T&amp;</code>.\n     </para></listitem></varlistentry>"}, {"sha": "0fa381cbeacc4b73609ce28234c0c91e6cbe1398", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=23ed71c60c5a2783c092a00cd39133c2f057d4dc", "patch": "@@ -131,6 +131,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         complex(const complex<_Up>& __z)\n \t: _M_real(__z.real()), _M_imag(__z.imag()) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      _Tp real() const\n+      { return _M_real; }\n+\n+      _Tp imag() const\n+      { return _M_imag; }\n+#else\n       ///  Return real part of complex number.\n       _Tp& real()\n       { return _M_real; }\n@@ -146,6 +155,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ///  Return imaginary part of complex number.\n       const _Tp& imag() const\n       { return _M_imag; }\n+#endif\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      void real(_Tp __val)\n+      { _M_real = __val; }\n+\n+      void imag(_Tp __val)\n+      { _M_imag = __val; }\n \n       /// Assign this complex number to scalar @a t.\n       complex<_Tp>& operator=(const _Tp&);\n@@ -504,6 +522,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   // Values\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    inline _Tp\n+    real(const complex<_Tp>& __z)\n+    { return __z.real(); }\n+    \n+  template<typename _Tp>\n+    inline _Tp\n+    imag(const complex<_Tp>& __z)\n+    { return __z.imag(); }\n+#else\n   template<typename _Tp>\n     inline _Tp&\n     real(complex<_Tp>& __z)\n@@ -523,6 +552,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline const _Tp&\n     imag(const complex<_Tp>& __z)\n     { return __z.imag(); }\n+#endif\n \n   // 26.2.7/3 abs(__z):  Returns the magnitude of __z.\n   template<typename _Tp>\n@@ -993,6 +1023,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       explicit complex(const complex<double>&);\n       explicit complex(const complex<long double>&);\t\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      float real() const\n+      { return __real__ _M_value; }\n+\n+      float imag() const\n+      { return __imag__ _M_value; }\n+#else\n       float& real()\n       { return __real__ _M_value; }\n \n@@ -1004,6 +1043,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       const float& imag() const\n       { return __imag__ _M_value; }\n+#endif\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      void real(float __val)\n+      { __real__ _M_value = __val; }\n+\n+      void imag(float __val)\n+      { __imag__ _M_value = __val; }\n \n       complex<float>&\n       operator=(float __f)\n@@ -1121,6 +1169,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       explicit complex(const complex<long double>&);\t\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      double real() const\n+      { return __real__ _M_value; }\n+\n+      double imag() const\n+      { return __imag__ _M_value; }\n+#else\n       double& real()\n       { return __real__ _M_value; }\n \n@@ -1132,6 +1189,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       const double& imag() const\n       { return __imag__ _M_value; }\n+#endif\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      void real(double __val)\n+      { __real__ _M_value = __val; }\n+\n+      void imag(double __val)\n+      { __imag__ _M_value = __val; }\n \n       complex<double>&\n       operator=(double __d)\n@@ -1249,6 +1315,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       complex(const complex<double>& __z)\n       : _M_value(__z.__rep()) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      long double real() const\n+      { return __real__ _M_value; }\n+\n+      long double imag() const\n+      { return __imag__ _M_value; }\n+#else\n       long double& real()\n       { return __real__ _M_value; }\n \n@@ -1260,6 +1335,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       const long double& imag() const\n       { return __imag__ _M_value; }\n+#endif\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 387. std::complex over-encapsulated.\n+      void real(long double __val)\n+      { __real__ _M_value = __val; }\n+\n+      void imag(long double __val)\n+      { __imag__ _M_value = __val; }\n \n       complex<long double>&\n       operator=(long double __r)"}, {"sha": "4431842242c548c16d511b8575b63d453b8fd876", "filename": "libstdc++-v3/testsuite/26_numerics/complex/dr387.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr387.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ed71c60c5a2783c092a00cd39133c2f057d4dc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr387.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr387.cc?ref=23ed71c60c5a2783c092a00cd39133c2f057d4dc", "patch": "@@ -0,0 +1,52 @@\n+// 2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <complex>\n+#include <testsuite_hooks.h>\n+\n+// DR 387. std::complex over-encapsulated.\n+template<typename T>\n+  void\n+  do_test()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const T r = 1.0;\n+    const T i = -1.0;\n+    const T v = 0.0;\n+\n+    std::complex<T> z1(r, i);\n+    z1.real(v);\n+    VERIFY( z1.real() == v );\n+    VERIFY( z1.imag() == i );\n+\n+    std::complex<T> z2(r, i);\n+    z2.imag(v);\n+    VERIFY( z2.real() == r );\n+    VERIFY( z2.imag() == v );\n+  }\n+\n+int main()\n+{\n+  do_test<float>();\n+  do_test<double>();\n+  do_test<long double>();\n+  return 0;\n+}"}]}