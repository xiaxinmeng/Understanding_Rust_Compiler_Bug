{"sha": "6bd6178de9f5e72b20377514a4af6e4164a5bcca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkNjE3OGRlOWY1ZTcyYjIwMzc3NTE0YTRhZjZlNDE2NGE1YmNjYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-04T22:01:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-04T22:01:19Z"}, "message": "(bc_init_mode_to_opcode_maps, bc_expand_expr): Cast enum array indices to int.\n\n(bc_load_memory, bc_store_memory): Likewise.\n(bc_runtime_type_code): Cast enum logical operand to int.\n\nFrom-SVN: r5592", "tree": {"sha": "d3fc91b24c377f2d78f33fe9510d34bc965f5408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3fc91b24c377f2d78f33fe9510d34bc965f5408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd6178de9f5e72b20377514a4af6e4164a5bcca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd6178de9f5e72b20377514a4af6e4164a5bcca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd6178de9f5e72b20377514a4af6e4164a5bcca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd6178de9f5e72b20377514a4af6e4164a5bcca/comments", "author": null, "committer": null, "parents": [{"sha": "af68829613cdfc26263726f069c9bdb9bd5773e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af68829613cdfc26263726f069c9bdb9bd5773e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af68829613cdfc26263726f069c9bdb9bd5773e7"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "43899e3ff82a9faf1bfa9207f91b8e7b5279fad7", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd6178de9f5e72b20377514a4af6e4164a5bcca/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd6178de9f5e72b20377514a4af6e4164a5bcca/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6bd6178de9f5e72b20377514a4af6e4164a5bcca", "patch": "@@ -228,15 +228,15 @@ bc_init_mode_to_opcode_maps ()\n {\n   int mode;\n \n-  for (mode = 0; mode < MAX_MACHINE_MODE; mode++)\n+  for (mode = 0; mode < (int) MAX_MACHINE_MODE; mode++)\n     mode_to_const_map[mode] =\n       mode_to_load_map[mode] =\n \tmode_to_store_map[mode] = neverneverland;\n       \n #define DEF_MODEMAP(SYM, CODE, UCODE, CONST, LOAD, STORE) \\\n-  mode_to_const_map[(enum machine_mode) SYM] = CONST; \\\n-  mode_to_load_map[(enum machine_mode) SYM] = LOAD; \\\n-  mode_to_store_map[(enum machine_mode) SYM] = STORE;\n+  mode_to_const_map[(int) SYM] = CONST; \\\n+  mode_to_load_map[(int) SYM] = LOAD; \\\n+  mode_to_store_map[(int) SYM] = STORE;\n \n #include \"modemap.def\"\n #undef DEF_MODEMAP\n@@ -5855,9 +5855,9 @@ bc_expand_expr (exp)\n #ifdef DEBUG_PRINT_CODE\n       fprintf (stderr, \" [%x]\\n\", TREE_INT_CST_LOW (exp));\n #endif\n-      bc_emit_instruction (mode_to_const_map[DECL_BIT_FIELD (exp)\n+      bc_emit_instruction (mode_to_const_map[(int) (DECL_BIT_FIELD (exp)\n \t\t\t\t\t     ? SImode\n-\t\t\t\t\t     : TYPE_MODE (TREE_TYPE (exp))],\n+\t\t\t\t\t     : TYPE_MODE (TREE_TYPE (exp)))],\n \t\t\t   (HOST_WIDE_INT) TREE_INT_CST_LOW (exp));\n       return;\n       \n@@ -9077,7 +9077,7 @@ bc_load_memory (type, decl)\n \t|| TYPE_MODE (type) == VOIDmode)\n       return;\n     else\n-      opcode = mode_to_load_map [TYPE_MODE (type)];\n+      opcode = mode_to_load_map [(int) TYPE_MODE (type)];\n \n   if (opcode == neverneverland)\n     abort ();\n@@ -9124,7 +9124,7 @@ bc_store_memory (type, decl)\n \topcode = storeBLK;\n       }\n     else\n-      opcode = mode_to_store_map [TYPE_MODE (type)];\n+      opcode = mode_to_store_map [(int) TYPE_MODE (type)];\n \n   if (opcode == neverneverland)\n     abort ();\n@@ -9497,7 +9497,7 @@ bc_runtime_type_code (type)\n     case POINTER_TYPE:\n     case RECORD_TYPE:\n \n-      val = TYPE_MODE (type) | TYPE_ALIGN (type) << 8;\n+      val = (int) TYPE_MODE (type) | TYPE_ALIGN (type) << 8;\n       break;\n \n     case ERROR_MARK:"}]}