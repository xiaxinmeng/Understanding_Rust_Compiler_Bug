{"sha": "57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjYjc5ZWZhNDBkZDk4ZTYyNTBkNWY4ZTQ5ZWI2MDhjMGFiYzE1Yg==", "commit": {"author": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2008-09-28T09:05:07Z"}, "committer": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2008-09-28T09:05:07Z"}, "message": "mutex (try_lock): Implement generic try_lock.\n\n2008-09-28  Chris Fairles <cfairles@gcc.gnu.org>\n\n        * include/std/mutex (try_lock): Implement generic try_lock.\n        * testsuite/30_threads/try_lock/1.cc: New.\n        * testsuite/30_threads/try_lock/2.cc: Likewise.\n        * testsuite/30_threads/try_lock/3.cc: Likewise.\n        * testsuite/30_threads/mutex/cons/assign_neg.cc: Adjust line numbers.\n        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n        * testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc:\n        Likewise.\n        * testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r140729", "tree": {"sha": "c5702d2ed3103c739f4bd2b861ccf12b63986f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5702d2ed3103c739f4bd2b861ccf12b63986f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/comments", "author": null, "committer": null, "parents": [{"sha": "1a9ea3e14b8f92502cbdc927374d7846732da8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9ea3e14b8f92502cbdc927374d7846732da8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9ea3e14b8f92502cbdc927374d7846732da8bb"}], "stats": {"total": 398, "additions": 388, "deletions": 10}, "files": [{"sha": "74ec22612727a7f52b2462b239a5470147238790", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -1,3 +1,19 @@\n+2008-09-28  Chris Fairles <cfairles@gcc.gnu.org>\n+\n+\t* include/std/mutex (try_lock): Implement generic try_lock.\n+\t* testsuite/30_threads/try_lock/1.cc: New.\n+\t* testsuite/30_threads/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/3.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Likewise.\n+\t\n 2008-09-26  Peter O'Gorman  <pogma@thewrittenword.com>\n             Steve Ellcey  <sje@cup.hp.com>\n "}, {"sha": "f3848d09c0220553aeaa6fc06be312b02e241c99", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -41,6 +41,7 @@\n # include <c++0x_warning.h>\n #else\n \n+#include <tuple>\n #include <cstddef>\n #include <chrono>\n #include <exception>\n@@ -601,9 +602,81 @@ namespace std\n     swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>&& __y)\n     { __x.swap(__y); }\n \n-  template<typename _L1, typename _L2, typename ..._L3>\n+  template<int _Idx>\n+    struct __unlock_impl\n+    {\n+      template<typename... _Lock>\n+        static void\n+        __do_unlock(tuple<_Lock&...>& __locks)\n+        {\n+\t  std::get<_Idx>(__locks).unlock();\n+\t  __unlock_impl<_Idx - 1>::__do_unlock(__locks);\n+\t}\n+    };\n+  \n+  template<>\n+    struct __unlock_impl<-1>\n+    {\n+      template<typename... _Lock>\n+        static void\n+        __do_unlock(tuple<_Lock&...>&)\n+        { }\n+    };\n+\n+  template<int _Idx, bool _Continue = true>\n+    struct __try_lock_impl\n+    {\n+      template<typename... _Lock>\n+        static int\n+        __do_try_lock(tuple<_Lock&...>& __locks)\n+        {\n+\t  if(std::get<_Idx>(__locks).try_lock())\n+\t    {\n+\t      return __try_lock_impl<_Idx + 1,\n+\t\t_Idx + 2 < sizeof...(_Lock)>::__do_try_lock(__locks);\n+\t    }\n+\t  else\n+\t    {\n+\t      __unlock_impl<_Idx>::__do_unlock(__locks);\n+\t      return _Idx;\n+\t    }\n+\t}\n+    };\n+  \n+  template<int _Idx>\n+    struct __try_lock_impl<_Idx, false>\n+    {\n+      template<typename... _Lock>\n+        static int\n+        __do_try_lock(tuple<_Lock&...>& __locks)\n+        {\n+\t  if(std::get<_Idx>(__locks).try_lock())\n+\t    return -1;\n+\t  else\n+\t    {\n+\t      __unlock_impl<_Idx>::__do_unlock(__locks);\n+\t      return _Idx;\n+\t    }\n+\t}\n+    };\n+  \n+  /** @brief Generic try_lock.\n+   *  @param __l1 Meets Mutex requirements (try_lock() may throw).\n+   *  @param __l2 Meets Mutex requirements (try_lock() may throw).\n+   *  @param __l3 Meets Mutex requirements (try_lock() may throw).\n+   *  @return Returns -1 if all try_lock() calls return true. Otherwise returns \n+   *          a 0-based index corresponding to the argument that returned false.\n+   *  @post Either all arguments are locked, or none will be.\n+   *\n+   *  Sequentially calls try_lock() on each argument.\n+   */\n+  template<typename _Lock1, typename _Lock2, typename... _Lock3>\n     int\n-    try_lock(_L1& __l1, _L2& __l2, _L3&... __l3);\n+    try_lock(_Lock1& __l1, _Lock2& __l2, _Lock3&... __l3)\n+    {\n+      tuple<_Lock1&, _Lock2&, _Lock3&...> __locks(__l1, __l2, __l3...);\n+      return __try_lock_impl<0>::__do_try_lock(__locks);\n+    }\n \n   template<typename _L1, typename _L2, typename ..._L3>\n     void"}, {"sha": "ba7a53f2f165851e797f25e25921c91acbe9f252", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 76 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 77 }"}, {"sha": "b1c97fe6b263e4f3615a08b8c79fe09c2241d915", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 75 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 76 }"}, {"sha": "b1b6c15b481549a6a286c57b404560f7a349dee8", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 128 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 129 }"}, {"sha": "2fa153be98172dfc1b52f0e13e68b94885e0f036", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 127 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 128 }"}, {"sha": "4d93beef812f891bfb66ed85d47daa39b47e0980", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 282 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 283 }"}, {"sha": "e1b63c28a5aa9ee9a4cc8e71a17c66ace03bdcc3", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 281 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 282 }"}, {"sha": "715a5793a258176d70f9e081aab586f8556d4b79", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 180 }"}, {"sha": "3c22c1eba95c318c5b2240c04c334f93f1ae4614", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }"}, {"sha": "4f86190a047974a90f593347c83deb8e2df1fb36", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F1.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::mutex mutex_type;\n+  typedef std::unique_lock<mutex_type> lock_type;\n+\n+  try\n+    {\n+      mutex_type m1, m2, m3;\n+      lock_type l1(m1, std::defer_lock), \n+\tl2(m2, std::defer_lock),\n+\tl3(m3, std::defer_lock);\n+\n+      try\n+\t{\n+\t  int result = std::try_lock(l1, l2, l3);\n+\t  VERIFY( result == -1 );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "b2046f012c39dc65cf303f32a5770f436add1301", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/2.cc", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F2.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -0,0 +1,117 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::mutex m1, m2, m3;\n+      m1.lock();\n+      int result = std::try_lock(m1, m2, m3);\n+      VERIFY( result == 0 );\n+      m1.lock();\n+      m2.lock();\n+      m3.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::mutex m1, m2, m3;\n+      m2.lock();\n+      int result = std::try_lock(m1, m2, m3);\n+      VERIFY( result == 1 );\n+      m1.lock();\n+      m2.lock();\n+      m3.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::mutex m1, m2, m3;\n+      m3.lock();\n+      int result = std::try_lock(m1, m2, m3);\n+      VERIFY( result == 2 );\n+      m1.lock();\n+      m2.lock();\n+      m3.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "a8bd41369eb8762067e303af72aebe8060e5c098", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/3.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb79efa40dd98e6250d5f8e49eb608c0abc15b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F3.cc?ref=57cb79efa40dd98e6250d5f8e49eb608c0abc15b", "patch": "@@ -0,0 +1,100 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct user_lock\n+{\n+  user_lock() : is_locked(false) { }\n+  ~user_lock() = default;\n+  user_lock(const user_lock&) = default;\n+\n+  void lock()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    VERIFY( !is_locked );\n+    is_locked = true;\n+  }\n+\n+  bool try_lock() \n+  { return is_locked ? false : (is_locked = true); }\n+\n+  void unlock()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    VERIFY( is_locked );\n+    is_locked = false;\n+  }\n+\n+private:\n+  bool is_locked;\n+};\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::mutex m1;\n+      std::recursive_mutex m2;\n+      user_lock m3;\n+\n+      try\n+\t{\n+\t  //heterogeneous types\n+\t  int result = std::try_lock(m1, m2, m3);\n+\t  VERIFY( result == -1 );\n+\t  m1.unlock();\n+\t  m2.unlock();\n+\t  m3.unlock();\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}]}