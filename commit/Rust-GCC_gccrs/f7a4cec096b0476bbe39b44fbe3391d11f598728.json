{"sha": "f7a4cec096b0476bbe39b44fbe3391d11f598728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhNGNlYzA5NmIwNDc2YmJlMzliNDRmYmUzMzkxZDExZjU5ODcyOA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-07-08T19:58:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-07-08T19:58:19Z"}, "message": "c-common.c (decl_attributes): Only take a single attributes parameter.\n\n\t* c-common.c (decl_attributes): Only take a single attributes\n\tparameter.\n\t* c-common.h (decl_attributes): Update prototype.\n\t* c-decl.c (start_decl, start_function): Only take a single\n\tattributes parameter.  Update calls to decl_attributes.\n\t(finish_struct, finish_enum): Update calls to decl_attributes.\n\t(push_parm_decl): Expect unified list of attributes.  Update call\n\tto decl_attributes.\n\t* c-parse.in (fndef, initdcl, notype_initdcl, nested_function,\n\tnotype_nested_function, component_declarator,\n\tcomponent_notype_declarator, label): Update calls to\n\tdecl_attributes.\n\t(absdcl_maybe_attribute, parm, firstparm, myparm): Unify attribute\n\tlists that are passed to push_parm_decl.\n\t* c-tree.h (start_function, start_decl): Update prototypes.\n\t* config/sh/sh-protos.h, config/sh/sh.c\n\t(sh_pragma_insert_attributes): Only take a single attributes\n\tparameter.\n\t* config/sh/sh.h (PRAGMA_INSERT_ATTRIBUTES): Likewise.\n\t* doc/tm.texi (INSERT_ATTRIBUTES): Update.\n\t* objc/objc-act.c (define_decl, generate_objc_symtab_decl,\n\tbuild_module_descriptor, generate_static_references,\n\tgenerate_strings, build_selector_translation_table,\n\tgenerate_descriptor_table, generate_protocols,\n\tgenerate_ivars_list, generate_dispatch_table,\n\tgenerate_protocol_list, generate_category,\n\tgenerate_shared_structures, really_start_method, add_objc_decls,\n\tgenerate_classref_translation_entry): Update calls to start_decl\n\tand start_function.\n\t(build_tmp_function_decl, start_method_def): Unify attribute lists\n\tthat are passed to push_parm_decl.\n\ncp:\n\t* decl.c (grokdeclarator), decl2.c (cplus_decl_attributes): Update\n\tcalls to decl_attributes.\n\ntestsuite:\n\t* gcc.c-torture/compile/20010701-1.c,\n\tg++.old-deja/g++.ext/attrib6.C: New tests.\n\nFrom-SVN: r43850", "tree": {"sha": "b1d0d98aa89bcdb8b2c6760c4251abfdd4a128c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1d0d98aa89bcdb8b2c6760c4251abfdd4a128c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a4cec096b0476bbe39b44fbe3391d11f598728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a4cec096b0476bbe39b44fbe3391d11f598728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a4cec096b0476bbe39b44fbe3391d11f598728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a4cec096b0476bbe39b44fbe3391d11f598728/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c25db2dfed2c3c86dc6b61c6fc7eee757c6c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c25db2dfed2c3c86dc6b61c6fc7eee757c6c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c25db2dfed2c3c86dc6b61c6fc7eee757c6c71"}], "stats": {"total": 245, "additions": 142, "deletions": 103}, "files": [{"sha": "9269546037dc8af57f7d0ec5175d49f03174b61f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -1,3 +1,37 @@\n+2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (decl_attributes): Only take a single attributes\n+\tparameter.\n+\t* c-common.h (decl_attributes): Update prototype.\n+\t* c-decl.c (start_decl, start_function): Only take a single\n+\tattributes parameter.  Update calls to decl_attributes.\n+\t(finish_struct, finish_enum): Update calls to decl_attributes.\n+\t(push_parm_decl): Expect unified list of attributes.  Update call\n+\tto decl_attributes.\n+\t* c-parse.in (fndef, initdcl, notype_initdcl, nested_function,\n+\tnotype_nested_function, component_declarator,\n+\tcomponent_notype_declarator, label): Update calls to\n+\tdecl_attributes.\n+\t(absdcl_maybe_attribute, parm, firstparm, myparm): Unify attribute\n+\tlists that are passed to push_parm_decl.\n+\t* c-tree.h (start_function, start_decl): Update prototypes.\n+\t* config/sh/sh-protos.h, config/sh/sh.c\n+\t(sh_pragma_insert_attributes): Only take a single attributes\n+\tparameter.\n+\t* config/sh/sh.h (PRAGMA_INSERT_ATTRIBUTES): Likewise.\n+\t* doc/tm.texi (INSERT_ATTRIBUTES): Update.\n+\t* objc/objc-act.c (define_decl, generate_objc_symtab_decl,\n+\tbuild_module_descriptor, generate_static_references,\n+\tgenerate_strings, build_selector_translation_table,\n+\tgenerate_descriptor_table, generate_protocols,\n+\tgenerate_ivars_list, generate_dispatch_table,\n+\tgenerate_protocol_list, generate_category,\n+\tgenerate_shared_structures, really_start_method, add_objc_decls,\n+\tgenerate_classref_translation_entry): Update calls to start_decl\n+\tand start_function.\n+\t(build_tmp_function_decl, start_method_def): Unify attribute lists\n+\tthat are passed to push_parm_decl.\n+\n 2001-07-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* final.c (no_asm_to_stream): New."}, {"sha": "2d56b9e4234918d9c98bb0d4c0c1781a0e96202c", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -722,14 +722,12 @@ default_valid_lang_attribute (attr_name, attr_args, decl, type)\n int (*valid_lang_attribute) PARAMS ((tree, tree, tree, tree))\n      = default_valid_lang_attribute;\n \n-/* Process the attributes listed in ATTRIBUTES and PREFIX_ATTRIBUTES\n-   and install them in NODE, which is either a DECL (including a TYPE_DECL)\n-   or a TYPE.  PREFIX_ATTRIBUTES can appear after the declaration specifiers\n-   and declaration modifiers but before the declaration proper.  */\n+/* Process the attributes listed in ATTRIBUTES and install them in NODE,\n+   which is either a DECL (including a TYPE_DECL) or a TYPE.  */\n \n void\n-decl_attributes (node, attributes, prefix_attributes)\n-     tree node, attributes, prefix_attributes;\n+decl_attributes (node, attributes)\n+     tree node, attributes;\n {\n   tree decl = 0, type = 0;\n   int is_type = 0;\n@@ -752,15 +750,13 @@ decl_attributes (node, attributes, prefix_attributes)\n      allow it to do so.  Do this before allowing machine back ends to\n      insert attributes, so that they have the opportunity to override\n      anything done here.  */\n-  PRAGMA_INSERT_ATTRIBUTES (node, & attributes, & prefix_attributes);\n+  PRAGMA_INSERT_ATTRIBUTES (node, & attributes);\n #endif\n \n #ifdef INSERT_ATTRIBUTES\n-  INSERT_ATTRIBUTES (node, & attributes, & prefix_attributes);\n+  INSERT_ATTRIBUTES (node, & attributes);\n #endif\n \n-  attributes = chainon (prefix_attributes, attributes);\n-\n   for (a = attributes; a; a = TREE_CHAIN (a))\n     {\n       tree name = TREE_PURPOSE (a);"}, {"sha": "eac227e48d2ab642946772208d80766dd43c46d2", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -498,7 +498,7 @@ extern void finish_fname_decls\t\t\tPARAMS ((void));\n extern const char *fname_as_string\t\tPARAMS ((int));\n extern tree fname_decl\t\t\t\tPARAMS ((unsigned, tree));\n extern const char *fname_string\t\t\tPARAMS ((unsigned));\n-extern void decl_attributes\t\t\tPARAMS ((tree, tree, tree));\n+extern void decl_attributes\t\t\tPARAMS ((tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));\n extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n extern void set_Wformat\t\t\t\tPARAMS ((int));"}, {"sha": "eba9ee6295aa570b149dc6656345f3a4e68ef578", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -3336,10 +3336,10 @@ groktypename_in_parm_context (typename)\n    grokfield and not through here.  */\n \n tree\n-start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n+start_decl (declarator, declspecs, initialized, attributes)\n      tree declarator, declspecs;\n      int initialized;\n-     tree attributes, prefix_attributes;\n+     tree attributes;\n {\n   register tree decl = grokdeclarator (declarator, declspecs,\n \t\t\t\t       NORMAL, initialized);\n@@ -3452,7 +3452,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n #endif\n \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n-  decl_attributes (decl, attributes, prefix_attributes);\n+  decl_attributes (decl, attributes);\n \n   /* Add this decl to the current binding level.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n@@ -3716,8 +3716,7 @@ push_parm_decl (parm)\n \n   decl = grokdeclarator (TREE_VALUE (TREE_PURPOSE (parm)),\n \t\t\t TREE_PURPOSE (TREE_PURPOSE (parm)), PARM, 0);\n-  decl_attributes (decl, TREE_VALUE (TREE_VALUE (parm)),\n-\t\t   TREE_PURPOSE (TREE_VALUE (parm)));\n+  decl_attributes (decl, TREE_VALUE (parm));\n \n #if 0\n   if (DECL_NAME (decl))\n@@ -5345,7 +5344,7 @@ finish_struct (t, fieldlist, attributes)\n \n   TYPE_SIZE (t) = 0;\n \n-  decl_attributes (t, attributes, NULL_TREE);\n+  decl_attributes (t, attributes);\n \n   /* Nameless union parm types are useful as GCC extension.  */\n   if (! (TREE_CODE (t) == UNION_TYPE && TYPE_NAME (t) == 0) && !pedantic)\n@@ -5709,7 +5708,7 @@ finish_enum (enumtype, values, attributes)\n   if (in_parm_level_p ())\n     warning (\"enum defined inside parms\");\n \n-  decl_attributes (enumtype, attributes, NULL_TREE);\n+  decl_attributes (enumtype, attributes);\n \n   /* Calculate the maximum value of any enumerator in this type.  */\n \n@@ -5893,7 +5892,7 @@ build_enumerator (name, value)\n \n \f\n /* Create the FUNCTION_DECL for a function definition.\n-   DECLSPECS, DECLARATOR, PREFIX_ATTRIBUTES and ATTRIBUTES are the parts of\n+   DECLSPECS, DECLARATOR and ATTRIBUTES are the parts of\n    the declaration; they describe the function's name and the type it returns,\n    but twisted together in a fashion that parallels the syntax of C.\n \n@@ -5905,8 +5904,8 @@ build_enumerator (name, value)\n    yyparse to report a parse error.  */\n \n int\n-start_function (declspecs, declarator, prefix_attributes, attributes)\n-     tree declarator, declspecs, prefix_attributes, attributes;\n+start_function (declspecs, declarator, attributes)\n+     tree declarator, declspecs, attributes;\n {\n   tree decl1, old_decl;\n   tree restype;\n@@ -5933,7 +5932,7 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n       return 0;\n     }\n \n-  decl_attributes (decl1, prefix_attributes, attributes);\n+  decl_attributes (decl1, attributes);\n \n   announce_function (decl1);\n "}, {"sha": "ad2d5f7f13d31b690e8eb89f18aec9278ea6be64", "filename": "gcc/c-parse.in", "status": "modified", "additions": 27, "deletions": 38, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -378,7 +378,7 @@ datadef:\n fndef:\n \t  declspecs_ts setspecs declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE))\n+\t\t\t\t\tprefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n \t  old_style_parm_decls\n@@ -396,7 +396,7 @@ fndef:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declspecs_nots setspecs notype_declarator\n \t\t{ if (! start_function (current_declspecs, $3,\n-\t\t\t\t\tprefix_attributes, NULL_TREE))\n+\t\t\t\t\tprefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n \t  old_style_parm_decls\n@@ -414,7 +414,7 @@ fndef:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| setspecs notype_declarator\n \t\t{ if (! start_function (NULL_TREE, $2,\n-\t\t\t\t\tprefix_attributes, NULL_TREE))\n+\t\t\t\t\tprefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n \t  old_style_parm_decls\n@@ -1436,31 +1436,31 @@ maybeasm:\n initdcl:\n \t  declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1,\n-\t\t\t\t\t  $3, prefix_attributes);\n+\t\t\t\t\t  chainon ($3, prefix_attributes));\n \t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_init ();\n \t\t  finish_decl ($<ttype>5, $6, $2); }\n \t| declarator maybeasm maybe_attribute\n \t\t{ tree d = start_decl ($1, current_declspecs, 0,\n-\t\t\t\t       $3, prefix_attributes);\n+\t\t\t\t       chainon ($3, prefix_attributes));\n \t\t  finish_decl (d, NULL_TREE, $2); \n                 }\n \t;\n \n notype_initdcl:\n \t  notype_declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1,\n-\t\t\t\t\t  $3, prefix_attributes);\n+\t\t\t\t\t  chainon ($3, prefix_attributes));\n \t\t  start_init ($<ttype>$, $2, global_bindings_p ()); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n \t\t{ finish_init ();\n \t\t  finish_decl ($<ttype>5, $6, $2); }\n \t| notype_declarator maybeasm maybe_attribute\n \t\t{ tree d = start_decl ($1, current_declspecs, 0,\n-\t\t\t\t       $3, prefix_attributes);\n+\t\t\t\t       chainon ($3, prefix_attributes));\n \t\t  finish_decl (d, NULL_TREE, $2); }\n \t;\n /* the * rules are dummies to accept the Apollo extended syntax\n@@ -1594,7 +1594,7 @@ nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE))\n+\t\t\t\t\tprefix_attributes))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1624,7 +1624,7 @@ notype_nested_function:\n \n \t\t  push_function_context ();\n \t\t  if (! start_function (current_declspecs, $1,\n-\t\t\t\t\tprefix_attributes, NULL_TREE))\n+\t\t\t\t\tprefix_attributes))\n \t\t    {\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n@@ -1896,27 +1896,27 @@ components_notype:\n component_declarator:\n \t  save_filename save_lineno declarator maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, NULL_TREE);\n-\t\t  decl_attributes ($$, $4, prefix_attributes); }\n+\t\t  decl_attributes ($$, chainon ($4, prefix_attributes)); }\n \t| save_filename save_lineno\n \t  declarator ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, $5);\n-\t\t  decl_attributes ($$, $6, prefix_attributes); }\n+\t\t  decl_attributes ($$, chainon ($6, prefix_attributes)); }\n \t| save_filename save_lineno ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, NULL_TREE, current_declspecs, $4);\n-\t\t  decl_attributes ($$, $5, prefix_attributes); }\n+\t\t  decl_attributes ($$, chainon ($5, prefix_attributes)); }\n \t;\n \n component_notype_declarator:\n \t  save_filename save_lineno notype_declarator maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, NULL_TREE);\n-\t\t  decl_attributes ($$, $4, prefix_attributes); }\n+\t\t  decl_attributes ($$, chainon ($4, prefix_attributes)); }\n \t| save_filename save_lineno\n \t  notype_declarator ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, $5);\n-\t\t  decl_attributes ($$, $6, prefix_attributes); }\n+\t\t  decl_attributes ($$, chainon ($6, prefix_attributes)); }\n \t| save_filename save_lineno ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, NULL_TREE, current_declspecs, $4);\n-\t\t  decl_attributes ($$, $5, prefix_attributes); }\n+\t\t  decl_attributes ($$, chainon ($5, prefix_attributes)); }\n \t;\n \n /* We chain the enumerators in reverse order.\n@@ -1966,18 +1966,15 @@ absdcl_maybe_attribute:   /* absdcl maybe_attribute, but not just attributes */\n \t/* empty */\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t NULL_TREE),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t NULL_TREE)); }\n+\t\t\t\t\tprefix_attributes); }\n \t| absdcl1\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $1),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t NULL_TREE)); }\n+\t\t\t\t\tprefix_attributes); }\n \t| absdcl1_noea attributes\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $1),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $2)); }\n+\t\t\t\t\tchainon ($2, prefix_attributes)); }\n \t;\n \n absdcl1:  /* a nonempty absolute declarator */\n@@ -2450,7 +2447,7 @@ label:\t  CASE expr_no_commas ':'\n \t\t  stmt_count++;\n \t\t  if (label)\n \t\t    {\n-\t\t      decl_attributes (label, $5, NULL_TREE);\n+\t\t      decl_attributes (label, $5);\n \t\t      $$ = add_stmt (build_stmt (LABEL_STMT, label));\n \t\t    }\n \t\t  else\n@@ -2567,16 +2564,14 @@ parm:\n \t  declspecs_ts setspecs parm_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $4));\n+\t\t\t\t\tchainon ($4, prefix_attributes));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declspecs_ts setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $4)); \n+\t\t\t\t\tchainon ($4, prefix_attributes)); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n@@ -2588,8 +2583,7 @@ parm:\n \t| declspecs_nots setspecs notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $4));\n+\t\t\t\t\tchainon ($4, prefix_attributes));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n@@ -2607,16 +2601,14 @@ firstparm:\n \t  declspecs_ts_nosa setspecs_fp parm_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $4));\n+\t\t\t\t\tchainon ($4, prefix_attributes));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n \t| declspecs_ts_nosa setspecs_fp notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $4)); \n+\t\t\t\t\tchainon ($4, prefix_attributes)); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n@@ -2628,8 +2620,7 @@ firstparm:\n \t| declspecs_nots_nosa setspecs_fp notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $3),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $4));\n+\t\t\t\t\tchainon ($4, prefix_attributes));\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); }\n@@ -3113,13 +3104,11 @@ myparm:\n \t  parm_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $1),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $2)); }\n+\t\t\t\t\tchainon ($2, prefix_attributes)); }\n \t| notype_declarator maybe_attribute\n \t\t{ $$ = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t $1),\n-\t\t\t\t\tbuild_tree_list (prefix_attributes,\n-\t\t\t\t\t\t\t $2)); }\n+\t\t\t\t\tchainon ($2, prefix_attributes)); }\n \t| absdcl_maybe_attribute\n \t\t{ $$ = $1; }\n \t;"}, {"sha": "6c466e7608646c58319963c0e0d35fc4aee97d35", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -207,10 +207,9 @@ extern void shadow_record_fields                PARAMS ((tree));\n extern void shadow_tag                          PARAMS ((tree));\n extern void shadow_tag_warned                   PARAMS ((tree, int));\n extern tree start_enum                          PARAMS ((tree));\n-extern int  start_function                      PARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t\t tree));\n+extern int  start_function                      PARAMS ((tree, tree, tree));\n extern tree start_decl                          PARAMS ((tree, tree, int,\n-\t\t\t\t\t\t\t tree, tree));\n+\t\t\t\t\t\t\t tree));\n extern tree start_struct                        PARAMS ((enum tree_code, tree));\n extern void store_parm_decls                    PARAMS ((void));\n extern tree xref_tag                            PARAMS ((enum tree_code, tree));"}, {"sha": "4125e327a832fc78e665f435d3d92cf03b39b10e", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -105,7 +105,7 @@ extern rtx sh_va_arg PARAMS ((tree, tree));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern void sh_pragma_insert_attributes PARAMS ((tree, tree *, tree *));\n+extern void sh_pragma_insert_attributes PARAMS ((tree, tree *));\n extern tree sh_build_va_list PARAMS ((void));\n #endif /* TREE_CODE */\n "}, {"sha": "d66984080df49088dea397ce88d519caf93d02db", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -4604,10 +4604,9 @@ sh_pr_nosave_low_regs (pfile)\n /* Generate 'handle_interrupt' attribute for decls */\n \n void\n-sh_pragma_insert_attributes (node, attributes, prefix)\n+sh_pragma_insert_attributes (node, attributes)\n      tree node;\n      tree * attributes;\n-     tree * prefix ATTRIBUTE_UNUSED;\n {\n   if (! pragma_interrupt\n       || TREE_CODE (node) != FUNCTION_DECL)"}, {"sha": "29393fd2d93a879b646cd207f9b1a80045eaf71a", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -2293,8 +2293,8 @@ extern int current_function_interrupt;\n    for interrupt functions.  */\n extern struct rtx_def *sp_switch;\n \n-#define PRAGMA_INSERT_ATTRIBUTES(node, pattr, prefix_attr) \\\n-  sh_pragma_insert_attributes (node, pattr, prefix_attr)\n+#define PRAGMA_INSERT_ATTRIBUTES(node, pattr) \\\n+  sh_pragma_insert_attributes (node, pattr)\n \n extern int rtx_equal_function_value_matters;\n extern struct rtx_def *fpscr_rtx;"}, {"sha": "efdbccd4b98ec34b3dc5474bcd88c67da7a080a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -1,3 +1,8 @@\n+2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (grokdeclarator), decl2.c (cplus_decl_attributes): Update\n+\tcalls to decl_attributes.\n+\n 2001-07-06  Ira Ruben   <ira@apple.com>\n \n         * cp-tree.def (TEMPLATE_DECL): Update comment. DECL_RESULT should"}, {"sha": "c0f90b87e4cc3f206c9c1c4f948bb877c362410f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -10468,7 +10468,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \tignore_attrs = 0;\n       else if (inner_attrs)\n \t{\n-\t  decl_attributes (type, inner_attrs, NULL_TREE);\n+\t  decl_attributes (type, inner_attrs);\n \t  inner_attrs = NULL_TREE;\n \t}\n \n@@ -10987,7 +10987,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   if (inner_attrs)\n     {\n       if (! ignore_attrs)\n-\tdecl_attributes (type, inner_attrs, NULL_TREE);\n+\tdecl_attributes (type, inner_attrs);\n       else if (attrlist)\n \tTREE_VALUE (attrlist) = chainon (inner_attrs, TREE_VALUE (attrlist));\n       else"}, {"sha": "e6d4274ebb272a2bbabd0a121913110712534910", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -1884,7 +1884,7 @@ cplus_decl_attributes (decl, attributes, prefix_attributes)\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n     decl = DECL_TEMPLATE_RESULT (decl);\n \n-  decl_attributes (decl, attributes, prefix_attributes);\n+  decl_attributes (decl, chainon (attributes, prefix_attributes));\n \n   if (TREE_CODE (decl) == TYPE_DECL)\n     SET_IDENTIFIER_TYPE_VALUE (DECL_NAME (decl), TREE_TYPE (decl));"}, {"sha": "4cddb831314b078f80f304698bbbbbf5e0a05c0f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -8415,15 +8415,17 @@ in @file{i386/cygwin.h} and @file{i386/i386.c}, for example.\n \n @table @code\n @findex INSERT_ATTRIBUTES\n-@item INSERT_ATTRIBUTES (@var{node}, @var{attr_ptr}, @var{prefix_ptr})\n+@item INSERT_ATTRIBUTES (@var{node}, @var{attr_ptr})\n Define this macro if you want to be able to add attributes to a decl\n when it is being created.  This is normally useful for back ends which\n wish to implement a pragma by using the attributes which correspond to\n the pragma's effect.  The @var{node} argument is the decl which is being\n created.  The @var{attr_ptr} argument is a pointer to the attribute list\n-for this decl.  The @var{prefix_ptr} is a pointer to the list of\n-attributes that have appeared after the specifiers and modifiers of the\n-declaration, but before the declaration proper.\n+for this decl.  The list itself should not be modified, since it may be\n+shared with other decls, but attributes may be chained on the head of\n+the list and @code{*@var{attr_ptr}} modified to point to the new\n+attributes, or a copy of the list may be made if further changes are\n+needed.\n \n @findex SET_DEFAULT_DECL_ATTRIBUTES\n @item SET_DEFAULT_DECL_ATTRIBUTES (@var{decl}, @var{attributes})"}, {"sha": "3a19d286a42bd0038f33a9601178a0481b7f51ad", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -852,7 +852,7 @@ define_decl (declarator, declspecs)\n      tree declarator;\n      tree declspecs;\n {\n-  tree decl = start_decl (declarator, declspecs, 0, NULL_TREE, NULL_TREE);\n+  tree decl = start_decl (declarator, declspecs, 0, NULL_TREE);\n   finish_decl (decl, NULL_TREE, NULL_TREE);\n   return decl;\n }\n@@ -1753,7 +1753,7 @@ generate_objc_symtab_decl ()\n \t\t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t\t      objc_symtab_template, sc_spec),\n \t\t\t\t   1,\n-\t\t\t\t   NULL_TREE, NULL_TREE);\n+\t\t\t\t   NULL_TREE);\n \n   TREE_USED (UOBJC_SYMBOLS_decl) = 1;\n   DECL_IGNORED_P (UOBJC_SYMBOLS_decl) = 1;\n@@ -1853,7 +1853,7 @@ build_module_descriptor ()\n \t\t\t\t\t   ridpointers[(int) RID_STATIC]));\n \n   UOBJC_MODULES_decl = start_decl (get_identifier (\"_OBJC_MODULES\"),\n-\t\t\t\t   decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t\t\t\t   decl_specs, 1, NULL_TREE);\n \n   DECL_ARTIFICIAL (UOBJC_MODULES_decl) = 1;\n   DECL_IGNORED_P (UOBJC_MODULES_decl) = 1;\n@@ -1910,7 +1910,7 @@ build_module_descriptor ()\n \t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n \t\t\t\t\t void_list_node_1),\n \t\t\t      NULL_TREE),\n-\t\t    NULL_TREE, NULL_TREE);\n+\t\t    NULL_TREE);\n #if 0 /* This should be turned back on later\n \t for the systems where collect is not needed.  */\n     /* Make these functions nonglobal\n@@ -2003,7 +2003,7 @@ generate_static_references ()\n       decl_spec = tree_cons (NULL_TREE, build_pointer_type (void_type_node),\n \t\t\t     build_tree_list (NULL_TREE,\n \t\t\t\t\t      ridpointers[(int) RID_STATIC]));\n-      decl = start_decl (expr_decl, decl_spec, 1, NULL_TREE, NULL_TREE);\n+      decl = start_decl (expr_decl, decl_spec, 1, NULL_TREE);\n       DECL_CONTEXT (decl) = 0;\n       DECL_ARTIFICIAL (decl) = 1;\n \n@@ -2043,7 +2043,7 @@ generate_static_references ()\n \t\t\t build_tree_list (NULL_TREE,\n \t\t\t\t\t  ridpointers[(int) RID_STATIC]));\n   static_instances_decl\n-    = start_decl (expr_decl, decl_spec, 1, NULL_TREE, NULL_TREE);\n+    = start_decl (expr_decl, decl_spec, 1, NULL_TREE);\n   TREE_USED (static_instances_decl) = 1;\n   DECL_CONTEXT (static_instances_decl) = 0;\n   DECL_ARTIFICIAL (static_instances_decl) = 1;\n@@ -2069,7 +2069,7 @@ generate_strings ()\n \t= tree_cons (NULL_TREE, ridpointers[(int) RID_STATIC], NULL_TREE);\n       decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULL_TREE);\n-      decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE, NULL_TREE);\n+      decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE);\n       DECL_CONTEXT (decl) = NULL_TREE;\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\t     IDENTIFIER_POINTER (string));\n@@ -2084,7 +2084,7 @@ generate_strings ()\n \t= tree_cons (NULL_TREE, ridpointers[(int) RID_STATIC], NULL_TREE);\n       decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULL_TREE);\n-      decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE, NULL_TREE);\n+      decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE);\n       DECL_CONTEXT (decl) = NULL_TREE;\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\t     IDENTIFIER_POINTER (string));\n@@ -2099,7 +2099,7 @@ generate_strings ()\n \t= tree_cons (NULL_TREE, ridpointers[(int) RID_STATIC], NULL_TREE);\n       decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULL_TREE);\n-      decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE, NULL_TREE);\n+      decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE);\n       DECL_CONTEXT (decl) = NULL_TREE;\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\tIDENTIFIER_POINTER (string));\n@@ -2172,7 +2172,7 @@ build_selector_translation_table ()\n \n \t  /* The `decl' that is returned from start_decl is the one that we\n \t     forward declared in `build_selector_reference'  */\n-\t  decl = start_decl (var_decl, decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t  decl = start_decl (var_decl, decl_specs, 1, NULL_TREE );\n \t}\n \n       /* add one for the '\\0' character */\n@@ -2967,7 +2967,7 @@ generate_descriptor_table (type, name, size, list, proto)\n   decl_specs = tree_cons (NULL_TREE, type, sc_spec);\n \n   decl = start_decl (synth_id_with_class_suffix (name, proto),\n-\t\t     decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t\t     decl_specs, 1, NULL_TREE);\n   DECL_CONTEXT (decl) = NULL_TREE;\n \n   initlist = build_tree_list (NULL_TREE, build_int_2 (size, 0));\n@@ -3060,14 +3060,14 @@ build_tmp_function_decl ()\n \t\t  (build_tree_list (decl_specs,\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE,\n \t\t\t\t\t    NULL_TREE)),\n-\t\t   build_tree_list (NULL_TREE, NULL_TREE)));\n+\t\t   NULL_TREE));\n \n   decl_specs = build_tree_list (NULL_TREE, xref_tag (RECORD_TYPE,\n \t\t\t\t\t  get_identifier (TAG_SELECTOR)));\n   expr_decl = build1 (INDIRECT_REF, NULL_TREE, NULL_TREE);\n \n   push_parm_decl (build_tree_list (build_tree_list (decl_specs, expr_decl),\n-\t\t\t\t   build_tree_list (NULL_TREE, NULL_TREE)));\n+\t\t\t\t   NULL_TREE));\n   parms = get_parm_info (0);\n   poplevel (0, 0, 0);\n \n@@ -3223,7 +3223,7 @@ generate_protocols ()\n       decl_specs = tree_cons (NULL_TREE, objc_protocol_template, sc_spec);\n \n       decl = start_decl (synth_id_with_class_suffix (\"_OBJC_PROTOCOL\", p),\n-\t\t\t decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t\t\t decl_specs, 1, NULL_TREE);\n \n       DECL_CONTEXT (decl) = NULL_TREE;\n \n@@ -3929,7 +3929,7 @@ generate_ivars_list (type, name, size, list)\n   decl_specs = tree_cons (NULL_TREE, type, sc_spec);\n \n   decl = start_decl (synth_id_with_class_suffix (name, implementation_context),\n-\t\t     decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t\t     decl_specs, 1, NULL_TREE);\n \n   initlist = build_tree_list (NULL_TREE, build_int_2 (size, 0));\n   initlist = tree_cons (NULL_TREE, list, initlist);\n@@ -4094,7 +4094,7 @@ generate_dispatch_table (type, name, size, list)\n   decl_specs = tree_cons (NULL_TREE, type, sc_spec);\n \n   decl = start_decl (synth_id_with_class_suffix (name, implementation_context),\n-\t\t     decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t\t     decl_specs, 1, NULL_TREE);\n \n   initlist = build_tree_list (NULL_TREE, build_int_2 (0, 0));\n   initlist = tree_cons (NULL_TREE, build_int_2 (size, 0), initlist);\n@@ -4252,7 +4252,7 @@ generate_protocol_list (i_or_p)\n \n   expr_decl = build1 (INDIRECT_REF, NULL_TREE, expr_decl);\n \n-  refs_decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE, NULL_TREE);\n+  refs_decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE);\n   DECL_CONTEXT (refs_decl) = NULL_TREE;\n \n   finish_decl (refs_decl, build_constructor (TREE_TYPE (refs_decl),\n@@ -4462,7 +4462,7 @@ generate_category (cat)\n \n   decl = start_decl (synth_id_with_class_suffix (\"_OBJC_CATEGORY\",\n \t\t\t\t\t\t implementation_context),\n-\t\t     decl_specs, 1, NULL_TREE, NULL_TREE);\n+\t\t     decl_specs, 1, NULL_TREE);\n \n   initlist = build_category_initializer (TREE_TYPE (decl),\n \t\t\t\t\t cat_name_expr, class_name_expr,\n@@ -4545,7 +4545,7 @@ generate_shared_structures ()\n   decl_specs = tree_cons (NULL_TREE, objc_class_template, sc_spec);\n \n   decl = start_decl (DECL_NAME (UOBJC_METACLASS_decl), decl_specs, 1,\n-\t\t     NULL_TREE, NULL_TREE);\n+\t\t     NULL_TREE);\n \n   initlist\n     = build_shared_structure_initializer\n@@ -4562,7 +4562,7 @@ generate_shared_structures ()\n   /* static struct objc_class _OBJC_CLASS_Foo={ ... }; */\n \n   decl = start_decl (DECL_NAME (UOBJC_CLASS_decl), decl_specs, 1,\n-\t\t     NULL_TREE, NULL_TREE);\n+\t\t     NULL_TREE);\n \n   initlist\n     = build_shared_structure_initializer\n@@ -6953,15 +6953,15 @@ start_method_def (method)\n   push_parm_decl (build_tree_list\n \t\t  (build_tree_list (decl_specs,\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, self_id)),\n-\t\t   build_tree_list (unused_list, NULL_TREE)));\n+\t\t   unused_list));\n \n   decl_specs = build_tree_list (NULL_TREE,\n \t\t\t\txref_tag (RECORD_TYPE,\n \t\t\t\t\t  get_identifier (TAG_SELECTOR)));\n   push_parm_decl (build_tree_list\n \t\t  (build_tree_list (decl_specs,\n \t\t\t\t    build1 (INDIRECT_REF, NULL_TREE, ucmd_id)),\n-\t\t   build_tree_list (unused_list, NULL_TREE)));\n+\t\t   unused_list));\n \n   /* Generate argument declarations if a keyword_decl.  */\n   if (METHOD_SEL_ARGS (method))\n@@ -6980,7 +6980,7 @@ start_method_def (method)\n \t      TREE_OPERAND (last_expr, 0) = KEYWORD_ARG_NAME (arglist);\n \t      push_parm_decl (build_tree_list\n \t\t\t      (build_tree_list (arg_spec, arg_decl),\n-\t\t\t       build_tree_list (NULL_TREE, NULL_TREE)));\n+\t\t\t       NULL_TREE));\n \n \t      /* Unhook: restore the abstract declarator.  */\n \t      TREE_OPERAND (last_expr, 0) = NULL_TREE;\n@@ -6990,7 +6990,7 @@ start_method_def (method)\n \t    push_parm_decl (build_tree_list\n \t\t\t    (build_tree_list (arg_spec,\n \t\t\t\t\t      KEYWORD_ARG_NAME (arglist)),\n-\t\t\t     build_tree_list (NULL_TREE, NULL_TREE)));\n+\t\t\t     NULL_TREE));\n \n \t  arglist = TREE_CHAIN (arglist);\n \t}\n@@ -7133,7 +7133,7 @@ really_start_method (method, parmlist)\n       method_decl = ret_decl;\n \n       /* Fool the parser into thinking it is starting a function.  */\n-      start_function (decl_specs, method_decl, NULL_TREE, NULL_TREE);\n+      start_function (decl_specs, method_decl, NULL_TREE);\n \n       /* Unhook: this has the effect of restoring the abstract declarator.  */\n       TREE_OPERAND (save_expr, 0) = NULL_TREE;\n@@ -7144,7 +7144,7 @@ really_start_method (method, parmlist)\n       TREE_VALUE (TREE_TYPE (method)) = method_decl;\n \n       /* Fool the parser into thinking it is starting a function.  */\n-      start_function (decl_specs, method_decl, NULL_TREE, NULL_TREE);\n+      start_function (decl_specs, method_decl, NULL_TREE);\n \n       /* Unhook: this has the effect of restoring the abstract declarator.  */\n       TREE_VALUE (TREE_TYPE (method)) = NULL_TREE;\n@@ -7210,7 +7210,7 @@ add_objc_decls ()\n       UOBJC_SUPER_decl = start_decl (get_identifier (UTAG_SUPER),\n \t\t\t\t     build_tree_list (NULL_TREE,\n \t\t\t\t\t\t      objc_super_template),\n-\t\t\t\t     0, NULL_TREE, NULL_TREE);\n+\t\t\t\t     0, NULL_TREE);\n \n       finish_decl (UOBJC_SUPER_decl, NULL_TREE, NULL_TREE);\n \n@@ -8342,7 +8342,7 @@ generate_classref_translation_entry (chain)\n \n   /* The decl that is returned from start_decl is the one that we\n      forward declared in build_class_reference.  */\n-  decl = start_decl (name, decl_specs, 1, NULL_TREE, NULL_TREE);\n+  decl = start_decl (name, decl_specs, 1, NULL_TREE);\n   DECL_CONTEXT (decl) = NULL_TREE;\n   finish_decl (decl, expr, NULL_TREE);\n   return;"}, {"sha": "c9fb89f4bb0d9b9c0b7a10c543ede99650a87074", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -1,3 +1,8 @@\n+2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c-torture/compile/20010701-1.c,\n+\tg++.old-deja/g++.ext/attrib6.C: New tests.\n+\n Fri Jul  6 09:31:43 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/compile/20010706-1.c: New test."}, {"sha": "6b2184ffb7afdab35d838ae1e92669fad3144ce3", "filename": "gcc/testsuite/g++.old-deja/g++.ext/attrib6.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fattrib6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fattrib6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fattrib6.C?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -0,0 +1,6 @@\n+// Test that postfix attributes only apply to a single declared object.\n+// (decl_attributes used to chain them onto the end of the prefix attributes,\n+// which caused them to apply to other declarations as well.)\n+// Origin: Joseph Myers <jsm28@cam.ac.uk>.\n+// Build don't link:\n+void __attribute__((__noreturn__)) foo (const char *, ...) __attribute__((__format__(__printf__, 1, 2))), bar (void);"}, {"sha": "7fb7ab5b150ecbf61c51c4b12e76677ce3992b80", "filename": "gcc/testsuite/gcc.c-torture/compile/20010701-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010701-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a4cec096b0476bbe39b44fbe3391d11f598728/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010701-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010701-1.c?ref=f7a4cec096b0476bbe39b44fbe3391d11f598728", "patch": "@@ -0,0 +1,5 @@\n+/* Test that postfix attributes only apply to a single declared object.\n+   (decl_attributes used to chain them onto the end of the prefix attributes,\n+   which caused them to apply to other declarations as well.)  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk>.  */\n+void __attribute__((__noreturn__)) foo (const char *, ...) __attribute__((__format__(__printf__, 1, 2))), bar (void);"}]}