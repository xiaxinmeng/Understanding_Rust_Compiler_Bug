{"sha": "086c0f96be83e383209026548c6929be7e160f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2YzBmOTZiZTgzZTM4MzIwOTAyNjU0OGM2OTI5YmU3ZTE2MGYxYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-09T20:58:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-09T20:58:35Z"}, "message": "ia64.md: Use define_constants for unspec numbers.\n\n        * config/ia64/ia64.md: Use define_constants for unspec numbers.\n        * config/ia64/ia64.c: Likewise.\n\nFrom-SVN: r53344", "tree": {"sha": "b68f96bd5c199690c29f99be9c252de5e7c380f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68f96bd5c199690c29f99be9c252de5e7c380f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/086c0f96be83e383209026548c6929be7e160f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086c0f96be83e383209026548c6929be7e160f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/086c0f96be83e383209026548c6929be7e160f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/086c0f96be83e383209026548c6929be7e160f1c/comments", "author": null, "committer": null, "parents": [{"sha": "a8b4881f10494c320f195bf30605967970712913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b4881f10494c320f195bf30605967970712913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b4881f10494c320f195bf30605967970712913"}], "stats": {"total": 237, "additions": 131, "deletions": 106}, "files": [{"sha": "b059d3842148bacd008c6e5f11236c2d9bcffe00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086c0f96be83e383209026548c6929be7e160f1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086c0f96be83e383209026548c6929be7e160f1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=086c0f96be83e383209026548c6929be7e160f1c", "patch": "@@ -1,3 +1,8 @@\n+2002-05-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.md: Use define_constants for unspec numbers.\n+\t* config/ia64/ia64.c: Likewise.\n+\n 2002-05-09  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_add_large_offset_to_sp): Remove FILE arg."}, {"sha": "9c3e9f21f9db346acacf7520b107079e17a4f7a2", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086c0f96be83e383209026548c6929be7e160f1c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086c0f96be83e383209026548c6929be7e160f1c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=086c0f96be83e383209026548c6929be7e160f1c", "patch": "@@ -4576,8 +4576,8 @@ rtx_needs_barrier (x, flags, pred)\n     case UNSPEC:\n       switch (XINT (x, 1))\n \t{\n-\tcase 1: /* st8.spill */\n-\tcase 2: /* ld8.fill */\n+\tcase UNSPEC_GR_SPILL:\n+\tcase UNSPEC_GR_RESTORE:\n \t  {\n \t    HOST_WIDE_INT offset = INTVAL (XVECEXP (x, 0, 1));\n \t    HOST_WIDE_INT bit = (offset >> 3) & 63;\n@@ -4589,31 +4589,31 @@ rtx_needs_barrier (x, flags, pred)\n \t    break;\n \t  }\n \t  \n-\tcase 3: /* stf.spill */\n-\tcase 4: /* ldf.spill */\n-\tcase 8: /* popcnt */\n+\tcase UNSPEC_FR_SPILL:\n+\tcase UNSPEC_FR_RESTORE:\n+\tcase UNSPEC_POPCNT:\n \t  need_barrier = rtx_needs_barrier (XVECEXP (x, 0, 0), flags, pred);\n \t  break;\n \n-\tcase 7: /* pred_rel_mutex */\n-\tcase 9: /* pic call */\n-        case 12: /* mf */\n-        case 19: /* fetchadd_acq */\n-\tcase 20: /* mov = ar.bsp */\n-\tcase 21: /* flushrs */\n-\tcase 22: /* bundle selector */\n+\tcase UNSPEC_PRED_REL_MUTEX:\n+\tcase UNSPEC_PIC_CALL:\n+        case UNSPEC_MF:\n+        case UNSPEC_FETCHADD_ACQ:\n+\tcase UNSPEC_BSP_VALUE:\n+\tcase UNSPEC_FLUSHRS:\n+\tcase UNSPEC_BUNDLE_SELECTOR:\n           break;\n \n-        case 24: /* addp4 */\n+        case UNSPEC_ADDP4:\n \t  need_barrier = rtx_needs_barrier (XVECEXP (x, 0, 0), flags, pred);\n \t  break;\n \n-\tcase 5: /* recip_approx */\n+\tcase UNSPEC_FR_RECIP_APPROX:\n \t  need_barrier = rtx_needs_barrier (XVECEXP (x, 0, 0), flags, pred);\n \t  need_barrier |= rtx_needs_barrier (XVECEXP (x, 0, 1), flags, pred);\n \t  break;\n \n-        case 13: /* cmpxchg_acq */\n+        case UNSPEC_CMPXCHG_ACQ:\n \t  need_barrier = rtx_needs_barrier (XVECEXP (x, 0, 1), flags, pred);\n \t  need_barrier |= rtx_needs_barrier (XVECEXP (x, 0, 2), flags, pred);\n \t  break;\n@@ -4626,7 +4626,7 @@ rtx_needs_barrier (x, flags, pred)\n     case UNSPEC_VOLATILE:\n       switch (XINT (x, 1))\n \t{\n-\tcase 0: /* alloc */\n+\tcase UNSPECV_ALLOC:\n \t  /* Alloc must always be the first instruction of a group.\n \t     We force this by always returning true.  */\n \t  /* ??? We might get better scheduling if we explicitly check for\n@@ -4640,17 +4640,15 @@ rtx_needs_barrier (x, flags, pred)\n \t  rws_access_regno (REG_AR_CFM, new_flags, pred);\n \t  return 1;\n \n-\tcase 1: /* blockage */\n-\tcase 2: /* insn group barrier */\n-\t  return 0;\n-\n-\tcase 5: /* set_bsp  */\n+\tcase UNSPECV_SET_BSP:\n \t  need_barrier = 1;\n           break;\n \n-\tcase 7: /* pred.rel.mutex */\n-\tcase 8: /* safe_across_calls all */\n-\tcase 9: /* safe_across_calls normal */\n+\tcase UNSPECV_BLOCKAGE:\n+\tcase UNSPECV_INSN_GROUP_BARRIER:\n+\tcase UNSPECV_BREAK:\n+\tcase UNSPECV_PSAC_ALL:\n+\tcase UNSPECV_PSAC_NORMAL:\n \t  return 0;\n \n \tdefault:\n@@ -4877,7 +4875,7 @@ emit_insn_group_barriers (dump, insns)\n \t}\n       else if (GET_CODE (insn) == INSN\n \t       && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n-\t       && XINT (PATTERN (insn), 1) == 2)\n+\t       && XINT (PATTERN (insn), 1) == UNSPECV_INSN_GROUP_BARRIER)\n \t{\n \t  init_insn_group_barriers ();\n \t  last_label = 0;\n@@ -6646,7 +6644,7 @@ ia64_emit_nops ()\n       pat = INSN_P (insn) ? PATTERN (insn) : const0_rtx;\n       if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \tcontinue;\n-      if ((GET_CODE (pat) == UNSPEC && XINT (pat, 1) == 22)\n+      if ((GET_CODE (pat) == UNSPEC && XINT (pat, 1) == UNSPEC_BUNDLE_SELECTOR)\n \t  || GET_CODE (insn) == CODE_LABEL)\n \t{\n \t  if (b)\n@@ -6662,7 +6660,8 @@ ia64_emit_nops ()\n \t  bundle_pos = 0;\n \t  continue;\n \t}\n-      else if (GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == 2)\n+      else if (GET_CODE (pat) == UNSPEC_VOLATILE\n+\t       && XINT (pat, 1) == UNSPECV_INSN_GROUP_BARRIER)\n \t{\n \t  int t = INTVAL (XVECEXP (pat, 0, 0));\n \t  if (b)\n@@ -6754,7 +6753,7 @@ ia64_reorg (insns)\n         insn = prev_active_insn (insn);\n       if (GET_CODE (insn) == INSN\n \t  && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n-\t  && XINT (PATTERN (insn), 1) == 2)\n+\t  && XINT (PATTERN (insn), 1) == UNSPECV_INSN_GROUP_BARRIER)\n \t{\n \t  saw_stop = 1;\n \t  insn = prev_active_insn (insn);\n@@ -6996,7 +6995,7 @@ process_set (asm_out_file, pat)\n \n   /* Look for the ALLOC insn.  */\n   if (GET_CODE (src) == UNSPEC_VOLATILE\n-      && XINT (src, 1) == 0\n+      && XINT (src, 1) == UNSPECV_ALLOC\n       && GET_CODE (dest) == REG)\n     {\n       dest_regno = REGNO (dest);"}, {"sha": "276501b477bbcfb93cc35da5eaa9ba5bbcb7524f", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 98, "deletions": 77, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/086c0f96be83e383209026548c6929be7e160f1c/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/086c0f96be83e383209026548c6929be7e160f1c/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=086c0f96be83e383209026548c6929be7e160f1c", "patch": "@@ -48,34 +48,34 @@\n \n ;; ??? Need a better way to describe alternate fp status registers.\n \n-;; Unspec usage:\n-;;\n-;; unspec:\n-;;\t1\tgr_spill\n-;;\t2\tgr_restore\n-;;\t3\tfr_spill\n-;;\t4\tfr_restore\n-;;\t5\trecip_approx\n-;;\t7\tpred_rel_mutex\n-;;\t8\tpopcnt\n-;;\t9\tpic call\n-;;\t12\tmf\n-;;\t13\tcmpxchg_acq\n-;;\t19\tfetchadd_acq\n-;;\t20\tbsp_value\n-;;\t21\tflushrs\n-;;\t22      bundle selector\n-;;      24      addp4\n-;;\t25\tprologue_use\n-;;\n-;; unspec_volatile:\n-;;\t0\talloc\n-;;\t1\tblockage\n-;;\t2\tinsn_group_barrier\n-;;\t3\tbreak\n-;;\t5\tset_bsp\n-;;\t8\tpred.safe_across_calls all\n-;;\t9\tpred.safe_across_calls normal\n+(define_constants\n+  [(UNSPEC_GR_SPILL\t\t1)\n+   (UNSPEC_GR_RESTORE\t\t2)\n+   (UNSPEC_FR_SPILL\t\t3)\n+   (UNSPEC_FR_RESTORE\t\t4)\n+   (UNSPEC_FR_RECIP_APPROX\t5)\n+   (UNSPEC_PRED_REL_MUTEX\t7)\n+   (UNSPEC_POPCNT\t\t8)\n+   (UNSPEC_PIC_CALL\t\t9)\n+   (UNSPEC_MF\t\t\t12)\n+   (UNSPEC_CMPXCHG_ACQ\t\t13)\n+   (UNSPEC_FETCHADD_ACQ\t\t19)\n+   (UNSPEC_BSP_VALUE\t\t20)\n+   (UNSPEC_FLUSHRS\t\t21)\n+   (UNSPEC_BUNDLE_SELECTOR\t22)\n+   (UNSPEC_ADDP4\t\t24)\n+   (UNSPEC_PROLOGUE_USE\t\t25)\n+  ])\n+\n+(define_constants\n+  [(UNSPECV_ALLOC\t\t0)\n+   (UNSPECV_BLOCKAGE\t\t1)\n+   (UNSPECV_INSN_GROUP_BARRIER\t2)\n+   (UNSPECV_BREAK\t\t3)\n+   (UNSPECV_SET_BSP\t\t5)\n+   (UNSPECV_PSAC_ALL\t\t8)\t; pred.safe_across_calls\n+   (UNSPECV_PSAC_NORMAL\t\t9)\n+  ])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -261,7 +261,7 @@\n    && GET_CODE (operands[1]) == REG && PR_REGNO_P (REGNO (operands[1]))\"\n   [(set (match_dup 2) (match_dup 4))\n    (set (match_dup 3) (match_dup 5))\n-   (set (match_dup 0) (unspec:BI [(match_dup 0)] 7))]\n+   (set (match_dup 0) (unspec:BI [(match_dup 0)] UNSPEC_PRED_REL_MUTEX))]\n   \"operands[2] = gen_rtx_REG (CCImode, REGNO (operands[0]));\n    operands[3] = gen_rtx_REG (CCImode, REGNO (operands[0]) + 1);\n    operands[4] = gen_rtx_REG (CCImode, REGNO (operands[1]));\n@@ -1288,7 +1288,7 @@\n    (set (match_dup 0) (const_int 1))\n    (cond_exec (ne (match_dup 2) (const_int 0))\n      (set (match_dup 0) (const_int 0)))\n-   (set (match_dup 0) (unspec:BI [(match_dup 0)] 7))]\n+   (set (match_dup 0) (unspec:BI [(match_dup 0)] UNSPEC_PRED_REL_MUTEX))]\n   \"operands[3] = gen_rtx_REG (CCImode, REGNO (operands[1]));\n    operands[4] = gen_rtx_REG (CCImode, REGNO (operands[2]));\")\n \n@@ -1304,7 +1304,7 @@\n      (set (match_dup 0) (const_int 0)))\n    (cond_exec (eq (match_dup 1) (const_int 0))\n      (set (match_dup 0) (const_int 1)))\n-   (set (match_dup 0) (unspec:BI [(match_dup 0)] 7))]\n+   (set (match_dup 0) (unspec:BI [(match_dup 0)] UNSPEC_PRED_REL_MUTEX))]\n   \"\")\n \n (define_insn \"*cmpsi_and_0\"\n@@ -1692,7 +1692,7 @@\n    (set (match_operand:CCI 4 \"register_operand\" \"\")\n \t(match_operand:CCI 5 \"register_operand\" \"\"))\n    (set (match_operand:BI 6 \"register_operand\" \"\")\n-\t(unspec:BI [(match_dup 6)] 7))]\n+\t(unspec:BI [(match_dup 6)] UNSPEC_PRED_REL_MUTEX))]\n   \"REGNO (operands[3]) == REGNO (operands[0])\n    && REGNO (operands[4]) == REGNO (operands[0]) + 1\n    && REGNO (operands[4]) == REGNO (operands[2]) + 1\n@@ -2005,7 +2005,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n-\t      (set (match_dup 6) (unspec:BI [(match_dup 1) (match_dup 2)] 5))\n+\t      (set (match_dup 6) (unspec:BI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 6) (const_int 0))\n      (parallel [(set (match_dup 4) (mult:TF (match_dup 1) (match_dup 0)))\n@@ -2260,7 +2261,7 @@\n    (set (match_dup 2) (plus:DI (match_dup 1) (const_int -1)))\n    (set (match_dup 5) (const_int 0))\n    (set (match_dup 3) (xor:DI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 4) (unspec:DI [(match_dup 3)] 8))\n+   (set (match_dup 4) (unspec:DI [(match_dup 3)] UNSPEC_POPCNT))\n    (set (match_operand:DI 0 \"gr_register_operand\" \"\")\n \t(if_then_else:DI (ne (match_dup 6) (const_int 0))\n \t\t\t (match_dup 5) (match_dup 4)))]\n@@ -2276,7 +2277,8 @@\n \n (define_insn \"*popcnt\"\n   [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand:DI 1 \"gr_register_operand\" \"r\")] 8))]\n+\t(unspec:DI [(match_operand:DI 1 \"gr_register_operand\" \"r\")]\n+\t\t   UNSPEC_POPCNT))]\n   \"\"\n   \"popcnt %0 = %1\"\n   [(set_attr \"itanium_class\" \"mmmul\")])\n@@ -2389,7 +2391,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n-\t      (set (match_dup 6) (unspec:BI [(match_dup 1) (match_dup 2)] 5))\n+\t      (set (match_dup 6) (unspec:BI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 6) (const_int 0))\n      (parallel [(set (match_dup 3)\n@@ -2447,7 +2450,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 1) (match_dup 2)] 5))\n+\t      (set (match_dup 5) (unspec:BI [(match_dup 1) (match_dup 2)] \n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 3)\n@@ -2616,7 +2620,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:TF (const_int 1) (match_dup 8)))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)] 5))\n+\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 3) (mult:TF (match_dup 7) (match_dup 6)))\n@@ -2670,7 +2675,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:TF (const_int 1) (match_dup 8)))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)] 5))\n+\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 3)\n@@ -2921,7 +2927,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 7) (div:TF (const_int 1) (match_dup 9)))\n-\t      (set (match_dup 6) (unspec:BI [(match_dup 8) (match_dup 9)] 5))\n+\t      (set (match_dup 6) (unspec:BI [(match_dup 8) (match_dup 9)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 6) (const_int 0))\n      (parallel [(set (match_dup 3) (mult:TF (match_dup 8) (match_dup 7)))\n@@ -2998,7 +3005,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 6) (div:TF (const_int 1) (match_dup 8)))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)] 5))\n+\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 3)\n@@ -3394,7 +3402,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n-\t      (set (match_dup 7) (unspec:BI [(match_dup 1) (match_dup 2)] 5))\n+\t      (set (match_dup 7) (unspec:BI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 7) (const_int 0))\n      (parallel [(set (match_dup 3)\n@@ -3471,7 +3480,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (div:TF (const_int 1) (match_dup 2)))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 1) (match_dup 2)] 5))\n+\t      (set (match_dup 5) (unspec:BI [(match_dup 1) (match_dup 2)]\n+\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n \t      (use (const_int 1))])\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 3)\n@@ -3545,7 +3555,7 @@\n \t\t(match_operand:TF 3 \"fr_register_operand\" \"f\")))\n    (set (match_operand:BI 1 \"register_operand\" \"=c\")\n \t(unspec:BI [(match_operand:TF 2 \"fr_register_operand\" \"f\")\n-\t\t    (match_dup 3)] 5))\n+\t\t    (match_dup 3)] UNSPEC_FR_RECIP_APPROX))\n    (use (match_operand:SI 4 \"const_int_operand\" \"\"))]\n   \"INTEL_EXTENDED_IEEE_FORMAT\"\n   \"frcpa.s%4 %0, %1 = %2, %3\"\n@@ -4682,7 +4692,7 @@\n (define_insn \"call_pic\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"b,i\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (unspec [(reg:DI 1)] 9))\n+   (use (unspec [(reg:DI 1)] UNSPEC_PIC_CALL))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=b,b\"))]\n   \"\"\n   \"br.call%+.many %2 = %0\"\n@@ -4692,7 +4702,7 @@\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"b,i\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (unspec [(reg:DI 1)] 9))\n+   (use (unspec [(reg:DI 1)] UNSPEC_PIC_CALL))\n    (clobber (match_operand:DI 3 \"register_operand\" \"=b,b\"))]\n   \"\"\n   \"br.call%+.many %3 = %1\"\n@@ -4701,7 +4711,7 @@\n (define_insn \"sibcall_pic\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"bi\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (unspec [(reg:DI 1)] 9))\n+   (use (unspec [(reg:DI 1)] UNSPEC_PIC_CALL))\n    (use (match_operand:DI 2 \"register_operand\" \"=b\"))\n    (use (match_operand:DI 3 \"ar_pfs_reg_operand\" \"\"))]\n   \"\"\n@@ -4871,7 +4881,7 @@\n \n (define_insn \"alloc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:DI [(const_int 0)] 0))\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_ALLOC))\n    (use (match_operand:DI 1 \"const_int_operand\" \"i\"))\n    (use (match_operand:DI 2 \"const_int_operand\" \"i\"))\n    (use (match_operand:DI 3 \"const_int_operand\" \"i\"))\n@@ -4885,15 +4895,17 @@\n (define_expand \"gr_spill\"\n   [(parallel [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n \t\t   (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"\")] 1))\n+\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"\")]\n+\t\t\t      UNSPEC_GR_SPILL))\n \t      (clobber (match_dup 3))])]\n   \"\"\n   \"operands[3] = gen_rtx_REG (DImode, AR_UNAT_REGNUM);\")\n \n (define_insn \"gr_spill_internal\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")] 1))\n+\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")]\n+\t\t   UNSPEC_GR_SPILL))\n    (clobber (match_operand:DI 3 \"register_operand\" \"\"))]\n   \"\"\n   \"*\n@@ -4906,15 +4918,17 @@\n (define_expand \"gr_restore\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t\t   (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"\")] 2))\n+\t\t\t       (match_operand:DI 2 \"const_int_operand\" \"\")]\n+\t\t\t      UNSPEC_GR_RESTORE))\n \t      (use (match_dup 3))])]\n   \"\"\n   \"operands[3] = gen_rtx_REG (DImode, AR_UNAT_REGNUM);\")\n \n (define_insn \"gr_restore_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n-\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")] 2))\n+\t\t    (match_operand:DI 2 \"const_int_operand\" \"\")]\n+\t\t   UNSPEC_GR_RESTORE))\n    (use (match_operand:DI 3 \"register_operand\" \"\"))]\n   \"\"\n   \"*\n@@ -4925,14 +4939,16 @@\n \n (define_insn \"fr_spill\"\n   [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n-\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"f\")] 3))]\n+\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"f\")]\n+\t\t   UNSPEC_FR_SPILL))]\n   \"\"\n   \"stf.spill %0 = %1%P0\"\n   [(set_attr \"itanium_class\" \"stf\")])\n \n (define_insn \"fr_restore\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 1 \"memory_operand\" \"m\")] 4))]\n+\t(unspec:TF [(match_operand:TF 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_FR_RESTORE))]\n   \"\"\n   \"ldf.fill %0 = %1%P1\"\n   [(set_attr \"itanium_class\" \"fld\")])\n@@ -4943,13 +4959,14 @@\n \n (define_insn \"bsp_value\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(const_int 0)] 20))]\n+\t(unspec:DI [(const_int 0)] UNSPEC_BSP_VALUE))]\n   \"\"\n   \";;\\;mov %0 = ar.bsp\"\n   [(set_attr \"itanium_class\" \"frar_i\")])\n \n (define_insn \"set_bsp\"\n-  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")] 5)]\n+  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_SET_BSP)]\n   \"\"\n   \"flushrs\\;mov r19=ar.rsc\\;;;\\;and r19=0x1c,r19\\;;;\\;mov ar.rsc=r19\\;;;\\;mov ar.bspstore=%0\\;;;\\;or r19=0x3,r19\\;;;\\;loadrs\\;invala\\;;;\\;mov ar.rsc=r19\"\n   [(set_attr \"itanium_class\" \"unknown\")\n@@ -4960,7 +4977,7 @@\n ;; fixed later.  This avoids an RSE DV.\n \n (define_insn \"flushrs\"\n-  [(unspec [(const_int 0)] 21)]\n+  [(unspec [(const_int 0)] UNSPEC_FLUSHRS)]\n   \"\"\n   \";;\\;flushrs\\;;;\"\n   [(set_attr \"itanium_class\" \"rse_m\")])\n@@ -5012,7 +5029,7 @@\n   [(set_attr \"itanium_class\" \"nop_x\")])\n \n (define_insn \"bundle_selector\"\n-  [(unspec [(match_operand 0 \"const_int_operand\" \"\")] 22)]\n+  [(unspec [(match_operand 0 \"const_int_operand\" \"\")] UNSPEC_BUNDLE_SELECTOR)]\n   \"\"\n   \"*\n {\n@@ -5024,14 +5041,15 @@\n ;; Pseudo instruction that prevents the scheduler from moving code above this\n ;; point.\n (define_insn \"blockage\"\n-  [(unspec_volatile [(const_int 0)] 1)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)]\n   \"\"\n   \"\"\n   [(set_attr \"itanium_class\" \"ignore\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"insn_group_barrier\"\n-  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")] 2)]\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_INSN_GROUP_BARRIER)]\n   \"\"\n   \";;\"\n   [(set_attr \"itanium_class\" \"stop_bit\")\n@@ -5069,7 +5087,7 @@\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"break_f\"\n-  [(unspec_volatile [(const_int 0)] 3)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BREAK)]\n   \"\"\n   \"break.f 0\"\n   [(set_attr \"itanium_class\" \"nop_f\")])\n@@ -5204,7 +5222,7 @@\n \n (define_expand \"mf\"\n   [(set (mem:BLK (match_dup 0))\n-\t(unspec:BLK [(mem:BLK (match_dup 0))] 12))]\n+\t(unspec:BLK [(mem:BLK (match_dup 0))] UNSPEC_MF))]\n   \"\"\n   \"\n {\n@@ -5214,7 +5232,7 @@\n \n (define_insn \"*mf_internal\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n-\t(unspec:BLK [(match_operand:BLK 1 \"\" \"\")] 12))]\n+\t(unspec:BLK [(match_operand:BLK 1 \"\" \"\")] UNSPEC_MF))]\n   \"\"\n   \"mf\"\n   [(set_attr \"itanium_class\" \"syst_m\")])\n@@ -5224,7 +5242,8 @@\n \t(match_dup 1))\n    (set (match_operand:SI 1 \"not_postinc_memory_operand\" \"+S\")\n \t(unspec:SI [(match_dup 1)\n-\t\t    (match_operand:SI 2 \"fetchadd_operand\" \"n\")] 19))]\n+\t\t    (match_operand:SI 2 \"fetchadd_operand\" \"n\")]\n+\t\t   UNSPEC_FETCHADD_ACQ))]\n   \"\"\n   \"fetchadd4.acq %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"sem\")])\n@@ -5234,7 +5253,8 @@\n \t(match_dup 1))\n    (set (match_operand:DI 1 \"not_postinc_memory_operand\" \"+S\")\n \t(unspec:DI [(match_dup 1)\n-\t\t    (match_operand:DI 2 \"fetchadd_operand\" \"n\")] 19))]\n+\t\t    (match_operand:DI 2 \"fetchadd_operand\" \"n\")]\n+\t\t   UNSPEC_FETCHADD_ACQ))]\n   \"\"\n   \"fetchadd8.acq %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"sem\")])\n@@ -5245,7 +5265,8 @@\n    (set (match_operand:SI 1 \"not_postinc_memory_operand\" \"+S\")\n         (unspec:SI [(match_dup 1)\n                     (match_operand:SI 2 \"gr_register_operand\" \"r\")\n-\t\t    (match_operand:SI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n+\t\t    (match_operand:SI 3 \"ar_ccv_reg_operand\" \"\")]\n+\t\t   UNSPEC_CMPXCHG_ACQ))]\n   \"\"\n   \"cmpxchg4.acq %0 = %1, %2, %3\"\n   [(set_attr \"itanium_class\" \"sem\")])\n@@ -5256,7 +5277,8 @@\n    (set (match_operand:DI 1 \"not_postinc_memory_operand\" \"+S\")\n         (unspec:DI [(match_dup 1)\n                     (match_operand:DI 2 \"gr_register_operand\" \"r\")\n-\t\t    (match_operand:DI 3 \"ar_ccv_reg_operand\" \"\")] 13))]\n+\t\t    (match_operand:DI 3 \"ar_ccv_reg_operand\" \"\")]\n+\t\t   UNSPEC_CMPXCHG_ACQ))]\n   \"\"\n   \"cmpxchg8.acq %0 = %1, %2, %3\"\n   [(set_attr \"itanium_class\" \"sem\")])\n@@ -5290,21 +5312,21 @@\n \n (define_insn \"pred_rel_mutex\"\n   [(set (match_operand:BI 0 \"register_operand\" \"+c\")\n-       (unspec:BI [(match_dup 0)] 7))]\n+       (unspec:BI [(match_dup 0)] UNSPEC_PRED_REL_MUTEX))]\n   \"\"\n   \".pred.rel.mutex %0, %I0\"\n   [(set_attr \"itanium_class\" \"ignore\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"safe_across_calls_all\"\n-  [(unspec_volatile [(const_int 0)] 8)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_PSAC_ALL)]\n   \"\"\n   \".pred.safe_across_calls p1-p63\"\n   [(set_attr \"itanium_class\" \"ignore\")\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"safe_across_calls_normal\"\n-  [(unspec_volatile [(const_int 0)] 9)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_PSAC_NORMAL)]\n   \"\"\n   \"*\n {\n@@ -5314,14 +5336,13 @@\n   [(set_attr \"itanium_class\" \"ignore\")\n    (set_attr \"predicable\" \"no\")])\n \n-;;\n-;;\n ;; UNSPEC instruction definition to \"swizzle\" 32 bit pointer into 64 bit\n ;; pointer.  This is used by the HP-UX 32 bit mode.\n \n (define_insn \"ptr_extend\"\n   [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:SI 1 \"gr_register_operand\" \"r\")] 24))]\n+        (unspec:DI [(match_operand:SI 1 \"gr_register_operand\" \"r\")]\n+\t\t   UNSPEC_ADDP4))]\n   \"\"\n   \"addp4 %0 = 0,%1\"\n   [(set_attr \"itanium_class\" \"ialu\")])\n@@ -5334,7 +5355,7 @@\n         (unspec:DI\n          [(plus:SI (match_operand:SI 1 \"basereg_operand\" \"r\")\n                    (match_operand:SI 2 \"gr_reg_or_14bit_operand\" \"rI\"))]\n-         24))]\n+         UNSPEC_ADDP4))]\n   \"\"\n   \"addp4 %0 = %2, %1\"\n   [(set_attr \"itanium_class\" \"ialu\")])\n@@ -5344,16 +5365,16 @@\n         (unspec:DI\n          [(plus:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n                    (match_operand:SI 2 \"basereg_operand\" \"r\"))]\n-         24))]\n+         UNSPEC_ADDP4))]\n   \"\"\n   \"addp4 %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"ialu\")])\n \n-;;\n ;; As USE insns aren't meaningful after reload, this is used instead\n ;; to prevent deleting instructions setting registers for EH handling\n (define_insn \"prologue_use\"\n-  [(unspec:DI [(match_operand:DI 0 \"register_operand\" \"\")] 25)]\n+  [(unspec:DI [(match_operand:DI 0 \"register_operand\" \"\")]\n+\t      UNSPEC_PROLOGUE_USE)]\n   \"\"\n   \"// %0 needed for EH\"\n   [(set_attr \"itanium_class\" \"ignore\")"}]}