{"sha": "36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjMGJkNGZlZWI2YWMxZmEwZmExN2U2Y2U4NzdhNWFlMmViZGVlYg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2013-10-07T07:52:25Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-10-07T07:52:25Z"}, "message": "s390.c (s390_register_info): Make the call-saved FPR loop to work also for 31bit ABI.\n\n2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_register_info): Make the call-saved FPR\n\tloop to work also for 31bit ABI.\n\tSave the stack pointer for frame_size > 0.\n\n2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.target/s390/htm-nofloat-2.c: New testcase.\n\nFrom-SVN: r203240", "tree": {"sha": "e904de12e123b3ad4bec0a7d1d1fca177181ea2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e904de12e123b3ad4bec0a7d1d1fca177181ea2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/comments", "author": null, "committer": null, "parents": [{"sha": "ee163e721aed1e4f732ad5ca447a0797a9318e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee163e721aed1e4f732ad5ca447a0797a9318e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee163e721aed1e4f732ad5ca447a0797a9318e23"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "d54cf03792bbd4f155e91dd55702027e61c75281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "patch": "@@ -1,3 +1,9 @@\n+2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_register_info): Make the call-saved FPR\n+\tloop to work also for 31bit ABI.\n+\tSave the stack pointer for frame_size > 0.\n+\n 2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (\"tbegin\", \"tbegin_nofloat\", \"tbegin_retry\")"}, {"sha": "338a09ecb90f3fcb80e0355365621f92cd38a36e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "patch": "@@ -7509,8 +7509,11 @@ s390_register_info (int clobbered_regs[])\n     {\n       cfun_frame_layout.fpr_bitmap = 0;\n       cfun_frame_layout.high_fprs = 0;\n-      if (TARGET_64BIT)\n-\tfor (i = FPR8_REGNUM; i <= FPR15_REGNUM; i++)\n+\n+      for (i = FPR0_REGNUM; i <= FPR15_REGNUM; i++)\n+\t{\n+\t  if (call_really_used_regs[i])\n+\t    continue;\n \t  /* During reload we have to use the df_regs_ever_live infos\n \t     since reload is marking FPRs used as spill slots there as\n \t     live before actually making the code changes.  Without\n@@ -7523,8 +7526,11 @@ s390_register_info (int clobbered_regs[])\n \t      && !global_regs[i])\n \t    {\n \t      cfun_set_fpr_save (i);\n-\t      cfun_frame_layout.high_fprs++;\n+\n+\t      if (i >= FPR8_REGNUM)\n+\t\tcfun_frame_layout.high_fprs++;\n \t    }\n+\t}\n     }\n \n   for (i = 0; i < 16; i++)\n@@ -7554,6 +7560,7 @@ s390_register_info (int clobbered_regs[])\n \t|| TARGET_TPF_PROFILING\n \t|| cfun_save_high_fprs_p\n \t|| get_frame_size () > 0\n+\t|| (reload_completed && cfun_frame_layout.frame_size > 0)\n \t|| cfun->calls_alloca\n \t|| cfun->stdarg);\n \n@@ -7652,14 +7659,6 @@ s390_register_info (int clobbered_regs[])\n \t    cfun_set_fpr_save (i + FPR0_REGNUM);\n \t}\n     }\n-\n-  if (!TARGET_64BIT)\n-    {\n-      if (df_regs_ever_live_p (FPR4_REGNUM) && !global_regs[FPR4_REGNUM])\n-\tcfun_set_fpr_save (FPR4_REGNUM);\n-      if (df_regs_ever_live_p (FPR6_REGNUM) && !global_regs[FPR6_REGNUM])\n-\tcfun_set_fpr_save (FPR6_REGNUM);\n-    }\n }\n \n /* Fill cfun->machine with info about frame of current function.  */"}, {"sha": "2d3561d718ffda4e0ad50ae496032321753818d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "patch": "@@ -1,3 +1,7 @@\n+2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.target/s390/htm-nofloat-2.c: New testcase.\n+\n 2013-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.target/s390/htm-1.c: Add more tests to cover different"}, {"sha": "db9064284f91cc9e8ab8d676d05780756441bbd7", "filename": "gcc/testsuite/gcc.target/s390/htm-nofloat-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-2.c?ref=36c0bd4feeb6ac1fa0fa17e6ce877a5ae2ebdeeb", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mhtm -Wa,-march=zEC12 --save-temps\" } */\n+\n+/* __builtin_tbegin has to emit clobbers for all FPRs since the tbegin\n+   instruction does not automatically preserves them.  If the\n+   transaction body is fully contained in a function the backend tries\n+   after reload to get rid of the FPR save/restore operations\n+   triggered by the clobbers.  This testcase failed since the backend\n+   was able to get rid of all FPR saves/restores and since these were\n+   the only stack operations also of the entire stack space.  So even\n+   the save/restore of the stack pointer was omitted in the end.\n+   However, since the frame layout has been fixed before, the prologue\n+   still generated the stack pointer decrement making foo return with\n+   a modified stack pointer.  */\n+\n+void abort(void);\n+\n+void __attribute__((noinline))\n+foo (int a)\n+{\n+  /* This is just to prevent the tbegin code from actually being\n+     executed.  That way the test may even run on machines prior to\n+     zEC12.  */\n+  if (a == 42)\n+    return;\n+\n+  if (__builtin_tbegin (0) == 0)\n+    __builtin_tend ();\n+}\n+\n+#ifdef __s390x__\n+#define GET_STACK_POINTER(SP)\t\t\t\\\n+  asm volatile (\"stg %%r15, %0\" : \"=QRST\" (SP));\n+#else\n+#define GET_STACK_POINTER(SP)\t\t\t\\\n+  asm volatile (\"st %%r15, %0\" : \"=QR\" (SP));\n+#endif\n+\n+int main(void)\n+{\n+  unsigned long new_sp, old_sp;\n+\n+  GET_STACK_POINTER (old_sp);\n+  foo(42);\n+  GET_STACK_POINTER (new_sp);\n+\n+  if (old_sp != new_sp)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* Make sure no FPR saves/restores are emitted.  */\n+/* { dg-final { scan-assembler-not \"\\tstd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tld\\t\" } } */"}]}