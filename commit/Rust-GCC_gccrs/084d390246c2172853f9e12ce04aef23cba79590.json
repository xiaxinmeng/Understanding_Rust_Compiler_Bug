{"sha": "084d390246c2172853f9e12ce04aef23cba79590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0ZDM5MDI0NmMyMTcyODUzZjllMTJjZTA0YWVmMjNjYmE3OTU5MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-07T11:49:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-07T11:49:09Z"}, "message": "re PR tree-optimization/92405 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1683)\n\n2019-11-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92405\n\t* tree-vect-loop.c (vectorizable_reduction): Appropriately\n\trestrict lane-reducing ops to single stmt chains.\n\nFrom-SVN: r277921", "tree": {"sha": "22873d2678e8bfdc1b34e5e64bbdccc9226c956c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22873d2678e8bfdc1b34e5e64bbdccc9226c956c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084d390246c2172853f9e12ce04aef23cba79590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084d390246c2172853f9e12ce04aef23cba79590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084d390246c2172853f9e12ce04aef23cba79590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084d390246c2172853f9e12ce04aef23cba79590/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7313607478c11e9455a32fb0dbfd7867e04ea96a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7313607478c11e9455a32fb0dbfd7867e04ea96a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7313607478c11e9455a32fb0dbfd7867e04ea96a"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "55532cc5236c8b38e222ac62471f001f8da81d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084d390246c2172853f9e12ce04aef23cba79590/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084d390246c2172853f9e12ce04aef23cba79590/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=084d390246c2172853f9e12ce04aef23cba79590", "patch": "@@ -1,3 +1,9 @@\n+2019-11-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92405\n+\t* tree-vect-loop.c (vectorizable_reduction): Appropriately\n+\trestrict lane-reducing ops to single stmt chains.\n+\n 2019-11-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR lto/70929"}, {"sha": "dfa087ebb2cf01a5d21da0a921f8b6fc3d691ce9", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084d390246c2172853f9e12ce04aef23cba79590/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084d390246c2172853f9e12ce04aef23cba79590/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=084d390246c2172853f9e12ce04aef23cba79590", "patch": "@@ -5865,6 +5865,18 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n       reduc_chain_length++;\n     }\n \n+  /* For lane-reducing ops we're reducing the number of reduction PHIs\n+     which means the only use of that may be in the lane-reducing operation.  */\n+  if (lane_reduc_code_p\n+      && reduc_chain_length != 1\n+      && !only_slp_reduc_chain)\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"lane-reducing reduction with extra stmts.\\n\");\n+      return false;\n+    }\n+\n   reduc_def = PHI_RESULT (reduc_def_phi);\n   for (i = 0; i < op_type; i++)\n     {"}]}