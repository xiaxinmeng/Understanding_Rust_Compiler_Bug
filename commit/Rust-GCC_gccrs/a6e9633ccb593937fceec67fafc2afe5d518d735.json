{"sha": "a6e9633ccb593937fceec67fafc2afe5d518d735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlOTYzM2NjYjU5MzkzN2ZjZWVjNjdmYWZjMmFmZTVkNTE4ZDczNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-03-12T15:31:32Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-03-12T15:31:32Z"}, "message": "Fortran: Fix libgfortran I/O race with newunit_free [PR99529]\n\nlibgfortran/ChangeLog:\n\n\t* io/transfer.c (st_read_done_worker, st_write_done_worker):\n\tCall unlock_unit here, add unit_lock lock around newunit_free call.\n\t(st_read_done, st_write_done): Only call unlock_unit when not\n\tcalling the worker function.\n\t* io/unit.c (set_internal_unit): Don't reset the unit_number\n\tto the same number as this cause race warnings.", "tree": {"sha": "1d356aacf223cd2702f38474e74191764f217cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d356aacf223cd2702f38474e74191764f217cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e9633ccb593937fceec67fafc2afe5d518d735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e9633ccb593937fceec67fafc2afe5d518d735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e9633ccb593937fceec67fafc2afe5d518d735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e9633ccb593937fceec67fafc2afe5d518d735/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bb345c9313ad8f6a6c24abd7d5eaa11413bbe22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb345c9313ad8f6a6c24abd7d5eaa11413bbe22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb345c9313ad8f6a6c24abd7d5eaa11413bbe22"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "71a935652e37bcc9e1bfc4a41f6f9fd3935c1838", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e9633ccb593937fceec67fafc2afe5d518d735/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e9633ccb593937fceec67fafc2afe5d518d735/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=a6e9633ccb593937fceec67fafc2afe5d518d735", "patch": "@@ -4339,6 +4339,7 @@ export_proto(st_read_done);\n void\n st_read_done_worker (st_parameter_dt *dtp)\n {\n+  bool free_newunit = false;\n   finalize_transfer (dtp);\n \n   free_ionml (dtp);\n@@ -4358,14 +4359,22 @@ st_read_done_worker (st_parameter_dt *dtp)\n \t\tfree (dtp->u.p.current_unit->ls);\n \t      dtp->u.p.current_unit->ls = NULL;\n \t    }\n-\t  newunit_free (dtp->common.unit);\n+\t  free_newunit = true;\n \t}\n       if (dtp->u.p.unit_is_internal || dtp->u.p.format_not_saved)\n \t{\n \t  free_format_data (dtp->u.p.fmt);\n \t  free_format (dtp);\n \t}\n     }\n+   unlock_unit (dtp->u.p.current_unit);\n+   if (free_newunit)\n+     {\n+       /* Avoid inverse lock issues by placing after unlock_unit.  */\n+       LOCK (&unit_lock);\n+       newunit_free (dtp->common.unit);\n+       UNLOCK (&unit_lock);\n+     }\n }\n \n void\n@@ -4382,11 +4391,10 @@ st_read_done (st_parameter_dt *dtp)\n \t      if (dtp->u.p.async)\n \t\tenqueue_done (dtp->u.p.current_unit->au, AIO_READ_DONE);\n \t    }\n+\t  unlock_unit (dtp->u.p.current_unit);\n \t}\n       else\n-\tst_read_done_worker (dtp);\n-\n-      unlock_unit (dtp->u.p.current_unit);\n+\tst_read_done_worker (dtp);  /* Calls unlock_unit.  */\n     }\n \n   library_end ();\n@@ -4406,6 +4414,7 @@ st_write (st_parameter_dt *dtp)\n void\n st_write_done_worker (st_parameter_dt *dtp)\n {\n+  bool free_newunit = false;\n   finalize_transfer (dtp);\n \n   if (dtp->u.p.current_unit != NULL\n@@ -4446,14 +4455,22 @@ st_write_done_worker (st_parameter_dt *dtp)\n \t\tfree (dtp->u.p.current_unit->ls);\n \t      dtp->u.p.current_unit->ls = NULL;\n \t    }\n-\t  newunit_free (dtp->common.unit);\n+\t  free_newunit = true;\n \t}\n       if (dtp->u.p.unit_is_internal || dtp->u.p.format_not_saved)\n \t{\n \t  free_format_data (dtp->u.p.fmt);\n \t  free_format (dtp);\n \t}\n     }\n+   unlock_unit (dtp->u.p.current_unit);\n+   if (free_newunit)\n+     {\n+       /* Avoid inverse lock issues by placing after unlock_unit.  */\n+       LOCK (&unit_lock);\n+       newunit_free (dtp->common.unit);\n+       UNLOCK (&unit_lock);\n+     }\n }\n \n extern void st_write_done (st_parameter_dt *);\n@@ -4476,11 +4493,10 @@ st_write_done (st_parameter_dt *dtp)\n \t      if (dtp->u.p.async)\n \t\tenqueue_done (dtp->u.p.current_unit->au, AIO_WRITE_DONE);\n \t    }\n+\t  unlock_unit (dtp->u.p.current_unit);\n \t}\n       else\n-\tst_write_done_worker (dtp);\n-\n-      unlock_unit (dtp->u.p.current_unit);\n+\tst_write_done_worker (dtp);  /* Calls unlock_unit.  */\n     }\n \n   library_end ();"}, {"sha": "b0cc6ab230142b82d35246445b532143527d821f", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e9633ccb593937fceec67fafc2afe5d518d735/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e9633ccb593937fceec67fafc2afe5d518d735/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=a6e9633ccb593937fceec67fafc2afe5d518d735", "patch": "@@ -456,7 +456,6 @@ set_internal_unit (st_parameter_dt *dtp, gfc_unit *iunit, int kind)\n {\n   gfc_offset start_record = 0;\n \n-  iunit->unit_number = dtp->common.unit;\n   iunit->recl = dtp->internal_unit_len;\n   iunit->internal_unit = dtp->internal_unit;\n   iunit->internal_unit_len = dtp->internal_unit_len;"}]}