{"sha": "810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwY2ZiZWJmYWQ4OTgxYmQ4ZTRhZWE2YTI0N2FkNGVlMWMyNGVjMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-06T17:12:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-06T17:12:44Z"}, "message": "i386: Use the proper mode for blend in vshuffle.\n\nFrom-SVN: r179625", "tree": {"sha": "acb91c58f47e36a30c602e7af385b23e00d7c86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acb91c58f47e36a30c602e7af385b23e00d7c86f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0/comments", "author": null, "committer": null, "parents": [{"sha": "44167383a18a5e2af75ccccaf2c1ea7b6c334695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44167383a18a5e2af75ccccaf2c1ea7b6c334695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44167383a18a5e2af75ccccaf2c1ea7b6c334695"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "19516c0a649781c3a44d5895606c39e8c4f8bf67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0", "patch": "@@ -7,6 +7,12 @@\n \t(vshuffle<mode>): Use it.\n \t(avx_vec_concat<V_256>): Rename from *vec_concat<V_256>_avx.\n \n+\t* config/i386/i386.c (ix86_expand_sse_movcc): Use correct mode\n+\tfor vector_all_ones_operand.\n+\t(ix86_expand_int_vcond): Distinguish between comparison mode\n+\tand data mode.  Allow them to differ.\n+\t(ix86_expand_vshuffle): Don't force data mode to match maskmode.\n+\n 2001-10-06  Richard Henderson  <rth@redhat.com>\n \n \t* optabs.c (expand_vec_shuffle_expr): Use the proper mode for the"}, {"sha": "2fdf540526064af938b98001da648faba6315573", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=810cfbebfad8981bd8e4aea6a247ad4ee1c24ec0", "patch": "@@ -18941,7 +18941,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n   enum machine_mode mode = GET_MODE (dest);\n   rtx t2, t3, x;\n \n-  if (vector_all_ones_operand (op_true, GET_MODE (op_true))\n+  if (vector_all_ones_operand (op_true, mode)\n       && rtx_equal_p (op_false, CONST0_RTX (mode)))\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, dest, cmp));\n@@ -19170,7 +19170,8 @@ ix86_expand_fp_vcond (rtx operands[])\n bool\n ix86_expand_int_vcond (rtx operands[])\n {\n-  enum machine_mode mode = GET_MODE (operands[0]);\n+  enum machine_mode data_mode = GET_MODE (operands[0]);\n+  enum machine_mode mode = GET_MODE (operands[4]);\n   enum rtx_code code = GET_CODE (operands[3]);\n   bool negate = false;\n   rtx x, cop0, cop1;\n@@ -19297,8 +19298,21 @@ ix86_expand_int_vcond (rtx operands[])\n \t}\n     }\n \n-  x = ix86_expand_sse_cmp (operands[0], code, cop0, cop1,\n-\t\t\t   operands[1+negate], operands[2-negate]);\n+  /* Allow the comparison to be done in one mode, but the movcc to\n+     happen in another mode.  */\n+  if (data_mode == mode)\n+    {\n+      x = ix86_expand_sse_cmp (operands[0], code, cop0, cop1,\n+\t\t\t       operands[1+negate], operands[2-negate]);\n+    }\n+  else\n+    {\n+      gcc_assert (GET_MODE_SIZE (data_mode) == GET_MODE_SIZE (mode));\n+      x = ix86_expand_sse_cmp (gen_lowpart (mode, operands[0]),\n+\t\t\t       code, cop0, cop1,\n+\t\t\t       operands[1+negate], operands[2-negate]);\n+      x = gen_lowpart (data_mode, x);\n+    }\n \n   ix86_expand_sse_movcc (operands[0], x, operands[1+negate],\n \t\t\t operands[2-negate]);\n@@ -19533,9 +19547,9 @@ ix86_expand_vshuffle (rtx operands[])\n       mask = expand_simple_binop (maskmode, AND, mask, vt,\n \t\t\t\t  NULL_RTX, 0, OPTAB_DIRECT);\n \n-      xops[0] = gen_lowpart (maskmode, operands[0]);\n-      xops[1] = gen_lowpart (maskmode, t2);\n-      xops[2] = gen_lowpart (maskmode, t1);\n+      xops[0] = operands[0];\n+      xops[1] = gen_lowpart (mode, t2);\n+      xops[2] = gen_lowpart (mode, t1);\n       xops[3] = gen_rtx_EQ (maskmode, mask, vt);\n       xops[4] = mask;\n       xops[5] = vt;"}]}