{"sha": "2a31c3216c53ffaeb21ec76e4491611bb40792b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzMWMzMjE2YzUzZmZhZWIyMWVjNzZlNDQ5MTYxMWJiNDA3OTJiNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-23T09:48:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-23T09:48:31Z"}, "message": "Convert STARTING_FRAME_OFFSET to a hook\n\nI took the documentation of the FRAME_GROWS_DOWNWARD behaviour from the\nversion that was in most header files, since the one in the manual seemed\nless clear.\n\nThe patch deliberately keeps FIRST_PARM_OFFSET(FNDECL) in\nmicroblaze_starting_frame_offset; this seems to be a port-local\nconvention and takes advantage of the fact that FIRST_PARM_OFFSET\ndoesn't read FNDECL.\n\n2017-10-23  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* target.def (starting_frame_offset): New hook.\n\t* doc/tm.texi (STARTING_FRAME_OFFSET): Remove in favor of...\n\t(TARGET_STARTING_FRAME_OFFSET): ...this new hook.\n\t* doc/tm.texi.in: Regenerate.\n\t* hooks.h (hook_hwi_void_0): Declare.\n\t* hooks.c (hook_hwi_void_0): New function.\n\t* doc/rtl.texi: Refer to TARGET_STARTING_FRAME_OFFSET instead of\n\tSTARTING_FRAME_OFFSET.\n\t* builtins.c (expand_builtin_setjmp_receiver): Likewise.\n\t* reload1.c (reload): Likewise.\n\t* cfgexpand.c (expand_used_vars): Use targetm.starting_frame_offset\n\tinstead of STARTING_FRAME_OFFSET.\n\t* function.c (try_fit_stack_local): Likewise.\n\t(assign_stack_local_1): Likewise\n\t(instantiate_virtual_regs): Likewise.\n\t* rtlanal.c (rtx_addr_can_trap_p_1): Likewise.\n\t* config/avr/avr.md (nonlocal_goto_receiver): Likewise.\n\t* config/aarch64/aarch64.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/alpha/alpha.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/arc/arc.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/arm/arm.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/bfin/bfin.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/c6x/c6x.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/cr16/cr16.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/cris/cris.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/fr30/fr30.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/frv/frv.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/ft32/ft32.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/h8300/h8300.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/i386/i386.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/ia64/ia64.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/m32c/m32c.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/m68k/m68k.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/mcore/mcore.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/mn10300/mn10300.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/moxie/moxie.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/msp430/msp430.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/nds32/nds32.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/nios2/nios2.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/nvptx/nvptx.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/pdp11/pdp11.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/riscv/riscv.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/rl78/rl78.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/rx/rx.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/s390/s390.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/sh/sh.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/sparc/sparc.c (sparc_compute_frame_size): Likewise.\n\t* config/sparc/sparc.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/spu/spu.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/stormy16/stormy16.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/tilegx/tilegx.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/tilepro/tilepro.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/v850/v850.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/visium/visium.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/avr/avr.h (STARTING_FRAME_OFFSET): Likewise.\n\t* config/avr/avr-protos.h (avr_starting_frame_offset): Likewise.\n\t* config/avr/avr.c (avr_starting_frame_offset): Make static and\n\treturn a HOST_WIDE_INT.\n\t(avr_builtin_setjmp_frame_value): Use it instead of\n\tSTARTING_FRAME_OFFSET.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/epiphany/epiphany.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/epiphany/epiphany.c (epiphany_starting_frame_offset):\n\tNew function.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/iq2000/iq2000.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/iq2000/iq2000.c (iq2000_starting_frame_offset): New function.\n\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n\t* config/lm32/lm32.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/lm32/lm32.c (lm32_starting_frame_offset): New function.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/m32r/m32r.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/m32r/m32r.c (m32r_starting_frame_offset): New function.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/microblaze/microblaze.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/microblaze/microblaze.c (microblaze_starting_frame_offset):\n\tNew function.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/mips/mips.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/mips/mips.c (mips_compute_frame_info): Refer to\n\tTARGET_STARTING_FRAME_OFFSET instead of STARTING_FRAME_OFFSET.\n\t(mips_starting_frame_offset): New function.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/mmix/mmix.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/mmix/mmix-protos.h (mmix_starting_frame_offset): Delete.\n\t* config/mmix/mmix.c (mmix_starting_frame_offset): Make static\n\tand return a HOST_WIDE_INT.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t(mmix_initial_elimination_offset): Refer to\n\tTARGET_STARTING_FRAME_OFFSET instead of STARTING_FRAME_OFFSET.\n\t* config/pa/pa.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/pa/pa.c (pa_starting_frame_offset): New function.\n\t(pa_compute_frame_size): Use it instead of STARTING_FRAME_OFFSET.\n\t(pa_expand_prologue): Likewise.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/powerpcspe/aix.h (STARTING_FRAME_OFFSET): Split out\n\t!FRAME_GROWS_DOWNWARD handling to...\n\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n\t* config/powerpcspe/darwin.h (STARTING_FRAME_OFFSET): Split out\n\t!FRAME_GROWS_DOWNWARD handling to...\n\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n\t* config/powerpcspe/powerpcspe.h (STARTING_FRAME_OFFSET): Split out\n\t!FRAME_GROWS_DOWNWARD handling to...\n\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n\t* config/powerpcspe/powerpcspe.c (TARGET_STARTING_FRAME_OFFSET):\n\tRedefine.\n\t(rs6000_starting_frame_offset): New function.\n\t* config/rs6000/aix.h (STARTING_FRAME_OFFSET): Split out\n\t!FRAME_GROWS_DOWNWARD handling to...\n\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n\t* config/rs6000/darwin.h (STARTING_FRAME_OFFSET): Split out\n\t!FRAME_GROWS_DOWNWARD handling to...\n\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n\t* config/rs6000/rs6000.h (STARTING_FRAME_OFFSET): Split out\n\t!FRAME_GROWS_DOWNWARD handling to...\n\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n\t* config/rs6000/rs6000.c (TARGET_STARTING_FRAME_OFFSET): Refine.\n\t(rs6000_starting_frame_offset): New function.\n\t* config/vax/elf.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/vax/vax.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/vax/vax.c (vax_starting_frame_offset): New function.\n\t(vax_expand_prologue): Use it instead of STARTING_FRAME_OFFSET.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* config/xtensa/xtensa.h (STARTING_FRAME_OFFSET): Delete.\n\t* config/xtensa/xtensa.c (xtensa_starting_frame_offset): New function.\n\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n\t* system.h (STARTING_FRAME_OFFSET): Poison.\n\nFrom-SVN: r254003", "tree": {"sha": "dc789f94038ad4986ddbf27397744b5117bf64e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc789f94038ad4986ddbf27397744b5117bf64e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a31c3216c53ffaeb21ec76e4491611bb40792b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a31c3216c53ffaeb21ec76e4491611bb40792b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a31c3216c53ffaeb21ec76e4491611bb40792b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a31c3216c53ffaeb21ec76e4491611bb40792b4/comments", "author": null, "committer": null, "parents": [{"sha": "3ec43c5e312e368cca5cf0b9727bcbd71f13a704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec43c5e312e368cca5cf0b9727bcbd71f13a704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec43c5e312e368cca5cf0b9727bcbd71f13a704"}], "stats": {"total": 672, "additions": 370, "deletions": 302}, "files": [{"sha": "ebda3cd5500f71d009452524826cf69d7c6236db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1,3 +1,133 @@\n+2017-10-23  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target.def (starting_frame_offset): New hook.\n+\t* doc/tm.texi (STARTING_FRAME_OFFSET): Remove in favor of...\n+\t(TARGET_STARTING_FRAME_OFFSET): ...this new hook.\n+\t* doc/tm.texi.in: Regenerate.\n+\t* hooks.h (hook_hwi_void_0): Declare.\n+\t* hooks.c (hook_hwi_void_0): New function.\n+\t* doc/rtl.texi: Refer to TARGET_STARTING_FRAME_OFFSET instead of\n+\tSTARTING_FRAME_OFFSET.\n+\t* builtins.c (expand_builtin_setjmp_receiver): Likewise.\n+\t* reload1.c (reload): Likewise.\n+\t* cfgexpand.c (expand_used_vars): Use targetm.starting_frame_offset\n+\tinstead of STARTING_FRAME_OFFSET.\n+\t* function.c (try_fit_stack_local): Likewise.\n+\t(assign_stack_local_1): Likewise\n+\t(instantiate_virtual_regs): Likewise.\n+\t* rtlanal.c (rtx_addr_can_trap_p_1): Likewise.\n+\t* config/avr/avr.md (nonlocal_goto_receiver): Likewise.\n+\t* config/aarch64/aarch64.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/alpha/alpha.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/arc/arc.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/arm/arm.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/bfin/bfin.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/c6x/c6x.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/cr16/cr16.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/cris/cris.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/fr30/fr30.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/frv/frv.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/ft32/ft32.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/h8300/h8300.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/i386/i386.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/ia64/ia64.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/m32c/m32c.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/m68k/m68k.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/mcore/mcore.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/mn10300/mn10300.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/moxie/moxie.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/msp430/msp430.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/nds32/nds32.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/nios2/nios2.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/nvptx/nvptx.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/pdp11/pdp11.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/riscv/riscv.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/rl78/rl78.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/rx/rx.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/s390/s390.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/sh/sh.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/sparc/sparc.c (sparc_compute_frame_size): Likewise.\n+\t* config/sparc/sparc.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/spu/spu.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/stormy16/stormy16.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/tilegx/tilegx.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/tilepro/tilepro.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/v850/v850.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/visium/visium.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/avr/avr.h (STARTING_FRAME_OFFSET): Likewise.\n+\t* config/avr/avr-protos.h (avr_starting_frame_offset): Likewise.\n+\t* config/avr/avr.c (avr_starting_frame_offset): Make static and\n+\treturn a HOST_WIDE_INT.\n+\t(avr_builtin_setjmp_frame_value): Use it instead of\n+\tSTARTING_FRAME_OFFSET.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/epiphany/epiphany.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/epiphany/epiphany.c (epiphany_starting_frame_offset):\n+\tNew function.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/iq2000/iq2000.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/iq2000/iq2000.c (iq2000_starting_frame_offset): New function.\n+\t(TARGET_CONSTANT_ALIGNMENT): Redefine.\n+\t* config/lm32/lm32.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/lm32/lm32.c (lm32_starting_frame_offset): New function.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/m32r/m32r.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/m32r/m32r.c (m32r_starting_frame_offset): New function.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/microblaze/microblaze.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/microblaze/microblaze.c (microblaze_starting_frame_offset):\n+\tNew function.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/mips/mips.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/mips/mips.c (mips_compute_frame_info): Refer to\n+\tTARGET_STARTING_FRAME_OFFSET instead of STARTING_FRAME_OFFSET.\n+\t(mips_starting_frame_offset): New function.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/mmix/mmix.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/mmix/mmix-protos.h (mmix_starting_frame_offset): Delete.\n+\t* config/mmix/mmix.c (mmix_starting_frame_offset): Make static\n+\tand return a HOST_WIDE_INT.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t(mmix_initial_elimination_offset): Refer to\n+\tTARGET_STARTING_FRAME_OFFSET instead of STARTING_FRAME_OFFSET.\n+\t* config/pa/pa.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/pa/pa.c (pa_starting_frame_offset): New function.\n+\t(pa_compute_frame_size): Use it instead of STARTING_FRAME_OFFSET.\n+\t(pa_expand_prologue): Likewise.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/powerpcspe/aix.h (STARTING_FRAME_OFFSET): Split out\n+\t!FRAME_GROWS_DOWNWARD handling to...\n+\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n+\t* config/powerpcspe/darwin.h (STARTING_FRAME_OFFSET): Split out\n+\t!FRAME_GROWS_DOWNWARD handling to...\n+\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n+\t* config/powerpcspe/powerpcspe.h (STARTING_FRAME_OFFSET): Split out\n+\t!FRAME_GROWS_DOWNWARD handling to...\n+\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n+\t* config/powerpcspe/powerpcspe.c (TARGET_STARTING_FRAME_OFFSET):\n+\tRedefine.\n+\t(rs6000_starting_frame_offset): New function.\n+\t* config/rs6000/aix.h (STARTING_FRAME_OFFSET): Split out\n+\t!FRAME_GROWS_DOWNWARD handling to...\n+\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n+\t* config/rs6000/darwin.h (STARTING_FRAME_OFFSET): Split out\n+\t!FRAME_GROWS_DOWNWARD handling to...\n+\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n+\t* config/rs6000/rs6000.h (STARTING_FRAME_OFFSET): Split out\n+\t!FRAME_GROWS_DOWNWARD handling to...\n+\t(RS6000_STARTING_FRAME_OFFSET): ...this new macro.\n+\t* config/rs6000/rs6000.c (TARGET_STARTING_FRAME_OFFSET): Refine.\n+\t(rs6000_starting_frame_offset): New function.\n+\t* config/vax/elf.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/vax/vax.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/vax/vax.c (vax_starting_frame_offset): New function.\n+\t(vax_expand_prologue): Use it instead of STARTING_FRAME_OFFSET.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* config/xtensa/xtensa.h (STARTING_FRAME_OFFSET): Delete.\n+\t* config/xtensa/xtensa.c (xtensa_starting_frame_offset): New function.\n+\t(TARGET_STARTING_FRAME_OFFSET): Redefine.\n+\t* system.h (STARTING_FRAME_OFFSET): Poison.\n+\n 2017-10-23  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use"}, {"sha": "29778fc50c34f9ccff4b0283321e3b671706b94e", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -900,7 +900,7 @@ expand_builtin_setjmp_receiver (rtx receiver_label)\n \t to the underlying register (fp in this case) that makes\n \t the original assignment true.\n \t So the following insn will actually be decrementing fp by\n-\t STARTING_FRAME_OFFSET.  */\n+\t TARGET_STARTING_FRAME_OFFSET.  */\n       emit_move_insn (virtual_stack_vars_rtx, hard_frame_pointer_rtx);\n \n       /* Restoring the frame pointer also modifies the hard frame pointer."}, {"sha": "00efe14121364a73fa2f6750a375a0ee0ff9f905", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -2025,7 +2025,7 @@ expand_used_vars (void)\n   /* Compute the phase of the stack frame for this function.  */\n   {\n     int align = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n-    int off = STARTING_FRAME_OFFSET % align;\n+    int off = targetm.starting_frame_offset () % align;\n     frame_phase = off ? align - off : 0;\n   }\n "}, {"sha": "75fda01a6f4331c004199ccb9acc67779e820d1c", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -541,8 +541,6 @@ extern enum aarch64_processor aarch64_tune;\n \n #define FRAME_GROWS_DOWNWARD\t1\n \n-#define STARTING_FRAME_OFFSET\t0\n-\n #define ACCUMULATE_OUTGOING_ARGS\t1\n \n #define FIRST_PARM_OFFSET(FNDECL) 0"}, {"sha": "257c1de2422b69a0fbb2810ebee455b4088a0a57", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -493,13 +493,6 @@ enum reg_class {\n    goes at a more negative offset in the frame.  */\n /* #define FRAME_GROWS_DOWNWARD 0 */\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-\n-#define STARTING_FRAME_OFFSET 0\n-\n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.\n    On Alpha, don't define this because there are no push insns.  */"}, {"sha": "1d9063ad74a0240f28c6f7f851c6abdcdb662ac1", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -658,12 +658,6 @@ extern enum reg_class arc_regno_reg_class[];\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  */\n #define STACK_POINTER_OFFSET (0)"}, {"sha": "9567f6df73a960ab08b3766fcf3677629658a5ab", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1256,12 +1256,6 @@ enum reg_class\n    && crtl->outgoing_args_size != 0\t\t\\\n    ? UNITS_PER_WORD : 0)\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET  0\n-\n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.  */\n /* The push insns do not do this rounding implicitly."}, {"sha": "9ed94800797c6d313fb5d9bf5704b6ae43d31a11", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -84,7 +84,6 @@ extern void avr_expand_prologue (void);\n extern void avr_expand_epilogue (bool);\n extern bool avr_emit_movmemhi (rtx*);\n extern int avr_epilogue_uses (int regno);\n-extern int avr_starting_frame_offset (void);\n \n extern void avr_output_addr_vec (rtx_insn*, rtx);\n extern const char *avr_out_sbxx_branch (rtx_insn *insn, rtx operands[]);"}, {"sha": "b1d8a84d154d757ec9348f3156093d6f9260b02f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1153,11 +1153,11 @@ avr_outgoing_args_size (void)\n }\n \n \n-/* Implement `STARTING_FRAME_OFFSET'.  */\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n /* This is the offset from the frame pointer register to the first stack slot\n    that contains a variable living in the frame.  */\n \n-int\n+static HOST_WIDE_INT\n avr_starting_frame_offset (void)\n {\n   return 1 + avr_outgoing_args_size ();\n@@ -1314,16 +1314,16 @@ avr_build_builtin_va_list (void)\n \n /* Implement `TARGET_BUILTIN_SETJMP_FRAME_VALUE'.  */\n /* Actual start of frame is virtual_stack_vars_rtx this is offset from\n-   frame pointer by +STARTING_FRAME_OFFSET.\n-   Using saved frame = virtual_stack_vars_rtx - STARTING_FRAME_OFFSET\n+   frame pointer by +TARGET_STARTING_FRAME_OFFSET.\n+   Using saved frame = virtual_stack_vars_rtx - TARGET_STARTING_FRAME_OFFSET\n    avoids creating add/sub of offset in nonlocal goto and setjmp.  */\n \n static rtx\n avr_builtin_setjmp_frame_value (void)\n {\n   rtx xval = gen_reg_rtx (Pmode);\n   emit_insn (gen_subhi3 (xval, virtual_stack_vars_rtx,\n-                         gen_int_mode (STARTING_FRAME_OFFSET, Pmode)));\n+                         gen_int_mode (avr_starting_frame_offset (), Pmode)));\n   return xval;\n }\n \n@@ -14789,6 +14789,9 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_LEGITIMATE_COMBINED_INSN\n #define TARGET_LEGITIMATE_COMBINED_INSN avr_legitimate_combined_insn\n \n+#undef  TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET avr_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "2272df4afcc1ae02883434767149ae7ac72c94b3", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -284,8 +284,6 @@ enum reg_class {\n \n #define STACK_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET avr_starting_frame_offset()\n-\n #define STACK_POINTER_OFFSET 1\n \n #define FIRST_PARM_OFFSET(FUNDECL) 0"}, {"sha": "14f9298f30541f774ad70883cb2bd4c110ba93d6", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -334,10 +334,9 @@\n         (unspec_volatile:HI [(const_int 0)] UNSPECV_GOTO_RECEIVER))]\n   \"\"\n   {\n+    rtx offset = gen_int_mode (targetm.starting_frame_offset (), Pmode);\n     emit_move_insn (virtual_stack_vars_rtx,\n-                    gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx,\n-                                  gen_int_mode (STARTING_FRAME_OFFSET,\n-                                                Pmode)));\n+                    gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx, offset));\n     /* ; This might change the hard frame pointer in ways that aren't\n        ; apparent to early optimization passes, so force a clobber.  */\n     emit_clobber (hard_frame_pointer_rtx);"}, {"sha": "e15a05d8784e3e4c56a9055a6047599f8a0e2cea", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -252,12 +252,6 @@ extern const char *bfin_library_id_string;\n    it. */\n #define FIRST_PARM_OFFSET(DECL) 0\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Register to use for pushing function arguments.  */\n #define STACK_POINTER_REGNUM REG_P6\n "}, {"sha": "233ac13fc8c5eee3f46095a7d35862de7b912ffb", "filename": "gcc/config/c6x/c6x.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fc6x%2Fc6x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fc6x%2Fc6x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -298,7 +298,6 @@ enum reg_class\n #define STACK_POINTER_OFFSET 4\n /* Likewise for AP (which is the incoming stack pointer).  */\n #define FIRST_PARM_OFFSET(fundecl) 4\n-#define STARTING_FRAME_OFFSET 0\n #define FRAME_GROWS_DOWNWARD 1\n #define STACK_GROWS_DOWNWARD 1\n "}, {"sha": "29f5b852ff60e4d9819752cd644aa78c25b6719b", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -349,8 +349,6 @@ enum reg_class\n /* Stack layout and calling conventions.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET   0\n-\n #define STACK_POINTER_REGNUM    15\n \n #define FRAME_POINTER_REGNUM    13"}, {"sha": "f9149c717a7ab96bc4c6cf3813a87136e06ef893", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -589,10 +589,6 @@ enum reg_class\n #define STACK_GROWS_DOWNWARD 1\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* It seems to be indicated in the code (at least 2.1) that this is\n-   better a constant, and best 0.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n #define FIRST_PARM_OFFSET(FNDECL) 0\n \n #define RETURN_ADDR_RTX(COUNT, FRAMEADDR) \\"}, {"sha": "26b0f3cca74441dac2472d886e08340e742a5149", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -176,6 +176,9 @@ static rtx_insn *frame_insn (rtx);\n \n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT epiphany_constant_alignment\n+\n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET epiphany_starting_frame_offset\n \f\n bool\n epiphany_is_interrupt_p (tree decl)\n@@ -3028,4 +3031,12 @@ epiphany_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   return align;\n }\n \n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+epiphany_starting_frame_offset (void)\n+{\n+  return epiphany_stack_offset;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "c0767b4642ad15b470e55f87b49db6148c8c2c1f", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -447,12 +447,6 @@ typedef struct GTY (()) machine_function\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET epiphany_stack_offset\n-\n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  */\n #define STACK_POINTER_OFFSET epiphany_stack_offset"}, {"sha": "8bcabf59299adc7e9f1b56d40498c39f3e21e255", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -345,15 +345,6 @@ enum reg_class\n    are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset from the frame pointer to the first local variable slot to be\n-   allocated.\n-\n-   If `FRAME_GROWS_DOWNWARD', find the next slot's offset by subtracting the\n-   first slot's length from `STARTING_FRAME_OFFSET'.  Otherwise, it is found by\n-   adding the length of the first slot to the value `STARTING_FRAME_OFFSET'.  */\n-/* #define STARTING_FRAME_OFFSET -4 */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  If not specified, the default value of zero\n    is used.  This is the proper value for most machines."}, {"sha": "7403e1ae62103b7dd42d1a8da289d2db6a37df1f", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -966,14 +966,6 @@ typedef struct frv_stack {\n    are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset from the frame pointer to the first local variable slot to be\n-   allocated.\n-\n-   If `FRAME_GROWS_DOWNWARD', find the next slot's offset by subtracting the\n-   first slot's length from `STARTING_FRAME_OFFSET'.  Otherwise, it is found by\n-   adding the length of the first slot to the value `STARTING_FRAME_OFFSET'.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  If not specified, the default value of zero\n    is used.  This is the proper value for most machines."}, {"sha": "d52bb9af17c660a91a1c7b557f3f9bfbab9dad4a", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -233,10 +233,6 @@ enum reg_class\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Offset from the frame pointer to the first local variable slot to\n-   be allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset from the argument pointer register to the first argument's\n    address.  On some machines it may depend on the data type of the\n    function.  */"}, {"sha": "9ba82a76ab9275e891f1eeadaa14551488108b21", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -352,13 +352,6 @@ enum reg_class {\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-\n-#define STARTING_FRAME_OFFSET 0\n-\n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.\n "}, {"sha": "4a71977808e180b7a6e6b020a97cfdbb71c18626", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1523,12 +1523,6 @@ enum reg_class\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* If we generate an insn to push BYTES bytes, this says how many the stack\n    pointer really advances by.  On 386, we have pushw instruction that\n    decrements by exactly 2 no matter what the position was, there is no pushb."}, {"sha": "e7073d1cf20174cad2c47bf321ea057c53857a02", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -779,10 +779,6 @@ enum reg_class\n    are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 0\n \n-/* Offset from the frame pointer to the first local variable slot to\n-   be allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  If not specified, the default value of zero\n    is used.  This is the proper value for most machines.  */"}, {"sha": "2e0c6f6a975e4b2adb2af8175aad6e2b510b52c7", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -181,6 +181,7 @@ static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n static bool iq2000_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool iq2000_modes_tieable_p (machine_mode, machine_mode);\n static HOST_WIDE_INT iq2000_constant_alignment (const_tree, HOST_WIDE_INT);\n+static HOST_WIDE_INT iq2000_starting_frame_offset (void);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -268,6 +269,9 @@ static HOST_WIDE_INT iq2000_constant_alignment (const_tree, HOST_WIDE_INT);\n #undef  TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT\tiq2000_constant_alignment\n \n+#undef  TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET\tiq2000_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return nonzero if we split the address into high and low parts.  */\n@@ -3546,4 +3550,12 @@ iq2000_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   return align;\n }\n \n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+iq2000_starting_frame_offset (void)\n+{\n+  return crtl->outgoing_args_size;\n+}\n+\n #include \"gt-iq2000.h\""}, {"sha": "72122e27577660e8e623418fea216c75f554ae0b", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -215,9 +215,6 @@ enum reg_class\n \n #define FRAME_GROWS_DOWNWARD 0\n \n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (crtl->outgoing_args_size)\n-\n /* Use the default value zero.  */\n /* #define STACK_POINTER_OFFSET 0 */\n "}, {"sha": "1d6cfa0dc8a988840d7cf1f862f157e40ffe484c", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -79,6 +79,7 @@ static void lm32_function_arg_advance (cumulative_args_t cum,\n \t\t\t\t       const_tree type, bool named);\n static bool lm32_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool lm32_modes_tieable_p (machine_mode, machine_mode);\n+static HOST_WIDE_INT lm32_starting_frame_offset (void);\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE lm32_option_override\n@@ -116,6 +117,9 @@ static bool lm32_modes_tieable_p (machine_mode, machine_mode);\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET lm32_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Current frame information calculated by lm32_compute_frame_size.  */\n@@ -1249,3 +1253,11 @@ lm32_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n \t  && GET_MODE_SIZE (mode1) <= UNITS_PER_WORD\n \t  && GET_MODE_SIZE (mode2) <= UNITS_PER_WORD);\n }\n+\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+lm32_starting_frame_offset (void)\n+{\n+  return UNITS_PER_WORD;\n+}"}, {"sha": "8f2035455ae856f6923bd768e691dab56c71c01c", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -204,8 +204,6 @@ enum reg_class\n \n #define STACK_POINTER_OFFSET (UNITS_PER_WORD)\n \n-#define STARTING_FRAME_OFFSET (UNITS_PER_WORD)\n-\n #define FIRST_PARM_OFFSET(FNDECL) (UNITS_PER_WORD)\n \n #define STACK_POINTER_REGNUM SP_REGNUM"}, {"sha": "4bf67fb9c6726c7f2a6865431084b3eb235d6afa", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -421,7 +421,6 @@ enum reg_class\n #define STACK_PUSH_CODE PRE_DEC\n #define FRAME_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET 0\n #define FIRST_PARM_OFFSET(F) 0\n \n #define RETURN_ADDR_RTX(COUNT,FA) m32c_return_addr_rtx (COUNT)"}, {"sha": "f1044575550b19aa7c815fb5f153f73a4e5062d2", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -104,6 +104,7 @@ static bool m32r_legitimate_constant_p (machine_mode, rtx);\n static bool m32r_attribute_identifier (const_tree);\n static bool m32r_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool m32r_modes_tieable_p (machine_mode, machine_mode);\n+static HOST_WIDE_INT m32r_starting_frame_offset (void);\n \f\n /* M32R specific attributes.  */\n \n@@ -220,6 +221,9 @@ static const struct attribute_spec m32r_attribute_table[] =\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET m32r_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by m32r_option_override to initialize various things.  */\n@@ -2959,3 +2963,12 @@ m32r_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n \t   && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n \t   && UINTVAL (XEXP (XEXP (x, 0), 1)) > 32767);\n }\n+\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  The frame pointer points at\n+   the same place as the stack pointer, except if alloca has been called.  */\n+\n+static HOST_WIDE_INT\n+m32r_starting_frame_offset (void)\n+{\n+  return M32R_STACK_ALIGN (crtl->outgoing_args_size);\n+}"}, {"sha": "0fa4c5f24e17ff2512c2dd13873261f71c4129b4", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -492,15 +492,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Offset from frame pointer to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-/* The frame pointer points at the same place as the stack pointer, except if\n-   alloca has been called.  */\n-#define STARTING_FRAME_OFFSET \\\n-  M32R_STACK_ALIGN (crtl->outgoing_args_size)\n-\n /* Offset from the stack pointer register to the first location at which\n    outgoing arguments are placed.  */\n #define STACK_POINTER_OFFSET 0"}, {"sha": "97693cbf54984a53aa6c35061ca723dae6d1a7b3", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -467,7 +467,6 @@ extern enum reg_class regno_reg_class[];\n \n #define STACK_GROWS_DOWNWARD 1\n #define FRAME_GROWS_DOWNWARD 1\n-#define STARTING_FRAME_OFFSET 0\n \n /* On the 680x0, sp@- in a byte insn really pushes a word.\n    On the ColdFire, sp@- in a byte insn pushes just a byte.  */"}, {"sha": "50d087c1cd5255ef4c3f19c3f73ac3958c8e92bc", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -390,12 +390,6 @@ extern const enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET  0\n-\n /* If defined, the maximum amount of space required for outgoing arguments\n    will be computed and placed into the variable\n    `crtl->outgoing_args_size'.  No space will be pushed"}, {"sha": "74875238774f0d806e400b4996ebcecb58ff75e7", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -3810,6 +3810,14 @@ microblaze_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n     return MAX (align, BITS_PER_WORD);\n   return align;\n }\n+\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+microblaze_starting_frame_offset (void)\n+{\n+  return (crtl->outgoing_args_size + FIRST_PARM_OFFSET(FNDECL));\n+}\n \f\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO      microblaze_encode_section_info\n@@ -3917,6 +3925,9 @@ microblaze_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT microblaze_constant_alignment\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET microblaze_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-microblaze.h\""}, {"sha": "59cc1cc2e37b7b8c49a56def5f45db261469f579", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -402,10 +402,6 @@ extern enum reg_class microblaze_regno_to_class[];\n \n #define STACK_GROWS_DOWNWARD 1\n \n-/* Changed the starting frame offset to including the new link stuff */\n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-   (crtl->outgoing_args_size + FIRST_PARM_OFFSET(FNDECL))\n-\n /* The return address for the current frame is in r31 if this is a leaf\n    function.  Otherwise, it is on the stack.  It is at a variable offset\n    from sp/fp/ap, so we define a fake hard register rap which is a"}, {"sha": "149ad8ebd818bc1bcd93544b345300d259f348f6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -10956,7 +10956,7 @@ mips_compute_frame_info (void)\n      if we know that none of the called functions will use this space.\n \n      But if the target-independent frame size is nonzero, we have already\n-     committed to allocating these in STARTING_FRAME_OFFSET for\n+     committed to allocating these in TARGET_STARTING_FRAME_OFFSET for\n      !FRAME_GROWS_DOWNWARD.  */\n \n   if ((size == 0 || FRAME_GROWS_DOWNWARD)\n@@ -22346,6 +22346,17 @@ mips_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n     return MAX (align, BITS_PER_WORD);\n   return align;\n }\n+\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  See mips_compute_frame_info\n+   for details about the frame layout.  */\n+\n+static HOST_WIDE_INT\n+mips_starting_frame_offset (void)\n+{\n+  if (FRAME_GROWS_DOWNWARD)\n+    return 0;\n+  return crtl->outgoing_args_size + MIPS_GP_SAVE_AREA_SIZE;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -22647,6 +22658,9 @@ mips_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT mips_constant_alignment\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET mips_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "550d283158e6d14aa6ed80b853a27851e4fc8d9b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -2298,14 +2298,6 @@ enum reg_class\n #define MIPS_GP_SAVE_AREA_SIZE \\\n   (TARGET_CALL_CLOBBERED_GP ? MIPS_STACK_ALIGN (UNITS_PER_WORD) : 0)\n \n-/* The offset of the first local variable from the frame pointer.  See\n-   mips_compute_frame_info for details about the frame layout.  */\n-\n-#define STARTING_FRAME_OFFSET\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\\\n-   : crtl->outgoing_args_size + MIPS_GP_SAVE_AREA_SIZE)\n-\n #define RETURN_ADDR_RTX mips_return_addr\n \n /* Mask off the MIPS16 ISA bit in unwind addresses."}, {"sha": "4e3a752076574d1bae984acd972da108c847c2b3", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n extern void mmix_init_expanders (void);\n extern int mmix_eh_return_data_regno (int);\n extern int mmix_initial_elimination_offset (int, int);\n-extern int mmix_starting_frame_offset (void);\n extern int mmix_function_arg_regno_p (int, int);\n extern void mmix_function_profiler (FILE *, int);\n extern int mmix_reversible_cc_mode (machine_mode);"}, {"sha": "e9115941e1e94f7d89645a7c77d0e53f57552622", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -169,6 +169,7 @@ static void mmix_print_operand_address (FILE *, machine_mode, rtx);\n static bool mmix_print_operand_punct_valid_p (unsigned char);\n static void mmix_conditional_register_usage (void);\n static HOST_WIDE_INT mmix_constant_alignment (const_tree, HOST_WIDE_INT);\n+static HOST_WIDE_INT mmix_starting_frame_offset (void);\n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n    for a general description.  */\n@@ -286,6 +287,9 @@ static HOST_WIDE_INT mmix_constant_alignment (const_tree, HOST_WIDE_INT);\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT mmix_constant_alignment\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET mmix_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n@@ -498,9 +502,9 @@ mmix_dynamic_chain_address (rtx frame)\n   return plus_constant (Pmode, frame, -8);\n }\n \n-/* STARTING_FRAME_OFFSET.  */\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n \n-int\n+static HOST_WIDE_INT\n mmix_starting_frame_offset (void)\n {\n   /* The old frame pointer is in the slot below the new one, so\n@@ -566,7 +570,7 @@ mmix_initial_elimination_offset (int fromreg, int toreg)\n      counted; the others go on the register stack.\n \n      The frame-pointer is counted too if it is what is eliminated, as we\n-     need to balance the offset for it from STARTING_FRAME_OFFSET.\n+     need to balance the offset for it from TARGET_STARTING_FRAME_OFFSET.\n \n      Also add in the slot for the register stack pointer we save if we\n      have a landing pad."}, {"sha": "5dafe2dbf982b04f97b4dab6bd1f7c38731a03cf", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -437,9 +437,6 @@ enum reg_class\n #define STACK_GROWS_DOWNWARD 1\n #define FRAME_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET \\\n-  mmix_starting_frame_offset ()\n-\n #define FIRST_PARM_OFFSET(FUNDECL) 0\n \n #define DYNAMIC_CHAIN_ADDRESS(FRAMEADDR) \\"}, {"sha": "b074540f7b1902aa258174a72fcb11b99049056c", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -392,13 +392,6 @@ enum reg_class\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset of first parameter from the argument pointer register value.  */\n /* Is equal to the size of the saved fp + pc, even if an fp isn't\n    saved since the value is used before we know.  */"}, {"sha": "3742967d01c67b03483799c64b2906f1197ed17f", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -226,10 +226,6 @@ enum reg_class\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Offset from the frame pointer to the first local variable slot to\n-   be allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1"}, {"sha": "d422725914822425c35e2ac91b920f39416143d8", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -196,7 +196,6 @@ extern const char * msp430_select_hwmult_lib (int, const char **);\n #define WORD_REGISTER_OPERATIONS\t1\n \n #define MOVE_MAX \t\t\t8\n-#define STARTING_FRAME_OFFSET\t\t0\n \n #define INCOMING_RETURN_ADDR_RTX \\\n   msp430_incoming_return_addr_rtx ()"}, {"sha": "81522b848c86d708bd88ddb32ad8aa359daec946", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -681,8 +681,6 @@ enum reg_class\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET 0\n-\n #define STACK_POINTER_OFFSET 0\n \n #define FIRST_PARM_OFFSET(fundecl) \\"}, {"sha": "420543e4f46874f34f1ac13bd3662fdacd63ec52", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -252,7 +252,6 @@ enum reg_class\n \n /* Stack layout.  */\n #define STACK_GROWS_DOWNWARD 1\n-#define STARTING_FRAME_OFFSET 0\n #define FIRST_PARM_OFFSET(FUNDECL) 0\n \n /* Before the prologue, RA lives in r31.  */"}, {"sha": "f81b9e2ae697753bf599ca523d4fc3b89ff0ca53", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -122,7 +122,6 @@ enum reg_class             {  NO_REGS,    ALL_REGS,\tLIM_REG_CLASSES };\n \n /* Stack and Calling.  */\n \n-#define STARTING_FRAME_OFFSET 0\n #define FRAME_GROWS_DOWNWARD 0\n #define STACK_GROWS_DOWNWARD 1\n "}, {"sha": "3e2ef9d865c2ec0c1aff89d4f8d07b1eff4603dd", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -203,6 +203,7 @@ static unsigned int pa_hard_regno_nregs (unsigned int, machine_mode);\n static bool pa_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool pa_modes_tieable_p (machine_mode, machine_mode);\n static bool pa_can_change_mode_class (machine_mode, machine_mode, reg_class_t);\n+static HOST_WIDE_INT pa_starting_frame_offset (void);\n \n /* The following extra sections are only used for SOM.  */\n static GTY(()) section *som_readonly_data_section;\n@@ -422,6 +423,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT constant_alignment_word_strings\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET pa_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -3779,11 +3783,11 @@ pa_compute_frame_size (HOST_WIDE_INT size, int *fregs_live)\n   size = (size + UNITS_PER_WORD - 1) & ~(UNITS_PER_WORD - 1);\n \n   /* Space for previous frame pointer + filler.  If any frame is\n-     allocated, we need to add in the STARTING_FRAME_OFFSET.  We\n+     allocated, we need to add in the TARGET_STARTING_FRAME_OFFSET.  We\n      waste some space here for the sake of HP compatibility.  The\n      first slot is only used when the frame pointer is needed.  */\n   if (size || frame_pointer_needed)\n-    size += STARTING_FRAME_OFFSET;\n+    size += pa_starting_frame_offset ();\n   \n   /* If the current function calls __builtin_eh_return, then we need\n      to allocate stack space for registers that will hold data for\n@@ -3918,7 +3922,7 @@ pa_expand_prologue (void)\n      and must be changed in tandem with this code.  */\n   local_fsize = (size + UNITS_PER_WORD - 1) & ~(UNITS_PER_WORD - 1);\n   if (local_fsize || frame_pointer_needed)\n-    local_fsize += STARTING_FRAME_OFFSET;\n+    local_fsize += pa_starting_frame_offset ();\n \n   actual_fsize = pa_compute_frame_size (size, &save_fregs);\n   if (flag_stack_usage_info)\n@@ -10809,4 +10813,17 @@ pa_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n   return PA_HARD_REGNO_MODE_OK (regno, mode);\n }\n \n+/* Implement TARGET_STARTING_FRAME_OFFSET.\n+\n+   On the 32-bit ports, we reserve one slot for the previous frame\n+   pointer and one fill slot.  The fill slot is for compatibility\n+   with HP compiled programs.  On the 64-bit ports, we reserve one\n+   slot for the previous frame pointer.  */\n+\n+static HOST_WIDE_INT\n+pa_starting_frame_offset (void)\n+{\n+  return 8;\n+}\n+\n #include \"gt-pa.h\""}, {"sha": "7bd1f112471ce4268b8a4229cdcdd3cf36c5a37a", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -494,17 +494,6 @@ extern rtx hppa_pic_save_rtx (void);\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 0\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.\n-\n-   On the 32-bit ports, we reserve one slot for the previous frame\n-   pointer and one fill slot.  The fill slot is for compatibility\n-   with HP compiled programs.  On the 64-bit ports, we reserve one\n-   slot for the previous frame pointer.  */\n-#define STARTING_FRAME_OFFSET 8\n-\n /* Define STACK_ALIGNMENT_NEEDED to zero to disable final alignment\n    of the stack.  The default is to align it to STACK_BOUNDARY.  */\n #define STACK_ALIGNMENT_NEEDED 0"}, {"sha": "115bb5b83a020cbfad42a449989d85ea7aaef680", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -257,12 +257,6 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.\n    On the pdp11, the stack is on an even boundary */"}, {"sha": "607b42c0a40e56767e2d876b054d09c3f4c43392", "filename": "gcc/config/powerpcspe/aix.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Faix.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -54,13 +54,11 @@\n    sizes of the fixed area and the parameter area must be a multiple of\n    STACK_BOUNDARY.  */\n \n-#undef STARTING_FRAME_OFFSET\n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\t\\\n-   : (cfun->calls_alloca\t\t\t\t\t\t\\\n-      ? RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA, 16)\t\\\n-      : (RS6000_ALIGN (crtl->outgoing_args_size, 16) + RS6000_SAVE_AREA)))\n+#undef RS6000_STARTING_FRAME_OFFSET\n+#define RS6000_STARTING_FRAME_OFFSET\t\t\t\t\t\\\n+  (cfun->calls_alloca\t\t\t\t\t\t\t\\\n+   ? RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA, 16)\t\\\n+   : (RS6000_ALIGN (crtl->outgoing_args_size, 16) + RS6000_SAVE_AREA))\n \n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'."}, {"sha": "ac268dcab238426a8d01ee35d1d54544ec35d70b", "filename": "gcc/config/powerpcspe/darwin.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fdarwin.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -148,12 +148,10 @@ extern int darwin_emit_branch_islands;\n \n /* Pad the outgoing args area to 16 bytes instead of the usual 8.  */\n \n-#undef STARTING_FRAME_OFFSET\n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\t\\\n-   : (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\\\n-      + RS6000_SAVE_AREA))\n+#undef RS6000_STARTING_FRAME_OFFSET\n+#define RS6000_STARTING_FRAME_OFFSET\t\t\t\t\t\\\n+  (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\t\t\\\n+   + RS6000_SAVE_AREA)\n \n #undef STACK_DYNAMIC_OFFSET\n #define STACK_DYNAMIC_OFFSET(FUNDECL)\t\t\t\t\t\\"}, {"sha": "b39a8f8559f7c82897ab1ff8fc087b0e35bda798", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1987,6 +1987,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT rs6000_constant_alignment\n+\n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET rs6000_starting_frame_offset\n \f\n \n /* Processor table.  */\n@@ -43772,6 +43775,16 @@ rs6000_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n     return MAX (align, BITS_PER_WORD);\n   return align;\n }\n+\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+rs6000_starting_frame_offset (void)\n+{\n+  if (FRAME_GROWS_DOWNWARD)\n+    return 0;\n+  return RS6000_STARTING_FRAME_OFFSET;\n+}\n \f\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "bc37c6f17e588aaa0b50271c0f0bdd06b0dc6002", "filename": "gcc/config/powerpcspe/powerpcspe.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1648,15 +1648,13 @@ extern enum reg_class rs6000_constraints[RS6000_CONSTRAINT_MAX];\n    sizes of the fixed area and the parameter area must be a multiple of\n    STACK_BOUNDARY.  */\n \n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\t\\\n-   : (cfun->calls_alloca\t\t\t\t\t\t\\\n-      ? (RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA,\t\\\n-\t\t       (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8 ))\t\\\n-      : (RS6000_ALIGN (crtl->outgoing_args_size,\t\t\t\\\n-\t\t       (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8)\t\t\\\n-\t + RS6000_SAVE_AREA)))\n+#define RS6000_STARTING_FRAME_OFFSET\t\t\t\t\t\\\n+  (cfun->calls_alloca\t\t\t\t\t\t\t\\\n+   ? (RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA,\t\\\n+\t\t    (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8 ))\t\t\\\n+   : (RS6000_ALIGN (crtl->outgoing_args_size,\t\t\t\t\\\n+\t\t    (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8)\t\t\\\n+      + RS6000_SAVE_AREA))\n \n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'."}, {"sha": "e53555efe82fbcece81c18adf22bab5c06edef0d", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -446,8 +446,6 @@ enum reg_class\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET 0\n-\n #define RETURN_ADDR_RTX riscv_return_addr\n \n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\"}, {"sha": "e6b640986533251cbee504698794af1f2b89ed6d", "filename": "gcc/config/rl78/rl78.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frl78%2Frl78.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frl78%2Frl78.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -149,7 +149,6 @@\n #define HAS_LONG_UNCOND_BRANCH\t\t0\n \n #define MOVE_MAX \t\t\t2\n-#define STARTING_FRAME_OFFSET\t\t0\n \n #define ADDR_SPACE_NEAR\t\t\t1\n #define ADDR_SPACE_FAR\t\t\t2"}, {"sha": "607b42c0a40e56767e2d876b054d09c3f4c43392", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -54,13 +54,11 @@\n    sizes of the fixed area and the parameter area must be a multiple of\n    STACK_BOUNDARY.  */\n \n-#undef STARTING_FRAME_OFFSET\n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\t\\\n-   : (cfun->calls_alloca\t\t\t\t\t\t\\\n-      ? RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA, 16)\t\\\n-      : (RS6000_ALIGN (crtl->outgoing_args_size, 16) + RS6000_SAVE_AREA)))\n+#undef RS6000_STARTING_FRAME_OFFSET\n+#define RS6000_STARTING_FRAME_OFFSET\t\t\t\t\t\\\n+  (cfun->calls_alloca\t\t\t\t\t\t\t\\\n+   ? RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA, 16)\t\\\n+   : (RS6000_ALIGN (crtl->outgoing_args_size, 16) + RS6000_SAVE_AREA))\n \n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'."}, {"sha": "9a88a8d9e5e9d30bc79d4e829ce0fd0dc3400094", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -148,12 +148,10 @@ extern int darwin_emit_branch_islands;\n \n /* Pad the outgoing args area to 16 bytes instead of the usual 8.  */\n \n-#undef STARTING_FRAME_OFFSET\n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\t\\\n-   : (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\\\n-      + RS6000_SAVE_AREA))\n+#undef RS6000_STARTING_FRAME_OFFSET\n+#define RS6000_STARTING_FRAME_OFFSET\t\t\t\t\t\\\n+  (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\t\t\\\n+   + RS6000_SAVE_AREA)\n \n #undef STACK_DYNAMIC_OFFSET\n #define STACK_DYNAMIC_OFFSET(FUNDECL)\t\t\t\t\t\\"}, {"sha": "06713ad2b32acddee5936bd46afcff5dde554cde", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1958,6 +1958,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT rs6000_constant_alignment\n+\n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET rs6000_starting_frame_offset\n \f\n \n /* Processor table.  */\n@@ -39497,6 +39500,16 @@ rs6000_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n     return MAX (align, BITS_PER_WORD);\n   return align;\n }\n+\n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+rs6000_starting_frame_offset (void)\n+{\n+  if (FRAME_GROWS_DOWNWARD)\n+    return 0;\n+  return RS6000_STARTING_FRAME_OFFSET;\n+}\n \f\n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "198110485c893251d90b33b1f780e6eff347dd60", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1550,15 +1550,13 @@ extern enum reg_class rs6000_constraints[RS6000_CONSTRAINT_MAX];\n    sizes of the fixed area and the parameter area must be a multiple of\n    STACK_BOUNDARY.  */\n \n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\t\\\n-   : (cfun->calls_alloca\t\t\t\t\t\t\\\n-      ? (RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA,\t\\\n-\t\t       (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8 ))\t\\\n-      : (RS6000_ALIGN (crtl->outgoing_args_size,\t\t\t\\\n-\t\t       (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8)\t\t\\\n-\t + RS6000_SAVE_AREA)))\n+#define RS6000_STARTING_FRAME_OFFSET\t\t\t\t\t\\\n+  (cfun->calls_alloca\t\t\t\t\t\t\t\\\n+   ? (RS6000_ALIGN (crtl->outgoing_args_size + RS6000_SAVE_AREA,\t\\\n+\t\t    (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8 ))\t\t\\\n+   : (RS6000_ALIGN (crtl->outgoing_args_size,\t\t\t\t\\\n+\t\t    (TARGET_ALTIVEC || TARGET_VSX) ? 16 : 8)\t\t\\\n+      + RS6000_SAVE_AREA))\n \n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'."}, {"sha": "850033c1ee75e557d50788b4ce3cbc1efe82b2bc", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -169,7 +169,6 @@\n #define HAS_LONG_UNCOND_BRANCH\t\t0\n \n #define MOVE_MAX \t\t\t4\n-#define STARTING_FRAME_OFFSET\t\t0\n \n #define HAVE_PRE_DECREMENT\t\t1\n #define HAVE_POST_INCREMENT\t\t1"}, {"sha": "15d33906023603e1a4d30a5e9697aa78a167534a", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -590,9 +590,6 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n /* Offset from stack-pointer to first location of outgoing args.  */\n #define STACK_POINTER_OFFSET (TARGET_64BIT ? 160 : 96)\n \n-/* Offset within stack frame to start allocating local variables at.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'.  */\n #define STACK_DYNAMIC_OFFSET(FUNDECL) \\"}, {"sha": "f5d80da1451745e990461f5794c360878df62db2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1109,10 +1109,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n     are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset from the frame pointer to the first local variable slot to\n-   be allocated.  */\n-#define STARTING_FRAME_OFFSET  0\n-\n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.  */\n /* Don't define PUSH_ROUNDING, since the hardware doesn't do this."}, {"sha": "a9945e2b13bd62b19daf688c8bf4d3f5eab3f0c2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -5276,8 +5276,9 @@ sparc_compute_frame_size (HOST_WIDE_INT size, int leaf_function)\n     frame_size = apparent_frame_size = 0;\n   else\n     {\n-      /* We subtract STARTING_FRAME_OFFSET, remember it's negative.  */\n-      apparent_frame_size = ROUND_UP (size - STARTING_FRAME_OFFSET, 8);\n+      /* We subtract TARGET_STARTING_FRAME_OFFSET, remember it's negative.  */\n+      apparent_frame_size\n+\t= ROUND_UP (size - targetm.starting_frame_offset (), 8);\n       apparent_frame_size += n_global_fp_regs * 4;\n \n       /* We need to add the size of the outgoing argument area.  */"}, {"sha": "a0b56126fd51fe4eedd6677cbac744fb0d443340", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1043,12 +1043,6 @@ extern char leaf_reg_remap[];\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset of first parameter from the argument pointer register value.\n    !v9: This is 64 for the ins and locals, plus 4 for the struct-return reg\n    even if this function isn't going to use it."}, {"sha": "cf99b88b6acf29c438311db4e412aa7b35090e88", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -222,8 +222,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET (0)\n-\n #define STACK_POINTER_OFFSET 32\n \n #define FIRST_PARM_OFFSET(FNDECL) (0)"}, {"sha": "3f8a53551757c7a6d00071efde7ba0d302c9d274", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -216,8 +216,6 @@ enum reg_class\n \n #define ARGS_GROW_DOWNWARD 1\n \n-#define STARTING_FRAME_OFFSET 0\n-\n #define FIRST_PARM_OFFSET(FUNDECL) 0\n \n #define RETURN_ADDR_RTX(COUNT, FRAMEADDR)\t\\"}, {"sha": "ea3c1b308c723b2ce0ebeb669c2aee12c65f7829", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -242,7 +242,6 @@ enum reg_class\n \n #define STACK_GROWS_DOWNWARD 1\n #define FRAME_GROWS_DOWNWARD 1\n-#define STARTING_FRAME_OFFSET 0\n \n #define DYNAMIC_CHAIN_ADDRESS(FRAME) \\\n   plus_constant (Pmode, (FRAME), UNITS_PER_WORD)"}, {"sha": "3aa6dc8cd677fba2ba677a64c2b97358562a1fc2", "filename": "gcc/config/tilepro/tilepro.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -205,7 +205,6 @@ enum reg_class\n \n #define STACK_GROWS_DOWNWARD 1\n #define FRAME_GROWS_DOWNWARD 1\n-#define STARTING_FRAME_OFFSET 0\n \n #define DYNAMIC_CHAIN_ADDRESS(FRAME) \\\n   plus_constant (Pmode, (FRAME), UNITS_PER_WORD)"}, {"sha": "5eb2e8828fa187e13f1fe6a551106ed6c60860d2", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -398,13 +398,6 @@ enum reg_class\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Offset of first parameter from the argument pointer register value.  */\n /* Is equal to the size of the saved fp + pc, even if an fp isn't\n    saved since the value is used before we know.  */"}, {"sha": "e699c12943c8accee4b477b332fae95bb1370c4e", "filename": "gcc/config/vax/elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvax%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvax%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Felf.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -66,10 +66,6 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t      16))\n \n \n-/* Reserve the top of the stack for exception handler stackadj value.  */\n-#undef STARTING_FRAME_OFFSET\n-#define STARTING_FRAME_OFFSET -4\n-\n /* The VAX wants no space between the case instruction and the jump table.  */\n #undef  ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE)"}, {"sha": "82f13da1c994741aca94748035546fbc15f36f29", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -62,6 +62,7 @@ static void vax_asm_trampoline_template (FILE *);\n static void vax_trampoline_init (rtx, tree, rtx);\n static int vax_return_pops_args (tree, tree, int);\n static bool vax_mode_dependent_address_p (const_rtx, addr_space_t);\n+static HOST_WIDE_INT vax_starting_frame_offset (void);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -120,6 +121,9 @@ static bool vax_mode_dependent_address_p (const_rtx, addr_space_t);\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE vax_option_override\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET vax_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set global variables as needed for the options enabled.  */\n@@ -208,7 +212,7 @@ vax_expand_prologue (void)\n \n   /* Allocate the local stack frame.  */\n   size = get_frame_size ();\n-  size -= STARTING_FRAME_OFFSET;\n+  size -= vax_starting_frame_offset ();\n   emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t stack_pointer_rtx, GEN_INT (-size)));\n \n@@ -2179,3 +2183,12 @@ vax_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n \t   ? (GET_MODE_SIZE (mode) + 3) & ~3\n \t   : (int_size_in_bytes (type) + 3) & ~3);\n }\n+\n+static HOST_WIDE_INT\n+vax_starting_frame_offset (void)\n+{\n+  /* On ELF targets, reserve the top of the stack for exception handler\n+     stackadj value.  */\n+  return TARGET_ELF ? -4 : 0;\n+}\n+"}, {"sha": "990140df869337c8e1e3f905c774fbf78a43ca1c", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -228,12 +228,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* Given an rtx for the address of a frame,\n    return an rtx for the address of the word in the frame\n    that holds the dynamic chain--the previous frame's address.  */"}, {"sha": "3b229f1a1e61473773608cd170503152b4b758fe", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -727,17 +727,6 @@ enum reg_class\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* `STARTING_FRAME_OFFSET'\n-\n-   Offset from the frame pointer to the first local variable slot to\n-   be allocated.\n-\n-   If `FRAME_GROWS_DOWNWARD', find the next slot's offset by\n-   subtracting the first slot's length from `STARTING_FRAME_OFFSET'.\n-   Otherwise, it is found by adding the length of the first slot to\n-   the value `STARTING_FRAME_OFFSET'. */\n-#define STARTING_FRAME_OFFSET 0\n-\n /* `FIRST_PARM_OFFSET (FUNDECL)'\n \n    Offset from the argument pointer register to the first argument's"}, {"sha": "1e73b2f4405da25a9766e4271483ca2b9033f159", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -182,6 +182,7 @@ static unsigned int xtensa_hard_regno_nregs (unsigned int, machine_mode);\n static bool xtensa_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool xtensa_modes_tieable_p (machine_mode, machine_mode);\n static HOST_WIDE_INT xtensa_constant_alignment (const_tree, HOST_WIDE_INT);\n+static HOST_WIDE_INT xtensa_starting_frame_offset (void);\n \n \f\n \n@@ -321,6 +322,9 @@ static HOST_WIDE_INT xtensa_constant_alignment (const_tree, HOST_WIDE_INT);\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT xtensa_constant_alignment\n \n+#undef TARGET_STARTING_FRAME_OFFSET\n+#define TARGET_STARTING_FRAME_OFFSET xtensa_starting_frame_offset\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -4399,4 +4403,14 @@ xtensa_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   return align;\n }\n \n+/* Implement TARGET_STARTING_FRAME_OFFSET.  */\n+\n+static HOST_WIDE_INT\n+xtensa_starting_frame_offset (void)\n+{\n+  if (FRAME_GROWS_DOWNWARD)\n+    return 0;\n+  return crtl->outgoing_args_size;\n+}\n+\n #include \"gt-xtensa.h\""}, {"sha": "b4cf53708b3eb4a60846cf24003ae7b82f9aee99", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -432,10 +432,6 @@ enum reg_class\n \n #define FRAME_GROWS_DOWNWARD flag_stack_protect\n \n-/* Offset within stack frame to start allocating local variables at.  */\n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (FRAME_GROWS_DOWNWARD ? 0 : crtl->outgoing_args_size)\n-\n /* The ARG_POINTER and FRAME_POINTER are not real Xtensa registers, so\n    they are eliminated to either the stack pointer or hard frame pointer.  */\n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\"}, {"sha": "7f67685074650c4f18c87f84c27e31e2f6a9702c", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -1786,11 +1786,11 @@ If @code{FRAME_GROWS_DOWNWARD} is defined to a nonzero value, this points\n to immediately above the first variable on the stack.  Otherwise, it points\n to the first variable on the stack.\n \n-@cindex @code{STARTING_FRAME_OFFSET} and virtual registers\n+@cindex @code{TARGET_STARTING_FRAME_OFFSET} and virtual registers\n @cindex @code{FRAME_POINTER_REGNUM} and virtual registers\n @code{VIRTUAL_STACK_VARS_REGNUM} is replaced with the sum of the\n register given by @code{FRAME_POINTER_REGNUM} and the value\n-@code{STARTING_FRAME_OFFSET}.\n+@code{TARGET_STARTING_FRAME_OFFSET}.\n \n @findex VIRTUAL_STACK_DYNAMIC_REGNUM\n @item VIRTUAL_STACK_DYNAMIC_REGNUM"}, {"sha": "8484c1d3602f4eb6a4d219c4028145807f92845b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -2966,22 +2966,19 @@ Define this macro if successive arguments to a function occupy decreasing\n addresses on the stack.\n @end defmac\n \n-@defmac STARTING_FRAME_OFFSET\n-Offset from the frame pointer to the first local variable slot to be allocated.\n-\n-If @code{FRAME_GROWS_DOWNWARD}, find the next slot's offset by\n-subtracting the first slot's length from @code{STARTING_FRAME_OFFSET}.\n-Otherwise, it is found by adding the length of the first slot to the\n-value @code{STARTING_FRAME_OFFSET}.\n-@c i'm not sure if the above is still correct.. had to change it to get\n-@c rid of an overfull.  --mew 2feb93\n-@end defmac\n+@deftypefn {Target Hook} HOST_WIDE_INT TARGET_STARTING_FRAME_OFFSET (void)\n+This hook returns the offset from the frame pointer to the first local\n+variable slot to be allocated.  If @code{FRAME_GROWS_DOWNWARD}, it is the\n+offset to @emph{end} of the first slot allocated, otherwise it is the\n+offset to @emph{beginning} of the first slot allocated.  The default\n+implementation returns 0.\n+@end deftypefn\n \n @defmac STACK_ALIGNMENT_NEEDED\n Define to zero to disable final alignment of the stack during reload.\n The nonzero default for this macro is suitable for most ports.\n \n-On ports where @code{STARTING_FRAME_OFFSET} is nonzero or where there\n+On ports where @code{TARGET_STARTING_FRAME_OFFSET} is nonzero or where there\n is a register save block following the local block that doesn't require\n alignment to @code{STACK_BOUNDARY}, it may be beneficial to disable\n stack alignment and do it in the backend."}, {"sha": "015f59eac2e2fba93cbbe7aedc27b1059e37fbc6", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -2411,22 +2411,13 @@ Define this macro if successive arguments to a function occupy decreasing\n addresses on the stack.\n @end defmac\n \n-@defmac STARTING_FRAME_OFFSET\n-Offset from the frame pointer to the first local variable slot to be allocated.\n-\n-If @code{FRAME_GROWS_DOWNWARD}, find the next slot's offset by\n-subtracting the first slot's length from @code{STARTING_FRAME_OFFSET}.\n-Otherwise, it is found by adding the length of the first slot to the\n-value @code{STARTING_FRAME_OFFSET}.\n-@c i'm not sure if the above is still correct.. had to change it to get\n-@c rid of an overfull.  --mew 2feb93\n-@end defmac\n+@hook TARGET_STARTING_FRAME_OFFSET\n \n @defmac STACK_ALIGNMENT_NEEDED\n Define to zero to disable final alignment of the stack during reload.\n The nonzero default for this macro is suitable for most ports.\n \n-On ports where @code{STARTING_FRAME_OFFSET} is nonzero or where there\n+On ports where @code{TARGET_STARTING_FRAME_OFFSET} is nonzero or where there\n is a register save block following the local block that doesn't require\n alignment to @code{STACK_BOUNDARY}, it may be beneficial to disable\n stack alignment and do it in the backend."}, {"sha": "339419ee1da41b882d89ec790caea168d89f4422", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -294,7 +294,7 @@ try_fit_stack_local (HOST_WIDE_INT start, HOST_WIDE_INT length,\n   /* Calculate how many bytes the start of local variables is off from\n      stack alignment.  */\n   frame_alignment = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n-  frame_off = STARTING_FRAME_OFFSET % frame_alignment;\n+  frame_off = targetm.starting_frame_offset () % frame_alignment;\n   frame_phase = frame_off ? frame_alignment - frame_off : 0;\n \n   /* Round the frame offset to the specified alignment.  */\n@@ -499,7 +499,7 @@ assign_stack_local_1 (machine_mode mode, HOST_WIDE_INT size,\n     addr = plus_constant (Pmode, frame_pointer_rtx,\n \t\t\t  trunc_int_for_mode\n \t\t\t  (slot_offset + bigend_correction\n-\t\t\t   + STARTING_FRAME_OFFSET, Pmode));\n+\t\t\t   + targetm.starting_frame_offset (), Pmode));\n   else\n     addr = plus_constant (Pmode, virtual_stack_vars_rtx,\n \t\t\t  trunc_int_for_mode\n@@ -1930,7 +1930,7 @@ instantiate_virtual_regs (void)\n \n   /* Compute the offsets to use for this function.  */\n   in_arg_offset = FIRST_PARM_OFFSET (current_function_decl);\n-  var_offset = STARTING_FRAME_OFFSET;\n+  var_offset = targetm.starting_frame_offset ();\n   dynamic_offset = STACK_DYNAMIC_OFFSET (current_function_decl);\n   out_arg_offset = STACK_POINTER_OFFSET;\n #ifdef FRAME_POINTER_CFA_OFFSET"}, {"sha": "61ff890b45b36813c55ac4e67efdb8c822488fcb", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -259,6 +259,12 @@ hook_uint_void_0 (void)\n   return 0;\n }\n \n+HOST_WIDE_INT\n+hook_hwi_void_0 (void)\n+{\n+  return 0;\n+}\n+\n void\n hook_void_tree (tree)\n {"}, {"sha": "8dbfd78717f6b7c51d3d2b1b3162b58ed121f31c", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -98,6 +98,8 @@ extern int hook_int_rtx_bool_0 (rtx, bool);\n extern int hook_int_rtx_mode_as_bool_0 (rtx, machine_mode, addr_space_t,\n \t\t\t\t\tbool);\n \n+extern HOST_WIDE_INT hook_hwi_void_0 (void);\n+\n extern tree hook_tree_const_tree_null (const_tree);\n extern tree hook_tree_void_null (void);\n "}, {"sha": "e2ee2feda93b3122e0d650cb6741991fb4aa68da", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -963,7 +963,7 @@ reload (rtx_insn *first, int global)\n \t     then repeat the elimination bookkeeping.  We don't\n \t     realign when there is no stack, as that will cause a\n \t     stack frame when none is needed should\n-\t     STARTING_FRAME_OFFSET not be already aligned to\n+\t     TARGET_STARTING_FRAME_OFFSET not be already aligned to\n \t     STACK_BOUNDARY.  */\n \t  assign_stack_local (BLKmode, 0, crtl->stack_alignment_needed);\n \t}"}, {"sha": "560bfd43c1cfa330c1756de641e5341ebc6003b6", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -551,12 +551,12 @@ rtx_addr_can_trap_p_1 (const_rtx x, HOST_WIDE_INT offset, HOST_WIDE_INT size,\n \t    {\n \t      if (FRAME_GROWS_DOWNWARD)\n \t\t{\n-\t\t  high_bound = STARTING_FRAME_OFFSET;\n+\t\t  high_bound = targetm.starting_frame_offset ();\n \t\t  low_bound  = high_bound - get_frame_size ();\n \t\t}\n \t      else\n \t\t{\n-\t\t  low_bound  = STARTING_FRAME_OFFSET;\n+\t\t  low_bound  = targetm.starting_frame_offset ();\n \t\t  high_bound = low_bound + get_frame_size ();\n \t\t}\n \t    }"}, {"sha": "01bc134d1cca5c97986979fdb43676a5d8cd5748", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -915,7 +915,8 @@ extern void fancy_abort (const char *, int, const char *)\n \tMODES_TIEABLE_P FUNCTION_ARG_PADDING SLOW_UNALIGNED_ACCESS\t\\\n \tHARD_REGNO_NREGS SECONDARY_MEMORY_NEEDED_MODE\t\t\t\\\n \tSECONDARY_MEMORY_NEEDED CANNOT_CHANGE_MODE_CLASS\t\t\\\n-\tTRULY_NOOP_TRUNCATION FUNCTION_ARG_OFFSET CONSTANT_ALIGNMENT\n+\tTRULY_NOOP_TRUNCATION FUNCTION_ARG_OFFSET CONSTANT_ALIGNMENT\t\\\n+\tSTARTING_FRAME_OFFSET\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}, {"sha": "b7dda5b5f2eae899cf35697a79a2de3124e4e3aa", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c3216c53ffaeb21ec76e4491611bb40792b4/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=2a31c3216c53ffaeb21ec76e4491611bb40792b4", "patch": "@@ -5688,6 +5688,16 @@ five otherwise.  This is best for most machines.\",\n  unsigned int, (void),\n  default_case_values_threshold)\n \n+DEFHOOK\n+(starting_frame_offset,\n+ \"This hook returns the offset from the frame pointer to the first local\\n\\\n+variable slot to be allocated.  If @code{FRAME_GROWS_DOWNWARD}, it is the\\n\\\n+offset to @emph{end} of the first slot allocated, otherwise it is the\\n\\\n+offset to @emph{beginning} of the first slot allocated.  The default\\n\\\n+implementation returns 0.\",\n+ HOST_WIDE_INT, (void),\n+ hook_hwi_void_0)\n+\n /* Optional callback to advise the target to compute the frame layout.  */\n DEFHOOK\n (compute_frame_layout,"}]}