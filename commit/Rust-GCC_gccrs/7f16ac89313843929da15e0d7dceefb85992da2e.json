{"sha": "7f16ac89313843929da15e0d7dceefb85992da2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YxNmFjODkzMTM4NDM5MjlkYTE1ZTBkN2RjZWVmYjg1OTkyZGEyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-05-07T22:37:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-05-07T22:37:19Z"}, "message": "PR c++/86485 - -Wmaybe-unused with empty class ?:\n\n\t* typeck.c (build_static_cast_1): Use cp_build_addr_expr.\n\nFor GCC 9 I fixed this bug with a patch to gimplify_cond_expr, but this\nfunction was also doing the wrong thing.\n\nUsing build_address does not push the ADDR_EXPR down into the arms of a\nCOND_EXPR, which we need for proper handling of conversion of an lvalue ?:\nto another reference type.\n\nFrom-SVN: r270985", "tree": {"sha": "82869efd8838e8b1221be15780bb40bded03e106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82869efd8838e8b1221be15780bb40bded03e106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f16ac89313843929da15e0d7dceefb85992da2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f16ac89313843929da15e0d7dceefb85992da2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f16ac89313843929da15e0d7dceefb85992da2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f16ac89313843929da15e0d7dceefb85992da2e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "258195f165f69c31c953716ece6e0922b651cd5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258195f165f69c31c953716ece6e0922b651cd5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258195f165f69c31c953716ece6e0922b651cd5b"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "d90cc099767d3708701f0d4263c57d4cf637472a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f16ac89313843929da15e0d7dceefb85992da2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f16ac89313843929da15e0d7dceefb85992da2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f16ac89313843929da15e0d7dceefb85992da2e", "patch": "@@ -1,5 +1,8 @@\n 2019-05-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/86485 - -Wmaybe-unused with empty class ?:\n+\t* typeck.c (build_static_cast_1): Use cp_build_addr_expr.\n+\n \t* pt.c (type_dependent_expression_p): A non-type template parm with\n \ta placeholder type is type-dependent.\n "}, {"sha": "f039a3b3eb0e2d323394f447a2c919b3d274e2fc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f16ac89313843929da15e0d7dceefb85992da2e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f16ac89313843929da15e0d7dceefb85992da2e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7f16ac89313843929da15e0d7dceefb85992da2e", "patch": "@@ -5916,7 +5916,8 @@ condition_conversion (tree expr)\n }\n \n /* Returns the address of T.  This function will fold away\n-   ADDR_EXPR of INDIRECT_REF.  */\n+   ADDR_EXPR of INDIRECT_REF.  This is only for low-level usage;\n+   most places should use cp_build_addr_expr instead.  */\n \n tree\n build_address (tree t)\n@@ -7114,7 +7115,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       base = lookup_base (TREE_TYPE (type), intype,\n \t\t\t  c_cast_p ? ba_unique : ba_check,\n \t\t\t  NULL, complain);\n-      expr = build_address (expr);\n+      expr = cp_build_addr_expr (expr, complain);\n \n       if (sanitize_flags_p (SANITIZE_VPTR))\n \t{"}]}