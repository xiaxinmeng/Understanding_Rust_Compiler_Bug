{"sha": "64b59a80f755d6ca6b1ab909f2a267c3376803ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiNTlhODBmNzU1ZDZjYTZiMWFiOTA5ZjJhMjY3YzMzNzY4MDNhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-05-02T20:43:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-05-02T20:43:24Z"}, "message": "toplev.c (debug_ignore_block): Return int.\n\n        * toplev.c (debug_ignore_block): Return int.\n        * dwarf2out.c (dwarf2out_ignore_block): Likewise.\n        * toplev.h, dwarf2out.h: Adjust.\n        * emit-rtl.c (remove_unnecessary_notes): Test return value.\n\n        * emit-rtl.c (remove_unnecessary_notes): Fix spelling of \"necessary\".\n        * toplev.c, final.c, rtl.h: Adjust.\n\nFrom-SVN: r33616", "tree": {"sha": "a122f23eb74b7af597fd74a1558c5fac6ab9e969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a122f23eb74b7af597fd74a1558c5fac6ab9e969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64b59a80f755d6ca6b1ab909f2a267c3376803ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b59a80f755d6ca6b1ab909f2a267c3376803ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b59a80f755d6ca6b1ab909f2a267c3376803ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b59a80f755d6ca6b1ab909f2a267c3376803ad/comments", "author": null, "committer": null, "parents": [{"sha": "7145d9fe6bb782d384cab328c028507b4f8f435a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7145d9fe6bb782d384cab328c028507b4f8f435a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7145d9fe6bb782d384cab328c028507b4f8f435a"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "83bf4e4ca02c72d59dfa33e063be8a82ef591df3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64b59a80f755d6ca6b1ab909f2a267c3376803ad", "patch": "@@ -1,3 +1,20 @@\n+2000-05-02  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* Makefile.in (WARN_CFLAGS): Add -pedantic -Wno-long-long.\n+\t(LOOSE_CFLAGS): New: CFLAGS without -pedantic and -Wtraditional.\n+\t(GCC_CFLAGS): Use it.\n+\t(LANG_FLAGS_TO_PASS): New: SUBDIR_FLAGS_TO_PASS with LOOSE_CFLAGS.\n+\t* cp/Make-lang.in, java/Make-lang.in, f/Make-lang.in, ch/Make-lang.in,\n+\tobjc/Make-lang.in: Use it.\n+\n+\t* toplev.c (debug_ignore_block): Return int.\n+\t* dwarf2out.c (dwarf2out_ignore_block): Likewise.\n+\t* toplev.h, dwarf2out.h: Adjust.\n+\t* emit-rtl.c (remove_unnecessary_notes): Test return value.\n+\n+\t* emit-rtl.c (remove_unnecessary_notes): Fix spelling of \"necessary\".\n+\t* toplev.c, final.c, rtl.h: Adjust.\n+\n 2000-05-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* aclocal.m4 (gcc_AC_CHECK_PROG_VER): New macro."}, {"sha": "2e1b689496a140d3a3c8ae1bde69e30581cd92b4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=64b59a80f755d6ca6b1ab909f2a267c3376803ad", "patch": "@@ -9598,31 +9598,23 @@ dwarf2out_end_block (blocknum)\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, BLOCK_END_LABEL, blocknum);\n }\n \n-/* We've decided not to emit any debugging information for BLOCK; make\n-   sure that we don't end up with orphans as a result.  */\n+/* Returns nonzero if it is appropriate not to emit any debugging\n+   information for BLOCK, because it doesn't contain any instructions.\n \n-void\n+   Don't allow this for blocks with nested functions or local classes\n+   as we would end up with orphans, and in the presence of scheduling\n+   we may end up calling them anyway.  */\n+\n+int\n dwarf2out_ignore_block (block)\n      tree block;\n {\n   tree decl;\n   for (decl = BLOCK_VARS (block); decl; decl = TREE_CHAIN (decl))\n-    {\n-      dw_die_ref die;\n-\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tdie = lookup_decl_die (decl);\n-      else if (TREE_CODE (decl) == TYPE_DECL && TYPE_DECL_IS_STUB (decl))\n-\tdie = lookup_type_die (TREE_TYPE (decl));\n-      else\n-\tdie = NULL;\n-\n-      /* Just give them a dummy value for parent so dwarf2out_finish\n-\t doesn't blow up; we would use add_child_die if we really\n-\t wanted to add them to comp_unit_die's children.  */\n-      if (die && die->die_parent == 0)\n-\tdie->die_parent = comp_unit_die;\n-    }\n+    if (TREE_CODE (decl) == FUNCTION_DECL\n+\t|| (TREE_CODE (decl) == TYPE_DECL && TYPE_DECL_IS_STUB (decl)))\n+      return 0;\n+  return 1;\n }\n \n /* Output a marker (i.e. a label) at a point in the assembly code which"}, {"sha": "0b6d1b22de0be2949eb765e0d6c698ee39e5cdbb", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=64b59a80f755d6ca6b1ab909f2a267c3376803ad", "patch": "@@ -28,7 +28,7 @@ extern void dwarf2out_end_source_file \tPARAMS ((void));\n \n extern void dwarf2out_begin_block\tPARAMS ((unsigned));\n extern void dwarf2out_end_block\t\tPARAMS ((unsigned));\n-extern void dwarf2out_ignore_block\tPARAMS ((tree));\n+extern int dwarf2out_ignore_block\tPARAMS ((tree));\n extern void dwarf2out_label\t\tPARAMS ((rtx));\t\t\t\n extern void dwarf2out_decl\t\tPARAMS ((tree));\t\n extern void dwarf2out_line\t\tPARAMS ((const char *, unsigned));"}, {"sha": "7ac0e8c2b3032604d20d0c39083cc7df1823a0c6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=64b59a80f755d6ca6b1ab909f2a267c3376803ad", "patch": "@@ -2751,10 +2751,10 @@ reorder_insns_with_line_notes (from, to, after)\n \t\t\t  to);\n }\n \n-/* Remove unncessary notes from the instruction stream.  */\n+/* Remove unnecessary notes from the instruction stream.  */\n \n void\n-remove_unncessary_notes ()\n+remove_unnecessary_notes ()\n {\n   rtx insn;\n   rtx next;\n@@ -2810,13 +2810,8 @@ remove_unncessary_notes ()\n \t\t  if (NOTE_BLOCK (prev) != NOTE_BLOCK (insn))\n \t\t    abort ();\n \n-\t\t  /* Never delete the BLOCK for the outermost scope\n-\t\t     of the function; we can refer to names from\n-\t\t     that scope even if the block notes are messed up.  */\n-\t\t  if (! is_body_block (NOTE_BLOCK (insn)))\n+\t\t  if (debug_ignore_block (NOTE_BLOCK (insn)))\n \t\t    {\n-\t\t      debug_ignore_block (NOTE_BLOCK (insn));\n-\n \t\t      remove_insn (prev);\n \t\t      remove_insn (insn);\n \t\t    }"}, {"sha": "1a3549715a94846e89cd014a45bd6340f7528001", "filename": "gcc/toplev.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=64b59a80f755d6ca6b1ab909f2a267c3376803ad", "patch": "@@ -2598,7 +2598,7 @@ rest_of_compilation (decl)\n   /* Then remove any notes we don't need.  That will make iterating\n      over the instruction sequence faster, and allow the garbage\n      collector to reclaim the memory used by the notes.  */\n-  remove_unncessary_notes ();\n+  remove_unnecessary_notes ();\n \n   /* In function-at-a-time mode, we do not attempt to keep the BLOCK\n      tree in sensible shape.  So, we just recalculate it here.  */\n@@ -4924,16 +4924,26 @@ debug_undef (lineno, buffer)\n #endif /* DWARF2_DEBUGGING_INFO */\n }\n \n-/* Tell the debugging backend that we've decided not to emit any\n-   debugging information for BLOCK, so it can clean up after any local\n-   classes or nested functions.  */\n+/* Returns nonzero if it is appropriate not to emit any debugging\n+   information for BLOCK, because it doesn't contain any instructions.\n+   This may not be the case for blocks containing nested functions, since\n+   we may actually call such a function even though the BLOCK information\n+   is messed up.  */\n \n-void\n+int\n debug_ignore_block (block)\n      tree block ATTRIBUTE_UNUSED;\n {\n+  /* Never delete the BLOCK for the outermost scope\n+     of the function; we can refer to names from\n+     that scope even if the block notes are messed up.  */\n+  if (is_body_block (block))\n+    return 0;\n+\n #ifdef DWARF2_DEBUGGING_INFO\n   if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_ignore_block (block);\n+    return dwarf2out_ignore_block (block);\n #endif\n+\n+  return 1;\n }"}, {"sha": "83795329e2e793684c9b04b42f6cc79fede83812", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b59a80f755d6ca6b1ab909f2a267c3376803ad/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=64b59a80f755d6ca6b1ab909f2a267c3376803ad", "patch": "@@ -35,7 +35,7 @@ extern void debug_start_source_file\tPARAMS ((char *));\n extern void debug_end_source_file\tPARAMS ((unsigned));\n extern void debug_define\t\tPARAMS ((unsigned, char *));\n extern void debug_undef\t\t\tPARAMS ((unsigned, char *));\n-extern void debug_ignore_block\t\tPARAMS ((union tree_node *));\n+extern int debug_ignore_block\t\tPARAMS ((union tree_node *));\n extern void fatal\t\t\tPARAMS ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void fatal_io_error\t\tPARAMS ((const char *))"}]}