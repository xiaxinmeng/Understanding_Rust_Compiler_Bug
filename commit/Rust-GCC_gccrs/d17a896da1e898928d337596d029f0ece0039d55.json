{"sha": "d17a896da1e898928d337596d029f0ece0039d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3YTg5NmRhMWU4OTg5MjhkMzM3NTk2ZDAyOWYwZWNlMDAzOWQ1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-12T08:01:10Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-12T08:01:10Z"}, "message": "tree: Add vector_element_bits(_tree) [PR94980 1/3]\n\nA lot of code that wants to know the number of bits in a vector\nelement gets that information from the element's TYPE_SIZE,\nwhich is always equal to TYPE_SIZE_UNIT * BITS_PER_UNIT.\nThis doesn't work for SVE and AVX512-style packed boolean vectors,\nwhere several elements can occupy a single byte.\n\nThis patch introduces a new pair of helpers for getting the true\n(possibly sub-byte) size.  I made a token attempt to convert obvious\nelement size calculations, but I'm sure I missed some.\n\n2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/94980\n\t* tree.h (vector_element_bits, vector_element_bits_tree): Declare.\n\t* tree.c (vector_element_bits, vector_element_bits_tree): New.\n\t* match.pd: Use the new functions instead of determining the\n\tvector element size directly from TYPE_SIZE(_UNIT).\n\t* tree-vect-data-refs.c (vect_gather_scatter_fn_p): Likewise.\n\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Likewise.\n\t* tree-vect-stmts.c (vect_is_simple_cond): Likewise.\n\t* tree-vect-generic.c (expand_vector_piecewise): Likewise.\n\t(expand_vector_conversion): Likewise.\n\t(expand_vector_addition): Likewise for a TYPE_SIZE_UNIT used as\n\ta divisor.  Convert the dividend to bits to compensate.\n\t* tree-vect-loop.c (vectorizable_live_operation): Call\n\tvector_element_bits instead of open-coding it.", "tree": {"sha": "3907710b0485fb8de89e9de33bb6d452c88a60d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3907710b0485fb8de89e9de33bb6d452c88a60d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d17a896da1e898928d337596d029f0ece0039d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17a896da1e898928d337596d029f0ece0039d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17a896da1e898928d337596d029f0ece0039d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17a896da1e898928d337596d029f0ece0039d55/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc703151d4f4560e647649506d5b4ceb0ee11e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc703151d4f4560e647649506d5b4ceb0ee11e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc703151d4f4560e647649506d5b4ceb0ee11e90"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "203cb61c6827573781ec15c26a8eafa0f9ea1c31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -1,3 +1,20 @@\n+2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94980\n+\t* tree.h (vector_element_bits, vector_element_bits_tree): Declare.\n+\t* tree.c (vector_element_bits, vector_element_bits_tree): New.\n+\t* match.pd: Use the new functions instead of determining the\n+\tvector element size directly from TYPE_SIZE(_UNIT).\n+\t* tree-vect-data-refs.c (vect_gather_scatter_fn_p): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Likewise.\n+\t* tree-vect-stmts.c (vect_is_simple_cond): Likewise.\n+\t* tree-vect-generic.c (expand_vector_piecewise): Likewise.\n+\t(expand_vector_conversion): Likewise.\n+\t(expand_vector_addition): Likewise for a TYPE_SIZE_UNIT used as\n+\ta divisor.  Convert the dividend to bits to compensate.\n+\t* tree-vect-loop.c (vectorizable_live_operation): Call\n+\tvector_element_bits instead of open-coding it.\n+\n 2020-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-offload.h (omp_discover_implicit_declare_target): Declare."}, {"sha": "33ee1a920bf4a036cc5fdb3c96b38b52765bdefb", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -6306,7 +6306,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       }\n       (if (ins)\n        (bit_insert { op0; } { ins; }\n-         { bitsize_int (at * tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)))); })\n+         { bitsize_int (at * vector_element_bits (type)); })\n        (if (changed)\n         (vec_perm { op0; } { op1; } { op2; }))))))))))\n "}, {"sha": "b950aa9e50d1b5be71d48480b17f85522736051f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -3693,7 +3693,7 @@ vect_gather_scatter_fn_p (vec_info *vinfo, bool read_p, bool masked_p,\n \t\t\t  tree *offset_vectype_out)\n {\n   unsigned int memory_bits = tree_to_uhwi (TYPE_SIZE (memory_type));\n-  unsigned int element_bits = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (vectype)));\n+  unsigned int element_bits = vector_element_bits (vectype);\n   if (element_bits != memory_bits)\n     /* For now the vector elements must be the same width as the\n        memory elements.  */"}, {"sha": "126e906e0a91406047264b992aeab4effe3e38c5", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -276,8 +276,7 @@ expand_vector_piecewise (gimple_stmt_iterator *gsi, elem_op_func f,\n   tree part_width = TYPE_SIZE (inner_type);\n   tree index = bitsize_int (0);\n   int nunits = nunits_for_known_piecewise_op (type);\n-  int delta = tree_to_uhwi (part_width)\n-\t      / tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n+  int delta = tree_to_uhwi (part_width) / vector_element_bits (type);\n   int i;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n \n@@ -357,8 +356,7 @@ expand_vector_addition (gimple_stmt_iterator *gsi,\n \t\t\telem_op_func f, elem_op_func f_parallel,\n \t\t\ttree type, tree a, tree b, enum tree_code code)\n {\n-  int parts_per_word = UNITS_PER_WORD\n-\t  \t       / tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (type)));\n+  int parts_per_word = BITS_PER_WORD / vector_element_bits (type);\n \n   if (INTEGRAL_TYPE_P (TREE_TYPE (type))\n       && parts_per_word >= 4\n@@ -1727,19 +1725,17 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n   optab optab1 = unknown_optab;\n \n   gcc_checking_assert (VECTOR_TYPE_P (ret_type) && VECTOR_TYPE_P (arg_type));\n-  gcc_checking_assert (tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (ret_type))));\n-  gcc_checking_assert (tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (arg_type))));\n   if (INTEGRAL_TYPE_P (TREE_TYPE (ret_type))\n       && SCALAR_FLOAT_TYPE_P (TREE_TYPE (arg_type)))\n     code = FIX_TRUNC_EXPR;\n   else if (INTEGRAL_TYPE_P (TREE_TYPE (arg_type))\n \t   && SCALAR_FLOAT_TYPE_P (TREE_TYPE (ret_type)))\n     code = FLOAT_EXPR;\n-  if (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (ret_type)))\n-      < tree_to_uhwi (TYPE_SIZE (TREE_TYPE (arg_type))))\n+  unsigned int ret_elt_bits = vector_element_bits (ret_type);\n+  unsigned int arg_elt_bits = vector_element_bits (arg_type);\n+  if (ret_elt_bits < arg_elt_bits)\n     modifier = NARROW;\n-  else if (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (ret_type)))\n-\t   > tree_to_uhwi (TYPE_SIZE (TREE_TYPE (arg_type))))\n+  else if (ret_elt_bits > arg_elt_bits)\n     modifier = WIDEN;\n \n   if (modifier == NONE && (code == FIX_TRUNC_EXPR || code == FLOAT_EXPR))\n@@ -1902,8 +1898,7 @@ expand_vector_conversion (gimple_stmt_iterator *gsi)\n \t      tree part_width = TYPE_SIZE (compute_type);\n \t      tree index = bitsize_int (0);\n \t      int nunits = nunits_for_known_piecewise_op (arg_type);\n-\t      int delta = tree_to_uhwi (part_width)\n-\t\t\t  / tree_to_uhwi (TYPE_SIZE (TREE_TYPE (arg_type)));\n+\t      int delta = tree_to_uhwi (part_width) / arg_elt_bits;\n \t      int i;\n \t      location_t loc = gimple_location (gsi_stmt (*gsi));\n "}, {"sha": "180790abf421ceffe5af9a53f4847e37ba776b6f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -8017,9 +8017,7 @@ vectorizable_live_operation (loop_vec_info loop_vinfo,\n \t: gimple_get_lhs (stmt);\n   lhs_type = TREE_TYPE (lhs);\n \n-  bitsize = (VECTOR_BOOLEAN_TYPE_P (vectype)\n-\t     ? bitsize_int (TYPE_PRECISION (TREE_TYPE (vectype)))\n-\t     : TYPE_SIZE (TREE_TYPE (vectype)));\n+  bitsize = vector_element_bits_tree (vectype);\n   vec_bitsize = TYPE_SIZE (vectype);\n \n   /* Get the vectorized lhs of STMT and the lane to use (counted in bits).  */"}, {"sha": "a1fd67341d770de99f388289c4eacbdf3b399380", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -4381,8 +4381,7 @@ vect_recog_mask_conversion_pattern (vec_info *vinfo,\n \t\t  || dt == vect_constant_def))\n \t    {\n \t      tree wide_scalar_type = build_nonstandard_integer_type\n-\t\t(tree_to_uhwi (TYPE_SIZE (TREE_TYPE (vectype1))),\n-\t\t TYPE_UNSIGNED (rhs1_type));\n+\t\t(vector_element_bits (vectype1), TYPE_UNSIGNED (rhs1_type));\n \t      tree vectype3 = get_vectype_for_scalar_type (vinfo,\n \t\t\t\t\t\t\t   wide_scalar_type);\n \t      if (expand_vec_cond_expr_p (vectype1, vectype3, TREE_CODE (rhs1)))"}, {"sha": "9a715b82f1acb54e6df768fb3c94c06973e3e2d2", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -10041,8 +10041,7 @@ vect_is_simple_cond (tree cond, vec_info *vinfo, slp_tree slp_node,\n \t      && tree_int_cst_lt (TYPE_SIZE (scalar_type),\n \t\t\t\t  TYPE_SIZE (TREE_TYPE (vectype))))\n \t    scalar_type = build_nonstandard_integer_type\n-\t      (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (vectype))),\n-\t       TYPE_UNSIGNED (scalar_type));\n+\t      (vector_element_bits (vectype), TYPE_UNSIGNED (scalar_type));\n \t  *comp_vectype = get_vectype_for_scalar_type (vinfo, scalar_type,\n \t\t\t\t\t\t       slp_node);\n \t}"}, {"sha": "1aabffeea433fc690c2610f9ba7978912b840c17", "filename": "gcc/tree.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -13806,6 +13806,30 @@ vector_type_mode (const_tree t)\n   return mode;\n }\n \n+/* Return the size in bits of each element of vector type TYPE.  */\n+\n+unsigned int\n+vector_element_bits (const_tree type)\n+{\n+  gcc_checking_assert (VECTOR_TYPE_P (type));\n+  if (VECTOR_BOOLEAN_TYPE_P (type))\n+    return vector_element_size (tree_to_poly_uint64 (TYPE_SIZE (type)),\n+\t\t\t\tTYPE_VECTOR_SUBPARTS (type));\n+  return tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n+}\n+\n+/* Calculate the size in bits of each element of vector type TYPE\n+   and return the result as a tree of type bitsizetype.  */\n+\n+tree\n+vector_element_bits_tree (const_tree type)\n+{\n+  gcc_checking_assert (VECTOR_TYPE_P (type));\n+  if (VECTOR_BOOLEAN_TYPE_P (type))\n+    return bitsize_int (vector_element_bits (type));\n+  return TYPE_SIZE (TREE_TYPE (type));\n+}\n+\n /* Verify that basic properties of T match TV and thus T can be a variant of\n    TV.  TV should be the more specified variant (i.e. the main variant).  */\n "}, {"sha": "11c109fffcd725a0a539bb1231bdd93f3d74681a", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17a896da1e898928d337596d029f0ece0039d55/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d17a896da1e898928d337596d029f0ece0039d55", "patch": "@@ -1996,6 +1996,8 @@ class auto_suppress_location_wrappers\n \n extern machine_mode element_mode (const_tree);\n extern machine_mode vector_type_mode (const_tree);\n+extern unsigned int vector_element_bits (const_tree);\n+extern tree vector_element_bits_tree (const_tree);\n \n /* The \"canonical\" type for this type node, which is used by frontends to\n    compare the type for equality with another type.  If two types are"}]}