{"sha": "d8c69a9281025fd57590799c70c4d96158b748e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjNjlhOTI4MTAyNWZkNTc1OTA3OTljNzBjNGQ5NjE1OGI3NDhlNg==", "commit": {"author": {"name": "Ian Caulfield", "email": "ian.caulfield@arm.com", "date": "2013-04-02T11:25:50Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2013-04-02T11:25:50Z"}, "message": "Add support for Cortex-A53.\n\n2013-04-02  Ian Caulfield  <ian.caulfield@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* config/arm/arm-arches.def (armv8-a): Default to cortex-a53.\n        * config/arm/t-arm (MD_INCLUDES): Depend on cortex-a53.md.\n        * config/arm/cortex-a53.md: New file.\n        * config/arm/bpabi.h (BE8_LINK_SPEC): Handle cortex-a53.\n        * config/arm/arm.md (generic_sched, generic_vfp): Handle cortex-a53.\n        * config/arm/arm.c (arm_issue_rate): Likewise.\n        * config/arm/arm-tune.md: Regenerate\n        * config/arm/arm-tables.opt: Regenerate.\n        * config/arm/arm-cores.def: Add cortex-a53.\n\nFrom-SVN: r197346", "tree": {"sha": "083ec8aae7efac73a983452d58390bcd4f476450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083ec8aae7efac73a983452d58390bcd4f476450"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8c69a9281025fd57590799c70c4d96158b748e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c69a9281025fd57590799c70c4d96158b748e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c69a9281025fd57590799c70c4d96158b748e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c69a9281025fd57590799c70c4d96158b748e6/comments", "author": null, "committer": null, "parents": [{"sha": "ec905ac03d7823eaa437d1bb881994bfd3338183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec905ac03d7823eaa437d1bb881994bfd3338183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec905ac03d7823eaa437d1bb881994bfd3338183"}], "stats": {"total": 330, "additions": 324, "deletions": 6}, "files": [{"sha": "f7155c0f4af0298b1f3a181aab3373c44ad76c1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -1,12 +1,25 @@\n+2013-04-02  Ian Caulfield  <ian.caulfield@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/arm/arm-arches.def (armv8-a): Default to cortex-a53.\n+        * config/arm/t-arm (MD_INCLUDES): Depend on cortex-a53.md.\n+        * config/arm/cortex-a53.md: New file.\n+        * config/arm/bpabi.h (BE8_LINK_SPEC): Handle cortex-a53.\n+        * config/arm/arm.md (generic_sched, generic_vfp): Handle cortex-a53.\n+        * config/arm/arm.c (arm_issue_rate): Likewise.\n+        * config/arm/arm-tune.md: Regenerate\n+        * config/arm/arm-tables.opt: Regenerate.\n+        * config/arm/arm-cores.def: Add cortex-a53.\n+\n 2013-04-02  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n \t* config/arm/uclinux-elf.h: Add %L to LINK_GCC_C_SEQUENCE_SPEC for\n \tnon-static link.\n \n 2013-04-02  Sofiane Naci  <sofiane.naci@arm.com>\n \n-\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add variants for scalar\n-\tload/store operations using B/H registers.\n+\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add variants for\n+\tscalar load/store operations using B/H registers.\n \t(*zero_extend<SHORT:mode><GPI:mode>2_aarch64): Likewise.\n \n 2013-04-02  Sofiane Naci  <sofiane.naci@arm.com>"}, {"sha": "fcf3401226205d8f411afe5d71d758cbb67e800e", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -53,6 +53,6 @@ ARM_ARCH(\"armv7-a\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7A)\n ARM_ARCH(\"armv7-r\", cortexr4,\t7R,  FL_CO_PROC |\t      FL_FOR_ARCH7R)\n ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)\n-ARM_ARCH(\"armv8-a\", cortexa15,  8A,  FL_CO_PROC |             FL_FOR_ARCH8A)\n+ARM_ARCH(\"armv8-a\", cortexa53,  8A,  FL_CO_PROC |             FL_FOR_ARCH8A)\n ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2)"}, {"sha": "3d59fa6f5a97640570e2a53a347f2d156a347cb6", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -129,6 +129,7 @@ ARM_CORE(\"cortex-a7\",\t  cortexa7,\t7A,\t\t\t\t FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV\n ARM_CORE(\"cortex-a8\",\t  cortexa8,\t7A,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-a9\",\t  cortexa9,\t7A,\t\t\t\t FL_LDSCHED, cortex_a9)\n ARM_CORE(\"cortex-a15\",\t  cortexa15,\t7A,\t\t\t\t FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a15)\n+ARM_CORE(\"cortex-a53\",\t  cortexa53,\t8A,\t\t\t\t FL_LDSCHED, cortex_a5)\n ARM_CORE(\"cortex-r4\",\t  cortexr4,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r4f\",\t  cortexr4f,\t7R,\t\t\t\t FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r5\",\t  cortexr5,\t7R,\t\t\t\t FL_LDSCHED | FL_ARM_DIV, cortex)"}, {"sha": "bf206959569505444960387938948950fe3a3a22", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -249,6 +249,9 @@ Enum(processor_type) String(cortex-a9) Value(cortexa9)\n EnumValue\n Enum(processor_type) String(cortex-a15) Value(cortexa15)\n \n+EnumValue\n+Enum(processor_type) String(cortex-a53) Value(cortexa53)\n+\n EnumValue\n Enum(processor_type) String(cortex-r4) Value(cortexr4)\n "}, {"sha": "e4da0988b22746b5c95f4bb78b34746c24ae9786", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from arm-cores.def\n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,fa526,fa626,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,iwmmxt2,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,arm1156t2fs,genericv7a,cortexa5,cortexa7,cortexa8,cortexa9,cortexa15,cortexr4,cortexr4f,cortexr5,cortexr7,cortexm4,cortexm3,cortexm1,cortexm0,cortexm0plus,marvell_pj4\"\n+\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,fa526,fa626,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,iwmmxt2,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,arm1156t2fs,genericv7a,cortexa5,cortexa7,cortexa8,cortexa9,cortexa15,cortexa53,cortexr4,cortexr4f,cortexr5,cortexr7,cortexm4,cortexm3,cortexm1,cortexm0,cortexm0plus,marvell_pj4\"\n \t(const (symbol_ref \"((enum attr_tune) arm_tune)\")))"}, {"sha": "fe6902f2225c1aad16c1ce84c19b7eb9025f3024", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -25873,6 +25873,7 @@ arm_issue_rate (void)\n     case cortexa7:\n     case cortexa8:\n     case cortexa9:\n+    case cortexa53:\n     case fa726te:\n     case marvell_pj4:\n       return 2;"}, {"sha": "d5fcd505178880f09d8d9dddf478815a65f09206", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -496,15 +496,15 @@\n \n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else\n-          (ior (eq_attr \"tune\" \"fa526,fa626,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa5,cortexa7,cortexa8,cortexa9,cortexa15,cortexm4,marvell_pj4\")\n+          (ior (eq_attr \"tune\" \"fa526,fa626,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa5,cortexa7,cortexa8,cortexa9,cortexa15,cortexa53,cortexm4,marvell_pj4\")\n \t       (eq_attr \"tune_cortexr4\" \"yes\"))\n           (const_string \"no\")\n           (const_string \"yes\"))))\n \n (define_attr \"generic_vfp\" \"yes,no\"\n   (const (if_then_else\n \t  (and (eq_attr \"fpu\" \"vfp\")\n-\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa5,cortexa7,cortexa8,cortexa9,cortexm4,marvell_pj4\")\n+\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa5,cortexa7,cortexa8,cortexa9,cortexa53,cortexm4,marvell_pj4\")\n \t       (eq_attr \"tune_cortexr4\" \"no\"))\n \t  (const_string \"yes\")\n \t  (const_string \"no\"))))\n@@ -525,6 +525,7 @@\n (include \"cortex-a8.md\")\n (include \"cortex-a9.md\")\n (include \"cortex-a15.md\")\n+(include \"cortex-a53.md\")\n (include \"cortex-r4.md\")\n (include \"cortex-r4f.md\")\n (include \"cortex-m4.md\")"}, {"sha": "8e6683b3b235a7997204d6254d2dcab409574af7", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -60,6 +60,7 @@\n    |mcpu=cortex-a7                                      \\\n    |mcpu=cortex-a8|mcpu=cortex-a9|mcpu=cortex-a15       \\\n    |mcpu=marvell-pj4\t\t\t\t\t\\\n+   |mcpu=cortex-a53\t\t\t\t\t\\\n    |mcpu=generic-armv7-a                                \\\n    |march=armv7-m|mcpu=cortex-m3                        \\\n    |march=armv7e-m|mcpu=cortex-m4                       \\\n@@ -71,6 +72,7 @@\n   \" %{mbig-endian:%{march=armv7-a|mcpu=cortex-a5        \\\n    |mcpu=cortex-a7                                      \\\n    |mcpu=cortex-a8|mcpu=cortex-a9|mcpu=cortex-a15       \\\n+   |mcpu=cortex-a53\t\t\t\t\t\\\n    |mcpu=marvell-pj4\t\t\t\t\t\\\n    |mcpu=generic-armv7-a                                \\\n    |march=armv7-m|mcpu=cortex-m3                        \\"}, {"sha": "b6a291e017b4853182167c3ae77d4849d635dc17", "filename": "gcc/config/arm/cortex-a53.md", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -0,0 +1,296 @@\n+;; ARM Cortex-A53 pipeline description\n+;; Copyright (C) 2013 Free Software Foundation, Inc.\n+;;\n+;; Contributed by ARM Ltd.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"cortex_a53\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Functional units.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; There are two main integer execution pipelines, described as\n+;; slot 0 and issue slot 1.\n+\n+(define_cpu_unit \"cortex_a53_slot0\" \"cortex_a53\")\n+(define_cpu_unit \"cortex_a53_slot1\" \"cortex_a53\")\n+\n+(define_reservation \"cortex_a53_slot_any\" \"cortex_a53_slot0|cortex_a53_slot1\")\n+(define_reservation \"cortex_a53_single_issue\" \"cortex_a53_slot0+cortex_a53_slot1\")\n+\n+;; The load/store pipeline.  Load/store instructions can dual-issue from\n+;; either pipeline, but two load/stores cannot simultaneously issue.\n+\n+(define_cpu_unit \"cortex_a53_ls\" \"cortex_a53\")\n+\n+;; The store pipeline.  Shared between both execution pipelines.\n+\n+(define_cpu_unit \"cortex_a53_store\" \"cortex_a53\")\n+\n+;; The branch pipeline.  Branches can dual-issue with other instructions\n+;; (except when those instructions take multiple cycles to issue).\n+\n+(define_cpu_unit \"cortex_a53_branch\" \"cortex_a53\")\n+\n+;; The integer divider.\n+\n+(define_cpu_unit \"cortex_a53_idiv\" \"cortex_a53\")\n+\n+;; The floating-point add pipeline used to model the usage\n+;; of the add pipeline by fmac instructions.\n+\n+(define_cpu_unit \"cortex_a53_fpadd_pipe\" \"cortex_a53\")\n+\n+;; Floating-point div/sqrt (long latency, out-of-order completion).\n+\n+(define_cpu_unit \"cortex_a53_fp_div_sqrt\" \"cortex_a53\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; ALU instructions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a53_alu\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+  \"cortex_a53_slot_any\")\n+\n+(define_insn_reservation \"cortex_a53_alu_shift\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"alu_shift,alu_shift_reg\"))\n+  \"cortex_a53_slot_any\")\n+\n+;; Forwarding path for unshifted operands.\n+\n+(define_bypass 1 \"cortex_a53_alu,cortex_a53_alu_shift\"\n+  \"cortex_a53_alu\")\n+\n+(define_bypass 1 \"cortex_a53_alu,cortex_a53_alu_shift\"\n+  \"cortex_a53_alu_shift\"\n+  \"arm_no_early_alu_shift_dep\")\n+\n+;; The multiplier pipeline can forward results so there's no need to specify\n+;; bypasses. Multiplies can only single-issue currently.\n+\n+(define_insn_reservation \"cortex_a53_mul\" 3\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"mult\"))\n+  \"cortex_a53_single_issue\")\n+\n+;; A multiply with a single-register result or an MLA, followed by an\n+;; MLA with an accumulator dependency, has its result forwarded so two\n+;; such instructions can issue back-to-back.\n+\n+(define_bypass 1 \"cortex_a53_mul\"\n+               \"cortex_a53_mul\"\n+               \"arm_mac_accumulator_is_mul_result\")\n+\n+;; Punt with a high enough latency for divides.\n+(define_insn_reservation \"cortex_a53_udiv\" 8\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"insn\" \"udiv\"))\n+  \"(cortex_a53_slot0+cortex_a53_idiv),cortex_a53_idiv*7\")\n+\n+(define_insn_reservation \"cortex_a53_sdiv\" 9\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"insn\" \"sdiv\"))\n+  \"(cortex_a53_slot0+cortex_a53_idiv),cortex_a53_idiv*8\")\n+\n+\n+(define_bypass 2 \"cortex_a53_mul,cortex_a53_udiv,cortex_a53_sdiv\"\n+               \"cortex_a53_alu\")\n+(define_bypass 2 \"cortex_a53_mul,cortex_a53_udiv,cortex_a53_sdiv\"\n+               \"cortex_a53_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Load/store instructions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; Address-generation happens in the issue stage.\n+\n+(define_insn_reservation \"cortex_a53_load1\" 3\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"load_byte,load1\"))\n+  \"cortex_a53_slot_any+cortex_a53_ls\")\n+\n+(define_insn_reservation \"cortex_a53_store1\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"store1\"))\n+  \"cortex_a53_slot_any+cortex_a53_ls+cortex_a53_store\")\n+\n+(define_insn_reservation \"cortex_a53_load2\" 3\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"load2\"))\n+  \"cortex_a53_single_issue+cortex_a53_ls\")\n+\n+(define_insn_reservation \"cortex_a53_store2\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"store2\"))\n+  \"cortex_a53_single_issue+cortex_a53_ls+cortex_a53_store\")\n+\n+(define_insn_reservation \"cortex_a53_load3plus\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"load3,load4\"))\n+  \"(cortex_a53_single_issue+cortex_a53_ls)*2\")\n+\n+(define_insn_reservation \"cortex_a53_store3plus\" 3\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"store3,store4\"))\n+  \"(cortex_a53_single_issue+cortex_a53_ls+cortex_a53_store)*2\")\n+\n+;; Load/store addresses are required early in Issue.\n+(define_bypass 3 \"cortex_a53_load1,cortex_a53_load2,cortex_a53_load3plus,cortex_a53_alu,cortex_a53_alu_shift\"\n+                 \"cortex_a53_load*\"\n+                 \"arm_early_load_addr_dep\")\n+(define_bypass 3 \"cortex_a53_load1,cortex_a53_load2,cortex_a53_load3plus,cortex_a53_alu,cortex_a53_alu_shift\"\n+                 \"cortex_a53_store*\"\n+                 \"arm_early_store_addr_dep\")\n+\n+;; Load data can forward in the ALU pipeline\n+(define_bypass 2 \"cortex_a53_load1,cortex_a53_load2\"\n+               \"cortex_a53_alu\")\n+(define_bypass 2 \"cortex_a53_load1,cortex_a53_load2\"\n+               \"cortex_a53_alu_shift\"\n+               \"arm_no_early_alu_shift_dep\")\n+\n+;; ALU ops can forward to stores.\n+(define_bypass 0 \"cortex_a53_alu,cortex_a53_alu_shift\"\n+                 \"cortex_a53_store1,cortex_a53_store2,cortex_a53_store3plus\"\n+                 \"arm_no_early_store_addr_dep\")\n+\n+(define_bypass 1 \"cortex_a53_mul,cortex_a53_udiv,cortex_a53_sdiv,cortex_a53_load1,cortex_a53_load2,cortex_a53_load3plus\"\n+                 \"cortex_a53_store1,cortex_a53_store2,cortex_a53_store3plus\"\n+                 \"arm_no_early_store_addr_dep\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Branches.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; Currently models all branches as dual-issuable from either execution\n+;; slot, which isn't true for all cases. We still need to model indirect\n+;; branches.\n+\n+(define_insn_reservation \"cortex_a53_branch\" 0\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"branch,call\"))\n+  \"cortex_a53_slot_any+cortex_a53_branch\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Floating-point arithmetic.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a53_fpalu\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"ffariths, fadds, ffarithd, faddd, fcpys, fmuls, f_cvt,\\\n+\t\t\tfcmps, fcmpd\"))\n+  \"cortex_a53_slot0+cortex_a53_fpadd_pipe\")\n+\n+(define_insn_reservation \"cortex_a53_fconst\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"fconsts,fconstd\"))\n+  \"cortex_a53_slot0+cortex_a53_fpadd_pipe\")\n+\n+(define_insn_reservation \"cortex_a53_fpmul\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"fmuls,fmuld\"))\n+  \"cortex_a53_slot0\")\n+\n+;; For single-precision multiply-accumulate, the add (accumulate) is issued after\n+;; the multiply completes. Model that accordingly.\n+\n+(define_insn_reservation \"cortex_a53_fpmac\" 8\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"fmacs,fmacd,ffmas,ffmad\"))\n+  \"cortex_a53_slot0, nothing*3, cortex_a53_fpadd_pipe\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Floating-point divide/square root instructions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; fsqrt really takes one cycle less, but that is not modelled.\n+\n+(define_insn_reservation \"cortex_a53_fdivs\" 14\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"fdivs\"))\n+  \"cortex_a53_slot0, cortex_a53_fp_div_sqrt * 13\")\n+\n+(define_insn_reservation \"cortex_a53_fdivd\" 29\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"fdivd\"))\n+  \"cortex_a53_slot0, cortex_a53_fp_div_sqrt * 28\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; VFP to/from core transfers.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a53_r2f\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"r_2_f\"))\n+  \"cortex_a53_slot0\")\n+\n+(define_insn_reservation \"cortex_a53_f2r\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"f_2_r\"))\n+  \"cortex_a53_slot0\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; VFP flag transfer.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a53_f_flags\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"f_flag\"))\n+  \"cortex_a53_slot0\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; VFP load/store.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a53_f_loads\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"f_loads\"))\n+  \"cortex_a53_slot0\")\n+\n+(define_insn_reservation \"cortex_a53_f_loadd\" 5\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"f_loadd\"))\n+  \"cortex_a53_slot0\")\n+\n+(define_insn_reservation \"cortex_a53_f_stores\" 0\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"f_stores\"))\n+  \"cortex_a53_slot0\")\n+\n+(define_insn_reservation \"cortex_a53_f_stored\" 0\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"f_stored\"))\n+  \"cortex_a53_slot0\")\n+\n+;; Load-to-use for floating-point values has a penalty of one cycle,\n+;; i.e. a latency of two.\n+\n+(define_bypass 2 \"cortex_a53_f_loads\"\n+                 \"cortex_a53_fpalu, cortex_a53_fpmac, cortex_a53_fpmul,\\\n+\t\t  cortex_a53_fdivs, cortex_a53_fdivd,\\\n+\t\t  cortex_a53_f2r\")\n+\n+(define_bypass 2 \"cortex_a53_f_loadd\"\n+                 \"cortex_a53_fpalu, cortex_a53_fpmac, cortex_a53_fpmul,\\\n+\t\t  cortex_a53_fdivs, cortex_a53_fdivd,\\\n+\t\t  cortex_a53_f2r\")\n+"}, {"sha": "79d8e74a18214f09ea1cfac678419f66cfee208b", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c69a9281025fd57590799c70c4d96158b748e6/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=d8c69a9281025fd57590799c70c4d96158b748e6", "patch": "@@ -39,6 +39,7 @@ MD_INCLUDES=\t$(srcdir)/config/arm/arm1020e.md \\\n \t\t$(srcdir)/config/arm/cortex-a8-neon.md \\\n \t\t$(srcdir)/config/arm/cortex-a9.md \\\n \t\t$(srcdir)/config/arm/cortex-a9-neon.md \\\n+\t\t$(srcdir)/config/arm/cortex-a53.md \\\n \t\t$(srcdir)/config/arm/cortex-m4-fpu.md \\\n \t\t$(srcdir)/config/arm/cortex-m4.md \\\n \t\t$(srcdir)/config/arm/cortex-r4f.md \\"}]}