{"sha": "0a7ed33c8703824a9f97178adc8c4f58352d2008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3ZWQzM2M4NzAzODI0YTlmOTcxNzhhZGM4YzRmNTgzNTJkMjAwOA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@ohara.Informatik.RWTH-Aachen.DE", "date": "1998-02-17T22:28:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-17T22:28:23Z"}, "message": "c-common.c (c_expand_start_cond, [...]): Don't warn about non-ambiguous else even if braces are missing.\n\n        * c-common.c (c_expand_start_cond, c_expand_end_cond,\n        c_expand_start_else): Don't warn about non-ambiguous else even if\n        braces are missing.\n\nFrom-SVN: r18055", "tree": {"sha": "96ef0bc1cd98f70349e49e4dcd65015b09dcdf06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96ef0bc1cd98f70349e49e4dcd65015b09dcdf06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7ed33c8703824a9f97178adc8c4f58352d2008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7ed33c8703824a9f97178adc8c4f58352d2008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7ed33c8703824a9f97178adc8c4f58352d2008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7ed33c8703824a9f97178adc8c4f58352d2008/comments", "author": null, "committer": null, "parents": [{"sha": "68c9728ad10128144f322871296f6c818898059b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9728ad10128144f322871296f6c818898059b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c9728ad10128144f322871296f6c818898059b"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "6955687c21a40e4e780354d9c82443f9310c8a3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7ed33c8703824a9f97178adc8c4f58352d2008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7ed33c8703824a9f97178adc8c4f58352d2008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a7ed33c8703824a9f97178adc8c4f58352d2008", "patch": "@@ -1,4 +1,11 @@\n+Tue Feb 17 23:30:20 1998 Bernd Schmidt <crux@ohara.Informatik.RWTH-Aachen.DE>\n+\n+\t* c-common.c (c_expand_start_cond, c_expand_end_cond,\n+\tc_expand_start_else): Don't warn about non-ambiguous else even if\n+\tbraces are missing.\n+\n Tue Feb 17 23:56:50 1998   Robert Lipe  <robertl@dgii.com>\n+\n         * sco5.h (ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT,\n         ASM_OUTPUT_LONG_DOUBLE): Delete.   Use the ones from i386.h\n         instead."}, {"sha": "0feb611b6663f56a7cf8ee95e10bf66bceb08466", "filename": "gcc/c-common.c", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7ed33c8703824a9f97178adc8c4f58352d2008/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7ed33c8703824a9f97178adc8c4f58352d2008/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0a7ed33c8703824a9f97178adc8c4f58352d2008", "patch": "@@ -64,16 +64,30 @@ static void add_attribute\t\tPROTO((enum attrs, char *,\n static void init_attributes\t\tPROTO((void));\n static void record_international_format\tPROTO((tree, tree, int));\n \n-/* Keep a stack of if statements.  The value recorded is the number of\n-   compound statements seen up to the if keyword.  */\n-static int *if_stack;\n+/* Keep a stack of if statements.  We record the number of compound\n+   statements seen up to the if keyword, as well as the line number\n+   and file of the if.  If a potentially ambiguous else is seen, that\n+   fact is recorded; the warning is issued when we can be sure that\n+   the enclosing if statement does not have an else branch.  */\n+typedef struct\n+{\n+  int compstmt_count;\n+  int line;\n+  char *file;\n+  int needs_warning;\n+} if_elt;\n+\n+static if_elt *if_stack;\n \n /* Amount of space in the if statement stack.  */\n static int if_stack_space = 0;\n \n /* Stack pointer.  */\n static int if_stack_pointer = 0;\n \n+/* Generate RTL for the start of an if-then, and record the start of it\n+   for ambiguous else detection.  */\n+\n void\n c_expand_start_cond (cond, exitflag, compstmt_count)\n      tree cond;\n@@ -84,37 +98,57 @@ c_expand_start_cond (cond, exitflag, compstmt_count)\n   if (if_stack_space == 0)\n     {\n       if_stack_space = 10;\n-      if_stack = (int *)xmalloc (10 * sizeof (int));\n+      if_stack = (if_elt *)xmalloc (10 * sizeof (if_elt));\n     }\n   else if (if_stack_space == if_stack_pointer)\n     {\n       if_stack_space += 10;\n-      if_stack = (int *)xrealloc (if_stack, if_stack_space * sizeof (int));\n+      if_stack = (if_elt *)xrealloc (if_stack, if_stack_space * sizeof (if_elt));\n     }\n-  \n+\n   /* Record this if statement.  */\n-  if_stack[if_stack_pointer++] = compstmt_count;\n+  if_stack[if_stack_pointer].compstmt_count = compstmt_count;\n+  if_stack[if_stack_pointer].file = input_filename;\n+  if_stack[if_stack_pointer].line = lineno;\n+  if_stack[if_stack_pointer].needs_warning = 0;\n+  if_stack_pointer++;\n \n   expand_start_cond (cond, exitflag);\n }\n \n+/* Generate RTL for the end of an if-then.  Optionally warn if a nested\n+   if statement had an ambiguous else clause.  */\n+\n void\n c_expand_end_cond ()\n {\n   if_stack_pointer--;\n+  if (if_stack[if_stack_pointer].needs_warning)\n+    warning_with_file_and_line (if_stack[if_stack_pointer].file,\n+\t\t\t\tif_stack[if_stack_pointer].line,\n+\t\t\t\t\"suggest explicit braces to avoid ambiguous `else'\");\n   expand_end_cond ();\n }\n \n+/* Generate RTL between the then-clause and the else-clause\n+   of an if-then-else.  */\n+\n void\n c_expand_start_else ()\n {\n+  /* An ambiguous else warning must be generated for the enclosing if\n+     statement, unless we see an else branch for that one, too.  */\n   if (warn_parentheses\n       && if_stack_pointer > 1\n-      && if_stack[if_stack_pointer - 1] == if_stack[if_stack_pointer - 2])\n-    warning (\"suggest explicit braces to avoid ambiguous `else'\");\n-  \n-  /* This if statement can no longer cause a dangling else.  */\n-  if_stack[if_stack_pointer - 1]--;\n+      && (if_stack[if_stack_pointer - 1].compstmt_count\n+\t  == if_stack[if_stack_pointer - 2].compstmt_count))\n+    if_stack[if_stack_pointer - 2].needs_warning = 1;\n+\n+  /* Even if a nested if statement had an else branch, it can't be\n+     ambiguous if this one also has an else.  So don't warn in that\n+     case.  Also don't warn for any if statements nested in this else.  */\n+  if_stack[if_stack_pointer - 1].needs_warning = 0;\n+  if_stack[if_stack_pointer - 1].compstmt_count--;\n \n   expand_start_else ();\n }"}]}