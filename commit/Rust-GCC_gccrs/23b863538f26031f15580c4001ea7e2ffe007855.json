{"sha": "23b863538f26031f15580c4001ea7e2ffe007855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiODYzNTM4ZjI2MDMxZjE1NTgwYzQwMDFlYTdlMmZmZTAwNzg1NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T10:51:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T10:51:36Z"}, "message": "[multiple changes]\n\n2010-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): Diagnose attempt to use thew\n\tform \"for X in A\" when A is an array object. This form is only intended\n\tfor containers.\n\t* sem_eval.adb: Fix reference to non-existing field of type conversion\n\tnode.\n\t* sem_case.adb (Check_Choices): Improve error reporting for overlapping\n\tchoices in case statements.\n\n2010-10-26  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_disp.adb (Expand_Interface_Actuals): When expanding an actual for\n\ta class-wide interface formal that involves applying a displacement\n\tconversion to the actual, check for the case of calling a build-in-place\n\tfunction and handle generation of the implicit BIP parameters (call\n\tMake_Build_In_Place_Call_In_Anonymous_Context).\n\tAdd with and use of Exp_Ch6.\n\n2010-10-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb, sem_cat.ads: Minor reformatting.\n\n2010-10-26  Sergey Rybin  <rybin@adacore.com>\n\n\t* vms_data.ads: Define VMS qualifier for gnatelim '--ignore' option\n\n2010-10-26  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb (Has_Preelaborable_Initialization.Check_Components):\n\tFor a discriminant, use Discriminant_Default_Value rather than\n\tExpression (Declaration_Node (D)).\n\n2010-10-26  Geert Bosch  <bosch@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Parameterized\n\texpressions don't need a spec, even when style checks require\n\tsubprograms to have one.\n\nFrom-SVN: r165941", "tree": {"sha": "18198c3c3acb15ac21e0afb21a4944b9efeb0f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18198c3c3acb15ac21e0afb21a4944b9efeb0f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23b863538f26031f15580c4001ea7e2ffe007855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b863538f26031f15580c4001ea7e2ffe007855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b863538f26031f15580c4001ea7e2ffe007855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b863538f26031f15580c4001ea7e2ffe007855/comments", "author": null, "committer": null, "parents": [{"sha": "8bead36ac96fc93efd792d95dd5560b4db8c5200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bead36ac96fc93efd792d95dd5560b4db8c5200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bead36ac96fc93efd792d95dd5560b4db8c5200"}], "stats": {"total": 145, "additions": 117, "deletions": 28}, "files": [{"sha": "72642c12e6ace28f03e5005b72d6654d42a38797", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -1,3 +1,42 @@\n+2010-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): Diagnose attempt to use thew\n+\tform \"for X in A\" when A is an array object. This form is only intended\n+\tfor containers.\n+\t* sem_eval.adb: Fix reference to non-existing field of type conversion\n+\tnode.\n+\t* sem_case.adb (Check_Choices): Improve error reporting for overlapping\n+\tchoices in case statements.\n+\n+2010-10-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Actuals): When expanding an actual for\n+\ta class-wide interface formal that involves applying a displacement\n+\tconversion to the actual, check for the case of calling a build-in-place\n+\tfunction and handle generation of the implicit BIP parameters (call\n+\tMake_Build_In_Place_Call_In_Anonymous_Context).\n+\tAdd with and use of Exp_Ch6.\n+\n+2010-10-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb, sem_cat.ads: Minor reformatting.\n+\n+2010-10-26  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* vms_data.ads: Define VMS qualifier for gnatelim '--ignore' option\n+\n+2010-10-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb (Has_Preelaborable_Initialization.Check_Components):\n+\tFor a discriminant, use Discriminant_Default_Value rather than\n+\tExpression (Declaration_Node (D)).\n+\n+2010-10-26  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Parameterized\n+\texpressions don't need a spec, even when style checks require\n+\tsubprograms to have one.\n+\n 2010-10-26  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnatvsn.ads: Update comments."}, {"sha": "a4eccd61738f7cef792fdfd9d16798d929175532", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -30,6 +30,7 @@ with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Atag; use Exp_Atag;\n+with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_CG;   use Exp_CG;\n with Exp_Dbug; use Exp_Dbug;\n@@ -1437,6 +1438,19 @@ package body Exp_Disp is\n             --  the displacement of the pointer.\n \n             else\n+               --  Normally, expansion of actuals for calls to build-in-place\n+               --  functions happens as part of Expand_Actuals, but in this\n+               --  case the call will be wrapped in a conversion and soon after\n+               --  expanded further to handle the displacement for a class-wide\n+               --  interface conversion, so if this is a BIP call then we need\n+               --  to handle it now.\n+\n+               if Ada_Version >= Ada_2005\n+                 and then Is_Build_In_Place_Function_Call (Actual)\n+               then\n+                  Make_Build_In_Place_Call_In_Anonymous_Context (Actual);\n+               end if;\n+\n                Conversion := Convert_To (Formal_Typ, Relocate_Node (Actual));\n                Rewrite (Actual, Conversion);\n                Analyze_And_Resolve (Actual, Formal_Typ);"}, {"sha": "ead21f4cffec70f4cd6ee8a5fcb8a44459fab298", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -313,9 +313,17 @@ package body Sem_Case is\n          Hi := Expr_Value (Choice_Table (J).Hi);\n \n          if Lo <= Prev_Hi then\n-            Prev_Choice := Choice_Table (J - 1).Node;\n             Choice      := Choice_Table (J).Node;\n \n+            --  Find first previous choice that overlaps.\n+\n+            for K in 1 .. J - 1 loop\n+               if Lo <= Expr_Value (Choice_Table (K).Hi) then\n+                  Prev_Choice := Choice_Table (K).Node;\n+                  exit;\n+               end if;\n+            end loop;\n+\n             if Sloc (Prev_Choice) <= Sloc (Choice) then\n                Error_Msg_Sloc := Sloc (Prev_Choice);\n                Error_Msg_N (\"duplication of choice value#\", Choice);"}, {"sha": "1c7f5722ee179d5471bd4b1f485e91279a9d9a65", "filename": "gcc/ada/sem_cat.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_cat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_cat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.ads?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -143,10 +143,10 @@ package Sem_Cat is\n    --  T is the entity of the declared type.\n \n    procedure Validate_Static_Object_Name (N : Node_Id);\n-   --  In the elaboration code of a preelaborated library unit, check\n-   --  that we do not have the evaluation of a primary that is a name of\n-   --  an object, unless the name is a static expression (RM 10.2.1(8)).\n-   --  Non-static constant and variable are the targets, generic parameters\n+   --  In the elaboration code of a preelaborated library unit, check that we\n+   --  do not have the evaluation of a primary that is a name of an object,\n+   --  unless the name is a static expression (RM 10.2.1(8)). Non-static\n+   --  constant and variable are the targets, generic parameters are not\n    --  are not included because the generic declaration and body are\n    --  preelaborable.\n "}, {"sha": "e7091cd2092e99aa02e84dfb312c5aac0902e676", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -1725,7 +1725,9 @@ package body Sem_Ch5 is\n    --  Start of processing for Analyze_Iteration_Scheme\n \n    begin\n-      --  Why is following check needed ???\n+      --  If this is a rewritten quantified expression, the iteration\n+      --  scheme has been analyzed already. Do no repeat analysis because\n+      --  the loop variable is already declared.\n \n       if Analyzed (N) then\n          return;\n@@ -2008,6 +2010,8 @@ package body Sem_Ch5 is\n          if Of_Present (N) then\n             Set_Etype (Def_Id, Component_Type (Typ));\n          else\n+            Error_Msg_N\n+              (\"to iterate over the elements of an array, use 'O'F\", N);\n             Set_Etype (Def_Id, Etype (First_Index (Typ)));\n          end if;\n "}, {"sha": "534f32398894c5ea1b02f8740aeed7b2e7a52527", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -2330,6 +2330,8 @@ package body Sem_Ch6 is\n            and then Comes_From_Source (Body_Id)\n            and then not Suppress_Style_Checks (Body_Id)\n            and then not In_Instance\n+           and then Nkind (Original_Node (Body_Id))\n+                            /= N_Parameterized_Expression\n          then\n             Style.Body_With_No_Spec (N);\n          end if;"}, {"sha": "84ca9ac51984dff91670b391cbc0db94c927a1da", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -5432,8 +5432,8 @@ package body Sem_Eval is\n          when N_Type_Conversion =>\n             Why_Not_Static (Expression (N));\n \n-            if not Is_Scalar_Type (Etype (Prefix (N)))\n-              or else not Is_Static_Subtype (Etype (Prefix (N)))\n+            if not Is_Scalar_Type (Entity (Subtype_Mark (N)))\n+              or else not Is_Static_Subtype (Entity (Subtype_Mark (N)))\n             then\n                Error_Msg_N\n                  (\"static conversion requires static scalar subtype result \" &"}, {"sha": "5cf92e15daf7d2b9b4a7564b8ddd866dd69727fe", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -2920,6 +2920,7 @@ package body Sem_Prag is\n \n          --  C_Pass_By_Copy is treated as a synonym for convention C (this is\n          --  tested again below to set the critical flag).\n+\n          if Cname = Name_C_Pass_By_Copy then\n             C := Convention_C;\n "}, {"sha": "1ec671fe35e57ddabbdc639c48c5e7f7bf164056", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -5121,36 +5121,50 @@ package body Sem_Util is\n \n             --  We are interested only in components and discriminants\n \n-            if Ekind_In (Ent, E_Component, E_Discriminant) then\n+            Exp := Empty;\n+            case Ekind (Ent) is\n+               when E_Component =>\n \n-               --  Get default expression if any. If there is no declaration\n-               --  node, it means we have an internal entity. The parent and\n-               --  tag fields are examples of such entities. For these cases,\n-               --  we just test the type of the entity.\n+                  --  Get default expression if any. If there is no declaration\n+                  --  node, it means we have an internal entity. The parent and\n+                  --  tag fields are examples of such entities. For such cases,\n+                  --  we just test the type of the entity.\n \n-               if Present (Declaration_Node (Ent)) then\n-                  Exp := Expression (Declaration_Node (Ent));\n-               else\n-                  Exp := Empty;\n-               end if;\n+                  if Present (Declaration_Node (Ent)) then\n+                     Exp := Expression (Declaration_Node (Ent));\n+                  end if;\n \n-               --  A component has PI if it has no default expression and the\n-               --  component type has PI.\n+               when E_Discriminant =>\n \n-               if No (Exp) then\n-                  if not Has_Preelaborable_Initialization (Etype (Ent)) then\n-                     Has_PE := False;\n-                     exit;\n-                  end if;\n+                  --  Note: for a renamed discriminant, the Declaration_Node\n+                  --  may point to the one from the ancestor, and have a\n+                  --  different expression, so use the proper attribute to\n+                  --  retrieve the expression from the derived constraint.\n+\n+                  Exp := Discriminant_Default_Value (Ent);\n \n-               --  Require the default expression to be preelaborable\n+               when others =>\n+                  goto Check_Next_Entity;\n \n-               elsif not Is_Preelaborable_Expression (Exp) then\n+            end case;\n+\n+            --  A component has PI if it has no default expression and the\n+            --  component type has PI.\n+\n+            if No (Exp) then\n+               if not Has_Preelaborable_Initialization (Etype (Ent)) then\n                   Has_PE := False;\n                   exit;\n                end if;\n+\n+            --  Require the default expression to be preelaborable\n+\n+            elsif not Is_Preelaborable_Expression (Exp) then\n+               Has_PE := False;\n+               exit;\n             end if;\n \n+         <<Check_Next_Entity>>\n             Next_Entity (Ent);\n          end loop;\n       end Check_Components;"}, {"sha": "7b482827f5e5840c5181f401269ccacc639a10f4", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b863538f26031f15580c4001ea7e2ffe007855/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=23b863538f26031f15580c4001ea7e2ffe007855", "patch": "@@ -3701,6 +3701,13 @@ package VMS_Data is\n    --\n    --   Do not generate pragmas for dispatching operations.\n \n+   S_Elim_Ignore : aliased constant S := \"/IGNORE=@\"                       &\n+                                         \"--ignore=@\";\n+   --      /IGNORE=filename\n+   --\n+   --   Do not generate pragmas for subprograms declared in the sources\n+   --  listed in a specified file\n+\n    S_Elim_Project : aliased constant S := \"/PROJECT_FILE=<\"                &\n                                              \"-P>\";\n    --        /PROJECT_FILE=filename"}]}