{"sha": "43f66d6e1e49b600d5b1cef208995641232031d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmNjZkNmUxZTQ5YjYwMGQ1YjFjZWYyMDg5OTU2NDEyMzIwMzFkNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-10-14T12:10:16Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-10-14T12:10:16Z"}, "message": "Test folding of str{n}{case}cmp and memchr\n\n\t* gcc.dg/tree-ssa/builtins-folding-generic.c: New test.\n\t* gcc.dg/tree-ssa/builtins-folding-gimple.c: Likewise.\n\t* gcc.dg/tree-ssa/builtins-folding-gimple-ub.c: Likewise.\n\nFrom-SVN: r241161", "tree": {"sha": "432accf13830277abde5a1ab7054f68edc3581b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/432accf13830277abde5a1ab7054f68edc3581b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f66d6e1e49b600d5b1cef208995641232031d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f66d6e1e49b600d5b1cef208995641232031d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f66d6e1e49b600d5b1cef208995641232031d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f66d6e1e49b600d5b1cef208995641232031d4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "488c624747ddb76a9110a4ada52073b584669d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488c624747ddb76a9110a4ada52073b584669d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488c624747ddb76a9110a4ada52073b584669d0d"}], "stats": {"total": 266, "additions": 266, "deletions": 0}, "files": [{"sha": "51a521dfca9df4e74538ed470541ec58d6a5aea1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43f66d6e1e49b600d5b1cef208995641232031d4", "patch": "@@ -1,3 +1,9 @@\n+2016-10-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/builtins-folding-generic.c: New test.\n+\t* gcc.dg/tree-ssa/builtins-folding-gimple.c: Likewise.\n+\t* gcc.dg/tree-ssa/builtins-folding-gimple-ub.c: Likewise.\n+\n 2016-10-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/torture/pr77937-1.c: Move -O3 to dg-options."}, {"sha": "175feff7fec9b901a2c6b34c6d56a27e3a139a41", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtins-folding-generic.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-generic.c?ref=43f66d6e1e49b600d5b1cef208995641232031d4", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -fdump-tree-original\" } */\n+\n+char *buffer1;\n+char *buffer2;\n+\n+#define SIZE 1000\n+\n+int\n+main (void)\n+{\n+  const char* const foo1 = \"hello world\";\n+\n+  buffer1 = __builtin_malloc (SIZE);\n+  __builtin_strcpy (buffer1, foo1);\n+  buffer2 = __builtin_malloc (SIZE);\n+  __builtin_strcpy (buffer2, foo1);\n+\n+  /* MEMCHR.  */\n+  if (__builtin_memchr (\"hello world\", 'x', 11))\n+    __builtin_abort ();\n+  if (__builtin_memchr (\"hello world\", 'x', 0) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memchr (\"hello world\", 'w', 2))\n+    __builtin_abort ();\n+  if (__builtin_memchr (\"hello world\", 'd', 10))\n+    __builtin_abort ();\n+  if (__builtin_memchr (\"hello world\", '\\0', 11))\n+    __builtin_abort ();\n+\n+  /* STRCMP.  */\n+  if (__builtin_strcmp (\"hello\", \"aaaaa\") <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (\"aaaaa\", \"aaaaa\") != 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (\"aaaaa\", \"\") <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (\"\", \"aaaaa\") >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (\"ab\", \"ba\") >= 0)\n+    __builtin_abort ();\n+\n+  /* STRNCMP.  */\n+  if (__builtin_strncmp (\"hello\", \"aaaaa\", 0) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (\"aaaaa\", \"aaaaa\", 100) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (\"aaaaa\", \"\", 100) <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (\"\", \"aaaaa\", 100) >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (\"ab\", \"ba\", 1) >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (\"aab\", \"aac\", 2) != 0)\n+    __builtin_abort ();\n+\n+  /* STRCASECMP.  */\n+  if (__builtin_strcasecmp (\"aaaaa\", \"aaaaa\") != 0)\n+    __builtin_abort ();\n+\n+  /* STRNCASECMP.  */\n+  if (__builtin_strncasecmp (\"hello\", \"aaaaa\", 0) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (\"aaaaa\", \"aaaaa\", 100) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (\"aab\", \"aac\", 2) != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_strcmp\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_strcasecmp\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_strncmp\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_strncasecmp\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_memchr\" \"original\" } } */"}, {"sha": "df0ede2ba5e0e8b9bd3b1d3d44116b56d4ad0947", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtins-folding-gimple-ub.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-ub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-ub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple-ub.c?ref=43f66d6e1e49b600d5b1cef208995641232031d4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+char *buffer1;\n+char *buffer2;\n+\n+#define SIZE 1000\n+\n+int\n+main (void)\n+{\n+  const char* const foo1 = \"hello world\";\n+\n+  /* MEMCHR.  */\n+  if (__builtin_memchr (\"\", 'x', 1000)) /* Not folded away.  */\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, 'x', 1000)) /* Not folded away.  */\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_memchr\" 2 \"optimized\" } } */"}, {"sha": "283bd1c70d2f11fa9c77bbe843fc1089f978f801", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtins-folding-gimple.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f66d6e1e49b600d5b1cef208995641232031d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltins-folding-gimple.c?ref=43f66d6e1e49b600d5b1cef208995641232031d4", "patch": "@@ -0,0 +1,161 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+char *buffer1;\n+char *buffer2;\n+\n+#define SIZE 1000\n+\n+int\n+main (void)\n+{\n+  const char* const foo1 = \"hello world\";\n+\n+  buffer1 = __builtin_malloc (SIZE);\n+  __builtin_strcpy (buffer1, foo1);\n+  buffer2 = __builtin_malloc (SIZE);\n+  __builtin_strcpy (buffer2, foo1);\n+\n+  char x = 'x';\n+  char o = 'o';\n+  char w = 'w';\n+  char d = 'd';\n+  char e = 'e';\n+  char null = '\\0';\n+\n+  int zero = 0;\n+  int one = 0;\n+\n+  /* MEMCHR.  */\n+  if (__builtin_memchr (foo1, x, 11))\n+    __builtin_abort ();\n+  if (__builtin_memchr (buffer1, x, zero) != 0)\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, o, 11) != foo1 + 4)\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, w, 2))\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1 + 5, o, 6) != foo1 + 7)\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, d, 11) != foo1 + 10)\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, d, 10))\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, null, 11))\n+    __builtin_abort ();\n+  if (__builtin_memchr (foo1, null, 12) != foo1 + 11)\n+    __builtin_abort ();\n+\n+  __builtin_memchr (foo1, x, 11);\n+  __builtin_memchr (buffer1, x, zero);\n+  __builtin_memchr (foo1, w, 2);\n+  __builtin_memchr (foo1, e, 5);\n+\n+  /* MEMCHR with side effects.  */\n+  const char *const s1 = \"hello world\";\n+  const char *s2 = s1;\n+  if (__builtin_memchr (++s2, 'x', 0) != 0 || s2 != s1+1)\n+    __builtin_abort();\n+\n+  char c = 'x';\n+  if (__builtin_memchr (s2, ++c, 0) != 0 || c != 'y')\n+    __builtin_abort();\n+\n+  const char *aaaaa = \"aaaaa\";\n+  const char *hello = \"hello\";\n+  const char *empty = \"\";\n+  const char *ab = \"ab\";\n+  const char *ba = \"ba\";\n+  const char *aac = \"aac\";\n+  const char *aab = \"aab\";\n+\n+  /* STRCMP.  */\n+  if (__builtin_strcmp (hello, aaaaa) <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (aaaaa, aaaaa) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (aaaaa, empty) <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (empty, aaaaa) >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcmp (ab, ba) >= 0)\n+    __builtin_abort ();\n+\n+  __builtin_strcmp (hello, aaaaa);\n+  __builtin_strcmp (aaaaa, aaaaa);\n+  __builtin_strcmp (aaaaa, empty);\n+  __builtin_strcmp (empty, aaaaa);\n+  __builtin_strcmp (ab, ba);\n+\n+  /* STRNCMP.  */\n+  if (__builtin_strncmp (hello, aaaaa, zero) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (aaaaa, aaaaa, 100) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (aaaaa, empty, 100) <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (empty, aaaaa, 100) >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (ab, ba, 1) >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (aab, aac, 2) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncmp (buffer1, buffer2, 1) != 0)\n+    __builtin_abort (); /* not folded away */\n+\n+  __builtin_strncmp (hello, aaaaa, zero);\n+  __builtin_strncmp (aaaaa, aaaaa, 100);\n+  __builtin_strncmp (aaaaa, empty, 100);\n+  __builtin_strncmp (empty, aaaaa, 100);\n+  __builtin_strncmp (ab, ba, 1);\n+  __builtin_strncmp (aab, aac, 2);\n+  __builtin_strncmp (buffer1, buffer2, zero);\n+  __builtin_strncmp (buffer1, buffer2, one);\n+  __builtin_strncmp (empty, buffer2, 1);\n+  __builtin_strncmp (buffer1, empty, 1);\n+\n+  s2 = s1;\n+  const char *s3 = s1+4;\n+  if (__builtin_strncmp (++s2, ++s3+2, 0) != 0 || s2 != s1+1 || s3 != s1+5)\n+    __builtin_abort();\n+\n+  /* STRCASECMP.  */\n+  if (__builtin_strcasecmp (aaaaa, aaaaa) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strcasecmp (aaaaa, empty) <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strcasecmp (empty, aaaaa) >= 0)\n+    __builtin_abort ();\n+\n+  /* STRNCASECMP.  */\n+  if (__builtin_strncasecmp (hello, aaaaa, zero) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (aaaaa, aaaaa, 100) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (aaaaa, empty, 100) <= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (empty, aaaaa, 100) >= 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (aab, aac, 2) != 0)\n+    __builtin_abort ();\n+  if (__builtin_strncasecmp (ab, ba, 1) >= 0) /* not folded away */\n+    __builtin_abort (); /* not folded away */\n+  if (__builtin_strncasecmp (buffer1, buffer2, 1) != 0) /* not folded away */\n+    __builtin_abort (); /* not folded away */\n+  if (__builtin_strncasecmp (buffer1, buffer2, 100) != 0) /* not folded away */\n+    __builtin_abort (); /* not folded away */\n+\n+  /* STRNCASECMP with side effects.  */\n+  s2 = s1;\n+  s3 = s1+4;\n+  if (__builtin_strncasecmp (++s2, ++s3+2, 0) != 0 || s2 != s1+1 || s3 != s1+5)\n+    __builtin_abort();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_strcmp\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_strcasecmp\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_strncmp\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_memchr\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_strncasecmp\" 3 \"optimized\" } } */"}]}