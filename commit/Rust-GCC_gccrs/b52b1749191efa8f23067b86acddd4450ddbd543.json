{"sha": "b52b1749191efa8f23067b86acddd4450ddbd543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyYjE3NDkxOTFlZmE4ZjIzMDY3Yjg2YWNkZGQ0NDUwZGRiZDU0Mw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-06-29T22:51:04Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-06-29T22:51:04Z"}, "message": "target.h (struct gcc_target): Add frame_pointer_required field.\n\n\t* target.h (struct gcc_target): Add frame_pointer_required field.\n\t* target-def.h (TARGET_FRAME_POINTER_REQUIRED): New.\n\t(TARGET_INITIALIZER): Use TARGET_FRAME_POINTER_REQUIRED.\n\t* ira.c (setup_eliminable_regset): Use frame_pointer_required target\n\thook.\n\t* reload1.c (update_eliminables): (Ditto.).\n\t* gcc/system.h (FRAME_POINTER_REQUIRED): Poison.\n\t* doc/tm.texi (FRAME_POINTER_REQUIRED): Revise documentation.\n\t(INITIAL_FRAME_POINTER_OFFSET): (Ditto.).\n\n\t* config/arc/arc.h (FRAME_POINTER_REQUIRED): Remove macro.\n\n\t* config/arm/arm.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/arm/arm.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n\t(arm_frame_pointer_required): New function.\n\n\t* config/avr/avr.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/avr/avr.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(avr_frame_pointer_required_p): Declare as static.\n\t* config/avr/avr-protos.h (avr_frame_pointer_required_p): Remove.\n\n\t* config/bfin/bfin.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/bfin/bfin.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n\t(bfin_frame_pointer_required): Make as static, change return type\n\tto bool.\n\t* config/bfin/bfin-protos.h (bfin_frame_pointer_required): Remove.\n\n\t* config/cris/cris.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/cris/cris.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(cris_frame_pointer_required): New function.\n\t\n\t* config/crx/crx.h (FRAME_POINTER_REQUIRED): Remove macro.\n\n\t* config/fr30/fr30.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/fr30/fr30.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(fr30_frame_pointer_required): New function.\n\t\n\t* config/frv/frv.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/frv/frv.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n\t(frv_frame_pointer_required): Make as static, change return type\n\tto bool.\n\t* config/bfin/bfin-protos.h (frv_frame_pointer_required): Remove.\n\n\t* config/i386/i386.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/i386/i386.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(ix86_frame_pointer_required): Make as static, change return type to\n\tbool.\n\t* config/i386/i386-protos.h (ix86_frame_pointer_required): Remove.\n\n\t* config/m32c/m32c.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/m32c/m32c.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\n\t* config/m32r/m32r.h (FRAME_POINTER_REQUIRED): Remove macro.\n\n\t* config/mcore/mcore.h (CAN_ELIMINATE): Remove macro.\n\t\n\t* config/mep/mep.h (FRAME_POINTER_REQUIRED): Remove macro.\n\n\t* config/mips/mips.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/mips/mips.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(mips_frame_pointer_required): Make as static.\n\t* config/mips/mips-protos.h (mips_frame_pointer_required): Remove.\n\t\n\t* config/mmix/mmix.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/mmix/mmix.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(mmix_frame_pointer_required): Mew function.\n\n\t* config/moxie/moxie.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/moxie/moxie.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\n\t* config/pa/pa.h (FRAME_POINTER_REQUIRED): Remove macro.\n\n\t* config/score/score.h (FRAME_POINTER_REQUIRED): Remove macro.\n\n\t* config/sh/sh.h (CAN_ELIMINATE): Remove macro.\n\n\t* config/sparc/sparc.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t(CAN_ELIMINATE): Redefine.\n\t* config/sparc/sparc.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n\t(sparc_frame_pointer_required): New function.\n\t(sparc_can_eliminate): New function.\n\t* config/sparc/sparc-protos.h (sparc_can_eliminate): Declare.\n\n\t* config/vax/vax.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/vax/vax.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n\n\t* config/xtensa/xtensa.h (FRAME_POINTER_REQUIRED): Remove macro.\n\t* config/xtensa/xtensa.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n\t(xtensa_frame_pointer_required): Make as static, change return type\n\tto bool.\n\t* config/xtensa/xtensa-protos.h (xtensa_frame_pointer_required):\n\tRemove.\n\nFrom-SVN: r149065", "tree": {"sha": "0f2937085f496ccc9d16a12f644463d2113bf657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f2937085f496ccc9d16a12f644463d2113bf657"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52b1749191efa8f23067b86acddd4450ddbd543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b1749191efa8f23067b86acddd4450ddbd543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52b1749191efa8f23067b86acddd4450ddbd543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b1749191efa8f23067b86acddd4450ddbd543/comments", "author": null, "committer": null, "parents": [{"sha": "78bf7bd0fc9a82aff98874e0ff3e12a329f920ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bf7bd0fc9a82aff98874e0ff3e12a329f920ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bf7bd0fc9a82aff98874e0ff3e12a329f920ab"}], "stats": {"total": 494, "additions": 277, "deletions": 217}, "files": [{"sha": "97b6fba59f47e660bd24a8ad00e13a7bb455f305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,3 +1,98 @@\n+2009-06-30  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.h (struct gcc_target): Add frame_pointer_required field.\n+\t* target-def.h (TARGET_FRAME_POINTER_REQUIRED): New.\n+\t(TARGET_INITIALIZER): Use TARGET_FRAME_POINTER_REQUIRED.\n+\t* ira.c (setup_eliminable_regset): Use frame_pointer_required target\n+\thook.\n+\t* reload1.c (update_eliminables): (Ditto.).\n+\t* gcc/system.h (FRAME_POINTER_REQUIRED): Poison.\n+\t* doc/tm.texi (FRAME_POINTER_REQUIRED): Revise documentation.\n+\t(INITIAL_FRAME_POINTER_OFFSET): (Ditto.).\n+\n+\t* config/arc/arc.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\n+\t* config/arm/arm.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/arm/arm.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n+\t(arm_frame_pointer_required): New function.\n+\n+\t* config/avr/avr.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/avr/avr.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(avr_frame_pointer_required_p): Declare as static.\n+\t* config/avr/avr-protos.h (avr_frame_pointer_required_p): Remove.\n+\n+\t* config/bfin/bfin.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/bfin/bfin.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n+\t(bfin_frame_pointer_required): Make as static, change return type\n+\tto bool.\n+\t* config/bfin/bfin-protos.h (bfin_frame_pointer_required): Remove.\n+\n+\t* config/cris/cris.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/cris/cris.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(cris_frame_pointer_required): New function.\n+\t\n+\t* config/crx/crx.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\n+\t* config/fr30/fr30.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/fr30/fr30.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(fr30_frame_pointer_required): New function.\n+\t\n+\t* config/frv/frv.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/frv/frv.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n+\t(frv_frame_pointer_required): Make as static, change return type\n+\tto bool.\n+\t* config/bfin/bfin-protos.h (frv_frame_pointer_required): Remove.\n+\n+\t* config/i386/i386.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/i386/i386.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(ix86_frame_pointer_required): Make as static, change return type to\n+\tbool.\n+\t* config/i386/i386-protos.h (ix86_frame_pointer_required): Remove.\n+\n+\t* config/m32c/m32c.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/m32c/m32c.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\n+\t* config/m32r/m32r.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\n+\t* config/mcore/mcore.h (CAN_ELIMINATE): Remove macro.\n+\t\n+\t* config/mep/mep.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\n+\t* config/mips/mips.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/mips/mips.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(mips_frame_pointer_required): Make as static.\n+\t* config/mips/mips-protos.h (mips_frame_pointer_required): Remove.\n+\t\n+\t* config/mmix/mmix.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/mmix/mmix.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(mmix_frame_pointer_required): Mew function.\n+\n+\t* config/moxie/moxie.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/moxie/moxie.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\n+\t* config/pa/pa.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\n+\t* config/score/score.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\n+\t* config/sh/sh.h (CAN_ELIMINATE): Remove macro.\n+\n+\t* config/sparc/sparc.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t(CAN_ELIMINATE): Redefine.\n+\t* config/sparc/sparc.c (TARGET_FRAME_POINTER_REQUIRED): Define macro.\n+\t(sparc_frame_pointer_required): New function.\n+\t(sparc_can_eliminate): New function.\n+\t* config/sparc/sparc-protos.h (sparc_can_eliminate): Declare.\n+\n+\t* config/vax/vax.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/vax/vax.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n+\n+\t* config/xtensa/xtensa.h (FRAME_POINTER_REQUIRED): Remove macro.\n+\t* config/xtensa/xtensa.c (TARGET_FRAME_POINTER_REQUIRED): Define.\n+\t(xtensa_frame_pointer_required): Make as static, change return type\n+\tto bool.\n+\t* config/xtensa/xtensa-protos.h (xtensa_frame_pointer_required):\n+\tRemove.\n+\n 2009-06-29  Olatunji Ruwase   <tjruwase@google.com>\n \n \t* doc/plugins.texi: Document PLUGIN_START_UNIT."}, {"sha": "e19048d9a8411a9d4d3c5b9ba38c5b621d6788b6", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n    Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005,\n-   2007, 2008 Free Software Foundation, Inc.\n+   2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -516,12 +516,6 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    not be a register used by the prologue.  */\n #define STATIC_CHAIN_REGNUM 24\n \n-/* A C expression which is nonzero if a function must have and use a\n-   frame pointer.  This expression is evaluated in the reload pass.\n-   If its value is nonzero the function will have a frame pointer.  */\n-#define FRAME_POINTER_REQUIRED \\\n-(cfun->calls_alloca)\n-\n /* C statement to store the difference between the frame pointer\n    and the stack pointer values immediately after the function prologue.  */\n #define INITIAL_FRAME_POINTER_OFFSET(VAR) \\"}, {"sha": "85b4995ab0cdc4b2e5f206eb4a09fdac2471d21e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -204,6 +204,8 @@ static const char *arm_invalid_return_type (const_tree t);\n static tree arm_promoted_type (const_tree t);\n static tree arm_convert_to_type (tree type, tree expr);\n static bool arm_scalar_mode_supported_p (enum machine_mode);\n+static bool arm_frame_pointer_required (void);\n+\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -461,6 +463,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P arm_scalar_mode_supported_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED arm_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -20023,4 +20028,14 @@ arm_optimization_options (int level, int size ATTRIBUTE_UNUSED)\n     flag_section_anchors = 2;\n }\n \n+/* Implement TARGET_FRAME_POINTER_REQUIRED.  */\n+\n+bool\n+arm_frame_pointer_required (void)\n+{\n+  return (cfun->has_nonlocal_label\n+          || SUBTARGET_FRAME_POINTER_REQUIRED\n+          || (TARGET_ARM && TARGET_APCS_FRAME && ! leaf_function_p ()));\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "58ced2e7e51bc7262ce84c5c2b298568a00f372e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1044,11 +1044,6 @@ extern int arm_structure_size_boundary;\n #define SUBTARGET_FRAME_POINTER_REQUIRED 0\n #endif\n \n-#define FRAME_POINTER_REQUIRED\t\t\t\t\t\\\n-  (cfun->has_nonlocal_label\t\t\t\t\\\n-   || SUBTARGET_FRAME_POINTER_REQUIRED\t\t\t\t\\\n-   || (TARGET_ARM && TARGET_APCS_FRAME && ! leaf_function_p ()))\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE"}, {"sha": "c2d199d0dc7c7adc65cfd6e789c5bc944e32020f", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -30,7 +30,6 @@ extern int avr_ret_register (void);\n extern bool class_likely_spilled_p (int c);\n extern enum reg_class avr_regno_reg_class (int r);\n extern enum reg_class avr_reg_class_from_letter (int c);\n-extern bool avr_frame_pointer_required_p (void);\n extern void asm_globalize_label (FILE *file, const char *name);\n extern void avr_asm_declare_function_name (FILE *, const char *, tree);\n extern void order_regs_for_local_alloc (void);"}, {"sha": "7dd2a6f8bfdb7960c960e9ba3dd1b765fdb54577", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -89,6 +89,7 @@ static struct machine_function * avr_init_machine_status (void);\n static rtx avr_builtin_setjmp_frame_value (void);\n static bool avr_hard_regno_scratch_ok (unsigned int);\n static unsigned int avr_case_values_threshold (void);\n+static bool avr_frame_pointer_required_p (void);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -188,6 +189,9 @@ static const struct attribute_spec avr_attribute_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P avr_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED avr_frame_pointer_required_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void"}, {"sha": "97e3e2a2f687685b6c1afc86818f7197fcf81e09", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -400,8 +400,6 @@ enum reg_class {\n \n #define STATIC_CHAIN_REGNUM 2\n \n-#define FRAME_POINTER_REQUIRED avr_frame_pointer_required_p()\n-\n /* Offset from the frame pointer register value to the top of the stack.  */\n #define FRAME_POINTER_CFA_OFFSET(FNDECL) 0\n "}, {"sha": "72698a2b0a1ed50c5755509bdf41da60b461a6b0", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for Blackfin functions used in the md file & elsewhere.\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -112,7 +112,6 @@ extern int log2constp (unsigned HOST_WIDE_INT);\n extern bool bfin_legitimate_constant_p (rtx);\n extern int hard_regno_mode_ok (int, Mmode);\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\t  \n-extern int bfin_frame_pointer_required (void);\n extern HOST_WIDE_INT bfin_initial_elimination_offset (int, int);\n \n extern int effective_address_32bit_p (rtx, Mmode);"}, {"sha": "4f213062a4f9f4abbea953778eb8bcb2936e3c0e", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -812,20 +812,20 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n    Zero means the frame pointer need not be set up (and parms may\n    be accessed via the stack pointer) in functions that seem suitable.  */\n \n-int\n+static bool\n bfin_frame_pointer_required (void) \n {\n   e_funkind fkind = funkind (TREE_TYPE (current_function_decl));\n \n   if (fkind != SUBROUTINE)\n-    return 1;\n+    return true;\n \n   /* We turn on -fomit-frame-pointer if -momit-leaf-frame-pointer is used,\n      so we have to override it for non-leaf functions.  */\n   if (TARGET_OMIT_LEAF_FRAME_POINTER && ! current_function_is_leaf)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Return the number of registers pushed during the prologue.  */\n@@ -6339,4 +6339,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tbfin_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED bfin_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "a79420476c6d13fbe410b0d5544ba23ddddd2cc8", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for the Blackfin port.\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Analog Devices.\n \n    This file is part of GCC.\n@@ -313,13 +313,6 @@ extern const char *bfin_library_id_string;\n    found in the variable crtl->outgoing_args_size. */ \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  \n-*/\n-#define FRAME_POINTER_REQUIRED (bfin_frame_pointer_required ())\n-\n /*#define DATA_ALIGNMENT(TYPE, BASIC-ALIGN) for arrays.. */\n \n /* If defined, a C expression to compute the alignment for a local"}, {"sha": "66fc05d0f6ecf0376be8d7b53e895ddfc762924d", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-   2008  Free Software Foundation, Inc.\n+   2008, 2009  Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -122,6 +122,8 @@ static tree cris_md_asm_clobbers (tree, tree, tree);\n \n static bool cris_handle_option (size_t, const char *, int);\n \n+static bool cris_frame_pointer_required (void);\n+\n /* This is the parsed result of the \"-max-stack-stackframe=\" option.  If\n    it (still) is zero, then there was no such option given.  */\n int cris_max_stackframe = 0;\n@@ -180,6 +182,8 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | CRIS_SUBTARGET_DEFAULT)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION cris_handle_option\n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED cris_frame_pointer_required\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -3814,6 +3818,18 @@ cris_md_asm_clobbers (tree outputs, tree inputs, tree in_clobbers)\n \t\t    clobbers);\n }\n \n+/* Implement TARGET_FRAME_POINTER_REQUIRED.\n+\n+   Really only needed if the stack frame has variable length (alloca\n+   or variable sized local arguments (GNU C extension).  See PR39499 and\n+   PR38609 for the reason this isn't just 0.  */\n+\n+bool\n+cris_frame_pointer_required (void)\n+{\n+  return !current_function_sp_is_unchanging;\n+}\n+\n #if 0\n /* Various small functions to replace macros.  Only called from a\n    debugger.  They might collide with gcc functions or system functions,"}, {"sha": "920e354417e002e80f775d830fae27dff7438cc3", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -850,11 +850,6 @@ enum reg_class\n \n /* Node: Elimination */\n \n-/* Really only needed if the stack frame has variable length (alloca\n-   or variable sized local arguments (GNU C extension).  See PR39499 and\n-   PR38609 for the reason this isn't just 0.  */\n-#define FRAME_POINTER_REQUIRED (!current_function_sp_is_unchanging)\n-\n #define ELIMINABLE_REGS\t\t\t\t\\\n  {{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n   {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\"}, {"sha": "dcddaf03ecdd1e2ac2b5cd43671bd2d86e214362", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for CRX.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -291,8 +291,6 @@ enum reg_class\n \n #define FIRST_PARM_OFFSET(FNDECL)  0\n \n-#define FRAME_POINTER_REQUIRED (cfun->calls_alloca)\n-\n #define ELIMINABLE_REGS \\\n   { \\\n     { ARG_POINTER_REGNUM,   STACK_POINTER_REGNUM}, \\"}, {"sha": "fc412eef8f04f01d4de59a9190afacff772246aa", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* FR30 specific functions.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n@@ -119,7 +119,7 @@ static void fr30_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n static bool fr30_must_pass_in_stack (enum machine_mode, const_tree);\n static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n-\n+static bool fr30_frame_pointer_required (void);\n \n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n #define RETURN_POINTER_MASK \t(1 << (RETURN_POINTER_REGNUM))\n@@ -158,6 +158,9 @@ static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef  TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK fr30_must_pass_in_stack\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED fr30_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Returns the number of bytes offset between FROM_REG and TO_REG\n@@ -899,6 +902,14 @@ fr30_move_double (rtx * operands)\n   return val;\n }\n \n+/* Implement TARGET_FRAME_POINTER_REQUIRED.  */\n+\n+bool\n+fr30_frame_pointer_required (void)\n+{\n+  return (flag_omit_frame_pointer == 0 || crtl->args.pretend_args_size > 0);\n+}\n+\n /*}}}*/\n /* Local Variables: */\n /* folded-file: t   */"}, {"sha": "9af74a97c148f61a74b2fe117922f08351684204", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,7 +1,7 @@\n /*{{{  Comment.  */ \n \n /* Definitions of FR30 target. \n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2007, 2008\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n@@ -519,28 +519,6 @@ enum reg_class\n /*}}}*/ \f\n /*{{{  Eliminating the Frame Pointer and the Arg Pointer.  */ \n \n-/* A C expression which is nonzero if a function must have and use a frame\n-   pointer.  This expression is evaluated in the reload pass.  If its value is\n-   nonzero the function will have a frame pointer.\n-\n-   The expression can in principle examine the current function and decide\n-   according to the facts, but on most machines the constant 0 or the constant\n-   1 suffices.  Use 0 when the machine allows code to be generated with no\n-   frame pointer, and doing so saves some time or space.  Use 1 when there is\n-   no possible advantage to avoiding a frame pointer.\n-\n-   In certain cases, the compiler does not know how to produce valid code\n-   without a frame pointer.  The compiler recognizes those cases and\n-   automatically gives the function a frame pointer regardless of what\n-   `FRAME_POINTER_REQUIRED' says.  You don't need to worry about them.\n-\n-   In a function that does not require a frame pointer, the frame pointer\n-   register can be allocated for ordinary usage, unless you mark it as a fixed\n-   register.  See `FIXED_REGISTERS' for more information.  */\n-/* #define FRAME_POINTER_REQUIRED 0 */\n-#define FRAME_POINTER_REQUIRED \\\n-     (flag_omit_frame_pointer == 0 || crtl->args.pretend_args_size > 0)\n-\n /* If defined, this macro specifies a table of register pairs used to eliminate\n    unneeded registers that point into the stack frame.  If it is not defined,\n    the only elimination attempted by the compiler is to replace references to"}, {"sha": "8734694e0cd88b95c37bdbd7d1eed2f5edd01216", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Frv prototypes.\n-   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -43,7 +43,6 @@ extern void frv_optimization_options\t\t(int, int);\n extern void frv_conditional_register_usage\t(void);\n extern frv_stack_t *frv_stack_info\t\t(void);\n extern void frv_debug_stack\t\t\t(frv_stack_t *);\n-extern int frv_frame_pointer_required\t\t(void);\n extern int frv_initial_elimination_offset\t(int, int);\n \n #ifdef RTX_CODE"}, {"sha": "658b5b4c27518d51f6066e29895e396e1de430af", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007,\n-   2008  Free Software Foundation, Inc.\n+   2008, 2009  Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -381,6 +381,7 @@ static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n static bool frv_secondary_reload                (bool, rtx, enum reg_class,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t secondary_reload_info *);\n+static bool frv_frame_pointer_required\t\t(void);\n \f\n /* Allow us to easily change the default for -malloc-cc.  */\n #ifndef DEFAULT_NO_ALLOC_CC\n@@ -471,6 +472,9 @@ static bool frv_secondary_reload                (bool, rtx, enum reg_class,\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P frv_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED frv_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #define FRV_SYMBOL_REF_TLS_P(RTX) \\\n@@ -2105,28 +2109,10 @@ frv_asm_output_mi_thunk (FILE *file,\n }\n \n \f\n-/* A C expression which is nonzero if a function must have and use a frame\n-   pointer.  This expression is evaluated in the reload pass.  If its value is\n-   nonzero the function will have a frame pointer.\n-\n-   The expression can in principle examine the current function and decide\n-   according to the facts, but on most machines the constant 0 or the constant\n-   1 suffices.  Use 0 when the machine allows code to be generated with no\n-   frame pointer, and doing so saves some time or space.  Use 1 when there is\n-   no possible advantage to avoiding a frame pointer.\n-\n-   In certain cases, the compiler does not know how to produce valid code\n-   without a frame pointer.  The compiler recognizes those cases and\n-   automatically gives the function a frame pointer regardless of what\n-   `FRAME_POINTER_REQUIRED' says.  You don't need to worry about them.\n-\n-   In a function that does not require a frame pointer, the frame pointer\n-   register can be allocated for ordinary usage, unless you mark it as a fixed\n-   register.  See `FIXED_REGISTERS' for more information.  */\n \n /* On frv, create a frame whenever we need to create stack.  */\n \n-int\n+static bool\n frv_frame_pointer_required (void)\n {\n   /* If we forgoing the usual linkage requirements, we only need\n@@ -2135,27 +2121,27 @@ frv_frame_pointer_required (void)\n     return !current_function_sp_is_unchanging;\n \n   if (! current_function_is_leaf)\n-    return TRUE;\n+    return true;\n \n   if (get_frame_size () != 0)\n-    return TRUE;\n+    return true;\n \n   if (cfun->stdarg)\n-    return TRUE;\n+    return true;\n \n   if (!current_function_sp_is_unchanging)\n-    return TRUE;\n+    return true;\n \n   if (!TARGET_FDPIC && flag_pic && crtl->uses_pic_offset_table)\n-    return TRUE;\n+    return true;\n \n   if (profile_flag)\n-    return TRUE;\n+    return true;\n \n   if (cfun->machine->frame_needed)\n-    return TRUE;\n+    return true;\n \n-  return FALSE;\n+  return false;\n }\n \n \f"}, {"sha": "483ed77e9f7b1347efe9edc1da97ea770fc1748c", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Target macros for the FRV port of GCC.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Red Hat Inc.\n \n@@ -1564,26 +1564,6 @@ typedef struct frv_stack {\n \f\n /* Eliminating the Frame Pointer and the Arg Pointer.  */\n \n-/* A C expression which is nonzero if a function must have and use a frame\n-   pointer.  This expression is evaluated in the reload pass.  If its value is\n-   nonzero the function will have a frame pointer.\n-\n-   The expression can in principle examine the current function and decide\n-   according to the facts, but on most machines the constant 0 or the constant\n-   1 suffices.  Use 0 when the machine allows code to be generated with no\n-   frame pointer, and doing so saves some time or space.  Use 1 when there is\n-   no possible advantage to avoiding a frame pointer.\n-\n-   In certain cases, the compiler does not know how to produce valid code\n-   without a frame pointer.  The compiler recognizes those cases and\n-   automatically gives the function a frame pointer regardless of what\n-   `FRAME_POINTER_REQUIRED' says.  You don't need to worry about them.\n-\n-   In a function that does not require a frame pointer, the frame pointer\n-   register can be allocated for ordinary usage, unless you mark it as a fixed\n-   register.  See `FIXED_REGISTERS' for more information.  */\n-#define FRAME_POINTER_REQUIRED frv_frame_pointer_required ()\n-\n /* If defined, this macro specifies a table of register pairs used to eliminate\n    unneeded registers that point into the stack frame.  If it is not defined,\n    the only elimination attempted by the compiler is to replace references to"}, {"sha": "54d30b7069e4b2d1db90bcde9da2d53cc6086269", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GCC for IA-32.\n    Copyright (C) 1988, 1992, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -24,7 +24,6 @@ extern void override_options (bool);\n extern void optimization_options (int, int);\n \n extern int ix86_can_use_return_insn_p (void);\n-extern int ix86_frame_pointer_required (void);\n extern void ix86_setup_frame_addresses (void);\n \n extern void ix86_file_end (void);"}, {"sha": "c8c4bbf4670a678bd1753c810e366fe77b0340c0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -7421,31 +7421,31 @@ ix86_can_use_return_insn_p (void)\n    Zero means the frame pointer need not be set up (and parms may\n    be accessed via the stack pointer) in functions that seem suitable.  */\n \n-int\n+static bool\n ix86_frame_pointer_required (void)\n {\n   /* If we accessed previous frames, then the generated code expects\n      to be able to access the saved ebp value in our frame.  */\n   if (cfun->machine->accesses_prev_frame)\n-    return 1;\n+    return true;\n \n   /* Several x86 os'es need a frame pointer for other reasons,\n      usually pertaining to setjmp.  */\n   if (SUBTARGET_FRAME_POINTER_REQUIRED)\n-    return 1;\n+    return true;\n \n   /* In override_options, TARGET_OMIT_LEAF_FRAME_POINTER turns off\n      the frame pointer by default.  Turn it back on now if we've not\n      got a leaf function.  */\n   if (TARGET_OMIT_LEAF_FRAME_POINTER\n       && (!current_function_is_leaf\n \t  || ix86_current_function_calls_tls_descriptor))\n-    return 1;\n+    return true;\n \n   if (crtl->profile)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Record that the current function accesses previous call frames.  */\n@@ -30525,6 +30525,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P ix86_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED ix86_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "2d499276338f31940f8a0a66254a34c3b615032f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1152,12 +1152,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define FIRST_REX_SSE_REG  (LAST_REX_INT_REG + 1)\n #define LAST_REX_SSE_REG   (FIRST_REX_SSE_REG + 7)\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED  ix86_frame_pointer_required ()\n-\n /* Override this in other tm.h files to cope with various OS lossage\n    requiring a frame pointer.  */\n #ifndef SUBTARGET_FRAME_POINTER_REQUIRED"}, {"sha": "9672dfa718a0cbe7a1ba4a0160264afdb4714f84", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -4259,6 +4259,13 @@ m32c_output_compare (rtx insn, rtx *operands)\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32c_encode_section_info\n \n+/* If the frame pointer isn't used, we detect it manually.  But the\n+   stack pointer doesn't have as flexible addressing as the frame\n+   pointer, so we always assume we have it.  */\n+\n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_true\n+\n /* The Global `targetm' Variable. */\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "dea5b55b71a28a8b669e676ac1db1557ffdd615d", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -488,11 +488,6 @@ enum reg_class\n \n /* Eliminating Frame Pointer and Arg Pointer */\n \n-/* If the frame pointer isn't used, we detect it manually.  But the\n-   stack pointer doesn't have as flexible addressing as the frame\n-   pointer, so we always assume we have it.  */\n-#define FRAME_POINTER_REQUIRED 1\n-\n #define ELIMINABLE_REGS \\\n   {{AP_REGNO, SP_REGNO}, \\\n    {AP_REGNO, FB_REGNO}, \\"}, {"sha": "0ddbcfae2631bf360ea1867eee8ee9afa847f1cf", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -770,11 +770,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \f\n /* Eliminating the frame and arg pointers.  */\n \n-/* A C expression which is nonzero if a function must have and use a\n-   frame pointer.  This expression is evaluated in the reload pass.\n-   If its value is nonzero the function will have a frame pointer.  */\n-#define FRAME_POINTER_REQUIRED cfun->calls_alloca\n-\n #if 0\n /* C statement to store the difference between the frame pointer\n    and the stack pointer values immediately after the function prologue."}, {"sha": "acc54495a1c3adb1376ba02ae94d7277ec01c2d1", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -325,11 +325,6 @@ extern int mcore_stack_increment;\n  { ARG_POINTER_REGNUM,   STACK_POINTER_REGNUM},\t\\\n  { ARG_POINTER_REGNUM,   FRAME_POINTER_REGNUM},}\n \n-/* Given FROM and TO register numbers, say whether this elimination\n-   is allowed.  */\n-#define CAN_ELIMINATE(FROM, TO) \\\n-  (!((FROM) == FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED))\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\"}, {"sha": "a80f7aa4a3a16e5b07e951c8fd4e6de03a497e42", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -492,8 +492,6 @@ extern unsigned int mep_selected_isa;\n \n \f\n \n-#define FRAME_POINTER_REQUIRED 0\n-\n #define ELIMINABLE_REGS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   {ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM},\t\t\t\\"}, {"sha": "d5d6eeea8d56567f2835511e9b48967d0ce5030b", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   1999, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n@@ -272,7 +272,6 @@ extern void mips_finish_declare_object (FILE *, tree, int, int);\n \n extern bool mips_small_data_pattern_p (rtx);\n extern rtx mips_rewrite_small_data (rtx);\n-extern bool mips_frame_pointer_required (void);\n extern HOST_WIDE_INT mips_initial_elimination_offset (int, int);\n extern rtx mips_return_addr (int, rtx);\n extern enum mips_loadgp_style mips_current_loadgp_style (void);"}, {"sha": "361589282ec5b9bc21f2e776a27b59f05e46f1c2", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -8918,9 +8918,9 @@ mips_current_loadgp_style (void)\n   return TARGET_NEWABI ? LOADGP_NEWABI : LOADGP_OLDABI;\n }\n \n-/* Implement FRAME_POINTER_REQUIRED.  */\n+/* Implement TARGET_FRAME_POINTER_REQUIRED.  */\n \n-bool\n+static bool\n mips_frame_pointer_required (void)\n {\n   /* If the function contains dynamic stack allocations, we need to\n@@ -14931,6 +14931,9 @@ mips_final_postscan_insn (FILE *file, rtx insn, rtx *opvec, int noperands)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tmips_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED mips_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "c8ea60590d1ebbf689e26363976f0a69f073c683", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1767,8 +1767,6 @@ enum mips_code_readable_setting {\n #define HARD_FRAME_POINTER_REGNUM \\\n   (TARGET_MIPS16 ? GP_REG_FIRST + 17 : GP_REG_FIRST + 30)\n \n-#define FRAME_POINTER_REQUIRED (mips_frame_pointer_required ())\n-\n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM (GP_REG_FIRST + 15)\n "}, {"sha": "67b1b2323b52ec1ce8721b9130851c0349066431", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for MMIX.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n@@ -137,6 +137,7 @@ static bool mmix_rtx_costs (rtx, int, int, int *, bool);\n static rtx mmix_struct_value_rtx (tree, int);\n static bool mmix_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, const_tree, bool);\n+static bool mmix_frame_pointer_required (void);\n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n    for a general description.  */\n@@ -210,6 +211,9 @@ static bool mmix_pass_by_reference (CUMULATIVE_ARGS *,\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tmmix_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED mmix_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n@@ -2697,6 +2701,17 @@ mmix_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n   return gen_rtx_REG (Pmode, MMIX_STRUCT_VALUE_REGNUM);\n }\n \n+/* Worker function for TARGET_FRAME_POINTER_REQUIRED.\n+\n+   FIXME: Is this requirement built-in?  Anyway, we should try to get rid\n+   of it; we can deduce the value.  */\n+\n+bool\n+mmix_frame_pointer_required (void)\n+{\n+  return (cfun->has_nonlocal_label);\n+}\n+\n /*\n  * Local variables:\n  * eval: (c-set-style \"gnu\")"}, {"sha": "72e35680ef52578f87ce7fa0f0a875ccf01e41c7", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -585,9 +585,6 @@ enum reg_class\n \n \n /* Node: Elimination */\n-/* FIXME: Is this requirement built-in?  Anyway, we should try to get rid\n-   of it; we can deduce the value.  */\n-#define FRAME_POINTER_REQUIRED  cfun->has_nonlocal_label\n \n /* The frame-pointer is stored in a location that either counts to the\n    offset of incoming parameters, or that counts to the offset of the"}, {"sha": "3991ceeefeaa4953cef74338cb0faf6c2a6144fa", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -475,6 +475,9 @@ moxie_arg_partial_bytes (CUMULATIVE_ARGS *cum,\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE moxie_function_value\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-moxie.h\""}, {"sha": "01cf9d206af8439356f7cf37073660ce67001c98", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -519,8 +519,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n    an immediate operand on the target machine.  */\n #define LEGITIMATE_CONSTANT_P(X) 1\n \n-#define FRAME_POINTER_REQUIRED 1\n-\n /* A C expression that is 1 if the RTX X is a constant which is a\n    valid address.  */\n #define CONSTANT_ADDRESS_P(X) CONSTANT_P(X)"}, {"sha": "3b0ddeda64aea2fa134568cb8872efd674d7bc2c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler, for the HP Spectrum.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n    and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n    Software Science at the University of Utah.\n@@ -356,10 +357,6 @@ typedef struct GTY(()) machine_function\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM 3\n \n-/* Value should be nonzero if functions must have frame pointers.  */\n-#define FRAME_POINTER_REQUIRED \\\n-  (cfun->calls_alloca)\n-\n /* Don't allow hard registers to be renamed into r2 unless r2\n    is already live or already being saved (due to eh).  */\n "}, {"sha": "ed3f1a4b3c0c88630577a2f3e53ab74694a9793a", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -557,11 +557,6 @@ extern enum reg_class score_char_to_class[256];\n #define STATIC_CHAIN_REGNUM             23\n \n /* Elimination Frame Pointer and Arg Pointer  */\n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED          cfun->calls_alloca\n \n #define ELIMINABLE_REGS                                \\\n   {{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},        \\"}, {"sha": "d8b9a2978347200868cf9ba43555258791c99109", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1031,11 +1031,6 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n  { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n  { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},}\n \n-/* Given FROM and TO register numbers, say whether this elimination\n-   is allowed.  */\n-#define CAN_ELIMINATE(FROM, TO) \\\n-  (!((FROM) == HARD_FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED))\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n "}, {"sha": "552d559633173c962ba6410f21628d916ed39dad", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes of target machine for SPARC.\n-   Copyright (C) 1999, 2000, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 1999, 2000, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n@@ -50,6 +50,7 @@ extern int short_branch (int, int);\n extern void sparc_profile_hook (int);\n extern void sparc_override_options (void);\n extern void sparc_output_scratch_registers (FILE *);\n+extern bool sparc_can_eliminate (const int, const int);\n \n #ifdef RTX_CODE\n extern enum machine_mode select_cc_mode (enum rtx_code, rtx, rtx);"}, {"sha": "baba1d9805709523f1443523f8b58358f3d92d2e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -417,6 +417,7 @@ static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n+static bool sparc_frame_pointer_required (void);\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n static const char *sparc_mangle_type (const_tree);\n #endif\n@@ -591,6 +592,9 @@ static bool fpu_option_set = false;\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END sparc_file_end\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED sparc_frame_pointer_required\n+\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE sparc_mangle_type\n@@ -9137,4 +9141,24 @@ sparc_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n   emit_move_insn (result, gen_lowpart (GET_MODE (result), res));\n }\n \n+/* Implement TARGET_FRAME_POINTER_REQUIRED.  */\n+\n+bool\n+sparc_frame_pointer_required (void)\n+{\n+  return !(leaf_function_p () && only_leaf_regs_used ());\n+}\n+\n+/* The way this is structured, we can't eliminate SFP in favor of SP\n+   if the frame pointer is required: we want to use the SFP->HFP elimination\n+   in that case.  But the test in update_eliminables doesn't know we are\n+   assuming below that we only do the former elimination.  */\n+\n+bool\n+sparc_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == HARD_FRAME_POINTER_REGNUM \n+          || !targetm.frame_pointer_required ());\n+}\n+\n #include \"gt-sparc.h\""}, {"sha": "31c74095f75d3152354a95b1e579e2c087de510f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -967,13 +967,6 @@ extern int sparc_mode_class[];\n       }\t\t\t\t\t\t\t\t\t \\\n   } while (0)\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   Used in flow.c, global.c, ra.c and reload1.c.  */\n-#define FRAME_POINTER_REQUIRED\t\\\n-  (! (leaf_function_p () && only_leaf_regs_used ()))\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM FRAME_POINTER_REGNUM\n \n@@ -1390,8 +1383,7 @@ extern char leaf_reg_remap[];\n    if the frame pointer is required: we want to use the SFP->HFP elimination\n    in that case.  But the test in update_eliminables doesn't know we are\n    assuming below that we only do the former elimination.  */\n-#define CAN_ELIMINATE(FROM, TO) \\\n-  ((TO) == HARD_FRAME_POINTER_REGNUM || !FRAME_POINTER_REQUIRED)\n+#define CAN_ELIMINATE(FROM, TO) sparc_can_eliminate((FROM), (TO))\n \n /* We always pretend that this is a leaf function because if it's not,\n    there's no point in trying to eliminate the frame pointer.  If it"}, {"sha": "d0543da1bdda56fecbd49a083eeb2f5c859543c5", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -98,6 +98,9 @@ static rtx vax_builtin_setjmp_frame_value (void);\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P vax_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set global variables as needed for the options enabled.  */"}, {"sha": "4ff2d544091f28b481722ddc3c85ee258b7daa1f", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -175,12 +175,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM VAX_FP_REGNUM\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED 1\n-\n /* Offset from the frame pointer register value to the top of stack.  */\n #define FRAME_POINTER_CFA_OFFSET(FNDECL) 0\n "}, {"sha": "73176f6f8f61d9ceafc4c24f0e69a3954970288a", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes of target machine for GNU compiler for Xtensa.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n@@ -84,7 +84,6 @@ extern void xtensa_setup_frame_addresses (void);\n extern int xtensa_dbx_register_number (int);\n extern void override_options (void);\n extern long compute_frame_size (int);\n-extern int xtensa_frame_pointer_required (void);\n extern void xtensa_expand_prologue (void);\n extern void order_regs_for_local_alloc (void);\n extern void xtensa_trampoline_template (FILE *);"}, {"sha": "38f300aeef71e3d14c08fd8137d6b0852b31c19b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Tensilica's Xtensa architecture.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n@@ -145,6 +145,7 @@ static void xtensa_init_builtins (void);\n static tree xtensa_fold_builtin (tree, tree, bool);\n static rtx xtensa_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void xtensa_va_start (tree, rtx);\n+static bool xtensa_frame_pointer_required (void);\n \n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n@@ -227,6 +228,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\txtensa_legitimate_address_p\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED xtensa_frame_pointer_required\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -1534,7 +1538,7 @@ xtensa_expand_atomic (enum rtx_code code, rtx target, rtx mem, rtx val,\n void\n xtensa_setup_frame_addresses (void)\n {\n-  /* Set flag to cause FRAME_POINTER_REQUIRED to be set.  */\n+  /* Set flag to cause TARGET_FRAME_POINTER_REQUIRED to return true.  */\n   cfun->machine->accesses_prev_frame = 1;\n \n   emit_library_call\n@@ -2495,7 +2499,7 @@ compute_frame_size (int size)\n }\n \n \n-int\n+bool\n xtensa_frame_pointer_required (void)\n {\n   /* The code to expand builtin_frame_addr and builtin_return_addr\n@@ -2504,9 +2508,9 @@ xtensa_frame_pointer_required (void)\n      This function is derived from the i386 code.  */\n \n   if (cfun->machine->accesses_prev_frame)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n "}, {"sha": "a9987c7609fde19a09c91fbceb9686b50484b8a5", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -380,12 +380,6 @@ extern char xtensa_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n    either the stack pointer or the hard frame pointer.  */\n #define FRAME_POINTER_REGNUM (GP_REG_FIRST + 16)\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in 'reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED xtensa_frame_pointer_required ()\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM (GP_REG_FIRST + 17)\n "}, {"sha": "11873a8c8a5357a4ca5a13be0cce4dc103cec3fa", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1154,8 +1154,4 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GO_IF_MODE_DEPENDENT_ADDRESS(X, WIN)\n #endif\n \n-#ifndef FRAME_POINTER_REQUIRED\n-#define FRAME_POINTER_REQUIRED false\n-#endif\n-\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "e328210385cfe6bbcae239443c5a1d3c4fe20b96", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -3737,12 +3737,12 @@ return @code{@var{regno}}.\n @c prevent bad page break with this line\n This is about eliminating the frame pointer and arg pointer.\n \n-@defmac FRAME_POINTER_REQUIRED\n-A C expression which is @code{true} if a function must have and use a frame\n-pointer.  This expression is evaluated  in the reload pass.  If its value is\n-@code{true} the function will have a frame pointer.\n+@deftypefn {Target Hook} bool TARGET_FRAME_POINTER_REQUIRED (void)\n+This target hook should return @code{true} if a function must have and use\n+a frame pointer.  This target hook is called in the reload pass.  If its return\n+value is @code{true} the function will have a frame pointer.\n \n-The expression can in principle examine the current function and decide\n+This target hook can in principle examine the current function and decide\n according to the facts, but on most machines the constant @code{false} or the\n constant @code{true} suffices.  Use @code{false} when the machine allows code\n to be generated with no frame pointer, and doing so saves some time or space.\n@@ -3752,15 +3752,15 @@ pointer.\n In certain cases, the compiler does not know how to produce valid code\n without a frame pointer.  The compiler recognizes those cases and\n automatically gives the function a frame pointer regardless of what\n-@code{FRAME_POINTER_REQUIRED} says.  You don't need to worry about\n+@code{TARGET_FRAME_POINTER_REQUIRED} returns.  You don't need to worry about\n them.\n \n In a function that does not require a frame pointer, the frame pointer\n register can be allocated for ordinary usage, unless you mark it as a\n fixed register.  See @code{FIXED_REGISTERS} for more information.\n \n-Default value is @code{false}.\n-@end defmac\n+Default return value is @code{false}.\n+@end deftypefn\n \n @findex get_frame_size\n @defmac INITIAL_FRAME_POINTER_OFFSET (@var{depth-var})\n@@ -3772,7 +3772,7 @@ registers @code{regs_ever_live} and @code{call_used_regs}.\n \n If @code{ELIMINABLE_REGS} is defined, this macro will be not be used and\n need not be defined.  Otherwise, it must be defined even if\n-@code{FRAME_POINTER_REQUIRED} is defined to always be true; in that\n+@code{TARGET_FRAME_POINTER_REQUIRED} is always return true; in that\n case, you may set @var{depth-var} to anything.\n @end defmac\n "}, {"sha": "98dd645941982be244106f1bc2305ea8e577785b", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -1411,7 +1411,7 @@ setup_eliminable_regset (void)\n        || (cfun->calls_alloca && EXIT_IGNORE_STACK)\n        || crtl->accesses_prior_frames\n        || crtl->stack_realign_needed\n-       || FRAME_POINTER_REQUIRED);\n+       || targetm.frame_pointer_required ());\n \n   frame_pointer_needed = need_fp;\n "}, {"sha": "6b6da1bea2a34961483f4bd74938c2fa1579427c", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -3702,7 +3702,8 @@ update_eliminables (HARD_REG_SET *pset)\n   struct elim_table *ep;\n \n   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n-    if ((ep->from == HARD_FRAME_POINTER_REGNUM && FRAME_POINTER_REQUIRED)\n+    if ((ep->from == HARD_FRAME_POINTER_REGNUM \n+         && targetm.frame_pointer_required ())\n #ifdef ELIMINABLE_REGS\n \t|| ! CAN_ELIMINATE (ep->from, ep->to)\n #endif"}, {"sha": "780fda410ce1f5461784413c36e3ab2a8b235d7b", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -682,7 +682,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tMUST_PASS_IN_STACK FUNCTION_ARG_PASS_BY_REFERENCE               \\\n         VECTOR_MODE_SUPPORTED_P TARGET_SUPPORTS_HIDDEN \t\t\t\\\n \tFUNCTION_ARG_PARTIAL_NREGS ASM_OUTPUT_DWARF_DTPREL\t\t\\\n-\tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS\n+\tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "ddf3e0adc4f46c883db32ee56e647e6586d688d2", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -666,6 +666,10 @@\n #define TARGET_CASE_VALUES_THRESHOLD default_case_values_threshold\n #endif\n \n+#ifndef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_false\n+#endif\n+\n /* C specific.  */\n #ifndef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX default_mode_for_suffix\n@@ -938,6 +942,7 @@\n   TARGET_INSTANTIATE_DECLS,\t\t\t\\\n   TARGET_HARD_REGNO_SCRATCH_OK,\t\t\t\\\n   TARGET_CASE_VALUES_THRESHOLD,\t\t\t\\\n+  TARGET_FRAME_POINTER_REQUIRED,\t\t\\\n   TARGET_C,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_EMUTLS,\t\t\t\t\\"}, {"sha": "bd1071794986facce5e056971539f743ed3706cd", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b1749191efa8f23067b86acddd4450ddbd543/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=b52b1749191efa8f23067b86acddd4450ddbd543", "patch": "@@ -960,6 +960,9 @@ struct gcc_target\n   /* Return the smallest number of different values for which it is best to\n      use a jump-table instead of a tree of conditional branches.  */\n   unsigned int (* case_values_threshold) (void);\n+  \n+  /* Retutn true if a function must have and use a frame pointer.  */\n+  bool (* frame_pointer_required) (void);\n \n   /* Functions specific to the C family of frontends.  */\n   struct c {"}]}