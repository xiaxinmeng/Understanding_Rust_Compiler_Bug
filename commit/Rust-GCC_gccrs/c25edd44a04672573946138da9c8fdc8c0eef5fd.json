{"sha": "c25edd44a04672573946138da9c8fdc8c0eef5fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1ZWRkNDRhMDQ2NzI1NzM5NDYxMzhkYTljOGZkYzhjMGVlZjVmZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-23T22:18:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-23T22:18:42Z"}, "message": "libgo: update to go1.8rc2\n    \n    Fix a bug in the generation of the hash value in reflect.FuncOf.\n    \n    The merge script missed a bunch of testdata files over the years.\n    Copy them over.\n    \n    Reviewed-on: https://go-review.googlesource.com/35570\n\nFrom-SVN: r244835", "tree": {"sha": "843ee0b88a49a9a81be51f8853f88eb3c11256b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843ee0b88a49a9a81be51f8853f88eb3c11256b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25edd44a04672573946138da9c8fdc8c0eef5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25edd44a04672573946138da9c8fdc8c0eef5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25edd44a04672573946138da9c8fdc8c0eef5fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25edd44a04672573946138da9c8fdc8c0eef5fd/comments", "author": null, "committer": null, "parents": [{"sha": "28826a66fb457b6655d66a40638a759617aa8673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28826a66fb457b6655d66a40638a759617aa8673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28826a66fb457b6655d66a40638a759617aa8673"}], "stats": {"total": 10975, "additions": 10871, "deletions": 104}, "files": [{"sha": "f29acdf595d4ef230f388e17b3c846b6509b4012", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -1,4 +1,4 @@\n-0655e25d8e4acfac50c6b1422dc32eca3e30803a\n+fb609ff6d940768cf4db4ab7deb93b2ab686e45d\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "92541dfc6e31523adf76f74b0d4743479b7d2350", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -1,4 +1,4 @@\n-3de6e96e4b8147f5267a2e8218a7c780b09a434f\n+59f181b6fda68ece22882945853ca2df9dbf1c88\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "212211f54d1c9a3652e99bea8a65faaf8875ea5f", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -1 +1 @@\n-go1.8rc1\n+go1.8rc2"}, {"sha": "658f6dabd90417b7c4efd8608948560f5f0365b2", "filename": "libgo/go/cmd/go/bug.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Fbug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Fbug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbug.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -20,11 +20,10 @@ import (\n var cmdBug = &Command{\n \tRun:       runBug,\n \tUsageLine: \"bug\",\n-\tShort:     \"print information for bug reports\",\n+\tShort:     \"start a bug report\",\n \tLong: `\n-Bug prints information that helps file effective bug reports.\n-\n-Bugs may be reported at https://golang.org/issue/new.\n+Bug opens the default browser and starts a new bug report.\n+The report includes useful system information.\n \t`,\n }\n "}, {"sha": "5c13b653f014f689577be89b148d1e0156d2515e", "filename": "libgo/go/cmd/go/test.go", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -906,9 +906,13 @@ func (b *builder) test(p *Package) (buildAction, runAction, printAction *action,\n \n \tif buildContext.GOOS == \"darwin\" {\n \t\tif buildContext.GOARCH == \"arm\" || buildContext.GOARCH == \"arm64\" {\n-\t\t\tt.NeedCgo = true\n+\t\t\tt.IsIOS = true\n+\t\t\tt.NeedOS = true\n \t\t}\n \t}\n+\tif t.TestMain == nil {\n+\t\tt.NeedOS = true\n+\t}\n \n \tfor _, cp := range pmain.imports {\n \t\tif len(cp.coverVars) > 0 {\n@@ -1355,7 +1359,8 @@ type testFuncs struct {\n \tNeedTest    bool\n \tImportXtest bool\n \tNeedXtest   bool\n-\tNeedCgo     bool\n+\tNeedOS      bool\n+\tIsIOS       bool\n \tCover       []coverInfo\n }\n \n@@ -1456,7 +1461,7 @@ var testmainTmpl = template.Must(template.New(\"main\").Parse(`\n package main\n \n import (\n-{{if not .TestMain}}\n+{{if .NeedOS}}\n \t\"os\"\n {{end}}\n \t\"testing\"\n@@ -1472,8 +1477,10 @@ import (\n \t_cover{{$i}} {{$p.Package.ImportPath | printf \"%q\"}}\n {{end}}\n \n-{{if .NeedCgo}}\n+{{if .IsIOS}}\n+\t\"os/signal\"\n \t_ \"runtime/cgo\"\n+\t\"syscall\"\n {{end}}\n )\n \n@@ -1535,6 +1542,32 @@ func coverRegisterFile(fileName string, counter []uint32, pos []uint32, numStmts\n {{end}}\n \n func main() {\n+{{if .IsIOS}}\n+\t// Send a SIGUSR2, which will be intercepted by LLDB to\n+\t// tell the test harness that installation was successful.\n+\t// See misc/ios/go_darwin_arm_exec.go.\n+\tsignal.Notify(make(chan os.Signal), syscall.SIGUSR2)\n+\tsyscall.Kill(0, syscall.SIGUSR2)\n+\tsignal.Reset(syscall.SIGUSR2)\n+\n+\t// The first argument supplied to an iOS test is an offset\n+\t// suffix for the current working directory.\n+\t// Process it here, and remove it from os.Args.\n+\tconst hdr = \"cwdSuffix=\"\n+\tif len(os.Args) < 2 || len(os.Args[1]) <= len(hdr) || os.Args[1][:len(hdr)] != hdr {\n+\t\tpanic(\"iOS test not passed a working directory suffix\")\n+\t}\n+\tsuffix := os.Args[1][len(hdr):]\n+\tdir, err := os.Getwd()\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif err := os.Chdir(dir + \"/\" + suffix); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tos.Args = append([]string{os.Args[0]}, os.Args[2:]...)\n+{{end}}\n+\n {{if .CoverEnabled}}\n \ttesting.RegisterCover(testing.Cover{\n \t\tMode: {{printf \"%q\" .CoverMode}},"}, {"sha": "ecdbef95dde03cb2ec8e068bc3e1304a28cb9275", "filename": "libgo/go/cmd/go/testdata/failssh/ssh", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Ffailssh%2Fssh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Ffailssh%2Fssh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Ffailssh%2Fssh?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+exit 1"}, {"sha": "f6cbf6924db1414a3001acd3c6005eff2bb99b8b", "filename": "libgo/go/cmd/go/testdata/src/badc/x.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fbadc%2Fx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fbadc%2Fx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fbadc%2Fx.c?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1 @@\n+// C code!"}, {"sha": "7f96c221c2d20dffc1a31ba53fb8476b3a8d0f8a", "filename": "libgo/go/cmd/go/testdata/src/canonical/a/vendor/c/c.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fcanonical%2Fa%2Fvendor%2Fc%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fcanonical%2Fa%2Fvendor%2Fc%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fcanonical%2Fa%2Fvendor%2Fc%2Fc.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "previous_filename": "libgo/go/cmd/go/testdata/src/canonical/a/c/c.go"}, {"sha": "c89cd18d0fe7d777c6008d0d9133c5bb808be6fc", "filename": "libgo/go/cmd/go/testdata/src/dupload/vendor/p/p.go", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fdupload%2Fvendor%2Fp%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fdupload%2Fvendor%2Fp%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fsrc%2Fdupload%2Fvendor%2Fp%2Fp.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1 @@\n+package p"}, {"sha": "33d6435e0a99dc63d16abb9cf6edaf9799b2de23", "filename": "libgo/go/cmd/gofmt/testdata/emptydecl.golden", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Femptydecl.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Femptydecl.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Femptydecl.golden?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,14 @@\n+//gofmt -s\n+\n+// Test case for issue 7631.\n+\n+package main\n+\n+// Keep this declaration\n+var ()\n+\n+const (\n+// Keep this declaration\n+)\n+\n+func main() {}"}, {"sha": "4948a61f0de2285960ebb54ed0392c474f69d503", "filename": "libgo/go/cmd/gofmt/testdata/emptydecl.input", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Femptydecl.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Femptydecl.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Femptydecl.input?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,16 @@\n+//gofmt -s\n+\n+// Test case for issue 7631.\n+\n+package main\n+\n+// Keep this declaration\n+var ()\n+\n+const (\n+// Keep this declaration\n+)\n+\n+type ()\n+\n+func main() {}\n\\ No newline at end of file"}, {"sha": "506b3a035a3684b783b29d5113087f42fbfaf87e", "filename": "libgo/go/cmd/gofmt/testdata/ranges.golden", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Franges.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Franges.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Franges.golden?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,30 @@\n+//gofmt -s\n+\n+// Test cases for range simplification.\n+package p\n+\n+func _() {\n+\tfor a, b = range x {\n+\t}\n+\tfor a = range x {\n+\t}\n+\tfor _, b = range x {\n+\t}\n+\tfor range x {\n+\t}\n+\n+\tfor a = range x {\n+\t}\n+\tfor range x {\n+\t}\n+\n+\tfor a, b := range x {\n+\t}\n+\tfor a := range x {\n+\t}\n+\tfor _, b := range x {\n+\t}\n+\n+\tfor a := range x {\n+\t}\n+}"}, {"sha": "df5f8333c21c91af3de98d58fe2aa52582491ce4", "filename": "libgo/go/cmd/gofmt/testdata/ranges.input", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Franges.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Franges.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Franges.input?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,20 @@\n+//gofmt -s\n+\n+// Test cases for range simplification.\n+package p\n+\n+func _() {\n+\tfor a, b = range x {}\n+\tfor a, _ = range x {}\n+\tfor _, b = range x {}\n+\tfor _, _ = range x {}\n+\n+\tfor a = range x {}\n+\tfor _ = range x {}\n+\n+\tfor a, b := range x {}\n+\tfor a, _ := range x {}\n+\tfor _, b := range x {}\n+\n+\tfor a := range x {}\n+}"}, {"sha": "31ce6b248528bfdc416f712bafc33bd88b99a9fc", "filename": "libgo/go/cmd/gofmt/testdata/stdin5.golden", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin5.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin5.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin5.golden?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,3 @@\n+//gofmt -stdin\n+\n+i := 5 // Line comment without newline.\n\\ No newline at end of file"}, {"sha": "0a7c97d180c2ffff94327dc1d506d81a60df58ee", "filename": "libgo/go/cmd/gofmt/testdata/stdin5.input", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin5.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin5.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin5.input?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,3 @@\n+//gofmt -stdin\n+\n+i  :=5// Line comment without newline.\n\\ No newline at end of file"}, {"sha": "ffcea8011ba53e1c0197eb3c369f4000f9da302a", "filename": "libgo/go/cmd/gofmt/testdata/stdin6.golden", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin6.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin6.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin6.golden?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,19 @@\n+\t//gofmt -stdin\n+\n+\tif err != nil {\n+\t\tsource := strings.NewReader(`line 1.\n+line 2.\n+`)\n+\t\treturn source\n+\t}\n+\n+\tf := func(hat, tail string) {\n+\n+\t\tfmt.Println(hat+`\n+foo\n+\n+\n+`+tail,\n+\t\t\t\"more\",\n+\t\t\t\"and more\")\n+\t}"}, {"sha": "78330020c659e07f6a89bcb70d0abbcb73aae123", "filename": "libgo/go/cmd/gofmt/testdata/stdin6.input", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin6.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin6.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin6.input?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,21 @@\n+\t//gofmt -stdin\n+\n+\tif err != nil {\n+\t\tsource := strings.NewReader(`line 1.\n+line 2.\n+`)\n+\t\treturn source\n+\t}\n+\n+\tf:=func(  hat, tail string){\n+\n+\n+\n+\t\t   fmt.  Println  (   hat+   `\n+foo\n+\n+\n+`+ tail  ,\n+ \"more\" ,\n+\t\t\"and more\"   )\n+\t}"}, {"sha": "bbac7133c86dfbb61b7d65cdbcecb45d16f2f703", "filename": "libgo/go/cmd/gofmt/testdata/stdin7.golden", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin7.golden", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin7.golden", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin7.golden?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,19 @@\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//gofmt -stdin\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource := strings.NewReader(`line 1.\n+line 2.\n+`)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn source\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf := func(hat, tail string) {\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfmt.Println(hat+`\n+\t\tfoo\n+\n+\n+\t`+tail,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"more\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"and more\")\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}"}, {"sha": "fd772a3c4e44fa62b022b2357efe6586c1b4f347", "filename": "libgo/go/cmd/gofmt/testdata/stdin7.input", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin7.input", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin7.input", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgofmt%2Ftestdata%2Fstdin7.input?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,21 @@\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//gofmt -stdin\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\t\t\tsource := strings.NewReader(`line 1.\n+line 2.\n+`)\n+\t\t\t\t\t\t\t\treturn source\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tf:=func(  hat, tail string){\n+\n+\n+\n+\t\t\t\t\t\t\t\t   fmt.  Println  (   hat+   `\n+\t\tfoo\n+\n+\n+\t`+ tail  ,\n+\t\t\t\t\t\t \"more\" ,\n+\t\t\t\t\t\t\t\t\"and more\"   )\n+\t\t\t\t\t\t\t}"}, {"sha": "95fb18958561b311a6d545cdc4cb976f34ab6cf4", "filename": "libgo/go/compress/bzip2/bzip2_test.go", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fbzip2%2Fbzip2_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -204,12 +204,6 @@ func TestMTF(t *testing.T) {\n \t}\n }\n \n-var (\n-\tdigits = mustLoadFile(\"testdata/e.txt.bz2\")\n-\ttwain  = mustLoadFile(\"testdata/Mark.Twain-Tom.Sawyer.txt.bz2\")\n-\trandom = mustLoadFile(\"testdata/random.data.bz2\")\n-)\n-\n func benchmarkDecode(b *testing.B, compressed []byte) {\n \t// Determine the uncompressed size of testfile.\n \tuncompressedSize, err := io.Copy(ioutil.Discard, NewReader(bytes.NewReader(compressed)))\n@@ -227,6 +221,18 @@ func benchmarkDecode(b *testing.B, compressed []byte) {\n \t}\n }\n \n-func BenchmarkDecodeDigits(b *testing.B) { benchmarkDecode(b, digits) }\n-func BenchmarkDecodeTwain(b *testing.B)  { benchmarkDecode(b, twain) }\n-func BenchmarkDecodeRand(b *testing.B)   { benchmarkDecode(b, random) }\n+func BenchmarkDecodeDigits(b *testing.B) {\n+\tdigits := mustLoadFile(\"testdata/e.txt.bz2\")\n+\tb.ResetTimer()\n+\tbenchmarkDecode(b, digits)\n+}\n+func BenchmarkDecodeTwain(b *testing.B) {\n+\ttwain := mustLoadFile(\"testdata/Mark.Twain-Tom.Sawyer.txt.bz2\")\n+\tb.ResetTimer()\n+\tbenchmarkDecode(b, twain)\n+}\n+func BenchmarkDecodeRand(b *testing.B) {\n+\trandom := mustLoadFile(\"testdata/random.data.bz2\")\n+\tb.ResetTimer()\n+\tbenchmarkDecode(b, random)\n+}"}, {"sha": "4d6a5357d881da4d90aba22d65728c60c075e287", "filename": "libgo/go/compress/flate/deflate.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -136,14 +136,17 @@ func (d *compressor) fillDeflate(b []byte) int {\n \t\t\tdelta := d.hashOffset - 1\n \t\t\td.hashOffset -= delta\n \t\t\td.chainHead -= delta\n-\t\t\tfor i, v := range d.hashPrev {\n+\n+\t\t\t// Iterate over slices instead of arrays to avoid copying\n+\t\t\t// the entire table onto the stack (Issue #18625).\n+\t\t\tfor i, v := range d.hashPrev[:] {\n \t\t\t\tif int(v) > delta {\n \t\t\t\t\td.hashPrev[i] = uint32(int(v) - delta)\n \t\t\t\t} else {\n \t\t\t\t\td.hashPrev[i] = 0\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfor i, v := range d.hashHead {\n+\t\t\tfor i, v := range d.hashHead[:] {\n \t\t\t\tif int(v) > delta {\n \t\t\t\t\td.hashHead[i] = uint32(int(v) - delta)\n \t\t\t\t} else {"}, {"sha": "fbea761721a3e4115437c0bf244068daf86cfca7", "filename": "libgo/go/compress/flate/deflate_test.go", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflate_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -12,6 +12,7 @@ import (\n \t\"io\"\n \t\"io/ioutil\"\n \t\"reflect\"\n+\t\"runtime/debug\"\n \t\"sync\"\n \t\"testing\"\n )\n@@ -864,3 +865,33 @@ func TestBestSpeedMaxMatchOffset(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestMaxStackSize(t *testing.T) {\n+\t// This test must not run in parallel with other tests as debug.SetMaxStack\n+\t// affects all goroutines.\n+\tn := debug.SetMaxStack(1 << 16)\n+\tdefer debug.SetMaxStack(n)\n+\n+\tvar wg sync.WaitGroup\n+\tdefer wg.Wait()\n+\n+\tb := make([]byte, 1<<20)\n+\tfor level := HuffmanOnly; level <= BestCompression; level++ {\n+\t\t// Run in separate goroutine to increase probability of stack regrowth.\n+\t\twg.Add(1)\n+\t\tgo func(level int) {\n+\t\t\tdefer wg.Done()\n+\t\t\tzw, err := NewWriter(ioutil.Discard, level)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"level %d, NewWriter() = %v, want nil\", level, err)\n+\t\t\t}\n+\t\t\tif n, err := zw.Write(b); n != len(b) || err != nil {\n+\t\t\t\tt.Errorf(\"level %d, Write() = (%d, %v), want (%d, nil)\", level, n, err, len(b))\n+\t\t\t}\n+\t\t\tif err := zw.Close(); err != nil {\n+\t\t\t\tt.Errorf(\"level %d, Close() = %v, want nil\", level, err)\n+\t\t\t}\n+\t\t\tzw.Reset(ioutil.Discard)\n+\t\t}(level)\n+\t}\n+}"}, {"sha": "08298b76bbb2da5a7882d439d61d8428b28f632a", "filename": "libgo/go/compress/flate/deflatefast.go", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflatefast.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflatefast.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fflate%2Fdeflatefast.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -60,7 +60,7 @@ func newDeflateFast() *deflateFast {\n func (e *deflateFast) encode(dst []token, src []byte) []token {\n \t// Ensure that e.cur doesn't wrap.\n \tif e.cur > 1<<30 {\n-\t\t*e = deflateFast{cur: maxStoreBlockSize, prev: e.prev[:0]}\n+\t\te.resetAll()\n \t}\n \n \t// This check isn't in the Snappy implementation, but there, the caller\n@@ -265,6 +265,21 @@ func (e *deflateFast) reset() {\n \n \t// Protect against e.cur wraparound.\n \tif e.cur > 1<<30 {\n-\t\t*e = deflateFast{cur: maxStoreBlockSize, prev: e.prev[:0]}\n+\t\te.resetAll()\n+\t}\n+}\n+\n+// resetAll resets the deflateFast struct and is only called in rare\n+// situations to prevent integer overflow. It manually resets each field\n+// to avoid causing large stack growth.\n+//\n+// See https://golang.org/issue/18636.\n+func (e *deflateFast) resetAll() {\n+\t// This is equivalent to:\n+\t//\t*e = deflateFast{cur: maxStoreBlockSize, prev: e.prev[:0]}\n+\te.cur = maxStoreBlockSize\n+\te.prev = e.prev[:0]\n+\tfor i := range e.table {\n+\t\te.table[i] = tableEntry{}\n \t}\n }"}, {"sha": "30c1390dfd7faf0ca4d2e1e37c8868db2f9e2089", "filename": "libgo/go/compress/gzip/issue14937_test.go", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fgzip%2Fissue14937_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcompress%2Fgzip%2Fissue14937_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcompress%2Fgzip%2Fissue14937_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -9,11 +9,17 @@ import (\n \t\"testing\"\n )\n \n-// Per golang.org/issue/14937, check that every .gz file\n-// in the tree has a zero mtime.\n+// TestGZIPFilesHaveZeroMTimes checks that every .gz file in the tree\n+// has a zero MTIME. This is a requirement for the Debian maintainers\n+// to be able to have deterministic packages.\n+//\n+// See https://golang.org/issue/14937.\n func TestGZIPFilesHaveZeroMTimes(t *testing.T) {\n-\tif testing.Short() && testenv.Builder() == \"\" {\n-\t\tt.Skip(\"skipping in short mode\")\n+\t// To avoid spurious false positives due to untracked GZIP files that\n+\t// may be in the user's GOROOT (Issue 18604), we only run this test on\n+\t// the builders, which should have a clean checkout of the tree.\n+\tif testenv.Builder() == \"\" {\n+\t\tt.Skip(\"skipping test on non-builder\")\n \t}\n \tgoroot, err := filepath.EvalSymlinks(runtime.GOROOT())\n \tif err != nil {"}, {"sha": "09fe2b4271aa2d31adaec27020d1a317ef44fe70", "filename": "libgo/go/crypto/ecdsa/testdata/SigVer.rsp.bz2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fecdsa%2Ftestdata%2FSigVer.rsp.bz2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fecdsa%2Ftestdata%2FSigVer.rsp.bz2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fecdsa%2Ftestdata%2FSigVer.rsp.bz2?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "beb0f1926d89947d9603f0dbc2561ae08320d67f", "filename": "libgo/go/crypto/tls/cipher_suites.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Ftls%2Fcipher_suites.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Ftls%2Fcipher_suites.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Fcipher_suites.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -84,15 +84,15 @@ var cipherSuites = []*cipherSuite{\n \t{TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, 16, 0, 4, ecdheECDSAKA, suiteECDHE | suiteECDSA | suiteTLS12, nil, nil, aeadAESGCM},\n \t{TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, 32, 0, 4, ecdheRSAKA, suiteECDHE | suiteTLS12 | suiteSHA384, nil, nil, aeadAESGCM},\n \t{TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, 32, 0, 4, ecdheECDSAKA, suiteECDHE | suiteECDSA | suiteTLS12 | suiteSHA384, nil, nil, aeadAESGCM},\n-\t{TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, 16, 32, 16, ecdheRSAKA, suiteECDHE | suiteTLS12, cipherAES, macSHA256, nil},\n+\t{TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, 16, 32, 16, ecdheRSAKA, suiteECDHE | suiteTLS12 | suiteDefaultOff, cipherAES, macSHA256, nil},\n \t{TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, 16, 20, 16, ecdheRSAKA, suiteECDHE, cipherAES, macSHA1, nil},\n-\t{TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, 16, 32, 16, ecdheECDSAKA, suiteECDHE | suiteECDSA | suiteTLS12, cipherAES, macSHA256, nil},\n+\t{TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, 16, 32, 16, ecdheECDSAKA, suiteECDHE | suiteECDSA | suiteTLS12 | suiteDefaultOff, cipherAES, macSHA256, nil},\n \t{TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, 16, 20, 16, ecdheECDSAKA, suiteECDHE | suiteECDSA, cipherAES, macSHA1, nil},\n \t{TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, 32, 20, 16, ecdheRSAKA, suiteECDHE, cipherAES, macSHA1, nil},\n \t{TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, 32, 20, 16, ecdheECDSAKA, suiteECDHE | suiteECDSA, cipherAES, macSHA1, nil},\n \t{TLS_RSA_WITH_AES_128_GCM_SHA256, 16, 0, 4, rsaKA, suiteTLS12, nil, nil, aeadAESGCM},\n \t{TLS_RSA_WITH_AES_256_GCM_SHA384, 32, 0, 4, rsaKA, suiteTLS12 | suiteSHA384, nil, nil, aeadAESGCM},\n-\t{TLS_RSA_WITH_AES_128_CBC_SHA256, 16, 32, 16, rsaKA, suiteTLS12, cipherAES, macSHA256, nil},\n+\t{TLS_RSA_WITH_AES_128_CBC_SHA256, 16, 32, 16, rsaKA, suiteTLS12 | suiteDefaultOff, cipherAES, macSHA256, nil},\n \t{TLS_RSA_WITH_AES_128_CBC_SHA, 16, 20, 16, rsaKA, 0, cipherAES, macSHA1, nil},\n \t{TLS_RSA_WITH_AES_256_CBC_SHA, 32, 20, 16, rsaKA, 0, cipherAES, macSHA1, nil},\n \t{TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, ecdheRSAKA, suiteECDHE, cipher3DES, macSHA1, nil},"}, {"sha": "615d1e5576fdaab8c772eadae62a3d146757cc6d", "filename": "libgo/go/crypto/tls/tls.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Ftls%2Ftls.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -6,8 +6,8 @@\n package tls\n \n // BUG(agl): The crypto/tls package only implements some countermeasures\n-// against Lucky13 attacks on CBC-mode encryption. See\n-// http://www.isg.rhul.ac.uk/tls/TLStiming.pdf and\n+// against Lucky13 attacks on CBC-mode encryption, and only on SHA1\n+// variants. See http://www.isg.rhul.ac.uk/tls/TLStiming.pdf and\n // https://www.imperialviolet.org/2013/02/04/luckythirteen.html.\n \n import ("}, {"sha": "71ffbdf0e0460bd2df3d2a4e269f6056e3bd6b0d", "filename": "libgo/go/crypto/x509/cert_pool.go", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fx509%2Fcert_pool.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fx509%2Fcert_pool.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fcert_pool.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -4,7 +4,11 @@\n \n package x509\n \n-import \"encoding/pem\"\n+import (\n+\t\"encoding/pem\"\n+\t\"errors\"\n+\t\"runtime\"\n+)\n \n // CertPool is a set of certificates.\n type CertPool struct {\n@@ -26,6 +30,11 @@ func NewCertPool() *CertPool {\n // Any mutations to the returned pool are not written to disk and do\n // not affect any other pool.\n func SystemCertPool() (*CertPool, error) {\n+\tif runtime.GOOS == \"windows\" {\n+\t\t// Issue 16736, 18609:\n+\t\treturn nil, errors.New(\"crypto/x509: system root pool is not available on Windows\")\n+\t}\n+\n \treturn loadSystemRoots()\n }\n "}, {"sha": "a936fec7d8447dbc27669b4ff9aae4f2a32288e2", "filename": "libgo/go/crypto/x509/root_windows.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_windows.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_windows.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Froot_windows.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -226,6 +226,11 @@ func (c *Certificate) systemVerify(opts *VerifyOptions) (chains [][]*Certificate\n }\n \n func loadSystemRoots() (*CertPool, error) {\n+\t// TODO: restore this functionality on Windows. We tried to do\n+\t// it in Go 1.8 but had to revert it. See Issue 18609.\n+\t// Returning (nil, nil) was the old behavior, prior to CL 30578.\n+\treturn nil, nil\n+\n \tconst CRYPT_E_NOT_FOUND = 0x80092004\n \n \tstore, err := syscall.CertOpenSystemStore(0, syscall.StringToUTF16Ptr(\"ROOT\"))"}, {"sha": "b085dad90f06a5f78a21e91d0f4ea5f2ef102522", "filename": "libgo/go/crypto/x509/x509_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fx509%2Fx509_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -24,6 +24,7 @@ import (\n \t\"net\"\n \t\"os/exec\"\n \t\"reflect\"\n+\t\"runtime\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n@@ -1477,6 +1478,9 @@ func TestMultipleRDN(t *testing.T) {\n }\n \n func TestSystemCertPool(t *testing.T) {\n+\tif runtime.GOOS == \"windows\" {\n+\t\tt.Skip(\"not implemented on Windows; Issue 16736, 18609\")\n+\t}\n \t_, err := SystemCertPool()\n \tif err != nil {\n \t\tt.Fatal(err)"}, {"sha": "a400c7152a668a3e28e89ef9f18ff90d5357269a", "filename": "libgo/go/go/ast/scope.go", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Fast%2Fscope.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Fast%2Fscope.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fast%2Fscope.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -70,10 +70,8 @@ func (s *Scope) String() string {\n // The Data fields contains object-specific data:\n //\n //\tKind    Data type         Data value\n-//\tPkg\t*types.Package    package scope\n+//\tPkg     *Scope            package scope\n //\tCon     int               iota for the respective declaration\n-//\tCon     != nil            constant value\n-//\tTyp     *Scope            (used as method scope during type checking - transient)\n //\n type Object struct {\n \tKind ObjKind"}, {"sha": "82e63100d4764d68516070e2e0e7fec2ac314011", "filename": "libgo/go/go/doc/doc_test.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Fdoc%2Fdoc_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Fdoc%2Fdoc_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fdoc%2Fdoc_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -25,7 +25,7 @@ var files = flag.String(\"files\", \"\", \"consider only Go test files matching this\n \n const dataDir = \"testdata\"\n \n-var templateTxt = readTemplate(\"template.txt\")\n+var templateTxt *template.Template\n \n func readTemplate(filename string) *template.Template {\n \tt := template.New(filename)\n@@ -96,6 +96,9 @@ func test(t *testing.T, mode Mode) {\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n+\tif templateTxt == nil {\n+\t\ttemplateTxt = readTemplate(\"template.txt\")\n+\t}\n \n \t// test packages\n \tfor _, pkg := range pkgs {"}, {"sha": "b66524f80edd51d9837b59cae36f73a9fa4f4e18", "filename": "libgo/go/go/internal/gccgoimporter/testdata/complexnums.gox", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fcomplexnums.gox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fcomplexnums.gox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fcomplexnums.gox?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,8 @@\n+v1;\n+package complexnums;\n+pkgpath complexnums;\n+priority 1;\n+const NN = -0.1E1-0.1E1i ;\n+const NP = -0.1E1+0.1E1i ;\n+const PN = 0.1E1-0.1E1i ;\n+const PP = 0.1E1+0.1E1i ;"}, {"sha": "7de6cdad2ceb9c21d7bc0f43cc65c7f81c277e73", "filename": "libgo/go/go/internal/gccgoimporter/testdata/conversions.gox", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fconversions.gox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fconversions.gox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fconversions.gox?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,6 @@\n+v2;\n+package conversions;\n+prefix go;\n+package conversions go.conversions go.conversions;\n+const Bits <type 1 \"Units\" <type -16>> = convert(<type 1>, \"bits\");\n+type <type 1>;"}, {"sha": "958a4f5b82109a94bee63ebdca66c6aea0b89dda", "filename": "libgo/go/go/internal/gccgoimporter/testdata/imports.gox", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fimports.gox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fimports.gox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fimports.gox?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,7 @@\n+v1;\n+package imports;\n+pkgpath imports;\n+priority 7;\n+import fmt fmt \"fmt\";\n+init imports imports..import 7 math math..import 1 runtime runtime..import 1 strconv strconv..import 2 io io..import 3 reflect reflect..import 3 syscall syscall..import 3 time time..import 4 os os..import 5 fmt fmt..import 6;\n+var Hello <type -16>;"}, {"sha": "d96ebbdd1418933ac6919ec05efca99ae0508345", "filename": "libgo/go/go/internal/gccgoimporter/testdata/pointer.gox", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fpointer.gox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fpointer.gox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Fpointer.gox?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,4 @@\n+v1;\n+package pointer;\n+pkgpath pointer;\n+type <type 1 \"Int8Ptr\" <type 2 *<type -1>>>;"}, {"sha": "80c2dbcb472813d114032c583c85134a8f340590", "filename": "libgo/go/go/internal/gccgoimporter/testdata/time.gox", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Ftime.gox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Ftime.gox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Ftime.gox?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "e70e539655e9f00af598bffa62f987c77cd96009", "filename": "libgo/go/go/internal/gccgoimporter/testdata/unicode.gox", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Funicode.gox", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Funicode.gox", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Ftestdata%2Funicode.gox?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "b2e1c11e9d538ed6c317e07740ce03c0d64f7866", "filename": "libgo/go/go/parser/performance_test.go", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Fparser%2Fperformance_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Fparser%2Fperformance_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fparser%2Fperformance_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -10,17 +10,12 @@ import (\n \t\"testing\"\n )\n \n-var src = readFile(\"parser.go\")\n-\n-func readFile(filename string) []byte {\n-\tdata, err := ioutil.ReadFile(filename)\n+func BenchmarkParse(b *testing.B) {\n+\tsrc, err := ioutil.ReadFile(\"parser.go\")\n \tif err != nil {\n-\t\tpanic(err)\n+\t\tb.Fatal(err)\n \t}\n-\treturn data\n-}\n-\n-func BenchmarkParse(b *testing.B) {\n+\tb.ResetTimer()\n \tb.SetBytes(int64(len(src)))\n \tfor i := 0; i < b.N; i++ {\n \t\tif _, err := ParseFile(token.NewFileSet(), \"\", src, ParseComments); err != nil {"}, {"sha": "6a2507f482e9a88af436d75bfa9c4fd5f4361051", "filename": "libgo/go/go/types/testdata/blank.src", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fblank.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fblank.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fblank.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,5 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package _ /* ERROR invalid package name */"}, {"sha": "7fb7b58a48d904cd7f4f5a0413b557327930df4e", "filename": "libgo/go/go/types/testdata/builtins.src", "status": "added", "additions": 901, "deletions": 0, "changes": 901, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fbuiltins.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fbuiltins.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fbuiltins.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,901 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// builtin calls\n+\n+package builtins\n+\n+import \"unsafe\"\n+\n+func f0() {}\n+\n+func append1() {\n+\tvar b byte\n+\tvar x int\n+\tvar s []byte\n+\t_ = append() // ERROR not enough arguments\n+\t_ = append(\"foo\" /* ERROR not a slice */ )\n+\t_ = append(nil /* ERROR not a slice */ , s)\n+\t_ = append(x /* ERROR not a slice */ , s)\n+\t_ = append(s)\n+\tappend /* ERROR not used */ (s)\n+\n+\t_ = append(s, b)\n+\t_ = append(s, x /* ERROR cannot use x */ )\n+\t_ = append(s, s /* ERROR cannot use s */ )\n+\t_ = append(s... /* ERROR can only use ... with matching parameter */ )\n+\t_ = append(s, b, s... /* ERROR can only use ... with matching parameter */ )\n+\t_ = append(s, 1, 2, 3)\n+\t_ = append(s, 1, 2, 3, x /* ERROR cannot use x */ , 5, 6, 6)\n+\t_ = append(s, 1, 2, s... /* ERROR can only use ... with matching parameter */ )\n+\t_ = append([]interface{}(nil), 1, 2, \"foo\", x, 3.1425, false)\n+\n+\ttype S []byte\n+\ttype T string\n+\tvar t T\n+\t_ = append(s, \"foo\" /* ERROR cannot convert */ )\n+\t_ = append(s, \"foo\"...)\n+\t_ = append(S(s), \"foo\" /* ERROR cannot convert */ )\n+\t_ = append(S(s), \"foo\"...)\n+\t_ = append(s, t /* ERROR cannot use t */ )\n+\t_ = append(s, t...)\n+\t_ = append(s, T(\"foo\")...)\n+\t_ = append(S(s), t /* ERROR cannot use t */ )\n+\t_ = append(S(s), t...)\n+\t_ = append(S(s), T(\"foo\")...)\n+\t_ = append([]string{}, t /* ERROR cannot use t */ , \"foo\")\n+\t_ = append([]T{}, t, \"foo\")\n+}\n+\n+// from the spec\n+func append2() {\n+\ts0 := []int{0, 0}\n+\ts1 := append(s0, 2)                // append a single element     s1 == []int{0, 0, 2}\n+\ts2 := append(s1, 3, 5, 7)          // append multiple elements    s2 == []int{0, 0, 2, 3, 5, 7}\n+\ts3 := append(s2, s0...)            // append a slice              s3 == []int{0, 0, 2, 3, 5, 7, 0, 0}\n+\ts4 := append(s3[3:6], s3[2:]...)   // append overlapping slice    s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0}\n+\n+\tvar t []interface{}\n+\tt = append(t, 42, 3.1415, \"foo\")   //                             t == []interface{}{42, 3.1415, \"foo\"}\n+\n+\tvar b []byte\n+\tb = append(b, \"bar\"...)            // append string contents      b == []byte{'b', 'a', 'r' }\n+\n+\t_ = s4\n+}\n+\n+func append3() {\n+\tf1 := func() (s []int) { return }\n+\tf2 := func() (s []int, x int) { return }\n+\tf3 := func() (s []int, x, y int) { return }\n+\tf5 := func() (s []interface{}, x int, y float32, z string, b bool) { return }\n+\tff := func() (int, float32) { return 0, 0 }\n+\t_ = append(f0 /* ERROR used as value */ ())\n+\t_ = append(f1())\n+\t_ = append(f2())\n+\t_ = append(f3())\n+\t_ = append(f5())\n+\t_ = append(ff /* ERROR not a slice */ ()) // TODO(gri) better error message\n+}\n+\n+func cap1() {\n+\tvar a [10]bool\n+\tvar p *[20]int\n+\tvar c chan string\n+\t_ = cap() // ERROR not enough arguments\n+\t_ = cap(1, 2) // ERROR too many arguments\n+\t_ = cap(42 /* ERROR invalid */)\n+\tconst _3 = cap(a)\n+\tassert(_3 == 10)\n+\tconst _4 = cap(p)\n+\tassert(_4 == 20)\n+\t_ = cap(c)\n+\tcap /* ERROR not used */ (c)\n+\n+\t// issue 4744\n+\ttype T struct{ a [10]int }\n+\tconst _ = cap(((*T)(nil)).a)\n+\n+\tvar s [][]byte\n+\t_ = cap(s)\n+\t_ = cap(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func cap2() {\n+\tf1a := func() (a [10]int) { return }\n+\tf1s := func() (s []int) { return }\n+\tf2 := func() (s []int, x int) { return }\n+\t_ = cap(f0 /* ERROR used as value */ ())\n+\t_ = cap(f1a())\n+\t_ = cap(f1s())\n+\t_ = cap(f2()) // ERROR too many arguments\n+}\n+\n+// test cases for issue 7387\n+func cap3() {\n+\tvar f = func() int { return 0 }\n+\tvar x = f()\n+\tconst (\n+\t\t_ = cap([4]int{})\n+\t\t_ = cap([4]int{x})\n+\t\t_ = cap /* ERROR not constant */ ([4]int{f()})\n+\t\t_ = cap /* ERROR not constant */ ([4]int{cap([]int{})})\n+\t\t_ = cap([4]int{cap([4]int{})})\n+\t)\n+\tvar y float64\n+\tvar z complex128\n+\tconst (\n+\t\t_ = cap([4]float64{})\n+\t\t_ = cap([4]float64{y})\n+\t\t_ = cap([4]float64{real(2i)})\n+\t\t_ = cap /* ERROR not constant */ ([4]float64{real(z)})\n+\t)\n+\tvar ch chan [10]int\n+\tconst (\n+\t\t_ = cap /* ERROR not constant */ (<-ch)\n+\t\t_ = cap /* ERROR not constant */ ([4]int{(<-ch)[0]})\n+\t)\n+}\n+\n+func close1() {\n+\tvar c chan int\n+\tvar r <-chan int\n+\tclose() // ERROR not enough arguments\n+\tclose(1, 2) // ERROR too many arguments\n+\tclose(42 /* ERROR not a channel */)\n+\tclose(r /* ERROR receive-only channel */)\n+\tclose(c)\n+\t_ = close /* ERROR used as value */ (c)\n+\n+\tvar s []chan int\n+\tclose(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func close2() {\n+\tf1 := func() (ch chan int) { return }\n+\tf2 := func() (ch chan int, x int) { return }\n+\tclose(f0 /* ERROR used as value */ ())\n+\tclose(f1())\n+\tclose(f2()) // ERROR too many arguments\n+}\n+\n+func complex1() {\n+\tvar i32 int32\n+\tvar f32 float32\n+\tvar f64 float64\n+\tvar c64 complex64\n+\tvar c128 complex128\n+\t_ = complex() // ERROR not enough arguments\n+\t_ = complex(1) // ERROR not enough arguments\n+\t_ = complex(true /* ERROR mismatched types */ , 0)\n+\t_ = complex(i32 /* ERROR expected floating-point */ , 0)\n+\t_ = complex(\"foo\" /* ERROR mismatched types */ , 0)\n+\t_ = complex(c64 /* ERROR expected floating-point */ , 0)\n+\t_ = complex(0 /* ERROR mismatched types */ , true)\n+\t_ = complex(0 /* ERROR expected floating-point */ , i32)\n+\t_ = complex(0 /* ERROR mismatched types */ , \"foo\")\n+\t_ = complex(0 /* ERROR expected floating-point */ , c64)\n+\t_ = complex(f32, f32)\n+\t_ = complex(f32, 1)\n+\t_ = complex(f32, 1.0)\n+\t_ = complex(f32, 'a')\n+\t_ = complex(f64, f64)\n+\t_ = complex(f64, 1)\n+\t_ = complex(f64, 1.0)\n+\t_ = complex(f64, 'a')\n+\t_ = complex(f32 /* ERROR mismatched types */ , f64)\n+\t_ = complex(f64 /* ERROR mismatched types */ , f32)\n+\t_ = complex(1, 1)\n+\t_ = complex(1, 1.1)\n+\t_ = complex(1, 'a')\n+\tcomplex /* ERROR not used */ (1, 2)\n+\n+\tvar _ complex64 = complex(f32, f32)\n+\tvar _ complex64 = complex /* ERROR cannot use .* in variable declaration */ (f64, f64)\n+\n+\tvar _ complex128 = complex /* ERROR cannot use .* in variable declaration */ (f32, f32)\n+\tvar _ complex128 = complex(f64, f64)\n+\n+\t// untyped constants\n+\tconst _ int = complex(1, 0)\n+\tconst _ float32 = complex(1, 0)\n+\tconst _ complex64 = complex(1, 0)\n+\tconst _ complex128 = complex(1, 0)\n+\tconst _ = complex(0i, 0i)\n+\tconst _ = complex(0i, 0)\n+\tconst _ int = 1.0 + complex(1, 0i)\n+\n+\tconst _ int = complex /* ERROR int */ (1.1, 0)\n+\tconst _ float32 = complex /* ERROR float32 */ (1, 2)\n+\n+\t// untyped values\n+\tvar s uint\n+\t_ = complex(1 /* ERROR integer */ <<s, 0)\n+\tconst _ = complex /* ERROR not constant */ (1 /* ERROR integer */ <<s, 0)\n+\tvar _ int = complex /* ERROR cannot use .* in variable declaration */ (1 /* ERROR integer */ <<s, 0)\n+\n+\t// floating-point argument types must be identical\n+\ttype F32 float32\n+\ttype F64 float64\n+\tvar x32 F32\n+\tvar x64 F64\n+\tc64 = complex(x32, x32)\n+\t_ = complex(x32 /* ERROR mismatched types */ , f32)\n+\t_ = complex(f32 /* ERROR mismatched types */ , x32)\n+\tc128 = complex(x64, x64)\n+\t_ = c128\n+\t_ = complex(x64 /* ERROR mismatched types */ , f64)\n+\t_ = complex(f64 /* ERROR mismatched types */ , x64)\n+\n+\tvar t []float32\n+\t_ = complex(t... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func complex2() {\n+\tf1 := func() (x float32) { return }\n+\tf2 := func() (x, y float32) { return }\n+\tf3 := func() (x, y, z float32) { return }\n+\t_ = complex(f0 /* ERROR used as value */ ())\n+\t_ = complex(f1()) // ERROR not enough arguments\n+\t_ = complex(f2())\n+\t_ = complex(f3()) // ERROR too many arguments\n+}\n+\n+func copy1() {\n+\tcopy() // ERROR not enough arguments\n+\tcopy(\"foo\") // ERROR not enough arguments\n+\tcopy([ /* ERROR copy expects slice arguments */ ...]int{}, []int{})\n+\tcopy([ /* ERROR copy expects slice arguments */ ]int{}, [...]int{})\n+\tcopy([ /* ERROR different element types */ ]int8{}, \"foo\")\n+\n+\t// spec examples\n+\tvar a = [...]int{0, 1, 2, 3, 4, 5, 6, 7}\n+\tvar s = make([]int, 6)\n+\tvar b = make([]byte, 5)\n+\tn1 := copy(s, a[0:])            // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}\n+\tn2 := copy(s, s[2:])            // n2 == 4, s == []int{2, 3, 4, 5, 4, 5}\n+\tn3 := copy(b, \"Hello, World!\")  // n3 == 5, b == []byte(\"Hello\")\n+\t_, _, _ = n1, n2, n3\n+\n+\tvar t [][]int\n+\tcopy(t, t)\n+\tcopy(t /* ERROR copy expects slice arguments */ , nil)\n+\tcopy(nil /* ERROR copy expects slice arguments */ , t)\n+\tcopy(nil /* ERROR copy expects slice arguments */ , nil)\n+\tcopy(t... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func copy2() {\n+\tf1 := func() (a []int) { return }\n+\tf2 := func() (a, b []int) { return }\n+\tf3 := func() (a, b, c []int) { return }\n+\tcopy(f0 /* ERROR used as value */ ())\n+\tcopy(f1()) // ERROR not enough arguments\n+\tcopy(f2())\n+\tcopy(f3()) // ERROR too many arguments\n+}\n+\n+func delete1() {\n+\tvar m map[string]int\n+\tvar s string\n+\tdelete() // ERROR not enough arguments\n+\tdelete(1) // ERROR not enough arguments\n+\tdelete(1, 2, 3) // ERROR too many arguments\n+\tdelete(m, 0 /* ERROR not assignable */)\n+\tdelete(m, s)\n+\t_ = delete /* ERROR used as value */ (m, s)\n+\n+\tvar t []map[string]string\n+\tdelete(t... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func delete2() {\n+\tf1 := func() (m map[string]int) { return }\n+\tf2 := func() (m map[string]int, k string) { return }\n+\tf3 := func() (m map[string]int, k string, x float32) { return }\n+\tdelete(f0 /* ERROR used as value */ ())\n+\tdelete(f1()) // ERROR not enough arguments\n+\tdelete(f2())\n+\tdelete(f3()) // ERROR too many arguments\n+}\n+\n+func imag1() {\n+\tvar f32 float32\n+\tvar f64 float64\n+\tvar c64 complex64\n+\tvar c128 complex128\n+\t_ = imag() // ERROR not enough arguments\n+\t_ = imag(1, 2) // ERROR too many arguments\n+\t_ = imag(10)\n+\t_ = imag(2.7182818)\n+\t_ = imag(\"foo\" /* ERROR expected complex */)\n+\t_ = imag('a')\n+\tconst _5 = imag(1 + 2i)\n+\tassert(_5 == 2)\n+\tf32 = _5\n+\tf64 = _5\n+\tconst _6 = imag(0i)\n+\tassert(_6 == 0)\n+\tf32 = imag(c64)\n+\tf64 = imag(c128)\n+\tf32 = imag /* ERROR cannot use .* in assignment */ (c128)\n+\tf64 = imag /* ERROR cannot use .* in assignment */ (c64)\n+\timag /* ERROR not used */ (c64)\n+\t_, _ = f32, f64\n+\n+\t// complex type may not be predeclared\n+\ttype C64 complex64\n+\ttype C128 complex128\n+\tvar x64 C64\n+\tvar x128 C128\n+\tf32 = imag(x64)\n+\tf64 = imag(x128)\n+\n+\tvar a []complex64\n+\t_ = imag(a... /* ERROR invalid use of \\.\\.\\. */ )\n+\n+\t// if argument is untyped, result is untyped\n+\tconst _ byte = imag(1.2 + 3i)\n+\tconst _ complex128 = imag(1.2 + 3i)\n+\n+\t// lhs constant shift operands are typed as complex128\n+\tvar s uint\n+\t_ = imag(1 /* ERROR must be integer */ << s)\n+}\n+\n+func imag2() {\n+\tf1 := func() (x complex128) { return }\n+\tf2 := func() (x, y complex128) { return }\n+\t_ = imag(f0 /* ERROR used as value */ ())\n+\t_ = imag(f1())\n+\t_ = imag(f2()) // ERROR too many arguments\n+}\n+\n+func len1() {\n+\tconst c = \"foobar\"\n+\tvar a [10]bool\n+\tvar p *[20]int\n+\tvar m map[string]complex128\n+\t_ = len() // ERROR not enough arguments\n+\t_ = len(1, 2) // ERROR too many arguments\n+\t_ = len(42 /* ERROR invalid */)\n+\tconst _3 = len(c)\n+\tassert(_3 == 6)\n+\tconst _4 = len(a)\n+\tassert(_4 == 10)\n+\tconst _5 = len(p)\n+\tassert(_5 == 20)\n+\t_ = len(m)\n+\tlen /* ERROR not used */ (c)\n+\n+\t// esoteric case\n+\tvar t string\n+\tvar hash map[interface{}][]*[10]int\n+\tconst n = len /* ERROR not constant */ (hash[recover()][len(t)])\n+\tassert(n == 10) // ok because n has unknown value and no error is reported\n+\tvar ch <-chan int\n+\tconst nn = len /* ERROR not constant */ (hash[<-ch][len(t)])\n+\n+\t// issue 4744\n+\ttype T struct{ a [10]int }\n+\tconst _ = len(((*T)(nil)).a)\n+\n+\tvar s [][]byte\n+\t_ = len(s)\n+\t_ = len(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func len2() {\n+\tf1 := func() (x []int) { return }\n+\tf2 := func() (x, y []int) { return }\n+\t_ = len(f0 /* ERROR used as value */ ())\n+\t_ = len(f1())\n+\t_ = len(f2()) // ERROR too many arguments\n+}\n+\n+// test cases for issue 7387\n+func len3() {\n+\tvar f = func() int { return 0 }\n+\tvar x = f()\n+\tconst (\n+\t\t_ = len([4]int{})\n+\t\t_ = len([4]int{x})\n+\t\t_ = len /* ERROR not constant */ ([4]int{f()})\n+\t\t_ = len /* ERROR not constant */ ([4]int{len([]int{})})\n+\t\t_ = len([4]int{len([4]int{})})\n+\t)\n+\tvar y float64\n+\tvar z complex128\n+\tconst (\n+\t\t_ = len([4]float64{})\n+\t\t_ = len([4]float64{y})\n+\t\t_ = len([4]float64{real(2i)})\n+\t\t_ = len /* ERROR not constant */ ([4]float64{real(z)})\n+\t)\n+\tvar ch chan [10]int\n+\tconst (\n+\t\t_ = len /* ERROR not constant */ (<-ch)\n+\t\t_ = len /* ERROR not constant */ ([4]int{(<-ch)[0]})\n+\t)\n+}\n+\n+func make1() {\n+\tvar n int\n+\tvar m float32\n+\tvar s uint\n+\n+\t_ = make() // ERROR not enough arguments\n+\t_ = make(1 /* ERROR not a type */)\n+\t_ = make(int /* ERROR cannot make */)\n+\n+\t// slices\n+\t_ = make/* ERROR arguments */ ([]int)\n+\t_ = make/* ERROR arguments */ ([]int, 2, 3, 4)\n+\t_ = make([]int, int /* ERROR not an expression */)\n+\t_ = make([]int, 10, float32 /* ERROR not an expression */)\n+\t_ = make([]int, \"foo\" /* ERROR cannot convert */)\n+\t_ = make([]int, 10, 2.3 /* ERROR truncated */)\n+\t_ = make([]int, 5, 10.0)\n+\t_ = make([]int, 0i)\n+\t_ = make([]int, 1.0)\n+\t_ = make([]int, 1.0<<s)\n+\t_ = make([]int, 1.1 /* ERROR int */ <<s)\n+\t_ = make([]int, - /* ERROR must not be negative */ 1, 10)\n+\t_ = make([]int, 0, - /* ERROR must not be negative */ 1)\n+\t_ = make([]int, - /* ERROR must not be negative */ 1, - /* ERROR must not be negative */ 1)\n+\t_ = make([]int, 1 /* ERROR overflows */ <<100, 1 /* ERROR overflows */ <<100)\n+\t_ = make([]int, 10 /* ERROR length and capacity swapped */ , 9)\n+\t_ = make([]int, 1 /* ERROR overflows */ <<100, 12345)\n+\t_ = make([]int, m /* ERROR must be integer */ )\n+        _ = &make /* ERROR cannot take address */ ([]int, 0)\n+\n+\t// maps\n+\t_ = make /* ERROR arguments */ (map[int]string, 10, 20)\n+\t_ = make(map[int]float32, int /* ERROR not an expression */)\n+\t_ = make(map[int]float32, \"foo\" /* ERROR cannot convert */)\n+\t_ = make(map[int]float32, 10)\n+\t_ = make(map[int]float32, n)\n+\t_ = make(map[int]float32, int64(n))\n+\t_ = make(map[string]bool, 10.0)\n+\t_ = make(map[string]bool, 10.0<<s)\n+        _ = &make /* ERROR cannot take address */ (map[string]bool)\n+\n+\t// channels\n+\t_ = make /* ERROR arguments */ (chan int, 10, 20)\n+\t_ = make(chan int, int /* ERROR not an expression */)\n+\t_ = make(chan<- int, \"foo\" /* ERROR cannot convert */)\n+\t_ = make(chan int, - /* ERROR must not be negative */ 10)\n+\t_ = make(<-chan float64, 10)\n+\t_ = make(chan chan int, n)\n+\t_ = make(chan string, int64(n))\n+\t_ = make(chan bool, 10.0)\n+\t_ = make(chan bool, 10.0<<s)\n+        _ = &make /* ERROR cannot take address */ (chan bool)\n+\n+\tmake /* ERROR not used */ ([]int, 10)\n+\n+\tvar t []int\n+\t_ = make([]int, t[0], t[1])\n+\t_ = make([]int, t... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func make2() {\n+\tf1 /* ERROR not used */ := func() (x []int) { return }\n+\t_ = make(f0 /* ERROR not a type */ ())\n+\t_ = make(f1 /* ERROR not a type */ ())\n+}\n+\n+func new1() {\n+\t_ = new() // ERROR not enough arguments\n+\t_ = new(1, 2) // ERROR too many arguments\n+\t_ = new(\"foo\" /* ERROR not a type */)\n+\tp := new(float64)\n+\t_ = new(struct{ x, y int })\n+\tq := new(*float64)\n+\t_ = *p == **q\n+\tnew /* ERROR not used */ (int)\n+        _ = &new /* ERROR cannot take address */ (int)\n+\n+\t_ = new(int... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func new2() {\n+\tf1 /* ERROR not used */ := func() (x []int) { return }\n+\t_ = new(f0 /* ERROR not a type */ ())\n+\t_ = new(f1 /* ERROR not a type */ ())\n+}\n+\n+func panic1() {\n+\tpanic() // ERROR not enough arguments\n+\tpanic(1, 2) // ERROR too many arguments\n+\tpanic(0)\n+\tpanic(\"foo\")\n+\tpanic(false)\n+\tpanic(1<<10)\n+\tpanic(1 /* ERROR overflows */ <<1000)\n+\t_ = panic /* ERROR used as value */ (0)\n+\n+\tvar s []byte\n+\tpanic(s)\n+\tpanic(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func panic2() {\n+\tf1 := func() (x int) { return }\n+\tf2 := func() (x, y int) { return }\n+\tpanic(f0 /* ERROR used as value */ ())\n+\tpanic(f1())\n+\tpanic(f2()) // ERROR too many arguments\n+}\n+\n+func print1() {\n+\tprint()\n+\tprint(1)\n+\tprint(1, 2)\n+\tprint(\"foo\")\n+\tprint(2.718281828)\n+\tprint(false)\n+\tprint(1<<10)\n+\tprint(1 /* ERROR overflows */ <<1000)\n+\tprintln(nil /* ERROR untyped nil */ )\n+\n+\tvar s []int\n+\tprint(s... /* ERROR invalid use of \\.\\.\\. */ )\n+\t_ = print /* ERROR used as value */ ()\n+}\n+\n+func print2() {\n+\tf1 := func() (x int) { return }\n+\tf2 := func() (x, y int) { return }\n+\tf3 := func() (x int, y float32, z string) { return }\n+\tprint(f0 /* ERROR used as value */ ())\n+\tprint(f1())\n+\tprint(f2())\n+\tprint(f3())\n+}\n+\n+func println1() {\n+\tprintln()\n+\tprintln(1)\n+\tprintln(1, 2)\n+\tprintln(\"foo\")\n+\tprintln(2.718281828)\n+\tprintln(false)\n+\tprintln(1<<10)\n+\tprintln(1 /* ERROR overflows */ <<1000)\n+\tprintln(nil /* ERROR untyped nil */ )\n+\n+\tvar s []int\n+\tprintln(s... /* ERROR invalid use of \\.\\.\\. */ )\n+\t_ = println /* ERROR used as value */ ()\n+}\n+\n+func println2() {\n+\tf1 := func() (x int) { return }\n+\tf2 := func() (x, y int) { return }\n+\tf3 := func() (x int, y float32, z string) { return }\n+\tprintln(f0 /* ERROR used as value */ ())\n+\tprintln(f1())\n+\tprintln(f2())\n+\tprintln(f3())\n+}\n+\n+func real1() {\n+\tvar f32 float32\n+\tvar f64 float64\n+\tvar c64 complex64\n+\tvar c128 complex128\n+\t_ = real() // ERROR not enough arguments\n+\t_ = real(1, 2) // ERROR too many arguments\n+\t_ = real(10)\n+\t_ = real(2.7182818)\n+\t_ = real(\"foo\" /* ERROR expected complex */)\n+\tconst _5 = real(1 + 2i)\n+\tassert(_5 == 1)\n+\tf32 = _5\n+\tf64 = _5\n+\tconst _6 = real(0i)\n+\tassert(_6 == 0)\n+\tf32 = real(c64)\n+\tf64 = real(c128)\n+\tf32 = real /* ERROR cannot use .* in assignment */ (c128)\n+\tf64 = real /* ERROR cannot use .* in assignment */ (c64)\n+\treal /* ERROR not used */ (c64)\n+\n+\t// complex type may not be predeclared\n+\ttype C64 complex64\n+\ttype C128 complex128\n+\tvar x64 C64\n+\tvar x128 C128\n+\tf32 = imag(x64)\n+\tf64 = imag(x128)\n+\t_, _ = f32, f64\n+\n+\tvar a []complex64\n+\t_ = real(a... /* ERROR invalid use of \\.\\.\\. */ )\n+\n+\t// if argument is untyped, result is untyped\n+\tconst _ byte = real(1 + 2.3i)\n+\tconst _ complex128 = real(1 + 2.3i)\n+\n+\t// lhs constant shift operands are typed as complex128\n+\tvar s uint\n+\t_ = real(1 /* ERROR must be integer */ << s)\n+}\n+\n+func real2() {\n+\tf1 := func() (x complex128) { return }\n+\tf2 := func() (x, y complex128) { return }\n+\t_ = real(f0 /* ERROR used as value */ ())\n+\t_ = real(f1())\n+\t_ = real(f2()) // ERROR too many arguments\n+}\n+\n+func recover1() {\n+\t_ = recover()\n+\t_ = recover(10) // ERROR too many arguments\n+\trecover()\n+\n+\tvar s []int\n+\trecover(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func recover2() {\n+\tf1 := func() (x int) { return }\n+\tf2 := func() (x, y int) { return }\n+\t_ = recover(f0 /* ERROR used as value */ ())\n+\t_ = recover(f1()) // ERROR too many arguments\n+\t_ = recover(f2()) // ERROR too many arguments\n+}\n+\n+// assuming types.DefaultPtrSize == 8\n+type S0 struct{      // offset\n+\ta bool       //  0\n+\tb rune       //  4\n+\tc *int       //  8\n+\td bool       // 16\n+\te complex128 // 24\n+}                    // 40\n+\n+type S1 struct{   // offset\n+\tx float32 //  0\n+\ty string  //  8\n+\tz *S1     // 24\n+\tS0        // 32\n+}                 // 72\n+\n+type S2 struct{ // offset\n+\t*S1     //  0\n+}               //  8\n+\n+type S3 struct { // offset\n+\ta int64  //  0\n+\tb int32  //  8\n+}                // 12\n+\n+type S4 struct { // offset\n+\tS3       //  0\n+\tint32    // 12\n+}                // 16\n+\n+type S5 struct {   // offset\n+\ta [3]int32 //  0\n+\tb int32    // 12\n+}                  // 16\n+\n+func (S2) m() {}\n+\n+func Alignof1() {\n+\tvar x int\n+\t_ = unsafe.Alignof() // ERROR not enough arguments\n+\t_ = unsafe.Alignof(1, 2) // ERROR too many arguments\n+\t_ = unsafe.Alignof(int /* ERROR not an expression */)\n+\t_ = unsafe.Alignof(42)\n+\t_ = unsafe.Alignof(new(struct{}))\n+\t_ = unsafe.Alignof(1<<10)\n+\t_ = unsafe.Alignof(1 /* ERROR overflows */ <<1000)\n+\t_ = unsafe.Alignof(nil /* ERROR \"untyped nil */ )\n+\tunsafe /* ERROR not used */ .Alignof(x)\n+\n+\tvar y S0\n+\tassert(unsafe.Alignof(y.a) == 1)\n+\tassert(unsafe.Alignof(y.b) == 4)\n+\tassert(unsafe.Alignof(y.c) == 8)\n+\tassert(unsafe.Alignof(y.d) == 1)\n+\tassert(unsafe.Alignof(y.e) == 8)\n+\n+\tvar s []byte\n+\t_ = unsafe.Alignof(s)\n+\t_ = unsafe.Alignof(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func Alignof2() {\n+\tf1 := func() (x int32) { return }\n+\tf2 := func() (x, y int32) { return }\n+\t_ = unsafe.Alignof(f0 /* ERROR used as value */ ())\n+\tassert(unsafe.Alignof(f1()) == 4)\n+\t_ = unsafe.Alignof(f2()) // ERROR too many arguments\n+}\n+\n+func Offsetof1() {\n+\tvar x struct{ f int }\n+\t_ = unsafe.Offsetof() // ERROR not enough arguments\n+\t_ = unsafe.Offsetof(1, 2) // ERROR too many arguments\n+\t_ = unsafe.Offsetof(int /* ERROR not a selector expression */ )\n+\t_ = unsafe.Offsetof(x /* ERROR not a selector expression */ )\n+\t_ = unsafe.Offsetof(nil /* ERROR not a selector expression */ )\n+\t_ = unsafe.Offsetof(x.f)\n+\t_ = unsafe.Offsetof((x.f))\n+\t_ = unsafe.Offsetof((((((((x))).f)))))\n+\tunsafe /* ERROR not used */ .Offsetof(x.f)\n+\n+\tvar y0 S0\n+\tassert(unsafe.Offsetof(y0.a) == 0)\n+\tassert(unsafe.Offsetof(y0.b) == 4)\n+\tassert(unsafe.Offsetof(y0.c) == 8)\n+\tassert(unsafe.Offsetof(y0.d) == 16)\n+\tassert(unsafe.Offsetof(y0.e) == 24)\n+\n+\tvar y1 S1\n+\tassert(unsafe.Offsetof(y1.x) == 0)\n+\tassert(unsafe.Offsetof(y1.y) == 8)\n+\tassert(unsafe.Offsetof(y1.z) == 24)\n+\tassert(unsafe.Offsetof(y1.S0) == 32)\n+\n+\tassert(unsafe.Offsetof(y1.S0.a) == 0) // relative to S0\n+\tassert(unsafe.Offsetof(y1.a) == 32)   // relative to S1\n+\tassert(unsafe.Offsetof(y1.b) == 36)   // relative to S1\n+\tassert(unsafe.Offsetof(y1.c) == 40)   // relative to S1\n+\tassert(unsafe.Offsetof(y1.d) == 48)   // relative to S1\n+\tassert(unsafe.Offsetof(y1.e) == 56)   // relative to S1\n+\n+\tvar y1p *S1\n+\tassert(unsafe.Offsetof(y1p.S0) == 32)\n+\n+\ttype P *S1\n+\tvar p P = y1p\n+\tassert(unsafe.Offsetof(p.S0) == 32)\n+\n+\tvar y2 S2\n+\tassert(unsafe.Offsetof(y2.S1) == 0)\n+\t_ = unsafe.Offsetof(y2 /* ERROR embedded via a pointer */ .x)\n+\t_ = unsafe.Offsetof(y2 /* ERROR method value */ .m)\n+\n+\tvar s []byte\n+\t_ = unsafe.Offsetof(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func Offsetof2() {\n+\tf1 := func() (x int32) { return }\n+\tf2 := func() (x, y int32) { return }\n+\t_ = unsafe.Offsetof(f0 /* ERROR not a selector expression */ ())\n+\t_ = unsafe.Offsetof(f1 /* ERROR not a selector expression */ ())\n+\t_ = unsafe.Offsetof(f2 /* ERROR not a selector expression */ ())\n+}\n+\n+func Sizeof1() {\n+\tvar x int\n+\t_ = unsafe.Sizeof() // ERROR not enough arguments\n+\t_ = unsafe.Sizeof(1, 2) // ERROR too many arguments\n+\t_ = unsafe.Sizeof(int /* ERROR not an expression */)\n+\t_ = unsafe.Sizeof(42)\n+\t_ = unsafe.Sizeof(new(complex128))\n+\t_ = unsafe.Sizeof(1<<10)\n+\t_ = unsafe.Sizeof(1 /* ERROR overflows */ <<1000)\n+\t_ = unsafe.Sizeof(nil /* ERROR untyped nil */ )\n+\tunsafe /* ERROR not used */ .Sizeof(x)\n+\n+\t// basic types have size guarantees\n+\tassert(unsafe.Sizeof(byte(0)) == 1)\n+\tassert(unsafe.Sizeof(uint8(0)) == 1)\n+\tassert(unsafe.Sizeof(int8(0)) == 1)\n+\tassert(unsafe.Sizeof(uint16(0)) == 2)\n+\tassert(unsafe.Sizeof(int16(0)) == 2)\n+\tassert(unsafe.Sizeof(uint32(0)) == 4)\n+\tassert(unsafe.Sizeof(int32(0)) == 4)\n+\tassert(unsafe.Sizeof(float32(0)) == 4)\n+\tassert(unsafe.Sizeof(uint64(0)) == 8)\n+\tassert(unsafe.Sizeof(int64(0)) == 8)\n+\tassert(unsafe.Sizeof(float64(0)) == 8)\n+\tassert(unsafe.Sizeof(complex64(0)) == 8)\n+\tassert(unsafe.Sizeof(complex128(0)) == 16)\n+\n+\tvar y0 S0\n+\tassert(unsafe.Sizeof(y0.a) == 1)\n+\tassert(unsafe.Sizeof(y0.b) == 4)\n+\tassert(unsafe.Sizeof(y0.c) == 8)\n+\tassert(unsafe.Sizeof(y0.d) == 1)\n+\tassert(unsafe.Sizeof(y0.e) == 16)\n+\tassert(unsafe.Sizeof(y0) == 40)\n+\n+\tvar y1 S1\n+\tassert(unsafe.Sizeof(y1) == 72)\n+\n+\tvar y2 S2\n+\tassert(unsafe.Sizeof(y2) == 8)\n+\n+\tvar y3 S3\n+\tassert(unsafe.Sizeof(y3) == 12)\n+\n+\tvar y4 S4\n+\tassert(unsafe.Sizeof(y4) == 16)\n+\n+\tvar y5 S5\n+\tassert(unsafe.Sizeof(y5) == 16)\n+\n+\tvar a3 [10]S3\n+\tassert(unsafe.Sizeof(a3) == 156)\n+\n+\t// test case for issue 5670\n+\ttype T struct {\n+\t\ta int32\n+\t\t_ int32\n+\t\tc int32\n+\t}\n+\tassert(unsafe.Sizeof(T{}) == 12)\n+\n+\tvar s []byte\n+\t_ = unsafe.Sizeof(s)\n+\t_ = unsafe.Sizeof(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func Sizeof2() {\n+\tf1 := func() (x int64) { return }\n+\tf2 := func() (x, y int64) { return }\n+\t_ = unsafe.Sizeof(f0 /* ERROR used as value */ ())\n+\tassert(unsafe.Sizeof(f1()) == 8)\n+\t_ = unsafe.Sizeof(f2()) // ERROR too many arguments\n+}\n+\n+// self-testing only\n+func assert1() {\n+\tvar x int\n+\tassert() /* ERROR not enough arguments */\n+\tassert(1, 2) /* ERROR too many arguments */\n+\tassert(\"foo\" /* ERROR boolean constant */ )\n+\tassert(x /* ERROR boolean constant */)\n+\tassert(true)\n+\tassert /* ERROR failed */ (false)\n+\t_ = assert(true)\n+\n+\tvar s []byte\n+\tassert(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func assert2() {\n+\tf1 := func() (x bool) { return }\n+\tf2 := func() (x bool) { return }\n+\tassert(f0 /* ERROR used as value */ ())\n+\tassert(f1 /* ERROR boolean constant */ ())\n+\tassert(f2 /* ERROR boolean constant */ ())\n+}\n+\n+// self-testing only\n+func trace1() {\n+\t// Uncomment the code below to test trace - will produce console output\n+\t// _ = trace /* ERROR no value */ ()\n+\t// _ = trace(1)\n+\t// _ = trace(true, 1.2, '\\'', \"foo\", 42i, \"foo\" <= \"bar\")\n+\n+\tvar s []byte\n+\ttrace(s... /* ERROR invalid use of \\.\\.\\. */ )\n+}\n+\n+func trace2() {\n+\tf1 := func() (x int) { return }\n+\tf2 := func() (x int, y string) { return }\n+\tf3 := func() (x int, y string, z []int) { return }\n+\t_ = f1\n+\t_ = f2\n+\t_ = f3\n+\t// Uncomment the code below to test trace - will produce console output\n+\t// trace(f0())\n+\t// trace(f1())\n+\t// trace(f2())\n+\t// trace(f3())\n+\t// trace(f0(), 1)\n+\t// trace(f1(), 1, 2)\n+\t// trace(f2(), 1, 2, 3)\n+\t// trace(f3(), 1, 2, 3, 4)\n+}"}, {"sha": "a61717887e02c732b340e35bcf86fc26990dcb67", "filename": "libgo/go/go/types/testdata/const0.src", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst0.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,295 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// constant declarations\n+\n+package const0\n+\n+// constants declarations must be initialized by constants\n+var x = 0\n+const c0 = x /* ERROR \"not constant\" */\n+\n+// typed constants must have constant types\n+const _ interface /* ERROR invalid constant type */ {} = 0\n+\n+func _ () {\n+\tconst _ interface /* ERROR invalid constant type */ {} = 0\n+\tfor i := 0; i < 10; i++ {} // don't crash with non-nil iota here\n+}\n+\n+// untyped constants\n+const (\n+\t// boolean values\n+\tub0 = false\n+\tub1 = true\n+\tub2 = 2 < 1\n+\tub3 = ui1 == uf1\n+\tub4 = true /* ERROR \"cannot convert\" */ == 0\n+\n+\t// integer values\n+\tui0 = 0\n+\tui1 = 1\n+\tui2 = 42\n+\tui3 = 3141592653589793238462643383279502884197169399375105820974944592307816406286\n+\tui4 = -10\n+\n+\tui5 = ui0 + ui1\n+\tui6 = ui1 - ui1\n+\tui7 = ui2 * ui1\n+\tui8 = ui3 / ui3\n+\tui9 = ui3 % ui3\n+\n+\tui10 = 1 / 0 /* ERROR \"division by zero\" */\n+\tui11 = ui1 / 0 /* ERROR \"division by zero\" */\n+\tui12 = ui3 / ui0 /* ERROR \"division by zero\" */\n+\tui13 = 1 % 0 /* ERROR \"division by zero\" */\n+\tui14 = ui1 % 0 /* ERROR \"division by zero\" */\n+\tui15 = ui3 % ui0 /* ERROR \"division by zero\" */\n+\n+\tui16 = ui2 & ui3\n+\tui17 = ui2 | ui3\n+\tui18 = ui2 ^ ui3\n+\tui19 = 1 /* ERROR \"invalid operation\" */ % 1.0\n+\n+\t// floating point values\n+\tuf0 = 0.\n+\tuf1 = 1.\n+\tuf2 = 4.2e1\n+\tuf3 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286\n+\tuf4 = 1e-1\n+\n+\tuf5 = uf0 + uf1\n+\tuf6 = uf1 - uf1\n+\tuf7 = uf2 * uf1\n+\tuf8 = uf3 / uf3\n+\tuf9 = uf3 /* ERROR \"not defined\" */ % uf3\n+\n+\tuf10 = 1 / 0 /* ERROR \"division by zero\" */\n+\tuf11 = uf1 / 0 /* ERROR \"division by zero\" */\n+\tuf12 = uf3 / uf0 /* ERROR \"division by zero\" */\n+\n+\tuf16 = uf2 /* ERROR \"not defined\" */ & uf3\n+\tuf17 = uf2 /* ERROR \"not defined\" */ | uf3\n+\tuf18 = uf2 /* ERROR \"not defined\" */ ^ uf3\n+\n+\t// complex values\n+\tuc0 = 0.i\n+\tuc1 = 1.i\n+\tuc2 = 4.2e1i\n+\tuc3 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286i\n+\tuc4 = 1e-1i\n+\n+\tuc5 = uc0 + uc1\n+\tuc6 = uc1 - uc1\n+\tuc7 = uc2 * uc1\n+\tuc8 = uc3 / uc3\n+\tuc9 = uc3 /* ERROR \"not defined\" */ % uc3\n+\n+\tuc10 = 1 / 0 /* ERROR \"division by zero\" */\n+\tuc11 = uc1 / 0 /* ERROR \"division by zero\" */\n+\tuc12 = uc3 / uc0 /* ERROR \"division by zero\" */\n+\n+\tuc16 = uc2 /* ERROR \"not defined\" */ & uc3\n+\tuc17 = uc2 /* ERROR \"not defined\" */ | uc3\n+\tuc18 = uc2 /* ERROR \"not defined\" */ ^ uc3\n+)\n+\n+type (\n+\tmybool bool\n+\tmyint int\n+\tmyfloat float64\n+\tmycomplex complex128\n+)\n+\n+// typed constants\n+const (\n+\t// boolean values\n+\ttb0 bool = false\n+\ttb1 bool = true\n+\ttb2 mybool = 2 < 1\n+\ttb3 mybool = ti1 /* ERROR \"mismatched types\" */ == tf1\n+\n+\t// integer values\n+\tti0 int8 = ui0\n+\tti1 int32 = ui1\n+\tti2 int64 = ui2\n+\tti3 myint = ui3 /* ERROR \"overflows\" */\n+\tti4 myint = ui4\n+\n+\tti5 = ti0 /* ERROR \"mismatched types\" */ + ti1\n+\tti6 = ti1 - ti1\n+\tti7 = ti2 /* ERROR \"mismatched types\" */ * ti1\n+\tti8 = ti3 / ti3\n+\tti9 = ti3 % ti3\n+\n+\tti10 = 1 / 0 /* ERROR \"division by zero\" */\n+\tti11 = ti1 / 0 /* ERROR \"division by zero\" */\n+\tti12 = ti3 /* ERROR \"mismatched types\" */ / ti0\n+\tti13 = 1 % 0 /* ERROR \"division by zero\" */\n+\tti14 = ti1 % 0 /* ERROR \"division by zero\" */\n+\tti15 = ti3 /* ERROR \"mismatched types\" */ % ti0\n+\n+\tti16 = ti2 /* ERROR \"mismatched types\" */ & ti3\n+\tti17 = ti2 /* ERROR \"mismatched types\" */ | ti4\n+\tti18 = ti2 ^ ti5 // no mismatched types error because the type of ti5 is unknown\n+\n+\t// floating point values\n+\ttf0 float32 = 0.\n+\ttf1 float32 = 1.\n+\ttf2 float64 = 4.2e1\n+\ttf3 myfloat = 3.141592653589793238462643383279502884197169399375105820974944592307816406286\n+\ttf4 myfloat = 1e-1\n+\n+\ttf5 = tf0 + tf1\n+\ttf6 = tf1 - tf1\n+\ttf7 = tf2 /* ERROR \"mismatched types\" */ * tf1\n+\ttf8 = tf3 / tf3\n+\ttf9 = tf3 /* ERROR \"not defined\" */ % tf3\n+\n+\ttf10 = 1 / 0 /* ERROR \"division by zero\" */\n+\ttf11 = tf1 / 0 /* ERROR \"division by zero\" */\n+\ttf12 = tf3 /* ERROR \"mismatched types\" */ / tf0\n+\n+\ttf16 = tf2 /* ERROR \"mismatched types\" */ & tf3\n+\ttf17 = tf2 /* ERROR \"mismatched types\" */ | tf3\n+\ttf18 = tf2 /* ERROR \"mismatched types\" */ ^ tf3\n+\n+\t// complex values\n+\ttc0 = 0.i\n+\ttc1 = 1.i\n+\ttc2 = 4.2e1i\n+\ttc3 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286i\n+\ttc4 = 1e-1i\n+\n+\ttc5 = tc0 + tc1\n+\ttc6 = tc1 - tc1\n+\ttc7 = tc2 * tc1\n+\ttc8 = tc3 / tc3\n+\ttc9 = tc3 /* ERROR \"not defined\" */ % tc3\n+\n+\ttc10 = 1 / 0 /* ERROR \"division by zero\" */\n+\ttc11 = tc1 / 0 /* ERROR \"division by zero\" */\n+\ttc12 = tc3 / tc0 /* ERROR \"division by zero\" */\n+\n+\ttc16 = tc2 /* ERROR \"not defined\" */ & tc3\n+\ttc17 = tc2 /* ERROR \"not defined\" */ | tc3\n+\ttc18 = tc2 /* ERROR \"not defined\" */ ^ tc3\n+)\n+\n+// initialization cycles\n+const (\n+\ta /* ERROR \"initialization cycle\" */ = a\n+\tb /* ERROR \"initialization cycle\" */ , c /* ERROR \"initialization cycle\" */, d, e = e, d, c, b // TODO(gri) should only have one cycle error\n+\tf float64 = d\n+)\n+\n+// multiple initialization\n+const (\n+\ta1, a2, a3 = 7, 3.1415926, \"foo\"\n+\tb1, b2, b3 = b3, b1, 42\n+\tc1, c2, c3  /* ERROR \"missing init expr for c3\" */ = 1, 2\n+\td1, d2, d3 = 1, 2, 3, 4 /* ERROR \"extra init expr 4\" */\n+\t_p0 = assert(a1 == 7)\n+\t_p1 = assert(a2 == 3.1415926)\n+\t_p2 = assert(a3 == \"foo\")\n+\t_p3 = assert(b1 == 42)\n+\t_p4 = assert(b2 == 42)\n+\t_p5 = assert(b3 == 42)\n+)\n+\n+func _() {\n+\tconst (\n+\t\ta1, a2, a3 = 7, 3.1415926, \"foo\"\n+\t\tb1, b2, b3 = b3, b1, 42\n+\t\tc1, c2, c3  /* ERROR \"missing init expr for c3\" */ = 1, 2\n+\t\td1, d2, d3 = 1, 2, 3, 4 /* ERROR \"extra init expr 4\" */\n+\t\t_p0 = assert(a1 == 7)\n+\t\t_p1 = assert(a2 == 3.1415926)\n+\t\t_p2 = assert(a3 == \"foo\")\n+\t\t_p3 = assert(b1 == 42)\n+\t\t_p4 = assert(b2 == 42)\n+\t\t_p5 = assert(b3 == 42)\n+\t)\n+}\n+\n+// iota\n+const (\n+\tiota0 = iota\n+\tiota1 = iota\n+\tiota2 = iota*2\n+\t_a0 = assert(iota0 == 0)\n+\t_a1 = assert(iota1 == 1)\n+\t_a2 = assert(iota2 == 4)\n+\tiota6 = iota*3\n+\n+\tiota7\n+\tiota8\n+\t_a3 = assert(iota7 == 21)\n+\t_a4 = assert(iota8 == 24)\n+)\n+\n+const (\n+\t_b0 = iota\n+\t_b1 = assert(iota + iota2 == 5)\n+\t_b2 = len([iota]int{}) // iota may appear in a type!\n+\t_b3 = assert(_b2 == 2)\n+\t_b4 = len(A{})\n+)\n+\n+type A [iota /* ERROR \"cannot use iota\" */ ]int\n+\n+// constant expressions with operands across different\n+// constant declarations must use the right iota values\n+const (\n+\t_c0 = iota\n+\t_c1\n+\t_c2\n+\t_x = _c2 + _d1 + _e0 // 3\n+)\n+\n+const (\n+\t_d0 = iota\n+\t_d1\n+)\n+\n+const (\n+\t_e0 = iota\n+)\n+\n+var _ = assert(_x == 3)\n+\n+// special cases\n+const (\n+\t_n0 = nil /* ERROR \"not constant\" */\n+\t_n1 = [ /* ERROR \"not constant\" */ ]int{}\n+)\n+\n+// iotas must not be usable in expressions outside constant declarations\n+type _ [iota /* ERROR \"iota outside constant decl\" */ ]byte\n+var _ = iota /* ERROR \"iota outside constant decl\" */\n+func _() {\n+\t_ = iota /* ERROR \"iota outside constant decl\" */\n+\tconst _ = iota\n+\t_ = iota /* ERROR \"iota outside constant decl\" */\n+}\n+\n+func _() {\n+\tiota := 123\n+\tconst x = iota /* ERROR \"is not constant\" */\n+\tvar y = iota\n+\t_ = y\n+}\n+\n+// constant arithmetic precision and rounding must lead to expected (integer) results\n+var _ = []int64{\n+\t0.0005 * 1e9,\n+\t0.001 * 1e9,\n+\t0.005 * 1e9,\n+\t0.01 * 1e9,\n+\t0.05 * 1e9,\n+\t0.1 * 1e9,\n+\t0.5 * 1e9,\n+\t1 * 1e9,\n+\t5 * 1e9,\n+}"}, {"sha": "d82770464fa73a4b84cf6dcc35f2583eed5ba3cf", "filename": "libgo/go/go/types/testdata/const1.src", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst1.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,322 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// constant conversions\n+\n+package const1\n+\n+const(\n+\tmi = ^int(0)\n+\tmu = ^uint(0)\n+\tmp = ^uintptr(0)\n+\n+\tlogSizeofInt     = uint(mi>>8&1 + mi>>16&1 + mi>>32&1)\n+\tlogSizeofUint    = uint(mu>>8&1 + mu>>16&1 + mu>>32&1)\n+\tlogSizeofUintptr = uint(mp>>8&1 + mp>>16&1 + mp>>32&1)\n+)\n+\n+const (\n+\tminInt8 = -1<<(8<<iota - 1)\n+\tminInt16\n+\tminInt32\n+\tminInt64\n+\tminInt = -1<<(8<<logSizeofInt - 1)\n+)\n+\n+const (\n+\tmaxInt8 = 1<<(8<<iota - 1) - 1\n+\tmaxInt16\n+\tmaxInt32\n+\tmaxInt64\n+\tmaxInt = 1<<(8<<logSizeofInt - 1) - 1\n+)\n+\n+const (\n+\tmaxUint8 = 1<<(8<<iota) - 1\n+\tmaxUint16\n+\tmaxUint32\n+\tmaxUint64\n+\tmaxUint    = 1<<(8<<logSizeofUint) - 1\n+\tmaxUintptr = 1<<(8<<logSizeofUintptr) - 1\n+)\n+\n+const (\n+\tsmallestFloat32 = 1.0 / (1<<(127 - 1 + 23))\n+\tsmallestFloat64 = 1.0 / (1<<(1023 - 1 + 52))\n+)\n+\n+const (\n+\t_ = assert(smallestFloat32 > 0)\n+\t_ = assert(smallestFloat64 > 0)\n+)\n+\n+const (\n+\tmaxFloat32 = 1<<127 * (1<<24 - 1) / (1.0<<23)\n+\tmaxFloat64 = 1<<1023 * (1<<53 - 1) / (1.0<<52)\n+)\n+\n+const (\n+\t_ int8 = minInt8 /* ERROR \"overflows\" */ - 1\n+\t_ int8 = minInt8\n+\t_ int8 = maxInt8\n+\t_ int8 = maxInt8 /* ERROR \"overflows\" */ + 1\n+\t_ int8 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = int8(minInt8 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = int8(minInt8)\n+\t_ = int8(maxInt8)\n+\t_ = int8(maxInt8 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = int8(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ int16 = minInt16 /* ERROR \"overflows\" */ - 1\n+\t_ int16 = minInt16\n+\t_ int16 = maxInt16\n+\t_ int16 = maxInt16 /* ERROR \"overflows\" */ + 1\n+\t_ int16 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = int16(minInt16 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = int16(minInt16)\n+\t_ = int16(maxInt16)\n+\t_ = int16(maxInt16 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = int16(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ int32 = minInt32 /* ERROR \"overflows\" */ - 1\n+\t_ int32 = minInt32\n+\t_ int32 = maxInt32\n+\t_ int32 = maxInt32 /* ERROR \"overflows\" */ + 1\n+\t_ int32 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = int32(minInt32 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = int32(minInt32)\n+\t_ = int32(maxInt32)\n+\t_ = int32(maxInt32 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = int32(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ int64 = minInt64 /* ERROR \"overflows\" */ - 1\n+\t_ int64 = minInt64\n+\t_ int64 = maxInt64\n+\t_ int64 = maxInt64 /* ERROR \"overflows\" */ + 1\n+\t_ int64 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = int64(minInt64 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = int64(minInt64)\n+\t_ = int64(maxInt64)\n+\t_ = int64(maxInt64 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = int64(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ int = minInt /* ERROR \"overflows\" */ - 1\n+\t_ int = minInt\n+\t_ int = maxInt\n+\t_ int = maxInt /* ERROR \"overflows\" */ + 1\n+\t_ int = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = int(minInt /* ERROR \"cannot convert\" */ - 1)\n+\t_ = int(minInt)\n+\t_ = int(maxInt)\n+\t_ = int(maxInt /* ERROR \"cannot convert\" */ + 1)\n+\t_ = int(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ uint8 = 0 /* ERROR \"overflows\" */ - 1\n+\t_ uint8 = 0\n+\t_ uint8 = maxUint8\n+\t_ uint8 = maxUint8 /* ERROR \"overflows\" */ + 1\n+\t_ uint8 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = uint8(0 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = uint8(0)\n+\t_ = uint8(maxUint8)\n+\t_ = uint8(maxUint8 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = uint8(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ uint16 = 0 /* ERROR \"overflows\" */ - 1\n+\t_ uint16 = 0\n+\t_ uint16 = maxUint16\n+\t_ uint16 = maxUint16 /* ERROR \"overflows\" */ + 1\n+\t_ uint16 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = uint16(0 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = uint16(0)\n+\t_ = uint16(maxUint16)\n+\t_ = uint16(maxUint16 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = uint16(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ uint32 = 0 /* ERROR \"overflows\" */ - 1\n+\t_ uint32 = 0\n+\t_ uint32 = maxUint32\n+\t_ uint32 = maxUint32 /* ERROR \"overflows\" */ + 1\n+\t_ uint32 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = uint32(0 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = uint32(0)\n+\t_ = uint32(maxUint32)\n+\t_ = uint32(maxUint32 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = uint32(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ uint64 = 0 /* ERROR \"overflows\" */ - 1\n+\t_ uint64 = 0\n+\t_ uint64 = maxUint64\n+\t_ uint64 = maxUint64 /* ERROR \"overflows\" */ + 1\n+\t_ uint64 = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = uint64(0 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = uint64(0)\n+\t_ = uint64(maxUint64)\n+\t_ = uint64(maxUint64 /* ERROR \"cannot convert\" */ + 1)\n+\t_ = uint64(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ uint = 0 /* ERROR \"overflows\" */ - 1\n+\t_ uint = 0\n+\t_ uint = maxUint\n+\t_ uint = maxUint /* ERROR \"overflows\" */ + 1\n+\t_ uint = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = uint(0 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = uint(0)\n+\t_ = uint(maxUint)\n+\t_ = uint(maxUint /* ERROR \"cannot convert\" */ + 1)\n+\t_ = uint(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ uintptr = 0 /* ERROR \"overflows\" */ - 1\n+\t_ uintptr = 0\n+\t_ uintptr = maxUintptr\n+\t_ uintptr = maxUintptr /* ERROR \"overflows\" */ + 1\n+\t_ uintptr = smallestFloat64 /* ERROR \"truncated\" */\n+\n+\t_ = uintptr(0 /* ERROR \"cannot convert\" */ - 1)\n+\t_ = uintptr(0)\n+\t_ = uintptr(maxUintptr)\n+\t_ = uintptr(maxUintptr /* ERROR \"cannot convert\" */ + 1)\n+\t_ = uintptr(smallestFloat64 /* ERROR \"cannot convert\" */)\n+)\n+\n+const (\n+\t_ float32 = minInt64\n+\t_ float64 = minInt64\n+\t_ complex64 = minInt64\n+\t_ complex128 = minInt64\n+\n+\t_ = float32(minInt64)\n+\t_ = float64(minInt64)\n+\t_ = complex64(minInt64)\n+\t_ = complex128(minInt64)\n+)\n+\n+const (\n+\t_ float32 = maxUint64\n+\t_ float64 = maxUint64\n+\t_ complex64 = maxUint64\n+\t_ complex128 = maxUint64\n+\n+\t_ = float32(maxUint64)\n+\t_ = float64(maxUint64)\n+\t_ = complex64(maxUint64)\n+\t_ = complex128(maxUint64)\n+)\n+\n+// TODO(gri) find smaller deltas below\n+\n+const delta32 = maxFloat32/(1 << 23)\n+\n+const (\n+\t_ float32 = - /* ERROR \"overflow\" */ (maxFloat32 + delta32)\n+\t_ float32 = -maxFloat32\n+\t_ float32 = maxFloat32\n+\t_ float32 = maxFloat32 /* ERROR \"overflow\" */ + delta32\n+\n+\t_ = float32(- /* ERROR \"cannot convert\" */ (maxFloat32 + delta32))\n+\t_ = float32(-maxFloat32)\n+\t_ = float32(maxFloat32)\n+\t_ = float32(maxFloat32 /* ERROR \"cannot convert\" */ + delta32)\n+\n+\t_ = assert(float32(smallestFloat32) == smallestFloat32)\n+\t_ = assert(float32(smallestFloat32/2) == 0)\n+\t_ = assert(float32(smallestFloat64) == 0)\n+\t_ = assert(float32(smallestFloat64/2) == 0)\n+)\n+\n+const delta64 = maxFloat64/(1 << 52)\n+\n+const (\n+\t_ float64 = - /* ERROR \"overflow\" */ (maxFloat64 + delta64)\n+\t_ float64 = -maxFloat64\n+\t_ float64 = maxFloat64\n+\t_ float64 = maxFloat64 /* ERROR \"overflow\" */ + delta64\n+\n+\t_ = float64(- /* ERROR \"cannot convert\" */ (maxFloat64 + delta64))\n+\t_ = float64(-maxFloat64)\n+\t_ = float64(maxFloat64)\n+\t_ = float64(maxFloat64 /* ERROR \"cannot convert\" */ + delta64)\n+\n+\t_ = assert(float64(smallestFloat32) == smallestFloat32)\n+\t_ = assert(float64(smallestFloat32/2) == smallestFloat32/2)\n+\t_ = assert(float64(smallestFloat64) == smallestFloat64)\n+\t_ = assert(float64(smallestFloat64/2) == 0)\n+)\n+\n+const (\n+\t_ complex64 = - /* ERROR \"overflow\" */ (maxFloat32 + delta32)\n+\t_ complex64 = -maxFloat32\n+\t_ complex64 = maxFloat32\n+\t_ complex64 = maxFloat32 /* ERROR \"overflow\" */ + delta32\n+\n+\t_ = complex64(- /* ERROR \"cannot convert\" */ (maxFloat32 + delta32))\n+\t_ = complex64(-maxFloat32)\n+\t_ = complex64(maxFloat32)\n+\t_ = complex64(maxFloat32 /* ERROR \"cannot convert\" */ + delta32)\n+)\n+\n+const (\n+\t_ complex128 = - /* ERROR \"overflow\" */ (maxFloat64 + delta64)\n+\t_ complex128 = -maxFloat64\n+\t_ complex128 = maxFloat64\n+\t_ complex128 = maxFloat64 /* ERROR \"overflow\" */ + delta64\n+\n+\t_ = complex128(- /* ERROR \"cannot convert\" */ (maxFloat64 + delta64))\n+\t_ = complex128(-maxFloat64)\n+\t_ = complex128(maxFloat64)\n+\t_ = complex128(maxFloat64 /* ERROR \"cannot convert\" */ + delta64)\n+)\n+\n+// Initialization of typed constant and conversion are the same:\n+const (\n+\tf32 = 1 + smallestFloat32\n+\tx32 float32 = f32\n+\ty32 = float32(f32)\n+\t_ = assert(x32 - y32 == 0)\n+)\n+\n+const (\n+\tf64 = 1 + smallestFloat64\n+\tx64 float64 = f64\n+\ty64 = float64(f64)\n+\t_ = assert(x64 - y64 == 0)\n+)\n+\n+const (\n+\t_ = int8(-1) << 7\n+\t_ = int8 /* ERROR \"overflows\" */ (-1) << 8\n+\n+\t_ = uint32(1) << 31\n+\t_ = uint32 /* ERROR \"overflows\" */ (1) << 32\n+)"}, {"sha": "6de9b13d6ef3209d0f7ab71d5e6ee2328cec029b", "filename": "libgo/go/go/types/testdata/constdecl.src", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconstdecl.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconstdecl.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconstdecl.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package constdecl\n+\n+import \"math\"\n+\n+var v int\n+\n+// Const decls must be initialized by constants.\n+const _ = v /* ERROR \"not constant\" */\n+const _ = math /* ERROR \"not constant\" */ .Sin(0)\n+const _ = int /* ERROR \"not an expression\" */\n+\n+func _() {\n+\tconst _ = v /* ERROR \"not constant\" */\n+\tconst _ = math /* ERROR \"not constant\" */ .Sin(0)\n+\tconst _ = int /* ERROR \"not an expression\" */\n+}\n+\n+// Identifier and expression arity must match.\n+// The first error message is produced by the parser.\n+// In a real-world scenario, the type-checker would not be run\n+// in this case and the 2nd error message would not appear.\n+const _ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */\n+const _ = 1, 2 /* ERROR \"extra init expr 2\" */\n+\n+const _ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */ int\n+const _ int = 1, 2 /* ERROR \"extra init expr 2\" */\n+\n+const (\n+\t_ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */\n+\t_ = 1, 2 /* ERROR \"extra init expr 2\" */\n+\n+\t_ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */ int\n+\t_ int = 1, 2 /* ERROR \"extra init expr 2\" */\n+)\n+\n+const (\n+\t_ = 1\n+\t_\n+\t_, _ /* ERROR \"missing init expr for _\" */\n+\t_\n+)\n+\n+const (\n+\t_, _ = 1, 2\n+\t_, _\n+\t_ /* ERROR \"extra init expr at\" */\n+\t_, _\n+\t_, _, _ /* ERROR \"missing init expr for _\" */\n+\t_, _\n+)\n+\n+func _() {\n+\tconst _ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */\n+\tconst _ = 1, 2 /* ERROR \"extra init expr 2\" */\n+\n+\tconst _ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */ int\n+\tconst _ int = 1, 2 /* ERROR \"extra init expr 2\" */\n+\n+\tconst (\n+\t\t_ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */\n+\t\t_ = 1, 2 /* ERROR \"extra init expr 2\" */\n+\n+\t\t_ /* ERROR \"missing constant value\" */ /* ERROR \"missing init expr for _\" */ int\n+\t\t_ int = 1, 2 /* ERROR \"extra init expr 2\" */\n+\t)\n+\n+\tconst (\n+\t\t_ = 1\n+\t\t_\n+\t\t_, _ /* ERROR \"missing init expr for _\" */\n+\t\t_\n+\t)\n+\n+\tconst (\n+\t\t_, _ = 1, 2\n+\t\t_, _\n+\t\t_ /* ERROR \"extra init expr at\" */\n+\t\t_, _\n+\t\t_, _, _ /* ERROR \"missing init expr for _\" */\n+\t\t_, _\n+\t)\n+}\n+\n+// Test case for constant with invalid initialization.\n+// Caused panic because the constant value was not set up (gri - 7/8/2014).\n+func _() {\n+\tconst (\n+\t    x string = missing /* ERROR \"undeclared name\" */\n+\t    y = x + \"\"\n+\t)\n+}\n+\n+// TODO(gri) move extra tests from testdata/const0.src into here"}, {"sha": "e1336c0456adf7baada345f46f5da54d89c9b804", "filename": "libgo/go/go/types/testdata/conversions.src", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,93 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// conversions\n+\n+package conversions\n+\n+import \"unsafe\"\n+\n+// argument count\n+var (\n+\t_ = int() /* ERROR \"missing argument\" */\n+\t_ = int(1, 2 /* ERROR \"too many arguments\" */ )\n+)\n+\n+// numeric constant conversions are in const1.src.\n+\n+func string_conversions() {\n+\tconst A = string(65)\n+\tassert(A == \"A\")\n+\tconst E = string(-1)\n+\tassert(E == \"\\uFFFD\")\n+\tassert(E == string(1234567890))\n+\n+\ttype myint int\n+\tassert(A == string(myint(65)))\n+\n+\ttype mystring string\n+\tconst _ mystring = mystring(\"foo\")\n+\n+\tconst _ = string(true /* ERROR \"cannot convert\" */ )\n+\tconst _ = string(1.2 /* ERROR \"cannot convert\" */ )\n+\tconst _ = string(nil /* ERROR \"cannot convert\" */ )\n+\n+\t// issues 11357, 11353: argument must be of integer type\n+\t_ = string(0.0 /* ERROR \"cannot convert\" */ )\n+\t_ = string(0i /* ERROR \"cannot convert\" */ )\n+\t_ = string(1 /* ERROR \"cannot convert\" */ + 2i)\n+}\n+\n+func interface_conversions() {\n+\ttype E interface{}\n+\n+\ttype I1 interface{\n+\t\tm1()\n+\t}\n+\n+\ttype I2 interface{\n+\t\tm1()\n+\t\tm2(x int)\n+\t}\n+\n+\ttype I3 interface{\n+\t\tm1()\n+\t\tm2() int\n+\t}\n+\n+\tvar e E\n+\tvar i1 I1\n+\tvar i2 I2\n+\tvar i3 I3\n+\n+\t_ = E(0)\n+\t_ = E(nil)\n+\t_ = E(e)\n+\t_ = E(i1)\n+\t_ = E(i2)\n+\n+\t_ = I1(0 /* ERROR \"cannot convert\" */ )\n+\t_ = I1(nil)\n+\t_ = I1(i1)\n+\t_ = I1(e /* ERROR \"cannot convert\" */ )\n+\t_ = I1(i2)\n+\n+\t_ = I2(nil)\n+\t_ = I2(i1 /* ERROR \"cannot convert\" */ )\n+\t_ = I2(i2)\n+\t_ = I2(i3 /* ERROR \"cannot convert\" */ )\n+\n+\t_ = I3(nil)\n+\t_ = I3(i1 /* ERROR \"cannot convert\" */ )\n+\t_ = I3(i2 /* ERROR \"cannot convert\" */ )\n+\t_ = I3(i3)\n+\n+\t// TODO(gri) add more tests, improve error message\n+}\n+\n+func issue6326() {\n+\ttype T unsafe.Pointer\n+\tvar x T\n+\t_ = uintptr(x) // see issue 6326\n+}"}, {"sha": "93a5f182fb47ebe8746e7072975ee14fd1b2ce42", "filename": "libgo/go/go/types/testdata/conversions2.src", "status": "added", "additions": 313, "deletions": 0, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions2.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions2.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions2.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,313 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test various valid and invalid struct assignments and conversions.\n+// Does not compile.\n+\n+package conversions2\n+\n+type I interface {\n+\tm()\n+}\n+\n+// conversions between structs\n+\n+func _() {\n+\ttype S struct{}\n+\ttype T struct{}\n+\tvar s S\n+\tvar t T\n+\tvar u struct{}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u\n+\ts = S(s)\n+\ts = S(t)\n+\ts = S(u)\n+\tt = u\n+\tt = T(u)\n+}\n+\n+func _() {\n+\ttype S struct{ x int }\n+\ttype T struct {\n+\t\tx int \"foo\"\n+\t}\n+\tvar s S\n+\tvar t T\n+\tvar u struct {\n+\t\tx int \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = S(s)\n+\ts = S(t)\n+\ts = S(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = T(u)\n+}\n+\n+func _() {\n+\ttype E struct{ x int }\n+\ttype S struct{ x E }\n+\ttype T struct {\n+\t\tx E \"foo\"\n+\t}\n+\tvar s S\n+\tvar t T\n+\tvar u struct {\n+\t\tx E \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = S(s)\n+\ts = S(t)\n+\ts = S(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = T(u)\n+}\n+\n+func _() {\n+\ttype S struct {\n+\t\tx struct {\n+\t\t\tx int \"foo\"\n+\t\t}\n+\t}\n+\ttype T struct {\n+\t\tx struct {\n+\t\t\tx int \"bar\"\n+\t\t} \"foo\"\n+\t}\n+\tvar s S\n+\tvar t T\n+\tvar u struct {\n+\t\tx struct {\n+\t\t\tx int \"bar\"\n+\t\t} \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = S(s)\n+\ts = S(t)\n+\ts = S(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = T(u)\n+}\n+\n+func _() {\n+\ttype E1 struct {\n+\t\tx int \"foo\"\n+\t}\n+\ttype E2 struct {\n+\t\tx int \"bar\"\n+\t}\n+\ttype S struct{ x E1 }\n+\ttype T struct {\n+\t\tx E2 \"foo\"\n+\t}\n+\tvar s S\n+\tvar t T\n+\tvar u struct {\n+\t\tx E2 \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = S(s)\n+\ts = S(t /* ERROR \"cannot convert\" */ )\n+\ts = S(u /* ERROR \"cannot convert\" */ )\n+\tt = u   // ERROR \"cannot use .* in assignment\"\n+\tt = T(u)\n+}\n+\n+func _() {\n+\ttype E struct{ x int }\n+\ttype S struct {\n+\t\tf func(struct {\n+\t\t\tx int \"foo\"\n+\t\t})\n+\t}\n+\ttype T struct {\n+\t\tf func(struct {\n+\t\t\tx int \"bar\"\n+\t\t})\n+\t}\n+\tvar s S\n+\tvar t T\n+\tvar u struct{ f func(E) }\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = S(s)\n+\ts = S(t)\n+\ts = S(u /* ERROR \"cannot convert\" */ )\n+\tt = u   // ERROR \"cannot use .* in assignment\"\n+\tt = T(u /* ERROR \"cannot convert\" */ )\n+}\n+\n+// conversions between pointers to structs\n+\n+func _() {\n+\ttype S struct{}\n+\ttype T struct{}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct{}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t)\n+\ts = (*S)(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u)\n+}\n+\n+func _() {\n+\ttype S struct{ x int }\n+\ttype T struct {\n+\t\tx int \"foo\"\n+\t}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct {\n+\t\tx int \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t)\n+\ts = (*S)(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u)\n+}\n+\n+func _() {\n+\ttype E struct{ x int }\n+\ttype S struct{ x E }\n+\ttype T struct {\n+\t\tx E \"foo\"\n+\t}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct {\n+\t\tx E \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t)\n+\ts = (*S)(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u)\n+}\n+\n+func _() {\n+\ttype S struct {\n+\t\tx struct {\n+\t\t\tx int \"foo\"\n+\t\t}\n+\t}\n+\ttype T struct {\n+\t\tx struct {\n+\t\t\tx int \"bar\"\n+\t\t} \"foo\"\n+\t}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct {\n+\t\tx struct {\n+\t\t\tx int \"bar\"\n+\t\t} \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t)\n+\ts = (*S)(u)\n+\tt = u // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u)\n+}\n+\n+func _() {\n+\ttype E1 struct {\n+\t\tx int \"foo\"\n+\t}\n+\ttype E2 struct {\n+\t\tx int \"bar\"\n+\t}\n+\ttype S struct{ x E1 }\n+\ttype T struct {\n+\t\tx E2 \"foo\"\n+\t}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct {\n+\t\tx E2 \"bar\"\n+\t}\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t /* ERROR \"cannot convert\" */ )\n+\ts = (*S)(u /* ERROR \"cannot convert\" */ )\n+\tt = u      // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u)\n+}\n+\n+func _() {\n+\ttype E struct{ x int }\n+\ttype S struct {\n+\t\tf func(struct {\n+\t\t\tx int \"foo\"\n+\t\t})\n+\t}\n+\ttype T struct {\n+\t\tf func(struct {\n+\t\t\tx int \"bar\"\n+\t\t})\n+\t}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct{ f func(E) }\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t)\n+\ts = (*S)(u /* ERROR \"cannot convert\" */ )\n+\tt = u      // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u /* ERROR \"cannot convert\" */ )\n+}\n+\n+func _() {\n+\ttype E struct{ x int }\n+\ttype S struct {\n+\t\tf func(*struct {\n+\t\t\tx int \"foo\"\n+\t\t})\n+\t}\n+\ttype T struct {\n+\t\tf func(*struct {\n+\t\t\tx int \"bar\"\n+\t\t})\n+\t}\n+\tvar s *S\n+\tvar t *T\n+\tvar u *struct{ f func(E) }\n+\ts = s\n+\ts = t // ERROR \"cannot use .* in assignment\"\n+\ts = u // ERROR \"cannot use .* in assignment\"\n+\ts = (*S)(s)\n+\ts = (*S)(t)\n+\ts = (*S)(u /* ERROR \"cannot convert\" */ )\n+\tt = u      // ERROR \"cannot use .* in assignment\"\n+\tt = (*T)(u /* ERROR \"cannot convert\" */ )\n+}"}, {"sha": "621d83c9450a03f7823a657e0b01a96a0dc098b3", "filename": "libgo/go/go/types/testdata/cycles.src", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,143 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package cycles\n+\n+type (\n+\tT0 int\n+\tT1 /* ERROR cycle */ T1\n+\tT2 *T2\n+\n+\tT3 /* ERROR cycle */ T4\n+\tT4 T5\n+\tT5 T3\n+\n+\tT6 T7\n+\tT7 *T8\n+\tT8 T6\n+\n+\t// arrays\n+\tA0 /* ERROR cycle */ [10]A0\n+\tA1 [10]*A1\n+\n+\tA2 /* ERROR cycle */ [10]A3\n+\tA3 [10]A4\n+\tA4 A2\n+\n+\tA5 [10]A6\n+\tA6 *A5\n+\n+\t// slices\n+\tL0 []L0\n+\n+\t// structs\n+\tS0 /* ERROR cycle */ struct{ _ S0 }\n+\tS1 /* ERROR cycle */ struct{ S1 }\n+\tS2 struct{ _ *S2 }\n+\tS3 struct{ *S3 }\n+\n+\tS4 /* ERROR cycle */ struct{ S5 }\n+\tS5 struct{ S6 }\n+\tS6 S4\n+\n+\t// pointers\n+\tP0 *P0\n+\n+\t// functions\n+\tF0 func(F0)\n+\tF1 func() F1\n+\tF2 func(F2) F2\n+\n+\t// interfaces\n+\tI0 /* ERROR cycle */ interface{ I0 }\n+\n+\tI1 interface{ I2 }\n+\tI2 interface{ I3 }\n+\tI3 /* ERROR cycle */ interface{ I1 }\n+\n+\tI4 interface{ f(I4) }\n+\n+\t// testcase for issue 5090\n+\tI5 interface{ f(I6) }\n+\tI6 interface{ I5 }\n+\n+\t// maps\n+\tM0 map[M0 /* ERROR invalid map key */ ]M0\n+\n+\t// channels\n+\tC0 chan C0\n+)\n+\n+func _() {\n+\ttype (\n+\t\tt1 /* ERROR cycle */ t1\n+\t\tt2 *t2\n+\n+\t\tt3 t4 /* ERROR undeclared */\n+\t\tt4 t5 /* ERROR undeclared */\n+\t\tt5 t3\n+\n+\t\t// arrays\n+\t\ta0 /* ERROR cycle */ [10]a0\n+\t\ta1 [10]*a1\n+\n+\t\t// slices\n+\t\tl0 []l0\n+\n+\t\t// structs\n+\t\ts0 /* ERROR cycle */ struct{ _ s0 }\n+\t\ts1 /* ERROR cycle */ struct{ s1 }\n+\t\ts2 struct{ _ *s2 }\n+\t\ts3 struct{ *s3 }\n+\n+\t\t// pointers\n+\t\tp0 *p0\n+\n+\t\t// functions\n+\t\tf0 func(f0)\n+\t\tf1 func() f1\n+\t\tf2 func(f2) f2\n+\n+\t\t// interfaces\n+\t\ti0 /* ERROR cycle */ interface{ i0 }\n+\n+\t\t// maps\n+\t\tm0 map[m0 /* ERROR invalid map key */ ]m0\n+\n+\t\t// channels\n+\t\tc0 chan c0\n+\t)\n+}\n+\n+// test cases for issue 6667\n+\n+type A [10]map[A /* ERROR invalid map key */ ]bool\n+\n+type S struct {\n+\tm map[S /* ERROR invalid map key */ ]bool\n+}\n+\n+// test cases for issue 7236\n+// (cycle detection must not be dependent on starting point of resolution)\n+\n+type (\n+\tP1 *T9\n+\tT9 /* ERROR cycle */ T9\n+\n+\tT10 /* ERROR cycle */ T10\n+\tP2 *T10\n+)\n+\n+func (T11) m() {}\n+\n+type T11 /* ERROR cycle */ struct{ T11 }\n+\n+type T12 /* ERROR cycle */ struct{ T12 }\n+\n+func (*T12) m() {}\n+\n+type (\n+\tP3 *T13\n+\tT13 /* ERROR cycle */ T13\n+)\n\\ No newline at end of file"}, {"sha": "ae2b38ebec21e36d5f2e5bdd360948e8cbba97ce", "filename": "libgo/go/go/types/testdata/cycles1.src", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles1.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type (\n+\tA interface {\n+\t\ta() interface {\n+\t\t\tABC1\n+\t\t}\n+\t}\n+\tB interface {\n+\t\tb() interface {\n+\t\t\tABC2\n+\t\t}\n+\t}\n+\tC interface {\n+\t\tc() interface {\n+\t\t\tABC3\n+\t\t}\n+\t}\n+\n+\tAB interface {\n+\t\tA\n+\t\tB\n+\t}\n+\tBC interface {\n+\t\tB\n+\t\tC\n+\t}\n+\n+\tABC1 interface {\n+\t\tA\n+\t\tB\n+\t\tC\n+\t}\n+\tABC2 interface {\n+\t\tAB\n+\t\tC\n+\t}\n+\tABC3 interface {\n+\t\tA\n+\t\tBC\n+\t}\n+)\n+\n+var (\n+\tx1 ABC1\n+\tx2 ABC2\n+\tx3 ABC3\n+)\n+\n+func _() {\n+\t// all types have the same method set\n+\tx1 = x2\n+\tx2 = x1\n+\n+\tx1 = x3\n+\tx3 = x1\n+\n+\tx2 = x3\n+\tx3 = x2\n+\n+\t// all methods return the same type again\n+\tx1 = x1.a()\n+\tx1 = x1.b()\n+\tx1 = x1.c()\n+\n+\tx2 = x2.a()\n+\tx2 = x2.b()\n+\tx2 = x2.c()\n+\n+\tx3 = x3.a()\n+\tx3 = x3.b()\n+\tx3 = x3.c()\n+}"}, {"sha": "345ab56ea690c65433965ee968488efe026ef72c", "filename": "libgo/go/go/types/testdata/cycles2.src", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles2.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles2.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles2.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,118 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+// Test case for issue 5090\n+\n+type t interface {\n+\tf(u)\n+}\n+\n+type u interface {\n+\tt\n+}\n+\n+func _() {\n+\tvar t t\n+\tvar u u\n+\n+\tt.f(t)\n+\tt.f(u)\n+\t\n+\tu.f(t)\n+\tu.f(u)\n+}\n+\n+\n+// Test case for issue 6589.\n+\n+type A interface {\n+\ta() interface {\n+\t\tAB\n+\t}\n+}\n+\n+type B interface {\n+\ta() interface {\n+\t\tAB\n+\t}\n+}\n+\n+type AB interface {\n+\ta() interface {\n+\t\tA\n+\t\tB /* ERROR a redeclared */\n+\t}\n+\tb() interface {\n+\t\tA\n+\t\tB /* ERROR a redeclared */\n+\t}\n+}\n+\n+var x AB\n+var y interface {\n+\tA\n+\tB /* ERROR a redeclared */\n+}\n+var _ = x /* ERROR cannot compare */ == y\n+\n+\n+// Test case for issue 6638.\n+\n+type T interface {\n+\tm() [T /* ERROR no value */ (nil).m()[0]]int\n+}\n+\n+// Variations of this test case.\n+\n+type T1 interface {\n+\tm() [x1 /* ERROR no value */ .m()[0]]int\n+}\n+\n+var x1 T1\n+\n+type T2 interface {\n+\tm() [len(x2 /* ERROR no value */ .m())]int\n+}\n+\n+var x2 T2\n+\n+type T3 interface {\n+\tm() [unsafe.Sizeof(x3.m)]int\n+}\n+\n+var x3 T3\n+\n+// The test case below should also report an error for\n+// the cast inside the T4 interface (like it does for the\n+// variable initialization). The reason why it does not is\n+// that inside T4, the method x4.m depends on T4 which is not\n+// fully set up yet. The x4.m method happens to have an empty\n+// signature which is why the cast is permitted.\n+// TODO(gri) Consider marking methods as incomplete and provide\n+// a better error message in that case.\n+\n+type T4 interface {\n+\tm() [unsafe.Sizeof(cast4(x4.m))]int\n+}\n+\n+var x4 T4\n+var _ = cast4(x4 /* ERROR cannot convert */.m)\n+\n+type cast4 func()\n+\n+// This test is symmetric to the T4 case: Here the cast is\n+// \"correct\", but it doesn't work inside the T5 interface.\n+\n+type T5 interface {\n+\tm() [unsafe.Sizeof(cast5(x5 /* ERROR cannot convert */ .m))]int\n+}\n+\n+var x5 T5\n+var _ = cast5(x5.m)\n+\n+type cast5 func() [0]int"}, {"sha": "3da4fb5761a662ae0aa5108586ccb5a71e897698", "filename": "libgo/go/go/types/testdata/cycles3.src", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles3.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles3.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles3.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+var (\n+\t_ A = A(nil).a().b().c().d().e().f()\n+\t_ A = A(nil).b().c().d().e().f()\n+\t_ A = A(nil).c().d().e().f()\n+\t_ A = A(nil).d().e().f()\n+\t_ A = A(nil).e().f()\n+\t_ A = A(nil).f()\n+\t_ A = A(nil)\n+)\n+\n+type (\n+\tA interface {\n+\t\ta() B\n+\t\tB\n+\t}\n+\n+\tB interface {\n+\t\tb() C\n+\t\tC\n+\t}\n+\n+\tC interface {\n+\t\tc() D\n+\t\tD\n+\t}\n+\n+\tD interface {\n+\t\td() E\n+\t\tE\n+\t}\n+\n+\tE interface {\n+\t\te() F\n+\t\tF\n+\t}\n+\n+\tF interface {\n+\t\tf() A\n+\t}\n+)\n+\n+type (\n+\tU interface {\n+\t\tV\n+\t}\n+\n+\tV interface {\n+\t\tv() [unsafe.Sizeof(u)]int\n+\t}\n+)\n+\n+var u U"}, {"sha": "445babca68bc3db73a1cc192f366480171fbc659", "filename": "libgo/go/go/types/testdata/cycles4.src", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles4.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles4.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fcycles4.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+// Check that all methods of T are collected before\n+// determining the result type of m (which embeds\n+// all methods of T).\n+\n+type T interface {\n+\tm() interface {T}\n+\tE\n+}\n+\n+var _ = T.m(nil).m().e()\n+\n+type E interface {\n+\te() int\n+}\n+\n+// Check that unresolved forward chains are followed\n+// (see also comment in resolver.go, checker.typeDecl).\n+\n+var _ = C.m(nil).m().e()\n+\n+type A B\n+\n+type B interface {\n+\tm() interface{C}\n+\tE\n+}\n+\n+type C A\n+\n+// Check that interface type comparison for identity\n+// does not recur endlessly.\n+\n+type T1 interface {\n+\tm() interface{T1}\n+}\n+\n+type T2 interface {\n+\tm() interface{T2}\n+}\n+\n+func _(x T1, y T2) {\n+\t// Checking for assignability of interfaces must check\n+\t// if all methods of x are present in y, and that they\n+\t// have identical signatures. The signatures recur via\n+\t// the result type, which is an interface that embeds\n+\t// a single method m that refers to the very interface\n+\t// that contains it. This requires cycle detection in\n+\t// identity checks for interface types.\n+\tx = y\n+}\n+\n+type T3 interface {\n+\tm() interface{T4}\n+}\n+\n+type T4 interface {\n+\tm() interface{T3}\n+}\n+\n+func _(x T1, y T3) {\n+\tx = y\n+}\n+\n+// Check that interfaces are type-checked in order of\n+// (embedded interface) dependencies (was issue 7158).\n+\n+var x1 T5 = T7(nil)\n+\n+type T5 interface {\n+\tT6\n+}\n+\n+type T6 interface {\n+\tm() T7\n+}\n+type T7 interface {\n+\tT5\n+}\n+\n+// Actual test case from issue 7158.\n+\n+func wrapNode() Node {\n+\treturn wrapElement()\n+}\n+\n+func wrapElement() Element {\n+\treturn nil\n+}\n+\n+type EventTarget interface {\n+\tAddEventListener(Event)\n+}\n+\n+type Node interface {\n+\tEventTarget\n+}\n+\n+type Element interface {\n+\tNode\n+}\n+\n+type Event interface {\n+\tTarget() Element\n+}"}, {"sha": "d4df386b1322b4765614de8b3eeb66354e10e337", "filename": "libgo/go/go/types/testdata/decls0.src", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls0.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,210 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// type declarations\n+\n+package decls0\n+\n+import \"unsafe\"\n+\n+const pi = 3.1415\n+\n+type (\n+\tN undeclared /* ERROR \"undeclared\" */\n+\tB bool\n+\tI int32\n+\tA [10]P\n+\tT struct {\n+\t\tx, y P\n+\t}\n+\tP *T\n+\tR (*R)\n+\tF func(A) I\n+\tY interface {\n+\t\tf(A) I\n+\t}\n+\tS [](((P)))\n+\tM map[I]F\n+\tC chan<- I\n+\n+\t// blank types must be typechecked\n+\t_ pi /* ERROR \"not a type\" */\n+\t_ struct{}\n+\t_ struct{ pi /* ERROR \"not a type\" */ }\n+)\n+\n+\n+// declarations of init\n+const _, init /* ERROR \"cannot declare init\" */ , _ = 0, 1, 2\n+type init /* ERROR \"cannot declare init\" */ struct{}\n+var _, init /* ERROR \"cannot declare init\" */ int\n+\n+func init() {}\n+func init /* ERROR \"missing function body\" */ ()\n+\n+func _() { const init = 0 }\n+func _() { type init int }\n+func _() { var init int; _ = init }\n+\n+// invalid array types\n+type (\n+\tiA0 [... /* ERROR \"invalid use of '...'\" */ ]byte\n+\t// The error message below could be better. At the moment\n+\t// we believe an integer that is too large is not an integer.\n+\t// But at least we get an error.\n+\tiA1 [1 /* ERROR \"must be integer\" */ <<100]int\n+\tiA2 [- /* ERROR \"invalid array length\" */ 1]complex128\n+\tiA3 [\"foo\" /* ERROR \"must be integer\" */ ]string\n+\tiA4 [float64 /* ERROR \"must be integer\" */ (0)]int\n+)\n+\n+\n+type (\n+\tp1 pi /* ERROR \"no field or method foo\" */ .foo\n+\tp2 unsafe.Pointer\n+)\n+\n+\n+type (\n+\tPi pi /* ERROR \"not a type\" */\n+\n+\ta /* ERROR \"illegal cycle\" */ a\n+\ta /* ERROR \"redeclared\" */ int\n+\n+\t// where the cycle error appears depends on the\n+\t// order in which declarations are processed\n+\t// (which depends on the order in which a map\n+\t// is iterated through)\n+\tb /* ERROR \"illegal cycle\" */ c\n+\tc d\n+\td e\n+\te b\n+\n+\tt *t\n+\n+\tU V\n+\tV *W\n+\tW U\n+\n+\tP1 *S2\n+\tP2 P1\n+\n+\tS0 struct {\n+\t}\n+\tS1 struct {\n+\t\ta, b, c int\n+\t\tu, v, a /* ERROR \"redeclared\" */ float32\n+\t}\n+\tS2 struct {\n+\t\tS0 // anonymous field\n+\t\tS0 /* ERROR \"redeclared\" */ int\n+\t}\n+\tS3 struct {\n+\t\tx S2\n+\t}\n+\tS4/* ERROR \"illegal cycle\" */ struct {\n+\t\tS4\n+\t}\n+\tS5 /* ERROR \"illegal cycle\" */ struct {\n+\t\tS6\n+\t}\n+\tS6 struct {\n+\t\tfield S7\n+\t}\n+\tS7 struct {\n+\t\tS5\n+\t}\n+\n+\tL1 []L1\n+\tL2 []int\n+\n+\tA1 [10.0]int\n+\tA2 /* ERROR \"illegal cycle\" */ [10]A2\n+\tA3 /* ERROR \"illegal cycle\" */ [10]struct {\n+\t\tx A4\n+\t}\n+\tA4 [10]A3\n+\n+\tF1 func()\n+\tF2 func(x, y, z float32)\n+\tF3 func(x, y, x /* ERROR \"redeclared\" */ float32)\n+\tF4 func() (x, y, x /* ERROR \"redeclared\" */ float32)\n+\tF5 func(x int) (x /* ERROR \"redeclared\" */ float32)\n+\tF6 func(x ...int)\n+\n+\tI1 interface{}\n+\tI2 interface {\n+\t\tm1()\n+\t}\n+\tI3 interface {\n+\t\tm1()\n+\t\tm1 /* ERROR \"redeclared\" */ ()\n+\t}\n+\tI4 interface {\n+\t\tm1(x, y, x /* ERROR \"redeclared\" */ float32)\n+\t\tm2() (x, y, x /* ERROR \"redeclared\" */ float32)\n+\t\tm3(x int) (x /* ERROR \"redeclared\" */ float32)\n+\t}\n+\tI5 interface {\n+\t\tm1(I5)\n+\t}\n+\tI6 interface {\n+\t\tS0 /* ERROR \"not an interface\" */\n+\t}\n+\tI7 interface {\n+\t\tI1\n+\t\tI1\n+\t}\n+\tI8 /* ERROR \"illegal cycle\" */ interface {\n+\t\tI8\n+\t}\n+\tI9 interface {\n+\t\tI10\n+\t}\n+\tI10 interface {\n+\t\tI11\n+\t}\n+\tI11 /* ERROR \"illegal cycle\" */ interface {\n+\t\tI9\n+\t}\n+\n+\tC1 chan int\n+\tC2 <-chan int\n+\tC3 chan<- C3\n+\tC4 chan C5\n+\tC5 chan C6\n+\tC6 chan C4\n+\n+\tM1 map[Last]string\n+\tM2 map[string]M2\n+\n+\tLast int\n+)\n+\n+// cycles in function/method declarations\n+// (test cases for issue 5217 and variants)\n+func f1(x f1 /* ERROR \"not a type\" */ ) {}\n+func f2(x *f2 /* ERROR \"not a type\" */ ) {}\n+func f3() (x f3 /* ERROR \"not a type\" */ ) { return }\n+func f4() (x *f4 /* ERROR \"not a type\" */ ) { return }\n+\n+func (S0) m1(x S0 /* ERROR \"field or method\" */ .m1) {}\n+func (S0) m2(x *S0 /* ERROR \"field or method\" */ .m2) {}\n+func (S0) m3() (x S0 /* ERROR \"field or method\" */ .m3) { return }\n+func (S0) m4() (x *S0 /* ERROR \"field or method\" */ .m4) { return }\n+\n+// interfaces may not have any blank methods\n+type BlankI interface {\n+\t_ /* ERROR \"invalid method name\" */ ()\n+\t_ /* ERROR \"invalid method name\" */ (float32) int\n+\tm()\n+}\n+\n+// non-interface types may have multiple blank methods\n+type BlankT struct{}\n+\n+func (BlankT) _() {}\n+func (BlankT) _(int) {}\n+func (BlankT) _() int { return 0 }\n+func (BlankT) _(int) int { return 0}"}, {"sha": "cb162f7aa7bb7c824dfc2c0342168041b7902216", "filename": "libgo/go/go/types/testdata/decls1.src", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls1.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,144 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// variable declarations\n+\n+package decls1\n+\n+import (\n+\t\"math\"\n+)\n+\n+// Global variables without initialization\n+var (\n+\ta, b bool\n+\tc byte\n+\td uint8\n+\tr rune\n+\ti int\n+\tj, k, l int\n+\tx, y float32\n+\txx, yy float64\n+\tu, v complex64\n+\tuu, vv complex128\n+\ts, t string\n+\tarray []byte\n+\tiface interface{}\n+\n+\tblank _ /* ERROR \"cannot use _\" */\n+)\n+\n+// Global variables with initialization\n+var (\n+\ts1 = i + j\n+\ts2 = i /* ERROR \"mismatched types\" */ + x\n+\ts3 = c + d\n+\ts4 = s + t\n+\ts5 = s /* ERROR \"invalid operation\" */ / t\n+\ts6 = array[t1]\n+\ts7 = array[x /* ERROR \"integer\" */]\n+\ts8 = &a\n+\ts10 = &42 /* ERROR \"cannot take address\" */\n+\ts11 = &v\n+\ts12 = -(u + *t11) / *&v\n+\ts13 = a /* ERROR \"shifted operand\" */ << d\n+\ts14 = i << j /* ERROR \"must be unsigned\" */\n+\ts18 = math.Pi * 10.0\n+\ts19 = s1 /* ERROR \"cannot call\" */ ()\n+ \ts20 = f0 /* ERROR \"no value\" */ ()\n+\ts21 = f6(1, s1, i)\n+\ts22 = f6(1, s1, uu /* ERROR \"cannot use .* in argument\" */ )\n+\n+\tt1 int = i + j\n+\tt2 int = i /* ERROR \"mismatched types\" */ + x\n+\tt3 int = c /* ERROR \"cannot use .* variable declaration\" */ + d\n+\tt4 string = s + t\n+\tt5 string = s /* ERROR \"invalid operation\" */ / t\n+\tt6 byte = array[t1]\n+\tt7 byte = array[x /* ERROR \"must be integer\" */]\n+\tt8 *int = & /* ERROR \"cannot use .* variable declaration\" */ a\n+\tt10 *int = &42 /* ERROR \"cannot take address\" */\n+\tt11 *complex64 = &v\n+\tt12 complex64 = -(u + *t11) / *&v\n+\tt13 int = a /* ERROR \"shifted operand\" */ << d\n+\tt14 int = i << j /* ERROR \"must be unsigned\" */\n+\tt15 math /* ERROR \"not in selector\" */\n+\tt16 math /* ERROR \"not declared\" */ .xxx\n+\tt17 math /* ERROR \"not a type\" */ .Pi\n+\tt18 float64 = math.Pi * 10.0\n+\tt19 int = t1 /* ERROR \"cannot call\" */ ()\n+\tt20 int = f0 /* ERROR \"no value\" */ ()\n+\tt21 int = a /* ERROR \"cannot use .* variable declaration\" */\n+)\n+\n+// Various more complex expressions\n+var (\n+\tu1 = x /* ERROR \"not an interface\" */ .(int)\n+\tu2 = iface.([]int)\n+\tu3 = iface.(a /* ERROR \"not a type\" */ )\n+\tu4, ok = iface.(int)\n+\tu5, ok2, ok3 = iface /* ERROR \"assignment count mismatch\" */ .(int)\n+)\n+\n+// Constant expression initializations\n+var (\n+\tv1 = 1 /* ERROR \"cannot convert\" */ + \"foo\"\n+\tv2 = c + 255\n+\tv3 = c + 256 /* ERROR \"overflows\" */\n+\tv4 = r + 2147483647\n+\tv5 = r + 2147483648 /* ERROR \"overflows\" */\n+\tv6 = 42\n+\tv7 = v6 + 9223372036854775807\n+\tv8 = v6 + 9223372036854775808 /* ERROR \"overflows\" */\n+\tv9 = i + 1 << 10\n+\tv10 byte = 1024 /* ERROR \"overflows\" */\n+\tv11 = xx/yy*yy - xx\n+\tv12 = true && false\n+\tv13 = nil /* ERROR \"use of untyped nil\" */\n+)\n+\n+// Multiple assignment expressions\n+var (\n+\tm1a, m1b = 1, 2\n+\tm2a, m2b, m2c /* ERROR \"missing init expr for m2c\" */ = 1, 2\n+\tm3a, m3b = 1, 2, 3 /* ERROR \"extra init expr 3\" */\n+)\n+\n+func _() {\n+\tvar (\n+\t\tm1a, m1b = 1, 2\n+\t\tm2a, m2b, m2c /* ERROR \"missing init expr for m2c\" */ = 1, 2\n+\t\tm3a, m3b = 1, 2, 3 /* ERROR \"extra init expr 3\" */\n+\t)\n+\n+\t_, _ = m1a, m1b\n+\t_, _, _ = m2a, m2b, m2c\n+\t_, _ = m3a, m3b\n+}\n+\n+// Declaration of parameters and results\n+func f0() {}\n+func f1(a /* ERROR \"not a type\" */) {}\n+func f2(a, b, c d /* ERROR \"not a type\" */) {}\n+\n+func f3() int { return 0 }\n+func f4() a /* ERROR \"not a type\" */ { return 0 }\n+func f5() (a, b, c d /* ERROR \"not a type\" */) { return }\n+\n+func f6(a, b, c int) complex128 { return 0 }\n+\n+// Declaration of receivers\n+type T struct{}\n+\n+func (T) m0() {}\n+func (*T) m1() {}\n+func (x T) m2() {}\n+func (x *T) m3() {}\n+\n+// Initialization functions\n+func init() {}\n+func /* ERROR \"no arguments and no return values\" */ init(int) {}\n+func /* ERROR \"no arguments and no return values\" */ init() int { return 0 }\n+func /* ERROR \"no arguments and no return values\" */ init(int) int { return 0 }\n+func (T) init(int) int { return 0 }"}, {"sha": "bdbecd9dbb6358a38b9d535c461624562d66b51d", "filename": "libgo/go/go/types/testdata/decls2a.src", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2a.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2a.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2a.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,111 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// method declarations\n+\n+package decls2\n+\n+import \"time\"\n+import \"unsafe\"\n+\n+// T1 declared before its methods.\n+type T1 struct{\n+\tf int\n+}\n+\n+func (T1) m() {}\n+func (T1) m /* ERROR \"already declared\" */ () {}\n+func (x *T1) f /* ERROR \"field and method\" */ () {}\n+\n+// Conflict between embedded field and method name,\n+// with the embedded field being a basic type.\n+type T1b struct {\n+\tint\n+}\n+\n+func (T1b) int /* ERROR \"field and method\" */ () {}\n+\n+type T1c struct {\n+\ttime.Time\n+}\n+\n+func (T1c) Time /* ERROR \"field and method\" */ () int { return 0 }\n+\n+// Disabled for now: LookupFieldOrMethod will find Pointer even though\n+// it's double-declared (it would cost extra in the common case to verify\n+// this). But the MethodSet computation will not find it due to the name\n+// collision caused by the double-declaration, leading to an internal\n+// inconsistency while we are verifying one computation against the other.\n+// var _ = T1c{}.Pointer\n+\n+// T2's method declared before the type.\n+func (*T2) f /* ERROR \"field and method\" */ () {}\n+\n+type T2 struct {\n+\tf int\n+}\n+\n+// Methods declared without a declared type.\n+func (undeclared /* ERROR \"undeclared\" */) m() {}\n+func (x *undeclared /* ERROR \"undeclared\" */) m() {}\n+\n+func (pi /* ERROR \"not a type\" */) m1() {}\n+func (x pi /* ERROR \"not a type\" */) m2() {}\n+func (x *pi /* ERROR \"not a type\" */ ) m3() {}\n+\n+// Blank types.\n+type _ struct { m int }\n+type _ struct { m int }\n+\n+func (_ /* ERROR \"cannot use _\" */) m() {}\n+func m(_ /* ERROR \"cannot use _\" */) {}\n+\n+// Methods with receiver base type declared in another file.\n+func (T3) m1() {}\n+func (*T3) m2() {}\n+func (x T3) m3() {}\n+func (x *T3) f /* ERROR \"field and method\" */ () {}\n+\n+// Methods of non-struct type.\n+type T4 func()\n+\n+func (self T4) m() func() { return self }\n+\n+// Methods associated with an interface.\n+type T5 interface {\n+\tm() int\n+}\n+\n+func (T5 /* ERROR \"invalid receiver\" */ ) m1() {}\n+func (T5 /* ERROR \"invalid receiver\" */ ) m2() {}\n+\n+// Methods associated with a named pointer type.\n+type ptr *int\n+func (ptr /* ERROR \"invalid receiver\" */ ) _() {}\n+func (* /* ERROR \"invalid receiver\" */ ptr) _() {}\n+\n+// Methods with zero or multiple receivers.\n+func ( /* ERROR \"missing receiver\" */ ) _() {}\n+func (T3, * /* ERROR \"exactly one receiver\" */ T3) _() {}\n+func (T3, T3, T3 /* ERROR \"exactly one receiver\" */ ) _() {}\n+func (a, b /* ERROR \"exactly one receiver\" */ T3) _() {}\n+func (a, b, c /* ERROR \"exactly one receiver\" */ T3) _() {}\n+\n+// Methods associated with non-local or unnamed types.\n+func (int /* ERROR \"invalid receiver\" */ ) m() {}\n+func ([ /* ERROR \"invalid receiver\" */ ]int) m() {}\n+func (time /* ERROR \"invalid receiver\" */ .Time) m() {}\n+func (* /* ERROR \"invalid receiver\" */ time.Time) m() {}\n+func (x /* ERROR \"invalid receiver\" */ interface{}) m() {}\n+\n+// Unsafe.Pointer is treated like a pointer when used as receiver type.\n+type UP unsafe.Pointer\n+func (UP /* ERROR \"invalid\" */ ) m1() {}\n+func (* /* ERROR \"invalid\" */ UP) m2() {}\n+\n+// Double declarations across package files\n+const c_double = 0\n+type t_double int\n+var v_double int\n+func f_double() {}"}, {"sha": "e7bc394762f8c5532490b09ad8924197f3afd734", "filename": "libgo/go/go/types/testdata/decls2b.src", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2b.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2b.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2b.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// method declarations\n+\n+package decls2\n+\n+import \"io\"\n+\n+const pi = 3.1415\n+\n+func (T1) m /* ERROR \"already declared\" */ () {}\n+func (T2) m(io.Writer) {}\n+\n+type T3 struct {\n+\tf *T3\n+}\n+\n+type T6 struct {\n+\tx int\n+}\n+\n+func (t *T6) m1() int {\n+\treturn t.x\n+}\n+\n+func f() {\n+\tvar t *T6\n+\tt.m1()\n+}\n+\n+// Double declarations across package files\n+const c_double /* ERROR \"redeclared\" */ = 0\n+type t_double  /* ERROR \"redeclared\" */ int\n+var v_double /* ERROR \"redeclared\" */ int\n+func f_double /* ERROR \"redeclared\" */ () {}\n+\n+// Blank methods need to be type-checked.\n+// Verify by checking that errors are reported.\n+func (T /* ERROR \"undeclared\" */ ) _() {}\n+func (T1) _(undeclared /* ERROR \"undeclared\" */ ) {}\n+func (T1) _() int { return \"foo\" /* ERROR \"cannot convert\" */ }\n+\n+// Methods with undeclared receiver type can still be checked.\n+// Verify by checking that errors are reported.\n+func (Foo /* ERROR \"undeclared\" */ ) m() {}\n+func (Foo /* ERROR \"undeclared\" */ ) m(undeclared /* ERROR \"undeclared\" */ ) {}\n+func (Foo /* ERROR \"undeclared\" */ ) m() int { return \"foo\" /* ERROR \"cannot convert\" */ }\n+\n+func (Foo /* ERROR \"undeclared\" */ ) _() {}\n+func (Foo /* ERROR \"undeclared\" */ ) _(undeclared /* ERROR \"undeclared\" */ ) {}\n+func (Foo /* ERROR \"undeclared\" */ ) _() int { return \"foo\" /* ERROR \"cannot convert\" */ }\n+\n+// Receiver declarations are regular parameter lists;\n+// receiver types may use parentheses, and the list\n+// may have a trailing comma.\n+type T7 struct {}\n+\n+func (T7) m1() {}\n+func ((T7)) m2() {}\n+func ((*T7)) m3() {}\n+func (x *(T7),) m4() {}\n+func (x (*(T7)),) m5() {}\n+func (x ((*((T7)))),) m6() {}"}, {"sha": "80d2bc8ff8e5a8afc8c3235a7f1c43f4207678bf", "filename": "libgo/go/go/types/testdata/decls3.src", "status": "added", "additions": 309, "deletions": 0, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls3.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls3.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls3.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,309 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// embedded types\n+\n+package decls3\n+\n+import \"unsafe\"\n+import \"fmt\"\n+\n+// fields with the same name at the same level cancel each other out\n+\n+func _() {\n+\ttype (\n+\t\tT1 struct { X int }\n+\t\tT2 struct { X int }\n+\t\tT3 struct { T1; T2 } // X is embedded twice at the same level via T1->X, T2->X\n+\t)\n+\n+\tvar t T3\n+\t_ = t /* ERROR \"ambiguous selector\" */ .X\n+}\n+\n+func _() {\n+\ttype (\n+\t\tT1 struct { X int }\n+\t\tT2 struct { T1 }\n+\t\tT3 struct { T1 }\n+\t\tT4 struct { T2; T3 } // X is embedded twice at the same level via T2->T1->X, T3->T1->X\n+\t)\n+\n+\tvar t T4\n+\t_ = t /* ERROR \"ambiguous selector\" */ .X\n+}\n+\n+func issue4355() {\n+\ttype (\n+\t    T1 struct {X int}\n+\t    T2 struct {T1}\n+\t    T3 struct {T2}\n+\t    T4 struct {T2}\n+\t    T5 struct {T3; T4} // X is embedded twice at the same level via T3->T2->T1->X, T4->T2->T1->X\n+\t)\t\n+\n+\tvar t T5\n+\t_ = t /* ERROR \"ambiguous selector\" */ .X\n+}\n+\n+func _() {\n+\ttype State int\n+\ttype A struct{ State }\n+\ttype B struct{ fmt.State }\n+\ttype T struct{ A; B }\n+\n+\tvar t T\n+\t_ = t /* ERROR \"ambiguous selector\" */ .State\n+}\n+\n+// Embedded fields can be predeclared types.\n+\n+func _() {\n+\ttype T0 struct{\n+\t\tint\n+\t\tfloat32\n+\t\tf int\n+\t}\n+\tvar x T0\n+\t_ = x.int\n+\t_ = x.float32\n+\t_ = x.f\n+\n+\ttype T1 struct{\n+\t\tT0\n+\t}\n+\tvar y T1\n+\t_ = y.int\n+\t_ = y.float32\n+\t_ = y.f\n+}\n+\n+// Restrictions on embedded field types.\n+\n+func _() {\n+\ttype I1 interface{}\n+\ttype I2 interface{}\n+\ttype P1 *int\n+\ttype P2 *int\n+\ttype UP unsafe.Pointer\n+\n+\ttype T1 struct {\n+\t\tI1\n+\t\t* /* ERROR \"cannot be a pointer to an interface\" */ I2\n+\t\t* /* ERROR \"cannot be a pointer to an interface\" */ error\n+\t\tP1 /* ERROR \"cannot be a pointer\" */\n+\t\t* /* ERROR \"cannot be a pointer\" */ P2\n+\t}\n+\n+\t// unsafe.Pointers are treated like regular pointers when embedded\n+\ttype T2 struct {\n+\t\tunsafe /* ERROR \"cannot be unsafe.Pointer\" */ .Pointer\n+\t\t*/* ERROR \"cannot be unsafe.Pointer\" */ unsafe.Pointer\n+\t\tUP /* ERROR \"cannot be unsafe.Pointer\" */\n+\t\t* /* ERROR \"cannot be unsafe.Pointer\" */ UP\n+\t}\n+}\n+\n+// Named types that are pointers.\n+\n+type S struct{ x int }\n+func (*S) m() {}\n+type P *S\n+\n+func _() {\n+\tvar s *S\n+\t_ = s.x\n+\t_ = s.m\n+\n+\tvar p P\n+\t_ = p.x\n+\t_ = p /* ERROR \"no field or method\" */ .m\n+\t_ = P /* ERROR \"no field or method\" */ .m\n+}\n+\n+// Borrowed from the FieldByName test cases in reflect/all_test.go.\n+\n+type D1 struct {\n+\td int\n+}\n+type D2 struct {\n+\td int\n+}\n+\n+type S0 struct {\n+\tA, B, C int\n+\tD1\n+\tD2\n+}\n+\n+type S1 struct {\n+\tB int\n+\tS0\n+}\n+\n+type S2 struct {\n+\tA int\n+\t*S1\n+}\n+\n+type S1x struct {\n+\tS1\n+}\n+\n+type S1y struct {\n+\tS1\n+}\n+\n+type S3 struct {\n+\tS1x\n+\tS2\n+\tD, E int\n+\t*S1y\n+}\n+\n+type S4 struct {\n+\t*S4\n+\tA int\n+}\n+\n+// The X in S6 and S7 annihilate, but they also block the X in S8.S9.\n+type S5 struct {\n+\tS6\n+\tS7\n+\tS8\n+}\n+\n+type S6 struct {\n+\tX int\n+}\n+\n+type S7 S6\n+\n+type S8 struct {\n+\tS9\n+}\n+\n+type S9 struct {\n+\tX int\n+\tY int\n+}\n+\n+// The X in S11.S6 and S12.S6 annihilate, but they also block the X in S13.S8.S9.\n+type S10 struct {\n+\tS11\n+\tS12\n+\tS13\n+}\n+\n+type S11 struct {\n+\tS6\n+}\n+\n+type S12 struct {\n+\tS6\n+}\n+\n+type S13 struct {\n+\tS8\n+}\n+\n+func _() {\n+\t_ = struct /* ERROR \"no field or method\" */ {}{}.Foo\n+\t_ = S0{}.A\n+\t_ = S0 /* ERROR \"no field or method\" */ {}.D\n+\t_ = S1{}.A\n+\t_ = S1{}.B\n+\t_ = S1{}.S0\n+\t_ = S1{}.C\n+\t_ = S2{}.A\n+\t_ = S2{}.S1\n+\t_ = S2{}.B\n+\t_ = S2{}.C\n+\t_ = S2 /* ERROR \"no field or method\" */ {}.D\n+\t_ = S3 /* ERROR \"ambiguous selector\" */ {}.S1\n+\t_ = S3{}.A\n+\t_ = S3 /* ERROR \"ambiguous selector\" */ {}.B\n+\t_ = S3{}.D\n+\t_ = S3{}.E\n+\t_ = S4{}.A\n+\t_ = S4 /* ERROR \"no field or method\" */ {}.B\n+\t_ = S5 /* ERROR \"ambiguous selector\" */ {}.X\n+\t_ = S5{}.Y\n+\t_ = S10 /* ERROR \"ambiguous selector\" */ {}.X\n+\t_ = S10{}.Y\n+}\n+\n+// Borrowed from the FieldByName benchmark in reflect/all_test.go.\n+\n+type R0 struct {\n+\t*R1\n+\t*R2\n+\t*R3\n+\t*R4\n+}\n+\n+type R1 struct {\n+\t*R5\n+\t*R6\n+\t*R7\n+\t*R8\n+}\n+\n+type R2 R1\n+type R3 R1\n+type R4 R1\n+\n+type R5 struct {\n+\t*R9\n+\t*R10\n+\t*R11\n+\t*R12\n+}\n+\n+type R6 R5\n+type R7 R5\n+type R8 R5\n+\n+type R9 struct {\n+\t*R13\n+\t*R14\n+\t*R15\n+\t*R16\n+}\n+\n+type R10 R9\n+type R11 R9\n+type R12 R9\n+\n+type R13 struct {\n+\t*R17\n+\t*R18\n+\t*R19\n+\t*R20\n+}\n+\n+type R14 R13\n+type R15 R13\n+type R16 R13\n+\n+type R17 struct {\n+\t*R21\n+\t*R22\n+\t*R23\n+\t*R24\n+}\n+\n+type R18 R17\n+type R19 R17\n+type R20 R17\n+\n+type R21 struct {\n+\tX int\n+}\n+\n+type R22 R21\n+type R23 R21\n+type R24 R21\n+\n+var _ = R0 /* ERROR \"ambiguous selector\" */ {}.X\n\\ No newline at end of file"}, {"sha": "29fcd8fe1da6de58a5e83c19a2c00926f8e1ecd0", "filename": "libgo/go/go/types/testdata/errors.src", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Ferrors.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Ferrors.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Ferrors.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package errors\n+\n+// Testing precise operand formatting in error messages\n+// (matching messages are regular expressions, hence the \\'s).\n+func f(x int, m map[string]int) {\n+\t// no values\n+\t_ = f /* ERROR \"f\\(0, m\\) \\(no value\\) used as value\" */ (0, m)\n+\n+\t// built-ins\n+\t_ = println /* ERROR \"println \\(built-in\\) must be called\" */\n+\n+\t// types\n+\t_ = complex128 /* ERROR \"complex128 \\(type\\) is not an expression\" */\n+\n+\t// constants\n+\tconst c1 = 991\n+\tconst c2 float32 = 0.5\n+\t0 /* ERROR \"0 \\(untyped int constant\\) is not used\" */\n+\tc1 /* ERROR \"c1 \\(untyped int constant 991\\) is not used\" */\n+\tc2 /* ERROR \"c2 \\(constant 0.5 of type float32\\) is not used\" */\n+\tc1 /* ERROR \"c1 \\+ c2 \\(constant 991.5 of type float32\\) is not used\" */ + c2\n+\n+\t// variables\n+\tx /* ERROR \"x \\(variable of type int\\) is not used\" */\n+\n+\t// values\n+\tx /* ERROR \"x != x \\(untyped bool value\\) is not used\" */ != x\n+\tx /* ERROR \"x \\+ x \\(value of type int\\) is not used\" */ + x\n+\n+\t// value, ok's\n+\tconst s = \"foo\"\n+\tm /* ERROR \"m\\[s\\] \\(map index expression of type int\\) is not used\" */ [s]\n+}\n+\n+// Valid ERROR comments can have a variety of forms.\n+func _() {\n+\t0 /* ERROR \"0 .* is not used\" */\n+\t0 /* ERROR 0 .* is not used */\n+\t0 // ERROR \"0 .* is not used\"\n+\t0 // ERROR 0 .* is not used\n+}\n+\n+// Don't report spurious errors as a consequence of earlier errors.\n+// Add more tests as needed.\n+func _() {\n+\tif err := foo /* ERROR undeclared */ (); err != nil /* no error here */ {}\n+}\n+\n+// Use unqualified names for package-local objects.\n+type T struct{}\n+var _ int = T /* ERROR value of type T */ {} // use T in error message rather then errors.T"}, {"sha": "1aac726327b28265af426a838d801fe15ed1ab6d", "filename": "libgo/go/go/types/testdata/expr0.src", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr0.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,180 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// unary expressions\n+\n+package expr0 \n+\n+type mybool bool\n+\n+var (\n+\t// bool\n+\tb0 = true\n+\tb1 bool = b0\n+\tb2 = !true\n+\tb3 = !b1\n+\tb4 bool = !true\n+\tb5 bool = !b4\n+\tb6 = +b0 /* ERROR \"not defined\" */\n+\tb7 = -b0 /* ERROR \"not defined\" */\n+\tb8 = ^b0 /* ERROR \"not defined\" */\n+\tb9 = *b0 /* ERROR \"cannot indirect\" */\n+\tb10 = &true /* ERROR \"cannot take address\" */\n+\tb11 = &b0\n+\tb12 = <-b0 /* ERROR \"cannot receive\" */\n+\tb13 = & & /* ERROR \"cannot take address\" */ b0\n+\n+\t// byte\n+\t_ = byte(0)\n+\t_ = byte(- /* ERROR \"cannot convert\" */ 1)\n+\t_ = - /* ERROR \"-byte\\(1\\) \\(constant -1 of type byte\\) overflows byte\" */ byte(1) // test for issue 11367\n+\t_ = byte /* ERROR \"overflows byte\" */ (0) - byte(1)\n+\n+\t// int\n+\ti0 = 1\n+\ti1 int = i0\n+\ti2 = +1\n+\ti3 = +i0\n+\ti4 int = +1\n+\ti5 int = +i4\n+\ti6 = -1\n+\ti7 = -i0\n+\ti8 int = -1\n+\ti9 int = -i4\n+\ti10 = !i0 /* ERROR \"not defined\" */\n+\ti11 = ^1\n+\ti12 = ^i0\n+\ti13 int = ^1\n+\ti14 int = ^i4\n+\ti15 = *i0 /* ERROR \"cannot indirect\" */\n+\ti16 = &i0\n+\ti17 = *i16\n+\ti18 = <-i16 /* ERROR \"cannot receive\" */\n+\n+\t// uint\n+\tu0 = uint(1)\n+\tu1 uint = u0\n+\tu2 = +1\n+\tu3 = +u0\n+\tu4 uint = +1\n+\tu5 uint = +u4\n+\tu6 = -1\n+\tu7 = -u0\n+\tu8 uint = - /* ERROR \"overflows\" */ 1\n+\tu9 uint = -u4\n+\tu10 = !u0 /* ERROR \"not defined\" */\n+\tu11 = ^1\n+\tu12 = ^i0\n+\tu13 uint = ^ /* ERROR \"overflows\" */ 1\n+\tu14 uint = ^u4\n+\tu15 = *u0 /* ERROR \"cannot indirect\" */\n+\tu16 = &u0\n+\tu17 = *u16\n+\tu18 = <-u16 /* ERROR \"cannot receive\" */\n+\tu19 = ^uint(0)\n+\n+\t// float64\n+\tf0 = float64(1)\n+\tf1 float64 = f0\n+\tf2 = +1\n+\tf3 = +f0\n+\tf4 float64 = +1\n+\tf5 float64 = +f4\n+\tf6 = -1\n+\tf7 = -f0\n+\tf8 float64 = -1\n+\tf9 float64 = -f4\n+\tf10 = !f0 /* ERROR \"not defined\" */\n+\tf11 = ^1\n+\tf12 = ^i0\n+\tf13 float64 = ^1\n+\tf14 float64 = ^f4 /* ERROR \"not defined\" */\n+\tf15 = *f0 /* ERROR \"cannot indirect\" */\n+\tf16 = &f0\n+\tf17 = *u16\n+\tf18 = <-u16 /* ERROR \"cannot receive\" */\n+\n+\t// complex128\n+\tc0 = complex128(1)\n+\tc1 complex128 = c0\n+\tc2 = +1\n+\tc3 = +c0\n+\tc4 complex128 = +1\n+\tc5 complex128 = +c4\n+\tc6 = -1\n+\tc7 = -c0\n+\tc8 complex128 = -1\n+\tc9 complex128 = -c4\n+\tc10 = !c0 /* ERROR \"not defined\" */\n+\tc11 = ^1\n+\tc12 = ^i0\n+\tc13 complex128 = ^1\n+\tc14 complex128 = ^c4 /* ERROR \"not defined\" */\n+\tc15 = *c0 /* ERROR \"cannot indirect\" */\n+\tc16 = &c0\n+\tc17 = *u16\n+\tc18 = <-u16 /* ERROR \"cannot receive\" */\n+\n+\t// string\n+\ts0 = \"foo\"\n+\ts1 = +\"foo\" /* ERROR \"not defined\" */\n+\ts2 = -s0 /* ERROR \"not defined\" */\n+\ts3 = !s0 /* ERROR \"not defined\" */\n+\ts4 = ^s0 /* ERROR \"not defined\" */\n+\ts5 = *s4\n+\ts6 = &s4\n+\ts7 = *s6\n+\ts8 = <-s7\n+\n+\t// channel\n+\tch chan int\n+\trc <-chan float64\n+\tsc chan <- string\n+\tch0 = +ch /* ERROR \"not defined\" */\n+\tch1 = -ch /* ERROR \"not defined\" */\n+\tch2 = !ch /* ERROR \"not defined\" */\n+\tch3 = ^ch /* ERROR \"not defined\" */\n+\tch4 = *ch /* ERROR \"cannot indirect\" */\n+\tch5 = &ch\n+\tch6 = *ch5\n+\tch7 = <-ch\n+\tch8 = <-rc\n+\tch9 = <-sc /* ERROR \"cannot receive\" */\n+\tch10, ok = <-ch\n+\t// ok is of type bool\n+\tch11, myok = <-ch\n+\t_ mybool = myok /* ERROR \"cannot use .* in variable declaration\" */\n+)\n+\n+// address of composite literals\n+type T struct{x, y int}\n+\n+func f() T { return T{} }\n+\n+var (\n+\t_ = &T{1, 2}\n+\t_ = &[...]int{}\n+\t_ = &[]int{}\n+\t_ = &[]int{}\n+\t_ = &map[string]T{}\n+\t_ = &(T{1, 2})\n+\t_ = &((((T{1, 2}))))\n+\t_ = &f /* ERROR \"cannot take address\" */ ()\n+)\n+\n+// recursive pointer types\n+type P *P\n+\n+var (\n+\tp1 P = new(P)\n+\tp2 P = *p1\n+\tp3 P = &p2\n+)\n+\n+func g() (a, b int) { return }\n+\n+func _() {\n+\t_ = -g /* ERROR 2-valued g */ ()\n+\t_ = <-g /* ERROR 2-valued g */ ()\n+}"}, {"sha": "eaaf610b03b54332469dd5524c4fdd7285146801", "filename": "libgo/go/go/types/testdata/expr1.src", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr1.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,127 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// binary expressions\n+\n+package expr1\n+\n+type mybool bool\n+\n+func _(x, y bool, z mybool) {\n+\tx = x || y\n+\tx = x || true\n+\tx = x || false\n+\tx = x && y\n+\tx = x && true\n+\tx = x && false\n+\n+\tz = z /* ERROR mismatched types */ || y\n+\tz = z || true\n+\tz = z || false\n+\tz = z /* ERROR mismatched types */ && y\n+\tz = z && true\n+\tz = z && false\n+}\n+\n+type myint int\n+\n+func _(x, y int, z myint) {\n+\tx = x + 1\n+\tx = x + 1.0\n+\tx = x + 1.1 // ERROR truncated to int\n+\tx = x + y\n+\tx = x - y\n+\tx = x * y\n+\tx = x / y\n+\tx = x % y\n+\tx = x << y // ERROR must be unsigned integer\n+\tx = x >> y // ERROR must be unsigned integer\n+\n+\tz = z + 1\n+\tz = z + 1.0\n+\tz = z + 1.1 // ERROR truncated to int\n+\tz = z /* ERROR mismatched types */ + y\n+\tz = z /* ERROR mismatched types */ - y\n+\tz = z /* ERROR mismatched types */ * y\n+\tz = z /* ERROR mismatched types */ / y\n+\tz = z /* ERROR mismatched types */ % y\n+\tz = z << y // ERROR must be unsigned integer\n+\tz = z >> y // ERROR must be unsigned integer\n+}\n+\n+type myuint uint\n+\n+func _(x, y uint, z myuint) {\n+\tx = x + 1\n+\tx = x + - /* ERROR overflows uint */ 1\n+\tx = x + 1.0\n+\tx = x + 1.1 // ERROR truncated to uint\n+\tx = x + y\n+\tx = x - y\n+\tx = x * y\n+\tx = x / y\n+\tx = x % y\n+\tx = x << y\n+\tx = x >> y\n+\n+\tz = z + 1\n+\tz = x + - /* ERROR overflows uint */ 1\n+\tz = z + 1.0\n+\tz = z + 1.1 // ERROR truncated to uint\n+\tz = z /* ERROR mismatched types */ + y\n+\tz = z /* ERROR mismatched types */ - y\n+\tz = z /* ERROR mismatched types */ * y\n+\tz = z /* ERROR mismatched types */ / y\n+\tz = z /* ERROR mismatched types */ % y\n+\tz = z << y\n+\tz = z >> y\n+}\n+\n+type myfloat64 float64\n+\n+func _(x, y float64, z myfloat64) {\n+\tx = x + 1\n+\tx = x + -1\n+\tx = x + 1.0\n+\tx = x + 1.1\n+\tx = x + y\n+\tx = x - y\n+\tx = x * y\n+\tx = x / y\n+\tx = x /* ERROR not defined */ % y\n+\tx = x /* ERROR operand x .* must be integer */ << y\n+\tx = x /* ERROR operand x .* must be integer */ >> y\n+\n+\tz = z + 1\n+\tz = z + -1\n+\tz = z + 1.0\n+\tz = z + 1.1\n+\tz = z /* ERROR mismatched types */ + y\n+\tz = z /* ERROR mismatched types */ - y\n+\tz = z /* ERROR mismatched types */ * y\n+\tz = z /* ERROR mismatched types */ / y\n+\tz = z /* ERROR mismatched types */ % y\n+\tz = z /* ERROR operand z .* must be integer */ << y\n+\tz = z /* ERROR operand z .* must be integer */ >> y\n+}\n+\n+type mystring string\n+\n+func _(x, y string, z mystring) {\n+\tx = x + \"foo\"\n+\tx = x /* ERROR not defined */ - \"foo\"\n+\tx = x + 1 // ERROR cannot convert\n+\tx = x + y\n+\tx = x /* ERROR not defined */ - y\n+\tx = x * 10 // ERROR cannot convert\n+}\n+\n+func f() (a, b int) { return }\n+\n+func _(x int) {\n+\t_ = f /* ERROR 2-valued f */ () + 1\n+\t_ = x + f /* ERROR 2-valued f */ ()\n+\t_ = f /* ERROR 2-valued f */ () + f\n+\t_ = f /* ERROR 2-valued f */ () + f /* ERROR 2-valued f */ ()\n+}"}, {"sha": "31dc5f021c029f47654cdb7ad3cd777b829a7f80", "filename": "libgo/go/go/types/testdata/expr2.src", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr2.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr2.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr2.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,247 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// comparisons\n+\n+package expr2\n+\n+func _bool() {\n+\tconst t = true == true\n+\tconst f = true == false\n+\t_ = t /* ERROR \"cannot compare\" */ < f\n+\t_ = 0 /* ERROR \"cannot convert\" */ == t\n+\tvar b bool\n+\tvar x, y float32\n+\tb = x < y\n+\t_ = b\n+\t_ = struct{b bool}{x < y}\n+}\n+\n+// corner cases\n+var (\n+\tv0 = nil /* ERROR \"cannot compare\" */ == nil\n+)\n+\n+func arrays() {\n+\t// basics\n+\tvar a, b [10]int\n+\t_ = a == b\n+\t_ = a != b\n+\t_ = a /* ERROR < not defined */ < b\n+\t_ = a == nil /* ERROR cannot convert */\n+\n+\ttype C [10]int\n+\tvar c C\n+\t_ = a == c\n+\n+\ttype D [10]int\n+\tvar d D\n+\t_ = c /* ERROR mismatched types */ == d\n+\n+\tvar e [10]func() int\n+\t_ = e /* ERROR == not defined */ == e\n+}\n+\n+func structs() {\n+\t// basics\n+\tvar s, t struct {\n+\t\tx int\n+\t\ta [10]float32\n+\t\t_ bool\n+\t}\n+\t_ = s == t\n+\t_ = s != t\n+\t_ = s /* ERROR < not defined */ < t\n+\t_ = s == nil /* ERROR cannot convert */\n+\n+\ttype S struct {\n+\t\tx int\n+\t\ta [10]float32\n+\t\t_ bool\n+\t}\n+\ttype T struct {\n+\t\tx int\n+\t\ta [10]float32\n+\t\t_ bool\n+\t}\n+\tvar ss S\n+\tvar tt T\n+\t_ = s == ss\n+\t_ = ss /* ERROR mismatched types */ == tt\n+\n+\tvar u struct {\n+\t\tx int\n+\t\ta [10]map[string]int\n+\t}\n+\t_ = u /* ERROR cannot compare */ == u\n+}\n+\n+func pointers() {\n+\t// nil\n+\t_ = nil /* ERROR == not defined */ == nil\n+\t_ = nil /* ERROR != not defined */ != nil\n+\t_ = nil /* ERROR < not defined */ < nil\n+\t_ = nil /* ERROR <= not defined */ <= nil\n+\t_ = nil /* ERROR > not defined */ > nil\n+\t_ = nil /* ERROR >= not defined */ >= nil\n+\n+\t// basics\n+\tvar p, q *int\n+\t_ = p == q\n+\t_ = p != q\n+\n+\t_ = p == nil\n+\t_ = p != nil\n+\t_ = nil == q\n+\t_ = nil != q\n+\n+\t_ = p /* ERROR < not defined */ < q\n+\t_ = p /* ERROR <= not defined */ <= q\n+\t_ = p /* ERROR > not defined */ > q\n+\t_ = p /* ERROR >= not defined */ >= q\n+\n+\t// various element types\n+\ttype (\n+\t\tS1 struct{}\n+\t\tS2 struct{}\n+\t\tP1 *S1\n+\t\tP2 *S2\n+\t)\n+\tvar (\n+\t\tps1 *S1\n+\t\tps2 *S2\n+\t\tp1 P1\n+\t\tp2 P2\n+\t)\n+\t_ = ps1 == ps1\n+\t_ = ps1 /* ERROR mismatched types */ == ps2\n+\t_ = ps2 /* ERROR mismatched types */ == ps1\n+\n+\t_ = p1 == p1\n+\t_ = p1 /* ERROR mismatched types */ == p2\n+\n+\t_ = p1 == ps1\n+}\n+\n+func channels() {\n+\t// basics\n+\tvar c, d chan int\n+\t_ = c == d\n+\t_ = c != d\n+\t_ = c == nil\n+\t_ = c /* ERROR < not defined */ < d\n+\n+\t// various element types (named types)\n+\ttype (\n+\t\tC1 chan int\n+\t\tC1r <-chan int\n+\t\tC1s chan<- int\n+\t\tC2 chan float32\n+\t)\n+\tvar (\n+\t\tc1 C1\n+\t\tc1r C1r\n+\t\tc1s C1s\n+\t\tc1a chan int\n+\t\tc2 C2\n+\t)\n+\t_ = c1 == c1\n+\t_ = c1 /* ERROR mismatched types */ == c1r\n+\t_ = c1 /* ERROR mismatched types */ == c1s\n+\t_ = c1r /* ERROR mismatched types */ == c1s\n+\t_ = c1 == c1a\n+\t_ = c1a == c1\n+\t_ = c1 /* ERROR mismatched types */ == c2\n+\t_ = c1a /* ERROR mismatched types */ == c2\n+\n+\t// various element types (unnamed types)\n+\tvar (\n+\t\td1 chan int\n+\t\td1r <-chan int\n+\t\td1s chan<- int\n+\t\td1a chan<- int\n+\t\td2 chan float32\n+\t)\n+\t_ = d1 == d1\n+\t_ = d1 == d1r\n+\t_ = d1 == d1s\n+\t_ = d1r /* ERROR mismatched types */ == d1s\n+\t_ = d1 == d1a\n+\t_ = d1a == d1\n+\t_ = d1 /* ERROR mismatched types */ == d2\n+\t_ = d1a /* ERROR mismatched types */ == d2\n+}\n+\n+// for interfaces test\n+type S1 struct{}\n+type S11 struct{}\n+type S2 struct{}\n+func (*S1) m() int\n+func (*S11) m() int\n+func (*S11) n()\n+func (*S2) m() float32\n+\n+func interfaces() {\n+\t// basics\n+\tvar i, j interface{ m() int }\n+\t_ = i == j\n+\t_ = i != j\n+\t_ = i == nil\n+\t_ = i /* ERROR < not defined */ < j\n+\n+\t// various interfaces\n+\tvar ii interface { m() int; n() }\n+\tvar k interface { m() float32 }\n+\t_ = i == ii\n+\t_ = i /* ERROR mismatched types */ == k\n+\n+\t// interfaces vs values\n+\tvar s1 S1\n+\tvar s11 S11\n+\tvar s2 S2\n+\n+\t_ = i == 0 /* ERROR cannot convert */\n+\t_ = i /* ERROR mismatched types */ == s1\n+\t_ = i == &s1\n+\t_ = i == &s11\n+\n+\t_ = i /* ERROR mismatched types */ == s2\n+\t_ = i /* ERROR mismatched types */ == &s2\n+}\n+\n+func slices() {\n+\t// basics\n+\tvar s []int\n+\t_ = s == nil\n+\t_ = s != nil\n+\t_ = s /* ERROR < not defined */ < nil\n+\n+\t// slices are not otherwise comparable\n+\t_ = s /* ERROR == not defined */ == s\n+\t_ = s /* ERROR < not defined */ < s\n+}\n+\n+func maps() {\n+\t// basics\n+\tvar m map[string]int\n+\t_ = m == nil\n+\t_ = m != nil\n+\t_ = m /* ERROR < not defined */ < nil\n+\n+\t// maps are not otherwise comparable\n+\t_ = m /* ERROR == not defined */ == m\n+\t_ = m /* ERROR < not defined */ < m\n+}\n+\n+func funcs() {\n+\t// basics\n+\tvar f func(int) float32\n+\t_ = f == nil\n+\t_ = f != nil\n+\t_ = f /* ERROR < not defined */ < nil\n+\n+\t// funcs are not otherwise comparable\n+\t_ = f /* ERROR == not defined */ == f\n+\t_ = f /* ERROR < not defined */ < f\n+}"}, {"sha": "ab1a9f684b851b16666be81fc0f2c5adda4783f2", "filename": "libgo/go/go/types/testdata/expr3.src", "status": "added", "additions": 558, "deletions": 0, "changes": 558, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr3.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr3.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr3.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,558 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package expr3\n+\n+import \"time\"\n+\n+func indexes() {\n+\t_ = 1 /* ERROR \"cannot index\" */ [0]\n+\t_ = indexes /* ERROR \"cannot index\" */ [0]\n+\t_ = ( /* ERROR \"cannot slice\" */ 12 + 3)[1:2]\n+\n+\tvar a [10]int\n+\t_ = a[true /* ERROR \"cannot convert\" */ ]\n+\t_ = a[\"foo\" /* ERROR \"cannot convert\" */ ]\n+\t_ = a[1.1 /* ERROR \"truncated\" */ ]\n+\t_ = a[1.0]\n+\t_ = a[- /* ERROR \"negative\" */ 1]\n+\t_ = a[- /* ERROR \"negative\" */ 1 :]\n+\t_ = a[: - /* ERROR \"negative\" */ 1]\n+\t_ = a[: /* ERROR \"2nd index required\" */ : /* ERROR \"3rd index required\" */ ]\n+\t_ = a[0: /* ERROR \"2nd index required\" */ : /* ERROR \"3rd index required\" */ ]\n+\t_ = a[0: /* ERROR \"2nd index required\" */ :10]\n+\t_ = a[:10:10]\n+\n+\tvar a0 int\n+\ta0 = a[0]\n+\t_ = a0\n+\tvar a1 int32\n+\ta1 = a /* ERROR \"cannot use .* in assignment\" */ [1]\n+\t_ = a1\n+\n+\t_ = a[9]\n+\t_ = a[10 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = a[1 /* ERROR \"overflows\" */ <<100]\n+\t_ = a[10:]\n+\t_ = a[:10]\n+\t_ = a[10:10]\n+\t_ = a[11 /* ERROR \"index .* out of bounds\" */ :]\n+\t_ = a[: 11 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = a[: 1 /* ERROR \"overflows\" */ <<100]\n+\t_ = a[:10:10]\n+\t_ = a[:11 /* ERROR \"index .* out of bounds\" */ :10]\n+\t_ = a[:10:11 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = a[10:0:10] /* ERROR \"invalid slice indices\" */\n+\t_ = a[0:10:0] /* ERROR \"invalid slice indices\" */\n+\t_ = a[10:0:0] /* ERROR \"invalid slice indices\" */\n+\t_ = &a /* ERROR \"cannot take address\" */ [:10]\n+\n+\tpa := &a\n+\t_ = pa[9]\n+\t_ = pa[10 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = pa[1 /* ERROR \"overflows\" */ <<100]\n+\t_ = pa[10:]\n+\t_ = pa[:10]\n+\t_ = pa[10:10]\n+\t_ = pa[11 /* ERROR \"index .* out of bounds\" */ :]\n+\t_ = pa[: 11 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = pa[: 1 /* ERROR \"overflows\" */ <<100]\n+\t_ = pa[:10:10]\n+\t_ = pa[:11 /* ERROR \"index .* out of bounds\" */ :10]\n+\t_ = pa[:10:11 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = pa[10:0:10] /* ERROR \"invalid slice indices\" */\n+\t_ = pa[0:10:0] /* ERROR \"invalid slice indices\" */\n+\t_ = pa[10:0:0] /* ERROR \"invalid slice indices\" */\n+\t_ = &pa /* ERROR \"cannot take address\" */ [:10]\n+\n+\tvar b [0]int\n+\t_ = b[0 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = b[:]\n+\t_ = b[0:]\n+\t_ = b[:0]\n+\t_ = b[0:0]\n+\t_ = b[0:0:0]\n+\t_ = b[1 /* ERROR \"index .* out of bounds\" */ :0:0]\n+\n+\tvar s []int\n+\t_ = s[- /* ERROR \"negative\" */ 1]\n+\t_ = s[- /* ERROR \"negative\" */ 1 :]\n+\t_ = s[: - /* ERROR \"negative\" */ 1]\n+\t_ = s[0]\n+\t_ = s[1:2]\n+\t_ = s[2:1] /* ERROR \"invalid slice indices\" */\n+\t_ = s[2:]\n+\t_ = s[: 1 /* ERROR \"overflows\" */ <<100]\n+\t_ = s[1 /* ERROR \"overflows\" */ <<100 :]\n+\t_ = s[1 /* ERROR \"overflows\" */ <<100 : 1 /* ERROR \"overflows\" */ <<100]\n+\t_ = s[: /* ERROR \"2nd index required\" */ :  /* ERROR \"3rd index required\" */ ]\n+\t_ = s[:10:10]\n+\t_ = s[10:0:10] /* ERROR \"invalid slice indices\" */\n+\t_ = s[0:10:0] /* ERROR \"invalid slice indices\" */\n+\t_ = s[10:0:0] /* ERROR \"invalid slice indices\" */\n+\t_ = &s /* ERROR \"cannot take address\" */ [:10]\n+\n+\tvar m map[string]int\n+\t_ = m[0 /* ERROR \"cannot convert\" */ ]\n+\t_ = m /* ERROR \"cannot slice\" */ [\"foo\" : \"bar\"]\n+\t_ = m[\"foo\"]\n+\t// ok is of type bool\n+\ttype mybool bool\n+\tvar ok mybool\n+\t_, ok = m[\"bar\"]\n+\t_ = ok\n+\n+\tvar t string\n+\t_ = t[- /* ERROR \"negative\" */ 1]\n+\t_ = t[- /* ERROR \"negative\" */ 1 :]\n+\t_ = t[: - /* ERROR \"negative\" */ 1]\n+\t_ = t /* ERROR \"3-index slice of string\" */ [1:2:3]\n+\t_ = \"foo\" /* ERROR \"3-index slice of string\" */ [1:2:3]\n+\tvar t0 byte\n+\tt0 = t[0]\n+\t_ = t0\n+\tvar t1 rune\n+\tt1 = t /* ERROR \"cannot use .* in assignment\" */ [2]\n+\t_ = t1\n+\t_ = (\"foo\" + \"bar\")[5]\n+\t_ = (\"foo\" + \"bar\")[6 /* ERROR \"index .* out of bounds\" */ ]\n+\n+\tconst c = \"foo\"\n+\t_ = c[- /* ERROR \"negative\" */ 1]\n+\t_ = c[- /* ERROR \"negative\" */ 1 :]\n+\t_ = c[: - /* ERROR \"negative\" */ 1]\n+\tvar c0 byte\n+\tc0 = c[0]\n+\t_ = c0\n+\tvar c2 float32\n+\tc2 = c /* ERROR \"cannot use .* in assignment\" */ [2]\n+\t_ = c[3 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = \"\"[0 /* ERROR \"index .* out of bounds\" */ ]\n+\t_ = c2\n+\n+\t_ = s[1<<30] // no compile-time error here\n+\n+\t// issue 4913\n+\ttype mystring string\n+\tvar ss string\n+\tvar ms mystring\n+\tvar i, j int\n+\tss = \"foo\"[1:2]\n+\tss = \"foo\"[i:j]\n+\tms = \"foo\" /* ERROR \"cannot use .* in assignment\" */ [1:2]\n+\tms = \"foo\" /* ERROR \"cannot use .* in assignment\" */ [i:j]\n+\t_, _ = ss, ms\n+}\n+\n+type T struct {\n+\tx int\n+\ty func()\n+}\n+\n+func (*T) m() {}\n+\n+func method_expressions() {\n+\t_ = T /* ERROR \"no field or method\" */ .a\n+\t_ = T /* ERROR \"has no method\" */ .x\n+\t_ = T /* ERROR \"not in method set\" */ .m\n+\t_ = (*T).m\n+\n+\tvar f func(*T) = T /* ERROR \"not in method set\" */ .m\n+\tvar g func(*T) = (*T).m\n+\t_, _ = f, g\n+\n+\t_ = T /* ERROR \"has no method\" */ .y\n+\t_ = ( /* ERROR \"has no method\" */ *T).y\n+}\n+\n+func struct_literals() {\n+\ttype T0 struct {\n+\t\ta, b, c int\n+\t}\n+\n+\ttype T1 struct {\n+\t\tT0\n+\t\ta, b int\n+\t\tu float64\n+\t\ts string\n+\t}\n+\n+\t// keyed elements\n+\t_ = T1{}\n+\t_ = T1{a: 0, 1 /* ERROR \"mixture of .* elements\" */ }\n+\t_ = T1{aa /* ERROR \"unknown field\" */ : 0}\n+\t_ = T1{1 /* ERROR \"invalid field name\" */ : 0}\n+\t_ = T1{a: 0, s: \"foo\", u: 0, a /* ERROR \"duplicate field\" */: 10}\n+\t_ = T1{a: \"foo\" /* ERROR \"cannot convert\" */ }\n+\t_ = T1{c /* ERROR \"unknown field\" */ : 0}\n+\t_ = T1{T0: { /* ERROR \"missing type\" */ }} // struct literal element type may not be elided\n+\t_ = T1{T0: T0{}}\n+\t_ = T1{T0 /* ERROR \"invalid field name\" */ .a: 0}\n+\n+\t// unkeyed elements\n+\t_ = T0{1, 2, 3}\n+\t_ = T0{1, b /* ERROR \"mixture\" */ : 2, 3}\n+\t_ = T0{1, 2} /* ERROR \"too few values\" */\n+\t_ = T0{1, 2, 3, 4  /* ERROR \"too many values\" */ }\n+\t_ = T0{1, \"foo\" /* ERROR \"cannot convert\" */, 3.4  /* ERROR \"truncated\" */}\n+\n+\t// invalid type\n+\ttype P *struct{\n+\t\tx int\n+\t}\n+\t_ = P /* ERROR \"invalid composite literal type\" */ {}\n+\n+\t// unexported fields\n+\t_ = time.Time{}\n+\t_ = time.Time{sec /* ERROR \"unknown field\" */ : 0}\n+\t_ = time.Time{\n+\t\t0 /* ERROR implicit assignment to unexported field sec in time.Time literal */,\n+\t\t0 /* ERROR implicit assignment */ ,\n+\t\tnil /* ERROR implicit assignment */ ,\n+\t}\n+}\n+\n+func array_literals() {\n+\ttype A0 [0]int\n+\t_ = A0{}\n+\t_ = A0{0 /* ERROR \"index .* out of bounds\" */}\n+\t_ = A0{0 /* ERROR \"index .* out of bounds\" */ : 0}\n+\n+\ttype A1 [10]int\n+\t_ = A1{}\n+\t_ = A1{0, 1, 2}\n+\t_ = A1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n+\t_ = A1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 /* ERROR \"index .* out of bounds\" */ }\n+\t_ = A1{- /* ERROR \"negative\" */ 1: 0}\n+\t_ = A1{8: 8, 9}\n+\t_ = A1{8: 8, 9, 10 /* ERROR \"index .* out of bounds\" */ }\n+\t_ = A1{0, 1, 2, 0 /* ERROR \"duplicate index\" */ : 0, 3: 3, 4}\n+\t_ = A1{5: 5, 6, 7, 3: 3, 4}\n+\t_ = A1{5: 5, 6, 7, 3: 3, 4, 5 /* ERROR \"duplicate index\" */ }\n+\t_ = A1{10 /* ERROR \"index .* out of bounds\" */ : 10, 10 /* ERROR \"index .* out of bounds\" */ : 10}\n+\t_ = A1{5: 5, 6, 7, 3: 3, 1 /* ERROR \"overflows\" */ <<100: 4, 5 /* ERROR \"duplicate index\" */ }\n+\t_ = A1{5: 5, 6, 7, 4: 4, 1 /* ERROR \"overflows\" */ <<100: 4}\n+\t_ = A1{2.0}\n+\t_ = A1{2.1 /* ERROR \"truncated\" */ }\n+\t_ = A1{\"foo\" /* ERROR \"cannot convert\" */ }\n+\n+\t// indices must be integer constants\n+\ti := 1\n+\tconst f = 2.1\n+\tconst s = \"foo\"\n+\t_ = A1{i /* ERROR \"index i must be integer constant\" */ : 0}\n+\t_ = A1{f /* ERROR \"truncated\" */ : 0}\n+\t_ = A1{s /* ERROR \"cannot convert\" */ : 0}\n+\n+\ta0 := [...]int{}\n+\tassert(len(a0) == 0)\n+\n+\ta1 := [...]int{0, 1, 2}\n+\tassert(len(a1) == 3)\n+\tvar a13 [3]int\n+\tvar a14 [4]int\n+\ta13 = a1\n+\ta14 = a1 /* ERROR \"cannot use .* in assignment\" */\n+\t_, _ = a13, a14\n+\n+\ta2 := [...]int{- /* ERROR \"negative\" */ 1: 0}\n+\t_ = a2\n+\n+\ta3 := [...]int{0, 1, 2, 0 /* ERROR \"duplicate index\" */ : 0, 3: 3, 4}\n+\tassert(len(a3) == 5) // somewhat arbitrary\n+\n+\ta4 := [...]complex128{0, 1, 2, 1<<10-2: -1i, 1i, 400: 10, 12, 14}\n+\tassert(len(a4) == 1024)\n+\n+\t// composite literal element types may be elided\n+\ttype T []int\n+\t_ = [10]T{T{}, {}, 5: T{1, 2, 3}, 7: {1, 2, 3}}\n+\ta6 := [...]T{T{}, {}, 5: T{1, 2, 3}, 7: {1, 2, 3}}\n+\tassert(len(a6) == 8)\n+\n+\t// recursively so\n+\t_ = [10][10]T{{}, [10]T{{}}, {{1, 2, 3}}}\n+\n+\t// from the spec\n+\ttype Point struct { x, y float32 }\n+\t_ = [...]Point{Point{1.5, -3.5}, Point{0, 0}}\n+\t_ = [...]Point{{1.5, -3.5}, {0, 0}}\n+\t_ = [][]int{[]int{1, 2, 3}, []int{4, 5}}\n+\t_ = [][]int{{1, 2, 3}, {4, 5}}\n+\t_ = [...]*Point{&Point{1.5, -3.5}, &Point{0, 0}}\n+\t_ = [...]*Point{{1.5, -3.5}, {0, 0}}\n+}\n+\n+func slice_literals() {\n+\ttype S0 []int\n+\t_ = S0{}\n+\t_ = S0{0, 1, 2}\n+\t_ = S0{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n+\t_ = S0{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n+\t_ = S0{- /* ERROR \"negative\" */ 1: 0}\n+\t_ = S0{8: 8, 9}\n+\t_ = S0{8: 8, 9, 10}\n+\t_ = S0{0, 1, 2, 0 /* ERROR \"duplicate index\" */ : 0, 3: 3, 4}\n+\t_ = S0{5: 5, 6, 7, 3: 3, 4}\n+\t_ = S0{5: 5, 6, 7, 3: 3, 4, 5 /* ERROR \"duplicate index\" */ }\n+\t_ = S0{10: 10, 10 /* ERROR \"duplicate index\" */ : 10}\n+\t_ = S0{5: 5, 6, 7, 3: 3, 1 /* ERROR \"overflows\" */ <<100: 4, 5 /* ERROR \"duplicate index\" */ }\n+\t_ = S0{5: 5, 6, 7, 4: 4, 1 /* ERROR \"overflows\" */ <<100: 4}\n+\t_ = S0{2.0}\n+\t_ = S0{2.1 /* ERROR \"truncated\" */ }\n+\t_ = S0{\"foo\" /* ERROR \"cannot convert\" */ }\n+\n+\t// indices must be resolved correctly\n+\tconst index1 = 1\n+\t_ = S0{index1: 1}\n+\t_ = S0{index2: 2}\n+\t_ = S0{index3 /* ERROR \"undeclared name\" */ : 3}\n+\n+\t// indices must be integer constants\n+\ti := 1\n+\tconst f = 2.1\n+\tconst s = \"foo\"\n+\t_ = S0{i /* ERROR \"index i must be integer constant\" */ : 0}\n+\t_ = S0{f /* ERROR \"truncated\" */ : 0}\n+\t_ = S0{s /* ERROR \"cannot convert\" */ : 0}\n+\n+\t// composite literal element types may be elided\n+\ttype T []int\n+\t_ = []T{T{}, {}, 5: T{1, 2, 3}, 7: {1, 2, 3}}\n+\t_ = [][]int{{1, 2, 3}, {4, 5}}\n+\n+\t// recursively so\n+\t_ = [][]T{{}, []T{{}}, {{1, 2, 3}}}\n+\n+\t// issue 17954\n+\ttype T0 *struct { s string }\n+\t_ = []T0{{}}\n+\t_ = []T0{{\"foo\"}}\n+\n+\ttype T1 *struct{ int }\n+\t_ = []T1{}\n+\t_ = []T1{{0}, {1}, {2}}\n+\n+\ttype T2 T1\n+\t_ = []T2{}\n+\t_ = []T2{{0}, {1}, {2}}\n+\n+\t_ = map[T0]T2{}\n+\t_ = map[T0]T2{{}: {}}\n+}\n+\n+const index2 int = 2\n+\n+type N int\n+func (N) f() {}\n+\n+func map_literals() {\n+\ttype M0 map[string]int\n+\ttype M1 map[bool]int\n+\ttype M2 map[*int]int\n+\n+\t_ = M0{}\n+\t_ = M0{1 /* ERROR \"missing key\" */ }\n+\t_ = M0{1 /* ERROR \"cannot convert\" */ : 2}\n+\t_ = M0{\"foo\": \"bar\" /* ERROR \"cannot convert\" */ }\n+\t_ = M0{\"foo\": 1, \"bar\": 2, \"foo\" /* ERROR \"duplicate key\" */ : 3 }\n+\n+\t_ = map[interface{}]int{2: 1, 2 /* ERROR \"duplicate key\" */ : 1}\n+\t_ = map[interface{}]int{int(2): 1, int16(2): 1}\n+\t_ = map[interface{}]int{int16(2): 1, int16 /* ERROR \"duplicate key\" */ (2): 1}\n+\n+\ttype S string\n+\n+\t_ = map[interface{}]int{\"a\": 1, \"a\" /* ERROR \"duplicate key\" */ : 1}\n+\t_ = map[interface{}]int{\"a\": 1, S(\"a\"): 1}\n+\t_ = map[interface{}]int{S(\"a\"): 1, S /* ERROR \"duplicate key\" */ (\"a\"): 1}\n+\n+\ttype I interface {\n+\t\tf()\n+\t}\n+\n+\t_ = map[I]int{N(0): 1, N(2): 1}\n+\t_ = map[I]int{N(2): 1, N /* ERROR \"duplicate key\" */ (2): 1}\n+\n+\t// map keys must be resolved correctly\n+\tkey1 := \"foo\"\n+\t_ = M0{key1: 1}\n+\t_ = M0{key2: 2}\n+\t_ = M0{key3 /* ERROR \"undeclared name\" */ : 2}\n+\n+\tvar value int\n+\t_ = M1{true: 1, false: 0}\n+\t_ = M2{nil: 0, &value: 1}\n+\n+\t// composite literal element types may be elided\n+\ttype T [2]int\n+\t_ = map[int]T{0: T{3, 4}, 1: {5, 6}}\n+\n+\t// recursively so\n+\t_ = map[int][]T{0: {}, 1: {{}, T{1, 2}}}\n+\n+\t// composite literal key types may be elided\n+\t_ = map[T]int{T{3, 4}: 0, {5, 6}: 1}\n+\n+\t// recursively so\n+\t_ = map[[2]T]int{{}: 0, {{}}: 1, [2]T{{}}: 2, {T{1, 2}}: 3}\n+\n+\t// composite literal element and key types may be elided\n+\t_ = map[T]T{{}: {}, {1, 2}: T{3, 4}, T{4, 5}: {}}\n+\t_ = map[T]M0{{} : {}, T{1, 2}: M0{\"foo\": 0}, {1, 3}: {\"foo\": 1}}\n+\n+\t// recursively so\n+\t_ = map[[2]T][]T{{}: {}, {{}}: {{}, T{1, 2}}, [2]T{{}}: nil, {T{1, 2}}: {{}, {}}}\n+\n+\t// from the spec\n+\ttype Point struct { x, y float32 }\n+\t_ = map[string]Point{\"orig\": {0, 0}}\n+\t_ = map[*Point]string{{0, 0}: \"orig\"}\n+\n+\t// issue 17954\n+\ttype T0 *struct{ s string }\n+\ttype T1 *struct{ int }\n+\ttype T2 T1\n+\n+\t_ = map[T0]T2{}\n+\t_ = map[T0]T2{{}: {}}\n+}\n+\n+var key2 string = \"bar\"\n+\n+type I interface {\n+\tm()\n+}\n+\n+type I2 interface {\n+\tm(int)\n+}\n+\n+type T1 struct{}\n+type T2 struct{}\n+\n+func (T2) m(int) {}\n+\n+type mybool bool\n+\n+func type_asserts() {\n+\tvar x int\n+\t_ = x /* ERROR \"not an interface\" */ .(int)\n+\n+\tvar e interface{}\n+\tvar ok bool\n+\tx, ok = e.(int)\n+\t_ = ok\n+\n+\t// ok value is of type bool\n+\tvar myok mybool\n+\t_, myok = e.(int)\n+\t_ = myok\n+\n+\tvar t I\n+\t_ = t /* ERROR \"use of .* outside type switch\" */ .(type)\n+\t_ = t /* ERROR \"missing method m\" */ .(T)\n+\t_ = t.(*T)\n+\t_ = t /* ERROR \"missing method m\" */ .(T1)\n+\t_ = t /* ERROR \"wrong type for method m\" */ .(T2)\n+\t_ = t /* STRICT \"wrong type for method m\" */ .(I2) // only an error in strict mode (issue 8561)\n+\n+\t// e doesn't statically have an m, but may have one dynamically.\n+\t_ = e.(I2)\n+}\n+\n+func f0() {}\n+func f1(x int) {}\n+func f2(u float32, s string) {}\n+func fs(s []byte) {}\n+func fv(x ...int) {}\n+func fi(x ... interface{}) {}\n+func (T) fm(x ...int)\n+\n+func g0() {}\n+func g1() int { return 0}\n+func g2() (u float32, s string) { return }\n+func gs() []byte { return nil }\n+\n+func _calls() {\n+\tvar x int\n+\tvar y float32\n+\tvar s []int\n+\n+\tf0()\n+\t_ = f0 /* ERROR \"used as value\" */ ()\n+\tf0(g0 /* ERROR \"too many arguments\" */ )\n+\n+\tf1(0)\n+\tf1(x)\n+\tf1(10.0)\n+\tf1() /* ERROR \"too few arguments\" */\n+\tf1(x, y /* ERROR \"too many arguments\" */ )\n+\tf1(s /* ERROR \"cannot use .* in argument\" */ )\n+\tf1(x ... /* ERROR \"cannot use ...\" */ )\n+\tf1(g0 /* ERROR \"used as value\" */ ())\n+\tf1(g1())\n+\t// f1(g2()) // TODO(gri) missing position in error message\n+\n+\tf2() /* ERROR \"too few arguments\" */\n+\tf2(3.14) /* ERROR \"too few arguments\" */\n+\tf2(3.14, \"foo\")\n+\tf2(x /* ERROR \"cannot use .* in argument\" */ , \"foo\")\n+\tf2(g0 /* ERROR \"used as value\" */ ())\n+\tf2(g1 /* ERROR \"cannot use .* in argument\" */ ()) /* ERROR \"too few arguments\" */\n+\tf2(g2())\n+\n+\tfs() /* ERROR \"too few arguments\" */\n+\tfs(g0 /* ERROR \"used as value\" */ ())\n+\tfs(g1 /* ERROR \"cannot use .* in argument\" */ ())\n+\tfs(g2 /* ERROR \"cannot use .* in argument\" */ /* ERROR \"too many arguments\" */ ())\n+\tfs(gs())\n+\n+\tfv()\n+\tfv(1, 2.0, x)\n+\tfv(s /* ERROR \"cannot use .* in argument\" */ )\n+\tfv(s...)\n+\tfv(x /* ERROR \"cannot use\" */ ...)\n+\tfv(1, s... /* ERROR \"can only use ... with matching parameter\" */ )\n+\tfv(gs /* ERROR \"cannot use .* in argument\" */ ())\n+\tfv(gs /* ERROR \"cannot use .* in argument\" */ ()...)\n+\n+\tvar t T\n+\tt.fm()\n+\tt.fm(1, 2.0, x)\n+\tt.fm(s /* ERROR \"cannot use .* in argument\" */ )\n+\tt.fm(g1())\n+\tt.fm(1, s... /* ERROR \"can only use ... with matching parameter\" */ )\n+\tt.fm(gs /* ERROR \"cannot use .* in argument\" */ ())\n+\tt.fm(gs /* ERROR \"cannot use .* in argument\" */ ()...)\n+\n+\tT.fm(t, )\n+\tT.fm(t, 1, 2.0, x)\n+\tT.fm(t, s /* ERROR \"cannot use .* in argument\" */ )\n+\tT.fm(t, g1())\n+\tT.fm(t, 1, s... /* ERROR \"can only use ... with matching parameter\" */ )\n+\tT.fm(t, gs /* ERROR \"cannot use .* in argument\" */ ())\n+\tT.fm(t, gs /* ERROR \"cannot use .* in argument\" */ ()...)\n+\n+\tvar i interface{ fm(x ...int) } = t\n+\ti.fm()\n+\ti.fm(1, 2.0, x)\n+\ti.fm(s /* ERROR \"cannot use .* in argument\" */ )\n+\ti.fm(g1())\n+\ti.fm(1, s... /* ERROR \"can only use ... with matching parameter\" */ )\n+\ti.fm(gs /* ERROR \"cannot use .* in argument\" */ ())\n+\ti.fm(gs /* ERROR \"cannot use .* in argument\" */ ()...)\n+\n+\tfi()\n+\tfi(1, 2.0, x, 3.14, \"foo\")\n+\tfi(g2())\n+\tfi(0, g2)\n+\tfi(0, g2 /* ERROR \"2-valued g2\" */ ())\n+}\n+\n+func issue6344() {\n+\ttype T []interface{}\n+\tvar x T\n+\tfi(x...) // ... applies also to named slices\n+}"}, {"sha": "069a94bbbf42f930a972e260702b942ef61bb665", "filename": "libgo/go/go/types/testdata/gotos.src", "status": "added", "additions": 560, "deletions": 0, "changes": 560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fgotos.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fgotos.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fgotos.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,560 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This file is a modified copy of $GOROOT/test/goto.go.\n+\n+package gotos\n+\n+var (\n+\ti, n int\n+\tx    []int\n+\tc    chan int\n+\tm    map[int]int\n+\ts    string\n+)\n+\n+// goto after declaration okay\n+func _() {\n+\tx := 1\n+\tgoto L\n+L:\n+\t_ = x\n+}\n+\n+// goto before declaration okay\n+func _() {\n+\tgoto L\n+L:\n+\tx := 1\n+\t_ = x\n+}\n+\n+// goto across declaration not okay\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps over variable declaration at line 36\" */\n+\tx := 1\n+\t_ = x\n+L:\n+}\n+\n+// goto across declaration in inner scope okay\n+func _() {\n+\tgoto L\n+\t{\n+\t\tx := 1\n+\t\t_ = x\n+\t}\n+L:\n+}\n+\n+// goto across declaration after inner scope not okay\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps over variable declaration at line 58\" */\n+\t{\n+\t\tx := 1\n+\t\t_ = x\n+\t}\n+\tx := 1\n+\t_ = x\n+L:\n+}\n+\n+// goto across declaration in reverse okay\n+func _() {\n+L:\n+\tx := 1\n+\t_ = x\n+\tgoto L\n+}\n+\n+func _() {\n+L: L1:\n+\tx := 1\n+\t_ = x\n+\tgoto L\n+\tgoto L1\n+}\n+\n+// error shows first offending variable\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps over variable declaration at line 84\" */\n+\tx := 1\n+\t_ = x\n+\ty := 1\n+\t_ = y\n+L:\n+}\n+\n+// goto not okay even if code path is dead\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps over variable declaration\" */\n+\tx := 1\n+\t_ = x\n+\ty := 1\n+\t_ = y\n+\treturn\n+L:\n+}\n+\n+// goto into outer block okay\n+func _() {\n+\t{\n+\t\tgoto L\n+\t}\n+L:\n+}\n+\n+func _() {\n+\t{\n+\t\tgoto L\n+\t\tgoto L1\n+\t}\n+L: L1:\n+}\n+\n+// goto backward into outer block okay\n+func _() {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L: L1:\n+\t{\n+\t\tgoto L\n+\t\tgoto L1\n+\t}\n+}\n+\n+// goto into inner block not okay\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t{\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tgoto L1 /* ERROR \"goto L1 jumps into block\" */\n+\t{\n+\tL: L1:\n+\t}\n+}\n+\n+// goto backward into inner block still not okay\n+func _() {\n+\t{\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\t{\n+\tL: L1:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tgoto L1 /* ERROR \"goto L1 jumps into block\" */\n+}\n+\n+// error shows first (outermost) offending block\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t{\n+\t\t{\n+\t\t\t{\n+\t\t\tL:\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+// error prefers block diagnostic over declaration diagnostic\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tx := 1\n+\t_ = x\n+\t{\n+\tL:\n+\t}\n+}\n+\n+// many kinds of blocks, all invalid to jump into or among,\n+// but valid to jump out of\n+\n+// if\n+\n+func _() {\n+L:\n+\tif true {\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tif true {\n+\t\tgoto L\n+\t} else {\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tif false {\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tif true {\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tif true {\n+\tL:\n+\t} else {\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tif true {\n+\t} else {\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif false {\n+\tL:\n+\t} else {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t} else {\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t} else if false {\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t} else if false {\n+\tL:\n+\t} else {\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t} else if false {\n+\t} else {\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t} else {\n+\t\tL:\n+\t}\n+}\n+\n+func _() {\n+\tif true {\n+\t\tL:\n+\t} else {\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t}\n+}\n+\n+// for\n+\n+func _() {\n+\tfor {\n+\t\tgoto L\n+\t}\n+L:\n+}\n+\n+func _() {\n+\tfor {\n+\t\tgoto L\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tfor {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\tfor {\n+\t\tgoto L\n+\tL1:\n+\t}\n+L:\n+\tgoto L1 /* ERROR \"goto L1 jumps into block\" */\n+}\n+\n+func _() {\n+\tfor i < n {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\tfor i = 0; i < n; i++ {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\tfor i = range x {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\tfor i = range c {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\tfor i = range m {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+func _() {\n+\tfor i = range s {\n+\tL:\n+\t}\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+}\n+\n+// switch\n+\n+func _() {\n+L:\n+\tswitch i {\n+\tcase 0:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tswitch i {\n+\tcase 0:\n+\n+\tdefault:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\n+\tdefault:\n+\tL:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\n+\tdefault:\n+\t\tgoto L\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\t\tgoto L\n+\tL:\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tswitch i {\n+\tcase 0:\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tswitch i {\n+\tcase 0:\n+\tL:\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tswitch i {\n+\tcase 0:\n+\tdefault:\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tdefault:\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tcase 0:\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tswitch i {\n+\tcase 0:\n+\tL:\n+\t\t;\n+\tdefault:\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t}\n+}\n+\n+// select\n+// different from switch.  the statement has no implicit block around it.\n+\n+func _() {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+L:\n+\tselect {\n+\tcase c <- 1:\n+\n+\tdefault:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase <-c:\n+\n+\tdefault:\n+\tL:\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase c <- 1:\n+\n+\tdefault:\n+\t\tgoto L\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase <-c:\n+\t\tgoto L\n+\tL:\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tselect {\n+\tcase c <- 1:\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tselect {\n+\tcase c <- 1:\n+\tL:\n+\t\t;\n+\tdefault:\n+\t}\n+}\n+\n+func _() {\n+\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tselect {\n+\tcase <-c:\n+\tdefault:\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tdefault:\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\tcase <-c:\n+\tL:\n+\t}\n+}\n+\n+func _() {\n+\tselect {\n+\tcase <-c:\n+\tL:\n+\t\t;\n+\tdefault:\n+\t\tgoto L /* ERROR \"goto L jumps into block\" */\n+\t}\n+}"}, {"sha": "31436be6ada39a10e9b3acd828cd7df639608d91", "filename": "libgo/go/go/types/testdata/importC.src", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2FimportC.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2FimportC.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2FimportC.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package importC\n+\n+import \"C\"\n+import _ /* ERROR cannot rename import \"C\" */ \"C\"\n+import foo /* ERROR cannot rename import \"C\" */ \"C\"\n+import . /* ERROR cannot rename import \"C\" */ \"C\""}, {"sha": "463dcd083dd7ffa793ae2adf59a40fa953719fed", "filename": "libgo/go/go/types/testdata/importdecl0a.src", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl0a.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl0a.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl0a.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package importdecl0\n+\n+import ()\n+\n+import (\n+\t// we can have multiple blank imports (was bug)\n+\t_ \"math\"\n+\t_ \"net/rpc\"\n+\tinit /* ERROR \"cannot declare init\" */ \"fmt\"\n+\t// reflect defines a type \"flag\" which shows up in the gc export data\n+\t\"reflect\"\n+\t. /* ERROR \"imported but not used\" */ \"reflect\"\n+)\n+\n+import \"math\" /* ERROR \"imported but not used\" */\n+import m /* ERROR \"imported but not used as m\" */ \"math\"\n+import _ \"math\"\n+\n+import (\n+\t\"math/big\" /* ERROR \"imported but not used\" */\n+\tb /* ERROR \"imported but not used\" */ \"math/big\"\n+\t_ \"math/big\"\n+)\n+\n+import \"fmt\"\n+import f1 \"fmt\"\n+import f2 \"fmt\"\n+\n+// reflect.flag must not be visible in this package\n+type flag int\n+type _ reflect /* ERROR \"not exported\" */ .flag\n+\n+// imported package name may conflict with local objects\n+type reflect /* ERROR \"reflect already declared\" */ int\n+\n+// dot-imported exported objects may conflict with local objects\n+type Value /* ERROR \"Value already declared through dot-import of package reflect\" */ struct{}\n+\n+var _ = fmt.Println // use \"fmt\"\n+\n+func _() {\n+\tf1.Println() // use \"fmt\"\n+}\n+\n+func _() {\n+\t_ = func() {\n+\t\tf2.Println() // use \"fmt\"\n+\t}\n+}"}, {"sha": "6844e7098233eb5488c860c03f5a3274f1b467d5", "filename": "libgo/go/go/types/testdata/importdecl0b.src", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl0b.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl0b.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl0b.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package importdecl0\n+\n+import \"math\"\n+import m \"math\"\n+\n+import . \"testing\" // declares T in file scope\n+import . /* ERROR \"imported but not used\" */ \"unsafe\"\n+import . \"fmt\"     // declares Println in file scope\n+\n+import (\n+\t// TODO(gri) At the moment, 2 errors are reported because both go/parser\n+\t// and the type checker report it. Eventually, this test should not be\n+\t// done by the parser anymore.\n+\t\"\" /* ERROR invalid import path */ /* ERROR invalid import path */\n+\t\"a!b\" /* ERROR invalid import path */ /* ERROR invalid import path */\n+\t\"abc\\xffdef\" /* ERROR invalid import path */ /* ERROR invalid import path */\n+)\n+\n+// using \"math\" in this file doesn't affect its use in other files\n+const Pi0 = math.Pi\n+const Pi1 = m.Pi\n+\n+type _ T // use \"testing\"\n+\n+func _() func() interface{} {\n+\treturn func() interface{} {\n+\t\treturn Println // use \"fmt\"\n+\t}\n+}"}, {"sha": "8301820dda981b6ee4faf0afa53ed0e5e6085069", "filename": "libgo/go/go/types/testdata/importdecl1a.src", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl1a.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl1a.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl1a.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test case for issue 8969.\n+\n+package importdecl1\n+\n+import . \"unsafe\"\n+\n+var _ Pointer // use dot-imported package unsafe"}, {"sha": "f24bb9ade977749ce379a08594cf44194dff5b78", "filename": "libgo/go/go/types/testdata/importdecl1b.src", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl1b.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl1b.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fimportdecl1b.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package importdecl1\n+\n+import . /* ERROR \"imported but not used\" */ \"unsafe\""}, {"sha": "ef0349c70f5ff053f71fbceaae659093d8610a22", "filename": "libgo/go/go/types/testdata/init0.src", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit0.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// initialization cycles\n+\n+package init0\n+\n+// initialization cycles (we don't know the types)\n+const (\n+\ts0 /* ERROR initialization cycle */ = s0\n+\n+\tx0 /* ERROR initialization cycle */ = y0\n+\ty0 = x0\n+\n+\ta0 = b0\n+\tb0 /* ERROR initialization cycle */ = c0\n+\tc0 = d0\n+\td0 = b0\n+)\n+\n+var (\n+\ts1 /* ERROR initialization cycle */ = s1\n+\n+\tx1 /* ERROR initialization cycle */ = y1\n+\ty1 = x1\n+\n+\ta1 = b1\n+\tb1 /* ERROR initialization cycle */ = c1\n+\tc1 = d1\n+\td1 = b1\n+)\n+\n+// initialization cycles (we know the types)\n+const (\n+\ts2 /* ERROR initialization cycle */ int = s2\n+\n+\tx2 /* ERROR initialization cycle */ int = y2\n+\ty2 = x2\n+\n+\ta2 = b2\n+\tb2 /* ERROR initialization cycle */ int = c2\n+\tc2 = d2\n+\td2 = b2\n+)\n+\n+var (\n+\ts3 /* ERROR initialization cycle */ int = s3\n+\n+\tx3 /* ERROR initialization cycle */ int = y3\n+\ty3 = x3\n+\n+\ta3 = b3\n+\tb3 /* ERROR initialization cycle */ int = c3\n+\tc3 = d3\n+\td3 = b3\n+)\n+\n+// cycles via struct fields\n+\n+type S1 struct {\n+\tf int\n+}\n+const cx3 S1 /* ERROR invalid constant type */ = S1{cx3.f}\n+var vx3 /* ERROR initialization cycle */ S1 = S1{vx3.f}\n+\n+// cycles via functions\n+\n+var x4 = x5\n+var x5 /* ERROR initialization cycle */ = f1()\n+func f1() int { return x5*10 }\n+\n+var x6, x7 /* ERROR initialization cycle */ = f2()\n+var x8 = x7\n+func f2() (int, int) { return f3() + f3(), 0 }\n+func f3() int { return x8 }\n+\n+// cycles via closures\n+\n+var x9 /* ERROR initialization cycle */ = func() int { return x9 }()\n+\n+var x10 /* ERROR initialization cycle */ = f4()\n+\n+func f4() int {\n+\t_ = func() {\n+\t\t_ = x10\n+\t}\n+\treturn 0\n+}\n+\n+// cycles via method expressions\n+\n+type T1 struct{}\n+\n+func (T1) m() bool { _ = x11; return false }\n+\n+var x11 /* ERROR initialization cycle */ = T1.m(T1{})\n+\n+// cycles via method values\n+\n+type T2 struct{}\n+\n+func (T2) m() bool { _ = x12; return false }\n+\n+var t1 T2\n+var x12 /* ERROR initialization cycle */ = t1.m"}, {"sha": "39ca31466b5ebc0bc899b82d292c2f6e3ea32f43", "filename": "libgo/go/go/types/testdata/init1.src", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit1.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// initialization cycles\n+\n+package init1\n+\n+// issue 6683 (marked as WorkingAsIntended)\n+\n+type T0 struct{}\n+\n+func (T0) m() int { return y0 }\n+\n+var x0 = T0{}\n+\n+var y0 /* ERROR initialization cycle */ = x0.m()\n+\n+type T1 struct{}\n+\n+func (T1) m() int { return y1 }\n+\n+var x1 interface {\n+\tm() int\n+} = T1{}\n+\n+var y1 = x1.m() // no cycle reported, x1 is of interface type\n+\n+// issue 6703 (modified)\n+\n+var x2 /* ERROR initialization cycle */ = T2.m\n+\n+var y2 = x2\n+\n+type T2 struct{}\n+\n+func (T2) m() int {\n+\t_ = y2\n+\treturn 0\n+}\n+\n+var x3 /* ERROR initialization cycle */ = T3.m(T3{}) // <<<< added (T3{})\n+\n+var y3 = x3\n+\n+type T3 struct{}\n+\n+func (T3) m() int {\n+\t_ = y3\n+\treturn 0\n+}\n+\n+var x4 /* ERROR initialization cycle */ = T4{}.m // <<<< added {}\n+\n+var y4 = x4\n+\n+type T4 struct{}\n+\n+func (T4) m() int {\n+\t_ = y4\n+\treturn 0\n+}\n+\n+var x5 /* ERROR initialization cycle */ = T5{}.m() // <<<< added ()\n+\n+var y5 = x5\n+\n+type T5 struct{}\n+\n+func (T5) m() int {\n+\t_ = y5\n+\treturn 0\n+}\n+\n+// issue 4847\n+// simplified test case\n+\n+var x6 = f6\n+var y6 /* ERROR initialization cycle */ = f6\n+func f6() { _ = y6 }\n+\n+// full test case\n+\n+type (\n+      E int\n+      S int\n+)\n+\n+type matcher func(s *S) E\n+\n+func matchList(s *S) E { return matcher(matchAnyFn)(s) }\n+\n+var foo = matcher(matchList)\n+\n+var matchAny /* ERROR initialization cycle */ = matcher(matchList)\n+\n+func matchAnyFn(s *S) (err E) { return matchAny(s) }\n\\ No newline at end of file"}, {"sha": "614db6c949147bd7a4c78bd8e3a5fc4ae5916856", "filename": "libgo/go/go/types/testdata/init2.src", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit2.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit2.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Finit2.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,139 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// initialization cycles\n+\n+package init2\n+\n+// cycles through functions\n+\n+func f1() int { _ = x1; return 0 }\n+var x1 /* ERROR initialization cycle */ = f1\n+\n+func f2() int { _ = x2; return 0 }\n+var x2 /* ERROR initialization cycle */ = f2()\n+\n+// cycles through method expressions\n+\n+type T3 int\n+func (T3) m() int { _ = x3; return 0 }\n+var x3 /* ERROR initialization cycle */ = T3.m\n+\n+type T4 int\n+func (T4) m() int { _ = x4; return 0 }\n+var x4 /* ERROR initialization cycle */ = T4.m(0)\n+\n+type T3p int\n+func (*T3p) m() int { _ = x3p; return 0 }\n+var x3p /* ERROR initialization cycle */ = (*T3p).m\n+\n+type T4p int\n+func (*T4p) m() int { _ = x4p; return 0 }\n+var x4p /* ERROR initialization cycle */ = (*T4p).m(nil)\n+\n+// cycles through method expressions of embedded methods\n+\n+type T5 struct { E5 }\n+type E5 int\n+func (E5) m() int { _ = x5; return 0 }\n+var x5 /* ERROR initialization cycle */ = T5.m\n+\n+type T6 struct { E6 }\n+type E6 int\n+func (E6) m() int { _ = x6; return 0 }\n+var x6 /* ERROR initialization cycle */ = T6.m(T6{0})\n+\n+type T5p struct { E5p }\n+type E5p int\n+func (*E5p) m() int { _ = x5p; return 0 }\n+var x5p /* ERROR initialization cycle */ = (*T5p).m\n+\n+type T6p struct { E6p }\n+type E6p int\n+func (*E6p) m() int { _ = x6p; return 0 }\n+var x6p /* ERROR initialization cycle */ = (*T6p).m(nil)\n+\n+// cycles through method values\n+\n+type T7 int\n+func (T7) m() int { _ = x7; return 0 }\n+var x7 /* ERROR initialization cycle */ = T7(0).m\n+\n+type T8 int\n+func (T8) m() int { _ = x8; return 0 }\n+var x8 /* ERROR initialization cycle */ = T8(0).m()\n+\n+type T7p int\n+func (*T7p) m() int { _ = x7p; return 0 }\n+var x7p /* ERROR initialization cycle */ = new(T7p).m\n+\n+type T8p int\n+func (*T8p) m() int { _ = x8p; return 0 }\n+var x8p /* ERROR initialization cycle */ = new(T8p).m()\n+\n+type T7v int\n+func (T7v) m() int { _ = x7v; return 0 }\n+var x7var T7v\n+var x7v /* ERROR initialization cycle */ = x7var.m\n+\n+type T8v int\n+func (T8v) m() int { _ = x8v; return 0 }\n+var x8var T8v\n+var x8v /* ERROR initialization cycle */ = x8var.m()\n+\n+type T7pv int\n+func (*T7pv) m() int { _ = x7pv; return 0 }\n+var x7pvar *T7pv\n+var x7pv /* ERROR initialization cycle */ = x7pvar.m\n+\n+type T8pv int\n+func (*T8pv) m() int { _ = x8pv; return 0 }\n+var x8pvar *T8pv\n+var x8pv /* ERROR initialization cycle */ = x8pvar.m()\n+\n+// cycles through method values of embedded methods\n+\n+type T9 struct { E9 }\n+type E9 int\n+func (E9) m() int { _ = x9; return 0 }\n+var x9 /* ERROR initialization cycle */ = T9{0}.m\n+\n+type T10 struct { E10 }\n+type E10 int\n+func (E10) m() int { _ = x10; return 0 }\n+var x10 /* ERROR initialization cycle */ = T10{0}.m()\n+\n+type T9p struct { E9p }\n+type E9p int\n+func (*E9p) m() int { _ = x9p; return 0 }\n+var x9p /* ERROR initialization cycle */ = new(T9p).m\n+\n+type T10p struct { E10p }\n+type E10p int\n+func (*E10p) m() int { _ = x10p; return 0 }\n+var x10p /* ERROR initialization cycle */ = new(T10p).m()\n+\n+type T9v struct { E9v }\n+type E9v int\n+func (E9v) m() int { _ = x9v; return 0 }\n+var x9var T9v\n+var x9v /* ERROR initialization cycle */ = x9var.m\n+\n+type T10v struct { E10v }\n+type E10v int\n+func (E10v) m() int { _ = x10v; return 0 }\n+var x10var T10v\n+var x10v /* ERROR initialization cycle */ = x10var.m()\n+\n+type T9pv struct { E9pv }\n+type E9pv int\n+func (*E9pv) m() int { _ = x9pv; return 0 }\n+var x9pvar *T9pv\n+var x9pv /* ERROR initialization cycle */ = x9pvar.m\n+\n+type T10pv struct { E10pv }\n+type E10pv int\n+func (*E10pv) m() int { _ = x10pv; return 0 }\n+var x10pvar *T10pv\n+var x10pv /* ERROR initialization cycle */ = x10pvar.m()"}, {"sha": "6579aa3b117b65450f4cb4ef9b2cdf6acaed5738", "filename": "libgo/go/go/types/testdata/issues.src", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fissues.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fissues.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fissues.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,188 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package issues\n+\n+import \"fmt\"\n+\n+func issue7035() {\n+\ttype T struct{ X int }\n+\t_ = func() {\n+\t\tfmt.Println() // must refer to imported fmt rather than the fmt below\n+\t}\n+\tfmt := new(T)\n+\t_ = fmt.X\n+}\n+\n+func issue8066() {\n+\tconst (\n+\t\t_ = float32(340282356779733661637539395458142568447)\n+\t\t_ = float32(340282356779733661637539395458142568448 /* ERROR cannot convert */ )\n+\t)\n+}\n+\n+// Check that a missing identifier doesn't lead to a spurious error cascade.\n+func issue8799a() {\n+\tx, ok := missing /* ERROR undeclared */ ()\n+\t_ = !ok\n+\t_ = x\n+}\n+\n+func issue8799b(x int, ok bool) {\n+\tx, ok = missing /* ERROR undeclared */ ()\n+\t_ = !ok\n+\t_ = x\n+}\n+\n+func issue9182() {\n+\ttype Point C /* ERROR undeclared */ .Point\n+\t// no error for composite literal based on unknown type\n+\t_ = Point{x: 1, y: 2}\n+}\n+\n+func f0() (a []int)         { return }\n+func f1() (a []int, b int)  { return }\n+func f2() (a, b []int)      { return }\n+\n+func append_([]int, ...int) {}\n+\n+func issue9473(a []int, b ...int) {\n+\t// variadic builtin function\n+\t_ = append(f0())\n+\t_ = append(f0(), f0()...)\n+\t_ = append(f1())\n+\t_ = append(f2 /* ERROR cannot use .* in argument */ ())\n+\t_ = append(f2()... /* ERROR cannot use ... */ )\n+\t_ = append(f0(), f1 /* ERROR 2-valued f1 */ ())\n+\t_ = append(f0(), f2 /* ERROR 2-valued f2 */ ())\n+\t_ = append(f0(), f1 /* ERROR 2-valued f1 */ ()...)\n+\t_ = append(f0(), f2 /* ERROR 2-valued f2 */ ()...)\n+\n+\t// variadic user-defined function\n+\tappend_(f0())\n+\tappend_(f0(), f0()...)\n+\tappend_(f1())\n+\tappend_(f2 /* ERROR cannot use .* in argument */ ())\n+\tappend_(f2()... /* ERROR cannot use ... */ )\n+\tappend_(f0(), f1 /* ERROR 2-valued f1 */ ())\n+\tappend_(f0(), f2 /* ERROR 2-valued f2 */ ())\n+\tappend_(f0(), f1 /* ERROR 2-valued f1 */ ()...)\n+\tappend_(f0(), f2 /* ERROR 2-valued f2 */ ()...)\n+}\n+\n+// Check that embedding a non-interface type in an interface results in a good error message.\n+func issue10979() {\n+\ttype _ interface {\n+\t\tint /* ERROR int is not an interface */\n+\t}\n+\ttype T struct{}\n+\ttype _ interface {\n+\t\tT /* ERROR T is not an interface */\n+\t}\n+\ttype _ interface {\n+\t\tnosuchtype /* ERROR undeclared name: nosuchtype */\n+\t}\n+\ttype _ interface {\n+\t\tfmt /* ERROR Nosuchtype not declared by package fmt */ .Nosuchtype\n+\t}\n+\ttype _ interface {\n+\t\tnosuchpkg /* ERROR undeclared name: nosuchpkg */ .Nosuchtype\n+\t}\n+\ttype I interface {\n+\t\tI /* ERROR I\\.m \\(value of type func\\(I\\)\\) is not a type */ .m\n+\t\tm()\n+\t}\n+}\n+\n+// issue11347\n+// These should not crash.\n+var a1, b1 /* ERROR cycle */ , c1 /* ERROR cycle */ b1 = 0 > 0<<\"\"[\"\"[c1]]>c1\n+var a2, b2 /* ERROR cycle */ = 0 /* ERROR mismatch */ /* ERROR mismatch */ > 0<<\"\"[b2]\n+var a3, b3 /* ERROR cycle */ = int /* ERROR mismatch */ /* ERROR mismatch */ (1<<\"\"[b3])\n+\n+// issue10260\n+// Check that error messages explain reason for interface assignment failures.\n+type (\n+\tI0 interface{}\n+\tI1 interface{ foo() }\n+\tI2 interface{ foo(x int) }\n+\tT0 struct{}\n+\tT1 struct{}\n+\tT2 struct{}\n+)\n+\n+func (*T1) foo() {}\n+func (*T2) foo(x int) {}\n+\n+func issue10260() {\n+\tvar (\n+\t\ti0 I0\n+\t\ti1 I1\n+\t\ti2 I2\n+\t\tt0 *T0\n+\t\tt1 *T1\n+\t\tt2 *T2\n+\t)\n+\ti1 = i0 /* ERROR cannot use .* missing method foo */\n+\ti1 = t0 /* ERROR cannot use .* missing method foo */\n+\ti1 = i2 /* ERROR cannot use .* wrong type for method foo */\n+\ti1 = t2 /* ERROR cannot use .* wrong type for method foo */\n+\ti2 = i1 /* ERROR cannot use .* wrong type for method foo */\n+\ti2 = t1 /* ERROR cannot use .* wrong type for method foo */\n+\n+\t_ = func() I1 { return i0 /* ERROR cannot use .* missing method foo */ }\n+\t_ = func() I1 { return t0 /* ERROR cannot use .* missing method foo */ }\n+\t_ = func() I1 { return i2 /* ERROR cannot use .* wrong type for method foo */ }\n+\t_ = func() I1 { return t2 /* ERROR cannot use .* wrong type for method foo */ }\n+\t_ = func() I2 { return i1 /* ERROR cannot use .* wrong type for method foo */ }\n+\t_ = func() I2 { return t1 /* ERROR cannot use .* wrong type for method foo */ }\n+\n+\t// a few more - less exhaustive now\n+\n+\tf := func(I1, I2){}\n+\tf(i0 /* ERROR cannot use .* missing method foo */ , i1 /* ERROR cannot use .* wrong type for method foo */)\n+\n+\t_ = [...]I1{i0 /* ERROR cannot use .* missing method foo */ }\n+\t_ = [...]I1{i2 /* ERROR cannot use .* wrong type for method foo */ }\n+\t_ = []I1{i0 /* ERROR cannot use .* missing method foo */ }\n+\t_ = []I1{i2 /* ERROR cannot use .* wrong type for method foo */ }\n+\t_ = map[int]I1{0: i0 /* ERROR cannot use .* missing method foo */ }\n+\t_ = map[int]I1{0: i2 /* ERROR cannot use .* wrong type for method foo */ }\n+\n+\tmake(chan I1) <- i0 /* ERROR cannot use .* in send: missing method foo */\n+\tmake(chan I1) <- i2 /* ERROR cannot use .* in send: wrong type for method foo */\n+}\n+\n+// Check that constants representable as integers are in integer form\n+// before being used in operations that are only defined on integers.\n+func issue14229() {\n+\t// from the issue\n+\tconst _ = int64(-1<<63) % 1e6\n+\n+\t// related\n+\tconst (\n+\t\ta int = 3\n+\t\tb = 4.0\n+\t\t_ = a / b\n+\t\t_ = a % b\n+\t\t_ = b / a\n+\t\t_ = b % a\n+\t)\n+}\n+\n+// Check that in a n:1 variable declaration with type and initialization\n+// expression the type is distributed to all variables of the lhs before\n+// the initialization expression assignment is checked.\n+func issue15755() {\n+\t// from issue\n+\tvar i interface{}\n+\ttype b bool\n+\tvar x, y b = i.(b)\n+\t_ = x == y\n+\n+\t// related: we should see an error since the result of f1 is ([]int, int)\n+\tvar u, v []int = f1 /* ERROR cannot use f1 */ ()\n+\t_ = u\n+\t_ = v\n+}"}, {"sha": "9f4240696549401a1813414e34887f0b36babb8f", "filename": "libgo/go/go/types/testdata/labels.src", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Flabels.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Flabels.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Flabels.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,207 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This file is a modified concatenation of the files\n+// $GOROOT/test/label.go and $GOROOT/test/label1.go.\n+\n+package labels\n+\n+var x int\n+\n+func f0() {\n+L1 /* ERROR \"label L1 declared but not used\" */ :\n+\tfor {\n+\t}\n+L2 /* ERROR \"label L2 declared but not used\" */ :\n+\tselect {\n+\t}\n+L3 /* ERROR \"label L3 declared but not used\" */ :\n+\tswitch {\n+\t}\n+L4 /* ERROR \"label L4 declared but not used\" */ :\n+\tif true {\n+\t}\n+L5 /* ERROR \"label L5 declared but not used\" */ :\n+\tf0()\n+L6:\n+\tf0()\n+L6 /* ERROR \"label L6 already declared\" */ :\n+\tf0()\n+\tif x == 20 {\n+\t\tgoto L6\n+\t}\n+\n+L7:\n+\tfor {\n+\t\tbreak L7\n+\t\tbreak L8 /* ERROR \"invalid break label L8\" */\n+\t}\n+\n+// A label must be directly associated with a switch, select, or\n+// for statement; it cannot be the label of a labeled statement.\n+\n+L7a /* ERROR \"declared but not used\" */ : L7b:\n+\tfor {\n+\t\tbreak L7a /* ERROR \"invalid break label L7a\" */\n+\t\tcontinue L7a /* ERROR \"invalid continue label L7a\" */\n+\t\tcontinue L7b\n+\t}\n+\n+L8:\n+\tfor {\n+\t\tif x == 21 {\n+\t\t\tcontinue L8\n+\t\t\tcontinue L7 /* ERROR \"invalid continue label L7\" */\n+\t\t}\n+\t}\n+\n+L9:\n+\tswitch {\n+\tcase true:\n+\t\tbreak L9\n+\tdefalt /* ERROR \"label defalt declared but not used\" */ :\n+\t}\n+\n+L10:\n+\tselect {\n+\tdefault:\n+\t\tbreak L10\n+\t\tbreak L9 /* ERROR \"invalid break label L9\" */\n+\t}\n+\n+\tgoto L10a\n+L10a: L10b:\n+\tselect {\n+\tdefault:\n+\t\tbreak L10a /* ERROR \"invalid break label L10a\" */\n+\t\tbreak L10b\n+\t\tcontinue L10b /* ERROR \"invalid continue label L10b\" */\n+\t}\n+}\n+\n+func f1() {\n+L1:\n+\tfor {\n+\t\tif x == 0 {\n+\t\t\tbreak L1\n+\t\t}\n+\t\tif x == 1 {\n+\t\t\tcontinue L1\n+\t\t}\n+\t\tgoto L1\n+\t}\n+\n+L2:\n+\tselect {\n+\tdefault:\n+\t\tif x == 0 {\n+\t\t\tbreak L2\n+\t\t}\n+\t\tif x == 1 {\n+\t\t\tcontinue L2 /* ERROR \"invalid continue label L2\" */\n+\t\t}\n+\t\tgoto L2\n+\t}\n+\n+L3:\n+\tswitch {\n+\tcase x > 10:\n+\t\tif x == 11 {\n+\t\t\tbreak L3\n+\t\t}\n+\t\tif x == 12 {\n+\t\t\tcontinue L3 /* ERROR \"invalid continue label L3\" */\n+\t\t}\n+\t\tgoto L3\n+\t}\n+\n+L4:\n+\tif true {\n+\t\tif x == 13 {\n+\t\t\tbreak L4 /* ERROR \"invalid break label L4\" */\n+\t\t}\n+\t\tif x == 14 {\n+\t\t\tcontinue L4 /* ERROR \"invalid continue label L4\" */\n+\t\t}\n+\t\tif x == 15 {\n+\t\t\tgoto L4\n+\t\t}\n+\t}\n+\n+L5:\n+\tf1()\n+\tif x == 16 {\n+\t\tbreak L5 /* ERROR \"invalid break label L5\" */\n+\t}\n+\tif x == 17 {\n+\t\tcontinue L5 /* ERROR \"invalid continue label L5\" */\n+\t}\n+\tif x == 18 {\n+\t\tgoto L5\n+\t}\n+\n+\tfor {\n+\t\tif x == 19 {\n+\t\t\tbreak L1 /* ERROR \"invalid break label L1\" */\n+\t\t}\n+\t\tif x == 20 {\n+\t\t\tcontinue L1 /* ERROR \"invalid continue label L1\" */\n+\t\t}\n+\t\tif x == 21 {\n+\t\t\tgoto L1\n+\t\t}\n+\t}\n+}\n+\n+// Additional tests not in the original files.\n+\n+func f2() {\n+L1 /* ERROR \"label L1 declared but not used\" */ :\n+\tif x == 0 {\n+\t\tfor {\n+\t\t\tcontinue L1 /* ERROR \"invalid continue label L1\" */\n+\t\t}\n+\t}\n+}\n+\n+func f3() {\n+L1:\n+L2:\n+L3:\n+\tfor {\n+\t\tbreak L1 /* ERROR \"invalid break label L1\" */\n+\t\tbreak L2 /* ERROR \"invalid break label L2\" */\n+\t\tbreak L3\n+\t\tcontinue L1 /* ERROR \"invalid continue label L1\" */\n+\t\tcontinue L2 /* ERROR \"invalid continue label L2\" */\n+\t\tcontinue L3\n+\t\tgoto L1\n+\t\tgoto L2\n+\t\tgoto L3\n+\t}\n+}\n+\n+// Blank labels are never declared.\n+\n+func f4() {\n+_:\n+_: // multiple blank labels are ok\n+\tgoto _ /* ERROR \"label _ not declared\" */\n+}\n+\n+func f5() {\n+_:\n+\tfor {\n+\t\tbreak _ /* ERROR \"invalid break label _\" */\n+\t\tcontinue _ /* ERROR \"invalid continue label _\" */\n+\t}\n+}\n+\n+func f6() {\n+_:\n+\tswitch {\n+\tdefault:\n+\t\tbreak _ /* ERROR \"invalid break label _\" */\n+\t}\n+}"}, {"sha": "89211468ead01f98e89c470914e1f870f5e1ad6d", "filename": "libgo/go/go/types/testdata/methodsets.src", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fmethodsets.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fmethodsets.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fmethodsets.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,214 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package methodsets\n+\n+type T0 struct {}\n+\n+func (T0) v0() {}\n+func (*T0) p0() {}\n+\n+type T1 struct {} // like T0 with different method names\n+\n+func (T1) v1() {}\n+func (*T1) p1() {}\n+\n+type T2 interface {\n+\tv2()\n+\tp2()\n+}\n+\n+type T3 struct {\n+\tT0\n+\t*T1\n+\tT2\n+}\n+\n+// Method expressions\n+func _() {\n+\tvar (\n+\t\t_ func(T0) = T0.v0\n+\t\t_ = T0 /* ERROR \"not in method set\" */ .p0\n+\n+\t\t_ func (*T0) = (*T0).v0\n+\t\t_ func (*T0) = (*T0).p0\n+\n+\t\t// T1 is like T0\n+\n+\t\t_ func(T2) = T2.v2\n+\t\t_ func(T2) = T2.p2\n+\n+\t\t_ func(T3) = T3.v0\n+\t\t_ func(T3) = T3 /* ERROR \"not in method set\" */ .p0\n+\t\t_ func(T3) = T3.v1\n+\t\t_ func(T3) = T3.p1\n+\t\t_ func(T3) = T3.v2\n+\t\t_ func(T3) = T3.p2\n+\n+\t\t_ func(*T3) = (*T3).v0\n+\t\t_ func(*T3) = (*T3).p0\n+\t\t_ func(*T3) = (*T3).v1\n+\t\t_ func(*T3) = (*T3).p1\n+\t\t_ func(*T3) = (*T3).v2\n+\t\t_ func(*T3) = (*T3).p2\n+\t)\n+}\n+\n+// Method values with addressable receivers\n+func _() {\n+\tvar (\n+\t\tv0 T0\n+\t\t_ func() = v0.v0\n+\t\t_ func() = v0.p0\n+\t)\n+\n+\tvar (\n+\t\tp0 *T0\n+\t\t_ func() = p0.v0\n+\t\t_ func() = p0.p0\n+\t)\n+\n+\t// T1 is like T0\n+\n+\tvar (\n+\t\tv2 T2\n+\t\t_ func() = v2.v2\n+\t\t_ func() = v2.p2\n+\t)\n+\n+\tvar (\n+\t\tv4 T3\n+\t\t_ func() = v4.v0\n+\t\t_ func() = v4.p0\n+\t\t_ func() = v4.v1\n+\t\t_ func() = v4.p1\n+\t\t_ func() = v4.v2\n+\t\t_ func() = v4.p2\n+\t)\n+\n+\tvar (\n+\t\tp4 *T3\n+\t\t_ func() = p4.v0\n+\t\t_ func() = p4.p0\n+\t\t_ func() = p4.v1\n+\t\t_ func() = p4.p1\n+\t\t_ func() = p4.v2\n+\t\t_ func() = p4.p2\n+\t)\n+}\n+\n+// Method calls with addressable receivers\n+func _() {\n+\tvar v0 T0\n+\tv0.v0()\n+\tv0.p0()\n+\n+\tvar p0 *T0\n+\tp0.v0()\n+\tp0.p0()\n+\n+\t// T1 is like T0\n+\n+\tvar v2 T2\n+\tv2.v2()\n+\tv2.p2()\n+\n+\tvar v4 T3\n+\tv4.v0()\n+\tv4.p0()\n+\tv4.v1()\n+\tv4.p1()\n+\tv4.v2()\n+\tv4.p2()\n+\n+\tvar p4 *T3\n+\tp4.v0()\n+\tp4.p0()\n+\tp4.v1()\n+\tp4.p1()\n+\tp4.v2()\n+\tp4.p2()\n+}\n+\n+// Method values with value receivers\n+func _() {\n+\tvar (\n+\t\t_ func() = T0{}.v0\n+\t\t_ func() = T0 /* ERROR \"not in method set\" */ {}.p0\n+\n+\t\t_ func() = (&T0{}).v0\n+\t\t_ func() = (&T0{}).p0\n+\n+\t\t// T1 is like T0\n+\n+\t\t// no values for T2\n+\n+\t\t_ func() = T3{}.v0\n+\t\t_ func() = T3 /* ERROR \"not in method set\" */ {}.p0\n+\t\t_ func() = T3{}.v1\n+\t\t_ func() = T3{}.p1\n+\t\t_ func() = T3{}.v2\n+\t\t_ func() = T3{}.p2\n+\n+\t\t_ func() = (&T3{}).v0\n+\t\t_ func() = (&T3{}).p0\n+\t\t_ func() = (&T3{}).v1\n+\t\t_ func() = (&T3{}).p1\n+\t\t_ func() = (&T3{}).v2\n+\t\t_ func() = (&T3{}).p2\n+\t)\n+}\n+\n+// Method calls with value receivers\n+func _() {\n+\tT0{}.v0()\n+\tT0 /* ERROR \"not in method set\" */ {}.p0()\n+\n+\t(&T0{}).v0()\n+\t(&T0{}).p0()\n+\n+\t// T1 is like T0\n+\n+\t// no values for T2\n+\n+\tT3{}.v0()\n+\tT3 /* ERROR \"not in method set\" */ {}.p0()\n+\tT3{}.v1()\n+\tT3{}.p1()\n+\tT3{}.v2()\n+\tT3{}.p2()\n+\n+\t(&T3{}).v0()\n+\t(&T3{}).p0()\n+\t(&T3{}).v1()\n+\t(&T3{}).p1()\n+\t(&T3{}).v2()\n+\t(&T3{}).p2()\n+}\n+\n+// *T has no methods if T is an interface type\n+func issue5918() {\n+\tvar (\n+\t\terr error\n+\t\t_ = err.Error()\n+\t\t_ func() string = err.Error\n+\t\t_ func(error) string = error.Error\n+\n+\t\tperr = &err\n+\t\t_ = perr /* ERROR \"no field or method\" */ .Error()\n+\t\t_ func() string = perr /* ERROR \"no field or method\" */ .Error\n+\t\t_ func(*error) string = ( /* ERROR \"no field or method\" */ *error).Error\n+\t)\n+\n+\ttype T *interface{ m() int }\n+\tvar (\n+\t\tx T\n+\t\t_ = (*x).m()\n+\t\t_ = (*x).m\n+\n+\t\t_ = x /* ERROR \"no field or method\" */ .m()\n+\t\t_ = x /* ERROR \"no field or method\" */ .m\n+\t\t_ = T /* ERROR \"no field or method\" */ .m\n+\t)\n+}"}, {"sha": "099c9ecc7cdc757ebc04323ae55b19295ee41dbf", "filename": "libgo/go/go/types/testdata/shifts.src", "status": "added", "additions": 341, "deletions": 0, "changes": 341, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fshifts.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fshifts.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fshifts.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,341 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package shifts\n+\n+func shifts0() {\n+\t// basic constant shifts\n+\tconst (\n+\t\ts = 10\n+\t\t_ = 0<<0\n+\t\t_ = 1<<s\n+\t\t_ = 1<<- /* ERROR \"invalid shift\" */ 1\n+\t\t_ = 1<<1075 /* ERROR \"invalid shift\" */\n+\t\t_ = 2.0<<1\n+\n+\t\t_ int = 2<<s\n+\t\t_ float32 = 2<<s\n+\t\t_ complex64 = 2<<s\n+\n+\t\t_ int = 2.0<<s\n+\t\t_ float32 = 2.0<<s\n+\t\t_ complex64 = 2.0<<s\n+\n+\t\t_ int = 'a'<<s\n+\t\t_ float32 = 'a'<<s\n+\t\t_ complex64 = 'a'<<s\n+\t)\n+}\n+\n+func shifts1() {\n+\t// basic non-constant shifts\n+\tvar (\n+\t\ti int\n+\t\tu uint\n+\n+\t\t_ = 1<<0\n+\t\t_ = 1<<i /* ERROR \"must be unsigned\" */\n+\t\t_ = 1<<u\n+\t\t_ = 1<<\"foo\" /* ERROR \"cannot convert\" */\n+\t\t_ = i<<0\n+\t\t_ = i<<- /* ERROR \"must not be negative\" */ 1\n+\t\t_ = 1 /* ERROR \"overflows\" */ <<100\n+\n+\t\t_ uint = 1 << 0\n+\t\t_ uint = 1 << u\n+\t\t_ float32 = 1 /* ERROR \"must be integer\" */ << u\n+\t)\n+}\n+\n+func shifts2() {\n+\t// from the spec\n+\tvar (\n+\t\ts uint = 33\n+\t\ti = 1<<s           // 1 has type int\n+\t\tj int32 = 1<<s     // 1 has type int32; j == 0\n+\t\tk = uint64(1<<s)   // 1 has type uint64; k == 1<<33\n+\t\tm int = 1.0<<s     // 1.0 has type int\n+\t\tn = 1.0<<s != i    // 1.0 has type int; n == false if ints are 32bits in size\n+\t\to = 1<<s == 2<<s   // 1 and 2 have type int; o == true if ints are 32bits in size\n+\t\tp = 1<<s == 1<<33  // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int\n+\t\tu = 1.0 /* ERROR \"must be integer\" */ <<s         // illegal: 1.0 has type float64, cannot shift\n+\t\tu1 = 1.0 /* ERROR \"must be integer\" */ <<s != 0   // illegal: 1.0 has type float64, cannot shift\n+\t\tu2 = 1 /* ERROR \"must be integer\" */ <<s != 1.0   // illegal: 1 has type float64, cannot shift\n+\t\tv float32 = 1 /* ERROR \"must be integer\" */ <<s   // illegal: 1 has type float32, cannot shift\n+\t\tw int64 = 1.0<<33  // 1.0<<33 is a constant shift expression\n+\t)\n+\t_, _, _, _, _, _, _, _, _, _, _, _ = i, j, k, m, n, o, p, u, u1, u2, v, w\n+}\n+\n+func shifts3(a int16, b float32) {\n+\t// random tests\n+\tvar (\n+\t\ts uint = 11\n+\t\tu = 1 /* ERROR \"must be integer\" */ <<s + 1.0\n+\t\tv complex128 = 1 /* ERROR \"must be integer\" */ << s + 1.0 /* ERROR \"must be integer\" */ << s + 1\n+\t)\n+\tx := 1.0 /* ERROR \"must be integer\" */ <<s + 1\n+\tshifts3(1.0 << s, 1 /* ERROR \"must be integer\" */ >> s)\n+\t_, _, _ = u, v, x\n+}\n+\n+func shifts4() {\n+\t// shifts in comparisons w/ untyped operands\n+\tvar s uint\n+\n+\t_ = 1<<s == 1\n+\t_ = 1 /* ERROR \"integer\" */ <<s == 1.\n+\t_ = 1. /* ERROR \"integer\" */ <<s == 1\n+\t_ = 1. /* ERROR \"integer\" */ <<s == 1.\n+\n+\t_ = 1<<s + 1 == 1\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1 == 1.\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. == 1\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. == 1.\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 == 1\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 == 1.\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. == 1\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. == 1.\n+\n+\t_ = 1<<s == 1<<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s\n+\n+\t_ = 1<<s + 1<<s == 1\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1.\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1.\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1.\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1.\n+\n+\t_ = 1<<s + 1<<s == 1<<s + 1<<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1 /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1 /* ERROR \"integer\" */ <<s\n+\t_ = 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s == 1. /* ERROR \"integer\" */ <<s + 1. /* ERROR \"integer\" */ <<s\n+}\n+\n+func shifts5() {\n+\t// shifts in comparisons w/ typed operands\n+\tvar s uint\n+\tvar x int\n+\n+\t_ = 1<<s == x\n+\t_ = 1.<<s == x\n+\t_ = 1.1 /* ERROR \"int\" */ <<s == x\n+\n+\t_ = 1<<s + x == 1\n+\t_ = 1<<s + x == 1.\n+\t_ = 1<<s + x == 1.1 /* ERROR \"int\" */\n+\t_ = 1.<<s + x == 1\n+\t_ = 1.<<s + x == 1.\n+\t_ = 1.<<s + x == 1.1 /* ERROR \"int\" */\n+\t_ = 1.1 /* ERROR \"int\" */ <<s + x == 1\n+\t_ = 1.1 /* ERROR \"int\" */ <<s + x == 1.\n+\t_ = 1.1 /* ERROR \"int\" */ <<s + x == 1.1\n+\n+\t_ = 1<<s == x<<s\n+\t_ = 1.<<s == x<<s\n+\t_ = 1.1  /* ERROR \"int\" */ <<s == x<<s\n+}\n+\n+func shifts6() {\n+\t// shifts as operands in non-arithmetic operations and as arguments\n+\tvar a [10]int\n+\tvar s uint\n+\n+\t_ = a[1<<s]\n+\t_ = a[1.0]\n+\t_ = a[1.0<<s]\n+\n+\t_ = make([]int, 1.0)\n+\t_ = make([]int, 1.0<<s)\n+\t_ = make([]int, 1.1 /* ERROR \"must be integer\" */ <<s)\n+\n+\t_ = float32(1)\n+\t_ = float32(1 /* ERROR \"must be integer\" */ <<s)\n+\t_ = float32(1.0)\n+\t_ = float32(1.0 /* ERROR \"must be integer\" */ <<s)\n+\t_ = float32(1.1 /* ERROR \"must be integer\" */ <<s)\n+\n+\tvar b []int\n+\t_ = append(b, 1<<s)\n+\t_ = append(b, 1.0<<s)\n+\t_ = append(b, 1.1 /* ERROR \"must be integer\" */ <<s)\n+\n+\t_ = append(b, 1<<s)\n+\t_ = append(b, 1.0<<s) // should fail - see TODO in append code\n+\t_ = append(b, 1.1 /* ERROR \"must be integer\" */ <<s)\n+\n+\t_ = complex(1.0 /* ERROR \"must be integer\" */ <<s, 0)\n+\t_ = complex(1.1 /* ERROR \"must be integer\" */ <<s, 0)\n+\t_ = complex(0, 1.0 /* ERROR \"must be integer\" */ <<s)\n+\t_ = complex(0, 1.1 /* ERROR \"must be integer\" */ <<s)\n+\n+\t// TODO(gri) The delete below is not type-checked correctly yet.\n+\t// var m1 map[int]string\n+\t// delete(m1, 1<<s)\n+}\n+\n+func shifts7() {\n+\t// shifts of shifts\n+\tvar s uint\n+\tvar x int\n+\t_ = x\n+\n+\t_ = 1<<(1<<s)\n+\t_ = 1<<(1.<<s)\n+\t_ = 1. /* ERROR \"integer\" */ <<(1<<s)\n+\t_ = 1. /* ERROR \"integer\" */ <<(1.<<s)\n+\n+\tx = 1<<(1<<s)\n+\tx = 1<<(1.<<s)\n+\tx = 1.<<(1<<s)\n+\tx = 1.<<(1.<<s)\n+\n+\t_ = (1<<s)<<(1<<s)\n+\t_ = (1<<s)<<(1.<<s)\n+\t_ = ( /* ERROR \"integer\" */ 1.<<s)<<(1<<s)\n+\t_ = ( /* ERROR \"integer\" */ 1.<<s)<<(1.<<s)\n+\n+\tx = (1<<s)<<(1<<s)\n+\tx = (1<<s)<<(1.<<s)\n+\tx = ( /* ERROR \"integer\" */ 1.<<s)<<(1<<s)\n+\tx = ( /* ERROR \"integer\" */ 1.<<s)<<(1.<<s)\n+}\n+\n+func shifts8() {\n+\t// shift examples from shift discussion: better error messages\n+\tvar s uint\n+\t_ = 1.0 /* ERROR \"shifted operand 1.0 \\(type float64\\) must be integer\" */ <<s == 1\n+\t_ = 1.0 /* ERROR \"shifted operand 1.0 \\(type float64\\) must be integer\" */ <<s == 1.0\n+\t_ = 1 /* ERROR \"shifted operand 1 \\(type float64\\) must be integer\" */ <<s == 1.0\n+\t_ = 1 /* ERROR \"shifted operand 1 \\(type float64\\) must be integer\" */ <<s + 1.0 == 1\n+\t_ = 1 /* ERROR \"shifted operand 1 \\(type float64\\) must be integer\" */ <<s + 1.1 == 1\n+\t_ = 1 /* ERROR \"shifted operand 1 \\(type float64\\) must be integer\" */ <<s + 1 == 1.0\n+\n+\t// additional cases\n+\t_ = complex(1.0 /* ERROR \"shifted operand 1.0 \\(type float64\\) must be integer\" */ <<s, 1)\n+\t_ = complex(1.0, 1 /* ERROR \"shifted operand 1 \\(type float64\\) must be integer\" */ <<s)\n+\n+\t_ = int(1.<<s)\n+\t_ = int(1.1 /* ERROR \"shifted operand .* must be integer\" */ <<s)\n+\t_ = float32(1 /* ERROR \"shifted operand .* must be integer\" */ <<s)\n+\t_ = float32(1. /* ERROR \"shifted operand .* must be integer\" */ <<s)\n+\t_ = float32(1.1 /* ERROR \"shifted operand .* must be integer\" */ <<s)\n+\t// TODO(gri) the error messages for these two are incorrect - disabled for now\n+\t// _ = complex64(1<<s)\n+\t// _ = complex64(1.<<s)\n+\t_ = complex64(1.1 /* ERROR \"shifted operand .* must be integer\" */ <<s)\n+}\n+\n+func shifts9() {\n+\t// various originally failing snippets of code from the std library\n+\t// from src/compress/lzw/reader.go:90\n+\t{\n+\t\tvar d struct {\n+\t\t\tbits     uint32\n+\t\t\twidth    uint\n+\t\t}\n+\t\t_ = uint16(d.bits & (1<<d.width - 1))\n+\t}\n+\n+\t// from src/debug/dwarf/buf.go:116\n+\t{\n+\t\tvar ux uint64\n+\t\tvar bits uint\n+\t\tx := int64(ux)\n+\t\tif x&(1<<(bits-1)) != 0 {}\n+\t}\n+\n+\t// from src/encoding/asn1/asn1.go:160\n+\t{\n+\t\tvar bytes []byte\n+\t\tif bytes[len(bytes)-1]&((1<<bytes[0])-1) != 0 {}\n+\t}\n+\n+\t// from src/math/big/rat.go:140\n+\t{\n+\t\tvar exp int\n+\t\tvar mantissa uint64\n+\t\tshift := uint64(-1022 - (exp - 1)) // [1..53)\n+\t\t_ = mantissa & (1<<shift - 1)\n+\t}\n+\n+\t// from src/net/interface.go:51\n+\t{\n+\t\ttype Flags uint\n+\t\tvar f Flags\n+\t\tvar i int\n+\t\tif f&(1<<uint(i)) != 0 {}\n+\t}\n+\n+\t// from src/runtime/softfloat64.go:234\n+\t{\n+\t\tvar gm uint64\n+\t\tvar shift uint\n+\t\t_ = gm & (1<<shift - 1)\n+\t}\n+\n+\t// from src/strconv/atof.go:326\n+\t{\n+\t\tvar mant uint64\n+\t\tvar mantbits uint\n+\t\tif mant == 2<<mantbits {}\n+\t}\n+\n+\t// from src/route_bsd.go:82\n+\t{\n+\t\tvar Addrs int32\n+\t\tconst rtaRtMask = 1\n+\t\tvar i uint\n+\t\tif Addrs&rtaRtMask&(1<<i) == 0 {}\n+\t}\n+\n+\t// from src/text/scanner/scanner.go:540\n+\t{\n+\t\tvar s struct { Whitespace uint64 }\n+\t\tvar ch rune\n+\t\tfor s.Whitespace&(1<<uint(ch)) != 0 {}\n+\t}\n+}\n+\n+func issue5895() {\n+\tvar x = 'a' << 1 // type of x must be rune\n+\tvar _ rune = x\n+}\n+\n+func issue11325() {\n+\tvar _ = 0 >> 1.1 /* ERROR \"must be unsigned integer\" */ // example from issue 11325\n+\t_ = 0 >> 1.1 /* ERROR \"must be unsigned integer\" */\n+\t_ = 0 << 1.1 /* ERROR \"must be unsigned integer\" */\n+\t_ = 0 >> 1.\n+\t_ = 1 >> 1.1 /* ERROR \"must be unsigned integer\" */\n+\t_ = 1 >> 1.\n+\t_ = 1. >> 1\n+\t_ = 1. >> 1.\n+\t_ = 1.1 /* ERROR \"must be integer\" */ >> 1\n+}\n+\n+func issue11594() {\n+\tvar _ = complex64 /* ERROR \"must be integer\" */ (1) << 2 // example from issue 11594\n+\t_ = float32 /* ERROR \"must be integer\" */ (0) << 1\n+\t_ = float64 /* ERROR \"must be integer\" */ (0) >> 2\n+\t_ = complex64 /* ERROR \"must be integer\" */ (0) << 3\n+\t_ = complex64 /* ERROR \"must be integer\" */ (0) >> 4\n+}"}, {"sha": "87f08e4314f0a32db3bb39bb408f554768d1d897", "filename": "libgo/go/go/types/testdata/stmt0.src", "status": "added", "additions": 980, "deletions": 0, "changes": 980, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt0.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,980 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// statements\n+\n+package stmt0\n+\n+func assignments0() (int, int) {\n+\tvar a, b, c int\n+\tvar ch chan int\n+\tf0 := func() {}\n+\tf1 := func() int { return 1 }\n+\tf2 := func() (int, int) { return 1, 2 }\n+\tf3 := func() (int, int, int) { return 1, 2, 3 }\n+\n+\ta, b, c = 1, 2, 3\n+\ta, b, c = 1 /* ERROR \"assignment count mismatch\" */ , 2\n+\ta, b, c = 1 /* ERROR \"assignment count mismatch\" */ , 2, 3, 4\n+\t_, _, _ = a, b, c\n+\n+\ta = f0 /* ERROR \"used as value\" */ ()\n+\ta = f1()\n+\ta = f2 /* ERROR \"assignment count mismatch\" */ ()\n+\ta, b = f2()\n+\ta, b, c = f2 /* ERROR \"assignment count mismatch\" */ ()\n+\ta, b, c = f3()\n+\ta, b = f3 /* ERROR \"assignment count mismatch\" */ ()\n+\n+\ta, b, c = <- /* ERROR \"assignment count mismatch\" */ ch\n+\n+\treturn /* ERROR \"wrong number of return values\" */\n+\treturn /* ERROR \"wrong number of return values\" */ 1\n+\treturn 1, 2\n+\treturn /* ERROR \"wrong number of return values\" */ 1, 2, 3\n+}\n+\n+func assignments1() {\n+\tb, i, f, c, s := false, 1, 1.0, 1i, \"foo\"\n+\tb = i /* ERROR \"cannot use .* in assignment\" */\n+\ti = f /* ERROR \"cannot use .* in assignment\" */\n+\tf = c /* ERROR \"cannot use .* in assignment\" */\n+\tc = s /* ERROR \"cannot use .* in assignment\" */\n+\ts = b /* ERROR \"cannot use .* in assignment\" */\n+\n+\tv0, v1, v2 := 1 /* ERROR \"mismatch\" */ , 2, 3, 4\n+\t_, _, _ = v0, v1, v2\n+\n+\tb = true\n+\n+\ti += 1\n+\ti += \"foo\" /* ERROR \"cannot convert.*int\" */\n+\n+\tf -= 1\n+\tf /= 0\n+\tf = float32(0)/0 /* ERROR \"division by zero\" */\n+\tf -= \"foo\" /* ERROR \"cannot convert.*float64\" */\n+\n+\tc *= 1\n+\tc /= 0\n+\n+\ts += \"bar\"\n+\ts += 1 /* ERROR \"cannot convert.*string\" */\n+\n+\tvar u64 uint64\n+\tu64 += 1<<u64\n+\n+\tundeclared /* ERROR \"undeclared\" */ = 991\n+\n+\t// test cases for issue 5800\n+\tvar (\n+\t\t_ int = nil /* ERROR \"untyped nil value\" */\n+\t\t_ [10]int = nil /* ERROR \"untyped nil value\" */\n+\t\t_ []byte = nil\n+\t\t_ struct{} = nil /* ERROR \"untyped nil value\" */\n+\t\t_ func() = nil\n+\t\t_ map[int]string = nil\n+\t\t_ chan int = nil\n+\t)\n+\n+\t// test cases for issue 5500\n+\t_ = func() (int, bool) {\n+\t\tvar m map[int]int\n+\t\treturn /* ERROR \"wrong number of return values\" */ m[0]\n+\t}\n+\n+\tg := func(int, bool){}\n+\tvar m map[int]int\n+\tg(m[0]) /* ERROR \"too few arguments\" */\n+\n+\t// assignments to _\n+\t_ = nil /* ERROR \"use of untyped nil\" */\n+\t_ = 1 /* ERROR overflow */ <<1000\n+\t(_) = 0\n+}\n+\n+func assignments2() {\n+\ttype mybool bool\n+\tvar m map[string][]bool\n+\tvar s []bool\n+\tvar b bool\n+\tvar d mybool\n+\t_ = s\n+\t_ = b\n+\t_ = d\n+\n+\t// assignments to map index expressions are ok\n+\ts, b = m[\"foo\"]\n+\t_, d = m[\"bar\"]\n+\tm[\"foo\"] = nil\n+\tm[\"foo\"] = nil /* ERROR assignment count mismatch */ , false\n+\t_ = append(m[\"foo\"])\n+\t_ = append(m[\"foo\"], true)\n+\n+\tvar c chan int\n+\t_, b = <-c\n+\t_, d = <-c\n+\t<- /* ERROR cannot assign */ c = 0\n+\t<-c = 0 /* ERROR assignment count mismatch */ , false\n+\n+\tvar x interface{}\n+\t_, b = x.(int)\n+\tx /* ERROR cannot assign */ .(int) = 0\n+\tx.(int) = 0 /* ERROR assignment count mismatch */ , false\n+\n+\tassignments2 /* ERROR used as value */ () = nil\n+\tint /* ERROR not an expression */ = 0\n+}\n+\n+func issue6487() {\n+\ttype S struct{x int}\n+\t_ = &S /* ERROR \"cannot take address\" */ {}.x\n+\t_ = &( /* ERROR \"cannot take address\" */ S{}.x)\n+\t_ = (&S{}).x\n+\tS /* ERROR \"cannot assign\" */ {}.x = 0\n+\t(&S{}).x = 0\n+\n+\ttype M map[string]S\n+\tvar m M\n+\tm /* ERROR \"cannot assign to struct field\" */ [\"foo\"].x = 0\n+\t_ = &( /* ERROR \"cannot take address\" */ m[\"foo\"].x)\n+\t_ = &m /* ERROR \"cannot take address\" */ [\"foo\"].x\n+}\n+\n+func issue6766a() {\n+\ta, a /* ERROR redeclared */ := 1, 2\n+\t_ = a\n+\ta, b, b /* ERROR redeclared */ := 1, 2, 3\n+\t_ = b\n+\tc, c /* ERROR redeclared */, b := 1, 2, 3\n+\t_ = c\n+\ta, b := /* ERROR no new variables */ 1, 2\n+}\n+\n+func shortVarDecls1() {\n+\tconst c = 0\n+\ttype d int\n+\ta, b, c /* ERROR \"cannot assign\" */ , d /* ERROR \"cannot assign\" */  := 1, \"zwei\", 3.0, 4\n+\tvar _ int = a // a is of type int\n+\tvar _ string = b // b is of type string\n+}\n+\n+func incdecs() {\n+\tconst c = 3.14\n+\tc /* ERROR \"cannot assign\" */ ++\n+\ts := \"foo\"\n+\ts /* ERROR \"invalid operation\" */ --\n+\t3.14 /* ERROR \"cannot assign\" */ ++\n+\tvar (\n+\t\tx int\n+\t\ty float32\n+\t\tz complex128\n+\t)\n+\tx++\n+\ty--\n+\tz++\n+}\n+\n+func sends() {\n+\tvar ch chan int\n+\tvar rch <-chan int\n+\tvar x int\n+\tx <- /* ERROR \"cannot send\" */ x\n+\trch <- /* ERROR \"cannot send\" */ x\n+\tch <- \"foo\" /* ERROR \"cannot convert\" */\n+\tch <- x\n+}\n+\n+func selects() {\n+\tselect {}\n+\tvar (\n+\t\tch chan int\n+\t\tsc chan <- bool\n+\t)\n+\tselect {\n+\tcase <-ch:\n+\tcase (<-ch):\n+\tcase t := <-ch:\n+\t\t_ = t\n+\tcase t := (<-ch):\n+\t\t_ = t\n+\tcase t, ok := <-ch:\n+\t\t_, _ = t, ok\n+\tcase t, ok := (<-ch):\n+\t\t_, _ = t, ok\n+\tcase <-sc /* ERROR \"cannot receive from send-only channel\" */ :\n+\t}\n+\tselect {\n+\tdefault:\n+\tdefault /* ERROR \"multiple defaults\" */ :\n+\t}\n+\tselect {\n+\tcase a, b := <-ch:\n+\t\t_, b = a, b\n+\tcase x /* ERROR send or receive */ :\n+\tcase a /* ERROR send or receive */ := ch:\n+\t}\n+\n+\t// test for issue 9570: ch2 in second case falsely resolved to\n+\t// ch2 declared in body of first case\n+\tch1 := make(chan int)\n+\tch2 := make(chan int)\n+\tselect {\n+\tcase <-ch1:\n+\t\tvar ch2 /* ERROR ch2 declared but not used */ chan bool\n+\tcase i := <-ch2:\n+\t\tprint(i + 1)\n+\t}\n+}\n+\n+func gos() {\n+\tgo 1 /* ERROR HERE \"function must be invoked\" */\n+\tgo int /* ERROR \"go requires function call, not conversion\" */ (0)\n+\tgo gos()\n+\tvar c chan int\n+\tgo close(c)\n+\tgo len /* ERROR \"go discards result\" */ (c)\n+}\n+\n+func defers() {\n+\tdefer 1 /* ERROR HERE \"function must be invoked\" */\n+\tdefer int /* ERROR \"defer requires function call, not conversion\" */ (0)\n+\tdefer defers()\n+\tvar c chan int\n+\tdefer close(c)\n+\tdefer len /* ERROR \"defer discards result\" */ (c)\n+}\n+\n+func breaks() {\n+\tvar x, y int\n+\n+\tbreak /* ERROR \"break\" */\n+\t{\n+\t\tbreak /* ERROR \"break\" */\n+\t}\n+\tif x < y {\n+\t\tbreak /* ERROR \"break\" */\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\tbreak\n+\tcase 1:\n+\t\tif x == y {\n+\t\t\tbreak\n+\t\t}\n+\tdefault:\n+\t\tbreak\n+\t\tbreak\n+\t}\n+\n+\tvar z interface{}\n+\tswitch z.(type) {\n+\tcase int:\n+\t\tbreak\n+\t}\n+\n+\tfor {\n+\t\tbreak\n+\t}\n+\n+\tvar a []int\n+\tfor _ = range a {\n+\t\tbreak\n+\t}\n+\n+\tfor {\n+\t\tif x == y {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\n+\tvar ch chan int\n+\tselect {\n+\tcase <-ch:\n+\t\tbreak\n+\t}\n+\n+\tselect {\n+\tcase <-ch:\n+\t\tif x == y {\n+\t\t\tbreak\n+\t\t}\n+\tdefault:\n+\t\tbreak\n+\t}\n+}\n+\n+func continues() {\n+\tvar x, y int\n+\n+\tcontinue /* ERROR \"continue\" */\n+\t{\n+\t\tcontinue /* ERROR \"continue\" */\n+\t}\n+\n+\tif x < y {\n+\t\tcontinue /* ERROR \"continue\" */\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\tcontinue /* ERROR \"continue\" */\n+\t}\n+\n+\tvar z interface{}\n+\tswitch z.(type) {\n+\tcase int:\n+\t\tcontinue /* ERROR \"continue\" */\n+\t}\n+\n+\tvar ch chan int\n+\tselect {\n+\tcase <-ch:\n+\t\tcontinue /* ERROR \"continue\" */\n+\t}\n+\n+\tfor i := 0; i < 10; i++ {\n+\t\tcontinue\n+\t\tif x < y {\n+\t\t\tcontinue\n+\t\t\tbreak\n+\t\t}\n+\t\tswitch x {\n+\t\tcase y:\n+\t\t\tcontinue\n+\t\tdefault:\n+\t\t\tbreak\n+\t\t}\n+\t\tselect {\n+\t\tcase <-ch:\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+\n+\tvar a []int\n+\tfor _ = range a {\n+\t\tcontinue\n+\t\tif x < y {\n+\t\t\tcontinue\n+\t\t\tbreak\n+\t\t}\n+\t\tswitch x {\n+\t\tcase y:\n+\t\t\tcontinue\n+\t\tdefault:\n+\t\t\tbreak\n+\t\t}\n+\t\tselect {\n+\t\tcase <-ch:\n+\t\t\tcontinue\n+\t\t}\n+\t}\n+}\n+\n+func returns0() {\n+\treturn\n+\treturn 0 /* ERROR no result values expected */\n+}\n+\n+func returns1(x float64) (int, *float64) {\n+\treturn 0, &x\n+\treturn /* ERROR wrong number of return values */\n+\treturn \"foo\" /* ERROR \"cannot convert\" */, x /* ERROR \"cannot use .* in return statement\" */\n+\treturn /* ERROR wrong number of return values */ 0, &x, 1\n+}\n+\n+func returns2() (a, b int) {\n+\treturn\n+\treturn 1, \"foo\" /* ERROR cannot convert */\n+\treturn /* ERROR wrong number of return values */ 1, 2, 3\n+\t{\n+\t\ttype a int\n+\t\treturn 1, 2\n+\t\treturn /* ERROR a not in scope at return */\n+\t}\n+}\n+\n+func returns3() (_ int) {\n+\treturn\n+\t{\n+\t\tvar _ int // blank (_) identifiers never shadow since they are in no scope\n+\t\treturn\n+\t}\n+}\n+\n+func switches0() {\n+\tvar x int\n+\n+\tswitch x {\n+\t}\n+\n+\tswitch x {\n+\tdefault:\n+\tdefault /* ERROR \"multiple defaults\" */ :\n+\t}\n+\n+\tswitch {\n+\tcase 1  /* ERROR \"cannot convert\" */ :\n+\t}\n+\n+\ttrue := \"false\"\n+\t_ = true\n+\t// A tagless switch is equivalent to the bool\n+        // constant true, not the identifier 'true'.\n+\tswitch {\n+\tcase \"false\" /* ERROR \"cannot convert\" */:\n+\t}\n+\n+\tswitch int32(x) {\n+\tcase 1, 2:\n+\tcase x /* ERROR \"cannot compare\" */ :\n+\t}\n+\n+\tswitch x {\n+\tcase 1 /* ERROR \"overflows\" */ << 100:\n+\t}\n+\n+\tswitch x {\n+\tcase 1:\n+\tcase 1 /* ERROR \"duplicate case\" */ :\n+\tcase ( /* ERROR \"duplicate case\" */ 1):\n+\tcase 2, 3, 4:\n+\tcase 5, 1 /* ERROR \"duplicate case\" */ :\n+\t}\n+\n+\tswitch uint64(x) {\n+\tcase 1<<64 - 1:\n+\tcase 1 /* ERROR duplicate case */ <<64 - 1:\n+\tcase 2, 3, 4:\n+\tcase 5, 1 /* ERROR duplicate case */ <<64 - 1:\n+\t}\n+\n+\tvar y32 float32\n+\tswitch y32 {\n+\tcase 1.1:\n+\tcase 11/10: // integer division!\n+\tcase 11. /* ERROR duplicate case */ /10:\n+\tcase 2, 3.0, 4.1:\n+\tcase 5.2, 1.10 /* ERROR duplicate case */ :\n+\t}\n+\n+\tvar y64 float64\n+\tswitch y64 {\n+\tcase 1.1:\n+\tcase 11/10: // integer division!\n+\tcase 11. /* ERROR duplicate case */ /10:\n+\tcase 2, 3.0, 4.1:\n+\tcase 5.2, 1.10 /* ERROR duplicate case */ :\n+\t}\n+\n+\tvar s string\n+\tswitch s {\n+\tcase \"foo\":\n+\tcase \"foo\" /* ERROR duplicate case */ :\n+\tcase \"f\" /* ERROR duplicate case */ + \"oo\":\n+\tcase \"abc\", \"def\", \"ghi\":\n+\tcase \"jkl\", \"foo\" /* ERROR duplicate case */ :\n+\t}\n+\n+\ttype T int\n+\ttype F float64\n+\ttype S string\n+\ttype B bool\n+\tvar i interface{}\n+\tswitch i {\n+\tcase nil:\n+\tcase nil: // no duplicate detection\n+\tcase (*int)(nil):\n+\tcase (*int)(nil): // do duplicate detection\n+\tcase 1:\n+\tcase byte(1):\n+\tcase int /* ERROR duplicate case */ (1):\n+\tcase T(1):\n+\tcase 1.0:\n+\tcase F(1.0):\n+\tcase F /* ERROR duplicate case */ (1.0):\n+\tcase \"hello\":\n+\tcase S(\"hello\"):\n+\tcase S /* ERROR duplicate case */ (\"hello\"):\n+\tcase 1==1, B(false):\n+\tcase false, B(2==2):\n+\t}\n+\n+\t// switch on array\n+\tvar a [3]int\n+\tswitch a {\n+\tcase [3]int{1, 2, 3}:\n+\tcase [3]int{1, 2, 3}: // no duplicate detection\n+\tcase [ /* ERROR \"mismatched types */ 4]int{4, 5, 6}:\n+\t}\n+\n+\t// switch on channel\n+\tvar c1, c2 chan int\n+\tswitch c1 {\n+\tcase nil:\n+\tcase c1:\n+\tcase c2:\n+\tcase c1, c2: // no duplicate detection\n+\t}\n+}\n+\n+func switches1() {\n+\tfallthrough /* ERROR \"fallthrough statement out of place\" */\n+\n+\tvar x int\n+\tswitch x {\n+\tcase 0:\n+\t\tfallthrough /* ERROR \"fallthrough statement out of place\" */\n+\t\tbreak\n+\tcase 1:\n+\t\tfallthrough\n+\tcase 2:\n+\t\tfallthrough; ; ; // trailing empty statements are ok\n+\tcase 3:\n+\tdefault:\n+\t\tfallthrough; ;\n+\tcase 4:\n+\t\tfallthrough /* ERROR \"cannot fallthrough final case in switch\" */\n+\t}\n+\n+\tvar y interface{}\n+\tswitch y.(type) {\n+\tcase int:\n+\t\tfallthrough /* ERROR \"fallthrough statement out of place\" */ ; ; ;\n+\tdefault:\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\tif x == 0 {\n+\t\t\tfallthrough /* ERROR \"fallthrough statement out of place\" */\n+\t\t}\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\tgoto L1\n+\t\tL1: fallthrough; ;\n+\tcase 1:\n+\t\tgoto L2\n+\t\tgoto L3\n+\t\tgoto L4\n+\t\tL2: L3: L4: fallthrough\n+\tdefault:\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\tgoto L5\n+\t\tL5: fallthrough\n+\tdefault:\n+\t\tgoto L6\n+\t\tgoto L7\n+\t\tgoto L8\n+\t\tL6: L7: L8: fallthrough /* ERROR \"cannot fallthrough final case in switch\" */\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\tfallthrough; ;\n+\tcase 1:\n+\t\t{\n+\t\t\tfallthrough /* ERROR \"fallthrough statement out of place\" */\n+\t\t}\n+\tcase 2:\n+\t\tfallthrough\n+\tcase 3:\n+\t\tfallthrough /* ERROR \"fallthrough statement out of place\" */\n+\t\t{ /* empty block is not an empty statement */ }; ;\n+\tdefault:\n+\t\tfallthrough /* ERROR \"cannot fallthrough final case in switch\" */\n+\t}\n+\n+\tswitch x {\n+\tcase 0:\n+\t\t{\n+\t\t\tfallthrough /* ERROR \"fallthrough statement out of place\" */\n+\t\t}\n+\t}\n+}\n+\n+func switches2() {\n+\t// untyped nil is not permitted as switch expression\n+\tswitch nil /* ERROR \"use of untyped nil\" */ {\n+\tcase 1, 2, \"foo\": // don't report additional errors here\n+\t}\n+\n+\t// untyped constants are converted to default types\n+\tswitch 1<<63-1 {\n+\t}\n+\tswitch 1 /* ERROR \"overflows int\" */ << 63 {\n+\t}\n+\tvar x int\n+\tswitch 1.0 {\n+\tcase 1.0, 2.0, x /* ERROR \"mismatched types int and float64\" */ :\n+\t}\n+\tswitch x {\n+\tcase 1.0:\n+\t}\n+\n+\t// untyped bools become of type bool\n+\ttype B bool\n+\tvar b B = true\n+\tswitch x == x {\n+\tcase b /* ERROR \"mismatched types B and bool\" */ :\n+\t}\n+\tswitch {\n+\tcase b /* ERROR \"mismatched types B and bool\" */ :\n+\t}\n+}\n+\n+func issue11667() {\n+\tswitch 9223372036854775808 /* ERROR \"overflows int\" */ {\n+\t}\n+\tswitch 9223372036854775808 /* ERROR \"overflows int\" */ {\n+\tcase 9223372036854775808:\n+\t}\n+\tvar x int\n+\tswitch x {\n+\tcase 9223372036854775808 /* ERROR \"overflows int\" */ :\n+\t}\n+\tvar y float64\n+\tswitch y {\n+\tcase 9223372036854775808:\n+\t}\n+}\n+\n+func issue11687() {\n+\tf := func() (_, _ int) { return }\n+\tswitch f /* ERROR \"2-valued f\" */ () {\n+\t}\n+\tvar x int\n+\tswitch f /* ERROR \"2-valued f\" */ () {\n+\tcase x:\n+\t}\n+\tswitch x {\n+\tcase f /* ERROR \"2-valued f\" */ ():\n+\t}\n+}\n+\n+type I interface {\n+\tm()\n+}\n+\n+type I2 interface {\n+\tm(int)\n+}\n+\n+type T struct{}\n+type T1 struct{}\n+type T2 struct{}\n+\n+func (T) m() {}\n+func (T2) m(int) {}\n+\n+func typeswitches() {\n+\tvar i int\n+\tvar x interface{}\n+\n+\tswitch x.(type) {}\n+\tswitch (x /* ERROR \"outside type switch\" */ .(type)) {}\n+\n+\tswitch x.(type) {\n+\tdefault:\n+\tdefault /* ERROR \"multiple defaults\" */ :\n+\t}\n+\n+\tswitch x /* ERROR \"declared but not used\" */ := x.(type) {}\n+\tswitch _ /* ERROR \"no new variable on left side of :=\" */ := x.(type) {}\n+\n+\tswitch x := x.(type) {\n+\tcase int:\n+\t\tvar y int = x\n+\t\t_ = y\n+\t}\n+\n+\tswitch x := i /* ERROR \"not an interface\" */ .(type) {}\n+\n+\tswitch t := x.(type) {\n+\tcase nil:\n+\t\tvar v bool = t /* ERROR \"cannot use .* in variable declaration\" */\n+\t\t_ = v\n+\tcase int:\n+\t\tvar v int = t\n+\t\t_ = v\n+\tcase float32, complex64:\n+\t\tvar v float32 = t /* ERROR \"cannot use .* in variable declaration\" */\n+\t\t_ = v\n+\tdefault:\n+\t\tvar v float32 = t /* ERROR \"cannot use .* in variable declaration\" */\n+\t\t_ = v\n+\t}\n+\n+\tvar t I\n+\tswitch t.(type) {\n+\tcase T:\n+\tcase T1 /* ERROR \"missing method m\" */ :\n+\tcase T2 /* ERROR \"wrong type for method m\" */ :\n+\tcase I2 /* STRICT \"wrong type for method m\" */ : // only an error in strict mode (issue 8561)\n+\t}\n+}\n+\n+// Test that each case clause uses the correct type of the variable\n+// declared by the type switch (issue 5504).\n+func typeswitch0() {\n+\tswitch y := interface{}(nil).(type) {\n+\tcase int:\n+\t\tfunc() int { return y + 0 }()\n+\tcase float32:\n+\t\tfunc() float32 { return y }()\n+\t}\n+}\n+\n+// Test correct scope setup.\n+// (no redeclaration errors expected in the type switch)\n+func typeswitch1() {\n+\tvar t I\n+\tswitch t := t; t := t.(type) {\n+\tcase nil:\n+\t\tvar _ I = t\n+\tcase T:\n+\t\tvar _ T = t\n+\tdefault:\n+\t\tvar _ I = t\n+\t}\n+}\n+\n+// Test correct typeswitch against interface types.\n+type A interface { a() }\n+type B interface { b() }\n+type C interface { a(int) }\n+\n+func typeswitch2() {\n+\tswitch A(nil).(type) {\n+\tcase A:\n+\tcase B:\n+\tcase C /* STRICT \"cannot have dynamic type\" */: // only an error in strict mode (issue 8561)\n+\t}\n+}\n+\n+func typeswitch3(x interface{}) {\n+\tswitch x.(type) {\n+\tcase int:\n+\tcase float64:\n+\tcase int /* ERROR duplicate case */ :\n+\t}\n+\n+\tswitch x.(type) {\n+\tcase nil:\n+\tcase int:\n+\tcase nil /* ERROR duplicate case */ , nil /* ERROR duplicate case */ :\n+\t}\n+\n+\ttype F func(int)\n+\tswitch x.(type) {\n+\tcase nil:\n+\tcase int, func(int):\n+\tcase float32, func /* ERROR duplicate case */ (x int):\n+\tcase F:\n+\t}\n+}\n+\n+func fors1() {\n+\tfor {}\n+\tvar i string\n+\t_ = i\n+\tfor i := 0; i < 10; i++ {}\n+\tfor i := 0; i < 10; j /* ERROR cannot declare */ := 0 {}\n+}\n+\n+func rangeloops1() {\n+\tvar (\n+\t\tx int\n+\t\ta [10]float32\n+\t\tb []string\n+\t\tp *[10]complex128\n+\t\tpp **[10]complex128\n+\t\ts string\n+\t\tm map[int]bool\n+\t\tc chan int\n+\t\tsc chan<- int\n+\t\trc <-chan int\n+\t)\n+\n+\tfor range x /* ERROR \"cannot range over\" */ {}\n+\tfor _ = range x /* ERROR \"cannot range over\" */ {}\n+\tfor i := range x /* ERROR \"cannot range over\" */ {}\n+\n+\tfor range a {}\n+\tfor i := range a {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t}\n+\tfor i, x := range a {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t\tvar xx float64\n+\t\txx = x /* ERROR \"cannot use .* in assignment\" */\n+\t\t_ = xx\n+\t}\n+\tvar ii int\n+\tvar xx float32\n+\tfor ii, xx = range a {}\n+\t_, _ = ii, xx\n+\n+\tfor range b {}\n+\tfor i := range b {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t}\n+\tfor i, x := range b {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t\tvar xx string\n+\t\txx = x\n+\t\t_ = xx\n+\t}\n+\n+\tfor range s {}\n+\tfor i := range s {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t}\n+\tfor i, x := range s {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t\tvar xx rune\n+\t\txx = x\n+\t\t_ = xx\n+\t}\n+\n+\tfor range p {}\n+\tfor _, x := range p {\n+\t\tvar xx complex128\n+\t\txx = x\n+\t\t_ = xx\n+\t}\n+\n+\tfor range pp /* ERROR \"cannot range over\" */ {}\n+\tfor _, x := range pp /* ERROR \"cannot range over\" */ {}\n+\n+\tfor range m {}\n+\tfor k := range m {\n+\t\tvar kk int32\n+\t\tkk = k /* ERROR \"cannot use .* in assignment\" */\n+\t\t_ = kk\n+\t}\n+\tfor k, v := range m {\n+\t\tvar kk int\n+\t\tkk = k\n+\t\t_ = kk\n+\t\tif v {}\n+\t}\n+\n+\tfor range c {}\n+\tfor _, _ /* ERROR \"only one iteration variable\" */ = range c {}\n+\tfor e := range c {\n+\t\tvar ee int\n+\t\tee = e\n+\t\t_ = ee\n+\t}\n+\tfor _ = range sc /* ERROR \"cannot range over send-only channel\" */ {}\n+\tfor _ = range rc {}\n+\n+\t// constant strings\n+\tconst cs = \"foo\"\n+\tfor range cs {}\n+\tfor range \"\" {}\n+\tfor i, x := range cs { _, _ = i, x }\n+\tfor i, x := range \"\" {\n+\t\tvar ii int\n+\t\tii = i\n+\t\t_ = ii\n+\t\tvar xx rune\n+\t\txx = x\n+\t\t_ = xx\n+\t}\n+}\n+\n+func rangeloops2() {\n+\ttype I int\n+\ttype R rune\n+\n+\tvar a [10]int\n+\tvar i I\n+\t_ = i\n+\tfor i /* ERROR cannot use .* in assignment */ = range a {}\n+\tfor i /* ERROR cannot use .* in assignment */ = range &a {}\n+\tfor i /* ERROR cannot use .* in assignment */ = range a[:] {}\n+\n+\tvar s string\n+\tvar r R\n+\t_ = r\n+\tfor i /* ERROR cannot use .* in assignment */ = range s {}\n+\tfor i /* ERROR cannot use .* in assignment */ = range \"foo\" {}\n+\tfor _, r /* ERROR cannot use .* in assignment */ = range s {}\n+\tfor _, r /* ERROR cannot use .* in assignment */ = range \"foo\" {}\n+}\n+\n+func issue6766b() {\n+\tfor _ := /* ERROR no new variables */ range \"\" {}\n+\tfor a, a /* ERROR redeclared */ := range \"\" { _ = a }\n+\tvar a int\n+\t_ = a\n+\tfor a, a /* ERROR redeclared */ := range []int{1, 2, 3} { _ = a }\n+}\n+\n+// Test that despite errors in the range clause,\n+// the loop body is still type-checked (and thus\n+// errors reported).\n+func issue10148() {\n+\tfor y /* ERROR declared but not used */ := range \"\" {\n+\t\t_ = \"\" /* ERROR cannot convert */ + 1\n+\t}\n+\tfor range 1 /* ERROR cannot range over 1 */ {\n+\t\t_ = \"\" /* ERROR cannot convert */ + 1\n+\t}\n+\tfor y := range 1 /* ERROR cannot range over 1 */ {\n+\t\t_ = \"\" /* ERROR cannot convert */ + 1\n+\t}\n+}\n+\n+func labels0() {\n+\tgoto L0\n+\tgoto L1\n+\tL0:\n+\tL1:\n+\tL1 /* ERROR \"already declared\" */ :\n+\tif true {\n+\t\tgoto L2\n+\t\tL2:\n+\t\tL0 /* ERROR \"already declared\" */ :\n+\t}\n+\t_ = func() {\n+\t\tgoto L0\n+\t\tgoto L1\n+\t\tgoto L2\n+\t\tL0:\n+\t\tL1:\n+\t\tL2:\n+\t}\n+}\n+\n+func expression_statements(ch chan int) {\n+\texpression_statements(ch)\n+\t<-ch\n+\tprintln()\n+\n+\t0 /* ERROR \"not used\" */\n+\t1 /* ERROR \"not used\" */ +2\n+\tcap /* ERROR \"not used\" */ (ch)\n+\tprintln /* ERROR \"must be called\" */\n+}"}, {"sha": "24ad6ebdf18633e6f819fa1bbd6eb1544eef78d2", "filename": "libgo/go/go/types/testdata/stmt1.src", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt1.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,241 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// terminating statements\n+\n+package stmt1\n+\n+func _() {}\n+\n+func _() int {} /* ERROR \"missing return\" */\n+\n+func _() int { panic(0) }\n+func _() int { (panic(0)) }\n+\n+// block statements\n+func _(x, y int) (z int) {\n+\t{\n+\t\treturn\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\t{\n+\t\treturn; ; ; // trailing empty statements are ok\n+\t}\n+\t; ; ;\n+}\n+\n+func _(x, y int) (z int) {\n+\t{\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\t{\n+\t\t; ; ;\n+\t}\n+\t; ; ;\n+} /* ERROR \"missing return\" */\n+\n+// if statements\n+func _(x, y int) (z int) {\n+\tif x < y { return }\n+\treturn 1\n+}\n+\n+func _(x, y int) (z int) {\n+\tif x < y { return; ; ; ; }\n+\treturn 1\n+}\n+\n+func _(x, y int) (z int) {\n+\tif x < y { return }\n+\treturn 1; ;\n+}\n+\n+func _(x, y int) (z int) {\n+\tif x < y { return }\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\tif x < y {\n+\t} else { return 1\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\tif x < y { return\n+\t} else { return\n+\t}\n+}\n+\n+// for statements\n+func _(x, y int) (z int) {\n+\tfor x < y {\n+\t\treturn\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\tfor {\n+\t\treturn\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\tfor {\n+\t\treturn; ; ; ;\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\tfor {\n+\t\treturn\n+\t\tbreak\n+\t}\n+\t; ; ;\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\tfor {\n+\t\tfor { break }\n+\t\treturn\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\tfor {\n+\t\tfor { break }\n+\t\treturn ; ;\n+\t}\n+\t;\n+}\n+\n+func _(x, y int) (z int) {\n+L:\tfor {\n+\t\tfor { break L }\n+\t\treturn\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+// switch statements\n+func _(x, y int) (z int) {\n+\tswitch x {\n+\tcase 0: return\n+\tdefault: return\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\tswitch x {\n+\tcase 0: return;\n+\tdefault: return; ; ;\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\tswitch x {\n+\tcase 0: return\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\tswitch x {\n+\tcase 0: return\n+\tcase 1: break\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(x, y int) (z int) {\n+\tswitch x {\n+\tcase 0: return\n+\tdefault:\n+\t\tswitch y {\n+\t\tcase 0: break\n+\t\t}\n+\t\tpanic(0)\n+\t}\n+}\n+\n+func _(x, y int) (z int) {\n+\tswitch x {\n+\tcase 0: return\n+\tdefault:\n+\t\tswitch y {\n+\t\tcase 0: break\n+\t\t}\n+\t\tpanic(0); ; ;\n+\t}\n+\t;\n+}\n+\n+func _(x, y int) (z int) {\n+L:\tswitch x {\n+\tcase 0: return\n+\tdefault:\n+\t\tswitch y {\n+\t\tcase 0: break L\n+\t\t}\n+\t\tpanic(0)\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+// select statements\n+func _(ch chan int) (z int) {\n+\tselect {}\n+} // nice!\n+\n+func _(ch chan int) (z int) {\n+\tselect {}\n+\t; ;\n+}\n+\n+func _(ch chan int) (z int) {\n+\tselect {\n+\tdefault: break\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(ch chan int) (z int) {\n+\tselect {\n+\tcase <-ch: return\n+\tdefault: break\n+\t}\n+} /* ERROR \"missing return\" */\n+\n+func _(ch chan int) (z int) {\n+\tselect {\n+\tcase <-ch: return\n+\tdefault:\n+\t\tfor i := 0; i < 10; i++ {\n+\t\t\tbreak\n+\t\t}\n+\t\treturn\n+\t}\n+}\n+\n+func _(ch chan int) (z int) {\n+\tselect {\n+\tcase <-ch: return; ; ;\n+\tdefault:\n+\t\tfor i := 0; i < 10; i++ {\n+\t\t\tbreak\n+\t\t}\n+\t\treturn; ; ;\n+\t}\n+\t; ; ;\n+}\n+\n+func _(ch chan int) (z int) {\n+L:\tselect {\n+\tcase <-ch: return\n+\tdefault:\n+\t\tfor i := 0; i < 10; i++ {\n+\t\t\tbreak L\n+\t\t}\n+\t\treturn\n+\t}\n+\t; ; ;\n+} /* ERROR \"missing return\" */"}, {"sha": "00825371f2c7569d6959983921b6daabb0666011", "filename": "libgo/go/go/types/testdata/vardecl.src", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fvardecl.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fvardecl.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fvardecl.src?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,186 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package vardecl\n+\n+// Prerequisites.\n+import \"math\"\n+func f() {}\n+func g() (x, y int) { return }\n+var m map[string]int\n+\n+// Var decls must have a type or an initializer.\n+var _ int\n+var _, _ int\n+\n+// The first error message is produced by the parser.\n+// In a real-world scenario, the type-checker would not be run\n+// in this case and the 2nd error message would not appear.\n+var _ /* ERROR \"missing variable type\" */ /* ERROR \"missing type or init expr\" */\n+var _ /* ERROR \"missing variable type\" */ /* ERROR \"missing type or init expr\" */, _\n+var _ /* ERROR \"missing variable type\" */ /* ERROR \"missing type or init expr\" */, _, _\n+\n+// The initializer must be an expression.\n+var _ = int /* ERROR \"not an expression\" */\n+var _ = f /* ERROR \"used as value\" */ ()\n+\n+// Identifier and expression arity must match.\n+var _, _ = 1, 2\n+var _ = 1, 2 /* ERROR \"extra init expr 2\" */\n+var _, _ = 1 /* ERROR \"assignment count mismatch\" */\n+var _, _, _ /* ERROR \"missing init expr for _\" */ = 1, 2\n+\n+var _ = g /* ERROR \"2-valued g\" */ ()\n+var _, _ = g()\n+var _, _, _ = g /* ERROR \"assignment count mismatch\" */ ()\n+\n+var _ = m[\"foo\"]\n+var _, _ = m[\"foo\"]\n+var _, _, _ = m  /* ERROR \"assignment count mismatch\" */ [\"foo\"]\n+\n+var _, _ int = 1, 2\n+var _ int = 1, 2 /* ERROR \"extra init expr 2\" */\n+var _, _ int = 1 /* ERROR \"assignment count mismatch\" */\n+var _, _, _ /* ERROR \"missing init expr for _\" */ int = 1, 2\n+\n+var (\n+\t_, _ = 1, 2\n+\t_ = 1, 2 /* ERROR \"extra init expr 2\" */\n+\t_, _ = 1 /* ERROR \"assignment count mismatch\" */\n+\t_, _, _ /* ERROR \"missing init expr for _\" */ = 1, 2\n+\n+\t_ = g /* ERROR \"2-valued g\" */ ()\n+\t_, _ = g()\n+\t_, _, _ = g /* ERROR \"assignment count mismatch\" */ ()\n+\n+\t_ = m[\"foo\"]\n+\t_, _ = m[\"foo\"]\n+\t_, _, _ = m /* ERROR \"assignment count mismatch\" */ [\"foo\"]\n+\n+\t_, _ int = 1, 2\n+\t_ int = 1, 2 /* ERROR \"extra init expr 2\" */\n+\t_, _ int = 1 /* ERROR \"assignment count mismatch\" */\n+\t_, _, _ /* ERROR \"missing init expr for _\" */ int = 1, 2\n+)\n+\n+// Variables declared in function bodies must be 'used'.\n+type T struct{}\n+func (r T) _(a, b, c int) (u, v, w int) {\n+\tvar x1 /* ERROR \"declared but not used\" */ int\n+\tvar x2 /* ERROR \"declared but not used\" */ int\n+\tx1 = 1\n+\t(x2) = 2\n+\n+\ty1 /* ERROR \"declared but not used\" */ := 1\n+\ty2 /* ERROR \"declared but not used\" */ := 2\n+\ty1 = 1\n+\t(y1) = 2\n+\n+\t{\n+\t\tvar x1 /* ERROR \"declared but not used\" */ int\n+\t\tvar x2 /* ERROR \"declared but not used\" */ int\n+\t\tx1 = 1\n+\t\t(x2) = 2\n+\n+\t\ty1 /* ERROR \"declared but not used\" */ := 1\n+\t\ty2 /* ERROR \"declared but not used\" */ := 2\n+\t\ty1 = 1\n+\t\t(y1) = 2\n+\t}\n+\n+\tif x /* ERROR \"declared but not used\" */ := 0; a < b {}\n+\n+\tswitch x /* ERROR \"declared but not used\" */, y := 0, 1; a {\n+\tcase 0:\n+\t\t_ = y\n+\tcase 1:\n+\t\tx /* ERROR \"declared but not used\" */ := 0\n+\t}\n+\n+\tvar t interface{}\n+\tswitch t /* ERROR \"declared but not used\" */ := t.(type) {}\n+\n+\tswitch t /* ERROR \"declared but not used\" */ := t.(type) {\n+\tcase int:\n+\t}\n+\n+\tswitch t /* ERROR \"declared but not used\" */ := t.(type) {\n+\tcase int:\n+\tcase float32, complex64:\n+\t\tt = nil\n+\t}\n+\n+\tswitch t := t.(type) {\n+\tcase int:\n+\tcase float32, complex64:\n+\t\t_ = t\n+\t}\n+\n+\tswitch t := t.(type) {\n+\tcase int:\n+\tcase float32:\n+\tcase string:\n+\t\t_ = func() string {\n+\t\t\treturn t\n+\t\t}\n+\t}\n+\n+\tswitch t := t; t /* ERROR \"declared but not used\" */ := t.(type) {}\n+\n+\tvar z1 /* ERROR \"declared but not used\" */ int\n+\tvar z2 int\n+\t_ = func(a, b, c int) (u, v, w int) {\n+\t\tz1 = a\n+\t\t(z1) = b\n+\t\ta = z2\n+\t\treturn\n+\t}\n+\n+\tvar s []int\n+\tvar i /* ERROR \"declared but not used\" */ , j int\n+\tfor i, j = range s {\n+\t\t_ = j\n+\t}\n+\n+\tfor i, j /* ERROR \"declared but not used\" */ := range s {\n+\t\t_ = func() int {\n+\t\t\treturn i\n+\t\t}\n+\t}\n+\treturn\n+}\n+\n+// Invalid (unused) expressions must not lead to spurious \"declared but not used errors\"\n+func _() {\n+\tvar a, b, c int\n+\tvar x, y int\n+\tx, y = a /* ERROR assignment count mismatch */ , b, c\n+\t_ = x\n+\t_ = y\n+}\n+\n+func _() {\n+\tvar x int\n+\treturn x /* ERROR no result values expected */\n+\treturn math /* ERROR no result values expected */ .Sin(0)\n+}\n+\n+func _() int {\n+\tvar x, y int\n+\treturn /* ERROR wrong number of return values */ x, y\n+}\n+\n+// Short variable declarations must declare at least one new non-blank variable.\n+func _() {\n+\t_ := /* ERROR no new variables */ 0\n+\t_, a := 0, 1\n+\t_, a := /* ERROR no new variables */ 0, 1\n+\t_, a, b := 0, 1, 2\n+\t_, _, _ := /* ERROR no new variables */ 0, 1, 2\n+\n+\t_ = a\n+\t_ = b\n+}\n+\n+// TODO(gri) consolidate other var decl checks in this file\n\\ No newline at end of file"}, {"sha": "ba746ffb2f5e834db9e061b213a9c8fb38a80707", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn0g01.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g01.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g01.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g01.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "c5347a414982e1ad5a65fee4962cdb02c1d6dcc0", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn0g01.sng", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g01.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g01.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g01.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,44 @@\n+#SNG: from ftbbn0g01.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using grayscale;\n+}\n+bKGD {gray: 0;}\n+tRNS {\n+    gray: 0;\n+}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+00ffffffffffffff000000000000000000000000000000000000000000000000\n+00ffffffffffffffff0000000000000000000000000000000000000000000000\n+00ffffffffffffffffff00000000000000000000000000000000000000000000\n+00ffffff0000ffffffff00000000000000000000000000000000000000000000\n+00ffffff000000ffffff00000000000000000000000000000000000000000000\n+00ffffff000000ffffff00ffffff000000ffffff000000000000000000000000\n+00ffffff00ffffffffff00ffffff000000ffffff000000000000000000000000\n+00ffffffffffffffffff00ffffffff0000ffffff000000000000000000000000\n+00ffffffffffffffff0000ffffffff0000ffffff000000000000000000000000\n+00ffffffffff0000000000ffffffffff00ffffff000000000000000000000000\n+00ffffff00000000000000ffffffffff00ffffff0000000000ffffffffff0000\n+00ffffff00000000000000ffffffffffffffffff000000ffffffffffffffff00\n+00ffffff00000000000000ffffffffffffffffff000000ffffffffffffffff00\n+00ffffff00000000000000ffffffffffffffffff0000ffffffffff00ffffff00\n+0000000000000000000000ffffff00ffffffffff0000ffffffff000000000000\n+0000000000000000000000ffffff00ffffffffff0000ffffff00000000000000\n+0000000000000000000000ffffff0000ffffffff0000ffffff0000ffffff0000\n+0000000000000000000000ffffff000000ffffff0000ffffff00ffffffffff00\n+0000000000000000000000ffffff000000ffffff0000ffffff0000ffffffff00\n+00000000000000000000000000000000000000000000ffffff00000000ffff00\n+00000000000000000000000000000000000000000000ffffffff0000ffffff00\n+00000000000000000000000000000000000000000000ffffffffffffffffff00\n+0000000000000000000000000000000000000000000000ffffffffffffffff00\n+000000000000000000000000000000000000000000000000ffffffffffff0000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "3d83bd6900baf4866450babb403ea2b0cbefc02e", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn0g02.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g02.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g02.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g02.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "9686a6a2eefcb902c871e8d8308fd81911623715", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn0g02.sng", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g02.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g02.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g02.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,45 @@\n+#SNG: from ftbbn0g02.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using grayscale;\n+}\n+gAMA {0.45455}\n+bKGD {gray: 0;}\n+tRNS {\n+    gray: 0;\n+}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+00aaaaaaaaaaaaaa000000000000000000000000000000000000000000000000\n+00aaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000\n+00aaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000\n+00aaaaaa0000aaaaaaaa00000000000000000000000000000000000000000000\n+00aaaaaa000000aaaaaa00000000000000000000000000000000000000000000\n+00aaaaaa000000aaaaaa00aaaaaa000000aaaaaa000000000000000000000000\n+00aaaaaa00aaaaaaaaaa00aaaaaa000000aaaaaa000000000000000000000000\n+00aaaaaaaaaaaaaaaaaa00aaaaaaaa0000aaaaaa000000000000000000000000\n+00aaaaaaaaaaaaaaaa0000aaaaaaaa0000aaaaaa000000000000000000000000\n+00aaaaaaaaaa0000000000aaaaaaaaaa00aaaaaa000000000000000000000000\n+00aaaaaa00000000000000aaaaaaaaaa00aaaaaa0000000000aaaaaaaaaa0000\n+00aaaaaa00000000000000aaaaaaaaaaaaaaaaaa000000aaaaaaaaaaaaaaaa00\n+00aaaaaa00000000000000aaaaaaaaaaaaaaaaaa000000aaaaaaaaaaaaaaaa00\n+00aaaaaa00000000000000aaaaaaaaaaaaaaaaaa0000aaaaaaaaaa00aaaaaa00\n+0000000000000000000000aaaaaa00aaaaaaaaaa0000aaaaaaaa000000000000\n+0000000000000000000000aaaaaa00aaaaaaaaaa0000aaaaaa00000000000000\n+0000000000000000000000aaaaaa0000aaaaaaaa0000aaaaaa0000aaaaaa0000\n+0000000000000000000000aaaaaa000000aaaaaa0000aaaaaa00aaaaaaaaaa00\n+0000000000000000000000aaaaaa000000aaaaaa0000aaaaaa0000aaaaaaaa00\n+00000000000000000000000000000000000000000000aaaaaa00000000aaaa00\n+00000000000000000000000000000000000000000000aaaaaaaa0000aaaaaa00\n+00000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaa00\n+0000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaa00\n+000000000000000000000000000000000000000000000000aaaaaaaaaaaa0000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "39a7050d27af28f3bcb7bfc6b071cae91f8c091b", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn0g04.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g04.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g04.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g04.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "518ba6c2ca9b187aeb8b1079938c2bfd848da8c9", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn0g04.sng", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g04.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g04.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn0g04.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,45 @@\n+#SNG: from ftbbn0g04.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using grayscale;\n+}\n+gAMA {1.0000}\n+bKGD {gray: 0;}\n+tRNS {\n+    gray: 255;\n+}\n+IMAGE {\n+    pixels hex\n+ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n+ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n+ffffffffffffffffffffffffffffddcceeffffffffffffffffffffffffffffff\n+ffffffffffffffffffffffeebb776655446699ddffffffffffffffffffffffff\n+ffffffffffffffffeebb886666553322222222335599ccffffffffffffffffff\n+ffffffffffeecc997766554433333322334422112222336699ccffffffffffff\n+ffffffcc997777664433333333444433334444332233335566777799cceeffff\n+ffffcc777777775533333344556655444444444444332266777777776699ffff\n+ffffdd8888887766444466777777777766555555445566777777775555bbffff\n+ffffee8888888888777777777777777777777777777777777766555544eeffff\n+ffffff8866667788998888777777777777777777777777665555444455ffffff\n+ffffff8866778888999999998877777777777777777755331111334488ffffff\n+ffffff99667788889999999999998877777777776655221111111133aaffffff\n+ffffff99666688888899997777999999887766555533221111001122ddffffff\n+ffffffaa666677888899886666669999997755554422111122111144ffffffff\n+ffffffbb666666888888777755669999997755552222113344223377ffffffff\n+ffffffcc666655778877777755779999996655332211334422111199ffffffff\n+ffffffdd6666446688557777557799999966552222113311111111ccffffffff\n+ffffffee6666555588666677557799999966442211222211111122eeffffffff\n+ffffffff6666555577775577557799999955332211332211111155ffffffffff\n+ffffffff6666665566775577557799999955331111443311111188ffffffffff\n+ffffffff88666655667755665577999988552211114433111111ccffffffffff\n+ffffffffffaa66666666666655779999885522111133111122bbffffffffffff\n+ffffffffffffcc6666666666557788998855221111111122ccffffffffffffff\n+ffffffffffffffee886666665577888877553311111133ddffffffffffffffff\n+ffffffffffffffffffaa666655778888775544221144eeffffffffffffffffff\n+ffffffffffffffffffffcc77557788886655553377ffffffffffffffffffffff\n+ffffffffffffffffffffffee9988888866555599ffffffffffffffffffffffff\n+ffffffffffffffffffffffffffbb88886655bbffffffffffffffffffffffffff\n+ffffffffffffffffffffffffffffdd8866ccffffffffffffffffffffffffffff\n+ffffffffffffffffffffffffffffffeeddffffffffffffffffffffffffffffff\n+ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n+}"}, {"sha": "dd3168e5c864a81f3284856f2b00fd1e52eb312e", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn2c16.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn2c16.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn2c16.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn2c16.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "76989fa9ee27373c053a79c5dbdd853562f11e0f", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn2c16.sng", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn2c16.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn2c16.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn2c16.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,45 @@\n+#SNG: from ftbbn2c16.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 16;\n+    using color;\n+}\n+gAMA {1.0000}\n+bKGD {red: 0;  green: 0;  blue: 65535;}\n+tRNS {\n+    red: 65535; green: 65535; blue: 65535;\n+}\n+IMAGE {\n+    pixels hex\n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff e3e3e3e3e3e3 c9c9c9c9c9c9 f1f1f1f1f1f1 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff e8e8e8e8e8e8 b5b5b5b5b5b5 7e7e7e7e7e7e 656565656565 6e6e52525252 7e7e2e2e2e2e a6a643434343 c7c790909090 ebebdddddddd ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff eeeeeeeeeeee bfbfbfbfbfbf 898989898989 676767676767 6b6b5d5d5d5d 7a7a39393939 8a8a12121212 8d8d00010000 858500000000 777700000000 848400000000 9a9a01010101 a2a22d2d2d2d bfbf7d7d7d7d ddddd0d0d0d0 fcfcfcfcfcfc ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff f2f2f2f2f2f2 c4c4c4c4c4c4 959595959595 727272727272 6f6f6b6b6b6b 777744444444 87871e1e1e1e 959501010101 9f9f00010000 919100000000 808000010000 72720c0c0c0c 61612d2d2d2d 53530e0e0e0e 505000000000 595900010000 858500000000 929206060606 7a7a66666666 a0a0a0a0a0a0 cfcfcfcfcfcf f8f8f8f8f8f8 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff f7f7f7f7f7f7 cacacacacaca 9a9a9a9a9a9a 767676767676 737373737373 7c7c5d5d5d5d 87872e2e2e2e 939307070707 9e9e00010000 a9a900000000 b0b000000000 c9c900000000 cfcf00000000 b9b900010000 a2a201010101 8c8c19191919 85852a2a2a2a 7f7f13131313 818100010000 969600000000 8f8f00000000 6b6b53535353 6e6e6e6e6e6e 737373737373 767676767676 9b9b9b9b9b9b c4c4c4c4c4c4 eeeeeeeeeeee ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff cccccccccccc 7f7f7f7f7f7f 767676767676 757575757575 757575757575 96962f2f2f2f b8b800010000 b4b400000000 b6b600010000 adad0c0c0c0c 94943a3a3a3a 929250505050 b9b923232323 d6d602020202 e2e200010000 efef00000000 e7e700000000 dada00000000 cfcf00010000 baba00000000 7d7d01010101 6f6f6b6b6b6b 757575757575 757575757575 757575757575 757575757575 6a6a6a6a6a6a 9a9a9a9a9a9a ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff dcdcdcdcdcdc 858585858585 888888888888 848484848484 7b7b7b7b7b7b 858554545454 b7b713131313 a9a91d1d1d1d 8d8d4f4f4f4f 787875757575 777777777777 777777777777 777777777777 81816b6b6b6b aaaa41414141 d6d620202020 ecec10101010 e9e90c0c0c0c d0d012121212 a5a528282828 7b7b58585858 777777777777 777777777777 777777777777 707070707070 5c5c5c5c5c5c 525252525252 bdbdbdbdbdbd ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff eaeaeaeaeaea 848484848484 818181818181 858588888585 8e8e8e8e8e8e 898989898989 7f7f7f7f7f7f 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 767676767676 636363636363 545454545454 505050505050 4c4c4c4c4c4c e6e6e6e6e6e6 ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff f8f8f8f8f8f8 7f7f84847f7f 252597972525 0404a5a50404 3939a4a43939 8b8b94948b8b 939393939393 8f8f8f8f8f8f 838383838383 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7a7a7a7a7a7a 7a7a7a7a7a7a 797979797979 6a6a6a6a6a6a 575757575757 505050505050 4c4c4c4c4c4c 494949494949 595959595959 ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff 8a8a8a8a8a8a 0101b3b30101 0000c6c60001 0000f2f20000 5959b6b65959 929292929292 959595959595 979797979797 949494949494 878787878787 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 717171717171 5a5a5a5a6060 282828288585 040404049393 0c0c0c0c7878 282828285858 464646464a4a 828282828282 ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff 929292929292 0c0cabab0c0c 0000bdbd0001 0000f4f40000 2020dddd2020 919191919191 949494949494 979797979797 999999999999 9b9b9b9b9b9b 999999999999 8b8b8b8b8b8b 7f7f7f7f7f7f 7e7e7e7e7e7e 7e7e7e7e7e7e 7d7d7d7d7d7d 777777777777 626262626262 535353536060 12121212bebe 00010000cccc 000000009292 000000016969 000000006767 2a2a2a2a5555 acacacacacac ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff 949494949494 1616a1a11616 0000b4b40001 0000e2e20000 0000f4f40000 7676a2a27676 939393939393 8d8d97978d8d 46469e9e4646 4646a7a74646 8e8e9e9e8e8e 9e9e9e9e9e9e 9c9c9c9c9c9c 8e8e8e8e8e8e 7e7e7e7e7e7e 6a6a6a6a6a6a 5a5a5a5a5a5a 575757575a5a 18181818cdcd 00010000f0f0 00000000a0a0 020202026060 010101013d3d 000100006161 1d1d1d1d5959 d6d6d6d6d6d6 ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff a4a4a4a4a4a4 212198982121 0000aaaa0001 0000c8c80000 0000f4f40000 3b3bcaca3b3b 929292929292 4a4aacac4a4a 0001bcbc0000 0000a9a90000 2f2f9a9a2f2f 9d9d9d9d9d9d 9f9f9f9f9f9f a0a0a0a0a0a0 7a7a7a7a7a7a 5a5a5a5a5a5a 595959595959 31313131a1a1 00010000ffff 00000000c6c6 030303035b5b 191919192424 0c0c0c0c1515 0c0c0c0c5555 3b3b3b3b5353 fbfbfbfbfbfb ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff b6b6b6b6b6b6 2b2b8f8f2b2b 0000a2a20001 0000adad0000 0000ebeb0000 0707eded0707 898995958989 4343a7a74343 0001c9c90000 000099990000 383895953838 9c9c9c9c9c9c 9e9e9e9e9e9e 9f9f9f9f9f9f 747474747474 595959595959 505050506767 05050505f5f5 00010000f0f0 030303037070 383838384646 484848484848 161616163939 2b2b2b2b5555 727272727272 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff c7c7c7c7c7c7 343486863434 0000b1b10001 00008d8d0000 0000d2d20000 0000f3f30000 4c4c9b9b4c4c 3b3b9e9e3b3b 0001c7c70000 000098980000 3d3d94943d3d 9b9b9b9b9b9b 9d9d9d9d9d9d 9e9e9e9e9e9e 6e6e6e6e6e6e 595959595959 2b2b2b2badad 00000001ffff 00000000a6a6 252525255959 434343434f4f 161616167e7e 000000019f9f 010101018e8e 9c9c9c9ca1a1 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff d8d8d8d8d8d8 3e3e7d7d3e3e 0000b1b10001 00007b7b0000 0000b8b80000 0000f1f10000 17178b8b1717 3b3b9c9c3b3b 0001c6c60000 000097970000 3d3d93933d3d 9a9a9a9a9a9a 9b9b9b9b9b9b 9d9d9d9d9d9d 676767676767 575757575959 09090909eeee 00000001f0f0 040404046b6b 333333335a5a 070707079090 000000009e9e 000000017c7c 0d0d0d0d5d5d c7c7c7c7c7c7 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff eaeaeaeaeaea 474774744747 0000adad0001 000085850000 090998980909 0000dcdc0000 0000a7a70000 232398982323 0001c3c30000 000096960000 3f3f92923f3f 989898989898 9a9a9a9a9a9a 9c9c9c9c9c9c 616161616161 424242427f7f 00010000ffff 00000001b9b9 1a1a1a1a5d5d 161616164949 000000007b7b 000000006b6b 000000016b6b 1c1c1c1c5656 f4f4f4f4f4f4 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff fcfcfcfcfcfc 50506c6c5050 0000a9a90001 000095950000 2d2d77772d2d 0000c1c10000 0000c5c50000 010193930101 0001c1c10000 000090900000 4b4b91914b4b 979797979797 999999999999 9a9a9a9a9a9a 5a5a5a5a5a5a 2b2b2b2ba4a4 00010000f6f6 000000018686 2f2f2f2f5353 191919193030 020202026363 000000007373 000000019b9b 4d4d4d4d7070 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff 686873736868 0000a4a40001 0000a4a40000 3e3e65653e3e 1414a5a51414 0000d4d40000 00008b8b0001 0000bfbf0000 00008e8e0000 4a4a90904a4a 959595959595 979797979797 969696969696 575757575757 1a1a1a1ab5b5 00010000dede 000000016868 3f3f3f3f4b4b 2b2b2b2b2b2b 0c0c0c0c6d6d 00000000b3b3 000000016b6b 868686869292 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff 8c8c8c8c8c8c 05059e9e0505 0001b0b00000 343466663434 404085854040 0000caca0000 000097970001 0000bcbc0000 00008c8c0000 49498e8e4949 939393939393 959595959595 8f8f8f8f8f8f 565656565656 0f0f0f0fb7b7 00010000b9b9 030303036666 474747474747 2f2f2f2f6464 00010000a2a2 000000009d9d 090909095858 c5c5c5c5c5c5 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff fafafafafafa 9090b0b09090 343485853434 616164646161 63636a6a6363 0606afaf0606 0000aeae0001 0000b9b90000 00008b8b0000 53538d8d5353 919191919191 939393939393 898989898989 555555555555 0a0a0a0aa8a8 000100009d9d 070707076363 343434345c5c 040404049b9b 00010000b1b1 1a1a1a1a4d4d b5b5b5b5bbbb ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff d0d0d0d0d0d0 6d6d6d6d6d6d 656565656565 2d2d8f8f2d2d 0000b2b20001 0000b6b60000 000089890000 55558b8b5555 8f8f8f8f8f8f 919191919191 818181818181 555555555555 151515157e7e 000100008484 010101016565 010101018484 000100009191 1c1c1c1c6e6e cecececed0d0 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ecececececec 868686868686 585870705858 0000afaf0001 0000b3b30000 000088880000 535389895353 8d8d8d8d8d8d 8f8f8f8f8f8f 7a7a7a7a7a7a 545454545454 2c2c2c2c4949 020202026b6b 000000016464 000000006363 292929297474 dfdfdfdfe5e5 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff fcfcfcfcfcfc aaaaaaaaaaaa 212198982121 0001b0b00000 000086860000 575787875757 8b8b8b8b8b8b 8d8d8d8d8d8d 747474747474 535353535353 3d3d3d3d3d3d 1a1a1a1a2323 0d0d0d0d4343 474747477272 ededededefef ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff d1d1d6d6d1d1 38389b9b3838 2d2d77772d2d 7d7d81817d7d 888888888888 8b8b8b8b8b8b 6d6d6d6d6d6d 525252525252 4f4f4f4f4f4f 373737373737 777777777777 fafafafafafa ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff efefefefefef a0a0a0a0a0a0 838383838383 868686868686 888888888888 676767676767 515151515151 505050505050 a0a0a0a0a0a0 fdfdfdfdfdfd ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff fefefefefefe c0c0c0c0c0c0 858585858585 868686868686 616161616161 525252525252 b7b7b7b7b7b7 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff dededededede 909090909090 656565656565 cccccccccccc ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff f5f5f5f5f5f5 e3e3e3e3e3e3 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+}"}, {"sha": "0ede3574db0fd51fa9266fb1cb91df3888dc8dbf", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn3p08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn3p08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn3p08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn3p08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "429d99b417cc410b9d22b7047713288e4aea2d9e", "filename": "libgo/go/image/png/testdata/pngsuite/ftbbn3p08.sng", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn3p08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn3p08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbbn3p08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,292 @@\n+#SNG: from ftbbn3p08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    (255,255,255)     # rgb = (0xff,0xff,0xff) grey100\n+    (128, 86, 86)     # rgb = (0x80,0x56,0x56)\n+    (181,181,184)     # rgb = (0xb5,0xb5,0xb8)\n+    (168, 66, 66)     # rgb = (0xa8,0x42,0x42)\n+    (159,159,159)     # rgb = (0x9f,0x9f,0x9f)\n+    (177, 32, 32)     # rgb = (0xb1,0x20,0x20)\n+    (139, 21, 21)     # rgb = (0x8b,0x15,0x15)\n+    (157,157,157)     # rgb = (0x9d,0x9d,0x9d)\n+    ( 27, 27, 89)     # rgb = (0x1b,0x1b,0x59)\n+    (155,155,155)     # rgb = (0x9b,0x9b,0x9b)\n+    (  0,  0,132)     # rgb = (0x00,0x00,0x84)\n+    (153,153,153)     # rgb = (0x99,0x99,0x99) grey60\n+    (143,167,143)     # rgb = (0x8f,0xa7,0x8f)\n+    (151,151,151)     # rgb = (0x97,0x97,0x97)\n+    (149,149,149)     # rgb = (0x95,0x95,0x95)\n+    (147,147,147)     # rgb = (0x93,0x93,0x93)\n+    ( 41, 41, 86)     # rgb = (0x29,0x29,0x56)\n+    (145,145,145)     # rgb = (0x91,0x91,0x91) grey57\n+    (  0,  0,155)     # rgb = (0x00,0x00,0x9b)\n+    (143,143,143)     # rgb = (0x8f,0x8f,0x8f) grey56\n+    (139,149,139)     # rgb = (0x8b,0x95,0x8b)\n+    ( 46, 46,167)     # rgb = (0x2e,0x2e,0xa7)\n+    (141,141,141)     # rgb = (0x8d,0x8d,0x8d)\n+    (128,  0,  0)     # rgb = (0x80,0x00,0x00)\n+    (139,139,139)     # rgb = (0x8b,0x8b,0x8b)\n+    (185,  0,  0)     # rgb = (0xb9,0x00,0x00)\n+    (137,137,137)     # rgb = (0x89,0x89,0x89)\n+    ( 12, 12,213)     # rgb = (0x0c,0x0c,0xd5)\n+    (120,117,117)     # rgb = (0x78,0x75,0x75)\n+    (135,135,135)     # rgb = (0x87,0x87,0x87) grey53\n+    (  0,  0,178)     # rgb = (0x00,0x00,0xb2)\n+    (133,133,133)     # rgb = (0x85,0x85,0x85) grey52\n+    (165,  0,  0)     # rgb = (0xa5,0x00,0x00)\n+    (222,  0,  0)     # rgb = (0xde,0x00,0x00)\n+    (129,129,129)     # rgb = (0x81,0x81,0x81)\n+    (127,127,127)     # rgb = (0x7f,0x7f,0x7f) grey50\n+    (  0,  0,158)     # rgb = (0x00,0x00,0x9e)\n+    (125,125,125)     # rgb = (0x7d,0x7d,0x7d) grey49\n+    (  0,  0,201)     # rgb = (0x00,0x00,0xc9)\n+    (123,123,123)     # rgb = (0x7b,0x7b,0x7b)\n+    (121,121,121)     # rgb = (0x79,0x79,0x79)\n+    ( 55, 55, 86)     # rgb = (0x37,0x37,0x56)\n+    (119,119,119)     # rgb = (0x77,0x77,0x77)\n+    (117,117,117)     # rgb = (0x75,0x75,0x75) grey46\n+    (115,115,115)     # rgb = (0x73,0x73,0x73) grey45\n+    ( 72,169, 72)     # rgb = (0x48,0xa9,0x48)\n+    (142,  0,  0)     # rgb = (0x8e,0x00,0x00)\n+    (  2,  2,100)     # rgb = (0x02,0x02,0x64)\n+    (  0,  0, 98)     # rgb = (0x00,0x00,0x62)\n+    ( 86,137, 86)     # rgb = (0x56,0x89,0x56)\n+    ( 40, 40,124)     # rgb = (0x28,0x28,0x7c)\n+    ( 83,139, 83)     # rgb = (0x53,0x8b,0x53)\n+    (137,137,143)     # rgb = (0x89,0x89,0x8f)\n+    (103,103,103)     # rgb = (0x67,0x67,0x67)\n+    (101,101,101)     # rgb = (0x65,0x65,0x65)\n+    ( 93,109, 93)     # rgb = (0x5d,0x6d,0x5d)\n+    ( 19,229, 19)     # rgb = (0x13,0xe5,0x13)\n+    (134, 38, 38)     # rgb = (0x86,0x26,0x26)\n+    (111, 45, 45)     # rgb = (0x6f,0x2d,0x2d)\n+    ( 68,145, 68)     # rgb = (0x44,0x91,0x44)\n+    ( 97, 97, 97)     # rgb = (0x61,0x61,0x61) grey38\n+    ( 59,157, 59)     # rgb = (0x3b,0x9d,0x3b)\n+    ( 68,137, 68)     # rgb = (0x44,0x89,0x44)\n+    ( 61,147, 61)     # rgb = (0x3d,0x93,0x3d)\n+    (  0,  0,164)     # rgb = (0x00,0x00,0xa4)\n+    (  0,243,  0)     # rgb = (0x00,0xf3,0x00)\n+    (  0,241,  0)     # rgb = (0x00,0xf1,0x00)\n+    ( 89, 89, 89)     # rgb = (0x59,0x59,0x59) grey35\n+    ( 87, 87, 87)     # rgb = (0x57,0x57,0x57) grey34\n+    ( 85, 85, 85)     # rgb = (0x55,0x55,0x55)\n+    ( 83, 83, 83)     # rgb = (0x53,0x53,0x53)\n+    ( 52,133, 52)     # rgb = (0x34,0x85,0x34)\n+    ( 81, 81, 81)     # rgb = (0x51,0x51,0x51)\n+    ( 36,151, 36)     # rgb = (0x24,0x97,0x24)\n+    ( 79, 79, 79)     # rgb = (0x4f,0x4f,0x4f) grey31\n+    ( 58, 58, 65)     # rgb = (0x3a,0x3a,0x41)\n+    ( 16, 16,186)     # rgb = (0x10,0x10,0xba)\n+    (178, 15, 15)     # rgb = (0xb2,0x0f,0x0f)\n+    (  0,199,  0)     # rgb = (0x00,0xc7,0x00)\n+    (  0,197,  0)     # rgb = (0x00,0xc5,0x00)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc) grey99\n+    (  0,195,  0)     # rgb = (0x00,0xc3,0x00)\n+    (  4,  4,151)     # rgb = (0x04,0x04,0x97)\n+    (  0,193,  0)     # rgb = (0x00,0xc1,0x00)\n+    ( 45,119, 45)     # rgb = (0x2d,0x77,0x2d)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa) grey98\n+    (  0,191,  0)     # rgb = (0x00,0xbf,0x00)\n+    (  0,  0,104)     # rgb = (0x00,0x00,0x68)\n+    (  0,189,  0)     # rgb = (0x00,0xbd,0x00)\n+    (218,212,212)     # rgb = (0xda,0xd4,0xd4)\n+    ( 16, 16,123)     # rgb = (0x10,0x10,0x7b)\n+    (  9,173,  9)     # rgb = (0x09,0xad,0x09)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (  0,185,  0)     # rgb = (0x00,0xb9,0x00)\n+    (  0,183,  0)     # rgb = (0x00,0xb7,0x00)\n+    (156,156,161)     # rgb = (0x9c,0x9c,0xa1)\n+    (246,246,246)     # rgb = (0xf6,0xf6,0xf6)\n+    ( 12,161, 12)     # rgb = (0x0c,0xa1,0x0c)\n+    (  0,179,  0)     # rgb = (0x00,0xb3,0x00)\n+    (  0,177,  0)     # rgb = (0x00,0xb1,0x00)\n+    ( 16,145, 16)     # rgb = (0x10,0x91,0x10)\n+    (  0,171,  0)     # rgb = (0x00,0xab,0x00)\n+    (242,242,242)     # rgb = (0xf2,0xf2,0xf2) grey95\n+    (  0,169,  0)     # rgb = (0x00,0xa9,0x00)\n+    (  0,167,  0)     # rgb = (0x00,0xa7,0x00)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (  0,151,  0)     # rgb = (0x00,0x97,0x00)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (  0,  0,107)     # rgb = (0x00,0x00,0x6b)\n+    (  0,141,  0)     # rgb = (0x00,0x8d,0x00)\n+    (  0,139,  0)     # rgb = (0x00,0x8b,0x00) green4\n+    (  0,137,  0)     # rgb = (0x00,0x89,0x00)\n+    (  0,135,  0)     # rgb = (0x00,0x87,0x00)\n+    ( 49, 49, 49)     # rgb = (0x31,0x31,0x31)\n+    ( 25, 25, 42)     # rgb = (0x19,0x19,0x2a)\n+    (  7,  7, 64)     # rgb = (0x07,0x07,0x40)\n+    ( 18, 18,174)     # rgb = (0x12,0x12,0xae)\n+    (  9,  9,238)     # rgb = (0x09,0x09,0xee)\n+    (211,214,211)     # rgb = (0xd3,0xd6,0xd3)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc) grey80\n+    (147,  0,  0)     # rgb = (0x93,0x00,0x00)\n+    (163, 42, 42)     # rgb = (0xa3,0x2a,0x2a)\n+    (198,198,198)     # rgb = (0xc6,0xc6,0xc6)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4) grey77\n+    (204,  0,  0)     # rgb = (0xcc,0x00,0x00)\n+    (211, 10, 10)     # rgb = (0xd3,0x0a,0x0a)\n+    (129,107,107)     # rgb = (0x81,0x6b,0x6b)\n+    (120, 62, 62)     # rgb = (0x78,0x3e,0x3e)\n+    (  3,  3,109)     # rgb = (0x03,0x03,0x6d)\n+    (  0,  0,159)     # rgb = (0x00,0x00,0x9f)\n+    ( 10, 10, 86)     # rgb = (0x0a,0x0a,0x56)\n+    ( 70, 70, 72)     # rgb = (0x46,0x46,0x48)\n+    ( 65, 65, 77)     # rgb = (0x41,0x41,0x4d)\n+    (115, 93, 93)     # rgb = (0x73,0x5d,0x5d)\n+    ( 81,  7,  7)     # rgb = (0x51,0x07,0x07)\n+    (168,168,168)     # rgb = (0xa8,0xa8,0xa8) grey66\n+    (237,237,239)     # rgb = (0xed,0xed,0xef)\n+    (160,160,160)     # rgb = (0xa0,0xa0,0xa0)\n+    (158,158,158)     # rgb = (0x9e,0x9e,0x9e) grey62\n+    (156,156,156)     # rgb = (0x9c,0x9c,0x9c) grey61\n+    (  0,  0,185)     # rgb = (0x00,0x00,0xb9)\n+    (154,154,154)     # rgb = (0x9a,0x9a,0x9a)\n+    (178,  0,  0)     # rgb = (0xb2,0x00,0x00)\n+    (152,152,152)     # rgb = (0x98,0x98,0x98)\n+    (235,  0,  0)     # rgb = (0xeb,0x00,0x00)\n+    (150,150,150)     # rgb = (0x96,0x96,0x96) grey59\n+    (158,  0,  0)     # rgb = (0x9e,0x00,0x00)\n+    (148,148,148)     # rgb = (0x94,0x94,0x94) grey58\n+    ( 19, 19, 28)     # rgb = (0x13,0x13,0x1c)\n+    (146,146,146)     # rgb = (0x92,0x92,0x92)\n+    (144,144,144)     # rgb = (0x90,0x90,0x90)\n+    (142,142,142)     # rgb = (0x8e,0x8e,0x8e)\n+    (  0,  0,145)     # rgb = (0x00,0x00,0x91)\n+    (138,138,138)     # rgb = (0x8a,0x8a,0x8a) grey54\n+    (136,136,136)     # rgb = (0x88,0x88,0x88)\n+    (118,162,118)     # rgb = (0x76,0xa2,0x76)\n+    (133,136,133)     # rgb = (0x85,0x88,0x85)\n+    (134,134,134)     # rgb = (0x86,0x86,0x86)\n+    (132,132,132)     # rgb = (0x84,0x84,0x84)\n+    (120, 15, 15)     # rgb = (0x78,0x0f,0x0f)\n+    (130,130,130)     # rgb = (0x82,0x82,0x82) grey51\n+    (126,130,126)     # rgb = (0x7e,0x82,0x7e)\n+    (126,126,126)     # rgb = (0x7e,0x7e,0x7e)\n+    (124,124,124)     # rgb = (0x7c,0x7c,0x7c)\n+    (122,122,122)     # rgb = (0x7a,0x7a,0x7a) grey48\n+    ( 74,192, 74)     # rgb = (0x4a,0xc0,0x4a)\n+    (118,118,118)     # rgb = (0x76,0x76,0x76)\n+    (116,116,116)     # rgb = (0x74,0x74,0x74)\n+    (114,114,114)     # rgb = (0x72,0x72,0x72)\n+    (112,112,112)     # rgb = (0x70,0x70,0x70) grey44\n+    (152,  0,  0)     # rgb = (0x98,0x00,0x00)\n+    (110,110,110)     # rgb = (0x6e,0x6e,0x6e) grey43\n+    (106,112,106)     # rgb = (0x6a,0x70,0x6a)\n+    (122,102,102)     # rgb = (0x7a,0x66,0x66)\n+    (106,106,106)     # rgb = (0x6a,0x6a,0x6a)\n+    (132,  0,  0)     # rgb = (0x84,0x00,0x00)\n+    ( 68,162, 68)     # rgb = (0x44,0xa2,0x44)\n+    ( 75,150, 75)     # rgb = (0x4b,0x96,0x4b)\n+    ( 97,100, 97)     # rgb = (0x61,0x64,0x61)\n+    ( 98, 98, 98)     # rgb = (0x62,0x62,0x62)\n+    (  0,244,  0)     # rgb = (0x00,0xf4,0x00)\n+    ( 56,152, 56)     # rgb = (0x38,0x98,0x38)\n+    ( 92, 92, 92)     # rgb = (0x5c,0x5c,0x5c) grey36\n+    ( 90, 90, 90)     # rgb = (0x5a,0x5a,0x5a)\n+    (  0,230,  0)     # rgb = (0x00,0xe6,0x00)\n+    (  2,  2, 93)     # rgb = (0x02,0x02,0x5d)\n+    ( 66,120, 66)     # rgb = (0x42,0x78,0x42)\n+    ( 86, 86, 86)     # rgb = (0x56,0x56,0x56)\n+    (  0,  0,240)     # rgb = (0x00,0x00,0xf0)\n+    ( 46,148, 46)     # rgb = (0x2e,0x94,0x2e)\n+    ( 71,104, 71)     # rgb = (0x47,0x68,0x47)\n+    ( 49, 49, 96)     # rgb = (0x31,0x31,0x60)\n+    (  0,216,  0)     # rgb = (0x00,0xd8,0x00)\n+    ( 82, 82, 82)     # rgb = (0x52,0x52,0x52) grey32\n+    ( 80, 80, 80)     # rgb = (0x50,0x50,0x50)\n+    (  0,206,  0)     # rgb = (0x00,0xce,0x00)\n+    ( 33,152, 33)     # rgb = (0x21,0x98,0x21)\n+    ( 20, 20,109)     # rgb = (0x14,0x14,0x6d)\n+    (  0,200,  0)     # rgb = (0x00,0xc8,0x00)\n+    ( 76, 76, 76)     # rgb = (0x4c,0x4c,0x4c)\n+    (253,253,253)     # rgb = (0xfd,0xfd,0xfd)\n+    (  0,198,  0)     # rgb = (0x00,0xc6,0x00)\n+    (  0,  0,157)     # rgb = (0x00,0x00,0x9d)\n+    (111,107,107)     # rgb = (0x6f,0x6b,0x6b)\n+    (234, 14, 14)     # rgb = (0xea,0x0e,0x0e)\n+    ( 72, 72, 72)     # rgb = (0x48,0x48,0x48)\n+    (  0,188,  0)     # rgb = (0x00,0xbc,0x00)\n+    ( 52,102, 52)     # rgb = (0x34,0x66,0x34)\n+    (  2,  2,245)     # rgb = (0x02,0x02,0xf5)\n+    ( 83, 83, 96)     # rgb = (0x53,0x53,0x60)\n+    (  0,176,  0)     # rgb = (0x00,0xb0,0x00)\n+    (  0,174,  0)     # rgb = (0x00,0xae,0x00)\n+    (183,  0,  0)     # rgb = (0xb7,0x00,0x00)\n+    (  0,164,  0)     # rgb = (0x00,0xa4,0x00)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (  0,162,  0)     # rgb = (0x00,0xa2,0x00)\n+    (143, 79, 79)     # rgb = (0x8f,0x4f,0x4f)\n+    (149, 52, 52)     # rgb = (0x95,0x34,0x34)\n+    (  0,152,  0)     # rgb = (0x00,0x98,0x00)\n+    (  0,150,  0)     # rgb = (0x00,0x96,0x00)\n+    (  0,146,  0)     # rgb = (0x00,0x92,0x00)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (  0,140,  0)     # rgb = (0x00,0x8c,0x00)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3) grey89\n+    (  0,128,  0)     # rgb = (0x00,0x80,0x00)\n+    (146,  6,  6)     # rgb = (0x92,0x06,0x06)\n+    (  1,  1,111)     # rgb = (0x01,0x01,0x6f)\n+    (100, 86, 89)     # rgb = (0x64,0x56,0x59)\n+    (  0,  0,100)     # rgb = (0x00,0x00,0x64)\n+    ( 78, 78,107)     # rgb = (0x4e,0x4e,0x6b)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf) grey81\n+    (221,221,224)     # rgb = (0xdd,0xdd,0xe0)\n+    (  0,  0,123)     # rgb = (0x00,0x00,0x7b)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9) grey79\n+    ( 22, 22, 65)     # rgb = (0x16,0x16,0x41)\n+    ( 33, 33, 89)     # rgb = (0x21,0x21,0x59)\n+    ( 87, 87, 89)     # rgb = (0x57,0x57,0x59)\n+    ( 68, 68,120)     # rgb = (0x44,0x44,0x78)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf) grey75\n+    (235,221,221)     # rgb = (0xeb,0xdd,0xdd)\n+    ( 45, 45, 84)     # rgb = (0x2d,0x2d,0x54)\n+    ( 10, 10, 96)     # rgb = (0x0a,0x0a,0x60)\n+    (  0,  0,255)     # rgb = (0x00,0x00,0xff) blue1\n+    (191,125,125)     # rgb = (0xbf,0x7d,0x7d)\n+    (  0,  0,  0)     # rgb = (0x00,0x00,0x00) grey0\n+}\n+bKGD {index: 245}\n+tRNS {\n+ 0}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000e0ea66000000000000000000000000000000\n+0000000000000000000000de02a336e43903f4f0000000000000000000000000\n+000000000000000069ef1a358680062eb017b0ab7af459500000000000000000\n+0000000000667c0ea9cc803979937917a03a878787b0e2ae8ae75c0000000000\n+00005cea8ea72c8639e293208f7d7d19200639a017ab2ee4ac2ca7097c690000\n+00007823a72b2bda198fd54ddad90521219191217d1917cc2b2b2b2baf8e0000\n+0000e81f9b9f27014d05d91c2a2a2a7f037ecdcd7e7a012a2a2aaab7c2ef0000\n+00006c9f229d981a23282828282828282828282828282828a7b445c3c8de0000\n+00005ca249d63d140f139f272727272727272727a5a528af44c3c8ce43000000\n+0000009a62ca41a6960e0d941da4a4a4a4a4a4a4a4a9b732525a1084a1000000\n+000000965b58b53811940d0b090b1823a3a3252ab4d24c269957571088000000\n+000000946162b9b59c0f14b12d0c8b8c98a3afb8ed1bbd82ba74300877000000\n+00000088c565c7b5a6962dcf67be07048aa5b84315f326ba7395832950000000\n+00000002bed8d4b94214b1c7dbb68c8b04a843e6d1bd814bceeb10a900000000\n+0000007b47636ec441b23d4edb3f09078bac4315f340ec855a82995f00000000\n+00000059bb63e15d42643dca6b3f8e090735ed76bd81c05224e9f27b00000000\n+0000006cbbd47161c1684951dc3f908e8c3ceef38d08ebe96d6d086000000000\n+00000050bf67dc54534fdd53ddb20d0b8eb815d10af1732fe312e60000000000\n+00000000add6d6bf61c16f566eb20e0d924475bd578572c61e6d340000000000\n+0000000016d8d3d03ec76bcfdf3b0f0e13bc4c8d2f84c040cb837b0000000000\n+00000000550c47b3365bd45d6f33110f1a4575cbf2c0521e0802000000000000\n+000000000000e7ac36be625e7031131122455a0a2f0a99c6e700000000000000\n+000000000000006a9e37d36270331613a545f181e53032e80000000000000000\n+00000000000000005088c5d371311816a8464b7374ee89000000000000000000\n+0000000000000000000077b654a29b18acc24a722a5500000000000000000000\n+0000000000000000000000d78a9f9e9b3548c38ac90000000000000000000000\n+00000000000000000000000000ef1f9e3cc20200000000000000000000000000\n+0000000000000000000000000000e89736780000000000000000000000000000\n+00000000000000000000000000000060e0000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "85cec395c01b305335172fe781aad11e485f45e1", "filename": "libgo/go/image/png/testdata/pngsuite/ftbgn2c16.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn2c16.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn2c16.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn2c16.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "0f5621dc06995da0e0aba392830c765e66335b09", "filename": "libgo/go/image/png/testdata/pngsuite/ftbgn2c16.sng", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn2c16.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn2c16.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn2c16.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,45 @@\n+#SNG: from ftbgn2c16.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 16;\n+    using color;\n+}\n+gAMA {1.0000}\n+bKGD {red: 0;  green: 65535;  blue: 0;}\n+tRNS {\n+    red: 65535; green: 65535; blue: 65535;\n+}\n+IMAGE {\n+    pixels hex\n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff e3e3e3e3e3e3 c9c9c9c9c9c9 f1f1f1f1f1f1 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff e8e8e8e8e8e8 b5b5b5b5b5b5 7e7e7e7e7e7e 656565656565 6e6e52525252 7e7e2e2e2e2e a6a643434343 c7c790909090 ebebdddddddd ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff eeeeeeeeeeee bfbfbfbfbfbf 898989898989 676767676767 6b6b5d5d5d5d 7a7a39393939 8a8a12121212 8d8d00010000 858500000000 777700000000 848400000000 9a9a01010101 a2a22d2d2d2d bfbf7d7d7d7d ddddd0d0d0d0 fcfcfcfcfcfc ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff f2f2f2f2f2f2 c4c4c4c4c4c4 959595959595 727272727272 6f6f6b6b6b6b 777744444444 87871e1e1e1e 959501010101 9f9f00010000 919100000000 808000010000 72720c0c0c0c 61612d2d2d2d 53530e0e0e0e 505000000000 595900010000 858500000000 929206060606 7a7a66666666 a0a0a0a0a0a0 cfcfcfcfcfcf f8f8f8f8f8f8 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff f7f7f7f7f7f7 cacacacacaca 9a9a9a9a9a9a 767676767676 737373737373 7c7c5d5d5d5d 87872e2e2e2e 939307070707 9e9e00010000 a9a900000000 b0b000000000 c9c900000000 cfcf00000000 b9b900010000 a2a201010101 8c8c19191919 85852a2a2a2a 7f7f13131313 818100010000 969600000000 8f8f00000000 6b6b53535353 6e6e6e6e6e6e 737373737373 767676767676 9b9b9b9b9b9b c4c4c4c4c4c4 eeeeeeeeeeee ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff cccccccccccc 7f7f7f7f7f7f 767676767676 757575757575 757575757575 96962f2f2f2f b8b800010000 b4b400000000 b6b600010000 adad0c0c0c0c 94943a3a3a3a 929250505050 b9b923232323 d6d602020202 e2e200010000 efef00000000 e7e700000000 dada00000000 cfcf00010000 baba00000000 7d7d01010101 6f6f6b6b6b6b 757575757575 757575757575 757575757575 757575757575 6a6a6a6a6a6a 9a9a9a9a9a9a ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff dcdcdcdcdcdc 858585858585 888888888888 848484848484 7b7b7b7b7b7b 858554545454 b7b713131313 a9a91d1d1d1d 8d8d4f4f4f4f 787875757575 777777777777 777777777777 777777777777 81816b6b6b6b aaaa41414141 d6d620202020 ecec10101010 e9e90c0c0c0c d0d012121212 a5a528282828 7b7b58585858 777777777777 777777777777 777777777777 707070707070 5c5c5c5c5c5c 525252525252 bdbdbdbdbdbd ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff eaeaeaeaeaea 848484848484 818181818181 858588888585 8e8e8e8e8e8e 898989898989 7f7f7f7f7f7f 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 797979797979 767676767676 636363636363 545454545454 505050505050 4c4c4c4c4c4c e6e6e6e6e6e6 ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff f8f8f8f8f8f8 7f7f84847f7f 252597972525 0404a5a50404 3939a4a43939 8b8b94948b8b 939393939393 8f8f8f8f8f8f 838383838383 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7b7b7b7b7b7b 7a7a7a7a7a7a 7a7a7a7a7a7a 797979797979 6a6a6a6a6a6a 575757575757 505050505050 4c4c4c4c4c4c 494949494949 595959595959 ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff 8a8a8a8a8a8a 0101b3b30101 0000c6c60001 0000f2f20000 5959b6b65959 929292929292 959595959595 979797979797 949494949494 878787878787 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 7c7c7c7c7c7c 717171717171 5a5a5a5a6060 282828288585 040404049393 0c0c0c0c7878 282828285858 464646464a4a 828282828282 ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff 929292929292 0c0cabab0c0c 0000bdbd0001 0000f4f40000 2020dddd2020 919191919191 949494949494 979797979797 999999999999 9b9b9b9b9b9b 999999999999 8b8b8b8b8b8b 7f7f7f7f7f7f 7e7e7e7e7e7e 7e7e7e7e7e7e 7d7d7d7d7d7d 777777777777 626262626262 535353536060 12121212bebe 00010000cccc 000000009292 000000016969 000000006767 2a2a2a2a5555 acacacacacac ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff 949494949494 1616a1a11616 0000b4b40001 0000e2e20000 0000f4f40000 7676a2a27676 939393939393 8d8d97978d8d 46469e9e4646 4646a7a74646 8e8e9e9e8e8e 9e9e9e9e9e9e 9c9c9c9c9c9c 8e8e8e8e8e8e 7e7e7e7e7e7e 6a6a6a6a6a6a 5a5a5a5a5a5a 575757575a5a 18181818cdcd 00010000f0f0 00000000a0a0 020202026060 010101013d3d 000100006161 1d1d1d1d5959 d6d6d6d6d6d6 ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff a4a4a4a4a4a4 212198982121 0000aaaa0001 0000c8c80000 0000f4f40000 3b3bcaca3b3b 929292929292 4a4aacac4a4a 0001bcbc0000 0000a9a90000 2f2f9a9a2f2f 9d9d9d9d9d9d 9f9f9f9f9f9f a0a0a0a0a0a0 7a7a7a7a7a7a 5a5a5a5a5a5a 595959595959 31313131a1a1 00010000ffff 00000000c6c6 030303035b5b 191919192424 0c0c0c0c1515 0c0c0c0c5555 3b3b3b3b5353 fbfbfbfbfbfb ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff b6b6b6b6b6b6 2b2b8f8f2b2b 0000a2a20001 0000adad0000 0000ebeb0000 0707eded0707 898995958989 4343a7a74343 0001c9c90000 000099990000 383895953838 9c9c9c9c9c9c 9e9e9e9e9e9e 9f9f9f9f9f9f 747474747474 595959595959 505050506767 05050505f5f5 00010000f0f0 030303037070 383838384646 484848484848 161616163939 2b2b2b2b5555 727272727272 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff c7c7c7c7c7c7 343486863434 0000b1b10001 00008d8d0000 0000d2d20000 0000f3f30000 4c4c9b9b4c4c 3b3b9e9e3b3b 0001c7c70000 000098980000 3d3d94943d3d 9b9b9b9b9b9b 9d9d9d9d9d9d 9e9e9e9e9e9e 6e6e6e6e6e6e 595959595959 2b2b2b2badad 00000001ffff 00000000a6a6 252525255959 434343434f4f 161616167e7e 000000019f9f 010101018e8e 9c9c9c9ca1a1 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff d8d8d8d8d8d8 3e3e7d7d3e3e 0000b1b10001 00007b7b0000 0000b8b80000 0000f1f10000 17178b8b1717 3b3b9c9c3b3b 0001c6c60000 000097970000 3d3d93933d3d 9a9a9a9a9a9a 9b9b9b9b9b9b 9d9d9d9d9d9d 676767676767 575757575959 09090909eeee 00000001f0f0 040404046b6b 333333335a5a 070707079090 000000009e9e 000000017c7c 0d0d0d0d5d5d c7c7c7c7c7c7 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff eaeaeaeaeaea 474774744747 0000adad0001 000085850000 090998980909 0000dcdc0000 0000a7a70000 232398982323 0001c3c30000 000096960000 3f3f92923f3f 989898989898 9a9a9a9a9a9a 9c9c9c9c9c9c 616161616161 424242427f7f 00010000ffff 00000001b9b9 1a1a1a1a5d5d 161616164949 000000007b7b 000000006b6b 000000016b6b 1c1c1c1c5656 f4f4f4f4f4f4 ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff fcfcfcfcfcfc 50506c6c5050 0000a9a90001 000095950000 2d2d77772d2d 0000c1c10000 0000c5c50000 010193930101 0001c1c10000 000090900000 4b4b91914b4b 979797979797 999999999999 9a9a9a9a9a9a 5a5a5a5a5a5a 2b2b2b2ba4a4 00010000f6f6 000000018686 2f2f2f2f5353 191919193030 020202026363 000000007373 000000019b9b 4d4d4d4d7070 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff 686873736868 0000a4a40001 0000a4a40000 3e3e65653e3e 1414a5a51414 0000d4d40000 00008b8b0001 0000bfbf0000 00008e8e0000 4a4a90904a4a 959595959595 979797979797 969696969696 575757575757 1a1a1a1ab5b5 00010000dede 000000016868 3f3f3f3f4b4b 2b2b2b2b2b2b 0c0c0c0c6d6d 00000000b3b3 000000016b6b 868686869292 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff 8c8c8c8c8c8c 05059e9e0505 0001b0b00000 343466663434 404085854040 0000caca0000 000097970001 0000bcbc0000 00008c8c0000 49498e8e4949 939393939393 959595959595 8f8f8f8f8f8f 565656565656 0f0f0f0fb7b7 00010000b9b9 030303036666 474747474747 2f2f2f2f6464 00010000a2a2 000000009d9d 090909095858 c5c5c5c5c5c5 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff fafafafafafa 9090b0b09090 343485853434 616164646161 63636a6a6363 0606afaf0606 0000aeae0001 0000b9b90000 00008b8b0000 53538d8d5353 919191919191 939393939393 898989898989 555555555555 0a0a0a0aa8a8 000100009d9d 070707076363 343434345c5c 040404049b9b 00010000b1b1 1a1a1a1a4d4d b5b5b5b5bbbb ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff d0d0d0d0d0d0 6d6d6d6d6d6d 656565656565 2d2d8f8f2d2d 0000b2b20001 0000b6b60000 000089890000 55558b8b5555 8f8f8f8f8f8f 919191919191 818181818181 555555555555 151515157e7e 000100008484 010101016565 010101018484 000100009191 1c1c1c1c6e6e cecececed0d0 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ecececececec 868686868686 585870705858 0000afaf0001 0000b3b30000 000088880000 535389895353 8d8d8d8d8d8d 8f8f8f8f8f8f 7a7a7a7a7a7a 545454545454 2c2c2c2c4949 020202026b6b 000000016464 000000006363 292929297474 dfdfdfdfe5e5 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff fcfcfcfcfcfc aaaaaaaaaaaa 212198982121 0001b0b00000 000086860000 575787875757 8b8b8b8b8b8b 8d8d8d8d8d8d 747474747474 535353535353 3d3d3d3d3d3d 1a1a1a1a2323 0d0d0d0d4343 474747477272 ededededefef ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff d1d1d6d6d1d1 38389b9b3838 2d2d77772d2d 7d7d81817d7d 888888888888 8b8b8b8b8b8b 6d6d6d6d6d6d 525252525252 4f4f4f4f4f4f 373737373737 777777777777 fafafafafafa ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff efefefefefef a0a0a0a0a0a0 838383838383 868686868686 888888888888 676767676767 515151515151 505050505050 a0a0a0a0a0a0 fdfdfdfdfdfd ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff fefefefefefe c0c0c0c0c0c0 858585858585 868686868686 616161616161 525252525252 b7b7b7b7b7b7 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff dededededede 909090909090 656565656565 cccccccccccc ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff f5f5f5f5f5f5 e3e3e3e3e3e3 ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff ffffffffffff \n+}"}, {"sha": "8cf2e6fb6aabf7c58efda0a953857b318607af30", "filename": "libgo/go/image/png/testdata/pngsuite/ftbgn3p08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn3p08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn3p08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn3p08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "0e3b7bd77dc94d6025a010123f351fcb0bc73099", "filename": "libgo/go/image/png/testdata/pngsuite/ftbgn3p08.sng", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn3p08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn3p08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbgn3p08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,292 @@\n+#SNG: from ftbgn3p08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    (255,255,255)     # rgb = (0xff,0xff,0xff) grey100\n+    (128, 86, 86)     # rgb = (0x80,0x56,0x56)\n+    (181,181,184)     # rgb = (0xb5,0xb5,0xb8)\n+    (168, 66, 66)     # rgb = (0xa8,0x42,0x42)\n+    (159,159,159)     # rgb = (0x9f,0x9f,0x9f)\n+    (177, 32, 32)     # rgb = (0xb1,0x20,0x20)\n+    (139, 21, 21)     # rgb = (0x8b,0x15,0x15)\n+    (157,157,157)     # rgb = (0x9d,0x9d,0x9d)\n+    ( 27, 27, 89)     # rgb = (0x1b,0x1b,0x59)\n+    (155,155,155)     # rgb = (0x9b,0x9b,0x9b)\n+    (  0,  0,132)     # rgb = (0x00,0x00,0x84)\n+    (153,153,153)     # rgb = (0x99,0x99,0x99) grey60\n+    (143,167,143)     # rgb = (0x8f,0xa7,0x8f)\n+    (151,151,151)     # rgb = (0x97,0x97,0x97)\n+    (149,149,149)     # rgb = (0x95,0x95,0x95)\n+    (147,147,147)     # rgb = (0x93,0x93,0x93)\n+    ( 41, 41, 86)     # rgb = (0x29,0x29,0x56)\n+    (145,145,145)     # rgb = (0x91,0x91,0x91) grey57\n+    (  0,  0,155)     # rgb = (0x00,0x00,0x9b)\n+    (143,143,143)     # rgb = (0x8f,0x8f,0x8f) grey56\n+    (139,149,139)     # rgb = (0x8b,0x95,0x8b)\n+    ( 46, 46,167)     # rgb = (0x2e,0x2e,0xa7)\n+    (141,141,141)     # rgb = (0x8d,0x8d,0x8d)\n+    (128,  0,  0)     # rgb = (0x80,0x00,0x00)\n+    (139,139,139)     # rgb = (0x8b,0x8b,0x8b)\n+    (185,  0,  0)     # rgb = (0xb9,0x00,0x00)\n+    (137,137,137)     # rgb = (0x89,0x89,0x89)\n+    ( 12, 12,213)     # rgb = (0x0c,0x0c,0xd5)\n+    (120,117,117)     # rgb = (0x78,0x75,0x75)\n+    (135,135,135)     # rgb = (0x87,0x87,0x87) grey53\n+    (  0,  0,178)     # rgb = (0x00,0x00,0xb2)\n+    (133,133,133)     # rgb = (0x85,0x85,0x85) grey52\n+    (165,  0,  0)     # rgb = (0xa5,0x00,0x00)\n+    (222,  0,  0)     # rgb = (0xde,0x00,0x00)\n+    (129,129,129)     # rgb = (0x81,0x81,0x81)\n+    (127,127,127)     # rgb = (0x7f,0x7f,0x7f) grey50\n+    (  0,  0,158)     # rgb = (0x00,0x00,0x9e)\n+    (125,125,125)     # rgb = (0x7d,0x7d,0x7d) grey49\n+    (  0,  0,201)     # rgb = (0x00,0x00,0xc9)\n+    (123,123,123)     # rgb = (0x7b,0x7b,0x7b)\n+    (121,121,121)     # rgb = (0x79,0x79,0x79)\n+    ( 55, 55, 86)     # rgb = (0x37,0x37,0x56)\n+    (119,119,119)     # rgb = (0x77,0x77,0x77)\n+    (117,117,117)     # rgb = (0x75,0x75,0x75) grey46\n+    (115,115,115)     # rgb = (0x73,0x73,0x73) grey45\n+    ( 72,169, 72)     # rgb = (0x48,0xa9,0x48)\n+    (142,  0,  0)     # rgb = (0x8e,0x00,0x00)\n+    (  2,  2,100)     # rgb = (0x02,0x02,0x64)\n+    (  0,  0, 98)     # rgb = (0x00,0x00,0x62)\n+    ( 86,137, 86)     # rgb = (0x56,0x89,0x56)\n+    ( 40, 40,124)     # rgb = (0x28,0x28,0x7c)\n+    ( 83,139, 83)     # rgb = (0x53,0x8b,0x53)\n+    (137,137,143)     # rgb = (0x89,0x89,0x8f)\n+    (103,103,103)     # rgb = (0x67,0x67,0x67)\n+    (101,101,101)     # rgb = (0x65,0x65,0x65)\n+    ( 93,109, 93)     # rgb = (0x5d,0x6d,0x5d)\n+    ( 19,229, 19)     # rgb = (0x13,0xe5,0x13)\n+    (134, 38, 38)     # rgb = (0x86,0x26,0x26)\n+    (111, 45, 45)     # rgb = (0x6f,0x2d,0x2d)\n+    ( 68,145, 68)     # rgb = (0x44,0x91,0x44)\n+    ( 97, 97, 97)     # rgb = (0x61,0x61,0x61) grey38\n+    ( 59,157, 59)     # rgb = (0x3b,0x9d,0x3b)\n+    ( 68,137, 68)     # rgb = (0x44,0x89,0x44)\n+    ( 61,147, 61)     # rgb = (0x3d,0x93,0x3d)\n+    (  0,  0,164)     # rgb = (0x00,0x00,0xa4)\n+    (  0,243,  0)     # rgb = (0x00,0xf3,0x00)\n+    (  0,241,  0)     # rgb = (0x00,0xf1,0x00)\n+    ( 89, 89, 89)     # rgb = (0x59,0x59,0x59) grey35\n+    ( 87, 87, 87)     # rgb = (0x57,0x57,0x57) grey34\n+    ( 85, 85, 85)     # rgb = (0x55,0x55,0x55)\n+    ( 83, 83, 83)     # rgb = (0x53,0x53,0x53)\n+    ( 52,133, 52)     # rgb = (0x34,0x85,0x34)\n+    ( 81, 81, 81)     # rgb = (0x51,0x51,0x51)\n+    ( 36,151, 36)     # rgb = (0x24,0x97,0x24)\n+    ( 79, 79, 79)     # rgb = (0x4f,0x4f,0x4f) grey31\n+    ( 58, 58, 65)     # rgb = (0x3a,0x3a,0x41)\n+    ( 16, 16,186)     # rgb = (0x10,0x10,0xba)\n+    (178, 15, 15)     # rgb = (0xb2,0x0f,0x0f)\n+    (  0,199,  0)     # rgb = (0x00,0xc7,0x00)\n+    (  0,197,  0)     # rgb = (0x00,0xc5,0x00)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc) grey99\n+    (  0,195,  0)     # rgb = (0x00,0xc3,0x00)\n+    (  4,  4,151)     # rgb = (0x04,0x04,0x97)\n+    (  0,193,  0)     # rgb = (0x00,0xc1,0x00)\n+    ( 45,119, 45)     # rgb = (0x2d,0x77,0x2d)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa) grey98\n+    (  0,191,  0)     # rgb = (0x00,0xbf,0x00)\n+    (  0,  0,104)     # rgb = (0x00,0x00,0x68)\n+    (  0,189,  0)     # rgb = (0x00,0xbd,0x00)\n+    (218,212,212)     # rgb = (0xda,0xd4,0xd4)\n+    ( 16, 16,123)     # rgb = (0x10,0x10,0x7b)\n+    (  9,173,  9)     # rgb = (0x09,0xad,0x09)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (  0,185,  0)     # rgb = (0x00,0xb9,0x00)\n+    (  0,183,  0)     # rgb = (0x00,0xb7,0x00)\n+    (156,156,161)     # rgb = (0x9c,0x9c,0xa1)\n+    (246,246,246)     # rgb = (0xf6,0xf6,0xf6)\n+    ( 12,161, 12)     # rgb = (0x0c,0xa1,0x0c)\n+    (  0,179,  0)     # rgb = (0x00,0xb3,0x00)\n+    (  0,177,  0)     # rgb = (0x00,0xb1,0x00)\n+    ( 16,145, 16)     # rgb = (0x10,0x91,0x10)\n+    (  0,171,  0)     # rgb = (0x00,0xab,0x00)\n+    (242,242,242)     # rgb = (0xf2,0xf2,0xf2) grey95\n+    (  0,169,  0)     # rgb = (0x00,0xa9,0x00)\n+    (  0,167,  0)     # rgb = (0x00,0xa7,0x00)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (  0,151,  0)     # rgb = (0x00,0x97,0x00)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (  0,  0,107)     # rgb = (0x00,0x00,0x6b)\n+    (  0,141,  0)     # rgb = (0x00,0x8d,0x00)\n+    (  0,139,  0)     # rgb = (0x00,0x8b,0x00) green4\n+    (  0,137,  0)     # rgb = (0x00,0x89,0x00)\n+    (  0,135,  0)     # rgb = (0x00,0x87,0x00)\n+    ( 49, 49, 49)     # rgb = (0x31,0x31,0x31)\n+    ( 25, 25, 42)     # rgb = (0x19,0x19,0x2a)\n+    (  7,  7, 64)     # rgb = (0x07,0x07,0x40)\n+    ( 18, 18,174)     # rgb = (0x12,0x12,0xae)\n+    (  9,  9,238)     # rgb = (0x09,0x09,0xee)\n+    (211,214,211)     # rgb = (0xd3,0xd6,0xd3)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc) grey80\n+    (147,  0,  0)     # rgb = (0x93,0x00,0x00)\n+    (163, 42, 42)     # rgb = (0xa3,0x2a,0x2a)\n+    (198,198,198)     # rgb = (0xc6,0xc6,0xc6)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4) grey77\n+    (204,  0,  0)     # rgb = (0xcc,0x00,0x00)\n+    (211, 10, 10)     # rgb = (0xd3,0x0a,0x0a)\n+    (129,107,107)     # rgb = (0x81,0x6b,0x6b)\n+    (120, 62, 62)     # rgb = (0x78,0x3e,0x3e)\n+    (  3,  3,109)     # rgb = (0x03,0x03,0x6d)\n+    (  0,  0,159)     # rgb = (0x00,0x00,0x9f)\n+    ( 10, 10, 86)     # rgb = (0x0a,0x0a,0x56)\n+    ( 70, 70, 72)     # rgb = (0x46,0x46,0x48)\n+    ( 65, 65, 77)     # rgb = (0x41,0x41,0x4d)\n+    (115, 93, 93)     # rgb = (0x73,0x5d,0x5d)\n+    ( 81,  7,  7)     # rgb = (0x51,0x07,0x07)\n+    (168,168,168)     # rgb = (0xa8,0xa8,0xa8) grey66\n+    (237,237,239)     # rgb = (0xed,0xed,0xef)\n+    (160,160,160)     # rgb = (0xa0,0xa0,0xa0)\n+    (158,158,158)     # rgb = (0x9e,0x9e,0x9e) grey62\n+    (156,156,156)     # rgb = (0x9c,0x9c,0x9c) grey61\n+    (  0,  0,185)     # rgb = (0x00,0x00,0xb9)\n+    (154,154,154)     # rgb = (0x9a,0x9a,0x9a)\n+    (178,  0,  0)     # rgb = (0xb2,0x00,0x00)\n+    (152,152,152)     # rgb = (0x98,0x98,0x98)\n+    (235,  0,  0)     # rgb = (0xeb,0x00,0x00)\n+    (150,150,150)     # rgb = (0x96,0x96,0x96) grey59\n+    (158,  0,  0)     # rgb = (0x9e,0x00,0x00)\n+    (148,148,148)     # rgb = (0x94,0x94,0x94) grey58\n+    ( 19, 19, 28)     # rgb = (0x13,0x13,0x1c)\n+    (146,146,146)     # rgb = (0x92,0x92,0x92)\n+    (144,144,144)     # rgb = (0x90,0x90,0x90)\n+    (142,142,142)     # rgb = (0x8e,0x8e,0x8e)\n+    (  0,  0,145)     # rgb = (0x00,0x00,0x91)\n+    (138,138,138)     # rgb = (0x8a,0x8a,0x8a) grey54\n+    (136,136,136)     # rgb = (0x88,0x88,0x88)\n+    (118,162,118)     # rgb = (0x76,0xa2,0x76)\n+    (133,136,133)     # rgb = (0x85,0x88,0x85)\n+    (134,134,134)     # rgb = (0x86,0x86,0x86)\n+    (132,132,132)     # rgb = (0x84,0x84,0x84)\n+    (120, 15, 15)     # rgb = (0x78,0x0f,0x0f)\n+    (130,130,130)     # rgb = (0x82,0x82,0x82) grey51\n+    (126,130,126)     # rgb = (0x7e,0x82,0x7e)\n+    (126,126,126)     # rgb = (0x7e,0x7e,0x7e)\n+    (124,124,124)     # rgb = (0x7c,0x7c,0x7c)\n+    (122,122,122)     # rgb = (0x7a,0x7a,0x7a) grey48\n+    ( 74,192, 74)     # rgb = (0x4a,0xc0,0x4a)\n+    (118,118,118)     # rgb = (0x76,0x76,0x76)\n+    (116,116,116)     # rgb = (0x74,0x74,0x74)\n+    (114,114,114)     # rgb = (0x72,0x72,0x72)\n+    (112,112,112)     # rgb = (0x70,0x70,0x70) grey44\n+    (152,  0,  0)     # rgb = (0x98,0x00,0x00)\n+    (110,110,110)     # rgb = (0x6e,0x6e,0x6e) grey43\n+    (106,112,106)     # rgb = (0x6a,0x70,0x6a)\n+    (122,102,102)     # rgb = (0x7a,0x66,0x66)\n+    (106,106,106)     # rgb = (0x6a,0x6a,0x6a)\n+    (132,  0,  0)     # rgb = (0x84,0x00,0x00)\n+    ( 68,162, 68)     # rgb = (0x44,0xa2,0x44)\n+    ( 75,150, 75)     # rgb = (0x4b,0x96,0x4b)\n+    ( 97,100, 97)     # rgb = (0x61,0x64,0x61)\n+    ( 98, 98, 98)     # rgb = (0x62,0x62,0x62)\n+    (  0,244,  0)     # rgb = (0x00,0xf4,0x00)\n+    ( 56,152, 56)     # rgb = (0x38,0x98,0x38)\n+    ( 92, 92, 92)     # rgb = (0x5c,0x5c,0x5c) grey36\n+    ( 90, 90, 90)     # rgb = (0x5a,0x5a,0x5a)\n+    (  0,230,  0)     # rgb = (0x00,0xe6,0x00)\n+    (  2,  2, 93)     # rgb = (0x02,0x02,0x5d)\n+    ( 66,120, 66)     # rgb = (0x42,0x78,0x42)\n+    ( 86, 86, 86)     # rgb = (0x56,0x56,0x56)\n+    (  0,  0,240)     # rgb = (0x00,0x00,0xf0)\n+    ( 46,148, 46)     # rgb = (0x2e,0x94,0x2e)\n+    ( 71,104, 71)     # rgb = (0x47,0x68,0x47)\n+    ( 49, 49, 96)     # rgb = (0x31,0x31,0x60)\n+    (  0,216,  0)     # rgb = (0x00,0xd8,0x00)\n+    ( 82, 82, 82)     # rgb = (0x52,0x52,0x52) grey32\n+    ( 80, 80, 80)     # rgb = (0x50,0x50,0x50)\n+    (  0,206,  0)     # rgb = (0x00,0xce,0x00)\n+    ( 33,152, 33)     # rgb = (0x21,0x98,0x21)\n+    ( 20, 20,109)     # rgb = (0x14,0x14,0x6d)\n+    (  0,200,  0)     # rgb = (0x00,0xc8,0x00)\n+    ( 76, 76, 76)     # rgb = (0x4c,0x4c,0x4c)\n+    (253,253,253)     # rgb = (0xfd,0xfd,0xfd)\n+    (  0,198,  0)     # rgb = (0x00,0xc6,0x00)\n+    (  0,  0,157)     # rgb = (0x00,0x00,0x9d)\n+    (111,107,107)     # rgb = (0x6f,0x6b,0x6b)\n+    (234, 14, 14)     # rgb = (0xea,0x0e,0x0e)\n+    ( 72, 72, 72)     # rgb = (0x48,0x48,0x48)\n+    (  0,188,  0)     # rgb = (0x00,0xbc,0x00)\n+    ( 52,102, 52)     # rgb = (0x34,0x66,0x34)\n+    (  2,  2,245)     # rgb = (0x02,0x02,0xf5)\n+    ( 83, 83, 96)     # rgb = (0x53,0x53,0x60)\n+    (  0,176,  0)     # rgb = (0x00,0xb0,0x00)\n+    (  0,174,  0)     # rgb = (0x00,0xae,0x00)\n+    (183,  0,  0)     # rgb = (0xb7,0x00,0x00)\n+    (  0,164,  0)     # rgb = (0x00,0xa4,0x00)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (  0,162,  0)     # rgb = (0x00,0xa2,0x00)\n+    (143, 79, 79)     # rgb = (0x8f,0x4f,0x4f)\n+    (149, 52, 52)     # rgb = (0x95,0x34,0x34)\n+    (  0,152,  0)     # rgb = (0x00,0x98,0x00)\n+    (  0,150,  0)     # rgb = (0x00,0x96,0x00)\n+    (  0,146,  0)     # rgb = (0x00,0x92,0x00)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (  0,140,  0)     # rgb = (0x00,0x8c,0x00)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3) grey89\n+    (  0,128,  0)     # rgb = (0x00,0x80,0x00)\n+    (146,  6,  6)     # rgb = (0x92,0x06,0x06)\n+    (  1,  1,111)     # rgb = (0x01,0x01,0x6f)\n+    (100, 86, 89)     # rgb = (0x64,0x56,0x59)\n+    (  0,  0,100)     # rgb = (0x00,0x00,0x64)\n+    ( 78, 78,107)     # rgb = (0x4e,0x4e,0x6b)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf) grey81\n+    (221,221,224)     # rgb = (0xdd,0xdd,0xe0)\n+    (  0,  0,123)     # rgb = (0x00,0x00,0x7b)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9) grey79\n+    ( 22, 22, 65)     # rgb = (0x16,0x16,0x41)\n+    ( 33, 33, 89)     # rgb = (0x21,0x21,0x59)\n+    ( 87, 87, 89)     # rgb = (0x57,0x57,0x59)\n+    ( 68, 68,120)     # rgb = (0x44,0x44,0x78)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf) grey75\n+    (235,221,221)     # rgb = (0xeb,0xdd,0xdd)\n+    ( 45, 45, 84)     # rgb = (0x2d,0x2d,0x54)\n+    ( 10, 10, 96)     # rgb = (0x0a,0x0a,0x60)\n+    (  0,  0,255)     # rgb = (0x00,0x00,0xff) blue1\n+    (191,125,125)     # rgb = (0xbf,0x7d,0x7d)\n+    (170,170,170)     # rgb = (0xaa,0xaa,0xaa)\n+}\n+bKGD {index: 245}\n+tRNS {\n+ 0}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000e0ea66000000000000000000000000000000\n+0000000000000000000000de02a336e43903f4f0000000000000000000000000\n+000000000000000069ef1a358680062eb017b0ab7af459500000000000000000\n+0000000000667c0ea9cc803979937917a03a878787b0e2ae8ae75c0000000000\n+00005cea8ea72c8639e293208f7d7d19200639a017ab2ee4ac2ca7097c690000\n+00007823a72b2bda198fd54ddad90521219191217d1917cc2b2b2b2baf8e0000\n+0000e81f9b9f27014d05d91c2a2a2a7f037ecdcd7e7a012a2a2aaab7c2ef0000\n+00006c9f229d981a23282828282828282828282828282828a7b445c3c8de0000\n+00005ca249d63d140f139f272727272727272727a5a528af44c3c8ce43000000\n+0000009a62ca41a6960e0d941da4a4a4a4a4a4a4a4a9b732525a1084a1000000\n+000000965b58b53811940d0b090b1823a3a3252ab4d24c269957571088000000\n+000000946162b9b59c0f14b12d0c8b8c98a3afb8ed1bbd82ba74300877000000\n+00000088c565c7b5a6962dcf67be07048aa5b84315f326ba7395832950000000\n+00000002bed8d4b94214b1c7dbb68c8b04a843e6d1bd814bceeb10a900000000\n+0000007b47636ec441b23d4edb3f09078bac4315f340ec855a82995f00000000\n+00000059bb63e15d42643dca6b3f8e090735ed76bd81c05224e9f27b00000000\n+0000006cbbd47161c1684951dc3f908e8c3ceef38d08ebe96d6d086000000000\n+00000050bf67dc54534fdd53ddb20d0b8eb815d10af1732fe312e60000000000\n+00000000add6d6bf61c16f566eb20e0d924475bd578572c61e6d340000000000\n+0000000016d8d3d03ec76bcfdf3b0f0e13bc4c8d2f84c040cb837b0000000000\n+00000000550c47b3365bd45d6f33110f1a4575cbf2c0521e0802000000000000\n+000000000000e7ac36be625e7031131122455a0a2f0a99c6e700000000000000\n+000000000000006a9e37d36270331613a545f181e53032e80000000000000000\n+00000000000000005088c5d371311816a8464b7374ee89000000000000000000\n+0000000000000000000077b654a29b18acc24a722a5500000000000000000000\n+0000000000000000000000d78a9f9e9b3548c38ac90000000000000000000000\n+00000000000000000000000000ef1f9e3cc20200000000000000000000000000\n+0000000000000000000000000000e89736780000000000000000000000000000\n+00000000000000000000000000000060e0000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "5cca0d621047cacf1637cf7d77e997d51cc6b15a", "filename": "libgo/go/image/png/testdata/pngsuite/ftbrn2c08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbrn2c08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbrn2c08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbrn2c08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "9569bdaf78c05f6d940523a4195418e6e11f03d8", "filename": "libgo/go/image/png/testdata/pngsuite/ftbrn2c08.sng", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbrn2c08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbrn2c08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbrn2c08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,45 @@\n+#SNG: from ftbrn2c08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color;\n+}\n+gAMA {1.0000}\n+bKGD {red: 255;  green: 0;  blue: 0;}\n+tRNS {\n+    red: 255; green: 255; blue: 255;\n+}\n+IMAGE {\n+    pixels hex\n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff e3e3e3 c9c9c9 f1f1f1 ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff e8e8e8 b5b5b5 7e7e7e 656565 6e5252 7e2e2e a64343 c79090 ebdddd ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff eeeeee bfbfbf 898989 676767 6b5d5d 7a3939 8a1212 8d0000 850000 770000 840000 9a0101 a22d2d bf7d7d ddd0d0 fcfcfc ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff f2f2f2 c4c4c4 959595 727272 6f6b6b 774444 871e1e 950101 9f0000 910000 800000 720c0c 612d2d 530e0e 500000 590000 850000 920606 7a6666 a0a0a0 cfcfcf f8f8f8 ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff f7f7f7 cacaca 9a9a9a 767676 737373 7c5d5d 872e2e 930707 9e0000 a90000 b00000 c90000 cf0000 b90000 a20101 8c1919 852a2a 7f1313 810000 960000 8f0000 6b5353 6e6e6e 737373 767676 9b9b9b c4c4c4 eeeeee ffffff ffffff \n+ffffff ffffff cccccc 7f7f7f 767676 757575 757575 962f2f b80000 b40000 b60000 ad0c0c 943a3a 925050 b92323 d60202 e20000 ef0000 e70000 da0000 cf0000 ba0000 7d0101 6f6b6b 757575 757575 757575 757575 6a6a6a 9a9a9a ffffff ffffff \n+ffffff ffffff dcdcdc 858585 888888 848484 7b7b7b 855454 b71313 a91d1d 8d4f4f 787575 777777 777777 777777 816b6b aa4141 d62020 ec1010 e90c0c d01212 a52828 7b5858 777777 777777 777777 707070 5c5c5c 525252 bdbdbd ffffff ffffff \n+ffffff ffffff eaeaea 848484 818181 858885 8e8e8e 898989 7f7f7f 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 767676 636363 545454 505050 4c4c4c e6e6e6 ffffff ffffff \n+ffffff ffffff f8f8f8 7f847f 259725 04a504 39a439 8b948b 939393 8f8f8f 838383 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7a7a7a 7a7a7a 797979 6a6a6a 575757 505050 4c4c4c 494949 595959 ffffff ffffff ffffff \n+ffffff ffffff ffffff 8a8a8a 01b301 00c600 00f200 59b659 929292 959595 979797 949494 878787 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 717171 5a5a60 282885 040493 0c0c78 282858 46464a 828282 ffffff ffffff ffffff \n+ffffff ffffff ffffff 929292 0cab0c 00bd00 00f400 20dd20 919191 949494 979797 999999 9b9b9b 999999 8b8b8b 7f7f7f 7e7e7e 7e7e7e 7d7d7d 777777 626262 535360 1212be 0000cc 000092 000069 000067 2a2a55 acacac ffffff ffffff ffffff \n+ffffff ffffff ffffff 949494 16a116 00b400 00e200 00f400 76a276 939393 8d978d 469e46 46a746 8e9e8e 9e9e9e 9c9c9c 8e8e8e 7e7e7e 6a6a6a 5a5a5a 57575a 1818cd 0000f0 0000a0 020260 01013d 000061 1d1d59 d6d6d6 ffffff ffffff ffffff \n+ffffff ffffff ffffff a4a4a4 219821 00aa00 00c800 00f400 3bca3b 929292 4aac4a 00bc00 00a900 2f9a2f 9d9d9d 9f9f9f a0a0a0 7a7a7a 5a5a5a 595959 3131a1 0000ff 0000c6 03035b 191924 0c0c15 0c0c55 3b3b53 fbfbfb ffffff ffffff ffffff \n+ffffff ffffff ffffff b6b6b6 2b8f2b 00a200 00ad00 00eb00 07ed07 899589 43a743 00c900 009900 389538 9c9c9c 9e9e9e 9f9f9f 747474 595959 505067 0505f5 0000f0 030370 383846 484848 161639 2b2b55 727272 ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff c7c7c7 348634 00b100 008d00 00d200 00f300 4c9b4c 3b9e3b 00c700 009800 3d943d 9b9b9b 9d9d9d 9e9e9e 6e6e6e 595959 2b2bad 0000ff 0000a6 252559 43434f 16167e 00009f 01018e 9c9ca1 ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff d8d8d8 3e7d3e 00b100 007b00 00b800 00f100 178b17 3b9c3b 00c600 009700 3d933d 9a9a9a 9b9b9b 9d9d9d 676767 575759 0909ee 0000f0 04046b 33335a 070790 00009e 00007c 0d0d5d c7c7c7 ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff eaeaea 477447 00ad00 008500 099809 00dc00 00a700 239823 00c300 009600 3f923f 989898 9a9a9a 9c9c9c 616161 42427f 0000ff 0000b9 1a1a5d 161649 00007b 00006b 00006b 1c1c56 f4f4f4 ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff fcfcfc 506c50 00a900 009500 2d772d 00c100 00c500 019301 00c100 009000 4b914b 979797 999999 9a9a9a 5a5a5a 2b2ba4 0000f6 000086 2f2f53 191930 020263 000073 00009b 4d4d70 ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff 687368 00a400 00a400 3e653e 14a514 00d400 008b00 00bf00 008e00 4a904a 959595 979797 969696 575757 1a1ab5 0000de 000068 3f3f4b 2b2b2b 0c0c6d 0000b3 00006b 868692 ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff 8c8c8c 059e05 00b000 346634 408540 00ca00 009700 00bc00 008c00 498e49 939393 959595 8f8f8f 565656 0f0fb7 0000b9 030366 474747 2f2f64 0000a2 00009d 090958 c5c5c5 ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff fafafa 90b090 348534 616461 636a63 06af06 00ae00 00b900 008b00 538d53 919191 939393 898989 555555 0a0aa8 00009d 070763 34345c 04049b 0000b1 1a1a4d b5b5bb ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff d0d0d0 6d6d6d 656565 2d8f2d 00b200 00b600 008900 558b55 8f8f8f 919191 818181 555555 15157e 000084 010165 010184 000091 1c1c6e ceced0 ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ececec 868686 587058 00af00 00b300 008800 538953 8d8d8d 8f8f8f 7a7a7a 545454 2c2c49 02026b 000064 000063 292974 dfdfe5 ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff fcfcfc aaaaaa 219821 00b000 008600 578757 8b8b8b 8d8d8d 747474 535353 3d3d3d 1a1a23 0d0d43 474772 ededef ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff d1d6d1 389b38 2d772d 7d817d 888888 8b8b8b 6d6d6d 525252 4f4f4f 373737 777777 fafafa ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff efefef a0a0a0 838383 868686 888888 676767 515151 505050 a0a0a0 fdfdfd ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff fefefe c0c0c0 858585 868686 616161 525252 b7b7b7 ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff dedede 909090 656565 cccccc ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff f5f5f5 e3e3e3 ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff ffffff \n+}"}, {"sha": "99bdeed2b3b8564302d449e6578c4aca0f6261f5", "filename": "libgo/go/image/png/testdata/pngsuite/ftbwn0g16.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn0g16.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn0g16.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn0g16.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "3fca30727469470b0a561aacacd45eb3fe79cdb3", "filename": "libgo/go/image/png/testdata/pngsuite/ftbwn0g16.sng", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn0g16.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn0g16.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn0g16.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,45 @@\n+#SNG: from ftbwn0g16.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 16;\n+    using grayscale;\n+}\n+gAMA {1.0000}\n+bKGD {gray: 65535;}\n+tRNS {\n+    gray: 65535;\n+}\n+IMAGE {\n+    pixels hex\n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff e3e3 c9c9 f1f1 ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff e8e8 b5b5 7e7e 6565 5ab9 462f 60f8 a111 e210 ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff eeee bfbf 8989 6767 6190 4cba 3614 2a50 27e9 23b5 279c 2eea 5049 914b d4b7 fcfc ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff f2f2 c4c4 9595 7272 6c9e 5392 3da0 2d6a 2fb7 2b83 2669 2aa7 3cc7 22c2 1801 1ab5 27e9 3008 6c66 a0a0 cfcf f8f8 ffff ffff ffff ffff ffff \n+ffff ffff f7f7 caca 9a9a 7676 7373 66aa 48e3 3109 2f6a 32b6 34d0 3c50 3e1d 3784 3151 3b9b 4578 337b 26b6 2d03 2ae9 5a87 6e6e 7373 7676 9b9b c4c4 eeee ffff ffff \n+ffff ffff cccc 7f7f 7676 7575 7575 4e17 3737 3603 369d 3c5c 553c 641e 5026 419f 43d1 47b7 4551 416a 3e1e 37d0 2636 6c9e 7575 7575 7575 7575 6a6a 9a9a ffff ffff \n+ffff ffff dcdc 8585 8888 8484 7b7b 6308 4449 471f 61ea 765b 7777 7777 7777 7205 60c3 56bd 5214 4e5d 4b15 4daa 62d9 7777 7777 7777 7070 5c5c 5252 bdbd ffff ffff \n+ffff ffff eaea 8484 8181 8749 8e8e 8989 7f7f 7979 7979 7979 7979 7979 7979 7979 7979 7979 7979 7979 7979 7979 7979 7979 7676 6363 5454 5050 4c4c e6e6 ffff ffff \n+ffff ffff f8f8 8271 6847 62d4 783c 90d8 9393 8f8f 8383 7b7b 7b7b 7b7b 7b7b 7b7b 7b7b 7b7b 7b7b 7b7b 7a7a 7a7a 7979 6a6a 5757 5050 4c4c 4949 5959 ffff ffff ffff \n+ffff ffff ffff 8a8a 69d4 749a 8e83 901d 9292 9595 9797 9494 8787 7c7c 7c7c 7c7c 7c7c 7c7c 7c7c 7c7c 7c7c 7171 5b0b 32d9 1474 1876 2dac 46bc 8282 ffff ffff ffff \n+ffff ffff ffff 9292 69ae 6f4d 8fb1 8f6d 9191 9494 9797 9999 9b9b 9999 8b8b 7f7f 7e7e 7e7e 7d7d 7777 6262 54d2 25d7 1773 10c8 0c12 0bd7 2f1b acac ffff ffff ffff \n+ffff ffff ffff 9494 67f1 6a00 8517 8fb1 905f 9393 9371 7a19 7f65 97fa 9e9e 9c9c 8e8e 7e7e 6a6a 5a5a 57af 2ce6 1b97 1264 0cd0 07e7 0b27 2403 d6d6 ffff ffff ffff \n+ffff ffff ffff a4a4 6735 641d 75c7 8fb1 8f71 9292 8400 6eb6 6386 6e32 9d9d 9f9f a0a0 7a7a 5a5a 5959 3e11 1d50 16c2 0d21 1a5d 0d15 1470 3dfd fbfb ffff ffff ffff \n+ffff ffff ffff b6b6 660f 5f67 65e1 8a64 8e79 909a 7e27 765e 5a1a 6efc 9c9c 9e9e 9f9f 7474 5959 52f5 209b 1b97 0f8a 39d4 4848 1a1c 2fff 7272 ffff ffff ffff ffff \n+ffff ffff ffff c7c7 647e 683c 5309 7bab 8f1a 7ad2 7588 7531 5983 7079 9b9b 9d9d 9e9e 6e6e 5959 3a1c 1d50 1315 2b1f 44a4 220a 1247 1136 9d2f ffff ffff ffff ffff \n+ffff ffff ffff d8d8 6358 683c 486f 6c5b 8dec 5b67 745a 749a 58ec 6fe2 9a9a 9b9b 9d9d 6767 5792 235c 1b97 0fdb 37af 16c6 1229 0e41 163f c7c7 ffff ffff ffff ffff \n+ffff ffff ffff eaea 61c7 65e1 4e53 5d3f 818e 6258 6809 72d6 5855 7020 9898 9a9a 9c9c 6161 4945 1d50 1544 21ce 1bf3 0e23 0c4d 0c4d 22c7 f4f4 ffff ffff ffff ffff \n+ffff ffff ffff fcfc 60cd 6386 57bf 58c1 71a8 7403 56fb 71a8 54cd 7484 9797 9999 9a9a 5a5a 3914 1c47 0f68 3352 1bbe 0d28 0d38 11d2 5153 ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff 6ee2 6094 6094 5535 6978 7cd8 51db 707a 539f 7383 9595 9797 9696 5757 2beb 1985 0bf5 40a0 2b2b 1732 1493 0c4d 87e7 ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff 8c8c 5f1f 67a5 51a6 68e2 76f5 58ec 6eb6 5272 71eb 9393 9595 8f8f 5656 225f 1544 0e64 4747 3547 129f 120c 121e c5c5 ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff fafa a368 63e7 6325 6782 698c 6678 6cf2 51db 757b 9191 9393 8989 5555 1c33 120c 119a 38cd 155f 1459 1ff7 b666 ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff d0d0 6d6d 6565 66e3 68d3 6b2e 50ae 7522 8f8f 9191 8181 5555 2127 0f2d 0c80 1010 10ab 2589 cf09 ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ecec 8686 667a 670e 6969 5017 7320 8d8d 8f8f 7a7a 5454 2f81 0e14 0b7f 0b61 31c8 e090 ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff fcfc aaaa 6735 67a5 4ee9 739b 8b8b 8d8d 7474 5353 3d3d 1b23 1342 4c38 ee28 ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff d4c3 7285 58c1 7fd8 8888 8b8b 6d6d 5252 4f4f 3737 7777 fafa ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff efef a0a0 8383 8686 8888 6767 5151 5050 a0a0 fdfd ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff fefe c0c0 8585 8686 6161 5252 b7b7 ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff dede 9090 6565 cccc ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff f5f5 e3e3 ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff ffff \n+}"}, {"sha": "eacab7a144cb54be28f7a5952a2fc63fd883766e", "filename": "libgo/go/image/png/testdata/pngsuite/ftbwn3p08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn3p08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn3p08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn3p08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "7b5aff60d4be2c95a4dee86049fc76a1793d780e", "filename": "libgo/go/image/png/testdata/pngsuite/ftbwn3p08.sng", "status": "added", "additions": 291, "deletions": 0, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn3p08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn3p08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbwn3p08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,291 @@\n+#SNG: from ftbwn3p08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    (255,255,255)     # rgb = (0xff,0xff,0xff) grey100\n+    (128, 86, 86)     # rgb = (0x80,0x56,0x56)\n+    (181,181,184)     # rgb = (0xb5,0xb5,0xb8)\n+    (168, 66, 66)     # rgb = (0xa8,0x42,0x42)\n+    (159,159,159)     # rgb = (0x9f,0x9f,0x9f)\n+    (177, 32, 32)     # rgb = (0xb1,0x20,0x20)\n+    (139, 21, 21)     # rgb = (0x8b,0x15,0x15)\n+    (157,157,157)     # rgb = (0x9d,0x9d,0x9d)\n+    ( 27, 27, 89)     # rgb = (0x1b,0x1b,0x59)\n+    (155,155,155)     # rgb = (0x9b,0x9b,0x9b)\n+    (  0,  0,132)     # rgb = (0x00,0x00,0x84)\n+    (153,153,153)     # rgb = (0x99,0x99,0x99) grey60\n+    (143,167,143)     # rgb = (0x8f,0xa7,0x8f)\n+    (151,151,151)     # rgb = (0x97,0x97,0x97)\n+    (149,149,149)     # rgb = (0x95,0x95,0x95)\n+    (147,147,147)     # rgb = (0x93,0x93,0x93)\n+    ( 41, 41, 86)     # rgb = (0x29,0x29,0x56)\n+    (145,145,145)     # rgb = (0x91,0x91,0x91) grey57\n+    (  0,  0,155)     # rgb = (0x00,0x00,0x9b)\n+    (143,143,143)     # rgb = (0x8f,0x8f,0x8f) grey56\n+    (139,149,139)     # rgb = (0x8b,0x95,0x8b)\n+    ( 46, 46,167)     # rgb = (0x2e,0x2e,0xa7)\n+    (141,141,141)     # rgb = (0x8d,0x8d,0x8d)\n+    (128,  0,  0)     # rgb = (0x80,0x00,0x00)\n+    (139,139,139)     # rgb = (0x8b,0x8b,0x8b)\n+    (185,  0,  0)     # rgb = (0xb9,0x00,0x00)\n+    (137,137,137)     # rgb = (0x89,0x89,0x89)\n+    ( 12, 12,213)     # rgb = (0x0c,0x0c,0xd5)\n+    (120,117,117)     # rgb = (0x78,0x75,0x75)\n+    (135,135,135)     # rgb = (0x87,0x87,0x87) grey53\n+    (  0,  0,178)     # rgb = (0x00,0x00,0xb2)\n+    (133,133,133)     # rgb = (0x85,0x85,0x85) grey52\n+    (165,  0,  0)     # rgb = (0xa5,0x00,0x00)\n+    (222,  0,  0)     # rgb = (0xde,0x00,0x00)\n+    (129,129,129)     # rgb = (0x81,0x81,0x81)\n+    (127,127,127)     # rgb = (0x7f,0x7f,0x7f) grey50\n+    (  0,  0,158)     # rgb = (0x00,0x00,0x9e)\n+    (125,125,125)     # rgb = (0x7d,0x7d,0x7d) grey49\n+    (  0,  0,201)     # rgb = (0x00,0x00,0xc9)\n+    (123,123,123)     # rgb = (0x7b,0x7b,0x7b)\n+    (121,121,121)     # rgb = (0x79,0x79,0x79)\n+    ( 55, 55, 86)     # rgb = (0x37,0x37,0x56)\n+    (119,119,119)     # rgb = (0x77,0x77,0x77)\n+    (117,117,117)     # rgb = (0x75,0x75,0x75) grey46\n+    (115,115,115)     # rgb = (0x73,0x73,0x73) grey45\n+    ( 72,169, 72)     # rgb = (0x48,0xa9,0x48)\n+    (142,  0,  0)     # rgb = (0x8e,0x00,0x00)\n+    (  2,  2,100)     # rgb = (0x02,0x02,0x64)\n+    (  0,  0, 98)     # rgb = (0x00,0x00,0x62)\n+    ( 86,137, 86)     # rgb = (0x56,0x89,0x56)\n+    ( 40, 40,124)     # rgb = (0x28,0x28,0x7c)\n+    ( 83,139, 83)     # rgb = (0x53,0x8b,0x53)\n+    (137,137,143)     # rgb = (0x89,0x89,0x8f)\n+    (103,103,103)     # rgb = (0x67,0x67,0x67)\n+    (101,101,101)     # rgb = (0x65,0x65,0x65)\n+    ( 93,109, 93)     # rgb = (0x5d,0x6d,0x5d)\n+    ( 19,229, 19)     # rgb = (0x13,0xe5,0x13)\n+    (134, 38, 38)     # rgb = (0x86,0x26,0x26)\n+    (111, 45, 45)     # rgb = (0x6f,0x2d,0x2d)\n+    ( 68,145, 68)     # rgb = (0x44,0x91,0x44)\n+    ( 97, 97, 97)     # rgb = (0x61,0x61,0x61) grey38\n+    ( 59,157, 59)     # rgb = (0x3b,0x9d,0x3b)\n+    ( 68,137, 68)     # rgb = (0x44,0x89,0x44)\n+    ( 61,147, 61)     # rgb = (0x3d,0x93,0x3d)\n+    (  0,  0,164)     # rgb = (0x00,0x00,0xa4)\n+    (  0,243,  0)     # rgb = (0x00,0xf3,0x00)\n+    (  0,241,  0)     # rgb = (0x00,0xf1,0x00)\n+    ( 89, 89, 89)     # rgb = (0x59,0x59,0x59) grey35\n+    ( 87, 87, 87)     # rgb = (0x57,0x57,0x57) grey34\n+    ( 85, 85, 85)     # rgb = (0x55,0x55,0x55)\n+    ( 83, 83, 83)     # rgb = (0x53,0x53,0x53)\n+    ( 52,133, 52)     # rgb = (0x34,0x85,0x34)\n+    ( 81, 81, 81)     # rgb = (0x51,0x51,0x51)\n+    ( 36,151, 36)     # rgb = (0x24,0x97,0x24)\n+    ( 79, 79, 79)     # rgb = (0x4f,0x4f,0x4f) grey31\n+    ( 58, 58, 65)     # rgb = (0x3a,0x3a,0x41)\n+    ( 16, 16,186)     # rgb = (0x10,0x10,0xba)\n+    (178, 15, 15)     # rgb = (0xb2,0x0f,0x0f)\n+    (  0,199,  0)     # rgb = (0x00,0xc7,0x00)\n+    (  0,197,  0)     # rgb = (0x00,0xc5,0x00)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc) grey99\n+    (  0,195,  0)     # rgb = (0x00,0xc3,0x00)\n+    (  4,  4,151)     # rgb = (0x04,0x04,0x97)\n+    (  0,193,  0)     # rgb = (0x00,0xc1,0x00)\n+    ( 45,119, 45)     # rgb = (0x2d,0x77,0x2d)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa) grey98\n+    (  0,191,  0)     # rgb = (0x00,0xbf,0x00)\n+    (  0,  0,104)     # rgb = (0x00,0x00,0x68)\n+    (  0,189,  0)     # rgb = (0x00,0xbd,0x00)\n+    (218,212,212)     # rgb = (0xda,0xd4,0xd4)\n+    ( 16, 16,123)     # rgb = (0x10,0x10,0x7b)\n+    (  9,173,  9)     # rgb = (0x09,0xad,0x09)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (  0,185,  0)     # rgb = (0x00,0xb9,0x00)\n+    (  0,183,  0)     # rgb = (0x00,0xb7,0x00)\n+    (156,156,161)     # rgb = (0x9c,0x9c,0xa1)\n+    (246,246,246)     # rgb = (0xf6,0xf6,0xf6)\n+    ( 12,161, 12)     # rgb = (0x0c,0xa1,0x0c)\n+    (  0,179,  0)     # rgb = (0x00,0xb3,0x00)\n+    (  0,177,  0)     # rgb = (0x00,0xb1,0x00)\n+    ( 16,145, 16)     # rgb = (0x10,0x91,0x10)\n+    (  0,171,  0)     # rgb = (0x00,0xab,0x00)\n+    (242,242,242)     # rgb = (0xf2,0xf2,0xf2) grey95\n+    (  0,169,  0)     # rgb = (0x00,0xa9,0x00)\n+    (  0,167,  0)     # rgb = (0x00,0xa7,0x00)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (  0,151,  0)     # rgb = (0x00,0x97,0x00)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (  0,  0,107)     # rgb = (0x00,0x00,0x6b)\n+    (  0,141,  0)     # rgb = (0x00,0x8d,0x00)\n+    (  0,139,  0)     # rgb = (0x00,0x8b,0x00) green4\n+    (  0,137,  0)     # rgb = (0x00,0x89,0x00)\n+    (  0,135,  0)     # rgb = (0x00,0x87,0x00)\n+    ( 49, 49, 49)     # rgb = (0x31,0x31,0x31)\n+    ( 25, 25, 42)     # rgb = (0x19,0x19,0x2a)\n+    (  7,  7, 64)     # rgb = (0x07,0x07,0x40)\n+    ( 18, 18,174)     # rgb = (0x12,0x12,0xae)\n+    (  9,  9,238)     # rgb = (0x09,0x09,0xee)\n+    (211,214,211)     # rgb = (0xd3,0xd6,0xd3)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc) grey80\n+    (147,  0,  0)     # rgb = (0x93,0x00,0x00)\n+    (163, 42, 42)     # rgb = (0xa3,0x2a,0x2a)\n+    (198,198,198)     # rgb = (0xc6,0xc6,0xc6)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4) grey77\n+    (204,  0,  0)     # rgb = (0xcc,0x00,0x00)\n+    (211, 10, 10)     # rgb = (0xd3,0x0a,0x0a)\n+    (129,107,107)     # rgb = (0x81,0x6b,0x6b)\n+    (120, 62, 62)     # rgb = (0x78,0x3e,0x3e)\n+    (  3,  3,109)     # rgb = (0x03,0x03,0x6d)\n+    (  0,  0,159)     # rgb = (0x00,0x00,0x9f)\n+    ( 10, 10, 86)     # rgb = (0x0a,0x0a,0x56)\n+    ( 70, 70, 72)     # rgb = (0x46,0x46,0x48)\n+    ( 65, 65, 77)     # rgb = (0x41,0x41,0x4d)\n+    (115, 93, 93)     # rgb = (0x73,0x5d,0x5d)\n+    ( 81,  7,  7)     # rgb = (0x51,0x07,0x07)\n+    (168,168,168)     # rgb = (0xa8,0xa8,0xa8) grey66\n+    (237,237,239)     # rgb = (0xed,0xed,0xef)\n+    (160,160,160)     # rgb = (0xa0,0xa0,0xa0)\n+    (158,158,158)     # rgb = (0x9e,0x9e,0x9e) grey62\n+    (156,156,156)     # rgb = (0x9c,0x9c,0x9c) grey61\n+    (  0,  0,185)     # rgb = (0x00,0x00,0xb9)\n+    (154,154,154)     # rgb = (0x9a,0x9a,0x9a)\n+    (178,  0,  0)     # rgb = (0xb2,0x00,0x00)\n+    (152,152,152)     # rgb = (0x98,0x98,0x98)\n+    (235,  0,  0)     # rgb = (0xeb,0x00,0x00)\n+    (150,150,150)     # rgb = (0x96,0x96,0x96) grey59\n+    (158,  0,  0)     # rgb = (0x9e,0x00,0x00)\n+    (148,148,148)     # rgb = (0x94,0x94,0x94) grey58\n+    ( 19, 19, 28)     # rgb = (0x13,0x13,0x1c)\n+    (146,146,146)     # rgb = (0x92,0x92,0x92)\n+    (144,144,144)     # rgb = (0x90,0x90,0x90)\n+    (142,142,142)     # rgb = (0x8e,0x8e,0x8e)\n+    (  0,  0,145)     # rgb = (0x00,0x00,0x91)\n+    (138,138,138)     # rgb = (0x8a,0x8a,0x8a) grey54\n+    (136,136,136)     # rgb = (0x88,0x88,0x88)\n+    (118,162,118)     # rgb = (0x76,0xa2,0x76)\n+    (133,136,133)     # rgb = (0x85,0x88,0x85)\n+    (134,134,134)     # rgb = (0x86,0x86,0x86)\n+    (132,132,132)     # rgb = (0x84,0x84,0x84)\n+    (120, 15, 15)     # rgb = (0x78,0x0f,0x0f)\n+    (130,130,130)     # rgb = (0x82,0x82,0x82) grey51\n+    (126,130,126)     # rgb = (0x7e,0x82,0x7e)\n+    (126,126,126)     # rgb = (0x7e,0x7e,0x7e)\n+    (124,124,124)     # rgb = (0x7c,0x7c,0x7c)\n+    (122,122,122)     # rgb = (0x7a,0x7a,0x7a) grey48\n+    ( 74,192, 74)     # rgb = (0x4a,0xc0,0x4a)\n+    (118,118,118)     # rgb = (0x76,0x76,0x76)\n+    (116,116,116)     # rgb = (0x74,0x74,0x74)\n+    (114,114,114)     # rgb = (0x72,0x72,0x72)\n+    (112,112,112)     # rgb = (0x70,0x70,0x70) grey44\n+    (152,  0,  0)     # rgb = (0x98,0x00,0x00)\n+    (110,110,110)     # rgb = (0x6e,0x6e,0x6e) grey43\n+    (106,112,106)     # rgb = (0x6a,0x70,0x6a)\n+    (122,102,102)     # rgb = (0x7a,0x66,0x66)\n+    (106,106,106)     # rgb = (0x6a,0x6a,0x6a)\n+    (132,  0,  0)     # rgb = (0x84,0x00,0x00)\n+    ( 68,162, 68)     # rgb = (0x44,0xa2,0x44)\n+    ( 75,150, 75)     # rgb = (0x4b,0x96,0x4b)\n+    ( 97,100, 97)     # rgb = (0x61,0x64,0x61)\n+    ( 98, 98, 98)     # rgb = (0x62,0x62,0x62)\n+    (  0,244,  0)     # rgb = (0x00,0xf4,0x00)\n+    ( 56,152, 56)     # rgb = (0x38,0x98,0x38)\n+    ( 92, 92, 92)     # rgb = (0x5c,0x5c,0x5c) grey36\n+    ( 90, 90, 90)     # rgb = (0x5a,0x5a,0x5a)\n+    (  0,230,  0)     # rgb = (0x00,0xe6,0x00)\n+    (  2,  2, 93)     # rgb = (0x02,0x02,0x5d)\n+    ( 66,120, 66)     # rgb = (0x42,0x78,0x42)\n+    ( 86, 86, 86)     # rgb = (0x56,0x56,0x56)\n+    (  0,  0,240)     # rgb = (0x00,0x00,0xf0)\n+    ( 46,148, 46)     # rgb = (0x2e,0x94,0x2e)\n+    ( 71,104, 71)     # rgb = (0x47,0x68,0x47)\n+    ( 49, 49, 96)     # rgb = (0x31,0x31,0x60)\n+    (  0,216,  0)     # rgb = (0x00,0xd8,0x00)\n+    ( 82, 82, 82)     # rgb = (0x52,0x52,0x52) grey32\n+    ( 80, 80, 80)     # rgb = (0x50,0x50,0x50)\n+    (  0,206,  0)     # rgb = (0x00,0xce,0x00)\n+    ( 33,152, 33)     # rgb = (0x21,0x98,0x21)\n+    ( 20, 20,109)     # rgb = (0x14,0x14,0x6d)\n+    (  0,200,  0)     # rgb = (0x00,0xc8,0x00)\n+    ( 76, 76, 76)     # rgb = (0x4c,0x4c,0x4c)\n+    (253,253,253)     # rgb = (0xfd,0xfd,0xfd)\n+    (  0,198,  0)     # rgb = (0x00,0xc6,0x00)\n+    (  0,  0,157)     # rgb = (0x00,0x00,0x9d)\n+    (111,107,107)     # rgb = (0x6f,0x6b,0x6b)\n+    (234, 14, 14)     # rgb = (0xea,0x0e,0x0e)\n+    ( 72, 72, 72)     # rgb = (0x48,0x48,0x48)\n+    (  0,188,  0)     # rgb = (0x00,0xbc,0x00)\n+    ( 52,102, 52)     # rgb = (0x34,0x66,0x34)\n+    (  2,  2,245)     # rgb = (0x02,0x02,0xf5)\n+    ( 83, 83, 96)     # rgb = (0x53,0x53,0x60)\n+    (  0,176,  0)     # rgb = (0x00,0xb0,0x00)\n+    (  0,174,  0)     # rgb = (0x00,0xae,0x00)\n+    (183,  0,  0)     # rgb = (0xb7,0x00,0x00)\n+    (  0,164,  0)     # rgb = (0x00,0xa4,0x00)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (  0,162,  0)     # rgb = (0x00,0xa2,0x00)\n+    (143, 79, 79)     # rgb = (0x8f,0x4f,0x4f)\n+    (149, 52, 52)     # rgb = (0x95,0x34,0x34)\n+    (  0,152,  0)     # rgb = (0x00,0x98,0x00)\n+    (  0,150,  0)     # rgb = (0x00,0x96,0x00)\n+    (  0,146,  0)     # rgb = (0x00,0x92,0x00)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (  0,140,  0)     # rgb = (0x00,0x8c,0x00)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3) grey89\n+    (  0,128,  0)     # rgb = (0x00,0x80,0x00)\n+    (146,  6,  6)     # rgb = (0x92,0x06,0x06)\n+    (  1,  1,111)     # rgb = (0x01,0x01,0x6f)\n+    (100, 86, 89)     # rgb = (0x64,0x56,0x59)\n+    (  0,  0,100)     # rgb = (0x00,0x00,0x64)\n+    ( 78, 78,107)     # rgb = (0x4e,0x4e,0x6b)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf) grey81\n+    (221,221,224)     # rgb = (0xdd,0xdd,0xe0)\n+    (  0,  0,123)     # rgb = (0x00,0x00,0x7b)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9) grey79\n+    ( 22, 22, 65)     # rgb = (0x16,0x16,0x41)\n+    ( 33, 33, 89)     # rgb = (0x21,0x21,0x59)\n+    ( 87, 87, 89)     # rgb = (0x57,0x57,0x59)\n+    ( 68, 68,120)     # rgb = (0x44,0x44,0x78)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf) grey75\n+    (235,221,221)     # rgb = (0xeb,0xdd,0xdd)\n+    ( 45, 45, 84)     # rgb = (0x2d,0x2d,0x54)\n+    ( 10, 10, 96)     # rgb = (0x0a,0x0a,0x60)\n+    (  0,  0,255)     # rgb = (0x00,0x00,0xff) blue1\n+    (191,125,125)     # rgb = (0xbf,0x7d,0x7d)\n+}\n+bKGD {index: 0}\n+tRNS {\n+ 0}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000e0ea66000000000000000000000000000000\n+0000000000000000000000de02a336e43903f4f0000000000000000000000000\n+000000000000000069ef1a358680062eb017b0ab7af459500000000000000000\n+0000000000667c0ea9cc803979937917a03a878787b0e2ae8ae75c0000000000\n+00005cea8ea72c8639e293208f7d7d19200639a017ab2ee4ac2ca7097c690000\n+00007823a72b2bda198fd54ddad90521219191217d1917cc2b2b2b2baf8e0000\n+0000e81f9b9f27014d05d91c2a2a2a7f037ecdcd7e7a012a2a2aaab7c2ef0000\n+00006c9f229d981a23282828282828282828282828282828a7b445c3c8de0000\n+00005ca249d63d140f139f272727272727272727a5a528af44c3c8ce43000000\n+0000009a62ca41a6960e0d941da4a4a4a4a4a4a4a4a9b732525a1084a1000000\n+000000965b58b53811940d0b090b1823a3a3252ab4d24c269957571088000000\n+000000946162b9b59c0f14b12d0c8b8c98a3afb8ed1bbd82ba74300877000000\n+00000088c565c7b5a6962dcf67be07048aa5b84315f326ba7395832950000000\n+00000002bed8d4b94214b1c7dbb68c8b04a843e6d1bd814bceeb10a900000000\n+0000007b47636ec441b23d4edb3f09078bac4315f340ec855a82995f00000000\n+00000059bb63e15d42643dca6b3f8e090735ed76bd81c05224e9f27b00000000\n+0000006cbbd47161c1684951dc3f908e8c3ceef38d08ebe96d6d086000000000\n+00000050bf67dc54534fdd53ddb20d0b8eb815d10af1732fe312e60000000000\n+00000000add6d6bf61c16f566eb20e0d924475bd578572c61e6d340000000000\n+0000000016d8d3d03ec76bcfdf3b0f0e13bc4c8d2f84c040cb837b0000000000\n+00000000550c47b3365bd45d6f33110f1a4575cbf2c0521e0802000000000000\n+000000000000e7ac36be625e7031131122455a0a2f0a99c6e700000000000000\n+000000000000006a9e37d36270331613a545f181e53032e80000000000000000\n+00000000000000005088c5d371311816a8464b7374ee89000000000000000000\n+0000000000000000000077b654a29b18acc24a722a5500000000000000000000\n+0000000000000000000000d78a9f9e9b3548c38ac90000000000000000000000\n+00000000000000000000000000ef1f9e3cc20200000000000000000000000000\n+0000000000000000000000000000e89736780000000000000000000000000000\n+00000000000000000000000000000060e0000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "656db0989ad8403c040f91caa6d1a79d11713715", "filename": "libgo/go/image/png/testdata/pngsuite/ftbyn3p08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbyn3p08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbyn3p08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbyn3p08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "5d619873304f5b03c4848c01930a0b742f24ebc4", "filename": "libgo/go/image/png/testdata/pngsuite/ftbyn3p08.sng", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbyn3p08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbyn3p08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftbyn3p08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,292 @@\n+#SNG: from ftbyn3p08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    (255,255,255)     # rgb = (0xff,0xff,0xff) grey100\n+    (128, 86, 86)     # rgb = (0x80,0x56,0x56)\n+    (181,181,184)     # rgb = (0xb5,0xb5,0xb8)\n+    (168, 66, 66)     # rgb = (0xa8,0x42,0x42)\n+    (159,159,159)     # rgb = (0x9f,0x9f,0x9f)\n+    (177, 32, 32)     # rgb = (0xb1,0x20,0x20)\n+    (139, 21, 21)     # rgb = (0x8b,0x15,0x15)\n+    (157,157,157)     # rgb = (0x9d,0x9d,0x9d)\n+    ( 27, 27, 89)     # rgb = (0x1b,0x1b,0x59)\n+    (155,155,155)     # rgb = (0x9b,0x9b,0x9b)\n+    (  0,  0,132)     # rgb = (0x00,0x00,0x84)\n+    (153,153,153)     # rgb = (0x99,0x99,0x99) grey60\n+    (143,167,143)     # rgb = (0x8f,0xa7,0x8f)\n+    (151,151,151)     # rgb = (0x97,0x97,0x97)\n+    (149,149,149)     # rgb = (0x95,0x95,0x95)\n+    (147,147,147)     # rgb = (0x93,0x93,0x93)\n+    ( 41, 41, 86)     # rgb = (0x29,0x29,0x56)\n+    (145,145,145)     # rgb = (0x91,0x91,0x91) grey57\n+    (  0,  0,155)     # rgb = (0x00,0x00,0x9b)\n+    (143,143,143)     # rgb = (0x8f,0x8f,0x8f) grey56\n+    (139,149,139)     # rgb = (0x8b,0x95,0x8b)\n+    ( 46, 46,167)     # rgb = (0x2e,0x2e,0xa7)\n+    (141,141,141)     # rgb = (0x8d,0x8d,0x8d)\n+    (128,  0,  0)     # rgb = (0x80,0x00,0x00)\n+    (139,139,139)     # rgb = (0x8b,0x8b,0x8b)\n+    (185,  0,  0)     # rgb = (0xb9,0x00,0x00)\n+    (137,137,137)     # rgb = (0x89,0x89,0x89)\n+    ( 12, 12,213)     # rgb = (0x0c,0x0c,0xd5)\n+    (120,117,117)     # rgb = (0x78,0x75,0x75)\n+    (135,135,135)     # rgb = (0x87,0x87,0x87) grey53\n+    (  0,  0,178)     # rgb = (0x00,0x00,0xb2)\n+    (133,133,133)     # rgb = (0x85,0x85,0x85) grey52\n+    (165,  0,  0)     # rgb = (0xa5,0x00,0x00)\n+    (222,  0,  0)     # rgb = (0xde,0x00,0x00)\n+    (129,129,129)     # rgb = (0x81,0x81,0x81)\n+    (127,127,127)     # rgb = (0x7f,0x7f,0x7f) grey50\n+    (  0,  0,158)     # rgb = (0x00,0x00,0x9e)\n+    (125,125,125)     # rgb = (0x7d,0x7d,0x7d) grey49\n+    (  0,  0,201)     # rgb = (0x00,0x00,0xc9)\n+    (123,123,123)     # rgb = (0x7b,0x7b,0x7b)\n+    (121,121,121)     # rgb = (0x79,0x79,0x79)\n+    ( 55, 55, 86)     # rgb = (0x37,0x37,0x56)\n+    (119,119,119)     # rgb = (0x77,0x77,0x77)\n+    (117,117,117)     # rgb = (0x75,0x75,0x75) grey46\n+    (115,115,115)     # rgb = (0x73,0x73,0x73) grey45\n+    ( 72,169, 72)     # rgb = (0x48,0xa9,0x48)\n+    (142,  0,  0)     # rgb = (0x8e,0x00,0x00)\n+    (  2,  2,100)     # rgb = (0x02,0x02,0x64)\n+    (  0,  0, 98)     # rgb = (0x00,0x00,0x62)\n+    ( 86,137, 86)     # rgb = (0x56,0x89,0x56)\n+    ( 40, 40,124)     # rgb = (0x28,0x28,0x7c)\n+    ( 83,139, 83)     # rgb = (0x53,0x8b,0x53)\n+    (137,137,143)     # rgb = (0x89,0x89,0x8f)\n+    (103,103,103)     # rgb = (0x67,0x67,0x67)\n+    (101,101,101)     # rgb = (0x65,0x65,0x65)\n+    ( 93,109, 93)     # rgb = (0x5d,0x6d,0x5d)\n+    ( 19,229, 19)     # rgb = (0x13,0xe5,0x13)\n+    (134, 38, 38)     # rgb = (0x86,0x26,0x26)\n+    (111, 45, 45)     # rgb = (0x6f,0x2d,0x2d)\n+    ( 68,145, 68)     # rgb = (0x44,0x91,0x44)\n+    ( 97, 97, 97)     # rgb = (0x61,0x61,0x61) grey38\n+    ( 59,157, 59)     # rgb = (0x3b,0x9d,0x3b)\n+    ( 68,137, 68)     # rgb = (0x44,0x89,0x44)\n+    ( 61,147, 61)     # rgb = (0x3d,0x93,0x3d)\n+    (  0,  0,164)     # rgb = (0x00,0x00,0xa4)\n+    (  0,243,  0)     # rgb = (0x00,0xf3,0x00)\n+    (  0,241,  0)     # rgb = (0x00,0xf1,0x00)\n+    ( 89, 89, 89)     # rgb = (0x59,0x59,0x59) grey35\n+    ( 87, 87, 87)     # rgb = (0x57,0x57,0x57) grey34\n+    ( 85, 85, 85)     # rgb = (0x55,0x55,0x55)\n+    ( 83, 83, 83)     # rgb = (0x53,0x53,0x53)\n+    ( 52,133, 52)     # rgb = (0x34,0x85,0x34)\n+    ( 81, 81, 81)     # rgb = (0x51,0x51,0x51)\n+    ( 36,151, 36)     # rgb = (0x24,0x97,0x24)\n+    ( 79, 79, 79)     # rgb = (0x4f,0x4f,0x4f) grey31\n+    ( 58, 58, 65)     # rgb = (0x3a,0x3a,0x41)\n+    ( 16, 16,186)     # rgb = (0x10,0x10,0xba)\n+    (178, 15, 15)     # rgb = (0xb2,0x0f,0x0f)\n+    (  0,199,  0)     # rgb = (0x00,0xc7,0x00)\n+    (  0,197,  0)     # rgb = (0x00,0xc5,0x00)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc) grey99\n+    (  0,195,  0)     # rgb = (0x00,0xc3,0x00)\n+    (  4,  4,151)     # rgb = (0x04,0x04,0x97)\n+    (  0,193,  0)     # rgb = (0x00,0xc1,0x00)\n+    ( 45,119, 45)     # rgb = (0x2d,0x77,0x2d)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa) grey98\n+    (  0,191,  0)     # rgb = (0x00,0xbf,0x00)\n+    (  0,  0,104)     # rgb = (0x00,0x00,0x68)\n+    (  0,189,  0)     # rgb = (0x00,0xbd,0x00)\n+    (218,212,212)     # rgb = (0xda,0xd4,0xd4)\n+    ( 16, 16,123)     # rgb = (0x10,0x10,0x7b)\n+    (  9,173,  9)     # rgb = (0x09,0xad,0x09)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (  0,185,  0)     # rgb = (0x00,0xb9,0x00)\n+    (  0,183,  0)     # rgb = (0x00,0xb7,0x00)\n+    (156,156,161)     # rgb = (0x9c,0x9c,0xa1)\n+    (246,246,246)     # rgb = (0xf6,0xf6,0xf6)\n+    ( 12,161, 12)     # rgb = (0x0c,0xa1,0x0c)\n+    (  0,179,  0)     # rgb = (0x00,0xb3,0x00)\n+    (  0,177,  0)     # rgb = (0x00,0xb1,0x00)\n+    ( 16,145, 16)     # rgb = (0x10,0x91,0x10)\n+    (  0,171,  0)     # rgb = (0x00,0xab,0x00)\n+    (242,242,242)     # rgb = (0xf2,0xf2,0xf2) grey95\n+    (  0,169,  0)     # rgb = (0x00,0xa9,0x00)\n+    (  0,167,  0)     # rgb = (0x00,0xa7,0x00)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (  0,151,  0)     # rgb = (0x00,0x97,0x00)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (  0,  0,107)     # rgb = (0x00,0x00,0x6b)\n+    (  0,141,  0)     # rgb = (0x00,0x8d,0x00)\n+    (  0,139,  0)     # rgb = (0x00,0x8b,0x00) green4\n+    (  0,137,  0)     # rgb = (0x00,0x89,0x00)\n+    (  0,135,  0)     # rgb = (0x00,0x87,0x00)\n+    ( 49, 49, 49)     # rgb = (0x31,0x31,0x31)\n+    ( 25, 25, 42)     # rgb = (0x19,0x19,0x2a)\n+    (  7,  7, 64)     # rgb = (0x07,0x07,0x40)\n+    ( 18, 18,174)     # rgb = (0x12,0x12,0xae)\n+    (  9,  9,238)     # rgb = (0x09,0x09,0xee)\n+    (211,214,211)     # rgb = (0xd3,0xd6,0xd3)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc) grey80\n+    (147,  0,  0)     # rgb = (0x93,0x00,0x00)\n+    (163, 42, 42)     # rgb = (0xa3,0x2a,0x2a)\n+    (198,198,198)     # rgb = (0xc6,0xc6,0xc6)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4) grey77\n+    (204,  0,  0)     # rgb = (0xcc,0x00,0x00)\n+    (211, 10, 10)     # rgb = (0xd3,0x0a,0x0a)\n+    (129,107,107)     # rgb = (0x81,0x6b,0x6b)\n+    (120, 62, 62)     # rgb = (0x78,0x3e,0x3e)\n+    (  3,  3,109)     # rgb = (0x03,0x03,0x6d)\n+    (  0,  0,159)     # rgb = (0x00,0x00,0x9f)\n+    ( 10, 10, 86)     # rgb = (0x0a,0x0a,0x56)\n+    ( 70, 70, 72)     # rgb = (0x46,0x46,0x48)\n+    ( 65, 65, 77)     # rgb = (0x41,0x41,0x4d)\n+    (115, 93, 93)     # rgb = (0x73,0x5d,0x5d)\n+    ( 81,  7,  7)     # rgb = (0x51,0x07,0x07)\n+    (168,168,168)     # rgb = (0xa8,0xa8,0xa8) grey66\n+    (237,237,239)     # rgb = (0xed,0xed,0xef)\n+    (160,160,160)     # rgb = (0xa0,0xa0,0xa0)\n+    (158,158,158)     # rgb = (0x9e,0x9e,0x9e) grey62\n+    (156,156,156)     # rgb = (0x9c,0x9c,0x9c) grey61\n+    (  0,  0,185)     # rgb = (0x00,0x00,0xb9)\n+    (154,154,154)     # rgb = (0x9a,0x9a,0x9a)\n+    (178,  0,  0)     # rgb = (0xb2,0x00,0x00)\n+    (152,152,152)     # rgb = (0x98,0x98,0x98)\n+    (235,  0,  0)     # rgb = (0xeb,0x00,0x00)\n+    (150,150,150)     # rgb = (0x96,0x96,0x96) grey59\n+    (158,  0,  0)     # rgb = (0x9e,0x00,0x00)\n+    (148,148,148)     # rgb = (0x94,0x94,0x94) grey58\n+    ( 19, 19, 28)     # rgb = (0x13,0x13,0x1c)\n+    (146,146,146)     # rgb = (0x92,0x92,0x92)\n+    (144,144,144)     # rgb = (0x90,0x90,0x90)\n+    (142,142,142)     # rgb = (0x8e,0x8e,0x8e)\n+    (  0,  0,145)     # rgb = (0x00,0x00,0x91)\n+    (138,138,138)     # rgb = (0x8a,0x8a,0x8a) grey54\n+    (136,136,136)     # rgb = (0x88,0x88,0x88)\n+    (118,162,118)     # rgb = (0x76,0xa2,0x76)\n+    (133,136,133)     # rgb = (0x85,0x88,0x85)\n+    (134,134,134)     # rgb = (0x86,0x86,0x86)\n+    (132,132,132)     # rgb = (0x84,0x84,0x84)\n+    (120, 15, 15)     # rgb = (0x78,0x0f,0x0f)\n+    (130,130,130)     # rgb = (0x82,0x82,0x82) grey51\n+    (126,130,126)     # rgb = (0x7e,0x82,0x7e)\n+    (126,126,126)     # rgb = (0x7e,0x7e,0x7e)\n+    (124,124,124)     # rgb = (0x7c,0x7c,0x7c)\n+    (122,122,122)     # rgb = (0x7a,0x7a,0x7a) grey48\n+    ( 74,192, 74)     # rgb = (0x4a,0xc0,0x4a)\n+    (118,118,118)     # rgb = (0x76,0x76,0x76)\n+    (116,116,116)     # rgb = (0x74,0x74,0x74)\n+    (114,114,114)     # rgb = (0x72,0x72,0x72)\n+    (112,112,112)     # rgb = (0x70,0x70,0x70) grey44\n+    (152,  0,  0)     # rgb = (0x98,0x00,0x00)\n+    (110,110,110)     # rgb = (0x6e,0x6e,0x6e) grey43\n+    (106,112,106)     # rgb = (0x6a,0x70,0x6a)\n+    (122,102,102)     # rgb = (0x7a,0x66,0x66)\n+    (106,106,106)     # rgb = (0x6a,0x6a,0x6a)\n+    (132,  0,  0)     # rgb = (0x84,0x00,0x00)\n+    ( 68,162, 68)     # rgb = (0x44,0xa2,0x44)\n+    ( 75,150, 75)     # rgb = (0x4b,0x96,0x4b)\n+    ( 97,100, 97)     # rgb = (0x61,0x64,0x61)\n+    ( 98, 98, 98)     # rgb = (0x62,0x62,0x62)\n+    (  0,244,  0)     # rgb = (0x00,0xf4,0x00)\n+    ( 56,152, 56)     # rgb = (0x38,0x98,0x38)\n+    ( 92, 92, 92)     # rgb = (0x5c,0x5c,0x5c) grey36\n+    ( 90, 90, 90)     # rgb = (0x5a,0x5a,0x5a)\n+    (  0,230,  0)     # rgb = (0x00,0xe6,0x00)\n+    (  2,  2, 93)     # rgb = (0x02,0x02,0x5d)\n+    ( 66,120, 66)     # rgb = (0x42,0x78,0x42)\n+    ( 86, 86, 86)     # rgb = (0x56,0x56,0x56)\n+    (  0,  0,240)     # rgb = (0x00,0x00,0xf0)\n+    ( 46,148, 46)     # rgb = (0x2e,0x94,0x2e)\n+    ( 71,104, 71)     # rgb = (0x47,0x68,0x47)\n+    ( 49, 49, 96)     # rgb = (0x31,0x31,0x60)\n+    (  0,216,  0)     # rgb = (0x00,0xd8,0x00)\n+    ( 82, 82, 82)     # rgb = (0x52,0x52,0x52) grey32\n+    ( 80, 80, 80)     # rgb = (0x50,0x50,0x50)\n+    (  0,206,  0)     # rgb = (0x00,0xce,0x00)\n+    ( 33,152, 33)     # rgb = (0x21,0x98,0x21)\n+    ( 20, 20,109)     # rgb = (0x14,0x14,0x6d)\n+    (  0,200,  0)     # rgb = (0x00,0xc8,0x00)\n+    ( 76, 76, 76)     # rgb = (0x4c,0x4c,0x4c)\n+    (253,253,253)     # rgb = (0xfd,0xfd,0xfd)\n+    (  0,198,  0)     # rgb = (0x00,0xc6,0x00)\n+    (  0,  0,157)     # rgb = (0x00,0x00,0x9d)\n+    (111,107,107)     # rgb = (0x6f,0x6b,0x6b)\n+    (234, 14, 14)     # rgb = (0xea,0x0e,0x0e)\n+    ( 72, 72, 72)     # rgb = (0x48,0x48,0x48)\n+    (  0,188,  0)     # rgb = (0x00,0xbc,0x00)\n+    ( 52,102, 52)     # rgb = (0x34,0x66,0x34)\n+    (  2,  2,245)     # rgb = (0x02,0x02,0xf5)\n+    ( 83, 83, 96)     # rgb = (0x53,0x53,0x60)\n+    (  0,176,  0)     # rgb = (0x00,0xb0,0x00)\n+    (  0,174,  0)     # rgb = (0x00,0xae,0x00)\n+    (183,  0,  0)     # rgb = (0xb7,0x00,0x00)\n+    (  0,164,  0)     # rgb = (0x00,0xa4,0x00)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (  0,162,  0)     # rgb = (0x00,0xa2,0x00)\n+    (143, 79, 79)     # rgb = (0x8f,0x4f,0x4f)\n+    (149, 52, 52)     # rgb = (0x95,0x34,0x34)\n+    (  0,152,  0)     # rgb = (0x00,0x98,0x00)\n+    (  0,150,  0)     # rgb = (0x00,0x96,0x00)\n+    (  0,146,  0)     # rgb = (0x00,0x92,0x00)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (  0,140,  0)     # rgb = (0x00,0x8c,0x00)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3) grey89\n+    (  0,128,  0)     # rgb = (0x00,0x80,0x00)\n+    (146,  6,  6)     # rgb = (0x92,0x06,0x06)\n+    (  1,  1,111)     # rgb = (0x01,0x01,0x6f)\n+    (100, 86, 89)     # rgb = (0x64,0x56,0x59)\n+    (  0,  0,100)     # rgb = (0x00,0x00,0x64)\n+    ( 78, 78,107)     # rgb = (0x4e,0x4e,0x6b)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf) grey81\n+    (221,221,224)     # rgb = (0xdd,0xdd,0xe0)\n+    (  0,  0,123)     # rgb = (0x00,0x00,0x7b)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9) grey79\n+    ( 22, 22, 65)     # rgb = (0x16,0x16,0x41)\n+    ( 33, 33, 89)     # rgb = (0x21,0x21,0x59)\n+    ( 87, 87, 89)     # rgb = (0x57,0x57,0x59)\n+    ( 68, 68,120)     # rgb = (0x44,0x44,0x78)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf) grey75\n+    (235,221,221)     # rgb = (0xeb,0xdd,0xdd)\n+    ( 45, 45, 84)     # rgb = (0x2d,0x2d,0x54)\n+    ( 10, 10, 96)     # rgb = (0x0a,0x0a,0x60)\n+    (  0,  0,255)     # rgb = (0x00,0x00,0xff) blue1\n+    (191,125,125)     # rgb = (0xbf,0x7d,0x7d)\n+    (255,255,  0)     # rgb = (0xff,0xff,0x00) yellow1\n+}\n+bKGD {index: 245}\n+tRNS {\n+ 0}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000e0ea66000000000000000000000000000000\n+0000000000000000000000de02a336e43903f4f0000000000000000000000000\n+000000000000000069ef1a358680062eb017b0ab7af459500000000000000000\n+0000000000667c0ea9cc803979937917a03a878787b0e2ae8ae75c0000000000\n+00005cea8ea72c8639e293208f7d7d19200639a017ab2ee4ac2ca7097c690000\n+00007823a72b2bda198fd54ddad90521219191217d1917cc2b2b2b2baf8e0000\n+0000e81f9b9f27014d05d91c2a2a2a7f037ecdcd7e7a012a2a2aaab7c2ef0000\n+00006c9f229d981a23282828282828282828282828282828a7b445c3c8de0000\n+00005ca249d63d140f139f272727272727272727a5a528af44c3c8ce43000000\n+0000009a62ca41a6960e0d941da4a4a4a4a4a4a4a4a9b732525a1084a1000000\n+000000965b58b53811940d0b090b1823a3a3252ab4d24c269957571088000000\n+000000946162b9b59c0f14b12d0c8b8c98a3afb8ed1bbd82ba74300877000000\n+00000088c565c7b5a6962dcf67be07048aa5b84315f326ba7395832950000000\n+00000002bed8d4b94214b1c7dbb68c8b04a843e6d1bd814bceeb10a900000000\n+0000007b47636ec441b23d4edb3f09078bac4315f340ec855a82995f00000000\n+00000059bb63e15d42643dca6b3f8e090735ed76bd81c05224e9f27b00000000\n+0000006cbbd47161c1684951dc3f908e8c3ceef38d08ebe96d6d086000000000\n+00000050bf67dc54534fdd53ddb20d0b8eb815d10af1732fe312e60000000000\n+00000000add6d6bf61c16f566eb20e0d924475bd578572c61e6d340000000000\n+0000000016d8d3d03ec76bcfdf3b0f0e13bc4c8d2f84c040cb837b0000000000\n+00000000550c47b3365bd45d6f33110f1a4575cbf2c0521e0802000000000000\n+000000000000e7ac36be625e7031131122455a0a2f0a99c6e700000000000000\n+000000000000006a9e37d36270331613a545f181e53032e80000000000000000\n+00000000000000005088c5d371311816a8464b7374ee89000000000000000000\n+0000000000000000000077b654a29b18acc24a722a5500000000000000000000\n+0000000000000000000000d78a9f9e9b3548c38ac90000000000000000000000\n+00000000000000000000000000ef1f9e3cc20200000000000000000000000000\n+0000000000000000000000000000e89736780000000000000000000000000000\n+00000000000000000000000000000060e0000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "333465fcdc9f10f7f25b2d999b558f5421983ecc", "filename": "libgo/go/image/png/testdata/pngsuite/ftp0n0g08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n0g08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n0g08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n0g08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "c8abd338936cb8e7bdb2d483f288ae4a32bb050e", "filename": "libgo/go/image/png/testdata/pngsuite/ftp0n0g08.sng", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n0g08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n0g08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n0g08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,41 @@\n+#SNG: from ftp0n0g08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using grayscale;\n+}\n+gAMA {1.0000}\n+IMAGE {\n+    pixels hex\n+7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7f7f7f7fe3c9f17f7f7f7f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7fe8b57e655a4661a1e17f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7feebf8967614d362a2824282f5091d4fc7f7f7f7f7f7f7f7f\n+7f7f7f7f7ff2c495726c533e2e302c272b3d23181b28306ca0cff87f7f7f7f7f\n+7f7ff7ca9a76736649313033353c3e38313c4533272d2b5a6e73769bc4ee7f7f\n+7f7fcc7f7675754e3736373c55645042444845423e38266c757575756a9a7f7f\n+7f7fdc8588847b6344476276777777726157524e4b4e63777777705c52bd7f7f\n+7f7fea8481878e897f797979797979797979797979797979766354504ce67f7f\n+7f7ff88268627890938f837b7b7b7b7b7b7b7b7b7a7a796a57504c49597f7f7f\n+7f7f7f8a69748e8f92959794877c7c7c7c7c7c7c7c715b3314182d46827f7f7f\n+7f7f7f92696f8f8f919497999b998b7f7e7e7d7762542517110c0c2fac7f7f7f\n+7f7f7f946769848f9093937a7f979e9c8e7e6a5a572d1b120d080b24d67f7f7f\n+7f7f7fa46764758f8f92836e636e9d9fa07a5a593e1d160d1a0d143efb7f7f7f\n+7f7f7fb6665f658a8e907e765a6e9c9e9f745953201b0f3a481a30727f7f7f7f\n+7f7f7fc76468537b8e7a757559709b9d9e6e593a1d132b442212119d7f7f7f7f\n+7f7f7fd86368486c8d5b7474586f9a9b9d6757231b103717120e16c77f7f7f7f\n+7f7f7fea61654e5d816268725870989a9c61491d15221c0e0c0c23f47f7f7f7f\n+7f7f7ffc6063575871735771547497999a5a391c0f331c0d0d12517f7f7f7f7f\n+7f7f7f7f6e606055697c51705373959796572c190c402b17140c877f7f7f7f7f\n+7f7f7f7f8c5f67516876586e527193958f5622150e4735121212c57f7f7f7f7f\n+7f7f7f7ffaa363636769666c5175919389551c121139151420b67f7f7f7f7f7f\n+7f7f7f7f7f7fd06d6566686b50758f918155210f0c101025ce7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7fec8666676950738d8f7a542f0e0b0b31e07f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7ffcaa67674f738b8d74533d1b134ced7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7fd472587f888b6d524f3777fa7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7fefa0838688675150a0fd7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7f7ffec085866152b77f7f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7f7f7f7fde9065cc7f7f7f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7f7f7f7f7ff5e37f7f7f7f7f7f7f7f7f7f7f7f7f7f7f\n+7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f\n+}"}, {"sha": "fc6e42cb420fd08ecd78340256157fa5f8a22934", "filename": "libgo/go/image/png/testdata/pngsuite/ftp0n2c08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n2c08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n2c08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n2c08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "d41c7eb36c1f8d7b560d3cb6a0ca68292a6ed120", "filename": "libgo/go/image/png/testdata/pngsuite/ftp0n2c08.sng", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n2c08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n2c08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n2c08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,41 @@\n+#SNG: from ftp0n2c08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color;\n+}\n+gAMA {1.0000}\n+IMAGE {\n+    pixels hex\n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f e3e3e3 c9c9c9 f1f1f1 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f e8e8e8 b5b5b5 7e7e7e 656565 6e5252 7e2e2e a64343 c79090 ebdddd 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f eeeeee bfbfbf 898989 676767 6b5d5d 7a3939 8a1212 8d0000 850000 770000 840000 9a0101 a22d2d bf7d7d ddd0d0 fcfcfc 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f f2f2f2 c4c4c4 959595 727272 6f6b6b 774444 871e1e 950101 9f0000 910000 800000 720c0c 612d2d 530e0e 500000 590000 850000 920606 7a6666 a0a0a0 cfcfcf f8f8f8 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f f7f7f7 cacaca 9a9a9a 767676 737373 7c5d5d 872e2e 930707 9e0000 a90000 b00000 c90000 cf0000 b90000 a20101 8c1919 852a2a 7f1313 810000 960000 8f0000 6b5353 6e6e6e 737373 767676 9b9b9b c4c4c4 eeeeee 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f cccccc 7f7f7f 767676 757575 757575 962f2f b80000 b40000 b60000 ad0c0c 943a3a 925050 b92323 d60202 e20000 ef0000 e70000 da0000 cf0000 ba0000 7d0101 6f6b6b 757575 757575 757575 757575 6a6a6a 9a9a9a 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f dcdcdc 858585 888888 848484 7b7b7b 855454 b71313 a91d1d 8d4f4f 787575 777777 777777 777777 816b6b aa4141 d62020 ec1010 e90c0c d01212 a52828 7b5858 777777 777777 777777 707070 5c5c5c 525252 bdbdbd 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f eaeaea 848484 818181 858885 8e8e8e 898989 7f7f7f 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 797979 767676 636363 545454 505050 4c4c4c e6e6e6 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f f8f8f8 7f847f 259725 04a504 39a439 8b948b 939393 8f8f8f 838383 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7b7b7b 7a7a7a 7a7a7a 797979 6a6a6a 575757 505050 4c4c4c 494949 595959 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 8a8a8a 01b301 00c600 00f200 59b659 929292 959595 979797 949494 878787 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 7c7c7c 717171 5a5a60 282885 040493 0c0c78 282858 46464a 828282 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 929292 0cab0c 00bd00 00f400 20dd20 919191 949494 979797 999999 9b9b9b 999999 8b8b8b 7f7f7f 7e7e7e 7e7e7e 7d7d7d 777777 626262 535360 1212be 0000cc 000092 000069 000067 2a2a55 acacac 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 949494 16a116 00b400 00e200 00f400 76a276 939393 8d978d 469e46 46a746 8e9e8e 9e9e9e 9c9c9c 8e8e8e 7e7e7e 6a6a6a 5a5a5a 57575a 1818cd 0000f0 0000a0 020260 01013d 000061 1d1d59 d6d6d6 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f a4a4a4 219821 00aa00 00c800 00f400 3bca3b 929292 4aac4a 00bc00 00a900 2f9a2f 9d9d9d 9f9f9f a0a0a0 7a7a7a 5a5a5a 595959 3131a1 0000ff 0000c6 03035b 191924 0c0c15 0c0c55 3b3b53 fbfbfb 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f b6b6b6 2b8f2b 00a200 00ad00 00eb00 07ed07 899589 43a743 00c900 009900 389538 9c9c9c 9e9e9e 9f9f9f 747474 595959 505067 0505f5 0000f0 030370 383846 484848 161639 2b2b55 727272 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f c7c7c7 348634 00b100 008d00 00d200 00f300 4c9b4c 3b9e3b 00c700 009800 3d943d 9b9b9b 9d9d9d 9e9e9e 6e6e6e 595959 2b2bad 0000ff 0000a6 252559 43434f 16167e 00009f 01018e 9c9ca1 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f d8d8d8 3e7d3e 00b100 007b00 00b800 00f100 178b17 3b9c3b 00c600 009700 3d933d 9a9a9a 9b9b9b 9d9d9d 676767 575759 0909ee 0000f0 04046b 33335a 070790 00009e 00007c 0d0d5d c7c7c7 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f eaeaea 477447 00ad00 008500 099809 00dc00 00a700 239823 00c300 009600 3f923f 989898 9a9a9a 9c9c9c 616161 42427f 0000ff 0000b9 1a1a5d 161649 00007b 00006b 00006b 1c1c56 f4f4f4 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f fcfcfc 506c50 00a900 009500 2d772d 00c100 00c500 019301 00c100 009000 4b914b 979797 999999 9a9a9a 5a5a5a 2b2ba4 0000f6 000086 2f2f53 191930 020263 000073 00009b 4d4d70 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 687368 00a400 00a400 3e653e 14a514 00d400 008b00 00bf00 008e00 4a904a 959595 979797 969696 575757 1a1ab5 0000de 000068 3f3f4b 2b2b2b 0c0c6d 0000b3 00006b 868692 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 8c8c8c 059e05 00b000 346634 408540 00ca00 009700 00bc00 008c00 498e49 939393 959595 8f8f8f 565656 0f0fb7 0000b9 030366 474747 2f2f64 0000a2 00009d 090958 c5c5c5 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f fafafa 90b090 348534 616461 636a63 06af06 00ae00 00b900 008b00 538d53 919191 939393 898989 555555 0a0aa8 00009d 070763 34345c 04049b 0000b1 1a1a4d b5b5bb 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f d0d0d0 6d6d6d 656565 2d8f2d 00b200 00b600 008900 558b55 8f8f8f 919191 818181 555555 15157e 000084 010165 010184 000091 1c1c6e ceced0 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f ececec 868686 587058 00af00 00b300 008800 538953 8d8d8d 8f8f8f 7a7a7a 545454 2c2c49 02026b 000064 000063 292974 dfdfe5 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f fcfcfc aaaaaa 219821 00b000 008600 578757 8b8b8b 8d8d8d 747474 535353 3d3d3d 1a1a23 0d0d43 474772 ededef 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f d1d6d1 389b38 2d772d 7d817d 888888 8b8b8b 6d6d6d 525252 4f4f4f 373737 777777 fafafa 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f efefef a0a0a0 838383 868686 888888 676767 515151 505050 a0a0a0 fdfdfd 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f fefefe c0c0c0 858585 868686 616161 525252 b7b7b7 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f dedede 909090 656565 cccccc 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f f5f5f5 e3e3e3 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f 7f7f7f \n+}"}, {"sha": "69a69e5872234d96cab4cbb017a0933fbfedba81", "filename": "libgo/go/image/png/testdata/pngsuite/ftp0n3p08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n3p08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n3p08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n3p08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "f1f8448d002a314307dbe7d385aa193c103f1ea9", "filename": "libgo/go/image/png/testdata/pngsuite/ftp0n3p08.sng", "status": "added", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n3p08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n3p08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp0n3p08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,288 @@\n+#SNG: from ftp0n3p08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    ( 20, 20,109)     # rgb = (0x14,0x14,0x6d)\n+    (128, 86, 86)     # rgb = (0x80,0x56,0x56)\n+    (181,181,184)     # rgb = (0xb5,0xb5,0xb8)\n+    (168, 66, 66)     # rgb = (0xa8,0x42,0x42)\n+    (159,159,159)     # rgb = (0x9f,0x9f,0x9f)\n+    (177, 32, 32)     # rgb = (0xb1,0x20,0x20)\n+    (139, 21, 21)     # rgb = (0x8b,0x15,0x15)\n+    (157,157,157)     # rgb = (0x9d,0x9d,0x9d)\n+    ( 27, 27, 89)     # rgb = (0x1b,0x1b,0x59)\n+    (155,155,155)     # rgb = (0x9b,0x9b,0x9b)\n+    (  0,  0,132)     # rgb = (0x00,0x00,0x84)\n+    (153,153,153)     # rgb = (0x99,0x99,0x99) grey60\n+    (143,167,143)     # rgb = (0x8f,0xa7,0x8f)\n+    (151,151,151)     # rgb = (0x97,0x97,0x97)\n+    (149,149,149)     # rgb = (0x95,0x95,0x95)\n+    (147,147,147)     # rgb = (0x93,0x93,0x93)\n+    ( 41, 41, 86)     # rgb = (0x29,0x29,0x56)\n+    (145,145,145)     # rgb = (0x91,0x91,0x91) grey57\n+    (  0,  0,155)     # rgb = (0x00,0x00,0x9b)\n+    (143,143,143)     # rgb = (0x8f,0x8f,0x8f) grey56\n+    (139,149,139)     # rgb = (0x8b,0x95,0x8b)\n+    ( 46, 46,167)     # rgb = (0x2e,0x2e,0xa7)\n+    (141,141,141)     # rgb = (0x8d,0x8d,0x8d)\n+    (128,  0,  0)     # rgb = (0x80,0x00,0x00)\n+    (139,139,139)     # rgb = (0x8b,0x8b,0x8b)\n+    (185,  0,  0)     # rgb = (0xb9,0x00,0x00)\n+    (137,137,137)     # rgb = (0x89,0x89,0x89)\n+    ( 12, 12,213)     # rgb = (0x0c,0x0c,0xd5)\n+    (120,117,117)     # rgb = (0x78,0x75,0x75)\n+    (135,135,135)     # rgb = (0x87,0x87,0x87) grey53\n+    (  0,  0,178)     # rgb = (0x00,0x00,0xb2)\n+    (133,133,133)     # rgb = (0x85,0x85,0x85) grey52\n+    (165,  0,  0)     # rgb = (0xa5,0x00,0x00)\n+    (222,  0,  0)     # rgb = (0xde,0x00,0x00)\n+    (129,129,129)     # rgb = (0x81,0x81,0x81)\n+    (127,127,127)     # rgb = (0x7f,0x7f,0x7f) grey50\n+    (  0,  0,158)     # rgb = (0x00,0x00,0x9e)\n+    (125,125,125)     # rgb = (0x7d,0x7d,0x7d) grey49\n+    (  0,  0,201)     # rgb = (0x00,0x00,0xc9)\n+    (123,123,123)     # rgb = (0x7b,0x7b,0x7b)\n+    (121,121,121)     # rgb = (0x79,0x79,0x79)\n+    ( 55, 55, 86)     # rgb = (0x37,0x37,0x56)\n+    (119,119,119)     # rgb = (0x77,0x77,0x77)\n+    (117,117,117)     # rgb = (0x75,0x75,0x75) grey46\n+    (115,115,115)     # rgb = (0x73,0x73,0x73) grey45\n+    ( 72,169, 72)     # rgb = (0x48,0xa9,0x48)\n+    (142,  0,  0)     # rgb = (0x8e,0x00,0x00)\n+    (  2,  2,100)     # rgb = (0x02,0x02,0x64)\n+    (  0,  0, 98)     # rgb = (0x00,0x00,0x62)\n+    ( 86,137, 86)     # rgb = (0x56,0x89,0x56)\n+    ( 40, 40,124)     # rgb = (0x28,0x28,0x7c)\n+    ( 83,139, 83)     # rgb = (0x53,0x8b,0x53)\n+    (137,137,143)     # rgb = (0x89,0x89,0x8f)\n+    (103,103,103)     # rgb = (0x67,0x67,0x67)\n+    (101,101,101)     # rgb = (0x65,0x65,0x65)\n+    ( 93,109, 93)     # rgb = (0x5d,0x6d,0x5d)\n+    ( 19,229, 19)     # rgb = (0x13,0xe5,0x13)\n+    (134, 38, 38)     # rgb = (0x86,0x26,0x26)\n+    (111, 45, 45)     # rgb = (0x6f,0x2d,0x2d)\n+    ( 68,145, 68)     # rgb = (0x44,0x91,0x44)\n+    ( 97, 97, 97)     # rgb = (0x61,0x61,0x61) grey38\n+    ( 59,157, 59)     # rgb = (0x3b,0x9d,0x3b)\n+    ( 68,137, 68)     # rgb = (0x44,0x89,0x44)\n+    ( 61,147, 61)     # rgb = (0x3d,0x93,0x3d)\n+    (  0,  0,164)     # rgb = (0x00,0x00,0xa4)\n+    (  0,243,  0)     # rgb = (0x00,0xf3,0x00)\n+    (  0,241,  0)     # rgb = (0x00,0xf1,0x00)\n+    ( 89, 89, 89)     # rgb = (0x59,0x59,0x59) grey35\n+    ( 87, 87, 87)     # rgb = (0x57,0x57,0x57) grey34\n+    ( 85, 85, 85)     # rgb = (0x55,0x55,0x55)\n+    ( 83, 83, 83)     # rgb = (0x53,0x53,0x53)\n+    ( 52,133, 52)     # rgb = (0x34,0x85,0x34)\n+    ( 81, 81, 81)     # rgb = (0x51,0x51,0x51)\n+    ( 36,151, 36)     # rgb = (0x24,0x97,0x24)\n+    ( 79, 79, 79)     # rgb = (0x4f,0x4f,0x4f) grey31\n+    ( 58, 58, 65)     # rgb = (0x3a,0x3a,0x41)\n+    ( 16, 16,186)     # rgb = (0x10,0x10,0xba)\n+    (178, 15, 15)     # rgb = (0xb2,0x0f,0x0f)\n+    (  0,199,  0)     # rgb = (0x00,0xc7,0x00)\n+    (  0,197,  0)     # rgb = (0x00,0xc5,0x00)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc) grey99\n+    (  0,195,  0)     # rgb = (0x00,0xc3,0x00)\n+    (  4,  4,151)     # rgb = (0x04,0x04,0x97)\n+    (  0,193,  0)     # rgb = (0x00,0xc1,0x00)\n+    ( 45,119, 45)     # rgb = (0x2d,0x77,0x2d)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa) grey98\n+    (  0,191,  0)     # rgb = (0x00,0xbf,0x00)\n+    (  0,  0,104)     # rgb = (0x00,0x00,0x68)\n+    (  0,189,  0)     # rgb = (0x00,0xbd,0x00)\n+    (218,212,212)     # rgb = (0xda,0xd4,0xd4)\n+    ( 16, 16,123)     # rgb = (0x10,0x10,0x7b)\n+    (  9,173,  9)     # rgb = (0x09,0xad,0x09)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (  0,185,  0)     # rgb = (0x00,0xb9,0x00)\n+    (  0,183,  0)     # rgb = (0x00,0xb7,0x00)\n+    (156,156,161)     # rgb = (0x9c,0x9c,0xa1)\n+    (246,246,246)     # rgb = (0xf6,0xf6,0xf6)\n+    ( 12,161, 12)     # rgb = (0x0c,0xa1,0x0c)\n+    (  0,179,  0)     # rgb = (0x00,0xb3,0x00)\n+    (  0,177,  0)     # rgb = (0x00,0xb1,0x00)\n+    ( 16,145, 16)     # rgb = (0x10,0x91,0x10)\n+    (  0,171,  0)     # rgb = (0x00,0xab,0x00)\n+    (242,242,242)     # rgb = (0xf2,0xf2,0xf2) grey95\n+    (  0,169,  0)     # rgb = (0x00,0xa9,0x00)\n+    (  0,167,  0)     # rgb = (0x00,0xa7,0x00)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (  0,151,  0)     # rgb = (0x00,0x97,0x00)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (  0,  0,107)     # rgb = (0x00,0x00,0x6b)\n+    (  0,141,  0)     # rgb = (0x00,0x8d,0x00)\n+    (  0,139,  0)     # rgb = (0x00,0x8b,0x00) green4\n+    (  0,137,  0)     # rgb = (0x00,0x89,0x00)\n+    (  0,135,  0)     # rgb = (0x00,0x87,0x00)\n+    ( 49, 49, 49)     # rgb = (0x31,0x31,0x31)\n+    ( 25, 25, 42)     # rgb = (0x19,0x19,0x2a)\n+    (  7,  7, 64)     # rgb = (0x07,0x07,0x40)\n+    ( 18, 18,174)     # rgb = (0x12,0x12,0xae)\n+    (  9,  9,238)     # rgb = (0x09,0x09,0xee)\n+    (211,214,211)     # rgb = (0xd3,0xd6,0xd3)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc) grey80\n+    (147,  0,  0)     # rgb = (0x93,0x00,0x00)\n+    (163, 42, 42)     # rgb = (0xa3,0x2a,0x2a)\n+    (198,198,198)     # rgb = (0xc6,0xc6,0xc6)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4) grey77\n+    (204,  0,  0)     # rgb = (0xcc,0x00,0x00)\n+    (211, 10, 10)     # rgb = (0xd3,0x0a,0x0a)\n+    (129,107,107)     # rgb = (0x81,0x6b,0x6b)\n+    (120, 62, 62)     # rgb = (0x78,0x3e,0x3e)\n+    (  3,  3,109)     # rgb = (0x03,0x03,0x6d)\n+    (  0,  0,159)     # rgb = (0x00,0x00,0x9f)\n+    ( 10, 10, 86)     # rgb = (0x0a,0x0a,0x56)\n+    ( 70, 70, 72)     # rgb = (0x46,0x46,0x48)\n+    ( 65, 65, 77)     # rgb = (0x41,0x41,0x4d)\n+    (115, 93, 93)     # rgb = (0x73,0x5d,0x5d)\n+    ( 81,  7,  7)     # rgb = (0x51,0x07,0x07)\n+    (168,168,168)     # rgb = (0xa8,0xa8,0xa8) grey66\n+    (237,237,239)     # rgb = (0xed,0xed,0xef)\n+    (160,160,160)     # rgb = (0xa0,0xa0,0xa0)\n+    (158,158,158)     # rgb = (0x9e,0x9e,0x9e) grey62\n+    (156,156,156)     # rgb = (0x9c,0x9c,0x9c) grey61\n+    (  0,  0,185)     # rgb = (0x00,0x00,0xb9)\n+    (154,154,154)     # rgb = (0x9a,0x9a,0x9a)\n+    (178,  0,  0)     # rgb = (0xb2,0x00,0x00)\n+    (152,152,152)     # rgb = (0x98,0x98,0x98)\n+    (235,  0,  0)     # rgb = (0xeb,0x00,0x00)\n+    (150,150,150)     # rgb = (0x96,0x96,0x96) grey59\n+    (158,  0,  0)     # rgb = (0x9e,0x00,0x00)\n+    (148,148,148)     # rgb = (0x94,0x94,0x94) grey58\n+    ( 19, 19, 28)     # rgb = (0x13,0x13,0x1c)\n+    (146,146,146)     # rgb = (0x92,0x92,0x92)\n+    (144,144,144)     # rgb = (0x90,0x90,0x90)\n+    (142,142,142)     # rgb = (0x8e,0x8e,0x8e)\n+    (  0,  0,145)     # rgb = (0x00,0x00,0x91)\n+    (138,138,138)     # rgb = (0x8a,0x8a,0x8a) grey54\n+    (136,136,136)     # rgb = (0x88,0x88,0x88)\n+    (118,162,118)     # rgb = (0x76,0xa2,0x76)\n+    (133,136,133)     # rgb = (0x85,0x88,0x85)\n+    (134,134,134)     # rgb = (0x86,0x86,0x86)\n+    (132,132,132)     # rgb = (0x84,0x84,0x84)\n+    (120, 15, 15)     # rgb = (0x78,0x0f,0x0f)\n+    (130,130,130)     # rgb = (0x82,0x82,0x82) grey51\n+    (126,130,126)     # rgb = (0x7e,0x82,0x7e)\n+    (126,126,126)     # rgb = (0x7e,0x7e,0x7e)\n+    (124,124,124)     # rgb = (0x7c,0x7c,0x7c)\n+    (122,122,122)     # rgb = (0x7a,0x7a,0x7a) grey48\n+    ( 74,192, 74)     # rgb = (0x4a,0xc0,0x4a)\n+    (118,118,118)     # rgb = (0x76,0x76,0x76)\n+    (116,116,116)     # rgb = (0x74,0x74,0x74)\n+    (114,114,114)     # rgb = (0x72,0x72,0x72)\n+    (112,112,112)     # rgb = (0x70,0x70,0x70) grey44\n+    (152,  0,  0)     # rgb = (0x98,0x00,0x00)\n+    (110,110,110)     # rgb = (0x6e,0x6e,0x6e) grey43\n+    (106,112,106)     # rgb = (0x6a,0x70,0x6a)\n+    (122,102,102)     # rgb = (0x7a,0x66,0x66)\n+    (106,106,106)     # rgb = (0x6a,0x6a,0x6a)\n+    (132,  0,  0)     # rgb = (0x84,0x00,0x00)\n+    ( 68,162, 68)     # rgb = (0x44,0xa2,0x44)\n+    ( 75,150, 75)     # rgb = (0x4b,0x96,0x4b)\n+    ( 97,100, 97)     # rgb = (0x61,0x64,0x61)\n+    ( 98, 98, 98)     # rgb = (0x62,0x62,0x62)\n+    (  0,244,  0)     # rgb = (0x00,0xf4,0x00)\n+    ( 56,152, 56)     # rgb = (0x38,0x98,0x38)\n+    ( 92, 92, 92)     # rgb = (0x5c,0x5c,0x5c) grey36\n+    ( 90, 90, 90)     # rgb = (0x5a,0x5a,0x5a)\n+    (  0,230,  0)     # rgb = (0x00,0xe6,0x00)\n+    (  2,  2, 93)     # rgb = (0x02,0x02,0x5d)\n+    ( 66,120, 66)     # rgb = (0x42,0x78,0x42)\n+    ( 86, 86, 86)     # rgb = (0x56,0x56,0x56)\n+    (  0,  0,240)     # rgb = (0x00,0x00,0xf0)\n+    ( 46,148, 46)     # rgb = (0x2e,0x94,0x2e)\n+    ( 71,104, 71)     # rgb = (0x47,0x68,0x47)\n+    ( 49, 49, 96)     # rgb = (0x31,0x31,0x60)\n+    (  0,216,  0)     # rgb = (0x00,0xd8,0x00)\n+    ( 82, 82, 82)     # rgb = (0x52,0x52,0x52) grey32\n+    ( 80, 80, 80)     # rgb = (0x50,0x50,0x50)\n+    (  0,206,  0)     # rgb = (0x00,0xce,0x00)\n+    ( 33,152, 33)     # rgb = (0x21,0x98,0x21)\n+    (255,255,255)     # rgb = (0xff,0xff,0xff) grey100\n+    (  0,200,  0)     # rgb = (0x00,0xc8,0x00)\n+    ( 76, 76, 76)     # rgb = (0x4c,0x4c,0x4c)\n+    (253,253,253)     # rgb = (0xfd,0xfd,0xfd)\n+    (  0,198,  0)     # rgb = (0x00,0xc6,0x00)\n+    (  0,  0,157)     # rgb = (0x00,0x00,0x9d)\n+    (111,107,107)     # rgb = (0x6f,0x6b,0x6b)\n+    (234, 14, 14)     # rgb = (0xea,0x0e,0x0e)\n+    ( 72, 72, 72)     # rgb = (0x48,0x48,0x48)\n+    (  0,188,  0)     # rgb = (0x00,0xbc,0x00)\n+    ( 52,102, 52)     # rgb = (0x34,0x66,0x34)\n+    (  2,  2,245)     # rgb = (0x02,0x02,0xf5)\n+    ( 83, 83, 96)     # rgb = (0x53,0x53,0x60)\n+    (  0,176,  0)     # rgb = (0x00,0xb0,0x00)\n+    (  0,174,  0)     # rgb = (0x00,0xae,0x00)\n+    (183,  0,  0)     # rgb = (0xb7,0x00,0x00)\n+    (  0,164,  0)     # rgb = (0x00,0xa4,0x00)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (  0,162,  0)     # rgb = (0x00,0xa2,0x00)\n+    (143, 79, 79)     # rgb = (0x8f,0x4f,0x4f)\n+    (149, 52, 52)     # rgb = (0x95,0x34,0x34)\n+    (  0,152,  0)     # rgb = (0x00,0x98,0x00)\n+    (  0,150,  0)     # rgb = (0x00,0x96,0x00)\n+    (  0,146,  0)     # rgb = (0x00,0x92,0x00)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (  0,140,  0)     # rgb = (0x00,0x8c,0x00)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3) grey89\n+    (  0,128,  0)     # rgb = (0x00,0x80,0x00)\n+    (146,  6,  6)     # rgb = (0x92,0x06,0x06)\n+    (  1,  1,111)     # rgb = (0x01,0x01,0x6f)\n+    (100, 86, 89)     # rgb = (0x64,0x56,0x59)\n+    (  0,  0,100)     # rgb = (0x00,0x00,0x64)\n+    ( 78, 78,107)     # rgb = (0x4e,0x4e,0x6b)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf) grey81\n+    (221,221,224)     # rgb = (0xdd,0xdd,0xe0)\n+    (  0,  0,123)     # rgb = (0x00,0x00,0x7b)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9) grey79\n+    ( 22, 22, 65)     # rgb = (0x16,0x16,0x41)\n+    ( 33, 33, 89)     # rgb = (0x21,0x21,0x59)\n+    ( 87, 87, 89)     # rgb = (0x57,0x57,0x59)\n+    ( 68, 68,120)     # rgb = (0x44,0x44,0x78)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf) grey75\n+    (235,221,221)     # rgb = (0xeb,0xdd,0xdd)\n+    ( 45, 45, 84)     # rgb = (0x2d,0x2d,0x54)\n+    ( 10, 10, 96)     # rgb = (0x0a,0x0a,0x60)\n+    (  0,  0,255)     # rgb = (0x00,0x00,0xff) blue1\n+    (191,125,125)     # rgb = (0xbf,0x7d,0x7d)\n+}\n+IMAGE {\n+    pixels hex\n+2323232323232323232323232323232323232323232323232323232323232323\n+2323232323232323232323232323232323232323232323232323232323232323\n+2323232323232323232323232323e0ea66232323232323232323232323232323\n+2323232323232323232323de02a336e43903f4f0232323232323232323232323\n+232323232323232369ef1a358680062eb017b0ab7af459502323232323232323\n+2323232323667c0ea9cc803979937917a03a878787b0e2ae8ae75c2323232323\n+23235cea8ea72c8639e293208f7d7d19200639a017ab2ee4ac2ca7097c692323\n+23237823a72b2bda198fd54ddad90521219191217d1917cc2b2b2b2baf8e2323\n+2323e81f9b9f27014d05d91c2a2a2a7f037ecdcd7e7a012a2a2aaab7c2ef2323\n+23236c9f229d981a23282828282828282828282828282828a7b445c3c8de2323\n+23235ca249d63d140f139f272727272727272727a5a528af44c3c8ce43232323\n+2323239a62ca41a6960e0d941da4a4a4a4a4a4a4a4a9b732525a1084a1232323\n+232323965b58b53811940d0b090b1823a3a3252ab4d24c269957571088232323\n+232323946162b9b59c0f14b12d0c8b8c98a3afb8ed1bbd82ba74300877232323\n+23232388c565c7b5a6962dcf67be07048aa5b84315f326ba7395832950232323\n+23232302bed8d4b94214b1c7dbb68c8b04a843e6d1bd814bceeb10a923232323\n+2323237b47636ec441b23d4edb3f09078bac4315f340ec855a82995f23232323\n+23232359bb63e15d42643dca6b3f8e090735ed76bd81c05224e9f27b23232323\n+2323236cbbd47161c1684951dc3f908e8c3ceef38d08ebe96d6d086023232323\n+23232350bf67dc54534fdd53ddb20d0b8eb815d10af1732fe312e62323232323\n+23232323add6d6bf61c16f566eb20e0d924475bd578572001e6d342323232323\n+2323232316d8d3d03ec76bcfdf3b0f0e13bc4c8d2f84c040cb837b2323232323\n+23232323550c47b3365bd45d6f33110f1a4575cbf2c0521e0802232323232323\n+232323232323e7ac36be625e7031131122455a0a2f0a9900e723232323232323\n+232323232323236a9e37d36270331613a545f181e53032e82323232323232323\n+23232323232323235088c5d371311816a8464b7374ee89232323232323232323\n+2323232323232323232377b654a29b18acc24a722a5523232323232323232323\n+2323232323232323232323d78a9f9e9b3548c38ac92323232323232323232323\n+232323232323232323232323c6ef1f9e3cc20223232323232323232323232323\n+2323232323232323232323232323e89736782323232323232323232323232323\n+23232323232323232323232323232360e0232323232323232323232323232323\n+2323232323232323232323232323232323232323232323232323232323232323\n+}"}, {"sha": "a6c9f35a86271c056e955f637a8769381eb03827", "filename": "libgo/go/image/png/testdata/pngsuite/ftp1n3p08.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp1n3p08.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp1n3p08.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp1n3p08.png?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd"}, {"sha": "2d179e2e991d64eab2b4b1453ed17bd92e0a1551", "filename": "libgo/go/image/png/testdata/pngsuite/ftp1n3p08.sng", "status": "added", "additions": 290, "deletions": 0, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp1n3p08.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp1n3p08.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fftp1n3p08.sng?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,290 @@\n+#SNG: from ftp1n3p08.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    (255,255,255)     # rgb = (0xff,0xff,0xff) grey100\n+    (128, 86, 86)     # rgb = (0x80,0x56,0x56)\n+    (181,181,184)     # rgb = (0xb5,0xb5,0xb8)\n+    (168, 66, 66)     # rgb = (0xa8,0x42,0x42)\n+    (159,159,159)     # rgb = (0x9f,0x9f,0x9f)\n+    (177, 32, 32)     # rgb = (0xb1,0x20,0x20)\n+    (139, 21, 21)     # rgb = (0x8b,0x15,0x15)\n+    (157,157,157)     # rgb = (0x9d,0x9d,0x9d)\n+    ( 27, 27, 89)     # rgb = (0x1b,0x1b,0x59)\n+    (155,155,155)     # rgb = (0x9b,0x9b,0x9b)\n+    (  0,  0,132)     # rgb = (0x00,0x00,0x84)\n+    (153,153,153)     # rgb = (0x99,0x99,0x99) grey60\n+    (143,167,143)     # rgb = (0x8f,0xa7,0x8f)\n+    (151,151,151)     # rgb = (0x97,0x97,0x97)\n+    (149,149,149)     # rgb = (0x95,0x95,0x95)\n+    (147,147,147)     # rgb = (0x93,0x93,0x93)\n+    ( 41, 41, 86)     # rgb = (0x29,0x29,0x56)\n+    (145,145,145)     # rgb = (0x91,0x91,0x91) grey57\n+    (  0,  0,155)     # rgb = (0x00,0x00,0x9b)\n+    (143,143,143)     # rgb = (0x8f,0x8f,0x8f) grey56\n+    (139,149,139)     # rgb = (0x8b,0x95,0x8b)\n+    ( 46, 46,167)     # rgb = (0x2e,0x2e,0xa7)\n+    (141,141,141)     # rgb = (0x8d,0x8d,0x8d)\n+    (128,  0,  0)     # rgb = (0x80,0x00,0x00)\n+    (139,139,139)     # rgb = (0x8b,0x8b,0x8b)\n+    (185,  0,  0)     # rgb = (0xb9,0x00,0x00)\n+    (137,137,137)     # rgb = (0x89,0x89,0x89)\n+    ( 12, 12,213)     # rgb = (0x0c,0x0c,0xd5)\n+    (120,117,117)     # rgb = (0x78,0x75,0x75)\n+    (135,135,135)     # rgb = (0x87,0x87,0x87) grey53\n+    (  0,  0,178)     # rgb = (0x00,0x00,0xb2)\n+    (133,133,133)     # rgb = (0x85,0x85,0x85) grey52\n+    (165,  0,  0)     # rgb = (0xa5,0x00,0x00)\n+    (222,  0,  0)     # rgb = (0xde,0x00,0x00)\n+    (129,129,129)     # rgb = (0x81,0x81,0x81)\n+    (127,127,127)     # rgb = (0x7f,0x7f,0x7f) grey50\n+    (  0,  0,158)     # rgb = (0x00,0x00,0x9e)\n+    (125,125,125)     # rgb = (0x7d,0x7d,0x7d) grey49\n+    (  0,  0,201)     # rgb = (0x00,0x00,0xc9)\n+    (123,123,123)     # rgb = (0x7b,0x7b,0x7b)\n+    (121,121,121)     # rgb = (0x79,0x79,0x79)\n+    ( 55, 55, 86)     # rgb = (0x37,0x37,0x56)\n+    (119,119,119)     # rgb = (0x77,0x77,0x77)\n+    (117,117,117)     # rgb = (0x75,0x75,0x75) grey46\n+    (115,115,115)     # rgb = (0x73,0x73,0x73) grey45\n+    ( 72,169, 72)     # rgb = (0x48,0xa9,0x48)\n+    (142,  0,  0)     # rgb = (0x8e,0x00,0x00)\n+    (  2,  2,100)     # rgb = (0x02,0x02,0x64)\n+    (  0,  0, 98)     # rgb = (0x00,0x00,0x62)\n+    ( 86,137, 86)     # rgb = (0x56,0x89,0x56)\n+    ( 40, 40,124)     # rgb = (0x28,0x28,0x7c)\n+    ( 83,139, 83)     # rgb = (0x53,0x8b,0x53)\n+    (137,137,143)     # rgb = (0x89,0x89,0x8f)\n+    (103,103,103)     # rgb = (0x67,0x67,0x67)\n+    (101,101,101)     # rgb = (0x65,0x65,0x65)\n+    ( 93,109, 93)     # rgb = (0x5d,0x6d,0x5d)\n+    ( 19,229, 19)     # rgb = (0x13,0xe5,0x13)\n+    (134, 38, 38)     # rgb = (0x86,0x26,0x26)\n+    (111, 45, 45)     # rgb = (0x6f,0x2d,0x2d)\n+    ( 68,145, 68)     # rgb = (0x44,0x91,0x44)\n+    ( 97, 97, 97)     # rgb = (0x61,0x61,0x61) grey38\n+    ( 59,157, 59)     # rgb = (0x3b,0x9d,0x3b)\n+    ( 68,137, 68)     # rgb = (0x44,0x89,0x44)\n+    ( 61,147, 61)     # rgb = (0x3d,0x93,0x3d)\n+    (  0,  0,164)     # rgb = (0x00,0x00,0xa4)\n+    (  0,243,  0)     # rgb = (0x00,0xf3,0x00)\n+    (  0,241,  0)     # rgb = (0x00,0xf1,0x00)\n+    ( 89, 89, 89)     # rgb = (0x59,0x59,0x59) grey35\n+    ( 87, 87, 87)     # rgb = (0x57,0x57,0x57) grey34\n+    ( 85, 85, 85)     # rgb = (0x55,0x55,0x55)\n+    ( 83, 83, 83)     # rgb = (0x53,0x53,0x53)\n+    ( 52,133, 52)     # rgb = (0x34,0x85,0x34)\n+    ( 81, 81, 81)     # rgb = (0x51,0x51,0x51)\n+    ( 36,151, 36)     # rgb = (0x24,0x97,0x24)\n+    ( 79, 79, 79)     # rgb = (0x4f,0x4f,0x4f) grey31\n+    ( 58, 58, 65)     # rgb = (0x3a,0x3a,0x41)\n+    ( 16, 16,186)     # rgb = (0x10,0x10,0xba)\n+    (178, 15, 15)     # rgb = (0xb2,0x0f,0x0f)\n+    (  0,199,  0)     # rgb = (0x00,0xc7,0x00)\n+    (  0,197,  0)     # rgb = (0x00,0xc5,0x00)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc) grey99\n+    (  0,195,  0)     # rgb = (0x00,0xc3,0x00)\n+    (  4,  4,151)     # rgb = (0x04,0x04,0x97)\n+    (  0,193,  0)     # rgb = (0x00,0xc1,0x00)\n+    ( 45,119, 45)     # rgb = (0x2d,0x77,0x2d)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa) grey98\n+    (  0,191,  0)     # rgb = (0x00,0xbf,0x00)\n+    (  0,  0,104)     # rgb = (0x00,0x00,0x68)\n+    (  0,189,  0)     # rgb = (0x00,0xbd,0x00)\n+    (218,212,212)     # rgb = (0xda,0xd4,0xd4)\n+    ( 16, 16,123)     # rgb = (0x10,0x10,0x7b)\n+    (  9,173,  9)     # rgb = (0x09,0xad,0x09)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (  0,185,  0)     # rgb = (0x00,0xb9,0x00)\n+    (  0,183,  0)     # rgb = (0x00,0xb7,0x00)\n+    (156,156,161)     # rgb = (0x9c,0x9c,0xa1)\n+    (246,246,246)     # rgb = (0xf6,0xf6,0xf6)\n+    ( 12,161, 12)     # rgb = (0x0c,0xa1,0x0c)\n+    (  0,179,  0)     # rgb = (0x00,0xb3,0x00)\n+    (  0,177,  0)     # rgb = (0x00,0xb1,0x00)\n+    ( 16,145, 16)     # rgb = (0x10,0x91,0x10)\n+    (  0,171,  0)     # rgb = (0x00,0xab,0x00)\n+    (242,242,242)     # rgb = (0xf2,0xf2,0xf2) grey95\n+    (  0,169,  0)     # rgb = (0x00,0xa9,0x00)\n+    (  0,167,  0)     # rgb = (0x00,0xa7,0x00)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (  0,151,  0)     # rgb = (0x00,0x97,0x00)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (  0,  0,107)     # rgb = (0x00,0x00,0x6b)\n+    (  0,141,  0)     # rgb = (0x00,0x8d,0x00)\n+    (  0,139,  0)     # rgb = (0x00,0x8b,0x00) green4\n+    (  0,137,  0)     # rgb = (0x00,0x89,0x00)\n+    (  0,135,  0)     # rgb = (0x00,0x87,0x00)\n+    ( 49, 49, 49)     # rgb = (0x31,0x31,0x31)\n+    ( 25, 25, 42)     # rgb = (0x19,0x19,0x2a)\n+    (  7,  7, 64)     # rgb = (0x07,0x07,0x40)\n+    ( 18, 18,174)     # rgb = (0x12,0x12,0xae)\n+    (  9,  9,238)     # rgb = (0x09,0x09,0xee)\n+    (211,214,211)     # rgb = (0xd3,0xd6,0xd3)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc) grey80\n+    (147,  0,  0)     # rgb = (0x93,0x00,0x00)\n+    (163, 42, 42)     # rgb = (0xa3,0x2a,0x2a)\n+    (198,198,198)     # rgb = (0xc6,0xc6,0xc6)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4) grey77\n+    (204,  0,  0)     # rgb = (0xcc,0x00,0x00)\n+    (211, 10, 10)     # rgb = (0xd3,0x0a,0x0a)\n+    (129,107,107)     # rgb = (0x81,0x6b,0x6b)\n+    (120, 62, 62)     # rgb = (0x78,0x3e,0x3e)\n+    (  3,  3,109)     # rgb = (0x03,0x03,0x6d)\n+    (  0,  0,159)     # rgb = (0x00,0x00,0x9f)\n+    ( 10, 10, 86)     # rgb = (0x0a,0x0a,0x56)\n+    ( 70, 70, 72)     # rgb = (0x46,0x46,0x48)\n+    ( 65, 65, 77)     # rgb = (0x41,0x41,0x4d)\n+    (115, 93, 93)     # rgb = (0x73,0x5d,0x5d)\n+    ( 81,  7,  7)     # rgb = (0x51,0x07,0x07)\n+    (168,168,168)     # rgb = (0xa8,0xa8,0xa8) grey66\n+    (237,237,239)     # rgb = (0xed,0xed,0xef)\n+    (160,160,160)     # rgb = (0xa0,0xa0,0xa0)\n+    (158,158,158)     # rgb = (0x9e,0x9e,0x9e) grey62\n+    (156,156,156)     # rgb = (0x9c,0x9c,0x9c) grey61\n+    (  0,  0,185)     # rgb = (0x00,0x00,0xb9)\n+    (154,154,154)     # rgb = (0x9a,0x9a,0x9a)\n+    (178,  0,  0)     # rgb = (0xb2,0x00,0x00)\n+    (152,152,152)     # rgb = (0x98,0x98,0x98)\n+    (235,  0,  0)     # rgb = (0xeb,0x00,0x00)\n+    (150,150,150)     # rgb = (0x96,0x96,0x96) grey59\n+    (158,  0,  0)     # rgb = (0x9e,0x00,0x00)\n+    (148,148,148)     # rgb = (0x94,0x94,0x94) grey58\n+    ( 19, 19, 28)     # rgb = (0x13,0x13,0x1c)\n+    (146,146,146)     # rgb = (0x92,0x92,0x92)\n+    (144,144,144)     # rgb = (0x90,0x90,0x90)\n+    (142,142,142)     # rgb = (0x8e,0x8e,0x8e)\n+    (  0,  0,145)     # rgb = (0x00,0x00,0x91)\n+    (138,138,138)     # rgb = (0x8a,0x8a,0x8a) grey54\n+    (136,136,136)     # rgb = (0x88,0x88,0x88)\n+    (118,162,118)     # rgb = (0x76,0xa2,0x76)\n+    (133,136,133)     # rgb = (0x85,0x88,0x85)\n+    (134,134,134)     # rgb = (0x86,0x86,0x86)\n+    (132,132,132)     # rgb = (0x84,0x84,0x84)\n+    (120, 15, 15)     # rgb = (0x78,0x0f,0x0f)\n+    (130,130,130)     # rgb = (0x82,0x82,0x82) grey51\n+    (126,130,126)     # rgb = (0x7e,0x82,0x7e)\n+    (126,126,126)     # rgb = (0x7e,0x7e,0x7e)\n+    (124,124,124)     # rgb = (0x7c,0x7c,0x7c)\n+    (122,122,122)     # rgb = (0x7a,0x7a,0x7a) grey48\n+    ( 74,192, 74)     # rgb = (0x4a,0xc0,0x4a)\n+    (118,118,118)     # rgb = (0x76,0x76,0x76)\n+    (116,116,116)     # rgb = (0x74,0x74,0x74)\n+    (114,114,114)     # rgb = (0x72,0x72,0x72)\n+    (112,112,112)     # rgb = (0x70,0x70,0x70) grey44\n+    (152,  0,  0)     # rgb = (0x98,0x00,0x00)\n+    (110,110,110)     # rgb = (0x6e,0x6e,0x6e) grey43\n+    (106,112,106)     # rgb = (0x6a,0x70,0x6a)\n+    (122,102,102)     # rgb = (0x7a,0x66,0x66)\n+    (106,106,106)     # rgb = (0x6a,0x6a,0x6a)\n+    (132,  0,  0)     # rgb = (0x84,0x00,0x00)\n+    ( 68,162, 68)     # rgb = (0x44,0xa2,0x44)\n+    ( 75,150, 75)     # rgb = (0x4b,0x96,0x4b)\n+    ( 97,100, 97)     # rgb = (0x61,0x64,0x61)\n+    ( 98, 98, 98)     # rgb = (0x62,0x62,0x62)\n+    (  0,244,  0)     # rgb = (0x00,0xf4,0x00)\n+    ( 56,152, 56)     # rgb = (0x38,0x98,0x38)\n+    ( 92, 92, 92)     # rgb = (0x5c,0x5c,0x5c) grey36\n+    ( 90, 90, 90)     # rgb = (0x5a,0x5a,0x5a)\n+    (  0,230,  0)     # rgb = (0x00,0xe6,0x00)\n+    (  2,  2, 93)     # rgb = (0x02,0x02,0x5d)\n+    ( 66,120, 66)     # rgb = (0x42,0x78,0x42)\n+    ( 86, 86, 86)     # rgb = (0x56,0x56,0x56)\n+    (  0,  0,240)     # rgb = (0x00,0x00,0xf0)\n+    ( 46,148, 46)     # rgb = (0x2e,0x94,0x2e)\n+    ( 71,104, 71)     # rgb = (0x47,0x68,0x47)\n+    ( 49, 49, 96)     # rgb = (0x31,0x31,0x60)\n+    (  0,216,  0)     # rgb = (0x00,0xd8,0x00)\n+    ( 82, 82, 82)     # rgb = (0x52,0x52,0x52) grey32\n+    ( 80, 80, 80)     # rgb = (0x50,0x50,0x50)\n+    (  0,206,  0)     # rgb = (0x00,0xce,0x00)\n+    ( 33,152, 33)     # rgb = (0x21,0x98,0x21)\n+    ( 20, 20,109)     # rgb = (0x14,0x14,0x6d)\n+    (  0,200,  0)     # rgb = (0x00,0xc8,0x00)\n+    ( 76, 76, 76)     # rgb = (0x4c,0x4c,0x4c)\n+    (253,253,253)     # rgb = (0xfd,0xfd,0xfd)\n+    (  0,198,  0)     # rgb = (0x00,0xc6,0x00)\n+    (  0,  0,157)     # rgb = (0x00,0x00,0x9d)\n+    (111,107,107)     # rgb = (0x6f,0x6b,0x6b)\n+    (234, 14, 14)     # rgb = (0xea,0x0e,0x0e)\n+    ( 72, 72, 72)     # rgb = (0x48,0x48,0x48)\n+    (  0,188,  0)     # rgb = (0x00,0xbc,0x00)\n+    ( 52,102, 52)     # rgb = (0x34,0x66,0x34)\n+    (  2,  2,245)     # rgb = (0x02,0x02,0xf5)\n+    ( 83, 83, 96)     # rgb = (0x53,0x53,0x60)\n+    (  0,176,  0)     # rgb = (0x00,0xb0,0x00)\n+    (  0,174,  0)     # rgb = (0x00,0xae,0x00)\n+    (183,  0,  0)     # rgb = (0xb7,0x00,0x00)\n+    (  0,164,  0)     # rgb = (0x00,0xa4,0x00)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (  0,162,  0)     # rgb = (0x00,0xa2,0x00)\n+    (143, 79, 79)     # rgb = (0x8f,0x4f,0x4f)\n+    (149, 52, 52)     # rgb = (0x95,0x34,0x34)\n+    (  0,152,  0)     # rgb = (0x00,0x98,0x00)\n+    (  0,150,  0)     # rgb = (0x00,0x96,0x00)\n+    (  0,146,  0)     # rgb = (0x00,0x92,0x00)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (  0,140,  0)     # rgb = (0x00,0x8c,0x00)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3) grey89\n+    (  0,128,  0)     # rgb = (0x00,0x80,0x00)\n+    (146,  6,  6)     # rgb = (0x92,0x06,0x06)\n+    (  1,  1,111)     # rgb = (0x01,0x01,0x6f)\n+    (100, 86, 89)     # rgb = (0x64,0x56,0x59)\n+    (  0,  0,100)     # rgb = (0x00,0x00,0x64)\n+    ( 78, 78,107)     # rgb = (0x4e,0x4e,0x6b)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf) grey81\n+    (221,221,224)     # rgb = (0xdd,0xdd,0xe0)\n+    (  0,  0,123)     # rgb = (0x00,0x00,0x7b)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9) grey79\n+    ( 22, 22, 65)     # rgb = (0x16,0x16,0x41)\n+    ( 33, 33, 89)     # rgb = (0x21,0x21,0x59)\n+    ( 87, 87, 89)     # rgb = (0x57,0x57,0x59)\n+    ( 68, 68,120)     # rgb = (0x44,0x44,0x78)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf) grey75\n+    (235,221,221)     # rgb = (0xeb,0xdd,0xdd)\n+    ( 45, 45, 84)     # rgb = (0x2d,0x2d,0x54)\n+    ( 10, 10, 96)     # rgb = (0x0a,0x0a,0x60)\n+    (  0,  0,255)     # rgb = (0x00,0x00,0xff) blue1\n+    (191,125,125)     # rgb = (0xbf,0x7d,0x7d)\n+}\n+tRNS {\n+ 0}\n+IMAGE {\n+    pixels hex\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+0000000000000000000000000000e0ea66000000000000000000000000000000\n+0000000000000000000000de02a336e43903f4f0000000000000000000000000\n+000000000000000069ef1a358680062eb017b0ab7af459500000000000000000\n+0000000000667c0ea9cc803979937917a03a878787b0e2ae8ae75c0000000000\n+00005cea8ea72c8639e293208f7d7d19200639a017ab2ee4ac2ca7097c690000\n+00007823a72b2bda198fd54ddad90521219191217d1917cc2b2b2b2baf8e0000\n+0000e81f9b9f27014d05d91c2a2a2a7f037ecdcd7e7a012a2a2aaab7c2ef0000\n+00006c9f229d981a23282828282828282828282828282828a7b445c3c8de0000\n+00005ca249d63d140f139f272727272727272727a5a528af44c3c8ce43000000\n+0000009a62ca41a6960e0d941da4a4a4a4a4a4a4a4a9b732525a1084a1000000\n+000000965b58b53811940d0b090b1823a3a3252ab4d24c269957571088000000\n+000000946162b9b59c0f14b12d0c8b8c98a3afb8ed1bbd82ba74300877000000\n+00000088c565c7b5a6962dcf67be07048aa5b84315f326ba7395832950000000\n+00000002bed8d4b94214b1c7dbb68c8b04a843e6d1bd814bceeb10a900000000\n+0000007b47636ec441b23d4edb3f09078bac4315f340ec855a82995f00000000\n+00000059bb63e15d42643dca6b3f8e090735ed76bd81c05224e9f27b00000000\n+0000006cbbd47161c1684951dc3f908e8c3ceef38d08ebe96d6d086000000000\n+00000050bf67dc54534fdd53ddb20d0b8eb815d10af1732fe312e60000000000\n+00000000add6d6bf61c16f566eb20e0d924475bd578572c61e6d340000000000\n+0000000016d8d3d03ec76bcfdf3b0f0e13bc4c8d2f84c040cb837b0000000000\n+00000000550c47b3365bd45d6f33110f1a4575cbf2c0521e0802000000000000\n+000000000000e7ac36be625e7031131122455a0a2f0a99c6e700000000000000\n+000000000000006a9e37d36270331613a545f181e53032e80000000000000000\n+00000000000000005088c5d371311816a8464b7374ee89000000000000000000\n+0000000000000000000077b654a29b18acc24a722a5500000000000000000000\n+0000000000000000000000d78a9f9e9b3548c38ac90000000000000000000000\n+00000000000000000000000000ef1f9e3cc20200000000000000000000000000\n+0000000000000000000000000000e89736780000000000000000000000000000\n+00000000000000000000000000000060e0000000000000000000000000000000\n+0000000000000000000000000000000000000000000000000000000000000000\n+}"}, {"sha": "19dbf41cce1bb2f84f7dc709686b1ca9005a2709", "filename": "libgo/go/mime/testdata/test.types.plan9", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fmime%2Ftestdata%2Ftest.types.plan9", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fmime%2Ftestdata%2Ftest.types.plan9", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Ftestdata%2Ftest.types.plan9?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,8 @@\n+# Copyright 2013 The Go Authors. All rights reserved.\n+# Use of this source code is governed by a BSD-style\n+# license that can be found in the LICENSE file.\n+\n+\n+ # mime package test\n+.t1\t\tapplication\ttest\t\t-\t\ty # Simple test\t\n+.t2\t\ttext\t\ttest\t\t-\t\ty # Text test\t"}, {"sha": "681dff193aa1dd6ef5d0f31c88ed3c9d0ceb85c7", "filename": "libgo/go/net/http/serve_test.go", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserve_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -5173,3 +5173,142 @@ func TestServerDuplicateBackgroundRead(t *testing.T) {\n \t}\n \twg.Wait()\n }\n+\n+// Test that the bufio.Reader returned by Hijack includes any buffered\n+// byte (from the Server's backgroundRead) in its buffer. We want the\n+// Handler code to be able to tell that a byte is available via\n+// bufio.Reader.Buffered(), without resorting to Reading it\n+// (potentially blocking) to get at it.\n+func TestServerHijackGetsBackgroundByte(t *testing.T) {\n+\tif runtime.GOOS == \"plan9\" {\n+\t\tt.Skip(\"skipping test; see https://golang.org/issue/18657\")\n+\t}\n+\tsetParallel(t)\n+\tdefer afterTest(t)\n+\tdone := make(chan struct{})\n+\tinHandler := make(chan bool, 1)\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tdefer close(done)\n+\n+\t\t// Tell the client to send more data after the GET request.\n+\t\tinHandler <- true\n+\n+\t\t// Wait until the HTTP server sees the extra data\n+\t\t// after the GET request. The HTTP server fires the\n+\t\t// close notifier here, assuming it's a pipelined\n+\t\t// request, as documented.\n+\t\tselect {\n+\t\tcase <-w.(CloseNotifier).CloseNotify():\n+\t\tcase <-time.After(5 * time.Second):\n+\t\t\tt.Error(\"timeout\")\n+\t\t\treturn\n+\t\t}\n+\n+\t\tconn, buf, err := w.(Hijacker).Hijack()\n+\t\tif err != nil {\n+\t\t\tt.Error(err)\n+\t\t\treturn\n+\t\t}\n+\t\tdefer conn.Close()\n+\t\tn := buf.Reader.Buffered()\n+\t\tif n != 1 {\n+\t\t\tt.Errorf(\"buffered data = %d; want 1\", n)\n+\t\t}\n+\t\tpeek, err := buf.Reader.Peek(3)\n+\t\tif string(peek) != \"foo\" || err != nil {\n+\t\t\tt.Errorf(\"Peek = %q, %v; want foo, nil\", peek, err)\n+\t\t}\n+\t}))\n+\tdefer ts.Close()\n+\n+\tcn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer cn.Close()\n+\tif _, err := cn.Write([]byte(\"GET / HTTP/1.1\\r\\nHost: e.com\\r\\n\\r\\n\")); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\t<-inHandler\n+\tif _, err := cn.Write([]byte(\"foo\")); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif err := cn.(*net.TCPConn).CloseWrite(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tselect {\n+\tcase <-done:\n+\tcase <-time.After(2 * time.Second):\n+\t\tt.Error(\"timeout\")\n+\t}\n+}\n+\n+// Like TestServerHijackGetsBackgroundByte above but sending a\n+// immediate 1MB of data to the server to fill up the server's 4KB\n+// buffer.\n+func TestServerHijackGetsBackgroundByte_big(t *testing.T) {\n+\tif runtime.GOOS == \"plan9\" {\n+\t\tt.Skip(\"skipping test; see https://golang.org/issue/18657\")\n+\t}\n+\tsetParallel(t)\n+\tdefer afterTest(t)\n+\tdone := make(chan struct{})\n+\tconst size = 8 << 10\n+\tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tdefer close(done)\n+\n+\t\t// Wait until the HTTP server sees the extra data\n+\t\t// after the GET request. The HTTP server fires the\n+\t\t// close notifier here, assuming it's a pipelined\n+\t\t// request, as documented.\n+\t\tselect {\n+\t\tcase <-w.(CloseNotifier).CloseNotify():\n+\t\tcase <-time.After(5 * time.Second):\n+\t\t\tt.Error(\"timeout\")\n+\t\t\treturn\n+\t\t}\n+\n+\t\tconn, buf, err := w.(Hijacker).Hijack()\n+\t\tif err != nil {\n+\t\t\tt.Error(err)\n+\t\t\treturn\n+\t\t}\n+\t\tdefer conn.Close()\n+\t\tslurp, err := ioutil.ReadAll(buf.Reader)\n+\t\tif err != nil {\n+\t\t\tt.Error(\"Copy: %v\", err)\n+\t\t}\n+\t\tallX := true\n+\t\tfor _, v := range slurp {\n+\t\t\tif v != 'x' {\n+\t\t\t\tallX = false\n+\t\t\t}\n+\t\t}\n+\t\tif len(slurp) != size {\n+\t\t\tt.Errorf(\"read %d; want %d\", len(slurp), size)\n+\t\t} else if !allX {\n+\t\t\tt.Errorf(\"read %q; want %d 'x'\", slurp, size)\n+\t\t}\n+\t}))\n+\tdefer ts.Close()\n+\n+\tcn, err := net.Dial(\"tcp\", ts.Listener.Addr().String())\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer cn.Close()\n+\tif _, err := fmt.Fprintf(cn, \"GET / HTTP/1.1\\r\\nHost: e.com\\r\\n\\r\\n%s\",\n+\t\tstrings.Repeat(\"x\", size)); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif err := cn.(*net.TCPConn).CloseWrite(); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tselect {\n+\tcase <-done:\n+\tcase <-time.After(2 * time.Second):\n+\t\tt.Error(\"timeout\")\n+\t}\n+}"}, {"sha": "df70a15193bc6adb0127f250d4c2e3edb033e6e2", "filename": "libgo/go/net/http/server.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Fserver.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -164,7 +164,7 @@ type Flusher interface {\n // should always test for this ability at runtime.\n type Hijacker interface {\n \t// Hijack lets the caller take over the connection.\n-\t// After a call to Hijack(), the HTTP server library\n+\t// After a call to Hijack the HTTP server library\n \t// will not do anything else with the connection.\n \t//\n \t// It becomes the caller's responsibility to manage\n@@ -174,6 +174,9 @@ type Hijacker interface {\n \t// already set, depending on the configuration of the\n \t// Server. It is the caller's responsibility to set\n \t// or clear those deadlines as needed.\n+\t//\n+\t// The returned bufio.Reader may contain unprocessed buffered\n+\t// data from the client.\n \tHijack() (net.Conn, *bufio.ReadWriter, error)\n }\n \n@@ -293,6 +296,11 @@ func (c *conn) hijackLocked() (rwc net.Conn, buf *bufio.ReadWriter, err error) {\n \trwc.SetDeadline(time.Time{})\n \n \tbuf = bufio.NewReadWriter(c.bufr, bufio.NewWriter(rwc))\n+\tif c.r.hasByte {\n+\t\tif _, err := c.bufr.Peek(c.bufr.Buffered() + 1); err != nil {\n+\t\t\treturn nil, nil, fmt.Errorf(\"unexpected Peek failure reading buffered byte: %v\", err)\n+\t\t}\n+\t}\n \tc.setState(rwc, StateHijacked)\n \treturn\n }"}, {"sha": "a58b1839cc6e09e30d5f1a975a6f8394008dae98", "filename": "libgo/go/net/http/transport_test.go", "status": "modified", "additions": 67, "deletions": 47, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fhttp%2Ftransport_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -36,6 +36,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n+\t\"sync/atomic\"\n \t\"testing\"\n \t\"time\"\n )\n@@ -2545,6 +2546,13 @@ type closerFunc func() error\n \n func (f closerFunc) Close() error { return f() }\n \n+type writerFuncConn struct {\n+\tnet.Conn\n+\twrite func(p []byte) (n int, err error)\n+}\n+\n+func (c writerFuncConn) Write(p []byte) (n int, err error) { return c.write(p) }\n+\n // Issue 4677. If we try to reuse a connection that the server is in the\n // process of closing, we may end up successfully writing out our request (or a\n // portion of our request) only to find a connection error when we try to read\n@@ -2557,66 +2565,78 @@ func (f closerFunc) Close() error { return f() }\n func TestRetryIdempotentRequestsOnError(t *testing.T) {\n \tdefer afterTest(t)\n \n+\tvar (\n+\t\tmu     sync.Mutex\n+\t\tlogbuf bytes.Buffer\n+\t)\n+\tlogf := func(format string, args ...interface{}) {\n+\t\tmu.Lock()\n+\t\tdefer mu.Unlock()\n+\t\tfmt.Fprintf(&logbuf, format, args...)\n+\t\tlogbuf.WriteByte('\\n')\n+\t}\n+\n \tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n+\t\tlogf(\"Handler\")\n+\t\tw.Header().Set(\"X-Status\", \"ok\")\n \t}))\n \tdefer ts.Close()\n \n-\ttr := &Transport{}\n+\tvar writeNumAtomic int32\n+\ttr := &Transport{\n+\t\tDial: func(network, addr string) (net.Conn, error) {\n+\t\t\tlogf(\"Dial\")\n+\t\t\tc, err := net.Dial(network, ts.Listener.Addr().String())\n+\t\t\tif err != nil {\n+\t\t\t\tlogf(\"Dial error: %v\", err)\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\treturn &writerFuncConn{\n+\t\t\t\tConn: c,\n+\t\t\t\twrite: func(p []byte) (n int, err error) {\n+\t\t\t\t\tif atomic.AddInt32(&writeNumAtomic, 1) == 2 {\n+\t\t\t\t\t\tlogf(\"intentional write failure\")\n+\t\t\t\t\t\treturn 0, errors.New(\"second write fails\")\n+\t\t\t\t\t}\n+\t\t\t\t\tlogf(\"Write(%q)\", p)\n+\t\t\t\t\treturn c.Write(p)\n+\t\t\t\t},\n+\t\t\t}, nil\n+\t\t},\n+\t}\n+\tdefer tr.CloseIdleConnections()\n \tc := &Client{Transport: tr}\n \n-\tconst N = 2\n-\tretryc := make(chan struct{}, N)\n \tSetRoundTripRetried(func() {\n-\t\tretryc <- struct{}{}\n+\t\tlogf(\"Retried.\")\n \t})\n \tdefer SetRoundTripRetried(nil)\n \n-\tfor n := 0; n < 100; n++ {\n-\t\t// open 2 conns\n-\t\terrc := make(chan error, N)\n-\t\tfor i := 0; i < N; i++ {\n-\t\t\t// start goroutines, send on errc\n-\t\t\tgo func() {\n-\t\t\t\tres, err := c.Get(ts.URL)\n-\t\t\t\tif err == nil {\n-\t\t\t\t\tres.Body.Close()\n-\t\t\t\t}\n-\t\t\t\terrc <- err\n-\t\t\t}()\n-\t\t}\n-\t\tfor i := 0; i < N; i++ {\n-\t\t\tif err := <-errc; err != nil {\n-\t\t\t\tt.Fatal(err)\n-\t\t\t}\n-\t\t}\n-\n-\t\tts.CloseClientConnections()\n-\t\tfor i := 0; i < N; i++ {\n-\t\t\tgo func() {\n-\t\t\t\tres, err := c.Get(ts.URL)\n-\t\t\t\tif err == nil {\n-\t\t\t\t\tres.Body.Close()\n-\t\t\t\t}\n-\t\t\t\terrc <- err\n-\t\t\t}()\n+\tfor i := 0; i < 3; i++ {\n+\t\tres, err := c.Get(\"http://fake.golang/\")\n+\t\tif err != nil {\n+\t\t\tt.Fatalf(\"i=%d: Get = %v\", i, err)\n \t\t}\n+\t\tres.Body.Close()\n+\t}\n \n-\t\tfor i := 0; i < N; i++ {\n-\t\t\tif err := <-errc; err != nil {\n-\t\t\t\tt.Fatal(err)\n-\t\t\t}\n-\t\t}\n-\t\tfor i := 0; i < N; i++ {\n-\t\t\tselect {\n-\t\t\tcase <-retryc:\n-\t\t\t\t// we triggered a retry, test was successful\n-\t\t\t\tt.Logf(\"finished after %d runs\\n\", n)\n-\t\t\t\treturn\n-\t\t\tdefault:\n-\t\t\t}\n-\t\t}\n+\tmu.Lock()\n+\tgot := logbuf.String()\n+\tmu.Unlock()\n+\tconst want = `Dial\n+Write(\"GET / HTTP/1.1\\r\\nHost: fake.golang\\r\\nUser-Agent: Go-http-client/1.1\\r\\nAccept-Encoding: gzip\\r\\n\\r\\n\")\n+Handler\n+intentional write failure\n+Retried.\n+Dial\n+Write(\"GET / HTTP/1.1\\r\\nHost: fake.golang\\r\\nUser-Agent: Go-http-client/1.1\\r\\nAccept-Encoding: gzip\\r\\n\\r\\n\")\n+Handler\n+Write(\"GET / HTTP/1.1\\r\\nHost: fake.golang\\r\\nUser-Agent: Go-http-client/1.1\\r\\nAccept-Encoding: gzip\\r\\n\\r\\n\")\n+Handler\n+`\n+\tif got != want {\n+\t\tt.Errorf(\"Log of events differs. Got:\\n%s\\nWant:\\n%s\", got, want)\n \t}\n-\tt.Fatal(\"did not trigger any retries\")\n }\n \n // Issue 6981"}, {"sha": "dcc8d762bf810f1e6372dd081f6d6a4f320565a8", "filename": "libgo/go/os/os_test.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fos%2Fos_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fos%2Fos_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fos_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -52,12 +52,15 @@ var sysdir = func() *sysDir {\n \tcase \"darwin\":\n \t\tswitch runtime.GOARCH {\n \t\tcase \"arm\", \"arm64\":\n+\t\t\t/// At this point the test harness has not had a chance\n+\t\t\t// to move us into the ./src/os directory, so the\n+\t\t\t// current working directory is the root of the app.\n \t\t\twd, err := syscall.Getwd()\n \t\t\tif err != nil {\n \t\t\t\twd = err.Error()\n \t\t\t}\n \t\t\treturn &sysDir{\n-\t\t\t\tfilepath.Join(wd, \"..\", \"..\"),\n+\t\t\t\twd,\n \t\t\t\t[]string{\n \t\t\t\t\t\"ResourceRules.plist\",\n \t\t\t\t\t\"Info.plist\","}, {"sha": "6b143df00e11604a07d7ef723196cffeb3c17cef", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -26,6 +26,8 @@ import (\n \t\"unsafe\"\n )\n \n+var sink interface{}\n+\n func TestBool(t *testing.T) {\n \tv := ValueOf(true)\n \tif v.Bool() != true {\n@@ -5348,6 +5350,72 @@ func TestCallGC(t *testing.T) {\n \tf2(\"four\", \"five5\", \"six666\", \"seven77\", \"eight888\")\n }\n \n+// Issue 18635 (function version).\n+func TestKeepFuncLive(t *testing.T) {\n+\t// Test that we keep makeFuncImpl live as long as it is\n+\t// referenced on the stack.\n+\ttyp := TypeOf(func(i int) {})\n+\tvar f, g func(in []Value) []Value\n+\tf = func(in []Value) []Value {\n+\t\tclobber()\n+\t\ti := int(in[0].Int())\n+\t\tif i > 0 {\n+\t\t\t// We can't use Value.Call here because\n+\t\t\t// runtime.call* will keep the makeFuncImpl\n+\t\t\t// alive. However, by converting it to an\n+\t\t\t// interface value and calling that,\n+\t\t\t// reflect.callReflect is the only thing that\n+\t\t\t// can keep the makeFuncImpl live.\n+\t\t\t//\n+\t\t\t// Alternate between f and g so that if we do\n+\t\t\t// reuse the memory prematurely it's more\n+\t\t\t// likely to get obviously corrupted.\n+\t\t\tMakeFunc(typ, g).Interface().(func(i int))(i - 1)\n+\t\t}\n+\t\treturn nil\n+\t}\n+\tg = func(in []Value) []Value {\n+\t\tclobber()\n+\t\ti := int(in[0].Int())\n+\t\tMakeFunc(typ, f).Interface().(func(i int))(i)\n+\t\treturn nil\n+\t}\n+\tMakeFunc(typ, f).Call([]Value{ValueOf(10)})\n+}\n+\n+// Issue 18635 (method version).\n+type KeepMethodLive struct{}\n+\n+func (k KeepMethodLive) Method1(i int) {\n+\tclobber()\n+\tif i > 0 {\n+\t\tValueOf(k).MethodByName(\"Method2\").Interface().(func(i int))(i - 1)\n+\t}\n+}\n+\n+func (k KeepMethodLive) Method2(i int) {\n+\tclobber()\n+\tValueOf(k).MethodByName(\"Method1\").Interface().(func(i int))(i)\n+}\n+\n+func TestKeepMethodLive(t *testing.T) {\n+\t// Test that we keep methodValue live as long as it is\n+\t// referenced on the stack.\n+\tKeepMethodLive{}.Method1(10)\n+}\n+\n+// clobber tries to clobber unreachable memory.\n+func clobber() {\n+\truntime.GC()\n+\tfor i := 1; i < 32; i++ {\n+\t\tfor j := 0; j < 10; j++ {\n+\t\t\tobj := make([]*byte, i)\n+\t\t\tsink = obj\n+\t\t}\n+\t}\n+\truntime.GC()\n+}\n+\n type funcLayoutTest struct {\n \trcvr, t                  Type\n \tsize, argsize, retOffset uintptr"}, {"sha": "29d89f7176d6501e45d9a002dcd75ba945905127", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -1677,7 +1677,7 @@ func FuncOf(in, out []Type, variadic bool) Type {\n \t*ft = *prototype\n \n \t// Build a hash and minimally populate ft.\n-\tvar hash uint32 = 8\n+\tvar hash uint32\n \tvar fin, fout []*rtype\n \tshift := uint(1)\n \tfor _, in := range in {\n@@ -1697,6 +1697,7 @@ func FuncOf(in, out []Type, variadic bool) Type {\n \t\thash++\n \t}\n \thash <<= 4\n+\thash += 8\n \tft.hash = hash\n \tft.in = fin\n \tft.out = fout"}, {"sha": "c426452c2b05438c209a35a1a343f5305be5a295", "filename": "libgo/go/runtime/testdata/testprogcgo/threadpanic_unix.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Fthreadpanic_unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Fthreadpanic_unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Fthreadpanic_unix.c?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build !plan9,!windows\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <pthread.h>\n+\n+void gopanic(void);\n+\n+static void*\n+die(void* x)\n+{\n+\tgopanic();\n+\treturn 0;\n+}\n+\n+void\n+start(void)\n+{\n+\tpthread_t t;\n+\tif(pthread_create(&t, 0, die, 0) != 0)\n+\t\tprintf(\"pthread_create failed\\n\");\n+}"}, {"sha": "ba66d0f5c9564f9adbd1ddcc7e54389decf122d3", "filename": "libgo/go/runtime/testdata/testprogcgo/threadpanic_windows.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Fthreadpanic_windows.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Fthreadpanic_windows.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Fthreadpanic_windows.c?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include <process.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+void gopanic(void);\n+\n+static unsigned int __attribute__((__stdcall__))\n+die(void* x)\n+{\n+\tgopanic();\n+\treturn 0;\n+}\n+\n+void\n+start(void)\n+{\n+\tif(_beginthreadex(0, 0, die, 0, 0, 0) != 0)\n+\t\tprintf(\"_beginthreadex failed\\n\");\n+}"}, {"sha": "900cada0d3d7fc1f1c541f43f90f970b4cb5d0b4", "filename": "libgo/go/runtime/testdata/testprogcgo/tracebackctxt_c.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Ftracebackctxt_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Ftracebackctxt_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftestdata%2Ftestprogcgo%2Ftracebackctxt_c.c?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -0,0 +1,91 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The C definitions for tracebackctxt.go. That file uses //export so\n+// it can't put function definitions in the \"C\" import comment.\n+\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+// Functions exported from Go.\n+extern void G1(void);\n+extern void G2(void);\n+\n+void C1() {\n+\tG1();\n+}\n+\n+void C2() {\n+\tG2();\n+}\n+\n+struct cgoContextArg {\n+\tuintptr_t context;\n+};\n+\n+struct cgoTracebackArg {\n+\tuintptr_t  context;\n+\tuintptr_t  sigContext;\n+\tuintptr_t* buf;\n+\tuintptr_t  max;\n+};\n+\n+struct cgoSymbolizerArg {\n+\tuintptr_t   pc;\n+\tconst char* file;\n+\tuintptr_t   lineno;\n+\tconst char* func;\n+\tuintptr_t   entry;\n+\tuintptr_t   more;\n+\tuintptr_t   data;\n+};\n+\n+// Uses atomic adds and subtracts to catch the possibility of\n+// erroneous calls from multiple threads; that should be impossible in\n+// this test case, but we check just in case.\n+static int contextCount;\n+\n+int getContextCount() {\n+\treturn __sync_add_and_fetch(&contextCount, 0);\n+}\n+\n+void tcContext(void* parg) {\n+\tstruct cgoContextArg* arg = (struct cgoContextArg*)(parg);\n+\tif (arg->context == 0) {\n+\t\targ->context = __sync_add_and_fetch(&contextCount, 1);\n+\t} else {\n+\t\tif (arg->context != __sync_add_and_fetch(&contextCount, 0)) {\n+\t\t\tabort();\n+\t\t}\n+\t\t__sync_sub_and_fetch(&contextCount, 1);\n+\t}\n+}\n+\n+void tcTraceback(void* parg) {\n+\tint base, i;\n+\tstruct cgoTracebackArg* arg = (struct cgoTracebackArg*)(parg);\n+\tif (arg->context == 0) {\n+\t\t// This shouldn't happen in this program.\n+\t\tabort();\n+\t}\n+\t// Return a variable number of PC values.\n+\tbase = arg->context << 8;\n+\tfor (i = 0; i < arg->context; i++) {\n+\t\tif (i < arg->max) {\n+\t\t\targ->buf[i] = base + i;\n+\t\t}\n+\t}\n+}\n+\n+void tcSymbolizer(void *parg) {\n+\tstruct cgoSymbolizerArg* arg = (struct cgoSymbolizerArg*)(parg);\n+\tif (arg->pc == 0) {\n+\t\treturn;\n+\t}\n+\t// Report two lines per PC returned by traceback, to test more handling.\n+\targ->more = arg->file == NULL;\n+\targ->file = \"tracebackctxt.go\";\n+\targ->func = \"cFunction\";\n+\targ->lineno = arg->pc + (arg->more << 16);\n+}"}, {"sha": "bcebb418c42572e1c26aa3427926667c596adf5b", "filename": "libgo/go/testing/benchmark.go", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Ftesting%2Fbenchmark.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Ftesting%2Fbenchmark.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Fbenchmark.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -219,7 +219,7 @@ func (b *B) run1() bool {\n \t}\n \t// Only print the output if we know we are not going to proceed.\n \t// Otherwise it is printed in processBench.\n-\tif b.hasSub || b.finished {\n+\tif atomic.LoadInt32(&b.hasSub) != 0 || b.finished {\n \t\ttag := \"BENCH\"\n \t\tif b.skipped {\n \t\t\ttag = \"SKIP\"\n@@ -460,10 +460,13 @@ func (ctx *benchContext) processBench(b *B) {\n //\n // A subbenchmark is like any other benchmark. A benchmark that calls Run at\n // least once will not be measured itself and will be called once with N=1.\n+//\n+// Run may be called simultaneously from multiple goroutines, but all such\n+// calls must happen before the outer benchmark function for b returns.\n func (b *B) Run(name string, f func(b *B)) bool {\n \t// Since b has subbenchmarks, we will no longer run it as a benchmark itself.\n \t// Release the lock and acquire it on exit to ensure locks stay paired.\n-\tb.hasSub = true\n+\tatomic.StoreInt32(&b.hasSub, 1)\n \tbenchmarkLock.Unlock()\n \tdefer benchmarkLock.Lock()\n "}, {"sha": "bb7b3e09255ea167de3001248b55c83e20b21109", "filename": "libgo/go/testing/sub_test.go", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Ftesting%2Fsub_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Ftesting%2Fsub_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Fsub_test.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -6,6 +6,7 @@ package testing\n \n import (\n \t\"bytes\"\n+\t\"fmt\"\n \t\"regexp\"\n \t\"strings\"\n \t\"sync/atomic\"\n@@ -515,3 +516,19 @@ func TestBenchmarkOutput(t *T) {\n \tBenchmark(func(b *B) { b.Error(\"do not print this output\") })\n \tBenchmark(func(b *B) {})\n }\n+\n+func TestParallelSub(t *T) {\n+\tc := make(chan int)\n+\tblock := make(chan int)\n+\tfor i := 0; i < 10; i++ {\n+\t\tgo func(i int) {\n+\t\t\t<-block\n+\t\t\tt.Run(fmt.Sprint(i), func(t *T) {})\n+\t\t\tc <- 1\n+\t\t}(i)\n+\t}\n+\tclose(block)\n+\tfor i := 0; i < 10; i++ {\n+\t\t<-c\n+\t}\n+}"}, {"sha": "bbeb95692a1dd3d81bd331710a56cd39f0a21139", "filename": "libgo/go/testing/testing.go", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Ftesting%2Ftesting.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fgo%2Ftesting%2Ftesting.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Ftesting%2Ftesting.go?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -216,6 +216,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n+\t\"sync/atomic\"\n \t\"time\"\n )\n \n@@ -267,8 +268,8 @@ type common struct {\n \tskipped    bool         // Test of benchmark has been skipped.\n \tfinished   bool         // Test function has completed.\n \tdone       bool         // Test is finished and all subtests have completed.\n-\thasSub     bool\n-\traceErrors int // number of races detected during test\n+\thasSub     int32        // written atomically\n+\traceErrors int          // number of races detected during test\n \n \tparent   *common\n \tlevel    int       // Nesting depth of test or benchmark.\n@@ -645,7 +646,7 @@ func tRunner(t *T, fn func(t *T)) {\n \t\t// Do not lock t.done to allow race detector to detect race in case\n \t\t// the user does not appropriately synchronizes a goroutine.\n \t\tt.done = true\n-\t\tif t.parent != nil && !t.hasSub {\n+\t\tif t.parent != nil && atomic.LoadInt32(&t.hasSub) == 0 {\n \t\t\tt.setRan()\n \t\t}\n \t\tt.signal <- true\n@@ -659,8 +660,11 @@ func tRunner(t *T, fn func(t *T)) {\n \n // Run runs f as a subtest of t called name. It reports whether f succeeded.\n // Run will block until all its parallel subtests have completed.\n+//\n+// Run may be called simultaneously from multiple goroutines, but all such\n+// calls must happen before the outer test function for t returns.\n func (t *T) Run(name string, f func(t *T)) bool {\n-\tt.hasSub = true\n+\tatomic.StoreInt32(&t.hasSub, 1)\n \ttestName, ok := t.context.match.fullName(&t.common, name)\n \tif !ok {\n \t\treturn true"}, {"sha": "c750a5d808b3b2fcf50654f1f38162a324f79757", "filename": "libgo/merge.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25edd44a04672573946138da9c8fdc8c0eef5fd/libgo%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmerge.sh?ref=c25edd44a04672573946138da9c8fdc8c0eef5fd", "patch": "@@ -147,7 +147,7 @@ done\n \n (cd ${NEWDIR}/src && find . -name testdata -print) | while read d; do\n   skip=false\n-  case \"$f\" in\n+  case \"$d\" in\n   ./cmd/cgo/* | ./cmd/go/* | ./cmd/gofmt/* | ./cmd/internal/browser/*)\n     ;;\n   ./cmd/*)"}]}