{"sha": "6cbd257eb5e361f019c5aff53e189e9123f30054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiZDI1N2ViNWUzNjFmMDE5YzVhZmY1M2UxODllOTEyM2YzMDA1NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1999-03-10T10:53:35Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-03-10T10:53:35Z"}, "message": "search.c (dfs_canonical_queue): New function.\n\n\t* search.c (dfs_canonical_queue): New function.\n\t(dfs_assert_unmarked_p): Likewise.\n\t(assert_canonical_unmarked): Likewise.\n\t(access_in_type): Use it.\n\t(accessible_p): Likewise.  Walk the whole tree when umarking.\n\nFrom-SVN: r25668", "tree": {"sha": "7e4165eec480a1ed2d810ea264f82907d45723ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4165eec480a1ed2d810ea264f82907d45723ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbd257eb5e361f019c5aff53e189e9123f30054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd257eb5e361f019c5aff53e189e9123f30054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbd257eb5e361f019c5aff53e189e9123f30054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd257eb5e361f019c5aff53e189e9123f30054/comments", "author": null, "committer": null, "parents": [{"sha": "5f23a307e27deb2693c2181812f3414ff73f490f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f23a307e27deb2693c2181812f3414ff73f490f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f23a307e27deb2693c2181812f3414ff73f490f"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "4ccda9ebcc7c43b94dda0d720ce062d10cc88ec3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd257eb5e361f019c5aff53e189e9123f30054/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd257eb5e361f019c5aff53e189e9123f30054/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6cbd257eb5e361f019c5aff53e189e9123f30054", "patch": "@@ -1,5 +1,11 @@\n 1999-03-10  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* search.c (dfs_canonical_queue): New function.\n+\t(dfs_assert_unmarked_p): Likewise.\n+\t(assert_canonical_unmarked): Likewise.\n+\t(access_in_type): Use it.\n+\t(accessible_p): Likewise.  Walk the whole tree when umarking.\n+\n \t* sig.c (build_signature_table_constructor): Use accessible_p\n \tinstead of compute_access.\n "}, {"sha": "fecec21732766d7df9874dbdbda79c00c17d8aef", "filename": "gcc/cp/search.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd257eb5e361f019c5aff53e189e9123f30054/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd257eb5e361f019c5aff53e189e9123f30054/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6cbd257eb5e361f019c5aff53e189e9123f30054", "patch": "@@ -144,6 +144,9 @@ static tree dfs_accessible_queue_p PROTO ((tree, void *));\n static tree dfs_accessible_p PROTO ((tree, void *));\n static tree dfs_access_in_type PROTO ((tree, void *));\n static tree access_in_type PROTO ((tree, tree));\n+static tree dfs_canonical_queue PROTO ((tree, void *));\n+static tree dfs_assert_unmarked_P PROTO ((tree, void *));\n+static tree assert_canonical_unmarked PROTO ((tree));\n \n /* Allocate a level of searching.  */\n \n@@ -622,6 +625,38 @@ canonical_binfo (binfo)\n \t  ? TYPE_BINFO (BINFO_TYPE (binfo)) : binfo);\n }\n \n+/* A queue function that simply ensures that we walk into the\n+   canonical versions of virtual bases.  */\n+\n+static tree\n+dfs_canonical_queue (binfo, data)\n+     tree binfo;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  return canonical_binfo (binfo);\n+}\n+\n+/* Called via dfs_walk from assert_canonical_unmarked.  */\n+\n+static tree\n+dfs_assert_unmarked_p (binfo, data)\n+     tree binfo;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  my_friendly_assert (!BINFO_MARKED (binfo), 0);\n+  return NULL_TREE;\n+}\n+\n+/* Asserts that all the nodes below BINFO (using the canonical\n+   versions of virtual bases) are unmarked.  */\n+\n+static void\n+assert_canonical_unmarked (binfo)\n+     tree binfo;\n+{\n+  dfs_walk (binfo, dfs_assert_unmarked_p, dfs_canonical_queue, 0);\n+}\n+\n /* If BINFO is marked, return a canonical version of BINFO.\n    Otherwise, return NULL_TREE.  */\n \n@@ -762,6 +797,7 @@ access_in_type (type, decl)\n     each node with the most lenient access.  */\n   dfs_walk_real (binfo, 0, dfs_access_in_type, shared_unmarked_p, decl);\n   dfs_walk (binfo, dfs_unmark, shared_marked_p,  0);\n+  assert_canonical_unmarked (binfo);\n \n   return TREE_CHAIN (binfo);\n }\n@@ -927,8 +963,11 @@ accessible_p (type, decl)\n   t = dfs_walk (binfo, dfs_accessible_p, \n \t\tdfs_accessible_queue_p,\n \t\tprotected_ok ? &protected_ok : 0);\n-  /* Clear any mark bits.  */\n-  dfs_walk (binfo, dfs_unmark, shared_marked_p,  0);\n+  /* Clear any mark bits.  Note that we have to walk the whole tree\n+     here, since we have aborted the previous walk from some point\n+     deep in the tree.  */\n+  dfs_walk (binfo, dfs_unmark, dfs_canonical_queue,  0);\n+  assert_canonical_unmarked (binfo);\n \n   return t != NULL_TREE;\n }"}]}