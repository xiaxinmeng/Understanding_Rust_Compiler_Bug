{"sha": "8be71a90b15916a966553c47857e1579ca22d507", "node_id": "C_kwDOANBUbNoAKDhiZTcxYTkwYjE1OTE2YTk2NjU1M2M0Nzg1N2UxNTc5Y2EyMmQ1MDc", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-04-12T19:56:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:30Z"}, "message": "[Ada] Avoid copy operation for returns involving function calls\n\nThe underlying issue is that the front-end does not create transient scopes\nfor return statements, so objects copied for these statements can never be\nfinalized properly.\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): Adjust comment.\n\t(Expand_Simple_Function_Return): For the case of a type which needs\n\tfinalization and is returned on the primary stack, do not create a\n\tcopy if the expression originates from a function call.\n\t* exp_ch7.adb (Transient Scope Management): Adjust comment.\n\t* exp_util.ads (Is_Related_To_Func_Return): Add WARNING line.\n\t* fe.h (Is_Related_To_Func_Return): Declare.", "tree": {"sha": "ad3bac00daf7b04e370ceb3bcf73ea1ac1e28009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3bac00daf7b04e370ceb3bcf73ea1ac1e28009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be71a90b15916a966553c47857e1579ca22d507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be71a90b15916a966553c47857e1579ca22d507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be71a90b15916a966553c47857e1579ca22d507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be71a90b15916a966553c47857e1579ca22d507/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca03325fb3a5fbf9c8af853d4c7f199e1adb08e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca03325fb3a5fbf9c8af853d4c7f199e1adb08e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca03325fb3a5fbf9c8af853d4c7f199e1adb08e3"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "deb514e188dd4c7fedd152f8906a8ee86bd1bd41", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8be71a90b15916a966553c47857e1579ca22d507", "patch": "@@ -4899,8 +4899,8 @@ package body Exp_Ch6 is\n       --  the return type is limited, then the context is initialization and\n       --  different processing applies. If the call is to a protected function,\n       --  the expansion above will call Expand_Call recursively. Otherwise the\n-      --  function call is transformed into a temporary which obtains the\n-      --  result from the secondary stack.\n+      --  function call is transformed into a reference to the result that has\n+      --  been built either on the return or the secondary stack.\n \n       if Needs_Finalization (Etype (Subp)) then\n          if not Is_Build_In_Place_Function_Call (Call_Node)\n@@ -7369,7 +7369,7 @@ package body Exp_Ch6 is\n \n          if Present (Utyp)\n            and then Needs_Finalization (Utyp)\n-           and then not (Nkind (Exp) = N_Function_Call\n+           and then not (Exp_Is_Function_Call\n                           and then Needs_Finalization (Exp_Typ))\n          then\n             declare"}, {"sha": "2d58f3bb4b6186a85bf34fca4df5c5326502cf42", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=8be71a90b15916a966553c47857e1579ca22d507", "patch": "@@ -109,18 +109,13 @@ package body Exp_Ch7 is\n    --  pass the address of a constrained object as the target object for the\n    --  function result.\n \n-   --  By allocating tagged results in the secondary stack a number of\n+   --  By always allocating tagged results in the secondary stack, a couple of\n    --  implementation difficulties are avoided:\n \n-   --    - If it is a dispatching function call, the computation of the size of\n-   --      the result is possible but complex from the outside.\n+   --    - If this is a dispatching function call, the computation of the size\n+   --      of the result is possible but complex from the outside.\n \n-   --    - If the returned type is controlled, the assignment of the returned\n-   --      value to the anonymous object involves an Adjust, and we have no\n-   --      easy way to access the anonymous object created by the back end.\n-\n-   --    - If the returned type is class-wide, this is an unconstrained type\n-   --      anyway.\n+   --    - If the result type is class-wide, it is unconstrained anyway.\n \n    --  Furthermore, the small loss in efficiency which is the result of this\n    --  decision is not such a big deal because functions returning tagged types"}, {"sha": "f3456b3f455956f821eefe2921d8d32b52b52615", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=8be71a90b15916a966553c47857e1579ca22d507", "patch": "@@ -820,6 +820,8 @@ package Exp_Util is\n    --  Determine whether object Id is related to an expanded return statement.\n    --  The case concerned is \"return Id.all;\".\n \n+   --  WARNING: There is a matching C declaration of this subprogram in fe.h\n+\n    function Is_Renamed_Object (N : Node_Id) return Boolean;\n    --  Returns True if the node N is a renamed object. An expression is\n    --  considered to be a renamed object if either it is the Name of an object"}, {"sha": "bfd90543d54e97c3bb2c9b938f3051a93a9f61e2", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be71a90b15916a966553c47857e1579ca22d507/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=8be71a90b15916a966553c47857e1579ca22d507", "patch": "@@ -183,9 +183,11 @@ extern Boolean Is_Init_Proc\t\t(Entity_Id);\n /* exp_util: */\n \n #define Is_Fully_Repped_Tagged_Type\texp_util__is_fully_repped_tagged_type\n+#define Is_Related_To_Func_Return\texp_util__is_related_to_func_return\n #define Find_Interface_Tag\t\texp_util__find_interface_tag\n \n-extern Boolean Is_Fully_Repped_Tagged_Type      (Entity_Id);\n+extern Boolean Is_Fully_Repped_Tagged_Type\t(Entity_Id);\n+extern Boolean Is_Related_To_Func_Return\t(Entity_Id);\n extern Entity_Id Find_Interface_Tag\t\t(Entity_Id, Entity_Id);\n \n /* lib: */"}]}