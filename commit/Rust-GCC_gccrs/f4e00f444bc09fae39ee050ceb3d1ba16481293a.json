{"sha": "f4e00f444bc09fae39ee050ceb3d1ba16481293a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlMDBmNDQ0YmMwOWZhZTM5ZWUwNTBjZWIzZDFiYTE2NDgxMjkzYQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2007-07-23T17:29:17Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2007-07-23T17:29:17Z"}, "message": "argv.c (writeargv): Fix typo in inline documentation.\n\n* argv.c (writeargv): Fix typo in inline documentation.\n* functions.texi: Regenerate.\n\nFrom-SVN: r126855", "tree": {"sha": "c6b5774162982b7e4857f4be066350a435189feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6b5774162982b7e4857f4be066350a435189feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e00f444bc09fae39ee050ceb3d1ba16481293a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e00f444bc09fae39ee050ceb3d1ba16481293a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e00f444bc09fae39ee050ceb3d1ba16481293a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e00f444bc09fae39ee050ceb3d1ba16481293a/comments", "author": null, "committer": null, "parents": [{"sha": "7e0b4eaea174caaaae3a50074623b58d1cdfe410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0b4eaea174caaaae3a50074623b58d1cdfe410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0b4eaea174caaaae3a50074623b58d1cdfe410"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "30e4b4ee87c21ff8edb7252c9252576ed5abb23e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e00f444bc09fae39ee050ceb3d1ba16481293a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e00f444bc09fae39ee050ceb3d1ba16481293a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f4e00f444bc09fae39ee050ceb3d1ba16481293a", "patch": "@@ -1,3 +1,8 @@\n+2007-07-23  DJ Delorie  <dj@redhat.com>\n+\n+\t* argv.c (writeargv): Fix typo in inline documentation.\n+\t* functions.texi: Regenerate.\n+\n 2007-07-17  DJ Delorie  <dj@redhat.com>\n \n \t* configure.ac (target_header_dir, msdosdjgpp): Remove duplicate"}, {"sha": "38bd4497090b6cb5ad56004b87ba24cd6c866459", "filename": "libiberty/argv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e00f444bc09fae39ee050ceb3d1ba16481293a/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e00f444bc09fae39ee050ceb3d1ba16481293a/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=f4e00f444bc09fae39ee050ceb3d1ba16481293a", "patch": "@@ -290,7 +290,7 @@ char **buildargv (const char *input)\n \n /*\n \n-@deftypefn Extension int writeargv (const char **@var{argv}, FILE *@{file})\n+@deftypefn Extension int writeargv (const char **@var{argv}, FILE *@var{file})\n \n Write each member of ARGV, handling all necessary quoting, to the file\n named by FILE, separated by whitespace.  Return 0 on success, non-zero"}, {"sha": "e6ab84c69990b75c84dfa83d3167dcb84484f1ad", "filename": "libiberty/functions.texi", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e00f444bc09fae39ee050ceb3d1ba16481293a/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e00f444bc09fae39ee050ceb3d1ba16481293a/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=f4e00f444bc09fae39ee050ceb3d1ba16481293a", "patch": "@@ -214,7 +214,7 @@ symbolic name or message.\n \n @end deftypefn\n \n-@c argv.c:293\n+@c argv.c:348\n @deftypefn Extension void expandargv (int *@var{argcp}, char ***@var{argvp})\n \n The @var{argcp} and @code{argvp} arguments are pointers to the usual\n@@ -268,15 +268,16 @@ value 1).  If @var{valu} is zero, zero is returned.\n \n @end deftypefn\n \n-@c filename_cmp.c:28\n+@c filename_cmp.c:32\n @deftypefn Extension int filename_cmp (const char *@var{s1}, const char *@var{s2})\n \n-Return zero if the two paths @var{s1} and @var{s2} are equivalent.\n-If not equivalent, the returned value is similar to what strcmp would\n-return.  In other words, it returns a negative value if @var{s1} is less\n-than @var{s2}, or a positive value if @var{s2} is greater than @var{s2}.\n+Return zero if the two file names @var{s1} and @var{s2} are equivalent.\n+If not equivalent, the returned value is similar to what @code{strcmp}\n+would return.  In other words, it returns a negative value if @var{s1}\n+is less than @var{s2}, or a positive value if @var{s2} is greater than\n+@var{s2}.\n \n-This function does not normalize path names. As a result, this function\n+This function does not normalize file names.  As a result, this function\n will treat filenames that are spelled differently as different even in\n the case when the two filenames point to the same underlying file.\n However, it does handle the fact that on DOS-like file systems, forward\n@@ -1471,6 +1472,15 @@ does the return value.  The third argument is unused in @libib{}.\n \n @end deftypefn\n \n+@c argv.c:293\n+@deftypefn Extension int writeargv (const char **@var{argv}, FILE *@var{file})\n+\n+Write each member of ARGV, handling all necessary quoting, to the file\n+named by FILE, separated by whitespace.  Return 0 on success, non-zero\n+if an error occurred while writing to FILE.\n+\n+@end deftypefn\n+\n @c xatexit.c:11\n @deftypefun int xatexit (void (*@var{fn}) (void))\n "}]}