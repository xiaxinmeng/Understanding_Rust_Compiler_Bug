{"sha": "fd2d912115ac65469b83b85224545d5230195b01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyZDkxMjExNWFjNjU0NjliODNiODUyMjQ1NDVkNTIzMDE5NWIwMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-13T21:52:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-13T21:52:47Z"}, "message": "Add and use HOST_WIDEST_INT_C, HOST_WIDE_INT_C.\n\nFrom-SVN: r188535", "tree": {"sha": "646aa2c22a85cb8994cc6aae956fff1c60e9e36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/646aa2c22a85cb8994cc6aae956fff1c60e9e36f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2d912115ac65469b83b85224545d5230195b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2d912115ac65469b83b85224545d5230195b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2d912115ac65469b83b85224545d5230195b01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2d912115ac65469b83b85224545d5230195b01/comments", "author": null, "committer": null, "parents": [{"sha": "db8c4965beaa8a8f0a4709f3ea2c43db7eb703e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8c4965beaa8a8f0a4709f3ea2c43db7eb703e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8c4965beaa8a8f0a4709f3ea2c43db7eb703e4"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "f3eaad0737e330fb2eb0190412128b06f3e262a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2d912115ac65469b83b85224545d5230195b01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2d912115ac65469b83b85224545d5230195b01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd2d912115ac65469b83b85224545d5230195b01", "patch": "@@ -1,3 +1,10 @@\n+2012-06-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* hwint.h (HOST_WIDEST_INT_C): New.\n+\t(HOST_WIDE_INT_C): New.\n+\t(HOST_WIDE_INT_1): Use it.\n+\t* config/alpha/alpha.c (alpha_trampoline_init): Use it.\n+\n 2012-06-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/49888"}, {"sha": "36f7306bae4464d0cc47354a851d927930046904", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2d912115ac65469b83b85224545d5230195b01/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2d912115ac65469b83b85224545d5230195b01/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fd2d912115ac65469b83b85224545d5230195b01", "patch": "@@ -5451,8 +5451,6 @@ alpha_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   chain_value = convert_memory_address (Pmode, chain_value);\n #endif\n \n-#define HWI_HEX2(X,Y)\t(((HOST_WIDE_INT)0x ## X ## u << 32) | 0x ## Y ## u)\n-\n   if (TARGET_ABI_OPEN_VMS)\n     {\n       const char *fnname;\n@@ -5471,7 +5469,8 @@ alpha_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t the VMS calling standard. This is stored in the first quadword.  */\n       word1 = force_reg (DImode, gen_const_mem (DImode, fnaddr));\n       word1 = expand_and (DImode, word1,\n-\t\t\t  GEN_INT (HWI_HEX2(ffff0fff,0000fff0)), NULL);\n+\t\t\t  GEN_INT (HOST_WIDE_INT_C (0xffff0fff0000fff0)),\n+\t\t\t  NULL);\n     }\n   else\n     {\n@@ -5482,12 +5481,10 @@ alpha_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t    nop\n \t We don't bother setting the HINT field of the jump; the nop\n \t is merely there for padding.  */\n-      word1 = GEN_INT (HWI_HEX2 (a77b0010,a43b0018));\n-      word2 = GEN_INT (HWI_HEX2 (47ff041f,6bfb0000));\n+      word1 = GEN_INT (HOST_WIDE_INT_C (0xa77b0010a43b0018));\n+      word2 = GEN_INT (HOST_WIDE_INT_C (0x47ff041f6bfb0000));\n     }\n \n-#undef HWI_HEX2\n-\n   /* Store the first two words, as computed above.  */\n   mem = adjust_address (m_tramp, DImode, 0);\n   emit_move_insn (mem, word1);"}, {"sha": "17346392f91bd7dc25c7180fd10b136770b8bcc2", "filename": "gcc/hwint.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2d912115ac65469b83b85224545d5230195b01/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2d912115ac65469b83b85224545d5230195b01/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=fd2d912115ac65469b83b85224545d5230195b01", "patch": "@@ -1,5 +1,5 @@\n /* HOST_WIDE_INT definitions for the GNU compiler.\n-   Copyright (C) 1998, 2002, 2004, 2008, 2009, 2010\n+   Copyright (C) 1998, 2002, 2004, 2008, 2009, 2010, 2012\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -60,20 +60,25 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #if HOST_BITS_PER_LONG >= 64 || !defined NEED_64BIT_HOST_WIDE_INT\n #   define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n #   define HOST_WIDE_INT long\n+#   define HOST_WIDE_INT_C(X) X ## L\n #else\n # if HOST_BITS_PER_LONGLONG >= 64\n #   define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONGLONG\n #   define HOST_WIDE_INT long long\n+#   define HOST_WIDE_INT_C(X) X ## LL\n # else\n #  if HOST_BITS_PER___INT64 >= 64\n #   define HOST_BITS_PER_WIDE_INT HOST_BITS_PER___INT64\n #   define HOST_WIDE_INT __int64\n+#   define HOST_WIDE_INT_C(X) X ## i64\n #  else\n     #error \"Unable to find a suitable type for HOST_WIDE_INT\"\n #  endif\n # endif\n #endif\n \n+#define HOST_WIDE_INT_1 HOST_WIDE_INT_C(1)\n+\n /* This is a magic identifier which allows GCC to figure out the type\n    of HOST_WIDE_INT for %wd specifier checks.  You must issue this\n    typedef before using the __asm_fprintf__ format attribute.  */\n@@ -84,7 +89,6 @@ typedef HOST_WIDE_INT __gcc_host_wide_int__;\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n # define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"L\"\n-# define HOST_WIDE_INT_1 1L\n   /* 'long' might be 32 or 64 bits, and the number of leading zeroes\n      must be tweaked accordingly.  */\n # if HOST_BITS_PER_WIDE_INT == 64\n@@ -97,7 +101,6 @@ typedef HOST_WIDE_INT __gcc_host_wide_int__;\n #else\n # define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"LL\"\n-# define HOST_WIDE_INT_1 1LL\n   /* We can assume that 'long long' is at least 64 bits.  */\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n     \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n@@ -122,14 +125,17 @@ typedef HOST_WIDE_INT __gcc_host_wide_int__;\n # define HOST_WIDEST_INT_PRINT_UNSIGNED\t      HOST_WIDE_INT_PRINT_UNSIGNED\n # define HOST_WIDEST_INT_PRINT_HEX\t      HOST_WIDE_INT_PRINT_HEX\n # define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     HOST_WIDE_INT_PRINT_DOUBLE_HEX\n+# define HOST_WIDEST_INT_C(X)\t\t      HOST_WIDE_INT(X)\n #else\n # if HOST_BITS_PER_LONGLONG >= 64\n #  define HOST_BITS_PER_WIDEST_INT\t      HOST_BITS_PER_LONGLONG\n #  define HOST_WIDEST_INT\t\t      long long\n+#  define HOST_WIDEST_INT_C(X)\t\t      X ## LL\n # else\n #  if HOST_BITS_PER___INT64 >= 64\n #   define HOST_BITS_PER_WIDEST_INT\t      HOST_BITS_PER___INT64\n #   define HOST_WIDEST_INT\t\t      __int64\n+#   define HOST_WIDEST_INT_C(X)\t\t      X ## i64\n #  else\n     #error \"This line should be impossible to reach\"\n #  endif"}]}