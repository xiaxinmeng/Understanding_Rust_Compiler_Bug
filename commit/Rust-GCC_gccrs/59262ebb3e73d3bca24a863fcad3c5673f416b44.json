{"sha": "59262ebb3e73d3bca24a863fcad3c5673f416b44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyNjJlYmIzZTczZDNiY2EyNGE4NjNmY2FkM2M1NjczZjQxNmI0NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T08:52:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T08:52:04Z"}, "message": "[multiple changes]\n\n2009-04-09  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Record_Type): Fix typo.\n\t(Derive_Progenitor_Subprograms): Handle interfaces in subtypes of\n\ttagged types.\n\n2009-04-09  Robert Dewar  <dewar@adacore.com>\n\n\t* s-direio.adb: Minor reformatting\n\n\t* exp_ch4.adb (Expand_Concatenate): Avoid overflow checks for String\n\nFrom-SVN: r145808", "tree": {"sha": "bc94628d1f9d8cf33c43a0aa3bdc41dcc042bbcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc94628d1f9d8cf33c43a0aa3bdc41dcc042bbcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59262ebb3e73d3bca24a863fcad3c5673f416b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59262ebb3e73d3bca24a863fcad3c5673f416b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59262ebb3e73d3bca24a863fcad3c5673f416b44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59262ebb3e73d3bca24a863fcad3c5673f416b44/comments", "author": null, "committer": null, "parents": [{"sha": "fa9693102a090415823003a038b56af6cf9aba0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9693102a090415823003a038b56af6cf9aba0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9693102a090415823003a038b56af6cf9aba0f"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "e6560e26aba950b0c9a940cd7b7b5b5cf3e0f072", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=59262ebb3e73d3bca24a863fcad3c5673f416b44", "patch": "@@ -1,3 +1,15 @@\n+2009-04-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Record_Type): Fix typo.\n+\t(Derive_Progenitor_Subprograms): Handle interfaces in subtypes of\n+\ttagged types.\n+\n+2009-04-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-direio.adb: Minor reformatting\n+\n+\t* exp_ch4.adb (Expand_Concatenate): Avoid overflow checks for String\n+\n 2009-04-09  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb (Expand_Concatenate): Improve handling of overflow cases"}, {"sha": "33a4ce35cb6781288673cdf0dfcd771d66e53f41", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=59262ebb3e73d3bca24a863fcad3c5673f416b44", "patch": "@@ -3,7 +3,7 @@\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                              E X P _ C H 4                               --\n---                                                               g           --\n+--                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n --          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n@@ -2337,6 +2337,16 @@ package body Exp_Ch4 is\n       if Is_Enumeration_Type (Ityp) then\n          Artyp := Standard_Integer;\n \n+      --  If index type is Positive, we use the standard unsigned type, to give\n+      --  more room on the top of the range, obviating the need for an overflow\n+      --  check when creating the upper bound. This is needed to avoid junk\n+      --  overflow checks in the common case of String types.\n+\n+      --  ??? Disabled for now\n+\n+      --  elsif Istyp = Standard_Positive then\n+      --     Artyp := Standard_Unsigned;\n+\n       --  For modular types, we use a 32-bit modular type for types whose size\n       --  is in the range 1-31 bits. For 32-bit unsigned types, we use the\n       --  identity type, and for larger unsigned types we use 64-bits.\n@@ -2417,7 +2427,7 @@ package body Exp_Ch4 is\n                  Make_Op_Add (Loc,\n                    Left_Opnd  =>\n                      New_Copy_Tree (String_Literal_Low_Bound (Opnd_Typ)),\n-                   Right_Opnd => Make_Artyp_Literal (1));\n+                   Right_Opnd => Make_Integer_Literal (Loc, 1));\n             end if;\n \n             --  Skip null string literal\n@@ -2729,9 +2739,14 @@ package body Exp_Ch4 is\n                 Left_Opnd  => New_Copy (Aggr_Length (NN)),\n                 Right_Opnd => Make_Artyp_Literal (1))));\n \n-      --  Now force overflow checking on High_Bound\n+      --  Note that calculation of the high bound may cause overflow in some\n+      --  very weird cases, so in the general case we need an overflow check\n+      --  on the high bound. We can avoid this for the common case of string\n+      --  types since we chose a wider range for the arithmetic type.\n \n-      Activate_Overflow_Check (High_Bound);\n+      if Istyp /= Standard_Positive then\n+         Activate_Overflow_Check (High_Bound);\n+      end if;\n \n       --  Handle the exceptional case where the result is null, in which case\n       --  case the bounds come from the last operand (so that we get the proper"}, {"sha": "447367cafeaf8a5d16d2eec1c3abcf9575d1710b", "filename": "gcc/ada/s-direio.adb", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=59262ebb3e73d3bca24a863fcad3c5673f416b44", "patch": "@@ -63,7 +63,6 @@ package body System.Direct_IO is\n \n    function AFCB_Allocate (Control_Block : Direct_AFCB) return FCB.AFCB_Ptr is\n       pragma Unreferenced (Control_Block);\n-\n    begin\n       return new Direct_AFCB;\n    end AFCB_Allocate;\n@@ -76,7 +75,6 @@ package body System.Direct_IO is\n \n    procedure AFCB_Close (File : not null access Direct_AFCB) is\n       pragma Unreferenced (File);\n-\n    begin\n       null;\n    end AFCB_Close;\n@@ -110,8 +108,8 @@ package body System.Direct_IO is\n    is\n       Dummy_File_Control_Block : Direct_AFCB;\n       pragma Warnings (Off, Dummy_File_Control_Block);\n-      --  Yes, we know this is never assigned a value, only the tag\n-      --  is used for dispatching purposes, so that's expected.\n+      --  Yes, we know this is never assigned a value, only the tag is used for\n+      --  dispatching purposes, so that's expected.\n \n    begin\n       FIO.Open (File_Ptr  => AP (File),\n@@ -156,8 +154,8 @@ package body System.Direct_IO is\n    is\n       Dummy_File_Control_Block : Direct_AFCB;\n       pragma Warnings (Off, Dummy_File_Control_Block);\n-      --  Yes, we know this is never assigned a value, only the tag\n-      --  is used for dispatching purposes, so that's expected.\n+      --  Yes, we know this is never assigned a value, only the tag is used for\n+      --  dispatching purposes, so that's expected.\n \n    begin\n       FIO.Open (File_Ptr  => AP (File),\n@@ -254,10 +252,9 @@ package body System.Direct_IO is\n       pragma Warnings (Off, File);\n       --  File is actually modified via Unrestricted_Access below, but\n       --  GNAT will generate a warning anyway.\n-      --  Note that we do not use pragma Unmodified here, since in -gnatc\n-      --  mode, GNAT will complain that File is modified for\n-      --  \"File.Index := 1;\"\n-\n+      --\n+      --  Note that we do not use pragma Unmodified here, since in -gnatc mode,\n+      --  GNAT will complain that File is modified for \"File.Index := 1;\"\n    begin\n       FIO.Reset (AP (File)'Unrestricted_Access, Mode);\n       File.Index := 1;\n@@ -267,7 +264,6 @@ package body System.Direct_IO is\n    procedure Reset (File : in out File_Type) is\n       pragma Warnings (Off, File);\n       --  See above (other Reset procedure) for explanations on this pragma\n-\n    begin\n       FIO.Reset (AP (File)'Unrestricted_Access);\n       File.Index := 1;"}, {"sha": "c2f7790c3c8b4e52c73bc04638178a3a17dc743d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59262ebb3e73d3bca24a863fcad3c5673f416b44/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=59262ebb3e73d3bca24a863fcad3c5673f416b44", "patch": "@@ -6467,7 +6467,7 @@ package body Sem_Ch3 is\n          --  could still refer to the full type prior the change to the new\n          --  subtype and hence would not match the new base type created here.\n \n-         Derive_Subprograms (Parent_Type, Base_Type (Derived_Type));\n+         Derive_Subprograms (Parent_Type, Derived_Type);\n \n          --  For tagged types the Discriminant_Constraint of the new base itype\n          --  is inherited from the first subtype so that no subtype conformance\n@@ -11496,8 +11496,8 @@ package body Sem_Ch3 is\n       --  Step 2: Add primitives of progenitors that are not implemented by\n       --  parents of Tagged_Type\n \n-      if Present (Interfaces (Tagged_Type)) then\n-         Iface_Elmt := First_Elmt (Interfaces (Tagged_Type));\n+      if Present (Interfaces (Base_Type (Tagged_Type))) then\n+         Iface_Elmt := First_Elmt (Interfaces (Base_Type (Tagged_Type)));\n          while Present (Iface_Elmt) loop\n             Iface := Node (Iface_Elmt);\n "}]}