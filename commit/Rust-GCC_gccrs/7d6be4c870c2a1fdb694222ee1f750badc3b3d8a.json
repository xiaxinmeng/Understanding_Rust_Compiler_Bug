{"sha": "7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2YmU0Yzg3MGMyYTFmZGI2OTQyMjJlZTFmNzUwYmFkYzNiM2Q4YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-03-08T23:33:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-08T23:33:04Z"}, "message": "compiler: Don't initialize zero sized variables.\n\n\t* go-gcc.cc (Gcc_backend::init_statement): Don't initialize a\n\tzero-sized variable.\n\t(go_non_zero_struct): New global variable.\n\t(Gcc_backend::non_zero_size_type): New function.\n\t(Gcc_backend::global_variable): Don't build an assignment for a\n\tzero-sized value.\n\t* go-c.h (go_non_zero_struct): Declare.\n\t* config-lang.in (gtfiles): Add go-c.h.\n\nFrom-SVN: r185115", "tree": {"sha": "7a5ccba6a082f2d0a7ecff65d3eef03f31a471da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a5ccba6a082f2d0a7ecff65d3eef03f31a471da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/comments", "author": null, "committer": null, "parents": [{"sha": "b97190553d2798af4c5c8e6e775b942e458ba09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97190553d2798af4c5c8e6e775b942e458ba09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97190553d2798af4c5c8e6e775b942e458ba09e"}], "stats": {"total": 104, "additions": 99, "deletions": 5}, "files": [{"sha": "2c0b3c233369a0982a37deb095ba7c1417569169", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "patch": "@@ -1,3 +1,14 @@\n+2012-03-08  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::init_statement): Don't initialize a\n+\tzero-sized variable.\n+\t(go_non_zero_struct): New global variable.\n+\t(Gcc_backend::non_zero_size_type): New function.\n+\t(Gcc_backend::global_variable): Don't build an assignment for a\n+\tzero-sized value.\n+\t* go-c.h (go_non_zero_struct): Declare.\n+\t* config-lang.in (gtfiles): Add go-c.h.\n+\n 2012-02-29  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (class Gcc_tree): Add set_tree method."}, {"sha": "586e070e7d1e49dae7708c3eb21059ea4ba0074f", "filename": "gcc/go/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fconfig-lang.in?ref=7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "patch": "@@ -34,7 +34,7 @@ target_libs=\"target-libgo target-libffi\"\n # compiler during stage 1.\n lang_requires_boot_languages=c++\n \n-gtfiles=\"\\$(srcdir)/go/go-lang.c\"\n+gtfiles=\"\\$(srcdir)/go/go-lang.c \\$(srcdir)/go/go-c.h\"\n \n # Do not build by default.\n build_by_default=\"no\""}, {"sha": "e123d52d8d1dc5ac90a38312b7dc948387c23350", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "patch": "@@ -69,6 +69,8 @@ extern void go_write_export_data (const char *, unsigned int);\n \n extern const char *go_read_export_data (int, off_t, char **, size_t *, int *);\n \n+extern GTY(()) tree go_non_zero_struct;\n+\n #if defined(__cplusplus) && !defined(ENABLE_BUILD_WITH_CXX)\n } /* End extern \"C\".  */\n #endif"}, {"sha": "0cc167d4ba7bbfdb5dd6bca04aa85273aa68de60", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "patch": "@@ -338,6 +338,9 @@ class Gcc_backend : public Backend\n \n   Btype*\n   fill_in_array(Btype*, Btype*, Bexpression*);\n+\n+  tree\n+  non_zero_size_type(tree);\n };\n \n // A helper function.\n@@ -870,9 +873,27 @@ Gcc_backend::init_statement(Bvariable* var, Bexpression* init)\n   if (var_tree == error_mark_node || init_tree == error_mark_node)\n     return this->error_statement();\n   gcc_assert(TREE_CODE(var_tree) == VAR_DECL);\n-  DECL_INITIAL(var_tree) = init_tree;\n-  return this->make_statement(build1_loc(DECL_SOURCE_LOCATION(var_tree),\n-\t\t\t\t\t DECL_EXPR, void_type_node, var_tree));\n+\n+  // To avoid problems with GNU ld, we don't make zero-sized\n+  // externally visible variables.  That might lead us to doing an\n+  // initialization of a zero-sized expression to a non-zero sized\n+  // variable, or vice-versa.  Avoid crashes by omitting the\n+  // initializer.  Such initializations don't mean anything anyhow.\n+  if (int_size_in_bytes(TREE_TYPE(var_tree)) != 0\n+      && init_tree != NULL_TREE\n+      && int_size_in_bytes(TREE_TYPE(init_tree)) != 0)\n+    {\n+      DECL_INITIAL(var_tree) = init_tree;\n+      init_tree = NULL_TREE;\n+    }\n+\n+  tree ret = build1_loc(DECL_SOURCE_LOCATION(var_tree), DECL_EXPR,\n+\t\t\tvoid_type_node, var_tree);\n+  if (init_tree != NULL_TREE)\n+    ret = build2_loc(DECL_SOURCE_LOCATION(var_tree), COMPOUND_EXPR,\n+\t\t     void_type_node, init_tree, ret);\n+\n+  return this->make_statement(ret);\n }\n \n // Assignment.\n@@ -885,6 +906,18 @@ Gcc_backend::assignment_statement(Bexpression* lhs, Bexpression* rhs,\n   tree rhs_tree = rhs->get_tree();\n   if (lhs_tree == error_mark_node || rhs_tree == error_mark_node)\n     return this->error_statement();\n+\n+  // To avoid problems with GNU ld, we don't make zero-sized\n+  // externally visible variables.  That might lead us to doing an\n+  // assignment of a zero-sized expression to a non-zero sized\n+  // expression; avoid crashes here by avoiding assignments of\n+  // zero-sized expressions.  Such assignments don't really mean\n+  // anything anyhow.\n+  if (int_size_in_bytes(TREE_TYPE(lhs_tree)) == 0\n+      || int_size_in_bytes(TREE_TYPE(rhs_tree)) == 0)\n+    return this->compound_statement(this->expression_statement(lhs),\n+\t\t\t\t    this->expression_statement(rhs));\n+\n   return this->make_statement(fold_build2_loc(location.gcc_location(),\n                                               MODIFY_EXPR,\n \t\t\t\t\t      void_type_node,\n@@ -1178,6 +1211,48 @@ Gcc_backend::block_statement(Bblock* bblock)\n   return this->make_statement(bind_tree);\n }\n \n+// This is not static because we declare it with GTY(()) in go-c.h.\n+tree go_non_zero_struct;\n+\n+// Return a type corresponding to TYPE with non-zero size.\n+\n+tree\n+Gcc_backend::non_zero_size_type(tree type)\n+{\n+  if (int_size_in_bytes(type) != 0)\n+    return type;\n+\n+  switch (TREE_CODE(type))\n+    {\n+    case RECORD_TYPE:\n+      {\n+\tif (go_non_zero_struct == NULL_TREE)\n+\t  {\n+\t    type = make_node(RECORD_TYPE);\n+\t    tree field = build_decl(UNKNOWN_LOCATION, FIELD_DECL,\n+\t\t\t\t    get_identifier(\"dummy\"),\n+\t\t\t\t    boolean_type_node);\n+\t    DECL_CONTEXT(field) = type;\n+\t    TYPE_FIELDS(type) = field;\n+\t    layout_type(type);\n+\t    go_non_zero_struct = type;\n+\t  }\n+\treturn go_non_zero_struct;\n+      }\n+\n+    case ARRAY_TYPE:\n+      {\n+\ttree element_type = non_zero_size_type(TREE_TYPE(type));\n+\treturn build_array_type_nelts(element_type, 1);\n+      }\n+\n+    default:\n+      gcc_unreachable();\n+    }\n+\n+  gcc_unreachable();\n+}\n+\n // Make a global variable.\n \n Bvariable*\n@@ -1193,6 +1268,10 @@ Gcc_backend::global_variable(const std::string& package_name,\n   if (type_tree == error_mark_node)\n     return this->error_variable();\n \n+  // The GNU linker does not like dynamic variables with zero size.\n+  if ((is_external || !is_hidden) && int_size_in_bytes(type_tree) == 0)\n+    type_tree = this->non_zero_size_type(type_tree);\n+\n   std::string var_name(package_name);\n   var_name.push_back('.');\n   var_name.append(name);"}, {"sha": "fa229320c963d9616a80ffa31cb7ca4a00493e35", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6be4c870c2a1fdb694222ee1f750badc3b3d8a/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=7d6be4c870c2a1fdb694222ee1f750badc3b3d8a", "patch": "@@ -843,7 +843,9 @@ Gogo::write_globals()\n \t\t  this->backend()->global_variable_set_init(var,\n \t\t\t\t\t\t\t    tree_to_expr(init));\n \t\t}\n-\t      else if (is_sink)\n+\t      else if (is_sink\n+\t\t       || int_size_in_bytes(TREE_TYPE(init)) == 0\n+\t\t       || int_size_in_bytes(TREE_TYPE(vec[i])) == 0)\n \t\tvar_init_tree = init;\n \t      else\n \t\tvar_init_tree = fold_build2_loc(no->location().gcc_location(),"}]}