{"sha": "435317e25c1f3571a72d97d089ca085ffd0bf20b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1MzE3ZTI1YzFmMzU3MWE3MmQ5N2QwODljYTA4NWZmZDBiZjIwYg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-05-25T19:10:54Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-05-25T19:10:54Z"}, "message": "[multiple changes]\n\n2004-05-25  Andrew Pinski  <pinskia@physics.uc.edu>\n\n\tMerge from the libobjc-branch\n\t2004-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n\t\t* Makefile.in (OBJC_H): Change objc-deps.h to objc-decls.h.\n\n\t2004-02-03  Andrew Pinski  <pinskia@physics.uc.edu>\n\n\t\t* Makefile.in (OBJC_H): Add objc-deps.h.\n\n\t2004-01-27  Nicola Pero  <n.pero@mi.flashnet.it>\n\n\t\t* Protocol.m ([-conformsTo:]): If the argument is nil, return NO.\n\t\t([-hash], [-isEqual:]): New methods.\n\n\t2004-01-27  Richard Frith-Macdonald <rfm@gnu.org>\n\n\t\t* sarray.c (sarray_free): Add a better comment.\n\n\t2004-01-27  Adam Fedor  <fedor@gnu.org>\n\n\t\t* hash.c (hash_add): Cast cachep to int.\n\t\t* selector.c (__sel_register_typed_name): Cast\n\t\tsoffset_decode to int.\n\n\t2004-01-27  Alexander Malmberg  <alexander@malmberg.org>\n\n\t\t* selector.c: Rename register_selectors_from_list to\n\t\t__objc_register_selectors_from_list. Update caller.\n\t\t(__objc_register_selectors_from_list): Lock __objc_runtime_mutex\n\t\twhile registering selectors. Use __sel_register_typed_name instead\n\t\tof sel_register_typed_name. Check for NULL method_name:s.\n\t\t(pool_alloc_selector): New function.\n\t\t(__sel_register_typed_name): Use pool_alloc_selector to allocate\n\t\tselector structures.\n\t\t* sendmsg.c (class_add_method_list): Use\n\t\t__objc_register_selectors_from_list.\n\t\t* objc/runtime.h: Add __objc_register_selectors_from_list.\n\n\t2004-01-25  Adam Fedor  <fedor@gnu.org>\n\t            Nicola Pero  <n.pero@mi.flashnet.it>\n\t            Andrew Pinski  <pinskia@physics.uc.edu>\n\n\t\t* objc/objc-decls.h: New file.\n\t\t* objc/objc-api.h (_objc_lookup_class): Mark as export.\n\t\t(_objc_load_callback): Likewise.\n\t\t(_objc_object_alloc): Likewise.\n\t\t(_objc_object_copy): Likewise.\n\t\t(_objc_object_dispose): Likewise.\n\n\t2004-01-25  Andrew Pinski  <pinskia@physics.uc.edu>\n\n\t\t* archive.c: s/__inline__/inline\n\t\t* sendmsg.c: Likewise.\n\n\t\t* encoding.c: Remove FIXME about the warning\n\t\tabout unused variable.\n\t\t* sendmsg.c: Add a FIXME comment saying that\n\t\tthis should be using libffi.\n\n\t\t* Makefile.in (LIBTOOL): Use @LIBTOOL@ now as it works.\n\nFrom-SVN: r82253", "tree": {"sha": "4b71d618aec8fb5c67898b26b6eaab9161fdcf1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b71d618aec8fb5c67898b26b6eaab9161fdcf1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435317e25c1f3571a72d97d089ca085ffd0bf20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435317e25c1f3571a72d97d089ca085ffd0bf20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435317e25c1f3571a72d97d089ca085ffd0bf20b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435317e25c1f3571a72d97d089ca085ffd0bf20b/comments", "author": null, "committer": null, "parents": [{"sha": "f411a73a8caf915d2685c5065de6c918de76daad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f411a73a8caf915d2685c5065de6c918de76daad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f411a73a8caf915d2685c5065de6c918de76daad"}], "stats": {"total": 335, "additions": 248, "deletions": 87}, "files": [{"sha": "99f7769dd409fdca6950f02226ba8968f816109f", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,3 +1,67 @@\n+2004-05-25  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tMerge from the libobjc-branch\n+\t2004-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\t\n+\t\t* Makefile.in (OBJC_H): Change objc-deps.h to objc-decls.h.\n+\t\n+\t2004-02-03  Andrew Pinski  <pinskia@physics.uc.edu>\n+\t\n+\t\t* Makefile.in (OBJC_H): Add objc-deps.h.\n+\t\n+\t2004-01-27  Nicola Pero  <n.pero@mi.flashnet.it>\n+\t\n+\t\t* Protocol.m ([-conformsTo:]): If the argument is nil, return NO.\n+\t\t([-hash], [-isEqual:]): New methods.\n+\t\n+\t2004-01-27  Richard Frith-Macdonald <rfm@gnu.org>\n+\t\n+\t\t* sarray.c (sarray_free): Add a better comment.\n+\t\n+\t2004-01-27  Adam Fedor  <fedor@gnu.org>\n+\t\n+\t\t* hash.c (hash_add): Cast cachep to int.\n+\t\t* selector.c (__sel_register_typed_name): Cast\n+\t\tsoffset_decode to int.\n+\t\n+\t2004-01-27  Alexander Malmberg  <alexander@malmberg.org>\n+\t\n+\t\t* selector.c: Rename register_selectors_from_list to\n+\t\t__objc_register_selectors_from_list. Update caller.\n+\t\t(__objc_register_selectors_from_list): Lock __objc_runtime_mutex\n+\t\twhile registering selectors. Use __sel_register_typed_name instead\n+\t\tof sel_register_typed_name. Check for NULL method_name:s.\n+\t\t(pool_alloc_selector): New function.\n+\t\t(__sel_register_typed_name): Use pool_alloc_selector to allocate\n+\t\tselector structures.\n+\t\t* sendmsg.c (class_add_method_list): Use\n+\t\t__objc_register_selectors_from_list.\n+\t\t* objc/runtime.h: Add __objc_register_selectors_from_list.\n+\t\n+\t2004-01-25  Adam Fedor  <fedor@gnu.org>\n+\t            Nicola Pero  <n.pero@mi.flashnet.it>\n+\t            Andrew Pinski  <pinskia@physics.uc.edu>\n+\t\n+\t\t* objc/objc-decls.h: New file.\n+\t\t* objc/objc-api.h (_objc_lookup_class): Mark as export.\n+\t\t(_objc_load_callback): Likewise.\n+\t\t(_objc_object_alloc): Likewise.\n+\t\t(_objc_object_copy): Likewise.\n+\t\t(_objc_object_dispose): Likewise.\n+\t\n+\t2004-01-25  Andrew Pinski  <pinskia@physics.uc.edu>\n+\t\n+\t\t* archive.c: s/__inline__/inline\n+\t\t* sendmsg.c: Likewise. \n+\t\n+\t\t* encoding.c: Remove FIXME about the warning\n+\t\tabout unused variable.\n+\t\t* sendmsg.c: Add a FIXME comment saying that\n+\t\tthis should be using libffi.\n+\t\n+\t\t* Makefile.in (LIBTOOL): Use @LIBTOOL@ now as it works.\n+\t\n+\n 2004-05-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* archive.c (objc_read_class): Initialize class_name."}, {"sha": "28d22a4d6a77bc26fe4568166146ad1d670b18e0", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -79,8 +79,7 @@ ALL_CFLAGS = -I. -I$(srcdir) $(CPPFLAGS) $(DEFS) $(CFLAGS) $(WARN_CFLAGS) \\\n # numbers.\n LIBOBJC_VERSION = @VERSION@\n LIBOBJC_GC_VERSION = @VERSION@\n-# @LIBTOOL@ does not get it right, so we hack it in - FIXME\n-LIBTOOL = ./libtool\n+LIBTOOL = @LIBTOOL@\n LIBTOOL_COMPILE = $(LIBTOOL) --mode=compile\n LIBTOOL_LINK    = $(LIBTOOL) --mode=link \n LIBTOOL_INSTALL = $(LIBTOOL) --mode=install\n@@ -136,7 +135,7 @@ all: libobjc.la $(OBJC_BOEHM_GC)\n \n OBJC_H = hash.h objc-list.h sarray.h objc.h objc-api.h \\\n \t NXConstStr.h Object.h Protocol.h encoding.h typedstream.h \\\n-\t thr.h\n+\t thr.h objc-decls.h\n \n # Modules that comprise the runtime library.\n "}, {"sha": "a18d544db404ad6755d96c86915eb7e4b6867072", "filename": "libobjc/Protocol.m", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2FProtocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2FProtocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FProtocol.m?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* This file contains the implementation of class Protocol.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC. \n \n@@ -56,6 +56,9 @@ - (BOOL) conformsTo: (Protocol *)aProtocolObject\n   size_t i;\n   struct objc_protocol_list* proto_list;\n \n+  if (aProtocolObject == nil)\n+    return NO;\n+\n   if (!strcmp(aProtocolObject->protocol_name, self->protocol_name))\n     return YES;\n \n@@ -129,4 +132,29 @@ - (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n   return NULL;\n }\n \n+- (unsigned) hash\n+{\n+  /* Compute a hash of the protocol_name; use the same hash algorithm\n+   * that we use for class names; protocol names and class names are\n+   * somewhat similar types of string spaces.\n+   */\n+  int hash = 0, index;\n+  \n+  for (index = 0; protocol_name[index] != '\\0'; index++)\n+    {\n+      hash = (hash << 4) ^ (hash >> 28) ^ protocol_name[index];\n+    }\n+\n+  hash = (hash ^ (hash >> 10) ^ (hash >> 20));\n+\n+  return hash;\n+}\n+\n+- (BOOL) isEqual: (id)obj\n+{\n+  if (strcmp (protocol_name, [obj name]) == 0)\n+    return YES;\n+\n+  return NO;\n+}\n @end"}, {"sha": "b6a1ec3593220581b47cd2788eb464fda3bcebea", "filename": "libobjc/archive.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Farchive.c?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n  /* GNU Objective C Runtime archiving\n-   Copyright (C) 1993, 1995, 1996, 1997, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 2002, 2004 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GCC.\n@@ -62,7 +62,7 @@ const char *objc_skip_type (const char *type);\n static void __objc_finish_write_root_object (struct objc_typed_stream *);\n static void __objc_finish_read_root_object (struct objc_typed_stream *);\n \n-static __inline__ int\n+static inline int\n __objc_code_unsigned_char (unsigned char *buf, unsigned char val)\n {\n   if ((val&_B_VALUE) == val)\n@@ -87,7 +87,7 @@ objc_write_unsigned_char (struct objc_typed_stream *stream,\n   return (*stream->write) (stream->physical, buf, len);\n }\n \n-static __inline__ int\n+static inline int\n __objc_code_char (unsigned char *buf, signed char val)\n {\n   if (val >= 0)\n@@ -108,7 +108,7 @@ objc_write_char (struct objc_typed_stream *stream, signed char value)\n   return (*stream->write) (stream->physical, buf, len);\n }\n \n-static __inline__ int\n+static inline int\n __objc_code_unsigned_short (unsigned char *buf, unsigned short val)\n {\n   if ((val&_B_VALUE) == val)\n@@ -146,7 +146,7 @@ objc_write_unsigned_short (struct objc_typed_stream *stream,\n   return (*stream->write) (stream->physical, buf, len);\n }\n       \n-static __inline__ int\n+static inline int\n __objc_code_short (unsigned char *buf, short val)\n {\n   int sign = (val < 0);\n@@ -165,7 +165,7 @@ objc_write_short (struct objc_typed_stream *stream, short value)\n }\n       \n \n-static __inline__ int\n+static inline int\n __objc_code_unsigned_int (unsigned char *buf, unsigned int val)\n {\n   if ((val&_B_VALUE) == val)\n@@ -202,7 +202,7 @@ objc_write_unsigned_int (struct objc_typed_stream *stream, unsigned int value)\n   return (*stream->write) (stream->physical, buf, len);\n }\n \n-static __inline__ int\n+static inline int\n __objc_code_int (unsigned char *buf, int val)\n {\n   int sign = (val < 0);\n@@ -220,7 +220,7 @@ objc_write_int (struct objc_typed_stream *stream, int value)\n   return (*stream->write) (stream->physical, buf, len);\n }\n \n-static __inline__ int\n+static inline int\n __objc_code_unsigned_long (unsigned char *buf, unsigned long val)\n {\n   if ((val&_B_VALUE) == val)\n@@ -258,7 +258,7 @@ objc_write_unsigned_long (struct objc_typed_stream *stream,\n   return (*stream->write) (stream->physical, buf, len);\n }\n \n-static __inline__ int\n+static inline int\n __objc_code_long (unsigned char *buf, long val)\n {\n   int sign = (val < 0);\n@@ -350,7 +350,7 @@ objc_write_use_common (struct objc_typed_stream *stream, unsigned long key)\n     }\n }\n \n-static __inline__ int\n+static inline int\n __objc_write_extension (struct objc_typed_stream *stream, unsigned char code)\n {\n   if (code <= _B_VALUE)\n@@ -366,7 +366,7 @@ __objc_write_extension (struct objc_typed_stream *stream, unsigned char code)\n     }\n }\n \n-__inline__ int\n+inline int\n __objc_write_object (struct objc_typed_stream *stream, id object)\n {\n   unsigned char buf = '\\0';\n@@ -431,7 +431,7 @@ objc_write_object (struct objc_typed_stream *stream, id object)\n     }\n }\n \n-__inline__ int\n+inline int\n __objc_write_class (struct objc_typed_stream *stream, struct objc_class *class)\n {\n   __objc_write_extension (stream, _BX_CLASS);\n@@ -459,7 +459,7 @@ objc_write_class (struct objc_typed_stream *stream,\n }\n \n \n-__inline__ int \n+inline int \n __objc_write_selector (struct objc_typed_stream *stream, SEL selector)\n {\n   const char *sel_name;\n@@ -501,7 +501,7 @@ objc_write_selector (struct objc_typed_stream *stream, SEL selector)\n ** Read operations \n */\n \n-__inline__ int\n+inline int\n objc_read_char (struct objc_typed_stream *stream, char *val)\n {\n   unsigned char buf;\n@@ -528,7 +528,7 @@ objc_read_char (struct objc_typed_stream *stream, char *val)\n }\n \n \n-__inline__ int\n+inline int\n objc_read_unsigned_char (struct objc_typed_stream *stream, unsigned char *val)\n {\n   unsigned char buf;\n@@ -549,7 +549,7 @@ objc_read_unsigned_char (struct objc_typed_stream *stream, unsigned char *val)\n   return len;\n }\n \n-__inline__ int\n+inline int\n objc_read_short (struct objc_typed_stream *stream, short *value)\n {\n   unsigned char buf[sizeof (short) + 1];\n@@ -577,7 +577,7 @@ objc_read_short (struct objc_typed_stream *stream, short *value)\n   return len;\n }\n \n-__inline__ int\n+inline int\n objc_read_unsigned_short (struct objc_typed_stream *stream,\n \t\t\t  unsigned short *value)\n {\n@@ -605,7 +605,7 @@ objc_read_unsigned_short (struct objc_typed_stream *stream,\n }\n \n \n-__inline__ int\n+inline int\n objc_read_int (struct objc_typed_stream *stream, int *value)\n {\n   unsigned char buf[sizeof (int) + 1];\n@@ -632,7 +632,7 @@ objc_read_int (struct objc_typed_stream *stream, int *value)\n   return len;\n }\n \n-__inline__ int\n+inline int\n objc_read_long (struct objc_typed_stream *stream, long *value)\n {\n   unsigned char buf[sizeof (long) + 1];\n@@ -659,7 +659,7 @@ objc_read_long (struct objc_typed_stream *stream, long *value)\n   return len;\n }\n \n-__inline__ int\n+inline int\n __objc_read_nbyte_uint (struct objc_typed_stream *stream,\n \t\t\tunsigned int nbytes, unsigned int *val)\n {\n@@ -678,7 +678,7 @@ __objc_read_nbyte_uint (struct objc_typed_stream *stream,\n }\n   \n \n-__inline__ int\n+inline int\n objc_read_unsigned_int (struct objc_typed_stream *stream,\n \t\t\tunsigned int *value)\n {\n@@ -715,7 +715,7 @@ __objc_read_nbyte_ulong (struct objc_typed_stream *stream,\n }\n   \n \n-__inline__ int\n+inline int\n objc_read_unsigned_long (struct objc_typed_stream *stream,\n \t\t\t unsigned long *value)\n {\n@@ -733,7 +733,7 @@ objc_read_unsigned_long (struct objc_typed_stream *stream,\n   return len;\n }\n \n-__inline__ int\n+inline int\n objc_read_string (struct objc_typed_stream *stream,\n \t\t  char **string)\n {"}, {"sha": "4d45b4423dfa8f99059fdce8b7f438b61c1d9a90", "filename": "libobjc/encoding.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* Encoding of types for Objective C.\n-   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000, 2002\n+   Copyright (C) 1993, 1995, 1996, 1997, 1998, 2000, 2002, 2004\n    Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n    Bitfield support by Ovidiu Predescu\n@@ -84,8 +84,6 @@ Boston, MA 02111-1307, USA.  */\n \n /* Some ROUND_TYPE_ALIGN macros use TARGET_foo, and consequently\n    target_flags.  Define a dummy entry here to so we don't die.  */\n-/* ??? FIXME: As of 2002-06-21, the attribute `unused' doesn't seem to\n-   eliminate the warning.  */\n static int __attribute__ ((__unused__)) target_flags = 0;\n \n "}, {"sha": "cbea81ad4248429af9eed7241699df396e071734", "filename": "libobjc/hash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fhash.c?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* Hash tables for Objective C internal structures\n-   Copyright (C) 1993, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1996, 1997, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -154,7 +154,7 @@ hash_add (cache_ptr *cachep, const void *key, void *value)\n \t\t\t      (*cachep)->compare_func);\n \n     DEBUG_PRINTF (\"Expanding cache %#x from %d to %d\\n\",\n-\t\t  *cachep, (*cachep)->size, new->size);\n+\t\t  (int) *cachep, (*cachep)->size, new->size);\n \n     /* Copy the nodes from the first hash table to the new one.  */\n     while ((node1 = hash_next (*cachep, node1)))"}, {"sha": "52ad50a1213af3a0210986b17b28c0aba41c5386", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective-C Runtime API.\n-   Copyright (C) 1993, 1995, 1996, 1997, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"objc/objc.h\"\n #include \"objc/hash.h\"\n #include \"objc/thr.h\"\n+#include \"objc/objc-decls.h\"\n #include <stdio.h>\n #include <stdarg.h>\n \n@@ -100,7 +101,7 @@ struct objc_method_description\n extern void objc_error(id object, int code, const char* fmt, ...);\n extern void objc_verror(id object, int code, const char* fmt, va_list ap);\n typedef BOOL (*objc_error_handler)(id, int code, const char *fmt, va_list ap);\n-objc_error_handler objc_set_error_handler(objc_error_handler func);\n+extern objc_error_handler objc_set_error_handler(objc_error_handler func);\n \n /*\n ** Error codes\n@@ -361,22 +362,22 @@ retval_t objc_msg_sendv(id, SEL, arglist_t);\n ** This may e.g. try to load in the class using dynamic loading.\n ** The function is guaranteed to be passed a non-NULL name string.\n */\n-extern Class (*_objc_lookup_class)(const char *name);\n+objc_EXPORT Class (*_objc_lookup_class)(const char *name);\n \n /*\n ** This is a hook which is called by __objc_exec_class every time a class\n ** or a category is loaded into the runtime.  This may e.g. help a\n ** dynamic loader determine the classes that have been loaded when\n ** an object file is dynamically linked in.\n */\n-extern void (*_objc_load_callback)(Class class, Category* category);\n+objc_EXPORT void (*_objc_load_callback)(Class class, Category* category);\n \n /*\n ** Hook functions for allocating, copying and disposing of instances\n */\n-extern id (*_objc_object_alloc)(Class class);\n-extern id (*_objc_object_copy)(id object);\n-extern id (*_objc_object_dispose)(id object);\n+objc_EXPORT id (*_objc_object_alloc)(Class class);\n+objc_EXPORT id (*_objc_object_copy)(id object);\n+objc_EXPORT id (*_objc_object_dispose)(id object);\n \n /*\n ** Standard functions for memory allocation and disposal.\n@@ -412,19 +413,19 @@ objc_free(void *mem);\n ** Users should call the normal objc routines above for\n ** memory allocation and disposal within their programs.\n */\n-extern void *(*_objc_malloc)(size_t);\n-extern void *(*_objc_atomic_malloc)(size_t);\n-extern void *(*_objc_valloc)(size_t);\n-extern void *(*_objc_realloc)(void *, size_t);\n-extern void *(*_objc_calloc)(size_t, size_t);\n-extern void (*_objc_free)(void *);\n+objc_EXPORT void *(*_objc_malloc)(size_t);\n+objc_EXPORT void *(*_objc_atomic_malloc)(size_t);\n+objc_EXPORT void *(*_objc_valloc)(size_t);\n+objc_EXPORT void *(*_objc_realloc)(void *, size_t);\n+objc_EXPORT void *(*_objc_calloc)(size_t, size_t);\n+objc_EXPORT void (*_objc_free)(void *);\n \n /*\n **  Hook for method forwarding. This makes it easy to substitute a\n **  library, such as ffcall, that implements closures, thereby avoiding\n **  gcc's __builtin_apply problems.\n */\n-extern IMP (*__objc_msg_forward)(SEL);\n+objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n \n Method_t class_get_class_method(MetaClass class, SEL aSel);\n "}, {"sha": "6d64c3bb52b1b810297e8bc746f227123c28cb2a", "filename": "libobjc/objc/objc-decls.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fobjc%2Fobjc-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fobjc%2Fobjc-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-decls.h?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -0,0 +1,47 @@\n+/* GNU Objective-C Extern helpers for Win32.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with files compiled\n+   with GCC to produce an executable, this does not cause the resulting\n+   executable to be covered by the GNU General Public License.  This\n+   exception does not however invalidate any other reasons why the\n+   executable file might be covered by the GNU General Public License. */\n+\n+#ifndef __objc_decls_INCLUDE_GNU\n+#define __objc_decls_INCLUDE_GNU\n+\n+#if defined (_WIN32) || defined (__WIN32__) || defined (WIN32)\n+\n+#    ifdef DLL_EXPORT /* defined by libtool (if required) */\n+#  define objc_EXPORT  __declspec(dllexport)\n+#  define objc_DECLARE __declspec(dllexport)\n+#else\n+#  define objc_EXPORT  extern __declspec(dllimport)\n+#  define objc_DECLARE extern __declspec(dllimport)\n+#endif\n+\n+#else\n+\n+#  define objc_EXPORT  extern\n+#  define objc_DECLARE \n+\n+#endif\n+\n+#endif /* __objc_decls_INCLUDE_GNU */"}, {"sha": "17a3e5e9e76801e83fb673498aa01c02eaefc6c8", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective C Runtime internal declarations\n-   Copyright (C) 1993, 1995, 1996, 1997, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 2002, 2004 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GCC.\n@@ -49,6 +49,7 @@ extern void __objc_init_dispatch_tables(void); /* (objc-dispatch.c) */\n extern void __objc_install_premature_dtable(Class); /* (objc-dispatch.c) */\n extern void __objc_resolve_class_links(void);  /* (objc-class.c) */\n extern void __objc_register_selectors_from_class(Class); /* (objc-sel.c) */\n+extern void __objc_register_selectors_from_list (MethodList_t); /* (selector.c) */\n extern void __objc_update_dispatch_table_for_class (Class);/* (objc-msg.c) */\n \n extern int  __objc_init_thread_system(void);    /* thread.c */"}, {"sha": "e7e69a9e8ce4dc40d74bbe7ec49bbe307a35c19a", "filename": "libobjc/sarray.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsarray.c?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* Sparse Arrays for Objective C dispatch tables\n-   Copyright (C) 1993, 1995, 1996, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -459,7 +459,9 @@ sarray_free (struct sarray *array) {\n \n #endif\n   \n-  /* If this is a copy, go ahead and decrement/deallocate the original */\n+  /* If this is a copy of another array, we free it (which might just\n+   * decrement its reference count so it will be freed when no longer in use).\n+   */\n   if (array->is_copy_of)\n     sarray_free (array->is_copy_of);\n "}, {"sha": "5ff0d8c71e24c293dd523bd7842ef1cb47cbb4e5", "filename": "libobjc/selector.c", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective C Runtime selector related functions\n-   Copyright (C) 1993, 1995, 1996, 1997, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 2002, 2004 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GCC.\n@@ -35,8 +35,6 @@ static struct sarray *__objc_selector_array = 0; /* uid -> sel  !T:MUTEX */\n static struct sarray *__objc_selector_names = 0; /* uid -> name !T:MUTEX */\n static cache_ptr      __objc_selector_hash  = 0; /* name -> uid !T:MUTEX */\n \n-static void register_selectors_from_list (MethodList_t);\n-\n /* Number of selectors stored in each of the above tables */\n unsigned int __objc_selector_max_index = 0;     /* !T:MUTEX */\n \n@@ -60,7 +58,7 @@ __objc_register_selectors_from_class (Class class)\n   method_list = class->methods;\n   while (method_list)\n     {\n-      register_selectors_from_list (method_list);\n+      __objc_register_selectors_from_list (method_list);\n       method_list = method_list->method_next;\n     }\n }\n@@ -70,21 +68,27 @@ __objc_register_selectors_from_class (Class class)\n    the record table.  This is the routine that does the actual recording\n    work.\n \n-   This one is only called for Class objects.  For categories,\n-   class_add_method_list is called.\n+   The name and type pointers in the method list must be permanent and\n+   immutable.\n    */\n-static void\n-register_selectors_from_list (MethodList_t method_list)\n+void\n+__objc_register_selectors_from_list (MethodList_t method_list)\n {\n   int i = 0;\n+\n+  objc_mutex_lock (__objc_runtime_mutex);\n   while (i < method_list->method_count)\n     {\n       Method_t method = &method_list->method_list[i];\n-      method->method_name \n-\t= sel_register_typed_name ((const char *) method->method_name, \n-\t\t\t\t   method->method_types);\n+      if (method->method_name)\n+\t{\n+\t  method->method_name\n+\t    = __sel_register_typed_name ((const char *) method->method_name,\n+\t\t\t\t\t method->method_types, 0, YES);\n+\t}\n       i += 1;\n     }\n+  objc_mutex_unlock (__objc_runtime_mutex);\n }\n \n \n@@ -320,6 +324,35 @@ const char *sel_get_type (SEL selector)\n /* The uninstalled dispatch table */\n extern struct sarray *__objc_uninstalled_dtable;\n \n+/* __sel_register_typed_name allocates lots of struct objc_selector:s\n+   of 8 (16, if pointers are 64 bits) bytes at startup. To reduce the number\n+   of malloc calls and memory lost to malloc overhead, we allocate\n+   objc_selector:s in blocks here. This is only called from\n+   __sel_register_typed_name, and __sel_register_typed_name may only be\n+   called when __objc_runtime_mutex is locked.\n+\n+   Note that the objc_selector:s allocated from __sel_register_typed_name\n+   are never freed.\n+\n+   62 because 62 * sizeof (struct objc_selector) = 496 (992). This should\n+   let malloc add some overhead and use a nice, round 512 (1024) byte chunk.\n+   */\n+#define SELECTOR_POOL_SIZE 62\n+static struct objc_selector *selector_pool;\n+static int selector_pool_left;\n+\n+static struct objc_selector *\n+pool_alloc_selector(void)\n+{\n+  if (!selector_pool_left)\n+    {\n+      selector_pool = objc_malloc (sizeof (struct objc_selector)\n+\t\t\t\t   * SELECTOR_POOL_SIZE);\n+      selector_pool_left = SELECTOR_POOL_SIZE;\n+    }\n+  return &selector_pool[--selector_pool_left];\n+}\n+\n /* Store the passed selector name in the selector record and return its\n    selector value (value returned by sel_get_uid).\n    Assumes that the calling function has locked down __objc_runtime_mutex. */\n@@ -369,7 +402,7 @@ __sel_register_typed_name (const char *name, const char *types,\n       if (orig)\n \tj = orig;\n       else\n-\tj = objc_malloc (sizeof (struct objc_selector));\n+\tj = pool_alloc_selector ();\n \n       j->sel_id = (void *) i;\n       /* Can we use the pointer or must copy types?  Don't copy if NULL */\n@@ -388,7 +421,7 @@ __sel_register_typed_name (const char *name, const char *types,\n       if (orig)\n \tj = orig;\n       else\n-\tj = objc_malloc (sizeof (struct objc_selector));\n+\tj = pool_alloc_selector ();\n \t\n       j->sel_id = (void *) i;\n       /* Can we use the pointer or must copy types?  Don't copy if NULL */\n@@ -402,7 +435,7 @@ __sel_register_typed_name (const char *name, const char *types,\n     }\n \n   DEBUG_PRINTF (\"Record selector %s[%s] as: %ld\\n\", name, types, \n-\t\tsoffset_decode (i));\n+\t\t(long) soffset_decode (i));\n   \n   {\n     int is_new = (l == 0);\n@@ -446,7 +479,7 @@ SEL\n sel_register_typed_name (const char *name, const char *type)\n {\n   SEL ret;\n-    \n+\n   objc_mutex_lock (__objc_runtime_mutex);\n   /* Assume that name and type are not constant static memory and need to\n      be copied before put into a runtime structure.  is_const == NO */"}, {"sha": "f0b5bbb35c2358ed877342dd716c83adfd1e783c", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435317e25c1f3571a72d97d089ca085ffd0bf20b/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=435317e25c1f3571a72d97d089ca085ffd0bf20b", "patch": "@@ -1,6 +1,6 @@\n /* GNU Objective C Runtime message lookup \n    Copyright (C) 1993, 1995, 1996, 1997, 1998,\n-   2001, 2002 Free Software Foundation, Inc.\n+   2001, 2002, 2004 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GCC.\n@@ -26,6 +26,8 @@ Boston, MA 02111-1307, USA.  */\n    covered by the GNU General Public License.  */\n \n /* FIXME: This file has no business including tm.h.  */\n+/* FIXME: This should be using libffi instead of __builtin_apply\n+   and friends.  */\n \n #include \"tconfig.h\"\n #include \"coretypes.h\"\n@@ -35,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"encoding.h\"\n #include \"runtime-info.h\"\n \n-/* this is how we hack STRUCT_VALUE to be 1 or 0 */\n+/* This is how we hack STRUCT_VALUE to be 1 or 0.   */\n #define gen_rtx(args...) 1\n #define gen_rtx_MEM(args...) 1\n #define gen_rtx_REG(args...) 1\n@@ -83,7 +85,7 @@ Method_t search_for_method_in_list (MethodList_t list, SEL op);\n id nil_method (id, SEL);\n \n /* Given a selector, return the proper forwarding implementation. */\n-__inline__\n+inline\n IMP\n __objc_get_forward_imp (SEL sel)\n {\n@@ -115,7 +117,7 @@ __objc_get_forward_imp (SEL sel)\n }\n \n /* Given a class and selector, return the selector's implementation.  */\n-__inline__\n+inline\n IMP\n get_imp (Class class, SEL sel)\n {\n@@ -176,7 +178,7 @@ get_imp (Class class, SEL sel)\n /* Query if an object can respond to a selector, returns YES if the\n object implements the selector otherwise NO.  Does not check if the\n method can be forwarded. */\n-__inline__\n+inline\n BOOL\n __objc_responds_to (id object, SEL sel)\n {\n@@ -201,7 +203,7 @@ __objc_responds_to (id object, SEL sel)\n /* This is the lookup function.  All entries in the table are either a \n    valid method *or* zero.  If zero then either the dispatch table\n    needs to be installed or it doesn't exist and forwarding is attempted. */\n-__inline__\n+inline\n IMP\n objc_msg_lookup (id receiver, SEL op)\n {\n@@ -463,28 +465,14 @@ __objc_update_dispatch_table_for_class (Class class)\n \n    This one is only called for categories. Class objects have their\n    methods installed right away, and their selectors are made into\n-   SEL's by the function __objc_register_selectors_from_class. */ \n+   SEL's by the function __objc_register_selectors_from_class. */\n void\n class_add_method_list (Class class, MethodList_t list)\n {\n-  int i;\n-\n   /* Passing of a linked list is not allowed.  Do multiple calls.  */\n   assert (! list->method_next);\n \n-  /* Check for duplicates.  */\n-  for (i = 0; i < list->method_count; ++i)\n-    {\n-      Method_t method = &list->method_list[i];\n-\n-      if (method->method_name)  /* Sometimes these are NULL */\n-\t{\n-\t  /* This is where selector names are transmogrified to SEL's */\n-\t  method->method_name = \n-\t    sel_register_typed_name ((const char *) method->method_name,\n-\t\t\t\t     method->method_types);\n-\t}\n-    }\n+  __objc_register_selectors_from_list(list);\n \n   /* Add the methods to the class's method list.  */\n   list->method_next = class->methods;\n@@ -705,7 +693,7 @@ __objc_print_dtable_stats ()\n /* Returns the uninstalled dispatch table indicator.\n  If a class' dispatch table points to __objc_uninstalled_dtable\n  then that means it needs its dispatch table to be installed. */\n-__inline__\n+inline\n struct sarray *\n objc_get_uninstalled_dtable ()\n {"}]}