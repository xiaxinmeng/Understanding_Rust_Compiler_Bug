{"sha": "4132f6ba9583e128a00d55961ae8c8e7245b2223", "node_id": "C_kwDOANBUbNoAKDQxMzJmNmJhOTU4M2UxMjhhMDBkNTU5NjFhZThjOGU3MjQ1YjIyMjM", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-04-11T08:29:34Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-04-11T14:56:54Z"}, "message": "RISC-V: Support -misa-spec for arch-canonicalize and multilib-generator. [PR104853]\n\nWe migrate the default ISA spec version from 2.2 to 20191213, but those scripts\naren't updated at the same time, this patch is making both scripts support\ndifferent ISA spec versions.\n\ngcc/ChangeLog:\n\n\tPR target/104853\n\t* config.gcc: Pass -misa-spec to arch-canonicalize and\n\tmultilib-generator.\n\t* config/riscv/arch-canonicalize: Adding -misa-spec option.\n\t(SUPPORTED_ISA_SPEC): New.\n\t(arch_canonicalize): New argument `isa_spec`.\n\tHandle multiple ISA spec versions.\n\t* config/riscv/multilib-generator: Adding -misa-spec option.", "tree": {"sha": "b4d3c0931e5ede16b5287a824f06c295c43acaa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4d3c0931e5ede16b5287a824f06c295c43acaa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4132f6ba9583e128a00d55961ae8c8e7245b2223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4132f6ba9583e128a00d55961ae8c8e7245b2223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4132f6ba9583e128a00d55961ae8c8e7245b2223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4132f6ba9583e128a00d55961ae8c8e7245b2223/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62b0f731b32c1842bb679edc5b8d842b5e5732f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62b0f731b32c1842bb679edc5b8d842b5e5732f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62b0f731b32c1842bb679edc5b8d842b5e5732f"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "48a5bbcf787fe4685d5257edc2d872c32ddbf80b", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4132f6ba9583e128a00d55961ae8c8e7245b2223/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4132f6ba9583e128a00d55961ae8c8e7245b2223/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4132f6ba9583e128a00d55961ae8c8e7245b2223", "patch": "@@ -4717,7 +4717,7 @@ case \"${target}\" in\n \t\tesac\n \t\tPYTHON=`which python || which python3 || which python2`\n \t\tif test \"x${PYTHON}\" != x; then\n-\t\t\twith_arch=`${PYTHON} ${srcdir}/config/riscv/arch-canonicalize ${with_arch}`\n+\t\t\twith_arch=`${PYTHON} ${srcdir}/config/riscv/arch-canonicalize -misa-spec=${with_isa_spec} ${with_arch}`\n \t\tfi\n \t\ttm_defines=\"${tm_defines} TARGET_RISCV_DEFAULT_ARCH=${with_arch}\"\n \n@@ -4766,6 +4766,7 @@ case \"${target}\" in\n \t\t\tcase \"${target}\" in\n \t\t\triscv*-*-elf*)\n \t\t\t\tif ${srcdir}/config/riscv/multilib-generator \\\n+\t\t\t\t\t-misa-spec=${with_isa_spec} \\\n \t\t\t\t\t`echo ${with_multilib_generator} | sed 's/;/ /g'`\\\n \t\t\t\t\t> t-multilib-config;\n \t\t\t\tthen"}, {"sha": "f36a2ca4593b412199ec69b2fe5332296b764df1", "filename": "gcc/config/riscv/arch-canonicalize", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4132f6ba9583e128a00d55961ae8c8e7245b2223/gcc%2Fconfig%2Friscv%2Farch-canonicalize", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4132f6ba9583e128a00d55961ae8c8e7245b2223/gcc%2Fconfig%2Friscv%2Farch-canonicalize", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Farch-canonicalize?ref=4132f6ba9583e128a00d55961ae8c8e7245b2223", "patch": "@@ -26,11 +26,12 @@\n \n from __future__ import print_function\n import sys\n+import argparse\n import collections\n import itertools\n from functools import reduce\n \n-\n+SUPPORTED_ISA_SPEC = [\"2.2\", \"20190608\", \"20191213\"]\n CANONICAL_ORDER = \"imafdgqlcbjktpvn\"\n LONG_EXT_PREFIXES = ['z', 's', 'h', 'x']\n \n@@ -64,12 +65,16 @@ IMPLIED_EXT = {\n   \"zvl65536b\" : [\"zvl32768b\"],\n }\n \n-def arch_canonicalize(arch):\n+def arch_canonicalize(arch, isa_spec):\n   # TODO: Support extension version.\n+  is_isa_spec_2p2 = isa_spec == '2.2'\n   new_arch = \"\"\n+  extra_long_ext = []\n   if arch[:5] in ['rv32e', 'rv32i', 'rv32g', 'rv64i', 'rv64g']:\n-    # TODO: We should expand g to imad_zifencei once we support newer spec.\n     new_arch = arch[:5].replace(\"g\", \"imafd\")\n+    if arch[:5] in ['rv32g', 'rv64g']:\n+      if not is_isa_spec_2p2:\n+        extra_long_ext = ['zicsr', 'zifencei']\n   else:\n     raise Exception(\"Unexpected arch: `%s`\" % arch[:5])\n \n@@ -86,6 +91,8 @@ def arch_canonicalize(arch):\n     long_exts = []\n     std_exts = list(arch[5:])\n \n+  long_exts += extra_long_ext\n+\n   #\n   # Handle implied extensions.\n   #\n@@ -96,6 +103,9 @@ def arch_canonicalize(arch):\n       if ext in IMPLIED_EXT:\n         implied_exts = IMPLIED_EXT[ext]\n         for implied_ext in implied_exts:\n+          if implied_ext == 'zicsr' and is_isa_spec_2p2:\n+              continue\n+\n           if implied_ext not in std_exts + long_exts:\n             long_exts.append(implied_ext)\n             any_change = True\n@@ -115,6 +125,9 @@ def arch_canonicalize(arch):\n     return (exts.startswith(\"x\"), exts.startswith(\"zxm\"),\n             LONG_EXT_PREFIXES.index(exts[0]), canonical_sort, exts[1:])\n \n+  # Removing duplicates.\n+  long_exts = list(set(long_exts))\n+\n   # Multi-letter extension must be in lexicographic order.\n   long_exts = list(sorted(filter(lambda x:len(x) != 1, long_exts),\n                           key=longext_sort))\n@@ -134,11 +147,20 @@ def arch_canonicalize(arch):\n   # Concat rest of the multi-char extensions.\n   if long_exts:\n     new_arch += \"_\" + \"_\".join(long_exts)\n+\n   return new_arch\n \n if len(sys.argv) < 2:\n   print (\"Usage: %s <arch_str> [<arch_str>*]\" % sys.argv)\n   sys.exit(1)\n \n-for arg in sys.argv[1:]:\n-  print (arch_canonicalize(arg))\n+parser = argparse.ArgumentParser()\n+parser.add_argument('-misa-spec', type=str,\n+                    default='20191213',\n+                    choices=SUPPORTED_ISA_SPEC)\n+parser.add_argument('arch_strs', nargs=argparse.REMAINDER)\n+\n+args = parser.parse_args()\n+\n+for arch in args.arch_strs:\n+  print (arch_canonicalize(arch, args.misa_spec))"}, {"sha": "36698d48f56c534457083c81ac420c8acb2a6282", "filename": "gcc/config/riscv/multilib-generator", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4132f6ba9583e128a00d55961ae8c8e7245b2223/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4132f6ba9583e128a00d55961ae8c8e7245b2223/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fmultilib-generator?ref=4132f6ba9583e128a00d55961ae8c8e7245b2223", "patch": "@@ -46,16 +46,18 @@ import argparse\n # TODO: Add test for this script.\n #\n \n+SUPPORTED_ISA_SPEC = [\"2.2\", \"20190608\", \"20191213\"]\n arches = collections.OrderedDict()\n abis = collections.OrderedDict()\n required = []\n reuse = []\n \n-def arch_canonicalize(arch):\n+def arch_canonicalize(arch, isa_spec):\n   this_file = os.path.abspath(os.path.join( __file__))\n   arch_can_script = \\\n     os.path.join(os.path.dirname(this_file), \"arch-canonicalize\")\n-  proc = subprocess.Popen([sys.executable, arch_can_script, arch],\n+  proc = subprocess.Popen([sys.executable, arch_can_script,\n+                          '-misa-spec=%s' % isa_spec, arch],\n                           stdout=subprocess.PIPE)\n   out, err = proc.communicate()\n   return out.decode().strip()\n@@ -133,6 +135,9 @@ options = filter(lambda x:x.startswith(\"--\"), sys.argv[1:])\n \n parser = argparse.ArgumentParser()\n parser.add_argument(\"--cmodel\", type=str)\n+parser.add_argument('-misa-spec', type=str,\n+                    default='20191213',\n+                    choices=SUPPORTED_ISA_SPEC)\n parser.add_argument(\"cfgs\", type=str, nargs='*')\n args = parser.parse_args()\n \n@@ -158,13 +163,14 @@ for cmodel in cmodels:\n     if cmodel == \"compact\" and arch.startswith(\"rv32\"):\n       continue\n \n-    arch = arch_canonicalize (arch)\n+    arch = arch_canonicalize (arch, args.misa_spec)\n     arches[arch] = 1\n     abis[abi] = 1\n     extra = list(filter(None, extra.split(',')))\n     ext_combs = expand_combination(ext)\n     alts = sum([[x] + [x + y for y in ext_combs] for x in [arch] + extra], [])\n-    alts = list(map(arch_canonicalize, alts))\n+    alts = filter(lambda x: len(x) != 0, alts)\n+    alts = list(map(lambda a : arch_canonicalize(a, args.misa_spec), alts))\n \n     # Drop duplicated entry.\n     alts = unique(alts)"}]}