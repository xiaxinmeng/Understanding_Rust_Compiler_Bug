{"sha": "1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3YmZjYzMyZDBhNGI0MWU4NmM1NDFjYzQ4YjgwZjUyOWNhODgxOA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-04-29T02:34:11Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-04-29T02:34:11Z"}, "message": "trans-expr.c (gfc_conv_expr_present): Fix broken assert.\n\n2005-04-29  Paul Brook   <paul@codesourcery.com>\n\n\t* trans-expr.c (gfc_conv_expr_present): Fix broken assert.  Update\n\tcomment.\n\nFrom-SVN: r98968", "tree": {"sha": "f55b04a0462d8b524931c5473322c4b7989f8482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55b04a0462d8b524931c5473322c4b7989f8482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/comments", "author": null, "committer": null, "parents": [{"sha": "21bf822e8384114a2838d101beb6c414783e6c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bf822e8384114a2838d101beb6c414783e6c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21bf822e8384114a2838d101beb6c414783e6c08"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "9857aee7324a6a53f3cb89e8b8e6680b15e87059", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "patch": "@@ -1,3 +1,8 @@\n+2005-04-29  Paul Brook   <paul@codesourcery.com>\n+\n+\t* trans-expr.c (gfc_conv_expr_present): Fix broken assert.  Update\n+\tcomment.\n+\n 2005-04-29  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.h (gfc_namespace): Add seen_implicit_none field."}, {"sha": "58a0d6e1494a636509cc15aba9f25e75c82e3d0a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "patch": "@@ -115,14 +115,15 @@ gfc_make_safe_expr (gfc_se * se)\n }\n \n \n-/* Return an expression which determines if a dummy parameter is present.  */\n+/* Return an expression which determines if a dummy parameter is present.\n+   Also used for arguments to procedures with multiple entry points.  */\n \n tree\n gfc_conv_expr_present (gfc_symbol * sym)\n {\n   tree decl;\n \n-  gcc_assert (sym->attr.dummy && sym->attr.optional);\n+  gcc_assert (sym->attr.dummy);\n \n   decl = gfc_get_symbol_decl (sym);\n   if (TREE_CODE (decl) != PARM_DECL)"}, {"sha": "eddf8c94100861e81fc70278a43dcea8d4862d5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "patch": "@@ -1,3 +1,7 @@\n+2005-04-29  Paul Brook   <paul@codesourcery.com>\n+\n+\t* gfortran.dg/entry_3.f90: New test.\n+\n 2005-04-29  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.dg/implicit_4.f90: New test."}, {"sha": "36595ee31e10e8ffe10a54fa2110acdeaa55fa67", "filename": "gcc/testsuite/gfortran.dg/entry_3.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_3.f90?ref=1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! Test assumed shape arrays in procedures with multiple entry points.\n+! Arguments that aren't present in all entry points must be treated like\n+! optional arguments.\n+module entry_4\n+contains\n+subroutine foo(a)\n+  integer, dimension(:) :: a\n+  integer, dimension(:) :: b\n+  a = (/1, 2/)\n+  return\n+entry bar(b)\n+  b = (/3, 4/)\n+end subroutine\n+end module\n+\n+program entry_4_prog\n+  use entry_4\n+  integer :: a(2)\n+  a = 0\n+  call foo(a)\n+  if (any (a .ne. (/1, 2/))) call abort\n+  call bar(a)\n+  if (any (a .ne. (/3, 4/))) call abort\n+end program"}]}