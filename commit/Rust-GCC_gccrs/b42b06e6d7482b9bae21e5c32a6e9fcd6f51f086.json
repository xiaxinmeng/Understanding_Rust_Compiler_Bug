{"sha": "b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyYjA2ZTZkNzQ4MmI5YmFlMjFlNWMzMmE2ZTlmY2Q2ZjUxZjA4Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:23:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:23:47Z"}, "message": "loop-iv.c (altered_reg_used): Turn from being a for_each_rtx callback to being a function that examines each...\n\ngcc/\n\t* loop-iv.c (altered_reg_used): Turn from being a for_each_rtx callback\n\tto being a function that examines each subrtx itself.\n\t(simplify_using_condition, simplify_using_initial_values): Update\n\taccordingly.\n\nFrom-SVN: r214646", "tree": {"sha": "cd0e7e0b40b0769994f36f8009e05a0175451884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd0e7e0b40b0769994f36f8009e05a0175451884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ca29addfc97aa04a3da082840ea0c7bf5dedb18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca29addfc97aa04a3da082840ea0c7bf5dedb18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca29addfc97aa04a3da082840ea0c7bf5dedb18"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "253db61aa3594ee2e8fbaee32235445aaac6a457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* loop-iv.c (altered_reg_used): Turn from being a for_each_rtx callback\n+\tto being a function that examines each subrtx itself.\n+\t(simplify_using_condition, simplify_using_initial_values): Update\n+\taccordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* loop-iv.c: Include rtl-iter.h."}, {"sha": "27bc87959669c455ec605150d7d99c42fb41db9e", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=b42b06e6d7482b9bae21e5c32a6e9fcd6f51f086", "patch": "@@ -1328,15 +1328,19 @@ inverse (uint64_t x, int mod)\n   return rslt;\n }\n \n-/* Checks whether register *REG is in set ALT.  Callback for for_each_rtx.  */\n+/* Checks whether any register in X is in set ALT.  */\n \n-static int\n-altered_reg_used (rtx *reg, void *alt)\n+static bool\n+altered_reg_used (const_rtx x, bitmap alt)\n {\n-  if (!REG_P (*reg))\n-    return 0;\n-\n-  return REGNO_REG_SET_P ((bitmap) alt, REGNO (*reg));\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      if (REG_P (x) && REGNO_REG_SET_P (alt, REGNO (x)))\n+\treturn true;\n+    }\n+  return false;\n }\n \n /* Marks registers altered by EXPR in set ALT.  */\n@@ -1772,8 +1776,7 @@ simplify_using_condition (rtx cond, rtx *expr, regset altered)\n \n   /* If some register gets altered later, we do not really speak about its\n      value at the time of comparison.  */\n-  if (altered\n-      && for_each_rtx (&cond, altered_reg_used, altered))\n+  if (altered && altered_reg_used (cond, altered))\n     return;\n \n   if (GET_CODE (cond) == EQ\n@@ -2051,7 +2054,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t      /* If we did not use this insn to make a replacement, any overlap\n \t\t between stores in this insn and our expression will cause the\n \t\t expression to become invalid.  */\n-\t      if (for_each_rtx (expr, altered_reg_used, this_altered))\n+\t      if (altered_reg_used (*expr, this_altered))\n \t\tgoto out;\n \n \t      /* Likewise for the conditions.  */\n@@ -2061,7 +2064,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t\t  rtx old_cond = XEXP (note, 0);\n \n \t\t  pnote_next = (rtx_expr_list **)&XEXP (note, 1);\n-\t\t  if (for_each_rtx (&old_cond, altered_reg_used, this_altered))\n+\t\t  if (altered_reg_used (old_cond, this_altered))\n \t\t    {\n \t\t      *pnote = *pnote_next;\n \t\t      pnote_next = pnote;\n@@ -2079,7 +2082,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t     can't return it to the caller.  However, it is still valid for\n \t     further simplification, so keep searching to see if we can\n \t     eventually turn it into a constant.  */\n-\t  if (for_each_rtx (expr, altered_reg_used, altered))\n+\t  if (altered_reg_used (*expr, altered))\n \t    expression_valid = false;\n \t  if (expression_valid)\n \t    last_valid_expr = *expr;"}]}