{"sha": "323e61d0143866d73442b3574511d088ff681b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIzZTYxZDAxNDM4NjZkNzM0NDJiMzU3NDUxMWQwODhmZjY4MWIwYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2008-05-20T12:52:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:52:09Z"}, "message": "2008-05-20  Bob Duff  <duff@adacore.com>\n\n\t* a-rttiev.adb\n\t(Set_Handler): Remove code from both of these that implements\n\tRM-D.15(15/2), because it causes a race condition and potential\n\tdeadlock.\n\t(Process_Queued_Events): Add comment explaining \"exception when others\n\t=> null\". Add clarifying \".all\", even though implicit .all is legal\n\there.\n\nFrom-SVN: r135648", "tree": {"sha": "301efa790bc8a3fe94aa51dea679380b91e72839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/301efa790bc8a3fe94aa51dea679380b91e72839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/323e61d0143866d73442b3574511d088ff681b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323e61d0143866d73442b3574511d088ff681b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/323e61d0143866d73442b3574511d088ff681b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323e61d0143866d73442b3574511d088ff681b0c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8436e37c4bbf4bd43b0e0f07cceeddcb1e2183ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8436e37c4bbf4bd43b0e0f07cceeddcb1e2183ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8436e37c4bbf4bd43b0e0f07cceeddcb1e2183ff"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "72ae4df0be4149962d0e88fcf058adb27a240050", "filename": "gcc/ada/a-rttiev.adb", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/323e61d0143866d73442b3574511d088ff681b0c/gcc%2Fada%2Fa-rttiev.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/323e61d0143866d73442b3574511d088ff681b0c/gcc%2Fada%2Fa-rttiev.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rttiev.adb?ref=323e61d0143866d73442b3574511d088ff681b0c", "patch": "@@ -66,8 +66,8 @@ package body Ada.Real_Time.Timing_Events is\n    --  Used for mutually exclusive access to All_Events\n \n    procedure Process_Queued_Events;\n-   --  Examine the queue of pending events for any that have timed-out. For\n-   --  those that have timed-out, remove them from the queue and invoke their\n+   --  Examine the queue of pending events for any that have timed out. For\n+   --  those that have timed out, remove them from the queue and invoke their\n    --  handler (unless the user has cancelled the event by setting the handler\n    --  pointer to null). Mutually exclusive access is held via Event_Queue_Lock\n    --  during part of the processing.\n@@ -142,7 +142,7 @@ package body Ada.Real_Time.Timing_Events is\n \n          if Next_Event.Timeout > Clock then\n \n-            --  We found one that has not yet timed-out. The queue is in\n+            --  We found one that has not yet timed out. The queue is in\n             --  ascending order by Timeout so there is no need to continue\n             --  processing (and indeed we must not continue since we always\n             --  delete the first element).\n@@ -182,8 +182,12 @@ package body Ada.Real_Time.Timing_Events is\n             Next_Event.Handler := null;\n \n             if Handler /= null then\n-               Handler (Timing_Event (Next_Event.all));\n+               Handler.all (Timing_Event (Next_Event.all));\n             end if;\n+\n+         --  Ignore exceptions propagated by Handler.all, as required by\n+         --  RM-D.15(21/2)\n+\n          exception\n             when others =>\n                null;\n@@ -261,12 +265,15 @@ package body Ada.Real_Time.Timing_Events is\n    begin\n       Remove_From_Queue (Event'Unchecked_Access);\n       Event.Handler := null;\n-      if At_Time <= Clock then\n-         if Handler /= null then\n-            Handler (Event);\n-         end if;\n-         return;\n-      end if;\n+\n+      --  RM-D.15(15/2) requires that at this point, we check whether the time\n+      --  has already passed, and if so, call Handler.all directly from here\n+      --  instead of doing the enqueuing below. However, this causes a nasty\n+      --  race condition and potential deadlock. If the current task has\n+      --  already locked the protected object of Handler.all, and the time has\n+      --  passed, deadlock would occur. Therefore, we ignore the requirement.\n+      --  The same comment applies to the other Set_Handler below.\n+\n       if Handler /= null then\n          Event.Timeout := At_Time;\n          Event.Handler := Handler;\n@@ -286,12 +293,9 @@ package body Ada.Real_Time.Timing_Events is\n    begin\n       Remove_From_Queue (Event'Unchecked_Access);\n       Event.Handler := null;\n-      if In_Time <= Time_Span_Zero then\n-         if Handler /= null then\n-            Handler (Event);\n-         end if;\n-         return;\n-      end if;\n+\n+      --  See comment in the other Set_Handler above.\n+\n       if Handler /= null then\n          Event.Timeout := Clock + In_Time;\n          Event.Handler := Handler;"}]}