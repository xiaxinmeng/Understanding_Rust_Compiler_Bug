{"sha": "1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkNzZiMjQzMDZlZDRkZjRjZjllNzk3ZDkwMDY5OWVkNTljZTdmNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-05-22T19:49:50Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-05-26T00:46:31Z"}, "message": "Optimize x < 0 ? ~y : y to (x >> 31) ^ y in match.pd\n\nThis copies the optimization that is done in phiopt for\n\"x < 0 ? ~y : y to (x >> 31) ^ y\" into match.pd. The code\nfor phiopt is kept around until phiopt uses match.pd (which\nI am working towards).\n\nNote the original testcase is now optimized early on and I added a\nnew testcase to optimize during phiopt.\n\nOK?  Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\nDifferences from v1:\nV2: Add check for integeral type to make sure vector types are not done.\n\ngcc:\n\t* match.pd (x < 0 ? ~y : y): New patterns.\n\ngcc/testsuite:\n\t* gcc.dg/tree-ssa/pr96928.c: Update test for slightly different IR.\n\t* gcc.dg/tree-ssa/pr96928-1.c: New testcase.", "tree": {"sha": "21638bbbf36429bc99662ceafab24dc0cda85ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21638bbbf36429bc99662ceafab24dc0cda85ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6bdd7a4cb41ee057f2d064fffcb00f23ce6b497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bdd7a4cb41ee057f2d064fffcb00f23ce6b497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bdd7a4cb41ee057f2d064fffcb00f23ce6b497"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "dd730814942f436a4a93087a89f4feae165a440a", "filename": "gcc/match.pd", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "patch": "@@ -4875,6 +4875,38 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (bit_and@2 @0 integer_pow2p@1) @1)\n   (icmp @2 { build_zero_cst (TREE_TYPE (@0)); })))\n \n+(for cmp (ge lt)\n+/* x < 0 ? ~y : y into (x >> (prec-1)) ^ y. */\n+/* x >= 0 ? ~y : y into ~((x >> (prec-1)) ^ y). */\n+ (simplify\n+  (cond (cmp @0 integer_zerop) (bit_not @1) @1)\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+        && !TYPE_UNSIGNED (TREE_TYPE (@0))\n+        && TYPE_PRECISION (TREE_TYPE (@0)) == TYPE_PRECISION (type))\n+    (with\n+     {\n+       tree shifter = build_int_cst (integer_type_node, TYPE_PRECISION (type) - 1);\n+     }\n+    (if (cmp == LT_EXPR)\n+     (bit_xor (convert (rshift @0 {shifter;})) @1)\n+     (bit_not (bit_xor (convert (rshift @0 {shifter;})) @1))))))\n+/* x < 0 ? y : ~y into ~((x >> (prec-1)) ^ y). */\n+/* x >= 0 ? y : ~y into (x >> (prec-1)) ^ y. */\n+ (simplify\n+  (cond (cmp @0 integer_zerop) @1 (bit_not @1))\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+        && !TYPE_UNSIGNED (TREE_TYPE (@0))\n+        && TYPE_PRECISION (TREE_TYPE (@0)) == TYPE_PRECISION (type))\n+    (with\n+     {\n+       tree shifter = build_int_cst (integer_type_node, TYPE_PRECISION (type) - 1);\n+     }\n+    (if (cmp == GE_EXPR)\n+     (bit_xor (convert (rshift @0 {shifter;})) @1)\n+     (bit_not (bit_xor (convert (rshift @0 {shifter;})) @1)))))))\n+\n /* If we have (A & C) != 0 ? D : 0 where C and D are powers of 2,\n    convert this into a shift followed by ANDing with D.  */\n (simplify"}, {"sha": "a2770e5e8965f4a828687d8dc4def159138eb912", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96928-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96928-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96928-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96928-1.c?ref=1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "patch": "@@ -0,0 +1,48 @@\n+/* PR tree-optimization/96928 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt2\" } */\n+/* { dg-final { scan-tree-dump-times \" = a_\\[0-9]*\\\\\\(D\\\\\\) >> \" 5 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-times \" = ~c_\\[0-9]*\\\\\\(D\\\\\\);\" 1 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-times \" = ~\" 1 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-times \" = \\[abc_0-9\\\\\\(\\\\\\)D]* \\\\\\^ \" 5 \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-not \"a < 0\" \"phiopt2\" } } */\n+\n+int\n+foo (int a)\n+{\n+  if (a < 0)\n+    return ~a;\n+  return a;\n+}\n+\n+int\n+bar (int a, int b)\n+{\n+  if (a < 0)\n+    return ~b;\n+  return b;\n+}\n+\n+unsigned\n+baz (int a, unsigned int b)\n+{\n+  if (a < 0)\n+    return ~b;\n+  return b;\n+}\n+\n+unsigned\n+qux (int a, unsigned int c)\n+{\n+  if (a >= 0)\n+    return ~c;\n+  return c;\n+}\n+\n+int\n+corge (int a, int b)\n+{\n+  if (a >= 0)\n+    return b;\n+  return ~b;\n+}"}, {"sha": "e8fd82fc26ed25d77cdae577cc4fa9b857962525", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96928.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96928.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd76b24306ed4df4cf9e797d900699ed59ce7f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96928.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96928.c?ref=1fd76b24306ed4df4cf9e797d900699ed59ce7f7", "patch": "@@ -1,8 +1,11 @@\n /* PR tree-optimization/96928 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-phiopt2\" } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt2 -fdump-tree-optimized\" } */\n /* { dg-final { scan-tree-dump-times \" = a_\\[0-9]*\\\\\\(D\\\\\\) >> \" 5 \"phiopt2\" } } */\n-/* { dg-final { scan-tree-dump-times \" = ~c_\\[0-9]*\\\\\\(D\\\\\\);\" 1 \"phiopt2\" } } */\n+/* The following check is done at optimized because a ^ (~b) is rewritten as ~(a^b)\n+   and in the case of match.pd optimizing these ?:, the ~ is moved out already\n+   by the time we get to phiopt2. */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\^ c_\\[0-9]*\\\\\\(D\\\\\\);\" 1 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \" = ~\" 1 \"phiopt2\" } } */\n /* { dg-final { scan-tree-dump-times \" = \\[abc_0-9\\\\\\(\\\\\\)D]* \\\\\\^ \" 5 \"phiopt2\" } } */\n /* { dg-final { scan-tree-dump-not \"a < 0\" \"phiopt2\" } } */"}]}