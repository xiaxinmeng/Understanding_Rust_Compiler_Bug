{"sha": "6df0c8d417fb33ea130e2957755a60483e9fd692", "node_id": "C_kwDOANBUbNoAKDZkZjBjOGQ0MTdmYjMzZWExMzBlMjk1Nzc1NWE2MDQ4M2U5ZmQ2OTI", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-02-28T12:27:22Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-03-01T09:10:29Z"}, "message": "ipa: Improve error handling for target_clone single value\n\n\tPR ipa/104533\n\ngcc/c-family/ChangeLog:\n\n\t* c-attribs.cc (handle_target_clones_attribute): Use\n\tget_target_clone_attr_len and report warning soon.\n\ngcc/ChangeLog:\n\n\t* multiple_target.cc (get_attr_len): Move to tree.c.\n\t(expand_target_clones): Remove single value checking.\n\t* tree.cc (get_target_clone_attr_len): New fn.\n\t* tree.h (get_target_clone_attr_len): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/pr104533.C: New test.", "tree": {"sha": "0a9cf70f1d60f30e262cbae094ffacfe38955ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9cf70f1d60f30e262cbae094ffacfe38955ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df0c8d417fb33ea130e2957755a60483e9fd692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df0c8d417fb33ea130e2957755a60483e9fd692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df0c8d417fb33ea130e2957755a60483e9fd692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df0c8d417fb33ea130e2957755a60483e9fd692/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88f683e57acb06593959c26c9d78861fcd15cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88f683e57acb06593959c26c9d78861fcd15cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88f683e57acb06593959c26c9d78861fcd15cf1"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "d394ea9d57e99d09c3887a19af49b9ed7b510694", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=6df0c8d417fb33ea130e2957755a60483e9fd692", "patch": "@@ -5486,6 +5486,12 @@ handle_target_clones_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t   \"with %qs attribute\", name, \"target\");\n \t  *no_add_attrs = true;\n \t}\n+      else if (get_target_clone_attr_len (args) == -1)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"single %<target_clones%> attribute is ignored\");\n+\t  *no_add_attrs = true;\n+\t}\n       else\n       /* Do not inline functions with multiple clone targets.  */\n \tDECL_UNINLINABLE (*node) = 1;"}, {"sha": "7fe02fb55c8be476e8e635487a6808b47fe2a199", "filename": "gcc/multiple_target.cc", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Fmultiple_target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Fmultiple_target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.cc?ref=6df0c8d417fb33ea130e2957755a60483e9fd692", "patch": "@@ -185,30 +185,6 @@ create_dispatcher_calls (struct cgraph_node *node)\n     }\n }\n \n-/* Return length of attribute names string,\n-   if arglist chain > 1, -1 otherwise.  */\n-\n-static int\n-get_attr_len (tree arglist)\n-{\n-  tree arg;\n-  int str_len_sum = 0;\n-  int argnum = 0;\n-\n-  for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n-    {\n-      const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n-      size_t len = strlen (str);\n-      str_len_sum += len + 1;\n-      for (const char *p = strchr (str, ','); p; p = strchr (p + 1, ','))\n-\targnum++;\n-      argnum++;\n-    }\n-  if (argnum <= 1)\n-    return -1;\n-  return str_len_sum;\n-}\n-\n /* Create string with attributes separated by comma.\n    Return number of attributes.  */\n \n@@ -342,7 +318,7 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n     return false;\n \n   tree arglist = TREE_VALUE (attr_target);\n-  int attr_len = get_attr_len (arglist);\n+  int attr_len = get_target_clone_attr_len (arglist);\n \n   /* No need to clone for 1 target attribute.  */\n   if (attr_len == -1)"}, {"sha": "6a1d8def0978b85106c0ad5cab8d119f33085595", "filename": "gcc/testsuite/g++.target/i386/pr104533.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr104533.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr104533.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr104533.C?ref=6df0c8d417fb33ea130e2957755a60483e9fd692", "patch": "@@ -0,0 +1,11 @@\n+/* PR ipa/104533 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c++11 -fPIC -Ofast -fno-semantic-interposition\" } */\n+/* { dg-require-ifunc \"\" } */\n+\n+struct B\n+{\n+  virtual ~B();\n+};\n+__attribute__((target_clones(\"avx\")))\n+B::~B() = default; /* { dg-warning \"single .target_clones. attribute is ignored\" } */"}, {"sha": "4522d90c4d917e2a2ca5886e1862ec047dab67ed", "filename": "gcc/tree.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=6df0c8d417fb33ea130e2957755a60483e9fd692", "patch": "@@ -14553,6 +14553,30 @@ get_attr_nonstring_decl (tree expr, tree *ref)\n   return NULL_TREE;\n }\n \n+/* Return length of attribute names string,\n+   if arglist chain > 1, -1 otherwise.  */\n+\n+int\n+get_target_clone_attr_len (tree arglist)\n+{\n+  tree arg;\n+  int str_len_sum = 0;\n+  int argnum = 0;\n+\n+  for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n+    {\n+      const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n+      size_t len = strlen (str);\n+      str_len_sum += len + 1;\n+      for (const char *p = strchr (str, ','); p; p = strchr (p + 1, ','))\n+\targnum++;\n+      argnum++;\n+    }\n+  if (argnum <= 1)\n+    return -1;\n+  return str_len_sum;\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "36ceed57064048bf252d6724bfc41cf8c9d2b73c", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df0c8d417fb33ea130e2957755a60483e9fd692/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6df0c8d417fb33ea130e2957755a60483e9fd692", "patch": "@@ -6579,4 +6579,6 @@ extern unsigned fndecl_dealloc_argno (tree);\n    object or pointer.  Otherwise return null.  */\n extern tree get_attr_nonstring_decl (tree, tree * = NULL);\n \n+extern int get_target_clone_attr_len (tree);\n+\n #endif  /* GCC_TREE_H  */"}]}