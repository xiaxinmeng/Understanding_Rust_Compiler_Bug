{"sha": "b040b1ce1ff146c1d2067dd010e7ca753882685d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0MGIxY2UxZmYxNDZjMWQyMDY3ZGQwMTBlN2NhNzUzODgyNjg1ZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-07T09:34:14Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-16T08:57:16Z"}, "message": "Reapply all revisions mentioned in LOCAL_PATCHES.\n\n(cherry picked from commit 21bb1625bd4f183984223ce31bd03ba47ed62f27)", "tree": {"sha": "1f71c5b42e16de1fe1f1fb1902716babcb64011a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f71c5b42e16de1fe1f1fb1902716babcb64011a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b040b1ce1ff146c1d2067dd010e7ca753882685d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b040b1ce1ff146c1d2067dd010e7ca753882685d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b040b1ce1ff146c1d2067dd010e7ca753882685d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b040b1ce1ff146c1d2067dd010e7ca753882685d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b997f6e07771c98178ea09f4a8c4446baaf84da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b997f6e07771c98178ea09f4a8c4446baaf84da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b997f6e07771c98178ea09f4a8c4446baaf84da"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "e045c31cd1c38ec4258a1857ced145934b2aa90c", "filename": "libsanitizer/asan/asan_globals.cpp", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fasan%2Fasan_globals.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fasan%2Fasan_globals.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -154,23 +154,6 @@ static void CheckODRViolationViaIndicator(const Global *g) {\n   }\n }\n \n-// Check ODR violation for given global G by checking if it's already poisoned.\n-// We use this method in case compiler doesn't use private aliases for global\n-// variables.\n-static void CheckODRViolationViaPoisoning(const Global *g) {\n-  if (__asan_region_is_poisoned(g->beg, g->size_with_redzone)) {\n-    // This check may not be enough: if the first global is much larger\n-    // the entire redzone of the second global may be within the first global.\n-    for (ListOfGlobals *l = list_of_all_globals; l; l = l->next) {\n-      if (g->beg == l->g->beg &&\n-          (flags()->detect_odr_violation >= 2 || g->size != l->g->size) &&\n-          !IsODRViolationSuppressed(g->name))\n-        ReportODRViolation(g, FindRegistrationSite(g),\n-                           l->g, FindRegistrationSite(l->g));\n-    }\n-  }\n-}\n-\n // Clang provides two different ways for global variables protection:\n // it can poison the global itself or its private alias. In former\n // case we may poison same symbol multiple times, that can help us to\n@@ -216,8 +199,6 @@ static void RegisterGlobal(const Global *g) {\n     // where two globals with the same name are defined in different modules.\n     if (UseODRIndicator(g))\n       CheckODRViolationViaIndicator(g);\n-    else\n-      CheckODRViolationViaPoisoning(g);\n   }\n   if (CanPoisonMemory())\n     PoisonRedZones(*g);"}, {"sha": "43cb4e3bb4fa340b0be7dbbdcca402efeea99606", "filename": "libsanitizer/asan/asan_interceptors.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fasan%2Fasan_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fasan%2Fasan_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.h?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -81,7 +81,12 @@ void InitializePlatformInterceptors();\n #if ASAN_HAS_EXCEPTIONS && !SANITIZER_WINDOWS && !SANITIZER_SOLARIS && \\\n     !SANITIZER_NETBSD\n # define ASAN_INTERCEPT___CXA_THROW 1\n-# define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n+# if ! defined(ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION) \\\n+     || ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION\n+#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n+# else\n+#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 0\n+# endif\n # if defined(_GLIBCXX_SJLJ_EXCEPTIONS) || (SANITIZER_IOS && defined(__arm__))\n #  define ASAN_INTERCEPT__UNWIND_SJLJ_RAISEEXCEPTION 1\n # else"}, {"sha": "a7136de60d25468cce6da9eaaf39b06936678395", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -178,7 +178,7 @@ static const u64 kAArch64_ShadowOffset64 = 1ULL << 36;\n static const u64 kRiscv64_ShadowOffset64 = 0x20000000;\n static const u64 kMIPS32_ShadowOffset32 = 0x0aaa0000;\n static const u64 kMIPS64_ShadowOffset64 = 1ULL << 37;\n-static const u64 kPPC64_ShadowOffset64 = 1ULL << 44;\n+static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n static const u64 kSystemZ_ShadowOffset64 = 1ULL << 52;\n static const u64 kSPARC64_ShadowOffset64 = 1ULL << 43;  // 0x80000000000\n static const u64 kFreeBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000"}, {"sha": "af077439478ef2420496f634113b5340f6a89986", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -730,9 +730,13 @@ u32 GetNumberOfCPUs() {\n #elif SANITIZER_SOLARIS\n   return sysconf(_SC_NPROCESSORS_ONLN);\n #else\n+#if defined(CPU_COUNT)\n   cpu_set_t CPUs;\n   CHECK_EQ(sched_getaffinity(0, sizeof(cpu_set_t), &CPUs), 0);\n   return CPU_COUNT(&CPUs);\n+#else\n+  return 1;\n+#endif\n #endif\n }\n "}, {"sha": "36a8f79cbdb45ec6c3c7dd951a702baac6e74818", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -37,7 +37,7 @@\n extern char **environ;\n #endif\n \n-#if defined(__has_include) && __has_include(<os/trace.h>)\n+#if defined(__has_include) && __has_include(<os/trace.h>) && defined(__BLOCKS__)\n #define SANITIZER_OS_TRACE 1\n #include <os/trace.h>\n #else"}, {"sha": "f22f50391286b484a17c19b2b7efe17995fd858b", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -26,9 +26,12 @@\n \n // With old kernels (and even new kernels on powerpc) asm/stat.h uses types that\n // are not defined anywhere in userspace headers. Fake them. This seems to work\n-// fine with newer headers, too.\n+// fine with newer headers, too.  Beware that with <sys/stat.h>, struct stat\n+// takes the form of struct stat64 on 32-bit platforms if _FILE_OFFSET_BITS=64.\n+// Also, for some platforms (e.g. mips) there are additional members in the\n+// <sys/stat.h> struct stat:s.\n #include <linux/posix_types.h>\n-#if defined(__x86_64__) ||  defined(__mips__)\n+#if defined(__x86_64__)\n #include <sys/stat.h>\n #else\n #define ino_t __kernel_ino_t"}, {"sha": "0812039b038ff5b2216d8985d1b56fbdfdbe0002", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -83,7 +83,7 @@ const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__mips__)\n const unsigned struct_kernel_stat_sz = SANITIZER_ANDROID\n                                            ? FIRST_32_SECOND_64(104, 128)\n-                                           : FIRST_32_SECOND_64(160, 216);\n+                                           : FIRST_32_SECOND_64(144, 216);\n const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__s390__) && !defined(__s390x__)\n const unsigned struct_kernel_stat_sz = 64;"}, {"sha": "b28fc1cf73685fd9c255563228895917aa48a44c", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.cpp", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -84,8 +84,8 @@ static inline uhwptr *GetCanonicFrame(uptr bp,\n   // Nope, this does not look right either. This means the frame after next does\n   // not have a valid frame pointer, but we can still extract the caller PC.\n   // Unfortunately, there is no way to decide between GCC and LLVM frame\n-  // layouts. Assume LLVM.\n-  return bp_prev;\n+  // layouts. Assume GCC.\n+  return bp_prev - 1;\n #else\n   return (uhwptr*)bp;\n #endif\n@@ -108,14 +108,21 @@ void BufferedStackTrace::UnwindFast(uptr pc, uptr bp, uptr stack_top,\n          IsAligned((uptr)frame, sizeof(*frame)) &&\n          size < max_depth) {\n #ifdef __powerpc__\n-    // PowerPC ABIs specify that the return address is saved at offset\n-    // 16 of the *caller's* stack frame.  Thus we must dereference the\n-    // back chain to find the caller frame before extracting it.\n+    // PowerPC ABIs specify that the return address is saved on the\n+    // *caller's* stack frame.  Thus we must dereference the back chain\n+    // to find the caller frame before extracting it.\n     uhwptr *caller_frame = (uhwptr*)frame[0];\n     if (!IsValidFrame((uptr)caller_frame, stack_top, bottom) ||\n         !IsAligned((uptr)caller_frame, sizeof(uhwptr)))\n       break;\n+    // For most ABIs the offset where the return address is saved is two\n+    // register sizes.  The exception is the SVR4 ABI, which uses an\n+    // offset of only one register size.\n+#ifdef _CALL_SYSV\n+    uhwptr pc1 = caller_frame[1];\n+#else\n     uhwptr pc1 = caller_frame[2];\n+#endif\n #elif defined(__s390__)\n     uhwptr pc1 = frame[14];\n #elif defined(__riscv)"}, {"sha": "9e533a71a9c477ecae59f09ab431b2664554d998", "filename": "libsanitizer/tsan/tsan_rtl_ppc64.S", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -1,5 +1,6 @@\n #include \"tsan_ppc_regs.h\"\n \n+        .machine altivec\n         .section .text\n         .hidden __tsan_setjmp\n         .globl _setjmp"}, {"sha": "9a66bd37518b3a0606049b761ffdd7ddf3c3c714", "filename": "libsanitizer/ubsan/ubsan_flags.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_flags.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -50,6 +50,7 @@ void InitializeFlags() {\n   {\n     CommonFlags cf;\n     cf.CopyFrom(*common_flags());\n+    cf.print_summary = false;\n     cf.external_symbolizer_path = GetFlag(\"UBSAN_SYMBOLIZER_PATH\");\n     OverrideCommonFlags(cf);\n   }"}, {"sha": "2184625aa6e9496eb5c933823a24a081a0599312", "filename": "libsanitizer/ubsan/ubsan_handlers.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cpp?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -894,6 +894,21 @@ void __ubsan_handle_cfi_bad_type(CFICheckFailData *Data, ValueHandle Vtable,\n \n }  // namespace __ubsan\n \n+void __ubsan::__ubsan_handle_cfi_bad_icall(CFIBadIcallData *CallData,\n+                                           ValueHandle Function) {\n+  GET_REPORT_OPTIONS(false);\n+  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n+  handleCFIBadIcall(&Data, Function, Opts);\n+}\n+\n+void __ubsan::__ubsan_handle_cfi_bad_icall_abort(CFIBadIcallData *CallData,\n+                                                 ValueHandle Function) {\n+  GET_REPORT_OPTIONS(true);\n+  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n+  handleCFIBadIcall(&Data, Function, Opts);\n+  Die();\n+}\n+\n void __ubsan::__ubsan_handle_cfi_check_fail(CFICheckFailData *Data,\n                                             ValueHandle Value,\n                                             uptr ValidVtable) {"}, {"sha": "9f412353fc0ee9719d824dd4b2db75fb97587354", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -215,12 +215,20 @@ enum CFITypeCheckKind : unsigned char {\n   CFITCK_VMFCall,\n };\n \n+struct CFIBadIcallData {\n+  SourceLocation Loc;\n+  const TypeDescriptor &Type;\n+};\n+\n struct CFICheckFailData {\n   CFITypeCheckKind CheckKind;\n   SourceLocation Loc;\n   const TypeDescriptor &Type;\n };\n \n+/// \\brief Handle control flow integrity failure for indirect function calls.\n+RECOVERABLE(cfi_bad_icall, CFIBadIcallData *Data, ValueHandle Function)\n+\n /// \\brief Handle control flow integrity failures.\n RECOVERABLE(cfi_check_fail, CFICheckFailData *Data, ValueHandle Function,\n             uptr VtableIsValid)"}, {"sha": "58aabbe67b5c25e0b47b03a848182691de2252a7", "filename": "libsanitizer/ubsan/ubsan_platform.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b040b1ce1ff146c1d2067dd010e7ca753882685d/libsanitizer%2Fubsan%2Fubsan_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_platform.h?ref=b040b1ce1ff146c1d2067dd010e7ca753882685d", "patch": "@@ -12,6 +12,7 @@\n #ifndef UBSAN_PLATFORM_H\n #define UBSAN_PLATFORM_H\n \n+#ifndef CAN_SANITIZE_UB\n // Other platforms should be easy to add, and probably work as-is.\n #if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||        \\\n     defined(__NetBSD__) || defined(__OpenBSD__) || \\\n@@ -21,5 +22,6 @@\n #else\n # define CAN_SANITIZE_UB 0\n #endif\n+#endif //CAN_SANITIZE_UB\n \n #endif"}]}