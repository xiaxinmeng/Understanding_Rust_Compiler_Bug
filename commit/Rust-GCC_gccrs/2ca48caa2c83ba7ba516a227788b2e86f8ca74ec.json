{"sha": "2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhNDhjYWEyYzgzYmE3YmE1MTZhMjI3Nzg4YjJlODZmOGNhNzRlYw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-05-19T14:29:05Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-05-19T14:29:05Z"}, "message": "re PR target/40483 (gcc 4.x needs to utilize better COMDAT mechanism under Solaris)\n\n\tPR target/40483\n\t* configure.ac (gcc_cv_as_comdat_group_group): Check for Sun as\n\tCOMDAT group syntax, both SPARC and x86 variants.\n\t(HAVE_COMDAT_GROUP): Also define if gcc_cv_as_comdat_group_group.\n\t* configure: Regenerate.\n\t* config/sol2.h (TARGET_SOLARIS): Define.\n\t(PUSHSECTION_FORMAT): Remove.\n\t(SECTION_NAME_FORMAT): Define.\n\t* config/sol2.c: Include hashtab.h.\n\t(solaris_output_init_fini): Replace PUSHSECTION_FORMAT by its\n\texpansion, using SECTION_NAME_FORMAT.\n\t(solaris_comdat_htab): New variable.\n\t(struct comdat_entry): Define.\n\t(comdat_hash): New function.\n\t(comdat_eq): New function.\n\t(solaris_elf_asm_comdat_section): New function.\n\t(solaris_define_comdat_signature): New function.\n\t(solaris_code_end): New function.\n\t* config/sol2-protos.h (solaris_elf_asm_comdat_section): Declare.\n\t(solaris_code_end): Declare.\n\t* config/t-sol2 (sol2.o): Add $HASHTAB_H dependency.\n\t* config/i386/i386.c (ix86_code_end) [TARGET_SOLARIS]: Call\n\tsolaris_code_end.\n\t(i386_solaris_elf_named_section): Wrap in TARGET_SOLARIS.\n\tRemove ATTRIBUTE_UNUSED.\n\t[!USE_GAS]: Call solaris_elf_asm_comdat_section for\n\tSECTION_LINKONCE sections if HAVE_COMDAT_GROUP.\n\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section):\n\tLikewise.\n\t* config/i386/sol2-10.h (TARGET_ASM_NAMED_SECTION): Moved ...\n\t* config/i386/sol2.h (TARGET_ASM_NAMED_SECTION): ... here.\n\t* config/sparc/sol2.h (TARGET_ASM_CODE_END): Redefine.\n\t(PUSHSECTION_FORMAT): Remove.\n\t(SECTION_NAME_FORMAT): Redefine.\n\nFrom-SVN: r173913", "tree": {"sha": "126d3363c833de58bd88e73fd92d6cd7e70bb915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126d3363c833de58bd88e73fd92d6cd7e70bb915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea93a47bc825a409079665551203aa194e71fc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea93a47bc825a409079665551203aa194e71fc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea93a47bc825a409079665551203aa194e71fc18"}], "stats": {"total": 357, "additions": 327, "deletions": 30}, "files": [{"sha": "9b70e154111b2e15c6afa7f5dc1ad75910f6cd93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -1,3 +1,40 @@\n+2011-05-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/40483\n+\t* configure.ac (gcc_cv_as_comdat_group_group): Check for Sun as\n+\tCOMDAT group syntax, both SPARC and x86 variants.\n+\t(HAVE_COMDAT_GROUP): Also define if gcc_cv_as_comdat_group_group.\n+\t* configure: Regenerate.\n+\t* config/sol2.h (TARGET_SOLARIS): Define.\n+\t(PUSHSECTION_FORMAT): Remove.\n+\t(SECTION_NAME_FORMAT): Define.\n+\t* config/sol2.c: Include hashtab.h.\n+\t(solaris_output_init_fini): Replace PUSHSECTION_FORMAT by its\n+\texpansion, using SECTION_NAME_FORMAT.\n+\t(solaris_comdat_htab): New variable.\n+\t(struct comdat_entry): Define.\n+\t(comdat_hash): New function.\n+\t(comdat_eq): New function.\n+\t(solaris_elf_asm_comdat_section): New function.\n+\t(solaris_define_comdat_signature): New function.\n+\t(solaris_code_end): New function.\n+\t* config/sol2-protos.h (solaris_elf_asm_comdat_section): Declare.\n+\t(solaris_code_end): Declare.\n+\t* config/t-sol2 (sol2.o): Add $HASHTAB_H dependency.\n+\t* config/i386/i386.c (ix86_code_end) [TARGET_SOLARIS]: Call\n+\tsolaris_code_end.\n+\t(i386_solaris_elf_named_section): Wrap in TARGET_SOLARIS.\n+\tRemove ATTRIBUTE_UNUSED.\n+\t[!USE_GAS]: Call solaris_elf_asm_comdat_section for\n+\tSECTION_LINKONCE sections if HAVE_COMDAT_GROUP.\n+\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section):\n+\tLikewise.\n+\t* config/i386/sol2-10.h (TARGET_ASM_NAMED_SECTION): Moved ...\n+\t* config/i386/sol2.h (TARGET_ASM_NAMED_SECTION): ... here.\n+\t* config/sparc/sol2.h (TARGET_ASM_CODE_END): Redefine.\n+\t(PUSHSECTION_FORMAT): Remove.\n+\t(SECTION_NAME_FORMAT): Redefine.\n+\n 2011-05-19  Kai Tietz  <ktietz@redhat.com>\n \n \t* tree-cfg.c (verify_gimple_assign_binary): Barf on"}, {"sha": "15dde25a9cac11aca87854a0292500f0b2a5fae8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -8768,6 +8768,10 @@ ix86_code_end (void)\n   rtx xops[2];\n   int regno;\n \n+#ifdef TARGET_SOLARIS\n+  solaris_code_end ();\n+#endif\n+\n   for (regno = AX_REG; regno <= SP_REG; regno++)\n     {\n       char name[32];\n@@ -32148,9 +32152,10 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, enum machine_mode mode,\n \t\t\t  gen_rtx_MULT (mode, e2, e3)));\n }\n \n+#ifdef TARGET_SOLARIS\n /* Solaris implementation of TARGET_ASM_NAMED_SECTION.  */\n \n-static void ATTRIBUTE_UNUSED\n+static void\n i386_solaris_elf_named_section (const char *name, unsigned int flags,\n \t\t\t\ttree decl)\n {\n@@ -32164,8 +32169,18 @@ i386_solaris_elf_named_section (const char *name, unsigned int flags,\n \t       flags & SECTION_WRITE ? \"aw\" : \"a\");\n       return;\n     }\n+\n+#ifndef USE_GAS\n+  if (HAVE_COMDAT_GROUP && flags & SECTION_LINKONCE)\n+    {\n+      solaris_elf_asm_comdat_section (name, flags, decl);\n+      return;\n+    }\n+#endif\n+\n   default_elf_asm_named_section (name, flags, decl);\n }\n+#endif /* TARGET_SOLARIS */\n \n /* Return the mangling of TYPE if it is an extended fundamental type.  */\n "}, {"sha": "04a7132dc6c71f718e2d566daf39df24c15b6f30", "filename": "gcc/config/i386/sol2-10.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-10.h?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -133,6 +133,3 @@ along with GCC; see the file COPYING3.  If not see\n \n /* We do not need to search a special directory for startup files.  */\n #undef MD_STARTFILE_PREFIX\n-\n-#undef TARGET_ASM_NAMED_SECTION\n-#define TARGET_ASM_NAMED_SECTION i386_solaris_elf_named_section"}, {"sha": "36ca62f904cca6b2421fde3a93f47e1abd15fb6f", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -154,6 +154,9 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION i386_solaris_elf_named_section\n+\n /* We do not need NT_VERSION notes.  */\n #undef X86_FILE_START_VERSION_DIRECTIVE\n #define X86_FILE_START_VERSION_DIRECTIVE false"}, {"sha": "25753ff610e96fd35c85c5a056581082187239f8", "filename": "gcc/config/sol2-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsol2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsol2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-protos.h?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -22,3 +22,5 @@ extern void solaris_insert_attributes (tree, tree *);\n extern void solaris_register_pragmas (void);\n extern void solaris_output_init_fini (FILE *, tree);\n extern void solaris_assemble_visibility (tree, int);\n+extern void solaris_elf_asm_comdat_section (const char *, unsigned int, tree);\n+extern void solaris_code_end (void);"}, {"sha": "7fed184e14db5d1498be2ba457b918f88bef2db4", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"diagnostic-core.h\"\n #include \"ggc.h\"\n+#include \"hashtab.h\"\n \n tree solaris_pending_aligns, solaris_pending_inits, solaris_pending_finis;\n \n@@ -106,14 +107,14 @@ solaris_output_init_fini (FILE *file, tree decl)\n {\n   if (lookup_attribute (\"init\", DECL_ATTRIBUTES (decl)))\n     {\n-      fprintf (file, PUSHSECTION_FORMAT, \".init\");\n+      fprintf (file, \"\\t.pushsection\\t\" SECTION_NAME_FORMAT \"\\n\", \".init\");\n       ASM_OUTPUT_CALL (file, decl);\n       fprintf (file, \"\\t.popsection\\n\");\n     }\n \n   if (lookup_attribute (\"fini\", DECL_ATTRIBUTES (decl)))\n     {\n-      fprintf (file, PUSHSECTION_FORMAT, \".fini\");\n+      fprintf (file, \"\\t.pushsection\\t\" SECTION_NAME_FORMAT \"\\n\", \".fini\");\n       ASM_OUTPUT_CALL (file, decl);\n       fprintf (file, \"\\t.popsection\\n\");\n     }\n@@ -155,3 +156,129 @@ solaris_assemble_visibility (tree decl ATTRIBUTE_UNUSED,\n \t   \"in this configuration; ignored\");\n #endif\n }\n+\n+/* Hash table of group signature symbols.  */\n+\n+static htab_t solaris_comdat_htab;\n+\n+/* Group section information entry stored in solaris_comdat_htab.  */\n+\n+typedef struct comdat_entry\n+{\n+  const char *name;\n+  unsigned int flags;\n+  tree decl;\n+  const char *sig;\n+} comdat_entry;\n+\n+/* Helper routines for maintaining solaris_comdat_htab.  */\n+\n+static hashval_t\n+comdat_hash (const void *p)\n+{\n+  const comdat_entry *entry = (const comdat_entry *) p;\n+\n+  return htab_hash_string (entry->sig);\n+}\n+\n+static int\n+comdat_eq (const void *p1, const void *p2)\n+{\n+  const comdat_entry *entry1 = (const comdat_entry *) p1;\n+  const comdat_entry *entry2 = (const comdat_entry *) p2;\n+\n+  return strcmp (entry1->sig, entry2->sig) == 0;\n+}\n+\n+/* Output assembly to switch to COMDAT group section NAME with attributes\n+   FLAGS and group signature symbol DECL, using Sun as syntax.  */\n+\n+void\n+solaris_elf_asm_comdat_section (const char *name, unsigned int flags, tree decl)\n+{\n+  const char *signature;\n+  char *section;\n+  comdat_entry entry, **slot;\n+\n+  if (TREE_CODE (decl) == IDENTIFIER_NODE)\n+    signature = IDENTIFIER_POINTER (decl);\n+  else\n+    signature = IDENTIFIER_POINTER (DECL_COMDAT_GROUP (decl));\n+\n+  /* Sun as requires group sections to be fragmented, i.e. to have names of\n+     the form <section>%<fragment>.  Strictly speaking this is only\n+     necessary to support cc -xF, but is enforced globally in violation of\n+     the ELF gABI.  We keep the section names generated by GCC (generally\n+     of the form .text.<signature>) and append %<signature> to pacify as,\n+     despite the redundancy.  */\n+  section = concat (name, \"%\", signature, NULL);\n+\n+  /* Clear SECTION_LINKONCE flag so targetm.asm_out.named_section only\n+     emits this as a regular section.  Emit section before .group\n+     directive since Sun as treats undeclared sections as @progbits,\n+     which conflicts with .bss* sections which are @nobits.  */\n+  targetm.asm_out.named_section (section, flags & ~SECTION_LINKONCE, decl);\n+  \n+  /* Sun as separates declaration of a group section and of the group\n+     itself, using the .group directive and the #comdat flag.  */\n+  fprintf (asm_out_file, \"\\t.group\\t%s,\" SECTION_NAME_FORMAT \",#comdat\\n\",\n+\t   signature, section);\n+\n+  /* Unlike GNU as, group signature symbols need to be defined explicitly\n+     for Sun as.  With a few exceptions, this is already the case.  To\n+     identify the missing ones without changing the affected frontents,\n+     remember the signature symbols and emit those not marked\n+     TREE_SYMBOL_REFERENCED in solaris_code_end.  */\n+  if (solaris_comdat_htab == NULL)\n+    solaris_comdat_htab = htab_create_alloc (37, comdat_hash, comdat_eq, NULL,\n+\t\t\t\t\t     xcalloc, free);\n+\n+  entry.sig = signature;\n+  slot = (comdat_entry **) htab_find_slot (solaris_comdat_htab, &entry, INSERT);\n+\n+  if (*slot == NULL)\n+    {\n+      *slot = XCNEW (comdat_entry);\n+      /* Remember fragmented section name.  */\n+      (*slot)->name = section;\n+      /* Emit as regular section, .group declaration has already been done.  */\n+      (*slot)->flags = flags & ~SECTION_LINKONCE;\n+      (*slot)->decl = decl;\n+      (*slot)->sig = signature;\n+    }\n+}\n+\n+/* Define unreferenced COMDAT group signature symbol corresponding to SLOT.  */\n+\n+static int\n+solaris_define_comdat_signature (void **slot, void *aux ATTRIBUTE_UNUSED)\n+{\n+  comdat_entry *entry = *(comdat_entry **) slot;\n+  tree decl = entry->decl;\n+\n+  if (TREE_CODE (decl) != IDENTIFIER_NODE)\n+    decl = DECL_COMDAT_GROUP (decl);\n+\n+  if (!TREE_SYMBOL_REFERENCED (decl))\n+    {\n+      /* Switch to group section, otherwise Sun as complains\n+\t `Group Id symbol defined outside of group'.  */\n+      switch_to_section (get_section (entry->name, entry->flags, entry->decl));\n+\n+      ASM_OUTPUT_LABEL (asm_out_file, entry->sig);\n+    }\n+\n+  /* Continue with scan.  */\n+  return 1;\n+}\n+\n+/* Emit unreferenced COMDAT group signature symbols for Sun as.  */\n+\n+void\n+solaris_code_end (void)\n+{\n+  if (solaris_comdat_htab == NULL)\n+    return;\n+\n+  htab_traverse (solaris_comdat_htab, solaris_define_comdat_signature, NULL);\n+}"}, {"sha": "f3394fda74d72c738e9820b8d37b5249d7601052", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -19,6 +19,9 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* We are compiling for Solaris 2 now.  */\n+#define TARGET_SOLARIS 1\n+\n /* We use stabs-in-elf for debugging, because that is what the native\n    toolchain uses.  */\n #undef PREFERRED_DEBUGGING_TYPE\n@@ -257,9 +260,8 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n   { \"init\",      0, 0, true,  false,  false, NULL, false },\t\t\\\n   { \"fini\",      0, 0, true,  false,  false, NULL, false }\n \n-/* Solaris/x86 as and gas support the common ELF .section/.pushsection\n-   syntax.  */\n-#define PUSHSECTION_FORMAT\t\"\\t.pushsection\\t%s\\n\"\n+/* Solaris/x86 as and gas support unquoted section names.  */\n+#define SECTION_NAME_FORMAT\t\"%s\"\n \n /* This is how to declare the size of a function.  For Solaris, we output\n    any .init or .fini entries here.  */"}, {"sha": "a53b82a8e95d6b6ac9a22618c7e5edca3286f3d9", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -188,9 +188,16 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION sparc_solaris_elf_asm_named_section\n \n-/* And SPARC non-standard pushsection syntax.  */\n-#undef PUSHSECTION_FORMAT\n-#define PUSHSECTION_FORMAT \"\\t.pushsection\\t\\\"%s\\\"\\n\"\n+/* Emit COMDAT group signature symbols for Sun as.  */\n+#undef TARGET_ASM_CODE_END\n+#define TARGET_ASM_CODE_END solaris_code_end\n+\n+/* Solaris/SPARC as requires doublequoted section names.  While gas\n+   supports that, too, we prefer the standard variant.  */\n+#ifndef USE_GAS\n+#undef SECTION_NAME_FORMAT\n+#define SECTION_NAME_FORMAT\t\"\\\"%s\\\"\"\n+#endif\n \n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1"}, {"sha": "10b35f250e99f1a14d746068f1b374e36257b41c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -8537,12 +8537,19 @@ sparc_profile_hook (int labelno)\n     }\n }\n \f\n+#ifdef TARGET_SOLARIS\n /* Solaris implementation of TARGET_ASM_NAMED_SECTION.  */\n \n static void\n sparc_solaris_elf_asm_named_section (const char *name, unsigned int flags,\n \t\t\t\t     tree decl ATTRIBUTE_UNUSED)\n {\n+  if (HAVE_COMDAT_GROUP && flags & SECTION_LINKONCE)\n+    {\n+      solaris_elf_asm_comdat_section (name, flags, decl);\n+      return;\n+    }\n+\n   fprintf (asm_out_file, \"\\t.section\\t\\\"%s\\\"\", name);\n \n   if (!(flags & SECTION_DEBUG))\n@@ -8558,6 +8565,7 @@ sparc_solaris_elf_asm_named_section (const char *name, unsigned int flags,\n \n   fputc ('\\n', asm_out_file);\n }\n+#endif /* TARGET_SOLARIS */\n \n /* We do not allow indirect calls to be optimized into sibling calls.\n "}, {"sha": "a054764333a237714c1c84841249dfeec8e68844", "filename": "gcc/configure", "status": "modified", "additions": 70, "deletions": 10, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -22328,8 +22328,8 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for COMDAT group support\" >&5\n-$as_echo_n \"checking assembler for COMDAT group support... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for COMDAT group support (GNU as)\" >&5\n+$as_echo_n \"checking assembler for COMDAT group support (GNU as)... \" >&6; }\n if test \"${gcc_cv_as_comdat_group+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n@@ -22361,9 +22361,10 @@ $as_echo \"$gcc_cv_as_comdat_group\" >&6; }\n \n if test $gcc_cv_as_comdat_group = yes; then\n   gcc_cv_as_comdat_group_percent=no\n+  gcc_cv_as_comdat_group_group=no\n else\n- { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for COMDAT group support\" >&5\n-$as_echo_n \"checking assembler for COMDAT group support... \" >&6; }\n+ { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for COMDAT group support (GNU as, %type)\" >&5\n+$as_echo_n \"checking assembler for COMDAT group support (GNU as, %type)... \" >&6; }\n if test \"${gcc_cv_as_comdat_group_percent+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n@@ -22393,6 +22394,59 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_comdat_group_percent\" >&5\n $as_echo \"$gcc_cv_as_comdat_group_percent\" >&6; }\n \n+ if test $gcc_cv_as_comdat_group_percent = yes; then\n+   gcc_cv_as_comdat_group_group=no\n+ else\n+   case \"${target}\" in\n+     # Sun as uses a completely different syntax.\n+     *-*-solaris2*)\n+       case \"${target}\" in\n+         sparc*-*-solaris2*)\n+           conftest_s='\n+               .group foo,\".text%foo\",#comdat\n+               .section \".text%foo\", #alloc,#execinstr,#progbits\n+               .globl foo\n+             foo:\n+\t     '\n+           ;;\n+         i?86-*-solaris2*)\n+\t   conftest_s='\n+               .group foo,.text%foo,#comdat\n+               .section .text%foo, \"ax\", @progbits\n+               .globl  foo\n+             foo:\n+\t     '\n+\t   ;;\n+       esac\n+       { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for COMDAT group support (Sun as, .group)\" >&5\n+$as_echo_n \"checking assembler for COMDAT group support (Sun as, .group)... \" >&6; }\n+if test \"${gcc_cv_as_comdat_group_group+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_comdat_group_group=no\n+  if test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_comdat_group_group=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_comdat_group_group\" >&5\n+$as_echo \"$gcc_cv_as_comdat_group_group\" >&6; }\n+\n+       ;;\n+   esac\n+ fi\n fi\n if test x\"$ld_is_gold\" = xyes; then\n   comdat_group=yes\n@@ -22417,16 +22471,19 @@ elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n else\n   case \"${target}\" in\n     *-*-solaris2.1[1-9]*)\n+      comdat_group=no\n       # Sun ld has COMDAT group support since Solaris 9, but it doesn't\n       # interoperate with GNU as until Solaris 11 build 130, i.e. ld\n       # version 1.688.\n       #\n-      # FIXME: Maybe need to refine later when COMDAT group support with\n-      # Sun as is implemented.\n-      if test \"$ld_vers_major\" -gt 1 || test \"$ld_vers_minor\" -ge 1688; then\n+      # If using Sun as for COMDAT group as emitted by GCC, one needs at\n+      # least ld version 1.2267.\n+      if test \"$ld_vers_major\" -gt 1; then\n         comdat_group=yes\n-      else\n-        comdat_group=no\n+      elif test \"x$gas_flag\" = xyes && test \"$ld_vers_minor\" -ge 1688; then\n+\tcomdat_group=yes\n+      elif test \"$ld_vers_minor\" -ge 2267; then\n+\tcomdat_group=yes\n       fi\n       ;;\n     *)\n@@ -22444,10 +22501,13 @@ fi\n if test $comdat_group = no; then\n   gcc_cv_as_comdat_group=no\n   gcc_cv_as_comdat_group_percent=no\n+  gcc_cv_as_comdat_group_group=no\n fi\n \n cat >>confdefs.h <<_ACEOF\n-#define HAVE_COMDAT_GROUP `if test $gcc_cv_as_comdat_group = yes || test $gcc_cv_as_comdat_group_percent = yes; then echo 1; else echo 0; fi`\n+#define HAVE_COMDAT_GROUP `if test $gcc_cv_as_comdat_group = yes \\\n+    || test $gcc_cv_as_comdat_group_percent = yes \\\n+    || test $gcc_cv_as_comdat_group_group = yes; then echo 1; else echo 0; fi`\n _ACEOF\n \n "}, {"sha": "ff6d5e90157d07ccecdf060322c132cc3b3d89d6", "filename": "gcc/configure.ac", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca48caa2c83ba7ba516a227788b2e86f8ca74ec/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2ca48caa2c83ba7ba516a227788b2e86f8ca74ec", "patch": "@@ -2589,15 +2589,48 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_SHF_MERGE,\n   [`if test $gcc_cv_as_shf_merge = yes; then echo 1; else echo 0; fi`],\n [Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.])\n \n-gcc_GAS_CHECK_FEATURE(COMDAT group support, gcc_cv_as_comdat_group,\n+gcc_GAS_CHECK_FEATURE([COMDAT group support (GNU as)],\n+ gcc_cv_as_comdat_group,\n  [elf,2,16,0], [--fatal-warnings],\n  [.section .text,\"axG\",@progbits,.foo,comdat])\n if test $gcc_cv_as_comdat_group = yes; then\n   gcc_cv_as_comdat_group_percent=no\n+  gcc_cv_as_comdat_group_group=no\n else\n- gcc_GAS_CHECK_FEATURE(COMDAT group support, gcc_cv_as_comdat_group_percent,\n+ gcc_GAS_CHECK_FEATURE([COMDAT group support (GNU as, %type)],\n+   gcc_cv_as_comdat_group_percent,\n    [elf,2,16,0], [--fatal-warnings],\n    [.section .text,\"axG\",%progbits,.foo,comdat])\n+ if test $gcc_cv_as_comdat_group_percent = yes; then\n+   gcc_cv_as_comdat_group_group=no\n+ else\n+   case \"${target}\" in\n+     # Sun as uses a completely different syntax.\n+     *-*-solaris2*)\n+       case \"${target}\" in\n+         sparc*-*-solaris2*)\n+           conftest_s='\n+               .group foo,\".text%foo\",#comdat\n+               .section \".text%foo\", #alloc,#execinstr,#progbits\n+               .globl foo\n+             foo:\n+\t     '\n+           ;;\n+         i?86-*-solaris2*)\n+\t   conftest_s='\n+               .group foo,.text%foo,#comdat\n+               .section .text%foo, \"ax\", @progbits\n+               .globl  foo\n+             foo:\n+\t     '\n+\t   ;;\n+       esac\n+       gcc_GAS_CHECK_FEATURE([COMDAT group support (Sun as, .group)],\n+         gcc_cv_as_comdat_group_group,\n+         ,, [$conftest_s])\n+       ;;\n+   esac\n+ fi\n fi\n if test x\"$ld_is_gold\" = xyes; then\n   comdat_group=yes\n@@ -2623,16 +2656,19 @@ else\n changequote(,)dnl\n   case \"${target}\" in\n     *-*-solaris2.1[1-9]*)\n+      comdat_group=no\n       # Sun ld has COMDAT group support since Solaris 9, but it doesn't\n       # interoperate with GNU as until Solaris 11 build 130, i.e. ld\n       # version 1.688.\n       #\n-      # FIXME: Maybe need to refine later when COMDAT group support with\n-      # Sun as is implemented.\n-      if test \"$ld_vers_major\" -gt 1 || test \"$ld_vers_minor\" -ge 1688; then\n+      # If using Sun as for COMDAT group as emitted by GCC, one needs at\n+      # least ld version 1.2267.\n+      if test \"$ld_vers_major\" -gt 1; then\n         comdat_group=yes\n-      else\n-        comdat_group=no\n+      elif test \"x$gas_flag\" = xyes && test \"$ld_vers_minor\" -ge 1688; then\n+\tcomdat_group=yes\n+      elif test \"$ld_vers_minor\" -ge 2267; then\n+\tcomdat_group=yes\n       fi\n       ;;\n     *)\n@@ -2649,9 +2685,12 @@ AC_ARG_ENABLE(comdat,\n if test $comdat_group = no; then\n   gcc_cv_as_comdat_group=no\n   gcc_cv_as_comdat_group_percent=no\n+  gcc_cv_as_comdat_group_group=no\n fi\n AC_DEFINE_UNQUOTED(HAVE_COMDAT_GROUP,\n-  [`if test $gcc_cv_as_comdat_group = yes || test $gcc_cv_as_comdat_group_percent = yes; then echo 1; else echo 0; fi`],\n+  [`if test $gcc_cv_as_comdat_group = yes \\\n+    || test $gcc_cv_as_comdat_group_percent = yes \\\n+    || test $gcc_cv_as_comdat_group_group = yes; then echo 1; else echo 0; fi`],\n [Define 0/1 if your assembler and linker support COMDAT groups.])\n \n gcc_GAS_CHECK_FEATURE([line table discriminator support],"}]}