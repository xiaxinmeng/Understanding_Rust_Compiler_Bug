{"sha": "b87c8c8cf4656f91b7d65cb78d658155721ee39e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3YzhjOGNmNDY1NmY5MWI3ZDY1Y2I3OGQ2NTgxNTU3MjFlZTM5ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2001-07-11T09:29:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2001-07-11T09:29:42Z"}, "message": "mips.md (call_internal1): Use CONSTANT_ADDRESS_P to check for constant addresses.\n\n\t* mips.md (call_internal1): Use CONSTANT_ADDRESS_P to check for\n\tconstant addresses.\n\t(call_internal2): Likewise.\n\t(call_value_internal1): Likewise.\n\t(call_value_internal2): Likewise.\n\t(call_value_multiple_internal1): Likewise.\n\t(call_value_multiple_internal2): Likewise.\n\nCo-Authored-By: H.J. Lu <hjl@gnu.org>\n\nFrom-SVN: r43930", "tree": {"sha": "800730210b76a2bcf3ff7c6d5d38f779cc1b76ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/800730210b76a2bcf3ff7c6d5d38f779cc1b76ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b87c8c8cf4656f91b7d65cb78d658155721ee39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87c8c8cf4656f91b7d65cb78d658155721ee39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87c8c8cf4656f91b7d65cb78d658155721ee39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87c8c8cf4656f91b7d65cb78d658155721ee39e/comments", "author": null, "committer": null, "parents": [{"sha": "517c3b80599a3124852717bfb6611813b8f5738b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517c3b80599a3124852717bfb6611813b8f5738b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517c3b80599a3124852717bfb6611813b8f5738b"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "80d975c0788911030dde4dc9b8f8d1db6270dc38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87c8c8cf4656f91b7d65cb78d658155721ee39e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87c8c8cf4656f91b7d65cb78d658155721ee39e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b87c8c8cf4656f91b7d65cb78d658155721ee39e", "patch": "@@ -1,3 +1,14 @@\n+2001-07-11  Richard Sandiford  <rsandifo@redhat.com>\n+\t    H.J. Lu  <hjl@gnu.org>\n+\n+\t* mips.md (call_internal1): Use CONSTANT_ADDRESS_P to check for\n+\tconstant addresses.\n+\t(call_internal2): Likewise.\n+\t(call_value_internal1): Likewise.\n+\t(call_value_internal2): Likewise.\n+\t(call_value_multiple_internal1): Likewise.\n+\t(call_value_multiple_internal2): Likewise.\n+\n 2001-07-10  Kazu Hirata  <kazu@hxi.com>\n \n \t* calls.c (emit_library_call_value_1): Fix a comment typo."}, {"sha": "d4649101fa611ef17e8b00b60ab91f0da1f3943c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87c8c8cf4656f91b7d65cb78d658155721ee39e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87c8c8cf4656f91b7d65cb78d658155721ee39e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b87c8c8cf4656f91b7d65cb78d658155721ee39e", "patch": "@@ -9684,10 +9684,10 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n {\n   register rtx target = operands[0];\n \n-  if (GET_CODE (target) == SYMBOL_REF)\n-    return \\\"%*jal\\\\t%0\\\";\n-  else if (GET_CODE (target) == CONST_INT)\n+  if (GET_CODE (target) == CONST_INT)\n     return \\\"%[li\\\\t%@,%0\\\\n\\\\t%*jal\\\\t%2,%@%]\\\";\n+  else if (CONSTANT_ADDRESS_P (target))\n+    return \\\"%*jal\\\\t%0\\\";\n   else\n     return \\\"%*jal\\\\t%2,%0\\\";\n }\"\n@@ -9703,15 +9703,15 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n {\n   register rtx target = operands[0];\n \n-  if (GET_CODE (target) == SYMBOL_REF)\n+  if (GET_CODE (target) == CONST_INT)\n+    return \\\"li\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n+  else if (CONSTANT_ADDRESS_P (target))\n     {\n       if (GET_MODE (target) == SImode)\n \treturn \\\"la\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n       else\n \treturn \\\"dla\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n     }\n-  else if (GET_CODE (target) == CONST_INT)\n-    return \\\"li\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n   else if (REGNO (target) != PIC_FUNCTION_ADDR_REGNUM)\n     return \\\"move\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n   else\n@@ -9891,10 +9891,10 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n {\n   register rtx target = operands[1];\n \n-  if (GET_CODE (target) == SYMBOL_REF)\n-    return \\\"%*jal\\\\t%1\\\";\n-  else if (GET_CODE (target) == CONST_INT)\n+  if (GET_CODE (target) == CONST_INT)\n     return \\\"%[li\\\\t%@,%1\\\\n\\\\t%*jal\\\\t%3,%@%]\\\";\n+  else if (CONSTANT_ADDRESS_P (target))\n+    return \\\"%*jal\\\\t%1\\\";\n   else\n     return \\\"%*jal\\\\t%3,%1\\\";\n }\"\n@@ -9911,15 +9911,15 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n {\n   register rtx target = operands[1];\n \n-  if (GET_CODE (target) == SYMBOL_REF)\n+  if (GET_CODE (target) == CONST_INT)\n+    return \\\"li\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n+  else if (CONSTANT_ADDRESS_P (target))\n     {\n       if (GET_MODE (target) == SImode)\n \treturn \\\"la\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n       else\n \treturn \\\"dla\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n     }\n-  else if (GET_CODE (target) == CONST_INT)\n-    return \\\"li\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n   else if (REGNO (target) != PIC_FUNCTION_ADDR_REGNUM)\n     return \\\"move\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n   else\n@@ -10023,10 +10023,10 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n {\n   register rtx target = operands[1];\n \n-  if (GET_CODE (target) == SYMBOL_REF)\n-    return \\\"%*jal\\\\t%1\\\";\n-  else if (GET_CODE (target) == CONST_INT)\n+  if (GET_CODE (target) == CONST_INT)\n     return \\\"%[li\\\\t%@,%1\\\\n\\\\t%*jal\\\\t%4,%@%]\\\";\n+  else if (CONSTANT_ADDRESS_P (target))\n+    return \\\"%*jal\\\\t%1\\\";\n   else\n     return \\\"%*jal\\\\t%4,%1\\\";\n }\"\n@@ -10046,15 +10046,15 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n {\n   register rtx target = operands[1];\n \n-  if (GET_CODE (target) == SYMBOL_REF)\n+  if (GET_CODE (target) == CONST_INT)\n+    return \\\"li\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n+  else if (CONSTANT_ADDRESS_P (target))\n     {\n       if (GET_MODE (target) == SImode)\n \treturn \\\"la\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n       else\n \treturn \\\"la\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n     }\n-  else if (GET_CODE (target) == CONST_INT)\n-    return \\\"li\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n   else if (REGNO (target) != PIC_FUNCTION_ADDR_REGNUM)\n     return \\\"move\\\\t%^,%1\\\\n\\\\tjal\\\\t%4,%^\\\";\n   else"}]}