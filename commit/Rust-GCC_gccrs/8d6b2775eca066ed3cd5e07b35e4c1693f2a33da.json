{"sha": "8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2YjI3NzVlY2EwNjZlZDNjZDVlMDdiMzVlNGMxNjkzZjJhMzNkYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-03T17:10:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-03T17:10:48Z"}, "message": "combine.c (simplify_set): Don't move a subreg in SET_SRC to SET_DEST if...\n\n\t* combine.c (simplify_set): Don't move a subreg in SET_SRC to\n\tSET_DEST if WORD_REGISTER_OPERATIONS is not defined.\n\nFrom-SVN: r67388", "tree": {"sha": "cd3544e7b5842efabe947bbaaa036b6c1b9dfa8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd3544e7b5842efabe947bbaaa036b6c1b9dfa8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da/comments", "author": null, "committer": null, "parents": [{"sha": "bf46042bdbc7ef0b75d56e856c44c2391e15d344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf46042bdbc7ef0b75d56e856c44c2391e15d344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf46042bdbc7ef0b75d56e856c44c2391e15d344"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "27132efc5b306572f62e4e880f038cf0e10fd42e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "patch": "@@ -1,3 +1,8 @@\n+2003-06-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c (simplify_set): Don't move a subreg in SET_SRC to\n+\tSET_DEST if WORD_REGISTER_OPERATIONS is not defined.\n+\n 2003-06-03  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* config/i386/x86-64.h: Remove two target-independent comments;"}, {"sha": "c47065568fd8da276fbd8f45268a7310c5ebd4fc", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6b2775eca066ed3cd5e07b35e4c1693f2a33da/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8d6b2775eca066ed3cd5e07b35e4c1693f2a33da", "patch": "@@ -5238,28 +5238,25 @@ simplify_set (x)\n       SUBST (SET_SRC (x), src);\n     }\n \n+#ifdef WORD_REGISTER_OPERATIONS\n   /* If we have (set x (subreg:m1 (op:m2 ...) 0)) with OP being some operation,\n      and X being a REG or (subreg (reg)), we may be able to convert this to\n      (set (subreg:m2 x) (op)).\n \n-     We can always do this if M1 is narrower than M2 because that means that\n-     we only care about the low bits of the result.\n+     On a machine where WORD_REGISTER_OPERATIONS is defined, this\n+     transformation is safe as long as M1 and M2 have the same number\n+     of words.\n \n-     However, on machines without WORD_REGISTER_OPERATIONS defined, we cannot\n-     perform a narrower operation than requested since the high-order bits will\n-     be undefined.  On machine where it is defined, this transformation is safe\n-     as long as M1 and M2 have the same number of words.  */\n+     However, on a machine without WORD_REGISTER_OPERATIONS defined,\n+     we cannot apply this transformation because it would create a\n+     paradoxical subreg in SET_DEST.  */\n \n   if (GET_CODE (src) == SUBREG && subreg_lowpart_p (src)\n       && GET_RTX_CLASS (GET_CODE (SUBREG_REG (src))) != 'o'\n       && (((GET_MODE_SIZE (GET_MODE (src)) + (UNITS_PER_WORD - 1))\n \t   / UNITS_PER_WORD)\n \t  == ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (src)))\n \t       + (UNITS_PER_WORD - 1)) / UNITS_PER_WORD))\n-#ifndef WORD_REGISTER_OPERATIONS\n-      && (GET_MODE_SIZE (GET_MODE (src))\n-\t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (src))))\n-#endif\n #ifdef CANNOT_CHANGE_MODE_CLASS\n       && ! (GET_CODE (dest) == REG && REGNO (dest) < FIRST_PSEUDO_REGISTER\n \t    && REG_CANNOT_CHANGE_MODE_P (REGNO (dest),\n@@ -5277,6 +5274,7 @@ simplify_set (x)\n \n       src = SET_SRC (x), dest = SET_DEST (x);\n     }\n+#endif\n \n #ifdef HAVE_cc0\n   /* If we have (set (cc0) (subreg ...)), we try to remove the subreg"}]}