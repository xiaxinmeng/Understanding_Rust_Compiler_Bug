{"sha": "ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyMGYzNWI4ZjExMWQxMzc4NGFjNzk2YWJiZjdkY2M3NzIwZTlhZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T08:47:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-23T08:47:47Z"}, "message": "[multiple changes]\n\n2012-01-23  Robert Dewar  <dewar@adacore.com>\n\n\t* a-calend.adb: Minor reformatting.\n\n2012-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb, sem_ch9.adb: Handle array of access to synchronized\n\tinterface in requeue statement.\n\n2012-01-23  Cyrille Comar  <comar@adacore.com>\n\n\t* projects.texi: Remove references to main units and replace\n\twith references to main programs to be coherent with the\n\tdocumentation.\n\nFrom-SVN: r183412", "tree": {"sha": "871d41485ffab477f41fce92e42020fee3a0eb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/871d41485ffab477f41fce92e42020fee3a0eb3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/comments", "author": null, "committer": null, "parents": [{"sha": "7647cd4b726af7ef85cadb8f3329daa80bdc7fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7647cd4b726af7ef85cadb8f3329daa80bdc7fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7647cd4b726af7ef85cadb8f3329daa80bdc7fc6"}], "stats": {"total": 160, "additions": 102, "deletions": 58}, "files": [{"sha": "c8508504b9135d46e074b8cb60f4d99d7d5e6c4c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "patch": "@@ -1,3 +1,18 @@\n+2012-01-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-calend.adb: Minor reformatting.\n+\n+2012-01-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb, sem_ch9.adb: Handle array of access to synchronized\n+\tinterface in requeue statement.\n+\n+2012-01-23  Cyrille Comar  <comar@adacore.com>\n+\n+\t* projects.texi: Remove references to main units and replace\n+\twith references to main programs to be coherent with the\n+\tdocumentation.\n+\n 2012-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* s-utf_32.adb: Minor reformatting."}, {"sha": "8f541a090a107c0d4e5691abe8dd98a022abde94", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -132,12 +132,10 @@ package body Ada.Calendar is\n    pragma Import (C, Flag, \"__gl_leap_seconds_support\");\n    --  This imported value is used to determine whether the compilation had\n    --  binder flag \"-y\" present which enables leap seconds. A value of zero\n-   --  signifies no leap seconds support while a value of one enables the\n-   --  support.\n+   --  signifies no leap seconds support while a value of one enables support.\n \n-   Leap_Support : constant Boolean := Flag = 1;\n-   --  The above flag controls the usage of leap seconds in all Ada.Calendar\n-   --  routines.\n+   Leap_Support : constant Boolean := (Flag = 1);\n+   --  Flag to controls the usage of leap seconds in all Ada.Calendar routines\n \n    Leap_Seconds_Count : constant Natural := 24;\n \n@@ -172,8 +170,8 @@ package body Ada.Calendar is\n    Start_Of_Time : constant Time_Rep :=\n                      Ada_Low - Time_Rep (3) * Nanos_In_Day;\n \n-   --  The Unix lower time bound expressed as nanoseconds since the\n-   --  start of Ada time in UTC.\n+   --  The Unix lower time bound expressed as nanoseconds since the start of\n+   --  Ada time in UTC.\n \n    Unix_Min : constant Time_Rep :=\n                 Ada_Low + Time_Rep (17 * 366 + 52 * 365) * Nanos_In_Day;\n@@ -187,7 +185,8 @@ package body Ada.Calendar is\n        (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334);\n \n    --  The following table contains the hard time values of all existing leap\n-   --  seconds. The values are produced by the utility program xleaps.adb.\n+   --  seconds. The values are produced by the utility program xleaps.adb. This\n+   --  must be updated when additional leap second times are defined.\n \n    Leap_Second_Times : constant array (1 .. Leap_Seconds_Count) of Time_Rep :=\n      (-5601484800000000000,\n@@ -251,10 +250,9 @@ package body Ada.Calendar is\n    function \"-\" (Left : Time; Right : Time) return Duration is\n       pragma Unsuppress (Overflow_Check);\n \n-      --  The bounds of type Duration expressed as time representations\n-\n       Dur_Low  : constant Time_Rep := Duration_To_Time_Rep (Duration'First);\n       Dur_High : constant Time_Rep := Duration_To_Time_Rep (Duration'Last);\n+      --  The bounds of type Duration expressed as time representations\n \n       Res_N : Time_Rep;\n \n@@ -266,13 +264,12 @@ package body Ada.Calendar is\n       --  the generation of bogus values by the Unchecked_Conversion, we apply\n       --  the following check.\n \n-      if Res_N < Dur_Low\n-        or else Res_N > Dur_High\n-      then\n+      if Res_N < Dur_Low or else Res_N > Dur_High then\n          raise Time_Error;\n       end if;\n \n       return Time_Rep_To_Duration (Res_N);\n+\n    exception\n       when Constraint_Error =>\n          raise Time_Error;\n@@ -344,8 +341,7 @@ package body Ada.Calendar is\n       --  by adding the number of nanoseconds between the two origins.\n \n       Res_N : Time_Rep :=\n-                Duration_To_Time_Rep (System.OS_Primitives.Clock) +\n-                  Unix_Min;\n+                Duration_To_Time_Rep (System.OS_Primitives.Clock) + Unix_Min;\n \n    begin\n       --  If the target supports leap seconds, determine the number of leap\n@@ -572,10 +568,10 @@ package body Ada.Calendar is\n \n       --  Validity checks\n \n-      if not Year'Valid\n-        or else not Month'Valid\n-        or else not Day'Valid\n-        or else not Seconds'Valid\n+      if not Year'Valid    or else\n+         not Month'Valid   or else\n+         not Day'Valid     or else\n+         not Seconds'Valid\n       then\n          raise Time_Error;\n       end if;\n@@ -603,10 +599,10 @@ package body Ada.Calendar is\n    begin\n       --  Validity checks\n \n-      if not Year'Valid\n-        or else not Month'Valid\n-        or else not Day'Valid\n-        or else not Seconds'Valid\n+      if not Year'Valid    or else\n+         not Month'Valid   or else\n+         not Day'Valid     or else\n+         not Seconds'Valid\n       then\n          raise Time_Error;\n       end if;\n@@ -815,12 +811,10 @@ package body Ada.Calendar is\n \n          --  Step 1: Validity checks of input values\n \n-         if not Year'Valid\n-           or else not Month'Valid\n-           or else not Day'Valid\n-           or else tm_hour not in 0 .. 24\n-           or else tm_min not in 0 .. 59\n-           or else tm_sec not in 0 .. 60\n+         if not Year'Valid or else not Month'Valid or else not Day'Valid\n+           or else tm_hour  not in 0 .. 24\n+           or else tm_min   not in 0 .. 59\n+           or else tm_sec   not in 0 .. 60\n            or else tm_isdst not in -1 .. 1\n          then\n             raise Time_Error;\n@@ -1032,7 +1026,6 @@ package body Ada.Calendar is\n          Date_N    : constant Time_Rep := Time_Rep (Date);\n          Time_Zone : constant Long_Integer :=\n                        Time_Zones_Operations.UTC_Time_Offset (Date);\n-\n          Ada_Low_N : Time_Rep;\n          Day_Count : Long_Integer;\n          Day_Dur   : Time_Dur;\n@@ -1133,7 +1126,7 @@ package body Ada.Calendar is\n          Date_N := Date_N - Time_Rep (Elapsed_Leaps) * Nano;\n \n          --  Step 2: Time zone processing. This action converts the input date\n-         --  from GMT to the requested time zone.\n+         --  from GMT to the requested time zone. Applies from Ada 2005 on.\n \n          if Is_Ada_05 then\n             if Time_Zone /= 0 then\n@@ -1289,6 +1282,7 @@ package body Ada.Calendar is\n          --  the input date.\n \n          Count := (Year - Year_Number'First) / 4;\n+\n          for Four_Year_Segments in 1 .. Count loop\n             Res_N := Res_N + Nanos_In_Four_Years;\n          end loop;\n@@ -1388,9 +1382,7 @@ package body Ada.Calendar is\n             --  An Ada 2005 caller requesting an explicit leap second or an\n             --  Ada 95 caller accounting for an invisible leap second.\n \n-            if Leap_Sec\n-              or else Res_N >= Next_Leap_N\n-            then\n+            if Leap_Sec or else Res_N >= Next_Leap_N then\n                Res_N := Res_N + Time_Rep (1) * Nano;\n             end if;\n "}, {"sha": "1909d557e34d316143d785dd26f42e2809dff4e9", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -9090,10 +9090,26 @@ package body Exp_Ch9 is\n          --  Generate:\n          --    _Disp_Requeue (<Params>);\n \n-         return\n-           Make_Procedure_Call_Statement (Loc,\n-             Name => Make_Identifier (Loc, Name_uDisp_Requeue),\n-             Parameter_Associations => Params);\n+         --  Find entity for Disp_Requeue operation, which belongs to\n+         --  the type and may not be directly visible.\n+\n+         declare\n+            Elmt : Elmt_Id;\n+            Op   : Entity_Id;\n+\n+         begin\n+            Elmt := First_Elmt (Primitive_Operations (Etype (Conc_Typ)));\n+            while Present (Elmt) loop\n+               Op := Node (Elmt);\n+               exit when Chars (Op) = Name_uDisp_Requeue;\n+               Next_Elmt (Elmt);\n+            end loop;\n+\n+            return\n+              Make_Procedure_Call_Statement (Loc,\n+                Name                   => New_Occurrence_Of (Op, Loc),\n+                Parameter_Associations => Params);\n+         end;\n       end Build_Dispatching_Requeue;\n \n       --------------------------------------\n@@ -9366,6 +9382,16 @@ package body Exp_Ch9 is\n       Extract_Entry (N, Concval, Ename, Index);\n       Conc_Typ := Etype (Concval);\n \n+      --  If the prefix is an access to class-wide type, dereference to get\n+      --  object and entry type.\n+\n+      if Is_Access_Type (Conc_Typ) then\n+         Conc_Typ := Designated_Type (Conc_Typ);\n+         Rewrite (Concval,\n+           Make_Explicit_Dereference (Loc, Relocate_Node (Concval)));\n+         Analyze_And_Resolve (Concval, Conc_Typ);\n+      end if;\n+\n       --  Examine the scope stack in order to find nearest enclosing protected\n       --  or task type. This will constitute our invocation source.\n "}, {"sha": "78bcf3aad054e093cb2e233fd529e1b2e5348b16", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "patch": "@@ -1,7 +1,7 @@\n @set gprconfig GPRconfig\n \n @c ------ projects.texi\n-@c Copyright (C) 2002-2011, Free Software Foundation, Inc.\n+@c Copyright (C) 2002-2012, Free Software Foundation, Inc.\n @c This file is shared between the GNAT user's guide and gprbuild. It is not\n @c compilable on its own, you should instead compile the other two manuals.\n @c For that reason, there is no toplevel @menu\n@@ -2160,7 +2160,7 @@ using standard projects. This section will go over a few of these use\n cases to try and explain what you can use aggregate projects for.\n \n @menu\n-* Building all main units from a single project tree::\n+* Building all main programs from a single project tree::\n * Building a set of projects with a single command::\n * Define a build environment::\n * Performance improvements in builder::\n@@ -2169,8 +2169,8 @@ cases to try and explain what you can use aggregate projects for.\n @end menu\n \n @c -----------------------------------------------------------\n-@node Building all main units from a single project tree\n-@subsection Building all main units from a single project tree\n+@node Building all main programs from a single project tree\n+@subsection Building all main programs from a single project tree\n @c -----------------------------------------------------------\n \n Most often, an application is organized into modules and submodules,\n@@ -2189,7 +2189,7 @@ a syntax similar to\n    gprbuild -PA.gpr\n @end smallexample\n \n-this will only rebuild the main units of project A, not those of the\n+this will only rebuild the main programs of project A, not those of the\n imported projects B and C. Therefore you have to spawn several\n gnatmake commands, one per project, to build all executables.\n This is a little inconvenient, but more importantly is inefficient\n@@ -2206,22 +2206,22 @@ and C. Then, when you build with\n     gprbuild -PAgg.gpr\n @end smallexample\n \n-this will build all main units from A, B and C.\n+this will build all mains from A, B and C.\n \n @smallexample @c projectfile\n    aggregate project Agg is\n       for Project_Files use (\"a.gpr\", \"b.gpr\", \"c.gpr\");\n    end Agg;\n @end smallexample\n \n-If B or C do not define any main unit (through their Main\n+If B or C do not define any main program (through their Main\n attribute), all their sources are build. When you do not group them\n in the aggregate project, only those sources that are needed by A\n will be build.\n \n-If you add a main unit to a project P not already explicitly referenced in the\n+If you add a main to a project P not already explicitly referenced in the\n aggregate project, you will need to add \"p.gpr\" in the list of project\n-files for the aggregate project, or the main unit will not be built when\n+files for the aggregate project, or the main will not be built when\n building the aggregate project.\n \n @c ---------------------------------------------------------\n@@ -2402,7 +2402,7 @@ grouping standard projects, you can have both the root of a project tree\n within the tree.\n \n Basically, the idea is to specify all those projects that have\n-main units you want to build and link, or libraries you want to\n+main programs you want to build and link, or libraries you want to\n build. You can even specify projects that do not use the Main\n attribute nor the @code{Library_*} attributes, and the result will be to\n build all their source files (not just the ones needed by other\n@@ -2665,7 +2665,7 @@ Projects can locally add to those by using the\n \n For projects that are build through the aggregate, the package Builder\n is ignored, except for the Executable attribute which specifies the\n-name of the executables resulting from the link of the main units, and\n+name of the executables resulting from the link of the main programs, and\n for the Executable_Suffix.\n \n @c ---------------------------------------------\n@@ -4125,7 +4125,7 @@ with one or several main subprograms, by specifying their source files on the\n command line.\n \n @smallexample\n-    gnatmake ^-P^/PROJECT_FILE=^prj main1 main2 main3\n+    gnatmake ^-P^/PROJECT_FILE=^prj main1.adb main2.adb main3.adb\n @end smallexample\n \n @noindent\n@@ -4161,15 +4161,15 @@ Example:\n @smallexample @c projectfile\n @group\n    project Prj is\n-      for Main use (\"main1\", \"main2\", \"main3\");\n+      for Main use (\"main1.adb\", \"main2.adb\", \"main3.adb\");\n    end Prj;\n @end group\n @end smallexample\n \n @noindent\n With this project file, @code{\"gnatmake ^-Pprj^/PROJECT_FILE=PRJ^\"}\n is equivalent to\n-@code{\"gnatmake ^-Pprj^/PROJECT_FILE=PRJ^ main1 main2 main3\"}.\n+@code{\"gnatmake ^-Pprj^/PROJECT_FILE=PRJ^ main1.adb main2.adb main3.adb\"}.\n \n When the project attribute @code{Main} is not specified, or is specified\n as an empty string list, or when the switch @option{-u} is used on the command"}, {"sha": "72ce1c0e9d149ab20c269692f9c6f0272d4b70fc", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce20f35b8f111d13784ac796abbf7dcc7720e9ae/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=ce20f35b8f111d13784ac796abbf7dcc7720e9ae", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1393,6 +1393,7 @@ package body Sem_Ch9 is\n       Target_Obj  : Node_Id := Empty;\n       Req_Scope   : Entity_Id;\n       Outer_Ent   : Entity_Id;\n+      Synch_Type  : Entity_Id;\n \n    begin\n       Tasking_Used := True;\n@@ -1548,13 +1549,23 @@ package body Sem_Ch9 is\n \n       --  Ada 2012 (AI05-0030): Potential dispatching requeue statement. The\n       --  target type must be a concurrent interface class-wide type and the\n-      --  target must be a procedure, flagged by pragma Implemented.\n+      --  target must be a procedure, flagged by pragma Implemented. The\n+      --  target may be an access to class-wide type, in which case it must\n+      --  be dereferenced.\n+\n+      if Present (Target_Obj) then\n+         Synch_Type := Etype (Target_Obj);\n+\n+         if Is_Access_Type (Synch_Type) then\n+            Synch_Type := Designated_Type (Synch_Type);\n+         end if;\n+      end if;\n \n       Is_Disp_Req :=\n         Ada_Version >= Ada_2012\n           and then Present (Target_Obj)\n-          and then Is_Class_Wide_Type (Etype (Target_Obj))\n-          and then Is_Concurrent_Interface (Etype (Target_Obj))\n+          and then Is_Class_Wide_Type (Synch_Type)\n+          and then Is_Concurrent_Interface (Synch_Type)\n           and then Ekind (Entry_Id) = E_Procedure\n           and then Has_Rep_Pragma (Entry_Id, Name_Implemented);\n "}]}