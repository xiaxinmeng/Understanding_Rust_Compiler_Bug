{"sha": "6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2YWE4ZDM4OGNlM2EzMzBmYjY1ZGI0ZTlkNTEyMGZiZTNjMWZlNw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-04-26T14:02:09Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-04-26T14:02:09Z"}, "message": "match.pd: X + X --> X * 2 for integers\n\n2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* genmatch.c (write_predicate): Add ATTRIBUTE_UNUSED.\n\t* fold-const.c (fold_binary_loc): Remove 2 transformations\n\tsuperseded by match.pd.\n\t* match.pd (x+x -> x*2): Generalize to integers.\n\ngcc/testsuite/\n\t* gcc.dg/fold-plusmult.c: Adjust.\n\t* gcc.dg/no-strict-overflow-6.c: Adjust.\n\t* gcc.dg/gomp/loop-1.c: Xfail some tests.\n\nFrom-SVN: r235444", "tree": {"sha": "c9d8cd56bc07eff23e7a6bbb4f64796773adab46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9d8cd56bc07eff23e7a6bbb4f64796773adab46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a84454dc451034e76d05f0b23ad2bffceb8cac05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a84454dc451034e76d05f0b23ad2bffceb8cac05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a84454dc451034e76d05f0b23ad2bffceb8cac05"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "e45f9c95c99310ccc96d795521f0de771bfbc21d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -1,3 +1,10 @@\n+2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* genmatch.c (write_predicate): Add ATTRIBUTE_UNUSED.\n+\t* fold-const.c (fold_binary_loc): Remove 2 transformations\n+\tsuperseded by match.pd.\n+\t* match.pd (x+x -> x*2): Generalize to integers.\n+\n 2016-04-26  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* config/i386/i386.md (operation on memory peephole): Duplicate an"}, {"sha": "1ce66e7d090adf55ebf8d92005def641788fa4b1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -9956,25 +9956,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\t    fold_convert_loc (loc, type,\n \t\t\t\t\t\t      negate_expr (op0)), tem);\n \n-\t  /* (A + A) * C -> A * 2 * C  */\n-\t  if (TREE_CODE (arg0) == PLUS_EXPR\n-\t      && TREE_CODE (arg1) == INTEGER_CST\n-\t      && operand_equal_p (TREE_OPERAND (arg0, 0),\n-\t\t\t          TREE_OPERAND (arg0, 1), 0))\n-\t    return fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\tomit_one_operand_loc (loc, type,\n-\t\t\t\t\t\t  TREE_OPERAND (arg0, 0),\n-\t\t\t\t\t\t  TREE_OPERAND (arg0, 1)),\n-\t\t\t\tfold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t\t     build_int_cst (type, 2) , arg1));\n-\n-\t  /* ((T) (X /[ex] C)) * C cancels out if the conversion is\n-\t     sign-changing only.  */\n-\t  if (TREE_CODE (arg1) == INTEGER_CST\n-\t      && TREE_CODE (arg0) == EXACT_DIV_EXPR\n-\t      && operand_equal_p (arg1, TREE_OPERAND (arg0, 1), 0))\n-\t    return fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\n \t  strict_overflow_p = false;\n \t  if (TREE_CODE (arg1) == INTEGER_CST\n \t      && 0 != (tem = extract_muldiv (op0, arg1, code, NULL_TREE,"}, {"sha": "2b666ddd6f7c790e2f1beda3722391e3eee1e79c", "filename": "gcc/genmatch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -3556,7 +3556,7 @@ write_predicate (FILE *f, predicate_id *p, decision_tree &dt, bool gimple)\n \t   \"%s%s (tree t%s%s)\\n\"\n \t   \"{\\n\", gimple ? \"gimple_\" : \"tree_\", p->id,\n \t   p->nargs > 0 ? \", tree *res_ops\" : \"\",\n-\t   gimple ? \", tree (*valueize)(tree)\" : \"\");\n+\t   gimple ? \", tree (*valueize)(tree) ATTRIBUTE_UNUSED\" : \"\");\n   /* Conveniently make 'type' available.  */\n   fprintf_indent (f, 2, \"tree type = TREE_TYPE (t);\\n\");\n "}, {"sha": "5f22b13b69071ea8c05281034e16497ed5284eaa", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -1628,11 +1628,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (if (!TREE_OVERFLOW (tem) || !flag_trapping_math)\n     (minus @0 { tem; })))))\n \n-/* Convert x+x into x*2.0.  */\n+/* Convert x+x into x*2.  */\n (simplify\n  (plus @0 @0)\n  (if (SCALAR_FLOAT_TYPE_P (type))\n-  (mult @0 { build_real (type, dconst2); })))\n+  (mult @0 { build_real (type, dconst2); })\n+  (if (INTEGRAL_TYPE_P (type))\n+   (mult @0 { build_int_cst (type, 2); }))))\n \n (simplify\n  (minus integer_zerop @1)"}, {"sha": "2144b1425289ccf35893de0ceaf5b7c0d0a2f7ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -1,3 +1,9 @@\n+2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/fold-plusmult.c: Adjust.\n+\t* gcc.dg/no-strict-overflow-6.c: Adjust.\n+\t* gcc.dg/gomp/loop-1.c: Xfail some tests.\n+\n 2016-04-26  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* gcc.target/i386/avx512bw-vptestmb-1.c: Correct [xyz]mm register"}, {"sha": "cd28fa6751b3dddd5ed864144f005dcb9ebd1c68", "filename": "gcc/testsuite/gcc.dg/fold-plusmult.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-plusmult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-plusmult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-plusmult.c?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -11,4 +11,4 @@ int test2 (int a)\n   return (a + a)*2;\n }\n \n-/* { dg-final { scan-tree-dump-times \"<a> \\\\\\* 4\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"a \\\\\\* 4\" 2 \"original\" } } */"}, {"sha": "527d31929231c63990ca09f4d03543d8b48525e8", "filename": "gcc/testsuite/gcc.dg/gomp/loop-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Floop-1.c?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -44,14 +44,14 @@ f1 (int x)\n   #pragma omp for\n   for (i = 5; i <= i; i++) /* { dg-error \"invalid controlling predicate|condition expression refers to iteration variable\" } */\n     ;\n-  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" } */\n-  for (i = 5; i < 16; i += i)\n+  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" \"\" { xfail *-*-* } } */\n+  for (i = 5; i < 16; i += i) /* { dg-bogus \"invalid increment expression\" \"\" { xfail *-*-* } } */\n     ;\n   #pragma omp for\n   for (i = 5; i < 16; i = i + 2 * i) /* { dg-error \"invalid increment expression|increment expression refers to iteration variable\" } */\n     ;\n-  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" } */\n-  for (i = 5; i < 16; i = i + i)\n+  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" \"\" { xfail *-*-* } } */\n+  for (i = 5; i < 16; i = i + i) /* { dg-bogus \"invalid increment expression\" \"\" { xfail *-*-* } } */\n     ;\n   #pragma omp for\n   for (i = 5; i < 16; i = i + bar (i)) /* { dg-error \"increment expression refers to iteration variable\" } */\n@@ -181,14 +181,14 @@ f2 (int x)\n   #pragma omp for\n   for (int i = 5; i <= i; i++) /* { dg-error \"invalid controlling predicate|condition expression refers to iteration variable\" } */\n     ;\n-  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" } */\n-  for (int i = 5; i < 16; i += i)\n+  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" \"\" { xfail *-*-* } } */\n+  for (int i = 5; i < 16; i += i) /* { dg-bogus \"invalid increment expression\" \"\" { xfail *-*-* } } */\n     ;\n   #pragma omp for\n   for (int i = 5; i < 16; i = i + 2 * i) /* { dg-error \"invalid increment expression|increment expression refers to iteration variable\" } */\n     ;\n-  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" } */\n-  for (int i = 5; i < 16; i = i + i)\n+  #pragma omp for /* { dg-error \"increment expression refers to iteration variable\" \"\" { xfail *-*-* } } */\n+  for (int i = 5; i < 16; i = i + i) /* { dg-bogus \"invalid increment expression\" \"\" { xfail *-*-* } } */\n     ;\n   #pragma omp for\n   for (int i = 5; i < 16; i = i + bar (i)) /* { dg-error \"increment expression refers to iteration variable\" } */"}, {"sha": "0a8811966325d941618d30ce2f1352533656b1b9", "filename": "gcc/testsuite/gcc.dg/no-strict-overflow-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fno-strict-overflow-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fno-strict-overflow-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fno-strict-overflow-6.c?ref=6b6aa8d388ce3a330fb65db4e9d5120fbe3c1fe7", "patch": "@@ -14,7 +14,7 @@ foo ()\n   int i, bits;\n   for (i = 1, bits = 1; i > 0; i += i)\n     ++bits;\n-  return bits;\n+  return bits - sizeof(int) * __CHAR_BIT__;\n }\n \n-/* { dg-final { scan-tree-dump \"return bits\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"return 0\" \"optimized\" } } */"}]}