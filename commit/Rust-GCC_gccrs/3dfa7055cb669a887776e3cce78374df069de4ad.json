{"sha": "3dfa7055cb669a887776e3cce78374df069de4ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmYTcwNTVjYjY2OWE4ODc3NzZlM2NjZTc4Mzc0ZGYwNjlkZTRhZA==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-11-17T06:12:43Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-11-17T06:12:43Z"}, "message": "aarch64-modes.def: Define ccmp CC mode.\n\n2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* config/aarch64/aarch64-modes.def: Define ccmp CC mode.\n\t* config/aarch64/aarch64.c (aarch64_get_condition_code_1): New function\n\textacted from aarch64_get_condition_code.\n\t(aarch64_get_condition_code): Call aarch64_get_condition_code_1.\n\tconfig/aarch64/predicates.md (ccmp_cc_register): New predicate.\n\nFrom-SVN: r217643", "tree": {"sha": "e9425079883de2f73f1ec980883e3e929a154248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9425079883de2f73f1ec980883e3e929a154248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfa7055cb669a887776e3cce78374df069de4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa7055cb669a887776e3cce78374df069de4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfa7055cb669a887776e3cce78374df069de4ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfa7055cb669a887776e3cce78374df069de4ad/comments", "author": null, "committer": null, "parents": [{"sha": "b56d6aa18a939327828f0095efbdb8375a2867a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56d6aa18a939327828f0095efbdb8375a2867a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56d6aa18a939327828f0095efbdb8375a2867a8"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "c7f353e8b9d3597d1184472c4115d1c537ad2708", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dfa7055cb669a887776e3cce78374df069de4ad", "patch": "@@ -1,3 +1,11 @@\n+2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* config/aarch64/aarch64-modes.def: Define ccmp CC mode.\n+\t* config/aarch64/aarch64.c (aarch64_get_condition_code_1): New function\n+\textacted from aarch64_get_condition_code.\n+\t(aarch64_get_condition_code): Call aarch64_get_condition_code_1.\n+\tconfig/aarch64/predicates.md (ccmp_cc_register): New predicate.\n+\n 014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* config/aarch64/constraints.md (Usn, aarch64_ccmp_immediate,"}, {"sha": "ccc1a33a69926ff6222354aabcf7a1fc39049c1f", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=3dfa7055cb669a887776e3cce78374df069de4ad", "patch": "@@ -25,6 +25,16 @@ CC_MODE (CC_ZESWP); /* zero-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_SESWP); /* sign-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n+CC_MODE (CC_DNE);\n+CC_MODE (CC_DEQ);\n+CC_MODE (CC_DLE);\n+CC_MODE (CC_DLT);\n+CC_MODE (CC_DGE);\n+CC_MODE (CC_DGT);\n+CC_MODE (CC_DLEU);\n+CC_MODE (CC_DLTU);\n+CC_MODE (CC_DGEU);\n+CC_MODE (CC_DGTU);\n \n /* Vector modes.  */\n VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI.  */"}, {"sha": "86549979773ecec29f6a49f795fde02cab464a98", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3dfa7055cb669a887776e3cce78374df069de4ad", "patch": "@@ -3625,6 +3625,9 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n   return CCmode;\n }\n \n+static int\n+aarch64_get_condition_code_1 (enum machine_mode, enum rtx_code);\n+\n int\n aarch64_get_condition_code (rtx x)\n {\n@@ -3633,7 +3636,13 @@ aarch64_get_condition_code (rtx x)\n \n   if (GET_MODE_CLASS (mode) != MODE_CC)\n     mode = SELECT_CC_MODE (comp_code, XEXP (x, 0), XEXP (x, 1));\n+  return aarch64_get_condition_code_1 (mode, comp_code);\n+}\n \n+static int\n+aarch64_get_condition_code_1 (enum machine_mode mode, enum rtx_code comp_code)\n+{\n+  int ne = -1, eq = -1;\n   switch (mode)\n     {\n     case CCFPmode:\n@@ -3656,6 +3665,56 @@ aarch64_get_condition_code (rtx x)\n \t}\n       break;\n \n+    case CC_DNEmode:\n+      ne = AARCH64_NE;\n+      eq = AARCH64_EQ;\n+      break;\n+\n+    case CC_DEQmode:\n+      ne = AARCH64_EQ;\n+      eq = AARCH64_NE;\n+      break;\n+\n+    case CC_DGEmode:\n+      ne = AARCH64_GE;\n+      eq = AARCH64_LT;\n+      break;\n+\n+    case CC_DLTmode:\n+      ne = AARCH64_LT;\n+      eq = AARCH64_GE;\n+      break;\n+\n+    case CC_DGTmode:\n+      ne = AARCH64_GT;\n+      eq = AARCH64_LE;\n+      break;\n+\n+    case CC_DLEmode:\n+      ne = AARCH64_LE;\n+      eq = AARCH64_GT;\n+      break;\n+\n+    case CC_DGEUmode:\n+      ne = AARCH64_CS;\n+      eq = AARCH64_CC;\n+      break;\n+\n+    case CC_DLTUmode:\n+      ne = AARCH64_CC;\n+      eq = AARCH64_CS;\n+      break;\n+\n+    case CC_DGTUmode:\n+      ne = AARCH64_HI;\n+      eq = AARCH64_LS;\n+      break;\n+\n+    case CC_DLEUmode:\n+      ne = AARCH64_LS;\n+      eq = AARCH64_HI;\n+      break;\n+\n     case CCmode:\n       switch (comp_code)\n \t{\n@@ -3716,6 +3775,14 @@ aarch64_get_condition_code (rtx x)\n       return -1;\n       break;\n     }\n+\n+  if (comp_code == NE)\n+    return ne;\n+\n+  if (comp_code == EQ)\n+    return eq;\n+\n+  return -1;\n }\n \n bool"}, {"sha": "f6fe58c5edb9da9807baa3bab9fc9d6b97f51fa6", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfa7055cb669a887776e3cce78374df069de4ad/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=3dfa7055cb669a887776e3cce78374df069de4ad", "patch": "@@ -38,6 +38,23 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_ccmp_immediate\")))\n \n+(define_special_predicate \"ccmp_cc_register\"\n+  (and (match_code \"reg\")\n+       (and (match_test \"REGNO (op) == CC_REGNUM\")\n+\t    (ior (match_test \"mode == GET_MODE (op)\")\n+\t\t (match_test \"mode == VOIDmode\n+\t\t\t      && (GET_MODE (op) == CC_DNEmode\n+\t\t\t\t  || GET_MODE (op) == CC_DEQmode\n+\t\t\t\t  || GET_MODE (op) == CC_DLEmode\n+\t\t\t\t  || GET_MODE (op) == CC_DLTmode\n+\t\t\t\t  || GET_MODE (op) == CC_DGEmode\n+\t\t\t\t  || GET_MODE (op) == CC_DGTmode\n+\t\t\t\t  || GET_MODE (op) == CC_DLEUmode\n+\t\t\t\t  || GET_MODE (op) == CC_DLTUmode\n+\t\t\t\t  || GET_MODE (op) == CC_DGEUmode\n+\t\t\t\t  || GET_MODE (op) == CC_DGTUmode)\"))))\n+)\n+\n (define_predicate \"aarch64_simd_register\"\n   (and (match_code \"reg\")\n        (ior (match_test \"REGNO_REG_CLASS (REGNO (op)) == FP_LO_REGS\")"}]}