{"sha": "609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5YzdkYTlhYjA4YjAwOWZiN2E5Y2FjZjY4YTQwYjNiMzkyMzFiMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-24T17:54:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-24T17:54:07Z"}, "message": "compiler: open code string equality\n    \n    Open code string equality with builtin memcmp. This allows\n    further optimizations in the backend.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/183538\n\nFrom-SVN: r272624", "tree": {"sha": "35dca03ba85159a6996a182caf07eaaeccfd9728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35dca03ba85159a6996a182caf07eaaeccfd9728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/comments", "author": null, "committer": null, "parents": [{"sha": "d611cec3de1e54091843019a0d02c23493d288ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d611cec3de1e54091843019a0d02c23493d288ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d611cec3de1e54091843019a0d02c23493d288ce"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "ca68507906a96019965b9b2438c2fee559321a41", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "patch": "@@ -1,4 +1,4 @@\n-338e4baf88a4ae676205dff601dbef2d31b19d2d\n+89b442a0100286ee569b8d2562ce1b2ea602f7e7\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "2f33deeb4a1baaa0bd8e3d165c98a994214bf7ae", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "patch": "@@ -6226,10 +6226,27 @@ Binary_expression::do_flatten(Gogo* gogo, Named_object*,\n   bool is_idiv_op = ((this->op_ == OPERATOR_DIV &&\n                       left_type->integer_type() != NULL)\n                      || this->op_ == OPERATOR_MOD);\n+  bool is_string_op = (left_type->is_string_type()\n+                       && this->right_->type()->is_string_type());\n+\n+  if (is_string_op)\n+    {\n+      // Mark string([]byte) operands to reuse the backing store.\n+      // String comparison does not keep the reference, so it is safe.\n+      Type_conversion_expression* lce =\n+        this->left_->conversion_expression();\n+      if (lce != NULL && lce->expr()->type()->is_slice_type())\n+        lce->set_no_copy(true);\n+      Type_conversion_expression* rce =\n+        this->right_->conversion_expression();\n+      if (rce != NULL && rce->expr()->type()->is_slice_type())\n+        rce->set_no_copy(true);\n+    }\n \n   if (is_shift_op\n       || (is_idiv_op\n-\t  && (gogo->check_divide_by_zero() || gogo->check_divide_overflow())))\n+\t  && (gogo->check_divide_by_zero() || gogo->check_divide_overflow()))\n+      || is_string_op)\n     {\n       if (!this->left_->is_variable() && !this->left_->is_constant())\n         {\n@@ -7217,19 +7234,42 @@ Expression::comparison(Translate_context* context, Type* result_type,\n \n   if (left_type->is_string_type() && right_type->is_string_type())\n     {\n-      // Mark string([]byte) operands to reuse the backing store.\n-      // String comparison does not keep the reference, so it is safe.\n-      Type_conversion_expression* lce = left->conversion_expression();\n-      if (lce != NULL && lce->expr()->type()->is_slice_type())\n-        lce->set_no_copy(true);\n-      Type_conversion_expression* rce = right->conversion_expression();\n-      if (rce != NULL && rce->expr()->type()->is_slice_type())\n-        rce->set_no_copy(true);\n+      go_assert(left->is_variable() || left->is_constant());\n+      go_assert(right->is_variable() || right->is_constant());\n \n       if (op == OPERATOR_EQEQ || op == OPERATOR_NOTEQ)\n \t{\n-\t  left = Runtime::make_call(Runtime::EQSTRING, location, 2,\n-\t\t\t\t    left, right);\n+          // (l.len == r.len\n+          //  ? (l.ptr == r.ptr ? true : memcmp(l.ptr, r.ptr, r.len) == 0)\n+          //  : false)\n+          Expression* llen = Expression::make_string_info(left,\n+                                                          STRING_INFO_LENGTH,\n+                                                          location);\n+          Expression* rlen = Expression::make_string_info(right,\n+                                                          STRING_INFO_LENGTH,\n+                                                          location);\n+          Expression* leneq = Expression::make_binary(OPERATOR_EQEQ, llen, rlen,\n+                                                      location);\n+          Expression* lptr = Expression::make_string_info(left->copy(),\n+                                                          STRING_INFO_DATA,\n+                                                          location);\n+          Expression* rptr = Expression::make_string_info(right->copy(),\n+                                                          STRING_INFO_DATA,\n+                                                          location);\n+          Expression* ptreq = Expression::make_binary(OPERATOR_EQEQ, lptr, rptr,\n+                                                      location);\n+          Expression* btrue = Expression::make_boolean(true, location);\n+          Expression* call = Runtime::make_call(Runtime::MEMCMP, location, 3,\n+                                                lptr->copy(), rptr->copy(),\n+                                                rlen->copy());\n+          Type* int32_type = Type::lookup_integer_type(\"int32\");\n+          Expression* zero = Expression::make_integer_ul(0, int32_type, location);\n+          Expression* cmp = Expression::make_binary(OPERATOR_EQEQ, call, zero,\n+                                                    location);\n+          Expression* cond = Expression::make_conditional(ptreq, btrue, cmp,\n+                                                          location);\n+          Expression* bfalse = Expression::make_boolean(false, location);\n+          left = Expression::make_conditional(leneq, cond, bfalse, location);\n \t  right = Expression::make_boolean(true, location);\n \t}\n       else"}, {"sha": "ec7ec769048d0726c9f542a555b3e70bb209bd24", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "patch": "@@ -39,9 +39,6 @@ DEF_GO_RUNTIME(DECODERUNE, \"runtime.decoderune\", P2(STRING, INT),\n DEF_GO_RUNTIME(CONCATSTRINGS, \"runtime.concatstrings\",\n                P3(POINTER, POINTER, INT), R1(STRING))\n \n-// Compare two strings for equality.\n-DEF_GO_RUNTIME(EQSTRING, \"runtime.eqstring\", P2(STRING, STRING), R1(BOOL))\n-\n // Compare two strings.\n DEF_GO_RUNTIME(CMPSTRING, \"runtime.cmpstring\", P2(STRING, STRING), R1(INT))\n "}, {"sha": "a2bb5bb0b9987043cdb6e00355f1c45fe2b552a1", "filename": "libgo/go/runtime/alg.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/libgo%2Fgo%2Fruntime%2Falg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/libgo%2Fgo%2Fruntime%2Falg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Falg.go?ref=609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "patch": "@@ -44,7 +44,6 @@ import (\n //go:linkname ifacevaleq runtime.ifacevaleq\n //go:linkname ifaceefaceeq runtime.ifaceefaceeq\n //go:linkname efacevaleq runtime.efacevaleq\n-//go:linkname eqstring runtime.eqstring\n //go:linkname cmpstring runtime.cmpstring\n //\n // Temporary to be called from C code."}, {"sha": "e00d759b7061527db45c4731c1a25638f54c39f5", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609c7da9ab08b009fb7a9cacf68a40b3b39231b3/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=609c7da9ab08b009fb7a9cacf68a40b3b39231b3", "patch": "@@ -273,18 +273,6 @@ func checkASM() bool {\n \treturn true\n }\n \n-func eqstring(x, y string) bool {\n-\ta := stringStructOf(&x)\n-\tb := stringStructOf(&y)\n-\tif a.len != b.len {\n-\t\treturn false\n-\t}\n-\tif a.str == b.str {\n-\t\treturn true\n-\t}\n-\treturn memequal(a.str, b.str, uintptr(a.len))\n-}\n-\n // For gccgo this is in the C code.\n func osyield()\n "}]}