{"sha": "3a3516bc4a0a0307cd48dce044a497e95816c8f5", "node_id": "C_kwDOANBUbNoAKDNhMzUxNmJjNGEwYTAzMDdjZDQ4ZGNlMDQ0YTQ5N2U5NTgxNmM4ZjU", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-29T22:59:22Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-29T22:59:22Z"}, "message": "c: C2x noreturn attribute\n\nC2x adds a standard [[noreturn]] attribute (which can also be spelt\n[[_Noreturn]] for use with <stdnoreturn.h>), so allowing non-returning\nfunctions to be declared in a manner compatible with C++; the\n_Noreturn function specifier remains available but is marked\nobsolescent.\n\nImplement this attribute.  It's more restricted than GNU\n__attribute__ ((noreturn)) - that allows function pointers but using\nthe standard attribute on a function pointer is a constraint\nviolation.  Thus, the attribute gets its own handler that checks for a\nFUNCTION_DECL before calling the handler for the GNU attribute.  Tests\nfor the attribute are based on those for C11 _Noreturn and for other\nC2x attributes.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c-family/\n\t* c-lex.cc (c_common_has_attribute): Handle noreturn attribute for\n\tC.\n\ngcc/c/\n\t* c-decl.cc (handle_std_noreturn_attribute): New function.\n\t(std_attribute_table): Add _Noreturn and noreturn.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-attr-noreturn-1.c, gcc.dg/c2x-attr-noreturn-2.c,\n\tgcc.dg/c2x-attr-noreturn-3.c: New tests.\n\t* gcc.dg/c2x-has-c-attribute-2.c: Also test __has_c_attribute for\n\tnoreturn attribute.", "tree": {"sha": "dc36354d8478aea7275978397c3f4634444c8358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc36354d8478aea7275978397c3f4634444c8358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a3516bc4a0a0307cd48dce044a497e95816c8f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3516bc4a0a0307cd48dce044a497e95816c8f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3516bc4a0a0307cd48dce044a497e95816c8f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3516bc4a0a0307cd48dce044a497e95816c8f5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea258a13a115e9e73d60f59369d16892ed07435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea258a13a115e9e73d60f59369d16892ed07435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea258a13a115e9e73d60f59369d16892ed07435"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "d4e448a0132eb7ad6dbeb62b51bdb428c62ec19b", "filename": "gcc/c-family/c-lex.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Fc-family%2Fc-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Fc-family%2Fc-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.cc?ref=3a3516bc4a0a0307cd48dce044a497e95816c8f5", "patch": "@@ -389,6 +389,9 @@ c_common_has_attribute (cpp_reader *pfile, bool std_syntax)\n \t\tresult = 202003;\n \t      else if (is_attribute_p (\"maybe_unused\", attr_name))\n \t\tresult = 202106;\n+\t      else if (is_attribute_p (\"noreturn\", attr_name)\n+\t\t       || is_attribute_p (\"_Noreturn\", attr_name))\n+\t\tresult = 202202;\n \t    }\n \t  if (result)\n \t    attr_name = NULL_TREE;"}, {"sha": "bac8e6cc3f69ee95b7e93c6e67f0ca918882d960", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=3a3516bc4a0a0307cd48dce044a497e95816c8f5", "patch": "@@ -4480,11 +4480,34 @@ handle_nodiscard_attribute (tree *node, tree name, tree /*args*/,\n     }\n   return NULL_TREE;\n }\n+\n+/* Handle the standard [[noreturn]] attribute.  */\n+\n+static tree\n+handle_std_noreturn_attribute (tree *node, tree name, tree args,\n+\t\t\t       int flags, bool *no_add_attrs)\n+{\n+  /* Unlike GNU __attribute__ ((noreturn)), the standard [[noreturn]]\n+     only applies to functions, not function pointers.  */\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    return handle_noreturn_attribute (node, name, args, flags, no_add_attrs);\n+  else\n+    {\n+      pedwarn (input_location, OPT_Wattributes,\n+\t       \"standard %qE attribute can only be applied to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Table of supported standard (C2x) attributes.  */\n const struct attribute_spec std_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n        affects_type_identity, handler, exclude } */\n+  { \"_Noreturn\", 0, 0, false, false, false, false,\n+    handle_std_noreturn_attribute, NULL },\n   { \"deprecated\", 0, 1, false, false, false, false,\n     handle_deprecated_attribute, NULL },\n   { \"fallthrough\", 0, 0, false, false, false, false,\n@@ -4493,6 +4516,8 @@ const struct attribute_spec std_attribute_table[] =\n     handle_unused_attribute, NULL },\n   { \"nodiscard\", 0, 1, false, false, false, false,\n     handle_nodiscard_attribute, NULL },\n+  { \"noreturn\", 0, 0, false, false, false, false,\n+    handle_std_noreturn_attribute, NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n "}, {"sha": "d903c09a9e5b59509e0e1f007c38505ca3af52bb", "filename": "gcc/testsuite/gcc.dg/c2x-attr-noreturn-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-1.c?ref=3a3516bc4a0a0307cd48dce044a497e95816c8f5", "patch": "@@ -0,0 +1,56 @@\n+/* Test C2x noreturn attribute: valid uses.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[noreturn]] void exit (int);\n+\n+[[__noreturn__]] int f1 (void);\n+\n+[[_Noreturn]] void f2 (void);\n+\n+[[___Noreturn__]] static void f3 (void) { exit (0); }\n+\n+/* Returning from a noreturn function is undefined at runtime, not a\n+   constraint violation, but recommended practice is to diagnose if\n+   such a return appears possible.  */\n+\n+[[noreturn]] int\n+f4 (void)\n+{\n+  return 1; /* { dg-warning \"has a 'return' statement\" } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } .-1 } */\n+}\n+\n+[[__noreturn__]] void\n+f5 (void)\n+{\n+  return; /* { dg-warning \"has a 'return' statement\" } */\n+  /* { dg-warning \"does return\" \"second warning\" { target *-*-* } .-1 } */\n+}\n+\n+[[_Noreturn]] void\n+f6 (void)\n+{\n+} /* { dg-warning \"does return\" } */\n+\n+[[___Noreturn__]] void\n+f7 (int a)\n+{\n+  if (a)\n+    exit (0);\n+} /* { dg-warning \"does return\" } */\n+\n+/* Declarations need not all have the attribute (buf if the first does not,\n+   there is undefined behavior).  */\n+\n+void f2 (void);\n+\n+/* Duplicate attribute, and use with _Noreturn, is OK.  */\n+[[noreturn]] [[noreturn]] [[noreturn, __noreturn__]] void _Noreturn f9 (void);\n+\n+/* The attribute does not affect type compatibility.  */\n+\n+void (*fp) (void) = f5;\n+\n+/* Unlike the function specifier, the attribute may be used on main.  */\n+[[noreturn]] int main ();"}, {"sha": "331da4a6b5faff96a55f85b0c56a9a54a28144ea", "filename": "gcc/testsuite/gcc.dg/c2x-attr-noreturn-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-2.c?ref=3a3516bc4a0a0307cd48dce044a497e95816c8f5", "patch": "@@ -0,0 +1,72 @@\n+/* Test C2x noreturn attribute: invalid contexts.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[noreturn]]; /* { dg-error \"ignored\" } */\n+\n+int [[noreturn]] var; /* { dg-error \"ignored\" } */\n+\n+int array_with_dep_type[2] [[noreturn]]; /* { dg-error \"ignored\" } */\n+\n+void fn_with_dep_type () [[noreturn]]; /* { dg-error \"ignored\" } */\n+\n+int z = sizeof (int [[__noreturn__]]); /* { dg-error \"ignored\" } */\n+\n+[[noreturn]] int x1; /* { dg-error \"can only be applied to functions\" } */\n+int x2 [[__noreturn__]]; /* { dg-error \"can only be applied to functions\" } */\n+\n+[[_Noreturn]] void (*fp) (); /* { dg-error \"can only be applied to functions\" } */\n+\n+void\n+f (void)\n+{\n+  int a;\n+  [[_Noreturn]]; /* { dg-error \"ignored\" } */\n+  [[___Noreturn__]] a = 1; /* { dg-error \"ignored\" } */\n+}\n+\n+int\n+g ([[noreturn]] int x, int y) /* { dg-error \"can only be applied to functions\" } */\n+{\n+  [[noreturn]] typedef float F; /* { dg-error \"can only be applied to functions\" } */\n+  [[noreturn]] int a; /* { dg-error \"can only be applied to functions\" } */\n+  int b [[__noreturn__]]; /* { dg-error \"can only be applied to functions\" } */\n+  int c [[noreturn]]; /* { dg-error \"can only be applied to functions\" } */\n+  [[__noreturn__]] label1: ; /* { dg-error \"can only be applied to functions\" } */\n+  c = y;\n+  [[noreturn]] label2: ; /* { dg-error \"can only be applied to functions\" } */\n+  return y;\n+}\n+\n+struct [[_Noreturn]] s { double d; }; /* { dg-error \"can only be applied to functions\" } */\n+\n+struct s2\n+{\n+  [[___Noreturn__]] int a; /* { dg-error \"can only be applied to functions\" } */\n+  int b [[noreturn]]; /* { dg-error \"can only be applied to functions\" } */\n+} x;\n+\n+enum e { E1 [[noreturn]] }; /* { dg-error \"can only be applied to functions\" } */\n+\n+union [[_Noreturn]] u { int x; }; /* { dg-error \"can only be applied to functions\" } */\n+\n+enum [[noreturn]] eu { E2 }; /* { dg-error \"can only be applied to functions\" } */\n+\n+void fx ([[noreturn]] int p); /* { dg-error \"can only be applied\" } */\n+\n+union u2\n+{\n+  [[noreturn]] int a; /* { dg-error \"can only be applied to functions\" } */\n+  int b [[noreturn]]; /* { dg-error \"can only be applied to functions\" } */\n+} y;\n+\n+void\n+g2 (int x)\n+{\n+  switch (x)\n+    {\n+      [[noreturn]] case 1: ; /* { dg-error \"can only be applied to functions\" } */\n+      [[__noreturn__]] case 2: ; /* { dg-error \"can only be applied to functions\" } */\n+      [[noreturn]] default: ; /* { dg-error \"can only be applied to functions\" } */\n+    }\n+}"}, {"sha": "aaf21e22a133a5024f0e5c22d8a3b5d299b2c599", "filename": "gcc/testsuite/gcc.dg/c2x-attr-noreturn-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-noreturn-3.c?ref=3a3516bc4a0a0307cd48dce044a497e95816c8f5", "patch": "@@ -0,0 +1,11 @@\n+/* Test C2x noreturn attribute: invalid syntax.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[noreturn()]] void a(); /* { dg-error \"does not take any arguments\" } */\n+\n+[[__noreturn__(0)]] void b(); /* { dg-error \"does not take any arguments|expected\" } */\n+\n+[[_Noreturn(\"\", 123)]] void c(); /* { dg-error \"does not take any arguments|expected\" } */\n+\n+[[___Noreturn__(\"\")]] void d(); /* { dg-error \"does not take any arguments|expected\" } */"}, {"sha": "3c34ab6cbd93e485e3b08c0487528f4bc855064c", "filename": "gcc/testsuite/gcc.dg/c2x-has-c-attribute-2.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3516bc4a0a0307cd48dce044a497e95816c8f5/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-has-c-attribute-2.c?ref=3a3516bc4a0a0307cd48dce044a497e95816c8f5", "patch": "@@ -34,6 +34,22 @@\n #error \"bad result for __fallthrough__\"\n #endif\n \n+#if __has_c_attribute (noreturn) != 202202L\n+#error \"bad result for noreturn\"\n+#endif\n+\n+#if __has_c_attribute (__noreturn__) != 202202L\n+#error \"bad result for __noreturn__\"\n+#endif\n+\n+#if __has_c_attribute (_Noreturn) != 202202L\n+#error \"bad result for _Noreturn\"\n+#endif\n+\n+#if __has_c_attribute (___Noreturn__) != 202202L\n+#error \"bad result for ___Noreturn__\"\n+#endif\n+  \n /* Macros in the attribute name are expanded.  */\n #define foo deprecated\n #if __has_c_attribute (foo) != 201904L"}]}