{"sha": "676519f7138e4ab3938fe4427c3515ca37fe7976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2NTE5ZjcxMzhlNGFiMzkzOGZlNDQyN2MzNTE1Y2EzN2ZlNzk3Ng==", "commit": {"author": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-06-05T19:27:30Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-06-05T19:27:30Z"}, "message": "invoke.texi: Document the -fprofile-abs-path option.\n\n2017-06-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * doc/invoke.texi: Document the -fprofile-abs-path option.\n        * common.opt (fprofile-abs-path): New option.\n        * gcov-io.h (gcov_write_filename): Declare.\n        * gcov-io.c (gcov_write_filename): New function.\n        * coverage.c (coverage_begin_function): Use gcov_write_filename.\n        * profile.c (output_location): Likewise.\n\ngcc/testsuite:\n2017-06-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gcc.misc-tests/gcov-1a.c: New test.\n\nFrom-SVN: r248894", "tree": {"sha": "7e870093fa932a90587c27490e54116a476f9c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e870093fa932a90587c27490e54116a476f9c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676519f7138e4ab3938fe4427c3515ca37fe7976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676519f7138e4ab3938fe4427c3515ca37fe7976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676519f7138e4ab3938fe4427c3515ca37fe7976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676519f7138e4ab3938fe4427c3515ca37fe7976/comments", "author": null, "committer": null, "parents": [{"sha": "7b95ed64c90de3f9e8a2eb47f8ddd9a8344e559b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b95ed64c90de3f9e8a2eb47f8ddd9a8344e559b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b95ed64c90de3f9e8a2eb47f8ddd9a8344e559b"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "0a10511d468500bd3e3544ffa2407021f5eab066", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -1969,6 +1969,10 @@ fprofile\n Common Report Var(profile_flag)\n Enable basic program profiling code.\n \n+fprofile-abs-path\n+Common Report Var(profile_abs_path_flag)\n+Generate absolute source path names for gcov.\n+\n fprofile-arcs\n Common Report Var(profile_arc_flag)\n Insert arc-based program profiling code."}, {"sha": "ed469107e3e6750da53a0a39dd3e002efde5e792", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -663,7 +663,7 @@ coverage_begin_function (unsigned lineno_checksum, unsigned cfg_checksum)\n   gcov_write_unsigned (cfg_checksum);\n   gcov_write_string (IDENTIFIER_POINTER\n \t\t     (DECL_ASSEMBLER_NAME (current_function_decl)));\n-  gcov_write_string (xloc.file);\n+  gcov_write_filename (xloc.file);\n   gcov_write_unsigned (xloc.line);\n   gcov_write_length (offset);\n "}, {"sha": "4a83a3e39eb5d1afb12b1de48aeaf1d1beeb3498", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -444,6 +444,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Program Instrumentation Options\n @xref{Instrumentation Options,,Program Instrumentation Options}.\n @gccoptlist{-p  -pg  -fprofile-arcs  --coverage  -ftest-coverage @gol\n+-fprofile-abs-path @gol\n -fprofile-dir=@var{path}  -fprofile-generate  -fprofile-generate=@var{path} @gol\n -fsanitize=@var{style}  -fsanitize-recover  -fsanitize-recover=@var{style} @gol\n -fasan-shadow-offset=@var{number}  -fsanitize-sections=@var{s1},@var{s2},... @gol\n@@ -10694,6 +10695,12 @@ and code generation options.  For test coverage analysis, use the\n additional @option{-ftest-coverage} option.  You do not need to profile\n every source file in a program.\n \n+@item\n+Compile the source files additionally with @option{-fprofile-abs-path}\n+to create absolute path names in the @file{.gcno} files.  This allows\n+@command{gcov} to find the correct sources in projects where compilations\n+occur with different working directories.\n+\n @item\n Link your object files with @option{-lgcov} or @option{-fprofile-arcs}\n (the latter implies the former).\n@@ -10738,6 +10745,13 @@ above for a description of @var{auxname} and instructions on how to\n generate test coverage data.  Coverage data matches the source files\n more closely if you do not optimize.\n \n+@item -fprofile-abs-path\n+@opindex fprofile-abs-path\n+Automatically convert relative source file names to absolute path names\n+in the @file{.gcno} files.  This allows @command{gcov} to find the correct\n+sources in projects where compilations occur with different working\n+directories.\n+\n @item -fprofile-dir=@var{path}\n @opindex fprofile-dir\n "}, {"sha": "2ce26f4a8ff816ccb5206cd739cbdd22ffd65dee", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -356,6 +356,38 @@ gcov_write_string (const char *string)\n }\n #endif\n \n+#if !IN_LIBGCOV\n+/* Write FILENAME to coverage file.  Sets error flag on file\n+   error, overflow flag on overflow */\n+\n+GCOV_LINKAGE void\n+gcov_write_filename (const char *filename)\n+{\n+  if (profile_abs_path_flag && filename && filename[0]\n+      && !(IS_DIR_SEPARATOR (filename[0])\n+#if HAVE_DOS_BASED_FILE_SYSTEM\n+\t   || filename[1] == ':'\n+#endif\n+\t  ))\n+    {\n+      char *buf = getcwd (NULL, 0);\n+      if (buf != NULL && buf[0])\n+\t{\n+\t  size_t len = strlen (buf);\n+\t  buf = (char*)xrealloc (buf, len + strlen (filename) + 2);\n+\t  if (!IS_DIR_SEPARATOR (buf[len - 1]))\n+\t    strcat (buf, \"/\");\n+\t  strcat (buf, filename);\n+\t  gcov_write_string (buf);\n+\t  free (buf);\n+\t  return;\n+\t}\n+    }\n+\n+  gcov_write_string (filename);\n+}\n+#endif\n+\n #if !IN_LIBGCOV\n /* Write a tag TAG and reserve space for the record length. Return a\n    value to be used for gcov_write_length.  */"}, {"sha": "584c3a2eaca851b084380ab2aa0c357ef9d58c90", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -387,6 +387,7 @@ GCOV_LINKAGE void gcov_write_unsigned (gcov_unsigned_t) ATTRIBUTE_HIDDEN;\n /* Available only in compiler */\n GCOV_LINKAGE unsigned gcov_histo_index (gcov_type value);\n GCOV_LINKAGE void gcov_write_string (const char *);\n+GCOV_LINKAGE void gcov_write_filename (const char *);\n GCOV_LINKAGE gcov_position_t gcov_write_tag (gcov_unsigned_t);\n GCOV_LINKAGE void gcov_write_length (gcov_position_t /*position*/);\n #endif"}, {"sha": "219fa8a1b839b0cfe6905d1288020a855da33b4c", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -976,7 +976,7 @@ output_location (char const *file_name, int line,\n     {\n       prev_file_name = file_name;\n       gcov_write_unsigned (0);\n-      gcov_write_string (prev_file_name);\n+      gcov_write_filename (prev_file_name);\n     }\n   if (line_differs)\n     {"}, {"sha": "2b9fabce66c925060d179d971bf5062aa326e330", "filename": "gcc/testsuite/gcc.misc-tests/gcov-1a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676519f7138e4ab3938fe4427c3515ca37fe7976/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-1a.c?ref=676519f7138e4ab3938fe4427c3515ca37fe7976", "patch": "@@ -0,0 +1,20 @@\n+/* Test Gcov basics.  */\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage -fprofile-abs-path\" } */\n+/* { dg-do run { target native } } */\n+\n+void noop ()\n+{\n+}\n+\n+int main ()\n+{\n+  int i;\n+\n+  for (i = 0; i < 10; i++)\t/* count(11) */\n+    noop ();\t\t\t/* count(10) */\n+\n+  return 0;\t\t\t/* count(1) */\n+}\n+\n+/* { dg-final { run-gcov gcov-1a.c } } */"}]}