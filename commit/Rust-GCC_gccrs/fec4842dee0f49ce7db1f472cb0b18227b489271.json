{"sha": "fec4842dee0f49ce7db1f472cb0b18227b489271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjNDg0MmRlZTBmNDljZTdkYjFmNDcyY2IwYjE4MjI3YjQ4OTI3MQ==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-07-31T13:35:18Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-07-31T13:35:18Z"}, "message": "cpp.texi (__SANITIZE_ADDRESS__): Updated description.\n\n2014-07-31  Yury Gribov  <y.gribov@samsung.com>\n\n\t* doc/cpp.texi (__SANITIZE_ADDRESS__): Updated description.\n\t* doc/invoke.texi (-fsanitize=kernel-address): Describe new option.\n\t* flag-types.h (SANITIZE_USER_ADDRESS, SANITIZE_KERNEL_ADDRESS):\n\tNew enums.\n\t* gcc.c (sanitize_spec_function): Support new option.\n\t(SANITIZER_SPEC): Remove now redundant check.\n\t* opts.c (common_handle_option): Support new option.\n\t(finish_options): Check for incompatibilities.\n\t* toplev.c (process_options): Split userspace-specific checks.\n\nFrom-SVN: r213367", "tree": {"sha": "635ebf6c3843da8f2869a7802dedfc2941d28cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635ebf6c3843da8f2869a7802dedfc2941d28cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fec4842dee0f49ce7db1f472cb0b18227b489271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec4842dee0f49ce7db1f472cb0b18227b489271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec4842dee0f49ce7db1f472cb0b18227b489271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec4842dee0f49ce7db1f472cb0b18227b489271/comments", "author": null, "committer": null, "parents": [{"sha": "fd7215d7119221065b6aeb6ac70e2b75a74a94fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7215d7119221065b6aeb6ac70e2b75a74a94fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7215d7119221065b6aeb6ac70e2b75a74a94fb"}], "stats": {"total": 109, "additions": 87, "deletions": 22}, "files": [{"sha": "2200cabbba71b93766f9668aad8b298c4a1cae24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -1,3 +1,15 @@\n+2014-07-31  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* doc/cpp.texi (__SANITIZE_ADDRESS__): Updated description.\n+\t* doc/invoke.texi (-fsanitize=kernel-address): Describe new option.\n+\t* flag-types.h (SANITIZE_USER_ADDRESS, SANITIZE_KERNEL_ADDRESS):\n+\tNew enums.\n+\t* gcc.c (sanitize_spec_function): Support new option.\n+\t(SANITIZER_SPEC): Remove now redundant check.\n+\t* opts.c (common_handle_option): Support new option.\n+\t(finish_options): Check for incompatibilities.\n+\t* toplev.c (process_options): Split userspace-specific checks.\n+\n 2014-07-31  Richard Biener  <rguenther@suse.de>\n \n \t* lto-streamer.h (struct output_block): Remove global."}, {"sha": "0a6e50caac92726879ab4f44c137d37307d9fde0", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -2354,8 +2354,8 @@ This macro is defined, with value 3, when @option{-fstack-protector-strong} is\n in use.\n \n @item __SANITIZE_ADDRESS__\n-This macro is defined, with value 1, when @option{-fsanitize=address} is\n-in use.\n+This macro is defined, with value 1, when @option{-fsanitize=address}\n+or @option{-fsanitize=kernel-address} are in use.\n \n @item __TIMESTAMP__\n This macro expands to a string constant that describes the date and time"}, {"sha": "89f40d7cb90ad30a52d5de5be2309cd353668d17", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -5401,6 +5401,11 @@ more details.  The run-time behavior can be influenced using the\n @url{https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags} for\n a list of supported options.\n \n+@item -fsanitize=kernel-address\n+@opindex fsanitize=kernel-address\n+Enable AddressSanitizer for Linux kernel.\n+See @uref{http://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel} for more details.\n+\n @item -fsanitize=thread\n @opindex fsanitize=thread\n Enable ThreadSanitizer, a fast data race detector."}, {"sha": "bf813b6c6b581c906cf59960810853b25e80138a", "filename": "gcc/flag-types.h", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -214,23 +214,25 @@ enum vect_cost_model {\n enum sanitize_code {\n   /* AddressSanitizer.  */\n   SANITIZE_ADDRESS = 1 << 0,\n+  SANITIZE_USER_ADDRESS = 1 << 1,\n+  SANITIZE_KERNEL_ADDRESS = 1 << 2,\n   /* ThreadSanitizer.  */\n-  SANITIZE_THREAD = 1 << 1,\n+  SANITIZE_THREAD = 1 << 3,\n   /* LeakSanitizer.  */\n-  SANITIZE_LEAK = 1 << 2,\n+  SANITIZE_LEAK = 1 << 4,\n   /* UndefinedBehaviorSanitizer.  */\n-  SANITIZE_SHIFT = 1 << 3,\n-  SANITIZE_DIVIDE = 1 << 4,\n-  SANITIZE_UNREACHABLE = 1 << 5,\n-  SANITIZE_VLA = 1 << 6,\n-  SANITIZE_NULL = 1 << 7,\n-  SANITIZE_RETURN = 1 << 8,\n-  SANITIZE_SI_OVERFLOW = 1 << 9,\n-  SANITIZE_BOOL = 1 << 10,\n-  SANITIZE_ENUM = 1 << 11,\n-  SANITIZE_FLOAT_DIVIDE = 1 << 12,\n-  SANITIZE_FLOAT_CAST = 1 << 13,\n-  SANITIZE_BOUNDS = 1 << 14,\n+  SANITIZE_SHIFT = 1 << 5,\n+  SANITIZE_DIVIDE = 1 << 6,\n+  SANITIZE_UNREACHABLE = 1 << 7,\n+  SANITIZE_VLA = 1 << 8,\n+  SANITIZE_NULL = 1 << 9,\n+  SANITIZE_RETURN = 1 << 10,\n+  SANITIZE_SI_OVERFLOW = 1 << 11,\n+  SANITIZE_BOOL = 1 << 12,\n+  SANITIZE_ENUM = 1 << 13,\n+  SANITIZE_FLOAT_DIVIDE = 1 << 14,\n+  SANITIZE_FLOAT_CAST = 1 << 15,\n+  SANITIZE_BOUNDS = 1 << 16,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n \t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM"}, {"sha": "c0fde8c8df5b4bb2687ca60a2d1a80212b54d0a6", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -779,8 +779,7 @@ proper position among the other output files.  */\n #ifndef SANITIZER_SPEC\n #define SANITIZER_SPEC \"\\\n %{!nostdlib:%{!nodefaultlibs:%{%:sanitize(address):\" LIBASAN_SPEC \"\\\n-    %{static:%ecannot specify -static with -fsanitize=address}\\\n-    %{%:sanitize(thread):%e-fsanitize=address is incompatible with -fsanitize=thread}}\\\n+    %{static:%ecannot specify -static with -fsanitize=address}}\\\n     %{%:sanitize(thread):\" LIBTSAN_SPEC \"\\\n     %{!pie:%{!shared:%e-fsanitize=thread linking must be done with -pie or -shared}}}\\\n     %{%:sanitize(undefined):\" LIBUBSAN_SPEC \"}\\\n@@ -8224,7 +8223,9 @@ sanitize_spec_function (int argc, const char **argv)\n     return NULL;\n \n   if (strcmp (argv[0], \"address\") == 0)\n-    return (flag_sanitize & SANITIZE_ADDRESS) ? \"\" : NULL;\n+    return (flag_sanitize & SANITIZE_USER_ADDRESS) ? \"\" : NULL;\n+  if (strcmp (argv[0], \"kernel-address\") == 0)\n+    return (flag_sanitize & SANITIZE_KERNEL_ADDRESS) ? \"\" : NULL;\n   if (strcmp (argv[0], \"thread\") == 0)\n     return (flag_sanitize & SANITIZE_THREAD) ? \"\" : NULL;\n   if (strcmp (argv[0], \"undefined\") == 0)"}, {"sha": "4b0af82dac1793a739fae07f4d24fa3e185eb7df", "filename": "gcc/opts.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -869,6 +869,20 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n   /* The -gsplit-dwarf option requires -ggnu-pubnames.  */\n   if (opts->x_dwarf_split_debug_info)\n     opts->x_debug_generate_pub_sections = 2;\n+\n+  /* Userspace and kernel ASan conflict with each other and with TSan.  */\n+\n+  if ((flag_sanitize & SANITIZE_USER_ADDRESS)\n+      && (flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n+    error_at (loc,\n+              \"-fsanitize=address is incompatible with \"\n+              \"-fsanitize=kernel-address\");\n+\n+  if ((flag_sanitize & SANITIZE_ADDRESS)\n+      && (flag_sanitize & SANITIZE_THREAD))\n+    error_at (loc,\n+              \"-fsanitize=address and -fsanitize=kernel-address \"\n+              \"are incompatible with -fsanitize=thread\");\n }\n \n #define LEFT_COLUMN\t27\n@@ -1454,7 +1468,10 @@ common_handle_option (struct gcc_options *opts,\n \t      size_t len;\n \t    } spec[] =\n \t    {\n-\t      { \"address\", SANITIZE_ADDRESS, sizeof \"address\" - 1 },\n+\t      { \"address\", SANITIZE_ADDRESS | SANITIZE_USER_ADDRESS,\n+\t\tsizeof \"address\" - 1 },\n+\t      { \"kernel-address\", SANITIZE_ADDRESS | SANITIZE_KERNEL_ADDRESS,\n+\t\tsizeof \"kernel-address\" - 1 },\n \t      { \"thread\", SANITIZE_THREAD, sizeof \"thread\" - 1 },\n \t      { \"leak\", SANITIZE_LEAK, sizeof \"leak\" - 1 },\n \t      { \"shift\", SANITIZE_SHIFT, sizeof \"shift\" - 1 },\n@@ -1520,6 +1537,25 @@ common_handle_option (struct gcc_options *opts,\n \t   the null pointer checks.  */\n \tif (flag_sanitize & SANITIZE_NULL)\n \t  opts->x_flag_delete_null_pointer_checks = 0;\n+\n+\t/* Kernel ASan implies normal ASan but does not yet support\n+\t   all features.  */\n+\tif (flag_sanitize & SANITIZE_KERNEL_ADDRESS)\n+\t  {\n+\t    maybe_set_param_value (PARAM_ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD, 0,\n+\t\t\t\t   opts->x_param_values,\n+\t\t\t\t   opts_set->x_param_values);\n+\t    maybe_set_param_value (PARAM_ASAN_GLOBALS, 0,\n+\t\t\t\t   opts->x_param_values,\n+\t\t\t\t   opts_set->x_param_values);\n+\t    maybe_set_param_value (PARAM_ASAN_STACK, 0,\n+\t\t\t\t   opts->x_param_values,\n+\t\t\t\t   opts_set->x_param_values);\n+\t    maybe_set_param_value (PARAM_ASAN_USE_AFTER_RETURN, 0,\n+\t\t\t\t   opts->x_param_values,\n+\t\t\t\t   opts_set->x_param_values);\n+\t  }\n+\n \tbreak;\n       }\n "}, {"sha": "88d48c2d68844bbe5b50ec497bb91cede2d3c2a0", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec4842dee0f49ce7db1f472cb0b18227b489271/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fec4842dee0f49ce7db1f472cb0b18227b489271", "patch": "@@ -1555,9 +1555,18 @@ process_options (void)\n     warn_stack_protect = 0;\n \n   /* Address Sanitizer needs porting to each target architecture.  */\n+\n   if ((flag_sanitize & SANITIZE_ADDRESS)\n-      && (targetm.asan_shadow_offset == NULL\n-\t  || !FRAME_GROWS_DOWNWARD))\n+      && !FRAME_GROWS_DOWNWARD)\n+    {\n+      warning (0,\n+\t       \"-fsanitize=address and -fsanitize=kernel-address \"\n+\t       \"are not supported for this target\");\n+      flag_sanitize &= ~SANITIZE_ADDRESS;\n+    }\n+\n+  if ((flag_sanitize & SANITIZE_USER_ADDRESS)\n+      && targetm.asan_shadow_offset == NULL)\n     {\n       warning (0, \"-fsanitize=address not supported for this target\");\n       flag_sanitize &= ~SANITIZE_ADDRESS;"}]}