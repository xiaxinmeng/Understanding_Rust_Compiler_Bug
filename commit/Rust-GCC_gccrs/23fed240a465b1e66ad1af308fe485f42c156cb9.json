{"sha": "23fed240a465b1e66ad1af308fe485f42c156cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmZWQyNDBhNDY1YjFlNjZhZDFhZjMwOGZlNDg1ZjQyYzE1NmNiOQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2006-01-13T03:34:40Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2006-01-13T03:34:40Z"}, "message": "shift.md: Rewrite...\n\n* config/m32c/shift.md: Rewrite: Allow arbitrary operands for\nshift counts, separate SI shifts for m32c vs m16c, pass shift type\nso that constant shifts can be split.\n* config/m32c/m32c.c (m32c_const_ok_for_constraint_p): Add In6.\n(m32c_valid_pointer_mode): Make static.\n(shift_gen_func_for): New.\n(m32c_prepare_shift): Use it.  Split large const shifts into\nmultiple shifts.\n* config/m32c/predicates.md (shiftcount_operand): Allow more\ngeneral operands.\n(longshiftcount_operand): New.\n* doc/md.texi (Machine Constraints): Document In6.\n\nFrom-SVN: r109661", "tree": {"sha": "9e1c2623ec284bf054eb8d2b3113f0d0a8aa724d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1c2623ec284bf054eb8d2b3113f0d0a8aa724d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23fed240a465b1e66ad1af308fe485f42c156cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fed240a465b1e66ad1af308fe485f42c156cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fed240a465b1e66ad1af308fe485f42c156cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fed240a465b1e66ad1af308fe485f42c156cb9/comments", "author": null, "committer": null, "parents": [{"sha": "dadb213fd1d7a25235ac92656e451b0fe189ecc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadb213fd1d7a25235ac92656e451b0fe189ecc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dadb213fd1d7a25235ac92656e451b0fe189ecc5"}], "stats": {"total": 224, "additions": 163, "deletions": 61}, "files": [{"sha": "4da37fd4f6867422efef4682408ae76a9b425a39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23fed240a465b1e66ad1af308fe485f42c156cb9", "patch": "@@ -1,3 +1,18 @@\n+2006-01-12  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/shift.md: Rewrite: Allow arbitrary operands for\n+\tshift counts, separate SI shifts for m32c vs m16c, pass shift type\n+\tso that constant shifts can be split.\n+\t* config/m32c/m32c.c (m32c_const_ok_for_constraint_p): Add In6.\n+\t(m32c_valid_pointer_mode): Make static.\n+\t(shift_gen_func_for): New.\n+\t(m32c_prepare_shift): Use it.  Split large const shifts into\n+\tmultiple shifts.\n+\t* config/m32c/predicates.md (shiftcount_operand): Allow more\n+\tgeneral operands.\n+\t(longshiftcount_operand): New.\n+\t* doc/md.texi (Machine Constraints): Document In6.\n+\n 2006-01-13  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/tm.texi (Data Output): Add REAL_VALUE_TO_TARGET_DECIMAL32,"}, {"sha": "24b7fffb598f2039536d8be58dd00133d0ff6ee6", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=23fed240a465b1e66ad1af308fe485f42c156cb9", "patch": "@@ -901,6 +901,10 @@ m32c_const_ok_for_constraint_p (HOST_WIDE_INT value,\n     {\n       return (-16 <= value && value && value <= 16);\n     }\n+  if (memcmp (str, \"In6\", 3) == 0)\n+    {\n+      return (-32 <= value && value && value <= 32);\n+    }\n   if (memcmp (str, \"IM2\", 3) == 0)\n     {\n       return (-65536 <= value && value && value <= -1);\n@@ -1505,7 +1509,7 @@ m32c_function_arg_regno_p (int r)\n    for some opcodes in R8C/M16C and for reset vectors and such.  */\n #undef TARGET_VALID_POINTER_MODE\n #define TARGET_VALID_POINTER_MODE m32c_valid_pointer_mode\n-bool\n+static bool\n m32c_valid_pointer_mode (enum machine_mode mode)\n {\n   if (mode == HImode\n@@ -2834,27 +2838,63 @@ m32c_split_move (rtx * operands, enum machine_mode mode, int split_all)\n   return rv;\n }\n \n+typedef rtx (*shift_gen_func)(rtx, rtx, rtx);\n+\n+static shift_gen_func\n+shift_gen_func_for (int mode, int code)\n+{\n+#define GFF(m,c,f) if (mode == m && code == c) return f\n+  GFF(QImode,  ASHIFT,   gen_ashlqi3_i);\n+  GFF(QImode,  ASHIFTRT, gen_ashrqi3_i);\n+  GFF(QImode,  LSHIFTRT, gen_lshrqi3_i);\n+  GFF(HImode,  ASHIFT,   gen_ashlhi3_i);\n+  GFF(HImode,  ASHIFTRT, gen_ashrhi3_i);\n+  GFF(HImode,  LSHIFTRT, gen_lshrhi3_i);\n+  GFF(PSImode, ASHIFT,   gen_ashlpsi3_i);\n+  GFF(PSImode, ASHIFTRT, gen_ashrpsi3_i);\n+  GFF(PSImode, LSHIFTRT, gen_lshrpsi3_i);\n+  GFF(SImode,  ASHIFT,   TARGET_A16 ? gen_ashlsi3_16 : gen_ashlsi3_24);\n+  GFF(SImode,  ASHIFTRT, TARGET_A16 ? gen_ashrsi3_16 : gen_ashrsi3_24);\n+  GFF(SImode,  LSHIFTRT, TARGET_A16 ? gen_lshrsi3_16 : gen_lshrsi3_24);\n+#undef GFF\n+}\n+\n /* The m32c only has one shift, but it takes a signed count.  GCC\n    doesn't want this, so we fake it by negating any shift count when\n    we're pretending to shift the other way.  */\n int\n-m32c_prepare_shift (rtx * operands, int scale, int bits)\n+m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n {\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+  shift_gen_func func = shift_gen_func_for (mode, shift_code);\n   rtx temp;\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && INTVAL (operands[2]) <= (1 << (bits - 1))\n-      && INTVAL (operands[2]) >= -(1 << (bits - 1)))\n+\n+  if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      operands[2] = GEN_INT (scale * INTVAL (operands[2]));\n-      return 0;\n+      int maxc = TARGET_A24 && (mode == PSImode || mode == SImode) ? 32 : 8;\n+      int count = INTVAL (operands[2]) * scale;\n+\n+      while (count > maxc)\n+\t{\n+\t  temp = gen_reg_rtx (mode);\n+\t  emit_insn (func (temp, operands[1], GEN_INT (maxc)));\n+\t  operands[1] = temp;\n+\t  count -= maxc;\n+\t}\n+      while (count < -maxc)\n+\t{\n+\t  temp = gen_reg_rtx (mode);\n+\t  emit_insn (func (temp, operands[1], GEN_INT (-maxc)));\n+\t  operands[1] = temp;\n+\t  count += maxc;\n+\t}\n+      emit_insn (func (operands[0], operands[1], GEN_INT (count)));\n+      return 1;\n     }\n   if (scale < 0)\n     {\n       temp = gen_reg_rtx (QImode);\n-      if (GET_CODE (operands[2]) == CONST_INT)\n-\ttemp = GEN_INT (-INTVAL (operands[2]));\n-      else\n-\temit_move_insn (temp, gen_rtx_NEG (QImode, operands[2]));\n+      emit_move_insn (temp, gen_rtx_NEG (QImode, operands[2]));\n     }\n   else\n     temp = operands[2];"}, {"sha": "c3b44b812d0474af688ae93385263a5590236744", "filename": "gcc/config/m32c/predicates.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fconfig%2Fm32c%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fconfig%2Fm32c%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fpredicates.md?ref=23fed240a465b1e66ad1af308fe485f42c156cb9", "patch": "@@ -145,9 +145,13 @@\n ; TRUE if we can shift by this amount.  Constant shift counts have a\n ; limited range.\n (define_predicate \"shiftcount_operand\"\n-  (ior (match_operand 0 \"m32c_pseudo\" \"\")\n+  (ior (match_operand 0 \"mra_operand\" \"\")\n        (and (match_operand 2 \"const_int_operand\" \"\")\n \t    (match_test \"-8 <= INTVAL (op) && INTVAL (op) && INTVAL (op) <= 8\"))))\n+(define_predicate \"longshiftcount_operand\"\n+  (ior (match_operand 0 \"mra_operand\" \"\")\n+       (and (match_operand 2 \"const_int_operand\" \"\")\n+\t    (match_test \"-32 <= INTVAL (op) && INTVAL (op) && INTVAL (op) <= 32\"))))\n \n ; TRUE for r0..r3, a0..a1, or sp.\n (define_predicate \"mra_or_sp_operand\""}, {"sha": "3e07b25c5edf7901606a26a39f6e4a2bb5c9e8e2", "filename": "gcc/config/m32c/shift.md", "status": "modified", "additions": 90, "deletions": 47, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fconfig%2Fm32c%2Fshift.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fconfig%2Fm32c%2Fshift.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fshift.md?ref=23fed240a465b1e66ad1af308fe485f42c156cb9", "patch": "@@ -33,34 +33,34 @@\n (define_insn \"ashlqi3_i\"\n   [(set (match_operand:QI 0 \"mra_operand\" \"=RqiSd*Rmm,RqiSd*Rmm\")\n \t(ashift:QI (match_operand:QI 1 \"mra_operand\" \"0,0\")\n-\t\t   (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\")))\n+\t\t   (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\")))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"\"\n   \"@\n    sha.b\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.b\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.b\\tr1h,%0\"\n   )\n \n (define_insn \"ashrqi3_i\"\n   [(set (match_operand:QI 0 \"mra_operand\" \"=RqiSd*Rmm,RqiSd*Rmm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"mra_operand\" \"0,0\")\n-\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"\"\n   \"@\n    sha.b\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.b\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.b\\tr1h,%0\"\n   )\n \n-(define_insn \"lshlqi3_i\"\n+(define_insn \"lshrqi3_i\"\n   [(set (match_operand:QI 0 \"mra_operand\" \"=RqiSd*Rmm,RqiSd*Rmm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"mra_operand\" \"0,0\")\n-\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"\"\n   \"@\n    shl.b\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tshl.b\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tshl.b\\tr1h,%0\"\n   )\n \n \n@@ -70,7 +70,7 @@\n \t\t   (match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, 1, 4))\n+  \"if (m32c_prepare_shift (operands, 1, ASHIFT))\n      DONE;\"\n   )\n \n@@ -80,7 +80,7 @@\n \t\t     (neg:QI (match_operand:QI 2 \"general_operand\" \"\"))))\n    (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, ASHIFTRT))\n      DONE;\"\n   )\n \n@@ -90,7 +90,7 @@\n \t\t\t\t(neg:QI (match_operand:QI 2 \"general_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, LSHIFTRT))\n      DONE;\"\n   )\n \n@@ -99,34 +99,34 @@\n (define_insn \"ashlhi3_i\"\n   [(set (match_operand:HI 0 \"mra_operand\" \"=SdRhi*Rmm,SdRhi*Rmm\")\n \t(ashift:HI (match_operand:HI 1 \"mra_operand\" \"0,0\")\n-\t\t   (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\")))\n+\t\t   (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\")))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"\"\n   \"@\n    sha.w\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.w\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.w\\tr1h,%0\"\n   )\n \n (define_insn \"ashrhi3_i\"\n   [(set (match_operand:HI 0 \"mra_operand\" \"=SdRhi*Rmm,SdRhi*Rmm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"mra_operand\" \"0,0\")\n-\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"\"\n   \"@\n    sha.w\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.w\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.w\\tr1h,%0\"\n   )\n \n-(define_insn \"lshlhi3_i\"\n+(define_insn \"lshrhi3_i\"\n   [(set (match_operand:HI 0 \"mra_operand\" \"=RhiSd*Rmm,RhiSd*Rmm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"mra_operand\" \"0,0\")\n-\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"\"\n   \"@\n    shl.w\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tshl.w\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tshl.w\\tr1h,%0\"\n   )\n \n \n@@ -136,7 +136,7 @@\n \t\t\t      (match_operand:QI 2 \"general_operand\" \"\")))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, 1, 4))\n+  \"if (m32c_prepare_shift (operands, 1, ASHIFT))\n      DONE;\"\n   )\n \n@@ -146,7 +146,7 @@\n \t\t\t\t(neg:QI (match_operand:QI 2 \"general_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, ASHIFTRT))\n      DONE;\"\n   )\n \n@@ -156,7 +156,7 @@\n \t\t\t\t(neg:QI (match_operand:QI 2 \"general_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, LSHIFTRT))\n      DONE;\"\n   )\n \n@@ -169,34 +169,34 @@\n (define_insn \"ashlpsi3_i\"\n   [(set (match_operand:PSI 0 \"mra_operand\" \"=R02RaaSd*Rmm,R02RaaSd*Rmm\")\n \t(ashift:PSI (match_operand:PSI 1 \"mra_operand\" \"0,0\")\n-\t\t    (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\")))\n+\t\t    (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\")))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"TARGET_A24\"\n   \"@\n    sha.l\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.l\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n   )\n \n (define_insn \"ashrpsi3_i\"\n   [(set (match_operand:PSI 0 \"mra_operand\" \"=R02RaaSd*Rmm,R02RaaSd*Rmm\")\n \t(ashiftrt:PSI (match_operand:PSI 1 \"mra_operand\" \"0,0\")\n-\t\t      (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t      (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"TARGET_A24\"\n   \"@\n    sha.l\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.l\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n   )\n \n-(define_insn \"lshlpsi3_i\"\n+(define_insn \"lshrpsi3_i\"\n   [(set (match_operand:PSI 0 \"mra_operand\" \"=R02RaaSd,??Rmm\")\n \t(lshiftrt:PSI (match_operand:PSI 1 \"mra_operand\" \"0,0\")\n-\t\t      (neg:QI (match_operand:QI 2 \"shiftcount_operand\" \"In4,R1w\"))))\n+\t\t      (neg:QI (match_operand:QI 2 \"shiftcount_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n   \"TARGET_A24\"\n   \"@\n    shl.l\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tshl.l\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tshl.l\\tr1h,%0\"\n   )\n \n \n@@ -206,7 +206,7 @@\n \t\t\t       (match_operand:QI 2 \"mrai_operand\" \"\")))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"TARGET_A24\"\n-  \"if (m32c_prepare_shift (operands, 1, 4))\n+  \"if (m32c_prepare_shift (operands, 1, ASHIFT))\n      DONE;\"\n   )\n \n@@ -216,7 +216,7 @@\n \t\t\t\t (neg:QI (match_operand:QI 2 \"mrai_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"TARGET_A24\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, ASHIFTRT))\n      DONE;\"\n   )\n \n@@ -226,55 +226,98 @@\n \t\t\t\t (neg:QI (match_operand:QI 2 \"mrai_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"TARGET_A24\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, LSHIFTRT))\n      DONE;\"\n   )\n \n ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n \n+; The m16c has a maximum shift count of -16..16, even when in a\n+; register.  It's optimal to use multiple shifts of -8..8 rather than\n+; loading larger constants into R1H multiple time.  The m32c can shift\n+; -32..32 either via immediates or in registers.  Hence, separate\n+; patterns.\n \n \n-(define_insn \"ashlsi3_i\"\n+(define_insn \"ashlsi3_16\"\n   [(set (match_operand:SI 0 \"r0123_operand\" \"=R03,R03\")\n \t(ashift:SI (match_operand:SI 1 \"r0123_operand\" \"0,0\")\n-\t\t   (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\")))\n+\t\t   (match_operand:QI 2 \"shiftcount_operand\" \"In4,RqiSd\")))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n-  \"\"\n+  \"TARGET_A16\"\n   \"@\n    sha.l\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.l\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n+  [(set_attr \"flags\" \"sz,sz\")]\n   )\n \n-(define_insn \"ashrsi3_i\"\n+(define_insn \"ashrsi3_16\"\n   [(set (match_operand:SI 0 \"r0123_operand\" \"=R03,R03\")\n \t(ashiftrt:SI (match_operand:SI 1 \"r0123_operand\" \"0,0\")\n-\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t     (neg:QI (match_operand:QI 2 \"shiftcount_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n-  \"\"\n+  \"TARGET_A16\"\n   \"@\n    sha.l\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tsha.l\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n   )\n \n-(define_insn \"lshlsi3_i\"\n+(define_insn \"lshrsi3_16\"\n   [(set (match_operand:SI 0 \"r0123_operand\" \"=R03,R03\")\n \t(lshiftrt:SI (match_operand:SI 1 \"r0123_operand\" \"0,0\")\n-\t\t     (neg:QI (match_operand:QI 2 \"mrai_operand\" \"In4,R1w\"))))\n+\t\t     (neg:QI (match_operand:QI 2 \"shiftcount_operand\" \"In4,RqiSd\"))))\n    (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n-  \"\"\n+  \"TARGET_A16\"\n   \"@\n    shl.l\\t%2,%0\n-   mov.b\\tr1l,r1h\\n\\tshl.l\\tr1h,%0\"\n+   mov.b\\t%2,r1h\\n\\tshl.l\\tr1h,%0\"\n+  )\n+\n+\n+\n+(define_insn \"ashlsi3_24\"\n+  [(set (match_operand:SI 0 \"r0123_operand\" \"=R03,R03\")\n+\t(ashift:SI (match_operand:SI 1 \"r0123_operand\" \"0,0\")\n+\t\t   (match_operand:QI 2 \"longshiftcount_operand\" \"In6,RqiSd\")))\n+   (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n+  \"TARGET_A24\"\n+  \"@\n+   sha.l\\t%2,%0\n+   mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n   )\n \n+(define_insn \"ashrsi3_24\"\n+  [(set (match_operand:SI 0 \"r0123_operand\" \"=R03,R03\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"r0123_operand\" \"0,0\")\n+\t\t     (neg:QI (match_operand:QI 2 \"longshiftcount_operand\" \"In6,RqiSd\"))))\n+   (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n+  \"TARGET_A24\"\n+  \"@\n+   sha.l\\t%2,%0\n+   mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n+  )\n+\n+(define_insn \"lshrsi3_24\"\n+  [(set (match_operand:SI 0 \"r0123_operand\" \"=R03,R03\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"r0123_operand\" \"0,0\")\n+\t\t     (neg:QI (match_operand:QI 2 \"longshiftcount_operand\" \"In6,RqiSd\"))))\n+   (clobber (match_scratch:HI 3 \"=X,R1w\"))]\n+  \"TARGET_A24\"\n+  \"@\n+   shl.l\\t%2,%0\n+   mov.b\\t%2,r1h\\n\\tshl.l\\tr1h,%0\"\n+  )\n+\n+\n+\n \n (define_expand \"ashlsi3\"\n   [(parallel [(set (match_operand:SI 0 \"r0123_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"r0123_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"mrai_operand\" \"\")))\n+\t\t   (ashift:SI (match_operand:SI 1 \"r0123_operand\" \"\")\n+\t\t\t      (match_operand:QI 2 \"mrai_operand\" \"\")))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, 1, 4))\n+  \"if (m32c_prepare_shift (operands, 1, ASHIFT))\n      DONE;\"\n   )\n \n@@ -284,7 +327,7 @@\n \t\t\t\t(neg:QI (match_operand:QI 2 \"mrai_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, -1, 4))\n+  \"if (m32c_prepare_shift (operands, -1, ASHIFTRT))\n      DONE;\"\n   )\n \n@@ -294,6 +337,6 @@\n \t\t\t\t(neg:QI (match_operand:QI 2 \"mrai_operand\" \"\"))))\n \t      (clobber (match_scratch:HI 3 \"\"))])]\n   \"\"\n-  \"if (m32c_prepare_shift (operands, -1, 5))\n+  \"if (m32c_prepare_shift (operands, -1, LSHIFTRT))\n      DONE;\"\n   )"}, {"sha": "90efcc34a1580f0190dcbb0cd51f0443793d917f", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23fed240a465b1e66ad1af308fe485f42c156cb9/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=23fed240a465b1e66ad1af308fe485f42c156cb9", "patch": "@@ -2323,8 +2323,8 @@ Used to match function return values.\n @item In5\n -16 @dots{} -1 or 1 @dots{} 16\n \n-@item In4\n--8 @dots{} -1 or 1 @dots{} 8\n+@item In6\n+-32 @dots{} -1 or 1 @dots{} 32\n \n @item IM2\n -65536 @dots{} -1"}]}