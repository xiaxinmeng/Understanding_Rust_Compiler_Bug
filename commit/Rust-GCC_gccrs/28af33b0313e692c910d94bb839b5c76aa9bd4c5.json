{"sha": "28af33b0313e692c910d94bb839b5c76aa9bd4c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhZjMzYjAzMTNlNjkyYzkxMGQ5NGJiODM5YjVjNzZhYTliZDRjNQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-03-31T15:21:30Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-03-31T15:21:30Z"}, "message": "loop-iv.c (determine_max_iter): New arg OLD_NITER.\n\n\t* loop-iv.c (determine_max_iter): New arg OLD_NITER.  All callers\n\tchanged.  Use this when trying to improve the upper bound.\n\tGenerate the comparison by using simplify_gen_relational.\n\nFrom-SVN: r145354", "tree": {"sha": "4ce5df489c1a18e936be58bd5d8dd2be412323bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce5df489c1a18e936be58bd5d8dd2be412323bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28af33b0313e692c910d94bb839b5c76aa9bd4c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28af33b0313e692c910d94bb839b5c76aa9bd4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28af33b0313e692c910d94bb839b5c76aa9bd4c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28af33b0313e692c910d94bb839b5c76aa9bd4c5/comments", "author": null, "committer": null, "parents": [{"sha": "1d1eb80cf6d7d4ef999bc3a3024fd49aab88f92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1eb80cf6d7d4ef999bc3a3024fd49aab88f92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1eb80cf6d7d4ef999bc3a3024fd49aab88f92b"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "d060adfe63829a9ddc7003b877a9c7f8362f2e39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28af33b0313e692c910d94bb839b5c76aa9bd4c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28af33b0313e692c910d94bb839b5c76aa9bd4c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28af33b0313e692c910d94bb839b5c76aa9bd4c5", "patch": "@@ -19,6 +19,10 @@\n \t(LTU (PLUS a C) C) or (LTU (PLUS a C) a) to (GEU a -C); likewise with\n \tGEU/LTU reversed.\n \n+\t* loop-iv.c (determine_max_iter): New arg OLD_NITER.  All callers\n+\tchanged.  Use this when trying to improve the upper bound.\n+\tGenerate the comparison by using simplify_gen_relational.\n+\n 2009-03-31  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n         PR target/27237"}, {"sha": "9b35b88821012d728155d982b2c81d8093450cfd", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28af33b0313e692c910d94bb839b5c76aa9bd4c5/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28af33b0313e692c910d94bb839b5c76aa9bd4c5/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=28af33b0313e692c910d94bb839b5c76aa9bd4c5", "patch": "@@ -2114,10 +2114,13 @@ canonicalize_iv_subregs (struct rtx_iv *iv0, struct rtx_iv *iv1,\n   return true;\n }\n \n-/* Tries to estimate the maximum number of iterations.  */\n+/* Tries to estimate the maximum number of iterations in LOOP, and store the\n+   result in DESC.  This function is called from iv_number_of_iterations with\n+   a number of fields in DESC already filled in.  OLD_NITER is the original\n+   expression for the number of iterations, before we tried to simplify it.  */\n \n static unsigned HOST_WIDEST_INT\n-determine_max_iter (struct loop *loop, struct niter_desc *desc)\n+determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n {\n   rtx niter = desc->niter_expr;\n   rtx mmin, mmax, cmp;\n@@ -2152,7 +2155,8 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc)\n \n   /* We could use a binary search here, but for now improving the upper\n      bound by just one eliminates one important corner case.  */\n-  cmp = gen_rtx_fmt_ee (desc->signed_p ? LT : LTU, VOIDmode, niter, mmax);\n+  cmp = simplify_gen_relational (desc->signed_p ? LT : LTU, VOIDmode,\n+\t\t\t\t desc->mode, old_niter, mmax);\n   simplify_using_initial_values (loop, UNKNOWN, &cmp);\n   if (cmp == const_true_rtx)\n     {\n@@ -2683,7 +2687,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n   else\n     {\n       if (!desc->niter_max)\n-\tdesc->niter_max = determine_max_iter (loop, desc);\n+\tdesc->niter_max = determine_max_iter (loop, desc, old_niter);\n \n       /* simplify_using_initial_values does a copy propagation on the registers\n \t in the expression for the number of iterations.  This prolongs life"}]}