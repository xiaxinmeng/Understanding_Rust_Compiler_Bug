{"sha": "6e00d9bb113b531be15bc71cad2f1742648ba18a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwMGQ5YmIxMTNiNTMxYmUxNWJjNzFjYWQyZjE3NDI2NDhiYTE4YQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-30T14:59:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-30T14:59:20Z"}, "message": "libstdc++: Implement P2367 changes to avoid some list-initialization\n\nThis implements the wording changes of P2367R0 \"Remove misuses of\nlist-initialization from Clause 24\", modulo the parts that depend\non P1739R4 which we don't yet implement (due to LWG 3407).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_util.h (subrange::subrange): Avoid\n\tlist-initialization in delegating constructor.\n\t* include/std/ranges (single_view): Replace implicit guide\n\twith explicit deduction guide that decays its argument.\n\t(_Single::operator()): Avoid CTAD when constructing the\n\tsingle_view object.\n\t(_Iota::operator()): Avoid list-initialization.\n\t(__detail::__can_filter_view, _Filter::operator()): Likewise.\n\t(__detail::__can_transform_view, _Transform::operator()): Likewise.\n\t(take_view::begin): Likewise.\n\t(__detail::__can_take_view, _Take::operator()): Likewise.\n\t(__detail::__can_take_while_view, _TakeWhile::operator()): Likewise.\n\t(__detail::__can_drop_view, _Drop::operator()): Likewise.\n\t(__detail::__can_drop_while_view, _DropWhile::operator()): Likewise.\n\t(split_view::split_view): Use views::single when initializing\n\t_M_pattern.\n\t(__detail::__can_split_view, _Split::operator()): Avoid\n\tlist-initialization.\n\t(_Counted::operator()): Likewise.\n\t* testsuite/std/ranges/p2367.cc: New test.", "tree": {"sha": "17ca905a33f0f0236405808eb61d6116076f4efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17ca905a33f0f0236405808eb61d6116076f4efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e00d9bb113b531be15bc71cad2f1742648ba18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e00d9bb113b531be15bc71cad2f1742648ba18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e00d9bb113b531be15bc71cad2f1742648ba18a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e00d9bb113b531be15bc71cad2f1742648ba18a/comments", "author": null, "committer": null, "parents": [{"sha": "47915ef8477569b2fbd8001996aa4e542284bb24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47915ef8477569b2fbd8001996aa4e542284bb24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47915ef8477569b2fbd8001996aa4e542284bb24"}], "stats": {"total": 105, "additions": 78, "deletions": 27}, "files": [{"sha": "589886eb15752ec817e675f55bb391871ce88c82", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00d9bb113b531be15bc71cad2f1742648ba18a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00d9bb113b531be15bc71cad2f1742648ba18a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=6e00d9bb113b531be15bc71cad2f1742648ba18a", "patch": "@@ -251,7 +251,7 @@ namespace ranges\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n \tsubrange(_Rng&& __r) requires (!_S_store_size)\n-\t: subrange{ranges::begin(__r), ranges::end(__r)}\n+\t: subrange(ranges::begin(__r), ranges::end(__r))\n \t{ }\n \n       template<borrowed_range _Rng>"}, {"sha": "73d3e008a462798ab09cb7154d4a94e3b2ff9b46", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00d9bb113b531be15bc71cad2f1742648ba18a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00d9bb113b531be15bc71cad2f1742648ba18a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=6e00d9bb113b531be15bc71cad2f1742648ba18a", "patch": "@@ -246,6 +246,9 @@ namespace ranges\n       [[no_unique_address]] __detail::__box<_Tp> _M_value;\n     };\n \n+  template<typename _Tp>\n+    single_view(_Tp) -> single_view<_Tp>;\n+\n   namespace __detail\n   {\n     template<typename _Wp>\n@@ -597,7 +600,7 @@ namespace views\n     template<typename _Tp>\n       constexpr auto\n       operator()(_Tp&& __e) const\n-      { return single_view{std::forward<_Tp>(__e)}; }\n+      { return single_view<decay_t<_Tp>>(std::forward<_Tp>(__e)); }\n   };\n \n   inline constexpr _Single single{};\n@@ -607,12 +610,12 @@ namespace views\n     template<typename _Tp>\n       constexpr auto\n       operator()(_Tp&& __e) const\n-      { return iota_view{std::forward<_Tp>(__e)}; }\n+      { return iota_view(std::forward<_Tp>(__e)); }\n \n     template<typename _Tp, typename _Up>\n       constexpr auto\n       operator()(_Tp&& __e, _Up&& __f) const\n-      { return iota_view{std::forward<_Tp>(__e), std::forward<_Up>(__f)}; }\n+      { return iota_view(std::forward<_Tp>(__e), std::forward<_Up>(__f)); }\n   };\n \n   inline constexpr _Iota iota{};\n@@ -1336,7 +1339,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Pred>\n \tconcept __can_filter_view\n-\t  = requires { filter_view{std::declval<_Range>(), std::declval<_Pred>()}; };\n+\t  = requires { filter_view(std::declval<_Range>(), std::declval<_Pred>()); };\n     } // namespace __detail\n \n     struct _Filter : __adaptor::_RangeAdaptor<_Filter>\n@@ -1346,7 +1349,7 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n \t{\n-\t  return filter_view{std::forward<_Range>(__r), std::forward<_Pred>(__p)};\n+\t  return filter_view(std::forward<_Range>(__r), std::forward<_Pred>(__p));\n \t}\n \n       using _RangeAdaptor<_Filter>::operator();\n@@ -1717,7 +1720,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Fp>\n \tconcept __can_transform_view\n-\t  = requires { transform_view{std::declval<_Range>(), std::declval<_Fp>()}; };\n+\t  = requires { transform_view(std::declval<_Range>(), std::declval<_Fp>()); };\n     } // namespace __detail\n \n     struct _Transform : __adaptor::_RangeAdaptor<_Transform>\n@@ -1727,7 +1730,7 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Fp&& __f) const\n \t{\n-\t  return transform_view{std::forward<_Range>(__r), std::forward<_Fp>(__f)};\n+\t  return transform_view(std::forward<_Range>(__r), std::forward<_Fp>(__f));\n \t}\n \n       using _RangeAdaptor<_Transform>::operator();\n@@ -1813,11 +1816,11 @@ namespace views::__adaptor\n \t    else\n \t      {\n \t\tauto __sz = size();\n-\t\treturn counted_iterator{ranges::begin(_M_base), __sz};\n+\t\treturn counted_iterator(ranges::begin(_M_base), __sz);\n \t      }\n \t  }\n \telse\n-\t  return counted_iterator{ranges::begin(_M_base), _M_count};\n+\t  return counted_iterator(ranges::begin(_M_base), _M_count);\n       }\n \n       constexpr auto\n@@ -1830,11 +1833,11 @@ namespace views::__adaptor\n \t    else\n \t      {\n \t\tauto __sz = size();\n-\t\treturn counted_iterator{ranges::begin(_M_base), __sz};\n+\t\treturn counted_iterator(ranges::begin(_M_base), __sz);\n \t      }\n \t  }\n \telse\n-\t  return counted_iterator{ranges::begin(_M_base), _M_count};\n+\t  return counted_iterator(ranges::begin(_M_base), _M_count);\n       }\n \n       constexpr auto\n@@ -1897,7 +1900,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Tp>\n \tconcept __can_take_view\n-\t  = requires { take_view{std::declval<_Range>(), std::declval<_Tp>()}; };\n+\t  = requires { take_view(std::declval<_Range>(), std::declval<_Tp>()); };\n     } // namespace __detail\n \n     struct _Take : __adaptor::_RangeAdaptor<_Take>\n@@ -1907,7 +1910,7 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Tp&& __n) const\n \t{\n-\t  return take_view{std::forward<_Range>(__r), std::forward<_Tp>(__n)};\n+\t  return take_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n \t}\n \n       using _RangeAdaptor<_Take>::operator();\n@@ -2016,7 +2019,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Pred>\n \tconcept __can_take_while_view\n-\t  = requires { take_while_view{std::declval<_Range>(), std::declval<_Pred>()}; };\n+\t  = requires { take_while_view(std::declval<_Range>(), std::declval<_Pred>()); };\n     } // namespace __detail\n \n     struct _TakeWhile : __adaptor::_RangeAdaptor<_TakeWhile>\n@@ -2026,7 +2029,7 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n \t{\n-\t  return take_while_view{std::forward<_Range>(__r), std::forward<_Pred>(__p)};\n+\t  return take_while_view(std::forward<_Range>(__r), std::forward<_Pred>(__p));\n \t}\n \n       using _RangeAdaptor<_TakeWhile>::operator();\n@@ -2135,7 +2138,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Tp>\n \tconcept __can_drop_view\n-\t  = requires { drop_view{std::declval<_Range>(), std::declval<_Tp>()}; };\n+\t  = requires { drop_view(std::declval<_Range>(), std::declval<_Tp>()); };\n     } // namespace __detail\n \n     struct _Drop : __adaptor::_RangeAdaptor<_Drop>\n@@ -2145,7 +2148,7 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Tp&& __n) const\n \t{\n-\t  return drop_view{std::forward<_Range>(__r), std::forward<_Tp>(__n)};\n+\t  return drop_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n \t}\n \n       using _RangeAdaptor<_Drop>::operator();\n@@ -2217,7 +2220,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Pred>\n \tconcept __can_drop_while_view\n-\t  = requires { drop_while_view{std::declval<_Range>(), std::declval<_Pred>()}; };\n+\t  = requires { drop_while_view(std::declval<_Range>(), std::declval<_Pred>()); };\n     } // namespace __detail\n \n     struct _DropWhile : __adaptor::_RangeAdaptor<_DropWhile>\n@@ -2227,8 +2230,8 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pred&& __p) const\n \t{\n-\t  return drop_while_view{std::forward<_Range>(__r),\n-\t\t\t\t std::forward<_Pred>(__p)};\n+\t  return drop_while_view(std::forward<_Range>(__r),\n+\t\t\t\t std::forward<_Pred>(__p));\n \t}\n \n       using _RangeAdaptor<_DropWhile>::operator();\n@@ -2948,7 +2951,7 @@ namespace views::__adaptor\n \t  && constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n \tconstexpr\n \tsplit_view(_Range&& __r, range_value_t<_Range> __e)\n-\t  : _M_pattern(std::move(__e)),\n+\t  : _M_pattern(views::single(std::move(__e))),\n \t    _M_base(views::all(std::forward<_Range>(__r)))\n \t{ }\n \n@@ -3012,7 +3015,7 @@ namespace views::__adaptor\n     {\n       template<typename _Range, typename _Pattern>\n \tconcept __can_split_view\n-\t  = requires { split_view{std::declval<_Range>(), std::declval<_Pattern>()}; };\n+\t  = requires { split_view(std::declval<_Range>(), std::declval<_Pattern>()); };\n     } // namespace __detail\n \n     struct _Split : __adaptor::_RangeAdaptor<_Split>\n@@ -3022,7 +3025,7 @@ namespace views::__adaptor\n \tconstexpr auto\n \toperator()(_Range&& __r, _Pattern&& __f) const\n \t{\n-\t  return split_view{std::forward<_Range>(__r), std::forward<_Pattern>(__f)};\n+\t  return split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n \t}\n \n       using _RangeAdaptor<_Split>::operator();\n@@ -3041,10 +3044,10 @@ namespace views::__adaptor\n       operator()(_Iter __i, iter_difference_t<_Iter> __n) const\n       {\n \tif constexpr (random_access_iterator<_Iter>)\n-\t  return subrange{__i, __i + __n};\n+\t  return subrange(__i, __i + __n);\n \telse\n-\t  return subrange{counted_iterator{std::move(__i), __n},\n-\t\t\t  default_sentinel};\n+\t  return subrange(counted_iterator(std::move(__i), __n),\n+\t\t\t  default_sentinel);\n       }\n     };\n "}, {"sha": "40875233d887048712fd4a0810d8090b22c3b0a3", "filename": "libstdc++-v3/testsuite/std/ranges/p2367.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00d9bb113b531be15bc71cad2f1742648ba18a/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2367.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00d9bb113b531be15bc71cad2f1742648ba18a/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2367.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fp2367.cc?ref=6e00d9bb113b531be15bc71cad2f1742648ba18a", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Verify P2367 changes.\n+\n+#include <ranges>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+void\n+test01()\n+{\n+  extern int (&x)[5];\n+\n+  // Verify changes to views::single.\n+  using ranges::single_view;\n+  using std::same_as;\n+  same_as<single_view<int*>> auto v1 = views::single(x);\n+  same_as<single_view<int>> auto v2 = views::single((const int)5);\n+  same_as<single_view<single_view<int>>> auto v3 = views::single(v2);\n+\n+  // Verify changes to views::take.\n+  auto v4 = views::take(x, 0ull);\n+\n+  // Verify changes to views::drop.\n+  auto v5 = views::drop(x, 0ull);\n+\n+  // Verify changes to views::split.\n+  auto v6 = views::split(x, 5u);\n+}"}]}