{"sha": "be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwMzU1NTg1ZjBiNGNlNDFjZjcyMzAwZjNhMzAwMDhhMGI0ZmYzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:58:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:58:22Z"}, "message": "[multiple changes]\n\n2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* einfo.adb (Overridden_Operation): assert that\n\tfunction is called for valid arguments.\n\t* sem_aggr.adb, sem_ch3.adb, sem_ch5.adb, sem_type.adb,\n\ts-osinte-vxworks.ads, a-ngcefu.adb, sem_ch10.adb, einfo.ads,\n\tsem_prag.adb, sem_ch12.adb, sem.adb, i-cobol.ads, freeze.adb,\n\tsem_util.adb, a-chtgop.ads, s-rannum.adb, exp_ch6.adb, s-bignum.adb,\n\ts-osinte-freebsd.ads, par-ch5.adb, a-chtgbo.ads, a-cofove.adb:\n\tNo space after closing parenthesis except where required for\n\tlayout.\n\t* sem_res.adb: Minor reformatting.\n\n2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Case_Expression): Convert into a case\n\tstatement when relevant.\n\n2016-04-18  Bob Duff  <duff@adacore.com>\n\n\t* a-cuprqu.adb (Enqueue): Properly handle the\n\tcase where the new element has a unique priority.\n\n2016-04-18  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.h: Define stat structures and functions for iOS\n\tsimulator.\n\nFrom-SVN: r235146", "tree": {"sha": "101be37eb6b24b438927cbeac6c68bfcf9502723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101be37eb6b24b438927cbeac6c68bfcf9502723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/comments", "author": null, "committer": null, "parents": [{"sha": "9d4f98325184df9941460b962739d4457138bf86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4f98325184df9941460b962739d4457138bf86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4f98325184df9941460b962739d4457138bf86"}], "stats": {"total": 335, "additions": 225, "deletions": 110}, "files": [{"sha": "cc95c820b1342864a227e68859f14c0c9caaa776", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -1,3 +1,31 @@\n+2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.adb (Overridden_Operation): assert that\n+\tfunction is called for valid arguments.\n+\t* sem_aggr.adb, sem_ch3.adb, sem_ch5.adb, sem_type.adb,\n+\ts-osinte-vxworks.ads, a-ngcefu.adb, sem_ch10.adb, einfo.ads,\n+\tsem_prag.adb, sem_ch12.adb, sem.adb, i-cobol.ads, freeze.adb,\n+\tsem_util.adb, a-chtgop.ads, s-rannum.adb, exp_ch6.adb, s-bignum.adb,\n+\ts-osinte-freebsd.ads, par-ch5.adb, a-chtgbo.ads, a-cofove.adb:\n+\tNo space after closing parenthesis except where required for\n+\tlayout.\n+\t* sem_res.adb: Minor reformatting.\n+\n+2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Case_Expression): Convert into a case\n+\tstatement when relevant.\n+\n+2016-04-18  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cuprqu.adb (Enqueue): Properly handle the\n+\tcase where the new element has a unique priority.\n+\n+2016-04-18  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.h: Define stat structures and functions for iOS\n+\tsimulator.\n+\n 2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_res.adb (Resolve_Entry_Call): reset"}, {"sha": "184cefc4d83b961cb5ab2b3e7206d448e26114dc", "filename": "gcc/ada/a-chtgbo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-chtgbo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-chtgbo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.ads?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -81,7 +81,7 @@ package Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n \n    procedure Clear (HT : in out Hash_Table_Type'Class);\n    --  Deallocates each node in hash table HT. (Note that it only deallocates\n-   --  the nodes, not the buckets array.)  Program_Error is raised if the hash\n+   --  the nodes, not the buckets array.) Program_Error is raised if the hash\n    --  table is busy.\n \n    procedure Delete_Node_At_Index"}, {"sha": "1b865dcbd29f096c4aa8d4f2396a181e9c8146a7", "filename": "gcc/ada/a-chtgop.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-chtgop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-chtgop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.ads?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -107,7 +107,7 @@ package Ada.Containers.Hash_Tables.Generic_Operations is\n \n    procedure Clear (HT : in out Hash_Table_Type);\n    --  Deallocates each node in hash table HT. (Note that it only deallocates\n-   --  the nodes, not the buckets array.)  Program_Error is raised if the hash\n+   --  the nodes, not the buckets array.) Program_Error is raised if the hash\n    --  table is busy.\n \n    procedure Move (Target, Source : in out Hash_Table_Type);"}, {"sha": "529a73b9e25ad252d1ee8d889e506bf05a17cd79", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -95,7 +95,7 @@ is\n \n    procedure Append (Container : in out Vector; New_Item : Vector) is\n    begin\n-      for X in First_Index (New_Item) .. Last_Index (New_Item)  loop\n+      for X in First_Index (New_Item) .. Last_Index (New_Item) loop\n          Append (Container, Element (New_Item, X));\n       end loop;\n    end Append;\n@@ -119,7 +119,7 @@ is\n          raise Constraint_Error with \"vector is already at its maximum length\";\n       end if;\n \n-      --  TODO: should check whether length > max capacity (cnt_t'last)  ???\n+      --  TODO: should check whether length > max capacity (cnt_t'last) ???\n \n       Container.Last := Container.Last + 1;\n       Elems (Container) (Length (Container)) := New_Item;"}, {"sha": "5fb74cc098ff6639d81e8b4a093bf089fb8b5cf4", "filename": "gcc/ada/a-cuprqu.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-cuprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-cuprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -194,6 +194,15 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n             --  must update.\n \n             List.Header.Next_Unequal := Node;\n+\n+         elsif Before (Get_Priority (Prev.Element), P) then\n+\n+            --  If the new item inserted has a unique priority in queue (not\n+            --  same priority as precedent), set Next_Unequal of precedent\n+            --  element to the new element instead of old next element, since\n+            --  Before (P, Get_Priority (Next.Element) or Next = H).\n+\n+            Prev.Next_Unequal := Node;\n          end if;\n \n          pragma Assert (List.Header.Next_Unequal = List.Header.Next);"}, {"sha": "abe7e3dac6d1a765a8f4860aaee8e7fa00b9233c", "filename": "gcc/ada/a-ngcefu.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-ngcefu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fa-ngcefu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngcefu.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,7 +78,7 @@ package body Ada.Numerics.Generic_Complex_Elementary_Functions is\n       elsif Re (Left) = 0.0 and then Im (Left) = 0.0 then\n          return Left;\n \n-      elsif Right = (0.0, 0.0)  then\n+      elsif Right = (0.0, 0.0) then\n          return Complex_One;\n \n       elsif Re (Right) = 0.0 and then Im (Right) = 0.0 then\n@@ -417,7 +417,7 @@ package body Ada.Numerics.Generic_Complex_Elementary_Functions is\n    begin\n       return\n         Compose_From_Cartesian\n-          (Cos (Re (X))  * Cosh (Im (X)),\n+          (Cos (Re (X)) * Cosh (Im (X)),\n            -(Sin (Re (X)) * Sinh (Im (X))));\n    end Cos;\n "}, {"sha": "2559a31ea8455e9ca6179abcbacac2ae1c600480", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -67,6 +67,30 @@ extern \"C\" {\n #define GNAT_LSTAT lstat\n #define GNAT_STRUCT_STAT struct stat64\n \n+#elif defined(__APPLE__)\n+\n+# include <TargetConditionals.h>\n+\n+# if TARGET_IPHONE_SIMULATOR\n+  /* On iOS (simulator or not), the stat structure is the 64 bit one.\n+     But the simulator uses the MacOS X syscalls that aren't 64 bit.\n+     Fix this interfacing issue here.  */\n+    int fstat64(int, struct stat *);\n+    int stat64(const char *, struct stat *);\n+    int lstat64(const char *, struct stat *);\n+#   define GNAT_STAT stat64\n+#   define GNAT_FSTAT fstat64\n+#   define GNAT_LSTAT lstat64\n+# else\n+#   define GNAT_STAT stat\n+#   define GNAT_FSTAT fstat\n+#   define GNAT_LSTAT lstat\n+# endif\n+\n+#   define GNAT_FOPEN fopen\n+#   define GNAT_OPEN open\n+#   define GNAT_STRUCT_STAT struct stat\n+\n #else\n #define GNAT_FOPEN fopen\n #define GNAT_OPEN open"}, {"sha": "e0a9b174d076dec0d3bb5526f335e234c7bf4748", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -2365,13 +2365,13 @@ package body Einfo is\n \n    function Is_Predicate_Function (Id : E) return B is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Flag255 (Id);\n    end Is_Predicate_Function;\n \n    function Is_Predicate_Function_M (Id : E) return B is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       return Flag256 (Id);\n    end Is_Predicate_Function_M;\n \n@@ -2835,6 +2835,7 @@ package body Einfo is\n \n    function Overridden_Operation (Id : E) return E is\n    begin\n+      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n       return Node26 (Id);\n    end Overridden_Operation;\n \n@@ -5393,13 +5394,13 @@ package body Einfo is\n \n    procedure Set_Is_Predicate_Function (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Flag255 (Id, V);\n    end Set_Is_Predicate_Function;\n \n    procedure Set_Is_Predicate_Function_M (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind (Id) = E_Function or else Ekind (Id) = E_Procedure);\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Flag256 (Id, V);\n    end Set_Is_Predicate_Function_M;\n "}, {"sha": "e0b1f26d677a6c8ecce0af30af6845bf27886023", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -3385,7 +3385,7 @@ package Einfo is\n \n --    Needs_No_Actuals (Flag22)\n --       Defined in callable entities (subprograms, entries, access to\n---       subprograms)  which can be called without actuals because all of\n+--       subprograms) which can be called without actuals because all of\n --       their formals (if any) have default values. This flag simplifies the\n --       resolution of the syntactic ambiguity involving a call to these\n --       entities when the return type is an array type, and a call can be\n@@ -4471,15 +4471,15 @@ package Einfo is\n --  The flag Has_Delayed_Freeze indicates that an entity carries an explicit\n --  freeze node, which appears later in the expanded tree.\n \n---  a)   The flag is used by the front-end to trigger expansion actions\n+--  a) The flag is used by the front-end to trigger expansion actions\n --  which include the generation of that freeze node. Typically this happens at\n --  the end of the current compilation unit, or before the first subprogram\n --  body is encountered in the current unit. See files freeze and exp_ch13 for\n --  details on the actions triggered by a freeze node, which include the\n --  construction of initialization procedures and dispatch tables.\n \n --  b) The flag is used by the backend to defer elaboration of the entity until\n---  its freeze node is seen.  In the absence of an explicit freeze node, an\n+--  its freeze node is seen. In the absence of an explicit freeze node, an\n --  entity is frozen (and elaborated) at the point of declaration.\n \n --  For object declarations, the flag is set when an address clause for the"}, {"sha": "3a323b3840bea2ce58c57f3b95ded688d3ddf09b", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 117, "deletions": 65, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -4845,16 +4845,19 @@ package body Exp_Ch4 is\n    ------------------------------\n \n    procedure Expand_N_Case_Expression (N : Node_Id) is\n-      Loc     : constant Source_Ptr := Sloc (N);\n-      Typ     : constant Entity_Id  := Etype (N);\n-      Cstmt   : Node_Id;\n-      Decl    : Node_Id;\n-      Tnn     : Entity_Id;\n-      Pnn     : Entity_Id;\n-      Actions : List_Id;\n-      Ttyp    : Entity_Id;\n-      Alt     : Node_Id;\n-      Fexp    : Node_Id;\n+      Loc                  : constant Source_Ptr := Sloc (N);\n+      Typ                  : constant Entity_Id  := Etype (N);\n+      Acts                 : List_Id;\n+      Alt                  : Node_Id;\n+      Case_Stmt            : Node_Id;\n+      Decl                 : Node_Id;\n+      Expr                 : Node_Id;\n+      In_Predicate         : Boolean := False;\n+      Optimize_Return_Stmt : Boolean := False;\n+      Par                  : Node_Id;\n+      Ptr_Typ              : Entity_Id;\n+      Target               : Entity_Id;\n+      Target_Typ           : Entity_Id;\n \n    begin\n       --  Check for MINIMIZED/ELIMINATED overflow mode\n@@ -4870,10 +4873,13 @@ package body Exp_Ch4 is\n \n       if Ekind_In (Current_Scope, E_Function, E_Procedure)\n         and then Is_Predicate_Function (Current_Scope)\n-        and then\n-          Has_Static_Predicate_Aspect (Etype (First_Entity (Current_Scope)))\n       then\n-         return;\n+         In_Predicate := True;\n+\n+         if Has_Static_Predicate_Aspect (Etype (First_Entity (Current_Scope)))\n+         then\n+            return;\n+         end if;\n       end if;\n \n       --  We expand\n@@ -4883,35 +4889,54 @@ package body Exp_Ch4 is\n       --  to\n \n       --    do\n-      --       Tnn : typ;\n+      --       Target : typ;\n       --       case X is\n       --          when A =>\n-      --             Tnn := AX;\n+      --             Target := AX;\n       --          when B =>\n-      --             Tnn := BX;\n+      --             Target := BX;\n       --          ...\n       --       end case;\n-      --    in Tnn end;\n+      --    in Target end;\n+\n+      --  Except when the case expression appears as part of a simple return\n+      --  statement, returning an elementary type, where we expand\n \n-      --  However, this expansion is wrong for limited types, and also\n-      --  wrong for unconstrained types (since the bounds may not be the\n-      --  same in all branches). Furthermore it involves an extra copy\n-      --  for large objects. So we take care of this by using the following\n-      --  modified expansion for non-elementary types:\n+      --    return (case X is when A => AX, when B => BX ...)\n+\n+      --  to\n+\n+      --    case X is\n+      --       when A =>\n+      --          return AX;\n+      --       when B =>\n+      --          return BX;\n+      --       ...\n+      --    end case;\n+\n+      --    Note that this expansion is also triggered for expression functions\n+      --    containing a single case expression since these functions are\n+      --    expanded as above.\n+\n+      --  However, this expansion is wrong for limited types, and also wrong\n+      --  for unconstrained types (since the bounds may not be the same in all\n+      --  branches). Furthermore it involves an extra copy for large objects.\n+      --  So we take care of this by using the following modified expansion for\n+      --  non-elementary types:\n \n       --    do\n-      --       type Pnn is access all typ;\n-      --       Tnn : Pnn;\n+      --       type Ptr_Typ is access all typ;\n+      --       Target : Ptr_Typ;\n       --       case X is\n       --          when A =>\n-      --             T := AX'Unrestricted_Access;\n+      --             Target := AX'Unrestricted_Access;\n       --          when B =>\n-      --             T := BX'Unrestricted_Access;\n+      --             Target := BX'Unrestricted_Access;\n       --          ...\n       --       end case;\n-      --    in Tnn.all end;\n+      --    in Target.all end;\n \n-      Cstmt :=\n+      Case_Stmt :=\n         Make_Case_Statement (Loc,\n           Expression   => Expression (N),\n           Alternatives => New_List);\n@@ -4921,99 +4946,126 @@ package body Exp_Ch4 is\n       --  the premature finalization of controlled objects found within the\n       --  case statement.\n \n-      Set_From_Conditional_Expression (Cstmt);\n-\n-      Actions := New_List;\n+      Set_From_Conditional_Expression (Case_Stmt);\n+      Acts := New_List;\n \n       --  Scalar case\n \n       if Is_Elementary_Type (Typ) then\n-         Ttyp := Typ;\n+         Target_Typ := Typ;\n+\n+         --  ??? Do not perform the optimization when the return statement is\n+         --  within a predicate function as this causes supurious errors. A\n+         --  possible mismatch in handling this case somewhere else in semantic\n+         --  analysis?\n+\n+         if not In_Predicate\n+           and then Nkind (Parent (N)) = N_Simple_Return_Statement\n+         then\n+            Optimize_Return_Stmt := True;\n+         end if;\n \n       else\n-         Pnn := Make_Temporary (Loc, 'P');\n-         Append_To (Actions,\n+         Ptr_Typ := Make_Temporary (Loc, 'P');\n+         Append_To (Acts,\n            Make_Full_Type_Declaration (Loc,\n-             Defining_Identifier => Pnn,\n+             Defining_Identifier => Ptr_Typ,\n              Type_Definition     =>\n                Make_Access_To_Object_Definition (Loc,\n                  All_Present        => True,\n                  Subtype_Indication => New_Occurrence_Of (Typ, Loc))));\n-         Ttyp := Pnn;\n+         Target_Typ := Ptr_Typ;\n       end if;\n \n-      Tnn := Make_Temporary (Loc, 'T');\n+      if not Optimize_Return_Stmt then\n+         Target := Make_Temporary (Loc, 'T');\n \n-      --  Create declaration for target of expression, and indicate that it\n-      --  does not require initialization.\n+         --  Create declaration for target of expression, and indicate that it\n+         --  does not require initialization.\n \n-      Decl :=\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Tnn,\n-          Object_Definition   => New_Occurrence_Of (Ttyp, Loc));\n-      Set_No_Initialization (Decl);\n-      Append_To (Actions, Decl);\n+         Decl :=\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Target,\n+             Object_Definition   => New_Occurrence_Of (Target_Typ, Loc));\n+         Set_No_Initialization (Decl);\n+         Append_To (Acts, Decl);\n+      end if;\n \n       --  Now process the alternatives\n \n       Alt := First (Alternatives (N));\n       while Present (Alt) loop\n          declare\n-            Aexp  : Node_Id             := Expression (Alt);\n-            Aloc  : constant Source_Ptr := Sloc (Aexp);\n-            Stats : List_Id;\n+            Alt_Expr : Node_Id             := Expression (Alt);\n+            Alt_Loc  : constant Source_Ptr := Sloc (Alt_Expr);\n+            Stmts    : List_Id;\n \n          begin\n             --  As described above, take Unrestricted_Access for case of non-\n             --  scalar types, to avoid big copies, and special cases.\n \n             if not Is_Elementary_Type (Typ) then\n-               Aexp :=\n-                 Make_Attribute_Reference (Aloc,\n-                   Prefix         => Relocate_Node (Aexp),\n+               Alt_Expr :=\n+                 Make_Attribute_Reference (Alt_Loc,\n+                   Prefix         => Relocate_Node (Alt_Expr),\n                    Attribute_Name => Name_Unrestricted_Access);\n             end if;\n \n-            Stats := New_List (\n-              Make_Assignment_Statement (Aloc,\n-                Name       => New_Occurrence_Of (Tnn, Loc),\n-                Expression => Aexp));\n+            if Optimize_Return_Stmt then\n+               Stmts := New_List (\n+                 Make_Simple_Return_Statement (Alt_Loc,\n+                   Expression => Alt_Expr));\n+            else\n+               Stmts := New_List (\n+                 Make_Assignment_Statement (Alt_Loc,\n+                   Name       => New_Occurrence_Of (Target, Loc),\n+                   Expression => Alt_Expr));\n+            end if;\n \n             --  Propagate declarations inserted in the node by Insert_Actions\n             --  (for example, temporaries generated to remove side effects).\n             --  These actions must remain attached to the alternative, given\n             --  that they are generated by the corresponding expression.\n \n-            if Present (Sinfo.Actions (Alt)) then\n-               Prepend_List (Sinfo.Actions (Alt), Stats);\n+            if Present (Actions (Alt)) then\n+               Prepend_List (Actions (Alt), Stmts);\n             end if;\n \n             Append_To\n-              (Alternatives (Cstmt),\n+              (Alternatives (Case_Stmt),\n                Make_Case_Statement_Alternative (Sloc (Alt),\n                  Discrete_Choices => Discrete_Choices (Alt),\n-                 Statements       => Stats));\n+                 Statements       => Stmts));\n          end;\n \n          Next (Alt);\n       end loop;\n \n-      Append_To (Actions, Cstmt);\n+      --  Rewrite parent return statement as a case statement if possible\n+\n+      if Optimize_Return_Stmt then\n+         Par := Parent (N);\n+         Rewrite (Par, Case_Stmt);\n+         Analyze (Par);\n+         return;\n+      end if;\n+\n+      Append_To (Acts, Case_Stmt);\n \n       --  Construct and return final expression with actions\n \n       if Is_Elementary_Type (Typ) then\n-         Fexp := New_Occurrence_Of (Tnn, Loc);\n+         Expr := New_Occurrence_Of (Target, Loc);\n       else\n-         Fexp :=\n+         Expr :=\n            Make_Explicit_Dereference (Loc,\n-             Prefix => New_Occurrence_Of (Tnn, Loc));\n+             Prefix => New_Occurrence_Of (Target, Loc));\n       end if;\n \n       Rewrite (N,\n         Make_Expression_With_Actions (Loc,\n-          Expression => Fexp,\n-          Actions    => Actions));\n+          Expression => Expr,\n+          Actions    => Acts));\n \n       Analyze_And_Resolve (N, Typ);\n    end Expand_N_Case_Expression;"}, {"sha": "704a5c04dd328dd38148837676638a84826d1480", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -3707,7 +3707,7 @@ package body Exp_Ch6 is\n                  Make_Explicit_Dereference (Loc,\n                    Prefix => Nam);\n \n-               if Present (Parameter_Associations (Call_Node))  then\n+               if Present (Parameter_Associations (Call_Node)) then\n                   Parm := Parameter_Associations (Call_Node);\n                else\n                   Parm := New_List;\n@@ -3790,7 +3790,7 @@ package body Exp_Ch6 is\n                 (RTE (RE_Address), Relocate_Node (First_Actual (Call_Node))));\n             return;\n \n-         elsif Is_Null_Procedure (Subp)  then\n+         elsif Is_Null_Procedure (Subp) then\n             Rewrite (Call_Node, Make_Null_Statement (Loc));\n             return;\n          end if;"}, {"sha": "dd91f8028a12c5fed20ec12bd20de4839568528a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -8318,7 +8318,7 @@ package body Freeze is\n          --  Add friendly warning if initialization comes from a packed array\n          --  component.\n \n-         if Is_Record_Type (Typ)  then\n+         if Is_Record_Type (Typ) then\n             declare\n                Comp : Entity_Id;\n "}, {"sha": "9edcc0194da8ccd556b01e28676f3fe71c7e962f", "filename": "gcc/ada/i-cobol.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fi-cobol.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fi-cobol.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cobol.ads?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                             (ASCII Version)                              --\n --                                                                          --\n---          Copyright (C) 1993-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1993-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -439,8 +439,8 @@ package Interfaces.COBOL is\n       function To_Decimal (Item : Binary)      return Num;\n       function To_Decimal (Item : Long_Binary) return Num;\n \n-      function To_Binary      (Item : Num)  return Binary;\n-      function To_Long_Binary (Item : Num)  return Long_Binary;\n+      function To_Binary      (Item : Num) return Binary;\n+      function To_Long_Binary (Item : Num) return Long_Binary;\n \n    private\n       pragma Inline (Length);"}, {"sha": "1aecca6b12d7f08d24d4b3d5f64937cb245d57ea", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -42,7 +42,7 @@ package body Ch5 is\n    function P_Label                              return Node_Id;\n    function P_Null_Statement                     return Node_Id;\n \n-   function P_Assignment_Statement (LHS : Node_Id)  return Node_Id;\n+   function P_Assignment_Statement (LHS : Node_Id) return Node_Id;\n    --  Parse assignment statement. On entry, the caller has scanned the left\n    --  hand side (passed in as Lhs), and the colon-equal (or some symbol\n    --  taken to be an error equivalent such as equal)."}, {"sha": "18f62c7d2359e6cad72d806705f58fdb1b68c5ff", "filename": "gcc/ada/s-bignum.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fs-bignum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fs-bignum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -147,7 +147,7 @@ package body System.Bignums is\n                for J in reverse 1 .. X'Last loop\n                   RD := RD + DD (X (J));\n \n-                  if J >= 1 + (X'Last - Y'Last)  then\n+                  if J >= 1 + (X'Last - Y'Last) then\n                      RD := RD + DD (Y (J - (X'Last - Y'Last)));\n                   end if;\n \n@@ -189,7 +189,7 @@ package body System.Bignums is\n                   for J in reverse 1 .. X'Last loop\n                      RD := RD + DD (X (J));\n \n-                     if J >= 1 + (X'Last - Y'Last)  then\n+                     if J >= 1 + (X'Last - Y'Last) then\n                         RD := RD - DD (Y (J - (X'Last - Y'Last)));\n                      end if;\n \n@@ -840,9 +840,9 @@ package body System.Bignums is\n \n                Carry := 0;\n                for J in reverse 1 .. n loop\n-                  Tmp    := DD (v (J)) * d + Carry;\n-                  v (J)  := LSD (Tmp);\n-                  Carry  := Tmp / Base;\n+                  Tmp   := DD (v (J)) * d + Carry;\n+                  v (J) := LSD (Tmp);\n+                  Carry := Tmp / Base;\n                end loop;\n \n                pragma Assert (Carry = 0);"}, {"sha": "0129b593b0f5664180172207cbc865c3f88b03d0", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -284,7 +284,7 @@ package System.OS_Interface is\n    OK    : constant STATUS := 0;\n    ERROR : constant STATUS := Interfaces.C.int (-1);\n \n-   function taskIdVerify (tid : t_id)  return STATUS;\n+   function taskIdVerify (tid : t_id) return STATUS;\n    pragma Import (C, taskIdVerify, \"taskIdVerify\");\n \n    function taskIdSelf return t_id;"}, {"sha": "c024249ad09e0fa05d280fbf130a66bb1cb7e9bf", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -208,7 +208,7 @@ is\n       G.I := I;\n \n       Y := Y xor Shift_Right (Y, U);\n-      Y := Y xor (Shift_Left (Y, S)  and B_Mask);\n+      Y := Y xor (Shift_Left (Y, S) and B_Mask);\n       Y := Y xor (Shift_Left (Y, T) and C_Mask);\n       Y := Y xor Shift_Right (Y, L);\n "}, {"sha": "a6061ead8c5605b9cd78f40e648d2aa828976956", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -2039,7 +2039,7 @@ package body Sem is\n                --  The flag Withed_Body on a context clause indicates that a\n                --  unit contains an instantiation that may be needed later,\n                --  and therefore the body that contains the generic body (and\n-               --  its context)  must be traversed immediately after the\n+               --  its context) must be traversed immediately after the\n                --  corresponding spec (see Do_Unit_And_Dependents).\n \n                --  The main unit itself is processed separately after all other"}, {"sha": "25022e95a9e947bce05f4958b1949862c3093f0c", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -479,7 +479,7 @@ package body Sem_Aggr is\n          else\n             if Compile_Time_Known_Value (This_Low) then\n                if not Compile_Time_Known_Value (Aggr_Low (Dim)) then\n-                  Aggr_Low (Dim)  := This_Low;\n+                  Aggr_Low (Dim) := This_Low;\n \n                elsif Expr_Value (This_Low) /= Expr_Value (Aggr_Low (Dim)) then\n                   Set_Raises_Constraint_Error (N);\n@@ -491,7 +491,7 @@ package body Sem_Aggr is\n \n             if Compile_Time_Known_Value (This_High) then\n                if not Compile_Time_Known_Value (Aggr_High (Dim)) then\n-                  Aggr_High (Dim)  := This_High;\n+                  Aggr_High (Dim) := This_High;\n \n                elsif\n                  Expr_Value (This_High) /= Expr_Value (Aggr_High (Dim))\n@@ -1842,15 +1842,15 @@ package body Sem_Aggr is\n             Errors_Posted_On_Choices : Boolean := False;\n             --  Keeps track of whether any choices have semantic errors\n \n-            function Empty_Range (A : Node_Id)  return Boolean;\n+            function Empty_Range (A : Node_Id) return Boolean;\n             --  If an association covers an empty range, some warnings on the\n             --  expression of the association can be disabled.\n \n             -----------------\n             -- Empty_Range --\n             -----------------\n \n-            function Empty_Range (A : Node_Id)  return Boolean is\n+            function Empty_Range (A : Node_Id) return Boolean is\n                R : constant Node_Id := First (Choices (A));\n             begin\n                return No (Next (R))"}, {"sha": "53ff828d20c9f318a5b5688fbce521644dd93b26", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -879,7 +879,7 @@ package body Sem_Ch10 is\n       end if;\n \n       --  All components of the context: with-clauses, library unit, ancestors\n-      --  if any, (and their context)  are analyzed and installed.\n+      --  if any, (and their context) are analyzed and installed.\n \n       --  Call special debug routine sm if this is the main unit\n "}, {"sha": "125b877e6d975fa930ae40a095de458deb73b150", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -1324,7 +1324,7 @@ package body Sem_Ch12 is\n       -- Process_Default --\n       ---------------------\n \n-      procedure Process_Default (F : Entity_Id)  is\n+      procedure Process_Default (F : Entity_Id) is\n          Loc     : constant Source_Ptr := Sloc (I_Node);\n          F_Id    : constant Entity_Id  := Defining_Entity (F);\n          Decl    : Node_Id;"}, {"sha": "f41b8e99b0c8f65fcca36078e2e930e5345f8fc9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -3168,7 +3168,7 @@ package body Sem_Ch3 is\n          end loop;\n       end if;\n \n-      if Is_Integer_Type (T)  then\n+      if Is_Integer_Type (T) then\n          Resolve (E, T);\n          Set_Etype (Id, Universal_Integer);\n          Set_Ekind (Id, E_Named_Integer);\n@@ -14522,7 +14522,7 @@ package body Sem_Ch3 is\n             --  of the derived type are not relevant, and thus we can use\n             --  the base type for the formals. However, the return type may be\n             --  used in a context that requires that the proper static bounds\n-            --  be used (a case statement, for example)  and for those cases\n+            --  be used (a case statement, for example) and for those cases\n             --  we must use the derived type (first subtype), not its base.\n \n             --  If the derived_type_definition has no constraints, we know that"}, {"sha": "657a0e45dfadfb7956fade394bd384c22cd906bf", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -803,7 +803,7 @@ package body Sem_Ch5 is\n          Set_Referenced_Modified (Lhs, Out_Param => False);\n       end if;\n \n-      --  RM 7.3.2 (12/3)  An assignment to a view conversion (from a type\n+      --  RM 7.3.2 (12/3): An assignment to a view conversion (from a type\n       --  to one of its ancestors) requires an invariant check. Apply check\n       --  only if expression comes from source, otherwise it will be applied\n       --  when value is assigned to source entity."}, {"sha": "8e27d80f79f7cdb7cc309bb8f8272d8a90dee83c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -4652,7 +4652,7 @@ package body Sem_Prag is\n                then\n                   OK := True;\n \n-               --  If the aspect is a predicate (possibly others ???)  and the\n+               --  If the aspect is a predicate (possibly others ???) and the\n                --  context is a record type, this is a discriminant expression\n                --  within a type declaration, that freezes the predicated\n                --  subtype."}, {"sha": "5a6d39252735a90db88d88cda36f0b5619b9eea8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -7657,14 +7657,15 @@ package body Sem_Res is\n \n          --  Reset the Is_Overloaded flag, since resolution is now completed\n \n+         --  Simple entry call\n+\n          if Nkind (Entry_Name) = N_Selected_Component then\n-            --  Simple entry call\n             Set_Is_Overloaded (Selector_Name (Entry_Name), False);\n \n+         --  Call to a member of an entry family\n+\n          else pragma Assert (Nkind (Entry_Name) = N_Indexed_Component);\n-            --  Call to member of entry family\n             Set_Is_Overloaded (Selector_Name (Prefix (Entry_Name)), False);\n-\n          end if;\n       end if;\n "}, {"sha": "eddc54b8baaafda22a7eea30fab8124c727feaf6", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -2975,7 +2975,7 @@ package body Sem_Type is\n    -- New_Interps --\n    -----------------\n \n-   procedure New_Interps (N : Node_Id)  is\n+   procedure New_Interps (N : Node_Id) is\n       Map_Ptr : Int;\n \n    begin"}, {"sha": "e57cd930e11e1d9337decff01e2cc49a31414de3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0355585f0b4ce41cf72300f3a30008a0b4ff3d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=be0355585f0b4ce41cf72300f3a30008a0b4ff3d", "patch": "@@ -6301,7 +6301,7 @@ package body Sem_Util is\n                      end loop;\n                   end if;\n \n-                  if Present (Prev_Vis)  then\n+                  if Present (Prev_Vis) then\n \n                      --  Skip E in the visibility chain\n \n@@ -12240,7 +12240,7 @@ package body Sem_Util is\n                   else\n                      Indx_Typ := Etype (Indx);\n \n-                     if Is_Private_Type (Indx_Typ)  then\n+                     if Is_Private_Type (Indx_Typ) then\n                         Indx_Typ := Full_View (Indx_Typ);\n                      end if;\n "}]}