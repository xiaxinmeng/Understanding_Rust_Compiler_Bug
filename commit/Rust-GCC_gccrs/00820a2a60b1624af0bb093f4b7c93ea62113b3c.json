{"sha": "00820a2a60b1624af0bb093f4b7c93ea62113b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4MjBhMmE2MGIxNjI0YWYwYmIwOTNmNGI3YzkzZWE2MjExM2IzYw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-10-18T10:48:12Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-10-18T10:48:12Z"}, "message": "re PR fortran/47023 (C_Sizeof: Rejects valid code)\n\n2011-10-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47023\n\t* decl.c (verify_c_interop_param): Renamed to\n\t'gfc_verify_c_interop_param'. Add error message for polymorphic\n\targuments.\n\t(verify_c_interop): Renamed to 'gfc_verify_c_interop'. Reject\n\tpolymorphic variables.\n\t(verify_bind_c_sym): Renamed 'verify_c_interop'.\n\t* gfortran.h (verify_c_interop,verify_c_interop_param): Renamed.\n\t* check.c (gfc_check_sizeof): Ditto.\n\t* resolve.c (gfc_iso_c_func_interface,resolve_fl_procedure): Ditto.\n\t* symbol.c (verify_bind_c_derived_type): Ditto.\n\n\n2011-10-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47023\n\t* gfortran.dg/iso_c_binding_class.f03: New.\n\nFrom-SVN: r180130", "tree": {"sha": "148eaa9b42a6e2b9cba8c5f9681b188b9ea70790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/148eaa9b42a6e2b9cba8c5f9681b188b9ea70790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00820a2a60b1624af0bb093f4b7c93ea62113b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00820a2a60b1624af0bb093f4b7c93ea62113b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00820a2a60b1624af0bb093f4b7c93ea62113b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00820a2a60b1624af0bb093f4b7c93ea62113b3c/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8396e9611daa58c0cb9a9e55844e797e0347ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8396e9611daa58c0cb9a9e55844e797e0347ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8396e9611daa58c0cb9a9e55844e797e0347ea"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "7fe698812bf196dbfd7c0c1d2cda5d9b9e287a85", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -1,3 +1,17 @@\n+2011-10-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47023\n+\t* decl.c (verify_c_interop_param): Renamed to\n+\t'gfc_verify_c_interop_param'. Add error message for polymorphic\n+\targuments.\n+\t(verify_c_interop): Renamed to 'gfc_verify_c_interop'. Reject\n+\tpolymorphic variables.\n+\t(verify_bind_c_sym): Renamed 'verify_c_interop'.\n+\t* gfortran.h (verify_c_interop,verify_c_interop_param): Renamed.\n+\t* check.c (gfc_check_sizeof): Ditto.\n+\t* resolve.c (gfc_iso_c_func_interface,resolve_fl_procedure): Ditto.\n+\t* symbol.c (verify_bind_c_derived_type): Ditto.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "66e661bf659601a6a3cc5b163ef1a3ca2dee6832", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -3455,7 +3455,7 @@ gfc_check_sizeof (gfc_expr *arg ATTRIBUTE_UNUSED)\n gfc_try\n gfc_check_c_sizeof (gfc_expr *arg)\n {\n-  if (verify_c_interop (&arg->ts) != SUCCESS)\n+  if (gfc_verify_c_interop (&arg->ts) != SUCCESS)\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must be an \"\n \t\t \"interoperable data entity\","}, {"sha": "2dd38b9485e78f8c0931d4db72be403199393ec1", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -961,7 +961,7 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n    across platforms.  */\n \n gfc_try\n-verify_c_interop_param (gfc_symbol *sym)\n+gfc_verify_c_interop_param (gfc_symbol *sym)\n {\n   int is_c_interop = 0;\n   gfc_try retval = SUCCESS;\n@@ -1000,20 +1000,24 @@ verify_c_interop_param (gfc_symbol *sym)\n     {\n       if (sym->ns->proc_name->attr.is_bind_c == 1)\n \t{\n-\t  is_c_interop =\n-\t    (verify_c_interop (&(sym->ts))\n-\t     == SUCCESS ? 1 : 0);\n+\t  is_c_interop = (gfc_verify_c_interop (&(sym->ts)) == SUCCESS ? 1 : 0);\n \n \t  if (is_c_interop != 1)\n \t    {\n \t      /* Make personalized messages to give better feedback.  */\n \t      if (sym->ts.type == BT_DERIVED)\n-\t\tgfc_error (\"Type '%s' at %L is a parameter to the BIND(C) \"\n-\t\t\t   \"procedure '%s' but is not C interoperable \"\n+\t\tgfc_error (\"Variable '%s' at %L is a dummy argument to the \"\n+\t\t\t   \"BIND(C) procedure '%s' but is not C interoperable \"\n \t\t\t   \"because derived type '%s' is not C interoperable\",\n \t\t\t   sym->name, &(sym->declared_at),\n \t\t\t   sym->ns->proc_name->name, \n \t\t\t   sym->ts.u.derived->name);\n+\t      else if (sym->ts.type == BT_CLASS)\n+\t\tgfc_error (\"Variable '%s' at %L is a dummy argument to the \"\n+\t\t\t   \"BIND(C) procedure '%s' but is not C interoperable \"\n+\t\t\t   \"because it is polymorphic\",\n+\t\t\t   sym->name, &(sym->declared_at),\n+\t\t\t   sym->ns->proc_name->name);\n \t      else\n \t\tgfc_warning (\"Variable '%s' at %L is a parameter to the \"\n \t\t\t     \"BIND(C) procedure '%s' but may not be C \"\n@@ -3711,11 +3715,13 @@ set_com_block_bind_c (gfc_common_head *com_block, int is_bind_c)\n /* Verify that the given gfc_typespec is for a C interoperable type.  */\n \n gfc_try\n-verify_c_interop (gfc_typespec *ts)\n+gfc_verify_c_interop (gfc_typespec *ts)\n {\n   if (ts->type == BT_DERIVED && ts->u.derived != NULL)\n     return (ts->u.derived->ts.is_c_interop || ts->u.derived->attr.is_bind_c)\n \t   ? SUCCESS : FAILURE;\n+  else if (ts->type == BT_CLASS)\n+    return FAILURE;\n   else if (ts->is_c_interop != 1)\n     return FAILURE;\n   \n@@ -3788,7 +3794,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n      the given ts (current_ts), so look in both.  */\n   if (tmp_sym->ts.type != BT_UNKNOWN || ts->type != BT_UNKNOWN) \n     {\n-      if (verify_c_interop (&(tmp_sym->ts)) != SUCCESS)\n+      if (gfc_verify_c_interop (&(tmp_sym->ts)) != SUCCESS)\n \t{\n \t  /* See if we're dealing with a sym in a common block or not.\t*/\n \t  if (is_in_common == 1)"}, {"sha": "da3477d7a0b0733cff13638a6b3528b29ee0d5b7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -2581,8 +2581,8 @@ gfc_symtree* gfc_find_symtree_in_proc (const char *, gfc_namespace *);\n int gfc_find_symbol (const char *, gfc_namespace *, int, gfc_symbol **);\n int gfc_find_sym_tree (const char *, gfc_namespace *, int, gfc_symtree **);\n int gfc_get_symbol (const char *, gfc_namespace *, gfc_symbol **);\n-gfc_try verify_c_interop (gfc_typespec *);\n-gfc_try verify_c_interop_param (gfc_symbol *);\n+gfc_try gfc_verify_c_interop (gfc_typespec *);\n+gfc_try gfc_verify_c_interop_param (gfc_symbol *);\n gfc_try verify_bind_c_sym (gfc_symbol *, gfc_typespec *, int, gfc_common_head *);\n gfc_try verify_bind_c_derived_type (gfc_symbol *);\n gfc_try verify_com_block_vars_c_interop (gfc_common_head *);"}, {"sha": "0d7e03056b97dea402b43bf63c03fb5689043d1b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -2809,7 +2809,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n \t\t\t &(args->expr->where));\n \t\t\t \n           /* See if we have interoperable type and type param.  */\n-          if (verify_c_interop (arg_ts) == SUCCESS\n+          if (gfc_verify_c_interop (arg_ts) == SUCCESS\n               || gfc_check_any_c_kind (arg_ts) == SUCCESS)\n             {\n               if (args_sym->attr.target == 1)\n@@ -10544,7 +10544,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n         {\n           /* Skip implicitly typed dummy args here.  */\n \t  if (curr_arg->sym->attr.implicit_type == 0)\n-\t    if (verify_c_interop_param (curr_arg->sym) == FAILURE)\n+\t    if (gfc_verify_c_interop_param (curr_arg->sym) == FAILURE)\n \t      /* If something is found to fail, record the fact so we\n \t\t can mark the symbol for the procedure as not being\n \t\t BIND(C) to try and prevent multiple errors being"}, {"sha": "587ad7cb3c9a6c0a832524c67d0d75c468385d54", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -3635,7 +3635,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n       else\n \t{\n \t  /* Grab the typespec for the given component and test the kind.  */ \n-\t  is_c_interop = verify_c_interop (&(curr_comp->ts));\n+\t  is_c_interop = gfc_verify_c_interop (&(curr_comp->ts));\n \t  \n \t  if (is_c_interop != SUCCESS)\n \t    {"}, {"sha": "db9417b9ddbddad45cb2aecc55d2040f7b4bc10a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -1,3 +1,8 @@\n+2011-10-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47023\n+\t* gfortran.dg/iso_c_binding_class.f03: New.\n+\n 2011-10-18  Ira Rosen  <ira.rosen@linaro.org>\n \n \t* testsuite/lib/target-supports.exp"}, {"sha": "bfb05bcc89b2541551193eb9dc57ded479014735", "filename": "gcc/testsuite/gfortran.dg/iso_c_binding_class.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_class.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00820a2a60b1624af0bb093f4b7c93ea62113b3c/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_class.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_class.f03?ref=00820a2a60b1624af0bb093f4b7c93ea62113b3c", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! PR 47023: C_Sizeof: Rejects valid code\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+  use iso_c_binding\n+  type t\n+    integer(c_int) :: i\n+  end type t\n+contains\n+  subroutine test(a) bind(c)  ! { dg-error \"is not C interoperable\" }\n+    class(t) :: a\n+  end subroutine\n+end "}]}