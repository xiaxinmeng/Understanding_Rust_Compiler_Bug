{"sha": "ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlZDcxNzUxYjJjMDMwZGU3ZjFhZDlkMjg0YjU0YjM0Y2ZlMGEyMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-01-20T14:36:46Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-01-20T14:36:46Z"}, "message": "C++: fix fix-it hints for misspellings within explicit namespaces\n\ngcc/cp/ChangeLog:\n\tPR c++/77829\n\tPR c++/78656\n\t* cp-tree.h (suggest_alternatives_for): Add bool param.\n\t(suggest_alternative_in_explicit_scope): New decl.\n\t* error.c (qualified_name_lookup_error): When SCOPE is a namespace\n\tthat isn't the global one, call new function\n\tsuggest_alternative_in_explicit_scope, only calling\n\tsuggest_alternatives_for if it fails, and disabling near match\n\tsearches fort that case.  When SCOPE is the global namespace,\n\tpass true for new param to suggest_alternatives_for to allow for\n\tfuzzy name lookups.\n\t* lex.c (unqualified_name_lookup_error): Pass true for new param\n\tto suggest_alternatives_for.\n\t* name-lookup.c (consider_binding_level): Add forward decl.\n\t(suggest_alternatives_for): Add \"suggest_misspellings\" param,\n\tusing it to conditionalize the fuzzy name-lookup code.\n\t(suggest_alternative_in_explicit_scope): New function.\n\t* parser.c (cp_parser_primary_expression): When calling\n\tfinish_id_expression, pass location of id_expression rather\n\tthan that of id_expr_token.\n\t(cp_parser_id_expression): Convert local \"unqualified_id\" from\n\ttree to cp_expr to avoid implicitly dropping location information.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/77829\n\tPR c++/78656\n\t* g++.dg/spellcheck-pr77829.C: New test case.\n\t* g++.dg/spellcheck-pr78656.C: New test case.\n\nFrom-SVN: r244715", "tree": {"sha": "e9e719aafb0644febd2b61d586b0ac4595d5db90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e719aafb0644febd2b61d586b0ac4595d5db90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d40036b846df9d07f679d593c55f0090f513bb24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40036b846df9d07f679d593c55f0090f513bb24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40036b846df9d07f679d593c55f0090f513bb24"}], "stats": {"total": 307, "additions": 293, "deletions": 14}, "files": [{"sha": "9b71c90f742053a36ef91d45e35ada6057978b3d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -1,3 +1,28 @@\n+2017-01-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77829\n+\tPR c++/78656\n+\t* cp-tree.h (suggest_alternatives_for): Add bool param.\n+\t(suggest_alternative_in_explicit_scope): New decl.\n+\t* error.c (qualified_name_lookup_error): When SCOPE is a namespace\n+\tthat isn't the global one, call new function\n+\tsuggest_alternative_in_explicit_scope, only calling\n+\tsuggest_alternatives_for if it fails, and disabling near match\n+\tsearches fort that case.  When SCOPE is the global namespace,\n+\tpass true for new param to suggest_alternatives_for to allow for\n+\tfuzzy name lookups.\n+\t* lex.c (unqualified_name_lookup_error): Pass true for new param\n+\tto suggest_alternatives_for.\n+\t* name-lookup.c (consider_binding_level): Add forward decl.\n+\t(suggest_alternatives_for): Add \"suggest_misspellings\" param,\n+\tusing it to conditionalize the fuzzy name-lookup code.\n+\t(suggest_alternative_in_explicit_scope): New function.\n+\t* parser.c (cp_parser_primary_expression): When calling\n+\tfinish_id_expression, pass location of id_expression rather\n+\tthan that of id_expr_token.\n+\t(cp_parser_id_expression): Convert local \"unqualified_id\" from\n+\ttree to cp_expr to avoid implicitly dropping location information.\n+\n 2017-01-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64279"}, {"sha": "b4c4dfa2f6b58a1078282ee4942ed2c45b0bcffe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -6937,7 +6937,8 @@ extern tree cp_fully_fold\t\t\t(tree);\n extern void clear_fold_cache\t\t\t(void);\n \n /* in name-lookup.c */\n-extern void suggest_alternatives_for            (location_t, tree);\n+extern void suggest_alternatives_for            (location_t, tree, bool);\n+extern bool suggest_alternative_in_explicit_scope (location_t, tree, tree);\n extern tree strip_using_decl                    (tree);\n \n /* in constraint.cc */"}, {"sha": "4f4c11df570a957c5af6eb1f0c4ccce5efac0884", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -3777,11 +3777,12 @@ qualified_name_lookup_error (tree scope, tree name,\n   else if (scope != global_namespace)\n     {\n       error_at (location, \"%qD is not a member of %qD\", name, scope);\n-      suggest_alternatives_for (location, name);\n+      if (!suggest_alternative_in_explicit_scope (location, name, scope))\n+\tsuggest_alternatives_for (location, name, false);\n     }\n   else\n     {\n       error_at (location, \"%<::%D%> has not been declared\", name);\n-      suggest_alternatives_for (location, name);\n+      suggest_alternatives_for (location, name, true);\n     }\n }"}, {"sha": "60a70e9b325ab2de16f56981583165f83d24708d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -441,7 +441,7 @@ unqualified_name_lookup_error (tree name, location_t loc)\n       if (!objc_diagnose_private_ivar (name))\n \t{\n \t  error_at (loc, \"%qD was not declared in this scope\", name);\n-\t  suggest_alternatives_for (loc, name);\n+\t  suggest_alternatives_for (loc, name, true);\n \t}\n       /* Prevent repeated error messages by creating a VAR_DECL with\n \t this NAME in the innermost block scope.  */"}, {"sha": "4004640a60cbb3596f117d2edc2996848564d981", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -48,6 +48,10 @@ static bool lookup_using_namespace (tree, struct scope_binding *, tree,\n \t\t\t\t    tree, int);\n static bool qualified_lookup_using_namespace (tree, tree,\n \t\t\t\t\t      struct scope_binding *, int);\n+static void consider_binding_level (tree name, best_match <tree, tree> &bm,\n+\t\t\t\t    cp_binding_level *lvl,\n+\t\t\t\t    bool look_within_fields,\n+\t\t\t\t    enum lookup_name_fuzzy_kind kind);\n static tree lookup_type_current_level (tree);\n static tree push_using_directive (tree);\n static tree lookup_extern_c_fun_in_all_ns (tree);\n@@ -4431,10 +4435,13 @@ remove_hidden_names (tree fns)\n \n /* Suggest alternatives for NAME, an IDENTIFIER_NODE for which name\n    lookup failed.  Search through all available namespaces and print out\n-   possible candidates.  */\n+   possible candidates.  If no exact matches are found, and\n+   SUGGEST_MISSPELLINGS is true, then also look for near-matches and\n+   suggest the best near-match, if there is one.  */\n \n void\n-suggest_alternatives_for (location_t location, tree name)\n+suggest_alternatives_for (location_t location, tree name,\n+\t\t\t  bool suggest_misspellings)\n {\n   vec<tree> candidates = vNULL;\n   vec<tree> namespaces_to_search = vNULL;\n@@ -4481,13 +4488,16 @@ suggest_alternatives_for (location_t location, tree name)\n      or do nothing.  */\n   if (candidates.is_empty ())\n     {\n-      const char *fuzzy_name = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME);\n-      if (fuzzy_name)\n+      if (suggest_misspellings)\n \t{\n-\t  gcc_rich_location richloc (location);\n-\t  richloc.add_fixit_replace (fuzzy_name);\n-\t  inform_at_rich_loc (&richloc, \"suggested alternative: %qs\",\n-\t\t\t      fuzzy_name);\n+\t  const char *fuzzy_name = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME);\n+\t  if (fuzzy_name)\n+\t    {\n+\t      gcc_rich_location richloc (location);\n+\t      richloc.add_fixit_replace (fuzzy_name);\n+\t      inform_at_rich_loc (&richloc, \"suggested alternative: %qs\",\n+\t\t\t\t  fuzzy_name);\n+\t    }\n \t}\n       return;\n     }\n@@ -4502,6 +4512,35 @@ suggest_alternatives_for (location_t location, tree name)\n   candidates.release ();\n }\n \n+/* Look for alternatives for NAME, an IDENTIFIER_NODE for which name\n+   lookup failed within the explicitly provided SCOPE.  Suggest the\n+   the best meaningful candidates (if any) as a fix-it hint.\n+   Return true iff a suggestion was provided.  */\n+\n+bool\n+suggest_alternative_in_explicit_scope (location_t location, tree name,\n+\t\t\t\t       tree scope)\n+{\n+  cp_binding_level *level = NAMESPACE_LEVEL (scope);\n+\n+  best_match <tree, tree> bm (name);\n+  consider_binding_level (name, bm, level, false, FUZZY_LOOKUP_NAME);\n+\n+  /* See if we have a good suggesion for the user.  */\n+  tree best_id = bm.get_best_meaningful_candidate ();\n+  if (best_id)\n+    {\n+      const char *fuzzy_name = IDENTIFIER_POINTER (best_id);\n+      gcc_rich_location richloc (location);\n+      richloc.add_fixit_replace (fuzzy_name);\n+      inform_at_rich_loc (&richloc, \"suggested alternative: %qs\",\n+\t\t\t  fuzzy_name);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Unscoped lookup of a global: iterate over current namespaces,\n    considering using-directives.  */\n "}, {"sha": "4ab0b6974d624a791c69ad33671ee5f5a0791612", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -5332,7 +5332,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t template_p, done, address_p,\n \t\t template_arg_p,\n \t\t &error_msg,\n-                 id_expr_token->location));\n+\t\t id_expression.get_location ()));\n \tif (error_msg)\n \t  cp_parser_error (parser, error_msg);\n \tdecl.set_location (id_expr_token->location);\n@@ -5425,7 +5425,7 @@ cp_parser_id_expression (cp_parser *parser,\n       tree saved_scope;\n       tree saved_object_scope;\n       tree saved_qualifying_scope;\n-      tree unqualified_id;\n+      cp_expr unqualified_id;\n       bool is_template;\n \n       /* See if the next token is the `template' keyword.  */"}, {"sha": "fde93280263b330a79dc25b59ff2f3a0497706e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -1,3 +1,10 @@\n+2017-01-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77829\n+\tPR c++/78656\n+\t* g++.dg/spellcheck-pr77829.C: New test case.\n+\t* g++.dg/spellcheck-pr78656.C: New test case.\n+\n 2017-01-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64279"}, {"sha": "2f75779a1b426e6acf51753ce8d48109c030d718", "filename": "gcc/testsuite/g++.dg/spellcheck-pr77829.C", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr77829.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr77829.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr77829.C?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -0,0 +1,167 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+/* Various tests of name lookup within a namespace, both within an explicitly\n+   given namespace, or implicitly.  */\n+\n+namespace detail {\n+  /* Various things to look for.  */\n+\n+  typedef int some_typedef;\n+\n+  int _foo(int i) { return i; }\n+\n+  template <typename T>\n+  T something_else (T i) { return i; }\n+}\n+\n+/* Tests of lookup of a typedef.  */\n+\n+void fn_1_explicit ()\n+{\n+  detail::some_type i; // { dg-error \".some_type. is not a member of .detail.\" }\n+  // { dg-message \"suggested alternative: .some_typedef.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::some_type i;\n+           ^~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::some_type i;\n+           ^~~~~~~~~\n+           some_typedef\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace detail {\n+\n+void fn_1_implicit ()\n+{\n+  some_type i; // { dg-error \".some_type. was not declared in this scope\" }\n+  // { dg-message \"suggested alternative: .some_typedef.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   some_type i;\n+   ^~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   some_type i;\n+   ^~~~~~~~~\n+   some_typedef\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+} // namespace detail\n+\n+\n+/* Tests of lookup of a function.  */\n+\n+void fn_2_explicit (int i) {\n+  detail::foo(i); // { dg-error \".foo. is not a member of .detail.\" }\n+  // { dg-message \"suggested alternative: ._foo.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::foo(i);\n+           ^~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::foo(i);\n+           ^~~\n+           _foo\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace detail {\n+\n+void fn_2_implicit (int i) {\n+  foo(i); // { dg-error \".foo. was not declared in this scope\" }\n+  // { dg-message \"suggested alternative: ._foo.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo(i);\n+   ^~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   foo(i);\n+   ^~~\n+   _foo\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+} // namespace detail\n+\n+\n+/* Examples using a template.  */\n+\n+void fn_3_explicit (int i) {\n+  detail::something_els(i); // { dg-error \".something_els. is not a member of .detail.\" }\n+  // { dg-message \"suggested alternative: .something_else.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::something_els(i);\n+           ^~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::something_els(i);\n+           ^~~~~~~~~~~~~\n+           something_else\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace detail {\n+\n+void fn_3_implicit (int i) {\n+  something_els(i); // { dg-error \".something_els. was not declared in this scope\" }\n+  // { dg-message \"suggested alternative: .something_else.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   something_els(i);\n+   ^~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  /* { dg-begin-multiline-output \"\" }\n+   something_els(i);\n+   ^~~~~~~~~~~~~\n+   something_else\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+} // namespace detail\n+\n+\n+/* Tests of lookup for which no hint is available.  */\n+\n+void fn_4_explicit (int i) {\n+  detail::not_recognized(i); // { dg-error \".not_recognized. is not a member of .detail.\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   detail::not_recognized(i);\n+           ^~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+namespace detail {\n+\n+void fn_4_implicit (int i)\n+{\n+  not_recognized(i); // { dg-error \".not_recognized. was not declared in this scope\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   not_recognized(i);\n+   ^~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+} // namespace detail\n+\n+\n+/* Test for failed lookup explicitly within global namespace.  */\n+\n+typedef int another_typedef;\n+\n+void fn_5 ()\n+{\n+  ::another_type i; // { dg-error \".::another_type. has not been declared\" }\n+  // { dg-message \"suggested alternative: .another_typedef.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   ::another_type i;\n+     ^~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   ::another_type i;\n+     ^~~~~~~~~~~~\n+     another_typedef\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "ded4bb6be852d742cfd152ffbe9c65ce28c8772e", "filename": "gcc/testsuite/g++.dg/spellcheck-pr78656.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78656.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebed71751b2c030de7f1ad9d284b54b34cfe0a20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78656.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78656.C?ref=ebed71751b2c030de7f1ad9d284b54b34cfe0a20", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+#include <memory>\n+\n+void* allocate(std::size_t n)\n+{\n+  return std::allocate<char>().allocate(n); // { dg-error \".allocate. is not a member of .std.\" }\n+  // { dg-message \"suggested alternative: .allocator.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   return std::allocate<char>().allocate(n);\n+               ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */ \n+  /* { dg-begin-multiline-output \"\" }\n+   return std::allocate<char>().allocate(n);\n+               ^~~~~~~~\n+               allocator\n+     { dg-end-multiline-output \"\" } */\n+\n+  // Various errors follow that we don't care about; suppress them:\n+  // { dg-excess-errors \"7: \" }\n+}\n+\n+void* test_2(std::size_t n)\n+{\n+  return std::alocator<char>().allocate(n); // { dg-error \".alocator. is not a member of .std.\" }\n+  // { dg-message \"suggested alternative: .allocator.\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+   return std::alocator<char>().allocate(n);\n+               ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */ \n+  /* { dg-begin-multiline-output \"\" }\n+   return std::alocator<char>().allocate(n);\n+               ^~~~~~~~\n+               allocator\n+     { dg-end-multiline-output \"\" } */\n+\n+  // Various errors follow that we don't care about; suppress them:\n+  // { dg-excess-errors \"25: \" }\n+}"}]}