{"sha": "64520bdc184659160eee1d8eda9dc6a3babc5209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1MjBiZGMxODQ2NTkxNjBlZWUxZDhlZGE5ZGM2YTNiYWJjNTIwOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-10-15T07:41:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-10-15T07:41:28Z"}, "message": "dse.c (struct insn_info): Add 'frame_read' field.\n\n\t* dse.c (struct insn_info): Add 'frame_read' field.\n\t(scan_insn): For the call to a const function, set frame_read if\n\treload has been run.\n\tIf the insn reads the frame, kill the frame related stores.\n\t(scan_reads_nospill): Likewise.\n\nFrom-SVN: r129312", "tree": {"sha": "1c783187427863f2b594e432c0a46863b7bdb374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c783187427863f2b594e432c0a46863b7bdb374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64520bdc184659160eee1d8eda9dc6a3babc5209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64520bdc184659160eee1d8eda9dc6a3babc5209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64520bdc184659160eee1d8eda9dc6a3babc5209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64520bdc184659160eee1d8eda9dc6a3babc5209/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a19b1a9c7e6968f87bcff7d3b1fd187de88f091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a19b1a9c7e6968f87bcff7d3b1fd187de88f091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a19b1a9c7e6968f87bcff7d3b1fd187de88f091"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "41969ade4320dc8232cae54b1b1ad3a14691574e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64520bdc184659160eee1d8eda9dc6a3babc5209/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64520bdc184659160eee1d8eda9dc6a3babc5209/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64520bdc184659160eee1d8eda9dc6a3babc5209", "patch": "@@ -1,3 +1,11 @@\n+2007-10-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* dse.c (struct insn_info): Add 'frame_read' field.\n+\t(scan_insn): For the call to a const function, set frame_read if\n+\treload has been run.\n+\tIf the insn reads the frame, kill the frame related stores.\n+\t(scan_reads_nospill): Likewise.\n+\n 2007-10-14  Jason Merrill  <jason@redhat.com>\n \n \t* tree-eh.c (optimize_double_finally): Don't assume that the"}, {"sha": "764c3359d1bc0b622b84477850db60c3bf50e545", "filename": "gcc/dse.c", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64520bdc184659160eee1d8eda9dc6a3babc5209/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64520bdc184659160eee1d8eda9dc6a3babc5209/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=64520bdc184659160eee1d8eda9dc6a3babc5209", "patch": "@@ -286,8 +286,26 @@ struct insn_info\n \n   /* This field is only used for the processing of const functions.\n      These functions cannot read memory, but they can read the stack\n-     because that is where they may get their parms.  It is set to\n-     true if the insn may contain a stack pointer based store.  */\n+     because that is where they may get their parms.  We need to be\n+     this conservative because, like the store motion pass, we don't\n+     consider CALL_INSN_FUNCTION_USAGE when processing call insns.\n+     Moreover, we need to distinguish two cases:\n+     1. Before reload (register elimination), the stores related to\n+\toutgoing arguments are stack pointer based and thus deemed\n+\tof non-constant base in this pass.  This requires special\n+\thandling but also means that the frame pointer based stores\n+\tneed not be killed upon encountering a const function call.\n+     2. After reload, the stores related to outgoing arguments can be\n+\teither stack pointer or hard frame pointer based.  This means\n+\tthat we have no other choice than also killing all the frame\n+\tpointer based stores upon encountering a const function call.\n+     This field is set after reload for const function calls.  Having\n+     this set is less severe than a wild read, it just means that all\n+     the frame related stores are killed rather than all the stores.  */\n+  bool frame_read;\n+\n+  /* This field is only used for the processing of const functions.\n+     It is set if the insn may contain a stack pointer based store.  */\n   bool stack_pointer_based;\n \n   /* This is true if any of the sets within the store contains a\n@@ -1967,10 +1985,36 @@ scan_insn (bb_info_t bb_info, rtx insn)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"const call %d\\n\", INSN_UID (insn));\n \n+\t  /* See the head comment of the frame_read field.  */\n+\t  if (reload_completed)\n+\t    insn_info->frame_read = true;\n+\n+\t  /* Loop over the active stores and remove those which are\n+\t     killed by the const function call.  */\n \t  while (i_ptr)\n \t    {\n-\t      /* Remove the stack pointer based stores.  */\n+\t      bool remove_store = false;\n+\n+\t      /* The stack pointer based stores are always killed.  */\n \t      if (i_ptr->stack_pointer_based)\n+\t        remove_store = true;\n+\n+\t      /* If the frame is read, the frame related stores are killed.  */\n+\t      else if (insn_info->frame_read)\n+\t\t{\n+\t\t  store_info_t store_info = i_ptr->store_rec;\n+\n+\t\t  /* Skip the clobbers.  */\n+\t\t  while (!store_info->is_set)\n+\t\t    store_info = store_info->next;\n+\n+\t\t  if (store_info->group_id >= 0\n+\t\t      && VEC_index (group_info_t, rtx_group_vec,\n+\t\t\t\t    store_info->group_id)->frame_related)\n+\t\t    remove_store = true;\n+\t\t}\n+\n+\t      if (remove_store)\n \t\t{\n \t\t  if (dump_file)\n \t\t    dump_insn_info (\"removing from active\", i_ptr);\n@@ -1982,6 +2026,7 @@ scan_insn (bb_info_t bb_info, rtx insn)\n \t\t}\n \t      else\n \t\tlast = i_ptr;\n+\n \t      i_ptr = i_ptr->next_local_store;\n \t    }\n \t}\n@@ -2491,6 +2536,18 @@ scan_reads_nospill (insn_info_t insn_info, bitmap gen, bitmap kill)\n   int i;\n   group_info_t group;\n \n+  /* If this insn reads the frame, kill all the frame related stores.  */\n+  if (insn_info->frame_read)\n+    {\n+      for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)\n+\tif (group->process_globally && group->frame_related)\n+\t  {\n+\t    if (kill)\n+\t      bitmap_ior_into (kill, group->group_kill);\n+\t    bitmap_and_compl_into (gen, group->group_kill); \n+\t  }\n+    }\n+\n   while (read_info)\n     {\n       for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)"}]}