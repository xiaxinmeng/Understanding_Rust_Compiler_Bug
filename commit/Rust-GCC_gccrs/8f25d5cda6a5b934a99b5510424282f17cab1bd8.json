{"sha": "8f25d5cda6a5b934a99b5510424282f17cab1bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyNWQ1Y2RhNmE1YjkzNGE5OWI1NTEwNDI0MjgyZjE3Y2FiMWJkOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1999-02-02T22:39:13Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1999-02-02T22:39:13Z"}, "message": "Patch to fix canadian cross build problem with libcpp.a.\n\n\t* Makefile.in: Change all uses of AR to AR_FOR_TARGET.  Change all uses\n\tof HOST_AR to AR.  Likewise for AR_FLAGS, RANLIB, and RANLIB_TEST.\n\t(RANLIB_TEST): Test to see if ranlib exists.  Only test absolute file\n\tnames if host == target.\n\t(HOST_AR, HOST_AR_FLAGS, HOST_RANLIB, HOST_RANLIB_TEST): Delete.\n\t(AR_FLAGS_FOR_TARGET): Renamed from AR_FOR_TARGET_FLAGS.\n\t(AR, AR_FLAGS, OLDAR, OLDAR_FLAGS, RANLIB, RANLIB_TEST): Delete rules\n\tsetting them to *_FOR_TARGET.\n\t* cross-make (AR, AR_FLAGS, OLDAR, OLDAR_FLAGS, RANLIB, RANLIB_TEST):\n\tDelete.\n\nFrom-SVN: r24991", "tree": {"sha": "ca345f59c9625d228ae465f3c42a5163adabf232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca345f59c9625d228ae465f3c42a5163adabf232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f25d5cda6a5b934a99b5510424282f17cab1bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f25d5cda6a5b934a99b5510424282f17cab1bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f25d5cda6a5b934a99b5510424282f17cab1bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f25d5cda6a5b934a99b5510424282f17cab1bd8/comments", "author": null, "committer": null, "parents": [{"sha": "ecd62820039ac526e1209039ae4608e6f0150089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd62820039ac526e1209039ae4608e6f0150089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd62820039ac526e1209039ae4608e6f0150089"}], "stats": {"total": 145, "additions": 80, "deletions": 65}, "files": [{"sha": "ff921cfd38d9a29301f14e7f91727aa5e9f4ef6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f25d5cda6a5b934a99b5510424282f17cab1bd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f25d5cda6a5b934a99b5510424282f17cab1bd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f25d5cda6a5b934a99b5510424282f17cab1bd8", "patch": "@@ -1,3 +1,16 @@\n+Tue Feb  2 22:38:23 1999  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* Makefile.in: Change all uses of AR to AR_FOR_TARGET.  Change all uses\n+\tof HOST_AR to AR.  Likewise for AR_FLAGS, RANLIB, and RANLIB_TEST.\n+\t(RANLIB_TEST): Test to see if ranlib exists.  Only test absolute file\n+\tnames if host == target.\n+\t(HOST_AR, HOST_AR_FLAGS, HOST_RANLIB, HOST_RANLIB_TEST): Delete.\n+\t(AR_FLAGS_FOR_TARGET): Renamed from AR_FOR_TARGET_FLAGS.\n+\t(AR, AR_FLAGS, OLDAR, OLDAR_FLAGS, RANLIB, RANLIB_TEST): Delete rules\n+\tsetting them to *_FOR_TARGET.\n+\t* cross-make (AR, AR_FLAGS, OLDAR, OLDAR_FLAGS, RANLIB, RANLIB_TEST):\n+\tDelete.\n+\n Tue Feb  2 22:38:19 1999  Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n \t* toplev.h (read_integral_parameter): Declare."}, {"sha": "f0043977dad83e56ba0cfe493f2b4516003b9b29", "filename": "gcc/Makefile.in", "status": "modified", "additions": 67, "deletions": 57, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f25d5cda6a5b934a99b5510424282f17cab1bd8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f25d5cda6a5b934a99b5510424282f17cab1bd8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8f25d5cda6a5b934a99b5510424282f17cab1bd8", "patch": "@@ -114,12 +114,10 @@ P =\n # How to invoke ranlib.\n RANLIB = ranlib\n # Test to use to see whether ranlib exists on the system.\n-RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]\n-\n-HOST_AR = ar\n-HOST_AR_FLAGS = rc\n-HOST_RANLIB = ranlib\n-HOST_RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]\n+RANLIB_TEST = \\\n+  [ -f $(RANLIB) ] \\\n+  || ( [ \"$(host_canonical)\" = \"$(target)\" ] \\\n+       && [ -f /usr/bin/ranlib -o -f /bin/ranlib ] )\n \n # Compiler to use for compiling libgcc1.a.\n # OLDCC should not be the GNU C compiler,\n@@ -195,7 +193,7 @@ AR_FOR_TARGET = ` \\\n        t='$(program_transform_name)'; echo ar | sed -e $$t ; \\\n     fi; \\\n   fi`\n-AR_FOR_TARGET_FLAGS = rc\n+AR_FLAGS_FOR_TARGET = rc\n RANLIB_FOR_TARGET = ` \\\n   if [ -f $(objdir)/../binutils/ranlib ] ; then \\\n     echo $(objdir)/../binutils/ranlib ; \\\n@@ -211,18 +209,6 @@ RANLIB_TEST_FOR_TARGET = \\\n   || ( [ \"$(host_canonical)\" = \"$(target)\" ] \\\n        && [ -f /usr/bin/ranlib -o -f /bin/ranlib ] )\n \n-# We always act like a cross-compiler, even when we're\n-# compiling native.  This is because we want to use our own tools if\n-# we can.  We don't just set RANLIB to a complicated expression,\n-# because the top level Makefile.in might override RANLIB_FOR_TARGET.\n-# These are from the FSF file \"cross-make\".\n-AR = $(AR_FOR_TARGET)\n-AR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n-OLDAR = $(AR_FOR_TARGET)\n-OLDAR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n-RANLIB = $(RANLIB_FOR_TARGET)\n-RANLIB_TEST = $(RANLIB_TEST_FOR_TARGET)\n-  \n # Dir to search for system headers.  Overridden by cross-make.\n SYSTEM_HEADER_DIR = /usr/include\n \n@@ -622,7 +608,7 @@ LANG_EXTRA_HEADERS = @all_headers@\n # subdirectories.\n # ??? The choices here will need some experimenting with.\n FLAGS_TO_PASS = \\\n-\t\"AR_FLAGS=$(AR_FOR_TARGET_FLAGS)\" \\\n+\t\"AR_FLAGS_FOR_TARGET=$(AR_FLAGS_FOR_TARGET)\" \\\n \t\"AR_FOR_TARGET=$(AR_FOR_TARGET)\" \\\n \t\"BISON=$(BISON)\" \\\n \t\"BISONFLAGS=$(BISONFLAGS)\" \\\n@@ -936,7 +922,7 @@ libgcc1.conv: libgcc1.a\n libgcc1.null: $(GCC_PASSES)\n \techo \"void __foo () {}\" > dummy.c\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) -c dummy.c\n-\t$(OLDAR) $(OLDAR_FLAGS) libgcc1.null dummy$(objext)\n+\t$(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) libgcc1.null dummy$(objext)\n \trm -f dummy$(objext) dummy.c\n \n # This is $(LIBGCC1) for a cross-compiler.\n@@ -996,7 +982,9 @@ libgcc1.a: libgcc1.c $(CONFIG_H) $(LIB1FUNCS_EXTRA) config.status\n \t  else true; \\\n \t  fi; \\\n \tdone\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc1.a; else true; fi\n+\t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) tmplibgcc1.a; \\\n+\telse true; fi\n \tmv tmplibgcc1.a libgcc1.a\n \n # Build libgcc1.a from assembler source.  LIB1ASMFUNCS is the list of\n@@ -1019,7 +1007,7 @@ libgcc1-asm.a: libgcc2.ready config.status $(srcdir)/config/$(LIB1ASMSRC)\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} libgcc1.S; \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n \t  mv libgcc1$(objext) $${name}$(objext); \\\n-\t  $(AR) $(AR_FLAGS) tmplibgcc1.a $${name}$(objext); \\\n+\t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc1.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\\n \tdone\n \t-rm -f libgcc1.S\n@@ -1070,7 +1058,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n \t      $(srcdir)/libgcc2.c -o $${name}$(objext); \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t  $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}$(objext); \\\n+\t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\\n \tdone\n \tfor name in $(LIB2FUNCS_EH); \\\n@@ -1079,7 +1067,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -fexceptions $(INCLUDES) -c \\\n \t      -DL$${name} $(srcdir)/libgcc2.c -o $${name}$(objext); \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t  $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}$(objext); \\\n+\t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\\n \tdone\n \tif [ x$(FPBIT) != x ]; then \\\n@@ -1089,7 +1077,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n \t        -DFINE_GRAINED_LIBRARIES $(FPBIT) -o $${name}$(objext); \\\n \t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}$(objext); \\\n+\t    $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t    rm -f $${name}$(objext); \\\n \t  done; \\\n \telse true; fi;\n@@ -1100,7 +1088,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n \t        -DFINE_GRAINED_LIBRARIES $(DPBIT) -o $${name}$(objext); \\\n \t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR) $(AR_FLAGS) tmplibgcc2.a $${name}$(objext); \\\n+\t    $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t    rm -f $${name}$(objext); \\\n \t  done; \\\n \telse true; fi;\n@@ -1116,13 +1104,14 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t  if [ $${name}.txt = $${file} ]; then \\\n \t    for f in .. `cat $${file}`; do if [ x$${f} != x.. ]; then \\\n \t      $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t\tAR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" \\\n+\t\tAR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t\tAR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" CC=\"$(CC)\" \\\n \t\tCFLAGS=\"$(CFLAGS)\" HOST_PREFIX=\"$(HOST_PREFIX)\" \\\n \t\tHOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t\tLANGUAGES=\"$(LANGUAGES)\" \\\n \t\tLIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" $${f}; \\\n \t      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t      $(AR) $(AR_FLAGS) tmplibgcc2.a $${f}; \\\n+\t      $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${f}; \\\n \t      rm -f $${f}; \\\n \t    else true; \\\n \t    fi; done; \\\n@@ -1133,34 +1122,38 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    else true; fi; \\\n \t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c $${file}; \\\n \t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR) $(AR_FLAGS) tmplibgcc2.a $${oname}$(objext); \\\n+\t    $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${oname}$(objext); \\\n \t    rm -f $${name}.s $${oname}$(objext); \\\n \t  fi; \\\n \tdone\n \tmv tmplibgcc2.a libgcc2.a\n # These lines were deleted from above the mv command\n # because ranlibing libgcc.a itself should suffice.\n #\t-if [ x${HPUX_GAS} = x ] ; then \\\n-#\t  if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc2.a; else true; fi; \\\n+#\t  if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+#\t    $(RANLIB_FOR_TARGET) tmplibgcc2.a;\n+#\t  else true; fi; \\\n #\telse true; fi\n \n # Combine the various libraries into a single library, libgcc.a.\n libgcc.a: $(LIBGCC1) $(LIBGCC2)\n \t-rm -rf tmplibgcc.a libgcc.a tmpcopy\n \tmkdir tmpcopy\n \t-if [ x$(LIBGCC1) != x ];\t\t\t\\\n-\tthen (cd tmpcopy; $(AR) x ../$(LIBGCC1));\t\\\n+\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1));\t\\\n \telse true;\t\t\t\t\t\\\n \tfi\n # Some versions of ar (specifically the one in RISC/os 5.x), create an\n # unwritable table of contents file, and then print an error message when\n # the second ar command tries to overwrite this file.  To avoid the error\n # message from ar, we make sure all files are writable.\n \t-(cd tmpcopy; chmod +w * > /dev/null 2>&1)\n-\t(cd tmpcopy; $(AR) x ../$(LIBGCC2))\n-\t(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *$(objext))\n+\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n+\t(cd tmpcopy; $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) ../tmplibgcc.a *$(objext))\n \trm -rf tmpcopy\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi\n+\t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) tmplibgcc.a; \\\n+\telse true; fi\n # Actually build it in tmplibgcc.a, then rename at end,\n # so that libgcc.a itself remains nonexistent if compilation is aborted.\n \tmv tmplibgcc.a libgcc.a\n@@ -1187,8 +1180,11 @@ stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n \t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n \t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t    AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n-\t    RANLIB=\"$(RANLIB)\" RANLIB_TEST=\"$(RANLIB_TEST)\" \\\n+\t    AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t    AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n+\t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n+\t    RANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\" \\\n+\t    RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t    LANGUAGES=\"$(LANGUAGES)\" \\\n \t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t    LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS) $${flags}\" \\\n@@ -1208,7 +1204,9 @@ stmp-multilib-sub:\n \telse true; \\\n \tfi\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t  AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n+\t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n+\t  CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t  LANGUAGES=\"$(LANGUAGES)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" $(LIBGCC2)\n@@ -1220,26 +1218,32 @@ stmp-multilib-sub:\n \tthen true; \\\n \telse \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t    AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n+\t    AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t    AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n+\t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t    LANGUAGES=\"$(LANGUAGES)\" \\\n \t    LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" $(LIBGCC1); \\\n \tfi\n \trm -rf tmplibgcc.a tmpcopy\n \tmkdir tmpcopy\n \tif [ x$(LIBGCC1) != x ]; \\\n-\tthen (cd tmpcopy; $(AR) x ../$(LIBGCC1)); \\\n+\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1)); \\\n \telse true; \\\n \tfi\n-\t(cd tmpcopy; $(AR) x ../$(LIBGCC2))\n-\t(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *$(objext))\n+\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n+\t(cd tmpcopy; $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) ../tmplibgcc.a *$(objext))\n \trm -rf libgcc2.a tmpcopy\n-\tif $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi\n+\tif $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) tmplibgcc.a; \\\n+\telse true; fi\n \tif [ -d $(dir) ]; then true; else mkdir $(dir); fi\n \tmv tmplibgcc.a $(dir)/libgcc.a\n \tfor f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t    AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n+\t    AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t    AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n+\t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t    LANGUAGES=\"$(LANGUAGES)\" \\\n \t    MULTILIB_CFLAGS=\"$(MULTILIB_CFLAGS)\" T=\"t\" t$${f}; \\\n@@ -1978,12 +1982,9 @@ LIBCPP_OBJS =\tcpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o cppfiles.o \\\n # All the other archives built/used by this makefile are for targets.  This\n # one is strictly for the host.\n #\n-# For various reasons AR, RANLIB, etc are all set to the target tools and\n-# must not be used here.  Instead explicitly use the host versions.\n-#\n libcpp.a: $(LIBCPP_OBJS)\n-\t$(HOST_AR) $(HOST_AR_FLAGS) libcpp.a $(LIBCPP_OBJS)\n-\tif $(HOST_RANLIB_TEST) ; then $(HOST_RANLIB) libcpp.a ; else true ; fi\n+\t$(AR) $(AR_FLAGS) libcpp.a $(LIBCPP_OBJS)\n+\tif $(RANLIB_TEST) ; then $(RANLIB) libcpp.a ; else true ; fi\n \n cppmain$(exeext): cppmain.o libcpp.a $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cppmain$(exeext) cppmain.o \\\n@@ -2592,8 +2593,8 @@ install-libgcc: libgcc.a installdirs\n \t-if [ -f libgcc.a ] ; then \\\n \t  rm -f $(libsubdir)/libgcc.a; \\\n \t  $(INSTALL_DATA) libgcc.a $(libsubdir)/libgcc.a; \\\n-\t  if $(RANLIB_TEST) ; then \\\n-\t    (cd $(libsubdir); $(RANLIB) libgcc.a); else true; fi; \\\n+\t  if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t    (cd $(libsubdir); $(RANLIB_FOR_TARGET) libgcc.a); else true; fi; \\\n \t  chmod a-x $(libsubdir)/libgcc.a; \\\n \telse true; fi\n \n@@ -2606,8 +2607,9 @@ install-multilib: stmp-multilib installdirs\n \t    rm -f $(libsubdir)/$${dir}/$${f}; \\\n \t    $(INSTALL_DATA) $${dir}/$${f} $(libsubdir)/$${dir}/$${f}; \\\n \t  done; \\\n-\t  if $(RANLIB_TEST); then \\\n-\t    (cd $(libsubdir)/$${dir}; $(RANLIB) libgcc.a); else true; fi; \\\n+\t  if $(RANLIB_TEST_FOR_TARGET); then \\\n+\t    (cd $(libsubdir)/$${dir}; $(RANLIB_FOR_TARGET) libgcc.a); \\\n+\t  else true; fi; \\\n \t  chmod a-x $(libsubdir)/$${dir}/libgcc.a; \\\n \tdone\n \n@@ -3018,7 +3020,9 @@ stage1-start:\n \t-if [ -f collect-ld$(exeext) ] ; then $(LN_S) ../collect-ld$(exeext) stage1 ; else true ; fi\n \t-rm -f stage1/libgcc.a\n \t-cp libgcc.a stage1\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) stage1/libgcc.a; else true; fi\n+\t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) stage1/libgcc.a; \\\n+\telse true; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage1/$${f} . ; \\\n \telse true; \\\n@@ -3040,7 +3044,9 @@ stage2-start:\n \t-if [ -f collect-ld ] ; then $(LN_S) ../collect-ld$(exeext) stage2 ; else true ; fi\n \t-rm -f stage2/libgcc.a\n \t-cp libgcc.a stage2\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) stage2/libgcc.a; else true; fi\n+\t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) stage2/libgcc.a; \\\n+\telse true; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage2/$${f} . ; \\\n \telse true; \\\n@@ -3062,7 +3068,9 @@ stage3-start:\n \t-if [ -f collect-ld$(exeext) ] ; then $(LN_S) ../collect-ld$(exeext) stage3 ; else true ; fi\n \t-rm -f stage3/libgcc.a\n \t-cp libgcc.a stage3\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) stage3/libgcc.a; else true; fi\n+\t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) stage3/libgcc.a; \\\n+\telse true; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage3/$${f} . ; \\\n \telse true; \\\n@@ -3084,7 +3092,9 @@ stage4-start:\n \t-if [ -f collect-ld$(exeext) ] ; then $(LN_S) ../collect-ld$(exeext) stage4 ; else true ; fi\n \t-rm -f stage4/libgcc.a\n \t-cp libgcc.a stage4\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) stage4/libgcc.a; else true; fi\n+\t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n+\t  $(RANLIB_FOR_TARGET) stage4/libgcc.a; \\\n+\telse true; fi\n \t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  cp stage4/$${f} . ; \\\n \telse true; \\"}, {"sha": "ec260d8dc394835a101fd2334d6d5860a9dd900e", "filename": "gcc/cross-make", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f25d5cda6a5b934a99b5510424282f17cab1bd8/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f25d5cda6a5b934a99b5510424282f17cab1bd8/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=8f25d5cda6a5b934a99b5510424282f17cab1bd8", "patch": "@@ -3,14 +3,6 @@\n # and gives up immediately if the user has not done so.\n LIBGCC1 = $(CROSS_LIBGCC1)\n \n-# Specify tools and options for manipulating libraries for the target machine.\n-AR = $(AR_FOR_TARGET)\n-AR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n-OLDAR = $(AR_FOR_TARGET)\n-OLDAR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n-RANLIB = $(RANLIB_FOR_TARGET)\n-RANLIB_TEST = $(RANLIB_TEST_FOR_TARGET)\n-\n # Dir to search for system headers.  Normally /usr/include.\n # Use CROSS_INCLUDE_DIR not TOOL_INCLUDE_DIR for other vendor's headers.\n SYSTEM_HEADER_DIR = $(tooldir)/sys-include"}]}