{"sha": "5df04a7aa837a13b0e14d269c37bd3871d86bf08", "node_id": "C_kwDOANBUbNoAKDVkZjA0YTdhYTgzN2ExM2IwZTE0ZDI2OWMzN2JkMzg3MWQ4NmJmMDg", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2022-07-22T10:40:50Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2022-08-02T17:25:21Z"}, "message": "btf: do not use the CHAR `encoding' bit for BTF\n\nContrary to CTF and our previous expectations, as per [1], turns out\nthat in BTF:\n\n1) The `encoding' field in integer types shall not be treated as a\n   bitmap, but as an enumerated, i.e. these bits are exclusive to each\n   other.\n\n2) The CHAR bit in `encoding' shall _not_ be set when emitting types\n   for char nor `unsigned char'.\n\nConsequently this patch clears the CHAR bit before emitting the\nvariable part of BTF integral types.  It also updates the testsuite\naccordingly, expanding it to check for BOOL bits.\n\n[1] https://lore.kernel.org/bpf/a73586ad-f2dc-0401-1eba-2004357b7edf@fb.com/T/#t\n\ngcc/ChangeLog:\n\n\t* btfout.cc (output_asm_btf_vlen_bytes): Do not use the CHAR\n\tencoding bit in BTF.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/debug/btf/btf-int-1.c: Do not check for char bits in\n\tbti_encoding and check for bool bits.", "tree": {"sha": "bff5a3fb0832cd3443b0db1d1515a3c77b489e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bff5a3fb0832cd3443b0db1d1515a3c77b489e20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5df04a7aa837a13b0e14d269c37bd3871d86bf08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df04a7aa837a13b0e14d269c37bd3871d86bf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df04a7aa837a13b0e14d269c37bd3871d86bf08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df04a7aa837a13b0e14d269c37bd3871d86bf08/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a11f2d974a912aaaedb0ce32cdfde10193003cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a11f2d974a912aaaedb0ce32cdfde10193003cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a11f2d974a912aaaedb0ce32cdfde10193003cd"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "997a33fa0898926a37a98d9869683fa1f0831f52", "filename": "gcc/btfout.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5df04a7aa837a13b0e14d269c37bd3871d86bf08/gcc%2Fbtfout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5df04a7aa837a13b0e14d269c37bd3871d86bf08/gcc%2Fbtfout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbtfout.cc?ref=5df04a7aa837a13b0e14d269c37bd3871d86bf08", "patch": "@@ -918,6 +918,10 @@ output_asm_btf_vlen_bytes (ctf_container_ref ctfc, ctf_dtdef_ref dtd)\n       if (dtd->dtd_data.ctti_size < 1)\n \tbreak;\n \n+      /* In BTF the CHAR `encoding' seems to not be used, so clear it\n+         here.  */\n+      dtd->dtd_u.dtu_enc.cte_format &= ~BTF_INT_CHAR;\n+\n       encoding = BTF_INT_DATA (dtd->dtd_u.dtu_enc.cte_format,\n \t\t\t       dtd->dtd_u.dtu_enc.cte_offset,\n \t\t\t       dtd->dtd_u.dtu_enc.cte_bits);"}, {"sha": "87d9758e9cb1ab9f65dd498a93e101f19c1bdd06", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-int-1.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5df04a7aa837a13b0e14d269c37bd3871d86bf08/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-int-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5df04a7aa837a13b0e14d269c37bd3871d86bf08/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-int-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-int-1.c?ref=5df04a7aa837a13b0e14d269c37bd3871d86bf08", "patch": "@@ -4,7 +4,8 @@\n    | 0 | encoding | offset | 00 | bits |\n    encoding:\n      signed  1 << 24\n-     char    2 << 24\n+     char    2 << 24  (not used)\n+     bool    4 << 24\n \n    All offsets in this test should be 0.\n    This test does _not_ check number of bits, as it may vary between targets.\n@@ -13,13 +14,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0 -gbtf -dA\" } */\n \n-/* Check for 8 BTF_KIND_INT types.  */\n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x1000000\\[\\t \\]+\\[^\\n\\]*btt_info\" 8 } } */\n+/* Check for 9 BTF_KIND_INT types.  */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x1000000\\[\\t \\]+\\[^\\n\\]*btt_info\" 9 } } */\n \n-/* Check the signed/char flags, but not bit size. */\n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x10000..\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x20000..\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x30000..\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 1 } } */\n+/* Check the signed flags, but not bit size. */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x10000..\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x..\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x.\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x40000..\\[\\t \\]+\\[^\\n\\]*bti_encoding\" 1 } } */\n \n /* Check that there is a string entry for each type name.  */\n /* { dg-final { scan-assembler-times \"ascii \\\"unsigned char.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n@@ -42,3 +44,5 @@ signed int f = -66;\n \n unsigned long int g = 77;\n signed long int h = 88;\n+\n+_Bool x = 1;"}]}