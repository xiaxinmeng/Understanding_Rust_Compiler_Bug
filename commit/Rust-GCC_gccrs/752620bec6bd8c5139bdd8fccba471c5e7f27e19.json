{"sha": "752620bec6bd8c5139bdd8fccba471c5e7f27e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyNjIwYmVjNmJkOGM1MTM5YmRkOGZjY2JhNDcxYzVlN2YyN2UxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-02-21T02:24:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-02-21T02:24:40Z"}, "message": "PR c++/87921 - wrong error with inline static data member.\n\nc_parse_final_cleanups checks DECL_IN_AGGR_P to avoid trying to emit a\nstatic data member that has not been defined.  The inline variable patch\nchanged that to exempt inline variables.  But in this case we haven't\ninstantiated the variable yet, so we really don't have a definition.  This\npatch changes inline variable handling such that DECL_IN_AGGR_P is not set\nfor a defined inline variable, so we can remove all the checks of\nDECL_INLINE_VAR_P after DECL_IN_AGGR_P.\n\nWith that change we were failing on a static data member that had been\ninstantiated due to a use before we got around to processing it in\ninstantiate_class_template; we should detect that and avoid all the\nfinish_static_data_member_decl processing, which assumes that it is the\nfirst time we're seeing the variable.\n\n\t* decl2.c (finish_static_data_member_decl): Don't set DECL_IN_AGGR_P\n\tfor a non-template inline variable.  Do nothing for an\n\talready-instantiated variable.\n\t(c_parse_final_cleanups): Check DECL_IN_AGGR_P without\n\tDECL_INLINE_VAR_P.\n\t* decl.c (check_initializer): Likewise.\n\t(make_rtl_for_nonlocal_decl): Likewise.\n\t* pt.c (instantiate_decl): Likewise.\n\t* typeck2.c (store_init_value): Likewise.\n\nFrom-SVN: r269064", "tree": {"sha": "1eae758075f42772117bea1e986e6e41bb507cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eae758075f42772117bea1e986e6e41bb507cd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/752620bec6bd8c5139bdd8fccba471c5e7f27e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752620bec6bd8c5139bdd8fccba471c5e7f27e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752620bec6bd8c5139bdd8fccba471c5e7f27e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752620bec6bd8c5139bdd8fccba471c5e7f27e19/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "556bef7efc20fd95c79303c055059a24dcb72a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556bef7efc20fd95c79303c055059a24dcb72a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556bef7efc20fd95c79303c055059a24dcb72a5b"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "63b07648776723dfdf6688577cc3be03a371d600", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -1,3 +1,16 @@\n+2019-02-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87921 - wrong error with inline static data member.\n+\t* decl2.c (finish_static_data_member_decl): Don't set DECL_IN_AGGR_P\n+\tfor a non-template inline variable.  Do nothing for an\n+\talready-instantiated variable.\n+\t(c_parse_final_cleanups): Check DECL_IN_AGGR_P without\n+\tDECL_INLINE_VAR_P.\n+\t* decl.c (check_initializer): Likewise.\n+\t(make_rtl_for_nonlocal_decl): Likewise.\n+\t* pt.c (instantiate_decl): Likewise.\n+\t* typeck2.c (store_init_value): Likewise.\n+\n 2019-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89403"}, {"sha": "879712f6dbce7c678f01e56c42f9250705bd44b2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -2956,8 +2956,8 @@ struct GTY(()) lang_decl {\n /* Nonzero for _DECL means that this decl appears in (or will appear\n    in) as a member in a RECORD_TYPE or UNION_TYPE node.  It is also for\n    detecting circularity in case members are multiply defined.  In the\n-   case of a VAR_DECL, it is also used to determine how program storage\n-   should be allocated.  */\n+   case of a VAR_DECL, it means that no definition has been seen, even\n+   if an initializer has been.  */\n #define DECL_IN_AGGR_P(NODE) (DECL_LANG_FLAG_3 (NODE))\n \n /* Nonzero for a VAR_DECL means that the variable's initialization (if"}, {"sha": "612afbacd270ea78eec324f1afcff352536d0887", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -6563,9 +6563,8 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n     }\n \n   if (init_code\n-      && (DECL_IN_AGGR_P (decl)\n-\t  && DECL_INITIALIZED_IN_CLASS_P (decl)\n-\t  && !DECL_VAR_DECLARED_INLINE_P (decl)))\n+      && DECL_IN_AGGR_P (decl)\n+      && DECL_INITIALIZED_IN_CLASS_P (decl))\n     {\n       static int explained = 0;\n \n@@ -6633,8 +6632,7 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n \t external; it is only a declaration, and not a definition.  */\n       if (init == NULL_TREE)\n \tgcc_assert (DECL_EXTERNAL (decl)\n-\t\t    || !TREE_PUBLIC (decl)\n-\t\t    || DECL_INLINE_VAR_P (decl));\n+\t\t    || !TREE_PUBLIC (decl));\n     }\n \n   /* We don't create any RTL for local variables.  */"}, {"sha": "b60110a28652608e01b2edec3d3559f81ba54550", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -744,6 +744,11 @@ finish_static_data_member_decl (tree decl,\n \t\t\t\ttree asmspec_tree,\n \t\t\t\tint flags)\n {\n+  if (DECL_TEMPLATE_INSTANTIATED (decl))\n+    /* We already needed to instantiate this, so the processing in this\n+       function is unnecessary/wrong.  */\n+    return;\n+\n   DECL_CONTEXT (decl) = current_class_type;\n \n   /* We cannot call pushdecl here, because that would fill in the\n@@ -772,7 +777,12 @@ finish_static_data_member_decl (tree decl,\n \t  break;\n \t}\n \n-  DECL_IN_AGGR_P (decl) = 1;\n+  if (DECL_INLINE_VAR_P (decl) && !DECL_TEMPLATE_INSTANTIATION (decl))\n+    /* An inline variable is immediately defined, so don't set DECL_IN_AGGR_P.\n+       Except that if decl is a template instantiation, it isn't defined until\n+       instantiate_decl.  */;\n+  else\n+    DECL_IN_AGGR_P (decl) = 1;\n \n   if (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n       && TYPE_DOMAIN (TREE_TYPE (decl)) == NULL_TREE)\n@@ -4977,7 +4987,7 @@ c_parse_final_cleanups (void)\n \t{\n \t  if (var_finalized_p (decl) || DECL_REALLY_EXTERN (decl)\n \t      /* Don't write it out if we haven't seen a definition.  */\n-\t      || (DECL_IN_AGGR_P (decl) && !DECL_INLINE_VAR_P (decl)))\n+\t      || DECL_IN_AGGR_P (decl))\n \t    continue;\n \t  import_export_decl (decl);\n \t  /* If this static data member is needed, provide it to the"}, {"sha": "a212be8c7475f7d3d097e3a4d3a2558d5bc425e9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -24395,8 +24395,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n     {\n       deleted_p = false;\n       if (DECL_CLASS_SCOPE_P (code_pattern))\n-\tpattern_defined = (! DECL_IN_AGGR_P (code_pattern)\n-\t\t\t   || DECL_INLINE_VAR_P (code_pattern));\n+\tpattern_defined = ! DECL_IN_AGGR_P (code_pattern);\n       else\n \tpattern_defined = ! DECL_EXTERNAL (code_pattern);\n     }"}, {"sha": "b265ea057416241360066c53d288dab6bea233bc", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -843,8 +843,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n       value = fold_non_dependent_expr (value);\n       if (DECL_DECLARED_CONSTEXPR_P (decl)\n \t  || (DECL_IN_AGGR_P (decl)\n-\t      && DECL_INITIALIZED_IN_CLASS_P (decl)\n-\t      && !DECL_VAR_DECLARED_INLINE_P (decl)))\n+\t      && DECL_INITIALIZED_IN_CLASS_P (decl)))\n \t{\n \t  /* Diagnose a non-constant initializer for constexpr variable or\n \t     non-inline in-class-initialized static data member.  */"}, {"sha": "27730106f27cfee3728658c22540722fed5cd38d", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752620bec6bd8c5139bdd8fccba471c5e7f27e19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var6.C?ref=752620bec6bd8c5139bdd8fccba471c5e7f27e19", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/87921\n+// { dg-do compile { target c++17 } }\n+\n+template <class H>\n+struct X\n+{\n+  static inline long x[] = { 1L };\n+  long foo () { return x[0]; }\n+};\n+\n+void\n+bar ()\n+{\n+  class L {};\n+  X<L> v {};\n+}"}]}