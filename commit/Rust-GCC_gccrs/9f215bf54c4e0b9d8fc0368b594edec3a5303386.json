{"sha": "9f215bf54c4e0b9d8fc0368b594edec3a5303386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyMTViZjU0YzRlMGI5ZDhmYzAzNjhiNTk0ZWRlYzNhNTMwMzM4Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T19:51:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T19:51:23Z"}, "message": "predict.*: Use rtx_insn (also touches function.c and config/cris/cris.c)\n\ngcc/\n\t* predict.h (predict_insn_def): Strengthen param \"insn\" from rtx\n\tto rtx_insn *.\n\n\t* function.c (stack_protect_epilogue): Add checked cast to\n\trtx_insn for now when invoking predict_insn_def.\n\n\t* predict.c (predict_insn): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(predict_insn_def): Likewise.\n\t(rtl_predict_edge): Likewise for local \"last_insn\".\n\t(can_predict_insn_p): Strengthen param \"insn\" from const_rtx to\n\tconst rtx_insn *.\n\t(combine_predictions_for_insn): Strengthen param \"insn\" from rtx\n\tto rtx_insn *.\n\t(bb_estimate_probability_locally): Likewise for local \"last_insn\".\n\t(expensive_function_p): Likewise for local \"insn\".\n\n\t* config/cris/cris.c (cris_emit_trap_for_misalignment): Likewise for\n\tlocal \"jmp\", since this is used when invoking predict_insn_def.\n\nFrom-SVN: r214361", "tree": {"sha": "b5b6507d23d368265188e14d4c629eea423dc4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b6507d23d368265188e14d4c629eea423dc4a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f215bf54c4e0b9d8fc0368b594edec3a5303386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f215bf54c4e0b9d8fc0368b594edec3a5303386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f215bf54c4e0b9d8fc0368b594edec3a5303386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f215bf54c4e0b9d8fc0368b594edec3a5303386/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59ea036456a663cb19a4f5a03c0643bd66f55b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ea036456a663cb19a4f5a03c0643bd66f55b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ea036456a663cb19a4f5a03c0643bd66f55b30"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "ef34753341c6a28f4f593eb518db0ea6855ad0a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f215bf54c4e0b9d8fc0368b594edec3a5303386", "patch": "@@ -1,3 +1,25 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* predict.h (predict_insn_def): Strengthen param \"insn\" from rtx\n+\tto rtx_insn *.\n+\n+\t* function.c (stack_protect_epilogue): Add checked cast to\n+\trtx_insn for now when invoking predict_insn_def.\n+\n+\t* predict.c (predict_insn): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(predict_insn_def): Likewise.\n+\t(rtl_predict_edge): Likewise for local \"last_insn\".\n+\t(can_predict_insn_p): Strengthen param \"insn\" from const_rtx to\n+\tconst rtx_insn *.\n+\t(combine_predictions_for_insn): Strengthen param \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(bb_estimate_probability_locally): Likewise for local \"last_insn\".\n+\t(expensive_function_p): Likewise for local \"insn\".\n+\n+\t* config/cris/cris.c (cris_emit_trap_for_misalignment): Likewise for\n+\tlocal \"jmp\", since this is used when invoking predict_insn_def.\n+\n 2014-08-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/62199"}, {"sha": "787c3fc4bc602d5d2c4c7d0ebc0f9050aca6d8dc", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=9f215bf54c4e0b9d8fc0368b594edec3a5303386", "patch": "@@ -2034,7 +2034,8 @@ cris_simple_epilogue (void)\n void\n cris_emit_trap_for_misalignment (rtx mem)\n {\n-  rtx addr, reg, ok_label, andop, jmp;\n+  rtx addr, reg, ok_label, andop;\n+  rtx_insn *jmp;\n   int natural_alignment;\n   gcc_assert (MEM_P (mem));\n "}, {"sha": "4e43471045ac4c5fe12816ce929e1ae7719bd5b7", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9f215bf54c4e0b9d8fc0368b594edec3a5303386", "patch": "@@ -4691,7 +4691,7 @@ stack_protect_epilogue (void)\n      except adding the prediction by hand.  */\n   tmp = get_last_insn ();\n   if (JUMP_P (tmp))\n-    predict_insn_def (tmp, PRED_NORETURN, TAKEN);\n+    predict_insn_def (as_a <rtx_insn *> (tmp), PRED_NORETURN, TAKEN);\n \n   expand_call (targetm.stack_protect_fail (), NULL_RTX, /*ignore=*/true);\n   free_temp_slots ();"}, {"sha": "0fdf9f5a848a2a9f492218ca53810220494e4b2a", "filename": "gcc/predict.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9f215bf54c4e0b9d8fc0368b594edec3a5303386", "patch": "@@ -74,11 +74,11 @@ along with GCC; see the file COPYING3.  If not see\n static sreal real_zero, real_one, real_almost_one, real_br_prob_base,\n \t     real_inv_br_prob_base, real_one_half, real_bb_freq_max;\n \n-static void combine_predictions_for_insn (rtx, basic_block);\n+static void combine_predictions_for_insn (rtx_insn *, basic_block);\n static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n static void predict_paths_leading_to (basic_block, enum br_predictor, enum prediction);\n static void predict_paths_leading_to_edge (edge, enum br_predictor, enum prediction);\n-static bool can_predict_insn_p (const_rtx);\n+static bool can_predict_insn_p (const rtx_insn *);\n \n /* Information we hold about each branch predictor.\n    Filled using information from predict.def.  */\n@@ -563,7 +563,7 @@ br_prob_note_reliable_p (const_rtx note)\n }\n \n static void\n-predict_insn (rtx insn, enum br_predictor predictor, int probability)\n+predict_insn (rtx_insn *insn, enum br_predictor predictor, int probability)\n {\n   gcc_assert (any_condjump_p (insn));\n   if (!flag_guess_branch_prob)\n@@ -578,7 +578,7 @@ predict_insn (rtx insn, enum br_predictor predictor, int probability)\n /* Predict insn by given predictor.  */\n \n void\n-predict_insn_def (rtx insn, enum br_predictor predictor,\n+predict_insn_def (rtx_insn *insn, enum br_predictor predictor,\n \t\t  enum prediction taken)\n {\n    int probability = predictor_info[(int) predictor].hitrate;\n@@ -594,7 +594,7 @@ predict_insn_def (rtx insn, enum br_predictor predictor,\n void\n rtl_predict_edge (edge e, enum br_predictor predictor, int probability)\n {\n-  rtx last_insn;\n+  rtx_insn *last_insn;\n   last_insn = BB_END (e->src);\n \n   /* We can store the branch prediction information only about\n@@ -681,7 +681,7 @@ clear_bb_predictions (basic_block bb)\n    At the moment we represent predictions only on conditional\n    jumps, not at computed jump or other complicated cases.  */\n static bool\n-can_predict_insn_p (const_rtx insn)\n+can_predict_insn_p (const rtx_insn *insn)\n {\n   return (JUMP_P (insn)\n \t  && any_condjump_p (insn)\n@@ -774,7 +774,7 @@ set_even_probabilities (basic_block bb)\n    note if not already present.  Remove now useless REG_BR_PRED notes.  */\n \n static void\n-combine_predictions_for_insn (rtx insn, basic_block bb)\n+combine_predictions_for_insn (rtx_insn *insn, basic_block bb)\n {\n   rtx prob_note;\n   rtx *pnote;\n@@ -1668,7 +1668,7 @@ predict_loops (void)\n static void\n bb_estimate_probability_locally (basic_block bb)\n {\n-  rtx last_insn = BB_END (bb);\n+  rtx_insn *last_insn = BB_END (bb);\n   rtx cond;\n \n   if (! can_predict_insn_p (last_insn))\n@@ -2890,7 +2890,7 @@ expensive_function_p (int threshold)\n   limit = ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency * threshold;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n \n       FOR_BB_INSNS (bb, insn)\n \tif (active_insn_p (insn))"}, {"sha": "c75b6b6b2388574941ed48973482320459d725b6", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f215bf54c4e0b9d8fc0368b594edec3a5303386/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=9f215bf54c4e0b9d8fc0368b594edec3a5303386", "patch": "@@ -45,7 +45,7 @@ enum prediction\n    TAKEN\n };\n \n-extern void predict_insn_def (rtx, enum br_predictor, enum prediction);\n+extern void predict_insn_def (rtx_insn *, enum br_predictor, enum prediction);\n extern int counts_to_freqs (void);\n extern void handle_missing_profiles (void);\n extern void estimate_bb_frequencies (bool);"}]}