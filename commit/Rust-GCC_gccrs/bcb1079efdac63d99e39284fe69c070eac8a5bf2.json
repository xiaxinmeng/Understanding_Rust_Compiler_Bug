{"sha": "bcb1079efdac63d99e39284fe69c070eac8a5bf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiMTA3OWVmZGFjNjNkOTllMzkyODRmZTY5YzA3MGVhYzhhNWJmMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-20T13:46:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-20T13:46:43Z"}, "message": "cp-tree.h (struct lang_type_class): Remove vfields field.\n\n\t* cp-tree.h (struct lang_type_class): Remove vfields field.\n\t(CLASSTYPE_VFIELDS): Remove.\n\t(SET_BINFO_NEW_VTABLE_MARKED): Adjust.\n\t* class.c (determine_primary_base): Remove CLASSTYPE_VFIELDS\n\thandling.\n\t(dfs_modify_vtables): Use TYPE_CONTAINS_VPTR_P.\n\t(finish_struct_1): Remove CLASSTYPE_VFIELDS handling.\n\t* init.c (dfs_initialize_vtbl_ptrs): Use TYPE_CONTAINS_VPTR_P.\n\nFrom-SVN: r84950", "tree": {"sha": "e31689fea107893a0dd14fdbbf6fbd860fad82b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31689fea107893a0dd14fdbbf6fbd860fad82b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb1079efdac63d99e39284fe69c070eac8a5bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb1079efdac63d99e39284fe69c070eac8a5bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb1079efdac63d99e39284fe69c070eac8a5bf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb1079efdac63d99e39284fe69c070eac8a5bf2/comments", "author": null, "committer": null, "parents": [{"sha": "fa743e8cda25ba09a4731a3443df9e0e56e87581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa743e8cda25ba09a4731a3443df9e0e56e87581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa743e8cda25ba09a4731a3443df9e0e56e87581"}], "stats": {"total": 80, "additions": 21, "deletions": 59}, "files": [{"sha": "fd997b0434973e898e4ec3d42da76fb82329d167", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bcb1079efdac63d99e39284fe69c070eac8a5bf2", "patch": "@@ -1,3 +1,14 @@\n+2004-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (struct lang_type_class): Remove vfields field.\n+\t(CLASSTYPE_VFIELDS): Remove.\n+\t(SET_BINFO_NEW_VTABLE_MARKED): Adjust.\n+\t* class.c (determine_primary_base): Remove CLASSTYPE_VFIELDS\n+\thandling.\n+\t(dfs_modify_vtables): Use TYPE_CONTAINS_VPTR_P.\n+\t(finish_struct_1): Remove CLASSTYPE_VFIELDS handling.\n+\t* init.c (dfs_initialize_vtbl_ptrs): Use TYPE_CONTAINS_VPTR_P.\n+\n 2004-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (DEF_VEC_P(tree)): Remove here."}, {"sha": "169dd917ed7d956ab41ed9fbb49437f3a510376a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 45, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=bcb1079efdac63d99e39284fe69c070eac8a5bf2", "patch": "@@ -1282,25 +1282,7 @@ determine_primary_base (tree t)\n \t    continue;\n \n \t  if (!CLASSTYPE_HAS_PRIMARY_BASE_P (t))\n-\t    {\n-\t      set_primary_base (t, base_binfo);\n-\t      CLASSTYPE_VFIELDS (t) = copy_list (CLASSTYPE_VFIELDS (basetype));\n-\t    }\n-\t  else\n-\t    {\n-\t      tree vfields;\n-\n-\t      /* Only add unique vfields, and flatten them out as we go.  */\n-\t      for (vfields = CLASSTYPE_VFIELDS (basetype);\n-\t\t   vfields;\n-\t\t   vfields = TREE_CHAIN (vfields))\n-\t\tif (VF_BINFO_VALUE (vfields) == NULL_TREE\n-\t\t    || ! BINFO_VIRTUAL_P (VF_BINFO_VALUE (vfields)))\n-\t\t  CLASSTYPE_VFIELDS (t) \n-\t\t    = tree_cons (base_binfo, \n-\t\t\t\t VF_BASETYPE_VALUE (vfields),\n-\t\t\t\t CLASSTYPE_VFIELDS (t));\n-\t    }\n+\t    set_primary_base (t, base_binfo);\n \t}\n     }\n \n@@ -1382,11 +1364,7 @@ determine_primary_base (tree t)\n \n       /* If we've got a primary base, use it.  */\n       if (candidate)\n-\t{\n-\t  set_primary_base (t, candidate);\n-\t  CLASSTYPE_VFIELDS (t) \n-\t    = copy_list (CLASSTYPE_VFIELDS (BINFO_TYPE (candidate)));\n-\t}\t\n+\tset_primary_base (t, candidate);\n     }\n \n   /* Mark the primary base classes at this point.  */\n@@ -2193,15 +2171,18 @@ update_vtable_entry_for_fn (tree t, tree binfo, tree fn, tree* virtuals,\n static tree\n dfs_modify_vtables (tree binfo, void* data)\n {\n+  tree t = (tree) data;\n+  \n   if (/* There's no need to modify the vtable for a non-virtual\n          primary base; we're not going to use that vtable anyhow.\n \t We do still need to do this for virtual primary bases, as they\n \t could become non-primary in a construction vtable.  */\n       (!BINFO_PRIMARY_P (binfo) || BINFO_VIRTUAL_P (binfo))\n       /* Similarly, a base without a vtable needs no modification.  */\n-      && CLASSTYPE_VFIELDS (BINFO_TYPE (binfo)))\n+      && TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo))\n+      /* Don't do the primary vtable, if it's new.  */\n+      && (BINFO_TYPE (binfo) != t || CLASSTYPE_HAS_PRIMARY_BASE_P (t)))\n     {\n-      tree t = (tree) data;\n       tree virtuals;\n       tree old_virtuals;\n       unsigned ix;\n@@ -4963,12 +4944,6 @@ finish_struct_1 (tree t)\n \n   virtuals = modify_all_vtables (t, nreverse (virtuals));\n \n-  /* If we created a new vtbl pointer for this class, add it to the\n-     list.  */\n-  if (TYPE_VFIELD (t) && !CLASSTYPE_HAS_PRIMARY_BASE_P (t))\n-    CLASSTYPE_VFIELDS (t) \n-      = chainon (CLASSTYPE_VFIELDS (t), build_tree_list (NULL_TREE, t));\n-\n   /* If necessary, create the primary vtable for this class.  */\n   if (virtuals || TYPE_CONTAINS_VPTR_P (t))\n     {\n@@ -5046,19 +5021,6 @@ finish_struct_1 (tree t)\n       DECL_SORTED_FIELDS (TYPE_MAIN_DECL (t)) = field_vec;\n     }\n \n-  if (TYPE_HAS_CONSTRUCTOR (t))\n-    {\n-      tree vfields = CLASSTYPE_VFIELDS (t);\n-\n-      for (vfields = CLASSTYPE_VFIELDS (t);\n-\t   vfields; vfields = TREE_CHAIN (vfields))\n-\t/* Mark the fact that constructor for T could affect anybody\n-\t   inheriting from T who wants to initialize vtables for\n-\t   VFIELDS's type.  */\n-\tif (VF_BINFO_VALUE (vfields))\n-\t  TREE_ADDRESSABLE (vfields) = 1;\n-    }\n-\n   /* Make the rtl for any new vtables we have created, and unmark\n      the base types we marked.  */\n   finish_vtbls (t);"}, {"sha": "60217c4373ea33e2958197a49a3ea9a2e950c8da", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bcb1079efdac63d99e39284fe69c070eac8a5bf2", "patch": "@@ -1003,7 +1003,6 @@ struct lang_type_class GTY(())\n   unsigned dummy : 9;\n \n   tree primary_base;\n-  tree vfields;\n   tree vcall_indices;\n   tree vtables;\n   tree typeinfo_var;\n@@ -1386,9 +1385,8 @@ struct lang_type GTY(())\n #define SET_BINFO_NEW_VTABLE_MARKED(B)\t\t\t\t\t \\\n   (BINFO_NEW_VTABLE_MARKED (B) = 1,\t\t\t\t\t \\\n    my_friendly_assert (!BINFO_PRIMARY_P (B)\t\t\t\t \\\n-\t\t       || BINFO_VIRTUAL_P (B), 20000517),\t\t\t \\\n-   my_friendly_assert (CLASSTYPE_VFIELDS (BINFO_TYPE (B)) != NULL_TREE,  \\\n-\t\t       20000517))\n+\t\t       || BINFO_VIRTUAL_P (B), 20000517),\t\t \\\n+   my_friendly_assert (TYPE_VFIELD (BINFO_TYPE (B)), 20000517))\n \n /* Nonzero if this BINFO is a primary base class.  */\n \n@@ -1433,15 +1431,6 @@ struct lang_type GTY(())\n \n /* Accessor macros for the vfield slots in structures.  */\n \n-/* List of virtual table fields that this type contains (both the primary\n-   and secondaries). The TREE_VALUE is the class type where the vtable\n-   field was introduced. For a vtable field inherited from the primary\n-   base, or introduced by this class, the TREE_PURPOSE is NULL. For\n-   other vtable fields (those from non-primary bases), the\n-   TREE_PURPOSE is the BINFO of the base through which the vtable was\n-   inherited.  */\n-#define CLASSTYPE_VFIELDS(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->vfields)\n-\n /* Get the BINFO that introduced this vtable into the hierarchy (will\n    be NULL for those created at this level, or from a primary\n    hierarchy).  */"}, {"sha": "776b99670d7d13f822c94be8007b5c95d2c701d1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb1079efdac63d99e39284fe69c070eac8a5bf2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=bcb1079efdac63d99e39284fe69c070eac8a5bf2", "patch": "@@ -102,7 +102,7 @@ static tree\n dfs_initialize_vtbl_ptrs (tree binfo, void *data)\n {\n   if ((!BINFO_PRIMARY_P (binfo) || BINFO_VIRTUAL_P (binfo))\n-      && CLASSTYPE_VFIELDS (BINFO_TYPE (binfo)))\n+      && TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo)))\n     {\n       tree base_ptr = TREE_VALUE ((tree) data);\n "}]}