{"sha": "faf28b3a89f32229935b0f60383423315121eb8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmMjhiM2E4OWYzMjIyOTkzNWIwZjYwMzgzNDIzMzE1MTIxZWI4ZA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-04-17T16:32:31Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-04-17T16:32:31Z"}, "message": "trans-decl.c (gfc_finish_decl): Remove unused second argument 'init'.\n\n* trans-decl.c (gfc_finish_decl): Remove unused second argument\n'init'.  Simplify code accordingly.  Remove calls to\ngfc_fatal_error in favor of gcc_assert.\n(create_function_arglist): Remove second argument from calls to\ngfc_finish-decl.\n(gfc_trans_dummy_character): Likewise.\n\nFrom-SVN: r123917", "tree": {"sha": "c84be2592e9648c8f9502dea4146b1df362551e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c84be2592e9648c8f9502dea4146b1df362551e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faf28b3a89f32229935b0f60383423315121eb8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf28b3a89f32229935b0f60383423315121eb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf28b3a89f32229935b0f60383423315121eb8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf28b3a89f32229935b0f60383423315121eb8d/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c092b0457f310ebea7526702dbb68216ae447550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c092b0457f310ebea7526702dbb68216ae447550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c092b0457f310ebea7526702dbb68216ae447550"}], "stats": {"total": 87, "additions": 33, "deletions": 54}, "files": [{"sha": "e97799fc4a1a9be29c0f2968593f2a8d390e589e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 33, "deletions": 54, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf28b3a89f32229935b0f60383423315121eb8d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf28b3a89f32229935b0f60383423315121eb8d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=faf28b3a89f32229935b0f60383423315121eb8d", "patch": "@@ -406,59 +406,38 @@ gfc_finish_cray_pointee (tree decl, gfc_symbol *sym)\n }\n \n \n-/* Finish processing of a declaration and install its initial value.  */\n+/* Finish processing of a declaration without an initial value.  */\n \n static void\n-gfc_finish_decl (tree decl, tree init)\n+gfc_finish_decl (tree decl)\n {\n-  if (TREE_CODE (decl) == PARM_DECL)\n-    gcc_assert (init == NULL_TREE);\n-  /* Remember that PARM_DECL doesn't have a DECL_INITIAL field per se\n-     -- it overlaps DECL_ARG_TYPE.  */\n-  else if (init == NULL_TREE)\n-    gcc_assert (DECL_INITIAL (decl) == NULL_TREE);\n-  else\n-    gcc_assert (DECL_INITIAL (decl) == error_mark_node);\n-\n-  if (init != NULL_TREE)\n-    {\n-      if (TREE_CODE (decl) != TYPE_DECL)\n-\tDECL_INITIAL (decl) = init;\n-      else\n-\t{\n-\t  /* typedef foo = bar; store the type of bar as the type of foo.  */\n-\t  TREE_TYPE (decl) = TREE_TYPE (init);\n-\t  DECL_INITIAL (decl) = init = 0;\n-\t}\n-    }\n-\n-  if (TREE_CODE (decl) == VAR_DECL)\n-    {\n-      if (DECL_SIZE (decl) == NULL_TREE\n-\t  && TYPE_SIZE (TREE_TYPE (decl)) != NULL_TREE)\n-\tlayout_decl (decl, 0);\n-\n-      /* A static variable with an incomplete type is an error if it is\n-         initialized. Also if it is not file scope. Otherwise, let it\n-         through, but if it is not `extern' then it may cause an error\n-         message later.  */\n-      /* An automatic variable with an incomplete type is an error.  */\n-      if (DECL_SIZE (decl) == NULL_TREE\n-          && (TREE_STATIC (decl) ? (DECL_INITIAL (decl) != 0\n-\t\t\t\t    || DECL_CONTEXT (decl) != 0)\n-                                 : !DECL_EXTERNAL (decl)))\n-\t{\n-\t  gfc_fatal_error (\"storage size not known\");\n-\t}\n+  gcc_assert (TREE_CODE (decl) == PARM_DECL\n+\t      || DECL_INITIAL (decl) == NULL_TREE);\n \n-      if ((DECL_EXTERNAL (decl) || TREE_STATIC (decl))\n-\t  && (DECL_SIZE (decl) != 0)\n-\t  && (TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST))\n-\t{\n-\t  gfc_fatal_error (\"storage size not constant\");\n-\t}\n-    }\n+  if (TREE_CODE (decl) != VAR_DECL)\n+    return;\n \n+  if (DECL_SIZE (decl) == NULL_TREE\n+      && TYPE_SIZE (TREE_TYPE (decl)) != NULL_TREE)\n+    layout_decl (decl, 0);\n+\n+  /* A few consistency checks.  */\n+  /* A static variable with an incomplete type is an error if it is\n+     initialized. Also if it is not file scope. Otherwise, let it\n+     through, but if it is not `extern' then it may cause an error\n+     message later.  */\n+  /* An automatic variable with an incomplete type is an error.  */\n+\n+  /* We should know the storage size.  */\n+  gcc_assert (DECL_SIZE (decl) != NULL_TREE\n+\t      || (TREE_STATIC (decl) \n+\t\t  ? (!DECL_INITIAL (decl) || !DECL_CONTEXT (decl))\n+\t\t  : DECL_EXTERNAL (decl)));\n+\n+  /* The storage size should be constant.  */\n+  gcc_assert ((!DECL_EXTERNAL (decl) && !TREE_STATIC (decl))\n+\t      || !DECL_SIZE (decl)\n+\t      || TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST);\n }\n \n \n@@ -1324,7 +1303,7 @@ create_function_arglist (gfc_symbol * sym)\n       DECL_CONTEXT (parm) = fndecl;\n       DECL_ARG_TYPE (parm) = type;\n       TREE_READONLY (parm) = 1;\n-      gfc_finish_decl (parm, NULL_TREE);\n+      gfc_finish_decl (parm);\n       DECL_ARTIFICIAL (parm) = 1;\n \n       arglist = chainon (arglist, parm);\n@@ -1354,7 +1333,7 @@ create_function_arglist (gfc_symbol * sym)\n \t  DECL_ARG_TYPE (length) = len_type;\n \t  TREE_READONLY (length) = 1;\n \t  DECL_ARTIFICIAL (length) = 1;\n-\t  gfc_finish_decl (length, NULL_TREE);\n+\t  gfc_finish_decl (length);\n \t  if (sym->ts.cl->backend_decl == NULL\n \t      || sym->ts.cl->backend_decl == length)\n \t    {\n@@ -1389,7 +1368,7 @@ create_function_arglist (gfc_symbol * sym)\n       DECL_ARG_TYPE (parm) = TREE_VALUE (typelist);\n       TREE_READONLY (parm) = 1;\n       DECL_ARTIFICIAL (parm) = 1;\n-      gfc_finish_decl (parm, NULL_TREE);\n+      gfc_finish_decl (parm);\n \n       arglist = chainon (arglist, parm);\n       typelist = TREE_CHAIN (typelist);\n@@ -1432,7 +1411,7 @@ create_function_arglist (gfc_symbol * sym)\n \t  DECL_ARTIFICIAL (length) = 1;\n \t  DECL_ARG_TYPE (length) = len_type;\n \t  TREE_READONLY (length) = 1;\n-\t  gfc_finish_decl (length, NULL_TREE);\n+\t  gfc_finish_decl (length);\n \n \t  /* TODO: Check string lengths when -fbounds-check.  */\n \n@@ -1501,7 +1480,7 @@ create_function_arglist (gfc_symbol * sym)\n       /* All implementation args are read-only.  */\n       TREE_READONLY (parm) = 1;\n \n-      gfc_finish_decl (parm, NULL_TREE);\n+      gfc_finish_decl (parm);\n \n       f->sym->backend_decl = parm;\n \n@@ -2417,7 +2396,7 @@ gfc_trans_dummy_character (gfc_symbol *sym, gfc_charlen *cl, tree fnbody)\n {\n   stmtblock_t body;\n \n-  gfc_finish_decl (cl->backend_decl, NULL_TREE);\n+  gfc_finish_decl (cl->backend_decl);\n \n   gfc_start_block (&body);\n "}]}