{"sha": "6492cec069bccf817ac5e984fb3eca407056a566", "node_id": "C_kwDOANBUbNoAKDY0OTJjZWMwNjliY2NmODE3YWM1ZTk4NGZiM2VjYTQwNzA1NmE1NjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-15T07:00:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-15T07:00:21Z"}, "message": "c++: Implement C++23 P2589R1 - - static operator[]\n\nHere is a patch that implements the static operator[] paper.\nOne thing that doesn't work properly is the same problem as I've filed\nyesterday for static operator() - PR107624 - that side-effects of\nthe postfix-expression on which the call or subscript operator are\napplied are thrown away, I assume we have to add them into COMPOUND_EXPR\nsomewhere after we find out that the we've chosen a static member function\noperator.\n\n2022-11-15  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/c-family/\n\t* c-cppbuiltin.cc (c_cpp_builtins): Bump C++23\n\t__cpp_multidimensional_subscript macro value to 202211L.\ngcc/cp/\n\t* decl.cc (grok_op_properties): Implement C++23 P2589R1\n\t- static operator[].  Handle operator[] similarly to operator()\n\t- allow static member functions, but pedwarn on it for C++20 and\n\tolder.  Unlike operator(), perform rest of checks on it though for\n\tC++20.\n\t* call.cc (add_operator_candidates): For operator[] with class\n\ttyped first parameter, pass that parameter as first_arg and\n\tan adjusted arglist without that parameter.\ngcc/testsuite/\n\t* g++.dg/cpp23/subscript9.C: New test.\n\t* g++.dg/cpp23/feat-cxx2b.C: Expect a newer\n\t__cpp_multidimensional_subscript value.\n\t* g++.old-deja/g++.bugs/900210_10.C: Don't expect an error\n\tfor C++23 or later.", "tree": {"sha": "fefcbffd560982373a49d8a1a6b0b9c119bd20c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fefcbffd560982373a49d8a1a6b0b9c119bd20c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6492cec069bccf817ac5e984fb3eca407056a566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6492cec069bccf817ac5e984fb3eca407056a566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6492cec069bccf817ac5e984fb3eca407056a566", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6492cec069bccf817ac5e984fb3eca407056a566/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f4fcf9dfb8794a11d4ee63899b820aa9257f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f4fcf9dfb8794a11d4ee63899b820aa9257f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f4fcf9dfb8794a11d4ee63899b820aa9257f50"}], "stats": {"total": 144, "additions": 97, "deletions": 47}, "files": [{"sha": "f0be05981905175ae74864f9e8cb9b7bd8052b8f", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=6492cec069bccf817ac5e984fb3eca407056a566", "patch": "@@ -1075,7 +1075,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_size_t_suffix=202011L\");\n \t  cpp_define (pfile, \"__cpp_if_consteval=202106L\");\n \t  cpp_define (pfile, \"__cpp_constexpr=202110L\");\n-\t  cpp_define (pfile, \"__cpp_multidimensional_subscript=202110L\");\n+\t  cpp_define (pfile, \"__cpp_multidimensional_subscript=202211L\");\n \t  cpp_define (pfile, \"__cpp_named_character_escapes=202207L\");\n \t  cpp_define (pfile, \"__cpp_static_call_operator=202207L\");\n \t  cpp_define (pfile, \"__cpp_implicit_move=202207L\");"}, {"sha": "dbb01ec6ee55c49a1987f67a4de7a47145bf1973", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=6492cec069bccf817ac5e984fb3eca407056a566", "patch": "@@ -6589,12 +6589,36 @@ add_operator_candidates (z_candidate **candidates,\n       if (fns == error_mark_node)\n \treturn error_mark_node;\n       if (fns)\n-\tadd_candidates (BASELINK_FUNCTIONS (fns),\n-\t\t\tNULL_TREE, arglist, NULL_TREE,\n-\t\t\tNULL_TREE, false,\n-\t\t\tBASELINK_BINFO (fns),\n-\t\t\tBASELINK_ACCESS_BINFO (fns),\n-\t\t\tflags, candidates, complain);\n+\t{\n+\t  if (code == ARRAY_REF)\n+\t    {\n+\t      vec<tree,va_gc> *restlist = make_tree_vector ();\n+\t      for (unsigned i = 1; i < nargs; ++i)\n+\t\tvec_safe_push (restlist, (*arglist)[i]);\n+\t      z_candidate *save_cand = *candidates;\n+\t      add_candidates (BASELINK_FUNCTIONS (fns),\n+\t\t\t      (*arglist)[0], restlist, NULL_TREE,\n+\t\t\t      NULL_TREE, false,\n+\t\t\t      BASELINK_BINFO (fns),\n+\t\t\t      BASELINK_ACCESS_BINFO (fns),\n+\t\t\t      flags, candidates, complain);\n+\t      /* Release the vec if we didn't add a candidate that uses it.  */\n+\t      for (z_candidate *c = *candidates; c != save_cand; c = c->next)\n+\t\tif (c->args == restlist)\n+\t\t  {\n+\t\t    restlist = NULL;\n+\t\t    break;\n+\t\t  }\n+\t      release_tree_vector (restlist);\n+\t    }\n+\t  else\n+\t    add_candidates (BASELINK_FUNCTIONS (fns),\n+\t\t\t    NULL_TREE, arglist, NULL_TREE,\n+\t\t\t    NULL_TREE, false,\n+\t\t\t    BASELINK_BINFO (fns),\n+\t\t\t    BASELINK_ACCESS_BINFO (fns),\n+\t\t\t    flags, candidates, complain);\n+\t}\n     }\n   /* Per [over.match.oper]3.2, if no operand has a class type, then\n      only non-member functions that have type T1 or reference to"}, {"sha": "c83fdac4984469015ca5ae239728aae52b4380fc", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=6492cec069bccf817ac5e984fb3eca407056a566", "patch": "@@ -15377,7 +15377,15 @@ grok_op_properties (tree decl, bool complain)\n      an enumeration, or a reference to an enumeration.  13.4.0.6 */\n   if (! methodp || DECL_STATIC_FUNCTION_P (decl))\n     {\n-      if (operator_code == CALL_EXPR)\n+      if (operator_code == TYPE_EXPR\n+\t  || operator_code == COMPONENT_REF\n+\t  || operator_code == NOP_EXPR)\n+\t{\n+\t  error_at (loc, \"%qD must be a non-static member function\", decl);\n+\t  return false;\n+\t}\n+\n+      if (operator_code == CALL_EXPR || operator_code == ARRAY_REF)\n \t{\n \t  if (! DECL_STATIC_FUNCTION_P (decl))\n \t    {\n@@ -15386,52 +15394,41 @@ grok_op_properties (tree decl, bool complain)\n \t    }\n \t  if (cxx_dialect < cxx23\n \t      /* For lambdas we diagnose static lambda specifier elsewhere.  */\n-\t      && ! LAMBDA_FUNCTION_P (decl)\n+\t      && (operator_code == ARRAY_REF || ! LAMBDA_FUNCTION_P (decl))\n \t      /* For instantiations, we have diagnosed this already.  */\n \t      && ! DECL_USE_TEMPLATE (decl))\n \t    pedwarn (loc, OPT_Wc__23_extensions, \"%qD may be a static member \"\n-\t      \"function only with %<-std=c++23%> or %<-std=gnu++23%>\", decl);\n-\t  /* There are no further restrictions on the arguments to an\n-\t     overloaded \"operator ()\".  */\n-\t  return true;\n+\t\t     \"function only with %<-std=c++23%> or %<-std=gnu++23%>\",\n+\t\t     decl);\n \t}\n-      if (operator_code == TYPE_EXPR\n-\t  || operator_code == COMPONENT_REF\n-\t  || operator_code == ARRAY_REF\n-\t  || operator_code == NOP_EXPR)\n-\t{\n-\t  error_at (loc, \"%qD must be a non-static member function\", decl);\n-\t  return false;\n-\t}\n-\n-      if (DECL_STATIC_FUNCTION_P (decl))\n+      else if (DECL_STATIC_FUNCTION_P (decl))\n \t{\n \t  error_at (loc, \"%qD must be either a non-static member \"\n \t\t    \"function or a non-member function\", decl);\n \t  return false;\n \t}\n-\n-      for (tree arg = argtypes; ; arg = TREE_CHAIN (arg))\n-\t{\n-\t  if (!arg || arg == void_list_node)\n-\t    {\n-\t      if (complain)\n-\t\terror_at(loc, \"%qD must have an argument of class or \"\n-\t\t\t \"enumerated type\", decl);\n-\t      return false;\n-\t    }\n+      else\n+\tfor (tree arg = argtypes; ; arg = TREE_CHAIN (arg))\n+\t  {\n+\t    if (!arg || arg == void_list_node)\n+\t      {\n+\t\tif (complain)\n+\t\t  error_at (loc, \"%qD must have an argument of class or \"\n+\t\t\t    \"enumerated type\", decl);\n+\t\treturn false;\n+\t      }\n       \n-\t  tree type = non_reference (TREE_VALUE (arg));\n-\t  if (type == error_mark_node)\n-\t    return false;\n-\t  \n-\t  /* MAYBE_CLASS_TYPE_P, rather than CLASS_TYPE_P, is used\n-\t     because these checks are performed even on template\n-\t     functions.  */\n-\t  if (MAYBE_CLASS_TYPE_P (type)\n-\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n-\t    break;\n-\t}\n+\t    tree type = non_reference (TREE_VALUE (arg));\n+\t    if (type == error_mark_node)\n+\t      return false;\n+\n+\t    /* MAYBE_CLASS_TYPE_P, rather than CLASS_TYPE_P, is used\n+\t       because these checks are performed even on template\n+\t       functions.  */\n+\t    if (MAYBE_CLASS_TYPE_P (type)\n+\t\t|| TREE_CODE (type) == ENUMERAL_TYPE)\n+\t      break;\n+\t  }\n     }\n \n   if (operator_code == CALL_EXPR)"}, {"sha": "85e66871fd1a25034f25b2da00625bd65b17e334", "filename": "gcc/testsuite/g++.dg/cpp23/feat-cxx2b.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C?ref=6492cec069bccf817ac5e984fb3eca407056a566", "patch": "@@ -556,8 +556,8 @@\n \n #ifndef __cpp_multidimensional_subscript\n #  error \"__cpp_multidimensional_subscript\"\n-#elif __cpp_multidimensional_subscript != 202110\n-#  error \"__cpp_multidimensional_subscript != 202110\"\n+#elif __cpp_multidimensional_subscript != 202211\n+#  error \"__cpp_multidimensional_subscript != 202211\"\n #endif\n \n #ifndef __cpp_named_character_escapes"}, {"sha": "72cea4b8cab6eecf309e1130cb870de0d43e9508", "filename": "gcc/testsuite/g++.dg/cpp23/subscript9.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript9.C?ref=6492cec069bccf817ac5e984fb3eca407056a566", "patch": "@@ -0,0 +1,29 @@\n+// P2589R1\n+// { dg-do run { target c++23 } }\n+\n+extern \"C\" void abort ();\n+\n+struct S\n+{\n+  S () {};\n+  static int &operator[] () { return a[0]; }\n+  static int &operator[] (int x) { return a[x]; }\n+  static int &operator[] (int x, long y) { return a[x + y * 8]; }\n+  static int a[64];\n+};\n+int S::a[64];\n+\n+int\n+main ()\n+{\n+  S s;\n+  for (int i = 0; i < 64; i++)\n+    s.a[i] = 64 - i;\n+  if (s[] != 64 || s[3] != 61 || s[4, 5] != 20)\n+    abort ();\n+  s[]++;\n+  s[42]++;\n+  ++s[3, 2];\n+  if (s.a[0] != 65 || s.a[42] != 23 || s.a[19] != 46)\n+    abort ();\n+}"}, {"sha": "7fbee3f5c434b10f50a557f1e2a63abc5eaf5fbe", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900210_10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900210_10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6492cec069bccf817ac5e984fb3eca407056a566/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900210_10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900210_10.C?ref=6492cec069bccf817ac5e984fb3eca407056a566", "patch": "@@ -9,7 +9,7 @@\n // keywords: operator[], static function members\n \n struct struct0 {\n-  static int operator[] ();\t\t/* { dg-error \"\" } */\n+  static int operator[] ();\t\t/* { dg-error \"\" \"\" { target c++20_down } } */\n };\n \n int main () { return 0; }"}]}