{"sha": "4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiZGVlYjg4OWRmZDRkY2NlMjE0ZTE1MjViNTZhNzQ2NDEyOGEzYw==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-02-18T01:54:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:13Z"}, "message": "[Ada] Avoid inappropriate error messages regarding aggregates and variant parts\n\ngcc/ada/\n\n\t* sem_util.adb (Gather_Components): Factor the test that was\n\talready being used to govern emitting a pre-Ada_2020 error\n\tmessage into an expression function,\n\tOK_Scope_For_Discrim_Value_Error_Messages. Call that new\n\tfunction in two places: the point where the same test was being\n\tperformed previously, and in governing emission of a newer\n\tAda_2020 error message. In both cases, the out-mode parameter\n\tGather_Components.Report_Errors is set to True even if no error\n\tmessages are generated within Gather_Components.\n\t* sem_util.ads: Correct a comment.", "tree": {"sha": "de2ca5f18032895c533c551522139266ddd8571b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2ca5f18032895c533c551522139266ddd8571b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdeeb889dfd4dcce214e1525b56a7464128a3c/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d27e8e735855216d21d6fca80473f56a69b698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d27e8e735855216d21d6fca80473f56a69b698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d27e8e735855216d21d6fca80473f56a69b698"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "73a6f79f36fa850931abe6764d70bd60bb0fe310", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdeeb889dfd4dcce214e1525b56a7464128a3c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdeeb889dfd4dcce214e1525b56a7464128a3c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "patch": "@@ -9990,6 +9990,18 @@ package body Sem_Util is\n       Discrim_Value         : Node_Id;\n       Discrim_Value_Subtype : Node_Id;\n       Discrim_Value_Status  : Discriminant_Value_Status := Bad;\n+\n+      function OK_Scope_For_Discrim_Value_Error_Messages return Boolean is\n+        (Scope (Original_Record_Component\n+                        (Entity (First (Choices (Assoc))))) = Typ);\n+      --  Used to avoid generating error messages having a source position\n+      --  which refers to somewhere (e.g., a discriminant value in a derived\n+      --  tagged type declaration) unrelated to the offending construct. This\n+      --  is required for correctness - clients of Gather_Components such as\n+      --  Sem_Ch3.Create_Constrained_Components depend on this function\n+      --  returning True while processing semantically correct examples;\n+      --  generating an error message in this case would be wrong.\n+\n    begin\n       Report_Errors := False;\n \n@@ -10178,9 +10190,7 @@ package body Sem_Util is\n             --  every value of that subtype (and there must be at least one)\n             --  selects the same variant.\n \n-            if Scope (Original_Record_Component\n-                        ((Entity (First (Choices (Assoc)))))) = Typ\n-            then\n+            if OK_Scope_For_Discrim_Value_Error_Messages then\n                if Ada_Version >= Ada_2020 then\n                   Error_Msg_FE\n                     (\"value for discriminant & must be static or \" &\n@@ -10299,10 +10309,12 @@ package body Sem_Util is\n                         (Subset => Discrim_Value_Subtype_Intervals,\n                          Of_Set => Variant_Intervals)\n                then\n-                  Error_Msg_NE\n-                    (\"no single variant is associated with all values of \" &\n-                     \"the subtype of discriminant value &\",\n-                     Discrim_Value, Discrim);\n+                  if OK_Scope_For_Discrim_Value_Error_Messages then\n+                     Error_Msg_NE\n+                       (\"no single variant is associated with all values of \" &\n+                        \"the subtype of discriminant value &\",\n+                        Discrim_Value, Discrim);\n+                  end if;\n                   Report_Errors := True;\n                   return;\n                end if;"}, {"sha": "2e26c283d71a9c27c138d1f5d5b6100cf0216175", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdeeb889dfd4dcce214e1525b56a7464128a3c/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdeeb889dfd4dcce214e1525b56a7464128a3c/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=4dbdeeb889dfd4dcce214e1525b56a7464128a3c", "patch": "@@ -1079,7 +1079,8 @@ package Sem_Util is\n    --     to its tail.\n    --\n    --    Report_Errors is set to True if the values of the discriminants are\n-   --     non-static.\n+   --     insufficiently static (see body for details of what that means).\n+\n    --\n    --    Allow_Compile_Time if set to True, allows compile time known values in\n    --     Governed_By expressions in addition to static expressions."}]}