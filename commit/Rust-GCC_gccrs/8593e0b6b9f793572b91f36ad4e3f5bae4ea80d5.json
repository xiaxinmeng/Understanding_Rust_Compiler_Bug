{"sha": "8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5M2UwYjZiOWY3OTM1NzJiOTFmMzZhZDRlM2Y1YmFlNGVhODBkNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-06-23T14:27:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-23T14:27:04Z"}, "message": "tree-object-size.c (addr_object_size): Instead of checking for non-NULL TREE_CHAIN of the FIELD_DECL check that there...\n\n\t* tree-object-size.c (addr_object_size): Instead of checking\n\tfor non-NULL TREE_CHAIN of the FIELD_DECL check that there\n\tare no FIELD_DECLs following it.\n\n\t* g++.dg/ext/builtin-object-size1.C: New test.\n\t* g++.dg/ext/builtin-object-size2.C: New test.\n\nFrom-SVN: r148851", "tree": {"sha": "b734b0a2ff50252e4ef4580a7c5f5c9be79ac208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b734b0a2ff50252e4ef4580a7c5f5c9be79ac208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7309083f99e306bd9f8512be3c7f4093cbbb13d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7309083f99e306bd9f8512be3c7f4093cbbb13d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7309083f99e306bd9f8512be3c7f4093cbbb13d0"}], "stats": {"total": 932, "additions": 914, "deletions": 18}, "files": [{"sha": "bcb6209ab6d2db01c7a14b99b35a8d71efbdcb82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "patch": "@@ -1,3 +1,9 @@\n+2009-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-object-size.c (addr_object_size): Instead of checking\n+\tfor non-NULL TREE_CHAIN of the FIELD_DECL check that there\n+\tare no FIELD_DECLs following it.\n+\n 2009-06-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* tree-ssa-math-opts.c (find_bswap): Increase the search depth in"}, {"sha": "0425c188769b938237551046295542104d14da16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "patch": "@@ -1,3 +1,8 @@\n+2009-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/ext/builtin-object-size1.C: New test.\n+\t* g++.dg/ext/builtin-object-size2.C: New test.\n+\n 2009-06-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* gcc.dg/optimize-bswapsi-1.c: Add new bswap implementation."}, {"sha": "8baed692541fc80f475c2d0d608e56e5136d5cab", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size1.C", "status": "added", "additions": 435, "deletions": 0, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size1.C?ref=8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "patch": "@@ -0,0 +1,435 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern \"C\" void abort ();\n+extern \"C\" void exit (int);\n+extern \"C\" void *malloc (size_t);\n+extern \"C\" void free (void *);\n+\n+struct A\n+{\n+  char a[10];\n+  int b;\n+  char c[10];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test1 (A *p)\n+{\n+  char *c;\n+  if (__builtin_object_size (&p->a, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != (size_t) -1)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != (size_t) -1)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 1) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 1) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 2) != 0)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 3) != 0)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 3) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 3) != 0)\n+    abort ();\n+}\n+\n+void\n+__attribute__ ((noinline))\n+test2 (void)\n+{\n+  char *c;\n+  size_t s = 2 * sizeof (A);\n+  A *p = (A *) malloc (2 * sizeof (A));\n+  if (__builtin_object_size (&p->a, 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 0) != s)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 0) != s)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 0) != s - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 1) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 1) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 2) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 2) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 2) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 2) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 2) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 2) != s)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 2) != s)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 2) != s - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 3) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 3) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 3) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  free (p);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+test3 (void)\n+{\n+  char *c;\n+  size_t s;\n+  A *p = (A *) malloc (4);\n+  if (__builtin_object_size (&p->a, 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != 1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != 1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != 0)\n+    abort ();\n+  free (p);\n+  s = __builtin_offsetof (A, c) + 4;\n+  p = (A *) malloc (s);\n+  if (__builtin_object_size (&p->a, 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != 4)\n+    abort ();\n+  free (p);\n+}\n+\n+struct B\n+{\n+  A a[4];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test4 (struct B *q, int i)\n+{\n+  if (__builtin_object_size (&q->a[2].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[2].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[3].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[3].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[i].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[i].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+}\n+\n+struct C\n+{\n+  char a[10];\n+  char b;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test5 (struct C *c)\n+{\n+  if (__builtin_object_size (&c->b, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 1) != 1)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 3) != 1)\n+    abort ();\n+}\n+\n+struct D\n+{\n+  int i;\n+  struct D1\n+  {\n+    char b;\n+    char a[10];\n+  } j;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test6 (struct D *d)\n+{\n+  if (__builtin_object_size (&d->j.a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 1) != sizeof (d->j.a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 3) != sizeof (d->j.a) - 3)\n+    abort ();\n+}\n+\n+struct E\n+{\n+  int i;\n+  struct E1\n+  {\n+    char b;\n+    char a[10];\n+  } j[1];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test7 (struct E *e)\n+{\n+  if (__builtin_object_size (&e->j[0].a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 1) != sizeof (e->j[0].a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 3) != sizeof (e->j[0].a) - 3)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 1) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 3) != 0)\n+    abort ();\n+}\n+\n+union F\n+{\n+  char a[1];\n+  struct F1\n+  {\n+    char b;\n+    char c[10];\n+  } d;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test8 (union F *f)\n+{\n+  if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 1) != sizeof (f->d.c) - 3)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 3) != sizeof (f->d.c) - 3)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  A a, *p = &a;\n+  int i = 1;\n+  __asm (\"\" : \"+r\" (p));\n+  test1 (p);\n+  test2 ();\n+  test3 ();\n+  struct B b, *q = &b;\n+  __asm (\"\" : \"+r\" (q), \"+r\" (i));\n+  test4 (q, i);\n+  struct C c, *cp = &c;\n+  __asm (\"\" : \"+r\" (cp));\n+  test5 (cp);\n+  struct D d, *dp = &d;\n+  __asm (\"\" : \"+r\" (dp));\n+  test6 (dp);\n+  struct E e, *ep = &e;\n+  __asm (\"\" : \"+r\" (ep));\n+  test7 (ep);\n+  union F f, *fp = &f;\n+  __asm (\"\" : \"+r\" (fp));\n+  test8 (fp);\n+  exit (0);\n+}"}, {"sha": "e1fe6de0330648ff7e476d5d2a7d5efccbb34fa7", "filename": "gcc/testsuite/g++.dg/ext/builtin-object-size2.C", "status": "added", "additions": 438, "deletions": 0, "changes": 438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-object-size2.C?ref=8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "patch": "@@ -0,0 +1,438 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern \"C\" void abort ();\n+extern \"C\" void exit (int);\n+extern \"C\" void *malloc (size_t);\n+extern \"C\" void free (void *);\n+\n+typedef struct A\n+{\n+  char a[10];\n+  int b;\n+  char c[10];\n+  static int d;\n+} AT;\n+\n+int A::d = 6;\n+\n+void\n+__attribute__ ((noinline))\n+test1 (A *p)\n+{\n+  char *c;\n+  if (__builtin_object_size (&p->a, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != (size_t) -1)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != (size_t) -1)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 1) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 1) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 2) != 0)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 3) != 0)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 3) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 3) != 0)\n+    abort ();\n+}\n+\n+void\n+__attribute__ ((noinline))\n+test2 (void)\n+{\n+  char *c;\n+  size_t s = 2 * sizeof (A);\n+  A *p = (A *) malloc (2 * sizeof (A));\n+  if (__builtin_object_size (&p->a, 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 0) != s)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 0) != s)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 0) != s - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 0) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 1) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 1) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 2) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 2) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 2) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 2) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 2) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 2) != s)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 2) != s)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 2) != s - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 2) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 3) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 3) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 3) != s - __builtin_offsetof (A, c))\n+    abort ();\n+  free (p);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+test3 (void)\n+{\n+  char *c;\n+  size_t s;\n+  A *p = (A *) malloc (4);\n+  if (__builtin_object_size (&p->a, 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != 1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != 1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != 0)\n+    abort ();\n+  free (p);\n+  s = __builtin_offsetof (A, c) + 4;\n+  p = (A *) malloc (s);\n+  if (__builtin_object_size (&p->a, 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != 4)\n+    abort ();\n+  free (p);\n+}\n+\n+struct B\n+{\n+  A a[4];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test4 (struct B *q, int i)\n+{\n+  if (__builtin_object_size (&q->a[2].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[2].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[3].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[3].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[i].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[i].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+}\n+\n+struct C\n+{\n+  char a[10];\n+  char b;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test5 (struct C *c)\n+{\n+  if (__builtin_object_size (&c->b, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 1) != 1)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 3) != 1)\n+    abort ();\n+}\n+\n+struct D\n+{\n+  int i;\n+  struct D1\n+  {\n+    char b;\n+    char a[10];\n+  } j;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test6 (struct D *d)\n+{\n+  if (__builtin_object_size (&d->j.a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 1) != sizeof (d->j.a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 3) != sizeof (d->j.a) - 3)\n+    abort ();\n+}\n+\n+struct E\n+{\n+  int i;\n+  struct E1\n+  {\n+    char b;\n+    char a[10];\n+  } j[1];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test7 (struct E *e)\n+{\n+  if (__builtin_object_size (&e->j[0].a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 1) != sizeof (e->j[0].a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 3) != sizeof (e->j[0].a) - 3)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 1) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 3) != 0)\n+    abort ();\n+}\n+\n+union F\n+{\n+  char a[1];\n+  struct F1\n+  {\n+    char b;\n+    char c[10];\n+  } d;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test8 (union F *f)\n+{\n+  if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 1) != sizeof (f->d.c) - 3)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 3) != sizeof (f->d.c) - 3)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  A a, *p = &a;\n+  int i = 1;\n+  __asm (\"\" : \"+r\" (p));\n+  test1 (p);\n+  test2 ();\n+  test3 ();\n+  struct B b, *q = &b;\n+  __asm (\"\" : \"+r\" (q), \"+r\" (i));\n+  test4 (q, i);\n+  struct C c, *cp = &c;\n+  __asm (\"\" : \"+r\" (cp));\n+  test5 (cp);\n+  struct D d, *dp = &d;\n+  __asm (\"\" : \"+r\" (dp));\n+  test6 (dp);\n+  struct E e, *ep = &e;\n+  __asm (\"\" : \"+r\" (ep));\n+  test7 (ep);\n+  union F f, *fp = &f;\n+  __asm (\"\" : \"+r\" (fp));\n+  test8 (fp);\n+  exit (0);\n+}"}, {"sha": "5c64b989d5ec43ede3112c0d484992498b2a5e15", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=8593e0b6b9f793572b91f36ad4e3f5bae4ea80d5", "patch": "@@ -257,27 +257,39 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t\t    v = NULL_TREE;\n \t\t    break;\n \t\t  case COMPONENT_REF:\n-\t\t    if ((TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n-\t\t\t == RECORD_TYPE\n-\t\t\t && TREE_CHAIN (TREE_OPERAND (v, 1)))\n-\t\t\t|| TREE_CODE (TREE_TYPE (v)) != ARRAY_TYPE)\n-\t\t      v = NULL_TREE;\n-\t\t    else\n+\t\t    if (TREE_CODE (TREE_TYPE (v)) != ARRAY_TYPE)\n+\t\t      {\n+\t\t\tv = NULL_TREE;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t    if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t == RECORD_TYPE)\n \t\t      {\n-\t\t\tif (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n-\t\t\t    == RECORD_TYPE)\n-\t\t\t  v = TREE_OPERAND (v, 0);\n-\t\t\twhile (v && v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n-\t\t\t  if (TREE_CODE (TREE_TYPE (v)) != UNION_TYPE\n-\t\t\t      && TREE_CODE (TREE_TYPE (v)) != QUAL_UNION_TYPE)\n+\t\t\ttree fld_chain = TREE_CHAIN (TREE_OPERAND (v, 1));\n+\t\t\tfor (; fld_chain; fld_chain = TREE_CHAIN (fld_chain))\n+\t\t\t  if (TREE_CODE (fld_chain) == FIELD_DECL)\n+\t\t\t    break;\n+\n+\t\t\tif (fld_chain)\n+\t\t\t  {\n+\t\t\t    v = NULL_TREE;\n \t\t\t    break;\n-\t\t\t  else\n-\t\t\t    v = TREE_OPERAND (v, 0);\n-\t\t\tif (v && v != pt_var)\n-\t\t\t  v = NULL_TREE;\n-\t\t\telse\n-\t\t\t  v = pt_var;\n+\t\t\t  }\n \t\t      }\n+\n+\t\t    if (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t== RECORD_TYPE)\n+\t\t      v = TREE_OPERAND (v, 0);\n+\t\t    while (v && v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n+\t\t      if (TREE_CODE (TREE_TYPE (v)) != UNION_TYPE\n+\t\t\t  && TREE_CODE (TREE_TYPE (v)) != QUAL_UNION_TYPE)\n+\t\t\tbreak;\n+\t\t      else\n+\t\t\tv = TREE_OPERAND (v, 0);\n+\t\t    if (v && v != pt_var)\n+\t\t      v = NULL_TREE;\n+\t\t    else\n+\t\t      v = pt_var;\n \t\t    break;\n \t\t  default:\n \t\t    v = pt_var;"}]}