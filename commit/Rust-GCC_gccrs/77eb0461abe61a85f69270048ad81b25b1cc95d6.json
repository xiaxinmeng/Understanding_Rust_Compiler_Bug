{"sha": "77eb0461abe61a85f69270048ad81b25b1cc95d6", "node_id": "C_kwDOANBUbNoAKDc3ZWIwNDYxYWJlNjFhODVmNjkyNzAwNDhhZDgxYjI1YjFjYzk1ZDY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-14T13:49:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-14T13:49:09Z"}, "message": "lra: Fix up debug_p handling in lra_substitute_pseudo [PR104778]\n\nThe following testcase ICEs on powerpc-linux, because lra_substitute_pseudo\nsubstitutes (const_int 1) into a subreg operand.  First a subreg of subreg\nof a reg appears in a debug insn (which surely is invalid outside of\ndebug insns, but in debug insns we allow even what is normally invalid in\nRTL like subregs which the target doesn't like, because either dwarf2out\nis able to handle it, or we just throw away the location expression,\nmaking some var <optimized out>.\n\nlra_substitute_pseudo already has some code to deal with specifically\nSUBREG of REG with the REG being substituted for VOIDmode constant,\nbut that doesn't cover this case, so the following patch extends\nlra_substitute_pseudo for debug_p mode to treat stuff like e.g.\ncombiner's subst function to ensure we don't lose mode which is essential\nfor the IL.\n\n2022-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/104778\n\t* lra.cc (lra_substitute_pseudo): For debug_p mode, simplify\n\tSUBREG, ZERO_EXTEND, SIGN_EXTEND, FLOAT or UNSIGNED_FLOAT if recursive\n\tcall simplified the first operand into VOIDmode constant.\n\n\t* gcc.target/powerpc/pr104778.c: New test.", "tree": {"sha": "b0451db695ef69ebc0e544054005af10123c425f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0451db695ef69ebc0e544054005af10123c425f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77eb0461abe61a85f69270048ad81b25b1cc95d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eb0461abe61a85f69270048ad81b25b1cc95d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eb0461abe61a85f69270048ad81b25b1cc95d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eb0461abe61a85f69270048ad81b25b1cc95d6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f7b7c1495f92c72da154d32317943a2cc276ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7b7c1495f92c72da154d32317943a2cc276ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7b7c1495f92c72da154d32317943a2cc276ca8"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "1444cb7591441ba9aae8274f283eb1c06db33938", "filename": "gcc/lra.cc", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb0461abe61a85f69270048ad81b25b1cc95d6/gcc%2Flra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb0461abe61a85f69270048ad81b25b1cc95d6/gcc%2Flra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.cc?ref=77eb0461abe61a85f69270048ad81b25b1cc95d6", "patch": "@@ -2015,8 +2015,39 @@ lra_substitute_pseudo (rtx *loc, int old_regno, rtx new_reg, bool subreg_p,\n     {\n       if (fmt[i] == 'e')\n \t{\n-\t  if (lra_substitute_pseudo (&XEXP (x, i), old_regno,\n-\t\t\t\t     new_reg, subreg_p, debug_p))\n+\t  if (debug_p\n+\t      && i == 0\n+\t      && (code == SUBREG\n+\t\t  || code == ZERO_EXTEND\n+\t\t  || code == SIGN_EXTEND\n+\t\t  || code == FLOAT\n+\t\t  || code == UNSIGNED_FLOAT))\n+\t    {\n+\t      rtx y = XEXP (x, 0);\n+\t      if (lra_substitute_pseudo (&y, old_regno,\n+\t\t\t\t\t new_reg, subreg_p, debug_p))\n+\t\t{\n+\t\t  result = true;\n+\t\t  if (CONST_SCALAR_INT_P (y))\n+\t\t    {\n+\t\t      if (code == SUBREG)\n+\t\t\ty = simplify_subreg (GET_MODE (x), y,\n+\t\t\t\t\t     GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t\t     SUBREG_BYTE (x));\n+\t\t      else\n+\t\t\ty = simplify_unary_operation (code, GET_MODE (x), y,\n+\t\t\t\t\t\t      GET_MODE (XEXP (x, 0)));\n+\t\t      if (y)\n+\t\t\t*loc = y;\n+\t\t      else\n+\t\t\t*loc = gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);\n+\t\t    }\n+\t\t  else\n+\t\t    XEXP (x, 0) = y;\n+\t\t}\n+\t    }\n+\t  else if (lra_substitute_pseudo (&XEXP (x, i), old_regno,\n+\t\t\t\t\t  new_reg, subreg_p, debug_p))\n \t    result = true;\n \t}\n       else if (fmt[i] == 'E')"}, {"sha": "3866f183185daff30fc7701ecce163e6defea909", "filename": "gcc/testsuite/gcc.target/powerpc/pr104778.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb0461abe61a85f69270048ad81b25b1cc95d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104778.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb0461abe61a85f69270048ad81b25b1cc95d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104778.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104778.c?ref=77eb0461abe61a85f69270048ad81b25b1cc95d6", "patch": "@@ -0,0 +1,51 @@\n+/* PR debug/104778 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmpb -Og -g\" } */\n+/* { dg-additional-options \"-fpie\" { target pie } } */\n+\n+unsigned long long int p;\n+short int m, n;\n+\n+void\n+foo (double u, int v, int x, int y, int z)\n+{\n+  long long int a = v;\n+  short int b = v;\n+  int c = 0, d = m, e = u;\n+\n+  if (n)\n+    {\n+      int q = b;\n+\n+      while (p / 1.0)\n+        c = 0;\n+\n+      if (n * n == (d + 1) / (1LL << x))\n+        a = 1;\n+\n+      b = u;\n+      while (d)\n+        {\n+          u = m + 1ULL;\n+          b = a - (unsigned long long int) u + a + (char) (u + 1.0);\n+          d = (v - 1LL) * n / d + q + x;\n+          q = m;\n+        }\n+    }\n+\n+  while (c < 1)\n+    {\n+      int r;\n+\n+      if (m == y)\n+        m = e * z;\n+\n+      e = !a;\n+\n+      while (!r)\n+        ;\n+\n+      if (b)\n+        m = d;\n+    }\n+}"}]}