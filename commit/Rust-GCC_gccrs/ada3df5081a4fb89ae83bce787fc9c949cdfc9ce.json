{"sha": "ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhM2RmNTA4MWE0ZmI4OWFlODNiY2U3ODdmYzljOTQ5Y2RmYzljZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-16T14:49:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-16T14:49:05Z"}, "message": "re PR middle-end/52584 (Fails to constant fold vector upper/lower half BIT_FIELD_REFs)\n\n2012-03-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/52584\n\t* fold-const.c (fold_ternary_loc): Fold vector typed BIT_FIELD_REFs\n\tof vector constants and constructors.\n\nFrom-SVN: r185468", "tree": {"sha": "3f9d570f112d058797d9ad03991da3a3f27c731c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f9d570f112d058797d9ad03991da3a3f27c731c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b758f602501612172068807bbc79e65c0827ab57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b758f602501612172068807bbc79e65c0827ab57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b758f602501612172068807bbc79e65c0827ab57"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "1775524ff535f24dd5397b05b9b761d612d86f2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "patch": "@@ -1,3 +1,9 @@\n+2012-03-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52584\n+\t* fold-const.c (fold_ternary_loc): Fold vector typed BIT_FIELD_REFs\n+\tof vector constants and constructors.\n+\n 2012-03-16  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (vect_get_vec_def_for_operand): Use"}, {"sha": "6c4f7f86bad7900b30267841f532c63962b3408e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "patch": "@@ -13920,22 +13920,55 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n     case BIT_FIELD_REF:\n       if ((TREE_CODE (arg0) == VECTOR_CST\n \t   || TREE_CODE (arg0) == CONSTRUCTOR)\n-\t  && type == TREE_TYPE (TREE_TYPE (arg0)))\n+\t  && (type == TREE_TYPE (TREE_TYPE (arg0))\n+\t      || (TREE_CODE (type) == VECTOR_TYPE\n+\t\t  && TREE_TYPE (type) == TREE_TYPE (TREE_TYPE (arg0)))))\n \t{\n-\t  unsigned HOST_WIDE_INT width = tree_low_cst (arg1, 1);\n+\t  tree eltype = TREE_TYPE (TREE_TYPE (arg0));\n+\t  unsigned HOST_WIDE_INT width = tree_low_cst (TYPE_SIZE (eltype), 1);\n+\t  unsigned HOST_WIDE_INT n = tree_low_cst (arg1, 1);\n \t  unsigned HOST_WIDE_INT idx = tree_low_cst (op2, 1);\n \n-\t  if (width != 0\n-\t      && simple_cst_equal (arg1, TYPE_SIZE (type)) == 1\n+\t  if (n != 0\n \t      && (idx % width) == 0\n-\t      && (idx = idx / width)\n-\t\t < TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)))\n+\t      && (n % width) == 0\n+\t      && ((idx + n) / width) <= TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)))\n \t    {\n-\t      if (TREE_CODE (arg0) == VECTOR_CST)\n-\t\treturn VECTOR_CST_ELT (arg0, idx);\n-\t      else if (idx < CONSTRUCTOR_NELTS (arg0))\n-\t\treturn CONSTRUCTOR_ELT (arg0, idx)->value;\n-\t      return build_zero_cst (type);\n+\t      idx = idx / width;\n+\t      n = n / width;\n+\t      if (TREE_CODE (type) == VECTOR_TYPE)\n+\t\t{\n+\t\t  if (TREE_CODE (arg0) == VECTOR_CST)\n+\t\t    {\n+\t\t      tree *vals = XALLOCAVEC (tree, n);\n+\t\t      unsigned i;\n+\t\t      for (i = 0; i < n; ++i)\n+\t\t\tvals[i] = VECTOR_CST_ELT (arg0, idx + i);\n+\t\t      return build_vector (type, vals);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      VEC(constructor_elt, gc) *vals;\n+\t\t      unsigned i;\n+\t\t      if (CONSTRUCTOR_NELTS (arg0) == 0)\n+\t\t\treturn build_constructor (type, NULL);\n+\t\t      vals = VEC_alloc (constructor_elt, gc, n);\n+\t\t      for (i = 0; i < n && idx + i < CONSTRUCTOR_NELTS (arg0);\n+\t\t\t   ++i)\n+\t\t\tCONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n+\t\t\t\t\t\tCONSTRUCTOR_ELT\n+\t\t\t\t\t\t  (arg0, idx + i)->value);\n+\t\t      return build_constructor (type, vals);\n+\t\t    }\n+\t\t}\n+\t      else if (n == 1)\n+\t\t{\n+\t\t  if (TREE_CODE (arg0) == VECTOR_CST)\n+\t\t    return VECTOR_CST_ELT (arg0, idx);\n+\t\t  else if (idx < CONSTRUCTOR_NELTS (arg0))\n+\t\t    return CONSTRUCTOR_ELT (arg0, idx)->value;\n+\t\t  return build_zero_cst (type);\n+\t\t}\n \t    }\n \t}\n "}]}