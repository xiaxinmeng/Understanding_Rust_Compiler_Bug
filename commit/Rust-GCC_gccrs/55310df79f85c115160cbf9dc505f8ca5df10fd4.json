{"sha": "55310df79f85c115160cbf9dc505f8ca5df10fd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzMTBkZjc5Zjg1YzExNTE2MGNiZjlkYzUwNWY4Y2E1ZGYxMGZkNA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-02-08T14:18:31Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-02-08T14:18:31Z"}, "message": "c4x.c (call_address_operand, [...]): Rename from call_operand and symbolic_operand respectively.\n\n\t* config/c4x/c4x.c (call_address_operand, symbolic_address_operand):\n \tRename from call_operand and symbolic_operand respectively.  All\n\tcallers changed.\n\t* config/c4x/c4x.md (call_address_operand, symbolic_address_operand):\n\tLikewise.\n\t* config/c4x/c4x.h (call_address_operand, symbolic_address_operand):\n\tLikewise.\n\t(PREDICATE_CODES): Allow CONST, LABEL_REF for call_address_operand.\n\nFrom-SVN: r25089", "tree": {"sha": "7a85587f5285ad53d438aed71138b251c5f32fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a85587f5285ad53d438aed71138b251c5f32fda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55310df79f85c115160cbf9dc505f8ca5df10fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55310df79f85c115160cbf9dc505f8ca5df10fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55310df79f85c115160cbf9dc505f8ca5df10fd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55310df79f85c115160cbf9dc505f8ca5df10fd4/comments", "author": null, "committer": null, "parents": [{"sha": "917acb0e51a26e38c9103b8f7d48125d72bfdcd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917acb0e51a26e38c9103b8f7d48125d72bfdcd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917acb0e51a26e38c9103b8f7d48125d72bfdcd3"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "131551e5cca975b968e7f42a73ff53d560e6b35f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55310df79f85c115160cbf9dc505f8ca5df10fd4", "patch": "@@ -1,3 +1,14 @@\n+Tue Feb  9 11:08:41 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (call_address_operand, symbolic_address_operand):\n+ \tRename from call_operand and symbolic_operand respectively.  All\n+\tcallers changed.\n+\t* config/c4x/c4x.md (call_address_operand, symbolic_address_operand): \n+\tLikewise.\n+\t* config/c4x/c4x.h (call_address_operand, symbolic_address_operand): \n+\tLikewise.\n+\t(PREDICATE_CODES): Allow CONST, LABEL_REF for call_address_operand.\n+\n Tue Feb  9 10:52:27 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_legitimize_address): Don't generate a"}, {"sha": "878eb1e918a3a025df8c025a0e9f761e5ba81454", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=55310df79f85c115160cbf9dc505f8ca5df10fd4", "patch": "@@ -1037,7 +1037,7 @@ c4x_emit_move_sequence (operands, mode)\n \t address.  */\n       op1 = XEXP (op1, 1);\n     }\n-  else if (symbolic_operand (op1, mode))\n+  else if (symbolic_address_operand (op1, mode))\n     {\n       if (TARGET_LOAD_ADDRESS)\n \t{\n@@ -1072,7 +1072,7 @@ c4x_emit_move_sequence (operands, mode)\n      perhaps by calling validize_address.  */\n   if (! (reload_in_progress || reload_completed)\n       && GET_CODE (op1) == MEM\n-      && symbolic_operand (XEXP (op1, 0), Pmode))\n+      && symbolic_address_operand (XEXP (op1, 0), Pmode))\n     {\n       rtx dp_reg = gen_rtx_REG (Pmode, DP_REGNO);\n       if (! TARGET_SMALL)\n@@ -1083,7 +1083,7 @@ c4x_emit_move_sequence (operands, mode)\n \n   if (! (reload_in_progress || reload_completed)\n       && GET_CODE (op0) == MEM \n-      && symbolic_operand (XEXP (op0, 0), Pmode))\n+      && symbolic_address_operand (XEXP (op0, 0), Pmode))\n     {\n       rtx dp_reg = gen_rtx_REG (Pmode, DP_REGNO);\n       if (! TARGET_SMALL)\n@@ -2880,26 +2880,18 @@ rc_reg_operand (op, mode)\n \n \n int\n-call_operand (op, mode)\n+call_address_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  op = XEXP (op, 0);\n-  switch (GET_CODE (op))\n-    {\n-    case SYMBOL_REF:\n-    case REG:\n-      return 1;\n-    default:\n-    }\n-  return 0;\n+  return (REG_P (op) || symbolic_address_operand (op, mode));\n }\n \n \n /* Symbolic operand.  */\n \n int\n-symbolic_operand (op, mode)\n+symbolic_address_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {"}, {"sha": "7f7d7d0037605235f71bbf5f0a1e126e6caf980b", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=55310df79f85c115160cbf9dc505f8ca5df10fd4", "patch": "@@ -340,6 +340,11 @@ extern void c4x_optimization_options ();\n #define TARGET_FLOAT_FORMAT\tC4X_FLOAT_FORMAT\n #define MAX_FIXED_MODE_SIZE\t64 /* HImode */\n \n+/* Number of bits in the high and low parts of a two stage\n+   load of an immediate constant.  */\n+#define BITS_PER_HIGH 16\n+#define BITS_PER_LO_SUM 16\n+\n /* Use the internal floating point stuff in the compiler and not the\n    host floating point stuff. */\n \n@@ -2529,15 +2534,15 @@ if (final_sequence != NULL_RTX)\t\t\\\n   {\"sp_reg_operand\", {REG}},\t\t\t\t\t\\\n   {\"st_reg_operand\", {REG}},\t\t\t\t\t\\\n   {\"rc_reg_operand\", {REG}},\t\t\t\t\t\\\n-  {\"call_operand\", {REG, SYMBOL_REF}},\t\t\t\t\\\n+  {\"call_address_operand\", {REG, SYMBOL_REF, LABEL_REF, CONST}}, \\\n   {\"src_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE}}, \\\n   {\"src_hi_operand\", {SUBREG, REG, MEM, CONST_DOUBLE}}, \t\\\n   {\"lsrc_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE}}, \\\n   {\"tsrc_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE}}, \\\n   {\"any_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE}}, \\\n   {\"par_ind_operand\", {MEM}},\t\t\t\t\t\\\n   {\"parallel_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n-  {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\t\\\n+  {\"symbolic_address_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\\\n   {\"mem_operand\", {MEM}},\t\t\t\t\t\n \n \n@@ -2628,7 +2633,7 @@ extern int rc_reg_operand ();\n \n extern int st_reg_operand ();\n \n-extern int symbolic_operand ();\n+extern int symbolic_address_operand ();\n \n extern int ar0_reg_operand ();\n \n@@ -2676,7 +2681,7 @@ extern int group1_mem_operand ();\n \n extern int arx_reg_operand ();\n \n-extern int call_operand ();\n+extern int call_address_operand ();\n \n extern int par_ind_operand ();\n "}, {"sha": "7890cca64614d3a6118e198c2fcd53c245c05359", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55310df79f85c115160cbf9dc505f8ca5df10fd4/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=55310df79f85c115160cbf9dc505f8ca5df10fd4", "patch": "@@ -1104,22 +1104,22 @@\n \n (define_insn \"set_high\"\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n-        (high:QI (match_operand:QI 1 \"symbolic_operand\" \"\")))]\n+        (high:QI (match_operand:QI 1 \"symbolic_address_operand\" \"\")))]\n   \"! TARGET_C3X \"\n   \"ldhi\\\\t^%H1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n (define_insn \"set_lo_sum\"\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n         (lo_sum:QI (match_dup 0)\n-                   (match_operand:QI 1 \"symbolic_operand\" \"\")))]\n+                   (match_operand:QI 1 \"symbolic_address_operand\" \"\")))]\n   \"\"\n   \"or\\\\t#%H1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n (define_split\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n-        (match_operand:QI 1 \"symbolic_operand\" \"\"))]\n+        (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n   \"! TARGET_C3X\"\n   [(set (match_dup 0) (high:QI (match_dup 1)))\n    (set (match_dup 0) (lo_sum:QI (match_dup 0) (match_dup 1)))]\n@@ -1132,7 +1132,7 @@\n ; easily load symbolic addresses into a register.\n (define_split\n   [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-        (match_operand:QI 1 \"symbolic_operand\" \"\"))]\n+        (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n   \"! TARGET_SMALL \n    && (TARGET_C3X || (reload_completed\n                       && ! std_reg_operand (operands[0], QImode)))\"\n@@ -1154,7 +1154,7 @@\n ; for the small memory model.\n (define_split\n   [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-        (match_operand:QI 1 \"symbolic_operand\" \"\"))]\n+        (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n   \"TARGET_SMALL\n    && (TARGET_C3X || (reload_completed\n                       && ! std_reg_operand (operands[0], QImode)))\"\n@@ -1170,7 +1170,7 @@\n \n (define_insn \"load_immed_address\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=a?x?c*r\")\n-        (match_operand:QI 1 \"symbolic_operand\" \"\"))]\n+        (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n    \"TARGET_LOAD_ADDRESS\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n@@ -1197,7 +1197,7 @@\n   \"(REG_P (operands[0]) || REG_P (operands[1])\n     || GET_CODE (operands[0]) == SUBREG\n     || GET_CODE (operands[1]) == SUBREG)\n-    && ! symbolic_operand (operands[1], QImode)\"\n+    && ! symbolic_address_operand (operands[1], QImode)\"\n   \"*\n    if (which_alternative == 2)\n      return \\\"sti\\\\t%1,%0\\\";\n@@ -4355,7 +4355,7 @@\n ; CALL\n ;\n (define_insn \"*call_c3x\"\n- [(call (mem:QI (match_operand:QI 0 \"call_operand\" \"\"))\n+ [(call (mem:QI (match_operand:QI 0 \"call_address_operand\" \"\"))\n         (match_operand:QI 1 \"general_operand\" \"\"))\n   (clobber (reg:QI 31))]\n   ;; Operand 1 not really used on the C4x.  The C30 doesn't have reg 31.\n@@ -4366,7 +4366,7 @@\n \n ; LAJ requires R11 (31) for the return address\n (define_insn \"*laj\"\n- [(call (mem:QI (match_operand:QI 0 \"call_operand\" \"\"))\n+ [(call (mem:QI (match_operand:QI 0 \"call_address_operand\" \"\"))\n         (match_operand:QI 1 \"general_operand\" \"\"))\n   (clobber (reg:QI 31))]\n   ;; Operand 1 not really used on the C4x.\n@@ -4380,15 +4380,15 @@\n   [(set_attr \"type\" \"laj\")])\n \n (define_expand \"call\"\n- [(parallel [(call (mem:QI (match_operand:QI 0 \"call_operand\" \"\"))\n+ [(parallel [(call (mem:QI (match_operand:QI 0 \"call_address_operand\" \"\"))\n                    (match_operand:QI 1 \"general_operand\" \"\"))\n              (clobber (reg:QI 31))])]\n  \"\"\n  \"\")\n \n (define_insn \"*callv_c3x\"\n  [(set (match_operand 0 \"\" \"=r\")\n-       (call (mem:QI (match_operand:QI 1 \"call_operand\" \"\"))\n+       (call (mem:QI (match_operand:QI 1 \"call_address_operand\" \"\"))\n              (match_operand:QI 2 \"general_operand\" \"\")))\n   (clobber (reg:QI 31))]\n   ;; Operand 0 and 2 not really used for the C4x. \n@@ -4401,7 +4401,7 @@\n ; LAJ requires R11 (31) for the return address\n (define_insn \"*lajv\"\n  [(set (match_operand 0 \"\" \"=r\")\n-       (call (mem:QI (match_operand:QI 1 \"call_operand\" \"\"))\n+       (call (mem:QI (match_operand:QI 1 \"call_address_operand\" \"\"))\n              (match_operand:QI 2 \"general_operand\" \"\")))\n   (clobber (reg:QI 31))]\n   ;; Operand 0 and 2 not really used in the C30 instruction.\n@@ -4416,7 +4416,7 @@\n \n (define_expand \"call_value\"\n  [(parallel [(set (match_operand 0 \"\" \"\")\n-                  (call (mem:QI (match_operand:QI 1 \"call_operand\" \"\"))\n+                  (call (mem:QI (match_operand:QI 1 \"call_address_operand\" \"\"))\n                         (match_operand:QI 2 \"general_operand\" \"\")))\n              (clobber (reg:QI 31))])]\n  \"\"\n@@ -6223,7 +6223,7 @@\n ; Peepholes to convert 'call label; rets' into jump label\n ;\n (define_peephole\n-  [(parallel [(call (mem:QI (match_operand:QI 0 \"call_operand\" \"\"))\n+  [(parallel [(call (mem:QI (match_operand:QI 0 \"call_address_operand\" \"\"))\n                     (match_operand:QI 1 \"general_operand\" \"\"))\n               (clobber (reg:QI 31))])\n    (return)]\n@@ -6237,7 +6237,7 @@\n \n (define_peephole\n   [(parallel [(set (match_operand 0 \"\" \"\")\n-                   (call (mem:QI (match_operand:QI 1 \"call_operand\" \"\"))\n+                   (call (mem:QI (match_operand:QI 1 \"call_address_operand\" \"\"))\n                          (match_operand:QI 2 \"general_operand\" \"\")))\n               (clobber (reg:QI 31))])\n    (return)]"}]}