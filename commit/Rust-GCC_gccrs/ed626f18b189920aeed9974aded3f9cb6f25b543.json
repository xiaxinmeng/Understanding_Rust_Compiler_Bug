{"sha": "ed626f18b189920aeed9974aded3f9cb6f25b543", "node_id": "C_kwDOANBUbNoAKGVkNjI2ZjE4YjE4OTkyMGFlZWQ5OTc0YWRlZDNmOWNiNmYyNWI1NDM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-16T12:51:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-24T12:52:38Z"}, "message": "tree-optimization/106912 - clear const attribute from fntype\n\nThe following makes sure that after clearing pure/const from\ninstrumented function declarations we are adjusting call statements\nfntype as well to handle indirect calls and because gimple_call_flags\nlooks at both decl and fntype.\n\nLike the pure/const flag clearing on decls we refrain from touching\ncalls to known functions that do not have a body in the current TU.\n\n\tPR tree-optimization/106912\n\t* tree-profile.cc (tree_profiling): Update stmts only when\n\tprofiling or testing coverage.  Make sure to update calls\n\tfntype, stripping 'const' there.\n\n\t* gcc.dg/profile-generate-4.c: New testcase.", "tree": {"sha": "440c930adc2b51b154f7d9fa28c6fa954a3e5a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/440c930adc2b51b154f7d9fa28c6fa954a3e5a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed626f18b189920aeed9974aded3f9cb6f25b543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed626f18b189920aeed9974aded3f9cb6f25b543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed626f18b189920aeed9974aded3f9cb6f25b543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed626f18b189920aeed9974aded3f9cb6f25b543/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe6e61fb236e1ac764a7f044ae80ddf458e981a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6e61fb236e1ac764a7f044ae80ddf458e981a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6e61fb236e1ac764a7f044ae80ddf458e981a6"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "c2b999fe4cb378a5f0b4e83d40910f3cd6378ede", "filename": "gcc/testsuite/gcc.dg/profile-generate-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed626f18b189920aeed9974aded3f9cb6f25b543/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-generate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed626f18b189920aeed9974aded3f9cb6f25b543/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-generate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-generate-4.c?ref=ed626f18b189920aeed9974aded3f9cb6f25b543", "patch": "@@ -0,0 +1,19 @@\n+/* PR106912 */\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+/* { dg-options \"-O2 -fprofile-generate -ftree-vectorize\" } */\n+\n+__attribute__ ((__simd__))\n+__attribute__ ((__nothrow__ , __leaf__ , __const__, __noinline__))\n+double foo (double x);\n+\n+void bar(double *f, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    f[i] = foo(f[i]);\n+}\n+\n+double foo(double x)\n+{\n+  return x * x / 3.0;\n+}"}, {"sha": "6f9a43e4bd50fb2b4cf3669aa5e6731ae6ee14f9", "filename": "gcc/tree-profile.cc", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed626f18b189920aeed9974aded3f9cb6f25b543/gcc%2Ftree-profile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed626f18b189920aeed9974aded3f9cb6f25b543/gcc%2Ftree-profile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.cc?ref=ed626f18b189920aeed9974aded3f9cb6f25b543", "patch": "@@ -835,16 +835,36 @@ tree_profiling (void)\n \n       push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n \n-      FOR_EACH_BB_FN (bb, cfun)\n-\t{\n-\t  gimple_stmt_iterator gsi;\n-\t  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t    {\n-\t      gimple *stmt = gsi_stmt (gsi);\n-\t      if (is_gimple_call (stmt))\n-\t\tupdate_stmt (stmt);\n-\t    }\n-\t}\n+      if (profile_arc_flag || flag_test_coverage)\n+\tFOR_EACH_BB_FN (bb, cfun)\n+\t  {\n+\t    gimple_stmt_iterator gsi;\n+\t    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t      {\n+\t\tgcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n+\t\tif (!call)\n+\t\t  continue;\n+\n+\t\t/* We do not clear pure/const on decls without body.  */\n+\t\ttree fndecl = gimple_call_fndecl (call);\n+\t\tif (fndecl && !gimple_has_body_p (fndecl))\n+\t\t  continue;\n+\n+\t\t/* Drop the const attribute from the call type (the pure\n+\t\t   attribute is not available on types).  */\n+\t\ttree fntype = gimple_call_fntype (call);\n+\t\tif (fntype && TYPE_READONLY (fntype))\n+\t\t  {\n+\t\t    int quals = TYPE_QUALS (fntype) & ~TYPE_QUAL_CONST;\n+\t\t    fntype = build_qualified_type (fntype, quals);\n+\t\t    gimple_call_set_fntype (call, fntype);\n+\t\t  }\n+\n+\t\t/* Update virtual operands of calls to no longer const/pure\n+\t\t   functions.  */\n+\t\tupdate_stmt (call);\n+\t      }\n+\t  }\n \n       /* re-merge split blocks.  */\n       cleanup_tree_cfg ();"}]}