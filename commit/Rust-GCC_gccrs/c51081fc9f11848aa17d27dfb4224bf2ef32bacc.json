{"sha": "c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxMDgxZmM5ZjExODQ4YWExN2QyN2RmYjQyMjRiZjJlZjMyYmFjYw==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2017-11-17T22:59:41Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2017-11-17T22:59:41Z"}, "message": "Enable building libitm with Intel CET\n\nlibitm/\n\t* Makefile.in: Regenerate.\n\t* acinclude.m4: Add enable.m4 and cet.m4.\n\t* config/x86/sjlj.S: Include cet.h.\n\t(_ITM_beginTransaction): Add _CET_ENDBR.\n\tSave Shadow Stack pointer.\n\t(GTM_longjmp): Add _CET_ENDBR. Restore Shadow Stack pointer.\n\t* config/x86/target.h (struct gtm_jmpbuf):\n\tAdd new field for Shadow Stack pointer.\n\t* configure: Regenerate.\n\t* configure.ac: Set CET_FLAGS. Update XCFLAGS.\n\t* configure.ac: Update libtool_VERSION for x86.\n\t* testsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r254908", "tree": {"sha": "0994081391208ea323516829be75444e885ff12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0994081391208ea323516829be75444e885ff12c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc03e55b5aced4f0e948f09d29f116ead8ded943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc03e55b5aced4f0e948f09d29f116ead8ded943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc03e55b5aced4f0e948f09d29f116ead8ded943"}], "stats": {"total": 167, "additions": 163, "deletions": 4}, "files": [{"sha": "fb2e949322487903b650192a4b7bac94445bc756", "filename": "libitm/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -1,3 +1,18 @@\n+2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\t* Makefile.in: Regenerate.\n+\t* acinclude.m4: Add enable.m4 and cet.m4.\n+\t* config/x86/sjlj.S: Include cet.h.\n+\t(_ITM_beginTransaction): Add _CET_ENDBR.\n+\tSave Shadow Stack pointer.\n+\t(GTM_longjmp): Add _CET_ENDBR. Restore Shadow Stack pointer.\n+\t* config/x86/target.h (struct gtm_jmpbuf):\n+\tAdd new field for Shadow Stack pointer.\n+\t* configure: Regenerate.\n+\t* configure.ac: Set CET_FLAGS. Update XCFLAGS.\n+\t* configure.ac: Update libtool_VERSION for x86.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* libitm/config/x86/target.h: Add new field (ssp)."}, {"sha": "703f279efdd2846419457f0015d21992c9606630", "filename": "libitm/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FMakefile.in?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -78,7 +78,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n \t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n \t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/cet.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "cd8150ce95f2e51356b6286b24e67007c006794b", "filename": "libitm/acinclude.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Facinclude.m4?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -149,6 +149,7 @@ s390*)\n esac])\n \n sinclude(../libtool.m4)\n+sinclude(../config/cet.m4)\n dnl The lines below arrange for aclocal not to bring an installed\n dnl libtool.m4 into aclocal.m4, while still arranging for automake to\n dnl add a definition of LIBTOOL to Makefile.in."}, {"sha": "006e44db0eb61bda5d7643cc7c3219faf34f8bac", "filename": "libitm/config/x86/sjlj.S", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Fconfig%2Fx86%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Fconfig%2Fx86%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fx86%2Fsjlj.S?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -25,6 +25,7 @@\n \n #include \"asmcfi.h\"\n #include \"config.h\"\n+#include \"cet.h\"\n \n #define CONCAT1(a, b) CONCAT2(a, b)\n #define CONCAT2(a, b) a ## b\n@@ -73,6 +74,7 @@\n \n SYM(_ITM_beginTransaction):\n \tcfi_startproc\n+\t_CET_ENDBR\n #ifdef __x86_64__\n #ifdef HAVE_AS_RTM\n \t/* Custom HTM fast path.  We start the HW transaction here and let\n@@ -138,6 +140,10 @@ SYM(_ITM_beginTransaction):\n \tmovq\t%r14, -32(%rax)\n \tmovq\t%r15, -24(%rax)\n \txorq\t%rdx, %rdx\n+\t/* Save zero or shadow stack pointer in the new field.  */\n+#if defined(__SHSTK__) && defined(__CET__)\n+\trdsspq\t%rdx\n+#endif\n \tmovq\t%rdx, -16(%rax)\n \tleaq\t-72(%rax), %rsi\n \tcall\tSYM(GTM_begin_transaction)\n@@ -170,6 +176,10 @@ SYM(_ITM_beginTransaction):\n \tmovl\t%edi, 16(%esp)\n \tmovl\t%ebp, 20(%esp)\n \txorl\t%edx, %edx\n+\t/* Save zero or shadow stack pointer in the new field.  */\n+#if defined(__SHSTK__) && defined(__CET__)\n+\trdsspd\t%edx\n+#endif\n \tmovl\t%edx, 24(%esp)\n \tleal\t4(%esp), %edx\n #if defined HAVE_ATTRIBUTE_VISIBILITY || !defined __PIC__\n@@ -197,6 +207,7 @@ SYM(_ITM_beginTransaction):\n \n SYM(GTM_longjmp):\n \tcfi_startproc\n+\t_CET_ENDBR\n #ifdef __x86_64__\n \tmovq\t(%rsi), %rcx\n \tmovq\t8(%rsi), %rbx\n@@ -210,6 +221,33 @@ SYM(GTM_longjmp):\n \tcfi_offset(%rip, 64)\n \tcfi_register(%rsp, %rcx)\n \tmovq\t%rcx, %rsp\n+#if defined(__SHSTK__) && defined(__CET__)\n+\t/* Check if Shadow Stack is enabled.  */\n+\txorq\t%rcx, %rcx\n+\trdsspq\t%rcx\n+\ttestq\t%rcx, %rcx\n+\tje\t.L1\n+\t/* Calculate number of frames to skip.  */\n+\tsubq\t56(%rsi), %rcx\n+\tnegq\t%rcx\n+\tshrq\t$3, %rcx\n+\tincq\t%rcx\n+\t/* If # of frames is greater 255 then loop\n+\t   and adjust.  */\n+\tcmpq\t$255, %rcx\n+\tjle\t.L3\n+\tmovl\t$255, %edi\n+\t.p2align 4,,10\n+\t.p2align 3\n+.L4:\n+\tincsspq\t%rdi\n+\tsubq\t$255, %rcx\n+\tcmpq\t$255, %rcx\n+\tjg\t.L4\n+.L3:\n+\tincsspq\t%rcx\n+.L1:\n+#endif\n \tjmp\t*64(%rsi)\n #else\n \tmovl\t(%edx), %ecx\n@@ -221,6 +259,35 @@ SYM(GTM_longjmp):\n \tcfi_offset(%eip, 24)\n \tcfi_register(%esp, %ecx)\n \tmovl\t%ecx, %esp\n+#if defined(__SHSTK__) && defined(__CET__)\n+\t/* Check if Shadow Stack is enabled.  */\n+\txorl\t%ecx, %ecx\n+\trdsspd\t%ecx\n+\ttestl\t%ecx, %ecx\n+\tje\t.L1\n+\t/* Calculate # of frames to skip.  */\n+\tsubl\t20(%edx), %ecx\n+\tnegl\t%ecx\n+\tshrl\t$2, %ecx\n+\tincl\t%ecx\n+\t/* If # of frames is greater 255 then loop\n+\t   and adjust.  */\n+\tcmpl\t$255, %ecx\n+\tjle\t.L3\n+\tpushl\t%eax\n+\tmovl\t$255, %eax\n+\t.p2align 4,,10\n+\t.p2align 3\n+.L4:\n+\tincsspd\t%eax\n+\tsubl\t$255, %ecx\n+\tcmpl\t$255, %ecx\n+\tjg\t.L4\n+\tpopl\t%eax\n+.L3:\n+\tincsspd\t%ecx\n+.L1:\n+#endif\n \tjmp\t*24(%edx)\n #endif\n \tcfi_endproc"}, {"sha": "d061c8c26597c2bc87b3cfebbaddb0d83e456fac", "filename": "libitm/configure", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -777,6 +777,7 @@ enable_maintainer_mode\n enable_linux_futex\n enable_tls\n enable_symvers\n+enable_cet\n with_gcc_major_version_only\n '\n       ac_precious_vars='build_alias\n@@ -1426,6 +1427,8 @@ Optional Features:\n   --enable-tls            Use thread-local storage [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n+  --enable-cet            enable Intel CET in target libraries\n+                          [default=default]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11794,7 +11797,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11797 \"configure\"\n+#line 11800 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11900,7 +11903,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11903 \"configure\"\n+#line 11906 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17586,6 +17589,75 @@ fi\n \n XCFLAGS=\"$XCFLAGS $XPCFLAGS\"\n \n+# Add CET specific flags if CET is enabled\n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|default) ;;\n+       *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=default\n+fi\n+\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    case \"$enable_cet\" in\n+      default)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    ;;\n+  *)\n+    enable_cet=no\n+    ;;\n+esac\n+if test x$enable_cet = xyes; then\n+  CET_FLAGS=\"-fcf-protection -mcet\"\n+fi\n+\n+XCFLAGS=\"$XCFLAGS $CET_FLAGS\"\n+\n \n \n "}, {"sha": "ad77fcae2a677029cb1f6f0585f46554f6015038", "filename": "libitm/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.ac?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -260,6 +260,10 @@ fi\n \n XCFLAGS=\"$XCFLAGS $XPCFLAGS\"\n \n+# Add CET specific flags if CET is enabled\n+GCC_CET_FLAGS(CET_FLAGS)\n+XCFLAGS=\"$XCFLAGS $CET_FLAGS\"\n+\n AC_SUBST(config_path)\n AC_SUBST(XCFLAGS)\n AC_SUBST(XLDFLAGS)"}, {"sha": "34dcdd2dae07f7726bcc3b9d58c9372fcbe47dc4", "filename": "libitm/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51081fc9f11848aa17d27dfb4224bf2ef32bacc/libitm%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2FMakefile.in?ref=c51081fc9f11848aa17d27dfb4224bf2ef32bacc", "patch": "@@ -70,7 +70,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n \t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n \t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/cet.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}]}