{"sha": "5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1Y2NmMGQyMGIxMTA0YTFlYzA4NGYxZGU0ZGJiYzMxMmU5NTQwZQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-08-28T10:58:45Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-08-28T10:58:45Z"}, "message": "optabs: ensure mem_thread_fence is a compiler barrier\n\n\tPR target/80640\n\t* doc/md.texi (mem_thread_fence): Remove mention of mode.  Rewrite.\n\t* optabs.c (expand_mem_thread_fence): Emit a compiler barrier when\n\tusing targetm.gen_mem_thread_fence.\ntestsuite/\n\t* gcc.dg/atomic/pr80640.c: New testcase.\n\nFrom-SVN: r251377", "tree": {"sha": "6bf7d946daf2fa68b3387a59f7b4ffce4b0f597b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bf7d946daf2fa68b3387a59f7b4ffce4b0f597b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf498b07586693bd0751a7aed15be59cd3f96206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf498b07586693bd0751a7aed15be59cd3f96206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf498b07586693bd0751a7aed15be59cd3f96206"}], "stats": {"total": 80, "additions": 67, "deletions": 13}, "files": [{"sha": "c79a0e856d5e12cb8846fe689b06b2c1c924f9bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "patch": "@@ -1,3 +1,10 @@\n+2017-08-28  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/80640\n+\t* doc/md.texi (mem_thread_fence): Remove mention of mode.  Rewrite.\n+\t* optabs.c (expand_mem_thread_fence): Emit a compiler barrier when\n+\tusing targetm.gen_mem_thread_fence.\n+\n 2017-08-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81995"}, {"sha": "64a137ecad04238c4f3dd20e28c44c315b0610dc", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "patch": "@@ -7044,14 +7044,20 @@ If these patterns are not defined, attempts will be made to use\n counterparts.  If none of these are available a compare-and-swap\n loop will be used.\n \n-@cindex @code{mem_thread_fence@var{mode}} instruction pattern\n-@item @samp{mem_thread_fence@var{mode}}\n+@cindex @code{mem_thread_fence} instruction pattern\n+@item @samp{mem_thread_fence}\n This pattern emits code required to implement a thread fence with\n memory model semantics.  Operand 0 is the memory model to be used.\n \n-If this pattern is not specified, all memory models except\n-@code{__ATOMIC_RELAXED} will result in issuing a @code{sync_synchronize}\n-barrier pattern.\n+For the @code{__ATOMIC_RELAXED} model no instructions need to be issued\n+and this expansion is not invoked.\n+\n+The compiler always emits a compiler memory barrier regardless of what\n+expanding this pattern produced.\n+\n+If this pattern is not defined, the compiler falls back to expanding the\n+@code{memory_barrier} pattern, then to emitting @code{__sync_synchronize}\n+library call, and finally to just placing a compiler memory barrier.\n \n @cindex @code{mem_signal_fence@var{mode}} instruction pattern\n @item @samp{mem_signal_fence@var{mode}}"}, {"sha": "71b74dd5feb579d74ad5f5a8fa1900c66160794b", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "patch": "@@ -6297,17 +6297,19 @@ expand_asm_memory_barrier (void)\n void\n expand_mem_thread_fence (enum memmodel model)\n {\n+  if (is_mm_relaxed (model))\n+    return;\n   if (targetm.have_mem_thread_fence ())\n-    emit_insn (targetm.gen_mem_thread_fence (GEN_INT (model)));\n-  else if (!is_mm_relaxed (model))\n     {\n-      if (targetm.have_memory_barrier ())\n-\temit_insn (targetm.gen_memory_barrier ());\n-      else if (synchronize_libfunc != NULL_RTX)\n-\temit_library_call (synchronize_libfunc, LCT_NORMAL, VOIDmode, 0);\n-      else\n-\texpand_asm_memory_barrier ();\n+      emit_insn (targetm.gen_mem_thread_fence (GEN_INT (model)));\n+      expand_asm_memory_barrier ();\n     }\n+  else if (targetm.have_memory_barrier ())\n+    emit_insn (targetm.gen_memory_barrier ());\n+  else if (synchronize_libfunc != NULL_RTX)\n+    emit_library_call (synchronize_libfunc, LCT_NORMAL, VOIDmode, 0);\n+  else\n+    expand_asm_memory_barrier ();\n }\n \n /* This routine will either emit the mem_signal_fence pattern or issue a "}, {"sha": "a3687c49e3dc5b5146255c683ba999a91e34b9ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "patch": "@@ -1,3 +1,8 @@\n+2017-08-28  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/80640\n+\t* gcc.dg/atomic/pr80640.c: New testcase.\n+\n 2017-08-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81995"}, {"sha": "fd17978a4822501e4d9b609ae05dbf86f6e39cb1", "filename": "gcc/testsuite/gcc.dg/atomic/pr80640.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640.c?ref=5e5ccf0d20b1104a1ec084f1de4dbbc312e9540e", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-pthread\" } */\n+/* { dg-require-effective-target pthread } */\n+\n+#include <pthread.h>\n+\n+static volatile int sem1;\n+static volatile int sem2;\n+\n+static void *f(void *va)\n+{\n+  void **p = va;\n+  if (*p) return *p;\n+  sem1 = 1;\n+  while (!sem2);\n+  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n+  // GCC used to RTL-CSE this and the first load, causing 0 to be returned\n+  return *p;\n+}\n+\n+int main()\n+{\n+  void *p = 0;\n+  pthread_t thr;\n+  if (pthread_create(&thr, 0, f, &p))\n+    return 2;\n+  while (!sem1);\n+  __atomic_thread_fence(__ATOMIC_ACQUIRE);\n+  p = &p;\n+  __atomic_thread_fence(__ATOMIC_RELEASE);\n+  sem2 = 1;\n+  pthread_join(thr, &p);\n+  return !p;\n+}"}]}