{"sha": "85d7d3b09cb826d301fc60e31c0f6ec689fd2a08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkN2QzYjA5Y2I4MjZkMzAxZmM2MGUzMWMwZjZlYzY4OWZkMmEwOA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-10T18:08:32Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-10T18:08:32Z"}, "message": "conversion.c: Test long double too.\n\n2002-05-10  David S. Miller  <davem@redhat.com>\n\n\t* gcc.c-torture/execute/conversion.c: Test long double too.\n\nFrom-SVN: r53368", "tree": {"sha": "6c709fe26bf4307012cb039f6a063ab22bbbcb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c709fe26bf4307012cb039f6a063ab22bbbcb41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08/comments", "author": null, "committer": null, "parents": [{"sha": "e4ba88da9d718af37d0ac95f9a135d09197cc99a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ba88da9d718af37d0ac95f9a135d09197cc99a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ba88da9d718af37d0ac95f9a135d09197cc99a"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "c66c70f16b253214db32870c8a384e5694a0d39e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85d7d3b09cb826d301fc60e31c0f6ec689fd2a08", "patch": "@@ -1,3 +1,7 @@\n+2002-05-10  David S. Miller  <davem@redhat.com>\n+\n+\t* gcc.c-torture/execute/conversion.c: Test long double too.\n+\n 2002-05-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lib/g77.exp (g77_link_flags): Append all multilib dirs containing"}, {"sha": "44c84e18083e0daa97197c24d3c0a260c3f88ef8", "filename": "gcc/testsuite/gcc.c-torture/execute/conversion.c", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d7d3b09cb826d301fc60e31c0f6ec689fd2a08/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c?ref=85d7d3b09cb826d301fc60e31c0f6ec689fd2a08", "patch": "@@ -22,6 +22,13 @@ u2d(u)\n   return u;\n }\n \n+long double\n+u2ld(u)\n+     unsigned int u;\n+{\n+  return u;\n+}\n+\n float\n s2f(s)\n      int s;\n@@ -36,6 +43,13 @@ s2d(s)\n   return s;\n }\n \n+long double\n+s2ld(s)\n+     int s;\n+{\n+  return s;\n+}\n+\n int\n fnear (float x, float y)\n {\n@@ -50,6 +64,13 @@ dnear (double x, double y)\n   return t == 0 || x / t > 100000000000000.0;\n }\n \n+int\n+ldnear (double x, double y)\n+{\n+  double t = x - y;\n+  return t == 0 || x / t > 100000000000000000000000000000000.0;\n+}\n+\n test_integer_to_float()\n {\n   if (u2f(0U) != (float) 0U)\t\t\t\t/* 0 */\n@@ -70,6 +91,15 @@ test_integer_to_float()\n   if (u2d(~((~0U) >> 1)) != (double) ~((~0U) >> 1))\t/* 0x80000000 */\n     abort();\n \n+  if (u2ld(0U) != (long double) 0U)\t\t\t/* 0 */\n+    abort();\n+  if (!ldnear (u2ld(~0U), (long double) ~0U))\t\t/* 0xffffffff */\n+    abort();\n+  if (!ldnear (u2ld((~0U) >> 1),(long double) ((~0U) >> 1)))\t/* 0x7fffffff */\n+    abort();\n+  if (u2ld(~((~0U) >> 1)) != (long double) ~((~0U) >> 1))\t/* 0x80000000 */\n+    abort();\n+\n   if (s2f(0) != (float) 0)\t\t\t\t/* 0 */\n     abort();\n   if (!fnear (s2f(~0), (float) ~0))\t\t\t/* 0xffffffff */\n@@ -87,6 +117,15 @@ test_integer_to_float()\n     abort();\n   if (s2d((int)~((~0U) >> 1)) != (double)(int)~((~0U) >> 1)) /* 0x80000000 */\n     abort();\n+\n+  if (s2ld(0) != (long double) 0)\t\t\t/* 0 */\n+    abort();\n+  if (!ldnear (s2ld(~0), (long double) ~0))\t\t/* 0xffffffff */\n+    abort();\n+  if (!ldnear (s2ld((int)((~0U) >> 1)), (long double)(int)((~0U) >> 1))) /* 0x7fffffff */\n+    abort();\n+  if (s2ld((int)~((~0U) >> 1)) != (long double)(int)~((~0U) >> 1)) /* 0x80000000 */\n+    abort();\n }\n \n #if __GNUC__\n@@ -104,6 +143,13 @@ ull2d(u)\n   return u;\n }\n \n+long double\n+ull2ld(u)\n+     unsigned long long int u;\n+{\n+  return u;\n+}\n+\n float\n sll2f(s)\n      long long int s;\n@@ -118,6 +164,13 @@ sll2d(s)\n   return s;\n }\n \n+long double\n+sll2ld(s)\n+     long long int s;\n+{\n+  return s;\n+}\n+\n test_longlong_integer_to_float()\n {\n   if (ull2f(0ULL) != (float) 0ULL)\t\t\t/* 0 */\n@@ -147,6 +200,15 @@ test_longlong_integer_to_float()\n   if (ull2d(~((~0ULL) >> 1)) != (double) ~((~0ULL) >> 1)) /* 0x80000000 */\n     abort();\n \n+  if (ull2ld(0ULL) != (long double) 0ULL)\t\t/* 0 */\n+    abort();\n+  if (ull2ld(~0ULL) != (long double) ~0ULL)\t\t/* 0xffffffff */\n+    abort();\n+  if (ull2ld((~0ULL) >> 1) != (long double) ((~0ULL) >> 1))\t/* 0x7fffffff */\n+    abort();\n+  if (ull2ld(~((~0ULL) >> 1)) != (long double) ~((~0ULL) >> 1)) /* 0x80000000 */\n+    abort();\n+\n   if (sll2f(0LL) != (float) 0LL)\t\t\t/* 0 */\n     abort();\n   if (sll2f(~0LL) != (float) ~0LL)\t\t\t/* 0xffffffff */\n@@ -164,6 +226,15 @@ test_longlong_integer_to_float()\n     abort();\n   if (! dnear (sll2d((long long int)~((~0ULL) >> 1)), (double)(long long int)~((~0ULL) >> 1))) /* 0x80000000 */\n     abort();\n+\n+  if (sll2ld(0LL) != (long double) 0LL)\t\t\t/* 0 */\n+    abort();\n+  if (sll2ld(~0LL) != (long double) ~0LL)\t\t/* 0xffffffff */\n+    abort();\n+  if (!ldnear (sll2ld((long long int)((~0ULL) >> 1)), (long double)(long long int)((~0ULL) >> 1))) /* 0x7fffffff */\n+    abort();\n+  if (! ldnear (sll2ld((long long int)~((~0ULL) >> 1)), (long double)(long long int)~((~0ULL) >> 1))) /* 0x80000000 */\n+    abort();\n }\n #endif\n \n@@ -179,6 +250,12 @@ d2u(double d)\n   return (unsigned) d;\n }\n \n+unsigned int\n+ld2u(long double d)\n+{\n+  return (unsigned) d;\n+}\n+\n int\n f2s(float f)\n {\n@@ -191,6 +268,12 @@ d2s(double d)\n   return (int) d;\n }\n \n+int\n+ld2s(long double d)\n+{\n+  return (int) d;\n+}\n+\n test_float_to_integer()\n {\n   if (f2u(0.0) != 0)\n@@ -226,6 +309,25 @@ test_float_to_integer()\n     abort();\n  }\n \n+ /* These tests require long double precision, so for hosts that don't offer\n+    that much precision, just ignore these test.  */\n+ if (sizeof (long double) >= 8) {\n+  if (ld2u(0.0) != 0)\n+    abort();\n+  if (ld2u(0.999) != 0)\n+    abort();\n+  if (ld2u(1.0) != 1)\n+    abort();\n+  if (ld2u(1.99) != 1)\n+    abort();\n+  if (ld2u((long double) (~0U)) != ~0U)\t\t\t/* 0xffffffff */\n+    abort();\n+  if (ld2u((long double) ((~0U) >> 1)) != (~0U) >> 1)\t/* 0x7fffffff */\n+    abort();\n+  if (ld2u((long double) ~((~0U) >> 1)) != ~((~0U) >> 1))\t/* 0x80000000 */\n+    abort();\n+ }\n+\n   if (f2s(0.0) != 0)\n     abort();\n   if (f2s(0.999) != 0)\n@@ -265,6 +367,29 @@ test_float_to_integer()\n   if (d2s((double)(int)~((~0U) >> 1)) != (int)~((~0U) >> 1)) /* 0x80000000 */\n     abort();\n  }\n+\n+ /* These tests require long double precision, so for hosts that don't offer\n+    that much precision, just ignore these test.  */\n+ if (sizeof (long double) >= 8) {\n+  if (ld2s(0.0) != 0)\n+    abort();\n+  if (ld2s(0.999) != 0)\n+    abort();\n+  if (ld2s(1.0) != 1)\n+    abort();\n+  if (ld2s(1.99) != 1)\n+    abort();\n+  if (ld2s(-0.999) != 0)\n+    abort();\n+  if (ld2s(-1.0) != -1)\n+    abort();\n+  if (ld2s(-1.99) != -1)\n+    abort();\n+  if (ld2s((long double) ((~0U) >> 1)) != (~0U) >> 1)\t\t/* 0x7fffffff */\n+    abort();\n+  if (ld2s((long double)(int)~((~0U) >> 1)) != (int)~((~0U) >> 1)) /* 0x80000000 */\n+    abort();\n+ }\n }\n \n #if __GNUC__\n@@ -280,6 +405,12 @@ d2ull(double d)\n   return (unsigned long long int) d;\n }\n \n+unsigned long long int\n+ld2ull(long double d)\n+{\n+  return (unsigned long long int) d;\n+}\n+\n long long int\n f2sll(float f)\n {\n@@ -292,6 +423,12 @@ d2sll(double d)\n   return (long long int) d;\n }\n \n+long long int\n+ld2sll(long double d)\n+{\n+  return (long long int) d;\n+}\n+\n test_float_to_longlong_integer()\n {\n   if (f2ull(0.0) != 0LL)\n@@ -322,6 +459,20 @@ test_float_to_longlong_integer()\n   if (d2ull((double) ~((~0ULL) >> 1)) != ~((~0ULL) >> 1)) /* 0x80000000 */\n     abort();\n \n+  if (ld2ull(0.0) != 0LL)\n+    abort();\n+  if (ld2ull(0.999) != 0LL)\n+    abort();\n+  if (ld2ull(1.0) != 1LL)\n+    abort();\n+  if (ld2ull(1.99) != 1LL)\n+    abort();\n+  if (ld2ull((long double) ((~0ULL) >> 1)) != (~0ULL) >> 1 &&\t/* 0x7fffffff */\n+      ld2ull((long double) ((~0ULL) >> 1)) != ((~0ULL) >> 1) + 1)\n+    abort();\n+  if (ld2ull((long double) ~((~0ULL) >> 1)) != ~((~0ULL) >> 1)) /* 0x80000000 */\n+    abort();\n+\n \n   if (f2sll(0.0) != 0LL)\n     abort();\n@@ -356,6 +507,23 @@ test_float_to_longlong_integer()\n     abort();\n   if (d2sll((double)(long long int)~((~0ULL) >> 1)) != (long long int)~((~0ULL) >> 1)) /* 0x80000000 */\n     abort();\n+\n+  if (ld2sll(0.0) != 0LL)\n+    abort();\n+  if (ld2sll(0.999) != 0LL)\n+    abort();\n+  if (ld2sll(1.0) != 1LL)\n+    abort();\n+  if (ld2sll(1.99) != 1LL)\n+    abort();\n+  if (ld2sll(-0.999) != 0LL)\n+    abort();\n+  if (ld2sll(-1.0) != -1LL)\n+    abort();\n+  if (ld2sll(-1.99) != -1LL)\n+    abort();\n+  if (ld2sll((long double)(long long int)~((~0ULL) >> 1)) != (long long int)~((~0ULL) >> 1)) /* 0x80000000 */\n+    abort();\n }\n #endif\n "}]}