{"sha": "a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0YzJhM2QxOWIwOTZhOTcxODQyNTNkMWUxZjIyNWYxM2JkM2EwZg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-17T00:07:21Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-17T00:07:21Z"}, "message": "[libbacktrace] Read .gnu_debugaltlink\n\nRead the elf file pointed at by the .gnu_debugaltlink section, and verify that\nthe build id matches.\n\n2019-01-17  Tom de Vries  <tdevries@suse.de>\n\n\t* elf.c (elf_add): Add and handle with_buildid_data and\n\twith_buildid_size parameters.  Handle .gnu_debugaltlink section.\n\t(phdr_callback, backtrace_initialize): Add arguments to elf_add calls.\n\nFrom-SVN: r267992", "tree": {"sha": "717358f170c54317322fee7b35ad81b85f3ef752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/717358f170c54317322fee7b35ad81b85f3ef752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edfe833a31a4e34875f30ec5eb8c56da556384d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfe833a31a4e34875f30ec5eb8c56da556384d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfe833a31a4e34875f30ec5eb8c56da556384d8"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "d76341ac70e2dbe9040a7567d8b21b9719cd9234", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "patch": "@@ -1,3 +1,9 @@\n+2019-01-17  Tom de Vries  <tdevries@suse.de>\n+\n+\t* elf.c (elf_add): Add and handle with_buildid_data and\n+\twith_buildid_size parameters.  Handle .gnu_debugaltlink section.\n+\t(phdr_callback, backtrace_initialize): Add arguments to elf_add calls.\n+\n 2019-01-16  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf.c (read_referenced_name_from_attr): New function.  Factor out"}, {"sha": "17e7ea868792c58a19ed4047cf5151705fbee082", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "patch": "@@ -15,7 +15,7 @@\n @SET_MAKE@\n \n # Makefile.am -- Backtrace Makefile.\n-# Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+# Copyright (C) 2012-2019 Free Software Foundation, Inc.\n \n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions are"}, {"sha": "abe4cded5e9c021188268b8f4f24311c427df682", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 88, "deletions": 5, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34c2a3d19b096a97184253d1e1f225f13bd3a0f/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "patch": "@@ -2638,7 +2638,8 @@ static int\n elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t uintptr_t base_address, backtrace_error_callback error_callback,\n \t void *data, fileline *fileline_fn, int *found_sym, int *found_dwarf,\n-\t int exe, int debuginfo)\n+\t int exe, int debuginfo, const char *with_buildid_data,\n+\t uint32_t with_buildid_size)\n {\n   struct backtrace_view ehdr_view;\n   b_elf_ehdr ehdr;\n@@ -2670,6 +2671,11 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   int debuglink_view_valid;\n   const char *debuglink_name;\n   uint32_t debuglink_crc;\n+  struct backtrace_view debugaltlink_view;\n+  int debugaltlink_view_valid;\n+  const char *debugaltlink_name;\n+  const char *debugaltlink_buildid_data;\n+  uint32_t debugaltlink_buildid_size;\n   off_t min_offset;\n   off_t max_offset;\n   struct backtrace_view debug_view;\n@@ -2694,6 +2700,10 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   debuglink_view_valid = 0;\n   debuglink_name = NULL;\n   debuglink_crc = 0;\n+  debugaltlink_view_valid = 0;\n+  debugaltlink_name = NULL;\n+  debugaltlink_buildid_data = NULL;\n+  debugaltlink_buildid_size = 0;\n   debug_view_valid = 0;\n   opd = NULL;\n \n@@ -2873,6 +2883,15 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t      buildid_data = &note->name[0] + ((note->namesz + 3) & ~ 3);\n \t      buildid_size = note->descsz;\n \t    }\n+\n+\t  if (with_buildid_size != 0)\n+\t    {\n+\t      if (buildid_size != with_buildid_size)\n+\t\tgoto fail;\n+\n+\t      if (memcmp (buildid_data, with_buildid_data, buildid_size) != 0)\n+\t\tgoto fail;\n+\t    }\n \t}\n \n       /* Read the debuglink file if present.  */\n@@ -2899,6 +2918,32 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t    }\n \t}\n \n+      if (!debugaltlink_view_valid\n+\t  && strcmp (name, \".gnu_debugaltlink\") == 0)\n+\t{\n+\t  const char *debugaltlink_data;\n+\t  size_t debugaltlink_name_len;\n+\n+\t  if (!backtrace_get_view (state, descriptor, shdr->sh_offset,\n+\t\t\t\t   shdr->sh_size, error_callback, data,\n+\t\t\t\t   &debugaltlink_view))\n+\t    goto fail;\n+\n+\t  debugaltlink_view_valid = 1;\n+\t  debugaltlink_data = (const char *) debugaltlink_view.data;\n+\t  debugaltlink_name = debugaltlink_data;\n+\t  debugaltlink_name_len = strnlen (debugaltlink_data, shdr->sh_size);\n+\t  if (debugaltlink_name_len < shdr->sh_size)\n+\t    {\n+\t      /* Include terminating zero.  */\n+\t      debugaltlink_name_len =+ 1;\n+\n+\t      debugaltlink_buildid_data\n+\t\t= debugaltlink_data + debugaltlink_name_len;\n+\t      debugaltlink_buildid_size = shdr->sh_size - debugaltlink_name_len;\n+\t    }\n+\t}\n+\n       /* Read the .opd section on PowerPC64 ELFv1.  */\n       if (ehdr.e_machine == EM_PPC64\n \t  && (ehdr.e_flags & EF_PPC64_ABI) < 2\n@@ -2993,8 +3038,11 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t  if (debuglink_view_valid)\n \t    backtrace_release_view (state, &debuglink_view, error_callback,\n \t\t\t\t    data);\n+\t  if (debugaltlink_view_valid)\n+\t    backtrace_release_view (state, &debugaltlink_view, error_callback,\n+\t\t\t\t    data);\n \t  ret = elf_add (state, NULL, d, base_address, error_callback, data,\n-\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1);\n+\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1, NULL, 0);\n \t  if (ret < 0)\n \t    backtrace_close (d, error_callback, data);\n \t  else\n@@ -3028,8 +3076,11 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \n \t  backtrace_release_view (state, &debuglink_view, error_callback,\n \t\t\t\t  data);\n+\t  if (debugaltlink_view_valid)\n+\t    backtrace_release_view (state, &debugaltlink_view, error_callback,\n+\t\t\t\t    data);\n \t  ret = elf_add (state, NULL, d, base_address, error_callback, data,\n-\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1);\n+\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1, NULL, 0);\n \t  if (ret < 0)\n \t    backtrace_close (d, error_callback, data);\n \t  else\n@@ -3044,6 +3095,36 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n       debuglink_view_valid = 0;\n     }\n \n+  if (debugaltlink_name != NULL)\n+    {\n+      int d;\n+\n+      d = elf_open_debugfile_by_debuglink (state, filename, debugaltlink_name,\n+\t\t\t\t\t   0, error_callback, data);\n+      if (d >= 0)\n+\t{\n+\t  int ret;\n+\n+\t  ret = elf_add (state, filename, d, base_address, error_callback, data,\n+\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1,\n+\t\t\t debugaltlink_buildid_data, debugaltlink_buildid_size);\n+\t  backtrace_release_view (state, &debugaltlink_view, error_callback,\n+\t\t\t\t  data);\n+\t  debugaltlink_view_valid = 0;\n+\t  if (ret < 0)\n+\t    {\n+\t      backtrace_close (d, error_callback, data);\n+\t      return ret;\n+\t    }\n+\t}\n+    }\n+\n+  if (debugaltlink_view_valid)\n+    {\n+      backtrace_release_view (state, &debugaltlink_view, error_callback, data);\n+      debugaltlink_view_valid = 0;\n+    }\n+\n   /* Read all the debug sections in a single view, since they are\n      probably adjacent in the file.  We never release this view.  */\n \n@@ -3199,6 +3280,8 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n     backtrace_release_view (state, &strtab_view, error_callback, data);\n   if (debuglink_view_valid)\n     backtrace_release_view (state, &debuglink_view, error_callback, data);\n+  if (debugaltlink_view_valid)\n+    backtrace_release_view (state, &debugaltlink_view, error_callback, data);\n   if (buildid_view_valid)\n     backtrace_release_view (state, &buildid_view, error_callback, data);\n   if (debug_view_valid)\n@@ -3269,7 +3352,7 @@ phdr_callback (struct dl_phdr_info *info, size_t size ATTRIBUTE_UNUSED,\n \n   if (elf_add (pd->state, filename, descriptor, info->dlpi_addr,\n \t       pd->error_callback, pd->data, &elf_fileline_fn, pd->found_sym,\n-\t       &found_dwarf, 0, 0))\n+\t       &found_dwarf, 0, 0, NULL, 0))\n     {\n       if (found_dwarf)\n \t{\n@@ -3297,7 +3380,7 @@ backtrace_initialize (struct backtrace_state *state, const char *filename,\n   struct phdr_data pd;\n \n   ret = elf_add (state, filename, descriptor, 0, error_callback, data,\n-\t\t &elf_fileline_fn, &found_sym, &found_dwarf, 1, 0);\n+\t\t &elf_fileline_fn, &found_sym, &found_dwarf, 1, 0, NULL, 0);\n   if (!ret)\n     return 0;\n "}]}