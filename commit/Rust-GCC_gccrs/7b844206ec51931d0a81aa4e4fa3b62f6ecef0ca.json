{"sha": "7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca", "node_id": "C_kwDOANBUbNoAKDdiODQ0MjA2ZWM1MTkzMWQwYTgxYWE0ZTRmYTNiNjJmNmVjZWYwY2E", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-13T09:15:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-13T09:19:01Z"}, "message": "Fix wrong SRA with VIEW_CONVERT_EXPR and reverse SSO\n\nMost cases of VIEW_CONVERT_EXPRs involving reverse scalar storage order are\ndisqualified for SRA because they are storage_order_barrier_p, but you can\nstill have a VIEW_CONVERT_EXPR to a regular composite type being applied to\na component of a record type with reverse scalar storage order.\n\nIn this case the bypass for !useless_type_conversion_p in sra_modify_assign,\nalbeit already heavily guarded, triggers and may generate wrong code, so the\npatch makes sure that it does only when the SSO is the same on both side.\n\ngcc/\n\t* tree-sra.cc (sra_modify_assign): Check that scalar storage order\n\tis the same on the LHS and RHS before rewriting one with the model\n\tof the other.\ngcc/testsuite/\n\t* gnat.dg/sso17.adb: New test.", "tree": {"sha": "13319be8c4b929b89715cafc316236e6273a7800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13319be8c4b929b89715cafc316236e6273a7800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca/comments", "author": null, "committer": null, "parents": [{"sha": "c77e4873b14bd84fc6715db8980ce14886b28906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77e4873b14bd84fc6715db8980ce14886b28906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77e4873b14bd84fc6715db8980ce14886b28906"}], "stats": {"total": 81, "additions": 57, "deletions": 24}, "files": [{"sha": "ed57580f0c5a5ad88c66bcadb4577c38bc7c8e0a", "filename": "gcc/testsuite/gnat.dg/sso17.adb", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca/gcc%2Ftestsuite%2Fgnat.dg%2Fsso17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca/gcc%2Ftestsuite%2Fgnat.dg%2Fsso17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsso17.adb?ref=7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca", "patch": "@@ -0,0 +1,34 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnatws -O\" }\n+\n+with System;\n+\n+procedure SSO17 is\n+\n+  type My_Float is new Float range 0.0 .. 359.99;\n+\n+  type Rec is record\n+    Az : My_Float;\n+    El : My_Float;\n+  end record;\n+  for Rec'Bit_Order use System.High_Order_First;\n+  for Rec'Scalar_Storage_Order use System.High_Order_First;\n+\n+  R : Rec;\n+\n+  procedure Is_True (B : Boolean);\n+  pragma No_Inline (Is_True);\n+\n+  procedure Is_True (B : Boolean) is\n+  begin\n+    if not B then\n+      raise Program_Error;\n+    end if;\n+  end;\n+\n+begin\n+  R := (Az => 1.1, El => 2.2);\n+  Is_True (R.Az'Valid);\n+  R := (Az => 3.3, El => 4.4);\n+  Is_True (R.Az'Valid);\n+end;"}, {"sha": "081c51b58a4d6bf771bce94a9910bcb53f15d213", "filename": "gcc/tree-sra.cc", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca/gcc%2Ftree-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca/gcc%2Ftree-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.cc?ref=7b844206ec51931d0a81aa4e4fa3b62f6ecef0ca", "patch": "@@ -4270,32 +4270,31 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n       sra_stats.exprs++;\n     }\n \n-  if (modify_this_stmt)\n-    {\n-      if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n+  if (modify_this_stmt\n+      && !useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n+    {\n+      /* If we can avoid creating a VIEW_CONVERT_EXPR, then do so.\n+\t ??? This should move to fold_stmt which we simply should\n+\t call after building a VIEW_CONVERT_EXPR here.  */\n+      if (AGGREGATE_TYPE_P (TREE_TYPE (lhs))\n+\t  && TYPE_REVERSE_STORAGE_ORDER (TREE_TYPE (lhs)) == racc->reverse\n+\t  && !contains_bitfld_component_ref_p (lhs))\n \t{\n-\t  /* If we can avoid creating a VIEW_CONVERT_EXPR do so.\n-\t     ???  This should move to fold_stmt which we simply should\n-\t     call after building a VIEW_CONVERT_EXPR here.  */\n-\t  if (AGGREGATE_TYPE_P (TREE_TYPE (lhs))\n-\t      && !contains_bitfld_component_ref_p (lhs))\n-\t    {\n-\t      lhs = build_ref_for_model (loc, lhs, 0, racc, gsi, false);\n-\t      gimple_assign_set_lhs (stmt, lhs);\n-\t    }\n-\t  else if (lacc\n-\t\t   && AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n-\t\t   && !contains_vce_or_bfcref_p (rhs))\n-\t    rhs = build_ref_for_model (loc, rhs, 0, lacc, gsi, false);\n+\t  lhs = build_ref_for_model (loc, lhs, 0, racc, gsi, false);\n+\t  gimple_assign_set_lhs (stmt, lhs);\n+\t}\n+      else if (lacc\n+\t       && AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n+\t       && TYPE_REVERSE_STORAGE_ORDER (TREE_TYPE (rhs)) == lacc->reverse\n+\t       && !contains_vce_or_bfcref_p (rhs))\n+\trhs = build_ref_for_model (loc, rhs, 0, lacc, gsi, false);\n \n-\t  if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n-\t    {\n-\t      rhs = fold_build1_loc (loc, VIEW_CONVERT_EXPR, TREE_TYPE (lhs),\n-\t\t\t\t     rhs);\n-\t      if (is_gimple_reg_type (TREE_TYPE (lhs))\n-\t\t  && TREE_CODE (lhs) != SSA_NAME)\n-\t\tforce_gimple_rhs = true;\n-\t    }\n+      if (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n+\t{\n+\t  rhs = fold_build1_loc (loc, VIEW_CONVERT_EXPR, TREE_TYPE (lhs), rhs);\n+\t  if (is_gimple_reg_type (TREE_TYPE (lhs))\n+\t      && TREE_CODE (lhs) != SSA_NAME)\n+\t    force_gimple_rhs = true;\n \t}\n     }\n "}]}