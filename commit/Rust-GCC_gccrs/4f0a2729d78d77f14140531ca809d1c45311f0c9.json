{"sha": "4f0a2729d78d77f14140531ca809d1c45311f0c9", "node_id": "C_kwDOANBUbNoAKDRmMGEyNzI5ZDc4ZDc3ZjE0MTQwNTMxY2E4MDlkMWM0NTMxMWYwYzk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-31T21:38:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T21:38:32Z"}, "message": "Merge #1519\n\n1519: Fix generic substitution on unit structs r=philberty a=philberty\n\nFixes #1518\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "69e9a51279bce8099b757e17670af963193cf754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e9a51279bce8099b757e17670af963193cf754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0a2729d78d77f14140531ca809d1c45311f0c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjD9TYCRBK7hj4Ov3rIwAAB54IAJM0xTNsTZ6o7fC2DLkzMk+f\ncNhJ7xgLOU5MzKgrQKlpB/r7InQ8EsAxd+l6nb2cQ1rKI5Te2QsoRDvd0Dgluc/y\nHYdIBPhXj1z3CYPT1PGTXsC5WMav8ULvAq7SJM6eBm1bQFUvT5Ts8a47ke36y07i\nsy6VqFgT0d6mPzpR1hj3prvDVIYC57qeSBpfGOz+CIrXo0r/mk4d9dr3oEDuxOfC\nsmsUQDgqiV1AQ3hDrc2Z3ZIZpjbQS7l+m9wpCkJbRTaRlUaKVG/enLeNHSxOisM6\ndHOw7++p8PModNnW9jxVSII44RbOrabGgfDIw7IT4M7NHdR51IOySWqKLoAJDOw=\n=Rajr\n-----END PGP SIGNATURE-----\n", "payload": "tree 69e9a51279bce8099b757e17670af963193cf754\nparent ceb43210f8a6dfec98f634c326964328d1247f57\nparent 63403f0af7203f3b3c4bc2fef52fee884bb728b8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1661981912 +0000\ncommitter GitHub <noreply@github.com> 1661981912 +0000\n\nMerge #1519\n\n1519: Fix generic substitution on unit structs r=philberty a=philberty\n\nFixes #1518\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a2729d78d77f14140531ca809d1c45311f0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a2729d78d77f14140531ca809d1c45311f0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a2729d78d77f14140531ca809d1c45311f0c9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb43210f8a6dfec98f634c326964328d1247f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb43210f8a6dfec98f634c326964328d1247f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb43210f8a6dfec98f634c326964328d1247f57"}, {"sha": "63403f0af7203f3b3c4bc2fef52fee884bb728b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63403f0af7203f3b3c4bc2fef52fee884bb728b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63403f0af7203f3b3c4bc2fef52fee884bb728b8"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "146fe26a762164cd738a30f20f6a84fd3f3e8f8b", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=4f0a2729d78d77f14140531ca809d1c45311f0c9", "patch": "@@ -368,6 +368,9 @@ void\n AssociatedImplTrait::setup_associated_types (\n   const TyTy::BaseType *self, const TyTy::TypeBoundPredicate &bound)\n {\n+  if (!bound.contains_associated_types ())\n+    return;\n+\n   // compute the constrained impl block generic arguments based on self and the\n   // higher ranked trait bound\n   TyTy::BaseType *receiver = self->clone ();"}, {"sha": "9a0d144ab107d1c07c71b18368e1a3f1e8f8b505", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=4f0a2729d78d77f14140531ca809d1c45311f0c9", "patch": "@@ -1024,6 +1024,11 @@ TypeCheckExpr::visit (HIR::MethodCallExpr &expr)\n       return;\n     }\n \n+  rust_debug_loc (expr.get_method_name ().get_locus (),\n+\t\t  \"resolved method to: {%u} {%s}\",\n+\t\t  candidate.candidate.ty->get_ref (),\n+\t\t  candidate.candidate.ty->debug_str ().c_str ());\n+\n   // Get the adjusted self\n   Adjuster adj (receiver_tyty);\n   TyTy::BaseType *adjusted_self = adj.adjust_type (candidate.adjustments);\n@@ -1120,6 +1125,9 @@ TypeCheckExpr::visit (HIR::MethodCallExpr &expr)\n   // apply any remaining generic arguments\n   if (expr.get_method_name ().has_generic_args ())\n     {\n+      rust_debug_loc (expr.get_method_name ().get_generic_args ().get_locus (),\n+\t\t      \"applying generic arguments to method_call: {%s}\",\n+\t\t      lookup->debug_str ().c_str ());\n       HIR::GenericArgs &args = expr.get_method_name ().get_generic_args ();\n       lookup\n \t= SubstMapper::Resolve (lookup, expr.get_method_name ().get_locus (),\n@@ -1129,10 +1137,14 @@ TypeCheckExpr::visit (HIR::MethodCallExpr &expr)\n     }\n   else if (lookup->needs_generic_substitutions ())\n     {\n+      rust_debug (\"method needs inference: {%s}\",\n+\t\t  lookup->debug_str ().c_str ());\n       lookup = SubstMapper::InferSubst (lookup,\n \t\t\t\t\texpr.get_method_name ().get_locus ());\n     }\n \n+  rust_debug (\"type-checking method_call: {%s}\", lookup->debug_str ().c_str ());\n+\n   TyTy::BaseType *function_ret_tyty\n     = TyTy::TypeCheckMethodCallExpr::go (lookup, expr, adjusted_self, context);\n   if (function_ret_tyty == nullptr"}, {"sha": "811d64bd7403613e1de5236f8807a4f103642226", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=4f0a2729d78d77f14140531ca809d1c45311f0c9", "patch": "@@ -374,6 +374,21 @@ TypeBoundPredicate::requires_generic_args () const\n   return substitutions.size () > 1;\n }\n \n+bool\n+TypeBoundPredicate::contains_associated_types () const\n+{\n+  auto trait_ref = get ();\n+  for (const auto &trait_item : trait_ref->get_trait_items ())\n+    {\n+      bool is_associated_type\n+\t= trait_item.get_trait_item_type ()\n+\t  == Resolver::TraitItemReference::TraitItemType::TYPE;\n+      if (is_associated_type)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n // trait item reference\n \n const Resolver::TraitItemReference *"}, {"sha": "74c8c354897c871d75f7a2599707435462108d4f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a2729d78d77f14140531ca809d1c45311f0c9/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=4f0a2729d78d77f14140531ca809d1c45311f0c9", "patch": "@@ -1057,6 +1057,8 @@ class TypeBoundPredicate : public SubstitutionRef\n \n   bool requires_generic_args () const;\n \n+  bool contains_associated_types () const;\n+\n private:\n   DefId reference;\n   Location locus;\n@@ -1360,6 +1362,11 @@ class ADTType : public BaseType, public SubstitutionRef\n \n   bool is_concrete () const override final\n   {\n+    if (is_unit ())\n+      {\n+\treturn !needs_substitution ();\n+      }\n+\n     for (auto &variant : variants)\n       {\n \tfor (auto &field : variant->get_fields ())"}]}