{"sha": "99a04f4fc55931d920a27b0efb61fc46eb96a628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlhMDRmNGZjNTU5MzFkOTIwYTI3YjBlZmI2MWZjNDZlYjk2YTYyOA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-10-30T17:45:16Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-10-30T17:45:16Z"}, "message": "re PR rtl-optimization/68106 (c-c++-common/torture/builtin-arith-overflow-11.c FAILs with -flra-remat @ aarch64)\n\n2015-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/68106\n\t* lra-remat.c (input_regno_present_p): Process hard regs\n\texplicitly present in machine description insns.\n\t(call_used_input_regno_present_p): Ditto.\n\t(calculate_gen_cands): Ditto.\n\t(do_remat): Ditto.\n\n2015-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/68106\n\t* gcc.target/aarch64/pr68106.c: New.\n\nFrom-SVN: r229593", "tree": {"sha": "9c22b56e448db2f38d5dc5d805ffe0412d57fca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c22b56e448db2f38d5dc5d805ffe0412d57fca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99a04f4fc55931d920a27b0efb61fc46eb96a628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a04f4fc55931d920a27b0efb61fc46eb96a628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a04f4fc55931d920a27b0efb61fc46eb96a628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a04f4fc55931d920a27b0efb61fc46eb96a628/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edcc76d5aebb6492ebbfb705b0b7b2c425b804ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edcc76d5aebb6492ebbfb705b0b7b2c425b804ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edcc76d5aebb6492ebbfb705b0b7b2c425b804ff"}], "stats": {"total": 169, "additions": 126, "deletions": 43}, "files": [{"sha": "cccb07e3d65546059bfbe8930d6176d4888527a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99a04f4fc55931d920a27b0efb61fc46eb96a628", "patch": "@@ -1,3 +1,12 @@\n+2015-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/68106\n+\t* lra-remat.c (input_regno_present_p): Process hard regs\n+\texplicitly present in machine description insns.\n+\t(call_used_input_regno_present_p): Ditto.\n+\t(calculate_gen_cands): Ditto.\n+\t(do_remat): Ditto.\n+\n 2015-10-30  Jim Wilson  <jim.wilson@linaro.org>\n \n \t* config/arm/neon-testgen.ml: Fix comment typo."}, {"sha": "3fbee4bd9af3c39f4c8b7e64f5afdb8e6aec2d0f", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 62, "deletions": 43, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=99a04f4fc55931d920a27b0efb61fc46eb96a628", "patch": "@@ -695,26 +695,36 @@ calculate_local_reg_remat_bb_data (void)\n static bool\n input_regno_present_p (rtx_insn *insn, int regno)\n {\n+  int iter;\n   lra_insn_recog_data_t id = lra_get_insn_recog_data (insn);\n+  struct lra_static_insn_data *static_id = id->insn_static_data;\n   struct lra_insn_reg *reg;\n-\n-  for (reg = id->regs; reg != NULL; reg = reg->next)\n-    if (reg->type == OP_IN && reg->regno == regno)\n-      return true;\n+  \n+  for (iter = 0; iter < 2; iter++)\n+    for (reg = (iter == 0 ? id->regs : static_id->hard_regs);\n+\t reg != NULL;\n+\t reg = reg->next)\n+      if (reg->type == OP_IN && reg->regno == regno)\n+\treturn true;\n   return false;\n }\n \n /* Return true if a call used register is an input operand of INSN.  */\n static bool\n call_used_input_regno_present_p (rtx_insn *insn)\n {\n+  int iter;\n   lra_insn_recog_data_t id = lra_get_insn_recog_data (insn);\n+  struct lra_static_insn_data *static_id = id->insn_static_data;\n   struct lra_insn_reg *reg;\n \n-  for (reg = id->regs; reg != NULL; reg = reg->next)\n-    if (reg->type == OP_IN && reg->regno <= FIRST_PSEUDO_REGISTER\n-\t&& TEST_HARD_REG_BIT (call_used_reg_set, reg->regno))\n-      return true;\n+  for (iter = 0; iter < 2; iter++)\n+    for (reg = (iter == 0 ? id->regs : static_id->hard_regs);\n+\t reg != NULL;\n+\t reg = reg->next)\n+      if (reg->type == OP_IN && reg->regno <= FIRST_PSEUDO_REGISTER\n+\t  && TEST_HARD_REG_BIT (call_used_reg_set, reg->regno))\n+\treturn true;\n   return false;\n }\n \n@@ -761,11 +771,13 @@ calculate_gen_cands (void)\n \tif (INSN_P (insn))\n \t  {\n \t    lra_insn_recog_data_t id = lra_get_insn_recog_data (insn);\n+\t    struct lra_static_insn_data *static_id = id->insn_static_data;\n \t    struct lra_insn_reg *reg;\n \t    unsigned int uid;\n \t    bitmap_iterator bi;\n \t    cand_t cand;\n \t    rtx set;\n+\t    int iter;\n \t    int src_regno = -1, dst_regno = -1;\n \n \t    if ((set = single_set (insn)) != NULL\n@@ -777,26 +789,29 @@ calculate_gen_cands (void)\n \n \t    /* Update gen_cands:  */\n \t    bitmap_clear (&temp_bitmap);\n-\t    for (reg = id->regs; reg != NULL; reg = reg->next)\n-\t      if (reg->type != OP_IN\n-\t\t  || find_regno_note (insn, REG_DEAD, reg->regno) != NULL)\n-\t\tEXECUTE_IF_SET_IN_BITMAP (&gen_insns, 0, uid, bi)\n-\t\t  {\n-\t\t    rtx_insn *insn2 = lra_insn_recog_data[uid]->insn;\n-\n-\t\t    cand = insn_to_cand[INSN_UID (insn2)];\n-\t\t    gcc_assert (cand != NULL);\n-\t\t    /* Ignore the reload insn.  */\n-\t\t    if (src_regno == cand->reload_regno\n-\t\t\t&& dst_regno == cand->regno)\n-\t\t      continue;\n-\t\t    if (cand->regno == reg->regno\n-\t\t\t|| input_regno_present_p (insn2, reg->regno))\n-\t\t      {\n-\t\t\tbitmap_clear_bit (gen_cands, cand->index);\n-\t\t\tbitmap_set_bit (&temp_bitmap, uid);\n-\t\t      }\n-\t\t  }\n+\t    for (iter = 0; iter < 2; iter++)\n+\t      for (reg = (iter == 0 ? id->regs : static_id->hard_regs);\n+\t\t   reg != NULL;\n+\t\t   reg = reg->next)\n+\t\tif (reg->type != OP_IN\n+\t\t    || find_regno_note (insn, REG_DEAD, reg->regno) != NULL)\n+\t\t  EXECUTE_IF_SET_IN_BITMAP (&gen_insns, 0, uid, bi)\n+\t\t    {\n+\t\t      rtx_insn *insn2 = lra_insn_recog_data[uid]->insn;\n+\t\t      \n+\t\t      cand = insn_to_cand[INSN_UID (insn2)];\n+\t\t      gcc_assert (cand != NULL);\n+\t\t      /* Ignore the reload insn.  */\n+\t\t      if (src_regno == cand->reload_regno\n+\t\t\t  && dst_regno == cand->regno)\n+\t\t\tcontinue;\n+\t\t      if (cand->regno == reg->regno\n+\t\t\t  || input_regno_present_p (insn2, reg->regno))\n+\t\t\t{\n+\t\t\t  bitmap_clear_bit (gen_cands, cand->index);\n+\t\t\t  bitmap_set_bit (&temp_bitmap, uid);\n+\t\t\t}\n+\t\t    }\n \t    \n \t    if (CALL_P (insn))\n \t      EXECUTE_IF_SET_IN_BITMAP (&gen_insns, 0, uid, bi)\n@@ -1070,6 +1085,7 @@ do_remat (void)\n \t  unsigned int cid;\n \t  bitmap_iterator bi;\n \t  rtx set;\n+\t  int iter;\n \t  int src_regno = -1, dst_regno = -1;\n \n \t  if ((set = single_set (insn)) != NULL\n@@ -1155,21 +1171,24 @@ do_remat (void)\n \t  bitmap_clear (&temp_bitmap);\n \t  /* Update avail_cands (see analogous code for\n \t     calculate_gen_cands).  */\n-\t  for (reg = id->regs; reg != NULL; reg = reg->next)\n-\t    if (reg->type != OP_IN\n-\t\t|| find_regno_note (insn, REG_DEAD, reg->regno) != NULL)\n-\t      EXECUTE_IF_SET_IN_BITMAP (&avail_cands, 0, cid, bi)\n-\t\t{\n-\t\t  cand = all_cands[cid];\n-\n-\t\t  /* Ignore the reload insn.  */\n-\t\t  if (src_regno == cand->reload_regno\n-\t\t      && dst_regno == cand->regno)\n-\t\t    continue;\n-\t\t  if (cand->regno == reg->regno\n-\t\t      || input_regno_present_p (cand->insn, reg->regno))\n-\t\t    bitmap_set_bit (&temp_bitmap, cand->index);\n-\t\t}\n+\t  for (iter = 0; iter < 2; iter++)\n+\t    for (reg = (iter == 0 ? id->regs : static_id->hard_regs);\n+\t\t reg != NULL;\n+\t\t reg = reg->next)\n+\t      if (reg->type != OP_IN\n+\t\t  || find_regno_note (insn, REG_DEAD, reg->regno) != NULL)\n+\t\tEXECUTE_IF_SET_IN_BITMAP (&avail_cands, 0, cid, bi)\n+\t\t  {\n+\t\t    cand = all_cands[cid];\n+\t\t    \n+\t\t    /* Ignore the reload insn.  */\n+\t\t    if (src_regno == cand->reload_regno\n+\t\t\t&& dst_regno == cand->regno)\n+\t\t      continue;\n+\t\t    if (cand->regno == reg->regno\n+\t\t\t|| input_regno_present_p (cand->insn, reg->regno))\n+\t\t      bitmap_set_bit (&temp_bitmap, cand->index);\n+\t\t  }\n \n \t  if (CALL_P (insn))\n \t    EXECUTE_IF_SET_IN_BITMAP (&avail_cands, 0, cid, bi)"}, {"sha": "04f47e065fdb9ed1157678c964d0e58f4af8bb1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99a04f4fc55931d920a27b0efb61fc46eb96a628", "patch": "@@ -1,3 +1,8 @@\n+2015-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/68106\n+\t* gcc.target/aarch64/pr68106.c: New.\n+\n 2015-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/36192"}, {"sha": "dc552ecce09c34497062c0207df52ef1dab98bfd", "filename": "gcc/testsuite/gcc.target/aarch64/pr68106.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr68106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a04f4fc55931d920a27b0efb61fc46eb96a628/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr68106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr68106.c?ref=99a04f4fc55931d920a27b0efb61fc46eb96a628", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run { target aarch64*-*-* } } */\n+/* { dg-options \"-O\" } */\n+\n+typedef signed long long int S;\n+typedef unsigned long long int U;\n+typedef __int128 W;\n+__attribute__ ((noinline, noclone))\n+U upseu (U x, S y, int *ovf)\n+{\n+  U res;\n+  *ovf = __builtin_add_overflow (x, y, &res);\n+  return res;\n+}\n+U\n+usueu (U x, U y, int *ovf)\n+{\n+  U res;\n+  *ovf = __builtin_sub_overflow (x, y, &res);\n+  return res;\n+}\n+U\n+usseu (U x, S y, int *ovf)\n+{\n+  U res;\n+  *ovf = __builtin_sub_overflow (x, y, &res);\n+  return res;\n+}\n+int\n+main ()\n+{\n+  int i, j;\n+  for (i = 0; i < ((unsigned char) ~0); i++)\n+    for (j = 0; j < ((unsigned char) ~0); j++)\n+      {\n+\tU u1 = ((W) i << ((8 - 1) * 8));\n+\tS s2 = ((W) j << ((8 - 1) * 8)) + (-0x7fffffffffffffffLL - 1);\n+\tU u2 = ((W) j << ((8 - 1) * 8));\n+\tW w;\n+\tint ovf;\n+\tw = ((W) u1) + ((W) s2);\n+\tif (upseu (u1, s2, &ovf) != (U) w || ovf != (w != (U) w))\n+\t  __builtin_abort ();\n+\tw = ((W) u1) - ((W) u2);\n+\tif (usueu (u1, u2, &ovf) != (U) w || ovf != (w != (U) w))\n+\t  __builtin_abort ();\n+\tw = ((W) u1) - ((W) s2);\n+\tif (usseu (u1, s2, &ovf) != (U) w || ovf != (w != (U) w))\n+\t  __builtin_abort ();\n+      }\n+}"}]}