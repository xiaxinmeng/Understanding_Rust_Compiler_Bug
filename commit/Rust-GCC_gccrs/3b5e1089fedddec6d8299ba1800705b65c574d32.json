{"sha": "3b5e1089fedddec6d8299ba1800705b65c574d32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1ZTEwODlmZWRkZGVjNmQ4Mjk5YmExODAwNzA1YjY1YzU3NGQzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-02T07:37:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-02T07:37:50Z"}, "message": "i386-protos.h (standard_sse_constant_opcode): Change last argument to rtx pointer.\n\n\t* config/i386/i386-protos.h (standard_sse_constant_opcode): Change\n\tlast argument to rtx pointer.\n\t* config/i386/i386.c (standard_sse_constant_opcode): Replace X argument\n\twith OPERANDS.  For AVX+ 128-bit VEX encoded instructions over 256-bit\n\tor 512-bit.  If setting EXT_REX_SSE_REG_P, use EVEX encoded insn\n\tdepending on the chosen ISAs.\n\t* config/i386/i386.md (*movxi_internal_avx512f, *movoi_internal_avx,\n\t*movti_internal, *movdi_internal, *movsi_internal, *movtf_internal,\n\t*movdf_internal, *movsf_internal): Adjust standard_sse_constant_opcode\n\tcallers.\n\t* config/i386/sse.md (mov<mode>_internal): Likewise.\n\t* config/i386/mmx.md (*mov<mode>_internal): Likewise.\n\nFrom-SVN: r255352", "tree": {"sha": "edcfab951d84b388c7c5520dc7bfad3933eb7b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edcfab951d84b388c7c5520dc7bfad3933eb7b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5e1089fedddec6d8299ba1800705b65c574d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5e1089fedddec6d8299ba1800705b65c574d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5e1089fedddec6d8299ba1800705b65c574d32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5e1089fedddec6d8299ba1800705b65c574d32/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3adbbd5b974ae44ba194516986bc8b8013cda6a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adbbd5b974ae44ba194516986bc8b8013cda6a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adbbd5b974ae44ba194516986bc8b8013cda6a1"}], "stats": {"total": 108, "additions": 72, "deletions": 36}, "files": [{"sha": "de7335efa40cc04b91c99282d854cdfd6f129083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b5e1089fedddec6d8299ba1800705b65c574d32", "patch": "@@ -1,3 +1,18 @@\n+2017-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-protos.h (standard_sse_constant_opcode): Change\n+\tlast argument to rtx pointer.\n+\t* config/i386/i386.c (standard_sse_constant_opcode): Replace X argument\n+\twith OPERANDS.  For AVX+ 128-bit VEX encoded instructions over 256-bit\n+\tor 512-bit.  If setting EXT_REX_SSE_REG_P, use EVEX encoded insn\n+\tdepending on the chosen ISAs.\n+\t* config/i386/i386.md (*movxi_internal_avx512f, *movoi_internal_avx,\n+\t*movti_internal, *movdi_internal, *movsi_internal, *movtf_internal,\n+\t*movdf_internal, *movsf_internal): Adjust standard_sse_constant_opcode\n+\tcallers.\n+\t* config/i386/sse.md (mov<mode>_internal): Likewise.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Likewise.\n+\n 2017-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* doc/invoke.texi (-dp): Say that instruction cost is printed as well."}, {"sha": "f5755f0d3639ab35fa173c583b9f8542276241ff", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3b5e1089fedddec6d8299ba1800705b65c574d32", "patch": "@@ -52,7 +52,7 @@ extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);\n extern rtx standard_80387_constant_rtx (int);\n extern int standard_sse_constant_p (rtx, machine_mode);\n-extern const char *standard_sse_constant_opcode (rtx_insn *, rtx);\n+extern const char *standard_sse_constant_opcode (rtx_insn *, rtx *);\n extern bool ix86_standard_x87sse_constant_load_p (const rtx_insn *, rtx);\n extern bool symbolic_reference_mentioned_p (rtx);\n extern bool extended_reg_mentioned_p (rtx);"}, {"sha": "5638eea7636a38e333a35520f34416e04334e784", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b5e1089fedddec6d8299ba1800705b65c574d32", "patch": "@@ -10380,12 +10380,13 @@ standard_sse_constant_p (rtx x, machine_mode pred_mode)\n }\n \n /* Return the opcode of the special instruction to be used to load\n-   the constant X.  */\n+   the constant operands[1] into operands[0].  */\n \n const char *\n-standard_sse_constant_opcode (rtx_insn *insn, rtx x)\n+standard_sse_constant_opcode (rtx_insn *insn, rtx *operands)\n {\n   machine_mode mode;\n+  rtx x = operands[1];\n \n   gcc_assert (TARGET_SSE);\n \n@@ -10395,34 +10396,51 @@ standard_sse_constant_opcode (rtx_insn *insn, rtx x)\n     {\n       switch (get_attr_mode (insn))\n \t{\n+\tcase MODE_TI:\n+\t  if (!EXT_REX_SSE_REG_P (operands[0]))\n+\t    return \"%vpxor\\t%0, %d0\";\n+\t  /* FALLTHRU */\n \tcase MODE_XI:\n-\t  return \"vpxord\\t%g0, %g0, %g0\";\n \tcase MODE_OI:\n-\t  return (TARGET_AVX512VL\n-\t\t  ? \"vpxord\\t%x0, %x0, %x0\"\n-\t\t  : \"vpxor\\t%x0, %x0, %x0\");\n-\tcase MODE_TI:\n-\t  return (TARGET_AVX512VL\n-\t\t  ? \"vpxord\\t%x0, %x0, %x0\"\n-\t\t  : \"%vpxor\\t%0, %d0\");\n+\t  if (EXT_REX_SSE_REG_P (operands[0]))\n+\t    return (TARGET_AVX512VL\n+\t\t    ? \"vpxord\\t%x0, %x0, %x0\"\n+\t\t    : \"vpxord\\t%g0, %g0, %g0\");\n+\t  return \"vpxor\\t%x0, %x0, %x0\";\n \n+\tcase MODE_V2DF:\n+\t  if (!EXT_REX_SSE_REG_P (operands[0]))\n+\t    return \"%vxorpd\\t%0, %d0\";\n+\t  /* FALLTHRU */\n \tcase MODE_V8DF:\n-\t  return (TARGET_AVX512DQ\n-\t\t  ? \"vxorpd\\t%g0, %g0, %g0\"\n-\t\t  : \"vpxorq\\t%g0, %g0, %g0\");\n \tcase MODE_V4DF:\n-\t  return \"vxorpd\\t%x0, %x0, %x0\";\n-\tcase MODE_V2DF:\n-\t  return \"%vxorpd\\t%0, %d0\";\n+\t  if (!EXT_REX_SSE_REG_P (operands[0]))\n+\t    return \"vxorpd\\t%x0, %x0, %x0\";\n+\t  else if (TARGET_AVX512DQ)\n+\t    return (TARGET_AVX512VL\n+\t\t    ? \"vxorpd\\t%x0, %x0, %x0\"\n+\t\t    : \"vxorpd\\t%g0, %g0, %g0\");\n+\t  else\n+\t    return (TARGET_AVX512VL\n+\t\t    ? \"vpxorq\\t%x0, %x0, %x0\"\n+\t\t    : \"vpxorq\\t%g0, %g0, %g0\");\n \n+\tcase MODE_V4SF:\n+\t  if (!EXT_REX_SSE_REG_P (operands[0]))\n+\t    return \"%vxorps\\t%0, %d0\";\n+\t  /* FALLTHRU */\n \tcase MODE_V16SF:\n-\t  return (TARGET_AVX512DQ\n-\t\t  ? \"vxorps\\t%g0, %g0, %g0\"\n-\t\t  : \"vpxord\\t%g0, %g0, %g0\");\n \tcase MODE_V8SF:\n-\t  return \"vxorps\\t%x0, %x0, %x0\";\n-\tcase MODE_V4SF:\n-\t  return \"%vxorps\\t%0, %d0\";\n+\t  if (!EXT_REX_SSE_REG_P (operands[0]))\n+\t    return \"vxorps\\t%x0, %x0, %x0\";\n+\t  else if (TARGET_AVX512DQ)\n+\t    return (TARGET_AVX512VL\n+\t\t    ? \"vxorps\\t%x0, %x0, %x0\"\n+\t\t    : \"vxorps\\t%g0, %g0, %g0\");\n+\t  else\n+\t    return (TARGET_AVX512VL\n+\t\t    ? \"vpxord\\t%x0, %x0, %x0\"\n+\t\t    : \"vpxord\\t%g0, %g0, %g0\");\n \n \tdefault:\n \t  gcc_unreachable ();\n@@ -10449,11 +10467,14 @@ standard_sse_constant_opcode (rtx_insn *insn, rtx x)\n \tcase MODE_V2DF:\n \tcase MODE_V4SF:\n \t  gcc_assert (TARGET_SSE2);\n-\t  return (TARGET_AVX512F\n-\t\t  ? \"vpternlogd\\t{$0xFF, %0, %0, %0|%0, %0, %0, 0xFF}\"\n-\t\t  : TARGET_AVX\n+\t  if (!EXT_REX_SSE_REG_P (operands[0]))\n+\t    return (TARGET_AVX\n \t\t    ? \"vpcmpeqd\\t%0, %0, %0\"\n \t\t    : \"pcmpeqd\\t%0, %0\");\n+\t  else if (TARGET_AVX512VL)\n+\t    return \"vpternlogd\\t{$0xFF, %0, %0, %0|%0, %0, %0, 0xFF}\";\n+\t  else\n+\t    return \"vpternlogd\\t{$0xFF, %g0, %g0, %g0|%g0, %g0, %g0, 0xFF}\";\n \n \tdefault:\n \t  gcc_unreachable ();"}, {"sha": "c6ab79a42acf792023a5dfdcf24d8c41c43ecc5c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3b5e1089fedddec6d8299ba1800705b65c574d32", "patch": "@@ -2044,7 +2044,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       if (misaligned_operand (operands[0], XImode)\n@@ -2071,7 +2071,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       if (misaligned_operand (operands[0], OImode)\n@@ -2131,7 +2131,7 @@\n       return \"#\";\n \n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       /* TDmode values are passed as TImode on the stack.  Moving them\n@@ -2243,7 +2243,7 @@\n       return \"movq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       switch (get_attr_mode (insn))\n@@ -2456,7 +2456,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_MSKMOV:\n       return \"kmovd\\t{%1, %0|%0, %1}\";\n@@ -3327,7 +3327,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       /* Handle misaligned load/store since we\n@@ -3504,7 +3504,7 @@\n \treturn \"mov{q}\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       switch (get_attr_mode (insn))\n@@ -3698,7 +3698,7 @@\n       return \"mov{l}\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       switch (get_attr_mode (insn))"}, {"sha": "da60d21a32cd8d9a6aa7a1bbfde973d34296e250", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=3b5e1089fedddec6d8299ba1800705b65c574d32", "patch": "@@ -112,7 +112,7 @@\n \treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       switch (get_attr_mode (insn))"}, {"sha": "1f785b7577c505149ca4c53674251f837b4fd115", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e1089fedddec6d8299ba1800705b65c574d32/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3b5e1089fedddec6d8299ba1800705b65c574d32", "patch": "@@ -923,7 +923,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return standard_sse_constant_opcode (insn, operands);\n \n     case TYPE_SSEMOV:\n       /* There is no evex-encoded vmov* for sizes smaller than 64-bytes"}]}