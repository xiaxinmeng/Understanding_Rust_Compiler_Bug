{"sha": "b9edb4b11c99720e10625b41d37dc440bd468f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllZGI0YjExYzk5NzIwZTEwNjI1YjQxZDM3ZGM0NDBiZDQ2OGYyYw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-01-30T22:29:11Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-01-30T22:29:11Z"}, "message": "re PR c++/24745 (unpleasant warning for \"if (NULL)\")\n\n2007-01-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/24745\n\t* doc/invoke.texi (Wpointer-arith): Document warning.\n\ncp/\n\t* typeck.c (build_binary_op): Fix logic for warning. Move warning\n\tto -Wpointer-arith.\n\t* call.c (convert_like_real): Don't warn when converting to\n\tboolean type.\n\ntestsuite/\n\t* g++.dg/warn/null4.C: New.\n\nFrom-SVN: r121361", "tree": {"sha": "6ab5f599b4f4444b77112bd54a7ebdc103ca2f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab5f599b4f4444b77112bd54a7ebdc103ca2f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9edb4b11c99720e10625b41d37dc440bd468f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9edb4b11c99720e10625b41d37dc440bd468f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9edb4b11c99720e10625b41d37dc440bd468f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9edb4b11c99720e10625b41d37dc440bd468f2c/comments", "author": null, "committer": null, "parents": [{"sha": "14734fc701357c82967954578c822f3ddede043f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14734fc701357c82967954578c822f3ddede043f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14734fc701357c82967954578c822f3ddede043f"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "a58b1dfa0ea4f9e8b14cb71f9672e8ebaca81f3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -1,3 +1,8 @@\n+2007-01-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/24745\n+\t* doc/invoke.texi (Wpointer-arith): Document warning.\n+\t\n 2007-01-30  Janis Johnson\n \n \t* doc/extend.texi (Decimal Floating Types): Remove decfloat.h from"}, {"sha": "ad008bf1aa75a4e7154dc9c9c357c8e3d67a33a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -1,3 +1,11 @@\n+2007-01-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/24745\n+\t* typeck.c (build_binary_op): Fix logic for warning. Move warning\n+\tto -Wpointer-arith.\n+\t* call.c (convert_like_real): Don't warn when converting to\n+\tboolean type.\n+\t\n 2007-01-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* decl.c (pop_label): Replace warning with call to"}, {"sha": "ac29ecdbcefd012621d6dfe43623755149f6d5c3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -4250,7 +4250,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       tree t = non_reference (totype);\n \n       /* Issue warnings about peculiar, but valid, uses of NULL.  */\n-      if (ARITHMETIC_TYPE_P (t) && expr == null_node)\n+      if (expr == null_node && TREE_CODE (t) != BOOLEAN_TYPE && ARITHMETIC_TYPE_P (t))\n \t{\n \t  if (fn)\n \t    warning (OPT_Wconversion, \"passing NULL to non-pointer argument %P of %qD\","}, {"sha": "829b8673a7408f4d960bec9d8de9f632240589e7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -3828,30 +3828,28 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t}\n     }\n \n-  /* If CONVERTED is zero, both args will be converted to type RESULT_TYPE.\n-     Then the expression will be built.\n-     It will be given type FINAL_TYPE if that is nonzero;\n-     otherwise, it will be given type RESULT_TYPE.  */\n-\n   /* Issue warnings about peculiar, but valid, uses of NULL.  */\n-  if (/* It's reasonable to use pointer values as operands of &&\n+  if ((orig_op0 == null_node || orig_op1 == null_node)\n+      /* It's reasonable to use pointer values as operands of &&\n \t and ||, so NULL is no exception.  */\n-      !(code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)\n-      && (/* If OP0 is NULL and OP1 is not a pointer, or vice versa.  */\n-\t  (orig_op0 == null_node\n-\t   && TREE_CODE (TREE_TYPE (op1)) != POINTER_TYPE)\n-\t  /* Or vice versa.  */\n-\t  || (orig_op1 == null_node\n-\t      && TREE_CODE (TREE_TYPE (op0)) != POINTER_TYPE)\n-\t  /* Or, both are NULL and the operation was not a comparison.  */\n-\t  || (orig_op0 == null_node && orig_op1 == null_node\n-\t      && code != EQ_EXPR && code != NE_EXPR)))\n+      && code != TRUTH_ANDIF_EXPR && code != TRUTH_ORIF_EXPR \n+      && ( /* Both are NULL (or 0) and the operation was not a comparison.  */\n+\t  (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1) \n+\t   && code != EQ_EXPR && code != NE_EXPR) \n+\t  /* Or if one of OP0 or OP1 is neither a pointer nor NULL.  */\n+\t  || (!null_ptr_cst_p (orig_op0) && TREE_CODE (TREE_TYPE (op0)) != POINTER_TYPE)\n+\t  || (!null_ptr_cst_p (orig_op1) && TREE_CODE (TREE_TYPE (op1)) != POINTER_TYPE)))\n     /* Some sort of arithmetic operation involving NULL was\n        performed.  Note that pointer-difference and pointer-addition\n        have already been handled above, and so we don't end up here in\n        that case.  */\n-    warning (0, \"NULL used in arithmetic\");\n+    warning (OPT_Wpointer_arith, \"NULL used in arithmetic\");\n+  \n \n+  /* If CONVERTED is zero, both args will be converted to type RESULT_TYPE.\n+     Then the expression will be built.\n+     It will be given type FINAL_TYPE if that is nonzero;\n+     otherwise, it will be given type RESULT_TYPE.  */\n   if (! converted)\n     {\n       if (TREE_TYPE (op0) != result_type)"}, {"sha": "31490b8f68749ee3de9487557df14df24749e976", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -3153,7 +3153,8 @@ such assumptions.\n Warn about anything that depends on the ``size of'' a function type or\n of @code{void}.  GNU C assigns these types a size of 1, for\n convenience in calculations with @code{void *} pointers and pointers\n-to functions.\n+to functions.  In C++, warn also when an arithmetic operation involves\n+@code{NULL}.  This warning is also enabled by @option{-pedantic}.\n \n @item -Wbad-function-cast @r{(C only)}\n @opindex Wbad-function-cast"}, {"sha": "dccd3b9c13b07aa6bce4ef300547f6cef64928b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -1,3 +1,8 @@\n+2007-01-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/24745\n+\t* g++.dg/warn/null4.C: New.\n+\n 2001-01-30  Roger Sayle  <roger@eyesopen.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "785f27904882c5e5e0b954048d7992ca5da562e2", "filename": "gcc/testsuite/g++.dg/warn/null4.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnull4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9edb4b11c99720e10625b41d37dc440bd468f2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnull4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnull4.C?ref=b9edb4b11c99720e10625b41d37dc440bd468f2c", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/24745 : warnings for NULL constant.\n+// { dg-do compile  }\n+// { dg-options \"-Wpointer-arith -Wconversion \" }\n+\n+#include <cstddef>\n+\n+int foo (void) \n+{\n+  if (NULL == 1) return -1;   // { dg-warning \"NULL used in arithmetic\" } \n+  if (NULL > NULL) return -1; // { dg-warning \"NULL used in arithmetic\" } \n+  if (NULL < NULL) return -1; // { dg-warning \"NULL used in arithmetic\" } \n+  if (NULL >= 0) return -1;   // { dg-warning \"NULL used in arithmetic\" } \n+  if (NULL <= 0) return -1;   // { dg-warning \"NULL used in arithmetic\" } \n+  return 0;\n+}\n+\n+int bar (void) \n+{\n+  if (NULL) return -1;\n+  if (!NULL) return -1;\n+  if (!NULL == 1) return -1;\n+  if (NULL || NULL) return -1;\n+  if (!NULL && NULL) return -1;\n+  if (NULL == NULL) return -1;\n+  if (NULL != NULL) return -1;\n+  if (NULL == 0) return -1;\n+  if (NULL != 0) return -1;\n+  return 0;\n+}"}]}