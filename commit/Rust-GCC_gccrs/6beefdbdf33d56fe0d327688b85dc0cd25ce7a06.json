{"sha": "6beefdbdf33d56fe0d327688b85dc0cd25ce7a06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlZWZkYmRmMzNkNTZmZTBkMzI3Njg4Yjg1ZGMwY2QyNWNlN2EwNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-04-26T13:26:38Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-04-26T13:26:38Z"}, "message": "[nvptx] Fix branch-around-nothing\n\n2018-04-26  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/84025\n\t* config/nvptx/nvptx.c (needs_neutering_p): New function.\n\t(nvptx_single): Use needs_neutering_p to skip over insns that do not\n\tneed neutering.\n\nFrom-SVN: r259676", "tree": {"sha": "a205bc00455cfd119aaedb5f7d48a8a1085ac023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a205bc00455cfd119aaedb5f7d48a8a1085ac023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06/comments", "author": null, "committer": null, "parents": [{"sha": "d160ae7814db14b36fc7eacc5fc14b77604837a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d160ae7814db14b36fc7eacc5fc14b77604837a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d160ae7814db14b36fc7eacc5fc14b77604837a1"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "d60f962502863366b77fcb493e02b5da55a4bc33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6beefdbdf33d56fe0d327688b85dc0cd25ce7a06", "patch": "@@ -1,3 +1,10 @@\n+2018-04-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/84025\n+\t* config/nvptx/nvptx.c (needs_neutering_p): New function.\n+\t(nvptx_single): Use needs_neutering_p to skip over insns that do not\n+\tneed neutering.\n+\n 2018-04-26  Richard Biener <rguenther@suse.de>\n \t    Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "4fd1e2b5095158b362e10befb8714a4e044cfe5e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6beefdbdf33d56fe0d327688b85dc0cd25ce7a06/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=6beefdbdf33d56fe0d327688b85dc0cd25ce7a06", "patch": "@@ -3989,6 +3989,27 @@ bb_first_real_insn (basic_block bb)\n }\n #endif\n \n+/* Return true if INSN needs neutering.  */\n+\n+static bool\n+needs_neutering_p (rtx_insn *insn)\n+{\n+  if (!INSN_P (insn))\n+    return false;\n+\n+  switch (recog_memoized (insn))\n+    {\n+    case CODE_FOR_nvptx_fork:\n+    case CODE_FOR_nvptx_forked:\n+    case CODE_FOR_nvptx_joining:\n+    case CODE_FOR_nvptx_join:\n+    case CODE_FOR_nvptx_barsync:\n+      return false;\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Single neutering according to MASK.  FROM is the incoming block and\n    TO is the outgoing block.  These may be the same block. Insert at\n    start of FROM:\n@@ -4014,9 +4035,7 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n   while (true)\n     {\n       /* Find first insn of from block.  */\n-      while (head != BB_END (from)\n-\t     && (!INSN_P (head)\n-\t\t || recog_memoized (head) == CODE_FOR_nvptx_barsync))\n+      while (head != BB_END (from) && !needs_neutering_p (head))\n \thead = NEXT_INSN (head);\n \n       if (from == to)\n@@ -4057,22 +4076,9 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n   if (tail == head)\n     {\n       /* If this is empty, do nothing.  */\n-      if (!head || !INSN_P (head))\n+      if (!head || !needs_neutering_p (head))\n \treturn;\n \n-      /* If this is a dummy insn, do nothing.  */\n-      switch (recog_memoized (head))\n-\t{\n-\tdefault:\n-\t  break;\n-\tcase CODE_FOR_nvptx_barsync:\n-\tcase CODE_FOR_nvptx_fork:\n-\tcase CODE_FOR_nvptx_forked:\n-\tcase CODE_FOR_nvptx_joining:\n-\tcase CODE_FOR_nvptx_join:\n-\t  return;\n-\t}\n-\n       if (cond_branch)\n \t{\n \t  /* If we're only doing vector single, there's no need to"}]}