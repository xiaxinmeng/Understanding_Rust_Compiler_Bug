{"sha": "8f571e64713cc72561f84241863496e473eae4c6", "node_id": "C_kwDOANBUbNoAKDhmNTcxZTY0NzEzY2M3MjU2MWY4NDI0MTg2MzQ5NmU0NzNlYWU0YzY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-22T18:17:49Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-22T18:17:49Z"}, "message": "More NEGATE_EXPR folding in match.pd\n\nAs observed by Jakub in comment #2 of PR 98865, the expression -(a>>63)\nis optimized in GENERIC but not in GIMPLE.  Investigating further it\nturns out that this is one of a few transformations performed by\nfold_negate_expr in fold-const.c that aren't yet performed by match.pd.\nThis patch moves/duplicates them there, and should be relatively safe\nas these transformations are already performed by the compiler, but\njust in different passes.\n\nThis revised patch adds a Boolean simplify argument to tree-ssa-sccvn.c's\nvn_nary_build_or_lookup_1 to control whether simplification should be\nperformed before value numbering, updating the callers, but then\navoiding simplification when constructing/value-numbering NEGATE_EXPR.\nThis avoids the regression of gcc.dg/tree-ssa/ssa-free-88.c, and enables\nthe new test case(s) to pass.\n\n2021-09-22  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* match.pd (negation simplifications): Implement some negation\n\tfolding transformations from fold-const.c's fold_negate_expr.\n\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Add a SIMPLIFY\n\targument, to control whether the op should be simplified prior\n\tto looking up/assigning a value number.\n\t(vn_nary_build_or_lookup): Update call to vn_nary_build_or_lookup_1.\n\t(vn_nary_simplify): Likewise.\n\t(visit_nary_op): Likewise, but when constructing a NEGATE_EXPR\n\tnow call vn_nary_build_or_lookup_1 disabling simplification.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-negate-1.c: New test case.", "tree": {"sha": "4e844b47051f80796967e0a819e774833b79e1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e844b47051f80796967e0a819e774833b79e1b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f571e64713cc72561f84241863496e473eae4c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f571e64713cc72561f84241863496e473eae4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f571e64713cc72561f84241863496e473eae4c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f571e64713cc72561f84241863496e473eae4c6/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f2dcbe4717ce7a117671234940f8b74809f3973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2dcbe4717ce7a117671234940f8b74809f3973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2dcbe4717ce7a117671234940f8b74809f3973"}], "stats": {"total": 123, "additions": 107, "deletions": 16}, "files": [{"sha": "a9791ceb74ae7cfeae959719e09a8d49cbd4e1b1", "filename": "gcc/match.pd", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f571e64713cc72561f84241863496e473eae4c6/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f571e64713cc72561f84241863496e473eae4c6/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8f571e64713cc72561f84241863496e473eae4c6", "patch": "@@ -1481,6 +1481,36 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (!FIXED_POINT_TYPE_P (type))\n  (plus @0 (negate @1))))\n \n+/* Other simplifications of negation (c.f. fold_negate_expr_1).  */\n+(simplify\n+ (negate (mult:c@0 @1 negate_expr_p@2))\n+ (if (! TYPE_UNSIGNED (type)\n+      && ! HONOR_SIGN_DEPENDENT_ROUNDING (type)\n+      && single_use (@0))\n+  (mult @1 (negate @2))))\n+\n+(simplify\n+ (negate (rdiv@0 @1 negate_expr_p@2))\n+ (if (! HONOR_SIGN_DEPENDENT_ROUNDING (type)\n+      && single_use (@0))\n+  (rdiv @1 (negate @2))))\n+\n+(simplify\n+ (negate (rdiv@0 negate_expr_p@1 @2))\n+ (if (! HONOR_SIGN_DEPENDENT_ROUNDING (type)\n+      && single_use (@0))\n+  (rdiv (negate @1) @2)))\n+\n+/* Fold -((int)x >> (prec - 1)) into (unsigned)x >> (prec - 1).  */\n+(simplify\n+ (negate (convert? (rshift @0 INTEGER_CST@1)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+      && wi::to_wide (@1) == element_precision (type) - 1)\n+  (with { tree stype = TREE_TYPE (@0);\n+\t  tree ntype = TYPE_UNSIGNED (stype) ? signed_type_for (stype)\n+\t\t\t\t\t     : unsigned_type_for (stype); }\n+   (convert (rshift:ntype (convert:ntype @0) @1)))))\n+\n /* Try to fold (type) X op CST -> (type) (X op ((type-x) CST))\n    when profitable.\n    For bitwise binary operations apply operand conversions to the"}, {"sha": "00ec8b4c0b97caac3cb72b126fc56b39fde92c55", "filename": "gcc/testsuite/gcc.dg/fold-negate-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f571e64713cc72561f84241863496e473eae4c6/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-negate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f571e64713cc72561f84241863496e473eae4c6/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-negate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-negate-1.c?ref=8f571e64713cc72561f84241863496e473eae4c6", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define SHIFT ((8*__SIZEOF_INT__)-1)\n+\n+int test_rshift_1(int x)\n+{\n+  int t = x >> SHIFT;\n+  return -t;\n+}\n+\n+int test_rshift_2(int x)\n+{\n+  unsigned int t = (unsigned int)x >> SHIFT;\n+  return -t;\n+}\n+\n+int test_rshift_3(int x)\n+{\n+  int t = (unsigned int)x >> SHIFT;\n+  return -t;\n+}\n+\n+int test_rshift_4(int x)\n+{\n+  unsigned int t = x >> SHIFT;\n+  return -t;\n+}\n+\n+double test_mul_1(double x)\n+{\n+  double t = -5.0 * x;\n+  return -t;\n+}\n+\n+double test_mul_2(double x, double y)\n+{\n+  double t1 = -x;\n+  double t2 = t1 * y;\n+  return -t2;\n+}\n+\n+double test_rdiv_1(double x, double y)\n+{\n+  double t1 = -x;\n+  double t2 = t1 / y;\n+  return -t2;\n+}\n+\n+double test_rdiv_2(double x, double y)\n+{\n+  double t1 = -y;\n+  double t2 = x / t1;\n+  return -t2;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" -\" \"optimized\" } } */\n+"}, {"sha": "a901f51a025f97fed30621ebc07d627a1e7b5cae", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f571e64713cc72561f84241863496e473eae4c6/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f571e64713cc72561f84241863496e473eae4c6/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8f571e64713cc72561f84241863496e473eae4c6", "patch": "@@ -2321,27 +2321,30 @@ vn_reference_lookup_or_insert_for_pieces (tree vuse,\n }\n \n /* Return a value-number for RCODE OPS... either by looking up an existing\n-   value-number for the simplified result or by inserting the operation if\n-   INSERT is true.  */\n+   value-number for the possibly simplified result or by inserting the\n+   operation if INSERT is true.  If SIMPLIFY is false, return a value\n+   number for the unsimplified expression.  */\n \n static tree\n-vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n+vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert,\n+\t\t\t   bool simplify)\n {\n   tree result = NULL_TREE;\n   /* We will be creating a value number for\n        RCODE (OPS...).\n      So first simplify and lookup this expression to see if it\n      is already available.  */\n   /* For simplification valueize.  */\n-  unsigned i;\n-  for (i = 0; i < res_op->num_ops; ++i)\n-    if (TREE_CODE (res_op->ops[i]) == SSA_NAME)\n-      {\n-\ttree tem = vn_valueize (res_op->ops[i]);\n-\tif (!tem)\n-\t  break;\n-\tres_op->ops[i] = tem;\n-      }\n+  unsigned i = 0;\n+  if (simplify)\n+    for (i = 0; i < res_op->num_ops; ++i)\n+      if (TREE_CODE (res_op->ops[i]) == SSA_NAME)\n+\t{\n+\t  tree tem = vn_valueize (res_op->ops[i]);\n+\t  if (!tem)\n+\t    break;\n+\t  res_op->ops[i] = tem;\n+\t}\n   /* If valueization of an operand fails (it is not available), skip\n      simplification.  */\n   bool res = false;\n@@ -2440,7 +2443,7 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n static tree\n vn_nary_build_or_lookup (gimple_match_op *res_op)\n {\n-  return vn_nary_build_or_lookup_1 (res_op, true);\n+  return vn_nary_build_or_lookup_1 (res_op, true, true);\n }\n \n /* Try to simplify the expression RCODE OPS... of type TYPE and return\n@@ -2454,7 +2457,7 @@ vn_nary_simplify (vn_nary_op_t nary)\n   gimple_match_op op (gimple_match_cond::UNCOND, nary->opcode,\n \t\t      nary->type, nary->length);\n   memcpy (op.ops, nary->op, sizeof (tree) * nary->length);\n-  return vn_nary_build_or_lookup_1 (&op, false);\n+  return vn_nary_build_or_lookup_1 (&op, false, true);\n }\n \n /* Elimination engine.  */\n@@ -5006,15 +5009,15 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t      tree ops[2];\n \t      gimple_match_op match_op (gimple_match_cond::UNCOND,\n \t\t\t\t\tNEGATE_EXPR, type, rhs[i]);\n-\t      ops[i] = vn_nary_build_or_lookup_1 (&match_op, false);\n+\t      ops[i] = vn_nary_build_or_lookup_1 (&match_op, false, true);\n \t      ops[j] = rhs[j];\n \t      if (ops[i]\n \t\t  && (ops[0] = vn_nary_op_lookup_pieces (2, code,\n \t\t\t\t\t\t\t type, ops, NULL)))\n \t\t{\n \t\t  gimple_match_op match_op (gimple_match_cond::UNCOND,\n \t\t\t\t\t    NEGATE_EXPR, type, ops[0]);\n-\t\t  result = vn_nary_build_or_lookup (&match_op);\n+\t\t  result = vn_nary_build_or_lookup_1 (&match_op, true, false);\n \t\t  if (result)\n \t\t    {\n \t\t      bool changed = set_ssa_val_to (lhs, result);"}]}