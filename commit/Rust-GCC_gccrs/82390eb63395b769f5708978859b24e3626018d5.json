{"sha": "82390eb63395b769f5708978859b24e3626018d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIzOTBlYjYzMzk1Yjc2OWY1NzA4OTc4ODU5YjI0ZTM2MjYwMThkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-12-18T22:25:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-12-18T22:25:20Z"}, "message": "re PR c++/34206 (ICE in retrieve_local_specialization)\n\n        PR c++/34206\n        * pt.c (tsubst_aggr_type): Do nothing if the type already doesn't\n        use template parms.\n        (dependent_type_p_r): Handle the domain of an array.\n\nFrom-SVN: r131044", "tree": {"sha": "04b92fd03c9a0245d6594119c5231fba022e2334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b92fd03c9a0245d6594119c5231fba022e2334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82390eb63395b769f5708978859b24e3626018d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82390eb63395b769f5708978859b24e3626018d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82390eb63395b769f5708978859b24e3626018d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82390eb63395b769f5708978859b24e3626018d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a15c0b00b02391adb2aabbf63b0caaa94f01b1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15c0b00b02391adb2aabbf63b0caaa94f01b1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15c0b00b02391adb2aabbf63b0caaa94f01b1dc"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "c7f0fc488cac3f714405ec1683b221f23438e582", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82390eb63395b769f5708978859b24e3626018d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82390eb63395b769f5708978859b24e3626018d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82390eb63395b769f5708978859b24e3626018d5", "patch": "@@ -1,3 +1,10 @@\n+2007-12-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34206\n+\t* pt.c (tsubst_aggr_type): Do nothing if the type already doesn't \n+\tuse template parms.\n+\t(dependent_type_p_r): Handle the domain of an array.\n+\n 2007-12-18  Douglas Gregor  <doug.gregor@gmail.com>\n             Jakub Jelinek  <jakub@redhat.com>\n \t"}, {"sha": "9f87778fc441e1456cf53dd5dbfb2edf1fecc97c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82390eb63395b769f5708978859b24e3626018d5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82390eb63395b769f5708978859b24e3626018d5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=82390eb63395b769f5708978859b24e3626018d5", "patch": "@@ -7638,7 +7638,7 @@ tsubst_aggr_type (tree t,\n       /* Else fall through.  */\n     case ENUMERAL_TYPE:\n     case UNION_TYPE:\n-      if (TYPE_TEMPLATE_INFO (t))\n+      if (TYPE_TEMPLATE_INFO (t) && uses_template_parms (t))\n \t{\n \t  tree argvec;\n \t  tree context;\n@@ -15455,13 +15455,18 @@ dependent_type_p_r (tree type)\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       if (TYPE_DOMAIN (type)\n-\t  && ((value_dependent_expression_p\n-\t       (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n-\t      || (type_dependent_expression_p\n-\t\t  (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))))\n+\t  && dependent_type_p (TYPE_DOMAIN (type)))\n \treturn true;\n       return dependent_type_p (TREE_TYPE (type));\n     }\n+  else if (TREE_CODE (type) == INTEGER_TYPE\n+\t   && !TREE_CONSTANT (TYPE_MAX_VALUE (type)))\n+    {\n+      /* If this is the TYPE_DOMAIN of an array type, consider it\n+\t dependent.  */\n+      return (value_dependent_expression_p (TYPE_MAX_VALUE (type))\n+\t      || type_dependent_expression_p (TYPE_MAX_VALUE (type)));\n+    }\n \n   /* -- a template-id in which either the template name is a template\n      parameter ...  */"}, {"sha": "f132606889b4901aa8d53cd2b44e68564090a432", "filename": "gcc/testsuite/g++.dg/template/typedef8.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82390eb63395b769f5708978859b24e3626018d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82390eb63395b769f5708978859b24e3626018d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef8.C?ref=82390eb63395b769f5708978859b24e3626018d5", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/34206\n+\n+template<class _T1, class _T2> struct pair { };\n+template <class T0, class T1> struct tuple {\n+  template <class U1, class U2>\n+  tuple& operator=(const pair<U1, U2>& k) { }\n+};\n+template<class T1, class T2> inline tuple<T1&, T2&> tie(T1& t1, T2& t2) { }\n+\n+template <class T> struct A\n+{   \n+  typedef T type;\n+  pair<type, type> f();\n+};\n+\n+void g(A<int> a)\n+{\n+  typedef A<int>::type type;\n+  type begin1, end1;\n+  tie(begin1, end1) = a.f();\n+}"}]}