{"sha": "14ae7e7d281f1b0cfc43f212362df64a923c2dda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhZTdlN2QyODFmMWIwY2ZjNDNmMjEyMzYyZGY2NGE5MjNjMmRkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-04T16:20:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-04T16:20:59Z"}, "message": "decl.c (grokdeclarator): Remove redundant calls to build_type_variant and some duplicated code.\n\n\t* decl.c (grokdeclarator): Remove redundant calls to\n\tbuild_type_variant and some duplicated code.\n\t* sig.c (build_signature_reference_type): Only take the type parm.\n\t(build_signature_pointer_type): Likewise.\n\t* tree.c (build_cplus_method_type): Adjust.\n\t* cp-tree.h: Update.\n\nFrom-SVN: r22820", "tree": {"sha": "8c099672f1f1eaf90391df57590c34b5e3b446bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c099672f1f1eaf90391df57590c34b5e3b446bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14ae7e7d281f1b0cfc43f212362df64a923c2dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ae7e7d281f1b0cfc43f212362df64a923c2dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ae7e7d281f1b0cfc43f212362df64a923c2dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ae7e7d281f1b0cfc43f212362df64a923c2dda/comments", "author": null, "committer": null, "parents": [{"sha": "710afba434d439bccf7932fba2665119c844b196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710afba434d439bccf7932fba2665119c844b196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/710afba434d439bccf7932fba2665119c844b196"}], "stats": {"total": 185, "additions": 63, "deletions": 122}, "files": [{"sha": "bd2880276775aa6ba6b601e7d3ac4cc4803211e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14ae7e7d281f1b0cfc43f212362df64a923c2dda", "patch": "@@ -1,3 +1,12 @@\n+1998-10-04  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (grokdeclarator): Remove redundant calls to\n+\tbuild_type_variant and some duplicated code.\n+\t* sig.c (build_signature_reference_type): Only take the type parm.\n+\t(build_signature_pointer_type): Likewise.\n+\t* tree.c (build_cplus_method_type): Adjust.\n+\t* cp-tree.h: Update.\n+\n 1998-10-04  Mark Mitchell  <mark@markmitchell.com>\n \n \t* call.c (build_over_call): Make pedwarns about dropped qualifiers"}, {"sha": "68655c155c0c419722cfede2e07f82000b967352", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=14ae7e7d281f1b0cfc43f212362df64a923c2dda", "patch": "@@ -2960,8 +2960,8 @@ extern void enter_scope_of                      PROTO((tree));\n extern tree finish_base_specifier               PROTO((tree, tree, int));\n \n /* in sig.c */\n-extern tree build_signature_pointer_type\tPROTO((tree, int, int));\n-extern tree build_signature_reference_type\tPROTO((tree, int, int));\n+extern tree build_signature_pointer_type\tPROTO((tree));\n+extern tree build_signature_reference_type\tPROTO((tree));\n extern tree build_signature_pointer_constructor\tPROTO((tree, tree));\n extern tree build_signature_method_call\t\tPROTO((tree, tree));\n extern tree build_optr_ref\t\t\tPROTO((tree));"}, {"sha": "9c4e08aaa633e4a4ceffeed80d234087b3c1ce56", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 43, "deletions": 111, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=14ae7e7d281f1b0cfc43f212362df64a923c2dda", "patch": "@@ -9460,15 +9460,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\tresume_momentary (yes);\n \t      }\n \n-\t  /* Build the array type itself, then merge any constancy or\n-\t     volatility into the target type.  We must do it in this order\n-\t     to ensure that the TYPE_MAIN_VARIANT field of the array type\n-\t     is set correctly.  */\n-\n \t    type = build_cplus_array_type (type, itype);\n-\t    if (constp || volatilep)\n-\t      type = cp_build_type_variant (type, constp, volatilep);\n-\n \t    ctype = NULL_TREE;\n \t  }\n \t  break;\n@@ -9482,23 +9474,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n \t    /* Declaring a function type.\n \t       Make sure we have a valid type for the function to return.  */\n-#if 0\n-\t    /* Is this an error?  Should they be merged into TYPE here?  */\n-\t    if (pedantic && (constp || volatilep))\n-\t      pedwarn (\"function declared to return const or volatile result\");\n-#else\n-\t    /* Merge any constancy or volatility into the function return\n-               type.  */\n \n-\t    if (constp || volatilep)\n-\t      {\n-\t\ttype = cp_build_type_variant (type, constp, volatilep);\n-\t\tif (IS_AGGR_TYPE (type))\n-\t\t  build_pointer_type (type);\n-\t\tconstp = 0;\n-\t\tvolatilep = 0;\n-\t      }\n-#endif\n+\t    /* We now know that constp and volatilep don't apply to the\n+               decl, but to its return type.  */\n+\t    constp = volatilep = 0;\n \n \t    /* Warn about some types functions can't return.  */\n \n@@ -9703,24 +9682,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      type = TREE_TYPE (type);\n \t    }\n \n-\t  /* Merge any constancy or volatility into the target type\n-\t     for the pointer.  */\n-\n-\t  if (constp || volatilep)\n-\t    {\n-\t      /* A const or volatile signature pointer/reference is\n-\t\t pointing to a const or volatile object, i.e., the\n-\t\t `optr' is const or volatile, respectively, not the\n-\t\t signature pointer/reference itself.  */\n-\t      if (! IS_SIGNATURE (type))\n-\t\t{\n-\t\t  type = cp_build_type_variant (type, constp, volatilep);\n-\t\t  if (IS_AGGR_TYPE (type))\n-\t\t    build_pointer_type (type);\n-\t\t  constp = 0;\n-\t\t  volatilep = 0;\n-\t\t}\n-\t    }\n+\t  /* We now know that constp and volatilep don't apply to the\n+\t     decl, but to the target of the pointer.  */\n+\t  constp = volatilep = 0;\n \n \t  if (IS_SIGNATURE (type))\n \t    {\n@@ -9731,8 +9695,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t    cp_warning (\"empty signature `%T' used in signature reference declaration\",\n \t\t\t\ttype);\n #if 0\n-\t\t  type = build_signature_reference_type (type,\n-\t\t\t\t\t\t\t constp, volatilep);\n+\t\t  type = build_signature_reference_type (type);\n #else\n \t\t  sorry (\"signature reference\");\n \t\t  return NULL_TREE;\n@@ -9744,8 +9707,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t      && TYPE_SIZE (type))\n \t\t    cp_warning (\"empty signature `%T' used in signature pointer declaration\",\n \t\t\t\ttype);\n-\t\t  type = build_signature_pointer_type (type,\n-\t\t\t\t\t\t       constp, volatilep);\n+\t\t  type = build_signature_pointer_type (type);\n \t\t}\n \t      constp = 0;\n \t      volatilep = 0;\n@@ -9904,8 +9866,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t  {\n \t\t    if (current_class_type == NULL_TREE\n \t\t\t|| friendp)\n-\t\t      type = build_cplus_method_type (build_type_variant (ctype, constp, volatilep),\n-\t\t\t\t\t\t      TREE_TYPE (type), TYPE_ARG_TYPES (type));\n+\t\t      type = build_cplus_method_type (ctype, TREE_TYPE (type),\n+\t\t\t\t\t\t      TYPE_ARG_TYPES (type));\n \t\t    else\n \t\t      {\n \t\t\tcp_error (\"cannot declare member function `%T::%s' within `%T'\",\n@@ -9933,10 +9895,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t  {\n                     if (TREE_CODE (type) == FUNCTION_TYPE)\n \t\t      type\n-\t\t\t= build_cplus_method_type (build_type_variant (ctype,\n-\t\t\t\t\t\t\t\t       constp,\n-\t\t\t\t\t\t\t\t       volatilep),\n-\t\t\t\t\t\t   TREE_TYPE (type),\n+\t\t\t= build_cplus_method_type (ctype, TREE_TYPE (type),\n \t\t\t\t\t\t   TYPE_ARG_TYPES (type));\n   \t\t  }\n \t\telse\n@@ -9959,7 +9918,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\telse\n \t\t  {\n \t\t    if (TREE_CODE (type) == FUNCTION_TYPE)\n-\t\t      type = build_cplus_method_type (build_type_variant (ctype, constp, volatilep), TREE_TYPE (type), TYPE_ARG_TYPES (type));\n+\t\t      type = build_cplus_method_type (ctype, TREE_TYPE (type),\n+\t\t\t\t\t\t      TYPE_ARG_TYPES (type));\n \t\t    else\n \t\t      type = build_offset_type (ctype, type);\n \t\t  }\n@@ -10016,8 +9976,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n       /* Note that the grammar rejects storage classes\n \t in typenames, fields or parameters.  */\n-      if (constp || volatilep)\n-\ttype = cp_build_type_variant (type, constp, volatilep);\n       if (current_lang_name == lang_name_java)\n \tTYPE_FOR_JAVA (type) = 1;\n \n@@ -10140,8 +10098,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t{\n \t  if (IS_SIGNATURE (type))\n \t    error (\"`const' or `volatile' specified with signature type\");\n-\t  else  \n-\t    type = cp_build_type_variant (type, constp, volatilep);\n \t}\n \n       /* Special case: \"friend class foo\" looks like a TYPENAME context.  */\n@@ -10217,35 +10173,37 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   /* Now create the decl, which may be a VAR_DECL, a PARM_DECL\n      or a FUNCTION_DECL, depending on DECL_CONTEXT and TYPE.  */\n \n+  if (decl_context == PARM || decl_context == CATCHPARM)\n+    {\n+      if (ctype || in_namespace)\n+\terror (\"cannot use `::' in parameter declaration\");\n+\n+      /* A parameter declared as an array of T is really a pointer to T.\n+\t One declared as a function is really a pointer to a function.\n+\t One declared as a member is really a pointer to member.  */\n+\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n+\t{\n+\t  /* Transfer const-ness of array into that of type pointed to.  */\n+\t  type = build_pointer_type (TREE_TYPE (type));\n+\t  volatilep = constp = 0;\n+\t}\n+      else if (TREE_CODE (type) == FUNCTION_TYPE)\n+\ttype = build_pointer_type (type);\n+      else if (TREE_CODE (type) == OFFSET_TYPE)\n+\ttype = build_pointer_type (type);\n+      else if (TREE_CODE (type) == VOID_TYPE && declarator)\n+\t{\n+\t  error (\"declaration of `%s' as void\", name);\n+\t  return NULL_TREE;\n+\t}\n+    }\n+  \n   {\n     register tree decl;\n \n     if (decl_context == PARM)\n       {\n-\tif (ctype || in_namespace)\n-\t  error (\"cannot use `::' in parameter declaration\");\n-\n-\t/* A parameter declared as an array of T is really a pointer to T.\n-\t   One declared as a function is really a pointer to a function.\n-\t   One declared as a member is really a pointer to member.  */\n-\n-\tif (TREE_CODE (type) == ARRAY_TYPE)\n-\t  {\n-\t    /* Transfer const-ness of array into that of type pointed to.  */\n-\t    type = build_pointer_type\n-\t      (cp_build_type_variant (TREE_TYPE (type), constp, volatilep));\n-\t    volatilep = constp = 0;\n-\t  }\n-\telse if (TREE_CODE (type) == FUNCTION_TYPE)\n-\t  type = build_pointer_type (type);\n-\telse if (TREE_CODE (type) == OFFSET_TYPE)\n-\t  type = build_pointer_type (type);\n-\telse if (TREE_CODE (type) == VOID_TYPE && declarator)\n-\t  {\n-\t    error (\"declaration of `%s' as void\", name);\n-\t    return NULL_TREE;\n-\t  }\n-\n \tdecl = build_decl (PARM_DECL, declarator, complete_type (type));\n \n \tbad_specifiers (decl, \"parameter\", virtualp, quals != NULL_TREE,\n@@ -10330,8 +10288,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t      }\n \t\t  }\n \t\telse if (staticp < 2)\n-\t\t  type = build_cplus_method_type (build_type_variant (ctype, constp, volatilep),\n-\t\t\t\t\t\t  TREE_TYPE (type), TYPE_ARG_TYPES (type));\n+\t\t  type = build_cplus_method_type (ctype, TREE_TYPE (type),\n+\t\t\t\t\t\t  TYPE_ARG_TYPES (type));\n \t      }\n \n \t    /* Tell grokfndecl if it needs to set TREE_PUBLIC on the node.  */\n@@ -10571,8 +10529,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\tdeclarator = build_decl_overload (dname, TYPE_ARG_TYPES (type), 0);\n \t  }\n \telse if (TREE_CODE (type) == FUNCTION_TYPE && staticp < 2)\n-\t  type = build_cplus_method_type (build_type_variant (ctype, constp, volatilep),\n-\t\t\t\t\t  TREE_TYPE (type), TYPE_ARG_TYPES (type));\n+\t  type = build_cplus_method_type (ctype, TREE_TYPE (type),\n+\t\t\t\t\t  TYPE_ARG_TYPES (type));\n \n \t/* Record presence of `static'.  */\n \tpublicp = (ctype != NULL_TREE\n@@ -10626,32 +10584,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       {\n \t/* It's a variable.  */\n \n-\tif (decl_context == CATCHPARM)\n-\t  {\n-\t    if (ctype)\n-\t      {\n-\t\tctype = NULL_TREE;\n-\t\terror (\"cannot use `::' in parameter declaration\");\n-\t      }\n-\n-\t    /* A parameter declared as an array of T is really a pointer to T.\n-\t       One declared as a function is really a pointer to a function.\n-\t       One declared as a member is really a pointer to member.  */\n-\n-\t    if (TREE_CODE (type) == ARRAY_TYPE)\n-\t      {\n-\t\t/* Transfer const-ness of array into that of type\n-                   pointed to.  */\n-\t\ttype = build_pointer_type\n-\t\t  (cp_build_type_variant (TREE_TYPE (type), constp, volatilep));\n-\t\tvolatilep = constp = 0;\n-\t      }\n-\t    else if (TREE_CODE (type) == FUNCTION_TYPE)\n-\t      type = build_pointer_type (type);\n-\t    else if (TREE_CODE (type) == OFFSET_TYPE)\n-\t      type = build_pointer_type (type);\n-\t  }\n-\n \t/* An uninitialized decl with `extern' is a reference.  */\n \tdecl = grokvardecl (type, declarator, &specbits, \n \t\t\t    initialized, constp, in_namespace);"}, {"sha": "3580d4fc49a42e4e375e75cf617beb0024a4f4bf", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=14ae7e7d281f1b0cfc43f212362df64a923c2dda", "patch": "@@ -250,23 +250,25 @@ build_signature_pointer_or_reference_type (to_type, constp, volatilep, refp)\n /* Construct, lay out and return the type of pointers to signature TO_TYPE.  */\n \n tree\n-build_signature_pointer_type (to_type, constp, volatilep)\n+build_signature_pointer_type (to_type)\n      tree to_type;\n-     int constp, volatilep;\n {\n   return\n-    build_signature_pointer_or_reference_type (to_type, constp, volatilep, 0);\n+    build_signature_pointer_or_reference_type (TYPE_MAIN_VARIANT (to_type),\n+\t\t\t\t\t       TYPE_READONLY (to_type),\n+\t\t\t\t\t       TYPE_VOLATILE (to_type), 0);\n }\n \n /* Construct, lay out and return the type of pointers to signature TO_TYPE.  */\n \n tree\n-build_signature_reference_type (to_type, constp, volatilep)\n+build_signature_reference_type (to_type)\n      tree to_type;\n-     int constp, volatilep;\n {\n   return\n-    build_signature_pointer_or_reference_type (to_type, constp, volatilep, 1);\n+    build_signature_pointer_or_reference_type (TYPE_MAIN_VARIANT (to_type),\n+\t\t\t\t\t       TYPE_READONLY (to_type),\n+\t\t\t\t\t       TYPE_VOLATILE (to_type), 1);\n }\n \n /* Return the name of the signature table (as an IDENTIFIER_NODE)"}, {"sha": "224c950c2804fb8c4314171386e338f2dfa17165", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ae7e7d281f1b0cfc43f212362df64a923c2dda/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=14ae7e7d281f1b0cfc43f212362df64a923c2dda", "patch": "@@ -377,9 +377,7 @@ build_cplus_method_type (basetype, rettype, argtypes)\n   TYPE_METHOD_BASETYPE (t) = TYPE_MAIN_VARIANT (basetype);\n   TREE_TYPE (t) = rettype;\n   if (IS_SIGNATURE (basetype))\n-    ptype = build_signature_pointer_type (TYPE_MAIN_VARIANT (basetype),\n-\t\t\t\t\t  TYPE_READONLY (basetype),\n-\t\t\t\t\t  TYPE_VOLATILE (basetype));\n+    ptype = build_signature_pointer_type (basetype);\n   else\n     ptype = build_pointer_type (basetype);\n "}]}