{"sha": "f76321937378f925d6a4be06ebb2b4b46036edee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2MzIxOTM3Mzc4ZjkyNWQ2YTRiZTA2ZWJiMmI0YjQ2MDM2ZWRlZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-11-03T08:41:40Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2015-11-03T08:41:40Z"}, "message": "Make the default constructors of tuple and pair conditionally explicit.\n\n2015-11-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tMake the default constructors of tuple and pair conditionally explicit.\n\t* include/std/type_traits (is_unsigned, __is_array_unknown_bounds,\n\t__is_default_constructible_atom, __is_default_constructible_safe,\n\t__is_direct_constructible_new_safe, __is_direct_constructible_ref_cast,\n\t__is_nt_default_constructible_impl, is_nothrow_default_constructible,\n\tis_nothrow_constructible, is_nothrow_assignable,\n\tis_trivially_constructible, is_trivially_copy_constructible,\n\tis_trivially_move_constructible, is_trivially_assignable,\n\tis_trivially_copy_assignable, is_trivially_move_assignable,\n\tis_trivially_destructible): Simplify.\n\t* include/std/type_traits (\n\t__do_is_implicitly_default_constructible_impl,\n\t__is_implicitly_default_constructible_impl,\n\t__is_implicitly_default_constructible_safe,\n\t__is_implicitly_default_constructible): New.\n\t* include/bits/stl_pair.h (pair::pair()): Use it.\n\t* include/std/tuple (tuple<_T1, _T2>::tuple): Use it.\n\t* include/std/tuple (_ImplicitlyDefaultConstructibleTuple): New.\n\t* include/std/tuple (tuple<_Types...>::tuple()): Use it.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n\t* testsuite/20_util/is_implicitly_default_constructible/requirements/explicit_instantiation.cc: New.\n\t* testsuite/20_util/is_implicitly_default_constructible/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_implicitly_default_constructible/value.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Likewise.\n\t* testsuite/20_util/pair/cons/explicit_construct.cc: Likewise.\n\t* testsuite/20_util/tuple/cons/explicit_construct.cc: Likewise.\n\nFrom-SVN: r229699", "tree": {"sha": "9297e23ae61b087378aeec93b9b67501f63e547b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9297e23ae61b087378aeec93b9b67501f63e547b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76321937378f925d6a4be06ebb2b4b46036edee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76321937378f925d6a4be06ebb2b4b46036edee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76321937378f925d6a4be06ebb2b4b46036edee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76321937378f925d6a4be06ebb2b4b46036edee/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbe741d0e2c6d5a7247a2a724699f7ba20cb6ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe741d0e2c6d5a7247a2a724699f7ba20cb6ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe741d0e2c6d5a7247a2a724699f7ba20cb6ad9"}], "stats": {"total": 454, "additions": 373, "deletions": 81}, "files": [{"sha": "ea3cb833580f2930be7a548720084f9fa218fdc8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -1,3 +1,33 @@\n+2015-11-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tMake the default constructors of tuple and pair conditionally explicit.\n+\t* include/std/type_traits (is_unsigned, __is_array_unknown_bounds,\n+\t__is_default_constructible_atom, __is_default_constructible_safe,\n+\t__is_direct_constructible_new_safe, __is_direct_constructible_ref_cast,\n+\t__is_nt_default_constructible_impl, is_nothrow_default_constructible,\n+\tis_nothrow_constructible, is_nothrow_assignable,\n+\tis_trivially_constructible, is_trivially_copy_constructible,\n+\tis_trivially_move_constructible, is_trivially_assignable,\n+\tis_trivially_copy_assignable, is_trivially_move_assignable,\n+\tis_trivially_destructible): Simplify.\n+\t* include/std/type_traits (\n+\t__do_is_implicitly_default_constructible_impl,\n+\t__is_implicitly_default_constructible_impl,\n+\t__is_implicitly_default_constructible_safe,\n+\t__is_implicitly_default_constructible): New.\n+\t* include/bits/stl_pair.h (pair::pair()): Use it.\n+\t* include/std/tuple (tuple<_T1, _T2>::tuple): Use it.\n+\t* include/std/tuple (_ImplicitlyDefaultConstructibleTuple): New.\n+\t* include/std/tuple (tuple<_Types...>::tuple()): Use it.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n+\t* testsuite/20_util/is_implicitly_default_constructible/requirements/explicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_implicitly_default_constructible/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/is_implicitly_default_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Likewise.\n+\t* testsuite/20_util/pair/cons/explicit_construct.cc: Likewise.\n+\t* testsuite/20_util/tuple/cons/explicit_construct.cc: Likewise.\n+\n 2015-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (__invoke_impl): New overloads."}, {"sha": "dfcd357fb3c2385f9ac7d226845d57da01d658b5", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -141,13 +141,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template <typename _U1 = _T1,\n                 typename _U2 = _T2,\n                 typename enable_if<__and_<\n-                                     is_default_constructible<_U1>,\n-                                     is_default_constructible<_U2>>\n+                                     __is_implicitly_default_constructible<_U1>,\n+                                     __is_implicitly_default_constructible<_U2>>\n                                    ::value, bool>::type = true>\n #endif\n       _GLIBCXX_CONSTEXPR pair()\n       : first(), second() { }\n \n+#if __cplusplus >= 201103L\n+      template <typename _U1 = _T1,\n+                typename _U2 = _T2,\n+                typename enable_if<__and_<\n+                       is_default_constructible<_U1>,\n+                       is_default_constructible<_U2>,\n+                       __not_<\n+                         __and_<__is_implicitly_default_constructible<_U1>,\n+                                __is_implicitly_default_constructible<_U2>>>>\n+                                   ::value, bool>::type = false>\n+      explicit constexpr pair()\n+      : first(), second() { }\n+#endif\n+\n       /** Two objects may be passed to a @c pair constructor to be copied.  */\n #if __cplusplus < 201103L\n       pair(const _T1& __a, const _T2& __b)"}, {"sha": "e6c32b348be12fa2207b302e29deb93fe86d21ac", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -551,16 +551,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         {\n           return __and_<is_default_constructible<_Elements>...>::value;\n         }\n+        static constexpr bool _ImplicitlyDefaultConstructibleTuple()\n+        {\n+          return __and_<__is_implicitly_default_constructible<_Elements>...>\n+            ::value;\n+        }\n       };\n \n     public:\n       template<typename _Dummy = void,\n                typename enable_if<_TC2<_Dummy>::\n-                                    _DefaultConstructibleTuple(),\n+                                    _ImplicitlyDefaultConstructibleTuple(),\n                                   bool>::type = true>\n       constexpr tuple()\n       : _Inherited() { }\n \n+      template<typename _Dummy = void,\n+               typename enable_if<_TC2<_Dummy>::\n+                                    _DefaultConstructibleTuple()\n+                                  &&\n+                                  !_TC2<_Dummy>::\n+                                    _ImplicitlyDefaultConstructibleTuple(),\n+                                  bool>::type = false>\n+      explicit constexpr tuple()\n+      : _Inherited() { }\n+\n       // Shortcut for the cases where constructors taking _Elements...\n       // need to be constrained.\n       template<typename _Dummy> using _TCC =\n@@ -837,13 +852,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template <typename _U1 = _T1,\n                 typename _U2 = _T2,\n                 typename enable_if<__and_<\n-                                     is_default_constructible<_U1>,\n-                                     is_default_constructible<_U2>>\n+                                     __is_implicitly_default_constructible<_U1>,\n+                                     __is_implicitly_default_constructible<_U2>>\n                                    ::value, bool>::type = true>\n \n       constexpr tuple()\n       : _Inherited() { }\n \n+      template <typename _U1 = _T1,\n+                typename _U2 = _T2,\n+                typename enable_if<\n+                  __and_<\n+                    is_default_constructible<_U1>,\n+                    is_default_constructible<_U2>,\n+                    __not_<\n+                      __and_<__is_implicitly_default_constructible<_U1>,\n+                             __is_implicitly_default_constructible<_U2>>>>\n+                  ::value, bool>::type = false>\n+\n+      explicit constexpr tuple()\n+      : _Inherited() { }\n+\n       // Shortcut for the cases where constructors taking _T1, _T2\n       // need to be constrained.\n       template<typename _Dummy> using _TCC ="}, {"sha": "7448d5b836f20d845057bfda387eca2646df6c9b", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -715,7 +715,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_unsigned\n   template<typename _Tp>\n     struct is_unsigned\n-    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type\n+    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>\n     { };\n \n \n@@ -744,7 +744,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct __is_array_unknown_bounds\n-    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type\n+    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>\n     { };\n     \n   // In N3290 is_destructible does not say anything about function\n@@ -862,7 +862,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct __is_default_constructible_atom\n     : public __and_<__not_<is_void<_Tp>>,\n-                    __is_default_constructible_impl<_Tp>>::type\n+                    __is_default_constructible_impl<_Tp>>\n     { };\n \n   template<typename _Tp, bool = is_array<_Tp>::value>\n@@ -877,7 +877,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_default_constructible_safe<_Tp, true>\n     : public __and_<__is_array_known_bounds<_Tp>,\n \t\t    __is_default_constructible_atom<typename\n-                      remove_all_extents<_Tp>::type>>::type\n+                      remove_all_extents<_Tp>::type>>\n     { };\n \n   template<typename _Tp>\n@@ -957,7 +957,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Arg>\n     struct __is_direct_constructible_new_safe\n     : public __and_<is_destructible<_Tp>,\n-                    __is_direct_constructible_impl<_Tp, _Arg>>::type\n+                    __is_direct_constructible_impl<_Tp, _Arg>>\n     { };\n \n   template<typename, typename>\n@@ -1029,7 +1029,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __and_<__is_static_castable<_Arg, _Tp>,\n                     __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,\n                                  __is_lvalue_to_rvalue_ref<_Arg, _Tp>\n-                   >>>::type\n+                   >>>\n     { };\n \n   template<typename _Tp, typename _Arg>\n@@ -1144,7 +1144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_nt_default_constructible_impl<_Tp, true>\n     : public __and_<__is_array_known_bounds<_Tp>,\n \t\t    __is_nt_default_constructible_atom<typename\n-                      remove_all_extents<_Tp>::type>>::type\n+                      remove_all_extents<_Tp>::type>>\n     { };\n \n   template<typename _Tp>\n@@ -1156,7 +1156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct is_nothrow_default_constructible\n     : public __and_<is_default_constructible<_Tp>,\n-                    __is_nt_default_constructible_impl<_Tp>>::type\n+                    __is_nt_default_constructible_impl<_Tp>>\n     { };\n \n   template<typename _Tp, typename... _Args>\n@@ -1179,7 +1179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename... _Args>\n     struct is_nothrow_constructible\n     : public __and_<is_constructible<_Tp, _Args...>,\n-\t\t    __is_nt_constructible_impl<_Tp, _Args...>>::type\n+\t\t    __is_nt_constructible_impl<_Tp, _Args...>>\n     { };\n \n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n@@ -1285,7 +1285,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Up>\n     struct is_nothrow_assignable\n     : public __and_<is_assignable<_Tp, _Up>,\n-\t\t    __is_nt_assignable_impl<_Tp, _Up>>::type\n+\t\t    __is_nt_assignable_impl<_Tp, _Up>>\n     { };\n \n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n@@ -1328,7 +1328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename... _Args>\n     struct is_trivially_constructible\n     : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,\n-\t\t\t__is_trivially_constructible(_Tp, _Args...)>>::type\n+\t\t\t__is_trivially_constructible(_Tp, _Args...)>>\n     { };\n   \n   /// is_trivially_default_constructible\n@@ -1337,51 +1337,81 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public is_trivially_constructible<_Tp>::type\n     { };\n \n+  struct __do_is_implicitly_default_constructible_impl\n+  {\n+    template <typename _Tp>\n+    static void __helper(const _Tp&);\n+\n+    template <typename _Tp>\n+    static true_type __test(const _Tp&,\n+                            decltype(__helper<const _Tp&>({}))* = 0);\n+\n+    static false_type __test(...);\n+  };\n+\n+  template<typename _Tp>\n+    struct __is_implicitly_default_constructible_impl\n+      : public __do_is_implicitly_default_constructible_impl\n+  {\n+    typedef decltype(__test(declval<_Tp>())) type;\n+  };\n+\n+  template<typename _Tp>\n+    struct __is_implicitly_default_constructible_safe\n+      : public __is_implicitly_default_constructible_impl<_Tp>::type\n+  { };\n+\n+  template <typename _Tp>\n+    struct __is_implicitly_default_constructible\n+      : public __and_<is_default_constructible<_Tp>,\n+                      __is_implicitly_default_constructible_safe<_Tp>>\n+  { };\n+\n   /// is_trivially_copy_constructible\n   template<typename _Tp>\n     struct is_trivially_copy_constructible\n     : public __and_<is_copy_constructible<_Tp>, \n \t\t    integral_constant<bool,\n-\t\t\t__is_trivially_constructible(_Tp, const _Tp&)>>::type\n+\t\t\t__is_trivially_constructible(_Tp, const _Tp&)>>\n     { };\n   \n   /// is_trivially_move_constructible\n   template<typename _Tp>\n     struct is_trivially_move_constructible\n     : public __and_<is_move_constructible<_Tp>, \n \t\t    integral_constant<bool,\n-\t\t\t__is_trivially_constructible(_Tp, _Tp&&)>>::type\n+\t\t\t__is_trivially_constructible(_Tp, _Tp&&)>>\n     { };\n \n   /// is_trivially_assignable\n   template<typename _Tp, typename _Up>\n     struct is_trivially_assignable\n     : public __and_<is_assignable<_Tp, _Up>, \n \t\t    integral_constant<bool,\n-\t\t\t__is_trivially_assignable(_Tp, _Up)>>::type\n+\t\t\t__is_trivially_assignable(_Tp, _Up)>>\n     { };\n \n   /// is_trivially_copy_assignable\n   template<typename _Tp>\n     struct is_trivially_copy_assignable\n     : public __and_<is_copy_assignable<_Tp>, \n \t\t    integral_constant<bool,\n-\t\t\t__is_trivially_assignable(_Tp&, const _Tp&)>>::type\n+\t\t\t__is_trivially_assignable(_Tp&, const _Tp&)>>\n     { };\n \n   /// is_trivially_move_assignable\n   template<typename _Tp>\n     struct is_trivially_move_assignable\n     : public __and_<is_move_assignable<_Tp>, \n \t\t    integral_constant<bool,\n-\t\t\t__is_trivially_assignable(_Tp&, _Tp&&)>>::type\n+\t\t\t__is_trivially_assignable(_Tp&, _Tp&&)>>\n     { };\n \n   /// is_trivially_destructible\n   template<typename _Tp>\n     struct is_trivially_destructible\n     : public __and_<is_destructible<_Tp>, integral_constant<bool,\n-\t\t\t      __has_trivial_destructor(_Tp)>>::type\n+\t\t\t      __has_trivial_destructor(_Tp)>>\n     { };\n \n   /// has_trivial_default_constructor (temporary legacy)"}, {"sha": "4e7deda4a20d65ad465b258f1fc9dfa6c29d1a30", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2209 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2239 }\n \n #include <utility>\n "}, {"sha": "acc9f37a6d1f09f1ef00ebf77f8dee39f2c2d3ae", "filename": "libstdc++-v3/testsuite/20_util/is_implicitly_default_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct std::__is_implicitly_default_constructible<test_type>;\n+}"}, {"sha": "234b06c3725d2c6869f3202022db2d9c07297f29", "filename": "libstdc++-v3/testsuite/20_util/is_implicitly_default_constructible/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Frequirements%2Ftypedefs.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_implicitly_default_constructible<int>          test_type;\n+  typedef test_type::value_type                     value_type;\n+  typedef test_type::type                           type;\n+  typedef test_type::type::value_type               type_value_type;\n+  typedef test_type::type::type                     type_type;\n+}"}, {"sha": "aff4955dd301061c05b7bcb4f504c690f57c4246", "filename": "libstdc++-v3/testsuite/20_util/is_implicitly_default_constructible/value.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_implicitly_default_constructible%2Fvalue.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+struct ExplicitDefault\n+{\n+  explicit ExplicitDefault() {}\n+};\n+\n+struct ExplicitDefaultDefault\n+{\n+  explicit ExplicitDefaultDefault() = default;\n+};\n+\n+void test01()\n+{\n+  using std::__is_implicitly_default_constructible;\n+  // Positive tests.\n+  static_assert(__is_implicitly_default_constructible<int>::value, \"\");\n+  // Negative tests.\n+  static_assert(!__is_implicitly_default_constructible<int&>::value, \"\");\n+  static_assert(!__is_implicitly_default_constructible<\n+                ExplicitDefault>::value, \"\");\n+  static_assert(!__is_implicitly_default_constructible<\n+                ExplicitDefaultDefault>::value, \"\");\n+}"}, {"sha": "8e5fe532f34658f5696aaa341ba86046e313e822", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -48,4 +48,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1874 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1904 }"}, {"sha": "4cd03115c2674196478fd3c958f4a431457f69de", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1770 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1727 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1800 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1757 }"}, {"sha": "ac1dc7e423ae60d4857c3f4e72b788bee60f24bb", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/explicit_construct.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fexplicit_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fexplicit_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fexplicit_construct.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -26,6 +26,16 @@ struct Explicit\n   explicit Explicit(int) {}\n };\n \n+struct ExplicitDefault\n+{\n+  explicit ExplicitDefault() {}\n+};\n+\n+struct ExplicitDefaultDefault\n+{\n+  explicit ExplicitDefaultDefault() = default;\n+};\n+\n std::pair<int, int> f1() {return {1,2};}\n \n std::pair<Explicit, Explicit> f2() {return {1,2};} // { dg-error \"explicit\" }\n@@ -72,6 +82,20 @@ void f6(std::pair<Explicit, Explicit>) {}\n \n void f7(std::pair<long, long>) {}\n \n+std::pair<ExplicitDefault, int> f8()\n+{\n+  return {}; // { dg-error \"explicit\" }\n+}\n+\n+std::pair<ExplicitDefaultDefault, int> f9()\n+{\n+  return {}; // { dg-error \"explicit\" }\n+}\n+\n+void f10(std::pair<ExplicitDefault, int>) {}\n+\n+void f11(std::pair<ExplicitDefaultDefault, int>) {}\n+\n void test_arg_passing()\n {\n   f6(v0); // { dg-error \"could not convert\" }\n@@ -84,6 +108,10 @@ void test_arg_passing()\n   f7({1,2});\n   f7(std::pair<int, int>{});\n   f7(std::pair<long, long>{});\n+  f10({}); // { dg-error \"explicit\" }\n+  f11({}); // { dg-error \"explicit\" }\n+  f10(std::pair<ExplicitDefault, int>{});\n+  f11(std::pair<ExplicitDefaultDefault, int>{});\n }\n \n struct MoveOnly"}, {"sha": "4d97cfb97a19107a1f1dc8dd2098d30e0bd8eadb", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/explicit_construct.cc", "status": "modified", "additions": 113, "deletions": 55, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fexplicit_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76321937378f925d6a4be06ebb2b4b46036edee/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fexplicit_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fexplicit_construct.cc?ref=f76321937378f925d6a4be06ebb2b4b46036edee", "patch": "@@ -28,13 +28,26 @@ struct Explicit\n   explicit Explicit(int) {}\n };\n \n+struct ExplicitDefault\n+{\n+  explicit ExplicitDefault() {}\n+};\n+\n+struct ExplicitDefaultDefault\n+{\n+  explicit ExplicitDefaultDefault() = default;\n+};\n+\n std::tuple<int> f1a() {return {1};}\n std::tuple<int, int> f1b() {return {1,2};}\n std::tuple<int, int, int> f1c() {return {1,2,3};}\n \n-std::tuple<Explicit> f2_a() {return {1};} // { dg-error \"explicit\" }\n-std::tuple<Explicit, Explicit> f2_b() {return {1,2};} // { dg-error \"explicit\" }\n-std::tuple<Explicit, Explicit, Explicit> f2_c() {return {1,2,3};} // { dg-error \"explicit\" }\n+std::tuple<Explicit> f2_a()\n+{return {1};} // { dg-error \"explicit\" }\n+std::tuple<Explicit, Explicit> f2_b()\n+{return {1,2};} // { dg-error \"explicit\" }\n+std::tuple<Explicit, Explicit, Explicit> f2_c()\n+{return {1,2,3};} // { dg-error \"explicit\" }\n \n std::tuple<long> f3_a() {return std::tuple<int>{1};}\n std::tuple<long, long> f3_b() {return std::tuple<int, int>{1,2};}\n@@ -57,6 +70,24 @@ std::tuple<long> f5_a() {return {1};}\n std::tuple<long, long> f5_b() {return {1,2};}\n std::tuple<long, long, long> f5_c() {return {1,2,3};}\n \n+std::tuple<ExplicitDefault> f6_a()\n+{return {};} // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefault, ExplicitDefault> f6_b()\n+{return {};} // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefault, ExplicitDefault, ExplicitDefault> f6_c()\n+{return {};} // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefault, int> f6_d()\n+{return {};} // { dg-error \"explicit\" }\n+\n+std::tuple<ExplicitDefaultDefault> f7_a()\n+{return {};} // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefaultDefault, ExplicitDefaultDefault> f7_b()\n+{return {};} // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefaultDefault,\n+           ExplicitDefaultDefault,\n+           ExplicitDefaultDefault> f7_c()\n+{return {};} // { dg-error \"explicit\" }\n+\n std::tuple<int, int> fp1() {return std::pair<int, int>{1,2}; }\n std::tuple<long, long> fp2() {return std::pair<int, int>{1,2}; }\n std::tuple<Explicit, Explicit> fp3()\n@@ -163,7 +194,7 @@ std::tuple<long, long, long>\n   v31_c{std::allocator_arg, std::allocator<int>{}, 1,2,3};\n \n std::tuple<Explicit> v32_a\n-  = {std::allocator_arg, std::allocator<int>{}, 1}; // { dg-error \"explicit\" }\n+  = {std::allocator_arg, std::allocator<int>{ }, 1}; // { dg-error \"explicit\" }\n std::tuple<Explicit, Explicit> v32_b\n   = {std::allocator_arg, std::allocator<int>{}, 1, 2}; // { dg-error \"explicit\" }\n std::tuple<Explicit, Explicit, Explicit> v32_c\n@@ -199,7 +230,19 @@ std::tuple<int, int> v42 = {std::allocator_arg, std::allocator<int>{}, v20};\n std::tuple<long, long> v43 = {std::allocator_arg, std::allocator<int>{}, v20};\n \n std::tuple<Explicit, Explicit> v44\n-= {std::allocator_arg, std::allocator<int>{}, v20}; // { dg-error \"explicit\" }\n+= {std::allocator_arg, std::allocator<int>{ }, v20}; // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefault> v45_a{};\n+std::tuple<ExplicitDefault, int> v45_b{};\n+\n+std::tuple<ExplicitDefault> v46_a = {}; // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefault, int> v46_b = {}; // { dg-error \"explicit\" }\n+\n+std::tuple<ExplicitDefaultDefault> v47_a{};\n+std::tuple<ExplicitDefaultDefault, int> v47_b{};\n+\n+std::tuple<ExplicitDefaultDefault> v48_a = {}; // { dg-error \"explicit\" }\n+std::tuple<ExplicitDefaultDefault, int> v48_b = { }; // { dg-error \"explicit\" }\n+\n \n struct DeletedCopy\n {\n@@ -225,58 +268,73 @@ std::tuple<int, int, Sanity> v50(std::allocator_arg,\n                                  std::allocator<Sanity>{},\n                                  3, 4, {42});\n \n-void f6_a(std::tuple<Explicit>) {}\n-void f6_b(std::tuple<Explicit, Explicit>) {}\n-void f6_c(std::tuple<Explicit, Explicit, Explicit>) {}\n+void f8_a(std::tuple<Explicit>) {}\n+void f8_b(std::tuple<Explicit, Explicit>) {}\n+void f8_c(std::tuple<Explicit, Explicit, Explicit>) {}\n+\n+void f9_a(std::tuple<long>) {}\n+void f9_b(std::tuple<long, long>) {}\n+void f9_c(std::tuple<long, long, long>) {}\n+\n+void f10_a(std::tuple<ExplicitDefault>) {}\n+void f10_b(std::tuple<ExplicitDefault, int>) {}\n \n-void f7_a(std::tuple<long>) {}\n-void f7_b(std::tuple<long, long>) {}\n-void f7_c(std::tuple<long, long, long>) {}\n+void f11_a(std::tuple<ExplicitDefaultDefault>) {}\n+void f11_b(std::tuple<ExplicitDefaultDefault, int>) {}\n \n void test_arg_passing()\n {\n-  f6_a(v0_a); // { dg-error \"could not convert\" }\n-  f6_b(v0_b); // { dg-error \"could not convert\" }\n-  f6_c(v0_c); // { dg-error \"could not convert\" }\n-  f6_b(v20); // { dg-error \"could not convert\" }\n-\n-  f6_a(v1_a);\n-  f6_b(v1_b);\n-  f6_c(v1_c);\n-\n-  f6_a({1}); // { dg-error \"explicit\" }\n-  f6_b({1,2}); // { dg-error \"explicit\" }\n-  f6_c({1,2,3}); // { dg-error \"explicit\" }\n-\n-  f6_a(std::tuple<Explicit>{});\n-  f6_b(std::tuple<Explicit, Explicit>{});\n-  f6_c(std::tuple<Explicit, Explicit, Explicit>{});\n-\n-  f6_a(std::tuple<int>{}); // { dg-error \"could not convert\" }\n-  f6_b(std::tuple<int, int>{}); // { dg-error \"could not convert\" }\n-  f6_c(std::tuple<int, int, int>{}); // { dg-error \"could not convert\" }\n-  f6_b(std::pair<int, int>{}); // { dg-error \"could not convert\" }\n-\n-  f7_a(v0_a);\n-  f7_b(v0_b);\n-  f7_c(v0_c);\n-  f7_b(v20);\n-\n-  f7_a(v6_a);\n-  f7_b(v6_b);\n-  f7_c(v6_c);\n-\n-  f7_a({1});\n-  f7_b({1,2});\n-  f7_c({1,2,3});\n-\n-  f7_a(std::tuple<int>{});\n-  f7_b(std::tuple<int, int>{});\n-  f7_c(std::tuple<int, int, int>{});\n-  f7_b(std::pair<int, int>{});\n-\n-\n-  f7_a(std::tuple<long>{});\n-  f7_b(std::tuple<long, long>{});\n-  f7_c(std::tuple<long, long, long>{});\n+  f8_a(v0_a); // { dg-error \"could not convert\" }\n+  f8_b(v0_b); // { dg-error \"could not convert\" }\n+  f8_c(v0_c); // { dg-error \"could not convert\" }\n+  f8_b(v20); // { dg-error \"could not convert\" }\n+\n+  f8_a(v1_a);\n+  f8_b(v1_b);\n+  f8_c(v1_c);\n+\n+  f8_a({1}); // { dg-error \"explicit\" }\n+  f8_b({1,2}); // { dg-error \"explicit\" }\n+  f8_c({1,2,3}); // { dg-error \"explicit\" }\n+\n+  f8_a(std::tuple<Explicit>{});\n+  f8_b(std::tuple<Explicit, Explicit>{});\n+  f8_c(std::tuple<Explicit, Explicit, Explicit>{});\n+\n+  f8_a(std::tuple<int>{}); // { dg-error \"could not convert\" }\n+  f8_b(std::tuple<int, int>{}); // { dg-error \"could not convert\" }\n+  f8_c(std::tuple<int, int, int>{}); // { dg-error \"could not convert\" }\n+  f8_b(std::pair<int, int>{}); // { dg-error \"could not convert\" }\n+\n+  f9_a(v0_a);\n+  f9_b(v0_b);\n+  f9_c(v0_c);\n+  f9_b(v20);\n+\n+  f9_a(v6_a);\n+  f9_b(v6_b);\n+  f9_c(v6_c);\n+\n+  f9_a({1});\n+  f9_b({1,2});\n+  f9_c({1,2,3});\n+\n+  f9_a(std::tuple<int>{});\n+  f9_b(std::tuple<int, int>{});\n+  f9_c(std::tuple<int, int, int>{});\n+  f9_b(std::pair<int, int>{});\n+\n+  f9_a(std::tuple<long>{});\n+  f9_b(std::tuple<long, long>{});\n+  f9_c(std::tuple<long, long, long>{});\n+\n+  f10_a({}); // { dg-error \"explicit\" }\n+  f10_b({}); // { dg-error \"explicit\" }\n+  f11_a({}); // { dg-error \"explicit\" }\n+  f11_b({}); // { dg-error \"explicit\" }\n+\n+  f10_a(std::tuple<ExplicitDefault>{});\n+  f10_b(std::tuple<ExplicitDefault, int>{});\n+  f11_a(std::tuple<ExplicitDefaultDefault>{});\n+  f11_b(std::tuple<ExplicitDefaultDefault, int>{});\n }"}]}