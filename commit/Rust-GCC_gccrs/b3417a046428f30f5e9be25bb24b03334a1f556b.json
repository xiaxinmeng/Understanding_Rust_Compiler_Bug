{"sha": "b3417a046428f30f5e9be25bb24b03334a1f556b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM0MTdhMDQ2NDI4ZjMwZjVlOWJlMjViYjI0YjAzMzM0YTFmNTU2Yg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@cygnus.com", "date": "1995-06-08T23:06:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-08T23:06:37Z"}, "message": "Change all callers of finish_decl to cp_finish_decl.\n\nFrom-SVN: r9907", "tree": {"sha": "eb3ae4e5df6ce460174fc969c3df07360a035155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb3ae4e5df6ce460174fc969c3df07360a035155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3417a046428f30f5e9be25bb24b03334a1f556b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3417a046428f30f5e9be25bb24b03334a1f556b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3417a046428f30f5e9be25bb24b03334a1f556b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3417a046428f30f5e9be25bb24b03334a1f556b/comments", "author": null, "committer": null, "parents": [{"sha": "ee760f3f6b98a9af36685df41554c02d716c04ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee760f3f6b98a9af36685df41554c02d716c04ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee760f3f6b98a9af36685df41554c02d716c04ca"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "b1c68121d92ea5b48b5238695c61f520fc28413c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -2102,7 +2102,7 @@ finish_vtbls (binfo, do_self, t)\n \t      && DECL_INITIAL (decl) != BINFO_VIRTUALS (binfo))\n \t    DECL_INITIAL (decl) = build_nt (CONSTRUCTOR, NULL_TREE,\n \t\t\t\t\t    BINFO_VIRTUALS (binfo));\n-\t  finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0, 0);\n+\t  cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0, 0);\n \t  DECL_CONTEXT (decl) = context;\n \t}\n       CLEAR_BINFO_NEW_VTABLE_MARKED (binfo);"}, {"sha": "1e93bdf3523d59fffe28e8ba3ec79c36f2a93465", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -2017,7 +2017,7 @@ extern void shadow_tag\t\t\t\tPROTO((tree));\n extern int grok_ctor_properties\t\t\tPROTO((tree, tree));\n extern tree groktypename\t\t\tPROTO((tree));\n extern tree start_decl\t\t\t\tPROTO((tree, tree, int, tree));\n-extern void finish_decl\t\t\t\tPROTO((tree, tree, tree, int, int));\n+extern void cp_finish_decl\t\t\tPROTO((tree, tree, tree, int, int));\n extern void expand_static_init\t\t\tPROTO((tree, tree));\n extern int complete_array_type\t\t\tPROTO((tree, tree, int));\n extern tree build_ptrmemfunc_type\t\tPROTO((tree));"}, {"sha": "ee7c6abab949d7d646754874ea2aed3a749b480b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -598,7 +598,7 @@ build_up_reference (type, arg, flags, checkconst)\n \t      /* Give this new temp some rtl and initialize it.  */\n \t      DECL_INITIAL (temp) = targ;\n \t      TREE_STATIC (temp) = 1;\n-\t      finish_decl (temp, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n+\t      cp_finish_decl (temp, targ, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n \t      /* Do this after declaring it static.  */\n \t      rval = build_unary_op (ADDR_EXPR, temp, 0);\n \t      TREE_TYPE (rval) = type;\n@@ -1319,7 +1319,7 @@ cp_convert (type, expr, convtype, flags)\n \t  sig_ptr = get_temp_name (type, 1);\n \t  DECL_INITIAL (sig_ptr) = constructor;\n \t  CLEAR_SIGNATURE (sig_ty);\n-\t  finish_decl (sig_ptr, constructor, NULL_TREE, 0, 0);\n+\t  cp_finish_decl (sig_ptr, constructor, NULL_TREE, 0, 0);\n \t  SET_SIGNATURE (sig_ty);\n \t  TREE_READONLY (sig_ptr) = 1;\n "}, {"sha": "dbf8742fbc7430940d32ee975c5021cab7aa9bc6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -1443,14 +1443,14 @@ grokfield (declarator, declspecs, raises, init, asmspec_tree)\n \t}\n     }\n \n-  /* The corresponding pop_obstacks is in finish_decl.  */\n+  /* The corresponding pop_obstacks is in cp_finish_decl.  */\n   push_obstacks_nochange ();\n \n   if (TREE_CODE (value) == VAR_DECL)\n     {\n       /* We cannot call pushdecl here, because that would\n \t fill in the value of our TREE_CHAIN.  Instead, we\n-\t modify finish_decl to do the right thing, namely, to\n+\t modify cp_finish_decl to do the right thing, namely, to\n \t put this decl out straight away.  */\n       if (TREE_PUBLIC (value))\n \t{\n@@ -1482,7 +1482,7 @@ grokfield (declarator, declspecs, raises, init, asmspec_tree)\n       DECL_INITIAL (value) = init;\n       DECL_IN_AGGR_P (value) = 1;\n \n-      finish_decl (value, init, asmspec_tree, 1, flags);\n+      cp_finish_decl (value, init, asmspec_tree, 1, flags);\n       pushdecl_class_level (value);\n       return value;\n     }\n@@ -1497,7 +1497,7 @@ grokfield (declarator, declspecs, raises, init, asmspec_tree)\n \t}\n       if (DECL_INITIAL (value) == error_mark_node)\n \tinit = error_mark_node;\n-      finish_decl (value, init, asmspec_tree, 1, flags);\n+      cp_finish_decl (value, init, asmspec_tree, 1, flags);\n       DECL_INITIAL (value) = init;\n       DECL_IN_AGGR_P (value) = 1;\n       return value;\n@@ -1519,7 +1519,7 @@ grokfield (declarator, declspecs, raises, init, asmspec_tree)\n \t  DECL_RTL (value) = NULL_RTX;\n \t  DECL_ASSEMBLER_NAME (value) = get_identifier (asmspec);\n \t}\n-      finish_decl (value, init, asmspec_tree, 1, flags);\n+      cp_finish_decl (value, init, asmspec_tree, 1, flags);\n \n       /* Pass friends back this way.  */\n       if (DECL_FRIEND_P (value))\n@@ -1580,7 +1580,7 @@ grokbitfield (declarator, declspecs, width)\n       cp_error (\"static member `%D' cannot be a bitfield\", value);\n       return NULL_TREE;\n     }\n-  finish_decl (value, NULL_TREE, NULL_TREE, 0, 0);\n+  cp_finish_decl (value, NULL_TREE, NULL_TREE, 0, 0);\n \n   if (width != error_mark_node)\n     {\n@@ -1772,7 +1772,7 @@ groktypefield (declspecs, parmlist)\n       return void_type_node;\n     }\n \n-  finish_decl (decl, NULL_TREE, NULL_TREE, 0, 0);\n+  cp_finish_decl (decl, NULL_TREE, NULL_TREE, 0, 0);\n \n   /* If this declaration is common to another declaration\n      complain about such redundancy, and return NULL_TREE\n@@ -2331,7 +2331,7 @@ finish_table (name, type, init, publicp)\n \t  DECL_INITIAL (empty_table) = init;\n \t  asmspec = build_string (IDENTIFIER_LENGTH (DECL_NAME (empty_table)),\n \t\t\t\t  IDENTIFIER_POINTER (DECL_NAME (empty_table)));\n-\t  finish_decl (empty_table, NULL_TREE, asmspec, 0, 0);\n+\t  cp_finish_decl (empty_table, NULL_TREE, asmspec, 0, 0);\n \t}\n       is_empty = 1;\n     }\n@@ -2369,7 +2369,7 @@ finish_table (name, type, init, publicp)\n \t\t\t      IDENTIFIER_POINTER (DECL_NAME (empty_table)));\n     }\n \n-  finish_decl (decl, NULL_TREE, asmspec, 0, 0);\n+  cp_finish_decl (decl, NULL_TREE, asmspec, 0, 0);\n   return decl;\n }\n "}, {"sha": "34cf738ee503804a3819d20df0587d102f75d878", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -1,5 +1,5 @@\n /* Handle exceptional things in C++.\n-   Copyright (C) 1989, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann <tiemann@cygnus.com>\n    Rewritten by Mike Stump <mrs@cygnus.com>, based upon an\n    initial re-implementation courtesy Tad Hunt.\n@@ -1230,10 +1230,10 @@ expand_start_catch_block (declspecs, declarator)\n       init = convert_from_reference (save_expr (make_tree (init_type, call_rtx)));\n \n       /* Do we need the below two lines? */\n-      /* Let `finish_decl' know that this initializer is ok.  */\n+      /* Let `cp_finish_decl' know that this initializer is ok.  */\n       DECL_INITIAL (decl) = init;\n       decl = pushdecl (decl);\n-      finish_decl (decl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n+      cp_finish_decl (decl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n     }\n   else\n     {"}, {"sha": "110dde6cfe10885efe039634cc71659f26cff854", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -1,5 +1,5 @@\n /* YACC parser for C++ syntax.\n-   Copyright (C) 1988, 1989, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1989, 1993, 1995 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -497,7 +497,7 @@ template_def:\n \t\t  d = start_decl ($<ttype>2, /*current_declspecs*/NULL_TREE, 0,\n \t\t\t\t  $3);\n \t\t  cplus_decl_attributes (d, $5, prefix_attributes);\n-\t\t  finish_decl (d, NULL_TREE, $4, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, $4, 0, 0);\n \t\t  end_template_decl ($1, d, 0, def);\n \t\t  if (def)\n \t\t    reinit_parse_for_template ((int) $6, $1, d);\n@@ -516,7 +516,7 @@ template_def:\n \t\t  d = start_decl ($<ttype>3, current_declspecs,\n \t\t\t\t  0, $<ttype>4);\n \t\t  cplus_decl_attributes (d, $6, prefix_attributes);\n-\t\t  finish_decl (d, NULL_TREE, $5, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, $5, 0, 0);\n \t\t  end_template_decl ($1, d, 0, def);\n \t\t  if (def)\n \t\t    {\n@@ -530,7 +530,7 @@ template_def:\n \t\t{\n \t\t  int def = ($4 != ';');\n \t\t  tree d = start_decl ($<ttype>3, $<ttype>2, 0, NULL_TREE);\n-\t\t  finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  end_template_decl ($1, d, 0, def);\n \t\t  if (def)\n \t\t    reinit_parse_for_template ((int) $4, $1, d);\n@@ -556,7 +556,7 @@ datadef:\n \t| declmods notype_declarator ';'\n \t\t{ tree d;\n \t\t  d = start_decl ($<ttype>2, $<ttype>$, 0, NULL_TREE);\n-\t\t  finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t}\n \t| typed_declspecs initdecls ';'\n \t\t{\n@@ -566,7 +566,7 @@ datadef:\n \t| typed_declspecs declarator ';'\n \t\t{ tree d;\n \t\t  d = start_decl ($<ttype>2, $<ttype>$, 0, NULL_TREE);\n-\t\t  finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  note_list_got_semicolon ($<ttype>$);\n \t\t}\n         | declmods ';'\n@@ -973,7 +973,7 @@ condition:\n \t\t}\n \tinit\n \t\t{ \n-\t\t  finish_decl ($<ttype>7, $8, $5, 0, LOOKUP_ONLYCONVERTING);\n+\t\t  cp_finish_decl ($<ttype>7, $8, $5, 0, LOOKUP_ONLYCONVERTING);\n \t\t  resume_momentary ($<itype>6);\n \t\t  $$ = $<ttype>7; \n \t\t  if (TREE_CODE (TREE_TYPE ($$)) == ARRAY_TYPE)\n@@ -1730,7 +1730,7 @@ decl:\n \t\t{ tree d = get_decl_list ($1);\n \t\t  int yes = suspend_momentary ();\n \t\t  d = start_decl ($2, d, 0, NULL_TREE);\n-\t\t  finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  resume_momentary (yes);\n \t\t  if (IS_AGGR_TYPE_CODE (TREE_CODE ($1)))\n \t\t    note_got_semicolon ($1);\n@@ -1739,7 +1739,7 @@ decl:\n \t\t{ tree d = $1;\n \t\t  int yes = suspend_momentary ();\n \t\t  d = start_decl ($2, d, 0, NULL_TREE);\n-\t\t  finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n+\t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  resume_momentary (yes);\n \t\t  note_list_got_semicolon ($1);\n \t\t}\n@@ -1981,7 +1981,7 @@ initdcl0:\n \t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n-\t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n+\t\t{ cp_finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n \t\t  $$ = $<itype>5; }\n \t| declarator exception_specification_opt maybeasm maybe_attribute\n \t\t{ tree d;\n@@ -1998,7 +1998,7 @@ initdcl0:\n \t\t  $$ = suspend_momentary ();\n \t\t  d = start_decl ($<ttype>1, current_declspecs, 0, $2);\n \t\t  cplus_decl_attributes (d, $4, prefix_attributes);\n-\t\t  finish_decl (d, NULL_TREE, $3, 0, 0); }\n+\t\t  cp_finish_decl (d, NULL_TREE, $3, 0, 0); }\n \t;\n \n initdcl:\n@@ -2007,11 +2007,11 @@ initdcl:\n \t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n-\t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING); }\n+\t\t{ cp_finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING); }\n \t| declarator exception_specification_opt maybeasm maybe_attribute\n \t\t{ $<ttype>$ = start_decl ($<ttype>1, current_declspecs, 0, $2);\n \t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes);\n-\t\t  finish_decl ($<ttype>$, NULL_TREE, $3, 0, 0); }\n+\t\t  cp_finish_decl ($<ttype>$, NULL_TREE, $3, 0, 0); }\n \t;\n \n notype_initdcl0:\n@@ -2022,15 +2022,15 @@ notype_initdcl0:\n \t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n-\t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n+\t\t{ cp_finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n \t\t  $$ = $<itype>5; }\n \t| notype_declarator exception_specification_opt maybeasm maybe_attribute\n \t\t{ tree d;\n \t\t  current_declspecs = $<ttype>0;\n \t\t  $$ = suspend_momentary ();\n \t\t  d = start_decl ($<ttype>1, current_declspecs, 0, $2);\n \t\t  cplus_decl_attributes (d, $4, prefix_attributes);\n-\t\t  finish_decl (d, NULL_TREE, $3, 0, 0); }\n+\t\t  cp_finish_decl (d, NULL_TREE, $3, 0, 0); }\n \t;\n \n nomods_initdcl0:\n@@ -2041,15 +2041,15 @@ nomods_initdcl0:\n \t\t  cplus_decl_attributes ($<ttype>$, $4, prefix_attributes); }\n \t  init\n /* Note how the declaration of the variable is in effect while its init is parsed! */\n-\t\t{ finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n+\t\t{ cp_finish_decl ($<ttype>6, $7, $3, 0, LOOKUP_ONLYCONVERTING);\n \t\t  $$ = $<itype>5; }\n \t| notype_declarator exception_specification_opt maybeasm maybe_attribute\n \t\t{ tree d;\n \t\t  current_declspecs = NULL_TREE;\n \t\t  $$ = suspend_momentary ();\n \t\t  d = start_decl ($1, current_declspecs, 0, $2);\n \t\t  cplus_decl_attributes (d, $4, prefix_attributes);\n-\t\t  finish_decl (d, NULL_TREE, $3, 0, 0); }\n+\t\t  cp_finish_decl (d, NULL_TREE, $3, 0, 0); }\n \t;\n \n /* the * rules are dummies to accept the Apollo extended syntax"}, {"sha": "55846c3050c0f6a71757e93a6e2cedc1f714c909", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -2651,7 +2651,7 @@ expand_upcast_fixups (binfo, addr, orig_addr, vbase, t, vbase_offsets)\n \t      TREE_READONLY (nvtbl) = 0;\n \t      nvtbl = pushdecl (nvtbl);\n \t      init = NULL_TREE;\n-\t      finish_decl (nvtbl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n+\t      cp_finish_decl (nvtbl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n \t      DECL_VIRTUAL_P (nvtbl) = 1;\n \t      DECL_CONTEXT (nvtbl) = t;\n \t      init = build (MODIFY_EXPR, TREE_TYPE (nvtbl),"}, {"sha": "08657d432254475b1e364788b218854c9b8e2662", "filename": "gcc/cp/sig.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3417a046428f30f5e9be25bb24b03334a1f556b/gcc%2Fcp%2Fsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsig.c?ref=b3417a046428f30f5e9be25bb24b03334a1f556b", "patch": "@@ -1,5 +1,5 @@\n /* Functions dealing with signatures and signature pointers/references.\n-   Copyright (C) 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1995 Free Software Foundation, Inc.\n    Contributed by Gerald Baumgartner (gb@cs.purdue.edu)\n \n This file is part of GNU CC.\n@@ -650,7 +650,7 @@ build_signature_table_constructor (sig_ty, rhs)\n    as initialization expression, we don't need a new signature table\n    variable and just hand back the init expression.\n \n-   The declaration processing is done by hand instead of using `finish_decl'\n+   The declaration processing is done by hand instead of using `cp_finish_decl'\n    so that we can make signature pointers global variables instead of\n    static ones.  */\n "}]}