{"sha": "ce1e682ca21400d9b59f08f0416d96e0bac369d8", "node_id": "C_kwDOANBUbNoAKGNlMWU2ODJjYTIxNDAwZDliNTlmMDhmMDQxNmQ5NmUwYmFjMzY5ZDg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-04-05T13:46:36Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-04-05T13:47:39Z"}, "message": "[PATCH] RISC-V: Fix SEW64 of vrsub.vx runtime fail in RV32 system\n\nIt's quite obvious that the order of vrsub SEW64 is wrong.\n\ngcc/ChangeLog:\n\n\t* config/riscv/vector.md: Fix incorrect operand order.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/bug-23.C: New test.", "tree": {"sha": "836878328879802d9ce4e9e73b756f60ec697fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836878328879802d9ce4e9e73b756f60ec697fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce1e682ca21400d9b59f08f0416d96e0bac369d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1e682ca21400d9b59f08f0416d96e0bac369d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1e682ca21400d9b59f08f0416d96e0bac369d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1e682ca21400d9b59f08f0416d96e0bac369d8/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44e17b8d8999a658af9f86681504d74a119a5f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e17b8d8999a658af9f86681504d74a119a5f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e17b8d8999a658af9f86681504d74a119a5f6f"}], "stats": {"total": 437, "additions": 436, "deletions": 1}, "files": [{"sha": "0ecca98f20cd19c172b7486a05f49cc2d96f1ed4", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1e682ca21400d9b59f08f0416d96e0bac369d8/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1e682ca21400d9b59f08f0416d96e0bac369d8/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=ce1e682ca21400d9b59f08f0416d96e0bac369d8", "patch": "@@ -1981,7 +1981,7 @@\n \triscv_vector::neg_simm5_p (operands[4]),\n \t[] (rtx *operands, rtx boardcast_scalar) {\n \t  emit_insn (gen_pred_sub<mode> (operands[0], operands[1],\n-\t       operands[2], operands[3], boardcast_scalar, operands[5],\n+\t       operands[2], boardcast_scalar, operands[3], operands[5],\n \t       operands[6], operands[7], operands[8]));\n         }))\n     DONE;"}, {"sha": "061063bf44d4bbb235ace61101e95bf352fd3b0a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/bug-23.C", "status": "added", "additions": 435, "deletions": 0, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1e682ca21400d9b59f08f0416d96e0bac369d8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1e682ca21400d9b59f08f0416d96e0bac369d8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fbug-23.C?ref=ce1e682ca21400d9b59f08f0416d96e0bac369d8", "patch": "@@ -0,0 +1,435 @@\n+/* { dg-do run { target { riscv_vector } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include<cstdalign>\n+#include<cmath>\n+#include<cstddef>\n+#include<cstdint>\n+#include<iomanip>\n+#include<ios>\n+#include<iostream>\n+#include<memory>\n+#include<type_traits>\n+#include<riscv_vector.h>\n+using std::addressof;\n+using std::cerr;\n+using std::endl;\n+using std::int8_t;\n+using std::int16_t;\n+using std::int32_t;\n+using std::int64_t;\n+using std::uint8_t;\n+using std::uint16_t;\n+using std::uint32_t;\n+using std::uint64_t;\n+using std::ptrdiff_t;\n+using std::size_t;\n+using float16_t = _Float16;\n+using float32_t = float;\n+using float64_t = double;\n+\n+template<class T, class T2>\n+constexpr T uint_to_float(T2 val) noexcept\n+{\n+  return *reinterpret_cast<T*>(&val);\n+}\n+\n+constexpr const auto &f16(uint_to_float<float16_t, uint16_t>);\n+constexpr const auto &f32(uint_to_float<float32_t, uint32_t>);\n+constexpr const auto &f64(uint_to_float<float64_t, uint64_t>);\n+\n+template<class T>\n+struct To_uint\n+{\n+  using type = std::conditional_t<\n+    sizeof(T) == 1, uint8_t, std::conditional_t<\n+      sizeof(T) == 2, uint16_t, std::conditional_t<\n+        sizeof(T) == 4, uint32_t, std::conditional_t<\n+          sizeof(T) == 8, uint64_t, void\n+        >\n+      >\n+    >\n+  >;\n+};\n+\n+// isnan() does not support half type\n+template<class T>\n+struct To_float\n+{\n+  using type = std::conditional_t<\n+    std::is_same<T, float16_t>::value, float, std::conditional_t<\n+      std::is_same<T, float32_t>::value, float, std::conditional_t<\n+        std::is_same<T, float64_t>::value, double, float\n+      >\n+    >\n+  >;\n+};\n+\n+template<class T>\n+using To_uint_t = typename To_uint<T>::type;\n+\n+template<class T>\n+using To_isnan_float = typename To_float<T>::type;\n+\n+template <class T>\n+void print_float(std::ostream &os, T val)\n+{\n+  using std::setw;\n+  os << std::hex << std::setfill('0') << setw(sizeof(T) * 2) << *reinterpret_cast<To_uint_t<T>*>(addressof(val)) << setw(0) << std::dec;\n+}\n+\n+template <class T>\n+bool __attribute__((noinline))\n+check(const T *a, const T *b, size_t size)\n+{\n+  bool rv = true;\n+  for (size_t i = 0; i < (size / sizeof(T)); ++i) {\n+    if (reinterpret_cast<const To_uint_t<T> *>(a)[i] ==\n+        reinterpret_cast<const To_uint_t<T> *>(b)[i])\n+      continue;\n+    // floating negative zero == positive zero\n+    if ((std::is_floating_point_v<T> || std::is_same<T, float16_t>::value) &&\n+        (a[i] == b[i]))\n+      continue;\n+    // if both result are NaN, return true\n+    if ((std::is_same<T, float16_t>::value || std::is_floating_point_v<T>) &&\n+         std::isnan(static_cast<To_isnan_float<T>>(a[i])) &&\n+         std::isnan(static_cast<To_isnan_float<T>>(b[i])))\n+      continue;\n+\n+    if (std::is_same<T, float16_t>::value) {\n+      cerr << std::hex << std::setfill('0') << std::setw(sizeof(T) * 2) << \"[\"\n+           << i\n+           << \"] result/golden:\" << reinterpret_cast<const To_uint_t<T> *>(a)[i]\n+           << \" != \" << reinterpret_cast<const To_uint_t<T> *>(b)[i]\n+           << std::setw(0) << std::dec << endl;\n+    } else if constexpr (std::is_floating_point_v<T>) {\n+      cerr << \"[\" << i << \"] result/golden:\" << a[i] << \"(\";\n+      print_float(cerr, a[i]);\n+      cerr << \") != \" << b[i] << \"(\";\n+      print_float(cerr, b[i]);\n+      cerr << \")\" << endl;\n+    } else if constexpr (std::is_unsigned_v<T>) {\n+      cerr << \"[\" << i << \"] result/golden: \" << static_cast<uintmax_t>(a[i])\n+           << \" != \" << static_cast<uintmax_t>(b[i]) << endl;\n+    } else {\n+      cerr << \"[\" << i << \"] result/golden:\" << static_cast<intmax_t>(a[i])\n+           << \" != \" << static_cast<intmax_t>(b[i]) << endl;\n+    }\n+    rv = false;\n+  }\n+  return rv;\n+}\n+\n+template <class T>\n+bool __attribute__((noinline))\n+check(const T a, const T golden)\n+{\n+  return check(addressof(a), addressof(golden), sizeof(T));\n+}\n+\n+int main()\n+{\n+int return_value = 0;\n+\n+size_t var_135 = 8u;\n+int64_t var_134 [] = {5319067641524761504};\n+size_t var_132 = 8u;\n+int64_t var_131 [] = {-2042112153301316246};\n+size_t var_129 = 2u;\n+uint8_t var_128 [] = {225u, 96u};\n+size_t var_126 = 1u;\n+int8_t var_125 [] = {61};\n+size_t var_123 = 8u;\n+int64_t var_122 [] = {1498010109281213184};\n+size_t var_120 = 8u;\n+uint32_t var_119 [] = {3077557042u, 4186139873u};\n+uint8_t var_117 [] = {223u, 9u};\n+uint8_t var_116 [] = {113u, 240u};\n+int16_t var_115 [] = {-24455, -11411};\n+int16_t var_114 [] = {-24094, -10755};\n+uint32_t var_113 [] = {2735010713u, 1592352930u};\n+uint32_t var_112 [] = {1541161051u, 1910154620u};\n+uint32_t var_111 [] = {3389314231u, 1014755114u};\n+int32_t var_110 [] = {-1621904547, -1040980082};\n+int32_t var_109 [] = {122711676, 407948494};\n+int64_t var_108 [] = {4536618263518479242};\n+int64_t var_107 [] = {1448075913413164717};\n+uint32_t var_106 [] = {3077557042u, 4186139873u};\n+uint32_t var_105 [] = {2817571044u, 2761811578u};\n+int32_t var_104 [] = {569342414, 172300542};\n+uint8_t var_103 [] = {206u, 239u};\n+int8_t var_102 [] = {52};\n+int8_t var_101 [] = {61};\n+int8_t var_100 [] = {21};\n+uint16_t var_99 [] = {33259u};\n+uint16_t var_98 [] = {37610u};\n+int64_t var_97 [] = {-2042112153301316246, -4719722743472540442};\n+int32_t var_96 [] = {-1613882636, 1783704109};\n+int64_t var_95 [] = {1806342126325465770, 2692019032660383081};\n+int64_t var_94 [] = {-5319067641524761504, -5232821194264970572};\n+uint16_t var_93 [] = {25960u, 64060u};\n+uint16_t var_92 [] = {46113u, 46688u};\n+uint8_t var_91 [] = {50u, 2u};\n+uint32_t var_90 [] = {2713597456u, 1668658475u};\n+int64_t var_89 [] = {627921155655533422};\n+int64_t var_88 [] = {5582011634372815520, 1817371833675277959};\n+int64_t var_87 [] = {-6317261412230281440, 21956431008910011};\n+int64_t var_86 [] = {1178141186383409279, 5961794512723147693};\n+int64_t var_85 [] = {227003041032385881, 4322780385860234349};\n+int64_t var_84 [] = {-5019114150361525821};\n+int32_t var_83 [] = {-1971716705};\n+int32_t var_82 [] = {931599149};\n+int16_t var_81 [] = {30933, 23703};\n+int16_t var_80 [] = {29162, -27337};\n+uint8_t var_79 [] = {68u, 91u};\n+uint8_t var_78 [] = {214u, 150u};\n+uint8_t var_77 [] = {242u, 207u};\n+size_t var_76 = 0u;\n+int32_t var_75 = 723490258;\n+uint32_t var_74 = 884830447u;\n+uint8_t var_73 = 144u;\n+int32_t var_72 = -1102902389;\n+int8_t var_71 = -121;\n+uint8_t var_70 = 79u;\n+__riscv_vsetvl_e8mf8(2);\n+vuint8mf8_t var_21 = __riscv_vle8_v_u8mf8(var_117, 2);\n+// 223, 9\n+\n+vuint8mf8_t var_22 = __riscv_vle8_v_u8mf8(var_116, 2);\n+// 113, 240\n+\n+vint16mf4_t var_23 = __riscv_vle16_v_i16mf4(var_115, 2);\n+// -24455, -11411\n+\n+vint16mf4_t var_24 = __riscv_vle16_v_i16mf4(var_114, 2);\n+// -24094, -10755\n+\n+vuint32mf2_t var_26 = __riscv_vle32_v_u32mf2(var_113, 2);\n+// 2735010713, 1592352930\n+\n+vuint32mf2_t var_27 = __riscv_vle32_v_u32mf2(var_112, 2);\n+// 1541161051, 1910154620\n+\n+vint32mf2_t var_29 = __riscv_vle32_v_i32mf2(var_110, 2);\n+// -1621904547, -1040980082\n+\n+vint32mf2_t var_30 = __riscv_vle32_v_i32mf2(var_109, 2);\n+// 122711676, 407948494\n+\n+__riscv_vsetvl_e64m1(1);\n+vint64m1_t var_31 = __riscv_vle64_v_i64m1(var_108, 1);\n+// 4536618263518479242\n+\n+__riscv_vsetvl_e32mf2(2);\n+vuint32mf2_t var_34 = __riscv_vle32_v_u32mf2(var_106, 2);\n+// 3077557042, 4186139873\n+\n+vuint32mf2_t var_35 = __riscv_vle32_v_u32mf2(var_105, 2);\n+// 2817571044, 2761811578\n+\n+vint32mf2_t var_36 = __riscv_vle32_v_i32mf2(var_104, 2);\n+// 569342414, 172300542\n+\n+__riscv_vsetvl_e8m8(2);\n+vuint8m8_t var_37 = __riscv_vle8_v_u8m8(var_103, 2);\n+// 206, 239\n+\n+__riscv_vsetvl_e8mf8(1);\n+vint8mf8_t var_41 = __riscv_vle8_v_i8mf8(var_101, 1);\n+// 61\n+\n+vint8mf8_t var_42 = __riscv_vle8_v_i8mf8(var_100, 1);\n+// 21\n+\n+vuint16mf4_t var_43 = __riscv_vle16_v_u16mf4(var_99, 1);\n+// 33259\n+\n+vuint16mf4_t var_44 = __riscv_vle16_v_u16mf4(var_98, 1);\n+// 37610\n+\n+__riscv_vsetvl_e64m4(2);\n+vint64m4_t var_45 = __riscv_vle64_v_i64m4(var_97, 2);\n+// -2042112153301316246, -4719722743472540442\n+\n+vint32m2_t var_46 = __riscv_vle32_v_i32m2(var_96, 2);\n+// -1613882636, 1783704109\n+\n+__riscv_vsetvl_e64m1(2);\n+vint64m1_t var_48 = __riscv_vle64_v_i64m1(var_95, 2);\n+// 1806342126325465770, 2692019032660383081\n+\n+vint64m1_t var_49 = __riscv_vle64_v_i64m1(var_94, 2);\n+// -5319067641524761504, -5232821194264970572\n+\n+vuint16mf4_t var_50 = __riscv_vle16_v_u16mf4(var_93, 2);\n+// 25960, 64060\n+\n+vuint16mf4_t var_51 = __riscv_vle16_v_u16mf4(var_92, 2);\n+// 46113, 46688\n+\n+vuint32mf2_t var_53 = __riscv_vle32_v_u32mf2(var_90, 2);\n+// 2713597456, 1668658475\n+\n+__riscv_vsetvl_e64m4(2);\n+vint64m4_t var_55 = __riscv_vle64_v_i64m4(var_88, 2);\n+// 5582011634372815520, 1817371833675277959\n+\n+vint64m4_t var_56 = __riscv_vle64_v_i64m4(var_87, 2);\n+// -6317261412230281440, 21956431008910011\n+\n+vint64m4_t var_57 = __riscv_vle64_v_i64m4(var_86, 2);\n+// 1178141186383409279, 5961794512723147693\n+\n+vint64m4_t var_58 = __riscv_vle64_v_i64m4(var_85, 2);\n+// 227003041032385881, 4322780385860234349\n+\n+__riscv_vsetvl_e32mf2(1);\n+vint32mf2_t var_61 = __riscv_vle32_v_i32mf2(var_83, 1);\n+// -1971716705\n+\n+vint32mf2_t var_62 = __riscv_vle32_v_i32mf2(var_82, 1);\n+// 931599149\n+\n+__riscv_vsetvl_e16mf4(2);\n+vint16mf4_t var_65 = __riscv_vle16_v_i16mf4(var_81, 2);\n+// 30933, 23703\n+\n+vint16mf4_t var_66 = __riscv_vle16_v_i16mf4(var_80, 2);\n+// 29162, -27337\n+\n+vuint8mf8_t var_67 = __riscv_vle8_v_u8mf8(var_79, 2);\n+// 68, 91\n+\n+vuint8mf8_t var_68 = __riscv_vle8_v_u8mf8(var_78, 2);\n+// 214, 150\n+\n+vuint8mf8_t var_69 = __riscv_vle8_v_u8mf8(var_77, 2);\n+// 242, 207\n+\n+vbool64_t var_20 = __riscv_vmsbc_vv_i16mf4_b64(var_23, var_24, 2);\n+// 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+vbool64_t var_25 = __riscv_vmsbc_vv_i32mf2_b64(var_29, var_30, 2);\n+// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+vbool64_t var_33 = __riscv_vmadc_vx_i32mf2_b64(var_36, var_72, 2);\n+// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e8m8(2);\n+uint8_t var_15 = __riscv_vmv_x_s_u8m8_u8(var_37);\n+// 206\n+\n+__riscv_vsetvl_e8mf8(1);\n+vbool64_t var_39 = __riscv_vmsge_vx_i8mf8_b64(var_42, var_71, 1);\n+// 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+vbool64_t var_38 = __riscv_vmsne_vv_u16mf4_b64(var_43, var_44, 1);\n+// 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e64m4(2);\n+//int64_t var_13;\n+//__riscv_vse64_v_i64m4 (&var_13, var_45, 1);\n+int64_t var_13 = __riscv_vmv_x_s_i64m4_i64(var_45);\n+// -2042112153301316246\n+\n+vbool16_t var_12 = __riscv_vmsgt_vx_i32m2_b16(var_46, var_75, 2);\n+// 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e16mf4(2);\n+vbool64_t var_47 = __riscv_vmsne_vv_u16mf4_b64(var_50, var_51, 2);\n+// 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e32mf2(1);\n+vbool64_t var_59 = __riscv_vmsne_vv_i32mf2_b64(var_61, var_62, 1);\n+// 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e8mf8(2);\n+vbool64_t var_64 = __riscv_vmsne_vv_u8mf8_b64(var_67, var_68, 2);\n+// 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+vbool64_t var_63 = __riscv_vmseq_vx_u8mf8_b64(var_69, var_70, 2);\n+// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+vuint8mf8_t var_19 = __riscv_vsub_vx_u8mf8_tumu(var_20, var_21, var_22, var_73, 2);\n+// 225, 96\n+\n+vuint32mf2_t var_16 = __riscv_vssubu_vx_u32mf2_tumu(var_33, var_34, var_35, var_74, 2);\n+// 3077557042, 4186139873\n+\n+__riscv_vsetvl_e64m4(2);\n+vint64m4_t var_5 = __riscv_vor_vv_i64m4_tumu(var_12, var_56, var_57, var_58, 2);\n+// -6317261412230281440, 8934470820093100013\n+\n+__riscv_vsetvl_e64m1(2);\n+vint64m1_t var_11 = __riscv_vneg_v_i64m1_tumu(var_47, var_48, var_49, 2);\n+// 5319067641524761504, 5232821194264970572\n+\n+vbool64_t var_2 = __riscv_vmsne_vv_i16mf4_b64_mu(var_63, var_64, var_65, var_66, 2);\n+// 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e64m4(2);\n+int64_t var_4 = __riscv_vmv_x_s_i64m4_i64(var_5);\n+//int64_t var_4;\n+//__riscv_vse64_v_i64m4 (&var_4, var_5, 1);\n+// -6317261412230281440\n+\n+__riscv_vsetvl_e64m1(2);\n+vint64m1_t var_1 = __riscv_vmacc_vv_i64m1_tumu(var_2, var_11, var_11, var_11, 2);\n+// -9179520755515992160, 6485801283920106460\n+\n+//vint64m1_t tmp_0 = __riscv_vmv_v_x_i64m1 (var_4, 2);\n+vint64m1_t var_0 = __riscv_vrsub_vx_i64m1_tumu(var_2, var_1, var_1, var_4, 2);\n+// 2862259343285710720, 5643681377559163716\n+\n+__riscv_vsetvl_e64m1(1);\n+vint64m1_t var_3 = __riscv_vslidedown_vx_i64m1_tumu(var_59, var_0, var_11, var_76, 1);\n+// 5319067641524761504\n+\n+__riscv_vsetvl_e64m4(2);\n+vint64m1_t var_6 = __riscv_vredsum_vs_i64m4_i64m1_tu(var_0, var_55, var_11, 2);\n+// -5728292964136696633\n+\n+__riscv_vsetvl_e64m1(2);\n+vbool64_t var_8 = __riscv_vmadc_vv_i64m1_b64(var_0, var_11, 2);\n+// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e64m1(1);\n+vint64m1_t var_17 = __riscv_vmul_vv_i64m1(var_0, var_31, 1);\n+// 1498010109281213184\n+\n+__riscv_vse64_v_i64m1(var_84, var_3, 1);\n+vint64m1_t var_7 = __riscv_vmv_s_x_i64m1_tu(var_6, var_13, 1);\n+// -2042112153301316246, 5643681377559163716\n+\n+__riscv_vsetvl_e32mf2(2);\n+vuint32mf2_t var_9 = __riscv_vdivu_vv_u32mf2_tumu(var_8, var_16, var_16, var_53, 2);\n+// 3077557042, 4186139873\n+\n+vuint8mf8_t var_10 = __riscv_vmerge_vxm_u8mf8(var_19, var_15, var_8, 2);\n+// 225, 96\n+\n+__riscv_vsetvl_e64m1(1);\n+__riscv_vse64_v_i64m1(var_107, var_17, 1);\n+if(!check(var_84, var_134, var_135)) {cerr << \"check 133 fails\" << endl; return_value = 1;}\n+__riscv_vse64_v_i64m1(var_89, var_7, 1);\n+vbool64_t var_14 = __riscv_vmsgeu_vv_u32mf2_b64_mu(var_38, var_39, var_9, var_16, 1);\n+// 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+\n+__riscv_vsetvl_e32mf2(2);\n+vuint32mf2_t var_18 = __riscv_vmacc_vv_u32mf2_tumu(var_25, var_9, var_26, var_27, 2);\n+// 3077557042, 4186139873\n+\n+__riscv_vse8_v_u8mf8(var_91, var_10, 2);\n+if(!check(var_107, var_122, var_123)) {cerr << \"check 121 fails\" << endl; return_value = 1;}\n+if(!check(var_89, var_131, var_132)) {cerr << \"check 130 fails\" << endl; return_value = 1;}\n+__riscv_vsetvl_e8mf8(1);\n+__riscv_vse8_v_i8mf8_m(var_14, var_102, var_41, 1);\n+__riscv_vsetvl_e32mf2(2);\n+__riscv_vse32_v_u32mf2(var_111, var_18, 2);\n+if(!check(var_91, var_128, var_129)) {cerr << \"check 127 fails\" << endl; return_value = 1;}\n+if(!check(var_102, var_125, var_126)) {cerr << \"check 124 fails\" << endl; return_value = 1;}\n+if(!check(var_111, var_119, var_120)) {cerr << \"check 118 fails\" << endl; return_value = 1;}\n+if (return_value)\n+__builtin_abort ();\n+}"}]}