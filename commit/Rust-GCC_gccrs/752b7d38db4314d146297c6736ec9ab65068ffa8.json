{"sha": "752b7d38db4314d146297c6736ec9ab65068ffa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyYjdkMzhkYjQzMTRkMTQ2Mjk3YzY3MzZlYzlhYjY1MDY4ZmZhOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-05-19T04:18:05Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-05-19T04:18:05Z"}, "message": "re PR middle-end/30250 (Evaluate lgamma/gamma at compile-time)\n\n\tPR middle-end/30250\n\t* builtins.c (do_mpfr_lgamma_r): New.\n\t(fold_builtin_2): Handle builtin gamma_r/lgamma_r.\n\t* tree.h (CASE_FLT_FN_REENT): New.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-math-2.c: Add gamma_r/lgamma_r tests.\n\t* gcc.dg/torture/builtin-math-4.c: Likewise.\n\nFrom-SVN: r124849", "tree": {"sha": "f61dbc1f8b3d760ebbede40c819cb5f93b517e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f61dbc1f8b3d760ebbede40c819cb5f93b517e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/752b7d38db4314d146297c6736ec9ab65068ffa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752b7d38db4314d146297c6736ec9ab65068ffa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752b7d38db4314d146297c6736ec9ab65068ffa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752b7d38db4314d146297c6736ec9ab65068ffa8/comments", "author": null, "committer": null, "parents": [{"sha": "0470f5730bb47ea53e379beda804f6eb8c57f735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0470f5730bb47ea53e379beda804f6eb8c57f735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0470f5730bb47ea53e379beda804f6eb8c57f735"}], "stats": {"total": 172, "additions": 171, "deletions": 1}, "files": [{"sha": "78ea258a25f79450852aaa2600ef48b76ebe7726", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=752b7d38db4314d146297c6736ec9ab65068ffa8", "patch": "@@ -1,3 +1,10 @@\n+2007-05-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/30250\n+\t* builtins.c (do_mpfr_lgamma_r): New.\n+\t(fold_builtin_2): Handle builtin gamma_r/lgamma_r.\n+\t* tree.h (CASE_FLT_FN_REENT): New.\n+\n 2007-05-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* dwarf2out.c (print_die): Use '%ld' not '%lu' to print a 'long'."}, {"sha": "9a987ea180931bfcfff0effea558a1c8645af3f8", "filename": "gcc/builtins.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=752b7d38db4314d146297c6736ec9ab65068ffa8", "patch": "@@ -236,6 +236,7 @@ static tree do_mpfr_bessel_n (tree, tree, tree,\n \t\t\t      int (*)(mpfr_ptr, long, mpfr_srcptr, mp_rnd_t),\n \t\t\t      const REAL_VALUE_TYPE *, bool);\n static tree do_mpfr_remquo (tree, tree, tree);\n+static tree do_mpfr_lgamma_r (tree, tree, tree);\n #endif\n \n /* Return true if NODE should be considered for inline expansion regardless\n@@ -9935,6 +9936,13 @@ fold_builtin_2 (tree fndecl, tree arg0, tree arg1, bool ignore)\n           && validate_arg(arg1, REAL_TYPE))\n         return do_mpfr_arg2 (arg0, arg1, type, mpfr_remainder);\n     break;\n+\n+    CASE_FLT_FN_REENT (BUILT_IN_GAMMA): /* GAMMA_R */\n+    CASE_FLT_FN_REENT (BUILT_IN_LGAMMA): /* LGAMMA_R */\n+      if (validate_arg (arg0, REAL_TYPE)\n+\t  && validate_arg(arg1, POINTER_TYPE))\n+\treturn do_mpfr_lgamma_r (arg0, arg1, type);\n+    break;\n #endif\n \n     CASE_FLT_FN (BUILT_IN_ATAN2):\n@@ -12692,4 +12700,67 @@ do_mpfr_remquo (tree arg0, tree arg1, tree arg_quo)\n     }\n   return result;\n }\n+\n+/* If ARG is a REAL_CST, call mpfr_lgamma() on it and return the\n+   resulting value as a tree with type TYPE.  The mpfr precision is\n+   set to the precision of TYPE.  We assume that this mpfr function\n+   returns zero if the result could be calculated exactly within the\n+   requested precision.  In addition, the integer pointer represented\n+   by ARG_SG will be dereferenced and set to the appropriate signgam\n+   (-1,1) value.  */\n+\n+static tree\n+do_mpfr_lgamma_r (tree arg, tree arg_sg, tree type)\n+{\n+  tree result = NULL_TREE;\n+\n+  STRIP_NOPS (arg);\n+  \n+  /* To proceed, MPFR must exactly represent the target floating point\n+     format, which only happens when the target base equals two.  Also\n+     verify ARG is a constant and that ARG_SG is an int pointer.  */\n+  if (REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2\n+      && TREE_CODE (arg) == REAL_CST && !TREE_OVERFLOW (arg)\n+      && TREE_CODE (TREE_TYPE (arg_sg)) == POINTER_TYPE\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (arg_sg))) == integer_type_node)\n+    {\n+      const REAL_VALUE_TYPE *const ra = TREE_REAL_CST_PTR (arg);\n+\n+      /* In addition to NaN and Inf, the argument cannot be zero or a\n+\t negative integer.  */\n+      if (!real_isnan (ra) && !real_isinf (ra)\n+\t  && ra->cl != rvc_zero\n+\t  && !(real_isneg(ra) && real_isinteger(ra, TYPE_MODE (type))))\n+        {\n+\t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n+\t  int inexact, sg;\n+\t  mpfr_t m;\n+\t  tree result_lg;\n+\n+\t  mpfr_init2 (m, prec);\n+\t  mpfr_from_real (m, ra, GMP_RNDN);\n+\t  mpfr_clear_flags ();\n+\t  inexact = mpfr_lgamma (m, &sg, m, GMP_RNDN);\n+\t  result_lg = do_mpfr_ckconv (m, type, inexact);\n+\t  mpfr_clear (m);\n+\t  if (result_lg)\n+\t    {\n+\t      tree result_sg;\n+\n+\t      /* Dereference the arg_sg pointer argument.  */\n+\t      arg_sg = build_fold_indirect_ref (arg_sg);\n+\t      /* Assign the signgam value into *arg_sg. */\n+\t      result_sg = fold_build2 (MODIFY_EXPR,\n+\t\t\t\t       TREE_TYPE (arg_sg), arg_sg,\n+\t\t\t\t       build_int_cst (NULL, sg));\n+\t      TREE_SIDE_EFFECTS (result_sg) = 1;\n+\t      /* Combine the signgam assignment with the lgamma result.  */\n+\t      result = non_lvalue (fold_build2 (COMPOUND_EXPR, type,\n+\t\t\t\t\t\tresult_sg, result_lg));\n+\t    }\n+\t}\n+    }\n+\n+  return result;\n+}\n #endif"}, {"sha": "4cf062c6d1d00ff3614b3be0ec97061604096d61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=752b7d38db4314d146297c6736ec9ab65068ffa8", "patch": "@@ -1,3 +1,8 @@\n+2007-05-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-math-2.c: Add gamma_r/lgamma_r tests.\n+\t* gcc.dg/torture/builtin-math-4.c: Likewise.\n+\n 2007-05-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/31964"}, {"sha": "214a3ef7c0436306591e1935b5d1e3440cdcdd65", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-2.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c?ref=752b7d38db4314d146297c6736ec9ab65068ffa8", "patch": "@@ -49,6 +49,13 @@ extern void fool (long double);\n   fool (__builtin_remquol (ARG1##L, ARG2##L, &quo)); \\\n } while (0)\n \n+#define TESTIT_REENT(FUNC,ARG1) do { \\\n+  int sg; \\\n+  foof (__builtin_##FUNC##f_r (ARG1##F, &sg)); \\\n+  foo (__builtin_##FUNC##_r (ARG1, &sg)); \\\n+  fool (__builtin_##FUNC##l_r (ARG1##L, &sg)); \\\n+} while (0)\n+\n void bar()\n {\n   /* An argument of NaN is not evaluated at compile-time.  */\n@@ -266,6 +273,21 @@ void bar()\n   TESTIT2 (remainder, 1.0, -0.0);\n   TESTIT2 (drem, 1.0, 0.0);\n   TESTIT2 (drem, 1.0, -0.0);\n+\n+  /* The argument to lgamma* cannot be zero or a negative integer.  */\n+  TESTIT_REENT (lgamma, -4.0); /* lgamma_r */\n+  TESTIT_REENT (lgamma, -3.0); /* lgamma_r */\n+  TESTIT_REENT (lgamma, -2.0); /* lgamma_r */\n+  TESTIT_REENT (lgamma, -1.0); /* lgamma_r */\n+  TESTIT_REENT (lgamma, -0.0); /* lgamma_r */\n+  TESTIT_REENT (lgamma, 0.0); /* lgamma_r */\n+  \n+  TESTIT_REENT (gamma, -4.0); /* gamma_r */\n+  TESTIT_REENT (gamma, -3.0); /* gamma_r */\n+  TESTIT_REENT (gamma, -2.0); /* gamma_r */\n+  TESTIT_REENT (gamma, -1.0); /* gamma_r */\n+  TESTIT_REENT (gamma, -0.0); /* gamma_r */\n+  TESTIT_REENT (gamma, 0.0); /* gamma_r */\n }\n \n /* { dg-final { scan-tree-dump-times \"exp2 \" 9 \"original\" } } */\n@@ -340,4 +362,10 @@ void bar()\n /* { dg-final { scan-tree-dump-times \"drem \" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"dremf\" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"dreml\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"lgamma_r \" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"lgammaf_r\" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"lgammal_r\" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"_gamma_r \" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"_gammaf_r\" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"_gammal_r\" 6 \"original\" } } */\n /* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "99307dd357ce06641a1cbac9414c9dd93f9a5b29", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-4.c", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-4.c?ref=752b7d38db4314d146297c6736ec9ab65068ffa8", "patch": "@@ -103,6 +103,44 @@ extern void link_error(int);\n     link_error(__LINE__); \\\n   } while (0)\n \n+/* Test that FUNC(ARG,&SG) == (RES) && SG == RES_SG.  */\n+#define TESTIT_LGAMMA_REENT(FUNC,ARG,RES,RES_SG) do { \\\n+  int sg; \\\n+  sg = 123; \\\n+  if (__builtin_##FUNC##f_r(ARG##F,&sg) != RES##F \\\n+      || sg != RES_SG \\\n+      || CKSGN_F(__builtin_##FUNC##f_r(ARG##F,&sg),RES##F)) \\\n+    link_error(__LINE__); \\\n+  sg = 123; \\\n+  if (__builtin_##FUNC##_r(ARG,&sg) != RES \\\n+      || sg != RES_SG \\\n+      || CKSGN(__builtin_##FUNC##_r(ARG,&sg),RES)) \\\n+    link_error(__LINE__); \\\n+  sg = 123; \\\n+  if (__builtin_##FUNC##l_r(ARG##L,&sg) != RES##L \\\n+      || sg != RES_SG \\\n+      || CKSGN_L(__builtin_##FUNC##l_r(ARG##L,&sg),RES##L)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+/* Range test, check that (LOW) < FUNC(ARG,&SG) < (HI), and also test\n+   that SG == RES_SG.  */\n+#define TESTIT_LGAMMA_REENT_R(FUNC,ARG,LOW,HI,RES_SG) do { \\\n+  int sg; \\\n+  sg = 123; \\\n+  if (__builtin_##FUNC##f_r(ARG,&sg) <= (LOW) || __builtin_##FUNC##f_r(ARG,&sg) >= (HI) \\\n+      || sg != RES_SG) \\\n+    link_error(__LINE__); \\\n+  sg = 123; \\\n+  if (__builtin_##FUNC##_r(ARG,&sg) <= (LOW) || __builtin_##FUNC##_r(ARG,&sg) >= (HI) \\\n+      || sg != RES_SG) \\\n+    link_error(__LINE__); \\\n+  sg = 123; \\\n+  if (__builtin_##FUNC##l_r(ARG,&sg) <= (LOW) || __builtin_##FUNC##l_r(ARG,&sg) >= (HI) \\\n+      || sg != RES_SG) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n int main (void)\n {\n #ifdef __OPTIMIZE__\n@@ -249,7 +287,27 @@ int main (void)\n     MAXIT(remquol, -(__INT_MAX__+1.0L), 0);\n     MAXIT(remquol, -(__INT_MAX__+2.0L), -1);\n   }\n-#endif\n \n+  /* These tests rely on propagating the variable sg which contains\n+     signgam.  This happens only when optimization is turned on.  */\n+  TESTIT_LGAMMA_REENT_R (lgamma, -2.5, -0.06, -0.05, -1); /* lgamma_r(-2.5) == -0.056... */\n+  TESTIT_LGAMMA_REENT_R (lgamma, -1.5, 0.86, 0.87, 1); /* lgamma_r(-1.5) == 0.860... */\n+  TESTIT_LGAMMA_REENT_R (lgamma, -0.5, 1.26, 1.27, -1); /* lgamma_r(-0.5) == 1.265... */\n+  TESTIT_LGAMMA_REENT_R (lgamma, 0.5, 0.57, 0.58, 1); /* lgamma_r(0.5) == 0.572... */\n+  TESTIT_LGAMMA_REENT (lgamma, 1.0, 0.0, 1); /* lgamma_r(1) == 0 */\n+  TESTIT_LGAMMA_REENT_R (lgamma, 1.5, -0.13, -0.12, 1); /* lgamma_r(1.5) == -0.120... */\n+  TESTIT_LGAMMA_REENT (lgamma, 2.0, 0.0, 1); /* lgamma_r(2) == 0 */\n+  TESTIT_LGAMMA_REENT_R (lgamma, 2.5, 0.28, 0.29, 1); /* lgamma_r(2.5) == 0.284... */\n+\n+  TESTIT_LGAMMA_REENT_R (gamma, -2.5, -0.06, -0.05, -1); /* gamma_r(-2.5) == -0.056... */\n+  TESTIT_LGAMMA_REENT_R (gamma, -1.5, 0.86, 0.87, 1); /* gamma_r(-1.5) == 0.860... */\n+  TESTIT_LGAMMA_REENT_R (gamma, -0.5, 1.26, 1.27, -1); /* gamma_r(-0.5) == 1.265... */\n+  TESTIT_LGAMMA_REENT_R (gamma, 0.5, 0.57, 0.58, 1); /* gamma_r(0.5) == 0.572... */\n+  TESTIT_LGAMMA_REENT (gamma, 1.0, 0.0, 1); /* gamma_r(1) == 0 */\n+  TESTIT_LGAMMA_REENT_R (gamma, 1.5, -0.13, -0.12, 1); /* gamma_r(1.5) == -0.120... */\n+  TESTIT_LGAMMA_REENT (gamma, 2.0, 0.0, 1); /* gamma_r(2) == 0 */\n+  TESTIT_LGAMMA_REENT_R (gamma, 2.5, 0.28, 0.29, 1); /* gamma_r(2.5) == 0.284... */\n+#endif\n+  \n   return 0;\n }"}, {"sha": "0d31884ba27d6232cdf38ecc97f47281e1c8770e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/752b7d38db4314d146297c6736ec9ab65068ffa8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=752b7d38db4314d146297c6736ec9ab65068ffa8", "patch": "@@ -273,6 +273,7 @@ extern const char * built_in_names[(int) END_BUILTINS];\n #define BUILTIN_ROOT_P(FN) (BUILTIN_SQRT_P (FN) || BUILTIN_CBRT_P (FN))\n \n #define CASE_FLT_FN(FN) case FN: case FN##F: case FN##L\n+#define CASE_FLT_FN_REENT(FN) case FN##_R: case FN##F_R: case FN##L_R\n #define CASE_INT_FN(FN) case FN: case FN##L: case FN##LL\n \n /* An array of _DECL trees for the above.  */"}]}