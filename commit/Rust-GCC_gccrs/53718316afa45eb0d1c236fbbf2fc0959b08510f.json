{"sha": "53718316afa45eb0d1c236fbbf2fc0959b08510f", "node_id": "C_kwDOANBUbNoAKDUzNzE4MzE2YWZhNDVlYjBkMWMyMzZmYmJmMmZjMDk1OWIwODUxMGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-04T08:36:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-04T08:36:24Z"}, "message": "i386: Fix up *_doubleword_mask [PR105825]\n\nMy PR105778 patch apparently broke the following testcase.\nIf the mask has the top relevant bit clear (i.e. we know we are shifting\nby 0 to wordsize bits - 1) but doesn't have all the bits below it set,\nwe emit andsi3 before the shift sequence.  When the pattern had :SI\nfor that operand, that was just fine, but now that it can be also HImode\nor for -m64 DImode, we either can use a lowpart or paradoxical subreg to\nSImode as the following patch, or we use a HImode or DImode AND.\nThis patch does the latter.\n\n2022-06-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/105825\n\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask,\n\t*<insn><dwi>3_doubleword_mask): If top bit of mask is clear, but lower\n\tbits of mask aren't all set, use operands[2] mode for the AND\n\toperation instead of always SImode.\n\n\t* gcc.dg/pr105825.c: New test.", "tree": {"sha": "021c2e48ff76804ed24353a4cc568357139d1bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021c2e48ff76804ed24353a4cc568357139d1bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53718316afa45eb0d1c236fbbf2fc0959b08510f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53718316afa45eb0d1c236fbbf2fc0959b08510f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53718316afa45eb0d1c236fbbf2fc0959b08510f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53718316afa45eb0d1c236fbbf2fc0959b08510f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b67140de7685de25b2f5775b5735f9c491b058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b67140de7685de25b2f5775b5735f9c491b058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b67140de7685de25b2f5775b5735f9c491b058"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "48a98e1b68b6298c962975355bdfd89a167a7d7b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53718316afa45eb0d1c236fbbf2fc0959b08510f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53718316afa45eb0d1c236fbbf2fc0959b08510f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=53718316afa45eb0d1c236fbbf2fc0959b08510f", "patch": "@@ -11934,9 +11934,12 @@\n   if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n       != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n     {\n-      rtx tem = gen_reg_rtx (SImode);\n-      emit_insn (gen_andsi3 (tem, operands[2], operands[3]));\n-      operands[2] = tem;\n+      rtx xops[3];\n+      xops[0] = gen_reg_rtx (GET_MODE (operands[2]));\n+      xops[1] = operands[2];\n+      xops[2] = operands[3];\n+      ix86_expand_binary_operator (AND, GET_MODE (operands[2]), xops);\n+      operands[2] = xops[0];\n     }\n \n   operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);\n@@ -12899,9 +12902,12 @@\n   if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n       != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n     {\n-      rtx tem = gen_reg_rtx (SImode);\n-      emit_insn (gen_andsi3 (tem, operands[2], operands[3]));\n-      operands[2] = tem;\n+      rtx xops[3];\n+      xops[0] = gen_reg_rtx (GET_MODE (operands[2]));\n+      xops[1] = operands[2];\n+      xops[2] = operands[3];\n+      ix86_expand_binary_operator (AND, GET_MODE (operands[2]), xops);\n+      operands[2] = xops[0];\n     }\n \n   operands[2] = force_reg (GET_MODE (operands[2]), operands[2]);"}, {"sha": "d1eb82965351d5f2b1fd81dd9dc75fb428a27080", "filename": "gcc/testsuite/gcc.dg/pr105825.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53718316afa45eb0d1c236fbbf2fc0959b08510f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105825.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53718316afa45eb0d1c236fbbf2fc0959b08510f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105825.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105825.c?ref=53718316afa45eb0d1c236fbbf2fc0959b08510f", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/105825 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-mavx\" { target avx } } */\n+\n+__int128 j;\n+int i;\n+\n+void\n+foo (void)\n+{\n+  j <<= __builtin_parityll (i);\n+}"}]}