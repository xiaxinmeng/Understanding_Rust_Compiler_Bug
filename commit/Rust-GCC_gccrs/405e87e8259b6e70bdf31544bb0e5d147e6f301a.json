{"sha": "405e87e8259b6e70bdf31544bb0e5d147e6f301a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1ZTg3ZTgyNTliNmU3MGJkZjMxNTQ0YmIwZTVkMTQ3ZTZmMzAxYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-11T17:52:27Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-10-11T17:52:27Z"}, "message": "re PR fortran/92018 (ICE in gfc_conv_constant_to_tree, at fortran/trans-const.c:370)\n\n2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/92018\n\t* check.c (reset_boz): New function.\n\t(illegal_boz_arg, boz_args_check, gfc_check_complex, gfc_check_float,\n\tgfc_check_transfer): Use it.\n\t(gfc_check_dshift): Use reset_boz, and re-arrange the checking to\n\thelp suppress possible run-on errors.\n\t(gfc_check_and): Restore checks for valid argument types.  Use\n\treset_boz, and re-arrange the checking to help suppress possible\n \tun-on errors.\n\t* resolve.c (resolve_function): Actual arguments cannot be BOZ in\n\ta function reference.\n\n2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/92018\n\t* gfortran.dg/gnu_logical_2.f90: Update dg-error regex.\n\t* gfortran.dg/pr81509_2.f90: Ditto.\n\t* gfortran.dg/pr92018.f90: New test.\n\nFrom-SVN: r276898", "tree": {"sha": "391bc2773fd2595ed167845cf3a458678e069741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/391bc2773fd2595ed167845cf3a458678e069741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405e87e8259b6e70bdf31544bb0e5d147e6f301a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e87e8259b6e70bdf31544bb0e5d147e6f301a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405e87e8259b6e70bdf31544bb0e5d147e6f301a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e87e8259b6e70bdf31544bb0e5d147e6f301a/comments", "author": null, "committer": null, "parents": [{"sha": "c988c699fa09c91485afa24526f965e3fd4269d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c988c699fa09c91485afa24526f965e3fd4269d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c988c699fa09c91485afa24526f965e3fd4269d6"}], "stats": {"total": 198, "additions": 155, "deletions": 43}, "files": [{"sha": "b6d97cb3c71f521284cb6ed3ea3145c16beae0a8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -1,3 +1,17 @@\n+2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/92018\n+\t* check.c (reset_boz): New function.\n+\t(illegal_boz_arg, boz_args_check, gfc_check_complex, gfc_check_float,\n+\tgfc_check_transfer): Use it.\n+\t(gfc_check_dshift): Use reset_boz, and re-arrange the checking to\n+\thelp suppress possible run-on errors.\n+\t(gfc_check_and): Restore checks for valid argument types.  Use\n+\treset_boz, and re-arrange the checking to help suppress possible\n+\trun-on errors.\n+\t* resolve.c (resolve_function): Actual arguments cannot be BOZ in\n+\ta function reference.\n+\n 2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/92019"}, {"sha": "f66ed93f9f40620d0558db158077fd5047a167e0", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 111, "deletions": 23, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -34,6 +34,24 @@ along with GCC; see the file COPYING3.  If not see\n #include \"constructor.h\"\n #include \"target-memory.h\"\n \n+\n+/* Reset a BOZ to a zero value.  This is used to prevent run-on errors\n+   from resolve.c(resolve_function).  */\n+\n+static void\n+reset_boz (gfc_expr *x)\n+{\n+  /* Clear boz info.  */\n+  x->boz.rdx = 0;\n+  x->boz.len = 0;\n+  free (x->boz.str);\n+\n+  x->ts.type = BT_INTEGER;\n+  x->ts.kind = gfc_default_integer_kind;\n+  mpz_init (x->value.integer);\n+  mpz_set_ui (x->value.integer, 0);\n+}\n+\n /* A BOZ literal constant can appear in a limited number of contexts.\n    gfc_invalid_boz() is a helper function to simplify error/warning\n    generation.  gfortran accepts the nonstandard 'X' for 'Z', and gfortran\n@@ -63,6 +81,7 @@ illegal_boz_arg (gfc_expr *x)\n     {\n       gfc_error (\"BOZ literal constant at %L cannot be an actual argument \"\n \t\t \"to %qs\", &x->where, gfc_current_intrinsic);\n+      reset_boz (x);\n       return true;\n     }\n \n@@ -79,6 +98,8 @@ boz_args_check(gfc_expr *i, gfc_expr *j)\n       gfc_error (\"Arguments of %qs at %L and %L cannot both be BOZ \"\n \t\t \"literal constants\", gfc_current_intrinsic, &i->where,\n \t\t &j->where);\n+      reset_boz (i);\n+      reset_boz (j);\n       return false;\n \n     }\n@@ -2399,7 +2420,10 @@ gfc_check_complex (gfc_expr *x, gfc_expr *y)\n     {\n       if (gfc_invalid_boz (\"BOZ constant at %L cannot appear in the COMPLEX \"\n \t\t\t   \"intrinsic subprogram\", &x->where))\n-\treturn false;\n+\t{\n+\t  reset_boz (x);\n+\t  return false;\n+        }\n       if (y->ts.type == BT_INTEGER && !gfc_boz2int (x, y->ts.kind))\n \treturn false;\n       if (y->ts.type == BT_REAL && !gfc_boz2real (x, y->ts.kind))\n@@ -2410,7 +2434,10 @@ gfc_check_complex (gfc_expr *x, gfc_expr *y)\n     {\n       if (gfc_invalid_boz (\"BOZ constant at %L cannot appear in the COMPLEX \"\n \t\t\t   \"intrinsic subprogram\", &y->where))\n-\treturn false;\n+\t{\n+\t  reset_boz (y);\n+\t  return false;\n+\t}\n       if (x->ts.type == BT_INTEGER && !gfc_boz2int (y, x->ts.kind))\n \treturn false;\n       if (x->ts.type == BT_REAL && !gfc_boz2real (y, x->ts.kind))\n@@ -2674,20 +2701,32 @@ gfc_check_dshift (gfc_expr *i, gfc_expr *j, gfc_expr *shift)\n   if (!boz_args_check (i, j))\n     return false;\n \n-  /* If i is BOZ and j is integer, convert i to type of j.  */\n-  if (i->ts.type == BT_BOZ && j->ts.type == BT_INTEGER\n-      && !gfc_boz2int (i, j->ts.kind))\n-    return false;\n-\n-  /* If j is BOZ and i is integer, convert j to type of i.  */\n-  if (j->ts.type == BT_BOZ && i->ts.type == BT_INTEGER\n-      && !gfc_boz2int (j, i->ts.kind))\n-    return false;\n-\n-  if (!type_check (i, 0, BT_INTEGER))\n-    return false;\n+  /* If i is BOZ and j is integer, convert i to type of j.  If j is not\n+     an integer, clear the BOZ; otherwise, check that i is an integer.  */\n+  if (i->ts.type == BT_BOZ)\n+    {\n+      if (j->ts.type != BT_INTEGER)\n+        reset_boz (i);\n+      else if (!gfc_boz2int (i, j->ts.kind))\n+\treturn false;\n+    }\n+  else if (!type_check (i, 0, BT_INTEGER))\n+    {\n+      if (j->ts.type == BT_BOZ)\n+\treset_boz (j);\n+      return false;\n+    }\n \n-  if (!type_check (j, 1, BT_INTEGER))\n+  /* If j is BOZ and i is integer, convert j to type of i.  If i is not\n+     an integer, clear the BOZ; otherwise, check that i is an integer.  */\n+  if (j->ts.type == BT_BOZ)\n+    {\n+      if (i->ts.type != BT_INTEGER)\n+        reset_boz (j);\n+      else if (!gfc_boz2int (j, i->ts.kind))\n+\treturn false;\n+    }\n+  else if (!type_check (j, 1, BT_INTEGER))\n     return false;\n \n   if (!same_type_check (i, 0, j, 1))\n@@ -2860,7 +2899,10 @@ gfc_check_float (gfc_expr *a)\n     {\n       if (gfc_invalid_boz (\"BOZ literal constant at %L cannot appear in the \"\n \t\t\t   \"FLOAT intrinsic subprogram\", &a->where))\n-\treturn false;\n+\t{\n+\t  reset_boz (a);\n+\t  return false;\n+\t}\n       if (!gfc_boz2int (a, gfc_default_integer_kind))\n \treturn false;\n     }\n@@ -6126,7 +6168,11 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   if (size != NULL)\n     {\n       if (!type_check (size, 2, BT_INTEGER))\n-\treturn false;\n+\t{\n+\t  if (size->ts.type == BT_BOZ)\n+\t    reset_boz (size);\n+\t  return false;\n+\t}\n \n       if (!scalar_check (size, 2))\n \treturn false;\n@@ -7286,19 +7332,61 @@ gfc_check_system_sub (gfc_expr *cmd, gfc_expr *status)\n bool\n gfc_check_and (gfc_expr *i, gfc_expr *j)\n {\n+  if (i->ts.type != BT_INTEGER\n+      && i->ts.type != BT_LOGICAL\n+      && i->ts.type != BT_BOZ)\n+    {\n+      gfc_error (\"%qs argument of %qs intrinsic at %L must be INTEGER, \"\n+                 \"LOGICAL, or a BOZ literal constant\",\n+\t\t gfc_current_intrinsic_arg[0]->name,\n+                 gfc_current_intrinsic, &i->where);\n+      return false;\n+    }\n+\n+  if (j->ts.type != BT_INTEGER\n+      && j->ts.type != BT_LOGICAL\n+      && j->ts.type != BT_BOZ)\n+    {\n+      gfc_error (\"%qs argument of %qs intrinsic at %L must be INTEGER, \"\n+                 \"LOGICAL, or a BOZ literal constant\",\n+\t\t gfc_current_intrinsic_arg[1]->name,\n+                 gfc_current_intrinsic, &j->where);\n+      return false;\n+    }\n+\n   /* i and j cannot both be BOZ literal constants.  */\n   if (!boz_args_check (i, j))\n     return false;\n \n   /* If i is BOZ and j is integer, convert i to type of j.  */\n-  if (i->ts.type == BT_BOZ && j->ts.type == BT_INTEGER\n-      && !gfc_boz2int (i, j->ts.kind))\n-    return false;\n+  if (i->ts.type == BT_BOZ)\n+    {\n+      if (j->ts.type != BT_INTEGER)\n+\t{\n+\t  gfc_error (\"%qs argument of %qs intrinsic at %L must be INTEGER\",\n+\t\t     gfc_current_intrinsic_arg[1]->name,\n+\t\t     gfc_current_intrinsic, &j->where);\n+\t  reset_boz (i);\n+\t  return false;\n+\t}\n+      if (!gfc_boz2int (i, j->ts.kind))\n+\treturn false;\n+    }\n \n   /* If j is BOZ and i is integer, convert j to type of i.  */\n-  if (j->ts.type == BT_BOZ && i->ts.type == BT_INTEGER\n-      && !gfc_boz2int (j, i->ts.kind))\n-    return false;\n+  if (j->ts.type == BT_BOZ)\n+    {\n+      if (i->ts.type != BT_INTEGER)\n+\t{\n+\t  gfc_error (\"%qs argument of %qs intrinsic at %L must be INTEGER\",\n+\t\t     gfc_current_intrinsic_arg[0]->name,\n+\t\t     gfc_current_intrinsic, &j->where);\n+\t  reset_boz (j);\n+\t  return false;\n+\t}\n+      if (!gfc_boz2int (j, i->ts.kind))\n+\treturn false;\n+    }\n \n   if (!same_type_check (i, 0, j, 1, false))\n     return false;"}, {"sha": "71539fed448dfe3db341c01fa8d34217bdb489a2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -3243,19 +3243,14 @@ resolve_function (gfc_expr *expr)\n     return t;\n \n   /* Walk the argument list looking for invalid BOZ.  */\n-  if (expr->value.function.esym)\n-    {\n-      gfc_actual_arglist *a;\n-\n-      for (a = expr->value.function.actual; a; a = a->next)\n-\tif (a->expr && a->expr->ts.type == BT_BOZ)\n-\t  {\n-\t    gfc_error (\"A BOZ literal constant at %L cannot appear as an \"\n-\t\t\t\"actual argument in a function reference\",\n-\t\t\t&a->expr->where);\n-\t    return false;\n-\t  }\n-    }\n+  for (arg = expr->value.function.actual; arg; arg = arg->next)\n+    if (arg->expr && arg->expr->ts.type == BT_BOZ)\n+      {\n+\tgfc_error (\"A BOZ literal constant at %L cannot appear as an \"\n+\t\t   \"actual argument in a function reference\",\n+\t\t   &arg->expr->where);\n+\treturn false;\n+      }\n \n   temp = need_full_assumed_size;\n   need_full_assumed_size = 0;"}, {"sha": "0cf04a5b3a53061f1e6cb4dc3017bf6d9c1578e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -1,3 +1,10 @@\n+2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/92018\n+\t* gfortran.dg/gnu_logical_2.f90: Update dg-error regex.\n+\t* gfortran.dg/pr81509_2.f90: Ditto.\n+\t* gfortran.dg/pr92018.f90: New test.\n+\n 2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/92019"}, {"sha": "0e24c722cc6f167f102371d574a374f51afb8b13", "filename": "gcc/testsuite/gfortran.dg/gnu_logical_2.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgnu_logical_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgnu_logical_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgnu_logical_2.f90?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -7,22 +7,22 @@\n \n   print *, and(i,i)\n   print *, and(l,l)\n-  print *, and(i,r) ! { dg-error \"must be the same type\" }\n-  print *, and(c,l) ! { dg-error \"must be the same type\" }\n+  print *, and(i,r) ! { dg-error \"must be INTEGER, LOGICAL, or a BOZ\" }\n+  print *, and(c,l) ! { dg-error \"must be INTEGER, LOGICAL, or a BOZ\" }\n   print *, and(i,l) ! { dg-error \"must be the same type\" }\n   print *, and(l,i) ! { dg-error \"must be the same type\" }\n \n   print *, or(i,i)\n   print *, or(l,l)\n-  print *, or(i,r) ! { dg-error \"must be the same type\" }\n-  print *, or(c,l) ! { dg-error \"must be the same type\" }\n+  print *, or(i,r) ! { dg-error \"must be INTEGER, LOGICAL, or a BOZ\" }\n+  print *, or(c,l) ! { dg-error \"must be INTEGER, LOGICAL, or a BOZ\" }\n   print *, or(i,l) ! { dg-error \"must be the same type\" }\n   print *, or(l,i) ! { dg-error \"must be the same type\" }\n \n   print *, xor(i,i)\n   print *, xor(l,l)\n-  print *, xor(i,r) ! { dg-error \"must be the same type\" }\n-  print *, xor(c,l) ! { dg-error \"must be the same type\" }\n+  print *, xor(i,r) ! { dg-error \"must be INTEGER, LOGICAL, or a BOZ\" }\n+  print *, xor(c,l) ! { dg-error \"must be INTEGER, LOGICAL, or a BOZ\" }\n   print *, xor(i,l) ! { dg-error \"must be the same type\" }\n   print *, xor(l,i) ! { dg-error \"must be the same type\" }\n "}, {"sha": "719feb5c5106fbd8bceff29775943ea2d33b2900", "filename": "gcc/testsuite/gfortran.dg/pr81509_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr81509_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr81509_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr81509_2.f90?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -13,6 +13,6 @@ program foo\n k = ior(i,z'1111')\n k = ior(i,k)                  ! { dg-error \"different kind type parameters\" }\n k = and(i,k)                  ! { dg-error \"must be the same type\" }\n-k = and(a,z'1234')            ! { dg-error \"must be the same type\" }\n+k = and(a,z'1234')            ! { dg-error \"must be INTEGER\" }\n end program foo\n "}, {"sha": "6c90d2f6762edcc9ef496cbda0750f706d6fb7a7", "filename": "gcc/testsuite/gfortran.dg/pr92018.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr92018.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405e87e8259b6e70bdf31544bb0e5d147e6f301a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr92018.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr92018.f90?ref=405e87e8259b6e70bdf31544bb0e5d147e6f301a", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! PR fortran/92018\n+subroutine sub (f)\n+   integer :: f\n+   print *, f(b'11') ! { dg-error \"cannot appear as an actual\" }\n+   print *, f(o'11') ! { dg-error \"cannot appear as an actual\" }\n+   print *, f(z'11') ! { dg-error \"cannot appear as an actual\" }\n+end"}]}