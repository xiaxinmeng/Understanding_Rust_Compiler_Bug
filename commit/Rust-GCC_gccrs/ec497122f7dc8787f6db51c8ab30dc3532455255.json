{"sha": "ec497122f7dc8787f6db51c8ab30dc3532455255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0OTcxMjJmN2RjODc4N2Y2ZGI1MWM4YWIzMGRjMzUzMjQ1NTI1NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-18T19:21:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-18T19:21:44Z"}, "message": "h8300.md: Remove \"type\" attribute from all patterns except those which have varying...\n\n        * h8300/h8300.md: Remove \"type\" attribute from all patterns\n        except those which have varying length branches.  Eliminate\n        obsolete \"type\" attributes.  Add additional comments about insn\n        length computation problems and further optimizations.  Add\n        \"length\" and \"cc\" attributes to insns without them, fix a few\n        length computations.  Remove patterns which are commented out.\n\n        * h8300/h8300.md (zero extension expanders and insns): Simplify,\n        fix various length problems, provide optimized versions for the\n        h8300 and h8300h.\n        (sign extension expanders and insns): Likewise.  Make them\n        nearly identical to zero_extension patterns and insns.\n\nFrom-SVN: r11849", "tree": {"sha": "037bd09cb709efb373b0a3e7024fa1f04cbb0ba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037bd09cb709efb373b0a3e7024fa1f04cbb0ba3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec497122f7dc8787f6db51c8ab30dc3532455255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec497122f7dc8787f6db51c8ab30dc3532455255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec497122f7dc8787f6db51c8ab30dc3532455255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec497122f7dc8787f6db51c8ab30dc3532455255/comments", "author": null, "committer": null, "parents": [{"sha": "abafac3adad7458b8231ac0bba5fce1d84bdb6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abafac3adad7458b8231ac0bba5fce1d84bdb6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abafac3adad7458b8231ac0bba5fce1d84bdb6a4"}], "stats": {"total": 512, "additions": 236, "deletions": 276}, "files": [{"sha": "c177990e80861cd21db882d375e12e041431f976", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 236, "deletions": 276, "changes": 512, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec497122f7dc8787f6db51c8ab30dc3532455255/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec497122f7dc8787f6db51c8ab30dc3532455255/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=ec497122f7dc8787f6db51c8ab30dc3532455255", "patch": "@@ -52,9 +52,19 @@\n ;; bit is going to be operated on.\n \n ;; Should be HI & SImode tstXX insns which test one bit using btst.\n+;;\n+;; Some insns allow general operations, but lengths don't take\n+;; into account that a general operand may be a memory reference\n+;; with a long length.  (EXTEND insns)\n+\n+;; On the h8300h, adds/subs operate on the 32bit \"er\" registers.  Right\n+;; now GCC doesn't expose the \"e\" half to the compiler, so using add/subs\n+;; for addhi and subhi is safe.\n+;; Long term, we want to expose the \"e\" half to the compiler (gives us\n+;; 8 more 16bit registers).  At that point addhi and subhi can't use adds/subs.\n \n \n-(define_attr \"type\" \"branch,bcs,return,call,arith,move,float,multi\"\n+(define_attr \"type\" \"branch,bcs,arith\"\n   (const_string \"arith\"))\n \n ;; The size of instructions in bytes.\n@@ -94,11 +104,7 @@\n \t\t\t\t     (if_then_else\n \t\t\t\t       (match_operand 2 \"register_operand\" \"\")\n \t\t\t\t       (const_int 8)\n-\t\t\t\t       (const_int 10))))\n-\t (eq_attr \"type\" \"move\")\t(const_int 4)\n-\t (eq_attr \"type\" \"return\")\t(const_int 2)\n-\t (eq_attr \"type\" \"float\")\t(const_int 12)\n-\t (eq_attr \"type\" \"call\")\t(const_int 4)]\n+\t\t\t\t       (const_int 10))))]\n \t(const_int 200)))\n \n ;; Condition code settings.\n@@ -132,8 +138,7 @@\n   else\n     return \\\"push.l\t%S1\\\";\n }\"\n-  [(set_attr \"type\" \"move\")\n-   (set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n+  [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"movqi_internal\"\n@@ -147,8 +152,7 @@\n    mov.b\t%X1,%R0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr_alternative \"length\"\n+  [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n@@ -176,8 +180,7 @@\n    sub.b\t%X0,%X0\n    mov.b\t%X1,%X0\n    mov.b\t%R1,%X0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr_alternative \"length\"\n+  [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n    (set_attr \"cc\" \"set_zn_c0,set,set\")])\n@@ -197,8 +200,7 @@\n   else\n     return \\\"push.l\t%S1\\\";\n }\"\n-  [(set_attr \"type\" \"move\")\n-   (set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n+  [(set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"movhi_internal\"\n@@ -212,8 +214,7 @@\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr_alternative \"length\"\n+  [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n@@ -241,8 +242,7 @@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr_alternative \"length\"\n+  [(set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n    (set_attr \"cc\" \"set_zn_c0,set,set\")])\n@@ -355,8 +355,7 @@\n       return \\\"mov.w\t%T1,%e0\\;mov.w\t%T1,%f0\\\";\n     }\n }\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"4,4,8,8,4,4\")\n+  [(set_attr \"length\" \"4,4,8,8,4,4\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"movsf_h8300\"\n@@ -415,8 +414,7 @@\n \n     }\n }\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"4,4,8,8,4,4\")\n+  [(set_attr \"length\" \"4,4,8,8,4,4\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"movsi_h8300h\"\n@@ -457,8 +455,7 @@\n     }\n    return \\\"mov.l\t%S1,%S0\\\";\n }\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"2,2,10,10,4,4\")\n+  [(set_attr \"length\" \"2,2,10,10,4,4\")\n    (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n \n (define_insn \"movsf_h8300h\"\n@@ -474,8 +471,7 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"2,2,10,10,4,4\")\n+  [(set_attr \"length\" \"2,2,10,10,4,4\")\n    (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n \f\n ;; ----------------------------------------------------------------------\n@@ -487,32 +483,28 @@\n \t\t      (match_operand:QI 1 \"o_operand\" \"O\")))]\n   \"\"\n   \"btst %W1,%R0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n   \n (define_insn \"tstqi\"\n   [(set (cc0) (match_operand:QI 0 \"general_operand\" \"ra\"))]\n   \"\"\n   \"mov.b\t%X0,%X0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"tsthi\"\n   [(set (cc0) (match_operand:HI 0 \"general_operand\" \"ra\"))]\n   \"\"\n   \"mov.w\t%T0,%T0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"tstsi\"\n   [(set (cc0) (match_operand:SI 0 \"general_operand\" \"ra\"))]\n   \"TARGET_H8300H\"\n   \"mov.l\t%S0,%S0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"cmpqi\"\n@@ -521,8 +513,7 @@\n \t\t    (match_operand:QI 1 \"nonmemory_operand\" \"rai\")))]\n   \"\"\n   \"cmp.b\t%X1,%X0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"compare\")])\n \n (define_expand \"cmphi\"\n@@ -544,8 +535,7 @@\n \t\t    (match_operand:HI 1 \"register_operand\" \"ra\")))]\n   \"!TARGET_H8300H\"\n   \"cmp.w\t%T1,%T0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"compare\")])\n \n (define_insn \"\"\n@@ -554,8 +544,7 @@\n \t\t    (match_operand:HI 1 \"nonmemory_operand\" \"rai\")))]\n   \"TARGET_H8300H\"\n   \"cmp.w\t%T1,%T0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"compare\")])\n \n (define_insn \"cmpsi\"\n@@ -564,8 +553,7 @@\n \t\t    (match_operand:SI 1 \"nonmemory_operand\" \"rai\")))]\n   \"TARGET_H8300H\"\n   \"cmp.l\t%S1,%S0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"compare\")])\n \f\n ;; ----------------------------------------------------------------------\n@@ -578,13 +566,9 @@\n \t\t (match_operand:QI 2 \"nonmemory_operand\" \"ri\")))]\n   \"\"\n   \"add.b\t%X2,%X0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n-;; h8300h: adds operates on the 32bit register.  We can use it because we don't\n-;; use the e0-7 registers.\n-\n (define_expand \"addhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"\")\n@@ -600,8 +584,7 @@\n \t\t (match_operand:HI 2 \"adds_subs_operand\" \"i\")))]\n   \"\"\n   \"* return output_adds_subs (operands);\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"\"\n@@ -612,8 +595,7 @@\n   \"@\n    add.b\t%s2,%s0\\;addx\t%t2,%t0 \n    add.w\t%T2,%T0\"\n-  [(set_attr \"type\" \"multi,arith\")\n-   (set_attr \"length\" \"4,2\")\n+  [(set_attr \"length\" \"4,2\")\n    (set_attr \"cc\" \"clobber,set_zn_c0\")])\n \n (define_insn \"\"\n@@ -624,8 +606,7 @@\n   \"@\n    add.w\t%T2,%T0\n    add.w\t%T2,%T0\"\n-  [(set_attr \"type\" \"arith,arith\")\n-   (set_attr \"length\" \"4,2\")\n+  [(set_attr \"length\" \"4,2\")\n    (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \n (define_expand \"addsi3\"\n@@ -643,8 +624,7 @@\n \t\t (match_operand:SI 2 \"adds_subs_operand\" \"i\")))]\n   \"TARGET_H8300H\"\n   \"* return output_adds_subs (operands);\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"addsi_h8300\"\n@@ -656,8 +636,7 @@\n    add\t%w2,%w0\\;addx\t%x2,%x0\\;addx\t%y2,%y0\\;addx\t%z2,%z0\n    add.w\t%f2,%f0\\;addx\t%y2,%y0\\;addx\t%z2,%z0\n    mov\t%f1,%f0\\;mov\t%e1,%e0\\;add.w\t%f2,%f0\\;addx\t%y2,%y0\\;addx\t%z2,%z0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"8,6,20\")\n+  [(set_attr \"length\" \"8,6,20\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"addsi_h8300h\"\n@@ -668,8 +647,7 @@\n   \"@\n    add.l\t%S2,%S0\n    add.l\t%S2,%S0\"\n-  [(set_attr \"type\" \"arith,arith\")\n-   (set_attr \"length\" \"6,2\")\n+  [(set_attr \"length\" \"6,2\")\n    (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \n ;; ----------------------------------------------------------------------\n@@ -684,13 +662,9 @@\n   \"@\n    sub.b\t%X2,%X0\n    add.b\t%G2,%X0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n-;; h8300h: subs operates on the 32bit register.  We can use it because we don't\n-;; use the e0-7 registers.\n-\n (define_expand \"subhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(minus:HI (match_operand:HI 1 \"general_operand\" \"\")\n@@ -711,8 +685,7 @@\n   operands[2] = GEN_INT (-INTVAL (operands[2]));\n   return output_adds_subs (operands);\n }\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"\"\n@@ -723,8 +696,7 @@\n   \"@\n    sub.w\t%T2,%T0\n    add.b\t%E2,%s0\\;addx\t%F2,%t0 ; -%0\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"set_zn_c0,clobber\")])\n \n (define_insn \"\"\n@@ -735,8 +707,7 @@\n   \"@\n    sub.w\t%T2,%T0\n    sub.w\t%T2,%T0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \n (define_expand \"subsi3\"\n@@ -752,8 +723,7 @@\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_H8300\"\n   \"sub.w\t%f2,%f0\\;subx\t%y2,%y0\\;subx\t%z2,%z0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"6\")\n+  [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \n ;; Specialized version using adds/subs.  This must come before\n@@ -769,8 +739,7 @@\n   operands[2] = GEN_INT (-INTVAL (operands[2]));\n   return output_adds_subs (operands);\n }\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"subsi3_h8300h\"\n@@ -781,8 +750,7 @@\n   \"@\n    sub.l\t%S2,%S0\n    sub.l\t%S2,%S0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2,6\")\n+  [(set_attr \"length\" \"2,6\")\n    (set_attr \"cc\" \"set_zn_c0,set_zn_c0\")])\n \f\n ;; ----------------------------------------------------------------------\n@@ -797,8 +765,7 @@\n \t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_H8300H\"\n   \"mulxs.b\t%X2,%T0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"mulhisi3\"\n@@ -807,8 +774,7 @@\n \t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_H8300H\"\n   \"mulxs.w\t%T2,%S0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"umulqihi3\"\n@@ -817,8 +783,7 @@\n \t\t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"mulxu\t%X2,%T0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"umulhisi3\"\n@@ -827,8 +792,7 @@\n \t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n   \"TARGET_H8300H\"\n   \"mulxu.w\t%T2,%S0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n ;; ----------------------------------------------------------------------\n@@ -841,8 +805,7 @@\n \t\t (match_operand:QI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"divxu\t%X2,%T0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n ;; ??? Will divxu always work here?\n@@ -853,8 +816,7 @@\n \t\t(match_operand:QI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"divxu\t%X2,%T0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"udivhi3\"\n@@ -863,8 +825,7 @@\n \t\t (match_operand:HI 2 \"register_operand\" \"r\")))]\n   \"TARGET_H8300H\"\n   \"divxu.w\t%T2,%S0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"divhi3\"\n@@ -873,8 +834,7 @@\n \t\t(match_operand:HI 2 \"register_operand\" \"r\")))]\n   \"TARGET_H8300H\"\n   \"divxs.w\t%T2,%S0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n ;; ----------------------------------------------------------------------\n@@ -887,8 +847,7 @@\n \t\t (match_operand:QI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"divxu\t%X2,%T0\\;mov %t0,%s0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"modqi3\"\n@@ -897,8 +856,7 @@\n \t\t(match_operand:QI 2 \"register_operand\" \"r\")))]\n   \"TARGET_H8300H\"\n   \"divxs.b\t%X2,%T0\\;mov %t0,%s0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"6\")\n+  [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"umodhi3\"\n@@ -907,8 +865,7 @@\n \t\t (match_operand:HI 2 \"register_operand\" \"r\")))]\n   \"TARGET_H8300H\"\n   \"divxu.w\t%T2,%S0\\;mov %e0,%f0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"modhi3\"\n@@ -917,8 +874,7 @@\n \t\t(match_operand:HI 2 \"register_operand\" \"r\")))]\n   \"TARGET_H8300H\"\n   \"divxs.w\t%T2,%S0\\;mov %e0,%f0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"6\")\n+  [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n \f\n ;; ----------------------------------------------------------------------\n@@ -933,8 +889,7 @@\n   \"@\n    and\t%X2,%X0\n    bclr\t%W2,%R0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"set,none_0hit\")])\n \n (define_expand \"andqi3\"\n@@ -969,8 +924,7 @@\n     return \\\"and.w %T2,%T0\\\";\n   return \\\"and\t%s2,%s0\\;and\t%t2,%t0;\\\";\n }\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"andsi3\"\n@@ -1009,8 +963,7 @@\n     return \\\"and.l\t%S2,%S0\\\";\n   return \\\"and\t%w2,%w0\\;and\t%x2,%x0\\;and\t%y2,%y0\\;and\t%z2,%z0\\;\\\";\n }\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,8\")\n+  [(set_attr \"length\" \"2,8\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n ;; ----------------------------------------------------------------------\n@@ -1025,8 +978,7 @@\n   \"@\n    or\t%X2,%X0\n    bset\t%V2,%R0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"set,none_0hit\")])\n \n (define_expand \"iorqi3\"\n@@ -1061,8 +1013,7 @@\n     return \\\"or.w\t%T2,%T0\\\";\n   return \\\"or\t%s2,%s0\\;or\t%t2,%t0; %2 or2\\\";\n }\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"iorsi3\"\n@@ -1098,8 +1049,7 @@\n     return \\\"or.l\t%S2,%S0\\\";\n   return \\\"or\t%w2,%w0\\;or\t%x2,%x0\\;or\t%y2,%y0\\;or\t%z2,%z0\\;\\\";\n }\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,8\")\n+  [(set_attr \"length\" \"2,8\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n ;; ----------------------------------------------------------------------\n@@ -1114,8 +1064,7 @@\n   \"@\n    xor\t%X2,%X0\n    bnot\t%V2,%R0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"set,none_0hit\")])\n \n (define_expand \"xorqi3\"\n@@ -1150,8 +1099,7 @@\n     return \\\"xor.w\t%T2,%T0\\\";\n   return \\\"xor\t%s2,%s0\\;xor\t%t2,%t0\\\";\n }\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,4\")\n+  [(set_attr \"length\" \"2,4\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"xorsi3\"\n@@ -1187,8 +1135,7 @@\n     return \\\"xor.l\t%S2,%S0\\\";\n   return \\\"xor\t%w2,%w0\\;xor\t%x2,%x0\\;xor\t%y2,%y0\\;xor\t%z2,%z0\\;\\\";\n }\"\n-  [(set_attr \"type\" \"arith,multi\")\n-   (set_attr \"length\" \"2,8\")\n+  [(set_attr \"length\" \"2,8\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \f\n ;; ----------------------------------------------------------------------\n@@ -1200,8 +1147,7 @@\n \t(neg:QI (match_operand:QI 1 \"general_operand\" \"0\")))]\n   \"\"\n   \"neg\t%X0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_expand \"neghi2\"\n@@ -1231,8 +1177,7 @@\n \t(neg:HI (match_operand:HI 1 \"general_operand\" \"0\")))]\n   \"TARGET_H8300H\"\n   \"neg\t%T0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_expand \"negsi2\"\n@@ -1262,8 +1207,7 @@\n \t(neg:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n   \"TARGET_H8300H\"\n   \"neg\t%S0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n ;; ----------------------------------------------------------------------\n@@ -1275,8 +1219,7 @@\n \t(not:QI (match_operand:QI 1 \"general_operand\" \"0\")))]\n   \"\"\n   \"not\t%X0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"2\")\n+  [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"one_cmplhi2\"\n@@ -1290,8 +1233,7 @@\n   else\n     return \\\"not\t%T0\\\";\n }\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"cc\" \"clobber\")\n+  [(set_attr \"cc\" \"clobber\")\n    (set (attr \"length\")\n \t(if_then_else (eq (symbol_ref \"TARGET_H8300H\") (const_int 0))\n \t\t      (const_int 8)\n@@ -1308,8 +1250,7 @@\n   else\n     return \\\"not\t%S0\\\";\n }\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"cc\" \"clobber\")\n+  [(set_attr \"cc\" \"clobber\")\n    (set (attr \"length\")\n \t(if_then_else (eq (symbol_ref \"TARGET_H8300H\") (const_int 0))\n \t\t      (const_int 8)\n@@ -1491,17 +1432,15 @@\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_H8300\"\n   \"jmp\t@%0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"cc\" \"none\")\n+  [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \n (define_insn \"tablejump_h8300h\"\n   [(set (pc) (match_operand:SI 0 \"register_operand\" \"r\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_H8300H\"\n   \"jmp\t@%0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"cc\" \"none\")\n+  [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \n ;; This is a define expand, because pointers may be either 16 or 32 bits.\n@@ -1517,8 +1456,7 @@\n   \"@\n    jmp\t@%0\n    jmp\t@%0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"cc\" \"none\")\n+  [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \n (define_insn \"indirect_jump_h8300h\"\n@@ -1527,8 +1465,7 @@\n   \"@\n    jmp @%0\n    jmp @%0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"cc\" \"none\")\n+  [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \n ;; Call subroutine with no return value.\n@@ -1547,8 +1484,7 @@\n   else\n     return \\\"jsr\\\\t%0\\\";\n }\"\n-  [(set_attr \"type\" \"call\")\n-   (set_attr \"cc\" \"clobber\")\n+  [(set_attr \"cc\" \"clobber\")\n    (set (attr \"length\")\n      (if_then_else (match_operand:QI 0 \"small_call_insn_operand\" \"\")\n \t\t   (const_int 4)\n@@ -1572,8 +1508,7 @@\n   else\n     return \\\"jsr\\\\t%1\\\";\n }\"\n-  [(set_attr \"type\" \"call\")\n-   (set_attr \"cc\" \"clobber\")\n+  [(set_attr \"cc\" \"clobber\")\n    (set (attr \"length\")\n      (if_then_else (match_operand:QI 0 \"small_call_insn_operand\" \"\")\n \t\t   (const_int 4)\n@@ -1583,8 +1518,7 @@\n   [(const_int 0)]\n   \"\"\n   \"nop\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"cc\" \"none\")\n+  [(set_attr \"cc\" \"none\")\n    (set_attr \"length\" \"2\")])\n \f\n ;; ----------------------------------------------------------------------\n@@ -1595,120 +1529,125 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:HI (match_operand:QI 1 \"general_operand\" \"0,g\")))]\n   \"\"\n-  \"*\n-{\n-  if (which_alternative==0)\n-    return \\\"mov.b\t#0,%t0\\\";\n+  \"@\n+  mov.b\t#0,%t0\n+  mov.b\t%R1,%s0\\;mov.b\t#0,%t0\"\n+  [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"clobber,clobber\")])\n \n-  if (TARGET_H8300)\n-    return \\\"mov.b\t%R1,%s0\\;mov.b\t#0,%t0\\\";\n-  else\n+(define_expand \"zero_extendhisi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_H8300\n+      && GET_CODE (operands[1]) != CONST_INT)\n     {\n-      /* ??? See how often this gets optimized.  */\n-      if (REG_P (operands[1]) && (REGNO (operands[1]) == REGNO (operands[0])))\n-\treturn \\\"extu.w\t%T0\\\";\n-      else\n-\treturn \\\"mov.b\t%R1,%s0\\;extu.w\t%T0\\\";\n+      emit_insn (gen_zero_extendhisi2_h8300 (operands[0], operands[1]));\n+      DONE;\n     }\n-}\"\n-  [(set_attr \"type\" \"multi\")\n-;; ??? This length is wrong for one case.\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n+}\")\n \n-(define_insn \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"general_operand\" \"g\")))]\n+;; I don't know why, but if I try to simplify extendhisi2 in the\n+;; natural way, I get about a 2X code bloat on the h8300 without\n+;; optimization, and a small bloat with optimization.  Weird.\n+(define_expand \"zero_extendhisi2_h8300\"\n+  [(set (reg:HI 1) (match_operand:HI 1 \"general_operand\" \"\"))\n+   (set (reg:SI 0) (zero_extend:SI (reg:HI 1)))\n+   (set (match_operand:SI 0 \"general_operand\" \"\" ) (reg:SI 0))]\n+  \"TARGET_H8300\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_operand\" \"0,g\")))]\n+  \"TARGET_H8300\"\n+  \"@\n+  sub.w\t%e0,%e0\n+  mov.w %e1,%f0\\;sub.w %e0,%e0\"\n+  [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"clobber,clobber\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_operand\" \"0,g\")))]\n   \"TARGET_H8300H\"\n-  \"*\n-{\n-  /* ??? See how often this gets optimized.  */\n-  if (REG_P (operands[1]) && (REGNO (operands[1]) == REGNO (operands[0])))\n-    return \\\"extu.l\t%S0\\\";\n-  else\n-    return \\\"mov.w\t%T1,%T0\\;extu.l\t%S0\\\";\n-}\"\n-  [(set_attr \"type\" \"multi\")\n-;; ??? This length is wrong for one case.\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n+  \"@\n+  extu.l\t%S0\n+  mov.w\t%T1,%T0\\;extu.l\t%S0\"\n+  [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"set,set\")])\n \n-(define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:HI (match_operand:QI 1 \"general_operand\" \"g\")))]\n+(define_expand \"extendqihi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(sign_extend:HI (match_operand:QI 1 \"general_operand\" \"\")))]\n   \"\"\n-  \"*\n-{\n-  if (TARGET_H8300)\n-    {\n-      /* ??? See how often this gets optimized.  */\n-      if (REG_P (operands[1]) && (REGNO (operands[1]) == REGNO (operands[0])))\n-\treturn \\\"bld\t#7,%s0\\;subx\t%t0,%t0\\\";\n-      else\n-\treturn \\\"mov.b\t%R1,%s0\\;bld\t#7,%s0\\;subx\t%t0,%t0\\\";\n-    }\n-  else\n-    {\n-      /* ??? See how often this gets optimized.  */\n-      if (REG_P (operands[1]) && (REGNO (operands[1]) == REGNO (operands[0])))\n-\treturn \\\"exts.w\t%T0\\\";\n-      else\n-\treturn \\\"mov.b\t%R1,%s0\\;exts.w\t%T0\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"multi\")\n-;; ??? Length is wrong in some cases.\n-   (set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"clobber\")])\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"general_operand\" \"0,g\")))]\n+  \"TARGET_H8300\"\n+  \"@\n+  bld\t#7,%s0\\;subx\t%t0,%t0\n+  mov.b\t%R1,%s0\\;bld\t#7,%s0\\;subx\t%t0,%t0\"\n+  [(set_attr \"length\" \"4,6\")\n+   (set_attr \"cc\" \"clobber,clobber\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"general_operand\" \"0,g\")))]\n+  \"TARGET_H8300H\"\n+  \"@\n+  exts.w\t%T0\n+  mov.b\t%R1,%s0\\;exts.w\t%T0\"\n+  [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"set,set\")])\n \n (define_expand \"extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extend:SI (match_operand:HI 1 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  if (TARGET_H8300)\n-    emit_insn (gen_extendhisi2_h8300 (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_extendhisi2_h8300h (operands[0], operands[1]));\n-  DONE;\n+  if (TARGET_H8300\n+      && GET_CODE (operands[1]) != CONST_INT)\n+    {\n+      emit_insn (gen_extendhisi2_h8300 (operands[0], operands[1]));\n+      DONE;\n+    }\n }\")\n \n+;; I don't know why, but if I try to simplify extendhisi2 in the\n+;; natural way, I get about a 2X code bloat on the h8300 without\n+;; optimization, and a small bloat with optimization.  Weird.\n (define_expand \"extendhisi2_h8300\"\n   [(set (reg:HI 1) (match_operand:HI 1 \"general_operand\" \"\"))\n    (set (reg:SI 0) (sign_extend:SI (reg:HI 1)))\n    (set (match_operand:SI 0 \"general_operand\" \"\" ) (reg:SI 0))]\n   \"TARGET_H8300\"\n   \"\")\n \n-(define_expand \"extendhisi2_h8300h\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(sign_extend:SI (match_operand:HI 1 \"general_operand\" \"\")))]\n-  \"TARGET_H8300H\"\n-  \"\")\n-\n-(define_insn \"extendhisi2_h8300_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))]\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"general_operand\" \"0,g\")))]\n   \"TARGET_H8300\"\n-  \"mov.w\t%T1,%f0\\;bld\t#7,%x0\\;subx\t%y0,%y0\\;subx\t%z0,%z0\"\n-  [(set_attr \"length\" \"10\")\n-   (set_attr \"cc\" \"clobber\")])\n+  \"@\n+  bld\t#7,%x0\\;subx\t%y0,%y0\\;subx\t%z0,%z0\n+  mov.w\t%T1,%f0\\;bld\t#7,%x0\\;subx\t%y0,%y0\\;subx\t%z0,%z0\"\n+  [(set_attr \"length\" \"6,8\")\n+   (set_attr \"cc\" \"clobber,clobber\")])\n \n-(define_insn \"extendhisi2_h8300h_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"general_operand\" \"g\")))]\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"general_operand\" \"0,g\")))]\n   \"TARGET_H8300H\"\n-  \"*\n-{\n-  /* ??? See how often this gets optimized.  */\n-  if (REG_P (operands[1]) && (REGNO (operands[1]) == REGNO (operands[0])))\n-    return \\\"exts.l\t%S0\\\";\n-  else\n-    return \\\"mov.w\t%T1,%T0\\;exts.l\t%S0\\\";\n-}\"\n-  [(set_attr \"length\" \"10\")\n-   (set_attr \"cc\" \"clobber\")])\n+  \"@\n+  exts.l\t%S0\n+  mov.w\t%T1,%T0\\;exts.l\t%S0\"\n+  [(set_attr \"length\" \"2,4\")\n+   (set_attr \"cc\" \"set,set\")])\n \f\n ;; ----------------------------------------------------------------------\n ;; SHIFTS\n@@ -1763,8 +1702,7 @@\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return emit_a_shift (insn, operands);\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"20\")\n+  [(set_attr \"length\" \"20\")\n ;; ??? We'd like to indicate that cc is set here, and it is for simple shifts.\n ;; However, for cases that loop or are done in pieces, cc does not contain\n ;; what we want.  Emit_a_shift is free to tweak cc_status as desired.\n@@ -1804,8 +1742,7 @@\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return emit_a_shift (insn, operands);\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"20\")\n+  [(set_attr \"length\" \"20\")\n ;; ??? We'd like to indicate that cc is set here, and it is for simple shifts.\n ;; However, for cases that loop or are done in pieces, cc does not contain\n ;; what we want.  Emit_a_shift is free to tweak cc_status as desired.\n@@ -1848,8 +1785,7 @@\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return emit_a_shift (insn, operands);\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"20\")\n+  [(set_attr \"length\" \"20\")\n ;; ??? We'd like to indicate that cc is set here, and it is for simple shifts.\n ;; However, for cases that loop or are done in pieces, cc does not contain\n ;; what we want.  Emit_a_shift is free to tweak cc_status as desired.\n@@ -1973,15 +1909,19 @@\n \t\t\t (const_int 1)\n \t\t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n-  \"sub.w\t%0,%0\\;bld\t%Z2,%Y1\\;bst\t#0,%X0\")\n+  \"sub.w\t%0,%0\\;bld\t%Z2,%Y1\\;bst\t#0,%X0\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"extract_1_hi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n \t(zero_extract:HI (match_operand:HI 1 \"bit_operand\" \"Ur\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n-  \"sub.w\t%0,%0\\;bld\t%Z2,%Y1\\;bst\t#0,%X0\")\n+  \"sub.w\t%0,%0\\;bld\t%Z2,%Y1\\;bst\t#0,%X0\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"insert_1\"\n   [(set (zero_extract:HI (match_operand:QI 0 \"bit_operand\" \"+Ur\")\n@@ -1991,7 +1931,9 @@\n \t\t\t (const_int 1)\n \t\t\t (const_int 0)))]\n   \"\"\n-  \"bld\t#0,%R2\\;bst\t%Z1,%Y0 ; i1\")\n+  \"bld\t#0,%R2\\;bst\t%Z1,%Y0 ; i1\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"4\")])\n \n ;; This is how combine canonicalizes this pattern.  This is perhaps a bug\n ;; in combine.c, but there is no problem with writing it this way so we do.\n@@ -2002,7 +1944,9 @@\n \t(lshiftrt:QI (match_operand:QI 2 \"bit_operand\" \"Ur\")\n \t\t     (match_operand:HI 3 \"immediate_operand\" \"i\")))]\n  \"\"\n- \"bld\t%Z3,%Y2\\;bst\t%Z1,%Y0; ei1\")\n+ \"bld\t%Z3,%Y2\\;bst\t%Z1,%Y0; ei1\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"4\")])\n \n ;; BAND, BOR, and BXOR patterns\n \n@@ -2014,7 +1958,9 @@\n \t\t\t     (match_operand:HI 2 \"immediate_operand\" \"i\"))\n \t    (match_operand:HI 3 \"bit_operand\" \"0\")]))]\n   \"\"\n-  \"bld\t%Z2,%Y1\\;%b4\t#0,%R0\\;bst\t#0,%R0; bl1\")\n+  \"bld\t%Z2,%Y1\\;%b4\t#0,%R0\\;bst\t#0,%R0; bl1\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"bitlogical_1_hi\"\n   [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n@@ -2024,7 +1970,9 @@\n \t\t\t     (match_operand:HI 2 \"immediate_operand\" \"i\"))\n \t    (match_operand:HI 3 \"bit_operand\" \"0\")]))]\n   \"\"\n-  \"bld\t%Z2,%Y1\\;%b4\t#0,%R0\\;bst\t#0,%R0; bl2\")\n+  \"bld\t%Z2,%Y1\\;%b4\t#0,%R0\\;bst\t#0,%R0; bl2\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"bitlogical_2\"\n   [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n@@ -2036,7 +1984,9 @@\n \t\t\t     (const_int 1)\n \t\t\t     (match_operand:HI 4 \"immediate_operand\" \"i\"))]))]\n   \"\"\n-  \"bld\t%Z2,%Y1\\;%b5\t%Z4,%Y3\\;bst\t#0,%R0; bl3\")\n+  \"bld\t%Z2,%Y1\\;%b5\t%Z4,%Y3\\;bst\t#0,%R0; bl3\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \n (define_insn \"bitlogical_2_hi\"\n   [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n@@ -2048,7 +1998,9 @@\n \t\t\t     (const_int 1)\n \t\t\t     (match_operand:HI 4 \"immediate_operand\" \"i\"))]))]\n   \"\"\n-  \"bld\t%Z2,%Y1\\;%b5\t%Z4,%Y3\\;bst\t#0,%R0; bl3\")\n+  \"bld\t%Z2,%Y1\\;%b5\t%Z4,%Y3\\;bst\t#0,%R0; bl3\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \n ;; This is how combine canonicalizes this pattern.  This is perhaps a bug\n ;; in combine.c, but there is no problem with writing it this way so we do.\n@@ -2062,7 +2014,9 @@\n \t    (lshiftrt:QI (match_operand:QI 4 \"bit_operand\" \"Ur\")\n \t\t\t (match_operand:HI 5 \"immediate_operand\" \"i\"))]))]\n   \"\"\n-  \"bld\t%Z3,%Y2\\;%b6\t%Z5,%Y4\\;bst\t%Z1,%Y0; bl5\")\n+  \"bld\t%Z3,%Y2\\;%b6\t%Z5,%Y4\\;bst\t%Z1,%Y0; bl5\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"6\")])\n \t\t\t\t\t\t     \n ;; This is how combine canonicalizes this pattern.  This is perhaps a bug\n ;; in combine.c, but there is no problem with writing it this way so we do.\n@@ -2075,7 +2029,9 @@\n \t\t     (match_operand:HI 4 \"immediate_operand\" \"1\")))]\n   \"GET_CODE (operands[3]) == CONST_INT && GET_CODE (operands[1]) == CONST_INT\n    && exact_log2 (INTVAL (operands[3])) == INTVAL (operands[1])\"\n-  \"bnot\t%Z1,%Y0\")\n+  \"bnot\t%Z1,%Y0\"\n+  [(set_attr \"cc\" \"none_0hit\")\n+   (set_attr \"length\" \"2\")])\n \n ;; ??? Implement BIAND, BIOR, BIXOR\n \n@@ -2187,8 +2143,7 @@\n \t\t (match_operand:HI 2 \"register_operand\" \"ra\")))]\n   \"TARGET_H8300\"\n   \"mov.w\t%T1,%T0\\;add.w\t%T2,%T0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"6\")\n+  [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n \n@@ -2312,28 +2267,16 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n-;(define_insn \"\"\n-;  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-;\t(MEM:HI (match_operand:HI 1 \"register_operand\" \"r\")))\n-;   (set (match_operand:HI 3 \"register_operand\" \"=r\")\n-;\t(zero_extract:HI (match_dup 0)\n-;\t\t\t (const_int 1)\n-;\t\t\t (match_operand:HI 2 \"general_operand\" \"g\")))\n-;   (set (MEM:HI (match_dup 1) (match_dup 3)))]\n-;  \"\"\n-;  \"bld\t#0,%3l\\;bst\t%Z2,%0%Y1\"\n-;  [(set_attr \"type\" \"multi\")\n-;   (set_attr \"length\" \"4\")\n-;   (set_attr \"cc\" \"clobber\")])\n-\n (define_insn \"fancybset1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n \t(ior:QI (subreg:QI \n \t\t (ashift:HI (const_int 1)\n \t\t\t    (subreg:QI (match_operand:HI 1 \"register_operand\" \"ri\") 0)) 0)\n \t\t(match_dup 0)))]\n   \"\"\n-  \"bset\t%X1,%R0\")\t\n+  \"bset\t%X1,%R0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybset\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n@@ -2342,7 +2285,9 @@\n \t\t\t    (match_operand:HI 1 \"nonmemory_operand\" \"ri\") ) 0)\n \t\t(match_operand:QI 2 \"general_operand\" \"Ur\")))]\n   \"\"\n-  \"mov.b\t%R2,%R0\\;bset\t%X1,%R0\")\t\n+  \"mov.b\t%R2,%R0\\;bset\t%X1,%R0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybclr4\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=Ur,Ur\")\n@@ -2355,7 +2300,9 @@\n   \"\"\n   \"@\n    bclr\t%X2,%R0; l1\n-   mov.b\t%R1,%X3\\;mov.b\t%3,%0\\;bclr\t%X2,%R0; l3\")\n+   mov.b\t%R1,%X3\\;mov.b\t%3,%0\\;bclr\t%X2,%R0; l3\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybclr5\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=Ur,Ur\")\n@@ -2368,7 +2315,9 @@\n   \"\"\n   \"@\n    bclr\t%X2,%R0; l1\n-   mov.b\t%R1,%X3\\;mov.b\t%3,%0\\;bclr\t%X2,%R0;l2\")\n+   mov.b\t%R1,%X3\\;mov.b\t%3,%0\\;bclr\t%X2,%R0;l2\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybclr2\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=U,r\")\n@@ -2378,7 +2327,9 @@\n \t\t     (match_operand:HI 2 \"nonmemory_operand\" \"ri,ri\") ) 0)\n \t (match_operand:QI 1 \"general_operand\" \"0,0\")))]\n   \"\"\n-  \"bclr\t%X2,%R0\")\n+  \"bclr\t%X2,%R0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybclr3\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=U,r\")\n@@ -2388,30 +2339,38 @@\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"ri,ri\")) 0)\n \t (match_operand:QI 1 \"general_operand\" \"0,0\")))]\n   \"\"\n-  \"bclr\t%X2,%R0\")\n+  \"bclr\t%X2,%R0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybclr\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r\")\n \t(and:QI (not:QI (match_operand:QI 1 \"general_operand\" \"0\"))\n \t\t(match_operand:QI 2 \"general_operand\" \"r\")))]\n   \"\"\n-  \"not\t%X0\\;and\t%X2,%X0\")\n+  \"not\t%X0\\;and\t%X2,%X0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybsetp3\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n \t(ior:QI (subreg:QI (ashift:HI (const_int 1)\n \t\t\t\t      (match_operand:QI 1 \"register_operand\" \"r\")) 0)\n \t\t(match_operand:QI 2 \"bit_operand\" \"0\")))]\n   \"\"\n-  \"bset\t%X1,%R0\")\n+  \"bset\t%X1,%R0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancybsetp2\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r,U\")\n \t(ior:QI (subreg:QI (ashift:HI (const_int 1)\n \t\t\t\t      (match_operand:QI 1 \"register_operand\" \"r,r\")) 0)\n \t\t(match_operand:QI 2 \"general_operand\" \"U,r\")))]\n   \"\"\n-  \"mov.b\t%R2,%R0\\;bset\t%X1,%R0\")\n+  \"mov.b\t%R2,%R0\\;bset\t%X1,%R0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n \t\n (define_insn \"fancybnot\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n@@ -2420,7 +2379,9 @@\n \t\t(match_operand:QI 2 \"bit_operand\" \"0\")))]\n \n   \"\"\n-  \"bnot\t%X1,%R0\")\n+  \"bnot\t%X1,%R0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"fancy_btst\"\n   [(set (pc)\n@@ -2472,6 +2433,5 @@\n \t\t\t(const_int 1)))]\n   \"\"\n   \"bld\t#0,%R2\\;bist\t%1,%0\"\n-  [(set_attr \"type\" \"arith\")\n-   (set_attr \"length\" \"4\")\n+  [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])"}]}