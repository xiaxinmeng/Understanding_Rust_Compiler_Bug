{"sha": "d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "node_id": "C_kwDOANBUbNoAKGQ5ZmUwZTUzZDhkYmM3Y2FlMzE3MGNkNmFkNzgzMTAwZWMzYTcwNGE", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2021-10-08T08:02:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:03Z"}, "message": "[Ada] Fix type conversion handling in validity checks\n\ngcc/ada/\n\n\t* checks.adb (Insert_Valid_Check): in case of checked type\n\tconversion, update Typ to match Exp's type and add call to\n\tAnalyze_And_Resolve.", "tree": {"sha": "88011fa8fe95727127ae8563e847858957f95a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88011fa8fe95727127ae8563e847858957f95a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b47b5438b9b95cea90f8d925518e893259255a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47b5438b9b95cea90f8d925518e893259255a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47b5438b9b95cea90f8d925518e893259255a50"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "c06012b57a7c6f6b2bf7b0909f7671db90ef5faa", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "patch": "@@ -8077,7 +8077,7 @@ package body Checks is\n       Is_High_Bound : Boolean   := False)\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n-      Typ : constant Entity_Id  := Etype (Expr);\n+      Typ : Entity_Id           := Etype (Expr);\n       Exp : Node_Id;\n \n    begin\n@@ -8137,6 +8137,7 @@ package body Checks is\n       while Nkind (Exp) = N_Type_Conversion loop\n          Exp := Expression (Exp);\n       end loop;\n+      Typ := Etype (Exp);\n \n       --  Do not generate a check for a variable which already validates the\n       --  value of an assignable object.\n@@ -8217,6 +8218,14 @@ package body Checks is\n                Set_Do_Range_Check (Validated_Object (Var_Id), False);\n             end if;\n \n+            --  In case of a type conversion, an expansion of the expr may be\n+            --  needed (eg. fixed-point as actual).\n+\n+            if Exp /= Expr then\n+               pragma Assert (Nkind (Expr) = N_Type_Conversion);\n+               Analyze_And_Resolve (Expr);\n+            end if;\n+\n             PV := New_Occurrence_Of (Var_Id, Loc);\n \n          --  Otherwise the expression does not denote a variable. Force its"}]}