{"sha": "b47fbc5307fe0f03ff302627d8977c402e34feff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3ZmJjNTMwN2ZlMGYwM2ZmMzAyNjI3ZDg5NzdjNDAyZTM0ZmVmZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-05-21T12:44:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-05-21T12:44:35Z"}, "message": "pa.c (pa_print_operand): New 'o' output modifier.\n\n2015-05-20  Jeff Law  <law@redhat.com>\n\n\t* config/pa/pa.c (pa_print_operand): New 'o' output modifier.\n\t(pa_mem_shadd_constant_p): Renamed from pa_shadd_constant_p.\n\t(pa_shadd_constant_p): Allow constants for shadd insns rather\n\tthan valid scaling constants for memory addresses.\n\t* config/pa/pa-protos.h (pa_mem_shadd_constant_p): Add prototype.\n\t* config/pa/predicates.md (mem_shadd_operand): New predicate.\n\t* config/pa/pa.md (shift-add insns using MULT): Use mem_shadd_operand.\n\t(shift-add insns using ASHIFT): New patterns.\n\n\t* gcc.target/hppa/hppa.exp: New target test driver.\n\t* gcc.target/hppa/shadd-1.c: New test.\n\nFrom-SVN: r223480", "tree": {"sha": "33e14240d1aea93da7c0d3d7c5748f572def94a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e14240d1aea93da7c0d3d7c5748f572def94a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b47fbc5307fe0f03ff302627d8977c402e34feff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47fbc5307fe0f03ff302627d8977c402e34feff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47fbc5307fe0f03ff302627d8977c402e34feff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47fbc5307fe0f03ff302627d8977c402e34feff/comments", "author": null, "committer": null, "parents": [{"sha": "0daff5e0c87a619093f4718c0ec212b1b461bfde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0daff5e0c87a619093f4718c0ec212b1b461bfde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0daff5e0c87a619093f4718c0ec212b1b461bfde"}], "stats": {"total": 120, "additions": 117, "deletions": 3}, "files": [{"sha": "c02cdadc7de02a7d08e1a41fb245c90bb140d5de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -15,6 +15,17 @@\n \t* genrecog.c (MAX_DEPTH, MIN_NUM_STATEMENTS, MAX_NUM_STATEMENTS):\n \tChange to unsigned int.\n \n+2015-05-20  Jeff Law  <law@redhat.com>\n+\n+\t* config/pa/pa.c (pa_print_operand): New 'o' output modifier.\n+\t(pa_mem_shadd_constant_p): Renamed from pa_shadd_constant_p.\n+\t(pa_shadd_constant_p): Allow constants for shadd insns rather\n+\tthan valid scaling constants for memory addresses.\n+\t* config/pa/pa-protos.h (pa_mem_shadd_constant_p): Add prototype.\n+\t* config/pa/predicates.md (mem_shadd_operand): New predicate.\n+\t* config/pa/pa.md (shift-add insns using MULT): Use mem_shadd_operand.\n+\t(shift-add insns using ASHIFT): New patterns.\n+\n 2015-05-20  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* bb-reorder.c (set_edge_can_fallthru_flag): Use rtx_jump_insn where"}, {"sha": "58cc463b7c41b952db43bf37ab4c0ae68fa7be2b", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -85,6 +85,7 @@ extern int pa_and_mask_p (unsigned HOST_WIDE_INT);\n extern int pa_cint_ok_for_move (HOST_WIDE_INT);\n extern int pa_ior_mask_p (unsigned HOST_WIDE_INT);\n extern int pa_ldil_cint_p (HOST_WIDE_INT);\n+extern int pa_mem_shadd_constant_p (int);\n extern int pa_shadd_constant_p (int);\n extern int pa_zdepi_cint_p (unsigned HOST_WIDE_INT);\n "}, {"sha": "f99cf335f4998d038ed11f50c915d9bcff4ba031", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -5242,6 +5242,11 @@ pa_print_operand (FILE *file, rtx x, int code)\n       gcc_assert (GET_CODE (x) == CONST_INT);\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC, 32 - (INTVAL (x) & 31));\n       return;\n+    case 'o':\n+      gcc_assert (GET_CODE (x) == CONST_INT\n+\t\t  && (INTVAL (x) == 1 || INTVAL (x) == 2 || INTVAL (x) == 3));\n+      fprintf (file, \"%d\", INTVAL (x));\n+      return;\n     case 'O':\n       gcc_assert (GET_CODE (x) == CONST_INT && exact_log2 (INTVAL (x)) >= 0);\n       fprintf (file, \"%d\", exact_log2 (INTVAL (x)));\n@@ -8729,11 +8734,22 @@ pa_fmpysuboperands (rtx *operands)\n }\n \n /* Return 1 if the given constant is 2, 4, or 8.  These are the valid\n+   constants for a MULT embedded inside a memory address.  */\n+int\n+pa_mem_shadd_constant_p (int val)\n+{\n+  if (val == 2 || val == 4 || val == 8)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+/* Return 1 if the given constant is 1, 2, or 3.  These are the valid\n    constants for shadd instructions.  */\n int\n pa_shadd_constant_p (int val)\n {\n-  if (val == 2 || val == 4 || val == 8)\n+  if (val == 1 || val == 2 || val == 3)\n     return 1;\n   else\n     return 0;"}, {"sha": "73c8f6bce13ae3f3001266129a7b4a7c0a958b67", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -6337,7 +6337,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n+\t\t\t  (match_operand:SI 3 \"mem_shadd_operand\" \"\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"{sh%O3addl %2,%1,%0|shladd,l %2,%O3,%1,%0} \"\n@@ -6347,13 +6347,33 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (mult:DI (match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:DI 3 \"shadd_operand\" \"\"))\n+\t\t\t  (match_operand:DI 3 \"mem_shadd_operand\" \"\"))\n \t\t (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"TARGET_64BIT\"\n   \"shladd,l %2,%O3,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 3 \"shadd_operand\" \"\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"{sh%o3addl %2,%1,%0|shladd,l %2,%o3,%1,%0} \"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (ashift:DI (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:DI 3 \"shadd_operand\" \"\"))\n+\t\t (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_64BIT\"\n+  \"shladd,l %2,%o3,%1,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_expand \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"lhs_lshift_operand\" \"\")"}, {"sha": "bbbaa852b25f57be5e48c1840c641b2f8d75082e", "filename": "gcc/config/pa/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Fconfig%2Fpa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpredicates.md?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -581,6 +581,10 @@\n ;; Return 1 if OP is a CONST_INT with the value 2, 4, or 8.  These are\n ;; the valid constants for shadd instructions.\n \n+(define_predicate \"mem_shadd_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"pa_mem_shadd_constant_p (INTVAL (op))\")))\n+\n (define_predicate \"shadd_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"pa_shadd_constant_p (INTVAL (op))\")))"}, {"sha": "dd6c236d9064eea17d19de1ab3736ae6fd742c5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -28,6 +28,11 @@\n \t* gcc.dg/format/c90-printf-1.c: Likewise. Add tests for column\n \tlocations within strings with embedded escape sequences.\n \n+2015-05-20  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.target/hppa/hppa.exp: New target test driver.\n+\t* gcc.target/hppa/shadd-1.c: New test.\n+\n 2015-05-20  Alex Velenko  <Alex.Velenko@arm.com>\n \n         * gcc.target/arm/thumb1-far-jump-2.c (r4): Added int in definition."}, {"sha": "a47141d6d5d17bfe78e4078dc02a510a6eae98e9", "filename": "gcc/testsuite/gcc.target/hppa/hppa.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fhppa.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fhppa.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fhppa.exp?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 1997-2015 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an m68k target.\n+if { ![istarget hppa*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "de4776bc5b04f95c44dd3cfcdad21e37ed29cfb4", "filename": "gcc/testsuite/gcc.target/hppa/shadd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fshadd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47fbc5307fe0f03ff302627d8977c402e34feff/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fshadd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fhppa%2Fshadd-1.c?ref=b47fbc5307fe0f03ff302627d8977c402e34feff", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-times \"sh.add\" 1 } }  */\n+\n+typedef struct\n+{\n+  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];\n+}\n+__sigset_t;\n+int\n+__sigaddset (__sigset_t * __set, int __sig, int __stuff)\n+{\n+  unsigned long int __word =\n+    (((__sig) - 1) / (8 * sizeof (unsigned long int)));\n+  return __set->__val[__word] |= __stuff;\n+}"}]}