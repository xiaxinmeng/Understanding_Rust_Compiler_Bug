{"sha": "e33f43b9a67e362352709069bb71f97f7e94dc25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzZjQzYjlhNjdlMzYyMzUyNzA5MDY5YmI3MWY5N2Y3ZTk0ZGMyNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-08T08:59:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-08T08:59:17Z"}, "message": "re PR tree-optimization/61680 (vectorization gives wrong answer for sandybridge target)\n\n2014-07-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61680\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n\tHandle properly all read-write dependences with group accesses.\n\n\t* gcc.dg/vect/pr61680.c: New testcase.\n\nFrom-SVN: r212348", "tree": {"sha": "a0149ef0766bf832169cea623a1943b156dc656a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0149ef0766bf832169cea623a1943b156dc656a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33f43b9a67e362352709069bb71f97f7e94dc25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33f43b9a67e362352709069bb71f97f7e94dc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33f43b9a67e362352709069bb71f97f7e94dc25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33f43b9a67e362352709069bb71f97f7e94dc25/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f6284d27f11d16cced47627deb022041f8c9cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6284d27f11d16cced47627deb022041f8c9cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6284d27f11d16cced47627deb022041f8c9cac"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "726c86f4b6e8028436188d3c286ab120fb12c5a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e33f43b9a67e362352709069bb71f97f7e94dc25", "patch": "@@ -1,3 +1,9 @@\n+2014-07-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61680\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n+\tHandle properly all read-write dependences with group accesses.\n+\n 2014-07-08  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/61576"}, {"sha": "523e6c423556963da4c2beb888130fbe4407a2ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e33f43b9a67e362352709069bb71f97f7e94dc25", "patch": "@@ -1,3 +1,8 @@\n+2014-07-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61680\n+\t* gcc.dg/vect/pr61680.c: New testcase.\n+\n 2014-07-08  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/61576"}, {"sha": "605a651aa3b745051ad612217bc9d3164c76156f", "filename": "gcc/testsuite/gcc.dg/vect/pr61680.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr61680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr61680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr61680.c?ref=e33f43b9a67e362352709069bb71f97f7e94dc25", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+double v[4096][4];\n+\n+__attribute__((noinline, noclone)) void\n+bar (double p[][4])\n+{\n+  int i;\n+  double d = 172.0;\n+  for (i = 0; i < 4096; i++)\n+    {\n+      if (p[i][0] != 6.0 || p[i][1] != 6.0 || p[i][2] != 10.0)\n+\t__builtin_abort ();\n+      if (__builtin_fabs (p[i][3] - d) > 0.25)\n+\t__builtin_abort ();\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  int i;\n+  double w[4096][4], t;\n+  for (i = 0; i < 4096; i++)\n+    {\n+      w[i][0] = v[i][0] + 2.0;\n+      w[i][1] = v[i][1] + 1.0;\n+      w[i][2] = v[i][2] + 4.0;\n+      w[i][3] = (w[i][0] * w[i][0] + w[i][1] * w[i][1] + w[i][2] * w[i][2]);\n+    }\n+  bar (w);\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < 4096; i++)\n+    {\n+      v[i][0] = 4.0;\n+      v[i][1] = 5.0;\n+      v[i][2] = 6.0;\n+    }\n+  foo ();\n+  return 0;\n+}"}, {"sha": "ea2316cefa057fbb3c9d2e5b5395f1e5e358661f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33f43b9a67e362352709069bb71f97f7e94dc25/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=e33f43b9a67e362352709069bb71f97f7e94dc25", "patch": "@@ -375,11 +375,14 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t\t.. = a[i+1];\n \t     where we will end up loading { a[i], a[i+1] } once, make\n \t     sure that inserting group loads before the first load and\n-\t     stores after the last store will do the right thing.  */\n-\t  if ((STMT_VINFO_GROUPED_ACCESS (stmtinfo_a)\n-\t       && GROUP_SAME_DR_STMT (stmtinfo_a))\n-\t      || (STMT_VINFO_GROUPED_ACCESS (stmtinfo_b)\n-\t\t  && GROUP_SAME_DR_STMT (stmtinfo_b)))\n+\t     stores after the last store will do the right thing.\n+\t     Similar for groups like\n+\t        a[i] = ...;\n+\t\t... = a[i];\n+\t\ta[i+1] = ...;\n+\t     where loads from the group interleave with the store.  */\n+\t  if (STMT_VINFO_GROUPED_ACCESS (stmtinfo_a)\n+\t      || STMT_VINFO_GROUPED_ACCESS (stmtinfo_b))\n \t    {\n \t      gimple earlier_stmt;\n \t      earlier_stmt = get_earlier_stmt (DR_STMT (dra), DR_STMT (drb));"}]}