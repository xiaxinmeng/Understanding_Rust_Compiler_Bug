{"sha": "17d6c819b243430b45e57e2a556fa37912f2c7e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkNmM4MTliMjQzNDMwYjQ1ZTU3ZTJhNTU2ZmEzNzkxMmYyYzdlNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-12T10:39:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-12T10:39:42Z"}, "message": "* analyze_brprob: New file.\n\nFrom-SVN: r43252", "tree": {"sha": "73937205f6140987e2df1ea71df93726dd6a918c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73937205f6140987e2df1ea71df93726dd6a918c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d6c819b243430b45e57e2a556fa37912f2c7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d6c819b243430b45e57e2a556fa37912f2c7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d6c819b243430b45e57e2a556fa37912f2c7e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d6c819b243430b45e57e2a556fa37912f2c7e4/comments", "author": null, "committer": null, "parents": [{"sha": "aa18f20e7406ee235e94d6360bf4b3e349088544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa18f20e7406ee235e94d6360bf4b3e349088544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa18f20e7406ee235e94d6360bf4b3e349088544"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "05c29c5e96b613820271e634aa006caa09a1f0c5", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d6c819b243430b45e57e2a556fa37912f2c7e4/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d6c819b243430b45e57e2a556fa37912f2c7e4/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=17d6c819b243430b45e57e2a556fa37912f2c7e4", "patch": "@@ -1,3 +1,7 @@\n+Tue Jun 12 12:21:40 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* analyze_brprob: New file.\n+\n 2001-06-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc_build: Output information about the commands used to "}, {"sha": "48068097d104e23adf5973dc902738e0518961a7", "filename": "contrib/analyze_brprob", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d6c819b243430b45e57e2a556fa37912f2c7e4/contrib%2Fanalyze_brprob", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d6c819b243430b45e57e2a556fa37912f2c7e4/contrib%2Fanalyze_brprob", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fanalyze_brprob?ref=17d6c819b243430b45e57e2a556fa37912f2c7e4", "patch": "@@ -0,0 +1,149 @@\n+#!/usr/bin/awk -f\n+# Script to analyze experimental results of our branch prediction heursitics\n+# Contributed by Jan Hubicka, SuSE inc.\n+# Copyright (C) 2001 Free Software Foundation, Inc.\n+#\n+# This file is part of GNU CC.\n+#\n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+#\n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+#\n+# This script is used to calculate two basic properties of the branch prediction\n+# heursitics - coverage and hitrate.  Coverage is number of executions of given\n+# branch matched by the heuristics and hitrate is probability that once branch is\n+# predicted as taken it is really taken.\n+#\n+# These values are usefull to determine quality of given heuristics and hitrate\n+# may be directly used in predict.c.\n+#\n+# Usage:\n+#  step 1: compile and profile your program.  You need to use -fprofile-arcs\n+#    flag to get the profiles\n+#  step 2: Generate log files.  The information about given heuristics are\n+#    saved into *.life dumps.  You need to pass -df swtich to compiler as well\n+#    as -fbranch-probabilities to get results of profiling noted in the dumps.\n+#    Ensure that there is no \"Arc profiling: some edge counts were bad.\" warnings.\n+#    Keep the -fprofile-arcs switch to ensure that CFGs match.\n+#  step 3: Run this script to concatetation of all *.life files:\n+#    analyze_brprob `find . -name *.life`\n+#    the information is collected and print once all files are parsed.  This\n+#    may take a while.\n+#    Note that script does use bc to perform long arithmetic.\n+#  step 4: Read the results.  Basically following table is printed:\n+#  (this is just example from very early stages of branch prediction pass\n+#   development, so please don't take these numbers seriously)\n+#\n+#HEURISTICS                  BRANCHES  (REL)  HITRATE             COVERAGE  (REL)\n+#opcode                          2889  83.7%  94.96%/ 97.62%      7516383  75.3%\n+#pointer                          246   7.1%  99.69%/ 99.86%       118791   1.2%\n+#loop header                      449  13.0%  98.32%/ 99.07%        43553   0.4%\n+#first match                     3450 100.0%  89.92%/ 97.27%      9979782 100.0%\n+#loop exit                        924  26.8%  88.95%/ 95.58%      9026266  90.4%\n+#error return                     150   4.3%  64.48%/ 86.81%       453542   4.5%\n+#call                             803  23.3%  51.66%/ 98.61%      3614037  36.2%\n+#loop branch                       51   1.5%  99.26%/ 99.27%        26854   0.3%\n+#noreturn call                    951  27.6% 100.00%/100.00%      1759809  17.6%\n+#\n+#  The heuristics called \"first match\" is heuristics used by gcc branch\n+#  prediction pass and it predicts 89.92% branches correctly.  \n+#\n+#  The quality of heuristics can be rated using both, coverage and hitrate\n+#  parameters.  For example \"loop branch\" heuristics (predicting loopback edge\n+#  as taken) have both very high hitrate and coverage, so it is very usefull.\n+#  On the other hand, \"exit block\" heuristics (predicting exit edges as not\n+#  taken) have good hitrate, but poor coverage, so only 3 branches has been\n+#  predicted.  The \"loop header\" heuristics have problem, since it tends to\n+#  misspredict.\n+#\n+#  The implementation of this script is somewhat brute force.  My awk skills\n+#  are limited.\n+\n+function longeval(e)\n+{\n+  e = \"echo \\\"scale = 2 ;\"e\"\\\" | bc\"\n+  e | getline res\n+  close (e)\n+  return res\n+}\n+\n+BEGIN {nnames = 0}\n+\n+/^  .* heuristics: .*.$/ {\n+    name=$0\n+    sub (/^  /,\"\",name)\n+    sub (/ heuristics: .*.$/,\"\",name)\n+    if (!(name in branches))\n+      {\n+\tnames[nnames] = name\n+\tbranches[name]=0\n+\tcounts[name]=0\n+\thits[name]=0\n+\tphits[name]=0\n+\tnnames++\n+      }\n+    branches[name]+=1\n+  }\n+\n+/^  .* heuristics: .*. exec [0-9]* hit [0-9]* (.*.)$/ {\n+    name=$0\n+    sub (/^  /,\"\",name)\n+    sub (/ heuristics: .*. exec [0-9]* hit [0-9]* (.*.)$/,\"\",name)\n+    pred=$0\n+    sub (/^  .* heuristics: /,\"\",pred)\n+    sub (/. exec [0-9]* hit [0-9]* (.*.)$/,\"\",pred)\n+    count=$0\n+    sub (/^  .* heuristics: .*. exec /,\"\",count)\n+    sub (/ hit [0-9]* (.*.)$/,\"\",count)\n+    hit=$0\n+    sub (/^  .* heuristics: .*. exec [0-9]* hit /,\"\",hit)\n+    sub (/ (.*.)$/,\"\",hit)\n+\n+    if (int(pred) < 50.0)\n+      {\n+        hit = count - hit;\n+      }\n+    counts[name]=counts[name] \"+\" count\n+    hits[name]=hits[name] \"+\" hit\n+    if (int (hit) < (int (count) / 2))\n+      hit = count - hit;\n+    phits[name]=phits[name] \"+\" hit\n+\n+    #BC crashes on long strings.  Irritating.\n+    if (length(counts[name]) > 4000)\n+      {\n+\tcounts[name] = longeval (counts[name])\n+\thits[name] = longeval (hits[name])\n+\tphits[name] = longeval (phits[name])\n+      }\n+  }\n+END {\n+  # Heuristics called combined predicts just everything.\n+  maxcounts = longeval (counts[\"first match\"])\n+  maxbranches = branches[\"first match\"]\n+  max = names[\"firat match\"]\n+  printf(\"HEURISTICS                  BRANCHES  (REL)  HITRATE             COVERAGE  (REL)\\n\")\n+  for (i = 0; i < nnames ; i++)\n+   {\n+     name = names[i]\n+     counts[name] = longeval (counts[name])\n+     printf (\"%-27s %8i %5.1f%% %6s%%/%6s%% %12s %5.1f%%\\n\",\n+\t     name,\n+\t     branches[name], branches[name] * 100 / maxbranches,\n+\t     longeval (\"(\"hits[name]\") * 100 /(\" counts[name]\"-0.00001)\"),\n+\t     longeval (\"(\"phits[name]\") * 100 /(\" counts[name]\"-0.00001)\"),\n+\t     counts[name], longeval (counts[name]\" * 100 / (\"maxcounts\"-0.00001)\"))\n+   }\n+}"}]}