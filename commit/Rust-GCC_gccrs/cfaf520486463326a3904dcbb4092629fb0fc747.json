{"sha": "cfaf520486463326a3904dcbb4092629fb0fc747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhZjUyMDQ4NjQ2MzMyNmEzOTA0ZGNiYjQwOTI2MjlmYjBmYzc0Nw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:21:13Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:21:13Z"}, "message": "cris: try to generate zero-based comparisons\n\n* config/cris/cris.c (cris_reduce_compare): New function.\n* config/cris/cris-protos.h  (cris_reduce_compare): Add prototype.\n* config/cris/cris.md (\"cbranch<mode>4\", \"cbranchdi4\", \"cstoredi4\")\n(cstore<mode>4\"): Apply cris_reduce_compare in expanders.\n\nThe decc0ration work of the CRIS port made me look closer at the\ncode for trivial comparisons, as in the condition for branches\nand conditional-stores, like in:\n\nvoid g(short int a, short int b)\n{\n  short int c = a + b;\n\n  if (c >= 0)\n    foo ();\n}\n\nAt -O2, the cc0 version of the CRIS port has an explicit\n*uneliminated* compare instruction (\"cmp.w -1,$r10\") instead of\nan (eliminated) compare against 0 (which below I'll call a\nzero-compare).  This for the CRIS-cc0 version, but I see this\nalso for a much older gcc, at 4.7.  For the decc0rated port, the\ncompare *is* a test against 0, eventually eliminated.  To wit,\nfor cc0 (mind the delay-slot):\n\n_g:\n\tsubq 4,$sp\n\tadd.w $r11,$r10\n\tcmp.w -1,$r10\n\tble .L9\n\tmove $srp,[$sp]\n\n\tjsr _foo\n.L9:\n\tjump [$sp+]\n\nThe compare instruction is expected to be eliminated, i.e.  the\nfollowing diff to the above is desired, modulo the missing\nsibling call, which corresponds to what I get from 4.7 and for\nthe decc0rated port:\n\n!--- a\tWed Feb  5 15:22:27 2020\n!+++ b\tWed Feb  5 15:22:51 2020\n!@@ -1,8 +1,7 @@\n! _g:\n!\t subq 4,$sp\n!\t add.w $r11,$r10\n!-\tcmp.w -1,$r10\n!-\tble .L9\n!+\tbmi .L9\n!\t move $srp,[$sp]\n!\n!\t jsr _foo\n\nTracking this difference, I see that for both cc0-CRIS and the\ndecc0rated CRIS, the comparison actually starts out as a compare\nagainst -1 at \"expand\" time, but is transformed for decc0rated\nCRIS to a zero-compare in \"cse1\".\n\nFor CRIS-cc0 \"cse1\" does try to replace the compare with a\nzero-compare, but fails because at the same time it tries to\nreplace the c operand with (a + b).  Or some such; it fails and\nno other pass succeeds.  I was not into fixing cc0-handling in\ncore gcc, so I didn't look closer.\n\nBTW, at first, I was a bit surprised to see that for compares\nagainst a constant, a zero-compare is not canonical RTX for\n*all* conditions, and that instead only a subset of all RTX\nconditions against a constant are canonical, transforming one\ncondition to the canonical one by adding 1 or -1 to the\nconstant.  It does makes sense at a closer look, but still not\nso much when emitting RTL.\n\nThere are several places that mention in comments that emitting\nRTX as zero-compare is preferable, but nothing is done about it.\nSome generic code instead seems confused that the *target* is\nhelped by seeing canonical RTX, or perhaps it (its authors) like\nme, confused about what a canonical comparison is.  For example,\nprepare_cmp_insn calls canonicalize_comparison last before\nemitting the actual instructions.  I see most ports for various\nport-specific reasons does their own massaging in their cbranch\nand cstore expanders.  Still, the suboptimal compares *should*\nbe fixed at expand time; better start out right than just\nrelying on later optimizations.\n\nThis kind of change is not acceptable in the current gcc\ndevelopment stage, at least as a change in generic code.\nHowever, it's problematic enough that I chose to fix this right\nnow in the CRIS port.  For that, I claim a possibly\nlong-standing regression.  After this, code before and after\ndecc0ration is similar enough that I can spot\ncompare-elimination-efforts and apply regression test-cases\nwithout them drowning in cc0-specific xfailing.\n\nI hope to eventually lift out cris_reduce_compare (renamed) into\nsay expmed.c, called in e.g. emit_store_flag_1 (replacing the\nin-line code) and prepare_cmp_insn.  Later.", "tree": {"sha": "b32d7ee0855b25253978f730ba45f83ab11a84fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32d7ee0855b25253978f730ba45f83ab11a84fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfaf520486463326a3904dcbb4092629fb0fc747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfaf520486463326a3904dcbb4092629fb0fc747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfaf520486463326a3904dcbb4092629fb0fc747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfaf520486463326a3904dcbb4092629fb0fc747/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0f07ef0efc27f7e23b97b719e515d478a6b524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0f07ef0efc27f7e23b97b719e515d478a6b524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0f07ef0efc27f7e23b97b719e515d478a6b524"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "39de837b32693c9d60bd65b68e00c51066bc3cbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfaf520486463326a3904dcbb4092629fb0fc747", "patch": "@@ -1,3 +1,11 @@\n+2020-02-10  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tTry to generate zero-based comparisons.\n+\t* config/cris/cris.c (cris_reduce_compare): New function.\n+\t* config/cris/cris-protos.h  (cris_reduce_compare): Add prototype.\n+\t* config/cris/cris.md (\"cbranch<mode>4\", \"cbranchdi4\", \"cstoredi4\")\n+\t(cstore<mode>4\"): Apply cris_reduce_compare in expanders.\n+\n 2020-02-10  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/91913"}, {"sha": "6f6d815678a6636d9b67ca164bbd5bb4439a5cf8", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=cfaf520486463326a3904dcbb4092629fb0fc747", "patch": "@@ -38,6 +38,7 @@ extern bool cris_constant_index_p (const_rtx);\n extern bool cris_base_p (const_rtx, bool);\n extern bool cris_base_or_autoincr_p (const_rtx, bool);\n extern bool cris_bdap_index_p (const_rtx, bool);\n+extern void cris_reduce_compare (rtx *, rtx *, rtx *);\n extern bool cris_biap_index_p (const_rtx, bool);\n extern bool cris_legitimate_address_p (machine_mode, rtx, bool);\n extern bool cris_store_multiple_op_p (rtx);"}, {"sha": "91cb63c01e723c28dc04e5fb191e9c4bace7a4a7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=cfaf520486463326a3904dcbb4092629fb0fc747", "patch": "@@ -3053,6 +3053,63 @@ cris_split_movdx (rtx *operands)\n   return val;\n }\n \n+/* Try to change a comparison against a constant to be against zero, and\n+   an unsigned compare against zero to be an equality test.  Beware:\n+   only valid for compares of integer-type operands.  Also, note that we\n+   don't use operand 0 at the moment.  */\n+\n+void\n+cris_reduce_compare (rtx *relp, rtx *, rtx *op1p)\n+{\n+  rtx op1 = *op1p;\n+  rtx_code code = GET_CODE (*relp);\n+\n+  /* Code lifted mostly from emit_store_flag_1.  */\n+  switch (code)\n+    {\n+    case LT:\n+      if (op1 == const1_rtx)\n+\tcode = LE;\n+      break;\n+    case LE:\n+      if (op1 == constm1_rtx)\n+\tcode = LT;\n+      break;\n+    case GE:\n+      if (op1 == const1_rtx)\n+\tcode = GT;\n+      break;\n+    case GT:\n+      if (op1 == constm1_rtx)\n+\tcode = GE;\n+      break;\n+    case GEU:\n+      if (op1 == const1_rtx)\n+\tcode = NE;\n+      break;\n+    case LTU:\n+      if (op1 == const1_rtx)\n+\tcode = EQ;\n+      break;\n+    case GTU:\n+      if (op1 == const0_rtx)\n+\tcode = NE;\n+      break;\n+    case LEU:\n+      if (op1 == const0_rtx)\n+\tcode = EQ;\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  if (code != GET_CODE (*relp))\n+  {\n+    *op1p = const0_rtx;\n+    PUT_CODE (*relp, code);\n+  }\n+}\n+\n /* The expander for the prologue pattern name.  */\n \n void"}, {"sha": "fd8355c23a3a30430d7de622284999a7f318ae26", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfaf520486463326a3904dcbb4092629fb0fc747/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=cfaf520486463326a3904dcbb4092629fb0fc747", "patch": "@@ -3539,7 +3539,7 @@\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\")\n+  \"cris_reduce_compare (&operands[0], &operands[1], &operands[2]);\")\n \n (define_expand \"cbranchdi4\"\n   [(set (cc0)\n@@ -3552,6 +3552,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n+  cris_reduce_compare (&operands[0], &operands[1], &operands[2]);\n   if (TARGET_V32 && !REG_P (operands[1]))\n     operands[1] = force_reg (DImode, operands[1]);\n   if (TARGET_V32 && MEM_P (operands[2]))\n@@ -3652,6 +3653,7 @@\n \t [(cc0) (const_int 0)]))]\n   \"\"\n {\n+  cris_reduce_compare (&operands[1], &operands[2], &operands[3]);\n   if (TARGET_V32 && !REG_P (operands[2]))\n     operands[2] = force_reg (DImode, operands[2]);\n   if (TARGET_V32 && MEM_P (operands[3]))\n@@ -3666,7 +3668,7 @@\n \t(match_operator:SI 1 \"ordered_comparison_operator\"\n \t [(cc0) (const_int 0)]))]\n   \"\"\n-  \"\")\n+  \"cris_reduce_compare (&operands[1], &operands[2], &operands[3]);\")\n \n ;; Like bCC, we have to check the overflow bit for\n ;; signed conditions."}]}