{"sha": "b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5MDNkOWY1YmViNWRiNDQwZTU2ZmEwNTdkMzJjNmYxM2Y3YzVlYw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-07T00:24:03Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-07T14:44:53Z"}, "message": "libstdc++: Add [range.istream]\n\nThis patch adds ranges::basic_istream_view and ranges::istream_view.  This seems\nto be the last missing part of the ranges header.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (ranges::__detail::__stream_extractable,\n\tranges::basic_istream_view, ranges::istream_view): Define.\n\t* testsuite/std/ranges/istream_view: New test.", "tree": {"sha": "bc647bce465c57a8841a03230c8c28c67c60056c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc647bce465c57a8841a03230c8c28c67c60056c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/comments", "author": null, "committer": null, "parents": [{"sha": "55d4cbcba8f1c74fa90ed53059114ccaaf549ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d4cbcba8f1c74fa90ed53059114ccaaf549ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d4cbcba8f1c74fa90ed53059114ccaaf549ad7"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "4e010016a0357553d5e19206b1dc37aee85fdb72", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "patch": "@@ -1,5 +1,9 @@\n 2020-02-07  Patrick Palka  <ppalka@redhat.com>\n \n+\t* include/std/ranges (ranges::__detail::__stream_extractable,\n+\tranges::basic_istream_view, ranges::istream_view): Define.\n+\t* testsuite/std/ranges/istream_view: New test.\n+\n \tImplement C++20 range adaptors\n \t* include/std/ranges: Include <bits/refwrap.h> and <tuple>.\n \t(subrange::_S_store_size): Mark as const instead of constexpr to"}, {"sha": "dd0c5cf6aa75fc7c84176509f4c9df264a7d388e", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "patch": "@@ -951,6 +951,100 @@ namespace views\n   inline constexpr _Iota iota{};\n } // namespace views\n \n+  namespace __detail\n+  {\n+    template<typename _Val, typename _CharT, typename _Traits>\n+      concept __stream_extractable\n+\t= requires(basic_istream<_CharT, _Traits>& is, _Val& t) { is >> t; };\n+  } // namespace __detail\n+\n+  template<movable _Val, typename _CharT, typename _Traits>\n+    requires default_initializable<_Val>\n+      && __detail::__stream_extractable<_Val, _CharT, _Traits>\n+    class basic_istream_view\n+    : public view_interface<basic_istream_view<_Val, _CharT, _Traits>>\n+    {\n+    public:\n+      basic_istream_view() = default;\n+\n+      constexpr explicit\n+      basic_istream_view(basic_istream<_CharT, _Traits>& __stream)\n+\t: _M_stream(std::__addressof(__stream))\n+      { }\n+\n+      constexpr auto\n+      begin()\n+      {\n+\tif (_M_stream != nullptr)\n+\t  *_M_stream >> _M_object;\n+\treturn _Iterator{*this};\n+      }\n+\n+      constexpr default_sentinel_t\n+      end() const noexcept\n+      { return default_sentinel; }\n+\n+    private:\n+      basic_istream<_CharT, _Traits>* _M_stream = nullptr;\n+      _Val _M_object = _Val();\n+\n+      struct _Iterator\n+      {\n+      public:\n+\tusing iterator_category = input_iterator_tag;\n+\tusing difference_type = ptrdiff_t;\n+\tusing value_type = _Val;\n+\n+\t_Iterator() = default;\n+\n+\tconstexpr explicit\n+\t_Iterator(basic_istream_view& __parent) noexcept\n+\t  : _M_parent(std::__addressof(__parent))\n+\t{ }\n+\n+\t_Iterator(const _Iterator&) = delete;\n+\t_Iterator(_Iterator&&) = default;\n+\t_Iterator& operator=(const _Iterator&) = delete;\n+\t_Iterator& operator=(_Iterator&&) = default;\n+\n+\t_Iterator&\n+\toperator++()\n+\t{\n+\t  __glibcxx_assert(_M_parent->_M_stream != nullptr);\n+\t  *_M_parent->_M_stream >> _M_parent->_M_object;\n+\t}\n+\n+\tvoid\n+\toperator++(int)\n+\t{ ++*this; }\n+\n+\t_Val&\n+\toperator*() const\n+\t{\n+\t  __glibcxx_assert(_M_parent->_M_stream != nullptr);\n+\t  return _M_parent->_M_object;\n+\t}\n+\n+\tfriend bool\n+\toperator==(const _Iterator& __x, default_sentinel_t)\n+\t{ return __x._M_at_end(); }\n+\n+      private:\n+\tbasic_istream_view* _M_parent = nullptr;\n+\n+\tbool\n+\t_M_at_end() const\n+\t{ return _M_parent == nullptr || !*_M_parent->_M_stream; }\n+      };\n+\n+      friend _Iterator;\n+    };\n+\n+  template<typename _Val, typename _CharT, typename _Traits>\n+    basic_istream_view<_Val, _CharT, _Traits>\n+    istream_view(basic_istream<_CharT, _Traits>& __s)\n+    { return basic_istream_view<_Val, _CharT, _Traits>{__s}; }\n+\n namespace __detail\n {\n   struct _Empty { };"}, {"sha": "1729459bce3eacdebfd10f6b697f5169d753bc57", "filename": "libstdc++-v3/testsuite/std/ranges/istream_view.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7903d9f5beb5db440e56fa057d32c6f13f7c5ec/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fistream_view.cc?ref=b7903d9f5beb5db440e56fa057d32c6f13f7c5ec", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <algorithm>\n+#include <ranges>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+struct X : __gnu_test::rvalstruct\n+{\n+  char c;\n+\n+  friend std::istream&\n+  operator>>(std::istream& is, X& m)\n+  {\n+    is >> m.c;\n+    return is;\n+  }\n+};\n+\n+\n+void\n+test01()\n+{\n+  std::string s = \"0123456789\";\n+  auto ss = std::istringstream{s};\n+  auto v = ranges::istream_view<X>(ss);\n+  VERIFY( ranges::equal(v, s, {}, &X::c) );\n+}\n+\n+void\n+test02()\n+{\n+  auto ints = std::istringstream{\"0 1  2   3     4\"};\n+  int x[5];\n+  ranges::copy(ranges::istream_view<int>(ints), x);\n+  VERIFY( ranges::equal(x, (int[]){0,1,2,3,4}) );\n+}\n+\n+void\n+test03()\n+{\n+  auto input = std::istringstream{\"0 1 2 3 4 5 6 7 8 9\"};\n+  auto small = [](const auto x) noexcept { return x < 5; };\n+  auto v = ranges::istream_view<int>(input) | views::take_while(small);\n+  VERIFY( ranges::equal(v, (int[]){0,1,2,3,4}) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}