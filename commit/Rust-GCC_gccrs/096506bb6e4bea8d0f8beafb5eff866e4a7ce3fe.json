{"sha": "096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2NTA2YmI2ZTRiZWE4ZDBmOGJlYWZiNWVmZjg2NmU0YTdjZTNmZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-09-21T06:57:28Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-09-21T06:57:28Z"}, "message": "re PR fortran/77657 (link error with implementation of user-defined derived type input/output (UD-DTIO) in child extending abstract parent)\n\n2016-09-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77657\n\n\t* interface.c (gfc_find_specific_dtio_proc): Borrow trick from\n\tresolve_typebound_generic_call to find dtio procedures that\n\tover-ride those in the declared type.\n\n2016-09-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77657\n\t* gfortran.dg/dtio_12.f90: New test.\n\nFrom-SVN: r240301", "tree": {"sha": "459aac4366329e2d1aa20be78c5dcf75594ef327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/459aac4366329e2d1aa20be78c5dcf75594ef327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/comments", "author": null, "committer": null, "parents": [{"sha": "37d168aedcc08d271bf5546288be7ad18d4def5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d168aedcc08d271bf5546288be7ad18d4def5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d168aedcc08d271bf5546288be7ad18d4def5e"}], "stats": {"total": 107, "additions": 103, "deletions": 4}, "files": [{"sha": "5d9a10df6b27173e26c60ab6a832e62005cc7138", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "patch": "@@ -1,3 +1,11 @@\n+2016-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77657\n+\n+\t* interface.c (gfc_find_specific_dtio_proc): Borrow trick from\n+\tresolve_typebound_generic_call to find dtio procedures that\n+\tover-ride those in the declared type.\n+\n 2016-09-20  Marek Polacek  <polacek@redhat.com>\n \n \t* trans-intrinsic.c (conv_expr_ref_to_caf_ref): Adjust fall through\n@@ -96,7 +104,7 @@\n 2016-09-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77612\n-\t* decl.c (char_len_param_value): Check parent namespace for \n+\t* decl.c (char_len_param_value): Check parent namespace for\n \tseen_implicit_none.\n \n 2016-09-15  Louis Krupp  <louis.krupp@zoho.com>\n@@ -144,7 +152,7 @@\n \n \tPR fortran/69514\n \t* array.c (gfc_match_array_constructor):  If type-spec is present,\n-\twalk the array constructor performing possible conversions for \n+\twalk the array constructor performing possible conversions for\n \tnumeric types.\n \n 2016-09-08  Jakub Jelinek  <jakub@redhat.com>\n@@ -159,7 +167,7 @@\n \tPR fortran/77391\n \t* resolve.c (deferred_requirements): New function to check F2008:C402.\n \t(resolve_fl_variable,resolve_fl_parameter): Use it.\n- \n+\n 2016-09-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77460"}, {"sha": "f8a4edb9b6249c45ecc46a621ae7ecc82eeb913b", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "patch": "@@ -4792,6 +4792,9 @@ gfc_find_specific_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n \n   if (tb_io_st != NULL)\n     {\n+      const char *genname;\n+      gfc_symtree *st;\n+\n       tb_io_proc = tb_io_st->n.tb;\n       gcc_assert (tb_io_proc != NULL);\n       gcc_assert (tb_io_proc->is_generic);\n@@ -4800,7 +4803,16 @@ gfc_find_specific_dtio_proc (gfc_symbol *derived, bool write, bool formatted)\n       specific_proc = tb_io_proc->u.generic->specific;\n       gcc_assert (!specific_proc->is_generic);\n \n-      dtio_sub = specific_proc->u.specific->n.sym;\n+      /* Go back and make sure that we have the right specific procedure.\n+\t Here we most likely have a procedure from the parent type, which\n+\t can be overridden in extensions.  */\n+      genname = tb_io_proc->u.generic->specific_st->name;\n+      st = gfc_find_typebound_proc (derived, NULL, genname,\n+\t\t\t\t    true, &tb_io_proc->where);\n+      if (st)\n+\tdtio_sub = st->n.tb->u.specific->n.sym;\n+      else\n+\tdtio_sub = specific_proc->u.specific->n.sym;\n     }\n \n   if (tb_io_st != NULL)"}, {"sha": "c355f2142337d1d993b1949324f0a7d8b2986bef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "patch": "@@ -1,3 +1,8 @@\n+2016-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77657\n+\t* gfortran.dg/dtio_12.f90: New test.\n+\n 2016-09-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/tree-ssa/pr64130.c: Use __UINT32_TYPE__ instead of int."}, {"sha": "213f7ebbb1eee5ed33ec75c8c4a65ec26aebb6e7", "filename": "gcc/testsuite/gfortran.dg/dtio_12.f90", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_12.f90?ref=096506bb6e4bea8d0f8beafb5eff866e4a7ce3fe", "patch": "@@ -0,0 +1,74 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR77657 in which the DTIO subroutine was not found,\n+! which led to an error in attempting to link to the abstract interface.\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+MODULE abstract_parent\n+  implicit none\n+\n+  type, abstract :: parent\n+  contains\n+    procedure(write_formatted_interface), deferred :: write_formatted\n+    generic :: write(formatted) => write_formatted\n+  end type parent\n+\n+  abstract interface\n+    subroutine write_formatted_interface(this,unit,iotype,vlist,iostat,iomsg)\n+      import parent\n+      class(parent), intent(in) :: this\n+      integer, intent(in) :: unit\n+      character (len=*), intent(in) :: iotype\n+      integer, intent(in) :: vlist(:)\n+      integer, intent(out) :: iostat\n+      character (len=*), intent(inout) :: iomsg\n+    end subroutine\n+  end interface\n+\n+end module\n+\n+module child_module\n+  use abstract_parent, only : parent\n+  implicit none\n+\n+  type, extends(parent) :: child\n+    integer :: i = 99\n+  contains\n+    procedure :: write_formatted\n+  end type\n+contains\n+  subroutine write_formatted(this,unit,iotype,vlist,iostat,iomsg)\n+    class(child), intent(in) :: this\n+    integer, intent(in) :: unit\n+    character (len=*), intent(in) :: iotype\n+    integer, intent(in) :: vlist(:)\n+    integer, intent(out) :: iostat\n+    character (len=*), intent(inout) :: iomsg\n+    write (unit, \"(i4)\") this%i\n+  end subroutine\n+end module\n+\n+  use child_module, only : child\n+  implicit none\n+  type (child) :: baby\n+  integer :: v(1), istat\n+  character(20) :: msg\n+  open (10, status = \"scratch\")\n+  call baby%write_formatted(10, \"abcd\", v, istat, msg) ! Call the dtio proc directly\n+  rewind (10)\n+  read (10, *) msg\n+  if (trim (msg) .ne. \"99\") call abort\n+  rewind (10)\n+  baby%i = 42\n+  write (10,\"(DT)\") baby                               ! Call the dtio proc via the library\n+  rewind (10)\n+  read (10, *) msg\n+  if (trim (msg) .ne. \"42\") call abort\n+  rewind (10)\n+  write (10,\"(DT)\") child (77)                         ! The original testcase\n+  rewind (10)\n+  read (10, *) msg\n+  if (trim (msg) .ne. \"77\") call abort\n+  close(10)\n+end"}]}