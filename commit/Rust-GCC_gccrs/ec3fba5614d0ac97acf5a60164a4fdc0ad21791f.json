{"sha": "ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzZmJhNTYxNGQwYWM5N2FjZjVhNjAxNjRhNGZkYzBhZDIxNzkxZg==", "commit": {"author": {"name": "Corey Minyard", "email": "minyard@acm.org", "date": "2001-11-27T18:30:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-27T18:30:40Z"}, "message": "unroll.c (loop_iterations): Detect one situation in which we overestimate the number of iterations.\n\n        * unroll.c (loop_iterations): Detect one situation in which we\n        overestimate the number of iterations.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r47386", "tree": {"sha": "c922a76f1382f72691ef5b5d6b95f6ea94186174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c922a76f1382f72691ef5b5d6b95f6ea94186174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f/comments", "author": {"login": "cminyard", "id": 4389272, "node_id": "MDQ6VXNlcjQzODkyNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4389272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cminyard", "html_url": "https://github.com/cminyard", "followers_url": "https://api.github.com/users/cminyard/followers", "following_url": "https://api.github.com/users/cminyard/following{/other_user}", "gists_url": "https://api.github.com/users/cminyard/gists{/gist_id}", "starred_url": "https://api.github.com/users/cminyard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cminyard/subscriptions", "organizations_url": "https://api.github.com/users/cminyard/orgs", "repos_url": "https://api.github.com/users/cminyard/repos", "events_url": "https://api.github.com/users/cminyard/events{/privacy}", "received_events_url": "https://api.github.com/users/cminyard/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b856c15d7e97280853a83042ccb3ba29c79e7e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b856c15d7e97280853a83042ccb3ba29c79e7e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b856c15d7e97280853a83042ccb3ba29c79e7e9f"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "00e613407a8609f1bc9bb3c20fb05fef9bcc205c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "patch": "@@ -1,3 +1,9 @@\n+2001-11-17  Corey Minyard  <minyard@acm.org>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* unroll.c (loop_iterations): Detect one situation in which we\n+\toverestimate the number of iterations.\n+\n 2001-11-27  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* gcc.c (set_input): Export."}, {"sha": "35ce939f0122faa75797c0390ed3871c90ace2a5", "filename": "gcc/unroll.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "patch": "@@ -3706,6 +3706,41 @@ loop_iterations (loop)\n   if (initial_value == 0)\n     return 0;\n \n+  /* Some code transformations can result in code akin to\n+\n+\t  tmp = i + 1;\n+\t  ...\n+\t  goto scan_start;\n+\ttop:\n+\t  tmp = tmp + 1;\n+\tscan_start:\n+\t  i = tmp;\n+\t  if (i < n) goto top;\n+\n+     We'll have already detected this form of loop in scan_loop,\n+     and set loop->top and loop->scan_start appropriately.\n+\n+     In this situation, we skip the increment the first time through\n+     the loop, which results in an incorrect estimate of the number\n+     of iterations.  Adjust the initial value to compensate.  */\n+\n+  if (loop->scan_start && loop->cont\n+      && INSN_LUID (loop->scan_start) < INSN_LUID (loop->cont)\n+      && INSN_LUID (bl->biv->insn) < INSN_LUID (loop->scan_start))\n+    {\n+      if (loop_dump_stream)\n+\tfprintf (loop_dump_stream,\n+\t         \"Loop iterations: Basic induction var skips initial incr.\\n\");\n+      if (GET_CODE (increment) != CONST_INT)\n+\t{\n+\t  if (loop_dump_stream)\n+\t    fprintf (loop_dump_stream,\n+\t\t     \"Loop iterations: Can't adjust with non-constant incr.\\n\");\n+\t  return 0;\n+\t}\n+      initial_value = plus_constant (initial_value, -INTVAL (increment));\n+    }\n+\n   unsigned_p = 0;\n   off_by_one = 0;\n   switch (comparison_code)"}]}