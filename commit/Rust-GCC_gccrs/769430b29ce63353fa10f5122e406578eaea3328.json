{"sha": "769430b29ce63353fa10f5122e406578eaea3328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY5NDMwYjI5Y2U2MzM1M2ZhMTBmNTEyMmU0MDY1NzhlYWVhMzMyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-18T14:55:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-18T14:55:23Z"}, "message": "re PR c++/66001 (ICE when NSDMI in a literal class uses a destructor)\n\n\tPR c++/66001\n\t* constexpr.c (cxx_eval_constant_expression): Handle TRY_BLOCK and\n\tTRY_FINALLY_EXPR.\n\t(potential_constant_expression_1): Likewise.\n\nFrom-SVN: r224620", "tree": {"sha": "06a7f084677619ac8ab0087fe06bf716fe115ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06a7f084677619ac8ab0087fe06bf716fe115ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/769430b29ce63353fa10f5122e406578eaea3328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769430b29ce63353fa10f5122e406578eaea3328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/769430b29ce63353fa10f5122e406578eaea3328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769430b29ce63353fa10f5122e406578eaea3328/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e92772131fbcdc934c6ebf5cce8c8e3053554a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e92772131fbcdc934c6ebf5cce8c8e3053554a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e92772131fbcdc934c6ebf5cce8c8e3053554a7"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "eb8d97ab1e8a400b485a9990fed21bcd66ec0b60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769430b29ce63353fa10f5122e406578eaea3328/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769430b29ce63353fa10f5122e406578eaea3328/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=769430b29ce63353fa10f5122e406578eaea3328", "patch": "@@ -1,3 +1,10 @@\n+2015-06-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66001\n+\t* constexpr.c (cxx_eval_constant_expression): Handle TRY_BLOCK and\n+\tTRY_FINALLY_EXPR.\n+\t(potential_constant_expression_1): Likewise.\n+\n 2015-06-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/66515"}, {"sha": "56885883d72aa090f45ceed274fc29bfd55e7dfa", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769430b29ce63353fa10f5122e406578eaea3328/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769430b29ce63353fa10f5122e406578eaea3328/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=769430b29ce63353fa10f5122e406578eaea3328", "patch": "@@ -3182,6 +3182,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \n     case NON_LVALUE_EXPR:\n     case TRY_CATCH_EXPR:\n+    case TRY_BLOCK:\n     case CLEANUP_POINT_EXPR:\n     case MUST_NOT_THROW_EXPR:\n     case EXPR_STMT:\n@@ -3192,6 +3193,17 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\tjump_target);\n       break;\n \n+    case TRY_FINALLY_EXPR:\n+      r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t\tnon_constant_p, overflow_p,\n+\t\t\t\t\tjump_target);\n+      if (!*non_constant_p)\n+\t/* Also evaluate the cleanup.  */\n+\tcxx_eval_constant_expression (ctx, TREE_OPERAND (t, 1), true,\n+\t\t\t\t      non_constant_p, overflow_p,\n+\t\t\t\t      jump_target);\n+      break;\n+\n       /* These differ from cxx_eval_unary_expression in that this doesn't\n \t check for a constant operand or result; an address can be\n \t constant without its operand being, and vice versa.  */\n@@ -4266,6 +4278,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case CLEANUP_POINT_EXPR:\n     case MUST_NOT_THROW_EXPR:\n     case TRY_CATCH_EXPR:\n+    case TRY_BLOCK:\n     case EH_SPEC_BLOCK:\n     case EXPR_STMT:\n     case PAREN_EXPR:\n@@ -4275,6 +4288,10 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case RETURN_EXPR:\n       return RECUR (TREE_OPERAND (t, 0), want_rval);\n \n+    case TRY_FINALLY_EXPR:\n+      return (RECUR (TREE_OPERAND (t, 0), want_rval)\n+\t      && RECUR (TREE_OPERAND (t, 1), any));\n+\n     case SCOPE_REF:\n       return RECUR (TREE_OPERAND (t, 1), want_rval);\n "}, {"sha": "11618a45a1781d6bad1f1e4443856fed459ca719", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi12.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769430b29ce63353fa10f5122e406578eaea3328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769430b29ce63353fa10f5122e406578eaea3328/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi12.C?ref=769430b29ce63353fa10f5122e406578eaea3328", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/66001\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+struct dt\n+    { dt() {} ~ dt() {} };\n+\n+struct x {\n+    std::initializer_list< dt > f = { {} };\n+} cx;\n+\n+struct x2 {\n+    struct dt { ~ dt() {} }\n+        const & m = {};\n+} cx2;"}]}