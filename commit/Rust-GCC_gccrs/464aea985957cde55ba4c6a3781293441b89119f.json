{"sha": "464aea985957cde55ba4c6a3781293441b89119f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0YWVhOTg1OTU3Y2RlNTViYTRjNmEzNzgxMjkzNDQxYjg5MTE5Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-02-16T23:29:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-02-16T23:29:10Z"}, "message": "re PR target/20353 (uclibc does not provide C99 math functions)\n\ngcc:\n\tPR target/20353\n\tPR target/24578\n\tPR target/24837\n\t* config/linux.opt: New file.\n\t* config/linux.h (CHOOSE_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER,\n\tLINUX_DYNAMIC_LINKER): Define.\n\t(TARGET_C99_FUNCTIONS): Define depending on TARGET_GLIBC.\n\t* config.gcc (*-*-linux*): Define extra_options.\n\t(*-*-*uclibc*): Define UCLIBC_DEFAULT.\n\t(arm*-*-linux-gnueabi): Change to arm*-*-linux-*eabi.\n\t* config/arm/linux-eabi.h (LINUX_TARGET_INTERPRETER): Change to\n\tGLIBC_DYNAMIC_LINKER.\n\t* config/arm/linux-elf.h (LINUX_TARGET_INTERPRETER): Likewise.\n\t(LINUX_TARGET_LINK_SPEC): Use LINUX_DYNAMIC_LINKER.\n\t* config/mips/linux.h (GLIBC_DYNAMIC_LINKER): Define.\n\t(LINK_SPEC): Use LINUX_DYNAMIC_LINKER.\n\t* doc/invoke.texi (GNU/Linux Options): New section.\n\ngcc/testsuite:\n\t* gcc.dg/builtins-config.h (HAVE_C99_RUNTIME): Don't define if\n\t__UCLIBC__ is defined.\n\nlibstdc++-v3:\n\tPR libstdc++/14939\n\t* config/os/uclibc/ctype_base.h, config/os/uclibc/ctype_inline.h,\n\tconfig/os/uclibc/ctype_noninline.h, config/os/uclibc/os_defines.h:\n\tNew.\n\t* acinclude.m4 (GLIBCXX_CONFIGURE): Test whether using uClibc.\n\t* configure.host: Use os/uclibc for uClibc.\n\t* crossconfig.m4 (*-linux*): Use link tests.  Don't hardcode\n\tpresence of math functions.\n\t* configure: Regenerate.\n\nFrom-SVN: r111160", "tree": {"sha": "2c090d6408195e6db383a030c30ebbadea6777e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c090d6408195e6db383a030c30ebbadea6777e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/464aea985957cde55ba4c6a3781293441b89119f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464aea985957cde55ba4c6a3781293441b89119f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464aea985957cde55ba4c6a3781293441b89119f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464aea985957cde55ba4c6a3781293441b89119f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6429d58f83a1ee1334942d419c078a1fcd962c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6429d58f83a1ee1334942d419c078a1fcd962c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6429d58f83a1ee1334942d419c078a1fcd962c18"}], "stats": {"total": 21274, "additions": 20673, "deletions": 601}, "files": [{"sha": "e1dfcd993eb9e3f4fde1f82c78e897cdcd944889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,3 +1,23 @@\n+2006-02-16  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR target/20353\n+\tPR target/24578\n+\tPR target/24837\n+\t* config/linux.opt: New file.\n+\t* config/linux.h (CHOOSE_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER,\n+\tLINUX_DYNAMIC_LINKER): Define.\n+\t(TARGET_C99_FUNCTIONS): Define depending on TARGET_GLIBC.\n+\t* config.gcc (*-*-linux*): Define extra_options.\n+\t(*-*-*uclibc*): Define UCLIBC_DEFAULT.\n+\t(arm*-*-linux-gnueabi): Change to arm*-*-linux-*eabi.\n+\t* config/arm/linux-eabi.h (LINUX_TARGET_INTERPRETER): Change to\n+\tGLIBC_DYNAMIC_LINKER.\n+\t* config/arm/linux-elf.h (LINUX_TARGET_INTERPRETER): Likewise.\n+\t(LINUX_TARGET_LINK_SPEC): Use LINUX_DYNAMIC_LINKER.\n+\t* config/mips/linux.h (GLIBC_DYNAMIC_LINKER): Define.\n+\t(LINK_SPEC): Use LINUX_DYNAMIC_LINKER.\n+\t* doc/invoke.texi (GNU/Linux Options): New section.\n+\n 2006-02-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.md (setjmp): Rewrite."}, {"sha": "3d02543f3d6ceda1035d12bf92fc0fb4943cf4d3", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,5 +1,5 @@\n # GCC target-specific configuration file.\n-# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n # Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -446,12 +446,18 @@ case ${target} in\n *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n   # Must come before *-*-gnu* (because of *-*-linux-gnu* systems).\n   extra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n+  extra_options=\"${extra_options} linux.opt\"\n   gas=yes\n   gnu_ld=yes\n   case ${enable_threads} in\n     \"\" | yes | posix) thread_file='posix' ;;\n   esac\n   tmake_file=\"t-slibgcc-elf-ver t-linux\"\n+  case ${target} in\n+    *-*-*uclibc*)\n+      tm_defines=\"${tm_defines} UCLIBC_DEFAULT\"\n+      ;;\n+  esac\n   ;;\n *-*-gnu*)\n   # On the Hurd, the setup is just about the same on\n@@ -674,7 +680,7 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttm_file=\"dbxelf.h elfos.h linux.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\" \n \ttmake_file=\"${tmake_file} t-linux arm/t-arm\"\n \tcase ${target} in\n-\tarm*-*-linux-gnueabi)\n+\tarm*-*-linux-*eabi)\n \t    tm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h\"\n \t    tmake_file=\"$tmake_file arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi\"\n   \t    # The BPABI long long divmod functions return a 128-bit value in "}, {"sha": "6612f742bf86510aa55e0bcd13adf65af6e9b3de", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,5 +1,5 @@\n /* Configuration file for ARM GNU/Linux EABI targets.\n-   Copyright (C) 2004, 2005\n+   Copyright (C) 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC   \n \n@@ -52,8 +52,8 @@\n \n /* Use ld-linux.so.3 so that it will be possible to run \"classic\"\n    GNU/Linux binaries on an EABI system.  */\n-#undef LINUX_TARGET_INTERPRETER\n-#define LINUX_TARGET_INTERPRETER \"/lib/ld-linux.so.3\"\n+#undef GLIBC_DYNAMIC_LINKER\n+#define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux.so.3\"\n \n /* At this point, bpabi.h will have clobbered LINK_SPEC.  We want to\n    use the GNU/Linux version, not the generic BPABI version.  */"}, {"sha": "acb13cd013f37c24d648d13b00fe43edd5f38042", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for ARM running Linux-based GNU systems using ELF\n    Copyright (C) 1993, 1994, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005\n+   2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Philip Blundell <philb@gnu.org>\n \n@@ -51,15 +51,15 @@\n \n #define LIBGCC_SPEC \"%{msoft-float:-lfloat} %{mfloat-abi=soft*:-lfloat} -lgcc\"\n \n-#define LINUX_TARGET_INTERPRETER \"/lib/ld-linux.so.2\"\n+#define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux.so.2\"\n \n #define LINUX_TARGET_LINK_SPEC  \"%{h*} %{version:-v} \\\n    %{b} \\\n    %{static:-Bstatic} \\\n    %{shared:-shared} \\\n    %{symbolic:-Bsymbolic} \\\n    %{rdynamic:-export-dynamic} \\\n-   %{!dynamic-linker:-dynamic-linker \" LINUX_TARGET_INTERPRETER \"} \\\n+   %{!dynamic-linker:-dynamic-linker \" LINUX_DYNAMIC_LINKER \"} \\\n    -X \\\n    %{mbig-endian:-EB}\" \\\n    SUBTARGET_EXTRA_LINK_SPEC"}, {"sha": "e5707d396230be6f8bb88c05b103c54f82264bba", "filename": "gcc/config/linux.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Linux-based GNU systems with ELF format\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Eric Youngdale.\n    Modified for stabs-in-ELF by H.J. Lu (hjl@lucon.org).\n@@ -99,8 +99,24 @@ Boston, MA 02110-1301, USA.  */\n #define USE_LD_AS_NEEDED 1\n #endif\n \n+/* Determine which dynamic linker to use depending on whether GLIBC or\n+   uClibc is the default C library and whether -muclibc or -mglibc has\n+   been passed to change the default.  */\n+#ifdef UCLIBC_DEFAULT\n+#define CHOOSE_DYNAMIC_LINKER(G, U) \"%{mglibc:\" G \";:\" U \"}\"\n+#else\n+#define CHOOSE_DYNAMIC_LINKER(G, U) \"%{muclibc:\" U \";:\" G \"}\"\n+#endif\n+\n+/* For most targets with a single dynamic linker the following\n+   definitions suffice; GLIBC_DYNAMIC_LINKER must be defined for each\n+   target using them.  */\n+#define UCLIBC_DYNAMIC_LINKER \"/lib/ld-uClibc.so.0\"\n+#define LINUX_DYNAMIC_LINKER \\\n+  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER)\n+\n /* Determine whether the entire c99 runtime\n    is present in the runtime library.  */\n-#define TARGET_C99_FUNCTIONS 1\n+#define TARGET_C99_FUNCTIONS (TARGET_GLIBC)\n \n #define TARGET_POSIX_IO"}, {"sha": "2cb04b25613a424e11768ebcd80985345911cf00", "filename": "gcc/config/linux.opt", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Flinux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Flinux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.opt?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -0,0 +1,29 @@\n+; Processor-independent options for GNU/Linux.\n+;\n+; Copyright (C) 2006 Free Software Foundation, Inc.\n+; Contributed by CodeSourcery.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+; 02110-1301, USA.\n+\n+muclibc\n+Target RejectNegative Report Mask(UCLIBC)\n+Use uClibc instead of GNU libc\n+\n+mglibc\n+Target RejectNegative Report InverseMask(UCLIBC, GLIBC)\n+Use GNU libc instead of uClibc"}, {"sha": "5ed427dd79e4fbab15040c964c2e9ae10b0ebb61", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for MIPS running Linux-based GNU systems with ELF format.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -98,6 +98,8 @@ Boston, MA 02110-1301, USA.  */\n #undef MIPS_DEFAULT_GVALUE\n #define MIPS_DEFAULT_GVALUE 0\n \n+#define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n+\n /* Borrowed from sparc/linux.h */\n #undef LINK_SPEC\n #define LINK_SPEC \\\n@@ -107,7 +109,7 @@ Boston, MA 02110-1301, USA.  */\n     %{!ibcs: \\\n       %{!static: \\\n         %{rdynamic:-export-dynamic} \\\n-        %{!dynamic-linker:-dynamic-linker /lib/ld.so.1}} \\\n+        %{!dynamic-linker:-dynamic-linker \" LINUX_DYNAMIC_LINKER \"}} \\\n         %{static:-static}}}\"\n \n #undef SUBTARGET_ASM_SPEC"}, {"sha": "5889b96fa46dbf0c0a6ed41c928b7e296afbe2c6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -503,6 +503,9 @@ Objective-C and Objective-C++ Dialects}.\n -mTLS -mtls @gol\n -mcpu=@var{cpu}}\n \n+@emph{GNU/Linux Options}\n+@gccoptlist{-muclibc}\n+\n @emph{H8/300 Options}\n @gccoptlist{-mrelax  -mh  -ms  -mn  -mint32  -malign-300}\n \n@@ -7193,6 +7196,7 @@ platform.\n * DEC Alpha Options::\n * DEC Alpha/VMS Options::\n * FRV Options::\n+* GNU/Linux Options::\n * H8/300 Options::\n * HPPA Options::\n * i386 and x86-64 Options::\n@@ -8783,6 +8787,24 @@ Select the processor type for which to generate code.  Possible values are\n \n @end table\n \n+@node GNU/Linux Options\n+@subsection GNU/Linux Options\n+\n+These @samp{-m} options are defined for GNU/Linux targets:\n+\n+@table @gcctabopt\n+@item -mglibc\n+@opindex mglibc\n+Use the GNU C library instead of uClibc.  This is the default except\n+on @samp{*-*-linux-*uclibc*} targets.\n+\n+@item -muclibc\n+@opindex muclibc\n+Use uClibc instead of the GNU C library.  This is the default on\n+@samp{*-*-linux-*uclibc*} targets.  GCC currently only supports uClibc\n+on ARM and 32-bit MIPS targets.\n+@end table\n+\n @node H8/300 Options\n @subsection H8/300 Options\n "}, {"sha": "ffacb6a397751a8395654e1ff2e99fbed5eb32ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,3 +1,10 @@\n+2006-02-16  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR target/20353\n+\tPR target/24578\n+\t* gcc.dg/builtins-config.h (HAVE_C99_RUNTIME): Don't define if\n+\t__UCLIBC__ is defined.\n+\n 2006-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/26224"}, {"sha": "6554f46057fddb551754388e804da2927ee8a868", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003 Free Software Foundation.\n+/* Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation.\n \n    Define macros useful in tests for bulitin functions.  */\n \n@@ -38,9 +38,10 @@\n    too, but the GLIBC math inlines cause us to generate inferior code,\n    which causes the test to fail, so it is not safe.  Including <limits.h>\n    also fails because the include search paths are ordered such that GCC's\n-   version will be found before the newlib version.  */\n+   version will be found before the newlib version.  Similarly, uClibc\n+   lacks the C99 functions.  */\n #include <sys/types.h>\n-#ifdef _NEWLIB_VERSION\n+#if defined(_NEWLIB_VERSION) || defined(__UCLIBC__)\n #else\n #define HAVE_C99_RUNTIME\n #endif"}, {"sha": "e001cbdd31764140e7f2e8d8608794d5ee6078b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -1,3 +1,15 @@\n+2006-02-16  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR libstdc++/14939\n+\t* config/os/uclibc/ctype_base.h, config/os/uclibc/ctype_inline.h,\n+\tconfig/os/uclibc/ctype_noninline.h, config/os/uclibc/os_defines.h:\n+\tNew.\n+\t* acinclude.m4 (GLIBCXX_CONFIGURE): Test whether using uClibc.\n+\t* configure.host: Use os/uclibc for uClibc.\n+\t* crossconfig.m4 (*-linux*): Use link tests.  Don't hardcode\n+\tpresence of math functions.\n+\t* configure: Regenerate.\n+\n 2006-02-12  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/26211"}, {"sha": "c8055eba7ce4e36f55975cc6feb6c825639af5a8", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -125,6 +125,15 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n   ## other macros from doing the same.  This should be automated.)  -pme\n   need_libmath=no\n \n+  # Check for uClibc since Linux platforms use different configuration\n+  # directories depending on the C library in use.\n+  AC_EGREP_CPP([_using_uclibc], [\n+  #include <stdio.h>\n+  #if __UCLIBC__\n+    _using_uclibc\n+  #endif\n+  ], uclibc=yes, uclibc=no)\n+\n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n   GLIBCXX_CHECK_HOST"}, {"sha": "e5afd6241becca83be2220ee499c7564563c4de5", "filename": "libstdc++-v3/config/os/uclibc/ctype_base.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -0,0 +1,64 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+/** @file ctype_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+// Information as gleaned from /usr/include/ctype.h\n+  \n+  /// @brief  Base class for ctype.\n+  struct ctype_base\n+  {\n+    // Note: In uClibc, the following two types depend on configuration.\n+ \n+    // Non-standard typedefs.\n+    typedef const __ctype_touplow_t* __to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef __ctype_mask_t\tmask;   \n+    static const mask upper    \t= _ISupper;\n+    static const mask lower \t= _ISlower;\n+    static const mask alpha \t= _ISalpha;\n+    static const mask digit \t= _ISdigit;\n+    static const mask xdigit \t= _ISxdigit;\n+    static const mask space \t= _ISspace;\n+    static const mask print \t= _ISprint;\n+    static const mask graph \t= _ISalpha | _ISdigit | _ISpunct;\n+    static const mask cntrl \t= _IScntrl;\n+    static const mask punct \t= _ISpunct;\n+    static const mask alnum \t= _ISalpha | _ISdigit;\n+  };"}, {"sha": "79586dd79806ea726e72645b7b32909dd1fad288", "filename": "libstdc++-v3/config/os/uclibc/ctype_inline.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_inline.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -0,0 +1,69 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2002, 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { return _M_table[static_cast<unsigned char>(__c)] & __m; }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    while (__low < __high)\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high \n+\t   && !(_M_table[static_cast<unsigned char>(*__low)] & __m))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high \n+\t   && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)\n+      ++__low;\n+    return __low;\n+  }"}, {"sha": "ea5fd1d3f74b1efef3a0c6d205873647b67d1535", "filename": "libstdc++-v3/config/os/uclibc/ctype_noninline.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_noninline.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -0,0 +1,92 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h\n+\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return __C_ctype_b; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n+  {\n+    _M_toupper = __C_ctype_toupper;\n+    _M_tolower = __C_ctype_tolower;\n+    _M_table = __table ? __table : __C_ctype_b;\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n+  _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n+  {\n+    _M_toupper = __C_ctype_toupper;\n+    _M_tolower = __C_ctype_tolower;\n+    _M_table = __table ? __table : __C_ctype_b;\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return _M_toupper[static_cast<unsigned char>(__c)]; }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = _M_toupper[static_cast<unsigned char>(*__low)];\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return _M_tolower[static_cast<unsigned char>(__c)]; }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = _M_tolower[static_cast<unsigned char>(*__low)];\n+\t++__low;\n+      }\n+    return __high;\n+  }"}, {"sha": "7ab780ce5ed47cdc1341087d6fb83d2fa864535a", "filename": "libstdc++-v3/config/os/uclibc/os_defines.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fos_defines.h?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -0,0 +1,44 @@\n+// Specific definitions for GNU/Linux with uClibc  -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001, 2002, 2003, 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+// This keeps isanum, et al from being propagated as macros.\n+#define __NO_CTYPE 1\n+\n+#include <features.h>\n+\n+// We must not see the optimized string functions GNU libc defines.\n+#define __NO_STRING_INLINES\n+\n+#endif"}, {"sha": "abcfc0ee1a151b355a4b545afd6328d96c5ff17b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 20256, "deletions": 523, "changes": 20779, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=464aea985957cde55ba4c6a3781293441b89119f"}, {"sha": "477e4d8bb13521901eee535081518d058070698b", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -206,7 +206,11 @@ case \"${host_os}\" in\n     os_include_dir=\"os/bsd/freebsd\"\n     ;;\n   gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n-    os_include_dir=\"os/gnu-linux\"\n+    if [ \"$uclibc\" = \"yes\" ]; then\n+      os_include_dir=\"os/uclibc\"\n+    else\n+      os_include_dir=\"os/gnu-linux\"\n+    fi\n     ;;\n   hpux*)\n     os_include_dir=\"os/hpux\""}, {"sha": "a04dfa19ee854a8e59ac116894d85c50912cf080", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 4, "deletions": 62, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/464aea985957cde55ba4c6a3781293441b89119f/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=464aea985957cde55ba4c6a3781293441b89119f", "patch": "@@ -149,9 +149,13 @@ case \"${host}\" in\n       fp.h float.h endian.h inttypes.h locale.h float.h stdint.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS)\n+    GLIBCXX_CHECK_COMPILER_FEATURES\n     GLIBCXX_CHECK_LINKER_FEATURES\n+    GLIBCXX_CHECK_MATH_SUPPORT\n+    GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n     GLIBCXX_CHECK_ICONV_SUPPORT\n+    GLIBCXX_CHECK_STDLIB_SUPPORT\n \n     # For LFS.\n     AC_DEFINE(HAVE_INT64_T)\n@@ -171,68 +175,6 @@ case \"${host}\" in\n     # For xsputn_2().\n     AC_CHECK_HEADERS(sys/uio.h)\n     GLIBCXX_CHECK_WRITEV\n-\n-    AC_DEFINE(HAVE_ACOSF)\n-    AC_DEFINE(HAVE_ASINF)\n-    AC_DEFINE(HAVE_ATANF)\n-    AC_DEFINE(HAVE_ATAN2F)\n-    AC_DEFINE(HAVE_CEILF)\n-    AC_DEFINE(HAVE_COPYSIGN)\n-    AC_DEFINE(HAVE_COPYSIGNF)\n-    AC_DEFINE(HAVE_COSF)\n-    AC_DEFINE(HAVE_COSHF)\n-    AC_DEFINE(HAVE_EXPF)\n-    AC_DEFINE(HAVE_FABSF)\n-    AC_DEFINE(HAVE_FINITE)\n-    AC_DEFINE(HAVE_FINITEF)\n-    AC_DEFINE(HAVE_FLOORF)\n-    AC_DEFINE(HAVE_FMODF)\n-    AC_DEFINE(HAVE_FREXPF)\n-    AC_DEFINE(HAVE_HYPOT)\n-    AC_DEFINE(HAVE_HYPOTF)\n-    AC_DEFINE(HAVE_ISINF)\n-    AC_DEFINE(HAVE_ISINFF)\n-    AC_DEFINE(HAVE_ISNAN)\n-    AC_DEFINE(HAVE_ISNANF)\n-    AC_DEFINE(HAVE_LOGF)\n-    AC_DEFINE(HAVE_LOG10F)\n-    AC_DEFINE(HAVE_MODFF)\n-    AC_DEFINE(HAVE_SINF)\n-    AC_DEFINE(HAVE_SINHF)\n-    AC_DEFINE(HAVE_SINCOS)\n-    AC_DEFINE(HAVE_SINCOSF)\n-    AC_DEFINE(HAVE_SQRTF)\n-    AC_DEFINE(HAVE_TANF)\n-    AC_DEFINE(HAVE_TANHF)\n-    if test x\"long_double_math_on_this_cpu\" = x\"yes\"; then\n-      AC_DEFINE(HAVE_ACOSL)\n-      AC_DEFINE(HAVE_ASINL)\n-      AC_DEFINE(HAVE_ATANL)\n-      AC_DEFINE(HAVE_ATAN2L)\n-      AC_DEFINE(HAVE_CEILL)\n-      AC_DEFINE(HAVE_COPYSIGNL)\n-      AC_DEFINE(HAVE_COSL)\n-      AC_DEFINE(HAVE_COSHL)\n-      AC_DEFINE(HAVE_EXPL)\n-      AC_DEFINE(HAVE_FABSL)\n-      AC_DEFINE(HAVE_FINITEL)\n-      AC_DEFINE(HAVE_FLOORL)\n-      AC_DEFINE(HAVE_FMODL)\n-      AC_DEFINE(HAVE_FREXPL)\n-      AC_DEFINE(HAVE_HYPOTL)\n-      AC_DEFINE(HAVE_ISINFL)\n-      AC_DEFINE(HAVE_ISNANL)\n-      AC_DEFINE(HAVE_LOGL)\n-      AC_DEFINE(HAVE_LOG10L)\n-      AC_DEFINE(HAVE_MODFL)\n-      AC_DEFINE(HAVE_POWL)\n-      AC_DEFINE(HAVE_SINL)\n-      AC_DEFINE(HAVE_SINHL)\n-      AC_DEFINE(HAVE_SINCOSL)\n-      AC_DEFINE(HAVE_SQRTL)\n-      AC_DEFINE(HAVE_TANL)\n-      AC_DEFINE(HAVE_TANHL)\n-    fi\n     ;;\n   *-mingw32*)\n     AC_CHECK_HEADERS([sys/types.h locale.h float.h])"}]}