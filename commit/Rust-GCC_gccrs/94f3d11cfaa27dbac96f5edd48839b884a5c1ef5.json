{"sha": "94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmM2QxMWNmYWEyN2RiYWM5NmY1ZWRkNDg4MzliODg0YTVjMWVmNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-07-07T10:53:37Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-07-07T10:53:37Z"}, "message": "re PR fortran/91077 (Wrong indexing when using a pointer)\n\n2019-07-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91077\n\t* trans-array.c (gfc_conv_scalarized_array_ref) Delete code\n\tthat gave symbol backend decl for subref arrays and deferred\n\tlength variables.\n\n2019-07-07  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91077\n\t* gfortran.dg/pointer_array_11.f90 : New test.\n\nFrom-SVN: r273176", "tree": {"sha": "f3d6715a580e9525bba4eb2b58abf27b1b9f7497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d6715a580e9525bba4eb2b58abf27b1b9f7497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/comments", "author": null, "committer": null, "parents": [{"sha": "0b3839a4b267858948f0d2fe9ec600129d5d14b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3839a4b267858948f0d2fe9ec600129d5d14b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3839a4b267858948f0d2fe9ec600129d5d14b4"}], "stats": {"total": 123, "additions": 106, "deletions": 17}, "files": [{"sha": "0376f00ed53ae6f9b4f0f262be5edaf51365df1f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "patch": "@@ -1,3 +1,10 @@\n+2019-07-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91077\n+\t* trans-array.c (gfc_conv_scalarized_array_ref) Delete code\n+\tthat gave symbol backend decl for subref arrays and deferred\n+\tlength variables.\n+\n 2019-07-05  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* openmp.c (resolve_omp_clauses): Add custom error messages for\n@@ -33,9 +40,9 @@\n \tChangeLog forgotten with revision 272667\n \t* decl.c (access_attr_decl): Use temporary variable to reduce\n \tunreadability of code.  Normalize jumping to return.\n-\t(gfc_match_protected): Fix parsing error.  Add comments to \n+\t(gfc_match_protected): Fix parsing error.  Add comments to\n \texplain code.  Remove dead code.\n-\t(gfc_match_private): Use temporary variable to reduce unreadability \n+\t(gfc_match_private): Use temporary variable to reduce unreadability\n \tof code. Fix parsing error.  Move code to test for blank PRIVATE.\n \tRemove dead code.\n \t(gfc_match_public): Move code to test for blank PUBLIC.  Fix"}, {"sha": "c8d74e588ddc8a94838c43df82cf3e40263c471a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "patch": "@@ -3502,19 +3502,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n     return;\n \n   if (get_CFI_desc (NULL, expr, &decl, ar))\n-    {\n-      decl = build_fold_indirect_ref_loc (input_location, decl);\n-      goto done;\n-    }\n-\n-  if (expr && ((is_subref_array (expr)\n-\t\t&& GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (info->descriptor)))\n-\t       || (expr->ts.deferred && (expr->expr_type == EXPR_VARIABLE\n-\t\t\t\t\t || expr->expr_type == EXPR_FUNCTION))))\n-    decl = expr->symtree->n.sym->backend_decl;\n-\n-  if (decl && GFC_DECL_PTR_ARRAY_P (decl))\n-    goto done;\n+    decl = build_fold_indirect_ref_loc (input_location, decl);\n \n   /* A pointer array component can be detected from its field decl. Fix\n      the descriptor, mark the resulting variable decl and pass it to\n@@ -3532,7 +3520,6 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n \tdecl = info->descriptor;\n     }\n \n-done:\n   se->expr = gfc_build_array_ref (base, index, decl);\n }\n \n@@ -7865,7 +7852,7 @@ array_parameter_size (tree desc, gfc_expr *expr, tree *size)\n }\n \n /* Helper function - return true if the argument is a pointer.  */\n- \n+\n static bool\n is_pointer (gfc_expr *e)\n {"}, {"sha": "12e5bc167e06e0b1e7f6994eacbb43405a5cc2bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "patch": "@@ -1,3 +1,8 @@\n+2019-07-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91077\n+\t* gfortran.dg/pointer_array_11.f90 : New test.\n+\n 2019-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/scan-4.c: Don't expect sorry message."}, {"sha": "11885ae4301c8409ef1ccbe5695dab7ea76befe0", "filename": "gcc/testsuite/gfortran.dg/pointer_array_11.f90", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f3d11cfaa27dbac96f5edd48839b884a5c1ef5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_array_11.f90?ref=94f3d11cfaa27dbac96f5edd48839b884a5c1ef5", "patch": "@@ -0,0 +1,90 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR91077 - both the original test and that in comment #4 of the PR.\n+!\n+! Contribute by Ygal Klein  <ygalklein@gmail.com>\n+!\n+program test\n+  implicit none\n+  call original\n+  call comment_4\n+contains\n+  subroutine original\n+    integer, parameter :: length = 9\n+    real(8), dimension(2) :: a, b\n+    integer :: i\n+    type point\n+       real(8) :: x\n+    end type point\n+\n+    type stored\n+       type(point), dimension(:), allocatable :: np\n+    end type stored\n+    type(stored), dimension(:), pointer :: std =>null()\n+    allocate(std(1))\n+    allocate(std(1)%np(length))\n+    std(1)%np(1)%x = 0.3d0\n+    std(1)%np(2)%x = 0.3555d0\n+    std(1)%np(3)%x = 0.26782d0\n+    std(1)%np(4)%x = 0d0\n+    std(1)%np(5)%x = 1.555d0\n+    std(1)%np(6)%x = 7.3d0\n+    std(1)%np(7)%x = 7.8d0\n+    std(1)%np(8)%x = 6.3d0\n+    std(1)%np(9)%x = 5.5d0\n+!    do i = 1, 2\n+!       write(*, \"('std(1)%np(',i1,')%x = ',1e22.14)\") i, std(1)%np(i)%x\n+!    end do\n+!    do i = 1, 2\n+!       write(*, \"('std(1)%np(1:',i1,') = ',9e22.14)\") i, std(1)%np(1:i)%x\n+!    end do\n+    a = std(1)%np(1:2)%x\n+    b = [std(1)%np(1)%x, std(1)%np(2)%x]\n+!    print *,a\n+!    print *,b\n+    if (allocated (std(1)%np)) deallocate (std(1)%np)\n+    if (associated (std)) deallocate (std)\n+    if (norm2(a - b) .gt. 1d-3) stop 1\n+  end subroutine\n+\n+  subroutine comment_4\n+    integer, parameter :: length = 2\n+    real(8), dimension(length) :: a, b\n+    integer :: i\n+\n+    type point\n+       real(8) :: x\n+    end type point\n+\n+    type points\n+       type(point), dimension(:), pointer :: np=>null()\n+    end type points\n+\n+    type stored\n+       integer :: l\n+       type(points), pointer :: nfpoint=>null()\n+    end type stored\n+\n+    type(stored), dimension(:), pointer :: std=>null()\n+\n+\n+    allocate(std(1))\n+    allocate(std(1)%nfpoint)\n+    allocate(std(1)%nfpoint%np(length))\n+    std(1)%nfpoint%np(1)%x = 0.3d0\n+    std(1)%nfpoint%np(2)%x = 0.3555d0\n+\n+!    do i = 1, length\n+!       write(*, \"('std(1)%nfpoint%np(',i1,')%x = ',1e22.14)\") i, std(1)%nfpoint%np(i)%x\n+!    end do\n+!    do i = 1, length\n+!       write(*, \"('std(1)%nfpoint%np(1:',i1,')%x = ',2e22.14)\") i, std(1)%nfpoint%np(1:i)%x\n+!    end do\n+    a = std(1)%nfpoint%np(1:2)%x\n+    b = [std(1)%nfpoint%np(1)%x, std(1)%nfpoint%np(2)%x]\n+    if (associated (std(1)%nfpoint%np)) deallocate (std(1)%nfpoint%np)\n+    if (associated (std(1)%nfpoint)) deallocate (std(1)%nfpoint)\n+    if (associated (std)) deallocate (std)\n+    if (norm2(a - b) .gt. 1d-3) stop 2\n+    end subroutine\n+end program test"}]}