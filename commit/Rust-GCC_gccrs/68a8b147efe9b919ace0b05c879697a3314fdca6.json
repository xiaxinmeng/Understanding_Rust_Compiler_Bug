{"sha": "68a8b147efe9b919ace0b05c879697a3314fdca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhOGIxNDdlZmU5YjkxOWFjZTBiMDVjODc5Njk3YTMzMTRmZGNhNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-07-04T02:14:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-07-04T02:14:16Z"}, "message": "print-tree.c (print_real_cst): New function.\n\ngcc/ChangeLog:\n\n\t* print-tree.c (print_real_cst): New function.\n\t(print_node_brief): Call it.\n\t(print_node): Ditto.\n\nFrom-SVN: r262367", "tree": {"sha": "c53d9bb6849213f03c7d55f84e71c6a941bef92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c53d9bb6849213f03c7d55f84e71c6a941bef92d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a8b147efe9b919ace0b05c879697a3314fdca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a8b147efe9b919ace0b05c879697a3314fdca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a8b147efe9b919ace0b05c879697a3314fdca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a8b147efe9b919ace0b05c879697a3314fdca6/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec4692b4a59c3a9f667366c426332a3ae86cd046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4692b4a59c3a9f667366c426332a3ae86cd046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4692b4a59c3a9f667366c426332a3ae86cd046"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "0ed9700be260c7766117da8bca7585e4a5343db8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a8b147efe9b919ace0b05c879697a3314fdca6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a8b147efe9b919ace0b05c879697a3314fdca6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68a8b147efe9b919ace0b05c879697a3314fdca6", "patch": "@@ -1,3 +1,9 @@\n+2018-07-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* print-tree.c (print_real_cst): New function.\n+\t(print_node_brief): Call it.\n+\t(print_node): Ditto.\n+\n 2018-07-03  Jeff Law  <law@redhat.com>\n \n \t* config/h8300/h8300.md (ors code_iterator): New.\n@@ -12,7 +18,7 @@\n \t(movmd splitters): Similarly.\n \t(stpcpy_internal_normal, stpcpy_internal): Similarly for thes patterns.\n \t(movsd splitters): Similarly.\n-\t\n+\n \t* config/h8300/h8300.c (h8300_insn_length_from_table): Consolidate\n \tADDB, ADDW and ADDL into a single ADD attribute which selects the\n \tright table based on the size of the operand."}, {"sha": "5347e0647043485277a63d95ce29c626a928c4c7", "filename": "gcc/print-tree.c", "status": "modified", "additions": 67, "deletions": 36, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a8b147efe9b919ace0b05c879697a3314fdca6/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a8b147efe9b919ace0b05c879697a3314fdca6/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=68a8b147efe9b919ace0b05c879697a3314fdca6", "patch": "@@ -52,6 +52,71 @@ dump_addr (FILE *file, const char *prefix, const void *addr)\n     fprintf (file, \"%s\" HOST_PTR_PRINTF, prefix, addr);\n }\n \n+/* Print to FILE a NODE representing a REAL_CST constant, including\n+   Infinity and NaN.  Be verbose when BFRIEF is false.  */\n+\n+static void\n+print_real_cst (FILE *file, const_tree node, bool brief)\n+{\n+  if (TREE_OVERFLOW (node))\n+    fprintf (file, \" overflow\");\n+\n+  REAL_VALUE_TYPE d = TREE_REAL_CST (node);\n+  if (REAL_VALUE_ISINF (d))\n+    fprintf (file,  REAL_VALUE_NEGATIVE (d) ? \" -Inf\" : \" Inf\");\n+  else if (REAL_VALUE_ISNAN (d))\n+    {\n+      /* Print a NaN in the format [-][Q]NaN[(significand[exponent])]\n+\t where significand is a hexadecimal string that starts with\n+\t the 0x prefix followed by 0 if the number is not canonical\n+\t and a non-zero digit if it is, and exponent is decimal.  */\n+      unsigned start = 0;\n+      const char *psig = (const char *) d.sig;\n+      for (unsigned i = 0; i != sizeof d.sig; ++i)\n+\tif (psig[i])\n+\t  {\n+\t    start = i;\n+\t    break;\n+\t  }\n+\n+      fprintf (file, \" %s%sNaN\", d.sign ? \"-\" : \"\",\n+\t       d.signalling ? \"S\" : \"Q\");\n+\n+      if (brief)\n+\treturn;\n+\n+      if (start)\n+\tfprintf (file, \"(0x%s\", d.canonical ? \"\" : \"0\");\n+      else if (d.uexp)\n+\tfprintf (file, \"(%s\", d.canonical ? \"\" : \"0\");\n+      else if (!d.canonical)\n+\t{\n+\t  fprintf (file, \"(0)\");\n+\t  return;\n+\t}\n+\n+      if (psig[start])\n+\t{\n+\t  for (unsigned i = start; i != sizeof d.sig; ++i)\n+\t    if (i == start)\n+\t      fprintf (file, \"%x\", psig[i]);\n+\t    else\n+\t      fprintf (file, \"%02x\", psig[i]);\n+\t}\n+\n+      if (d.uexp)\n+\tfprintf (file, \"%se%u)\", psig[start] ? \",\" : \"\", d.uexp);\n+      else if (psig[start])\n+\tfputc (')', file);\n+    }\n+  else\n+    {\n+      char string[64];\n+      real_to_decimal (string, &d, sizeof (string), 0, 1);\n+      fprintf (file, \" %s\", string);\n+    }\n+}\n+\n /* Print a node in brief fashion, with just the code, address and name.  */\n \n void\n@@ -121,24 +186,7 @@ print_node_brief (FILE *file, const char *prefix, const_tree node, int indent)\n       print_dec (wi::to_wide (node), file, TYPE_SIGN (TREE_TYPE (node)));\n     }\n   if (TREE_CODE (node) == REAL_CST)\n-    {\n-      REAL_VALUE_TYPE d;\n-\n-      if (TREE_OVERFLOW (node))\n-\tfprintf (file, \" overflow\");\n-\n-      d = TREE_REAL_CST (node);\n-      if (REAL_VALUE_ISINF (d))\n-\tfprintf (file,  REAL_VALUE_NEGATIVE (d) ? \" -Inf\" : \" Inf\");\n-      else if (REAL_VALUE_ISNAN (d))\n-\tfprintf (file, \" Nan\");\n-      else\n-\t{\n-\t  char string[60];\n-\t  real_to_decimal (string, &d, sizeof (string), 0, 1);\n-\t  fprintf (file, \" %s\", string);\n-\t}\n-    }\n+    print_real_cst (file, node, true);\n   if (TREE_CODE (node) == FIXED_CST)\n     {\n       FIXED_VALUE_TYPE f;\n@@ -730,24 +778,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  break;\n \n \tcase REAL_CST:\n-\t  {\n-\t    REAL_VALUE_TYPE d;\n-\n-\t    if (TREE_OVERFLOW (node))\n-\t      fprintf (file, \" overflow\");\n-\n-\t    d = TREE_REAL_CST (node);\n-\t    if (REAL_VALUE_ISINF (d))\n-\t      fprintf (file,  REAL_VALUE_NEGATIVE (d) ? \" -Inf\" : \" Inf\");\n-\t    else if (REAL_VALUE_ISNAN (d))\n-\t      fprintf (file, \" Nan\");\n-\t    else\n-\t      {\n-\t\tchar string[64];\n-\t\treal_to_decimal (string, &d, sizeof (string), 0, 1);\n-\t\tfprintf (file, \" %s\", string);\n-\t      }\n-\t  }\n+\t  print_real_cst (file, node, false);\n \t  break;\n \n \tcase FIXED_CST:"}]}