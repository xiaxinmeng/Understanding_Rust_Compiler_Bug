{"sha": "1a83bfc389e6868cfa64bf094d0ea70035c5a983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4M2JmYzM4OWU2ODY4Y2ZhNjRiZjA5NGQwZWE3MDAzNWM1YTk4Mw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-12-12T17:17:51Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-12-12T17:17:51Z"}, "message": "re PR target/25258 ([4.0 regression/hpux] gcc generates incorrect stabs debug output)\n\n\tPR target/25258\n\t* pa.c (pa_output_function_epilogue): Set cfun->machine->in_nsubspa to\n\tindicate function epilogue has been output.\n\t(pa_asm_output_mi_thunk): Likewise.\n\t(output_deferred_plabels): Put plabels in readonly data section when\n\tnot generating PIC code.\n\t(som_output_text_section_asm_op): Use .NSUBSPA to output debug\n\tinformation.  Add assert.\n\t(som_output_comdat_data_section_asm_op): New function.\n\t(pa_som_asm_init_sections): Use som_output_comdat_data_section_asm_op\n\tinstead of output_section_asm_op for COMDAT sections.\n\nFrom-SVN: r108420", "tree": {"sha": "257b9cf6476f4b740eebd29afffbd1869bc1f461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/257b9cf6476f4b740eebd29afffbd1869bc1f461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a83bfc389e6868cfa64bf094d0ea70035c5a983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a83bfc389e6868cfa64bf094d0ea70035c5a983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a83bfc389e6868cfa64bf094d0ea70035c5a983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a83bfc389e6868cfa64bf094d0ea70035c5a983/comments", "author": null, "committer": null, "parents": [{"sha": "ffb99c1eba5ccc1ac92b08e3f387f801afca968c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb99c1eba5ccc1ac92b08e3f387f801afca968c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb99c1eba5ccc1ac92b08e3f387f801afca968c"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "c84e5a642976aa154037899f3ed86fe4ffbc3d3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a83bfc389e6868cfa64bf094d0ea70035c5a983/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a83bfc389e6868cfa64bf094d0ea70035c5a983/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a83bfc389e6868cfa64bf094d0ea70035c5a983", "patch": "@@ -1,3 +1,16 @@\n+2005-12-12  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (pa_output_function_epilogue): Set cfun->machine->in_nsubspa to\n+\tindicate function epilogue has been output.\n+\t(pa_asm_output_mi_thunk): Likewise.\n+\t(output_deferred_plabels): Put plabels in readonly data section when\n+\tnot generating PIC code.\n+\t(som_output_text_section_asm_op): Use .NSUBSPA to output debug\n+\tinformation.  Add assert.\n+\t(som_output_comdat_data_section_asm_op): New function.\n+\t(pa_som_asm_init_sections): Use som_output_comdat_data_section_asm_op\n+\tinstead of output_section_asm_op for COMDAT sections.\n+\n 2005-12-12  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* cfgcleanup.c (condjump_equiv_p, try_crossjump_to_edge):"}, {"sha": "a16c6af360baa2e23bdcea930b99f7e3476167ce", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a83bfc389e6868cfa64bf094d0ea70035c5a983/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a83bfc389e6868cfa64bf094d0ea70035c5a983/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1a83bfc389e6868cfa64bf094d0ea70035c5a983", "patch": "@@ -3935,6 +3935,7 @@ pa_output_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t debug information.  Forget that we are in this subspace to ensure\n \t that the next function is output in its own subspace.  */\n       in_section = NULL;\n+      cfun->machine->in_nsubspa = 2;\n     }\n \n   if (INSN_ADDRESSES_SET_P ())\n@@ -5300,12 +5301,13 @@ static void\n output_deferred_plabels (void)\n {\n   size_t i;\n-  /* If we have deferred plabels, then we need to switch into the data\n-     section and align it to a 4 byte boundary before we output the\n-     deferred plabels.  */\n+\n+  /* If we have some deferred plabels, then we need to switch into the\n+     data or readonly data section, and align it to a 4 byte boundary\n+     before outputing the deferred plabels.  */\n   if (n_deferred_plabels)\n     {\n-      switch_to_section (data_section);\n+      switch_to_section (flag_pic ? data_section : readonly_data_section);\n       ASM_OUTPUT_ALIGN (asm_out_file, TARGET_64BIT ? 3 : 2);\n     }\n \n@@ -7799,15 +7801,22 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \n   fprintf (file, \"\\t.EXIT\\n\\t.PROCEND\\n\");\n \n+  if (TARGET_SOM && TARGET_GAS)\n+    {\n+      /* We done with this subspace except possibly for some additional\n+\t debug information.  Forget that we are in this subspace to ensure\n+\t that the next function is output in its own subspace.  */\n+      in_section = NULL;\n+      cfun->machine->in_nsubspa = 2;\n+    }\n+\n   if (TARGET_SOM && flag_pic && TREE_PUBLIC (function))\n     {\n       switch_to_section (data_section);\n       output_asm_insn (\".align 4\", xoperands);\n       ASM_OUTPUT_LABEL (file, label);\n       output_asm_insn (\".word P'%0\", xoperands);\n     }\n-  else if (TARGET_SOM && TARGET_GAS)\n-    in_section = NULL;\n \n   current_thunk_number++;\n   nbytes = ((nbytes + FUNCTION_BOUNDARY / BITS_PER_UNIT - 1)\n@@ -9058,27 +9067,39 @@ som_output_text_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n \t  if (cfun->decl\n \t      && DECL_ONE_ONLY (cfun->decl)\n \t      && !DECL_WEAK (cfun->decl))\n-\t    output_section_asm_op (\"\\t.SPACE $TEXT$\\n\"\n-\t\t\t\t   \"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,\"\n-\t\t\t\t   \"ACCESS=44,SORT=24,COMDAT\");\n-\t  else\n-\t    output_section_asm_op (\"\\t.SPACE $TEXT$\\n\\t.NSUBSPA $CODE$\");\n-\t  return;\n+\t    {\n+\t      output_section_asm_op (\"\\t.SPACE $TEXT$\\n\"\n+\t\t\t\t     \"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,\"\n+\t\t\t\t     \"ACCESS=44,SORT=24,COMDAT\");\n+\t      return;\n+\t    }\n \t}\n       else\n \t{\n \t  /* There isn't a current function or the body of the current\n \t     function has been completed.  So, we are changing to the\n-\t     text section to output debugging information.  Do this in\n-\t     the default text section.  We need to forget that we are\n-\t     in the text section so that varasm.c will call us when\n-\t     text_section is selected again.  */\n+\t     text section to output debugging information.  Thus, we\n+\t     need to forget that we are in the text section so that\n+\t     varasm.c will call us when text_section is selected again.  */\n+\t  gcc_assert (!cfun || cfun->machine->in_nsubspa == 2);\n \t  in_section = NULL;\n \t}\n+      output_section_asm_op (\"\\t.SPACE $TEXT$\\n\\t.NSUBSPA $CODE$\");\n+      return;\n     }\n   output_section_asm_op (\"\\t.SPACE $TEXT$\\n\\t.SUBSPA $CODE$\");\n }\n \n+/* A get_unnamed_section callback for switching to comdat data\n+   sections.  This function is only used with SOM.  */\n+\n+static void\n+som_output_comdat_data_section_asm_op (const void *data)\n+{\n+  in_section = NULL;\n+  output_section_asm_op (data);\n+}\n+\n /* Implement TARGET_ASM_INITIALIZE_SECTIONS  */\n \n static void\n@@ -9097,7 +9118,7 @@ pa_som_asm_init_sections (void)\n      data one-only by creating a new $LIT$ subspace in $TEXT$ with\n      the comdat flag.  */\n   som_one_only_readonly_data_section\n-    = get_unnamed_section (0, output_section_asm_op,\n+    = get_unnamed_section (0, som_output_comdat_data_section_asm_op,\n \t\t\t   \"\\t.SPACE $TEXT$\\n\"\n \t\t\t   \"\\t.NSUBSPA $LIT$,QUAD=0,ALIGN=8,\"\n \t\t\t   \"ACCESS=0x2c,SORT=16,COMDAT\");\n@@ -9106,7 +9127,8 @@ pa_som_asm_init_sections (void)\n   /* When secondary definitions are not supported, SOM makes data one-only\n      by creating a new $DATA$ subspace in $PRIVATE$ with the comdat flag.  */\n   som_one_only_data_section\n-    = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+    = get_unnamed_section (SECTION_WRITE,\n+\t\t\t   som_output_comdat_data_section_asm_op,\n \t\t\t   \"\\t.SPACE $PRIVATE$\\n\"\n \t\t\t   \"\\t.NSUBSPA $DATA$,QUAD=1,ALIGN=8,\"\n \t\t\t   \"ACCESS=31,SORT=24,COMDAT\");"}]}