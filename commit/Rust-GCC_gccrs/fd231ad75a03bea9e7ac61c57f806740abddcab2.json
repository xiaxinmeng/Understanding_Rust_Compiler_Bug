{"sha": "fd231ad75a03bea9e7ac61c57f806740abddcab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyMzFhZDc1YTAzYmVhOWU3YWM2MWM1N2Y4MDY3NDBhYmRkY2FiMg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-03-13T18:03:30Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-03-13T18:03:30Z"}, "message": "Implement LWG 2806, Base class of bad_optional_access.\n\n* include/std/optional (bad_optional_access):\nDerive from std::exception.\n(bad_optional_access::bad_optional_access): Adjust.\n(bad_optional_access::what): New.\n(__throw_bad_optional_access(const char*)):\nRemove the parameter and adjust calls.\n* testsuite/20_util/optional/cons/value_neg.cc: Adjust.\n* testsuite/20_util/optional/typedefs.cc: Likewise.\n\nFrom-SVN: r246103", "tree": {"sha": "9ca4f80704b5d6e802b54f9c218ecd50f7c613bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca4f80704b5d6e802b54f9c218ecd50f7c613bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd231ad75a03bea9e7ac61c57f806740abddcab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd231ad75a03bea9e7ac61c57f806740abddcab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd231ad75a03bea9e7ac61c57f806740abddcab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd231ad75a03bea9e7ac61c57f806740abddcab2/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce15db61bc8c2dc7a7e1f901903fa966077fa3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce15db61bc8c2dc7a7e1f901903fa966077fa3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce15db61bc8c2dc7a7e1f901903fa966077fa3e"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "c85d6a78d568ee9ac2f90389206a7f8b2d3186fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd231ad75a03bea9e7ac61c57f806740abddcab2", "patch": "@@ -1,3 +1,15 @@\n+2017-03-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2806, Base class of bad_optional_access.\n+\t* include/std/optional (bad_optional_access):\n+\tDerive from std::exception.\n+\t(bad_optional_access::bad_optional_access): Adjust.\n+\t(bad_optional_access::what): New.\n+\t(__throw_bad_optional_access(const char*)):\n+\tRemove the parameter and adjust calls.\n+\t* testsuite/20_util/optional/cons/value_neg.cc: Adjust.\n+\t* testsuite/20_util/optional/typedefs.cc: Likewise.\n+\n 2017-03-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement LWG 2934, optional<const T> doesn't compare with T."}, {"sha": "5e796ac504d8cf5edbf49809343b5974a54df5f7", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=fd231ad75a03bea9e7ac61c57f806740abddcab2", "patch": "@@ -76,25 +76,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  dereferenced.\n    *  @ingroup exceptions\n    */\n-  class bad_optional_access : public logic_error\n+  class bad_optional_access : public exception\n   {\n-    // XXX See LEWG 72, https://issues.isocpp.org/show_bug.cgi?id=72\n   public:\n-    bad_optional_access() : logic_error(\"bad optional access\") { }\n-    // XXX This constructor is non-standard. Should not be inline\n-    explicit bad_optional_access(const char* __arg) : logic_error(__arg) { }\n+    bad_optional_access() { }\n+    virtual const char* what() const noexcept override\n+    {return \"bad optional access\";}\n \n     virtual ~bad_optional_access() noexcept = default;\n   };\n \n   void\n-  __throw_bad_optional_access(const char*)\n+  __throw_bad_optional_access()\n   __attribute__((__noreturn__));\n \n   // XXX Does not belong here.\n   inline void\n-  __throw_bad_optional_access(const char* __s)\n-  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access(__s)); }\n+  __throw_bad_optional_access()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }\n \n   /**\n     * @brief Class template that holds the necessary state for @ref optional\n@@ -669,8 +668,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \treturn this->_M_is_engaged()\n \t  ?  this->_M_get()\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n+\t  : (__throw_bad_optional_access(),\n \t     this->_M_get());\n       }\n \n@@ -679,8 +677,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \treturn this->_M_is_engaged()\n \t  ?  this->_M_get()\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n+\t  : (__throw_bad_optional_access(),\n \t     this->_M_get());\n       }\n \n@@ -689,8 +686,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \treturn this->_M_is_engaged()\n \t  ?  std::move(this->_M_get())\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n+\t  : (__throw_bad_optional_access(),\n \t     std::move(this->_M_get()));\n       }\n \n@@ -699,8 +695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \treturn this->_M_is_engaged()\n \t  ?  std::move(this->_M_get())\n-\t  : (__throw_bad_optional_access(\"Attempt to access value of a \"\n-\t\t                         \"disengaged optional object\"),\n+\t  : (__throw_bad_optional_access(),\n \t     std::move(this->_M_get()));\n       }\n "}, {"sha": "249f622919bc66a280f46939929b3cb91ccb52fc", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/value_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue_neg.cc?ref=fd231ad75a03bea9e7ac61c57f806740abddcab2", "patch": "@@ -37,8 +37,8 @@ int main()\n     std::optional<std::unique_ptr<int>> oup2 = new int;  // { dg-error \"conversion\" }\n     struct U { explicit U(std::in_place_t); };\n     std::optional<U> ou(std::in_place); // { dg-error \"no matching\" }\n-    // { dg-error \"no type\" \"\" { target { *-*-* } } 438 }\n-    // { dg-error \"no type\" \"\" { target { *-*-* } } 448 }\n-    // { dg-error \"no type\" \"\" { target { *-*-* } } 505 }\n+    // { dg-error \"no type\" \"\" { target { *-*-* } } 437 }\n+    // { dg-error \"no type\" \"\" { target { *-*-* } } 447 }\n+    // { dg-error \"no type\" \"\" { target { *-*-* } } 504 }\n   }\n }"}, {"sha": "8d3f997cef42b6487575a59d9d310c3467f132b1", "filename": "libstdc++-v3/testsuite/20_util/optional/typedefs.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd231ad75a03bea9e7ac61c57f806740abddcab2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Ftypedefs.cc?ref=fd231ad75a03bea9e7ac61c57f806740abddcab2", "patch": "@@ -29,5 +29,7 @@ using check2_t = std::in_place_t;\n using check3_t = std::nullopt_t;\n using check4_t = std::bad_optional_access;\n \n-static_assert(std::is_base_of<std::logic_error, check4_t>::value,\n-\t      \"bad_optional_access must derive from logic_error\");\n+static_assert(!std::is_base_of<std::logic_error, check4_t>::value,\n+\t      \"bad_optional_access must derive from exception\");\n+static_assert(std::is_base_of<std::exception, check4_t>::value,\n+\t      \"bad_optional_access must derive from exception\");"}]}