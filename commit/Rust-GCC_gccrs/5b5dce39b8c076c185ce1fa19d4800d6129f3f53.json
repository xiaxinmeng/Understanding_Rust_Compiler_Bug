{"sha": "5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1ZGNlMzliOGMwNzZjMTg1Y2UxZmExOWQ0ODAwZDYxMjlmM2Y1Mw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-10-07T06:52:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-10-07T06:52:45Z"}, "message": "cp-gimplify.c (genericize_if_stmt): Use protected_set_expr_location.\n\n\t* cp-gimplify.c (genericize_if_stmt): Use protected_set_expr_location.\n\t(genericize_cp_loop): Likewise.\n\t* decl.c (cxx_maybe_build_cleanup): Likewise.\n\t* parser.c (cp_parser_binary_expression): Likewise.\n\t(cp_parser_omp_for_loop): Likewise.\n\t(cp_parser_omp_construct): Likewise.\n\t* semantics.c (finish_transaction_stmt): Likewise.\n\t(build_transaction_expr): Likewise.\n\nFrom-SVN: r228560", "tree": {"sha": "adefe0417cb5fcc10eaf977e1ba8716919e63640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adefe0417cb5fcc10eaf977e1ba8716919e63640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00852255e4a0d3b67ed853aacbc4aa4f4dfe724a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00852255e4a0d3b67ed853aacbc4aa4f4dfe724a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00852255e4a0d3b67ed853aacbc4aa4f4dfe724a"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "3c785451126f1b70520f1fe2a2c43a9cf87e14da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "patch": "@@ -1,3 +1,14 @@\n+2015-10-07  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-gimplify.c (genericize_if_stmt): Use protected_set_expr_location.\n+\t(genericize_cp_loop): Likewise.\n+\t* decl.c (cxx_maybe_build_cleanup): Likewise.\n+\t* parser.c (cp_parser_binary_expression): Likewise.\n+\t(cp_parser_omp_for_loop): Likewise.\n+\t(cp_parser_omp_construct): Likewise.\n+\t* semantics.c (finish_transaction_stmt): Likewise.\n+\t(build_transaction_expr): Likewise.\n+\n 2015-10-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67810"}, {"sha": "9b6ac89d1a16815f1e0384f6a98e9f01cd1c5902", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "patch": "@@ -207,8 +207,8 @@ genericize_if_stmt (tree *stmt_p)\n     stmt = else_;\n   else\n     stmt = build3 (COND_EXPR, void_type_node, cond, then_, else_);\n-  if (CAN_HAVE_LOCATION_P (stmt) && !EXPR_HAS_LOCATION (stmt))\n-    SET_EXPR_LOCATION (stmt, locus);\n+  if (!EXPR_HAS_LOCATION (stmt))\n+    protected_set_expr_location (stmt, locus);\n   *stmt_p = stmt;\n }\n \n@@ -231,8 +231,7 @@ genericize_cp_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n   blab = begin_bc_block (bc_break, start_locus);\n   clab = begin_bc_block (bc_continue, start_locus);\n \n-  if (incr && EXPR_P (incr))\n-    SET_EXPR_LOCATION (incr, start_locus);\n+  protected_set_expr_location (incr, start_locus);\n \n   cp_walk_tree (&cond, cp_genericize_r, data, NULL);\n   cp_walk_tree (&body, cp_genericize_r, data, NULL);"}, {"sha": "8eb9cc2e27fd8bd60e1d48886913832f8191a90f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "patch": "@@ -14964,8 +14964,7 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n      a \"jumpy\" behaviour for users of debuggers when they step around\n      the end of the block.  So let's unset the location of the\n      destructor call instead.  */\n-  if (cleanup != NULL && EXPR_P (cleanup))\n-    SET_EXPR_LOCATION (cleanup, UNKNOWN_LOCATION);\n+  protected_set_expr_location (cleanup, UNKNOWN_LOCATION);\n \n   if (cleanup\n       && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (TREE_TYPE (decl)))"}, {"sha": "d4ef7f9d864f10ae5be56148890ccef24c8a5507", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "patch": "@@ -8612,8 +8612,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \t\t\t\t\t rhs, rhs_type, &overload,\n \t\t\t\t\t complain_flags (decltype_p));\n       current.lhs_type = current.tree_type;\n-      if (EXPR_P (current.lhs))\n-\tSET_EXPR_LOCATION (current.lhs, current.loc);\n+      protected_set_expr_location (current.lhs, current.loc);\n \n       /* If the binary operator required the use of an overloaded operator,\n \t then this expression cannot be an integral constant-expression.\n@@ -32046,8 +32045,8 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \t    incr = cp_parser_omp_for_incr (parser, real_decl);\n \t  else\n \t    incr = cp_parser_expression (parser);\n-\t  if (CAN_HAVE_LOCATION_P (incr) && !EXPR_HAS_LOCATION (incr))\n-\t    SET_EXPR_LOCATION (incr, input_location);\n+\t  if (!EXPR_HAS_LOCATION (incr))\n+\t    protected_set_expr_location (incr, input_location);\n \t}\n \n       if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n@@ -34045,8 +34044,7 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok)\n       gcc_unreachable ();\n     }\n \n-  if (stmt)\n-    SET_EXPR_LOCATION (stmt, pragma_tok->location);\n+  protected_set_expr_location (stmt, pragma_tok->location);\n }\n \f\n /* Transactional Memory parsing routines.  */"}, {"sha": "c1f43301b0058693ca7ae957b255238f656caec1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5dce39b8c076c185ce1fa19d4800d6129f3f53/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "patch": "@@ -7086,9 +7086,8 @@ finish_transaction_stmt (tree stmt, tree compound_stmt, int flags, tree noex)\n     {\n       tree body = build_must_not_throw_expr (TRANSACTION_EXPR_BODY (stmt),\n \t\t\t\t\t     noex);\n-      /* This may not be true when the STATEMENT_LIST is empty.  */\n-      if (EXPR_P (body))\n-        SET_EXPR_LOCATION (body, EXPR_LOCATION (TRANSACTION_EXPR_BODY (stmt)));\n+      protected_set_expr_location\n+\t(body, EXPR_LOCATION (TRANSACTION_EXPR_BODY (stmt)));\n       TREE_SIDE_EFFECTS (body) = 1;\n       TRANSACTION_EXPR_BODY (stmt) = body;\n     }\n@@ -7108,8 +7107,7 @@ build_transaction_expr (location_t loc, tree expr, int flags, tree noex)\n   if (noex)\n     {\n       expr = build_must_not_throw_expr (expr, noex);\n-      if (EXPR_P (expr))\n-\tSET_EXPR_LOCATION (expr, loc);\n+      protected_set_expr_location (expr, loc);\n       TREE_SIDE_EFFECTS (expr) = 1;\n     }\n   ret = build1 (TRANSACTION_EXPR, TREE_TYPE (expr), expr);"}]}