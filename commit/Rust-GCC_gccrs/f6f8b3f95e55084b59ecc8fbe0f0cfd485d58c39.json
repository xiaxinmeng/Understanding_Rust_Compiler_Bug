{"sha": "f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39", "node_id": "C_kwDOANBUbNoAKGY2ZjhiM2Y5NWU1NTA4NGI1OWVjYzhmYmUwZjBjZmQ0ODVkNThjMzk", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2021-10-14T15:41:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:05Z"}, "message": "[Ada] Delete unused runtime files\n\ngcc/ada/\n\n\t* libgnat/g-io-put__vxworks.adb: Remove (unused)\n\t* libgnat/s-parame__ae653.ads: Likewise.\n\t* libgnat/s-thread.ads: Likewise.\n\t* libgnat/s-thread__ae653.adb: Likewise.", "tree": {"sha": "d708c7964a28b07f0e44f775145bc9f3eb1dff64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d708c7964a28b07f0e44f775145bc9f3eb1dff64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f8b3f95e55084b59ecc8fbe0f0cfd485d58c39/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60440d3cf51acb9cb63543d5bb71fd50cfdd9470"}], "stats": {"total": 504, "additions": 0, "deletions": 504}, "files": [{"sha": "29307f9e129fbacaabc147708f1f1a41cf02771b", "filename": "gcc/ada/libgnat/g-io-put__vxworks.adb", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fg-io-put__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fg-io-put__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-io-put__vxworks.adb?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -1,53 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                              G N A T . I O                               --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 1995-2021, AdaCore                     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  vxworks zfp version of Put (C : Character)\n-\n-with Interfaces.C; use Interfaces.C;\n-\n-separate (GNAT.IO)\n-procedure Put (C : Character) is\n-\n-   function ioGlobalStdGet\n-     (File : int) return int;\n-   pragma Import (C, ioGlobalStdGet, \"ioGlobalStdGet\");\n-\n-   procedure fdprintf\n-     (File   : int;\n-      Format : String;\n-      Value  : Character);\n-   pragma Import (C, fdprintf, \"fdprintf\");\n-\n-   Stdout_ID : constant int := 1;\n-\n-begin\n-   fdprintf (ioGlobalStdGet (Stdout_ID), \"%c\" & ASCII.NUL, C);\n-end Put;"}, {"sha": "a3e235124893af0bfdb75672d67964168530bc2e", "filename": "gcc/ada/libgnat/s-parame__ae653.ads", "status": "removed", "additions": 0, "deletions": 196, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-parame__ae653.ads?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -1,196 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                    S Y S T E M . P A R A M E T E R S                     --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Version is used by VxWorks 653, VxWorks MILS, and VxWorks6 cert Ravenscar\n-\n---  This package defines some system dependent parameters for GNAT. These\n---  are values that are referenced by the runtime library and are therefore\n---  relevant to the target machine.\n-\n---  The parameters whose value is defined in the spec are not generally\n---  expected to be changed. If they are changed, it will be necessary to\n---  recompile the run-time library.\n-\n---  The parameters which are defined by functions can be changed by modifying\n---  the body of System.Parameters in file s-parame.adb. A change to this body\n---  requires only rebinding and relinking of the application.\n-\n---  Note: do not introduce any pragma Inline statements into this unit, since\n---  otherwise the relinking and rebinding capability would be deactivated.\n-\n-package System.Parameters is\n-   pragma Pure;\n-\n-   ---------------------------------------\n-   -- Task And Stack Allocation Control --\n-   ---------------------------------------\n-\n-   type Size_Type is range\n-     -(2 ** (Integer'(Standard'Address_Size) - 1)) ..\n-     +(2 ** (Integer'(Standard'Address_Size) - 1)) - 1;\n-   --  Type used to provide task stack sizes to the runtime. Sized to permit\n-   --  stack sizes of up to half the total addressable memory space. This may\n-   --  seem excessively large (even for 32-bit systems), however there are many\n-   --  instances of users requiring large stack sizes (for example string\n-   --  processing).\n-\n-   Unspecified_Size : constant Size_Type := Size_Type'First;\n-   --  Value used to indicate that no size type is set\n-\n-   function Default_Stack_Size return Size_Type;\n-   --  Default task stack size used if none is specified\n-\n-   function Minimum_Stack_Size return Size_Type;\n-   --  Minimum task stack size permitted\n-\n-   function Adjust_Storage_Size (Size : Size_Type) return Size_Type;\n-   --  Given the storage size stored in the TCB, return the Storage_Size\n-   --  value required by the RM for the Storage_Size attribute. The\n-   --  required adjustment is as follows:\n-   --\n-   --    when Size = Unspecified_Size, return Default_Stack_Size\n-   --    when Size < Minimum_Stack_Size, return Minimum_Stack_Size\n-   --    otherwise return given Size\n-\n-   Default_Env_Stack_Size : constant Size_Type := 14_336;\n-   --  Assumed size of the environment task, if no other information\n-   --  is available. This value is used when stack checking is\n-   --  enabled and no GNAT_STACK_LIMIT environment variable is set.\n-   --  This value is chosen as the VxWorks default stack size is 20kB,\n-   --  and a little more than 4kB is necessary for the run time.\n-\n-   Stack_Grows_Down  : constant Boolean := True;\n-   --  This constant indicates whether the stack grows up (False) or\n-   --  down (True) in memory as functions are called. It is used for\n-   --  proper implementation of the stack overflow check.\n-\n-   Runtime_Default_Sec_Stack_Size : constant Size_Type := 10 * 1024;\n-   --  The run-time chosen default size for secondary stacks that may be\n-   --  overridden by the user with the use of binder -D switch.\n-\n-   Sec_Stack_Dynamic : constant Boolean := False;\n-   --  Indicates if secondary stacks can grow and shrink at run-time. If False,\n-   --  the size of a secondary stack is fixed at the point of its creation.\n-\n-   ------------------------------------\n-   -- Characteristics of time_t type --\n-   ------------------------------------\n-\n-   --  IMPORTANT NOTE:\n-   --  time_t_bits must match the size specified in the VSB.\n-\n-   time_t_bits : constant := Long_Long_Integer'Size;\n-   --  Number of bits in type time_t for SR0660 and newer,\n-   --  with the default configuration of the VSB.\n-\n-   ----------------------------------------------\n-   -- Characteristics of types in Interfaces.C --\n-   ----------------------------------------------\n-\n-   long_bits : constant := Long_Integer'Size;\n-   --  Number of bits in type long and unsigned_long. The normal convention\n-   --  is that this is the same as type Long_Integer, but this may not be true\n-   --  of all targets.\n-\n-   ptr_bits  : constant := Standard'Address_Size;\n-   subtype C_Address is System.Address;\n-   --  Number of bits in Interfaces.C pointers, normally a standard address\n-\n-   C_Malloc_Linkname : constant String := \"__gnat_malloc\";\n-   --  Name of runtime function used to allocate such a pointer\n-\n-   ----------------------------------------------\n-   -- Behavior of Pragma Finalize_Storage_Only --\n-   ----------------------------------------------\n-\n-   --  Garbage_Collected is a Boolean constant whose value indicates the\n-   --  effect of the pragma Finalize_Storage_Entry on a controlled type.\n-\n-   --    Garbage_Collected = False\n-\n-   --      The system releases all storage on program termination only,\n-   --      but not other garbage collection occurs, so finalization calls\n-   --      are omitted only for outer level objects can be omitted if\n-   --      pragma Finalize_Storage_Only is used.\n-\n-   --    Garbage_Collected = True\n-\n-   --      The system provides full garbage collection, so it is never\n-   --      necessary to release storage for controlled objects for which\n-   --      a pragma Finalize_Storage_Only is used.\n-\n-   Garbage_Collected : constant Boolean := False;\n-   --  The storage mode for this system (release on program exit)\n-\n-   ---------------------\n-   -- Tasking Profile --\n-   ---------------------\n-\n-   --  In the following sections, constant parameters are defined to\n-   --  allow some optimizations and fine tuning within the tasking run time\n-   --  based on restrictions on the tasking features.\n-\n-   -------------------\n-   -- Task Abortion --\n-   -------------------\n-\n-   No_Abort : constant Boolean := False;\n-   --  This constant indicates whether abort statements and asynchronous\n-   --  transfer of control (ATC) are disallowed. If set to True, it is\n-   --  assumed that neither construct is used, and the run time does not\n-   --  need to defer/undefer abort and check for pending actions at\n-   --  completion points. A value of True for No_Abort corresponds to:\n-   --  pragma Restrictions (No_Abort_Statements);\n-   --  pragma Restrictions (Max_Asynchronous_Select_Nesting => 0);\n-\n-   ---------------------\n-   -- Task Attributes --\n-   ---------------------\n-\n-   Max_Attribute_Count : constant := 8;\n-   --  Number of task attributes stored in the task control block\n-\n-   -----------------------\n-   -- Task Image Length --\n-   -----------------------\n-\n-   Max_Task_Image_Length : constant := 32;\n-   --  This constant specifies the maximum length of a task's image\n-\n-   ------------------------------\n-   -- Exception Message Length --\n-   ------------------------------\n-\n-   Default_Exception_Msg_Max_Length : constant := 200;\n-   --  This constant specifies the default number of characters to allow\n-   --  in an exception message (200 is minimum required by RM 11.4.1(18)).\n-\n-end System.Parameters;"}, {"sha": "6508df50c3faf2c0e205b47c9c86b9ce55d8041f", "filename": "gcc/ada/libgnat/s-thread.ads", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fs-thread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fs-thread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread.ads?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -1,92 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                       S Y S T E M . T H R E A D S                        --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package provides facilities to register a thread to the runtime,\n---  and allocate its task specific datas.\n-\n---  This package is currently implemented for:\n-\n---    VxWorks7r2Cert Light\n-\n-with Ada.Unchecked_Conversion;\n-\n-with Interfaces.C;\n-\n-with System.Secondary_Stack;\n-\n-package System.Threads is\n-\n-   package SST renames System.Secondary_Stack;\n-\n-   type ATSD is limited private;\n-   --  Type of the Ada thread specific data. It contains datas needed\n-   --  by the GNAT runtime.\n-\n-   type ATSD_Access is access ATSD;\n-   function From_Address is\n-     new Ada.Unchecked_Conversion (Address, ATSD_Access);\n-\n-   subtype STATUS is Interfaces.C.int;\n-   --  Equivalent of the C type STATUS\n-\n-   type t_id is new Interfaces.C.long;\n-   subtype Thread_Id is t_id;\n-\n-   function Register (T : Thread_Id) return STATUS;\n-   --  Create the task specific data necessary for Ada language support\n-\n-   --------------------------\n-   -- Thread Body Handling --\n-   --------------------------\n-\n-   --  The subprograms in this section are called from the process body\n-   --  wrapper in the APEX process registration package.\n-\n-   procedure Thread_Body_Enter\n-     (Sec_Stack_Ptr        : SST.SS_Stack_Ptr;\n-      Process_ATSD_Address : System.Address);\n-   --  Enter thread body, see above for details\n-\n-   procedure Thread_Body_Leave;\n-   --  Leave thread body (normally), see above for details\n-\n-   procedure Thread_Body_Exceptional_Exit;\n-   --  Leave thread body (abnormally on exception), see above for details\n-\n-private\n-\n-   type ATSD is record\n-      Sec_Stack_Ptr : SST.SS_Stack_Ptr;\n-      --  Pointer of the allocated secondary stack\n-\n-   end record;\n-\n-end System.Threads;"}, {"sha": "2282a66c87a2c0945a2a2c90eb9863cbd4ce8dd4", "filename": "gcc/ada/libgnat/s-thread__ae653.adb", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -1,163 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                       S Y S T E M . T H R E A D S                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks7r2Cert Light version of this package\n-\n-pragma Restrictions (No_Tasking);\n---  The VxWorks7r2Cert Light version of this package is intended only\n---  for programs which do not use Ada tasking. This restriction ensures\n---  that this will be checked by the binder.\n-\n-with System.Storage_Elements; use System.Storage_Elements;\n-\n-package body System.Threads is\n-\n-   use Interfaces.C;\n-\n-   Main_ATSD : aliased ATSD;\n-   --  TSD for environment task\n-\n-   Current_ATSD : aliased System.Address := System.Null_Address;\n-   pragma Thread_Local_Storage (Current_ATSD);\n-   --  pragma TLS needed since TaskVarAdd no longer available\n-\n-   --  VxWorks specific API\n-   ERROR : constant STATUS := Interfaces.C.int (-1);\n-   OK    : constant STATUS := Interfaces.C.int (0);\n-\n-   function taskIdVerify (tid : t_id) return STATUS;\n-   pragma Import (C, taskIdVerify, \"taskIdVerify\");\n-\n-   function taskIdSelf return t_id;\n-   pragma Import (C, taskIdSelf, \"taskIdSelf\");\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   procedure Init_RTS;\n-   --  This procedure performs the initialization of the run-time lib.\n-   --  It installs System.Threads versions of certain operations of the\n-   --  run-time lib.\n-\n-   function  Get_Sec_Stack return SST.SS_Stack_Ptr;\n-\n-   -----------------------\n-   -- Thread_Body_Enter --\n-   -----------------------\n-\n-   procedure Thread_Body_Enter\n-     (Sec_Stack_Ptr        : SST.SS_Stack_Ptr;\n-      Process_ATSD_Address : System.Address)\n-   is\n-\n-      ATSD : constant ATSD_Access := From_Address (Process_ATSD_Address);\n-\n-   begin\n-\n-      ATSD.Sec_Stack_Ptr := Sec_Stack_Ptr;\n-      SST.SS_Init (ATSD.Sec_Stack_Ptr);\n-      Current_ATSD := Process_ATSD_Address;\n-\n-   end Thread_Body_Enter;\n-\n-   ----------------------------------\n-   -- Thread_Body_Exceptional_Exit --\n-   ----------------------------------\n-\n-   procedure Thread_Body_Exceptional_Exit is\n-   begin\n-      --  No action for this target\n-\n-      null;\n-   end Thread_Body_Exceptional_Exit;\n-\n-   -----------------------\n-   -- Thread_Body_Leave --\n-   -----------------------\n-\n-   procedure Thread_Body_Leave is\n-   begin\n-      --  No action for this target\n-\n-      null;\n-   end Thread_Body_Leave;\n-\n-   --------------\n-   -- Init_RTS --\n-   --------------\n-\n-   procedure Init_RTS is\n-      --  Register environment task\n-      Result : constant Interfaces.C.int := Register (taskIdSelf);\n-      pragma Assert (Result /= ERROR);\n-\n-   begin\n-      Main_ATSD.Sec_Stack_Ptr := Get_Sec_Stack;\n-      Current_ATSD := Main_ATSD'Address;\n-   end Init_RTS;\n-\n-   -------------------\n-   -- Get_Sec_Stack --\n-   -------------------\n-\n-   function  Get_Sec_Stack return SST.SS_Stack_Ptr is\n-      CTSD : constant ATSD_Access := From_Address (Current_ATSD);\n-   begin\n-      pragma Assert (CTSD /= null);\n-      return CTSD.Sec_Stack_Ptr;\n-   end Get_Sec_Stack;\n-\n-   --------------\n-   -- Register --\n-   --------------\n-\n-   function Register (T : Thread_Id) return STATUS is\n-   begin\n-      --  It cannot be assumed that the caller of this routine has a ATSD;\n-      --  so neither this procedure nor the procedures that it calls should\n-      --  raise or handle exceptions, or make use of a secondary stack.\n-\n-      if taskIdVerify (T) = ERROR then\n-         return ERROR;\n-      end if;\n-\n-      Current_ATSD := To_Address (Integer_Address (T));\n-\n-      return OK;\n-   end Register;\n-\n-begin\n-   --  Initialize run-time library\n-\n-   Init_RTS;\n-\n-end System.Threads;"}]}