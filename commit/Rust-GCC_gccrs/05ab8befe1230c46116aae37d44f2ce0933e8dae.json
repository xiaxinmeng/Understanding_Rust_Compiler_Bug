{"sha": "05ab8befe1230c46116aae37d44f2ce0933e8dae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhYjhiZWZlMTIzMGM0NjExNmFhZTM3ZDQ0ZjJjZTA5MzNlOGRhZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-13T23:35:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-14T16:29:35Z"}, "message": "analyzer: add -param=analyzer-max-constraints=\n\nOn attempting to run the full test suite with -fanalyzer via\n  make check RUNTESTFLAGS=\"-v -v --target_board=unix/-fanalyzer\"\nI saw it get stuck on:\n  gcc.c-torture/compile/20001226-1.c\nIt turns out this was on a debug build, rather than a release build;\nbut a release build with -fanalyzer took:\n  real 1m33.689s\n  user 1m30.239s\n  sys  0m2.727s\nas compared to:\n  real 0m2.361s\n  user 0m2.107s\n  sys  0m0.214s\nwithout -fanalyzer.\n\nThis torture test performs 64 * 64 uniqely-coded comparisons between\nelements of a pair of arrays until it finds an element that's different,\nleading to an accumulation of 4096 constraints along the path where\nno difference is found.\n\n\"perf\" shows most of the time is spent in canonicalizing and copying\nconstraint_manager instances, presumably as it copies and merges states\nwith increasingly more complex sets of constraints as it analyzes\nfurther along the \"no differences yet\" path.\n\nThis patch crudely works around this by adding a\n  -param=analyzer-max-constraints=\nlimit, defaulting to 20, above which constraints will be silently\ndropped.  With this -fanalyzer takes:\n  real 0m6.935s\n  user 0m6.413s\n  sys  0m0.396s\non the above case.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.opt (-param=analyzer-max-constraints=): New param.\n\t* constraint-manager.cc\n\t(constraint_manager::add_constraint_internal): Silently reject\n\tattempts to add constraints when the above limit is reached.", "tree": {"sha": "e1880cf165139311f135f54f0e722b66c86ef01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1880cf165139311f135f54f0e722b66c86ef01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ab8befe1230c46116aae37d44f2ce0933e8dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ab8befe1230c46116aae37d44f2ce0933e8dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ab8befe1230c46116aae37d44f2ce0933e8dae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ab8befe1230c46116aae37d44f2ce0933e8dae/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799dd4e10047a4aa772fd69c910c5c6a96c36b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799dd4e10047a4aa772fd69c910c5c6a96c36b9f"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "94a686db6b349c18e8d158bc8ef6dfd2a0c978d0", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ab8befe1230c46116aae37d44f2ce0933e8dae/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ab8befe1230c46116aae37d44f2ce0933e8dae/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=05ab8befe1230c46116aae37d44f2ce0933e8dae", "patch": "@@ -30,6 +30,10 @@ The maximum number of 'after supernode' exploded nodes within the analyzer per s\n Common Joined UInteger Var(param_analyzer_max_enodes_per_program_point) Init(8) Param\n The maximum number of exploded nodes per program point within the analyzer, before terminating analysis of that point.\n \n+-param=analyzer-max-constraints=\n+Common Joined UInteger Var(param_analyzer_max_constraints) Init(20) Param\n+The maximum number of constraints per state.\n+\n -param=analyzer-max-recursion-depth=\n Common Joined UInteger Var(param_analyzer_max_recursion_depth) Init(2) Param\n The maximum number of times a callsite can appear in a call stack within the analyzer, before terminating analysis of a call that would recurse deeper."}, {"sha": "e578e0502f2d919e4a1d013e770f6e8747b8ea05", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ab8befe1230c46116aae37d44f2ce0933e8dae/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ab8befe1230c46116aae37d44f2ce0933e8dae/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=05ab8befe1230c46116aae37d44f2ce0933e8dae", "patch": "@@ -940,6 +940,9 @@ constraint_manager::add_constraint_internal (equiv_class_id lhs_id,\n \t\t\t\t\t      enum constraint_op c_op,\n \t\t\t\t\t      equiv_class_id rhs_id)\n {\n+  if (m_constraints.length () >= param_analyzer_max_constraints)\n+    return;\n+\n   constraint new_c (lhs_id, c_op, rhs_id);\n \n   /* Remove existing constraints that would be implied by the"}]}