{"sha": "cb3f834fb6ad5268fe9640218d7285da0394f857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzZjgzNGZiNmFkNTI2OGZlOTY0MDIxOGQ3Mjg1ZGEwMzk0Zjg1Nw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2001-11-04T04:15:09Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-11-04T04:15:09Z"}, "message": "ResourceBundle.java (getClassContext): Removed.\n\n\t* java/util/ResourceBundle.java (getClassContext): Removed.\n\t(Security): New class, extends SecurityManger.\n\t(getBundle): Use Security.getCallingClassLoader instead of\n\tgetClassContext.\n\t* java/util/natResourceBundle.cc: Removed.\n\nFrom-SVN: r46761", "tree": {"sha": "bfb510195ffe6d2346162253badade76808f1b85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb510195ffe6d2346162253badade76808f1b85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3f834fb6ad5268fe9640218d7285da0394f857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3f834fb6ad5268fe9640218d7285da0394f857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3f834fb6ad5268fe9640218d7285da0394f857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3f834fb6ad5268fe9640218d7285da0394f857/comments", "author": null, "committer": null, "parents": [{"sha": "f5143c46a9cc072c52820b9f903055b153956e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5143c46a9cc072c52820b9f903055b153956e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5143c46a9cc072c52820b9f903055b153956e77"}], "stats": {"total": 161, "additions": 66, "deletions": 95}, "files": [{"sha": "e5dbc1f4da9aad917ab976cba753b223b9bd00fb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb3f834fb6ad5268fe9640218d7285da0394f857", "patch": "@@ -1,3 +1,11 @@\n+2001-11-04  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/util/ResourceBundle.java (getClassContext): Removed.\n+\t(Security): New class, extends SecurityManger.\n+\t(getBundle): Use Security.getCallingClassLoader instead of\n+\tgetClassContext.\n+\t* java/util/natResourceBundle.cc: Removed.\n+\n 2001-11-03  Tom Tromey  <tromey@redhat.com>\n \n \t* defineclass.cc (handleClassBegin): Use Object::class$, not"}, {"sha": "1abb65c9578fc20a1213dfd401744ae636f5836f", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=cb3f834fb6ad5268fe9640218d7285da0394f857", "patch": "@@ -1651,7 +1651,6 @@ java/net/natInetAddress.cc \\\n java/net/natPlainDatagramSocketImpl.cc \\\n java/net/natPlainSocketImpl.cc \\\n java/text/natCollator.cc \\\n-java/util/natResourceBundle.cc \\\n java/util/zip/natDeflater.cc \\\n java/util/zip/natInflater.cc\n "}, {"sha": "ec25e38715fab0757458306792a2c1c9ba52ae78", "filename": "libjava/Makefile.in", "status": "modified", "additions": 22, "deletions": 38, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=cb3f834fb6ad5268fe9640218d7285da0394f857", "patch": "@@ -123,40 +123,28 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n-@XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n secdir = $(libdir)/security\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -176,10 +164,8 @@ AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -248,8 +234,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -1383,7 +1368,6 @@ java/net/natInetAddress.cc \\\n java/net/natPlainDatagramSocketImpl.cc \\\n java/net/natPlainSocketImpl.cc \\\n java/text/natCollator.cc \\\n-java/util/natResourceBundle.cc \\\n java/util/zip/natDeflater.cc \\\n java/util/zip/natInflater.cc\n \n@@ -1533,8 +1517,8 @@ java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n java/lang/reflect/natConstructor.lo java/lang/reflect/natField.lo \\\n java/lang/reflect/natMethod.lo java/net/natInetAddress.lo \\\n java/net/natPlainDatagramSocketImpl.lo java/net/natPlainSocketImpl.lo \\\n-java/text/natCollator.lo java/util/natResourceBundle.lo \\\n-java/util/zip/natDeflater.lo java/util/zip/natInflater.lo\n+java/text/natCollator.lo java/util/zip/natDeflater.lo \\\n+java/util/zip/natInflater.lo\n libgcjx_la_OBJECTS =  gnu/gcj/xlib/natClip.lo \\\n gnu/gcj/xlib/natColormap.lo gnu/gcj/xlib/natDisplay.lo \\\n gnu/gcj/xlib/natDrawable.lo gnu/gcj/xlib/natFont.lo \\\n@@ -1578,7 +1562,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2235,8 +2219,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/jar/JarException.P .deps/java/util/jar/JarFile.P \\\n .deps/java/util/jar/JarInputStream.P \\\n .deps/java/util/jar/JarOutputStream.P .deps/java/util/jar/Manifest.P \\\n-.deps/java/util/natResourceBundle.P .deps/java/util/zip/Adler32.P \\\n-.deps/java/util/zip/CRC32.P .deps/java/util/zip/CheckedInputStream.P \\\n+.deps/java/util/zip/Adler32.P .deps/java/util/zip/CRC32.P \\\n+.deps/java/util/zip/CheckedInputStream.P \\\n .deps/java/util/zip/CheckedOutputStream.P \\\n .deps/java/util/zip/Checksum.P \\\n .deps/java/util/zip/DataFormatException.P \\\n@@ -2726,7 +2710,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "130fc9cfbd6225e02e6893a8881071ca80b76c1e", "filename": "libjava/java/util/ResourceBundle.java", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2Fjava%2Futil%2FResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3f834fb6ad5268fe9640218d7285da0394f857/libjava%2Fjava%2Futil%2FResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FResourceBundle.java?ref=cb3f834fb6ad5268fe9640218d7285da0394f857", "patch": "@@ -28,6 +28,8 @@\n package java.util;\n import java.lang.ref.Reference;\n import java.lang.ref.SoftReference;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import gnu.classpath.Configuration;\n \n /**\n@@ -74,14 +76,6 @@\n  * @author Jochen Hoenicke */\n public abstract class ResourceBundle\n {\n-  static \n-  {\n-    if (Configuration.INIT_LOAD_LIBRARY)\n-      {\n-\tSystem.loadLibrary (\"javautil\");\n-      }\n-  }\n-\n   /**\n    * The parent bundle.  This is consulted when you call getObject\n    * and there is no such resource in the current bundle.  This\n@@ -96,6 +90,36 @@\n    */\n   private Locale locale;\n \n+  /**\n+   * We override SecurityManager in order to access getClassContext(). \n+   */\n+  class Security extends SecurityManager\n+  {\n+    /** Return the ClassLoader of the class which called into this\n+        ResourceBundle, or null if it cannot be determined. */\n+    ClassLoader getCallingClassLoader()\n+    {\n+      Class[] stack = super.getClassContext();\n+      for (int i = 0; i < stack.length; i++)\n+        if (stack[i] != Security.class && stack[i] != ResourceBundle.class)\n+\t  return stack[i].getClassLoader();\n+      return null;\n+    }\n+  }\n+  \n+  // This will always work since java.util classes have (all) system\n+  // permissions.\n+  static Security security = (Security) AccessController.doPrivileged\n+    (\n+      new PrivilegedAction()\n+      {\n+        public Object run()\n+        {\n+          return new Security();\n+        }\n+      }\n+    );\n+\n   /**\n    * The constructor.  It does nothing special.\n    */\n@@ -156,33 +180,20 @@ public final Object getObject(String key) throws MissingResourceException\n       (\"Key not found\", getClass().getName(), key);\n   }\n \n-  /**\n-   * This method returns an array with the classes of the calling\n-   * methods.  The zeroth entry is the class that called this method\n-   * (should always be ResourceBundle), the first contains the class\n-   * that called the caller (i.e. the class that called getBundle).\n-   *\n-   * Implementation note: This depends on the fact, that getBundle\n-   * doesn't get inlined, but since it calls a private method, it\n-   * isn't inlineable.\n-   *\n-   * @return an array containing the classes for the callers.  \n-   */\n-  private static native Class[] getClassContext();\n-\n   /**\n    * Get the appropriate ResourceBundle for the default locale.  \n    * @param baseName the name of the ResourceBundle.  This should be\n    * a name of a Class or a properties-File.  See the class\n    * description for details.  \n    * @return the desired resource bundle\n    * @exception MissingResourceException \n-   *    if the resource bundle couldn't be found.  */\n+   *    if the resource bundle couldn't be found.  \n+   */\n   public static final ResourceBundle getBundle(String baseName)\n     throws MissingResourceException\n   {\n     return getBundle(baseName, Locale.getDefault(),\n-\t\t     getClassContext()[1].getClassLoader());\n+\t\t     security.getCallingClassLoader());\n   }\n \n   /**\n@@ -199,7 +210,7 @@ public static final ResourceBundle getBundle(String baseName,\n \t\t\t\t\t       Locale locale)\n     throws MissingResourceException\n   {\n-    return getBundle(baseName, locale, getClassContext()[1].getClassLoader());\n+    return getBundle(baseName, locale, security.getCallingClassLoader());\n   }\n \n   /**"}, {"sha": "c9e27b048f0c0b8643e937cc9ccd4f057a59791f", "filename": "libjava/java/util/natResourceBundle.cc", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/libjava%2Fjava%2Futil%2FnatResourceBundle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/libjava%2Fjava%2Futil%2FnatResourceBundle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FnatResourceBundle.cc?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1,31 +0,0 @@\n-// natResourceBundle.cc - Native code for ResourceBundle class.\n-\n-/* Copyright (C) 2001  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#include <config.h>\n-\n-#include <gcj/cni.h>\n-#include <jvm.h>\n-#include <java/util/ResourceBundle.h>\n-#include <java/lang/Class.h>\n-#include <java/lang/ClassLoader.h>\n-\n-JArray<jclass> *\n-java::util::ResourceBundle::getClassContext ()\n-{\n-  // FIXME: we currently lack the capability to correctly implement\n-  // this method.  So we fake it by telling ResourceBundle that we\n-  // only have the system class loader.\n-  jobjectArray a = JvNewObjectArray (2, &java::lang::Class::class$, NULL);\n-  jobject *elts = elements (a);\n-  elts[0] = &class$;\n-  elts[1] = elts[0];\n-\n-  return reinterpret_cast< JArray<jclass> *> (a);\n-}"}]}