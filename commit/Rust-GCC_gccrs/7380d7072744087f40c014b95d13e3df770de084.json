{"sha": "7380d7072744087f40c014b95d13e3df770de084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM4MGQ3MDcyNzQ0MDg3ZjQwYzAxNGI5NWQxM2UzZGY3NzBkZTA4NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-04T01:45:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-04T01:45:49Z"}, "message": "Add declarations for contains_placeholder_p, substitute_in_{expr,type}.\n\nFrom-SVN: r5580", "tree": {"sha": "551ab10543a1d931fe31b331f85cff90fa8975a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551ab10543a1d931fe31b331f85cff90fa8975a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7380d7072744087f40c014b95d13e3df770de084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7380d7072744087f40c014b95d13e3df770de084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7380d7072744087f40c014b95d13e3df770de084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7380d7072744087f40c014b95d13e3df770de084/comments", "author": null, "committer": null, "parents": [{"sha": "ab487f123ade7120fbe5304b91e45091c3bc0d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab487f123ade7120fbe5304b91e45091c3bc0d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab487f123ade7120fbe5304b91e45091c3bc0d96"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "2ece57749ca9854e7ead456cad3765c319e9c303", "filename": "gcc/tree.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7380d7072744087f40c014b95d13e3df770de084/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7380d7072744087f40c014b95d13e3df770de084/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7380d7072744087f40c014b95d13e3df770de084", "patch": "@@ -1220,6 +1220,27 @@ extern int lvalue_or_else\t\tPROTO((tree, char *));\n \n extern tree save_expr\t\t\tPROTO((tree));\n \n+/* Return 1 if EXP contains a PLACEHOLDER_EXPR; i.e., if it represents a size\n+   or offset that depends on a field within a record.\n+\n+   Note that we only allow such expressions within simple arithmetic\n+   or a COND_EXPR.  */\n+\n+extern int contains_placeholder_p\tPROTO((tree));\n+\n+/* Given a tree EXP, a FIELD_DECL F, and a replacement value R,\n+   return a tree with all occurrences of references to F in a\n+   PLACEHOLDER_EXPR replaced by R.   Note that we assume here that EXP\n+   contains only arithmetic expressions.  */\n+\n+extern tree substitute_in_expr\t\tPROTO((tree, tree, tree));\n+\n+/* Given a type T, a FIELD_DECL F, and a replacement value R,\n+   return a new type with all size expressions that contain F\n+   updated by replacing the reference to F with R.  */\n+\n+extern tree substitute_in_type\t\tPROTO((tree, tree, tree));\n+\n /* variable_size (EXP) is like save_expr (EXP) except that it\n    is for the special case of something that is part of a\n    variable size for a data type.  It makes special arrangements"}]}