{"sha": "d93415c9e0064046445a12b14147c273e6d96405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzNDE1YzllMDA2NDA0NjQ0NWExMmIxNDE0N2MyNzNlNmQ5NjQwNQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2000-11-22T01:40:49Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-11-22T01:40:49Z"}, "message": "gcc-dg.exp: load_lib scanasm.exp.\n\n\t* lib/gcc-dg.exp: load_lib scanasm.exp.\n\t(scan-assembler, scan-assembler-not): Break out to scanasm.exp.\n\t* lib/g++-dg.exp: load_lib scanasm.exp.\n\t* lib/scanasm.exp: New.\n\t(scan-assembler, scan-assembler-not): Add optional arguments to\n\ttest name, or if not present, the pattern name.\n\t(scan-assembler-dem, scan-assembler-demnot): New.\n\n\t* g++.dg/dg.exp: New.\n\nFrom-SVN: r37636", "tree": {"sha": "77aafa9f42eed685a9b499142c5c7f5988831f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77aafa9f42eed685a9b499142c5c7f5988831f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d93415c9e0064046445a12b14147c273e6d96405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93415c9e0064046445a12b14147c273e6d96405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93415c9e0064046445a12b14147c273e6d96405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93415c9e0064046445a12b14147c273e6d96405/comments", "author": null, "committer": null, "parents": [{"sha": "c25c12b8aa19e3a23ea3511184b87d739555d4ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25c12b8aa19e3a23ea3511184b87d739555d4ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25c12b8aa19e3a23ea3511184b87d739555d4ae"}], "stats": {"total": 210, "additions": 177, "deletions": 33}, "files": [{"sha": "dd9e32c3196d9c819f2fabf404e6f60f8d873d9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d93415c9e0064046445a12b14147c273e6d96405", "patch": "@@ -1,3 +1,15 @@\n+2000-11-22  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* lib/gcc-dg.exp: load_lib scanasm.exp.\n+\t(scan-assembler, scan-assembler-not): Break out to scanasm.exp.\n+\t* lib/g++-dg.exp: load_lib scanasm.exp.\n+\t* lib/scanasm.exp: New.\n+\t(scan-assembler, scan-assembler-not): Add optional arguments to\n+\ttest name, or if not present, the pattern name.\n+\t(scan-assembler-dem, scan-assembler-demnot): New.\n+\n+\t* g++.dg/dg.exp: New.\n+\n 2000-11-21  Neil Booth  <neilb@earthling.net>\n \n         * gcc.dg/cpp/integrated1.c: Remove."}, {"sha": "e1e82e53ceaa4ee39b4d9af446133b175f9c42f0", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=d93415c9e0064046445a12b14147c273e6d96405", "patch": "@@ -0,0 +1,39 @@\n+#   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-gcc@prep.ai.mit.edu\n+\n+# G++ testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[CS\\]]] \\\n+\t\"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "febba819f4836bf06761b0e94d96c376118e778a", "filename": "gcc/testsuite/lib/g++-dg.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp?ref=d93415c9e0064046445a12b14147c273e6d96405", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n+#   Copyright (C) 1997, 1999, 2000 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -20,6 +20,7 @@\n # Define g++ callbacks for dg.exp.\n \n load_lib dg.exp\n+load_lib scanasm.exp\n \n proc g++-dg-test { prog do_what extra_tool_flags } {\n     # Set up the compiler flags, based on what we're going to do."}, {"sha": "8dcc6c6645b1b59d7d7837d4205f5e8a950f736f", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=d93415c9e0064046445a12b14147c273e6d96405", "patch": "@@ -20,6 +20,7 @@\n load_lib dg.exp\n load_lib file-format.exp\n load_lib target-supports.exp\n+load_lib scanasm.exp\n \n if ![info exists TORTURE_OPTIONS] {\n     # It is theoretically beneficial to group all of the O2/O3 options together,\n@@ -161,35 +162,3 @@ proc gcc-dg-runtest { testcases default-extra-flags } {\n \t}\n     }\n }\n-\n-# Utility for scanning compiler result, invoked via dg-final.\n-# Call pass if pattern is present, otherwise fail.\n-proc scan-assembler { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if [regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler\"\n-    }\n-}\n-\n-# Call pass if pattern is not present, otherwise fail.\n-proc scan-assembler-not { testcase pattern } {\n-    global subdir\n-\n-    set fd [open [file rootname $testcase].s r]\n-    set text [read $fd]\n-    close $fd\n-\n-    if ![regexp -- $pattern $text] {\n-\tpass \"$subdir/$testcase scan-assembler-not\"\n-    } else {\n-\tfail \"$subdir/$testcase scan-assembler-not\"\n-    }\n-}\n-"}, {"sha": "da0a7a006a7bf94e804c286eb75595a1161b2712", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93415c9e0064046445a12b14147c273e6d96405/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=d93415c9e0064046445a12b14147c273e6d96405", "patch": "@@ -0,0 +1,123 @@\n+#   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-gcc@prep.ai.mit.edu\n+\n+# Various utilities for scanning assembler output, used by gcc-dg.exp and\n+# g++-dg.exp.\n+\n+# Utility for scanning compiler result, invoked via dg-final.\n+# Call pass if pattern is present, otherwise fail.\n+proc scan-assembler { testcase pattern args } {\n+    global subdir\n+\n+    set fd [open [file rootname $testcase].s r]\n+    set text [read $fd]\n+    close $fd\n+\n+    set vmessage [concat $args]\n+    if { $vmessage == \"\"} {\n+\tset vmessage $pattern\n+    }\n+\n+    if [regexp -- $pattern $text] {\n+\tpass \"$subdir/$testcase scan-assembler $vmessage\"\n+    } else {\n+\tfail \"$subdir/$testcase scan-assembler $vmessage\"\n+    }\n+}\n+\n+# Call pass if pattern is not present, otherwise fail.\n+proc scan-assembler-not { testcase pattern args } {\n+    global subdir\n+\n+    set fd [open [file rootname $testcase].s r]\n+    set text [read $fd]\n+    close $fd\n+\n+    set vmessage [concat $args]\n+    if { $vmessage == \"\"} {\n+\tset vmessage $pattern\n+    }\n+\n+    if ![regexp -- $pattern $text] {\n+\tpass \"$subdir/$testcase scan-assembler-not $vmessage\"\n+    } else {\n+\tfail \"$subdir/$testcase scan-assembler-not $vmessage\"\n+    }\n+}\n+\n+# Utility for scanning demangled compiler result, invoked via dg-final.\n+# Call pass if pattern is present, otherwise fail.\n+proc scan-assembler-dem { testcase pattern args } {\n+    global subdir\n+    global cxxfilt\n+    global base_dir\n+\n+    # Find c++filt like we find g++ in g++.exp.\n+    if ![info exists cxxfilt]  {\n+\tset cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \\\n+\t\t     [findfile $base_dir/c++filt $base_dir/c++filt \\\n+\t\t      [transform c++filt]]]\n+\tverbose -log \"c++filt is $cxxfilt\"\n+    }\n+\n+    set fd [open \"| $cxxfilt < [file rootname $testcase].s\" r]\n+    set text [read $fd]\n+    close $fd\n+\n+    set vmessage [concat $args]\n+    if { $vmessage == \"\"} {\n+\tset vmessage $pattern\n+    }\n+\n+    if [regexp -- $pattern $text] {\n+\tpass \"$subdir/$testcase scan-assembler $vmessage\"\n+    } else {\n+\tfail \"$subdir/$testcase scan-assembler $vmessage\"\n+    }\n+}\n+\n+# Call pass if demangled pattern is not present, otherwise fail.\n+proc scan-assembler-dem-not { testcase pattern args } {\n+    global subdir\n+    global cxxfilt\n+    global base_dir\n+\n+    # Find c++filt like we find g++ in g++.exp.\n+    if ![info exists cxxfilt]  {\n+\tset cxxfilt [findfile $base_dir/../c++filt $base_dir/../c++filt \\\n+\t\t     [findfile $base_dir/c++filt $base_dir/c++filt \\\n+\t\t      [transform c++filt]]]\n+\tverbose -log \"c++filt is $cxxfilt\"\n+    }\n+\n+    set fd [open \"| $cxxfilt < [file rootname $testcase].s\" r]\n+    set text [read $fd]\n+    close $fd\n+\n+    set vmessage [concat $args]\n+    if { $vmessage == \"\"} {\n+\tset vmessage $pattern\n+    }\n+\n+    if ![regexp -- $pattern $text] {\n+\tpass \"$subdir/$testcase scan-assembler-not $vmessage\"\n+    } else {\n+\tfail \"$subdir/$testcase scan-assembler-not $vmessage\"\n+    }\n+}"}]}