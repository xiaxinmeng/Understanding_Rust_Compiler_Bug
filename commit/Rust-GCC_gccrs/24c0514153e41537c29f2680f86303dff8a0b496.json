{"sha": "24c0514153e41537c29f2680f86303dff8a0b496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjMDUxNDE1M2U0MTUzN2MyOWYyNjgwZjg2MzAzZGZmOGEwYjQ5Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-05-05T05:31:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-05-05T05:31:34Z"}, "message": "tree-pass.h (pass_O0_always_inline): Declare.\n\n\n\ttree-optimization/36100\n\t* tree-pass.h (pass_O0_always_inline): Declare.\n\t* ipa-inline.c (inline_transform): Remove dead code.\n\t(cgraph_gate_O0_always_inline, cgraph_O0_always_inline,\n\tpass_O0_always_inline): New.\n\t* passes.c (init_optimization_passes): Add pass_O0_always_inline.\n\nFrom-SVN: r134942", "tree": {"sha": "f9eda22c81cb7bf94680355477c47aca64696b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9eda22c81cb7bf94680355477c47aca64696b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c0514153e41537c29f2680f86303dff8a0b496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c0514153e41537c29f2680f86303dff8a0b496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c0514153e41537c29f2680f86303dff8a0b496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c0514153e41537c29f2680f86303dff8a0b496/comments", "author": null, "committer": null, "parents": [{"sha": "7ffc24cee0f21151f2f18fc9186bb484c4ffa533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffc24cee0f21151f2f18fc9186bb484c4ffa533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffc24cee0f21151f2f18fc9186bb484c4ffa533"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "38ac5f507bd91b7909e5746e7d5140f4c3f15266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24c0514153e41537c29f2680f86303dff8a0b496", "patch": "@@ -1,3 +1,12 @@\n+2008-06-04  Jan Hubicka  <jh@suse.cz>\n+\n+\ttree-optimization/36100\n+\t* tree-pass.h (pass_O0_always_inline): Declare.\n+\t* ipa-inline.c (inline_transform): Remove dead code.\n+\t(cgraph_gate_O0_always_inline, cgraph_O0_always_inline,\n+\tpass_O0_always_inline): New.\n+\t* passes.c (init_optimization_passes): Add pass_O0_always_inline.\n+\n 2008-05-04  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386.c (x86_output_mi_thunk): Use movq alternative"}, {"sha": "68a42013bfdb0ab8fbc7356183d7f5fe286dde27", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=24c0514153e41537c29f2680f86303dff8a0b496", "patch": "@@ -1588,14 +1588,6 @@ inline_transform (struct cgraph_node *node)\n       todo = optimize_inline_calls (current_function_decl);\n       timevar_pop (TV_INTEGRATION);\n     }\n-  /* In non-unit-at-a-time we must mark all referenced functions as needed.  */\n-  if (!flag_unit_at_a_time)\n-    {\n-      struct cgraph_edge *e;\n-      for (e = node->callees; e; e = e->next_callee)\n-\tif (e->callee->analyzed)\n-          cgraph_mark_needed_node (e->callee);\n-    }\n   return todo | execute_fixup_cfg ();\n }\n \n@@ -1628,4 +1620,63 @@ struct ipa_opt_pass pass_ipa_inline =\n  NULL,\t\t\t\t\t/* variable_transform */\n };\n \n+\n+/* When inlining shall be performed.  */\n+static bool\n+cgraph_gate_O0_always_inline (void)\n+{\n+  return !flag_unit_at_a_time || !flag_inline_trees;\n+}\n+\n+static unsigned int\n+cgraph_O0_always_inline (void)\n+{\n+  struct cgraph_node *node = cgraph_node (current_function_decl);\n+  unsigned int todo = 0;\n+  bool inlined;\n+\n+  if (sorrycount || errorcount)\n+    return 0;\n+  inlined = cgraph_decide_inlining_incrementally (node, INLINE_SPEED, 0);\n+  /* We might need the body of this function so that we can expand\n+     it inline somewhere else.  */\n+  if (cgraph_preserve_function_body_p (current_function_decl))\n+    save_inline_function_body (node);\n+  if (inlined || warn_inline)\n+    {\n+      timevar_push (TV_INTEGRATION);\n+      todo = optimize_inline_calls (current_function_decl);\n+      timevar_pop (TV_INTEGRATION);\n+    }\n+  /* In non-unit-at-a-time we must mark all referenced functions as needed.  */\n+  if (!flag_unit_at_a_time)\n+    {\n+      struct cgraph_edge *e;\n+      for (e = node->callees; e; e = e->next_callee)\n+\tif (e->callee->analyzed)\n+          cgraph_mark_needed_node (e->callee);\n+    }\n+  return todo | execute_fixup_cfg ();\n+}\n+\n+struct gimple_opt_pass pass_O0_always_inline = \n+{\n+ {\n+  GIMPLE_PASS,\n+  \"always_inline\",\t\t\t/* name */\n+  cgraph_gate_O0_always_inline,\t\t/* gate */\n+  cgraph_O0_always_inline,\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_INLINE_HEURISTICS,\t\t\t/* tv_id */\n+  0,\t                                /* properties_required */\n+  PROP_cfg,\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func | TODO_verify_flow\n+  | TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+ }\n+};\n+\n #include \"gt-ipa-inline.h\""}, {"sha": "09585660828e771b81799440b9c1750bdef6cc25", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=24c0514153e41537c29f2680f86303dff8a0b496", "patch": "@@ -553,6 +553,7 @@ init_optimization_passes (void)\n   /* These passes are run after IPA passes on every function that is being\n      output to the assembler file.  */\n   p = &all_passes;\n+  NEXT_PASS (pass_O0_always_inline);\n   NEXT_PASS (pass_all_optimizations);\n     {\n       struct opt_pass **p = &pass_all_optimizations.pass.sub;"}, {"sha": "41fd8e5beb4bdbaa6eeb74ef1dc76709f39a8528", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c0514153e41537c29f2680f86303dff8a0b496/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=24c0514153e41537c29f2680f86303dff8a0b496", "patch": "@@ -501,6 +501,7 @@ extern struct rtl_opt_pass pass_final;\n extern struct rtl_opt_pass pass_rtl_seqabstr;\n extern struct gimple_opt_pass pass_release_ssa_names;\n extern struct gimple_opt_pass pass_early_inline;\n+extern struct gimple_opt_pass pass_O0_always_inline;\n extern struct gimple_opt_pass pass_inline_parameters;\n extern struct gimple_opt_pass pass_all_early_optimizations;\n extern struct gimple_opt_pass pass_update_address_taken;"}]}