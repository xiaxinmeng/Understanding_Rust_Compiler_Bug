{"sha": "87cd63ba592c3327adb7846bfdd92ee066ae3030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjZDYzYmE1OTJjMzMyN2FkYjc4NDZiZmRkOTJlZTA2NmFlMzAzMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-22T12:41:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T12:41:30Z"}, "message": "exp_ch5.adb (Expand_Simple_Function_Return): If secondary stack is involved and the return type is class-wide...\n\n2008-08-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Simple_Function_Return): If secondary stack is\n\tinvolved and the return type is class-wide, use the type of the expression\n\tfor the generated access type. Suppress useless discriminant checks on the\n\tallocator.\n\nFrom-SVN: r139447", "tree": {"sha": "d916e7cfc50ceff8118c4cb84252070bccbb8cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d916e7cfc50ceff8118c4cb84252070bccbb8cc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87cd63ba592c3327adb7846bfdd92ee066ae3030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cd63ba592c3327adb7846bfdd92ee066ae3030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cd63ba592c3327adb7846bfdd92ee066ae3030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cd63ba592c3327adb7846bfdd92ee066ae3030/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116c24a05cd68221a2e832c0a7c0d9225c7e4d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116c24a05cd68221a2e832c0a7c0d9225c7e4d20"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "3964ed157c1cdd110566ccaee1244f7de056030a", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cd63ba592c3327adb7846bfdd92ee066ae3030/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cd63ba592c3327adb7846bfdd92ee066ae3030/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=87cd63ba592c3327adb7846bfdd92ee066ae3030", "patch": "@@ -3671,7 +3671,23 @@ package body Exp_Ch5 is\n       Exptyp : constant Entity_Id := Etype (Exp);\n       --  The type of the expression (not necessarily the same as R_Type)\n \n+      Subtype_Ind : Node_Id;\n+      --  If the result type of the function is class-wide and the\n+      --  expression has a specific type, then we use the expression's\n+      --  type as the type of the return object. In cases where the\n+      --  expression is an aggregate that is built in place, this avoids\n+      --  the need for an expensive conversion of the return object to\n+      --  the specific type on assignments to the individual components.\n+\n    begin\n+      if Is_Class_Wide_Type (R_Type)\n+        and then not Is_Class_Wide_Type (Etype (Exp))\n+      then\n+         Subtype_Ind := New_Occurrence_Of (Etype (Exp), Loc);\n+      else\n+         Subtype_Ind := New_Occurrence_Of (R_Type, Loc);\n+      end if;\n+\n       --  For the case of a simple return that does not come from an extended\n       --  return, in the case of Ada 2005 where we are returning a limited\n       --  type, we rewrite \"return <expression>;\" to be:\n@@ -3711,43 +3727,21 @@ package body Exp_Ch5 is\n             Return_Object_Entity : constant Entity_Id :=\n                                      Make_Defining_Identifier (Loc,\n                                        New_Internal_Name ('R'));\n-            Subtype_Ind : Node_Id;\n-\n-         begin\n-            --  If the result type of the function is class-wide and the\n-            --  expression has a specific type, then we use the expression's\n-            --  type as the type of the return object. In cases where the\n-            --  expression is an aggregate that is built in place, this avoids\n-            --  the need for an expensive conversion of the return object to\n-            --  the specific type on assignments to the individual components.\n+            Obj_Decl : constant Node_Id :=\n+                         Make_Object_Declaration (Loc,\n+                           Defining_Identifier => Return_Object_Entity,\n+                           Object_Definition   => Subtype_Ind,\n+                           Expression          => Exp);\n+\n+            Ext : constant Node_Id := Make_Extended_Return_Statement (Loc,\n+                    Return_Object_Declarations => New_List (Obj_Decl));\n             --  Do not perform this high-level optimization if the result type\n             --  is an interface because the \"this\" pointer must be displaced.\n \n-            if Is_Class_Wide_Type (R_Type)\n-              and then not Is_Interface (R_Type)\n-              and then not Is_Class_Wide_Type (Etype (Exp))\n-            then\n-               Subtype_Ind := New_Occurrence_Of (Etype (Exp), Loc);\n-            else\n-               Subtype_Ind := New_Occurrence_Of (R_Type, Loc);\n-            end if;\n-\n-            declare\n-               Obj_Decl : constant Node_Id :=\n-                            Make_Object_Declaration (Loc,\n-                              Defining_Identifier => Return_Object_Entity,\n-                              Object_Definition   => Subtype_Ind,\n-                              Expression          => Exp);\n-\n-               Ext : constant Node_Id :=\n-                       Make_Extended_Return_Statement (Loc,\n-                         Return_Object_Declarations => New_List (Obj_Decl));\n-\n-            begin\n-               Rewrite (N, Ext);\n-               Analyze (N);\n-               return;\n-            end;\n+         begin\n+            Rewrite (N, Ext);\n+            Analyze (N);\n+            return;\n          end;\n       end if;\n \n@@ -3902,13 +3896,17 @@ package body Exp_Ch5 is\n                        Subtype_Mark => New_Reference_To (Etype (Exp), Loc),\n                        Expression => Relocate_Node (Exp)));\n \n+               --  We do not want discriminant checks on the declaration,\n+               --  given that it gets its value from the allocator.\n+\n+               Set_No_Initialization (Alloc_Node);\n+\n                Insert_List_Before_And_Analyze (N, New_List (\n                  Make_Full_Type_Declaration (Loc,\n                    Defining_Identifier => Acc_Typ,\n                    Type_Definition     =>\n                      Make_Access_To_Object_Definition (Loc,\n-                       Subtype_Indication =>\n-                          New_Reference_To (R_Type, Loc))),\n+                       Subtype_Indication => Subtype_Ind)),\n \n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,"}]}