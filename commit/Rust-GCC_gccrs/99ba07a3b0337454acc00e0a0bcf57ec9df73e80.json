{"sha": "99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliYTA3YTNiMDMzNzQ1NGFjYzAwZTBhMGJjZjU3ZWM5ZGY3M2U4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-19T08:21:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-19T08:21:37Z"}, "message": "[multiple changes]\n\n2011-09-19  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb, lib-writ.ads, s-restri.ads, sem_ch6.adb,\n\texp_aggr.adb: Minor reformatting.\n\n2011-09-19  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): Change entity referenced\n\tto underlying object if any, or else reference to the HEAP.\n\nFrom-SVN: r178956", "tree": {"sha": "77741937fcacc762f9c11b5287338ae96d11b444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77741937fcacc762f9c11b5287338ae96d11b444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/comments", "author": null, "committer": null, "parents": [{"sha": "96b25c42a67dbfe1df14abb224e3f6f040ca961c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b25c42a67dbfe1df14abb224e3f6f040ca961c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b25c42a67dbfe1df14abb224e3f6f040ca961c"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "c4d2dccb2d9c80b4e96314a1e1b393bb61d51d91", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -1,3 +1,13 @@\n+2011-09-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb, lib-writ.ads, s-restri.ads, sem_ch6.adb,\n+\texp_aggr.adb: Minor reformatting.\n+\n+2011-09-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Change entity referenced\n+\tto underlying object if any, or else reference to the HEAP.\n+\n 2011-09-15  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Update dependencies."}, {"sha": "82b73188b267995c94d6c7efcf6ab62800d192ed", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -4705,7 +4705,6 @@ package body Exp_Aggr is\n         and then Static_Elaboration_Desired (Current_Scope)\n       then\n          Convert_To_Positional (N, Max_Others_Replicate => 100);\n-\n       else\n          Convert_To_Positional (N);\n       end if;\n@@ -5971,7 +5970,7 @@ package body Exp_Aggr is\n \n          if Present (Component_Associations (N)) then\n             Convert_To_Positional\n-             (N, Max_Others_Replicate => 64, Handle_Bit_Packed => True);\n+              (N, Max_Others_Replicate => 64, Handle_Bit_Packed => True);\n             return Nkind (N) /= N_Aggregate;\n          end if;\n "}, {"sha": "d7bea5ea2c4c3d3a208c1876e90436de0823a725", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -350,7 +350,7 @@ package Lib.Writ is\n \n    --  Subsequent R lines are present only if pragma Restriction No_Dependence\n    --  is used. There is one such line for each such pragma appearing in the\n-   --  extended main unit. The format is\n+   --  extended main unit. The format is:\n \n    --    R unit_name\n "}, {"sha": "e9de179f0c07ad3ada81d4a60f0bece496abbbe7", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -951,6 +951,33 @@ package body Lib.Xref is\n             return;\n          end if;\n \n+         --  In Alfa mode, consider the underlying entity renamed instead of\n+         --  the renaming, which is needed to compute a valid set of effects\n+         --  (reads, writes) for the enclosing subprogram.\n+\n+         if Alfa_Mode\n+           and then Is_Object (Ent)\n+           and then Present (Renamed_Object (Ent))\n+         then\n+            Ent := Get_Enclosing_Object (Renamed_Object (Ent));\n+\n+            --  If no enclosing object, then it could be a reference to any\n+            --  location not tracked individually, like heap-allocated data.\n+            --  Conservatively approximate this possibility by generating a\n+            --  dereference, and return.\n+\n+            if No (Ent) then\n+               if Actual_Typ = 'w' then\n+                  Alfa.Generate_Dereference (Nod, 'r');\n+                  Alfa.Generate_Dereference (Nod, 'w');\n+               else\n+                  Alfa.Generate_Dereference (Nod, 'r');\n+               end if;\n+\n+               return;\n+            end if;\n+         end if;\n+\n          --  Record reference to entity\n \n          Ref := Original_Location (Sloc (Nod));"}, {"sha": "0085548f98473d2d945900caab30122462c96c54", "filename": "gcc/ada/s-restri.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fs-restri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fs-restri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-restri.ads?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,7 +49,10 @@ package System.Restrictions is\n    package Rident is new System.Rident;\n \n    Run_Time_Restrictions : Rident.Restrictions_Info;\n-   --  Restrictions as set by the user, or detected by the binder.\n+   --  Restrictions as set by the user, or detected by the binder. See details\n+   --  in package System.Rident for what restrictions are included in the list\n+   --  and the format of the information.\n+   --\n    --  Note that a restriction which is both Set and Violated at run-time means\n    --  that the violation was detected as part of the Ada run-time and not\n    --  as part of user code."}, {"sha": "657ece339b12130de86513ccf1ddc7469567fe50", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -745,8 +745,8 @@ package body Sem_Aggr is\n \n    begin\n       --  All the components of List are matched against Component and a count\n-      --  is maintained of possible misspellings. When at the end of the\n-      --  the analysis there are one or two (not more!) possible misspellings,\n+      --  is maintained of possible misspellings. When at the end of the the\n+      --  analysis there are one or two (not more!) possible misspellings,\n       --  these misspellings will be suggested as possible correction.\n \n       Component_Elmt := First_Elmt (Elements);"}, {"sha": "fd87387eaee71ec6869fb8da23efd7928dfd96ca", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ba07a3b0337454acc00e0a0bcf57ec9df73e80/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=99ba07a3b0337454acc00e0a0bcf57ec9df73e80", "patch": "@@ -326,8 +326,9 @@ package body Sem_Ch6 is\n            Make_Subprogram_Declaration (Loc,\n              Specification => Copy_Separate_Tree (Specification (N)));\n \n-         --  Do rewrite setting Comes_From_Source on the result if the original\n-         --  expression function came from source.\n+         --  Do rewrite propagating the information that an expression function\n+         --  comes from source (otherwise references to this entity are not\n+         --  stored).\n \n          Rewrite (N, New_Decl);\n          Set_Comes_From_Source"}]}