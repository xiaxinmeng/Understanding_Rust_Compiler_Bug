{"sha": "1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0OTRiNmQ5ZmE5N2VlYjBiYmQ4MTJhZDhlNzAzNmVjNDU5MWNiMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-31T11:18:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-31T11:18:41Z"}, "message": "sparc.h (BRANCH_COST): Fix macro definition.\n\n\n\t* sparc.h (BRANCH_COST): Fix macro definition.\n\t* avr.c (avr_operand_rtx_cost): Add speed argument.\n\t(avr_rtx_costs): Update calls of avr_operand_rtx_cost.\n\nFrom-SVN: r139824", "tree": {"sha": "b267db80f2fc5420410c2578b7b89a7bfb052e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b267db80f2fc5420410c2578b7b89a7bfb052e04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/comments", "author": null, "committer": null, "parents": [{"sha": "f5e85907ff9383b4070b144d42b2d592dcc5da9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e85907ff9383b4070b144d42b2d592dcc5da9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e85907ff9383b4070b144d42b2d592dcc5da9f"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "39836ecd124c57efc205188ebd2bb3637ac4fa97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "patch": "@@ -1,3 +1,9 @@\n+2008-08-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* sparc.h (BRANCH_COST): Fix macro definition.\n+\t* avr.c (avr_operand_rtx_cost): Add speed argument.\n+\t(avr_rtx_costs): Update calls of avr_operand_rtx_cost.\n+\n 2008-08-31  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_types_in_gimple_assign): Dump mismatched"}, {"sha": "cc8b65cae7d32a450aa8b3da95c90d21ac3e07ec", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "patch": "@@ -80,7 +80,7 @@ static unsigned int avr_section_type_flags (tree, const char *, int);\n static void avr_reorg (void);\n static void avr_asm_out_ctor (rtx, int);\n static void avr_asm_out_dtor (rtx, int);\n-static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code);\n+static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code, bool);\n static bool avr_rtx_costs (rtx, int, int, int *, bool);\n static int avr_address_cost (rtx, bool);\n static bool avr_return_in_memory (const_tree, const_tree);\n@@ -4992,7 +4992,7 @@ order_regs_for_local_alloc (void)\n \n static int\n avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer,\n-\t\t      bool speed ATTRIBUTE_UNUSED)\n+\t\t      bool speed)\n {\n   enum rtx_code code = GET_CODE (x);\n   int total;\n@@ -5012,7 +5012,7 @@ avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer,\n     }\n \n   total = 0;\n-  avr_rtx_costs (x, code, outer, &total);\n+  avr_rtx_costs (x, code, outer, &total, speed);\n   return total;\n }\n \n@@ -5062,7 +5062,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case ABS:\n@@ -5076,24 +5076,24 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case NOT:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case ZERO_EXTEND:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode)\n \t\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (x, 0))));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case SIGN_EXTEND:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode) + 2\n \t\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (x, 0))));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case PLUS:\n@@ -5102,14 +5102,14 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tcase QImode:\n \t  *total = COSTS_N_INSNS (1);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t  break;\n \n \tcase HImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (2);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else if (INTVAL (XEXP (x, 1)) >= -63 && INTVAL (XEXP (x, 1)) <= 63)\n \t    *total = COSTS_N_INSNS (1);\n@@ -5121,7 +5121,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (4);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else if (INTVAL (XEXP (x, 1)) >= -63 && INTVAL (XEXP (x, 1)) <= 63)\n \t    *total = COSTS_N_INSNS (1);\n@@ -5132,22 +5132,22 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case MINUS:\n     case AND:\n     case IOR:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-          *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+          *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n       return true;\n \n     case XOR:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n       return true;\n \n     case MULT:\n@@ -5174,8 +5174,8 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n       return true;\n \n     case DIV:\n@@ -5186,8 +5186,8 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t*total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n       else\n \treturn false;\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n       return true;\n \n     case ASHIFT:\n@@ -5197,7 +5197,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    {\n@@ -5215,7 +5215,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5245,22 +5245,22 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\t*total = COSTS_N_INSNS (!speed ? 5 : 8);\n \t\tbreak;\n \t      case 6:\n-\t\t*total = COSTS_N_INSNS (ptimize_size ? 5 : 9);\n+\t\t*total = COSTS_N_INSNS (!speed ? 5 : 9);\n \t\tbreak;\n \t      case 5:\n \t\t*total = COSTS_N_INSNS (!speed ? 5 : 10);\n \t\tbreak;\n \t      default:\n \t        *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t      }\n \t  break;\n \n \tcase SImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5284,14 +5284,14 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t      }\n \t  break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case ASHIFTRT:\n@@ -5301,7 +5301,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    {\n@@ -5321,7 +5321,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5357,15 +5357,15 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t        *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t      }\n \t  break;\n \n \tcase SImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5389,14 +5389,14 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t      }\n \t  break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case LSHIFTRT:\n@@ -5406,7 +5406,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    {\n@@ -5424,7 +5424,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5463,15 +5463,15 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t        *total = COSTS_N_INSNS (!speed ? 5 : 41);\n-\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t      }\n \t  break;\n \n \tcase SImode:\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t    }\n \t  else\n \t    switch (INTVAL (XEXP (x, 1)))\n@@ -5495,14 +5495,14 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \t\tbreak;\n \t      default:\n \t\t*total = COSTS_N_INSNS (!speed ? 7 : 113);\n-\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t      }\n \t  break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     case COMPARE:\n@@ -5511,29 +5511,29 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total,\n \tcase QImode:\n \t  *total = COSTS_N_INSNS (1);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t  break;\n \n         case HImode:\n \t  *total = COSTS_N_INSNS (2);\n \t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t  else if (INTVAL (XEXP (x, 1)) != 0)\n \t    *total += COSTS_N_INSNS (1);\n           break;\n \n         case SImode:\n           *total = COSTS_N_INSNS (4);\n           if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, speed);\n \t  else if (INTVAL (XEXP (x, 1)) != 0)\n \t    *total += COSTS_N_INSNS (3);\n           break;\n \n \tdefault:\n \t  return false;\n \t}\n-      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n     default:"}, {"sha": "c4910a20a3160c02b4df33af29bfc4de92fbb465", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1f494b6d9fa97eeb0bbd812ad8e7036ec4591cb1", "patch": "@@ -2196,7 +2196,7 @@ do {                                                                    \\\n    On Niagara-2, a not-taken branch costs 1 cycle whereas a taken\n    branch costs 6 cycles.  */\n \n-#define BRANCH_COST (speed_p, predictable_p) \\\n+#define BRANCH_COST(speed_p, predictable_p) \\\n \t((sparc_cpu == PROCESSOR_V9 \\\n \t  || sparc_cpu == PROCESSOR_ULTRASPARC) \\\n \t ? 7 \\"}]}