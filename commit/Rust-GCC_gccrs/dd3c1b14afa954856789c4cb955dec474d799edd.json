{"sha": "dd3c1b14afa954856789c4cb955dec474d799edd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzYzFiMTRhZmE5NTQ4NTY3ODljNGNiOTU1ZGVjNDc0ZDc5OWVkZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-13T15:08:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-13T15:08:11Z"}, "message": "nvptx.c (nvptx_generate_vector_shuffle): Deal with complex types.\n\n\tgcc/\n\t* config/nvptx/nvptx.c (nvptx_generate_vector_shuffle): Deal with\n\tcomplex types.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c: New.\n\nFrom-SVN: r230325", "tree": {"sha": "19a08eb6b2e574c679c43e09a166f5db2cd3e2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a08eb6b2e574c679c43e09a166f5db2cd3e2bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd3c1b14afa954856789c4cb955dec474d799edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c1b14afa954856789c4cb955dec474d799edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3c1b14afa954856789c4cb955dec474d799edd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c1b14afa954856789c4cb955dec474d799edd/comments", "author": null, "committer": null, "parents": [{"sha": "23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c64853c83f3cf9cdf6925ab1c77d951cd1686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c64853c83f3cf9cdf6925ab1c77d951cd1686b"}], "stats": {"total": 163, "additions": 151, "deletions": 12}, "files": [{"sha": "18d0fdb23530fa5102c7488c5f6421d63120f444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c1b14afa954856789c4cb955dec474d799edd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c1b14afa954856789c4cb955dec474d799edd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd3c1b14afa954856789c4cb955dec474d799edd", "patch": "@@ -9,6 +9,11 @@\n \tusing EDGE_FALSE_VALUE for edges to the call block and\n \tEDGE_TRUE_VALUE for the others.\n \n+2015-11-13  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c (nvptx_generate_vector_shuffle): Deal with\n+\tcomplex types.\n+\n 2015-11-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gimplify.c (oacc_default_clause): Use inform for enclosing scope."}, {"sha": "26c2e9610514ec50816f9303be64f29b6a49e900", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c1b14afa954856789c4cb955dec474d799edd/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c1b14afa954856789c4cb955dec474d799edd/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=dd3c1b14afa954856789c4cb955dec474d799edd", "patch": "@@ -3634,26 +3634,51 @@ nvptx_generate_vector_shuffle (location_t loc,\n {\n   unsigned fn = NVPTX_BUILTIN_SHUFFLE;\n   tree_code code = NOP_EXPR;\n-  tree type = unsigned_type_node;\n-  enum machine_mode mode = TYPE_MODE (TREE_TYPE (var));\n+  tree arg_type = unsigned_type_node;\n+  tree var_type = TREE_TYPE (var);\n+  tree dest_type = var_type;\n \n-  if (!INTEGRAL_MODE_P (mode))\n+  if (TREE_CODE (var_type) == COMPLEX_TYPE)\n+    var_type = TREE_TYPE (var_type);\n+\n+  if (TREE_CODE (var_type) == REAL_TYPE)\n     code = VIEW_CONVERT_EXPR;\n-  if (GET_MODE_SIZE (mode) == GET_MODE_SIZE (DImode))\n+\n+  if (TYPE_SIZE (var_type)\n+      == TYPE_SIZE (long_long_unsigned_type_node))\n     {\n       fn = NVPTX_BUILTIN_SHUFFLELL;\n-      type = long_long_unsigned_type_node;\n+      arg_type = long_long_unsigned_type_node;\n     }\n-\n+  \n   tree call = nvptx_builtin_decl (fn, true);\n-  call = build_call_expr_loc\n-    (loc, call, 3, fold_build1 (code, type, var),\n-     build_int_cst (unsigned_type_node, shift),\n-     build_int_cst (unsigned_type_node, SHUFFLE_DOWN));\n+  tree bits = build_int_cst (unsigned_type_node, shift);\n+  tree kind = build_int_cst (unsigned_type_node, SHUFFLE_DOWN);\n+  tree expr;\n \n-  call = fold_build1 (code, TREE_TYPE (dest_var), call);\n+  if (var_type != dest_type)\n+    {\n+      /* Do real and imaginary parts separately.  */\n+      tree real = fold_build1 (REALPART_EXPR, var_type, var);\n+      real = fold_build1 (code, arg_type, real);\n+      real = build_call_expr_loc (loc, call, 3, real, bits, kind);\n+      real = fold_build1 (code, var_type, real);\n+\n+      tree imag = fold_build1 (IMAGPART_EXPR, var_type, var);\n+      imag = fold_build1 (code, arg_type, imag);\n+      imag = build_call_expr_loc (loc, call, 3, imag, bits, kind);\n+      imag = fold_build1 (code, var_type, imag);\n+\n+      expr = fold_build2 (COMPLEX_EXPR, dest_type, real, imag);\n+    }\n+  else\n+    {\n+      expr = fold_build1 (code, arg_type, var);\n+      expr = build_call_expr_loc (loc, call, 3, expr, bits, kind);\n+      expr = fold_build1 (code, dest_type, expr);\n+    }\n \n-  gimplify_assign (dest_var, call, seq);\n+  gimplify_assign (dest_var, expr, seq);\n }\n \n /* Insert code to locklessly update  *PTR with *PTR OP VAR just before"}, {"sha": "9ca963ac314f0266a879250bb44a5a326df0bf01", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c1b14afa954856789c4cb955dec474d799edd/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c1b14afa954856789c4cb955dec474d799edd/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=dd3c1b14afa954856789c4cb955dec474d799edd", "patch": "@@ -1,3 +1,8 @@\n+2015-11-13  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c: New.\n+\n 2015-11-12  James Norris  <jnorris@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "314e5118be94aec82825b4c19ed4f7245872f94a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c1b14afa954856789c4cb955dec474d799edd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c1b14afa954856789c4cb955dec474d799edd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c?ref=dd3c1b14afa954856789c4cb955dec474d799edd", "patch": "@@ -0,0 +1,52 @@\n+\n+#include <complex.h>\n+\n+/* Double float has 53 bits of fraction. */\n+#define FRAC (1.0 / (1LL << 48))\n+\n+int close_enough (double _Complex a, double _Complex b)\n+{\n+  double _Complex diff = a - b;\n+  double mag2_a = __real__(a) * __real__ (a) + __imag__ (a) * __imag__ (a);\n+  double mag2_diff = (__real__(diff) * __real__ (diff)\n+\t\t     + __imag__ (diff) * __imag__ (diff));\n+\n+  return mag2_diff / mag2_a < (FRAC * FRAC);\n+}\n+\n+int main (void)\n+{\n+#define N 100\n+  double _Complex ary[N], sum, prod, tsum, tprod;\n+  int ix;\n+\n+  sum = tsum = 0;\n+  prod = tprod = 1;\n+  \n+  for (ix = 0; ix < N;  ix++)\n+    {\n+      double frac = ix * (1.0 / 1024) + 1.0;\n+      \n+      ary[ix] = frac + frac * 2.0i - 1.0i;\n+      sum += ary[ix];\n+      prod *= ary[ix];\n+    }\n+\n+#pragma acc parallel vector_length(32) copyin(ary) copy (tsum, tprod)\n+  {\n+#pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n+    for (ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "b3bde6560798f42ec3eee89aafec2e2d28995873", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c1b14afa954856789c4cb955dec474d799edd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c1b14afa954856789c4cb955dec474d799edd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c?ref=dd3c1b14afa954856789c4cb955dec474d799edd", "patch": "@@ -0,0 +1,52 @@\n+\n+#include <complex.h>\n+\n+/* Single float has 23 bits of fraction. */\n+#define FRAC (1.0f / (1 << 20))\n+\n+int close_enough (float _Complex a, float _Complex b)\n+{\n+  float _Complex diff = a - b;\n+  float mag2_a = __real__(a) * __real__ (a) + __imag__ (a) * __imag__ (a);\n+  float mag2_diff = (__real__(diff) * __real__ (diff)\n+\t\t     + __imag__ (diff) * __imag__ (diff));\n+\n+  return mag2_diff / mag2_a < (FRAC * FRAC);\n+}\n+\n+int main (void)\n+{\n+#define N 100\n+  float _Complex ary[N], sum, prod, tsum, tprod;\n+  int ix;\n+\n+  sum = tsum = 0;\n+  prod = tprod = 1;\n+  \n+  for (ix = 0; ix < N;  ix++)\n+    {\n+      float frac = ix * (1.0f / 1024) + 1.0f;\n+      \n+      ary[ix] = frac + frac * 2.0i - 1.0i;\n+      sum += ary[ix];\n+      prod *= ary[ix];\n+    }\n+\n+#pragma acc parallel vector_length(32) copyin(ary) copy (tsum, tprod)\n+  {\n+#pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n+    for (ix = 0; ix < N; ix++)\n+      {\n+\ttsum += ary[ix];\n+\ttprod *= ary[ix];\n+      }\n+  }\n+\n+  if (!close_enough (sum, tsum))\n+    return 1;\n+\n+  if (!close_enough (prod, tprod))\n+    return 1;\n+\n+  return 0;\n+}"}]}