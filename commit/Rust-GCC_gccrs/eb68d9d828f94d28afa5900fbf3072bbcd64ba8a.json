{"sha": "eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2OGQ5ZDgyOGY5NGQyOGFmYTU5MDBmYmYzMDcyYmJjZDY0YmE4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-27T09:48:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-27T12:25:55Z"}, "message": "tree-optimization/96522 - transfer of flow-sensitive info in copy_ref_info\n\nThis removes the bogus tranfer of flow-sensitive info in copy_ref_info\nplus fixes one oversight in FRE when flow-sensitive non-NULLness was added to\npoints-to info.\n\n2020-08-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96522\n\t* tree-ssa-address.c (copy_ref_info): Reset flow-sensitive\n\tinfo of the copied points-to.  Transfer bigger alignment\n\tvia the access type.\n\t* tree-ssa-sccvn.c (eliminate_dom_walker::eliminate_stmt):\n\tReset all flow-sensitive info.\n\n\t* gcc.dg/torture/pr96522.c: New testcase.", "tree": {"sha": "98453eeb9ed43135a20f67b3aa90d011c4b2265d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98453eeb9ed43135a20f67b3aa90d011c4b2265d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3874dcf82bc80c2552ef62f57cf08c28fc686a"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "2f55d1aeb4d5e58aa8db59503031ba4e5fc0616f", "filename": "gcc/testsuite/gcc.dg/torture/pr96522.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr96522.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr96522.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr96522.c?ref=eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fno-tree-pta\" } */\n+\n+__attribute__((noipa)) void\n+bar (void)\n+{\n+  volatile int v = 1;\n+  if (v)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+baz (void)\n+{\n+}\n+\n+__attribute__((noipa)) void\n+foo (int n, double *p, double *x)\n+{\n+  if (n < 10 && p != 0)\n+    for (int i = 0; i < 10; i++)\n+      if (x[0] < p[i])\n+        x[i] = 0;\n+  if (p != 0)\n+    bar ();\n+  else\n+    baz ();\n+}\n+\n+int\n+main ()\n+{\n+  double arr[10];\n+  foo (1000, 0, arr);\n+  return 0;\n+}"}, {"sha": "93eae192212668f5d2e641de5c25e19cc9ec877a", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"tree-affine.h\"\n #include \"gimplify.h\"\n+#include \"builtins.h\"\n \n /* FIXME: We compute address costs using RTL.  */\n #include \"tree-ssa-address.h\"\n@@ -1015,45 +1016,24 @@ copy_ref_info (tree new_ref, tree old_ref)\n \n   new_ptr_base = TREE_OPERAND (new_ref, 0);\n \n+  tree base = get_base_address (old_ref);\n+  if (!base)\n+    return;\n+\n   /* We can transfer points-to information from an old pointer\n      or decl base to the new one.  */\n   if (new_ptr_base\n       && TREE_CODE (new_ptr_base) == SSA_NAME\n       && !SSA_NAME_PTR_INFO (new_ptr_base))\n     {\n-      tree base = get_base_address (old_ref);\n-      if (!base)\n-\t;\n-      else if ((TREE_CODE (base) == MEM_REF\n-\t\t|| TREE_CODE (base) == TARGET_MEM_REF)\n-\t       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n-\t       && SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)))\n+      if ((TREE_CODE (base) == MEM_REF\n+\t   || TREE_CODE (base) == TARGET_MEM_REF)\n+\t  && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n+\t  && SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)))\n \t{\n-\t  struct ptr_info_def *new_pi;\n-\t  unsigned int align, misalign;\n-\n \t  duplicate_ssa_name_ptr_info\n \t    (new_ptr_base, SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)));\n-\t  new_pi = SSA_NAME_PTR_INFO (new_ptr_base);\n-\t  /* We have to be careful about transferring alignment information.  */\n-\t  if (get_ptr_info_alignment (new_pi, &align, &misalign)\n-\t      && TREE_CODE (old_ref) == MEM_REF\n-\t      && !(TREE_CODE (new_ref) == TARGET_MEM_REF\n-\t\t   && (TMR_INDEX2 (new_ref)\n-\t\t       /* TODO: Below conditions can be relaxed if TMR_INDEX\n-\t\t\t  is an indcution variable and its initial value and\n-\t\t\t  step are aligned.  */\n-\t\t       || (TMR_INDEX (new_ref) && !TMR_STEP (new_ref))\n-\t\t       || (TMR_STEP (new_ref)\n-\t\t\t   && (TREE_INT_CST_LOW (TMR_STEP (new_ref))\n-\t\t\t       < align)))))\n-\t    {\n-\t      poly_uint64 inc = (mem_ref_offset (old_ref)\n-\t\t\t\t - mem_ref_offset (new_ref)).force_uhwi ();\n-\t      adjust_ptr_info_misalignment (new_pi, inc);\n-\t    }\n-\t  else\n-\t    mark_ptr_info_alignment_unknown (new_pi);\n+\t  reset_flow_sensitive_info (new_ptr_base);\n \t}\n       else if (VAR_P (base)\n \t       || TREE_CODE (base) == PARM_DECL\n@@ -1063,6 +1043,14 @@ copy_ref_info (tree new_ref, tree old_ref)\n \t  pt_solution_set_var (&pi->pt, base);\n \t}\n     }\n+\n+  /* And alignment info.  Note we cannot transfer misalignment info\n+     since that sits on the SSA name but this is flow-sensitive info\n+     which we cannot transfer in this generic routine.  */\n+  unsigned old_align = get_object_alignment (old_ref);\n+  unsigned new_align = get_object_alignment (new_ref);\n+  if (new_align < old_align)\n+    TREE_TYPE (new_ref) = build_aligned_type (TREE_TYPE (new_ref), old_align);\n }\n \n /* Move constants in target_mem_ref REF to offset.  Returns the new target"}, {"sha": "8fbb1dd46d107fb72f854e83f32e5006830ea91d", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68d9d828f94d28afa5900fbf3072bbcd64ba8a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=eb68d9d828f94d28afa5900fbf3072bbcd64ba8a", "patch": "@@ -5860,8 +5860,7 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t      duplicate_ssa_name_ptr_info (sprime,\n \t\t\t\t\t   SSA_NAME_PTR_INFO (lhs));\n \t      if (b != sprime_b)\n-\t\tmark_ptr_info_alignment_unknown\n-\t\t    (SSA_NAME_PTR_INFO (sprime));\n+\t\treset_flow_sensitive_info (sprime);\n \t    }\n \t  else if (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n \t\t   && SSA_NAME_RANGE_INFO (lhs)"}]}