{"sha": "bb149ca2e912038dce733f95ab1c24ff0d1af280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxNDljYTJlOTEyMDM4ZGNlNzMzZjk1YWIxYzI0ZmYwZDFhZjI4MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-15T13:47:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-15T13:47:41Z"}, "message": "Turn TRULY_NOOP_TRUNCATION into a hook\n\nI'm not sure the documentation is correct that outprec is always less\nthan inprec, and each non-default implementation tested for the case\nin which it wasn't, but the patch leaves it as-is.\n\nThe SH port had a couple of TRULY_NOOP_TRUNCATION tests that were left\nover from the old shmedia port.\n\n2017-09-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayard  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (truly_noop_truncation): New hook.\n\t(mode_rep_extended): Refer to TARGET_TRULY_NOOP_TRUNCATION rather\n\tthan TRULY_NOOP_TRUNCATION.\n\t* hooks.h (hook_bool_uint_uint_true): Declare.\n\t* hooks.c (hook_bool_uint_uint_true): New function.\n\t* doc/tm.texi.in (TRULY_NOOP_TRUNCATION): Replace with...\n\t(TARGET_TRULY_NOOP_TRUNCATION): ...this.\n\t* doc/tm.texi: Regenerate.\n\t* combine.c (make_extraction): Refer to TARGET_TRULY_NOOP_TRUNCATION\n\trather than TRULY_NOOP_TRUNCATION in comments.\n\t(simplify_comparison): Likewise.\n\t(record_truncated_value): Likewise.\n\t* expmed.c (extract_bit_field_1): Likewise.\n\t(extract_split_bit_field): Likewise.\n\t* convert.c (convert_to_integer_1): Use targetm.truly_noop_truncation\n\tinstead of TRULY_NOOP_TRUNCATION.\n\t* function.c (assign_parm_setup_block): Likewise.\n\t* machmode.h (TRULY_NOOP_TRUNCATION_MODES_P): Likewise.\n\t* rtlhooks.c: Include target.h.\n\t* config/aarch64/aarch64.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/alpha/alpha.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/arc/arc.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/arm/arm.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/avr/avr.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/bfin/bfin.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/c6x/c6x.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/cr16/cr16.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/cris/cris.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/epiphany/epiphany.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/fr30/fr30.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/frv/frv.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/ft32/ft32.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/h8300/h8300.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/i386/i386.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/ia64/ia64.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/iq2000/iq2000.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/lm32/lm32.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/m32c/m32c.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/m32r/m32r.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/m68k/m68k.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/mcore/mcore.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/microblaze/microblaze.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/mips/mips.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/mips/mips.c (mips_truly_noop_truncation): New function.\n\t(TARGET_TRULY_NOOP_TRUNCATION): Redefine.\n\t* config/mips/mips.md: Refer to TARGET_TRULY_NOOP_TRUNCATION\n\trather than TRULY_NOOP_TRUNCATION in comments.\n\t* config/mmix/mmix.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/mn10300/mn10300.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/moxie/moxie.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/msp430/msp430.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/nds32/nds32.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/nios2/nios2.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/nvptx/nvptx.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/pa/pa.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/pdp11/pdp11.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/powerpcspe/powerpcspe.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/riscv/riscv.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/riscv/riscv.md: Refer to TARGET_TRULY_NOOP_TRUNCATION\n\trather than TRULY_NOOP_TRUNCATION in comments.\n\t* config/rl78/rl78.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/rs6000/rs6000.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/rx/rx.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/s390/s390.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/sh/sh.h (MAYBE_BASE_REGISTER_RTX_P): Remove\n\tTRULY_NOOP_TRUNCATION condition.\n\t(MAYBE_INDEX_REGISTER_RTX_P): Likewise.\n\t(TRULY_NOOP_TRUNCATION): Delete.\n\t* config/sparc/sparc.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/spu/spu.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/spu/spu.c (spu_truly_noop_truncation): New function.\n\t(TARGET_TRULY_NOOP_TRUNCATION): Redefine.\n\t* config/stormy16/stormy16.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/tilegx/tilegx.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/tilegx/tilegx.c (tilegx_truly_noop_truncation): New fuction.\n\t(TARGET_TRULY_NOOP_TRUNCATION): Redefine.\n\t* config/tilegx/tilegx.md: Refer to TARGET_TRULY_NOOP_TRUNCATION\n\trather than TRULY_NOOP_TRUNCATION in comments.\n\t* config/tilepro/tilepro.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/v850/v850.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/vax/vax.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/visium/visium.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* config/xtensa/xtensa.h (TRULY_NOOP_TRUNCATION): Delete.\n\t* system.h (TRULY_NOOP_TRUNCATION): Poison.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252818", "tree": {"sha": "0bb537d68bc00b31b84974e82a6633ac494aa4bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bb537d68bc00b31b84974e82a6633ac494aa4bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb149ca2e912038dce733f95ab1c24ff0d1af280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb149ca2e912038dce733f95ab1c24ff0d1af280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb149ca2e912038dce733f95ab1c24ff0d1af280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb149ca2e912038dce733f95ab1c24ff0d1af280/comments", "author": null, "committer": null, "parents": [{"sha": "a75c63e02ab97abaaaf3508a25f8d87362ea238a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75c63e02ab97abaaaf3508a25f8d87362ea238a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75c63e02ab97abaaaf3508a25f8d87362ea238a"}], "stats": {"total": 416, "additions": 180, "deletions": 236}, "files": [{"sha": "498d6b3bca7c73a9be73c7632f0ff6ece8407a49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1,3 +1,92 @@\n+2017-09-15  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayard  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (truly_noop_truncation): New hook.\n+\t(mode_rep_extended): Refer to TARGET_TRULY_NOOP_TRUNCATION rather\n+\tthan TRULY_NOOP_TRUNCATION.\n+\t* hooks.h (hook_bool_uint_uint_true): Declare.\n+\t* hooks.c (hook_bool_uint_uint_true): New function.\n+\t* doc/tm.texi.in (TRULY_NOOP_TRUNCATION): Replace with...\n+\t(TARGET_TRULY_NOOP_TRUNCATION): ...this.\n+\t* doc/tm.texi: Regenerate.\n+\t* combine.c (make_extraction): Refer to TARGET_TRULY_NOOP_TRUNCATION\n+\trather than TRULY_NOOP_TRUNCATION in comments.\n+\t(simplify_comparison): Likewise.\n+\t(record_truncated_value): Likewise.\n+\t* expmed.c (extract_bit_field_1): Likewise.\n+\t(extract_split_bit_field): Likewise.\n+\t* convert.c (convert_to_integer_1): Use targetm.truly_noop_truncation\n+\tinstead of TRULY_NOOP_TRUNCATION.\n+\t* function.c (assign_parm_setup_block): Likewise.\n+\t* machmode.h (TRULY_NOOP_TRUNCATION_MODES_P): Likewise.\n+\t* rtlhooks.c: Include target.h.\n+\t* config/aarch64/aarch64.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/alpha/alpha.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/arc/arc.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/arm/arm.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/avr/avr.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/bfin/bfin.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/c6x/c6x.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/cr16/cr16.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/cris/cris.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/epiphany/epiphany.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/fr30/fr30.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/frv/frv.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/ft32/ft32.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/h8300/h8300.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/i386/i386.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/ia64/ia64.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/iq2000/iq2000.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/lm32/lm32.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/m32c/m32c.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/m32r/m32r.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/m68k/m68k.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/mcore/mcore.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/microblaze/microblaze.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/mips/mips.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/mips/mips.c (mips_truly_noop_truncation): New function.\n+\t(TARGET_TRULY_NOOP_TRUNCATION): Redefine.\n+\t* config/mips/mips.md: Refer to TARGET_TRULY_NOOP_TRUNCATION\n+\trather than TRULY_NOOP_TRUNCATION in comments.\n+\t* config/mmix/mmix.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/mn10300/mn10300.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/moxie/moxie.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/msp430/msp430.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/nds32/nds32.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/nios2/nios2.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/nvptx/nvptx.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/pa/pa.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/pdp11/pdp11.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/powerpcspe/powerpcspe.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/riscv/riscv.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/riscv/riscv.md: Refer to TARGET_TRULY_NOOP_TRUNCATION\n+\trather than TRULY_NOOP_TRUNCATION in comments.\n+\t* config/rl78/rl78.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/rs6000/rs6000.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/rx/rx.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/s390/s390.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/sh/sh.h (MAYBE_BASE_REGISTER_RTX_P): Remove\n+\tTRULY_NOOP_TRUNCATION condition.\n+\t(MAYBE_INDEX_REGISTER_RTX_P): Likewise.\n+\t(TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/sparc/sparc.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/spu/spu.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/spu/spu.c (spu_truly_noop_truncation): New function.\n+\t(TARGET_TRULY_NOOP_TRUNCATION): Redefine.\n+\t* config/stormy16/stormy16.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/tilegx/tilegx.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/tilegx/tilegx.c (tilegx_truly_noop_truncation): New fuction.\n+\t(TARGET_TRULY_NOOP_TRUNCATION): Redefine.\n+\t* config/tilegx/tilegx.md: Refer to TARGET_TRULY_NOOP_TRUNCATION\n+\trather than TRULY_NOOP_TRUNCATION in comments.\n+\t* config/tilepro/tilepro.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/v850/v850.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/vax/vax.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/visium/visium.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* config/xtensa/xtensa.h (TRULY_NOOP_TRUNCATION): Delete.\n+\t* system.h (TRULY_NOOP_TRUNCATION): Poison.\n+\n 2017-09-15  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR target/67591"}, {"sha": "ccfee26333b400b0873f255ff67cb7bdbb301b35", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -7721,7 +7721,7 @@ make_extraction (machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n   else if (!MEM_P (inner))\n     {\n       /* On the LHS, don't create paradoxical subregs implicitely truncating\n-\t the register unless TRULY_NOOP_TRUNCATION.  */\n+\t the register unless TARGET_TRULY_NOOP_TRUNCATION.  */\n       if (in_dest\n \t  && !TRULY_NOOP_TRUNCATION_MODES_P (GET_MODE (inner),\n \t\t\t\t\t     wanted_inner_mode))\n@@ -12499,7 +12499,7 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t     (ne:DI (and:DI (reg:DI 4) (const_int 0xffffffff)) (const_int 0))\n \t     -> (ne:DI (reg:SI 4) (const_int 0))\n \n-\t     unless TRULY_NOOP_TRUNCATION allows it or the register is\n+\t     unless TARGET_TRULY_NOOP_TRUNCATION allows it or the register is\n \t     known to hold a value of the required mode the\n \t     transformation is invalid.  */\n \t  if ((equality_comparison_p || unsigned_comparison_p)\n@@ -13339,8 +13339,8 @@ reg_truncated_to_mode (machine_mode mode, const_rtx x)\n }\n \n /* If X is a hard reg or a subreg record the mode that the register is\n-   accessed in.  For non-TRULY_NOOP_TRUNCATION targets we might be able\n-   to turn a truncate into a subreg using this information.  Return true\n+   accessed in.  For non-TARGET_TRULY_NOOP_TRUNCATION targets we might be\n+   able to turn a truncate into a subreg using this information.  Return true\n    if traversing X is complete.  */\n \n static bool"}, {"sha": "128006d8b5ffeeb63e96b48cd80e4a7a64753dfb", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -773,8 +773,6 @@ typedef struct\n    if we don't have to, for power-saving reasons.  */\n #define SLOW_BYTE_ACCESS\t\t0\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define NO_FUNCTION_CSE\t1\n \n /* Specify the machine mode that the hardware addresses have."}, {"sha": "82d04d6135aba4a3ea31b7fedd119999e6455695", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -800,10 +800,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* The CIX ctlz and cttz instructions return 64 for zero.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 64, \\\n   TARGET_CIX ? 1 : 0)"}, {"sha": "6c634301ee9f8c9a015a0c27d2ae34f04e699bee", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1449,10 +1449,6 @@ do { \\\n */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n #define STORE_FLAG_VALUE 1"}, {"sha": "e359946ef2a87a29578e7e1457f49219af9436a7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1897,9 +1897,6 @@ enum arm_auto_incmodes\n    rotates is modulo 32 used.  */\n /* #define SHIFT_COUNT_TRUNCATED 1 */\n \n-/* All integers have the same format so truncation is easy.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)  1\n-\n /* Calling from registers is a massive pain.  */\n #define NO_FUNCTION_CSE 1\n "}, {"sha": "6d00dbd5d6ed83dd8e003c6a2d4633e8eaf5a7d0", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -471,8 +471,6 @@ typedef struct avr_args\n \n #define MOVE_RATIO(speed) ((speed) ? 3 : 2)\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define Pmode HImode\n \n #define FUNCTION_MODE HImode"}, {"sha": "e0443da2205c11eda3952e672ac671016df85105", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -799,10 +799,6 @@ typedef struct {\n \n #define NOTICE_UPDATE_CC(EXPR, INSN) 0\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX UNITS_PER_WORD"}, {"sha": "c8c407369d3e03ae80a317879b6f9799fd1462db", "filename": "gcc/config/c6x/c6x.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fc6x%2Fc6x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fc6x%2Fc6x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -596,7 +596,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define CASE_VECTOR_MODE SImode\n #define MOVE_MAX 4\n #define MOVE_RATIO(SPEED) 4\n-#define TRULY_NOOP_TRUNCATION(outprec, inprec) 1\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n #define Pmode SImode\n #define FUNCTION_MODE QImode"}, {"sha": "ce54dd744690c8dba1453db3d1d90360530e97e9", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -551,8 +551,6 @@ struct cumulative_args\n \n #define MOVE_MAX 4\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)  1\n-\n #define STORE_FLAG_VALUE  1\n \n #define Pmode SImode"}, {"sha": "b44164fd83adc8da4a262a6315f514e55bb6aa24", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1038,8 +1038,6 @@ enum cris_symbol_type\n \n /* Maybe SHIFT_COUNT_TRUNCATED is safe to define?  FIXME: Check later.  */\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n "}, {"sha": "303ac5e071d1a53c86453711e9328b8a7ed9afbb", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -840,10 +840,6 @@ do \\\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "2e6b793b8bc81767f861600536d6d2ce98a5228d", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -776,18 +776,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    memory to memory.  */\n #define MOVE_MAX 8\n \n-/* A C expression which is nonzero if on this machine it is safe to \"convert\"\n-   an integer of INPREC bits to one of OUTPREC bits (where OUTPREC is smaller\n-   than INPREC) by merely operating on it as if it had only OUTPREC bits.\n-\n-   On many machines, this expression can be 1.\n-\n-   When `TRULY_NOOP_TRUNCATION' returns 1 for a pair of sizes for modes for\n-   which `TARGET_MODES_TIEABLE_P' is 0, suboptimal code can result.\n-   If this is the case, making `TRULY_NOOP_TRUNCATION' return 0 in such\n-   cases may improve things.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* An alias for the machine mode for pointers.  On most machines, define this\n    to be the integer mode corresponding to the width of a hardware pointer;\n    `SImode' on 32-bit machine or `DImode' on 64-bit machines.  On some machines"}, {"sha": "350a59fbc1c91e046afb733f100dd6172d425839", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1813,18 +1813,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    memory to memory.  */\n #define MOVE_MAX 8\n \n-/* A C expression which is nonzero if on this machine it is safe to \"convert\"\n-   an integer of INPREC bits to one of OUTPREC bits (where OUTPREC is smaller\n-   than INPREC) by merely operating on it as if it had only OUTPREC bits.\n-\n-   On many machines, this expression can be 1.\n-\n-   When `TRULY_NOOP_TRUNCATION' returns 1 for a pair of sizes for modes\n-   for which `TARGET_MODES_TIEABLE_P' is 0, suboptimal code can result.\n-   If this is the case, making `TRULY_NOOP_TRUNCATION' return 0 in such\n-   cases may improve things.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* An alias for the machine mode for pointers.  On most machines, define this\n    to be the integer mode corresponding to the width of a hardware pointer;\n    `SImode' on 32-bit machine or `DImode' on 64-bit machines.  On some machines"}, {"sha": "643839323bfa840f54e1f58dd99172670193ae75", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -449,7 +449,6 @@ do { \\\n    quickly between memory and registers or between two memory\n    locations.  */\n #define MOVE_MAX 4\n-#define TRULY_NOOP_TRUNCATION(op,ip) 1\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */"}, {"sha": "8ff38605a236cc2f909d19428cb9ee6d27a139ba", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -561,10 +561,6 @@ struct cum_arg\n    of a shift count.  */\n /* #define SHIFT_COUNT_TRUNCATED */\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "6c8ae972550e12d184cbd90e63d548d07c121108", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1911,10 +1911,6 @@ typedef struct ix86_args {\n \n /* #define SHIFT_COUNT_TRUNCATED */\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* A macro to update M and UNSIGNEDP when an object whose type is\n    TYPE and which has the specified mode and signedness is to be\n    stored in a register.  This macro is only called when TYPE is a"}, {"sha": "9cfb0091910c41cd1d0627c5d741177a600a4f06", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1567,12 +1567,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    memory to memory.  */\n #define MOVE_MAX 8\n \n-/* A C expression which is nonzero if on this machine it is safe to \"convert\"\n-   an integer of INPREC bits to one of OUTPREC bits (where OUTPREC is smaller\n-   than INPREC) by merely operating on it as if it had only OUTPREC bits.  */\n-\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* A C expression describing the value returned by a comparison operator with\n    an integral mode and stored by a store-flag instruction (`sCOND') when the\n    condition is true.  */"}, {"sha": "ef4cd2705e1c41275792028e2d4a80356b961e8d", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -526,8 +526,6 @@ while (0)\n \n #define SHIFT_COUNT_TRUNCATED 1\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define STORE_FLAG_VALUE 1\n \n #define Pmode SImode"}, {"sha": "916983408a4c7c41e959165ecdc31f2a62a942cb", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -519,8 +519,6 @@ do {                                                            \\\n \n #define SHIFT_COUNT_TRUNCATED 1\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define Pmode SImode\n \n #define FUNCTION_MODE SImode"}, {"sha": "594288b76e90c79b2495be73bee55d585eceabbc", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -629,7 +629,6 @@ typedef struct m32c_cumulative_args\n #define LOAD_EXTEND_OP(MEM) ZERO_EXTEND\n \n #define MOVE_MAX 4\n-#define TRULY_NOOP_TRUNCATION(op,ip) 1\n \n #define STORE_FLAG_VALUE 1\n "}, {"sha": "09d73bc30c43a3f14f36b6d0b72fea9f11926eba", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -981,10 +981,6 @@ L2:     .word STATIC\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "2fefc7251ba13c979c90d03095a7a77a578f5835", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -665,8 +665,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n #define MOVE_MAX 4\n #define SLOW_BYTE_ACCESS 0\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* The 68020 BFFFO and ColdFire FF1 instructions return 32 for zero. */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n "}, {"sha": "4e9334369d113e2f0d4f7ca2f2949fb574b95a15", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -549,9 +549,6 @@ extern const enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    target.  */\n #define SHIFT_COUNT_TRUNCATED 0\n \n-/* All integers have the same format so truncation is easy.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC,INPREC)  1\n-\n /* Define this if addresses of constant functions\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive"}, {"sha": "1726e2658441466c912790d2d953b2a1136bb1fd", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -554,11 +554,6 @@ typedef struct microblaze_args\n \n #define SHIFT_COUNT_TRUNCATED\t\t\t1\n \n-/* This results in inefficient code for 64 bit to 32 conversions.\n-   Something needs to be done about this.  Perhaps not use any 32 bit\n-   instructions?  Perhaps use PROMOTE_MODE?  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)  1\n-\n #define Pmode SImode\n \n #define FUNCTION_MODE   SImode"}, {"sha": "7eaff14d47231b6ed1ccd1a7d84b47c18e5c6f97", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -22328,6 +22328,14 @@ mips_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n   *punsignedp = unsignedp;\n   return mode;\n }\n+\n+/* Implement TARGET_TRULY_NOOP_TRUNCATION.  */\n+\n+static bool\n+mips_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n+{\n+  return !TARGET_64BIT || inprec <= 32 || outprec > 32;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -22623,6 +22631,9 @@ mips_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS mips_can_change_mode_class\n \n+#undef TARGET_TRULY_NOOP_TRUNCATION\n+#define TARGET_TRULY_NOOP_TRUNCATION mips_truly_noop_truncation\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "1f4cad8b121ecd70d536e5e6a816aa69ceebdc1b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -2658,11 +2658,6 @@ typedef struct mips_args {\n    do not truncate the shift amount at all.  */\n #define SHIFT_COUNT_TRUNCATED (!TARGET_LOONGSON_VECTORS)\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) \\\n-  (TARGET_64BIT ? ((INPREC) <= 32 || (OUTPREC) > 32) : 1)\n-\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "cfff63ebf0ea4594d548bd625d036da606d2ca7d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -3242,9 +3242,9 @@\n \t\t (match_operand:GPR 2 \"and_reg_operand\")))])\n \n ;; The middle-end is not allowed to convert ANDing with 0xffff_ffff into a\n-;; zero_extendsidi2 because of TRULY_NOOP_TRUNCATION, so handle these here.\n-;; Note that this variant does not trigger for SI mode because we require\n-;; a 64-bit HOST_WIDE_INT and 0xffff_ffff wouldn't be a canonical\n+;; zero_extendsidi2 because of TARGET_TRULY_NOOP_TRUNCATION, so handle these\n+;; here.  Note that this variant does not trigger for SI mode because we\n+;; require a 64-bit HOST_WIDE_INT and 0xffff_ffff wouldn't be a canonical\n ;; sign-extended SImode value.\n ;;\n ;; These are possible combinations for operand 1 and 2.  The table\n@@ -3426,7 +3426,7 @@\n ;; modes is a no-op, as it is for most other GCC ports.  Truncating\n ;; DImode values to SImode is not a no-op for TARGET_64BIT since we\n ;; need to make sure that the lower 32 bits are properly sign-extended\n-;; (see TRULY_NOOP_TRUNCATION).  Truncating DImode values into modes\n+;; (see TARGET_TRULY_NOOP_TRUNCATION).  Truncating DImode values into modes\n ;; smaller than SImode is equivalent to two separate truncations:\n ;;\n ;;                        A       B\n@@ -3644,7 +3644,7 @@\n ;; Those for integer source operand are ordered widest source type first.\n \n ;; When TARGET_64BIT, all SImode integer and accumulator registers\n-;; should already be in sign-extended form (see TRULY_NOOP_TRUNCATION\n+;; should already be in sign-extended form (see TARGET_TRULY_NOOP_TRUNCATION\n ;; and truncdisi2).  We can therefore get rid of register->register\n ;; instructions if we constrain the source to be in the same register as\n ;; the destination."}, {"sha": "71616561a7fa2b685d595da343a7815dd32f3ae2", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -788,8 +788,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define MOVE_MAX 8\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* ??? MMIX allows a choice of STORE_FLAG_VALUE.  Revisit later,\n    we don't have scc expanders yet.  */\n "}, {"sha": "1078b45c30aa136fcf10db6296e8d433230be4ec", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -691,10 +691,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    of a shift count.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "9ae5f823727d9d0a6be4bf71e9dfc8f591fd9254", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -409,7 +409,6 @@ enum reg_class\n    quickly between memory and registers or between two memory\n    locations.  */\n #define MOVE_MAX 4\n-#define TRULY_NOOP_TRUNCATION(op,ip) 1\n \n /* All load operations zero extend.  */\n #define LOAD_EXTEND_OP(MEM) ZERO_EXTEND\n@@ -418,8 +417,6 @@ enum reg_class\n    valid memory address.  */\n #define MAX_REGS_PER_ADDRESS 1\n \n-#define TRULY_NOOP_TRUNCATION(op,ip) 1\n-\n /* An alias for a machine mode name.  This is the machine mode that\n    elements of a jump-table should have.  */\n #define CASE_VECTOR_MODE SImode"}, {"sha": "5a997670700d4d420610238c2a3027b7f5f08f8b", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -204,8 +204,6 @@ extern const char * msp430_select_hwmult_lib (int, const char **);\n #define RETURN_ADDR_RTX(COUNT, FA)\t\t\\\n   msp430_return_addr_rtx (COUNT)\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)   1\n-\n #define SLOW_BYTE_ACCESS\t\t0\n \f\n "}, {"sha": "9106fe615a4e7d838539d23aaedcb44e8a4d8ea6", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -998,11 +998,6 @@ enum reg_class\n    of bits needed to represent the size of the object being shifted.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* A C expression which is nonzero if on this machine it is safe to \"convert\"\n-   an integer of 'inprec' bits to one of 'outprec' bits by merely operating\n-   on it as if it had only 'outprec' bits.  */\n-#define TRULY_NOOP_TRUNCATION(outprec, inprec) 1\n-\n /* A C expression describing the value returned by a comparison operator with\n    an integral mode and stored by a store-flag instruction ('cstoremode4')\n    when the condition is true.  */"}, {"sha": "d911b547baf1d262efc07918a176f96599c700d6", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -515,8 +515,6 @@ do {                                                                    \\\n \n #define CASE_VECTOR_MODE Pmode\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define LOAD_EXTEND_OP(MODE) (ZERO_EXTEND)\n \n #define WORD_REGISTER_OPERATIONS 1"}, {"sha": "d02e8541b6b5e35cf1eff700c6a5ffbfec6f9d9d", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -310,7 +310,6 @@ struct GTY(()) machine_function\n #define CASE_VECTOR_MODE SImode\n #define MOVE_MAX 8\n #define MOVE_RATIO(SPEED) 4\n-#define TRULY_NOOP_TRUNCATION(outprec, inprec) 1\n #define FUNCTION_MODE QImode\n #define HAS_INIT_SECTION 1\n "}, {"sha": "2edf0db76ef61628ad35de54819d8c864254536c", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1019,10 +1019,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "3c89327c9837566eec338ac5f19af929e088c5c7", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -432,10 +432,6 @@ extern int may_call_alloca;\n /* Do not break .stabs pseudos into continuations.  */\n #define DBX_CONTIN_LENGTH 0\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Give a comparison code (EQ, NE etc) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  For floating-point, CCFPmode\n    should be used.  */"}, {"sha": "52c0376edfaa08929a040ef0171c3eba84113336", "filename": "gcc/config/powerpcspe/powerpcspe.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -2108,10 +2108,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \f\n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* The cntlzw and cntlzd instructions return 32 and 64 for input of zero.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n   ((VALUE) = GET_MODE_BITSIZE (MODE), 2)"}, {"sha": "a04da2ce28b155ae8604ff4af810446a34a1a2c2", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -637,8 +637,6 @@ typedef struct {\n \n #define SHIFT_COUNT_TRUNCATED 1\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "fd9236c7c170c185484fd80fb8c47084989cecd6", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1307,7 +1307,8 @@\n    (set_attr \"mode\" \"HI\")])\n \n ;; HImode constant generation; see riscv_move_integer for details.\n-;; si+si->hi without truncation is legal because of TRULY_NOOP_TRUNCATION.\n+;; si+si->hi without truncation is legal because of\n+;; TARGET_TRULY_NOOP_TRUNCATION.\n \n (define_insn \"*add<mode>hi3\"\n   [(set (match_operand:HI            0 \"register_operand\" \"=r,r\")"}, {"sha": "30dfee89e6b1551f5af8c921f61f6b174e227899", "filename": "gcc/config/rl78/rl78.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Frl78%2Frl78.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Frl78%2Frl78.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -151,8 +151,6 @@\n #define MOVE_MAX \t\t\t2\n #define STARTING_FRAME_OFFSET\t\t0\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)   1\n-\n #define ADDR_SPACE_NEAR\t\t\t1\n #define ADDR_SPACE_FAR\t\t\t2\n "}, {"sha": "da2f4f5c08945949e1e58ae3d61751d4db969b3d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -2006,10 +2006,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \f\n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* The cntlzw and cntlzd instructions return 32 and 64 for input of zero.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n   ((VALUE) = GET_MODE_BITSIZE (MODE), 2)"}, {"sha": "4bc43c2ef5cca6348162522c9a4f32f5fffa3e00", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -171,8 +171,6 @@\n #define MOVE_MAX \t\t\t4\n #define STARTING_FRAME_OFFSET\t\t0\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)   1\n-\n #define HAVE_PRE_DECREMENT\t\t1\n #define HAVE_POST_INCREMENT\t\t1\n "}, {"sha": "00652da3792da2c2005e29fc246de9362ca9c0ab", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -963,10 +963,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    tablejump instruction.  */\n #define CASE_VECTOR_MODE (TARGET_64BIT ? DImode : SImode)\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)  1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "a18044d1ac83bee37e1e6eb28124585cf1cd3b00", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1430,8 +1430,6 @@ extern bool current_function_interrupt;\n #define MAYBE_BASE_REGISTER_RTX_P(X, STRICT)\t\t\t\\\n   ((REG_P (X) && REG_OK_FOR_BASE_P (X, STRICT))\t\\\n    || (GET_CODE (X) == SUBREG\t\t\t\t\t\\\n-       && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE ((X))),\t\\\n-\t\t\t\t GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (X)))) \\\n        && REG_P (SUBREG_REG (X))\t\t\t\\\n        && REG_OK_FOR_BASE_P (SUBREG_REG (X), STRICT)))\n \n@@ -1441,8 +1439,6 @@ extern bool current_function_interrupt;\n #define MAYBE_INDEX_REGISTER_RTX_P(X, STRICT)\t\t\t\t\\\n   ((REG_P (X) && REG_OK_FOR_INDEX_P (X, STRICT))\t\\\n    || (GET_CODE (X) == SUBREG\t\t\t\t\t\\\n-       && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE ((X))), \\\n-\t\t\t\t GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (X)))) \\\n        && REG_P (SUBREG_REG (X))\t\t\\\n        && SUBREG_OK_FOR_INDEX_P (SUBREG_REG (X), SUBREG_BYTE (X), STRICT)))\n \n@@ -1557,9 +1553,6 @@ extern bool current_function_interrupt;\n    more compact code.  */\n #define SHIFT_COUNT_TRUNCATED (0)\n \n-/* All integers have the same format so truncation is easy.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC,INPREC) (true)\n-\n /* Define this if addresses of constant functions\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive"}, {"sha": "946605d5936783698b040dd21ff212688e644a78", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1447,10 +1447,6 @@ do {\t\t\t\t\t\t\t\t\t   \\\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* For SImode, we make sure the top 32-bits of the register are clear and\n    then we subtract 32 from the lzd instruction result.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\"}, {"sha": "4ce227b7f9574fb600860d0e43574b09e5e1b613", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -7173,6 +7173,14 @@ spu_can_change_mode_class (machine_mode from, machine_mode to, reg_class_t)\n \t  || (GET_MODE_SIZE (from) <= 4 && GET_MODE_SIZE (to) <= 4)\n \t  || (GET_MODE_SIZE (from) >= 16 && GET_MODE_SIZE (to) >= 16));\n }\n+\n+/* Implement TARGET_TRULY_NOOP_TRUNCATION.  */\n+\n+static bool\n+spu_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n+{\n+  return inprec <= 32 && outprec <= inprec;\n+}\n \f\n /*  Table of machine attributes.  */\n static const struct attribute_spec spu_attribute_table[] =\n@@ -7407,6 +7415,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS spu_can_change_mode_class\n \n+#undef TARGET_TRULY_NOOP_TRUNCATION\n+#define TARGET_TRULY_NOOP_TRUNCATION spu_truly_noop_truncation\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-spu.h\""}, {"sha": "3e60e1949e1dda326e97e6e6d83b5ce1edad3985", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -487,8 +487,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define MOVE_MAX 16 \n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) ((INPREC) <= 32 && (OUTPREC) <= (INPREC))\n-\n #define STORE_FLAG_VALUE -1\n \n #define Pmode SImode"}, {"sha": "0f19686c9d80de3d3b2876b235d7d3b1a2f13e17", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -478,8 +478,6 @@ enum reg_class\n \n #define SHIFT_COUNT_TRUNCATED 1\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define Pmode HImode\n \n #define FUNCTION_MODE HImode"}, {"sha": "368821ed11a92069609971499252b97d8e1bfd21", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -5560,7 +5560,14 @@ tilegx_file_end (void)\n     file_end_indicate_exec_stack ();\n }\n \n+/* Implement TARGET_TRULY_NOOP_TRUNCATION.  We represent all SI values\n+   as sign-extended DI values in registers.  */\n \n+static bool\n+tilegx_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n+{\n+  return inprec <= 32 || outprec > 32;\n+}\n \n #undef  TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS HAVE_AS_TLS\n@@ -5724,6 +5731,9 @@ tilegx_file_end (void)\n #undef  TARGET_CAN_USE_DOLOOP_P\n #define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n \n+#undef  TARGET_TRULY_NOOP_TRUNCATION\n+#define TARGET_TRULY_NOOP_TRUNCATION tilegx_truly_noop_truncation\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-tilegx.h\""}, {"sha": "55fd89a4b86b2479074a44a83eeff49fdfed52f5", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -378,11 +378,6 @@ enum reg_class\n \n #define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n-/* We represent all SI values as sign-extended DI values in\n-   registers.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) \\\n-  ((INPREC) <= 32 || (OUTPREC) > 32)\n-\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 64, 1)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 64, 1)\n "}, {"sha": "f6188b2da9542cb606bc04bf1d590d9aaea473e5", "filename": "gcc/config/tilegx/tilegx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.md?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -2004,8 +2004,8 @@\n    ld2s_add\\t%0, %I1, %i1\"\n   [(set_attr \"type\" \"X0,Y2_2cycle,X1_2cycle\")])\n \n-;; All SImode integer registers should already be in sign-extended\n-;; form (see TRULY_NOOP_TRUNCATION and truncdisi2).  We can therefore\n+;; All SImode integer registers should already be in sign-extended form\n+;; (see TARGET_TRULY_NOOP_TRUNCATION and truncdisi2).  We can therefore\n ;; get rid of register->register instructions if we constrain the\n ;; source to be in the same register as the destination.\n (define_insn_and_split \"extendsidi2\"\n@@ -2028,7 +2028,7 @@\n ;; modes is a no-op, as it is for most other GCC ports.  Truncating\n ;; DImode values to SImode is not a no-op since we\n ;; need to make sure that the lower 32 bits are properly sign-extended\n-;; (see TRULY_NOOP_TRUNCATION).  Truncating DImode values into modes\n+;; (see TARGET_TRULY_NOOP_TRUNCATION).  Truncating DImode values into modes\n ;; smaller than SImode is equivalent to two separate truncations:\n ;;\n ;;                        A       B"}, {"sha": "325b2ed258f826f1de2cc6988fb7d4f5ec758dca", "filename": "gcc/config/tilepro/tilepro.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -337,8 +337,6 @@ enum reg_class\n \n #define SHORT_IMMEDIATES_SIGN_EXTEND 1\n \n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n "}, {"sha": "da096f708b40f09aba518a0f67e6f20e15432c81", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -766,10 +766,6 @@ typedef enum\n    of a shift count.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "04a865cfa643ce0ae4854be03993822c9c3e3f27", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -448,10 +448,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    of a shift count.  */\n /* #define SHIFT_COUNT_TRUNCATED */\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "4b086d32baadec823dcd36bb0164b8921c14eb9d", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1202,21 +1202,6 @@ do\t\t\t\t\t\t\t\t\t\\\n    bitfield instructions. */\n #define SHIFT_COUNT_TRUNCATED 0\n \n-/* `TRULY_NOOP_TRUNCATION (OUTPREC, INPREC)'\n-\n-   A C expression which is nonzero if on this machine it is safe to\n-   \"convert\" an integer of INPREC bits to one of OUTPREC bits (where\n-   OUTPREC is smaller than INPREC) by merely operating on it as if it\n-   had only OUTPREC bits.\n-\n-   On many machines, this expression can be 1.\n-\n-   When `TRULY_NOOP_TRUNCATION' returns 1 for a pair of sizes for\n-   modes for which `TARGET_MODES_TIEABLE_P' is 0, suboptimal code can result.\n-   If this is the case, making `TRULY_NOOP_TRUNCATION' return 0 in\n-   such cases may improve things. */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n /* `STORE_FLAG_VALUE'\n \n    A C expression describing the value returned by a comparison"}, {"sha": "74c5e52b95efc5946835963dc567e630be6a6c53", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -669,10 +669,6 @@ typedef struct xtensa_args\n /* Shift instructions ignore all but the low-order few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n-#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n-\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = -1, 1)\n "}, {"sha": "0045c12ed312e12413c74e82ad5772dfec9b04e0", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -873,7 +873,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t\tbreak;\n \n \t      if (outprec >= BITS_PER_WORD\n-\t\t  || TRULY_NOOP_TRUNCATION (outprec, inprec)\n+\t\t  || targetm.truly_noop_truncation (outprec, inprec)\n \t\t  || inprec > TYPE_PRECISION (TREE_TYPE (arg0))\n \t\t  || inprec > TYPE_PRECISION (TREE_TYPE (arg1)))\n \t\t{"}, {"sha": "6277e88b835b699ac10eb78f647ad9e3f2d82a6a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -10783,21 +10783,17 @@ nevertheless truncate the shift count, you may get better code\n by overriding it.\n @end deftypefn\n \n-@defmac TRULY_NOOP_TRUNCATION (@var{outprec}, @var{inprec})\n-A C expression which is nonzero if on this machine it is safe to\n-``convert'' an integer of @var{inprec} bits to one of @var{outprec}\n-bits (where @var{outprec} is smaller than @var{inprec}) by merely\n-operating on it as if it had only @var{outprec} bits.\n+@deftypefn {Target Hook} bool TARGET_TRULY_NOOP_TRUNCATION (unsigned int @var{outprec}, unsigned int @var{inprec})\n+This hook returns true if it is safe to ``convert'' a value of\n+@var{inprec} bits to one of @var{outprec} bits (where @var{outprec} is\n+smaller than @var{inprec}) by merely operating on it as if it had only\n+@var{outprec} bits.  The default returns true unconditionally, which\n+is correct for most machines.\n \n-On many machines, this expression can be 1.\n-\n-@c rearranged this, removed the phrase \"it is reported that\".  this was\n-@c to fix an overfull hbox.  --mew 10feb93\n-When @code{TRULY_NOOP_TRUNCATION} returns 1 for a pair of sizes for modes\n-for which @code{TARGET_MODES_TIEABLE_P} is false, suboptimal code can result.\n-If this is the case, making @code{TRULY_NOOP_TRUNCATION} return 0 in\n-such cases may improve things.\n-@end defmac\n+If @code{TARGET_MODES_TIEABLE_P} returns false for a pair of modes,\n+suboptimal code can result if this hook returns true for the corresponding\n+mode sizes.  Making this hook return false in such cases may improve things.\n+@end deftypefn\n \n @deftypefn {Target Hook} int TARGET_MODE_REP_EXTENDED (scalar_int_mode @var{mode}, scalar_int_mode @var{rep_mode})\n The representation of an integral mode can be such that the values\n@@ -10823,7 +10819,7 @@ to define @code{LOAD_EXTEND_OP (mode)} to return the same type of\n extension.\n \n In order to enforce the representation of @code{mode},\n-@code{TRULY_NOOP_TRUNCATION} should return false when truncating to\n+@code{TARGET_TRULY_NOOP_TRUNCATION} should return false when truncating to\n @code{mode}.\n @end deftypefn\n "}, {"sha": "c66f8cee51430885aea9c52031778c11739a04ae", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -7482,21 +7482,7 @@ You need not define this macro if it would always have the value of zero.\n @anchor{TARGET_SHIFT_TRUNCATION_MASK}\n @hook TARGET_SHIFT_TRUNCATION_MASK\n \n-@defmac TRULY_NOOP_TRUNCATION (@var{outprec}, @var{inprec})\n-A C expression which is nonzero if on this machine it is safe to\n-``convert'' an integer of @var{inprec} bits to one of @var{outprec}\n-bits (where @var{outprec} is smaller than @var{inprec}) by merely\n-operating on it as if it had only @var{outprec} bits.\n-\n-On many machines, this expression can be 1.\n-\n-@c rearranged this, removed the phrase \"it is reported that\".  this was\n-@c to fix an overfull hbox.  --mew 10feb93\n-When @code{TRULY_NOOP_TRUNCATION} returns 1 for a pair of sizes for modes\n-for which @code{TARGET_MODES_TIEABLE_P} is false, suboptimal code can result.\n-If this is the case, making @code{TRULY_NOOP_TRUNCATION} return 0 in\n-such cases may improve things.\n-@end defmac\n+@hook TARGET_TRULY_NOOP_TRUNCATION\n \n @hook TARGET_MODE_REP_EXTENDED\n "}, {"sha": "27f5ae45d27c8ada700aa35a52f9a5ef37699090", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -1854,7 +1854,7 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       && !reverse\n       /* ??? We could limit the structure size to the part of OP0 that\n \t contains the field, with appropriate checks for endianness\n-\t and TRULY_NOOP_TRUNCATION.  */\n+\t and TARGET_TRULY_NOOP_TRUNCATION.  */\n       && get_best_reg_extraction_insn (&extv, pattern,\n \t\t\t\t       GET_MODE_BITSIZE (op0_mode.require ()),\n \t\t\t\t       tmode))\n@@ -2233,7 +2233,7 @@ extract_split_bit_field (rtx op0, opt_scalar_int_mode op0_mode,\n        a zero extension\n \n      - when MODE is smaller than SRC_MODE, the extraction involves\n-       a truncation (and is thus subject to TRULY_NOOP_TRUNCATION).\n+       a truncation (and is thus subject to TARGET_TRULY_NOOP_TRUNCATION).\n \n    In other words, this routine performs a computation, whereas the\n    gen_lowpart* routines are conceptually lvalue or rvalue subreg"}, {"sha": "41878a974be0fa8117eb7dba41a75d2f5a29669d", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -2997,7 +2997,8 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n \t\t to the value directly in mode MODE, otherwise we must\n \t\t start with the register in word_mode and explicitly\n \t\t convert it.  */\n-\t      if (TRULY_NOOP_TRUNCATION (size * BITS_PER_UNIT, BITS_PER_WORD))\n+\t      if (targetm.truly_noop_truncation (size * BITS_PER_UNIT,\n+\t\t\t\t\t\t BITS_PER_WORD))\n \t\treg = gen_rtx_REG (mode, REGNO (entry_parm));\n \t      else\n \t\t{"}, {"sha": "d383926c32933c335bdc392cfe06fe69335b423d", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -133,6 +133,13 @@ hook_bool_mode_uhwi_false (machine_mode, unsigned HOST_WIDE_INT)\n   return false;\n }\n \n+/* Generic hook that takes (unsigned int, unsigned int) and returns true.  */\n+bool\n+hook_bool_uint_uint_true (unsigned int, unsigned int)\n+{\n+  return true;\n+}\n+\n /* Generic hook that takes (unsigned int, machine_mode) and returns false.  */\n bool\n hook_bool_uint_mode_false (unsigned int, machine_mode)"}, {"sha": "711d0e2bf0c75ff34b2d4625fba7f0720b42724d", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -39,6 +39,7 @@ extern bool hook_bool_const_rtx_insn_const_rtx_insn_true (const rtx_insn *,\n \t\t\t\t\t\t\t  const rtx_insn *);\n extern bool hook_bool_mode_uhwi_false (machine_mode,\n \t\t\t\t       unsigned HOST_WIDE_INT);\n+extern bool hook_bool_uint_uint_true (unsigned int, unsigned int);\n extern bool hook_bool_uint_mode_false (unsigned int, machine_mode);\n extern bool hook_bool_uint_mode_true (unsigned int, machine_mode);\n extern bool hook_bool_tree_false (tree);"}, {"sha": "6667458ccbcdd7f7299202c040af1e65e1d8c5bb", "filename": "gcc/machmode.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -781,8 +781,8 @@ extern scalar_int_mode ptr_mode;\n extern void init_adjust_machine_modes (void);\n \n #define TRULY_NOOP_TRUNCATION_MODES_P(MODE1, MODE2) \\\n-  TRULY_NOOP_TRUNCATION (GET_MODE_PRECISION (MODE1), \\\n-\t\t\t GET_MODE_PRECISION (MODE2))\n+  (targetm.truly_noop_truncation (GET_MODE_PRECISION (MODE1), \\\n+\t\t\t\t  GET_MODE_PRECISION (MODE2)))\n \n #define HWI_COMPUTABLE_MODE_P(MODE) \\\n   (SCALAR_INT_MODE_P (MODE) \\"}, {"sha": "4d04ebd0c4716a7e7610448bb55ed39db02e8b02", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"rtlhooks-def.h\"\n #include \"explow.h\"\n+#include \"target.h\"\n \f\n \n /* For speed, we will copy the RTX hooks struct member-by-member"}, {"sha": "974d85c4cee6e3db97c80ce4825c01aa93a2aa98", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -914,7 +914,8 @@ extern void fancy_abort (const char *, int, const char *)\n \tHARD_REGNO_CALL_PART_CLOBBERED HARD_REGNO_MODE_OK\t\t\\\n \tMODES_TIEABLE_P FUNCTION_ARG_PADDING SLOW_UNALIGNED_ACCESS\t\\\n \tHARD_REGNO_NREGS SECONDARY_MEMORY_NEEDED_MODE\t\t\t\\\n-\tSECONDARY_MEMORY_NEEDED CANNOT_CHANGE_MODE_CLASS\n+\tSECONDARY_MEMORY_NEEDED CANNOT_CHANGE_MODE_CLASS\t\t\\\n+\tTRULY_NOOP_TRUNCATION\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}, {"sha": "885973be4e23c728da887c463446d71f1148b3a3", "filename": "gcc/target.def", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb149ca2e912038dce733f95ab1c24ff0d1af280/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=bb149ca2e912038dce733f95ab1c24ff0d1af280", "patch": "@@ -3130,6 +3130,20 @@ has an instruction for the division, and 2 if it does not.\",\n  unsigned int, (machine_mode mode),\n  default_min_divisions_for_recip_mul)\n \n+DEFHOOK\n+(truly_noop_truncation,\n+ \"This hook returns true if it is safe to ``convert'' a value of\\n\\\n+@var{inprec} bits to one of @var{outprec} bits (where @var{outprec} is\\n\\\n+smaller than @var{inprec}) by merely operating on it as if it had only\\n\\\n+@var{outprec} bits.  The default returns true unconditionally, which\\n\\\n+is correct for most machines.\\n\\\n+\\n\\\n+If @code{TARGET_MODES_TIEABLE_P} returns false for a pair of modes,\\n\\\n+suboptimal code can result if this hook returns true for the corresponding\\n\\\n+mode sizes.  Making this hook return false in such cases may improve things.\",\n+ bool, (unsigned int outprec, unsigned int inprec),\n+ hook_bool_uint_uint_true)\n+\n /* If the representation of integral MODE is such that values are\n    always sign-extended to a wider mode MODE_REP then return\n    SIGN_EXTEND.  Return UNKNOWN otherwise.  */\n@@ -3160,7 +3174,7 @@ to define @code{LOAD_EXTEND_OP (mode)} to return the same type of\\n\\\n extension.\\n\\\n \\n\\\n In order to enforce the representation of @code{mode},\\n\\\n-@code{TRULY_NOOP_TRUNCATION} should return false when truncating to\\n\\\n+@code{TARGET_TRULY_NOOP_TRUNCATION} should return false when truncating to\\n\\\n @code{mode}.\",\n  int, (scalar_int_mode mode, scalar_int_mode rep_mode),\n  default_mode_rep_extended)"}]}