{"sha": "75eccddef5784bc5e262af31f535267a9c4e993e", "node_id": "C_kwDOANBUbNoAKDc1ZWNjZGRlZjU3ODRiYzVlMjYyYWYzMWY1MzUyNjdhOWM0ZTk5M2U", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2023-03-02T10:05:23Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2023-03-06T07:56:02Z"}, "message": "LoongArch: Stop -mfpu from silently breaking ABI [PR109000]\n\nIn the toolchain convention, we describe -mfpu= as:\n\n\"Selects the allowed set of basic floating-point instructions and\nregisters. This option should not change the FP calling convention\nunless it's necessary.\"\n\nThough not explicitly stated, the rationale of this rule is to allow\ncombinations like \"-mabi=lp64s -mfpu=64\".  This will be useful for\nrunning applications with LP64S/F ABI on a double-float-capable\nLoongArch hardware and using a math library with LP64S/F ABI but native\ndouble float HW instructions, for a better performance.\n\nAnd now a case in Linux kernel has again proven the usefulness of this\nkind of combination.  The AMDGPU DCN kernel driver needs to perform some\nfloating-point operation, but the entire kernel uses LP64S ABI.  So the\ntranslation units of the AMDGPU DCN driver need to be compiled with\n-mfpu=64 (the kernel lacks soft-FP routines in libgcc), but -mabi=lp64s\n(or you can't link it with the other part of the kernel).\n\nUnfortunately, currently GCC uses TARGET_{HARD,SOFT,DOUBLE}_FLOAT to\ndetermine the floating calling convention.  This causes \"-mfpu=64\"\nsilently allow using $fa* to pass parameters and return values EVEN IF\n-mabi=lp64s is used.  To make things worse, the generated object file\nhas SOFT-FLOAT set in the eflags field so the linker will happily link\nit with other LP64S ABI object files, but obviously this will lead to\nbad results at runtime.  And for now all loongarch64 CPU models (-march\nsettings) implies -mfpu=64 on by default, so the issue makes a single\n\"-mabi=lp64s\" option basically broken (fortunately most projects for eg\nthe Linux kernel have used -msoft-float which implies both -mabi=lp64s\nand -mfpu=none as we've recommended in the toolchain convention doc).\n\nThe fix is simple: use TARGET_*_FLOAT_ABI instead.\n\nI consider this a bug fix: the behavior difference from the toolchain\nconvention doc is a bug, and generating object files with SOFT-FLOAT\nflag but parameters/return values passed through FPRs is definitely a\nbug.\n\nBootstrapped and regtested on loongarch64-linux-gnu.  Ok for trunk and\nrelease/gcc-12 branch?\n\ngcc/ChangeLog:\n\n\tPR target/109000\n\t* config/loongarch/loongarch.h (FP_RETURN): Use\n\tTARGET_*_FLOAT_ABI instead of TARGET_*_FLOAT.\n\t(UNITS_PER_FP_ARG): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109000\n\t* gcc.target/loongarch/flt-abi-isa-1.c: New test.\n\t* gcc.target/loongarch/flt-abi-isa-2.c: New test.\n\t* gcc.target/loongarch/flt-abi-isa-3.c: New test.\n\t* gcc.target/loongarch/flt-abi-isa-4.c: New test.", "tree": {"sha": "da2f30fe41fed14c187fe14aa86be26e101ba795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da2f30fe41fed14c187fe14aa86be26e101ba795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75eccddef5784bc5e262af31f535267a9c4e993e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCZAWckgAKCRCsqtIOGecQ\n4+M2APwMbGEuBwI2q3Qa4NRr5HMTAbHEQoI1ZgpxXKKUOZWO6QEAi2UtK0ZjVtYZ\n8A69SoD/o2Osuoy+CNBq1VXtbVZ2PAo=\n=2zNQ\n-----END PGP SIGNATURE-----", "payload": "tree da2f30fe41fed14c187fe14aa86be26e101ba795\nparent c5e77e98af16d5a28a01f18d096665fd3d388994\nauthor Xi Ruoyao <xry111@xry111.site> 1677751523 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1678089362 +0800\n\nLoongArch: Stop -mfpu from silently breaking ABI [PR109000]\n\nIn the toolchain convention, we describe -mfpu= as:\n\n\"Selects the allowed set of basic floating-point instructions and\nregisters. This option should not change the FP calling convention\nunless it's necessary.\"\n\nThough not explicitly stated, the rationale of this rule is to allow\ncombinations like \"-mabi=lp64s -mfpu=64\".  This will be useful for\nrunning applications with LP64S/F ABI on a double-float-capable\nLoongArch hardware and using a math library with LP64S/F ABI but native\ndouble float HW instructions, for a better performance.\n\nAnd now a case in Linux kernel has again proven the usefulness of this\nkind of combination.  The AMDGPU DCN kernel driver needs to perform some\nfloating-point operation, but the entire kernel uses LP64S ABI.  So the\ntranslation units of the AMDGPU DCN driver need to be compiled with\n-mfpu=64 (the kernel lacks soft-FP routines in libgcc), but -mabi=lp64s\n(or you can't link it with the other part of the kernel).\n\nUnfortunately, currently GCC uses TARGET_{HARD,SOFT,DOUBLE}_FLOAT to\ndetermine the floating calling convention.  This causes \"-mfpu=64\"\nsilently allow using $fa* to pass parameters and return values EVEN IF\n-mabi=lp64s is used.  To make things worse, the generated object file\nhas SOFT-FLOAT set in the eflags field so the linker will happily link\nit with other LP64S ABI object files, but obviously this will lead to\nbad results at runtime.  And for now all loongarch64 CPU models (-march\nsettings) implies -mfpu=64 on by default, so the issue makes a single\n\"-mabi=lp64s\" option basically broken (fortunately most projects for eg\nthe Linux kernel have used -msoft-float which implies both -mabi=lp64s\nand -mfpu=none as we've recommended in the toolchain convention doc).\n\nThe fix is simple: use TARGET_*_FLOAT_ABI instead.\n\nI consider this a bug fix: the behavior difference from the toolchain\nconvention doc is a bug, and generating object files with SOFT-FLOAT\nflag but parameters/return values passed through FPRs is definitely a\nbug.\n\nBootstrapped and regtested on loongarch64-linux-gnu.  Ok for trunk and\nrelease/gcc-12 branch?\n\ngcc/ChangeLog:\n\n\tPR target/109000\n\t* config/loongarch/loongarch.h (FP_RETURN): Use\n\tTARGET_*_FLOAT_ABI instead of TARGET_*_FLOAT.\n\t(UNITS_PER_FP_ARG): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109000\n\t* gcc.target/loongarch/flt-abi-isa-1.c: New test.\n\t* gcc.target/loongarch/flt-abi-isa-2.c: New test.\n\t* gcc.target/loongarch/flt-abi-isa-3.c: New test.\n\t* gcc.target/loongarch/flt-abi-isa-4.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eccddef5784bc5e262af31f535267a9c4e993e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75eccddef5784bc5e262af31f535267a9c4e993e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eccddef5784bc5e262af31f535267a9c4e993e/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e77e98af16d5a28a01f18d096665fd3d388994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e77e98af16d5a28a01f18d096665fd3d388994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e77e98af16d5a28a01f18d096665fd3d388994"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "f81678756465adfd719fd049bb37bf07a40cbda3", "filename": "gcc/config/loongarch/loongarch.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Fconfig%2Floongarch%2Floongarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Fconfig%2Floongarch%2Floongarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.h?ref=75eccddef5784bc5e262af31f535267a9c4e993e", "patch": "@@ -676,7 +676,7 @@ enum reg_class\n    point values.  */\n \n #define GP_RETURN (GP_REG_FIRST + 4)\n-#define FP_RETURN ((TARGET_SOFT_FLOAT) ? GP_RETURN : (FP_REG_FIRST + 0))\n+#define FP_RETURN ((TARGET_SOFT_FLOAT_ABI) ? GP_RETURN : (FP_REG_FIRST + 0))\n \n #define MAX_ARGS_IN_REGISTERS 8\n \n@@ -1154,6 +1154,6 @@ struct GTY (()) machine_function\n /* The largest type that can be passed in floating-point registers.  */\n /* TODO: according to mabi.  */\n #define UNITS_PER_FP_ARG  \\\n-  (TARGET_HARD_FLOAT ? (TARGET_DOUBLE_FLOAT ? 8 : 4) : 0)\n+  (TARGET_HARD_FLOAT_ABI ? (TARGET_DOUBLE_FLOAT_ABI ? 8 : 4) : 0)\n \n #define FUNCTION_VALUE_REGNO_P(N) ((N) == GP_RETURN || (N) == FP_RETURN)"}, {"sha": "1c9490f6a8781b56828494a5d3f98354cb148612", "filename": "gcc/testsuite/gcc.target/loongarch/flt-abi-isa-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-1.c?ref=75eccddef5784bc5e262af31f535267a9c4e993e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -mfpu=64 -march=loongarch64 -O2\" } */\n+/* { dg-final { scan-assembler \"frecip\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"movgr2fr\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"movfr2gr\\\\.d\" } } */\n+\n+/* FPU is used for calculation and FPR is used for arguments and return\n+   values.  */\n+\n+double\n+t (double x)\n+{\n+  return 1.0 / x;\n+}"}, {"sha": "0580fd65d3a77181c362a072c38c6a5b53a034cf", "filename": "gcc/testsuite/gcc.target/loongarch/flt-abi-isa-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-2.c?ref=75eccddef5784bc5e262af31f535267a9c4e993e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64s -mfpu=64 -march=loongarch64 -O2\" } */\n+/* { dg-final { scan-assembler \"frecip\\\\.d\" } } */\n+/* { dg-final { scan-assembler \"movgr2fr\\\\.d\" } } */\n+/* { dg-final { scan-assembler \"movfr2gr\\\\.d\" } } */\n+\n+/* FPU is used for calculation but FPR cannot be used for arguments and\n+   return values.  */\n+\n+#include \"flt-abi-isa-1.c\""}, {"sha": "16a926f57a1f36f839b03e0311f5f0dcc0fd15e2", "filename": "gcc/testsuite/gcc.target/loongarch/flt-abi-isa-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-3.c?ref=75eccddef5784bc5e262af31f535267a9c4e993e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64s -mfpu=none -march=loongarch64 -O2\" } */\n+/* { dg-final { scan-assembler-not \"frecip\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"movgr2fr\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"movfr2gr\\\\.d\" } } */\n+\n+/* FPU cannot be used at all.  */\n+\n+#include \"flt-abi-isa-1.c\""}, {"sha": "43b579c3fac27d474af5c24fc9b5ea44718ba28c", "filename": "gcc/testsuite/gcc.target/loongarch/flt-abi-isa-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eccddef5784bc5e262af31f535267a9c4e993e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflt-abi-isa-4.c?ref=75eccddef5784bc5e262af31f535267a9c4e993e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msoft-float -march=loongarch64 -O2\" } */\n+/* { dg-final { scan-assembler-not \"frecip\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"movgr2fr\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"movfr2gr\\\\.d\" } } */\n+\n+/* -msoft-float implies both -mabi=lp64s and -mfpu=none.\n+   FPU cannot be used at all.  */\n+\n+#include \"flt-abi-isa-1.c\""}]}