{"sha": "303bd2a8428b75f2467578a933e729d5672789d1", "node_id": "C_kwDOANBUbNoAKDMwM2JkMmE4NDI4Yjc1ZjI0Njc1NzhhOTMzZTcyOWQ1NjcyNzg5ZDE", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-12-17T16:45:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-11T13:24:47Z"}, "message": "[Ada] Proof of unit System.Case_Util\n\ngcc/ada/\n\n\t* libgnat/s-casuti.adb: Add ghost code.\n\t* libgnat/s-casuti.ads: Add contracts.", "tree": {"sha": "f4e378f0f951bcd147a443e5569c73b95ba96922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4e378f0f951bcd147a443e5569c73b95ba96922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/303bd2a8428b75f2467578a933e729d5672789d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303bd2a8428b75f2467578a933e729d5672789d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303bd2a8428b75f2467578a933e729d5672789d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303bd2a8428b75f2467578a933e729d5672789d1/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649b3efae598aaf855b8cc453749695dded9fa95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649b3efae598aaf855b8cc453749695dded9fa95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649b3efae598aaf855b8cc453749695dded9fa95"}], "stats": {"total": 115, "additions": 104, "deletions": 11}, "files": [{"sha": "01693e065dd4c279f284318b5733db723555c7c8", "filename": "gcc/ada/libgnat/s-casuti.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303bd2a8428b75f2467578a933e729d5672789d1/gcc%2Fada%2Flibgnat%2Fs-casuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303bd2a8428b75f2467578a933e729d5672789d1/gcc%2Fada%2Flibgnat%2Fs-casuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-casuti.adb?ref=303bd2a8428b75f2467578a933e729d5672789d1", "patch": "@@ -29,8 +29,17 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body System.Case_Util is\n+--  Ghost code, loop invariants and assertions in this unit are meant for\n+--  analysis only, not for run-time checking, as it would be too costly\n+--  otherwise. This is enforced by setting the assertion policy to Ignore.\n \n+pragma Assertion_Policy (Ghost          => Ignore,\n+                         Loop_Invariant => Ignore,\n+                         Assert         => Ignore);\n+\n+package body System.Case_Util\n+  with SPARK_Mode\n+is\n    --------------\n    -- To_Lower --\n    --------------\n@@ -53,6 +62,9 @@ package body System.Case_Util is\n    begin\n       for J in A'Range loop\n          A (J) := To_Lower (A (J));\n+\n+         pragma Loop_Invariant\n+           (for all K in A'First .. J => A (K) = To_Lower (A'Loop_Entry (K)));\n       end loop;\n    end To_Lower;\n \n@@ -78,6 +90,15 @@ package body System.Case_Util is\n             A (J) := To_Lower (A (J));\n          end if;\n \n+         pragma Loop_Invariant\n+           (for all K in A'First .. J =>\n+              (if K = A'First\n+                 or else A'Loop_Entry (K - 1) = '_'\n+               then\n+                 A (K) = To_Upper (A'Loop_Entry (K))\n+               else\n+                 A (K) = To_Lower (A'Loop_Entry (K))));\n+\n          Ucase := A (J) = '_';\n       end loop;\n    end To_Mixed;\n@@ -111,6 +132,9 @@ package body System.Case_Util is\n    begin\n       for J in A'Range loop\n          A (J) := To_Upper (A (J));\n+\n+         pragma Loop_Invariant\n+           (for all K in A'First .. J => A (K) = To_Upper (A'Loop_Entry (K)));\n       end loop;\n    end To_Upper;\n "}, {"sha": "1ebc428645b1be2cdae717301a991c03cc8dda8d", "filename": "gcc/ada/libgnat/s-casuti.ads", "status": "modified", "additions": 79, "deletions": 10, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/303bd2a8428b75f2467578a933e729d5672789d1/gcc%2Fada%2Flibgnat%2Fs-casuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/303bd2a8428b75f2467578a933e729d5672789d1/gcc%2Fada%2Flibgnat%2Fs-casuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-casuti.ads?ref=303bd2a8428b75f2467578a933e729d5672789d1", "patch": "@@ -34,29 +34,98 @@\n --  This package provides simple casing functions that do not require the\n --  overhead of the full casing tables found in Ada.Characters.Handling.\n \n-package System.Case_Util is\n-   pragma Pure;\n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n \n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n+package System.Case_Util\n+  with Pure, SPARK_Mode\n+is\n    --  Note: all the following functions handle the full Latin-1 set\n \n-   function To_Upper (A : Character) return Character;\n+   function To_Upper (A : Character) return Character\n+   with\n+     Post => (declare\n+                A_Val : constant Natural := Character'Pos (A);\n+              begin\n+                (if A in 'a' .. 'z'\n+                   or else A_Val in 16#E0# .. 16#F6#\n+                   or else A_Val in 16#F8# .. 16#FE#\n+                 then\n+                   To_Upper'Result = Character'Val (A_Val - 16#20#)\n+                 else\n+                   To_Upper'Result = A));\n    --  Converts A to upper case if it is a lower case letter, otherwise\n    --  returns the input argument unchanged.\n \n-   procedure To_Upper (A : in out String);\n-   function To_Upper (A : String) return String;\n+   procedure To_Upper (A : in out String)\n+   with\n+     Post => (for all J in A'Range => A (J) = To_Upper (A'Old (J)));\n+\n+   function To_Upper (A : String) return String\n+   with\n+     Post => To_Upper'Result'First = A'First\n+       and then To_Upper'Result'Last = A'Last\n+       and then (for all J in A'Range =>\n+                   To_Upper'Result (J) = To_Upper (A (J)));\n    --  Folds all characters of string A to upper case\n \n-   function To_Lower (A : Character) return Character;\n+   function To_Lower (A : Character) return Character\n+   with\n+     Post => (declare\n+                A_Val : constant Natural := Character'Pos (A);\n+              begin\n+                (if A in 'A' .. 'Z'\n+                   or else A_Val in 16#C0# .. 16#D6#\n+                   or else A_Val in 16#D8# .. 16#DE#\n+                 then\n+                   To_Lower'Result = Character'Val (A_Val + 16#20#)\n+                 else\n+                   To_Lower'Result = A));\n    --  Converts A to lower case if it is an upper case letter, otherwise\n    --  returns the input argument unchanged.\n \n-   procedure To_Lower (A : in out String);\n-   function To_Lower (A : String) return String;\n+   procedure To_Lower (A : in out String)\n+   with\n+     Post => (for all J in A'Range => A (J) = To_Lower (A'Old (J)));\n+\n+   function To_Lower (A : String) return String\n+   with\n+     Post => To_Lower'Result'First = A'First\n+       and then To_Lower'Result'Last = A'Last\n+       and then (for all J in A'Range =>\n+                   To_Lower'Result (J) = To_Lower (A (J)));\n    --  Folds all characters of string A to lower case\n \n-   procedure To_Mixed (A : in out String);\n-   function To_Mixed (A : String) return String;\n+   procedure To_Mixed (A : in out String)\n+   with\n+     Post =>\n+       (for all J in A'Range =>\n+          (if J = A'First\n+             or else A'Old (J - 1) = '_'\n+           then\n+             A (J) = To_Upper (A'Old (J))\n+           else\n+             A (J) = To_Lower (A'Old (J))));\n+\n+   function To_Mixed (A : String) return String\n+   with\n+     Post => To_Mixed'Result'First = A'First\n+       and then To_Mixed'Result'Last = A'Last\n+       and then (for all J in A'Range =>\n+                   (if J = A'First\n+                      or else A (J - 1) = '_'\n+                    then\n+                      To_Mixed'Result (J) = To_Upper (A (J))\n+                    else\n+                      To_Mixed'Result (J) = To_Lower (A (J))));\n    --  Converts A to mixed case (i.e. lower case, except for initial\n    --  character and any character after an underscore, which are\n    --  converted to upper case."}]}