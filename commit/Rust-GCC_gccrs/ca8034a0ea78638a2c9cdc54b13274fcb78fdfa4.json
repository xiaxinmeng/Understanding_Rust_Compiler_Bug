{"sha": "ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4MDM0YTBlYTc4NjM4YTJjOWNkYzU0YjEzMjc0ZmNiNzhmZGZhNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-12-03T03:34:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-12-03T03:34:03Z"}, "message": "builtins.c (expand_builtin_strcmp): Use const*_rtx when expanding strcmp at compile-time.\n\n\t* builtins.c (expand_builtin_strcmp): Use const*_rtx when\n\texpanding strcmp at compile-time.  Add another transformation.\n\t(expand_builtin_strncmp): Add more transformations.  Call\n\texpand_builtin_memcmp, not expand_builtin_strcmp, under\n\tappropriate conditions if HAVE_cmpstrsi.\n\ntestsuite:\n\tgcc.c-torture/execute/string-opt-3.c: Add more strcmp checks.\n\tgcc.c-torture/execute/string-opt-8.c: Add more strncmp checks.\n\nFrom-SVN: r37963", "tree": {"sha": "a7bb3902b985bd7b9ac739d038afd6ef0f0f25a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7bb3902b985bd7b9ac739d038afd6ef0f0f25a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/comments", "author": null, "committer": null, "parents": [{"sha": "6c873122ce204fca1fdefa763661147ae239544d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c873122ce204fca1fdefa763661147ae239544d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c873122ce204fca1fdefa763661147ae239544d"}], "stats": {"total": 210, "additions": 186, "deletions": 24}, "files": [{"sha": "f6383eb68b805233c964ff4e6bba48b11a4e226c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "patch": "@@ -1,3 +1,11 @@\n+2000-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strcmp): Use const*_rtx when\n+\texpanding strcmp at compile-time.  Add another transformation.\n+\t(expand_builtin_strncmp): Add more transformations.  Call\n+\texpand_builtin_memcmp, not expand_builtin_strcmp, under\n+\tappropriate conditions if HAVE_cmpstrsi.\n+\n 2000-12-02  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000.md (anddi3_internal[23]): Prefer rldic? over andis"}, {"sha": "0ed47078799d63bd9def84790970650b70938fff", "filename": "gcc/builtins.c", "status": "modified", "additions": 64, "deletions": 24, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "patch": "@@ -2244,14 +2244,28 @@ expand_builtin_strcmp (exp, target, mode)\n \n   if (p1 && p2)\n     {\n-      int i = strcmp (p1, p2);\n-\n-      return expand_expr (i < 0 ? build_int_2 (-1, -1)\n-\t\t\t\t: i == 0 ? integer_zero_node\n-\t\t\t\t\t : integer_one_node,\n-\t\t\t  target, mode, EXPAND_NORMAL);\n+      const int i = strcmp (p1, p2);\n+      return (i < 0 ? constm1_rtx : (i > 0 ? const1_rtx : const0_rtx));\n     }\n \n+  /* If either arg is \"\", return an expression corresponding to\n+     (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */\n+  if ((p1 && *p1 == '\\0') || (p2 && *p2 == '\\0'))\n+    {\n+      tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n+      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree ind1 =\n+\tfold (build1 (CONVERT_EXPR, integer_type_node,\n+\t\t      build1 (INDIRECT_REF, cst_uchar_node,\n+\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg1))));\n+      tree ind2 =\n+\tfold (build1 (CONVERT_EXPR, integer_type_node,\n+\t\t      build1 (INDIRECT_REF, cst_uchar_node,\n+\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg2))));\n+      tree result = fold (build (MINUS_EXPR, integer_type_node, ind1, ind2));\n+      return expand_expr (result, target, mode, EXPAND_NORMAL);\n+    }\n+  \n #ifdef HAVE_cmpstrsi\n   if (! HAVE_cmpstrsi)\n     return 0;\n@@ -2360,25 +2374,51 @@ expand_builtin_strncmp (exp, target, mode)\n     return (r < 0 ? constm1_rtx : (r > 0 ? const1_rtx : const0_rtx));\n   }\n \n-  /* If either string parameter is constant and its strlen is strictly\n-     less than the length parameter, call expand_builtin_strcmp().  */\n-  if ((p1 && compare_tree_int (arg3, strlen (p1)) > 0)\n-      || (p2 && compare_tree_int (arg3, strlen (p2)) > 0))\n-  {\n-    tree newarglist =\n-      tree_cons (NULL_TREE, arg1, build_tree_list (NULL_TREE, arg2));\n-    rtx result;\n+  /* If len == 1 or (either string parameter is \"\" and (len >= 1)),\n+      return (*(u_char*)arg1 - *(u_char*)arg2).  */\n+  if (compare_tree_int (arg3, 1) == 0\n+      || (compare_tree_int (arg3, 1) > 0\n+\t  && ((p1 && *p1 == '\\0') || (p2 && *p2 == '\\0'))))\n+    {\n+      tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n+      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree ind1 =\n+\tfold (build1 (CONVERT_EXPR, integer_type_node,\n+\t\t      build1 (INDIRECT_REF, cst_uchar_node,\n+\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg1))));\n+      tree ind2 =\n+\tfold (build1 (CONVERT_EXPR, integer_type_node,\n+\t\t      build1 (INDIRECT_REF, cst_uchar_node,\n+\t\t\t      build1 (NOP_EXPR, cst_uchar_ptr_node, arg2))));\n+      tree result = fold (build (MINUS_EXPR, integer_type_node, ind1, ind2));\n+      return expand_expr (result, target, mode, EXPAND_NORMAL);\n+    }\n \n-    /* Call expand_builtin_strcmp with the modified newarglist.  If\n-       the expansion does not occur, do not allow strncmp to expand to\n-       strcmp since strcmp requires that both strings be NULL\n-       terminated whereas strncmp does not.  */\n-    TREE_OPERAND (exp, 1) = newarglist;\n-    result = expand_builtin_strcmp (exp, target, mode);\n-    /* Always restore the original arguments.  */\n-    TREE_OPERAND (exp, 1) = arglist;\n-    return result;\n-  }\n+#ifdef HAVE_cmpstrsi\n+  /* If the length parameter is constant (checked above) and either\n+     string parameter is constant, call expand_builtin_memcmp() using\n+     a length parameter equal to the lesser of the given length and\n+     the strlen+1 of the constant string.  */\n+  if (HAVE_cmpstrsi && (p1 || p2))\n+    {\n+      /* Exactly one of the strings is constant at this point, because\n+\t if both were then we'd have expanded this at compile-time.  */\n+      tree string_len = p1 ? c_strlen (arg1) : c_strlen (arg2);\n+\n+      string_len = size_binop (PLUS_EXPR, string_len, ssize_int (1));\n+      \n+      if (tree_int_cst_lt (string_len, arg3))\n+        {\n+\t  /* The strlen+1 is strictly shorter, use it.  */\n+\t  tree newarglist = build_tree_list (NULL_TREE, string_len);\n+\t  newarglist = tree_cons (NULL_TREE, arg2, newarglist);\n+\t  newarglist = tree_cons (NULL_TREE, arg1, newarglist);\n+\t  return expand_builtin_memcmp (exp, newarglist, target);\n+\t}\n+      else\n+\treturn expand_builtin_memcmp (exp, arglist, target);\n+    }\n+#endif\n   \n   return 0;\n }"}, {"sha": "073697d4faf8fd963a8fb48a6f4f76bb433bde07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "patch": "@@ -1,3 +1,8 @@\n+2000-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tgcc.c-torture/execute/string-opt-3.c: Add more strcmp checks.\n+\tgcc.c-torture/execute/string-opt-8.c: Add more strncmp checks.\n+\n 2000-12-02  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* gcc.dg/cpp/if-6.c: New testcase."}, {"sha": "5f273996d9bab0eebd780973d0404ad50e548b3f", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-3.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-3.c?ref=ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "patch": "@@ -37,6 +37,18 @@ int main()\n     abort ();\n   if (strcmp (10 + foo, \"dx\") >= 0)\n     abort ();\n+  if (strcmp (bar, \"\") <= 0)\n+    abort ();\n+  if (strcmp (\"\", bar) >= 0)\n+    abort ();\n+  if (strcmp (bar+8, \"\") != 0)\n+    abort ();\n+  if (strcmp (\"\", bar+8) != 0)\n+    abort ();\n+  if (strcmp (bar+(--x), \"\") <= 0 || x != 6)\n+    abort ();\n+  if (strcmp (\"\", bar+(++x)) >= 0 || x != 7)\n+    abort ();\n   if (strrchr (foo, 'x'))\n     abort ();\n   if (strrchr (foo, 'o') != foo + 7)"}, {"sha": "4c3c0d44eed3d0e2e48d9f95f681cc5a1aefabb5", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-8.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c?ref=ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "patch": "@@ -44,6 +44,103 @@ int main ()\n   s2 = s1; s3 = s1+4;\n   if (strncmp (++s2, ++s3, 0) != 0 || s2 != s1+1 || s3 != s1+5)\n     abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"\", 1) <= 0 || s2 != s1+1)\n+    abort();\n+  if (strncmp (\"\", ++s2, 1) >= 0 || s2 != s1+2)\n+    abort();\n+  if (strncmp (++s2, \"\", 100) <= 0 || s2 != s1+3)\n+    abort();\n+  if (strncmp (\"\", ++s2, 100) >= 0 || s2 != s1+4)\n+    abort();\n+  if (strncmp (++s2+6, \"\", 100) != 0 || s2 != s1+5)\n+    abort();\n+  if (strncmp (\"\", ++s2+5, 100) != 0 || s2 != s1+6)\n+    abort();\n+  if (strncmp (\"ozz\", ++s2, 1) != 0 || s2 != s1+7)\n+    abort();\n+  if (strncmp (++s2, \"rzz\", 1) != 0 || s2 != s1+8)\n+    abort();\n+  s2 = s1; s3 = s1+4;\n+  if (strncmp (++s2, ++s3+2, 1) >= 0 || s2 != s1+1 || s3 != s1+5)\n+    abort();\n+#if defined(__i386__)\n+  /* These tests work on platforms which support cmpstrsi.  */\n+  s2 = s1;\n+  if (strncmp (++s2, \"ello\", 3) != 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"ello\", ++s2, 3) != 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"ello\", 4) != 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"ello\", ++s2, 4) != 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"ello\", 5) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"ello\", ++s2, 5) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"ello\", 6) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"ello\", ++s2, 6) >= 0 || s2 != s1+1)\n+    abort();\n+\n+  s2 = s1;\n+  if (strncmp (++s2, \"zllo\", 3) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"zllo\", ++s2, 3) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"zllo\", 4) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"zllo\", ++s2, 4) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"zllo\", 5) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"zllo\", ++s2, 5) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"zllo\", 6) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"zllo\", ++s2, 6) <= 0 || s2 != s1+1)\n+    abort();\n+\n+  s2 = s1;\n+  if (strncmp (++s2, \"allo\", 3) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"allo\", ++s2, 3) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"allo\", 4) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"allo\", ++s2, 4) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"allo\", 5) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"allo\", ++s2, 5) >= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (++s2, \"allo\", 6) <= 0 || s2 != s1+1)\n+    abort();\n+  s2 = s1;\n+  if (strncmp (\"allo\", ++s2, 6) >= 0 || s2 != s1+1)\n+    abort();\n+#endif  \n   \n   return 0;\n }"}]}