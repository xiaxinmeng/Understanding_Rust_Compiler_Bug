{"sha": "b0cb541bf4244fa512af4fe2501a37a273a98245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjYjU0MWJmNDI0NGZhNTEyYWY0ZmUyNTAxYTM3YTI3M2E5ODI0NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-19T16:20:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-19T16:20:59Z"}, "message": "(function_value): Deleted; no such function.\n\n(bc_build_calldesc, bc_runtime_type_code): New declarations.\n\nFrom-SVN: r12040", "tree": {"sha": "b5afdd42986525837034c18e338113df076fbc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5afdd42986525837034c18e338113df076fbc26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0cb541bf4244fa512af4fe2501a37a273a98245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0cb541bf4244fa512af4fe2501a37a273a98245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0cb541bf4244fa512af4fe2501a37a273a98245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0cb541bf4244fa512af4fe2501a37a273a98245/comments", "author": null, "committer": null, "parents": [{"sha": "e3068d6fd60f0222124c877d2d132b82b4f96258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3068d6fd60f0222124c877d2d132b82b4f96258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3068d6fd60f0222124c877d2d132b82b4f96258"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "9c30a558cb4269f987c250c9ffb3c6f511f43950", "filename": "gcc/expr.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0cb541bf4244fa512af4fe2501a37a273a98245/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0cb541bf4244fa512af4fe2501a37a273a98245/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=b0cb541bf4244fa512af4fe2501a37a273a98245", "patch": "@@ -825,9 +825,6 @@ extern void emit_stack_restore PROTO((enum save_level, rtx, rtx));\n    says how many bytes.  */\n extern rtx allocate_dynamic_stack_space PROTO((rtx, rtx, int));\n \n-/* Emit code to copy function value to a new temp reg and return that reg.  */\n-extern rtx function_value ();\n-\n /* Return an rtx that refers to the value returned by a library call\n    in its original home.  This becomes invalid if any more code is emitted.  */\n extern rtx hard_libcall_value PROTO((enum machine_mode));\n@@ -850,3 +847,13 @@ extern rtx assemble_static_space PROTO((int));\n    It is up to the language front end to install a hook\n    if it has any such codes that expand_expr needs to know about.  */\n extern rtx (*lang_expand_expr) ();\n+\n+#ifdef TREE_CODE\n+/* Build bytecode call descriptor for function SUBR. */\n+extern rtx bc_build_calldesc PROTO((tree));\n+\n+/* Emit a type code to be used by the runtime support in handling\n+   parameter passing.   The type code consists of the machine mode\n+   plus the minimal alignment shifted left 8 bits.  */\n+extern tree bc_runtime_type_code PROTO((tree));\n+#endif"}]}