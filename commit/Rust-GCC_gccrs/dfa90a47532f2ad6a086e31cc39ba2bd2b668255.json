{"sha": "dfa90a47532f2ad6a086e31cc39ba2bd2b668255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhOTBhNDc1MzJmMmFkNmEwODZlMzFjYzM5YmEyYmQyYjY2ODI1NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-09-24T22:29:28Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-09-24T22:29:28Z"}, "message": "spew.c (yylex): Give diagnostic.\n\n\ufffd\n1998-09-24  Benjamin Kosnik  <bkoz@loony.cygnus.com>\n\t* spew.c (yylex): Give diagnostic.\n\t* hash.h (is_reserved_word): Add export.\n\t* gxx.gperf: Ditto.\n\t* lex.h (rid): Add RID_EXPORT.\n\t* lex.c (init_parse): Ditto.\n\nFrom-SVN: r22578", "tree": {"sha": "10924a60a44a86a6d7b8c6dea89b54e138aaacb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10924a60a44a86a6d7b8c6dea89b54e138aaacb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa90a47532f2ad6a086e31cc39ba2bd2b668255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa90a47532f2ad6a086e31cc39ba2bd2b668255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa90a47532f2ad6a086e31cc39ba2bd2b668255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa90a47532f2ad6a086e31cc39ba2bd2b668255/comments", "author": null, "committer": null, "parents": [{"sha": "269d984e3436c5b300c6d75be0883cb130a1a4a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269d984e3436c5b300c6d75be0883cb130a1a4a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269d984e3436c5b300c6d75be0883cb130a1a4a8"}], "stats": {"total": 235, "additions": 121, "deletions": 114}, "files": [{"sha": "3d4200e84c3b62f3f2e42ea02618089f00ec2a9e", "filename": "gcc/cp/hash.h", "status": "modified", "additions": 121, "deletions": 114, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa90a47532f2ad6a086e31cc39ba2bd2b668255/gcc%2Fcp%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa90a47532f2ad6a086e31cc39ba2bd2b668255/gcc%2Fcp%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fhash.h?ref=dfa90a47532f2ad6a086e31cc39ba2bd2b668255", "patch": "@@ -1,14 +1,14 @@\n /* C code produced by gperf version 2.5 (GNU C++ version) */\n-/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../gcc/cp/gxx.gperf  */\n+/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ /home/bkoz/src.egcs/gcc/cp/gxx.gperf  */\n /* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */\n struct resword { char *name; short token; enum rid rid;};\n \n-#define TOTAL_KEYWORDS 103\n+#define TOTAL_KEYWORDS 104\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 16\n #define MIN_HASH_VALUE 4\n-#define MAX_HASH_VALUE 195\n-/* maximum key range = 192, duplicates = 0 */\n+#define MAX_HASH_VALUE 261\n+/* maximum key range = 258, duplicates = 0 */\n \n #ifdef __GNUC__\n inline\n@@ -18,21 +18,21 @@ hash (str, len)\n      register char *str;\n      register int unsigned len;\n {\n-  static unsigned char asso_values[] =\n+  static unsigned short asso_values[] =\n     {\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196, 196, 196, 196, 196, 196,\n-     196, 196, 196, 196, 196,   0, 196,  80,  26,  28,\n-      44,   0,  49,  38,   6,  81, 196,   2,   0,  41,\n-      16,  47,   4,  31,  32,   5,   6,  62,  20,  96,\n-      17,  25, 196, 196, 196, 196, 196, 196,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262, 262, 262, 262, 262, 262,\n+     262, 262, 262, 262, 262,   0, 262,  87,  25,  96,\n+      60,   0,  55,   7,   4,  41, 262,   2,  15,  49,\n+      14,  63,  32,  29,   3,  23,   6,   8,   2,   2,\n+       0,   7, 262, 262, 262, 262, 262, 262,\n     };\n   register int hval = len;\n \n@@ -67,147 +67,154 @@ is_reserved_word (str, len)\n       {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n       {\"else\",  ELSE, NORID,},\n       {\"\",}, \n-      {\"__real\",  REALPART, NORID},\n+      {\"xor\",  '^', NORID,},\n       {\"\",}, \n       {\"__real__\",  REALPART, NORID},\n       {\"\",}, \n       {\"true\",  CXX_TRUE, NORID,},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"try\",  TRY, NORID,},\n+      {\"\",}, {\"\",}, \n+      {\"new\",  NEW, NORID,},\n+      {\"extern\",  SCSPEC, RID_EXTERN,},\n+      {\"__real\",  REALPART, NORID},\n+      {\"while\",  WHILE, NORID,},\n+      {\"not\",  '!', NORID,},\n+      {\"\",}, {\"\",}, {\"\",}, \n+      {\"__extension__\",  EXTENSION, NORID},\n       {\"\",}, \n+      {\"__null\",  CONSTANT, RID_NULL},\n       {\"__asm__\",  ASM_KEYWORD, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"this\",  THIS, NORID,},\n+      {\"return\",  RETURN, NORID,},\n       {\"\",}, \n-      {\"extern\",  SCSPEC, RID_EXTERN,},\n+      {\"long\",  TYPESPEC, RID_LONG,},\n+      {\"using\",  USING, NORID,},\n+      {\"xor_eq\",  ASSIGN, NORID,},\n+      {\"__inline\",  SCSPEC, RID_INLINE},\n+      {\"short\",  TYPESPEC, RID_SHORT,},\n+      {\"__inline__\",  SCSPEC, RID_INLINE},\n       {\"switch\",  SWITCH, NORID,},\n-      {\"template\",  TEMPLATE, RID_TEMPLATE,},\n-      {\"not\",  '!', NORID,},\n-      {\"\",}, \n       {\"__alignof__\",  ALIGNOF, NORID},\n-      {\"static_cast\",  STATIC_CAST, NORID,},\n-      {\"\",}, \n-      {\"bool\",  TYPESPEC, RID_BOOL,},\n       {\"private\",  VISSPEC, RID_PRIVATE,},\n-      {\"case\",  CASE, NORID,},\n+      {\"reinterpret_cast\",  REINTERPRET_CAST, NORID,},\n+      {\"struct\",  AGGR, RID_RECORD,},\n+      {\"\",}, \n       {\"virtual\",  SCSPEC, RID_VIRTUAL,},\n-      {\"try\",  TRY, NORID,},\n+      {\"static_cast\",  STATIC_CAST, NORID,},\n       {\"\",}, {\"\",}, \n-      {\"compl\",  '~', NORID,},\n-      {\"public\",  VISSPEC, RID_PUBLIC,},\n-      {\"\",}, \n-      {\"__inline\",  SCSPEC, RID_INLINE},\n-      {\"\",}, \n-      {\"__inline__\",  SCSPEC, RID_INLINE},\n-      {\"class\",  AGGR, RID_CLASS,},\n-      {\"const\",  CV_QUALIFIER, RID_CONST,},\n-      {\"static\",  SCSPEC, RID_STATIC,},\n-      {\"__extension__\",  EXTENSION, NORID},\n+      {\"not_eq\",  EQCOMPARE, NORID,},\n+      {\"int\",  TYPESPEC, RID_INT,},\n+      {\"__signed__\",  TYPESPEC, RID_SIGNED},\n+      {\"template\",  TEMPLATE, RID_TEMPLATE,},\n       {\"\",}, \n-      {\"short\",  TYPESPEC, RID_SHORT,},\n+      {\"signature\",  AGGR, RID_SIGNATURE\t/* Extension */,},\n+      {\"register\",  SCSPEC, RID_REGISTER,},\n+      {\"this\",  THIS, NORID,},\n       {\"__imag__\",  IMAGPART, NORID},\n-      {\"delete\",  DELETE, NORID,},\n-      {\"__asm\",  ASM_KEYWORD, NORID},\n-      {\"xor\",  '^', NORID,},\n-      {\"not_eq\",  EQCOMPARE, NORID,},\n-      {\"xor_eq\",  ASSIGN, NORID,},\n+      {\"__attribute\",  ATTRIBUTE, NORID},\n+      {\"bool\",  TYPESPEC, RID_BOOL,},\n+      {\"__attribute__\",  ATTRIBUTE, NORID},\n+      {\"for\",  FOR, NORID,},\n+      {\"__imag\",  IMAGPART, NORID},\n       {\"typename\",  TYPENAME_KEYWORD, NORID,},\n-      {\"typeid\",  TYPEID, NORID,},\n-      {\"\",}, \n-      {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n-      {\"false\",  CXX_FALSE, NORID,},\n-      {\"sizeof\",  SIZEOF, NORID,},\n+      {\"\",}, {\"\",}, \n+      {\"delete\",  DELETE, NORID,},\n       {\"typeof\",  TYPEOF, NORID,},\n+      {\"or\",  OROR, NORID,},\n+      {\"\",}, \n+      {\"explicit\",  SCSPEC, RID_EXPLICIT,},\n+      {\"\",}, \n+      {\"typeid\",  TYPEID, NORID,},\n+      {\"\",}, {\"\",}, \n+      {\"export\",  SCSPEC, RID_EXPORT,},\n+      {\"throw\",  THROW, NORID,},\n+      {\"__asm\",  ASM_KEYWORD, NORID},\n       {\"__const__\",  CV_QUALIFIER, RID_CONST},\n       {\"__volatile\",  CV_QUALIFIER, RID_VOLATILE},\n-      {\"\",}, \n+      {\"__typeof__\",  TYPEOF, NORID},\n       {\"__volatile__\",  CV_QUALIFIER, RID_VOLATILE},\n       {\"__const\",  CV_QUALIFIER, RID_CONST},\n-      {\"catch\",  CATCH, NORID,},\n-      {\"__null\",  CONSTANT, RID_NULL},\n-      {\"protected\",  VISSPEC, RID_PROTECTED,},\n-      {\"\",}, \n-      {\"signed\",  TYPESPEC, RID_SIGNED,},\n-      {\"\",}, \n+      {\"false\",  CXX_FALSE, NORID,},\n+      {\"sizeof\",  SIZEOF, NORID,},\n+      {\"\",}, {\"\",}, \n       {\"__complex\",  TYPESPEC, RID_COMPLEX},\n-      {\"__alignof\",  ALIGNOF, NORID},\n-      {\"__wchar_t\",  TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},\n+      {\"inline\",  SCSPEC, RID_INLINE,},\n+      {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n+      {\"union\",  AGGR, RID_UNION,},\n       {\"double\",  TYPESPEC, RID_DOUBLE,},\n-      {\"const_cast\",  CONST_CAST, NORID,},\n       {\"\",}, \n-      {\"struct\",  AGGR, RID_RECORD,},\n-      {\"long\",  TYPESPEC, RID_LONG,},\n-      {\"or\",  OROR, NORID,},\n-      {\"__typeof__\",  TYPEOF, NORID},\n-      {\"or_eq\",  ASSIGN, NORID,},\n-      {\"for\",  FOR, NORID,},\n-      {\"__imag\",  IMAGPART, NORID},\n-      {\"enum\",  ENUM, NORID,},\n+      {\"__alignof\",  ALIGNOF, NORID},\n       {\"\",}, {\"\",}, \n-      {\"__label__\",  LABEL, NORID},\n-      {\"int\",  TYPESPEC, RID_INT,},\n-      {\"__signed__\",  TYPESPEC, RID_SIGNED},\n-      {\"signature\",  AGGR, RID_SIGNATURE\t/* Extension */,},\n-      {\"do\",  DO, NORID,},\n+      {\"bitor\",  '|', NORID,},\n+      {\"or_eq\",  ASSIGN, NORID,},\n+      {\"if\",  IF, NORID,},\n       {\"\",}, \n-      {\"explicit\",  SCSPEC, RID_EXPLICIT,},\n-      {\"char\",  TYPESPEC, RID_CHAR,},\n+      {\"case\",  CASE, NORID,},\n       {\"\",}, \n-      {\"__attribute\",  ATTRIBUTE, NORID},\n-      {\"friend\",  SCSPEC, RID_FRIEND,},\n-      {\"__attribute__\",  ATTRIBUTE, NORID},\n-      {\"while\",  WHILE, NORID,},\n-      {\"reinterpret_cast\",  REINTERPRET_CAST, NORID,},\n+      {\"enum\",  ENUM, NORID,},\n+      {\"signed\",  TYPESPEC, RID_SIGNED,},\n       {\"\",}, \n-      {\"continue\",  CONTINUE, NORID,},\n+      {\"__sigof__\",  SIGOF, NORID\t\t/* Extension */,},\n+      {\"char\",  TYPESPEC, RID_CHAR,},\n+      {\"\",}, {\"\",}, \n+      {\"__signed\",  TYPESPEC, RID_SIGNED},\n       {\"namespace\",  NAMESPACE, NORID,},\n-      {\"sigof\",  SIGOF, NORID\t\t/* Extension */,},\n-      {\"\",}, \n+      {\"__label__\",  LABEL, NORID},\n       {\"volatile\",  CV_QUALIFIER, RID_VOLATILE,},\n+      {\"protected\",  VISSPEC, RID_PROTECTED,},\n+      {\"__wchar_t\",  TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},\n+      {\"\",}, {\"\",}, \n+      {\"unsigned\",  TYPESPEC, RID_UNSIGNED,},\n+      {\"continue\",  CONTINUE, NORID,},\n+      {\"break\",  BREAK, NORID,},\n       {\"\",}, \n-      {\"bitor\",  '|', NORID,},\n+      {\"friend\",  SCSPEC, RID_FRIEND,},\n+      {\"and_eq\",  ASSIGN, NORID,},\n       {\"typedef\",  SCSPEC, RID_TYPEDEF,},\n+      {\"\",}, \n+      {\"do\",  DO, NORID,},\n       {\"void\",  TYPESPEC, RID_VOID,},\n-      {\"break\",  BREAK, NORID,},\n+      {\"\",}, {\"\",}, {\"\",}, \n+      {\"const\",  CV_QUALIFIER, RID_CONST,},\n+      {\"static\",  SCSPEC, RID_STATIC,},\n       {\"\",}, \n-      {\"new\",  NEW, NORID,},\n-      {\"return\",  RETURN, NORID,},\n-      {\"and_eq\",  ASSIGN, NORID,},\n+      {\"__typeof\",  TYPEOF, NORID},\n       {\"\",}, {\"\",}, {\"\",}, \n-      {\"using\",  USING, NORID,},\n-      {\"\",}, {\"\",}, \n+      {\"goto\",  GOTO, NORID,},\n+      {\"\",}, \n       {\"asm\",  ASM_KEYWORD, NORID,},\n-      {\"\",}, {\"\",}, \n-      {\"and\",  ANDAND, NORID,},\n-      {\"mutable\",  SCSPEC, RID_MUTABLE,},\n-      {\"__typeof\",  TYPEOF, NORID},\n-      {\"union\",  AGGR, RID_UNION,},\n+      {\"operator\",  OPERATOR, NORID,},\n+      {\"__signature__\",  AGGR, RID_SIGNATURE\t/* Extension */,},\n       {\"\",}, \n-      {\"if\",  IF, NORID,},\n-      {\"__signed\",  TYPESPEC, RID_SIGNED},\n+      {\"mutable\",  SCSPEC, RID_MUTABLE,},\n       {\"\",}, {\"\",}, \n-      {\"goto\",  GOTO, NORID,},\n+      {\"sigof\",  SIGOF, NORID\t\t/* Extension */,},\n+      {\"class\",  AGGR, RID_CLASS,},\n+      {\"compl\",  '~', NORID,},\n+      {\"public\",  VISSPEC, RID_PUBLIC,},\n+      {\"and\",  ANDAND, NORID,},\n       {\"\",}, {\"\",}, \n-      {\"__sigof__\",  SIGOF, NORID\t\t/* Extension */,},\n       {\"float\",  TYPESPEC, RID_FLOAT,},\n-      {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, \n       {\"default\",  DEFAULT, NORID,},\n       {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"register\",  SCSPEC, RID_REGISTER,},\n-      {\"throw\",  THROW, NORID,},\n-      {\"\",}, \n+      {\"\",}, {\"\",}, \n       {\"bitand\",  '&', NORID,},\n       {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"operator\",  OPERATOR, NORID,},\n-      {\"\",}, \n-      {\"inline\",  SCSPEC, RID_INLINE,},\n-      {\"\",}, \n-      {\"dynamic_cast\",  DYNAMIC_CAST, NORID,},\n-      {\"\",}, {\"\",}, {\"\",}, \n-      {\"__signature__\",  AGGR, RID_SIGNATURE\t/* Extension */,},\n-      {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"catch\",  CATCH, NORID,},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n       {\"auto\",  SCSPEC, RID_AUTO,},\n       {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"unsigned\",  TYPESPEC, RID_UNSIGNED,},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"const_cast\",  CONST_CAST, NORID,},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"\",}, {\"\",}, {\"dynamic_cast\",  DYNAMIC_CAST, NORID,},\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)"}]}