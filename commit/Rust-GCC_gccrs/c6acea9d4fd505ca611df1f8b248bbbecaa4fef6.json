{"sha": "c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhY2VhOWQ0ZmQ1MDVjYTYxMWRmMWY4YjI0OGJiYmVjYWE0ZmVmNg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2008-11-01T13:24:03Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2008-11-01T13:24:03Z"}, "message": "re PR fortran/36322 (ICE with PROCEDURE using a complicated interface)\n\n2008-11-01  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36322\n\tPR fortran/36463\n\t* gfortran.h: New function gfc_expr_replace_symbols.\n\t* decl.c (match_procedure_decl): Increase reference count for interface.\n\t* expr.c: New functions replace_symbol and gfc_expr_replace_symbols.\n\t* resolve.c (resolve_symbol): Correctly copy array spec and char len\n\tof PROCEDURE declarations from their interface.\n\t* symbol.c (gfc_get_default_type): Enhanced error message.\n\t(copy_formal_args): Call copy_formal_args recursively for arguments.\n\t* trans-expr.c (gfc_conv_function_call): Bugfix.\n\n\n2008-11-01  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36322\n\tPR fortran/36463\n\t* gfortran.dg/proc_decl_17.f90: New.\n\t* gfortran.dg/proc_decl_18.f90: New.\n\nFrom-SVN: r141515", "tree": {"sha": "3bdd5ff69b6c21e149a0a9da51fcbf7311b75671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bdd5ff69b6c21e149a0a9da51fcbf7311b75671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002bd9f0ac7a90a1c0ed1488033505758df6c8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002bd9f0ac7a90a1c0ed1488033505758df6c8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002bd9f0ac7a90a1c0ed1488033505758df6c8df"}], "stats": {"total": 205, "additions": 201, "deletions": 4}, "files": [{"sha": "f4f82e2875df06e8f335e8ded27959850fe184a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -1,3 +1,16 @@\n+2008-11-01  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36322\n+\tPR fortran/36463\n+\t* gfortran.h: New function gfc_expr_replace_symbols.\n+\t* decl.c (match_procedure_decl): Increase reference count for interface.\n+\t* expr.c: New functions replace_symbol and gfc_expr_replace_symbols.\n+\t* resolve.c (resolve_symbol): Correctly copy array spec and char len\n+\tof PROCEDURE declarations from their interface.\n+\t* symbol.c (gfc_get_default_type): Enhanced error message.\n+\t(copy_formal_args): Call copy_formal_args recursively for arguments.\n+\t* trans-expr.c (gfc_conv_function_call): Bugfix.\n+\n 2008-11-01  Dennis Wassel  <dennis.wassel@gmail.com>\n \n \tPR fortran/37159"}, {"sha": "fe044c7c698ac81ae9b103ef934d8a42cd6e5dd1", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -4125,6 +4125,7 @@ match_procedure_decl (void)\n   /* Various interface checks.  */\n   if (proc_if)\n     {\n+      proc_if->refs++;\n       /* Resolve interface if possible. That way, attr.procedure is only set\n \t if it is declared by a later procedure-declaration-stmt, which is\n \t invalid per C1212.  */"}, {"sha": "2cebb65ee018c4cbfafd9055b72a110e826c060c", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -3502,3 +3502,28 @@ gfc_expr_check_typed (gfc_expr* e, gfc_namespace* ns, bool strict)\n \n   return error_found ? FAILURE : SUCCESS;\n }\n+\n+/* Walk an expression tree and replace all symbols with a corresponding symbol\n+   in the formal_ns of \"sym\". Needed for copying interfaces in PROCEDURE\n+   statements. The boolean return value is required by gfc_traverse_expr.  */\n+\n+static bool\n+replace_symbol (gfc_expr *expr, gfc_symbol *sym, int *i ATTRIBUTE_UNUSED)\n+{\n+  if ((expr->expr_type == EXPR_VARIABLE || expr->expr_type == EXPR_FUNCTION)\n+      && expr->symtree->n.sym->ns != sym->formal_ns\n+      && expr->symtree->n.sym->attr.dummy)\n+    {\n+      gfc_symtree *stree;\n+      gfc_get_sym_tree (expr->symtree->name, sym->formal_ns, &stree);\n+      stree->n.sym->attr.referenced = expr->symtree->n.sym->attr.referenced;\n+      expr->symtree = stree;\n+    }\n+  return false;\n+}\n+\n+void\n+gfc_expr_replace_symbols (gfc_expr *expr, gfc_symbol *dest)\n+{\n+  gfc_traverse_expr (expr, dest, &replace_symbol, 0);\n+}"}, {"sha": "d2c415a47a78a5f1e5c72f1401dd2b0aca893e68", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -2448,8 +2448,8 @@ bool gfc_traverse_expr (gfc_expr *, gfc_symbol *,\n \t\t\tbool (*)(gfc_expr *, gfc_symbol *, int*),\n \t\t\tint);\n void gfc_expr_set_symbols_referenced (gfc_expr *);\n-\n gfc_try gfc_expr_check_typed (gfc_expr*, gfc_namespace*, bool);\n+void gfc_expr_replace_symbols (gfc_expr *, gfc_symbol *);\n \n /* st.c */\n extern gfc_code new_st;"}, {"sha": "bccb46ab2186f6e120bb75d263925f3fcd972e8e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -8917,8 +8917,26 @@ resolve_symbol (gfc_symbol *sym)\n \t  sym->attr.dimension = ifc->attr.dimension;\n \t  sym->attr.recursive = ifc->attr.recursive;\n \t  sym->attr.always_explicit = ifc->attr.always_explicit;\n-\t  sym->as = gfc_copy_array_spec (ifc->as);\n \t  copy_formal_args (sym, ifc);\n+\t  /* Copy array spec.  */\n+\t  sym->as = gfc_copy_array_spec (ifc->as);\n+\t  if (sym->as)\n+\t    {\n+\t      int i;\n+\t      for (i = 0; i < sym->as->rank; i++)\n+\t\t{\n+\t\t  gfc_expr_replace_symbols (sym->as->lower[i], sym);\n+\t\t  gfc_expr_replace_symbols (sym->as->upper[i], sym);\n+\t\t}\n+\t    }\n+\t  /* Copy char length.  */\n+\t  if (ifc->ts.cl)\n+\t    {\n+\t      sym->ts.cl = gfc_get_charlen();\n+\t      sym->ts.cl->resolved = ifc->ts.cl->resolved;\n+\t      sym->ts.cl->length = gfc_copy_expr (ifc->ts.cl->length);\n+\t      gfc_expr_replace_symbols (sym->ts.cl->length, sym);\n+\t    }\n \t}\n       else if (sym->ts.interface->name[0] != '\\0')\n \t{"}, {"sha": "bf66ac8986b824c7358a5d4fca22c83850b304c0", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -219,7 +219,7 @@ gfc_get_default_type (gfc_symbol *sym, gfc_namespace *ns)\n \t\t\t\"implicitly typed variables\");\n \n   if (letter < 'a' || letter > 'z')\n-    gfc_internal_error (\"gfc_get_default_type(): Bad symbol\");\n+    gfc_internal_error (\"gfc_get_default_type(): Bad symbol '%s'\",sym->name);\n \n   if (ns == NULL)\n     ns = gfc_current_ns;\n@@ -3790,6 +3790,7 @@ copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n       formal_arg->sym->attr = curr_arg->sym->attr;\n       formal_arg->sym->ts = curr_arg->sym->ts;\n       formal_arg->sym->as = gfc_copy_array_spec (curr_arg->sym->as);\n+      copy_formal_args (formal_arg->sym, curr_arg->sym);\n \n       /* If this isn't the first arg, set up the next ptr.  For the\n         last arg built, the formal_arg->next will never get set to"}, {"sha": "1c14ac15dc167f1766d7c7bace2e43c0ff0e299e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -2716,7 +2716,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t      && parmse.string_length == NULL_TREE\n \t      && e->ts.type == BT_PROCEDURE\n \t      && e->symtree->n.sym->ts.type == BT_CHARACTER\n-\t      && e->symtree->n.sym->ts.cl->length != NULL)\n+\t      && e->symtree->n.sym->ts.cl->length != NULL\n+\t      && e->symtree->n.sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n \t    {\n \t      gfc_conv_const_charlen (e->symtree->n.sym->ts.cl);\n \t      parmse.string_length = e->symtree->n.sym->ts.cl->backend_decl;"}, {"sha": "b1ee98871d0da862caf127546d0b7414a371daff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -1,3 +1,10 @@\n+2008-11-01  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36322\n+\tPR fortran/36463\n+\t* gfortran.dg/proc_decl_17.f90: New.\n+\t* gfortran.dg/proc_decl_18.f90: New.\n+\n 2008-11-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/37976"}, {"sha": "858022a43fab349d96bb474eb36a4ec13f31b91c", "filename": "gcc/testsuite/gfortran.dg/proc_decl_17.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_17.f90?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do run }\n+!\n+! PR 36322/36463\n+!\n+! Original code by James Van Buskirk.\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+module m\n+\n+   use ISO_C_BINDING\n+\n+   character, allocatable, save :: my_message(:)\n+\n+   abstract interface\n+      function abs_fun(x)\n+         use ISO_C_BINDING\n+         import my_message\n+         integer(C_INT) x(:)\n+         character(size(my_message),C_CHAR) abs_fun(size(x))\n+      end function abs_fun\n+   end interface \n+\n+contains\n+\n+  function foo(y)\n+    implicit none\n+    integer(C_INT) :: y(:)\n+    character(size(my_message),C_CHAR) :: foo(size(y))\n+    integer i,j\n+    do i=1,size(y)\n+      do j=1,size(my_message)\n+        foo(i)(j:j) = achar(iachar(my_message(j))+y(i))\n+      end do\n+    end do\n+  end function\n+\n+  subroutine check(p,a)\n+    integer a(:)\n+    procedure(abs_fun) :: p\n+    character(size(my_message),C_CHAR) :: c(size(a))\n+    integer k,l,m\n+    c = p(a)\n+    m=iachar('a')\n+    do k=1,size(a)\n+      do l=1,size(my_message)\n+        if (c(k)(l:l) /= achar(m)) call abort()\n+        m = m + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+end module\n+\n+program prog\n+\n+use m\n+\n+integer :: i(4) = (/0,6,12,18/)\n+\n+allocate(my_message(1:6))\n+\n+my_message = (/'a','b','c','d','e','f'/)\n+\n+call check(foo,i)\n+\n+end program\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "46493eb9e0fff27f76ba2f75eedbbace87aafb2d", "filename": "gcc/testsuite/gfortran.dg/proc_decl_18.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6acea9d4fd505ca611df1f8b248bbbecaa4fef6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_18.f90?ref=c6acea9d4fd505ca611df1f8b248bbbecaa4fef6", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do run }\n+!\n+! PR 36322/36463\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+module m\n+\n+contains\n+\n+  pure integer function mysize(a)\n+    integer,intent(in) :: a(:)\n+    mysize = size(a)\n+  end function\n+\n+end module\n+\n+\n+program prog\n+\n+use m\n+implicit none\n+\n+abstract interface\n+  function abs_fun(x,sz)\n+    integer :: x(:)\n+    interface\n+      pure integer function sz(b)\n+        integer,intent(in) :: b(:)\n+      end function\n+    end interface\n+    integer :: abs_fun(sz(x))\n+  end function\n+end interface\n+\n+procedure(abs_fun) :: p\n+\n+integer :: k,j(3),i(3) = (/1,2,3/)\n+\n+j = p(i,mysize)\n+\n+do k=1,mysize(i)\n+  if (j(k) /= 2*i(k)) call abort()\n+end do\n+\n+end\n+\n+  function p(y,asz)\n+    implicit none\n+    integer,intent(in) :: y(:)\n+    interface\n+      pure integer function asz(c)\n+        integer,intent(in) :: c(:)\n+      end function\n+    end interface\n+    integer :: p(asz(y))\n+    integer l\n+    do l=1,asz(y)\n+      p(l) = y(l)*2\n+    end do\n+  end function\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}