{"sha": "338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "node_id": "C_kwDOANBUbNoAKDMzOGFiZDBiZjc3N2Y2NzFmNGJmNDhkOGVlNWZlMWY2N2YzZWEzZDk", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-07-13T06:19:21Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T04:56:31Z"}, "message": "AVX512FP16: Add expander for ceil/floor/trunc/roundeven.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (<rounding_insn>hf2): New expander.\n\t(sse4_1_round<mode>2): Extend from MODEF to MODEFH.\n\t* config/i386/sse.md (*sse4_1_round<ssescalarmodesuffix>):\n\tExtend from VF_128 to VFH_128.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-builtin-round-1.c: New test.", "tree": {"sha": "ebd150ef9c13563dc5dbb76ae7db8a93b5749332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebd150ef9c13563dc5dbb76ae7db8a93b5749332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59e9c4cbe665951f3f3714c966ecf7776b36894c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e9c4cbe665951f3f3714c966ecf7776b36894c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e9c4cbe665951f3f3714c966ecf7776b36894c"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "0b174141543212d443a78c4ef118cca8cbeb779e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "patch": "@@ -18233,9 +18233,9 @@\n \f\n \n (define_insn \"sse4_1_round<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,x,v,v\")\n-\t(unspec:MODEF\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"0,x,m,v,m\")\n+  [(set (match_operand:MODEFH 0 \"register_operand\" \"=x,x,x,v,v\")\n+\t(unspec:MODEFH\n+\t  [(match_operand:MODEFH 1 \"nonimmediate_operand\" \"0,x,m,v,m\")\n \t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n,n,n\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n@@ -18492,6 +18492,18 @@\n   \"TARGET_USE_FANCY_MATH_387\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math)\")\n \n+(define_expand \"<rounding_insn>hf2\"\n+  [(parallel [(set (match_operand:HF 0 \"register_operand\")\n+\t\t   (unspec:HF [(match_operand:HF 1 \"register_operand\")]\n+\t\t     FRNDINT_ROUNDING))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_AVX512FP16\"\n+{\n+  emit_insn (gen_sse4_1_roundhf2 (operands[0], operands[1],\n+\t\t\t\t  GEN_INT (ROUND_<ROUNDING> | ROUND_NO_EXC)));\n+  DONE;\n+})\n+\n (define_expand \"<rounding_insn><mode>2\"\n   [(parallel [(set (match_operand:MODEF 0 \"register_operand\")\n \t\t   (unspec:MODEF [(match_operand:MODEF 1 \"register_operand\")]"}, {"sha": "9079613e829fc3c4ce8bfb7945b0fc112eace50b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "patch": "@@ -21472,14 +21472,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*sse4_1_round<ssescalarmodesuffix>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=Yr,*x,x,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_duplicate:VF_128\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=Yr,*x,x,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_duplicate:VFH_128\n \t    (unspec:<ssescalarmode>\n \t      [(match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"Yrm,*xm,xm,vm\")\n \t       (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n,n\")]\n \t      UNSPEC_ROUND))\n-\t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x,v\")\n+\t  (match_operand:VFH_128 1 \"register_operand\" \"0,0,x,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE4_1\"\n   \"@"}, {"sha": "3cab1526967a6c23c62e18004e7acbda5da9fc28", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-builtin-round-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-builtin-round-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-builtin-round-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-builtin-round-1.c?ref=338abd0bf777f671f4bf48d8ee5fe1f67f3ea3d9", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512fp16\" } */\n+\n+_Float16\n+f1 (_Float16 x)\n+{\n+  return __builtin_truncf16 (x);\n+}\n+\n+_Float16\n+f2 (_Float16 x)\n+{\n+  return __builtin_floorf16 (x);\n+}\n+\n+_Float16\n+f3 (_Float16 x)\n+{\n+  return __builtin_ceilf16 (x);\n+}\n+\n+_Float16\n+f4 (_Float16 x)\n+{\n+  return __builtin_roundevenf16 (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\\\\\$11\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\\\\\$10\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\\\\\$9\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesh\\[ \\\\t\\]+\\\\\\$8\\[^\\n\\r\\]*xmm\\[0-9\\]\" 1 } } */"}]}