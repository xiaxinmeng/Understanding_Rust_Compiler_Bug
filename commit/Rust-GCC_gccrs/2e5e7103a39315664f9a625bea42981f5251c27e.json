{"sha": "2e5e7103a39315664f9a625bea42981f5251c27e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1ZTcxMDNhMzkzMTU2NjRmOWE2MjViZWE0Mjk4MWY1MjUxYzI3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-28T17:06:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-28T17:06:40Z"}, "message": "re PR c++/53756 ([C++1y] ICE: in gen_type_die_with_usage, at dwarf2out.c:18774 with -g and operator auto ())\n\n\tPR c++/53756\ngcc/\n\t* dwarf2out.c (auto_die): New static.\n\t(gen_type_die_with_usage): Handle C++1y 'auto'.\n\t(gen_subprogram_die): If in-class DIE had 'auto', emit type again\n\ton definition.\ngcc/cp/\n\t* mangle.c (write_unqualified_name): Handle operator auto.\n\nFrom-SVN: r207197", "tree": {"sha": "4b8efc5521262ece0ec8b7addd7251990e3344e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b8efc5521262ece0ec8b7addd7251990e3344e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e5e7103a39315664f9a625bea42981f5251c27e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5e7103a39315664f9a625bea42981f5251c27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5e7103a39315664f9a625bea42981f5251c27e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5e7103a39315664f9a625bea42981f5251c27e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5d618b5da3494c1e8037863b626f57ebb78975c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d618b5da3494c1e8037863b626f57ebb78975c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d618b5da3494c1e8037863b626f57ebb78975c"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "246105a932356a2ce8091a13913a1e9e53ddc300", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -1,3 +1,11 @@\n+2014-01-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53756\n+\t* dwarf2out.c (auto_die): New static.\n+\t(gen_type_die_with_usage): Handle C++1y 'auto'.\n+\t(gen_subprogram_die): If in-class DIE had 'auto', emit type again\n+\ton definition.\n+\n 2014-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59672"}, {"sha": "3da4ab4e1bfb18eb737bef17345c1a2fb7d590de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -1,3 +1,8 @@\n+2014-01-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53756\n+\t* mangle.c (write_unqualified_name): Handle operator auto.\n+\n 2014-01-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/59823"}, {"sha": "add73cf30c1f5fe2d89e57a8b1477e807cade5a4", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -1231,6 +1231,9 @@ write_unqualified_name (const tree decl)\n \t      fn_type = get_mostly_instantiated_function_type (decl);\n \t      type = TREE_TYPE (fn_type);\n \t    }\n+\t  else if (FNDECL_USED_AUTO (decl))\n+\t    type = (DECL_STRUCT_FUNCTION (decl)->language\n+\t\t    ->x_auto_return_pattern);\n \t  else\n \t    type = DECL_CONV_FN_TYPE (decl);\n \t  write_conversion_operator_name (type);"}, {"sha": "f6efd1f7a19a0fec07c5ff24650cd0aa418d098c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -247,6 +247,9 @@ static GTY(()) bool cold_text_section_used = false;\n /* The default cold text section.  */\n static GTY(()) section *cold_text_section;\n \n+/* The DIE for C++1y 'auto' in a function return type.  */\n+static GTY(()) dw_die_ref auto_die;\n+\n /* Forward declarations for functions defined in this file.  */\n \n static char *stripattributes (const char *);\n@@ -17999,6 +18002,13 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t    add_AT_file (subr_die, DW_AT_decl_file, file_index);\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line) != (unsigned) s.line)\n \t    add_AT_unsigned (subr_die, DW_AT_decl_line, s.line);\n+\n+\t  /* If the prototype had an 'auto' return type, emit the real\n+\t     type on the definition die.  */\n+\t  if (is_cxx() && debug_info_level > DINFO_LEVEL_TERSE\n+\t      && get_AT_ref (old_die, DW_AT_type) == auto_die)\n+\t    add_type_attribute (subr_die, TREE_TYPE (TREE_TYPE (decl)),\n+\t\t\t\t0, 0, context_die);\n \t}\n     }\n   else\n@@ -19820,6 +19830,25 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n       break;\n \n     default:\n+      // A C++ function with deduced return type can have\n+      // a TEMPLATE_TYPE_PARM named 'auto' in its type.\n+      if (is_cxx ())\n+\t{\n+\t  tree name = TYPE_NAME (type);\n+\t  if (TREE_CODE (name) == TYPE_DECL)\n+\t    name = DECL_NAME (name);\n+\t  if (name == get_identifier (\"auto\"))\n+\t    {\n+\t      if (!auto_die)\n+\t\t{\n+\t\t  auto_die = new_die (DW_TAG_unspecified_type,\n+\t\t\t\t      comp_unit_die (), NULL_TREE);\n+\t\t  add_name_attribute (auto_die, \"auto\");\n+\t\t}\n+\t      equate_type_number_to_die (type, auto_die);\n+\t      break;\n+\t    }\n+\t}\n       gcc_unreachable ();\n     }\n "}, {"sha": "ab4a1bbf2db718e9d3f9068bbe9254e4cade3150", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -1,5 +1,5 @@\n // { dg-options -std=c++1y }\n-// { dg-final { scan-assembler \"_ZN1AIiEcviEv\" } }\n+// { dg-final { scan-assembler \"_ZN1AIiEcvDaEv\" } }\n \n template <class T>\n struct A {"}, {"sha": "f05cbb993ee6c076bde4825b706d17c5766d7909", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn22.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn22.C?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++1y\" }\n+\n+struct A\n+{\n+  operator auto();\n+};\n+\n+// { dg-final { scan-assembler \"_ZN1AcvDaEv\" } }\n+A::operator auto() { return 42; }"}, {"sha": "188ca11eaff71e8d32fd407f1a379a0f650feb6a", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/auto1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5e7103a39315664f9a625bea42981f5251c27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C?ref=2e5e7103a39315664f9a625bea42981f5251c27e", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/53756\n+// { dg-options \"-std=c++1y -g -dA -fno-debug-types-section\" }\n+// We're looking for something like\n+\n+// .uleb128 0x3    # (DIE (0x33) DW_TAG_subprogram)\n+// .ascii \"a1\\0\"   # DW_AT_name\n+// .long   0x4c    # DW_AT_type\n+//...\n+// .uleb128 0x5    # (DIE (0x4c) DW_TAG_unspecified_type)\n+// .long   .LASF6  # DW_AT_name: \"auto\"\n+//...\n+// .uleb128 0x7    # (DIE (0x57) DW_TAG_subprogram)\n+// .long   0x33    # DW_AT_specification\n+// .long   0x87    # DW_AT_type\n+//...\n+// .uleb128 0x9    # (DIE (0x87) DW_TAG_base_type)\n+// .ascii \"int\\0\"  # DW_AT_name\n+\n+// { dg-final { scan-assembler \"a1.*(0x\\[0-9a-f\\]+)\\[ \\t\\]*# DW_AT_type.*\\\\1. DW_TAG_unspecified_type.*DW_AT_specification\\[\\n\\r\\]{1,2}\\[^\\n\\r\\]*(0x\\[0-9a-f\\]+)\\[ \\t\\]*# DW_AT_type.*\\\\2. DW_TAG_base_type\" } }\n+\n+struct A\n+{\n+  auto a1 () { return 42; }\n+};\n+\n+int main()\n+{\n+  A a;\n+  a.a1();\n+}"}]}