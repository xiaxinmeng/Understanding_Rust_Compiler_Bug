{"sha": "129bd066049f065e522990e63bb10ff92b3c018d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5YmQwNjYwNDlmMDY1ZTUyMjk5MGU2M2JiMTBmZjkyYjNjMDE4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-03T09:20:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-03T09:20:43Z"}, "message": "re PR tree-optimization/92734 (Missing match.pd simplification done by fold_binary_loc on generic)\n\n\tPR tree-optimization/92734\n\t* match.pd ((CST1 - A) +- CST2 -> CST3 - A,\n\tCST1 - (CST2 - A) -> CST3 + A): Handle nop casts around\n\tinner subtraction.\n\n\t* gcc.dg/tree-ssa/pr92734.c: New test.\n\nFrom-SVN: r278925", "tree": {"sha": "0e87242b0d74bc021daa843f615ce50227404735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e87242b0d74bc021daa843f615ce50227404735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129bd066049f065e522990e63bb10ff92b3c018d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129bd066049f065e522990e63bb10ff92b3c018d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129bd066049f065e522990e63bb10ff92b3c018d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129bd066049f065e522990e63bb10ff92b3c018d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4c772e26dabdf8e2bf2d26d0d7f8e60d97f3f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c772e26dabdf8e2bf2d26d0d7f8e60d97f3f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c772e26dabdf8e2bf2d26d0d7f8e60d97f3f4e"}], "stats": {"total": 83, "additions": 73, "deletions": 10}, "files": [{"sha": "68d1c288c514a02e2c99f1b44969118cb060dd71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=129bd066049f065e522990e63bb10ff92b3c018d", "patch": "@@ -1,3 +1,10 @@\n+2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92734\n+\t* match.pd ((CST1 - A) +- CST2 -> CST3 - A,\n+\tCST1 - (CST2 - A) -> CST3 + A): Handle nop casts around\n+\tinner subtraction.\n+\n 2019-12-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "d3312e5f27973dae36d5a5e01093232078ad8220", "filename": "gcc/match.pd", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=129bd066049f065e522990e63bb10ff92b3c018d", "patch": "@@ -2237,17 +2237,39 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* (CST1 - A) +- CST2 -> CST3 - A  */\n   (for outer_op (plus minus)\n    (simplify\n-    (outer_op (minus CONSTANT_CLASS_P@1 @0) CONSTANT_CLASS_P@2)\n-    (with { tree cst = const_binop (outer_op, type, @1, @2); }\n-     (if (cst && !TREE_OVERFLOW (cst))\n-      (minus { cst; } @0)))))\n-\n-  /* CST1 - (CST2 - A) -> CST3 + A  */\n+    (outer_op (nop_convert (minus CONSTANT_CLASS_P@1 @0)) CONSTANT_CLASS_P@2)\n+    /* If one of the types wraps, use that one.  */\n+    (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n+     /* If all 3 captures are CONSTANT_CLASS_P, punt, as we might recurse\n+\tforever if something doesn't simplify into a constant.  */\n+     (if (!CONSTANT_CLASS_P (@0))\n+      (minus (outer_op (view_convert @1) @2) (view_convert @0)))\n+     (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t  || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+      (view_convert (minus (outer_op @1 (view_convert @2)) @0))\n+      (if (types_match (type, @0))\n+       (with { tree cst = const_binop (outer_op, type, @1, @2); }\n+\t(if (cst && !TREE_OVERFLOW (cst))\n+\t (minus { cst; } @0))))))))\n+\n+  /* CST1 - (CST2 - A) -> CST3 + A\n+     Use view_convert because it is safe for vectors and equivalent for\n+     scalars.  */\n   (simplify\n-   (minus CONSTANT_CLASS_P@1 (minus CONSTANT_CLASS_P@2 @0))\n-   (with { tree cst = const_binop (MINUS_EXPR, type, @1, @2); }\n-    (if (cst && !TREE_OVERFLOW (cst))\n-     (plus { cst; } @0))))\n+   (minus CONSTANT_CLASS_P@1 (nop_convert (minus CONSTANT_CLASS_P@2 @0)))\n+   /* If one of the types wraps, use that one.  */\n+   (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n+    /* If all 3 captures are CONSTANT_CLASS_P, punt, as we might recurse\n+      forever if something doesn't simplify into a constant.  */\n+    (if (!CONSTANT_CLASS_P (@0))\n+     (plus (view_convert @0) (minus @1 (view_convert @2))))\n+    (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+     (view_convert (plus @0 (minus (view_convert @1) @2)))\n+     (if (types_match (type, @0))\n+      (with { tree cst = const_binop (MINUS_EXPR, type, @1, @2); }\n+       (if (cst && !TREE_OVERFLOW (cst))\n+\t(plus { cst; } @0)))))))\n \n /* ((T)(A)) + CST -> (T)(A + CST)  */\n #if GIMPLE"}, {"sha": "07193065f7d4d749347606ebf25cd1ed767b070d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=129bd066049f065e522990e63bb10ff92b3c018d", "patch": "@@ -1,5 +1,8 @@\n 2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/92734\n+\t* gcc.dg/tree-ssa/pr92734.c: New test.\n+\n \tPR target/92744\n \t* g++.dg/dfp/pr92744.C: New test.\n "}, {"sha": "2921bb4196eed850547829e6f04079c988403db9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr92734.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92734.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bd066049f065e522990e63bb10ff92b3c018d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92734.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr92734.c?ref=129bd066049f065e522990e63bb10ff92b3c018d", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/92734 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+/* { dg-final { scan-tree-dump-times \"return t_\\[0-9]*\\\\\\(D\\\\\\);\" 4 \"forwprop1\" } } */\n+\n+int\n+f1 (int t)\n+{\n+  return 1 - (int) (1U - t);\n+}\n+\n+int\n+f2 (int t)\n+{\n+  int a = 7U - t;\n+  return 7 - a;\n+}\n+\n+int\n+f3 (int t)\n+{\n+  int a = 32U - t;\n+  return 32 - a;\n+}\n+\n+int\n+f4 (int t)\n+{\n+  int a = 32 - t;\n+  return (int) (32 - (unsigned) a);\n+}"}]}