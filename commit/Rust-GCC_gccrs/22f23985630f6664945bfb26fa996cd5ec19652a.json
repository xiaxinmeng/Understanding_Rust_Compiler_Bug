{"sha": "22f23985630f6664945bfb26fa996cd5ec19652a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmMjM5ODU2MzBmNjY2NDk0NWJmYjI2ZmE5OTZjZDVlYzE5NjUyYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-04T04:33:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-04T04:33:45Z"}, "message": "v850.c, [...]: Follow spelling conventions.\n\n\t* config/v850/v850.c, config/v850/v850.h, config/v850/v850.md:\n\tFollow spelling conventions.\n\nFrom-SVN: r121567", "tree": {"sha": "c3660bb16c6705028a0d5caecf1b8ea108bd85f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3660bb16c6705028a0d5caecf1b8ea108bd85f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f23985630f6664945bfb26fa996cd5ec19652a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f23985630f6664945bfb26fa996cd5ec19652a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f23985630f6664945bfb26fa996cd5ec19652a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f23985630f6664945bfb26fa996cd5ec19652a/comments", "author": null, "committer": null, "parents": [{"sha": "3b426391d3efa5cfd0388f6c48192fe0e611dfa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b426391d3efa5cfd0388f6c48192fe0e611dfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b426391d3efa5cfd0388f6c48192fe0e611dfa9"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "6dcac70800f748ce0b408b40a475975a47463eec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22f23985630f6664945bfb26fa996cd5ec19652a", "patch": "@@ -12,6 +12,9 @@\n \tconfig/mt/mt.c, config/mt/mt.h, config/mt/mt.md: Follow\n \tspelling conventions.\n \n+\t* config/v850/v850.c, config/v850/v850.h, config/v850/v850.md:\n+\tFollow spelling conventions.\n+\n 2007-02-03  Douglas Gregor  <doug.gregor@gmail.com>\n \n        * c-opts.c (c_common_post_options): If C++0x mode is enabled, don't"}, {"sha": "e741c730b92d106b2c31df54ee25bb1d7020e465", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=22f23985630f6664945bfb26fa996cd5ec19652a", "patch": "@@ -854,10 +854,10 @@ output_move_single (rtx * operands)\n \t{\n \t  HOST_WIDE_INT value = INTVAL (src);\n \n-\t  if (CONST_OK_FOR_J (value))\t\t/* Signed 5 bit immediate.  */\n+\t  if (CONST_OK_FOR_J (value))\t\t/* Signed 5-bit immediate.  */\n \t    return \"mov %1,%0\";\n \n-\t  else if (CONST_OK_FOR_K (value))\t/* Signed 16 bit immediate.  */\n+\t  else if (CONST_OK_FOR_K (value))\t/* Signed 16-bit immediate.  */\n \t    return \"movea lo(%1),%.,%0\";\n \n \t  else if (CONST_OK_FOR_L (value))\t/* Upper 16 bits were set.  */\n@@ -876,10 +876,10 @@ output_move_single (rtx * operands)\n \n \t  const_double_split (src, &high, &low);\n \n-\t  if (CONST_OK_FOR_J (high))\t\t/* Signed 5 bit immediate.  */\n+\t  if (CONST_OK_FOR_J (high))\t\t/* Signed 5-bit immediate.  */\n \t    return \"mov %F1,%0\";\n \n-\t  else if (CONST_OK_FOR_K (high))\t/* Signed 16 bit immediate.  */\n+\t  else if (CONST_OK_FOR_K (high))\t/* Signed 16-bit immediate.  */\n \t    return \"movea lo(%F1),%.,%0\";\n \n \t  else if (CONST_OK_FOR_L (high))\t/* Upper 16 bits were set.  */\n@@ -1921,7 +1921,7 @@ Saved %d bytes via epilogue function (%d vs. %d) in function %s\\n\",\n \t}\n     }\n \n-  /* If no epilog save function is available, restore the registers the\n+  /* If no epilogue save function is available, restore the registers the\n      old fashioned way (one by one).  */\n   if (!restore_all)\n     {"}, {"sha": "b6691531eaa30f1a4849c5d131cf59b0c38a03f1", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=22f23985630f6664945bfb26fa996cd5ec19652a", "patch": "@@ -179,7 +179,7 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY\t\t32\n \n-/* The stack goes in 32 bit lumps.  */\n+/* The stack goes in 32-bit lumps.  */\n #define STACK_BOUNDARY \t\t32\n \n /* Allocation boundary (in *bits*) for the code of a function.\n@@ -387,19 +387,19 @@ enum reg_class\n #define INT_8_BITS(VALUE) ((unsigned) (VALUE) + 0x80 < 0x100)\n /* zero */\n #define CONST_OK_FOR_I(VALUE) ((VALUE) == 0)\n-/* 5 bit signed immediate */\n+/* 5-bit signed immediate */\n #define CONST_OK_FOR_J(VALUE) ((unsigned) (VALUE) + 0x10 < 0x20)\n-/* 16 bit signed immediate */\n+/* 16-bit signed immediate */\n #define CONST_OK_FOR_K(VALUE) ((unsigned) (VALUE) + 0x8000 < 0x10000)\n /* valid constant for movhi instruction.  */\n #define CONST_OK_FOR_L(VALUE) \\\n   (((unsigned) ((int) (VALUE) >> 16) + 0x8000 < 0x10000) \\\n    && CONST_OK_FOR_I ((VALUE & 0xffff)))\n-/* 16 bit unsigned immediate */\n+/* 16-bit unsigned immediate */\n #define CONST_OK_FOR_M(VALUE) ((unsigned)(VALUE) < 0x10000)\n-/* 5 bit unsigned immediate in shift instructions */\n+/* 5-bit unsigned immediate in shift instructions */\n #define CONST_OK_FOR_N(VALUE) ((unsigned) (VALUE) <= 31)\n-/* 9 bit signed immediate for word multiply instruction.  */\n+/* 9-bit signed immediate for word multiply instruction.  */\n #define CONST_OK_FOR_O(VALUE) ((unsigned) (VALUE) + 0x100 < 0x200)\n \n #define CONST_OK_FOR_P(VALUE) 0"}, {"sha": "6ef34c72b22cbf9c7ce4febcf6d208ebee27e99b", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f23985630f6664945bfb26fa996cd5ec19652a/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=22f23985630f6664945bfb26fa996cd5ec19652a", "patch": "@@ -185,7 +185,7 @@\n }\")\n \n ;; This is the same as the following pattern, except that it includes\n-;; support for arbitrary 32 bit immediates.\n+;; support for arbitrary 32-bit immediates.\n \n ;; ??? This always loads addresses using hilo.  If the only use of this address\n ;; was in a load/store, then we would get smaller code if we only loaded the\n@@ -409,7 +409,7 @@\n \n ;; ??? The scheduling info is probably wrong.\n \n-;; ??? This instruction can also generate the 32 bit highpart, but using it\n+;; ??? This instruction can also generate the 32-bit highpart, but using it\n ;; may increase code size counter to the desired result.\n \n ;; ??? This instructions can also give a DImode result.\n@@ -1646,7 +1646,7 @@\n \n \f\n ;; ----------------------------------------------------------------------\n-;; HELPER INSTRUCTIONS for saving the prologue and epilog registers\n+;; HELPER INSTRUCTIONS for saving the prologue and epilogue registers\n ;; ----------------------------------------------------------------------\n \n ;; This pattern will match a stack adjust RTX followed by any number of push"}]}