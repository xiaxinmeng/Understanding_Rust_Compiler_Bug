{"sha": "cc1a9ac808c9f04cb0deeff138b5da114f113c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxYTlhYzgwOGM5ZjA0Y2IwZGVlZmYxMzhiNWRhMTE0ZjExM2M3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-02T17:30:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-02T17:30:07Z"}, "message": "reflect: Use hand-coded .eh_frame section rather than CFI directives.\n\nFrom Rainer Orth.\n\nFrom-SVN: r203120", "tree": {"sha": "624e4795d248327ef48a277a8b18931e053892e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/624e4795d248327ef48a277a8b18931e053892e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1a9ac808c9f04cb0deeff138b5da114f113c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1a9ac808c9f04cb0deeff138b5da114f113c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1a9ac808c9f04cb0deeff138b5da114f113c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1a9ac808c9f04cb0deeff138b5da114f113c76/comments", "author": null, "committer": null, "parents": [{"sha": "78cedfb1a3f33be3d2230c6be1dbc27ba642d9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cedfb1a3f33be3d2230c6be1dbc27ba642d9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78cedfb1a3f33be3d2230c6be1dbc27ba642d9b5"}], "stats": {"total": 352, "additions": 331, "deletions": 21}, "files": [{"sha": "1057d9e85e405258068897331380880055d85bbe", "filename": "libgo/config.h.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=cc1a9ac808c9f04cb0deeff138b5da114f113c76", "patch": "@@ -3,6 +3,9 @@\n /* Define if building universal (internal helper macro) */\n #undef AC_APPLE_UNIVERSAL_BUILD\n \n+/* Define to the flags needed for the .section .eh_frame directive. */\n+#undef EH_FRAME_FLAGS\n+\n /* Define to 1 if you have the `accept4' function. */\n #undef HAVE_ACCEPT4\n \n@@ -12,6 +15,15 @@\n /* Define to 1 if you have the `asinl' function. */\n #undef HAVE_ASINL\n \n+/* Define if your assembler supports GNU comdat group syntax. */\n+#undef HAVE_AS_COMDAT_GAS\n+\n+/* Define if your assembler supports unwind section type. */\n+#undef HAVE_AS_X86_64_UNWIND_SECTION_TYPE\n+\n+/* Define if your assembler supports PC relative relocs. */\n+#undef HAVE_AS_X86_PCREL\n+\n /* Define to 1 if you have the `atan2l' function. */\n #undef HAVE_ATAN2L\n "}, {"sha": "40aeb0db2110fbb5ddddb079277948de7a1a9c23", "filename": "libgo/configure", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=cc1a9ac808c9f04cb0deeff138b5da114f113c76", "patch": "@@ -15179,6 +15179,101 @@ $as_echo \"#define SETCONTEXT_CLOBBERS_TLS 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether .eh_frame section should be read-only\" >&5\n+$as_echo_n \"checking whether .eh_frame section should be read-only... \" >&6; }\n+if test \"${libgo_cv_ro_eh_frame+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+libgo_cv_ro_eh_frame=no\n+echo 'extern void foo (void); void bar (void) { foo (); foo (); }' > conftest.c\n+if $CC $CFLAGS -S -fpic -fexceptions -o conftest.s conftest.c > /dev/null 2>&1; then\n+  if grep '.section.*eh_frame.*\"a\"' conftest.s > /dev/null; then\n+    libgo_cv_ro_eh_frame=yes\n+  elif grep '.section.*eh_frame.*#alloc' conftest.c \\\n+       | grep -v '#write' > /dev/null; then\n+    libgo_cv_ro_eh_frame=yes\n+  fi\n+fi\n+rm -f conftest.*\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_ro_eh_frame\" >&5\n+$as_echo \"$libgo_cv_ro_eh_frame\" >&6; }\n+if test \"x$libgo_cv_ro_eh_frame\" = xyes; then\n+\n+$as_echo \"#define EH_FRAME_FLAGS \\\"a\\\"\" >>confdefs.h\n+\n+else\n+\n+$as_echo \"#define EH_FRAME_FLAGS \\\"aw\\\"\" >>confdefs.h\n+\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking if assembler supports GNU comdat group syntax\" >&5\n+$as_echo_n \"checking if assembler supports GNU comdat group syntax... \" >&6; }\n+if test \"${libgo_cv_as_comdat_gnu+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+echo '.section .text,\"axG\",@progbits,.foo,comdat' > conftest.s\n+if $CC $CFLAGS -c conftest.s > /dev/null 2>&1; then\n+  libgo_cv_as_comdat_gnu=yes\n+else\n+  libgo_cv_as_comdat_gnu=no\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_as_comdat_gnu\" >&5\n+$as_echo \"$libgo_cv_as_comdat_gnu\" >&6; }\n+if test \"x$libgo_cv_as_comdat_gnu\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_COMDAT_GAS 1\" >>confdefs.h\n+\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler supports pc related relocs\" >&5\n+$as_echo_n \"checking assembler supports pc related relocs... \" >&6; }\n+if test \"${libgo_cv_as_x86_pcrel+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+libgo_cv_as_x86_pcrel=yes\n+echo '.text; foo: nop; .data; .long foo-.; .text' > conftest.s\n+if $CC $CFLAGS -c conftest.s 2>&1 | $EGREP -i 'illegal|warning' > /dev/null; then\n+    libgo_cv_as_x86_pcrel=no\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_as_x86_pcrel\" >&5\n+$as_echo \"$libgo_cv_as_x86_pcrel\" >&6; }\n+if test \"x$libgo_cv_as_x86_pcrel\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_X86_PCREL 1\" >>confdefs.h\n+\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler supports unwind section type\" >&5\n+$as_echo_n \"checking assembler supports unwind section type... \" >&6; }\n+if test \"${libgo_cv_as_x86_64_unwind_section_type+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+libgo_cv_as_x86_64_unwind_section_type=yes\n+echo '.section .eh_frame,\"a\",@unwind' > conftest.s\n+if $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+    libgo_cv_as_x86_64_unwind_section_type=no\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_as_x86_64_unwind_section_type\" >&5\n+$as_echo \"$libgo_cv_as_x86_64_unwind_section_type\" >&6; }\n+if test \"x$libgo_cv_as_x86_64_unwind_section_type\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1\" >>confdefs.h\n+\n+fi\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure"}, {"sha": "ef5ea8396dd8fc35304f34c4bb68d2ff9c808a90", "filename": "libgo/configure.ac", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=cc1a9ac808c9f04cb0deeff138b5da114f113c76", "patch": "@@ -757,6 +757,68 @@ if test \"$libgo_cv_lib_setcontext_clobbers_tls\" = \"yes\"; then\n \t    [Define if setcontext clobbers TLS variables])\n fi\n \n+AC_CACHE_CHECK([whether .eh_frame section should be read-only],\n+libgo_cv_ro_eh_frame, [\n+libgo_cv_ro_eh_frame=no\n+echo 'extern void foo (void); void bar (void) { foo (); foo (); }' > conftest.c\n+if $CC $CFLAGS -S -fpic -fexceptions -o conftest.s conftest.c > /dev/null 2>&1; then\n+  if grep '.section.*eh_frame.*\"a\"' conftest.s > /dev/null; then\n+    libgo_cv_ro_eh_frame=yes\n+  elif grep '.section.*eh_frame.*#alloc' conftest.c \\\n+       | grep -v '#write' > /dev/null; then\n+    libgo_cv_ro_eh_frame=yes\n+  fi\n+fi\n+rm -f conftest.*\n+])\n+if test \"x$libgo_cv_ro_eh_frame\" = xyes; then\n+  AC_DEFINE(EH_FRAME_FLAGS, \"a\",\n+\t    [Define to the flags needed for the .section .eh_frame directive.])\n+else\n+  AC_DEFINE(EH_FRAME_FLAGS, \"aw\",\n+\t    [Define to the flags needed for the .section .eh_frame directive.])\n+fi\n+\n+AC_CACHE_CHECK([if assembler supports GNU comdat group syntax],\n+libgo_cv_as_comdat_gnu, [\n+echo '.section .text,\"axG\",@progbits,.foo,comdat' > conftest.s\n+if $CC $CFLAGS -c conftest.s > /dev/null 2>&1; then\n+  libgo_cv_as_comdat_gnu=yes\n+else\n+  libgo_cv_as_comdat_gnu=no\n+fi\n+])\n+if test \"x$libgo_cv_as_comdat_gnu\" = xyes; then\n+  AC_DEFINE(HAVE_AS_COMDAT_GAS, 1,\n+\t    [Define if your assembler supports GNU comdat group syntax.])\n+fi\n+\n+AC_CACHE_CHECK([assembler supports pc related relocs],\n+libgo_cv_as_x86_pcrel, [\n+libgo_cv_as_x86_pcrel=yes\n+echo '.text; foo: nop; .data; .long foo-.; .text' > conftest.s\n+if $CC $CFLAGS -c conftest.s 2>&1 | $EGREP -i 'illegal|warning' > /dev/null; then\n+    libgo_cv_as_x86_pcrel=no\n+fi\n+])\n+if test \"x$libgo_cv_as_x86_pcrel\" = xyes; then\n+  AC_DEFINE(HAVE_AS_X86_PCREL, 1,\n+\t    [Define if your assembler supports PC relative relocs.])\n+fi\n+\n+AC_CACHE_CHECK([assembler supports unwind section type],\n+libgo_cv_as_x86_64_unwind_section_type, [\n+libgo_cv_as_x86_64_unwind_section_type=yes\n+echo '.section .eh_frame,\"a\",@unwind' > conftest.s\n+if $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+    libgo_cv_as_x86_64_unwind_section_type=no\n+fi\n+])\n+if test \"x$libgo_cv_as_x86_64_unwind_section_type\" = xyes; then\n+  AC_DEFINE(HAVE_AS_X86_64_UNWIND_SECTION_TYPE, 1,\n+\t    [Define if your assembler supports unwind section type.])\n+fi\n+\n AC_CACHE_SAVE\n \n if test ${multilib} = yes; then"}, {"sha": "fb49281e2e3bf3d4b158c85c22582b21514f985d", "filename": "libgo/go/reflect/makefunc_386.S", "status": "modified", "additions": 101, "deletions": 15, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_386.S?ref=cc1a9ac808c9f04cb0deeff138b5da114f113c76", "patch": "@@ -4,14 +4,16 @@\n \n # MakeFunc 386 assembly code.\n \n+#include \"config.h\"\n+\n \t.global reflect.makeFuncStub\n \n #ifdef __ELF__\n \t.type reflect.makeFuncStub,@function\n #endif\n \n reflect.makeFuncStub:\n-\t.cfi_startproc\n+.LFB1:\n \n \t# Go does not provide any equivalent to the regparm function\n \t# attribute, so on Go we do not need to worry about passing\n@@ -27,15 +29,12 @@ reflect.makeFuncStub:\n \t# }\n \n \tpushl\t%ebp\n-\t.cfi_def_cfa_offset 8\n-\t.cfi_offset %ebp, -8\n+.LCFI0:\n \tmovl\t%esp, %ebp\n-\t.cfi_def_cfa_register %ebp\n-\n+.LCFI1:\n \tpushl\t%ebx\t\t# In case this is PIC.\n-\n \tsubl\t$36, %esp\t# Enough for args and to align stack.\n-\t.cfi_offset %ebx, -12\n+.LCFI2:\n \n #ifdef __PIC__\n \tcall\t__x86.get_pc_thunk.bx\n@@ -75,36 +74,123 @@ reflect.makeFuncStub:\n \n \taddl\t$36, %esp\n \tpopl\t%ebx\n-\t.cfi_restore %ebx\n+.LCFI3:\n \tpopl\t%ebp\n-\t.cfi_restore %ebp\n-\t.cfi_def_cfa %esp, 4\n-\n+.LCFI4:\n \tret\n-\t.cfi_endproc\n-\n+.LFE1:\n #ifdef __ELF__\n \t.size\treflect.makeFuncStub, . - reflect.makeFuncStub\n #endif\n \n #ifdef __PIC__\n+#ifdef HAVE_AS_COMDAT_GAS\n \t.section\t.text.__x86.get_pc_thunk.bx,\"axG\",@progbits,__x86.get_pc_thunk.bx,comdat\n+#else\n+\t/* Sun as needs a different syntax.  */\n+\t.section\t.text.__x86.get_pc_thunk.bx%__x86.get_pc_thunk.bx,\"ax\",@progbits\n+\t.group\t\t__x86.get_pc_thunk.bx,.text.__x86.get_pc_thunk.bx%__x86.get_pc_thunk.bx,#comdat\n+#endif\n \t.globl\t__x86.get_pc_thunk.bx\n \t.hidden\t__x86.get_pc_thunk.bx\n #ifdef __ELF__\n \t.type\t__x86.get_pc_thunk.bx, @function\n #endif\n __x86.get_pc_thunk.bx:\n-\t.cfi_startproc\n+.LFB2:\n \tmovl\t(%esp), %ebx\n \tret\n-\t.cfi_endproc\n+.LFE2:\n #ifdef __ELF__\n \t.size\t__x86.get_pc_thunk.bx, . - __x86.get_pc_thunk.bx\n #endif\n #endif\n \n #ifdef __ELF__\n+#if defined __PIC__\n+# if defined __sun__ && defined __svr4__\n+/* 32-bit Solaris 2/x86 uses datarel encoding for PIC.  GNU ld before 2.22\n+   doesn't correctly sort .eh_frame_hdr with mixed encodings, so match this.  */\n+#  define FDE_ENCODING\t\t0x30\t/* datarel */\n+#  define FDE_ENCODE(X)\t\tX@GOTOFF\n+# else\n+#  define FDE_ENCODING\t\t0x1b\t/* pcrel sdata4 */\n+#  if defined HAVE_AS_X86_PCREL\n+#   define FDE_ENCODE(X)\tX-.\n+#  else\n+#   define FDE_ENCODE(X)\tX@rel\n+#  endif\n+# endif\n+#else\n+# define FDE_ENCODING\t\t0\t/* absolute */\n+# define FDE_ENCODE(X)\t\tX\n+#endif\n+\n+\t.section\t.eh_frame,EH_FRAME_FLAGS,@progbits\n+.Lframe1:\n+\t.long\t.LECIE1-.LSCIE1\t/* Length of Common Information Entry */\n+.LSCIE1:\n+\t.long\t0x0\t/* CIE Identifier Tag */\n+\t.byte\t0x1\t/* CIE Version */\n+\t.ascii \"zR\\0\"\t/* CIE Augmentation */\n+\t.byte\t0x1\t/* .uleb128 0x1; CIE Code Alignment Factor */\n+\t.byte\t0x7c\t/* .sleb128 -4; CIE Data Alignment Factor */\n+\t.byte\t0x8\t/* CIE RA Column */\n+\t.byte\t0x1\t/* .uleb128 0x1; Augmentation size */\n+\t.byte\tFDE_ENCODING\n+\t.byte\t0xc\t/* DW_CFA_def_cfa */\n+\t.byte\t0x4\t/* .uleb128 0x4 */\n+\t.byte\t0x4\t/* .uleb128 0x4 */\n+\t.byte\t0x88\t/* DW_CFA_offset, column 0x8 */\n+\t.byte\t0x1\t/* .uleb128 0x1 */\n+\t.align 4\n+.LECIE1:\n+.LSFDE1:\n+\t.long\t.LEFDE1-.LASFDE1\t/* FDE Length */\n+.LASFDE1:\n+\t.long\t.LASFDE1-.Lframe1\t/* FDE CIE offset */\n+\t.long\tFDE_ENCODE(.LFB1)\t/* FDE initial location */\n+\t.long\t.LFE1-.LFB1\t\t/* FDE address range */\n+\t.byte\t0x0\t/* .uleb128 0x0; Augmentation size */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI0-.LFB1\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n+\t.byte\t0x8\t/* .uleb128 0x8 */\n+\t.byte\t0x85\t/* DW_CFA_offset, column 0x5 */\n+\t.byte\t0x2\t/* .uleb128 0x2 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI1-.LCFI0\n+\t.byte\t0xd\t/* DW_CFA_def_cfa_register */\n+\t.byte\t0x5\t/* .uleb128 0x5 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI2-.LCFI1\n+\t.byte\t0x83\t/* .DW_CFA_offset, column 0x3 */\n+\t.byte\t0x3\t/* .uleb128 0x3 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI3-.LCFI2\n+\t.byte\t0xc3\t/* DW_CFA_restore, column 0x3 */\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI4-.LCFI3\n+\t.byte\t0xc5\t/* DW_CFA_restore, column 0x5 */\n+\t.byte\t0xc\t/* DW_CFA_def_cfa */\n+\t.byte\t0x4\t/* .uleb128 0x4 */\n+\t.byte\t0x4\t/* .uleb128 0x4 */\n+\t.align 4\n+.LEFDE1:\n+#ifdef __PIC__\n+.LSFDE2:\n+\t.long\t.LEFDE2-.LASFDE2\t/* FDE Length */\n+.LASFDE2:\n+\t.long\t.LASFDE2-.Lframe1\t/* FDE CIE offset */\n+\t.long\tFDE_ENCODE(.LFB2)\t/* FDE initial location */\n+\t.long\t.LFE2-.LFB2\t\t/* FDE address range */\n+\t.byte\t0x0\t/* .uleb128 0x0; Augmentation size */\n+\t.align 4\n+.LEFDE2:\n+#endif /* __PIC__ */\n+#endif /* __ELF__ */\n+\n+#if defined(__ELF__) && defined(__linux__)\n \t.section\t.note.GNU-stack,\"\",@progbits\n \t.section\t.note.GNU-split-stack,\"\",@progbits\n \t.section\t.note.GNU-no-split-stack,\"\",@progbits"}, {"sha": "9d12f193f01875f42223f7f61701991c48aadc6d", "filename": "libgo/go/reflect/makefunc_amd64.S", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fgo%2Freflect%2Fmakefunc_amd64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1a9ac808c9f04cb0deeff138b5da114f113c76/libgo%2Fgo%2Freflect%2Fmakefunc_amd64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_amd64.S?ref=cc1a9ac808c9f04cb0deeff138b5da114f113c76", "patch": "@@ -4,14 +4,16 @@\n \n # MakeFunc amd64 assembly code.\n \n+#include \"config.h\"\n+\n \t.global\treflect.makeFuncStub\n \n #ifdef __ELF__\n \t.type\treflect.makeFuncStub,@function\n #endif\n \n reflect.makeFuncStub:\n-\t.cfi_startproc\n+.LFB1:\n \n \t# Store all the parameter registers in a struct that looks\n \t# like:\n@@ -35,10 +37,9 @@ reflect.makeFuncStub:\n \t# };\n \n \tpushq\t%rbp\n-\t.cfi_def_cfa_offset 16\n-\t.cfi_offset %rbp, -16\n+.LCFI0:\n \tmovq\t%rsp, %rbp\n-\t.cfi_def_cfa_register %rbp\n+.LCFI1:\n \n \tsubq\t$0xc0, %rsp\t\t# Space for struct on stack.\n \n@@ -91,16 +92,70 @@ reflect.makeFuncStub:\n \t# double type.\n \n \tleave\n-\t.cfi_def_cfa %rsp, 8\n+.LCFI2:\n \n \tret\n+.LFE1:\n \n-\t.cfi_endproc\n #ifdef __ELF__\n \t.size\treflect.makeFuncStub, . - reflect.makeFuncStub\n #endif\n \n #ifdef __ELF__\n+#ifdef HAVE_AS_X86_64_UNWIND_SECTION_TYPE\n+\t.section\t.eh_frame,\"a\",@unwind\n+#else\n+\t.section\t.eh_frame,\"a\",@progbits\n+#endif\n+.Lframe1:\n+\t.long\t.LECIE1-.LSCIE1\t/* Length of Common Information Entry */\n+.LSCIE1:\n+\t.long\t0x0\t\t/* CIE Identifier Tag */\n+\t.byte\t0x1\t\t/* CIE Version */\n+\t.ascii \"zR\\0\"\t\t/* CIE Augmentation */\n+\t.uleb128 1\t\t/* CIE Code Alignment Factor */\n+\t.sleb128 -8\t\t/* CIE Data Alignment Factor */\n+\t.byte\t0x10\t\t/* CIE RA Column */\n+\t.uleb128 1\t\t/* Augmentation size */\n+\t.byte\t0x1b\t\t/* FDE Encoding (pcrel sdata4) */\n+\t.byte\t0xc\t\t/* DW_CFA_def_cfa, %rsp offset 8 */\n+\t.uleb128 7\n+\t.uleb128 8\n+\t.byte\t0x80+16\t\t/* DW_CFA_offset, %rip offset 1*-8 */\n+\t.uleb128 1\n+\t.align 8\n+.LECIE1:\n+.LSFDE1:\n+\t.long\t.LEFDE1-.LASFDE1\t/* FDE Length */\n+.LASFDE1:\n+\t.long\t.LASFDE1-.Lframe1\t/* FDE CIE offset */\n+#if HAVE_AS_X86_PCREL\n+\t.long\t.LFB1-.\t\t\t/* FDE initial location */\n+#else\n+\t.long\t.LFB1@rel\n+#endif\n+\t.long\t.LFE1-.LFB1\t\t/* FDE address range */\n+\t.uleb128 0x0\t\t\t/* Augmentation size */\n+\t.byte\t0x4\t\t\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI0-.LFB1\n+\t.byte\t0xe\t\t\t/* DW_CFA_def_cfa_offset */\n+\t.uleb128 16\n+\t.byte\t0x86\t\t\t/* DW_CFA_offset, column 0x6 */\n+\t.uleb128 2\n+\t.byte\t0x4\t\t\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI1-.LCFI0\n+\t.byte\t0xd\t\t\t/* DW_CFA_def_cfa_register */\n+\t.uleb128 6\n+\t.byte\t0x2\t\t\t/* DW_CFA_advance_loc1 */\n+\t.byte\t.LCFI2-.LCFI1\n+\t.byte\t0xc\t\t\t/* DW_CFA_def_cfa */\n+\t.uleb128 7\n+\t.uleb128 8\n+\t.align 8\n+.LEFDE1:\n+#endif /* __ELF__ */\n+\n+#if defined(__ELF__) && defined(__linux__)\n \t.section\t.note.GNU-stack,\"\",@progbits\n \t.section\t.note.GNU-split-stack,\"\",@progbits\n \t.section\t.note.GNU-no-split-stack,\"\",@progbits"}]}