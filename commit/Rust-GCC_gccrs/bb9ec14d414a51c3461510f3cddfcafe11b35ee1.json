{"sha": "bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI5ZWMxNGQ0MTRhNTFjMzQ2MTUxMGYzY2RkZmNhZmUxMWIzNWVlMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-23T08:30:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-23T08:30:41Z"}, "message": "re PR tree-optimization/81403 (wrong code at -O3)\n\n2017-11-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81403\n\t* tree-ssa-pre.c (get_representative_for): Add parameter specifying\n\ta block we need a leader relative to.\n\t(phi_translate_1): For nary processing require a leader from\n\tget_representative_for given we run expression simplification\n\tusing match-and-simplify.  Remove previous fix.\n\nFrom-SVN: r255092", "tree": {"sha": "4ad45bee7035cbc0d2e122444b7029877fc69d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad45bee7035cbc0d2e122444b7029877fc69d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9ec14d414a51c3461510f3cddfcafe11b35ee1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78bebfb26fba87cc4738d9757fe0621b6ec02089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bebfb26fba87cc4738d9757fe0621b6ec02089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bebfb26fba87cc4738d9757fe0621b6ec02089"}], "stats": {"total": 77, "additions": 32, "deletions": 45}, "files": [{"sha": "7cabfd66b936b002f07bcf0763e3e81d1ca64e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9ec14d414a51c3461510f3cddfcafe11b35ee1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9ec14d414a51c3461510f3cddfcafe11b35ee1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "patch": "@@ -1,3 +1,12 @@\n+2017-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81403\n+\t* tree-ssa-pre.c (get_representative_for): Add parameter specifying\n+\ta block we need a leader relative to.\n+\t(phi_translate_1): For nary processing require a leader from\n+\tget_representative_for given we run expression simplification\n+\tusing match-and-simplify.  Remove previous fix.\n+\n 2017-11-22  Jeff Law  <law@redhat.com>\n \n \t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::try_find_new_range):"}, {"sha": "a9dcd5edd50ecfb6d298e5af844aaab55759df35", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 23, "deletions": 45, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9ec14d414a51c3461510f3cddfcafe11b35ee1/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9ec14d414a51c3461510f3cddfcafe11b35ee1/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=bb9ec14d414a51c3461510f3cddfcafe11b35ee1", "patch": "@@ -1257,7 +1257,7 @@ get_expr_type (const pre_expr e)\n   gcc_unreachable ();\n }\n \n-/* Get a representative SSA_NAME for a given expression.\n+/* Get a representative SSA_NAME for a given expression that is available in B.\n    Since all of our sub-expressions are treated as values, we require\n    them to be SSA_NAME's for simplicity.\n    Prior versions of GVNPRE used to use \"value handles\" here, so that\n@@ -1266,9 +1266,9 @@ get_expr_type (const pre_expr e)\n    them to be usable without finding leaders).  */\n \n static tree\n-get_representative_for (const pre_expr e)\n+get_representative_for (const pre_expr e, basic_block b = NULL)\n {\n-  tree name;\n+  tree name, valnum = NULL_TREE;\n   unsigned int value_id = get_expr_value_id (e);\n \n   switch (e->kind)\n@@ -1289,7 +1289,18 @@ get_representative_for (const pre_expr e)\n \t  {\n \t    pre_expr rep = expression_for_id (i);\n \t    if (rep->kind == NAME)\n-\t      return VN_INFO (PRE_EXPR_NAME (rep))->valnum;\n+\t      {\n+\t\ttree name = PRE_EXPR_NAME (rep);\n+\t\tvalnum = VN_INFO (name)->valnum;\n+\t\tgimple *def = SSA_NAME_DEF_STMT (name);\n+\t\t/* We have to return either a new representative or one\n+\t\t   that can be used for expression simplification and thus\n+\t\t   is available in B.  */\n+\t\tif (! b \n+\t\t    || gimple_nop_p (def)\n+\t\t    || dominated_by_p (CDI_DOMINATORS, b, gimple_bb (def)))\n+\t\t  return name;\n+\t      }\n \t    else if (rep->kind == CONSTANT)\n \t      return PRE_EXPR_CONSTANT (rep);\n \t  }\n@@ -1305,7 +1316,7 @@ get_representative_for (const pre_expr e)\n      to compute it.  */\n   name = make_temp_ssa_name (get_expr_type (e), gimple_build_nop (), \"pretmp\");\n   VN_INFO_GET (name)->value_id = value_id;\n-  VN_INFO (name)->valnum = name;\n+  VN_INFO (name)->valnum = valnum ? valnum : name;\n   /* ???  For now mark this SSA name for release by SCCVN.  */\n   VN_INFO (name)->needs_insertion = true;\n   add_to_value (value_id, get_or_alloc_expr_for_name (name));\n@@ -1356,7 +1367,9 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tleader = find_leader_in_sets (op_val_id, set1, set2);\n                 result = phi_translate (leader, set1, set2, pred, phiblock);\n \t\tif (result && result != leader)\n-\t\t  newnary->op[i] = get_representative_for (result);\n+\t\t  /* Force a leader as well as we are simplifying this\n+\t\t     expression.  */\n+\t\t  newnary->op[i] = get_representative_for (result, pred);\n \t\telse if (!result)\n \t\t  return NULL;\n \n@@ -1398,6 +1411,10 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\t  return constant;\n \t      }\n \n+\t    /* vn_nary_* do not valueize operands.  */\n+\t    for (i = 0; i < newnary->length; ++i)\n+\t      if (TREE_CODE (newnary->op[i]) == SSA_NAME)\n+\t\tnewnary->op[i] = VN_INFO (newnary->op[i])->valnum;\n \t    tree result = vn_nary_op_lookup_pieces (newnary->length,\n \t\t\t\t\t\t    newnary->opcode,\n \t\t\t\t\t\t    newnary->type,\n@@ -1414,45 +1431,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tPRE_EXPR_NARY (expr) = nary;\n \t\tnew_val_id = nary->value_id;\n \t\tget_or_alloc_expression_id (expr);\n-\t\t/* When we end up re-using a value number make sure that\n-\t\t   doesn't have unrelated (which we can't check here)\n-\t\t   range or points-to info on it.  */\n-\t\tif (result\n-\t\t    && INTEGRAL_TYPE_P (TREE_TYPE (result))\n-\t\t    && SSA_NAME_RANGE_INFO (result)\n-\t\t    && ! SSA_NAME_IS_DEFAULT_DEF (result))\n-\t\t  {\n-\t\t    if (! VN_INFO (result)->info.range_info)\n-\t\t      {\n-\t\t\tVN_INFO (result)->info.range_info\n-\t\t\t  = SSA_NAME_RANGE_INFO (result);\n-\t\t\tVN_INFO (result)->range_info_anti_range_p\n-\t\t\t  = SSA_NAME_ANTI_RANGE_P (result);\n-\t\t      }\n-\t\t    if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t      {\n-\t\t\tfprintf (dump_file, \"clearing range info of \");\n-\t\t\tprint_generic_expr (dump_file, result);\n-\t\t\tfprintf (dump_file, \"\\n\");\n-\t\t      }\n-\t\t    SSA_NAME_RANGE_INFO (result) = NULL;\n-\t\t  }\n-\t\telse if (result\n-\t\t\t && POINTER_TYPE_P (TREE_TYPE (result))\n-\t\t\t && SSA_NAME_PTR_INFO (result)\n-\t\t\t && ! SSA_NAME_IS_DEFAULT_DEF (result))\n-\t\t  {\n-\t\t    if (! VN_INFO (result)->info.ptr_info)\n-\t\t      VN_INFO (result)->info.ptr_info\n-\t\t\t= SSA_NAME_PTR_INFO (result);\n-\t\t    if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t      {\n-\t\t\tfprintf (dump_file, \"clearing points-to info of \");\n-\t\t\tprint_generic_expr (dump_file, result);\n-\t\t\tfprintf (dump_file, \"\\n\");\n-\t\t      }\n-\t\t    SSA_NAME_PTR_INFO (result) = NULL;\n-\t\t  }\n \t      }\n \t    else\n \t      {"}]}