{"sha": "24ea727a641c58ddf03111c1bdcc2565330870c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlYTcyN2E2NDFjNThkZGYwMzExMWMxYmRjYzI1NjUzMzA4NzBjOQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-12-18T08:50:24Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2009-12-18T08:50:24Z"}, "message": "re PR c++/31665 (%s substituted with \"built-in\"/\"library\" can't be properly translated)\n\ncp/\n2009-12-16  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c++/31665\n        * decl.c (duplicate_decls, grokdeclarator): Put the\n        diagnostics in full sentences for easy translation and wrapped into\n        G_().\n        * typeck.c (build_x_unary_op): Likewise.\n\ntestsuite/\n2009-12-16  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        * g++.old-deja/g++.brendan/misc6.C: Make expected dg-error strings\n        explicit.\n\nFrom-SVN: r155340", "tree": {"sha": "9e7607d4c87c87aeda04a1a2cee8c7ab30563d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e7607d4c87c87aeda04a1a2cee8c7ab30563d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ea727a641c58ddf03111c1bdcc2565330870c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea727a641c58ddf03111c1bdcc2565330870c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ea727a641c58ddf03111c1bdcc2565330870c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea727a641c58ddf03111c1bdcc2565330870c9/comments", "author": null, "committer": null, "parents": [{"sha": "deb109b24d6c3228c1a5057847e2c2dc4bf48c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb109b24d6c3228c1a5057847e2c2dc4bf48c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb109b24d6c3228c1a5057847e2c2dc4bf48c1e"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "1b7411b835eb3e046172d5ed8d146fc8f5ccc10b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24ea727a641c58ddf03111c1bdcc2565330870c9", "patch": "@@ -1,3 +1,10 @@\n+2009-12-18  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c++/31665\n+\t* decl.c (duplicate_decls, grokdeclarator): Put the diagnostics in\n+\tfull sentences for easy translation and wrapped into G_().\n+\t* typeck.c (build_x_unary_op): Likewise.\n+\n 2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n \n \t* call.c (build_over_call, build_java_interface_fn_ref): Update"}, {"sha": "3c9649d2a27318212dfce6225fc754d12b640528", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=24ea727a641c58ddf03111c1bdcc2565330870c9", "patch": "@@ -1180,9 +1180,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t     bad choice of name.  */\n \t  if (! TREE_PUBLIC (newdecl))\n \t    {\n-\t      warning (OPT_Wshadow, \"shadowing %s function %q#D\",\n-\t\t       DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n-\t\t       olddecl);\n+\t      warning (OPT_Wshadow, \n+                       DECL_BUILT_IN (olddecl)\n+                       ? G_(\"shadowing built-in function %q#D\")\n+                       : G_(\"shadowing library function %q#D\"), olddecl);\n \t      /* Discard the old built-in function.  */\n \t      return NULL_TREE;\n \t    }\n@@ -1253,9 +1254,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t\t   olddecl);\n \t\t}\n \t      else\n-\t\twarning (OPT_Wshadow, \"shadowing %s function %q#D\",\n-\t\t\t DECL_BUILT_IN (olddecl) ? \"built-in\" : \"library\",\n-\t\t\t olddecl);\n+\t\twarning (OPT_Wshadow, \n+                         DECL_BUILT_IN (olddecl)\n+                         ? G_(\"shadowing built-in function %q#D\")\n+                         : G_(\"shadowing library function %q#D\"), olddecl);\n \t    }\n \t  else\n \t    /* Discard the old built-in function.  */\n@@ -8616,8 +8618,9 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t  if (TREE_CODE (type) == FUNCTION_TYPE\n \t      && cp_type_quals (type) != TYPE_UNQUALIFIED)\n-\t    error (\"cannot declare %s to qualified function type %qT\",\n-\t\t   declarator->kind == cdk_reference ? \"reference\" : \"pointer\",\n+            error (declarator->kind == cdk_reference\n+                   ? G_(\"cannot declare reference to qualified function type %qT\")\n+                   : G_(\"cannot declare pointer to qualified function type %qT\"),\n \t\t   type);\n \n \t  if (declarator->kind == cdk_reference)"}, {"sha": "e001a07771f0afcdddd70d3ce03d126b25ebdda9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=24ea727a641c58ddf03111c1bdcc2565330870c9", "patch": "@@ -4361,9 +4361,10 @@ build_x_unary_op (enum tree_code code, tree xarg, tsubst_flags_t complain)\n \t  tree fn = get_first_fn (xarg);\n \t  if (DECL_CONSTRUCTOR_P (fn) || DECL_DESTRUCTOR_P (fn))\n \t    {\n-\t      const char *type =\n-\t\t(DECL_CONSTRUCTOR_P (fn) ? \"constructor\" : \"destructor\");\n-\t      error (\"taking address of %s %qE\", type, xarg);\n+\t      error (DECL_CONSTRUCTOR_P (fn)\n+                     ? G_(\"taking address of constructor %qE\")\n+                     : G_(\"taking address of destructor %qE\"),\n+                     xarg);\n \t      return error_mark_node;\n \t    }\n \t}"}, {"sha": "7e55a57ba4851a6e4323a8a1b1cbea5963bfb7a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24ea727a641c58ddf03111c1bdcc2565330870c9", "patch": "@@ -1,3 +1,8 @@\n+2009-12-18  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* g++.old-deja/g++.brendan/misc6.C: Make expected dg-error strings\n+\texplicit.\n+\n 2009-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/debug/dwarf2/const-1.c: Don't expect DW_AT_const_value,"}, {"sha": "93b241b9e0403bed0da20c2944ba6a2aafb355b3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea727a641c58ddf03111c1bdcc2565330870c9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc6.C?ref=24ea727a641c58ddf03111c1bdcc2565330870c9", "patch": "@@ -4,6 +4,6 @@\n inline int i;// { dg-error \"\" } .*\n struct c { inline int i; };// { dg-error \"\" } .*\n int foo (inline int i);// { dg-error \"\" } .*\n-inline class c; // { dg-error \"\" } inline\n+inline class c; // { dg-error \"'inline' can only be specified for functions\" } inline\n inline typedef int t; // { dg-error \"\" } inline\n-class d { inline friend class c; }; // { dg-error \"\" } inline\n+class d { inline friend class c; }; // { dg-error \"'inline' can only be specified for functions\" } inline"}]}