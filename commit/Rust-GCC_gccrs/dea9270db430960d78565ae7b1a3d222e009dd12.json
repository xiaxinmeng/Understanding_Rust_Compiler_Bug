{"sha": "dea9270db430960d78565ae7b1a3d222e009dd12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhOTI3MGRiNDMwOTYwZDc4NTY1YWU3YjFhM2QyMjJlMDA5ZGQxMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-05-17T17:12:23Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-05-17T17:12:23Z"}, "message": "interrupt_thread-1.c, [...]: New.\n\n\t* gcc.target/m68k/interrupt_thread-1.c,\n\tgcc.target/m68k/interrupt_thread-2.c,\n\tgcc.target/m68k/interrupt_thread-3.c: New.\n\t* gcc.target/m68k/m68k.exp: Accept fido.\n\nFrom-SVN: r124804", "tree": {"sha": "f3c85e17e31cf43061a80b769f10f0b80c94a615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c85e17e31cf43061a80b769f10f0b80c94a615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea9270db430960d78565ae7b1a3d222e009dd12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea9270db430960d78565ae7b1a3d222e009dd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea9270db430960d78565ae7b1a3d222e009dd12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea9270db430960d78565ae7b1a3d222e009dd12/comments", "author": null, "committer": null, "parents": [{"sha": "9940897603862c41e0773e91698d9dc650e1f6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9940897603862c41e0773e91698d9dc650e1f6e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9940897603862c41e0773e91698d9dc650e1f6e6"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "ee7179cd4d9627e85427cdf2c86a1d8ef78d5910", "filename": "gcc/testsuite/gcc.target/m68k/interrupt_thread-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea9270db430960d78565ae7b1a3d222e009dd12/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea9270db430960d78565ae7b1a3d222e009dd12/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-1.c?ref=dea9270db430960d78565ae7b1a3d222e009dd12", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=fidoa -O2 -fomit-frame-pointer\" } */\n+\n+/* Check that interrupt_thread attribute works.  */\n+\n+#ifdef __mfido__\n+extern void foo (void) __attribute__ ((interrupt_thread));\n+\n+int a, b, c, d;\n+\n+void bar (void);\n+\n+void\n+foo (void)\n+{\n+  int w, x, y, z;\n+\n+  w = a;\n+  x = b;\n+  y = c;\n+  z = d;\n+\n+  bar ();\n+\n+  a = w;\n+  b = x;\n+  c = y;\n+  d = z;\n+}\n+#else\n+/* If the current mutilib is, say, -mcpu=5485, the compiler gets\n+   -mcpu=fidoa -mcpu=5485, where -mcpu=fidoa is overridden.  In that\n+   case, we just print out \"sleep\" in the assembly file and pretend\n+   that everything is all right.  */\n+asm (\"sleep\");\n+#endif\n+\n+/* \"sleep\" should be generated in place of \"rts\".  */\n+/* { dg-final { scan-assembler-times \"sleep\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rts\" 0 } } */\n+\n+/* There should be no stack adjustment.  */\n+/* { dg-final { scan-assembler-times \"sp\" 0 } } */"}, {"sha": "6f87c862fa69338e0589c5e7300fe5836b0f1e77", "filename": "gcc/testsuite/gcc.target/m68k/interrupt_thread-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea9270db430960d78565ae7b1a3d222e009dd12/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea9270db430960d78565ae7b1a3d222e009dd12/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-2.c?ref=dea9270db430960d78565ae7b1a3d222e009dd12", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=fidoa\" } */\n+\n+/* Check that an error is issued for using more than one\n+   interrupt_attribute at the same time.  */\n+\n+/* If the current mutilib is, say, -mcpu=5485, the compiler gets\n+   -mcpu=fidoa -mcpu=5485, where -mcpu=fidoa is overridden.  In that\n+   case, we just use two interrupt_handler attributes and expect the\n+   same error.  */\n+#ifdef __mfido___\n+#define IH interrupt_thread\n+#else\n+#define IH interrupt_handler\n+#endif\n+\n+extern void f1 (void) __attribute__((interrupt_handler, interrupt_handler)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+\n+extern void f2 (void) __attribute__((interrupt_handler, IH)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+\n+extern void f3 (void) __attribute__((IH, interrupt_handler)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */\n+\n+extern void f4 (void) __attribute__((IH, IH)); /* { dg-error \"error: multiple interrupt attributes not allowed\" } */"}, {"sha": "cd2531eb5d777d02587b25c152cb018a7c3e62c0", "filename": "gcc/testsuite/gcc.target/m68k/interrupt_thread-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea9270db430960d78565ae7b1a3d222e009dd12/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea9270db430960d78565ae7b1a3d222e009dd12/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Finterrupt_thread-3.c?ref=dea9270db430960d78565ae7b1a3d222e009dd12", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=cpu32\" } */\n+\n+/* Check that interrupt_thread is rejected on CPUs other than\n+   fido.  */\n+\n+extern void foo (void) __attribute__((interrupt_thread)); /* { dg-error \"error: interrupt_thread is available only on fido\" } */"}]}