{"sha": "16c6dcc57b81334bdfc99b994686f42369e33094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjNmRjYzU3YjgxMzM0YmRmYzk5Yjk5NDY4NmY0MjM2OWUzMzA5NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-20T15:13:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-20T15:13:50Z"}, "message": "compiler: Don't let dot-import names match names from previous files.\n\nThe test case for this will be bug488.go in the main\nrepository: https://codereview.appspot.com/118000043 .\n\nFrom-SVN: r212871", "tree": {"sha": "03a02caa9871571c9a9490ee4eba3abf17caf9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a02caa9871571c9a9490ee4eba3abf17caf9fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c6dcc57b81334bdfc99b994686f42369e33094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c6dcc57b81334bdfc99b994686f42369e33094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c6dcc57b81334bdfc99b994686f42369e33094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c6dcc57b81334bdfc99b994686f42369e33094/comments", "author": null, "committer": null, "parents": [{"sha": "aefa5ff4cf0a058ff76dbd0bea246b690e9dcac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefa5ff4cf0a058ff76dbd0bea246b690e9dcac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefa5ff4cf0a058ff76dbd0bea246b690e9dcac0"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "623befd1027960c52031dd67ed4e9b1fbfa90663", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=16c6dcc57b81334bdfc99b994686f42369e33094", "patch": "@@ -473,7 +473,7 @@ Gogo::import_package(const std::string& filename,\n \t\t bindings->begin_declarations();\n \t       p != bindings->end_declarations();\n \t       ++p)\n-\t    this->add_named_object(p->second);\n+\t    this->add_dot_import_object(p->second);\n \t}\n       else if (ln == \"_\")\n \tpackage->set_uses_sink_alias();\n@@ -1968,11 +1968,32 @@ Gogo::add_sink()\n   return Named_object::make_sink();\n }\n \n-// Add a named object.\n+// Add a named object for a dot import.\n \n void\n-Gogo::add_named_object(Named_object* no)\n-{\n+Gogo::add_dot_import_object(Named_object* no)\n+{\n+  // If the name already exists, then it was defined in some file seen\n+  // earlier.  If the earlier name is just a declaration, don't add\n+  // this name, because that will cause the previous declaration to\n+  // merge to this imported name, which should not happen.  Just add\n+  // this name to the list of file block names to get appropriate\n+  // errors if we see a later definition.\n+  Named_object* e = this->package_->bindings()->lookup(no->name());\n+  if (e != NULL && e->package() == NULL)\n+    {\n+      if (e->is_unknown())\n+\te = e->resolve();\n+      if (e->package() == NULL\n+\t  && (e->is_type_declaration()\n+\t      || e->is_function_declaration()\n+\t      || e->is_unknown()))\n+\t{\n+\t  this->add_file_block_name(no->name(), no->location());\n+\t  return;\n+\t}\n+    }\n+\n   this->current_bindings()->add_named_object(no);\n }\n "}, {"sha": "01390ac28d20beef2c8136feb5ecc59e314b9897", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=16c6dcc57b81334bdfc99b994686f42369e33094", "patch": "@@ -397,7 +397,7 @@ class Gogo\n   // Add a named object to the current namespace.  This is used for\n   // import . \"package\".\n   void\n-  add_named_object(Named_object*);\n+  add_dot_import_object(Named_object*);\n \n   // Add an identifier to the list of names seen in the file block.\n   void"}, {"sha": "c83ebe29853e7663163d41f7b4602514768e0ea1", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=16c6dcc57b81334bdfc99b994686f42369e33094", "patch": "@@ -431,7 +431,7 @@ Import::import_const()\n   Typed_identifier tid(name, type, this->location_);\n   Named_object* no = this->package_->add_constant(tid, expr);\n   if (this->add_to_globals_)\n-    this->gogo_->add_named_object(no);\n+    this->gogo_->add_dot_import_object(no);\n }\n \n // Import a type.\n@@ -464,7 +464,7 @@ Import::import_var()\n   Named_object* no;\n   no = this->package_->add_variable(name, var);\n   if (this->add_to_globals_)\n-    this->gogo_->add_named_object(no);\n+    this->gogo_->add_dot_import_object(no);\n }\n \n // Import a function into PACKAGE.  PACKAGE is normally\n@@ -518,7 +518,7 @@ Import::import_func(Package* package)\n     {\n       no = package->add_function_declaration(name, fntype, loc);\n       if (this->add_to_globals_)\n-\tthis->gogo_->add_named_object(no);\n+\tthis->gogo_->add_dot_import_object(no);\n     }\n   return no;\n }"}, {"sha": "9b5ec44ad09f510c74322522d200f46a61bd031f", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c6dcc57b81334bdfc99b994686f42369e33094/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=16c6dcc57b81334bdfc99b994686f42369e33094", "patch": "@@ -66,7 +66,7 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   fntype->set_is_builtin();\n   no = bindings->add_function_declaration(\"Sizeof\", package, fntype, bloc);\n   if (add_to_globals)\n-    this->add_named_object(no);\n+    this->add_dot_import_object(no);\n \n   // Offsetof.\n   results = new Typed_identifier_list;\n@@ -76,7 +76,7 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   fntype->set_is_builtin();\n   no = bindings->add_function_declaration(\"Offsetof\", package, fntype, bloc);\n   if (add_to_globals)\n-    this->add_named_object(no);\n+    this->add_dot_import_object(no);\n \n   // Alignof.\n   results = new Typed_identifier_list;\n@@ -86,7 +86,7 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   fntype->set_is_builtin();\n   no = bindings->add_function_declaration(\"Alignof\", package, fntype, bloc);\n   if (add_to_globals)\n-    this->add_named_object(no);\n+    this->add_dot_import_object(no);\n \n   if (!this->imported_unsafe_)\n     {"}]}