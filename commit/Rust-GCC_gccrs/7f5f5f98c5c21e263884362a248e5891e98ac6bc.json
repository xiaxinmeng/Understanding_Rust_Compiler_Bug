{"sha": "7f5f5f98c5c21e263884362a248e5891e98ac6bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1ZjVmOThjNWMyMWUyNjM4ODQzNjJhMjQ4ZTU4OTFlOThhYzZiYw==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2012-04-27T14:29:32Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2012-04-27T14:29:32Z"}, "message": "Add new option, -Wliteral-suffix.\n\nThis option, which is enabled by default, causes the preprocessor to warn\nwhen a string or character literal is followed by a ud-suffix which does\nnot begin with an underscore.  According to [lex.ext]p10, this is\nill-formed.\n\nAlso modifies the preprocessor to treat such ill-formed suffixes as separate\npreprocessing tokens.  This is consistent with the Clang front end (see\nhttp://llvm.org/viewvc/llvm-project?view=rev&revision=152287), and enables\nbackwards compatibility with code that uses formatting macros from\n<inttypes.h>, as in the following code block:\n\n  int main() {\n    int64_t i64 = 123;\n    printf(\"My int64: %\"PRId64\"\\n\", i64);\n  }\n\nGoogle ref b/6377711.\n\n2012-04-27   Ollie Wild  <aaw@google.com>\n\n\tPR c++/52538\n\t* gcc/c-family/c-common.c: Add CPP_W_LITERAL_SUFFIX mapping.\n\t* gcc/c-family/c-opts.c (c_common_handle_option): Handle\n\tOPT_Wliteral_suffix.\n\t* gcc/c-family/c.opt: Add Wliteral-suffix.\n\t* gcc/doc/invoke.texi (Wliteral-suffix): Document new option.\n\t* gcc/testsuite/g++.dg/cpp0x/Wliteral-suffix.c: New test.\n\t* libcpp/include/cpplib.h (struct cpp_options): Add new field,\n\twarn_literal_suffix.\n\t(CPP_W_LITERAL_SUFFIX): New enum.\n\t* libcpp/init.c (cpp_create_reader): Default initialization of\n\twarn_literal_suffix.\n\t* libcpp/lex.c (lex_raw_string): Treat user-defined literals which\n\tdon't begin with '_' as separate tokens and produce a warning.\n\t(lex_string): Ditto.\n\nFrom-SVN: r186909", "tree": {"sha": "4fb8c09994e5867bbbb9d8cd9a507399b19ac47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb8c09994e5867bbbb9d8cd9a507399b19ac47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f5f5f98c5c21e263884362a248e5891e98ac6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5f5f98c5c21e263884362a248e5891e98ac6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5f5f98c5c21e263884362a248e5891e98ac6bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5f5f98c5c21e263884362a248e5891e98ac6bc/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11ec770e46f664966c53b6af90a2849c1eb4dbd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ec770e46f664966c53b6af90a2849c1eb4dbd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ec770e46f664966c53b6af90a2849c1eb4dbd1"}], "stats": {"total": 143, "additions": 134, "deletions": 9}, "files": [{"sha": "7097f17befd7fd4ba12d106d7892cdf28a912c49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -1,3 +1,7 @@\n+2012-04-27   Ollie Wild  <aaw@google.com>\n+\n+\t* doc/invoke.texi (Wliteral-suffix): Document new option.\n+\n 2012-04-27  Tom Tromey  <tromey@redhat.com>\n \n \t* dwarf2out.c (dwarf_stack_op_name): Use get_DW_OP_name."}, {"sha": "2082ff6c4af0278fda308311e18fee84f23b2f01", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -1,3 +1,9 @@\n+2012-04-27   Ollie Wild  <aaw@google.com>\n+\n+\t* c-common.c: Add CPP_W_LITERAL_SUFFIX mapping.\n+\t* c-opts.c (c_common_handle_option): Handle OPT_Wliteral_suffix.\n+\t* c.opt: Add Wliteral-suffix.\n+\n 2012-04-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/44774"}, {"sha": "bf5b034ee2d07004b0187445872bca9f47fd7cbf", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -8820,6 +8820,7 @@ static const struct reason_option_codes_t option_codes[] = {\n   {CPP_W_NORMALIZE,\t\t\tOPT_Wnormalized_},\n   {CPP_W_INVALID_PCH,\t\t\tOPT_Winvalid_pch},\n   {CPP_W_WARNING_DIRECTIVE,\t\tOPT_Wcpp},\n+  {CPP_W_LITERAL_SUFFIX,\t\tOPT_Wliteral_suffix},\n   {CPP_W_NONE,\t\t\t\t0}\n };\n "}, {"sha": "2510747c40e53a10a501dcf3175fb862a2c228cc", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -476,6 +476,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_invalid_pch = value;\n       break;\n \n+    case OPT_Wliteral_suffix:\n+      cpp_opts->warn_literal_suffix = value;\n+      break;\n+\n     case OPT_Wlong_long:\n       cpp_opts->cpp_warn_long_long = value;\n       break;"}, {"sha": "db8ca812ca55a8e2df2d07b9ae5663b75c8471f1", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -449,6 +449,10 @@ Wjump-misses-init\n C ObjC Var(warn_jump_misses_init) Init(-1) Warning\n Warn when a jump misses a variable initialization\n \n+Wliteral-suffix\n+C++ ObjC++ Warning\n+Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.\n+\n Wlogical-op\n C ObjC C++ ObjC++ Var(warn_logical_op) Init(0) Warning \n Warn when a logical operator is suspiciously always evaluating to true or false"}, {"sha": "280fac3b04bc03e4b92fc3bbf0d3d1af74e597d8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -198,8 +198,8 @@ in the following sections.\n -fno-default-inline  -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n -Wabi  -Wconversion-null  -Wctor-dtor-privacy @gol\n--Wdelete-non-virtual-dtor -Wnarrowing -Wnoexcept @gol\n--Wnon-virtual-dtor  -Wreorder @gol\n+-Wdelete-non-virtual-dtor -Wliteral-suffix -Wnarrowing @gol\n+-Wnoexcept -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wstrict-null-sentinel @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n@@ -2425,6 +2425,30 @@ an instance of a derived class through a pointer to a base class if the\n base class does not have a virtual destructor.  This warning is enabled\n by @option{-Wall}.\n \n+@item -Wliteral-suffix @r{(C++ and Objective-C++ only)}\n+@opindex Wliteral-suffix\n+@opindex Wno-literal-suffix\n+Warn when a string or character literal is followed by a ud-suffix which does\n+not begin with an underscore.  As a conforming extension, GCC treats such\n+suffixes as separate preprocessing tokens in order to maintain backwards\n+compatibility with code that uses formatting macros from @code{<inttypes.h>}.\n+For example:\n+\n+@smallexample\n+#define __STDC_FORMAT_MACROS\n+#include <inttypes.h>\n+#include <stdio.h>\n+\n+int main() @{\n+  int64_t i64 = 123;\n+  printf(\"My int64: %\"PRId64\"\\n\", i64);\n+@}\n+@end smallexample\n+\n+In this case, @code{PRId64} is treated as a separate preprocessing token.\n+\n+This warning is enabled by default.\n+\n @item -Wnarrowing @r{(C++ and Objective-C++ only)}\n @opindex Wnarrowing\n @opindex Wno-narrowing"}, {"sha": "54c616c441d04741b081cb5bb84fd6056115f8e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -1,3 +1,7 @@\n+2012-04-27   Ollie Wild  <aaw@google.com>\n+\n+\t* g++.dg/cpp0x/Wliteral-suffix.c: New test.\n+\n 2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.c-torture/execute/20120427-2.c: New testcase."}, {"sha": "39a8353561c081f208b04ad5492383ce01867299", "filename": "gcc/testsuite/g++.dg/cpp0x/Wliteral-suffix.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWliteral-suffix.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWliteral-suffix.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWliteral-suffix.C?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Make sure -Wliteral-suffix is enabled by default and\n+// triggers as expected.\n+\n+#define BAR \"bar\"\n+#define PLUS_ONE + 1\n+\n+#include <cstdint>\n+#include <cassert>\n+\n+\n+void\n+test()\n+{\n+  char c = '3'PLUS_ONE;\t  // { dg-warning \"invalid suffix on literal\" }\n+  char s[] = \"foo\"BAR;\t  // { dg-warning \"invalid suffix on literal\" }\n+\n+  assert(c == '4');\n+  assert(s[3] != '\\0');\n+  assert(s[3] == 'b');\n+}\n+\n+int\n+main()\n+{\n+  test();\n+}"}, {"sha": "f7c330c514393905f76444f8091263c5d5ea4cd8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -1,3 +1,14 @@\n+2012-04-27   Ollie Wild  <aaw@google.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add new field,\n+\twarn_literal_suffix.\n+\t(CPP_W_LITERAL_SUFFIX): New enum.\n+\t* init.c (cpp_create_reader): Default initialization of\n+\twarn_literal_suffix.\n+\t* lex.c (lex_raw_string): Treat user-defined literals which don't\n+\tbegin with '_' as separate tokens and produce a warning.\n+\t(lex_string): Ditto.\n+\n 2012-04-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* line-map.c (linemap_resolve_location): Synchronize comments with"}, {"sha": "9dbc477b61e88cd220464847b33786f88b193c2a", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -427,6 +427,10 @@ struct cpp_options\n   /* Nonzero for C++ 2011 Standard user-defnied literals.  */\n   unsigned char user_literals;\n \n+  /* Nonzero means warn when a string or character literal is followed by a\n+     ud-suffix which does not beging with an underscore.  */\n+  unsigned char warn_literal_suffix;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n \n@@ -906,7 +910,8 @@ enum {\n   CPP_W_CXX_OPERATOR_NAMES,\n   CPP_W_NORMALIZE,\n   CPP_W_INVALID_PCH,\n-  CPP_W_WARNING_DIRECTIVE\n+  CPP_W_WARNING_DIRECTIVE,\n+  CPP_W_LITERAL_SUFFIX\n };\n \n /* Output a diagnostic of some kind.  */"}, {"sha": "3262184c9c5e603636a4ff94c3a801ec998157d6", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -175,6 +175,7 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   CPP_OPTION (pfile, warn_variadic_macros) = 1;\n   CPP_OPTION (pfile, warn_builtin_macro_redefined) = 1;\n   CPP_OPTION (pfile, warn_normalize) = normalized_C;\n+  CPP_OPTION (pfile, warn_literal_suffix) = 1;\n \n   /* Default CPP arithmetic to something sensible for the host for the\n      benefit of dumb users like fix-header.  */"}, {"sha": "7e2671ef026f526f061a40017340fdf04ba5707f", "filename": "libcpp/lex.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5f5f98c5c21e263884362a248e5891e98ac6bc/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7f5f5f98c5c21e263884362a248e5891e98ac6bc", "patch": "@@ -1553,14 +1553,30 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \n   if (CPP_OPTION (pfile, user_literals))\n     {\n+      /* According to C++11 [lex.ext]p10, a ud-suffix not starting with an\n+\t underscore is ill-formed.  Since this breaks programs using macros\n+\t from inttypes.h, we generate a warning and treat the ud-suffix as a\n+\t separate preprocessing token.  This approach is under discussion by\n+\t the standards committee, and has been adopted as a conforming\n+\t extension by other front ends such as clang. */\n+      if (ISALPHA (*cur))\n+\t{\n+\t  // Raise a warning, but do not consume subsequent tokens.\n+\t  if (CPP_OPTION (pfile, warn_literal_suffix))\n+\t    cpp_warning_with_line (pfile, CPP_W_LITERAL_SUFFIX,\n+\t\t\t\t   token->src_loc, 0,\n+\t\t\t\t   \"invalid suffix on literal; C++11 requires \"\n+\t\t\t\t   \"a space between literal and identifier\");\n+\t}\n       /* Grab user defined literal suffix.  */\n-      if (ISIDST (*cur))\n+      else if (*cur == '_')\n \t{\n \t  type = cpp_userdef_string_add_type (type);\n \t  ++cur;\n+\n+\t  while (ISIDNUM (*cur))\n+\t    ++cur;\n \t}\n-      while (ISIDNUM (*cur))\n-\t++cur;\n     }\n \n   pfile->buffer->cur = cur;\n@@ -1668,15 +1684,31 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n \n   if (CPP_OPTION (pfile, user_literals))\n     {\n+      /* According to C++11 [lex.ext]p10, a ud-suffix not starting with an\n+\t underscore is ill-formed.  Since this breaks programs using macros\n+\t from inttypes.h, we generate a warning and treat the ud-suffix as a\n+\t separate preprocessing token.  This approach is under discussion by\n+\t the standards committee, and has been adopted as a conforming\n+\t extension by other front ends such as clang. */\n+      if (ISALPHA (*cur))\n+\t{\n+\t  // Raise a warning, but do not consume subsequent tokens.\n+\t  if (CPP_OPTION (pfile, warn_literal_suffix))\n+\t    cpp_warning_with_line (pfile, CPP_W_LITERAL_SUFFIX,\n+\t\t\t\t   token->src_loc, 0,\n+\t\t\t\t   \"invalid suffix on literal; C++11 requires \"\n+\t\t\t\t   \"a space between literal and identifier\");\n+\t}\n       /* Grab user defined literal suffix.  */\n-      if (ISIDST (*cur))\n+      else if (*cur == '_')\n \t{\n \t  type = cpp_userdef_char_add_type (type);\n \t  type = cpp_userdef_string_add_type (type);\n           ++cur;\n+\n+\t  while (ISIDNUM (*cur))\n+\t    ++cur;\n \t}\n-      while (ISIDNUM (*cur))\n-\t++cur;\n     }\n \n   pfile->buffer->cur = cur;"}]}