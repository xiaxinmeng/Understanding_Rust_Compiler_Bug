{"sha": "74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhZWU2ZDIwODcyZThkODc1NThlYjViZjYwMTA0MmUzZWQzZmIyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-03-03T04:59:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-03-03T13:47:03Z"}, "message": "c++: C++17 and decltype of multi-operator expression [PR95675]\n\nA call that is the immediate operand of decltype has special semantics: no\ntemporary is produced, so it's OK for the return type to be e.g. incomplete.\nBut we were treating (e | f) the same way, which confused overload\nresolution when we then tried to evaluate ... | g.\n\nFixed by making build_temp do what its name says, and force the C++17\ntemporary materialization conversion.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95675\n\t* call.c (build_temp): Wrap a CALL_EXPR in a TARGET_EXPR\n\tif it didn't get one before.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95675\n\t* g++.dg/cpp0x/decltype-call5.C: New test.\n\t* g++.dg/cpp0x/decltype-call6.C: New test.", "tree": {"sha": "7c77a9a101ce563964138373cf31b0c8a6aa2f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c77a9a101ce563964138373cf31b0c8a6aa2f2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc3a2bc8a810e7a9a51d7069463f1f460d6a588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc3a2bc8a810e7a9a51d7069463f1f460d6a588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bc3a2bc8a810e7a9a51d7069463f1f460d6a588"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "b00334d09193c8944544f4b1a9ef7a32f98ab4de", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "patch": "@@ -7291,6 +7291,14 @@ build_temp (tree expr, tree type, int flags,\n       && !type_has_nontrivial_copy_init (TREE_TYPE (expr)))\n     return get_target_expr_sfinae (expr, complain);\n \n+  /* In decltype, we might have decided not to wrap this call in a TARGET_EXPR.\n+     But it turns out to be a subexpression, so perform temporary\n+     materialization now.  */\n+  if (TREE_CODE (expr) == CALL_EXPR\n+      && CLASS_TYPE_P (type)\n+      && same_type_ignoring_top_level_qualifiers_p (type, TREE_TYPE (expr)))\n+    expr = build_cplus_new (type, expr, complain);\n+\n   savew = warningcount + werrorcount, savee = errorcount;\n   releasing_vec args (make_tree_vector_single (expr));\n   expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,"}, {"sha": "81ef6e6f9c9452531d110241bcc87d20053d24bd", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-call5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call5.C?ref=74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/95675\n+// { dg-do compile { target c++11 } }\n+\n+struct b {};\n+b operator|(b, b) { return {}; }\n+b e, f, g;\n+using h = decltype(e | f | g);"}, {"sha": "4173b60768952e1932c0631752efe9995b8888b0", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-call6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74aee6d20872e8d87558eb5bf601042e3ed3fb2a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call6.C?ref=74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/95675\n+// { dg-do compile { target c++11 } }\n+\n+struct a {};\n+template <typename> struct b;\n+template <typename bq, typename br> struct b<bq(br)> {\n+  decltype(bq()(br())) c;\n+};\n+struct e {\n+  operator a();\n+};\n+b<e (*(e))(a)> d;"}]}