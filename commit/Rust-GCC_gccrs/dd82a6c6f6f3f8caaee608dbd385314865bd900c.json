{"sha": "dd82a6c6f6f3f8caaee608dbd385314865bd900c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4MmE2YzZmNmYzZjhjYWFlZTYwOGRiZDM4NTMxNDg2NWJkOTAwYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-17T11:16:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-17T11:16:24Z"}, "message": "* ipa-type-escape.c (look_for_casts): Revamp using handled_component_p.\n\nFrom-SVN: r120849", "tree": {"sha": "9eb8867a840351a7283be605bf4a6970572e0c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eb8867a840351a7283be605bf4a6970572e0c31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd82a6c6f6f3f8caaee608dbd385314865bd900c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd82a6c6f6f3f8caaee608dbd385314865bd900c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd82a6c6f6f3f8caaee608dbd385314865bd900c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd82a6c6f6f3f8caaee608dbd385314865bd900c/comments", "author": null, "committer": null, "parents": [{"sha": "30fd45a0b2c2bffc8b7999f4da9f7bfbac97fead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fd45a0b2c2bffc8b7999f4da9f7bfbac97fead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fd45a0b2c2bffc8b7999f4da9f7bfbac97fead"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "4045c4b16b710726bcc42261dd544330a2a5e497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd82a6c6f6f3f8caaee608dbd385314865bd900c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd82a6c6f6f3f8caaee608dbd385314865bd900c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd82a6c6f6f3f8caaee608dbd385314865bd900c", "patch": "@@ -1,3 +1,7 @@\n+2007-01-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-type-escape.c (look_for_casts): Revamp using handled_component_p.\n+\n 2007-01-17  Eric Christopher  <echristo@apple.com>\n \n \t* config.gcc: Support core2 processor."}, {"sha": "ccb60109ee09dea94dfffd8f7713a9923b523580", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd82a6c6f6f3f8caaee608dbd385314865bd900c/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd82a6c6f6f3f8caaee608dbd385314865bd900c/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=dd82a6c6f6f3f8caaee608dbd385314865bd900c", "patch": "@@ -920,26 +920,21 @@ look_for_casts (tree lhs __attribute__((unused)), tree t)\n       tree castfromvar = TREE_OPERAND (t, 0);\n       check_cast (TREE_TYPE (t), castfromvar);\n     }\n-  else if (TREE_CODE (t) == COMPONENT_REF\n-\t   || TREE_CODE (t) == INDIRECT_REF\n-\t   || TREE_CODE (t) == BIT_FIELD_REF)\n-    {\n-      tree base = get_base_address (t);\n-      while (t != base)\n-\t{\n-\t  t = TREE_OPERAND (t, 0);\n-\t  if (TREE_CODE (t) == VIEW_CONVERT_EXPR)\n-\t    {\n-\t      /* This may be some part of a component ref.\n-\t\t IE it may be a.b.VIEW_CONVERT_EXPR<weird_type>(c).d, AFAIK.\n-\t\t castfromref will give you a.b.c, not a. */\n-\t      tree castfromref = TREE_OPERAND (t, 0);\n-\t      check_cast (TREE_TYPE (t), castfromref);\n-\t    }\n-\t  else if (TREE_CODE (t) == COMPONENT_REF)\n-\t    get_canon_type (TREE_TYPE (TREE_OPERAND (t, 1)), false, false);\n-\t}\n-    } \n+  else\n+    while (handled_component_p (t))\n+      {\n+\tt = TREE_OPERAND (t, 0);\n+\tif (TREE_CODE (t) == VIEW_CONVERT_EXPR)\n+\t  {\n+\t    /* This may be some part of a component ref.\n+\t       IE it may be a.b.VIEW_CONVERT_EXPR<weird_type>(c).d, AFAIK.\n+\t       castfromref will give you a.b.c, not a. */\n+\t    tree castfromref = TREE_OPERAND (t, 0);\n+\t    check_cast (TREE_TYPE (t), castfromref);\n+\t  }\n+\telse if (TREE_CODE (t) == COMPONENT_REF)\n+\t  get_canon_type (TREE_TYPE (TREE_OPERAND (t, 1)), false, false);\n+      }\n } \n \n /* Check to see if T is a read or address of operation on a static var"}]}