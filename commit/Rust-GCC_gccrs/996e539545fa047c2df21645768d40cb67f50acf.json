{"sha": "996e539545fa047c2df21645768d40cb67f50acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2ZTUzOTU0NWZhMDQ3YzJkZjIxNjQ1NzY4ZDQwY2I2N2Y1MGFjZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-21T14:53:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-21T14:53:02Z"}, "message": "vector.tcc (_M_insert_aux, [...]): Check at the outset that we are not trying to exceed max_size...\n\n2004-10-21  Paolo Carlini  <pcarlini@suse.de>\n\t    Dhruv Matani  <dhruvbird@gmx.net>\n\t    Nathan Myers  <ncm@cantrip.org>\n\n\t* include/bits/vector.tcc (_M_insert_aux, _M_fill_insert,\n\t_M_range_insert): Check at the outset that we are not trying\n\tto exceed max_size, then deal properly with __len overflows.\n\t* testsuite/23_containers/vector/modifiers/insert/1.cc: New.\n\n\t* testsuite/testsuite_allocator.h: Remove redundant include.\n\nCo-Authored-By: Dhruv Matani <dhruvbird@gmx.net>\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r89377", "tree": {"sha": "29f654e743ccdc49ae3d5ac87f9a553d8351ef6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29f654e743ccdc49ae3d5ac87f9a553d8351ef6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996e539545fa047c2df21645768d40cb67f50acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996e539545fa047c2df21645768d40cb67f50acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996e539545fa047c2df21645768d40cb67f50acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996e539545fa047c2df21645768d40cb67f50acf/comments", "author": null, "committer": null, "parents": [{"sha": "d600a3a435e1a8556480916886e895cbc5ead8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d600a3a435e1a8556480916886e895cbc5ead8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d600a3a435e1a8556480916886e895cbc5ead8dd"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "f1d6e12395b620ea6707136b0efbdd0ab551839f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=996e539545fa047c2df21645768d40cb67f50acf", "patch": "@@ -1,3 +1,14 @@\n+2004-10-21  Paolo Carlini  <pcarlini@suse.de>\n+\t    Dhruv Matani  <dhruvbird@gmx.net>\n+\t    Nathan Myers  <ncm@cantrip.org>\n+\n+\t* include/bits/vector.tcc (_M_insert_aux, _M_fill_insert,\n+\t_M_range_insert): Check at the outset that we are not trying\n+\tto exceed max_size, then deal properly with __len overflows.\n+\t* testsuite/23_containers/vector/modifiers/insert/1.cc: New.\n+\t\n+\t* testsuite/testsuite_allocator.h: Remove redundant include.\n+\n 2004-10-20  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/bitmap_allocator.h (allocate): Throw std::bad_alloc"}, {"sha": "5dc3cd41eb3ce0f081091a8598297734b4544c2f", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=996e539545fa047c2df21645768d40cb67f50acf", "patch": "@@ -262,7 +262,16 @@ namespace _GLIBCXX_STD\n       else\n \t{\n \t  const size_type __old_size = size();\n-\t  const size_type __len = __old_size != 0 ? 2 * __old_size : 1;\n+\t  if (__old_size == this->max_size())\n+\t    __throw_length_error(__N(\"vector::_M_insert_aux\"));\n+\n+\t  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2\n+\t  // __len overflows: if we don't notice and _M_allocate doesn't\n+\t  // throw we crash badly later.\n+\t  size_type __len = __old_size != 0 ? 2 * __old_size : 1;\t  \n+\t  if (__len < __old_size)\n+\t    __len = this->max_size();\n+\n \t  iterator __new_start(this->_M_allocate(__len));\n \t  iterator __new_finish(__new_start);\n \t  try\n@@ -279,7 +288,7 @@ namespace _GLIBCXX_STD\n \t\t\t\t\t    iterator(this->_M_impl._M_finish),\n \t\t\t\t\t    __new_finish,\n \t\t\t\t\t    this->get_allocator());\n-          }\n+\t    }\n \t  catch(...)\n \t    {\n \t      std::_Destroy(__new_start, __new_finish, this->get_allocator());\n@@ -337,7 +346,14 @@ namespace _GLIBCXX_STD\n \t  else\n \t    {\n \t      const size_type __old_size = size();\n-\t      const size_type __len = __old_size + std::max(__old_size, __n);\n+\t      if (this->max_size() - __old_size < __n)\n+\t\t__throw_length_error(__N(\"vector::_M_fill_insert\"));\n+\t      \n+\t      // See _M_insert_aux above.\n+\t      size_type __len = __old_size + std::max(__old_size, __n);\n+\t      if (__len < __old_size)\n+\t\t__len = this->max_size();\n+\n \t      iterator __new_start(this->_M_allocate(__len));\n \t      iterator __new_finish(__new_start);\n \t      try\n@@ -389,7 +405,7 @@ namespace _GLIBCXX_STD\n     template<typename _ForwardIterator>\n       void\n       vector<_Tp, _Alloc>::\n-      _M_range_insert(iterator __position,_ForwardIterator __first,\n+      _M_range_insert(iterator __position, _ForwardIterator __first,\n \t\t      _ForwardIterator __last, forward_iterator_tag)\n       {\n \tif (__first != __last)\n@@ -429,7 +445,14 @@ namespace _GLIBCXX_STD\n \t    else\n \t      {\n \t\tconst size_type __old_size = size();\n-\t\tconst size_type __len = __old_size + std::max(__old_size, __n);\n+\t\tif (this->max_size() - __old_size < __n)\n+\t\t  __throw_length_error(__N(\"vector::_M_range_insert\"));\t\n+\n+\t\t// See _M_insert_aux above.\n+\t\tsize_type __len = __old_size + std::max(__old_size, __n);\n+\t\tif (__len < __old_size)\n+\t\t  __len = this->max_size();\n+\n \t\titerator __new_start(this->_M_allocate(__len));\n \t\titerator __new_finish(__new_start);\n \t\ttry"}, {"sha": "11c9e8dee330fc233f1911f50fa98f7aae5a1b76", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/insert/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2F1.cc?ref=996e539545fa047c2df21645768d40cb67f50acf", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  vector<int> iv;\n+\n+  try\n+    {\n+      iv.insert(iv.end(), iv.max_size() + 1, 1);\n+    }\n+  catch(std::length_error&)\n+    {\n+      VERIFY( true );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a13df804ed3549851629b0f1181f459a671dd234", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996e539545fa047c2df21645768d40cb67f50acf/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=996e539545fa047c2df21645768d40cb67f50acf", "patch": "@@ -36,7 +36,6 @@\n #define _GLIBCXX_TESTSUITE_ALLOCATOR_H\n \n #include <cstddef>\n-#include <cstdlib>\n #include <limits>\n \n namespace "}]}