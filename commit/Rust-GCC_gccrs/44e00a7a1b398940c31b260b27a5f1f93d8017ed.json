{"sha": "44e00a7a1b398940c31b260b27a5f1f93d8017ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlMDBhN2ExYjM5ODk0MGMzMWIyNjBiMjdhNWYxZjkzZDgwMTdlZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-25T18:52:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-25T18:52:47Z"}, "message": "Kill DECL_NAMESPACE_USERS, DECL_NAMESPACE_ASSOCIATIONS.\n\n\tgcc/cp/\n\tKill DECL_NAMESPACE_USERS, DECL_NAMESPACE_ASSOCIATIONS.\n\t* cp-tree.h (lang_decl_ns): Remove ns_users field.\n\t(DECL_NAMESPACE_USERS, DECL_NAMESPACE_ASSOCIATIONS): Delete.\n\t(TREE_INDIRECT_USING): Delete.\n\t* name-lookup.h (is_associated_namespace): Delete.\n\t* name-lookup.c (name_lookup::search_usings\n\tname_lookup::do_queue_usings): Usings are always direct.\n\t(is_associated_namespace): Delete.\n\t(handle_namespace_attrs): Use DECL_NAMESPACE_INLINE_P.\n\t(namespace_ancestor_1, namespace_ancestor): Delete.\n\t(push_using_directive_1, push_using_directive): Delete.\n\t(add_using_namespace_1): Delete.\n\t(add_using_namespace): Reimplement.\n\t(emit_debug_info_using_namespace): New.\n\t(finish_namespace_using_directive, finish_local_using_directive\n\tpush_namespace): Adjust.\n\t* tree.c (cp_free_lang_data): Remove DECL_NAMESPACE_USERS\n\thandling.\n\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_make_namespace_inline): Check and set\n\tDECL_NAMESPACE_INLINE_P.\n\n\tgcc/testsuite/\n\t* g++.dg/lookup/using56.C: New.\n\t* g++.dg/lookup/using57.C: New.\n\t* g++.dg/lookup/using58.C: New.\n\t* g++.dg/lookup/using59.C: New.\n\nFrom-SVN: r248467", "tree": {"sha": "46ae0e24e642ec27a2a21ca827419c7f58cb282a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ae0e24e642ec27a2a21ca827419c7f58cb282a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44e00a7a1b398940c31b260b27a5f1f93d8017ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e00a7a1b398940c31b260b27a5f1f93d8017ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e00a7a1b398940c31b260b27a5f1f93d8017ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e00a7a1b398940c31b260b27a5f1f93d8017ed/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63dbcd13e93578e21e0717d4990c1701d6957e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dbcd13e93578e21e0717d4990c1701d6957e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63dbcd13e93578e21e0717d4990c1701d6957e3e"}], "stats": {"total": 346, "additions": 137, "deletions": 209}, "files": [{"sha": "df36ce526a4db90702122a36e30256c7a00c0ba6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -1,3 +1,23 @@\n+2017-05-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\tKill DECL_NAMESPACE_USERS, DECL_NAMESPACE_ASSOCIATIONS.\n+\t* cp-tree.h (lang_decl_ns): Remove ns_users field.\n+\t(DECL_NAMESPACE_USERS, DECL_NAMESPACE_ASSOCIATIONS): Delete.\n+\t(TREE_INDIRECT_USING): Delete.\n+\t* name-lookup.h (is_associated_namespace): Delete.\n+\t* name-lookup.c (name_lookup::search_usings,\n+\tname_lookup::do_queue_usings): Usings are always direct.\n+\t(is_associated_namespace): Delete.\n+\t(handle_namespace_attrs): Use DECL_NAMESPACE_INLINE_P.\n+\t(namespace_ancestor_1, namespace_ancestor): Delete.\n+\t(push_using_directive_1, push_using_directive): Delete.\n+\t(add_using_namespace_1): Delete.\n+\t(add_using_namespace): Reimplement.\n+\t(emit_debug_info_using_namespace): New.\n+\t(finish_namespace_using_directive, finish_local_using_directive,\n+\tpush_namespace): Adjust.\n+\t* tree.c (cp_free_lang_data): Remove DECL_NAMESPACE_USERS handling.\n+\n 2017-05-25  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* semantics.c (finish_handler_parms): Warn about non-reference type"}, {"sha": "11f8d010dfe418b443a3fb81e27a43cdecace608", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -328,7 +328,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       BASELINK_QUALIFIED_P (in BASELINK)\n       TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)\n       TEMPLATE_PARM_PARAMETER_PACK (in TEMPLATE_PARM_INDEX)\n-      TREE_INDIRECT_USING (in a TREE_LIST of using-directives)\n       ATTR_IS_DEPENDENT (in the TREE_LIST for an attribute)\n       ABI_TAG_IMPLICIT (in the TREE_LIST for the argument of abi_tag)\n       CONSTRUCTOR_IS_DIRECT_INIT (in CONSTRUCTOR)\n@@ -2513,7 +2512,6 @@ struct GTY(()) lang_decl_ns {\n   struct lang_decl_base base;\n   cp_binding_level *level;\n   tree ns_using;\n-  tree ns_users;\n };\n \n /* DECL_LANG_SPECIFIC for parameters.  */\n@@ -3085,15 +3083,6 @@ struct GTY(()) lang_decl {\n    that is the common ancestor.  */\n #define DECL_NAMESPACE_USING(NODE) (LANG_DECL_NS_CHECK (NODE)->ns_using)\n \n-/* In a NAMESPACE_DECL, the DECL_INITIAL is used to record all users\n-   of a namespace, to record the transitive closure of using namespace.  */\n-#define DECL_NAMESPACE_USERS(NODE) (LANG_DECL_NS_CHECK (NODE)->ns_users)\n-\n-/* In a NAMESPACE_DECL, the list of namespaces which have associated\n-   themselves with this one.  */\n-#define DECL_NAMESPACE_ASSOCIATIONS(NODE) \\\n-  DECL_INITIAL (NAMESPACE_DECL_CHECK (NODE))\n-\n /* In a NAMESPACE_DECL, points to the original namespace if this is\n    a namespace alias.  */\n #define DECL_NAMESPACE_ALIAS(NODE) \\\n@@ -3107,10 +3096,6 @@ struct GTY(()) lang_decl {\n    && CP_DECL_CONTEXT (NODE) == global_namespace\t\\\n    && DECL_NAME (NODE) == std_identifier)\n \n-/* In a TREE_LIST concatenating using directives, indicate indirect\n-   directives  */\n-#define TREE_INDIRECT_USING(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))\n-\n /* In a TREE_LIST in an attribute list, indicates that the attribute\n    must be applied at instantiation time.  */\n #define ATTR_IS_DEPENDENT(NODE) TREE_LANG_FLAG_0 (TREE_LIST_CHECK (NODE))"}, {"sha": "0e3a16ca102b3fc5b66b319fb8af371efc84d8b9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 27, "deletions": 173, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -533,8 +533,7 @@ name_lookup::search_usings (tree scope)\n   /* Look in direct usings.  */\n   for (tree usings = DECL_NAMESPACE_USING (scope);\n        usings; usings = TREE_CHAIN (usings))\n-    if (!TREE_INDIRECT_USING (usings))\n-      found |= search_qualified (TREE_PURPOSE (usings), true);\n+    found |= search_qualified (TREE_PURPOSE (usings), true);\n \n   /* Look in its inline children.  */\n   for (tree inner = NAMESPACE_LEVEL (scope)->namespaces;\n@@ -607,8 +606,7 @@ name_lookup::using_queue *\n name_lookup::do_queue_usings (using_queue *queue, int depth, tree usings)\n {\n   for (; usings; usings = TREE_CHAIN (usings))\n-    if (!TREE_INDIRECT_USING (usings))\n-      queue = queue_namespace (queue, depth, TREE_PURPOSE (usings));\n+    queue = queue_namespace (queue, depth, TREE_PURPOSE (usings));\n \n   return queue;\n }\n@@ -1019,7 +1017,6 @@ static void consider_binding_level (tree name,\n \t\t\t\t    cp_binding_level *lvl,\n \t\t\t\t    bool look_within_fields,\n \t\t\t\t    enum lookup_name_fuzzy_kind kind);\n-static tree push_using_directive (tree);\n static void diagnose_name_conflict (tree, tree);\n \n /* ADL lookup of NAME.  FNS is the result of regular lookup, and we\n@@ -1036,47 +1033,6 @@ lookup_arg_dependent (tree name, tree fns, vec<tree, va_gc> *args)\n   return fns;\n }\n \n-/* Returns true iff CURRENT has declared itself to be an associated\n-   namespace of SCOPE via a strong using-directive (or transitive chain\n-   thereof).  Both are namespaces.  */\n-\n-bool\n-is_associated_namespace (tree current, tree scope)\n-{\n-  vec<tree, va_gc> *seen = make_tree_vector ();\n-  vec<tree, va_gc> *todo = make_tree_vector ();\n-  tree t;\n-  bool ret;\n-\n-  while (1)\n-    {\n-      if (scope == current)\n-\t{\n-\t  ret = true;\n-\t  break;\n-\t}\n-      vec_safe_push (seen, scope);\n-      for (t = DECL_NAMESPACE_ASSOCIATIONS (scope); t; t = TREE_CHAIN (t))\n-\tif (!vec_member (TREE_PURPOSE (t), seen))\n-\t  vec_safe_push (todo, TREE_PURPOSE (t));\n-      if (!todo->is_empty ())\n-\t{\n-\t  scope = todo->last ();\n-\t  todo->pop ();\n-\t}\n-      else\n-\t{\n-\t  ret = false;\n-\t  break;\n-\t}\n-    }\n-\n-  release_tree_vector (seen);\n-  release_tree_vector (todo);\n-\n-  return ret;\n-}\n-\n /* Compute the chain index of a binding_entry given the HASH value of its\n    name and the total COUNT of chains.  COUNT is assumed to be a power\n    of 2.  */\n@@ -4426,15 +4382,15 @@ handle_namespace_attrs (tree ns, tree attributes)\n \t}\n       else if (is_attribute_p (\"abi_tag\", name))\n \t{\n-\t  if (!DECL_NAMESPACE_ASSOCIATIONS (ns))\n+\t  if (!DECL_NAME (ns))\n \t    {\n-\t      warning (OPT_Wattributes, \"ignoring %qD attribute on non-inline \"\n+\t      warning (OPT_Wattributes, \"ignoring %qD attribute on anonymous \"\n \t\t       \"namespace\", name);\n \t      continue;\n \t    }\n-\t  if (!DECL_NAME (ns))\n+\t  if (!DECL_NAMESPACE_INLINE_P (ns))\n \t    {\n-\t      warning (OPT_Wattributes, \"ignoring %qD attribute on anonymous \"\n+\t      warning (OPT_Wattributes, \"ignoring %qD attribute on non-inline \"\n \t\t       \"namespace\", name);\n \t      continue;\n \t    }\n@@ -4479,32 +4435,6 @@ pop_decl_namespace (void)\n   decl_namespace_list->pop ();\n }\n \n-/* Return the namespace that is the common ancestor\n-   of two given namespaces.  */\n-\n-static tree\n-namespace_ancestor_1 (tree ns1, tree ns2)\n-{\n-  tree nsr;\n-  if (is_ancestor (ns1, ns2))\n-    nsr = ns1;\n-  else\n-    nsr = namespace_ancestor_1 (CP_DECL_CONTEXT (ns1), ns2);\n-  return nsr;\n-}\n-\n-/* Wrapper for namespace_ancestor_1.  */\n-\n-static tree\n-namespace_ancestor (tree ns1, tree ns2)\n-{\n-  tree nsr;\n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  nsr = namespace_ancestor_1 (ns1, ns2);\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n-  return nsr;\n-}\n-\n /* Process a namespace-alias declaration.  */\n \n void\n@@ -5537,44 +5467,6 @@ is_local_extern (tree decl)\n   return false;\n }\n \n-/* Add namespace to using_directives. Return NULL_TREE if nothing was\n-   changed (i.e. there was already a directive), or the fresh\n-   TREE_LIST otherwise.  */\n-\n-static tree\n-push_using_directive_1 (tree used)\n-{\n-  tree ud = current_binding_level->using_directives;\n-  tree iter, ancestor;\n-\n-  /* Check if we already have this.  */\n-  if (purpose_member (used, ud) != NULL_TREE)\n-    return NULL_TREE;\n-\n-  ancestor = namespace_ancestor (current_decl_namespace (), used);\n-  ud = current_binding_level->using_directives;\n-  ud = tree_cons (used, ancestor, ud);\n-  current_binding_level->using_directives = ud;\n-\n-  /* Recursively add all namespaces used.  */\n-  for (iter = DECL_NAMESPACE_USING (used); iter; iter = TREE_CHAIN (iter))\n-    push_using_directive_1 (TREE_PURPOSE (iter));\n-\n-  return ud;\n-}\n-\n-/* Wrapper for push_using_directive_1.  */\n-\n-static tree\n-push_using_directive (tree used)\n-{\n-  tree ret;\n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  ret = push_using_directive_1 (used);\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n-  return ret;\n-}\n-\n /* The type TYPE is being declared.  If it is a class template, or a\n    specialization of a class template, do any processing required and\n    perform error-checking.  If IS_FRIEND is nonzero, this TYPE is\n@@ -6094,64 +5986,29 @@ do_pop_nested_namespace (tree ns)\n   do_pop_from_top_level ();\n }\n \n-/* Insert USED into the using list of USER. Set INDIRECT_flag if this\n-   directive is not directly from the source. Also find the common\n-   ancestor and let our users know about the new namespace */\n+/* Add TARGET to USINGS, if it does not already exist there.\n+   We used to build the complete graph of usings at this point, from\n+   the POV of the source namespaces.  Now we build that as we perform\n+   the unqualified search.  */\n \n static void\n-add_using_namespace_1 (tree user, tree used, bool indirect)\n+add_using_namespace (tree &usings, tree target)\n {\n-  tree t;\n-  /* Using oneself is a no-op.  */\n-  if (user == used)\n-    return;\n-  gcc_assert (TREE_CODE (user) == NAMESPACE_DECL);\n-  gcc_assert (TREE_CODE (used) == NAMESPACE_DECL);\n-  /* Check if we already have this.  */\n-  t = purpose_member (used, DECL_NAMESPACE_USING (user));\n-  if (t != NULL_TREE)\n-    {\n-      if (!indirect)\n-\t/* Promote to direct usage.  */\n-\tTREE_INDIRECT_USING (t) = 0;\n+  for (tree probe = usings; probe; probe = TREE_CHAIN (probe))\n+    if (target == TREE_PURPOSE (probe))\n       return;\n-    }\n-\n-  /* Add used to the user's using list.  */\n-  DECL_NAMESPACE_USING (user)\n-    = tree_cons (used, namespace_ancestor (user, used),\n-\t\t DECL_NAMESPACE_USING (user));\n-\n-  TREE_INDIRECT_USING (DECL_NAMESPACE_USING (user)) = indirect;\n \n-  /* Add user to the used's users list.  */\n-  DECL_NAMESPACE_USERS (used)\n-    = tree_cons (user, 0, DECL_NAMESPACE_USERS (used));\n-\n-  /* Recursively add all namespaces used.  */\n-  for (t = DECL_NAMESPACE_USING (used); t; t = TREE_CHAIN (t))\n-    /* indirect usage */\n-    add_using_namespace_1 (user, TREE_PURPOSE (t), 1);\n-\n-  /* Tell everyone using us about the new used namespaces.  */\n-  for (t = DECL_NAMESPACE_USERS (user); t; t = TREE_CHAIN (t))\n-    add_using_namespace_1 (TREE_PURPOSE (t), used, 1);\n+  usings = tree_cons (target, NULL_TREE, usings);\n }\n \n-/* Wrapper for add_using_namespace_1.  */\n+/* Tell the debug system of a using directive.  */\n \n static void\n-add_using_namespace (bool namespace_level_p, tree from, tree target)\n+emit_debug_info_using_namespace (tree from, tree target)\n {\n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  add_using_namespace_1 (from, target, false);\n-  if (namespace_level_p)\n-    {\n-      /* Emit debugging info.  */\n-      tree context = from != global_namespace ? from : NULL_TREE;\n-      debug_hooks->imported_module_or_decl (target, NULL_TREE, context, false);\n-    }\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n+  /* Emit debugging info.  */\n+  tree context = from != global_namespace ? from : NULL_TREE;\n+  debug_hooks->imported_module_or_decl (target, NULL_TREE, context, false);\n }\n \n /* Process a namespace-scope using directive.  */\n@@ -6163,8 +6020,10 @@ finish_namespace_using_directive (tree target, tree attribs)\n   if (target == error_mark_node)\n     return;\n \n-  add_using_namespace (true, current_namespace,\n+  add_using_namespace (DECL_NAMESPACE_USING (current_namespace),\n \t\t       ORIGINAL_NAMESPACE (target));\n+  emit_debug_info_using_namespace (current_namespace,\n+\t\t\t\t   ORIGINAL_NAMESPACE (target));\n \n   if (attribs == error_mark_node)\n     return;\n@@ -6198,7 +6057,8 @@ finish_local_using_directive (tree target, tree attribs)\n \n   add_stmt (build_stmt (input_location, USING_STMT, target));\n \n-  push_using_directive (ORIGINAL_NAMESPACE (target));\n+  add_using_namespace (current_binding_level->using_directives,\n+\t\t       ORIGINAL_NAMESPACE (target));\n }\n \n /* Pushes X into the global namespace.  */\n@@ -6306,20 +6166,14 @@ push_namespace (tree name, bool make_inline)\n \t      DECL_NAME (ns) = NULL_TREE;\n \n \t      if (!make_inline)\n-\t\tadd_using_namespace (true, current_namespace, ns);\n+\t\tadd_using_namespace (DECL_NAMESPACE_USING (current_namespace),\n+\t\t\t\t     ns);\n \t    }\n \t  else if (TREE_PUBLIC (current_namespace))\n \t    TREE_PUBLIC (ns) = 1;\n \n \t  if (make_inline)\n-\t    {\n-\t      DECL_NAMESPACE_INLINE_P (ns) = true;\n-\t      /* Set up namespace association.  */\n-\t      DECL_NAMESPACE_ASSOCIATIONS (ns)\n-\t\t= tree_cons (current_namespace, NULL_TREE, NULL_TREE);\n-\t      /* Import the contents of the inline namespace.  */\n-\t      add_using_namespace (true, current_namespace, ns);\n-\t    }\n+\t    DECL_NAMESPACE_INLINE_P (ns) = true;\n \t}\n     }\n "}, {"sha": "ff77517744f30107ffbe7114dd9f217b5b5171d8", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -325,7 +325,6 @@ extern void do_namespace_alias (tree, tree);\n extern tree do_class_using_decl (tree, tree);\n extern void do_using_directive (tree);\n extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n-extern bool is_associated_namespace (tree, tree);\n extern tree innermost_non_namespace_value (tree);\n extern cxx_binding *outer_binding (tree, cxx_binding *, bool);\n extern void cp_emit_debug_info_for_using (tree, tree);"}, {"sha": "c2d6b1c3c7f22f3a05c7794ec000f023f5f6f913", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -5123,14 +5123,9 @@ cp_free_lang_data (tree t)\n       TREE_STATIC (t) = 0;\n     }\n   if (TREE_CODE (t) == NAMESPACE_DECL)\n-    {\n-      /* The list of users of a namespace isn't useful for the middle-end\n-\t or debug generators.  */\n-      DECL_NAMESPACE_USERS (t) = NULL_TREE;\n-      /* Neither do we need the leftover chaining of namespaces\n-         from the binding level.  */\n-      DECL_CHAIN (t) = NULL_TREE;\n-    }\n+    /* We do not need the leftover chaining of namespaces from the\n+       binding level.  */\n+    DECL_CHAIN (t) = NULL_TREE;\n }\n \n /* Stub for c-common.  Please keep in sync with c-decl.c."}, {"sha": "f9b56296468af314a4385d6d133609a14598559c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -6,6 +6,11 @@\n \n 2017-05-25  Nathan Sidwell  <nathan@acm.org>\n \n+\t* g++.dg/lookup/using56.C: New.\n+\t* g++.dg/lookup/using57.C: New.\n+\t* g++.dg/lookup/using58.C: New.\n+\t* g++.dg/lookup/using59.C: New.\n+\n \t* g++.dg/lookup/using17.C: Adjust diagnostics.\n \n 2017-05-25  Martin Sebor  <msebor@redhat.com>"}, {"sha": "0174ed33eac38636eb1b7332b7cd0eb34fa003b3", "filename": "gcc/testsuite/g++.dg/lookup/using56.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing56.C?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -0,0 +1,16 @@\n+\n+// The anticipated decl for 'log' got retained, leading to confusion  */\n+\n+extern double log (double) throw ();\n+\n+namespace std\n+{\n+  using ::log;\n+  float log (float) throw ();\n+  long double log (long double) throw ();\n+}\n+\n+void Foo (double x)\n+{\n+  std::log (x);\n+}"}, {"sha": "48ee2df9bc94f888364be89cb73fc372f41560c1", "filename": "gcc/testsuite/g++.dg/lookup/using57.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing57.C?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -0,0 +1,29 @@\n+// Addr of function from multiple namespaces\n+\n+namespace X\n+{\n+  void Foo (int);\n+  void Foo (short);\n+}\n+\n+namespace Y\n+{\n+  void Foo (float);\n+  void Foo (double);\n+}\n+\n+template <typename T> void Foo (T *);\n+\n+using namespace X;\n+\n+using namespace Y;\n+\n+void (*(Baz ())) (float)\n+{\n+  return Foo;\n+}\n+\n+void (*(Bar ())) (void *)\n+{\n+  return Foo;\n+}"}, {"sha": "d04bce1e91fb1ab778469f173a2aa2a73f127f0e", "filename": "gcc/testsuite/g++.dg/lookup/using58.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing58.C?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -0,0 +1,18 @@\n+\n+\n+void Foo (int);\n+void Foo (double);\n+\n+namespace Y\n+{\n+  void Baz (int); // { dg-message \"previous declaration\" }\n+}\n+\n+void X ()\n+{\n+  using ::Foo;\n+  extern void Foo (int);\n+\n+  using Y::Baz;\n+  extern void Baz (int);  // { dg-error \"conflicts with\" }\n+}"}, {"sha": "3c3a73c28d59ea34eb9fcadbb8ba81aac97e580c", "filename": "gcc/testsuite/g++.dg/lookup/using59.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing59.C?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -0,0 +1,12 @@\n+\n+namespace Y\n+{\n+  extern int I; //  { dg-message \"previous declaration\" }\n+}\n+\n+using Y::I;\n+extern int I; // { dg-error \"conflicts with a previous\" }\n+\n+extern int J;\n+extern int J; //  { dg-message \"previous declaration\" }\n+extern char J; // { dg-error \"conflicting declaration\" }"}, {"sha": "f22ea27c9c35db9c5ea1882afe2a835a48ffb7ae", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -1,3 +1,8 @@\n+2017-05-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_make_namespace_inline): Check and set\n+\tDECL_NAMESPACE_INLINE_P.\n+\n 2017-05-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_add_using_decl): Call"}, {"sha": "43781adce54120cf8c2d02de2830466a0352653f", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e00a7a1b398940c31b260b27a5f1f93d8017ed/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e00a7a1b398940c31b260b27a5f1f93d8017ed/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=44e00a7a1b398940c31b260b27a5f1f93d8017ed", "patch": "@@ -930,20 +930,10 @@ plugin_make_namespace_inline (cc1_plugin::connection *)\n \n   tree parent_ns = CP_DECL_CONTEXT (inline_ns);\n \n-  if (purpose_member (DECL_NAMESPACE_ASSOCIATIONS (inline_ns),\n-\t\t      parent_ns))\n+  if (DECL_NAMESPACE_INLINE_P (inline_ns))\n     return 0;\n \n-  pop_namespace ();\n-\n-  gcc_assert (current_namespace == parent_ns);\n-\n-  DECL_NAMESPACE_ASSOCIATIONS (inline_ns)\n-    = tree_cons (parent_ns, 0,\n-\t\t DECL_NAMESPACE_ASSOCIATIONS (inline_ns));\n-  do_using_directive (inline_ns);\n-\n-  push_namespace (DECL_NAME (inline_ns));\n+  DECL_NAMESPACE_INLINE_P (inline_ns) = true;\n \n   return 1;\n }"}]}