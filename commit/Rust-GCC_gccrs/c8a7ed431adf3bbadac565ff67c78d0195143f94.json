{"sha": "c8a7ed431adf3bbadac565ff67c78d0195143f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhN2VkNDMxYWRmM2JiYWRhYzU2NWZmNjdjNzhkMDE5NTE0M2Y5NA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-02-01T05:56:08Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-02-01T05:56:08Z"}, "message": "re PR c++/18757 (ICE (on invalid) in get_innermost_template_args)\n\ngcc/cp/ChangeLog:\nPR c++/18757\nPR c++/19366\nPR c++/19499\n* parser.c (cp_parser_template_id): Revert 2004-12-09's patch.\nIssue an error when creating the template id.\n* pt.c (fn_type_unification): Return early if the explicit\ntemplate arg list is an error_mark_node.\ngcc/testsuite/ChangeLog:\n* g++.dg/parse/typename7.C: Adjust error messages.\n\nFrom-SVN: r94520", "tree": {"sha": "41959edd402fc21a4a2cf1568e59e9fdc454395b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41959edd402fc21a4a2cf1568e59e9fdc454395b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a7ed431adf3bbadac565ff67c78d0195143f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a7ed431adf3bbadac565ff67c78d0195143f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a7ed431adf3bbadac565ff67c78d0195143f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a7ed431adf3bbadac565ff67c78d0195143f94/comments", "author": null, "committer": null, "parents": [{"sha": "7d793e369d9247bc0f839be7e7516075dea525be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d793e369d9247bc0f839be7e7516075dea525be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d793e369d9247bc0f839be7e7516075dea525be"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "2aa42c19e3fd999c6596aeb909eb29e15f2478a2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c8a7ed431adf3bbadac565ff67c78d0195143f94", "patch": "@@ -1,3 +1,13 @@\n+2005-02-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/18757\n+\tPR c++/19366\n+\tPR c++/19499\n+\t* parser.c (cp_parser_template_id): Revert 2004-12-09's patch.\n+\tIssue an error when creating the template id.\n+\t* pt.c (fn_type_unification): Return early if the explicit\n+\ttemplate arg list is an error_mark_node.\n+\n 2005-01-31  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (build_enumerator): Do not issue duplicate error messages"}, {"sha": "473d2059a569744a3d3b41051432b85b756e72af", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c8a7ed431adf3bbadac565ff67c78d0195143f94", "patch": "@@ -8514,7 +8514,7 @@ cp_parser_template_id (cp_parser *parser,\n      error messages about problems during instantiation of the\n      template.  Do so only if parsing succeeded, otherwise we may\n      silently accept template arguments with syntax errors.  */\n-  if (start_of_id && !cp_parser_error_occurred (parser))\n+  if (start_of_id)\n     {\n       cp_token *token = cp_lexer_token_at (parser->lexer, start_of_id);\n       \n@@ -8525,6 +8525,13 @@ cp_parser_template_id (cp_parser *parser,\n       \n       /* Purge all subsequent tokens.  */\n       cp_lexer_purge_tokens_after (parser->lexer, start_of_id);\n+\n+      /* ??? Can we actually assume that, if template_id ==\n+\t error_mark_node, we will have issued a diagnostic to the\n+\t user, as opposed to simply marking the tentative parse as\n+\t failed?  */\n+      if (cp_parser_error_occurred (parser) && template_id != error_mark_node)\n+\terror (\"parse error in template argument list\");\n     }\n \n   pop_deferring_access_checks ();"}, {"sha": "3252f368fc2bce7a1032d96b43812a70ca6eb046", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c8a7ed431adf3bbadac565ff67c78d0195143f94", "patch": "@@ -9123,6 +9123,9 @@ fn_type_unification (tree fn,\n       tree converted_args;\n       bool incomplete;\n \n+      if (explicit_targs == error_mark_node)\n+\treturn 1;\n+\n       converted_args\n \t= (coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn), \n \t\t\t\t  explicit_targs, NULL_TREE, tf_none, "}, {"sha": "defd0903b9816792b940302b94d6e62a05223057", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8a7ed431adf3bbadac565ff67c78d0195143f94", "patch": "@@ -1,3 +1,7 @@\n+2005-02-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/parse/typename7.C: Adjust error messages.\n+\n 2005-01-31  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/execute/20050131-1.c: New test."}, {"sha": "56fcc7436a4a20a4cacc093a55c83f4789b7adbf", "filename": "gcc/testsuite/g++.dg/parse/typename7.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a7ed431adf3bbadac565ff67c78d0195143f94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename7.C?ref=c8a7ed431adf3bbadac565ff67c78d0195143f94", "patch": "@@ -9,23 +9,23 @@ struct A\n {\n   template<typename>   void foo(int);\n   template<typename T> void bar(T t) {\n-    this->foo<typename T>(t); } // { dg-error \"expected\" }\n+    this->foo<typename T>(t); } // { dg-error \"expected|parse error|no matching\" }\n   template<typename T> void bad(T t) {\n-    foo<typename T>(t); } // { dg-error \"expected\" }\n+    foo<typename T>(t); } // { dg-error \"expected|parse error\" }\n };\n \n template <typename T>\n struct B\n {\n   void bar(T t) {\n-    A().bar<typename T>(t); } // { dg-error \"expected\" }\n+    A().bar<typename T>(t); } // { dg-error \"expected|parse error|no matching\" }\n   void bad(T t) {\n     B<typename T>::bar(t); } // { dg-error \"invalid|not a template\" }\n };\n \n void baz()\n {\n-    A().bar(0);\n-    A().bad(0);\n-    B<int>().bar(0);\n+  A().bar(0);\n+  A().bad(0);\n+  B<int>().bar(0);\n }"}]}