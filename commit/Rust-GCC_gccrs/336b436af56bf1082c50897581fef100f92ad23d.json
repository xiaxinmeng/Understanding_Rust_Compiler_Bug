{"sha": "336b436af56bf1082c50897581fef100f92ad23d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2YjQzNmFmNTZiZjEwODJjNTA4OTc1ODFmZWYxMDBmOTJhZDIzZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-02T08:39:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-02T08:39:28Z"}, "message": "Initial revision\n\nFrom-SVN: r16272", "tree": {"sha": "847b48d4fc9f6ec5a723ac45d1179feb71929d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/847b48d4fc9f6ec5a723ac45d1179feb71929d83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336b436af56bf1082c50897581fef100f92ad23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336b436af56bf1082c50897581fef100f92ad23d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336b436af56bf1082c50897581fef100f92ad23d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336b436af56bf1082c50897581fef100f92ad23d/comments", "author": null, "committer": null, "parents": [{"sha": "8072f69c31859b34df8a4613ec740f1174d0ae3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8072f69c31859b34df8a4613ec740f1174d0ae3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8072f69c31859b34df8a4613ec740f1174d0ae3e"}], "stats": {"total": 33137, "additions": 33137, "deletions": 0}, "files": [{"sha": "477fdf58c4fed63363509e5a0c8d41ce775d50b3", "filename": "gcc/auto-config.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fauto-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fauto-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-config.h?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,43 @@\n+/* auto-config.h.  Generated automatically by configure.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n+/* Whether malloc must be declared even if <stdlib.h> is included.  */\n+/* #undef NEED_DECLARATION_MALLOC */\n+\n+/* Whether realloc must be declared even if <stdlib.h> is included.  */\n+/* #undef NEED_DECLARATION_REALLOC */\n+\n+/* Whether calloc must be declared even if <stdlib.h> is included.  */\n+/* #undef NEED_DECLARATION_CALLOC */\n+\n+/* Whether free must be declared even if <stdlib.h> is included.  */\n+/* #undef NEED_DECLARATION_FREE */\n+\n+/* Define if `sys_siglist' is declared by <signal.h>.  */\n+#define SYS_SIGLIST_DECLARED 1\n+\n+/* Define if you have the strerror function.  */\n+#define HAVE_STRERROR 1\n+\n+/* Define if you have the <inttypes.h> header file.  */\n+/* #undef HAVE_INTTYPES_H */\n+\n+/* Define if you have the <limits.h> header file.  */\n+#define HAVE_LIMITS_H 1\n+\n+/* Define if you have the <stddef.h> header file.  */\n+#define HAVE_STDDEF_H 1\n+\n+/* Define if you have the <stdlib.h> header file.  */\n+#define HAVE_STDLIB_H 1\n+\n+/* Define if you have the <string.h> header file.  */\n+#define HAVE_STRING_H 1\n+\n+/* Define if you have the <strings.h> header file.  */\n+#define HAVE_STRINGS_H 1\n+\n+/* Define if you have the <time.h> header file.  */\n+#define HAVE_TIME_H 1\n+\n+/* Define if you have the <unistd.h> header file.  */\n+#define HAVE_UNISTD_H 1"}, {"sha": "f20aef96e1f143d9243eb0871ed1850631f86530", "filename": "gcc/cpp.info", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.info?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,75 @@\n+This is Info file cpp.info, produced by Makeinfo version 1.67 from the\n+input file cpp.texi.\n+\n+   This file documents the GNU C Preprocessor.\n+\n+   Copyright 1987, 1989, 1991, 1992, 1993, 1994, 1995 Free Software\n+Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the entire resulting derived work is distributed under the terms\n+of a permission notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions.\n+\n+\u001f\n+Indirect:\n+cpp.info-1: 798\n+cpp.info-2: 50062\n+cpp.info-3: 91249\n+\u001f\n+Tag Table:\n+(Indirect)\n+Node: Top\u007f798\n+Node: Global Actions\u007f3707\n+Node: Directives\u007f6227\n+Node: Header Files\u007f7914\n+Node: Header Uses\u007f8573\n+Node: Include Syntax\u007f10065\n+Node: Include Operation\u007f13207\n+Node: Once-Only\u007f15069\n+Node: Inheritance\u007f17494\n+Node: Macros\u007f20027\n+Node: Simple Macros\u007f20941\n+Node: Argument Macros\u007f23929\n+Node: Predefined\u007f29727\n+Node: Standard Predefined\u007f30157\n+Node: Nonstandard Predefined\u007f37948\n+Node: Stringification\u007f41524\n+Node: Concatenation\u007f44450\n+Node: Undefining\u007f47723\n+Node: Redefining\u007f48762\n+Node: Macro Pitfalls\u007f50062\n+Node: Misnesting\u007f51166\n+Node: Macro Parentheses\u007f52180\n+Node: Swallow Semicolon\u007f54048\n+Node: Side Effects\u007f55948\n+Node: Self-Reference\u007f57646\n+Node: Argument Prescan\u007f59922\n+Node: Cascaded Macros\u007f64924\n+Node: Newlines in Args\u007f66069\n+Node: Conditionals\u007f67414\n+Node: Conditional Uses\u007f68766\n+Node: Conditional Syntax\u007f70189\n+Node: #if Directive\u007f70775\n+Node: #else Directive\u007f73064\n+Node: #elif Directive\u007f73731\n+Node: Deleted Code\u007f75109\n+Node: Conditionals-Macros\u007f76170\n+Node: Assertions\u007f79855\n+Node: #error Directive\u007f84090\n+Node: Combining Sources\u007f85575\n+Node: Other Directives\u007f88486\n+Node: Output\u007f89940\n+Node: Invocation\u007f91249\n+Node: Concept Index\u007f103346\n+Node: Index\u007f106199\n+\u001f\n+End Tag Table"}, {"sha": "aa15a021fec87a8f07205d7a739366707eef3f25", "filename": "gcc/cpp.info-1", "status": "added", "additions": 1182, "deletions": 0, "changes": 1182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info-1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info-1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.info-1?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1182 @@\n+This is Info file cpp.info, produced by Makeinfo version 1.67 from the\n+input file cpp.texi.\n+\n+   This file documents the GNU C Preprocessor.\n+\n+   Copyright 1987, 1989, 1991, 1992, 1993, 1994, 1995 Free Software\n+Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the entire resulting derived work is distributed under the terms\n+of a permission notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions.\n+\n+\u001f\n+File: cpp.info,  Node: Top,  Next: Global Actions,  Up: (DIR)\n+\n+The C Preprocessor\n+******************\n+\n+   The C preprocessor is a \"macro processor\" that is used automatically\n+by the C compiler to transform your program before actual compilation.\n+It is called a macro processor because it allows you to define \"macros\",\n+which are brief abbreviations for longer constructs.\n+\n+   The C preprocessor provides four separate facilities that you can\n+use as you see fit:\n+\n+   * Inclusion of header files.  These are files of declarations that\n+     can be substituted into your program.\n+\n+   * Macro expansion.  You can define \"macros\", which are abbreviations\n+     for arbitrary fragments of C code, and then the C preprocessor will\n+     replace the macros with their definitions throughout the program.\n+\n+   * Conditional compilation.  Using special preprocessing directives,\n+     you can include or exclude parts of the program according to\n+     various conditions.\n+\n+   * Line control.  If you use a program to combine or rearrange source\n+     files into an intermediate file which is then compiled, you can\n+     use line control to inform the compiler of where each source line\n+     originally came from.\n+\n+   C preprocessors vary in some details.  This manual discusses the GNU\n+C preprocessor, the C Compatible Compiler Preprocessor.  The GNU C\n+preprocessor provides a superset of the features of ANSI Standard C.\n+\n+   ANSI Standard C requires the rejection of many harmless constructs\n+commonly used by today's C programs.  Such incompatibility would be\n+inconvenient for users, so the GNU C preprocessor is configured to\n+accept these constructs by default.  Strictly speaking, to get ANSI\n+Standard C, you must use the options `-trigraphs', `-undef' and\n+`-pedantic', but in practice the consequences of having strict ANSI\n+Standard C make it undesirable to do this.  *Note Invocation::.\n+\n+   The C preprocessor is designed for C-like languages; you may run into\n+problems if you apply it to other kinds of languages, because it assumes\n+that it is dealing with C.  For example, the C preprocessor sometimes\n+outputs extra white space to avoid inadvertent C token concatenation,\n+and this may cause problems with other languages.\n+\n+* Menu:\n+\n+* Global Actions::    Actions made uniformly on all input files.\n+* Directives::        General syntax of preprocessing directives.\n+* Header Files::      How and why to use header files.\n+* Macros::            How and why to use macros.\n+* Conditionals::      How and why to use conditionals.\n+* Combining Sources:: Use of line control when you combine source files.\n+* Other Directives::  Miscellaneous preprocessing directives.\n+* Output::            Format of output from the C preprocessor.\n+* Invocation::        How to invoke the preprocessor; command options.\n+* Concept Index::     Index of concepts and terms.\n+* Index::             Index of directives, predefined macros and options.\n+\n+\u001f\n+File: cpp.info,  Node: Global Actions,  Next: Directives,  Prev: Top,  Up: Top\n+\n+Transformations Made Globally\n+=============================\n+\n+   Most C preprocessor features are inactive unless you give specific\n+directives to request their use.  (Preprocessing directives are lines\n+starting with `#'; *note Directives::.).  But there are three\n+transformations that the preprocessor always makes on all the input it\n+receives, even in the absence of directives.\n+\n+   * All C comments are replaced with single spaces.\n+\n+   * Backslash-Newline sequences are deleted, no matter where.  This\n+     feature allows you to break long lines for cosmetic purposes\n+     without changing their meaning.\n+\n+   * Predefined macro names are replaced with their expansions (*note\n+     Predefined::.).\n+\n+   The first two transformations are done *before* nearly all other\n+parsing and before preprocessing directives are recognized.  Thus, for\n+example, you can split a line cosmetically with Backslash-Newline\n+anywhere (except when trigraphs are in use; see below).\n+\n+     /*\n+     */ # /*\n+     */ defi\\\n+     ne FO\\\n+     O 10\\\n+     20\n+\n+is equivalent into `#define FOO 1020'.  You can split even an escape\n+sequence with Backslash-Newline.  For example, you can split `\"foo\\bar\"'\n+between the `\\' and the `b' to get\n+\n+     \"foo\\\\\n+     bar\"\n+\n+This behavior is unclean: in all other contexts, a Backslash can be\n+inserted in a string constant as an ordinary character by writing a\n+double Backslash, and this creates an exception.  But the ANSI C\n+standard requires it.  (Strict ANSI C does not allow Newlines in string\n+constants, so they do not consider this a problem.)\n+\n+   But there are a few exceptions to all three transformations.\n+\n+   * C comments and predefined macro names are not recognized inside a\n+     `#include' directive in which the file name is delimited with `<'\n+     and `>'.\n+\n+   * C comments and predefined macro names are never recognized within a\n+     character or string constant.  (Strictly speaking, this is the\n+     rule, not an exception, but it is worth noting here anyway.)\n+\n+   * Backslash-Newline may not safely be used within an ANSI \"trigraph\".\n+     Trigraphs are converted before Backslash-Newline is deleted.  If\n+     you write what looks like a trigraph with a Backslash-Newline\n+     inside, the Backslash-Newline is deleted as usual, but it is then\n+     too late to recognize the trigraph.\n+\n+     This exception is relevant only if you use the `-trigraphs' option\n+     to enable trigraph processing.  *Note Invocation::.\n+\n+\u001f\n+File: cpp.info,  Node: Directives,  Next: Header Files,  Prev: Global Actions,  Up: Top\n+\n+Preprocessing Directives\n+========================\n+\n+   Most preprocessor features are active only if you use preprocessing\n+directives to request their use.\n+\n+   Preprocessing directives are lines in your program that start with\n+`#'.  The `#' is followed by an identifier that is the \"directive name\".\n+For example, `#define' is the directive that defines a macro.\n+Whitespace is also allowed before and after the `#'.\n+\n+   The set of valid directive names is fixed.  Programs cannot define\n+new preprocessing directives.\n+\n+   Some directive names require arguments; these make up the rest of\n+the directive line and must be separated from the directive name by\n+whitespace.  For example, `#define' must be followed by a macro name\n+and the intended expansion of the macro.  *Note Simple Macros::.\n+\n+   A preprocessing directive cannot be more than one line in normal\n+circumstances.  It may be split cosmetically with Backslash-Newline,\n+but that has no effect on its meaning.  Comments containing Newlines\n+can also divide the directive into multiple lines, but the comments are\n+changed to Spaces before the directive is interpreted.  The only way a\n+significant Newline can occur in a preprocessing directive is within a\n+string constant or character constant.  Note that most C compilers that\n+might be applied to the output from the preprocessor do not accept\n+string or character constants containing Newlines.\n+\n+   The `#' and the directive name cannot come from a macro expansion.\n+For example, if `foo' is defined as a macro expanding to `define', that\n+does not make `#foo' a valid preprocessing directive.\n+\n+\u001f\n+File: cpp.info,  Node: Header Files,  Next: Macros,  Prev: Directives,  Up: Top\n+\n+Header Files\n+============\n+\n+   A header file is a file containing C declarations and macro\n+definitions (*note Macros::.) to be shared between several source\n+files.  You request the use of a header file in your program with the C\n+preprocessing directive `#include'.\n+\n+* Menu:\n+\n+* Header Uses::         What header files are used for.\n+* Include Syntax::      How to write `#include' directives.\n+* Include Operation::   What `#include' does.\n+* Once-Only::\t\tPreventing multiple inclusion of one header file.\n+* Inheritance::         Including one header file in another header file.\n+\n+\u001f\n+File: cpp.info,  Node: Header Uses,  Next: Include Syntax,  Prev: Header Files,  Up: Header Files\n+\n+Uses of Header Files\n+--------------------\n+\n+   Header files serve two kinds of purposes.\n+\n+   * System header files declare the interfaces to parts of the\n+     operating system.  You include them in your program to supply the\n+     definitions and declarations you need to invoke system calls and\n+     libraries.\n+\n+   * Your own header files contain declarations for interfaces between\n+     the source files of your program.  Each time you have a group of\n+     related declarations and macro definitions all or most of which\n+     are needed in several different source files, it is a good idea to\n+     create a header file for them.\n+\n+   Including a header file produces the same results in C compilation as\n+copying the header file into each source file that needs it.  But such\n+copying would be time-consuming and error-prone.  With a header file,\n+the related declarations appear in only one place.  If they need to be\n+changed, they can be changed in one place, and programs that include\n+the header file will automatically use the new version when next\n+recompiled.  The header file eliminates the labor of finding and\n+changing all the copies as well as the risk that a failure to find one\n+copy will result in inconsistencies within a program.\n+\n+   The usual convention is to give header files names that end with\n+`.h'.  Avoid unusual characters in header file names, as they reduce\n+portability.\n+\n+\u001f\n+File: cpp.info,  Node: Include Syntax,  Next: Include Operation,  Prev: Header Uses,  Up: Header Files\n+\n+The `#include' Directive\n+------------------------\n+\n+   Both user and system header files are included using the\n+preprocessing directive `#include'.  It has three variants:\n+\n+`#include <FILE>'\n+     This variant is used for system header files.  It searches for a\n+     file named FILE in a list of directories specified by you, then in\n+     a standard list of system directories.  You specify directories to\n+     search for header files with the command option `-I' (*note\n+     Invocation::.).  The option `-nostdinc' inhibits searching the\n+     standard system directories; in this case only the directories you\n+     specify are searched.\n+\n+     The parsing of this form of `#include' is slightly special because\n+     comments are not recognized within the `<...>'.  Thus, in\n+     `#include <x/*y>' the `/*' does not start a comment and the\n+     directive specifies inclusion of a system header file named\n+     `x/*y'.  Of course, a header file with such a name is unlikely to\n+     exist on Unix, where shell wildcard features would make it hard to\n+     manipulate.\n+\n+     The argument FILE may not contain a `>' character.  It may,\n+     however, contain a `<' character.\n+\n+`#include \"FILE\"'\n+     This variant is used for header files of your own program.  It\n+     searches for a file named FILE first in the current directory,\n+     then in the same directories used for system header files.  The\n+     current directory is the directory of the current input file.  It\n+     is tried first because it is presumed to be the location of the\n+     files that the current input file refers to.  (If the `-I-' option\n+     is used, the special treatment of the current directory is\n+     inhibited.)\n+\n+     The argument FILE may not contain `\"' characters.  If backslashes\n+     occur within FILE, they are considered ordinary text characters,\n+     not escape characters.  None of the character escape sequences\n+     appropriate to string constants in C are processed.  Thus,\n+     `#include \"x\\n\\\\y\"' specifies a filename containing three\n+     backslashes.  It is not clear why this behavior is ever useful, but\n+     the ANSI standard specifies it.\n+\n+`#include ANYTHING ELSE'\n+     This variant is called a \"computed #include\".  Any `#include'\n+     directive whose argument does not fit the above two forms is a\n+     computed include.  The text ANYTHING ELSE is checked for macro\n+     calls, which are expanded (*note Macros::.).  When this is done,\n+     the result must fit one of the above two variants--in particular,\n+     the expanded text must in the end be surrounded by either quotes\n+     or angle braces.\n+\n+     This feature allows you to define a macro which controls the file\n+     name to be used at a later point in the program.  One application\n+     of this is to allow a site-specific configuration file for your\n+     program to specify the names of the system include files to be\n+     used.  This can help in porting the program to various operating\n+     systems in which the necessary system header files are found in\n+     different places.\n+\n+\u001f\n+File: cpp.info,  Node: Include Operation,  Next: Once-Only,  Prev: Include Syntax,  Up: Header Files\n+\n+How `#include' Works\n+--------------------\n+\n+   The `#include' directive works by directing the C preprocessor to\n+scan the specified file as input before continuing with the rest of the\n+current file.  The output from the preprocessor contains the output\n+already generated, followed by the output resulting from the included\n+file, followed by the output that comes from the text after the\n+`#include' directive.  For example, given a header file `header.h' as\n+follows,\n+\n+     char *test ();\n+\n+and a main program called `program.c' that uses the header file, like\n+this,\n+\n+     int x;\n+     #include \"header.h\"\n+     \n+     main ()\n+     {\n+       printf (test ());\n+     }\n+\n+the output generated by the C preprocessor for `program.c' as input\n+would be\n+\n+     int x;\n+     char *test ();\n+     \n+     main ()\n+     {\n+       printf (test ());\n+     }\n+\n+   Included files are not limited to declarations and macro\n+definitions; those are merely the typical uses.  Any fragment of a C\n+program can be included from another file.  The include file could even\n+contain the beginning of a statement that is concluded in the\n+containing file, or the end of a statement that was started in the\n+including file.  However, a comment or a string or character constant\n+may not start in the included file and finish in the including file.\n+An unterminated comment, string constant or character constant in an\n+included file is considered to end (with an error message) at the end\n+of the file.\n+\n+   It is possible for a header file to begin or end a syntactic unit\n+such as a function definition, but that would be very confusing, so\n+don't do it.\n+\n+   The line following the `#include' directive is always treated as a\n+separate line by the C preprocessor even if the included file lacks a\n+final newline.\n+\n+\u001f\n+File: cpp.info,  Node: Once-Only,  Next: Inheritance,  Prev: Include Operation,  Up: Header Files\n+\n+Once-Only Include Files\n+-----------------------\n+\n+   Very often, one header file includes another.  It can easily result\n+that a certain header file is included more than once.  This may lead\n+to errors, if the header file defines structure types or typedefs, and\n+is certainly wasteful.  Therefore, we often wish to prevent multiple\n+inclusion of a header file.\n+\n+   The standard way to do this is to enclose the entire real contents\n+of the file in a conditional, like this:\n+\n+     #ifndef FILE_FOO_SEEN\n+     #define FILE_FOO_SEEN\n+     \n+     THE ENTIRE FILE\n+     \n+     #endif /* FILE_FOO_SEEN */\n+\n+   The macro `FILE_FOO_SEEN' indicates that the file has been included\n+once already.  In a user header file, the macro name should not begin\n+with `_'.  In a system header file, this name should begin with `__' to\n+avoid conflicts with user programs.  In any kind of header file, the\n+macro name should contain the name of the file and some additional\n+text, to avoid conflicts with other header files.\n+\n+   The GNU C preprocessor is programmed to notice when a header file\n+uses this particular construct and handle it efficiently.  If a header\n+file is contained entirely in a `#ifndef' conditional, then it records\n+that fact.  If a subsequent `#include' specifies the same file, and the\n+macro in the `#ifndef' is already defined, then the file is entirely\n+skipped, without even reading it.\n+\n+   There is also an explicit directive to tell the preprocessor that it\n+need not include a file more than once.  This is called `#pragma once',\n+and was used *in addition to* the `#ifndef' conditional around the\n+contents of the header file.  `#pragma once' is now obsolete and should\n+not be used at all.\n+\n+   In the Objective C language, there is a variant of `#include' called\n+`#import' which includes a file, but does so at most once.  If you use\n+`#import' *instead of* `#include', then you don't need the conditionals\n+inside the header file to prevent multiple execution of the contents.\n+\n+   `#import' is obsolete because it is not a well designed feature.  It\n+requires the users of a header file--the applications programmers--to\n+know that a certain header file should only be included once.  It is\n+much better for the header file's implementor to write the file so that\n+users don't need to know this.  Using `#ifndef' accomplishes this goal.\n+\n+\u001f\n+File: cpp.info,  Node: Inheritance,  Prev: Once-Only,  Up: Header Files\n+\n+Inheritance and Header Files\n+----------------------------\n+\n+   \"Inheritance\" is what happens when one object or file derives some\n+of its contents by virtual copying from another object or file.  In the\n+case of C header files, inheritance means that one header file includes\n+another header file and then replaces or adds something.\n+\n+   If the inheriting header file and the base header file have different\n+names, then inheritance is straightforward: simply write `#include\n+\"BASE\"' in the inheriting file.\n+\n+   Sometimes it is necessary to give the inheriting file the same name\n+as the base file.  This is less straightforward.\n+\n+   For example, suppose an application program uses the system header\n+`sys/signal.h', but the version of `/usr/include/sys/signal.h' on a\n+particular system doesn't do what the application program expects.  It\n+might be convenient to define a \"local\" version, perhaps under the name\n+`/usr/local/include/sys/signal.h', to override or add to the one\n+supplied by the system.\n+\n+   You can do this by compiling with the option `-I.', and writing a\n+file `sys/signal.h' that does what the application program expects.\n+But making this file include the standard `sys/signal.h' is not so\n+easy--writing `#include <sys/signal.h>' in that file doesn't work,\n+because it includes your own version of the file, not the standard\n+system version.  Used in that file itself, this leads to an infinite\n+recursion and a fatal error in compilation.\n+\n+   `#include </usr/include/sys/signal.h>' would find the proper file,\n+but that is not clean, since it makes an assumption about where the\n+system header file is found.  This is bad for maintenance, since it\n+means that any change in where the system's header files are kept\n+requires a change somewhere else.\n+\n+   The clean way to solve this problem is to use `#include_next', which\n+means, \"Include the *next* file with this name.\"  This directive works\n+like `#include' except in searching for the specified file: it starts\n+searching the list of header file directories *after* the directory in\n+which the current file was found.\n+\n+   Suppose you specify `-I /usr/local/include', and the list of\n+directories to search also includes `/usr/include'; and suppose both\n+directories contain `sys/signal.h'.  Ordinary `#include <sys/signal.h>'\n+finds the file under `/usr/local/include'.  If that file contains\n+`#include_next <sys/signal.h>', it starts searching after that\n+directory, and finds the file in `/usr/include'.\n+\n+\u001f\n+File: cpp.info,  Node: Macros,  Next: Conditionals,  Prev: Header Files,  Up: Top\n+\n+Macros\n+======\n+\n+   A macro is a sort of abbreviation which you can define once and then\n+use later.  There are many complicated features associated with macros\n+in the C preprocessor.\n+\n+* Menu:\n+\n+* Simple Macros::    Macros that always expand the same way.\n+* Argument Macros::  Macros that accept arguments that are substituted\n+                       into the macro expansion.\n+* Predefined::       Predefined macros that are always available.\n+* Stringification::  Macro arguments converted into string constants.\n+* Concatenation::    Building tokens from parts taken from macro arguments.\n+* Undefining::       Cancelling a macro's definition.\n+* Redefining::       Changing a macro's definition.\n+* Macro Pitfalls::   Macros can confuse the unwary.  Here we explain\n+                       several common problems and strange features.\n+\n+\u001f\n+File: cpp.info,  Node: Simple Macros,  Next: Argument Macros,  Prev: Macros,  Up: Macros\n+\n+Simple Macros\n+-------------\n+\n+   A \"simple macro\" is a kind of abbreviation.  It is a name which\n+stands for a fragment of code.  Some people refer to these as \"manifest\n+constants\".\n+\n+   Before you can use a macro, you must \"define\" it explicitly with the\n+`#define' directive.  `#define' is followed by the name of the macro\n+and then the code it should be an abbreviation for.  For example,\n+\n+     #define BUFFER_SIZE 1020\n+\n+defines a macro named `BUFFER_SIZE' as an abbreviation for the text\n+`1020'.  If somewhere after this `#define' directive there comes a C\n+statement of the form\n+\n+     foo = (char *) xmalloc (BUFFER_SIZE);\n+\n+then the C preprocessor will recognize and \"expand\" the macro\n+`BUFFER_SIZE', resulting in\n+\n+     foo = (char *) xmalloc (1020);\n+\n+   The use of all upper case for macro names is a standard convention.\n+Programs are easier to read when it is possible to tell at a glance\n+which names are macros.\n+\n+   Normally, a macro definition must be a single line, like all C\n+preprocessing directives.  (You can split a long macro definition\n+cosmetically with Backslash-Newline.)  There is one exception: Newlines\n+can be included in the macro definition if within a string or character\n+constant.  This is because it is not possible for a macro definition to\n+contain an unbalanced quote character; the definition automatically\n+extends to include the matching quote character that ends the string or\n+character constant.  Comments within a macro definition may contain\n+Newlines, which make no difference since the comments are entirely\n+replaced with Spaces regardless of their contents.\n+\n+   Aside from the above, there is no restriction on what can go in a\n+macro body.  Parentheses need not balance.  The body need not resemble\n+valid C code.  (But if it does not, you may get error messages from the\n+C compiler when you use the macro.)\n+\n+   The C preprocessor scans your program sequentially, so macro\n+definitions take effect at the place you write them.  Therefore, the\n+following input to the C preprocessor\n+\n+     foo = X;\n+     #define X 4\n+     bar = X;\n+\n+produces as output\n+\n+     foo = X;\n+     \n+     bar = 4;\n+\n+   After the preprocessor expands a macro name, the macro's definition\n+body is appended to the front of the remaining input, and the check for\n+macro calls continues.  Therefore, the macro body can contain calls to\n+other macros.  For example, after\n+\n+     #define BUFSIZE 1020\n+     #define TABLESIZE BUFSIZE\n+\n+the name `TABLESIZE' when used in the program would go through two\n+stages of expansion, resulting ultimately in `1020'.\n+\n+   This is not at all the same as defining `TABLESIZE' to be `1020'.\n+The `#define' for `TABLESIZE' uses exactly the body you specify--in\n+this case, `BUFSIZE'--and does not check to see whether it too is the\n+name of a macro.  It's only when you *use* `TABLESIZE' that the result\n+of its expansion is checked for more macro names.  *Note Cascaded\n+Macros::.\n+\n+\u001f\n+File: cpp.info,  Node: Argument Macros,  Next: Predefined,  Prev: Simple Macros,  Up: Macros\n+\n+Macros with Arguments\n+---------------------\n+\n+   A simple macro always stands for exactly the same text, each time it\n+is used.  Macros can be more flexible when they accept \"arguments\".\n+Arguments are fragments of code that you supply each time the macro is\n+used.  These fragments are included in the expansion of the macro\n+according to the directions in the macro definition.  A macro that\n+accepts arguments is called a \"function-like macro\" because the syntax\n+for using it looks like a function call.\n+\n+   To define a macro that uses arguments, you write a `#define'\n+directive with a list of \"argument names\" in parentheses after the name\n+of the macro.  The argument names may be any valid C identifiers,\n+separated by commas and optionally whitespace.  The open-parenthesis\n+must follow the macro name immediately, with no space in between.\n+\n+   For example, here is a macro that computes the minimum of two numeric\n+values, as it is defined in many C programs:\n+\n+     #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n+\n+(This is not the best way to define a \"minimum\" macro in GNU C.  *Note\n+Side Effects::, for more information.)\n+\n+   To use a macro that expects arguments, you write the name of the\n+macro followed by a list of \"actual arguments\" in parentheses,\n+separated by commas.  The number of actual arguments you give must\n+match the number of arguments the macro expects.   Examples of use of\n+the macro `min' include `min (1, 2)' and `min (x + 28, *p)'.\n+\n+   The expansion text of the macro depends on the arguments you use.\n+Each of the argument names of the macro is replaced, throughout the\n+macro definition, with the corresponding actual argument.  Using the\n+same macro `min' defined above, `min (1, 2)' expands into\n+\n+     ((1) < (2) ? (1) : (2))\n+\n+where `1' has been substituted for `X' and `2' for `Y'.\n+\n+   Likewise, `min (x + 28, *p)' expands into\n+\n+     ((x + 28) < (*p) ? (x + 28) : (*p))\n+\n+   Parentheses in the actual arguments must balance; a comma within\n+parentheses does not end an argument.  However, there is no requirement\n+for brackets or braces to balance, and they do not prevent a comma from\n+separating arguments.  Thus,\n+\n+     macro (array[x = y, x + 1])\n+\n+passes two arguments to `macro': `array[x = y' and `x + 1]'.  If you\n+want to supply `array[x = y, x + 1]' as an argument, you must write it\n+as `array[(x = y, x + 1)]', which is equivalent C code.\n+\n+   After the actual arguments are substituted into the macro body, the\n+entire result is appended to the front of the remaining input, and the\n+check for macro calls continues.  Therefore, the actual arguments can\n+contain calls to other macros, either with or without arguments, or\n+even to the same macro.  The macro body can also contain calls to other\n+macros.  For example, `min (min (a, b), c)' expands into this text:\n+\n+     ((((a) < (b) ? (a) : (b))) < (c)\n+      ? (((a) < (b) ? (a) : (b)))\n+      : (c))\n+\n+(Line breaks shown here for clarity would not actually be generated.)\n+\n+   If a macro `foo' takes one argument, and you want to supply an empty\n+argument, you must write at least some whitespace between the\n+parentheses, like this: `foo ( )'.  Just `foo ()' is providing no\n+arguments, which is an error if `foo' expects an argument.  But `foo0\n+()' is the correct way to call a macro defined to take zero arguments,\n+like this:\n+\n+     #define foo0() ...\n+\n+   If you use the macro name followed by something other than an\n+open-parenthesis (after ignoring any spaces, tabs and comments that\n+follow), it is not a call to the macro, and the preprocessor does not\n+change what you have written.  Therefore, it is possible for the same\n+name to be a variable or function in your program as well as a macro,\n+and you can choose in each instance whether to refer to the macro (if\n+an actual argument list follows) or the variable or function (if an\n+argument list does not follow).\n+\n+   Such dual use of one name could be confusing and should be avoided\n+except when the two meanings are effectively synonymous: that is, when\n+the name is both a macro and a function and the two have similar\n+effects.  You can think of the name simply as a function; use of the\n+name for purposes other than calling it (such as, to take the address)\n+will refer to the function, while calls will expand the macro and\n+generate better but equivalent code.  For example, you can use a\n+function named `min' in the same source file that defines the macro.\n+If you write `&min' with no argument list, you refer to the function.\n+If you write `min (x, bb)', with an argument list, the macro is\n+expanded.  If you write `(min) (a, bb)', where the name `min' is not\n+followed by an open-parenthesis, the macro is not expanded, so you wind\n+up with a call to the function `min'.\n+\n+   You may not define the same name as both a simple macro and a macro\n+with arguments.\n+\n+   In the definition of a macro with arguments, the list of argument\n+names must follow the macro name immediately with no space in between.\n+If there is a space after the macro name, the macro is defined as\n+taking no arguments, and all the rest of the line is taken to be the\n+expansion.  The reason for this is that it is often useful to define a\n+macro that takes no arguments and whose definition begins with an\n+identifier in parentheses.  This rule about spaces makes it possible\n+for you to do either this:\n+\n+     #define FOO(x) - 1 / (x)\n+\n+(which defines `FOO' to take an argument and expand into minus the\n+reciprocal of that argument) or this:\n+\n+     #define BAR (x) - 1 / (x)\n+\n+(which defines `BAR' to take no argument and always expand into `(x) -\n+1 / (x)').\n+\n+   Note that the *uses* of a macro with arguments can have spaces before\n+the left parenthesis; it's the *definition* where it matters whether\n+there is a space.\n+\n+\u001f\n+File: cpp.info,  Node: Predefined,  Next: Stringification,  Prev: Argument Macros,  Up: Macros\n+\n+Predefined Macros\n+-----------------\n+\n+   Several simple macros are predefined.  You can use them without\n+giving definitions for them.  They fall into two classes: standard\n+macros and system-specific macros.\n+\n+* Menu:\n+\n+* Standard Predefined::     Standard predefined macros.\n+* Nonstandard Predefined::  Nonstandard predefined macros.\n+\n+\u001f\n+File: cpp.info,  Node: Standard Predefined,  Next: Nonstandard Predefined,  Prev: Predefined,  Up: Predefined\n+\n+Standard Predefined Macros\n+..........................\n+\n+   The standard predefined macros are available with the same meanings\n+regardless of the machine or operating system on which you are using\n+GNU C.  Their names all start and end with double underscores.  Those\n+preceding `__GNUC__' in this table are standardized by ANSI C; the rest\n+are GNU C extensions.\n+\n+`__FILE__'\n+     This macro expands to the name of the current input file, in the\n+     form of a C string constant.  The precise name returned is the one\n+     that was specified in `#include' or as the input file name\n+     argument.\n+\n+`__LINE__'\n+     This macro expands to the current input line number, in the form\n+     of a decimal integer constant.  While we call it a predefined\n+     macro, it's a pretty strange macro, since its \"definition\" changes\n+     with each new line of source code.\n+\n+     This and `__FILE__' are useful in generating an error message to\n+     report an inconsistency detected by the program; the message can\n+     state the source line at which the inconsistency was detected.\n+     For example,\n+\n+          fprintf (stderr, \"Internal error: \"\n+                           \"negative string length \"\n+                           \"%d at %s, line %d.\",\n+                   length, __FILE__, __LINE__);\n+\n+     A `#include' directive changes the expansions of `__FILE__' and\n+     `__LINE__' to correspond to the included file.  At the end of that\n+     file, when processing resumes on the input file that contained the\n+     `#include' directive, the expansions of `__FILE__' and `__LINE__'\n+     revert to the values they had before the `#include' (but\n+     `__LINE__' is then incremented by one as processing moves to the\n+     line after the `#include').\n+\n+     The expansions of both `__FILE__' and `__LINE__' are altered if a\n+     `#line' directive is used.  *Note Combining Sources::.\n+\n+`__DATE__'\n+     This macro expands to a string constant that describes the date on\n+     which the preprocessor is being run.  The string constant contains\n+     eleven characters and looks like `\"Feb  1 1996\"'.\n+\n+`__TIME__'\n+     This macro expands to a string constant that describes the time at\n+     which the preprocessor is being run.  The string constant contains\n+     eight characters and looks like `\"23:59:01\"'.\n+\n+`__STDC__'\n+     This macro expands to the constant 1, to signify that this is ANSI\n+     Standard C.  (Whether that is actually true depends on what C\n+     compiler will operate on the output from the preprocessor.)\n+\n+     On some hosts, system include files use a different convention,\n+     where `__STDC__' is normally 0, but is 1 if the user specifies\n+     strict conformance to the C Standard.  The preprocessor follows\n+     the host convention when processing system include files, but when\n+     processing user files it follows the usual GNU C convention.\n+\n+     This macro is not defined if the `-traditional' option is used.\n+\n+`__STDC_VERSION__'\n+     This macro expands to the C Standard's version number, a long\n+     integer constant of the form `YYYYMML' where YYYY and MM are the\n+     year and month of the Standard version.  This signifies which\n+     version of the C Standard the preprocessor conforms to.  Like\n+     `__STDC__', whether this version number is accurate for the entire\n+     implementation depends on what C compiler will operate on the\n+     output from the preprocessor.\n+\n+     This macro is not defined if the `-traditional' option is used.\n+\n+`__GNUC__'\n+     This macro is defined if and only if this is GNU C.  This macro is\n+     defined only when the entire GNU C compiler is in use; if you\n+     invoke the preprocessor directly, `__GNUC__' is undefined.  The\n+     value identifies the major version number of GNU CC (`1' for GNU CC\n+     version 1, which is now obsolete, and `2' for version 2).\n+\n+`__GNUC_MINOR__'\n+     The macro contains the minor version number of the compiler.  This\n+     can be used to work around differences between different releases\n+     of the compiler (for example, if gcc 2.6.3 is known to support a\n+     feature, you can test for `__GNUC__ > 2 || (__GNUC__ == 2 &&\n+     __GNUC_MINOR__ >= 6)').  The last number, `3' in the example\n+     above, denotes the bugfix level of the compiler; no macro contains\n+     this value.\n+\n+`__GNUG__'\n+     The GNU C compiler defines this when the compilation language is\n+     C++; use `__GNUG__' to distinguish between GNU C and GNU C++.\n+\n+`__cplusplus'\n+     The draft ANSI standard for C++ used to require predefining this\n+     variable.  Though it is no longer required, GNU C++ continues to\n+     define it, as do other popular C++ compilers.  You can use\n+     `__cplusplus' to test whether a header is compiled by a C compiler\n+     or a C++ compiler.\n+\n+`__STRICT_ANSI__'\n+     This macro is defined if and only if the `-ansi' switch was\n+     specified when GNU C was invoked.  Its definition is the null\n+     string.  This macro exists primarily to direct certain GNU header\n+     files not to define certain traditional Unix constructs which are\n+     incompatible with ANSI C.\n+\n+`__BASE_FILE__'\n+     This macro expands to the name of the main input file, in the form\n+     of a C string constant.  This is the source file that was specified\n+     as an argument when the C compiler was invoked.\n+\n+`__INCLUDE_LEVEL__'\n+     This macro expands to a decimal integer constant that represents\n+     the depth of nesting in include files.  The value of this macro is\n+     incremented on every `#include' directive and decremented at every\n+     end of file.  For input files specified by command line arguments,\n+     the nesting level is zero.\n+\n+`__VERSION__'\n+     This macro expands to a string which describes the version number\n+     of GNU C.  The string is normally a sequence of decimal numbers\n+     separated by periods, such as `\"2.6.0\"'.  The only reasonable use\n+     of this macro is to incorporate it into a string constant.\n+\n+`__OPTIMIZE__'\n+     This macro is defined in optimizing compilations.  It causes\n+     certain GNU header files to define alternative macro definitions\n+     for some system library functions.  It is unwise to refer to or\n+     test the definition of this macro unless you make very sure that\n+     programs will execute with the same effect regardless.\n+\n+`__CHAR_UNSIGNED__'\n+     This macro is defined if and only if the data type `char' is\n+     unsigned on the target machine.  It exists to cause the standard\n+     header file `limits.h' to work correctly.  It is bad practice to\n+     refer to this macro yourself; instead, refer to the standard\n+     macros defined in `limits.h'.  The preprocessor uses this macro to\n+     determine whether or not to sign-extend large character constants\n+     written in octal; see *Note The `#if' Directive: #if Directive.\n+\n+`__REGISTER_PREFIX__'\n+     This macro expands to a string describing the prefix applied to cpu\n+     registers in assembler code.  It can be used to write assembler\n+     code that is usable in multiple environments.  For example, in the\n+     `m68k-aout' environment it expands to the string `\"\"', but in the\n+     `m68k-coff' environment it expands to the string `\"%\"'.\n+\n+`__USER_LABEL_PREFIX__'\n+     This macro expands to a string describing the prefix applied to\n+     user generated labels in assembler code.  It can be used to write\n+     assembler code that is usable in multiple environments.  For\n+     example, in the `m68k-aout' environment it expands to the string\n+     `\"_\"', but in the `m68k-coff' environment it expands to the string\n+     `\"\"'.  This does not work with the `-mno-underscores' option that\n+     the i386 OSF/rose and m88k targets provide nor with the `-mcall*'\n+     options of the rs6000 System V Release 4 target.\n+\n+\u001f\n+File: cpp.info,  Node: Nonstandard Predefined,  Prev: Standard Predefined,  Up: Predefined\n+\n+Nonstandard Predefined Macros\n+.............................\n+\n+   The C preprocessor normally has several predefined macros that vary\n+between machines because their purpose is to indicate what type of\n+system and machine is in use.  This manual, being for all systems and\n+machines, cannot tell you exactly what their names are; instead, we\n+offer a list of some typical ones.  You can use `cpp -dM' to see the\n+values of predefined macros; see *Note Invocation::.\n+\n+   Some nonstandard predefined macros describe the operating system in\n+use, with more or less specificity.  For example,\n+\n+`unix'\n+     `unix' is normally predefined on all Unix systems.\n+\n+`BSD'\n+     `BSD' is predefined on recent versions of Berkeley Unix (perhaps\n+     only in version 4.3).\n+\n+   Other nonstandard predefined macros describe the kind of CPU, with\n+more or less specificity.  For example,\n+\n+`vax'\n+     `vax' is predefined on Vax computers.\n+\n+`mc68000'\n+     `mc68000' is predefined on most computers whose CPU is a Motorola\n+     68000, 68010 or 68020.\n+\n+`m68k'\n+     `m68k' is also predefined on most computers whose CPU is a 68000,\n+     68010 or 68020; however, some makers use `mc68000' and some use\n+     `m68k'.  Some predefine both names.  What happens in GNU C depends\n+     on the system you are using it on.\n+\n+`M68020'\n+     `M68020' has been observed to be predefined on some systems that\n+     use 68020 CPUs--in addition to `mc68000' and `m68k', which are\n+     less specific.\n+\n+`_AM29K'\n+`_AM29000'\n+     Both `_AM29K' and `_AM29000' are predefined for the AMD 29000 CPU\n+     family.\n+\n+`ns32000'\n+     `ns32000' is predefined on computers which use the National\n+     Semiconductor 32000 series CPU.\n+\n+   Yet other nonstandard predefined macros describe the manufacturer of\n+the system.  For example,\n+\n+`sun'\n+     `sun' is predefined on all models of Sun computers.\n+\n+`pyr'\n+     `pyr' is predefined on all models of Pyramid computers.\n+\n+`sequent'\n+     `sequent' is predefined on all models of Sequent computers.\n+\n+   These predefined symbols are not only nonstandard, they are contrary\n+to the ANSI standard because their names do not start with underscores.\n+Therefore, the option `-ansi' inhibits the definition of these symbols.\n+\n+   This tends to make `-ansi' useless, since many programs depend on the\n+customary nonstandard predefined symbols.  Even system header files\n+check them and will generate incorrect declarations if they do not find\n+the names that are expected.  You might think that the header files\n+supplied for the Uglix computer would not need to test what machine\n+they are running on, because they can simply assume it is the Uglix;\n+but often they do, and they do so using the customary names.  As a\n+result, very few C programs will compile with `-ansi'.  We intend to\n+avoid such problems on the GNU system.\n+\n+   What, then, should you do in an ANSI C program to test the type of\n+machine it will run on?\n+\n+   GNU C offers a parallel series of symbols for this purpose, whose\n+names are made from the customary ones by adding `__' at the beginning\n+and end.  Thus, the symbol `__vax__' would be available on a Vax, and\n+so on.\n+\n+   The set of nonstandard predefined names in the GNU C preprocessor is\n+controlled (when `cpp' is itself compiled) by the macro\n+`CPP_PREDEFINES', which should be a string containing `-D' options,\n+separated by spaces.  For example, on the Sun 3, we use the following\n+definition:\n+\n+     #define CPP_PREDEFINES \"-Dmc68000 -Dsun -Dunix -Dm68k\"\n+\n+This macro is usually specified in `tm.h'.\n+\n+\u001f\n+File: cpp.info,  Node: Stringification,  Next: Concatenation,  Prev: Predefined,  Up: Macros\n+\n+Stringification\n+---------------\n+\n+   \"Stringification\" means turning a code fragment into a string\n+constant whose contents are the text for the code fragment.  For\n+example, stringifying `foo (z)' results in `\"foo (z)\"'.\n+\n+   In the C preprocessor, stringification is an option available when\n+macro arguments are substituted into the macro definition.  In the body\n+of the definition, when an argument name appears, the character `#'\n+before the name specifies stringification of the corresponding actual\n+argument when it is substituted at that point in the definition.  The\n+same argument may be substituted in other places in the definition\n+without stringification if the argument name appears in those places\n+with no `#'.\n+\n+   Here is an example of a macro definition that uses stringification:\n+\n+     #define WARN_IF(EXP) \\\n+     do { if (EXP) \\\n+             fprintf (stderr, \"Warning: \" #EXP \"\\n\"); } \\\n+     while (0)\n+\n+Here the actual argument for `EXP' is substituted once as given, into\n+the `if' statement, and once as stringified, into the argument to\n+`fprintf'.  The `do' and `while (0)' are a kludge to make it possible\n+to write `WARN_IF (ARG);', which the resemblance of `WARN_IF' to a\n+function would make C programmers want to do; see *Note Swallow\n+Semicolon::.\n+\n+   The stringification feature is limited to transforming one macro\n+argument into one string constant: there is no way to combine the\n+argument with other text and then stringify it all together.  But the\n+example above shows how an equivalent result can be obtained in ANSI\n+Standard C using the feature that adjacent string constants are\n+concatenated as one string constant.  The preprocessor stringifies the\n+actual value of `EXP' into a separate string constant, resulting in\n+text like\n+\n+     do { if (x == 0) \\\n+             fprintf (stderr, \"Warning: \" \"x == 0\" \"\\n\"); } \\\n+     while (0)\n+\n+but the C compiler then sees three consecutive string constants and\n+concatenates them into one, producing effectively\n+\n+     do { if (x == 0) \\\n+             fprintf (stderr, \"Warning: x == 0\\n\"); } \\\n+     while (0)\n+\n+   Stringification in C involves more than putting doublequote\n+characters around the fragment; it is necessary to put backslashes in\n+front of all doublequote characters, and all backslashes in string and\n+character constants, in order to get a valid C string constant with the\n+proper contents.  Thus, stringifying `p = \"foo\\n\";' results in `\"p =\n+\\\"foo\\\\n\\\";\"'.  However, backslashes that are not inside of string or\n+character constants are not duplicated: `\\n' by itself stringifies to\n+`\"\\n\"'.\n+\n+   Whitespace (including comments) in the text being stringified is\n+handled according to precise rules.  All leading and trailing\n+whitespace is ignored.  Any sequence of whitespace in the middle of the\n+text is converted to a single space in the stringified result.\n+\n+\u001f\n+File: cpp.info,  Node: Concatenation,  Next: Undefining,  Prev: Stringification,  Up: Macros\n+\n+Concatenation\n+-------------\n+\n+   \"Concatenation\" means joining two strings into one.  In the context\n+of macro expansion, concatenation refers to joining two lexical units\n+into one longer one.  Specifically, an actual argument to the macro can\n+be concatenated with another actual argument or with fixed text to\n+produce a longer name.  The longer name might be the name of a function,\n+variable or type, or a C keyword; it might even be the name of another\n+macro, in which case it will be expanded.\n+\n+   When you define a macro, you request concatenation with the special\n+operator `##' in the macro body.  When the macro is called, after\n+actual arguments are substituted, all `##' operators are deleted, and\n+so is any whitespace next to them (including whitespace that was part\n+of an actual argument).  The result is to concatenate the syntactic\n+tokens on either side of the `##'.\n+\n+   Consider a C program that interprets named commands.  There probably\n+needs to be a table of commands, perhaps an array of structures\n+declared as follows:\n+\n+     struct command\n+     {\n+       char *name;\n+       void (*function) ();\n+     };\n+     \n+     struct command commands[] =\n+     {\n+       { \"quit\", quit_command},\n+       { \"help\", help_command},\n+       ...\n+     };\n+\n+   It would be cleaner not to have to give each command name twice,\n+once in the string constant and once in the function name.  A macro\n+which takes the name of a command as an argument can make this\n+unnecessary.  The string constant can be created with stringification,\n+and the function name by concatenating the argument with `_command'.\n+Here is how it is done:\n+\n+     #define COMMAND(NAME)  { #NAME, NAME ## _command }\n+     \n+     struct command commands[] =\n+     {\n+       COMMAND (quit),\n+       COMMAND (help),\n+       ...\n+     };\n+\n+   The usual case of concatenation is concatenating two names (or a\n+name and a number) into a longer name.  But this isn't the only valid\n+case.  It is also possible to concatenate two numbers (or a number and\n+a name, such as `1.5' and `e3') into a number.  Also, multi-character\n+operators such as `+=' can be formed by concatenation.  In some cases\n+it is even possible to piece together a string constant.  However, two\n+pieces of text that don't together form a valid lexical unit cannot be\n+concatenated.  For example, concatenation with `x' on one side and `+'\n+on the other is not meaningful because those two characters can't fit\n+together in any lexical unit of C.  The ANSI standard says that such\n+attempts at concatenation are undefined, but in the GNU C preprocessor\n+it is well defined: it puts the `x' and `+' side by side with no\n+particular special results.\n+\n+   Keep in mind that the C preprocessor converts comments to whitespace\n+before macros are even considered.  Therefore, you cannot create a\n+comment by concatenating `/' and `*': the `/*' sequence that starts a\n+comment is not a lexical unit, but rather the beginning of a \"long\"\n+space character.  Also, you can freely use comments next to a `##' in a\n+macro definition, or in actual arguments that will be concatenated,\n+because the comments will be converted to spaces at first sight, and\n+concatenation will later discard the spaces.\n+\n+\u001f\n+File: cpp.info,  Node: Undefining,  Next: Redefining,  Prev: Concatenation,  Up: Macros\n+\n+Undefining Macros\n+-----------------\n+\n+   To \"undefine\" a macro means to cancel its definition.  This is done\n+with the `#undef' directive.  `#undef' is followed by the macro name to\n+be undefined.\n+\n+   Like definition, undefinition occurs at a specific point in the\n+source file, and it applies starting from that point.  The name ceases\n+to be a macro name, and from that point on it is treated by the\n+preprocessor as if it had never been a macro name.\n+\n+   For example,\n+\n+     #define FOO 4\n+     x = FOO;\n+     #undef FOO\n+     x = FOO;\n+\n+expands into\n+\n+     x = 4;\n+     \n+     x = FOO;\n+\n+In this example, `FOO' had better be a variable or function as well as\n+(temporarily) a macro, in order for the result of the expansion to be\n+valid C code.\n+\n+   The same form of `#undef' directive will cancel definitions with\n+arguments or definitions that don't expect arguments.  The `#undef'\n+directive has no effect when used on a name not currently defined as a\n+macro.\n+\n+\u001f\n+File: cpp.info,  Node: Redefining,  Next: Macro Pitfalls,  Prev: Undefining,  Up: Macros\n+\n+Redefining Macros\n+-----------------\n+\n+   \"Redefining\" a macro means defining (with `#define') a name that is\n+already defined as a macro.\n+\n+   A redefinition is trivial if the new definition is transparently\n+identical to the old one.  You probably wouldn't deliberately write a\n+trivial redefinition, but they can happen automatically when a header\n+file is included more than once (*note Header Files::.), so they are\n+accepted silently and without effect.\n+\n+   Nontrivial redefinition is considered likely to be an error, so it\n+provokes a warning message from the preprocessor.  However, sometimes it\n+is useful to change the definition of a macro in mid-compilation.  You\n+can inhibit the warning by undefining the macro with `#undef' before the\n+second definition.\n+\n+   In order for a redefinition to be trivial, the new definition must\n+exactly match the one already in effect, with two possible exceptions:\n+\n+   * Whitespace may be added or deleted at the beginning or the end.\n+\n+   * Whitespace may be changed in the middle (but not inside strings).\n+     However, it may not be eliminated entirely, and it may not be added\n+     where there was no whitespace at all.\n+\n+   Recall that a comment counts as whitespace.\n+"}, {"sha": "b98ab2d0f292f2da74d4e1dcbc2198a2bfd300fe", "filename": "gcc/cpp.info-2", "status": "added", "additions": 1058, "deletions": 0, "changes": 1058, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info-2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info-2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.info-2?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1058 @@\n+This is Info file cpp.info, produced by Makeinfo version 1.67 from the\n+input file cpp.texi.\n+\n+   This file documents the GNU C Preprocessor.\n+\n+   Copyright 1987, 1989, 1991, 1992, 1993, 1994, 1995 Free Software\n+Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the entire resulting derived work is distributed under the terms\n+of a permission notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions.\n+\n+\u001f\n+File: cpp.info,  Node: Macro Pitfalls,  Prev: Redefining,  Up: Macros\n+\n+Pitfalls and Subtleties of Macros\n+---------------------------------\n+\n+   In this section we describe some special rules that apply to macros\n+and macro expansion, and point out certain cases in which the rules have\n+counterintuitive consequences that you must watch out for.\n+\n+* Menu:\n+\n+* Misnesting::        Macros can contain unmatched parentheses.\n+* Macro Parentheses:: Why apparently superfluous parentheses\n+                         may be necessary to avoid incorrect grouping.\n+* Swallow Semicolon:: Macros that look like functions\n+                         but expand into compound statements.\n+* Side Effects::      Unsafe macros that cause trouble when\n+                         arguments contain side effects.\n+* Self-Reference::    Macros whose definitions use the macros' own names.\n+* Argument Prescan::  Actual arguments are checked for macro calls\n+                         before they are substituted.\n+* Cascaded Macros::   Macros whose definitions use other macros.\n+* Newlines in Args::  Sometimes line numbers get confused.\n+\n+\u001f\n+File: cpp.info,  Node: Misnesting,  Next: Macro Parentheses,  Prev: Macro Pitfalls,  Up: Macro Pitfalls\n+\n+Improperly Nested Constructs\n+............................\n+\n+   Recall that when a macro is called with arguments, the arguments are\n+substituted into the macro body and the result is checked, together with\n+the rest of the input file, for more macro calls.\n+\n+   It is possible to piece together a macro call coming partially from\n+the macro body and partially from the actual arguments.  For example,\n+\n+     #define double(x) (2*(x))\n+     #define call_with_1(x) x(1)\n+\n+would expand `call_with_1 (double)' into `(2*(1))'.\n+\n+   Macro definitions do not have to have balanced parentheses.  By\n+writing an unbalanced open parenthesis in a macro body, it is possible\n+to create a macro call that begins inside the macro body but ends\n+outside of it.  For example,\n+\n+     #define strange(file) fprintf (file, \"%s %d\",\n+     ...\n+     strange(stderr) p, 35)\n+\n+This bizarre example expands to `fprintf (stderr, \"%s %d\", p, 35)'!\n+\n+\u001f\n+File: cpp.info,  Node: Macro Parentheses,  Next: Swallow Semicolon,  Prev: Misnesting,  Up: Macro Pitfalls\n+\n+Unintended Grouping of Arithmetic\n+.................................\n+\n+   You may have noticed that in most of the macro definition examples\n+shown above, each occurrence of a macro argument name had parentheses\n+around it.  In addition, another pair of parentheses usually surround\n+the entire macro definition.  Here is why it is best to write macros\n+that way.\n+\n+   Suppose you define a macro as follows,\n+\n+     #define ceil_div(x, y) (x + y - 1) / y\n+\n+whose purpose is to divide, rounding up.  (One use for this operation is\n+to compute how many `int' objects are needed to hold a certain number\n+of `char' objects.)  Then suppose it is used as follows:\n+\n+     a = ceil_div (b & c, sizeof (int));\n+\n+This expands into\n+\n+     a = (b & c + sizeof (int) - 1) / sizeof (int);\n+\n+which does not do what is intended.  The operator-precedence rules of C\n+make it equivalent to this:\n+\n+     a = (b & (c + sizeof (int) - 1)) / sizeof (int);\n+\n+But what we want is this:\n+\n+     a = ((b & c) + sizeof (int) - 1)) / sizeof (int);\n+\n+Defining the macro as\n+\n+     #define ceil_div(x, y) ((x) + (y) - 1) / (y)\n+\n+provides the desired result.\n+\n+   Unintended grouping can result in another way.  Consider `sizeof\n+ceil_div(1, 2)'.  That has the appearance of a C expression that would\n+compute the size of the type of `ceil_div (1, 2)', but in fact it means\n+something very different.  Here is what it expands to:\n+\n+     sizeof ((1) + (2) - 1) / (2)\n+\n+This would take the size of an integer and divide it by two.  The\n+precedence rules have put the division outside the `sizeof' when it was\n+intended to be inside.\n+\n+   Parentheses around the entire macro definition can prevent such\n+problems.  Here, then, is the recommended way to define `ceil_div':\n+\n+     #define ceil_div(x, y) (((x) + (y) - 1) / (y))\n+\n+\u001f\n+File: cpp.info,  Node: Swallow Semicolon,  Next: Side Effects,  Prev: Macro Parentheses,  Up: Macro Pitfalls\n+\n+Swallowing the Semicolon\n+........................\n+\n+   Often it is desirable to define a macro that expands into a compound\n+statement.  Consider, for example, the following macro, that advances a\n+pointer (the argument `p' says where to find it) across whitespace\n+characters:\n+\n+     #define SKIP_SPACES (p, limit)  \\\n+     { register char *lim = (limit); \\\n+       while (p != lim) {            \\\n+         if (*p++ != ' ') {          \\\n+           p--; break; }}}\n+\n+Here Backslash-Newline is used to split the macro definition, which must\n+be a single line, so that it resembles the way such C code would be\n+laid out if not part of a macro definition.\n+\n+   A call to this macro might be `SKIP_SPACES (p, lim)'.  Strictly\n+speaking, the call expands to a compound statement, which is a complete\n+statement with no need for a semicolon to end it.  But it looks like a\n+function call.  So it minimizes confusion if you can use it like a\n+function call, writing a semicolon afterward, as in `SKIP_SPACES (p,\n+lim);'\n+\n+   But this can cause trouble before `else' statements, because the\n+semicolon is actually a null statement.  Suppose you write\n+\n+     if (*p != 0)\n+       SKIP_SPACES (p, lim);\n+     else ...\n+\n+The presence of two statements--the compound statement and a null\n+statement--in between the `if' condition and the `else' makes invalid C\n+code.\n+\n+   The definition of the macro `SKIP_SPACES' can be altered to solve\n+this problem, using a `do ... while' statement.  Here is how:\n+\n+     #define SKIP_SPACES (p, limit)     \\\n+     do { register char *lim = (limit); \\\n+          while (p != lim) {            \\\n+            if (*p++ != ' ') {          \\\n+              p--; break; }}}           \\\n+     while (0)\n+\n+   Now `SKIP_SPACES (p, lim);' expands into\n+\n+     do {...} while (0);\n+\n+which is one statement.\n+\n+\u001f\n+File: cpp.info,  Node: Side Effects,  Next: Self-Reference,  Prev: Swallow Semicolon,  Up: Macro Pitfalls\n+\n+Duplication of Side Effects\n+...........................\n+\n+   Many C programs define a macro `min', for \"minimum\", like this:\n+\n+     #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n+\n+   When you use this macro with an argument containing a side effect,\n+as shown here,\n+\n+     next = min (x + y, foo (z));\n+\n+it expands as follows:\n+\n+     next = ((x + y) < (foo (z)) ? (x + y) : (foo (z)));\n+\n+where `x + y' has been substituted for `X' and `foo (z)' for `Y'.\n+\n+   The function `foo' is used only once in the statement as it appears\n+in the program, but the expression `foo (z)' has been substituted twice\n+into the macro expansion.  As a result, `foo' might be called two times\n+when the statement is executed.  If it has side effects or if it takes\n+a long time to compute, the results might not be what you intended.  We\n+say that `min' is an \"unsafe\" macro.\n+\n+   The best solution to this problem is to define `min' in a way that\n+computes the value of `foo (z)' only once.  The C language offers no\n+standard way to do this, but it can be done with GNU C extensions as\n+follows:\n+\n+     #define min(X, Y)                     \\\n+     ({ typeof (X) __x = (X), __y = (Y);   \\\n+        (__x < __y) ? __x : __y; })\n+\n+   If you do not wish to use GNU C extensions, the only solution is to\n+be careful when *using* the macro `min'.  For example, you can\n+calculate the value of `foo (z)', save it in a variable, and use that\n+variable in `min':\n+\n+     #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n+     ...\n+     {\n+       int tem = foo (z);\n+       next = min (x + y, tem);\n+     }\n+\n+(where we assume that `foo' returns type `int').\n+\n+\u001f\n+File: cpp.info,  Node: Self-Reference,  Next: Argument Prescan,  Prev: Side Effects,  Up: Macro Pitfalls\n+\n+Self-Referential Macros\n+.......................\n+\n+   A \"self-referential\" macro is one whose name appears in its\n+definition.  A special feature of ANSI Standard C is that the\n+self-reference is not considered a macro call.  It is passed into the\n+preprocessor output unchanged.\n+\n+   Let's consider an example:\n+\n+     #define foo (4 + foo)\n+\n+where `foo' is also a variable in your program.\n+\n+   Following the ordinary rules, each reference to `foo' will expand\n+into `(4 + foo)'; then this will be rescanned and will expand into `(4\n++ (4 + foo))'; and so on until it causes a fatal error (memory full) in\n+the preprocessor.\n+\n+   However, the special rule about self-reference cuts this process\n+short after one step, at `(4 + foo)'.  Therefore, this macro definition\n+has the possibly useful effect of causing the program to add 4 to the\n+value of `foo' wherever `foo' is referred to.\n+\n+   In most cases, it is a bad idea to take advantage of this feature.  A\n+person reading the program who sees that `foo' is a variable will not\n+expect that it is a macro as well.  The reader will come across the\n+identifier `foo' in the program and think its value should be that of\n+the variable `foo', whereas in fact the value is four greater.\n+\n+   The special rule for self-reference applies also to \"indirect\"\n+self-reference.  This is the case where a macro X expands to use a\n+macro `y', and the expansion of `y' refers to the macro `x'.  The\n+resulting reference to `x' comes indirectly from the expansion of `x',\n+so it is a self-reference and is not further expanded.  Thus, after\n+\n+     #define x (4 + y)\n+     #define y (2 * x)\n+\n+`x' would expand into `(4 + (2 * x))'.  Clear?\n+\n+   But suppose `y' is used elsewhere, not from the definition of `x'.\n+Then the use of `x' in the expansion of `y' is not a self-reference\n+because `x' is not \"in progress\".  So it does expand.  However, the\n+expansion of `x' contains a reference to `y', and that is an indirect\n+self-reference now because `y' is \"in progress\".  The result is that\n+`y' expands to `(2 * (4 + y))'.\n+\n+   It is not clear that this behavior would ever be useful, but it is\n+specified by the ANSI C standard, so you may need to understand it.\n+\n+\u001f\n+File: cpp.info,  Node: Argument Prescan,  Next: Cascaded Macros,  Prev: Self-Reference,  Up: Macro Pitfalls\n+\n+Separate Expansion of Macro Arguments\n+.....................................\n+\n+   We have explained that the expansion of a macro, including the\n+substituted actual arguments, is scanned over again for macro calls to\n+be expanded.\n+\n+   What really happens is more subtle: first each actual argument text\n+is scanned separately for macro calls.  Then the results of this are\n+substituted into the macro body to produce the macro expansion, and the\n+macro expansion is scanned again for macros to expand.\n+\n+   The result is that the actual arguments are scanned *twice* to expand\n+macro calls in them.\n+\n+   Most of the time, this has no effect.  If the actual argument\n+contained any macro calls, they are expanded during the first scan.\n+The result therefore contains no macro calls, so the second scan does\n+not change it.  If the actual argument were substituted as given, with\n+no prescan, the single remaining scan would find the same macro calls\n+and produce the same results.\n+\n+   You might expect the double scan to change the results when a\n+self-referential macro is used in an actual argument of another macro\n+(*note Self-Reference::.): the self-referential macro would be expanded\n+once in the first scan, and a second time in the second scan.  But this\n+is not what happens.  The self-references that do not expand in the\n+first scan are marked so that they will not expand in the second scan\n+either.\n+\n+   The prescan is not done when an argument is stringified or\n+concatenated.  Thus,\n+\n+     #define str(s) #s\n+     #define foo 4\n+     str (foo)\n+\n+expands to `\"foo\"'.  Once more, prescan has been prevented from having\n+any noticeable effect.\n+\n+   More precisely, stringification and concatenation use the argument as\n+written, in un-prescanned form.  The same actual argument would be used\n+in prescanned form if it is substituted elsewhere without\n+stringification or concatenation.\n+\n+     #define str(s) #s lose(s)\n+     #define foo 4\n+     str (foo)\n+\n+   expands to `\"foo\" lose(4)'.\n+\n+   You might now ask, \"Why mention the prescan, if it makes no\n+difference?  And why not skip it and make the preprocessor faster?\"\n+The answer is that the prescan does make a difference in three special\n+cases:\n+\n+   * Nested calls to a macro.\n+\n+   * Macros that call other macros that stringify or concatenate.\n+\n+   * Macros whose expansions contain unshielded commas.\n+\n+   We say that \"nested\" calls to a macro occur when a macro's actual\n+argument contains a call to that very macro.  For example, if `f' is a\n+macro that expects one argument, `f (f (1))' is a nested pair of calls\n+to `f'.  The desired expansion is made by expanding `f (1)' and\n+substituting that into the definition of `f'.  The prescan causes the\n+expected result to happen.  Without the prescan, `f (1)' itself would\n+be substituted as an actual argument, and the inner use of `f' would\n+appear during the main scan as an indirect self-reference and would not\n+be expanded.  Here, the prescan cancels an undesirable side effect (in\n+the medical, not computational, sense of the term) of the special rule\n+for self-referential macros.\n+\n+   But prescan causes trouble in certain other cases of nested macro\n+calls.  Here is an example:\n+\n+     #define foo  a,b\n+     #define bar(x) lose(x)\n+     #define lose(x) (1 + (x))\n+     \n+     bar(foo)\n+\n+We would like `bar(foo)' to turn into `(1 + (foo))', which would then\n+turn into `(1 + (a,b))'.  But instead, `bar(foo)' expands into\n+`lose(a,b)', and you get an error because `lose' requires a single\n+argument.  In this case, the problem is easily solved by the same\n+parentheses that ought to be used to prevent misnesting of arithmetic\n+operations:\n+\n+     #define foo (a,b)\n+     #define bar(x) lose((x))\n+\n+   The problem is more serious when the operands of the macro are not\n+expressions; for example, when they are statements.  Then parentheses\n+are unacceptable because they would make for invalid C code:\n+\n+     #define foo { int a, b; ... }\n+\n+In GNU C you can shield the commas using the `({...})' construct which\n+turns a compound statement into an expression:\n+\n+     #define foo ({ int a, b; ... })\n+\n+   Or you can rewrite the macro definition to avoid such commas:\n+\n+     #define foo { int a; int b; ... }\n+\n+   There is also one case where prescan is useful.  It is possible to\n+use prescan to expand an argument and then stringify it--if you use two\n+levels of macros.  Let's add a new macro `xstr' to the example shown\n+above:\n+\n+     #define xstr(s) str(s)\n+     #define str(s) #s\n+     #define foo 4\n+     xstr (foo)\n+\n+   This expands into `\"4\"', not `\"foo\"'.  The reason for the difference\n+is that the argument of `xstr' is expanded at prescan (because `xstr'\n+does not specify stringification or concatenation of the argument).\n+The result of prescan then forms the actual argument for `str'.  `str'\n+uses its argument without prescan because it performs stringification;\n+but it cannot prevent or undo the prescanning already done by `xstr'.\n+\n+\u001f\n+File: cpp.info,  Node: Cascaded Macros,  Next: Newlines in Args,  Prev: Argument Prescan,  Up: Macro Pitfalls\n+\n+Cascaded Use of Macros\n+......................\n+\n+   A \"cascade\" of macros is when one macro's body contains a reference\n+to another macro.  This is very common practice.  For example,\n+\n+     #define BUFSIZE 1020\n+     #define TABLESIZE BUFSIZE\n+\n+   This is not at all the same as defining `TABLESIZE' to be `1020'.\n+The `#define' for `TABLESIZE' uses exactly the body you specify--in\n+this case, `BUFSIZE'--and does not check to see whether it too is the\n+name of a macro.\n+\n+   It's only when you *use* `TABLESIZE' that the result of its expansion\n+is checked for more macro names.\n+\n+   This makes a difference if you change the definition of `BUFSIZE' at\n+some point in the source file.  `TABLESIZE', defined as shown, will\n+always expand using the definition of `BUFSIZE' that is currently in\n+effect:\n+\n+     #define BUFSIZE 1020\n+     #define TABLESIZE BUFSIZE\n+     #undef BUFSIZE\n+     #define BUFSIZE 37\n+\n+Now `TABLESIZE' expands (in two stages) to `37'.  (The `#undef' is to\n+prevent any warning about the nontrivial redefinition of `BUFSIZE'.)\n+\n+\u001f\n+File: cpp.info,  Node: Newlines in Args,  Prev: Cascaded Macros,  Up: Macro Pitfalls\n+\n+Newlines in Macro Arguments\n+---------------------------\n+\n+   Traditional macro processing carries forward all newlines in macro\n+arguments into the expansion of the macro.  This means that, if some of\n+the arguments are substituted more than once, or not at all, or out of\n+order, newlines can be duplicated, lost, or moved around within the\n+expansion.  If the expansion consists of multiple statements, then the\n+effect is to distort the line numbers of some of these statements.  The\n+result can be incorrect line numbers, in error messages or displayed in\n+a debugger.\n+\n+   The GNU C preprocessor operating in ANSI C mode adjusts appropriately\n+for multiple use of an argument--the first use expands all the\n+newlines, and subsequent uses of the same argument produce no newlines.\n+But even in this mode, it can produce incorrect line numbering if\n+arguments are used out of order, or not used at all.\n+\n+   Here is an example illustrating this problem:\n+\n+     #define ignore_second_arg(a,b,c) a; c\n+     \n+     ignore_second_arg (foo (),\n+                        ignored (),\n+                        syntax error);\n+\n+The syntax error triggered by the tokens `syntax error' results in an\n+error message citing line four, even though the statement text comes\n+from line five.\n+\n+\u001f\n+File: cpp.info,  Node: Conditionals,  Next: Combining Sources,  Prev: Macros,  Up: Top\n+\n+Conditionals\n+============\n+\n+   In a macro processor, a \"conditional\" is a directive that allows a\n+part of the program to be ignored during compilation, on some\n+conditions.  In the C preprocessor, a conditional can test either an\n+arithmetic expression or whether a name is defined as a macro.\n+\n+   A conditional in the C preprocessor resembles in some ways an `if'\n+statement in C, but it is important to understand the difference between\n+them.  The condition in an `if' statement is tested during the execution\n+of your program.  Its purpose is to allow your program to behave\n+differently from run to run, depending on the data it is operating on.\n+The condition in a preprocessing conditional directive is tested when\n+your program is compiled.  Its purpose is to allow different code to be\n+included in the program depending on the situation at the time of\n+compilation.\n+\n+* Menu:\n+\n+* Uses: Conditional Uses.       What conditionals are for.\n+* Syntax: Conditional Syntax.   How conditionals are written.\n+* Deletion: Deleted Code.       Making code into a comment.\n+* Macros: Conditionals-Macros.  Why conditionals are used with macros.\n+* Assertions::\t\t        How and why to use assertions.\n+* Errors: #error Directive.     Detecting inconsistent compilation parameters.\n+\n+\u001f\n+File: cpp.info,  Node: Conditional Uses,  Next: Conditional Syntax,  Up: Conditionals\n+\n+Why Conditionals are Used\n+-------------------------\n+\n+   Generally there are three kinds of reason to use a conditional.\n+\n+   * A program may need to use different code depending on the machine\n+     or operating system it is to run on.  In some cases the code for\n+     one operating system may be erroneous on another operating system;\n+     for example, it might refer to library routines that do not exist\n+     on the other system.  When this happens, it is not enough to avoid\n+     executing the invalid code: merely having it in the program makes\n+     it impossible to link the program and run it.  With a\n+     preprocessing conditional, the offending code can be effectively\n+     excised from the program when it is not valid.\n+\n+   * You may want to be able to compile the same source file into two\n+     different programs.  Sometimes the difference between the programs\n+     is that one makes frequent time-consuming consistency checks on its\n+     intermediate data, or prints the values of those data for\n+     debugging, while the other does not.\n+\n+   * A conditional whose condition is always false is a good way to\n+     exclude code from the program but keep it as a sort of comment for\n+     future reference.\n+\n+   Most simple programs that are intended to run on only one machine\n+will not need to use preprocessing conditionals.\n+\n+\u001f\n+File: cpp.info,  Node: Conditional Syntax,  Next: Deleted Code,  Prev: Conditional Uses,  Up: Conditionals\n+\n+Syntax of Conditionals\n+----------------------\n+\n+   A conditional in the C preprocessor begins with a \"conditional\n+directive\": `#if', `#ifdef' or `#ifndef'.  *Note Conditionals-Macros::,\n+for information on `#ifdef' and `#ifndef'; only `#if' is explained here.\n+\n+* Menu:\n+\n+* If: #if Directive.     Basic conditionals using `#if' and `#endif'.\n+* Else: #else Directive. Including some text if the condition fails.\n+* Elif: #elif Directive. Testing several alternative possibilities.\n+\n+\u001f\n+File: cpp.info,  Node: #if Directive,  Next: #else Directive,  Up: Conditional Syntax\n+\n+The `#if' Directive\n+...................\n+\n+   The `#if' directive in its simplest form consists of\n+\n+     #if EXPRESSION\n+     CONTROLLED TEXT\n+     #endif /* EXPRESSION */\n+\n+   The comment following the `#endif' is not required, but it is a good\n+practice because it helps people match the `#endif' to the\n+corresponding `#if'.  Such comments should always be used, except in\n+short conditionals that are not nested.  In fact, you can put anything\n+at all after the `#endif' and it will be ignored by the GNU C\n+preprocessor, but only comments are acceptable in ANSI Standard C.\n+\n+   EXPRESSION is a C expression of integer type, subject to stringent\n+restrictions.  It may contain\n+\n+   * Integer constants, which are all regarded as `long' or `unsigned\n+     long'.\n+\n+   * Character constants, which are interpreted according to the\n+     character set and conventions of the machine and operating system\n+     on which the preprocessor is running.  The GNU C preprocessor uses\n+     the C data type `char' for these character constants; therefore,\n+     whether some character codes are negative is determined by the C\n+     compiler used to compile the preprocessor.  If it treats `char' as\n+     signed, then character codes large enough to set the sign bit will\n+     be considered negative; otherwise, no character code is considered\n+     negative.\n+\n+   * Arithmetic operators for addition, subtraction, multiplication,\n+     division, bitwise operations, shifts, comparisons, and logical\n+     operations (`&&' and `||').\n+\n+   * Identifiers that are not macros, which are all treated as zero(!).\n+\n+   * Macro calls.  All macro calls in the expression are expanded before\n+     actual computation of the expression's value begins.\n+\n+   Note that `sizeof' operators and `enum'-type values are not allowed.\n+`enum'-type values, like all other identifiers that are not taken as\n+macro calls and expanded, are treated as zero.\n+\n+   The CONTROLLED TEXT inside of a conditional can include\n+preprocessing directives.  Then the directives inside the conditional\n+are obeyed only if that branch of the conditional succeeds.  The text\n+can also contain other conditional groups.  However, the `#if' and\n+`#endif' directives must balance.\n+\n+\u001f\n+File: cpp.info,  Node: #else Directive,  Next: #elif Directive,  Prev: #if Directive,  Up: Conditional Syntax\n+\n+The `#else' Directive\n+.....................\n+\n+   The `#else' directive can be added to a conditional to provide\n+alternative text to be used if the condition is false.  This is what it\n+looks like:\n+\n+     #if EXPRESSION\n+     TEXT-IF-TRUE\n+     #else /* Not EXPRESSION */\n+     TEXT-IF-FALSE\n+     #endif /* Not EXPRESSION */\n+\n+   If EXPRESSION is nonzero, and thus the TEXT-IF-TRUE is active, then\n+`#else' acts like a failing conditional and the TEXT-IF-FALSE is\n+ignored.  Contrariwise, if the `#if' conditional fails, the\n+TEXT-IF-FALSE is considered included.\n+\n+\u001f\n+File: cpp.info,  Node: #elif Directive,  Prev: #else Directive,  Up: Conditional Syntax\n+\n+The `#elif' Directive\n+.....................\n+\n+   One common case of nested conditionals is used to check for more\n+than two possible alternatives.  For example, you might have\n+\n+     #if X == 1\n+     ...\n+     #else /* X != 1 */\n+     #if X == 2\n+     ...\n+     #else /* X != 2 */\n+     ...\n+     #endif /* X != 2 */\n+     #endif /* X != 1 */\n+\n+   Another conditional directive, `#elif', allows this to be abbreviated\n+as follows:\n+\n+     #if X == 1\n+     ...\n+     #elif X == 2\n+     ...\n+     #else /* X != 2 and X != 1*/\n+     ...\n+     #endif /* X != 2 and X != 1*/\n+\n+   `#elif' stands for \"else if\".  Like `#else', it goes in the middle\n+of a `#if'-`#endif' pair and subdivides it; it does not require a\n+matching `#endif' of its own.  Like `#if', the `#elif' directive\n+includes an expression to be tested.\n+\n+   The text following the `#elif' is processed only if the original\n+`#if'-condition failed and the `#elif' condition succeeds.  More than\n+one `#elif' can go in the same `#if'-`#endif' group.  Then the text\n+after each `#elif' is processed only if the `#elif' condition succeeds\n+after the original `#if' and any previous `#elif' directives within it\n+have failed.  `#else' is equivalent to `#elif 1', and `#else' is\n+allowed after any number of `#elif' directives, but `#elif' may not\n+follow `#else'.\n+\n+\u001f\n+File: cpp.info,  Node: Deleted Code,  Next: Conditionals-Macros,  Prev: Conditional Syntax,  Up: Conditionals\n+\n+Keeping Deleted Code for Future Reference\n+-----------------------------------------\n+\n+   If you replace or delete a part of the program but want to keep the\n+old code around as a comment for future reference, the easy way to do\n+this is to put `#if 0' before it and `#endif' after it.  This is better\n+than using comment delimiters `/*' and `*/' since those won't work if\n+the code already contains comments (C comments do not nest).\n+\n+   This works even if the code being turned off contains conditionals,\n+but they must be entire conditionals (balanced `#if' and `#endif').\n+\n+   Conversely, do not use `#if 0' for comments which are not C code.\n+Use the comment delimiters `/*' and `*/' instead.  The interior of `#if\n+0' must consist of complete tokens; in particular, singlequote\n+characters must balance.  But comments often contain unbalanced\n+singlequote characters (known in English as apostrophes).  These\n+confuse `#if 0'.  They do not confuse `/*'.\n+\n+\u001f\n+File: cpp.info,  Node: Conditionals-Macros,  Next: Assertions,  Prev: Deleted Code,  Up: Conditionals\n+\n+Conditionals and Macros\n+-----------------------\n+\n+   Conditionals are useful in connection with macros or assertions,\n+because those are the only ways that an expression's value can vary\n+from one compilation to another.  A `#if' directive whose expression\n+uses no macros or assertions is equivalent to `#if 1' or `#if 0'; you\n+might as well determine which one, by computing the value of the\n+expression yourself, and then simplify the program.\n+\n+   For example, here is a conditional that tests the expression\n+`BUFSIZE == 1020', where `BUFSIZE' must be a macro.\n+\n+     #if BUFSIZE == 1020\n+       printf (\"Large buffers!\\n\");\n+     #endif /* BUFSIZE is large */\n+\n+   (Programmers often wish they could test the size of a variable or\n+data type in `#if', but this does not work.  The preprocessor does not\n+understand `sizeof', or typedef names, or even the type keywords such\n+as `int'.)\n+\n+   The special operator `defined' is used in `#if' expressions to test\n+whether a certain name is defined as a macro.  Either `defined NAME' or\n+`defined (NAME)' is an expression whose value is 1 if NAME is defined\n+as macro at the current point in the program, and 0 otherwise.  For the\n+`defined' operator it makes no difference what the definition of the\n+macro is; all that matters is whether there is a definition.  Thus, for\n+example,\n+\n+     #if defined (vax) || defined (ns16000)\n+\n+would succeed if either of the names `vax' and `ns16000' is defined as\n+a macro.  You can test the same condition using assertions (*note\n+Assertions::.), like this:\n+\n+     #if #cpu (vax) || #cpu (ns16000)\n+\n+   If a macro is defined and later undefined with `#undef', subsequent\n+use of the `defined' operator returns 0, because the name is no longer\n+defined.  If the macro is defined again with another `#define',\n+`defined' will recommence returning 1.\n+\n+   Conditionals that test whether just one name is defined are very\n+common, so there are two special short conditional directives for this\n+case.\n+\n+`#ifdef NAME'\n+     is equivalent to `#if defined (NAME)'.\n+\n+`#ifndef NAME'\n+     is equivalent to `#if ! defined (NAME)'.\n+\n+   Macro definitions can vary between compilations for several reasons.\n+\n+   * Some macros are predefined on each kind of machine.  For example,\n+     on a Vax, the name `vax' is a predefined macro.  On other\n+     machines, it would not be defined.\n+\n+   * Many more macros are defined by system header files.  Different\n+     systems and machines define different macros, or give them\n+     different values.  It is useful to test these macros with\n+     conditionals to avoid using a system feature on a machine where it\n+     is not implemented.\n+\n+   * Macros are a common way of allowing users to customize a program\n+     for different machines or applications.  For example, the macro\n+     `BUFSIZE' might be defined in a configuration file for your\n+     program that is included as a header file in each source file.  You\n+     would use `BUFSIZE' in a preprocessing conditional in order to\n+     generate different code depending on the chosen configuration.\n+\n+   * Macros can be defined or undefined with `-D' and `-U' command\n+     options when you compile the program.  You can arrange to compile\n+     the same source file into two different programs by choosing a\n+     macro name to specify which program you want, writing conditionals\n+     to test whether or how this macro is defined, and then controlling\n+     the state of the macro with compiler command options.  *Note\n+     Invocation::.\n+\n+   Assertions are usually predefined, but can be defined with\n+preprocessor directives or command-line options.\n+\n+\u001f\n+File: cpp.info,  Node: Assertions,  Next: #error Directive,  Prev: Conditionals-Macros,  Up: Conditionals\n+\n+Assertions\n+----------\n+\n+   \"Assertions\" are a more systematic alternative to macros in writing\n+conditionals to test what sort of computer or system the compiled\n+program will run on.  Assertions are usually predefined, but you can\n+define them with preprocessing directives or command-line options.\n+\n+   The macros traditionally used to describe the type of target are not\n+classified in any way according to which question they answer; they may\n+indicate a hardware architecture, a particular hardware model, an\n+operating system, a particular version of an operating system, or\n+specific configuration options.  These are jumbled together in a single\n+namespace.  In contrast, each assertion consists of a named question and\n+an answer.  The question is usually called the \"predicate\".  An\n+assertion looks like this:\n+\n+     #PREDICATE (ANSWER)\n+\n+You must use a properly formed identifier for PREDICATE.  The value of\n+ANSWER can be any sequence of words; all characters are significant\n+except for leading and trailing whitespace, and differences in internal\n+whitespace sequences are ignored.  Thus, `x + y' is different from\n+`x+y' but equivalent to `x + y'.  `)' is not allowed in an answer.\n+\n+   Here is a conditional to test whether the answer ANSWER is asserted\n+for the predicate PREDICATE:\n+\n+     #if #PREDICATE (ANSWER)\n+\n+There may be more than one answer asserted for a given predicate.  If\n+you omit the answer, you can test whether *any* answer is asserted for\n+PREDICATE:\n+\n+     #if #PREDICATE\n+\n+   Most of the time, the assertions you test will be predefined\n+assertions.  GNU C provides three predefined predicates: `system',\n+`cpu', and `machine'.  `system' is for assertions about the type of\n+software, `cpu' describes the type of computer architecture, and\n+`machine' gives more information about the computer.  For example, on a\n+GNU system, the following assertions would be true:\n+\n+     #system (gnu)\n+     #system (mach)\n+     #system (mach 3)\n+     #system (mach 3.SUBVERSION)\n+     #system (hurd)\n+     #system (hurd VERSION)\n+\n+and perhaps others.  The alternatives with more or less version\n+information let you ask more or less detailed questions about the type\n+of system software.\n+\n+   On a Unix system, you would find `#system (unix)' and perhaps one of:\n+`#system (aix)', `#system (bsd)', `#system (hpux)', `#system (lynx)',\n+`#system (mach)', `#system (posix)', `#system (svr3)', `#system\n+(svr4)', or `#system (xpg4)' with possible version numbers following.\n+\n+   Other values for `system' are `#system (mvs)' and `#system (vms)'.\n+\n+   *Portability note:* Many Unix C compilers provide only one answer\n+for the `system' assertion: `#system (unix)', if they support\n+assertions at all.  This is less than useful.\n+\n+   An assertion with a multi-word answer is completely different from\n+several assertions with individual single-word answers.  For example,\n+the presence of `system (mach 3.0)' does not mean that `system (3.0)'\n+is true.  It also does not directly imply `system (mach)', but in GNU\n+C, that last will normally be asserted as well.\n+\n+   The current list of possible assertion values for `cpu' is: `#cpu\n+(a29k)', `#cpu (alpha)', `#cpu (arm)', `#cpu (clipper)', `#cpu\n+(convex)', `#cpu (elxsi)', `#cpu (tron)', `#cpu (h8300)', `#cpu\n+(i370)', `#cpu (i386)', `#cpu (i860)', `#cpu (i960)', `#cpu (m68k)',\n+`#cpu (m88k)', `#cpu (mips)', `#cpu (ns32k)', `#cpu (hppa)', `#cpu\n+(pyr)', `#cpu (ibm032)', `#cpu (rs6000)', `#cpu (sh)', `#cpu (sparc)',\n+`#cpu (spur)', `#cpu (tahoe)', `#cpu (vax)', `#cpu (we32000)'.\n+\n+   You can create assertions within a C program using `#assert', like\n+this:\n+\n+     #assert PREDICATE (ANSWER)\n+\n+(Note the absence of a `#' before PREDICATE.)\n+\n+   Each time you do this, you assert a new true answer for PREDICATE.\n+Asserting one answer does not invalidate previously asserted answers;\n+they all remain true.  The only way to remove an assertion is with\n+`#unassert'.  `#unassert' has the same syntax as `#assert'.  You can\n+also remove all assertions about PREDICATE like this:\n+\n+     #unassert PREDICATE\n+\n+   You can also add or cancel assertions using command options when you\n+run `gcc' or `cpp'.  *Note Invocation::.\n+\n+\u001f\n+File: cpp.info,  Node: #error Directive,  Prev: Assertions,  Up: Conditionals\n+\n+The `#error' and `#warning' Directives\n+--------------------------------------\n+\n+   The directive `#error' causes the preprocessor to report a fatal\n+error.  The rest of the line that follows `#error' is used as the error\n+message.  The line must consist of complete tokens.\n+\n+   You would use `#error' inside of a conditional that detects a\n+combination of parameters which you know the program does not properly\n+support.  For example, if you know that the program will not run\n+properly on a Vax, you might write\n+\n+     #ifdef __vax__\n+     #error \"Won't work on Vaxen.  See comments at get_last_object.\"\n+     #endif\n+\n+*Note Nonstandard Predefined::, for why this works.\n+\n+   If you have several configuration parameters that must be set up by\n+the installation in a consistent way, you can use conditionals to detect\n+an inconsistency and report it with `#error'.  For example,\n+\n+     #if HASH_TABLE_SIZE % 2 == 0 || HASH_TABLE_SIZE % 3 == 0 \\\n+         || HASH_TABLE_SIZE % 5 == 0\n+     #error HASH_TABLE_SIZE should not be divisible by a small prime\n+     #endif\n+\n+   The directive `#warning' is like the directive `#error', but causes\n+the preprocessor to issue a warning and continue preprocessing.  The\n+rest of the line that follows `#warning' is used as the warning message.\n+\n+   You might use `#warning' in obsolete header files, with a message\n+directing the user to the header file which should be used instead.\n+\n+\u001f\n+File: cpp.info,  Node: Combining Sources,  Next: Other Directives,  Prev: Conditionals,  Up: Top\n+\n+Combining Source Files\n+======================\n+\n+   One of the jobs of the C preprocessor is to inform the C compiler of\n+where each line of C code came from: which source file and which line\n+number.\n+\n+   C code can come from multiple source files if you use `#include';\n+both `#include' and the use of conditionals and macros can cause the\n+line number of a line in the preprocessor output to be different from\n+the line's number in the original source file.  You will appreciate the\n+value of making both the C compiler (in error messages) and symbolic\n+debuggers such as GDB use the line numbers in your source file.\n+\n+   The C preprocessor builds on this feature by offering a directive by\n+which you can control the feature explicitly.  This is useful when a\n+file for input to the C preprocessor is the output from another program\n+such as the `bison' parser generator, which operates on another file\n+that is the true source file.  Parts of the output from `bison' are\n+generated from scratch, other parts come from a standard parser file.\n+The rest are copied nearly verbatim from the source file, but their\n+line numbers in the `bison' output are not the same as their original\n+line numbers.  Naturally you would like compiler error messages and\n+symbolic debuggers to know the original source file and line number of\n+each line in the `bison' input.\n+\n+   `bison' arranges this by writing `#line' directives into the output\n+file.  `#line' is a directive that specifies the original line number\n+and source file name for subsequent input in the current preprocessor\n+input file.  `#line' has three variants:\n+\n+`#line LINENUM'\n+     Here LINENUM is a decimal integer constant.  This specifies that\n+     the line number of the following line of input, in its original\n+     source file, was LINENUM.\n+\n+`#line LINENUM FILENAME'\n+     Here LINENUM is a decimal integer constant and FILENAME is a\n+     string constant.  This specifies that the following line of input\n+     came originally from source file FILENAME and its line number there\n+     was LINENUM.  Keep in mind that FILENAME is not just a file name;\n+     it is surrounded by doublequote characters so that it looks like a\n+     string constant.\n+\n+`#line ANYTHING ELSE'\n+     ANYTHING ELSE is checked for macro calls, which are expanded.  The\n+     result should be a decimal integer constant followed optionally by\n+     a string constant, as described above.\n+\n+   `#line' directives alter the results of the `__FILE__' and\n+`__LINE__' predefined macros from that point on.  *Note Standard\n+Predefined::.\n+\n+   The output of the preprocessor (which is the input for the rest of\n+the compiler) contains directives that look much like `#line'\n+directives.  They start with just `#' instead of `#line', but this is\n+followed by a line number and file name as in `#line'.  *Note Output::.\n+\n+\u001f\n+File: cpp.info,  Node: Other Directives,  Next: Output,  Prev: Combining Sources,  Up: Top\n+\n+Miscellaneous Preprocessing Directives\n+======================================\n+\n+   This section describes three additional preprocessing directives.\n+They are not very useful, but are mentioned for completeness.\n+\n+   The \"null directive\" consists of a `#' followed by a Newline, with\n+only whitespace (including comments) in between.  A null directive is\n+understood as a preprocessing directive but has no effect on the\n+preprocessor output.  The primary significance of the existence of the\n+null directive is that an input line consisting of just a `#' will\n+produce no output, rather than a line of output containing just a `#'.\n+Supposedly some old C programs contain such lines.\n+\n+   The ANSI standard specifies that the effect of the `#pragma'\n+directive is implementation-defined.  In the GNU C preprocessor,\n+`#pragma' directives are not used, except for `#pragma once' (*note\n+Once-Only::.).  However, they are left in the preprocessor output, so\n+they are available to the compilation pass.\n+\n+   The `#ident' directive is supported for compatibility with certain\n+other systems.  It is followed by a line of text.  On some systems, the\n+text is copied into a special place in the object file; on most systems,\n+the text is ignored and this directive has no effect.  Typically\n+`#ident' is only used in header files supplied with those systems where\n+it is meaningful.\n+\n+\u001f\n+File: cpp.info,  Node: Output,  Next: Invocation,  Prev: Other Directives,  Up: Top\n+\n+C Preprocessor Output\n+=====================\n+\n+   The output from the C preprocessor looks much like the input, except\n+that all preprocessing directive lines have been replaced with blank\n+lines and all comments with spaces.  Whitespace within a line is not\n+altered; however, unless `-traditional' is used, spaces may be inserted\n+into the expansions of macro calls to prevent tokens from being\n+concatenated.\n+\n+   Source file name and line number information is conveyed by lines of\n+the form\n+\n+     # LINENUM FILENAME FLAGS\n+\n+which are inserted as needed into the middle of the input (but never\n+within a string or character constant).  Such a line means that the\n+following line originated in file FILENAME at line LINENUM.\n+\n+   After the file name comes zero or more flags, which are `1', `2',\n+`3', or `4'.  If there are multiple flags, spaces separate them.  Here\n+is what the flags mean:\n+\n+`1'\n+     This indicates the start of a new file.\n+\n+`2'\n+     This indicates returning to a file (after having included another\n+     file).\n+\n+`3'\n+     This indicates that the following text comes from a system header\n+     file, so certain warnings should be suppressed.\n+\n+`4'\n+     This indicates that the following text should be treated as C.\n+"}, {"sha": "9f0fa14b2bf76af4b460852b312450f0565dec21", "filename": "gcc/cpp.info-3", "status": "added", "additions": 478, "deletions": 0, "changes": 478, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info-3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcpp.info-3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.info-3?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,478 @@\n+This is Info file cpp.info, produced by Makeinfo version 1.67 from the\n+input file cpp.texi.\n+\n+   This file documents the GNU C Preprocessor.\n+\n+   Copyright 1987, 1989, 1991, 1992, 1993, 1994, 1995 Free Software\n+Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the entire resulting derived work is distributed under the terms\n+of a permission notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions.\n+\n+\u001f\n+File: cpp.info,  Node: Invocation,  Next: Concept Index,  Prev: Output,  Up: Top\n+\n+Invoking the C Preprocessor\n+===========================\n+\n+   Most often when you use the C preprocessor you will not have to\n+invoke it explicitly: the C compiler will do so automatically.\n+However, the preprocessor is sometimes useful on its own.\n+\n+   The C preprocessor expects two file names as arguments, INFILE and\n+OUTFILE.  The preprocessor reads INFILE together with any other files\n+it specifies with `#include'.  All the output generated by the combined\n+input files is written in OUTFILE.\n+\n+   Either INFILE or OUTFILE may be `-', which as INFILE means to read\n+from standard input and as OUTFILE means to write to standard output.\n+Also, if OUTFILE or both file names are omitted, the standard output\n+and standard input are used for the omitted file names.\n+\n+   Here is a table of command options accepted by the C preprocessor.\n+These options can also be given when compiling a C program; they are\n+passed along automatically to the preprocessor when it is invoked by the\n+compiler.\n+\n+`-P'\n+     Inhibit generation of `#'-lines with line-number information in\n+     the output from the preprocessor (*note Output::.).  This might be\n+     useful when running the preprocessor on something that is not C\n+     code and will be sent to a program which might be confused by the\n+     `#'-lines.\n+\n+`-C'\n+     Do not discard comments: pass them through to the output file.\n+     Comments appearing in arguments of a macro call will be copied to\n+     the output before the expansion of the macro call.\n+\n+`-traditional'\n+     Try to imitate the behavior of old-fashioned C, as opposed to ANSI\n+     C.\n+\n+        * Traditional macro expansion pays no attention to singlequote\n+          or doublequote characters; macro argument symbols are\n+          replaced by the argument values even when they appear within\n+          apparent string or character constants.\n+\n+        * Traditionally, it is permissible for a macro expansion to end\n+          in the middle of a string or character constant.  The\n+          constant continues into the text surrounding the macro call.\n+\n+        * However, traditionally the end of the line terminates a\n+          string or character constant, with no error.\n+\n+        * In traditional C, a comment is equivalent to no text at all.\n+          (In ANSI C, a comment counts as whitespace.)\n+\n+        * Traditional C does not have the concept of a \"preprocessing\n+          number\".  It considers `1.0e+4' to be three tokens: `1.0e',\n+          `+', and `4'.\n+\n+        * A macro is not suppressed within its own definition, in\n+          traditional C.  Thus, any macro that is used recursively\n+          inevitably causes an error.\n+\n+        * The character `#' has no special meaning within a macro\n+          definition in traditional C.\n+\n+        * In traditional C, the text at the end of a macro expansion\n+          can run together with the text after the macro call, to\n+          produce a single token.  (This is impossible in ANSI C.)\n+\n+        * Traditionally, `\\' inside a macro argument suppresses the\n+          syntactic significance of the following character.\n+\n+`-trigraphs'\n+     Process ANSI standard trigraph sequences.  These are\n+     three-character sequences, all starting with `??', that are\n+     defined by ANSI C to stand for single characters.  For example,\n+     `??/' stands for `\\', so `'??/n'' is a character constant for a\n+     newline.  Strictly speaking, the GNU C preprocessor does not\n+     support all programs in ANSI Standard C unless `-trigraphs' is\n+     used, but if you ever notice the difference it will be with relief.\n+\n+     You don't want to know any more about trigraphs.\n+\n+`-pedantic'\n+     Issue warnings required by the ANSI C standard in certain cases\n+     such as when text other than a comment follows `#else' or `#endif'.\n+\n+`-pedantic-errors'\n+     Like `-pedantic', except that errors are produced rather than\n+     warnings.\n+\n+`-Wtrigraphs'\n+     Warn if any trigraphs are encountered (assuming they are enabled).\n+\n+`-Wcomment'\n+     Warn whenever a comment-start sequence `/*' appears in a `/*'\n+     comment, or whenever a Backslash-Newline appears in a `//' comment.\n+\n+`-Wall'\n+     Requests both `-Wtrigraphs' and `-Wcomment' (but not\n+     `-Wtraditional' or `-Wundef').\n+\n+`-Wtraditional'\n+     Warn about certain constructs that behave differently in\n+     traditional and ANSI C.\n+\n+`-Wundef'\n+     Warn if an undefined identifier is evaluated in an `#if' directive.\n+\n+`-I DIRECTORY'\n+     Add the directory DIRECTORY to the head of the list of directories\n+     to be searched for header files (*note Include Syntax::.).  This\n+     can be used to override a system header file, substituting your\n+     own version, since these directories are searched before the system\n+     header file directories.  If you use more than one `-I' option,\n+     the directories are scanned in left-to-right order; the standard\n+     system directories come after.\n+\n+`-I-'\n+     Any directories specified with `-I' options before the `-I-'\n+     option are searched only for the case of `#include \"FILE\"'; they\n+     are not searched for `#include <FILE>'.\n+\n+     If additional directories are specified with `-I' options after\n+     the `-I-', these directories are searched for all `#include'\n+     directives.\n+\n+     In addition, the `-I-' option inhibits the use of the current\n+     directory as the first search directory for `#include \"FILE\"'.\n+     Therefore, the current directory is searched only if it is\n+     requested explicitly with `-I.'.  Specifying both `-I-' and `-I.'\n+     allows you to control precisely which directories are searched\n+     before the current one and which are searched after.\n+\n+`-nostdinc'\n+     Do not search the standard system directories for header files.\n+     Only the directories you have specified with `-I' options (and the\n+     current directory, if appropriate) are searched.\n+\n+`-nostdinc++'\n+     Do not search for header files in the C++-specific standard\n+     directories, but do still search the other standard directories.\n+     (This option is used when building libg++.)\n+\n+`-D NAME'\n+     Predefine NAME as a macro, with definition `1'.\n+\n+`-D NAME=DEFINITION'\n+     Predefine NAME as a macro, with definition DEFINITION.  There are\n+     no restrictions on the contents of DEFINITION, but if you are\n+     invoking the preprocessor from a shell or shell-like program you\n+     may need to use the shell's quoting syntax to protect characters\n+     such as spaces that have a meaning in the shell syntax.  If you\n+     use more than one `-D' for the same NAME, the rightmost definition\n+     takes effect.\n+\n+`-U NAME'\n+     Do not predefine NAME.  If both `-U' and `-D' are specified for\n+     one name, the `-U' beats the `-D' and the name is not predefined.\n+\n+`-undef'\n+     Do not predefine any nonstandard macros.\n+\n+`-A PREDICATE(ANSWER)'\n+     Make an assertion with the predicate PREDICATE and answer ANSWER.\n+     *Note Assertions::.\n+\n+     You can use `-A-' to disable all predefined assertions; it also\n+     undefines all predefined macros that identify the type of target\n+     system.\n+\n+`-dM'\n+     Instead of outputting the result of preprocessing, output a list of\n+     `#define' directives for all the macros defined during the\n+     execution of the preprocessor, including predefined macros.  This\n+     gives you a way of finding out what is predefined in your version\n+     of the preprocessor; assuming you have no file `foo.h', the command\n+\n+          touch foo.h; cpp -dM foo.h\n+\n+     will show the values of any predefined macros.\n+\n+`-dD'\n+     Like `-dM' except in two respects: it does *not* include the\n+     predefined macros, and it outputs *both* the `#define' directives\n+     and the result of preprocessing.  Both kinds of output go to the\n+     standard output file.\n+\n+`-dI'\n+     Output `#include' directives in addition to the result of\n+     preprocessing.\n+\n+`-M [-MG]'\n+     Instead of outputting the result of preprocessing, output a rule\n+     suitable for `make' describing the dependencies of the main source\n+     file.  The preprocessor outputs one `make' rule containing the\n+     object file name for that source file, a colon, and the names of\n+     all the included files.  If there are many included files then the\n+     rule is split into several lines using `\\'-newline.\n+\n+     `-MG' says to treat missing header files as generated files and\n+     assume they live in the same directory as the source file.  It\n+     must be specified in addition to `-M'.\n+\n+     This feature is used in automatic updating of makefiles.\n+\n+`-MM [-MG]'\n+     Like `-M' but mention only the files included with `#include\n+     \"FILE\"'.  System header files included with `#include <FILE>' are\n+     omitted.\n+\n+`-MD FILE'\n+     Like `-M' but the dependency information is written to FILE.  This\n+     is in addition to compiling the file as specified--`-MD' does not\n+     inhibit ordinary compilation the way `-M' does.\n+\n+     When invoking gcc, do not specify the FILE argument.  Gcc will\n+     create file names made by replacing \".c\" with \".d\" at the end of\n+     the input file names.\n+\n+     In Mach, you can use the utility `md' to merge multiple dependency\n+     files into a single dependency file suitable for using with the\n+     `make' command.\n+\n+`-MMD FILE'\n+     Like `-MD' except mention only user header files, not system\n+     header files.\n+\n+`-H'\n+     Print the name of each header file used, in addition to other\n+     normal activities.\n+\n+`-imacros FILE'\n+     Process FILE as input, discarding the resulting output, before\n+     processing the regular input file.  Because the output generated\n+     from FILE is discarded, the only effect of `-imacros FILE' is to\n+     make the macros defined in FILE available for use in the main\n+     input.\n+\n+`-include FILE'\n+     Process FILE as input, and include all the resulting output,\n+     before processing the regular input file.\n+\n+`-idirafter DIR'\n+     Add the directory DIR to the second include path.  The directories\n+     on the second include path are searched when a header file is not\n+     found in any of the directories in the main include path (the one\n+     that `-I' adds to).\n+\n+`-iprefix PREFIX'\n+     Specify PREFIX as the prefix for subsequent `-iwithprefix' options.\n+\n+`-iwithprefix DIR'\n+     Add a directory to the second include path.  The directory's name\n+     is made by concatenating PREFIX and DIR, where PREFIX was\n+     specified previously with `-iprefix'.\n+\n+`-isystem DIR'\n+     Add a directory to the beginning of the second include path,\n+     marking it as a system directory, so that it gets the same special\n+     treatment as is applied to the standard system directories.\n+\n+`-lang-c'\n+`-lang-c89'\n+`-lang-c++'\n+`-lang-objc'\n+`-lang-objc++'\n+     Specify the source language.  `-lang-c' is the default; it allows\n+     recognition of C++ comments (comments that begin with `//' and end\n+     at end of line) and hexadecimal floating-point constants, since\n+     these features will most likely appear in the next C standard.\n+     `-lang-c89' disables recognition of C++ comments and hexadecimal\n+     floating-point constants.  `-lang-c++' handles C++ comment syntax\n+     and includes extra default include directories for C++.\n+     `-lang-objc' enables the Objective C `#import' directive.\n+     `-lang-objc++' enables both C++ and Objective C extensions.\n+\n+     These options are generated by the compiler driver `gcc', but not\n+     passed from the `gcc' command line unless you use the driver's\n+     `-Wp' option.\n+\n+`-lint'\n+     Look for commands to the program checker `lint' embedded in\n+     comments, and emit them preceded by `#pragma lint'.  For example,\n+     the comment `/* NOTREACHED */' becomes `#pragma lint NOTREACHED'.\n+\n+     This option is available only when you call `cpp' directly; `gcc'\n+     will not pass it from its command line.\n+\n+`-$'\n+     Forbid the use of `$' in identifiers.  This was formerly required\n+     for strict conformance to the C Standard before the standard was\n+     corrected.\n+\n+     This option is available only when you call `cpp' directly; `gcc'\n+     will not pass it from its command line.\n+\n+\u001f\n+File: cpp.info,  Node: Concept Index,  Next: Index,  Prev: Invocation,  Up: Top\n+\n+Concept Index\n+*************\n+\n+* Menu:\n+\n+* ##:                                    Concatenation.\n+* arguments in macro definitions:        Argument Macros.\n+* assertions:                            Assertions.\n+* assertions, undoing:                   Assertions.\n+* blank macro arguments:                 Argument Macros.\n+* cascaded macros:                       Cascaded Macros.\n+* commenting out code:                   Deleted Code.\n+* computed #include:                     Include Syntax.\n+* concatenation:                         Concatenation.\n+* conditionals:                          Conditionals.\n+* directives:                            Directives.\n+* expansion of arguments:                Argument Prescan.\n+* function-like macro:                   Argument Macros.\n+* header file:                           Header Files.\n+* including just once:                   Once-Only.\n+* inheritance:                           Inheritance.\n+* invocation of the preprocessor:        Invocation.\n+* line control:                          Combining Sources.\n+* macro argument expansion:              Argument Prescan.\n+* macro body uses macro:                 Cascaded Macros.\n+* macros with argument:                  Argument Macros.\n+* manifest constant:                     Simple Macros.\n+* newlines in macro arguments:           Newlines in Args.\n+* null directive:                        Other Directives.\n+* options:                               Invocation.\n+* output format:                         Output.\n+* overriding a header file:              Inheritance.\n+* parentheses in macro bodies:           Macro Parentheses.\n+* pitfalls of macros:                    Macro Pitfalls.\n+* predefined macros:                     Predefined.\n+* predicates:                            Assertions.\n+* preprocessing directives:              Directives.\n+* prescan of macro arguments:            Argument Prescan.\n+* problems with macros:                  Macro Pitfalls.\n+* redefining macros:                     Redefining.\n+* repeated inclusion:                    Once-Only.\n+* retracting assertions:                 Assertions.\n+* second include path:                   Invocation.\n+* self-reference:                        Self-Reference.\n+* semicolons (after macro calls):        Swallow Semicolon.\n+* side effects (in macro arguments):     Side Effects.\n+* simple macro:                          Simple Macros.\n+* space as macro argument:               Argument Macros.\n+* standard predefined macros:            Standard Predefined.\n+* stringification:                       Stringification.\n+* testing predicates:                    Assertions.\n+* unassert:                              Assertions.\n+* undefining macros:                     Undefining.\n+* unsafe macros:                         Side Effects.\n+\n+\u001f\n+File: cpp.info,  Node: Index,  Prev: Concept Index,  Up: Top\n+\n+Index of Directives, Macros and Options\n+***************************************\n+\n+* Menu:\n+\n+* #assert:                               Assertions.\n+* #cpu:                                  Assertions.\n+* #define:                               Argument Macros.\n+* #elif:                                 #elif Directive.\n+* #else:                                 #else Directive.\n+* #error:                                #error Directive.\n+* #ident:                                Other Directives.\n+* #if:                                   Conditional Syntax.\n+* #ifdef:                                Conditionals-Macros.\n+* #ifndef:                               Conditionals-Macros.\n+* #import:                               Once-Only.\n+* #include:                              Include Syntax.\n+* #include_next:                         Inheritance.\n+* #line:                                 Combining Sources.\n+* #machine:                              Assertions.\n+* #pragma:                               Other Directives.\n+* #pragma once:                          Once-Only.\n+* #system:                               Assertions.\n+* #unassert:                             Assertions.\n+* #warning:                              #error Directive.\n+* -$:                                    Invocation.\n+* -A:                                    Invocation.\n+* -C:                                    Invocation.\n+* -D:                                    Invocation.\n+* -dD:                                   Invocation.\n+* -dI:                                   Invocation.\n+* -dM:                                   Invocation.\n+* -H:                                    Invocation.\n+* -I:                                    Invocation.\n+* -idirafter:                            Invocation.\n+* -imacros:                              Invocation.\n+* -include:                              Invocation.\n+* -iprefix:                              Invocation.\n+* -isystem:                              Invocation.\n+* -iwithprefix:                          Invocation.\n+* -lang-c:                               Invocation.\n+* -lang-c++:                             Invocation.\n+* -lang-c89:                             Invocation.\n+* -lang-objc:                            Invocation.\n+* -lang-objc++:                          Invocation.\n+* -M:                                    Invocation.\n+* -MD:                                   Invocation.\n+* -MM:                                   Invocation.\n+* -MMD:                                  Invocation.\n+* -nostdinc:                             Invocation.\n+* -nostdinc++:                           Invocation.\n+* -P:                                    Invocation.\n+* -pedantic:                             Invocation.\n+* -pedantic-errors:                      Invocation.\n+* -traditional:                          Invocation.\n+* -trigraphs:                            Invocation.\n+* -U:                                    Invocation.\n+* -undef:                                Invocation.\n+* -Wall:                                 Invocation.\n+* -Wcomment:                             Invocation.\n+* -Wtraditional:                         Invocation.\n+* -Wtrigraphs:                           Invocation.\n+* -Wundef:                               Invocation.\n+* __BASE_FILE__:                         Standard Predefined.\n+* __CHAR_UNSIGNED__:                     Standard Predefined.\n+* __cplusplus:                           Standard Predefined.\n+* __DATE__:                              Standard Predefined.\n+* __FILE__:                              Standard Predefined.\n+* __GNUC__:                              Standard Predefined.\n+* __GNUC_MINOR__:                        Standard Predefined.\n+* __GNUG__:                              Standard Predefined.\n+* __INCLUDE_LEVEL_:                      Standard Predefined.\n+* __LINE__:                              Standard Predefined.\n+* __OPTIMIZE__:                          Standard Predefined.\n+* __REGISTER_PREFIX__:                   Standard Predefined.\n+* __STDC__:                              Standard Predefined.\n+* __STDC_VERSION__:                      Standard Predefined.\n+* __STRICT_ANSI__:                       Standard Predefined.\n+* __TIME__:                              Standard Predefined.\n+* __USER_LABEL_PREFIX__:                 Standard Predefined.\n+* __VERSION__:                           Standard Predefined.\n+* _AM29000:                              Nonstandard Predefined.\n+* _AM29K:                                Nonstandard Predefined.\n+* BSD:                                   Nonstandard Predefined.\n+* defined:                               Conditionals-Macros.\n+* M68020:                                Nonstandard Predefined.\n+* m68k:                                  Nonstandard Predefined.\n+* mc68000:                               Nonstandard Predefined.\n+* ns32000:                               Nonstandard Predefined.\n+* pyr:                                   Nonstandard Predefined.\n+* sequent:                               Nonstandard Predefined.\n+* sun:                                   Nonstandard Predefined.\n+* system header files:                   Header Uses.\n+* unix:                                  Nonstandard Predefined.\n+* vax:                                   Nonstandard Predefined.\n+\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "gcc/cstamp-h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcstamp-h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fcstamp-h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcstamp-h?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "e47bfc2f8f1c5b72b37c80cdbd343acab34e9f77", "filename": "gcc/gcc.info", "status": "added", "additions": 312, "deletions": 0, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,312 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+Indirect:\n+gcc.info-1: 1402\n+gcc.info-2: 50964\n+gcc.info-3: 96983\n+gcc.info-4: 143917\n+gcc.info-5: 192350\n+gcc.info-6: 225344\n+gcc.info-7: 249300\n+gcc.info-8: 295618\n+gcc.info-9: 344449\n+gcc.info-10: 393730\n+gcc.info-11: 441350\n+gcc.info-12: 491094\n+gcc.info-13: 534183\n+gcc.info-14: 572713\n+gcc.info-15: 622155\n+gcc.info-16: 665863\n+gcc.info-17: 713227\n+gcc.info-18: 751237\n+gcc.info-19: 796779\n+gcc.info-20: 841999\n+gcc.info-21: 891870\n+gcc.info-22: 937562\n+gcc.info-23: 982612\n+gcc.info-24: 1026075\n+gcc.info-25: 1072705\n+gcc.info-26: 1121544\n+gcc.info-27: 1162761\n+gcc.info-28: 1187258\n+\u001f\n+Tag Table:\n+(Indirect)\n+Node: Top\u007f1402\n+Node: G++ and GCC\u007f3216\n+Node: Invoking GCC\u007f5423\n+Node: Option Summary\u007f8802\n+Node: Overall Options\u007f20950\n+Node: Invoking G++\u007f25513\n+Node: C Dialect Options\u007f27386\n+Node: C++ Dialect Options\u007f38688\n+Node: Warning Options\u007f50964\n+Node: Debugging Options\u007f68134\n+Node: Optimize Options\u007f84249\n+Node: Preprocessor Options\u007f96983\n+Node: Assembler Options\u007f103446\n+Node: Link Options\u007f103813\n+Node: Directory Options\u007f109086\n+Node: Target Options\u007f112951\n+Node: Submodel Options\u007f116608\n+Node: M680x0 Options\u007f118040\n+Node: VAX Options\u007f122970\n+Node: SPARC Options\u007f123505\n+Node: Convex Options\u007f132591\n+Node: AMD29K Options\u007f134772\n+Node: ARM Options\u007f137997\n+Node: M32R/D Options\u007f141571\n+Node: M88K Options\u007f143917\n+Node: RS/6000 and PowerPC Options\u007f151867\n+Node: RT Options\u007f170743\n+Node: MIPS Options\u007f172447\n+Node: i386 Options\u007f180547\n+Node: HPPA Options\u007f185990\n+Node: Intel 960 Options\u007f189810\n+Node: DEC Alpha Options\u007f192350\n+Node: Clipper Options\u007f199428\n+Node: H8/300 Options\u007f199827\n+Node: SH Options\u007f200641\n+Node: System V Options\u007f201237\n+Node: V850 Options\u007f202046\n+Node: Code Gen Options\u007f204031\n+Node: Environment Variables\u007f214892\n+Node: Running Protoize\u007f219115\n+Node: Installation\u007f225344\n+Node: Configurations\u007f249300\n+Node: Other Dir\u007f287877\n+Node: Cross-Compiler\u007f289593\n+Node: Steps of Cross\u007f291424\n+Node: Configure Cross\u007f292542\n+Node: Tools and Libraries\u007f293179\n+Node: Cross Runtime\u007f295618\n+Node: Cross Headers\u007f299699\n+Node: Build Cross\u007f301698\n+Node: Sun Install\u007f303574\n+Node: VMS Install\u007f305042\n+Node: Collect2\u007f314971\n+Node: Header Dirs\u007f317680\n+Node: C Extensions\u007f319094\n+Node: Statement Exprs\u007f322450\n+Node: Local Labels\u007f324344\n+Node: Labels as Values\u007f326406\n+Node: Nested Functions\u007f328270\n+Node: Constructing Calls\u007f332126\n+Node: Naming Types\u007f334183\n+Node: Typeof\u007f335277\n+Node: Lvalues\u007f337142\n+Node: Conditionals\u007f339582\n+Node: Long Long\u007f340473\n+Node: Complex\u007f341913\n+Node: Zero Length\u007f343775\n+Node: Variable Length\u007f344449\n+Node: Macro Varargs\u007f346974\n+Node: Subscripting\u007f349077\n+Node: Pointer Arith\u007f349560\n+Node: Initializers\u007f350125\n+Node: Constructors\u007f350590\n+Node: Labeled Elements\u007f352284\n+Node: Case Ranges\u007f354913\n+Node: Cast to Union\u007f355594\n+Node: Function Attributes\u007f356672\n+Node: Function Prototypes\u007f371569\n+Node: C++ Comments\u007f373371\n+Node: Dollar Signs\u007f373907\n+Node: Character Escapes\u007f374365\n+Node: Alignment\u007f374652\n+Node: Variable Attributes\u007f376124\n+Node: Type Attributes\u007f384657\n+Node: Inline\u007f393730\n+Node: Extended Asm\u007f397607\n+Node: Asm Labels\u007f408173\n+Node: Explicit Reg Vars\u007f409492\n+Node: Global Reg Vars\u007f410740\n+Node: Local Reg Vars\u007f415305\n+Node: Alternate Keywords\u007f416897\n+Node: Incomplete Enums\u007f418299\n+Node: Function Names\u007f419055\n+Node: Return Address\u007f420329\n+Node: C++ Extensions\u007f422349\n+Node: Naming Results\u007f423583\n+Node: Min and Max\u007f426897\n+Node: Destructors and Goto\u007f428337\n+Node: C++ Interface\u007f428813\n+Node: Template Instantiation\u007f434047\n+Node: C++ Signatures\u007f441350\n+Node: Gcov\u007f445694\n+Node: Gcov Intro\u007f446217\n+Node: Invoking Gcov\u007f448898\n+Node: Gcov and Optimization\u007f454509\n+Node: Gcov Data Files\u007f455933\n+Node: Trouble\u007f459503\n+Node: Actual Bugs\u007f461204\n+Node: Installation Problems\u007f462473\n+Node: Cross-Compiler Problems\u007f476259\n+Node: Interoperation\u007f477730\n+Node: External Bugs\u007f491094\n+Node: Incompatibilities\u007f493226\n+Node: Fixed Headers\u007f501776\n+Node: Standard Libraries\u007f504118\n+Node: Disappointments\u007f505365\n+Node: C++ Misunderstandings\u007f509922\n+Node: Static Definitions\u007f510569\n+Node: Temporaries\u007f511623\n+Node: Protoize Caveats\u007f513827\n+Node: Non-bugs\u007f517783\n+Node: Warnings and Errors\u007f527210\n+Node: Bugs\u007f528980\n+Node: Bug Criteria\u007f530340\n+Node: Bug Lists\u007f532770\n+Node: Bug Reporting\u007f534183\n+Node: Sending Patches\u007f546601\n+Node: Service\u007f551988\n+Node: Contributing\u007f552558\n+Node: VMS\u007f553394\n+Node: Include Files and VMS\u007f553792\n+Node: Global Declarations\u007f557682\n+Node: VMS Misc\u007f561991\n+Node: Portability\u007f566317\n+Node: Interface\u007f568080\n+Node: Passes\u007f572713\n+Node: RTL\u007f590056\n+Node: RTL Objects\u007f591944\n+Node: Accessors\u007f594988\n+Node: Flags\u007f600314\n+Node: Machine Modes\u007f609333\n+Node: Constants\u007f616967\n+Node: Regs and Memory\u007f622155\n+Node: Arithmetic\u007f634208\n+Node: Comparisons\u007f640106\n+Node: Bit Fields\u007f644169\n+Node: Conversions\u007f645581\n+Node: RTL Declarations\u007f648469\n+Node: Side Effects\u007f649278\n+Node: Incdec\u007f661825\n+Node: Assembler\u007f664341\n+Node: Insns\u007f665863\n+Node: Calls\u007f688341\n+Node: Sharing\u007f690936\n+Node: Reading RTL\u007f694012\n+Node: Machine Desc\u007f694951\n+Node: Patterns\u007f696804\n+Node: Example\u007f699748\n+Node: RTL Template\u007f700876\n+Node: Output Template\u007f713227\n+Node: Output Statement\u007f717209\n+Node: Constraints\u007f720922\n+Node: Simple Constraints\u007f721925\n+Node: Multi-Alternative\u007f733837\n+Node: Class Preferences\u007f736673\n+Node: Modifiers\u007f737553\n+Node: Machine Constraints\u007f741097\n+Node: No Constraints\u007f750116\n+Node: Standard Names\u007f751237\n+Node: Pattern Ordering\u007f783426\n+Node: Dependent Patterns\u007f784653\n+Node: Jump Patterns\u007f787468\n+Node: Insn Canonicalizations\u007f793284\n+Node: Peephole Definitions\u007f796779\n+Node: Expander Definitions\u007f803697\n+Node: Insn Splitting\u007f811143\n+Node: Insn Attributes\u007f818158\n+Node: Defining Attributes\u007f819205\n+Node: Expressions\u007f821217\n+Node: Tagging Insns\u007f827525\n+Node: Attr Example\u007f831888\n+Node: Insn Lengths\u007f834264\n+Node: Constant Attributes\u007f837628\n+Node: Delay Slots\u007f838788\n+Node: Function Units\u007f841999\n+Node: Target Macros\u007f847669\n+Node: Driver\u007f849552\n+Node: Run-time Target\u007f863850\n+Node: Storage Layout\u007f869736\n+Node: Type Layout\u007f885097\n+Node: Registers\u007f891870\n+Node: Register Basics\u007f892850\n+Node: Allocation Order\u007f896887\n+Node: Values in Registers\u007f898305\n+Node: Leaf Functions\u007f902931\n+Node: Stack Registers\u007f905406\n+Node: Obsolete Register Macros\u007f906239\n+Node: Register Classes\u007f908822\n+Node: Stack and Calling\u007f928897\n+Node: Frame Layout\u007f929352\n+Node: Stack Checking\u007f933982\n+Node: Frame Registers\u007f937562\n+Node: Elimination\u007f941977\n+Node: Stack Arguments\u007f946233\n+Node: Register Arguments\u007f952841\n+Node: Scalar Return\u007f962634\n+Node: Aggregate Return\u007f966872\n+Node: Caller Saves\u007f970587\n+Node: Function Entry\u007f971737\n+Node: Profiling\u007f982612\n+Node: Varargs\u007f989691\n+Node: Trampolines\u007f997101\n+Node: Library Calls\u007f1003819\n+Node: Addressing Modes\u007f1011877\n+Node: Condition Code\u007f1019876\n+Node: Costs\u007f1026075\n+Node: Sections\u007f1034786\n+Node: PIC\u007f1040969\n+Node: Assembler Format\u007f1043679\n+Node: File Framework\u007f1044745\n+Node: Data Output\u007f1049443\n+Node: Uninitialized Data\u007f1056637\n+Node: Label Output\u007f1062043\n+Node: Initialization\u007f1072705\n+Node: Macros for Initialization\u007f1078848\n+Node: Instruction Output\u007f1083445\n+Node: Dispatch Tables\u007f1091632\n+Node: Exception Region Output\u007f1094079\n+Node: Alignment Output\u007f1097073\n+Node: Debugging Info\u007f1098821\n+Node: All Debuggers\u007f1099430\n+Node: DBX Options\u007f1101875\n+Node: DBX Hooks\u007f1107158\n+Node: File Names and DBX\u007f1110798\n+Node: SDB and DWARF\u007f1112771\n+Node: Cross-compilation\u007f1114978\n+Node: Misc\u007f1121544\n+Node: Config\u007f1139585\n+Node: Fragments\u007f1147323\n+Node: Target Fragment\u007f1147922\n+Node: Host Fragment\u007f1152088\n+Node: Funding\u007f1152690\n+Node: Look and Feel\u007f1155184\n+Node: Copying\u007f1162761\n+Node: Contributors\u007f1181953\n+Node: Index\u007f1187258\n+\u001f\n+End Tag Table"}, {"sha": "12ce102eabbac556afab3815e5ecc8f1e2ab6695", "filename": "gcc/gcc.info-1", "status": "added", "additions": 1154, "deletions": 0, "changes": 1154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-1?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1154 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Top,  Next: G++ and GCC,  Up: (DIR)\n+\n+Introduction\n+************\n+\n+   This manual documents how to run, install and port the GNU compiler,\n+as well as its new features and incompatibilities, and how to report\n+bugs.  It corresponds to GNU CC version 2.7.2.\n+\n+* Menu:\n+\n+\n+* G++ and GCC::     You can compile C or C++ programs.\n+* Invoking GCC::    Command options supported by `gcc'.\n+* Installation::    How to configure, compile and install GNU CC.\n+* C Extensions::    GNU extensions to the C language family.\n+* C++ Extensions::  GNU extensions to the C++ language.\n+* Gcov::\t    gcov: a GNU CC test coverage program.\n+* Trouble::         If you have trouble installing GNU CC.\n+* Bugs::            How, why and where to report bugs.\n+* Service::         How to find suppliers of support for GNU CC.\n+* Contributing::    How to contribute to testing and developing GNU CC.\n+* VMS::             Using GNU CC on VMS.\n+\n+* Portability::     Goals of GNU CC's portability features.\n+* Interface::       Function-call interface of GNU CC output.\n+* Passes::          Order of passes, what they do, and what each file is for.\n+* RTL::             The intermediate representation that most passes work on.\n+* Machine Desc::    How to write machine description instruction patterns.\n+* Target Macros::   How to write the machine description C macros.\n+* Config::          Writing the `xm-MACHINE.h' file.\n+* Fragments::       Writing the `t-TARGET' and `x-HOST' files.\n+\n+* Funding::         How to help assure funding for free software.\n+* Look and Feel::   Protect your freedom--fight \"look and feel\".\n+\n+* Copying::         GNU General Public License says\n+                     how you can copy and share GNU CC.\n+* Contributors::    People who have contributed to GNU CC.\n+\n+* Index::\t    Index of concepts and symbol names.\n+\n+\u001f\n+File: gcc.info,  Node: G++ and GCC,  Next: Invoking GCC,  Prev: Top,  Up: Top\n+\n+Compile C, C++, or Objective C\n+******************************\n+\n+   The C, C++, and Objective C versions of the compiler are integrated;\n+the GNU C compiler can compile programs written in C, C++, or Objective\n+C.\n+\n+   \"GCC\" is a common shorthand term for the GNU C compiler.  This is\n+both the most general name for the compiler, and the name used when the\n+emphasis is on compiling C programs.\n+\n+   When referring to C++ compilation, it is usual to call the compiler\n+\"G++\".  Since there is only one compiler, it is also accurate to call\n+it \"GCC\" no matter what the language context; however, the term \"G++\"\n+is more useful when the emphasis is on compiling C++ programs.\n+\n+   We use the name \"GNU CC\" to refer to the compilation system as a\n+whole, and more specifically to the language-independent part of the\n+compiler.  For example, we refer to the optimization options as\n+affecting the behavior of \"GNU CC\" or sometimes just \"the compiler\".\n+\n+   Front ends for other languages, such as Ada 9X, Fortran, Modula-3,\n+and Pascal, are under development.  These front-ends, like that for\n+C++, are built in subdirectories of GNU CC and link to it.  The result\n+is an integrated compiler that can compile programs written in C, C++,\n+Objective C, or any of the languages for which you have installed front\n+ends.\n+\n+   In this manual, we only discuss the options for the C, Objective-C,\n+and C++ compilers and those of the GNU CC core.  Consult the\n+documentation of the other front ends for the options to use when\n+compiling programs written in other languages.\n+\n+   G++ is a *compiler*, not merely a preprocessor.  G++ builds object\n+code directly from your C++ program source.  There is no intermediate C\n+version of the program.  (By contrast, for example, some other\n+implementations use a program that generates a C program from your C++\n+source.)  Avoiding an intermediate C representation of the program means\n+that you get better object code, and better debugging information.  The\n+GNU debugger, GDB, works with this information in the object code to\n+give you comprehensive C++ source-level editing capabilities (*note C\n+and C++: (gdb.info)C.).\n+\n+\u001f\n+File: gcc.info,  Node: Invoking GCC,  Next: Installation,  Prev: G++ and GCC,  Up: Top\n+\n+GNU CC Command Options\n+**********************\n+\n+   When you invoke GNU CC, it normally does preprocessing, compilation,\n+assembly and linking.  The \"overall options\" allow you to stop this\n+process at an intermediate stage.  For example, the `-c' option says\n+not to run the linker.  Then the output consists of object files output\n+by the assembler.\n+\n+   Other options are passed on to one stage of processing.  Some options\n+control the preprocessor and others the compiler itself.  Yet other\n+options control the assembler and linker; most of these are not\n+documented here, since you rarely need to use any of them.\n+\n+   Most of the command line options that you can use with GNU CC are\n+useful for C programs; when an option is only useful with another\n+language (usually C++), the explanation says so explicitly.  If the\n+description for a particular option does not mention a source language,\n+you can use that option with all supported languages.\n+\n+   *Note Compiling C++ Programs: Invoking G++, for a summary of special\n+options for compiling C++ programs.\n+\n+   The `gcc' program accepts options and file names as operands.  Many\n+options have multiletter names; therefore multiple single-letter options\n+may *not* be grouped: `-dr' is very different from `-d -r'.\n+\n+   You can mix options and other arguments.  For the most part, the\n+order you use doesn't matter.  Order does matter when you use several\n+options of the same kind; for example, if you specify `-L' more than\n+once, the directories are searched in the order specified.\n+\n+   Many options have long names starting with `-f' or with `-W'--for\n+example, `-fforce-mem', `-fstrength-reduce', `-Wformat' and so on.\n+Most of these have both positive and negative forms; the negative form\n+of `-ffoo' would be `-fno-foo'.  This manual documents only one of\n+these two forms, whichever one is not the default.\n+\n+* Menu:\n+\n+* Option Summary::\tBrief list of all options, without explanations.\n+* Overall Options::     Controlling the kind of output:\n+                        an executable, object files, assembler files,\n+                        or preprocessed source.\n+* Invoking G++::\tCompiling C++ programs.\n+* C Dialect Options::   Controlling the variant of C language compiled.\n+* C++ Dialect Options:: Variations on C++.\n+* Warning Options::     How picky should the compiler be?\n+* Debugging Options::   Symbol tables, measurements, and debugging dumps.\n+* Optimize Options::    How much optimization?\n+* Preprocessor Options:: Controlling header files and macro definitions.\n+                         Also, getting dependency information for Make.\n+* Assembler Options::   Passing options to the assembler.\n+* Link Options::        Specifying libraries and so on.\n+* Directory Options::   Where to find header files and libraries.\n+                        Where to find the compiler executable files.\n+* Target Options::      Running a cross-compiler, or an old version of GNU CC.\n+* Submodel Options::    Specifying minor hardware or convention variations,\n+                        such as 68010 vs 68020.\n+* Code Gen Options::    Specifying conventions for function calls, data layout\n+                        and register usage.\n+* Environment Variables:: Env vars that affect GNU CC.\n+* Running Protoize::    Automatically adding or removing function prototypes.\n+\n+\u001f\n+File: gcc.info,  Node: Option Summary,  Next: Overall Options,  Up: Invoking GCC\n+\n+Option Summary\n+==============\n+\n+   Here is a summary of all the options, grouped by type.  Explanations\n+are in the following sections.\n+\n+*Overall Options*\n+     *Note Options Controlling the Kind of Output: Overall Options.\n+          -c  -S  -E  -o FILE  -pipe  -v  -x LANGUAGE\n+\n+*C Language Options*\n+     *Note Options Controlling C Dialect: C Dialect Options.\n+          -ansi  -fallow-single-precision  -fcond-mismatch  -fno-asm\n+          -fno-builtin  -ffreestanding  -fhosted  -fsigned-bitfields  -fsigned-char\n+          -funsigned-bitfields  -funsigned-char  -fwritable-strings\n+          -traditional  -traditional-cpp  -trigraphs\n+\n+*C++ Language Options*\n+     *Note Options Controlling C++ Dialect: C++ Dialect Options.\n+          -fall-virtual  -fdollars-in-identifiers  -felide-constructors\n+          -fenum-int-equiv  -fexternal-templates  -ffor-scope  -fno-for-scope\n+          -fhandle-signatures  -fmemoize-lookups  -fname-mangling-version-N\n+          -fno-default-inline  -fno-gnu-keywords -fnonnull-objects -fguiding-decls\n+          -foperator-names  -fstrict-prototype  -fthis-is-variable\n+          -ftemplate-depth-N  -nostdinc++  -traditional  +eN\n+\n+*Warning Options*\n+     *Note Options to Request or Suppress Warnings: Warning Options.\n+          -fsyntax-only  -pedantic  -pedantic-errors\n+          -w  -W  -Wall  -Waggregate-return  -Wbad-function-cast\n+          -Wcast-align  -Wcast-qual  -Wchar-subscript  -Wcomment\n+          -Wconversion  -Werror  -Wformat\n+          -Wid-clash-LEN  -Wimplicit -Wimplicit-int\n+          -Wimplicit-function-declarations -Wimport  -Winline\n+          -Wlarger-than-LEN  -Wmain  -Wmissing-declarations\n+          -Wmissing-prototypes  -Wnested-externs\n+          -Wno-import  -Woverloaded-virtual  -Wparentheses\n+          -Wpointer-arith  -Wredundant-decls  -Wreorder  -Wreturn-type  -Wshadow\n+          -Wsign-compare  -Wstrict-prototypes  -Wswitch  -Wsynth\n+          -Wtemplate-debugging  -Wtraditional  -Wtrigraphs\n+          -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings\n+\n+*Debugging Options*\n+     *Note Options for Debugging Your Program or GCC: Debugging Options.\n+          -a  -ax  -dLETTERS  -fpretend-float\n+          -fprofile-arcs  -ftest-coverage\n+          -g  -gLEVEL  -gcoff  -gdwarf  -gdwarf-1  -gdwarf-1+  -gdwarf-2\n+          -ggdb  -gstabs  -gstabs+  -gxcoff  -gxcoff+\n+          -p  -pg  -print-file-name=LIBRARY  -print-libgcc-file-name\n+          -print-prog-name=PROGRAM  -print-search-dirs  -save-temps\n+\n+*Optimization Options*\n+     *Note Options that Control Optimization: Optimize Options.\n+          -fbranch-probabilities\n+          -fcaller-saves  -fcse-follow-jumps  -fcse-skip-blocks\n+          -fdelayed-branch   -fexpensive-optimizations\n+          -ffast-math  -ffloat-store  -fforce-addr  -fforce-mem\n+          -ffunction-sections  -finline-functions\n+          -fkeep-inline-functions  -fno-default-inline\n+          -fno-defer-pop  -fno-function-cse\n+          -fno-inline  -fno-peephole  -fomit-frame-pointer\n+          -frerun-cse-after-loop  -fschedule-insns\n+          -fschedule-insns2  -fstrength-reduce  -fthread-jumps\n+          -funroll-all-loops  -funroll-loops\n+          -O  -O0  -O1  -O2  -O3\n+\n+*Preprocessor Options*\n+     *Note Options Controlling the Preprocessor: Preprocessor Options.\n+          -AQUESTION(ANSWER)  -C  -dD  -dM  -dN\n+          -DMACRO[=DEFN]  -E  -H\n+          -idirafter DIR\n+          -include FILE  -imacros FILE\n+          -iprefix FILE  -iwithprefix DIR\n+          -iwithprefixbefore DIR  -isystem DIR\n+          -M  -MD  -MM  -MMD  -MG  -nostdinc  -P  -trigraphs\n+          -undef  -UMACRO  -Wp,OPTION\n+\n+*Assembler Option*\n+     *Note Passing Options to the Assembler: Assembler Options.\n+          -Wa,OPTION\n+\n+*Linker Options*\n+     *Note Options for Linking: Link Options.\n+          OBJECT-FILE-NAME  -lLIBRARY\n+          -nostartfiles  -nodefaultlibs  -nostdlib\n+          -s  -static  -shared  -symbolic\n+          -Wl,OPTION  -Xlinker OPTION\n+          -u SYMBOL\n+\n+*Directory Options*\n+     *Note Options for Directory Search: Directory Options.\n+          -BPREFIX  -IDIR  -I-  -LDIR  -specs=FILE\n+\n+*Target Options*\n+     *Note Target Options::.\n+          -b MACHINE  -V VERSION\n+\n+*Machine Dependent Options*\n+     *Note Hardware Models and Configurations: Submodel Options.\n+          *M680x0 Options*\n+          -m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040\n+          -m68060  -m5200  -m68881  -mbitfield  -mc68000  -mc68020  -mfpa\n+          -mnobitfield  -mrtd  -mshort  -msoft-float  -malign-int\n+          \n+          *VAX Options*\n+          -mg  -mgnu  -munix\n+          \n+          *SPARC Options*\n+          -mcpu=CPU TYPE\n+          -mtune=CPU TYPE\n+          -mcmodel=CODE MODEL\n+          -malign-jumps=NUM  -malign-loops=NUM\n+          -malign-functions=NUM\n+          -m32  -m64\n+          -mapp-regs  -mbroken-saverestore  -mcypress  -mepilogue\n+          -mflat  -mfpu  -mhard-float  -mhard-quad-float\n+          -mimpure-text  -mlive-g0  -mno-app-regs  -mno-epilogue\n+          -mno-flat  -mno-fpu  -mno-impure-text\n+          -mno-stack-bias  -mno-unaligned-doubles\n+          -msoft-float  -msoft-quad-float  -msparclite  -mstack-bias\n+          -msupersparc  -munaligned-doubles  -mv8\n+          \n+          *Convex Options*\n+          -mc1  -mc2  -mc32  -mc34  -mc38\n+          -margcount  -mnoargcount\n+          -mlong32  -mlong64\n+          -mvolatile-cache  -mvolatile-nocache\n+          \n+          *AMD29K Options*\n+          -m29000  -m29050  -mbw  -mnbw  -mdw  -mndw\n+          -mlarge  -mnormal  -msmall\n+          -mkernel-registers  -mno-reuse-arg-regs\n+          -mno-stack-check  -mno-storem-bug\n+          -mreuse-arg-regs  -msoft-float  -mstack-check\n+          -mstorem-bug  -muser-registers\n+          \n+          *ARM Options*\n+          -mapcs-frame  -mapcs-26  -mapcs-32\n+          -mlittle-endian  -mbig-endian  -mwords-little-endian\n+          -mshort-load-bytes  -mno-short-load-bytes\n+          -msoft-float  -mhard-float\n+          -mbsd  -mxopen  -mno-symrename\n+          \n+          *M32R/D Options*\n+          -mcode-model=MODEL TYPE  -msdata=SDATA TYPE\n+          -G NUM\n+          \n+          *M88K Options*\n+          -m88000  -m88100  -m88110  -mbig-pic\n+          -mcheck-zero-division  -mhandle-large-shift\n+          -midentify-revision  -mno-check-zero-division\n+          -mno-ocs-debug-info  -mno-ocs-frame-position\n+          -mno-optimize-arg-area  -mno-serialize-volatile\n+          -mno-underscores  -mocs-debug-info\n+          -mocs-frame-position  -moptimize-arg-area\n+          -mserialize-volatile  -mshort-data-NUM  -msvr3\n+          -msvr4  -mtrap-large-shift  -muse-div-instruction\n+          -mversion-03.00  -mwarn-passed-structs\n+          \n+          *RS/6000 and PowerPC Options*\n+          -mcpu=CPU TYPE\n+          -mtune=CPU TYPE\n+          -mpower  -mno-power  -mpower2  -mno-power2\n+          -mpowerpc  -mno-powerpc\n+          -mpowerpc-gpopt  -mno-powerpc-gpopt\n+          -mpowerpc-gfxopt  -mno-powerpc-gfxopt\n+          -mnew-mnemonics  -mno-new-mnemonics\n+          -mfull-toc   -mminimal-toc  -mno-fop-in-toc  -mno-sum-in-toc\n+          -mxl-call  -mno-xl-call  -mthreads  -mpe\n+          -msoft-float  -mhard-float  -mmultiple  -mno-multiple\n+          -mstring  -mno-string  -mupdate  -mno-update\n+          -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align\n+          -mstrict-align  -mno-strict-align  -mrelocatable\n+          -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib\n+          -mtoc  -mno-toc  -mtraceback  -mno-traceback\n+          -mlittle  -mlittle-endian  -mbig  -mbig-endian\n+          -mcall-aix  -mcall-sysv  -mprototype  -mno-prototype\n+          -msim  -mmvme  -mads  -myellowknife  -memb\n+          -msdata  -msdata=OPT  -G NUM\n+          \n+          *RT Options*\n+          -mcall-lib-mul  -mfp-arg-in-fpregs  -mfp-arg-in-gregs\n+          -mfull-fp-blocks  -mhc-struct-return  -min-line-mul\n+          -mminimum-fp-blocks  -mnohc-struct-return\n+          \n+          *MIPS Options*\n+          -mabicalls  -mcpu=CPU TYPE  -membedded-data\n+          -membedded-pic  -mfp32  -mfp64  -mgas  -mgp32  -mgp64\n+          -mgpopt  -mhalf-pic  -mhard-float  -mint64  -mips1\n+          -mips2  -mips3  -mlong64  -mlong-calls  -mmemcpy\n+          -mmips-as  -mmips-tfile  -mno-abicalls\n+          -mno-embedded-data  -mno-embedded-pic\n+          -mno-gpopt  -mno-long-calls\n+          -mno-memcpy  -mno-mips-tfile  -mno-rnames  -mno-stats\n+          -mrnames  -msoft-float\n+          -m4650  -msingle-float  -mmad\n+          -mstats  -EL  -EB  -G NUM  -nocpp\n+          \n+          *i386 Options*\n+          -m486  -m386  -mieee-fp  -mno-fancy-math-387\n+          -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib\n+          -mno-wide-multiply  -mrtd  -malign-double\n+          -mreg-alloc=LIST  -mregparm=NUM\n+          -malign-jumps=NUM  -malign-loops=NUM\n+          -malign-functions=NUM\n+          \n+          *HPPA Options*\n+          -mbig-switch  -mdisable-fpregs  -mdisable-indexing  -mfast-indirect-calls\n+          -mgas  -mjump-in-delay  -mlong-load-store  -mno-big-switch  -mno-disable-fpregs\n+          -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas\n+          -mno-jump-in-delay\n+          -mno-long-load-store\n+          -mno-portable-runtime  -mno-soft-float  -mno-space  -mno-space-regs\n+          -msoft-float\n+          -mpa-risc-1-0  -mpa-risc-1-1  -mportable-runtime\n+          -mschedule=LIST  -mspace  -mspace-regs\n+          \n+          *Intel 960 Options*\n+          -mCPU TYPE  -masm-compat  -mclean-linkage\n+          -mcode-align  -mcomplex-addr  -mleaf-procedures\n+          -mic-compat  -mic2.0-compat  -mic3.0-compat\n+          -mintel-asm  -mno-clean-linkage  -mno-code-align\n+          -mno-complex-addr  -mno-leaf-procedures\n+          -mno-old-align  -mno-strict-align  -mno-tail-call\n+          -mnumerics  -mold-align  -msoft-float  -mstrict-align\n+          -mtail-call\n+          \n+          *DEC Alpha Options*\n+          -mfp-regs  -mno-fp-regs\n+          -mno-soft-float  -msoft-float\n+          -mieee  -mieee-with-inexact  -mieee-conformant\n+          -mfp-trap-mode  -mfp-rounding-mode  -mtrap-precision\n+          -mbuild-constants\n+          \n+          *Clipper Options*\n+          -mc300  -mc400\n+          \n+          *H8/300 Options*\n+          -mrelax  -mh -ms -mint32  -malign-300\n+          \n+          *SH Options*\n+          -m1  -m2  -m3  -m3e  -mb  -ml  -mrelax\n+          \n+          *System V Options*\n+          -Qy  -Qn  -YP,PATHS  -Ym,DIR\n+          \n+          *V850 Options*\n+          -mlong-calls -mno-long-calls -mep -mno-ep\n+          -mprolog-function -mno-prolog-function -mspace\n+          -mtda=N -msda=N -mzda=N\n+          -mv850 -mbig-switch\n+\n+*Code Generation Options*\n+     *Note Options for Code Generation Conventions: Code Gen Options.\n+          -fcall-saved-REG  -fcall-used-REG\n+          -ffixed-REG  -finhibit-size-directive\n+          -fcheck-memory-usage  -fprefix-function-name\n+          -fno-common  -fno-ident  -fno-gnu-linker\n+          -fpcc-struct-return  -fpic  -fPIC\n+          -freg-struct-return  -fshared-data  -fshort-enums\n+          -fshort-double  -fvolatile  -fvolatile-global\n+          -fverbose-asm  -fpack-struct  -fstack-check  +e0  +e1\n+\n+* Menu:\n+\n+* Overall Options::     Controlling the kind of output:\n+                        an executable, object files, assembler files,\n+                        or preprocessed source.\n+* C Dialect Options::   Controlling the variant of C language compiled.\n+* C++ Dialect Options:: Variations on C++.\n+* Warning Options::     How picky should the compiler be?\n+* Debugging Options::   Symbol tables, measurements, and debugging dumps.\n+* Optimize Options::    How much optimization?\n+* Preprocessor Options:: Controlling header files and macro definitions.\n+                         Also, getting dependency information for Make.\n+* Assembler Options::   Passing options to the assembler.\n+* Link Options::        Specifying libraries and so on.\n+* Directory Options::   Where to find header files and libraries.\n+                        Where to find the compiler executable files.\n+* Target Options::      Running a cross-compiler, or an old version of GNU CC.\n+\n+\u001f\n+File: gcc.info,  Node: Overall Options,  Next: Invoking G++,  Prev: Option Summary,  Up: Invoking GCC\n+\n+Options Controlling the Kind of Output\n+======================================\n+\n+   Compilation can involve up to four stages: preprocessing, compilation\n+proper, assembly and linking, always in that order.  The first three\n+stages apply to an individual source file, and end by producing an\n+object file; linking combines all the object files (those newly\n+compiled, and those specified as input) into an executable file.\n+\n+   For any given input file, the file name suffix determines what kind\n+of compilation is done:\n+\n+`FILE.c'\n+     C source code which must be preprocessed.\n+\n+`FILE.i'\n+     C source code which should not be preprocessed.\n+\n+`FILE.ii'\n+     C++ source code which should not be preprocessed.\n+\n+`FILE.m'\n+     Objective-C source code.  Note that you must link with the library\n+     `libobjc.a' to make an Objective-C program work.\n+\n+`FILE.h'\n+     C header file (not to be compiled or linked).\n+\n+`FILE.cc'\n+`FILE.cxx'\n+`FILE.cpp'\n+`FILE.C'\n+     C++ source code which must be preprocessed.  Note that in `.cxx',\n+     the last two letters must both be literally `x'.  Likewise, `.C'\n+     refers to a literal capital C.\n+\n+`FILE.s'\n+     Assembler code.\n+\n+`FILE.S'\n+     Assembler code which must be preprocessed.\n+\n+`OTHER'\n+     An object file to be fed straight into linking.  Any file name\n+     with no recognized suffix is treated this way.\n+\n+   You can specify the input language explicitly with the `-x' option:\n+\n+`-x LANGUAGE'\n+     Specify explicitly the LANGUAGE for the following input files\n+     (rather than letting the compiler choose a default based on the\n+     file name suffix).  This option applies to all following input\n+     files until the next `-x' option.  Possible values for LANGUAGE\n+     are:\n+          c  objective-c  c++\n+          c-header  cpp-output  c++-cpp-output\n+          assembler  assembler-with-cpp\n+\n+`-x none'\n+     Turn off any specification of a language, so that subsequent files\n+     are handled according to their file name suffixes (as they are if\n+     `-x' has not been used at all).\n+\n+   If you only want some of the stages of compilation, you can use `-x'\n+(or filename suffixes) to tell `gcc' where to start, and one of the\n+options `-c', `-S', or `-E' to say where `gcc' is to stop.  Note that\n+some combinations (for example, `-x cpp-output -E' instruct `gcc' to do\n+nothing at all.\n+\n+`-c'\n+     Compile or assemble the source files, but do not link.  The linking\n+     stage simply is not done.  The ultimate output is in the form of an\n+     object file for each source file.\n+\n+     By default, the object file name for a source file is made by\n+     replacing the suffix `.c', `.i', `.s', etc., with `.o'.\n+\n+     Unrecognized input files, not requiring compilation or assembly,\n+     are ignored.\n+\n+`-S'\n+     Stop after the stage of compilation proper; do not assemble.  The\n+     output is in the form of an assembler code file for each\n+     non-assembler input file specified.\n+\n+     By default, the assembler file name for a source file is made by\n+     replacing the suffix `.c', `.i', etc., with `.s'.\n+\n+     Input files that don't require compilation are ignored.\n+\n+`-E'\n+     Stop after the preprocessing stage; do not run the compiler\n+     proper.  The output is in the form of preprocessed source code,\n+     which is sent to the standard output.\n+\n+     Input files which don't require preprocessing are ignored.\n+\n+`-o FILE'\n+     Place output in file FILE.  This applies regardless to whatever\n+     sort of output is being produced, whether it be an executable file,\n+     an object file, an assembler file or preprocessed C code.\n+\n+     Since only one output file can be specified, it does not make\n+     sense to use `-o' when compiling more than one input file, unless\n+     you are producing an executable file as output.\n+\n+     If `-o' is not specified, the default is to put an executable file\n+     in `a.out', the object file for `SOURCE.SUFFIX' in `SOURCE.o', its\n+     assembler file in `SOURCE.s', and all preprocessed C source on\n+     standard output.\n+\n+`-v'\n+     Print (on standard error output) the commands executed to run the\n+     stages of compilation.  Also print the version number of the\n+     compiler driver program and of the preprocessor and the compiler\n+     proper.\n+\n+`-pipe'\n+     Use pipes rather than temporary files for communication between the\n+     various stages of compilation.  This fails to work on some systems\n+     where the assembler is unable to read from a pipe; but the GNU\n+     assembler has no trouble.\n+\n+\u001f\n+File: gcc.info,  Node: Invoking G++,  Next: C Dialect Options,  Prev: Overall Options,  Up: Invoking GCC\n+\n+Compiling C++ Programs\n+======================\n+\n+   C++ source files conventionally use one of the suffixes `.C', `.cc',\n+`cpp', or `.cxx'; preprocessed C++ files use the suffix `.ii'.  GNU CC\n+recognizes files with these names and compiles them as C++ programs\n+even if you call the compiler the same way as for compiling C programs\n+(usually with the name `gcc').\n+\n+   However, C++ programs often require class libraries as well as a\n+compiler that understands the C++ language--and under some\n+circumstances, you might want to compile programs from standard input,\n+or otherwise without a suffix that flags them as C++ programs.  `g++'\n+is a program that calls GNU CC with the default language set to C++,\n+and automatically specifies linking against the GNU class library\n+libg++.  (1) On many systems, the script `g++' is also installed with\n+the name `c++'.\n+\n+   When you compile C++ programs, you may specify many of the same\n+command-line options that you use for compiling programs in any\n+language; or command-line options meaningful for C and related\n+languages; or options that are meaningful only for C++ programs.  *Note\n+Options Controlling C Dialect: C Dialect Options, for explanations of\n+options for languages related to C.  *Note Options Controlling C++\n+Dialect: C++ Dialect Options, for explanations of options that are\n+meaningful only for C++ programs.\n+\n+   ---------- Footnotes ----------\n+\n+   (1) Prior to release 2 of the compiler, there was a separate `g++'\n+compiler.  That version was based on GNU CC, but not integrated with\n+it.  Versions of `g++' with a `1.XX' version number--for example, `g++'\n+version 1.37 or 1.42--are much less reliable than the versions\n+integrated with GCC 2.  Moreover, combining G++ `1.XX' with a version 2\n+GCC will simply not work.\n+\n+\u001f\n+File: gcc.info,  Node: C Dialect Options,  Next: C++ Dialect Options,  Prev: Invoking G++,  Up: Invoking GCC\n+\n+Options Controlling C Dialect\n+=============================\n+\n+   The following options control the dialect of C (or languages derived\n+from C, such as C++ and Objective C) that the compiler accepts:\n+\n+`-ansi'\n+     Support all ANSI standard C programs.\n+\n+     This turns off certain features of GNU C that are incompatible\n+     with ANSI C, such as the `asm', `inline' and `typeof' keywords, and\n+     predefined macros such as `unix' and `vax' that identify the type\n+     of system you are using.  It also enables the undesirable and\n+     rarely used ANSI trigraph feature, and it disables recognition of\n+     C++ style `//' comments.\n+\n+     The alternate keywords `__asm__', `__extension__', `__inline__'\n+     and `__typeof__' continue to work despite `-ansi'.  You would not\n+     want to use them in an ANSI C program, of course, but it is useful\n+     to put them in header files that might be included in compilations\n+     done with `-ansi'.  Alternate predefined macros such as `__unix__'\n+     and `__vax__' are also available, with or without `-ansi'.\n+\n+     The `-ansi' option does not cause non-ANSI programs to be rejected\n+     gratuitously.  For that, `-pedantic' is required in addition to\n+     `-ansi'.  *Note Warning Options::.\n+\n+     The macro `__STRICT_ANSI__' is predefined when the `-ansi' option\n+     is used.  Some header files may notice this macro and refrain from\n+     declaring certain functions or defining certain macros that the\n+     ANSI standard doesn't call for; this is to avoid interfering with\n+     any programs that might use these names for other things.\n+\n+     The functions `alloca', `abort', `exit', and `_exit' are not\n+     builtin functions when `-ansi' is used.\n+\n+`-fno-asm'\n+     Do not recognize `asm', `inline' or `typeof' as a keyword, so that\n+     code can use these words as identifiers.  You can use the keywords\n+     `__asm__', `__inline__' and `__typeof__' instead.  `-ansi' implies\n+     `-fno-asm'.\n+\n+     In C++, this switch only affects the `typeof' keyword, since `asm'\n+     and `inline' are standard keywords.  You may want to use the\n+     `-fno-gnu-keywords' flag instead, as it also disables the other,\n+     C++-specific, extension keywords such as `headof'.\n+\n+`-fno-builtin'\n+     Don't recognize builtin functions that do not begin with two\n+     leading underscores.  Currently, the functions affected include\n+     `abort', `abs', `alloca', `cos', `exit', `fabs', `ffs', `labs',\n+     `memcmp', `memcpy', `sin', `sqrt', `strcmp', `strcpy', and\n+     `strlen'.\n+\n+     GCC normally generates special code to handle certain builtin\n+     functions more efficiently; for instance, calls to `alloca' may\n+     become single instructions that adjust the stack directly, and\n+     calls to `memcpy' may become inline copy loops.  The resulting\n+     code is often both smaller and faster, but since the function\n+     calls no longer appear as such, you cannot set a breakpoint on\n+     those calls, nor can you change the behavior of the functions by\n+     linking with a different library.\n+\n+     The `-ansi' option prevents `alloca' and `ffs' from being builtin\n+     functions, since these functions do not have an ANSI standard\n+     meaning.\n+\n+`-fhosted'\n+     Assert that compilation takes place in a hosted environment.  This\n+     implies `-fbuiltin'.  A hosted environment is one in which the\n+     entire standard library is available, and in which `main' has a\n+     return type of `int'.  Examples are nearly everything except a\n+     kernel.  This is equivalent to `-fno-freestanding'.\n+\n+`-ffreestanding'\n+     Assert that compilation takes place in a freestanding environment.\n+     This implies `-fno-builtin'.  A freestanding environment is one\n+     in which the standard library may not exist, and program startup\n+     may not necessarily be at `main'.  The most obvious example is an\n+     OS kernel.  This is equivalent to `-fno-hosted'.\n+\n+`-trigraphs'\n+     Support ANSI C trigraphs.  You don't want to know about this\n+     brain-damage.  The `-ansi' option implies `-trigraphs'.\n+\n+`-traditional'\n+     Attempt to support some aspects of traditional C compilers.\n+     Specifically:\n+\n+        * All `extern' declarations take effect globally even if they\n+          are written inside of a function definition.  This includes\n+          implicit declarations of functions.\n+\n+        * The newer keywords `typeof', `inline', `signed', `const' and\n+          `volatile' are not recognized.  (You can still use the\n+          alternative keywords such as `__typeof__', `__inline__', and\n+          so on.)\n+\n+        * Comparisons between pointers and integers are always allowed.\n+\n+        * Integer types `unsigned short' and `unsigned char' promote to\n+          `unsigned int'.\n+\n+        * Out-of-range floating point literals are not an error.\n+\n+        * Certain constructs which ANSI regards as a single invalid\n+          preprocessing number, such as `0xe-0xd', are treated as\n+          expressions instead.\n+\n+        * String \"constants\" are not necessarily constant; they are\n+          stored in writable space, and identical looking constants are\n+          allocated separately.  (This is the same as the effect of\n+          `-fwritable-strings'.)\n+\n+        * All automatic variables not declared `register' are preserved\n+          by `longjmp'.  Ordinarily, GNU C follows ANSI C: automatic\n+          variables not declared `volatile' may be clobbered.\n+\n+        * The character escape sequences `\\x' and `\\a' evaluate as the\n+          literal characters `x' and `a' respectively.  Without\n+          `-traditional', `\\x' is a prefix for the hexadecimal\n+          representation of a character, and `\\a' produces a bell.\n+\n+        * In C++ programs, assignment to `this' is permitted with\n+          `-traditional'.  (The option `-fthis-is-variable' also has\n+          this effect.)\n+\n+     You may wish to use `-fno-builtin' as well as `-traditional' if\n+     your program uses names that are normally GNU C builtin functions\n+     for other purposes of its own.\n+\n+     You cannot use `-traditional' if you include any header files that\n+     rely on ANSI C features.  Some vendors are starting to ship\n+     systems with ANSI C header files and you cannot use `-traditional'\n+     on such systems to compile files that include any system headers.\n+\n+     The `-traditional' option also enables the `-traditional-cpp'\n+     option, which is described next.\n+\n+`-traditional-cpp'\n+     Attempt to support some aspects of traditional C preprocessors.\n+     Specifically:\n+\n+        * Comments convert to nothing at all, rather than to a space.\n+          This allows traditional token concatenation.\n+\n+        * In a preprocessing directive, the `#' symbol must appear as\n+          the first character of a line.\n+\n+        * Macro arguments are recognized within string constants in a\n+          macro definition (and their values are stringified, though\n+          without additional quote marks, when they appear in such a\n+          context).  The preprocessor always considers a string\n+          constant to end at a newline.\n+\n+        * The predefined macro `__STDC__' is not defined when you use\n+          `-traditional', but `__GNUC__' is (since the GNU extensions\n+          which `__GNUC__' indicates are not affected by\n+          `-traditional').  If you need to write header files that work\n+          differently depending on whether `-traditional' is in use, by\n+          testing both of these predefined macros you can distinguish\n+          four situations: GNU C, traditional GNU C, other ANSI C\n+          compilers, and other old C compilers.  The predefined macro\n+          `__STDC_VERSION__' is also not defined when you use\n+          `-traditional'.  *Note Standard Predefined Macros:\n+          (cpp.info)Standard Predefined, for more discussion of these\n+          and other predefined macros.\n+\n+        * The preprocessor considers a string constant to end at a\n+          newline (unless the newline is escaped with `\\').  (Without\n+          `-traditional', string constants can contain the newline\n+          character as typed.)\n+\n+`-fcond-mismatch'\n+     Allow conditional expressions with mismatched types in the second\n+     and third arguments.  The value of such an expression is void.\n+\n+`-funsigned-char'\n+     Let the type `char' be unsigned, like `unsigned char'.\n+\n+     Each kind of machine has a default for what `char' should be.  It\n+     is either like `unsigned char' by default or like `signed char' by\n+     default.\n+\n+     Ideally, a portable program should always use `signed char' or\n+     `unsigned char' when it depends on the signedness of an object.\n+     But many programs have been written to use plain `char' and expect\n+     it to be signed, or expect it to be unsigned, depending on the\n+     machines they were written for.  This option, and its inverse, let\n+     you make such a program work with the opposite default.\n+\n+     The type `char' is always a distinct type from each of `signed\n+     char' or `unsigned char', even though its behavior is always just\n+     like one of those two.\n+\n+`-fsigned-char'\n+     Let the type `char' be signed, like `signed char'.\n+\n+     Note that this is equivalent to `-fno-unsigned-char', which is the\n+     negative form of `-funsigned-char'.  Likewise, the option\n+     `-fno-signed-char' is equivalent to `-funsigned-char'.\n+\n+     You may wish to use `-fno-builtin' as well as `-traditional' if\n+     your program uses names that are normally GNU C builtin functions\n+     for other purposes of its own.\n+\n+     You cannot use `-traditional' if you include any header files that\n+     rely on ANSI C features.  Some vendors are starting to ship\n+     systems with ANSI C header files and you cannot use `-traditional'\n+     on such systems to compile files that include any system headers.\n+\n+`-fsigned-bitfields'\n+`-funsigned-bitfields'\n+`-fno-signed-bitfields'\n+`-fno-unsigned-bitfields'\n+     These options control whether a bitfield is signed or unsigned,\n+     when the declaration does not use either `signed' or `unsigned'.\n+     By default, such a bitfield is signed, because this is consistent:\n+     the basic integer types such as `int' are signed types.\n+\n+     However, when `-traditional' is used, bitfields are all unsigned\n+     no matter what.\n+\n+`-fwritable-strings'\n+     Store string constants in the writable data segment and don't\n+     uniquize them.  This is for compatibility with old programs which\n+     assume they can write into string constants.  The option\n+     `-traditional' also has this effect.\n+\n+     Writing into string constants is a very bad idea; \"constants\"\n+     should be constant.\n+\n+`-fallow-single-precision'\n+     Do not promote single precision math operations to double\n+     precision, even when compiling with `-traditional'.\n+\n+     Traditional K&R C promotes all floating point operations to double\n+     precision, regardless of the sizes of the operands.   On the\n+     architecture for which you are compiling, single precision may be\n+     faster than double precision.   If you must use `-traditional',\n+     but want to use single precision operations when the operands are\n+     single precision, use this option.   This option has no effect\n+     when compiling with ANSI or GNU C conventions (the default).\n+\n+\u001f\n+File: gcc.info,  Node: C++ Dialect Options,  Next: Warning Options,  Prev: C Dialect Options,  Up: Invoking GCC\n+\n+Options Controlling C++ Dialect\n+===============================\n+\n+   This section describes the command-line options that are only\n+meaningful for C++ programs; but you can also use most of the GNU\n+compiler options regardless of what language your program is in.  For\n+example, you might compile a file `firstClass.C' like this:\n+\n+     g++ -g -felide-constructors -O -c firstClass.C\n+\n+In this example, only `-felide-constructors' is an option meant only\n+for C++ programs; you can use the other options with any language\n+supported by GNU CC.\n+\n+   Here is a list of options that are *only* for compiling C++ programs:\n+\n+`-fno-access-control'\n+     Turn off all access checking.  This switch is mainly useful for\n+     working around bugs in the access control code.\n+\n+`-fall-virtual'\n+     Treat all possible member functions as virtual, implicitly.  All\n+     member functions (except for constructor functions and `new' or\n+     `delete' member operators) are treated as virtual functions of the\n+     class where they appear.\n+\n+     This does not mean that all calls to these member functions will\n+     be made through the internal table of virtual functions.  Under\n+     some circumstances, the compiler can determine that a call to a\n+     given virtual function can be made directly; in these cases the\n+     calls are direct in any case.\n+\n+`-fcheck-new'\n+     Check that the pointer returned by `operator new' is non-null\n+     before attempting to modify the storage allocated.  The current\n+     Working Paper requires that `operator new' never return a null\n+     pointer, so this check is normally unnecessary.\n+\n+`-fconserve-space'\n+     Put uninitialized or runtime-initialized global variables into the\n+     common segment, as C does.  This saves space in the executable at\n+     the cost of not diagnosing duplicate definitions.  If you compile\n+     with this flag and your program mysteriously crashes after\n+     `main()' has completed, you may have an object that is being\n+     destroyed twice because two definitions were merged.\n+\n+`-fdollars-in-identifiers'\n+     Accept `$' in identifiers.  You can also explicitly prohibit use of\n+     `$' with the option `-fno-dollars-in-identifiers'.  (GNU C allows\n+     `$' by default on most target systems, but there are a few\n+     exceptions.)  Traditional C allowed the character `$' to form part\n+     of identifiers.  However, ANSI C and C++ forbid `$' in identifiers.\n+\n+`-fenum-int-equiv'\n+     Anachronistically permit implicit conversion of `int' to\n+     enumeration types.  Current C++ allows conversion of `enum' to\n+     `int', but not the other way around.\n+\n+`-fexternal-templates'\n+     Cause template instantiations to obey `#pragma interface' and\n+     `implementation'; template instances are emitted or not according\n+     to the location of the template definition.  *Note Template\n+     Instantiation::, for more information.\n+\n+     This option is deprecated.\n+\n+`-falt-external-templates'\n+     Similar to -fexternal-templates, but template instances are\n+     emitted or not according to the place where they are first\n+     instantiated.  *Note Template Instantiation::, for more\n+     information.\n+\n+     This option is deprecated.\n+\n+`-ffor-scope'\n+`-fno-for-scope'\n+     If -ffor-scope is specified, the scope of variables declared in a\n+     for-init-statement is limited to the `for' loop itself, as\n+     specified by the draft C++ standard.  If -fno-for-scope is\n+     specified, the scope of variables declared in a for-init-statement\n+     extends to the end of the enclosing scope, as was the case in old\n+     versions of gcc, and other (traditional) implementations of C++.\n+\n+     The default if neither flag is given to follow the standard, but\n+     to allow and give a warning for old-style code that would\n+     otherwise be invalid, or have different behavior.\n+\n+`-fno-gnu-keywords'\n+     Do not recognize `classof', `headof', `signature', `sigof' or\n+     `typeof' as a keyword, so that code can use these words as\n+     identifiers.  You can use the keywords `__classof__',\n+     `__headof__', `__signature__', `__sigof__', and `__typeof__'\n+     instead.  `-ansi' implies `-fno-gnu-keywords'.\n+\n+`-fguiding-decls'\n+     Treat a function declaration with the same type as a potential\n+     function template instantiation as though it declares that\n+     instantiation, not a normal function.  If a definition is given\n+     for the function later in the translation unit (or another\n+     translation unit if the target supports weak symbols), that\n+     definition will be used; otherwise the template will be\n+     instantiated.  This behavior reflects the C++ language prior to\n+     September 1996, when guiding declarations were removed.\n+\n+     This option implies `-fname-mangling-version-0', and will not work\n+     with other name mangling versions.\n+\n+`-fno-implicit-templates'\n+     Never emit code for templates which are instantiated implicitly\n+     (i.e. by use); only emit code for explicit instantiations.  *Note\n+     Template Instantiation::, for more information.\n+\n+`-fhandle-signatures'\n+     Recognize the `signature' and `sigof' keywords for specifying\n+     abstract types.  The default (`-fno-handle-signatures') is not to\n+     recognize them.  *Note Type Abstraction using Signatures: C++\n+     Signatures.\n+\n+`-fhuge-objects'\n+     Support virtual function calls for objects that exceed the size\n+     representable by a `short int'.  Users should not use this flag by\n+     default; if you need to use it, the compiler will tell you so.  If\n+     you compile any of your code with this flag, you must compile\n+     *all* of your code with this flag (including libg++, if you use\n+     it).\n+\n+     This flag is not useful when compiling with -fvtable-thunks.\n+\n+`-fno-implement-inlines'\n+     To save space, do not emit out-of-line copies of inline functions\n+     controlled by `#pragma implementation'.  This will cause linker\n+     errors if these functions are not inlined everywhere they are\n+     called.\n+\n+`-fmemoize-lookups'\n+`-fsave-memoized'\n+     Use heuristics to compile faster.  These heuristics are not\n+     enabled by default, since they are only effective for certain\n+     input files.  Other input files compile more slowly.\n+\n+     The first time the compiler must build a call to a member function\n+     (or reference to a data member), it must (1) determine whether the\n+     class implements member functions of that name; (2) resolve which\n+     member function to call (which involves figuring out what sorts of\n+     type conversions need to be made); and (3) check the visibility of\n+     the member function to the caller.  All of this adds up to slower\n+     compilation.  Normally, the second time a call is made to that\n+     member function (or reference to that data member), it must go\n+     through the same lengthy process again.  This means that code like\n+     this:\n+\n+          cout << \"This \" << p << \" has \" << n << \" legs.\\n\";\n+\n+     makes six passes through all three steps.  By using a software\n+     cache, a \"hit\" significantly reduces this cost.  Unfortunately,\n+     using the cache introduces another layer of mechanisms which must\n+     be implemented, and so incurs its own overhead.\n+     `-fmemoize-lookups' enables the software cache.\n+\n+     Because access privileges (visibility) to members and member\n+     functions may differ from one function context to the next, G++\n+     may need to flush the cache.  With the `-fmemoize-lookups' flag,\n+     the cache is flushed after every function that is compiled.  The\n+     `-fsave-memoized' flag enables the same software cache, but when\n+     the compiler determines that the context of the last function\n+     compiled would yield the same access privileges of the next\n+     function to compile, it preserves the cache.  This is most helpful\n+     when defining many member functions for the same class: with the\n+     exception of member functions which are friends of other classes,\n+     each member function has exactly the same access privileges as\n+     every other, and the cache need not be flushed.\n+\n+     The code that implements these flags has rotted; you should\n+     probably avoid using them.\n+\n+`-fstrict-prototype'\n+     Within an `extern \"C\"' linkage specification, treat a function\n+     declaration with no arguments, such as `int foo ();', as declaring\n+     the function to take no arguments.  Normally, such a declaration\n+     means that the function `foo' can take any combination of\n+     arguments, as in C.  `-pedantic' implies `-fstrict-prototype'\n+     unless overridden with `-fno-strict-prototype'.\n+\n+     This flag no longer affects declarations with C++ linkage.\n+\n+`-fname-mangling-version-N'\n+     Control the way in which names are mangled.  Version 0 is\n+     compatible with versions of g++ before 2.8.  Version 1 is the\n+     default.  Version 1 will allow correct mangling of function\n+     templates.  For example, version 0 mangling does not mangle\n+     foo<int, double> and foo<int, char> given this declaration:\n+\n+          template <class T, class U> void foo(T t);\n+\n+`-fno-nonnull-objects'\n+     Don't assume that a reference is initialized to refer to a valid\n+     object.  Although the current C++ Working Paper prohibits null\n+     references, some old code may rely on them, and you can use\n+     `-fno-nonnull-objects' to turn on checking.\n+\n+     At the moment, the compiler only does this checking for\n+     conversions to virtual base classes.\n+\n+`-foperator-names'\n+     Recognize the operator name keywords `and', `bitand', `bitor',\n+     `compl', `not', `or' and `xor' as synonyms for the symbols they\n+     refer to.  `-ansi' implies `-foperator-names'.\n+\n+`-fthis-is-variable'\n+     Permit assignment to `this'.  The incorporation of user-defined\n+     free store management into C++ has made assignment to `this' an\n+     anachronism.  Therefore, by default it is invalid to assign to\n+     `this' within a class member function; that is, GNU C++ treats\n+     `this' in a member function of class `X' as a non-lvalue of type\n+     `X *'.  However, for backwards compatibility, you can make it\n+     valid with `-fthis-is-variable'.\n+\n+`-fvtable-thunks'\n+     Use `thunks' to implement the virtual function dispatch table\n+     (`vtable').  The traditional (cfront-style) approach to\n+     implementing vtables was to store a pointer to the function and two\n+     offsets for adjusting the `this' pointer at the call site.  Newer\n+     implementations store a single pointer to a `thunk' function which\n+     does any necessary adjustment and then calls the target function.\n+\n+     This option also enables a heuristic for controlling emission of\n+     vtables; if a class has any non-inline virtual functions, the\n+     vtable will be emitted in the translation unit containing the\n+     first one of those.\n+\n+`-ftemplate-depth-N'\n+     Set the maximum instantiation depth for template classes to N.  A\n+     limit on the template instantiation depth is needed to detect\n+     endless recursions during template class instantiation. ANSI/ISO\n+     C++ conforming programs must not rely on a maximum depth greater\n+     than 17.\n+\n+`-nostdinc++'\n+     Do not search for header files in the standard directories\n+     specific to C++, but do still search the other standard\n+     directories.  (This option is used when building libg++.)\n+\n+`-traditional'\n+     For C++ programs (in addition to the effects that apply to both C\n+     and C++), this has the same effect as `-fthis-is-variable'.  *Note\n+     Options Controlling C Dialect: C Dialect Options.\n+\n+   In addition, these optimization, warning, and code generation options\n+have meanings only for C++ programs:\n+\n+`-fno-default-inline'\n+     Do not assume `inline' for functions defined inside a class scope.\n+     *Note Options That Control Optimization: Optimize Options.\n+\n+`-Woverloaded-virtual'\n+`-Wtemplate-debugging'\n+     Warnings that apply only to C++ programs.  *Note Options to\n+     Request or Suppress Warnings: Warning Options.\n+\n+`-Weffc++'\n+     Warn about violation of some style rules from Effective C++ by\n+     Scott Myers.\n+\n+`+eN'\n+     Control how virtual function definitions are used, in a fashion\n+     compatible with `cfront' 1.x.  *Note Options for Code Generation\n+     Conventions: Code Gen Options.\n+"}, {"sha": "a7a7c0cfa119ecafdf11e476e9bc4ee98dffa22e", "filename": "gcc/gcc.info-10", "status": "added", "additions": 1079, "deletions": 0, "changes": 1079, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-10?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1079 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Inline,  Next: Extended Asm,  Prev: Alignment,  Up: C Extensions\n+\n+An Inline Function is As Fast As a Macro\n+========================================\n+\n+   By declaring a function `inline', you can direct GNU CC to integrate\n+that function's code into the code for its callers.  This makes\n+execution faster by eliminating the function-call overhead; in\n+addition, if any of the actual argument values are constant, their known\n+values may permit simplifications at compile time so that not all of the\n+inline function's code needs to be included.  The effect on code size is\n+less predictable; object code may be larger or smaller with function\n+inlining, depending on the particular case.  Inlining of functions is an\n+optimization and it really \"works\" only in optimizing compilation.  If\n+you don't use `-O', no function is really inline.\n+\n+   To declare a function inline, use the `inline' keyword in its\n+declaration, like this:\n+\n+     inline int\n+     inc (int *a)\n+     {\n+       (*a)++;\n+     }\n+\n+   (If you are writing a header file to be included in ANSI C programs,\n+write `__inline__' instead of `inline'.  *Note Alternate Keywords::.)\n+\n+   You can also make all \"simple enough\" functions inline with the\n+option `-finline-functions'.  Note that certain usages in a function\n+definition can make it unsuitable for inline substitution.\n+\n+   Note that in C and Objective C, unlike C++, the `inline' keyword\n+does not affect the linkage of the function.\n+\n+   GNU CC automatically inlines member functions defined within the\n+class body of C++ programs even if they are not explicitly declared\n+`inline'.  (You can override this with `-fno-default-inline'; *note\n+Options Controlling C++ Dialect: C++ Dialect Options..)\n+\n+   When a function is both inline and `static', if all calls to the\n+function are integrated into the caller, and the function's address is\n+never used, then the function's own assembler code is never referenced.\n+In this case, GNU CC does not actually output assembler code for the\n+function, unless you specify the option `-fkeep-inline-functions'.\n+Some calls cannot be integrated for various reasons (in particular,\n+calls that precede the function's definition cannot be integrated, and\n+neither can recursive calls within the definition).  If there is a\n+nonintegrated call, then the function is compiled to assembler code as\n+usual.  The function must also be compiled as usual if the program\n+refers to its address, because that can't be inlined.\n+\n+   When an inline function is not `static', then the compiler must\n+assume that there may be calls from other source files; since a global\n+symbol can be defined only once in any program, the function must not\n+be defined in the other source files, so the calls therein cannot be\n+integrated.  Therefore, a non-`static' inline function is always\n+compiled on its own in the usual fashion.\n+\n+   If you specify both `inline' and `extern' in the function\n+definition, then the definition is used only for inlining.  In no case\n+is the function compiled on its own, not even if you refer to its\n+address explicitly.  Such an address becomes an external reference, as\n+if you had only declared the function, and had not defined it.\n+\n+   This combination of `inline' and `extern' has almost the effect of a\n+macro.  The way to use it is to put a function definition in a header\n+file with these keywords, and put another copy of the definition\n+(lacking `inline' and `extern') in a library file.  The definition in\n+the header file will cause most calls to the function to be inlined.\n+If any uses of the function remain, they will refer to the single copy\n+in the library.\n+\n+   GNU C does not inline any functions when not optimizing.  It is not\n+clear whether it is better to inline or not, in this case, but we found\n+that a correct implementation when not optimizing was difficult.  So we\n+did the easy thing, and turned it off.\n+\n+\u001f\n+File: gcc.info,  Node: Extended Asm,  Next: Asm Labels,  Prev: Inline,  Up: C Extensions\n+\n+Assembler Instructions with C Expression Operands\n+=================================================\n+\n+   In an assembler instruction using `asm', you can now specify the\n+operands of the instruction using C expressions.  This means no more\n+guessing which registers or memory locations will contain the data you\n+want to use.\n+\n+   You must specify an assembler instruction template much like what\n+appears in a machine description, plus an operand constraint string for\n+each operand.\n+\n+   For example, here is how to use the 68881's `fsinx' instruction:\n+\n+     asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));\n+\n+Here `angle' is the C expression for the input operand while `result'\n+is that of the output operand.  Each has `\"f\"' as its operand\n+constraint, saying that a floating point register is required.  The `='\n+in `=f' indicates that the operand is an output; all output operands'\n+constraints must use `='.  The constraints use the same language used\n+in the machine description (*note Constraints::.).\n+\n+   Each operand is described by an operand-constraint string followed\n+by the C expression in parentheses.  A colon separates the assembler\n+template from the first output operand, and another separates the last\n+output operand from the first input, if any.  Commas separate output\n+operands and separate inputs.  The total number of operands is limited\n+to ten or to the maximum number of operands in any instruction pattern\n+in the machine description, whichever is greater.\n+\n+   If there are no output operands, and there are input operands, then\n+there must be two consecutive colons surrounding the place where the\n+output operands would go.\n+\n+   Output operand expressions must be lvalues; the compiler can check\n+this.  The input operands need not be lvalues.  The compiler cannot\n+check whether the operands have data types that are reasonable for the\n+instruction being executed.  It does not parse the assembler\n+instruction template and does not know what it means, or whether it is\n+valid assembler input.  The extended `asm' feature is most often used\n+for machine instructions that the compiler itself does not know exist.\n+If the output expression cannot be directly addressed (for example, it\n+is a bit field), your constraint must allow a register.  In that case,\n+GNU CC will use the register as the output of the `asm', and then store\n+that register into the output.\n+\n+   The ordinary output operands must be write-only; GNU CC will assume\n+that the values in these operands before the instruction are dead and\n+need not be generated.  Extended asm supports input-output or\n+read-write operands.  Use the constraint character `+' to indicate such\n+an operand and list it with the output operands.\n+\n+   When the constraints for the read-write operand (or the operand in\n+which only some of the bits are to be changed) allows a register, you\n+may, as an alternative, logically split its function into two separate\n+operands, one input operand and one write-only output operand.  The\n+connection between them is expressed by constraints which say they need\n+to be in the same location when the instruction executes.  You can use\n+the same C expression for both operands, or different expressions.  For\n+example, here we write the (fictitious) `combine' instruction with\n+`bar' as its read-only source operand and `foo' as its read-write\n+destination:\n+\n+     asm (\"combine %2,%0\" : \"=r\" (foo) : \"0\" (foo), \"g\" (bar));\n+\n+The constraint `\"0\"' for operand 1 says that it must occupy the same\n+location as operand 0.  A digit in constraint is allowed only in an\n+input operand, and it must refer to an output operand.\n+\n+   Only a digit in the constraint can guarantee that one operand will\n+be in the same place as another.  The mere fact that `foo' is the value\n+of both operands is not enough to guarantee that they will be in the\n+same place in the generated assembler code.  The following would not\n+work:\n+\n+     asm (\"combine %2,%0\" : \"=r\" (foo) : \"r\" (foo), \"g\" (bar));\n+\n+   Various optimizations or reloading could cause operands 0 and 1 to\n+be in different registers; GNU CC knows no reason not to do so.  For\n+example, the compiler might find a copy of the value of `foo' in one\n+register and use it for operand 1, but generate the output operand 0 in\n+a different register (copying it afterward to `foo''s own address).  Of\n+course, since the register for operand 1 is not even mentioned in the\n+assembler code, the result will not work, but GNU CC can't tell that.\n+\n+   Some instructions clobber specific hard registers.  To describe\n+this, write a third colon after the input operands, followed by the\n+names of the clobbered hard registers (given as strings).  Here is a\n+realistic example for the Vax:\n+\n+     asm volatile (\"movc3 %0,%1,%2\"\n+                   : /* no outputs */\n+                   : \"g\" (from), \"g\" (to), \"g\" (count)\n+                   : \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\");\n+\n+   If you refer to a particular hardware register from the assembler\n+code, then you will probably have to list the register after the third\n+colon to tell the compiler that the register's value is modified.  In\n+many assemblers, the register names begin with `%'; to produce one `%'\n+in the assembler code, you must write `%%' in the input.\n+\n+   If your assembler instruction can alter the condition code register,\n+add `cc' to the list of clobbered registers.  GNU CC on some machines\n+represents the condition codes as a specific hardware register; `cc'\n+serves to name this register.  On other machines, the condition code is\n+handled differently, and specifying `cc' has no effect.  But it is\n+valid no matter what the machine.\n+\n+   If your assembler instruction modifies memory in an unpredictable\n+fashion, add `memory' to the list of clobbered registers.  This will\n+cause GNU CC to not keep memory values cached in registers across the\n+assembler instruction.\n+\n+   You can put multiple assembler instructions together in a single\n+`asm' template, separated either with newlines (written as `\\n') or with\n+semicolons if the assembler allows such semicolons.  The GNU assembler\n+allows semicolons and all Unix assemblers seem to do so.  The input\n+operands are guaranteed not to use any of the clobbered registers, and\n+neither will the output operands' addresses, so you can read and write\n+the clobbered registers as many times as you like.  Here is an example\n+of multiple instructions in a template; it assumes that the subroutine\n+`_foo' accepts arguments in registers 9 and 10:\n+\n+     asm (\"movl %0,r9;movl %1,r10;call _foo\"\n+          : /* no outputs */\n+          : \"g\" (from), \"g\" (to)\n+          : \"r9\", \"r10\");\n+\n+   Unless an output operand has the `&' constraint modifier, GNU CC may\n+allocate it in the same register as an unrelated input operand, on the\n+assumption that the inputs are consumed before the outputs are produced.\n+This assumption may be false if the assembler code actually consists of\n+more than one instruction.  In such a case, use `&' for each output\n+operand that may not overlap an input.  *Note Modifiers::.\n+\n+   If you want to test the condition code produced by an assembler\n+instruction, you must include a branch and a label in the `asm'\n+construct, as follows:\n+\n+     asm (\"clr %0;frob %1;beq 0f;mov #1,%0;0:\"\n+          : \"g\" (result)\n+          : \"g\" (input));\n+\n+This assumes your assembler supports local labels, as the GNU assembler\n+and most Unix assemblers do.\n+\n+   Speaking of labels, jumps from one `asm' to another are not\n+supported.  The compiler's optimizers do not know about these jumps,\n+and therefore they cannot take account of them when deciding how to\n+optimize.\n+\n+   Usually the most convenient way to use these `asm' instructions is to\n+encapsulate them in macros that look like functions.  For example,\n+\n+     #define sin(x)       \\\n+     ({ double __value, __arg = (x);   \\\n+        asm (\"fsinx %1,%0\": \"=f\" (__value): \"f\" (__arg));  \\\n+        __value; })\n+\n+Here the variable `__arg' is used to make sure that the instruction\n+operates on a proper `double' value, and to accept only those arguments\n+`x' which can convert automatically to a `double'.\n+\n+   Another way to make sure the instruction operates on the correct\n+data type is to use a cast in the `asm'.  This is different from using a\n+variable `__arg' in that it converts more different types.  For\n+example, if the desired type were `int', casting the argument to `int'\n+would accept a pointer with no complaint, while assigning the argument\n+to an `int' variable named `__arg' would warn about using a pointer\n+unless the caller explicitly casts it.\n+\n+   If an `asm' has output operands, GNU CC assumes for optimization\n+purposes that the instruction has no side effects except to change the\n+output operands.  This does not mean that instructions with a side\n+effect cannot be used, but you must be careful, because the compiler\n+may eliminate them if the output operands aren't used, or move them out\n+of loops, or replace two with one if they constitute a common\n+subexpression.  Also, if your instruction does have a side effect on a\n+variable that otherwise appears not to change, the old value of the\n+variable may be reused later if it happens to be found in a register.\n+\n+   You can prevent an `asm' instruction from being deleted, moved\n+significantly, or combined, by writing the keyword `volatile' after the\n+`asm'.  For example:\n+\n+     #define set_priority(x)  \\\n+     asm volatile (\"set_priority %0\": /* no outputs */ : \"g\" (x))\n+\n+An instruction without output operands will not be deleted or moved\n+significantly, regardless, unless it is unreachable.\n+\n+   Note that even a volatile `asm' instruction can be moved in ways\n+that appear insignificant to the compiler, such as across jump\n+instructions.  You can't expect a sequence of volatile `asm'\n+instructions to remain perfectly consecutive.  If you want consecutive\n+output, use a single `asm'.\n+\n+   It is a natural idea to look for a way to give access to the\n+condition code left by the assembler instruction.  However, when we\n+attempted to implement this, we found no way to make it work reliably.\n+The problem is that output operands might need reloading, which would\n+result in additional following \"store\" instructions.  On most machines,\n+these instructions would alter the condition code before there was time\n+to test it.  This problem doesn't arise for ordinary \"test\" and\n+\"compare\" instructions because they don't have any output operands.\n+\n+   If you are writing a header file that should be includable in ANSI C\n+programs, write `__asm__' instead of `asm'.  *Note Alternate Keywords::.\n+\n+\u001f\n+File: gcc.info,  Node: Asm Labels,  Next: Explicit Reg Vars,  Prev: Extended Asm,  Up: C Extensions\n+\n+Controlling Names Used in Assembler Code\n+========================================\n+\n+   You can specify the name to be used in the assembler code for a C\n+function or variable by writing the `asm' (or `__asm__') keyword after\n+the declarator as follows:\n+\n+     int foo asm (\"myfoo\") = 2;\n+\n+This specifies that the name to be used for the variable `foo' in the\n+assembler code should be `myfoo' rather than the usual `_foo'.\n+\n+   On systems where an underscore is normally prepended to the name of\n+a C function or variable, this feature allows you to define names for\n+the linker that do not start with an underscore.\n+\n+   You cannot use `asm' in this way in a function *definition*; but you\n+can get the same effect by writing a declaration for the function\n+before its definition and putting `asm' there, like this:\n+\n+     extern func () asm (\"FUNC\");\n+     \n+     func (x, y)\n+          int x, y;\n+     ...\n+\n+   It is up to you to make sure that the assembler names you choose do\n+not conflict with any other assembler symbols.  Also, you must not use a\n+register name; that would produce completely invalid assembler code.\n+GNU CC does not as yet have the ability to store static variables in\n+registers.  Perhaps that will be added.\n+\n+\u001f\n+File: gcc.info,  Node: Explicit Reg Vars,  Next: Alternate Keywords,  Prev: Asm Labels,  Up: C Extensions\n+\n+Variables in Specified Registers\n+================================\n+\n+   GNU C allows you to put a few global variables into specified\n+hardware registers.  You can also specify the register in which an\n+ordinary register variable should be allocated.\n+\n+   * Global register variables reserve registers throughout the program.\n+     This may be useful in programs such as programming language\n+     interpreters which have a couple of global variables that are\n+     accessed very often.\n+\n+   * Local register variables in specific registers do not reserve the\n+     registers.  The compiler's data flow analysis is capable of\n+     determining where the specified registers contain live values, and\n+     where they are available for other uses.\n+\n+     These local variables are sometimes convenient for use with the\n+     extended `asm' feature (*note Extended Asm::.), if you want to\n+     write one output of the assembler instruction directly into a\n+     particular register.  (This will work provided the register you\n+     specify fits the constraints specified for that operand in the\n+     `asm'.)\n+\n+* Menu:\n+\n+* Global Reg Vars::\n+* Local Reg Vars::\n+\n+\u001f\n+File: gcc.info,  Node: Global Reg Vars,  Next: Local Reg Vars,  Up: Explicit Reg Vars\n+\n+Defining Global Register Variables\n+----------------------------------\n+\n+   You can define a global register variable in GNU C like this:\n+\n+     register int *foo asm (\"a5\");\n+\n+Here `a5' is the name of the register which should be used.  Choose a\n+register which is normally saved and restored by function calls on your\n+machine, so that library routines will not clobber it.\n+\n+   Naturally the register name is cpu-dependent, so you would need to\n+conditionalize your program according to cpu type.  The register `a5'\n+would be a good choice on a 68000 for a variable of pointer type.  On\n+machines with register windows, be sure to choose a \"global\" register\n+that is not affected magically by the function call mechanism.\n+\n+   In addition, operating systems on one type of cpu may differ in how\n+they name the registers; then you would need additional conditionals.\n+For example, some 68000 operating systems call this register `%a5'.\n+\n+   Eventually there may be a way of asking the compiler to choose a\n+register automatically, but first we need to figure out how it should\n+choose and how to enable you to guide the choice.  No solution is\n+evident.\n+\n+   Defining a global register variable in a certain register reserves\n+that register entirely for this use, at least within the current\n+compilation.  The register will not be allocated for any other purpose\n+in the functions in the current compilation.  The register will not be\n+saved and restored by these functions.  Stores into this register are\n+never deleted even if they would appear to be dead, but references may\n+be deleted or moved or simplified.\n+\n+   It is not safe to access the global register variables from signal\n+handlers, or from more than one thread of control, because the system\n+library routines may temporarily use the register for other things\n+(unless you recompile them specially for the task at hand).\n+\n+   It is not safe for one function that uses a global register variable\n+to call another such function `foo' by way of a third function `lose'\n+that was compiled without knowledge of this variable (i.e. in a\n+different source file in which the variable wasn't declared).  This is\n+because `lose' might save the register and put some other value there.\n+For example, you can't expect a global register variable to be\n+available in the comparison-function that you pass to `qsort', since\n+`qsort' might have put something else in that register.  (If you are\n+prepared to recompile `qsort' with the same global register variable,\n+you can solve this problem.)\n+\n+   If you want to recompile `qsort' or other source files which do not\n+actually use your global register variable, so that they will not use\n+that register for any other purpose, then it suffices to specify the\n+compiler option `-ffixed-REG'.  You need not actually add a global\n+register declaration to their source code.\n+\n+   A function which can alter the value of a global register variable\n+cannot safely be called from a function compiled without this variable,\n+because it could clobber the value the caller expects to find there on\n+return.  Therefore, the function which is the entry point into the part\n+of the program that uses the global register variable must explicitly\n+save and restore the value which belongs to its caller.\n+\n+   On most machines, `longjmp' will restore to each global register\n+variable the value it had at the time of the `setjmp'.  On some\n+machines, however, `longjmp' will not change the value of global\n+register variables.  To be portable, the function that called `setjmp'\n+should make other arrangements to save the values of the global register\n+variables, and to restore them in a `longjmp'.  This way, the same\n+thing will happen regardless of what `longjmp' does.\n+\n+   All global register variable declarations must precede all function\n+definitions.  If such a declaration could appear after function\n+definitions, the declaration would be too late to prevent the register\n+from being used for other purposes in the preceding functions.\n+\n+   Global register variables may not have initial values, because an\n+executable file has no means to supply initial contents for a register.\n+\n+   On the Sparc, there are reports that g3 ... g7 are suitable\n+registers, but certain library functions, such as `getwd', as well as\n+the subroutines for division and remainder, modify g3 and g4.  g1 and\n+g2 are local temporaries.\n+\n+   On the 68000, a2 ... a5 should be suitable, as should d2 ... d7.  Of\n+course, it will not do to use more than a few of those.\n+\n+\u001f\n+File: gcc.info,  Node: Local Reg Vars,  Prev: Global Reg Vars,  Up: Explicit Reg Vars\n+\n+Specifying Registers for Local Variables\n+----------------------------------------\n+\n+   You can define a local register variable with a specified register\n+like this:\n+\n+     register int *foo asm (\"a5\");\n+\n+Here `a5' is the name of the register which should be used.  Note that\n+this is the same syntax used for defining global register variables,\n+but for a local variable it would appear within a function.\n+\n+   Naturally the register name is cpu-dependent, but this is not a\n+problem, since specific registers are most often useful with explicit\n+assembler instructions (*note Extended Asm::.).  Both of these things\n+generally require that you conditionalize your program according to cpu\n+type.\n+\n+   In addition, operating systems on one type of cpu may differ in how\n+they name the registers; then you would need additional conditionals.\n+For example, some 68000 operating systems call this register `%a5'.\n+\n+   Eventually there may be a way of asking the compiler to choose a\n+register automatically, but first we need to figure out how it should\n+choose and how to enable you to guide the choice.  No solution is\n+evident.\n+\n+   Defining such a register variable does not reserve the register; it\n+remains available for other uses in places where flow control determines\n+the variable's value is not live.  However, these registers are made\n+unavailable for use in the reload pass.  I would not be surprised if\n+excessive use of this feature leaves the compiler too few available\n+registers to compile certain functions.\n+\n+\u001f\n+File: gcc.info,  Node: Alternate Keywords,  Next: Incomplete Enums,  Prev: Explicit Reg Vars,  Up: C Extensions\n+\n+Alternate Keywords\n+==================\n+\n+   The option `-traditional' disables certain keywords; `-ansi'\n+disables certain others.  This causes trouble when you want to use GNU C\n+extensions, or ANSI C features, in a general-purpose header file that\n+should be usable by all programs, including ANSI C programs and\n+traditional ones.  The keywords `asm', `typeof' and `inline' cannot be\n+used since they won't work in a program compiled with `-ansi', while\n+the keywords `const', `volatile', `signed', `typeof' and `inline' won't\n+work in a program compiled with `-traditional'.\n+\n+   The way to solve these problems is to put `__' at the beginning and\n+end of each problematical keyword.  For example, use `__asm__' instead\n+of `asm', `__const__' instead of `const', and `__inline__' instead of\n+`inline'.\n+\n+   Other C compilers won't accept these alternative keywords; if you\n+want to compile with another compiler, you can define the alternate\n+keywords as macros to replace them with the customary keywords.  It\n+looks like this:\n+\n+     #ifndef __GNUC__\n+     #define __asm__ asm\n+     #endif\n+\n+   `-pedantic' causes warnings for many GNU C extensions.  You can\n+prevent such warnings within one expression by writing `__extension__'\n+before the expression.  `__extension__' has no effect aside from this.\n+\n+\u001f\n+File: gcc.info,  Node: Incomplete Enums,  Next: Function Names,  Prev: Alternate Keywords,  Up: C Extensions\n+\n+Incomplete `enum' Types\n+=======================\n+\n+   You can define an `enum' tag without specifying its possible values.\n+This results in an incomplete type, much like what you get if you write\n+`struct foo' without describing the elements.  A later declaration\n+which does specify the possible values completes the type.\n+\n+   You can't allocate variables or storage using the type while it is\n+incomplete.  However, you can work with pointers to that type.\n+\n+   This extension may not be very useful, but it makes the handling of\n+`enum' more consistent with the way `struct' and `union' are handled.\n+\n+   This extension is not supported by GNU C++.\n+\n+\u001f\n+File: gcc.info,  Node: Function Names,  Next: Return Address,  Prev: Incomplete Enums,  Up: C Extensions\n+\n+Function Names as Strings\n+=========================\n+\n+   GNU CC predefines two string variables to be the name of the current\n+function.  The variable `__FUNCTION__' is the name of the function as\n+it appears in the source.  The variable `__PRETTY_FUNCTION__' is the\n+name of the function pretty printed in a language specific fashion.\n+\n+   These names are always the same in a C function, but in a C++\n+function they may be different.  For example, this program:\n+\n+     extern \"C\" {\n+     extern int printf (char *, ...);\n+     }\n+     \n+     class a {\n+      public:\n+       sub (int i)\n+         {\n+           printf (\"__FUNCTION__ = %s\\n\", __FUNCTION__);\n+           printf (\"__PRETTY_FUNCTION__ = %s\\n\", __PRETTY_FUNCTION__);\n+         }\n+     };\n+     \n+     int\n+     main (void)\n+     {\n+       a ax;\n+       ax.sub (0);\n+       return 0;\n+     }\n+\n+gives this output:\n+\n+     __FUNCTION__ = sub\n+     __PRETTY_FUNCTION__ = int  a::sub (int)\n+\n+   These names are not macros: they are predefined string variables.\n+For example, `#ifdef __FUNCTION__' does not have any special meaning\n+inside a function, since the preprocessor does not do anything special\n+with the identifier `__FUNCTION__'.\n+\n+\u001f\n+File: gcc.info,  Node: Return Address,  Prev: Function Names,  Up: C Extensions\n+\n+Getting the Return or Frame Address of a Function\n+=================================================\n+\n+   These functions may be used to get information about the callers of a\n+function.\n+\n+`__builtin_return_address (LEVEL)'\n+     This function returns the return address of the current function,\n+     or of one of its callers.  The LEVEL argument is number of frames\n+     to scan up the call stack.  A value of `0' yields the return\n+     address of the current function, a value of `1' yields the return\n+     address of the caller of the current function, and so forth.\n+\n+     The LEVEL argument must be a constant integer.\n+\n+     On some machines it may be impossible to determine the return\n+     address of any function other than the current one; in such cases,\n+     or when the top of the stack has been reached, this function will\n+     return `0'.\n+\n+     This function should only be used with a non-zero argument for\n+     debugging purposes.\n+\n+`__builtin_frame_address (LEVEL)'\n+     This function is similar to `__builtin_return_address', but it\n+     returns the address of the function frame rather than the return\n+     address of the function.  Calling `__builtin_frame_address' with a\n+     value of `0' yields the frame address of the current function, a\n+     value of `1' yields the frame address of the caller of the current\n+     function, and so forth.\n+\n+     The frame is the area on the stack which holds local variables and\n+     saved registers.  The frame address is normally the address of the\n+     first word pushed on to the stack by the function.  However, the\n+     exact definition depends upon the processor and the calling\n+     convention.  If the processor has a dedicated frame pointer\n+     register, and the function has a frame, then\n+     `__builtin_frame_address' will return the value of the frame\n+     pointer register.\n+\n+     The caveats that apply to `__builtin_return_address' apply to this\n+     function as well.\n+\n+\u001f\n+File: gcc.info,  Node: C++ Extensions,  Next: Gcov,  Prev: C Extensions,  Up: Top\n+\n+Extensions to the C++ Language\n+******************************\n+\n+   The GNU compiler provides these extensions to the C++ language (and\n+you can also use most of the C language extensions in your C++\n+programs).  If you want to write code that checks whether these\n+features are available, you can test for the GNU compiler the same way\n+as for C programs: check for a predefined macro `__GNUC__'.  You can\n+also use `__GNUG__' to test specifically for GNU C++ (*note Standard\n+Predefined Macros: (cpp.info)Standard Predefined.).\n+\n+* Menu:\n+\n+* Naming Results::      Giving a name to C++ function return values.\n+* Min and Max::\t\tC++ Minimum and maximum operators.\n+* Destructors and Goto:: Goto is safe to use in C++ even when destructors\n+                           are needed.\n+* C++ Interface::       You can use a single C++ header file for both\n+                         declarations and definitions.\n+* Template Instantiation:: Methods for ensuring that exactly one copy of\n+                         each needed template instantiation is emitted.\n+* C++ Signatures::\tYou can specify abstract types to get subtype\n+\t\t\t polymorphism independent from inheritance.\n+\n+\u001f\n+File: gcc.info,  Node: Naming Results,  Next: Min and Max,  Up: C++ Extensions\n+\n+Named Return Values in C++\n+==========================\n+\n+   GNU C++ extends the function-definition syntax to allow you to\n+specify a name for the result of a function outside the body of the\n+definition, in C++ programs:\n+\n+     TYPE\n+     FUNCTIONNAME (ARGS) return RESULTNAME;\n+     {\n+       ...\n+       BODY\n+       ...\n+     }\n+\n+   You can use this feature to avoid an extra constructor call when a\n+function result has a class type.  For example, consider a function\n+`m', declared as `X v = m ();', whose result is of class `X':\n+\n+     X\n+     m ()\n+     {\n+       X b;\n+       b.a = 23;\n+       return b;\n+     }\n+\n+   Although `m' appears to have no arguments, in fact it has one\n+implicit argument: the address of the return value.  At invocation, the\n+address of enough space to hold `v' is sent in as the implicit argument.\n+Then `b' is constructed and its `a' field is set to the value 23.\n+Finally, a copy constructor (a constructor of the form `X(X&)') is\n+applied to `b', with the (implicit) return value location as the\n+target, so that `v' is now bound to the return value.\n+\n+   But this is wasteful.  The local `b' is declared just to hold\n+something that will be copied right out.  While a compiler that\n+combined an \"elision\" algorithm with interprocedural data flow analysis\n+could conceivably eliminate all of this, it is much more practical to\n+allow you to assist the compiler in generating efficient code by\n+manipulating the return value explicitly, thus avoiding the local\n+variable and copy constructor altogether.\n+\n+   Using the extended GNU C++ function-definition syntax, you can avoid\n+the temporary allocation and copying by naming `r' as your return value\n+at the outset, and assigning to its `a' field directly:\n+\n+     X\n+     m () return r;\n+     {\n+       r.a = 23;\n+     }\n+\n+The declaration of `r' is a standard, proper declaration, whose effects\n+are executed *before* any of the body of `m'.\n+\n+   Functions of this type impose no additional restrictions; in\n+particular, you can execute `return' statements, or return implicitly by\n+reaching the end of the function body (\"falling off the edge\").  Cases\n+like\n+\n+     X\n+     m () return r (23);\n+     {\n+       return;\n+     }\n+\n+(or even `X m () return r (23); { }') are unambiguous, since the return\n+value `r' has been initialized in either case.  The following code may\n+be hard to read, but also works predictably:\n+\n+     X\n+     m () return r;\n+     {\n+       X b;\n+       return b;\n+     }\n+\n+   The return value slot denoted by `r' is initialized at the outset,\n+but the statement `return b;' overrides this value.  The compiler deals\n+with this by destroying `r' (calling the destructor if there is one, or\n+doing nothing if there is not), and then reinitializing `r' with `b'.\n+\n+   This extension is provided primarily to help people who use\n+overloaded operators, where there is a great need to control not just\n+the arguments, but the return values of functions.  For classes where\n+the copy constructor incurs a heavy performance penalty (especially in\n+the common case where there is a quick default constructor), this is a\n+major savings.  The disadvantage of this extension is that you do not\n+control when the default constructor for the return value is called: it\n+is always called at the beginning.\n+\n+\u001f\n+File: gcc.info,  Node: Min and Max,  Next: Destructors and Goto,  Prev: Naming Results,  Up: C++ Extensions\n+\n+Minimum and Maximum Operators in C++\n+====================================\n+\n+   It is very convenient to have operators which return the \"minimum\"\n+or the \"maximum\" of two arguments.  In GNU C++ (but not in GNU C),\n+\n+`A <? B'\n+     is the \"minimum\", returning the smaller of the numeric values A\n+     and B;\n+\n+`A >? B'\n+     is the \"maximum\", returning the larger of the numeric values A and\n+     B.\n+\n+   These operations are not primitive in ordinary C++, since you can\n+use a macro to return the minimum of two things in C++, as in the\n+following example.\n+\n+     #define MIN(X,Y) ((X) < (Y) ? : (X) : (Y))\n+\n+You might then use `int min = MIN (i, j);' to set MIN to the minimum\n+value of variables I and J.\n+\n+   However, side effects in `X' or `Y' may cause unintended behavior.\n+For example, `MIN (i++, j++)' will fail, incrementing the smaller\n+counter twice.  A GNU C extension allows you to write safe macros that\n+avoid this kind of problem (*note Naming an Expression's Type: Naming\n+Types.).  However, writing `MIN' and `MAX' as macros also forces you to\n+use function-call notation for a fundamental arithmetic operation.\n+Using GNU C++ extensions, you can write `int min = i <? j;' instead.\n+\n+   Since `<?' and `>?' are built into the compiler, they properly\n+handle expressions with side-effects;  `int min = i++ <? j++;' works\n+correctly.\n+\n+\u001f\n+File: gcc.info,  Node: Destructors and Goto,  Next: C++ Interface,  Prev: Min and Max,  Up: C++ Extensions\n+\n+`goto' and Destructors in GNU C++\n+=================================\n+\n+   In C++ programs, you can safely use the `goto' statement.  When you\n+use it to exit a block which contains aggregates requiring destructors,\n+the destructors will run before the `goto' transfers control.\n+\n+   The compiler still forbids using `goto' to *enter* a scope that\n+requires constructors.\n+\n+\u001f\n+File: gcc.info,  Node: C++ Interface,  Next: Template Instantiation,  Prev: Destructors and Goto,  Up: C++ Extensions\n+\n+Declarations and Definitions in One Header\n+==========================================\n+\n+   C++ object definitions can be quite complex.  In principle, your\n+source code will need two kinds of things for each object that you use\n+across more than one source file.  First, you need an \"interface\"\n+specification, describing its structure with type declarations and\n+function prototypes.  Second, you need the \"implementation\" itself.  It\n+can be tedious to maintain a separate interface description in a header\n+file, in parallel to the actual implementation.  It is also dangerous,\n+since separate interface and implementation definitions may not remain\n+parallel.\n+\n+   With GNU C++, you can use a single header file for both purposes.\n+\n+     *Warning:* The mechanism to specify this is in transition.  For the\n+     nonce, you must use one of two `#pragma' commands; in a future\n+     release of GNU C++, an alternative mechanism will make these\n+     `#pragma' commands unnecessary.\n+\n+   The header file contains the full definitions, but is marked with\n+`#pragma interface' in the source code.  This allows the compiler to\n+use the header file only as an interface specification when ordinary\n+source files incorporate it with `#include'.  In the single source file\n+where the full implementation belongs, you can use either a naming\n+convention or `#pragma implementation' to indicate this alternate use\n+of the header file.\n+\n+`#pragma interface'\n+`#pragma interface \"SUBDIR/OBJECTS.h\"'\n+     Use this directive in *header files* that define object classes,\n+     to save space in most of the object files that use those classes.\n+     Normally, local copies of certain information (backup copies of\n+     inline member functions, debugging information, and the internal\n+     tables that implement virtual functions) must be kept in each\n+     object file that includes class definitions.  You can use this\n+     pragma to avoid such duplication.  When a header file containing\n+     `#pragma interface' is included in a compilation, this auxiliary\n+     information will not be generated (unless the main input source\n+     file itself uses `#pragma implementation').  Instead, the object\n+     files will contain references to be resolved at link time.\n+\n+     The second form of this directive is useful for the case where you\n+     have multiple headers with the same name in different directories.\n+     If you use this form, you must specify the same string to `#pragma\n+     implementation'.\n+\n+`#pragma implementation'\n+`#pragma implementation \"OBJECTS.h\"'\n+     Use this pragma in a *main input file*, when you want full output\n+     from included header files to be generated (and made globally\n+     visible).  The included header file, in turn, should use `#pragma\n+     interface'.  Backup copies of inline member functions, debugging\n+     information, and the internal tables used to implement virtual\n+     functions are all generated in implementation files.\n+\n+     If you use `#pragma implementation' with no argument, it applies to\n+     an include file with the same basename(1) as your source file.\n+     For example, in `allclass.cc', giving just `#pragma implementation'\n+     by itself is equivalent to `#pragma implementation \"allclass.h\"'.\n+\n+     In versions of GNU C++ prior to 2.6.0 `allclass.h' was treated as\n+     an implementation file whenever you would include it from\n+     `allclass.cc' even if you never specified `#pragma\n+     implementation'.  This was deemed to be more trouble than it was\n+     worth, however, and disabled.\n+\n+     If you use an explicit `#pragma implementation', it must appear in\n+     your source file *before* you include the affected header files.\n+\n+     Use the string argument if you want a single implementation file to\n+     include code from multiple header files.  (You must also use\n+     `#include' to include the header file; `#pragma implementation'\n+     only specifies how to use the file--it doesn't actually include\n+     it.)\n+\n+     There is no way to split up the contents of a single header file\n+     into multiple implementation files.\n+\n+   `#pragma implementation' and `#pragma interface' also have an effect\n+on function inlining.\n+\n+   If you define a class in a header file marked with `#pragma\n+interface', the effect on a function defined in that class is similar to\n+an explicit `extern' declaration--the compiler emits no code at all to\n+define an independent version of the function.  Its definition is used\n+only for inlining with its callers.\n+\n+   Conversely, when you include the same header file in a main source\n+file that declares it as `#pragma implementation', the compiler emits\n+code for the function itself; this defines a version of the function\n+that can be found via pointers (or by callers compiled without\n+inlining).  If all calls to the function can be inlined, you can avoid\n+emitting the function by compiling with `-fno-implement-inlines'.  If\n+any calls were not inlined, you will get linker errors.\n+\n+   ---------- Footnotes ----------\n+\n+   (1) A file's \"basename\" was the name stripped of all leading path\n+information and of trailing suffixes, such as `.h' or `.C' or `.cc'.\n+\n+\u001f\n+File: gcc.info,  Node: Template Instantiation,  Next: C++ Signatures,  Prev: C++ Interface,  Up: C++ Extensions\n+\n+Where's the Template?\n+=====================\n+\n+   C++ templates are the first language feature to require more\n+intelligence from the environment than one usually finds on a UNIX\n+system.  Somehow the compiler and linker have to make sure that each\n+template instance occurs exactly once in the executable if it is needed,\n+and not at all otherwise.  There are two basic approaches to this\n+problem, which I will refer to as the Borland model and the Cfront\n+model.\n+\n+Borland model\n+     Borland C++ solved the template instantiation problem by adding\n+     the code equivalent of common blocks to their linker; the compiler\n+     emits template instances in each translation unit that uses them,\n+     and the linker collapses them together.  The advantage of this\n+     model is that the linker only has to consider the object files\n+     themselves; there is no external complexity to worry about.  This\n+     disadvantage is that compilation time is increased because the\n+     template code is being compiled repeatedly.  Code written for this\n+     model tends to include definitions of all templates in the header\n+     file, since they must be seen to be instantiated.\n+\n+Cfront model\n+     The AT&T C++ translator, Cfront, solved the template instantiation\n+     problem by creating the notion of a template repository, an\n+     automatically maintained place where template instances are\n+     stored.  A more modern version of the repository works as follows:\n+     As individual object files are built, the compiler places any\n+     template definitions and instantiations encountered in the\n+     repository.  At link time, the link wrapper adds in the objects in\n+     the repository and compiles any needed instances that were not\n+     previously emitted.  The advantages of this model are more optimal\n+     compilation speed and the ability to use the system linker; to\n+     implement the Borland model a compiler vendor also needs to\n+     replace the linker.  The disadvantages are vastly increased\n+     complexity, and thus potential for error; for some code this can be\n+     just as transparent, but in practice it can been very difficult to\n+     build multiple programs in one directory and one program in\n+     multiple directories.  Code written for this model tends to\n+     separate definitions of non-inline member templates into a\n+     separate file, which should be compiled separately.\n+\n+   When used with GNU ld version 2.8 or later on an ELF system such as\n+Linux/GNU or Solaris 2, or on Microsoft Windows, g++ supports the\n+Borland model.  On other systems, g++ implements neither automatic\n+model.\n+\n+   A future version of g++ will support a hybrid model whereby the\n+compiler will emit any instantiations for which the template definition\n+is included in the compile, and store template definitions and\n+instantiation context information into the object file for the rest.\n+The link wrapper will extract that information as necessary and invoke\n+the compiler to produce the remaining instantiations.  The linker will\n+then combine duplicate instantiations.\n+\n+   In the mean time, you have the following options for dealing with\n+template instantiations:\n+\n+  1. Compile your code with `-fno-implicit-templates' to disable the\n+     implicit generation of template instances, and explicitly\n+     instantiate all the ones you use.  This approach requires more\n+     knowledge of exactly which instances you need than do the others,\n+     but it's less mysterious and allows greater control.  You can\n+     scatter the explicit instantiations throughout your program,\n+     perhaps putting them in the translation units where the instances\n+     are used or the translation units that define the templates\n+     themselves; you can put all of the explicit instantiations you\n+     need into one big file; or you can create small files like\n+\n+          #include \"Foo.h\"\n+          #include \"Foo.cc\"\n+          \n+          template class Foo<int>;\n+          template ostream& operator <<\n+                          (ostream&, const Foo<int>&);\n+\n+     for each of the instances you need, and create a template\n+     instantiation library from those.\n+\n+     If you are using Cfront-model code, you can probably get away with\n+     not using `-fno-implicit-templates' when compiling files that don't\n+     `#include' the member template definitions.\n+\n+     If you use one big file to do the instantiations, you may want to\n+     compile it without `-fno-implicit-templates' so you get all of the\n+     instances required by your explicit instantiations (but not by any\n+     other files) without having to specify them as well.\n+\n+     g++ has extended the template instantiation syntax outlined in the\n+     Working Paper to allow forward declaration of explicit\n+     instantiations, explicit instantiation of members of template\n+     classes and instantiation of the compiler support data for a\n+     template class (i.e. the vtable) without instantiating any of its\n+     members:\n+\n+          extern template int max (int, int);\n+          template void Foo<int>::f ();\n+          inline template class Foo<int>;\n+\n+  2. Do nothing.  Pretend g++ does implement automatic instantiation\n+     management.  Code written for the Borland model will work fine, but\n+     each translation unit will contain instances of each of the\n+     templates it uses.  In a large program, this can lead to an\n+     unacceptable amount of code duplication.\n+\n+  3. Add `#pragma interface' to all files containing template\n+     definitions.  For each of these files, add `#pragma implementation\n+     \"FILENAME\"' to the top of some `.C' file which `#include's it.\n+     Then compile everything with `-fexternal-templates'.  The\n+     templates will then only be expanded in the translation unit which\n+     implements them (i.e. has a `#pragma implementation' line for the\n+     file where they live); all other files will use external\n+     references.  If you're lucky, everything should work properly.  If\n+     you get undefined symbol errors, you need to make sure that each\n+     template instance which is used in the program is used in the file\n+     which implements that template.  If you don't have any use for a\n+     particular instance in that file, you can just instantiate it\n+     explicitly, using the syntax from the latest C++ working paper:\n+\n+          template class A<int>;\n+          template ostream& operator << (ostream&, const A<int>&);\n+\n+     This strategy will work with code written for either model.  If\n+     you are using code written for the Cfront model, the file\n+     containing a class template and the file containing its member\n+     templates should be implemented in the same translation unit.\n+\n+     A slight variation on this approach is to instead use the flag\n+     `-falt-external-templates'; this flag causes template instances to\n+     be emitted in the translation unit that implements the header\n+     where they are first instantiated, rather than the one which\n+     implements the file where the templates are defined.  This header\n+     must be the same in all translation units, or things are likely to\n+     break.\n+\n+     *Note Declarations and Definitions in One Header: C++ Interface,\n+     for more discussion of these pragmas.\n+"}, {"sha": "a23d4dc5123325d3b4313a94b0ebf73fbdf98550", "filename": "gcc/gcc.info-11", "status": "added", "additions": 1162, "deletions": 0, "changes": 1162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-11?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1162 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: C++ Signatures,  Prev: Template Instantiation,  Up: C++ Extensions\n+\n+Type Abstraction using Signatures\n+=================================\n+\n+   In GNU C++, you can use the keyword `signature' to define a\n+completely abstract class interface as a datatype.  You can connect this\n+abstraction with actual classes using signature pointers.  If you want\n+to use signatures, run the GNU compiler with the `-fhandle-signatures'\n+command-line option.  (With this option, the compiler reserves a second\n+keyword `sigof' as well, for a future extension.)\n+\n+   Roughly, signatures are type abstractions or interfaces of classes.\n+Some other languages have similar facilities.  C++ signatures are\n+related to ML's signatures, Haskell's type classes, definition modules\n+in Modula-2, interface modules in Modula-3, abstract types in Emerald,\n+type modules in Trellis/Owl, categories in Scratchpad II, and types in\n+POOL-I.  For a more detailed discussion of signatures, see `Signatures:\n+A Language Extension for Improving Type Abstraction and Subtype\n+Polymorphism in C++' by Gerald Baumgartner and Vincent F. Russo (Tech\n+report CSD-TR-95-051, Dept. of Computer Sciences, Purdue University,\n+August 1995, a slightly improved version appeared in\n+*Software--Practice & Experience*, 25(8), pp. 863-889, August 1995).\n+You can get the tech report by anonymous FTP from `ftp.cs.purdue.edu'\n+in `pub/gb/Signature-design.ps.gz'.\n+\n+   Syntactically, a signature declaration is a collection of member\n+function declarations and nested type declarations.  For example, this\n+signature declaration defines a new abstract type `S' with member\n+functions `int foo ()' and `int bar (int)':\n+\n+     signature S\n+     {\n+       int foo ();\n+       int bar (int);\n+     };\n+\n+   Since signature types do not include implementation definitions, you\n+cannot write an instance of a signature directly.  Instead, you can\n+define a pointer to any class that contains the required interfaces as a\n+\"signature pointer\".  Such a class \"implements\" the signature type.\n+\n+   To use a class as an implementation of `S', you must ensure that the\n+class has public member functions `int foo ()' and `int bar (int)'.\n+The class can have other member functions as well, public or not; as\n+long as it offers what's declared in the signature, it is suitable as\n+an implementation of that signature type.\n+\n+   For example, suppose that `C' is a class that meets the requirements\n+of signature `S' (`C' \"conforms to\" `S').  Then\n+\n+     C obj;\n+     S * p = &obj;\n+\n+defines a signature pointer `p' and initializes it to point to an\n+object of type `C'.  The member function call `int i = p->foo ();'\n+executes `obj.foo ()'.\n+\n+   Abstract virtual classes provide somewhat similar facilities in\n+standard C++.  There are two main advantages to using signatures\n+instead:\n+\n+  1. Subtyping becomes independent from inheritance.  A class or\n+     signature type `T' is a subtype of a signature type `S'\n+     independent of any inheritance hierarchy as long as all the member\n+     functions declared in `S' are also found in `T'.  So you can\n+     define a subtype hierarchy that is completely independent from any\n+     inheritance (implementation) hierarchy, instead of being forced to\n+     use types that mirror the class inheritance hierarchy.\n+\n+  2. Signatures allow you to work with existing class hierarchies as\n+     implementations of a signature type.  If those class hierarchies\n+     are only available in compiled form, you're out of luck with\n+     abstract virtual classes, since an abstract virtual class cannot\n+     be retrofitted on top of existing class hierarchies.  So you would\n+     be required to write interface classes as subtypes of the abstract\n+     virtual class.\n+\n+   There is one more detail about signatures.  A signature declaration\n+can contain member function *definitions* as well as member function\n+declarations.  A signature member function with a full definition is\n+called a *default implementation*; classes need not contain that\n+particular interface in order to conform.  For example, a class `C' can\n+conform to the signature\n+\n+     signature T\n+     {\n+       int f (int);\n+       int f0 () { return f (0); };\n+     };\n+\n+whether or not `C' implements the member function `int f0 ()'.  If you\n+define `C::f0', that definition takes precedence; otherwise, the\n+default implementation `S::f0' applies.\n+\n+\u001f\n+File: gcc.info,  Node: Gcov,  Next: Trouble,  Prev: C++ Extensions,  Up: Top\n+\n+`gcov': a Test Coverage Program\n+*******************************\n+\n+   `gcov' is a tool you can use in conjunction with GNU CC to test code\n+coverage in your programs.\n+\n+   This chapter describes version 1.5 of `gcov'.\n+\n+* Menu:\n+\n+* Gcov Intro::         \t        Introduction to gcov.\n+* Invoking Gcov::       \tHow to use gcov.\n+* Gcov and Optimization::       Using gcov with GCC optimization.\n+* Gcov Data Files::             The files used by gcov.\n+\n+\u001f\n+File: gcc.info,  Node: Gcov Intro,  Next: Invoking Gcov,  Up: Gcov\n+\n+Introduction to `gcov'\n+======================\n+\n+   `gcov' is a test coverage program.  Use it in concert with GNU CC to\n+analyze your programs to help create more efficient, faster running\n+code.  You can use `gcov' as a profiling tool to help discover where\n+your optimization efforts will best affect your code.  You can also use\n+`gcov' along with the other profiling tool, `gprof', to assess which\n+parts of your code use the greatest amount of computing time.\n+\n+   Profiling tools help you analyze your code's performance.  Using a\n+profiler such as `gcov' or `gprof', you can find out some basic\n+performance statistics, such as:\n+\n+   * how often each line of code executes\n+\n+   * what lines of code are actually executed\n+\n+   * how much computing time each section of code uses\n+\n+   Once you know these things about how your code works when compiled,\n+you can look at each module to see which modules should be optimized.\n+`gcov' helps you determine where to work on optimization.\n+\n+   Software developers also use coverage testing in concert with\n+testsuites, to make sure software is actually good enough for a release.\n+Testsuites can verify that a program works as expected; a coverage\n+program tests to see how much of the program is exercised by the\n+testsuite.  Developers can then determine what kinds of test cases need\n+to be added to the testsuites to create both better testing and a better\n+final product.\n+\n+   You should compile your code without optimization if you plan to use\n+`gcov' because the optimization, by combining some lines of code into\n+one function, may not give you as much information as you need to look\n+for `hot spots' where the code is using a great deal of computer time.\n+Likewise, because `gcov' accumulates statistics by line (at the lowest\n+resolution), it works best with a programming style that places only\n+one statement on each line.  If you use complicated macros that expand\n+to loops or to other control structures, the statistics are less\n+helpful--they only report on the line where the macro call appears.  If\n+your complex macros behave like functions, you can replace them with\n+inline functions to solve this problem.\n+\n+   `gcov' creates a logfile called `SOURCEFILE.gcov' which indicates\n+how many times each line of a source file `SOURCEFILE.c' has executed.\n+You can use these logfiles along with `gprof' to aid in fine-tuning the\n+performance of your programs.  `gprof' gives timing information you can\n+use along with the information you get from `gcov'.\n+\n+   `gcov' works only on code compiled with GNU CC.  It is not\n+compatible with any other profiling or test coverage mechanism.\n+\n+\u001f\n+File: gcc.info,  Node: Invoking Gcov,  Next: Gcov and Optimization,  Prev: Gcov Intro,  Up: Gcov\n+\n+Invoking gcov\n+=============\n+\n+     gcov [-b] [-v] [-n] [-l] [-f] [-o directory] SOURCEFILE\n+\n+`-b'\n+     Write branch frequencies to the output file, and write branch\n+     summary info to the standard output.  This option allows you to\n+     see how often each branch in your program was taken.\n+\n+`-v'\n+     Display the `gcov' version number (on the standard error stream).\n+\n+`-n'\n+     Do not create the `gcov' output file.\n+\n+`-l'\n+     Create long file names for included source files.  For example, if\n+     the header file `x.h' contains code, and was included in the file\n+     `a.c', then running `gcov' on the file `a.c' will produce an\n+     output file called `a.c.x.h.gcov' instead of `x.h.gcov'.  This can\n+     be useful if `x.h' is included in multiple source files.\n+\n+`-f'\n+     Output summaries for each function in addition to the file level\n+     summary.\n+\n+`-o'\n+     The directory where the object files live.  Gcov will search for\n+     `.bb', `.bbg', and `.da' files in this directory.\n+\n+   When using `gcov', you must first compile your program with two\n+special GNU CC options: `-fprofile-arcs -ftest-coverage'.  This tells\n+the compiler to generate additional information needed by gcov\n+(basically a flow graph of the program) and also includes additional\n+code in the object files for generating the extra profiling information\n+needed by gcov.  These additional files are placed in the directory\n+where the source code is located.\n+\n+   Running the program will cause profile output to be generated.  For\n+each source file compiled with -fprofile-arcs, an accompanying `.da'\n+file will be placed in the source directory.\n+\n+   Running `gcov' with your program's source file names as arguments\n+will now produce a listing of the code along with frequency of execution\n+for each line.  For example, if your program is called `tmp.c', this is\n+what you see when you use the basic `gcov' facility:\n+\n+     $ gcc -fprofile-arcs -ftest-coverage tmp.c\n+     $ a.out\n+     $ gcov tmp.c\n+      87.50% of 8 source lines executed in file tmp.c\n+     Creating tmp.c.gcov.\n+\n+   The file `tmp.c.gcov' contains output from `gcov'.  Here is a sample:\n+\n+                     main()\n+                     {\n+                1      int i, total;\n+     \n+                1      total = 0;\n+     \n+               11      for (i = 0; i < 10; i++)\n+               10        total += i;\n+     \n+                1      if (total != 45)\n+           ######        printf (\"Failure\\n\");\n+                       else\n+                1        printf (\"Success\\n\");\n+                1    }\n+\n+   When you use the `-b' option, your output looks like this:\n+\n+     $ gcov -b tmp.c\n+      87.50% of 8 source lines executed in file tmp.c\n+      80.00% of 5 branches executed in file tmp.c\n+      80.00% of 5 branches taken at least once in file tmp.c\n+      50.00% of 2 calls executed in file tmp.c\n+     Creating tmp.c.gcov.\n+\n+   Here is a sample of a resulting `tmp.c.gcov' file:\n+\n+                     main()\n+                     {\n+                1      int i, total;\n+     \n+                1      total = 0;\n+     \n+               11      for (i = 0; i < 10; i++)\n+     branch 0 taken = 91%\n+     branch 1 taken = 100%\n+     branch 2 taken = 100%\n+               10        total += i;\n+     \n+                1      if (total != 45)\n+     branch 0 taken = 100%\n+           ######        printf (\"Failure\\n\");\n+     call 0 never executed\n+     branch 1 never executed\n+                       else\n+                1        printf (\"Success\\n\");\n+     call 0 returns = 100%\n+                1    }\n+\n+   For each basic block, a line is printed after the last line of the\n+basic block describing the branch or call that ends the basic block.\n+There can be multiple branches and calls listed for a single source\n+line if there are multiple basic blocks that end on that line.  In this\n+case, the branches and calls are each given a number.  There is no\n+simple way to map these branches and calls back to source constructs.\n+In general, though, the lowest numbered branch or call will correspond\n+to the leftmost construct on the source line.\n+\n+   For a branch, if it was executed at least once, then a percentage\n+indicating the number of times the branch was taken divided by the\n+number of times the branch was executed will be printed.  Otherwise, the\n+message \"never executed\" is printed.\n+\n+   For a call, if it was executed at least once, then a percentage\n+indicating the number of times the call returned divided by the number\n+of times the call was executed will be printed.  This will usually be\n+100%, but may be less for functions call `exit' or `longjmp', and thus\n+may not return everytime they are called.\n+\n+   The execution counts are cumulative.  If the example program were\n+executed again without removing the `.da' file, the count for the\n+number of times each line in the source was executed would be added to\n+the results of the previous run(s).  This is potentially useful in\n+several ways.  For example, it could be used to accumulate data over a\n+number of program runs as part of a test verification suite, or to\n+provide more accurate long-term information over a large number of\n+program runs.\n+\n+   The data in the `.da' files is saved immediately before the program\n+exits.  For each source file compiled with -fprofile-arcs, the profiling\n+code first attempts to read in an existing `.da' file; if the file\n+doesn't match the executable (differing number of basic block counts) it\n+will ignore the contents of the file.  It then adds in the new execution\n+counts and finally writes the data to the file.\n+\n+\u001f\n+File: gcc.info,  Node: Gcov and Optimization,  Next: Gcov Data Files,  Prev: Invoking Gcov,  Up: Gcov\n+\n+Using `gcov' with GCC Optimization\n+==================================\n+\n+   If you plan to use `gcov' to help optimize your code, you must first\n+compile your program with two special GNU CC options: `-fprofile-arcs\n+-ftest-coverage'.  Aside from that, you can use any other GNU CC\n+options; but if you want to prove that every single line in your\n+program was executed, you should not compile with optimization at the\n+same time.  On some machines the optimizer can eliminate some simple\n+code lines by combining them with other lines.  For example, code like\n+this:\n+\n+     if (a != b)\n+       c = 1;\n+     else\n+       c = 0;\n+\n+can be compiled into one instruction on some machines.  In this case,\n+there is no way for `gcov' to calculate separate execution counts for\n+each line because there isn't separate code for each line.  Hence the\n+`gcov' output looks like this if you compiled the program with\n+optimization:\n+\n+           100  if (a != b)\n+           100    c = 1;\n+           100  else\n+           100    c = 0;\n+\n+   The output shows that this block of code, combined by optimization,\n+executed 100 times.  In one sense this result is correct, because there\n+was only one instruction representing all four of these lines.  However,\n+the output does not indicate how many times the result was 0 and how\n+many times the result was 1.\n+\n+\u001f\n+File: gcc.info,  Node: Gcov Data Files,  Prev: Gcov and Optimization,  Up: Gcov\n+\n+Brief description of `gcov' data files\n+======================================\n+\n+   `gcov' uses three files for doing profiling.  The names of these\n+files are derived from the original *source* file by substituting the\n+file suffix with either `.bb', `.bbg', or `.da'.  All of these files\n+are placed in the same directory as the source file, and contain data\n+stored in a platform-independent method.\n+\n+   The `.bb' and `.bbg' files are generated when the source file is\n+compiled with the GNU CC `-ftest-coverage' option.  The `.bb' file\n+contains a list of source files (including headers), functions within\n+those files, and line numbers corresponding to each basic block in the\n+source file.\n+\n+   The `.bb' file format consists of several lists of 4-byte integers\n+which correspond to the line numbers of each basic block in the file.\n+Each list is terminated by a line number of 0.  A line number of -1 is\n+used to designate that the source file name (padded to a 4-byte\n+boundary and followed by another -1) follows.  In addition, a line\n+number of -2 is used to designate that the name of a function (also\n+padded to a 4-byte boundary and followed by a -2) follows.\n+\n+   The `.bbg' file is used to reconstruct the program flow graph for\n+the source file.  It contains a list of the program flow arcs (possible\n+branches taken from one basic block to another) for each function which,\n+in combination with the `.bb' file, enables gcov to reconstruct the\n+program flow.\n+\n+   In the `.bbg' file, the format is:\n+             number of basic blocks for function #0 (4-byte number)\n+             total number of arcs for function #0 (4-byte number)\n+             count of arcs in basic block #0 (4-byte number)\n+             destination basic block of arc #0 (4-byte number)\n+             flag bits (4-byte number)\n+             destination basic block of arc #1 (4-byte number)\n+             flag bits (4-byte number)\n+             ...\n+             destination basic block of arc #N (4-byte number)\n+             flag bits (4-byte number)\n+             count of arcs in basic block #1 (4-byte number)\n+             destination basic block of arc #0 (4-byte number)\n+             flag bits (4-byte number)\n+             ...\n+\n+   A -1 (stored as a 4-byte number) is used to separate each function's\n+list of basic blocks, and to verify that the file has been read\n+correctly.\n+\n+   The `.da' file is generated when a program containing object files\n+built with the GNU CC `-fprofile-arcs' option is executed.  A separate\n+`.da' file is created for each source file compiled with this option,\n+and the name of the `.da' file is stored as an absolute pathname in the\n+resulting object file.  This path name is derived from the source file\n+name by substituting a `.da' suffix.\n+\n+   The format of the `.da' file is fairly simple.  The first 8-byte\n+number is the number of counts in the file, followed by the counts\n+(stored as 8-byte numbers).  Each count corresponds to the number of\n+times each arc in the program is executed.  The counts are cumulative;\n+each time the program is executed, it attemps to combine the existing\n+`.da' files with the new counts for this invocation of the program.  It\n+ignores the contents of any `.da' files whose number of arcs doesn't\n+correspond to the current program, and merely overwrites them instead.\n+\n+   All three of these files use the functions in `gcov-io.h' to store\n+integers; the functions in this header provide a machine-independent\n+mechanism for storing and retrieving data from a stream.\n+\n+\u001f\n+File: gcc.info,  Node: Trouble,  Next: Bugs,  Prev: Gcov,  Up: Top\n+\n+Known Causes of Trouble with GNU CC\n+***********************************\n+\n+   This section describes known problems that affect users of GNU CC.\n+Most of these are not GNU CC bugs per se--if they were, we would fix\n+them.  But the result for a user may be like the result of a bug.\n+\n+   Some of these problems are due to bugs in other software, some are\n+missing features that are too much work to add, and some are places\n+where people's opinions differ as to what is best.\n+\n+* Menu:\n+\n+* Actual Bugs::\t\t      Bugs we will fix later.\n+* Installation Problems::     Problems that manifest when you install GNU CC.\n+* Cross-Compiler Problems::   Common problems of cross compiling with GNU CC.\n+* Interoperation::      Problems using GNU CC with other compilers,\n+\t\t\t   and with certain linkers, assemblers and debuggers.\n+* External Bugs::\tProblems compiling certain programs.\n+* Incompatibilities::   GNU CC is incompatible with traditional C.\n+* Fixed Headers::       GNU C uses corrected versions of system header files.\n+                           This is necessary, but doesn't always work smoothly.\n+* Standard Libraries::  GNU C uses the system C library, which might not be\n+                           compliant with the ISO/ANSI C standard.\n+* Disappointments::     Regrettable things we can't change, but not quite bugs.\n+* C++ Misunderstandings::     Common misunderstandings with GNU C++.\n+* Protoize Caveats::    Things to watch out for when using `protoize'.\n+* Non-bugs::\t\tThings we think are right, but some others disagree.\n+* Warnings and Errors:: Which problems in your code get warnings,\n+                         and which get errors.\n+\n+\u001f\n+File: gcc.info,  Node: Actual Bugs,  Next: Installation Problems,  Up: Trouble\n+\n+Actual Bugs We Haven't Fixed Yet\n+================================\n+\n+   * The `fixincludes' script interacts badly with automounters; if the\n+     directory of system header files is automounted, it tends to be\n+     unmounted while `fixincludes' is running.  This would seem to be a\n+     bug in the automounter.  We don't know any good way to work around\n+     it.\n+\n+   * The `fixproto' script will sometimes add prototypes for the\n+     `sigsetjmp' and `siglongjmp' functions that reference the\n+     `jmp_buf' type before that type is defined.  To work around this,\n+     edit the offending file and place the typedef in front of the\n+     prototypes.\n+\n+   * There are several obscure case of mis-using struct, union, and\n+     enum tags that are not detected as errors by the compiler.\n+\n+   * When `-pedantic-errors' is specified, GNU C will incorrectly give\n+     an error message when a function name is specified in an expression\n+     involving the comma operator.\n+\n+   * Loop unrolling doesn't work properly for certain C++ programs.\n+     This is a bug in the C++ front end.  It sometimes emits incorrect\n+     debug info, and the loop unrolling code is unable to recover from\n+     this error.\n+\n+\u001f\n+File: gcc.info,  Node: Installation Problems,  Next: Cross-Compiler Problems,  Prev: Actual Bugs,  Up: Trouble\n+\n+Installation Problems\n+=====================\n+\n+   This is a list of problems (and some apparent problems which don't\n+really mean anything is wrong) that show up during installation of GNU\n+CC.\n+\n+   * On certain systems, defining certain environment variables such as\n+     `CC' can interfere with the functioning of `make'.\n+\n+   * If you encounter seemingly strange errors when trying to build the\n+     compiler in a directory other than the source directory, it could\n+     be because you have previously configured the compiler in the\n+     source directory.  Make sure you have done all the necessary\n+     preparations.  *Note Other Dir::.\n+\n+   * If you build GNU CC on a BSD system using a directory stored in a\n+     System V file system, problems may occur in running `fixincludes'\n+     if the System V file system doesn't support symbolic links.  These\n+     problems result in a failure to fix the declaration of `size_t' in\n+     `sys/types.h'.  If you find that `size_t' is a signed type and\n+     that type mismatches occur, this could be the cause.\n+\n+     The solution is not to use such a directory for building GNU CC.\n+\n+   * In previous versions of GNU CC, the `gcc' driver program looked for\n+     `as' and `ld' in various places; for example, in files beginning\n+     with `/usr/local/lib/gcc-'.  GNU CC version 2 looks for them in\n+     the directory `/usr/local/lib/gcc-lib/TARGET/VERSION'.\n+\n+     Thus, to use a version of `as' or `ld' that is not the system\n+     default, for example `gas' or GNU `ld', you must put them in that\n+     directory (or make links to them from that directory).\n+\n+   * Some commands executed when making the compiler may fail (return a\n+     non-zero status) and be ignored by `make'.  These failures, which\n+     are often due to files that were not found, are expected, and can\n+     safely be ignored.\n+\n+   * It is normal to have warnings in compiling certain files about\n+     unreachable code and about enumeration type clashes.  These files'\n+     names begin with `insn-'.  Also, `real.c' may get some warnings\n+     that you can ignore.\n+\n+   * Sometimes `make' recompiles parts of the compiler when installing\n+     the compiler.  In one case, this was traced down to a bug in\n+     `make'.  Either ignore the problem or switch to GNU Make.\n+\n+   * If you have installed a program known as purify, you may find that\n+     it causes errors while linking `enquire', which is part of building\n+     GNU CC.  The fix is to get rid of the file `real-ld' which purify\n+     installs--so that GNU CC won't try to use it.\n+\n+   * On Linux SLS 1.01, there is a problem with `libc.a': it does not\n+     contain the obstack functions.  However, GNU CC assumes that the\n+     obstack functions are in `libc.a' when it is the GNU C library.\n+     To work around this problem, change the `__GNU_LIBRARY__'\n+     conditional around line 31 to `#if 1'.\n+\n+   * On some 386 systems, building the compiler never finishes because\n+     `enquire' hangs due to a hardware problem in the motherboard--it\n+     reports floating point exceptions to the kernel incorrectly.  You\n+     can install GNU CC except for `float.h' by patching out the\n+     command to run `enquire'.  You may also be able to fix the problem\n+     for real by getting a replacement motherboard.  This problem was\n+     observed in Revision E of the Micronics motherboard, and is fixed\n+     in Revision F.  It has also been observed in the MYLEX MXA-33\n+     motherboard.\n+\n+     If you encounter this problem, you may also want to consider\n+     removing the FPU from the socket during the compilation.\n+     Alternatively, if you are running SCO Unix, you can reboot and\n+     force the FPU to be ignored.  To do this, type `hd(40)unix auto\n+     ignorefpu'.\n+\n+   * On some 386 systems, GNU CC crashes trying to compile `enquire.c'.\n+     This happens on machines that don't have a 387 FPU chip.  On 386\n+     machines, the system kernel is supposed to emulate the 387 when you\n+     don't have one.  The crash is due to a bug in the emulator.\n+\n+     One of these systems is the Unix from Interactive Systems: 386/ix.\n+     On this system, an alternate emulator is provided, and it does\n+     work.  To use it, execute this command as super-user:\n+\n+          ln /etc/emulator.rel1 /etc/emulator\n+\n+     and then reboot the system.  (The default emulator file remains\n+     present under the name `emulator.dflt'.)\n+\n+     Try using `/etc/emulator.att', if you have such a problem on the\n+     SCO system.\n+\n+     Another system which has this problem is Esix.  We don't know\n+     whether it has an alternate emulator that works.\n+\n+     On NetBSD 0.8, a similar problem manifests itself as these error\n+     messages:\n+\n+          enquire.c: In function `fprop':\n+          enquire.c:2328: floating overflow\n+\n+   * On SCO systems, when compiling GNU CC with the system's compiler,\n+     do not use `-O'.  Some versions of the system's compiler miscompile\n+     GNU CC with `-O'.\n+\n+   * Sometimes on a Sun 4 you may observe a crash in the program\n+     `genflags' or `genoutput' while building GNU CC.  This is said to\n+     be due to a bug in `sh'.  You can probably get around it by running\n+     `genflags' or `genoutput' manually and then retrying the `make'.\n+\n+   * On Solaris 2, executables of GNU CC version 2.0.2 are commonly\n+     available, but they have a bug that shows up when compiling current\n+     versions of GNU CC: undefined symbol errors occur during assembly\n+     if you use `-g'.\n+\n+     The solution is to compile the current version of GNU CC without\n+     `-g'.  That makes a working compiler which you can use to recompile\n+     with `-g'.\n+\n+   * Solaris 2 comes with a number of optional OS packages.  Some of\n+     these packages are needed to use GNU CC fully.  If you did not\n+     install all optional packages when installing Solaris, you will\n+     need to verify that the packages that GNU CC needs are installed.\n+\n+     To check whether an optional package is installed, use the\n+     `pkginfo' command.  To add an optional package, use the `pkgadd'\n+     command.  For further details, see the Solaris documentation.\n+\n+     For Solaris 2.0 and 2.1, GNU CC needs six packages: `SUNWarc',\n+     `SUNWbtool', `SUNWesu', `SUNWhea', `SUNWlibm', and `SUNWtoo'.\n+\n+     For Solaris 2.2, GNU CC needs an additional seventh package:\n+     `SUNWsprot'.\n+\n+   * On Solaris 2, trying to use the linker and other tools in\n+     `/usr/ucb' to install GNU CC has been observed to cause trouble.\n+     For example, the linker may hang indefinitely.  The fix is to\n+     remove `/usr/ucb' from your `PATH'.\n+\n+   * If you use the 1.31 version of the MIPS assembler (such as was\n+     shipped with Ultrix 3.1), you will need to use the\n+     -fno-delayed-branch switch when optimizing floating point code.\n+     Otherwise, the assembler will complain when the GCC compiler fills\n+     a branch delay slot with a floating point instruction, such as\n+     `add.d'.\n+\n+   * If on a MIPS system you get an error message saying \"does not have\n+     gp sections for all it's [sic] sectons [sic]\", don't worry about\n+     it.  This happens whenever you use GAS with the MIPS linker, but\n+     there is not really anything wrong, and it is okay to use the\n+     output file.  You can stop such warnings by installing the GNU\n+     linker.\n+\n+     It would be nice to extend GAS to produce the gp tables, but they\n+     are optional, and there should not be a warning about their\n+     absence.\n+\n+   * In Ultrix 4.0 on the MIPS machine, `stdio.h' does not work with GNU\n+     CC at all unless it has been fixed with `fixincludes'.  This causes\n+     problems in building GNU CC.  Once GNU CC is installed, the\n+     problems go away.\n+\n+     To work around this problem, when making the stage 1 compiler,\n+     specify this option to Make:\n+\n+          GCC_FOR_TARGET=\"./xgcc -B./ -I./include\"\n+\n+     When making stage 2 and stage 3, specify this option:\n+\n+          CFLAGS=\"-g -I./include\"\n+\n+   * Users have reported some problems with version 2.0 of the MIPS\n+     compiler tools that were shipped with Ultrix 4.1.  Version 2.10\n+     which came with Ultrix 4.2 seems to work fine.\n+\n+     Users have also reported some problems with version 2.20 of the\n+     MIPS compiler tools that were shipped with RISC/os 4.x.  The\n+     earlier version 2.11 seems to work fine.\n+\n+   * Some versions of the MIPS linker will issue an assertion failure\n+     when linking code that uses `alloca' against shared libraries on\n+     RISC-OS 5.0, and DEC's OSF/1 systems.  This is a bug in the\n+     linker, that is supposed to be fixed in future revisions.  To\n+     protect against this, GNU CC passes `-non_shared' to the linker\n+     unless you pass an explicit `-shared' or `-call_shared' switch.\n+\n+   * On System V release 3, you may get this error message while\n+     linking:\n+\n+          ld fatal: failed to write symbol name SOMETHING\n+           in strings table for file WHATEVER\n+\n+     This probably indicates that the disk is full or your ULIMIT won't\n+     allow the file to be as large as it needs to be.\n+\n+     This problem can also result because the kernel parameter `MAXUMEM'\n+     is too small.  If so, you must regenerate the kernel and make the\n+     value much larger.  The default value is reported to be 1024; a\n+     value of 32768 is said to work.  Smaller values may also work.\n+\n+   * On System V, if you get an error like this,\n+\n+          /usr/local/lib/bison.simple: In function `yyparse':\n+          /usr/local/lib/bison.simple:625: virtual memory exhausted\n+\n+     that too indicates a problem with disk space, ULIMIT, or `MAXUMEM'.\n+\n+   * Current GNU CC versions probably do not work on version 2 of the\n+     NeXT operating system.\n+\n+   * On NeXTStep 3.0, the Objective C compiler does not work, due,\n+     apparently, to a kernel bug that it happens to trigger.  This\n+     problem does not happen on 3.1.\n+\n+   * On the Tower models 4N0 and 6N0, by default a process is not\n+     allowed to have more than one megabyte of memory.  GNU CC cannot\n+     compile itself (or many other programs) with `-O' in that much\n+     memory.\n+\n+     To solve this problem, reconfigure the kernel adding the following\n+     line to the configuration file:\n+\n+          MAXUMEM = 4096\n+\n+   * On HP 9000 series 300 or 400 running HP-UX release 8.0, there is a\n+     bug in the assembler that must be fixed before GNU CC can be\n+     built.  This bug manifests itself during the first stage of\n+     compilation, while building `libgcc2.a':\n+\n+          _floatdisf\n+          cc1: warning: `-g' option not supported on this version of GCC\n+          cc1: warning: `-g1' option not supported on this version of GCC\n+          ./xgcc: Internal compiler error: program as got fatal signal 11\n+\n+     A patched version of the assembler is available by anonymous ftp\n+     from `altdorf.ai.mit.edu' as the file\n+     `archive/cph/hpux-8.0-assembler'.  If you have HP software support,\n+     the patch can also be obtained directly from HP, as described in\n+     the following note:\n+\n+          This is the patched assembler, to patch SR#1653-010439, where\n+          the assembler aborts on floating point constants.\n+\n+          The bug is not really in the assembler, but in the shared\n+          library version of the function \"cvtnum(3c)\".  The bug on\n+          \"cvtnum(3c)\" is SR#4701-078451.  Anyway, the attached\n+          assembler uses the archive library version of \"cvtnum(3c)\"\n+          and thus does not exhibit the bug.\n+\n+     This patch is also known as PHCO_4484.\n+\n+   * On HP-UX version 8.05, but not on 8.07 or more recent versions,\n+     the `fixproto' shell script triggers a bug in the system shell.\n+     If you encounter this problem, upgrade your operating system or\n+     use BASH (the GNU shell) to run `fixproto'.\n+\n+   * Some versions of the Pyramid C compiler are reported to be unable\n+     to compile GNU CC.  You must use an older version of GNU CC for\n+     bootstrapping.  One indication of this problem is if you get a\n+     crash when GNU CC compiles the function `muldi3' in file\n+     `libgcc2.c'.\n+\n+     You may be able to succeed by getting GNU CC version 1, installing\n+     it, and using it to compile GNU CC version 2.  The bug in the\n+     Pyramid C compiler does not seem to affect GNU CC version 1.\n+\n+   * There may be similar problems on System V Release 3.1 on 386\n+     systems.\n+\n+   * On the Intel Paragon (an i860 machine), if you are using operating\n+     system version 1.0, you will get warnings or errors about\n+     redefinition of `va_arg' when you build GNU CC.\n+\n+     If this happens, then you need to link most programs with the\n+     library `iclib.a'.  You must also modify `stdio.h' as follows:\n+     before the lines\n+\n+          #if     defined(__i860__) && !defined(_VA_LIST)\n+          #include <va_list.h>\n+\n+     insert the line\n+\n+          #if __PGC__\n+\n+     and after the lines\n+\n+          extern int  vprintf(const char *, va_list );\n+          extern int  vsprintf(char *, const char *, va_list );\n+          #endif\n+\n+     insert the line\n+\n+          #endif /* __PGC__ */\n+\n+     These problems don't exist in operating system version 1.1.\n+\n+   * On the Altos 3068, programs compiled with GNU CC won't work unless\n+     you fix a kernel bug.  This happens using system versions V.2.2\n+     1.0gT1 and V.2.2 1.0e and perhaps later versions as well.  See the\n+     file `README.ALTOS'.\n+\n+   * You will get several sorts of compilation and linking errors on the\n+     we32k if you don't follow the special instructions.  *Note\n+     Configurations::.\n+\n+   * A bug in the HP-UX 8.05 (and earlier) shell will cause the fixproto\n+     program to report an error of the form:\n+\n+          ./fixproto: sh internal 1K buffer overflow\n+\n+     To fix this, change the first line of the fixproto script to look\n+     like:\n+\n+          #!/bin/ksh\n+\n+\u001f\n+File: gcc.info,  Node: Cross-Compiler Problems,  Next: Interoperation,  Prev: Installation Problems,  Up: Trouble\n+\n+Cross-Compiler Problems\n+=======================\n+\n+   You may run into problems with cross compilation on certain machines,\n+for several reasons.\n+\n+   * Cross compilation can run into trouble for certain machines because\n+     some target machines' assemblers require floating point numbers to\n+     be written as *integer* constants in certain contexts.\n+\n+     The compiler writes these integer constants by examining the\n+     floating point value as an integer and printing that integer,\n+     because this is simple to write and independent of the details of\n+     the floating point representation.  But this does not work if the\n+     compiler is running on a different machine with an incompatible\n+     floating point format, or even a different byte-ordering.\n+\n+     In addition, correct constant folding of floating point values\n+     requires representing them in the target machine's format.  (The C\n+     standard does not quite require this, but in practice it is the\n+     only way to win.)\n+\n+     It is now possible to overcome these problems by defining macros\n+     such as `REAL_VALUE_TYPE'.  But doing so is a substantial amount of\n+     work for each target machine.  *Note Cross-compilation::.\n+\n+   * At present, the program `mips-tfile' which adds debug support to\n+     object files on MIPS systems does not work in a cross compile\n+     environment.\n+\n+\u001f\n+File: gcc.info,  Node: Interoperation,  Next: External Bugs,  Prev: Cross-Compiler Problems,  Up: Trouble\n+\n+Interoperation\n+==============\n+\n+   This section lists various difficulties encountered in using GNU C or\n+GNU C++ together with other compilers or with the assemblers, linkers,\n+libraries and debuggers on certain systems.\n+\n+   * Objective C does not work on the RS/6000.\n+\n+   * GNU C++ does not do name mangling in the same way as other C++\n+     compilers.  This means that object files compiled with one compiler\n+     cannot be used with another.\n+\n+     This effect is intentional, to protect you from more subtle\n+     problems.  Compilers differ as to many internal details of C++\n+     implementation, including: how class instances are laid out, how\n+     multiple inheritance is implemented, and how virtual function\n+     calls are handled.  If the name encoding were made the same, your\n+     programs would link against libraries provided from other\n+     compilers--but the programs would then crash when run.\n+     Incompatible libraries are then detected at link time, rather than\n+     at run time.\n+\n+   * Older GDB versions sometimes fail to read the output of GNU CC\n+     version 2.  If you have trouble, get GDB version 4.4 or later.\n+\n+   * DBX rejects some files produced by GNU CC, though it accepts\n+     similar constructs in output from PCC.  Until someone can supply a\n+     coherent description of what is valid DBX input and what is not,\n+     there is nothing I can do about these problems.  You are on your\n+     own.\n+\n+   * The GNU assembler (GAS) does not support PIC.  To generate PIC\n+     code, you must use some other assembler, such as `/bin/as'.\n+\n+   * On some BSD systems, including some versions of Ultrix, use of\n+     profiling causes static variable destructors (currently used only\n+     in C++) not to be run.\n+\n+   * Use of `-I/usr/include' may cause trouble.\n+\n+     Many systems come with header files that won't work with GNU CC\n+     unless corrected by `fixincludes'.  The corrected header files go\n+     in a new directory; GNU CC searches this directory before\n+     `/usr/include'.  If you use `-I/usr/include', this tells GNU CC to\n+     search `/usr/include' earlier on, before the corrected headers.\n+     The result is that you get the uncorrected header files.\n+\n+     Instead, you should use these options (when compiling C programs):\n+\n+          -I/usr/local/lib/gcc-lib/TARGET/VERSION/include -I/usr/include\n+\n+     For C++ programs, GNU CC also uses a special directory that\n+     defines C++ interfaces to standard C subroutines.  This directory\n+     is meant to be searched *before* other standard include\n+     directories, so that it takes precedence.  If you are compiling\n+     C++ programs and specifying include directories explicitly, use\n+     this option first, then the two options above:\n+\n+          -I/usr/local/lib/g++-include\n+\n+   * On some SGI systems, when you use `-lgl_s' as an option, it gets\n+     translated magically to `-lgl_s -lX11_s -lc_s'.  Naturally, this\n+     does not happen when you use GNU CC.  You must specify all three\n+     options explicitly.\n+\n+   * On a Sparc, GNU CC aligns all values of type `double' on an 8-byte\n+     boundary, and it expects every `double' to be so aligned.  The Sun\n+     compiler usually gives `double' values 8-byte alignment, with one\n+     exception: function arguments of type `double' may not be aligned.\n+\n+     As a result, if a function compiled with Sun CC takes the address\n+     of an argument of type `double' and passes this pointer of type\n+     `double *' to a function compiled with GNU CC, dereferencing the\n+     pointer may cause a fatal signal.\n+\n+     One way to solve this problem is to compile your entire program\n+     with GNU CC.  Another solution is to modify the function that is\n+     compiled with Sun CC to copy the argument into a local variable;\n+     local variables are always properly aligned.  A third solution is\n+     to modify the function that uses the pointer to dereference it via\n+     the following function `access_double' instead of directly with\n+     `*':\n+\n+          inline double\n+          access_double (double *unaligned_ptr)\n+          {\n+            union d2i { double d; int i[2]; };\n+          \n+            union d2i *p = (union d2i *) unaligned_ptr;\n+            union d2i u;\n+          \n+            u.i[0] = p->i[0];\n+            u.i[1] = p->i[1];\n+          \n+            return u.d;\n+          }\n+\n+     Storing into the pointer can be done likewise with the same union.\n+\n+   * On Solaris, the `malloc' function in the `libmalloc.a' library may\n+     allocate memory that is only 4 byte aligned.  Since GNU CC on the\n+     Sparc assumes that doubles are 8 byte aligned, this may result in a\n+     fatal signal if doubles are stored in memory allocated by the\n+     `libmalloc.a' library.\n+\n+     The solution is to not use the `libmalloc.a' library.  Use instead\n+     `malloc' and related functions from `libc.a'; they do not have\n+     this problem.\n+\n+   * Sun forgot to include a static version of `libdl.a' with some\n+     versions of SunOS (mainly 4.1).  This results in undefined symbols\n+     when linking static binaries (that is, if you use `-static').  If\n+     you see undefined symbols `_dlclose', `_dlsym' or `_dlopen' when\n+     linking, compile and link against the file `mit/util/misc/dlsym.c'\n+     from the MIT version of X windows.\n+\n+   * The 128-bit long double format that the Sparc port supports\n+     currently works by using the architecturally defined quad-word\n+     floating point instructions.  Since there is no hardware that\n+     supports these instructions they must be emulated by the operating\n+     system.  Long doubles do not work in Sun OS versions 4.0.3 and\n+     earlier, because the kernel emulator uses an obsolete and\n+     incompatible format.  Long doubles do not work in Sun OS version\n+     4.1.1 due to a problem in a Sun library.  Long doubles do work on\n+     Sun OS versions 4.1.2 and higher, but GNU CC does not enable them\n+     by default.  Long doubles appear to work in Sun OS 5.x (Solaris\n+     2.x).\n+\n+   * On HP-UX version 9.01 on the HP PA, the HP compiler `cc' does not\n+     compile GNU CC correctly.  We do not yet know why.  However, GNU CC\n+     compiled on earlier HP-UX versions works properly on HP-UX 9.01\n+     and can compile itself properly on 9.01.\n+\n+   * On the HP PA machine, ADB sometimes fails to work on functions\n+     compiled with GNU CC.  Specifically, it fails to work on functions\n+     that use `alloca' or variable-size arrays.  This is because GNU CC\n+     doesn't generate HP-UX unwind descriptors for such functions.  It\n+     may even be impossible to generate them.\n+\n+   * Debugging (`-g') is not supported on the HP PA machine, unless you\n+     use the preliminary GNU tools (*note Installation::.).\n+\n+   * Taking the address of a label may generate errors from the HP-UX\n+     PA assembler.  GAS for the PA does not have this problem.\n+\n+   * Using floating point parameters for indirect calls to static\n+     functions will not work when using the HP assembler.  There simply\n+     is no way for GCC to specify what registers hold arguments for\n+     static functions when using the HP assembler.  GAS for the PA does\n+     not have this problem.\n+\n+   * In extremely rare cases involving some very large functions you may\n+     receive errors from the HP linker complaining about an out of\n+     bounds unconditional branch offset.  This used to occur more often\n+     in previous versions of GNU CC, but is now exceptionally rare.  If\n+     you should run into it, you can work around by making your\n+     function smaller.\n+\n+   * GNU CC compiled code sometimes emits warnings from the HP-UX\n+     assembler of the form:\n+\n+          (warning) Use of GR3 when\n+            frame >= 8192 may cause conflict.\n+\n+     These warnings are harmless and can be safely ignored.\n+\n+   * The current version of the assembler (`/bin/as') for the RS/6000\n+     has certain problems that prevent the `-g' option in GCC from\n+     working.  Note that `Makefile.in' uses `-g' by default when\n+     compiling `libgcc2.c'.\n+\n+     IBM has produced a fixed version of the assembler.  The upgraded\n+     assembler unfortunately was not included in any of the AIX 3.2\n+     update PTF releases (3.2.2, 3.2.3, or 3.2.3e).  Users of AIX 3.1\n+     should request PTF U403044 from IBM and users of AIX 3.2 should\n+     request PTF U416277.  See the file `README.RS6000' for more\n+     details on these updates.\n+\n+     You can test for the presense of a fixed assembler by using the\n+     command\n+\n+          as -u < /dev/null\n+\n+     If the command exits normally, the assembler fix already is\n+     installed.  If the assembler complains that \"-u\" is an unknown\n+     flag, you need to order the fix.\n+\n+   * On the IBM RS/6000, compiling code of the form\n+\n+          extern int foo;\n+          \n+          ... foo ...\n+          \n+          static int foo;\n+\n+     will cause the linker to report an undefined symbol `foo'.\n+     Although this behavior differs from most other systems, it is not a\n+     bug because redefining an `extern' variable as `static' is\n+     undefined in ANSI C.\n+\n+   * AIX on the RS/6000 provides support (NLS) for environments outside\n+     of the United States.  Compilers and assemblers use NLS to support\n+     locale-specific representations of various objects including\n+     floating-point numbers (\".\" vs \",\" for separating decimal\n+     fractions).  There have been problems reported where the library\n+     linked with GCC does not produce the same floating-point formats\n+     that the assembler accepts.  If you have this problem, set the\n+     LANG environment variable to \"C\" or \"En_US\".\n+\n+   * Even if you specify `-fdollars-in-identifiers', you cannot\n+     successfully use `$' in identifiers on the RS/6000 due to a\n+     restriction in the IBM assembler.  GAS supports these identifiers.\n+\n+   * On the RS/6000, XLC version 1.3.0.0 will miscompile `jump.c'.  XLC\n+     version 1.3.0.1 or later fixes this problem.  You can obtain\n+     XLC-1.3.0.2 by requesting PTF 421749 from IBM.\n+\n+   * There is an assembler bug in versions of DG/UX prior to 5.4.2.01\n+     that occurs when the `fldcr' instruction is used.  GNU CC uses\n+     `fldcr' on the 88100 to serialize volatile memory references.  Use\n+     the option `-mno-serialize-volatile' if your version of the\n+     assembler has this bug.\n+\n+   * On VMS, GAS versions 1.38.1 and earlier may cause spurious warning\n+     messages from the linker.  These warning messages complain of\n+     mismatched psect attributes.  You can ignore them.  *Note VMS\n+     Install::.\n+\n+   * On NewsOS version 3, if you include both of the files `stddef.h'\n+     and `sys/types.h', you get an error because there are two typedefs\n+     of `size_t'.  You should change `sys/types.h' by adding these\n+     lines around the definition of `size_t':\n+\n+          #ifndef _SIZE_T\n+          #define _SIZE_T\n+          ACTUAL TYPEDEF HERE\n+          #endif\n+\n+   * On the Alliant, the system's own convention for returning\n+     structures and unions is unusual, and is not compatible with GNU\n+     CC no matter what options are used.\n+\n+   * On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different\n+     convention for structure and union returning.  Use the option\n+     `-mhc-struct-return' to tell GNU CC to use a convention compatible\n+     with it.\n+\n+   * On Ultrix, the Fortran compiler expects registers 2 through 5 to\n+     be saved by function calls.  However, the C compiler uses\n+     conventions compatible with BSD Unix: registers 2 through 5 may be\n+     clobbered by function calls.\n+\n+     GNU CC uses the same convention as the Ultrix C compiler.  You can\n+     use these options to produce code compatible with the Fortran\n+     compiler:\n+\n+          -fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5\n+\n+   * On the WE32k, you may find that programs compiled with GNU CC do\n+     not work with the standard shared C library.  You may need to link\n+     with the ordinary C compiler.  If you do so, you must specify the\n+     following options:\n+\n+          -L/usr/local/lib/gcc-lib/we32k-att-sysv/2.7.1 -lgcc -lc_s\n+\n+     The first specifies where to find the library `libgcc.a' specified\n+     with the `-lgcc' option.\n+\n+     GNU CC does linking by invoking `ld', just as `cc' does, and there\n+     is no reason why it *should* matter which compilation program you\n+     use to invoke `ld'.  If someone tracks this problem down, it can\n+     probably be fixed easily.\n+\n+   * On the Alpha, you may get assembler errors about invalid syntax as\n+     a result of floating point constants.  This is due to a bug in the\n+     C library functions `ecvt', `fcvt' and `gcvt'.  Given valid\n+     floating point numbers, they sometimes print `NaN'.\n+\n+   * On Irix 4.0.5F (and perhaps in some other versions), an assembler\n+     bug sometimes reorders instructions incorrectly when optimization\n+     is turned on.  If you think this may be happening to you, try\n+     using the GNU assembler; GAS version 2.1 supports ECOFF on Irix.\n+\n+     Or use the `-noasmopt' option when you compile GNU CC with itself,\n+     and then again when you compile your program.  (This is a temporary\n+     kludge to turn off assembler optimization on Irix.)  If this\n+     proves to be what you need, edit the assembler spec in the file\n+     `specs' so that it unconditionally passes `-O0' to the assembler,\n+     and never passes `-O2' or `-O3'.\n+"}, {"sha": "7cc8309c09c6d4b0cf76fae90db78f0facb7e372", "filename": "gcc/gcc.info-12", "status": "added", "additions": 999, "deletions": 0, "changes": 999, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-12", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-12", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-12?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,999 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: External Bugs,  Next: Incompatibilities,  Prev: Interoperation,  Up: Trouble\n+\n+Problems Compiling Certain Programs\n+===================================\n+\n+   Certain programs have problems compiling.\n+\n+   * Parse errors may occur compiling X11 on a Decstation running\n+     Ultrix 4.2 because of problems in DEC's versions of the X11 header\n+     files `X11/Xlib.h' and `X11/Xutil.h'.  People recommend adding\n+     `-I/usr/include/mit' to use the MIT versions of the header files,\n+     using the `-traditional' switch to turn off ANSI C, or fixing the\n+     header files by adding this:\n+\n+          #ifdef __STDC__\n+          #define NeedFunctionPrototypes 0\n+          #endif\n+\n+   * If you have trouble compiling Perl on a SunOS 4 system, it may be\n+     because Perl specifies `-I/usr/ucbinclude'.  This accesses the\n+     unfixed header files.  Perl specifies the options\n+\n+          -traditional -Dvolatile=__volatile__\n+          -I/usr/include/sun -I/usr/ucbinclude\n+          -fpcc-struct-return\n+\n+     most of which are unnecessary with GCC 2.4.5 and newer versions.\n+     You can make a properly working Perl by setting `ccflags' to\n+     `-fwritable-strings' (implied by the `-traditional' in the\n+     original options) and `cppflags' to empty in `config.sh', then\n+     typing `./doSH; make depend; make'.\n+\n+   * On various 386 Unix systems derived from System V, including SCO,\n+     ISC, and ESIX, you may get error messages about running out of\n+     virtual memory while compiling certain programs.\n+\n+     You can prevent this problem by linking GNU CC with the GNU malloc\n+     (which thus replaces the malloc that comes with the system).  GNU\n+     malloc is available as a separate package, and also in the file\n+     `src/gmalloc.c' in the GNU Emacs 19 distribution.\n+\n+     If you have installed GNU malloc as a separate library package,\n+     use this option when you relink GNU CC:\n+\n+          MALLOC=/usr/local/lib/libgmalloc.a\n+\n+     Alternatively, if you have compiled `gmalloc.c' from Emacs 19, copy\n+     the object file to `gmalloc.o' and use this option when you relink\n+     GNU CC:\n+\n+          MALLOC=gmalloc.o\n+\n+\u001f\n+File: gcc.info,  Node: Incompatibilities,  Next: Fixed Headers,  Prev: External Bugs,  Up: Trouble\n+\n+Incompatibilities of GNU CC\n+===========================\n+\n+   There are several noteworthy incompatibilities between GNU C and most\n+existing (non-ANSI) versions of C.  The `-traditional' option\n+eliminates many of these incompatibilities, *but not all*, by telling\n+GNU C to behave like the other C compilers.\n+\n+   * GNU CC normally makes string constants read-only.  If several\n+     identical-looking string constants are used, GNU CC stores only one\n+     copy of the string.\n+\n+     One consequence is that you cannot call `mktemp' with a string\n+     constant argument.  The function `mktemp' always alters the string\n+     its argument points to.\n+\n+     Another consequence is that `sscanf' does not work on some systems\n+     when passed a string constant as its format control string or\n+     input.  This is because `sscanf' incorrectly tries to write into\n+     the string constant.  Likewise `fscanf' and `scanf'.\n+\n+     The best solution to these problems is to change the program to use\n+     `char'-array variables with initialization strings for these\n+     purposes instead of string constants.  But if this is not possible,\n+     you can use the `-fwritable-strings' flag, which directs GNU CC to\n+     handle string constants the same way most C compilers do.\n+     `-traditional' also has this effect, among others.\n+\n+   * `-2147483648' is positive.\n+\n+     This is because 2147483648 cannot fit in the type `int', so\n+     (following the ANSI C rules) its data type is `unsigned long int'.\n+     Negating this value yields 2147483648 again.\n+\n+   * GNU CC does not substitute macro arguments when they appear inside\n+     of string constants.  For example, the following macro in GNU CC\n+\n+          #define foo(a) \"a\"\n+\n+     will produce output `\"a\"' regardless of what the argument A is.\n+\n+     The `-traditional' option directs GNU CC to handle such cases\n+     (among others) in the old-fashioned (non-ANSI) fashion.\n+\n+   * When you use `setjmp' and `longjmp', the only automatic variables\n+     guaranteed to remain valid are those declared `volatile'.  This is\n+     a consequence of automatic register allocation.  Consider this\n+     function:\n+\n+          jmp_buf j;\n+          \n+          foo ()\n+          {\n+            int a, b;\n+          \n+            a = fun1 ();\n+            if (setjmp (j))\n+              return a;\n+          \n+            a = fun2 ();\n+            /* `longjmp (j)' may occur in `fun3'. */\n+            return a + fun3 ();\n+          }\n+\n+     Here `a' may or may not be restored to its first value when the\n+     `longjmp' occurs.  If `a' is allocated in a register, then its\n+     first value is restored; otherwise, it keeps the last value stored\n+     in it.\n+\n+     If you use the `-W' option with the `-O' option, you will get a\n+     warning when GNU CC thinks such a problem might be possible.\n+\n+     The `-traditional' option directs GNU C to put variables in the\n+     stack by default, rather than in registers, in functions that call\n+     `setjmp'.  This results in the behavior found in traditional C\n+     compilers.\n+\n+   * Programs that use preprocessing directives in the middle of macro\n+     arguments do not work with GNU CC.  For example, a program like\n+     this will not work:\n+\n+          foobar (\n+          #define luser\n+                  hack)\n+\n+     ANSI C does not permit such a construct.  It would make sense to\n+     support it when `-traditional' is used, but it is too much work to\n+     implement.\n+\n+   * Declarations of external variables and functions within a block\n+     apply only to the block containing the declaration.  In other\n+     words, they have the same scope as any other declaration in the\n+     same place.\n+\n+     In some other C compilers, a `extern' declaration affects all the\n+     rest of the file even if it happens within a block.\n+\n+     The `-traditional' option directs GNU C to treat all `extern'\n+     declarations as global, like traditional compilers.\n+\n+   * In traditional C, you can combine `long', etc., with a typedef\n+     name, as shown here:\n+\n+          typedef int foo;\n+          typedef long foo bar;\n+\n+     In ANSI C, this is not allowed: `long' and other type modifiers\n+     require an explicit `int'.  Because this criterion is expressed by\n+     Bison grammar rules rather than C code, the `-traditional' flag\n+     cannot alter it.\n+\n+   * PCC allows typedef names to be used as function parameters.  The\n+     difficulty described immediately above applies here too.\n+\n+   * PCC allows whitespace in the middle of compound assignment\n+     operators such as `+='.  GNU CC, following the ANSI standard, does\n+     not allow this.  The difficulty described immediately above\n+     applies here too.\n+\n+   * GNU CC complains about unterminated character constants inside of\n+     preprocessing conditionals that fail.  Some programs have English\n+     comments enclosed in conditionals that are guaranteed to fail; if\n+     these comments contain apostrophes, GNU CC will probably report an\n+     error.  For example, this code would produce an error:\n+\n+          #if 0\n+          You can't expect this to work.\n+          #endif\n+\n+     The best solution to such a problem is to put the text into an\n+     actual C comment delimited by `/*...*/'.  However, `-traditional'\n+     suppresses these error messages.\n+\n+   * Many user programs contain the declaration `long time ();'.  In the\n+     past, the system header files on many systems did not actually\n+     declare `time', so it did not matter what type your program\n+     declared it to return.  But in systems with ANSI C headers, `time'\n+     is declared to return `time_t', and if that is not the same as\n+     `long', then `long time ();' is erroneous.\n+\n+     The solution is to change your program to use `time_t' as the\n+     return type of `time'.\n+\n+   * When compiling functions that return `float', PCC converts it to a\n+     double.  GNU CC actually returns a `float'.  If you are concerned\n+     with PCC compatibility, you should declare your functions to return\n+     `double'; you might as well say what you mean.\n+\n+   * When compiling functions that return structures or unions, GNU CC\n+     output code normally uses a method different from that used on most\n+     versions of Unix.  As a result, code compiled with GNU CC cannot\n+     call a structure-returning function compiled with PCC, and vice\n+     versa.\n+\n+     The method used by GNU CC is as follows: a structure or union\n+     which is 1, 2, 4 or 8 bytes long is returned like a scalar.  A\n+     structure or union with any other size is stored into an address\n+     supplied by the caller (usually in a special, fixed register, but\n+     on some machines it is passed on the stack).  The\n+     machine-description macros `STRUCT_VALUE' and\n+     `STRUCT_INCOMING_VALUE' tell GNU CC where to pass this address.\n+\n+     By contrast, PCC on most target machines returns structures and\n+     unions of any size by copying the data into an area of static\n+     storage, and then returning the address of that storage as if it\n+     were a pointer value.  The caller must copy the data from that\n+     memory area to the place where the value is wanted.  GNU CC does\n+     not use this method because it is slower and nonreentrant.\n+\n+     On some newer machines, PCC uses a reentrant convention for all\n+     structure and union returning.  GNU CC on most of these machines\n+     uses a compatible convention when returning structures and unions\n+     in memory, but still returns small structures and unions in\n+     registers.\n+\n+     You can tell GNU CC to use a compatible convention for all\n+     structure and union returning with the option\n+     `-fpcc-struct-return'.\n+\n+   * GNU C complains about program fragments such as `0x74ae-0x4000'\n+     which appear to be two hexadecimal constants separated by the minus\n+     operator.  Actually, this string is a single \"preprocessing token\".\n+     Each such token must correspond to one token in C.  Since this\n+     does not, GNU C prints an error message.  Although it may appear\n+     obvious that what is meant is an operator and two values, the ANSI\n+     C standard specifically requires that this be treated as erroneous.\n+\n+     A \"preprocessing token\" is a \"preprocessing number\" if it begins\n+     with a digit and is followed by letters, underscores, digits,\n+     periods and `e+', `e-', `E+', or `E-' character sequences.\n+\n+     To make the above program fragment valid, place whitespace in\n+     front of the minus sign.  This whitespace will end the\n+     preprocessing number.\n+\n+\u001f\n+File: gcc.info,  Node: Fixed Headers,  Next: Standard Libraries,  Prev: Incompatibilities,  Up: Trouble\n+\n+Fixed Header Files\n+==================\n+\n+   GNU CC needs to install corrected versions of some system header\n+files.  This is because most target systems have some header files that\n+won't work with GNU CC unless they are changed.  Some have bugs, some\n+are incompatible with ANSI C, and some depend on special features of\n+other compilers.\n+\n+   Installing GNU CC automatically creates and installs the fixed header\n+files, by running a program called `fixincludes' (or for certain\n+targets an alternative such as `fixinc.svr4').  Normally, you don't\n+need to pay attention to this.  But there are cases where it doesn't do\n+the right thing automatically.\n+\n+   * If you update the system's header files, such as by installing a\n+     new system version, the fixed header files of GNU CC are not\n+     automatically updated.  The easiest way to update them is to\n+     reinstall GNU CC.  (If you want to be clever, look in the makefile\n+     and you can find a shortcut.)\n+\n+   * On some systems, in particular SunOS 4, header file directories\n+     contain machine-specific symbolic links in certain places.  This\n+     makes it possible to share most of the header files among hosts\n+     running the same version of SunOS 4 on different machine models.\n+\n+     The programs that fix the header files do not understand this\n+     special way of using symbolic links; therefore, the directory of\n+     fixed header files is good only for the machine model used to\n+     build it.\n+\n+     In SunOS 4, only programs that look inside the kernel will notice\n+     the difference between machine models.  Therefore, for most\n+     purposes, you need not be concerned about this.\n+\n+     It is possible to make separate sets of fixed header files for the\n+     different machine models, and arrange a structure of symbolic\n+     links so as to use the proper set, but you'll have to do this by\n+     hand.\n+\n+   * On Lynxos, GNU CC by default does not fix the header files.  This\n+     is because bugs in the shell cause the `fixincludes' script to\n+     fail.\n+\n+     This means you will encounter problems due to bugs in the system\n+     header files.  It may be no comfort that they aren't GNU CC's\n+     fault, but it does mean that there's nothing for us to do about\n+     them.\n+\n+\u001f\n+File: gcc.info,  Node: Standard Libraries,  Next: Disappointments,  Prev: Fixed Headers,  Up: Trouble\n+\n+Standard Libraries\n+==================\n+\n+   GNU CC by itself attempts to be what the ISO/ANSI C standard calls a\n+\"conforming freestanding implementation\".  This means all ANSI C\n+language features are available, as well as the contents of `float.h',\n+`limits.h', `stdarg.h', and `stddef.h'.  The rest of the C library is\n+supplied by the vendor of the operating system.  If that C library\n+doesn't conform to the C standards, then your programs might get\n+warnings (especially when using `-Wall') that you don't expect.\n+\n+   For example, the `sprintf' function on SunOS 4.1.3 returns `char *'\n+while the C standard says that `sprintf' returns an `int'.  The\n+`fixincludes' program could make the prototype for this function match\n+the Standard, but that would be wrong, since the function will still\n+return `char *'.\n+\n+   If you need a Standard compliant library, then you need to find one,\n+as GNU CC does not provide one.  The GNU C library (called `glibc') has\n+been ported to a number of operating systems, and provides ANSI/ISO,\n+POSIX, BSD and SystemV compatibility.  You could also ask your operating\n+system vendor if newer libraries are available.\n+\n+\u001f\n+File: gcc.info,  Node: Disappointments,  Next: C++ Misunderstandings,  Prev: Standard Libraries,  Up: Trouble\n+\n+Disappointments and Misunderstandings\n+=====================================\n+\n+   These problems are perhaps regrettable, but we don't know any\n+practical way around them.\n+\n+   * Certain local variables aren't recognized by debuggers when you\n+     compile with optimization.\n+\n+     This occurs because sometimes GNU CC optimizes the variable out of\n+     existence.  There is no way to tell the debugger how to compute the\n+     value such a variable \"would have had\", and it is not clear that\n+     would be desirable anyway.  So GNU CC simply does not mention the\n+     eliminated variable when it writes debugging information.\n+\n+     You have to expect a certain amount of disagreement between the\n+     executable and your source code, when you use optimization.\n+\n+   * Users often think it is a bug when GNU CC reports an error for code\n+     like this:\n+\n+          int foo (struct mumble *);\n+          \n+          struct mumble { ... };\n+          \n+          int foo (struct mumble *x)\n+          { ... }\n+\n+     This code really is erroneous, because the scope of `struct\n+     mumble' in the prototype is limited to the argument list\n+     containing it.  It does not refer to the `struct mumble' defined\n+     with file scope immediately below--they are two unrelated types\n+     with similar names in different scopes.\n+\n+     But in the definition of `foo', the file-scope type is used\n+     because that is available to be inherited.  Thus, the definition\n+     and the prototype do not match, and you get an error.\n+\n+     This behavior may seem silly, but it's what the ANSI standard\n+     specifies.  It is easy enough for you to make your code work by\n+     moving the definition of `struct mumble' above the prototype.\n+     It's not worth being incompatible with ANSI C just to avoid an\n+     error for the example shown above.\n+\n+   * Accesses to bitfields even in volatile objects works by accessing\n+     larger objects, such as a byte or a word.  You cannot rely on what\n+     size of object is accessed in order to read or write the bitfield;\n+     it may even vary for a given bitfield according to the precise\n+     usage.\n+\n+     If you care about controlling the amount of memory that is\n+     accessed, use volatile but do not use bitfields.\n+\n+   * GNU CC comes with shell scripts to fix certain known problems in\n+     system header files.  They install corrected copies of various\n+     header files in a special directory where only GNU CC will\n+     normally look for them.  The scripts adapt to various systems by\n+     searching all the system header files for the problem cases that\n+     we know about.\n+\n+     If new system header files are installed, nothing automatically\n+     arranges to update the corrected header files.  You will have to\n+     reinstall GNU CC to fix the new header files.  More specifically,\n+     go to the build directory and delete the files `stmp-fixinc' and\n+     `stmp-headers', and the subdirectory `include'; then do `make\n+     install' again.\n+\n+   * On 68000 and x86 systems, for instance, you can get paradoxical\n+     results if you test the precise values of floating point numbers.\n+     For example, you can find that a floating point value which is not\n+     a NaN is not equal to itself.  This results from the fact that the\n+     floating point registers hold a few more bits of precision than\n+     fit in a `double' in memory.  Compiled code moves values between\n+     memory and floating point registers at its convenience, and moving\n+     them into memory truncates them.\n+\n+     You can partially avoid this problem by using the `-ffloat-store'\n+     option (*note Optimize Options::.).\n+\n+   * On the MIPS, variable argument functions using `varargs.h' cannot\n+     have a floating point value for the first argument.  The reason\n+     for this is that in the absence of a prototype in scope, if the\n+     first argument is a floating point, it is passed in a floating\n+     point register, rather than an integer register.\n+\n+     If the code is rewritten to use the ANSI standard `stdarg.h'\n+     method of variable arguments, and the prototype is in scope at the\n+     time of the call, everything will work fine.\n+\n+   * On the H8/300 and H8/300H, variable argument functions must be\n+     implemented using the ANSI standard `stdarg.h' method of variable\n+     arguments.  Furthermore, calls to functions using `stdarg.h'\n+     variable arguments must have a prototype for the called function\n+     in scope at the time of the call.\n+\n+\u001f\n+File: gcc.info,  Node: C++ Misunderstandings,  Next: Protoize Caveats,  Prev: Disappointments,  Up: Trouble\n+\n+Common Misunderstandings with GNU C++\n+=====================================\n+\n+   C++ is a complex language and an evolving one, and its standard\n+definition (the ANSI C++ draft standard) is also evolving.  As a result,\n+your C++ compiler may occasionally surprise you, even when its behavior\n+is correct.  This section discusses some areas that frequently give\n+rise to questions of this sort.\n+\n+* Menu:\n+\n+* Static Definitions::  Static member declarations are not definitions\n+* Temporaries::         Temporaries may vanish before you expect\n+\n+\u001f\n+File: gcc.info,  Node: Static Definitions,  Next: Temporaries,  Up: C++ Misunderstandings\n+\n+Declare *and* Define Static Members\n+-----------------------------------\n+\n+   When a class has static data members, it is not enough to *declare*\n+the static member; you must also *define* it.  For example:\n+\n+     class Foo\n+     {\n+       ...\n+       void method();\n+       static int bar;\n+     };\n+\n+   This declaration only establishes that the class `Foo' has an `int'\n+named `Foo::bar', and a member function named `Foo::method'.  But you\n+still need to define *both* `method' and `bar' elsewhere.  According to\n+the draft ANSI standard, you must supply an initializer in one (and\n+only one) source file, such as:\n+\n+     int Foo::bar = 0;\n+\n+   Other C++ compilers may not correctly implement the standard\n+behavior.  As a result, when you switch to `g++' from one of these\n+compilers, you may discover that a program that appeared to work\n+correctly in fact does not conform to the standard: `g++' reports as\n+undefined symbols any static data members that lack definitions.\n+\n+\u001f\n+File: gcc.info,  Node: Temporaries,  Prev: Static Definitions,  Up: C++ Misunderstandings\n+\n+Temporaries May Vanish Before You Expect\n+----------------------------------------\n+\n+   It is dangerous to use pointers or references to *portions* of a\n+temporary object.  The compiler may very well delete the object before\n+you expect it to, leaving a pointer to garbage.  The most common place\n+where this problem crops up is in classes like the libg++ `String'\n+class, that define a conversion function to type `char *' or `const\n+char *'.  However, any class that returns a pointer to some internal\n+structure is potentially subject to this problem.\n+\n+   For example, a program may use a function `strfunc' that returns\n+`String' objects, and another function `charfunc' that operates on\n+pointers to `char':\n+\n+     String strfunc ();\n+     void charfunc (const char *);\n+\n+In this situation, it may seem natural to write\n+`charfunc (strfunc ());' based on the knowledge that class `String' has\n+an explicit conversion to `char' pointers.  However, what really\n+happens is akin to `charfunc (strfunc ().convert ());', where the\n+`convert' method is a function to do the same data conversion normally\n+performed by a cast.  Since the last use of the temporary `String'\n+object is the call to the conversion function, the compiler may delete\n+that object before actually calling `charfunc'.  The compiler has no\n+way of knowing that deleting the `String' object will invalidate the\n+pointer.  The pointer then points to garbage, so that by the time\n+`charfunc' is called, it gets an invalid argument.\n+\n+   Code like this may run successfully under some other compilers,\n+especially those that delete temporaries relatively late.  However, the\n+GNU C++ behavior is also standard-conforming, so if your program depends\n+on late destruction of temporaries it is not portable.\n+\n+   If you think this is surprising, you should be aware that the ANSI\n+C++ committee continues to debate the lifetime-of-temporaries problem.\n+\n+   For now, at least, the safe way to write such code is to give the\n+temporary a name, which forces it to remain until the end of the scope\n+of the name.  For example:\n+\n+     String& tmp = strfunc ();\n+     charfunc (tmp);\n+\n+\u001f\n+File: gcc.info,  Node: Protoize Caveats,  Next: Non-bugs,  Prev: C++ Misunderstandings,  Up: Trouble\n+\n+Caveats of using `protoize'\n+===========================\n+\n+   The conversion programs `protoize' and `unprotoize' can sometimes\n+change a source file in a way that won't work unless you rearrange it.\n+\n+   * `protoize' can insert references to a type name or type tag before\n+     the definition, or in a file where they are not defined.\n+\n+     If this happens, compiler error messages should show you where the\n+     new references are, so fixing the file by hand is straightforward.\n+\n+   * There are some C constructs which `protoize' cannot figure out.\n+     For example, it can't determine argument types for declaring a\n+     pointer-to-function variable; this you must do by hand.  `protoize'\n+     inserts a comment containing `???' each time it finds such a\n+     variable; so you can find all such variables by searching for this\n+     string.  ANSI C does not require declaring the argument types of\n+     pointer-to-function types.\n+\n+   * Using `unprotoize' can easily introduce bugs.  If the program\n+     relied on prototypes to bring about conversion of arguments, these\n+     conversions will not take place in the program without prototypes.\n+     One case in which you can be sure `unprotoize' is safe is when you\n+     are removing prototypes that were made with `protoize'; if the\n+     program worked before without any prototypes, it will work again\n+     without them.\n+\n+     You can find all the places where this problem might occur by\n+     compiling the program with the `-Wconversion' option.  It prints a\n+     warning whenever an argument is converted.\n+\n+   * Both conversion programs can be confused if there are macro calls\n+     in and around the text to be converted.  In other words, the\n+     standard syntax for a declaration or definition must not result\n+     from expanding a macro.  This problem is inherent in the design of\n+     C and cannot be fixed.  If only a few functions have confusing\n+     macro calls, you can easily convert them manually.\n+\n+   * `protoize' cannot get the argument types for a function whose\n+     definition was not actually compiled due to preprocessing\n+     conditionals.  When this happens, `protoize' changes nothing in\n+     regard to such a function.  `protoize' tries to detect such\n+     instances and warn about them.\n+\n+     You can generally work around this problem by using `protoize' step\n+     by step, each time specifying a different set of `-D' options for\n+     compilation, until all of the functions have been converted.\n+     There is no automatic way to verify that you have got them all,\n+     however.\n+\n+   * Confusion may result if there is an occasion to convert a function\n+     declaration or definition in a region of source code where there\n+     is more than one formal parameter list present.  Thus, attempts to\n+     convert code containing multiple (conditionally compiled) versions\n+     of a single function header (in the same vicinity) may not produce\n+     the desired (or expected) results.\n+\n+     If you plan on converting source files which contain such code, it\n+     is recommended that you first make sure that each conditionally\n+     compiled region of source code which contains an alternative\n+     function header also contains at least one additional follower\n+     token (past the final right parenthesis of the function header).\n+     This should circumvent the problem.\n+\n+   * `unprotoize' can become confused when trying to convert a function\n+     definition or declaration which contains a declaration for a\n+     pointer-to-function formal argument which has the same name as the\n+     function being defined or declared.  We recommand you avoid such\n+     choices of formal parameter names.\n+\n+   * You might also want to correct some of the indentation by hand and\n+     break long lines.  (The conversion programs don't write lines\n+     longer than eighty characters in any case.)\n+\n+\u001f\n+File: gcc.info,  Node: Non-bugs,  Next: Warnings and Errors,  Prev: Protoize Caveats,  Up: Trouble\n+\n+Certain Changes We Don't Want to Make\n+=====================================\n+\n+   This section lists changes that people frequently request, but which\n+we do not make because we think GNU CC is better without them.\n+\n+   * Checking the number and type of arguments to a function which has\n+     an old-fashioned definition and no prototype.\n+\n+     Such a feature would work only occasionally--only for calls that\n+     appear in the same file as the called function, following the\n+     definition.  The only way to check all calls reliably is to add a\n+     prototype for the function.  But adding a prototype eliminates the\n+     motivation for this feature.  So the feature is not worthwhile.\n+\n+   * Warning about using an expression whose type is signed as a shift\n+     count.\n+\n+     Shift count operands are probably signed more often than unsigned.\n+     Warning about this would cause far more annoyance than good.\n+\n+   * Warning about assigning a signed value to an unsigned variable.\n+\n+     Such assignments must be very common; warning about them would\n+     cause more annoyance than good.\n+\n+   * Warning about unreachable code.\n+\n+     It's very common to have unreachable code in machine-generated\n+     programs.  For example, this happens normally in some files of GNU\n+     C itself.\n+\n+   * Warning when a non-void function value is ignored.\n+\n+     Coming as I do from a Lisp background, I balk at the idea that\n+     there is something dangerous about discarding a value.  There are\n+     functions that return values which some callers may find useful;\n+     it makes no sense to clutter the program with a cast to `void'\n+     whenever the value isn't useful.\n+\n+   * Assuming (for optimization) that the address of an external symbol\n+     is never zero.\n+\n+     This assumption is false on certain systems when `#pragma weak' is\n+     used.\n+\n+   * Making `-fshort-enums' the default.\n+\n+     This would cause storage layout to be incompatible with most other\n+     C compilers.  And it doesn't seem very important, given that you\n+     can get the same result in other ways.  The case where it matters\n+     most is when the enumeration-valued object is inside a structure,\n+     and in that case you can specify a field width explicitly.\n+\n+   * Making bitfields unsigned by default on particular machines where\n+     \"the ABI standard\" says to do so.\n+\n+     The ANSI C standard leaves it up to the implementation whether a\n+     bitfield declared plain `int' is signed or not.  This in effect\n+     creates two alternative dialects of C.\n+\n+     The GNU C compiler supports both dialects; you can specify the\n+     signed dialect with `-fsigned-bitfields' and the unsigned dialect\n+     with `-funsigned-bitfields'.  However, this leaves open the\n+     question of which dialect to use by default.\n+\n+     Currently, the preferred dialect makes plain bitfields signed,\n+     because this is simplest.  Since `int' is the same as `signed int'\n+     in every other context, it is cleanest for them to be the same in\n+     bitfields as well.\n+\n+     Some computer manufacturers have published Application Binary\n+     Interface standards which specify that plain bitfields should be\n+     unsigned.  It is a mistake, however, to say anything about this\n+     issue in an ABI.  This is because the handling of plain bitfields\n+     distinguishes two dialects of C.  Both dialects are meaningful on\n+     every type of machine.  Whether a particular object file was\n+     compiled using signed bitfields or unsigned is of no concern to\n+     other object files, even if they access the same bitfields in the\n+     same data structures.\n+\n+     A given program is written in one or the other of these two\n+     dialects.  The program stands a chance to work on most any machine\n+     if it is compiled with the proper dialect.  It is unlikely to work\n+     at all if compiled with the wrong dialect.\n+\n+     Many users appreciate the GNU C compiler because it provides an\n+     environment that is uniform across machines.  These users would be\n+     inconvenienced if the compiler treated plain bitfields differently\n+     on certain machines.\n+\n+     Occasionally users write programs intended only for a particular\n+     machine type.  On these occasions, the users would benefit if the\n+     GNU C compiler were to support by default the same dialect as the\n+     other compilers on that machine.  But such applications are rare.\n+     And users writing a program to run on more than one type of\n+     machine cannot possibly benefit from this kind of compatibility.\n+\n+     This is why GNU CC does and will treat plain bitfields in the same\n+     fashion on all types of machines (by default).\n+\n+     There are some arguments for making bitfields unsigned by default\n+     on all machines.  If, for example, this becomes a universal de\n+     facto standard, it would make sense for GNU CC to go along with\n+     it.  This is something to be considered in the future.\n+\n+     (Of course, users strongly concerned about portability should\n+     indicate explicitly in each bitfield whether it is signed or not.\n+     In this way, they write programs which have the same meaning in\n+     both C dialects.)\n+\n+   * Undefining `__STDC__' when `-ansi' is not used.\n+\n+     Currently, GNU CC defines `__STDC__' as long as you don't use\n+     `-traditional'.  This provides good results in practice.\n+\n+     Programmers normally use conditionals on `__STDC__' to ask whether\n+     it is safe to use certain features of ANSI C, such as function\n+     prototypes or ANSI token concatenation.  Since plain `gcc' supports\n+     all the features of ANSI C, the correct answer to these questions\n+     is \"yes\".\n+\n+     Some users try to use `__STDC__' to check for the availability of\n+     certain library facilities.  This is actually incorrect usage in\n+     an ANSI C program, because the ANSI C standard says that a\n+     conforming freestanding implementation should define `__STDC__'\n+     even though it does not have the library facilities.  `gcc -ansi\n+     -pedantic' is a conforming freestanding implementation, and it is\n+     therefore required to define `__STDC__', even though it does not\n+     come with an ANSI C library.\n+\n+     Sometimes people say that defining `__STDC__' in a compiler that\n+     does not completely conform to the ANSI C standard somehow\n+     violates the standard.  This is illogical.  The standard is a\n+     standard for compilers that claim to support ANSI C, such as `gcc\n+     -ansi'--not for other compilers such as plain `gcc'.  Whatever the\n+     ANSI C standard says is relevant to the design of plain `gcc'\n+     without `-ansi' only for pragmatic reasons, not as a requirement.\n+\n+     GNU CC normally defines `__STDC__' to be 1, and in addition\n+     defines `__STRICT_ANSI__' if you specify the `-ansi' option.  On\n+     some hosts, system include files use a different convention, where\n+     `__STDC__' is normally 0, but is 1 if the user specifies strict\n+     conformance to the C Standard.  GNU CC follows the host convention\n+     when processing system include files, but when processing user\n+     files it follows the usual GNU C convention.\n+\n+   * Undefining `__STDC__' in C++.\n+\n+     Programs written to compile with C++-to-C translators get the\n+     value of `__STDC__' that goes with the C compiler that is\n+     subsequently used.  These programs must test `__STDC__' to\n+     determine what kind of C preprocessor that compiler uses: whether\n+     they should concatenate tokens in the ANSI C fashion or in the\n+     traditional fashion.\n+\n+     These programs work properly with GNU C++ if `__STDC__' is defined.\n+     They would not work otherwise.\n+\n+     In addition, many header files are written to provide prototypes\n+     in ANSI C but not in traditional C.  Many of these header files\n+     can work without change in C++ provided `__STDC__' is defined.  If\n+     `__STDC__' is not defined, they will all fail, and will all need\n+     to be changed to test explicitly for C++ as well.\n+\n+   * Deleting \"empty\" loops.\n+\n+     GNU CC does not delete \"empty\" loops because the most likely reason\n+     you would put one in a program is to have a delay.  Deleting them\n+     will not make real programs run any faster, so it would be\n+     pointless.\n+\n+     It would be different if optimization of a nonempty loop could\n+     produce an empty one.  But this generally can't happen.\n+\n+   * Making side effects happen in the same order as in some other\n+     compiler.\n+\n+     It is never safe to depend on the order of evaluation of side\n+     effects.  For example, a function call like this may very well\n+     behave differently from one compiler to another:\n+\n+          void func (int, int);\n+          \n+          int i = 2;\n+          func (i++, i++);\n+\n+     There is no guarantee (in either the C or the C++ standard language\n+     definitions) that the increments will be evaluated in any\n+     particular order.  Either increment might happen first.  `func'\n+     might get the arguments `2, 3', or it might get `3, 2', or even\n+     `2, 2'.\n+\n+   * Not allowing structures with volatile fields in registers.\n+\n+     Strictly speaking, there is no prohibition in the ANSI C standard\n+     against allowing structures with volatile fields in registers, but\n+     it does not seem to make any sense and is probably not what you\n+     wanted to do.  So the compiler will give an error message in this\n+     case.\n+\n+\u001f\n+File: gcc.info,  Node: Warnings and Errors,  Prev: Non-bugs,  Up: Trouble\n+\n+Warning Messages and Error Messages\n+===================================\n+\n+   The GNU compiler can produce two kinds of diagnostics: errors and\n+warnings.  Each kind has a different purpose:\n+\n+     *Errors* report problems that make it impossible to compile your\n+     program.  GNU CC reports errors with the source file name and line\n+     number where the problem is apparent.\n+\n+     *Warnings* report other unusual conditions in your code that *may*\n+     indicate a problem, although compilation can (and does) proceed.\n+     Warning messages also report the source file name and line number,\n+     but include the text `warning:' to distinguish them from error\n+     messages.\n+\n+   Warnings may indicate danger points where you should check to make\n+sure that your program really does what you intend; or the use of\n+obsolete features; or the use of nonstandard features of GNU C or C++.\n+Many warnings are issued only if you ask for them, with one of the `-W'\n+options (for instance, `-Wall' requests a variety of useful warnings).\n+\n+   GNU CC always tries to compile your program if possible; it never\n+gratuitously rejects a program whose meaning is clear merely because\n+(for instance) it fails to conform to a standard.  In some cases,\n+however, the C and C++ standards specify that certain extensions are\n+forbidden, and a diagnostic *must* be issued by a conforming compiler.\n+The `-pedantic' option tells GNU CC to issue warnings in such cases;\n+`-pedantic-errors' says to make them errors instead.  This does not\n+mean that *all* non-ANSI constructs get warnings or errors.\n+\n+   *Note Options to Request or Suppress Warnings: Warning Options, for\n+more detail on these and related command-line options.\n+\n+\u001f\n+File: gcc.info,  Node: Bugs,  Next: Service,  Prev: Trouble,  Up: Top\n+\n+Reporting Bugs\n+**************\n+\n+   Your bug reports play an essential role in making GNU CC reliable.\n+\n+   When you encounter a problem, the first thing to do is to see if it\n+is already known.  *Note Trouble::.  If it isn't known, then you should\n+report the problem.\n+\n+   Reporting a bug may help you by bringing a solution to your problem,\n+or it may not.  (If it does not, look in the service directory; see\n+*Note Service::.)  In any case, the principal function of a bug report\n+is to help the entire community by making the next version of GNU CC\n+work better.  Bug reports are your contribution to the maintenance of\n+GNU CC.\n+\n+   Since the maintainers are very overloaded, we cannot respond to every\n+bug report.  However, if the bug has not been fixed, we are likely to\n+send you a patch and ask you to tell us whether it works.\n+\n+   In order for a bug report to serve its purpose, you must include the\n+information that makes for fixing the bug.\n+\n+* Menu:\n+\n+* Criteria:  Bug Criteria.   Have you really found a bug?\n+* Where: Bug Lists.\t     Where to send your bug report.\n+* Reporting: Bug Reporting.  How to report a bug effectively.\n+* Patches: Sending Patches.  How to send a patch for GNU CC.\n+* Known: Trouble.            Known problems.\n+* Help: Service.             Where to ask for help.\n+\n+\u001f\n+File: gcc.info,  Node: Bug Criteria,  Next: Bug Lists,  Up: Bugs\n+\n+Have You Found a Bug?\n+=====================\n+\n+   If you are not sure whether you have found a bug, here are some\n+guidelines:\n+\n+   * If the compiler gets a fatal signal, for any input whatever, that\n+     is a compiler bug.  Reliable compilers never crash.\n+\n+   * If the compiler produces invalid assembly code, for any input\n+     whatever (except an `asm' statement), that is a compiler bug,\n+     unless the compiler reports errors (not just warnings) which would\n+     ordinarily prevent the assembler from being run.\n+\n+   * If the compiler produces valid assembly code that does not\n+     correctly execute the input source code, that is a compiler bug.\n+\n+     However, you must double-check to make sure, because you may have\n+     run into an incompatibility between GNU C and traditional C (*note\n+     Incompatibilities::.).  These incompatibilities might be considered\n+     bugs, but they are inescapable consequences of valuable features.\n+\n+     Or you may have a program whose behavior is undefined, which\n+     happened by chance to give the desired results with another C or\n+     C++ compiler.\n+\n+     For example, in many nonoptimizing compilers, you can write `x;'\n+     at the end of a function instead of `return x;', with the same\n+     results.  But the value of the function is undefined if `return'\n+     is omitted; it is not a bug when GNU CC produces different results.\n+\n+     Problems often result from expressions with two increment\n+     operators, as in `f (*p++, *p++)'.  Your previous compiler might\n+     have interpreted that expression the way you intended; GNU CC might\n+     interpret it another way.  Neither compiler is wrong.  The bug is\n+     in your code.\n+\n+     After you have localized the error to a single source line, it\n+     should be easy to check for these things.  If your program is\n+     correct and well defined, you have found a compiler bug.\n+\n+   * If the compiler produces an error message for valid input, that is\n+     a compiler bug.\n+\n+   * If the compiler does not produce an error message for invalid\n+     input, that is a compiler bug.  However, you should note that your\n+     idea of \"invalid input\" might be my idea of \"an extension\" or\n+     \"support for traditional practice\".\n+\n+   * If you are an experienced user of C or C++ compilers, your\n+     suggestions for improvement of GNU CC or GNU C++ are welcome in\n+     any case.\n+\n+\u001f\n+File: gcc.info,  Node: Bug Lists,  Next: Bug Reporting,  Prev: Bug Criteria,  Up: Bugs\n+\n+Where to Report Bugs\n+====================\n+\n+   Send bug reports for GNU C to `bug-gcc@prep.ai.mit.edu'.\n+\n+   Send bug reports for GNU C++ to `bug-g++@prep.ai.mit.edu'.  If your\n+bug involves the C++ class library libg++, send mail instead to the\n+address `bug-lib-g++@prep.ai.mit.edu'.  If you're not sure, you can\n+send the bug report to both lists.\n+\n+   *Do not send bug reports to `help-gcc@prep.ai.mit.edu' or to the\n+newsgroup `gnu.gcc.help'.* Most users of GNU CC do not want to receive\n+bug reports.  Those that do, have asked to be on `bug-gcc' and/or\n+`bug-g++'.\n+\n+   The mailing lists `bug-gcc' and `bug-g++' both have newsgroups which\n+serve as repeaters: `gnu.gcc.bug' and `gnu.g++.bug'.  Each mailing list\n+and its newsgroup carry exactly the same messages.\n+\n+   Often people think of posting bug reports to the newsgroup instead of\n+mailing them.  This appears to work, but it has one problem which can be\n+crucial: a newsgroup posting does not contain a mail path back to the\n+sender.  Thus, if maintainers need more information, they may be unable\n+to reach you.  For this reason, you should always send bug reports by\n+mail to the proper mailing list.\n+\n+   As a last resort, send bug reports on paper to:\n+\n+     GNU Compiler Bugs\n+     Free Software Foundation\n+     59 Temple Place - Suite 330\n+     Boston, MA 02111-1307, USA\n+"}, {"sha": "baeaa8a80fe6ad1fe5e80dcd0549c94d1e2d5650", "filename": "gcc/gcc.info-13", "status": "added", "additions": 853, "deletions": 0, "changes": 853, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-13", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-13", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-13?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,853 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Bug Reporting,  Next: Sending Patches,  Prev: Bug Lists,  Up: Bugs\n+\n+How to Report Bugs\n+==================\n+\n+   The fundamental principle of reporting bugs usefully is this:\n+*report all the facts*.  If you are not sure whether to state a fact or\n+leave it out, state it!\n+\n+   Often people omit facts because they think they know what causes the\n+problem and they conclude that some details don't matter.  Thus, you\n+might assume that the name of the variable you use in an example does\n+not matter.  Well, probably it doesn't, but one cannot be sure.\n+Perhaps the bug is a stray memory reference which happens to fetch from\n+the location where that name is stored in memory; perhaps, if the name\n+were different, the contents of that location would fool the compiler\n+into doing the right thing despite the bug.  Play it safe and give a\n+specific, complete example.  That is the easiest thing for you to do,\n+and the most helpful.\n+\n+   Keep in mind that the purpose of a bug report is to enable someone to\n+fix the bug if it is not known.  It isn't very important what happens if\n+the bug is already known.  Therefore, always write your bug reports on\n+the assumption that the bug is not known.\n+\n+   Sometimes people give a few sketchy facts and ask, \"Does this ring a\n+bell?\"  This cannot help us fix a bug, so it is basically useless.  We\n+respond by asking for enough details to enable us to investigate.  You\n+might as well expedite matters by sending them to begin with.\n+\n+   Try to make your bug report self-contained.  If we have to ask you\n+for more information, it is best if you include all the previous\n+information in your response, as well as the information that was\n+missing.\n+\n+   Please report each bug in a separate message.  This makes it easier\n+for us to track which bugs have been fixed and to forward your bugs\n+reports to the appropriate maintainer.\n+\n+   Do not compress and encode any part of your bug report using programs\n+such as `uuencode'.  If you do so it will slow down the processing of\n+your bug.  If you must submit multiple large files, use `shar', which\n+allows us to read your message without having to run any decompression\n+programs.\n+\n+   To enable someone to investigate the bug, you should include all\n+these things:\n+\n+   * The version of GNU CC.  You can get this by running it with the\n+     `-v' option.\n+\n+     Without this, we won't know whether there is any point in looking\n+     for the bug in the current version of GNU CC.\n+\n+   * A complete input file that will reproduce the bug.  If the bug is\n+     in the C preprocessor, send a source file and any header files\n+     that it requires.  If the bug is in the compiler proper (`cc1'),\n+     run your source file through the C preprocessor by doing `gcc -E\n+     SOURCEFILE > OUTFILE', then include the contents of OUTFILE in the\n+     bug report.  (When you do this, use the same `-I', `-D' or `-U'\n+     options that you used in actual compilation.)\n+\n+     A single statement is not enough of an example.  In order to\n+     compile it, it must be embedded in a complete file of compiler\n+     input; and the bug might depend on the details of how this is done.\n+\n+     Without a real example one can compile, all anyone can do about\n+     your bug report is wish you luck.  It would be futile to try to\n+     guess how to provoke the bug.  For example, bugs in register\n+     allocation and reloading frequently depend on every little detail\n+     of the function they happen in.\n+\n+     Even if the input file that fails comes from a GNU program, you\n+     should still send the complete test case.  Don't ask the GNU CC\n+     maintainers to do the extra work of obtaining the program in\n+     question--they are all overworked as it is.  Also, the problem may\n+     depend on what is in the header files on your system; it is\n+     unreliable for the GNU CC maintainers to try the problem with the\n+     header files available to them.  By sending CPP output, you can\n+     eliminate this source of uncertainty and save us a certain\n+     percentage of wild goose chases.\n+\n+   * The command arguments you gave GNU CC or GNU C++ to compile that\n+     example and observe the bug.  For example, did you use `-O'?  To\n+     guarantee you won't omit something important, list all the options.\n+\n+     If we were to try to guess the arguments, we would probably guess\n+     wrong and then we would not encounter the bug.\n+\n+   * The type of machine you are using, and the operating system name\n+     and version number.\n+\n+   * The operands you gave to the `configure' command when you installed\n+     the compiler.\n+\n+   * A complete list of any modifications you have made to the compiler\n+     source.  (We don't promise to investigate the bug unless it\n+     happens in an unmodified compiler.  But if you've made\n+     modifications and don't tell us, then you are sending us on a wild\n+     goose chase.)\n+\n+     Be precise about these changes.  A description in English is not\n+     enough--send a context diff for them.\n+\n+     Adding files of your own (such as a machine description for a\n+     machine we don't support) is a modification of the compiler source.\n+\n+   * Details of any other deviations from the standard procedure for\n+     installing GNU CC.\n+\n+   * A description of what behavior you observe that you believe is\n+     incorrect.  For example, \"The compiler gets a fatal signal,\" or,\n+     \"The assembler instruction at line 208 in the output is incorrect.\"\n+\n+     Of course, if the bug is that the compiler gets a fatal signal,\n+     then one can't miss it.  But if the bug is incorrect output, the\n+     maintainer might not notice unless it is glaringly wrong.  None of\n+     us has time to study all the assembler code from a 50-line C\n+     program just on the chance that one instruction might be wrong.\n+     We need *you* to do this part!\n+\n+     Even if the problem you experience is a fatal signal, you should\n+     still say so explicitly.  Suppose something strange is going on,\n+     such as, your copy of the compiler is out of synch, or you have\n+     encountered a bug in the C library on your system.  (This has\n+     happened!)  Your copy might crash and the copy here would not.  If\n+     you said to expect a crash, then when the compiler here fails to\n+     crash, we would know that the bug was not happening.  If you don't\n+     say to expect a crash, then we would not know whether the bug was\n+     happening.  We would not be able to draw any conclusion from our\n+     observations.\n+\n+     If the problem is a diagnostic when compiling GNU CC with some\n+     other compiler, say whether it is a warning or an error.\n+\n+     Often the observed symptom is incorrect output when your program\n+     is run.  Sad to say, this is not enough information unless the\n+     program is short and simple.  None of us has time to study a large\n+     program to figure out how it would work if compiled correctly,\n+     much less which line of it was compiled wrong.  So you will have\n+     to do that.  Tell us which source line it is, and what incorrect\n+     result happens when that line is executed.  A person who\n+     understands the program can find this as easily as finding a bug\n+     in the program itself.\n+\n+   * If you send examples of assembler code output from GNU CC or GNU\n+     C++, please use `-g' when you make them.  The debugging information\n+     includes source line numbers which are essential for correlating\n+     the output with the input.\n+\n+   * If you wish to mention something in the GNU CC source, refer to it\n+     by context, not by line number.\n+\n+     The line numbers in the development sources don't match those in\n+     your sources.  Your line numbers would convey no useful\n+     information to the maintainers.\n+\n+   * Additional information from a debugger might enable someone to\n+     find a problem on a machine which he does not have available.\n+     However, you need to think when you collect this information if\n+     you want it to have any chance of being useful.\n+\n+     For example, many people send just a backtrace, but that is never\n+     useful by itself.  A simple backtrace with arguments conveys little\n+     about GNU CC because the compiler is largely data-driven; the same\n+     functions are called over and over for different RTL insns, doing\n+     different things depending on the details of the insn.\n+\n+     Most of the arguments listed in the backtrace are useless because\n+     they are pointers to RTL list structure.  The numeric values of the\n+     pointers, which the debugger prints in the backtrace, have no\n+     significance whatever; all that matters is the contents of the\n+     objects they point to (and most of the contents are other such\n+     pointers).\n+\n+     In addition, most compiler passes consist of one or more loops that\n+     scan the RTL insn sequence.  The most vital piece of information\n+     about such a loop--which insn it has reached--is usually in a\n+     local variable, not in an argument.\n+\n+     What you need to provide in addition to a backtrace are the values\n+     of the local variables for several stack frames up.  When a local\n+     variable or an argument is an RTX, first print its value and then\n+     use the GDB command `pr' to print the RTL expression that it points\n+     to.  (If GDB doesn't run on your machine, use your debugger to call\n+     the function `debug_rtx' with the RTX as an argument.)  In\n+     general, whenever a variable is a pointer, its value is no use\n+     without the data it points to.\n+\n+   Here are some things that are not necessary:\n+\n+   * A description of the envelope of the bug.\n+\n+     Often people who encounter a bug spend a lot of time investigating\n+     which changes to the input file will make the bug go away and which\n+     changes will not affect it.\n+\n+     This is often time consuming and not very useful, because the way\n+     we will find the bug is by running a single example under the\n+     debugger with breakpoints, not by pure deduction from a series of\n+     examples.  You might as well save your time for something else.\n+\n+     Of course, if you can find a simpler example to report *instead* of\n+     the original one, that is a convenience.  Errors in the output\n+     will be easier to spot, running under the debugger will take less\n+     time, etc.  Most GNU CC bugs involve just one function, so the\n+     most straightforward way to simplify an example is to delete all\n+     the function definitions except the one where the bug occurs.\n+     Those earlier in the file may be replaced by external declarations\n+     if the crucial function depends on them.  (Exception: inline\n+     functions may affect compilation of functions defined later in the\n+     file.)\n+\n+     However, simplification is not vital; if you don't want to do this,\n+     report the bug anyway and send the entire test case you used.\n+\n+   * In particular, some people insert conditionals `#ifdef BUG' around\n+     a statement which, if removed, makes the bug not happen.  These\n+     are just clutter; we won't pay any attention to them anyway.\n+     Besides, you should send us cpp output, and that can't have\n+     conditionals.\n+\n+   * A patch for the bug.\n+\n+     A patch for the bug is useful if it is a good one.  But don't omit\n+     the necessary information, such as the test case, on the\n+     assumption that a patch is all we need.  We might see problems\n+     with your patch and decide to fix the problem another way, or we\n+     might not understand it at all.\n+\n+     Sometimes with a program as complicated as GNU CC it is very hard\n+     to construct an example that will make the program follow a\n+     certain path through the code.  If you don't send the example, we\n+     won't be able to construct one, so we won't be able to verify that\n+     the bug is fixed.\n+\n+     And if we can't understand what bug you are trying to fix, or why\n+     your patch should be an improvement, we won't install it.  A test\n+     case will help us to understand.\n+\n+     *Note Sending Patches::, for guidelines on how to make it easy for\n+     us to understand and install your patches.\n+\n+   * A guess about what the bug is or what it depends on.\n+\n+     Such guesses are usually wrong.  Even I can't guess right about\n+     such things without first using the debugger to find the facts.\n+\n+   * A core dump file.\n+\n+     We have no way of examining a core dump for your type of machine\n+     unless we have an identical system--and if we do have one, we\n+     should be able to reproduce the crash ourselves.\n+\n+\u001f\n+File: gcc.info,  Node: Sending Patches,  Prev: Bug Reporting,  Up: Bugs\n+\n+Sending Patches for GNU CC\n+==========================\n+\n+   If you would like to write bug fixes or improvements for the GNU C\n+compiler, that is very helpful.  Send suggested fixes to the bug report\n+mailing list, `bug-gcc@prep.ai.mit.edu'.\n+\n+   Please follow these guidelines so we can study your patches\n+efficiently.  If you don't follow these guidelines, your information\n+might still be useful, but using it will take extra work.  Maintaining\n+GNU C is a lot of work in the best of circumstances, and we can't keep\n+up unless you do your best to help.\n+\n+   * Send an explanation with your changes of what problem they fix or\n+     what improvement they bring about.  For a bug fix, just include a\n+     copy of the bug report, and explain why the change fixes the bug.\n+\n+     (Referring to a bug report is not as good as including it, because\n+     then we will have to look it up, and we have probably already\n+     deleted it if we've already fixed the bug.)\n+\n+   * Always include a proper bug report for the problem you think you\n+     have fixed.  We need to convince ourselves that the change is\n+     right before installing it.  Even if it is right, we might have\n+     trouble judging it if we don't have a way to reproduce the problem.\n+\n+   * Include all the comments that are appropriate to help people\n+     reading the source in the future understand why this change was\n+     needed.\n+\n+   * Don't mix together changes made for different reasons.  Send them\n+     *individually*.\n+\n+     If you make two changes for separate reasons, then we might not\n+     want to install them both.  We might want to install just one.  If\n+     you send them all jumbled together in a single set of diffs, we\n+     have to do extra work to disentangle them--to figure out which\n+     parts of the change serve which purpose.  If we don't have time\n+     for this, we might have to ignore your changes entirely.\n+\n+     If you send each change as soon as you have written it, with its\n+     own explanation, then the two changes never get tangled up, and we\n+     can consider each one properly without any extra work to\n+     disentangle them.\n+\n+     Ideally, each change you send should be impossible to subdivide\n+     into parts that we might want to consider separately, because each\n+     of its parts gets its motivation from the other parts.\n+\n+   * Send each change as soon as that change is finished.  Sometimes\n+     people think they are helping us by accumulating many changes to\n+     send them all together.  As explained above, this is absolutely\n+     the worst thing you could do.\n+\n+     Since you should send each change separately, you might as well\n+     send it right away.  That gives us the option of installing it\n+     immediately if it is important.\n+\n+   * Use `diff -c' to make your diffs.  Diffs without context are hard\n+     for us to install reliably.  More than that, they make it hard for\n+     us to study the diffs to decide whether we want to install them.\n+     Unidiff format is better than contextless diffs, but not as easy\n+     to read as `-c' format.\n+\n+     If you have GNU diff, use `diff -cp', which shows the name of the\n+     function that each change occurs in.\n+\n+   * Write the change log entries for your changes.  We get lots of\n+     changes, and we don't have time to do all the change log writing\n+     ourselves.\n+\n+     Read the `ChangeLog' file to see what sorts of information to put\n+     in, and to learn the style that we use.  The purpose of the change\n+     log is to show people where to find what was changed.  So you need\n+     to be specific about what functions you changed; in large\n+     functions, it's often helpful to indicate where within the\n+     function the change was.\n+\n+     On the other hand, once you have shown people where to find the\n+     change, you need not explain its purpose.  Thus, if you add a new\n+     function, all you need to say about it is that it is new.  If you\n+     feel that the purpose needs explaining, it probably does--but the\n+     explanation will be much more useful if you put it in comments in\n+     the code.\n+\n+     If you would like your name to appear in the header line for who\n+     made the change, send us the header line.\n+\n+   * When you write the fix, keep in mind that we can't install a\n+     change that would break other systems.\n+\n+     People often suggest fixing a problem by changing\n+     machine-independent files such as `toplev.c' to do something\n+     special that a particular system needs.  Sometimes it is totally\n+     obvious that such changes would break GNU CC for almost all users.\n+     We can't possibly make a change like that.  At best it might tell\n+     us how to write another patch that would solve the problem\n+     acceptably.\n+\n+     Sometimes people send fixes that *might* be an improvement in\n+     general--but it is hard to be sure of this.  It's hard to install\n+     such changes because we have to study them very carefully.  Of\n+     course, a good explanation of the reasoning by which you concluded\n+     the change was correct can help convince us.\n+\n+     The safest changes are changes to the configuration files for a\n+     particular machine.  These are safe because they can't create new\n+     bugs on other machines.\n+\n+     Please help us keep up with the workload by designing the patch in\n+     a form that is good to install.\n+\n+\u001f\n+File: gcc.info,  Node: Service,  Next: Contributing,  Prev: Bugs,  Up: Top\n+\n+How To Get Help with GNU CC\n+***************************\n+\n+   If you need help installing, using or changing GNU CC, there are two\n+ways to find it:\n+\n+   * Send a message to a suitable network mailing list.  First try\n+     `bug-gcc@prep.ai.mit.edu', and if that brings no response, try\n+     `help-gcc@prep.ai.mit.edu'.\n+\n+   * Look in the service directory for someone who might help you for a\n+     fee.  The service directory is found in the file named `SERVICE'\n+     in the GNU CC distribution.\n+\n+\u001f\n+File: gcc.info,  Node: Contributing,  Next: VMS,  Prev: Service,  Up: Top\n+\n+Contributing to GNU CC Development\n+**********************************\n+\n+   If you would like to help pretest GNU CC releases to assure they work\n+well, or if you would like to work on improving GNU CC, please contact\n+the maintainers at `bug-gcc@gnu.ai.mit.edu'.  A pretester should be\n+willing to try to investigate bugs as well as report them.\n+\n+   If you'd like to work on improvements, please ask for suggested\n+projects or suggest your own ideas.  If you have already written an\n+improvement, please tell us about it.  If you have not yet started\n+work, it is useful to contact `bug-gcc@prep.ai.mit.edu' before you\n+start; the maintainers may be able to suggest ways to make your\n+extension fit in better with the rest of GNU CC and with other\n+development plans.\n+\n+\u001f\n+File: gcc.info,  Node: VMS,  Next: Portability,  Prev: Contributing,  Up: Top\n+\n+Using GNU CC on VMS\n+*******************\n+\n+   Here is how to use GNU CC on VMS.\n+\n+* Menu:\n+\n+* Include Files and VMS::  Where the preprocessor looks for the include files.\n+* Global Declarations::    How to do globaldef, globalref and globalvalue with\n+                           GNU CC.\n+* VMS Misc::\t\t   Misc information.\n+\n+\u001f\n+File: gcc.info,  Node: Include Files and VMS,  Next: Global Declarations,  Up: VMS\n+\n+Include Files and VMS\n+=====================\n+\n+   Due to the differences between the filesystems of Unix and VMS, GNU\n+CC attempts to translate file names in `#include' into names that VMS\n+will understand.  The basic strategy is to prepend a prefix to the\n+specification of the include file, convert the whole filename to a VMS\n+filename, and then try to open the file.  GNU CC tries various prefixes\n+one by one until one of them succeeds:\n+\n+  1. The first prefix is the `GNU_CC_INCLUDE:' logical name: this is\n+     where GNU C header files are traditionally stored.  If you wish to\n+     store header files in non-standard locations, then you can assign\n+     the logical `GNU_CC_INCLUDE' to be a search list, where each\n+     element of the list is suitable for use with a rooted logical.\n+\n+  2. The next prefix tried is `SYS$SYSROOT:[SYSLIB.]'.  This is where\n+     VAX-C header files are traditionally stored.\n+\n+  3. If the include file specification by itself is a valid VMS\n+     filename, the preprocessor then uses this name with no prefix in\n+     an attempt to open the include file.\n+\n+  4. If the file specification is not a valid VMS filename (i.e. does\n+     not contain a device or a directory specifier, and contains a `/'\n+     character), the preprocessor tries to convert it from Unix syntax\n+     to VMS syntax.\n+\n+     Conversion works like this: the first directory name becomes a\n+     device, and the rest of the directories are converted into\n+     VMS-format directory names.  For example, the name `X11/foobar.h'\n+     is translated to `X11:[000000]foobar.h' or `X11:foobar.h',\n+     whichever one can be opened.  This strategy allows you to assign a\n+     logical name to point to the actual location of the header files.\n+\n+  5. If none of these strategies succeeds, the `#include' fails.\n+\n+   Include directives of the form:\n+\n+     #include foobar\n+\n+are a common source of incompatibility between VAX-C and GNU CC.  VAX-C\n+treats this much like a standard `#include <foobar.h>' directive.  That\n+is incompatible with the ANSI C behavior implemented by GNU CC: to\n+expand the name `foobar' as a macro.  Macro expansion should eventually\n+yield one of the two standard formats for `#include':\n+\n+     #include \"FILE\"\n+     #include <FILE>\n+\n+   If you have this problem, the best solution is to modify the source\n+to convert the `#include' directives to one of the two standard forms.\n+That will work with either compiler.  If you want a quick and dirty fix,\n+define the file names as macros with the proper expansion, like this:\n+\n+     #define stdio <stdio.h>\n+\n+This will work, as long as the name doesn't conflict with anything else\n+in the program.\n+\n+   Another source of incompatibility is that VAX-C assumes that:\n+\n+     #include \"foobar\"\n+\n+is actually asking for the file `foobar.h'.  GNU CC does not make this\n+assumption, and instead takes what you ask for literally; it tries to\n+read the file `foobar'.  The best way to avoid this problem is to\n+always specify the desired file extension in your include directives.\n+\n+   GNU CC for VMS is distributed with a set of include files that is\n+sufficient to compile most general purpose programs.  Even though the\n+GNU CC distribution does not contain header files to define constants\n+and structures for some VMS system-specific functions, there is no\n+reason why you cannot use GNU CC with any of these functions.  You first\n+may have to generate or create header files, either by using the public\n+domain utility `UNSDL' (which can be found on a DECUS tape), or by\n+extracting the relevant modules from one of the system macro libraries,\n+and using an editor to construct a C header file.\n+\n+   A `#include' file name cannot contain a DECNET node name.  The\n+preprocessor reports an I/O error if you attempt to use a node name,\n+whether explicitly, or implicitly via a logical name.\n+\n+\u001f\n+File: gcc.info,  Node: Global Declarations,  Next: VMS Misc,  Prev: Include Files and VMS,  Up: VMS\n+\n+Global Declarations and VMS\n+===========================\n+\n+   GNU CC does not provide the `globalref', `globaldef' and\n+`globalvalue' keywords of VAX-C.  You can get the same effect with an\n+obscure feature of GAS, the GNU assembler.  (This requires GAS version\n+1.39 or later.)  The following macros allow you to use this feature in\n+a fairly natural way:\n+\n+     #ifdef __GNUC__\n+     #define GLOBALREF(TYPE,NAME)                      \\\n+       TYPE NAME                                       \\\n+       asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME)\n+     #define GLOBALDEF(TYPE,NAME,VALUE)                \\\n+       TYPE NAME                                       \\\n+       asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME) \\\n+         = VALUE\n+     #define GLOBALVALUEREF(TYPE,NAME)                 \\\n+       const TYPE NAME[1]                              \\\n+       asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)\n+     #define GLOBALVALUEDEF(TYPE,NAME,VALUE)           \\\n+       const TYPE NAME[1]                              \\\n+       asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)  \\\n+         = {VALUE}\n+     #else\n+     #define GLOBALREF(TYPE,NAME) \\\n+       globalref TYPE NAME\n+     #define GLOBALDEF(TYPE,NAME,VALUE) \\\n+       globaldef TYPE NAME = VALUE\n+     #define GLOBALVALUEDEF(TYPE,NAME,VALUE) \\\n+       globalvalue TYPE NAME = VALUE\n+     #define GLOBALVALUEREF(TYPE,NAME) \\\n+       globalvalue TYPE NAME\n+     #endif\n+\n+(The `_$$PsectAttributes_GLOBALSYMBOL' prefix at the start of the name\n+is removed by the assembler, after it has modified the attributes of\n+the symbol).  These macros are provided in the VMS binaries\n+distribution in a header file `GNU_HACKS.H'.  An example of the usage\n+is:\n+\n+     GLOBALREF (int, ijk);\n+     GLOBALDEF (int, jkl, 0);\n+\n+   The macros `GLOBALREF' and `GLOBALDEF' cannot be used\n+straightforwardly for arrays, since there is no way to insert the array\n+dimension into the declaration at the right place.  However, you can\n+declare an array with these macros if you first define a typedef for the\n+array type, like this:\n+\n+     typedef int intvector[10];\n+     GLOBALREF (intvector, foo);\n+\n+   Array and structure initializers will also break the macros; you can\n+define the initializer to be a macro of its own, or you can expand the\n+`GLOBALDEF' macro by hand.  You may find a case where you wish to use\n+the `GLOBALDEF' macro with a large array, but you are not interested in\n+explicitly initializing each element of the array.  In such cases you\n+can use an initializer like: `{0,}', which will initialize the entire\n+array to `0'.\n+\n+   A shortcoming of this implementation is that a variable declared with\n+`GLOBALVALUEREF' or `GLOBALVALUEDEF' is always an array.  For example,\n+the declaration:\n+\n+     GLOBALVALUEREF(int, ijk);\n+\n+declares the variable `ijk' as an array of type `int [1]'.  This is\n+done because a globalvalue is actually a constant; its \"value\" is what\n+the linker would normally consider an address.  That is not how an\n+integer value works in C, but it is how an array works.  So treating\n+the symbol as an array name gives consistent results--with the\n+exception that the value seems to have the wrong type.  *Don't try to\n+access an element of the array.*  It doesn't have any elements.  The\n+array \"address\" may not be the address of actual storage.\n+\n+   The fact that the symbol is an array may lead to warnings where the\n+variable is used.  Insert type casts to avoid the warnings.  Here is an\n+example; it takes advantage of the ANSI C feature allowing macros that\n+expand to use the same name as the macro itself.\n+\n+     GLOBALVALUEREF (int, ss$_normal);\n+     GLOBALVALUEDEF (int, xyzzy,123);\n+     #ifdef __GNUC__\n+     #define ss$_normal ((int) ss$_normal)\n+     #define xyzzy ((int) xyzzy)\n+     #endif\n+\n+   Don't use `globaldef' or `globalref' with a variable whose type is\n+an enumeration type; this is not implemented.  Instead, make the\n+variable an integer, and use a `globalvaluedef' for each of the\n+enumeration values.  An example of this would be:\n+\n+     #ifdef __GNUC__\n+     GLOBALDEF (int, color, 0);\n+     GLOBALVALUEDEF (int, RED, 0);\n+     GLOBALVALUEDEF (int, BLUE, 1);\n+     GLOBALVALUEDEF (int, GREEN, 3);\n+     #else\n+     enum globaldef color {RED, BLUE, GREEN = 3};\n+     #endif\n+\n+\u001f\n+File: gcc.info,  Node: VMS Misc,  Prev: Global Declarations,  Up: VMS\n+\n+Other VMS Issues\n+================\n+\n+   GNU CC automatically arranges for `main' to return 1 by default if\n+you fail to specify an explicit return value.  This will be interpreted\n+by VMS as a status code indicating a normal successful completion.\n+Version 1 of GNU CC did not provide this default.\n+\n+   GNU CC on VMS works only with the GNU assembler, GAS.  You need\n+version 1.37 or later of GAS in order to produce value debugging\n+information for the VMS debugger.  Use the ordinary VMS linker with the\n+object files produced by GAS.\n+\n+   Under previous versions of GNU CC, the generated code would\n+occasionally give strange results when linked to the sharable `VAXCRTL'\n+library.  Now this should work.\n+\n+   A caveat for use of `const' global variables: the `const' modifier\n+must be specified in every external declaration of the variable in all\n+of the source files that use that variable.  Otherwise the linker will\n+issue warnings about conflicting attributes for the variable.  Your\n+program will still work despite the warnings, but the variable will be\n+placed in writable storage.\n+\n+   Although the VMS linker does distinguish between upper and lower case\n+letters in global symbols, most VMS compilers convert all such symbols\n+into upper case and most run-time library routines also have upper case\n+names.  To be able to reliably call such routines, GNU CC (by means of\n+the assembler GAS) converts global symbols into upper case like other\n+VMS compilers.  However, since the usual practice in C is to distinguish\n+case, GNU CC (via GAS) tries to preserve usual C behavior by augmenting\n+each name that is not all lower case.  This means truncating the name\n+to at most 23 characters and then adding more characters at the end\n+which encode the case pattern of those 23.   Names which contain at\n+least one dollar sign are an exception; they are converted directly into\n+upper case without augmentation.\n+\n+   Name augmentation yields bad results for programs that use\n+precompiled libraries (such as Xlib) which were generated by another\n+compiler.  You can use the compiler option `/NOCASE_HACK' to inhibit\n+augmentation; it makes external C functions and variables\n+case-independent as is usual on VMS.  Alternatively, you could write\n+all references to the functions and variables in such libraries using\n+lower case; this will work on VMS, but is not portable to other\n+systems.  The compiler option `/NAMES' also provides control over\n+global name handling.\n+\n+   Function and variable names are handled somewhat differently with GNU\n+C++.  The GNU C++ compiler performs \"name mangling\" on function names,\n+which means that it adds information to the function name to describe\n+the data types of the arguments that the function takes.  One result of\n+this is that the name of a function can become very long.  Since the\n+VMS linker only recognizes the first 31 characters in a name, special\n+action is taken to ensure that each function and variable has a unique\n+name that can be represented in 31 characters.\n+\n+   If the name (plus a name augmentation, if required) is less than 32\n+characters in length, then no special action is performed.  If the name\n+is longer than 31 characters, the assembler (GAS) will generate a hash\n+string based upon the function name, truncate the function name to 23\n+characters, and append the hash string to the truncated name.  If the\n+`/VERBOSE' compiler option is used, the assembler will print both the\n+full and truncated names of each symbol that is truncated.\n+\n+   The `/NOCASE_HACK' compiler option should not be used when you are\n+compiling programs that use libg++.  libg++ has several instances of\n+objects (i.e.  `Filebuf' and `filebuf') which become indistinguishable\n+in a case-insensitive environment.  This leads to cases where you need\n+to inhibit augmentation selectively (if you were using libg++ and Xlib\n+in the same program, for example).  There is no special feature for\n+doing this, but you can get the result by defining a macro for each\n+mixed case symbol for which you wish to inhibit augmentation.  The\n+macro should expand into the lower case equivalent of itself.  For\n+example:\n+\n+     #define StuDlyCapS studlycaps\n+\n+   These macro definitions can be placed in a header file to minimize\n+the number of changes to your source code.\n+\n+\u001f\n+File: gcc.info,  Node: Portability,  Next: Interface,  Prev: VMS,  Up: Top\n+\n+GNU CC and Portability\n+**********************\n+\n+   The main goal of GNU CC was to make a good, fast compiler for\n+machines in the class that the GNU system aims to run on: 32-bit\n+machines that address 8-bit bytes and have several general registers.\n+Elegance, theoretical power and simplicity are only secondary.\n+\n+   GNU CC gets most of the information about the target machine from a\n+machine description which gives an algebraic formula for each of the\n+machine's instructions.  This is a very clean way to describe the\n+target.  But when the compiler needs information that is difficult to\n+express in this fashion, I have not hesitated to define an ad-hoc\n+parameter to the machine description.  The purpose of portability is to\n+reduce the total work needed on the compiler; it was not of interest\n+for its own sake.\n+\n+   GNU CC does not contain machine dependent code, but it does contain\n+code that depends on machine parameters such as endianness (whether the\n+most significant byte has the highest or lowest address of the bytes in\n+a word) and the availability of autoincrement addressing.  In the\n+RTL-generation pass, it is often necessary to have multiple strategies\n+for generating code for a particular kind of syntax tree, strategies\n+that are usable for different combinations of parameters.  Often I have\n+not tried to address all possible cases, but only the common ones or\n+only the ones that I have encountered.  As a result, a new target may\n+require additional strategies.  You will know if this happens because\n+the compiler will call `abort'.  Fortunately, the new strategies can be\n+added in a machine-independent fashion, and will affect only the target\n+machines that need them.\n+\n+\u001f\n+File: gcc.info,  Node: Interface,  Next: Passes,  Prev: Portability,  Up: Top\n+\n+Interfacing to GNU CC Output\n+****************************\n+\n+   GNU CC is normally configured to use the same function calling\n+convention normally in use on the target system.  This is done with the\n+machine-description macros described (*note Target Macros::.).\n+\n+   However, returning of structure and union values is done differently\n+on some target machines.  As a result, functions compiled with PCC\n+returning such types cannot be called from code compiled with GNU CC,\n+and vice versa.  This does not cause trouble often because few Unix\n+library routines return structures or unions.\n+\n+   GNU CC code returns structures and unions that are 1, 2, 4 or 8 bytes\n+long in the same registers used for `int' or `double' return values.\n+(GNU CC typically allocates variables of such types in registers also.)\n+Structures and unions of other sizes are returned by storing them into\n+an address passed by the caller (usually in a register).  The\n+machine-description macros `STRUCT_VALUE' and `STRUCT_INCOMING_VALUE'\n+tell GNU CC where to pass this address.\n+\n+   By contrast, PCC on most target machines returns structures and\n+unions of any size by copying the data into an area of static storage,\n+and then returning the address of that storage as if it were a pointer\n+value.  The caller must copy the data from that memory area to the\n+place where the value is wanted.  This is slower than the method used\n+by GNU CC, and fails to be reentrant.\n+\n+   On some target machines, such as RISC machines and the 80386, the\n+standard system convention is to pass to the subroutine the address of\n+where to return the value.  On these machines, GNU CC has been\n+configured to be compatible with the standard compiler, when this method\n+is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.\n+\n+   GNU CC uses the system's standard convention for passing arguments.\n+On some machines, the first few arguments are passed in registers; in\n+others, all are passed on the stack.  It would be possible to use\n+registers for argument passing on any machine, and this would probably\n+result in a significant speedup.  But the result would be complete\n+incompatibility with code that follows the standard convention.  So this\n+change is practical only if you are switching to GNU CC as the sole C\n+compiler for the system.  We may implement register argument passing on\n+certain machines once we have a complete GNU system so that we can\n+compile the libraries with GNU CC.\n+\n+   On some machines (particularly the Sparc), certain types of arguments\n+are passed \"by invisible reference\".  This means that the value is\n+stored in memory, and the address of the memory location is passed to\n+the subroutine.\n+\n+   If you use `longjmp', beware of automatic variables.  ANSI C says\n+that automatic variables that are not declared `volatile' have undefined\n+values after a `longjmp'.  And this is all GNU CC promises to do,\n+because it is very difficult to restore register variables correctly,\n+and one of GNU CC's features is that it can put variables in registers\n+without your asking it to.\n+\n+   If you want a variable to be unaltered by `longjmp', and you don't\n+want to write `volatile' because old C compilers don't accept it, just\n+take the address of the variable.  If a variable's address is ever\n+taken, even if just to compute it and ignore it, then the variable\n+cannot go in a register:\n+\n+     {\n+       int careful;\n+       &careful;\n+       ...\n+     }\n+\n+   Code compiled with GNU CC may call certain library routines.  Most of\n+them handle arithmetic for which there are no instructions.  This\n+includes multiply and divide on some machines, and floating point\n+operations on any machine for which floating point support is disabled\n+with `-msoft-float'.  Some standard parts of the C library, such as\n+`bcopy' or `memcpy', are also called automatically.  The usual function\n+call interface is used for calling the library routines.\n+\n+   These library routines should be defined in the library `libgcc.a',\n+which GNU CC automatically searches whenever it links a program.  On\n+machines that have multiply and divide instructions, if hardware\n+floating point is in use, normally `libgcc.a' is not needed, but it is\n+searched just in case.\n+\n+   Each arithmetic function is defined in `libgcc1.c' to use the\n+corresponding C arithmetic operator.  As long as the file is compiled\n+with another C compiler, which supports all the C arithmetic operators,\n+this file will work portably.  However, `libgcc1.c' does not work if\n+compiled with GNU CC, because each arithmetic function would compile\n+into a call to itself!\n+"}, {"sha": "c7bf8502727b407a078c15ec4892dd1566262190", "filename": "gcc/gcc.info-14", "status": "added", "additions": 1161, "deletions": 0, "changes": 1161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-14", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-14", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-14?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1161 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Passes,  Next: RTL,  Prev: Interface,  Up: Top\n+\n+Passes and Files of the Compiler\n+********************************\n+\n+   The overall control structure of the compiler is in `toplev.c'.  This\n+file is responsible for initialization, decoding arguments, opening and\n+closing files, and sequencing the passes.\n+\n+   The parsing pass is invoked only once, to parse the entire input.\n+The RTL intermediate code for a function is generated as the function\n+is parsed, a statement at a time.  Each statement is read in as a\n+syntax tree and then converted to RTL; then the storage for the tree\n+for the statement is reclaimed.  Storage for types (and the expressions\n+for their sizes), declarations, and a representation of the binding\n+contours and how they nest, remain until the function is finished being\n+compiled; these are all needed to output the debugging information.\n+\n+   Each time the parsing pass reads a complete function definition or\n+top-level declaration, it calls either the function\n+`rest_of_compilation', or the function `rest_of_decl_compilation' in\n+`toplev.c', which are responsible for all further processing necessary,\n+ending with output of the assembler language.  All other compiler\n+passes run, in sequence, within `rest_of_compilation'.  When that\n+function returns from compiling a function definition, the storage used\n+for that function definition's compilation is entirely freed, unless it\n+is an inline function (*note An Inline Function is As Fast As a Macro:\n+Inline.).\n+\n+   Here is a list of all the passes of the compiler and their source\n+files.  Also included is a description of where debugging dumps can be\n+requested with `-d' options.\n+\n+   * Parsing.  This pass reads the entire text of a function definition,\n+     constructing partial syntax trees.  This and RTL generation are no\n+     longer truly separate passes (formerly they were), but it is\n+     easier to think of them as separate.\n+\n+     The tree representation does not entirely follow C syntax, because\n+     it is intended to support other languages as well.\n+\n+     Language-specific data type analysis is also done in this pass,\n+     and every tree node that represents an expression has a data type\n+     attached.  Variables are represented as declaration nodes.\n+\n+     Constant folding and some arithmetic simplifications are also done\n+     during this pass.\n+\n+     The language-independent source files for parsing are\n+     `stor-layout.c', `fold-const.c', and `tree.c'.  There are also\n+     header files `tree.h' and `tree.def' which define the format of\n+     the tree representation.\n+\n+     The source files to parse C are `c-parse.in', `c-decl.c',\n+     `c-typeck.c', `c-aux-info.c', `c-convert.c', and `c-lang.c' along\n+     with header files `c-lex.h', and `c-tree.h'.\n+\n+     The source files for parsing C++ are `cp-parse.y', `cp-class.c',\n+     `cp-cvt.c', `cp-decl.c', `cp-decl2.c', `cp-dem.c', `cp-except.c',\n+     `cp-expr.c', `cp-init.c', `cp-lex.c', `cp-method.c', `cp-ptree.c',\n+     `cp-search.c', `cp-tree.c', `cp-type2.c', and `cp-typeck.c', along\n+     with header files `cp-tree.def', `cp-tree.h', and `cp-decl.h'.\n+\n+     The special source files for parsing Objective C are\n+     `objc-parse.y', `objc-actions.c', `objc-tree.def', and\n+     `objc-actions.h'.  Certain C-specific files are used for this as\n+     well.\n+\n+     The file `c-common.c' is also used for all of the above languages.\n+\n+   * RTL generation.  This is the conversion of syntax tree into RTL\n+     code.  It is actually done statement-by-statement during parsing,\n+     but for most purposes it can be thought of as a separate pass.\n+\n+     This is where the bulk of target-parameter-dependent code is found,\n+     since often it is necessary for strategies to apply only when\n+     certain standard kinds of instructions are available.  The purpose\n+     of named instruction patterns is to provide this information to\n+     the RTL generation pass.\n+\n+     Optimization is done in this pass for `if'-conditions that are\n+     comparisons, boolean operations or conditional expressions.  Tail\n+     recursion is detected at this time also.  Decisions are made about\n+     how best to arrange loops and how to output `switch' statements.\n+\n+     The source files for RTL generation include `stmt.c', `calls.c',\n+     `expr.c', `explow.c', `expmed.c', `function.c', `optabs.c' and\n+     `emit-rtl.c'.  Also, the file `insn-emit.c', generated from the\n+     machine description by the program `genemit', is used in this\n+     pass.  The header file `expr.h' is used for communication within\n+     this pass.\n+\n+     The header files `insn-flags.h' and `insn-codes.h', generated from\n+     the machine description by the programs `genflags' and `gencodes',\n+     tell this pass which standard names are available for use and\n+     which patterns correspond to them.\n+\n+     Aside from debugging information output, none of the following\n+     passes refers to the tree structure representation of the function\n+     (only part of which is saved).\n+\n+     The decision of whether the function can and should be expanded\n+     inline in its subsequent callers is made at the end of rtl\n+     generation.  The function must meet certain criteria, currently\n+     related to the size of the function and the types and number of\n+     parameters it has.  Note that this function may contain loops,\n+     recursive calls to itself (tail-recursive functions can be\n+     inlined!), gotos, in short, all constructs supported by GNU CC.\n+     The file `integrate.c' contains the code to save a function's rtl\n+     for later inlining and to inline that rtl when the function is\n+     called.  The header file `integrate.h' is also used for this\n+     purpose.\n+\n+     The option `-dr' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.rtl' to\n+     the input file name.\n+\n+   * Jump optimization.  This pass simplifies jumps to the following\n+     instruction, jumps across jumps, and jumps to jumps.  It deletes\n+     unreferenced labels and unreachable code, except that unreachable\n+     code that contains a loop is not recognized as unreachable in this\n+     pass.  (Such loops are deleted later in the basic block analysis.)\n+     It also converts some code originally written with jumps into\n+     sequences of instructions that directly set values from the\n+     results of comparisons, if the machine has such instructions.\n+\n+     Jump optimization is performed two or three times.  The first time\n+     is immediately following RTL generation.  The second time is after\n+     CSE, but only if CSE says repeated jump optimization is needed.\n+     The last time is right before the final pass.  That time,\n+     cross-jumping and deletion of no-op move instructions are done\n+     together with the optimizations described above.\n+\n+     The source file of this pass is `jump.c'.\n+\n+     The option `-dj' causes a debugging dump of the RTL code after\n+     this pass is run for the first time.  This dump file's name is\n+     made by appending `.jump' to the input file name.\n+\n+   * Register scan.  This pass finds the first and last use of each\n+     register, as a guide for common subexpression elimination.  Its\n+     source is in `regclass.c'.\n+\n+   * Jump threading.  This pass detects a condition jump that branches\n+     to an identical or inverse test.  Such jumps can be `threaded'\n+     through the second conditional test.  The source code for this\n+     pass is in `jump.c'.  This optimization is only performed if\n+     `-fthread-jumps' is enabled.\n+\n+   * Common subexpression elimination.  This pass also does constant\n+     propagation.  Its source file is `cse.c'.  If constant propagation\n+     causes conditional jumps to become unconditional or to become\n+     no-ops, jump optimization is run again when CSE is finished.\n+\n+     The option `-ds' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.cse' to\n+     the input file name.\n+\n+   * Loop optimization.  This pass moves constant expressions out of\n+     loops, and optionally does strength-reduction and loop unrolling\n+     as well.  Its source files are `loop.c' and `unroll.c', plus the\n+     header `loop.h' used for communication between them.  Loop\n+     unrolling uses some functions in `integrate.c' and the header\n+     `integrate.h'.\n+\n+     The option `-dL' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.loop' to\n+     the input file name.\n+\n+   * If `-frerun-cse-after-loop' was enabled, a second common\n+     subexpression elimination pass is performed after the loop\n+     optimization pass.  Jump threading is also done again at this time\n+     if it was specified.\n+\n+     The option `-dt' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.cse2' to\n+     the input file name.\n+\n+   * Stupid register allocation is performed at this point in a\n+     nonoptimizing compilation.  It does a little data flow analysis as\n+     well.  When stupid register allocation is in use, the next pass\n+     executed is the reloading pass; the others in between are skipped.\n+     The source file is `stupid.c'.\n+\n+   * Data flow analysis (`flow.c').  This pass divides the program into\n+     basic blocks (and in the process deletes unreachable loops); then\n+     it computes which pseudo-registers are live at each point in the\n+     program, and makes the first instruction that uses a value point at\n+     the instruction that computed the value.\n+\n+     This pass also deletes computations whose results are never used,\n+     and combines memory references with add or subtract instructions\n+     to make autoincrement or autodecrement addressing.\n+\n+     The option `-df' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.flow' to\n+     the input file name.  If stupid register allocation is in use, this\n+     dump file reflects the full results of such allocation.\n+\n+   * Instruction combination (`combine.c').  This pass attempts to\n+     combine groups of two or three instructions that are related by\n+     data flow into single instructions.  It combines the RTL\n+     expressions for the instructions by substitution, simplifies the\n+     result using algebra, and then attempts to match the result\n+     against the machine description.\n+\n+     The option `-dc' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.combine'\n+     to the input file name.\n+\n+   * Instruction scheduling (`sched.c').  This pass looks for\n+     instructions whose output will not be available by the time that\n+     it is used in subsequent instructions.  (Memory loads and floating\n+     point instructions often have this behavior on RISC machines).  It\n+     re-orders instructions within a basic block to try to separate the\n+     definition and use of items that otherwise would cause pipeline\n+     stalls.\n+\n+     Instruction scheduling is performed twice.  The first time is\n+     immediately after instruction combination and the second is\n+     immediately after reload.\n+\n+     The option `-dS' causes a debugging dump of the RTL code after this\n+     pass is run for the first time.  The dump file's name is made by\n+     appending `.sched' to the input file name.\n+\n+   * Register class preferencing.  The RTL code is scanned to find out\n+     which register class is best for each pseudo register.  The source\n+     file is `regclass.c'.\n+\n+   * Local register allocation (`local-alloc.c').  This pass allocates\n+     hard registers to pseudo registers that are used only within one\n+     basic block.  Because the basic block is linear, it can use fast\n+     and powerful techniques to do a very good job.\n+\n+     The option `-dl' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.lreg' to\n+     the input file name.\n+\n+   * Global register allocation (`global.c').  This pass allocates hard\n+     registers for the remaining pseudo registers (those whose life\n+     spans are not contained in one basic block).\n+\n+   * Reloading.  This pass renumbers pseudo registers with the hardware\n+     registers numbers they were allocated.  Pseudo registers that did\n+     not get hard registers are replaced with stack slots.  Then it\n+     finds instructions that are invalid because a value has failed to\n+     end up in a register, or has ended up in a register of the wrong\n+     kind.  It fixes up these instructions by reloading the\n+     problematical values temporarily into registers.  Additional\n+     instructions are generated to do the copying.\n+\n+     The reload pass also optionally eliminates the frame pointer and\n+     inserts instructions to save and restore call-clobbered registers\n+     around calls.\n+\n+     Source files are `reload.c' and `reload1.c', plus the header\n+     `reload.h' used for communication between them.\n+\n+     The option `-dg' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.greg' to\n+     the input file name.\n+\n+   * Instruction scheduling is repeated here to try to avoid pipeline\n+     stalls due to memory loads generated for spilled pseudo registers.\n+\n+     The option `-dR' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.sched2'\n+     to the input file name.\n+\n+   * Jump optimization is repeated, this time including cross-jumping\n+     and deletion of no-op move instructions.\n+\n+     The option `-dJ' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.jump2' to\n+     the input file name.\n+\n+   * Delayed branch scheduling.  This optional pass attempts to find\n+     instructions that can go into the delay slots of other\n+     instructions, usually jumps and calls.  The source file name is\n+     `reorg.c'.\n+\n+     The option `-dd' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.dbr' to\n+     the input file name.\n+\n+   * Conversion from usage of some hard registers to usage of a register\n+     stack may be done at this point.  Currently, this is supported only\n+     for the floating-point registers of the Intel 80387 coprocessor.\n+     The source file name is `reg-stack.c'.\n+\n+     The options `-dk' causes a debugging dump of the RTL code after\n+     this pass.  This dump file's name is made by appending `.stack' to\n+     the input file name.\n+\n+   * Final.  This pass outputs the assembler code for the function.  It\n+     is also responsible for identifying spurious test and compare\n+     instructions.  Machine-specific peephole optimizations are\n+     performed at the same time.  The function entry and exit sequences\n+     are generated directly as assembler code in this pass; they never\n+     exist as RTL.\n+\n+     The source files are `final.c' plus `insn-output.c'; the latter is\n+     generated automatically from the machine description by the tool\n+     `genoutput'.  The header file `conditions.h' is used for\n+     communication between these files.\n+\n+   * Debugging information output.  This is run after final because it\n+     must output the stack slot offsets for pseudo registers that did\n+     not get hard registers.  Source files are `dbxout.c' for DBX\n+     symbol table format, `sdbout.c' for SDB symbol table format, and\n+     `dwarfout.c' for DWARF symbol table format.\n+\n+   Some additional files are used by all or many passes:\n+\n+   * Every pass uses `machmode.def' and `machmode.h' which define the\n+     machine modes.\n+\n+   * Several passes use `real.h', which defines the default\n+     representation of floating point constants and how to operate on\n+     them.\n+\n+   * All the passes that work with RTL use the header files `rtl.h' and\n+     `rtl.def', and subroutines in file `rtl.c'.  The tools `gen*' also\n+     use these files to read and work with the machine description RTL.\n+\n+   * Several passes refer to the header file `insn-config.h' which\n+     contains a few parameters (C macro definitions) generated\n+     automatically from the machine description RTL by the tool\n+     `genconfig'.\n+\n+   * Several passes use the instruction recognizer, which consists of\n+     `recog.c' and `recog.h', plus the files `insn-recog.c' and\n+     `insn-extract.c' that are generated automatically from the machine\n+     description by the tools `genrecog' and `genextract'.\n+\n+   * Several passes use the header files `regs.h' which defines the\n+     information recorded about pseudo register usage, and\n+     `basic-block.h' which defines the information recorded about basic\n+     blocks.\n+\n+   * `hard-reg-set.h' defines the type `HARD_REG_SET', a bit-vector\n+     with a bit for each hard register, and some macros to manipulate\n+     it.  This type is just `int' if the machine has few enough hard\n+     registers; otherwise it is an array of `int' and some of the\n+     macros expand into loops.\n+\n+   * Several passes use instruction attributes.  A definition of the\n+     attributes defined for a particular machine is in file\n+     `insn-attr.h', which is generated from the machine description by\n+     the program `genattr'.  The file `insn-attrtab.c' contains\n+     subroutines to obtain the attribute values for insns.  It is\n+     generated from the machine description by the program `genattrtab'.\n+\n+\u001f\n+File: gcc.info,  Node: RTL,  Next: Machine Desc,  Prev: Passes,  Up: Top\n+\n+RTL Representation\n+******************\n+\n+   Most of the work of the compiler is done on an intermediate\n+representation called register transfer language.  In this language,\n+the instructions to be output are described, pretty much one by one, in\n+an algebraic form that describes what the instruction does.\n+\n+   RTL is inspired by Lisp lists.  It has both an internal form, made\n+up of structures that point at other structures, and a textual form\n+that is used in the machine description and in printed debugging dumps.\n+The textual form uses nested parentheses to indicate the pointers in\n+the internal form.\n+\n+* Menu:\n+\n+* RTL Objects::       Expressions vs vectors vs strings vs integers.\n+* Accessors::         Macros to access expression operands or vector elts.\n+* Flags::             Other flags in an RTL expression.\n+* Machine Modes::     Describing the size and format of a datum.\n+* Constants::         Expressions with constant values.\n+* Regs and Memory::   Expressions representing register contents or memory.\n+* Arithmetic::        Expressions representing arithmetic on other expressions.\n+* Comparisons::       Expressions representing comparison of expressions.\n+* Bit Fields::        Expressions representing bitfields in memory or reg.\n+* Conversions::       Extending, truncating, floating or fixing.\n+* RTL Declarations::  Declaring volatility, constancy, etc.\n+* Side Effects::      Expressions for storing in registers, etc.\n+* Incdec::            Embedded side-effects for autoincrement addressing.\n+* Assembler::         Representing `asm' with operands.\n+* Insns::             Expression types for entire insns.\n+* Calls::             RTL representation of function call insns.\n+* Sharing::           Some expressions are unique; others *must* be copied.\n+* Reading RTL::       Reading textual RTL from a file.\n+\n+\u001f\n+File: gcc.info,  Node: RTL Objects,  Next: Accessors,  Prev: RTL,  Up: RTL\n+\n+RTL Object Types\n+================\n+\n+   RTL uses five kinds of objects: expressions, integers, wide integers,\n+strings and vectors.  Expressions are the most important ones.  An RTL\n+expression (\"RTX\", for short) is a C structure, but it is usually\n+referred to with a pointer; a type that is given the typedef name `rtx'.\n+\n+   An integer is simply an `int'; their written form uses decimal\n+digits.  A wide integer is an integral object whose type is\n+`HOST_WIDE_INT' (*note Config::.); their written form uses decimal\n+digits.\n+\n+   A string is a sequence of characters.  In core it is represented as a\n+`char *' in usual C fashion, and it is written in C syntax as well.\n+However, strings in RTL may never be null.  If you write an empty\n+string in a machine description, it is represented in core as a null\n+pointer rather than as a pointer to a null character.  In certain\n+contexts, these null pointers instead of strings are valid.  Within RTL\n+code, strings are most commonly found inside `symbol_ref' expressions,\n+but they appear in other contexts in the RTL expressions that make up\n+machine descriptions.\n+\n+   A vector contains an arbitrary number of pointers to expressions.\n+The number of elements in the vector is explicitly present in the\n+vector.  The written form of a vector consists of square brackets\n+(`[...]') surrounding the elements, in sequence and with whitespace\n+separating them.  Vectors of length zero are not created; null pointers\n+are used instead.\n+\n+   Expressions are classified by \"expression codes\" (also called RTX\n+codes).  The expression code is a name defined in `rtl.def', which is\n+also (in upper case) a C enumeration constant.  The possible expression\n+codes and their meanings are machine-independent.  The code of an RTX\n+can be extracted with the macro `GET_CODE (X)' and altered with\n+`PUT_CODE (X, NEWCODE)'.\n+\n+   The expression code determines how many operands the expression\n+contains, and what kinds of objects they are.  In RTL, unlike Lisp, you\n+cannot tell by looking at an operand what kind of object it is.\n+Instead, you must know from its context--from the expression code of\n+the containing expression.  For example, in an expression of code\n+`subreg', the first operand is to be regarded as an expression and the\n+second operand as an integer.  In an expression of code `plus', there\n+are two operands, both of which are to be regarded as expressions.  In\n+a `symbol_ref' expression, there is one operand, which is to be\n+regarded as a string.\n+\n+   Expressions are written as parentheses containing the name of the\n+expression type, its flags and machine mode if any, and then the\n+operands of the expression (separated by spaces).\n+\n+   Expression code names in the `md' file are written in lower case,\n+but when they appear in C code they are written in upper case.  In this\n+manual, they are shown as follows: `const_int'.\n+\n+   In a few contexts a null pointer is valid where an expression is\n+normally wanted.  The written form of this is `(nil)'.\n+\n+\u001f\n+File: gcc.info,  Node: Accessors,  Next: Flags,  Prev: RTL Objects,  Up: RTL\n+\n+Access to Operands\n+==================\n+\n+   For each expression type `rtl.def' specifies the number of contained\n+objects and their kinds, with four possibilities: `e' for expression\n+(actually a pointer to an expression), `i' for integer, `w' for wide\n+integer, `s' for string, and `E' for vector of expressions.  The\n+sequence of letters for an expression code is called its \"format\".\n+Thus, the format of `subreg' is `ei'.\n+\n+   A few other format characters are used occasionally:\n+\n+`u'\n+     `u' is equivalent to `e' except that it is printed differently in\n+     debugging dumps.  It is used for pointers to insns.\n+\n+`n'\n+     `n' is equivalent to `i' except that it is printed differently in\n+     debugging dumps.  It is used for the line number or code number of\n+     a `note' insn.\n+\n+`S'\n+     `S' indicates a string which is optional.  In the RTL objects in\n+     core, `S' is equivalent to `s', but when the object is read, from\n+     an `md' file, the string value of this operand may be omitted.  An\n+     omitted string is taken to be the null string.\n+\n+`V'\n+     `V' indicates a vector which is optional.  In the RTL objects in\n+     core, `V' is equivalent to `E', but when the object is read from\n+     an `md' file, the vector value of this operand may be omitted.  An\n+     omitted vector is effectively the same as a vector of no elements.\n+\n+`0'\n+     `0' means a slot whose contents do not fit any normal category.\n+     `0' slots are not printed at all in dumps, and are often used in\n+     special ways by small parts of the compiler.\n+\n+   There are macros to get the number of operands, the format, and the\n+class of an expression code:\n+\n+`GET_RTX_LENGTH (CODE)'\n+     Number of operands of an RTX of code CODE.\n+\n+`GET_RTX_FORMAT (CODE)'\n+     The format of an RTX of code CODE, as a C string.\n+\n+`GET_RTX_CLASS (CODE)'\n+     A single character representing the type of RTX operation that code\n+     CODE performs.\n+\n+     The following classes are defined:\n+\n+    `o'\n+          An RTX code that represents an actual object, such as `reg' or\n+          `mem'.  `subreg' is not in this class.\n+\n+    `<'\n+          An RTX code for a comparison.  The codes in this class are\n+          `NE', `EQ', `LE', `LT', `GE', `GT', `LEU', `LTU', `GEU',\n+          `GTU'.\n+\n+    `1'\n+          An RTX code for a unary arithmetic operation, such as `neg'.\n+\n+    `c'\n+          An RTX code for a commutative binary operation, other than\n+          `NE' and `EQ' (which have class `<').\n+\n+    `2'\n+          An RTX code for a noncommutative binary operation, such as\n+          `MINUS'.\n+\n+    `b'\n+          An RTX code for a bitfield operation, either `ZERO_EXTRACT' or\n+          `SIGN_EXTRACT'.\n+\n+    `3'\n+          An RTX code for other three input operations, such as\n+          `IF_THEN_ELSE'.\n+\n+    `i'\n+          An RTX code for a machine insn (`INSN', `JUMP_INSN', and\n+          `CALL_INSN').\n+\n+    `m'\n+          An RTX code for something that matches in insns, such as\n+          `MATCH_DUP'.\n+\n+    `x'\n+          All other RTX codes.\n+\n+   Operands of expressions are accessed using the macros `XEXP',\n+`XINT', `XWINT' and `XSTR'.  Each of these macros takes two arguments:\n+an expression-pointer (RTX) and an operand number (counting from zero).\n+Thus,\n+\n+     XEXP (X, 2)\n+\n+accesses operand 2 of expression X, as an expression.\n+\n+     XINT (X, 2)\n+\n+accesses the same operand as an integer.  `XSTR', used in the same\n+fashion, would access it as a string.\n+\n+   Any operand can be accessed as an integer, as an expression or as a\n+string.  You must choose the correct method of access for the kind of\n+value actually stored in the operand.  You would do this based on the\n+expression code of the containing expression.  That is also how you\n+would know how many operands there are.\n+\n+   For example, if X is a `subreg' expression, you know that it has two\n+operands which can be correctly accessed as `XEXP (X, 0)' and `XINT (X,\n+1)'.  If you did `XINT (X, 0)', you would get the address of the\n+expression operand but cast as an integer; that might occasionally be\n+useful, but it would be cleaner to write `(int) XEXP (X, 0)'.  `XEXP\n+(X, 1)' would also compile without error, and would return the second,\n+integer operand cast as an expression pointer, which would probably\n+result in a crash when accessed.  Nothing stops you from writing `XEXP\n+(X, 28)' either, but this will access memory past the end of the\n+expression with unpredictable results.\n+\n+   Access to operands which are vectors is more complicated.  You can\n+use the macro `XVEC' to get the vector-pointer itself, or the macros\n+`XVECEXP' and `XVECLEN' to access the elements and length of a vector.\n+\n+`XVEC (EXP, IDX)'\n+     Access the vector-pointer which is operand number IDX in EXP.\n+\n+`XVECLEN (EXP, IDX)'\n+     Access the length (number of elements) in the vector which is in\n+     operand number IDX in EXP.  This value is an `int'.\n+\n+`XVECEXP (EXP, IDX, ELTNUM)'\n+     Access element number ELTNUM in the vector which is in operand\n+     number IDX in EXP.  This value is an RTX.\n+\n+     It is up to you to make sure that ELTNUM is not negative and is\n+     less than `XVECLEN (EXP, IDX)'.\n+\n+   All the macros defined in this section expand into lvalues and\n+therefore can be used to assign the operands, lengths and vector\n+elements as well as to access them.\n+\n+\u001f\n+File: gcc.info,  Node: Flags,  Next: Machine Modes,  Prev: Accessors,  Up: RTL\n+\n+Flags in an RTL Expression\n+==========================\n+\n+   RTL expressions contain several flags (one-bit bitfields) that are\n+used in certain types of expression.  Most often they are accessed with\n+the following macros:\n+\n+`MEM_VOLATILE_P (X)'\n+     In `mem' expressions, nonzero for volatile memory references.\n+     Stored in the `volatil' field and printed as `/v'.\n+\n+`MEM_IN_STRUCT_P (X)'\n+     In `mem' expressions, nonzero for reference to an entire\n+     structure, union or array, or to a component of one.  Zero for\n+     references to a scalar variable or through a pointer to a scalar.\n+     Stored in the `in_struct' field and printed as `/s'.\n+\n+`REG_LOOP_TEST_P'\n+     In `reg' expressions, nonzero if this register's entire life is\n+     contained in the exit test code for some loop.  Stored in the\n+     `in_struct' field and printed as `/s'.\n+\n+`REG_USERVAR_P (X)'\n+     In a `reg', nonzero if it corresponds to a variable present in the\n+     user's source code.  Zero for temporaries generated internally by\n+     the compiler.  Stored in the `volatil' field and printed as `/v'.\n+\n+`REG_FUNCTION_VALUE_P (X)'\n+     Nonzero in a `reg' if it is the place in which this function's\n+     value is going to be returned.  (This happens only in a hard\n+     register.)  Stored in the `integrated' field and printed as `/i'.\n+\n+     The same hard register may be used also for collecting the values\n+     of functions called by this one, but `REG_FUNCTION_VALUE_P' is zero\n+     in this kind of use.\n+\n+`SUBREG_PROMOTED_VAR_P'\n+     Nonzero in a `subreg' if it was made when accessing an object that\n+     was promoted to a wider mode in accord with the `PROMOTED_MODE'\n+     machine description macro (*note Storage Layout::.).  In this\n+     case, the mode of the `subreg' is the declared mode of the object\n+     and the mode of `SUBREG_REG' is the mode of the register that\n+     holds the object.  Promoted variables are always either sign- or\n+     zero-extended to the wider mode on every assignment.  Stored in\n+     the `in_struct' field and printed as `/s'.\n+\n+`SUBREG_PROMOTED_UNSIGNED_P'\n+     Nonzero in a `subreg' that has `SUBREG_PROMOTED_VAR_P' nonzero if\n+     the object being referenced is kept zero-extended and zero if it\n+     is kept sign-extended.  Stored in the `unchanging' field and\n+     printed as `/u'.\n+\n+`RTX_UNCHANGING_P (X)'\n+     Nonzero in a `reg' or `mem' if the value is not changed.  (This\n+     flag is not set for memory references via pointers to constants.\n+     Such pointers only guarantee that the object will not be changed\n+     explicitly by the current function.  The object might be changed by\n+     other functions or by aliasing.)  Stored in the `unchanging' field\n+     and printed as `/u'.\n+\n+`RTX_INTEGRATED_P (INSN)'\n+     Nonzero in an insn if it resulted from an in-line function call.\n+     Stored in the `integrated' field and printed as `/i'.  This may be\n+     deleted; nothing currently depends on it.\n+\n+`SYMBOL_REF_USED (X)'\n+     In a `symbol_ref', indicates that X has been used.  This is\n+     normally only used to ensure that X is only declared external\n+     once.  Stored in the `used' field.\n+\n+`SYMBOL_REF_FLAG (X)'\n+     In a `symbol_ref', this is used as a flag for machine-specific\n+     purposes.  Stored in the `volatil' field and printed as `/v'.\n+\n+`LABEL_OUTSIDE_LOOP_P'\n+     In `label_ref' expressions, nonzero if this is a reference to a\n+     label that is outside the innermost loop containing the reference\n+     to the label.  Stored in the `in_struct' field and printed as `/s'.\n+\n+`INSN_DELETED_P (INSN)'\n+     In an insn, nonzero if the insn has been deleted.  Stored in the\n+     `volatil' field and printed as `/v'.\n+\n+`INSN_ANNULLED_BRANCH_P (INSN)'\n+     In an `insn' in the delay slot of a branch insn, indicates that an\n+     annulling branch should be used.  See the discussion under\n+     `sequence' below.  Stored in the `unchanging' field and printed as\n+     `/u'.\n+\n+`INSN_FROM_TARGET_P (INSN)'\n+     In an `insn' in a delay slot of a branch, indicates that the insn\n+     is from the target of the branch.  If the branch insn has\n+     `INSN_ANNULLED_BRANCH_P' set, this insn should only be executed if\n+     the branch is taken.  For annulled branches with this bit clear,\n+     the insn should be executed only if the branch is not taken.\n+     Stored in the `in_struct' field and printed as `/s'.\n+\n+`CONSTANT_POOL_ADDRESS_P (X)'\n+     Nonzero in a `symbol_ref' if it refers to part of the current\n+     function's \"constants pool\".  These are addresses close to the\n+     beginning of the function, and GNU CC assumes they can be addressed\n+     directly (perhaps with the help of base registers).  Stored in the\n+     `unchanging' field and printed as `/u'.\n+\n+`CONST_CALL_P (X)'\n+     In a `call_insn', indicates that the insn represents a call to a\n+     const function.  Stored in the `unchanging' field and printed as\n+     `/u'.\n+\n+`LABEL_PRESERVE_P (X)'\n+     In a `code_label', indicates that the label can never be deleted.\n+     Labels referenced by a non-local goto will have this bit set.\n+     Stored in the `in_struct' field and printed as `/s'.\n+\n+`SCHED_GROUP_P (INSN)'\n+     During instruction scheduling, in an insn, indicates that the\n+     previous insn must be scheduled together with this insn.  This is\n+     used to ensure that certain groups of instructions will not be\n+     split up by the instruction scheduling pass, for example, `use'\n+     insns before a `call_insn' may not be separated from the\n+     `call_insn'.  Stored in the `in_struct' field and printed as `/s'.\n+\n+   These are the fields which the above macros refer to:\n+\n+`used'\n+     Normally, this flag is used only momentarily, at the end of RTL\n+     generation for a function, to count the number of times an\n+     expression appears in insns.  Expressions that appear more than\n+     once are copied, according to the rules for shared structure\n+     (*note Sharing::.).\n+\n+     In a `symbol_ref', it indicates that an external declaration for\n+     the symbol has already been written.\n+\n+     In a `reg', it is used by the leaf register renumbering code to\n+     ensure that each register is only renumbered once.\n+\n+`volatil'\n+     This flag is used in `mem', `symbol_ref' and `reg' expressions and\n+     in insns.  In RTL dump files, it is printed as `/v'.\n+\n+     In a `mem' expression, it is 1 if the memory reference is volatile.\n+     Volatile memory references may not be deleted, reordered or\n+     combined.\n+\n+     In a `symbol_ref' expression, it is used for machine-specific\n+     purposes.\n+\n+     In a `reg' expression, it is 1 if the value is a user-level\n+     variable.  0 indicates an internal compiler temporary.\n+\n+     In an insn, 1 means the insn has been deleted.\n+\n+`in_struct'\n+     In `mem' expressions, it is 1 if the memory datum referred to is\n+     all or part of a structure or array; 0 if it is (or might be) a\n+     scalar variable.  A reference through a C pointer has 0 because\n+     the pointer might point to a scalar variable.  This information\n+     allows the compiler to determine something about possible cases of\n+     aliasing.\n+\n+     In an insn in the delay slot of a branch, 1 means that this insn\n+     is from the target of the branch.\n+\n+     During instruction scheduling, in an insn, 1 means that this insn\n+     must be scheduled as part of a group together with the previous\n+     insn.\n+\n+     In `reg' expressions, it is 1 if the register has its entire life\n+     contained within the test expression of some loop.\n+\n+     In `subreg' expressions, 1 means that the `subreg' is accessing an\n+     object that has had its mode promoted from a wider mode.\n+\n+     In `label_ref' expressions, 1 means that the referenced label is\n+     outside the innermost loop containing the insn in which the\n+     `label_ref' was found.\n+\n+     In `code_label' expressions, it is 1 if the label may never be\n+     deleted.  This is used for labels which are the target of\n+     non-local gotos.\n+\n+     In an RTL dump, this flag is represented as `/s'.\n+\n+`unchanging'\n+     In `reg' and `mem' expressions, 1 means that the value of the\n+     expression never changes.\n+\n+     In `subreg' expressions, it is 1 if the `subreg' references an\n+     unsigned object whose mode has been promoted to a wider mode.\n+\n+     In an insn, 1 means that this is an annulling branch.\n+\n+     In a `symbol_ref' expression, 1 means that this symbol addresses\n+     something in the per-function constants pool.\n+\n+     In a `call_insn', 1 means that this instruction is a call to a\n+     const function.\n+\n+     In an RTL dump, this flag is represented as `/u'.\n+\n+`integrated'\n+     In some kinds of expressions, including insns, this flag means the\n+     rtl was produced by procedure integration.\n+\n+     In a `reg' expression, this flag indicates the register containing\n+     the value to be returned by the current function.  On machines\n+     that pass parameters in registers, the same register number may be\n+     used for parameters as well, but this flag is not set on such uses.\n+\n+\u001f\n+File: gcc.info,  Node: Machine Modes,  Next: Constants,  Prev: Flags,  Up: RTL\n+\n+Machine Modes\n+=============\n+\n+   A machine mode describes a size of data object and the\n+representation used for it.  In the C code, machine modes are\n+represented by an enumeration type, `enum machine_mode', defined in\n+`machmode.def'.  Each RTL expression has room for a machine mode and so\n+do certain kinds of tree expressions (declarations and types, to be\n+precise).\n+\n+   In debugging dumps and machine descriptions, the machine mode of an\n+RTL expression is written after the expression code with a colon to\n+separate them.  The letters `mode' which appear at the end of each\n+machine mode name are omitted.  For example, `(reg:SI 38)' is a `reg'\n+expression with machine mode `SImode'.  If the mode is `VOIDmode', it\n+is not written at all.\n+\n+   Here is a table of machine modes.  The term \"byte\" below refers to an\n+object of `BITS_PER_UNIT' bits (*note Storage Layout::.).\n+\n+`QImode'\n+     \"Quarter-Integer\" mode represents a single byte treated as an\n+     integer.\n+\n+`HImode'\n+     \"Half-Integer\" mode represents a two-byte integer.\n+\n+`PSImode'\n+     \"Partial Single Integer\" mode represents an integer which occupies\n+     four bytes but which doesn't really use all four.  On some\n+     machines, this is the right mode to use for pointers.\n+\n+`SImode'\n+     \"Single Integer\" mode represents a four-byte integer.\n+\n+`PDImode'\n+     \"Partial Double Integer\" mode represents an integer which occupies\n+     eight bytes but which doesn't really use all eight.  On some\n+     machines, this is the right mode to use for certain pointers.\n+\n+`DImode'\n+     \"Double Integer\" mode represents an eight-byte integer.\n+\n+`TImode'\n+     \"Tetra Integer\" (?) mode represents a sixteen-byte integer.\n+\n+`SFmode'\n+     \"Single Floating\" mode represents a single-precision (four byte)\n+     floating point number.\n+\n+`DFmode'\n+     \"Double Floating\" mode represents a double-precision (eight byte)\n+     floating point number.\n+\n+`XFmode'\n+     \"Extended Floating\" mode represents a triple-precision (twelve\n+     byte) floating point number.  This mode is used for IEEE extended\n+     floating point.  On some systems not all bits within these bytes\n+     will actually be used.\n+\n+`TFmode'\n+     \"Tetra Floating\" mode represents a quadruple-precision (sixteen\n+     byte) floating point number.\n+\n+`CCmode'\n+     \"Condition Code\" mode represents the value of a condition code,\n+     which is a machine-specific set of bits used to represent the\n+     result of a comparison operation.  Other machine-specific modes\n+     may also be used for the condition code.  These modes are not used\n+     on machines that use `cc0' (see *note Condition Code::.).\n+\n+`BLKmode'\n+     \"Block\" mode represents values that are aggregates to which none of\n+     the other modes apply.  In RTL, only memory references can have\n+     this mode, and only if they appear in string-move or vector\n+     instructions.  On machines which have no such instructions,\n+     `BLKmode' will not appear in RTL.\n+\n+`VOIDmode'\n+     Void mode means the absence of a mode or an unspecified mode.  For\n+     example, RTL expressions of code `const_int' have mode `VOIDmode'\n+     because they can be taken to have whatever mode the context\n+     requires.  In debugging dumps of RTL, `VOIDmode' is expressed by\n+     the absence of any mode.\n+\n+`SCmode, DCmode, XCmode, TCmode'\n+     These modes stand for a complex number represented as a pair of\n+     floating point values.  The floating point values are in `SFmode',\n+     `DFmode', `XFmode', and `TFmode', respectively.\n+\n+`CQImode, CHImode, CSImode, CDImode, CTImode, COImode'\n+     These modes stand for a complex number represented as a pair of\n+     integer values.  The integer values are in `QImode', `HImode',\n+     `SImode', `DImode', `TImode', and `OImode', respectively.\n+\n+   The machine description defines `Pmode' as a C macro which expands\n+into the machine mode used for addresses.  Normally this is the mode\n+whose size is `BITS_PER_WORD', `SImode' on 32-bit machines.\n+\n+   The only modes which a machine description must support are\n+`QImode', and the modes corresponding to `BITS_PER_WORD',\n+`FLOAT_TYPE_SIZE' and `DOUBLE_TYPE_SIZE'.  The compiler will attempt to\n+use `DImode' for 8-byte structures and unions, but this can be\n+prevented by overriding the definition of `MAX_FIXED_MODE_SIZE'.\n+Alternatively, you can have the compiler use `TImode' for 16-byte\n+structures and unions.  Likewise, you can arrange for the C type `short\n+int' to avoid using `HImode'.\n+\n+   Very few explicit references to machine modes remain in the compiler\n+and these few references will soon be removed.  Instead, the machine\n+modes are divided into mode classes.  These are represented by the\n+enumeration type `enum mode_class' defined in `machmode.h'.  The\n+possible mode classes are:\n+\n+`MODE_INT'\n+     Integer modes.  By default these are `QImode', `HImode', `SImode',\n+     `DImode', and `TImode'.\n+\n+`MODE_PARTIAL_INT'\n+     The \"partial integer\" modes, `PSImode' and `PDImode'.\n+\n+`MODE_FLOAT'\n+     floating point modes.  By default these are `SFmode', `DFmode',\n+     `XFmode' and `TFmode'.\n+\n+`MODE_COMPLEX_INT'\n+     Complex integer modes.  (These are not currently implemented).\n+\n+`MODE_COMPLEX_FLOAT'\n+     Complex floating point modes.  By default these are `SCmode',\n+     `DCmode', `XCmode', and `TCmode'.\n+\n+`MODE_FUNCTION'\n+     Algol or Pascal function variables including a static chain.\n+     (These are not currently implemented).\n+\n+`MODE_CC'\n+     Modes representing condition code values.  These are `CCmode' plus\n+     any modes listed in the `EXTRA_CC_MODES' macro.  *Note Jump\n+     Patterns::, also see *Note Condition Code::.\n+\n+`MODE_RANDOM'\n+     This is a catchall mode class for modes which don't fit into the\n+     above classes.  Currently `VOIDmode' and `BLKmode' are in\n+     `MODE_RANDOM'.\n+\n+   Here are some C macros that relate to machine modes:\n+\n+`GET_MODE (X)'\n+     Returns the machine mode of the RTX X.\n+\n+`PUT_MODE (X, NEWMODE)'\n+     Alters the machine mode of the RTX X to be NEWMODE.\n+\n+`NUM_MACHINE_MODES'\n+     Stands for the number of machine modes available on the target\n+     machine.  This is one greater than the largest numeric value of any\n+     machine mode.\n+\n+`GET_MODE_NAME (M)'\n+     Returns the name of mode M as a string.\n+\n+`GET_MODE_CLASS (M)'\n+     Returns the mode class of mode M.\n+\n+`GET_MODE_WIDER_MODE (M)'\n+     Returns the next wider natural mode.  For example, the expression\n+     `GET_MODE_WIDER_MODE (QImode)' returns `HImode'.\n+\n+`GET_MODE_SIZE (M)'\n+     Returns the size in bytes of a datum of mode M.\n+\n+`GET_MODE_BITSIZE (M)'\n+     Returns the size in bits of a datum of mode M.\n+\n+`GET_MODE_MASK (M)'\n+     Returns a bitmask containing 1 for all bits in a word that fit\n+     within mode M.  This macro can only be used for modes whose\n+     bitsize is less than or equal to `HOST_BITS_PER_INT'.\n+\n+`GET_MODE_ALIGNMENT (M))'\n+     Return the required alignment, in bits, for an object of mode M.\n+\n+`GET_MODE_UNIT_SIZE (M)'\n+     Returns the size in bytes of the subunits of a datum of mode M.\n+     This is the same as `GET_MODE_SIZE' except in the case of complex\n+     modes.  For them, the unit size is the size of the real or\n+     imaginary part.\n+\n+`GET_MODE_NUNITS (M)'\n+     Returns the number of units contained in a mode, i.e.,\n+     `GET_MODE_SIZE' divided by `GET_MODE_UNIT_SIZE'.\n+\n+`GET_CLASS_NARROWEST_MODE (C)'\n+     Returns the narrowest mode in mode class C.\n+\n+   The global variables `byte_mode' and `word_mode' contain modes whose\n+classes are `MODE_INT' and whose bitsizes are either `BITS_PER_UNIT' or\n+`BITS_PER_WORD', respectively.  On 32-bit machines, these are `QImode'\n+and `SImode', respectively.\n+\n+\u001f\n+File: gcc.info,  Node: Constants,  Next: Regs and Memory,  Prev: Machine Modes,  Up: RTL\n+\n+Constant Expression Types\n+=========================\n+\n+   The simplest RTL expressions are those that represent constant\n+values.\n+\n+`(const_int I)'\n+     This type of expression represents the integer value I.  I is\n+     customarily accessed with the macro `INTVAL' as in `INTVAL (EXP)',\n+     which is equivalent to `XWINT (EXP, 0)'.\n+\n+     There is only one expression object for the integer value zero; it\n+     is the value of the variable `const0_rtx'.  Likewise, the only\n+     expression for integer value one is found in `const1_rtx', the only\n+     expression for integer value two is found in `const2_rtx', and the\n+     only expression for integer value negative one is found in\n+     `constm1_rtx'.  Any attempt to create an expression of code\n+     `const_int' and value zero, one, two or negative one will return\n+     `const0_rtx', `const1_rtx', `const2_rtx' or `constm1_rtx' as\n+     appropriate.\n+\n+     Similarly, there is only one object for the integer whose value is\n+     `STORE_FLAG_VALUE'.  It is found in `const_true_rtx'.  If\n+     `STORE_FLAG_VALUE' is one, `const_true_rtx' and `const1_rtx' will\n+     point to the same object.  If `STORE_FLAG_VALUE' is -1,\n+     `const_true_rtx' and `constm1_rtx' will point to the same object.\n+\n+`(const_double:M ADDR I0 I1 ...)'\n+     Represents either a floating-point constant of mode M or an\n+     integer constant too large to fit into `HOST_BITS_PER_WIDE_INT'\n+     bits but small enough to fit within twice that number of bits (GNU\n+     CC does not provide a mechanism to represent even larger\n+     constants).  In the latter case, M will be `VOIDmode'.\n+\n+     ADDR is used to contain the `mem' expression that corresponds to\n+     the location in memory that at which the constant can be found.  If\n+     it has not been allocated a memory location, but is on the chain\n+     of all `const_double' expressions in this compilation (maintained\n+     using an undisplayed field), ADDR contains `const0_rtx'.  If it is\n+     not on the chain, ADDR contains `cc0_rtx'.  ADDR is customarily\n+     accessed with the macro `CONST_DOUBLE_MEM' and the chain field via\n+     `CONST_DOUBLE_CHAIN'.\n+\n+     If M is `VOIDmode', the bits of the value are stored in I0 and I1.\n+     I0 is customarily accessed with the macro `CONST_DOUBLE_LOW' and\n+     I1 with `CONST_DOUBLE_HIGH'.\n+\n+     If the constant is floating point (regardless of its precision),\n+     then the number of integers used to store the value depends on the\n+     size of `REAL_VALUE_TYPE' (*note Cross-compilation::.).  The\n+     integers represent a floating point number, but not precisely in\n+     the target machine's or host machine's floating point format.  To\n+     convert them to the precise bit pattern used by the target\n+     machine, use the macro `REAL_VALUE_TO_TARGET_DOUBLE' and friends\n+     (*note Data Output::.).\n+\n+     The macro `CONST0_RTX (MODE)' refers to an expression with value 0\n+     in mode MODE.  If mode MODE is of mode class `MODE_INT', it\n+     returns `const0_rtx'.  Otherwise, it returns a `CONST_DOUBLE'\n+     expression in mode MODE.  Similarly, the macro `CONST1_RTX (MODE)'\n+     refers to an expression with value 1 in mode MODE and similarly\n+     for `CONST2_RTX'.\n+\n+`(const_string STR)'\n+     Represents a constant string with value STR.  Currently this is\n+     used only for insn attributes (*note Insn Attributes::.) since\n+     constant strings in C are placed in memory.\n+\n+`(symbol_ref:MODE SYMBOL)'\n+     Represents the value of an assembler label for data.  SYMBOL is a\n+     string that describes the name of the assembler label.  If it\n+     starts with a `*', the label is the rest of SYMBOL not including\n+     the `*'.  Otherwise, the label is SYMBOL, usually prefixed with\n+     `_'.\n+\n+     The `symbol_ref' contains a mode, which is usually `Pmode'.\n+     Usually that is the only mode for which a symbol is directly valid.\n+\n+`(label_ref LABEL)'\n+     Represents the value of an assembler label for code.  It contains\n+     one operand, an expression, which must be a `code_label' that\n+     appears in the instruction sequence to identify the place where\n+     the label should go.\n+\n+     The reason for using a distinct expression type for code label\n+     references is so that jump optimization can distinguish them.\n+\n+`(const:M EXP)'\n+     Represents a constant that is the result of an assembly-time\n+     arithmetic computation.  The operand, EXP, is an expression that\n+     contains only constants (`const_int', `symbol_ref' and `label_ref'\n+     expressions) combined with `plus' and `minus'.  However, not all\n+     combinations are valid, since the assembler cannot do arbitrary\n+     arithmetic on relocatable symbols.\n+\n+     M should be `Pmode'.\n+\n+`(high:M EXP)'\n+     Represents the high-order bits of EXP, usually a `symbol_ref'.\n+     The number of bits is machine-dependent and is normally the number\n+     of bits specified in an instruction that initializes the high\n+     order bits of a register.  It is used with `lo_sum' to represent\n+     the typical two-instruction sequence used in RISC machines to\n+     reference a global memory location.\n+\n+     M should be `Pmode'.\n+"}, {"sha": "ef51ab57459351dcf425d240af9716f9e3030d4d", "filename": "gcc/gcc.info-15", "status": "added", "additions": 1010, "deletions": 0, "changes": 1010, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-15", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-15", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-15?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1010 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Regs and Memory,  Next: Arithmetic,  Prev: Constants,  Up: RTL\n+\n+Registers and Memory\n+====================\n+\n+   Here are the RTL expression types for describing access to machine\n+registers and to main memory.\n+\n+`(reg:M N)'\n+     For small values of the integer N (those that are less than\n+     `FIRST_PSEUDO_REGISTER'), this stands for a reference to machine\n+     register number N: a \"hard register\".  For larger values of N, it\n+     stands for a temporary value or \"pseudo register\".  The compiler's\n+     strategy is to generate code assuming an unlimited number of such\n+     pseudo registers, and later convert them into hard registers or\n+     into memory references.\n+\n+     M is the machine mode of the reference.  It is necessary because\n+     machines can generally refer to each register in more than one\n+     mode.  For example, a register may contain a full word but there\n+     may be instructions to refer to it as a half word or as a single\n+     byte, as well as instructions to refer to it as a floating point\n+     number of various precisions.\n+\n+     Even for a register that the machine can access in only one mode,\n+     the mode must always be specified.\n+\n+     The symbol `FIRST_PSEUDO_REGISTER' is defined by the machine\n+     description, since the number of hard registers on the machine is\n+     an invariant characteristic of the machine.  Note, however, that\n+     not all of the machine registers must be general registers.  All\n+     the machine registers that can be used for storage of data are\n+     given hard register numbers, even those that can be used only in\n+     certain instructions or can hold only certain types of data.\n+\n+     A hard register may be accessed in various modes throughout one\n+     function, but each pseudo register is given a natural mode and is\n+     accessed only in that mode.  When it is necessary to describe an\n+     access to a pseudo register using a nonnatural mode, a `subreg'\n+     expression is used.\n+\n+     A `reg' expression with a machine mode that specifies more than\n+     one word of data may actually stand for several consecutive\n+     registers.  If in addition the register number specifies a\n+     hardware register, then it actually represents several consecutive\n+     hardware registers starting with the specified one.\n+\n+     Each pseudo register number used in a function's RTL code is\n+     represented by a unique `reg' expression.\n+\n+     Some pseudo register numbers, those within the range of\n+     `FIRST_VIRTUAL_REGISTER' to `LAST_VIRTUAL_REGISTER' only appear\n+     during the RTL generation phase and are eliminated before the\n+     optimization phases.  These represent locations in the stack frame\n+     that cannot be determined until RTL generation for the function\n+     has been completed.  The following virtual register numbers are\n+     defined:\n+\n+    `VIRTUAL_INCOMING_ARGS_REGNUM'\n+          This points to the first word of the incoming arguments\n+          passed on the stack.  Normally these arguments are placed\n+          there by the caller, but the callee may have pushed some\n+          arguments that were previously passed in registers.\n+\n+          When RTL generation is complete, this virtual register is\n+          replaced by the sum of the register given by\n+          `ARG_POINTER_REGNUM' and the value of `FIRST_PARM_OFFSET'.\n+\n+    `VIRTUAL_STACK_VARS_REGNUM'\n+          If `FRAME_GROWS_DOWNWARD' is defined, this points to\n+          immediately above the first variable on the stack.\n+          Otherwise, it points to the first variable on the stack.\n+\n+          `VIRTUAL_STACK_VARS_REGNUM' is replaced with the sum of the\n+          register given by `FRAME_POINTER_REGNUM' and the value\n+          `STARTING_FRAME_OFFSET'.\n+\n+    `VIRTUAL_STACK_DYNAMIC_REGNUM'\n+          This points to the location of dynamically allocated memory\n+          on the stack immediately after the stack pointer has been\n+          adjusted by the amount of memory desired.\n+\n+          This virtual register is replaced by the sum of the register\n+          given by `STACK_POINTER_REGNUM' and the value\n+          `STACK_DYNAMIC_OFFSET'.\n+\n+    `VIRTUAL_OUTGOING_ARGS_REGNUM'\n+          This points to the location in the stack at which outgoing\n+          arguments should be written when the stack is pre-pushed\n+          (arguments pushed using push insns should always use\n+          `STACK_POINTER_REGNUM').\n+\n+          This virtual register is replaced by the sum of the register\n+          given by `STACK_POINTER_REGNUM' and the value\n+          `STACK_POINTER_OFFSET'.\n+\n+`(subreg:M REG WORDNUM)'\n+     `subreg' expressions are used to refer to a register in a machine\n+     mode other than its natural one, or to refer to one register of a\n+     multi-word `reg' that actually refers to several registers.\n+\n+     Each pseudo-register has a natural mode.  If it is necessary to\n+     operate on it in a different mode--for example, to perform a\n+     fullword move instruction on a pseudo-register that contains a\n+     single byte--the pseudo-register must be enclosed in a `subreg'.\n+     In such a case, WORDNUM is zero.\n+\n+     Usually M is at least as narrow as the mode of REG, in which case\n+     it is restricting consideration to only the bits of REG that are\n+     in M.\n+\n+     Sometimes M is wider than the mode of REG.  These `subreg'\n+     expressions are often called \"paradoxical\".  They are used in\n+     cases where we want to refer to an object in a wider mode but do\n+     not care what value the additional bits have.  The reload pass\n+     ensures that paradoxical references are only made to hard\n+     registers.\n+\n+     The other use of `subreg' is to extract the individual registers of\n+     a multi-register value.  Machine modes such as `DImode' and\n+     `TImode' can indicate values longer than a word, values which\n+     usually require two or more consecutive registers.  To access one\n+     of the registers, use a `subreg' with mode `SImode' and a WORDNUM\n+     that says which register.\n+\n+     Storing in a non-paradoxical `subreg' has undefined results for\n+     bits belonging to the same word as the `subreg'.  This laxity makes\n+     it easier to generate efficient code for such instructions.  To\n+     represent an instruction that preserves all the bits outside of\n+     those in the `subreg', use `strict_low_part' around the `subreg'.\n+\n+     The compilation parameter `WORDS_BIG_ENDIAN', if set to 1, says\n+     that word number zero is the most significant part; otherwise, it\n+     is the least significant part.\n+\n+     Between the combiner pass and the reload pass, it is possible to\n+     have a paradoxical `subreg' which contains a `mem' instead of a\n+     `reg' as its first operand.  After the reload pass, it is also\n+     possible to have a non-paradoxical `subreg' which contains a\n+     `mem'; this usually occurs when the `mem' is a stack slot which\n+     replaced a pseudo register.\n+\n+     Note that it is not valid to access a `DFmode' value in `SFmode'\n+     using a `subreg'.  On some machines the most significant part of a\n+     `DFmode' value does not have the same format as a single-precision\n+     floating value.\n+\n+     It is also not valid to access a single word of a multi-word value\n+     in a hard register when less registers can hold the value than\n+     would be expected from its size.  For example, some 32-bit\n+     machines have floating-point registers that can hold an entire\n+     `DFmode' value.  If register 10 were such a register `(subreg:SI\n+     (reg:DF 10) 1)' would be invalid because there is no way to\n+     convert that reference to a single machine register.  The reload\n+     pass prevents `subreg' expressions such as these from being formed.\n+\n+     The first operand of a `subreg' expression is customarily accessed\n+     with the `SUBREG_REG' macro and the second operand is customarily\n+     accessed with the `SUBREG_WORD' macro.\n+\n+`(scratch:M)'\n+     This represents a scratch register that will be required for the\n+     execution of a single instruction and not used subsequently.  It is\n+     converted into a `reg' by either the local register allocator or\n+     the reload pass.\n+\n+     `scratch' is usually present inside a `clobber' operation (*note\n+     Side Effects::.).\n+\n+`(cc0)'\n+     This refers to the machine's condition code register.  It has no\n+     operands and may not have a machine mode.  There are two ways to\n+     use it:\n+\n+        * To stand for a complete set of condition code flags.  This is\n+          best on most machines, where each comparison sets the entire\n+          series of flags.\n+\n+          With this technique, `(cc0)' may be validly used in only two\n+          contexts: as the destination of an assignment (in test and\n+          compare instructions) and in comparison operators comparing\n+          against zero (`const_int' with value zero; that is to say,\n+          `const0_rtx').\n+\n+        * To stand for a single flag that is the result of a single\n+          condition.  This is useful on machines that have only a\n+          single flag bit, and in which comparison instructions must\n+          specify the condition to test.\n+\n+          With this technique, `(cc0)' may be validly used in only two\n+          contexts: as the destination of an assignment (in test and\n+          compare instructions) where the source is a comparison\n+          operator, and as the first operand of `if_then_else' (in a\n+          conditional branch).\n+\n+     There is only one expression object of code `cc0'; it is the value\n+     of the variable `cc0_rtx'.  Any attempt to create an expression of\n+     code `cc0' will return `cc0_rtx'.\n+\n+     Instructions can set the condition code implicitly.  On many\n+     machines, nearly all instructions set the condition code based on\n+     the value that they compute or store.  It is not necessary to\n+     record these actions explicitly in the RTL because the machine\n+     description includes a prescription for recognizing the\n+     instructions that do so (by means of the macro\n+     `NOTICE_UPDATE_CC').  *Note Condition Code::.  Only instructions\n+     whose sole purpose is to set the condition code, and instructions\n+     that use the condition code, need mention `(cc0)'.\n+\n+     On some machines, the condition code register is given a register\n+     number and a `reg' is used instead of `(cc0)'.  This is usually the\n+     preferable approach if only a small subset of instructions modify\n+     the condition code.  Other machines store condition codes in\n+     general registers; in such cases a pseudo register should be used.\n+\n+     Some machines, such as the Sparc and RS/6000, have two sets of\n+     arithmetic instructions, one that sets and one that does not set\n+     the condition code.  This is best handled by normally generating\n+     the instruction that does not set the condition code, and making a\n+     pattern that both performs the arithmetic and sets the condition\n+     code register (which would not be `(cc0)' in this case).  For\n+     examples, search for `addcc' and `andcc' in `sparc.md'.\n+\n+`(pc)'\n+     This represents the machine's program counter.  It has no operands\n+     and may not have a machine mode.  `(pc)' may be validly used only\n+     in certain specific contexts in jump instructions.\n+\n+     There is only one expression object of code `pc'; it is the value\n+     of the variable `pc_rtx'.  Any attempt to create an expression of\n+     code `pc' will return `pc_rtx'.\n+\n+     All instructions that do not jump alter the program counter\n+     implicitly by incrementing it, but there is no need to mention\n+     this in the RTL.\n+\n+`(mem:M ADDR)'\n+     This RTX represents a reference to main memory at an address\n+     represented by the expression ADDR.  M specifies how large a unit\n+     of memory is accessed.\n+\n+`(addressof:M REG)'\n+     This RTX represents a request for the address of register REG.\n+     Its mode is always `Pmode'.  If there are any `addressof'\n+     expressions left in the function after CSE, REG is forced into the\n+     stack and the `addressof' expression is replaced with a `plus'\n+     expression for the address of its stack slot.\n+\n+\u001f\n+File: gcc.info,  Node: Arithmetic,  Next: Comparisons,  Prev: Regs and Memory,  Up: RTL\n+\n+RTL Expressions for Arithmetic\n+==============================\n+\n+   Unless otherwise specified, all the operands of arithmetic\n+expressions must be valid for mode M.  An operand is valid for mode M\n+if it has mode M, or if it is a `const_int' or `const_double' and M is\n+a mode of class `MODE_INT'.\n+\n+   For commutative binary operations, constants should be placed in the\n+second operand.\n+\n+`(plus:M X Y)'\n+     Represents the sum of the values represented by X and Y carried\n+     out in machine mode M.\n+\n+`(lo_sum:M X Y)'\n+     Like `plus', except that it represents that sum of X and the\n+     low-order bits of Y.  The number of low order bits is\n+     machine-dependent but is normally the number of bits in a `Pmode'\n+     item minus the number of bits set by the `high' code (*note\n+     Constants::.).\n+\n+     M should be `Pmode'.\n+\n+`(minus:M X Y)'\n+     Like `plus' but represents subtraction.\n+\n+`(compare:M X Y)'\n+     Represents the result of subtracting Y from X for purposes of\n+     comparison.  The result is computed without overflow, as if with\n+     infinite precision.\n+\n+     Of course, machines can't really subtract with infinite precision.\n+     However, they can pretend to do so when only the sign of the\n+     result will be used, which is the case when the result is stored\n+     in the condition code.   And that is the only way this kind of\n+     expression may validly be used: as a value to be stored in the\n+     condition codes.\n+\n+     The mode M is not related to the modes of X and Y, but instead is\n+     the mode of the condition code value.  If `(cc0)' is used, it is\n+     `VOIDmode'.  Otherwise it is some mode in class `MODE_CC', often\n+     `CCmode'.  *Note Condition Code::.\n+\n+     Normally, X and Y must have the same mode.  Otherwise, `compare'\n+     is valid only if the mode of X is in class `MODE_INT' and Y is a\n+     `const_int' or `const_double' with mode `VOIDmode'.  The mode of X\n+     determines what mode the comparison is to be done in; thus it must\n+     not be `VOIDmode'.\n+\n+     If one of the operands is a constant, it should be placed in the\n+     second operand and the comparison code adjusted as appropriate.\n+\n+     A `compare' specifying two `VOIDmode' constants is not valid since\n+     there is no way to know in what mode the comparison is to be\n+     performed; the comparison must either be folded during the\n+     compilation or the first operand must be loaded into a register\n+     while its mode is still known.\n+\n+`(neg:M X)'\n+     Represents the negation (subtraction from zero) of the value\n+     represented by X, carried out in mode M.\n+\n+`(mult:M X Y)'\n+     Represents the signed product of the values represented by X and Y\n+     carried out in machine mode M.\n+\n+     Some machines support a multiplication that generates a product\n+     wider than the operands.  Write the pattern for this as\n+\n+          (mult:M (sign_extend:M X) (sign_extend:M Y))\n+\n+     where M is wider than the modes of X and Y, which need not be the\n+     same.\n+\n+     Write patterns for unsigned widening multiplication similarly using\n+     `zero_extend'.\n+\n+`(div:M X Y)'\n+     Represents the quotient in signed division of X by Y, carried out\n+     in machine mode M.  If M is a floating point mode, it represents\n+     the exact quotient; otherwise, the integerized quotient.\n+\n+     Some machines have division instructions in which the operands and\n+     quotient widths are not all the same; you should represent such\n+     instructions using `truncate' and `sign_extend' as in,\n+\n+          (truncate:M1 (div:M2 X (sign_extend:M2 Y)))\n+\n+`(udiv:M X Y)'\n+     Like `div' but represents unsigned division.\n+\n+`(mod:M X Y)'\n+`(umod:M X Y)'\n+     Like `div' and `udiv' but represent the remainder instead of the\n+     quotient.\n+\n+`(smin:M X Y)'\n+`(smax:M X Y)'\n+     Represents the smaller (for `smin') or larger (for `smax') of X\n+     and Y, interpreted as signed integers in mode M.\n+\n+`(umin:M X Y)'\n+`(umax:M X Y)'\n+     Like `smin' and `smax', but the values are interpreted as unsigned\n+     integers.\n+\n+`(not:M X)'\n+     Represents the bitwise complement of the value represented by X,\n+     carried out in mode M, which must be a fixed-point machine mode.\n+\n+`(and:M X Y)'\n+     Represents the bitwise logical-and of the values represented by X\n+     and Y, carried out in machine mode M, which must be a fixed-point\n+     machine mode.\n+\n+`(ior:M X Y)'\n+     Represents the bitwise inclusive-or of the values represented by X\n+     and Y, carried out in machine mode M, which must be a fixed-point\n+     mode.\n+\n+`(xor:M X Y)'\n+     Represents the bitwise exclusive-or of the values represented by X\n+     and Y, carried out in machine mode M, which must be a fixed-point\n+     mode.\n+\n+`(ashift:M X C)'\n+     Represents the result of arithmetically shifting X left by C\n+     places.  X have mode M, a fixed-point machine mode.  C be a\n+     fixed-point mode or be a constant with mode `VOIDmode'; which mode\n+     is determined by the mode called for in the machine description\n+     entry for the left-shift instruction.  For example, on the Vax,\n+     the mode of C is `QImode' regardless of M.\n+\n+`(lshiftrt:M X C)'\n+`(ashiftrt:M X C)'\n+     Like `ashift' but for right shift.  Unlike the case for left shift,\n+     these two operations are distinct.\n+\n+`(rotate:M X C)'\n+`(rotatert:M X C)'\n+     Similar but represent left and right rotate.  If C is a constant,\n+     use `rotate'.\n+\n+`(abs:M X)'\n+     Represents the absolute value of X, computed in mode M.\n+\n+`(sqrt:M X)'\n+     Represents the square root of X, computed in mode M.  Most often M\n+     will be a floating point mode.\n+\n+`(ffs:M X)'\n+     Represents one plus the index of the least significant 1-bit in X,\n+     represented as an integer of mode M.  (The value is zero if X is\n+     zero.)  The mode of X need not be M; depending on the target\n+     machine, various mode combinations may be valid.\n+\n+\u001f\n+File: gcc.info,  Node: Comparisons,  Next: Bit Fields,  Prev: Arithmetic,  Up: RTL\n+\n+Comparison Operations\n+=====================\n+\n+   Comparison operators test a relation on two operands and are\n+considered to represent a machine-dependent nonzero value described by,\n+but not necessarily equal to, `STORE_FLAG_VALUE' (*note Misc::.)  if\n+the relation holds, or zero if it does not.  The mode of the comparison\n+operation is independent of the mode of the data being compared.  If\n+the comparison operation is being tested (e.g., the first operand of an\n+`if_then_else'), the mode must be `VOIDmode'.  If the comparison\n+operation is producing data to be stored in some variable, the mode\n+must be in class `MODE_INT'.  All comparison operations producing data\n+must use the same mode, which is machine-specific.\n+\n+   There are two ways that comparison operations may be used.  The\n+comparison operators may be used to compare the condition codes `(cc0)'\n+against zero, as in `(eq (cc0) (const_int 0))'.  Such a construct\n+actually refers to the result of the preceding instruction in which the\n+condition codes were set.  The instructing setting the condition code\n+must be adjacent to the instruction using the condition code; only\n+`note' insns may separate them.\n+\n+   Alternatively, a comparison operation may directly compare two data\n+objects.  The mode of the comparison is determined by the operands; they\n+must both be valid for a common machine mode.  A comparison with both\n+operands constant would be invalid as the machine mode could not be\n+deduced from it, but such a comparison should never exist in RTL due to\n+constant folding.\n+\n+   In the example above, if `(cc0)' were last set to `(compare X Y)',\n+the comparison operation is identical to `(eq X Y)'.  Usually only one\n+style of comparisons is supported on a particular machine, but the\n+combine pass will try to merge the operations to produce the `eq' shown\n+in case it exists in the context of the particular insn involved.\n+\n+   Inequality comparisons come in two flavors, signed and unsigned.\n+Thus, there are distinct expression codes `gt' and `gtu' for signed and\n+unsigned greater-than.  These can produce different results for the same\n+pair of integer values: for example, 1 is signed greater-than -1 but not\n+unsigned greater-than, because -1 when regarded as unsigned is actually\n+`0xffffffff' which is greater than 1.\n+\n+   The signed comparisons are also used for floating point values.\n+Floating point comparisons are distinguished by the machine modes of\n+the operands.\n+\n+`(eq:M X Y)'\n+     1 if the values represented by X and Y are equal, otherwise 0.\n+\n+`(ne:M X Y)'\n+     1 if the values represented by X and Y are not equal, otherwise 0.\n+\n+`(gt:M X Y)'\n+     1 if the X is greater than Y.  If they are fixed-point, the\n+     comparison is done in a signed sense.\n+\n+`(gtu:M X Y)'\n+     Like `gt' but does unsigned comparison, on fixed-point numbers\n+     only.\n+\n+`(lt:M X Y)'\n+`(ltu:M X Y)'\n+     Like `gt' and `gtu' but test for \"less than\".\n+\n+`(ge:M X Y)'\n+`(geu:M X Y)'\n+     Like `gt' and `gtu' but test for \"greater than or equal\".\n+\n+`(le:M X Y)'\n+`(leu:M X Y)'\n+     Like `gt' and `gtu' but test for \"less than or equal\".\n+\n+`(if_then_else COND THEN ELSE)'\n+     This is not a comparison operation but is listed here because it is\n+     always used in conjunction with a comparison operation.  To be\n+     precise, COND is a comparison expression.  This expression\n+     represents a choice, according to COND, between the value\n+     represented by THEN and the one represented by ELSE.\n+\n+     On most machines, `if_then_else' expressions are valid only to\n+     express conditional jumps.\n+\n+`(cond [TEST1 VALUE1 TEST2 VALUE2 ...] DEFAULT)'\n+     Similar to `if_then_else', but more general.  Each of TEST1,\n+     TEST2, ... is performed in turn.  The result of this expression is\n+     the VALUE corresponding to the first non-zero test, or DEFAULT if\n+     none of the tests are non-zero expressions.\n+\n+     This is currently not valid for instruction patterns and is\n+     supported only for insn attributes.  *Note Insn Attributes::.\n+\n+\u001f\n+File: gcc.info,  Node: Bit Fields,  Next: Conversions,  Prev: Comparisons,  Up: RTL\n+\n+Bit Fields\n+==========\n+\n+   Special expression codes exist to represent bitfield instructions.\n+These types of expressions are lvalues in RTL; they may appear on the\n+left side of an assignment, indicating insertion of a value into the\n+specified bit field.\n+\n+`(sign_extract:M LOC SIZE POS)'\n+     This represents a reference to a sign-extended bit field contained\n+     or starting in LOC (a memory or register reference).  The bit field\n+     is SIZE bits wide and starts at bit POS.  The compilation option\n+     `BITS_BIG_ENDIAN' says which end of the memory unit POS counts\n+     from.\n+\n+     If LOC is in memory, its mode must be a single-byte integer mode.\n+     If LOC is in a register, the mode to use is specified by the\n+     operand of the `insv' or `extv' pattern (*note Standard Names::.)\n+     and is usually a full-word integer mode, which is the default if\n+     none is specified.\n+\n+     The mode of POS is machine-specific and is also specified in the\n+     `insv' or `extv' pattern.\n+\n+     The mode M is the same as the mode that would be used for LOC if\n+     it were a register.\n+\n+`(zero_extract:M LOC SIZE POS)'\n+     Like `sign_extract' but refers to an unsigned or zero-extended bit\n+     field.  The same sequence of bits are extracted, but they are\n+     filled to an entire word with zeros instead of by sign-extension.\n+\n+\u001f\n+File: gcc.info,  Node: Conversions,  Next: RTL Declarations,  Prev: Bit Fields,  Up: RTL\n+\n+Conversions\n+===========\n+\n+   All conversions between machine modes must be represented by\n+explicit conversion operations.  For example, an expression which is\n+the sum of a byte and a full word cannot be written as `(plus:SI\n+(reg:QI 34) (reg:SI 80))' because the `plus' operation requires two\n+operands of the same machine mode.  Therefore, the byte-sized operand\n+is enclosed in a conversion operation, as in\n+\n+     (plus:SI (sign_extend:SI (reg:QI 34)) (reg:SI 80))\n+\n+   The conversion operation is not a mere placeholder, because there\n+may be more than one way of converting from a given starting mode to\n+the desired final mode.  The conversion operation code says how to do\n+it.\n+\n+   For all conversion operations, X must not be `VOIDmode' because the\n+mode in which to do the conversion would not be known.  The conversion\n+must either be done at compile-time or X must be placed into a register.\n+\n+`(sign_extend:M X)'\n+     Represents the result of sign-extending the value X to machine\n+     mode M.  M must be a fixed-point mode and X a fixed-point value of\n+     a mode narrower than M.\n+\n+`(zero_extend:M X)'\n+     Represents the result of zero-extending the value X to machine\n+     mode M.  M must be a fixed-point mode and X a fixed-point value of\n+     a mode narrower than M.\n+\n+`(float_extend:M X)'\n+     Represents the result of extending the value X to machine mode M.\n+     M must be a floating point mode and X a floating point value of a\n+     mode narrower than M.\n+\n+`(truncate:M X)'\n+     Represents the result of truncating the value X to machine mode M.\n+     M must be a fixed-point mode and X a fixed-point value of a mode\n+     wider than M.\n+\n+`(float_truncate:M X)'\n+     Represents the result of truncating the value X to machine mode M.\n+     M must be a floating point mode and X a floating point value of a\n+     mode wider than M.\n+\n+`(float:M X)'\n+     Represents the result of converting fixed point value X, regarded\n+     as signed, to floating point mode M.\n+\n+`(unsigned_float:M X)'\n+     Represents the result of converting fixed point value X, regarded\n+     as unsigned, to floating point mode M.\n+\n+`(fix:M X)'\n+     When M is a fixed point mode, represents the result of converting\n+     floating point value X to mode M, regarded as signed.  How\n+     rounding is done is not specified, so this operation may be used\n+     validly in compiling C code only for integer-valued operands.\n+\n+`(unsigned_fix:M X)'\n+     Represents the result of converting floating point value X to\n+     fixed point mode M, regarded as unsigned.  How rounding is done is\n+     not specified.\n+\n+`(fix:M X)'\n+     When M is a floating point mode, represents the result of\n+     converting floating point value X (valid for mode M) to an\n+     integer, still represented in floating point mode M, by rounding\n+     towards zero.\n+\n+\u001f\n+File: gcc.info,  Node: RTL Declarations,  Next: Side Effects,  Prev: Conversions,  Up: RTL\n+\n+Declarations\n+============\n+\n+   Declaration expression codes do not represent arithmetic operations\n+but rather state assertions about their operands.\n+\n+`(strict_low_part (subreg:M (reg:N R) 0))'\n+     This expression code is used in only one context: as the\n+     destination operand of a `set' expression.  In addition, the\n+     operand of this expression must be a non-paradoxical `subreg'\n+     expression.\n+\n+     The presence of `strict_low_part' says that the part of the\n+     register which is meaningful in mode N, but is not part of mode M,\n+     is not to be altered.  Normally, an assignment to such a subreg is\n+     allowed to have undefined effects on the rest of the register when\n+     M is less than a word.\n+\n+\u001f\n+File: gcc.info,  Node: Side Effects,  Next: Incdec,  Prev: RTL Declarations,  Up: RTL\n+\n+Side Effect Expressions\n+=======================\n+\n+   The expression codes described so far represent values, not actions.\n+But machine instructions never produce values; they are meaningful only\n+for their side effects on the state of the machine.  Special expression\n+codes are used to represent side effects.\n+\n+   The body of an instruction is always one of these side effect codes;\n+the codes described above, which represent values, appear only as the\n+operands of these.\n+\n+`(set LVAL X)'\n+     Represents the action of storing the value of X into the place\n+     represented by LVAL.  LVAL must be an expression representing a\n+     place that can be stored in: `reg' (or `subreg' or\n+     `strict_low_part'), `mem', `pc' or `cc0'.\n+\n+     If LVAL is a `reg', `subreg' or `mem', it has a machine mode; then\n+     X must be valid for that mode.\n+\n+     If LVAL is a `reg' whose machine mode is less than the full width\n+     of the register, then it means that the part of the register\n+     specified by the machine mode is given the specified value and the\n+     rest of the register receives an undefined value.  Likewise, if\n+     LVAL is a `subreg' whose machine mode is narrower than the mode of\n+     the register, the rest of the register can be changed in an\n+     undefined way.\n+\n+     If LVAL is a `strict_low_part' of a `subreg', then the part of the\n+     register specified by the machine mode of the `subreg' is given\n+     the value X and the rest of the register is not changed.\n+\n+     If LVAL is `(cc0)', it has no machine mode, and X may be either a\n+     `compare' expression or a value that may have any mode.  The\n+     latter case represents a \"test\" instruction.  The expression `(set\n+     (cc0) (reg:M N))' is equivalent to `(set (cc0) (compare (reg:M N)\n+     (const_int 0)))'.  Use the former expression to save space during\n+     the compilation.\n+\n+     If LVAL is `(pc)', we have a jump instruction, and the\n+     possibilities for X are very limited.  It may be a `label_ref'\n+     expression (unconditional jump).  It may be an `if_then_else'\n+     (conditional jump), in which case either the second or the third\n+     operand must be `(pc)' (for the case which does not jump) and the\n+     other of the two must be a `label_ref' (for the case which does\n+     jump).  X may also be a `mem' or `(plus:SI (pc) Y)', where Y may\n+     be a `reg' or a `mem'; these unusual patterns are used to\n+     represent jumps through branch tables.\n+\n+     If LVAL is neither `(cc0)' nor `(pc)', the mode of LVAL must not\n+     be `VOIDmode' and the mode of X must be valid for the mode of LVAL.\n+\n+     LVAL is customarily accessed with the `SET_DEST' macro and X with\n+     the `SET_SRC' macro.\n+\n+`(return)'\n+     As the sole expression in a pattern, represents a return from the\n+     current function, on machines where this can be done with one\n+     instruction, such as Vaxes.  On machines where a multi-instruction\n+     \"epilogue\" must be executed in order to return from the function,\n+     returning is done by jumping to a label which precedes the\n+     epilogue, and the `return' expression code is never used.\n+\n+     Inside an `if_then_else' expression, represents the value to be\n+     placed in `pc' to return to the caller.\n+\n+     Note that an insn pattern of `(return)' is logically equivalent to\n+     `(set (pc) (return))', but the latter form is never used.\n+\n+`(call FUNCTION NARGS)'\n+     Represents a function call.  FUNCTION is a `mem' expression whose\n+     address is the address of the function to be called.  NARGS is an\n+     expression which can be used for two purposes: on some machines it\n+     represents the number of bytes of stack argument; on others, it\n+     represents the number of argument registers.\n+\n+     Each machine has a standard machine mode which FUNCTION must have.\n+     The machine description defines macro `FUNCTION_MODE' to expand\n+     into the requisite mode name.  The purpose of this mode is to\n+     specify what kind of addressing is allowed, on machines where the\n+     allowed kinds of addressing depend on the machine mode being\n+     addressed.\n+\n+`(clobber X)'\n+     Represents the storing or possible storing of an unpredictable,\n+     undescribed value into X, which must be a `reg', `scratch' or\n+     `mem' expression.\n+\n+     One place this is used is in string instructions that store\n+     standard values into particular hard registers.  It may not be\n+     worth the trouble to describe the values that are stored, but it\n+     is essential to inform the compiler that the registers will be\n+     altered, lest it attempt to keep data in them across the string\n+     instruction.\n+\n+     If X is `(mem:BLK (const_int 0))', it means that all memory\n+     locations must be presumed clobbered.\n+\n+     Note that the machine description classifies certain hard\n+     registers as \"call-clobbered\".  All function call instructions are\n+     assumed by default to clobber these registers, so there is no need\n+     to use `clobber' expressions to indicate this fact.  Also, each\n+     function call is assumed to have the potential to alter any memory\n+     location, unless the function is declared `const'.\n+\n+     If the last group of expressions in a `parallel' are each a\n+     `clobber' expression whose arguments are `reg' or `match_scratch'\n+     (*note RTL Template::.) expressions, the combiner phase can add\n+     the appropriate `clobber' expressions to an insn it has\n+     constructed when doing so will cause a pattern to be matched.\n+\n+     This feature can be used, for example, on a machine that whose\n+     multiply and add instructions don't use an MQ register but which\n+     has an add-accumulate instruction that does clobber the MQ\n+     register.  Similarly, a combined instruction might require a\n+     temporary register while the constituent instructions might not.\n+\n+     When a `clobber' expression for a register appears inside a\n+     `parallel' with other side effects, the register allocator\n+     guarantees that the register is unoccupied both before and after\n+     that insn.  However, the reload phase may allocate a register used\n+     for one of the inputs unless the `&' constraint is specified for\n+     the selected alternative (*note Modifiers::.).  You can clobber\n+     either a specific hard register, a pseudo register, or a `scratch'\n+     expression; in the latter two cases, GNU CC will allocate a hard\n+     register that is available there for use as a temporary.\n+\n+     For instructions that require a temporary register, you should use\n+     `scratch' instead of a pseudo-register because this will allow the\n+     combiner phase to add the `clobber' when required.  You do this by\n+     coding (`clobber' (`match_scratch' ...)).  If you do clobber a\n+     pseudo register, use one which appears nowhere else--generate a\n+     new one each time.  Otherwise, you may confuse CSE.\n+\n+     There is one other known use for clobbering a pseudo register in a\n+     `parallel': when one of the input operands of the insn is also\n+     clobbered by the insn.  In this case, using the same pseudo\n+     register in the clobber and elsewhere in the insn produces the\n+     expected results.\n+\n+`(use X)'\n+     Represents the use of the value of X.  It indicates that the value\n+     in X at this point in the program is needed, even though it may\n+     not be apparent why this is so.  Therefore, the compiler will not\n+     attempt to delete previous instructions whose only effect is to\n+     store a value in X.  X must be a `reg' expression.\n+\n+     During the delayed branch scheduling phase, X may be an insn.\n+     This indicates that X previously was located at this place in the\n+     code and its data dependencies need to be taken into account.\n+     These `use' insns will be deleted before the delayed branch\n+     scheduling phase exits.\n+\n+`(parallel [X0 X1 ...])'\n+     Represents several side effects performed in parallel.  The square\n+     brackets stand for a vector; the operand of `parallel' is a vector\n+     of expressions.  X0, X1 and so on are individual side effect\n+     expressions--expressions of code `set', `call', `return',\n+     `clobber' or `use'.\n+\n+     \"In parallel\" means that first all the values used in the\n+     individual side-effects are computed, and second all the actual\n+     side-effects are performed.  For example,\n+\n+          (parallel [(set (reg:SI 1) (mem:SI (reg:SI 1)))\n+                     (set (mem:SI (reg:SI 1)) (reg:SI 1))])\n+\n+     says unambiguously that the values of hard register 1 and the\n+     memory location addressed by it are interchanged.  In both places\n+     where `(reg:SI 1)' appears as a memory address it refers to the\n+     value in register 1 *before* the execution of the insn.\n+\n+     It follows that it is *incorrect* to use `parallel' and expect the\n+     result of one `set' to be available for the next one.  For\n+     example, people sometimes attempt to represent a jump-if-zero\n+     instruction this way:\n+\n+          (parallel [(set (cc0) (reg:SI 34))\n+                     (set (pc) (if_then_else\n+                                  (eq (cc0) (const_int 0))\n+                                  (label_ref ...)\n+                                  (pc)))])\n+\n+     But this is incorrect, because it says that the jump condition\n+     depends on the condition code value *before* this instruction, not\n+     on the new value that is set by this instruction.\n+\n+     Peephole optimization, which takes place together with final\n+     assembly code output, can produce insns whose patterns consist of\n+     a `parallel' whose elements are the operands needed to output the\n+     resulting assembler code--often `reg', `mem' or constant\n+     expressions.  This would not be well-formed RTL at any other stage\n+     in compilation, but it is ok then because no further optimization\n+     remains to be done.  However, the definition of the macro\n+     `NOTICE_UPDATE_CC', if any, must deal with such insns if you\n+     define any peephole optimizations.\n+\n+`(sequence [INSNS ...])'\n+     Represents a sequence of insns.  Each of the INSNS that appears in\n+     the vector is suitable for appearing in the chain of insns, so it\n+     must be an `insn', `jump_insn', `call_insn', `code_label',\n+     `barrier' or `note'.\n+\n+     A `sequence' RTX is never placed in an actual insn during RTL\n+     generation.  It represents the sequence of insns that result from a\n+     `define_expand' *before* those insns are passed to `emit_insn' to\n+     insert them in the chain of insns.  When actually inserted, the\n+     individual sub-insns are separated out and the `sequence' is\n+     forgotten.\n+\n+     After delay-slot scheduling is completed, an insn and all the\n+     insns that reside in its delay slots are grouped together into a\n+     `sequence'.  The insn requiring the delay slot is the first insn\n+     in the vector; subsequent insns are to be placed in the delay slot.\n+\n+     `INSN_ANNULLED_BRANCH_P' is set on an insn in a delay slot to\n+     indicate that a branch insn should be used that will conditionally\n+     annul the effect of the insns in the delay slots.  In such a case,\n+     `INSN_FROM_TARGET_P' indicates that the insn is from the target of\n+     the branch and should be executed only if the branch is taken;\n+     otherwise the insn should be executed only if the branch is not\n+     taken.  *Note Delay Slots::.\n+\n+   These expression codes appear in place of a side effect, as the body\n+of an insn, though strictly speaking they do not always describe side\n+effects as such:\n+\n+`(asm_input S)'\n+     Represents literal assembler code as described by the string S.\n+\n+`(unspec [OPERANDS ...] INDEX)'\n+`(unspec_volatile [OPERANDS ...] INDEX)'\n+     Represents a machine-specific operation on OPERANDS.  INDEX\n+     selects between multiple machine-specific operations.\n+     `unspec_volatile' is used for volatile operations and operations\n+     that may trap; `unspec' is used for other operations.\n+\n+     These codes may appear inside a `pattern' of an insn, inside a\n+     `parallel', or inside an expression.\n+\n+`(addr_vec:M [LR0 LR1 ...])'\n+     Represents a table of jump addresses.  The vector elements LR0,\n+     etc., are `label_ref' expressions.  The mode M specifies how much\n+     space is given to each address; normally M would be `Pmode'.\n+\n+`(addr_diff_vec:M BASE [LR0 LR1 ...])'\n+     Represents a table of jump addresses expressed as offsets from\n+     BASE.  The vector elements LR0, etc., are `label_ref' expressions\n+     and so is BASE.  The mode M specifies how much space is given to\n+     each address-difference.\n+\n+\u001f\n+File: gcc.info,  Node: Incdec,  Next: Assembler,  Prev: Side Effects,  Up: RTL\n+\n+Embedded Side-Effects on Addresses\n+==================================\n+\n+   Four special side-effect expression codes appear as memory addresses.\n+\n+`(pre_dec:M X)'\n+     Represents the side effect of decrementing X by a standard amount\n+     and represents also the value that X has after being decremented.\n+     X must be a `reg' or `mem', but most machines allow only a `reg'.\n+     M must be the machine mode for pointers on the machine in use.\n+     The amount X is decremented by is the length in bytes of the\n+     machine mode of the containing memory reference of which this\n+     expression serves as the address.  Here is an example of its use:\n+\n+          (mem:DF (pre_dec:SI (reg:SI 39)))\n+\n+     This says to decrement pseudo register 39 by the length of a\n+     `DFmode' value and use the result to address a `DFmode' value.\n+\n+`(pre_inc:M X)'\n+     Similar, but specifies incrementing X instead of decrementing it.\n+\n+`(post_dec:M X)'\n+     Represents the same side effect as `pre_dec' but a different\n+     value.  The value represented here is the value X has before being\n+     decremented.\n+\n+`(post_inc:M X)'\n+     Similar, but specifies incrementing X instead of decrementing it.\n+\n+   These embedded side effect expressions must be used with care.\n+Instruction patterns may not use them.  Until the `flow' pass of the\n+compiler, they may occur only to represent pushes onto the stack.  The\n+`flow' pass finds cases where registers are incremented or decremented\n+in one instruction and used as an address shortly before or after;\n+these cases are then transformed to use pre- or post-increment or\n+-decrement.\n+\n+   If a register used as the operand of these expressions is used in\n+another address in an insn, the original value of the register is used.\n+Uses of the register outside of an address are not permitted within the\n+same insn as a use in an embedded side effect expression because such\n+insns behave differently on different machines and hence must be treated\n+as ambiguous and disallowed.\n+\n+   An instruction that can be represented with an embedded side effect\n+could also be represented using `parallel' containing an additional\n+`set' to describe how the address register is altered.  This is not\n+done because machines that allow these operations at all typically\n+allow them wherever a memory address is called for.  Describing them as\n+additional parallel stores would require doubling the number of entries\n+in the machine description.\n+\n+\u001f\n+File: gcc.info,  Node: Assembler,  Next: Insns,  Prev: Incdec,  Up: RTL\n+\n+Assembler Instructions as Expressions\n+=====================================\n+\n+   The RTX code `asm_operands' represents a value produced by a\n+user-specified assembler instruction.  It is used to represent an `asm'\n+statement with arguments.  An `asm' statement with a single output\n+operand, like this:\n+\n+     asm (\"foo %1,%2,%0\" : \"=a\" (outputvar) : \"g\" (x + y), \"di\" (*z));\n+\n+is represented using a single `asm_operands' RTX which represents the\n+value that is stored in `outputvar':\n+\n+     (set RTX-FOR-OUTPUTVAR\n+          (asm_operands \"foo %1,%2,%0\" \"a\" 0\n+                        [RTX-FOR-ADDITION-RESULT RTX-FOR-*Z]\n+                        [(asm_input:M1 \"g\")\n+                         (asm_input:M2 \"di\")]))\n+\n+Here the operands of the `asm_operands' RTX are the assembler template\n+string, the output-operand's constraint, the index-number of the output\n+operand among the output operands specified, a vector of input operand\n+RTX's, and a vector of input-operand modes and constraints.  The mode\n+M1 is the mode of the sum `x+y'; M2 is that of `*z'.\n+\n+   When an `asm' statement has multiple output values, its insn has\n+several such `set' RTX's inside of a `parallel'.  Each `set' contains a\n+`asm_operands'; all of these share the same assembler template and\n+vectors, but each contains the constraint for the respective output\n+operand.  They are also distinguished by the output-operand index\n+number, which is 0, 1, ... for successive output operands.\n+"}, {"sha": "ab7aa3c8d039ef6c2f1f651458990ba89332f003", "filename": "gcc/gcc.info-16", "status": "added", "additions": 1053, "deletions": 0, "changes": 1053, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-16?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1053 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Insns,  Next: Calls,  Prev: Assembler,  Up: RTL\n+\n+Insns\n+=====\n+\n+   The RTL representation of the code for a function is a doubly-linked\n+chain of objects called \"insns\".  Insns are expressions with special\n+codes that are used for no other purpose.  Some insns are actual\n+instructions; others represent dispatch tables for `switch' statements;\n+others represent labels to jump to or various sorts of declarative\n+information.\n+\n+   In addition to its own specific data, each insn must have a unique\n+id-number that distinguishes it from all other insns in the current\n+function (after delayed branch scheduling, copies of an insn with the\n+same id-number may be present in multiple places in a function, but\n+these copies will always be identical and will only appear inside a\n+`sequence'), and chain pointers to the preceding and following insns.\n+These three fields occupy the same position in every insn, independent\n+of the expression code of the insn.  They could be accessed with `XEXP'\n+and `XINT', but instead three special macros are always used:\n+\n+`INSN_UID (I)'\n+     Accesses the unique id of insn I.\n+\n+`PREV_INSN (I)'\n+     Accesses the chain pointer to the insn preceding I.  If I is the\n+     first insn, this is a null pointer.\n+\n+`NEXT_INSN (I)'\n+     Accesses the chain pointer to the insn following I.  If I is the\n+     last insn, this is a null pointer.\n+\n+   The first insn in the chain is obtained by calling `get_insns'; the\n+last insn is the result of calling `get_last_insn'.  Within the chain\n+delimited by these insns, the `NEXT_INSN' and `PREV_INSN' pointers must\n+always correspond: if INSN is not the first insn,\n+\n+     NEXT_INSN (PREV_INSN (INSN)) == INSN\n+\n+is always true and if INSN is not the last insn,\n+\n+     PREV_INSN (NEXT_INSN (INSN)) == INSN\n+\n+is always true.\n+\n+   After delay slot scheduling, some of the insns in the chain might be\n+`sequence' expressions, which contain a vector of insns.  The value of\n+`NEXT_INSN' in all but the last of these insns is the next insn in the\n+vector; the value of `NEXT_INSN' of the last insn in the vector is the\n+same as the value of `NEXT_INSN' for the `sequence' in which it is\n+contained.  Similar rules apply for `PREV_INSN'.\n+\n+   This means that the above invariants are not necessarily true for\n+insns inside `sequence' expressions.  Specifically, if INSN is the\n+first insn in a `sequence', `NEXT_INSN (PREV_INSN (INSN))' is the insn\n+containing the `sequence' expression, as is the value of `PREV_INSN\n+(NEXT_INSN (INSN))' is INSN is the last insn in the `sequence'\n+expression.  You can use these expressions to find the containing\n+`sequence' expression.\n+\n+   Every insn has one of the following six expression codes:\n+\n+`insn'\n+     The expression code `insn' is used for instructions that do not\n+     jump and do not do function calls.  `sequence' expressions are\n+     always contained in insns with code `insn' even if one of those\n+     insns should jump or do function calls.\n+\n+     Insns with code `insn' have four additional fields beyond the three\n+     mandatory ones listed above.  These four are described in a table\n+     below.\n+\n+`jump_insn'\n+     The expression code `jump_insn' is used for instructions that may\n+     jump (or, more generally, may contain `label_ref' expressions).  If\n+     there is an instruction to return from the current function, it is\n+     recorded as a `jump_insn'.\n+\n+     `jump_insn' insns have the same extra fields as `insn' insns,\n+     accessed in the same way and in addition contain a field\n+     `JUMP_LABEL' which is defined once jump optimization has completed.\n+\n+     For simple conditional and unconditional jumps, this field\n+     contains the `code_label' to which this insn will (possibly\n+     conditionally) branch.  In a more complex jump, `JUMP_LABEL'\n+     records one of the labels that the insn refers to; the only way to\n+     find the others is to scan the entire body of the insn.\n+\n+     Return insns count as jumps, but since they do not refer to any\n+     labels, they have zero in the `JUMP_LABEL' field.\n+\n+`call_insn'\n+     The expression code `call_insn' is used for instructions that may\n+     do function calls.  It is important to distinguish these\n+     instructions because they imply that certain registers and memory\n+     locations may be altered unpredictably.\n+\n+     `call_insn' insns have the same extra fields as `insn' insns,\n+     accessed in the same way and in addition contain a field\n+     `CALL_INSN_FUNCTION_USAGE', which contains a list (chain of\n+     `expr_list' expressions) containing `use' and `clobber'\n+     expressions that denote hard registers used or clobbered by the\n+     called function.  A register specified in a `clobber' in this list\n+     is modified *after* the execution of the `call_insn', while a\n+     register in a `clobber' in the body of the `call_insn' is\n+     clobbered before the insn completes execution.  `clobber'\n+     expressions in this list augment registers specified in\n+     `CALL_USED_REGISTERS' (*note Register Basics::.).\n+\n+`code_label'\n+     A `code_label' insn represents a label that a jump insn can jump\n+     to.  It contains two special fields of data in addition to the\n+     three standard ones.  `CODE_LABEL_NUMBER' is used to hold the\n+     \"label number\", a number that identifies this label uniquely among\n+     all the labels in the compilation (not just in the current\n+     function).  Ultimately, the label is represented in the assembler\n+     output as an assembler label, usually of the form `LN' where N is\n+     the label number.\n+\n+     When a `code_label' appears in an RTL expression, it normally\n+     appears within a `label_ref' which represents the address of the\n+     label, as a number.\n+\n+     The field `LABEL_NUSES' is only defined once the jump optimization\n+     phase is completed and contains the number of times this label is\n+     referenced in the current function.\n+\n+`barrier'\n+     Barriers are placed in the instruction stream when control cannot\n+     flow past them.  They are placed after unconditional jump\n+     instructions to indicate that the jumps are unconditional and\n+     after calls to `volatile' functions, which do not return (e.g.,\n+     `exit').  They contain no information beyond the three standard\n+     fields.\n+\n+`note'\n+     `note' insns are used to represent additional debugging and\n+     declarative information.  They contain two nonstandard fields, an\n+     integer which is accessed with the macro `NOTE_LINE_NUMBER' and a\n+     string accessed with `NOTE_SOURCE_FILE'.\n+\n+     If `NOTE_LINE_NUMBER' is positive, the note represents the\n+     position of a source line and `NOTE_SOURCE_FILE' is the source\n+     file name that the line came from.  These notes control generation\n+     of line number data in the assembler output.\n+\n+     Otherwise, `NOTE_LINE_NUMBER' is not really a line number but a\n+     code with one of the following values (and `NOTE_SOURCE_FILE' must\n+     contain a null pointer):\n+\n+    `NOTE_INSN_DELETED'\n+          Such a note is completely ignorable.  Some passes of the\n+          compiler delete insns by altering them into notes of this\n+          kind.\n+\n+    `NOTE_INSN_BLOCK_BEG'\n+    `NOTE_INSN_BLOCK_END'\n+          These types of notes indicate the position of the beginning\n+          and end of a level of scoping of variable names.  They\n+          control the output of debugging information.\n+\n+    `NOTE_INSN_EH_REGION_BEG'\n+    `NOTE_INSN_EH_REGION_END'\n+          These types of notes indicate the position of the beginning\n+          and end of a level of scoping for exception handling.\n+          `NOTE_BLOCK_NUMBER' identifies which `CODE_LABEL' is\n+          associated with the given region.\n+\n+    `NOTE_INSN_LOOP_BEG'\n+    `NOTE_INSN_LOOP_END'\n+          These types of notes indicate the position of the beginning\n+          and end of a `while' or `for' loop.  They enable the loop\n+          optimizer to find loops quickly.\n+\n+    `NOTE_INSN_LOOP_CONT'\n+          Appears at the place in a loop that `continue' statements\n+          jump to.\n+\n+    `NOTE_INSN_LOOP_VTOP'\n+          This note indicates the place in a loop where the exit test\n+          begins for those loops in which the exit test has been\n+          duplicated.  This position becomes another virtual start of\n+          the loop when considering loop invariants.\n+\n+    `NOTE_INSN_FUNCTION_END'\n+          Appears near the end of the function body, just before the\n+          label that `return' statements jump to (on machine where a\n+          single instruction does not suffice for returning).  This\n+          note may be deleted by jump optimization.\n+\n+    `NOTE_INSN_SETJMP'\n+          Appears following each call to `setjmp' or a related function.\n+\n+     These codes are printed symbolically when they appear in debugging\n+     dumps.\n+\n+   The machine mode of an insn is normally `VOIDmode', but some phases\n+use the mode for various purposes; for example, the reload pass sets it\n+to `HImode' if the insn needs reloading but not register elimination\n+and `QImode' if both are required.  The common subexpression\n+elimination pass sets the mode of an insn to `QImode' when it is the\n+first insn in a block that has already been processed.\n+\n+   Here is a table of the extra fields of `insn', `jump_insn' and\n+`call_insn' insns:\n+\n+`PATTERN (I)'\n+     An expression for the side effect performed by this insn.  This\n+     must be one of the following codes: `set', `call', `use',\n+     `clobber', `return', `asm_input', `asm_output', `addr_vec',\n+     `addr_diff_vec', `trap_if', `unspec', `unspec_volatile',\n+     `parallel', or `sequence'.  If it is a `parallel', each element of\n+     the `parallel' must be one these codes, except that `parallel'\n+     expressions cannot be nested and `addr_vec' and `addr_diff_vec'\n+     are not permitted inside a `parallel' expression.\n+\n+`INSN_CODE (I)'\n+     An integer that says which pattern in the machine description\n+     matches this insn, or -1 if the matching has not yet been\n+     attempted.\n+\n+     Such matching is never attempted and this field remains -1 on an\n+     insn whose pattern consists of a single `use', `clobber',\n+     `asm_input', `addr_vec' or `addr_diff_vec' expression.\n+\n+     Matching is also never attempted on insns that result from an `asm'\n+     statement.  These contain at least one `asm_operands' expression.\n+     The function `asm_noperands' returns a non-negative value for such\n+     insns.\n+\n+     In the debugging output, this field is printed as a number\n+     followed by a symbolic representation that locates the pattern in\n+     the `md' file as some small positive or negative offset from a\n+     named pattern.\n+\n+`LOG_LINKS (I)'\n+     A list (chain of `insn_list' expressions) giving information about\n+     dependencies between instructions within a basic block.  Neither a\n+     jump nor a label may come between the related insns.\n+\n+`REG_NOTES (I)'\n+     A list (chain of `expr_list' and `insn_list' expressions) giving\n+     miscellaneous information about the insn.  It is often information\n+     pertaining to the registers used in this insn.\n+\n+   The `LOG_LINKS' field of an insn is a chain of `insn_list'\n+expressions.  Each of these has two operands: the first is an insn, and\n+the second is another `insn_list' expression (the next one in the\n+chain).  The last `insn_list' in the chain has a null pointer as second\n+operand.  The significant thing about the chain is which insns appear\n+in it (as first operands of `insn_list' expressions).  Their order is\n+not significant.\n+\n+   This list is originally set up by the flow analysis pass; it is a\n+null pointer until then.  Flow only adds links for those data\n+dependencies which can be used for instruction combination.  For each\n+insn, the flow analysis pass adds a link to insns which store into\n+registers values that are used for the first time in this insn.  The\n+instruction scheduling pass adds extra links so that every dependence\n+will be represented.  Links represent data dependencies,\n+antidependencies and output dependencies; the machine mode of the link\n+distinguishes these three types: antidependencies have mode\n+`REG_DEP_ANTI', output dependencies have mode `REG_DEP_OUTPUT', and\n+data dependencies have mode `VOIDmode'.\n+\n+   The `REG_NOTES' field of an insn is a chain similar to the\n+`LOG_LINKS' field but it includes `expr_list' expressions in addition\n+to `insn_list' expressions.  There are several kinds of register notes,\n+which are distinguished by the machine mode, which in a register note\n+is really understood as being an `enum reg_note'.  The first operand OP\n+of the note is data whose meaning depends on the kind of note.\n+\n+   The macro `REG_NOTE_KIND (X)' returns the kind of register note.\n+Its counterpart, the macro `PUT_REG_NOTE_KIND (X, NEWKIND)' sets the\n+register note type of X to be NEWKIND.\n+\n+   Register notes are of three classes: They may say something about an\n+input to an insn, they may say something about an output of an insn, or\n+they may create a linkage between two insns.  There are also a set of\n+values that are only used in `LOG_LINKS'.\n+\n+   These register notes annotate inputs to an insn:\n+\n+`REG_DEAD'\n+     The value in OP dies in this insn; that is to say, altering the\n+     value immediately after this insn would not affect the future\n+     behavior of the program.\n+\n+     This does not necessarily mean that the register OP has no useful\n+     value after this insn since it may also be an output of the insn.\n+     In such a case, however, a `REG_DEAD' note would be redundant and\n+     is usually not present until after the reload pass, but no code\n+     relies on this fact.\n+\n+`REG_INC'\n+     The register OP is incremented (or decremented; at this level\n+     there is no distinction) by an embedded side effect inside this\n+     insn.  This means it appears in a `post_inc', `pre_inc',\n+     `post_dec' or `pre_dec' expression.\n+\n+`REG_NONNEG'\n+     The register OP is known to have a nonnegative value when this\n+     insn is reached.  This is used so that decrement and branch until\n+     zero instructions, such as the m68k dbra, can be matched.\n+\n+     The `REG_NONNEG' note is added to insns only if the machine\n+     description has a `decrement_and_branch_until_zero' pattern.\n+\n+`REG_NO_CONFLICT'\n+     This insn does not cause a conflict between OP and the item being\n+     set by this insn even though it might appear that it does.  In\n+     other words, if the destination register and OP could otherwise be\n+     assigned the same register, this insn does not prevent that\n+     assignment.\n+\n+     Insns with this note are usually part of a block that begins with a\n+     `clobber' insn specifying a multi-word pseudo register (which will\n+     be the output of the block), a group of insns that each set one\n+     word of the value and have the `REG_NO_CONFLICT' note attached,\n+     and a final insn that copies the output to itself with an attached\n+     `REG_EQUAL' note giving the expression being computed.  This block\n+     is encapsulated with `REG_LIBCALL' and `REG_RETVAL' notes on the\n+     first and last insns, respectively.\n+\n+`REG_LABEL'\n+     This insn uses OP, a `code_label', but is not a `jump_insn'.  The\n+     presence of this note allows jump optimization to be aware that OP\n+     is, in fact, being used.\n+\n+   The following notes describe attributes of outputs of an insn:\n+\n+`REG_EQUIV'\n+`REG_EQUAL'\n+     This note is only valid on an insn that sets only one register and\n+     indicates that that register will be equal to OP at run time; the\n+     scope of this equivalence differs between the two types of notes.\n+     The value which the insn explicitly copies into the register may\n+     look different from OP, but they will be equal at run time.  If the\n+     output of the single `set' is a `strict_low_part' expression, the\n+     note refers to the register that is contained in `SUBREG_REG' of\n+     the `subreg' expression.\n+\n+     For `REG_EQUIV', the register is equivalent to OP throughout the\n+     entire function, and could validly be replaced in all its\n+     occurrences by OP.  (\"Validly\" here refers to the data flow of the\n+     program; simple replacement may make some insns invalid.)  For\n+     example, when a constant is loaded into a register that is never\n+     assigned any other value, this kind of note is used.\n+\n+     When a parameter is copied into a pseudo-register at entry to a\n+     function, a note of this kind records that the register is\n+     equivalent to the stack slot where the parameter was passed.\n+     Although in this case the register may be set by other insns, it\n+     is still valid to replace the register by the stack slot\n+     throughout the function.\n+\n+     A `REG_EQUIV' note is also used on an instruction which copies a\n+     register parameter into a pseudo-register at entry to a function,\n+     if there is a stack slot where that parameter could be stored.\n+     Although other insns may set the pseudo-register, it is valid for\n+     the compiler to replace the pseudo-register by stack slot\n+     throughout the function, provided the compiler ensures that the\n+     stack slot is properly initialized by making the replacement in\n+     the initial copy instruction as well.  This is used on machines\n+     for which the calling convention allocates stack space for\n+     register parameters.  See `REG_PARM_STACK_SPACE' in *Note Stack\n+     Arguments::.\n+\n+     In the case of `REG_EQUAL', the register that is set by this insn\n+     will be equal to OP at run time at the end of this insn but not\n+     necessarily elsewhere in the function.  In this case, OP is\n+     typically an arithmetic expression.  For example, when a sequence\n+     of insns such as a library call is used to perform an arithmetic\n+     operation, this kind of note is attached to the insn that produces\n+     or copies the final value.\n+\n+     These two notes are used in different ways by the compiler passes.\n+     `REG_EQUAL' is used by passes prior to register allocation (such as\n+     common subexpression elimination and loop optimization) to tell\n+     them how to think of that value.  `REG_EQUIV' notes are used by\n+     register allocation to indicate that there is an available\n+     substitute expression (either a constant or a `mem' expression for\n+     the location of a parameter on the stack) that may be used in\n+     place of a register if insufficient registers are available.\n+\n+     Except for stack homes for parameters, which are indicated by a\n+     `REG_EQUIV' note and are not useful to the early optimization\n+     passes and pseudo registers that are equivalent to a memory\n+     location throughout there entire life, which is not detected until\n+     later in the compilation, all equivalences are initially indicated\n+     by an attached `REG_EQUAL' note.  In the early stages of register\n+     allocation, a `REG_EQUAL' note is changed into a `REG_EQUIV' note\n+     if OP is a constant and the insn represents the only set of its\n+     destination register.\n+\n+     Thus, compiler passes prior to register allocation need only check\n+     for `REG_EQUAL' notes and passes subsequent to register allocation\n+     need only check for `REG_EQUIV' notes.\n+\n+`REG_UNUSED'\n+     The register OP being set by this insn will not be used in a\n+     subsequent insn.  This differs from a `REG_DEAD' note, which\n+     indicates that the value in an input will not be used subsequently.\n+     These two notes are independent; both may be present for the same\n+     register.\n+\n+`REG_WAS_0'\n+     The single output of this insn contained zero before this insn.\n+     OP is the insn that set it to zero.  You can rely on this note if\n+     it is present and OP has not been deleted or turned into a `note';\n+     its absence implies nothing.\n+\n+   These notes describe linkages between insns.  They occur in pairs:\n+one insn has one of a pair of notes that points to a second insn, which\n+has the inverse note pointing back to the first insn.\n+\n+`REG_RETVAL'\n+     This insn copies the value of a multi-insn sequence (for example, a\n+     library call), and OP is the first insn of the sequence (for a\n+     library call, the first insn that was generated to set up the\n+     arguments for the library call).\n+\n+     Loop optimization uses this note to treat such a sequence as a\n+     single operation for code motion purposes and flow analysis uses\n+     this note to delete such sequences whose results are dead.\n+\n+     A `REG_EQUAL' note will also usually be attached to this insn to\n+     provide the expression being computed by the sequence.\n+\n+`REG_LIBCALL'\n+     This is the inverse of `REG_RETVAL': it is placed on the first\n+     insn of a multi-insn sequence, and it points to the last one.\n+\n+`REG_CC_SETTER'\n+`REG_CC_USER'\n+     On machines that use `cc0', the insns which set and use `cc0' set\n+     and use `cc0' are adjacent.  However, when branch delay slot\n+     filling is done, this may no longer be true.  In this case a\n+     `REG_CC_USER' note will be placed on the insn setting `cc0' to\n+     point to the insn using `cc0' and a `REG_CC_SETTER' note will be\n+     placed on the insn using `cc0' to point to the insn setting `cc0'.\n+\n+   These values are only used in the `LOG_LINKS' field, and indicate\n+the type of dependency that each link represents.  Links which indicate\n+a data dependence (a read after write dependence) do not use any code,\n+they simply have mode `VOIDmode', and are printed without any\n+descriptive text.\n+\n+`REG_DEP_ANTI'\n+     This indicates an anti dependence (a write after read dependence).\n+\n+`REG_DEP_OUTPUT'\n+     This indicates an output dependence (a write after write\n+     dependence).\n+\n+   These notes describe information gathered from gcov profile data.\n+They are stored in the `REG_NOTES' field of an insn as an `expr_list'.\n+\n+`REG_EXEC_COUNT'\n+     This is used to indicate the number of times a basic block was\n+     executed according to the profile data.  The note is attached to\n+     the first insn in the basic block.\n+\n+`REG_BR_PROB'\n+     This is used to specify the ratio of branches to non-branches of a\n+     branch insn according to the profile data.  The value is stored as\n+     a value between 0 and REG_BR_PROB_BASE; larger values indicate a\n+     higher probability that the branch will be taken.\n+\n+   For convenience, the machine mode in an `insn_list' or `expr_list'\n+is printed using these symbolic codes in debugging dumps.\n+\n+   The only difference between the expression codes `insn_list' and\n+`expr_list' is that the first operand of an `insn_list' is assumed to\n+be an insn and is printed in debugging dumps as the insn's unique id;\n+the first operand of an `expr_list' is printed in the ordinary way as\n+an expression.\n+\n+\u001f\n+File: gcc.info,  Node: Calls,  Next: Sharing,  Prev: Insns,  Up: RTL\n+\n+RTL Representation of Function-Call Insns\n+=========================================\n+\n+   Insns that call subroutines have the RTL expression code `call_insn'.\n+These insns must satisfy special rules, and their bodies must use a\n+special RTL expression code, `call'.\n+\n+   A `call' expression has two operands, as follows:\n+\n+     (call (mem:FM ADDR) NBYTES)\n+\n+Here NBYTES is an operand that represents the number of bytes of\n+argument data being passed to the subroutine, FM is a machine mode\n+(which must equal as the definition of the `FUNCTION_MODE' macro in the\n+machine description) and ADDR represents the address of the subroutine.\n+\n+   For a subroutine that returns no value, the `call' expression as\n+shown above is the entire body of the insn, except that the insn might\n+also contain `use' or `clobber' expressions.\n+\n+   For a subroutine that returns a value whose mode is not `BLKmode',\n+the value is returned in a hard register.  If this register's number is\n+R, then the body of the call insn looks like this:\n+\n+     (set (reg:M R)\n+          (call (mem:FM ADDR) NBYTES))\n+\n+This RTL expression makes it clear (to the optimizer passes) that the\n+appropriate register receives a useful value in this insn.\n+\n+   When a subroutine returns a `BLKmode' value, it is handled by\n+passing to the subroutine the address of a place to store the value.\n+So the call insn itself does not \"return\" any value, and it has the\n+same RTL form as a call that returns nothing.\n+\n+   On some machines, the call instruction itself clobbers some register,\n+for example to contain the return address.  `call_insn' insns on these\n+machines should have a body which is a `parallel' that contains both\n+the `call' expression and `clobber' expressions that indicate which\n+registers are destroyed.  Similarly, if the call instruction requires\n+some register other than the stack pointer that is not explicitly\n+mentioned it its RTL, a `use' subexpression should mention that\n+register.\n+\n+   Functions that are called are assumed to modify all registers listed\n+in the configuration macro `CALL_USED_REGISTERS' (*note Register\n+Basics::.) and, with the exception of `const' functions and library\n+calls, to modify all of memory.\n+\n+   Insns containing just `use' expressions directly precede the\n+`call_insn' insn to indicate which registers contain inputs to the\n+function.  Similarly, if registers other than those in\n+`CALL_USED_REGISTERS' are clobbered by the called function, insns\n+containing a single `clobber' follow immediately after the call to\n+indicate which registers.\n+\n+\u001f\n+File: gcc.info,  Node: Sharing,  Next: Reading RTL,  Prev: Calls,  Up: RTL\n+\n+Structure Sharing Assumptions\n+=============================\n+\n+   The compiler assumes that certain kinds of RTL expressions are\n+unique; there do not exist two distinct objects representing the same\n+value.  In other cases, it makes an opposite assumption: that no RTL\n+expression object of a certain kind appears in more than one place in\n+the containing structure.\n+\n+   These assumptions refer to a single function; except for the RTL\n+objects that describe global variables and external functions, and a\n+few standard objects such as small integer constants, no RTL objects\n+are common to two functions.\n+\n+   * Each pseudo-register has only a single `reg' object to represent\n+     it, and therefore only a single machine mode.\n+\n+   * For any symbolic label, there is only one `symbol_ref' object\n+     referring to it.\n+\n+   * There is only one `const_int' expression with value 0, only one\n+     with value 1, and only one with value -1.  Some other integer\n+     values are also stored uniquely.\n+\n+   * There is only one `pc' expression.\n+\n+   * There is only one `cc0' expression.\n+\n+   * There is only one `const_double' expression with value 0 for each\n+     floating point mode.  Likewise for values 1 and 2.\n+\n+   * No `label_ref' or `scratch' appears in more than one place in the\n+     RTL structure; in other words, it is safe to do a tree-walk of all\n+     the insns in the function and assume that each time a `label_ref'\n+     or `scratch' is seen it is distinct from all others that are seen.\n+\n+   * Only one `mem' object is normally created for each static variable\n+     or stack slot, so these objects are frequently shared in all the\n+     places they appear.  However, separate but equal objects for these\n+     variables are occasionally made.\n+\n+   * When a single `asm' statement has multiple output operands, a\n+     distinct `asm_operands' expression is made for each output operand.\n+     However, these all share the vector which contains the sequence of\n+     input operands.  This sharing is used later on to test whether two\n+     `asm_operands' expressions come from the same statement, so all\n+     optimizations must carefully preserve the sharing if they copy the\n+     vector at all.\n+\n+   * No RTL object appears in more than one place in the RTL structure\n+     except as described above.  Many passes of the compiler rely on\n+     this by assuming that they can modify RTL objects in place without\n+     unwanted side-effects on other insns.\n+\n+   * During initial RTL generation, shared structure is freely\n+     introduced.  After all the RTL for a function has been generated,\n+     all shared structure is copied by `unshare_all_rtl' in\n+     `emit-rtl.c', after which the above rules are guaranteed to be\n+     followed.\n+\n+   * During the combiner pass, shared structure within an insn can exist\n+     temporarily.  However, the shared structure is copied before the\n+     combiner is finished with the insn.  This is done by calling\n+     `copy_rtx_if_shared', which is a subroutine of `unshare_all_rtl'.\n+\n+\u001f\n+File: gcc.info,  Node: Reading RTL,  Prev: Sharing,  Up: RTL\n+\n+Reading RTL\n+===========\n+\n+   To read an RTL object from a file, call `read_rtx'.  It takes one\n+argument, a stdio stream, and returns a single RTL object.\n+\n+   Reading RTL from a file is very slow.  This is not currently a\n+problem since reading RTL occurs only as part of building the compiler.\n+\n+   People frequently have the idea of using RTL stored as text in a\n+file as an interface between a language front end and the bulk of GNU\n+CC.  This idea is not feasible.\n+\n+   GNU CC was designed to use RTL internally only.  Correct RTL for a\n+given program is very dependent on the particular target machine.  And\n+the RTL does not contain all the information about the program.\n+\n+   The proper way to interface GNU CC to a new language front end is\n+with the \"tree\" data structure.  There is no manual for this data\n+structure, but it is described in the files `tree.h' and `tree.def'.\n+\n+\u001f\n+File: gcc.info,  Node: Machine Desc,  Next: Target Macros,  Prev: RTL,  Up: Top\n+\n+Machine Descriptions\n+********************\n+\n+   A machine description has two parts: a file of instruction patterns\n+(`.md' file) and a C header file of macro definitions.\n+\n+   The `.md' file for a target machine contains a pattern for each\n+instruction that the target machine supports (or at least each\n+instruction that is worth telling the compiler about).  It may also\n+contain comments.  A semicolon causes the rest of the line to be a\n+comment, unless the semicolon is inside a quoted string.\n+\n+   See the next chapter for information on the C header file.\n+\n+* Menu:\n+\n+* Patterns::            How to write instruction patterns.\n+* Example::             An explained example of a `define_insn' pattern.\n+* RTL Template::        The RTL template defines what insns match a pattern.\n+* Output Template::     The output template says how to make assembler code\n+                          from such an insn.\n+* Output Statement::    For more generality, write C code to output\n+                          the assembler code.\n+* Constraints::         When not all operands are general operands.\n+* Standard Names::      Names mark patterns to use for code generation.\n+* Pattern Ordering::    When the order of patterns makes a difference.\n+* Dependent Patterns::  Having one pattern may make you need another.\n+* Jump Patterns::       Special considerations for patterns for jump insns.\n+* Insn Canonicalizations::Canonicalization of Instructions\n+* Peephole Definitions::Defining machine-specific peephole optimizations.\n+* Expander Definitions::Generating a sequence of several RTL insns\n+                         for a standard operation.\n+* Insn Splitting::    Splitting Instructions into Multiple Instructions\n+* Insn Attributes::     Specifying the value of attributes for generated insns.\n+\n+\u001f\n+File: gcc.info,  Node: Patterns,  Next: Example,  Up: Machine Desc\n+\n+Everything about Instruction Patterns\n+=====================================\n+\n+   Each instruction pattern contains an incomplete RTL expression, with\n+pieces to be filled in later, operand constraints that restrict how the\n+pieces can be filled in, and an output pattern or C code to generate\n+the assembler output, all wrapped up in a `define_insn' expression.\n+\n+   A `define_insn' is an RTL expression containing four or five\n+operands:\n+\n+  1. An optional name.  The presence of a name indicate that this\n+     instruction pattern can perform a certain standard job for the\n+     RTL-generation pass of the compiler.  This pass knows certain\n+     names and will use the instruction patterns with those names, if\n+     the names are defined in the machine description.\n+\n+     The absence of a name is indicated by writing an empty string\n+     where the name should go.  Nameless instruction patterns are never\n+     used for generating RTL code, but they may permit several simpler\n+     insns to be combined later on.\n+\n+     Names that are not thus known and used in RTL-generation have no\n+     effect; they are equivalent to no name at all.\n+\n+  2. The \"RTL template\" (*note RTL Template::.) is a vector of\n+     incomplete RTL expressions which show what the instruction should\n+     look like.  It is incomplete because it may contain\n+     `match_operand', `match_operator', and `match_dup' expressions\n+     that stand for operands of the instruction.\n+\n+     If the vector has only one element, that element is the template\n+     for the instruction pattern.  If the vector has multiple elements,\n+     then the instruction pattern is a `parallel' expression containing\n+     the elements described.\n+\n+  3. A condition.  This is a string which contains a C expression that\n+     is the final test to decide whether an insn body matches this\n+     pattern.\n+\n+     For a named pattern, the condition (if present) may not depend on\n+     the data in the insn being matched, but only the\n+     target-machine-type flags.  The compiler needs to test these\n+     conditions during initialization in order to learn exactly which\n+     named instructions are available in a particular run.\n+\n+     For nameless patterns, the condition is applied only when matching\n+     an individual insn, and only after the insn has matched the\n+     pattern's recognition template.  The insn's operands may be found\n+     in the vector `operands'.\n+\n+  4. The \"output template\": a string that says how to output matching\n+     insns as assembler code.  `%' in this string specifies where to\n+     substitute the value of an operand.  *Note Output Template::.\n+\n+     When simple substitution isn't general enough, you can specify a\n+     piece of C code to compute the output.  *Note Output Statement::.\n+\n+  5. Optionally, a vector containing the values of attributes for insns\n+     matching this pattern.  *Note Insn Attributes::.\n+\n+\u001f\n+File: gcc.info,  Node: Example,  Next: RTL Template,  Prev: Patterns,  Up: Machine Desc\n+\n+Example of `define_insn'\n+========================\n+\n+   Here is an actual example of an instruction pattern, for the\n+68000/68020.\n+\n+     (define_insn \"tstsi\"\n+       [(set (cc0)\n+             (match_operand:SI 0 \"general_operand\" \"rm\"))]\n+       \"\"\n+       \"*\n+     { if (TARGET_68020 || ! ADDRESS_REG_P (operands[0]))\n+         return \\\"tstl %0\\\";\n+       return \\\"cmpl #0,%0\\\"; }\")\n+\n+   This is an instruction that sets the condition codes based on the\n+value of a general operand.  It has no condition, so any insn whose RTL\n+description has the form shown may be handled according to this\n+pattern.  The name `tstsi' means \"test a `SImode' value\" and tells the\n+RTL generation pass that, when it is necessary to test such a value, an\n+insn to do so can be constructed using this pattern.\n+\n+   The output control string is a piece of C code which chooses which\n+output template to return based on the kind of operand and the specific\n+type of CPU for which code is being generated.\n+\n+   `\"rm\"' is an operand constraint.  Its meaning is explained below.\n+\n+\u001f\n+File: gcc.info,  Node: RTL Template,  Next: Output Template,  Prev: Example,  Up: Machine Desc\n+\n+RTL Template\n+============\n+\n+   The RTL template is used to define which insns match the particular\n+pattern and how to find their operands.  For named patterns, the RTL\n+template also says how to construct an insn from specified operands.\n+\n+   Construction involves substituting specified operands into a copy of\n+the template.  Matching involves determining the values that serve as\n+the operands in the insn being matched.  Both of these activities are\n+controlled by special expression types that direct matching and\n+substitution of the operands.\n+\n+`(match_operand:M N PREDICATE CONSTRAINT)'\n+     This expression is a placeholder for operand number N of the insn.\n+     When constructing an insn, operand number N will be substituted\n+     at this point.  When matching an insn, whatever appears at this\n+     position in the insn will be taken as operand number N; but it\n+     must satisfy PREDICATE or this instruction pattern will not match\n+     at all.\n+\n+     Operand numbers must be chosen consecutively counting from zero in\n+     each instruction pattern.  There may be only one `match_operand'\n+     expression in the pattern for each operand number.  Usually\n+     operands are numbered in the order of appearance in `match_operand'\n+     expressions.  In the case of a `define_expand', any operand numbers\n+     used only in `match_dup' expressions have higher values than all\n+     other operand numbers.\n+\n+     PREDICATE is a string that is the name of a C function that\n+     accepts two arguments, an expression and a machine mode.  During\n+     matching, the function will be called with the putative operand as\n+     the expression and M as the mode argument (if M is not specified,\n+     `VOIDmode' will be used, which normally causes PREDICATE to accept\n+     any mode).  If it returns zero, this instruction pattern fails to\n+     match.  PREDICATE may be an empty string; then it means no test is\n+     to be done on the operand, so anything which occurs in this\n+     position is valid.\n+\n+     Most of the time, PREDICATE will reject modes other than M--but\n+     not always.  For example, the predicate `address_operand' uses M\n+     as the mode of memory ref that the address should be valid for.\n+     Many predicates accept `const_int' nodes even though their mode is\n+     `VOIDmode'.\n+\n+     CONSTRAINT controls reloading and the choice of the best register\n+     class to use for a value, as explained later (*note\n+     Constraints::.).\n+\n+     People are often unclear on the difference between the constraint\n+     and the predicate.  The predicate helps decide whether a given\n+     insn matches the pattern.  The constraint plays no role in this\n+     decision; instead, it controls various decisions in the case of an\n+     insn which does match.\n+\n+     On CISC machines, the most common PREDICATE is\n+     `\"general_operand\"'.  This function checks that the putative\n+     operand is either a constant, a register or a memory reference,\n+     and that it is valid for mode M.\n+\n+     For an operand that must be a register, PREDICATE should be\n+     `\"register_operand\"'.  Using `\"general_operand\"' would be valid,\n+     since the reload pass would copy any non-register operands through\n+     registers, but this would make GNU CC do extra work, it would\n+     prevent invariant operands (such as constant) from being removed\n+     from loops, and it would prevent the register allocator from doing\n+     the best possible job.  On RISC machines, it is usually most\n+     efficient to allow PREDICATE to accept only objects that the\n+     constraints allow.\n+\n+     For an operand that must be a constant, you must be sure to either\n+     use `\"immediate_operand\"' for PREDICATE, or make the instruction\n+     pattern's extra condition require a constant, or both.  You cannot\n+     expect the constraints to do this work!  If the constraints allow\n+     only constants, but the predicate allows something else, the\n+     compiler will crash when that case arises.\n+\n+`(match_scratch:M N CONSTRAINT)'\n+     This expression is also a placeholder for operand number N and\n+     indicates that operand must be a `scratch' or `reg' expression.\n+\n+     When matching patterns, this is equivalent to\n+\n+          (match_operand:M N \"scratch_operand\" PRED)\n+\n+     but, when generating RTL, it produces a (`scratch':M) expression.\n+\n+     If the last few expressions in a `parallel' are `clobber'\n+     expressions whose operands are either a hard register or\n+     `match_scratch', the combiner can add or delete them when\n+     necessary.  *Note Side Effects::.\n+\n+`(match_dup N)'\n+     This expression is also a placeholder for operand number N.  It is\n+     used when the operand needs to appear more than once in the insn.\n+\n+     In construction, `match_dup' acts just like `match_operand': the\n+     operand is substituted into the insn being constructed.  But in\n+     matching, `match_dup' behaves differently.  It assumes that operand\n+     number N has already been determined by a `match_operand'\n+     appearing earlier in the recognition template, and it matches only\n+     an identical-looking expression.\n+\n+`(match_operator:M N PREDICATE [OPERANDS...])'\n+     This pattern is a kind of placeholder for a variable RTL expression\n+     code.\n+\n+     When constructing an insn, it stands for an RTL expression whose\n+     expression code is taken from that of operand N, and whose\n+     operands are constructed from the patterns OPERANDS.\n+\n+     When matching an expression, it matches an expression if the\n+     function PREDICATE returns nonzero on that expression *and* the\n+     patterns OPERANDS match the operands of the expression.\n+\n+     Suppose that the function `commutative_operator' is defined as\n+     follows, to match any expression whose operator is one of the\n+     commutative arithmetic operators of RTL and whose mode is MODE:\n+\n+          int\n+          commutative_operator (x, mode)\n+               rtx x;\n+               enum machine_mode mode;\n+          {\n+            enum rtx_code code = GET_CODE (x);\n+            if (GET_MODE (x) != mode)\n+              return 0;\n+            return (GET_RTX_CLASS (code) == 'c'\n+                    || code == EQ || code == NE);\n+          }\n+\n+     Then the following pattern will match any RTL expression consisting\n+     of a commutative operator applied to two general operands:\n+\n+          (match_operator:SI 3 \"commutative_operator\"\n+            [(match_operand:SI 1 \"general_operand\" \"g\")\n+             (match_operand:SI 2 \"general_operand\" \"g\")])\n+\n+     Here the vector `[OPERANDS...]' contains two patterns because the\n+     expressions to be matched all contain two operands.\n+\n+     When this pattern does match, the two operands of the commutative\n+     operator are recorded as operands 1 and 2 of the insn.  (This is\n+     done by the two instances of `match_operand'.)  Operand 3 of the\n+     insn will be the entire commutative expression: use `GET_CODE\n+     (operands[3])' to see which commutative operator was used.\n+\n+     The machine mode M of `match_operator' works like that of\n+     `match_operand': it is passed as the second argument to the\n+     predicate function, and that function is solely responsible for\n+     deciding whether the expression to be matched \"has\" that mode.\n+\n+     When constructing an insn, argument 3 of the gen-function will\n+     specify the operation (i.e. the expression code) for the\n+     expression to be made.  It should be an RTL expression, whose\n+     expression code is copied into a new expression whose operands are\n+     arguments 1 and 2 of the gen-function.  The subexpressions of\n+     argument 3 are not used; only its expression code matters.\n+\n+     When `match_operator' is used in a pattern for matching an insn,\n+     it usually best if the operand number of the `match_operator' is\n+     higher than that of the actual operands of the insn.  This improves\n+     register allocation because the register allocator often looks at\n+     operands 1 and 2 of insns to see if it can do register tying.\n+\n+     There is no way to specify constraints in `match_operator'.  The\n+     operand of the insn which corresponds to the `match_operator'\n+     never has any constraints because it is never reloaded as a whole.\n+     However, if parts of its OPERANDS are matched by `match_operand'\n+     patterns, those parts may have constraints of their own.\n+\n+`(match_op_dup:M N[OPERANDS...])'\n+     Like `match_dup', except that it applies to operators instead of\n+     operands.  When constructing an insn, operand number N will be\n+     substituted at this point.  But in matching, `match_op_dup' behaves\n+     differently.  It assumes that operand number N has already been\n+     determined by a `match_operator' appearing earlier in the\n+     recognition template, and it matches only an identical-looking\n+     expression.\n+\n+`(match_parallel N PREDICATE [SUBPAT...])'\n+     This pattern is a placeholder for an insn that consists of a\n+     `parallel' expression with a variable number of elements.  This\n+     expression should only appear at the top level of an insn pattern.\n+\n+     When constructing an insn, operand number N will be substituted at\n+     this point.  When matching an insn, it matches if the body of the\n+     insn is a `parallel' expression with at least as many elements as\n+     the vector of SUBPAT expressions in the `match_parallel', if each\n+     SUBPAT matches the corresponding element of the `parallel', *and*\n+     the function PREDICATE returns nonzero on the `parallel' that is\n+     the body of the insn.  It is the responsibility of the predicate\n+     to validate elements of the `parallel' beyond those listed in the\n+     `match_parallel'.\n+\n+     A typical use of `match_parallel' is to match load and store\n+     multiple expressions, which can contain a variable number of\n+     elements in a `parallel'.  For example,\n+\n+          (define_insn \"\"\n+            [(match_parallel 0 \"load_multiple_operation\"\n+               [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n+                     (match_operand:SI 2 \"memory_operand\" \"m\"))\n+                (use (reg:SI 179))\n+                (clobber (reg:SI 179))])]\n+            \"\"\n+            \"loadm 0,0,%1,%2\")\n+\n+     This example comes from `a29k.md'.  The function\n+     `load_multiple_operations' is defined in `a29k.c' and checks that\n+     subsequent elements in the `parallel' are the same as the `set' in\n+     the pattern, except that they are referencing subsequent registers\n+     and memory locations.\n+\n+     An insn that matches this pattern might look like:\n+\n+          (parallel\n+           [(set (reg:SI 20) (mem:SI (reg:SI 100)))\n+            (use (reg:SI 179))\n+            (clobber (reg:SI 179))\n+            (set (reg:SI 21)\n+                 (mem:SI (plus:SI (reg:SI 100)\n+                                  (const_int 4))))\n+            (set (reg:SI 22)\n+                 (mem:SI (plus:SI (reg:SI 100)\n+                                  (const_int 8))))])\n+\n+`(match_par_dup N [SUBPAT...])'\n+     Like `match_op_dup', but for `match_parallel' instead of\n+     `match_operator'.\n+\n+`(address (match_operand:M N \"address_operand\" \"\"))'\n+     This complex of expressions is a placeholder for an operand number\n+     N in a \"load address\" instruction: an operand which specifies a\n+     memory location in the usual way, but for which the actual operand\n+     value used is the address of the location, not the contents of the\n+     location.\n+\n+     `address' expressions never appear in RTL code, only in machine\n+     descriptions.  And they are used only in machine descriptions that\n+     do not use the operand constraint feature.  When operand\n+     constraints are in use, the letter `p' in the constraint serves\n+     this purpose.\n+\n+     M is the machine mode of the *memory location being addressed*,\n+     not the machine mode of the address itself.  That mode is always\n+     the same on a given target machine (it is `Pmode', which normally\n+     is `SImode'), so there is no point in mentioning it; thus, no\n+     machine mode is written in the `address' expression.  If some day\n+     support is added for machines in which addresses of different\n+     kinds of objects appear differently or are used differently (such\n+     as the PDP-10), different formats would perhaps need different\n+     machine modes and these modes might be written in the `address'\n+     expression.\n+"}, {"sha": "ec0d511435c30ca8bb51dedae33e5e4f6dd9e119", "filename": "gcc/gcc.info-17", "status": "added", "additions": 1112, "deletions": 0, "changes": 1112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-17", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-17", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-17?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1112 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Output Template,  Next: Output Statement,  Prev: RTL Template,  Up: Machine Desc\n+\n+Output Templates and Operand Substitution\n+=========================================\n+\n+   The \"output template\" is a string which specifies how to output the\n+assembler code for an instruction pattern.  Most of the template is a\n+fixed string which is output literally.  The character `%' is used to\n+specify where to substitute an operand; it can also be used to identify\n+places where different variants of the assembler require different\n+syntax.\n+\n+   In the simplest case, a `%' followed by a digit N says to output\n+operand N at that point in the string.\n+\n+   `%' followed by a letter and a digit says to output an operand in an\n+alternate fashion.  Four letters have standard, built-in meanings\n+described below.  The machine description macro `PRINT_OPERAND' can\n+define additional letters with nonstandard meanings.\n+\n+   `%cDIGIT' can be used to substitute an operand that is a constant\n+value without the syntax that normally indicates an immediate operand.\n+\n+   `%nDIGIT' is like `%cDIGIT' except that the value of the constant is\n+negated before printing.\n+\n+   `%aDIGIT' can be used to substitute an operand as if it were a\n+memory reference, with the actual operand treated as the address.  This\n+may be useful when outputting a \"load address\" instruction, because\n+often the assembler syntax for such an instruction requires you to\n+write the operand as if it were a memory reference.\n+\n+   `%lDIGIT' is used to substitute a `label_ref' into a jump\n+instruction.\n+\n+   `%=' outputs a number which is unique to each instruction in the\n+entire compilation.  This is useful for making local labels to be\n+referred to more than once in a single template that generates multiple\n+assembler instructions.\n+\n+   `%' followed by a punctuation character specifies a substitution that\n+does not use an operand.  Only one case is standard: `%%' outputs a `%'\n+into the assembler code.  Other nonstandard cases can be defined in the\n+`PRINT_OPERAND' macro.  You must also define which punctuation\n+characters are valid with the `PRINT_OPERAND_PUNCT_VALID_P' macro.\n+\n+   The template may generate multiple assembler instructions.  Write\n+the text for the instructions, with `\\;' between them.\n+\n+   When the RTL contains two operands which are required by constraint\n+to match each other, the output template must refer only to the\n+lower-numbered operand.  Matching operands are not always identical,\n+and the rest of the compiler arranges to put the proper RTL expression\n+for printing into the lower-numbered operand.\n+\n+   One use of nonstandard letters or punctuation following `%' is to\n+distinguish between different assembler languages for the same machine;\n+for example, Motorola syntax versus MIT syntax for the 68000.  Motorola\n+syntax requires periods in most opcode names, while MIT syntax does\n+not.  For example, the opcode `movel' in MIT syntax is `move.l' in\n+Motorola syntax.  The same file of patterns is used for both kinds of\n+output syntax, but the character sequence `%.' is used in each place\n+where Motorola syntax wants a period.  The `PRINT_OPERAND' macro for\n+Motorola syntax defines the sequence to output a period; the macro for\n+MIT syntax defines it to do nothing.\n+\n+   As a special case, a template consisting of the single character `#'\n+instructs the compiler to first split the insn, and then output the\n+resulting instructions separately.  This helps eliminate redundancy in\n+the output templates.   If you have a `define_insn' that needs to emit\n+multiple assembler instructions, and there is an matching `define_split'\n+already defined, then you can simply use `#' as the output template\n+instead of writing an output template that emits the multiple assembler\n+instructions.\n+\n+   If the macro `ASSEMBLER_DIALECT' is defined, you can use construct\n+of the form `{option0|option1|option2}' in the templates.  These\n+describe multiple variants of assembler language syntax.  *Note\n+Instruction Output::.\n+\n+\u001f\n+File: gcc.info,  Node: Output Statement,  Next: Constraints,  Prev: Output Template,  Up: Machine Desc\n+\n+C Statements for Assembler Output\n+=================================\n+\n+   Often a single fixed template string cannot produce correct and\n+efficient assembler code for all the cases that are recognized by a\n+single instruction pattern.  For example, the opcodes may depend on the\n+kinds of operands; or some unfortunate combinations of operands may\n+require extra machine instructions.\n+\n+   If the output control string starts with a `@', then it is actually\n+a series of templates, each on a separate line.  (Blank lines and\n+leading spaces and tabs are ignored.)  The templates correspond to the\n+pattern's constraint alternatives (*note Multi-Alternative::.).  For\n+example, if a target machine has a two-address add instruction `addr'\n+to add into a register and another `addm' to add a register to memory,\n+you might write this pattern:\n+\n+     (define_insn \"addsi3\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=r,m\")\n+             (plus:SI (match_operand:SI 1 \"general_operand\" \"0,0\")\n+                      (match_operand:SI 2 \"general_operand\" \"g,r\")))]\n+       \"\"\n+       \"@\n+        addr %2,%0\n+        addm %2,%0\")\n+\n+   If the output control string starts with a `*', then it is not an\n+output template but rather a piece of C program that should compute a\n+template.  It should execute a `return' statement to return the\n+template-string you want.  Most such templates use C string literals,\n+which require doublequote characters to delimit them.  To include these\n+doublequote characters in the string, prefix each one with `\\'.\n+\n+   The operands may be found in the array `operands', whose C data type\n+is `rtx []'.\n+\n+   It is very common to select different ways of generating assembler\n+code based on whether an immediate operand is within a certain range.\n+Be careful when doing this, because the result of `INTVAL' is an\n+integer on the host machine.  If the host machine has more bits in an\n+`int' than the target machine has in the mode in which the constant\n+will be used, then some of the bits you get from `INTVAL' will be\n+superfluous.  For proper results, you must carefully disregard the\n+values of those bits.\n+\n+   It is possible to output an assembler instruction and then go on to\n+output or compute more of them, using the subroutine `output_asm_insn'.\n+This receives two arguments: a template-string and a vector of\n+operands.  The vector may be `operands', or it may be another array of\n+`rtx' that you declare locally and initialize yourself.\n+\n+   When an insn pattern has multiple alternatives in its constraints,\n+often the appearance of the assembler code is determined mostly by\n+which alternative was matched.  When this is so, the C code can test\n+the variable `which_alternative', which is the ordinal number of the\n+alternative that was actually satisfied (0 for the first, 1 for the\n+second alternative, etc.).\n+\n+   For example, suppose there are two opcodes for storing zero, `clrreg'\n+for registers and `clrmem' for memory locations.  Here is how a pattern\n+could use `which_alternative' to choose between them:\n+\n+     (define_insn \"\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=r,m\")\n+             (const_int 0))]\n+       \"\"\n+       \"*\n+       return (which_alternative == 0\n+               ? \\\"clrreg %0\\\" : \\\"clrmem %0\\\");\n+       \")\n+\n+   The example above, where the assembler code to generate was *solely*\n+determined by the alternative, could also have been specified as\n+follows, having the output control string start with a `@':\n+\n+     (define_insn \"\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=r,m\")\n+             (const_int 0))]\n+       \"\"\n+       \"@\n+        clrreg %0\n+        clrmem %0\")\n+\n+\u001f\n+File: gcc.info,  Node: Constraints,  Next: Standard Names,  Prev: Output Statement,  Up: Machine Desc\n+\n+Operand Constraints\n+===================\n+\n+   Each `match_operand' in an instruction pattern can specify a\n+constraint for the type of operands allowed.  Constraints can say\n+whether an operand may be in a register, and which kinds of register;\n+whether the operand can be a memory reference, and which kinds of\n+address; whether the operand may be an immediate constant, and which\n+possible values it may have.  Constraints can also require two operands\n+to match.\n+\n+* Menu:\n+\n+* Simple Constraints::  Basic use of constraints.\n+* Multi-Alternative::   When an insn has two alternative constraint-patterns.\n+* Class Preferences::   Constraints guide which hard register to put things in.\n+* Modifiers::           More precise control over effects of constraints.\n+* Machine Constraints:: Existing constraints for some particular machines.\n+* No Constraints::      Describing a clean machine without constraints.\n+\n+\u001f\n+File: gcc.info,  Node: Simple Constraints,  Next: Multi-Alternative,  Up: Constraints\n+\n+Simple Constraints\n+------------------\n+\n+   The simplest kind of constraint is a string full of letters, each of\n+which describes one kind of operand that is permitted.  Here are the\n+letters that are allowed:\n+\n+`m'\n+     A memory operand is allowed, with any kind of address that the\n+     machine supports in general.\n+\n+`o'\n+     A memory operand is allowed, but only if the address is\n+     \"offsettable\".  This means that adding a small integer (actually,\n+     the width in bytes of the operand, as determined by its machine\n+     mode) may be added to the address and the result is also a valid\n+     memory address.\n+\n+     For example, an address which is constant is offsettable; so is an\n+     address that is the sum of a register and a constant (as long as a\n+     slightly larger constant is also within the range of\n+     address-offsets supported by the machine); but an autoincrement or\n+     autodecrement address is not offsettable.  More complicated\n+     indirect/indexed addresses may or may not be offsettable depending\n+     on the other addressing modes that the machine supports.\n+\n+     Note that in an output operand which can be matched by another\n+     operand, the constraint letter `o' is valid only when accompanied\n+     by both `<' (if the target machine has predecrement addressing)\n+     and `>' (if the target machine has preincrement addressing).\n+\n+`V'\n+     A memory operand that is not offsettable.  In other words,\n+     anything that would fit the `m' constraint but not the `o'\n+     constraint.\n+\n+`<'\n+     A memory operand with autodecrement addressing (either\n+     predecrement or postdecrement) is allowed.\n+\n+`>'\n+     A memory operand with autoincrement addressing (either\n+     preincrement or postincrement) is allowed.\n+\n+`r'\n+     A register operand is allowed provided that it is in a general\n+     register.\n+\n+`d', `a', `f', ...\n+     Other letters can be defined in machine-dependent fashion to stand\n+     for particular classes of registers.  `d', `a' and `f' are defined\n+     on the 68000/68020 to stand for data, address and floating point\n+     registers.\n+\n+`i'\n+     An immediate integer operand (one with constant value) is allowed.\n+     This includes symbolic constants whose values will be known only at\n+     assembly time.\n+\n+`n'\n+     An immediate integer operand with a known numeric value is allowed.\n+     Many systems cannot support assembly-time constants for operands\n+     less than a word wide.  Constraints for these operands should use\n+     `n' rather than `i'.\n+\n+`I', `J', `K', ... `P'\n+     Other letters in the range `I' through `P' may be defined in a\n+     machine-dependent fashion to permit immediate integer operands with\n+     explicit integer values in specified ranges.  For example, on the\n+     68000, `I' is defined to stand for the range of values 1 to 8.\n+     This is the range permitted as a shift count in the shift\n+     instructions.\n+\n+`E'\n+     An immediate floating operand (expression code `const_double') is\n+     allowed, but only if the target floating point format is the same\n+     as that of the host machine (on which the compiler is running).\n+\n+`F'\n+     An immediate floating operand (expression code `const_double') is\n+     allowed.\n+\n+`G', `H'\n+     `G' and `H' may be defined in a machine-dependent fashion to\n+     permit immediate floating operands in particular ranges of values.\n+\n+`s'\n+     An immediate integer operand whose value is not an explicit\n+     integer is allowed.\n+\n+     This might appear strange; if an insn allows a constant operand\n+     with a value not known at compile time, it certainly must allow\n+     any known value.  So why use `s' instead of `i'?  Sometimes it\n+     allows better code to be generated.\n+\n+     For example, on the 68000 in a fullword instruction it is possible\n+     to use an immediate operand; but if the immediate value is between\n+     -128 and 127, better code results from loading the value into a\n+     register and using the register.  This is because the load into\n+     the register can be done with a `moveq' instruction.  We arrange\n+     for this to happen by defining the letter `K' to mean \"any integer\n+     outside the range -128 to 127\", and then specifying `Ks' in the\n+     operand constraints.\n+\n+`g'\n+     Any register, memory or immediate integer operand is allowed,\n+     except for registers that are not general registers.\n+\n+`X'\n+     Any operand whatsoever is allowed, even if it does not satisfy\n+     `general_operand'.  This is normally used in the constraint of a\n+     `match_scratch' when certain alternatives will not actually\n+     require a scratch register.\n+\n+`0', `1', `2', ... `9'\n+     An operand that matches the specified operand number is allowed.\n+     If a digit is used together with letters within the same\n+     alternative, the digit should come last.\n+\n+     This is called a \"matching constraint\" and what it really means is\n+     that the assembler has only a single operand that fills two roles\n+     considered separate in the RTL insn.  For example, an add insn has\n+     two input operands and one output operand in the RTL, but on most\n+     CISC machines an add instruction really has only two operands, one\n+     of them an input-output operand:\n+\n+          addl #35,r12\n+\n+     Matching constraints are used in these circumstances.  More\n+     precisely, the two operands that match must include one input-only\n+     operand and one output-only operand.  Moreover, the digit must be a\n+     smaller number than the number of the operand that uses it in the\n+     constraint.\n+\n+     For operands to match in a particular case usually means that they\n+     are identical-looking RTL expressions.  But in a few special cases\n+     specific kinds of dissimilarity are allowed.  For example, `*x' as\n+     an input operand will match `*x++' as an output operand.  For\n+     proper results in such cases, the output template should always\n+     use the output-operand's number when printing the operand.\n+\n+`p'\n+     An operand that is a valid memory address is allowed.  This is for\n+     \"load address\" and \"push address\" instructions.\n+\n+     `p' in the constraint must be accompanied by `address_operand' as\n+     the predicate in the `match_operand'.  This predicate interprets\n+     the mode specified in the `match_operand' as the mode of the memory\n+     reference for which the address would be valid.\n+\n+`Q', `R', `S', ... `U'\n+     Letters in the range `Q' through `U' may be defined in a\n+     machine-dependent fashion to stand for arbitrary operand types.\n+     The machine description macro `EXTRA_CONSTRAINT' is passed the\n+     operand as its first argument and the constraint letter as its\n+     second operand.\n+\n+     A typical use for this would be to distinguish certain types of\n+     memory references that affect other insn operands.\n+\n+     Do not define these constraint letters to accept register\n+     references (`reg'); the reload pass does not expect this and would\n+     not handle it properly.\n+\n+   In order to have valid assembler code, each operand must satisfy its\n+constraint.  But a failure to do so does not prevent the pattern from\n+applying to an insn.  Instead, it directs the compiler to modify the\n+code so that the constraint will be satisfied.  Usually this is done by\n+copying an operand into a register.\n+\n+   Contrast, therefore, the two instruction patterns that follow:\n+\n+     (define_insn \"\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n+             (plus:SI (match_dup 0)\n+                      (match_operand:SI 1 \"general_operand\" \"r\")))]\n+       \"\"\n+       \"...\")\n+\n+which has two operands, one of which must appear in two places, and\n+\n+     (define_insn \"\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=r\")\n+             (plus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+                      (match_operand:SI 2 \"general_operand\" \"r\")))]\n+       \"\"\n+       \"...\")\n+\n+which has three operands, two of which are required by a constraint to\n+be identical.  If we are considering an insn of the form\n+\n+     (insn N PREV NEXT\n+       (set (reg:SI 3)\n+            (plus:SI (reg:SI 6) (reg:SI 109)))\n+       ...)\n+\n+the first pattern would not apply at all, because this insn does not\n+contain two identical subexpressions in the right place.  The pattern\n+would say, \"That does not look like an add instruction; try other\n+patterns.\"  The second pattern would say, \"Yes, that's an add\n+instruction, but there is something wrong with it.\"  It would direct\n+the reload pass of the compiler to generate additional insns to make\n+the constraint true.  The results might look like this:\n+\n+     (insn N2 PREV N\n+       (set (reg:SI 3) (reg:SI 6))\n+       ...)\n+     \n+     (insn N N2 NEXT\n+       (set (reg:SI 3)\n+            (plus:SI (reg:SI 3) (reg:SI 109)))\n+       ...)\n+\n+   It is up to you to make sure that each operand, in each pattern, has\n+constraints that can handle any RTL expression that could be present for\n+that operand.  (When multiple alternatives are in use, each pattern\n+must, for each possible combination of operand expressions, have at\n+least one alternative which can handle that combination of operands.)\n+The constraints don't need to *allow* any possible operand--when this is\n+the case, they do not constrain--but they must at least point the way to\n+reloading any possible operand so that it will fit.\n+\n+   * If the constraint accepts whatever operands the predicate permits,\n+     there is no problem: reloading is never necessary for this operand.\n+\n+     For example, an operand whose constraints permit everything except\n+     registers is safe provided its predicate rejects registers.\n+\n+     An operand whose predicate accepts only constant values is safe\n+     provided its constraints include the letter `i'.  If any possible\n+     constant value is accepted, then nothing less than `i' will do; if\n+     the predicate is more selective, then the constraints may also be\n+     more selective.\n+\n+   * Any operand expression can be reloaded by copying it into a\n+     register.  So if an operand's constraints allow some kind of\n+     register, it is certain to be safe.  It need not permit all\n+     classes of registers; the compiler knows how to copy a register\n+     into another register of the proper class in order to make an\n+     instruction valid.\n+\n+   * A nonoffsettable memory reference can be reloaded by copying the\n+     address into a register.  So if the constraint uses the letter\n+     `o', all memory references are taken care of.\n+\n+   * A constant operand can be reloaded by allocating space in memory to\n+     hold it as preinitialized data.  Then the memory reference can be\n+     used in place of the constant.  So if the constraint uses the\n+     letters `o' or `m', constant operands are not a problem.\n+\n+   * If the constraint permits a constant and a pseudo register used in\n+     an insn was not allocated to a hard register and is equivalent to\n+     a constant, the register will be replaced with the constant.  If\n+     the predicate does not permit a constant and the insn is\n+     re-recognized for some reason, the compiler will crash.  Thus the\n+     predicate must always recognize any objects allowed by the\n+     constraint.\n+\n+   If the operand's predicate can recognize registers, but the\n+constraint does not permit them, it can make the compiler crash.  When\n+this operand happens to be a register, the reload pass will be stymied,\n+because it does not know how to copy a register temporarily into memory.\n+\n+   If the predicate accepts a unary operator, the constraint applies to\n+the operand.  For example, the MIPS processor at ISA level 3 supports an\n+instruction which adds two registers in `SImode' to produce a `DImode'\n+result, but only if the registers are correctly sign extended.  This\n+predicate for the input operands accepts a `sign_extend' of an `SImode'\n+register.  Write the constraint to indicate the type of register that\n+is required for the operand of the `sign_extend'.\n+\n+\u001f\n+File: gcc.info,  Node: Multi-Alternative,  Next: Class Preferences,  Prev: Simple Constraints,  Up: Constraints\n+\n+Multiple Alternative Constraints\n+--------------------------------\n+\n+   Sometimes a single instruction has multiple alternative sets of\n+possible operands.  For example, on the 68000, a logical-or instruction\n+can combine register or an immediate value into memory, or it can\n+combine any kind of operand into a register; but it cannot combine one\n+memory location into another.\n+\n+   These constraints are represented as multiple alternatives.  An\n+alternative can be described by a series of letters for each operand.\n+The overall constraint for an operand is made from the letters for this\n+operand from the first alternative, a comma, the letters for this\n+operand from the second alternative, a comma, and so on until the last\n+alternative.  Here is how it is done for fullword logical-or on the\n+68000:\n+\n+     (define_insn \"iorsi3\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=m,d\")\n+             (ior:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n+                     (match_operand:SI 2 \"general_operand\" \"dKs,dmKs\")))]\n+       ...)\n+\n+   The first alternative has `m' (memory) for operand 0, `0' for\n+operand 1 (meaning it must match operand 0), and `dKs' for operand 2.\n+The second alternative has `d' (data register) for operand 0, `0' for\n+operand 1, and `dmKs' for operand 2.  The `=' and `%' in the\n+constraints apply to all the alternatives; their meaning is explained\n+in the next section (*note Class Preferences::.).\n+\n+   If all the operands fit any one alternative, the instruction is\n+valid.  Otherwise, for each alternative, the compiler counts how many\n+instructions must be added to copy the operands so that that\n+alternative applies.  The alternative requiring the least copying is\n+chosen.  If two alternatives need the same amount of copying, the one\n+that comes first is chosen.  These choices can be altered with the `?'\n+and `!' characters:\n+\n+`?'\n+     Disparage slightly the alternative that the `?' appears in, as a\n+     choice when no alternative applies exactly.  The compiler regards\n+     this alternative as one unit more costly for each `?' that appears\n+     in it.\n+\n+`!'\n+     Disparage severely the alternative that the `!' appears in.  This\n+     alternative can still be used if it fits without reloading, but if\n+     reloading is needed, some other alternative will be used.\n+\n+   When an insn pattern has multiple alternatives in its constraints,\n+often the appearance of the assembler code is determined mostly by which\n+alternative was matched.  When this is so, the C code for writing the\n+assembler code can use the variable `which_alternative', which is the\n+ordinal number of the alternative that was actually satisfied (0 for\n+the first, 1 for the second alternative, etc.).  *Note Output\n+Statement::.\n+\n+\u001f\n+File: gcc.info,  Node: Class Preferences,  Next: Modifiers,  Prev: Multi-Alternative,  Up: Constraints\n+\n+Register Class Preferences\n+--------------------------\n+\n+   The operand constraints have another function: they enable the\n+compiler to decide which kind of hardware register a pseudo register is\n+best allocated to.  The compiler examines the constraints that apply to\n+the insns that use the pseudo register, looking for the\n+machine-dependent letters such as `d' and `a' that specify classes of\n+registers.  The pseudo register is put in whichever class gets the most\n+\"votes\".  The constraint letters `g' and `r' also vote: they vote in\n+favor of a general register.  The machine description says which\n+registers are considered general.\n+\n+   Of course, on some machines all registers are equivalent, and no\n+register classes are defined.  Then none of this complexity is relevant.\n+\n+\u001f\n+File: gcc.info,  Node: Modifiers,  Next: Machine Constraints,  Prev: Class Preferences,  Up: Constraints\n+\n+Constraint Modifier Characters\n+------------------------------\n+\n+   Here are constraint modifier characters.\n+\n+`='\n+     Means that this operand is write-only for this instruction: the\n+     previous value is discarded and replaced by output data.\n+\n+`+'\n+     Means that this operand is both read and written by the\n+     instruction.\n+\n+     When the compiler fixes up the operands to satisfy the constraints,\n+     it needs to know which operands are inputs to the instruction and\n+     which are outputs from it.  `=' identifies an output; `+'\n+     identifies an operand that is both input and output; all other\n+     operands are assumed to be input only.\n+\n+`&'\n+     Means (in a particular alternative) that this operand is an\n+     \"earlyclobber\" operand, which is modified before the instruction is\n+     finished using the input operands.  Therefore, this operand may\n+     not lie in a register that is used as an input operand or as part\n+     of any memory address.\n+\n+     `&' applies only to the alternative in which it is written.  In\n+     constraints with multiple alternatives, sometimes one alternative\n+     requires `&' while others do not.  See, for example, the `movdf'\n+     insn of the 68000.\n+\n+     An input operand can be tied to an earlyclobber operand if its only\n+     use as an input occurs before the early result is written.  Adding\n+     alternatives of this form often allows GCC to produce better code\n+     when only some of the inputs can be affected by the earlyclobber.\n+     See, for example, the `mulsi3' insn of the ARM.\n+\n+     `&' does not obviate the need to write `='.\n+\n+`%'\n+     Declares the instruction to be commutative for this operand and the\n+     following operand.  This means that the compiler may interchange\n+     the two operands if that is the cheapest way to make all operands\n+     fit the constraints.  This is often used in patterns for addition\n+     instructions that really have only two operands: the result must\n+     go in one of the arguments.  Here for example, is how the 68000\n+     halfword-add instruction is defined:\n+\n+          (define_insn \"addhi3\"\n+            [(set (match_operand:HI 0 \"general_operand\" \"=m,r\")\n+               (plus:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n+                        (match_operand:HI 2 \"general_operand\" \"di,g\")))]\n+            ...)\n+\n+`#'\n+     Says that all following characters, up to the next comma, are to be\n+     ignored as a constraint.  They are significant only for choosing\n+     register preferences.\n+\n+`*'\n+     Says that the following character should be ignored when choosing\n+     register preferences.  `*' has no effect on the meaning of the\n+     constraint as a constraint, and no effect on reloading.\n+\n+     Here is an example: the 68000 has an instruction to sign-extend a\n+     halfword in a data register, and can also sign-extend a value by\n+     copying it into an address register.  While either kind of\n+     register is acceptable, the constraints on an address-register\n+     destination are less strict, so it is best if register allocation\n+     makes an address register its goal.  Therefore, `*' is used so\n+     that the `d' constraint letter (for data register) is ignored when\n+     computing register preferences.\n+\n+          (define_insn \"extendhisi2\"\n+            [(set (match_operand:SI 0 \"general_operand\" \"=*d,a\")\n+                  (sign_extend:SI\n+                   (match_operand:HI 1 \"general_operand\" \"0,g\")))]\n+            ...)\n+\n+\u001f\n+File: gcc.info,  Node: Machine Constraints,  Next: No Constraints,  Prev: Modifiers,  Up: Constraints\n+\n+Constraints for Particular Machines\n+-----------------------------------\n+\n+   Whenever possible, you should use the general-purpose constraint\n+letters in `asm' arguments, since they will convey meaning more readily\n+to people reading your code.  Failing that, use the constraint letters\n+that usually have very similar meanings across architectures.  The most\n+commonly used constraints are `m' and `r' (for memory and\n+general-purpose registers respectively; *note Simple Constraints::.),\n+and `I', usually the letter indicating the most common\n+immediate-constant format.\n+\n+   For each machine architecture, the `config/MACHINE.h' file defines\n+additional constraints.  These constraints are used by the compiler\n+itself for instruction generation, as well as for `asm' statements;\n+therefore, some of the constraints are not particularly interesting for\n+`asm'.  The constraints are defined through these macros:\n+\n+`REG_CLASS_FROM_LETTER'\n+     Register class constraints (usually lower case).\n+\n+`CONST_OK_FOR_LETTER_P'\n+     Immediate constant constraints, for non-floating point constants of\n+     word size or smaller precision (usually upper case).\n+\n+`CONST_DOUBLE_OK_FOR_LETTER_P'\n+     Immediate constant constraints, for all floating point constants\n+     and for constants of greater than word size precision (usually\n+     upper case).\n+\n+`EXTRA_CONSTRAINT'\n+     Special cases of registers or memory.  This macro is not required,\n+     and is only defined for some machines.\n+\n+   Inspecting these macro definitions in the compiler source for your\n+machine is the best way to be certain you have the right constraints.\n+However, here is a summary of the machine-dependent constraints\n+available on some particular machines.\n+\n+*ARM family--`arm.h'*\n+\n+    `f'\n+          Floating-point register\n+\n+    `F'\n+          One of the floating-point constants 0.0, 0.5, 1.0, 2.0, 3.0,\n+          4.0, 5.0 or 10.0\n+\n+    `G'\n+          Floating-point constant that would satisfy the constraint `F'\n+          if it were negated\n+\n+    `I'\n+          Integer that is valid as an immediate operand in a data\n+          processing instruction.  That is, an integer in the range 0\n+          to 255 rotated by a multiple of 2\n+\n+    `J'\n+          Integer in the range -4095 to 4095\n+\n+    `K'\n+          Integer that satisfies constraint `I' when inverted (ones\n+          complement)\n+\n+    `L'\n+          Integer that satisfies constraint `I' when negated (twos\n+          complement)\n+\n+    `M'\n+          Integer in the range 0 to 32\n+\n+    `Q'\n+          A memory reference where the exact address is in a single\n+          register (``m'' is preferable for `asm' statements)\n+\n+    `R'\n+          An item in the constant pool\n+\n+    `S'\n+          A symbol in the text segment of the current file\n+\n+*AMD 29000 family--`a29k.h'*\n+\n+    `l'\n+          Local register 0\n+\n+    `b'\n+          Byte Pointer (`BP') register\n+\n+    `q'\n+          `Q' register\n+\n+    `h'\n+          Special purpose register\n+\n+    `A'\n+          First accumulator register\n+\n+    `a'\n+          Other accumulator register\n+\n+    `f'\n+          Floating point register\n+\n+    `I'\n+          Constant greater than 0, less than 0x100\n+\n+    `J'\n+          Constant greater than 0, less than 0x10000\n+\n+    `K'\n+          Constant whose high 24 bits are on (1)\n+\n+    `L'\n+          16 bit constant whose high 8 bits are on (1)\n+\n+    `M'\n+          32 bit constant whose high 16 bits are on (1)\n+\n+    `N'\n+          32 bit negative constant that fits in 8 bits\n+\n+    `O'\n+          The constant 0x80000000 or, on the 29050, any 32 bit constant\n+          whose low 16 bits are 0.\n+\n+    `P'\n+          16 bit negative constant that fits in 8 bits\n+\n+    `G'\n+    `H'\n+          A floating point constant (in `asm' statements, use the\n+          machine independent `E' or `F' instead)\n+\n+*IBM RS6000--`rs6000.h'*\n+\n+    `b'\n+          Address base register\n+\n+    `f'\n+          Floating point register\n+\n+    `h'\n+          `MQ', `CTR', or `LINK' register\n+\n+    `q'\n+          `MQ' register\n+\n+    `c'\n+          `CTR' register\n+\n+    `l'\n+          `LINK' register\n+\n+    `x'\n+          `CR' register (condition register) number 0\n+\n+    `y'\n+          `CR' register (condition register)\n+\n+    `I'\n+          Signed 16 bit constant\n+\n+    `J'\n+          Constant whose low 16 bits are 0\n+\n+    `K'\n+          Constant whose high 16 bits are 0\n+\n+    `L'\n+          Constant suitable as a mask operand\n+\n+    `M'\n+          Constant larger than 31\n+\n+    `N'\n+          Exact power of 2\n+\n+    `O'\n+          Zero\n+\n+    `P'\n+          Constant whose negation is a signed 16 bit constant\n+\n+    `G'\n+          Floating point constant that can be loaded into a register\n+          with one instruction per word\n+\n+    `Q'\n+          Memory operand that is an offset from a register (`m' is\n+          preferable for `asm' statements)\n+\n+    `R'\n+          AIX TOC entry\n+\n+    `S'\n+          Windows NT SYMBOL_REF\n+\n+    `T'\n+          Windows NT LABEL_REF\n+\n+    `U'\n+          System V Release 4 small data area reference\n+\n+*Intel 386--`i386.h'*\n+\n+    `q'\n+          `a', `b', `c', or `d' register\n+\n+    `A'\n+          `a', or `d' register (for 64-bit ints)\n+\n+    `f'\n+          Floating point register\n+\n+    `t'\n+          First (top of stack) floating point register\n+\n+    `u'\n+          Second floating point register\n+\n+    `a'\n+          `a' register\n+\n+    `b'\n+          `b' register\n+\n+    `c'\n+          `c' register\n+\n+    `d'\n+          `d' register\n+\n+    `D'\n+          `di' register\n+\n+    `S'\n+          `si' register\n+\n+    `I'\n+          Constant in range 0 to 31 (for 32 bit shifts)\n+\n+    `J'\n+          Constant in range 0 to 63 (for 64 bit shifts)\n+\n+    `K'\n+          `0xff'\n+\n+    `L'\n+          `0xffff'\n+\n+    `M'\n+          0, 1, 2, or 3 (shifts for `lea' instruction)\n+\n+    `N'\n+          Constant in range 0 to 255 (for `out' instruction)\n+\n+    `G'\n+          Standard 80387 floating point constant\n+\n+*Intel 960--`i960.h'*\n+\n+    `f'\n+          Floating point register (`fp0' to `fp3')\n+\n+    `l'\n+          Local register (`r0' to `r15')\n+\n+    `b'\n+          Global register (`g0' to `g15')\n+\n+    `d'\n+          Any local or global register\n+\n+    `I'\n+          Integers from 0 to 31\n+\n+    `J'\n+          0\n+\n+    `K'\n+          Integers from -31 to 0\n+\n+    `G'\n+          Floating point 0\n+\n+    `H'\n+          Floating point 1\n+\n+*MIPS--`mips.h'*\n+\n+    `d'\n+          General-purpose integer register\n+\n+    `f'\n+          Floating-point register (if available)\n+\n+    `h'\n+          `Hi' register\n+\n+    `l'\n+          `Lo' register\n+\n+    `x'\n+          `Hi' or `Lo' register\n+\n+    `y'\n+          General-purpose integer register\n+\n+    `z'\n+          Floating-point status register\n+\n+    `I'\n+          Signed 16 bit constant (for arithmetic instructions)\n+\n+    `J'\n+          Zero\n+\n+    `K'\n+          Zero-extended 16-bit constant (for logic instructions)\n+\n+    `L'\n+          Constant with low 16 bits zero (can be loaded with `lui')\n+\n+    `M'\n+          32 bit constant which requires two instructions to load (a\n+          constant which is not `I', `K', or `L')\n+\n+    `N'\n+          Negative 16 bit constant\n+\n+    `O'\n+          Exact power of two\n+\n+    `P'\n+          Positive 16 bit constant\n+\n+    `G'\n+          Floating point zero\n+\n+    `Q'\n+          Memory reference that can be loaded with more than one\n+          instruction (`m' is preferable for `asm' statements)\n+\n+    `R'\n+          Memory reference that can be loaded with one instruction (`m'\n+          is preferable for `asm' statements)\n+\n+    `S'\n+          Memory reference in external OSF/rose PIC format (`m' is\n+          preferable for `asm' statements)\n+\n+*Motorola 680x0--`m68k.h'*\n+\n+    `a'\n+          Address register\n+\n+    `d'\n+          Data register\n+\n+    `f'\n+          68881 floating-point register, if available\n+\n+    `x'\n+          Sun FPA (floating-point) register, if available\n+\n+    `y'\n+          First 16 Sun FPA registers, if available\n+\n+    `I'\n+          Integer in the range 1 to 8\n+\n+    `J'\n+          16 bit signed number\n+\n+    `K'\n+          Signed number whose magnitude is greater than 0x80\n+\n+    `L'\n+          Integer in the range -8 to -1\n+\n+    `M'\n+          Signed number whose magnitude is greater than 0x100\n+\n+    `G'\n+          Floating point constant that is not a 68881 constant\n+\n+    `H'\n+          Floating point constant that can be used by Sun FPA\n+\n+*SPARC--`sparc.h'*\n+\n+    `f'\n+          Floating-point register that can hold 32 or 64 bit values.\n+\n+    `e'\n+          Floating-point register that can hold 64 or 128 bit values.\n+\n+    `I'\n+          Signed 13 bit constant\n+\n+    `J'\n+          Zero\n+\n+    `K'\n+          32 bit constant with the low 12 bits clear (a constant that\n+          can be loaded with the `sethi' instruction)\n+\n+    `G'\n+          Floating-point zero\n+\n+    `H'\n+          Signed 13 bit constant, sign-extended to 32 or 64 bits\n+\n+    `Q'\n+          Memory reference that can be loaded with one instruction\n+          (`m' is more appropriate for `asm' statements)\n+\n+    `S'\n+          Constant, or memory address\n+\n+    `T'\n+          Memory address aligned to an 8-byte boundary\n+\n+    `U'\n+          Even register\n+\n+\u001f\n+File: gcc.info,  Node: No Constraints,  Prev: Machine Constraints,  Up: Constraints\n+\n+Not Using Constraints\n+---------------------\n+\n+   Some machines are so clean that operand constraints are not\n+required.  For example, on the Vax, an operand valid in one context is\n+valid in any other context.  On such a machine, every operand\n+constraint would be `g', excepting only operands of \"load address\"\n+instructions which are written as if they referred to a memory\n+location's contents but actual refer to its address.  They would have\n+constraint `p'.\n+\n+   For such machines, instead of writing `g' and `p' for all the\n+constraints, you can choose to write a description with empty\n+constraints.  Then you write `\"\"' for the constraint in every\n+`match_operand'.  Address operands are identified by writing an\n+`address' expression around the `match_operand', not by their\n+constraints.\n+\n+   When the machine description has just empty constraints, certain\n+parts of compilation are skipped, making the compiler faster.  However,\n+few machines actually do not need constraints; all machine descriptions\n+now in existence use constraints.\n+"}, {"sha": "abec34e35deca23e7d1f89db7501f6de74cd4957", "filename": "gcc/gcc.info-18", "status": "added", "additions": 1031, "deletions": 0, "changes": 1031, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-18", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-18", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-18?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1031 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Standard Names,  Next: Pattern Ordering,  Prev: Constraints,  Up: Machine Desc\n+\n+Standard Pattern Names For Generation\n+=====================================\n+\n+   Here is a table of the instruction names that are meaningful in the\n+RTL generation pass of the compiler.  Giving one of these names to an\n+instruction pattern tells the RTL generation pass that it can use the\n+pattern in to accomplish a certain task.\n+\n+`movM'\n+     Here M stands for a two-letter machine mode name, in lower case.\n+     This instruction pattern moves data with that machine mode from\n+     operand 1 to operand 0.  For example, `movsi' moves full-word data.\n+\n+     If operand 0 is a `subreg' with mode M of a register whose own\n+     mode is wider than M, the effect of this instruction is to store\n+     the specified value in the part of the register that corresponds\n+     to mode M.  The effect on the rest of the register is undefined.\n+\n+     This class of patterns is special in several ways.  First of all,\n+     each of these names *must* be defined, because there is no other\n+     way to copy a datum from one place to another.\n+\n+     Second, these patterns are not used solely in the RTL generation\n+     pass.  Even the reload pass can generate move insns to copy values\n+     from stack slots into temporary registers.  When it does so, one\n+     of the operands is a hard register and the other is an operand\n+     that can need to be reloaded into a register.\n+\n+     Therefore, when given such a pair of operands, the pattern must\n+     generate RTL which needs no reloading and needs no temporary\n+     registers--no registers other than the operands.  For example, if\n+     you support the pattern with a `define_expand', then in such a\n+     case the `define_expand' mustn't call `force_reg' or any other such\n+     function which might generate new pseudo registers.\n+\n+     This requirement exists even for subword modes on a RISC machine\n+     where fetching those modes from memory normally requires several\n+     insns and some temporary registers.  Look in `spur.md' to see how\n+     the requirement can be satisfied.\n+\n+     During reload a memory reference with an invalid address may be\n+     passed as an operand.  Such an address will be replaced with a\n+     valid address later in the reload pass.  In this case, nothing may\n+     be done with the address except to use it as it stands.  If it is\n+     copied, it will not be replaced with a valid address.  No attempt\n+     should be made to make such an address into a valid address and no\n+     routine (such as `change_address') that will do so may be called.\n+     Note that `general_operand' will fail when applied to such an\n+     address.\n+\n+     The global variable `reload_in_progress' (which must be explicitly\n+     declared if required) can be used to determine whether such special\n+     handling is required.\n+\n+     The variety of operands that have reloads depends on the rest of\n+     the machine description, but typically on a RISC machine these can\n+     only be pseudo registers that did not get hard registers, while on\n+     other machines explicit memory references will get optional\n+     reloads.\n+\n+     If a scratch register is required to move an object to or from\n+     memory, it can be allocated using `gen_reg_rtx' prior to reload.\n+     But this is impossible during and after reload.  If there are\n+     cases needing scratch registers after reload, you must define\n+     `SECONDARY_INPUT_RELOAD_CLASS' and perhaps also\n+     `SECONDARY_OUTPUT_RELOAD_CLASS' to detect them, and provide\n+     patterns `reload_inM' or `reload_outM' to handle them.  *Note\n+     Register Classes::.\n+\n+     The constraints on a `moveM' must permit moving any hard register\n+     to any other hard register provided that `HARD_REGNO_MODE_OK'\n+     permits mode M in both registers and `REGISTER_MOVE_COST' applied\n+     to their classes returns a value of 2.\n+\n+     It is obligatory to support floating point `moveM' instructions\n+     into and out of any registers that can hold fixed point values,\n+     because unions and structures (which have modes `SImode' or\n+     `DImode') can be in those registers and they may have floating\n+     point members.\n+\n+     There may also be a need to support fixed point `moveM'\n+     instructions in and out of floating point registers.\n+     Unfortunately, I have forgotten why this was so, and I don't know\n+     whether it is still true.  If `HARD_REGNO_MODE_OK' rejects fixed\n+     point values in floating point registers, then the constraints of\n+     the fixed point `moveM' instructions must be designed to avoid\n+     ever trying to reload into a floating point register.\n+\n+`reload_inM'\n+`reload_outM'\n+     Like `movM', but used when a scratch register is required to move\n+     between operand 0 and operand 1.  Operand 2 describes the scratch\n+     register.  See the discussion of the `SECONDARY_RELOAD_CLASS'\n+     macro in *note Register Classes::..\n+\n+`movstrictM'\n+     Like `movM' except that if operand 0 is a `subreg' with mode M of\n+     a register whose natural mode is wider, the `movstrictM'\n+     instruction is guaranteed not to alter any of the register except\n+     the part which belongs to mode M.\n+\n+`load_multiple'\n+     Load several consecutive memory locations into consecutive\n+     registers.  Operand 0 is the first of the consecutive registers,\n+     operand 1 is the first memory location, and operand 2 is a\n+     constant: the number of consecutive registers.\n+\n+     Define this only if the target machine really has such an\n+     instruction; do not define this if the most efficient way of\n+     loading consecutive registers from memory is to do them one at a\n+     time.\n+\n+     On some machines, there are restrictions as to which consecutive\n+     registers can be stored into memory, such as particular starting or\n+     ending register numbers or only a range of valid counts.  For those\n+     machines, use a `define_expand' (*note Expander Definitions::.)\n+     and make the pattern fail if the restrictions are not met.\n+\n+     Write the generated insn as a `parallel' with elements being a\n+     `set' of one register from the appropriate memory location (you may\n+     also need `use' or `clobber' elements).  Use a `match_parallel'\n+     (*note RTL Template::.) to recognize the insn.  See `a29k.md' and\n+     `rs6000.md' for examples of the use of this insn pattern.\n+\n+`store_multiple'\n+     Similar to `load_multiple', but store several consecutive registers\n+     into consecutive memory locations.  Operand 0 is the first of the\n+     consecutive memory locations, operand 1 is the first register, and\n+     operand 2 is a constant: the number of consecutive registers.\n+\n+`addM3'\n+     Add operand 2 and operand 1, storing the result in operand 0.  All\n+     operands must have mode M.  This can be used even on two-address\n+     machines, by means of constraints requiring operands 1 and 0 to be\n+     the same location.\n+\n+`subM3', `mulM3'\n+`divM3', `udivM3', `modM3', `umodM3'\n+`sminM3', `smaxM3', `uminM3', `umaxM3'\n+`andM3', `iorM3', `xorM3'\n+     Similar, for other arithmetic operations.\n+\n+`mulhisi3'\n+     Multiply operands 1 and 2, which have mode `HImode', and store a\n+     `SImode' product in operand 0.\n+\n+`mulqihi3', `mulsidi3'\n+     Similar widening-multiplication instructions of other widths.\n+\n+`umulqihi3', `umulhisi3', `umulsidi3'\n+     Similar widening-multiplication instructions that do unsigned\n+     multiplication.\n+\n+`mulM3_highpart'\n+     Perform a signed multiplication of operands 1 and 2, which have\n+     mode M, and store the most significant half of the product in\n+     operand 0.  The least significant half of the product is discarded.\n+\n+`umulM3_highpart'\n+     Similar, but the multiplication is unsigned.\n+\n+`divmodM4'\n+     Signed division that produces both a quotient and a remainder.\n+     Operand 1 is divided by operand 2 to produce a quotient stored in\n+     operand 0 and a remainder stored in operand 3.\n+\n+     For machines with an instruction that produces both a quotient and\n+     a remainder, provide a pattern for `divmodM4' but do not provide\n+     patterns for `divM3' and `modM3'.  This allows optimization in the\n+     relatively common case when both the quotient and remainder are\n+     computed.\n+\n+     If an instruction that just produces a quotient or just a remainder\n+     exists and is more efficient than the instruction that produces\n+     both, write the output routine of `divmodM4' to call\n+     `find_reg_note' and look for a `REG_UNUSED' note on the quotient\n+     or remainder and generate the appropriate instruction.\n+\n+`udivmodM4'\n+     Similar, but does unsigned division.\n+\n+`ashlM3'\n+     Arithmetic-shift operand 1 left by a number of bits specified by\n+     operand 2, and store the result in operand 0.  Here M is the mode\n+     of operand 0 and operand 1; operand 2's mode is specified by the\n+     instruction pattern, and the compiler will convert the operand to\n+     that mode before generating the instruction.\n+\n+`ashrM3', `lshrM3', `rotlM3', `rotrM3'\n+     Other shift and rotate instructions, analogous to the `ashlM3'\n+     instructions.\n+\n+`negM2'\n+     Negate operand 1 and store the result in operand 0.\n+\n+`absM2'\n+     Store the absolute value of operand 1 into operand 0.\n+\n+`sqrtM2'\n+     Store the square root of operand 1 into operand 0.\n+\n+     The `sqrt' built-in function of C always uses the mode which\n+     corresponds to the C data type `double'.\n+\n+`ffsM2'\n+     Store into operand 0 one plus the index of the least significant\n+     1-bit of operand 1.  If operand 1 is zero, store zero.  M is the\n+     mode of operand 0; operand 1's mode is specified by the instruction\n+     pattern, and the compiler will convert the operand to that mode\n+     before generating the instruction.\n+\n+     The `ffs' built-in function of C always uses the mode which\n+     corresponds to the C data type `int'.\n+\n+`one_cmplM2'\n+     Store the bitwise-complement of operand 1 into operand 0.\n+\n+`cmpM'\n+     Compare operand 0 and operand 1, and set the condition codes.  The\n+     RTL pattern should look like this:\n+\n+          (set (cc0) (compare (match_operand:M 0 ...)\n+                              (match_operand:M 1 ...)))\n+\n+`tstM'\n+     Compare operand 0 against zero, and set the condition codes.  The\n+     RTL pattern should look like this:\n+\n+          (set (cc0) (match_operand:M 0 ...))\n+\n+     `tstM' patterns should not be defined for machines that do not use\n+     `(cc0)'.  Doing so would confuse the optimizer since it would no\n+     longer be clear which `set' operations were comparisons.  The\n+     `cmpM' patterns should be used instead.\n+\n+`movstrM'\n+     Block move instruction.  The addresses of the destination and\n+     source strings are the first two operands, and both are in mode\n+     `Pmode'.  The number of bytes to move is the third operand, in\n+     mode M.\n+\n+     The fourth operand is the known shared alignment of the source and\n+     destination, in the form of a `const_int' rtx.  Thus, if the\n+     compiler knows that both source and destination are word-aligned,\n+     it may provide the value 4 for this operand.\n+\n+     These patterns need not give special consideration to the\n+     possibility that the source and destination strings might overlap.\n+\n+`clrstrM'\n+     Block clear instruction.  The addresses of the destination string\n+     is the first operand, in mode `Pmode'.  The number of bytes to\n+     clear is the second operand, in mode M.\n+\n+     The third operand is the known alignment of the destination, in\n+     the form of a `const_int' rtx.  Thus, if the compiler knows that\n+     the destination is word-aligned, it may provide the value 4 for\n+     this operand.\n+\n+`cmpstrM'\n+     Block compare instruction, with five operands.  Operand 0 is the\n+     output; it has mode M.  The remaining four operands are like the\n+     operands of `movstrM'.  The two memory blocks specified are\n+     compared byte by byte in lexicographic order.  The effect of the\n+     instruction is to store a value in operand 0 whose sign indicates\n+     the result of the comparison.\n+\n+`strlenM'\n+     Compute the length of a string, with three operands.  Operand 0 is\n+     the result (of mode M), operand 1 is a `mem' referring to the\n+     first character of the string, operand 2 is the character to\n+     search for (normally zero), and operand 3 is a constant describing\n+     the known alignment of the beginning of the string.\n+\n+`floatMN2'\n+     Convert signed integer operand 1 (valid for fixed point mode M) to\n+     floating point mode N and store in operand 0 (which has mode N).\n+\n+`floatunsMN2'\n+     Convert unsigned integer operand 1 (valid for fixed point mode M)\n+     to floating point mode N and store in operand 0 (which has mode N).\n+\n+`fixMN2'\n+     Convert operand 1 (valid for floating point mode M) to fixed point\n+     mode N as a signed number and store in operand 0 (which has mode\n+     N).  This instruction's result is defined only when the value of\n+     operand 1 is an integer.\n+\n+`fixunsMN2'\n+     Convert operand 1 (valid for floating point mode M) to fixed point\n+     mode N as an unsigned number and store in operand 0 (which has\n+     mode N).  This instruction's result is defined only when the value\n+     of operand 1 is an integer.\n+\n+`ftruncM2'\n+     Convert operand 1 (valid for floating point mode M) to an integer\n+     value, still represented in floating point mode M, and store it in\n+     operand 0 (valid for floating point mode M).\n+\n+`fix_truncMN2'\n+     Like `fixMN2' but works for any floating point value of mode M by\n+     converting the value to an integer.\n+\n+`fixuns_truncMN2'\n+     Like `fixunsMN2' but works for any floating point value of mode M\n+     by converting the value to an integer.\n+\n+`truncMN2'\n+     Truncate operand 1 (valid for mode M) to mode N and store in\n+     operand 0 (which has mode N).  Both modes must be fixed point or\n+     both floating point.\n+\n+`extendMN2'\n+     Sign-extend operand 1 (valid for mode M) to mode N and store in\n+     operand 0 (which has mode N).  Both modes must be fixed point or\n+     both floating point.\n+\n+`zero_extendMN2'\n+     Zero-extend operand 1 (valid for mode M) to mode N and store in\n+     operand 0 (which has mode N).  Both modes must be fixed point.\n+\n+`extv'\n+     Extract a bit field from operand 1 (a register or memory operand),\n+     where operand 2 specifies the width in bits and operand 3 the\n+     starting bit, and store it in operand 0.  Operand 0 must have mode\n+     `word_mode'.  Operand 1 may have mode `byte_mode' or `word_mode';\n+     often `word_mode' is allowed only for registers.  Operands 2 and 3\n+     must be valid for `word_mode'.\n+\n+     The RTL generation pass generates this instruction only with\n+     constants for operands 2 and 3.\n+\n+     The bit-field value is sign-extended to a full word integer before\n+     it is stored in operand 0.\n+\n+`extzv'\n+     Like `extv' except that the bit-field value is zero-extended.\n+\n+`insv'\n+     Store operand 3 (which must be valid for `word_mode') into a bit\n+     field in operand 0, where operand 1 specifies the width in bits and\n+     operand 2 the starting bit.  Operand 0 may have mode `byte_mode' or\n+     `word_mode'; often `word_mode' is allowed only for registers.\n+     Operands 1 and 2 must be valid for `word_mode'.\n+\n+     The RTL generation pass generates this instruction only with\n+     constants for operands 1 and 2.\n+\n+`movMODEcc'\n+     Conditionally move operand 2 or operand 3 into operand 0 according\n+     to the comparison in operand 1.  If the comparison is true,\n+     operand 2 is moved into operand 0, otherwise operand 3 is moved.\n+\n+     The mode of the operands being compared need not be the same as\n+     the operands being moved.  Some machines, sparc64 for example,\n+     have instructions that conditionally move an integer value based\n+     on the floating point condition codes and vice versa.\n+\n+     If the machine does not have conditional move instructions, do not\n+     define these patterns.\n+\n+`sCOND'\n+     Store zero or nonzero in the operand according to the condition\n+     codes.  Value stored is nonzero iff the condition COND is true.\n+     COND is the name of a comparison operation expression code, such\n+     as `eq', `lt' or `leu'.\n+\n+     You specify the mode that the operand must have when you write the\n+     `match_operand' expression.  The compiler automatically sees which\n+     mode you have used and supplies an operand of that mode.\n+\n+     The value stored for a true condition must have 1 as its low bit,\n+     or else must be negative.  Otherwise the instruction is not\n+     suitable and you should omit it from the machine description.  You\n+     describe to the compiler exactly which value is stored by defining\n+     the macro `STORE_FLAG_VALUE' (*note Misc::.).  If a description\n+     cannot be found that can be used for all the `sCOND' patterns, you\n+     should omit those operations from the machine description.\n+\n+     These operations may fail, but should do so only in relatively\n+     uncommon cases; if they would fail for common cases involving\n+     integer comparisons, it is best to omit these patterns.\n+\n+     If these operations are omitted, the compiler will usually\n+     generate code that copies the constant one to the target and\n+     branches around an assignment of zero to the target.  If this code\n+     is more efficient than the potential instructions used for the\n+     `sCOND' pattern followed by those required to convert the result\n+     into a 1 or a zero in `SImode', you should omit the `sCOND'\n+     operations from the machine description.\n+\n+`bCOND'\n+     Conditional branch instruction.  Operand 0 is a `label_ref' that\n+     refers to the label to jump to.  Jump if the condition codes meet\n+     condition COND.\n+\n+     Some machines do not follow the model assumed here where a\n+     comparison instruction is followed by a conditional branch\n+     instruction.  In that case, the `cmpM' (and `tstM') patterns should\n+     simply store the operands away and generate all the required insns\n+     in a `define_expand' (*note Expander Definitions::.) for the\n+     conditional branch operations.  All calls to expand `bCOND'\n+     patterns are immediately preceded by calls to expand either a\n+     `cmpM' pattern or a `tstM' pattern.\n+\n+     Machines that use a pseudo register for the condition code value,\n+     or where the mode used for the comparison depends on the condition\n+     being tested, should also use the above mechanism.  *Note Jump\n+     Patterns::\n+\n+     The above discussion also applies to the `movMODEcc' and `sCOND'\n+     patterns.\n+\n+`call'\n+     Subroutine call instruction returning no value.  Operand 0 is the\n+     function to call; operand 1 is the number of bytes of arguments\n+     pushed (in mode `SImode', except it is normally a `const_int');\n+     operand 2 is the number of registers used as operands.\n+\n+     On most machines, operand 2 is not actually stored into the RTL\n+     pattern.  It is supplied for the sake of some RISC machines which\n+     need to put this information into the assembler code; they can put\n+     it in the RTL instead of operand 1.\n+\n+     Operand 0 should be a `mem' RTX whose address is the address of the\n+     function.  Note, however, that this address can be a `symbol_ref'\n+     expression even if it would not be a legitimate memory address on\n+     the target machine.  If it is also not a valid argument for a call\n+     instruction, the pattern for this operation should be a\n+     `define_expand' (*note Expander Definitions::.) that places the\n+     address into a register and uses that register in the call\n+     instruction.\n+\n+`call_value'\n+     Subroutine call instruction returning a value.  Operand 0 is the\n+     hard register in which the value is returned.  There are three more\n+     operands, the same as the three operands of the `call' instruction\n+     (but with numbers increased by one).\n+\n+     Subroutines that return `BLKmode' objects use the `call' insn.\n+\n+`call_pop', `call_value_pop'\n+     Similar to `call' and `call_value', except used if defined and if\n+     `RETURN_POPS_ARGS' is non-zero.  They should emit a `parallel'\n+     that contains both the function call and a `set' to indicate the\n+     adjustment made to the frame pointer.\n+\n+     For machines where `RETURN_POPS_ARGS' can be non-zero, the use of\n+     these patterns increases the number of functions for which the\n+     frame pointer can be eliminated, if desired.\n+\n+`untyped_call'\n+     Subroutine call instruction returning a value of any type.\n+     Operand 0 is the function to call; operand 1 is a memory location\n+     where the result of calling the function is to be stored; operand\n+     2 is a `parallel' expression where each element is a `set'\n+     expression that indicates the saving of a function return value\n+     into the result block.\n+\n+     This instruction pattern should be defined to support\n+     `__builtin_apply' on machines where special instructions are needed\n+     to call a subroutine with arbitrary arguments or to save the value\n+     returned.  This instruction pattern is required on machines that\n+     have multiple registers that can hold a return value (i.e.\n+     `FUNCTION_VALUE_REGNO_P' is true for more than one register).\n+\n+`return'\n+     Subroutine return instruction.  This instruction pattern name\n+     should be defined only if a single instruction can do all the work\n+     of returning from a function.\n+\n+     Like the `movM' patterns, this pattern is also used after the RTL\n+     generation phase.  In this case it is to support machines where\n+     multiple instructions are usually needed to return from a\n+     function, but some class of functions only requires one\n+     instruction to implement a return.  Normally, the applicable\n+     functions are those which do not need to save any registers or\n+     allocate stack space.\n+\n+     For such machines, the condition specified in this pattern should\n+     only be true when `reload_completed' is non-zero and the function's\n+     epilogue would only be a single instruction.  For machines with\n+     register windows, the routine `leaf_function_p' may be used to\n+     determine if a register window push is required.\n+\n+     Machines that have conditional return instructions should define\n+     patterns such as\n+\n+          (define_insn \"\"\n+            [(set (pc)\n+                  (if_then_else (match_operator\n+                                   0 \"comparison_operator\"\n+                                   [(cc0) (const_int 0)])\n+                                (return)\n+                                (pc)))]\n+            \"CONDITION\"\n+            \"...\")\n+\n+     where CONDITION would normally be the same condition specified on\n+     the named `return' pattern.\n+\n+`untyped_return'\n+     Untyped subroutine return instruction.  This instruction pattern\n+     should be defined to support `__builtin_return' on machines where\n+     special instructions are needed to return a value of any type.\n+\n+     Operand 0 is a memory location where the result of calling a\n+     function with `__builtin_apply' is stored; operand 1 is a\n+     `parallel' expression where each element is a `set' expression\n+     that indicates the restoring of a function return value from the\n+     result block.\n+\n+`nop'\n+     No-op instruction.  This instruction pattern name should always be\n+     defined to output a no-op in assembler code.  `(const_int 0)' will\n+     do as an RTL pattern.\n+\n+`indirect_jump'\n+     An instruction to jump to an address which is operand zero.  This\n+     pattern name is mandatory on all machines.\n+\n+`casesi'\n+     Instruction to jump through a dispatch table, including bounds\n+     checking.  This instruction takes five operands:\n+\n+       1. The index to dispatch on, which has mode `SImode'.\n+\n+       2. The lower bound for indices in the table, an integer constant.\n+\n+       3. The total range of indices in the table--the largest index\n+          minus the smallest one (both inclusive).\n+\n+       4. A label that precedes the table itself.\n+\n+       5. A label to jump to if the index has a value outside the\n+          bounds.  (If the machine-description macro\n+          `CASE_DROPS_THROUGH' is defined, then an out-of-bounds index\n+          drops through to the code following the jump table instead of\n+          jumping to this label.  In that case, this label is not\n+          actually used by the `casesi' instruction, but it is always\n+          provided as an operand.)\n+\n+     The table is a `addr_vec' or `addr_diff_vec' inside of a\n+     `jump_insn'.  The number of elements in the table is one plus the\n+     difference between the upper bound and the lower bound.\n+\n+`tablejump'\n+     Instruction to jump to a variable address.  This is a low-level\n+     capability which can be used to implement a dispatch table when\n+     there is no `casesi' pattern.\n+\n+     This pattern requires two operands: the address or offset, and a\n+     label which should immediately precede the jump table.  If the\n+     macro `CASE_VECTOR_PC_RELATIVE' is defined then the first operand\n+     is an offset which counts from the address of the table;\n+     otherwise, it is an absolute address to jump to.  In either case,\n+     the first operand has mode `Pmode'.\n+\n+     The `tablejump' insn is always the last insn before the jump table\n+     it uses.  Its assembler code normally has no need to use the\n+     second operand, but you should incorporate it in the RTL pattern so\n+     that the jump optimizer will not delete the table as unreachable\n+     code.\n+\n+`canonicalize_funcptr_for_compare'\n+     Canonicalize the function pointer in operand 1 and store the result\n+     into operand 0.\n+\n+     Operand 0 is always a `reg' and has mode `Pmode'; operand 1 may be\n+     a `reg', `mem', `symbol_ref', `const_int', etc and also has mode\n+     `Pmode'.\n+\n+     Canonicalization of a function pointer usually involves computing\n+     the address of the function which would be called if the function\n+     pointer were used in an indirect call.\n+\n+     Only define this pattern if function pointers on the target machine\n+     can have different values but still call the same function when\n+     used in an indirect call.\n+\n+`save_stack_block'\n+`save_stack_function'\n+`save_stack_nonlocal'\n+`restore_stack_block'\n+`restore_stack_function'\n+`restore_stack_nonlocal'\n+     Most machines save and restore the stack pointer by copying it to\n+     or from an object of mode `Pmode'.  Do not define these patterns on\n+     such machines.\n+\n+     Some machines require special handling for stack pointer saves and\n+     restores.  On those machines, define the patterns corresponding to\n+     the non-standard cases by using a `define_expand' (*note Expander\n+     Definitions::.) that produces the required insns.  The three types\n+     of saves and restores are:\n+\n+       1. `save_stack_block' saves the stack pointer at the start of a\n+          block that allocates a variable-sized object, and\n+          `restore_stack_block' restores the stack pointer when the\n+          block is exited.\n+\n+       2. `save_stack_function' and `restore_stack_function' do a\n+          similar job for the outermost block of a function and are\n+          used when the function allocates variable-sized objects or\n+          calls `alloca'.  Only the epilogue uses the restored stack\n+          pointer, allowing a simpler save or restore sequence on some\n+          machines.\n+\n+       3. `save_stack_nonlocal' is used in functions that contain labels\n+          branched to by nested functions.  It saves the stack pointer\n+          in such a way that the inner function can use\n+          `restore_stack_nonlocal' to restore the stack pointer.  The\n+          compiler generates code to restore the frame and argument\n+          pointer registers, but some machines require saving and\n+          restoring additional data such as register window information\n+          or stack backchains.  Place insns in these patterns to save\n+          and restore any such required data.\n+\n+     When saving the stack pointer, operand 0 is the save area and\n+     operand 1 is the stack pointer.  The mode used to allocate the\n+     save area is the mode of operand 0.  You must specify an integral\n+     mode, or `VOIDmode' if no save area is needed for a particular\n+     type of save (either because no save is needed or because a\n+     machine-specific save area can be used).  Operand 0 is the stack\n+     pointer and operand 1 is the save area for restore operations.  If\n+     `save_stack_block' is defined, operand 0 must not be `VOIDmode'\n+     since these saves can be arbitrarily nested.\n+\n+     A save area is a `mem' that is at a constant offset from\n+     `virtual_stack_vars_rtx' when the stack pointer is saved for use by\n+     nonlocal gotos and a `reg' in the other two cases.\n+\n+`allocate_stack'\n+     Subtract (or add if `STACK_GROWS_DOWNWARD' is undefined) operand 1\n+     from the stack pointer to create space for dynamically allocated\n+     data.\n+\n+     Store the resultant pointer to this space into operand 0.  If you\n+     are allocating space from the main stack, do this by emitting a\n+     move insn to copy `virtual_stack_dynamic_rtx' to operand 0.  If\n+     you are allocating the space elsewhere, generate code to copy the\n+     location of the space to operand 0.  In the latter case, you must\n+     ensure this space gets freed when the correspoinding space on the\n+     main stack is free.\n+\n+     Do not define this pattern if all that must be done is the\n+     subtraction.  Some machines require other operations such as stack\n+     probes or maintaining the back chain.  Define this pattern to emit\n+     those operations in addition to updating the stack pointer.\n+\n+`probe'\n+     Some machines require instructions to be executed after space is\n+     allocated from the stack, for example to generate a reference at\n+     the bottom of the stack.\n+\n+     If you need to emit instructions before the stack has been\n+     adjusted, put them into the `allocate_stack' pattern.  Otherwise,\n+     define this pattern to emit the required instructions.\n+\n+     No operands are provided.\n+\n+`check_stack'\n+     If stack checking cannot be done on your system by probing the\n+     stack with a load or store instruction (*note Stack Checking::.),\n+     define this pattern to perform the needed check and signaling an\n+     error if the stack has overflowed.  The single operand is the\n+     location in the stack furthest from the current stack pointer that\n+     you need to validate.  Normally, on machines where this pattern is\n+     needed, you would obtain the stack limit from a global or\n+     thread-specific variable or register.\n+\n+`nonlocal_goto'\n+     Emit code to generate a non-local goto, e.g., a jump from one\n+     function to a label in an outer function.  This pattern has four\n+     arguments, each representing a value to be used in the jump.  The\n+     first argument is to be loadedd into the frame pointer, the second\n+     is the address to branch to (code to dispatch to the actual label),\n+     the third is the address of a location where the stack is saved,\n+     and the last is the address of the label, to be placed in the\n+     location for the incoming static chain.\n+\n+     On most machines you need not define this pattern, since GNU CC\n+     will already generate the correct code, which is to load the frame\n+     pointer and static chain, restore the stack (using the\n+     `restore_stack_nonlocal' pattern, if defined), and jump indirectly\n+     to the dispatcher.  You need only define this pattern if this code\n+     will not work on your machine.\n+\n+`nonlocal_goto_receiver'\n+     This pattern, if defined, contains code needed at the target of a\n+     nonlocal goto after the code already generated by GNU CC.  You\n+     will not normally need to define this pattern.  A typical reason\n+     why you might need this pattern is if some value, such as a\n+     pointer to a global table, must be restored when the frame pointer\n+     is restored.  There are no arguments.\n+\n+`exception_receiver'\n+     This pattern, if defined, contains code needed at the site of an\n+     exception handler that isn't needed at the site of a nonlocal\n+     goto.  You will not normally need to define this pattern.  A\n+     typical reason why you might need this pattern is if some value,\n+     such as a pointer to a global table, must be restored after\n+     control flow is branched to the handler of an exception.  There\n+     are no arguments.\n+\n+\u001f\n+File: gcc.info,  Node: Pattern Ordering,  Next: Dependent Patterns,  Prev: Standard Names,  Up: Machine Desc\n+\n+When the Order of Patterns Matters\n+==================================\n+\n+   Sometimes an insn can match more than one instruction pattern.  Then\n+the pattern that appears first in the machine description is the one\n+used.  Therefore, more specific patterns (patterns that will match\n+fewer things) and faster instructions (those that will produce better\n+code when they do match) should usually go first in the description.\n+\n+   In some cases the effect of ordering the patterns can be used to hide\n+a pattern when it is not valid.  For example, the 68000 has an\n+instruction for converting a fullword to floating point and another for\n+converting a byte to floating point.  An instruction converting an\n+integer to floating point could match either one.  We put the pattern\n+to convert the fullword first to make sure that one will be used rather\n+than the other.  (Otherwise a large integer might be generated as a\n+single-byte immediate quantity, which would not work.)  Instead of\n+using this pattern ordering it would be possible to make the pattern\n+for convert-a-byte smart enough to deal properly with any constant\n+value.\n+\n+\u001f\n+File: gcc.info,  Node: Dependent Patterns,  Next: Jump Patterns,  Prev: Pattern Ordering,  Up: Machine Desc\n+\n+Interdependence of Patterns\n+===========================\n+\n+   Every machine description must have a named pattern for each of the\n+conditional branch names `bCOND'.  The recognition template must always\n+have the form\n+\n+     (set (pc)\n+          (if_then_else (COND (cc0) (const_int 0))\n+                        (label_ref (match_operand 0 \"\" \"\"))\n+                        (pc)))\n+\n+In addition, every machine description must have an anonymous pattern\n+for each of the possible reverse-conditional branches.  Their templates\n+look like\n+\n+     (set (pc)\n+          (if_then_else (COND (cc0) (const_int 0))\n+                        (pc)\n+                        (label_ref (match_operand 0 \"\" \"\"))))\n+\n+They are necessary because jump optimization can turn direct-conditional\n+branches into reverse-conditional branches.\n+\n+   It is often convenient to use the `match_operator' construct to\n+reduce the number of patterns that must be specified for branches.  For\n+example,\n+\n+     (define_insn \"\"\n+       [(set (pc)\n+             (if_then_else (match_operator 0 \"comparison_operator\"\n+                                           [(cc0) (const_int 0)])\n+                           (pc)\n+                           (label_ref (match_operand 1 \"\" \"\"))))]\n+       \"CONDITION\"\n+       \"...\")\n+\n+   In some cases machines support instructions identical except for the\n+machine mode of one or more operands.  For example, there may be\n+\"sign-extend halfword\" and \"sign-extend byte\" instructions whose\n+patterns are\n+\n+     (set (match_operand:SI 0 ...)\n+          (extend:SI (match_operand:HI 1 ...)))\n+     \n+     (set (match_operand:SI 0 ...)\n+          (extend:SI (match_operand:QI 1 ...)))\n+\n+Constant integers do not specify a machine mode, so an instruction to\n+extend a constant value could match either pattern.  The pattern it\n+actually will match is the one that appears first in the file.  For\n+correct results, this must be the one for the widest possible mode\n+(`HImode', here).  If the pattern matches the `QImode' instruction, the\n+results will be incorrect if the constant value does not actually fit\n+that mode.\n+\n+   Such instructions to extend constants are rarely generated because\n+they are optimized away, but they do occasionally happen in nonoptimized\n+compilations.\n+\n+   If a constraint in a pattern allows a constant, the reload pass may\n+replace a register with a constant permitted by the constraint in some\n+cases.  Similarly for memory references.  Because of this substitution,\n+you should not provide separate patterns for increment and decrement\n+instructions.  Instead, they should be generated from the same pattern\n+that supports register-register add insns by examining the operands and\n+generating the appropriate machine instruction.\n+\n+\u001f\n+File: gcc.info,  Node: Jump Patterns,  Next: Insn Canonicalizations,  Prev: Dependent Patterns,  Up: Machine Desc\n+\n+Defining Jump Instruction Patterns\n+==================================\n+\n+   For most machines, GNU CC assumes that the machine has a condition\n+code.  A comparison insn sets the condition code, recording the results\n+of both signed and unsigned comparison of the given operands.  A\n+separate branch insn tests the condition code and branches or not\n+according its value.  The branch insns come in distinct signed and\n+unsigned flavors.  Many common machines, such as the Vax, the 68000 and\n+the 32000, work this way.\n+\n+   Some machines have distinct signed and unsigned compare\n+instructions, and only one set of conditional branch instructions.  The\n+easiest way to handle these machines is to treat them just like the\n+others until the final stage where assembly code is written.  At this\n+time, when outputting code for the compare instruction, peek ahead at\n+the following branch using `next_cc0_user (insn)'.  (The variable\n+`insn' refers to the insn being output, in the output-writing code in\n+an instruction pattern.)  If the RTL says that is an unsigned branch,\n+output an unsigned compare; otherwise output a signed compare.  When\n+the branch itself is output, you can treat signed and unsigned branches\n+identically.\n+\n+   The reason you can do this is that GNU CC always generates a pair of\n+consecutive RTL insns, possibly separated by `note' insns, one to set\n+the condition code and one to test it, and keeps the pair inviolate\n+until the end.\n+\n+   To go with this technique, you must define the machine-description\n+macro `NOTICE_UPDATE_CC' to do `CC_STATUS_INIT'; in other words, no\n+compare instruction is superfluous.\n+\n+   Some machines have compare-and-branch instructions and no condition\n+code.  A similar technique works for them.  When it is time to \"output\"\n+a compare instruction, record its operands in two static variables.\n+When outputting the branch-on-condition-code instruction that follows,\n+actually output a compare-and-branch instruction that uses the\n+remembered operands.\n+\n+   It also works to define patterns for compare-and-branch instructions.\n+In optimizing compilation, the pair of compare and branch instructions\n+will be combined according to these patterns.  But this does not happen\n+if optimization is not requested.  So you must use one of the solutions\n+above in addition to any special patterns you define.\n+\n+   In many RISC machines, most instructions do not affect the condition\n+code and there may not even be a separate condition code register.  On\n+these machines, the restriction that the definition and use of the\n+condition code be adjacent insns is not necessary and can prevent\n+important optimizations.  For example, on the IBM RS/6000, there is a\n+delay for taken branches unless the condition code register is set three\n+instructions earlier than the conditional branch.  The instruction\n+scheduler cannot perform this optimization if it is not permitted to\n+separate the definition and use of the condition code register.\n+\n+   On these machines, do not use `(cc0)', but instead use a register to\n+represent the condition code.  If there is a specific condition code\n+register in the machine, use a hard register.  If the condition code or\n+comparison result can be placed in any general register, or if there are\n+multiple condition registers, use a pseudo register.\n+\n+   On some machines, the type of branch instruction generated may\n+depend on the way the condition code was produced; for example, on the\n+68k and Sparc, setting the condition code directly from an add or\n+subtract instruction does not clear the overflow bit the way that a test\n+instruction does, so a different branch instruction must be used for\n+some conditional branches.  For machines that use `(cc0)', the set and\n+use of the condition code must be adjacent (separated only by `note'\n+insns) allowing flags in `cc_status' to be used.  (*Note Condition\n+Code::.)  Also, the comparison and branch insns can be located from\n+each other by using the functions `prev_cc0_setter' and `next_cc0_user'.\n+\n+   However, this is not true on machines that do not use `(cc0)'.  On\n+those machines, no assumptions can be made about the adjacency of the\n+compare and branch insns and the above methods cannot be used.  Instead,\n+we use the machine mode of the condition code register to record\n+different formats of the condition code register.\n+\n+   Registers used to store the condition code value should have a mode\n+that is in class `MODE_CC'.  Normally, it will be `CCmode'.  If\n+additional modes are required (as for the add example mentioned above in\n+the Sparc), define the macro `EXTRA_CC_MODES' to list the additional\n+modes required (*note Condition Code::.).  Also define `EXTRA_CC_NAMES'\n+to list the names of those modes and `SELECT_CC_MODE' to choose a mode\n+given an operand of a compare.\n+\n+   If it is known during RTL generation that a different mode will be\n+required (for example, if the machine has separate compare instructions\n+for signed and unsigned quantities, like most IBM processors), they can\n+be specified at that time.\n+\n+   If the cases that require different modes would be made by\n+instruction combination, the macro `SELECT_CC_MODE' determines which\n+machine mode should be used for the comparison result.  The patterns\n+should be written using that mode.  To support the case of the add on\n+the Sparc discussed above, we have the pattern\n+\n+     (define_insn \"\"\n+       [(set (reg:CC_NOOV 0)\n+             (compare:CC_NOOV\n+               (plus:SI (match_operand:SI 0 \"register_operand\" \"%r\")\n+                        (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+               (const_int 0)))]\n+       \"\"\n+       \"...\")\n+\n+   The `SELECT_CC_MODE' macro on the Sparc returns `CC_NOOVmode' for\n+comparisons whose argument is a `plus'.\n+\n+\u001f\n+File: gcc.info,  Node: Insn Canonicalizations,  Next: Peephole Definitions,  Prev: Jump Patterns,  Up: Machine Desc\n+\n+Canonicalization of Instructions\n+================================\n+\n+   There are often cases where multiple RTL expressions could represent\n+an operation performed by a single machine instruction.  This situation\n+is most commonly encountered with logical, branch, and\n+multiply-accumulate instructions.  In such cases, the compiler attempts\n+to convert these multiple RTL expressions into a single canonical form\n+to reduce the number of insn patterns required.\n+\n+   In addition to algebraic simplifications, following canonicalizations\n+are performed:\n+\n+   * For commutative and comparison operators, a constant is always\n+     made the second operand.  If a machine only supports a constant as\n+     the second operand, only patterns that match a constant in the\n+     second operand need be supplied.\n+\n+     For these operators, if only one operand is a `neg', `not',\n+     `mult', `plus', or `minus' expression, it will be the first\n+     operand.\n+\n+   * For the `compare' operator, a constant is always the second operand\n+     on machines where `cc0' is used (*note Jump Patterns::.).  On other\n+     machines, there are rare cases where the compiler might want to\n+     construct a `compare' with a constant as the first operand.\n+     However, these cases are not common enough for it to be worthwhile\n+     to provide a pattern matching a constant as the first operand\n+     unless the machine actually has such an instruction.\n+\n+     An operand of `neg', `not', `mult', `plus', or `minus' is made the\n+     first operand under the same conditions as above.\n+\n+   * `(minus X (const_int N))' is converted to `(plus X (const_int\n+     -N))'.\n+\n+   * Within address computations (i.e., inside `mem'), a left shift is\n+     converted into the appropriate multiplication by a power of two.\n+\n+     De`Morgan's Law is used to move bitwise negation inside a bitwise\n+     logical-and or logical-or operation.  If this results in only one\n+     operand being a `not' expression, it will be the first one.\n+\n+     A machine that has an instruction that performs a bitwise\n+     logical-and of one operand with the bitwise negation of the other\n+     should specify the pattern for that instruction as\n+\n+          (define_insn \"\"\n+            [(set (match_operand:M 0 ...)\n+                  (and:M (not:M (match_operand:M 1 ...))\n+                               (match_operand:M 2 ...)))]\n+            \"...\"\n+            \"...\")\n+\n+     Similarly, a pattern for a \"NAND\" instruction should be written\n+\n+          (define_insn \"\"\n+            [(set (match_operand:M 0 ...)\n+                  (ior:M (not:M (match_operand:M 1 ...))\n+                               (not:M (match_operand:M 2 ...))))]\n+            \"...\"\n+            \"...\")\n+\n+     In both cases, it is not necessary to include patterns for the many\n+     logically equivalent RTL expressions.\n+\n+   * The only possible RTL expressions involving both bitwise\n+     exclusive-or and bitwise negation are `(xor:M X Y)' and `(not:M\n+     (xor:M X Y))'.\n+\n+   * The sum of three items, one of which is a constant, will only\n+     appear in the form\n+\n+          (plus:M (plus:M X Y) CONSTANT)\n+\n+   * On machines that do not use `cc0', `(compare X (const_int 0))'\n+     will be converted to X.\n+\n+   * Equality comparisons of a group of bits (usually a single bit)\n+     with zero will be written using `zero_extract' rather than the\n+     equivalent `and' or `sign_extract' operations.\n+"}, {"sha": "3ba2b75ada781bab73e8e5a1c2e0e4430e005ee4", "filename": "gcc/gcc.info-19", "status": "added", "additions": 1072, "deletions": 0, "changes": 1072, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-19", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-19", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-19?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1072 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Peephole Definitions,  Next: Expander Definitions,  Prev: Insn Canonicalizations,  Up: Machine Desc\n+\n+Machine-Specific Peephole Optimizers\n+====================================\n+\n+   In addition to instruction patterns the `md' file may contain\n+definitions of machine-specific peephole optimizations.\n+\n+   The combiner does not notice certain peephole optimizations when the\n+data flow in the program does not suggest that it should try them.  For\n+example, sometimes two consecutive insns related in purpose can be\n+combined even though the second one does not appear to use a register\n+computed in the first one.  A machine-specific peephole optimizer can\n+detect such opportunities.\n+\n+   A definition looks like this:\n+\n+     (define_peephole\n+       [INSN-PATTERN-1\n+        INSN-PATTERN-2\n+        ...]\n+       \"CONDITION\"\n+       \"TEMPLATE\"\n+       \"OPTIONAL INSN-ATTRIBUTES\")\n+\n+The last string operand may be omitted if you are not using any\n+machine-specific information in this machine description.  If present,\n+it must obey the same rules as in a `define_insn'.\n+\n+   In this skeleton, INSN-PATTERN-1 and so on are patterns to match\n+consecutive insns.  The optimization applies to a sequence of insns when\n+INSN-PATTERN-1 matches the first one, INSN-PATTERN-2 matches the next,\n+and so on.\n+\n+   Each of the insns matched by a peephole must also match a\n+`define_insn'.  Peepholes are checked only at the last stage just\n+before code generation, and only optionally.  Therefore, any insn which\n+would match a peephole but no `define_insn' will cause a crash in code\n+generation in an unoptimized compilation, or at various optimization\n+stages.\n+\n+   The operands of the insns are matched with `match_operands',\n+`match_operator', and `match_dup', as usual.  What is not usual is that\n+the operand numbers apply to all the insn patterns in the definition.\n+So, you can check for identical operands in two insns by using\n+`match_operand' in one insn and `match_dup' in the other.\n+\n+   The operand constraints used in `match_operand' patterns do not have\n+any direct effect on the applicability of the peephole, but they will\n+be validated afterward, so make sure your constraints are general enough\n+to apply whenever the peephole matches.  If the peephole matches but\n+the constraints are not satisfied, the compiler will crash.\n+\n+   It is safe to omit constraints in all the operands of the peephole;\n+or you can write constraints which serve as a double-check on the\n+criteria previously tested.\n+\n+   Once a sequence of insns matches the patterns, the CONDITION is\n+checked.  This is a C expression which makes the final decision whether\n+to perform the optimization (we do so if the expression is nonzero).  If\n+CONDITION is omitted (in other words, the string is empty) then the\n+optimization is applied to every sequence of insns that matches the\n+patterns.\n+\n+   The defined peephole optimizations are applied after register\n+allocation is complete.  Therefore, the peephole definition can check\n+which operands have ended up in which kinds of registers, just by\n+looking at the operands.\n+\n+   The way to refer to the operands in CONDITION is to write\n+`operands[I]' for operand number I (as matched by `(match_operand I\n+...)').  Use the variable `insn' to refer to the last of the insns\n+being matched; use `prev_active_insn' to find the preceding insns.\n+\n+   When optimizing computations with intermediate results, you can use\n+CONDITION to match only when the intermediate results are not used\n+elsewhere.  Use the C expression `dead_or_set_p (INSN, OP)', where INSN\n+is the insn in which you expect the value to be used for the last time\n+(from the value of `insn', together with use of `prev_nonnote_insn'),\n+and OP is the intermediate value (from `operands[I]').\n+\n+   Applying the optimization means replacing the sequence of insns with\n+one new insn.  The TEMPLATE controls ultimate output of assembler code\n+for this combined insn.  It works exactly like the template of a\n+`define_insn'.  Operand numbers in this template are the same ones used\n+in matching the original sequence of insns.\n+\n+   The result of a defined peephole optimizer does not need to match\n+any of the insn patterns in the machine description; it does not even\n+have an opportunity to match them.  The peephole optimizer definition\n+itself serves as the insn pattern to control how the insn is output.\n+\n+   Defined peephole optimizers are run as assembler code is being\n+output, so the insns they produce are never combined or rearranged in\n+any way.\n+\n+   Here is an example, taken from the 68000 machine description:\n+\n+     (define_peephole\n+       [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int 4)))\n+        (set (match_operand:DF 0 \"register_operand\" \"=f\")\n+             (match_operand:DF 1 \"register_operand\" \"ad\"))]\n+       \"FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])\"\n+       \"*\n+     {\n+       rtx xoperands[2];\n+       xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+     #ifdef MOTOROLA\n+       output_asm_insn (\\\"move.l %1,(sp)\\\", xoperands);\n+       output_asm_insn (\\\"move.l %1,-(sp)\\\", operands);\n+       return \\\"fmove.d (sp)+,%0\\\";\n+     #else\n+       output_asm_insn (\\\"movel %1,sp@\\\", xoperands);\n+       output_asm_insn (\\\"movel %1,sp@-\\\", operands);\n+       return \\\"fmoved sp@+,%0\\\";\n+     #endif\n+     }\n+     \")\n+\n+   The effect of this optimization is to change\n+\n+     jbsr _foobar\n+     addql #4,sp\n+     movel d1,sp@-\n+     movel d0,sp@-\n+     fmoved sp@+,fp0\n+\n+into\n+\n+     jbsr _foobar\n+     movel d1,sp@\n+     movel d0,sp@-\n+     fmoved sp@+,fp0\n+\n+   INSN-PATTERN-1 and so on look *almost* like the second operand of\n+`define_insn'.  There is one important difference: the second operand\n+of `define_insn' consists of one or more RTX's enclosed in square\n+brackets.  Usually, there is only one: then the same action can be\n+written as an element of a `define_peephole'.  But when there are\n+multiple actions in a `define_insn', they are implicitly enclosed in a\n+`parallel'.  Then you must explicitly write the `parallel', and the\n+square brackets within it, in the `define_peephole'.  Thus, if an insn\n+pattern looks like this,\n+\n+     (define_insn \"divmodsi4\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+             (div:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+                     (match_operand:SI 2 \"general_operand\" \"dmsK\")))\n+        (set (match_operand:SI 3 \"general_operand\" \"=d\")\n+             (mod:SI (match_dup 1) (match_dup 2)))]\n+       \"TARGET_68020\"\n+       \"divsl%.l %2,%3:%0\")\n+\n+then the way to mention this insn in a peephole is as follows:\n+\n+     (define_peephole\n+       [...\n+        (parallel\n+         [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n+               (div:SI (match_operand:SI 1 \"general_operand\" \"0\")\n+                       (match_operand:SI 2 \"general_operand\" \"dmsK\")))\n+          (set (match_operand:SI 3 \"general_operand\" \"=d\")\n+               (mod:SI (match_dup 1) (match_dup 2)))])\n+        ...]\n+       ...)\n+\n+\u001f\n+File: gcc.info,  Node: Expander Definitions,  Next: Insn Splitting,  Prev: Peephole Definitions,  Up: Machine Desc\n+\n+Defining RTL Sequences for Code Generation\n+==========================================\n+\n+   On some target machines, some standard pattern names for RTL\n+generation cannot be handled with single insn, but a sequence of RTL\n+insns can represent them.  For these target machines, you can write a\n+`define_expand' to specify how to generate the sequence of RTL.\n+\n+   A `define_expand' is an RTL expression that looks almost like a\n+`define_insn'; but, unlike the latter, a `define_expand' is used only\n+for RTL generation and it can produce more than one RTL insn.\n+\n+   A `define_expand' RTX has four operands:\n+\n+   * The name.  Each `define_expand' must have a name, since the only\n+     use for it is to refer to it by name.\n+\n+   * The RTL template.  This is just like the RTL template for a\n+     `define_peephole' in that it is a vector of RTL expressions each\n+     being one insn.\n+\n+   * The condition, a string containing a C expression.  This\n+     expression is used to express how the availability of this pattern\n+     depends on subclasses of target machine, selected by command-line\n+     options when GNU CC is run.  This is just like the condition of a\n+     `define_insn' that has a standard name.  Therefore, the condition\n+     (if present) may not depend on the data in the insn being matched,\n+     but only the target-machine-type flags.  The compiler needs to\n+     test these conditions during initialization in order to learn\n+     exactly which named instructions are available in a particular run.\n+\n+   * The preparation statements, a string containing zero or more C\n+     statements which are to be executed before RTL code is generated\n+     from the RTL template.\n+\n+     Usually these statements prepare temporary registers for use as\n+     internal operands in the RTL template, but they can also generate\n+     RTL insns directly by calling routines such as `emit_insn', etc.\n+     Any such insns precede the ones that come from the RTL template.\n+\n+   Every RTL insn emitted by a `define_expand' must match some\n+`define_insn' in the machine description.  Otherwise, the compiler will\n+crash when trying to generate code for the insn or trying to optimize\n+it.\n+\n+   The RTL template, in addition to controlling generation of RTL insns,\n+also describes the operands that need to be specified when this pattern\n+is used.  In particular, it gives a predicate for each operand.\n+\n+   A true operand, which needs to be specified in order to generate RTL\n+from the pattern, should be described with a `match_operand' in its\n+first occurrence in the RTL template.  This enters information on the\n+operand's predicate into the tables that record such things.  GNU CC\n+uses the information to preload the operand into a register if that is\n+required for valid RTL code.  If the operand is referred to more than\n+once, subsequent references should use `match_dup'.\n+\n+   The RTL template may also refer to internal \"operands\" which are\n+temporary registers or labels used only within the sequence made by the\n+`define_expand'.  Internal operands are substituted into the RTL\n+template with `match_dup', never with `match_operand'.  The values of\n+the internal operands are not passed in as arguments by the compiler\n+when it requests use of this pattern.  Instead, they are computed\n+within the pattern, in the preparation statements.  These statements\n+compute the values and store them into the appropriate elements of\n+`operands' so that `match_dup' can find them.\n+\n+   There are two special macros defined for use in the preparation\n+statements: `DONE' and `FAIL'.  Use them with a following semicolon, as\n+a statement.\n+\n+`DONE'\n+     Use the `DONE' macro to end RTL generation for the pattern.  The\n+     only RTL insns resulting from the pattern on this occasion will be\n+     those already emitted by explicit calls to `emit_insn' within the\n+     preparation statements; the RTL template will not be generated.\n+\n+`FAIL'\n+     Make the pattern fail on this occasion.  When a pattern fails, it\n+     means that the pattern was not truly available.  The calling\n+     routines in the compiler will try other strategies for code\n+     generation using other patterns.\n+\n+     Failure is currently supported only for binary (addition,\n+     multiplication, shifting, etc.) and bitfield (`extv', `extzv', and\n+     `insv') operations.\n+\n+   Here is an example, the definition of left-shift for the SPUR chip:\n+\n+     (define_expand \"ashlsi3\"\n+       [(set (match_operand:SI 0 \"register_operand\" \"\")\n+             (ashift:SI\n+\n+     (match_operand:SI 1 \"register_operand\" \"\")\n+               (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+       \"\"\n+       \"\n+\n+     {\n+       if (GET_CODE (operands[2]) != CONST_INT\n+           || (unsigned) INTVAL (operands[2]) > 3)\n+         FAIL;\n+     }\")\n+\n+This example uses `define_expand' so that it can generate an RTL insn\n+for shifting when the shift-count is in the supported range of 0 to 3\n+but fail in other cases where machine insns aren't available.  When it\n+fails, the compiler tries another strategy using different patterns\n+(such as, a library call).\n+\n+   If the compiler were able to handle nontrivial condition-strings in\n+patterns with names, then it would be possible to use a `define_insn'\n+in that case.  Here is another case (zero-extension on the 68000) which\n+makes more use of the power of `define_expand':\n+\n+     (define_expand \"zero_extendhisi2\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"\")\n+             (const_int 0))\n+        (set (strict_low_part\n+               (subreg:HI\n+                 (match_dup 0)\n+                 0))\n+             (match_operand:HI 1 \"general_operand\" \"\"))]\n+       \"\"\n+       \"operands[1] = make_safe_from (operands[1], operands[0]);\")\n+\n+Here two RTL insns are generated, one to clear the entire output operand\n+and the other to copy the input operand into its low half.  This\n+sequence is incorrect if the input operand refers to [the old value of]\n+the output operand, so the preparation statement makes sure this isn't\n+so.  The function `make_safe_from' copies the `operands[1]' into a\n+temporary register if it refers to `operands[0]'.  It does this by\n+emitting another RTL insn.\n+\n+   Finally, a third example shows the use of an internal operand.\n+Zero-extension on the SPUR chip is done by `and'-ing the result against\n+a halfword mask.  But this mask cannot be represented by a `const_int'\n+because the constant value is too large to be legitimate on this\n+machine.  So it must be copied into a register with `force_reg' and\n+then the register used in the `and'.\n+\n+     (define_expand \"zero_extendhisi2\"\n+       [(set (match_operand:SI 0 \"register_operand\" \"\")\n+             (and:SI (subreg:SI\n+                       (match_operand:HI 1 \"register_operand\" \"\")\n+                       0)\n+                     (match_dup 2)))]\n+       \"\"\n+       \"operands[2]\n+          = force_reg (SImode, gen_rtx (CONST_INT,\n+                                        VOIDmode, 65535)); \")\n+\n+   *Note:* If the `define_expand' is used to serve a standard binary or\n+unary arithmetic operation or a bitfield operation, then the last insn\n+it generates must not be a `code_label', `barrier' or `note'.  It must\n+be an `insn', `jump_insn' or `call_insn'.  If you don't need a real insn\n+at the end, emit an insn to copy the result of the operation into\n+itself.  Such an insn will generate no code, but it can avoid problems\n+in the compiler.\n+\n+\u001f\n+File: gcc.info,  Node: Insn Splitting,  Next: Insn Attributes,  Prev: Expander Definitions,  Up: Machine Desc\n+\n+Defining How to Split Instructions\n+==================================\n+\n+   There are two cases where you should specify how to split a pattern\n+into multiple insns.  On machines that have instructions requiring delay\n+slots (*note Delay Slots::.) or that have instructions whose output is\n+not available for multiple cycles (*note Function Units::.), the\n+compiler phases that optimize these cases need to be able to move insns\n+into one-instruction delay slots.  However, some insns may generate\n+more than one machine instruction.  These insns cannot be placed into a\n+delay slot.\n+\n+   Often you can rewrite the single insn as a list of individual insns,\n+each corresponding to one machine instruction.  The disadvantage of\n+doing so is that it will cause the compilation to be slower and require\n+more space.  If the resulting insns are too complex, it may also\n+suppress some optimizations.  The compiler splits the insn if there is a\n+reason to believe that it might improve instruction or delay slot\n+scheduling.\n+\n+   The insn combiner phase also splits putative insns.  If three insns\n+are merged into one insn with a complex expression that cannot be\n+matched by some `define_insn' pattern, the combiner phase attempts to\n+split the complex pattern into two insns that are recognized.  Usually\n+it can break the complex pattern into two patterns by splitting out some\n+subexpression.  However, in some other cases, such as performing an\n+addition of a large constant in two insns on a RISC machine, the way to\n+split the addition into two insns is machine-dependent.\n+\n+   The `define_split' definition tells the compiler how to split a\n+complex insn into several simpler insns.  It looks like this:\n+\n+     (define_split\n+       [INSN-PATTERN]\n+       \"CONDITION\"\n+       [NEW-INSN-PATTERN-1\n+        NEW-INSN-PATTERN-2\n+        ...]\n+       \"PREPARATION STATEMENTS\")\n+\n+   INSN-PATTERN is a pattern that needs to be split and CONDITION is\n+the final condition to be tested, as in a `define_insn'.  When an insn\n+matching INSN-PATTERN and satisfying CONDITION is found, it is replaced\n+in the insn list with the insns given by NEW-INSN-PATTERN-1,\n+NEW-INSN-PATTERN-2, etc.\n+\n+   The PREPARATION STATEMENTS are similar to those statements that are\n+specified for `define_expand' (*note Expander Definitions::.)  and are\n+executed before the new RTL is generated to prepare for the generated\n+code or emit some insns whose pattern is not fixed.  Unlike those in\n+`define_expand', however, these statements must not generate any new\n+pseudo-registers.  Once reload has completed, they also must not\n+allocate any space in the stack frame.\n+\n+   Patterns are matched against INSN-PATTERN in two different\n+circumstances.  If an insn needs to be split for delay slot scheduling\n+or insn scheduling, the insn is already known to be valid, which means\n+that it must have been matched by some `define_insn' and, if\n+`reload_completed' is non-zero, is known to satisfy the constraints of\n+that `define_insn'.  In that case, the new insn patterns must also be\n+insns that are matched by some `define_insn' and, if `reload_completed'\n+is non-zero, must also satisfy the constraints of those definitions.\n+\n+   As an example of this usage of `define_split', consider the following\n+example from `a29k.md', which splits a `sign_extend' from `HImode' to\n+`SImode' into a pair of shift insns:\n+\n+     (define_split\n+       [(set (match_operand:SI 0 \"gen_reg_operand\" \"\")\n+             (sign_extend:SI (match_operand:HI 1 \"gen_reg_operand\" \"\")))]\n+       \"\"\n+       [(set (match_dup 0)\n+             (ashift:SI (match_dup 1)\n+                        (const_int 16)))\n+        (set (match_dup 0)\n+             (ashiftrt:SI (match_dup 0)\n+                          (const_int 16)))]\n+       \"\n+     { operands[1] = gen_lowpart (SImode, operands[1]); }\")\n+\n+   When the combiner phase tries to split an insn pattern, it is always\n+the case that the pattern is *not* matched by any `define_insn'.  The\n+combiner pass first tries to split a single `set' expression and then\n+the same `set' expression inside a `parallel', but followed by a\n+`clobber' of a pseudo-reg to use as a scratch register.  In these\n+cases, the combiner expects exactly two new insn patterns to be\n+generated.  It will verify that these patterns match some `define_insn'\n+definitions, so you need not do this test in the `define_split' (of\n+course, there is no point in writing a `define_split' that will never\n+produce insns that match).\n+\n+   Here is an example of this use of `define_split', taken from\n+`rs6000.md':\n+\n+     (define_split\n+       [(set (match_operand:SI 0 \"gen_reg_operand\" \"\")\n+             (plus:SI (match_operand:SI 1 \"gen_reg_operand\" \"\")\n+                      (match_operand:SI 2 \"non_add_cint_operand\" \"\")))]\n+       \"\"\n+       [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))\n+        (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n+     \"\n+     {\n+       int low = INTVAL (operands[2]) & 0xffff;\n+       int high = (unsigned) INTVAL (operands[2]) >> 16;\n+     \n+       if (low & 0x8000)\n+         high++, low |= 0xffff0000;\n+     \n+       operands[3] = gen_rtx (CONST_INT, VOIDmode, high << 16);\n+       operands[4] = gen_rtx (CONST_INT, VOIDmode, low);\n+     }\")\n+\n+   Here the predicate `non_add_cint_operand' matches any `const_int'\n+that is *not* a valid operand of a single add insn.  The add with the\n+smaller displacement is written so that it can be substituted into the\n+address of a subsequent operation.\n+\n+   An example that uses a scratch register, from the same file,\n+generates an equality comparison of a register and a large constant:\n+\n+     (define_split\n+       [(set (match_operand:CC 0 \"cc_reg_operand\" \"\")\n+             (compare:CC (match_operand:SI 1 \"gen_reg_operand\" \"\")\n+                         (match_operand:SI 2 \"non_short_cint_operand\" \"\")))\n+        (clobber (match_operand:SI 3 \"gen_reg_operand\" \"\"))]\n+       \"find_single_use (operands[0], insn, 0)\n+        && (GET_CODE (*find_single_use (operands[0], insn, 0)) == EQ\n+            || GET_CODE (*find_single_use (operands[0], insn, 0)) == NE)\"\n+       [(set (match_dup 3) (xor:SI (match_dup 1) (match_dup 4)))\n+        (set (match_dup 0) (compare:CC (match_dup 3) (match_dup 5)))]\n+       \"\n+     {\n+       /* Get the constant we are comparing against, C, and see what it\n+          looks like sign-extended to 16 bits.  Then see what constant\n+          could be XOR'ed with C to get the sign-extended value.  */\n+     \n+       int c = INTVAL (operands[2]);\n+       int sextc = (c << 16) >> 16;\n+       int xorv = c ^ sextc;\n+     \n+       operands[4] = gen_rtx (CONST_INT, VOIDmode, xorv);\n+       operands[5] = gen_rtx (CONST_INT, VOIDmode, sextc);\n+     }\")\n+\n+   To avoid confusion, don't write a single `define_split' that accepts\n+some insns that match some `define_insn' as well as some insns that\n+don't.  Instead, write two separate `define_split' definitions, one for\n+the insns that are valid and one for the insns that are not valid.\n+\n+\u001f\n+File: gcc.info,  Node: Insn Attributes,  Prev: Insn Splitting,  Up: Machine Desc\n+\n+Instruction Attributes\n+======================\n+\n+   In addition to describing the instruction supported by the target\n+machine, the `md' file also defines a group of \"attributes\" and a set of\n+values for each.  Every generated insn is assigned a value for each\n+attribute.  One possible attribute would be the effect that the insn\n+has on the machine's condition code.  This attribute can then be used\n+by `NOTICE_UPDATE_CC' to track the condition codes.\n+\n+* Menu:\n+\n+* Defining Attributes:: Specifying attributes and their values.\n+* Expressions::         Valid expressions for attribute values.\n+* Tagging Insns::       Assigning attribute values to insns.\n+* Attr Example::        An example of assigning attributes.\n+* Insn Lengths::        Computing the length of insns.\n+* Constant Attributes:: Defining attributes that are constant.\n+* Delay Slots::         Defining delay slots required for a machine.\n+* Function Units::      Specifying information for insn scheduling.\n+\n+\u001f\n+File: gcc.info,  Node: Defining Attributes,  Next: Expressions,  Up: Insn Attributes\n+\n+Defining Attributes and their Values\n+------------------------------------\n+\n+   The `define_attr' expression is used to define each attribute\n+required by the target machine.  It looks like:\n+\n+     (define_attr NAME LIST-OF-VALUES DEFAULT)\n+\n+   NAME is a string specifying the name of the attribute being defined.\n+\n+   LIST-OF-VALUES is either a string that specifies a comma-separated\n+list of values that can be assigned to the attribute, or a null string\n+to indicate that the attribute takes numeric values.\n+\n+   DEFAULT is an attribute expression that gives the value of this\n+attribute for insns that match patterns whose definition does not\n+include an explicit value for this attribute.  *Note Attr Example::,\n+for more information on the handling of defaults.  *Note Constant\n+Attributes::, for information on attributes that do not depend on any\n+particular insn.\n+\n+   For each defined attribute, a number of definitions are written to\n+the `insn-attr.h' file.  For cases where an explicit set of values is\n+specified for an attribute, the following are defined:\n+\n+   * A `#define' is written for the symbol `HAVE_ATTR_NAME'.\n+\n+   * An enumeral class is defined for `attr_NAME' with elements of the\n+     form `UPPER-NAME_UPPER-VALUE' where the attribute name and value\n+     are first converted to upper case.\n+\n+   * A function `get_attr_NAME' is defined that is passed an insn and\n+     returns the attribute value for that insn.\n+\n+   For example, if the following is present in the `md' file:\n+\n+     (define_attr \"type\" \"branch,fp,load,store,arith\" ...)\n+\n+the following lines will be written to the file `insn-attr.h'.\n+\n+     #define HAVE_ATTR_type\n+     enum attr_type {TYPE_BRANCH, TYPE_FP, TYPE_LOAD,\n+                      TYPE_STORE, TYPE_ARITH};\n+     extern enum attr_type get_attr_type ();\n+\n+   If the attribute takes numeric values, no `enum' type will be\n+defined and the function to obtain the attribute's value will return\n+`int'.\n+\n+\u001f\n+File: gcc.info,  Node: Expressions,  Next: Tagging Insns,  Prev: Defining Attributes,  Up: Insn Attributes\n+\n+Attribute Expressions\n+---------------------\n+\n+   RTL expressions used to define attributes use the codes described\n+above plus a few specific to attribute definitions, to be discussed\n+below.  Attribute value expressions must have one of the following\n+forms:\n+\n+`(const_int I)'\n+     The integer I specifies the value of a numeric attribute.  I must\n+     be non-negative.\n+\n+     The value of a numeric attribute can be specified either with a\n+     `const_int' or as an integer represented as a string in\n+     `const_string', `eq_attr' (see below), and `set_attr' (*note\n+     Tagging Insns::.) expressions.\n+\n+`(const_string VALUE)'\n+     The string VALUE specifies a constant attribute value.  If VALUE\n+     is specified as `\"*\"', it means that the default value of the\n+     attribute is to be used for the insn containing this expression.\n+     `\"*\"' obviously cannot be used in the DEFAULT expression of a\n+     `define_attr'.\n+\n+     If the attribute whose value is being specified is numeric, VALUE\n+     must be a string containing a non-negative integer (normally\n+     `const_int' would be used in this case).  Otherwise, it must\n+     contain one of the valid values for the attribute.\n+\n+`(if_then_else TEST TRUE-VALUE FALSE-VALUE)'\n+     TEST specifies an attribute test, whose format is defined below.\n+     The value of this expression is TRUE-VALUE if TEST is true,\n+     otherwise it is FALSE-VALUE.\n+\n+`(cond [TEST1 VALUE1 ...] DEFAULT)'\n+     The first operand of this expression is a vector containing an even\n+     number of expressions and consisting of pairs of TEST and VALUE\n+     expressions.  The value of the `cond' expression is that of the\n+     VALUE corresponding to the first true TEST expression.  If none of\n+     the TEST expressions are true, the value of the `cond' expression\n+     is that of the DEFAULT expression.\n+\n+   TEST expressions can have one of the following forms:\n+\n+`(const_int I)'\n+     This test is true if I is non-zero and false otherwise.\n+\n+`(not TEST)'\n+`(ior TEST1 TEST2)'\n+`(and TEST1 TEST2)'\n+     These tests are true if the indicated logical function is true.\n+\n+`(match_operand:M N PRED CONSTRAINTS)'\n+     This test is true if operand N of the insn whose attribute value\n+     is being determined has mode M (this part of the test is ignored\n+     if M is `VOIDmode') and the function specified by the string PRED\n+     returns a non-zero value when passed operand N and mode M (this\n+     part of the test is ignored if PRED is the null string).\n+\n+     The CONSTRAINTS operand is ignored and should be the null string.\n+\n+`(le ARITH1 ARITH2)'\n+`(leu ARITH1 ARITH2)'\n+`(lt ARITH1 ARITH2)'\n+`(ltu ARITH1 ARITH2)'\n+`(gt ARITH1 ARITH2)'\n+`(gtu ARITH1 ARITH2)'\n+`(ge ARITH1 ARITH2)'\n+`(geu ARITH1 ARITH2)'\n+`(ne ARITH1 ARITH2)'\n+`(eq ARITH1 ARITH2)'\n+     These tests are true if the indicated comparison of the two\n+     arithmetic expressions is true.  Arithmetic expressions are formed\n+     with `plus', `minus', `mult', `div', `mod', `abs', `neg', `and',\n+     `ior', `xor', `not', `ashift', `lshiftrt', and `ashiftrt'\n+     expressions.\n+\n+     `const_int' and `symbol_ref' are always valid terms (*note Insn\n+     Lengths::.,for additional forms).  `symbol_ref' is a string\n+     denoting a C expression that yields an `int' when evaluated by the\n+     `get_attr_...' routine.  It should normally be a global variable.\n+\n+`(eq_attr NAME VALUE)'\n+     NAME is a string specifying the name of an attribute.\n+\n+     VALUE is a string that is either a valid value for attribute NAME,\n+     a comma-separated list of values, or `!' followed by a value or\n+     list.  If VALUE does not begin with a `!', this test is true if\n+     the value of the NAME attribute of the current insn is in the list\n+     specified by VALUE.  If VALUE begins with a `!', this test is true\n+     if the attribute's value is *not* in the specified list.\n+\n+     For example,\n+\n+          (eq_attr \"type\" \"load,store\")\n+\n+     is equivalent to\n+\n+          (ior (eq_attr \"type\" \"load\") (eq_attr \"type\" \"store\"))\n+\n+     If NAME specifies an attribute of `alternative', it refers to the\n+     value of the compiler variable `which_alternative' (*note Output\n+     Statement::.) and the values must be small integers.  For example,\n+\n+          (eq_attr \"alternative\" \"2,3\")\n+\n+     is equivalent to\n+\n+          (ior (eq (symbol_ref \"which_alternative\") (const_int 2))\n+               (eq (symbol_ref \"which_alternative\") (const_int 3)))\n+\n+     Note that, for most attributes, an `eq_attr' test is simplified in\n+     cases where the value of the attribute being tested is known for\n+     all insns matching a particular pattern.  This is by far the most\n+     common case.\n+\n+`(attr_flag NAME)'\n+     The value of an `attr_flag' expression is true if the flag\n+     specified by NAME is true for the `insn' currently being scheduled.\n+\n+     NAME is a string specifying one of a fixed set of flags to test.\n+     Test the flags `forward' and `backward' to determine the direction\n+     of a conditional branch.  Test the flags `very_likely', `likely',\n+     `very_unlikely', and `unlikely' to determine if a conditional\n+     branch is expected to be taken.\n+\n+     If the `very_likely' flag is true, then the `likely' flag is also\n+     true.  Likewise for the `very_unlikely' and `unlikely' flags.\n+\n+     This example describes a conditional branch delay slot which can\n+     be nullified for forward branches that are taken (annul-true) or\n+     for backward branches which are not taken (annul-false).\n+\n+          (define_delay (eq_attr \"type\" \"cbranch\")\n+            [(eq_attr \"in_branch_delay\" \"true\")\n+             (and (eq_attr \"in_branch_delay\" \"true\")\n+                  (attr_flag \"forward\"))\n+             (and (eq_attr \"in_branch_delay\" \"true\")\n+                  (attr_flag \"backward\"))])\n+\n+     The `forward' and `backward' flags are false if the current `insn'\n+     being scheduled is not a conditional branch.\n+\n+     The `very_likely' and `likely' flags are true if the `insn' being\n+     scheduled is not a conditional branch.  The `very_unlikely' and\n+     `unlikely' flags are false if the `insn' being scheduled is not a\n+     conditional branch.\n+\n+     `attr_flag' is only used during delay slot scheduling and has no\n+     meaning to other passes of the compiler.\n+\n+\u001f\n+File: gcc.info,  Node: Tagging Insns,  Next: Attr Example,  Prev: Expressions,  Up: Insn Attributes\n+\n+Assigning Attribute Values to Insns\n+-----------------------------------\n+\n+   The value assigned to an attribute of an insn is primarily\n+determined by which pattern is matched by that insn (or which\n+`define_peephole' generated it).  Every `define_insn' and\n+`define_peephole' can have an optional last argument to specify the\n+values of attributes for matching insns.  The value of any attribute\n+not specified in a particular insn is set to the default value for that\n+attribute, as specified in its `define_attr'.  Extensive use of default\n+values for attributes permits the specification of the values for only\n+one or two attributes in the definition of most insn patterns, as seen\n+in the example in the next section.\n+\n+   The optional last argument of `define_insn' and `define_peephole' is\n+a vector of expressions, each of which defines the value for a single\n+attribute.  The most general way of assigning an attribute's value is\n+to use a `set' expression whose first operand is an `attr' expression\n+giving the name of the attribute being set.  The second operand of the\n+`set' is an attribute expression (*note Expressions::.) giving the\n+value of the attribute.\n+\n+   When the attribute value depends on the `alternative' attribute\n+(i.e., which is the applicable alternative in the constraint of the\n+insn), the `set_attr_alternative' expression can be used.  It allows\n+the specification of a vector of attribute expressions, one for each\n+alternative.\n+\n+   When the generality of arbitrary attribute expressions is not\n+required, the simpler `set_attr' expression can be used, which allows\n+specifying a string giving either a single attribute value or a list of\n+attribute values, one for each alternative.\n+\n+   The form of each of the above specifications is shown below.  In\n+each case, NAME is a string specifying the attribute to be set.\n+\n+`(set_attr NAME VALUE-STRING)'\n+     VALUE-STRING is either a string giving the desired attribute value,\n+     or a string containing a comma-separated list giving the values for\n+     succeeding alternatives.  The number of elements must match the\n+     number of alternatives in the constraint of the insn pattern.\n+\n+     Note that it may be useful to specify `*' for some alternative, in\n+     which case the attribute will assume its default value for insns\n+     matching that alternative.\n+\n+`(set_attr_alternative NAME [VALUE1 VALUE2 ...])'\n+     Depending on the alternative of the insn, the value will be one of\n+     the specified values.  This is a shorthand for using a `cond' with\n+     tests on the `alternative' attribute.\n+\n+`(set (attr NAME) VALUE)'\n+     The first operand of this `set' must be the special RTL expression\n+     `attr', whose sole operand is a string giving the name of the\n+     attribute being set.  VALUE is the value of the attribute.\n+\n+   The following shows three different ways of representing the same\n+attribute value specification:\n+\n+     (set_attr \"type\" \"load,store,arith\")\n+     \n+     (set_attr_alternative \"type\"\n+                           [(const_string \"load\") (const_string \"store\")\n+                            (const_string \"arith\")])\n+     \n+     (set (attr \"type\")\n+          (cond [(eq_attr \"alternative\" \"1\") (const_string \"load\")\n+                 (eq_attr \"alternative\" \"2\") (const_string \"store\")]\n+                (const_string \"arith\")))\n+\n+   The `define_asm_attributes' expression provides a mechanism to\n+specify the attributes assigned to insns produced from an `asm'\n+statement.  It has the form:\n+\n+     (define_asm_attributes [ATTR-SETS])\n+\n+where ATTR-SETS is specified the same as for both the `define_insn' and\n+the `define_peephole' expressions.\n+\n+   These values will typically be the \"worst case\" attribute values.\n+For example, they might indicate that the condition code will be\n+clobbered.\n+\n+   A specification for a `length' attribute is handled specially.  The\n+way to compute the length of an `asm' insn is to multiply the length\n+specified in the expression `define_asm_attributes' by the number of\n+machine instructions specified in the `asm' statement, determined by\n+counting the number of semicolons and newlines in the string.\n+Therefore, the value of the `length' attribute specified in a\n+`define_asm_attributes' should be the maximum possible length of a\n+single machine instruction.\n+\n+\u001f\n+File: gcc.info,  Node: Attr Example,  Next: Insn Lengths,  Prev: Tagging Insns,  Up: Insn Attributes\n+\n+Example of Attribute Specifications\n+-----------------------------------\n+\n+   The judicious use of defaulting is important in the efficient use of\n+insn attributes.  Typically, insns are divided into \"types\" and an\n+attribute, customarily called `type', is used to represent this value.\n+This attribute is normally used only to define the default value for\n+other attributes.  An example will clarify this usage.\n+\n+   Assume we have a RISC machine with a condition code and in which only\n+full-word operations are performed in registers.  Let us assume that we\n+can divide all insns into loads, stores, (integer) arithmetic\n+operations, floating point operations, and branches.\n+\n+   Here we will concern ourselves with determining the effect of an\n+insn on the condition code and will limit ourselves to the following\n+possible effects:  The condition code can be set unpredictably\n+(clobbered), not be changed, be set to agree with the results of the\n+operation, or only changed if the item previously set into the\n+condition code has been modified.\n+\n+   Here is part of a sample `md' file for such a machine:\n+\n+     (define_attr \"type\" \"load,store,arith,fp,branch\" (const_string \"arith\"))\n+     \n+     (define_attr \"cc\" \"clobber,unchanged,set,change0\"\n+                  (cond [(eq_attr \"type\" \"load\")\n+                             (const_string \"change0\")\n+                         (eq_attr \"type\" \"store,branch\")\n+                             (const_string \"unchanged\")\n+                         (eq_attr \"type\" \"arith\")\n+                             (if_then_else (match_operand:SI 0 \"\" \"\")\n+                                           (const_string \"set\")\n+                                           (const_string \"clobber\"))]\n+                        (const_string \"clobber\")))\n+     \n+     (define_insn \"\"\n+       [(set (match_operand:SI 0 \"general_operand\" \"=r,r,m\")\n+             (match_operand:SI 1 \"general_operand\" \"r,m,r\"))]\n+       \"\"\n+       \"@\n+        move %0,%1\n+        load %0,%1\n+        store %0,%1\"\n+       [(set_attr \"type\" \"arith,load,store\")])\n+\n+   Note that we assume in the above example that arithmetic operations\n+performed on quantities smaller than a machine word clobber the\n+condition code since they will set the condition code to a value\n+corresponding to the full-word result.\n+\n+\u001f\n+File: gcc.info,  Node: Insn Lengths,  Next: Constant Attributes,  Prev: Attr Example,  Up: Insn Attributes\n+\n+Computing the Length of an Insn\n+-------------------------------\n+\n+   For many machines, multiple types of branch instructions are\n+provided, each for different length branch displacements.  In most\n+cases, the assembler will choose the correct instruction to use.\n+However, when the assembler cannot do so, GCC can when a special\n+attribute, the `length' attribute, is defined.  This attribute must be\n+defined to have numeric values by specifying a null string in its\n+`define_attr'.\n+\n+   In the case of the `length' attribute, two additional forms of\n+arithmetic terms are allowed in test expressions:\n+\n+`(match_dup N)'\n+     This refers to the address of operand N of the current insn, which\n+     must be a `label_ref'.\n+\n+`(pc)'\n+     This refers to the address of the *current* insn.  It might have\n+     been more consistent with other usage to make this the address of\n+     the *next* insn but this would be confusing because the length of\n+     the current insn is to be computed.\n+\n+   For normal insns, the length will be determined by value of the\n+`length' attribute.  In the case of `addr_vec' and `addr_diff_vec' insn\n+patterns, the length is computed as the number of vectors multiplied by\n+the size of each vector.\n+\n+   Lengths are measured in addressable storage units (bytes).\n+\n+   The following macros can be used to refine the length computation:\n+\n+`FIRST_INSN_ADDRESS'\n+     When the `length' insn attribute is used, this macro specifies the\n+     value to be assigned to the address of the first insn in a\n+     function.  If not specified, 0 is used.\n+\n+`ADJUST_INSN_LENGTH (INSN, LENGTH)'\n+     If defined, modifies the length assigned to instruction INSN as a\n+     function of the context in which it is used.  LENGTH is an lvalue\n+     that contains the initially computed length of the insn and should\n+     be updated with the correct length of the insn.  If updating is\n+     required, INSN must not be a varying-length insn.\n+\n+     This macro will normally not be required.  A case in which it is\n+     required is the ROMP.  On this machine, the size of an `addr_vec'\n+     insn must be increased by two to compensate for the fact that\n+     alignment may be required.\n+\n+   The routine that returns `get_attr_length' (the value of the\n+`length' attribute) can be used by the output routine to determine the\n+form of the branch instruction to be written, as the example below\n+illustrates.\n+\n+   As an example of the specification of variable-length branches,\n+consider the IBM 360.  If we adopt the convention that a register will\n+be set to the starting address of a function, we can jump to labels\n+within 4k of the start using a four-byte instruction.  Otherwise, we\n+need a six-byte sequence to load the address from memory and then\n+branch to it.\n+\n+   On such a machine, a pattern for a branch instruction might be\n+specified as follows:\n+\n+     (define_insn \"jump\"\n+       [(set (pc)\n+             (label_ref (match_operand 0 \"\" \"\")))]\n+       \"\"\n+       \"*\n+     {\n+        return (get_attr_length (insn) == 4\n+                ? \\\"b %l0\\\" : \\\"l r15,=a(%l0); br r15\\\");\n+     }\"\n+       [(set (attr \"length\") (if_then_else (lt (match_dup 0) (const_int 4096))\n+                                           (const_int 4)\n+                                           (const_int 6)))])\n+\n+\u001f\n+File: gcc.info,  Node: Constant Attributes,  Next: Delay Slots,  Prev: Insn Lengths,  Up: Insn Attributes\n+\n+Constant Attributes\n+-------------------\n+\n+   A special form of `define_attr', where the expression for the\n+default value is a `const' expression, indicates an attribute that is\n+constant for a given run of the compiler.  Constant attributes may be\n+used to specify which variety of processor is used.  For example,\n+\n+     (define_attr \"cpu\" \"m88100,m88110,m88000\"\n+      (const\n+       (cond [(symbol_ref \"TARGET_88100\") (const_string \"m88100\")\n+              (symbol_ref \"TARGET_88110\") (const_string \"m88110\")]\n+             (const_string \"m88000\"))))\n+     \n+     (define_attr \"memory\" \"fast,slow\"\n+      (const\n+       (if_then_else (symbol_ref \"TARGET_FAST_MEM\")\n+                     (const_string \"fast\")\n+                     (const_string \"slow\"))))\n+\n+   The routine generated for constant attributes has no parameters as it\n+does not depend on any particular insn.  RTL expressions used to define\n+the value of a constant attribute may use the `symbol_ref' form, but\n+may not use either the `match_operand' form or `eq_attr' forms\n+involving insn attributes.\n+\n+\u001f\n+File: gcc.info,  Node: Delay Slots,  Next: Function Units,  Prev: Constant Attributes,  Up: Insn Attributes\n+\n+Delay Slot Scheduling\n+---------------------\n+\n+   The insn attribute mechanism can be used to specify the requirements\n+for delay slots, if any, on a target machine.  An instruction is said to\n+require a \"delay slot\" if some instructions that are physically after\n+the instruction are executed as if they were located before it.\n+Classic examples are branch and call instructions, which often execute\n+the following instruction before the branch or call is performed.\n+\n+   On some machines, conditional branch instructions can optionally\n+\"annul\" instructions in the delay slot.  This means that the\n+instruction will not be executed for certain branch outcomes.  Both\n+instructions that annul if the branch is true and instructions that\n+annul if the branch is false are supported.\n+\n+   Delay slot scheduling differs from instruction scheduling in that\n+determining whether an instruction needs a delay slot is dependent only\n+on the type of instruction being generated, not on data flow between the\n+instructions.  See the next section for a discussion of data-dependent\n+instruction scheduling.\n+\n+   The requirement of an insn needing one or more delay slots is\n+indicated via the `define_delay' expression.  It has the following form:\n+\n+     (define_delay TEST\n+                   [DELAY-1 ANNUL-TRUE-1 ANNUL-FALSE-1\n+                    DELAY-2 ANNUL-TRUE-2 ANNUL-FALSE-2\n+                    ...])\n+\n+   TEST is an attribute test that indicates whether this `define_delay'\n+applies to a particular insn.  If so, the number of required delay\n+slots is determined by the length of the vector specified as the second\n+argument.  An insn placed in delay slot N must satisfy attribute test\n+DELAY-N.  ANNUL-TRUE-N is an attribute test that specifies which insns\n+may be annulled if the branch is true.  Similarly, ANNUL-FALSE-N\n+specifies which insns in the delay slot may be annulled if the branch\n+is false.  If annulling is not supported for that delay slot, `(nil)'\n+should be coded.\n+\n+   For example, in the common case where branch and call insns require\n+a single delay slot, which may contain any insn other than a branch or\n+call, the following would be placed in the `md' file:\n+\n+     (define_delay (eq_attr \"type\" \"branch,call\")\n+                   [(eq_attr \"type\" \"!branch,call\") (nil) (nil)])\n+\n+   Multiple `define_delay' expressions may be specified.  In this case,\n+each such expression specifies different delay slot requirements and\n+there must be no insn for which tests in two `define_delay' expressions\n+are both true.\n+\n+   For example, if we have a machine that requires one delay slot for\n+branches but two for calls,  no delay slot can contain a branch or call\n+insn, and any valid insn in the delay slot for the branch can be\n+annulled if the branch is true, we might represent this as follows:\n+\n+     (define_delay (eq_attr \"type\" \"branch\")\n+        [(eq_attr \"type\" \"!branch,call\")\n+         (eq_attr \"type\" \"!branch,call\")\n+         (nil)])\n+     \n+     (define_delay (eq_attr \"type\" \"call\")\n+                   [(eq_attr \"type\" \"!branch,call\") (nil) (nil)\n+                    (eq_attr \"type\" \"!branch,call\") (nil) (nil)])\n+"}, {"sha": "1e15a3090ebff86179b293401fe842e962f4aa6a", "filename": "gcc/gcc.info-2", "status": "added", "additions": 1142, "deletions": 0, "changes": 1142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-2?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1142 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Warning Options,  Next: Debugging Options,  Prev: C++ Dialect Options,  Up: Invoking GCC\n+\n+Options to Request or Suppress Warnings\n+=======================================\n+\n+   Warnings are diagnostic messages that report constructions which are\n+not inherently erroneous but which are risky or suggest there may have\n+been an error.\n+\n+   You can request many specific warnings with options beginning `-W',\n+for example `-Wimplicit' to request warnings on implicit declarations.\n+Each of these specific warning options also has a negative form\n+beginning `-Wno-' to turn off warnings; for example, `-Wno-implicit'.\n+This manual lists only one of the two forms, whichever is not the\n+default.\n+\n+   These options control the amount and kinds of warnings produced by\n+GNU CC:\n+\n+`-fsyntax-only'\n+     Check the code for syntax errors, but don't do anything beyond\n+     that.\n+\n+`-pedantic'\n+     Issue all the warnings demanded by strict ANSI standard C; reject\n+     all programs that use forbidden extensions.\n+\n+     Valid ANSI standard C programs should compile properly with or\n+     without this option (though a rare few will require `-ansi').\n+     However, without this option, certain GNU extensions and\n+     traditional C features are supported as well.  With this option,\n+     they are rejected.\n+\n+     `-pedantic' does not cause warning messages for use of the\n+     alternate keywords whose names begin and end with `__'.  Pedantic\n+     warnings are also disabled in the expression that follows\n+     `__extension__'.  However, only system header files should use\n+     these escape routes; application programs should avoid them.\n+     *Note Alternate Keywords::.\n+\n+     This option is not intended to be useful; it exists only to satisfy\n+     pedants who would otherwise claim that GNU CC fails to support the\n+     ANSI standard.\n+\n+     Some users try to use `-pedantic' to check programs for strict ANSI\n+     C conformance.  They soon find that it does not do quite what they\n+     want: it finds some non-ANSI practices, but not all--only those\n+     for which ANSI C *requires* a diagnostic.\n+\n+     A feature to report any failure to conform to ANSI C might be\n+     useful in some instances, but would require considerable\n+     additional work and would be quite different from `-pedantic'.  We\n+     recommend, rather, that users take advantage of the extensions of\n+     GNU C and disregard the limitations of other compilers.  Aside\n+     from certain supercomputers and obsolete small machines, there is\n+     less and less reason ever to use any other C compiler other than\n+     for bootstrapping GNU CC.\n+\n+`-pedantic-errors'\n+     Like `-pedantic', except that errors are produced rather than\n+     warnings.\n+\n+`-w'\n+     Inhibit all warning messages.\n+\n+`-Wno-import'\n+     Inhibit warning messages about the use of `#import'.\n+\n+`-Wchar-subscripts'\n+     Warn if an array subscript has type `char'.  This is a common cause\n+     of error, as programmers often forget that this type is signed on\n+     some machines.\n+\n+`-Wcomment'\n+     Warn whenever a comment-start sequence `/*' appears in a `/*'\n+     comment, or whenever a Backslash-Newline appears in a `//' comment.\n+\n+`-Wformat'\n+     Check calls to `printf' and `scanf', etc., to make sure that the\n+     arguments supplied have types appropriate to the format string\n+     specified.\n+\n+`-Wimplicit-int'\n+     Warn when a declaration does not specify a type.\n+\n+`-Wimplicit-function-declarations'\n+     Warn whenever a function is used before being declared.\n+\n+`-Wimplicit'\n+     Same as `-Wimplicit-int' `-Wimplicit-function-declaration'.\n+\n+`-Wmain'\n+     Warn if the type of `main' is suspicious.  `main' should be a\n+     function with external linkage, returning int, taking either zero\n+     arguments, two, or three arguments of appropriate types.\n+\n+`-Wparentheses'\n+     Warn if parentheses are omitted in certain contexts, such as when\n+     there is an assignment in a context where a truth value is\n+     expected, or when operators are nested whose precedence people\n+     often get confused about.\n+\n+     Also warn about constructions where there may be confusion to which\n+     `if' statement an `else' branch belongs.  Here is an example of\n+     such a case:\n+\n+          {\n+            if (a)\n+              if (b)\n+                foo ();\n+            else\n+              bar ();\n+          }\n+\n+     In C, every `else' branch belongs to the innermost possible `if'\n+     statement, which in this example is `if (b)'.  This is often not\n+     what the programmer expected, as illustrated in the above example\n+     by indentation the programmer chose.  When there is the potential\n+     for this confusion, GNU C will issue a warning when this flag is\n+     specified.  To eliminate the warning, add explicit braces around\n+     the innermost `if' statement so there is no way the `else' could\n+     belong to the enclosing `if'.  The resulting code would look like\n+     this:\n+\n+          {\n+            if (a)\n+              {\n+                if (b)\n+                  foo ();\n+                else\n+                  bar ();\n+              }\n+          }\n+\n+`-Wreturn-type'\n+     Warn whenever a function is defined with a return-type that\n+     defaults to `int'.  Also warn about any `return' statement with no\n+     return-value in a function whose return-type is not `void'.\n+\n+`-Wswitch'\n+     Warn whenever a `switch' statement has an index of enumeral type\n+     and lacks a `case' for one or more of the named codes of that\n+     enumeration.  (The presence of a `default' label prevents this\n+     warning.)  `case' labels outside the enumeration range also\n+     provoke warnings when this option is used.\n+\n+`-Wtrigraphs'\n+     Warn if any trigraphs are encountered (assuming they are enabled).\n+\n+`-Wunused'\n+     Warn whenever a variable is unused aside from its declaration,\n+     whenever a function is declared static but never defined, whenever\n+     a label is declared but not used, and whenever a statement\n+     computes a result that is explicitly not used.\n+\n+     To suppress this warning for an expression, simply cast it to\n+     void.  For unused variables and parameters, use the `unused'\n+     attribute (*note Variable Attributes::.).\n+\n+`-Wuninitialized'\n+     An automatic variable is used without first being initialized.\n+\n+     These warnings are possible only in optimizing compilation,\n+     because they require data flow information that is computed only\n+     when optimizing.  If you don't specify `-O', you simply won't get\n+     these warnings.\n+\n+     These warnings occur only for variables that are candidates for\n+     register allocation.  Therefore, they do not occur for a variable\n+     that is declared `volatile', or whose address is taken, or whose\n+     size is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for\n+     structures, unions or arrays, even when they are in registers.\n+\n+     Note that there may be no warning about a variable that is used\n+     only to compute a value that itself is never used, because such\n+     computations may be deleted by data flow analysis before the\n+     warnings are printed.\n+\n+     These warnings are made optional because GNU CC is not smart\n+     enough to see all the reasons why the code might be correct\n+     despite appearing to have an error.  Here is one example of how\n+     this can happen:\n+\n+          {\n+            int x;\n+            switch (y)\n+              {\n+              case 1: x = 1;\n+                break;\n+              case 2: x = 4;\n+                break;\n+              case 3: x = 5;\n+              }\n+            foo (x);\n+          }\n+\n+     If the value of `y' is always 1, 2 or 3, then `x' is always\n+     initialized, but GNU CC doesn't know this.  Here is another common\n+     case:\n+\n+          {\n+            int save_y;\n+            if (change_y) save_y = y, y = new_y;\n+            ...\n+            if (change_y) y = save_y;\n+          }\n+\n+     This has no bug because `save_y' is used only if it is set.\n+\n+     Some spurious warnings can be avoided if you declare all the\n+     functions you use that never return as `noreturn'.  *Note Function\n+     Attributes::.\n+\n+`-Wreorder (C++ only)'\n+     Warn when the order of member initializers given in the code does\n+     not match the order in which they must be executed.  For instance:\n+\n+          struct A {\n+            int i;\n+            int j;\n+            A(): j (0), i (1) { }\n+          };\n+\n+     Here the compiler will warn that the member initializers for `i'\n+     and `j' will be rearranged to match the declaration order of the\n+     members.\n+\n+`-Wtemplate-debugging'\n+     When using templates in a C++ program, warn if debugging is not yet\n+     fully available (C++ only).\n+\n+`-Wall'\n+     All of the above `-W' options combined.  This enables all the\n+     warnings about constructions that some users consider\n+     questionable, and that are easy to avoid (or modify to prevent the\n+     warning), even in conjunction with macros.\n+\n+   The following `-W...' options are not implied by `-Wall'.  Some of\n+them warn about constructions that users generally do not consider\n+questionable, but which occasionally you might wish to check for;\n+others warn about constructions that are necessary or hard to avoid in\n+some cases, and there is no simple way to modify the code to suppress\n+the warning.\n+\n+`-W'\n+     Print extra warning messages for these events:\n+\n+        * A nonvolatile automatic variable might be changed by a call to\n+          `longjmp'.  These warnings as well are possible only in\n+          optimizing compilation.\n+\n+          The compiler sees only the calls to `setjmp'.  It cannot know\n+          where `longjmp' will be called; in fact, a signal handler\n+          could call it at any point in the code.  As a result, you may\n+          get a warning even when there is in fact no problem because\n+          `longjmp' cannot in fact be called at the place which would\n+          cause a problem.\n+\n+        * A function can return either with or without a value.\n+          (Falling off the end of the function body is considered\n+          returning without a value.)  For example, this function would\n+          evoke such a warning:\n+\n+               foo (a)\n+               {\n+                 if (a > 0)\n+                   return a;\n+               }\n+\n+        * An expression-statement or the left-hand side of a comma\n+          expression contains no side effects.  To suppress the\n+          warning, cast the unused expression to void.  For example, an\n+          expression such as `x[i,j]' will cause a warning, but\n+          `x[(void)i,j]' will not.\n+\n+        * An unsigned value is compared against zero with `<' or `<='.\n+\n+        * A comparison like `x<=y<=z' appears; this is equivalent to\n+          `(x<=y ? 1 : 0) <= z', which is a different interpretation\n+          from that of ordinary mathematical notation.\n+\n+        * Storage-class specifiers like `static' are not the first\n+          things in a declaration.  According to the C Standard, this\n+          usage is obsolescent.\n+\n+        * If `-Wall' or `-Wunused' is also specified, warn about unused\n+          arguments.\n+\n+        * A comparison between signed and unsigned values could produce\n+          an incorrect result when the signed value is converted to\n+          unsigned.  (But do not warn if `-Wno-sign-compare' is also\n+          specified.)\n+\n+        * An aggregate has a partly bracketed initializer.  For\n+          example, the following code would evoke such a warning,\n+          because braces are missing around the initializer for `x.h':\n+\n+               struct s { int f, g; };\n+               struct t { struct s h; int i; };\n+               struct t x = { 1, 2, 3 };\n+\n+`-Wtraditional'\n+     Warn about certain constructs that behave differently in\n+     traditional and ANSI C.\n+\n+        * Macro arguments occurring within string constants in the\n+          macro body.  These would substitute the argument in\n+          traditional C, but are part of the constant in ANSI C.\n+\n+        * A function declared external in one block and then used after\n+          the end of the block.\n+\n+        * A `switch' statement has an operand of type `long'.\n+\n+`-Wundef'\n+     Warn if an undefined identifier is evaluated in an `#if' directive.\n+\n+`-Wshadow'\n+     Warn whenever a local variable shadows another local variable.\n+\n+`-Wid-clash-LEN'\n+     Warn whenever two distinct identifiers match in the first LEN\n+     characters.  This may help you prepare a program that will compile\n+     with certain obsolete, brain-damaged compilers.\n+\n+`-Wlarger-than-LEN'\n+     Warn whenever an object of larger than LEN bytes is defined.\n+\n+`-Wpointer-arith'\n+     Warn about anything that depends on the \"size of\" a function type\n+     or of `void'.  GNU C assigns these types a size of 1, for\n+     convenience in calculations with `void *' pointers and pointers to\n+     functions.\n+\n+`-Wbad-function-cast'\n+     Warn whenever a function call is cast to a non-matching type.  For\n+     example, warn if `int malloc()' is cast to `anything *'.\n+\n+`-Wcast-qual'\n+     Warn whenever a pointer is cast so as to remove a type qualifier\n+     from the target type.  For example, warn if a `const char *' is\n+     cast to an ordinary `char *'.\n+\n+`-Wcast-align'\n+     Warn whenever a pointer is cast such that the required alignment\n+     of the target is increased.  For example, warn if a `char *' is\n+     cast to an `int *' on machines where integers can only be accessed\n+     at two- or four-byte boundaries.\n+\n+`-Wwrite-strings'\n+     Give string constants the type `const char[LENGTH]' so that\n+     copying the address of one into a non-`const' `char *' pointer\n+     will get a warning.  These warnings will help you find at compile\n+     time code that can try to write into a string constant, but only\n+     if you have been very careful about using `const' in declarations\n+     and prototypes.  Otherwise, it will just be a nuisance; this is\n+     why we did not make `-Wall' request these warnings.\n+\n+`-Wconversion'\n+     Warn if a prototype causes a type conversion that is different\n+     from what would happen to the same argument in the absence of a\n+     prototype.  This includes conversions of fixed point to floating\n+     and vice versa, and conversions changing the width or signedness\n+     of a fixed point argument except when the same as the default\n+     promotion.\n+\n+     Also, warn if a negative integer constant expression is implicitly\n+     converted to an unsigned type.  For example, warn about the\n+     assignment `x = -1' if `x' is unsigned.  But do not warn about\n+     explicit casts like `(unsigned) -1'.\n+\n+`-Wsign-compare'\n+     Warn when a comparison between signed and unsigned values could\n+     produce an incorrect result when the signed value is converted to\n+     unsigned.  This warning is also enabled by `-W'; to get the other\n+     warnings of `-W' without this warning, use `-W -Wno-sign-compare'.\n+\n+`-Waggregate-return'\n+     Warn if any functions that return structures or unions are defined\n+     or called.  (In languages where you can return an array, this also\n+     elicits a warning.)\n+\n+`-Wstrict-prototypes'\n+     Warn if a function is declared or defined without specifying the\n+     argument types.  (An old-style function definition is permitted\n+     without a warning if preceded by a declaration which specifies the\n+     argument types.)\n+\n+`-Wmissing-prototypes'\n+     Warn if a global function is defined without a previous prototype\n+     declaration.  This warning is issued even if the definition itself\n+     provides a prototype.  The aim is to detect global functions that\n+     fail to be declared in header files.\n+\n+`-Wmissing-declarations'\n+     Warn if a global function is defined without a previous\n+     declaration.  Do so even if the definition itself provides a\n+     prototype.  Use this option to detect global functions that are\n+     not declared in header files.\n+\n+`-Wredundant-decls'\n+     Warn if anything is declared more than once in the same scope,\n+     even in cases where multiple declaration is valid and changes\n+     nothing.\n+\n+`-Wnested-externs'\n+     Warn if an `extern' declaration is encountered within an function.\n+\n+`-Winline'\n+     Warn if a function can not be inlined, and either it was declared\n+     as inline, or else the `-finline-functions' option was given.\n+\n+`-Woverloaded-virtual'\n+     Warn when a derived class function declaration may be an error in\n+     defining a virtual function (C++ only).  In a derived class, the\n+     definitions of virtual functions must match the type signature of a\n+     virtual function declared in the base class.  With this option, the\n+     compiler warns when you define a function with the same name as a\n+     virtual function, but with a type signature that does not match any\n+     declarations from the base class.\n+\n+`-Wsynth (C++ only)'\n+     Warn when g++'s synthesis behavior does not match that of cfront.\n+     For instance:\n+\n+          struct A {\n+            operator int ();\n+            A& operator = (int);\n+          };\n+          \n+          main ()\n+          {\n+            A a,b;\n+            a = b;\n+          }\n+\n+     In this example, g++ will synthesize a default `A& operator =\n+     (const A&);', while cfront will use the user-defined `operator ='.\n+\n+`-Werror'\n+     Make all warnings into errors.\n+\n+\u001f\n+File: gcc.info,  Node: Debugging Options,  Next: Optimize Options,  Prev: Warning Options,  Up: Invoking GCC\n+\n+Options for Debugging Your Program or GNU CC\n+============================================\n+\n+   GNU CC has various special options that are used for debugging\n+either your program or GCC:\n+\n+`-g'\n+     Produce debugging information in the operating system's native\n+     format (stabs, COFF, XCOFF, or DWARF).  GDB can work with this\n+     debugging information.\n+\n+     On most systems that use stabs format, `-g' enables use of extra\n+     debugging information that only GDB can use; this extra information\n+     makes debugging work better in GDB but will probably make other\n+     debuggers crash or refuse to read the program.  If you want to\n+     control for certain whether to generate the extra information, use\n+     `-gstabs+', `-gstabs', `-gxcoff+', `-gxcoff', `-gdwarf-1+', or\n+     `-gdwarf-1' (see below).\n+\n+     Unlike most other C compilers, GNU CC allows you to use `-g' with\n+     `-O'.  The shortcuts taken by optimized code may occasionally\n+     produce surprising results: some variables you declared may not\n+     exist at all; flow of control may briefly move where you did not\n+     expect it; some statements may not be executed because they\n+     compute constant results or their values were already at hand;\n+     some statements may execute in different places because they were\n+     moved out of loops.\n+\n+     Nevertheless it proves possible to debug optimized output.  This\n+     makes it reasonable to use the optimizer for programs that might\n+     have bugs.\n+\n+     The following options are useful when GNU CC is generated with the\n+     capability for more than one debugging format.\n+\n+`-ggdb'\n+     Produce debugging information for use by GDB.  This means to use\n+     the most expressive format available (DWARF 2, stabs, or the\n+     native format if neither of those are supported), including GDB\n+     extensions if at all possible.\n+\n+`-gstabs'\n+     Produce debugging information in stabs format (if that is\n+     supported), without GDB extensions.  This is the format used by\n+     DBX on most BSD systems.  On MIPS, Alpha and System V Release 4\n+     systems this option produces stabs debugging output which is not\n+     understood by DBX or SDB.  On System V Release 4 systems this\n+     option requires the GNU assembler.\n+\n+`-gstabs+'\n+     Produce debugging information in stabs format (if that is\n+     supported), using GNU extensions understood only by the GNU\n+     debugger (GDB).  The use of these extensions is likely to make\n+     other debuggers crash or refuse to read the program.\n+\n+`-gcoff'\n+     Produce debugging information in COFF format (if that is\n+     supported).  This is the format used by SDB on most System V\n+     systems prior to System V Release 4.\n+\n+`-gxcoff'\n+     Produce debugging information in XCOFF format (if that is\n+     supported).  This is the format used by the DBX debugger on IBM\n+     RS/6000 systems.\n+\n+`-gxcoff+'\n+     Produce debugging information in XCOFF format (if that is\n+     supported), using GNU extensions understood only by the GNU\n+     debugger (GDB).  The use of these extensions is likely to make\n+     other debuggers crash or refuse to read the program, and may cause\n+     assemblers other than the GNU assembler (GAS) to fail with an\n+     error.\n+\n+`-gdwarf'\n+     Produce debugging information in DWARF version 1 format (if that is\n+     supported).  This is the format used by SDB on most System V\n+     Release 4 systems.\n+\n+`-gdwarf+'\n+     Produce debugging information in DWARF version 1 format (if that is\n+     supported), using GNU extensions understood only by the GNU\n+     debugger (GDB).  The use of these extensions is likely to make\n+     other debuggers crash or refuse to read the program.\n+\n+`-gdwarf-2'\n+     Produce debugging information in DWARF version 2 format (if that is\n+     supported).  This is the format used by DBX on IRIX 6.\n+\n+`-gLEVEL'\n+`-ggdbLEVEL'\n+`-gstabsLEVEL'\n+`-gcoffLEVEL'\n+`-gxcoffLEVEL'\n+`-gdwarfLEVEL'\n+`-gdwarf-2LEVEL'\n+     Request debugging information and also use LEVEL to specify how\n+     much information.  The default level is 2.\n+\n+     Level 1 produces minimal information, enough for making backtraces\n+     in parts of the program that you don't plan to debug.  This\n+     includes descriptions of functions and external variables, but no\n+     information about local variables and no line numbers.\n+\n+     Level 3 includes extra information, such as all the macro\n+     definitions present in the program.  Some debuggers support macro\n+     expansion when you use `-g3'.\n+\n+`-p'\n+     Generate extra code to write profile information suitable for the\n+     analysis program `prof'.  You must use this option when compiling\n+     the source files you want data about, and you must also use it when\n+     linking.\n+\n+`-pg'\n+     Generate extra code to write profile information suitable for the\n+     analysis program `gprof'.  You must use this option when compiling\n+     the source files you want data about, and you must also use it when\n+     linking.\n+\n+`-a'\n+     Generate extra code to write profile information for basic blocks,\n+     which will record the number of times each basic block is\n+     executed, the basic block start address, and the function name\n+     containing the basic block.  If `-g' is used, the line number and\n+     filename of the start of the basic block will also be recorded.\n+     If not overridden by the machine description, the default action is\n+     to append to the text file `bb.out'.\n+\n+     This data could be analyzed by a program like `tcov'.  Note,\n+     however, that the format of the data is not what `tcov' expects.\n+     Eventually GNU `gprof' should be extended to process this data.\n+\n+`-ax'\n+     Generate extra code to profile basic blocks.  Your executable will\n+     produce output that is a superset of that produced when `-a' is\n+     used.  Additional output is the source and target address of the\n+     basic blocks where a jump takes place, the number of times a jump\n+     is executed, and (optionally) the complete sequence of basic\n+     blocks being executed.  The output is appended to file `bb.out'.\n+\n+     You can examine different profiling aspects without recompilation.\n+     Your execuable will read a list of function names from file\n+     `bb.in'.  Profiling starts when a function on the list is entered\n+     and stops when that invocation is exited.  To exclude a function\n+     from profiling, prefix its name with `-'.  If a function name is\n+     not unique, you can disambiguate it by writing it in the form\n+     `/path/filename.d:functionname'.  Your executable will write the\n+     available paths and filenames in file `bb.out'.\n+\n+     Several function names have a special meaning:\n+    `__bb_jumps__'\n+          Write source, target and frequency of jumps to file `bb.out'.\n+\n+    `__bb_hidecall__'\n+          Exclude function calls from frequency count.\n+\n+    `__bb_showret__'\n+          Include function returns in frequency count.\n+\n+    `__bb_trace__'\n+          Write the sequence of basic blocks executed to file\n+          `bbtrace.gz'.  The file will be compressed using the program\n+          `gzip', which must exist in your `PATH'.  On systems without\n+          the `popen' function, the file will be named `bbtrace' and\n+          will not be compressed.  *Profiling for even a few seconds on\n+          these systems will produce a very large file.*  Note:\n+          `__bb_hidecall__' and `__bb_showret__' will not affect the\n+          sequence written to `bbtrace.gz'.\n+\n+     Here's a short example using different profiling parameters in\n+     file `bb.in'.  Assume function `foo' consists of basic blocks 1\n+     and 2 and is called twice from block 3 of function `main'.  After\n+     the calls, block 3 transfers control to block 4 of `main'.\n+\n+     With `__bb_trace__' and `main' contained in file `bb.in', the\n+     following sequence of blocks is written to file `bbtrace.gz': 0 3\n+     1 2 1 2 4.  The return from block 2 to block 3 is not shown,\n+     because the return is to a point inside the block and not to the\n+     top.  The block address 0 always indicates, that control is\n+     transferred to the trace from somewhere outside the observed\n+     functions.  With `-foo' added to `bb.in', the blocks of function\n+     `foo' are removed from the trace, so only 0 3 4 remains.\n+\n+     With `__bb_jumps__' and `main' contained in file `bb.in', jump\n+     frequencies will be written to file `bb.out'.  The frequencies are\n+     obtained by constructing a trace of blocks and incrementing a\n+     counter for every neighbouring pair of blocks in the trace.  The\n+     trace 0 3 1 2 1 2 4 displays the following frequencies:\n+\n+          Jump from block 0x0 to block 0x3 executed 1 time(s)\n+          Jump from block 0x3 to block 0x1 executed 1 time(s)\n+          Jump from block 0x1 to block 0x2 executed 2 time(s)\n+          Jump from block 0x2 to block 0x1 executed 1 time(s)\n+          Jump from block 0x2 to block 0x4 executed 1 time(s)\n+\n+     With `__bb_hidecall__', control transfer due to call instructions\n+     is removed from the trace, that is the trace is cut into three\n+     parts: 0 3 4, 0 1 2 and 0 1 2.  With `__bb_showret__', control\n+     transfer due to return instructions is added to the trace.  The\n+     trace becomes: 0 3 1 2 3 1 2 3 4.  Note, that this trace is not\n+     the same, as the sequence written to `bbtrace.gz'.  It is solely\n+     used for counting jump frequencies.\n+\n+`-fprofile-arcs'\n+     Instrument \"arcs\" during compilation.  For each function of your\n+     program, GNU CC creates a program flow graph, then finds a\n+     spanning tree for the graph.  Only arcs that are not on the\n+     spanning tree have to be instrumented: the compiler adds code to\n+     count the number of times that these arcs are executed.  When an\n+     arc is the only exit or only entrance to a block, the\n+     instrumentation code can be added to the block; otherwise, a new\n+     basic block must be created to hold the instrumentation code.\n+\n+     Since not every arc in the program must be instrumented, programs\n+     compiled with this option run faster than programs compiled with\n+     `-a', which adds instrumentation code to every basic block in the\n+     program.  The tradeoff: since `gcov' does not have execution\n+     counts for all branches, it must start with the execution counts\n+     for the instrumented branches, and then iterate over the program\n+     flow graph until the entire graph has been solved.  Hence, `gcov'\n+     runs a little more slowly than a program which uses information\n+     from `-a'.\n+\n+     `-fprofile-arcs' also makes it possible to estimate branch\n+     probabilities, and to calculate basic block execution counts.  In\n+     general, basic block execution counts do not give enough\n+     information to estimate all branch probabilities.  When the\n+     compiled program exits, it saves the arc execution counts to a\n+     file called `SOURCENAME.da'.  Use the compiler option\n+     `-fbranch-probabilities' (*note Options that Control Optimization:\n+     Optimize Options.) when recompiling, to optimize using estimated\n+     branch probabilities.\n+\n+`-ftest-coverage'\n+     Create data files for the `gcov' code-coverage utility (*note\n+     `gcov': a GNU CC Test Coverage Program: Gcov.).  The data file\n+     names begin with the name of your source file:\n+\n+    `SOURCENAME.bb'\n+          A mapping from basic blocks to line numbers, which `gcov'\n+          uses to associate basic block execution counts with line\n+          numbers.\n+\n+    `SOURCENAME.bbg'\n+          A list of all arcs in the program flow graph.  This allows\n+          `gcov' to reconstruct the program flow graph, so that it can\n+          compute all basic block and arc execution counts from the\n+          information in the `SOURCENAME.da' file (this last file is\n+          the output from `-fprofile-arcs').\n+\n+`-dLETTERS'\n+     Says to make debugging dumps during compilation at times specified\n+     by LETTERS.  This is used for debugging the compiler.  The file\n+     names for most of the dumps are made by appending a word to the\n+     source file name (e.g.  `foo.c.rtl' or `foo.c.jump').  Here are the\n+     possible letters for use in LETTERS, and their meanings:\n+\n+    `M'\n+          Dump all macro definitions, at the end of preprocessing, and\n+          write no output.\n+\n+    `N'\n+          Dump all macro names, at the end of preprocessing.\n+\n+    `D'\n+          Dump all macro definitions, at the end of preprocessing, in\n+          addition to normal output.\n+\n+    `y'\n+          Dump debugging information during parsing, to standard error.\n+\n+    `r'\n+          Dump after RTL generation, to `FILE.rtl'.\n+\n+    `x'\n+          Just generate RTL for a function instead of compiling it.\n+          Usually used with `r'.\n+\n+    `j'\n+          Dump after first jump optimization, to `FILE.jump'.\n+\n+    `s'\n+          Dump after CSE (including the jump optimization that sometimes\n+          follows CSE), to `FILE.cse'.\n+\n+    `L'\n+          Dump after loop optimization, to `FILE.loop'.\n+\n+    `t'\n+          Dump after the second CSE pass (including the jump\n+          optimization that sometimes follows CSE), to `FILE.cse2'.\n+\n+    `f'\n+          Dump after flow analysis, to `FILE.flow'.\n+\n+    `c'\n+          Dump after instruction combination, to the file\n+          `FILE.combine'.\n+\n+    `S'\n+          Dump after the first instruction scheduling pass, to\n+          `FILE.sched'.\n+\n+    `l'\n+          Dump after local register allocation, to `FILE.lreg'.\n+\n+    `g'\n+          Dump after global register allocation, to `FILE.greg'.\n+\n+    `R'\n+          Dump after the second instruction scheduling pass, to\n+          `FILE.sched2'.\n+\n+    `J'\n+          Dump after last jump optimization, to `FILE.jump2'.\n+\n+    `d'\n+          Dump after delayed branch scheduling, to `FILE.dbr'.\n+\n+    `k'\n+          Dump after conversion from registers to stack, to\n+          `FILE.stack'.\n+\n+    `a'\n+          Produce all the dumps listed above.\n+\n+    `m'\n+          Print statistics on memory usage, at the end of the run, to\n+          standard error.\n+\n+    `p'\n+          Annotate the assembler output with a comment indicating which\n+          pattern and alternative was used.\n+\n+    `A'\n+          Annotate the assembler output with miscellaneous debugging\n+          information.\n+\n+`-fpretend-float'\n+     When running a cross-compiler, pretend that the target machine\n+     uses the same floating point format as the host machine.  This\n+     causes incorrect output of the actual floating constants, but the\n+     actual instruction sequence will probably be the same as GNU CC\n+     would make when running on the target machine.\n+\n+`-save-temps'\n+     Store the usual \"temporary\" intermediate files permanently; place\n+     them in the current directory and name them based on the source\n+     file.  Thus, compiling `foo.c' with `-c -save-temps' would produce\n+     files `foo.i' and `foo.s', as well as `foo.o'.\n+\n+`-print-file-name=LIBRARY'\n+     Print the full absolute name of the library file LIBRARY that\n+     would be used when linking--and don't do anything else.  With this\n+     option, GNU CC does not compile or link anything; it just prints\n+     the file name.\n+\n+`-print-prog-name=PROGRAM'\n+     Like `-print-file-name', but searches for a program such as `cpp'.\n+\n+`-print-libgcc-file-name'\n+     Same as `-print-file-name=libgcc.a'.\n+\n+     This is useful when you use `-nostdlib' or `-nodefaultlibs' but\n+     you do want to link with `libgcc.a'.  You can do\n+\n+          gcc -nostdlib FILES... `gcc -print-libgcc-file-name`\n+\n+`-print-search-dirs'\n+     Print the name of the configured installation directory and a list\n+     of program and library directories gcc will search--and don't do\n+     anything else.\n+\n+     This is useful when gcc prints the error message `installation\n+     problem, cannot exec cpp: No such file or directory'.  To resolve\n+     this you either need to put `cpp' and the other compiler\n+     components where gcc expects to find them, or you can set the\n+     environment variable `GCC_EXEC_PREFIX' to the directory where you\n+     installed them.  Don't forget the trailing '/'.  *Note Environment\n+     Variables::.\n+\n+\u001f\n+File: gcc.info,  Node: Optimize Options,  Next: Preprocessor Options,  Prev: Debugging Options,  Up: Invoking GCC\n+\n+Options That Control Optimization\n+=================================\n+\n+   These options control various sorts of optimizations:\n+\n+`-O'\n+`-O1'\n+     Optimize.  Optimizing compilation takes somewhat more time, and a\n+     lot more memory for a large function.\n+\n+     Without `-O', the compiler's goal is to reduce the cost of\n+     compilation and to make debugging produce the expected results.\n+     Statements are independent: if you stop the program with a\n+     breakpoint between statements, you can then assign a new value to\n+     any variable or change the program counter to any other statement\n+     in the function and get exactly the results you would expect from\n+     the source code.\n+\n+     Without `-O', the compiler only allocates variables declared\n+     `register' in registers.  The resulting compiled code is a little\n+     worse than produced by PCC without `-O'.\n+\n+     With `-O', the compiler tries to reduce code size and execution\n+     time.\n+\n+     When you specify `-O', the compiler turns on `-fthread-jumps' and\n+     `-fdefer-pop' on all machines.  The compiler turns on\n+     `-fdelayed-branch' on machines that have delay slots, and\n+     `-fomit-frame-pointer' on machines that can support debugging even\n+     without a frame pointer.  On some machines the compiler also turns\n+     on other flags.\n+\n+`-O2'\n+     Optimize even more.  GNU CC performs nearly all supported\n+     optimizations that do not involve a space-speed tradeoff.  The\n+     compiler does not perform loop unrolling or function inlining when\n+     you specify `-O2'.  As compared to `-O', this option increases\n+     both compilation time and the performance of the generated code.\n+\n+     `-O2' turns on all optional optimizations except for loop unrolling\n+     and function inlining.  It also turns on the `-fforce-mem' option\n+     on all machines and frame pointer elimination on machines where\n+     doing so does not interfere with debugging.\n+\n+`-O3'\n+     Optimize yet more.  `-O3' turns on all optimizations specified by\n+     `-O2' and also turns on the `inline-functions' option.\n+\n+`-O0'\n+     Do not optimize.\n+\n+     If you use multiple `-O' options, with or without level numbers,\n+     the last such option is the one that is effective.\n+\n+   Options of the form `-fFLAG' specify machine-independent flags.\n+Most flags have both positive and negative forms; the negative form of\n+`-ffoo' would be `-fno-foo'.  In the table below, only one of the forms\n+is listed--the one which is not the default.  You can figure out the\n+other form by either removing `no-' or adding it.\n+\n+`-ffloat-store'\n+     Do not store floating point variables in registers, and inhibit\n+     other options that might change whether a floating point value is\n+     taken from a register or memory.\n+\n+     This option prevents undesirable excess precision on machines such\n+     as the 68000 where the floating registers (of the 68881) keep more\n+     precision than a `double' is supposed to have.  Similarly for the\n+     x86 architecture.  For most programs, the excess precision does\n+     only good, but a few programs rely on the precise definition of\n+     IEEE floating point.  Use `-ffloat-store' for such programs.\n+\n+`-fno-default-inline'\n+     Do not make member functions inline by default merely because they\n+     are defined inside the class scope (C++ only).  Otherwise, when\n+     you specify `-O', member functions defined inside class scope are\n+     compiled inline by default; i.e., you don't need to add `inline'\n+     in front of the member function name.\n+\n+`-fno-defer-pop'\n+     Always pop the arguments to each function call as soon as that\n+     function returns.  For machines which must pop arguments after a\n+     function call, the compiler normally lets arguments accumulate on\n+     the stack for several function calls and pops them all at once.\n+\n+`-fforce-mem'\n+     Force memory operands to be copied into registers before doing\n+     arithmetic on them.  This produces better code by making all memory\n+     references potential common subexpressions.  When they are not\n+     common subexpressions, instruction combination should eliminate\n+     the separate register-load.  The `-O2' option turns on this option.\n+\n+`-fforce-addr'\n+     Force memory address constants to be copied into registers before\n+     doing arithmetic on them.  This may produce better code just as\n+     `-fforce-mem' may.\n+\n+`-fomit-frame-pointer'\n+     Don't keep the frame pointer in a register for functions that\n+     don't need one.  This avoids the instructions to save, set up and\n+     restore frame pointers; it also makes an extra register available\n+     in many functions.  *It also makes debugging impossible on some\n+     machines.*\n+\n+     On some machines, such as the Vax, this flag has no effect, because\n+     the standard calling sequence automatically handles the frame\n+     pointer and nothing is saved by pretending it doesn't exist.  The\n+     machine-description macro `FRAME_POINTER_REQUIRED' controls\n+     whether a target machine supports this flag.  *Note Registers::.\n+\n+`-fno-inline'\n+     Don't pay attention to the `inline' keyword.  Normally this option\n+     is used to keep the compiler from expanding any functions inline.\n+     Note that if you are not optimizing, no functions can be expanded\n+     inline.\n+\n+`-finline-functions'\n+     Integrate all simple functions into their callers.  The compiler\n+     heuristically decides which functions are simple enough to be worth\n+     integrating in this way.\n+\n+     If all calls to a given function are integrated, and the function\n+     is declared `static', then the function is normally not output as\n+     assembler code in its own right.\n+\n+`-fkeep-inline-functions'\n+     Even if all calls to a given function are integrated, and the\n+     function is declared `static', nevertheless output a separate\n+     run-time callable version of the function.  This switch does not\n+     affect `extern inline' functions.\n+\n+`-fkeep-static-consts'\n+     Emit variables declared `static const' when optimization isn't\n+     turned on, even if the variables aren't referenced.\n+\n+     GNU CC enables this option by default.  If you want to force the\n+     compiler to check if the variable was referenced, regardless of\n+     whether or not optimization is turned on, use the\n+     `-fno-keep-static-consts' option.\n+\n+`-fno-function-cse'\n+     Do not put function addresses in registers; make each instruction\n+     that calls a constant function contain the function's address\n+     explicitly.\n+\n+     This option results in less efficient code, but some strange hacks\n+     that alter the assembler output may be confused by the\n+     optimizations performed when this option is not used.\n+\n+`-ffast-math'\n+     This option allows GCC to violate some ANSI or IEEE rules and/or\n+     specifications in the interest of optimizing code for speed.  For\n+     example, it allows the compiler to assume arguments to the `sqrt'\n+     function are non-negative numbers and that no floating-point values\n+     are NaNs.\n+\n+     This option should never be turned on by any `-O' option since it\n+     can result in incorrect output for programs which depend on an\n+     exact implementation of IEEE or ANSI rules/specifications for math\n+     functions.\n+\n+   The following options control specific optimizations.  The `-O2'\n+option turns on all of these optimizations except `-funroll-loops' and\n+`-funroll-all-loops'.  On most machines, the `-O' option turns on the\n+`-fthread-jumps' and `-fdelayed-branch' options, but specific machines\n+may handle it differently.\n+\n+   You can use the following flags in the rare cases when \"fine-tuning\"\n+of optimizations to be performed is desired.\n+\n+`-fstrength-reduce'\n+     Perform the optimizations of loop strength reduction and\n+     elimination of iteration variables.\n+\n+`-fthread-jumps'\n+     Perform optimizations where we check to see if a jump branches to a\n+     location where another comparison subsumed by the first is found.\n+     If so, the first branch is redirected to either the destination of\n+     the second branch or a point immediately following it, depending\n+     on whether the condition is known to be true or false.\n+\n+`-fcse-follow-jumps'\n+     In common subexpression elimination, scan through jump instructions\n+     when the target of the jump is not reached by any other path.  For\n+     example, when CSE encounters an `if' statement with an `else'\n+     clause, CSE will follow the jump when the condition tested is\n+     false.\n+\n+`-fcse-skip-blocks'\n+     This is similar to `-fcse-follow-jumps', but causes CSE to follow\n+     jumps which conditionally skip over blocks.  When CSE encounters a\n+     simple `if' statement with no else clause, `-fcse-skip-blocks'\n+     causes CSE to follow the jump around the body of the `if'.\n+\n+`-frerun-cse-after-loop'\n+     Re-run common subexpression elimination after loop optimizations\n+     has been performed.\n+\n+`-fexpensive-optimizations'\n+     Perform a number of minor optimizations that are relatively\n+     expensive.\n+\n+`-fdelayed-branch'\n+     If supported for the target machine, attempt to reorder\n+     instructions to exploit instruction slots available after delayed\n+     branch instructions.\n+\n+`-fschedule-insns'\n+     If supported for the target machine, attempt to reorder\n+     instructions to eliminate execution stalls due to required data\n+     being unavailable.  This helps machines that have slow floating\n+     point or memory load instructions by allowing other instructions\n+     to be issued until the result of the load or floating point\n+     instruction is required.\n+\n+`-fschedule-insns2'\n+     Similar to `-fschedule-insns', but requests an additional pass of\n+     instruction scheduling after register allocation has been done.\n+     This is especially useful on machines with a relatively small\n+     number of registers and where memory load instructions take more\n+     than one cycle.\n+\n+`-ffunction-sections'\n+     Place each function into its own section in the output file if the\n+     target supports arbitrary sections.  The function's name determines\n+     the section's name in the output file.\n+\n+     Use this option on systems where the linker can perform\n+     optimizations to improve locality of reference in the instruction\n+     space.  HPPA processors running HP-UX and Sparc processors running\n+     Solaris 2 have linkers with such optimizations.  Other systems\n+     using the ELF object format as well as AIX may have these\n+     optimizations in the future.\n+\n+     Only use this option when there are significant benefits from doing\n+     so.  When you specify this option, the assembler and linker will\n+     create larger object and executable files and will also be slower.\n+     You will not be able to use `gprof' on all systems if you specify\n+     this option and you may have problems with debugging if you\n+     specify both this option and `-g'.\n+\n+`-fcaller-saves'\n+     Enable values to be allocated in registers that will be clobbered\n+     by function calls, by emitting extra instructions to save and\n+     restore the registers around such calls.  Such allocation is done\n+     only when it seems to result in better code than would otherwise\n+     be produced.\n+\n+     This option is enabled by default on certain machines, usually\n+     those which have no call-preserved registers to use instead.\n+\n+`-funroll-loops'\n+     Perform the optimization of loop unrolling.  This is only done for\n+     loops whose number of iterations can be determined at compile time\n+     or run time.  `-funroll-loop' implies both `-fstrength-reduce' and\n+     `-frerun-cse-after-loop'.\n+\n+`-funroll-all-loops'\n+     Perform the optimization of loop unrolling.  This is done for all\n+     loops and usually makes programs run more slowly.\n+     `-funroll-all-loops' implies `-fstrength-reduce' as well as\n+     `-frerun-cse-after-loop'.\n+\n+`-fno-peephole'\n+     Disable any machine-specific peephole optimizations.\n+\n+`-fbranch-probabilities'\n+     After running a program compiled with `-fprofile-arcs' (*note\n+     Options for Debugging Your Program or `gcc': Debugging Options.),\n+     you can compile it a second time using `-fbranch-probabilities',\n+     to improve optimizations based on guessing the path a branch might\n+     take.\n+\n+     With `-fbranch-probabilities', GNU CC puts a `REG_EXEC_COUNT' note\n+     on the first instruction of each basic block, and a `REG_BR_PROB'\n+     note on each `JUMP_INSN' and `CALL_INSN'.  These can be used to\n+     improve optimization.  Currently, they are only used in one place:\n+     in `reorg.c', instead of guessing which path a branch is mostly to\n+     take, the `REG_BR_PROB' values are used to exactly determine which\n+     path is taken more often.\n+"}, {"sha": "cf674a47b20bc442d2ae2206a3fc8fe687014f95", "filename": "gcc/gcc.info-20", "status": "added", "additions": 1207, "deletions": 0, "changes": 1207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-20", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-20", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-20?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1207 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Function Units,  Prev: Delay Slots,  Up: Insn Attributes\n+\n+Specifying Function Units\n+-------------------------\n+\n+   On most RISC machines, there are instructions whose results are not\n+available for a specific number of cycles.  Common cases are\n+instructions that load data from memory.  On many machines, a pipeline\n+stall will result if the data is referenced too soon after the load\n+instruction.\n+\n+   In addition, many newer microprocessors have multiple function\n+units, usually one for integer and one for floating point, and often\n+will incur pipeline stalls when a result that is needed is not yet\n+ready.\n+\n+   The descriptions in this section allow the specification of how much\n+time must elapse between the execution of an instruction and the time\n+when its result is used.  It also allows specification of when the\n+execution of an instruction will delay execution of similar instructions\n+due to function unit conflicts.\n+\n+   For the purposes of the specifications in this section, a machine is\n+divided into \"function units\", each of which execute a specific class\n+of instructions in first-in-first-out order.  Function units that\n+accept one instruction each cycle and allow a result to be used in the\n+succeeding instruction (usually via forwarding) need not be specified.\n+Classic RISC microprocessors will normally have a single function unit,\n+which we can call `memory'.  The newer \"superscalar\" processors will\n+often have function units for floating point operations, usually at\n+least a floating point adder and multiplier.\n+\n+   Each usage of a function units by a class of insns is specified with\n+a `define_function_unit' expression, which looks like this:\n+\n+     (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n+                           TEST READY-DELAY ISSUE-DELAY\n+                          [CONFLICT-LIST])\n+\n+   NAME is a string giving the name of the function unit.\n+\n+   MULTIPLICITY is an integer specifying the number of identical units\n+in the processor.  If more than one unit is specified, they will be\n+scheduled independently.  Only truly independent units should be\n+counted; a pipelined unit should be specified as a single unit.  (The\n+only common example of a machine that has multiple function units for a\n+single instruction class that are truly independent and not pipelined\n+are the two multiply and two increment units of the CDC 6600.)\n+\n+   SIMULTANEITY specifies the maximum number of insns that can be\n+executing in each instance of the function unit simultaneously or zero\n+if the unit is pipelined and has no limit.\n+\n+   All `define_function_unit' definitions referring to function unit\n+NAME must have the same name and values for MULTIPLICITY and\n+SIMULTANEITY.\n+\n+   TEST is an attribute test that selects the insns we are describing\n+in this definition.  Note that an insn may use more than one function\n+unit and a function unit may be specified in more than one\n+`define_function_unit'.\n+\n+   READY-DELAY is an integer that specifies the number of cycles after\n+which the result of the instruction can be used without introducing any\n+stalls.\n+\n+   ISSUE-DELAY is an integer that specifies the number of cycles after\n+the instruction matching the TEST expression begins using this unit\n+until a subsequent instruction can begin.  A cost of N indicates an N-1\n+cycle delay.  A subsequent instruction may also be delayed if an\n+earlier instruction has a longer READY-DELAY value.  This blocking\n+effect is computed using the SIMULTANEITY, READY-DELAY, ISSUE-DELAY,\n+and CONFLICT-LIST terms.  For a normal non-pipelined function unit,\n+SIMULTANEITY is one, the unit is taken to block for the READY-DELAY\n+cycles of the executing insn, and smaller values of ISSUE-DELAY are\n+ignored.\n+\n+   CONFLICT-LIST is an optional list giving detailed conflict costs for\n+this unit.  If specified, it is a list of condition test expressions to\n+be applied to insns chosen to execute in NAME following the particular\n+insn matching TEST that is already executing in NAME.  For each insn in\n+the list, ISSUE-DELAY specifies the conflict cost; for insns not in the\n+list, the cost is zero.  If not specified, CONFLICT-LIST defaults to\n+all instructions that use the function unit.\n+\n+   Typical uses of this vector are where a floating point function unit\n+can pipeline either single- or double-precision operations, but not\n+both, or where a memory unit can pipeline loads, but not stores, etc.\n+\n+   As an example, consider a classic RISC machine where the result of a\n+load instruction is not available for two cycles (a single \"delay\"\n+instruction is required) and where only one load instruction can be\n+executed simultaneously.  This would be specified as:\n+\n+     (define_function_unit \"memory\" 1 1 (eq_attr \"type\" \"load\") 2 0)\n+\n+   For the case of a floating point function unit that can pipeline\n+either single or double precision, but not both, the following could be\n+specified:\n+\n+     (define_function_unit\n+        \"fp\" 1 0 (eq_attr \"type\" \"sp_fp\") 4 4 [(eq_attr \"type\" \"dp_fp\")])\n+     (define_function_unit\n+        \"fp\" 1 0 (eq_attr \"type\" \"dp_fp\") 4 4 [(eq_attr \"type\" \"sp_fp\")])\n+\n+   *Note:* The scheduler attempts to avoid function unit conflicts and\n+uses all the specifications in the `define_function_unit' expression.\n+It has recently come to our attention that these specifications may not\n+allow modeling of some of the newer \"superscalar\" processors that have\n+insns using multiple pipelined units.  These insns will cause a\n+potential conflict for the second unit used during their execution and\n+there is no way of representing that conflict.  We welcome any examples\n+of how function unit conflicts work in such processors and suggestions\n+for their representation.\n+\n+\u001f\n+File: gcc.info,  Node: Target Macros,  Next: Config,  Prev: Machine Desc,  Up: Top\n+\n+Target Description Macros\n+*************************\n+\n+   In addition to the file `MACHINE.md', a machine description includes\n+a C header file conventionally given the name `MACHINE.h'.  This header\n+file defines numerous macros that convey the information about the\n+target machine that does not fit into the scheme of the `.md' file.\n+The file `tm.h' should be a link to `MACHINE.h'.  The header file\n+`config.h' includes `tm.h' and most compiler source files include\n+`config.h'.\n+\n+* Menu:\n+\n+* Driver::              Controlling how the driver runs the compilation passes.\n+* Run-time Target::     Defining `-m' options like `-m68000' and `-m68020'.\n+* Storage Layout::      Defining sizes and alignments of data.\n+* Type Layout::         Defining sizes and properties of basic user data types.\n+* Registers::           Naming and describing the hardware registers.\n+* Register Classes::    Defining the classes of hardware registers.\n+* Stack and Calling::   Defining which way the stack grows and by how much.\n+* Varargs::\t\tDefining the varargs macros.\n+* Trampolines::         Code set up at run time to enter a nested function.\n+* Library Calls::       Controlling how library routines are implicitly called.\n+* Addressing Modes::    Defining addressing modes valid for memory operands.\n+* Condition Code::      Defining how insns update the condition code.\n+* Costs::               Defining relative costs of different operations.\n+* Sections::            Dividing storage into text, data, and other sections.\n+* PIC::\t\t\tMacros for position independent code.\n+* Assembler Format::    Defining how to write insns and pseudo-ops to output.\n+* Debugging Info::      Defining the format of debugging output.\n+* Cross-compilation::   Handling floating point for cross-compilers.\n+* Misc::                Everything else.\n+\n+\u001f\n+File: gcc.info,  Node: Driver,  Next: Run-time Target,  Up: Target Macros\n+\n+Controlling the Compilation Driver, `gcc'\n+=========================================\n+\n+   You can control the compilation driver.\n+\n+`SWITCH_TAKES_ARG (CHAR)'\n+     A C expression which determines whether the option `-CHAR' takes\n+     arguments.  The value should be the number of arguments that\n+     option takes-zero, for many options.\n+\n+     By default, this macro is defined as `DEFAULT_SWITCH_TAKES_ARG',\n+     which handles the standard options properly.  You need not define\n+     `SWITCH_TAKES_ARG' unless you wish to add additional options which\n+     take arguments.  Any redefinition should call\n+     `DEFAULT_SWITCH_TAKES_ARG' and then check for additional options.\n+\n+`WORD_SWITCH_TAKES_ARG (NAME)'\n+     A C expression which determines whether the option `-NAME' takes\n+     arguments.  The value should be the number of arguments that\n+     option takes-zero, for many options.  This macro rather than\n+     `SWITCH_TAKES_ARG' is used for multi-character option names.\n+\n+     By default, this macro is defined as\n+     `DEFAULT_WORD_SWITCH_TAKES_ARG', which handles the standard options\n+     properly.  You need not define `WORD_SWITCH_TAKES_ARG' unless you\n+     wish to add additional options which take arguments.  Any\n+     redefinition should call `DEFAULT_WORD_SWITCH_TAKES_ARG' and then\n+     check for additional options.\n+\n+`SWITCHES_NEED_SPACES'\n+     A string-valued C expression which enumerates the options for which\n+     the linker needs a space between the option and its argument.\n+\n+     If this macro is not defined, the default value is `\"\"'.\n+\n+`CPP_SPEC'\n+     A C string constant that tells the GNU CC driver program options to\n+     pass to CPP.  It can also specify how to translate options you\n+     give to GNU CC into options for GNU CC to pass to the CPP.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`NO_BUILTIN_SIZE_TYPE'\n+     If this macro is defined, the preprocessor will not define the\n+     builtin macro `__SIZE_TYPE__'.  The macro `__SIZE_TYPE__' must\n+     then be defined by `CPP_SPEC' instead.\n+\n+     This should be defined if `SIZE_TYPE' depends on target dependent\n+     flags which are not accessible to the preprocessor.  Otherwise, it\n+     should not be defined.\n+\n+`NO_BUILTIN_PTRDIFF_TYPE'\n+     If this macro is defined, the preprocessor will not define the\n+     builtin macro `__PTRDIFF_TYPE__'.  The macro `__PTRDIFF_TYPE__'\n+     must then be defined by `CPP_SPEC' instead.\n+\n+     This should be defined if `PTRDIFF_TYPE' depends on target\n+     dependent flags which are not accessible to the preprocessor.\n+     Otherwise, it should not be defined.\n+\n+`SIGNED_CHAR_SPEC'\n+     A C string constant that tells the GNU CC driver program options to\n+     pass to CPP.  By default, this macro is defined to pass the option\n+     `-D__CHAR_UNSIGNED__' to CPP if `char' will be treated as\n+     `unsigned char' by `cc1'.\n+\n+     Do not define this macro unless you need to override the default\n+     definition.\n+\n+`CC1_SPEC'\n+     A C string constant that tells the GNU CC driver program options to\n+     pass to `cc1'.  It can also specify how to translate options you\n+     give to GNU CC into options for GNU CC to pass to the `cc1'.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`CC1PLUS_SPEC'\n+     A C string constant that tells the GNU CC driver program options to\n+     pass to `cc1plus'.  It can also specify how to translate options\n+     you give to GNU CC into options for GNU CC to pass to the\n+     `cc1plus'.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`ASM_SPEC'\n+     A C string constant that tells the GNU CC driver program options to\n+     pass to the assembler.  It can also specify how to translate\n+     options you give to GNU CC into options for GNU CC to pass to the\n+     assembler.  See the file `sun3.h' for an example of this.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`ASM_FINAL_SPEC'\n+     A C string constant that tells the GNU CC driver program how to\n+     run any programs which cleanup after the normal assembler.\n+     Normally, this is not needed.  See the file `mips.h' for an\n+     example of this.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`LINK_SPEC'\n+     A C string constant that tells the GNU CC driver program options to\n+     pass to the linker.  It can also specify how to translate options\n+     you give to GNU CC into options for GNU CC to pass to the linker.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`LIB_SPEC'\n+     Another C string constant used much like `LINK_SPEC'.  The\n+     difference between the two is that `LIB_SPEC' is used at the end\n+     of the command given to the linker.\n+\n+     If this macro is not defined, a default is provided that loads the\n+     standard C library from the usual place.  See `gcc.c'.\n+\n+`LIBGCC_SPEC'\n+     Another C string constant that tells the GNU CC driver program how\n+     and when to place a reference to `libgcc.a' into the linker\n+     command line.  This constant is placed both before and after the\n+     value of `LIB_SPEC'.\n+\n+     If this macro is not defined, the GNU CC driver provides a default\n+     that passes the string `-lgcc' to the linker unless the `-shared'\n+     option is specified.\n+\n+`STARTFILE_SPEC'\n+     Another C string constant used much like `LINK_SPEC'.  The\n+     difference between the two is that `STARTFILE_SPEC' is used at the\n+     very beginning of the command given to the linker.\n+\n+     If this macro is not defined, a default is provided that loads the\n+     standard C startup file from the usual place.  See `gcc.c'.\n+\n+`ENDFILE_SPEC'\n+     Another C string constant used much like `LINK_SPEC'.  The\n+     difference between the two is that `ENDFILE_SPEC' is used at the\n+     very end of the command given to the linker.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+`EXTRA_SPECS'\n+     Define this macro to provide additional specifications to put in\n+     the `specs' file that can be used in various specifications like\n+     `CC1_SPEC'.\n+\n+     The definition should be an initializer for an array of structures,\n+     containing a string constant, that defines the specification name,\n+     and a string constant that provides the specification.\n+\n+     Do not define this macro if it does not need to do anything.\n+\n+     `EXTRA_SPECS' is useful when an architecture contains several\n+     related targets, which have various `..._SPECS' which are similar\n+     to each other, and the maintainer would like one central place to\n+     keep these definitions.\n+\n+     For example, the PowerPC System V.4 targets use `EXTRA_SPECS' to\n+     define either `_CALL_SYSV' when the System V calling sequence is\n+     used or `_CALL_AIX' when the older AIX-based calling sequence is\n+     used.\n+\n+     The `config/rs6000/rs6000.h' target file defines:\n+\n+          #define EXTRA_SPECS \\\n+            { \"cpp_sysv_default\", CPP_SYSV_DEFAULT },\n+          \n+          #define CPP_SYS_DEFAULT \"\"\n+\n+     The `config/rs6000/sysv.h' target file defines:\n+          #undef CPP_SPEC\n+          #define CPP_SPEC \\\n+          \"%{posix: -D_POSIX_SOURCE } \\\n+          %{mcall-sysv: -D_CALL_SYSV } %{mcall-aix: -D_CALL_AIX } \\\n+          %{!mcall-sysv: %{!mcall-aix: %(cpp_sysv_default) }} \\\n+          %{msoft-float: -D_SOFT_FLOAT} %{mcpu=403: -D_SOFT_FLOAT}\"\n+          \n+          #undef CPP_SYSV_DEFAULT\n+          #define CPP_SYSV_DEFAULT \"-D_CALL_SYSV\"\n+\n+     while the `config/rs6000/eabiaix.h' target file defines\n+     `CPP_SYSV_DEFAULT' as:\n+\n+          #undef CPP_SYSV_DEFAULT\n+          #define CPP_SYSV_DEFAULT \"-D_CALL_AIX\"\n+\n+`LINK_LIBGCC_SPECIAL'\n+     Define this macro if the driver program should find the library\n+     `libgcc.a' itself and should not pass `-L' options to the linker.\n+     If you do not define this macro, the driver program will pass the\n+     argument `-lgcc' to tell the linker to do the search and will pass\n+     `-L' options to it.\n+\n+`LINK_LIBGCC_SPECIAL_1'\n+     Define this macro if the driver program should find the library\n+     `libgcc.a'.  If you do not define this macro, the driver program\n+     will pass the argument `-lgcc' to tell the linker to do the search.\n+     This macro is similar to `LINK_LIBGCC_SPECIAL', except that it does\n+     not affect `-L' options.\n+\n+`MULTILIB_DEFAULTS'\n+     Define this macro as a C expression for the initializer of an\n+     array of string to tell the driver program which options are\n+     defaults for this target and thus do not need to be handled\n+     specially when using `MULTILIB_OPTIONS'.\n+\n+     Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+     the target makefile fragment or if none of the options listed in\n+     `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.\n+\n+`RELATIVE_PREFIX_NOT_LINKDIR'\n+     Define this macro to tell `gcc' that it should only translate a\n+     `-B' prefix into a `-L' linker option if the prefix indicates an\n+     absolute file name.\n+\n+`STANDARD_EXEC_PREFIX'\n+     Define this macro as a C string constant if you wish to override\n+     the standard choice of `/usr/local/lib/gcc-lib/' as the default\n+     prefix to try when searching for the executable files of the\n+     compiler.\n+\n+`MD_EXEC_PREFIX'\n+     If defined, this macro is an additional prefix to try after\n+     `STANDARD_EXEC_PREFIX'.  `MD_EXEC_PREFIX' is not searched when the\n+     `-b' option is used, or the compiler is built as a cross compiler.\n+\n+`STANDARD_STARTFILE_PREFIX'\n+     Define this macro as a C string constant if you wish to override\n+     the standard choice of `/usr/local/lib/' as the default prefix to\n+     try when searching for startup files such as `crt0.o'.\n+\n+`MD_STARTFILE_PREFIX'\n+     If defined, this macro supplies an additional prefix to try after\n+     the standard prefixes.  `MD_EXEC_PREFIX' is not searched when the\n+     `-b' option is used, or when the compiler is built as a cross\n+     compiler.\n+\n+`MD_STARTFILE_PREFIX_1'\n+     If defined, this macro supplies yet another prefix to try after the\n+     standard prefixes.  It is not searched when the `-b' option is\n+     used, or when the compiler is built as a cross compiler.\n+\n+`INIT_ENVIRONMENT'\n+     Define this macro as a C string constant if you wish to set\n+     environment variables for programs called by the driver, such as\n+     the assembler and loader.  The driver passes the value of this\n+     macro to `putenv' to initialize the necessary environment\n+     variables.\n+\n+`LOCAL_INCLUDE_DIR'\n+     Define this macro as a C string constant if you wish to override\n+     the standard choice of `/usr/local/include' as the default prefix\n+     to try when searching for local header files.  `LOCAL_INCLUDE_DIR'\n+     comes before `SYSTEM_INCLUDE_DIR' in the search order.\n+\n+     Cross compilers do not use this macro and do not search either\n+     `/usr/local/include' or its replacement.\n+\n+`SYSTEM_INCLUDE_DIR'\n+     Define this macro as a C string constant if you wish to specify a\n+     system-specific directory to search for header files before the\n+     standard directory.  `SYSTEM_INCLUDE_DIR' comes before\n+     `STANDARD_INCLUDE_DIR' in the search order.\n+\n+     Cross compilers do not use this macro and do not search the\n+     directory specified.\n+\n+`STANDARD_INCLUDE_DIR'\n+     Define this macro as a C string constant if you wish to override\n+     the standard choice of `/usr/include' as the default prefix to try\n+     when searching for header files.\n+\n+     Cross compilers do not use this macro and do not search either\n+     `/usr/include' or its replacement.\n+\n+`STANDARD_INCLUDE_COMPONENT'\n+     The \"component\" corresponding to `STANDARD_INCLUDE_DIR'.  See\n+     `INCLUDE_DEFAULTS', below, for the description of components.  If\n+     you do not define this macro, no component is used.\n+\n+`INCLUDE_DEFAULTS'\n+     Define this macro if you wish to override the entire default\n+     search path for include files.  For a native compiler, the default\n+     search path usually consists of `GCC_INCLUDE_DIR',\n+     `LOCAL_INCLUDE_DIR', `SYSTEM_INCLUDE_DIR',\n+     `GPLUSPLUS_INCLUDE_DIR', and `STANDARD_INCLUDE_DIR'.  In addition,\n+     `GPLUSPLUS_INCLUDE_DIR' and `GCC_INCLUDE_DIR' are defined\n+     automatically by `Makefile', and specify private search areas for\n+     GCC.  The directory `GPLUSPLUS_INCLUDE_DIR' is used only for C++\n+     programs.\n+\n+     The definition should be an initializer for an array of structures.\n+     Each array element should have four elements: the directory name (a\n+     string constant), the component name, and flag for C++-only\n+     directories, and a flag showing that the includes in the directory\n+     don't need to be wrapped in `extern `C'' when compiling C++.  Mark\n+     the end of the array with a null element.\n+\n+     The component name denotes what GNU package the include file is\n+     part of, if any, in all upper-case letters.  For example, it might\n+     be `GCC' or `BINUTILS'.  If the package is part of the a\n+     vendor-supplied operating system, code the component name as `0'.\n+\n+     For example, here is the definition used for VAX/VMS:\n+\n+          #define INCLUDE_DEFAULTS \\\n+          {                                       \\\n+            { \"GNU_GXX_INCLUDE:\", \"G++\", 1, 1},   \\\n+            { \"GNU_CC_INCLUDE:\", \"GCC\", 0, 0},    \\\n+            { \"SYS$SYSROOT:[SYSLIB.]\", 0, 0, 0},  \\\n+            { \".\", 0, 0, 0},                      \\\n+            { 0, 0, 0, 0}                         \\\n+          }\n+\n+   Here is the order of prefixes tried for exec files:\n+\n+  1. Any prefixes specified by the user with `-B'.\n+\n+  2. The environment variable `GCC_EXEC_PREFIX', if any.\n+\n+  3. The directories specified by the environment variable\n+     `COMPILER_PATH'.\n+\n+  4. The macro `STANDARD_EXEC_PREFIX'.\n+\n+  5. `/usr/lib/gcc/'.\n+\n+  6. The macro `MD_EXEC_PREFIX', if any.\n+\n+   Here is the order of prefixes tried for startfiles:\n+\n+  1. Any prefixes specified by the user with `-B'.\n+\n+  2. The environment variable `GCC_EXEC_PREFIX', if any.\n+\n+  3. The directories specified by the environment variable\n+     `LIBRARY_PATH' (native only, cross compilers do not use this).\n+\n+  4. The macro `STANDARD_EXEC_PREFIX'.\n+\n+  5. `/usr/lib/gcc/'.\n+\n+  6. The macro `MD_EXEC_PREFIX', if any.\n+\n+  7. The macro `MD_STARTFILE_PREFIX', if any.\n+\n+  8. The macro `STANDARD_STARTFILE_PREFIX'.\n+\n+  9. `/lib/'.\n+\n+ 10. `/usr/lib/'.\n+\n+\u001f\n+File: gcc.info,  Node: Run-time Target,  Next: Storage Layout,  Prev: Driver,  Up: Target Macros\n+\n+Run-time Target Specification\n+=============================\n+\n+   Here are run-time target specifications.\n+\n+`CPP_PREDEFINES'\n+     Define this to be a string constant containing `-D' options to\n+     define the predefined macros that identify this machine and system.\n+     These macros will be predefined unless the `-ansi' option is\n+     specified.\n+\n+     In addition, a parallel set of macros are predefined, whose names\n+     are made by appending `__' at the beginning and at the end.  These\n+     `__' macros are permitted by the ANSI standard, so they are\n+     predefined regardless of whether `-ansi' is specified.\n+\n+     For example, on the Sun, one can use the following value:\n+\n+          \"-Dmc68000 -Dsun -Dunix\"\n+\n+     The result is to define the macros `__mc68000__', `__sun__' and\n+     `__unix__' unconditionally, and the macros `mc68000', `sun' and\n+     `unix' provided `-ansi' is not specified.\n+\n+`extern int target_flags;'\n+     This declaration should be present.\n+\n+`TARGET_...'\n+     This series of macros is to allow compiler command arguments to\n+     enable or disable the use of optional features of the target\n+     machine.  For example, one machine description serves both the\n+     68000 and the 68020; a command argument tells the compiler whether\n+     it should use 68020-only instructions or not.  This command\n+     argument works by means of a macro `TARGET_68020' that tests a bit\n+     in `target_flags'.\n+\n+     Define a macro `TARGET_FEATURENAME' for each such option.  Its\n+     definition should test a bit in `target_flags'; for example:\n+\n+          #define TARGET_68020 (target_flags & 1)\n+\n+     One place where these macros are used is in the\n+     condition-expressions of instruction patterns.  Note how\n+     `TARGET_68020' appears frequently in the 68000 machine description\n+     file, `m68k.md'.  Another place they are used is in the\n+     definitions of the other macros in the `MACHINE.h' file.\n+\n+`TARGET_SWITCHES'\n+     This macro defines names of command options to set and clear bits\n+     in `target_flags'.  Its definition is an initializer with a\n+     subgrouping for each command option.\n+\n+     Each subgrouping contains a string constant, that defines the\n+     option name, and a number, which contains the bits to set in\n+     `target_flags'.  A negative number says to clear bits instead; the\n+     negative of the number is which bits to clear.  The actual option\n+     name is made by appending `-m' to the specified name.\n+\n+     One of the subgroupings should have a null string.  The number in\n+     this grouping is the default value for `target_flags'.  Any target\n+     options act starting with that value.\n+\n+     Here is an example which defines `-m68000' and `-m68020' with\n+     opposite meanings, and picks the latter as the default:\n+\n+          #define TARGET_SWITCHES \\\n+            { { \"68020\", 1},      \\\n+              { \"68000\", -1},     \\\n+              { \"\", 1}}\n+\n+`TARGET_OPTIONS'\n+     This macro is similar to `TARGET_SWITCHES' but defines names of\n+     command options that have values.  Its definition is an\n+     initializer with a subgrouping for each command option.\n+\n+     Each subgrouping contains a string constant, that defines the\n+     fixed part of the option name, and the address of a variable.  The\n+     variable, type `char *', is set to the variable part of the given\n+     option if the fixed part matches.  The actual option name is made\n+     by appending `-m' to the specified name.\n+\n+     Here is an example which defines `-mshort-data-NUMBER'.  If the\n+     given option is `-mshort-data-512', the variable `m88k_short_data'\n+     will be set to the string `\"512\"'.\n+\n+          extern char *m88k_short_data;\n+          #define TARGET_OPTIONS \\\n+           { { \"short-data-\", &m88k_short_data } }\n+\n+`TARGET_VERSION'\n+     This macro is a C statement to print on `stderr' a string\n+     describing the particular machine description choice.  Every\n+     machine description should define `TARGET_VERSION'.  For example:\n+\n+          #ifdef MOTOROLA\n+          #define TARGET_VERSION \\\n+            fprintf (stderr, \" (68k, Motorola syntax)\");\n+          #else\n+          #define TARGET_VERSION \\\n+            fprintf (stderr, \" (68k, MIT syntax)\");\n+          #endif\n+\n+`OVERRIDE_OPTIONS'\n+     Sometimes certain combinations of command options do not make\n+     sense on a particular target machine.  You can define a macro\n+     `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+     defined, is executed once just after all the command options have\n+     been parsed.\n+\n+     Don't use this macro to turn on various extra optimizations for\n+     `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.\n+\n+`OPTIMIZATION_OPTIONS (LEVEL)'\n+     Some machines may desire to change what optimizations are\n+     performed for various optimization levels.   This macro, if\n+     defined, is executed once just after the optimization level is\n+     determined and before the remainder of the command options have\n+     been parsed.  Values set in this macro are used as the default\n+     values for the other command line options.\n+\n+     LEVEL is the optimization level specified; 2 if `-O2' is\n+     specified, 1 if `-O' is specified, and 0 if neither is specified.\n+\n+     You should not use this macro to change options that are not\n+     machine-specific.  These should uniformly selected by the same\n+     optimization level on all supported machines.  Use this macro to\n+     enable machine-specific optimizations.\n+\n+     *Do not examine `write_symbols' in this macro!* The debugging\n+     options are not supposed to alter the generated code.\n+\n+`CAN_DEBUG_WITHOUT_FP'\n+     Define this macro if debugging can be performed even without a\n+     frame pointer.  If this macro is defined, GNU CC will turn on the\n+     `-fomit-frame-pointer' option whenever `-O' is specified.\n+\n+\u001f\n+File: gcc.info,  Node: Storage Layout,  Next: Type Layout,  Prev: Run-time Target,  Up: Target Macros\n+\n+Storage Layout\n+==============\n+\n+   Note that the definitions of the macros in this table which are\n+sizes or alignments measured in bits do not need to be constant.  They\n+can be C expressions that refer to static variables, such as the\n+`target_flags'.  *Note Run-time Target::.\n+\n+`BITS_BIG_ENDIAN'\n+     Define this macro to have the value 1 if the most significant bit\n+     in a byte has the lowest number; otherwise define it to have the\n+     value zero.  This means that bit-field instructions count from the\n+     most significant bit.  If the machine has no bit-field\n+     instructions, then this must still be defined, but it doesn't\n+     matter which value it is defined to.  This macro need not be a\n+     constant.\n+\n+     This macro does not affect the way structure fields are packed into\n+     bytes or words; that is controlled by `BYTES_BIG_ENDIAN'.\n+\n+`BYTES_BIG_ENDIAN'\n+     Define this macro to have the value 1 if the most significant byte\n+     in a word has the lowest number.  This macro need not be a\n+     constant.\n+\n+`WORDS_BIG_ENDIAN'\n+     Define this macro to have the value 1 if, in a multiword object,\n+     the most significant word has the lowest number.  This applies to\n+     both memory locations and registers; GNU CC fundamentally assumes\n+     that the order of words in memory is the same as the order in\n+     registers.  This macro need not be a constant.\n+\n+`LIBGCC2_WORDS_BIG_ENDIAN'\n+     Define this macro if WORDS_BIG_ENDIAN is not constant.  This must\n+     be a constant value with the same meaning as WORDS_BIG_ENDIAN,\n+     which will be used only when compiling libgcc2.c.  Typically the\n+     value will be set based on preprocessor defines.\n+\n+`FLOAT_WORDS_BIG_ENDIAN'\n+     Define this macro to have the value 1 if `DFmode', `XFmode' or\n+     `TFmode' floating point numbers are stored in memory with the word\n+     containing the sign bit at the lowest address; otherwise define it\n+     to have the value 0.  This macro need not be a constant.\n+\n+     You need not define this macro if the ordering is the same as for\n+     multi-word integers.\n+\n+`BITS_PER_UNIT'\n+     Define this macro to be the number of bits in an addressable\n+     storage unit (byte); normally 8.\n+\n+`BITS_PER_WORD'\n+     Number of bits in a word; normally 32.\n+\n+`MAX_BITS_PER_WORD'\n+     Maximum number of bits in a word.  If this is undefined, the\n+     default is `BITS_PER_WORD'.  Otherwise, it is the constant value\n+     that is the largest value that `BITS_PER_WORD' can have at\n+     run-time.\n+\n+`UNITS_PER_WORD'\n+     Number of storage units in a word; normally 4.\n+\n+`MIN_UNITS_PER_WORD'\n+     Minimum number of units in a word.  If this is undefined, the\n+     default is `UNITS_PER_WORD'.  Otherwise, it is the constant value\n+     that is the smallest value that `UNITS_PER_WORD' can have at\n+     run-time.\n+\n+`POINTER_SIZE'\n+     Width of a pointer, in bits.  You must specify a value no wider\n+     than the width of `Pmode'.  If it is not equal to the width of\n+     `Pmode', you must define `POINTERS_EXTEND_UNSIGNED'.\n+\n+`POINTERS_EXTEND_UNSIGNED'\n+     A C expression whose value is nonzero if pointers that need to be\n+     extended from being `POINTER_SIZE' bits wide to `Pmode' are\n+     sign-extended and zero if they are zero-extended.\n+\n+     You need not define this macro if the `POINTER_SIZE' is equal to\n+     the width of `Pmode'.\n+\n+`PROMOTE_MODE (M, UNSIGNEDP, TYPE)'\n+     A macro to update M and UNSIGNEDP when an object whose type is\n+     TYPE and which has the specified mode and signedness is to be\n+     stored in a register.  This macro is only called when TYPE is a\n+     scalar type.\n+\n+     On most RISC machines, which only have operations that operate on\n+     a full register, define this macro to set M to `word_mode' if M is\n+     an integer mode narrower than `BITS_PER_WORD'.  In most cases,\n+     only integer modes should be widened because wider-precision\n+     floating-point operations are usually more expensive than their\n+     narrower counterparts.\n+\n+     For most machines, the macro definition does not change UNSIGNEDP.\n+     However, some machines, have instructions that preferentially\n+     handle either signed or unsigned quantities of certain modes.  For\n+     example, on the DEC Alpha, 32-bit loads from memory and 32-bit add\n+     instructions sign-extend the result to 64 bits.  On such machines,\n+     set UNSIGNEDP according to which kind of extension is more\n+     efficient.\n+\n+     Do not define this macro if it would never modify M.\n+\n+`PROMOTE_FUNCTION_ARGS'\n+     Define this macro if the promotion described by `PROMOTE_MODE'\n+     should also be done for outgoing function arguments.\n+\n+`PROMOTE_FUNCTION_RETURN'\n+     Define this macro if the promotion described by `PROMOTE_MODE'\n+     should also be done for the return value of functions.\n+\n+     If this macro is defined, `FUNCTION_VALUE' must perform the same\n+     promotions done by `PROMOTE_MODE'.\n+\n+`PROMOTE_FOR_CALL_ONLY'\n+     Define this macro if the promotion described by `PROMOTE_MODE'\n+     should *only* be performed for outgoing function arguments or\n+     function return values, as specified by `PROMOTE_FUNCTION_ARGS'\n+     and `PROMOTE_FUNCTION_RETURN', respectively.\n+\n+`PARM_BOUNDARY'\n+     Normal alignment required for function parameters on the stack, in\n+     bits.  All stack parameters receive at least this much alignment\n+     regardless of data type.  On most machines, this is the same as the\n+     size of an integer.\n+\n+`STACK_BOUNDARY'\n+     Define this macro if you wish to preserve a certain alignment for\n+     the stack pointer.  The definition is a C expression for the\n+     desired alignment (measured in bits).\n+\n+     If `PUSH_ROUNDING' is not defined, the stack will always be aligned\n+     to the specified boundary.  If `PUSH_ROUNDING' is defined and\n+     specifies a less strict alignment than `STACK_BOUNDARY', the stack\n+     may be momentarily unaligned while pushing arguments.\n+\n+`FUNCTION_BOUNDARY'\n+     Alignment required for a function entry point, in bits.\n+\n+`BIGGEST_ALIGNMENT'\n+     Biggest alignment that any data type can require on this machine,\n+     in bits.\n+\n+`MINIMUM_ATOMIC_ALIGNMENT'\n+     If defined, the smallest alignment, in bits, that can be given to\n+     an object that can be referenced in one operation, without\n+     disturbing any nearby object.  Normally, this is `BITS_PER_UNIT',\n+     but may be larger on machines that don't have byte or half-word\n+     store operations.\n+\n+`BIGGEST_FIELD_ALIGNMENT'\n+     Biggest alignment that any structure field can require on this\n+     machine, in bits.  If defined, this overrides `BIGGEST_ALIGNMENT'\n+     for structure fields only.\n+\n+`ADJUST_FIELD_ALIGN (FIELD, COMPUTED)'\n+     An expression for the alignment of a structure field FIELD if the\n+     alignment computed in the usual way is COMPUTED.  GNU CC uses this\n+     value instead of the value in `BIGGEST_ALIGNMENT' or\n+     `BIGGEST_FIELD_ALIGNMENT', if defined, for structure fields only.\n+\n+`MAX_OFILE_ALIGNMENT'\n+     Biggest alignment supported by the object file format of this\n+     machine.  Use this macro to limit the alignment which can be\n+     specified using the `__attribute__ ((aligned (N)))' construct.  If\n+     not defined, the default value is `BIGGEST_ALIGNMENT'.\n+\n+`DATA_ALIGNMENT (TYPE, BASIC-ALIGN)'\n+     If defined, a C expression to compute the alignment for a static\n+     variable.  TYPE is the data type, and BASIC-ALIGN is the alignment\n+     that the object would ordinarily have.  The value of this macro is\n+     used instead of that alignment to align the object.\n+\n+     If this macro is not defined, then BASIC-ALIGN is used.\n+\n+     One use of this macro is to increase alignment of medium-size data\n+     to make it all fit in fewer cache lines.  Another is to cause\n+     character arrays to be word-aligned so that `strcpy' calls that\n+     copy constants to character arrays can be done inline.\n+\n+`CONSTANT_ALIGNMENT (CONSTANT, BASIC-ALIGN)'\n+     If defined, a C expression to compute the alignment given to a\n+     constant that is being placed in memory.  CONSTANT is the constant\n+     and BASIC-ALIGN is the alignment that the object would ordinarily\n+     have.  The value of this macro is used instead of that alignment to\n+     align the object.\n+\n+     If this macro is not defined, then BASIC-ALIGN is used.\n+\n+     The typical use of this macro is to increase alignment for string\n+     constants to be word aligned so that `strcpy' calls that copy\n+     constants can be done inline.\n+\n+`EMPTY_FIELD_BOUNDARY'\n+     Alignment in bits to be given to a structure bit field that\n+     follows an empty field such as `int : 0;'.\n+\n+     Note that `PCC_BITFIELD_TYPE_MATTERS' also affects the alignment\n+     that results from an empty field.\n+\n+`STRUCTURE_SIZE_BOUNDARY'\n+     Number of bits which any structure or union's size must be a\n+     multiple of.  Each structure or union's size is rounded up to a\n+     multiple of this.\n+\n+     If you do not define this macro, the default is the same as\n+     `BITS_PER_UNIT'.\n+\n+`STRICT_ALIGNMENT'\n+     Define this macro to be the value 1 if instructions will fail to\n+     work if given data not on the nominal alignment.  If instructions\n+     will merely go slower in that case, define this macro as 0.\n+\n+`PCC_BITFIELD_TYPE_MATTERS'\n+     Define this if you wish to imitate the way many other C compilers\n+     handle alignment of bitfields and the structures that contain them.\n+\n+     The behavior is that the type written for a bitfield (`int',\n+     `short', or other integer type) imposes an alignment for the\n+     entire structure, as if the structure really did contain an\n+     ordinary field of that type.  In addition, the bitfield is placed\n+     within the structure so that it would fit within such a field, not\n+     crossing a boundary for it.\n+\n+     Thus, on most machines, a bitfield whose type is written as `int'\n+     would not cross a four-byte boundary, and would force four-byte\n+     alignment for the whole structure.  (The alignment used may not be\n+     four bytes; it is controlled by the other alignment parameters.)\n+\n+     If the macro is defined, its definition should be a C expression;\n+     a nonzero value for the expression enables this behavior.\n+\n+     Note that if this macro is not defined, or its value is zero, some\n+     bitfields may cross more than one alignment boundary.  The\n+     compiler can support such references if there are `insv', `extv',\n+     and `extzv' insns that can directly reference memory.\n+\n+     The other known way of making bitfields work is to define\n+     `STRUCTURE_SIZE_BOUNDARY' as large as `BIGGEST_ALIGNMENT'.  Then\n+     every structure can be accessed with fullwords.\n+\n+     Unless the machine has bitfield instructions or you define\n+     `STRUCTURE_SIZE_BOUNDARY' that way, you must define\n+     `PCC_BITFIELD_TYPE_MATTERS' to have a nonzero value.\n+\n+     If your aim is to make GNU CC use the same conventions for laying\n+     out bitfields as are used by another compiler, here is how to\n+     investigate what the other compiler does.  Compile and run this\n+     program:\n+\n+          struct foo1\n+          {\n+            char x;\n+            char :0;\n+            char y;\n+          };\n+          \n+          struct foo2\n+          {\n+            char x;\n+            int :0;\n+            char y;\n+          };\n+          \n+          main ()\n+          {\n+            printf (\"Size of foo1 is %d\\n\",\n+                    sizeof (struct foo1));\n+            printf (\"Size of foo2 is %d\\n\",\n+                    sizeof (struct foo2));\n+            exit (0);\n+          }\n+\n+     If this prints 2 and 5, then the compiler's behavior is what you\n+     would get from `PCC_BITFIELD_TYPE_MATTERS'.\n+\n+`BITFIELD_NBYTES_LIMITED'\n+     Like PCC_BITFIELD_TYPE_MATTERS except that its effect is limited to\n+     aligning a bitfield within the structure.\n+\n+`ROUND_TYPE_SIZE (STRUCT, SIZE, ALIGN)'\n+     Define this macro as an expression for the overall size of a\n+     structure (given by STRUCT as a tree node) when the size computed\n+     from the fields is SIZE and the alignment is ALIGN.\n+\n+     The default is to round SIZE up to a multiple of ALIGN.\n+\n+`ROUND_TYPE_ALIGN (STRUCT, COMPUTED, SPECIFIED)'\n+     Define this macro as an expression for the alignment of a structure\n+     (given by STRUCT as a tree node) if the alignment computed in the\n+     usual way is COMPUTED and the alignment explicitly specified was\n+     SPECIFIED.\n+\n+     The default is to use SPECIFIED if it is larger; otherwise, use\n+     the smaller of COMPUTED and `BIGGEST_ALIGNMENT'\n+\n+`MAX_FIXED_MODE_SIZE'\n+     An integer expression for the size in bits of the largest integer\n+     machine mode that should actually be used.  All integer machine\n+     modes of this size or smaller can be used for structures and\n+     unions with the appropriate sizes.  If this macro is undefined,\n+     `GET_MODE_BITSIZE (DImode)' is assumed.\n+\n+`CHECK_FLOAT_VALUE (MODE, VALUE, OVERFLOW)'\n+     A C statement to validate the value VALUE (of type `double') for\n+     mode MODE.  This means that you check whether VALUE fits within\n+     the possible range of values for mode MODE on this target machine.\n+     The mode MODE is always a mode of class `MODE_FLOAT'.  OVERFLOW\n+     is nonzero if the value is already known to be out of range.\n+\n+     If VALUE is not valid or if OVERFLOW is nonzero, you should set\n+     OVERFLOW to 1 and then assign some valid value to VALUE.  Allowing\n+     an invalid value to go through the compiler can produce incorrect\n+     assembler code which may even cause Unix assemblers to crash.\n+\n+     This macro need not be defined if there is no work for it to do.\n+\n+`TARGET_FLOAT_FORMAT'\n+     A code distinguishing the floating point format of the target\n+     machine.  There are three defined values:\n+\n+    `IEEE_FLOAT_FORMAT'\n+          This code indicates IEEE floating point.  It is the default;\n+          there is no need to define this macro when the format is IEEE.\n+\n+    `VAX_FLOAT_FORMAT'\n+          This code indicates the peculiar format used on the Vax.\n+\n+    `UNKNOWN_FLOAT_FORMAT'\n+          This code indicates any other format.\n+\n+     The value of this macro is compared with `HOST_FLOAT_FORMAT'\n+     (*note Config::.) to determine whether the target machine has the\n+     same format as the host machine.  If any other formats are\n+     actually in use on supported machines, new codes should be defined\n+     for them.\n+\n+     The ordering of the component words of floating point values\n+     stored in memory is controlled by `FLOAT_WORDS_BIG_ENDIAN' for the\n+     target machine and `HOST_FLOAT_WORDS_BIG_ENDIAN' for the host.\n+\n+`DEFAULT_VTABLE_THUNKS'\n+     GNU CC supports two ways of implementing C++ vtables:  traditional\n+     or with so-called \"thunks\".  The flag `-fvtable-thunk' chooses\n+     between them.  Define this macro to be a C expression for the\n+     default value of that flag.  If `DEFAULT_VTABLE_THUNKS' is 0, GNU\n+     CC uses the traditional implementation by default.  The \"thunk\"\n+     implementation is more efficient (especially if you have provided\n+     an implementation of `ASM_OUTPUT_MI_THUNK', see *Note Function\n+     Entry::), but is not binary compatible with code compiled using\n+     the traditional implementation.  If you are writing a new ports,\n+     define `DEFAULT_VTABLE_THUNKS' to 1.\n+\n+     If you do not define this macro, the default for `-fvtable-thunk'\n+     is 0.\n+\n+\u001f\n+File: gcc.info,  Node: Type Layout,  Next: Registers,  Prev: Storage Layout,  Up: Target Macros\n+\n+Layout of Source Language Data Types\n+====================================\n+\n+   These macros define the sizes and other characteristics of the\n+standard basic data types used in programs being compiled.  Unlike the\n+macros in the previous section, these apply to specific features of C\n+and related languages, rather than to fundamental aspects of storage\n+layout.\n+\n+`INT_TYPE_SIZE'\n+     A C expression for the size in bits of the type `int' on the\n+     target machine.  If you don't define this, the default is one word.\n+\n+`MAX_INT_TYPE_SIZE'\n+     Maximum number for the size in bits of the type `int' on the target\n+     machine.  If this is undefined, the default is `INT_TYPE_SIZE'.\n+     Otherwise, it is the constant value that is the largest value that\n+     `INT_TYPE_SIZE' can have at run-time.  This is used in `cpp'.\n+\n+`SHORT_TYPE_SIZE'\n+     A C expression for the size in bits of the type `short' on the\n+     target machine.  If you don't define this, the default is half a\n+     word.  (If this would be less than one storage unit, it is rounded\n+     up to one unit.)\n+\n+`LONG_TYPE_SIZE'\n+     A C expression for the size in bits of the type `long' on the\n+     target machine.  If you don't define this, the default is one word.\n+\n+`MAX_LONG_TYPE_SIZE'\n+     Maximum number for the size in bits of the type `long' on the\n+     target machine.  If this is undefined, the default is\n+     `LONG_TYPE_SIZE'.  Otherwise, it is the constant value that is the\n+     largest value that `LONG_TYPE_SIZE' can have at run-time.  This is\n+     used in `cpp'.\n+\n+`LONG_LONG_TYPE_SIZE'\n+     A C expression for the size in bits of the type `long long' on the\n+     target machine.  If you don't define this, the default is two\n+     words.  If you want to support GNU Ada on your machine, the value\n+     of macro must be at least 64.\n+\n+`CHAR_TYPE_SIZE'\n+     A C expression for the size in bits of the type `char' on the\n+     target machine.  If you don't define this, the default is one\n+     quarter of a word.  (If this would be less than one storage unit,\n+     it is rounded up to one unit.)\n+\n+`MAX_CHAR_TYPE_SIZE'\n+     Maximum number for the size in bits of the type `char' on the\n+     target machine.  If this is undefined, the default is\n+     `CHAR_TYPE_SIZE'.  Otherwise, it is the constant value that is the\n+     largest value that `CHAR_TYPE_SIZE' can have at run-time.  This is\n+     used in `cpp'.\n+\n+`FLOAT_TYPE_SIZE'\n+     A C expression for the size in bits of the type `float' on the\n+     target machine.  If you don't define this, the default is one word.\n+\n+`DOUBLE_TYPE_SIZE'\n+     A C expression for the size in bits of the type `double' on the\n+     target machine.  If you don't define this, the default is two\n+     words.\n+\n+`LONG_DOUBLE_TYPE_SIZE'\n+     A C expression for the size in bits of the type `long double' on\n+     the target machine.  If you don't define this, the default is two\n+     words.\n+\n+`WIDEST_HARDWARE_FP_SIZE'\n+     A C expression for the size in bits of the widest floating-point\n+     format supported by the hardware.  If you define this macro, you\n+     must specify a value less than or equal to the value of\n+     `LONG_DOUBLE_TYPE_SIZE'.  If you do not define this macro, the\n+     value of `LONG_DOUBLE_TYPE_SIZE' is the default.\n+\n+`DEFAULT_SIGNED_CHAR'\n+     An expression whose value is 1 or 0, according to whether the type\n+     `char' should be signed or unsigned by default.  The user can\n+     always override this default with the options `-fsigned-char' and\n+     `-funsigned-char'.\n+\n+`DEFAULT_SHORT_ENUMS'\n+     A C expression to determine whether to give an `enum' type only as\n+     many bytes as it takes to represent the range of possible values\n+     of that type.  A nonzero value means to do that; a zero value\n+     means all `enum' types should be allocated like `int'.\n+\n+     If you don't define the macro, the default is 0.\n+\n+`SIZE_TYPE'\n+     A C expression for a string describing the name of the data type\n+     to use for size values.  The typedef name `size_t' is defined\n+     using the contents of the string.\n+\n+     The string can contain more than one keyword.  If so, separate\n+     them with spaces, and write first any length keyword, then\n+     `unsigned' if appropriate, and finally `int'.  The string must\n+     exactly match one of the data type names defined in the function\n+     `init_decl_processing' in the file `c-decl.c'.  You may not omit\n+     `int' or change the order--that would cause the compiler to crash\n+     on startup.\n+\n+     If you don't define this macro, the default is `\"long unsigned\n+     int\"'.\n+\n+`PTRDIFF_TYPE'\n+     A C expression for a string describing the name of the data type\n+     to use for the result of subtracting two pointers.  The typedef\n+     name `ptrdiff_t' is defined using the contents of the string.  See\n+     `SIZE_TYPE' above for more information.\n+\n+     If you don't define this macro, the default is `\"long int\"'.\n+\n+`WCHAR_TYPE'\n+     A C expression for a string describing the name of the data type\n+     to use for wide characters.  The typedef name `wchar_t' is defined\n+     using the contents of the string.  See `SIZE_TYPE' above for more\n+     information.\n+\n+     If you don't define this macro, the default is `\"int\"'.\n+\n+`WCHAR_TYPE_SIZE'\n+     A C expression for the size in bits of the data type for wide\n+     characters.  This is used in `cpp', which cannot make use of\n+     `WCHAR_TYPE'.\n+\n+`MAX_WCHAR_TYPE_SIZE'\n+     Maximum number for the size in bits of the data type for wide\n+     characters.  If this is undefined, the default is\n+     `WCHAR_TYPE_SIZE'.  Otherwise, it is the constant value that is the\n+     largest value that `WCHAR_TYPE_SIZE' can have at run-time.  This is\n+     used in `cpp'.\n+\n+`OBJC_INT_SELECTORS'\n+     Define this macro if the type of Objective C selectors should be\n+     `int'.\n+\n+     If this macro is not defined, then selectors should have the type\n+     `struct objc_selector *'.\n+\n+`OBJC_SELECTORS_WITHOUT_LABELS'\n+     Define this macro if the compiler can group all the selectors\n+     together into a vector and use just one label at the beginning of\n+     the vector.  Otherwise, the compiler must give each selector its\n+     own assembler label.\n+\n+     On certain machines, it is important to have a separate label for\n+     each selector because this enables the linker to eliminate\n+     duplicate selectors.\n+\n+`TARGET_BELL'\n+     A C constant expression for the integer value for escape sequence\n+     `\\a'.\n+\n+`TARGET_BS'\n+`TARGET_TAB'\n+`TARGET_NEWLINE'\n+     C constant expressions for the integer values for escape sequences\n+     `\\b', `\\t' and `\\n'.\n+\n+`TARGET_VT'\n+`TARGET_FF'\n+`TARGET_CR'\n+     C constant expressions for the integer values for escape sequences\n+     `\\v', `\\f' and `\\r'.\n+"}, {"sha": "72ee0b7fa806d545eb045067207ff271e656f2e6", "filename": "gcc/gcc.info-21", "status": "added", "additions": 1028, "deletions": 0, "changes": 1028, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-21", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-21", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-21?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,1028 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Registers,  Next: Register Classes,  Prev: Type Layout,  Up: Target Macros\n+\n+Register Usage\n+==============\n+\n+   This section explains how to describe what registers the target\n+machine has, and how (in general) they can be used.\n+\n+   The description of which registers a specific instruction can use is\n+done with register classes; see *Note Register Classes::.  For\n+information on using registers to access a stack frame, see *Note Frame\n+Registers::.  For passing values in registers, see *Note Register\n+Arguments::.  For returning values in registers, see *Note Scalar\n+Return::.\n+\n+* Menu:\n+\n+* Register Basics::\t\tNumber and kinds of registers.\n+* Allocation Order::\t\tOrder in which registers are allocated.\n+* Values in Registers::\t\tWhat kinds of values each reg can hold.\n+* Leaf Functions::\t\tRenumbering registers for leaf functions.\n+* Stack Registers::\t\tHandling a register stack such as 80387.\n+* Obsolete Register Macros::\tMacros formerly used for the 80387.\n+\n+\u001f\n+File: gcc.info,  Node: Register Basics,  Next: Allocation Order,  Up: Registers\n+\n+Basic Characteristics of Registers\n+----------------------------------\n+\n+   Registers have various characteristics.\n+\n+`FIRST_PSEUDO_REGISTER'\n+     Number of hardware registers known to the compiler.  They receive\n+     numbers 0 through `FIRST_PSEUDO_REGISTER-1'; thus, the first\n+     pseudo register's number really is assigned the number\n+     `FIRST_PSEUDO_REGISTER'.\n+\n+`FIXED_REGISTERS'\n+     An initializer that says which registers are used for fixed\n+     purposes all throughout the compiled code and are therefore not\n+     available for general allocation.  These would include the stack\n+     pointer, the frame pointer (except on machines where that can be\n+     used as a general register when no frame pointer is needed), the\n+     program counter on machines where that is considered one of the\n+     addressable registers, and any other numbered register with a\n+     standard use.\n+\n+     This information is expressed as a sequence of numbers, separated\n+     by commas and surrounded by braces.  The Nth number is 1 if\n+     register N is fixed, 0 otherwise.\n+\n+     The table initialized from this macro, and the table initialized by\n+     the following one, may be overridden at run time either\n+     automatically, by the actions of the macro\n+     `CONDITIONAL_REGISTER_USAGE', or by the user with the command\n+     options `-ffixed-REG', `-fcall-used-REG' and `-fcall-saved-REG'.\n+\n+`CALL_USED_REGISTERS'\n+     Like `FIXED_REGISTERS' but has 1 for each register that is\n+     clobbered (in general) by function calls as well as for fixed\n+     registers.  This macro therefore identifies the registers that are\n+     not available for general allocation of values that must live\n+     across function calls.\n+\n+     If a register has 0 in `CALL_USED_REGISTERS', the compiler\n+     automatically saves it on function entry and restores it on\n+     function exit, if the register is used within the function.\n+\n+`CONDITIONAL_REGISTER_USAGE'\n+     Zero or more C statements that may conditionally modify two\n+     variables `fixed_regs' and `call_used_regs' (both of type `char\n+     []') after they have been initialized from the two preceding\n+     macros.\n+\n+     This is necessary in case the fixed or call-clobbered registers\n+     depend on target flags.\n+\n+     You need not define this macro if it has no work to do.\n+\n+     If the usage of an entire class of registers depends on the target\n+     flags, you may indicate this to GCC by using this macro to modify\n+     `fixed_regs' and `call_used_regs' to 1 for each of the registers\n+     in the classes which should not be used by GCC.  Also define the\n+     macro `REG_CLASS_FROM_LETTER' to return `NO_REGS' if it is called\n+     with a letter for a class that shouldn't be used.\n+\n+     (However, if this class is not included in `GENERAL_REGS' and all\n+     of the insn patterns whose constraints permit this class are\n+     controlled by target switches, then GCC will automatically avoid\n+     using these registers when the target switches are opposed to\n+     them.)\n+\n+`NON_SAVING_SETJMP'\n+     If this macro is defined and has a nonzero value, it means that\n+     `setjmp' and related functions fail to save the registers, or that\n+     `longjmp' fails to restore them.  To compensate, the compiler\n+     avoids putting variables in registers in functions that use\n+     `setjmp'.\n+\n+`INCOMING_REGNO (OUT)'\n+     Define this macro if the target machine has register windows.\n+     This C expression returns the register number as seen by the\n+     called function corresponding to the register number OUT as seen\n+     by the calling function.  Return OUT if register number OUT is not\n+     an outbound register.\n+\n+`OUTGOING_REGNO (IN)'\n+     Define this macro if the target machine has register windows.\n+     This C expression returns the register number as seen by the\n+     calling function corresponding to the register number IN as seen\n+     by the called function.  Return IN if register number IN is not an\n+     inbound register.\n+\n+\u001f\n+File: gcc.info,  Node: Allocation Order,  Next: Values in Registers,  Prev: Register Basics,  Up: Registers\n+\n+Order of Allocation of Registers\n+--------------------------------\n+\n+   Registers are allocated in order.\n+\n+`REG_ALLOC_ORDER'\n+     If defined, an initializer for a vector of integers, containing the\n+     numbers of hard registers in the order in which GNU CC should\n+     prefer to use them (from most preferred to least).\n+\n+     If this macro is not defined, registers are used lowest numbered\n+     first (all else being equal).\n+\n+     One use of this macro is on machines where the highest numbered\n+     registers must always be saved and the save-multiple-registers\n+     instruction supports only sequences of consecutive registers.  On\n+     such machines, define `REG_ALLOC_ORDER' to be an initializer that\n+     lists the highest numbered allocatable register first.\n+\n+`ORDER_REGS_FOR_LOCAL_ALLOC'\n+     A C statement (sans semicolon) to choose the order in which to\n+     allocate hard registers for pseudo-registers local to a basic\n+     block.\n+\n+     Store the desired register order in the array `reg_alloc_order'.\n+     Element 0 should be the register to allocate first; element 1, the\n+     next register; and so on.\n+\n+     The macro body should not assume anything about the contents of\n+     `reg_alloc_order' before execution of the macro.\n+\n+     On most machines, it is not necessary to define this macro.\n+\n+\u001f\n+File: gcc.info,  Node: Values in Registers,  Next: Leaf Functions,  Prev: Allocation Order,  Up: Registers\n+\n+How Values Fit in Registers\n+---------------------------\n+\n+   This section discusses the macros that describe which kinds of values\n+(specifically, which machine modes) each register can hold, and how many\n+consecutive registers are needed for a given mode.\n+\n+`HARD_REGNO_NREGS (REGNO, MODE)'\n+     A C expression for the number of consecutive hard registers,\n+     starting at register number REGNO, required to hold a value of mode\n+     MODE.\n+\n+     On a machine where all registers are exactly one word, a suitable\n+     definition of this macro is\n+\n+          #define HARD_REGNO_NREGS(REGNO, MODE)            \\\n+             ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1)  \\\n+              / UNITS_PER_WORD))\n+\n+`HARD_REGNO_MODE_OK (REGNO, MODE)'\n+     A C expression that is nonzero if it is permissible to store a\n+     value of mode MODE in hard register number REGNO (or in several\n+     registers starting with that one).  For a machine where all\n+     registers are equivalent, a suitable definition is\n+\n+          #define HARD_REGNO_MODE_OK(REGNO, MODE) 1\n+\n+     You need not include code to check for the numbers of fixed\n+     registers, because the allocation mechanism considers them to be\n+     always occupied.\n+\n+     On some machines, double-precision values must be kept in even/odd\n+     register pairs.  You can implement that by defining this macro to\n+     reject odd register numbers for such modes.\n+\n+     The minimum requirement for a mode to be OK in a register is that\n+     the `movMODE' instruction pattern support moves between the\n+     register and other hard register in the same class and that moving\n+     a value into the register and back out not alter it.\n+\n+     Since the same instruction used to move `word_mode' will work for\n+     all narrower integer modes, it is not necessary on any machine for\n+     `HARD_REGNO_MODE_OK' to distinguish between these modes, provided\n+     you define patterns `movhi', etc., to take advantage of this.  This\n+     is useful because of the interaction between `HARD_REGNO_MODE_OK'\n+     and `MODES_TIEABLE_P'; it is very desirable for all integer modes\n+     to be tieable.\n+\n+     Many machines have special registers for floating point arithmetic.\n+     Often people assume that floating point machine modes are allowed\n+     only in floating point registers.  This is not true.  Any\n+     registers that can hold integers can safely *hold* a floating\n+     point machine mode, whether or not floating arithmetic can be done\n+     on it in those registers.  Integer move instructions can be used\n+     to move the values.\n+\n+     On some machines, though, the converse is true: fixed-point machine\n+     modes may not go in floating registers.  This is true if the\n+     floating registers normalize any value stored in them, because\n+     storing a non-floating value there would garble it.  In this case,\n+     `HARD_REGNO_MODE_OK' should reject fixed-point machine modes in\n+     floating registers.  But if the floating registers do not\n+     automatically normalize, if you can store any bit pattern in one\n+     and retrieve it unchanged without a trap, then any machine mode\n+     may go in a floating register, so you can define this macro to say\n+     so.\n+\n+     The primary significance of special floating registers is rather\n+     that they are the registers acceptable in floating point arithmetic\n+     instructions.  However, this is of no concern to\n+     `HARD_REGNO_MODE_OK'.  You handle it by writing the proper\n+     constraints for those instructions.\n+\n+     On some machines, the floating registers are especially slow to\n+     access, so that it is better to store a value in a stack frame\n+     than in such a register if floating point arithmetic is not being\n+     done.  As long as the floating registers are not in class\n+     `GENERAL_REGS', they will not be used unless some pattern's\n+     constraint asks for one.\n+\n+`MODES_TIEABLE_P (MODE1, MODE2)'\n+     A C expression that is nonzero if a value of mode MODE1 is\n+     accessable in mode MODE2 without copying.\n+\n+     If `HARD_REGNO_MODE_OK (R, MODE1)' and `HARD_REGNO_MODE_OK (R,\n+     MODE2)' are always the same for any R, then `MODES_TIEABLE_P\n+     (MODE1, MODE2)' should be nonzero.  If they differ for any R, you\n+     should define this macro to return zero unless some other\n+     mechanism ensures the accessability of the value in a narrower\n+     mode.\n+\n+     You should define this macro to return nonzero in as many cases as\n+     possible since doing so will allow GNU CC to perform better\n+     register allocation.\n+\n+\u001f\n+File: gcc.info,  Node: Leaf Functions,  Next: Stack Registers,  Prev: Values in Registers,  Up: Registers\n+\n+Handling Leaf Functions\n+-----------------------\n+\n+   On some machines, a leaf function (i.e., one which makes no calls)\n+can run more efficiently if it does not make its own register window.\n+Often this means it is required to receive its arguments in the\n+registers where they are passed by the caller, instead of the registers\n+where they would normally arrive.\n+\n+   The special treatment for leaf functions generally applies only when\n+other conditions are met; for example, often they may use only those\n+registers for its own variables and temporaries.  We use the term \"leaf\n+function\" to mean a function that is suitable for this special\n+handling, so that functions with no calls are not necessarily \"leaf\n+functions\".\n+\n+   GNU CC assigns register numbers before it knows whether the function\n+is suitable for leaf function treatment.  So it needs to renumber the\n+registers in order to output a leaf function.  The following macros\n+accomplish this.\n+\n+`LEAF_REGISTERS'\n+     A C initializer for a vector, indexed by hard register number,\n+     which contains 1 for a register that is allowable in a candidate\n+     for leaf function treatment.\n+\n+     If leaf function treatment involves renumbering the registers,\n+     then the registers marked here should be the ones before\n+     renumbering--those that GNU CC would ordinarily allocate.  The\n+     registers which will actually be used in the assembler code, after\n+     renumbering, should not be marked with 1 in this vector.\n+\n+     Define this macro only if the target machine offers a way to\n+     optimize the treatment of leaf functions.\n+\n+`LEAF_REG_REMAP (REGNO)'\n+     A C expression whose value is the register number to which REGNO\n+     should be renumbered, when a function is treated as a leaf\n+     function.\n+\n+     If REGNO is a register number which should not appear in a leaf\n+     function before renumbering, then the expression should yield -1,\n+     which will cause the compiler to abort.\n+\n+     Define this macro only if the target machine offers a way to\n+     optimize the treatment of leaf functions, and registers need to be\n+     renumbered to do this.\n+\n+   Normally, `FUNCTION_PROLOGUE' and `FUNCTION_EPILOGUE' must treat\n+leaf functions specially.  It can test the C variable `leaf_function'\n+which is nonzero for leaf functions.  (The variable `leaf_function' is\n+defined only if `LEAF_REGISTERS' is defined.)\n+\n+\u001f\n+File: gcc.info,  Node: Stack Registers,  Next: Obsolete Register Macros,  Prev: Leaf Functions,  Up: Registers\n+\n+Registers That Form a Stack\n+---------------------------\n+\n+   There are special features to handle computers where some of the\n+\"registers\" form a stack, as in the 80387 coprocessor for the 80386.\n+Stack registers are normally written by pushing onto the stack, and are\n+numbered relative to the top of the stack.\n+\n+   Currently, GNU CC can only handle one group of stack-like registers,\n+and they must be consecutively numbered.\n+\n+`STACK_REGS'\n+     Define this if the machine has any stack-like registers.\n+\n+`FIRST_STACK_REG'\n+     The number of the first stack-like register.  This one is the top\n+     of the stack.\n+\n+`LAST_STACK_REG'\n+     The number of the last stack-like register.  This one is the\n+     bottom of the stack.\n+\n+\u001f\n+File: gcc.info,  Node: Obsolete Register Macros,  Prev: Stack Registers,  Up: Registers\n+\n+Obsolete Macros for Controlling Register Usage\n+----------------------------------------------\n+\n+   These features do not work very well.  They exist because they used\n+to be required to generate correct code for the 80387 coprocessor of the\n+80386.  They are no longer used by that machine description and may be\n+removed in a later version of the compiler.  Don't use them!\n+\n+`OVERLAPPING_REGNO_P (REGNO)'\n+     If defined, this is a C expression whose value is nonzero if hard\n+     register number REGNO is an overlapping register.  This means a\n+     hard register which overlaps a hard register with a different\n+     number.  (Such overlap is undesirable, but occasionally it allows\n+     a machine to be supported which otherwise could not be.)  This\n+     macro must return nonzero for *all* the registers which overlap\n+     each other.  GNU CC can use an overlapping register only in\n+     certain limited ways.  It can be used for allocation within a\n+     basic block, and may be spilled for reloading; that is all.\n+\n+     If this macro is not defined, it means that none of the hard\n+     registers overlap each other.  This is the usual situation.\n+\n+`INSN_CLOBBERS_REGNO_P (INSN, REGNO)'\n+     If defined, this is a C expression whose value should be nonzero if\n+     the insn INSN has the effect of mysteriously clobbering the\n+     contents of hard register number REGNO.  By \"mysterious\" we mean\n+     that the insn's RTL expression doesn't describe such an effect.\n+\n+     If this macro is not defined, it means that no insn clobbers\n+     registers mysteriously.  This is the usual situation; all else\n+     being equal, it is best for the RTL expression to show all the\n+     activity.\n+\n+`PRESERVE_DEATH_INFO_REGNO_P (REGNO)'\n+     If defined, this is a C expression whose value is nonzero if\n+     correct `REG_DEAD' notes are needed for hard register number REGNO\n+     after reload.\n+\n+     You would arrange to preserve death info for a register when some\n+     of the code in the machine description which is executed to write\n+     the assembler code looks at the death notes.  This is necessary\n+     only when the actual hardware feature which GNU CC thinks of as a\n+     register is not actually a register of the usual sort.  (It might,\n+     for example, be a hardware stack.)\n+\n+     It is also useful for peepholes and linker relaxation.\n+\n+     If this macro is not defined, it means that no death notes need to\n+     be preserved, and some may even be incorrect.  This is the usual\n+     situation.\n+\n+\u001f\n+File: gcc.info,  Node: Register Classes,  Next: Stack and Calling,  Prev: Registers,  Up: Target Macros\n+\n+Register Classes\n+================\n+\n+   On many machines, the numbered registers are not all equivalent.\n+For example, certain registers may not be allowed for indexed\n+addressing; certain registers may not be allowed in some instructions.\n+These machine restrictions are described to the compiler using\n+\"register classes\".\n+\n+   You define a number of register classes, giving each one a name and\n+saying which of the registers belong to it.  Then you can specify\n+register classes that are allowed as operands to particular instruction\n+patterns.\n+\n+   In general, each register will belong to several classes.  In fact,\n+one class must be named `ALL_REGS' and contain all the registers.\n+Another class must be named `NO_REGS' and contain no registers.  Often\n+the union of two classes will be another class; however, this is not\n+required.\n+\n+   One of the classes must be named `GENERAL_REGS'.  There is nothing\n+terribly special about the name, but the operand constraint letters `r'\n+and `g' specify this class.  If `GENERAL_REGS' is the same as\n+`ALL_REGS', just define it as a macro which expands to `ALL_REGS'.\n+\n+   Order the classes so that if class X is contained in class Y then X\n+has a lower class number than Y.\n+\n+   The way classes other than `GENERAL_REGS' are specified in operand\n+constraints is through machine-dependent operand constraint letters.\n+You can define such letters to correspond to various classes, then use\n+them in operand constraints.\n+\n+   You should define a class for the union of two classes whenever some\n+instruction allows both classes.  For example, if an instruction allows\n+either a floating point (coprocessor) register or a general register\n+for a certain operand, you should define a class `FLOAT_OR_GENERAL_REGS'\n+which includes both of them.  Otherwise you will get suboptimal code.\n+\n+   You must also specify certain redundant information about the\n+register classes: for each class, which classes contain it and which\n+ones are contained in it; for each pair of classes, the largest class\n+contained in their union.\n+\n+   When a value occupying several consecutive registers is expected in a\n+certain class, all the registers used must belong to that class.\n+Therefore, register classes cannot be used to enforce a requirement for\n+a register pair to start with an even-numbered register.  The way to\n+specify this requirement is with `HARD_REGNO_MODE_OK'.\n+\n+   Register classes used for input-operands of bitwise-and or shift\n+instructions have a special requirement: each such class must have, for\n+each fixed-point machine mode, a subclass whose registers can transfer\n+that mode to or from memory.  For example, on some machines, the\n+operations for single-byte values (`QImode') are limited to certain\n+registers.  When this is so, each register class that is used in a\n+bitwise-and or shift instruction must have a subclass consisting of\n+registers from which single-byte values can be loaded or stored.  This\n+is so that `PREFERRED_RELOAD_CLASS' can always have a possible value to\n+return.\n+\n+`enum reg_class'\n+     An enumeral type that must be defined with all the register class\n+     names as enumeral values.  `NO_REGS' must be first.  `ALL_REGS'\n+     must be the last register class, followed by one more enumeral\n+     value, `LIM_REG_CLASSES', which is not a register class but rather\n+     tells how many classes there are.\n+\n+     Each register class has a number, which is the value of casting\n+     the class name to type `int'.  The number serves as an index in\n+     many of the tables described below.\n+\n+`N_REG_CLASSES'\n+     The number of distinct register classes, defined as follows:\n+\n+          #define N_REG_CLASSES (int) LIM_REG_CLASSES\n+\n+`REG_CLASS_NAMES'\n+     An initializer containing the names of the register classes as C\n+     string constants.  These names are used in writing some of the\n+     debugging dumps.\n+\n+`REG_CLASS_CONTENTS'\n+     An initializer containing the contents of the register classes, as\n+     integers which are bit masks.  The Nth integer specifies the\n+     contents of class N.  The way the integer MASK is interpreted is\n+     that register R is in the class if `MASK & (1 << R)' is 1.\n+\n+     When the machine has more than 32 registers, an integer does not\n+     suffice.  Then the integers are replaced by sub-initializers,\n+     braced groupings containing several integers.  Each\n+     sub-initializer must be suitable as an initializer for the type\n+     `HARD_REG_SET' which is defined in `hard-reg-set.h'.\n+\n+`REGNO_REG_CLASS (REGNO)'\n+     A C expression whose value is a register class containing hard\n+     register REGNO.  In general there is more than one such class;\n+     choose a class which is \"minimal\", meaning that no smaller class\n+     also contains the register.\n+\n+`BASE_REG_CLASS'\n+     A macro whose definition is the name of the class to which a valid\n+     base register must belong.  A base register is one used in an\n+     address which is the register value plus a displacement.\n+\n+`INDEX_REG_CLASS'\n+     A macro whose definition is the name of the class to which a valid\n+     index register must belong.  An index register is one used in an\n+     address where its value is either multiplied by a scale factor or\n+     added to another register (as well as added to a displacement).\n+\n+`REG_CLASS_FROM_LETTER (CHAR)'\n+     A C expression which defines the machine-dependent operand\n+     constraint letters for register classes.  If CHAR is such a\n+     letter, the value should be the register class corresponding to\n+     it.  Otherwise, the value should be `NO_REGS'.  The register\n+     letter `r', corresponding to class `GENERAL_REGS', will not be\n+     passed to this macro; you do not need to handle it.\n+\n+`REGNO_OK_FOR_BASE_P (NUM)'\n+     A C expression which is nonzero if register number NUM is suitable\n+     for use as a base register in operand addresses.  It may be either\n+     a suitable hard register or a pseudo register that has been\n+     allocated such a hard register.\n+\n+`REGNO_MODE_OK_FOR_BASE_P (NUM, MODE)'\n+     A C expression that is just like `REGNO_OK_FOR_BASE_P', except that\n+     that expression may examine the mode of the memory reference in\n+     MODE.  You should define this macro if the mode of the memory\n+     reference affects whether a register may be used as a base\n+     register.  If you define this macro, the compiler will use it\n+     instead of `REGNO_OK_FOR_BASE_P'.\n+\n+`REGNO_OK_FOR_INDEX_P (NUM)'\n+     A C expression which is nonzero if register number NUM is suitable\n+     for use as an index register in operand addresses.  It may be\n+     either a suitable hard register or a pseudo register that has been\n+     allocated such a hard register.\n+\n+     The difference between an index register and a base register is\n+     that the index register may be scaled.  If an address involves the\n+     sum of two registers, neither one of them scaled, then either one\n+     may be labeled the \"base\" and the other the \"index\"; but whichever\n+     labeling is used must fit the machine's constraints of which\n+     registers may serve in each capacity.  The compiler will try both\n+     labelings, looking for one that is valid, and will reload one or\n+     both registers only if neither labeling works.\n+\n+`PREFERRED_RELOAD_CLASS (X, CLASS)'\n+     A C expression that places additional restrictions on the register\n+     class to use when it is necessary to copy value X into a register\n+     in class CLASS.  The value is a register class; perhaps CLASS, or\n+     perhaps another, smaller class.  On many machines, the following\n+     definition is safe:\n+\n+          #define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS\n+\n+     Sometimes returning a more restrictive class makes better code.\n+     For example, on the 68000, when X is an integer constant that is\n+     in range for a `moveq' instruction, the value of this macro is\n+     always `DATA_REGS' as long as CLASS includes the data registers.\n+     Requiring a data register guarantees that a `moveq' will be used.\n+\n+     If X is a `const_double', by returning `NO_REGS' you can force X\n+     into a memory constant.  This is useful on certain machines where\n+     immediate floating values cannot be loaded into certain kinds of\n+     registers.\n+\n+`PREFERRED_OUTPUT_RELOAD_CLASS (X, CLASS)'\n+     Like `PREFERRED_RELOAD_CLASS', but for output reloads instead of\n+     input reloads.  If you don't define this macro, the default is to\n+     use CLASS, unchanged.\n+\n+`LIMIT_RELOAD_CLASS (MODE, CLASS)'\n+     A C expression that places additional restrictions on the register\n+     class to use when it is necessary to be able to hold a value of\n+     mode MODE in a reload register for which class CLASS would\n+     ordinarily be used.\n+\n+     Unlike `PREFERRED_RELOAD_CLASS', this macro should be used when\n+     there are certain modes that simply can't go in certain reload\n+     classes.\n+\n+     The value is a register class; perhaps CLASS, or perhaps another,\n+     smaller class.\n+\n+     Don't define this macro unless the target machine has limitations\n+     which require the macro to do something nontrivial.\n+\n+`SECONDARY_RELOAD_CLASS (CLASS, MODE, X)'\n+`SECONDARY_INPUT_RELOAD_CLASS (CLASS, MODE, X)'\n+`SECONDARY_OUTPUT_RELOAD_CLASS (CLASS, MODE, X)'\n+     Many machines have some registers that cannot be copied directly\n+     to or from memory or even from other types of registers.  An\n+     example is the `MQ' register, which on most machines, can only be\n+     copied to or from general registers, but not memory.  Some\n+     machines allow copying all registers to and from memory, but\n+     require a scratch register for stores to some memory locations\n+     (e.g., those with symbolic address on the RT, and those with\n+     certain symbolic address on the Sparc when compiling PIC).  In\n+     some cases, both an intermediate and a scratch register are\n+     required.\n+\n+     You should define these macros to indicate to the reload phase\n+     that it may need to allocate at least one register for a reload in\n+     addition to the register to contain the data.  Specifically, if\n+     copying X to a register CLASS in MODE requires an intermediate\n+     register, you should define `SECONDARY_INPUT_RELOAD_CLASS' to\n+     return the largest register class all of whose registers can be\n+     used as intermediate registers or scratch registers.\n+\n+     If copying a register CLASS in MODE to X requires an intermediate\n+     or scratch register, `SECONDARY_OUTPUT_RELOAD_CLASS' should be\n+     defined to return the largest register class required.  If the\n+     requirements for input and output reloads are the same, the macro\n+     `SECONDARY_RELOAD_CLASS' should be used instead of defining both\n+     macros identically.\n+\n+     The values returned by these macros are often `GENERAL_REGS'.\n+     Return `NO_REGS' if no spare register is needed; i.e., if X can be\n+     directly copied to or from a register of CLASS in MODE without\n+     requiring a scratch register.  Do not define this macro if it\n+     would always return `NO_REGS'.\n+\n+     If a scratch register is required (either with or without an\n+     intermediate register), you should define patterns for\n+     `reload_inM' or `reload_outM', as required (*note Standard\n+     Names::..  These patterns, which will normally be implemented with\n+     a `define_expand', should be similar to the `movM' patterns,\n+     except that operand 2 is the scratch register.\n+\n+     Define constraints for the reload register and scratch register\n+     that contain a single register class.  If the original reload\n+     register (whose class is CLASS) can meet the constraint given in\n+     the pattern, the value returned by these macros is used for the\n+     class of the scratch register.  Otherwise, two additional reload\n+     registers are required.  Their classes are obtained from the\n+     constraints in the insn pattern.\n+\n+     X might be a pseudo-register or a `subreg' of a pseudo-register,\n+     which could either be in a hard register or in memory.  Use\n+     `true_regnum' to find out; it will return -1 if the pseudo is in\n+     memory and the hard register number if it is in a register.\n+\n+     These macros should not be used in the case where a particular\n+     class of registers can only be copied to memory and not to another\n+     class of registers.  In that case, secondary reload registers are\n+     not needed and would not be helpful.  Instead, a stack location\n+     must be used to perform the copy and the `movM' pattern should use\n+     memory as a intermediate storage.  This case often occurs between\n+     floating-point and general registers.\n+\n+`SECONDARY_MEMORY_NEEDED (CLASS1, CLASS2, M)'\n+     Certain machines have the property that some registers cannot be\n+     copied to some other registers without using memory.  Define this\n+     macro on those machines to be a C expression that is non-zero if\n+     objects of mode M in registers of CLASS1 can only be copied to\n+     registers of class CLASS2 by storing a register of CLASS1 into\n+     memory and loading that memory location into a register of CLASS2.\n+\n+     Do not define this macro if its value would always be zero.\n+\n+`SECONDARY_MEMORY_NEEDED_RTX (MODE)'\n+     Normally when `SECONDARY_MEMORY_NEEDED' is defined, the compiler\n+     allocates a stack slot for a memory location needed for register\n+     copies.  If this macro is defined, the compiler instead uses the\n+     memory location defined by this macro.\n+\n+     Do not define this macro if you do not define\n+     `SECONDARY_MEMORY_NEEDED'.\n+\n+`SECONDARY_MEMORY_NEEDED_MODE (MODE)'\n+     When the compiler needs a secondary memory location to copy\n+     between two registers of mode MODE, it normally allocates\n+     sufficient memory to hold a quantity of `BITS_PER_WORD' bits and\n+     performs the store and load operations in a mode that many bits\n+     wide and whose class is the same as that of MODE.\n+\n+     This is right thing to do on most machines because it ensures that\n+     all bits of the register are copied and prevents accesses to the\n+     registers in a narrower mode, which some machines prohibit for\n+     floating-point registers.\n+\n+     However, this default behavior is not correct on some machines,\n+     such as the DEC Alpha, that store short integers in floating-point\n+     registers differently than in integer registers.  On those\n+     machines, the default widening will not work correctly and you\n+     must define this macro to suppress that widening in some cases.\n+     See the file `alpha.h' for details.\n+\n+     Do not define this macro if you do not define\n+     `SECONDARY_MEMORY_NEEDED' or if widening MODE to a mode that is\n+     `BITS_PER_WORD' bits wide is correct for your machine.\n+\n+`SMALL_REGISTER_CLASSES'\n+     Normally the compiler avoids choosing registers that have been\n+     explicitly mentioned in the rtl as spill registers (these\n+     registers are normally those used to pass parameters and return\n+     values).  However, some machines have so few registers of certain\n+     classes that there would not be enough registers to use as spill\n+     registers if this were done.\n+\n+     Define `SMALL_REGISTER_CLASSES' to be an expression with a non-zero\n+     value on these machines.  When this macro has a non-zero value, the\n+     compiler allows registers explicitly used in the rtl to be used as\n+     spill registers but avoids extending the lifetime of these\n+     registers.\n+\n+     It is always safe to define this macro with a non-zero value, but\n+     if you unnecessarily define it, you will reduce the amount of\n+     optimizations that can be performed in some cases.  If you do not\n+     define this macro with a non-zero value when it is required, the\n+     compiler will run out of spill registers and print a fatal error\n+     message.  For most machines, you should not define this macro at\n+     all.\n+\n+`CLASS_LIKELY_SPILLED_P (CLASS)'\n+     A C expression whose value is nonzero if pseudos that have been\n+     assigned to registers of class CLASS would likely be spilled\n+     because registers of CLASS are needed for spill registers.\n+\n+     The default value of this macro returns 1 if CLASS has exactly one\n+     register and zero otherwise.  On most machines, this default\n+     should be used.  Only define this macro to some other expression\n+     if pseudo allocated by `local-alloc.c' end up in memory because\n+     their hard registers were needed for spill registers.  If this\n+     macro returns nonzero for those classes, those pseudos will only\n+     be allocated by `global.c', which knows how to reallocate the\n+     pseudo to another register.  If there would not be another\n+     register available for reallocation, you should not change the\n+     definition of this macro since the only effect of such a\n+     definition would be to slow down register allocation.\n+\n+`CLASS_MAX_NREGS (CLASS, MODE)'\n+     A C expression for the maximum number of consecutive registers of\n+     class CLASS needed to hold a value of mode MODE.\n+\n+     This is closely related to the macro `HARD_REGNO_NREGS'.  In fact,\n+     the value of the macro `CLASS_MAX_NREGS (CLASS, MODE)' should be\n+     the maximum value of `HARD_REGNO_NREGS (REGNO, MODE)' for all\n+     REGNO values in the class CLASS.\n+\n+     This macro helps control the handling of multiple-word values in\n+     the reload pass.\n+\n+`CLASS_CANNOT_CHANGE_SIZE'\n+     If defined, a C expression for a class that contains registers\n+     which the compiler must always access in a mode that is the same\n+     size as the mode in which it loaded the register.\n+\n+     For the example, loading 32-bit integer or floating-point objects\n+     into floating-point registers on the Alpha extends them to 64-bits.\n+     Therefore loading a 64-bit object and then storing it as a 32-bit\n+     object does not store the low-order 32-bits, as would be the case\n+     for a normal register.  Therefore, `alpha.h' defines this macro as\n+     `FLOAT_REGS'.\n+\n+   Three other special macros describe which operands fit which\n+constraint letters.\n+\n+`CONST_OK_FOR_LETTER_P (VALUE, C)'\n+     A C expression that defines the machine-dependent operand\n+     constraint letters that specify particular ranges of integer\n+     values.  If C is one of those letters, the expression should check\n+     that VALUE, an integer, is in the appropriate range and return 1\n+     if so, 0 otherwise.  If C is not one of those letters, the value\n+     should be 0 regardless of VALUE.\n+\n+`CONST_DOUBLE_OK_FOR_LETTER_P (VALUE, C)'\n+     A C expression that defines the machine-dependent operand\n+     constraint letters that specify particular ranges of\n+     `const_double' values.\n+\n+     If C is one of those letters, the expression should check that\n+     VALUE, an RTX of code `const_double', is in the appropriate range\n+     and return 1 if so, 0 otherwise.  If C is not one of those\n+     letters, the value should be 0 regardless of VALUE.\n+\n+     `const_double' is used for all floating-point constants and for\n+     `DImode' fixed-point constants.  A given letter can accept either\n+     or both kinds of values.  It can use `GET_MODE' to distinguish\n+     between these kinds.\n+\n+`EXTRA_CONSTRAINT (VALUE, C)'\n+     A C expression that defines the optional machine-dependent\n+     constraint letters that can be used to segregate specific types of\n+     operands, usually memory references, for the target machine.\n+     Normally this macro will not be defined.  If it is required for a\n+     particular target machine, it should return 1 if VALUE corresponds\n+     to the operand type represented by the constraint letter C.  If C\n+     is not defined as an extra constraint, the value returned should\n+     be 0 regardless of VALUE.\n+\n+     For example, on the ROMP, load instructions cannot have their\n+     output in r0 if the memory reference contains a symbolic address.\n+     Constraint letter `Q' is defined as representing a memory address\n+     that does *not* contain a symbolic address.  An alternative is\n+     specified with a `Q' constraint on the input and `r' on the\n+     output.  The next alternative specifies `m' on the input and a\n+     register class that does not include r0 on the output.\n+\n+\u001f\n+File: gcc.info,  Node: Stack and Calling,  Next: Varargs,  Prev: Register Classes,  Up: Target Macros\n+\n+Stack Layout and Calling Conventions\n+====================================\n+\n+   This describes the stack layout and calling conventions.\n+\n+* Menu:\n+\n+* Frame Layout::\n+* Stack Checking::\n+* Frame Registers::\n+* Elimination::\n+* Stack Arguments::\n+* Register Arguments::\n+* Scalar Return::\n+* Aggregate Return::\n+* Caller Saves::\n+* Function Entry::\n+* Profiling::\n+\n+\u001f\n+File: gcc.info,  Node: Frame Layout,  Next: Stack Checking,  Up: Stack and Calling\n+\n+Basic Stack Layout\n+------------------\n+\n+   Here is the basic stack layout.\n+\n+`STACK_GROWS_DOWNWARD'\n+     Define this macro if pushing a word onto the stack moves the stack\n+     pointer to a smaller address.\n+\n+     When we say, \"define this macro if ...,\" it means that the\n+     compiler checks this macro only with `#ifdef' so the precise\n+     definition used does not matter.\n+\n+`FRAME_GROWS_DOWNWARD'\n+     Define this macro if the addresses of local variable slots are at\n+     negative offsets from the frame pointer.\n+\n+`ARGS_GROW_DOWNWARD'\n+     Define this macro if successive arguments to a function occupy\n+     decreasing addresses on the stack.\n+\n+`STARTING_FRAME_OFFSET'\n+     Offset from the frame pointer to the first local variable slot to\n+     be allocated.\n+\n+     If `FRAME_GROWS_DOWNWARD', find the next slot's offset by\n+     subtracting the first slot's length from `STARTING_FRAME_OFFSET'.\n+     Otherwise, it is found by adding the length of the first slot to\n+     the value `STARTING_FRAME_OFFSET'.\n+\n+`STACK_POINTER_OFFSET'\n+     Offset from the stack pointer register to the first location at\n+     which outgoing arguments are placed.  If not specified, the\n+     default value of zero is used.  This is the proper value for most\n+     machines.\n+\n+     If `ARGS_GROW_DOWNWARD', this is the offset to the location above\n+     the first location at which outgoing arguments are placed.\n+\n+`FIRST_PARM_OFFSET (FUNDECL)'\n+     Offset from the argument pointer register to the first argument's\n+     address.  On some machines it may depend on the data type of the\n+     function.\n+\n+     If `ARGS_GROW_DOWNWARD', this is the offset to the location above\n+     the first argument's address.\n+\n+`STACK_DYNAMIC_OFFSET (FUNDECL)'\n+     Offset from the stack pointer register to an item dynamically\n+     allocated on the stack, e.g., by `alloca'.\n+\n+     The default value for this macro is `STACK_POINTER_OFFSET' plus the\n+     length of the outgoing arguments.  The default is correct for most\n+     machines.  See `function.c' for details.\n+\n+`DYNAMIC_CHAIN_ADDRESS (FRAMEADDR)'\n+     A C expression whose value is RTL representing the address in a\n+     stack frame where the pointer to the caller's frame is stored.\n+     Assume that FRAMEADDR is an RTL expression for the address of the\n+     stack frame itself.\n+\n+     If you don't define this macro, the default is to return the value\n+     of FRAMEADDR--that is, the stack frame address is also the address\n+     of the stack word that points to the previous frame.\n+\n+`SETUP_FRAME_ADDRESSES ()'\n+     If defined, a C expression that produces the machine-specific code\n+     to setup the stack so that arbitrary frames can be accessed.  For\n+     example, on the Sparc, we must flush all of the register windows\n+     to the stack before we can access arbitrary stack frames.  This\n+     macro will seldom need to be defined.\n+\n+`RETURN_ADDR_RTX (COUNT, FRAMEADDR)'\n+     A C expression whose value is RTL representing the value of the\n+     return address for the frame COUNT steps up from the current\n+     frame, after the prologue.  FRAMEADDR is the frame pointer of the\n+     COUNT frame, or the frame pointer of the COUNT - 1 frame if\n+     `RETURN_ADDR_IN_PREVIOUS_FRAME' is defined.\n+\n+     The value of the expression must always be the correct address when\n+     COUNT is zero, but may be `NULL_RTX' if there is not way to\n+     determine the return address of other frames.\n+\n+`RETURN_ADDR_IN_PREVIOUS_FRAME'\n+     Define this if the return address of a particular stack frame is\n+     accessed from the frame pointer of the previous stack frame.\n+\n+`INCOMING_RETURN_ADDR_RTX'\n+     A C expression whose value is RTL representing the location of the\n+     incoming return address at the beginning of any function, before\n+     the prologue.  This RTL is either a `REG', indicating that the\n+     return value is saved in `REG', or a `MEM' representing a location\n+     in the stack.\n+\n+     You only need to define this macro if you want to support call\n+     frame debugging information like that provided by DWARF 2.\n+\n+`INCOMING_FRAME_SP_OFFSET'\n+     A C expression whose value is an integer giving the offset, in\n+     bytes, from the value of the stack pointer register to the top of\n+     the stack frame at the beginning of any function, before the\n+     prologue.  The top of the frame is defined to be the value of the\n+     stack pointer in the previous frame, just before the call\n+     instruction.\n+\n+     You only need to define this macro if you want to support call\n+     frame debugging information like that provided by DWARF 2.\n+\n+\u001f\n+File: gcc.info,  Node: Stack Checking,  Next: Frame Registers,  Prev: Frame Layout,  Up: Stack and Calling\n+\n+Specifying How Stack Checking is Done\n+-------------------------------------\n+\n+   GNU CC will check that stack references are within the boundaries of\n+the stack, if the `-fstack-check' is specified, in one of three ways:\n+\n+  1. If the value of the `STACK_CHECK_BUILTIN' macro is nonzero, GNU CC\n+     will assume that you have arranged for stack checking to be done at\n+     appropriate places in the configuration files, e.g., in\n+     `FUNCTION_PROLOGUE'.  GNU CC will do not other special processing.\n+\n+  2. If `STACK_CHECK_BUILTIN' is zero and you defined a named pattern\n+     called `check_stack' in your `md' file, GNU CC will call that\n+     pattern with one argument which is the address to compare the stack\n+     value against.  You must arrange for this pattern to report an\n+     error if the stack pointer is out of range.\n+\n+  3. If neither of the above are true, GNU CC will generate code to\n+     periodically \"probe\" the stack pointer using the values of the\n+     macros defined below.\n+\n+   Normally, you will use the default values of these macros, so GNU CC\n+will use the third approach.\n+\n+`STACK_CHECK_BUILTIN'\n+     A nonzero value if stack checking is done by the configuration\n+     files in a machine-dependent manner.  You should define this macro\n+     if stack checking is require by the ABI of your machine or if you\n+     would like to have to stack checking in some more efficient way\n+     than GNU CC's portable approach.  The default value of this macro\n+     is zero.\n+\n+`STACK_CHECK_PROBE_INTERVAL'\n+     An integer representing the interval at which GNU CC must generate\n+     stack probe instructions.  You will normally define this macro to\n+     be no larger than the size of the \"guard pages\" at the end of a\n+     stack area.  The default value of 4096 is suitable for most\n+     systems.\n+\n+`STACK_CHECK_PROBE_LOAD'\n+     A integer which is nonzero if GNU CC should perform the stack probe\n+     as a load instruction and zero if GNU CC should use a store\n+     instruction.  The default is zero, which is the most efficient\n+     choice on most systems.\n+\n+`STACK_CHECK_PROTECT'\n+     The number of bytes of stack needed to recover from a stack\n+     overflow, for languages where such a recovery is supported.  The\n+     default value of 75 words should be adequate for most machines.\n+\n+`STACK_CHECK_MAX_FRAME_SIZE'\n+     The maximum size of a stack frame, in bytes.  GNU CC will generate\n+     probe instructions in non-leaf functions to ensure at least this\n+     many bytes of stack are available.  If a stack frame is larger\n+     than this size, stack checking will not be reliable and GNU CC\n+     will issue a warning.  The default is chosen so that GNU CC only\n+     generates one instruction on most systems.  You should normally\n+     not change the default value of this macro.\n+\n+`STACK_CHECK_FIXED_FRAME_SIZE'\n+     GNU CC uses this value to generate the above warning message.  It\n+     represents the amount of fixed frame used by a function, not\n+     including space for any callee-saved registers, temporaries and\n+     user variables.  You need only specify an upper bound for this\n+     amount and will normally use the default of four words.\n+\n+`STACK_CHECK_MAX_VAR_SIZE'\n+     The maximum size, in bytes, of an object that GNU CC will place in\n+     the fixed area of the stack frame when the user specifies\n+     `-fstack-check'.  GNU CC computed the default from the values of\n+     the above macros and you will normally not need to override that\n+     default.\n+"}, {"sha": "686333944da1f079306557ecd1acd2bc9adeda63", "filename": "gcc/gcc.info-22", "status": "added", "additions": 961, "deletions": 0, "changes": 961, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-22", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-22", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-22?ref=336b436af56bf1082c50897581fef100f92ad23d", "patch": "@@ -0,0 +1,961 @@\n+This is Info file gcc.info, produced by Makeinfo version 1.68 from the\n+input file gcc.texi.\n+\n+   This file documents the use and the internals of the GNU compiler.\n+\n+   Published by the Free Software Foundation 59 Temple Place - Suite 330\n+Boston, MA 02111-1307 USA\n+\n+   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free\n+Software Foundation, Inc.\n+\n+   Permission is granted to make and distribute verbatim copies of this\n+manual provided the copyright notice and this permission notice are\n+preserved on all copies.\n+\n+   Permission is granted to copy and distribute modified versions of\n+this manual under the conditions for verbatim copying, provided also\n+that the sections entitled \"GNU General Public License,\" \"Funding for\n+Free Software,\" and \"Protect Your Freedom--Fight `Look And Feel'\" are\n+included exactly as in the original, and provided that the entire\n+resulting derived work is distributed under the terms of a permission\n+notice identical to this one.\n+\n+   Permission is granted to copy and distribute translations of this\n+manual into another language, under the above conditions for modified\n+versions, except that the sections entitled \"GNU General Public\n+License,\" \"Funding for Free Software,\" and \"Protect Your Freedom--Fight\n+`Look And Feel'\", and this permission notice, may be included in\n+translations approved by the Free Software Foundation instead of in the\n+original English.\n+\n+\u001f\n+File: gcc.info,  Node: Frame Registers,  Next: Elimination,  Prev: Stack Checking,  Up: Stack and Calling\n+\n+Registers That Address the Stack Frame\n+--------------------------------------\n+\n+   This discusses registers that address the stack frame.\n+\n+`STACK_POINTER_REGNUM'\n+     The register number of the stack pointer register, which must also\n+     be a fixed register according to `FIXED_REGISTERS'.  On most\n+     machines, the hardware determines which register this is.\n+\n+`FRAME_POINTER_REGNUM'\n+     The register number of the frame pointer register, which is used to\n+     access automatic variables in the stack frame.  On some machines,\n+     the hardware determines which register this is.  On other\n+     machines, you can choose any register you wish for this purpose.\n+\n+`HARD_FRAME_POINTER_REGNUM'\n+     On some machines the offset between the frame pointer and starting\n+     offset of the automatic variables is not known until after register\n+     allocation has been done (for example, because the saved registers\n+     are between these two locations).  On those machines, define\n+     `FRAME_POINTER_REGNUM' the number of a special, fixed register to\n+     be used internally until the offset is known, and define\n+     `HARD_FRAME_POINTER_REGNUM' to be actual the hard register number\n+     used for the frame pointer.\n+\n+     You should define this macro only in the very rare circumstances\n+     when it is not possible to calculate the offset between the frame\n+     pointer and the automatic variables until after register\n+     allocation has been completed.  When this macro is defined, you\n+     must also indicate in your definition of `ELIMINABLE_REGS' how to\n+     eliminate `FRAME_POINTER_REGNUM' into either\n+     `HARD_FRAME_POINTER_REGNUM' or `STACK_POINTER_REGNUM'.\n+\n+     Do not define this macro if it would be the same as\n+     `FRAME_POINTER_REGNUM'.\n+\n+`ARG_POINTER_REGNUM'\n+     The register number of the arg pointer register, which is used to\n+     access the function's argument list.  On some machines, this is\n+     the same as the frame pointer register.  On some machines, the\n+     hardware determines which register this is.  On other machines,\n+     you can choose any register you wish for this purpose.  If this is\n+     not the same register as the frame pointer register, then you must\n+     mark it as a fixed register according to `FIXED_REGISTERS', or\n+     arrange to be able to eliminate it (*note Elimination::.).\n+\n+`RETURN_ADDRESS_POINTER_REGNUM'\n+     The register number of the return address pointer register, which\n+     is used to access the current function's return address from the\n+     stack.  On some machines, the return address is not at a fixed\n+     offset from the frame pointer or stack pointer or argument\n+     pointer.  This register can be defined to point to the return\n+     address on the stack, and then be converted by `ELIMINABLE_REGS'\n+     into either the frame pointer or stack pointer.\n+\n+     Do not define this macro unless there is no other way to get the\n+     return address from the stack.\n+\n+`STATIC_CHAIN_REGNUM'\n+`STATIC_CHAIN_INCOMING_REGNUM'\n+     Register numbers used for passing a function's static chain\n+     pointer.  If register windows are used, the register number as\n+     seen by the called function is `STATIC_CHAIN_INCOMING_REGNUM',\n+     while the register number as seen by the calling function is\n+     `STATIC_CHAIN_REGNUM'.  If these registers are the same,\n+     `STATIC_CHAIN_INCOMING_REGNUM' need not be defined.\n+\n+     The static chain register need not be a fixed register.\n+\n+     If the static chain is passed in memory, these macros should not be\n+     defined; instead, the next two macros should be defined.\n+\n+`STATIC_CHAIN'\n+`STATIC_CHAIN_INCOMING'\n+     If the static chain is passed in memory, these macros provide rtx\n+     giving `mem' expressions that denote where they are stored.\n+     `STATIC_CHAIN' and `STATIC_CHAIN_INCOMING' give the locations as\n+     seen by the calling and called functions, respectively.  Often the\n+     former will be at an offset from the stack pointer and the latter\n+     at an offset from the frame pointer.\n+\n+     The variables `stack_pointer_rtx', `frame_pointer_rtx', and\n+     `arg_pointer_rtx' will have been initialized prior to the use of\n+     these macros and should be used to refer to those items.\n+\n+     If the static chain is passed in a register, the two previous\n+     macros should be defined instead.\n+\n+\u001f\n+File: gcc.info,  Node: Elimination,  Next: Stack Arguments,  Prev: Frame Registers,  Up: Stack and Calling\n+\n+Eliminating Frame Pointer and Arg Pointer\n+-----------------------------------------\n+\n+   This is about eliminating the frame pointer and arg pointer.\n+\n+`FRAME_POINTER_REQUIRED'\n+     A C expression which is nonzero if a function must have and use a\n+     frame pointer.  This expression is evaluated  in the reload pass.\n+     If its value is nonzero the function will have a frame pointer.\n+\n+     The expression can in principle examine the current function and\n+     decide according to the facts, but on most machines the constant 0\n+     or the constant 1 suffices.  Use 0 when the machine allows code to\n+     be generated with no frame pointer, and doing so saves some time\n+     or space.  Use 1 when there is no possible advantage to avoiding a\n+     frame pointer.\n+\n+     In certain cases, the compiler does not know how to produce valid\n+     code without a frame pointer.  The compiler recognizes those cases\n+     and automatically gives the function a frame pointer regardless of\n+     what `FRAME_POINTER_REQUIRED' says.  You don't need to worry about\n+     them.\n+\n+     In a function that does not require a frame pointer, the frame\n+     pointer register can be allocated for ordinary usage, unless you\n+     mark it as a fixed register.  See `FIXED_REGISTERS' for more\n+     information.\n+\n+`INITIAL_FRAME_POINTER_OFFSET (DEPTH-VAR)'\n+     A C statement to store in the variable DEPTH-VAR the difference\n+     between the frame pointer and the stack pointer values immediately\n+     after the function prologue.  The value would be computed from\n+     information such as the result of `get_frame_size ()' and the\n+     tables of registers `regs_ever_live' and `call_used_regs'.\n+\n+     If `ELIMINABLE_REGS' is defined, this macro will be not be used and\n+     need not be defined.  Otherwise, it must be defined even if\n+     `FRAME_POINTER_REQUIRED' is defined to always be true; in that\n+     case, you may set DEPTH-VAR to anything.\n+\n+`ELIMINABLE_REGS'\n+     If defined, this macro specifies a table of register pairs used to\n+     eliminate unneeded registers that point into the stack frame.  If\n+     it is not defined, the only elimination attempted by the compiler\n+     is to replace references to the frame pointer with references to\n+     the stack pointer.\n+\n+     The definition of this macro is a list of structure\n+     initializations, each of which specifies an original and\n+     replacement register.\n+\n+     On some machines, the position of the argument pointer is not\n+     known until the compilation is completed.  In such a case, a\n+     separate hard register must be used for the argument pointer.\n+     This register can be eliminated by replacing it with either the\n+     frame pointer or the argument pointer, depending on whether or not\n+     the frame pointer has been eliminated.\n+\n+     In this case, you might specify:\n+          #define ELIMINABLE_REGS  \\\n+          {{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM}, \\\n+           {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM}, \\\n+           {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n+\n+     Note that the elimination of the argument pointer with the stack\n+     pointer is specified first since that is the preferred elimination.\n+\n+`CAN_ELIMINATE (FROM-REG, TO-REG)'\n+     A C expression that returns non-zero if the compiler is allowed to\n+     try to replace register number FROM-REG with register number\n+     TO-REG.  This macro need only be defined if `ELIMINABLE_REGS' is\n+     defined, and will usually be the constant 1, since most of the\n+     cases preventing register elimination are things that the compiler\n+     already knows about.\n+\n+`INITIAL_ELIMINATION_OFFSET (FROM-REG, TO-REG, OFFSET-VAR)'\n+     This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n+     specifies the initial difference between the specified pair of\n+     registers.  This macro must be defined if `ELIMINABLE_REGS' is\n+     defined.\n+\n+`LONGJMP_RESTORE_FROM_STACK'\n+     Define this macro if the `longjmp' function restores registers from\n+     the stack frames, rather than from those saved specifically by\n+     `setjmp'.  Certain quantities must not be kept in registers across\n+     a call to `setjmp' on such machines.\n+\n+\u001f\n+File: gcc.info,  Node: Stack Arguments,  Next: Register Arguments,  Prev: Elimination,  Up: Stack and Calling\n+\n+Passing Function Arguments on the Stack\n+---------------------------------------\n+\n+   The macros in this section control how arguments are passed on the\n+stack.  See the following section for other macros that control passing\n+certain arguments in registers.\n+\n+`PROMOTE_PROTOTYPES'\n+     Define this macro if an argument declared in a prototype as an\n+     integral type smaller than `int' should actually be passed as an\n+     `int'.  In addition to avoiding errors in certain cases of\n+     mismatch, it also makes for better code on certain machines.\n+\n+`PUSH_ROUNDING (NPUSHED)'\n+     A C expression that is the number of bytes actually pushed onto the\n+     stack when an instruction attempts to push NPUSHED bytes.\n+\n+     If the target machine does not have a push instruction, do not\n+     define this macro.  That directs GNU CC to use an alternate\n+     strategy: to allocate the entire argument block and then store the\n+     arguments into it.\n+\n+     On some machines, the definition\n+\n+          #define PUSH_ROUNDING(BYTES) (BYTES)\n+\n+     will suffice.  But on other machines, instructions that appear to\n+     push one byte actually push two bytes in an attempt to maintain\n+     alignment.  Then the definition should be\n+\n+          #define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n+\n+`ACCUMULATE_OUTGOING_ARGS'\n+     If defined, the maximum amount of space required for outgoing\n+     arguments will be computed and placed into the variable\n+     `current_function_outgoing_args_size'.  No space will be pushed\n+     onto the stack for each call; instead, the function prologue should\n+     increase the stack frame size by this amount.\n+\n+     Defining both `PUSH_ROUNDING' and `ACCUMULATE_OUTGOING_ARGS' is\n+     not proper.\n+\n+`REG_PARM_STACK_SPACE (FNDECL)'\n+     Define this macro if functions should assume that stack space has\n+     been allocated for arguments even when their values are passed in\n+     registers.\n+\n+     The value of this macro is the size, in bytes, of the area\n+     reserved for arguments passed in registers for the function\n+     represented by FNDECL.\n+\n+     This space can be allocated by the caller, or be a part of the\n+     machine-dependent stack frame: `OUTGOING_REG_PARM_STACK_SPACE' says\n+     which.\n+\n+`MAYBE_REG_PARM_STACK_SPACE'\n+`FINAL_REG_PARM_STACK_SPACE (CONST_SIZE, VAR_SIZE)'\n+     Define these macros in addition to the one above if functions might\n+     allocate stack space for arguments even when their values are\n+     passed in registers.  These should be used when the stack space\n+     allocated for arguments in registers is not a simple constant\n+     independent of the function declaration.\n+\n+     The value of the first macro is the size, in bytes, of the area\n+     that we should initially assume would be reserved for arguments\n+     passed in registers.\n+\n+     The value of the second macro is the actual size, in bytes, of the\n+     area that will be reserved for arguments passed in registers.\n+     This takes two arguments: an integer representing the number of\n+     bytes of fixed sized arguments on the stack, and a tree\n+     representing the number of bytes of variable sized arguments on\n+     the stack.\n+\n+     When these macros are defined, `REG_PARM_STACK_SPACE' will only be\n+     called for libcall functions, the current function, or for a\n+     function being called when it is known that such stack space must\n+     be allocated.  In each case this value can be easily computed.\n+\n+     When deciding whether a called function needs such stack space,\n+     and how much space to reserve, GNU CC uses these two macros\n+     instead of `REG_PARM_STACK_SPACE'.\n+\n+`OUTGOING_REG_PARM_STACK_SPACE'\n+     Define this if it is the responsibility of the caller to allocate\n+     the area reserved for arguments passed in registers.\n+\n+     If `ACCUMULATE_OUTGOING_ARGS' is defined, this macro controls\n+     whether the space for these arguments counts in the value of\n+     `current_function_outgoing_args_size'.\n+\n+`STACK_PARMS_IN_REG_PARM_AREA'\n+     Define this macro if `REG_PARM_STACK_SPACE' is defined, but the\n+     stack parameters don't skip the area specified by it.\n+\n+     Normally, when a parameter is not passed in registers, it is\n+     placed on the stack beyond the `REG_PARM_STACK_SPACE' area.\n+     Defining this macro suppresses this behavior and causes the\n+     parameter to be passed on the stack in its natural location.\n+\n+`RETURN_POPS_ARGS (FUNDECL, FUNTYPE, STACK-SIZE)'\n+     A C expression that should indicate the number of bytes of its own\n+     arguments that a function pops on returning, or 0 if the function\n+     pops no arguments and the caller must therefore pop them all after\n+     the function returns.\n+\n+     FUNDECL is a C variable whose value is a tree node that describes\n+     the function in question.  Normally it is a node of type\n+     `FUNCTION_DECL' that describes the declaration of the function.\n+     From this you can obtain the DECL_MACHINE_ATTRIBUTES of the\n+     function.\n+\n+     FUNTYPE is a C variable whose value is a tree node that describes\n+     the function in question.  Normally it is a node of type\n+     `FUNCTION_TYPE' that describes the data type of the function.\n+     From this it is possible to obtain the data types of the value and\n+     arguments (if known).\n+\n+     When a call to a library function is being considered, FUNDECL\n+     will contain an identifier node for the library function.  Thus, if\n+     you need to distinguish among various library functions, you can\n+     do so by their names.  Note that \"library function\" in this\n+     context means a function used to perform arithmetic, whose name is\n+     known specially in the compiler and was not mentioned in the C\n+     code being compiled.\n+\n+     STACK-SIZE is the number of bytes of arguments passed on the\n+     stack.  If a variable number of bytes is passed, it is zero, and\n+     argument popping will always be the responsibility of the calling\n+     function.\n+\n+     On the Vax, all functions always pop their arguments, so the\n+     definition of this macro is STACK-SIZE.  On the 68000, using the\n+     standard calling convention, no functions pop their arguments, so\n+     the value of the macro is always 0 in this case.  But an\n+     alternative calling convention is available in which functions\n+     that take a fixed number of arguments pop them but other functions\n+     (such as `printf') pop nothing (the caller pops all).  When this\n+     convention is in use, FUNTYPE is examined to determine whether a\n+     function takes a fixed number of arguments.\n+\n+\u001f\n+File: gcc.info,  Node: Register Arguments,  Next: Scalar Return,  Prev: Stack Arguments,  Up: Stack and Calling\n+\n+Passing Arguments in Registers\n+------------------------------\n+\n+   This section describes the macros which let you control how various\n+types of arguments are passed in registers or how they are arranged in\n+the stack.\n+\n+`FUNCTION_ARG (CUM, MODE, TYPE, NAMED)'\n+     A C expression that controls whether a function argument is passed\n+     in a register, and which register.\n+\n+     The arguments are CUM, which summarizes all the previous\n+     arguments; MODE, the machine mode of the argument; TYPE, the data\n+     type of the argument as a tree node or 0 if that is not known\n+     (which happens for C support library functions); and NAMED, which\n+     is 1 for an ordinary argument and 0 for nameless arguments that\n+     correspond to `...' in the called function's prototype.\n+\n+     The value of the expression is usually either a `reg' RTX for the\n+     hard register in which to pass the argument, or zero to pass the\n+     argument on the stack.\n+\n+     For machines like the Vax and 68000, where normally all arguments\n+     are pushed, zero suffices as a definition.\n+\n+     The value of the expression can also be a `parallel' RTX.  This is\n+     used when an argument is passed in multiple locations.  The mode\n+     of the of the `parallel' should be the mode of the entire\n+     argument.  The `parallel' holds any number of `expr_list' pairs;\n+     each one describes where part of the argument is passed.  In each\n+     `expr_list', the first operand can be either a `reg' RTX for the\n+     hard register in which to pass this part of the argument, or zero\n+     to pass the argument on the stack.  If this operand is a `reg',\n+     then the mode indicates how large this part of the argument is.\n+     The second operand of the `expr_list' is a `const_int' which gives\n+     the offset in bytes into the entire argument where this part\n+     starts.\n+\n+     The usual way to make the ANSI library `stdarg.h' work on a machine\n+     where some arguments are usually passed in registers, is to cause\n+     nameless arguments to be passed on the stack instead.  This is done\n+     by making `FUNCTION_ARG' return 0 whenever NAMED is 0.\n+\n+     You may use the macro `MUST_PASS_IN_STACK (MODE, TYPE)' in the\n+     definition of this macro to determine if this argument is of a\n+     type that must be passed in the stack.  If `REG_PARM_STACK_SPACE'\n+     is not defined and `FUNCTION_ARG' returns non-zero for such an\n+     argument, the compiler will abort.  If `REG_PARM_STACK_SPACE' is\n+     defined, the argument will be computed in the stack and then\n+     loaded into a register.\n+\n+`FUNCTION_INCOMING_ARG (CUM, MODE, TYPE, NAMED)'\n+     Define this macro if the target machine has \"register windows\", so\n+     that the register in which a function sees an arguments is not\n+     necessarily the same as the one in which the caller passed the\n+     argument.\n+\n+     For such machines, `FUNCTION_ARG' computes the register in which\n+     the caller passes the value, and `FUNCTION_INCOMING_ARG' should be\n+     defined in a similar fashion to tell the function being called\n+     where the arguments will arrive.\n+\n+     If `FUNCTION_INCOMING_ARG' is not defined, `FUNCTION_ARG' serves\n+     both purposes.\n+\n+`FUNCTION_ARG_PARTIAL_NREGS (CUM, MODE, TYPE, NAMED)'\n+     A C expression for the number of words, at the beginning of an\n+     argument, must be put in registers.  The value must be zero for\n+     arguments that are passed entirely in registers or that are\n+     entirely pushed on the stack.\n+\n+     On some machines, certain arguments must be passed partially in\n+     registers and partially in memory.  On these machines, typically\n+     the first N words of arguments are passed in registers, and the\n+     rest on the stack.  If a multi-word argument (a `double' or a\n+     structure) crosses that boundary, its first few words must be\n+     passed in registers and the rest must be pushed.  This macro tells\n+     the compiler when this occurs, and how many of the words should go\n+     in registers.\n+\n+     `FUNCTION_ARG' for these arguments should return the first\n+     register to be used by the caller for this argument; likewise\n+     `FUNCTION_INCOMING_ARG', for the called function.\n+\n+`FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED)'\n+     A C expression that indicates when an argument must be passed by\n+     reference.  If nonzero for an argument, a copy of that argument is\n+     made in memory and a pointer to the argument is passed instead of\n+     the argument itself.  The pointer is passed in whatever way is\n+     appropriate for passing a pointer to that type.\n+\n+     On machines where `REG_PARM_STACK_SPACE' is not defined, a suitable\n+     definition of this macro might be\n+          #define FUNCTION_ARG_PASS_BY_REFERENCE\\\n+          (CUM, MODE, TYPE, NAMED)  \\\n+            MUST_PASS_IN_STACK (MODE, TYPE)\n+\n+`FUNCTION_ARG_CALLEE_COPIES (CUM, MODE, TYPE, NAMED)'\n+     If defined, a C expression that indicates when it is the called\n+     function's responsibility to make a copy of arguments passed by\n+     invisible reference.  Normally, the caller makes a copy and passes\n+     the address of the copy to the routine being called.  When\n+     FUNCTION_ARG_CALLEE_COPIES is defined and is nonzero, the caller\n+     does not make a copy.  Instead, it passes a pointer to the \"live\"\n+     value.  The called function must not modify this value.  If it can\n+     be determined that the value won't be modified, it need not make a\n+     copy; otherwise a copy must be made.\n+\n+`CUMULATIVE_ARGS'\n+     A C type for declaring a variable that is used as the first\n+     argument of `FUNCTION_ARG' and other related values.  For some\n+     target machines, the type `int' suffices and can hold the number\n+     of bytes of argument so far.\n+\n+     There is no need to record in `CUMULATIVE_ARGS' anything about the\n+     arguments that have been passed on the stack.  The compiler has\n+     other variables to keep track of that.  For target machines on\n+     which all arguments are passed on the stack, there is no need to\n+     store anything in `CUMULATIVE_ARGS'; however, the data structure\n+     must exist and should not be empty, so use `int'.\n+\n+`INIT_CUMULATIVE_ARGS (CUM, FNTYPE, LIBNAME, INDIRECT)'\n+     A C statement (sans semicolon) for initializing the variable CUM\n+     for the state at the beginning of the argument list.  The variable\n+     has type `CUMULATIVE_ARGS'.  The value of FNTYPE is the tree node\n+     for the data type of the function which will receive the args, or 0\n+     if the args are to a compiler support library function.  The value\n+     of INDIRECT is nonzero when processing an indirect call, for\n+     example a call through a function pointer.  The value of INDIRECT\n+     is zero for a call to an explicitly named function, a library\n+     function call, or when `INIT_CUMULATIVE_ARGS' is used to find\n+     arguments for the function being compiled.\n+\n+     When processing a call to a compiler support library function,\n+     LIBNAME identifies which one.  It is a `symbol_ref' rtx which\n+     contains the name of the function, as a string.  LIBNAME is 0 when\n+     an ordinary C function call is being processed.  Thus, each time\n+     this macro is called, either LIBNAME or FNTYPE is nonzero, but\n+     never both of them at once.\n+\n+`INIT_CUMULATIVE_INCOMING_ARGS (CUM, FNTYPE, LIBNAME)'\n+     Like `INIT_CUMULATIVE_ARGS' but overrides it for the purposes of\n+     finding the arguments for the function being compiled.  If this\n+     macro is undefined, `INIT_CUMULATIVE_ARGS' is used instead.\n+\n+     The value passed for LIBNAME is always 0, since library routines\n+     with special calling conventions are never compiled with GNU CC.\n+     The argument LIBNAME exists for symmetry with\n+     `INIT_CUMULATIVE_ARGS'.\n+\n+`FUNCTION_ARG_ADVANCE (CUM, MODE, TYPE, NAMED)'\n+     A C statement (sans semicolon) to update the summarizer variable\n+     CUM to advance past an argument in the argument list.  The values\n+     MODE, TYPE and NAMED describe that argument.  Once this is done,\n+     the variable CUM is suitable for analyzing the *following*\n+     argument with `FUNCTION_ARG', etc.\n+\n+     This macro need not do anything if the argument in question was\n+     passed on the stack.  The compiler knows how to track the amount\n+     of stack space used for arguments without any special help.\n+\n+`FUNCTION_ARG_PADDING (MODE, TYPE)'\n+     If defined, a C expression which determines whether, and in which\n+     direction, to pad out an argument with extra space.  The value\n+     should be of type `enum direction': either `upward' to pad above\n+     the argument, `downward' to pad below, or `none' to inhibit\n+     padding.\n+\n+     The *amount* of padding is always just enough to reach the next\n+     multiple of `FUNCTION_ARG_BOUNDARY'; this macro does not control\n+     it.\n+\n+     This macro has a default definition which is right for most\n+     systems.  For little-endian machines, the default is to pad\n+     upward.  For big-endian machines, the default is to pad downward\n+     for an argument of constant size shorter than an `int', and upward\n+     otherwise.\n+\n+`FUNCTION_ARG_BOUNDARY (MODE, TYPE)'\n+     If defined, a C expression that gives the alignment boundary, in\n+     bits, of an argument with the specified mode and type.  If it is\n+     not defined, `PARM_BOUNDARY' is used for all arguments.\n+\n+`FUNCTION_ARG_REGNO_P (REGNO)'\n+     A C expression that is nonzero if REGNO is the number of a hard\n+     register in which function arguments are sometimes passed.  This\n+     does *not* include implicit arguments such as the static chain and\n+     the structure-value address.  On many machines, no registers can be\n+     used for this purpose since all function arguments are pushed on\n+     the stack.\n+\n+\u001f\n+File: gcc.info,  Node: Scalar Return,  Next: Aggregate Return,  Prev: Register Arguments,  Up: Stack and Calling\n+\n+How Scalar Function Values Are Returned\n+---------------------------------------\n+\n+   This section discusses the macros that control returning scalars as\n+values--values that can fit in registers.\n+\n+`TRADITIONAL_RETURN_FLOAT'\n+     Define this macro if `-traditional' should not cause functions\n+     declared to return `float' to convert the value to `double'.\n+\n+`FUNCTION_VALUE (VALTYPE, FUNC)'\n+     A C expression to create an RTX representing the place where a\n+     function returns a value of data type VALTYPE.  VALTYPE is a tree\n+     node representing a data type.  Write `TYPE_MODE (VALTYPE)' to get\n+     the machine mode used to represent that type.  On many machines,\n+     only the mode is relevant.  (Actually, on most machines, scalar\n+     values are returned in the same place regardless of mode).\n+\n+     The value of the expression is usually a `reg' RTX for the hard\n+     register where the return value is stored.  The value can also be a\n+     `parallel' RTX, if the return value is in multiple places.  See\n+     `FUNCTION_ARG' for an explanation of the `parallel' form.\n+\n+     If `PROMOTE_FUNCTION_RETURN' is defined, you must apply the same\n+     promotion rules specified in `PROMOTE_MODE' if VALTYPE is a scalar\n+     type.\n+\n+     If the precise function being called is known, FUNC is a tree node\n+     (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This\n+     makes it possible to use a different value-returning convention\n+     for specific functions when all their calls are known.\n+\n+     `FUNCTION_VALUE' is not used for return vales with aggregate data\n+     types, because these are returned in another way.  See\n+     `STRUCT_VALUE_REGNUM' and related macros, below.\n+\n+`FUNCTION_OUTGOING_VALUE (VALTYPE, FUNC)'\n+     Define this macro if the target machine has \"register windows\" so\n+     that the register in which a function returns its value is not the\n+     same as the one in which the caller sees the value.\n+\n+     For such machines, `FUNCTION_VALUE' computes the register in which\n+     the caller will see the value.  `FUNCTION_OUTGOING_VALUE' should be\n+     defined in a similar fashion to tell the function where to put the\n+     value.\n+\n+     If `FUNCTION_OUTGOING_VALUE' is not defined, `FUNCTION_VALUE'\n+     serves both purposes.\n+\n+     `FUNCTION_OUTGOING_VALUE' is not used for return vales with\n+     aggregate data types, because these are returned in another way.\n+     See `STRUCT_VALUE_REGNUM' and related macros, below.\n+\n+`LIBCALL_VALUE (MODE)'\n+     A C expression to create an RTX representing the place where a\n+     library function returns a value of mode MODE.  If the precise\n+     function being called is known, FUNC is a tree node\n+     (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This\n+     makes it possible to use a different value-returning convention\n+     for specific functions when all their calls are known.\n+\n+     Note that \"library function\" in this context means a compiler\n+     support routine, used to perform arithmetic, whose name is known\n+     specially by the compiler and was not mentioned in the C code being\n+     compiled.\n+\n+     The definition of `LIBRARY_VALUE' need not be concerned aggregate\n+     data types, because none of the library functions returns such\n+     types.\n+\n+`FUNCTION_VALUE_REGNO_P (REGNO)'\n+     A C expression that is nonzero if REGNO is the number of a hard\n+     register in which the values of called function may come back.\n+\n+     A register whose use for returning values is limited to serving as\n+     the second of a pair (for a value of type `double', say) need not\n+     be recognized by this macro.  So for most machines, this definition\n+     suffices:\n+\n+          #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n+\n+     If the machine has register windows, so that the caller and the\n+     called function use different registers for the return value, this\n+     macro should recognize only the caller's register numbers.\n+\n+`APPLY_RESULT_SIZE'\n+     Define this macro if `untyped_call' and `untyped_return' need more\n+     space than is implied by `FUNCTION_VALUE_REGNO_P' for saving and\n+     restoring an arbitrary return value.\n+\n+\u001f\n+File: gcc.info,  Node: Aggregate Return,  Next: Caller Saves,  Prev: Scalar Return,  Up: Stack and Calling\n+\n+How Large Values Are Returned\n+-----------------------------\n+\n+   When a function value's mode is `BLKmode' (and in some other cases),\n+the value is not returned according to `FUNCTION_VALUE' (*note Scalar\n+Return::.).  Instead, the caller passes the address of a block of\n+memory in which the value should be stored.  This address is called the\n+\"structure value address\".\n+\n+   This section describes how to control returning structure values in\n+memory.\n+\n+`RETURN_IN_MEMORY (TYPE)'\n+     A C expression which can inhibit the returning of certain function\n+     values in registers, based on the type of value.  A nonzero value\n+     says to return the function value in memory, just as large\n+     structures are always returned.  Here TYPE will be a C expression\n+     of type `tree', representing the data type of the value.\n+\n+     Note that values of mode `BLKmode' must be explicitly handled by\n+     this macro.  Also, the option `-fpcc-struct-return' takes effect\n+     regardless of this macro.  On most systems, it is possible to\n+     leave the macro undefined; this causes a default definition to be\n+     used, whose value is the constant 1 for `BLKmode' values, and 0\n+     otherwise.\n+\n+     Do not use this macro to indicate that structures and unions\n+     should always be returned in memory.  You should instead use\n+     `DEFAULT_PCC_STRUCT_RETURN' to indicate this.\n+\n+`DEFAULT_PCC_STRUCT_RETURN'\n+     Define this macro to be 1 if all structure and union return values\n+     must be in memory.  Since this results in slower code, this should\n+     be defined only if needed for compatibility with other compilers\n+     or with an ABI.  If you define this macro to be 0, then the\n+     conventions used for structure and union return values are decided\n+     by the `RETURN_IN_MEMORY' macro.\n+\n+     If not defined, this defaults to the value 1.\n+\n+`STRUCT_VALUE_REGNUM'\n+     If the structure value address is passed in a register, then\n+     `STRUCT_VALUE_REGNUM' should be the number of that register.\n+\n+`STRUCT_VALUE'\n+     If the structure value address is not passed in a register, define\n+     `STRUCT_VALUE' as an expression returning an RTX for the place\n+     where the address is passed.  If it returns 0, the address is\n+     passed as an \"invisible\" first argument.\n+\n+`STRUCT_VALUE_INCOMING_REGNUM'\n+     On some architectures the place where the structure value address\n+     is found by the called function is not the same place that the\n+     caller put it.  This can be due to register windows, or it could\n+     be because the function prologue moves it to a different place.\n+\n+     If the incoming location of the structure value address is in a\n+     register, define this macro as the register number.\n+\n+`STRUCT_VALUE_INCOMING'\n+     If the incoming location is not a register, then you should define\n+     `STRUCT_VALUE_INCOMING' as an expression for an RTX for where the\n+     called function should find the value.  If it should find the\n+     value on the stack, define this to create a `mem' which refers to\n+     the frame pointer.  A definition of 0 means that the address is\n+     passed as an \"invisible\" first argument.\n+\n+`PCC_STATIC_STRUCT_RETURN'\n+     Define this macro if the usual system convention on the target\n+     machine for returning structures and unions is for the called\n+     function to return the address of a static variable containing the\n+     value.\n+\n+     Do not define this if the usual system convention is for the\n+     caller to pass an address to the subroutine.\n+\n+     This macro has effect in `-fpcc-struct-return' mode, but it does\n+     nothing when you use `-freg-struct-return' mode.\n+\n+\u001f\n+File: gcc.info,  Node: Caller Saves,  Next: Function Entry,  Prev: Aggregate Return,  Up: Stack and Calling\n+\n+Caller-Saves Register Allocation\n+--------------------------------\n+\n+   If you enable it, GNU CC can save registers around function calls.\n+This makes it possible to use call-clobbered registers to hold\n+variables that must live across calls.\n+\n+`DEFAULT_CALLER_SAVES'\n+     Define this macro if function calls on the target machine do not\n+     preserve any registers; in other words, if `CALL_USED_REGISTERS'\n+     has 1 for all registers.  This macro enables `-fcaller-saves' by\n+     default.  Eventually that option will be enabled by default on all\n+     machines and both the option and this macro will be eliminated.\n+\n+`CALLER_SAVE_PROFITABLE (REFS, CALLS)'\n+     A C expression to determine whether it is worthwhile to consider\n+     placing a pseudo-register in a call-clobbered hard register and\n+     saving and restoring it around each function call.  The expression\n+     should be 1 when this is worth doing, and 0 otherwise.\n+\n+     If you don't define this macro, a default is used which is good on\n+     most machines: `4 * CALLS < REFS'.\n+\n+\u001f\n+File: gcc.info,  Node: Function Entry,  Next: Profiling,  Prev: Caller Saves,  Up: Stack and Calling\n+\n+Function Entry and Exit\n+-----------------------\n+\n+   This section describes the macros that output function entry\n+(\"prologue\") and exit (\"epilogue\") code.\n+\n+`FUNCTION_PROLOGUE (FILE, SIZE)'\n+     A C compound statement that outputs the assembler code for entry\n+     to a function.  The prologue is responsible for setting up the\n+     stack frame, initializing the frame pointer register, saving\n+     registers that must be saved, and allocating SIZE additional bytes\n+     of storage for the local variables.  SIZE is an integer.  FILE is\n+     a stdio stream to which the assembler code should be output.\n+\n+     The label for the beginning of the function need not be output by\n+     this macro.  That has already been done when the macro is run.\n+\n+     To determine which registers to save, the macro can refer to the\n+     array `regs_ever_live': element R is nonzero if hard register R is\n+     used anywhere within the function.  This implies the function\n+     prologue should save register R, provided it is not one of the\n+     call-used registers.  (`FUNCTION_EPILOGUE' must likewise use\n+     `regs_ever_live'.)\n+\n+     On machines that have \"register windows\", the function entry code\n+     does not save on the stack the registers that are in the windows,\n+     even if they are supposed to be preserved by function calls;\n+     instead it takes appropriate steps to \"push\" the register stack,\n+     if any non-call-used registers are used in the function.\n+\n+     On machines where functions may or may not have frame-pointers, the\n+     function entry code must vary accordingly; it must set up the frame\n+     pointer if one is wanted, and not otherwise.  To determine whether\n+     a frame pointer is in wanted, the macro can refer to the variable\n+     `frame_pointer_needed'.  The variable's value will be 1 at run\n+     time in a function that needs a frame pointer.  *Note\n+     Elimination::.\n+\n+     The function entry code is responsible for allocating any stack\n+     space required for the function.  This stack space consists of the\n+     regions listed below.  In most cases, these regions are allocated\n+     in the order listed, with the last listed region closest to the\n+     top of the stack (the lowest address if `STACK_GROWS_DOWNWARD' is\n+     defined, and the highest address if it is not defined).  You can\n+     use a different order for a machine if doing so is more convenient\n+     or required for compatibility reasons.  Except in cases where\n+     required by standard or by a debugger, there is no reason why the\n+     stack layout used by GCC need agree with that used by other\n+     compilers for a machine.\n+\n+        * A region of `current_function_pretend_args_size' bytes of\n+          uninitialized space just underneath the first argument\n+          arriving on the stack.  (This may not be at the very start of\n+          the allocated stack region if the calling sequence has pushed\n+          anything else since pushing the stack arguments.  But\n+          usually, on such machines, nothing else has been pushed yet,\n+          because the function prologue itself does all the pushing.)\n+          This region is used on machines where an argument may be\n+          passed partly in registers and partly in memory, and, in some\n+          cases to support the features in `varargs.h' and `stdargs.h'.\n+\n+        * An area of memory used to save certain registers used by the\n+          function.  The size of this area, which may also include\n+          space for such things as the return address and pointers to\n+          previous stack frames, is machine-specific and usually\n+          depends on which registers have been used in the function.\n+          Machines with register windows often do not require a save\n+          area.\n+\n+        * A region of at least SIZE bytes, possibly rounded up to an\n+          allocation boundary, to contain the local variables of the\n+          function.  On some machines, this region and the save area\n+          may occur in the opposite order, with the save area closer to\n+          the top of the stack.\n+\n+        * Optionally, when `ACCUMULATE_OUTGOING_ARGS' is defined, a\n+          region of `current_function_outgoing_args_size' bytes to be\n+          used for outgoing argument lists of the function.  *Note\n+          Stack Arguments::.\n+\n+     Normally, it is necessary for the macros `FUNCTION_PROLOGUE' and\n+     `FUNCTION_EPILOGUE' to treat leaf functions specially.  The C\n+     variable `leaf_function' is nonzero for such a function.\n+\n+`EXIT_IGNORE_STACK'\n+     Define this macro as a C expression that is nonzero if the return\n+     instruction or the function epilogue ignores the value of the stack\n+     pointer; in other words, if it is safe to delete an instruction to\n+     adjust the stack pointer before a return from the function.\n+\n+     Note that this macro's value is relevant only for functions for\n+     which frame pointers are maintained.  It is never safe to delete a\n+     final stack adjustment in a function that has no frame pointer,\n+     and the compiler knows this regardless of `EXIT_IGNORE_STACK'.\n+\n+`EPILOGUE_USES (REGNO)'\n+     Define this macro as a C expression that is nonzero for registers\n+     are used by the epilogue or the `return' pattern.  The stack and\n+     frame pointer registers are already be assumed to be used as\n+     needed.\n+\n+`FUNCTION_EPILOGUE (FILE, SIZE)'\n+     A C compound statement that outputs the assembler code for exit\n+     from a function.  The epilogue is responsible for restoring the\n+     saved registers and stack pointer to their values when the\n+     function was called, and returning control to the caller.  This\n+     macro takes the same arguments as the macro `FUNCTION_PROLOGUE',\n+     and the registers to restore are determined from `regs_ever_live'\n+     and `CALL_USED_REGISTERS' in the same way.\n+\n+     On some machines, there is a single instruction that does all the\n+     work of returning from the function.  On these machines, give that\n+     instruction the name `return' and do not define the macro\n+     `FUNCTION_EPILOGUE' at all.\n+\n+     Do not define a pattern named `return' if you want the\n+     `FUNCTION_EPILOGUE' to be used.  If you want the target switches\n+     to control whether return instructions or epilogues are used,\n+     define a `return' pattern with a validity condition that tests the\n+     target switches appropriately.  If the `return' pattern's validity\n+     condition is false, epilogues will be used.\n+\n+     On machines where functions may or may not have frame-pointers, the\n+     function exit code must vary accordingly.  Sometimes the code for\n+     these two cases is completely different.  To determine whether a\n+     frame pointer is wanted, the macro can refer to the variable\n+     `frame_pointer_needed'.  The variable's value will be 1 when\n+     compiling a function that needs a frame pointer.\n+\n+     Normally, `FUNCTION_PROLOGUE' and `FUNCTION_EPILOGUE' must treat\n+     leaf functions specially.  The C variable `leaf_function' is\n+     nonzero for such a function.  *Note Leaf Functions::.\n+\n+     On some machines, some functions pop their arguments on exit while\n+     others leave that for the caller to do.  For example, the 68020\n+     when given `-mrtd' pops arguments in functions that take a fixed\n+     number of arguments.\n+\n+     Your definition of the macro `RETURN_POPS_ARGS' decides which\n+     functions pop their own arguments.  `FUNCTION_EPILOGUE' needs to\n+     know what was decided.  The variable that is called\n+     `current_function_pops_args' is the number of bytes of its\n+     arguments that a function should pop.  *Note Scalar Return::.\n+\n+`DELAY_SLOTS_FOR_EPILOGUE'\n+     Define this macro if the function epilogue contains delay slots to\n+     which instructions from the rest of the function can be \"moved\".\n+     The definition should be a C expression whose value is an integer\n+     representing the number of delay slots there.\n+\n+`ELIGIBLE_FOR_EPILOGUE_DELAY (INSN, N)'\n+     A C expression that returns 1 if INSN can be placed in delay slot\n+     number N of the epilogue.\n+\n+     The argument N is an integer which identifies the delay slot now\n+     being considered (since different slots may have different rules of\n+     eligibility).  It is never negative and is always less than the\n+     number of epilogue delay slots (what `DELAY_SLOTS_FOR_EPILOGUE'\n+     returns).  If you reject a particular insn for a given delay slot,\n+     in principle, it may be reconsidered for a subsequent delay slot.\n+     Also, other insns may (at least in principle) be considered for\n+     the so far unfilled delay slot.\n+\n+     The insns accepted to fill the epilogue delay slots are put in an\n+     RTL list made with `insn_list' objects, stored in the variable\n+     `current_function_epilogue_delay_list'.  The insn for the first\n+     delay slot comes first in the list.  Your definition of the macro\n+     `FUNCTION_EPILOGUE' should fill the delay slots by outputting the\n+     insns in this list, usually by calling `final_scan_insn'.\n+\n+     You need not define this macro if you did not define\n+     `DELAY_SLOTS_FOR_EPILOGUE'.\n+\n+`ASM_OUTPUT_MI_THUNK (FILE, THUNK_FNDECL, DELTA, FUNCTION)'\n+     A C compound statement that outputs the assembler code for a thunk\n+     function, used to implement C++ virtual function calls with\n+     multiple inheritance.  The thunk acts as a wrapper around a\n+     virtual function, adjusting the implicit object parameter before\n+     handing control off to the real function.\n+\n+     First, emit code to add the integer DELTA to the location that\n+     contains the incoming first argument.  Assume that this argument\n+     contains a pointer, and is the one used to pass the `this' pointer\n+     in C++.  This is the incoming argument *before* the function\n+     prologue, e.g. `%o0' on a sparc.  The addition must preserve the\n+     values of all other incoming arguments.\n+\n+     After the addition, emit code to jump to FUNCTION, which is a\n+     `FUNCTION_DECL'.  This is a direct pure jump, not a call, and does\n+     not touch the return address.  Hence returning from FUNCTION will\n+     return to whoever called the current `thunk'.\n+\n+     The effect must be as if FUNCTION had been called directly with\n+     the adjusted first argument.  This macro is responsible for\n+     emitting all of the code for a thunk function; `FUNCTION_PROLOGUE'\n+     and `FUNCTION_EPILOGUE' are not invoked.\n+\n+     The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already\n+     been extracted from it.)  It might possibly be useful on some\n+     targets, but probably not.\n+\n+     If you do not define this macro, the target-independent code in\n+     the C++ frontend will generate a less efficient heavyweight thunk\n+     that calls FUNCTION instead of jumping to it.  The generic\n+     approach does not support varargs.\n+"}, {"sha": "79c4ab94fdf5a2054163f460da0f152d76968407", "filename": "gcc/gcc.info-23", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-23", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-23", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-23?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "f33b78f422e6d14fd048507784e89c836d613c45", "filename": "gcc/gcc.info-24", "status": "added", "additions": 1043, "deletions": 0, "changes": 1043, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-24", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-24", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-24?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "fc5e5a7655b77009a65a3a873bd40358016afbc7", "filename": "gcc/gcc.info-25", "status": "added", "additions": 1143, "deletions": 0, "changes": 1143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-25", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-25", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-25?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "f70a06ecec4ad09265423100a3704e4fa5447824", "filename": "gcc/gcc.info-26", "status": "added", "additions": 973, "deletions": 0, "changes": 973, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-26", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-26", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-26?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "d486a64c257ef616c46fad1a7e24123120a043f1", "filename": "gcc/gcc.info-27", "status": "added", "additions": 534, "deletions": 0, "changes": 534, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-27", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-27", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-27?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "c90dd644f077f9ada71d344c3223be8426006594", "filename": "gcc/gcc.info-28", "status": "added", "additions": 2030, "deletions": 0, "changes": 2030, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-28", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-28", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-28?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "d60f8139c929c10cd62872e6ec3c59059ea6ac8f", "filename": "gcc/gcc.info-3", "status": "added", "additions": 1198, "deletions": 0, "changes": 1198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-3?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "8a3d1fbdbf6473f101328e53a7d7309f231afb6e", "filename": "gcc/gcc.info-4", "status": "added", "additions": 1171, "deletions": 0, "changes": 1171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-4?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "dcf6541be8c213d55e2cbf747730b1273f4165f3", "filename": "gcc/gcc.info-5", "status": "added", "additions": 836, "deletions": 0, "changes": 836, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-5?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "e8e391957c80b6d89464aa9fc2535ea3753d8732", "filename": "gcc/gcc.info-6", "status": "added", "additions": 537, "deletions": 0, "changes": 537, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-6?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "35bf202f11f1b4b59089b37f462a58de78583273", "filename": "gcc/gcc.info-7", "status": "added", "additions": 1100, "deletions": 0, "changes": 1100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-7?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "3f490970f76e30c113e42b657f60a1c28cadf706", "filename": "gcc/gcc.info-8", "status": "added", "additions": 1202, "deletions": 0, "changes": 1202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-8?ref=336b436af56bf1082c50897581fef100f92ad23d"}, {"sha": "822751e6d8a1b4b1aa06cdaf62bf527d122dd6f7", "filename": "gcc/gcc.info-9", "status": "added", "additions": 1225, "deletions": 0, "changes": 1225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-9", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336b436af56bf1082c50897581fef100f92ad23d/gcc%2Fgcc.info-9", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.info-9?ref=336b436af56bf1082c50897581fef100f92ad23d"}]}