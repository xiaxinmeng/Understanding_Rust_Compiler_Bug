{"sha": "08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlNjBlMTljMGYzZTRlNjc1NmI0YjllZThmMzdhN2IyMmEyNmU4Mw==", "commit": {"author": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-07-06T14:28:15Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-07-06T14:28:15Z"}, "message": "rs6000-c.c: Add support for built-in functions vector signed int vec_subc (vector signed int...\n\n\ngcc/ChangeLog:\n\n2017-07-06  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n\tvector signed int vec_subc (vector signed int, vector signed int);\n\tvector signed __int128 vec_subc (vector signed __int128,\n\t\t\t\t\t vector signed __int128);\n\tvector unsigned __int128 vec_subc (vector unsigned __int128,\n\t\t\t\t\t   vector unsigned __int128);\n\tvector signed int vec_sube (vector signed int, vector signed int,\n\t\t\t\t    vector signed int);\n\tvector unsigned int vec_sube (vector unsigned int,\n\t\t\t\t      vector unsigned int,\n\t\t\t\t      vector unsigned int);\n\tvector signed __int128 vec_sube (vector signed __int128,\n\t\t\t\t\t vector signed __int128,\n\t\t\t\t\t vector signed__int128);\n\tvector unsigned __int128 vec_sube (vector unsigned __int128,\n\t\t\t\t\t   vector unsigned __int128,\n\t\t\t\t\t   vector unsigned __int128);\n\tvector signed int vec_subec (vector signed int, vector signed int,\n\t\t\t\t     vector signed int);\n\tvector unsigned int vec_subec (vector unsigned int,\n\t\t\t\t       vector unsigned int,\n\t\t\t\t       vector unsigned int);\n\tvector signed __int128 vec_subec (vector signed __int128,\n\t\t\t\t\t  vector signed __int128,\n\t\t\t\t\t  vector signed__int128);\n\tvector unsigned __int128 vec_subec (vector unsigned __int128,\n\t\t\t\t\t    vector unsigned __int128,\n\t\t\t\t\t    vector unsigned __int128);\n\t* config/rs6000/rs6000.c (ALTIVEC_BUILTIN_VEC_SUBE,\n\tALTIVEC_BUILTIN_VEC_SUBEC): Add ef_builtins.\n\t* config/rs6000/rs6000-builtin.def (SUBE, SUBEC): Add\n\tBU_ALTIVEC_OVERLOAD_X definitions.\n\t* config/rs6000/altivec.h (vec_sube, vec_subec): Add builtin defines.\n\t* doc/extend.texi: Update the built-in documentation file for the new\n\tbuilt-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2017-07-06  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/p8vector-builtin-8.c (foo): Add test cases for\n\tthe new vec_subc, vec_sube, vec_subec built-ins.  Add the missing test\n\tcases for vec_addc, adde and addec builtins.\n\nFrom-SVN: r250023", "tree": {"sha": "33995eb9a5331ae1322abe383e769bfa5ff01b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33995eb9a5331ae1322abe383e769bfa5ff01b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/comments", "author": null, "committer": null, "parents": [{"sha": "c471c6edcbe945b8925f72fd7683caef884e5835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c471c6edcbe945b8925f72fd7683caef884e5835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c471c6edcbe945b8925f72fd7683caef884e5835"}], "stats": {"total": 207, "additions": 184, "deletions": 23}, "files": [{"sha": "7ac4c1cc05af5aec3678d741fee26e9faccf7614", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -1,3 +1,41 @@\n+2017-07-06  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n+\tvector signed int vec_subc (vector signed int, vector signed int);\n+\tvector signed __int128 vec_subc (vector signed __int128,\n+\t\t\t\t\t vector signed __int128);\n+\tvector unsigned __int128 vec_subc (vector unsigned __int128,\n+\t\t\t\t\t   vector unsigned __int128);\n+\tvector signed int vec_sube (vector signed int, vector signed int,\n+\t\t\t\t    vector signed int);\n+\tvector unsigned int vec_sube (vector unsigned int,\n+\t\t\t\t      vector unsigned int,\n+\t\t\t\t      vector unsigned int);\n+\tvector signed __int128 vec_sube (vector signed __int128,\n+\t\t\t\t\t vector signed __int128,\n+\t\t\t\t\t vector signed__int128);\n+\tvector unsigned __int128 vec_sube (vector unsigned __int128,\n+\t\t\t\t\t   vector unsigned __int128,\n+\t\t\t\t\t   vector unsigned __int128);\n+\tvector signed int vec_subec (vector signed int, vector signed int,\n+\t\t\t\t     vector signed int);\n+\tvector unsigned int vec_subec (vector unsigned int,\n+\t\t\t\t       vector unsigned int,\n+\t\t\t\t       vector unsigned int);\n+\tvector signed __int128 vec_subec (vector signed __int128,\n+\t\t\t\t\t  vector signed __int128,\n+\t\t\t\t\t  vector signed__int128);\n+\tvector unsigned __int128 vec_subec (vector unsigned __int128,\n+\t\t\t\t\t    vector unsigned __int128,\n+\t\t\t\t\t    vector unsigned __int128);\n+\t* config/rs6000/rs6000.c (ALTIVEC_BUILTIN_VEC_SUBE,\n+\tALTIVEC_BUILTIN_VEC_SUBEC): Add ef_builtins.\n+\t* config/rs6000/rs6000-builtin.def (SUBE, SUBEC): Add\n+\tBU_ALTIVEC_OVERLOAD_X definitions.\n+\t* config/rs6000/altivec.h (vec_sube, vec_subec): Add builtin defines.\n+\t* doc/extend.texi: Update the built-in documentation file for the new\n+\tbuilt-in functions.\n+\n 2017-07-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/79300\n@@ -13,6 +51,7 @@\n \t(linemap_client_expand_location_to_spelling_point): Add \"aspect\"\n \tparam, and pass it to expand_location_1.\n \n+>>>>>>> .r250022\n 2017-07-06  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config/i386/avx512fintrin.h (_mm_mask_getexp_round_ss,"}, {"sha": "806675ad8219143c0d1900a6953a72763aa1bafa", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -192,6 +192,8 @@\n #define vec_unsignedo __builtin_vec_vunsignedo\n #define vec_vsubfp __builtin_vec_vsubfp\n #define vec_subc __builtin_vec_subc\n+#define vec_sube __builtin_vec_sube\n+#define vec_subec __builtin_vec_subec\n #define vec_vsubsws __builtin_vec_vsubsws\n #define vec_vsubshs __builtin_vec_vsubshs\n #define vec_vsubsbs __builtin_vec_vsubsbs"}, {"sha": "c5017aa90cc352294af8f6863ae9241b4be9d89f", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -1474,6 +1474,8 @@ BU_ALTIVEC_OVERLOAD_X (STVLX,\t   \"stvlx\")\n BU_ALTIVEC_OVERLOAD_X (STVLXL,\t   \"stvlxl\")\n BU_ALTIVEC_OVERLOAD_X (STVRX,\t   \"stvrx\")\n BU_ALTIVEC_OVERLOAD_X (STVRXL,\t   \"stvrxl\")\n+BU_ALTIVEC_OVERLOAD_X (SUBE,\t   \"sube\")\n+BU_ALTIVEC_OVERLOAD_X (SUBEC,\t   \"subec\")\n BU_ALTIVEC_OVERLOAD_X (VCFSX,\t   \"vcfsx\")\n BU_ALTIVEC_OVERLOAD_X (VCFUX,\t   \"vcfux\")\n BU_ALTIVEC_OVERLOAD_X (VSPLTB,\t   \"vspltb\")"}, {"sha": "1a40797c3b75750c78fb1b183d9abbd3e51d3f25", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 74, "deletions": 22, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -2950,8 +2950,17 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VSUBUBM, ALTIVEC_BUILTIN_VSUBUBM,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, 0 },\n+\n+  { ALTIVEC_BUILTIN_VEC_SUBC, ALTIVEC_BUILTIN_VSUBCUW,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUBC, ALTIVEC_BUILTIN_VSUBCUW,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUBC, P8V_BUILTIN_VSUBCUQ,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n+    RS6000_BTI_unsigned_V1TI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_SUBC, P8V_BUILTIN_VSUBCUQ,\n+    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_SUBS, ALTIVEC_BUILTIN_VSUBUBS,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUBS, ALTIVEC_BUILTIN_VSUBUBS,\n@@ -5884,13 +5893,16 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       /* else, fall through and process the Power9 alternative below */\n     }\n \n-  if (fcode == ALTIVEC_BUILTIN_VEC_ADDE)\n+  if (fcode == ALTIVEC_BUILTIN_VEC_ADDE\n+      || fcode == ALTIVEC_BUILTIN_VEC_SUBE)\n     {\n       /* vec_adde needs to be special cased because there is no instruction\n \t  for the {un}signed int version.  */\n       if (nargs != 3)\n \t{\n-\t  error (\"vec_adde only accepts 3 arguments\");\n+\t  const char *name = fcode == ALTIVEC_BUILTIN_VEC_ADDE ?\n+\t    \"vec_adde\": \"vec_sube\";\n+\t  error (\"%s only accepts 3 arguments\", name);\n \t  return error_mark_node;\n \t}\n \n@@ -5913,14 +5925,24 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t{\n \t  /* For {un}signed ints,\n \t     vec_adde (va, vb, carryv) == vec_add (vec_add (va, vb),\n-\t\t\t\t\t\t   vec_and (carryv, 0x1)).  */\n+\t\t\t\t\t\t   vec_and (carryv, 1)).\n+\t     vec_sube (va, vb, carryv) == vec_sub (vec_sub (va, vb),\n+\t\t\t\t\t\t   vec_and (carryv, 1)).  */\n \t  case SImode:\n \t    {\n+\t      tree add_sub_builtin;\n+\n \t      vec<tree, va_gc> *params = make_tree_vector ();\n \t      vec_safe_push (params, arg0);\n \t      vec_safe_push (params, arg1);\n-\t      tree add_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD];\n-\t      tree call = altivec_resolve_overloaded_builtin (loc, add_builtin,\n+\n+\t      if (fcode == ALTIVEC_BUILTIN_VEC_ADDE)\n+\t\tadd_sub_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD];\n+\t      else\n+\t\tadd_sub_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_SUB];\n+\n+\t      tree call = altivec_resolve_overloaded_builtin (loc,\n+\t\t\t\t\t\t\t      add_sub_builtin,\n \t\t\t\t\t\t\t      params);\n \t      tree const1 = build_int_cstu (TREE_TYPE (arg0_type), 1);\n \t      tree ones_vector = build_vector_from_val (arg0_type, const1);\n@@ -5929,16 +5951,22 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t      params = make_tree_vector ();\n \t      vec_safe_push (params, call);\n \t      vec_safe_push (params, and_expr);\n-\t      return altivec_resolve_overloaded_builtin (loc, add_builtin,\n+\t      return altivec_resolve_overloaded_builtin (loc, add_sub_builtin,\n \t\t\t\t\t\t\t params);\n \t    }\n \t  /* For {un}signed __int128s use the vaddeuqm instruction\n \t\tdirectly.  */\n \t  case TImode:\n \t    {\n-\t      tree adde_bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDEUQM];\n-\t      return altivec_resolve_overloaded_builtin (loc, adde_bii,\n-\t\t\t\t\t\t\t arglist);\n+\t       tree bii;\n+\n+\t       if (fcode == ALTIVEC_BUILTIN_VEC_ADDE)\n+\t\t bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDEUQM];\n+\n+\t       else\n+\t\t bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VSUBEUQM];\n+\n+\t       return altivec_resolve_overloaded_builtin (loc, bii, arglist);\n \t    }\n \n \t  /* Types other than {un}signed int and {un}signed __int128\n@@ -5948,13 +5976,16 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t}\n     }\n \n-  if (fcode == ALTIVEC_BUILTIN_VEC_ADDEC)\n+  if (fcode == ALTIVEC_BUILTIN_VEC_ADDEC\n+      || fcode == ALTIVEC_BUILTIN_VEC_SUBEC)\n     {\n-      /* vec_addec needs to be special cased because there is no instruction\n-\tfor the {un}signed int version.  */\n+      /* vec_addec and vec_subec needs to be special cased because there is\n+\t no instruction for the {un}signed int version.  */\n       if (nargs != 3)\n \t{\n-\t  error (\"vec_addec only accepts 3 arguments\");\n+\t  const char *name = fcode == ALTIVEC_BUILTIN_VEC_ADDEC ?\n+\t    \"vec_addec\": \"vec_subec\";\n+\t  error (\"%s only accepts 3 arguments\", name);\n \t  return error_mark_node;\n \t}\n \n@@ -5985,19 +6016,33 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    /* Use save_expr to ensure that operands used more than once\n \t\tthat may have side effects (like calls) are only evaluated\n \t\tonce.  */\n+\t    tree as_builtin;\n+\t    tree as_c_builtin;\n+\n \t    arg0 = save_expr (arg0);\n \t    arg1 = save_expr (arg1);\n \t    vec<tree, va_gc> *params = make_tree_vector ();\n \t    vec_safe_push (params, arg0);\n \t    vec_safe_push (params, arg1);\n-\t    tree addc_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADDC];\n-\t    tree call1 = altivec_resolve_overloaded_builtin (loc, addc_builtin,\n+\n+\t    if (fcode == ALTIVEC_BUILTIN_VEC_ADDEC)\n+\t      as_c_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADDC];\n+\t    else\n+\t      as_c_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_SUBC];\n+\n+\t    tree call1 = altivec_resolve_overloaded_builtin (loc, as_c_builtin,\n \t\t\t\t\t\t\t     params);\n \t    params = make_tree_vector ();\n \t    vec_safe_push (params, arg0);\n \t    vec_safe_push (params, arg1);\n-\t    tree add_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD];\n-\t    tree call2 = altivec_resolve_overloaded_builtin (loc, add_builtin,\n+\n+\n+\t    if (fcode == ALTIVEC_BUILTIN_VEC_ADDEC)\n+\t      as_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD];\n+\t    else\n+\t      as_builtin = rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_SUB];\n+\n+\t    tree call2 = altivec_resolve_overloaded_builtin (loc, as_builtin,\n \t\t\t\t\t\t\t     params);\n \t    tree const1 = build_int_cstu (TREE_TYPE (arg0_type), 1);\n \t    tree ones_vector = build_vector_from_val (arg0_type, const1);\n@@ -6006,7 +6051,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    params = make_tree_vector ();\n \t    vec_safe_push (params, call2);\n \t    vec_safe_push (params, and_expr);\n-\t    call2 = altivec_resolve_overloaded_builtin (loc, addc_builtin,\n+\t    call2 = altivec_resolve_overloaded_builtin (loc, as_c_builtin,\n \t\t\t\t\t\t\tparams);\n \t    params = make_tree_vector ();\n \t    vec_safe_push (params, call1);\n@@ -6015,12 +6060,19 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    return altivec_resolve_overloaded_builtin (loc, or_builtin,\n \t\t\t\t\t\t       params);\n \t    }\n-\t  /* For {un}signed __int128s use the vaddecuq instruction.  */\n+\t  /* For {un}signed __int128s use the vaddecuq/vsubbecuq\n+\t     instructions.  */\n \t  case TImode:\n \t    {\n-\t    tree VADDECUQ_bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDECUQ];\n-\t    return altivec_resolve_overloaded_builtin (loc, VADDECUQ_bii,\n-\t\t\t\t\t\t       arglist);\n+\t       tree bii;\n+\n+\t       if (fcode == ALTIVEC_BUILTIN_VEC_ADDEC)\n+\t\t bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDECUQ];\n+\n+\t       else\n+\t\t bii = rs6000_builtin_decls[P8V_BUILTIN_VEC_VSUBECUQ];\n+\n+\t       return altivec_resolve_overloaded_builtin (loc, bii, arglist);\n \t    }\n \t  /* Types other than {un}signed int and {un}signed __int128\n \t\tare errors.  */"}, {"sha": "f2680854f3355d3cb9460fbbbba30020fde92b7b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -17594,6 +17594,10 @@ altivec_init_builtins (void)\n \t\tALTIVEC_BUILTIN_VEC_CMPNE);\n   def_builtin (\"__builtin_vec_mul\", opaque_ftype_opaque_opaque,\n \t\tALTIVEC_BUILTIN_VEC_MUL);\n+  def_builtin (\"__builtin_vec_sube\", opaque_ftype_opaque_opaque_opaque,\n+\t\tALTIVEC_BUILTIN_VEC_SUBE);\n+  def_builtin (\"__builtin_vec_subec\", opaque_ftype_opaque_opaque_opaque,\n+\t\tALTIVEC_BUILTIN_VEC_SUBEC);\n \n   /* Cell builtins.  */\n   def_builtin (\"__builtin_altivec_lvlx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVLX);"}, {"sha": "5cb512fe5754402118b895a332161df3bb7c5f9f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -17116,7 +17116,34 @@ vector unsigned char vec_vsububm (vector unsigned char,\n vector unsigned char vec_vsububm (vector unsigned char,\n                                   vector unsigned char);\n \n+vector signed int vec_subc (vector signed int, vector signed int);\n vector unsigned int vec_subc (vector unsigned int, vector unsigned int);\n+vector signed __int128 vec_subc (vector signed __int128,\n+                                 vector signed __int128);\n+vector unsigned __int128 vec_subc (vector unsigned __int128,\n+                                   vector unsigned __int128);\n+\n+vector signed int vec_sube (vector signed int, vector signed int,\n+                            vector signed int);\n+vector unsigned int vec_sube (vector unsigned int, vector unsigned int,\n+                              vector unsigned int);\n+vector signed __int128 vec_sube (vector signed __int128,\n+                                 vector signed __int128,\n+                                 vector signed __int128);\n+vector unsigned __int128 vec_sube (vector unsigned __int128,\n+                                   vector unsigned __int128,\n+                                   vector unsigned __int128);\n+\n+vector signed int vec_subec (vector signed int, vector signed int,\n+                             vector signed int);\n+vector unsigned int vec_subec (vector unsigned int, vector unsigned int,\n+                               vector unsigned int);\n+vector signed __int128 vec_subec (vector signed __int128,\n+                                  vector signed __int128,\n+                                  vector signed __int128);\n+vector unsigned __int128 vec_subec (vector unsigned __int128,\n+                                    vector unsigned __int128,\n+                                    vector unsigned __int128);\n \n vector unsigned char vec_subs (vector bool char, vector unsigned char);\n vector unsigned char vec_subs (vector unsigned char, vector bool char);"}, {"sha": "46992f44b29970944f6e5109825986b55bf6a800", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -1,3 +1,10 @@\n+\n+2017-07-06  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/p8vector-builtin-8.c (foo): Add test cases for\n+\tthe new vec_subc, vec_sube, vec_subec built-ins.  Add the missing test\n+\tcases for vec_addc, adde and addec builtins.\n+\n 2017-07-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/79300\n@@ -20,6 +27,7 @@\n \t* gcc.dg/spellcheck-fields-2.c (test_macro): Update expected\n \tunderlining within macro expansion.\n \n+>>>>>>> .r250022\n 2017-07-06  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* gcc.target/i386/avx512f-vgetexpsd-1.c (_mm_mask_getexp_sd,"}, {"sha": "4b0370bb863999304bdb42b69a20938cd9b1ed8d", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-8.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c?ref=08e60e19c0f3e4e6756b4b9ee8f37a7b22a26e83", "patch": "@@ -11,7 +11,8 @@ vector unsigned char      vuca, vucb, vucc;\n vector bool     char      vbca, vbcb;\n vector unsigned short     vusa, vusb;\n vector bool     short     vbsa, vbsb;\n-vector unsigned int       vuia, vuib;\n+vector signed int         vsia, vsib, vsic;\n+vector unsigned int       vuia, vuib, vuic;\n vector bool     int       vbia, vbib;\n vector signed   long long vsla, vslb;\n vector unsigned long long vula, vulb, vulc;\n@@ -24,6 +25,7 @@ void foo (vector unsigned char *vucr,\n \t  vector bool char *vbcr,\n \t  vector unsigned short *vusr,\n \t  vector bool short *vbsr,\n+\t  vector signed int *vsir,\n \t  vector unsigned int *vuir,\n \t  vector bool int *vbir,\n \t  vector unsigned long long *vulr,\n@@ -32,10 +34,16 @@ void foo (vector unsigned char *vucr,\n \t  vector unsigned __int128 *vuxr,\n \t  vector double *vdr)\n {\n+  *vsir++ = vec_addc (vsia, vsib);\n+  *vuir++ = vec_addc (vuia, vuib);\n   *vsxr++ = vec_addc (vsxa, vsxb);\n   *vuxr++ = vec_addc (vuxa, vuxb);\n+  *vsir++ = vec_adde (vsia, vsib, vsic);\n+  *vuir++ = vec_adde (vuia, vuib, vuic);\n   *vsxr++ = vec_adde (vsxa, vsxb, vsxc);\n   *vuxr++ = vec_adde (vuxa, vuxb, vuxc);\n+  *vsir++ = vec_addec (vsia, vsib, vsic);\n+  *vuir++ = vec_addec (vuia, vuib, vuic);\n   *vsxr++ = vec_addec (vsxa, vsxb, vsxc);\n   *vuxr++ = vec_addec (vuxa, vuxb, vuxc);\n   *vucr++ = vec_bperm (vuca, vucb);\n@@ -60,11 +68,30 @@ void foo (vector unsigned char *vucr,\n   *vuxr++ = vec_pmsum_be (vula, vulb);\n   *vuir++ = vec_shasigma_be (vuia, 0, 1);\n   *vulr++ = vec_shasigma_be (vula, 0, 1);\n+  *vsir++ = vec_subc (vsia, vsib);\n+  *vuir++ = vec_subc (vuia, vuib);\n+  *vsxr++ = vec_subc (vsxa, vsxb);\n+  *vuxr++ = vec_subc (vuxa, vuxb);\n+  *vsir++ = vec_sube (vsia, vsib, vsic);\n+  *vuir++ = vec_sube (vuia, vuib, vuic);\n+  *vsxr++ = vec_sube (vsxa, vsxb, vsxc);\n+  *vuxr++ = vec_sube (vuxa, vuxb, vuxc);\n+  *vsir++ = vec_subec (vsia, vsib, vsic);\n+  *vuir++ = vec_subec (vuia, vuib, vuic);\n+  *vsxr++ = vec_subec (vsxa, vsxb, vsxc);\n+  *vuxr++ = vec_subec (vuxa, vuxb, vuxc);\n }\n \n /* { dg-final { scan-assembler-times \"vaddcuq\" 2 } } */\n /* { dg-final { scan-assembler-times \"vaddeuqm\" 2 } } */\n /* { dg-final { scan-assembler-times \"vaddecuq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddcuw\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vadduwm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vsubcuq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsubeuqm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsubecuq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsubcuw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 4 } } */\n /* { dg-final { scan-assembler-times \"vbpermq\" 2 } } */\n /* { dg-final { scan-assembler-times \"xxleqv\" 4 } } */\n /* { dg-final { scan-assembler-times \"vgbbd\" 1 } } */"}]}