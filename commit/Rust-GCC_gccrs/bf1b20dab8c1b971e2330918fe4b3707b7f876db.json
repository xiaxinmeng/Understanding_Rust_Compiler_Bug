{"sha": "bf1b20dab8c1b971e2330918fe4b3707b7f876db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxYjIwZGFiOGMxYjk3MWUyMzMwOTE4ZmU0YjM3MDdiN2Y4NzZkYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-12T18:54:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-12T18:54:00Z"}, "message": "(nonlocal_goto): Emit barrier after jump.\n\n(setjmp{,_64,_32}): New patterns.\n\nFrom-SVN: r11520", "tree": {"sha": "7d4e72dd4dc15d71ff9a4c57baf5dcbcd2c5c71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4e72dd4dc15d71ff9a4c57baf5dcbcd2c5c71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1b20dab8c1b971e2330918fe4b3707b7f876db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b20dab8c1b971e2330918fe4b3707b7f876db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1b20dab8c1b971e2330918fe4b3707b7f876db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b20dab8c1b971e2330918fe4b3707b7f876db/comments", "author": null, "committer": null, "parents": [{"sha": "f2420d0b9230d2376c12380ce402f212be8714d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2420d0b9230d2376c12380ce402f212be8714d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2420d0b9230d2376c12380ce402f212be8714d8"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "817e5e02460cd61d4095d6ea67dbcbb2268ad776", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1b20dab8c1b971e2330918fe4b3707b7f876db/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1b20dab8c1b971e2330918fe4b3707b7f876db/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=bf1b20dab8c1b971e2330918fe4b3707b7f876db", "patch": "@@ -5429,6 +5429,7 @@\n   emit_insn (gen_rtx (USE, VOIDmode, static_chain_rtx));\n   /* Return, restoring reg window and jumping to goto handler.  */\n   emit_insn (gen_goto_handler_and_restore ());\n+  emit_barrier ();\n   DONE;\n }\")\n \n@@ -5448,6 +5449,36 @@\n   [(set_attr \"type\" \"misc\")\n    (set_attr \"length\" \"2\")])\n \n+;; Pattern for use after a setjmp to store FP and the return register\n+;; into the stack area.\n+\n+(define_expand \"setjmp\"\n+  [(const_int 0)]\n+  \"\"\n+  \"\n+{\n+  if (TARGET_ARCH64)\n+    emit_insn (gen_setjmp_64 ());\n+  else\n+    emit_insn (gen_setjmp_32 ());\n+\n+  DONE;\n+}\")\n+\n+(define_expand \"setjmp_32\"\n+  [(set (mem:SI (plus:SI (reg:SI 14) (const_int 56))) (match_dup 0))\n+   (set (mem:SI (plus:SI (reg:SI 14) (const_int 60))) (reg:SI 31))]\n+  \"\"\n+  \"\n+{ operands[0] = frame_pointer_rtx; }\")\n+\n+(define_expand \"setjmp_64\"\n+  [(set (mem:DI (plus:DI (reg:DI 14) (const_int 112))) (match_dup 0))\n+   (set (mem:DI (plus:DI (reg:DI 14) (const_int 120))) (reg:DI 31))]\n+  \"\"\n+  \"\n+{ operands[0] = frame_pointer_rtx; }\")\n+\n ;; Special pattern for the FLUSH instruction.\n \n (define_insn \"flush\""}]}