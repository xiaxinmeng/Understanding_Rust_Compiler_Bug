{"sha": "b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyMDhmNTZjYmUyOGFhYmUxOTE1NjRkZDI3Y2Y2ZDc4YmZlOWZkNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-26T07:05:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-26T07:05:32Z"}, "message": "exception.cc (java_eh_info): Make value type jthrowable.\n\n\t* exception.cc (java_eh_info): Make value type jthrowable.\n\t(_Jv_type_matcher): Remove now unneeded cast.\n\t(_Jv_Throw): Make argument type jthrowable.  Munge name\n\tfor SJLJ_EXCEPTIONS here ...\n\t* gcj/cni.h: ... not here.\n\t(JvThrow): Remove.\n\t* gcj/javaprims.h (_Jv_Throw, _Jv_Sjlj_Throw): Update declarations.\n\n\t* defineclass.cc, interpret.cc, jni.cc, posix-threads.cc,\n\tprims.cc, resolve.cc, gnu/gcj/runtime/natFirstThread.cc,\n\tgnu/gcj/xlib/natDrawable.cc, gnu/gcj/xlib/natFont.cc,\n\tgnu/gcj/xlib/natWMSizeHints.cc, gnu/gcj/xlib/natWindowAttributes.cc,\n\tgnu/gcj/xlib/natXImage.cc, java/io/natFile.cc,\n\tjava/io/natFileDescriptorEcos.cc, java/io/natFileDescriptorPosix.cc,\n\tjava/io/natFileDescriptorWin32.cc, java/io/natFileWin32.cc,\n\tjava/lang/natClass.cc, java/lang/natClassLoader.cc,\n\tjava/lang/natDouble.cc, java/lang/natObject.cc,\n\tjava/lang/natPosixProcess.cc, java/lang/natRuntime.cc,\n\tjava/lang/natString.cc, java/lang/natSystem.cc,\n\tjava/lang/natThread.cc, java/lang/reflect/natArray.cc,\n\tjava/lang/reflect/natConstructor.cc, java/lang/reflect/natField.cc,\n\tjava/lang/reflect/natMethod.cc, java/util/zip/natDeflater.cc,\n\tjava/util/zip/natInflater.cc:\n\tUse throw, not JvThrow or _Jv_Throw.\n\nFrom-SVN: r40838", "tree": {"sha": "8bd00c51e350e8505bf5561673010a0008df7aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd00c51e350e8505bf5561673010a0008df7aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/comments", "author": null, "committer": null, "parents": [{"sha": "56b8908481ae59ad65338b4d1249b040a057cc27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b8908481ae59ad65338b4d1249b040a057cc27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b8908481ae59ad65338b4d1249b040a057cc27"}], "stats": {"total": 578, "additions": 294, "deletions": 284}, "files": [{"sha": "9368174ba23c5a964da1b9b573a15530185c016f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1,3 +1,30 @@\n+2001-03-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* exception.cc (java_eh_info): Make value type jthrowable.\n+\t(_Jv_type_matcher): Remove now unneeded cast.\n+\t(_Jv_Throw): Make argument type jthrowable.  Munge name\n+\tfor SJLJ_EXCEPTIONS here ...\n+\t* gcj/cni.h: ... not here.\n+\t(JvThrow): Remove.\n+\t* gcj/javaprims.h (_Jv_Throw, _Jv_Sjlj_Throw): Update declarations.\n+\n+\t* defineclass.cc, interpret.cc, jni.cc, posix-threads.cc,\n+\tprims.cc, resolve.cc, gnu/gcj/runtime/natFirstThread.cc,\n+\tgnu/gcj/xlib/natDrawable.cc, gnu/gcj/xlib/natFont.cc,\n+\tgnu/gcj/xlib/natWMSizeHints.cc, gnu/gcj/xlib/natWindowAttributes.cc,\n+\tgnu/gcj/xlib/natXImage.cc, java/io/natFile.cc, \n+\tjava/io/natFileDescriptorEcos.cc, java/io/natFileDescriptorPosix.cc,\n+\tjava/io/natFileDescriptorWin32.cc, java/io/natFileWin32.cc,\n+\tjava/lang/natClass.cc, java/lang/natClassLoader.cc,\n+\tjava/lang/natDouble.cc, java/lang/natObject.cc, \n+\tjava/lang/natPosixProcess.cc, java/lang/natRuntime.cc,\n+\tjava/lang/natString.cc, java/lang/natSystem.cc,\n+\tjava/lang/natThread.cc, java/lang/reflect/natArray.cc,\n+\tjava/lang/reflect/natConstructor.cc, java/lang/reflect/natField.cc,\n+\tjava/lang/reflect/natMethod.cc, java/util/zip/natDeflater.cc,\n+\tjava/util/zip/natInflater.cc:\n+\tUse throw, not JvThrow or _Jv_Throw.\n+\n 2001-03-24  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/util/HashMap.java (HashMap): If 0 is given for initialCapacity "}, {"sha": "c309394212e171871be653e061da61bc8a72f232", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1,6 +1,6 @@\n // defineclass.cc - defining a class from .class format.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -1576,10 +1576,9 @@ _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2)\n static void\n throw_no_class_def_found_error (jstring msg)\n {\n-  if (msg == 0)\n-    JvThrow (new java::lang::NoClassDefFoundError);\n-  else\n-    JvThrow (new java::lang::NoClassDefFoundError (msg));\n+  throw (msg\n+\t ? new java::lang::NoClassDefFoundError (msg)\n+\t : new java::lang::NoClassDefFoundError);\n }\n \n static void\n@@ -1591,17 +1590,15 @@ throw_no_class_def_found_error (char *msg)\n static void\n throw_class_format_error (jstring msg)\n {\n-  if (msg == 0)\n-    JvThrow (new java::lang::ClassFormatError);\n-  else\n-    JvThrow (new java::lang::ClassFormatError (msg));\n+  throw (msg\n+\t ? new java::lang::ClassFormatError (msg)\n+\t : new java::lang::ClassFormatError);\n }\n \n static void\n throw_internal_error (char *msg)\n {\n-  JvThrow \n-    (new java::lang::InternalError (JvNewStringLatin1 (msg)));\n+  throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n }\n \n static jfloat int_bits_to_float (jint value)\n@@ -1616,12 +1613,12 @@ static jdouble long_bits_to_double (jlong value)\n \n static void throw_incompatible_class_change_error (jstring msg)\n {\n-  JvThrow (new java::lang::IncompatibleClassChangeError (msg));\n+  throw new java::lang::IncompatibleClassChangeError (msg);\n }\n \n static void throw_class_circularity_error (jstring msg)\n {\n-  JvThrow (new java::lang::ClassCircularityError (msg));\n+  throw new java::lang::ClassCircularityError (msg);\n }\n \n #endif /* INTERPRETER */"}, {"sha": "fdbfc420c0e667f597c467c00263a9131690ef25", "filename": "libjava/exception.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -24,7 +24,7 @@ details.  */\n \n typedef struct {\n   __eh_info eh_info;\n-  void *value;\n+  jthrowable value;\n } java_eh_info;\n \n \n@@ -60,7 +60,7 @@ _Jv_type_matcher (java_eh_info *info, void* match_info,\n       size_t mi = (size_t) match_info;\n       if ((mi & 1) != 0)\n \tmatch_info = _Jv_FindClass ((Utf8Const*) (mi - 1), NULL);\n-      if (! _Jv_IsInstanceOf ((jobject) info->value, (jclass) match_info))\n+      if (! _Jv_IsInstanceOf (info->value, (jclass) match_info))\n \treturn NULL;\n     }\n \n@@ -136,11 +136,15 @@ _Jv_setup_eh_info (__eh_info *)\n /* Perform a throw, Java style. Throw will unwind through this call,\n    so there better not be any handlers or exception thrown here. */\n \n+#ifdef SJLJ_EXCEPTIONS\n+#define _Jv_Throw _Jv_Sjlj_Throw\n+#endif\n+\n extern \"C\" void\n-_Jv_Throw (void *value)\n+_Jv_Throw (jthrowable value)\n {\n   if (value == NULL)\n-    value = (void *) new java::lang::NullPointerException ();\n+    value = new java::lang::NullPointerException;\n   java_eh_info *ehinfo = *(__get_eh_info ());\n   if (ehinfo == NULL)\n     {"}, {"sha": "6b103a34517cae7db039d7d60635cbe21dd68884", "filename": "libjava/gcj/cni.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgcj%2Fcni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgcj%2Fcni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fcni.h?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -106,18 +106,6 @@ class JvSynchronize\n     { _Jv_MonitorExit (obj); }\n };\n \n-#ifdef SJLJ_EXCEPTIONS\n-#define _Jv_Throw _Jv_Sjlj_Throw\n-#endif\n-\n-// Throw some exception.\n-extern void JvThrow (jobject obj) __attribute__ ((__noreturn__));\n-extern inline void\n-JvThrow (jobject obj)\n-{\n-  _Jv_Throw ((void *) obj);\n-}\n-\n /* Call malloc, but throw exception if insufficient memory. */\n extern inline void *\n JvMalloc (jsize size)"}, {"sha": "2ae65e3e8df043805cc52e58f974c7c58daef3e4", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -368,8 +368,8 @@ extern \"C\" jstring _Jv_NewStringLatin1(const char*, jsize)\n extern \"C\" jsize _Jv_GetStringUTFLength (jstring);\n extern \"C\" jsize _Jv_GetStringUTFRegion (jstring, jsize, jsize, char *);\n \n-extern \"C\" void _Jv_Throw (void *) __attribute__ ((__noreturn__));\n-extern \"C\" void _Jv_Sjlj_Throw (void *) __attribute__ ((__noreturn__));\n+extern \"C\" void _Jv_Throw (jthrowable) __attribute__ ((__noreturn__));\n+extern \"C\" void _Jv_Sjlj_Throw (jthrowable) __attribute__ ((__noreturn__));\n extern \"C\" void* _Jv_Malloc (jsize) __attribute__((__malloc__));\n extern \"C\" void* _Jv_Realloc (void *, jsize);\n extern \"C\" void _Jv_Free (void*);"}, {"sha": "c4ba261bdfef9579d5c933b24b797d201d807efd", "filename": "libjava/gnu/gcj/runtime/natFirstThread.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatFirstThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatFirstThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatFirstThread.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -69,7 +69,7 @@ gnu::gcj::runtime::FirstThread::run (void)\n       if (vers != JNI_VERSION_1_1 && vers != JNI_VERSION_1_2)\n \t{\n \t  // FIXME: unload the library.\n-\t  _Jv_Throw (new java::lang::UnsatisfiedLinkError (JvNewStringLatin1 (\"unrecognized version from preloaded JNI_OnLoad\")));\n+\t  throw new java::lang::UnsatisfiedLinkError (JvNewStringLatin1 (\"unrecognized version from preloaded JNI_OnLoad\"));\n \t}\n     }\n "}, {"sha": "6cca3b74901ba2bb5bf3b2fe0187f30a3d43101f", "filename": "libjava/gnu/gcj/xlib/natDrawable.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatDrawable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatDrawable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatDrawable.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -59,7 +59,7 @@ gnu::gcj::xlib::Drawable::getBounds(java::awt::Rectangle* rv)\n   switch (status)\n     {\n     case BadDrawable:\n-      JvThrow(new XException(display, status));\n+      throw new XException(display, status);\n     default:\n       ; // All OK, NOP.\n     }"}, {"sha": "7bfea7b17f89c8d0e93beda0c15de587b036b28b", "filename": "libjava/gnu/gcj/xlib/natFont.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatFont.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatFont.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatFont.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -29,7 +29,7 @@ gnu::gcj::RawData* gnu::gcj::xlib::Font::loadFont(Display* display,\n   XFontStruct* fontStruct = XLoadQueryFont(dpy, cName);\n   if (fontStruct == 0)\n     {\n-      JvThrow(new XException(JvNewStringLatin1(\"font not found\")));\n+      throw new XException(JvNewStringLatin1(\"font not found\"));\n     }\n \n   return reinterpret_cast<gnu::gcj::RawData*>(fontStruct);"}, {"sha": "0724a5a0925c77f85923ac04ac5670c3bf0c63fd", "filename": "libjava/gnu/gcj/xlib/natWMSizeHints.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatWMSizeHints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatWMSizeHints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatWMSizeHints.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -23,7 +23,7 @@ void gnu::gcj::xlib::WMSizeHints::init(WMSizeHints* copyFrom)\n   if (hints == 0)\n     {\n       jstring errorMessage = JvNewStringLatin1(\"XAllocSizeHints failed\");\n-      JvThrow(new java::lang::OutOfMemoryError(errorMessage));\n+      throw new java::lang::OutOfMemoryError(errorMessage);\n     }\n \n   if (copyFrom != 0)"}, {"sha": "b619348180749dee0fcf2e2c0dc9d575a43b1f75", "filename": "libjava/gnu/gcj/xlib/natWindowAttributes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatWindowAttributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatWindowAttributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatWindowAttributes.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -31,7 +31,7 @@ void gnu::gcj::xlib::WindowAttributes::initFromWindow(Window* from)\n \n   Status status = XGetWindowAttributes(dpy, win, attributesIn);\n   if ((status == BadDrawable) | (status == BadWindow))\n-    JvThrow(new XException(display, status));\n+    throw new XException(display, status);\n }\n \n "}, {"sha": "a92cf9f8c6f2a5d8b4385fc6ae8d08f9262e2dbb", "filename": "libjava/gnu/gcj/xlib/natXImage.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatXImage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatXImage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatXImage.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -40,7 +40,7 @@ void gnu::gcj::xlib::XImage::init(Visual* visual, jint depth,\n   if (ximage == 0)\n     {\n       jstring errorMessage = JvNewStringLatin1(\"XCreateImage failed\");\n-      JvThrow(new java::lang::OutOfMemoryError(errorMessage));\n+      throw new java::lang::OutOfMemoryError(errorMessage);\n     }\n     \n   bool reinitialize = false;"}, {"sha": "b121a1b7ebb2c2e6acf62178b8fc37a51b21fc27", "filename": "libjava/interpret.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -337,7 +337,7 @@ void _Jv_InterpMethod::run_normal (ffi_cif* cif,\n \t\t      + storage_size * sizeof (_Jv_word));\n \n   jobject ex = _this->run (cif, ret, args, inv);\n-  if (ex != 0) _Jv_Throw (ex);\n+  if (ex != 0) throw static_cast<jthrowable>(ex);\n }\n \n void _Jv_InterpMethod::run_synch_object (ffi_cif* cif,\n@@ -357,7 +357,7 @@ void _Jv_InterpMethod::run_synch_object (ffi_cif* cif,\n   jobject ex = _this->run (cif, ret, args, inv);\n   _Jv_MonitorExit (rcv);\n \n-  if (ex != 0) _Jv_Throw (ex);\n+  if (ex != 0) throw static_cast<jthrowable>(ex);\n }\n \n void _Jv_InterpMethod::run_synch_class (ffi_cif* cif,\n@@ -377,7 +377,7 @@ void _Jv_InterpMethod::run_synch_class (ffi_cif* cif,\n   jobject ex = _this->run (cif, ret, args, inv);\n   _Jv_MonitorExit (sync);\n \n-  if (ex != 0) _Jv_Throw (ex);\n+  if (ex != 0) throw static_cast<jthrowable>(ex);\n }\n \n /*\n@@ -679,7 +679,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \t// working if the method is final.  So instead we do an\n \t// explicit test.\n \tif (! sp[0].o)\n-\t  throw new java::lang::NullPointerException ();\n+\t  throw new java::lang::NullPointerException;\n \n \tif (rmeth->vtable_index == -1)\n \t  {\n@@ -1979,7 +1979,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjclass type = field->type;\n \tjint field_offset = field->u.boffset;\n \tif (field_offset > 0xffff)\n-\t  JvThrow (new java::lang::VirtualMachineError);\n+\t  throw new java::lang::VirtualMachineError;\n \n \tjobject obj   = POPA();\n \tNULLCHECK(obj);\n@@ -2086,7 +2086,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \n \tjint field_offset = field->u.boffset;\n \tif (field_offset > 0xffff)\n-\t  JvThrow (new java::lang::VirtualMachineError);\n+\t  throw new java::lang::VirtualMachineError;\n \n \tif (type->isPrimitive ())\n \t  {\n@@ -2237,7 +2237,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       SAVE_PC;\n       {\n \tjobject value = POPA();\n-\tJvThrow (value);\n+\tthrow static_cast<jthrowable>(value);\n       }\n       NEXT_INSN;\n \n@@ -2250,8 +2250,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \n \tif (value != NULL && ! to->isInstance (value))\n \t  {\n-\t    JvThrow (new java::lang::ClassCastException\n-\t\t     (to->getName()));\n+\t    throw new java::lang::ClassCastException (to->getName());\n \t  }\n \n \tPUSHA (value);\n@@ -2412,13 +2411,13 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n static void\n throw_internal_error (char *msg)\n {\n-  JvThrow (new java::lang::InternalError (JvNewStringLatin1 (msg)));\n+  throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n }\n \n static void \n throw_incompatible_class_change_error (jstring msg)\n {\n-  JvThrow (new java::lang::IncompatibleClassChangeError (msg));\n+  throw new java::lang::IncompatibleClassChangeError (msg);\n }\n \n #ifndef HANDLE_SEGV\n@@ -2429,7 +2428,7 @@ throw_null_pointer_exception ()\n   if (null_pointer_exc == NULL)\n     null_pointer_exc = new java::lang::NullPointerException;\n \n-  JvThrow (null_pointer_exc);\n+  throw null_pointer_exc;\n }\n #endif\n "}, {"sha": "9fc55b2a808f9e93349235ded3c81501c1ab0d23", "filename": "libjava/java/io/natFile.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFile.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -118,7 +118,7 @@ java::io::File::getCanonicalPath (void)\n \n #ifdef HAVE_REALPATH\n   if (realpath (buf, buf2) == NULL)\n-    _Jv_Throw (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n \n   // FIXME: what encoding to assume for file names?  This affects many\n   // calls."}, {"sha": "43574df88936a1d7ca8fe517e5be01c2521fbc04", "filename": "libjava/java/io/natFileDescriptorEcos.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -54,7 +54,7 @@ java::io::FileDescriptor::sync (void)\n   // as errors.\n #ifdef HAVE_FSYNC\n #else\n-  JvThrow (new SyncFailedException (JvNewStringLatin1 (NO_FSYNC_MESSAGE)));\n+  throw new SyncFailedException (JvNewStringLatin1 (NO_FSYNC_MESSAGE));\n #endif\n }\n \n@@ -75,9 +75,9 @@ void\n java::io::FileDescriptor::write (jbyteArray b, jint offset, jint len)\n {\n   if (! b)\n-    JvThrow (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (offset < 0 || len < 0 || offset + len > JvGetArrayLength (b))\n-    JvThrow (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n   char *bytes = (char *)elements (b) + offset;\n   ::diag_write (bytes, len);\n }\n@@ -96,7 +96,7 @@ java::io::FileDescriptor::seek (jlong pos, jint whence)\n   jlong here = getFilePointer ();\n \n   if ((whence == SET && pos > len) || (whence == CUR && here + pos > len))\n-    JvThrow (new EOFException);\n+    throw new EOFException;\n \n   return 0;\n }"}, {"sha": "8e4be858a08679121552fdf90de559c4c91cd769", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -59,9 +59,9 @@ java::io::FileDescriptor::sync (void)\n   // as errors.\n #ifdef HAVE_FSYNC\n   if (::fsync (fd) && errno != EROFS && errno != EINVAL)\n-    JvThrow (new SyncFailedException (JvNewStringLatin1 (strerror (errno))));\n+    throw new SyncFailedException (JvNewStringLatin1 (strerror (errno)));\n #else\n-  JvThrow (new SyncFailedException (JvNewStringLatin1 (NO_FSYNC_MESSAGE)));\n+  throw new SyncFailedException (JvNewStringLatin1 (NO_FSYNC_MESSAGE));\n #endif\n }\n \n@@ -112,7 +112,7 @@ java::io::FileDescriptor::open (jstring path, jint jflags)\n     {\n       char msg[MAXPATHLEN + 200];\n       sprintf (msg, \"%s: %s\", buf, strerror (errno));\n-      JvThrow (new FileNotFoundException (JvNewStringLatin1 (msg)));\n+      throw new FileNotFoundException (JvNewStringLatin1 (msg));\n     }\n   return fd;\n }\n@@ -127,31 +127,31 @@ java::io::FileDescriptor::write (jint b)\n       InterruptedIOException *iioe\n \t= new InterruptedIOException (JvNewStringLatin1 (\"write interrupted\"));\n       iioe->bytesTransferred = r == -1 ? 0 : r;\n-      JvThrow (iioe);\n+      throw iioe;\n     }\n   else if (r == -1)\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   // FIXME: loop if r != 1.\n }\n \n void\n java::io::FileDescriptor::write (jbyteArray b, jint offset, jint len)\n {\n   if (! b)\n-    JvThrow (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (offset < 0 || len < 0 || offset + len > JvGetArrayLength (b))\n-    JvThrow (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n   jbyte *bytes = elements (b) + offset;\n   int r = ::write (fd, bytes, len);\n   if (java::lang::Thread::interrupted())\n     {\n       InterruptedIOException *iioe\n \t= new InterruptedIOException (JvNewStringLatin1 (\"write interrupted\"));\n       iioe->bytesTransferred = r == -1 ? 0 : r;\n-      JvThrow (iioe);\n+      throw iioe;\n     }\n   else if (r == -1)\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   // FIXME: loop if r != len.\n }\n \n@@ -161,7 +161,7 @@ java::io::FileDescriptor::close (void)\n   jint save = fd;\n   fd = -1;\n   if (::close (save))\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n }\n \n jint\n@@ -173,11 +173,11 @@ java::io::FileDescriptor::seek (jlong pos, jint whence)\n   jlong here = getFilePointer ();\n \n   if ((whence == SET && pos > len) || (whence == CUR && here + pos > len))\n-    JvThrow (new EOFException);\n+    throw new EOFException;\n \n   off_t r = ::lseek (fd, (off_t) pos, whence == SET ? SEEK_SET : SEEK_CUR);\n   if (r == -1)\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   return r;\n }\n \n@@ -186,7 +186,7 @@ java::io::FileDescriptor::length (void)\n {\n   struct stat sb;\n   if (::fstat (fd, &sb))\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   return sb.st_size;\n }\n \n@@ -195,7 +195,7 @@ java::io::FileDescriptor::getFilePointer (void)\n {\n   off_t r = ::lseek (fd, 0, SEEK_CUR);\n   if (r == -1)\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   return r;\n }\n \n@@ -211,21 +211,21 @@ java::io::FileDescriptor::read (void)\n       InterruptedIOException *iioe\n \t= new InterruptedIOException (JvNewStringLatin1 (\"read interrupted\"));\n       iioe->bytesTransferred = r == -1 ? 0 : r;\n-      JvThrow (iioe);\n+      throw iioe;\n     }\n   else if (r == -1)\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   return b & 0xFF;\n }\n \n jint\n java::io::FileDescriptor::read (jbyteArray buffer, jint offset, jint count)\n {\n   if (! buffer)\n-    JvThrow (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   jsize bsize = JvGetArrayLength (buffer);\n   if (offset < 0 || count < 0 || offset + count > bsize)\n-    JvThrow (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n   jbyte *bytes = elements (buffer) + offset;\n   int r = ::read (fd, bytes, count);\n   if (r == 0)\n@@ -235,10 +235,10 @@ java::io::FileDescriptor::read (jbyteArray buffer, jint offset, jint count)\n       InterruptedIOException *iioe\n \t= new InterruptedIOException (JvNewStringLatin1 (\"read interrupted\"));\n       iioe->bytesTransferred = r == -1 ? 0 : r;\n-      JvThrow (iioe);\n+      throw iioe;\n     }\n   else if (r == -1)\n-    JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n   return r;\n }\n \n@@ -271,7 +271,7 @@ java::io::FileDescriptor::available (void)\n   if (r == -1)\n     {\n     posix_error:\n-      JvThrow (new IOException (JvNewStringLatin1 (strerror (errno))));\n+      throw new IOException (JvNewStringLatin1 (strerror (errno)));\n     }\n \n   // If we didn't get anything, and we have fstat, then see if see if\n@@ -313,6 +313,6 @@ java::io::FileDescriptor::available (void)\n \n   return (jint) num;\n #else\n-  JvThrow (new IOException (JvNewStringLatin1 (\"unimplemented\")));\n+  throw new IOException (JvNewStringLatin1 (\"unimplemented\"));\n #endif\n }"}, {"sha": "3f8ae76b269d609c5734627a29fbda5c0918fc4e", "filename": "libjava/java/io/natFileDescriptorWin32.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -65,7 +65,7 @@ java::io::FileDescriptor::valid (void) {\n void\n java::io::FileDescriptor::sync (void) {\n   if (! FlushFileBuffers ((HANDLE)fd))\n-    JvThrow (new SyncFailedException (JvNewStringLatin1 (winerr ())));\n+    throw new SyncFailedException (JvNewStringLatin1 (winerr ()));\n }\n \n jint\n@@ -109,7 +109,7 @@ java::io::FileDescriptor::open (jstring path, jint jflags) {\n     {\n       char msg[MAX_PATH + 1000];\n       sprintf (msg, \"%s: %s\", buf, winerr ());\n-      JvThrow (new FileNotFoundException (JvNewStringLatin1 (msg)));\n+      throw new FileNotFoundException (JvNewStringLatin1 (msg));\n     }\n \n   return (jint)handle;\n@@ -127,23 +127,23 @@ java::io::FileDescriptor::write (jint b)\n         {\n           InterruptedIOException *iioe = new InterruptedIOException (JvNewStringLatin1 (\"write interrupted\"));\n           iioe->bytesTransferred = bytesWritten;\n-          JvThrow (iioe);\n+\t  throw iioe;\n         }\n       if (bytesWritten != 1)\n-        JvThrow (new IOException (JvNewStringLatin1 (winerr ())));\n+\tthrow new IOException (JvNewStringLatin1 (winerr ()));\n     }\n   else\n-    JvThrow (new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n   // FIXME: loop until bytesWritten == 1\n }\n \n void\n java::io::FileDescriptor::write(jbyteArray b, jint offset, jint len)\n {\n   if (! b)\n-    JvThrow (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if(offset < 0 || len < 0 || offset + len > JvGetArrayLength (b))\n-    JvThrow (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   jbyte *buf = elements (b) + offset;\n   DWORD bytesWritten;\n@@ -153,11 +153,11 @@ java::io::FileDescriptor::write(jbyteArray b, jint offset, jint len)\n         {\n           InterruptedIOException *iioe = new InterruptedIOException (JvNewStringLatin1 (\"write interrupted\"));\n           iioe->bytesTransferred = bytesWritten;\n-          JvThrow (iioe);\n+\t  throw iioe;\n         }\n     }\n   else\n-    JvThrow(new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n   // FIXME: loop until bytesWritten == len\n }\n \n@@ -167,7 +167,7 @@ java::io::FileDescriptor::close (void)\n   HANDLE save = (HANDLE)fd;\n   fd = (jint)INVALID_HANDLE_VALUE;\n   if (! CloseHandle (save))\n-    JvThrow (new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n }\n \n jint\n@@ -179,12 +179,12 @@ java::io::FileDescriptor::seek (jlong pos, jint whence)\n   jlong here = getFilePointer();\n \n   if ((whence == SET && pos > len) || (whence == CUR && here + pos > len))\n-    JvThrow (new EOFException);\n+    throw new EOFException;\n \n   LONG high = pos >> 32;\n   DWORD low = SetFilePointer ((HANDLE)fd, (DWORD)(0xffffffff & pos), &high, whence == SET ? FILE_BEGIN : FILE_CURRENT);\n   if ((low == 0xffffffff) && (GetLastError () != NO_ERROR))\n-    JvThrow (new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n   return low;\n }\n \n@@ -194,7 +194,7 @@ java::io::FileDescriptor::getFilePointer(void)\n   LONG high = 0;\n   DWORD low = SetFilePointer ((HANDLE)fd, 0, &high, FILE_CURRENT);\n   if ((low == 0xffffffff) && (GetLastError() != NO_ERROR))\n-    JvThrow(new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n   return (((jlong)high) << 32L) | (jlong)low;\n }\n \n@@ -216,7 +216,7 @@ java::io::FileDescriptor::read(void)\n   DWORD read;\n \n   if (! ReadFile ((HANDLE)fd, &buf, 1, &read, NULL))\n-    JvThrow (new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n   if (! read)\n     return -1;\n   else\n@@ -227,17 +227,17 @@ jint\n java::io::FileDescriptor::read(jbyteArray buffer, jint offset, jint count)\n {\n   if (! buffer)\n-    JvThrow(new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n \n   jsize bsize = JvGetArrayLength (buffer);\n   if (offset < 0 || count < 0 || offset + count > bsize)\n-    JvThrow (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   jbyte *bytes = elements (buffer) + offset;\n \n   DWORD read;\n   if (! ReadFile((HANDLE)fd, bytes, count, &read, NULL))\n-    JvThrow (new IOException (JvNewStringLatin1 (winerr ())));\n+    throw new IOException (JvNewStringLatin1 (winerr ()));\n \n   return (jint)read;\n }"}, {"sha": "95be487bbdd297a6c851ea819c1eb6828df57c10", "filename": "libjava/java/io/natFileWin32.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileWin32.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -104,7 +104,7 @@ java::io::File::getCanonicalPath (void)\n \n   LPTSTR unused;\n   if(!GetFullPathName(buf, MAX_PATH, buf2, &unused))\n-    _Jv_Throw (new IOException (JvNewStringLatin1 (\"GetFullPathName failed\")));\n+    throw new IOException (JvNewStringLatin1 (\"GetFullPathName failed\"));\n \n   // FIXME: what encoding to assume for file names?  This affects many\n   // calls."}, {"sha": "25e92c7ba6ca7e229bc16f0be9a31d930fb10ab6", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -75,7 +75,7 @@ jclass\n java::lang::Class::forName (jstring className, java::lang::ClassLoader *loader)\n {\n   if (! className)\n-    JvThrow (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n \n   jsize length = _Jv_GetStringUTFLength (className);\n   char buffer[length];\n@@ -93,7 +93,7 @@ java::lang::Class::forName (jstring className, java::lang::ClassLoader *loader)\n   if (klass)\n     _Jv_InitClass (klass);\n   else\n-    JvThrow (new java::lang::ClassNotFoundException (className));\n+    throw new java::lang::ClassNotFoundException (className);\n \n   return klass;\n }\n@@ -129,7 +129,7 @@ java::lang::Class::getConstructor (JArray<jclass> *param_types)\n \t  return cons;\n \t}\n     }\n-  JvThrow (new java::lang::NoSuchMethodException);\n+  throw new java::lang::NoSuchMethodException;\n }\n \n JArray<java::lang::reflect::Constructor *> *\n@@ -194,7 +194,7 @@ java::lang::Class::getDeclaredConstructor (JArray<jclass> *param_types)\n \t  return cons;\n \t}\n     }\n-  JvThrow (new java::lang::NoSuchMethodException);\n+  throw new java::lang::NoSuchMethodException;\n }\n \n java::lang::reflect::Field *\n@@ -241,7 +241,7 @@ java::lang::Class::getDeclaredField (jstring name)\n       rfield->name = name;\n       return rfield;\n     }\n-  JvThrow (new java::lang::NoSuchFieldException (name));\n+  throw new java::lang::NoSuchFieldException (name);\n }\n \n JArray<java::lang::reflect::Field *> *\n@@ -324,7 +324,7 @@ java::lang::Class::getDeclaredMethod (jstring name,\n \t  return rmethod;\n \t}\n     }\n-  JvThrow (new java::lang::NoSuchMethodException);\n+  throw new java::lang::NoSuchMethodException;\n }\n \n JArray<java::lang::reflect::Method *> *\n@@ -500,7 +500,7 @@ java::lang::Class::getMethod (jstring name, JArray<jclass> *param_types)\n \t    }\n \t}\n     }\n-  JvThrow (new java::lang::NoSuchMethodException);\n+  throw new java::lang::NoSuchMethodException;\n }\n \n // This is a very slow implementation, since it re-scans all the\n@@ -645,19 +645,19 @@ java::lang::Class::newInstance (void)\n   // FIXME: we special-case one check here just to pass a Plum Hall\n   // test.  Once access checking is implemented, remove this.\n   if (this == &ClassClass)\n-    JvThrow (new java::lang::IllegalAccessException);\n+    throw new java::lang::IllegalAccessException;\n \n   if (isPrimitive ()\n       || isInterface ()\n       || isArray ()\n       || java::lang::reflect::Modifier::isAbstract(accflags))\n-    JvThrow (new java::lang::InstantiationException);\n+    throw new java::lang::InstantiationException;\n \n   _Jv_InitClass (this);\n \n   _Jv_Method *meth = _Jv_GetMethodLocal (this, init_name, void_signature);\n   if (! meth)\n-    JvThrow (new java::lang::NoSuchMethodException);\n+    throw new java::lang::NoSuchMethodException;\n \n   jobject r = JvAllocObject (this);\n   ((void (*) (jobject)) meth->ncode) (r);\n@@ -725,7 +725,7 @@ java::lang::Class::initializeClass (void)\n   if (state == JV_STATE_ERROR)\n     {\n       _Jv_MonitorExit (this);\n-      JvThrow (new java::lang::NoClassDefFoundError);\n+      throw new java::lang::NoClassDefFoundError;\n     }\n \n   // Step 6.\n@@ -776,7 +776,7 @@ java::lang::Class::initializeClass (void)\n       state = JV_STATE_ERROR;\n       notifyAll ();\n       _Jv_MonitorExit (this);\n-      JvThrow (except);\n+      throw except;\n     }\n \n   _Jv_MonitorEnter (this);\n@@ -880,21 +880,20 @@ _Jv_LookupInterfaceMethod (jclass klass, _Jv_Utf8Const *name,\n         continue;\n \n       if (Modifier::isStatic(meth->accflags))\n-\tJvThrow (new java::lang::IncompatibleClassChangeError\n-\t         (_Jv_GetMethodString (klass, meth->name)));\n+\tthrow new java::lang::IncompatibleClassChangeError\n+\t  (_Jv_GetMethodString (klass, meth->name));\n       if (Modifier::isAbstract(meth->accflags))\n-\tJvThrow (new java::lang::AbstractMethodError\n-\t         (_Jv_GetMethodString (klass, meth->name)));\n+\tthrow new java::lang::AbstractMethodError\n+\t  (_Jv_GetMethodString (klass, meth->name));\n       if (! Modifier::isPublic(meth->accflags))\n-\tJvThrow (new java::lang::IllegalAccessError\n-\t         (_Jv_GetMethodString (klass, meth->name)));\n+\tthrow new java::lang::IllegalAccessError\n+\t  (_Jv_GetMethodString (klass, meth->name));\n \n       _Jv_AddMethodToCache (klass, meth);\n \n       return meth->ncode;\n     }\n-  JvThrow (new java::lang::IncompatibleClassChangeError);\n-  return NULL;                 // Placate compiler.\n+  throw new java::lang::IncompatibleClassChangeError;\n }\n \n // Fast interface method lookup by index.\n@@ -988,11 +987,11 @@ _Jv_CheckCast (jclass c, jobject obj)\n {\n   if (__builtin_expect \n        (obj != NULL && ! _Jv_IsAssignableFrom(c, JV_CLASS (obj)), false))\n-    JvThrow (new java::lang::ClassCastException\n-            ((new java::lang::StringBuffer\n-             (obj->getClass()->getName()))->append\n-             (JvNewStringUTF(\" cannot be cast to \"))->append\n-             (c->getName())->toString()));\n+    throw new java::lang::ClassCastException\n+      ((new java::lang::StringBuffer\n+\t(obj->getClass()->getName()))->append\n+       (JvNewStringUTF(\" cannot be cast to \"))->append\n+       (c->getName())->toString());\n \n   return obj;\n }\n@@ -1007,7 +1006,7 @@ _Jv_CheckArrayStore (jobject arr, jobject obj)\n       jclass obj_class = JV_CLASS (obj);\n       if (__builtin_expect \n           (! _Jv_IsAssignableFrom (elt_class, obj_class), false))\n-\tJvThrow (new java::lang::ArrayStoreException);\n+\tthrow new java::lang::ArrayStoreException;\n     }\n }\n \n@@ -1214,7 +1213,7 @@ _Jv_GetMethodString (jclass klass, _Jv_Utf8Const *name)\n void \n _Jv_ThrowNoSuchMethodError ()\n {\n-  JvThrow (new java::lang::NoSuchMethodError ());\n+  throw new java::lang::NoSuchMethodError;\n }\n \n // Each superinterface of a class (i.e. each interface that the class\n@@ -1257,14 +1256,14 @@ _Jv_AppendPartialITable (jclass klass, jclass iface, void **itable,\n       else if (meth)\n         {\n \t  if (Modifier::isStatic(meth->accflags))\n-\t    JvThrow (new java::lang::IncompatibleClassChangeError\n-\t             (_Jv_GetMethodString (klass, meth->name)));\n+\t    throw new java::lang::IncompatibleClassChangeError\n+\t      (_Jv_GetMethodString (klass, meth->name));\n \t  if (Modifier::isAbstract(meth->accflags))\n-\t    JvThrow (new java::lang::AbstractMethodError\n-\t             (_Jv_GetMethodString (klass, meth->name)));\n+\t    throw new java::lang::AbstractMethodError\n+\t      (_Jv_GetMethodString (klass, meth->name));\n \t  if (! Modifier::isPublic(meth->accflags))\n-\t    JvThrow (new java::lang::IllegalAccessError\n-\t             (_Jv_GetMethodString (klass, meth->name)));\n+\t    throw new java::lang::IllegalAccessError\n+\t      (_Jv_GetMethodString (klass, meth->name));\n \n \t  itable[pos] = meth->ncode;\n \t}\n@@ -1414,5 +1413,5 @@ java::lang::Class::getPrivateMethod (jstring name, JArray<jclass> *param_types)\n \t    }\n \t}\n     }\n-  JvThrow (new java::lang::NoSuchMethodException);\n+  throw new java::lang::NoSuchMethodException;\n }"}, {"sha": "84fe0c4b648c4056341b1cbdf3e52a7a894dea42", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1,6 +1,6 @@\n // natClassLoader.cc - Implementation of java.lang.ClassLoader native methods.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -80,8 +80,8 @@ java::lang::ClassLoader::defineClass0 (jstring name,\n       _Jv_Utf8Const *   name2 = _Jv_makeUtf8Const (name);\n \n       if (! _Jv_VerifyClassName (name2))\n-\tJvThrow (new java::lang::ClassFormatError \n-\t\t (JvNewStringLatin1 (\"erroneous class name\")));\n+\tthrow new java::lang::ClassFormatError\n+\t  (JvNewStringLatin1 (\"erroneous class name\"));\n \n       klass->name = name2;\n     }\n@@ -104,7 +104,10 @@ java::lang::ClassLoader::defineClass0 (jstring name,\n       // anything but ClassNotFoundException, \n       // or some kind of Error.\n \n-      JvThrow (ex);\n+      // FIXME: Rewrite this as a cleanup instead of\n+      // as a catch handler.\n+\n+      throw ex;\n     }\n \n   // if everything proceeded sucessfully, we're loaded.\n@@ -151,9 +154,7 @@ _Jv_WaitForState (jclass klass, int state)\n   _Jv_MonitorExit (klass);\n \n   if (klass->state == JV_STATE_ERROR)\n-    {\n-      _Jv_Throw (new java::lang::LinkageError ());\n-    }\n+    throw new java::lang::LinkageError;\n }\n \n // Finish linking a class.  Only called from ClassLoader::resolveClass.\n@@ -253,7 +254,7 @@ _Jv_PrepareCompiledClass (jclass klass)\n \t  if (! found)\n \t    {\n \t      jstring str = _Jv_NewStringUTF (name->data);\n-\t      JvThrow (new java::lang::ClassNotFoundException (str));\n+\t      throw new java::lang::ClassNotFoundException (str);\n \t    }\n \n \t  pool->data[index].clazz = found;"}, {"sha": "7e8e0b74797c779b0678a8290a5dde95c568e1c9", "filename": "libjava/java/lang/natDouble.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatDouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatDouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatDouble.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -184,5 +184,5 @@ java::lang::Double::parseDouble(jstring str)\n       if (endptr == data + blength)\n \treturn val;\n     }\n-  _Jv_Throw (new NumberFormatException);\n+  throw new NumberFormatException;\n }"}, {"sha": "3ea073ba057c2a6594fa6a6f73ef696d59df7b31", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1,6 +1,6 @@\n // natObject.cc - Implementation of the Object class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -90,7 +90,7 @@ java::lang::Object::clone (void)\n   else\n     {\n       if (! java::lang::Cloneable::class$.isAssignableFrom(klass))\n-\tJvThrow (new CloneNotSupportedException);\n+\tthrow new CloneNotSupportedException;\n \n       size = klass->size();\n       r = JvAllocObject (klass, size);\n@@ -173,8 +173,8 @@ java::lang::Object::notify (void)\n     sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n   if (__builtin_expect (_Jv_CondNotify (&si->condition, &si->mutex), false))\n-    JvThrow (new IllegalMonitorStateException(JvNewStringLatin1 \n-                                              (\"current thread not owner\")));\n+    throw new IllegalMonitorStateException(JvNewStringLatin1 \n+\t\t\t\t\t   (\"current thread not owner\"));\n }\n \n void\n@@ -184,8 +184,8 @@ java::lang::Object::notifyAll (void)\n     sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n   if (__builtin_expect (_Jv_CondNotifyAll (&si->condition, &si->mutex), false))\n-    JvThrow (new IllegalMonitorStateException(JvNewStringLatin1 \n-                                              (\"current thread not owner\")));\n+    throw new IllegalMonitorStateException(JvNewStringLatin1 \n+\t\t\t\t\t   (\"current thread not owner\"));\n }\n \n void\n@@ -194,16 +194,16 @@ java::lang::Object::wait (jlong timeout, jint nanos)\n   if (__builtin_expect (INIT_NEEDED (this), false))\n     sync_init ();\n   if (__builtin_expect (timeout < 0 || nanos < 0 || nanos > 999999, false))\n-    JvThrow (new IllegalArgumentException);\n+    throw new IllegalArgumentException;\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n   switch (_Jv_CondWait (&si->condition, &si->mutex, timeout, nanos))\n     {\n       case _JV_NOT_OWNER:\n-\tJvThrow (new IllegalMonitorStateException (JvNewStringLatin1 \n-                          (\"current thread not owner\")));        \n+\tthrow new IllegalMonitorStateException (JvNewStringLatin1 \n+\t\t\t\t\t\t(\"current thread not owner\"));\n       case _JV_INTERRUPTED:\n \tif (Thread::interrupted ())\n-\t  JvThrow (new InterruptedException);        \n+\t  throw new InterruptedException;\n     }\n }\n \n@@ -224,7 +224,7 @@ _Jv_MonitorEnter (jobject obj)\n {\n #ifndef HANDLE_SEGV\n   if (__builtin_expect (! obj, false))\n-    JvThrow (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n #endif\n   if (__builtin_expect (INIT_NEEDED (obj), false))\n     obj->sync_init ();\n@@ -239,7 +239,7 @@ _Jv_MonitorExit (jobject obj)\n   JvAssert (! INIT_NEEDED (obj));\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) obj->sync_info;\n   if (__builtin_expect (_Jv_MutexUnlock (&si->mutex), false))\n-    JvThrow (new java::lang::IllegalMonitorStateException);\n+    throw new java::lang::IllegalMonitorStateException;\n   return 0;\n }\n "}, {"sha": "5cce9674c9a4126c211dec80f66bf195e1c1a125", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -58,7 +58,7 @@ java::lang::ConcreteProcess::exitValue (void)\n       if (r == -1)\n \t{\n \t  jstring x = JvNewStringLatin1 (strerror (errno));\n-\t  _Jv_Throw (new IllegalThreadStateException (x));\n+\t  throw new IllegalThreadStateException (x);\n \t}\n \n       hasExited = true;\n@@ -85,7 +85,7 @@ java::lang::ConcreteProcess::waitFor (void)\n \t}\n \n       if (java::lang::Thread::interrupted())\n-\t_Jv_Throw (new InterruptedException (JvNewStringLatin1 (\"wait interrupted\")));\n+\tthrow new InterruptedException (JvNewStringLatin1 (\"wait interrupted\"));\n     }\n \n   return status;"}, {"sha": "0c0898107c3e6407a28218bc296d9adb16bfd690", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -136,7 +136,7 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n       const char *msg = lt_dlerror ();\n       jstring str = path->concat (JvNewStringLatin1 (\": \"));\n       str = str->concat (JvNewStringLatin1 (msg));\n-      _Jv_Throw (new UnsatisfiedLinkError (str));\n+      throw new UnsatisfiedLinkError (str);\n     }\n \n   add_library (h);\n@@ -154,14 +154,14 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n       if (vers != JNI_VERSION_1_1 && vers != JNI_VERSION_1_2)\n \t{\n \t  // FIXME: unload the library.\n-\t  _Jv_Throw (new UnsatisfiedLinkError (JvNewStringLatin1 (\"unrecognized version from JNI_OnLoad\")));\n+\t  throw new UnsatisfiedLinkError (JvNewStringLatin1 (\"unrecognized version from JNI_OnLoad\"));\n \t}\n     }\n #else\n-  _Jv_Throw (new UnknownError\n-\t     (JvNewStringLatin1 (do_search\n-\t\t\t\t ? \"Runtime.loadLibrary not implemented\"\n-\t\t\t\t : \"Runtime.load not implemented\")));\n+  throw new UnknownError\n+    (JvNewStringLatin1 (do_search\n+\t\t\t? \"Runtime.loadLibrary not implemented\"\n+\t\t\t: \"Runtime.load not implemented\"));\n #endif /* USE_LTDL */\n }\n "}, {"sha": "c052905dc480aded28206a7388757db7f3f22168", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -378,11 +378,11 @@ java::lang::String::init(jcharArray chars, jint offset, jint count,\n \t\t\t jboolean dont_copy)\n {\n   if (! chars)\n-    JvThrow (new NullPointerException);\n+    throw new NullPointerException;\n   jsize data_size = JvGetArrayLength (chars);\n   if (offset < 0 || count < 0 || offset + count < 0\n       || offset + count > data_size)\n-    JvThrow (new StringIndexOutOfBoundsException());\n+    throw new StringIndexOutOfBoundsException;\n   jcharArray array;\n   jchar *pdst;\n   if (! dont_copy)\n@@ -408,11 +408,11 @@ java::lang::String::init(jbyteArray ascii, jint hibyte, jint offset,\n \t\t\t jint count)\n {\n   if (! ascii)\n-    JvThrow (new NullPointerException);\n+    throw new NullPointerException;\n   jsize data_size = JvGetArrayLength (ascii);\n   if (offset < 0 || count < 0 || offset + count < 0\n       || offset + count > data_size)\n-    JvThrow (new java::lang::StringIndexOutOfBoundsException());\n+    throw new java::lang::StringIndexOutOfBoundsException;\n   jcharArray array = JvNewCharArray(count);\n   jbyte *psrc = elements (ascii) + offset;\n   jchar *pdst = elements (array);\n@@ -431,11 +431,11 @@ java::lang::String::init (jbyteArray bytes, jint offset, jint count,\n \t\t\t  jstring encoding)\n {\n   if (! bytes)\n-    JvThrow (new NullPointerException);\n+    throw new NullPointerException;\n   jsize data_size = JvGetArrayLength (bytes);\n   if (offset < 0 || count < 0 || offset + count < 0\n       || offset + count > data_size)\n-    JvThrow (new StringIndexOutOfBoundsException);\n+    throw new StringIndexOutOfBoundsException;\n   jcharArray array = JvNewCharArray (count);\n   gnu::gcj::convert::BytesToUnicode *converter\n     = gnu::gcj::convert::BytesToUnicode::getDecoder(encoding);\n@@ -493,7 +493,7 @@ jchar\n java::lang::String::charAt(jint i)\n {\n   if (i < 0 || i >= count)\n-    JvThrow (new java::lang::StringIndexOutOfBoundsException());\n+    throw new java::lang::StringIndexOutOfBoundsException;\n   return JvGetStringChars(this)[i];\n }\n \n@@ -504,7 +504,7 @@ java::lang::String::getChars(jint srcBegin, jint srcEnd,\n   jint dst_length = JvGetArrayLength (dst);\n   if (srcBegin < 0 || srcBegin > srcEnd || srcEnd > count\n       || dstBegin < 0 || dstBegin + (srcEnd-srcBegin) > dst_length)\n-    JvThrow (new java::lang::StringIndexOutOfBoundsException());\n+    throw new java::lang::StringIndexOutOfBoundsException;\n   jchar *dPtr = elements (dst) + dstBegin;\n   jchar *sPtr = JvGetStringChars (this) + srcBegin;\n   jint i = srcEnd-srcBegin;\n@@ -554,7 +554,7 @@ java::lang::String::getBytes(jint srcBegin, jint srcEnd,\n   jint dst_length = JvGetArrayLength (dst);\n   if (srcBegin < 0 || srcBegin > srcEnd || srcEnd > count\n       || dstBegin < 0 || dstBegin + (srcEnd-srcBegin) > dst_length)\n-    JvThrow (new java::lang::StringIndexOutOfBoundsException());\n+    throw new java::lang::StringIndexOutOfBoundsException;\n   jbyte *dPtr = elements (dst) + dstBegin;\n   jchar *sPtr = JvGetStringChars (this) + srcBegin;\n   jint i = srcEnd-srcBegin;\n@@ -745,7 +745,7 @@ jstring\n java::lang::String::substring (jint beginIndex, jint endIndex)\n {\n   if (beginIndex < 0 || endIndex > count || beginIndex > endIndex)\n-    JvThrow (new StringIndexOutOfBoundsException());\n+    throw new StringIndexOutOfBoundsException;\n   if (beginIndex == 0 && endIndex == count)\n     return this;\n   jint newCount = endIndex - beginIndex;\n@@ -944,7 +944,7 @@ java::lang::String::valueOf(jcharArray data, jint offset, jint count)\n {\n   jint data_length = JvGetArrayLength (data);\n   if (offset < 0 || count < 0 || offset+count > data_length)\n-    JvThrow (new java::lang::IndexOutOfBoundsException());\n+    throw new java::lang::IndexOutOfBoundsException;\n   jstring result = JvAllocString(count);\n   jchar *sPtr = elements (data) + offset;\n   jchar *dPtr = JvGetStringChars(result);"}, {"sha": "abf62caae8a2770561d976e71018abfb7b871fb3", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -90,7 +90,7 @@ java::lang::System::arraycopy (jobject src, jint src_offset,\n \t\t\t       jint count)\n {\n   if (! src || ! dst)\n-    _Jv_Throw (new NullPointerException);\n+    throw new NullPointerException;\n \n   jclass src_c = src->getClass();\n   jclass dst_c = dst->getClass();\n@@ -100,14 +100,14 @@ java::lang::System::arraycopy (jobject src, jint src_offset,\n   if (! src_c->isArray() || ! dst_c->isArray()\n       || src_comp->isPrimitive() != dst_comp->isPrimitive()\n       || (src_comp->isPrimitive() && src_comp != dst_comp))\n-    _Jv_Throw (new ArrayStoreException);\n+    throw new ArrayStoreException;\n \n   __JArray *src_a = (__JArray *) src;\n   __JArray *dst_a = (__JArray *) dst;\n   if (src_offset < 0 || dst_offset < 0 || count < 0\n       || src_offset + count > src_a->length\n       || dst_offset + count > dst_a->length)\n-    _Jv_Throw (new ArrayIndexOutOfBoundsException);\n+    throw new ArrayIndexOutOfBoundsException;\n \n   // Do-nothing cases.\n   if ((src == dst && src_offset == dst_offset)\n@@ -149,7 +149,7 @@ java::lang::System::arraycopy (jobject src, jint src_offset,\n \t{\n \t  if (*src_elts\n \t      && ! dst_comp->isAssignableFrom((*src_elts)->getClass()))\n-\t    _Jv_Throw (new ArrayStoreException);\n+\t    throw new ArrayStoreException;\n \t  *dst_elts++ = *src_elts++;\n \t}\n     }"}, {"sha": "042ec36f48fc2dd84009e1d35b5444aac376a878", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -116,7 +116,7 @@ void\n java::lang::Thread::join (jlong millis, jint nanos)\n {\n   if (millis < 0 || nanos < 0 || nanos > 999999)\n-    _Jv_Throw (new IllegalArgumentException);\n+    throw new IllegalArgumentException;\n \n   Thread *current = currentThread ();\n \n@@ -135,7 +135,7 @@ java::lang::Thread::join (jlong millis, jint nanos)\n   _Jv_MutexUnlock (&nt->join_mutex);\n \n   if (current->isInterrupted (true))\n-    _Jv_Throw (new InterruptedException);\n+    throw new InterruptedException;\n }\n \n void\n@@ -150,7 +150,7 @@ java::lang::Thread::setPriority (jint newPriority)\n {\n   checkAccess ();\n   if (newPriority < MIN_PRIORITY || newPriority > MAX_PRIORITY)\n-    _Jv_Throw (new IllegalArgumentException);\n+    throw new IllegalArgumentException;\n \n   jint gmax = group->getMaxPriority();\n   if (newPriority > gmax)\n@@ -165,7 +165,7 @@ void\n java::lang::Thread::sleep (jlong millis, jint nanos)\n {\n   if (millis < 0 || nanos < 0 || nanos > 999999)\n-    _Jv_Throw (new IllegalArgumentException);\n+    throw new IllegalArgumentException;\n \n   if (millis == 0 && nanos == 0)\n     ++nanos;\n@@ -180,7 +180,7 @@ java::lang::Thread::sleep (jlong millis, jint nanos)\n   _Jv_MutexUnlock (&nt->join_mutex);\n \n   if (current->isInterrupted (true))\n-    _Jv_Throw (new InterruptedException);\n+    throw new InterruptedException;\n }\n \n void\n@@ -299,7 +299,7 @@ java::lang::Thread::start (void)\n \n   // Its illegal to re-start() a thread, even if its dead.\n   if (!startable_flag)\n-    _Jv_Throw (new IllegalThreadStateException);\n+    throw new IllegalThreadStateException;\n \n   alive_flag = true;\n   startable_flag = false;\n@@ -310,16 +310,16 @@ java::lang::Thread::start (void)\n void\n java::lang::Thread::stop (java::lang::Throwable *)\n {\n-  _Jv_Throw (new UnsupportedOperationException\n-\t     (JvNewStringLatin1 (\"java::lang::Thread::stop unimplemented\")));\n+  throw new UnsupportedOperationException\n+    (JvNewStringLatin1 (\"java::lang::Thread::stop unimplemented\"));\n }\n \n void\n java::lang::Thread::suspend (void)\n {\n   checkAccess ();\n-  _Jv_Throw (new UnsupportedOperationException \n-\t     (JvNewStringLatin1 (\"java::lang::Thread::suspend unimplemented\")));\n+  throw new UnsupportedOperationException \n+    (JvNewStringLatin1 (\"java::lang::Thread::suspend unimplemented\"));\n }\n \n void"}, {"sha": "bc48041f4558a871b3ee36aae6cf5465be94bc4e", "filename": "libjava/java/lang/reflect/natArray.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatArray.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1,6 +1,6 @@\n // natField.cc - Implementation of java.lang.reflect.Field native methods.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -64,7 +64,7 @@ java::lang::reflect::Array::getLength (jobject array)\n {\n   jclass arrayType = array->getClass();\n   if (! arrayType->isArray ())\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n   return ((__JArray*) array)->length;\n }\n \n@@ -73,7 +73,7 @@ java::lang::reflect::Array::getElementType (jobject array, jint index)\n {\n   jclass arrayType = array->getClass();\n   if (! arrayType->isArray ())\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n   jint length = ((__JArray*) array)->length;\n   if ((_Jv_uint) index >= (_Jv_uint) length)\n     _Jv_ThrowBadArrayIndex(index);\n@@ -86,7 +86,7 @@ java::lang::reflect::Array::getBoolean (jobject array, jint index)\n   jclass elementType = getElementType (array, index);\n   if (elementType == JvPrimClass (boolean))\n     return elements ((jbooleanArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jchar\n@@ -95,7 +95,7 @@ java::lang::reflect::Array::getChar (jobject array, jint index)\n   jclass elementType = getElementType (array, index);\n   if (elementType == JvPrimClass (char))\n     return elements ((jcharArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jbyte\n@@ -104,7 +104,7 @@ java::lang::reflect::Array::getByte (jobject array, jint index)\n   jclass elementType = getElementType (array, index);\n   if (elementType == JvPrimClass (byte))\n     return elements ((jbyteArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jshort\n@@ -115,7 +115,7 @@ java::lang::reflect::Array::getShort (jobject array, jint index)\n     return elements ((jshortArray) array) [index];\n   if (elementType == JvPrimClass (byte))\n     return elements ((jbyteArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jint\n@@ -130,7 +130,7 @@ java::lang::reflect::Array::getInt (jobject array, jint index)\n     return elements ((jbyteArray) array) [index];\n   if (elementType == JvPrimClass (char))\n     return elements ((jcharArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jlong\n@@ -147,7 +147,7 @@ java::lang::reflect::Array::getLong (jobject array, jint index)\n     return elements ((jbyteArray) array) [index];\n   if (elementType == JvPrimClass (char))\n     return elements ((jcharArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jfloat\n@@ -166,7 +166,7 @@ java::lang::reflect::Array::getFloat (jobject array, jint index)\n     return elements ((jbyteArray) array) [index];\n   if (elementType == JvPrimClass (char))\n     return elements ((jcharArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jdouble\n@@ -187,7 +187,7 @@ java::lang::reflect::Array::getDouble (jobject array, jint index)\n     return elements ((jbyteArray) array) [index];\n   if (elementType == JvPrimClass (char))\n     return elements ((jcharArray) array) [index];\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n jobject\n@@ -218,7 +218,7 @@ java::lang::reflect::Array::get (jobject array, jint index)\n       else\n \treturn java::lang::Boolean::FALSE;\n     }\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -236,7 +236,7 @@ java::lang::reflect::Array::setChar (jobject array, jint index, jchar value)\n   else if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -256,7 +256,7 @@ java::lang::reflect::Array::setByte (jobject array, jint index, jbyte value)\n   else if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -274,7 +274,7 @@ java::lang::reflect::Array::setShort (jobject array, jint index, jshort value)\n   else if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -290,7 +290,7 @@ java::lang::reflect::Array::setInt (jobject array, jint index, jint value)\n   else if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -304,7 +304,7 @@ java::lang::reflect::Array::setLong (jobject array, jint index, jlong value)\n   else if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -316,7 +316,7 @@ java::lang::reflect::Array::setFloat (jobject array, jint index, jfloat value)\n   else if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -326,7 +326,7 @@ java::lang::reflect::Array::setDouble (jobject array, jint index, jdouble value)\n   if (elementType == JvPrimClass (double))\n     elements ((jdoubleArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -337,14 +337,14 @@ java::lang::reflect::Array::setBoolean (jobject array,\n   if (elementType == JvPrimClass (boolean))\n     elements ((jbooleanArray) array) [index] = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n java::lang::reflect::Array::set (jobject array, jint index,\n \t\t\t\t       jobject value, jclass elType)\n {\n   if (! _Jv_IsInstanceOf (value, elType))\n-    JvThrow (new java::lang::IllegalArgumentException ());\n+    throw new java::lang::IllegalArgumentException;\n   elements ((jobjectArray) array) [index] = value;\n }"}, {"sha": "1103d777bf7b84b9866fce040deb2f5c61f16793", "filename": "libjava/java/lang/reflect/natConstructor.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatConstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatConstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatConstructor.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1,6 +1,6 @@\n // natConstructor.cc - Native code for Constructor class.\n \n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -48,7 +48,7 @@ java::lang::reflect::Constructor::newInstance (jobjectArray args)\n \n   using namespace java::lang::reflect;\n   if (Modifier::isAbstract (declaringClass->getModifiers()))\n-    JvThrow (new InstantiationException);\n+    throw new InstantiationException;\n \n   jmethodID meth = _Jv_FromReflectedConstructor (this);\n   // In the constructor case the return type is the type of the"}, {"sha": "b627485b58bb7daffe1da0fa46139b945785a3bf", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -79,9 +79,9 @@ getAddr (java::lang::reflect::Field* field, jclass caller, jobject obj)\n   else\n     {\n       if (obj == NULL)\n-\t_Jv_Throw (new java::lang::NullPointerException ());\n+\tthrow new java::lang::NullPointerException;\n       if (! _Jv_IsInstanceOf (obj, field->getDeclaringClass()))\n-\tJvThrow (new java::lang::IllegalArgumentException ());\n+\tthrow new java::lang::IllegalArgumentException;\n       return (void*) ((char*) obj + fld->getOffset ());\n     }\n }\n@@ -91,23 +91,23 @@ getBoolean (jclass cls, void* addr)\n {\n   if (cls == JvPrimClass (boolean))\n     return * (jboolean *) addr;\n-  _Jv_Throw (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n static jchar\n getChar (jclass cls, void* addr)\n {\n   if (cls == JvPrimClass (char))\n     return * (jchar *) addr;\n-  _Jv_Throw (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n static jbyte\n getByte (jclass cls, void* addr)\n {\n   if (cls == JvPrimClass (byte))\n     return * (jbyte *) addr;\n-  _Jv_Throw (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n static jshort\n@@ -117,7 +117,7 @@ getShort (jclass cls, void* addr)\n     return * (jshort *) addr;\n   if (cls == JvPrimClass (byte))\n     return * (jbyte *) addr;\n-  _Jv_Throw (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n static jint\n@@ -131,7 +131,7 @@ getInt (jclass cls, void* addr)\n     return * (jchar *) addr;\n   if (cls == JvPrimClass (byte))\n     return * (jbyte *) addr;\n-  _Jv_Throw (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n static jlong\n@@ -249,7 +249,7 @@ java::lang::reflect::Field::get (jclass caller, jobject obj)\n       else\n \treturn java::lang::Boolean::FALSE;\n     }\n-  JvThrow (new java::lang::IllegalArgumentException());\n+  throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -258,7 +258,7 @@ setBoolean (jclass type, void *addr, jboolean value)\n   if (type == JvPrimClass (boolean))\n     * (jboolean *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -275,7 +275,7 @@ setChar (jclass type, void *addr, jchar value)\n   else if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -294,7 +294,7 @@ setByte (jclass type, void *addr, jbyte value)\n   else if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -311,7 +311,7 @@ setShort (jclass type, void *addr, jshort value)\n   else if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -326,7 +326,7 @@ setInt (jclass type, void *addr, jint value)\n   else if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -339,7 +339,7 @@ setLong (jclass type, void *addr, jlong value)\n   else if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -350,7 +350,7 @@ setFloat (jclass type, void *addr, jfloat value)\n   else if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n static void\n@@ -359,7 +359,7 @@ setDouble (jclass type, void *addr, jdouble value)\n   if (type == JvPrimClass (double))\n     * (jdouble *) addr = value;\n   else\n-    JvThrow (new java::lang::IllegalArgumentException());\n+    throw new java::lang::IllegalArgumentException;\n }\n \n void\n@@ -421,7 +421,7 @@ void\n java::lang::reflect::Field::set (jclass caller, jobject object, jobject value, jclass type)\n {\n   if (! _Jv_IsInstanceOf (value, type))\n-    JvThrow (new java::lang::IllegalArgumentException ());\n+    throw new java::lang::IllegalArgumentException;\n   void* addr = getAddr (this, caller, object);\n   * (jobject*) addr = value;\n }"}, {"sha": "61adf26cb00db49317566ca892cfbddce2d9c020", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -160,9 +160,9 @@ java::lang::reflect::Method::invoke (jobject obj, jobjectArray args)\n     {\n       jclass k = obj ? obj->getClass() : NULL;\n       if (! obj)\n-\tJvThrow (new java::lang::NullPointerException);\n+\tthrow new java::lang::NullPointerException;\n       if (! declaringClass->isAssignableFrom(k))\n-\tJvThrow (new java::lang::IllegalArgumentException);\n+\tthrow new java::lang::IllegalArgumentException;\n       // FIXME: access checks.\n \n       // Find the possibly overloaded method based on the runtime type\n@@ -447,7 +447,7 @@ _Jv_CallAnyMethodA (jobject obj,\n       // The JDK accepts this, so we do too.\n     }\n   else if (parameter_types->length != args->length)\n-    JvThrow (new java::lang::IllegalArgumentException);\n+    throw new java::lang::IllegalArgumentException;\n \n   int param_count = parameter_types->length;\n \n@@ -469,7 +469,7 @@ _Jv_CallAnyMethodA (jobject obj,\n \t  if (! argelts[i]\n \t      || ! k\n \t      || ! can_widen (k, paramelts[i]))\n-\t    JvThrow (new java::lang::IllegalArgumentException);\n+\t    throw new java::lang::IllegalArgumentException;\n \t    \n \t  if (paramelts[i] == JvPrimClass (boolean))\n \t    COPY (&argvals[i],\n@@ -499,7 +499,7 @@ _Jv_CallAnyMethodA (jobject obj,\n       else\n \t{\n \t  if (argelts[i] && ! paramelts[i]->isAssignableFrom (k))\n-\t    JvThrow (new java::lang::IllegalArgumentException);\n+\t    throw new java::lang::IllegalArgumentException;\n \t  COPY (&argvals[i], argelts[i], jobject);\n \t}\n     }\n@@ -514,7 +514,7 @@ _Jv_CallAnyMethodA (jobject obj,\n \t\t\t\t\t\t  &ret_value);\n \n   if (ex)\n-    JvThrow (ex);\n+    throw ex;\n \n   jobject r;\n #define VAL(Wrapper, Field)  (new Wrapper (ret_value.Field))"}, {"sha": "934d870b0a7f7ea1979922410b9e02cf960acb86", "filename": "libjava/java/util/zip/natDeflater.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Futil%2Fzip%2FnatDeflater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Futil%2Fzip%2FnatDeflater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FnatDeflater.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -37,9 +37,9 @@ java::util::zip::Deflater::deflate (jbyteArray buf, jint off, jint len)\n   z_streamp s = (z_streamp) zstream;\n \n   if (! buf)\n-    _Jv_Throw (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (off < 0 || len < 0 || off + len > buf->length)\n-    _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   if (len == 0)\n     return 0;\n@@ -58,7 +58,7 @@ java::util::zip::Deflater::deflate (jbyteArray buf, jint off, jint len)\n     case Z_STREAM_ERROR:\n     case Z_BUF_ERROR:\n       // FIXME?\n-      _Jv_Throw (new java::lang::InternalError);\n+      throw new java::lang::InternalError;\n       break;\n \n     case Z_OK:\n@@ -134,9 +134,9 @@ java::util::zip::Deflater::setDictionary (jbyteArray buf, jint off, jint len)\n   z_streamp s = (z_streamp) zstream;\n \n   if (! buf)\n-    _Jv_Throw (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (off < 0 || len < 0 || off + len > buf->length)\n-    _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   // Ignore errors.\n   deflateSetDictionary (s, (Bytef *) (elements (buf) + off), len);\n@@ -149,9 +149,9 @@ java::util::zip::Deflater::setInput (jbyteArray buf, jint off, jint len)\n   z_streamp s = (z_streamp) zstream;\n \n   if (! buf)\n-    _Jv_Throw (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (off < 0 || len < 0 || off + len > buf->length)\n-    _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   s->next_in = (Bytef *) (elements (buf) + off);\n   s->avail_in = len;\n@@ -205,7 +205,7 @@ java::util::zip::Deflater::init (jint level, jboolean no_header)\n       jstring msg = NULL;\n       if (stream->msg != NULL)\n \tmsg = JvNewStringLatin1 (stream->msg);\n-      _Jv_Throw (new java::lang::InternalError (msg));\n+      throw new java::lang::InternalError (msg);\n     }\n \n   zstream = reinterpret_cast<gnu::gcj::RawData *> (stream);"}, {"sha": "0d1529bf044db4b81c87e3b7e710ddafbd0e9d6f", "filename": "libjava/java/util/zip/natInflater.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Futil%2Fzip%2FnatInflater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjava%2Futil%2Fzip%2FnatInflater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FnatInflater.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -94,9 +94,9 @@ java::util::zip::Inflater::inflate (jbyteArray buf, jint off, jint len)\n   z_streamp s = (z_streamp) zstream;\n \n   if (! buf)\n-    _Jv_Throw (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (off < 0 || len < 0 || off + len > buf->length)\n-    _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   if (len == 0)\n     return 0;\n@@ -127,12 +127,12 @@ java::util::zip::Inflater::inflate (jbyteArray buf, jint off, jint len)\n       break;\n \n     case Z_DATA_ERROR:\n-      _Jv_Throw (new java::util::zip::DataFormatException \n-                 (s->msg == NULL ? NULL : JvNewStringLatin1 (s->msg)));\n+      throw new java::util::zip::DataFormatException \n+\t(s->msg == NULL ? NULL : JvNewStringLatin1 (s->msg));\n       break;\n \n     case Z_MEM_ERROR:\n-      _Jv_Throw (new java::lang::OutOfMemoryError);\n+      throw new java::lang::OutOfMemoryError;\n       break;\n \n     case Z_OK:\n@@ -158,9 +158,9 @@ java::util::zip::Inflater::setDictionary (jbyteArray buf, jint off, jint len)\n   z_streamp s = (z_streamp) zstream;\n \n   if (! buf)\n-    _Jv_Throw (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (off < 0 || len < 0 || off + len > buf->length)\n-    _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   // Ignore errors.\n   inflateSetDictionary (s, (Bytef *) (elements (buf) + off), len);\n@@ -174,9 +174,9 @@ java::util::zip::Inflater::setInput (jbyteArray buf, jint off, jint len)\n   z_streamp s = (z_streamp) zstream;\n \n   if (! buf)\n-    _Jv_Throw (new java::lang::NullPointerException);\n+    throw new java::lang::NullPointerException;\n   if (off < 0 || len < 0 || off + len > buf->length)\n-    _Jv_Throw (new java::lang::ArrayIndexOutOfBoundsException);\n+    throw new java::lang::ArrayIndexOutOfBoundsException;\n \n   s->next_in = (Bytef *) (elements (buf) + off);\n   s->avail_in = len;\n@@ -202,7 +202,7 @@ java::util::zip::Inflater::init (jboolean no_header)\n       jstring msg = NULL;\n       if (stream->msg != NULL)\n \tmsg = JvNewStringLatin1 (stream->msg);\n-      _Jv_Throw (new java::lang::InternalError (msg));\n+      throw new java::lang::InternalError (msg);\n     }\n \n   zstream = reinterpret_cast<gnu::gcj::RawData *> (stream);"}, {"sha": "7fac86ee1261b532ff1fe8da782f1ce232b3c1da", "filename": "libjava/jni.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -1746,7 +1746,7 @@ _Jv_LookupJNIMethod (jclass klass, _Jv_Utf8Const *name,\n       if (function == NULL)\n \t{\n \t  jstring str = JvNewStringUTF (name->data);\n-\t  JvThrow (new java::lang::AbstractMethodError (str));\n+\t  throw new java::lang::AbstractMethodError (str);\n \t}\n     }\n "}, {"sha": "ce70257673ddf5edb7be9eb6178d6596eae56698", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -398,7 +398,7 @@ _Jv_ThreadStart (java::lang::Thread *thread, _Jv_Thread_t *data,\n   if (r)\n     {\n       const char* msg = \"Cannot create additional threads\";\n-      JvThrow (new java::lang::OutOfMemoryError (JvNewStringUTF (msg)));\n+      throw new java::lang::OutOfMemoryError (JvNewStringUTF (msg));\n     }\n }\n "}, {"sha": "9455b7551a23c696af8d5d264555b16815295fba", "filename": "libjava/prims.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -100,17 +100,16 @@ void (*_Jv_JVMPI_Notify_THREAD_END) (JVMPI_Event *event);\n #endif\n \f\n \n-extern \"C\" void _Jv_ThrowSignal (void *) __attribute ((noreturn));\n+extern \"C\" void _Jv_ThrowSignal (jthrowable) __attribute ((noreturn));\n \n // Just like _Jv_Throw, but fill in the stack trace first.  Although\n // this is declared extern in order that its name not be mangled, it\n // is not intended to be used outside this file.\n void \n-_Jv_ThrowSignal (void *e)\n+_Jv_ThrowSignal (jthrowable throwable)\n {\n-  java::lang::Throwable *throwable = (java::lang::Throwable *)e;\n   throwable->fillInStackTrace ();\n-  _Jv_Throw (throwable);\n+  throw throwable;\n }\n  \n #ifdef HANDLE_SEGV\n@@ -251,7 +250,7 @@ _Jv_makeUtf8Const (char* s, int len)\n     len = strlen (s);\n   Utf8Const* m = (Utf8Const*) _Jv_AllocBytes (sizeof(Utf8Const) + len + 1);\n   if (! m)\n-    JvThrow (no_memory);\n+    throw no_memory;\n   memcpy (m->data, s, len);\n   m->data[len] = 0;\n   m->length = len;\n@@ -316,14 +315,14 @@ _Jv_GCWatch (jobject obj)\n void\n _Jv_ThrowBadArrayIndex(jint bad_index)\n {\n-  JvThrow (new java::lang::ArrayIndexOutOfBoundsException\n-\t   (java::lang::String::valueOf(bad_index)));\n+  throw new java::lang::ArrayIndexOutOfBoundsException\n+    (java::lang::String::valueOf (bad_index));\n }\n \n void\n _Jv_ThrowNullPointerException ()\n {\n-  throw new java::lang::NullPointerException ();\n+  throw new java::lang::NullPointerException;\n }\n \n // Allocate some unscanned memory and throw an exception if no memory.\n@@ -332,7 +331,7 @@ _Jv_AllocBytesChecked (jsize size)\n {\n   void *r = _Jv_AllocBytes (size);\n   if (! r)\n-    _Jv_Throw (no_memory);\n+    throw no_memory;\n   return r;\n }\n \n@@ -346,7 +345,7 @@ _Jv_AllocObject (jclass klass, jint size)\n \n   jobject obj = (jobject) _Jv_AllocObj (size, klass);\n   if (__builtin_expect (! obj, false))\n-    JvThrow (no_memory);\n+    throw no_memory;\n \n   // If this class has inherited finalize from Object, then don't\n   // bother registering a finalizer.  We know that finalize() is the\n@@ -390,7 +389,7 @@ jobjectArray\n _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n {\n   if (__builtin_expect (count < 0, false))\n-    JvThrow (new java::lang::NegativeArraySizeException);\n+    throw new java::lang::NegativeArraySizeException;\n \n   JvAssert (! elementClass->isPrimitive ());\n \n@@ -404,7 +403,7 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n \n   obj = (jobjectArray) _Jv_AllocArray (size, klass);\n   if (__builtin_expect (! obj, false))\n-    JvThrow (no_memory);\n+    throw no_memory;\n   // Cast away const.\n   jsize *lp = const_cast<jsize *> (&obj->length);\n   *lp = count;\n@@ -426,7 +425,7 @@ _Jv_NewPrimArray (jclass eltype, jint count)\n {\n   int elsize = eltype->size();\n   if (__builtin_expect (count < 0, false))\n-    JvThrow (new java::lang::NegativeArraySizeException ());\n+    throw new java::lang::NegativeArraySizeException;\n \n   JvAssert (eltype->isPrimitive ());\n   jobject dummy = NULL;\n@@ -435,13 +434,13 @@ _Jv_NewPrimArray (jclass eltype, jint count)\n   // Check for overflow.\n   if (__builtin_expect ((size_t) count > \n \t\t\t(SIZE_T_MAX - size) / elsize, false))\n-    JvThrow (no_memory);\n+    throw no_memory;\n \n   jclass klass = _Jv_GetArrayClass (eltype, 0);\n \n   __JArray *arr = (__JArray*) _Jv_AllocObj (size + elsize * count, klass);\n   if (__builtin_expect (! arr, false))\n-    JvThrow (no_memory);\n+    throw no_memory;\n   // Cast away const.\n   jsize *lp = const_cast<jsize *> (&arr->length);\n   *lp = count;\n@@ -953,7 +952,7 @@ _Jv_Malloc (jsize size)\n     size = 1;\n   void *ptr = malloc ((size_t) size);\n   if (__builtin_expect (ptr == NULL, false))\n-    JvThrow (no_memory);\n+    throw no_memory;\n   return ptr;\n }\n \n@@ -964,7 +963,7 @@ _Jv_Realloc (void *ptr, jsize size)\n     size = 1;\n   ptr = realloc (ptr, (size_t) size);\n   if (__builtin_expect (ptr == NULL, false))\n-    JvThrow (no_memory);\n+    throw no_memory;\n   return ptr;\n }\n "}, {"sha": "d165c80b242694e6c371164a34e3825b8e01feff", "filename": "libjava/resolve.cc", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3208f56cbe28aabe191564dd27cf6d78bfe9fd5/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=b3208f56cbe28aabe191564dd27cf6d78bfe9fd5", "patch": "@@ -70,7 +70,7 @@ static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n \n static void throw_incompatible_class_change_error (jstring msg)\n {\n-  JvThrow (new java::lang::IncompatibleClassChangeError (msg));\n+  throw new java::lang::IncompatibleClassChangeError (msg);\n }\n \n _Jv_word\n@@ -98,7 +98,7 @@ _Jv_ResolvePoolEntry (jclass klass, int index)\n       if (! found)\n \t{\n \t  jstring str = _Jv_NewStringUTF (name->data);\n-\t  JvThrow (new java::lang::ClassNotFoundException (str));\n+\t  throw new java::lang::ClassNotFoundException (str);\n \t}\n \n       if ((found->accflags & Modifier::PUBLIC) == Modifier::PUBLIC\n@@ -110,7 +110,7 @@ _Jv_ResolvePoolEntry (jclass klass, int index)\n \t}\n       else\n \t{\n-\t  JvThrow (new java::lang::IllegalAccessError (found->getName()));\n+\t  throw new java::lang::IllegalAccessError (found->getName());\n \t}\n     }\n     break;\n@@ -185,17 +185,16 @@ _Jv_ResolvePoolEntry (jclass klass, int index)\n \t\t    _Jv_ResolveField (field, cls->loader);\n \n \t\t  if (field_type != 0 && field->type != field_type)\n-\t\t    JvThrow\n-\t\t      (new java::lang::LinkageError\n-\t\t       (JvNewStringLatin1 \n-\t\t\t(\"field type mismatch with different loaders\")));\n+\t\t    throw new java::lang::LinkageError\n+\t\t      (JvNewStringLatin1 \n+\t\t       (\"field type mismatch with different loaders\"));\n \n \t\t  the_field = field;\n \t\t  goto end_of_field_search;\n \t\t}\n \t      else\n \t\t{\n-\t\t  JvThrow (new java::lang::IllegalAccessError);\n+\t\t  throw new java::lang::IllegalAccessError;\n \t\t}\n \t    }\n \t}\n@@ -319,7 +318,7 @@ _Jv_ResolvePoolEntry (jclass klass, int index)\n \t  msg = msg->concat (JvNewStringLatin1(\".\"));\n \t  msg = msg->concat (_Jv_NewStringUTF (method_name->data));\n \t  msg = msg->concat (JvNewStringLatin1(\" was not found.\"));\n-\t  JvThrow(new java::lang::NoSuchMethodError (msg));\n+\t  throw new java::lang::NoSuchMethodError (msg);\n \t}\n       \n       pool->data[index].rmethod = \n@@ -366,7 +365,7 @@ _Jv_SearchMethodInClass (jclass cls, jclass klass,\n \t}\n       else\n \t{\n-\t  JvThrow (new java::lang::IllegalAccessError);\n+\t  throw new java::lang::IllegalAccessError;\n \t}\n     }\n   return 0;\n@@ -486,7 +485,7 @@ _Jv_DetermineVTableIndex (jclass klass,\n static void\n _Jv_abstractMethodError ()\n {\n-  JvThrow (new java::lang::AbstractMethodError);\n+  throw new java::lang::AbstractMethodError;\n }\n \n void \n@@ -684,8 +683,7 @@ _Jv_PrepareClass(jclass klass)\n \t{\n \t  clz->state = JV_STATE_ERROR;\n \t  clz->notifyAll ();\n-\t  JvThrow (new java::lang::IncompatibleClassChangeError \n-\t\t           (clz->getName ()));\n+\t  throw new java::lang::IncompatibleClassChangeError (clz->getName ());\n \t}\n \n       /* FIXME: At this point, if (loader != super_class->loader), we\n@@ -1211,10 +1209,9 @@ _Jv_BuildResolvedMethod (_Jv_Method* method,\n static void\n throw_class_format_error (jstring msg)\n {\n-  if (msg == 0)\n-    JvThrow (new java::lang::ClassFormatError);\n-  else\n-    JvThrow (new java::lang::ClassFormatError (msg));\n+  throw (msg\n+\t ? new java::lang::ClassFormatError (msg)\n+\t : new java::lang::ClassFormatError);\n }\n \n static void\n@@ -1226,8 +1223,7 @@ throw_class_format_error (char *msg)\n static void\n throw_internal_error (char *msg)\n {\n-  JvThrow \n-    (new java::lang::InternalError (JvNewStringLatin1 (msg)));\n+  throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n }\n \n "}]}