{"sha": "21e5076a0b103569103829459be6457c3c39e39d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlNTA3NmEwYjEwMzU2OTEwMzgyOTQ1OWJlNjQ1N2MzYzM5ZTM5ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-01-04T15:44:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-01-04T15:44:25Z"}, "message": "re PR middle-end/17767 (MMX intrinsics cause internal compiler error)\n\n\tPR middle-end/17767\n\t* cse.c (fold_rtx) [RTX_COMPARE, RTX_COMM_COMPARE]: Don't attempt\n\tany simplifications of vector mode comparison operators.\n\t* simplify-rtx.c (simplify_relational_operation): Fix variable name.\n\ntestsuite:\n\n\t* gcc.dg/i386-mmx-6.c: New test case.\n\nFrom-SVN: r92896", "tree": {"sha": "6f5abb5eb8e24f267bbefd9b81df36259ebcfce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5abb5eb8e24f267bbefd9b81df36259ebcfce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e5076a0b103569103829459be6457c3c39e39d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e5076a0b103569103829459be6457c3c39e39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e5076a0b103569103829459be6457c3c39e39d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e5076a0b103569103829459be6457c3c39e39d/comments", "author": null, "committer": null, "parents": [{"sha": "8ea9d0c7c932328745976c01943afafaa8c729ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea9d0c7c932328745976c01943afafaa8c729ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea9d0c7c932328745976c01943afafaa8c729ee"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "14c24385cbf650aed8a84289c4a2a48fee99185e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e5076a0b103569103829459be6457c3c39e39d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e5076a0b103569103829459be6457c3c39e39d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21e5076a0b103569103829459be6457c3c39e39d", "patch": "@@ -1,8 +1,14 @@\n+2005-01-04  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR middle-end/17767\n+\t* cse.c (fold_rtx) [RTX_COMPARE, RTX_COMM_COMPARE]: Don't attempt\n+\tany simplifications of vector mode comparison operators.\n+\t* simplify-rtx.c (simplify_relational_operation): Fix variable name.\n+\n 2005-01-04  Paolo Bonzini  <bonzini@gnu.org>\n \t    Devang Patel  <dpatel@apple.com>\n \n \tPR tree-optimization/18308\n-\n \t* tree-if-conv.c (add_to_dst_predicate_list): Gimplify\n \tthe operands before creating a new expression.\n \t* dojump.c (do_jump): Make drop_through_label available"}, {"sha": "766c7252de3bd265f9916faaf613dd99ee823682", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=21e5076a0b103569103829459be6457c3c39e39d", "patch": "@@ -3865,6 +3865,10 @@ fold_rtx (rtx x, rtx insn)\n \t constant, set CONST_ARG0 and CONST_ARG1 appropriately.  We needn't\n \t do anything if both operands are already known to be constant.  */\n \n+      /* ??? Vector mode comparisons are not supported yet.  */\n+      if (VECTOR_MODE_P (mode))\n+\tbreak;\n+\n       if (const_arg0 == 0 || const_arg1 == 0)\n \t{\n \t  struct table_elt *p0, *p1;"}, {"sha": "6e208aa9d9a6a4e269827a7421c83f374a76313f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=21e5076a0b103569103829459be6457c3c39e39d", "patch": "@@ -2757,7 +2757,7 @@ simplify_relational_operation (enum rtx_code code, enum machine_mode mode,\n #ifdef VECTOR_STORE_FLAG_VALUE\n \t  {\n \t    int i, units;\n-\t    rtvec c;\n+\t    rtvec v;\n \n \t    rtx val = VECTOR_STORE_FLAG_VALUE (mode);\n \t    if (val == NULL_RTX)"}, {"sha": "a1b44429762b553629cf3490fe1748667d88551d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21e5076a0b103569103829459be6457c3c39e39d", "patch": "@@ -1,3 +1,8 @@\n+2005-01-04  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR middle-end/17767\n+\t* gcc.dg/i386-mmx-6.c: New test case.\n+\n 2005-01-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR tree-optimization/18308"}, {"sha": "8938d2cd41d30e1690eb394f2a2a436dfcb17ce1", "filename": "gcc/testsuite/gcc.dg/i386-mmx-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e5076a0b103569103829459be6457c3c39e39d/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-6.c?ref=21e5076a0b103569103829459be6457c3c39e39d", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/17767 */\n+/* Contributed by Volker Reichelt <reichelt@igpm.rwth-aachen.de> */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O -mmmx\" } */\n+typedef int __m64 __attribute__ ((vector_size (8)));\n+typedef short __v4hi __attribute__ ((vector_size (8)));\n+\n+__m64 foo ()\n+{\n+  int i;\n+  __m64 m;\n+\n+  for (i = 0; i < 2; i++)\n+    m = (__m64) __builtin_ia32_pcmpeqw ((__v4hi) m, (__v4hi) m);\n+\n+  return m;\n+}"}]}