{"sha": "9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlM2FjNWQ2M2YwZjBkNzlkMjIwYmIzYTEwODQyYjI4YTFlNDhhZA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-12-20T01:39:49Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2019-12-20T01:39:49Z"}, "message": "Fortran polymorphic class-type support for OpenACC\n\n\tgcc/fortran/\n\t* openmp.c (resolve_oacc_data_clauses): Don't disallow allocatable\n\tpolymorphic types for OpenACC.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Support polymorphic class\n\ttypes.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/class-ptr-param.f95: New test.\n\t* testsuite/libgomp.oacc-fortran/classtypes-1.f95: New test.\n\t* testsuite/libgomp.oacc-fortran/classtypes-2.f95: New test.\n\nFrom-SVN: r279631", "tree": {"sha": "c4426113e90ebe5b42363af5610987218e468d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4426113e90ebe5b42363af5610987218e468d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02817027ca02f32cfd4fbaa71edf879a024089a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02817027ca02f32cfd4fbaa71edf879a024089a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02817027ca02f32cfd4fbaa71edf879a024089a3"}], "stats": {"total": 276, "additions": 257, "deletions": 19}, "files": [{"sha": "355ded48e0f80dd374ab1afa7be2776a84e9e2ec", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -1,3 +1,10 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\n+\t* openmp.c (resolve_oacc_data_clauses): Don't disallow allocatable\n+\tpolymorphic types for OpenACC.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Support polymorphic class\n+\ttypes.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \n \t* gfortran.h (gfc_omp_map_op): Add OMP_MAP_ATTACH, OMP_MAP_DETACH."}, {"sha": "051b4bd0a6cdf1463b5435705576001d3a9f0a0a", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -3929,12 +3929,6 @@ check_array_not_assumed (gfc_symbol *sym, locus loc, const char *name)\n static void\n resolve_oacc_data_clauses (gfc_symbol *sym, locus loc, const char *name)\n {\n-  if ((sym->ts.type == BT_ASSUMED && sym->attr.allocatable)\n-      || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)\n-\t  && CLASS_DATA (sym)->attr.allocatable))\n-    gfc_error (\"ALLOCATABLE object %qs of polymorphic type \"\n-\t       \"in %s clause at %L\", sym->name, name, &loc);\n-  check_symbol_not_pointer (sym, loc, name);\n   check_array_not_assumed (sym, loc, name);\n }\n "}, {"sha": "f1e6e87db82561b73917003041869382a375ca0b", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 56, "deletions": 13, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -2471,14 +2471,42 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  tree present = (gfc_omp_is_optional_argument (decl)\n \t\t\t\t  ? gfc_omp_check_optional_argument (decl, true)\n \t\t\t\t  : NULL_TREE);\n-\t\t  if (POINTER_TYPE_P (TREE_TYPE (decl))\n-\t\t      && (gfc_omp_privatize_by_reference (decl)\n-\t\t\t  || GFC_DECL_GET_SCALAR_POINTER (decl)\n-\t\t\t  || GFC_DECL_GET_SCALAR_ALLOCATABLE (decl)\n-\t\t\t  || GFC_DECL_CRAY_POINTEE (decl)\n-\t\t\t  || GFC_DESCRIPTOR_TYPE_P\n-\t\t\t\t\t(TREE_TYPE (TREE_TYPE (decl)))\n-\t\t\t  || n->sym->ts.type == BT_DERIVED))\n+\t\t  if (n->sym->ts.type == BT_CLASS)\n+\t\t    {\n+\t\t      tree type = TREE_TYPE (decl);\n+\t\t      if (n->sym->attr.optional)\n+\t\t\tsorry (\"optional class parameter\");\n+\t\t      if (POINTER_TYPE_P (type))\n+\t\t\t{\n+\t\t\t  node4 = build_omp_clause (input_location,\n+\t\t\t\t\t\t    OMP_CLAUSE_MAP);\n+\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node4, GOMP_MAP_POINTER);\n+\t\t\t  OMP_CLAUSE_DECL (node4) = decl;\n+\t\t\t  OMP_CLAUSE_SIZE (node4) = size_int (0);\n+\t\t\t  decl = build_fold_indirect_ref (decl);\n+\t\t\t}\n+\t\t      tree ptr = gfc_class_data_get (decl);\n+\t\t      ptr = build_fold_indirect_ref (ptr);\n+\t\t      OMP_CLAUSE_DECL (node) = ptr;\n+\t\t      OMP_CLAUSE_SIZE (node) = gfc_class_vtab_size_get (decl);\n+\t\t      node2 = build_omp_clause (input_location, OMP_CLAUSE_MAP);\n+\t\t      OMP_CLAUSE_SET_MAP_KIND (node2, GOMP_MAP_TO_PSET);\n+\t\t      OMP_CLAUSE_DECL (node2) = decl;\n+\t\t      OMP_CLAUSE_SIZE (node2) = TYPE_SIZE_UNIT (type);\n+\t\t      node3 = build_omp_clause (input_location, OMP_CLAUSE_MAP);\n+\t\t      OMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_ATTACH_DETACH);\n+\t\t      OMP_CLAUSE_DECL (node3) = gfc_class_data_get (decl);\n+\t\t      OMP_CLAUSE_SIZE (node3) = size_int (0);\n+\t\t      goto finalize_map_clause;\n+\t\t    }\n+\t\t  else if (POINTER_TYPE_P (TREE_TYPE (decl))\n+\t\t\t   && (gfc_omp_privatize_by_reference (decl)\n+\t\t\t       || GFC_DECL_GET_SCALAR_POINTER (decl)\n+\t\t\t       || GFC_DECL_GET_SCALAR_ALLOCATABLE (decl)\n+\t\t\t       || GFC_DECL_CRAY_POINTEE (decl)\n+\t\t\t       || GFC_DESCRIPTOR_TYPE_P\n+\t\t\t\t\t     (TREE_TYPE (TREE_TYPE (decl)))\n+\t\t\t       || n->sym->ts.type == BT_DERIVED))\n \t\t    {\n \t\t      tree orig_decl = decl;\n \t\t      node4 = build_omp_clause (input_location,\n@@ -2645,11 +2673,15 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n \t\t  symbol_attribute sym_attr;\n \n-\t\t  sym_attr = lastcomp->u.c.component->attr;\n+\t\t  if (lastcomp->u.c.component->ts.type == BT_CLASS)\n+\t\t    sym_attr = CLASS_DATA (lastcomp->u.c.component)->attr;\n+\t\t  else\n+\t\t    sym_attr = lastcomp->u.c.component->attr;\n \n \t\t  gfc_init_se (&se, NULL);\n \n \t\t  if (!sym_attr.dimension\n+\t\t      && lastcomp->u.c.component->ts.type != BT_CLASS\n \t\t      && lastcomp->u.c.component->ts.type != BT_DERIVED)\n \t\t    {\n \t\t      /* Last component is a scalar.  */\n@@ -2679,13 +2711,24 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n \t\t  tree inner = se.expr;\n \n-\t\t  /* Last component is a derived type.  */\n-\t\t  if (lastcomp->u.c.component->ts.type == BT_DERIVED)\n+\t\t  /* Last component is a derived type or class pointer.  */\n+\t\t  if (lastcomp->u.c.component->ts.type == BT_DERIVED\n+\t\t      || lastcomp->u.c.component->ts.type == BT_CLASS)\n \t\t    {\n \t\t      if (sym_attr.allocatable || sym_attr.pointer)\n \t\t\t{\n-\t\t\t  tree data = inner;\n-\t\t\t  tree size = TYPE_SIZE_UNIT (TREE_TYPE (inner));\n+\t\t\t  tree data, size;\n+\n+\t\t\t  if (lastcomp->u.c.component->ts.type == BT_CLASS)\n+\t\t\t    {\n+\t\t\t      data = gfc_class_data_get (inner);\n+\t\t\t      size = gfc_class_vtab_size_get (inner);\n+\t\t\t    }\n+\t\t\t  else  /* BT_DERIVED.  */\n+\t\t\t    {\n+\t\t\t      data = inner;\n+\t\t\t      size = TYPE_SIZE_UNIT (TREE_TYPE (inner));\n+\t\t\t    }\n \n \t\t\t  OMP_CLAUSE_DECL (node)\n \t\t\t    = build_fold_indirect_ref (data);"}, {"sha": "81b9d6788a1ecfc6ce289a6d11b4ebc229ce44ab", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -1,3 +1,9 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/class-ptr-param.f95: New test.\n+\t* testsuite/libgomp.oacc-fortran/classtypes-1.f95: New test.\n+\t* testsuite/libgomp.oacc-fortran/classtypes-2.f95: New test.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "80147337c9d7faa8c55493f7a94942a512101b28", "filename": "libgomp/testsuite/libgomp.oacc-fortran/class-ptr-param.f95", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclass-ptr-param.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclass-ptr-param.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclass-ptr-param.f95?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+\n+module typemod\n+\n+type mytype\n+  integer :: a\n+end type mytype\n+\n+contains\n+\n+subroutine mysub(c)\n+  implicit none\n+\n+  class(mytype), allocatable :: c\n+\n+!$acc parallel copy(c)\n+  c%a = 5\n+!$acc end parallel\n+end subroutine mysub\n+\n+end module typemod\n+\n+program main\n+  use typemod\n+  implicit none\n+\n+  class(mytype), allocatable :: myvar\n+  allocate(mytype :: myvar)\n+\n+  myvar%a = 0\n+  call mysub(myvar)\n+\n+  if (myvar%a .ne. 5) stop 1\n+end program main"}, {"sha": "f16f42fc3af224494e99b88b3030a7c72594b776", "filename": "libgomp/testsuite/libgomp.oacc-fortran/classtypes-1.f95", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-1.f95?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+\n+module typemod\n+\n+type :: typeimpl\n+  real, pointer :: p(:) => null()\n+end type typeimpl\n+\n+type :: basictype\n+  class(typeimpl), pointer :: p => null()\n+end type basictype\n+\n+type, extends(basictype) :: regulartype\n+  character :: void\n+end type regulartype\n+\n+end module typemod\n+\n+program main\n+  use typemod\n+  implicit none\n+  type(regulartype), pointer :: myvar\n+  integer :: i\n+  real :: j, k\n+\n+  allocate(myvar)\n+  allocate(myvar%p)\n+  allocate(myvar%p%p(1:100))\n+\n+  do i=1,100\n+    myvar%p%p(i) = -1.0\n+  end do\n+\n+!$acc enter data copyin(myvar, myvar%p) create(myvar%p%p)\n+\n+!$acc parallel loop present(myvar%p%p)\n+  do i=1,100\n+    myvar%p%p(i) = i * 2\n+  end do\n+!$acc end parallel loop\n+\n+!$acc exit data copyout(myvar%p%p) delete(myvar, myvar%p)\n+\n+  do i=1,100\n+    if (myvar%p%p(i) .ne. i * 2) stop 1\n+  end do\n+\n+end program main"}, {"sha": "ad80ec2a0ef1bcaf96d954e5f453727d3c10b876", "filename": "libgomp/testsuite/libgomp.oacc-fortran/classtypes-2.f95", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-2.f95?ref=9be3ac5d63f0f0d79d220bb3a10842b28a1e48ad", "patch": "@@ -0,0 +1,106 @@\n+! { dg-do run }\n+\n+module wrapper_mod\n+\n+type compute\n+  integer, allocatable :: block(:,:)\n+contains\n+  procedure :: initialize\n+end type compute\n+\n+type, extends(compute) :: cpu_compute\n+  integer :: blocksize\n+contains\n+  procedure :: setblocksize\n+end type cpu_compute\n+\n+type, extends(compute) :: gpu_compute\n+  integer :: numgangs\n+  integer :: numworkers\n+  integer :: vectorsize\n+  integer, allocatable :: gpu_block(:,:)\n+contains\n+  procedure :: setdims\n+end type gpu_compute\n+\n+contains\n+\n+subroutine initialize(c, length, width)\n+  implicit none\n+  class(compute) :: c\n+  integer :: length\n+  integer :: width\n+  integer :: i\n+  integer :: j\n+\n+  allocate (c%block(length, width))\n+\n+  do i=1,length\n+    do j=1, width\n+      c%block(i,j) = i + j\n+    end do\n+  end do\n+end subroutine initialize\n+\n+subroutine setdims(c, g, w, v)\n+  implicit none\n+  class(gpu_compute) :: c\n+  integer :: g\n+  integer :: w\n+  integer :: v\n+  c%numgangs = g\n+  c%numworkers = w\n+  c%vectorsize = v\n+end subroutine setdims\n+\n+subroutine setblocksize(c, bs)\n+  implicit none\n+  class(cpu_compute) :: c\n+  integer :: bs\n+  c%blocksize = bs\n+end subroutine setblocksize\n+\n+end module wrapper_mod\n+\n+program main\n+  use wrapper_mod\n+  implicit none\n+  class(compute), allocatable, target :: mycomp\n+  integer :: i, j\n+\n+  allocate(gpu_compute::mycomp)\n+\n+  call mycomp%initialize(1024,1024)\n+\n+  !$acc enter data copyin(mycomp)\n+\n+  select type (mycomp)\n+  type is (cpu_compute)\n+    call mycomp%setblocksize(32)\n+  type is (gpu_compute)\n+    call mycomp%setdims(32,32,32)\n+    allocate(mycomp%gpu_block(1024,1024))\n+    !$acc update device(mycomp)\n+    !$acc parallel copyin(mycomp%block) copyout(mycomp%gpu_block)\n+    !$acc loop gang worker vector collapse(2)\n+    do i=1,1024\n+      do j=1,1024\n+        mycomp%gpu_block(i,j) = mycomp%block(i,j) + 1\n+      end do\n+    end do\n+    !$acc end parallel\n+  end select\n+\n+  !$acc exit data copyout(mycomp)\n+\n+  select type (g => mycomp)\n+  type is (gpu_compute)\n+  do i = 1, 1024\n+    do j = 1, 1024\n+      if (g%gpu_block(i,j) .ne. i + j + 1) stop 1\n+    end do\n+  end do\n+  end select\n+\n+  deallocate(mycomp)\n+end program main"}]}