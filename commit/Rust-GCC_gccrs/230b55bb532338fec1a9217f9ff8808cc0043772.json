{"sha": "230b55bb532338fec1a9217f9ff8808cc0043772", "node_id": "C_kwDOANBUbNoAKDIzMGI1NWJiNTMyMzM4ZmVjMWE5MjE3ZjlmZjg4MDhjYzAwNDM3NzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T11:57:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T11:57:24Z"}, "message": "Merge #868\n\n868: Add support for Wildcard pattern binding r=philberty a=philberty\n\nWildcard bindings allow us to bind expression to be unused such as:\r\n\r\n  let _ = 123;\r\n\r\nThey are more commonly used in destructuring of tuples such as:\r\n\r\n  let my_tuple = (1,2);\r\n  let (a,_) = my_tuple;\r\n\r\nThis is the initial basic support for the basic form of let _ = ...; and\r\nit also allows us to ignore parameters within functions as well.\r\n\r\nFixes #557\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "e8bf9fee6760bc117b69603a59f6a3bb2c1949ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8bf9fee6760bc117b69603a59f6a3bb2c1949ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/230b55bb532338fec1a9217f9ff8808cc0043772", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2CqkCRBK7hj4Ov3rIwAALQoIAKandhQfhyvw6ng29mW4r9/S\n+30GkdSKU5P3mB0rceOFVEFsFmni8i9hmjO6lLUS4m9Gb7KCSbL1zzjgk0M+6AsD\np+PJSSmUo/lAMxjABVTIR18IWt+DMeXXWViBRcrwVg3uyVqKEbjZanqJ2hAnyRal\nb+WBllVmfa2VUsavG1RQGyvRKtPVgEv4zxHe1IXZwux5BPkVl2tilVDXFzhS+HSS\nmySsBl/vZbN0Mf0qcCBXQJgVU+3YqMXTUzf5QBsn+/4lPffUMK23rDssPQiSNnG0\nUHLbxx6/dVxTwIvIm47LUg+syFB8dIRl96m0h3wwfhCdI8RIyqlRqVJwh2wjegQ=\n=JeVf\n-----END PGP SIGNATURE-----\n", "payload": "tree e8bf9fee6760bc117b69603a59f6a3bb2c1949ab\nparent bc27d113167ec6c6cc96b01c8559fc9b9219417c\nparent 34710b497e44d96b661ee89d50776313ef91b6b2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641556644 +0000\ncommitter GitHub <noreply@github.com> 1641556644 +0000\n\nMerge #868\n\n868: Add support for Wildcard pattern binding r=philberty a=philberty\n\nWildcard bindings allow us to bind expression to be unused such as:\r\n\r\n  let _ = 123;\r\n\r\nThey are more commonly used in destructuring of tuples such as:\r\n\r\n  let my_tuple = (1,2);\r\n  let (a,_) = my_tuple;\r\n\r\nThis is the initial basic support for the basic form of let _ = ...; and\r\nit also allows us to ignore parameters within functions as well.\r\n\r\nFixes #557\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230b55bb532338fec1a9217f9ff8808cc0043772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/230b55bb532338fec1a9217f9ff8808cc0043772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230b55bb532338fec1a9217f9ff8808cc0043772/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc27d113167ec6c6cc96b01c8559fc9b9219417c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc27d113167ec6c6cc96b01c8559fc9b9219417c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc27d113167ec6c6cc96b01c8559fc9b9219417c"}, {"sha": "34710b497e44d96b661ee89d50776313ef91b6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34710b497e44d96b661ee89d50776313ef91b6b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34710b497e44d96b661ee89d50776313ef91b6b2"}], "stats": {"total": 159, "additions": 115, "deletions": 44}, "files": [{"sha": "a7bf52a58b958488afba6dc17de0fd1a91aa9edb", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -52,6 +52,16 @@ class CompileFnParam : public HIRCompileBase\n       fndecl, pattern.get_identifier (), decl_type, address_taken, locus);\n   }\n \n+  void visit (HIR::WildcardPattern &pattern) override\n+  {\n+    decl_type = ctx->get_backend ()->immutable_type (decl_type);\n+\n+    bool address_taken = false;\n+    compiled_param\n+      = ctx->get_backend ()->parameter_variable (fndecl, \"_\", decl_type,\n+\t\t\t\t\t\t address_taken, locus);\n+  }\n+\n private:\n   CompileFnParam (Context *ctx, tree fndecl, tree decl_type, Location locus,\n \t\t  const HIR::FunctionParam &param)"}, {"sha": "4b52dcd4346a0952392b45db406d973f66ef359b", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -64,6 +64,15 @@ class CompileVarDecl : public HIRCompileBase\n \t\t\t\t\t     address_taken, locus);\n   }\n \n+  void visit (HIR::WildcardPattern &pattern) override\n+  {\n+    translated_type = ctx->get_backend ()->immutable_type (translated_type);\n+    compiled_variable\n+      = ctx->get_backend ()->local_variable (fndecl, \"_\", translated_type,\n+\t\t\t\t\t     NULL /*decl_var*/, address_taken,\n+\t\t\t\t\t     locus);\n+  }\n+\n private:\n   CompileVarDecl (Context *ctx, tree fndecl)\n     : HIRCompileBase (ctx), fndecl (fndecl),"}, {"sha": "c62ba3f7f62fe15a2daa5366771e37d1c78022ce", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -269,6 +269,11 @@ class PathPattern : public Pattern\n   PathExprSegment &get_root_seg () { return segments.at (0); }\n \n   PathExprSegment get_final_segment () const { return segments.back (); }\n+\n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::PATH;\n+  }\n };\n \n /* HIR node representing a path-in-expression pattern (path that allows generic"}, {"sha": "8dca54dcb909735761e12f577b763f26008f37f4", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 59, "deletions": 44, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -49,7 +49,7 @@ class LiteralPattern : public Pattern\n       has_minus (has_minus), locus (locus), mappings (mappings)\n   {}\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -58,6 +58,11 @@ class LiteralPattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::LITERAL;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -122,7 +127,7 @@ class IdentifierPattern : public Pattern\n   IdentifierPattern (IdentifierPattern &&other) = default;\n   IdentifierPattern &operator= (IdentifierPattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   bool is_mut () const { return mut == Mutability::Mut; }\n \n@@ -135,6 +140,11 @@ class IdentifierPattern : public Pattern\n \n   Identifier get_identifier () const { return variable_ident; }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::IDENTIFIER;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -157,7 +167,7 @@ class WildcardPattern : public Pattern\n     : locus (locus), mappings (mappings)\n   {}\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -166,6 +176,11 @@ class WildcardPattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::WILDCARD;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -335,7 +350,7 @@ class RangePattern : public Pattern\n   RangePattern (RangePattern &&other) = default;\n   RangePattern &operator= (RangePattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -344,6 +359,11 @@ class RangePattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::RANGE;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -406,6 +426,11 @@ class ReferencePattern : public Pattern\n \n   Location get_locus () const override final { return locus; }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::REFERENCE;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -671,7 +696,7 @@ class StructPattern : public Pattern\n \n   bool has_struct_pattern_elems () const { return !elems.is_empty (); }\n \n-  Location get_locus () const { return path.get_locus (); }\n+  Location get_locus () const override { return path.get_locus (); }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -683,6 +708,11 @@ class StructPattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::STRUCT;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -894,7 +924,7 @@ class TupleStructPattern : public Pattern\n   TupleStructPattern (TupleStructPattern &&other) = default;\n   TupleStructPattern &operator= (TupleStructPattern &&other) = default;\n \n-  Location get_locus () const { return path.get_locus (); }\n+  Location get_locus () const override { return path.get_locus (); }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -907,6 +937,11 @@ class TupleStructPattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::TUPLE_STRUCT;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -940,41 +975,6 @@ class TuplePatternItems\n   virtual TuplePatternItems *clone_tuple_pattern_items_impl () const = 0;\n };\n \n-// Class representing TuplePattern patterns where there is only a single pattern\n-/*class TuplePatternItemsSingle : public TuplePatternItems {\n-    // Pattern pattern;\n-    std::unique_ptr<Pattern> pattern;\n-\n-  public:\n-    TuplePatternItemsSingle(Pattern* pattern) : pattern(pattern) {}\n-\n-    // Copy constructor uses clone\n-    TuplePatternItemsSingle(TuplePatternItemsSingle const& other) :\n-      pattern(other.pattern->clone_pattern()) {}\n-\n-    // Destructor - define here if required\n-\n-    // Overload assignment operator to clone\n-    TuplePatternItemsSingle& operator=(TuplePatternItemsSingle const& other) {\n-\tpattern = other.pattern->clone_pattern();\n-\n-\treturn *this;\n-    }\n-\n-    // move constructors\n-    TuplePatternItemsSingle(TuplePatternItemsSingle&& other) = default;\n-    TuplePatternItemsSingle& operator=(TuplePatternItemsSingle&& other) =\n-default;\n-\n-  protected:\n-    // Use covariance to implement clone function as returning this object\n-rather than base virtual TuplePatternItemsSingle*\n-clone_tuple_pattern_items_impl() const override { return new\n-TuplePatternItemsSingle(*this);\n-    }\n-};*/\n-// removed in favour of single-element TuplePatternItemsMultiple\n-\n // Class representing TuplePattern patterns where there are multiple patterns\n class TuplePatternItemsMultiple : public TuplePatternItems\n {\n@@ -1113,7 +1113,7 @@ class TuplePattern : public Pattern\n     return *this;\n   }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -1122,6 +1122,11 @@ class TuplePattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::TUPLE;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1170,7 +1175,7 @@ class GroupedPattern : public Pattern\n   GroupedPattern (GroupedPattern &&other) = default;\n   GroupedPattern &operator= (GroupedPattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -1179,6 +1184,11 @@ class GroupedPattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::GROUPED;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1229,7 +1239,7 @@ class SlicePattern : public Pattern\n   SlicePattern (SlicePattern &&other) = default;\n   SlicePattern &operator= (SlicePattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n@@ -1238,6 +1248,11 @@ class SlicePattern : public Pattern\n     return mappings;\n   }\n \n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::SLICE;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "532b95b115f22959e9ae96587c35fa286642d527", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -314,6 +314,21 @@ class IdentifierExpr : public ExprWithoutBlock\n class Pattern\n {\n public:\n+  enum PatternType\n+  {\n+    PATH,\n+    LITERAL,\n+    IDENTIFIER,\n+    WILDCARD,\n+    RANGE,\n+    REFERENCE,\n+    STRUCT,\n+    TUPLE_STRUCT,\n+    TUPLE,\n+    GROUPED,\n+    SLICE,\n+  };\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<Pattern> clone_pattern () const\n   {\n@@ -332,6 +347,8 @@ class Pattern\n \n   virtual Location get_locus () const = 0;\n \n+  virtual PatternType get_pattern_type () const = 0;\n+\n protected:\n   // Clone pattern implementation as pure virtual method\n   virtual Pattern *clone_pattern_impl () const = 0;"}, {"sha": "01a05346b80e1f07457d9015fbc09751dc1e326c", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -83,6 +83,17 @@ class PatternDeclaration : public ResolverBase\n \t\t\t\t    pattern.get_is_mut ());\n   }\n \n+  void visit (AST::WildcardPattern &pattern) override\n+  {\n+    resolver->get_name_scope ().insert (\n+      CanonicalPath::new_seg (pattern.get_node_id (), \"_\"),\n+      pattern.get_node_id (), pattern.get_locus ());\n+    resolver->insert_new_definition (pattern.get_node_id (),\n+\t\t\t\t     Definition{pattern.get_node_id (),\n+\t\t\t\t\t\tparent});\n+    resolver->mark_decl_mutability (pattern.get_node_id (), false);\n+  }\n+\n   // cases in a match expression\n   void visit (AST::PathInExpression &pattern) override;\n "}, {"sha": "aeb5ba6755bbc58fb90a29856b767c391361dcc8", "filename": "gcc/testsuite/rust/compile/issue-557.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-557.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230b55bb532338fec1a9217f9ff8808cc0043772/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-557.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-557.rs?ref=230b55bb532338fec1a9217f9ff8808cc0043772", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+fn test(a: i32, _: i32) {\n+    let _ = 42 + a;\n+}"}]}