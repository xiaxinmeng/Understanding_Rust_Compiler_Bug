{"sha": "587bd42530cee75da83979b18bb170302c915034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3YmQ0MjUzMGNlZTc1ZGE4Mzk3OWIxOGJiMTcwMzAyYzkxNTAzNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2019-06-23T22:10:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-23T22:10:19Z"}, "message": "compiler: edit error messages to avoid -Wformat-diag warnings\n    \n    GCC recently introduced -Wformat-diag to scrutinize GCC error messages.\n    It reports a number of warnings about gofrontend code, such as:\n    \n    ../../trunk/gcc/go/gofrontend/import.cc: In member function \u2018Type* Import::type_for_index(int, const string&, size_t, bool*)\u2019:\n    ../../trunk/gcc/go/gofrontend/import.cc:1129:48: warning: unquoted operator \u2018>=\u2019 in format [-Wformat-diag]\n     1129 |         \"error in %s at %lu: bad type index %d >= %d\",\n          |                                                ^~\n    \n    ../../trunk/gcc/go/gofrontend/ast-dump.cc: In member function \u2018void Ast_dump_context::dump(Gogo*, const char*)\u2019:\n    ../../trunk/gcc/go/gofrontend/ast-dump.cc:203:25: warning: unquoted option name \u2018-fgo-dump-ast\u2019 in format [-Wformat-diag]\n      203 |     \"cannot open %s:%m, -fgo-dump-ast ignored\", dumpname.c_str());\n          |                         ^~~~~~~~~~~~~\n    \n    ../../trunk/gcc/go/gofrontend/expressions.cc: In static member function \u2018static Bexpression* Func_expression::get_code_pointer(Gogo*, Named_object*, Location)\u2019:\n    ../../trunk/gcc/go/gofrontend/expressions.cc:1350:29: warning: misspelled term \u2018builtin function\u2019 in format; use \u2018built-in function\u2019 instead [-Wformat-diag]\n     1350 |     \"invalid use of special builtin function %qs; must be called\",\n          |                             ^~~~~~~~~~~~~~~~\n    \n    ../../trunk/gcc/go/gofrontend/gogo.cc: In member function \u2018void Gogo::add_linkname(const string&, bool, const string&, Location)\u2019:\n    ../../trunk/gcc/go/gofrontend/gogo.cc:2527:4: warning: unquoted sequence of 2 consecutive punctuation characters \u2018//\u2019 in format [-Wformat-diag]\n     2527 |   (\"%s is not a function; \"\n          |   ~^~~~~~~~~~~~~~~~~~~~~~~~\n     2528 |    \"//go:linkname is only supported for functions\"),\n          |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \n    This CL edits error messages to avoid these warnings.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/183497\n\n\t* go.test/test/blank1.go: Update for diagnostic message changes.\n\nFrom-SVN: r272608", "tree": {"sha": "9f53c18a8d1b2e95240549d6e6f986ff70bebd99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f53c18a8d1b2e95240549d6e6f986ff70bebd99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/587bd42530cee75da83979b18bb170302c915034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587bd42530cee75da83979b18bb170302c915034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587bd42530cee75da83979b18bb170302c915034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587bd42530cee75da83979b18bb170302c915034/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26fcb396d1eecc73636ad5a694a16c5bb54fcd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fcb396d1eecc73636ad5a694a16c5bb54fcd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fcb396d1eecc73636ad5a694a16c5bb54fcd26"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "92d863e79cb371b0bcaa625d0d0db53ab5eaebe8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -1,4 +1,4 @@\n-6bb63a21434b3360dbe7e4bd34889734f361d434\n+1232eef628227ef855c5fa6d94b31778b2e74a85\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b20f7e4e725e282f99a25427d66e4dbcfc51e826", "filename": "gcc/go/gofrontend/ast-dump.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -200,7 +200,8 @@ Ast_dump_context::dump(Gogo* gogo, const char* basename)\n   if (out.fail())\n     {\n       go_error_at(Linemap::unknown_location(),\n-\t\t  \"cannot open %s:%m, -fgo-dump-ast ignored\", dumpname.c_str());\n+\t\t  \"cannot open %s:%m; %<-fgo-dump-ast%> ignored\",\n+\t\t  dumpname.c_str());\n       return;\n     }\n "}, {"sha": "c9d8ea2a8292272f6944ce2d00dc459c7406dc5f", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -1347,7 +1347,8 @@ Func_expression::get_code_pointer(Gogo* gogo, Named_object* no, Location loc)\n   if (fntype->is_builtin())\n     {\n       go_error_at(loc,\n-\t\t  \"invalid use of special builtin function %qs; must be called\",\n+\t\t  (\"invalid use of special built-in function %qs; \"\n+\t\t   \"must be called\"),\n \t\t  no->message_name().c_str());\n       return gogo->backend()->error_expression();\n     }\n@@ -1386,7 +1387,7 @@ Func_expression::do_get_backend(Translate_context* context)\n \t  if (no->func_declaration_value()->type()->is_builtin())\n \t    {\n \t      go_error_at(this->location(),\n-\t\t\t  (\"invalid use of special builtin function %qs; \"\n+\t\t\t  (\"invalid use of special built-in function %qs; \"\n \t\t\t   \"must be called\"),\n \t\t\t  no->message_name().c_str());\n \t      return gogo->backend()->error_expression();\n@@ -8425,7 +8426,7 @@ Builtin_call_expression::lower_make(Statement_inserter* inserter)\n \n   if (!type->in_heap())\n     go_error_at(first_arg->location(),\n-\t\t\"can't make slice of go:notinheap type\");\n+\t\t\"cannot make slice of go:notinheap type\");\n \n   bool is_slice = false;\n   bool is_map = false;\n@@ -9804,7 +9805,7 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t  {\n \t    if (this->code_ == BUILTIN_PRINT)\n \t      go_warning_at(this->location(), 0,\n-\t\t\t \"no arguments for builtin function %<%s%>\",\n+\t\t\t \"no arguments for built-in function %<%s%>\",\n \t\t\t (this->code_ == BUILTIN_PRINT\n \t\t\t  ? \"print\"\n \t\t\t  : \"println\"));\n@@ -9946,7 +9947,7 @@ Builtin_call_expression::do_check_types(Gogo*)\n \tType* element_type = slice_type->array_type()->element_type();\n \tif (!element_type->in_heap())\n \t  go_error_at(args->front()->location(),\n-\t\t      \"can't append to slice of go:notinheap type\");\n+\t\t      \"cannot append to slice of go:notinheap type\");\n \tif (this->is_varargs())\n \t  {\n \t    if (!args->back()->type()->is_slice_type()\n@@ -14452,7 +14453,7 @@ void\n Allocation_expression::do_check_types(Gogo*)\n {\n   if (!this->type_->in_heap())\n-    go_error_at(this->location(), \"can't heap allocate go:notinheap type\");\n+    go_error_at(this->location(), \"cannot heap allocate go:notinheap type\");\n }\n \n // Make a copy of an allocation expression.\n@@ -19025,7 +19026,7 @@ Numeric_constant::check_int_type(Integer_type* type, bool issue_error,\n \t  if (issue_error)\n             {\n               go_error_at(location,\n-                          \"floating point constant truncated to integer\");\n+                          \"floating-point constant truncated to integer\");\n               this->set_invalid();\n             }\n \t  return false;\n@@ -19113,7 +19114,8 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n \t  if (issue_error)\n             {\n               this->set_invalid();\n-              go_error_at(location, \"complex constant truncated to float\");\n+              go_error_at(location,\n+\t\t\t  \"complex constant truncated to floating-point\");\n             }\n \t  return false;\n \t}\n@@ -19178,7 +19180,7 @@ Numeric_constant::check_float_type(Float_type* type, bool issue_error,\n \n   if (!ret && issue_error)\n     {\n-      go_error_at(location, \"floating point constant overflow\");\n+      go_error_at(location, \"floating-point constant overflow\");\n       this->set_invalid();\n     }\n "}, {"sha": "12205bd5aa726fbfcce2ebcf7f4d085c678135d4", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -92,7 +92,7 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n \t\t   p != linknames->end();\n \t\t   ++p)\n \t\tgo_error_at(p->second.loc,\n-\t\t\t    (\"//go:linkname only allowed in Go files that \"\n+\t\t\t    (\"%<//go:linkname%> only allowed in Go files that \"\n \t\t\t     \"import \\\"unsafe\\\"\"));\n \t    }\n \t  all_linknames.insert(linknames->begin(), linknames->end());"}, {"sha": "d190ec2f3f02e64a3bb38fb3fec5fc64e51793c8", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -552,7 +552,7 @@ Gogo::import_package(const std::string& filename,\n       if (package->pkgpath() == this->pkgpath())\n \tgo_error_at(location,\n \t\t    (\"imported package uses same package path as package \"\n-\t\t     \"being compiled (see -fgo-pkgpath option)\"));\n+\t\t     \"being compiled (see %<-fgo-pkgpath%> option)\"));\n \n       this->imports_.insert(std::make_pair(filename, package));\n     }\n@@ -2525,7 +2525,7 @@ Gogo::add_linkname(const std::string& go_name, bool is_exported,\n   else\n     go_error_at(loc,\n \t\t(\"%s is not a function; \"\n-\t\t \"//go:linkname is only supported for functions\"),\n+\t\t \"%<//go:linkname%> is only supported for functions\"),\n \t\tgo_name.c_str());\n }\n \n@@ -3693,7 +3693,7 @@ Check_types_traverse::variable(Named_object* named_object)\n           if (fntype->is_builtin())\n             {\n \t      go_error_at(init->location(),\n-\t\t\t  \"invalid use of special builtin function %qs; \"\n+\t\t\t  \"invalid use of special built-in function %qs; \"\n \t\t\t  \"must be called\",\n \t\t\t  no->message_name().c_str());\n             }\n@@ -8161,7 +8161,7 @@ Type_declaration::define_methods(Named_type* nt)\n \t       ++p)\n \t    go_error_at((*p)->location(),\n \t\t\t(\"invalid receiver type \"\n-\t\t\t \"(receiver must be a named type\"));\n+\t\t\t \"(receiver must be a named type)\"));\n \t  return;\n \t}\n     }"}, {"sha": "d5e26ce22a3711fa81f1a15ac56c647cb83b9c16", "filename": "gcc/go/gofrontend/import-archive.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fimport-archive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fimport-archive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport-archive.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -420,7 +420,7 @@ Archive_file::read_big_archive_header(off_t off, std::string* pname,\n       char* buf = new char[sizeof(hdr.ar_size) + 1];\n       memcpy(buf, hdr.ar_size, sizeof(hdr.ar_size));\n       go_error_at(this->location_,\n-                  (\"%s: malformed ar_size in entry header at %ld\"\n+                  (\"%s: malformed size in entry header at %ld\"\n                    \" (expected decimal, got %s)\"),\n                   this->filename_.c_str(), static_cast<long>(off), buf);\n       delete[] buf;\n@@ -434,7 +434,7 @@ Archive_file::read_big_archive_header(off_t off, std::string* pname,\n       char* buf = new char[sizeof(hdr.ar_namlen) + 1];\n       memcpy(buf, hdr.ar_namlen, sizeof(hdr.ar_namlen));\n       go_error_at(this->location_,\n-                  (\"%s: malformed ar_namlen in entry header at %ld\"\n+                  (\"%s: malformed name length in entry header at %ld\"\n                    \" (expected decimal, got %s)\"),\n                   this->filename_.c_str(), static_cast<long>(off), buf);\n       delete[] buf;\n@@ -460,7 +460,7 @@ Archive_file::read_big_archive_header(off_t off, std::string* pname,\n       char* buf = new char[sizeof(hdr.ar_nxtmem) + 1];\n       memcpy(buf, hdr.ar_nxtmem, sizeof(hdr.ar_nxtmem));\n       go_error_at(this->location_,\n-                  (\"%s: malformed ar_nxtmem in entry header at %ld\"\n+                  (\"%s: malformed next member offset in entry header at %ld\"\n                    \" (expected decimal, got %s)\"),\n                   this->filename_.c_str(), static_cast<long>(off), buf);\n       delete[] buf;\n@@ -655,7 +655,7 @@ Archive_file::get_file_and_offset(off_t off, const std::string& hdrname,\n \t  int nfd = open(filename.c_str(), O_RDONLY | O_BINARY);\n \t  if (nfd < 0)\n \t    {\n-\t      go_error_at(this->location_, \"%s: can't open nested archive %s\",\n+\t      go_error_at(this->location_, \"%s: cannot open nested archive %s\",\n \t\t\t  this->filename_.c_str(), filename.c_str());\n \t      return false;\n \t    }"}, {"sha": "abf0b540bd0be1cfb181abd64da5d92bf01b8974", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -925,7 +925,7 @@ Import::read_type()\n     {\n       if (!stream->saw_error())\n \tgo_error_at(this->location_,\n-\t\t    \"error in import data at %d: expected %< %> or %<>%>'\",\n+\t\t    \"error in import data at %d: expected %< %> or %<>%>\",\n \t\t    stream->pos());\n       stream->set_saw_error();\n       stream->advance(1);\n@@ -1126,7 +1126,7 @@ Import::type_for_index(int index, const std::string& input_name,\n       if (static_cast<size_t>(index) >= this->type_offsets_.size())\n \t{\n \t  go_error_at(this->location_,\n-\t\t      \"error in %s at %lu: bad type index %d >= %d\",\n+\t\t      \"error in %s at %lu: bad type index %d, max %d\",\n \t\t      input_name.c_str(),\n \t\t      static_cast<unsigned long>(input_offset),\n \t\t      index, static_cast<int>(this->type_offsets_.size()));"}, {"sha": "82fd35580c6cdd0f55cdac1ac5f7b637ab9baf79", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -1863,7 +1863,7 @@ Lex::skip_cpp_comment()\n \t    }\n \t}\n       if (go_name.empty() || ext_name.empty())\n-\tgo_error_at(loc, \"usage: //go:linkname localname linkname\");\n+\tgo_error_at(loc, \"usage: %<//go:linkname%> localname linkname\");\n       else\n \t{\n \t  if (this->linknames_ == NULL)"}, {"sha": "52371b2b032797b148e20078cbfc8f48b9a4c5b8", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -1359,7 +1359,7 @@ Parse::decl(void (Parse::*pfn)(void*, unsigned int), void* varg,\n     {\n       if (pragmas != 0)\n \tgo_warning_at(this->location(), 0,\n-\t\t      \"ignoring magic //go:... comment before group\");\n+\t\t      \"ignoring magic %<//go:...%> comment before group\");\n       if (!this->advance_token()->is_op(OPERATOR_RPAREN))\n \t{\n \t  this->list(pfn, varg, true);\n@@ -1605,7 +1605,7 @@ Parse::type_spec(void*, unsigned int pragmas)\n \t    }\n \t  if (pragmas != 0)\n \t    go_warning_at(location, 0,\n-\t\t\t  \"ignoring magic //go:... comment before type\");\n+\t\t\t  \"ignoring magic %<//go:...%> comment before type\");\n \t}\n       else\n \t{\n@@ -1633,7 +1633,7 @@ Parse::var_spec(void*, unsigned int pragmas)\n {\n   if (pragmas != 0)\n     go_warning_at(this->location(), 0,\n-\t\t  \"ignoring magic //go:... comment before var\");\n+\t\t  \"ignoring magic %<//go:...%> comment before var\");\n \n   // Get the variable names.\n   Typed_identifier_list til;\n@@ -2383,7 +2383,7 @@ Parse::function_decl(unsigned int pragmas)\n \t      if (pragma_check[i].decl_ok)\n \t\tcontinue;\n \t      go_warning_at(location, 0,\n-\t\t\t    (\"ignoring magic //go:%s comment \"\n+\t\t\t    (\"ignoring magic %<//go:%s%> comment \"\n \t\t\t     \"before declaration\"),\n \t\t\t    pragma_check[i].name);\n \t    }\n@@ -2392,7 +2392,7 @@ Parse::function_decl(unsigned int pragmas)\n \t      if (pragma_check[i].func_ok)\n \t\tcontinue;\n \t      go_warning_at(location, 0,\n-\t\t\t    (\"ignoring magic //go:%s comment \"\n+\t\t\t    (\"ignoring magic %<//go:%s%> comment \"\n \t\t\t     \"before function definition\"),\n \t\t\t    pragma_check[i].name);\n \t    }\n@@ -2401,7 +2401,7 @@ Parse::function_decl(unsigned int pragmas)\n \t      if (pragma_check[i].method_ok)\n \t\tcontinue;\n \t      go_warning_at(location, 0,\n-\t\t\t    (\"ignoring magic //go:%s comment \"\n+\t\t\t    (\"ignoring magic %<//go:%s%> comment \"\n \t\t\t     \"before method definition\"),\n \t\t\t    pragma_check[i].name);\n \t    }\n@@ -2602,7 +2602,7 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n \t      return Expression::make_sink(location);\n \t    else\n \t      {\n-\t\tgo_error_at(location, \"cannot use _ as value\");\n+\t\tgo_error_at(location, \"cannot use %<_%> as value\");\n \t\treturn Expression::make_error(location);\n \t      }\n \t  case Named_object::NAMED_OBJECT_FUNC:\n@@ -4178,7 +4178,7 @@ Parse::tuple_assignment(Expression_list* lhs, bool may_be_composite_lit,\n       if ((*pe)->is_error_expression())\n \treturn;\n       if (op != OPERATOR_EQ && (*pe)->is_sink_expression())\n-\tgo_error_at((*pe)->location(), \"cannot use _ as value\");\n+\tgo_error_at((*pe)->location(), \"cannot use %<_%> as value\");\n     }\n   for (Expression_list::const_iterator pe = vals->begin();\n        pe != vals->end();\n@@ -5721,7 +5721,7 @@ Parse::package_clause()\n \t  name = token->identifier();\n \t  if (name == \"_\")\n \t    {\n-\t      go_error_at(this->location(), \"invalid package name _\");\n+\t      go_error_at(this->location(), \"invalid package name %<_%>\");\n \t      name = Gogo::erroneous_name();\n \t    }\n \t  this->advance_token();\n@@ -5752,7 +5752,7 @@ Parse::import_spec(void*, unsigned int pragmas)\n {\n   if (pragmas != 0)\n     go_warning_at(this->location(), 0,\n-\t\t  \"ignoring magic //go:... comment before import\");\n+\t\t  \"ignoring magic %<//go:...%> comment before import\");\n \n   const Token* token = this->peek_token();\n   Location location = token->location();\n@@ -5876,7 +5876,7 @@ Parse::verify_not_sink(Expression* expr)\n {\n   if (expr->is_sink_expression())\n     {\n-      go_error_at(expr->location(), \"cannot use _ as value\");\n+      go_error_at(expr->location(), \"cannot use %<_%> as value\");\n       expr = Expression::make_error(expr->location());\n     }\n "}, {"sha": "c0955888b549375e5005fa3e28464f578518c1bd", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -2168,7 +2168,7 @@ Block_statement::do_import(Import_function_body* ifb, Location loc,\n     {\n       if (!ifb->saw_error())\n \tgo_error_at(ifb->location(),\n-\t\t    \"import error: no newline after { at %lu\",\n+\t\t    \"import error: no newline after %<{%> at %lu\",\n \t\t    static_cast<unsigned long>(ifb->off()));\n       ifb->set_saw_error();\n       return NULL;"}, {"sha": "86865a8a12238a0e30f23dea57cd6e33cc435089", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -1,3 +1,7 @@\n+2019-06-23  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/test/blank1.go: Update for diagnostic message changes.\n+\n 2019-06-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.target/powerpc/builtins-2.c: Require VSX hardware support."}, {"sha": "b60f9e179c46880b27a705dea997d5ead2c42082", "filename": "gcc/testsuite/go.test/test/blank1.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587bd42530cee75da83979b18bb170302c915034/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587bd42530cee75da83979b18bb170302c915034/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go?ref=587bd42530cee75da83979b18bb170302c915034", "patch": "@@ -7,7 +7,7 @@\n // Test that incorrect uses of the blank identifer are caught.\n // Does not compile.\n \n-package _\t// ERROR \"invalid package name _\"\n+package _\t// ERROR \"invalid package name\"\n \n var t struct {\n \t_ int\n@@ -18,8 +18,8 @@ type T struct {\n }\n \n func main() {\n-\t_()\t// ERROR \"cannot use _ as value\"\n-\tx := _+1\t// ERROR \"cannot use _ as value\"\n+\t_()\t// ERROR \"cannot use .* as value\"\n+\tx := _+1\t// ERROR \"cannot use .* as value\"\n \t_ = x\n \t_ = t._ // ERROR \"cannot refer to blank field|invalid use of\"\n "}]}