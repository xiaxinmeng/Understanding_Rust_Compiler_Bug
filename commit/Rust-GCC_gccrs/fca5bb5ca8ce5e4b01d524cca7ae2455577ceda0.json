{"sha": "fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhNWJiNWNhOGNlNWU0YjAxZDUyNGNjYTdhZTI0NTU1NzdjZWRhMA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2009-06-18T19:48:35Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2009-06-18T19:48:35Z"}, "message": "plugins.texi: Document plugin_is_GPL_compatible.\n\n\n\t* doc/plugins.texi: Document plugin_is_GPL_compatible.\n\t* plugin.c (str_license): Declare.\n\t(try_init_one_plugin): Assert that the symbol\n\t'plugin_is_GPL_compatible' exists.\n\ntestsuite/ChangeLog\n\n\t* gcc.dg/plugin/selfassign.c: Declare plugin_is_GPL_compatible.\n\t* gcc.dg/plugin/ggcplug.c: Likewise.\n\t* gcc.dg/plugin/one_time_plugin.c: Likewise.\n\t* g++.dg/plugin/selfassign.c: Likewise.\n\t* g++.dg/plugin/attribute_plugin.c: Likewise.\n\t* g++.dg/plugin/dumb_plugin.c: Likewise.\n\nFrom-SVN: r148667", "tree": {"sha": "79b33d246f25f2bed1420ec88101b2b444ad38fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79b33d246f25f2bed1420ec88101b2b444ad38fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3600f67820b56b1083b1b5719e2be55b5bc8b775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3600f67820b56b1083b1b5719e2be55b5bc8b775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3600f67820b56b1083b1b5719e2be55b5bc8b775"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "af653560fa4845e2ec4e8f624adbbf183f7d37e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -1,3 +1,10 @@\n+2009-06-18  Diego Novillo  <dnovillo@google.com>\n+\n+\t* doc/plugins.texi: Document plugin_is_GPL_compatible.\n+\t* plugin.c (str_license): Declare.\n+\t(try_init_one_plugin): Assert that the symbol\n+\t'plugin_is_GPL_compatible' exists.\n+\n 2009-06-18  Sergei Dyshel  <sergeid@il.ibm.com>\n \n \t* see.c: Remove."}, {"sha": "791e04b7412aae55a35933af5c52be93e28e3315", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -32,6 +32,26 @@ address of the callback function that will handle that event.\n \n The header @file{gcc-plugin.h} must be the first gcc header to be included.\n \n+@subsection Plugin license check\n+\n+Every plugin should define the global symbol @code{plugin_is_GPL_compatible}\n+to assert that it has been licensed under a GPL-compatible license.\n+If this symbol does not exist, the compiler will emit a fatal error\n+and exit with the error message:\n+\n+@smallexample\n+fatal error: plugin <name> is not licensed under a GPL-compatible license\n+<name>: undefined symbol: plugin_is_GPL_compatible\n+compilation terminated\n+@end smallexample\n+\n+The type of the symbol is irrelevant.  The compiler merely asserts that\n+it exists in the global scope.  Something like this is enough:\n+\n+@smallexample\n+int plugin_is_GPL_compatible;\n+@end smallexample\n+\n @subsection Plugin initialization\n \n Every plugin should export a function called @code{plugin_init} that"}, {"sha": "396850a3a970150f268a333a6b460d6bb2911063", "filename": "gcc/plugin.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* If plugin support is not enabled, do not try to execute any code\n    that may reference libdl.  The generic code is still compiled in to\n-   avoid including to many conditional compilation paths in the rest\n+   avoid including too many conditional compilation paths in the rest\n    of the compiler.  */\n #ifdef ENABLE_PLUGIN\n #include <dlfcn.h>\n@@ -95,6 +95,10 @@ static struct pass_list_node *prev_added_pass_node;\n /* Each plugin should define an initialization function with exactly\n    this name.  */\n static const char *str_plugin_init_func_name = \"plugin_init\";\n+\n+/* Each plugin should define this symbol to assert that it is\n+   distributed under a GPL-compatible license.  */\n+static const char *str_license = \"plugin_is_GPL_compatible\";\n #endif\n \n /* Helper function for the hash table that compares the base_name of the\n@@ -595,6 +599,11 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n   /* Clear any existing error.  */\n   dlerror ();\n \n+  /* Check the plugin license.  */\n+  if (dlsym (dl_handle, str_license) == NULL)\n+    fatal_error (\"plugin %s is not licensed under a GPL-compatible license\\n\"\n+\t\t \"%s\", plugin->full_name, dlerror ());\n+\n   PTR_UNION_AS_VOID_PTR (plugin_init_union) =\n       dlsym (dl_handle, str_plugin_init_func_name);\n   plugin_init = PTR_UNION_AS_CAST_PTR (plugin_init_union);"}, {"sha": "b6a6fe142b824b9a8a6a7a8616419ef8f4b2a8b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -1,3 +1,12 @@\n+2009-06-18  Diego Novillo  <dnovillo@google.com>\n+\n+\t* gcc.dg/plugin/selfassign.c: Declare plugin_is_GPL_compatible.\n+\t* gcc.dg/plugin/ggcplug.c: Likewise.\n+\t* gcc.dg/plugin/one_time_plugin.c: Likewise.\n+\t* g++.dg/plugin/selfassign.c: Likewise.\n+\t* g++.dg/plugin/attribute_plugin.c: Likewise.\n+\t* g++.dg/plugin/dumb_plugin.c: Likewise.\n+\n 2009-06-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc.dg/cpp/arith-3.c: Add column info."}, {"sha": "deaebf1b16d5bdc6b4c7f271c1c5bc2edc027d8b", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -9,6 +9,8 @@\n #include \"tree-pass.h\"\n #include \"intl.h\"\n \n+int plugin_is_GPL_compatible;\n+\n /* Attribute handler callback */\n \n static tree"}, {"sha": "18f42c09dcbee6488c8e670b8906f0629c5eb358", "filename": "gcc/testsuite/g++.dg/plugin/dumb_plugin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -10,6 +10,7 @@\n #include \"tree-pass.h\"\n #include \"intl.h\"\n \n+int plugin_is_GPL_compatible;\n \n /* Callback function to invoke after GCC finishes parsing a struct.  */\n "}, {"sha": "75b6161b31d2ed3e259ed8b01b2745fa3d7a7bdc", "filename": "gcc/testsuite/g++.dg/plugin/selfassign.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -14,6 +14,7 @@\n #include \"tree-pass.h\"\n #include \"intl.h\"\n \n+int plugin_is_GPL_compatible;\n \n /* Indicate whether to check overloaded operator '=', which is performed by\n    default. To disable it, use -fplugin-arg-NAME-no-check-operator-eq.  */"}, {"sha": "49b5c95e4e99f7b9075080fbea8396857e717368", "filename": "gcc/testsuite/gcc.dg/plugin/ggcplug.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fggcplug.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -13,7 +13,7 @@\n #include \"intl.h\"\n #include \"gcc-plugin.h\"\n \n-\n+int plugin_is_GPL_compatible;\n \n /* our callback is the same for all PLUGIN_GGC_START,\n    PLUGIN_GGC_MARKING, PLUGIN_GGC_END events; it just increments the"}, {"sha": "635776fc5bc9584af539396234262eb0b4587499", "filename": "gcc/testsuite/gcc.dg/plugin/one_time_plugin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fone_time_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fone_time_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fone_time_plugin.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -9,6 +9,8 @@\n #include \"tree-pass.h\"\n #include \"intl.h\"\n \n+int plugin_is_GPL_compatible;\n+\n static bool one_pass_gate (void)\n {\n   return true;"}, {"sha": "52a03bfef3ccf0d3028e40dbbe51e91a6bfc079b", "filename": "gcc/testsuite/gcc.dg/plugin/selfassign.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c?ref=fca5bb5ca8ce5e4b01d524cca7ae2455577ceda0", "patch": "@@ -15,6 +15,8 @@\n #include \"intl.h\"\n \n \n+int plugin_is_GPL_compatible;\n+\n /* Indicate whether to check overloaded operator '=', which is performed by\n    default. To disable it, use -fplugin-arg-NAME-no-check-operator-eq.  */\n bool check_operator_eq = true;"}]}