{"sha": "162f023b98434f2bd92820133b808d8fee3df5e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyZjAyM2I5ODQzNGYyYmQ5MjgyMDEzM2I4MDhkOGZlZTNkZjVlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-02-07T11:18:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-02-07T11:18:32Z"}, "message": "i386-protos.h (x86_order_regs_for_local_alloc): Declare\n\n\t* i386-protos.h (x86_order_regs_for_local_alloc): Declare\n\t* i386.c (x86_order_regs_for_local_alloc): New global function.\n\t* i386.h (REG_ALLOC_ORDER): CLeanup.\n\t(ORDER_REGS_FOR_LOCAL_ALLOC): New.\n\nFrom-SVN: r49574", "tree": {"sha": "cadeaae83c8f6e5a757c9f73fc245dc908c74d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cadeaae83c8f6e5a757c9f73fc245dc908c74d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162f023b98434f2bd92820133b808d8fee3df5e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162f023b98434f2bd92820133b808d8fee3df5e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162f023b98434f2bd92820133b808d8fee3df5e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162f023b98434f2bd92820133b808d8fee3df5e3/comments", "author": null, "committer": null, "parents": [{"sha": "3f9796f922e2547a44c0d3d997620ec3c6cb9c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f9796f922e2547a44c0d3d997620ec3c6cb9c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f9796f922e2547a44c0d3d997620ec3c6cb9c9d"}], "stats": {"total": 91, "additions": 63, "deletions": 28}, "files": [{"sha": "59d48ac4936dc8c97f104930c95c6300c9ac454e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=162f023b98434f2bd92820133b808d8fee3df5e3", "patch": "@@ -1,3 +1,10 @@\n+Thu Feb  7 12:14:17 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386-protos.h (x86_order_regs_for_local_alloc): Declare\n+\t* i386.c (x86_order_regs_for_local_alloc): New global function.\n+\t* i386.h (REG_ALLOC_ORDER): CLeanup.\n+\t(ORDER_REGS_FOR_LOCAL_ALLOC): New.\n+\n 2002-02-07  Richard Henderson  <rth@redhat.com>\n \n \t* alias.c (find_base_value): Recall base values for fixed hard regs."}, {"sha": "8321d478ec017dddfc1abe9995e8e215722282f1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=162f023b98434f2bd92820133b808d8fee3df5e3", "patch": "@@ -169,6 +169,7 @@ extern int ix86_memory_move_cost PARAMS ((enum machine_mode, enum reg_class,\n extern void ix86_set_move_mem_attrs PARAMS ((rtx, rtx, rtx, rtx, rtx));\n extern void emit_i387_cw_initialization PARAMS ((rtx, rtx));\n extern bool ix86_fp_jump_nontrivial_p PARAMS ((enum rtx_code));\n+extern void x86_order_regs_for_local_alloc PARAMS ((void));\n \n \n #ifdef TREE_CODE"}, {"sha": "159ac165ac75f1367c9ddffd5128f3a3192d6a1e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=162f023b98434f2bd92820133b808d8fee3df5e3", "patch": "@@ -12312,3 +12312,47 @@ ix86_svr3_asm_out_constructor (symbol, priority)\n   fputc ('\\n', asm_out_file);\n }\n #endif\n+\n+/* Order the registers for register allocator.  */\n+\n+void\n+x86_order_regs_for_local_alloc ()\n+{\n+   int pos = 0;\n+   int i;\n+\n+   /* First allocate the local general purpose registers.  */\n+   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+     if (GENERAL_REGNO_P (i) && call_used_regs[i])\n+\treg_alloc_order [pos++] = i;\n+\n+   /* Global general purpose registers.  */\n+   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+     if (GENERAL_REGNO_P (i) && !call_used_regs[i])\n+\treg_alloc_order [pos++] = i;\n+\n+   /* x87 registers come first in case we are doing FP math\n+      using them.  */\n+   if (!TARGET_SSE_MATH)\n+     for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n+       reg_alloc_order [pos++] = i;\n+   \n+   /* SSE registers.  */\n+   for (i = FIRST_SSE_REG; i <= LAST_SSE_REG; i++)\n+     reg_alloc_order [pos++] = i;\n+   for (i = FIRST_REX_SSE_REG; i <= LAST_REX_SSE_REG; i++)\n+     reg_alloc_order [pos++] = i;\n+\n+   /* x87 registerts.  */\n+   if (TARGET_SSE_MATH)\n+     for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n+       reg_alloc_order [pos++] = i;\n+\n+   for (i = FIRST_MMX_REG; i <= LAST_MMX_REG; i++)\n+     reg_alloc_order [pos++] = i;\n+\n+   /* Initialize the rest of array as we do not allocate some registers\n+      at all.  */\n+   while (pos < FIRST_PSEUDO_REGISTER)\n+     reg_alloc_order [pos++] = 0;\n+}"}, {"sha": "e5a04ec93475153d9ababe367c71260bfb58ae1b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162f023b98434f2bd92820133b808d8fee3df5e3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=162f023b98434f2bd92820133b808d8fee3df5e3", "patch": "@@ -926,38 +926,21 @@ extern int ix86_arch;\n    registers listed in CALL_USED_REGISTERS, keeping the others\n    available for storage of persistent values.\n \n-   Three different versions of REG_ALLOC_ORDER have been tried:\n+   The ORDER_REGS_FOR_LOCAL_ALLOC actually overwrite the order,\n+   so this is just empty initializer for array.  */\n \n-   If the order is edx, ecx, eax, ... it produces a slightly faster compiler,\n-   but slower code on simple functions returning values in eax.\n+#define REG_ALLOC_ORDER \t\t\t\t\t\\\n+{  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\\\n+   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\t\\\n+   33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \\\n+   48, 49, 50, 51, 52 }\n \n-   If the order is eax, ecx, edx, ... it causes reload to abort when compiling\n-   perl 4.036 due to not being able to create a DImode register (to hold a 2\n-   word union).\n+/* ORDER_REGS_FOR_LOCAL_ALLOC is a macro which permits reg_alloc_order\n+   to be rearranged based on a particular function.  When using sse math,\n+   we want to allocase SSE before x87 registers and vice vera.  */\n \n-   If the order is eax, edx, ecx, ... it produces better code for simple\n-   functions, and a slightly slower compiler.  Users complained about the code\n-   generated by allocating edx first, so restore the 'natural' order of things.  */\n+#define ORDER_REGS_FOR_LOCAL_ALLOC x86_order_regs_for_local_alloc ()\n \n-#define REG_ALLOC_ORDER \t\t\t\t\t\\\n-/*ax,dx,cx,*/\t\t\t\t\t\t\t\\\n-{  0, 1, 2,\t\t\t\t\t\t\t\\\n-/* bx,si,di,bp,sp,*/\t\t\t\t\t\t\\\n-   3, 4, 5, 6, 7,\t\t\t\t\t\t\\\n-/*r8,r9,r10,r11,*/\t\t\t\t\t\t\\\n-  37,38, 39, 40,\t\t\t\t\t\t\\\n-/*r12,r15,r14,r13*/\t\t\t\t\t\t\\\n-  41, 44, 43, 42,\t\t\t\t\t\t\\\n-/*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n-    21,  22,  23,  24,  25,  26,  27,  28,\t\t\t\\\n-/*xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14,xmm15*/\t\t\\\n-    45,  46,   47,   48,   49,   50,   51,   52,\t\t\\\n-/*st,st1,st2,st3,st4,st5,st6,st7*/\t\t\t\t\\\n-   8,  9, 10, 11, 12, 13, 14, 15,\t\t\t\t\\\n-/*,arg,cc,fpsr,dir,frame*/\t\t\t\t\t\\\n-     16,17, 18, 19,   20,\t\t\t\t\t\\\n-/*mmx0,mmx1,mmx2,mmx3,mmx4,mmx5,mmx6,mmx7*/\t\t\t\\\n-    29,  30,  31,  32,  33,  34,  35,  36 }\n \n /* Macro to conditionally modify fixed_regs/call_used_regs.  */\n #define CONDITIONAL_REGISTER_USAGE\t\t\t\t\t\\"}]}