{"sha": "ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3ODc4MjI2YWE1OGNmOTkxYmNmM2I2MWM0M2I0ZTg5ZTRmNWEwNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-28T19:35:26Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-28T19:35:26Z"}, "message": "re PR c/16409 (ICE in size_binop, at fold-const.c)\n\n\tPR c/16409\n\t* c-decl.c (start_decl): Check for initializing incomplete array\n\tof VLAs.\n\t(build_compound_literal): Check for TYPE being error_mark_node.\n\t* c-parse.in (primary): Check for VLA compound literals.\n\ntestsuite:\n\t* gcc.dg/vla-init-2.c, gcc.dg/vla-init-3.c, gcc.dg/vla-init-4.c,\n\tgcc.dg/vla-init-5.c: New tests.\n\nFrom-SVN: r88248", "tree": {"sha": "5fc1cb98a75ae0a4738fa2fd992b53aee46095a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fc1cb98a75ae0a4738fa2fd992b53aee46095a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346c5b01de84d0ca4eebd2934a6e95648919c76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346c5b01de84d0ca4eebd2934a6e95648919c76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346c5b01de84d0ca4eebd2934a6e95648919c76f"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "2847a266704a92524bde3d2756791daf0c467bf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -1,3 +1,11 @@\n+2004-09-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/16409\n+\t* c-decl.c (start_decl): Check for initializing incomplete array\n+\tof VLAs.\n+\t(build_compound_literal): Check for TYPE being error_mark_node.\n+\t* c-parse.in (primary): Check for VLA compound literals.\n+\n 2004-09-28  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-live.c (calculate_live_on_entry): Fix warnings"}, {"sha": "413787633dcbe31e200cc5bcc7bdcd2153999323", "filename": "gcc/c-decl.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -2986,6 +2986,15 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t    error (\"elements of array %qD have incomplete type\", decl);\n \t    initialized = 0;\n \t  }\n+\telse if (C_DECL_VARIABLE_SIZE (decl))\n+\t  {\n+\t    /* Although C99 is unclear about whether incomplete arrays\n+\t       of VLAs themselves count as VLAs, it does not make\n+\t       sense to permit them to be initialized given that\n+\t       ordinary VLAs may not be initialized.  */\n+\t    error (\"variable-sized object may not be initialized\");\n+\t    initialized = 0;\n+\t  }\n       }\n \n   if (initialized)\n@@ -3416,9 +3425,14 @@ build_compound_literal (tree type, tree init)\n   /* We do not use start_decl here because we have a type, not a declarator;\n      and do not use finish_decl because the decl should be stored inside\n      the COMPOUND_LITERAL_EXPR rather than added elsewhere as a DECL_EXPR.  */\n-  tree decl = build_decl (VAR_DECL, NULL_TREE, type);\n+  tree decl;\n   tree complit;\n   tree stmt;\n+\n+  if (type == error_mark_node)\n+    return error_mark_node;\n+\n+  decl = build_decl (VAR_DECL, NULL_TREE, type);\n   DECL_EXTERNAL (decl) = 0;\n   TREE_PUBLIC (decl) = 0;\n   TREE_STATIC (decl) = (current_scope == file_scope);"}, {"sha": "87dfc1007487f51ff15fd7b387cb346fb77bfc9b", "filename": "gcc/c-parse.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -677,6 +677,11 @@ primary:\n \t| '(' typename ')' '{'\n \t\t{ start_init (NULL_TREE, NULL, 0);\n \t\t  $<ttype>$ = groktypename ($2);\n+\t\t  if (C_TYPE_VARIABLE_SIZE ($<ttype>$))\n+\t\t    {\n+\t\t      error (\"compound literal has variable size\");\n+\t\t      $<ttype>$ = error_mark_node;\n+\t\t    }\n \t\t  really_start_incremental_init ($<ttype>$); }\n \t  initlist_maybe_comma '}'  %prec UNARY\n \t\t{ struct c_expr init = pop_init_level (0);"}, {"sha": "1b59e73d1ac48152a3579612d9cfd876de4e26b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -1,3 +1,9 @@\n+2004-09-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/16409\n+\t* gcc.dg/vla-init-2.c, gcc.dg/vla-init-3.c, gcc.dg/vla-init-4.c,\n+\tgcc.dg/vla-init-5.c: New tests.\n+\n 2004-09-27  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/13804"}, {"sha": "395ddeb16073c07120881e46792aed70a0a0d064", "filename": "gcc/testsuite/gcc.dg/vla-init-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-2.c?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -0,0 +1,10 @@\n+/* Arrays of unknown size with element type a VLA type should not be\n+   initialized (C99 isn't clear about whether such arrays are VLAs,\n+   but this is the only reasonable interpretation).  Bug 16409, first\n+   testcase.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+const int i = 1;\n+void foo() { char a[][i] = {\"\"}; } /* { dg-error \"error: variable-sized object may not be initialized\" } */\n+/* { dg-error \"array size missing in 'a'\" \"extra error\" { target *-*-* } 9 } */"}, {"sha": "72bfe2095fdbc82edc063eb77da083feb4c213d8", "filename": "gcc/testsuite/gcc.dg/vla-init-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-3.c?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -0,0 +1,9 @@\n+/* Arrays of unknown size with element type a VLA type should not be\n+   initialized (C99 isn't clear about whether such arrays are VLAs,\n+   but this is the only reasonable interpretation).  Bug 16409, second\n+   testcase.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void foo(int i) { char a[][i] = {\"\"}; } /* { dg-error \"error: variable-sized object may not be initialized\" } */\n+/* { dg-error \"array size missing in 'a'\" \"extra error\" { target *-*-* } 8 } */"}, {"sha": "0f0e332377dd261c6c9cce6a1f86834d878b9b3e", "filename": "gcc/testsuite/gcc.dg/vla-init-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-4.c?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -0,0 +1,7 @@\n+/* Test for ICE on VLA compound literal.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+const int i = 1;\n+void foo() { char *p = (char [i]){ \"\" }; } /* { dg-error \"error: compound literal has variable size\" } */"}, {"sha": "b1455dbd3a0d53406992dde6a673dbc82203286a", "filename": "gcc/testsuite/gcc.dg/vla-init-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7878226aa58cf991bcf3b61c43b4e89e4f5a06/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-5.c?ref=ef7878226aa58cf991bcf3b61c43b4e89e4f5a06", "patch": "@@ -0,0 +1,7 @@\n+/* Test for ICE on incomplete-array-of-VLA compound literal.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+const int i = 1;\n+void foo() { void *p = (char [][i]){ \"\" }; } /* { dg-error \"error: compound literal has variable size\" } */"}]}