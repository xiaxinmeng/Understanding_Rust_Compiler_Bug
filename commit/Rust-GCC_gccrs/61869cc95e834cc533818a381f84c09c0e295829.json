{"sha": "61869cc95e834cc533818a381f84c09c0e295829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4NjljYzk1ZTgzNGNjNTMzODE4YTM4MWY4NGMwOWMwZTI5NTgyOQ==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2010-07-29T06:02:34Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-07-29T06:02:34Z"}, "message": "tree-vect-loop.c (vect_create_epilog_for_reduction): Switch to outer loop when creating reduction epilogue for double reduction...\n\n\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Switch\n\tto outer loop when creating reduction epilogue for double reduction,\n\tand switch back to the inner loop when updating the phi nodes.\n\tUpdate uses of outer loop exit phi nodes in double reduction (instead\n\tof uses of reduction).\n\nFrom-SVN: r162668", "tree": {"sha": "fd3d8bf807450dcaaa090d3e62e0ed6a8894d0f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd3d8bf807450dcaaa090d3e62e0ed6a8894d0f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61869cc95e834cc533818a381f84c09c0e295829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61869cc95e834cc533818a381f84c09c0e295829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61869cc95e834cc533818a381f84c09c0e295829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61869cc95e834cc533818a381f84c09c0e295829/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01b9977477971a04c95488e489999bc3d4b43bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9977477971a04c95488e489999bc3d4b43bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b9977477971a04c95488e489999bc3d4b43bb3"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "ffbe8b214a5562c348d91654248c6cb9f0fc007c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61869cc95e834cc533818a381f84c09c0e295829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61869cc95e834cc533818a381f84c09c0e295829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61869cc95e834cc533818a381f84c09c0e295829", "patch": "@@ -1,3 +1,11 @@\n+2010-07-29  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Switch\n+\tto outer loop when creating reduction epilogue for double reduction, \n+\tand switch back to the inner loop when updating the phi nodes.\n+\tUpdate uses of outer loop exit phi nodes in double reduction (instead\n+\tof uses of reduction).\n+\n 2010-07-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_rtx_costs): Update costs for"}, {"sha": "fcd4081c4104cac2e5ebf23ddb4c12732a23708d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61869cc95e834cc533818a381f84c09c0e295829/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61869cc95e834cc533818a381f84c09c0e295829/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=61869cc95e834cc533818a381f84c09c0e295829", "patch": "@@ -3101,8 +3101,8 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n   tree vec_initial_def = NULL;\n   tree reduction_op, expr, def;\n   tree orig_name, scalar_result;\n-  imm_use_iterator imm_iter;\n-  use_operand_p use_p;\n+  imm_use_iterator imm_iter, phi_imm_iter;\n+  use_operand_p use_p, phi_use_p;\n   bool extract_scalar_result = false;\n   gimple use_stmt, orig_stmt, reduction_phi = NULL;\n   bool nested_in_vect_loop = false;\n@@ -3264,6 +3264,14 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n         }\n     }\n \n+  /* The epilogue is created for the outer-loop, i.e., for the loop being\n+     vectorized.  */\n+  if (double_reduc)\n+    {\n+      loop = outer_loop;\n+      exit_bb = single_exit (loop)->dest;\n+    }\n+\n   exit_gsi = gsi_after_labels (exit_bb);\n \n   /* 2.2 Get the relevant tree-code to use in the epilog for schemes 2,3\n@@ -3519,6 +3527,9 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n   \n vect_finalize_reduction:\n \n+  if (double_reduc)\n+    loop = loop->inner;\n+\n   /* 2.5 Adjust the final result by the initial value of the reduction\n \t variable. (When such adjustment is not needed, then\n \t 'adjustment_def' is zero).  For example, if code is PLUS we create:\n@@ -3738,7 +3749,45 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n                     }\n                 }\n             }\n+        }\n+\n+      VEC_free (gimple, heap, phis);\n+      if (nested_in_vect_loop)\n+        {\n+          if (double_reduc)\n+            loop = outer_loop;\n+          else\n+            continue;\n+        }\n+\n+      phis = VEC_alloc (gimple, heap, 3);\n+      /* Find the loop-closed-use at the loop exit of the original scalar\n+         result. (The reduction result is expected to have two immediate uses -\n+         one at the latch block, and one at the loop exit). For double \n+         reductions we are looking for exit phis of the outer loop.  */\n+      FOR_EACH_IMM_USE_FAST (use_p, imm_iter, scalar_dest)\n+        {\n+          if (!flow_bb_inside_loop_p (loop, gimple_bb (USE_STMT (use_p))))\n+            VEC_safe_push (gimple, heap, phis, USE_STMT (use_p));\n+          else\n+            {\n+              if (double_reduc && gimple_code (USE_STMT (use_p)) == GIMPLE_PHI)\n+                {\n+                  tree phi_res = PHI_RESULT (USE_STMT (use_p));\n+\n+                  FOR_EACH_IMM_USE_FAST (phi_use_p, phi_imm_iter, phi_res)\n+                    {\n+                      if (!flow_bb_inside_loop_p (loop,\n+                                             gimple_bb (USE_STMT (phi_use_p))))\n+                        VEC_safe_push (gimple, heap, phis,\n+                                       USE_STMT (phi_use_p));\n+                    }\n+                }\n+            }\n+        }\n \n+      for (i = 0; VEC_iterate (gimple, phis, i, exit_phi); i++)\n+        {\n           /* Replace the uses:  */\n           orig_name = PHI_RESULT (exit_phi);\n           scalar_result = VEC_index (tree, scalar_results, k);"}]}