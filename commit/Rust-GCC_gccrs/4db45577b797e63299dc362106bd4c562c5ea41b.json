{"sha": "4db45577b797e63299dc362106bd4c562c5ea41b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiNDU1NzdiNzk3ZTYzMjk5ZGMzNjIxMDZiZDRjNTYyYzVlYTQxYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-10-18T14:35:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-10-18T14:35:33Z"}, "message": "parser.c (cp_parser_lookup_name): Tidy.\n\n2013-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* parser.c (cp_parser_lookup_name): Tidy.\n\nFrom-SVN: r203822", "tree": {"sha": "146ebe74e8657e73f6e6a2f07abfdf9020796f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146ebe74e8657e73f6e6a2f07abfdf9020796f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db45577b797e63299dc362106bd4c562c5ea41b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db45577b797e63299dc362106bd4c562c5ea41b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db45577b797e63299dc362106bd4c562c5ea41b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db45577b797e63299dc362106bd4c562c5ea41b/comments", "author": null, "committer": null, "parents": [{"sha": "134e622524d87ff9b52d6a51c5e58259cff25976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134e622524d87ff9b52d6a51c5e58259cff25976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134e622524d87ff9b52d6a51c5e58259cff25976"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "2ef2978e1fa2d8ef3bc130b79ed44b517b8a8d81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db45577b797e63299dc362106bd4c562c5ea41b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db45577b797e63299dc362106bd4c562c5ea41b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4db45577b797e63299dc362106bd4c562c5ea41b", "patch": "@@ -1,3 +1,7 @@\n+2013-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* parser.c (cp_parser_lookup_name): Tidy.\n+\n 2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* parser.c: Include omp-low.h."}, {"sha": "10a7b962d050db0a271ee45f9eccd7f41704e22d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db45577b797e63299dc362106bd4c562c5ea41b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db45577b797e63299dc362106bd4c562c5ea41b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4db45577b797e63299dc362106bd4c562c5ea41b", "patch": "@@ -21882,27 +21882,28 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n     }\n   else if (object_type)\n     {\n-      tree object_decl = NULL_TREE;\n       /* Look up the name in the scope of the OBJECT_TYPE, unless the\n \t OBJECT_TYPE is not a class.  */\n       if (CLASS_TYPE_P (object_type))\n \t/* If the OBJECT_TYPE is a template specialization, it may\n \t   be instantiated during name lookup.  In that case, errors\n \t   may be issued.  Even if we rollback the current tentative\n \t   parse, those errors are valid.  */\n-\tobject_decl = lookup_member (object_type,\n-\t\t\t\t     name,\n-\t\t\t\t     /*protect=*/0,\n-\t\t\t\t     tag_type != none_type,\n-\t\t\t\t     tf_warning_or_error);\n-      /* Look it up in the enclosing context, too.  */\n-      decl = lookup_name_real (name, tag_type != none_type,\n-\t\t\t       /*nonclass=*/0,\n-\t\t\t       /*block_p=*/true, is_namespace, 0);\n+\tdecl = lookup_member (object_type,\n+\t\t\t      name,\n+\t\t\t      /*protect=*/0,\n+\t\t\t      tag_type != none_type,\n+\t\t\t      tf_warning_or_error);\n+      else\n+\tdecl = NULL_TREE;\n+\n+      if (!decl)\n+\t/* Look it up in the enclosing context.  */\n+\tdecl = lookup_name_real (name, tag_type != none_type,\n+\t\t\t\t /*nonclass=*/0,\n+\t\t\t\t /*block_p=*/true, is_namespace, 0);\n       parser->object_scope = object_type;\n       parser->qualifying_scope = NULL_TREE;\n-      if (object_decl)\n-\tdecl = object_decl;\n     }\n   else\n     {"}]}