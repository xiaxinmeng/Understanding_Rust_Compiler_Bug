{"sha": "a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3NGM3YjhiODAyOGM1ZDdlNTJkZDM4NzgzZThlMmIwMjAzNGI2Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-17T14:18:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-18T13:12:06Z"}, "message": "analyzer: fix ICE on pointer arithmetic with incomplete types [PR 93774]\n\nPR analyzer/93774 reports an ICE in gfortran with -fanalyzer within\nregion_model::convert_byte_offset_to_array_index on a pointer of\nincomplete type (\"character(kind=1)[0:][1:0] * restrict\").\n\nThis patch bulletproofs the routine against incomplete types, fixing\nthe ICE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93774\n\t* region-model.cc\n\t(region_model::convert_byte_offset_to_array_index): Use\n\tint_size_in_bytes before calling size_in_bytes, to gracefully fail\n\ton incomplete types.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93774\n\t* gfortran.dg/analyzer/deferred_character_25.f90: New test,\n\tbased on gfortran.dg/deferred_character_25.f90.", "tree": {"sha": "c5aaa4e81dd37da06b6b6a74c77efa2ea63b502e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5aaa4e81dd37da06b6b6a74c77efa2ea63b502e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f9c41d54a7839e90d10e1400c8726c8ccde88d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f9c41d54a7839e90d10e1400c8726c8ccde88d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f9c41d54a7839e90d10e1400c8726c8ccde88d"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "9e57209a742e8f95d3db7045ede208acc41c9bf1", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "patch": "@@ -1,3 +1,11 @@\n+2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93774\n+\t* region-model.cc\n+\t(region_model::convert_byte_offset_to_array_index): Use\n+\tint_size_in_bytes before calling size_in_bytes, to gracefully fail\n+\ton incomplete types.\n+\n 2020-02-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93775"}, {"sha": "659255a8db45d7de6d45c201a75f9c8b94b99511", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "patch": "@@ -6514,24 +6514,27 @@ region_model::convert_byte_offset_to_array_index (tree ptr_type,\n \n       /* Arithmetic on void-pointers is a GNU C extension, treating the size\n \t of a void as 1.\n-\t https://gcc.gnu.org/onlinedocs/gcc/Pointer-Arith.html\n-\n-\t Returning early for this case avoids a diagnostic from within the\n-\t call to size_in_bytes.  */\n+\t https://gcc.gnu.org/onlinedocs/gcc/Pointer-Arith.html  */\n       if (TREE_CODE (elem_type) == VOID_TYPE)\n \treturn offset_sid;\n \n-      /* This might not be a constant.  */\n-      tree byte_size = size_in_bytes (elem_type);\n-\n-      /* Try to get a constant by dividing, ensuring that we're in a\n-\t signed representation first.  */\n-      tree index\n-\t= fold_binary (TRUNC_DIV_EXPR, ssizetype,\n-\t\t       fold_convert (ssizetype, offset_cst),\n-\t\t       fold_convert (ssizetype, byte_size));\n-      if (index && TREE_CODE (index) == INTEGER_CST)\n-\treturn get_or_create_constant_svalue (index);\n+      /* First, use int_size_in_bytes, to reject the case where we have an\n+\t incomplete type, or a non-constant value.  */\n+      HOST_WIDE_INT hwi_byte_size = int_size_in_bytes (elem_type);\n+      if (hwi_byte_size > 0)\n+\t{\n+\t  /* Now call size_in_bytes to get the answer in tree form.  */\n+\t  tree byte_size = size_in_bytes (elem_type);\n+\t  gcc_assert (byte_size);\n+\t  /* Try to get a constant by dividing, ensuring that we're in a\n+\t     signed representation first.  */\n+\t  tree index\n+\t    = fold_binary (TRUNC_DIV_EXPR, ssizetype,\n+\t\t\t   fold_convert (ssizetype, offset_cst),\n+\t\t\t   fold_convert (ssizetype, byte_size));\n+\t  if (index && TREE_CODE (index) == INTEGER_CST)\n+\t    return get_or_create_constant_svalue (index);\n+\t}\n     }\n \n   /* Otherwise, we don't know the array index; generate a new unknown value."}, {"sha": "3bc22ecb1d025be9d54c77b11cef21e104218f81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "patch": "@@ -1,3 +1,9 @@\n+2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93774\n+\t* gfortran.dg/analyzer/deferred_character_25.f90: New test,\n+\tbased on gfortran.dg/deferred_character_25.f90.\n+\n 2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93779"}, {"sha": "81877b006e97da3d8b8b3d2fe137ce63926d2fda", "filename": "gcc/testsuite/gfortran.dg/analyzer/deferred_character_25.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fdeferred_character_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a674c7b8b8028c5d7e52dd38783e8e2b02034b63/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fdeferred_character_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fdeferred_character_25.f90?ref=a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Wno-analyzer-too-complex\" }\n+\n+! Copy of gfortran.dg/deferred_character_25.f90\n+! as a regression test for ICE with -fanalyzer (PR analyzer/93774)\n+\n+PROGRAM TEST\n+  IMPLICIT NONE\n+  INTEGER, PARAMETER :: I = 3\n+  character (len = i), parameter :: str(5) = ['abc','cde','fgh','ijk','lmn']\n+\n+  TYPE T\n+    CHARACTER(LEN=:), ALLOCATABLE :: C(:)\n+  END TYPE T\n+  TYPE(T), TARGET :: S\n+  CHARACTER (LEN=I), POINTER :: P(:)\n+\n+  ALLOCATE ( CHARACTER(LEN=I) :: S%C(5) )\n+  s%c = str\n+\n+! This PR uncovered several problems associated with determining the\n+! element length and indexing. Test fairly thoroughly!\n+  if (SIZE(S%C, 1) .ne. 5) stop 1\n+  if (LEN(S%C) .ne. 3) stop 2\n+  if (any (s%c .ne. str)) stop 3\n+  if (s%c(3) .ne. str(3)) stop 4\n+  P => S%C\n+  if (SIZE(p, 1) .ne. 5) stop 5\n+  if (LEN(p) .ne. 3) stop 6\n+  if (any (p .ne. str)) stop 7\n+  if (p(5) .ne. str(5)) stop 8\n+END PROGRAM TEST"}]}