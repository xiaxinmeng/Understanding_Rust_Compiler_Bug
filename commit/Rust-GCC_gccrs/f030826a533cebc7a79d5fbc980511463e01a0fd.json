{"sha": "f030826a533cebc7a79d5fbc980511463e01a0fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAzMDgyNmE1MzNjZWJjN2E3OWQ1ZmJjOTgwNTExNDYzZTAxYTBmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-17T06:45:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-17T06:45:44Z"}, "message": "alpha.c (alpha_sr_alias_set): Mark GTY.\n\n        * config/alpha/alpha.c (alpha_sr_alias_set): Mark GTY.\n        (alpha_next_sequence_number): Likewise.\n        (alpha_this_literal_sequence_number): Likewise.\n        (alpha_this_gpdisp_sequence_number): Likewise.\n        (struct alpha_funcs, alpha_funcs_num): Likewise.\n        (struct alpha_links): Fix branch merge error.\n        (alpha_need_linkage, alpha_use_linkage): Use GC for alpha_funcs.\n\nFrom-SVN: r61426", "tree": {"sha": "3f1515c3e822d7197b2690f8ed32d6359d6c8262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f1515c3e822d7197b2690f8ed32d6359d6c8262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f030826a533cebc7a79d5fbc980511463e01a0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f030826a533cebc7a79d5fbc980511463e01a0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f030826a533cebc7a79d5fbc980511463e01a0fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f030826a533cebc7a79d5fbc980511463e01a0fd/comments", "author": null, "committer": null, "parents": [{"sha": "e1551d4745c2ed8d6bec57aa3994bb0327ae8c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1551d4745c2ed8d6bec57aa3994bb0327ae8c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1551d4745c2ed8d6bec57aa3994bb0327ae8c3c"}], "stats": {"total": 101, "additions": 45, "deletions": 56}, "files": [{"sha": "6b0f4122ef3049f3d258e13b8f76c93c95af3cc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f030826a533cebc7a79d5fbc980511463e01a0fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f030826a533cebc7a79d5fbc980511463e01a0fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f030826a533cebc7a79d5fbc980511463e01a0fd", "patch": "@@ -1,3 +1,13 @@\n+2003-01-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_sr_alias_set): Mark GTY.\n+\t(alpha_next_sequence_number): Likewise.\n+\t(alpha_this_literal_sequence_number): Likewise.\n+\t(alpha_this_gpdisp_sequence_number): Likewise.\n+\t(struct alpha_funcs, alpha_funcs_num): Likewise.\n+\t(struct alpha_links): Fix branch merge error.\n+\t(alpha_need_linkage, alpha_use_linkage): Use GC for alpha_funcs.\n+\n 2003-01-17  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/mips/mips.h: Don't use #elif.  Reported by Kaveh"}, {"sha": "42543dbea609540b169bdf95a0ea7fa92325eede", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 35, "deletions": 56, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f030826a533cebc7a79d5fbc980511463e01a0fd/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f030826a533cebc7a79d5fbc980511463e01a0fd/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f030826a533cebc7a79d5fbc980511463e01a0fd", "patch": "@@ -106,17 +106,20 @@ static int alpha_function_needs_gp;\n \n /* The alias set for prologue/epilogue register save/restore.  */\n \n-static int alpha_sr_alias_set;\n+static GTY(()) int alpha_sr_alias_set;\n \n /* The assembler name of the current function.  */\n \n static const char *alpha_fnname;\n \n /* The next explicit relocation sequence number.  */\n+extern GTY(()) int alpha_next_sequence_number;\n int alpha_next_sequence_number = 1;\n \n /* The literal and gpdisp sequence numbers for this insn, as printed\n    by %# and %* respectively.  */\n+extern GTY(()) int alpha_this_literal_sequence_number;\n+extern GTY(()) int alpha_this_gpdisp_sequence_number;\n int alpha_this_literal_sequence_number;\n int alpha_this_gpdisp_sequence_number;\n \n@@ -198,6 +201,8 @@ static void alpha_elf_select_rtx_section\n #if TARGET_ABI_OPEN_VMS\n static bool alpha_linkage_symbol_p\n   PARAMS ((const char *symname));\n+static int alpha_write_one_linkage\n+  PARAMS ((splay_tree_node, void *));\n static void alpha_write_linkage\n   PARAMS ((FILE *, const char *, tree));\n #endif\n@@ -7859,39 +7864,6 @@ alpha_expand_epilogue ()\n     }\n }\n \f\n-#if TARGET_ABI_OPEN_VMS\n-#include <splay-tree.h>\n-\n-/* Structure to collect function names for final output\n-   in link section.  */\n-\n-enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n-enum reloc_kind {KIND_LINKAGE, KIND_CODEADDR};\n-\n-struct alpha_funcs\n-{\n-  int num;\n-  splay_tree links;\n-};\n-\n-struct alpha_links\n-{\n-  int num;\n-  rtx linkage;\n-  enum links_kind lkind;\n-  enum reloc_kind rkind;\n-};\n-\n-static splay_tree alpha_funcs_tree;\n-static splay_tree alpha_links_tree;\n-\n-static int mark_alpha_links_node\tPARAMS ((splay_tree_node, void *));\n-static void mark_alpha_links\t\tPARAMS ((void *));\n-static int alpha_write_one_linkage\tPARAMS ((splay_tree_node, void *));\n-\n-static int alpha_funcs_num;\n-#endif\n-\n /* Output the rest of the textual info surrounding the epilogue.  */\n \n void\n@@ -9027,19 +8999,33 @@ alpha_elf_select_rtx_section (mode, x, align)\n \n #endif /* OBJECT_FORMAT_ELF */\n \f\n-/* Structure to collect function names for final output\n-   in link section.  */\n+/* Structure to collect function names for final output in link section.  */\n+/* Note that items marked with GTY can't be ifdef'ed out.  */\n \n enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n+enum reloc_kind {KIND_LINKAGE, KIND_CODEADDR};\n \n struct alpha_links GTY(())\n {\n+  int num;\n   rtx linkage;\n-  enum links_kind kind;\n+  enum links_kind lkind;\n+  enum reloc_kind rkind;\n+};\n+\n+struct alpha_funcs GTY(())\n+{\n+  int num;\n+  splay_tree GTY ((param1_is (char *), param2_is (struct alpha_links *)))\n+    links;\n };\n \n static GTY ((param1_is (char *), param2_is (struct alpha_links *)))\n-  splay_tree alpha_links;\n+  splay_tree alpha_links_tree;\n+static GTY ((param1_is (tree), param2_is (struct alpha_funcs *)))\n+  splay_tree alpha_funcs_tree;\n+\n+static GTY(()) int alpha_funcs_num;\n \n #if TARGET_ABI_OPEN_VMS\n \n@@ -9089,27 +9075,26 @@ alpha_need_linkage (name, is_local)\n {\n   splay_tree_node node;\n   struct alpha_links *al;\n-  struct alpha_funcs *cfaf;\n \n   if (name[0] == '*')\n     name++;\n \n   if (is_local)\n     {\n-      alpha_funcs_tree = splay_tree_new\n-\t((splay_tree_compare_fn) splay_tree_compare_pointers, \n-\t (splay_tree_delete_key_fn) free,\n-\t (splay_tree_delete_key_fn) free);\n+      struct alpha_funcs *cfaf;\n+\n+      if (!alpha_funcs_tree)\n+        alpha_funcs_tree = splay_tree_new_ggc ((splay_tree_compare_fn)\n+\t\t\t\t\t       splay_tree_compare_pointers);\n     \n-      cfaf = (struct alpha_funcs *) xmalloc (sizeof (struct alpha_funcs));\n+      cfaf = (struct alpha_funcs *) ggc_alloc (sizeof (struct alpha_funcs));\n \n       cfaf->links = 0;\n       cfaf->num = ++alpha_funcs_num;\n \n       splay_tree_insert (alpha_funcs_tree,\n \t\t\t (splay_tree_key) current_function_decl,\n \t\t\t (splay_tree_value) cfaf);\n-    \n     }\n \n   if (alpha_links_tree)\n@@ -9136,9 +9121,7 @@ alpha_need_linkage (name, is_local)\n \t}\n     }\n   else\n-    {\n-      alpha_links = splay_tree_new_ggc ((splay_tree_compare_fn) strcmp);\n-    }\n+    alpha_links = splay_tree_new_ggc ((splay_tree_compare_fn) strcmp);\n \n   al = (struct alpha_links *) ggc_alloc (sizeof (struct alpha_links));\n   name = ggc_strdup (name);\n@@ -9195,13 +9178,7 @@ alpha_use_linkage (linkage, cfundecl, lflag, rflag)\n \tal = (struct alpha_links *) lnode->value;\n     }\n   else\n-    {\n-      cfaf->links = splay_tree_new\n-\t((splay_tree_compare_fn) strcmp,\n-\t (splay_tree_delete_key_fn) free,\n-\t (splay_tree_delete_key_fn) free);\n-      ggc_add_root (&cfaf->links, 1, 1, mark_alpha_links);\n-    }\n+    cfaf->links = splay_tree_new_ggc ((splay_tree_compare_fn) strcmp);\n \n   if (!al)\n     {\n@@ -9217,7 +9194,7 @@ alpha_use_linkage (linkage, cfundecl, lflag, rflag)\n \n       name_len = strlen (name);\n \n-      al = (struct alpha_links *) xmalloc (sizeof (struct alpha_links));\n+      al = (struct alpha_links *) ggc_alloc (sizeof (struct alpha_links));\n       al->num = cfaf->num;\n \n       node = splay_tree_lookup (alpha_links_tree, (splay_tree_key) name);\n@@ -9997,6 +9974,7 @@ unicosmk_data_section ()\n \n /* List of identifiers for which an extern declaration might have to be\n    emitted.  */\n+/* FIXME: needs to use GC, so it can be saved and restored for PCH.  */\n \n struct unicosmk_extern_list\n {\n@@ -10079,6 +10057,7 @@ unicosmk_add_extern (name)\n \n /* Structure to collect identifiers which have been replaced by DEX\n    expressions.  */\n+/* FIXME: needs to use GC, so it can be saved and restored for PCH.  */\n \n struct unicosmk_dex {\n   struct unicosmk_dex *next;"}]}