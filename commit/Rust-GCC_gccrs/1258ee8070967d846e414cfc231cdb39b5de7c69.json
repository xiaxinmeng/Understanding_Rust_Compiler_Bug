{"sha": "1258ee8070967d846e414cfc231cdb39b5de7c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1OGVlODA3MDk2N2Q4NDZlNDE0Y2ZjMjMxY2RiMzliNWRlN2M2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-11-21T11:13:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-11-21T11:13:14Z"}, "message": "explow.c (probe_stack_range): Use LCT_NORMAL as second argument to emit_library_call.\n\n\t* explow.c (probe_stack_range): Use LCT_NORMAL as second argument\n\tto emit_library_call.\n\t* function.c (expand_main_function, expand_function_start,\n\texpand_function_end): Likewise.\n\t* profile.c (output_func_start_profiler): Likewise.\n\t* stmt.c (expand_nl_goto_receivers): Use LCT_NORETURN as\n\tsecond argument to emit_library_call.\n\t* optabs.c (prepare_cmp_insn): Use LCT_CONST_MAKE_BLOCK\n\tas second argument to emit_library_call.\n\t* calls.c (emit_library_call): Update fn_type description.\n\nFrom-SVN: r47241", "tree": {"sha": "414698f86b343b20d34cda0513e9b67a6e76c493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/414698f86b343b20d34cda0513e9b67a6e76c493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1258ee8070967d846e414cfc231cdb39b5de7c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1258ee8070967d846e414cfc231cdb39b5de7c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1258ee8070967d846e414cfc231cdb39b5de7c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1258ee8070967d846e414cfc231cdb39b5de7c69/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83dea45d59b06dc8d99c78e471f97957c54105eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83dea45d59b06dc8d99c78e471f97957c54105eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83dea45d59b06dc8d99c78e471f97957c54105eb"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "2ecc65c72664a63dfe075e105c0da088b308d3ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -1,3 +1,16 @@\n+2001-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* explow.c (probe_stack_range): Use LCT_NORMAL as second argument\n+\tto emit_library_call.\n+\t* function.c (expand_main_function, expand_function_start,\n+\texpand_function_end): Likewise.\n+\t* profile.c (output_func_start_profiler): Likewise.\n+\t* stmt.c (expand_nl_goto_receivers): Use LCT_NORETURN as\n+\tsecond argument to emit_library_call.\n+\t* optabs.c (prepare_cmp_insn): Use LCT_CONST_MAKE_BLOCK\n+\tas second argument to emit_library_call.\n+\t* calls.c (emit_library_call): Update fn_type description.\n+\n 2001-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-decl.c (c_expand_deferred_function): Only call c_expand_body"}, {"sha": "8b3b969acbe085a78e93f29eaa6187a746ba1883", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -4198,10 +4198,12 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n    and machine_modes to convert them to.\n    The rtx values should have been passed through protect_from_queue already.\n \n-   FN_TYPE will be zero for `normal' calls, one for `const' calls,\n-   which will be enclosed in REG_LIBCALL/REG_RETVAL notes, and two for\n-   `pure' calls, that are handled like `const' calls with extra\n-   (use (memory (scratch)).  */\n+   FN_TYPE should be LCT_NORMAL for `normal' calls, LCT_CONST for `const'\n+   calls, LCT_PURE for `pure' calls, LCT_CONST_MAKE_BLOCK for `const' calls\n+   which should be enclosed in REG_LIBCALL/REG_RETVAL notes,\n+   LCT_PURE_MAKE_BLOCK for `purep' calls which should be enclosed in\n+   REG_LIBCALL/REG_RETVAL notes with extra (use (memory (scratch)),\n+   or other LCT_ value for other types of library calls.  */\n \n void\n emit_library_call VPARAMS((rtx orgfun, enum libcall_type fn_type,"}, {"sha": "c98e7f3853121aa5499b26d3279bb2e2fb46b62b", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -1471,7 +1471,7 @@ probe_stack_range (first, size)\n \taddr = convert_memory_address (ptr_mode, addr);\n #endif\n \n-      emit_library_call (stack_check_libfunc, 0, VOIDmode, 1, addr,\n+      emit_library_call (stack_check_libfunc, LCT_NORMAL, VOIDmode, 1, addr,\n \t\t\t ptr_mode);\n     }\n "}, {"sha": "065f4ab17073355c4fa7a3b33aaaf8482d9e8ef1", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -6319,7 +6319,7 @@ expand_main_function ()\n #endif\n \n #ifndef HAS_INIT_SECTION\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, NAME__MAIN), 0,\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, NAME__MAIN), LCT_NORMAL,\n \t\t     VOIDmode, 0);\n #endif\n }\n@@ -6545,8 +6545,8 @@ expand_function_start (subr, parms_have_cleanups)\n \tfun = XEXP (fun, 0);\n       else\n \tabort ();\n-      emit_library_call (profile_function_entry_libfunc, 0, VOIDmode, 2,\n-\t\t\t fun, Pmode,\n+      emit_library_call (profile_function_entry_libfunc, LCT_NORMAL, VOIDmode,\n+\t\t\t 2, fun, Pmode,\n \t\t\t expand_builtin_return_addr (BUILT_IN_RETURN_ADDRESS,\n \t\t\t\t\t\t     0,\n \t\t\t\t\t\t     hard_frame_pointer_rtx),\n@@ -6830,8 +6830,8 @@ expand_function_end (filename, line, end_bindings)\n \tfun = XEXP (fun, 0);\n       else\n \tabort ();\n-      emit_library_call (profile_function_exit_libfunc, 0, VOIDmode, 2,\n-\t\t\t fun, Pmode,\n+      emit_library_call (profile_function_exit_libfunc, LCT_NORMAL, VOIDmode,\n+\t\t\t 2, fun, Pmode,\n \t\t\t expand_builtin_return_addr (BUILT_IN_RETURN_ADDRESS,\n \t\t\t\t\t\t     0,\n \t\t\t\t\t\t     hard_frame_pointer_rtx),"}, {"sha": "4514f361667d3fa3a14e301d9345ba3dcd85adb2", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -3193,7 +3193,8 @@ prepare_cmp_insn (px, py, pcomparison, size, pmode, punsignedp, purpose)\n       if (unsignedp && ucmp_optab->handlers[(int) mode].libfunc)\n \tlibfunc = ucmp_optab->handlers[(int) mode].libfunc;\n \n-      emit_library_call (libfunc, 1, word_mode, 2, x, mode, y, mode);\n+      emit_library_call (libfunc, LCT_CONST_MAKE_BLOCK, word_mode, 2, x, mode,\n+\t\t\t y, mode);\n \n       /* Immediately move the result of the libcall into a pseudo\n \t register so reload doesn't clobber the value if it needs"}, {"sha": "57a1c72be389eb4f38252237e0ffcf80b031acef", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -1145,7 +1145,7 @@ output_func_start_profiler ()\n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LPBX\", 0);\n   table_address = force_reg (Pmode,\n \t\t\t     gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf)));\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__bb_init_func\"), 0,\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__bb_init_func\"), LCT_NORMAL,\n \t\t     mode, 1, table_address, Pmode);\n \n   expand_function_end (input_filename, lineno, 0);"}, {"sha": "801700202760f5659e7d9f8e62f9069eaabd11d5", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1258ee8070967d846e414cfc231cdb39b5de7c69/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=1258ee8070967d846e414cfc231cdb39b5de7c69", "patch": "@@ -3740,7 +3740,7 @@ expand_nl_goto_receivers (thisblock)\n   if (any_invalid)\n     {\n       expand_nl_goto_receiver ();\n-      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"abort\"), 0,\n+      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"abort\"), LCT_NORETURN,\n \t\t\t VOIDmode, 0);\n       emit_barrier ();\n     }"}]}