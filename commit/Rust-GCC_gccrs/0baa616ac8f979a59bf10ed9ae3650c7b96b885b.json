{"sha": "0baa616ac8f979a59bf10ed9ae3650c7b96b885b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhYTYxNmFjOGY5NzlhNTliZjEwZWQ5YWUzNjUwYzdiOTZiODg1Yg==", "commit": {"author": {"name": "Sebastian Pop", "email": "s.pop@samsung.com", "date": "2016-01-28T16:39:01Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-28T16:39:01Z"}, "message": "use codegen_error_p\n\n\t* graphite-isl-ast-to-gimple.c (binary_op_to_tree): Call codegen_error_p.\n\t(ternary_op_to_tree): Same.\n\t(unary_op_to_tree): Same.\n\t(nary_op_to_tree): Same.\n\t(gcc_expression_from_isl_expr_op): Same.\n\t(gcc_expression_from_isl_expression): Same.\n\t(graphite_create_new_loop): Same.\n\t(graphite_create_new_loop_guard): Same.\n\t(build_iv_mapping): Same.\n\t(graphite_create_new_guard): Same.\n\t(translate_isl_ast_to_gimple::copy_loop_phi_nodes): Same.\n\t(translate_isl_ast_to_gimple::translate_pending_phi_nodes): Same.\n\nFrom-SVN: r232933", "tree": {"sha": "f8b346b855b5f6c93167e06fa30d0a7d8ca25f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8b346b855b5f6c93167e06fa30d0a7d8ca25f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0baa616ac8f979a59bf10ed9ae3650c7b96b885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0baa616ac8f979a59bf10ed9ae3650c7b96b885b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0baa616ac8f979a59bf10ed9ae3650c7b96b885b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0baa616ac8f979a59bf10ed9ae3650c7b96b885b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b496f67e7e74c05b7c87f582cf2b926e606b37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b496f67e7e74c05b7c87f582cf2b926e606b37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b496f67e7e74c05b7c87f582cf2b926e606b37a"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "13de44367187748b294ea63bd0d621eee2b2f176", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baa616ac8f979a59bf10ed9ae3650c7b96b885b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baa616ac8f979a59bf10ed9ae3650c7b96b885b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0baa616ac8f979a59bf10ed9ae3650c7b96b885b", "patch": "@@ -1,3 +1,18 @@\n+2016-01-28  Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (binary_op_to_tree): Call codegen_error_p.\n+\t(ternary_op_to_tree): Same.\n+\t(unary_op_to_tree): Same.\n+\t(nary_op_to_tree): Same.\n+\t(gcc_expression_from_isl_expr_op): Same.\n+\t(gcc_expression_from_isl_expression): Same.\n+\t(graphite_create_new_loop): Same.\n+\t(graphite_create_new_loop_guard): Same.\n+\t(build_iv_mapping): Same.\n+\t(graphite_create_new_guard): Same.\n+\t(translate_isl_ast_to_gimple::copy_loop_phi_nodes): Same.\n+\t(translate_isl_ast_to_gimple::translate_pending_phi_nodes): Same.\n+\n 2016-01-28  Sebastian Pop  <s.pop@samsung.com>\n \n \t* graphite-isl-ast-to-gimple.c (get_rename_from_scev): Assert instead of"}, {"sha": "ded1f747a7ad5de88462710316ce8d46e18e91db", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0baa616ac8f979a59bf10ed9ae3650c7b96b885b/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0baa616ac8f979a59bf10ed9ae3650c7b96b885b/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=0baa616ac8f979a59bf10ed9ae3650c7b96b885b", "patch": "@@ -438,16 +438,14 @@ class translate_isl_ast_to_gimple\n \t\t\t    vec<tree> iv_map);\n \n   /* Duplicates the statements of basic block BB into basic block NEW_BB\n-     and compute the new induction variables according to the IV_MAP.\n-     CODEGEN_ERROR is set when the code generation cannot continue.  */\n+     and compute the new induction variables according to the IV_MAP.  */\n \n   bool graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t\t\t\t       vec<tree> iv_map);\n \n   /* Copies BB and includes in the copied BB all the statements that can\n      be reached following the use-def chains from the memory accesses,\n-     and returns the next edge following this new block.  codegen_error is\n-     set when the code generation cannot continue.  */\n+     and returns the next edge following this new block.  */\n \n   edge copy_bb_and_scalar_dependences (basic_block bb, edge next_e,\n \t\t\t\t       vec<tree> iv_map);\n@@ -480,8 +478,7 @@ class translate_isl_ast_to_gimple\n      RENAME_MAP, inserting the gimplification code at GSI_TGT, for the\n      translation REGION, with the original copied statement in LOOP, and using\n      the induction variable renaming map IV_MAP.  Returns true when something\n-     has been renamed.  codegen_error is set when the code generation cannot\n-     continue.  */\n+     has been renamed.  */\n \n   bool rename_uses (gimple *copy, gimple_stmt_iterator *gsi_tgt,\n \t\t    basic_block old_bb, loop_p loop, vec<tree> iv_map);\n@@ -597,7 +594,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n   enum isl_ast_op_type expr_type = isl_ast_expr_get_op_type (expr);\n   isl_ast_expr_free (expr);\n \n-  if (codegen_error)\n+  if (codegen_error_p ())\n     return NULL_TREE;\n \n   switch (expr_type)\n@@ -699,7 +696,7 @@ ternary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n   tree c = gcc_expression_from_isl_expression (type, arg_expr, ip);\n   isl_ast_expr_free (expr);\n \n-  if (codegen_error)\n+  if (codegen_error_p ())\n     return NULL_TREE;\n \n   return fold_build3 (COND_EXPR, type, a, b, c);\n@@ -716,7 +713,8 @@ unary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n   isl_ast_expr *arg_expr = isl_ast_expr_get_op_arg (expr, 0);\n   tree tree_expr = gcc_expression_from_isl_expression (type, arg_expr, ip);\n   isl_ast_expr_free (expr);\n-  return codegen_error ? NULL_TREE : fold_build1 (NEGATE_EXPR, type, tree_expr);\n+  return codegen_error_p () ? NULL_TREE\n+    : fold_build1 (NEGATE_EXPR, type, tree_expr);\n }\n \n /* Converts an isl_ast_expr_op expression E with unknown number of arguments\n@@ -743,7 +741,7 @@ nary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n   isl_ast_expr *arg_expr = isl_ast_expr_get_op_arg (expr, 0);\n   tree res = gcc_expression_from_isl_expression (type, arg_expr, ip);\n \n-  if (codegen_error)\n+  if (codegen_error_p ())\n     {\n       isl_ast_expr_free (expr);\n       return NULL_TREE;\n@@ -755,7 +753,7 @@ nary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n       arg_expr = isl_ast_expr_get_op_arg (expr, i);\n       tree t = gcc_expression_from_isl_expression (type, arg_expr, ip);\n \n-      if (codegen_error)\n+      if (codegen_error_p ())\n \t{\n \t  isl_ast_expr_free (expr);\n \t  return NULL_TREE;\n@@ -775,7 +773,7 @@ translate_isl_ast_to_gimple::\n gcc_expression_from_isl_expr_op (tree type, __isl_take isl_ast_expr *expr,\n \t\t\t\t ivs_params &ip)\n {\n-  if (codegen_error)\n+  if (codegen_error_p ())\n     {\n       isl_ast_expr_free (expr);\n       return NULL_TREE;\n@@ -837,7 +835,7 @@ translate_isl_ast_to_gimple::\n gcc_expression_from_isl_expression (tree type, __isl_take isl_ast_expr *expr,\n \t\t\t\t    ivs_params &ip)\n {\n-  if (codegen_error)\n+  if (codegen_error_p ())\n     {\n       isl_ast_expr_free (expr);\n       return NULL_TREE;\n@@ -879,7 +877,7 @@ graphite_create_new_loop (edge entry_edge, __isl_keep isl_ast_node *node_for,\n   tree stride = gcc_expression_from_isl_expression (type, for_inc, ip);\n \n   /* To fail code generation, we generate wrong code until we discard it.  */\n-  if (codegen_error)\n+  if (codegen_error_p ())\n     stride = integer_zero_node;\n \n   tree ivvar = create_tmp_var (type, \"graphite_IV\");\n@@ -1025,13 +1023,16 @@ graphite_create_new_loop_guard (edge entry_edge,\n     build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n   isl_ast_expr *for_init = isl_ast_node_for_get_init (node_for);\n   *lb = gcc_expression_from_isl_expression (*type, for_init, ip);\n+\n   /* To fail code generation, we generate wrong code until we discard it.  */\n-  if (codegen_error)\n+  if (codegen_error_p ())\n     *lb = integer_zero_node;\n+\n   isl_ast_expr *upper_bound = get_upper_bound (node_for);\n   *ub = gcc_expression_from_isl_expression (*type, upper_bound, ip);\n+\n   /* To fail code generation, we generate wrong code until we discard it.  */\n-  if (codegen_error)\n+  if (codegen_error_p ())\n     *ub = integer_zero_node;\n   \n   /* When ub is simply a constant or a parameter, use lb <= ub.  */\n@@ -1115,8 +1116,9 @@ build_iv_mapping (vec<tree> iv_map, gimple_poly_bb_p gbb,\n       tree type =\n \tbuild_nonstandard_integer_type (graphite_expression_type_precision, 0);\n       tree t = gcc_expression_from_isl_expression (type, arg_expr, ip);\n+\n       /* To fail code generation, we generate wrong code until we discard it.  */\n-      if (codegen_error)\n+      if (codegen_error_p ())\n \tt = integer_zero_node;\n \n       loop_p old_loop = gbb_loop_at_index (gbb, region, i - 1);\n@@ -1216,8 +1218,9 @@ graphite_create_new_guard (edge entry_edge, __isl_take isl_ast_expr *if_cond,\n   tree type =\n     build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n   tree cond_expr = gcc_expression_from_isl_expression (type, if_cond, ip);\n+\n   /* To fail code generation, we generate wrong code until we discard it.  */\n-  if (codegen_error)\n+  if (codegen_error_p ())\n     cond_expr = integer_zero_node;\n \n   edge exit_edge = create_empty_if_region_on_edge (entry_edge, cond_expr);\n@@ -2159,7 +2162,7 @@ translate_isl_ast_to_gimple::copy_loop_phi_nodes (basic_block bb,\n \t\t\t\t\t gimple_phi_result_ptr (new_phi));\n       set_rename (res, new_res);\n       codegen_error = !copy_loop_phi_args (phi, ibp_old_bb, new_phi,\n-\t\t\t\t\t  ibp_new_bb, true);\n+\t\t\t\t\t   ibp_new_bb, true);\n       update_stmt (new_phi);\n \n       if (dump_file)\n@@ -2808,8 +2811,7 @@ translate_isl_ast_to_gimple::set_rename_for_each_def (gimple *stmt)\n }\n \n /* Duplicates the statements of basic block BB into basic block NEW_BB\n-   and compute the new induction variables according to the IV_MAP.\n-   CODEGEN_ERROR is set when the code generation cannot continue.  */\n+   and compute the new induction variables according to the IV_MAP.  */\n \n bool\n translate_isl_ast_to_gimple::graphite_copy_stmts_from_block (basic_block bb,\n@@ -2921,8 +2923,7 @@ translate_isl_ast_to_gimple::edge_for_new_close_phis (basic_block bb)\n \n /* Copies BB and includes in the copied BB all the statements that can\n    be reached following the use-def chains from the memory accesses,\n-   and returns the next edge following this new block.  codegen_error is\n-   set when the code generation cannot continue.  */\n+   and returns the next edge following this new block.  */\n \n edge\n translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n@@ -3107,7 +3108,7 @@ translate_isl_ast_to_gimple::translate_pending_phi_nodes ()\n \t  fprintf (dump_file, \"[codegen] to new-phi: \");\n \t  print_gimple_stmt (dump_file, new_phi, 0, 0);\n \t}\n-      if (codegen_error)\n+      if (codegen_error_p ())\n \treturn;\n     }\n }"}]}