{"sha": "f46706733954c2868af5e91687931538600b2a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2NzA2NzMzOTU0YzI4NjhhZjVlOTE2ODc5MzE1Mzg2MDBiMmE5Mg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-04-06T18:27:51Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-06T18:27:51Z"}, "message": "[NDS32] Refine call and return patterns.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c (nds32_output_return,\n\tnds32_output_call, nds32_symbol_binds_local_p): New functions.\n\t* config/nds32/nds32-protos.h (nds32_output_call,\n\tnds32_output_return): Declare.\n\t* config/nds32/nds32.md: Refine all the call and return patterns.\n\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\n\nFrom-SVN: r259186", "tree": {"sha": "61f2b4dbc5db5bcc31502cc3ed02c49fd06b8848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61f2b4dbc5db5bcc31502cc3ed02c49fd06b8848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f46706733954c2868af5e91687931538600b2a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46706733954c2868af5e91687931538600b2a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46706733954c2868af5e91687931538600b2a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46706733954c2868af5e91687931538600b2a92/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96975b1159808defb222a57b369db02a0eab5fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96975b1159808defb222a57b369db02a0eab5fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96975b1159808defb222a57b369db02a0eab5fee"}], "stats": {"total": 264, "additions": 211, "deletions": 53}, "files": [{"sha": "a261a45986dc7141ff0a1e96447496553eb71820", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46706733954c2868af5e91687931538600b2a92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46706733954c2868af5e91687931538600b2a92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f46706733954c2868af5e91687931538600b2a92", "patch": "@@ -1,3 +1,12 @@\n+2018-04-06  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_output_return,\n+\tnds32_output_call, nds32_symbol_binds_local_p): New functions.\n+\t* config/nds32/nds32-protos.h (nds32_output_call,\n+\tnds32_output_return): Declare.\n+\t* config/nds32/nds32.md: Refine all the call and return patterns.\n+\n 2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/85252"}, {"sha": "01ce38b5980a1ae89d48f7be9b01f6c8ed38a64e", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46706733954c2868af5e91687931538600b2a92/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46706733954c2868af5e91687931538600b2a92/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=f46706733954c2868af5e91687931538600b2a92", "patch": "@@ -1938,6 +1938,48 @@ nds32_output_stack_pop (rtx par_rtx ATTRIBUTE_UNUSED)\n   return \"\";\n }\n \n+/* Function to output return operation.  */\n+const char *\n+nds32_output_return (void)\n+{\n+  /* A string pattern for output_asm_insn().  */\n+  char pattern[100];\n+  /* The operands array which will be used in output_asm_insn().  */\n+  rtx operands[2];\n+  /* For stack v3pop:\n+     operands[0]: Re\n+     operands[1]: imm8u */\n+  int re_callee_saved = cfun->machine->callee_saved_last_gpr_regno;\n+  int sp_adjust;\n+\n+  /* Set operands[0].  */\n+  operands[0] = gen_rtx_REG (SImode, re_callee_saved);\n+\n+  /* Check if we can generate 'pop25 Re,imm8u',\n+     otherwise, generate 'pop25 Re,0'.\n+     We have to consider alloca issue as well.\n+     If the function does call alloca(), the stack pointer is not fixed.\n+     In that case, we cannot use 'pop25 Re,imm8u' directly.\n+     We have to caculate stack pointer from frame pointer\n+     and then use 'pop25 Re,0'.  */\n+  sp_adjust = cfun->machine->local_size\n+    + cfun->machine->out_args_size\n+    + cfun->machine->callee_saved_area_gpr_padding_bytes\n+    + cfun->machine->callee_saved_fpr_regs_size;\n+  if (satisfies_constraint_Iu08 (GEN_INT (sp_adjust))\n+      && NDS32_DOUBLE_WORD_ALIGN_P (sp_adjust)\n+      && !cfun->calls_alloca)\n+    operands[1] = GEN_INT (sp_adjust);\n+  else\n+    operands[1] = GEN_INT (0);\n+\n+  /* Create assembly code pattern.  */\n+  snprintf (pattern, sizeof (pattern), \"pop25\\t%%0, %%1\");\n+  /* We use output_asm_insn() to output assembly code by ourself.  */\n+  output_asm_insn (pattern, operands);\n+  return \"\";\n+}\n+\n /* Function to generate PC relative jump table.\n    Refer to nds32.md for more details.\n \n@@ -2681,6 +2723,56 @@ nds32_output_cbranchsi4_greater_less_zero (rtx_insn *insn, rtx *operands)\n   return \"\";\n }\n \n+/* Return true if SYMBOL_REF X binds locally.  */\n+\n+static bool\n+nds32_symbol_binds_local_p (const_rtx x)\n+{\n+  return (SYMBOL_REF_DECL (x)\n+\t  ? targetm.binds_local_p (SYMBOL_REF_DECL (x))\n+\t  : SYMBOL_REF_LOCAL_P (x));\n+}\n+\n+const char *\n+nds32_output_call (rtx insn, rtx *operands, rtx symbol, const char *long_call,\n+\t\t   const char *call, bool align_p)\n+{\n+  char pattern[100];\n+  bool noreturn_p;\n+\n+  if (GET_CODE (symbol) == CONST)\n+    {\n+      symbol= XEXP (symbol, 0);\n+\n+      if (GET_CODE (symbol) == PLUS)\n+        symbol = XEXP (symbol, 0);\n+    }\n+\n+  gcc_assert (GET_CODE (symbol) == SYMBOL_REF\n+\t      || REG_P (symbol));\n+\n+  if (nds32_long_call_p (symbol))\n+    strcpy (pattern, long_call);\n+  else\n+    strcpy (pattern, call);\n+\n+  if (align_p)\n+    strcat (pattern, \"\\n\\t.align 2\");\n+\n+  noreturn_p = find_reg_note (insn, REG_NORETURN, NULL_RTX) != NULL_RTX;\n+\n+  if (noreturn_p)\n+    {\n+      if (TARGET_16_BIT)\n+\tstrcat (pattern, \"\\n\\tnop16\");\n+      else\n+\tstrcat (pattern, \"\\n\\tnop\");\n+    }\n+\n+  output_asm_insn (pattern, operands);\n+  return \"\";\n+}\n+\n /* Spilt a doubleword instrucion to two single word instructions.  */\n void\n nds32_spilt_doubleword (rtx *operands, bool load_p)"}, {"sha": "0b460dadec9f38a0d9601fe72e3b2b0bb23f95f1", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46706733954c2868af5e91687931538600b2a92/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46706733954c2868af5e91687931538600b2a92/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=f46706733954c2868af5e91687931538600b2a92", "patch": "@@ -172,11 +172,15 @@ extern const char *nds32_output_cbranchsi4_equality_reg_or_const_int (rtx_insn *\n \t\t\t\t\t\t\t\t      rtx *);\n extern const char *nds32_output_cbranchsi4_greater_less_zero (rtx_insn *, rtx *);\n \n+extern const char *nds32_output_call (rtx, rtx *, rtx,\n+\t\t\t\t      const char *, const char *, bool);\n+\n \n /* Auxiliary functions to output stack push/pop instruction.  */\n \n extern const char *nds32_output_stack_push (rtx);\n extern const char *nds32_output_stack_pop (rtx);\n+extern const char *nds32_output_return (void);\n \n /* Auxiliary functions to split double word RTX pattern.  */\n "}, {"sha": "67d0d5f075500ace132dd514a3faf817f2ab8fc0", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 106, "deletions": 53, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46706733954c2868af5e91687931538600b2a92/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46706733954c2868af5e91687931538600b2a92/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=f46706733954c2868af5e91687931538600b2a92", "patch": "@@ -1419,36 +1419,41 @@\n   \"\"\n )\n \n-(define_insn \"*call_register\"\n-  [(parallel [(call (mem (match_operand:SI 0 \"register_operand\" \"r, r\"))\n-\t\t    (match_operand 1))\n-\t      (clobber (reg:SI LP_REGNUM))\n-\t      (clobber (reg:SI TA_REGNUM))])]\n-  \"\"\n-  \"@\n-  jral5\\t%0\n-  jral\\t%0\"\n-  [(set_attr \"type\"   \"branch,branch\")\n-   (set_attr \"length\" \"     2,     4\")])\n-\n-(define_insn \"*call_immediate\"\n-  [(parallel [(call (mem (match_operand:SI 0 \"immediate_operand\" \"i\"))\n+(define_insn \"call_internal\"\n+  [(parallel [(call (mem (match_operand:SI 0 \"nds32_call_address_operand\" \"r, i\"))\n \t\t    (match_operand 1))\n \t      (clobber (reg:SI LP_REGNUM))\n \t      (clobber (reg:SI TA_REGNUM))])]\n   \"\"\n {\n-  if (TARGET_CMODEL_LARGE)\n-    return \"bal\\t%0\";\n-  else\n-    return \"jal\\t%0\";\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      if (TARGET_16_BIT)\n+\treturn \"jral5\\t%0\";\n+      else\n+\treturn \"jral\\t%0\";\n+    case 1:\n+      return nds32_output_call (insn, operands, operands[0],\n+\t\t\t\t\"bal\\t%0\", \"jal\\t%0\", false);\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\"   \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_test \"TARGET_CMODEL_LARGE\")\n-\t\t      (const_int 12)\n-\t\t      (const_int 4)))])\n-\n+  [(set_attr \"enabled\" \"yes\")\n+   (set_attr \"type\" \"branch\")\n+   (set_attr_alternative \"length\"\n+     [\n+       ;; Alternative 0\n+       (if_then_else (match_test \"TARGET_16_BIT\")\n+\t\t     (const_int 2)\n+\t\t     (const_int 4))\n+       ;; Alternative 1\n+       (if_then_else (match_test \"nds32_long_call_p (operands[0])\")\n+\t\t     (const_int 12)\n+\t\t     (const_int 4))\n+     ])]\n+)\n \n ;; Subroutine call instruction returning a value.\n ;;   operands[0]: It is the hard regiser in which the value is returned.\n@@ -1462,42 +1467,71 @@\n \t\t         (match_operand 2)))\n \t      (clobber (reg:SI LP_REGNUM))\n \t      (clobber (reg:SI TA_REGNUM))])]\n-  \"\"\n-  \"\"\n-)\n+  \"\")\n \n-(define_insn \"*call_value_register\"\n+(define_insn \"call_value_internal\"\n   [(parallel [(set (match_operand 0)\n-\t\t   (call (mem (match_operand:SI 1 \"register_operand\" \"r, r\"))\n+\t\t   (call (mem (match_operand:SI 1 \"nds32_call_address_operand\" \"r, i\"))\n \t\t         (match_operand 2)))\n \t      (clobber (reg:SI LP_REGNUM))\n \t      (clobber (reg:SI TA_REGNUM))])]\n   \"\"\n-  \"@\n-  jral5\\t%1\n-  jral\\t%1\"\n-  [(set_attr \"type\"   \"branch,branch\")\n-   (set_attr \"length\" \"     2,     4\")])\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      if (TARGET_16_BIT)\n+\treturn \"jral5\\t%1\";\n+      else\n+\treturn \"jral\\t%1\";\n+    case 1:\n+      return nds32_output_call (insn, operands, operands[1],\n+\t\t\t\t\"bal\\t%1\", \"jal\\t%1\", false);\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"enabled\" \"yes\")\n+   (set_attr \"type\" \"branch\")\n+   (set_attr_alternative \"length\"\n+     [\n+       ;; Alternative 0\n+       (if_then_else (match_test \"TARGET_16_BIT\")\n+\t\t     (const_int 2)\n+\t\t     (const_int 4))\n+       ;; Alternative 1\n+       (if_then_else (match_test \"nds32_long_call_p (operands[1])\")\n+\t\t     (const_int 12)\n+\t\t     (const_int 4))\n+     ])]\n+)\n \n-(define_insn \"*call_value_immediate\"\n-  [(parallel [(set (match_operand 0)\n-\t\t   (call (mem (match_operand:SI 1 \"immediate_operand\" \"i\"))\n-\t\t\t (match_operand 2)))\n-\t      (clobber (reg:SI LP_REGNUM))\n-\t      (clobber (reg:SI TA_REGNUM))])]\n+;; Call subroutine returning any type.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+\t\t    (const_int 0))\n+\t      (match_operand 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")])]\n   \"\"\n {\n-  if (TARGET_CMODEL_LARGE)\n-    return \"bal\\t%1\";\n-  else\n-    return \"jal\\t%1\";\n-}\n-  [(set_attr \"type\"   \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_test \"TARGET_CMODEL_LARGE\")\n-\t\t      (const_int 12)\n-\t\t      (const_int 4)))])\n+  int i;\n \n+  emit_call_insn (gen_call (operands[0], const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+  DONE;\n+})\n \n ;; ----------------------------------------------------------------------------\n \n@@ -1715,10 +1749,18 @@\n ;; Use this pattern to expand a return instruction\n ;; with simple_return rtx if no epilogue is required.\n (define_expand \"return\"\n-  [(simple_return)]\n+  [(parallel [(return)\n+              (clobber (reg:SI FP_REGNUM))])]\n   \"nds32_can_use_return_insn ()\"\n-  \"\"\n-)\n+{\n+  /* Emit as the simple return.  */\n+  if (cfun->machine->naked_p\n+      && (cfun->machine->va_args_size == 0))\n+    {\n+      emit_jump_insn (gen_return_internal ());\n+      DONE;\n+    }\n+})\n \n ;; This pattern is expanded only by the shrink-wrapping optimization\n ;; on paths where the function prologue has not been executed.\n@@ -1728,6 +1770,17 @@\n   \"\"\n )\n \n+(define_insn \"*nds32_return\"\n+  [(parallel [(return)\n+   (clobber (reg:SI FP_REGNUM))])]\n+  \"\"\n+{\n+  return nds32_output_return ();\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"enabled\" \"yes\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"return_internal\"\n   [(simple_return)]\n   \"\""}]}