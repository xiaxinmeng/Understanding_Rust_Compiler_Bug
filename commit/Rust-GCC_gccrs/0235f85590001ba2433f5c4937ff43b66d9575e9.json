{"sha": "0235f85590001ba2433f5c4937ff43b66d9575e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzNWY4NTU5MDAwMWJhMjQzM2Y1YzQ5MzdmZjQzYjY2ZDk1NzVlOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-11T03:15:15Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-11T03:15:15Z"}, "message": "builtins.c (expand_builtin_strcat): Optimize constant strings.\n\n\t* builtins.c (expand_builtin_strcat): Optimize constant strings.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-9.c: Add more strcat cases.\n\nFrom-SVN: r70317", "tree": {"sha": "30025456f87120a80d1959a53a8aa0f7a0e94393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30025456f87120a80d1959a53a8aa0f7a0e94393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0235f85590001ba2433f5c4937ff43b66d9575e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0235f85590001ba2433f5c4937ff43b66d9575e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0235f85590001ba2433f5c4937ff43b66d9575e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0235f85590001ba2433f5c4937ff43b66d9575e9/comments", "author": null, "committer": null, "parents": [{"sha": "d9148cf498826028803b6e00a2ca60ac83113cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9148cf498826028803b6e00a2ca60ac83113cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9148cf498826028803b6e00a2ca60ac83113cfb"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "2c4e5de420e0b1a746e8c8d466e52fb2e23fb0a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0235f85590001ba2433f5c4937ff43b66d9575e9", "patch": "@@ -1,3 +1,7 @@\n+2003-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strcat): Optimize constant strings.\n+\n 2003-08-10  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* pretty-print.c (pp_base_indent): Rename from pp_indent."}, {"sha": "a7265bf374cdf154af6fad3c154e4a1245c68280", "filename": "gcc/builtins.c", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0235f85590001ba2433f5c4937ff43b66d9575e9", "patch": "@@ -3577,9 +3577,52 @@ expand_builtin_strcat (tree arglist, rtx target, enum machine_mode mode)\n \tsrc = TREE_VALUE (TREE_CHAIN (arglist));\n       const char *p = c_getstr (src);\n \n-      /* If the string length is zero, return the dst parameter.  */\n-      if (p && *p == '\\0')\n-\treturn expand_expr (dst, target, mode, EXPAND_NORMAL);\n+      if (p)\n+\t{\n+\t  /* If the string length is zero, return the dst parameter.  */\n+\t  if (*p == '\\0')\n+\t    return expand_expr (dst, target, mode, EXPAND_NORMAL);\n+\t  else if (!optimize_size)\n+\t    {\n+\t      /* Otherwise if !optimize_size, see if we can store by\n+                 pieces into (dst + strlen(dst)).  */\n+\t      tree newdst, arglist,\n+\t\tstrlen_fn = implicit_built_in_decls[BUILT_IN_STRLEN];\n+\t      \n+\t      /* This is the length argument.  */\n+\t      arglist = build_tree_list (NULL_TREE,\n+\t\t\t\t\t fold (size_binop (PLUS_EXPR,\n+\t\t\t\t\t\t\t   c_strlen (src, 0),\n+\t\t\t\t\t\t\t   ssize_int (1))));\n+\t      /* Prepend src argument.  */\n+\t      arglist = tree_cons (NULL_TREE, src, arglist);\n+\t      \n+\t      /* We're going to use dst more than once.  */\n+\t      dst = save_expr (dst);\n+\n+\t      /* Create strlen (dst).  */\n+\t      newdst =\n+\t\tfold (build_function_call_expr (strlen_fn,\n+\t\t\t\t\t\tbuild_tree_list (NULL_TREE,\n+\t\t\t\t\t\t\t\t dst)));\n+\t      /* Create (dst + strlen (dst)).  */\n+\t      newdst = fold (build (PLUS_EXPR, TREE_TYPE (dst), dst, newdst));\n+\n+\t      /* Prepend the new dst argument.  */\n+\t      arglist = tree_cons (NULL_TREE, newdst, arglist);\n+\t      \n+\t      /* We don't want to get turned into a memcpy if the\n+                 target is const0_rtx, i.e. when the return value\n+                 isn't used.  That would produce pessimized code so\n+                 pass in a target of zero, it should never actually be\n+                 used.  If this was successful return the original\n+                 dst, not the result of mempcpy.  */\n+\t      if (expand_builtin_mempcpy (arglist, /*target=*/0, mode, /*endp=*/0))\n+\t\treturn expand_expr (dst, target, mode, EXPAND_NORMAL);\n+\t      else\n+\t\treturn 0;\n+\t    }\n+\t}\n \n       return 0;\n     }"}, {"sha": "d4bd22d6b5aa73599302655119164e3d5b0c5a4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0235f85590001ba2433f5c4937ff43b66d9575e9", "patch": "@@ -1,3 +1,7 @@\n+2003-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/string-opt-9.c: Add more strcat cases.\n+\n 2003-08-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11789.C"}, {"sha": "0c21957f28642775c0b0c6528e5d7a5c45b05c81", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-9.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0235f85590001ba2433f5c4937ff43b66d9575e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-9.c?ref=0235f85590001ba2433f5c4937ff43b66d9575e9", "patch": "@@ -10,32 +10,59 @@ typedef __SIZE_TYPE__ size_t;\n extern char *strcat (char *, const char *);\n extern char *strcpy (char *, const char *);\n extern int strcmp (const char *, const char *);\n+extern void *memset (void *, int, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n+#define RESET_DST_WITH(FILLER) \\\n+  do { memset (dst, 'X', sizeof (dst)); strcpy (dst, (FILLER)); } while (0)\n \n int main ()\n {\n   const char *const s1 = \"hello world\";\n   const char *const s2 = \"\";\n   char dst[64], *d2;\n   \n-  strcpy (dst, s1);\n+  RESET_DST_WITH (s1);\n   if (strcat (dst, \"\") != dst || strcmp (dst, s1))\n     abort();\n-  strcpy (dst, s1);\n+  RESET_DST_WITH (s1);\n   if (strcat (dst, s2) != dst || strcmp (dst, s1))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strcat (++d2, s2) != dst+1 || d2 != dst+1 || strcmp (dst, s1))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strcat (++d2+5, s2) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n     abort();\n-  strcpy (dst, s1); d2 = dst;\n+  RESET_DST_WITH (s1); d2 = dst;\n   if (strcat (++d2+5, s1+11) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n     abort();\n \n+#ifndef __OPTIMIZE_SIZE__\n+  RESET_DST_WITH (s1);\n+  if (strcat (dst, \" 1111\") != dst\n+      || memcmp (dst, \"hello world 1111\\0XXX\", 20))\n+    abort();\n+  \n+  RESET_DST_WITH (s1);\n+  if (strcat (dst+5, \" 2222\") != dst+5\n+      || memcmp (dst, \"hello world 2222\\0XXX\", 20))\n+    abort();\n+  \n+  RESET_DST_WITH (s1); d2 = dst;\n+  if (strcat (++d2+5, \" 3333\") != dst+6 || d2 != dst+1\n+      || memcmp (dst, \"hello world 3333\\0XXX\", 20))\n+    abort();\n+  \n+  RESET_DST_WITH (s1);\n+  strcat (strcat (strcat (strcat (strcat (strcat (dst, \": this \"), \"\"),\n+\t\t\t\t  \"is \"), \"a \"), \"test\"), \".\");\n+  if (memcmp (dst, \"hello world: this is a test.\\0X\", 30))\n+    abort();\n+#endif\n+\n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n-  strcpy (dst, s1);\n+  RESET_DST_WITH (s1);\n   if (__builtin_strcat (dst, \"\") != dst || strcmp (dst, s1))\n     abort();\n "}]}