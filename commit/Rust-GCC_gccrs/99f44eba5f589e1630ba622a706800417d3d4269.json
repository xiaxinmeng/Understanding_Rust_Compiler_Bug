{"sha": "99f44eba5f589e1630ba622a706800417d3d4269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmNDRlYmE1ZjU4OWUxNjMwYmE2MjJhNzA2ODAwNDE3ZDNkNDI2OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-11-01T01:47:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-01T01:47:41Z"}, "message": "hard-reg-set.h (reg_names): Constify a char*.\n\n\t* hard-reg-set.h (reg_names): Constify a char*.\n\n\t* regclass.c  (reg_names): Likewise.\n\n\t* regs.h (reg_names): Likewise\n\n\t* a29k/a29k.c (reg_names): Delete declaration.\n\n\t* a29k/a29k.h (CONDITIONAL_REGISTER_USAGE): Constify a char*.\n\n\t* arc/arc.c (arc_save_restore, arc_output_function_prologue,\n\tarc_output_function_epilogue): Likewise.\n\n\t* elxsi/elxsi.c (reg_names): Likewise.\n\n\t* gmicro/gmicro.h (FUNCTION_PROLOGUE, FUNCTION_EPILOGUE): Likewise.\n\n\t* m32r/m32r.c (m32r_output_function_epilogue, emit_cond_move):\n\tLikewise.\n\n\t* m88k/m88k.c (output_function_profiler): Likewise.\n\n\t* sparc/sparc.c (sparc_flat_output_function_prologue,\n\tsparc_flat_output_function_epilogue): Likewise.\n\nFrom-SVN: r30303", "tree": {"sha": "5e98ed41a5e8f7580f7b30c5c4492e13e2f39cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e98ed41a5e8f7580f7b30c5c4492e13e2f39cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f44eba5f589e1630ba622a706800417d3d4269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f44eba5f589e1630ba622a706800417d3d4269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f44eba5f589e1630ba622a706800417d3d4269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f44eba5f589e1630ba622a706800417d3d4269/comments", "author": null, "committer": null, "parents": [{"sha": "f7faca78d60cf96984a5d35eea6bd70a7a81092d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7faca78d60cf96984a5d35eea6bd70a7a81092d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7faca78d60cf96984a5d35eea6bd70a7a81092d"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "b4c4f7136c7cc8b737cf0035955660bb3fa8f0b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -1,3 +1,30 @@\n+Sun Oct 31 20:42:17 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* hard-reg-set.h (reg_names): Constify a char*.\n+\n+\t* regclass.c  (reg_names): Likewise.\n+\n+\t* regs.h (reg_names): Likewise\n+\n+\t* a29k/a29k.c (reg_names): Delete declaration.\n+\n+\t* a29k/a29k.h (CONDITIONAL_REGISTER_USAGE): Constify a char*.\n+\n+\t* arc/arc.c (arc_save_restore, arc_output_function_prologue,\n+\tarc_output_function_epilogue): Likewise.\n+\n+\t* elxsi/elxsi.c (reg_names): Likewise.\n+\n+\t* gmicro/gmicro.h (FUNCTION_PROLOGUE, FUNCTION_EPILOGUE): Likewise.\n+\t\n+\t* m32r/m32r.c (m32r_output_function_epilogue, emit_cond_move):\n+\tLikewise.\n+\n+\t* m88k/m88k.c (output_function_profiler): Likewise.\n+\n+\t* sparc/sparc.c (sparc_flat_output_function_prologue,\n+\tsparc_flat_output_function_epilogue): Likewise.\n+\n Sun Oct 31 13:32:15 CET 1999  Marc Lehmann <pcg@goof.com>\n \n \t* toplev.c (rest_of_compilation): Seperate the setjmp/vfork clobber"}, {"sha": "2caa3a686279e7310eea877798076fe40183e5ec", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -83,9 +83,6 @@ int a29k_debug_reg_map[FIRST_PSEUDO_REGISTER];\n \n rtx a29k_compare_op0, a29k_compare_op1;\n int a29k_compare_fp_p;\n-\n-/* Gives names for registers.  */\n-extern char *reg_names[];\n \f\n /* Returns 1 if OP is a 8-bit constant. */\n "}, {"sha": "03e2c6253c58ba82d90d5a63ad0b239de9395f77", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -591,7 +591,7 @@ enum reg_class { NO_REGS, LR0_REGS, GENERAL_REGS, BP_REGS, FC_REGS, CR_REGS,\n \n #define CONDITIONAL_REGISTER_USAGE\t\t\\\n   {\t\t\t\t\t\t\\\n-    char *p;\t\t\t\t\t\\\n+    const char *p;\t\t\t\t\\\n     int i;\t\t\t\t\t\\\n \t\t\t\t\t\t\\\n     if (TARGET_KERNEL_REGISTERS)\t\t\\"}, {"sha": "8e9c30e463971b5f29a57b2f40b3b423d8e5324b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -1061,10 +1061,10 @@ arc_compute_frame_size (size)\n void\n arc_save_restore (file, base_reg, offset, gmask, op)\n      FILE *file;\n-     char *base_reg;\n+     const char *base_reg;\n      unsigned int offset;\n      unsigned int gmask;\n-     char *op;\n+     const char *op;\n {\n   int regno;\n \n@@ -1089,8 +1089,8 @@ arc_output_function_prologue (file, size)\n      FILE *file;\n      int size;\n {\n-  char *sp_str = reg_names[STACK_POINTER_REGNUM];\n-  char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n+  const char *sp_str = reg_names[STACK_POINTER_REGNUM];\n+  const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n   unsigned int gmask = current_frame_info.gmask;\n   enum arc_function_type fn_type = arc_compute_function_type (current_function_decl);\n \n@@ -1197,8 +1197,8 @@ arc_output_function_epilogue (file, size)\n       unsigned int frame_size = size - pretend_size;\n       int restored, fp_restored_p;\n       int can_trust_sp_p = !current_function_calls_alloca;\n-      char *sp_str = reg_names[STACK_POINTER_REGNUM];\n-      char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n+      const char *sp_str = reg_names[STACK_POINTER_REGNUM];\n+      const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n \n       /* ??? There are lots of optimizations that can be done here.\n \t EG: Use fp to restore regs if it's closer."}, {"sha": "77dac67da0b54d52448ba091a6aa731d11157869", "filename": "gcc/config/elxsi/elxsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Felxsi%2Felxsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Felxsi%2Felxsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"function.h\"\n \n-extern char *reg_names[];\n+extern const char *reg_names[];\n rtx cmp_op0=0, cmp_op1=0;\n \n /* table of relations for compares and branches */"}, {"sha": "e0f226664ae19cb0e982348dabf2f58ead4794cf", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -635,7 +635,7 @@ extern enum reg_class regno_reg_class[];\n { register int regno;\t\t\t\t\t\t\\\n   register int mask = 0;\t\t\t\t\t\\\n   register int nregs = 0;\t\t\t\t\t\\\n-  static char *reg_names[] = REGISTER_NAMES;\t\t\t\\\n+  static const char * const reg_names[] = REGISTER_NAMES;\t\\\n   extern char call_used_regs[];\t\t\t\t\t\\\n   int fsize = ((SIZE) + 3) & -4;\t\t\t\t\\\n   for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n@@ -737,7 +737,7 @@ extern enum reg_class regno_reg_class[];\n   register int nregs, nfregs;\t\t\t\t\t\\\n   int offset, foffset;\t\t\t\t\t\t\\\n   extern char call_used_regs[];\t\t\t\t\t\\\n-  static char *reg_names[] = REGISTER_NAMES;\t\t\t\\\n+  static const char * const reg_names[] = REGISTER_NAMES;\t\\\n   int fsize = ((SIZE) + 3) & -4;\t\t\t\t\\\n   FUNCTION_EXTRA_EPILOGUE (FILE, SIZE);\t\t\t\t\\\n   nfregs = 0;  fmask = 0; \t\t\t\t\t\\"}, {"sha": "4b2315714ad0411114a3d87414010396f31111d9", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -1774,8 +1774,8 @@ m32r_output_function_epilogue (file, size)\n       unsigned int args_size = current_frame_info.args_size;\n       unsigned int gmask = current_frame_info.gmask;\n       int can_trust_sp_p = !current_function_calls_alloca;\n-      char * sp_str = reg_names[STACK_POINTER_REGNUM];\n-      char * fp_str = reg_names[FRAME_POINTER_REGNUM];\n+      const char * sp_str = reg_names[STACK_POINTER_REGNUM];\n+      const char * fp_str = reg_names[FRAME_POINTER_REGNUM];\n \n       /* The first thing to do is point the sp at the bottom of the register\n \t save area.  */\n@@ -2311,7 +2311,7 @@ emit_cond_move (operands, insn)\n      rtx   insn ATTRIBUTE_UNUSED;\n {\n   static char buffer [100];\n-  char * dest = reg_names [REGNO (operands [0])];\n+  const char * dest = reg_names [REGNO (operands [0])];\n   \n   buffer [0] = 0;\n   "}, {"sha": "d33c6bcc50d4c80c3906c0d1bd6b02461187b2b7", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -2373,7 +2373,7 @@ output_function_profiler (file, labelno, name, savep)\n {\n   char label[256];\n   char dbi[256];\n-  char *temp = (savep ? reg_names[2] : reg_names[10]);\n+  const char *temp = (savep ? reg_names[2] : reg_names[10]);\n \n   /* Remember to update FUNCTION_PROFILER_LENGTH.  */\n "}, {"sha": "09256d2c49b10255cb16a96c8b22ca055b29b3ca", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -5938,7 +5938,7 @@ sparc_flat_output_function_prologue (file, size)\n      FILE *file;\n      int size;\n {\n-  char *sp_str = reg_names[STACK_POINTER_REGNUM];\n+  const char *sp_str = reg_names[STACK_POINTER_REGNUM];\n   unsigned long gmask = current_frame_info.gmask;\n \n   sparc_output_scratch_registers (file);\n@@ -5977,7 +5977,7 @@ sparc_flat_output_function_prologue (file, size)\n   if (size > 0)\n     {\n       unsigned int reg_offset = current_frame_info.reg_offset;\n-      char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n+      const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n       const char *t1_str = \"%g1\";\n \n       /* Things get a little tricky if local variables take up more than ~4096\n@@ -6155,8 +6155,8 @@ sparc_flat_output_function_epilogue (file, size)\n     {\n       unsigned int reg_offset = current_frame_info.reg_offset;\n       unsigned int size1;\n-      char *sp_str = reg_names[STACK_POINTER_REGNUM];\n-      char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n+      const char *sp_str = reg_names[STACK_POINTER_REGNUM];\n+      const char *fp_str = reg_names[FRAME_POINTER_REGNUM];\n       const char *t1_str = \"%g1\";\n \n       /* In the reload sequence, we don't need to fill the load delay"}, {"sha": "8d1ca75a0ac252ed403d469bbe9be59009811f04", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -467,4 +467,4 @@ extern int n_non_fixed_regs;\n \n /* Vector indexed by hardware reg giving its name.  */\n \n-extern char *reg_names[FIRST_PSEUDO_REGISTER];\n+extern const char *reg_names[FIRST_PSEUDO_REGISTER];"}, {"sha": "7cfa62eb37489d1d8443d5801f366d195c5ed5ff", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -158,7 +158,7 @@ enum reg_class reg_class_superunion[N_REG_CLASSES][N_REG_CLASSES];\n \n /* Array containing all of the register names */\n \n-char *reg_names[] = REGISTER_NAMES;\n+const char *reg_names[] = REGISTER_NAMES;\n \n /* For each hard register, the widest mode object that it can contain.\n    This will be a MODE_INT mode if the register can hold integers.  Otherwise"}, {"sha": "d0f7446a584c5465b8df9a18508cab0136397823", "filename": "gcc/regs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f44eba5f589e1630ba622a706800417d3d4269/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=99f44eba5f589e1630ba622a706800417d3d4269", "patch": "@@ -138,7 +138,7 @@ extern char regs_ever_live[FIRST_PSEUDO_REGISTER];\n \n /* Vector indexed by hardware reg giving its name.  */\n \n-extern char *reg_names[FIRST_PSEUDO_REGISTER];\n+extern const char *reg_names[FIRST_PSEUDO_REGISTER];\n \n /* For each hard register, the widest mode object that it can contain.\n    This will be a MODE_INT mode if the register can hold integers.  Otherwise"}]}