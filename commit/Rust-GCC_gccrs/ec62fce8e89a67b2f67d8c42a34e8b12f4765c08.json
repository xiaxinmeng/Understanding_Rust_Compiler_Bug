{"sha": "ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "node_id": "C_kwDOANBUbNoAKGVjNjJmY2U4ZTg5YTY3YjJmNjdkOGM0MmEzNGU4YjEyZjQ3NjVjMDg", "commit": {"author": {"name": "Dave", "email": "dme2223@gmail.com", "date": "2022-11-11T01:28:57Z"}, "committer": {"name": "Dave", "email": "dme2223@gmail.com", "date": "2022-11-11T01:28:57Z"}, "message": "clang-format", "tree": {"sha": "7b6e1a5c85a4c8bd4df6310faedea8cdac254112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b6e1a5c85a4c8bd4df6310faedea8cdac254112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/comments", "author": {"login": "dme2", "id": 22139936, "node_id": "MDQ6VXNlcjIyMTM5OTM2", "avatar_url": "https://avatars.githubusercontent.com/u/22139936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dme2", "html_url": "https://github.com/dme2", "followers_url": "https://api.github.com/users/dme2/followers", "following_url": "https://api.github.com/users/dme2/following{/other_user}", "gists_url": "https://api.github.com/users/dme2/gists{/gist_id}", "starred_url": "https://api.github.com/users/dme2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dme2/subscriptions", "organizations_url": "https://api.github.com/users/dme2/orgs", "repos_url": "https://api.github.com/users/dme2/repos", "events_url": "https://api.github.com/users/dme2/events{/privacy}", "received_events_url": "https://api.github.com/users/dme2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dme2", "id": 22139936, "node_id": "MDQ6VXNlcjIyMTM5OTM2", "avatar_url": "https://avatars.githubusercontent.com/u/22139936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dme2", "html_url": "https://github.com/dme2", "followers_url": "https://api.github.com/users/dme2/followers", "following_url": "https://api.github.com/users/dme2/following{/other_user}", "gists_url": "https://api.github.com/users/dme2/gists{/gist_id}", "starred_url": "https://api.github.com/users/dme2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dme2/subscriptions", "organizations_url": "https://api.github.com/users/dme2/orgs", "repos_url": "https://api.github.com/users/dme2/repos", "events_url": "https://api.github.com/users/dme2/events{/privacy}", "received_events_url": "https://api.github.com/users/dme2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1531256aa661c8007c9bc6a496f5224bed55fe3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1531256aa661c8007c9bc6a496f5224bed55fe3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1531256aa661c8007c9bc6a496f5224bed55fe3a"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "2ba3cf5ef47e54a3ce8d0a2ae6b922146986a601", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "patch": "@@ -631,8 +631,10 @@ struct Visibility\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility(VisType vis_type, SimplePath in_path, Location locus = Location())\n-      : vis_type(vis_type), in_path(std::move(in_path)), locus(locus) {}\n+  Visibility (VisType vis_type, SimplePath in_path,\n+\t      Location locus = Location ())\n+    : vis_type (vis_type), in_path (std::move (in_path)), locus (locus)\n+  {}\n \n   VisType get_vis_type () const { return vis_type; }\n \n@@ -648,7 +650,7 @@ struct Visibility\n   // Returns whether visibility is public or not.\n   bool is_public () const { return vis_type != PRIV && !is_error (); }\n \n-  Location get_locus() const { return locus; }\n+  Location get_locus () const { return locus; }\n \n   // Creates an error visibility.\n   static Visibility create_error ()\n@@ -673,24 +675,25 @@ struct Visibility\n   // Creates a public visibility with crate-relative paths\n   static Visibility create_crate (Location crate_tok_location)\n   {\n-    return Visibility(PUB_CRATE,\n-                      SimplePath::from_str(\"crate\", crate_tok_location),\n-                      crate_tok_location);\n+    return Visibility (PUB_CRATE,\n+\t\t       SimplePath::from_str (\"crate\", crate_tok_location),\n+\t\t       crate_tok_location);\n   }\n \n   // Creates a public visibility with self-relative paths\n   static Visibility create_self (Location self_tok_location)\n   {\n-    return Visibility(PUB_SELF, SimplePath::from_str(\"self\", self_tok_location),\n-                      self_tok_location);\n+    return Visibility (PUB_SELF,\n+\t\t       SimplePath::from_str (\"self\", self_tok_location),\n+\t\t       self_tok_location);\n   }\n \n   // Creates a public visibility with parent module-relative paths\n   static Visibility create_super (Location super_tok_location)\n   {\n-    return Visibility(PUB_SUPER,\n-                      SimplePath::from_str(\"super\", super_tok_location),\n-                      super_tok_location);\n+    return Visibility (PUB_SUPER,\n+\t\t       SimplePath::from_str (\"super\", super_tok_location),\n+\t\t       super_tok_location);\n   }\n \n   // Creates a private visibility\n@@ -702,7 +705,7 @@ struct Visibility\n   // Creates a public visibility with a given path or whatever.\n   static Visibility create_in_path (SimplePath in_path)\n   {\n-    return Visibility(PUB_IN_PATH, std::move(in_path), in_path.get_locus());\n+    return Visibility (PUB_IN_PATH, std::move (in_path), in_path.get_locus ());\n   }\n \n   std::string as_string () const;"}, {"sha": "bffef4c361cde1ebfe067710391009eb09a4e35b", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "patch": "@@ -49,9 +49,9 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_CRATE:\n     case AST::Visibility::PUB_SUPER:\n     case AST::Visibility::PUB_IN_PATH:\n-      return Visibility(Visibility::VisType::RESTRICTED,\n-                        ASTLoweringSimplePath::translate(vis.get_path()),\n-                        vis.get_locus());\n+      return Visibility (Visibility::VisType::RESTRICTED,\n+\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()),\n+\t\t\t vis.get_locus ());\n       break;\n     }\n "}, {"sha": "4420a0de0765ba9dfdf162c18cc9db0b96df3303", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec62fce8e89a67b2f67d8c42a34e8b12f4765c08/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=ec62fce8e89a67b2f67d8c42a34e8b12f4765c08", "patch": "@@ -576,10 +576,11 @@ struct Visibility\n   // should this store location info?\n \n public:\n-  Visibility(VisType vis_type,\n-             HIR::SimplePath path = HIR::SimplePath::create_empty(),\n-             Location locus = Location())\n-      : vis_type(vis_type), path(std::move(path)), locus(locus) {}\n+  Visibility (VisType vis_type,\n+\t      HIR::SimplePath path = HIR::SimplePath::create_empty (),\n+\t      Location locus = Location ())\n+    : vis_type (vis_type), path (std::move (path)), locus (locus)\n+  {}\n \n   // Returns whether visibility is in an error state.\n   bool is_error () const { return vis_type == ERROR; }"}]}