{"sha": "85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViNTZhOTAxY2JmMmJkMDJmYjU0NWYwYWVjY2U2MWIwZjNiZjQwNQ==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2008-05-06T18:34:53Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2008-05-06T18:34:53Z"}, "message": "enum6.C, [...]: Broaden dg-options pattern.\n\n\t* g++.old-deja/g++.jason/enum6.C, g++.old-deja/g++.law/enum9.C,\n\tg++.old-deja/g++.other/enum4.C, gfortran/enum_9.f90,\n\tgfortran.dg/enum_10.f90: Broaden dg-options pattern.\n\nCo-Authored-By: Andrew Jenner <andrew@codesourcery.com>\nCo-Authored-By: Daniel Jacobowitz <dan@codesourcery.com>\n\nFrom-SVN: r134993", "tree": {"sha": "3407c825573e031f18d6378b7559d1143d98a28a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3407c825573e031f18d6378b7559d1143d98a28a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/comments", "author": null, "committer": null, "parents": [{"sha": "8fc541d3a5225284038d28ebe0b80cba2da3371b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc541d3a5225284038d28ebe0b80cba2da3371b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc541d3a5225284038d28ebe0b80cba2da3371b"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "7e4386ef3808d8abd76c2725448be08dd4ba7689", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "patch": "@@ -1,3 +1,11 @@\n+2008-05-06  Mark Shinwell  <shinwell@codesourcery.com>\n+\t    Daniel Jacobowitz  <dan@codesourcery.com>\n+\t    Andrew Jenner  <andrew@codesourcery.com>\n+\n+\t* g++.old-deja/g++.jason/enum6.C, g++.old-deja/g++.law/enum9.C,\n+\tg++.old-deja/g++.other/enum4.C, gfortran/enum_9.f90,\n+\tgfortran.dg/enum_10.f90: Broaden dg-options pattern.\n+\n 2008-05-06  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/35313, PR preprocessor/36088:"}, {"sha": "7be0cd868cc1723d52947b9c86457872f344fd43", "filename": "gcc/testsuite/g++.old-deja/g++.jason/enum6.C", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fenum6.C?ref=85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "patch": "@@ -1,6 +1,17 @@\n // { dg-do run  }\n // { dg-options \"-fshort-enums\" }\n \n+// On ARM EABI targets this testcase will cause a warning to be emitted\n+// whilst EABI attributes are being merged at link time unless\n+// the --no-enum-size-warning option is passed to the linker.  Whilst the\n+// enum-size attributes should only be emitted if there are values of\n+// enum type that can escape the compilation unit, gcc cannot currently\n+// detect this; if this facility is added then this linker option should\n+// not be needed.  arm-*-linux*eabi should be a good approximation to\n+// those platforms where the EABI supplement defines enum values to be\n+// 32 bits wide.\n+// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+\n #include <limits.h>\n \n enum A { a1 = 0x7fffffff };"}, {"sha": "5a74b2f6fdd62c4e9405f7d1f78c22eace4a4678", "filename": "gcc/testsuite/g++.old-deja/g++.law/enum9.C", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum9.C?ref=85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "patch": "@@ -1,5 +1,17 @@\n // { dg-do run  }\n // { dg-options \"-fshort-enums\" }\n+\n+// On ARM EABI targets this testcase will cause a warning to be emitted\n+// whilst EABI attributes are being merged at link time unless\n+// the --no-enum-size-warning option is passed to the linker.  Whilst the\n+// enum-size attributes should only be emitted if there are values of\n+// enum type that can escape the compilation unit, gcc cannot currently\n+// detect this; if this facility is added then this linker option should\n+// not be needed.  arm-*-linux*eabi should be a good approximation to\n+// those platforms where the EABI supplement defines enum values to be\n+// 32 bits wide.\n+// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+\n // GROUPS passed enums\n   extern \"C\" int printf (const char *, ...);\n "}, {"sha": "429e8127c2b0eb21e59b7c2495f7d9b20ce73530", "filename": "gcc/testsuite/g++.old-deja/g++.other/enum4.C", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum4.C?ref=85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "patch": "@@ -1,7 +1,19 @@\n // { dg-do run  }\n // { dg-options \"-fshort-enums\" }\n+\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n+// On ARM EABI targets this testcase will cause a warning to be emitted\n+// whilst EABI attributes are being merged at link time unless\n+// the --no-enum-size-warning option is passed to the linker.  Whilst the\n+// enum-size attributes should only be emitted if there are values of\n+// enum type that can escape the compilation unit, gcc cannot currently\n+// detect this; if this facility is added then this linker option should\n+// not be needed.  arm-*-linux*eabi should be a good approximation to\n+// those platforms where the EABI supplement defines enum values to be\n+// 32 bits wide.\n+// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+\n enum E { \n   a = -312\n };"}, {"sha": "99a16901c4b5a94070895bdb196e919cdacf73c3", "filename": "gcc/testsuite/gfortran.dg/enum_10.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_10.f90?ref=85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "patch": "@@ -1,6 +1,7 @@\n ! { dg-do run }\n ! { dg-additional-sources enum_10.c }\n ! { dg-options \"-fshort-enums -w\" }\n+! { dg-options \"-fshort-enums -w -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n ! Make sure short enums are indeed interoperable with the\n ! corresponding C type.\n "}, {"sha": "8a5c60a10f4c026f54a0068860ec4709f687088a", "filename": "gcc/testsuite/gfortran.dg/enum_9.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b56a901cbf2bd02fb545f0aecce61b0f3bf405/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_9.f90?ref=85b56a901cbf2bd02fb545f0aecce61b0f3bf405", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do run }\n ! { dg-options \"-fshort-enums\" }\n+! { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n ! Program to test enumerations when option -fshort-enums is given\n \n program main"}]}