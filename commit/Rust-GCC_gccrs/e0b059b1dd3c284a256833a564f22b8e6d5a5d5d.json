{"sha": "e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiMDU5YjFkZDNjMjg0YTI1NjgzM2E1NjRmMjJiOGU2ZDVhNWQ1ZA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-02-04T18:23:35Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-02-04T18:23:35Z"}, "message": "This patch fixes an exponential issue in ccmp.c.\n\nThis patch fixes an exponential issue in ccmp.c.  When deciding which ccmp\nexpansion to use, the tree nodes gs0 and gs1 are fully expanded twice.  If\nthey contain more CCMP opportunities, their subtrees are also expanded twice.\nWhen the trees are complex the expansion takes exponential time and memory.\nAs a workaround in GCC6 compute the cost of the first expansion early, and\nonly try the alternative expansion if the cost is low enough.  This rarely\naffects real code, eg. SPECINT2006 has identical codesize.\n\n2016-02-04  Wilco Dijkstra  <wdijkstr@arm.com>\n\n    gcc/\n\tPR target/69619\n\t* ccmp.c (expand_ccmp_expr_1): Avoid evaluating gs0/gs1\n\ttwice when complex.\n\n    gcc/testsuite/\n\tPR target/69619\n\t* gcc.dg/pr69619.c: Add new test.\n\nFrom-SVN: r233145", "tree": {"sha": "a88004c404d55761241e320b6f30461513a552ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a88004c404d55761241e320b6f30461513a552ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/comments", "author": null, "committer": null, "parents": [{"sha": "56f3bb3822dfc1c10df8d561d7bb6ba55f2e1e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f3bb3822dfc1c10df8d561d7bb6ba55f2e1e06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f3bb3822dfc1c10df8d561d7bb6ba55f2e1e06"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "7c2dae8528723c9d045db93ff2327f175aede1c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "patch": "@@ -1,3 +1,9 @@\n+2016-02-04  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/69619\n+\t* ccmp.c (expand_ccmp_expr_1): Avoid evaluating gs0/gs1\n+\ttwice when complex.\n+\n 2016-02-04  Mike Frysinger  <vapier@gentoo.org>\n \n \t* doc/invoke.texi: Delete -mno-fma4."}, {"sha": "6f95acec95b547b5efb67152d373a174b4ac092c", "filename": "gcc/ccmp.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2Fccmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2Fccmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fccmp.c?ref=e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "patch": "@@ -170,7 +170,7 @@ expand_ccmp_expr_1 (gimple *g, rtx *prep_seq, rtx *gen_seq)\n \t  int unsignedp0, unsignedp1;\n \t  rtx_code rcode0, rcode1;\n \t  int speed_p = optimize_insn_for_speed_p ();\n-\t  rtx tmp2, ret = NULL_RTX, ret2 = NULL_RTX;\n+\t  rtx tmp2 = NULL_RTX, ret = NULL_RTX, ret2 = NULL_RTX;\n \t  unsigned cost1 = MAX_COST;\n \t  unsigned cost2 = MAX_COST;\n \n@@ -183,19 +183,25 @@ expand_ccmp_expr_1 (gimple *g, rtx *prep_seq, rtx *gen_seq)\n \t\t\t\t\tgimple_assign_rhs1 (gs0),\n \t\t\t\t\tgimple_assign_rhs2 (gs0));\n \n-\t  tmp2 = targetm.gen_ccmp_first (&prep_seq_2, &gen_seq_2, rcode1,\n-\t\t\t\t\t gimple_assign_rhs1 (gs1),\n-\t\t\t\t\t gimple_assign_rhs2 (gs1));\n-\n-\t  if (!tmp && !tmp2)\n-\t    return NULL_RTX;\n-\n \t  if (tmp != NULL)\n \t    {\n \t      ret = expand_ccmp_next (gs1, code, tmp, &prep_seq_1, &gen_seq_1);\n \t      cost1 = seq_cost (safe_as_a <rtx_insn *> (prep_seq_1), speed_p);\n \t      cost1 += seq_cost (safe_as_a <rtx_insn *> (gen_seq_1), speed_p);\n \t    }\n+\n+\t  /* FIXME: Temporary workaround for PR69619.\n+\t     Avoid exponential compile time due to expanding gs0 and gs1 twice.\n+\t     If gs0 and gs1 are complex, the cost will be high, so avoid\n+\t     reevaluation if above an arbitrary threshold.  */\n+\t  if (tmp == NULL || cost1 < COSTS_N_INSNS (25))\n+\t    tmp2 = targetm.gen_ccmp_first (&prep_seq_2, &gen_seq_2, rcode1,\n+\t\t\t\t\t   gimple_assign_rhs1 (gs1),\n+\t\t\t\t\t   gimple_assign_rhs2 (gs1));\n+\n+\t  if (!tmp && !tmp2)\n+\t    return NULL_RTX;\n+\n \t  if (tmp2 != NULL)\n \t    {\n \t      ret2 = expand_ccmp_next (gs0, code, tmp2, &prep_seq_2,"}, {"sha": "f2f73b609fd4962e0c0ecfb18621b721ae140590", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "patch": "@@ -1,3 +1,8 @@\n+2016-02-04  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/69619\n+\t* gcc.dg/pr69619.c: Add new test.\n+\n 2016-02-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/69577"}, {"sha": "a200bdf310fc2c02b008e0c13fb9c917784423f8", "filename": "gcc/testsuite/gcc.dg/pr69619.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69619.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b059b1dd3c284a256833a564f22b8e6d5a5d5d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69619.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69619.c?ref=e0b059b1dd3c284a256833a564f22b8e6d5a5d5d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a, b, c, d;\n+int e[100];\n+void\n+fn1 ()\n+{\n+  int *f = &d;\n+  c = 6;\n+  for (; c; c--)\n+    {\n+      b = 0;\n+      for (; b <= 5; b++)\n+\t{\n+\t  short g = e[(b + 2) * 9 + c];\n+\t  *f = *f == a && e[(b + 2) * 9 + c];\n+\t}\n+    }\n+}"}]}