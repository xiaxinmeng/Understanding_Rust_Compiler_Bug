{"sha": "fd1334791e85ef813ada97b6931fb0d912920f28", "node_id": "C_kwDOANBUbNoAKGZkMTMzNDc5MWU4NWVmODEzYWRhOTdiNjkzMWZiMGQ5MTI5MjBmMjg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-29T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-29T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "18b3be6d20213a990ef5fd9d677d154b1133b379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b3be6d20213a990ef5fd9d677d154b1133b379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd1334791e85ef813ada97b6931fb0d912920f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1334791e85ef813ada97b6931fb0d912920f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1334791e85ef813ada97b6931fb0d912920f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1334791e85ef813ada97b6931fb0d912920f28/comments", "author": null, "committer": null, "parents": [{"sha": "68c081bb437d7383481bb75e1f79975f63dc7661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c081bb437d7383481bb75e1f79975f63dc7661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c081bb437d7383481bb75e1f79975f63dc7661"}], "stats": {"total": 469, "additions": 468, "deletions": 1}, "files": [{"sha": "9bffeeab182c4c1807fd58d912a17456ad938161", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,9 @@\n+2021-09-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac (skipdirs): Add the contents of target_configdirs if\n+\twe are not building gcc.\n+\n 2021-09-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.def: Back-port commits ba4d88ad892f and"}, {"sha": "bfb6676ae6d2d99d7f300c3f4cb31d39db5459a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,153 @@\n+2021-09-28  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* config/riscv/riscv.md\t(mulv<mode>4): Call gen_smul<mode>3_highpart.\n+\t(<u>mulditi3): Call <su>muldi3_highpart.\n+\t(<u>muldi3_highpart): Rename to <su>muldi3_highpart.\n+\t(<u>mulsidi3): Call <su>mulsi3_highpart.\n+\t(<u>mulsi3_highpart): Rename to <su>mulsi3_highpart.\n+\n+2021-09-28  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.h (DSYMUTIL_SPEC): Recognize D sources.\n+\n+2021-09-28  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/rs6000/darwin.h (FIXED_R13): Add for PPC64.\n+\t(FIRST_SAVED_GP_REGNO): Save from R13 even when it is one\n+\tof the fixed regs.\n+\n+2021-09-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_FL_LS64): Define\n+\t(AARCH64_FL_V8_7): Likewise.\n+\t(AARCH64_FL_FOR_ARCH8_7): Likewise.\n+\t* config/aarch64/aarch64-arches.def (armv8.7-a): Define.\n+\t* config/aarch64/aarch64-option-extensions.def (ls64): Define.\n+\t* doc/invoke.texi: Document the above.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* dbgcnt.c (dbg_cnt_counter): New.\n+\t* dbgcnt.h (dbg_cnt_counter): New.\n+\t* dumpfile.c (dump_options): Add entry for TDF_THREADING.\n+\t* dumpfile.h (enum dump_flag): Add TDF_THREADING.\n+\t* gimple-range-path.cc (DEBUG_SOLVER): Use TDF_THREADING.\n+\t* tree-ssa-threadupdate.c (dump_jump_thread_path): Dump out\n+\tdebug counter.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* cfgcleanup.c (pass_jump::execute): Check\n+\tflag_expensive_optimizations.\n+\t(pass_jump_after_combine::gate): Same.\n+\t* doc/invoke.texi (-fthread-jumps): Enable for -O1.\n+\t* opts.c (default_options_table): Enable -fthread-jumps at -O1.\n+\t* tree-ssa-threadupdate.c\n+\t(fwd_jt_path_registry::remove_jump_threads_including): Bail unless\n+\tflag_thread_jumps.\n+\n+2021-09-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* tree-ssa-reassoc.c (biased_names): New global.\n+\t(propagate_bias_p): New function.\n+\t(loop_carried_phi): Remove.\n+\t(propagate_rank): Propagate bias along single uses.\n+\t(get_rank): Update biased_names when needed.\n+\n+2021-09-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* passes.def (pass_reassoc): Rename parameter to early_p.\n+\t* tree-ssa-reassoc.c (reassoc_bias_loop_carried_phi_ranks_p):\n+\tNew variable.\n+\t(phi_rank): Don't bias loop-carried phi ranks\n+\tbefore vectorization pass.\n+\t(execute_reassoc): Add bias_loop_carried_phi_ranks_p parameter.\n+\t(pass_reassoc::pass_reassoc): Add bias_loop_carried_phi_ranks_p\n+\tinitializer.\n+\t(pass_reassoc::set_param): Set bias_loop_carried_phi_ranks_p\n+\tvalue.\n+\t(pass_reassoc::execute): Pass bias_loop_carried_phi_ranks_p to\n+\texecute_reassoc.\n+\t(pass_reassoc::bias_loop_carried_phi_ranks_p): New member.\n+\n+2021-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102498\n+\t* config/i386/i386.c (standard_80387_constant_p): Don't recognize\n+\tspecial 80387 instruction XFmode constants if flag_rounding_math.\n+\n+2021-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100112\n+\t* tree-ssa-sccvn.c (visit_reference_op_load): Record the\n+\treferece into the hashtable twice in case last_vuse is\n+\tdifferent from the original vuse on the stmt.\n+\n+2021-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102492\n+\t* gimplify.c (gimplify_adjust_omp_clauses_1): Don't call the\n+\tomp_finish_clause langhook on implicitly added OMP_CLAUSE_PRIVATE\n+\tclauses on SIMD constructs.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102511\n+\t* gimple-range-path.cc (path_range_query::range_on_path_entry):\n+\tReturn VARYING when nothing found.\n+\n+2021-09-28  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/102230\n+\t* config/i386/i386.h (VALID_AVX512FP16_REG_MODE): Add\n+\tV2HF mode check.\n+\t(VALID_SSE2_REG_VHF_MODE): Add V4HFmode and V2HFmode.\n+\t(VALID_MMX_REG_MODE): Add V4HFmode.\n+\t(SSE_REG_MODE_P): Replace VALID_AVX512FP16_REG_MODE with\n+\tvector mode condition.\n+\t* config/i386/i386.c (classify_argument): Parse V4HF/V2HF\n+\tvia sse regs.\n+\t(function_arg_32): Add V4HFmode.\n+\t(function_arg_advance_32): Likewise.\n+\t* config/i386/i386.md (mode): Add V4HF/V2HF.\n+\t(MODE_SIZE): Likewise.\n+\t* config/i386/mmx.md (MMXMODE): Add V4HF mode.\n+\t(V_32): Add V2HF mode.\n+\t(VHF_32_64): New mode iterator.\n+\t(*mov<mode>_internal): Adjust sse alternatives to support\n+\tV4HF mode move.\n+\t(*mov<mode>_internal): Adjust sse alternatives to support\n+\tV2HF mode move.\n+\t(<insn><mode>3): New define_insn for add/sub/mul/div.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (pass_thread_jumps::gate): Check\n+\tflag_thread_jumps.\n+\t(pass_early_thread_jumps::gate): Same.\n+\t* tree-ssa-threadedge.c (jump_threader::thread_outgoing_edges):\n+\tReturn if !flag_thread_jumps.\n+\t* tree-ssa-threadupdate.c\n+\t(jt_path_registry::register_jump_thread): Assert that\n+\tflag_thread_jumps is true.\n+\n+2021-09-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* simplify-rtx.c\n+\t(simplify_context::simplify_binary_operation_1): Relax\n+\tcondition of simplifying (vec_concat:M (vec_select op0\n+\tindex0)(vec_select op1 index1)) to allow different modes\n+\tbetween op0 and M, but have same inner mode.\n+\n+2021-09-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-expand.c (emit_reduc_half): Handle\n+\tV8HF/V16HF/V32HFmode.\n+\t* config/i386/sse.md (REDUC_SSE_PLUS_MODE): Add V8HF.\n+\t(REDUC_SSE_SMINMAX_MODE): Ditto.\n+\t(REDUC_PLUS_MODE): Add V16HF and V32HF.\n+\t(REDUC_SMINMAX_MODE): Ditto.\n+\n 2021-09-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-range-path.cc"}, {"sha": "d0eb6b61c0ff47144fcfb445945bfd82bcd13148", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1 +1 @@\n-20210928\n+20210929"}, {"sha": "80ef7353236348537806c1b109600e5b1a8b4fbb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,13 @@\n+2021-09-28  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c/32122\n+\t* c-parser.c (c_parser_statement_after_labels): Pass\n+\tthe c_expr instead of the tree to c_finish_goto_ptr.\n+\t* c-typeck.c (c_finish_goto_ptr): Change the second\n+\targument type to c_expr.\n+\t* c-tree.h (c_finish_goto_ptr): Likewise.\n+\tError out if the expression was not of a pointer type.\n+\n 2021-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_allocate): Parse allocate clause"}, {"sha": "7378dfa609ba4968f123b8f4a9cf9edd38f60fa1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,17 @@\n+2021-09-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99909\n+\t* pt.c (coerce_template_template_parms): Keep\n+\tprocessing_template_decl set around the call to unify as well.\n+\n+2021-09-28  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/102454\n+\t* coroutines.cc (analyze_fn_parms): Clean up synthetic names for\n+\tunnamed function params.\n+\t(morph_fn_to_coro): Do not try to set a guard variable for param\n+\tDTORs in the ramp, unless we have exceptions active.\n+\n 2021-09-27  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/102479"}, {"sha": "ee8fff8a66fa1b346fb14fe65297c44f221e6c81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,121 @@\n+2021-09-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99909\n+\t* g++.dg/cpp2a/concepts-ttp3.C: New test.\n+\n+2021-09-28  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR c/32122\n+\t* gcc.dg/comp-goto-5.c: New test.\n+\t* gcc.dg/comp-goto-6.c: New test.\n+\n+2021-09-28  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/102454\n+\t* g++.dg/coroutines/pr102454.C: New test.\n+\n+2021-09-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/reassoc-46.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-46.h: Common code for new tests.\n+\t* gcc.dg/tree-ssa/reassoc-47.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-48.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-49.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-50.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-51.c: New test.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/auto-init-uninit-1.c: Adjust.\n+\t* gcc.dg/auto-init-uninit-15.c: Same.\n+\t* gcc.dg/guality/example.c: Same.\n+\t* gcc.dg/loop-8.c: Same.\n+\t* gcc.dg/strlenopt-40.c: Same.\n+\t* gcc.dg/tree-ssa/pr18133-2.c: Same.\n+\t* gcc.dg/tree-ssa/pr18134.c: Same.\n+\t* gcc.dg/uninit-1.c: Same.\n+\t* gcc.dg/uninit-pr44547.c: Same.\n+\t* gcc.dg/uninit-pr59970.c: Same.\n+\n+2021-09-28  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/assumed_rank_22_aux.c: Adjust messages printed.\n+\n+2021-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102498\n+\t* gcc.target/i386/pr102498.c: New test.\n+\n+2021-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99793\n+\t* gcc.dg/tree-ssa/pr99793.c: New testcase.\n+\n+2021-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100112\n+\t* gcc.dg/tree-ssa/ssa-fre-95.c: New testcase.\n+\n+2021-09-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/102492\n+\t* g++.dg/gomp/simd-3.C: New test.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/102511\n+\t* gcc.dg/pr102511.c: New test.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Adjust.\n+\n+2021-09-28  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/102230\n+\t* gcc.target/i386/avx512fp16-floatvnhf.c: Remove xfail.\n+\t* gcc.target/i386/avx512fp16-trunc-extendvnhf.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-truncvnhf.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-64-32-vecop-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-64-32-vecop-2.c: Ditto.\n+\t* gcc.target/i386/pr102230.c: Ditto.\n+\n+2021-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vect-pr97352.c: Pass -mno-avx2 -mno-avx512f.\n+\n+2021-09-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102500\n+\t* gfortran.dg/include_15.f90: Add 'dg-prune-output' to prune\n+\t-Wmissing-include-dirs output printed or not depending on\n+\thow the testsuite is run.\n+\n+2021-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-pr65935.c: Prefer 128bit vectorization\n+\ton x86.\n+\n+2021-09-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/auto-init-uninit-1.c: Add -fthread-jumps.\n+\t* gcc.dg/auto-init-uninit-15.c: Same.\n+\t* gcc.dg/guality/example.c: Same.\n+\t* gcc.dg/loop-8.c: Same.\n+\t* gcc.dg/strlenopt-40.c: Same.\n+\t* gcc.dg/tree-ssa/pr18133-2.c: Same.\n+\t* gcc.dg/tree-ssa/pr18134.c: Same.\n+\t* gcc.dg/uninit-1.c: Same.\n+\t* gcc.dg/uninit-pr44547.c: Same.\n+\t* gcc.dg/uninit-pr59970.c: Same.\n+\n+2021-09-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/vect-rebuild.c: Adjust testcases.\n+\t* gcc.target/i386/avx512f-vect-rebuild.c: New test.\n+\n+2021-09-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-reduce-op-2.c: New test.\n+\t* gcc.target/i386/avx512fp16-reduce-op-3.c: New test.\n+\n 2021-09-27  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/102479"}, {"sha": "188445eab97fbf6da1fc79de137c0c666e0c8650", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,8 @@\n+2021-09-28  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/i386/libgcc-darwin.ver: Add Symbols for\n+\t__cpu_model, __cpu_indicator_init.\n+\n 2021-09-22  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/i386/sfp-machine.h: Guard Mach-O-specific code"}, {"sha": "aceb6affc7acc04d9776ce4da99543eb491e08d3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,15 @@\n+2021-09-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libgomp/96661\n+\t* configure.ac: Only check for int-type = 2*size_t support when\n+\tbuilding with Fortran support.\n+\t* configure: Regenerate.\n+\n+2021-09-28  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/if-1.f90: Adjust.\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n+\n 2021-09-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* team.c: Initialize start_data."}, {"sha": "fd4fcad50d42fc439c212ce30128b4a610737a26", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1334791e85ef813ada97b6931fb0d912920f28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1334791e85ef813ada97b6931fb0d912920f28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd1334791e85ef813ada97b6931fb0d912920f28", "patch": "@@ -1,3 +1,155 @@\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_timed_wait.h (__platform_wait_until_impl):\n+\tReturn false for ETIMEDOUT and true otherwise.\n+\n+2021-09-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adapt dg-prune-output message\n+\tto also match message with '__8' in it.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_automaton.h (_NFA_base::_SizeT): Remove.\n+\t* include/bits/regex_compiler.h (_Compiler::_IterT): Remove.\n+\t* include/bits/regex_compiler.tcc: Likewise.\n+\t* include/bits/regex_scanner.h (_Scanner::_IterT): Remove.\n+\t* include/bits/regex_scanner.tcc: Likewise.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_compiler.tcc: Add line break in empty while\n+\tstatement.\n+\t* include/bits/regex_executor.tcc: Avoid unused parameter\n+\twarning.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (basic_regex, swap): Add noexcept to\n+\tnon-throwing functions.\n+\t* include/bits/regex_automaton.h (_State_base, _State)\n+\t(_NFA_base): Likewise.\n+\t* include/bits/regex_compiler.h (_Compiler): Likewise.\n+\t* include/bits/regex_error.h (regex_error::code()): Likewise.\n+\t* include/bits/regex_scanner.h (_Scanner): Likewise.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_wait.h (_GLIBCXX_HAVE_PLATFORM_WAIT):\n+\tDefine before first attempt to check it.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/priority_queue/requirements/explicit_instantiation/1.cc:\n+\tDo not check non-default constructible sequences when\n+\t_GLIBCXX_CONCEPT_CHECKS is defined.\n+\t* testsuite/23_containers/priority_queue/requirements/explicit_instantiation/1_c++98.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/queue/requirements/explicit_instantiation/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/queue/requirements/explicit_instantiation/1_c++98.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/stack/requirements/explicit_instantiation/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/stack/requirements/explicit_instantiation/1_c++98.cc:\n+\tLikewise.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/deque/requirements/explicit_instantiation/3.cc:\n+\tDo not test implicit allocator rebinding when _GLIBCXX_CONCEPT_CHECKS\n+\tis defined.\n+\t* testsuite/23_containers/forward_list/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multimap/requirements/explicit_instantiation/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/requirements/explicit_instantiation/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/explicit_instantiation/3.cc:\n+\tLikewise.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/boost_concept_check.h (_ForwardIteratorConcept)\n+\t(_BidirectionalIteratorConcept, _RandomAccessIteratorConcept):\n+\tCheck result types of iterator operations.\n+\t(_Mutable_ForwardIteratorConcept): Check that iterator's\n+\treference type is a reference to its value type.\n+\t(_Mutable_BidirectionalIteratorConcept): Do not require the\n+\tvalue type to be assignable.\n+\t(_Mutable_RandomAccessIteratorConcept): Likewise.\n+\t* testsuite/24_iterators/operations/prev_neg.cc: Adjust dg-error\n+\tline number.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/25_algorithms/copy/34595.cc: Add missing operation\n+\tfor type used as an iterator.\n+\t* testsuite/25_algorithms/unique_copy/check_type.cc: Likewise.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/is_nothrow_swappable/value.h: Use custom\n+\tcomparison function for priority_queue of type with no\n+\trelational operators.\n+\t* testsuite/20_util/is_swappable/value.h: Likewise.\n+\t* testsuite/24_iterators/output/concept.cc: Add operator< to\n+\ttype used in set.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/boost_concept_check.h (_OutputIteratorConcept):\n+\tUse a function to preserve value category of the type.\n+\t* include/bits/stl_algobase.h (copy, move, fill_n): Use a\n+\treference as the second argument for _OutputIteratorConcept.\n+\t(copy_backward, move_backward): Use _OutputIteratorConcept\n+\tinstead of _ConvertibleConcept.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (pointer_traits): Define partial\n+\tspecialization for __normal_iterator.\n+\t* testsuite/24_iterators/normal_iterator/to_address.cc: New test.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/move.h (forward(remove_reference_t<T>&&)):\n+\tImprove text of static_assert.\n+\t* testsuite/20_util/forward/c_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n+\n+2021-09-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102499\n+\t* include/bits/fs_path.h (path::begin, path::end): Add noexcept\n+\tto declarations, to match definitions.\n+\n 2021-09-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/range_access.h (cbegin, cend): Remove redundant"}]}