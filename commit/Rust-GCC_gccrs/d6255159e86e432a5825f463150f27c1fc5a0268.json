{"sha": "d6255159e86e432a5825f463150f27c1fc5a0268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyNTUxNTllODZlNDMyYTU4MjVmNDYzMTUwZjI3YzFmYzVhMDI2OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-18T16:03:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-18T16:03:13Z"}, "message": "runtime: don't call __go_alloc/__go_free in environment functions\n    \n    Reviewed-on: https://go-review.googlesource.com/33363\n\nFrom-SVN: r242594", "tree": {"sha": "356d413f3cd82dbe584ad7d102361dc23a5e300a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356d413f3cd82dbe584ad7d102361dc23a5e300a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6255159e86e432a5825f463150f27c1fc5a0268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6255159e86e432a5825f463150f27c1fc5a0268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6255159e86e432a5825f463150f27c1fc5a0268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6255159e86e432a5825f463150f27c1fc5a0268/comments", "author": null, "committer": null, "parents": [{"sha": "d519aeda8b73ab7a9697b1817ed4655dfb5bbdb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d519aeda8b73ab7a9697b1817ed4655dfb5bbdb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d519aeda8b73ab7a9697b1817ed4655dfb5bbdb4"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "6e29f40af134006d83f9143683d94c3c8e98cd51", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6255159e86e432a5825f463150f27c1fc5a0268/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6255159e86e432a5825f463150f27c1fc5a0268/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d6255159e86e432a5825f463150f27c1fc5a0268", "patch": "@@ -1,4 +1,4 @@\n-2ab785788691ad289f838a0b3a6bc9013d0fc337\n+fc4ca600b2fc6de81fd3c4014542d6a50593db1a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "81b1775d2c903a74ba5e3c0384cec40796b27789", "filename": "libgo/runtime/go-setenv.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6255159e86e432a5825f463150f27c1fc5a0268/libgo%2Fruntime%2Fgo-setenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6255159e86e432a5825f463150f27c1fc5a0268/libgo%2Fruntime%2Fgo-setenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-setenv.c?ref=d6255159e86e432a5825f463150f27c1fc5a0268", "patch": "@@ -9,10 +9,7 @@\n #include <stddef.h>\n #include <stdlib.h>\n \n-#include \"go-alloc.h\"\n #include \"runtime.h\"\n-#include \"arch.h\"\n-#include \"malloc.h\"\n \n /* Set the C environment from Go.  This is called by syscall.Setenv.  */\n \n@@ -25,7 +22,6 @@ setenv_c (String k, String v)\n   unsigned char *kn;\n   const byte *vs;\n   unsigned char *vn;\n-  intgo len;\n \n   ks = k.str;\n   if (ks == NULL)\n@@ -39,25 +35,23 @@ setenv_c (String k, String v)\n \n #ifdef HAVE_SETENV\n \n-  if (ks != NULL && ks[k.len] != 0)\n+  if (ks[k.len] != 0)\n     {\n-      // Objects that are explicitly freed must be at least 16 bytes in size,\n-      // so that they are not allocated using tiny alloc.\n-      len = k.len + 1;\n-      if (len < TinySize)\n-\tlen = TinySize;\n-      kn = __go_alloc (len);\n+      kn = malloc (k.len + 1);\n+      if (kn == NULL)\n+\truntime_throw (\"out of malloc memory\");\n       __builtin_memcpy (kn, ks, k.len);\n+      kn[k.len] = '\\0';\n       ks = kn;\n     }\n \n-  if (vs != NULL && vs[v.len] != 0)\n+  if (vs[v.len] != 0)\n     {\n-      len = v.len + 1;\n-      if (len < TinySize)\n-\tlen = TinySize;\n-      vn = __go_alloc (len);\n+      vn = malloc (v.len + 1);\n+      if (vn == NULL)\n+\truntime_throw (\"out of malloc memory\");\n       __builtin_memcpy (vn, vs, v.len);\n+      vn[v.len] = '\\0';\n       vs = vn;\n     }\n \n@@ -66,19 +60,20 @@ setenv_c (String k, String v)\n #else /* !defined(HAVE_SETENV) */\n \n   len = k.len + v.len + 2;\n-  if (len < TinySize)\n-    len = TinySize;\n-  kn = __go_alloc (len);\n+  kn = malloc (len);\n+  if (kn == NULL)\n+    runtime_throw (\"out of malloc memory\");\n   __builtin_memcpy (kn, ks, k.len);\n   kn[k.len] = '=';\n   __builtin_memcpy (kn + k.len + 1, vs, v.len);\n   kn[k.len + v.len + 1] = '\\0';\n   putenv ((char *) kn);\n+  kn = NULL; /* putenv takes ownership of the string.  */\n \n #endif /* !defined(HAVE_SETENV) */\n \n   if (kn != NULL)\n-    __go_free (kn);\n+    free (kn);\n   if (vn != NULL)\n-    __go_free (vn);\n+    free (vn);\n }"}, {"sha": "21359975f2b3e9053496482ef853ddf4192bab0b", "filename": "libgo/runtime/go-unsetenv.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6255159e86e432a5825f463150f27c1fc5a0268/libgo%2Fruntime%2Fgo-unsetenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6255159e86e432a5825f463150f27c1fc5a0268/libgo%2Fruntime%2Fgo-unsetenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsetenv.c?ref=d6255159e86e432a5825f463150f27c1fc5a0268", "patch": "@@ -9,10 +9,7 @@\n #include <stddef.h>\n #include <stdlib.h>\n \n-#include \"go-alloc.h\"\n #include \"runtime.h\"\n-#include \"arch.h\"\n-#include \"malloc.h\"\n \n /* Unset an environment variable from Go.  This is called by\n    syscall.Unsetenv.  */\n@@ -24,7 +21,6 @@ unsetenv_c (String k)\n {\n   const byte *ks;\n   unsigned char *kn;\n-  intgo len;\n \n   ks = k.str;\n   if (ks == NULL)\n@@ -33,14 +29,11 @@ unsetenv_c (String k)\n \n #ifdef HAVE_UNSETENV\n \n-  if (ks != NULL && ks[k.len] != 0)\n+  if (ks[k.len] != 0)\n     {\n-      // Objects that are explicitly freed must be at least 16 bytes in size,\n-      // so that they are not allocated using tiny alloc.\n-      len = k.len + 1;\n-      if (len < TinySize)\n-\tlen = TinySize;\n-      kn = __go_alloc (len);\n+      kn = malloc (k.len + 1);\n+      if (kn == NULL)\n+\truntime_throw (\"out of malloc memory\");\n       __builtin_memcpy (kn, ks, k.len);\n       ks = kn;\n     }\n@@ -50,5 +43,5 @@ unsetenv_c (String k)\n #endif /* !defined(HAVE_UNSETENV) */\n \n   if (kn != NULL)\n-    __go_free (kn);\n+    free (kn);\n }"}]}