{"sha": "f742bead5f4eb94908f188b99a3b261de0be9ca2", "node_id": "C_kwDOANBUbNoAKGY3NDJiZWFkNWY0ZWI5NDkwOGYxODhiOTlhM2IyNjFkZTBiZTljYTI", "commit": {"author": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-12-11T19:05:06Z"}, "committer": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-12-11T19:05:06Z"}, "message": "Constant folder now returns error_mark_node instead of nullptr\n\nRemoved nullptr checking on results from constant folder because when the\nresult is already error_mark_node, we no longer need to check if the result\nis nullptr.\n\nFixes #692\n\nSigned-off-by: Nirmal Patel <npate012@gmail.com>", "tree": {"sha": "5adb6f371e41da32650cb8064c2b1d9e169b292a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5adb6f371e41da32650cb8064c2b1d9e169b292a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f742bead5f4eb94908f188b99a3b261de0be9ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742bead5f4eb94908f188b99a3b261de0be9ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f742bead5f4eb94908f188b99a3b261de0be9ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742bead5f4eb94908f188b99a3b261de0be9ca2/comments", "author": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0024bc2f028369b871a65ceb11b2fddfb0f9c3aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0024bc2f028369b871a65ceb11b2fddfb0f9c3aa"}], "stats": {"total": 16, "additions": 2, "deletions": 14}, "files": [{"sha": "1545c1a6efd6a622772a8cec6047618e7ed95d39", "filename": "gcc/rust/typecheck/rust-hir-const-fold.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.cc?ref=f742bead5f4eb94908f188b99a3b261de0be9ca2", "patch": "@@ -64,8 +64,6 @@ void\n ConstFoldItem::visit (HIR::ConstantItem &item)\n {\n   auto folded_expr = ConstFoldExpr::fold (item.get_expr ());\n-  if (folded_expr == nullptr)\n-    return;\n \n   folded = folded_expr;\n }"}, {"sha": "d1f712777548ef4d0e7ed2e2fec2c78211bf707d", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=f742bead5f4eb94908f188b99a3b261de0be9ca2", "patch": "@@ -299,7 +299,7 @@ class ConstFoldExpr : public ConstFoldBase\n     if (folder.ctx->get_backend ()->is_error_expression (folder.folded))\n       {\n \trust_error_at (expr->get_locus (), \"non const value\");\n-\treturn nullptr;\n+\treturn folder.ctx->get_backend ()->error_expression ();\n       }\n \n     folder.ctx->insert_const (expr->get_mappings ().get_hirid (),\n@@ -423,12 +423,7 @@ class ConstFoldExpr : public ConstFoldBase\n   void visit (HIR::ArithmeticOrLogicalExpr &expr) override\n   {\n     auto lhs = ConstFoldExpr::fold (expr.get_lhs ());\n-    if (lhs == nullptr)\n-      return;\n-\n     auto rhs = ConstFoldExpr::fold (expr.get_rhs ());\n-    if (rhs == nullptr)\n-      return;\n \n     auto op = expr.get_expr_type ();\n     auto location = expr.get_locus ();\n@@ -441,8 +436,6 @@ class ConstFoldExpr : public ConstFoldBase\n   void visit (HIR::NegationExpr &expr) override\n   {\n     auto negated_expr = ConstFoldExpr::fold (expr.get_expr ().get ());\n-    if (negated_expr == nullptr)\n-      return;\n \n     auto op = expr.get_expr_type ();\n     auto location = expr.get_locus ();"}, {"sha": "4df7df6dd12837b31b63a748631af87d245dc155", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h?ref=f742bead5f4eb94908f188b99a3b261de0be9ca2", "patch": "@@ -74,8 +74,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n     auto backend = rust_get_backend ();\n     auto folded_discriminant\n       = ConstFold::ConstFoldExpr::fold (discriminant.get ());\n-    if (folded_discriminant == nullptr\n-\t|| backend->is_error_expression (folded_discriminant))\n+    if (backend->is_error_expression (folded_discriminant))\n       return;\n \n     size_t specified_discriminant;"}, {"sha": "4596973c2c17e36e508d42800683067d5cc8a539", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742bead5f4eb94908f188b99a3b261de0be9ca2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=f742bead5f4eb94908f188b99a3b261de0be9ca2", "patch": "@@ -151,8 +151,6 @@ TypeCheckType::visit (HIR::ArrayType &type)\n     return;\n \n   auto capacity = ConstFold::ConstFoldExpr::fold (type.get_size_expr ());\n-  if (capacity == nullptr)\n-    return;\n \n   TyTy::BaseType *base = TypeCheckType::Resolve (type.get_element_type ());\n   translated = new TyTy::ArrayType (type.get_mappings ().get_hirid (), capacity,"}]}