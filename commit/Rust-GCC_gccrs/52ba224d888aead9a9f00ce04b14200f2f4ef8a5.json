{"sha": "52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJiYTIyNGQ4ODhhZWFkOWE5ZjAwY2UwNGIxNDIwMGYyZjRlZjhhNQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2018-09-26T09:17:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:17:26Z"}, "message": "[Ada] Propagate bit order and SSO from root to classwide equivalent type\n\n2018-09-26  Thomas Quinot  <quinot@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.adb (Make_CW_Equivalent_Type): Propagate bit order\n\tand scalar storage order from root type to classwide equivalent\n\ttype, to prevent rejection of the equivalent type by the\n\tfreezing circuitry.\n\ngcc/testsuite/\n\n\t* gnat.dg/sso12.adb: New testcase.\n\nFrom-SVN: r264613", "tree": {"sha": "c80771441e64a141ee62f04e0560900d1d446924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c80771441e64a141ee62f04e0560900d1d446924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/comments", "author": null, "committer": null, "parents": [{"sha": "b45a9ff305f536031a12509c6c6e7aea9cb7f884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45a9ff305f536031a12509c6c6e7aea9cb7f884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b45a9ff305f536031a12509c6c6e7aea9cb7f884"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "94f90d3c6ec4c204b7e1f4fdd6d719ce9dd24506", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "patch": "@@ -1,3 +1,10 @@\n+2018-09-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_util.adb (Make_CW_Equivalent_Type): Propagate bit order\n+\tand scalar storage order from root type to classwide equivalent\n+\ttype, to prevent rejection of the equivalent type by the\n+\tfreezing circuitry.\n+\n 2018-09-26  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch5.adb (Analyze_Iterator_Specification): Add conditional"}, {"sha": "31e36ee84d2b05f18d4ad166cb307b199a9c4de4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "patch": "@@ -9004,19 +9004,25 @@ package body Exp_Util is\n    --  Generate the following code:\n \n    --   type Equiv_T is record\n-   --     _parent :  T (List of discriminant constraints taken from Exp);\n+   --     _parent : T (List of discriminant constraints taken from Exp);\n    --     Ext__50 : Storage_Array (1 .. (Exp'size - Typ'object_size)/8);\n    --   end Equiv_T;\n    --\n-   --   ??? Note that this type does not guarantee same alignment as all\n-   --   derived types\n+   --  ??? Note that this type does not guarantee same alignment as all\n+   --  derived types\n+   --\n+   --  Note: for the freezing circuitry, this looks like a record extension,\n+   --  and so we need to make sure that the scalar storage order is the same\n+   --  as that of the parent type. (This does not change anything for the\n+   --  representation of the extension part.)\n \n    function Make_CW_Equivalent_Type\n      (T : Entity_Id;\n       E : Node_Id) return Entity_Id\n    is\n       Loc         : constant Source_Ptr := Sloc (E);\n       Root_Typ    : constant Entity_Id  := Root_Type (T);\n+      Root_Utyp   : constant Entity_Id  := Underlying_Type (Root_Typ);\n       List_Def    : constant List_Id    := Empty_List;\n       Comp_List   : constant List_Id    := New_List;\n       Equiv_Type  : Entity_Id;\n@@ -9147,6 +9153,11 @@ package body Exp_Util is\n                Make_Component_Definition (Loc,\n                  Aliased_Present    => False,\n                  Subtype_Indication => New_Occurrence_Of (Constr_Root, Loc))));\n+\n+         Set_Reverse_Storage_Order (Equiv_Type,\n+           Reverse_Storage_Order (Base_Type (Root_Utyp)));\n+         Set_Reverse_Bit_Order (Equiv_Type,\n+           Reverse_Bit_Order (Base_Type (Root_Utyp)));\n       end if;\n \n       Append_To (Comp_List,"}, {"sha": "5e7a15dde28f648bcad27ca19e66180f953fe919", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "patch": "@@ -1,3 +1,7 @@\n+2018-09-26  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat.dg/sso12.adb: New testcase.\n+\n 2018-09-26  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/expr_func8.adb: New testcase."}, {"sha": "c36b1e38a18febe8a64032b4ebef4f0c102679a8", "filename": "gcc/testsuite/gnat.dg/sso12.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Ftestsuite%2Fgnat.dg%2Fsso12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ba224d888aead9a9f00ce04b14200f2f4ef8a5/gcc%2Ftestsuite%2Fgnat.dg%2Fsso12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsso12.adb?ref=52ba224d888aead9a9f00ce04b14200f2f4ef8a5", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do compile }\n+\n+with Ada.Unchecked_Deallocation;\n+with System;\n+\n+procedure SSO12 is\n+   type Rec is abstract tagged null record;\n+   for Rec'Scalar_Storage_Order use System.High_Order_First;  --  { dg-warning \"scalar storage order specified but no component clause\" }\n+   for Rec'Bit_Order use System.High_Order_First;\n+\n+   type Rec_Acc is access all Rec'Class;\n+\n+   procedure Free is new Ada.Unchecked_Deallocation (Rec'Class, Rec_Acc);\n+   X : Rec_Acc;\n+begin\n+   Free (X);\n+end SSO12;"}]}