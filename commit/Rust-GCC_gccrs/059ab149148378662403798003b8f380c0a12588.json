{"sha": "059ab149148378662403798003b8f380c0a12588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5YWIxNDkxNDgzNzg2NjI0MDM3OTgwMDNiOGYzODBjMGExMjU4OA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2017-06-30T15:36:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2017-06-30T15:36:41Z"}, "message": "tree-ssanames.c (set_range_info_raw): Abstract from ...\n\n\t* tree-ssanames.c (set_range_info_raw): Abstract from ...\n\t(set_range_info): ...here.  Only call set_range_info_raw if domain\n\tis useful.\n\t(set_nonzero_bits): Call set_range_info_raw.\n\t* tree-ssanames.h (set_range_info_raw): New.\ntestsuite/\n\t* gcc.dg/Walloca-14.c: Adapt test to recognize new complaint of\n\tunbounded use.\n\nFrom-SVN: r249846", "tree": {"sha": "c4ab86e7b702a90fb10bc8627320fa78adaac3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ab86e7b702a90fb10bc8627320fa78adaac3be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/059ab149148378662403798003b8f380c0a12588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059ab149148378662403798003b8f380c0a12588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059ab149148378662403798003b8f380c0a12588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059ab149148378662403798003b8f380c0a12588/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "2fbfc2bebc2b0f232abdd34c6eeb14c64247fc7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059ab149148378662403798003b8f380c0a12588/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059ab149148378662403798003b8f380c0a12588/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=059ab149148378662403798003b8f380c0a12588", "patch": "@@ -1,3 +1,11 @@\n+2017-06-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssanames.c (set_range_info_raw): Abstract from ...\n+\t(set_range_info): ...here.  Only call set_range_info_raw if domain\n+\tis useful.\n+\t(set_nonzero_bits): Call set_range_info_raw.\n+\t* tree-ssanames.h (set_range_info_raw): New.\n+\n 2017-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/81225"}, {"sha": "92d5f63ae2f765a47d3bbaa5c2e27be1bd22d1c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059ab149148378662403798003b8f380c0a12588/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059ab149148378662403798003b8f380c0a12588/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=059ab149148378662403798003b8f380c0a12588", "patch": "@@ -1,3 +1,8 @@\n+2017-06-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Walloca-14.c: Adapt test to recognize new complaint of\n+\tunbounded use.\n+\n 2017-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/80014"}, {"sha": "f3e3f5794393b75f5b429d55fa7eb5ef2ddfc76b", "filename": "gcc/testsuite/gcc.dg/Walloca-14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059ab149148378662403798003b8f380c0a12588/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059ab149148378662403798003b8f380c0a12588/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-14.c?ref=059ab149148378662403798003b8f380c0a12588", "patch": "@@ -9,5 +9,6 @@ g (int *p)\n   extern void f (void *);\n \n   void *q = __builtin_alloca (p); /* { dg-warning \"passing argument 1\" } */\n+  /* { dg-warning \"unbounded use of 'alloca'\" \"unbounded\" { target *-*-* } 11 } */\n   f (q);\n }"}, {"sha": "676c806c62212fbdc99d501a5aeaafa2527307d4", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059ab149148378662403798003b8f380c0a12588/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059ab149148378662403798003b8f380c0a12588/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=059ab149148378662403798003b8f380c0a12588", "patch": "@@ -320,11 +320,14 @@ make_ssa_name_fn (struct function *fn, tree var, gimple *stmt,\n   return t;\n }\n \n-/* Store range information RANGE_TYPE, MIN, and MAX to tree ssa_name NAME.  */\n+/* Helper function for set_range_info.\n+\n+   Store range information RANGE_TYPE, MIN, and MAX to tree ssa_name\n+   NAME.  */\n \n void\n-set_range_info (tree name, enum value_range_type range_type,\n-\t\tconst wide_int_ref &min, const wide_int_ref &max)\n+set_range_info_raw (tree name, enum value_range_type range_type,\n+\t\t    const wide_int_ref &min, const wide_int_ref &max)\n {\n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n   gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);\n@@ -360,6 +363,34 @@ set_range_info (tree name, enum value_range_type range_type,\n     }\n }\n \n+/* Store range information RANGE_TYPE, MIN, and MAX to tree ssa_name\n+   NAME while making sure we don't store useless range info.  */\n+\n+void\n+set_range_info (tree name, enum value_range_type range_type,\n+\t\tconst wide_int_ref &min, const wide_int_ref &max)\n+{\n+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+\n+  /* A range of the entire domain is really no range at all.  */\n+  tree type = TREE_TYPE (name);\n+  if (min == wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type))\n+      && max == wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type)))\n+    {\n+      range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n+      if (ri == NULL)\n+\treturn;\n+      if (ri->get_nonzero_bits () == -1)\n+\t{\n+\t  ggc_free (ri);\n+\t  SSA_NAME_RANGE_INFO (name) = NULL;\n+\t  return;\n+\t}\n+    }\n+\n+  set_range_info_raw (name, range_type, min, max);\n+}\n+\n \n /* Gets range information MIN, MAX and returns enum value_range_type\n    corresponding to tree ssa_name NAME.  enum value_range_type returned\n@@ -419,9 +450,13 @@ set_nonzero_bits (tree name, const wide_int_ref &mask)\n {\n   gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n   if (SSA_NAME_RANGE_INFO (name) == NULL)\n-    set_range_info (name, VR_RANGE,\n-\t\t    TYPE_MIN_VALUE (TREE_TYPE (name)),\n-\t\t    TYPE_MAX_VALUE (TREE_TYPE (name)));\n+    {\n+      if (mask == -1)\n+\treturn;\n+      set_range_info_raw (name, VR_RANGE,\n+\t\t\t  TYPE_MIN_VALUE (TREE_TYPE (name)),\n+\t\t\t  TYPE_MAX_VALUE (TREE_TYPE (name)));\n+    }\n   range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n   ri->set_nonzero_bits (mask);\n }"}, {"sha": "f7e032fe11d2ebb9e66a70c631fc0e617de00b44", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059ab149148378662403798003b8f380c0a12588/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059ab149148378662403798003b8f380c0a12588/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=059ab149148378662403798003b8f380c0a12588", "patch": "@@ -69,6 +69,9 @@ struct GTY ((variable_size)) range_info_def {\n /* Sets the value range to SSA.  */\n extern void set_range_info (tree, enum value_range_type, const wide_int_ref &,\n \t\t\t    const wide_int_ref &);\n+extern void set_range_info_raw (tree, enum value_range_type,\n+\t\t\t\tconst wide_int_ref &,\n+\t\t\t\tconst wide_int_ref &);\n /* Gets the value range from SSA.  */\n extern enum value_range_type get_range_info (const_tree, wide_int *,\n \t\t\t\t\t     wide_int *);"}]}