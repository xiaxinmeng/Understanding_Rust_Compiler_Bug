{"sha": "2d924ca620387c371cd564c821682012b3c97481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ5MjRjYTYyMDM4N2MzNzFjZDU2NGM4MjE2ODIwMTJiM2M5NzQ4MQ==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-15T11:31:35Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-16T15:11:42Z"}, "message": "[PATCH, GCC/ARM, 6/10] Clear GPRs inline when calling nscall function\n\nBesides changing the set of registers that needs to be cleared inline,\nthis patch also generates the push and pop to save and restore\ncallee-saved registers without trusting the callee inline. To make the\ncode more future-proof, this (currently) Armv8.1-M specific behavior is\nexpressed in terms of clearing of callee-saved registers rather than\ndirectly based on the targets.\n\nThe patch contains 1 subtlety:\n\nDebug information is disabled for push and pop because the\nREG_CFA_RESTORE notes used to describe popping of registers do not stack.\nInstead, they just reset the debug state for the register to the one at\nthe beginning of the function, which is incorrect for a register that is\npushed twice (in prologue and before nonsecure call) and then popped for\nthe first time. In particular, this occasionally trips CFI note creation\ncode when there are two codepaths to the epilogue, one of which does not\ngo through the nonsecure call. Obviously this mean that debugging\nbetween the push and pop is not reliable.\n\n*** gcc/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (arm_emit_multi_reg_pop): Declare early.\n\t(cmse_nonsecure_call_clear_caller_saved): Rename into ...\n\t(cmse_nonsecure_call_inline_register_clear): This.  Save and clear\n\tcallee-saved GPRs as well as clear ip register before doing a nonsecure\n\tcall then restore callee-saved GPRs after it when targeting\n\tArmv8.1-M Mainline.\n\t(arm_reorg): Adapt to function rename.\n\n*** gcc/testsuite/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/cmse-1.c: Add check for PUSH and POP and update\n\tCLRM check.\n\t* gcc.target/arm/cmse/cmse-14.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-and-union.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft-sp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft-sp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/union-1.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/union-2.c: Likewise.", "tree": {"sha": "868a0f4abd0b6729fc96bbdee94b70043c7d17b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/868a0f4abd0b6729fc96bbdee94b70043c7d17b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d924ca620387c371cd564c821682012b3c97481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d924ca620387c371cd564c821682012b3c97481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d924ca620387c371cd564c821682012b3c97481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d924ca620387c371cd564c821682012b3c97481/comments", "author": null, "committer": null, "parents": [{"sha": "0b1c7b27a7ddd06d08689c2ae8c70113c54c42f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1c7b27a7ddd06d08689c2ae8c70113c54c42f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1c7b27a7ddd06d08689c2ae8c70113c54c42f4"}], "stats": {"total": 211, "additions": 176, "deletions": 35}, "files": [{"sha": "18767f5b4cd17619f4b3625ddf6e3941155b264c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -1,6 +1,17 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* config/arm/arm.c (arm_emit_multi_reg_pop): Declare early.\n+\t(cmse_nonsecure_call_clear_caller_saved): Rename into ...\n+\t(cmse_nonsecure_call_inline_register_clear): This.  Save and clear\n+\tcallee-saved GPRs as well as clear ip register before doing a nonsecure\n+\tcall then restore callee-saved GPRs after it when targeting\n+\tArmv8.1-M Mainline.\n+\t(arm_reorg): Adapt to function rename.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* config/arm/arm-protos.h (clear_operation_p): Adapt prototype.\n \t* config/arm/arm.c (clear_operation_p): Extend to be able to check a\n \tclear_vfp_multiple pattern based on a new vfp parameter."}, {"sha": "907e92d9588cdf6d7879849876e463d626b98851", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -187,6 +187,7 @@ static int arm_memory_move_cost (machine_mode, reg_class_t, bool);\n static void emit_constant_insn (rtx cond, rtx pattern);\n static rtx_insn *emit_set_insn (rtx, rtx);\n static rtx emit_multi_reg_push (unsigned long, unsigned long);\n+static void arm_emit_multi_reg_pop (unsigned long);\n static int arm_arg_partial_bytes (cumulative_args_t,\n \t\t\t\t  const function_arg_info &);\n static rtx arm_function_arg (cumulative_args_t, const function_arg_info &);\n@@ -18263,13 +18264,13 @@ cmse_clear_registers (sbitmap to_clear_bitmap, uint32_t *padding_bits_to_clear,\n     }\n }\n \n-/* Clears caller saved registers not used to pass arguments before a\n-   cmse_nonsecure_call.  Saving, clearing and restoring of callee saved\n-   registers is done in __gnu_cmse_nonsecure_call libcall.\n-   See libgcc/config/arm/cmse_nonsecure_call.S.  */\n+/* Clear core and caller-saved VFP registers not used to pass arguments before\n+   a cmse_nonsecure_call.  Saving, clearing and restoring of VFP callee-saved\n+   registers is done in the __gnu_cmse_nonsecure_call libcall.  See\n+   libgcc/config/arm/cmse_nonsecure_call.S.  */\n \n static void\n-cmse_nonsecure_call_clear_caller_saved (void)\n+cmse_nonsecure_call_inline_register_clear (void)\n {\n   basic_block bb;\n \n@@ -18279,8 +18280,15 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \n       FOR_BB_INSNS (bb, insn)\n \t{\n-\t  unsigned address_regnum, regno, maxregno =\n-\t    TARGET_HARD_FLOAT_ABI ? D7_VFP_REGNUM : NUM_ARG_REGS - 1;\n+\t  bool clear_callee_saved = TARGET_HAVE_FPCXT_CMSE;\n+\t  unsigned long callee_saved_mask\n+\t    = ((1 << (LAST_HI_REGNUM + 1)) - 1)\n+\t    & ~((1 << (LAST_ARG_REGNUM + 1)) - 1);\n+\t  unsigned address_regnum, regno;\n+\t  unsigned max_int_regno\n+\t    = clear_callee_saved ? IP_REGNUM : LAST_ARG_REGNUM;\n+\t  unsigned maxregno\n+\t    = TARGET_HARD_FLOAT_ABI ? D7_VFP_REGNUM : max_int_regno;\n \t  auto_sbitmap to_clear_bitmap (maxregno + 1);\n \t  rtx_insn *seq;\n \t  rtx pat, call, unspec, clearing_reg, ip_reg, shift;\n@@ -18312,9 +18320,11 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t      || XINT (unspec, 1) != UNSPEC_NONSECURE_MEM)\n \t    continue;\n \n-\t  /* Determine the caller-saved registers we need to clear.  */\n+\t  /* Mark registers that needs to be cleared.  Those that holds a\n+\t     parameter are removed from the set further below.  */\n \t  bitmap_clear (to_clear_bitmap);\n-\t  bitmap_set_range (to_clear_bitmap, R0_REGNUM, NUM_ARG_REGS);\n+\t  bitmap_set_range (to_clear_bitmap, R0_REGNUM,\n+\t\t\t    max_int_regno - R0_REGNUM + 1);\n \n \t  /* Only look at the caller-saved floating point registers in case of\n \t     -mfloat-abi=hard.  For -mfloat-abi=softfp we will be using the\n@@ -18336,7 +18346,7 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t  gcc_assert (MEM_P (address));\n \t  gcc_assert (REG_P (XEXP (address, 0)));\n \t  address_regnum = REGNO (XEXP (address, 0));\n-\t  if (address_regnum < R0_REGNUM + NUM_ARG_REGS)\n+\t  if (address_regnum <= max_int_regno)\n \t    bitmap_clear_bit (to_clear_bitmap, address_regnum);\n \n \t  /* Set basic block of call insn so that df rescan is performed on\n@@ -18396,6 +18406,15 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t  shift = gen_rtx_ASHIFT (SImode, clearing_reg, const1_rtx);\n \t  emit_insn (gen_rtx_SET (clearing_reg, shift));\n \n+\t  if (clear_callee_saved)\n+\t    {\n+\t      rtx push_insn =\n+\t\temit_multi_reg_push (callee_saved_mask, callee_saved_mask);\n+\t      /* Disable frame debug info in push because it needs to be\n+\t\t disabled for pop (see below).  */\n+\t      RTX_FRAME_RELATED_P (push_insn) = 0;\n+\t    }\n+\n \t  /* Clear caller-saved registers that leak before doing a non-secure\n \t     call.  */\n \t  ip_reg = gen_rtx_REG (SImode, IP_REGNUM);\n@@ -18405,6 +18424,36 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t  seq = get_insns ();\n \t  end_sequence ();\n \t  emit_insn_before (seq, insn);\n+\n+\t  if (TARGET_HAVE_FPCXT_CMSE)\n+\t    {\n+\t      rtx_insn *next, *pop_insn, *after = insn;\n+\n+\t      start_sequence ();\n+\t      arm_emit_multi_reg_pop (callee_saved_mask);\n+\t      pop_insn = get_last_insn ();\n+\n+\t      /* Disable frame debug info in pop because they reset the state\n+\t\t of popped registers to what it was at the beginning of the\n+\t\t function, before the prologue.  This leads to incorrect state\n+\t\t when doing the pop after the nonsecure call for registers that\n+\t\t are pushed both in prologue and before the nonsecure call.\n+\n+\t\t It also occasionally triggers an assert failure in CFI note\n+\t\t creation code when there are two codepaths to the epilogue,\n+\t\t one of which does not go through the nonsecure call.\n+\t\t Obviously this mean that debugging between the push and pop is\n+\t\t not reliable.  */\n+\t      RTX_FRAME_RELATED_P (pop_insn) = 0;\n+\n+\t      end_sequence ();\n+\n+\t      emit_insn_after (pop_insn, after);\n+\n+\t      /* Skip pop we have just inserted after nonsecure call, we know\n+\t\t it does not contain a nonsecure call.  */\n+\t      insn = pop_insn;\n+\t    }\n \t}\n     }\n }\n@@ -18710,7 +18759,7 @@ arm_reorg (void)\n   Mfix * fix;\n \n   if (use_cmse)\n-    cmse_nonsecure_call_clear_caller_saved ();\n+    cmse_nonsecure_call_inline_register_clear ();\n \n   /* We cannot run the Thumb passes for thunks because there is no CFG.  */\n   if (cfun->is_thunk)"}, {"sha": "07fd7ff74d247f7a7b49987f00188126af933bff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -1,6 +1,36 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* gcc.target/arm/cmse/cmse-1.c: Add check for PUSH and POP and update\n+\tCLRM check.\n+\t* gcc.target/arm/cmse/cmse-14.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-and-union.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft-sp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft-sp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/union-1.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/union-2.c: Likewise.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* gcc.target/arm/cmse/bitfield-1.c: Add check for VSCCLRM.\n \t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n \t* gcc.target/arm/cmse/bitfield-3.c: Likewise."}, {"sha": "9f36fa3b1d8b86b4e1827909fca4fee181ba1c61", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -109,7 +109,9 @@ qux (int_nsfunc_t * callback)\n /* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq\" { target { ! arm_cmse_clear_ok } } } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" { target arm_cmse_clear_ok } } } */\n \n int call_callback (void)\n {"}, {"sha": "6d39afab44329e78a8ff2f693fd94fe6a501af5a", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-14.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-14.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -9,6 +9,8 @@ int foo (void)\n   return bar ();\n }\n \n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n /* { dg-final { scan-assembler-not \"^(.*\\\\s)?bl?\\[^\\\\s]*\\\\s+bar\" } } */"}, {"sha": "d4caf513ed2153370369bddbfcf6d2568d9f2f1e", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -12,5 +12,7 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "2b7655a2c9971fb0aad4e6c8a1fee72e21028fad", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -10,5 +10,7 @@\n /* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "1a62076df9d6831d06f5ac6bdcb7deed0ecd23f8", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -13,5 +13,7 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "1319ac9766bcd330f6d8f0f7754a64a1dcc105b1", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -10,5 +10,7 @@\n /* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "9bb60175529d77a3b1868f62a5a4d5355f00b76b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -13,5 +13,7 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "11ca78bfdaf1ebe09f9699c278dc3db4fd20768c", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -7,5 +7,7 @@\n /* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "2f14c52715e0ad6e6ab69b01713ee13985a22653", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-and-union.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-and-union.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-and-union.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-and-union.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -17,4 +17,7 @@\n /* { dg-final { scan-assembler \"and\\tr3, r3, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "67ced090163bc4b40c09b00305d49d21084f7fb8", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,12 +8,14 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts3, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s1, VPR\\}\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s4-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "a6d9d14b63be8a226242512e36ba313849a3d35a", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,8 +8,10 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s0-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "ff4763529c7d280193d99ef695ce426038b7ceb9", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,10 +8,12 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s2-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "952010baee36cc404f1a85252c3bf9da7a6c3ce1", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,14 +8,16 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td1, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts3, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s1, VPR\\}\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s4-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "ec1284117f8937026b263ba1bd623e9942527877", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,8 +8,10 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s0-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "d70a58a4c84c5d042f4efefbf36316d5401f770c", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,9 +8,11 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vscclrm\\t\\{s2-s15, VPR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "07a6719b4f1a260a3461f7408e278dd6e71f60d3", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -10,7 +10,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r1, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n "}, {"sha": "ca2961ac18ccacec6907b1d1d217c6c2e28072e7", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -7,7 +7,9 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n "}, {"sha": "7a1abb51fcf9a62a24583e792953845f21bbed49", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -9,7 +9,9 @@\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n "}, {"sha": "90aadffb7aa14ceeea22232148c11e9543eee0e7", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,7 +8,9 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "28f2e86dfaa89902d1c04fc2890c5445b5bb0af5", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -10,7 +10,9 @@\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "15d3b682c798dd6635ed6b90d9aa8e705fefa265", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -11,7 +11,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r1, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "3d48859028ab8dd22d9ffed7c95ece59c2ed937e", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -8,7 +8,9 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "0e2dcae36927d2c7187ca2b60c935504268476bc", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -10,7 +10,9 @@\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "43e58ebde56ceb229edca2db25b720c42207c100", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/union-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -10,5 +10,7 @@\n /* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "6adf8fae5c3a56a6e50278919a2edbd2fda58f42", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/union-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d924ca620387c371cd564c821682012b3c97481/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c?ref=2d924ca620387c371cd564c821682012b3c97481", "patch": "@@ -14,5 +14,7 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}]}