{"sha": "4e86caed7d541a727d81085220182edb5a44f5b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4NmNhZWQ3ZDU0MWE3MjdkODEwODUyMjAxODJlZGI1YTQ0ZjViNg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-01T23:35:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-01T23:35:51Z"}, "message": "fold-const.c (optimze_bit_field_compare): Initialize rnbitpos, rnbitsize, rnmode and rinner.\n\n        * fold-const.c optimze_bit_field_compare): Initialize rnbitpos,\n        rnbitsize, rnmode and rinner.\n        (make_range): Initialize type.\n        (fold): Initialize arg0, arg1 and varop.\n        * function.c (instantiate_virtual_regs_1): Initialize offset, regnoi\n        and regnor.\n        (expand_function_start): Initialize last_ptr.\n        * stor-layout.c (layout_record): Initialize desired_align.\n        (get_best_mode): Initialize unit.\n        * tree.c (copy_node): Initialize length.\n\nFrom-SVN: r18943", "tree": {"sha": "d7f3ccc049199953830eb5220f5dfa68c39be0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7f3ccc049199953830eb5220f5dfa68c39be0a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e86caed7d541a727d81085220182edb5a44f5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e86caed7d541a727d81085220182edb5a44f5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e86caed7d541a727d81085220182edb5a44f5b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e86caed7d541a727d81085220182edb5a44f5b6/comments", "author": null, "committer": null, "parents": [{"sha": "aefdd5abe0eae984fa04ea12851c9ff0f1695033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefdd5abe0eae984fa04ea12851c9ff0f1695033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefdd5abe0eae984fa04ea12851c9ff0f1695033"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "77b15f34adb9b2140b3f39f2ad76fde56a7d3d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e86caed7d541a727d81085220182edb5a44f5b6", "patch": "@@ -1,5 +1,19 @@\n Wed Apr  1 22:26:22 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* fold-const.c optimze_bit_field_compare): Initialize rnbitpos,\n+\trnbitsize, rnmode and rinner.\n+\t(make_range): Initialize type.\n+\t(fold): Initialize arg0, arg1 and varop.\n+\n+\t* function.c (instantiate_virtual_regs_1): Initialize offset, regnoi\n+\tand regnor.\n+\t(expand_function_start): Initialize last_ptr.\n+\n+\t* stor-layout.c (layout_record): Initialize desired_align.\n+\t(get_best_mode): Initialize unit.\n+\n+\t* tree.c (copy_node): Initialize length.\n+\n \t* c-lex.c (yylex): Initialize traditional_type, ansi_type and type.\n \n \t* caller-save.c (insert_save_restore): Initialize pat, code and"}, {"sha": "99b913a284e4293948d0ae75eea719aa3cf46936", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4e86caed7d541a727d81085220182edb5a44f5b6", "patch": "@@ -2388,15 +2388,15 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n      tree lhs, rhs;\n {\n   int lbitpos, lbitsize, rbitpos, rbitsize;\n-  int lnbitpos, lnbitsize, rnbitpos, rnbitsize;\n+  int lnbitpos, lnbitsize, rnbitpos = 0, rnbitsize = 0;\n   tree type = TREE_TYPE (lhs);\n   tree signed_type, unsigned_type;\n   int const_p = TREE_CODE (rhs) == INTEGER_CST;\n-  enum machine_mode lmode, rmode, lnmode, rnmode;\n+  enum machine_mode lmode, rmode, lnmode, rnmode = VOIDmode;\n   int lunsignedp, runsignedp;\n   int lvolatilep = 0, rvolatilep = 0;\n   int alignment;\n-  tree linner, rinner;\n+  tree linner, rinner = NULL_TREE;\n   tree mask;\n   tree offset;\n \n@@ -2784,7 +2784,7 @@ make_range (exp, pin_p, plow, phigh)\n      tree *plow, *phigh;\n {\n   enum tree_code code;\n-  tree arg0, arg1, type;\n+  tree arg0, arg1, type = NULL_TREE;\n   int in_p, n_in_p;\n   tree low, high, n_low, n_high;\n \n@@ -3717,7 +3717,7 @@ fold (expr)\n   tree t1 = NULL_TREE;\n   tree tem;\n   tree type = TREE_TYPE (expr);\n-  register tree arg0, arg1;\n+  register tree arg0 = NULL_TREE, arg1 = NULL_TREE;\n   register enum tree_code code = TREE_CODE (t);\n   register int kind;\n   int invert;\n@@ -5114,7 +5114,7 @@ fold (expr)\n \t First, see if one arg is constant; find the constant arg\n \t and the other one.  */\n       {\n-\ttree constop = 0, varop;\n+\ttree constop = 0, varop = NULL_TREE;\n \tint constopnum = -1;\n \n \tif (TREE_CONSTANT (arg1))"}, {"sha": "31201b4564a5073fd801c240f5087af4e0913cf0", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4e86caed7d541a727d81085220182edb5a44f5b6", "patch": "@@ -2977,7 +2977,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n   rtx x;\n   RTX_CODE code;\n   rtx new = 0;\n-  int offset;\n+  int offset = 0;\n   rtx temp;\n   rtx seq;\n   int i, j;\n@@ -4037,7 +4037,7 @@ assign_parms (fndecl, second_time)\n \t     may need to do it in a wider mode.  */\n \n \t  register rtx parmreg;\n-\t  int regno, regnoi, regnor;\n+\t  int regno, regnoi = 0, regnor = 0;\n \n \t  unsignedp = TREE_UNSIGNED (TREE_TYPE (parm));\n \n@@ -5336,7 +5336,7 @@ expand_function_start (subr, parms_have_cleanups)\n {\n   register int i;\n   tree tem;\n-  rtx last_ptr;\n+  rtx last_ptr = NULL_RTX;\n \n   /* Make sure volatile mem refs aren't considered\n      valid operands of arithmetic insns.  */"}, {"sha": "8aaf2f692f2af466e6a68c537133f7248a478b96", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=4e86caed7d541a727d81085220182edb5a44f5b6", "patch": "@@ -331,7 +331,7 @@ layout_record (rec)\n   for (field = TYPE_FIELDS (rec); field; field = TREE_CHAIN (field))\n     {\n       register int known_align = var_size ? var_align : const_size;\n-      register int desired_align;\n+      register int desired_align = 0;\n \n       /* If FIELD is static, then treat it like a separate variable,\n \t not really like a structure field.\n@@ -1222,7 +1222,7 @@ get_best_mode (bitsize, bitpos, align, largest_mode, volatilep)\n      int volatilep;\n {\n   enum machine_mode mode;\n-  int unit;\n+  int unit = 0;\n \n   /* Find the narrowest integer mode that contains the bit field.  */\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT); mode != VOIDmode;"}, {"sha": "fe36f890da3e38f0c92435a08154f04ad0c2f757", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e86caed7d541a727d81085220182edb5a44f5b6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4e86caed7d541a727d81085220182edb5a44f5b6", "patch": "@@ -1128,7 +1128,7 @@ copy_node (node)\n {\n   register tree t;\n   register enum tree_code code = TREE_CODE (node);\n-  register int length;\n+  register int length = 0;\n   register int i;\n \n   switch (TREE_CODE_CLASS (code))"}]}