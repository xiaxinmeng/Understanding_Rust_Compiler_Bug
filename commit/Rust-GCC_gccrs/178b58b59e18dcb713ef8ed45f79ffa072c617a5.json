{"sha": "178b58b59e18dcb713ef8ed45f79ffa072c617a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4YjU4YjU5ZTE4ZGNiNzEzZWY4ZWQ0NWY3OWZmYTA3MmM2MTdhNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-11-03T23:08:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-11-03T23:08:18Z"}, "message": "re PR c++/17964 (cpp error messages contain wrong line in C++)\n\ngcc:\n\tPR c++/17964\n\t* diagnostic.c (diagnostic_set_info_translated): New function.\n\t(diagnostic_set_info): Use it.  Add comment.\n\t* diagnostic.h (diagnostic_set_info_translated): Declare.\n\ngcc/cp:\n\t* error.c (cp_cpp_error): New function.\n\t* cp-tree.h (cp_cpp_error): Declare.\n\t* parser.c (cp_lexer_new_main): Set CPP option client_diagnostic\n\tand error callback after lexing.\n\ngcc/testsuite:\n\t* g++.dg/cpp/string-1.C: New test.\n\nlibcpp:\n\t* include/cpplib.h (struct cpp_options): Add client_diagnostic.\n\t(struct cpp_callbacks): Add error.\n\t* errors.c (cpp_error): If client_diagnostic, use error callback.\n\t* charset.c (convert_escape): Don't use %03o in diagnostic.\n\nFrom-SVN: r106454", "tree": {"sha": "4d26b7322a593e1c409570f2ca4e99dccb8dc759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d26b7322a593e1c409570f2ca4e99dccb8dc759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178b58b59e18dcb713ef8ed45f79ffa072c617a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178b58b59e18dcb713ef8ed45f79ffa072c617a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178b58b59e18dcb713ef8ed45f79ffa072c617a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178b58b59e18dcb713ef8ed45f79ffa072c617a5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ae01d7f9e4c7e93097856926facb7ce9505f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ae01d7f9e4c7e93097856926facb7ce9505f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ae01d7f9e4c7e93097856926facb7ce9505f1d"}], "stats": {"total": 147, "additions": 130, "deletions": 17}, "files": [{"sha": "d6e62a6cecb50593ecc183e381490c3dcd1f0ecd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -1,3 +1,10 @@\n+2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/17964\n+\t* diagnostic.c (diagnostic_set_info_translated): New function.\n+\t(diagnostic_set_info): Use it.  Add comment.\n+\t* diagnostic.h (diagnostic_set_info_translated): Declare.\n+\n 2005-11-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2asm.c (dw2_force_const_mem): Add new parameter 'public'."}, {"sha": "5d281d31361db93149294b702c6a58ff7540bc81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -1,3 +1,11 @@\n+2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/17964\n+\t* error.c (cp_cpp_error): New function.\n+\t* cp-tree.h (cp_cpp_error): Declare.\n+\t* parser.c (cp_lexer_new_main): Set CPP option client_diagnostic\n+\tand error callback after lexing.\n+\n 2005-11-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21627"}, {"sha": "e1ca9f3bea7a596abe90c927a179799350d6df7d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -4437,5 +4437,8 @@ extern void cp_genericize\t\t\t(tree);\n #else\n #define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)\n #endif\n+extern void cp_cpp_error\t\t\t(cpp_reader *, int,\n+\t\t\t\t\t\t const char *, va_list)\n+     ATTRIBUTE_GCC_CXXDIAG(3,0);\n \n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "d5144b446f73346a05a870bc77a953b853051482", "filename": "gcc/cp/error.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -2327,3 +2327,36 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n #undef next_lang\n #undef next_int\n }\n+\f\n+/* Callback from cpp_error for PFILE to print diagnostics arising from\n+   interpreting strings.  The diagnostic is of type LEVEL; MSG is the\n+   translated message and AP the arguments.  */\n+\n+void\n+cp_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n+\t      const char *msg, va_list ap)\n+{\n+  diagnostic_info diagnostic;\n+  diagnostic_t dlevel;\n+  switch (level)\n+    {\n+    case CPP_DL_WARNING:\n+    case CPP_DL_WARNING_SYSHDR:\n+      dlevel = DK_WARNING;\n+      break;\n+    case CPP_DL_PEDWARN:\n+      dlevel = pedantic_error_kind ();\n+      break;\n+    case CPP_DL_ERROR:\n+      dlevel = DK_ERROR;\n+      break;\n+    case CPP_DL_ICE:\n+      dlevel = DK_ICE;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  diagnostic_set_info_translated (&diagnostic, msg, &ap,\n+\t\t\t\t  input_location, dlevel);\n+  report_diagnostic (&diagnostic);\n+}"}, {"sha": "bbc5c1156bdcff6b4683da2ab4c931fca0667ce2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -297,6 +297,11 @@ cp_lexer_new_main (void)\n      string constant concatenation.  */\n   c_lex_return_raw_strings = false;\n \n+  /* Subsequent preprocessor diagnostics should use compiler\n+     diagnostic functions to get the compiler source location.  */\n+  cpp_get_options (parse_in)->client_diagnostic = true;\n+  cpp_get_callbacks (parse_in)->error = cp_cpp_error;\n+\n   gcc_assert (lexer->next_token->type != CPP_PURGED);\n   return lexer;\n }"}, {"sha": "7f4d8147340f8f31670314929d61930c29409328", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -112,19 +112,31 @@ diagnostic_initialize (diagnostic_context *context)\n   context->lock = 0;\n }\n \n+/* Initialize DIAGNOSTIC, where the message MSG has already been\n+   translated.  */\n void\n-diagnostic_set_info (diagnostic_info *diagnostic, const char *gmsgid,\n-\t\t     va_list *args, location_t location,\n-\t\t     diagnostic_t kind)\n+diagnostic_set_info_translated (diagnostic_info *diagnostic, const char *msg,\n+\t\t\t\tva_list *args, location_t location,\n+\t\t\t\tdiagnostic_t kind)\n {\n   diagnostic->message.err_no = errno;\n   diagnostic->message.args_ptr = args;\n-  diagnostic->message.format_spec = _(gmsgid);\n+  diagnostic->message.format_spec = msg;\n   diagnostic->location = location;\n   diagnostic->kind = kind;\n   diagnostic->option_index = 0;\n }\n \n+/* Initialize DIAGNOSTIC, where the message GMSGID has not yet been\n+   translated.  */\n+void\n+diagnostic_set_info (diagnostic_info *diagnostic, const char *gmsgid,\n+\t\t     va_list *args, location_t location,\n+\t\t     diagnostic_t kind)\n+{\n+  diagnostic_set_info_translated (diagnostic, _(gmsgid), args, location, kind);\n+}\n+\n /* Return a malloc'd string describing a location.  The caller is\n    responsible for freeing the memory.  */\n char *"}, {"sha": "3a3204bdcc3599f96b4e313576ca5df3c9931644", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -184,6 +184,10 @@ extern void diagnostic_report_diagnostic (diagnostic_context *,\n #ifdef ATTRIBUTE_GCC_DIAG\n extern void diagnostic_set_info (diagnostic_info *, const char *, va_list *,\n \t\t\t\t location_t, diagnostic_t) ATTRIBUTE_GCC_DIAG(2,0);\n+extern void diagnostic_set_info_translated (diagnostic_info *, const char *,\n+\t\t\t\t\t    va_list *, location_t,\n+\t\t\t\t\t    diagnostic_t)\n+     ATTRIBUTE_GCC_DIAG(2,0);\n #endif\n extern char *diagnostic_build_prefix (diagnostic_info *);\n "}, {"sha": "49d41e153e359b40e0fbe4b939241eed5107b220", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -1,3 +1,8 @@\n+2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/17964\n+\t* g++.dg/cpp/string-1.C: New test.\n+\n 2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.target/powerpc: New directory."}, {"sha": "da3133071d73fdc9aaf9a52d1ae085241c7b773f", "filename": "gcc/testsuite/g++.dg/cpp/string-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-1.C?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -0,0 +1,9 @@\n+// Test location of diagnostics for interpreting strings.  Bug 17964.\n+// Origin: Joseph Myers <joseph@codesourcery.com>\n+// { dg-do compile }\n+\n+const char *s = \"\\q\"; // { dg-error \"unknown escape sequence\" }\n+\n+const char *t = \"\\\t\"; // { dg-error \"unknown escape sequence\" }\n+\n+const char *u = \"\";"}, {"sha": "c0364802678bf1667851b2b831900d092188d6b3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -1,3 +1,11 @@\n+2005-11-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c++/17964\n+\t* include/cpplib.h (struct cpp_options): Add client_diagnostic.\n+\t(struct cpp_callbacks): Add error.\n+\t* errors.c (cpp_error): If client_diagnostic, use error callback.\n+\t* charset.c (convert_escape): Don't use %03o in diagnostic.\n+\n 2005-10-21  James E Wilson  <wilson@specifix.com>\n \n \tPR preprocessor/15220"}, {"sha": "78c89816735ac0beab0bc02db904c8421e26ac62", "filename": "libcpp/charset.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -1277,8 +1277,14 @@ convert_escape (cpp_reader *pfile, const uchar *from, const uchar *limit,\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t   \"unknown escape sequence '\\\\%c'\", (int) c);\n       else\n-\tcpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t   \"unknown escape sequence: '\\\\%03o'\", (int) c);\n+\t{\n+\t  /* diagnostic.c does not support \"%03o\".  When it does, this\n+\t     code can use %03o directly in the diagnostic again.  */\n+\t  char buf[32];\n+\t  sprintf(buf, \"%03o\", (int) c);\n+\t  cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t     \"unknown escape sequence: '\\\\%s'\", buf);\n+\t}\n     }\n \n   /* Now convert what we have to the execution character set.  */"}, {"sha": "554d9e3c5f1a7cf2f9c682d99ffa1463b0cd241b", "filename": "libcpp/errors.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -140,20 +140,25 @@ cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n   \n   va_start (ap, msgid);\n \n-  if (CPP_OPTION (pfile, traditional))\n-    {\n-      if (pfile->state.in_directive)\n-\tsrc_loc = pfile->directive_line;\n-      else\n-\tsrc_loc = pfile->line_table->highest_line;\n-    }\n+  if (CPP_OPTION (pfile, client_diagnostic))\n+    pfile->cb.error (pfile, level, _(msgid), ap);\n   else\n     {\n-      src_loc = pfile->cur_token[-1].src_loc;\n-    }\n+      if (CPP_OPTION (pfile, traditional))\n+\t{\n+\t  if (pfile->state.in_directive)\n+\t    src_loc = pfile->directive_line;\n+\t  else\n+\t    src_loc = pfile->line_table->highest_line;\n+\t}\n+      else\n+\t{\n+\t  src_loc = pfile->cur_token[-1].src_loc;\n+\t}\n \n-  if (_cpp_begin_message (pfile, level, src_loc, 0))\n-    v_message (msgid, ap);\n+      if (_cpp_begin_message (pfile, level, src_loc, 0))\n+\tv_message (msgid, ap);\n+    }\n \n   va_end (ap);\n }"}, {"sha": "c5d8e85391a4a4e622e3d8a8e490677c62b450d1", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178b58b59e18dcb713ef8ed45f79ffa072c617a5/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=178b58b59e18dcb713ef8ed45f79ffa072c617a5", "patch": "@@ -435,6 +435,9 @@ struct cpp_options\n   /* True means return pragmas as tokens rather than processing\n      them directly. */\n   bool defer_pragmas;\n+\n+  /* True means error callback should be used for diagnostics.  */\n+  bool client_diagnostic;\n };\n \n /* Callback for header lookup for HEADER, which is the name of a\n@@ -467,6 +470,11 @@ struct cpp_callbacks\n   int (*valid_pch) (cpp_reader *, const char *, int);\n   void (*read_pch) (cpp_reader *, const char *, int, const char *);\n   missing_header_cb missing_header;\n+\n+  /* Called to emit a diagnostic if client_diagnostic option is true.\n+     This callback receives the translated message.  */\n+  void (*error) (cpp_reader *, int, const char *, va_list)\n+       ATTRIBUTE_PRINTF(3,0);\n };\n \n /* Chain of directories to look for include files in.  */"}]}