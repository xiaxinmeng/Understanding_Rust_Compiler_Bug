{"sha": "851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "node_id": "C_kwDOANBUbNoAKDg1MWI5ZTE0NTg1MTYwZjcwZWIxN2E5YjMxMmMxNGUzYTBkNGMzZWQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-17T15:51:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-19T18:32:47Z"}, "message": "Refactor expression hir lowering into cc file", "tree": {"sha": "79dc8e76fb2a9f51d4c2cf983c4db4e06702a747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79dc8e76fb2a9f51d4c2cf983c4db4e06702a747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28e7dcb463c16db545566218cff3c164c410959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28e7dcb463c16db545566218cff3c164c410959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28e7dcb463c16db545566218cff3c164c410959"}], "stats": {"total": 1502, "additions": 803, "deletions": 699}, "files": [{"sha": "b36069f07e9422458604cd5cfcb68347c0fdaf40", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "patch": "@@ -88,6 +88,7 @@ GRS_OBJS = \\\n     rust/rust-ast-lower-base.o \\\n     rust/rust-ast-lower-pattern.o \\\n     rust/rust-ast-lower-item.o \\\n+    rust/rust-ast-lower-expr.o \\\n     rust/rust-early-name-resolver.o \\\n     rust/rust-name-resolver.o \\\n     rust/rust-ast-resolve.o \\"}, {"sha": "c148308d61e40ea8ffcd05517d99fcec48546dd5", "filename": "gcc/rust/hir/rust-ast-lower-expr.cc", "status": "added", "additions": 757, "deletions": 0, "changes": 757, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc?ref=851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "patch": "@@ -0,0 +1,757 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-lower-expr.h\"\n+#include \"rust-ast-lower-base.h\"\n+#include \"rust-ast-lower-block.h\"\n+#include \"rust-ast-lower-struct-field-expr.h\"\n+#include \"rust-ast-lower-pattern.h\"\n+#include \"rust-ast-lower-type.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+ASTLoweringExpr::ASTLoweringExpr ()\n+  : ASTLoweringBase (), translated (nullptr), translated_array_elems (nullptr),\n+    terminated (false)\n+{}\n+\n+HIR::Expr *\n+ASTLoweringExpr::translate (AST::Expr *expr, bool *terminated)\n+{\n+  ASTLoweringExpr resolver;\n+  expr->accept_vis (resolver);\n+  if (resolver.translated == nullptr)\n+    {\n+      rust_fatal_error (expr->get_locus (), \"Failed to lower expr: [%s]\",\n+\t\t\texpr->as_string ().c_str ());\n+      return nullptr;\n+    }\n+\n+  resolver.mappings->insert_hir_expr (resolver.translated);\n+  resolver.mappings->insert_location (\n+    resolver.translated->get_mappings ().get_hirid (), expr->get_locus ());\n+\n+  if (terminated != nullptr)\n+    *terminated = resolver.terminated;\n+\n+  return resolver.translated;\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::TupleIndexExpr &expr)\n+{\n+  HIR::Expr *tuple_expr\n+    = ASTLoweringExpr::translate (expr.get_tuple_expr ().get (), &terminated);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TupleIndexExpr (mapping, std::unique_ptr<HIR::Expr> (tuple_expr),\n+\t\t\t       expr.get_tuple_index (), expr.get_outer_attrs (),\n+\t\t\t       expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::TupleExpr &expr)\n+{\n+  std::vector<std::unique_ptr<HIR::Expr> > tuple_elements;\n+  for (auto &e : expr.get_tuple_elems ())\n+    {\n+      HIR::Expr *t = ASTLoweringExpr::translate (e.get ());\n+      tuple_elements.push_back (std::unique_ptr<HIR::Expr> (t));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TupleExpr (std::move (mapping), std::move (tuple_elements),\n+\t\t\t  expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t  expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfExpr &expr)\n+{\n+  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfExprConseqElse &expr)\n+{\n+  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IfExprConseqIf &expr)\n+{\n+  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::BlockExpr &expr)\n+{\n+  translated = ASTLoweringBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::UnsafeBlockExpr &expr)\n+{\n+  translated = ASTLoweringBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::PathInExpression &expr)\n+{\n+  translated = ASTLowerPathInExpression::translate (&expr);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::QualifiedPathInExpression &expr)\n+{\n+  translated = ASTLowerQualPathInExpression::translate (&expr);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ReturnExpr &expr)\n+{\n+  terminated = true;\n+  HIR::Expr *return_expr\n+    = expr.has_returned_expr ()\n+\t? ASTLoweringExpr::translate (expr.get_returned_expr ().get ())\n+\t: nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::ReturnExpr (mapping, expr.get_locus (),\n+\t\t\t\t    std::unique_ptr<HIR::Expr> (return_expr));\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::CallExpr &expr)\n+{\n+  HIR::Expr *func\n+    = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n+\n+  auto const &in_params = expr.get_params ();\n+  std::vector<std::unique_ptr<HIR::Expr> > params;\n+  for (auto &param : in_params)\n+    {\n+      auto trans = ASTLoweringExpr::translate (param.get ());\n+      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (\n+    crate_num, UNKNOWN_NODEID /* this can map back to the AST*/,\n+    mappings->get_next_hir_id (crate_num), UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::CallExpr (mapping, std::unique_ptr<HIR::Expr> (func),\n+\t\t\t\t  std::move (params), expr.get_outer_attrs (),\n+\t\t\t\t  expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::MethodCallExpr &expr)\n+{\n+  HIR::PathExprSegment method_path\n+    = lower_path_expr_seg (expr.get_method_name ());\n+\n+  HIR::Expr *receiver\n+    = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n+\n+  auto const &in_params = expr.get_params ();\n+  std::vector<std::unique_ptr<HIR::Expr> > params;\n+  for (auto &param : in_params)\n+    {\n+      auto trans = ASTLoweringExpr::translate (param.get ());\n+      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::MethodCallExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n+\t\t\t       method_path, std::move (params),\n+\t\t\t       expr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::AssignmentExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::AssignmentExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t       std::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t       expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::IdentifierExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping1 (crate_num, expr.get_node_id (),\n+\t\t\t\t  mappings->get_next_hir_id (crate_num),\n+\t\t\t\t  UNKNOWN_LOCAL_DEFID);\n+  Analysis::NodeMapping mapping2 (mapping1);\n+\n+  HIR::PathIdentSegment ident_seg (expr.get_ident ());\n+  HIR::PathExprSegment seg (mapping1, ident_seg, expr.get_locus (),\n+\t\t\t    HIR::GenericArgs::create_empty ());\n+  translated = new HIR::PathInExpression (mapping2, {seg}, expr.get_locus (),\n+\t\t\t\t\t  false, expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayExpr &expr)\n+{\n+  expr.get_array_elems ()->accept_vis (*this);\n+  rust_assert (translated_array_elems != nullptr);\n+  HIR::ArrayElems *elems = translated_array_elems;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ArrayExpr (mapping, std::unique_ptr<HIR::ArrayElems> (elems),\n+\t\t\t  expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t  expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayIndexExpr &expr)\n+{\n+  HIR::Expr *array_expr\n+    = ASTLoweringExpr::translate (expr.get_array_expr ().get ());\n+  HIR::Expr *array_index_expr\n+    = ASTLoweringExpr::translate (expr.get_index_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ArrayIndexExpr (mapping, std::unique_ptr<HIR::Expr> (array_expr),\n+\t\t\t       std::unique_ptr<HIR::Expr> (array_index_expr),\n+\t\t\t       expr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayElemsValues &elems)\n+{\n+  std::vector<std::unique_ptr<HIR::Expr> > elements;\n+  for (auto &elem : elems.get_values ())\n+    {\n+      HIR::Expr *translated_elem = ASTLoweringExpr::translate (elem.get ());\n+      elements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (mappings->get_current_crate (),\n+\t\t\t\t elems.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated_array_elems\n+    = new HIR::ArrayElemsValues (mapping, std::move (elements));\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArrayElemsCopied &elems)\n+{\n+  HIR::Expr *element\n+    = ASTLoweringExpr::translate (elems.get_elem_to_copy ().get ());\n+  HIR::Expr *num_copies\n+    = ASTLoweringExpr::translate (elems.get_num_copies ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (mappings->get_current_crate (),\n+\t\t\t\t elems.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated_array_elems\n+    = new HIR::ArrayElemsCopied (mapping, std::unique_ptr<HIR::Expr> (element),\n+\t\t\t\t std::unique_ptr<HIR::Expr> (num_copies));\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::LiteralExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Literal l = lower_literal (expr.get_literal ());\n+  translated = new HIR::LiteralExpr (mapping, std::move (l), expr.get_locus (),\n+\t\t\t\t     expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ArithmeticOrLogicalExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  rust_assert (lhs != nullptr);\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+  rust_assert (rhs != nullptr);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::ArithmeticOrLogicalExpr (\n+    mapping, std::unique_ptr<HIR::Expr> (lhs), std::unique_ptr<HIR::Expr> (rhs),\n+    expr.get_expr_type (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ComparisonExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  rust_assert (lhs != nullptr);\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+  rust_assert (rhs != nullptr);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t       std::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t       expr.get_expr_type (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::LazyBooleanExpr &expr)\n+{\n+  HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  rust_assert (lhs != nullptr);\n+  HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+  rust_assert (rhs != nullptr);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t\texpr.get_expr_type (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::NegationExpr &expr)\n+{\n+  HIR::Expr *negated_value\n+    = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+  translated\n+    = new HIR::NegationExpr (mapping,\n+\t\t\t     std::unique_ptr<HIR::Expr> (negated_value),\n+\t\t\t     expr.get_expr_type (), expr.get_outer_attrs (),\n+\t\t\t     expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::TypeCastExpr &expr)\n+{\n+  HIR::Expr *expr_to_cast_to\n+    = ASTLoweringExpr::translate (expr.get_casted_expr ().get ());\n+  HIR::Type *type_to_cast_to\n+    = lower_type_no_bounds (expr.get_type_to_cast_to ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TypeCastExpr (mapping,\n+\t\t\t     std::unique_ptr<HIR::Expr> (expr_to_cast_to),\n+\t\t\t     std::unique_ptr<HIR::Type> (type_to_cast_to),\n+\t\t\t     expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::CompoundAssignmentExpr &expr)\n+{\n+  ArithmeticOrLogicalOperator op;\n+  switch (expr.get_expr_type ())\n+    {\n+    case CompoundAssignmentOperator::ADD:\n+      op = ArithmeticOrLogicalOperator::ADD;\n+      break;\n+    case CompoundAssignmentOperator::SUBTRACT:\n+      op = ArithmeticOrLogicalOperator::SUBTRACT;\n+      break;\n+    case CompoundAssignmentOperator::MULTIPLY:\n+      op = ArithmeticOrLogicalOperator::MULTIPLY;\n+      break;\n+    case CompoundAssignmentOperator::DIVIDE:\n+      op = ArithmeticOrLogicalOperator::DIVIDE;\n+      break;\n+    case CompoundAssignmentOperator::MODULUS:\n+      op = ArithmeticOrLogicalOperator::MODULUS;\n+      break;\n+    case CompoundAssignmentOperator::BITWISE_AND:\n+      op = ArithmeticOrLogicalOperator::BITWISE_AND;\n+      break;\n+    case CompoundAssignmentOperator::BITWISE_OR:\n+      op = ArithmeticOrLogicalOperator::BITWISE_OR;\n+      break;\n+    case CompoundAssignmentOperator::BITWISE_XOR:\n+      op = ArithmeticOrLogicalOperator::BITWISE_XOR;\n+      break;\n+    case CompoundAssignmentOperator::LEFT_SHIFT:\n+      op = ArithmeticOrLogicalOperator::LEFT_SHIFT;\n+      break;\n+    case CompoundAssignmentOperator::RIGHT_SHIFT:\n+      op = ArithmeticOrLogicalOperator::RIGHT_SHIFT;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  HIR::Expr *asignee_expr\n+    = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+  HIR::Expr *value = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::CompoundAssignmentExpr (\n+    mapping, std::unique_ptr<HIR::Expr> (asignee_expr),\n+    std::unique_ptr<HIR::Expr> (value), op, expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::StructExprStruct &struct_expr)\n+{\n+  HIR::PathInExpression *path\n+    = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n+  HIR::PathInExpression copied_path (*path);\n+  delete path;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::StructExprStruct (mapping, copied_path,\n+\t\t\t\t\t  struct_expr.get_inner_attrs (),\n+\t\t\t\t\t  struct_expr.get_outer_attrs (),\n+\t\t\t\t\t  struct_expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::StructExprStructFields &struct_expr)\n+{\n+  // bit of a hack for now\n+  HIR::PathInExpression *path\n+    = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n+  HIR::PathInExpression copied_path (*path);\n+  delete path;\n+\n+  HIR::StructBase *base = nullptr;\n+  if (struct_expr.has_struct_base ())\n+    {\n+      HIR::Expr *translated_base = ASTLoweringExpr::translate (\n+\tstruct_expr.get_struct_base ().get_base_struct ().get ());\n+      base = new HIR::StructBase (std::unique_ptr<HIR::Expr> (translated_base));\n+    }\n+\n+  auto const &in_fields = struct_expr.get_fields ();\n+  std::vector<std::unique_ptr<HIR::StructExprField> > fields;\n+  for (auto &field : in_fields)\n+    {\n+      HIR::StructExprField *translated\n+\t= ASTLowerStructExprField::translate (field.get ());\n+      fields.push_back (std::unique_ptr<HIR::StructExprField> (translated));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::StructExprStructFields (mapping, copied_path, std::move (fields),\n+\t\t\t\t       struct_expr.get_locus (), base,\n+\t\t\t\t       struct_expr.get_inner_attrs (),\n+\t\t\t\t       struct_expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::GroupedExpr &expr)\n+{\n+  HIR::Expr *paren_expr\n+    = ASTLoweringExpr::translate (expr.get_expr_in_parens ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::GroupedExpr (mapping, std::unique_ptr<HIR::Expr> (paren_expr),\n+\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::FieldAccessExpr &expr)\n+{\n+  HIR::Expr *receiver\n+    = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+  translated\n+    = new HIR::FieldAccessExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n+\t\t\t\texpr.get_field_name (), expr.get_outer_attrs (),\n+\t\t\t\texpr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::LoopExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::WhileLoopExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ForLoopExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::BreakExpr &expr)\n+{\n+  HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n+  HIR::Expr *break_expr\n+    = expr.has_break_expr ()\n+\t? ASTLoweringExpr::translate (expr.get_break_expr ().get ())\n+\t: nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::BreakExpr (mapping, expr.get_locus (), std ::move (break_label),\n+\t\t\t  std::unique_ptr<HIR::Expr> (break_expr),\n+\t\t\t  expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::ContinueExpr &expr)\n+{\n+  HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ContinueExpr (mapping, expr.get_locus (),\n+\t\t\t     std ::move (break_label), expr.get_outer_attrs ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::BorrowExpr &expr)\n+{\n+  HIR::Expr *borrow_lvalue\n+    = ASTLoweringExpr::translate (expr.get_borrowed_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::BorrowExpr *borrow_expr\n+    = new HIR::BorrowExpr (mapping, std::unique_ptr<HIR::Expr> (borrow_lvalue),\n+\t\t\t   expr.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t      : Mutability::Imm,\n+\t\t\t   expr.get_outer_attrs (), expr.get_locus ());\n+\n+  if (expr.get_is_double_borrow ())\n+    {\n+      NodeId artifical_bouble_borrow_id = mappings->get_next_node_id ();\n+      Analysis::NodeMapping mapping (crate_num, artifical_bouble_borrow_id,\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     UNKNOWN_LOCAL_DEFID);\n+\n+      borrow_expr\n+\t= new HIR::BorrowExpr (mapping,\n+\t\t\t       std::unique_ptr<HIR::Expr> (borrow_expr),\n+\t\t\t       expr.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t  : Mutability::Imm,\n+\t\t\t       expr.get_outer_attrs (), expr.get_locus ());\n+    }\n+\n+  translated = borrow_expr;\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::DereferenceExpr &expr)\n+{\n+  HIR::Expr *dref_lvalue\n+    = ASTLoweringExpr::translate (expr.get_dereferenced_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::DereferenceExpr (mapping,\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (dref_lvalue),\n+\t\t\t\texpr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::MatchExpr &expr)\n+{\n+  translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFromToExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_from\n+    = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+  HIR::Expr *range_to = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeFromToExpr (mapping,\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t\texpr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFromExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_from\n+    = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeFromExpr (mapping, std::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t      expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeToExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_to = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeToExpr (mapping, std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFullExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::RangeFullExpr (mapping, expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringExpr::visit (AST::RangeFromToInclExpr &expr)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  HIR::Expr *range_from\n+    = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+  HIR::Expr *range_to = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+  translated\n+    = new HIR::RangeFromToInclExpr (mapping,\n+\t\t\t\t    std::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\t    std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t\t    expr.get_locus ());\n+}\n+\n+} // namespace HIR\n+} // namespace Rust"}, {"sha": "315bca34a1cee9d5035258dba8f8887538cd093d", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 45, "deletions": 699, "changes": 744, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851b9e14585160f70eb17a9b312c14e3a0d4c3ed/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=851b9e14585160f70eb17a9b312c14e3a0d4c3ed", "patch": "@@ -19,11 +19,7 @@\n #ifndef RUST_AST_LOWER_EXPR\n #define RUST_AST_LOWER_EXPR\n \n-#include \"rust-diagnostics.h\"\n #include \"rust-ast-lower-base.h\"\n-#include \"rust-ast-lower-block.h\"\n-#include \"rust-ast-lower-struct-field-expr.h\"\n-#include \"rust-ast-lower-pattern.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -76,703 +72,53 @@ class ASTLoweringExpr : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr)\n-  {\n-    ASTLoweringExpr resolver;\n-    expr->accept_vis (resolver);\n-    if (resolver.translated == nullptr)\n-      {\n-\trust_fatal_error (expr->get_locus (), \"Failed to lower expr: [%s]\",\n-\t\t\t  expr->as_string ().c_str ());\n-\treturn nullptr;\n-      }\n-\n-    resolver.mappings->insert_hir_expr (resolver.translated);\n-    resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_hirid (), expr->get_locus ());\n-\n-    if (terminated != nullptr)\n-      *terminated = resolver.terminated;\n-\n-    return resolver.translated;\n-  }\n-\n-  void visit (AST::TupleIndexExpr &expr) override\n-  {\n-    HIR::Expr *tuple_expr\n-      = ASTLoweringExpr::translate (expr.get_tuple_expr ().get (), &terminated);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TupleIndexExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (tuple_expr),\n-\t\t\t\t expr.get_tuple_index (),\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::TupleExpr &expr) override\n-  {\n-    std::vector<std::unique_ptr<HIR::Expr> > tuple_elements;\n-    for (auto &e : expr.get_tuple_elems ())\n-      {\n-\tHIR::Expr *t = ASTLoweringExpr::translate (e.get ());\n-\ttuple_elements.push_back (std::unique_ptr<HIR::Expr> (t));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TupleExpr (std::move (mapping), std::move (tuple_elements),\n-\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n-\t\t\t    expr.get_locus ());\n-  }\n-\n-  void visit (AST::IfExpr &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::IfExprConseqElse &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::IfExprConseqIf &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::BlockExpr &expr) override\n-  {\n-    translated = ASTLoweringBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::UnsafeBlockExpr &expr) override\n-  {\n-    translated = ASTLoweringBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::PathInExpression &expr) override\n-  {\n-    translated = ASTLowerPathInExpression::translate (&expr);\n-  }\n-\n-  void visit (AST::QualifiedPathInExpression &expr) override\n-  {\n-    translated = ASTLowerQualPathInExpression::translate (&expr);\n-  }\n-\n-  void visit (AST::ReturnExpr &expr) override\n-  {\n-    terminated = true;\n-    HIR::Expr *return_expr\n-      = expr.has_returned_expr ()\n-\t  ? ASTLoweringExpr::translate (expr.get_returned_expr ().get ())\n-\t  : nullptr;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::ReturnExpr (mapping, expr.get_locus (),\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (return_expr));\n-  }\n-\n-  void visit (AST::CallExpr &expr) override\n-  {\n-    HIR::Expr *func\n-      = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n-\n-    auto const &in_params = expr.get_params ();\n-    std::vector<std::unique_ptr<HIR::Expr> > params;\n-    for (auto &param : in_params)\n-      {\n-\tauto trans = ASTLoweringExpr::translate (param.get ());\n-\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (\n-      crate_num, UNKNOWN_NODEID /* this can map back to the AST*/,\n-      mappings->get_next_hir_id (crate_num), UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::CallExpr (mapping, std::unique_ptr<HIR::Expr> (func),\n-\t\t\t\t    std::move (params), expr.get_outer_attrs (),\n-\t\t\t\t    expr.get_locus ());\n-  }\n-\n-  void visit (AST::MethodCallExpr &expr) override\n-  {\n-    HIR::PathExprSegment method_path\n-      = lower_path_expr_seg (expr.get_method_name ());\n-\n-    HIR::Expr *receiver\n-      = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n-\n-    auto const &in_params = expr.get_params ();\n-    std::vector<std::unique_ptr<HIR::Expr> > params;\n-    for (auto &param : in_params)\n-      {\n-\tauto trans = ASTLoweringExpr::translate (param.get ());\n-\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::MethodCallExpr (mapping, std::unique_ptr<HIR::Expr> (receiver),\n-\t\t\t\t method_path, std::move (params),\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::AssignmentExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::AssignmentExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t expr.get_locus ());\n-  }\n-\n-  void visit (AST::IdentifierExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping1 (crate_num, expr.get_node_id (),\n-\t\t\t\t    mappings->get_next_hir_id (crate_num),\n-\t\t\t\t    UNKNOWN_LOCAL_DEFID);\n-    Analysis::NodeMapping mapping2 (mapping1);\n-\n-    HIR::PathIdentSegment ident_seg (expr.get_ident ());\n-    HIR::PathExprSegment seg (mapping1, ident_seg, expr.get_locus (),\n-\t\t\t      HIR::GenericArgs::create_empty ());\n-    translated = new HIR::PathInExpression (mapping2, {seg}, expr.get_locus (),\n-\t\t\t\t\t    false, expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::ArrayExpr &expr) override\n-  {\n-    expr.get_array_elems ()->accept_vis (*this);\n-    rust_assert (translated_array_elems != nullptr);\n-    HIR::ArrayElems *elems = translated_array_elems;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ArrayExpr (mapping, std::unique_ptr<HIR::ArrayElems> (elems),\n-\t\t\t    expr.get_inner_attrs (), expr.get_outer_attrs (),\n-\t\t\t    expr.get_locus ());\n-  }\n-\n-  void visit (AST::ArrayIndexExpr &expr) override\n-  {\n-    HIR::Expr *array_expr\n-      = ASTLoweringExpr::translate (expr.get_array_expr ().get ());\n-    HIR::Expr *array_index_expr\n-      = ASTLoweringExpr::translate (expr.get_index_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ArrayIndexExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (array_expr),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (array_index_expr),\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::ArrayElemsValues &elems) override\n-  {\n-    std::vector<std::unique_ptr<HIR::Expr> > elements;\n-    for (auto &elem : elems.get_values ())\n-      {\n-\tHIR::Expr *translated_elem = ASTLoweringExpr::translate (elem.get ());\n-\telements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (mappings->get_current_crate (),\n-\t\t\t\t   elems.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated_array_elems\n-      = new HIR::ArrayElemsValues (mapping, std::move (elements));\n-  }\n-\n-  void visit (AST::ArrayElemsCopied &elems) override\n-  {\n-    HIR::Expr *element\n-      = ASTLoweringExpr::translate (elems.get_elem_to_copy ().get ());\n-    HIR::Expr *num_copies\n-      = ASTLoweringExpr::translate (elems.get_num_copies ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (mappings->get_current_crate (),\n-\t\t\t\t   elems.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated_array_elems\n-      = new HIR::ArrayElemsCopied (mapping,\n-\t\t\t\t   std::unique_ptr<HIR::Expr> (element),\n-\t\t\t\t   std::unique_ptr<HIR::Expr> (num_copies));\n-  }\n-\n-  void visit (AST::LiteralExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Literal l = lower_literal (expr.get_literal ());\n-    translated\n-      = new HIR::LiteralExpr (mapping, std::move (l), expr.get_locus (),\n-\t\t\t      expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::ArithmeticOrLogicalExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    rust_assert (lhs != nullptr);\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-    rust_assert (rhs != nullptr);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ArithmeticOrLogicalExpr (mapping,\n-\t\t\t\t\t  std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t\t  expr.get_expr_type (),\n-\t\t\t\t\t  expr.get_locus ());\n-  }\n-\n-  void visit (AST::ComparisonExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    rust_assert (lhs != nullptr);\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-    rust_assert (rhs != nullptr);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t expr.get_expr_type (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::LazyBooleanExpr &expr) override\n-  {\n-    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    rust_assert (lhs != nullptr);\n-    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-    rust_assert (rhs != nullptr);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t  expr.get_expr_type (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::NegationExpr &expr) override\n-  {\n-    HIR::Expr *negated_value\n-      = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    translated\n-      = new HIR::NegationExpr (mapping,\n-\t\t\t       std::unique_ptr<HIR::Expr> (negated_value),\n-\t\t\t       expr.get_expr_type (), expr.get_outer_attrs (),\n-\t\t\t       expr.get_locus ());\n-  }\n-\n-  void visit (AST::TypeCastExpr &expr) override\n-  {\n-    HIR::Expr *expr_to_cast_to\n-      = ASTLoweringExpr::translate (expr.get_casted_expr ().get ());\n-    HIR::Type *type_to_cast_to\n-      = lower_type_no_bounds (expr.get_type_to_cast_to ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TypeCastExpr (mapping,\n-\t\t\t       std::unique_ptr<HIR::Expr> (expr_to_cast_to),\n-\t\t\t       std::unique_ptr<HIR::Type> (type_to_cast_to),\n-\t\t\t       expr.get_locus ());\n-  }\n-\n-  void visit (AST::CompoundAssignmentExpr &expr) override\n-  {\n-    ArithmeticOrLogicalOperator op;\n-    switch (expr.get_expr_type ())\n-      {\n-      case CompoundAssignmentOperator::ADD:\n-\top = ArithmeticOrLogicalOperator::ADD;\n-\tbreak;\n-      case CompoundAssignmentOperator::SUBTRACT:\n-\top = ArithmeticOrLogicalOperator::SUBTRACT;\n-\tbreak;\n-      case CompoundAssignmentOperator::MULTIPLY:\n-\top = ArithmeticOrLogicalOperator::MULTIPLY;\n-\tbreak;\n-      case CompoundAssignmentOperator::DIVIDE:\n-\top = ArithmeticOrLogicalOperator::DIVIDE;\n-\tbreak;\n-      case CompoundAssignmentOperator::MODULUS:\n-\top = ArithmeticOrLogicalOperator::MODULUS;\n-\tbreak;\n-      case CompoundAssignmentOperator::BITWISE_AND:\n-\top = ArithmeticOrLogicalOperator::BITWISE_AND;\n-\tbreak;\n-      case CompoundAssignmentOperator::BITWISE_OR:\n-\top = ArithmeticOrLogicalOperator::BITWISE_OR;\n-\tbreak;\n-      case CompoundAssignmentOperator::BITWISE_XOR:\n-\top = ArithmeticOrLogicalOperator::BITWISE_XOR;\n-\tbreak;\n-      case CompoundAssignmentOperator::LEFT_SHIFT:\n-\top = ArithmeticOrLogicalOperator::LEFT_SHIFT;\n-\tbreak;\n-      case CompoundAssignmentOperator::RIGHT_SHIFT:\n-\top = ArithmeticOrLogicalOperator::RIGHT_SHIFT;\n-\tbreak;\n-      default:\n-\tgcc_unreachable ();\n-      }\n-\n-    HIR::Expr *asignee_expr\n-      = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n-    HIR::Expr *value\n-      = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::CompoundAssignmentExpr (\n-      mapping, std::unique_ptr<HIR::Expr> (asignee_expr),\n-      std::unique_ptr<HIR::Expr> (value), op, expr.get_locus ());\n-  }\n-\n-  void visit (AST::StructExprStruct &struct_expr) override\n-  {\n-    HIR::PathInExpression *path\n-      = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n-    HIR::PathInExpression copied_path (*path);\n-    delete path;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::StructExprStruct (mapping, copied_path,\n-\t\t\t\t\t    struct_expr.get_inner_attrs (),\n-\t\t\t\t\t    struct_expr.get_outer_attrs (),\n-\t\t\t\t\t    struct_expr.get_locus ());\n-  }\n-\n-  void visit (AST::StructExprStructFields &struct_expr) override\n-  {\n-    // bit of a hack for now\n-    HIR::PathInExpression *path\n-      = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n-    HIR::PathInExpression copied_path (*path);\n-    delete path;\n-\n-    HIR::StructBase *base = nullptr;\n-    if (struct_expr.has_struct_base ())\n-      {\n-\tHIR::Expr *translated_base = ASTLoweringExpr::translate (\n-\t  struct_expr.get_struct_base ().get_base_struct ().get ());\n-\tbase\n-\t  = new HIR::StructBase (std::unique_ptr<HIR::Expr> (translated_base));\n-      }\n-\n-    auto const &in_fields = struct_expr.get_fields ();\n-    std::vector<std::unique_ptr<HIR::StructExprField> > fields;\n-    for (auto &field : in_fields)\n-      {\n-\tHIR::StructExprField *translated\n-\t  = ASTLowerStructExprField::translate (field.get ());\n-\tfields.push_back (std::unique_ptr<HIR::StructExprField> (translated));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::StructExprStructFields (\n-      mapping, copied_path, std::move (fields), struct_expr.get_locus (), base,\n-      struct_expr.get_inner_attrs (), struct_expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::GroupedExpr &expr) override\n-  {\n-    HIR::Expr *paren_expr\n-      = ASTLoweringExpr::translate (expr.get_expr_in_parens ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::GroupedExpr (mapping, std::unique_ptr<HIR::Expr> (paren_expr),\n-\t\t\t      expr.get_inner_attrs (), expr.get_outer_attrs (),\n-\t\t\t      expr.get_locus ());\n-  }\n-\n-  void visit (AST::FieldAccessExpr &expr) override\n-  {\n-    HIR::Expr *receiver\n-      = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    translated\n-      = new HIR::FieldAccessExpr (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (receiver),\n-\t\t\t\t  expr.get_field_name (),\n-\t\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::LoopExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::WhileLoopExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::ForLoopExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::BreakExpr &expr) override\n-  {\n-    HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n-    HIR::Expr *break_expr\n-      = expr.has_break_expr ()\n-\t  ? ASTLoweringExpr::translate (expr.get_break_expr ().get ())\n-\t  : nullptr;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::BreakExpr (mapping, expr.get_locus (),\n-\t\t\t\t     std ::move (break_label),\n-\t\t\t\t     std::unique_ptr<HIR::Expr> (break_expr),\n-\t\t\t\t     expr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::ContinueExpr &expr) override\n-  {\n-    HIR::Lifetime break_label = lower_lifetime (expr.get_label ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::ContinueExpr (mapping, expr.get_locus (),\n-\t\t\t\t\tstd ::move (break_label),\n-\t\t\t\t\texpr.get_outer_attrs ());\n-  }\n-\n-  void visit (AST::BorrowExpr &expr) override\n-  {\n-    HIR::Expr *borrow_lvalue\n-      = ASTLoweringExpr::translate (expr.get_borrowed_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::BorrowExpr *borrow_expr\n-      = new HIR::BorrowExpr (mapping,\n-\t\t\t     std::unique_ptr<HIR::Expr> (borrow_lvalue),\n-\t\t\t     expr.get_is_mut () ? Mutability::Mut\n-\t\t\t\t\t\t: Mutability::Imm,\n-\t\t\t     expr.get_outer_attrs (), expr.get_locus ());\n-\n-    if (expr.get_is_double_borrow ())\n-      {\n-\tNodeId artifical_bouble_borrow_id = mappings->get_next_node_id ();\n-\tAnalysis::NodeMapping mapping (crate_num, artifical_bouble_borrow_id,\n-\t\t\t\t       mappings->get_next_hir_id (crate_num),\n-\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n-\n-\tborrow_expr\n-\t  = new HIR::BorrowExpr (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (borrow_expr),\n-\t\t\t\t expr.get_is_mut () ? Mutability::Mut\n-\t\t\t\t\t\t    : Mutability::Imm,\n-\t\t\t\t expr.get_outer_attrs (), expr.get_locus ());\n-      }\n-\n-    translated = borrow_expr;\n-  }\n-\n-  void visit (AST::DereferenceExpr &expr) override\n-  {\n-    HIR::Expr *dref_lvalue\n-      = ASTLoweringExpr::translate (expr.get_dereferenced_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::DereferenceExpr (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (dref_lvalue),\n-\t\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n-  }\n-\n-  void visit (AST::MatchExpr &expr) override\n-  {\n-    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n-  }\n-\n-  void visit (AST::RangeFromToExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_from\n-      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n-    HIR::Expr *range_to\n-      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeFromToExpr (mapping,\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (range_from),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (range_to),\n-\t\t\t\t  expr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeFromExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_from\n-      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeFromExpr (mapping,\n-\t\t\t\tstd::unique_ptr<HIR::Expr> (range_from),\n-\t\t\t\texpr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeToExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_to\n-      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeToExpr (mapping, std::unique_ptr<HIR::Expr> (range_to),\n-\t\t\t      expr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeFullExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::RangeFullExpr (mapping, expr.get_locus ());\n-  }\n-\n-  void visit (AST::RangeFromToInclExpr &expr) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    HIR::Expr *range_from\n-      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n-    HIR::Expr *range_to\n-      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n-\n-    translated\n-      = new HIR::RangeFromToInclExpr (mapping,\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (range_from),\n-\t\t\t\t      std::unique_ptr<HIR::Expr> (range_to),\n-\t\t\t\t      expr.get_locus ());\n-  }\n+  static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr);\n+\n+  void visit (AST::TupleIndexExpr &expr) override;\n+  void visit (AST::TupleExpr &expr) override;\n+  void visit (AST::IfExpr &expr) override;\n+  void visit (AST::IfExprConseqElse &expr) override;\n+  void visit (AST::IfExprConseqIf &expr) override;\n+  void visit (AST::BlockExpr &expr) override;\n+  void visit (AST::UnsafeBlockExpr &expr) override;\n+  void visit (AST::PathInExpression &expr) override;\n+  void visit (AST::QualifiedPathInExpression &expr) override;\n+  void visit (AST::ReturnExpr &expr) override;\n+  void visit (AST::CallExpr &expr) override;\n+  void visit (AST::MethodCallExpr &expr) override;\n+  void visit (AST::AssignmentExpr &expr) override;\n+  void visit (AST::IdentifierExpr &expr) override;\n+  void visit (AST::ArrayExpr &expr) override;\n+  void visit (AST::ArrayIndexExpr &expr) override;\n+  void visit (AST::ArrayElemsValues &elems) override;\n+  void visit (AST::ArrayElemsCopied &elems) override;\n+  void visit (AST::LiteralExpr &expr) override;\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override;\n+  void visit (AST::ComparisonExpr &expr) override;\n+  void visit (AST::LazyBooleanExpr &expr) override;\n+  void visit (AST::NegationExpr &expr) override;\n+  void visit (AST::TypeCastExpr &expr) override;\n+  void visit (AST::CompoundAssignmentExpr &expr) override;\n+  void visit (AST::StructExprStruct &struct_expr) override;\n+  void visit (AST::StructExprStructFields &struct_expr) override;\n+  void visit (AST::GroupedExpr &expr) override;\n+  void visit (AST::FieldAccessExpr &expr) override;\n+  void visit (AST::LoopExpr &expr) override;\n+  void visit (AST::WhileLoopExpr &expr) override;\n+  void visit (AST::ForLoopExpr &expr) override;\n+  void visit (AST::BreakExpr &expr) override;\n+  void visit (AST::ContinueExpr &expr) override;\n+  void visit (AST::BorrowExpr &expr) override;\n+  void visit (AST::DereferenceExpr &expr) override;\n+  void visit (AST::MatchExpr &expr) override;\n+  void visit (AST::RangeFromToExpr &expr) override;\n+  void visit (AST::RangeFromExpr &expr) override;\n+  void visit (AST::RangeToExpr &expr) override;\n+  void visit (AST::RangeFullExpr &expr) override;\n+  void visit (AST::RangeFromToInclExpr &expr) override;\n \n private:\n-  ASTLoweringExpr ()\n-    : ASTLoweringBase (), translated (nullptr),\n-      translated_array_elems (nullptr), terminated (false)\n-  {}\n+  ASTLoweringExpr ();\n \n   HIR::Expr *translated;\n   HIR::ArrayElems *translated_array_elems;"}]}