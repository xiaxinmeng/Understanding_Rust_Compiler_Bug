{"sha": "31b77593edbf623fb8f84e35baeb927fdd7c55b6", "node_id": "C_kwDOANBUbNoAKDMxYjc3NTkzZWRiZjYyM2ZiOGY4NGUzNWJhZWI5MjdmZGQ3YzU1YjY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-05T16:24:26Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:32Z"}, "message": "gccrs: Ensure uniqueness on Path probe's\n\nWhen we lookup names in paths such as Foo::bar, foo is a type we resolve\nand then we lookup 'bar' based on what type Foo is which includes probing\nrelevant bounds of this type. We currently return a vector of possible\ncandidates and this patch changes it so that we return a set of unique\nitems based on DefId.\n\nAddresses #1555\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-expr.cc\n\t(CompileExpr::resolve_method_address): Use auto and minor change\n\tin candidate init.\n\t* typecheck/rust-hir-type-check-path.cc\n\t(TypeCheckExpr::resolve_segments): Likewise.\n\t* typecheck/rust-hir-type-check-type.cc: Likewise.\n\t* backend/rust-compile-resolve-path.cc\n\t(HIRCompileBase::query_compile): Likewise. Removecall to\n\tset_ty_ref.\n\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): Add\n\tlocus initializer in ctor, implement get_defid.\n\t(class PathProbeType::Probe): return a set instead of vector.\n\tAdjust class impl.\n\t(class ReportMultipleCandidateError): Do not inherit from\n\tHIRImplVisitor anymore and remove corresponding impl. Adjust for\n\tchange in Probe. Simplify Report handling.\n\t(class PathProbeImplTrait::Probe): Adjust return type.", "tree": {"sha": "083eabe2a4f749680663d53cbb20639186992d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083eabe2a4f749680663d53cbb20639186992d46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b77593edbf623fb8f84e35baeb927fdd7c55b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b77593edbf623fb8f84e35baeb927fdd7c55b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b77593edbf623fb8f84e35baeb927fdd7c55b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b77593edbf623fb8f84e35baeb927fdd7c55b6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79434fabf762d60b7aa54e2319c44c1610dd8065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79434fabf762d60b7aa54e2319c44c1610dd8065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79434fabf762d60b7aa54e2319c44c1610dd8065"}], "stats": {"total": 124, "additions": 58, "deletions": 66}, "files": [{"sha": "ddf914f673636e09572eb856b4facf7f33369568", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=31b77593edbf623fb8f84e35baeb927fdd7c55b6", "patch": "@@ -1982,7 +1982,7 @@ CompileExpr::resolve_method_address (TyTy::FnType *fntype, HirId ref,\n   // trait-impl-item's definition\n \n   auto root = receiver->get_root ();\n-  std::vector<Resolver::PathProbeCandidate> candidates\n+  auto candidates\n     = Resolver::PathProbeType::Probe (root, segment, true /* probe_impls */,\n \t\t\t\t      false /* probe_bounds */,\n \t\t\t\t      true /* ignore_mandatory_trait_items */);\n@@ -2011,7 +2011,7 @@ CompileExpr::resolve_method_address (TyTy::FnType *fntype, HirId ref,\n       // implementation and we should just return error_mark_node\n \n       rust_assert (candidates.size () == 1);\n-      auto &candidate = candidates.at (0);\n+      auto &candidate = *candidates.begin ();\n       rust_assert (candidate.is_impl_candidate ());\n       rust_assert (candidate.ty->get_kind () == TyTy::TypeKind::FNDEF);\n       TyTy::FnType *candidate_call = static_cast<TyTy::FnType *> (candidate.ty);"}, {"sha": "ab8e628c75c1b8e8685e4b4336c7be8e37320327", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=31b77593edbf623fb8f84e35baeb927fdd7c55b6", "patch": "@@ -251,7 +251,7 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t  // item so its up to us to figure out if this path should resolve\n \t  // to an trait-impl-block-item or if it can be defaulted to the\n \t  // trait-impl-item's definition\n-\t  std::vector<Resolver::PathProbeCandidate> candidates\n+\t  auto candidates\n \t    = Resolver::PathProbeImplTrait::Probe (receiver, final_segment,\n \t\t\t\t\t\t   trait_ref);\n \t  if (candidates.size () == 0)\n@@ -270,7 +270,9 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t    }\n \t  else\n \t    {\n-\t      Resolver::PathProbeCandidate &candidate = candidates.at (0);\n+\t      rust_assert (candidates.size () == 1);\n+\n+\t      auto candidate = *candidates.begin ();\n \t      rust_assert (candidate.is_impl_candidate ());\n \n \t      HIR::ImplBlock *impl = candidate.item.impl.parent;\n@@ -288,8 +290,6 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t      else\n \t\treturn CompileInherentImplItem::Compile (impl_item, ctx, lookup,\n \t\t\t\t\t\t\t true, expr_locus);\n-\n-\t      lookup->set_ty_ref (impl_item->get_impl_mappings ().get_hirid ());\n \t    }\n \t}\n     }"}, {"sha": "6d6bcf8e7cda39d9a8f64359058bdde9f68935f1", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 50, "deletions": 58, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=31b77593edbf623fb8f84e35baeb927fdd7c55b6", "patch": "@@ -80,17 +80,17 @@ struct PathProbeCandidate\n \n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n \t\t      EnumItemCandidate enum_field)\n-    : type (type), ty (ty), item (enum_field)\n+    : type (type), ty (ty), locus (locus), item (enum_field)\n   {}\n \n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n \t\t      ImplItemCandidate impl)\n-    : type (type), ty (ty), item (impl)\n+    : type (type), ty (ty), locus (locus), item (impl)\n   {}\n \n   PathProbeCandidate (CandidateType type, TyTy::BaseType *ty, Location locus,\n \t\t      TraitItemCandidate trait)\n-    : type (type), ty (ty), item (trait)\n+    : type (type), ty (ty), locus (locus), item (trait)\n   {}\n \n   std::string as_string () const\n@@ -123,12 +123,45 @@ struct PathProbeCandidate\n   }\n \n   bool is_error () const { return type == ERROR; }\n+\n+  DefId get_defid () const\n+  {\n+    switch (type)\n+      {\n+      case ENUM_VARIANT:\n+\treturn item.enum_field.variant->get_defid ();\n+\tbreak;\n+\n+      case IMPL_CONST:\n+      case IMPL_TYPE_ALIAS:\n+      case IMPL_FUNC:\n+\treturn item.impl.impl_item->get_impl_mappings ().get_defid ();\n+\tbreak;\n+\n+      case TRAIT_ITEM_CONST:\n+      case TRAIT_TYPE_ALIAS:\n+      case TRAIT_FUNC:\n+\treturn item.trait.item_ref->get_mappings ().get_defid ();\n+\tbreak;\n+\n+      case ERROR:\n+      default:\n+\treturn UNKNOWN_DEFID;\n+      }\n+\n+    return UNKNOWN_DEFID;\n+  }\n+\n+  bool operator< (const PathProbeCandidate &c) const\n+  {\n+    return get_defid () < c.get_defid ();\n+  }\n };\n \n class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n {\n public:\n-  static std::vector<PathProbeCandidate>\n+  static std::set<PathProbeCandidate>\n   Probe (const TyTy::BaseType *receiver,\n \t const HIR::PathIdentSegment &segment_name, bool probe_impls,\n \t bool probe_bounds, bool ignore_mandatory_trait_items,\n@@ -203,7 +236,7 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n \tPathProbeCandidate candidate{\n \t  PathProbeCandidate::CandidateType::IMPL_TYPE_ALIAS, ty,\n \t  alias.get_locus (), impl_item_candidate};\n-\tcandidates.push_back (std::move (candidate));\n+\tcandidates.insert (std::move (candidate));\n       }\n   }\n \n@@ -222,7 +255,7 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n \tPathProbeCandidate candidate{\n \t  PathProbeCandidate::CandidateType::IMPL_CONST, ty,\n \t  constant.get_locus (), impl_item_candidate};\n-\tcandidates.push_back (std::move (candidate));\n+\tcandidates.insert (std::move (candidate));\n       }\n   }\n \n@@ -241,7 +274,7 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n \tPathProbeCandidate candidate{\n \t  PathProbeCandidate::CandidateType::IMPL_FUNC, ty,\n \t  function.get_locus (), impl_item_candidate};\n-\tcandidates.push_back (std::move (candidate));\n+\tcandidates.insert (std::move (candidate));\n       }\n   }\n \n@@ -259,7 +292,7 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n     PathProbeCandidate candidate{\n       PathProbeCandidate::CandidateType::ENUM_VARIANT, receiver->clone (),\n       mappings->lookup_location (adt->get_ty_ref ()), enum_item_candidate};\n-    candidates.push_back (std::move (candidate));\n+    candidates.insert (std::move (candidate));\n   }\n \n   void process_impl_items_for_candidates ()\n@@ -338,8 +371,9 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n \t\t\t\t\t\t\t\timpl};\n \n     PathProbeCandidate candidate{candidate_type, trait_item_tyty,\n-\t\t\t\t trait_ref->get_locus (), trait_item_candidate};\n-    candidates.push_back (std::move (candidate));\n+\t\t\t\t trait_item_ref->get_locus (),\n+\t\t\t\t trait_item_candidate};\n+    candidates.insert (std::move (candidate));\n   }\n \n   void\n@@ -383,7 +417,7 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n     PathProbeCandidate candidate{candidate_type, trait_item_tyty,\n \t\t\t\t trait_item_ref->get_locus (),\n \t\t\t\t trait_item_candidate};\n-    candidates.push_back (std::move (candidate));\n+    candidates.insert (std::move (candidate));\n   }\n \n protected:\n@@ -428,72 +462,30 @@ class PathProbeType : public TypeCheckBase, public HIR::HIRImplVisitor\n \n   const TyTy::BaseType *receiver;\n   const HIR::PathIdentSegment &search;\n-  std::vector<PathProbeCandidate> candidates;\n+  std::set<PathProbeCandidate> candidates;\n   HIR::ImplBlock *current_impl;\n   DefId specific_trait_id;\n };\n \n-class ReportMultipleCandidateError : private TypeCheckBase,\n-\t\t\t\t     private HIR::HIRImplVisitor\n+class ReportMultipleCandidateError : private TypeCheckBase\n {\n public:\n-  static void Report (std::vector<PathProbeCandidate> &candidates,\n+  static void Report (std::set<PathProbeCandidate> &candidates,\n \t\t      const HIR::PathIdentSegment &query, Location query_locus)\n   {\n     RichLocation r (query_locus);\n-    ReportMultipleCandidateError visitor (r);\n     for (auto &c : candidates)\n-      {\n-\tswitch (c.type)\n-\t  {\n-\t  case PathProbeCandidate::CandidateType::ERROR:\n-\t  case PathProbeCandidate::CandidateType::ENUM_VARIANT:\n-\t    gcc_unreachable ();\n-\t    break;\n-\n-\t  case PathProbeCandidate::CandidateType::IMPL_CONST:\n-\t  case PathProbeCandidate::CandidateType::IMPL_TYPE_ALIAS:\n-\t  case PathProbeCandidate::CandidateType::IMPL_FUNC:\n-\t    c.item.impl.impl_item->accept_vis (visitor);\n-\t    break;\n-\n-\t  case PathProbeCandidate::CandidateType::TRAIT_ITEM_CONST:\n-\t  case PathProbeCandidate::CandidateType::TRAIT_TYPE_ALIAS:\n-\t  case PathProbeCandidate::CandidateType::TRAIT_FUNC:\n-\t    r.add_range (c.item.trait.item_ref->get_locus ());\n-\t    break;\n-\t  }\n-      }\n+      r.add_range (c.locus);\n \n     rust_error_at (r, \"multiple applicable items in scope for: %s\",\n \t\t   query.as_string ().c_str ());\n   }\n-\n-  void visit (HIR::TypeAlias &alias) override\n-  {\n-    r.add_range (alias.get_locus ());\n-  }\n-\n-  void visit (HIR::ConstantItem &constant) override\n-  {\n-    r.add_range (constant.get_locus ());\n-  }\n-\n-  void visit (HIR::Function &function) override\n-  {\n-    r.add_range (function.get_locus ());\n-  }\n-\n-private:\n-  ReportMultipleCandidateError (RichLocation &r) : TypeCheckBase (), r (r) {}\n-\n-  RichLocation &r;\n };\n \n class PathProbeImplTrait : public PathProbeType\n {\n public:\n-  static std::vector<PathProbeCandidate>\n+  static std::set<PathProbeCandidate>\n   Probe (const TyTy::BaseType *receiver,\n \t const HIR::PathIdentSegment &segment_name,\n \t const TraitReference *trait_reference)"}, {"sha": "6f1fd416c19f78989bdc33ec8461ab925604ca00", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=31b77593edbf623fb8f84e35baeb927fdd7c55b6", "patch": "@@ -337,7 +337,7 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \t  return;\n \t}\n \n-      auto &candidate = candidates.at (0);\n+      auto &candidate = *candidates.begin ();\n       prev_segment = tyseg;\n       tyseg = candidate.ty;\n "}, {"sha": "a91d15c8e2c8a4809a5a8fb7e803454777546c83", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b77593edbf623fb8f84e35baeb927fdd7c55b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=31b77593edbf623fb8f84e35baeb927fdd7c55b6", "patch": "@@ -462,7 +462,7 @@ TypeCheckType::resolve_segments (\n \t  return new TyTy::ErrorType (expr_id);\n \t}\n \n-      auto &candidate = candidates.at (0);\n+      auto &candidate = *candidates.begin ();\n       prev_segment = tyseg;\n       tyseg = candidate.ty;\n "}]}