{"sha": "5c2424217a35eee7fa8bf1e8456b2143af632e53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNDI0MjE3YTM1ZWVlN2ZhOGJmMWU4NDU2YjIxNDNhZjYzMmU1Mw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@koffie.nl", "date": "2003-03-10T19:36:26Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-03-10T19:36:26Z"}, "message": "altivec-9.c: New file.\n\n2003-03-10  Segher Boessenkool  <segher@koffie.nl>\n\n        * testsuite/gcc.dg/altivec-9.c: New file.\n\n        * config/rs6000/rs6000.c (altivec_frame_fixup): Remove.\n        (rs6000_emit_prologue): Use rs6000_frame_related instead.\n\nFrom-SVN: r64109", "tree": {"sha": "3a1a651b2e09b63df5057482e942cf89f31614cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a1a651b2e09b63df5057482e942cf89f31614cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c2424217a35eee7fa8bf1e8456b2143af632e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2424217a35eee7fa8bf1e8456b2143af632e53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c2424217a35eee7fa8bf1e8456b2143af632e53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2424217a35eee7fa8bf1e8456b2143af632e53/comments", "author": null, "committer": null, "parents": [{"sha": "70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70144e9c6c0fd4432410c408e2bb4b6d629a0d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70144e9c6c0fd4432410c408e2bb4b6d629a0d14"}], "stats": {"total": 37, "additions": 9, "deletions": 28}, "files": [{"sha": "9cfdcb8ef747b0db3781c0111375860cb277aad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2424217a35eee7fa8bf1e8456b2143af632e53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2424217a35eee7fa8bf1e8456b2143af632e53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c2424217a35eee7fa8bf1e8456b2143af632e53", "patch": "@@ -1,3 +1,10 @@\n+2003-03-10  Segher Boessenkool  <segher@koffie.nl>\n+\n+        * testsuite/gcc.dg/altivec-9.c: New file.\n+\n+        * config/rs6000/rs6000.c (altivec_frame_fixup): Remove.\n+        (rs6000_emit_prologue): Use rs6000_frame_related instead.\n+\n 2003-03-10  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/spe.h: Define __ev64_*64__ to use single element"}, {"sha": "ec9008dd1a76c4e91b95fefd4b7dd609939dd930", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2424217a35eee7fa8bf1e8456b2143af632e53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2424217a35eee7fa8bf1e8456b2143af632e53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5c2424217a35eee7fa8bf1e8456b2143af632e53", "patch": "@@ -267,7 +267,6 @@ static int first_altivec_reg_to_save PARAMS ((void));\n static unsigned int compute_vrsave_mask PARAMS ((void));\n static void is_altivec_return_reg PARAMS ((rtx, void *));\n static rtx generate_set_vrsave PARAMS ((rtx, rs6000_stack_t *, int));\n-static void altivec_frame_fixup PARAMS ((rtx, rtx, HOST_WIDE_INT));\n static int easy_vector_constant PARAMS ((rtx));\n static bool is_ev64_opaque_type PARAMS ((tree));\n static rtx rs6000_dwarf_register_span PARAMS ((rtx));\n@@ -10102,32 +10101,6 @@ rs6000_emit_allocate_stack (size, copy_r12)\n \t\t       REG_NOTES (insn));\n }\n \n-/* Add a RTX_FRAME_RELATED note so that dwarf2out_frame_debug_expr\n-   knows that:\n-\n-     (mem (plus (blah) (regXX)))\n-\n-   is really:\n-\n-     (mem (plus (blah) (const VALUE_OF_REGXX))).  */\n-\n-static void\n-altivec_frame_fixup (insn, reg, val)\n-     rtx insn, reg;\n-     HOST_WIDE_INT val;\n-{\n-  rtx real;\n-\n-  real = copy_rtx (PATTERN (insn));\n-\n-  real = replace_rtx (real, reg, GEN_INT (val));\n-\n-  RTX_FRAME_RELATED_P (insn) = 1;\n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t\treal,\n-\t\t\t\t\tREG_NOTES (insn));\n-}\n-\n /* Add to 'insn' a note which is PATTERN (INSN) but with REG replaced\n    with (plus:P (reg 1) VAL), and with REG2 replaced with RREG if REG2\n    is not NULL.  It would be nice if dwarf2out_frame_debug_expr could\n@@ -10494,7 +10467,8 @@ rs6000_emit_prologue ()\n \n \t    insn = emit_move_insn (mem, savereg);\n \n-\t    altivec_frame_fixup (insn, areg, offset);\n+\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n+\t\t\t\t  areg, GEN_INT (offset));\n \t  }\n     }\n "}]}