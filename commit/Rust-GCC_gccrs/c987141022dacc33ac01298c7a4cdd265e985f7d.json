{"sha": "c987141022dacc33ac01298c7a4cdd265e985f7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4NzE0MTAyMmRhY2MzM2FjMDEyOThjN2E0Y2RkMjY1ZTk4NWY3ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-11-02T00:21:07Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-11-02T00:21:07Z"}, "message": "std_complex.h (complex<>): Remove (cos<>, cosh<>, exp<>, log<>, log<>, sin, sinh<>) friend declarations.\n\n\t* include/bits/std_complex.h (complex<>): Remove (cos<>, cosh<>,\n\texp<>, log<>, log<>, sin, sinh<>) friend declarations.\n\t(cos, cosh, sin, sinh): Define primary templates.\n\n\t* src/complex.cc (cos<>, cosh<>, sin<>, sinh<>): Comment out\n\tdefinitions.\n\nFrom-SVN: r37197", "tree": {"sha": "a6bbfb11720c5b9d02c11cad36a442ffc2b36470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6bbfb11720c5b9d02c11cad36a442ffc2b36470"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c987141022dacc33ac01298c7a4cdd265e985f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c987141022dacc33ac01298c7a4cdd265e985f7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c987141022dacc33ac01298c7a4cdd265e985f7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c987141022dacc33ac01298c7a4cdd265e985f7d/comments", "author": null, "committer": null, "parents": [{"sha": "a97c960093d8b6db44ea89e537af3b6df4df9516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97c960093d8b6db44ea89e537af3b6df4df9516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a97c960093d8b6db44ea89e537af3b6df4df9516"}], "stats": {"total": 114, "additions": 65, "deletions": 49}, "files": [{"sha": "2967ba036681df9997cc07003702138ed5adfc96", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c987141022dacc33ac01298c7a4cdd265e985f7d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c987141022dacc33ac01298c7a4cdd265e985f7d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c987141022dacc33ac01298c7a4cdd265e985f7d", "patch": "@@ -1,3 +1,12 @@\n+2000-11-02  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* include/bits/std_complex.h (complex<>): Remove (cos<>, cosh<>,\n+\texp<>, log<>, log<>, sin, sinh<>) friend declarations.\n+\t(cos, cosh, sin, sinh): Define primary templates.\n+\n+\t* src/complex.cc (cos<>, cosh<>, sin<>, sinh<>): Comment out\n+\tdefinitions. \n+\n 2000-11-01  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* bits/basic_file.h (_M_open_mode): Change signature, move"}, {"sha": "b2aaa4e961016aad7cd0e34cc2c96728807c3633", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c987141022dacc33ac01298c7a4cdd265e985f7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c987141022dacc33ac01298c7a4cdd265e985f7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=c987141022dacc33ac01298c7a4cdd265e985f7d", "patch": "@@ -177,21 +177,11 @@ namespace std\n     friend class complex<double>;\n     friend class complex<long double>;\n \n-    // friend float abs<>(const complex<float>&);\n-    //friend complex<float> conj<>(const complex<float>&);\n-\n-    friend complex<float> cos<>(const complex<float>&);\n-    friend complex<float> cosh<>(const complex<float>&);\n-    friend complex<float> exp<>(const complex<float>&);\n-    friend complex<float> log<>(const complex<float>&);\n-    friend complex<float> log10<>(const complex<float>&);\n     friend complex<float> pow<>(const complex<float>&, int);\n     friend complex<float> pow<>(const complex<float>&, const float&);\n     friend complex<float> pow<>(const complex<float>&,\n \t\t\t\tconst complex<float>&);\n     friend complex<float> pow<>(const float&, const complex<float>&);\n-    friend complex<float> sin<>(const complex<float>&);\n-    friend complex<float> sinh<>(const complex<float>&);\n     friend complex<float> sqrt<>(const complex<float>&);\n     friend complex<float> tan<>(const complex<float>&);\n     friend complex<float> tanh<>(const complex<float>&);\n@@ -252,20 +242,11 @@ namespace std\n     friend class complex<float>;\n     friend class complex<long double>;\n \n-    // friend double abs<>(const complex<double>&);\n-    // friend complex<double> conj<>(const complex<double>&);\n-    friend complex<double> cos<>(const complex<double>&);\n-    friend complex<double> cosh<>(const complex<double>&);\n-    friend complex<double> exp<>(const complex<double>&);\n-    friend complex<double> log<>(const complex<double>&);\n-    friend complex<double> log10<>(const complex<double>&);\n     friend complex<double> pow<>(const complex<double>&, int);\n     friend complex<double> pow<>(const complex<double>&, const double&);\n     friend complex<double> pow<>(const complex<double>&,\n \t\t\t\t const complex<double>&);\n     friend complex<double> pow<>(const double&, const complex<double>&);\n-    friend complex<double> sin<>(const complex<double>&);\n-    friend complex<double> sinh<>(const complex<double>&);\n     friend complex<double> sqrt<>(const complex<double>&);\n     friend complex<double> tan<>(const complex<double>&);\n     friend complex<double> tanh<>(const complex<double>&);\n@@ -327,22 +308,13 @@ namespace std\n     friend class complex<float>;\n     friend class complex<double>;\n \n-    // friend long double abs<>(const complex<long double>&);\n-    //friend complex<long double> conj<>(const complex<long double>&);\n-    friend complex<long double> cos<>(const complex<long double>&);\n-    friend complex<long double> cosh<>(const complex<long double>&);\n-    friend complex<long double> exp<>(const complex<long double>&);\n-    friend complex<long double> log<>(const complex<long double>&);\n-    friend complex<long double> log10<>(const complex<long double>&);\n     friend complex<long double> pow<>(const complex<long double>&, int);\n     friend complex<long double> pow<>(const complex<long double>&,\n \t\t\t\t      const long double&);\n     friend complex<long double> pow<>(const complex<long double>&,\n \t\t\t\t      const complex<long double>&);\n     friend complex<long double> pow<>(const long double&,\n \t\t\t\t      const complex<long double>&);\n-    friend complex<long double> sin<>(const complex<long double>&);\n-    friend complex<long double> sinh<>(const complex<long double>&);\n     friend complex<long double> sqrt<>(const complex<long double>&);\n     friend complex<long double> tan<>(const complex<long double>&);\n     friend complex<long double> tanh<>(const complex<long double>&);\n@@ -776,7 +748,7 @@ namespace std\n     complex<_Tp>&\n     complex<_Tp>::operator*=(const complex<_Up>& __z)\n     {\n-      _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();\n+      const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();\n       _M_imag = _M_real * __z.imag() + _M_imag * __z.real();\n       _M_real = __r;\n       return *this;\n@@ -789,8 +761,8 @@ namespace std\n     complex<_Tp>&\n     complex<_Tp>::operator/=(const complex<_Up>& __z)\n     {\n-      _Tp __r =  _M_real * __z.real() + _M_imag * __z.imag();\n-      _Tp __n = norm(__z);\n+      const _Tp __r =  _M_real * __z.real() + _M_imag * __z.imag();\n+      const _Tp __n = norm(__z);\n       _M_imag = (_M_real * __z.imag() - _M_imag * __z.real()) / __n;\n       _M_real = __r / __n;\n       return *this;\n@@ -923,7 +895,7 @@ namespace std\n     {\n       _Tp __x = __z.real();\n       _Tp __y = __z.imag();\n-      _Tp __s = abs(__x) + abs(__y);\n+      const _Tp __s = abs(__x) + abs(__y);\n       if (__s == _Tp())  // well ...\n         return __s;\n       __x /= __s; __y /= __s;\n@@ -960,6 +932,24 @@ namespace std\n //      {  return complex<double> (~__x._M_value); }\n \n   // Transcendentals:\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    cos(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    cosh(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));\n+    }\n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     exp(const complex<_Tp>& __z)\n@@ -974,7 +964,24 @@ namespace std\n     inline complex<_Tp>\n     log10(const complex<_Tp>& __z)\n     { return log(__z) / log(_Tp(10.0)); }\n-  \n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    sin(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y)); \n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    sinh(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp  __y = __z.imag();\n+      return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n+    }\n } // namespace std\n \n #endif\t/* _CPP_COMPLEX */"}, {"sha": "f57aa75c10d804f454b484bcbea9e96e9eedf8f2", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c987141022dacc33ac01298c7a4cdd265e985f7d/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c987141022dacc33ac01298c7a4cdd265e985f7d/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=c987141022dacc33ac01298c7a4cdd265e985f7d", "patch": "@@ -76,15 +76,15 @@ namespace std\n //  #endif\n //    }\n \n-  template<>\n-  complex<FLT>\n-  cos(const complex<FLT>& __x)\n-  { return complex<FLT>(ccos(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    cos(const complex<FLT>& __x)\n+//    { return complex<FLT>(ccos(__x._M_value)); }\n \n-  template<>\n-  complex<FLT>\n-  cosh(const complex<FLT>& __x)\n-  { return complex<FLT>(ccosh(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    cosh(const complex<FLT>& __x)\n+//    { return complex<FLT>(ccosh(__x._M_value)); }\n \n //    template<>\n //    complex<FLT>\n@@ -121,15 +121,15 @@ namespace std\n   pow(const FLT& __x, const complex<FLT>& __y)\n   { return complex<FLT>(cexp(__y._M_value * log(__x))); }\n \n-  template<>\n-  complex<FLT>\n-  sin(const complex<FLT>& __x)\n-  { return complex<FLT>(csin(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    sin(const complex<FLT>& __x)\n+//    { return complex<FLT>(csin(__x._M_value)); }\n \n-  template<>\n-  complex<FLT>\n-  sinh(const complex<FLT>& __x)\n-  { return complex<FLT>(csinh(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    sinh(const complex<FLT>& __x)\n+//    { return complex<FLT>(csinh(__x._M_value)); }\n   \n   template<>\n   complex<FLT>"}]}