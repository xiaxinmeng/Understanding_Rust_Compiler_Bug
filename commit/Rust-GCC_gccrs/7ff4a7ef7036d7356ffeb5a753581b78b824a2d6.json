{"sha": "7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmNGE3ZWY3MDM2ZDczNTZmZmViNWE3NTM1ODFiNzhiODI0YTJkNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-30T13:48:06Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-30T13:48:06Z"}, "message": "c-pretty-print.h (pp_c_statement): Declare.\n\n\t* c-pretty-print.h (pp_c_statement): Declare.\n\t* c-pretty-print.c (pp_c_postfix_expression): #if 0 support for SRCLOC.\n\t(pp_c_statement): Define.\n\nFrom-SVN: r55874", "tree": {"sha": "ed3862a805f13d16545214c641e4aa444b424cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed3862a805f13d16545214c641e4aa444b424cd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/comments", "author": null, "committer": null, "parents": [{"sha": "a15e868a957adedfec71a27b4ff96293eff89d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15e868a957adedfec71a27b4ff96293eff89d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15e868a957adedfec71a27b4ff96293eff89d18"}], "stats": {"total": 268, "additions": 261, "deletions": 7}, "files": [{"sha": "f039b24e44712e26cf101c59c165eb06dd54df9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "patch": "@@ -1,3 +1,9 @@\n+2002-07-30  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* c-pretty-print.h (pp_c_statement): Declare.\n+\t* c-pretty-print.c (pp_c_postfix_expression): #if 0 support for SRCLOC.\n+\t(pp_c_statement): Define.\n+\n 2002-07-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alpha.h, arc.h, arm/aout.h, avr.h, c4x.h, cris.h, d30v.h,"}, {"sha": "c861d1727d3c009eda5bcfeb5b4fe8d03db72a5b", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 251, "deletions": 4, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "patch": "@@ -70,9 +70,6 @@ pp_c_cv_qualifier (ppi, cv)\n     pp_c_identifier (ppi, flag_isoc99 ? \"restrict\" : \"__restrict__\");\n }\n \n-\f\n-/* Statements.  */\n-\n \f\n /* Expressions.  */\n \n@@ -501,6 +498,30 @@ pp_c_postfix_expression (ppi, e)\n       pp_initializer (ppi, e);\n       break;\n       \n+#if 0\n+    case SRCLOC:\n+      pp_left_paren (ppi);\n+      pp_identifier (ppi, \"__location__\");\n+      pp_right_paren (ppi);\n+      pp_whitespace (ppi);\n+      pp_left_brace (ppi);\n+      pp_dot (ppi);\n+      pp_identifier (ppi, \"file\");\n+      pp_whitespace (ppi);\n+      pp_equal (ppi);\n+      pp_c_whitespace (ppi);\n+      pp_c_expression (ppi, SRCLOC_FILE (e));\n+      pp_separate_with (ppi, ',');\n+      pp_dot (ppi);\n+      pp_identifier (ppi, \"line\");\n+      pp_whitespace (ppi);\n+      pp_equal (ppi);\n+      pp_c_whitespace (ppi);\n+      pp_c_expression (ppi, SRCLOC_LINE (e));\n+      pp_right_brace (ppi);\n+      break;\n+#endif\n+\n     case VA_ARG_EXPR:\n       pp_c_identifier (ppi, \"__builtin_va_arg\");\n       pp_c_left_paren (ppi);\n@@ -516,7 +537,7 @@ pp_c_postfix_expression (ppi, e)\n     }\n }\n \n-/* Print out an expession-list; E is expected to be a TREE_LIST  */\n+/* Print out an expression-list; E is expected to be a TREE_LIST  */\n void\n pp_c_expression_list (ppi, e)\n      c_pretty_print_info *ppi;\n@@ -1000,3 +1021,229 @@ pp_c_expression (ppi, e)\n     }\n }\n \n+\f\n+/* Statements.  */\n+void\n+pp_c_statement (ppi, stmt)\n+     c_pretty_print_info *ppi;\n+     tree stmt;\n+{\n+  const enum tree_code code = TREE_CODE (stmt);\n+  switch (code)\n+    {\n+    case LABEL_STMT:\n+    case CASE_LABEL:\n+      pp_newline (ppi);\n+      if (code == LABEL_STMT)\n+\tpp_tree_identifier (ppi, DECL_NAME (LABEL_STMT_LABEL (stmt)));\n+      else if (code == LABEL_STMT)\n+\t{\n+\t  if (CASE_LOW (stmt) == NULL_TREE)\n+\t    pp_identifier (ppi, \"default\");\n+\t  else\n+\t    {\n+\t      pp_c_identifier (ppi, \"case\");\n+\t      pp_c_whitespace (ppi);\n+\t      pp_conditional_expression (ppi, CASE_LOW (stmt));\n+\t      if (CASE_HIGH (stmt))\n+\t\t{\n+\t\t  pp_identifier (ppi, \"...\");\n+\t\t  pp_conditional_expression (ppi, CASE_HIGH (stmt));\n+\t\t}\n+\t    }\n+\t}\n+      pp_colon (ppi);\n+      pp_newline_and_indent (ppi, 3);\n+      break;\n+\n+    case COMPOUND_STMT:\n+      pp_left_brace (ppi);\n+      pp_newline_and_indent (ppi, 3);\n+      for (stmt = COMPOUND_BODY (stmt); stmt; stmt = TREE_CHAIN (stmt))\n+\tpp_c_statement (ppi, stmt);\n+      pp_newline_and_indent (ppi, -3);\n+      pp_right_brace (ppi);\n+      pp_newline (ppi);\n+      break;\n+\n+    case EXPR_STMT:\n+    case CLEANUP_STMT:\n+      pp_newline (ppi);\n+      pp_c_expression (ppi, code == EXPR_STMT \n+\t\t       ? EXPR_STMT_EXPR (stmt)\n+\t\t       : CLEANUP_EXPR (stmt));\n+      pp_semicolon (ppi);\n+      pp_newline (ppi);\n+      break;\n+\n+    case IF_STMT:\n+      pp_c_identifier (ppi, \"if\");\n+      pp_whitespace (ppi);\n+      pp_c_left_paren (ppi);\n+      pp_c_expression (ppi, IF_COND (stmt));\n+      pp_right_paren (ppi);\n+      pp_newline_and_indent (ppi, 3);\n+      pp_statement (ppi, THEN_CLAUSE (stmt));\n+      pp_newline_and_indent (ppi, -3);\n+      if (ELSE_CLAUSE (stmt))\n+\t{\n+\t  tree else_clause = ELSE_CLAUSE (stmt);\n+\t  pp_c_identifier (ppi, \"else\");\n+\t  if (TREE_CODE (else_clause) == IF_STMT)\n+\t    pp_c_whitespace (ppi);\n+\t  else\n+\t    pp_newline_and_indent (ppi, 3);\n+\t  pp_statement (ppi, else_clause);\n+\t  if (TREE_CODE (else_clause) != IF_STMT)\n+\t    pp_newline_and_indent (ppi, -3);\n+\t}\n+      break;\n+\n+    case SWITCH_STMT:\n+      pp_newline (ppi);\n+      pp_c_identifier (ppi, \"switch\");\n+      pp_whitespace (ppi);\n+      pp_c_left_paren (ppi);\n+      pp_c_expression (ppi, SWITCH_COND (stmt));\n+      pp_right_paren (ppi);\n+      pp_newline_and_indent (ppi, 3);\n+      pp_statement (ppi, SWITCH_BODY (stmt));\n+      pp_newline_and_indent (ppi, -3);\n+      break;\n+\n+    case WHILE_STMT:\n+      pp_c_identifier (ppi, \"while\");\n+      pp_whitespace (ppi);\n+      pp_c_left_paren (ppi);\n+      pp_c_expression (ppi, WHILE_COND (stmt));\n+      pp_right_paren (ppi);\n+      pp_newline_and_indent (ppi, 3);\n+      pp_statement (ppi, WHILE_BODY (stmt));\n+      pp_newline_and_indent (ppi, -3);\n+      break;\n+\n+    case DO_STMT:\n+      pp_c_identifier (ppi, \"do\");\n+      pp_newline_and_indent (ppi, 3);\n+      pp_statement (ppi, DO_BODY (stmt));\n+      pp_newline_and_indent (ppi, -3);\n+      pp_c_identifier (ppi, \"while\");\n+      pp_whitespace (ppi);\n+      pp_c_left_paren (ppi);\n+      pp_c_expression (ppi, DO_COND (stmt));\n+      pp_c_right_paren (ppi);\n+      pp_semicolon (ppi);\n+      pp_newline (ppi);\n+      break;\n+\n+    case FOR_STMT:\n+      pp_c_identifier (ppi, \"for\");\n+      pp_whitespace (ppi);\n+      pp_c_left_paren (ppi);\n+      pp_statement (ppi, FOR_INIT_STMT (stmt));\n+      pp_c_whitespace (ppi);\n+      if (FOR_COND (stmt))\n+\tpp_c_expression (ppi, FOR_COND (stmt));\n+      pp_semicolon (ppi);\n+      pp_c_whitespace (ppi);\n+      if (FOR_EXPR (stmt))\n+\tpp_c_expression (ppi, FOR_EXPR (stmt));\n+      pp_right_paren (ppi);\n+      pp_newline_and_indent (ppi, 3);\n+      pp_statement (ppi, FOR_BODY (stmt));\n+      pp_newline_and_indent (ppi, -3);\n+      break;\n+      \n+    case BREAK_STMT:\n+    case CONTINUE_STMT:\n+      pp_newline (ppi);\n+      pp_identifier (ppi, code == BREAK_STMT ? \"break\" : \"continue\");\n+      pp_semicolon (ppi);\n+      pp_newline (ppi);\n+      break;\n+\n+    case RETURN_STMT:\n+    case GOTO_STMT:\n+      {\n+\ttree e = code == RETURN_STMT \n+\t  ? RETURN_EXPR (stmt)\n+\t  : GOTO_DESTINATION (stmt);\n+\n+\tpp_newline (ppi);\n+\tpp_c_identifier (ppi, code == RETURN_STMT ? \"return\" : \"goto\");\n+\tif (e)\n+\t  pp_c_expression (ppi, e);\n+\tpp_semicolon (ppi);\n+\tpp_newline (ppi);\n+      }\n+      break;\n+\n+    case SCOPE_STMT:\n+      if (!SCOPE_NULLIFIED_P (stmt) && SCOPE_NO_CLEANUPS_P (stmt))\n+\t{\n+\t  if (SCOPE_BEGIN_P (stmt))\n+\t    {\n+\t      pp_left_brace (ppi);\n+\t      pp_newline_and_indent (ppi, 3);\n+\t    }\n+\t  else if (SCOPE_END_P (stmt))\n+\t    {\n+\t      pp_right_brace (ppi);\n+\t      pp_newline_and_indent (ppi, -3);\n+\t    }\n+\t}\n+      break;\n+\n+    case DECL_STMT:\n+      pp_declaration (ppi, DECL_STMT_DECL (stmt));\n+      pp_semicolon (ppi);\n+      pp_newline (ppi);\n+      break;\n+\n+    case ASM_STMT:\n+      {\n+\tbool has_volatile_p = ASM_VOLATILE_P (stmt);\n+\tbool is_extended = has_volatile_p || ASM_INPUTS (stmt) \n+\t  || ASM_OUTPUTS (stmt) || ASM_CLOBBERS (stmt);\n+\tpp_c_identifier (ppi, is_extended ? \"__asm__\" : \"asm\");\n+\tif (has_volatile_p)\n+\t  pp_c_identifier (ppi, \"__volatile__\");\n+\tpp_whitespace (ppi);\n+\tpp_c_left_paren (ppi);\n+\tpp_c_string_literal (ppi, ASM_STRING (stmt));\n+\tif (is_extended)\n+\t  {\n+\t    pp_whitespace (ppi);\n+\t    pp_separate_with (ppi, ':');\n+\t    if (ASM_OUTPUTS (stmt))\n+\t      pp_c_expression (ppi, ASM_OUTPUTS (stmt));\n+\t    pp_whitespace (ppi);\n+\t    pp_separate_with (ppi, ':');\n+\t    if (ASM_INPUTS (stmt))\n+\t      pp_c_expression (ppi, ASM_INPUTS (stmt));\n+\t    pp_whitespace (ppi);\n+\t    pp_separate_with (ppi, ':');\n+\t    if (ASM_CLOBBERS (stmt))\n+\t      pp_c_expression (ppi, ASM_CLOBBERS (stmt));\n+\t  }\n+\tpp_right_paren (ppi);\n+\tpp_newline (ppi);\n+      }\n+      break;\n+\n+    case FILE_STMT:\n+      pp_c_identifier (ppi, \"__FILE__\");\n+      pp_whitespace (ppi);\n+      pp_equal (ppi);\n+      pp_c_whitespace (ppi);\n+      pp_c_identifier (ppi, FILE_STMT_FILENAME (stmt));\n+      pp_semicolon (ppi);\n+      pp_newline (ppi);\n+      break;\n+\n+    default:\n+      pp_unsupported_tree (ppi, stmt);\n+    }\n+\n+}\n+"}, {"sha": "13bd432b0b8054b38334cbf0c5cb4adeb7d57f8b", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff4a7ef7036d7356ffeb5a753581b78b824a2d6/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=7ff4a7ef7036d7356ffeb5a753581b78b824a2d6", "patch": "@@ -119,8 +119,8 @@ struct c_pretty_print_info\n #define pp_initializer(PPI, E)            (*(PPI)->initializer) (PPI, E)\n #define pp_multiplicative_expression(PPI, E)\\\n    (*(PPI)->multiplicative_expression) (PPI, E)\n-#define pp_conditional_expession(PPI, E)  \\\n-   (*(PPI)->conditional_expression (PPI, E))\n+#define pp_conditional_expression(PPI, E)  \\\n+   (*(PPI)->conditional_expression) (PPI, E)\n #define pp_assignment_expression(PPI, E)  \\\n    (*(PPI)->assignment_expression) (PPI, E)\n \n@@ -131,7 +131,8 @@ void pp_c_parameter_declaration_clause PARAMS ((c_pretty_print_info *, tree));\n void pp_c_declaration PARAMS ((c_pretty_print_info *, tree));\n void pp_c_statement PARAMS ((c_pretty_print_info *, tree));\n void pp_c_expression PARAMS ((c_pretty_print_info *, tree));\n-\n+/* Statements.  */\n+void pp_c_statement PARAMS ((c_pretty_print_info *, tree));\n /* Expressions.  */\n void pp_c_expression PARAMS ((c_pretty_print_info *, tree));\n void pp_c_logical_or_expression PARAMS ((c_pretty_print_info *, tree));"}]}