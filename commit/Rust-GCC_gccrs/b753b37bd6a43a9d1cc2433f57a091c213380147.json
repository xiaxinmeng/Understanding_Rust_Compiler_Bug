{"sha": "b753b37bd6a43a9d1cc2433f57a091c213380147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1M2IzN2JkNmE0M2E5ZDFjYzI0MzNmNTdhMDkxYzIxMzM4MDE0Nw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-29T15:28:45Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-29T15:28:45Z"}, "message": "macro.c (warn_of_redefinition): Suppress warnings for builtins that lack the NODE_WARN flag...\n\nlibcpp/ChangeLog:\n\n2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* macro.c (warn_of_redefinition): Suppress warnings for builtins\n\tthat lack the NODE_WARN flag, unless Wbuiltin-macro-redefined.\n\t(_cpp_create_definition): Use Wbuiltin-macro-redefined for\n\tbuiltins that lack the NODE_WARN flag.\n\t* directives.c (do_undef): Likewise.\n\t* init.c (cpp_init_special_builtins): Do not change flags\n\tdepending on Wbuiltin-macro-redefined.\n\n\ngcc/c-family/ChangeLog:\n\n2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c.opt (Wbuiltin-macro-redefined): Use CPP, Var and Init.\n\t* c-opts.c (c_common_handle_option): Do not handle here.\n\nFrom-SVN: r214730", "tree": {"sha": "bcdc43baa9947832913a10b03e07131bc343844b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcdc43baa9947832913a10b03e07131bc343844b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b753b37bd6a43a9d1cc2433f57a091c213380147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b753b37bd6a43a9d1cc2433f57a091c213380147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b753b37bd6a43a9d1cc2433f57a091c213380147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b753b37bd6a43a9d1cc2433f57a091c213380147/comments", "author": null, "committer": null, "parents": [{"sha": "ef0981b8aea59164340d4d57b4e48b6810cc41fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0981b8aea59164340d4d57b4e48b6810cc41fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0981b8aea59164340d4d57b4e48b6810cc41fb"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "400ea34becc87e179dd68c714c4c761cb1911bf9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -1,3 +1,8 @@\n+2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c.opt (Wbuiltin-macro-redefined): Use CPP, Var and Init.\n+\t* c-opts.c (c_common_handle_option): Do not handle here.\n+\n 2014-08-25  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt: Change -std=c++1y and -std=gnu++1y to be aliases for"}, {"sha": "81b7c96bd18098b98ef8b763e1d0fe6000d5dbc0", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -385,10 +385,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_num_sign_change = value;\n       break;\n \n-    case OPT_Wbuiltin_macro_redefined:\n-      cpp_opts->warn_builtin_macro_redefined = value;\n-      break;\n-\n     case OPT_Wc___compat:\n       cpp_opts->warn_cxx_operator_names = value;\n       break;"}, {"sha": "3a187087e7c4eac7c409f5a8dc8210a8dbbd979d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -292,7 +292,7 @@ C ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++\n Warn about boolean expression compared with an integer value different from true/false\n \n Wbuiltin-macro-redefined\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) Var(cpp_warn_builtin_macro_redefined) Init(1) Warning\n Warn when a built-in preprocessor macro is undefined or redefined\n \n Wc90-c99-compat"}, {"sha": "1516ec02c4057f68a5d6eb2f4d2dd0c241ff8b74", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -1,3 +1,13 @@\n+2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* macro.c (warn_of_redefinition): Suppress warnings for builtins\n+\tthat lack the NODE_WARN flag, unless Wbuiltin-macro-redefined.\n+\t(_cpp_create_definition): Use Wbuiltin-macro-redefined for\n+\tbuiltins that lack the NODE_WARN flag.\n+\t* directives.c (do_undef): Likewise.\n+\t* init.c (cpp_init_special_builtins): Do not change flags\n+\tdepending on Wbuiltin-macro-redefined.\n+\n 2014-08-28  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR cpp/23827 - standard C++ should not have hex float preprocessor"}, {"sha": "631557df8bb5eec62ef2b28b19c06f286676de1d", "filename": "libcpp/directives.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -610,6 +610,11 @@ do_undef (cpp_reader *pfile)\n \t  if (node->flags & NODE_WARN)\n \t    cpp_error (pfile, CPP_DL_WARNING,\n \t\t       \"undefining \\\"%s\\\"\", NODE_NAME (node));\n+\t  else if ((node->flags & NODE_BUILTIN)\n+\t\t   && CPP_OPTION (pfile, warn_builtin_macro_redefined))\n+\t    cpp_warning_with_line (pfile, CPP_W_BUILTIN_MACRO_REDEFINED,\n+\t\t\t\t   pfile->directive_line, 0,\n+\t\t\t\t   \"undefining \\\"%s\\\"\", NODE_NAME (node));\n \n \t  if (CPP_OPTION (pfile, warn_unused_macros))\n \t    _cpp_warn_if_unused_macro (pfile, node, NULL);"}, {"sha": "2998d880aa4511e7f152341cad1799fe5782a57a", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -470,8 +470,7 @@ cpp_init_special_builtins (cpp_reader *pfile)\n       cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n       hp->type = NT_MACRO;\n       hp->flags |= NODE_BUILTIN;\n-      if (b->always_warn_if_redefined\n-          || CPP_OPTION (pfile, warn_builtin_macro_redefined))\n+      if (b->always_warn_if_redefined)\n \thp->flags |= NODE_WARN;\n       hp->value.builtin = (enum cpp_builtin_type) b->value;\n     }"}, {"sha": "8445ce39eda7f50b7faaa584355e98412f83841f", "filename": "libcpp/macro.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b753b37bd6a43a9d1cc2433f57a091c213380147/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=b753b37bd6a43a9d1cc2433f57a091c213380147", "patch": "@@ -2699,13 +2699,12 @@ warn_of_redefinition (cpp_reader *pfile, cpp_hashnode *node,\n   if (node->flags & NODE_WARN)\n     return true;\n \n-  /* Suppress warnings for builtins that lack the NODE_WARN flag.  */\n-  if (node->flags & NODE_BUILTIN)\n-    {\n-      if (!pfile->cb.user_builtin_macro\n-\t  || !pfile->cb.user_builtin_macro (pfile, node))\n-\treturn false;\n-    }\n+  /* Suppress warnings for builtins that lack the NODE_WARN flag,\n+     unless Wbuiltin-macro-redefined.  */\n+  if (node->flags & NODE_BUILTIN\n+      && (!pfile->cb.user_builtin_macro\n+\t  || !pfile->cb.user_builtin_macro (pfile, node)))\n+    return CPP_OPTION (pfile, warn_builtin_macro_redefined);\n \n   /* Redefinitions of conditional (context-sensitive) macros, on\n      the other hand, must be allowed silently.  */\n@@ -3181,14 +3180,14 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n \n       if (warn_of_redefinition (pfile, node, macro))\n \t{\n-          const int reason = (node->flags & NODE_BUILTIN)\n+          const int reason = ((node->flags & NODE_BUILTIN)\n+\t\t\t      && !(node->flags & NODE_WARN))\n                              ? CPP_W_BUILTIN_MACRO_REDEFINED : CPP_W_NONE;\n-\t  bool warned;\n \n-\t  warned = cpp_pedwarning_with_line (pfile, reason,\n-\t\t\t\t\t     pfile->directive_line, 0,\n-\t\t\t\t\t     \"\\\"%s\\\" redefined\",\n-                                             NODE_NAME (node));\n+\t  bool warned = \n+\t    cpp_pedwarning_with_line (pfile, reason,\n+\t\t\t\t      pfile->directive_line, 0,\n+\t\t\t\t      \"\\\"%s\\\" redefined\", NODE_NAME (node));\n \n \t  if (warned && node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n \t    cpp_error_with_line (pfile, CPP_DL_NOTE,"}]}