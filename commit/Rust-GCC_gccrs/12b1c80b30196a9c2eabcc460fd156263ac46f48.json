{"sha": "12b1c80b30196a9c2eabcc460fd156263ac46f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiMWM4MGIzMDE5NmE5YzJlYWJjYzQ2MGZkMTU2MjYzYWM0NmY0OA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2011-03-13T04:06:41Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2011-03-13T04:06:41Z"}, "message": "re PR target/48053 (ICE in in build_int_cst_wide, when building cpu2000 galgel/equake/ammp/fma3d/sixtrack)\n\ngcc/\n\tPR target/48053\n\t* config/rs6000/predicates.md (easy_vector_constant_add_self,\n\teasy_vector_constant_msb): Do not handle V2DImode and V2DFmode.\n\t* config/rs6000/rs6000.c (const_vector_elt_as_int): Add assert that\n\tmode is not V2DImode or V2DFmode.\n\t(vspltis_constant): Do not handle V2DImode and V2DFmode.\n\t(rs6000_expand_vector_init): Replace copy_to_reg with copy_to_mode_reg.\n\t* config/rs6000/rs6000.md (movdi_internal32): Allow setting VSX\n\tregisters to 0.\n\t(movdi_internal64): Likewise.\n\ngcc/testsuite/\n\tPR target/48053\n\t* gcc/testsuite/gcc.target/powerpc/pr48053-1.c: New test.\n\t* gcc/testsuite/gcc.target/powerpc/pr48053-2.c: Likewise.\n\nFrom-SVN: r170920", "tree": {"sha": "571dd6e74f8935441e98fef4f689ce9b40354658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571dd6e74f8935441e98fef4f689ce9b40354658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12b1c80b30196a9c2eabcc460fd156263ac46f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b1c80b30196a9c2eabcc460fd156263ac46f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b1c80b30196a9c2eabcc460fd156263ac46f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b1c80b30196a9c2eabcc460fd156263ac46f48/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d39ac823a3e78ec20f62188898cb834c2315516b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39ac823a3e78ec20f62188898cb834c2315516b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39ac823a3e78ec20f62188898cb834c2315516b"}], "stats": {"total": 162, "additions": 140, "deletions": 22}, "files": [{"sha": "472eeab6e4206f826af6a61b5e0257b63a3a157d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -1,3 +1,16 @@\n+2011-03-12  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/48053\n+\t* config/rs6000/predicates.md (easy_vector_constant_add_self,\n+\teasy_vector_constant_msb): Do not handle V2DImode and V2DFmode.\n+\t* config/rs6000/rs6000.c (const_vector_elt_as_int): Add assert that\n+\tmode is not V2DImode or V2DFmode.\n+\t(vspltis_constant): Do not handle V2DImode and V2DFmode.\n+\t(rs6000_expand_vector_init): Replace copy_to_reg with copy_to_mode_reg.\n+\t* config/rs6000/rs6000.md (movdi_internal32): Allow setting VSX\n+\tregisters to 0.\n+\t(movdi_internal64): Likewise.\n+\n 2011-03-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/47127"}, {"sha": "1796bf58eed788b3112d8af9075568f706b7c524", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -371,7 +371,10 @@\n        (and (match_test \"TARGET_ALTIVEC\")\n \t    (match_test \"easy_altivec_constant (op, mode)\")))\n {\n-  HOST_WIDE_INT val = const_vector_elt_as_int (op, GET_MODE_NUNITS (mode) - 1);\n+  HOST_WIDE_INT val;\n+  if (mode == V2DImode || mode == V2DFmode)\n+    return 0;\n+  val = const_vector_elt_as_int (op, GET_MODE_NUNITS (mode) - 1);\n   val = ((val & 0xff) ^ 0x80) - 0x80;\n   return EASY_VECTOR_15_ADD_SELF (val);\n })\n@@ -382,7 +385,10 @@\n        (and (match_test \"TARGET_ALTIVEC\")\n \t    (match_test \"easy_altivec_constant (op, mode)\")))\n {\n-  HOST_WIDE_INT val = const_vector_elt_as_int (op, GET_MODE_NUNITS (mode) - 1);\n+  HOST_WIDE_INT val;\n+  if (mode == V2DImode || mode == V2DFmode)\n+    return 0;\n+  val = const_vector_elt_as_int (op, GET_MODE_NUNITS (mode) - 1);\n   return EASY_VECTOR_MSB (val, GET_MODE_INNER (mode));\n })\n "}, {"sha": "231651e0d46e2edd8408af7924ac85383f08068e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -4855,7 +4855,13 @@ num_insns_constant (rtx op, enum machine_mode mode)\n HOST_WIDE_INT\n const_vector_elt_as_int (rtx op, unsigned int elt)\n {\n-  rtx tmp = CONST_VECTOR_ELT (op, elt);\n+  rtx tmp;\n+\n+  /* We can't handle V2DImode and V2DFmode vector constants here yet.  */\n+  gcc_assert (GET_MODE (op) != V2DImode\n+\t      && GET_MODE (op) != V2DFmode);\n+\n+  tmp = CONST_VECTOR_ELT (op, elt);\n   if (GET_MODE (op) == V4SFmode\n       || GET_MODE (op) == V2SFmode)\n     tmp = gen_lowpart (SImode, tmp);\n@@ -4876,13 +4882,24 @@ vspltis_constant (rtx op, unsigned step, unsigned copies)\n   enum machine_mode inner = GET_MODE_INNER (mode);\n \n   unsigned i;\n-  unsigned nunits = GET_MODE_NUNITS (mode);\n-  unsigned bitsize = GET_MODE_BITSIZE (inner);\n-  unsigned mask = GET_MODE_MASK (inner);\n+  unsigned nunits;\n+  unsigned bitsize;\n+  unsigned mask;\n+\n+  HOST_WIDE_INT val;\n+  HOST_WIDE_INT splat_val;\n+  HOST_WIDE_INT msb_val;\n+\n+  if (mode == V2DImode || mode == V2DFmode)\n+    return false;\n+\n+  nunits = GET_MODE_NUNITS (mode);\n+  bitsize = GET_MODE_BITSIZE (inner);\n+  mask = GET_MODE_MASK (inner);\n \n-  HOST_WIDE_INT val = const_vector_elt_as_int (op, nunits - 1);\n-  HOST_WIDE_INT splat_val = val;\n-  HOST_WIDE_INT msb_val = val > 0 ? 0 : -1;\n+  val = const_vector_elt_as_int (op, nunits - 1);\n+  splat_val = val;\n+  msb_val = val > 0 ? 0 : -1;\n \n   /* Construct the value to be splatted, if possible.  If not, return 0.  */\n   for (i = 2; i <= copies; i *= 2)\n@@ -5314,12 +5331,18 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t}\n       else\n \t{\n-\t  rtx op0 = copy_to_reg (XVECEXP (vals, 0, 0));\n-\t  rtx op1 = copy_to_reg (XVECEXP (vals, 0, 1));\n \t  if (mode == V2DFmode)\n-\t    emit_insn (gen_vsx_concat_v2df (target, op0, op1));\n+\t    {\n+\t      rtx op0 = copy_to_mode_reg (DFmode, XVECEXP (vals, 0, 0));\n+\t      rtx op1 = copy_to_mode_reg (DFmode, XVECEXP (vals, 0, 1));\n+\t      emit_insn (gen_vsx_concat_v2df (target, op0, op1));\n+\t    }\n \t  else\n-\t    emit_insn (gen_vsx_concat_v2di (target, op0, op1));\n+\t    {\n+\t      rtx op0 = copy_to_mode_reg (DImode, XVECEXP (vals, 0, 0));\n+\t      rtx op1 = copy_to_mode_reg (DImode, XVECEXP (vals, 0, 1));\n+\t      emit_insn (gen_vsx_concat_v2di (target, op0, op1));\n+\t    }\n \t}\n       return;\n     }"}, {"sha": "4455d9a831971a5753ddf56fba775858e040d35e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -10052,8 +10052,8 @@\n ; List r->r after r->\"o<>\", otherwise reload will try to reload a\n ; non-offsettable address by using r->r which won't make progress.\n (define_insn \"*movdi_internal32\"\n-  [(set (match_operand:DI 0 \"rs6000_nonimmediate_operand\" \"=o<>,r,r,*d,*d,m,r\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,r,m,d,m,d,IJKnGHF\"))]\n+  [(set (match_operand:DI 0 \"rs6000_nonimmediate_operand\" \"=o<>,r,r,*d,*d,m,r,?wa\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,r,m,d,m,d,IJKnGHF,O\"))]\n   \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -10064,8 +10064,9 @@\n    fmr %0,%1\n    lfd%U1%X1 %0,%1\n    stfd%U0%X0 %1,%0\n-   #\"\n-  [(set_attr \"type\" \"load,*,store,fp,fpload,fpstore,*\")])\n+   #\n+   xxlxor %x0,%x0,%x0\"\n+  [(set_attr \"type\" \"load,*,store,fp,fpload,fpstore,*,vecsimple\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -10122,8 +10123,8 @@\n    (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"*movdi_internal64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,*d,*d,m,r,*h,*h\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,L,nF,R,d,m,d,*h,r,0\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,*d,*d,m,r,*h,*h,?wa\")\n+\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,L,nF,R,d,m,d,*h,r,0,O\"))]\n   \"TARGET_POWERPC64 && (!TARGET_MFPGPR || !TARGET_HARD_FLOAT || !TARGET_FPRS)\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -10140,9 +10141,10 @@\n    stfd%U0%X0 %1,%0\n    mf%1 %0\n    mt%0 %1\n-   {cror 0,0,0|nop}\"\n-  [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,mfjmpr,mtjmpr,*\")\n-   (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4\")])\n+   {cror 0,0,0|nop}\n+   xxlxor %x0,%x0,%x0\"\n+  [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,mfjmpr,mtjmpr,*,vecsimple\")\n+   (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4,4\")])\n \n ;; immediate value valid for a single instruction hiding in a const_double\n (define_insn \"\""}, {"sha": "0ea094682b01fe9127c4e6aeb1b479752657a6b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -1,3 +1,9 @@\n+2011-03-12  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/48053\n+\t* gcc/testsuite/gcc.target/powerpc/pr48053-1.c: New test.\n+\t* gcc/testsuite/gcc.target/powerpc/pr48053-2.c: Likewise.\n+\n 2011-03-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/48066"}, {"sha": "fd7cd3d9ed38acf9a29f73d595361c8b0c0bc8df", "filename": "gcc/testsuite/gcc.target/powerpc/pr48053-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-1.c?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -0,0 +1,30 @@\n+/* Test for ICE arising from VSX code generation.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=power7 -funroll-loops\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+int sourcenode;\n+int ARCHelems;\n+int *source_elms;\n+void\n+foo (int argc, char **argv)\n+{\n+  int i, j;\n+  int cor[4];\n+  double Ke[12][12], Me[12], Ce[12], Mexv[12], Cexv[12], v[12];\n+  for (i = 0; i < ARCHelems; i++)\n+    {\n+      for (j = 0; j < 12; j++)\n+\tMe[j] = 0.0;\n+      if (cor[j] == sourcenode)\n+\tvv12x12 (Me, v, Mexv);\n+      vv12x12 (Ce, v, Cexv);\n+      if (source_elms[i] == 3)\n+\tfor (j = 0; j < 12; j++)\n+\t  {\n+\t    v[j] = -v[j];\n+\t    Mexv[j] = -Mexv[j];\n+\t    Cexv[j] = -Cexv[j];\n+\t  }\n+    }\n+}"}, {"sha": "2cdec6a68d7f3ff6d3d154953b03a5d9c9fefad5", "filename": "gcc/testsuite/gcc.target/powerpc/pr48053-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b1c80b30196a9c2eabcc460fd156263ac46f48/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr48053-2.c?ref=12b1c80b30196a9c2eabcc460fd156263ac46f48", "patch": "@@ -0,0 +1,38 @@\n+/* Test for ICE arising from VSX code generation.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=power7\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+struct timeval\n+{\n+  long tv_sec;\n+  long tv_usec;\n+};\n+\n+extern char *bar (struct timeval *);\n+int *error;\n+\n+void\n+foo (void *ptr)\n+{\n+  struct timeval tm;\n+  long n1, n2;\n+\n+  if (!ptr)\n+    {\n+      *error = 1;\n+      n1 = -1;\n+      n2 = -1;\n+    }\n+  else\n+    {\n+      n1 = 0;\n+      n2 = *error;\n+    }\n+\n+  tm.tv_sec = n1;\n+  tm.tv_usec = n2;\n+\n+  if (*error)\n+    bar (&tm);\n+}"}]}