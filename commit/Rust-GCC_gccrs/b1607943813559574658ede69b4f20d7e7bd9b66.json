{"sha": "b1607943813559574658ede69b4f20d7e7bd9b66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2MDc5NDM4MTM1NTk1NzQ2NThlZGU2OWI0ZjIwZDdlN2JkOWI2Ng==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2010-10-10T13:25:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-10T13:25:19Z"}, "message": "lang.opt (gdwarf+): Remove.\n\n\t* gcc-interface/lang.opt (gdwarf+): Remove.\n\t* gcc-interface/gigi.h (get_parallel_type): Likewise\n\t* gcc-interface/misc.c (gnat_dwarf_extensions): Likewise.\n\t(gnat_handle_option): Remove OPT_gdwarfplus case.\n\t(gnat_post_options): Remove setting of use_gnu_debug_info_extensions\n\tfrom gnat_dwarf_extensions.\n\t* gcc-interface/trans.c (gigi): Remove -gdwarf+ initializations.\n\t* gcc-interface/utils.c (get_parallel_type): Remove.\n\nFrom-SVN: r165254", "tree": {"sha": "4d435c55818da2c95ad3e4cae0e38b4a7da34121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d435c55818da2c95ad3e4cae0e38b4a7da34121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1607943813559574658ede69b4f20d7e7bd9b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1607943813559574658ede69b4f20d7e7bd9b66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1607943813559574658ede69b4f20d7e7bd9b66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1607943813559574658ede69b4f20d7e7bd9b66/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "658a41acf025369ccfad016080b615fe5091e63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658a41acf025369ccfad016080b615fe5091e63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658a41acf025369ccfad016080b615fe5091e63f"}], "stats": {"total": 59, "additions": 13, "deletions": 46}, "files": [{"sha": "376a8afaaca6b02191c50a673a21d66278126abc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b1607943813559574658ede69b4f20d7e7bd9b66", "patch": "@@ -1,8 +1,20 @@\n+2010-10-10  Olivier Hainque  <hainque@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/lang.opt (gdwarf+): Remove.\n+\t* gcc-interface/gigi.h (get_parallel_type): Likewise\n+\t* gcc-interface/misc.c (gnat_dwarf_extensions): Likewise.\n+\t(gnat_handle_option): Remove OPT_gdwarfplus case.\n+\t(gnat_post_options): Remove setting of use_gnu_debug_info_extensions\n+\tfrom gnat_dwarf_extensions.\n+\t* gcc-interface/trans.c (gigi): Remove -gdwarf+ initializations.\n+\t* gcc-interface/utils.c (get_parallel_type): Remove.\n+\n 2010-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <N_Not_In>: Use\n \tinvert_truthvalue_loc instead of invert_truthvalue.\n-\t* utils2.c (build_binary_op) <NE_EXPR>: Likewise.\n+\t* gcc-interface/utils2.c (build_binary_op) <NE_EXPR>: Likewise.\n \t(build_unary_op) <TRUTH_NOT_EXPR>: Likewise.\n \n 2010-10-10  Eric Botcazou  <ebotcazou@adacore.com>"}, {"sha": "d529e78678587e7cb3176358f8e6b94585936be9", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=b1607943813559574658ede69b4f20d7e7bd9b66", "patch": "@@ -509,9 +509,6 @@ extern void rest_of_record_type_compilation (tree record_type);\n /* Append PARALLEL_TYPE on the chain of parallel types for decl.  */\n extern void add_parallel_type (tree decl, tree parallel_type);\n \n-/* Return the parallel type associated to a type, if any.  */\n-extern tree get_parallel_type (tree type);\n-\n /* Return a FUNCTION_TYPE node.  RETURN_TYPE is the type returned by the\n    subprogram.  If it is VOID_TYPE, then we are dealing with a procedure,\n    otherwise we are dealing with a function.  PARAM_DECL_LIST is a list of"}, {"sha": "d4fae4a9ac1d82d06e3f398667cfca11139da92b", "filename": "gcc/ada/gcc-interface/lang.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Flang.opt?ref=b1607943813559574658ede69b4f20d7e7bd9b66", "patch": "@@ -101,10 +101,6 @@ fRTS=\n Ada Joined RejectNegative\n ; Selects the runtime\n \n-gdwarf+\n-Ada\n-; Explicit request for dwarf debug info with GNAT specific extensions.\n-\n gant\n Ada Joined Undocumented\n ; Catches typos"}, {"sha": "7703e2e9a76b4e40b1e3423a22d02f534829b18c", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=b1607943813559574658ede69b4f20d7e7bd9b66", "patch": "@@ -59,12 +59,6 @@\n /* This symbol needs to be defined for the front-end.  */\n void *callgraph_info_file = NULL;\n \n-/* How much we want of our DWARF extensions.  Some of our DWARF extensions\n-   are incompatible with regular GDB versions, so we must make sure to only\n-   produce them on explicit request.  This is eventually reflected into the\n-   use_gnu_debug_info_extensions common flag for later processing.  */\n-static int gnat_dwarf_extensions = 0;\n-\n /* Command-line argc and argv.  These variables are global since they are\n    imported in back_end.adb.  */\n unsigned int save_argc;\n@@ -139,10 +133,6 @@ gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n       flag_eliminate_unused_debug_types = -value;\n       break;\n \n-    case OPT_gdwarfplus:\n-      gnat_dwarf_extensions = 1;\n-      break;\n-\n     case OPT_gant:\n       warning (0, \"%<-gnat%> misspelled as %<-gant%>\");\n \n@@ -260,11 +250,6 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   else\n     flag_eliminate_unused_debug_types = 0;\n \n-  /* Reflect the explicit request of DWARF extensions into the common\n-     flag for use by later passes.  */\n-  if (write_symbols == DWARF2_DEBUG)\n-    use_gnu_debug_info_extensions = gnat_dwarf_extensions > 0;\n-\n   optimize = global_options.x_optimize;\n   optimize_size = global_options.x_optimize_size;\n "}, {"sha": "8dbd3a17ef37c2891950245b7aaa352b68da9114", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=b1607943813559574658ede69b4f20d7e7bd9b66", "patch": "@@ -286,18 +286,6 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       TYPE_SIZE_UNIT (void_type_node) = size_zero_node;\n     }\n \n-  /* If the GNU type extensions to DWARF are available, setup the hooks.  */\n-#if defined (DWARF2_DEBUGGING_INFO) && defined (DWARF2_GNU_TYPE_EXTENSIONS)\n-  /* We condition the name demangling and the generation of type encoding\n-     strings on -gdwarf+ and always set descriptive types on.  */\n-  if (use_gnu_debug_info_extensions)\n-    {\n-      dwarf2out_set_type_encoding_func (extract_encoding);\n-      dwarf2out_set_demangle_name_func (decode_name);\n-    }\n-  dwarf2out_set_descriptive_type_func (get_parallel_type);\n-#endif\n-\n   /* Enable GNAT stack checking method if needed */\n   if (!Stack_Check_Probes_On_Target)\n     set_stack_check_libfunc (\"_gnat_stack_check\");"}, {"sha": "876556c52e11f177791802f77094eae949482081", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1607943813559574658ede69b4f20d7e7bd9b66/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=b1607943813559574658ede69b4f20d7e7bd9b66", "patch": "@@ -963,17 +963,6 @@ add_parallel_type (tree decl, tree parallel_type)\n   SET_DECL_PARALLEL_TYPE (d, parallel_type);\n }\n \n-/* Return the parallel type associated to a type, if any.  */\n-\n-tree\n-get_parallel_type (tree type)\n-{\n-  if (TYPE_STUB_DECL (type))\n-    return DECL_PARALLEL_TYPE (TYPE_STUB_DECL (type));\n-  else\n-    return NULL_TREE;\n-}\n-\n /* Utility function of above to merge LAST_SIZE, the previous size of a record\n    with FIRST_BIT and SIZE that describe a field.  SPECIAL is true if this\n    represents a QUAL_UNION_TYPE in which case we must look for COND_EXPRs and"}]}