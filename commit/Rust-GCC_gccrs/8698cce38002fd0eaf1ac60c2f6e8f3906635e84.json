{"sha": "8698cce38002fd0eaf1ac60c2f6e8f3906635e84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5OGNjZTM4MDAyZmQwZWFmMWFjNjBjMmY2ZThmMzkwNjYzNWU4NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-04T13:14:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-04T13:14:23Z"}, "message": "(gen_lowpart_common, gen_highpart): Test *_BIG_ENDIAN with \"if\", not\n#if and fix one erroneous test.\n\nFrom-SVN: r6479", "tree": {"sha": "852478c579eefec6ba19e18a972a12c191f390c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/852478c579eefec6ba19e18a972a12c191f390c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8698cce38002fd0eaf1ac60c2f6e8f3906635e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8698cce38002fd0eaf1ac60c2f6e8f3906635e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8698cce38002fd0eaf1ac60c2f6e8f3906635e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8698cce38002fd0eaf1ac60c2f6e8f3906635e84/comments", "author": null, "committer": null, "parents": [{"sha": "bac7cdfd7d0dfa7d9bb7065faf11882cc1922821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac7cdfd7d0dfa7d9bb7065faf11882cc1922821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac7cdfd7d0dfa7d9bb7065faf11882cc1922821"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "65b45e44e001a72639b6bc0ed611d5a0dfe722e5", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8698cce38002fd0eaf1ac60c2f6e8f3906635e84/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8698cce38002fd0eaf1ac60c2f6e8f3906635e84/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8698cce38002fd0eaf1ac60c2f6e8f3906635e84", "patch": "@@ -708,12 +708,12 @@ gen_lowpart_common (mode, x)\n       else\n \tlow = CONST_DOUBLE_LOW (x), high = CONST_DOUBLE_HIGH (x);\n \n-/* TARGET_DOUBLE takes the addressing order of the target machine. */\n-#ifdef WORDS_BIG_ENDIAN\n-      i[0] = high, i[1] = low;\n-#else\n-      i[0] = low, i[1] = high;\n-#endif\n+      /* REAL_VALUE_TARGET_DOUBLE takes the addressing order of the\n+\t target machine. */\n+      if (WORDS_BIG_ENDIAN)\n+\ti[0] = high, i[1] = low;\n+      else\n+\ti[0] = low, i[1] = high;\n \n       r = REAL_VALUE_FROM_TARGET_DOUBLE (i);\n       return immed_real_const_1 (r, mode);\n@@ -870,16 +870,16 @@ gen_highpart (mode, x)\n   else if (GET_CODE (x) == MEM)\n     {\n       register int offset = 0;\n-#if !WORDS_BIG_ENDIAN\n-      offset = (MAX (GET_MODE_SIZE (GET_MODE (x)), UNITS_PER_WORD)\n-\t\t- MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD));\n-#endif\n-#if !BYTES_BIG_ENDIAN\n-      if (GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n+      if (! WORDS_BIG_ENDIAN)\n+\toffset = (MAX (GET_MODE_SIZE (GET_MODE (x)), UNITS_PER_WORD)\n+\t\t  - MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD));\n+\n+      if (! BYTES_BIG_ENDIAN\n+\t  && GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n \toffset -= (GET_MODE_SIZE (mode)\n \t\t   - MIN (UNITS_PER_WORD,\n \t\t\t  GET_MODE_SIZE (GET_MODE (x))));\n-#endif\n+\n       return change_address (x, mode, plus_constant (XEXP (x, 0), offset));\n     }\n   else if (GET_CODE (x) == SUBREG)\n@@ -895,12 +895,12 @@ gen_highpart (mode, x)\n     {\n       int word = 0;\n \n-#if !WORDS_BIG_ENDIAN\n-      if (GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD)\n+      if (! WORDS_BIG_ENDIAN\n+\t  && GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD)\n \tword = ((GET_MODE_SIZE (GET_MODE (x))\n \t\t - MAX (GET_MODE_SIZE (mode), UNITS_PER_WORD))\n \t\t/ UNITS_PER_WORD);\n-#endif\n+\n       if (REGNO (x) < FIRST_PSEUDO_REGISTER\n \t  /* integrate.c can't handle parts of a return value register. */\n \t  && (! REG_FUNCTION_VALUE_P (x)"}]}