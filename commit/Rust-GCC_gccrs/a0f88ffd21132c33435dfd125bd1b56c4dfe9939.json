{"sha": "a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmODhmZmQyMTEzMmMzMzQzNWRmZDEyNWJkMWI1NmM0ZGZlOTkzOQ==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-06-19T16:29:37Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-06-19T16:29:37Z"}, "message": "Replace array size in Array Notation testcode with #define.\n\n2013-06-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n       * c-c++-common/cilk-plus/AN/builtin_fn_custom.c: Replaced all the\n       hard-coded values of array sizes with a #define.\n       * c-c++-common/cilk-plus/AN/builtin_fn_mutating.c: Likewise.\n       * c-c++-common/cilk-plus/AN/builtin_func_double2.c: Likewise.\n       * c-c++-common/cilk-plus/AN/gather_scatter.c: Likewise.\n       * c-c++-common/cilk-plus/AN/pr57577.c: Likewise.\n       * c-c++-common/cilk-plus/AN/sec_implicit_ex.c: Likewise.\n\nFrom-SVN: r200205", "tree": {"sha": "25d3cd855b9c31805bfd09c08f3bab2b6e3e576c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d3cd855b9c31805bfd09c08f3bab2b6e3e576c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/comments", "author": null, "committer": null, "parents": [{"sha": "47035d1fcd2a3470923df8833593f4493680d635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47035d1fcd2a3470923df8833593f4493680d635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47035d1fcd2a3470923df8833593f4493680d635"}], "stats": {"total": 105, "additions": 61, "deletions": 44}, "files": [{"sha": "f731837cb7380220cf84dbd3e6634897702a9ec6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,3 +1,13 @@\n+2013-06-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-c++-common/cilk-plus/AN/builtin_fn_custom.c: Replaced all the\n+       hard-coded values of array sizes with a #define.\n+       * c-c++-common/cilk-plus/AN/builtin_fn_mutating.c: Likewise.\n+       * c-c++-common/cilk-plus/AN/builtin_func_double2.c: Likewise.\n+       * c-c++-common/cilk-plus/AN/gather_scatter.c: Likewise.\n+       * c-c++-common/cilk-plus/AN/pr57577.c: Likewise.\n+       * c-c++-common/cilk-plus/AN/sec_implicit_ex.c: Likewise.\n+\n 2013-06-19  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* gcc.dg/torture/stackalign/builtin-apply-2.c: set\n@@ -2274,7 +2284,6 @@\n \n \t* gcc.target/aarch64/negs.c: New.\n \n->>>>>>> trunk\n 2013-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/56895"}, {"sha": "0f066d4a6ed99200252123c5b7c37757cbf89d88", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/builtin_fn_custom.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_fn_custom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_fn_custom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_fn_custom.c?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-fcilkplus\" } */\n \n+#define NUMBER 100\n #if HAVE_IO\n #include <stdio.h>\n #endif\n@@ -18,17 +19,17 @@ double my_func (double x, double y)\n /* char __sec_reduce_add (int *); */\n int main(void)\n {\n-  int ii,array[10], y = 0, y_int = 0, array2[10];\n-  double x, yy, array3[10], array4[10];\n+  int ii,array[NUMBER], y = 0, y_int = 0, array2[NUMBER];\n+  double x, yy, array3[NUMBER], array4[NUMBER];\n   double max_value = 0.000, min_value = 0.000, add_value, mul_value = 1.00;\n   int max_index = 0, min_index = 0;\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       array[ii] = 1+ii;\n       array2[ii]= 2; \n     }\n \n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       if (ii%2 && ii)\n \tarray3[ii] = (double)(1.0000/(double)ii);\n@@ -43,7 +44,7 @@ int main(void)\n \n   /* Initialize it to the first variable.  */\n   max_value = array3[0] * array4[0];\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     if (array3[ii] * array4[ii] > max_value) {\n       max_value = array3[ii] * array4[ii];\n       max_index = ii;\n@@ -52,7 +53,7 @@ int main(void)\n   \n   \n #if HAVE_IO\n-  for (ii = 0; ii < 10; ii++) \n+  for (ii = 0; ii < NUMBER; ii++) \n     printf(\"%5.3f \", array3[ii] * array4[ii]);\n   printf(\"\\n\");\n   printf(\"Max = %5.3f\\t Max Index = %2d\\n\", x, y);"}, {"sha": "e01fbb1b34e175d98b5aaf8dd0fb7a408435821c", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/builtin_fn_mutating.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_fn_mutating.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_fn_mutating.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_fn_mutating.c?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-fcilkplus\" } */\n \n+#define NUMBER 100\n #if HAVE_IO\n #include <stdio.h>\n #endif\n@@ -15,18 +16,18 @@ void my_func (double *x, double y)\n \n int main(void)\n {\n-  int ii,array[10], y = 0, y_int = 0, array2[10];\n-  double x = 0.000, yy, array3[10], array4[10];\n+  int ii,array[NUMBER], y = 0, y_int = 0, array2[NUMBER];\n+  double x = 0.000, yy, array3[NUMBER], array4[NUMBER];\n   double max_value = 0.000, min_value = 0.000, add_value, mul_value = 1.00;\n   int max_index = 0, min_index = 0;\n #if 1\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       array[ii] = 1+ii;\n       array2[ii]= 2; \n     }\n \n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       if (ii%2 && ii)\n \tarray3[ii] = (double)(1.0000/(double)ii);\n@@ -42,16 +43,16 @@ int main(void)\n \n   /* Initialize it to the first variable.  */\n   max_value = array3[0] * array4[0];\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     if (array3[ii] * array4[ii] > max_value) {\n       max_index = ii;\n     }\n     \n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     my_func (&max_value, array3[ii] * array4[ii]);\n   \n #if HAVE_IO\n-  for (ii = 0; ii < 10; ii++) \n+  for (ii = 0; ii < NUMBER; ii++) \n     printf(\"%5.3f \", array3[ii] * array4[ii]);\n   printf(\"\\n\");\n   printf(\"Max = %5.3f\\t Max Index = %2d\\n\", x, y);"}, {"sha": "65549121b192a1b1c6a7d8009141b90fed424f17", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/builtin_func_double2.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_func_double2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_func_double2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fbuiltin_func_double2.c?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,17 +1,18 @@\n /* { dg-do run } */\n /* { dg-options \"-fcilkplus\" } */\n \n+#define NUMBER 100\n #if HAVE_IO\n #include <stdio.h>\n #endif\n \n int main(void)\n {\n   int argc = 1;\n-  int ii,array[10], y = 0, y_int = 0, array2[10], y_int2=0, y2=0;\n-  double x, yy, array3[10], array4[10];\n+  int ii,array[NUMBER], y = 0, y_int = 0, array2[NUMBER], y_int2=0, y2=0;\n+  double x, yy, array3[NUMBER], array4[NUMBER];\n   int all_zero, all_nonzero, any_zero, any_nonzero;\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       array[ii] = 0;\n       array2[ii] = 5;\n@@ -29,7 +30,7 @@ int main(void)\n \n   any_zero = 0;\n   any_nonzero = 0;\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       if ((array3[ii] + array[4]) == 0)\n \tany_zero = 1;\n@@ -45,7 +46,7 @@ int main(void)\n \n   all_zero = 0;\n   all_nonzero = 0;\n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n       if (((array3[ii] + array4[ii]) * (argc-1)) == 0)\n \tall_zero = 1;\n@@ -60,11 +61,11 @@ int main(void)\n  \n \n #if HAVE_IO\n-  for (ii = 0; ii < 10; ii++) {\n+  for (ii = 0; ii < NUMBER; ii++) {\n     printf(\"%5.3f \", array3[ii] +array4[ii]);\n   }\n   printf(\"\\n\");\n-  for (ii = 0; ii < 10; ii++) {\n+  for (ii = 0; ii < NUMBER; ii++) {\n     printf(\"%5.3f \", (array3[ii] + array4[ii]) * (argc-1));\n   }\n   printf(\"\\n\");"}, {"sha": "9cb16e147fe43695e05363c5af00ed22761b6426", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/gather_scatter.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fgather_scatter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fgather_scatter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fgather_scatter.c?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,18 +1,19 @@\n /* { dg-do run } */\n /* { dg-options \"-fcilkplus\" } */\n \n+#define NUMBER 100\n #if HAVE_IO\n #include <stdio.h>\n #endif\n \n int main(void)\n {\n-  int array[10][10], array2[10], array3[10], x = 0, y;\n+  int array[NUMBER][NUMBER], array2[NUMBER], array3[NUMBER], x = 0, y;\n   int x_correct, y_correct, ii, jj = 0;\n-  float array4[10][10][10][10];\n-  for (ii = 0; ii < 10; ii++)\n+  float array4[NUMBER][NUMBER][NUMBER][NUMBER];\n+  for (ii = 0; ii < NUMBER; ii++)\n     {\n-      for (jj = 0; jj < 10; jj++)\n+      for (jj = 0; jj < NUMBER; jj++)\n \t{\n \t  array[ii][jj] = 1+ii;\n \t  array2[ii]= 2;\n@@ -22,32 +23,32 @@ int main(void)\n   \n   array[array2[:]][array3[:]] = 1000;\n \n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     if (array[array2[ii]][array3[ii]] != 1000)\n       return 1;\n   \n #if HAVE_IO\n-  for (ii = 0; ii < 10; ii++) {\n-    for (jj = 0; jj < 10; jj++) {\n+  for (ii = 0; ii < NUMBER; ii++) {\n+    for (jj = 0; jj < NUMBER; jj++) {\n       printf(\"%4d\\t\", array[ii][jj]);\n     }\n     printf(\"\\n\");\n   }\n #endif\n \n-  array4[array2[:]][array3[0:10:1]][array2[0:10:1]][array3[0:10:1]] =\n+  array4[array2[:]][array3[0:NUMBER:1]][array2[0:NUMBER:1]][array3[0:NUMBER:1]] =\n     (float)array[array2[:]][array3[:]]; \n \n-  for (ii = 0; ii < 10; ii++)\n+  for (ii = 0; ii < NUMBER; ii++)\n     if (array4[array2[ii]][array3[ii]][array2[ii]][array3[ii]] !=\n \t(float)array[array2[ii]][array3[ii]])\n       return 2;\n   \n #if HAVE_IO\n-  for (ii = 0; ii < 10; ii++) {\n-      for (jj = 0; jj < 10; jj++) {\n-\t  for (kk = 0; kk < 10; kk++) {\n-\t      for (ll = 0; ll < 10; ll++) {\n+  for (ii = 0; ii < NUMBER; ii++) {\n+      for (jj = 0; jj < NUMBER; jj++) {\n+\t  for (kk = 0; kk < NUMBER; kk++) {\n+\t      for (ll = 0; ll < NUMBER; ll++) {\n \t\t  printf(\"%4d\\n\", array4[ii][jj][kk][ll]);\n \t      }\n \t  }"}, {"sha": "98ab9e1665e053b0e88b235fa9362c99b77b95f4", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57577.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57577.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57577.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57577.c?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcilkplus\" } */\n \n-int A[10], B[10][10];\n+#define NUMBER 100\n+int A[NUMBER], B[NUMBER][NUMBER];\n int foo (int a);\n \n int main () {"}, {"sha": "d650d9ad2d51dc2c45f1638585dcf387d1a78e8f", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/sec_implicit_ex.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fsec_implicit_ex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f88ffd21132c33435dfd125bd1b56c4dfe9939/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fsec_implicit_ex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fsec_implicit_ex.c?ref=a0f88ffd21132c33435dfd125bd1b56c4dfe9939", "patch": "@@ -1,24 +1,27 @@\n /* { dg-do run } */\n /* { dg-options \"-fcilkplus\" } */\n \n+#define NUMBER 100\n+\n int main(void)\n {\n-  int jj, kk, array_3C[10][10][10];\n-  int ii,array[10], y = 0, y_int = 0, array2[10], array_3[10][10][10];\n-  double x, yy, array3[10], array4[10];\n+  int jj, kk, array_3C[NUMBER][NUMBER][NUMBER];\n+  int ii,array[NUMBER], y = 0, y_int = 0, array2[NUMBER], \n+      array_3[NUMBER][NUMBER][NUMBER];\n+  double x, yy, array3[NUMBER], array4[NUMBER];\n \n   array[:] = __sec_implicit_index (0);\n   array_3[:][:][:] = __sec_implicit_index (1) + __sec_implicit_index(0) +\n     __sec_implicit_index (2);\n \n-  for (ii = 0; ii < 10; ii++)\n-    for (jj = 0; jj < 10; jj++)\n-      for (kk = 0; kk < 10; kk++)\n+  for (ii = 0; ii < NUMBER; ii++)\n+    for (jj = 0; jj < NUMBER; jj++)\n+      for (kk = 0; kk < NUMBER; kk++)\n \tarray_3C[ii][jj][kk] = ii+jj+kk;\n \t\n-  for (ii = 0; ii < 10; ii++)\n-    for (jj = 0; jj < 10; jj++)\n-      for (kk = 0; kk < 10; kk++)\n+  for (ii = 0; ii < NUMBER; ii++)\n+    for (jj = 0; jj < NUMBER; jj++)\n+      for (kk = 0; kk < NUMBER; kk++)\n \tif (array_3[ii][jj][kk] != array_3C[ii][jj][kk])\n \t  return 1;\n \t"}]}