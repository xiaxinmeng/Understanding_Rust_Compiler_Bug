{"sha": "f17d6c73de036a8eef4992155b142133ee1a46ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3ZDZjNzNkZTAzNmE4ZWVmNDk5MjE1NWIxNDIxMzNlZTFhNDZlZQ==", "commit": {"author": {"name": "Nathan Myers", "email": "ncm@cantrip.org", "date": "2000-04-26T02:51:12Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-04-26T02:51:12Z"}, "message": "cpu: Atomicity cleanups.\n\n\n2000-04-24  Nathan Myers  <ncm@cantrip.org>\n\n\t* config/cpu: Atomicity cleanups.\n\t* config/cpu/alpha/bits: New directory.\n\t* config/cpu/arm/bits: New directory.\n\t* config/cpu/generic/bits: New directory.\n\t* config/cpu/i386/bits: New directory.\n\t* config/cpu/powerpc/bits: New directory.\n\t* config/cpu/sparc/sparc32/bits: New directory.\n\t* config/cpu/sparc/sparc32/bits: New directory.\n\t* config/cpu/*/bits: Move atomicity.h files to here.\n\nFrom-SVN: r33438", "tree": {"sha": "e43eb62062687bddc1a0a4a0f93c6a6cb98d8155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e43eb62062687bddc1a0a4a0f93c6a6cb98d8155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17d6c73de036a8eef4992155b142133ee1a46ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17d6c73de036a8eef4992155b142133ee1a46ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17d6c73de036a8eef4992155b142133ee1a46ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17d6c73de036a8eef4992155b142133ee1a46ee/comments", "author": {"login": "ncm", "id": 215047, "node_id": "MDQ6VXNlcjIxNTA0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/215047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncm", "html_url": "https://github.com/ncm", "followers_url": "https://api.github.com/users/ncm/followers", "following_url": "https://api.github.com/users/ncm/following{/other_user}", "gists_url": "https://api.github.com/users/ncm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncm/subscriptions", "organizations_url": "https://api.github.com/users/ncm/orgs", "repos_url": "https://api.github.com/users/ncm/repos", "events_url": "https://api.github.com/users/ncm/events{/privacy}", "received_events_url": "https://api.github.com/users/ncm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "369edff1857ec11057540d163f338090c24572f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369edff1857ec11057540d163f338090c24572f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369edff1857ec11057540d163f338090c24572f4"}], "stats": {"total": 349, "additions": 159, "deletions": 190}, "files": [{"sha": "dfc4c3261e60beb2ed11ef21786aa46793ce1f8b", "filename": "libstdc++-v3/config/cpu/alpha/bits/atomicity.h", "status": "renamed", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,22 +17,16 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H\t1\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n \n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int\tuint32_t;\n-typedef int \t\tint32_t;\n-#endif\n+typedef int _Atomic_word;\n \n-\n-static inline int\n+static inline _Atomic_word\n __attribute__ ((unused))\n-exchange_and_add (volatile uint32_t *mem, int val)\n+__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n-  register int result, tmp;\n+  register int __result, __tmp;\n \n   __asm__ __volatile__ (\n \t\"/* Inline exchange & add */\\n\"\n@@ -47,17 +41,17 @@ exchange_and_add (volatile uint32_t *mem, int val)\n \t\".previous\\n\\t\"\n \t\"mb\\n\\t\"\n \t\"/* End exchange & add */\"\n-\t: \"=&r\"(result), \"=&r\"(tmp), \"=m\"(*mem)\n-\t: \"m\" (*mem), \"r\"(val));\n+\t: \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n+\t: \"m\" (*__mem), \"r\"(__val));\n \n-  return result;\n+  return __result;\n }\n \n static inline void\n __attribute__ ((unused))\n-atomic_add (volatile uint32_t *mem, int val)\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n {\n-  register int result;\n+  register _Atomic_word __result;\n \n   __asm__ __volatile__ (\n \t\"/* Inline exchange & add */\\n\"\n@@ -72,15 +66,15 @@ atomic_add (volatile uint32_t *mem, int val)\n \t\".previous\\n\\t\"\n \t\"mb\\n\\t\"\n \t\"/* End exchange & add */\"\n-\t: \"=&r\"(result), \"=m\"(*mem)\n-\t: \"m\" (*mem), \"r\"(val));\n+\t: \"=&r\"(__result), \"=m\"(*__mem)\n+\t: \"m\" (*__mem), \"r\"(__val));\n }\n \n-static inline long\n+static inline intint\n __attribute__ ((unused))\n-compare_and_swap (volatile long int *p, long int oldval, long int newval)\n+__compare_and_swap (volatile long *__p, long __oldval, long __newval)\n {\n-  long int ret;\n+  int __ret;\n \n   __asm__ __volatile__ (\n \t\"/* Inline compare & swap */\\n\"\n@@ -98,16 +92,10 @@ compare_and_swap (volatile long int *p, long int oldval, long int newval)\n \t\"3:\\t\"\n \t\"mb\\n\\t\"\n \t\"/* End compare & swap */\"\n-\t: \"=&r\"(ret), \"=m\"(*p)\n-\t: \"r\"(oldval), \"r\"(newval), \"m\"(*p));\n+\t: \"=&r\"(__ret), \"=m\"(*__p)\n+\t: \"r\"(__oldval), \"r\"(__newval), \"m\"(*__p));\n \n-  return ret;\n+  return __ret;\n }\n \n #endif /* atomicity.h */\n-\n-\n-\n-\n-\n-", "previous_filename": "libstdc++-v3/config/cpu/alpha/atomicity.h"}, {"sha": "3a0a0909ce3cbd88331b169d5316edb433e76904", "filename": "libstdc++-v3/config/cpu/arm/bits/atomicity.h", "status": "renamed", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,52 +17,52 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H    1\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H    1\n \n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int    uint32_t;\n-typedef int             int32_t;\n-#endif\n+typedef int _Atomic_word;\n \n-static inline int\n+static inline _Atomic_word\n __attribute__ ((unused))\n-exchange_and_add (volatile uint32_t *mem, int val)\n+__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n-  int tmp, tmp2, result;\n+  _Atomic_word __tmp, __tmp2, __result;\n   __asm__ (\"\\\n 0:      ldr     %0,[%3]\n         add     %1,%0,%4\n         swp     %2,%1,[%3]\n         cmp     %0,%2\n         swpne   %1,%2,[%3]\n         bne     0b\n-\" : \"=&r\"(result), \"=&r\"(tmp), \"=&r\"(tmp2) : \"r\" (mem), \"r\"(val) : \"cc\", \"memory\");\n-  return result;\n+\" : \"=&r\"(__result), \"=&r\"(__tmp), \"=&r\"(__tmp2) \n+  : \"r\" (__mem), \"r\"(__val) \n+  : \"cc\", \"memory\");\n+  return __result;\n }\n \n static inline void\n __attribute__ ((unused))\n-atomic_add (volatile uint32_t *mem, int val)\n+__atomic_add (volatile _Atomic_word *__mem, int __val)\n {\n-  int tmp, tmp2, tmp3;\n+  _Atomic_word __tmp, __tmp2, __tmp3;\n   __asm__ (\"\\\n 0:      ldr     %0,[%3]\n         add     %1,%0,%4\n         swp     %2,%1,[%3]\n         cmp     %0,%2\n         swpne   %1,%2,[%3]\n         bne     0b\n-\" : \"=&r\"(tmp), \"=&r\"(tmp2), \"=&r\"(tmp3) : \"r\" (mem), \"r\"(val) : \"cc\", \"memory\");\n+\" : \"=&r\"(__tmp), \"=&r\"(__tmp2), \"=&r\"(__tmp3) \n+  : \"r\" (__mem), \"r\"(__val) \n+  : \"cc\", \"memory\");\n }\n \n static inline int\n __attribute__ ((unused))\n-compare_and_swap (volatile long int *p, long int oldval, long int newval)\n+__compare_and_swap (volatile long *__p, long __oldval, long __newval)\n {\n-  int result, tmp;\n+  int __result;\n+  long __tmp;\n   __asm__ (\"\\\n 0:      ldr     %1,[%2]\n         mov     %0,#0\n@@ -74,25 +74,29 @@ compare_and_swap (volatile long int *p, long int oldval, long int newval)\n         bne     0b\n         mov     %0,#1\n 1:\n-\" : \"=&r\"(result), \"=&r\"(tmp) : \"r\" (p), \"r\" (newval), \"r\" (oldval) : \"cc\", \"memory\");\n+\" : \"=&r\"(__result), \"=&r\"(__tmp) \n+  : \"r\" (__p), \"r\" (__newval), \"r\" (__oldval) \n+  : \"cc\", \"memory\");\n+  return __result;\n }\n \n-static inline long int\n+static inline long\n __attribute__ ((unused))\n-always_swap (volatile long int *p, long int newval)\n+__always_swap (volatile long *__p, long __newval)\n {\n-  long int result;\n+  long __result;\n   __asm__ (\"\\\n         swp     %0,%2,[%1]\n-\" : \"=&r\"(result) : \"r\"(p), \"r\"(newval) : \"memory\");\n-  return result;\n+\" : \"=&r\"(__result) : \"r\"(__p), \"r\"(__newval) : \"memory\");\n+  return __result;\n }\n \n static inline int\n __attribute__ ((unused))\n-test_and_set (volatile long int *p, long int newval)\n+__test_and_set (volatile long *__p, long __newval)\n {\n-  int result, tmp, tmp2, tmp3;\n+  int __result;\n+  long __tmp;\n   __asm__ (\"\\\n 0:      ldr     %0,[%2]\n         cmp     %0,#0\n@@ -102,8 +106,10 @@ test_and_set (volatile long int *p, long int newval)\n         swpne   %0,%1,[%2]\n         bne     0b\n 1:\n-\" : \"=&r\"(result), \"=r\" (tmp) : \"r\"(p), \"r\"(newval) : \"cc\", \"memory\");\n-  return result;\n+\" : \"=&r\"(__result), \"=r\" (__tmp) \n+  : \"r\"(__p), \"r\"(__newval) \n+  : \"cc\", \"memory\");\n+  return __result;\n }\n \n #endif /* atomicity.h */", "previous_filename": "libstdc++-v3/config/cpu/arm/atomicity.h"}, {"sha": "ef47fe9787037628530bcf632712de3bccd24de9", "filename": "libstdc++-v3/config/cpu/generic/bits/atomicity.h", "status": "renamed", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,41 +17,35 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H\t1\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n \n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int\tuint32_t;\n-typedef int \t\tint32_t;\n-#endif\n+typedef int _Atomic_word;\n \n-\n-static inline int\n+static inline _Atomic_word\n __attribute__ ((unused))\n-exchange_and_add (uint32_t *mem, int val)\n+__exchange_and_add (_Atomic_word* __mem, int __val)\n {\n-  int result = *mem;\n-  *mem += val;\n-  return result;\n+  _Atomic_word __result = *__mem;\n+  *__mem += __val;\n+  return __result;\n }\n \n static inline void\n __attribute__ ((unused))\n-atomic_add (uint32_t *mem, int val)\n+__atomic_add (_Atomic_word* __mem, int __val)\n {\n-  *mem += val;\n+  *__mem += __val;\n }\n \n static inline int\n __attribute__ ((unused))\n-compare_and_swap (long int *p, long int oldval, long int newval)\n+__compare_and_swap (long *__p, long __oldval, long __newval)\n {\n-  if (*p != oldval)\n+  if (*__p != __oldval)\n     return 0;\n \n-  *p = newval;\n+  *__p = __newval;\n   return 1;\n }\n ", "previous_filename": "libstdc++-v3/config/cpu/generic/atomicity.h"}, {"sha": "f7d0381bb4469a2a3dd4378b2f9a63258d209ef6", "filename": "libstdc++-v3/config/cpu/i386/bits/atomicity.h", "status": "renamed", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,46 +17,42 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H\t1\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n \n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int\tuint32_t;\n-typedef int \t\tint32_t;\n-#endif\n+typedef int _Atomic_word;\n \n-\n-static inline int\n+static inline _Atomic_word \n __attribute__ ((unused))\n-exchange_and_add (volatile uint32_t *mem, int val)\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n {\n-  register int result;\n+  register _Atomic_word __result;\n   __asm__ __volatile__ (\"lock; xaddl %0,%2\"\n-\t\t\t: \"=r\" (result) : \"0\" (val), \"m\" (*mem) : \"memory\");\n-  return result;\n+\t\t\t: \"=r\" (__result) \n+                        : \"0\" (__val), \"m\" (*__mem) \n+                        : \"memory\");\n+  return __result;\n }\n \n static inline void\n __attribute__ ((unused))\n-atomic_add (volatile uint32_t *mem, int val)\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n {\n   __asm__ __volatile__ (\"lock; addl %0,%1\"\n-\t\t\t: : \"ir\" (val), \"m\" (*mem) : \"memory\");\n+\t\t\t: : \"ir\" (__val), \"m\" (*__mem) : \"memory\");\n }\n \n static inline char\n __attribute__ ((unused))\n-compare_and_swap (volatile long int *p, long int oldval, long int newval)\n+__compare_and_swap (volatile long* __p, long __oldval, long __newval)\n {\n-  char ret;\n-  long int readval;\n+  char __ret;\n+  long __readval;\n \n   __asm__ __volatile__ (\"lock; cmpxchgl %3, %1; sete %0\"\n-                        : \"=q\" (ret), \"=m\" (*p), \"=a\" (readval)\n-                        : \"r\" (newval), \"m\" (*p), \"a\" (oldval));\n-  return ret;\n+                        : \"=q\" (__ret), \"=m\" (*__p), \"=a\" (__readval)\n+                        : \"r\" (__newval), \"m\" (*__p), \"a\" (__oldval));\n+  return __ret;\n }\n \n #endif /* atomicity.h */", "previous_filename": "libstdc++-v3/config/cpu/i386/atomicity.h"}, {"sha": "02b5e60fcf64e2d1f3adb1e203d4d27714831664", "filename": "libstdc++-v3/config/cpu/powerpc/bits/atomicity.h", "status": "renamed", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,55 +17,49 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H\t1\n-\n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int\tuint32_t;\n-typedef int \t\tint32_t;\n-#endif\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n \n+typedef int _Atomic_word;\n \n #if BROKEN_PPC_ASM_CR0\n # define __ATOMICITY_INLINE /* nothing */\n #else\n # define __ATOMICITY_INLINE inline\n #endif\n \n-static __ATOMICITY_INLINE int\n+static __ATOMICITY_INLINE _Atomic_word\n __attribute__ ((unused))\n-exchange_and_add (volatile uint32_t *mem, int val)\n+__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n-  int tmp, result;\n+  _Atomic_word __tmp, __result;\n   __asm__ (\"\\\n 0:\tlwarx\t%0,0,%2\n \tadd%I3\t%1,%0,%3\n \tstwcx.\t%1,0,%2\n \tbne-\t0b\n-\" : \"=&b\"(result), \"=&r\"(tmp) : \"r\" (mem), \"Ir\"(val) : \"cr0\", \"memory\");\n-  return result;\n+\" : \"=&b\"(__result), \"=&r\"(__tmp) : \"r\" (__mem), \"Ir\"(__val) : \"cr0\", \"memory\");\n+  return __result;\n }\n \n static __ATOMICITY_INLINE void\n __attribute__ ((unused))\n-atomic_add (volatile uint32_t *mem, int val)\n+__atomic_add (volatile _Atomic_word *__mem, int __val)\n {\n-  int tmp;\n+  _Atomic_word __tmp;\n   __asm__ (\"\\\n 0:\tlwarx\t%0,0,%1\n \tadd%I2\t%0,%0,%2\n \tstwcx.\t%0,0,%1\n \tbne-\t0b\n-\" : \"=&b\"(tmp) : \"r\" (mem), \"Ir\"(val) : \"cr0\", \"memory\");\n+\" : \"=&b\"(__tmp) : \"r\" (__mem), \"Ir\"(__val) : \"cr0\", \"memory\");\n }\n \n static __ATOMICITY_INLINE int\n __attribute__ ((unused))\n-compare_and_swap (volatile long int *p, long int oldval, long int newval)\n+__compare_and_swap (volatile long *p, long int __oldval, long int __newval)\n {\n-  int result;\n+  int __result;\n   __asm__ (\"\\\n 0:\tlwarx\t%0,0,%1\n \tsub%I2c.\t%0,%0,%2\n@@ -74,37 +68,39 @@ compare_and_swap (volatile long int *p, long int oldval, long int newval)\n \tstwcx.\t%3,0,%1\n \tbne-\t0b\n 1:\n-\" : \"=&b\"(result) : \"r\"(p), \"Ir\"(oldval), \"r\"(newval) : \"cr0\", \"memory\");\n-  return result >> 5;\n+\" : \"=&b\"(__result) \n+  : \"r\"(__p), \"Ir\"(__oldval), \"r\"(__newval) \n+  : \"cr0\", \"memory\");\n+  return __result >> 5;\n }\n \n-static __ATOMICITY_INLINE long int\n+static __ATOMICITY_INLINE long\n __attribute__ ((unused))\n-always_swap (volatile long int *p, long int newval)\n+__always_swap (volatile long *__p, long int __newval)\n {\n-  long int result;\n+  long __result;\n   __asm__ (\"\\\n 0:\tlwarx\t%0,0,%1\n \tstwcx.\t%2,0,%1\n \tbne-\t0b\n-\" : \"=&r\"(result) : \"r\"(p), \"r\"(newval) : \"cr0\", \"memory\");\n-  return result;\n+\" : \"=&r\"(__result) : \"r\"(__p), \"r\"(__newval) : \"cr0\", \"memory\");\n+  return __result;\n }\n \n static __ATOMICITY_INLINE int\n __attribute__ ((unused))\n-test_and_set (volatile long int *p, long int newval)\n+__test_and_set (volatile long *__p, long int __newval)\n {\n-  int result;\n+  int __result;\n   __asm__ (\"\\\n 0:\tlwarx\t%0,0,%1\n \tcmpwi\t%0,0\n \tbne-\t1f\n \tstwcx.\t%2,0,%1\n \tbne-\t0b\n 1:\n-\" : \"=&r\"(result) : \"r\"(p), \"r\"(newval) : \"cr0\", \"memory\");\n-  return result;\n+\" : \"=&r\"(__result) : \"r\"(__p), \"r\"(__newval) : \"cr0\", \"memory\");\n+  return __result;\n }\n \n #endif /* atomicity.h */", "previous_filename": "libstdc++-v3/config/cpu/powerpc/atomicity.h"}, {"sha": "87db18bfd1dc60b5a341a95eecd7bd17aa9491ab", "filename": "libstdc++-v3/config/cpu/sparc/sparc32/bits/atomicity.h", "status": "renamed", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc32%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc32%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc32%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,88 +17,82 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H\t1\n-\n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int\tuint32_t;\n-typedef int \t\tint32_t;\n-#endif\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n \n+typedef int _Atomic_word;\n \n static int\n __attribute__ ((unused))\n-exchange_and_add (volatile uint32_t *mem, int val)\n+__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n-  static unsigned char lock;\n-  int result, tmp;\n+  static unsigned char __lock;\n+  _Atomic_word __result, __tmp;\n \n   __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n \t\t       \"\tcmp\t%0, 0\\n\\t\"\n \t\t       \"\tbne\t1b\\n\\t\"\n \t\t       \"\t nop\"\n-\t\t       : \"=&r\" (tmp)\n-\t\t       : \"r\" (&lock)\n+\t\t       : \"=&r\" (__tmp)\n+\t\t       : \"r\" (&__lock)\n \t\t       : \"memory\");\n-  result = *mem;\n-  *mem += val;\n+  __result = *__mem;\n+  *__mem += __val;\n   __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n \t\t       : /* no outputs */\n-\t\t       : \"r\" (&lock)\n+\t\t       : \"r\" (&__lock)\n \t\t       : \"memory\");\n-  return result;\n+  return __result;\n }\n \n static void\n __attribute__ ((unused))\n-atomic_add (volatile uint32_t *mem, int val)\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n {\n-  static unsigned char lock;\n-  int tmp;\n+  static unsigned char __lock;\n+  _Atomic_word __tmp;\n \n   __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n \t\t       \"\tcmp\t%0, 0\\n\\t\"\n \t\t       \"\tbne\t1b\\n\\t\"\n \t\t       \"\t nop\"\n-\t\t       : \"=&r\" (tmp)\n-\t\t       : \"r\" (&lock)\n+\t\t       : \"=&r\" (__tmp)\n+\t\t       : \"r\" (&__lock)\n \t\t       : \"memory\");\n-  *mem += val;\n+  *__mem += __val;\n   __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n \t\t       : /* no outputs */\n-\t\t       : \"r\" (&lock)\n+\t\t       : \"r\" (&__lock)\n \t\t       : \"memory\");\n }\n \n static int\n __attribute__ ((unused))\n-compare_and_swap (volatile long int *p, long int oldval, long int newval)\n+__compare_and_swap (volatile long *__p, long __oldval, long __newval)\n {\n-  static unsigned char lock;\n-  int ret, tmp;\n+  static unsigned char __lock;\n+  long __ret, __tmp;\n \n   __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n \t\t       \"\tcmp\t%0, 0\\n\\t\"\n \t\t       \"\tbne\t1b\\n\\t\"\n \t\t       \"\t nop\"\n-\t\t       : \"=&r\" (tmp)\n-\t\t       : \"r\" (&lock)\n+\t\t       : \"=&r\" (__tmp)\n+\t\t       : \"r\" (&__lock)\n \t\t       : \"memory\");\n-  if (*p != oldval)\n-    ret = 0;\n+  if (*__p != __oldval)\n+    __ret = 0;\n   else\n     {\n-      *p = newval;\n-      ret = 1;\n+      *__p = __newval;\n+      __ret = 1;\n     }\n   __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n \t\t       : /* no outputs */\n-\t\t       : \"r\" (&lock)\n+\t\t       : \"r\" (&__lock)\n \t\t       : \"memory\");\n \n-  return ret;\n+  return __ret;\n }\n \n #endif /* atomicity.h */", "previous_filename": "libstdc++-v3/config/cpu/sparc/sparc32/atomicity.h"}, {"sha": "80d0fc861e8ff0b3b7c369be329de5b30e9a7948", "filename": "libstdc++-v3/config/cpu/sparc/sparc64/bits/atomicity.h", "status": "renamed", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc64%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17d6c73de036a8eef4992155b142133ee1a46ee/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc64%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc64%2Fbits%2Fatomicity.h?ref=f17d6c73de036a8eef4992155b142133ee1a46ee", "patch": "@@ -17,57 +17,52 @@\n    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef _ATOMICITY_H\n-#define _ATOMICITY_H\t1\n+#ifndef _BITS_ATOMICITY_H\n+#define _BITS_ATOMICITY_H\t1\n \n-#ifdef _GLIBCPP_HAVE_INTTYPES_H\n-#include <inttypes.h>\n-#else\n-typedef unsigned int\tuint32_t;\n-typedef int \t\tint32_t;\n-#endif\n+typedef long _Atomic_word;\n \n-\n-static inline int\n+static inline _Atomic_word\n __attribute__ ((unused))\n-exchange_and_add (volatile uint32_t *mem, int val)\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n {\n-  uint32_t tmp1, tmp2;\n+  _Atomic_word __tmp1, __tmp2;\n \n   __asm__ __volatile__(\"1:\tlduw\t[%2], %0\\n\\t\"\n \t\t       \"\tadd\t%0, %3, %1\\n\\t\"\n \t\t       \"\tcas\t[%2], %0, %1\\n\\t\"\n \t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n \t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n \t\t       \"\t nop\"\n-\t\t       : \"=&r\" (tmp1), \"=&r\" (tmp2)\n-\t\t       : \"r\" (mem), \"r\" (val)\n+\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2)\n+\t\t       : \"r\" (__mem), \"r\" (__val)\n \t\t       : \"memory\");\n-  return tmp2;\n+  return __tmp2;\n }\n \n static inline void\n __attribute__ ((unused))\n-atomic_add (volatile uint32_t *mem, int val)\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n {\n-  uint32_t tmp1, tmp2;\n+  _Atomic_word __tmp1, __tmp2;\n \n   __asm__ __volatile__(\"1:\tlduw\t[%2], %0\\n\\t\"\n \t\t       \"\tadd\t%0, %3, %1\\n\\t\"\n \t\t       \"\tcas\t[%2], %0, %1\\n\\t\"\n \t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n \t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n \t\t       \"\t nop\"\n-\t\t       : \"=&r\" (tmp1), \"=&r\" (tmp2)\n-\t\t       : \"r\" (mem), \"r\" (val)\n+\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2)\n+\t\t       : \"r\" (__mem), \"r\" (__val)\n \t\t       : \"memory\");\n }\n \n static inline int\n __attribute__ ((unused))\n-compare_and_swap (volatile long int *p, long int oldval, long int newval)\n+__compare_and_swap (volatile long *__p, long __oldval, long __newval)\n {\n-  register long int tmp, tmp2;\n+  register int __tmp, \n+  register long __tmp2;\n \n   __asm__ __volatile__(\"1:\tldx\t[%4], %0\\n\\t\"\n \t\t       \"\tmov\t%2, %1\\n\\t\"\n@@ -79,10 +74,10 @@ compare_and_swap (volatile long int *p, long int oldval, long int newval)\n \t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n \t\t       \"\t mov\t1, %0\\n\\t\"\n \t\t       \"2:\"\n-\t\t       : \"=&r\" (tmp), \"=&r\" (tmp2)\n-\t\t       : \"r\" (newval), \"r\" (oldval), \"r\" (p)\n+\t\t       : \"=&r\" (__tmp), \"=&r\" (__tmp2)\n+\t\t       : \"r\" (__newval), \"r\" (__oldval), \"r\" (__p)\n \t\t       : \"memory\");\n-  return tmp;\n+  return __tmp;\n }\n \n #endif /* atomicity.h */", "previous_filename": "libstdc++-v3/config/cpu/sparc/sparc64/atomicity.h"}]}