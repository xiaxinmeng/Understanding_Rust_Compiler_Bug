{"sha": "361eefe75db3b115f4a33d8b5bdd04996df4c4d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYxZWVmZTc1ZGIzYjExNWY0YTMzZDhiNWJkZDA0OTk2ZGY0YzRkOQ==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2008-07-09T15:26:56Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2008-07-09T15:26:56Z"}, "message": "random_shuffle.h: (sequential_random_shuffle) Copy data back.\n\n2008-07-09  Johannes Singler  <singler@ira.uka.de>\n\n         * include/parallel/random_shuffle.h:\n         (sequential_random_shuffle) Copy data back.\n         * testsuite/25_algorithms/random_shuffle/1.cc:\n         New. Generic random_shuffle functionality test.\n\nFrom-SVN: r137658", "tree": {"sha": "46e7ff80f358ba2abd47dfcef96af02b852f69a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e7ff80f358ba2abd47dfcef96af02b852f69a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/361eefe75db3b115f4a33d8b5bdd04996df4c4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361eefe75db3b115f4a33d8b5bdd04996df4c4d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361eefe75db3b115f4a33d8b5bdd04996df4c4d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361eefe75db3b115f4a33d8b5bdd04996df4c4d9/comments", "author": null, "committer": null, "parents": [{"sha": "dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "e5bc5395c0bb5374acf50e5b8ad0b5eeb90f28e3", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361eefe75db3b115f4a33d8b5bdd04996df4c4d9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361eefe75db3b115f4a33d8b5bdd04996df4c4d9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=361eefe75db3b115f4a33d8b5bdd04996df4c4d9", "patch": "@@ -491,6 +491,9 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n                                       rng);\n           }\n \n+        // Copy elements back.\n+        std::copy(target, target + n, begin);\n+\n         delete[] dist0;\n         delete[] dist1;\n         delete[] oracles;"}, {"sha": "4c5836b2e70a757a975bd51268746e758cf181ea", "filename": "libstdc++-v3/testsuite/25_algorithms/random_shuffle/1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361eefe75db3b115f4a33d8b5bdd04996df4c4d9/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361eefe75db3b115f4a33d8b5bdd04996df4c4d9/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frandom_shuffle%2F1.cc?ref=361eefe75db3b115f4a33d8b5bdd04996df4c4d9", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.2.11 random_shuffle()\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int N = 200000;\n+int A[N], s1[N];\n+\n+#if _GLIBCXX_PARALLEL\n+#define TAG , __gnu_parallel::sequential_tag()\n+#else\n+#define TAG\n+#endif\n+\n+void fill_ascending()\n+{\n+  for (int i = 0; i < N; ++i)\n+    A[i] = i;\n+}\n+\n+void\n+test01()\n+{\n+  fill_ascending();\n+#if _GLIBCXX_PARALLEL\n+  for (int num_threads = 1; num_threads <= 2; ++num_threads)\n+  {\n+    omp_set_num_threads(num_threads);\n+#endif\n+    std::copy(A, A + N, s1);\n+    VERIFY(std::equal(s1, s1 + N, A TAG));\n+\n+    std::random_shuffle(s1, s1 + N);\n+    // the chance that random_shuffle leaves the order as is by coincidence\n+    // is negligible, so we expect it to be permuted\n+    VERIFY(!std::equal(s1, s1 + N, A TAG));\n+\n+    std::sort(s1, s1 + N TAG);\n+    VERIFY(std::equal(s1, s1 + N, A TAG));\n+#if _GLIBCXX_PARALLEL\n+  }\n+#endif\n+}\n+\n+int\n+main()\n+{\n+#if _GLIBCXX_PARALLEL\n+  __gnu_parallel::_Settings gpms = __gnu_parallel::_Settings::get();\n+  gpms.algorithm_strategy = __gnu_parallel::force_parallel;\n+  __gnu_parallel::_Settings::set(gpms);\n+#endif\n+  test01();\n+  return 0;\n+}"}]}