{"sha": "552b56fcf26648938a107c54548551e39b1f6430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyYjU2ZmNmMjY2NDg5MzhhMTA3YzU0NTQ4NTUxZTM5YjFmNjQzMA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2012-07-24T11:29:50Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2012-07-24T11:29:50Z"}, "message": "sourcebuild.texi (arm_hf_eabi): Document effective-target check.\n\n    gcc/\n    * doc/sourcebuild.texi (arm_hf_eabi): Document effective-target\n    check.\n\n    gcc/testsuite/\n    * lib/target-supports.exp (check_effective_target_arm_hf_eabi): New.\n    * gcc.dg/torture/stackalign/builtin-apply-2.c: Skip for\n    hard-float ARM.\n\nFrom-SVN: r189805", "tree": {"sha": "7967f1588aada7984f350d95c644d59f6109b414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7967f1588aada7984f350d95c644d59f6109b414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/552b56fcf26648938a107c54548551e39b1f6430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552b56fcf26648938a107c54548551e39b1f6430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552b56fcf26648938a107c54548551e39b1f6430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552b56fcf26648938a107c54548551e39b1f6430/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0229aee998dd42467174237fb49dc899fe1a0478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0229aee998dd42467174237fb49dc899fe1a0478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0229aee998dd42467174237fb49dc899fe1a0478"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "af268f45caa1ea5a239f13b151dcbdeecbc481ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b56fcf26648938a107c54548551e39b1f6430/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b56fcf26648938a107c54548551e39b1f6430/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=552b56fcf26648938a107c54548551e39b1f6430", "patch": "@@ -1,3 +1,8 @@\n+2012-07-24  Julian Brown  <julian@codesourcery.com>\n+\n+\t* doc/sourcebuild.texi (arm_hf_eabi): Document effective-target\n+\tcheck.\n+\n 2012-07-24  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* sbitmap.h (SBITMAP_ELT_BITS): Use \"1u\" trick as for BITMAP_WORD_BITS."}, {"sha": "44c284246f93de58a9c07a4c833ee057f14a7ecd", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=552b56fcf26648938a107c54548551e39b1f6430", "patch": "@@ -1497,6 +1497,11 @@ ARM target generates 32-bit code.\n @item arm_eabi\n ARM target adheres to the ABI for the ARM Architecture.\n \n+@item arm_hf_eabi\n+ARM target adheres to the VFP and Advanced SIMD Register Arguments\n+variant of the ABI for the ARM Architecture (as selected with\n+@code{-mfloat-abi=hard}).\n+\n @item arm_hard_vfp_ok\n ARM target supports @code{-mfpu=vfp -mfloat-abi=hard}.\n Some multilibs may be incompatible with these options."}, {"sha": "b436965bef7f20958573f94c220d4a7e2adb8b6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=552b56fcf26648938a107c54548551e39b1f6430", "patch": "@@ -1,3 +1,9 @@\n+2012-07-24  Julian Brown  <julian@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_hf_eabi): New.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Skip for\n+\thard-float ARM.\n+\n 2012-07-23  Paul Brook  <paul@codesourcery.com>\n \n \t* g++.dg/other/armv7m-1.c: New test."}, {"sha": "6ba5871885a8664bb3f311c605c945e1f9609b3f", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=552b56fcf26648938a107c54548551e39b1f6430", "patch": "@@ -5,6 +5,8 @@\n    with pre-pushed arguments (e.g. SPARC).  */\n \n /* { dg-do run } */\n+\n+/* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { arm_hf_eabi } } */\n    \n \n #define INTEGER_ARG  5"}, {"sha": "dbe4086a193d9d898dec522d07fe5711c2cb4659", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552b56fcf26648938a107c54548551e39b1f6430/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=552b56fcf26648938a107c54548551e39b1f6430", "patch": "@@ -2341,6 +2341,19 @@ proc check_effective_target_arm_eabi { } {\n     }]\n }\n \n+# Return 1 if this is an ARM target that adheres to the hard-float variant of\n+# the ABI for the ARM Architecture (e.g. -mfloat-abi=hard).\n+\n+proc check_effective_target_arm_hf_eabi { } {\n+    return [check_no_compiler_messages arm_hf_eabi object {\n+\t#if !defined(__ARM_EABI__) || !defined(__ARM_PCS_VFP)\n+\t#error not hard-float EABI\n+\t#else\n+\tint dummy;\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if this is an ARM target supporting -mcpu=iwmmxt.\n # Some multilibs may be incompatible with this option.\n "}]}