{"sha": "f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxOTFlNjQwZDBiZmMzZTkyZGJkNDdhM2IwODZlM2U4OGZmZmNkNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-08T05:42:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-08T05:42:36Z"}, "message": "pt.c (tsubst_expr): Set DECL_TEMPLATE_INSTANTIATED for a catch paramter.\n\n\t* pt.c (tsubst_expr): Set DECL_TEMPLATE_INSTANTIATED for a catch\n\tparamter.\n\n\t* semantics.c (expand_stmt): Don't pretend to have asmspecs for\n\tlocal statics if we don't really have them.\n\n\t* ir.texi: Improve documentation for STMT_EXPR.  Describe\n\tCLEANUP_POINT_EXPR.\n\nFrom-SVN: r29863", "tree": {"sha": "08c1b51b1a0692c3541d1720ed3f6ac569f459ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08c1b51b1a0692c3541d1720ed3f6ac569f459ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/comments", "author": null, "committer": null, "parents": [{"sha": "7d005869219fd7b82cc230ec3350f9175f1cb138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d005869219fd7b82cc230ec3350f9175f1cb138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d005869219fd7b82cc230ec3350f9175f1cb138"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "97f16983f3f13bc113a9d89297033e5db64cfef3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "patch": "@@ -1,3 +1,14 @@\n+1999-10-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (tsubst_expr): Set DECL_TEMPLATE_INSTANTIATED for a catch\n+\tparamter.\n+\t\n+\t* semantics.c (expand_stmt): Don't pretend to have asmspecs for\n+\tlocal statics if we don't really have them.\n+\n+\t* ir.texi: Improve documentation for STMT_EXPR.  Describe\n+\tCLEANUP_POINT_EXPR.\n+\n 1999-10-07  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (build_vtable_entry_ref): Use finish_asm_stmt."}, {"sha": "fd21cf3beaf231418fd3a05495109c89a58a6a40", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "patch": "@@ -1475,6 +1475,7 @@ The @code{WHILE_BODY} is the body of the loop.\n @tindex BIND_EXPR\n @tindex LOOP_EXPR\n @tindex EXIT_EXPR\n+@tindex CLEANUP_POINT_EXPR\n @tindex ARRAY_REF\n \n The internal representation for expressions is for the most part quite\n@@ -1824,7 +1825,19 @@ expression would normally appear.  The @code{STMT_EXPR} node represents\n such an expression.  The @code{STMT_EXPR_STMT} gives the statement\n contained in the expression; this is always a @code{COMPOUND_STMT}.  The\n value of the expression is the value of the last sub-statement in the\n-@code{COMPOUND_STMT}.\n+@code{COMPOUND_STMT}.  More precisely, the value is the value computed\n+by the last @code{EXPR_STMT} in the outermost scope of the\n+@code{COMPOUND_STMT}.  For example, in:\n+@example\n+(@{ 3; @})\n+@end example\n+the value is @code{3} while in:\n+@example\n+(@{ if (x) { 3; } @})\n+@end example\n+(represented by a nested @code{COMPOUND_STMT}), there is no value.  If\n+the @code{STMT_EXPR} does not yield a value, it's type will be\n+@code{void}.\n \n @item BIND_EXPR\n These nodes represent local blocks.  The first operand is a list of\n@@ -1844,6 +1857,12 @@ These nodes represent conditional exits from the nearest enclosing\n non-zero, then the loop should be exited.  An @code{EXIT_EXPR} will only\n appear within a @code{LOOP_EXPR}.\n \n+@item CLEANUP_POINT_EXPR\n+These nodes represent full-expressions.  The single oeprand is an\n+expression to evaluate.  Any destructor calls engendered by the creation\n+of temporaries during the evaluation of that expression should be\n+performed immediately after the expression is evaluated.\n+\n @item CONSTRUCTOR\n These nodes represent the brace-enclosed initializers for a structure or\n array.  The first operand is reserved for use by the back-end.  The"}, {"sha": "027e04a4df7e385d6db732f4e54f49bfe7858247", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "patch": "@@ -7424,6 +7424,10 @@ tsubst_expr (t, args, complain, in_decl)\n \t  {\n \t    decl = DECL_STMT_DECL (HANDLER_PARMS (t));\n \t    decl = tsubst (decl, args, complain, in_decl);\n+\t    /* Prevent instantiate_decl from trying to instantiate\n+\t       this variable.  We've already done all that needs to be\n+\t       done.  */\n+\t    DECL_TEMPLATE_INSTANTIATED (decl) = 1;\n \t  }\n \telse\n \t  decl = NULL_TREE;"}, {"sha": "5cdeb07bacae5b944a4fc2d4f4ef7ba386b03247", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "patch": "@@ -2301,9 +2301,21 @@ expand_stmt (t)\n \t\t\t\t\t  DECL_ANON_UNION_ELEMS (decl));\n \t      }\n \t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n-\t      rest_of_decl_compilation \n-\t\t(decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n-\t\t /*top_level=*/0, /*at_end=*/0);\n+\t      {\n+\t\tconst char *asmspec = NULL;\n+\n+\t\tif (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n+\t\t  {\n+\t\t    /* The only way this situaton can occur is if the\n+\t\t       user specified a name for this DECL using the\n+\t\t       `attribute' syntax.  */\n+\t\t    asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\t\t    DECL_ASSEMBLER_NAME (decl) = DECL_NAME (decl);\n+\t\t  }\n+\n+\t\trest_of_decl_compilation (decl, asmspec, \n+\t\t\t\t\t  /*top_level=*/0, /*at_end=*/0);\n+\t      }\n \n \t    resume_momentary (i);\n \t  }"}, {"sha": "b5b79c8cbc46d69921e2a1ec8e217e1042a7cfb8", "filename": "gcc/testsuite/g++.old-deja/g++.eh/tmpl6.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl6.C?ref=f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "patch": "@@ -0,0 +1,18 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+struct S\n+{\n+  int i;\n+};\n+\n+template <class T>\n+void f ()\n+{\n+  try {\n+  } catch (S& s) {\n+    s.i = 3;\n+  }\n+}\n+\n+template void f<int>();"}, {"sha": "e1bb50b3627cc3d7a0ac6604764d0ad7baa38262", "filename": "gcc/testsuite/g++.old-deja/g++.other/static9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic9.C?ref=f8191e640d0bfc3e92dbd47a3b086e3e88fffcd7", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link:\n+// Origin: Ulrich Drepper <drepper@cygnus.com>\n+\n+struct st\n+{\n+  int a, b, c, d;\n+};\n+\n+void g ()\n+{\n+  static const st i = { 0,1,2,3 };\n+}\n+\n+void h ()\n+{\n+  static const st i = { 0,1,2,3 };\n+}"}]}