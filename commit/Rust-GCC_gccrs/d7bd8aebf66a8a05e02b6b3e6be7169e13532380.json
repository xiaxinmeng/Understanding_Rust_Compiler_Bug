{"sha": "d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiZDhhZWJmNjZhOGEwNWUwMmI2YjNlNmJlNzE2OWUxMzUzMjM4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-12-06T13:25:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-12-06T13:25:37Z"}, "message": "re PR middle-end/20983 (varargs functions force va_list variable to stack unnecessarily)\n\n\tPR middle-end/20983\n\t* tree-ssa-ccp.c (optimize_stdarg_builtin): New function.\n\t(execute_fold_all_builtins): Call it for BUILT_IN_VA_START,\n\tBUILT_IN_VA_COPY and BUILT_IN_VA_END.\n\n\t* target.h (struct ggc_target): Add expand_builtin_va_start\n\thook.\n\t* target-def.h (TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t(TARGET_INITIALIZER): Add it.\n\t* builtins.c (expand_builtin_va_start): Use\n\ttargetm.expand_builtin_va_start hook instead of\n\tEXPAND_BUILTIN_VA_START macro.\n\t* alpha/alpha.c (alpha_va_start): Made static.\n\t(override_options): Clear targetm.expand_builtin_va_start if\n\tTARGET_UNICOSMK.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* alpha/unicosmk.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* alpha/alpha.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* alpha/alpha-protos.h (alpha_va_start): Remove prototype.\n\t* xtensa/xtensa.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* xtensa/xtensa.c (TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t(xtensa_va_start): Made static.\n\t* xtensa/xtensa-protos.h (xtensa_va_start): Remove prototype.\n\t* pa/pa-protos.h (hppa_va_start): Remove prototype.\n\t* pa/pa.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* pa/pa.c (hppa_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* frv/frv.c (frv_expand_builtin_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* frv/frv-protos.h (frv_expand_builtin_va_start): Remove prototype.\n\t* frv/frv.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* i386/i386.c (override_options): Clear\n\ttargetm.expand_builtin_va_start if -m32 or 64-bit MS ABI.\n\t(ix86_va_start): Made static.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* i386/i386.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* i386/i386-protos.h (ix86_va_start, ix86_va_arg): Remove prototypes.\n\t* iq2000/iq2000-protos.h (iq2000_va_start): Remove prototype.\n\t* iq2000/iq2000.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* iq2000/iq2000.c (iq2000_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* rs6000/rs6000-protos.h (rs6000_va_start): Remove prototype.\n\t* rs6000/rs6000.c (rs6000_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t(rs6000_override_options): Clear targetm.expand_builtin_va_start if\n\tDEFAULT_ABI != ABI_V4.\n\t* rs6000/rs6000.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* spu/spu.c (spu_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* spu/spu.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* spu/spu-protos.h spu_va_start): Remove prototype.\n\t* stormy16/stormy16.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* stormy16/stormy16-protos.h (xstormy16_expand_builtin_va_start):\n\tRemove prototype.\n\t* stormy16/stormy16.c (xstormy16_expand_builtin_va_start): Made\n\tstatic.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* s390/s390-protos.h (s390_va_start): Remove prototype.\n\t* s390/s390.c (s390_va_start): Made static.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* s390/s390.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* mn10300/mn10300.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* mn10300/mn10300-protos.h (mn10300_va_start): Remove prototype.\n\t* mn10300/mn10300.c (mn10300_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* arc/arc.c (arc_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* arc/arc.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* arc/arc-protos.h (arc_va_start): Remove prototype.\n\t* mt/mt-protos.h (mt_va_start): Remove prototype.\n\t* sparc/sparc.c (sparc_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* sparc/sparc-protos.h (sparc_va_start): Remove prototype.\n\t* sparc/sparc.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* sh/sh.c (sh_va_start): Made static, add prototype.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\t* sh/sh-protos.h (sh_va_start): Remove prototype.\n\t* sh/sh.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* mips/mips-protos.h (mips_va_start): Remove prototype.\n\t* mips/mips.h (EXPAND_BUILTIN_VA_START): Remove.\n\t* mips/mips.c (mips_va_start): Made static.\n\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n\nFrom-SVN: r130650", "tree": {"sha": "cef18ea9cceaa7495e72439b79c224d9d6d77889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cef18ea9cceaa7495e72439b79c224d9d6d77889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e9012fdc67829c5d302e2c1e9aaaf3058a8fc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9012fdc67829c5d302e2c1e9aaaf3058a8fc53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9012fdc67829c5d302e2c1e9aaaf3058a8fc53"}], "stats": {"total": 383, "additions": 254, "deletions": 129}, "files": [{"sha": "a38894e44e01e8a33c78ada70987c8ab2b3333b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1,3 +1,88 @@\n+2007-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/20983\n+\t* tree-ssa-ccp.c (optimize_stdarg_builtin): New function.\n+\t(execute_fold_all_builtins): Call it for BUILT_IN_VA_START,\n+\tBUILT_IN_VA_COPY and BUILT_IN_VA_END.\n+\n+\t* target.h (struct ggc_target): Add expand_builtin_va_start\n+\thook.\n+\t* target-def.h (TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t(TARGET_INITIALIZER): Add it.\n+\t* builtins.c (expand_builtin_va_start): Use\n+\ttargetm.expand_builtin_va_start hook instead of\n+\tEXPAND_BUILTIN_VA_START macro.\n+\t* alpha/alpha.c (alpha_va_start): Made static.\n+\t(override_options): Clear targetm.expand_builtin_va_start if\n+\tTARGET_UNICOSMK.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* alpha/unicosmk.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* alpha/alpha.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* alpha/alpha-protos.h (alpha_va_start): Remove prototype.\n+\t* xtensa/xtensa.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* xtensa/xtensa.c (TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t(xtensa_va_start): Made static.\n+\t* xtensa/xtensa-protos.h (xtensa_va_start): Remove prototype.\n+\t* pa/pa-protos.h (hppa_va_start): Remove prototype.\n+\t* pa/pa.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* pa/pa.c (hppa_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* frv/frv.c (frv_expand_builtin_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* frv/frv-protos.h (frv_expand_builtin_va_start): Remove prototype.\n+\t* frv/frv.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* i386/i386.c (override_options): Clear\n+\ttargetm.expand_builtin_va_start if -m32 or 64-bit MS ABI.\n+\t(ix86_va_start): Made static.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* i386/i386.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* i386/i386-protos.h (ix86_va_start, ix86_va_arg): Remove prototypes.\n+\t* iq2000/iq2000-protos.h (iq2000_va_start): Remove prototype.\n+\t* iq2000/iq2000.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* iq2000/iq2000.c (iq2000_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* rs6000/rs6000-protos.h (rs6000_va_start): Remove prototype.\n+\t* rs6000/rs6000.c (rs6000_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t(rs6000_override_options): Clear targetm.expand_builtin_va_start if\n+\tDEFAULT_ABI != ABI_V4.\n+\t* rs6000/rs6000.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* spu/spu.c (spu_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* spu/spu.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* spu/spu-protos.h spu_va_start): Remove prototype.\n+\t* stormy16/stormy16.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* stormy16/stormy16-protos.h (xstormy16_expand_builtin_va_start):\n+\tRemove prototype.\n+\t* stormy16/stormy16.c (xstormy16_expand_builtin_va_start): Made\n+\tstatic.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* s390/s390-protos.h (s390_va_start): Remove prototype.\n+\t* s390/s390.c (s390_va_start): Made static.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* s390/s390.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* mn10300/mn10300.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* mn10300/mn10300-protos.h (mn10300_va_start): Remove prototype.\n+\t* mn10300/mn10300.c (mn10300_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* arc/arc.c (arc_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* arc/arc.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* arc/arc-protos.h (arc_va_start): Remove prototype.\n+\t* mt/mt-protos.h (mt_va_start): Remove prototype.\n+\t* sparc/sparc.c (sparc_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* sparc/sparc-protos.h (sparc_va_start): Remove prototype.\n+\t* sparc/sparc.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* sh/sh.c (sh_va_start): Made static, add prototype.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\t* sh/sh-protos.h (sh_va_start): Remove prototype.\n+\t* sh/sh.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* mips/mips-protos.h (mips_va_start): Remove prototype.\n+\t* mips/mips.h (EXPAND_BUILTIN_VA_START): Remove.\n+\t* mips/mips.c (mips_va_start): Made static.\n+\t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n+\n 2007-12-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* tree-ssa-loop.c (gate_tree_parallelize_loops): Return true when"}, {"sha": "1c140508a5336ea5bb21d0e117af9d78636fb400", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -4716,11 +4716,10 @@ expand_builtin_va_start (tree exp)\n   nextarg = expand_builtin_next_arg ();\n   valist = stabilize_va_list (CALL_EXPR_ARG (exp, 0), 1);\n \n-#ifdef EXPAND_BUILTIN_VA_START\n-  EXPAND_BUILTIN_VA_START (valist, nextarg);\n-#else\n-  std_expand_builtin_va_start (valist, nextarg);\n-#endif\n+  if (targetm.expand_builtin_va_start)\n+    targetm.expand_builtin_va_start (valist, nextarg);\n+  else\n+    std_expand_builtin_va_start (valist, nextarg);\n \n   return const0_rtx;\n }"}, {"sha": "bbbcd8f4f1aa39141f83b40e46e66daffd966355", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -75,7 +75,6 @@ extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern void alpha_initialize_trampoline (rtx, rtx, rtx, int, int, int);\n \n-extern void alpha_va_start (tree, rtx);\n extern rtx alpha_va_arg (tree, tree);\n extern rtx function_arg (CUMULATIVE_ARGS, enum machine_mode, tree, int);\n extern rtx function_value (const_tree, const_tree, enum machine_mode);"}, {"sha": "800b354a71d24dc2401dfed8a699e58800f599c5", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -522,6 +522,11 @@ override_options (void)\n   if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n+\n+  /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)\n+     can be optimized to ap = __builtin_next_arg (0).  */\n+  if (TARGET_ABI_UNICOSMK)\n+    targetm.expand_builtin_va_start = NULL;\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n@@ -6069,7 +6074,7 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n #endif\n }\n \n-void\n+static void\n alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n {\n   HOST_WIDE_INT offset;\n@@ -10704,6 +10709,9 @@ alpha_init_libfuncs (void)\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST alpha_build_builtin_va_list\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START alpha_va_start\n+\n /* The Alpha architecture does not require sequential consistency.  See\n    http://www.cs.umd.edu/~pugh/java/memoryModel/AlphaReordering.html\n    for an example of how it can be violated in practice.  */"}, {"sha": "b0019bf22cf904f6ee8b881df02127ad7082f307", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1335,10 +1335,6 @@ do {\t\t\t\t\t\t\\\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n   print_operand_address((FILE), (ADDR))\n \f\n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  alpha_va_start (valist, nextarg)\n-\f\n /* Tell collect that the object format is ECOFF.  */\n #define OBJECT_FORMAT_COFF\n #define EXTENDED_COFF"}, {"sha": "d08fa73bc281c800086367e85d78854eeacd2bdb", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -435,6 +435,4 @@ do { fprintf (FILE, \"\\tbr $1,0\\n\");\t\t\t\\\n #undef LIB_SPEC\n #define LIB_SPEC \"-L/opt/ctl/craylibs/craylibs -lu -lm -lc -lsma\"\n \n-#undef EXPAND_BUILTIN_VA_START\n-\n #define EH_FRAME_IN_DATA_SECTION 1"}, {"sha": "c9fc51ad2ac5570b1c91c78a817bd41f58f8e5f6", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -17,8 +17,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-extern void arc_va_start (tree, rtx);\n-\n #ifdef RTX_CODE\n extern enum machine_mode arc_select_cc_mode (enum rtx_code, rtx, rtx);\n "}, {"sha": "5b2e7b804f4c77697f3fa0da2504bbc135e6b3b2", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -89,6 +89,7 @@ static void arc_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void arc_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arc_file_start (void);\n static void arc_internal_label (FILE *, const char *, unsigned long);\n+static void arc_va_start (tree, rtx);\n static void arc_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n static bool arc_rtx_costs (rtx, int, int, int *);\n@@ -144,6 +145,9 @@ static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arc_setup_incoming_varargs\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START arc_va_start\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -2274,7 +2278,7 @@ arc_ccfsm_record_branch_deleted (void)\n   current_insn_set_cc_p = last_insn_set_cc_p;\n }\n \f\n-void\n+static void\n arc_va_start (tree valist, rtx nextarg)\n {\n   /* See arc_setup_incoming_varargs for reasons for this oddity.  */"}, {"sha": "17412fc18d8c145043221042e164d0b4fc03c8f9", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1086,8 +1086,3 @@ enum arc_function_type {\n #define ARC_INTERRUPT_P(TYPE) \\\n ((TYPE) == ARC_FUNCTION_ILINK1 || (TYPE) == ARC_FUNCTION_ILINK2)\n /* Compute the type of a function from its DECL.  */\n-\n-\f\n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  arc_va_start (valist, nextarg)"}, {"sha": "dd41fc27767addd1c89c14cd1347e8f0b71db822", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -64,8 +64,6 @@ extern rtx frv_function_arg\t\t\t(CUMULATIVE_ARGS *,\n extern void frv_function_arg_advance\t\t(CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, int);\n-\n-extern void frv_expand_builtin_va_start\t\t(tree, rtx);\n #endif /* TREE_CODE */\n \n extern int frv_expand_block_move\t\t(rtx *);"}, {"sha": "150e25d568b6d727a1375003dabf271937249b8c", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -365,6 +365,7 @@ static void frv_setup_incoming_varargs\t\t(CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, int *, int);\n static rtx frv_expand_builtin_saveregs\t\t(void);\n+static void frv_expand_builtin_va_start\t\t(tree, rtx);\n static bool frv_rtx_costs\t\t\t(rtx, int, int, int*);\n static void frv_asm_out_constructor\t\t(rtx, int);\n static void frv_asm_out_destructor\t\t(rtx, int);\n@@ -453,6 +454,9 @@ static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG frv_reorg\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START frv_expand_builtin_va_start\n+\n #if HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL frv_output_dwarf_dtprel\n@@ -2186,7 +2190,7 @@ frv_expand_builtin_saveregs (void)\n \f\n /* Expand __builtin_va_start to do the va_start macro.  */\n \n-void\n+static void\n frv_expand_builtin_va_start (tree valist, rtx nextarg)\n {\n   tree t;"}, {"sha": "feb88d56946fd69640e5a4a47e735a7c482dd83d", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1847,19 +1847,6 @@ typedef struct frv_stack {\n \n #define FUNCTION_PROFILER(FILE, LABELNO)\n \n-\f\n-/* Implementing the Varargs Macros.  */\n-\n-/* Implement the stdarg/varargs va_start macro.  STDARG_P is nonzero if this\n-   is stdarg.h instead of varargs.h.  VALIST is the tree of the va_list\n-   variable to initialize.  NEXTARG is the machine independent notion of the\n-   'next' argument after the variable arguments.  If not defined, a standard\n-   implementation will be defined that works for arguments passed on the stack.  */\n-\n-#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG)\t\t\\\n-  (frv_expand_builtin_va_start(VALIST, NEXTARG))\n-\n-\f\n /* Trampolines for Nested Functions.  */\n \n /* A C expression for the size in bytes of the trampoline, as an integer.  */"}, {"sha": "8dd203ebee60a4f366830f6ebfdc572f4448fc44", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -137,8 +137,6 @@ extern bool ix86_function_arg_regno_p (int);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n extern int ix86_return_in_memory (const_tree);\n extern int ix86_sol10_return_in_memory (const_tree);\n-extern void ix86_va_start (tree, rtx);\n-extern rtx ix86_va_arg (tree, tree);\n \n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);"}, {"sha": "095ba1727d7b9befdab02195742479d1de8a36dd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -2689,6 +2689,11 @@ override_options (void)\n     set_param_value (\"l1-cache-size\", ix86_cost->l1_cache_size);\n   if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n     set_param_value (\"l2-cache-size\", ix86_cost->l2_cache_size);\n+\n+  /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)\n+     can be optimized to ap = __builtin_next_arg (0).  */\n+  if (!TARGET_64BIT || TARGET_64BIT_MS_ABI)\n+    targetm.expand_builtin_va_start = NULL;\n }\n \f\n /* Return true if this goes in large data/bss.  */\n@@ -5041,7 +5046,7 @@ ix86_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n /* Implement va_start.  */\n \n-void\n+static void\n ix86_va_start (tree valist, rtx nextarg)\n {\n   HOST_WIDE_INT words, n_gpr, n_fpr;\n@@ -25253,6 +25258,9 @@ x86_builtin_vectorization_cost (bool runtime_test)\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST ix86_build_builtin_va_list\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START ix86_va_start\n+\n #undef TARGET_MD_ASM_CLOBBERS\n #define TARGET_MD_ASM_CLOBBERS ix86_md_asm_clobbers\n "}, {"sha": "6e0b96a0b65bab8febd4ad281e4696e4c5d4f42b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1710,10 +1710,6 @@ typedef struct ix86_args {\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n \n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n-  ix86_va_start (VALIST, NEXTARG)\n-\n #define TARGET_ASM_FILE_END ix86_file_end\n #define NEED_INDICATE_EXEC_STACK 0\n "}, {"sha": "094bcbf2f12000df1ea37d3fa2a608a5b83be8b9", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -48,7 +48,6 @@ extern void             gen_conditional_branch (rtx *, enum rtx_code);\n extern void             init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\n extern void             function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern struct rtx_def * function_arg (CUMULATIVE_ARGS *, enum machine_mode, const_tree, int);\n-extern void             iq2000_va_start (tree, rtx);\n extern rtx              iq2000_function_value (const_tree, const_tree);\n #endif\n "}, {"sha": "7a31b4782bbfbdeca194dfcdb4cf2ef64e5e5112", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -168,6 +168,7 @@ static bool iq2000_pass_by_reference  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, bool);\n+static void iq2000_va_start\t      (tree, rtx);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -210,6 +211,9 @@ static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n #undef  TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING\thook_bool_CUMULATIVE_ARGS_true\n \n+#undef\tTARGET_EXPAND_BUILTIN_VA_START\n+#define\tTARGET_EXPAND_BUILTIN_VA_START\tiq2000_va_start\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return nonzero if we split the address into high and low parts.  */\n@@ -1357,7 +1361,7 @@ iq2000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \f\n /* Implement va_start.  */\n \n-void\n+static void\n iq2000_va_start (tree valist, rtx nextarg)\n {\n   int int_arg_words;"}, {"sha": "f7beb540bedaf49209f9db869d765926bde8f7af", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -475,12 +475,6 @@ typedef struct iq2000_args\n   fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n }\n \n-\f\n-/* Implementing the Varargs Macros.  */\n-\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  iq2000_va_start (valist, nextarg)\n-\n \f\n /* Trampolines for Nested Functions.  */\n "}, {"sha": "064d56849085c46c0f3a1d1f9ca23d15c1d1dce4", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -223,7 +223,6 @@ extern rtx mips_function_arg (const CUMULATIVE_ARGS *,\n extern int mips_function_arg_boundary (enum machine_mode, tree);\n extern bool mips_pad_arg_upward (enum machine_mode, const_tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n-extern void mips_va_start (tree, rtx);\n \n extern bool mips_expand_ext_as_unaligned_load (rtx, rtx, HOST_WIDE_INT,\n \t\t\t\t\t       HOST_WIDE_INT);"}, {"sha": "42e15a0320cf53e8e9215918191aa2bc70396db3", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -4735,9 +4735,9 @@ mips_build_builtin_va_list (void)\n     return ptr_type_node;\n }\n \n-/* Implement EXPAND_BUILTIN_VA_START.  */\n+/* Implement TARGET_EXPAND_BUILTIN_VA_START.  */\n \n-void\n+static void\n mips_va_start (tree valist, rtx nextarg)\n {\n   if (EABI_FLOAT_VARARGS_P)\n@@ -12445,6 +12445,8 @@ mips_order_regs_for_local_alloc (void)\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST mips_build_builtin_va_list\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START mips_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR mips_gimplify_va_arg_expr\n "}, {"sha": "c3713e018b9585fa69961ebc9a0ac6bc085f8996", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -2097,9 +2097,6 @@ typedef struct mips_args {\n #define MIPS_STACK_ALIGN(LOC) \\\n   (TARGET_NEWABI ? ((LOC) + 15) & -16 : ((LOC) + 7) & -8)\n \n-\f\n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START mips_va_start\n \f\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */"}, {"sha": "d8fe2bd50a11a0eae52abaf4a22e3e8dda5e3e06", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -20,10 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifdef RTX_CODE\n \n-#ifdef TREE_CODE\n-extern void mn10300_va_start (tree, rtx);\n-#endif /* TREE_CODE */\n-\n extern void mn10300_override_options (void);\n extern struct rtx_def *legitimize_address (rtx, rtx, enum machine_mode);\n extern rtx legitimize_pic_address (rtx, rtx);"}, {"sha": "9fde69986e75b487d7392be6314058a4d04fd568", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -74,6 +74,7 @@ static bool mn10300_rtx_costs (rtx, int, int, int *);\n static void mn10300_file_start (void);\n static bool mn10300_return_in_memory (const_tree, const_tree);\n static rtx mn10300_builtin_saveregs (void);\n+static void mn10300_va_start (tree, rtx);\n static bool mn10300_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -114,6 +115,8 @@ static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS mn10300_builtin_saveregs\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START mn10300_va_start\n \n static void mn10300_encode_section_info (tree, rtx, int);\n struct gcc_target targetm = TARGET_INITIALIZER;\n@@ -1471,7 +1474,7 @@ mn10300_builtin_saveregs (void)\n \t\t\t\t    offset, 0, 0, OPTAB_LIB_WIDEN));\n }\n \n-void\n+static void\n mn10300_va_start (tree valist, rtx nextarg)\n {\n   nextarg = expand_builtin_saveregs ();"}, {"sha": "824227546f0bc4b6825bfb7a035d57ed010a8984", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -624,10 +624,6 @@ struct cum_arg {int nbytes; };\n   ((COUNT == 0)                         \\\n    ? gen_rtx_MEM (Pmode, arg_pointer_rtx) \\\n    : (rtx) 0)\n-\n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  mn10300_va_start (valist, nextarg)\n \f\n /* 1 if X is an rtx for a constant that is a valid address.  */\n "}, {"sha": "99717dc5eff0a3e82b62cdc8724e7c36dd15409d", "filename": "gcc/config/mt/mt-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmt%2Fmt-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fmt%2Fmt-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -58,7 +58,6 @@ extern void\t    mt_final_prescan_insn (rtx, rtx *, int);\n #ifdef RTX_CODE\n extern void         mt_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n extern rtx          mt_function_arg\t (const CUMULATIVE_ARGS *, enum machine_mode, tree, int, int);\n-extern void\t    mt_va_start\t (tree, rtx);\n extern enum reg_class mt_secondary_reload_class (enum reg_class, enum machine_mode, rtx);\n extern rtx\t    mt_function_value\t (const_tree, enum machine_mode, const_tree);\n #endif"}, {"sha": "ff621a30733211f6642aceef3bc692c07246e897", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -29,9 +29,6 @@ extern int following_call (rtx);\n extern int function_label_operand (rtx, enum machine_mode);\n extern int lhs_lshift_cint_operand (rtx, enum machine_mode);\n \n-#ifdef TREE_CODE\n-extern void hppa_va_start (tree, rtx);\n-#endif /* TREE_CODE */\n extern rtx hppa_legitimize_address (rtx, rtx, enum machine_mode);\n \n /* Define functions in pa.c and used in insn-output.c.  */"}, {"sha": "58122f62118d4228744837a1b975b5dcd6c1c78c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -124,6 +124,7 @@ static void pa_asm_out_destructor (rtx, int);\n #endif\n static void pa_init_builtins (void);\n static rtx hppa_builtin_saveregs (void);\n+static void hppa_va_start (tree, rtx);\n static tree hppa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool pa_scalar_mode_supported_p (enum machine_mode);\n static bool pa_commutative_p (const_rtx x, int outer_code);\n@@ -304,6 +305,8 @@ static size_t n_deferred_plabels = 0;\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS hppa_builtin_saveregs\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START hppa_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR hppa_gimplify_va_arg_expr\n \n@@ -5913,7 +5916,7 @@ hppa_builtin_saveregs (void)\n \t\t\t\t    offset, 0, 0, OPTAB_LIB_WIDEN));\n }\n \n-void\n+static void\n hppa_va_start (tree valist, rtx nextarg)\n {\n   nextarg = expand_builtin_saveregs ();"}, {"sha": "8a7fb63eaca1b66a03986c28a1f324770b53f71d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -976,11 +976,6 @@ extern int may_call_alloca;\n    \n #define TRAMPOLINE_ADJUST_ADDRESS(ADDR) \\\n   if (!TARGET_64BIT) (ADDR) = memory_address (Pmode, plus_constant ((ADDR), 46))\n-\n-/* Implement `va_start' for varargs and stdarg.  */\n-\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  hppa_va_start (valist, nextarg)\n \f\n /* Addressing modes, and classification of registers for them. \n "}, {"sha": "4c031e7de63dda4fe2c2ca57ae0c23e66db6515b", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -28,7 +28,6 @@\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, int, int, int);\n-extern void rs6000_va_start (tree, rtx);\n #endif /* TREE_CODE */\n \n extern bool easy_altivec_constant (rtx, enum machine_mode);"}, {"sha": "a2baf46107f52f044213cd97f725b06fcbaa2356", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -899,6 +899,7 @@ static void rs6000_darwin_file_start (void);\n #endif\n \n static tree rs6000_build_builtin_va_list (void);\n+static void rs6000_va_start (tree, rtx);\n static tree rs6000_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool rs6000_must_pass_in_stack (enum machine_mode, const_tree);\n static bool rs6000_scalar_mode_supported_p (enum machine_mode);\n@@ -1159,6 +1160,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST rs6000_build_builtin_va_list\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START rs6000_va_start\n+\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR rs6000_gimplify_va_arg\n \n@@ -1842,6 +1846,11 @@ rs6000_override_options (const char *default_cpu)\n     set_param_value (\"l1-cache-line-size\", rs6000_cost->cache_line_size);\n   if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n     set_param_value (\"l2-cache-size\", rs6000_cost->l2_cache_size);\n+\n+  /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)\n+     can be optimized to ap = __builtin_next_arg (0).  */\n+  if (DEFAULT_ABI != ABI_V4)\n+    targetm.expand_builtin_va_start = NULL;\n }\n \n /* Implement targetm.vectorize.builtin_mask_for_load.  */\n@@ -6495,7 +6504,7 @@ rs6000_build_builtin_va_list (void)\n \n /* Implement va_start.  */\n \n-void\n+static void\n rs6000_va_start (tree valist, rtx nextarg)\n {\n   HOST_WIDE_INT words, n_gpr, n_fpr;"}, {"sha": "3693f53cc54d9af87bc70a71697671c2ec4560f7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1498,10 +1498,6 @@ typedef struct rs6000_args\n #define FUNCTION_ARG_BOUNDARY(MODE, TYPE) \\\n   function_arg_boundary (MODE, TYPE)\n \n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  rs6000_va_start (valist, nextarg)\n-\n #define PAD_VARARGS_DOWN \\\n    (FUNCTION_ARG_PADDING (TYPE_MODE (type), type) == downward)\n "}, {"sha": "7e329f2a5656a31d965ced7daafb00e0bd3498b0", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -122,6 +122,5 @@ extern void s390_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n #ifdef RTX_CODE\n extern rtx s390_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern rtx s390_function_value (const_tree, enum machine_mode);\n-extern void s390_va_start (tree, rtx);\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */"}, {"sha": "f7d80dbc01c231e4e8483273548d0e613881164c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -7978,7 +7978,7 @@ s390_build_builtin_va_list (void)\n        holds the offset of the first anonymous stack argument\n        (relative to the virtual arg pointer).  */\n \n-void\n+static void\n s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n {\n   HOST_WIDE_INT n_gpr, n_fpr;\n@@ -9331,6 +9331,8 @@ s390_reorg (void)\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST s390_build_builtin_va_list\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START s390_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR s390_gimplify_va_arg\n "}, {"sha": "35cc9477b8c394d35d25c8f032e348bcbcd853f7", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -661,11 +661,6 @@ CUMULATIVE_ARGS;\n #define PROFILE_BEFORE_PROLOGUE 1\n \n \n-/* Implementing the varargs macros.  */\n-\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  s390_va_start (valist, nextarg)\n-\n /* Trampolines for nested functions.  */\n \n #define TRAMPOLINE_SIZE (TARGET_64BIT ? 32 : 16)"}, {"sha": "25d9ce4339215d68c74a5cf835f3a0e96037ff03", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -120,9 +120,6 @@ extern void sh_expand_binop_v2sf (enum rtx_code, rtx, rtx, rtx);\n extern int sh_expand_t_scc (enum rtx_code code, rtx target);\n extern rtx sh_gen_truncate (enum machine_mode, rtx, int);\n extern bool sh_vector_mode_supported_p (enum machine_mode);\n-#ifdef TREE_CODE\n-extern void sh_va_start (tree, rtx);\n-#endif /* TREE_CODE */\n #endif /* RTX_CODE */\n \n extern const char *output_jump_label_table (void);"}, {"sha": "4088ef73cdfb775ab93c80de1007e3d52ceb470f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -248,6 +248,7 @@ static void sh_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tre\n static bool sh_strict_argument_naming (CUMULATIVE_ARGS *);\n static bool sh_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n static tree sh_build_builtin_va_list (void);\n+static void sh_va_start (tree, rtx);\n static tree sh_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool sh_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  const_tree, bool);\n@@ -425,6 +426,8 @@ static int sh_dwarf_calling_convention (const_tree);\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST sh_build_builtin_va_list\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START sh_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR sh_gimplify_va_arg_expr\n \n@@ -7035,7 +7038,7 @@ sh_build_builtin_va_list (void)\n \n /* Implement `va_start' for varargs and stdarg.  */\n \n-void\n+static void\n sh_va_start (tree valist, rtx nextarg)\n {\n   tree f_next_o, f_next_o_limit, f_next_fp, f_next_fp_limit, f_next_stack;"}, {"sha": "844ea23c633f987b84155c5b46f00c481707700b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -2076,10 +2076,6 @@ struct sh_args {\n /* Perform any needed actions needed for a function that is receiving a\n    variable number of arguments.  */\n \n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  sh_va_start (valist, nextarg)\n-\n /* Call the function profiler with a given profile label.\n    We use two .aligns, so as to make sure that both the .long is aligned\n    on a 4 byte boundary, and that the .long is a fixed distance (2 bytes)"}, {"sha": "7c56925c01d05b626b3652dd85972040fa72bdf3", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -31,7 +31,6 @@ extern struct rtx_def *function_arg (const CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, int, int);\n #ifdef RTX_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n-extern void sparc_va_start (tree, rtx);\n #endif\n extern unsigned long sparc_type_code (tree);\n #ifdef ARGS_SIZE_RTX"}, {"sha": "c54dbb325ac562cc064793f3f43783375f343144", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -409,6 +409,7 @@ static bool sparc_promote_prototypes (const_tree);\n static rtx sparc_struct_value_rtx (tree, int);\n static bool sparc_return_in_memory (const_tree, const_tree);\n static bool sparc_strict_argument_naming (CUMULATIVE_ARGS *);\n+static void sparc_va_start (tree, rtx);\n static tree sparc_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool sparc_vector_mode_supported_p (enum machine_mode);\n static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n@@ -545,6 +546,8 @@ static bool fpu_option_set = false;\n #undef TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING sparc_strict_argument_naming\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START sparc_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR sparc_gimplify_va_arg\n \n@@ -5696,7 +5699,7 @@ sparc_builtin_saveregs (void)\n \n /* Implement `va_start' for stdarg.  */\n \n-void\n+static void\n sparc_va_start (tree valist, rtx nextarg)\n {\n   nextarg = expand_builtin_saveregs ();"}, {"sha": "53983d46421e11b81f0a6776f7183c607f5df79b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1700,10 +1700,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n       sparc_initialize_trampoline (TRAMP, FNADDR, CXT)\n \f\n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  sparc_va_start (valist, nextarg)\n-\n /* Generate RTL to flush the register windows so as to make arbitrary frames\n    available.  */\n #define SETUP_FRAME_ADDRESSES()\t\t\\"}, {"sha": "e2c339bf1c5bffdb4b98d4ec3635f044c565e69d", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -61,7 +61,6 @@ extern int spu_initial_elimination_offset (int from, int to);\n extern rtx spu_function_value (const_tree type, const_tree func);\n extern rtx spu_function_arg (int cum, enum machine_mode mode, tree type,\n \t\t\t     int named);\n-extern void spu_va_start (tree valist, rtx nextarg);\n extern void spu_setup_incoming_varargs (int *cum, enum machine_mode mode,\n \t\t\t\t\ttree type, int *pretend_size,\n \t\t\t\t\tint no_rtl);"}, {"sha": "4592e667f08b1b2dd5e218a56bdfa6f371228232", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -117,6 +117,7 @@ static int spu_naked_function_p (tree func);\n static unsigned char spu_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t\t\t    const_tree type, unsigned char named);\n static tree spu_build_builtin_va_list (void);\n+static void spu_va_start (tree, rtx);\n static tree spu_gimplify_va_arg_expr (tree valist, tree type, tree * pre_p,\n \t\t\t\t      tree * post_p);\n static int regno_aligned_for_load (int regno);\n@@ -247,6 +248,9 @@ const struct attribute_spec spu_attribute_table[];\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST spu_build_builtin_va_list\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START spu_va_start\n+\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS spu_setup_incoming_varargs\n \n@@ -3214,7 +3218,7 @@ spu_build_builtin_va_list (void)\n        holds the offset of the first anonymous stack argument\n        (relative to the virtual arg pointer).  */\n \n-void\n+static void\n spu_va_start (tree valist, rtx nextarg)\n {\n   tree f_args, f_skip;"}, {"sha": "3d038cab46e4726d180b9a3c7a14bceaec16b2a7", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -380,11 +380,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n #define PAD_VARARGS_DOWN 0\n \n #define FUNCTION_ARG_REGNO_P(N) ((N) >= (FIRST_ARG_REGNUM) && (N) <= (LAST_ARG_REGNUM))\n-\n-/* Undocumented */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  spu_va_start (valist, nextarg)\n-\n \f\n /* Scalar Return */\n "}, {"sha": "1110720223e399e9c2d3c5f228881c531eb8fce2", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -42,7 +42,6 @@ extern rtx xstormy16_function_arg\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)\n-extern void xstormy16_expand_builtin_va_start (tree, rtx);\n extern void xstormy16_initialize_trampoline (rtx, rtx, rtx);\n extern rtx xstormy16_function_value (const_tree, const_tree);\n #endif"}, {"sha": "2f738e5a0bb9f98394e98f93be5e1d61662cfb39", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -1352,7 +1352,7 @@ xstormy16_build_builtin_va_list (void)\n    is stdarg.h instead of varargs.h.  VALIST is the tree of the va_list\n    variable to initialize.  NEXTARG is the machine independent notion of the\n    'next' argument after the variable arguments.  */\n-void\n+static void\n xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n {\n   tree f_base, f_count;\n@@ -2666,6 +2666,8 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST xstormy16_build_builtin_va_list\n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START xstormy16_expand_builtin_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR xstormy16_expand_builtin_va_arg\n "}, {"sha": "a75a776192c1225ce698efb1931b845746428082", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -461,16 +461,6 @@ enum reg_class\n    contains a '%s' sequence, this will be replaced by the name of the function.  */\n /* #define TARGET_CANNOT_INLINE_P(FN_DECL) xstormy16_cannot_inline_p (FN_DECL) */\n \f\n-/* Implementing the Varargs Macros.  */\n-\n-/* Implement the stdarg/varargs va_start macro.  STDARG_P is nonzero if this\n-   is stdarg.h instead of varargs.h.  VALIST is the tree of the va_list\n-   variable to initialize.  NEXTARG is the machine independent notion of the\n-   'next' argument after the variable arguments.  If not defined, a standard\n-   implementation will be defined that works for arguments passed on the stack.  */\n-#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n-  xstormy16_expand_builtin_va_start (VALIST, NEXTARG)\n-\f\n /* Trampolines for Nested Functions.  */\n \n #define TRAMPOLINE_SIZE 8"}, {"sha": "5ea777ca232856db96cb97c2844d1f83dd34e278", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -58,7 +58,6 @@ extern rtx xtensa_legitimize_address (rtx, rtx, enum machine_mode);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, int);\n-extern void xtensa_va_start (tree, rtx);\n #endif /* TREE_CODE */\n \n extern void print_operand (FILE *, rtx, int);"}, {"sha": "c9d9b908429803e827e980f5574a0c4b551466bd", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -179,6 +179,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST xtensa_build_builtin_va_list\n \n+#undef TARGET_EXPAND_BUILTIN_VA_START\n+#define TARGET_EXPAND_BUILTIN_VA_START xtensa_va_start\n+\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n@@ -2478,7 +2481,7 @@ xtensa_builtin_saveregs (void)\n /* Implement `va_start' for varargs and stdarg.  We look at the\n    current function to fill in an initial va_list.  */\n \n-void\n+static void\n xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n {\n   tree f_stk, stk;"}, {"sha": "e2b94e102b262ee0555d7e3de37fe7403e1a96ff", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -782,10 +782,6 @@ typedef struct xtensa_args\n \t\t       0, VOIDmode, 1, addr, Pmode);\t\t\t\\\n   } while (0)\n \n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n-  xtensa_va_start (valist, nextarg)\n-\n /* If defined, a C expression that produces the machine-specific code\n    to setup the stack so that arbitrary frames can be accessed.\n "}, {"sha": "e15b5d9cc092057c0fd415d5a5746d01e303f918", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -517,6 +517,7 @@\n #define TARGET_MACHINE_DEPENDENT_REORG 0\n \n #define TARGET_BUILD_BUILTIN_VA_LIST std_build_builtin_va_list\n+#define TARGET_EXPAND_BUILTIN_VA_START 0\n \n #define TARGET_GET_PCH_VALIDITY default_get_pch_validity\n #define TARGET_PCH_VALID_P default_pch_valid_p\n@@ -750,6 +751,7 @@\n   TARGET_CC_MODES_COMPATIBLE,\t\t\t\\\n   TARGET_MACHINE_DEPENDENT_REORG,\t\t\\\n   TARGET_BUILD_BUILTIN_VA_LIST,\t\t\t\\\n+  TARGET_EXPAND_BUILTIN_VA_START,\t\t\\\n   TARGET_GIMPLIFY_VA_ARG_EXPR,\t\t\t\\\n   TARGET_GET_PCH_VALIDITY,\t\t\t\\\n   TARGET_PCH_VALID_P,\t\t\t\t\\"}, {"sha": "12b01da362c5a7ed717bc7f5bc806fe0d0e3cd86", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -694,6 +694,9 @@ struct gcc_target\n   /* Create the __builtin_va_list type.  */\n   tree (* build_builtin_va_list) (void);\n \n+  /* Expand the __builtin_va_start builtin.  */\n+  void (* expand_builtin_va_start) (tree valist, rtx nextarg);\n+\n   /* Gimplifies a VA_ARG_EXPR.  */\n   tree (* gimplify_va_arg_expr) (tree valist, tree type, tree *pre_p,\n \t\t\t\t tree *post_p);"}, {"sha": "15f14c4c6085acd1fd3d3be189d111ddc47f0a99", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7bd8aebf66a8a05e02b6b3e6be7169e13532380/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d7bd8aebf66a8a05e02b6b3e6be7169e13532380", "patch": "@@ -2708,6 +2708,78 @@ optimize_stack_restore (basic_block bb, tree call, block_stmt_iterator i)\n   return integer_zero_node;\n }\n \f\n+/* If va_list type is a simple pointer and nothing special is needed,\n+   optimize __builtin_va_start (&ap, 0) into ap = __builtin_next_arg (0),\n+   __builtin_va_end (&ap) out as NOP and __builtin_va_copy into a simple\n+   pointer assignment.  */\n+\n+static tree\n+optimize_stdarg_builtin (tree call)\n+{\n+  tree callee, lhs, rhs;\n+  bool va_list_simple_ptr;\n+\n+  if (TREE_CODE (call) != CALL_EXPR)\n+    return NULL_TREE;\n+\n+  va_list_simple_ptr = POINTER_TYPE_P (va_list_type_node)\n+\t\t       && (TREE_TYPE (va_list_type_node) == void_type_node\n+\t\t\t   || TREE_TYPE (va_list_type_node) == char_type_node);\n+\n+  callee = get_callee_fndecl (call);\n+  switch (DECL_FUNCTION_CODE (callee))\n+    {\n+    case BUILT_IN_VA_START:\n+      if (!va_list_simple_ptr\n+\t  || targetm.expand_builtin_va_start != NULL\n+\t  || built_in_decls[BUILT_IN_NEXT_ARG] == NULL)\n+\treturn NULL_TREE;\n+\n+      if (call_expr_nargs (call) != 2)\n+\treturn NULL_TREE;\n+\n+      lhs = CALL_EXPR_ARG (call, 0);\n+      if (!POINTER_TYPE_P (TREE_TYPE (lhs))\n+\t  || TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (lhs)))\n+\t     != TYPE_MAIN_VARIANT (va_list_type_node))\n+\treturn NULL_TREE;\n+\n+      lhs = build_fold_indirect_ref (lhs);\n+      rhs = build_call_expr (built_in_decls[BUILT_IN_NEXT_ARG],\n+\t\t\t     1, integer_zero_node);\n+      rhs = fold_convert (TREE_TYPE (lhs), rhs);\n+      return build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, rhs);\n+\n+    case BUILT_IN_VA_COPY:\n+      if (!va_list_simple_ptr)\n+\treturn NULL_TREE;\n+\n+      if (call_expr_nargs (call) != 2)\n+\treturn NULL_TREE;\n+\n+      lhs = CALL_EXPR_ARG (call, 0);\n+      if (!POINTER_TYPE_P (TREE_TYPE (lhs))\n+\t  || TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (lhs)))\n+\t     != TYPE_MAIN_VARIANT (va_list_type_node))\n+\treturn NULL_TREE;\n+\n+      lhs = build_fold_indirect_ref (lhs);\n+      rhs = CALL_EXPR_ARG (call, 1);\n+      if (TYPE_MAIN_VARIANT (TREE_TYPE (rhs))\n+\t  != TYPE_MAIN_VARIANT (va_list_type_node))\n+\treturn NULL_TREE;\n+\n+      rhs = fold_convert (TREE_TYPE (lhs), rhs);\n+      return build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, rhs);\n+\n+    case BUILT_IN_VA_END:\n+      return integer_zero_node;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\f\n /* Convert EXPR into a GIMPLE value suitable for substitution on the\n    RHS of an assignment.  Insert the necessary statements before\n    iterator *SI_P. \n@@ -2794,6 +2866,16 @@ execute_fold_all_builtins (void)\n \n \t      case BUILT_IN_STACK_RESTORE:\n \t\tresult = optimize_stack_restore (bb, *stmtp, i);\n+\t\tif (result)\n+\t\t  break;\n+\t\tbsi_next (&i);\n+\t\tcontinue;\n+\n+\t      case BUILT_IN_VA_START:\n+\t      case BUILT_IN_VA_END:\n+\t      case BUILT_IN_VA_COPY:\n+\t\t/* These shouldn't be folded before pass_stdarg.  */\n+\t\tresult = optimize_stdarg_builtin (*stmtp);\n \t\tif (result)\n \t\t  break;\n \t\t/* FALLTHRU */"}]}