{"sha": "cf78d8411d00e21c30512d2af895e70d38bbfb77", "node_id": "C_kwDOANBUbNoAKGNmNzhkODQxMWQwMGUyMWMzMDUxMmQyYWY4OTVlNzBkMzhiYmZiNzc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-01T15:54:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-01T15:54:39Z"}, "message": "match.pd: Optimize __builtin_mul_overflow_p (x, cst, (utype)0) to x > ~(utype)0 / cst [PR30314]\n\nA comparison with a constant is most likely always faster than\n.MUL_OVERFLOW from which we only check whether it overflowed and not the\nmultiplication result, and even if not, it is simpler operation on GIMPLE\nand even if a target exists where such multiplications with overflow checking\nare cheaper than comparisons, because comparisons are so much more common\nthan overflow checking multiplications, it would be nice if it simply\narranged for comparisons to be emitted like those multiplications on its\nown...\n\n2022-06-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/30314\n\t* match.pd (__builtin_mul_overflow_p (x, cst, (utype) 0) ->\n\tx > ~(utype)0 / cst): New simplification.\n\n\t* gcc.dg/tree-ssa/pr30314.c: New test.", "tree": {"sha": "6a8c7ebc06b7c517e35832a011c36748c16bdfe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a8c7ebc06b7c517e35832a011c36748c16bdfe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf78d8411d00e21c30512d2af895e70d38bbfb77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf78d8411d00e21c30512d2af895e70d38bbfb77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf78d8411d00e21c30512d2af895e70d38bbfb77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf78d8411d00e21c30512d2af895e70d38bbfb77/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289f860fe62423a66e43989688e1d24bcdb25b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289f860fe62423a66e43989688e1d24bcdb25b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289f860fe62423a66e43989688e1d24bcdb25b5e"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "2d3ffc4482e767311f99700386f6ed233ba15762", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf78d8411d00e21c30512d2af895e70d38bbfb77/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf78d8411d00e21c30512d2af895e70d38bbfb77/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=cf78d8411d00e21c30512d2af895e70d38bbfb77", "patch": "@@ -5969,6 +5969,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && (!TYPE_UNSIGNED (TREE_TYPE (@2)) || TYPE_UNSIGNED (TREE_TYPE (@0))))\n    (ovf @1 @0))))\n \n+/* Optimize __builtin_mul_overflow_p (x, cst, (utype) 0) if all 3 types\n+   are unsigned to x > (umax / cst).  */\n+(simplify\n+ (imagpart (IFN_MUL_OVERFLOW:cs@2 @0 integer_nonzerop@1))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && TYPE_MAX_VALUE (TREE_TYPE (@0))\n+       && types_match (TREE_TYPE (@0), TREE_TYPE (TREE_TYPE (@2)))\n+       && int_fits_type_p (@1, TREE_TYPE (@0)))\n+   (convert (gt @0 (trunc_div! { TYPE_MAX_VALUE (TREE_TYPE (@0)); } @1)))))\n+\n /* Simplification of math builtins.  These rules must all be optimizations\n    as well as IL simplifications.  If there is a possibility that the new\n    form could be a pessimization, the rule should go in the canonicalization"}, {"sha": "91388afde22fbddd553a14e0b66fc94092a85514", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr30314.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf78d8411d00e21c30512d2af895e70d38bbfb77/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf78d8411d00e21c30512d2af895e70d38bbfb77/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30314.c?ref=cf78d8411d00e21c30512d2af895e70d38bbfb77", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/30314 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"\\.MUL_OVERFLOW \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" > 122713351\" \"optimized\" { target int32 } } } */\n+/* { dg-final { scan-tree-dump \" > 527049830677415760\" \"optimized\" { target lp64 } } } */\n+\n+int\n+foo (unsigned int x)\n+{\n+  return __builtin_mul_overflow_p (x, 35U, 0U);\n+}\n+\n+int\n+bar (unsigned long int x)\n+{\n+  return __builtin_mul_overflow_p (x, 35UL, 0UL);\n+}"}]}