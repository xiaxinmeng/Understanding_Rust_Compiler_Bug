{"sha": "e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1MjUxMTFjOWEzZmFiZTIyNDRiNTdlN2E2MjU3YjcwOGI4ZjlmNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-02T16:53:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-02-02T16:53:17Z"}, "message": "re PR c++/13113 (Nice warning about &(X::m) lost)\n\n\tPR c++/13113\n\t* init.c (build_offset_ref): Improve error recovery for invalid\n\tuses of non-static member functions.\n\n\tPR c++/13854\n\t* cp-tree.h (cp_build_type_attribute_variant): New function.\n\t* class.c (build_clone): Use cp_build_type_attribute_variant.\n\t* decl.c (duplicate_decls): Likewise.\n\t* pt.c (copy_default_args_to_explicit_spec): Likewise.\n\t(tsubst_function_type): Likewise.\n\t* tree.c (build_exception_variant): Check attributes before\n\tconcluding that two types are the same.\n\t(cp_build_type-attribute_variant): New method.\n\t* typeck.c (merge_types): Use cp_build_type_attribute_variant.\n\n\tPR c++/13907\n\t* call.c (convert_class_to_reference): Keep better track of\n\tpedantically invalid user-defined conversions.\n\n\tPR c++/13113\n\t* g++.old-deja/g++.mike/net36.C: Adjust error messages.\n\n\tPR c++/13854\n\t* g++.dg/ext/attrib13.C: New test.\n\n\tPR c++/13907\n\t* g++.dg/conversion/op2.C: New test.\n\nFrom-SVN: r77127", "tree": {"sha": "18f97563be8180b80b8d845bab5a84a1cb6453c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f97563be8180b80b8d845bab5a84a1cb6453c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/comments", "author": null, "committer": null, "parents": [{"sha": "7c9201514989cce06b05850f55f3bcd0e3d5e18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9201514989cce06b05850f55f3bcd0e3d5e18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9201514989cce06b05850f55f3bcd0e3d5e18b"}], "stats": {"total": 129, "additions": 104, "deletions": 25}, "files": [{"sha": "9c3d5732edb53367aa4c92372137355073f4768c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -1,3 +1,24 @@\n+2004-02-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13113\n+\t* init.c (build_offset_ref): Improve error recovery for invalid\n+\tuses of non-static member functions.\n+\n+\tPR c++/13854\n+\t* cp-tree.h (cp_build_type_attribute_variant): New function.\n+\t* class.c (build_clone): Use cp_build_type_attribute_variant.\n+\t* decl.c (duplicate_decls): Likewise.\n+\t* pt.c (copy_default_args_to_explicit_spec): Likewise.\n+\t(tsubst_function_type): Likewise.\n+\t* tree.c (build_exception_variant): Check attributes before\n+\tconcluding that two types are the same.\n+\t(cp_build_type-attribute_variant): New method.\n+\t* typeck.c (merge_types): Use cp_build_type_attribute_variant.\n+\n+\tPR c++/13907\n+\t* call.c (convert_class_to_reference): Keep better track of\n+\tpedantically invalid user-defined conversions.\n+\n 2004-02-01  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13957"}, {"sha": "0aa19f126432d57ab7d3a4d5e3a5707ad83f8d25", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -828,15 +828,19 @@ convert_class_to_reference (tree t, tree s, tree expr)\n \t\t\t\t\t   LOOKUP_NORMAL);\n \t  \n \t  if (cand)\n-\t    /* Build a standard conversion sequence indicating the\n-\t       binding from the reference type returned by the\n-\t       function to the desired REFERENCE_TYPE.  */\n-\t    cand->second_conv\n-\t      = (direct_reference_binding \n-\t\t (reference_type, \n-\t\t  build1 (IDENTITY_CONV, \n-\t\t\t  TREE_TYPE (TREE_TYPE (TREE_TYPE (cand->fn))),\n-\t\t\t  NULL_TREE)));\n+\t    {\n+\t      /* Build a standard conversion sequence indicating the\n+\t\t binding from the reference type returned by the\n+\t\t function to the desired REFERENCE_TYPE.  */\n+\t      cand->second_conv\n+\t\t= (direct_reference_binding \n+\t\t   (reference_type, \n+\t\t    build1 (IDENTITY_CONV, \n+\t\t\t    TREE_TYPE (TREE_TYPE (TREE_TYPE (cand->fn))),\n+\t\t\t    NULL_TREE)));\n+\t      ICS_BAD_FLAG (cand->second_conv) \n+\t\t|= ICS_BAD_FLAG (TREE_VEC_ELT (cand->convs, 0));\n+\t    }\n \t}\n       conversions = TREE_CHAIN (conversions);\n     }"}, {"sha": "96e48e47e33c78999137d4ee5e567dac3297b41a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -3873,8 +3873,8 @@ build_clone (tree fn, tree name)\n \tTREE_TYPE (clone) = build_exception_variant (TREE_TYPE (clone),\n \t\t\t\t\t\t     exceptions);\n       TREE_TYPE (clone) \n-\t= build_type_attribute_variant (TREE_TYPE (clone),\n-\t\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (fn)));\n+\t= cp_build_type_attribute_variant (TREE_TYPE (clone),\n+\t\t\t\t\t   TYPE_ATTRIBUTES (TREE_TYPE (fn)));\n     }\n \n   /* Copy the function parameters.  But, DECL_ARGUMENTS on a TEMPLATE_DECL"}, {"sha": "5e645780c11fb7b2948b395af5b5431b94204383", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -4154,6 +4154,7 @@ extern tree maybe_dummy_object\t\t\t(tree, tree *);\n extern int is_dummy_object\t\t\t(tree);\n extern const struct attribute_spec cxx_attribute_table[];\n extern tree make_ptrmem_cst                     (tree, tree);\n+extern tree cp_build_type_attribute_variant     (tree, tree);\n extern tree cp_build_qualified_type_real        (tree, int, tsubst_flags_t);\n #define cp_build_qualified_type(TYPE, QUALS) \\\n   cp_build_qualified_type_real ((TYPE), (QUALS), tf_error | tf_warning)"}, {"sha": "c949c74d2365f5bc4e5e0bd008f9bf8488849bfc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -1266,7 +1266,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  tree attribs = (*targetm.merge_type_attributes)\n \t    (TREE_TYPE (olddecl), type);\n \n-\t  type = build_type_attribute_variant (type, attribs);\n+\t  type = cp_build_type_attribute_variant (type, attribs);\n \t  TREE_TYPE (newdecl) = TREE_TYPE (olddecl) = type;\n \t}\n "}, {"sha": "2c899964589d57c97f4ba1d318076a1e8c33df9d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -1559,16 +1559,20 @@ build_offset_ref (tree type, tree name, bool address_p)\n \t   a class derived from that class (_class.base.init_).  */\n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (member))\n \t{\n+\t  /* Build a representation of a the qualified name suitable\n+\t     for use as the operand to \"&\" -- even though the \"&\" is\n+\t     not actually present.  */\n+\t  member = build (OFFSET_REF, TREE_TYPE (member), decl, member);\n \t  /* In Microsoft mode, treat a non-static member function as if\n \t     it were a pointer-to-member.  */\n \t  if (flag_ms_extensions)\n \t    {\n-\t      member = build (OFFSET_REF, TREE_TYPE (member), decl, member);\n \t      PTRMEM_OK_P (member) = 1;\n \t      return build_unary_op (ADDR_EXPR, member, 0);\n \t    }\n-\t  error (\"invalid use of non-static member function `%D'\", member);\n-\t  return error_mark_node;\n+\t  error (\"invalid use of non-static member function `%D'\", \n+\t\t TREE_OPERAND (member, 1));\n+\t  return member;\n \t}\n       else if (TREE_CODE (member) == FIELD_DECL)\n \t{"}, {"sha": "f0350423e7ce8f0f2b104c6fbf79a681b87a8a28", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -1526,8 +1526,8 @@ copy_default_args_to_explicit_spec (tree decl)\n   else\n     new_type = build_function_type (TREE_TYPE (old_type),\n \t\t\t\t    new_spec_types);\n-  new_type = build_type_attribute_variant (new_type,\n-\t\t\t\t\t   TYPE_ATTRIBUTES (old_type));\n+  new_type = cp_build_type_attribute_variant (new_type,\n+\t\t\t\t\t      TYPE_ATTRIBUTES (old_type));\n   new_type = build_exception_variant (new_type,\n \t\t\t\t      TYPE_RAISES_EXCEPTIONS (old_type));\n   TREE_TYPE (decl) = new_type;\n@@ -6476,7 +6476,7 @@ tsubst_function_type (tree t,\n \t\t\t\t\t   TREE_CHAIN (arg_types));\n     }\n   fntype = cp_build_qualified_type_real (fntype, TYPE_QUALS (t), complain);\n-  fntype = build_type_attribute_variant (fntype, TYPE_ATTRIBUTES (t));\n+  fntype = cp_build_type_attribute_variant (fntype, TYPE_ATTRIBUTES (t));\n   \n   return fntype;  \n }"}, {"sha": "3413edee1d242b534b70a5ec35594664db0d986b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -991,7 +991,8 @@ build_exception_variant (tree type, tree raises)\n \n   for (; v; v = TYPE_NEXT_VARIANT (v))\n     if (TYPE_QUALS (v) == type_quals\n-        && comp_except_specs (raises, TYPE_RAISES_EXCEPTIONS (v), 1))\n+        && comp_except_specs (raises, TYPE_RAISES_EXCEPTIONS (v), 1)\n+\t&& (*targetm.comp_type_attributes) (type, v))\n       return v;\n \n   /* Need to build a new variant.  */\n@@ -1962,6 +1963,23 @@ make_ptrmem_cst (tree type, tree member)\n   return ptrmem_cst;\n }\n \n+/* Build a variant of TYPE that has the indicated ATTRIBUTES.  May\n+   return an existing type of an appropriate type already exists.  */\n+\n+tree\n+cp_build_type_attribute_variant (tree type, tree attributes)\n+{\n+  tree new_type;\n+\n+  new_type = build_type_attribute_variant (type, attributes);\n+  if (TREE_CODE (new_type) == FUNCTION_TYPE\n+      && (TYPE_RAISES_EXCEPTIONS (new_type) \n+\t  != TYPE_RAISES_EXCEPTIONS (type)))\n+    new_type = build_exception_variant (new_type,\n+\t\t\t\t\tTYPE_RAISES_EXCEPTIONS (type));\n+  return new_type;\n+}\n+\n /* Apply FUNC to all language-specific sub-trees of TP in a pre-order\n    traversal.  Called from walk_tree().  */\n "}, {"sha": "4f635cc7b556dc98e876b01356ff07ce54e67742", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -666,25 +666,25 @@ merge_types (tree t1, tree t2)\n \n \t/* Save space: see if the result is identical to one of the args.  */\n \tif (valtype == TREE_TYPE (t1) && ! p2)\n-\t  return build_type_attribute_variant (t1, attributes);\n+\t  return cp_build_type_attribute_variant (t1, attributes);\n \tif (valtype == TREE_TYPE (t2) && ! p1)\n-\t  return build_type_attribute_variant (t2, attributes);\n+\t  return cp_build_type_attribute_variant (t2, attributes);\n \n \t/* Simple way if one arg fails to specify argument types.  */\n \tif (p1 == NULL_TREE || TREE_VALUE (p1) == void_type_node)\n \t  {\n \t    rval = build_function_type (valtype, p2);\n \t    if ((raises = TYPE_RAISES_EXCEPTIONS (t2)))\n \t      rval = build_exception_variant (rval, raises);\n-\t    return build_type_attribute_variant (rval, attributes);\n+\t    return cp_build_type_attribute_variant (rval, attributes);\n \t  }\n \traises = TYPE_RAISES_EXCEPTIONS (t1);\n \tif (p2 == NULL_TREE || TREE_VALUE (p2) == void_type_node)\n \t  {\n \t    rval = build_function_type (valtype, p1);\n \t    if (raises)\n \t      rval = build_exception_variant (rval, raises);\n-\t    return build_type_attribute_variant (rval, attributes);\n+\t    return cp_build_type_attribute_variant (rval, attributes);\n \t  }\n \n \trval = build_function_type (valtype, commonparms (p1, p2));\n@@ -722,7 +722,7 @@ merge_types (tree t1, tree t2)\n \n     default:;\n     }\n-  return build_type_attribute_variant (t1, attributes);\n+  return cp_build_type_attribute_variant (t1, attributes);\n }\n \n /* Return the common type of two types."}, {"sha": "e95b3019f56b2b329aa28d099cd53d7b458fbb1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -1,3 +1,14 @@\n+2004-02-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13113\n+\t* g++.old-deja/g++.mike/net36.C: Adjust error messages.\n+\n+\tPR c++/13854\n+\t* g++.dg/ext/attrib13.C: New test.\n+\n+\tPR c++/13907\n+\t* g++.dg/conversion/op2.C: New test.\n+\n 2004-02-02  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/titype-1.c: Fix pasto."}, {"sha": "b400988108d28634a21178630c9c06a9931b4e0a", "filename": "gcc/testsuite/g++.dg/conversion/op2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop2.C?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/13907\n+\n+struct A {\n+  operator int & ();\n+  operator const int & () const;\n+};\n+                                                                               \n+          \n+void f(int &);\n+void f(const int &);\n+                                                                               \n+          \n+int main() {\n+  const A x = A();\n+  f(x);\n+}"}, {"sha": "22ea97ae706eb0d69c65b83d700cebf0dedd0a38", "filename": "gcc/testsuite/g++.dg/ext/attrib13.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib13.C?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/13854\n+\n+extern char *rindex (__const char *__s, int __c) throw () __attribute__ ((__pure__));\n+extern char *rindex (__const char *__s, int __c) throw () __attribute__ ((__pure__));"}, {"sha": "98b38eedb48bebe21b5286e68fd1d879e46552f6", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9525111c9a3fabe2244b57e7a6257b708b8f9f5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet36.C?ref=e9525111c9a3fabe2244b57e7a6257b708b8f9f5", "patch": "@@ -11,7 +11,7 @@ typedef void (A::*handler) (X*);\n \n class B {\n public:\n-  void setHandler(handler);\n+  void setHandler(handler); // { dg-error \"candidate\" }\n };\n \n void f(B* b) {"}]}