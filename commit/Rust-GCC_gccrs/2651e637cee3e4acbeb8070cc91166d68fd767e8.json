{"sha": "2651e637cee3e4acbeb8070cc91166d68fd767e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1MWU2MzdjZWUzZTRhY2JlYjgwNzBjYzkxMTY2ZDY4ZmQ3NjdlOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:50:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:50:36Z"}, "message": "Change use to type-based pool allocator in ipa-prop.c\n\n\t* ipa-cp.c (ipcp_value::add_source): Use new type-based pool allocator.\n\t(allocate_and_init_ipcp_value): Likewise.\n\t(ipcp_lattice::add_value): Likewise.\n\t(merge_agg_lats_step): Likewise.\n\t(ipcp_driver): Likewise.\n\t* ipa-prop.c (ipa_free_all_structures_after_ipa_cp): Likewise.\n\t(ipa_free_all_structures_after_iinln): Likewise.\n\t* ipa-prop.h: Likewise.\n\nFrom-SVN: r223971", "tree": {"sha": "e74912607f3bb389c9b0eeea949c8c3ad2d392ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e74912607f3bb389c9b0eeea949c8c3ad2d392ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2651e637cee3e4acbeb8070cc91166d68fd767e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2651e637cee3e4acbeb8070cc91166d68fd767e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2651e637cee3e4acbeb8070cc91166d68fd767e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2651e637cee3e4acbeb8070cc91166d68fd767e8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50a41d64f384053a948bccdf9897078d92547103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a41d64f384053a948bccdf9897078d92547103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a41d64f384053a948bccdf9897078d92547103"}], "stats": {"total": 87, "additions": 51, "deletions": 36}, "files": [{"sha": "85c274d080228f52e9c576f01fd2b65bd1fb5f52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2651e637cee3e4acbeb8070cc91166d68fd767e8", "patch": "@@ -1,3 +1,14 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_value::add_source): Use new type-based pool allocator.\n+\t(allocate_and_init_ipcp_value): Likewise.\n+\t(ipcp_lattice::add_value): Likewise.\n+\t(merge_agg_lats_step): Likewise.\n+\t(ipcp_driver): Likewise.\n+\t* ipa-prop.c (ipa_free_all_structures_after_ipa_cp): Likewise.\n+\t(ipa_free_all_structures_after_iinln): Likewise.\n+\t* ipa-prop.h: Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-inline-analysis.c (edge_set_predicate): Use new type-based pool allocator."}, {"sha": "9f812fa5f5d266fd82c5a2312da330ba88c4a851", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=2651e637cee3e4acbeb8070cc91166d68fd767e8", "patch": "@@ -291,10 +291,17 @@ class ipcp_param_lattices\n \n /* Allocation pools for values and their sources in ipa-cp.  */\n \n-alloc_pool ipcp_cst_values_pool;\n-alloc_pool ipcp_poly_ctx_values_pool;\n-alloc_pool ipcp_sources_pool;\n-alloc_pool ipcp_agg_lattice_pool;\n+pool_allocator<ipcp_value<tree> > ipcp_cst_values_pool\n+  (\"IPA-CP constant values\", 32);\n+\n+pool_allocator<ipcp_value<ipa_polymorphic_call_context> >\n+  ipcp_poly_ctx_values_pool (\"IPA-CP polymorphic contexts\", 32);\n+\n+pool_allocator<ipcp_value_source<tree> > ipcp_sources_pool\n+  (\"IPA-CP value sources\", 64);\n+\n+pool_allocator<ipcp_agg_lattice> ipcp_agg_lattice_pool\n+  (\"IPA_CP aggregate lattices\", 32);\n \n /* Maximal count found in program.  */\n \n@@ -1147,7 +1154,7 @@ ipcp_value<valtype>::add_source (cgraph_edge *cs, ipcp_value *src_val,\n {\n   ipcp_value_source<valtype> *src;\n \n-  src = new (pool_alloc (ipcp_sources_pool)) ipcp_value_source<valtype>;\n+  src = new (ipcp_sources_pool.allocate ()) ipcp_value_source<valtype>;\n   src->offset = offset;\n   src->cs = cs;\n   src->val = src_val;\n@@ -1165,7 +1172,7 @@ allocate_and_init_ipcp_value (tree source)\n {\n   ipcp_value<tree> *val;\n \n-  val = new (pool_alloc (ipcp_cst_values_pool)) ipcp_value<tree>;\n+  val = ipcp_cst_values_pool.allocate ();\n   memset (val, 0, sizeof (*val));\n   val->value = source;\n   return val;\n@@ -1179,8 +1186,8 @@ allocate_and_init_ipcp_value (ipa_polymorphic_call_context source)\n {\n   ipcp_value<ipa_polymorphic_call_context> *val;\n \n-  val = new (pool_alloc (ipcp_poly_ctx_values_pool))\n-    ipcp_value<ipa_polymorphic_call_context>;\n+  // TODO\n+  val = ipcp_poly_ctx_values_pool.allocate ();\n   memset (val, 0, sizeof (*val));\n   val->value = source;\n   return val;\n@@ -1229,7 +1236,7 @@ ipcp_lattice<valtype>::add_value (valtype newval, cgraph_edge *cs,\n \t    {\n \t      ipcp_value_source<valtype> *src = val->sources;\n \t      val->sources = src->next;\n-\t      pool_free (ipcp_sources_pool, src);\n+\t      ipcp_sources_pool.remove ((ipcp_value_source<tree>*)src);\n \t    }\n \t}\n \n@@ -1599,7 +1606,7 @@ merge_agg_lats_step (struct ipcp_param_lattices *dest_plats,\n       if (dest_plats->aggs_count == PARAM_VALUE (PARAM_IPA_MAX_AGG_ITEMS))\n \treturn false;\n       dest_plats->aggs_count++;\n-      new_al = (struct ipcp_agg_lattice *) pool_alloc (ipcp_agg_lattice_pool);\n+      new_al = ipcp_agg_lattice_pool.allocate ();\n       memset (new_al, 0, sizeof (*new_al));\n \n       new_al->offset = offset;\n@@ -4463,16 +4470,6 @@ ipcp_driver (void)\n   edge_removal_hook_holder =\n     symtab->add_edge_removal_hook (&ipcp_edge_removal_hook, NULL);\n \n-  ipcp_cst_values_pool = create_alloc_pool (\"IPA-CP constant values\",\n-\t\t\t\t\t    sizeof (ipcp_value<tree>), 32);\n-  ipcp_poly_ctx_values_pool = create_alloc_pool\n-    (\"IPA-CP polymorphic contexts\",\n-     sizeof (ipcp_value<ipa_polymorphic_call_context>), 32);\n-  ipcp_sources_pool = create_alloc_pool (\"IPA-CP value sources\",\n-\t\t\t\t\t sizeof (ipcp_value_source<tree>), 64);\n-  ipcp_agg_lattice_pool = create_alloc_pool (\"IPA_CP aggregate lattices\",\n-\t\t\t\t\t     sizeof (struct ipcp_agg_lattice),\n-\t\t\t\t\t     32);\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\nIPA structures before propagation:\\n\");"}, {"sha": "e90502bca5a903156639dda8d0edb96a31eb6d92", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=2651e637cee3e4acbeb8070cc91166d68fd767e8", "patch": "@@ -3669,10 +3669,10 @@ ipa_free_all_structures_after_ipa_cp (void)\n     {\n       ipa_free_all_edge_args ();\n       ipa_free_all_node_params ();\n-      free_alloc_pool (ipcp_sources_pool);\n-      free_alloc_pool (ipcp_cst_values_pool);\n-      free_alloc_pool (ipcp_poly_ctx_values_pool);\n-      free_alloc_pool (ipcp_agg_lattice_pool);\n+      ipcp_sources_pool.release ();\n+      ipcp_cst_values_pool.release ();\n+      ipcp_poly_ctx_values_pool.release ();\n+      ipcp_agg_lattice_pool.release ();\n       ipa_unregister_cgraph_hooks ();\n       ipa_refdesc_pool.release ();\n     }\n@@ -3687,14 +3687,10 @@ ipa_free_all_structures_after_iinln (void)\n   ipa_free_all_edge_args ();\n   ipa_free_all_node_params ();\n   ipa_unregister_cgraph_hooks ();\n-  if (ipcp_sources_pool)\n-    free_alloc_pool (ipcp_sources_pool);\n-  if (ipcp_cst_values_pool)\n-    free_alloc_pool (ipcp_cst_values_pool);\n-  if (ipcp_poly_ctx_values_pool)\n-    free_alloc_pool (ipcp_poly_ctx_values_pool);\n-  if (ipcp_agg_lattice_pool)\n-    free_alloc_pool (ipcp_agg_lattice_pool);\n+  ipcp_sources_pool.release ();\n+  ipcp_cst_values_pool.release ();\n+  ipcp_poly_ctx_values_pool.release ();\n+  ipcp_agg_lattice_pool.release ();\n   ipa_refdesc_pool.release ();\n }\n "}, {"sha": "e6725aa332f3a20e92f432f795f1dcab177fed1f", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2651e637cee3e4acbeb8070cc91166d68fd767e8/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=2651e637cee3e4acbeb8070cc91166d68fd767e8", "patch": "@@ -595,10 +595,21 @@ void ipa_print_node_jump_functions (FILE *f, struct cgraph_node *node);\n void ipa_print_all_jump_functions (FILE * f);\n void ipcp_verify_propagated_values (void);\n \n-extern alloc_pool ipcp_cst_values_pool;\n-extern alloc_pool ipcp_poly_ctx_values_pool;\n-extern alloc_pool ipcp_sources_pool;\n-extern alloc_pool ipcp_agg_lattice_pool;\n+template <typename value>\n+class ipcp_value;\n+\n+extern pool_allocator<ipcp_value<tree> > ipcp_cst_values_pool;\n+extern pool_allocator<ipcp_value<ipa_polymorphic_call_context> >\n+  ipcp_poly_ctx_values_pool;\n+\n+template <typename valtype>\n+class ipcp_value_source;\n+\n+extern pool_allocator<ipcp_value_source<tree> > ipcp_sources_pool;\n+\n+class ipcp_agg_lattice;\n+\n+extern pool_allocator<ipcp_agg_lattice> ipcp_agg_lattice_pool;\n \n /* Operation to be performed for the parameter in ipa_parm_adjustment\n    below.  */"}]}