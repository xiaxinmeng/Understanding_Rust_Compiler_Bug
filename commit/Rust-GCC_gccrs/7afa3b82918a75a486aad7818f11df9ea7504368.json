{"sha": "7afa3b82918a75a486aad7818f11df9ea7504368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmYTNiODI5MThhNzVhNDg2YWFkNzgxOGYxMWRmOWVhNzUwNDM2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T09:42:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T09:42:35Z"}, "message": "expand: Don't depend on warning flags in code generation of strnlen [PR94189]\n\nThe following testcase FAILs with -O2 -fcompare-debug, but the reason isn't\nthat we'd emit different code based on -g or non-debug, but rather that\nwe emit different code depending on whether -w is used or not (or e.g.\n-Wno-stringop-overflow or whether some other pass emitted some other warning\nalready on the call).\n\nCode generation shouldn't depend on whether we emit a warning or not if at\nall possible.\n\nThe following patch punts (i.e. doesn't optimize the strnlen call to a\nconstant value) if we would emit the warning if it was enabled.\nIn the PR there is an alternate patch which does optimize the strnlen call\nno matter if we emit the warning or not, though I think I prefer the version\nbelow, e.g. the strnlen call might be crossing field boundaries, which is in\nstrict reading undefined, but I'd be afraid people do that in the real\nworld programs.\n\n2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/94189\n\t* builtins.c (expand_builtin_strnlen): Do return NULL_RTX if we would\n\temit a warning if it was enabled and don't depend on TREE_NO_WARNING\n\tfor code-generation.\n\n\t* gcc.dg/pr94189.c: New test.", "tree": {"sha": "c826ddf160eac420bd7deb758f19ad5437a8928c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c826ddf160eac420bd7deb758f19ad5437a8928c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7afa3b82918a75a486aad7818f11df9ea7504368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afa3b82918a75a486aad7818f11df9ea7504368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afa3b82918a75a486aad7818f11df9ea7504368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afa3b82918a75a486aad7818f11df9ea7504368/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf2b69a629d4f79efe3c103fe54040437ea18a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf2b69a629d4f79efe3c103fe54040437ea18a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf2b69a629d4f79efe3c103fe54040437ea18a6"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "fc35ceac272a80eede3b18278b0f6fd0dffbac3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7afa3b82918a75a486aad7818f11df9ea7504368", "patch": "@@ -1,3 +1,10 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94189\n+\t* builtins.c (expand_builtin_strnlen): Do return NULL_RTX if we would\n+\temit a warning if it was enabled and don't depend on TREE_NO_WARNING\n+\tfor code-generation.\n+\n 2020-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/94185"}, {"sha": "53bae599d3e2ddfe4c08f5b37dd5c51c245512bf", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7afa3b82918a75a486aad7818f11df9ea7504368", "patch": "@@ -3142,27 +3142,25 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n \t    return NULL_RTX;\n \t}\n \n-      if (lendata.decl\n-\t  && !TREE_NO_WARNING (exp)\n-\t  && ((tree_int_cst_lt (len, bound))\n-\t      || !exact))\n+      if (lendata.decl && (tree_int_cst_lt (len, bound) || !exact))\n \t{\n \t  location_t warnloc\n \t    = expansion_point_location_if_in_system_header (loc);\n \n-\t  if (warning_at (warnloc, OPT_Wstringop_overflow_,\n-\t\t\t  exact\n-\t\t\t  ? G_(\"%K%qD specified bound %E exceeds the size %E \"\n-\t\t\t       \"of unterminated array\")\n-\t\t\t  : G_(\"%K%qD specified bound %E may exceed the size \"\n-\t\t\t       \"of at most %E of unterminated array\"),\n-\t\t\t  exp, func, bound, len))\n+\t  if (!TREE_NO_WARNING (exp)\n+\t      && warning_at (warnloc, OPT_Wstringop_overflow_,\n+\t\t\t     exact\n+\t\t\t     ? G_(\"%K%qD specified bound %E exceeds the size \"\n+\t\t\t\t  \"%E of unterminated array\")\n+\t\t\t     : G_(\"%K%qD specified bound %E may exceed the \"\n+\t\t\t\t  \"size of at most %E of unterminated array\"),\n+\t\t\t     exp, func, bound, len))\n \t    {\n \t      inform (DECL_SOURCE_LOCATION (lendata.decl),\n \t\t      \"referenced argument declared here\");\n \t      TREE_NO_WARNING (exp) = true;\n-\t      return NULL_RTX;\n \t    }\n+\t  return NULL_RTX;\n \t}\n \n       if (!len)"}, {"sha": "879a67d88ef21b1500835bad975cd9b8c18af9d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7afa3b82918a75a486aad7818f11df9ea7504368", "patch": "@@ -1,3 +1,8 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94189\n+\t* gcc.dg/pr94189.c: New test.\n+\n 2020-03-17  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/94157"}, {"sha": "f927d55279ae518d65fb15002eb04d56b236cac0", "filename": "gcc/testsuite/gcc.dg/pr94189.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94189.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afa3b82918a75a486aad7818f11df9ea7504368/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94189.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94189.c?ref=7afa3b82918a75a486aad7818f11df9ea7504368", "patch": "@@ -0,0 +1,11 @@\n+/* PR middle-end/94189 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+const char a[] = { 'a', 'b', 'c', 'd' };/* { dg-message \"declared here\" } */\n+\n+int\n+foo (void)\n+{\n+  return __builtin_strnlen (a, 5);\t/* { dg-warning \"specified bound 5 exceeds the size 4 of unterminated array\" } */\n+}"}]}