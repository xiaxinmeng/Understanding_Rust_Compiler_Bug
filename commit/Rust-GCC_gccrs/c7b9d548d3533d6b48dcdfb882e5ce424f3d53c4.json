{"sha": "c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiOWQ1NDhkMzUzM2Q2YjQ4ZGNkZmI4ODJlNWNlNDI0ZjNkNTNjNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:00:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:00:07Z"}, "message": "[multiple changes]\n\n2011-08-02  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch6.adb (Check_Conformance): Revise the check for nonconforming\n\tnull exclusions to test Can_Never_Be_Null on the anonymous access types\n\tof the formals rather than testing the formals themselves. Exclude this\n\tcheck in cases where the Old_Formal is marked as a controlling formal,\n\tto avoid issuing spurious errors for bodies completing dispatching\n\toperations (due to the flag not getting set on controlling access\n\tformals in body specs).\n\t(Find_Corresponding_Spec): When checking full and subtype conformance of\n\tsubprogram bodies in instances, pass Designated and E in that order, for\n\tconsistency with the expected order of the formals (New_Id followed by\n\tOld_Id).\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch8.adb: Minor reformatting.\n\nFrom-SVN: r177172", "tree": {"sha": "7c103ec324c6cd435eba748f5cb247d9dbf56a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c103ec324c6cd435eba748f5cb247d9dbf56a77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/comments", "author": null, "committer": null, "parents": [{"sha": "1138cf593bb768234faf88f77ca26db0184b5d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1138cf593bb768234faf88f77ca26db0184b5d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1138cf593bb768234faf88f77ca26db0184b5d29"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "02e05f9b8c4255f38d7ccf7a56ccf053b98a1e56", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "patch": "@@ -1,3 +1,21 @@\n+2011-08-02  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Conformance): Revise the check for nonconforming\n+\tnull exclusions to test Can_Never_Be_Null on the anonymous access types\n+\tof the formals rather than testing the formals themselves. Exclude this\n+\tcheck in cases where the Old_Formal is marked as a controlling formal,\n+\tto avoid issuing spurious errors for bodies completing dispatching\n+\toperations (due to the flag not getting set on controlling access\n+\tformals in body specs).\n+\t(Find_Corresponding_Spec): When checking full and subtype conformance of\n+\tsubprogram bodies in instances, pass Designated and E in that order, for\n+\tconsistency with the expected order of the formals (New_Id followed by\n+\tOld_Id).\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb: Minor reformatting.\n+\n 2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Subprogram_Renaming): new procedure"}, {"sha": "ca7c00519c45265155709d419579f27706bc39ba", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4144,14 +4144,21 @@ package body Sem_Ch6 is\n \n             --  Ada 2005 (AI-231): In case of anonymous access types check\n             --  the null-exclusion and access-to-constant attributes must\n-            --  match.\n+            --  match. For null exclusion, we test the types rather than the\n+            --  formals themselves, since the attribute is only set reliably\n+            --  on the formals in the Ada 95 case, and we exclude the case\n+            --  where Old_Formal is marked as controlling, to avoid errors\n+            --  when matching completing bodies with dispatching declarations\n+            --  (access formals in the bodies aren't marked Can_Never_Be_Null).\n \n             if Ada_Version >= Ada_2005\n               and then Ekind (Etype (Old_Formal)) = E_Anonymous_Access_Type\n               and then Ekind (Etype (New_Formal)) = E_Anonymous_Access_Type\n               and then\n-                (Can_Never_Be_Null (Old_Formal) /=\n-                 Can_Never_Be_Null (New_Formal)\n+                ((Can_Never_Be_Null (Etype (Old_Formal)) /=\n+                  Can_Never_Be_Null (Etype (New_Formal))\n+                    and then\n+                      not Is_Controlling_Formal (Old_Formal))\n                    or else\n                  Is_Access_Constant (Etype (Old_Formal)) /=\n                  Is_Access_Constant (Etype (New_Formal)))\n@@ -6250,11 +6257,11 @@ package body Sem_Ch6 is\n \n                   if Nkind (N) = N_Subprogram_Body\n                     and then Present (Homonym (E))\n-                    and then not Fully_Conformant (E, Designator)\n+                    and then not Fully_Conformant (Designator, E)\n                   then\n                      goto Next_Entity;\n \n-                  elsif not Subtype_Conformant (E, Designator) then\n+                  elsif not Subtype_Conformant (Designator, E) then\n                      goto Next_Entity;\n                   end if;\n                end if;"}, {"sha": "4a1eeddc9284a16b38ef6f08dcdae68dd5cbb5c2", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c7b9d548d3533d6b48dcdfb882e5ce424f3d53c4", "patch": "@@ -1622,15 +1622,15 @@ package body Sem_Ch8 is\n       --  class-wide operation whose body is a dispatching call. We replace the\n       --  generated renaming declaration:\n       --\n-      --  procedure P (X : CT) renames P;\n+      --    procedure P (X : CT) renames P;\n       --\n       --  by a different renaming and a class-wide operation:\n       --\n-      --  procedure Pr (X : T) renames P;   --  renames primitive operation\n-      --  procedure P (X : CT);             --  class-wide operation\n-      --  ...\n-      --  procedure P (X : CT) is begin Pr (X); end;  -- dispatching call\n-\n+      --    procedure Pr (X : T) renames P;   --  renames primitive operation\n+      --    procedure P (X : CT);             --  class-wide operation\n+      --    ...\n+      --    procedure P (X : CT) is begin Pr (X); end;  -- dispatching call\n+      --\n       --  This rule only applies if there is no explicit visible class-wide\n       --  operation at the point of the instantiation.\n "}]}