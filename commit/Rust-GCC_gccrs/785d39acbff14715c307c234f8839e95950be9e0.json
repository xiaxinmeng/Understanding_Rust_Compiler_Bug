{"sha": "785d39acbff14715c307c234f8839e95950be9e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1ZDM5YWNiZmYxNDcxNWMzMDdjMjM0Zjg4MzllOTU5NTBiZTllMA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-01-01T12:27:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-03T09:28:29Z"}, "message": "[Ada] Reuse Is_Universal_Numeric_Type where possible\n\ngcc/ada/\n\n\t* exp_ch4.adb (Analyze_Number_Declaration, Expand_N_Op_Expon):\n\tSimplify with Is_Universal_Numeric_Type.\n\t* sem_attr.adb (Resolve_Attribute): Likewise.\n\t* sem_ch3.adb: Likewise.\n\t* sem_ch4.adb (Check_Common_Type, Check_Arithmetic_Pair):\n\tLikewise.\n\t* sem_eval.adb (Eval_Unary_Op, Test_In_Range): Likewise.\n\t* sem_res.adb (Resolve_Arithmetic_Op, Resolve_Membership_Op,\n\tResolve_Op_Expon, Resolve_Unary_Op, Set_Mixed_Mode_Operand,\n\tSet_Operand_Type): Likewise.\n\t* sem_type.adb (Disambiguate, Find_Unique_Type): Likewise.\n\t* sem_util.adb (Universal_Interpretation): Likewise.", "tree": {"sha": "b907fb19af9d6a13f7e78d0959c6e95df9441959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b907fb19af9d6a13f7e78d0959c6e95df9441959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/785d39acbff14715c307c234f8839e95950be9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785d39acbff14715c307c234f8839e95950be9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785d39acbff14715c307c234f8839e95950be9e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785d39acbff14715c307c234f8839e95950be9e0/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc150393e16baa1a1ce37b64e2fc5e1f7a38fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc150393e16baa1a1ce37b64e2fc5e1f7a38fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc150393e16baa1a1ce37b64e2fc5e1f7a38fc3"}], "stats": {"total": 73, "additions": 22, "deletions": 51}, "files": [{"sha": "9d64ef7250df47e9a4beb74122ba9a45b681d5d2", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -9145,8 +9145,7 @@ package body Exp_Ch4 is\n       --  If we are in the right type, we can call runtime routine directly\n \n       if Typ = Etyp\n-        and then Rtyp /= Universal_Integer\n-        and then Rtyp /= Universal_Real\n+        and then not Is_Universal_Numeric_Type (Rtyp)\n       then\n          Rewrite (N,\n            Wrap_MA ("}, {"sha": "6b3027260b794573ad470db0c7a7171bd6004596", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -10715,9 +10715,7 @@ package body Sem_Attr is\n \n       --  If attribute was universal type, reset to actual type\n \n-      if Etype (N) = Universal_Integer\n-        or else Etype (N) = Universal_Real\n-      then\n+      if Is_Universal_Numeric_Type (Etype (N)) then\n          Set_Etype (N, Typ);\n       end if;\n "}, {"sha": "5a3d206c985de07d0815bb80f8be4af590ec250c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -3569,10 +3569,7 @@ package body Sem_Ch3 is\n                if T = Any_Type then\n                   T := It.Typ;\n \n-               elsif It.Typ = Universal_Real\n-                       or else\n-                     It.Typ = Universal_Integer\n-               then\n+               elsif Is_Universal_Numeric_Type (It.Typ) then\n                   --  Choose universal interpretation over any other\n \n                   T := It.Typ;"}, {"sha": "85e63e932c8ce1f310e24d0d4b1c30727e78d516", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -4348,8 +4348,7 @@ package body Sem_Ch4 is\n               or else\n             Covers (T1 => T2, T2 => T1)\n          then\n-            if T1 = Universal_Integer\n-              or else T1 = Universal_Real\n+            if Is_Universal_Numeric_Type (T1)\n               or else T1 = Any_Character\n             then\n                Add_One_Interp (N, Base_Type (T2), Base_Type (T2));\n@@ -5975,7 +5974,7 @@ package body Sem_Ch4 is\n \n       function Specific_Type (T1, T2 : Entity_Id) return Entity_Id is\n       begin\n-         if T1 = Universal_Integer or else T1 = Universal_Real then\n+         if Is_Universal_Numeric_Type (T1) then\n             return Base_Type (T2);\n          else\n             return Base_Type (T1);"}, {"sha": "8f3cbf052e98ed01ffd148508cd41bfb36f68f8b", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -4363,10 +4363,7 @@ package body Sem_Eval is\n          return;\n       end if;\n \n-      if Etype (Right) = Universal_Integer\n-           or else\n-         Etype (Right) = Universal_Real\n-      then\n+      if Is_Universal_Numeric_Type (Etype (Right)) then\n          Otype := Find_Universal_Operator_Type (N);\n       end if;\n \n@@ -7243,7 +7240,7 @@ package body Sem_Eval is\n \n       --  Universal types have no range limits, so always in range\n \n-      elsif Typ = Universal_Integer or else Typ = Universal_Real then\n+      elsif Is_Universal_Numeric_Type (Typ) then\n          return In_Range;\n \n       --  Never known if not scalar type. Don't know if this can actually"}, {"sha": "47798e3bbccda165d75231dc270e32dc8dbd4b50", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -2344,8 +2344,7 @@ package body Sem_Res is\n \n                if Ada_Version >= Ada_2005\n                  and then It.Typ = Typ\n-                 and then Typ /= Universal_Integer\n-                 and then Typ /= Universal_Real\n+                 and then not Is_Universal_Numeric_Type (Typ)\n                  and then Present (It.Abstract_Op)\n                then\n                   if Debug_Flag_V then\n@@ -5731,14 +5730,12 @@ package body Sem_Res is\n          if not Is_Overloaded (N) then\n             T := Etype (N);\n             return Base_Type (T) = Base_Type (Standard_Integer)\n-              or else T = Universal_Integer\n-              or else T = Universal_Real;\n+              or else Is_Universal_Numeric_Type (T);\n          else\n             Get_First_Interp (N, Index, It);\n             while Present (It.Typ) loop\n                if Base_Type (It.Typ) = Base_Type (Standard_Integer)\n-                 or else It.Typ = Universal_Integer\n-                 or else It.Typ = Universal_Real\n+                 or else Is_Universal_Numeric_Type (It.Typ)\n                then\n                   return True;\n                end if;\n@@ -5773,8 +5770,7 @@ package body Sem_Res is\n \n          elsif Universal_Interpretation (N) = Universal_Real\n            and then (T = Base_Type (Standard_Integer)\n-                      or else T = Universal_Integer\n-                      or else T = Universal_Real)\n+                      or else Is_Universal_Numeric_Type (T))\n          then\n             --  A universal real can appear in a fixed-type context. We resolve\n             --  the literal with that context, even though this might raise an\n@@ -5907,9 +5903,7 @@ package body Sem_Res is\n \n       procedure Set_Operand_Type (N : Node_Id) is\n       begin\n-         if Etype (N) = Universal_Integer\n-           or else Etype (N) = Universal_Real\n-         then\n+         if Is_Universal_Numeric_Type (Etype (N)) then\n             Set_Etype (N, T);\n          end if;\n       end Set_Operand_Type;\n@@ -5934,7 +5928,7 @@ package body Sem_Res is\n       --  Set the type of the node to its universal interpretation because\n       --  legality checks on an exponentiation operand need the context.\n \n-      elsif (B_Typ = Universal_Integer or else B_Typ = Universal_Real)\n+      elsif Is_Universal_Numeric_Type (B_Typ)\n         and then Present (Universal_Interpretation (L))\n         and then Present (Universal_Interpretation (R))\n       then\n@@ -6047,9 +6041,9 @@ package body Sem_Res is\n          end if;\n \n       else\n-         if (TL = Universal_Integer or else TL = Universal_Real)\n+         if Is_Universal_Numeric_Type (TL)\n                and then\n-            (TR = Universal_Integer or else TR = Universal_Real)\n+            Is_Universal_Numeric_Type (TR)\n          then\n             Check_For_Visible_Operator (N, B_Typ);\n          end if;\n@@ -9792,10 +9786,7 @@ package body Sem_Res is\n          goto SM_Exit;\n \n       elsif not Is_Overloaded (R)\n-        and then\n-          (Etype (R) = Universal_Integer\n-             or else\n-           Etype (R) = Universal_Real)\n+        and then Is_Universal_Numeric_Type (Etype (R))\n         and then Is_Overloaded (L)\n       then\n          T := Etype (R);\n@@ -10237,9 +10228,7 @@ package body Sem_Res is\n          return;\n       end if;\n \n-      if Etype (Left_Opnd (N)) = Universal_Integer\n-        or else Etype (Left_Opnd (N)) = Universal_Real\n-      then\n+      if Is_Universal_Numeric_Type (Etype (Left_Opnd (N))) then\n          Check_For_Visible_Operator (N, B_Typ);\n       end if;\n \n@@ -12081,10 +12070,7 @@ package body Sem_Res is\n \n       --  Deal with universal cases\n \n-      if Etype (R) = Universal_Integer\n-           or else\n-         Etype (R) = Universal_Real\n-      then\n+      if Is_Universal_Numeric_Type (Etype (R)) then\n          Check_For_Visible_Operator (N, B_Typ);\n       end if;\n "}, {"sha": "b22c904601d706e44f78bf6a5b941de90eeda753", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -1853,8 +1853,7 @@ package body Sem_Type is\n             begin\n                Get_First_Interp (N, I, It);\n                while Present (It.Typ) loop\n-                  if (It.Typ = Universal_Integer\n-                       or else It.Typ = Universal_Real)\n+                  if Is_Universal_Numeric_Type (It.Typ)\n                     and then (Typ = Any_Type or else Covers (Typ, It.Typ))\n                   then\n                      return It;\n@@ -2284,7 +2283,7 @@ package body Sem_Type is\n                --  apply preference rule.\n \n                if TR /= Any_Type then\n-                  if (T = Universal_Integer or else T = Universal_Real)\n+                  if Is_Universal_Numeric_Type (T)\n                     and then It.Typ = T\n                   then\n                      TR := It.Typ;"}, {"sha": "343ae705fb045d584c0216955e1d62743885e427", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785d39acbff14715c307c234f8839e95950be9e0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=785d39acbff14715c307c234f8839e95950be9e0", "patch": "@@ -29189,9 +29189,7 @@ package body Sem_Util is\n       if Nkind (Opnd) = N_Defining_Identifier\n         or else not Is_Overloaded (Opnd)\n       then\n-         if Etype (Opnd) = Universal_Integer\n-           or else Etype (Opnd) = Universal_Real\n-         then\n+         if Is_Universal_Numeric_Type (Etype (Opnd)) then\n             return Etype (Opnd);\n          else\n             return Empty;\n@@ -29200,9 +29198,7 @@ package body Sem_Util is\n       else\n          Get_First_Interp (Opnd, Index, It);\n          while Present (It.Typ) loop\n-            if It.Typ = Universal_Integer\n-              or else It.Typ = Universal_Real\n-            then\n+            if Is_Universal_Numeric_Type (It.Typ) then\n                return It.Typ;\n             end if;\n "}]}