{"sha": "41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhMTIwOGExMWI5YzdiY2QwYTkwYmJhOTNmMDBiMWVjMDQ3ZWU3ZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2011-01-18T21:53:47Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2011-01-18T21:53:47Z"}, "message": "extend.texi: Mention __float128 support on hppa HP-UX.\n\n\t* doc/extend.texi: Mention __float128 support on hppa HP-UX.\n\t* config/pa/pa-hpux.h (HPUX_LONG_DOUBLE_LIBRARY): Define to 1.\n\t* config/pa/pa.c (pa_expand_builtin): New.  Include \"langhooks.h\".\n\t(pa_c_mode_for_suffix): New.\n\t(TARGET_EXPAND_BUILTIN): Define.\n\t(TARGET_C_MODE_FOR_SUFFIX): Define.\n\t(pa_builtins): Define.\n\t(pa_init_builtins): Register __float128 type and init new support\n\tbuiltins.\n\t* config/pa/pa.h (HPUX_LONG_DOUBLE_LIBRARY): Define if not defined.\n\t* config/pa/quadlib.c (_U_Qfcopysign): New.\n\nFrom-SVN: r168969", "tree": {"sha": "edf086411a86ca08e9a4accef760619d912f8e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf086411a86ca08e9a4accef760619d912f8e13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/comments", "author": null, "committer": null, "parents": [{"sha": "1ecad98e4de3280e8e9951706f2e5251819fb92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecad98e4de3280e8e9951706f2e5251819fb92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ecad98e4de3280e8e9951706f2e5251819fb92a"}], "stats": {"total": 162, "additions": 157, "deletions": 5}, "files": [{"sha": "cd1108354622f920d6970e69b09d8f95e9cda953", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "patch": "@@ -1,3 +1,17 @@\n+2011-01-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* doc/extend.texi: Mention __float128 support on hppa HP-UX.\n+\t* config/pa/pa-hpux.h (HPUX_LONG_DOUBLE_LIBRARY): Define to 1.\n+\t* config/pa/pa.c (pa_expand_builtin): New.  Include \"langhooks.h\".\n+\t(pa_c_mode_for_suffix): New.\n+\t(TARGET_EXPAND_BUILTIN): Define.\n+\t(TARGET_C_MODE_FOR_SUFFIX): Define.\n+\t(pa_builtins): Define.\n+\t(pa_init_builtins): Register __float128 type and init new support\n+\tbuiltins.\n+\t* config/pa/pa.h (HPUX_LONG_DOUBLE_LIBRARY): Define if not defined.\n+\t* config/pa/quadlib.c (_U_Qfcopysign): New.\n+\n 2011-01-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/46894"}, {"sha": "f167e133eb58f20ac6beab187e098c8da6afa7fa", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "patch": "@@ -22,6 +22,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_HPUX\n #define TARGET_HPUX 1\n \n+#undef HPUX_LONG_DOUBLE_LIBRARY\n+#define HPUX_LONG_DOUBLE_LIBRARY 1\n+\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_BIG_SWITCH\n \n@@ -33,7 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #define PTRDIFF_TYPE \"int\"\n \n #define LONG_DOUBLE_TYPE_SIZE 128\n-#define HPUX_LONG_DOUBLE_LIBRARY\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n \n /* GCC always defines __STDC__.  HP C++ compilers don't define it.  This"}, {"sha": "98267b0ca63e9a817e76f24d4c1c38580d3a41e2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 116, "deletions": 3, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"langhooks.h\"\n #include \"df.h\"\n \n /* Return nonzero if there is a bypass for the output of \n@@ -129,6 +130,7 @@ static void pa_asm_out_constructor (rtx, int);\n static void pa_asm_out_destructor (rtx, int);\n #endif\n static void pa_init_builtins (void);\n+static rtx pa_expand_builtin (tree, rtx, rtx, enum machine_mode mode, int);\n static rtx hppa_builtin_saveregs (void);\n static void hppa_va_start (tree, rtx);\n static tree hppa_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n@@ -151,7 +153,7 @@ static void output_deferred_profile_counters (void) ATTRIBUTE_UNUSED;\n #ifdef ASM_OUTPUT_EXTERNAL_REAL\n static void pa_hpux_file_end (void);\n #endif\n-#ifdef HPUX_LONG_DOUBLE_LIBRARY\n+#if HPUX_LONG_DOUBLE_LIBRARY\n static void pa_hpux_init_libfuncs (void);\n #endif\n static rtx pa_struct_value_rtx (tree, int);\n@@ -181,6 +183,7 @@ static bool pa_print_operand_punct_valid_p (unsigned char);\n static rtx pa_internal_arg_pointer (void);\n static bool pa_can_eliminate (const int, const int);\n static void pa_conditional_register_usage (void);\n+static enum machine_mode pa_c_mode_for_suffix (char);\n static section *pa_function_section (tree, enum node_frequency, bool, bool);\n \n /* The following extra sections are only used for SOM.  */\n@@ -317,6 +320,9 @@ static const struct default_options pa_option_optimization_table[] =\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS pa_init_builtins\n \n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN pa_expand_builtin\n+\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST hppa_register_move_cost\n #undef TARGET_RTX_COSTS\n@@ -327,7 +333,7 @@ static const struct default_options pa_option_optimization_table[] =\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG pa_reorg\n \n-#ifdef HPUX_LONG_DOUBLE_LIBRARY\n+#if HPUX_LONG_DOUBLE_LIBRARY\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS pa_hpux_init_libfuncs\n #endif\n@@ -389,6 +395,8 @@ static const struct default_options pa_option_optimization_table[] =\n #define TARGET_CAN_ELIMINATE pa_can_eliminate\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE pa_conditional_register_usage\n+#undef TARGET_C_MODE_FOR_SUFFIX\n+#define TARGET_C_MODE_FOR_SUFFIX pa_c_mode_for_suffix\n #undef TARGET_ASM_FUNCTION_SECTION\n #define TARGET_ASM_FUNCTION_SECTION pa_function_section\n \n@@ -598,6 +606,17 @@ pa_option_override (void)\n   init_machine_status = pa_init_machine_status;\n }\n \n+enum pa_builtins\n+{\n+  PA_BUILTIN_COPYSIGNQ,\n+  PA_BUILTIN_FABSQ,\n+  PA_BUILTIN_INFQ,\n+  PA_BUILTIN_HUGE_VALQ,\n+  PA_BUILTIN_max\n+};\n+\n+static GTY(()) tree pa_builtins[(int) PA_BUILTIN_max];\n+\n static void\n pa_init_builtins (void)\n {\n@@ -613,6 +632,86 @@ pa_init_builtins (void)\n   if (built_in_decls [BUILT_IN_FINITEF])\n     set_user_assembler_name (built_in_decls [BUILT_IN_FINITEF], \"_Isfinitef\");\n #endif\n+\n+  if (HPUX_LONG_DOUBLE_LIBRARY)\n+    {\n+      tree decl, ftype;\n+\n+      /* Under HPUX, the __float128 type is a synonym for \"long double\".  */\n+      (*lang_hooks.types.register_builtin_type) (long_double_type_node,\n+\t\t\t\t\t\t \"__float128\");\n+\n+      /* TFmode support builtins.  */\n+      ftype = build_function_type_list (long_double_type_node,\n+\t\t\t\t\tlong_double_type_node,\n+\t\t\t\t\tNULL_TREE);\n+      decl = add_builtin_function (\"__builtin_fabsq\", ftype,\n+\t\t\t\t   PA_BUILTIN_FABSQ, BUILT_IN_MD,\n+\t\t\t\t   \"_U_Qfabs\", NULL_TREE);\n+      TREE_READONLY (decl) = 1;\n+      pa_builtins[PA_BUILTIN_FABSQ] = decl;\n+\n+      ftype = build_function_type_list (long_double_type_node,\n+\t\t\t\t\tlong_double_type_node,\n+\t\t\t\t\tlong_double_type_node,\n+\t\t\t\t\tNULL_TREE);\n+      decl = add_builtin_function (\"__builtin_copysignq\", ftype,\n+\t\t\t\t   PA_BUILTIN_COPYSIGNQ, BUILT_IN_MD,\n+\t\t\t\t   \"_U_Qfcopysign\", NULL_TREE);\n+      TREE_READONLY (decl) = 1;\n+      pa_builtins[PA_BUILTIN_COPYSIGNQ] = decl;\n+\n+      ftype = build_function_type (long_double_type_node, void_list_node);\n+      decl = add_builtin_function (\"__builtin_infq\", ftype,\n+\t\t\t\t   PA_BUILTIN_INFQ, BUILT_IN_MD,\n+\t\t\t\t   NULL, NULL_TREE);\n+      pa_builtins[PA_BUILTIN_INFQ] = decl;\n+\n+      decl = add_builtin_function (\"__builtin_huge_valq\", ftype,\n+                                   PA_BUILTIN_HUGE_VALQ, BUILT_IN_MD,\n+                                   NULL, NULL_TREE);\n+      pa_builtins[PA_BUILTIN_HUGE_VALQ] = decl;\n+    }\n+}\n+\n+static rtx\n+pa_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t   int ignore ATTRIBUTE_UNUSED)\n+{\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  switch (fcode)\n+    {\n+    case PA_BUILTIN_FABSQ:\n+    case PA_BUILTIN_COPYSIGNQ:\n+      return expand_call (exp, target, ignore);\n+\n+    case PA_BUILTIN_INFQ:\n+    case PA_BUILTIN_HUGE_VALQ:\n+      {\n+\tenum machine_mode target_mode = TYPE_MODE (TREE_TYPE (exp));\n+\tREAL_VALUE_TYPE inf;\n+\trtx tmp;\n+\n+\treal_inf (&inf);\n+\ttmp = CONST_DOUBLE_FROM_REAL_VALUE (inf, target_mode);\n+\n+\ttmp = validize_mem (force_const_mem (target_mode, tmp));\n+\n+\tif (target == 0)\n+\t  target = gen_reg_rtx (target_mode);\n+\n+\temit_move_insn (target, tmp);\n+\treturn target;\n+      }\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return NULL_RTX;\n }\n \n /* Function to init struct machine_function.\n@@ -5522,7 +5621,7 @@ output_deferred_plabels (void)\n     }\n }\n \n-#ifdef HPUX_LONG_DOUBLE_LIBRARY\n+#if HPUX_LONG_DOUBLE_LIBRARY\n /* Initialize optabs to point to HPUX long double emulation routines.  */\n static void\n pa_hpux_init_libfuncs (void)\n@@ -10243,6 +10342,20 @@ pa_conditional_register_usage (void)\n     fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n }\n \n+/* Target hook for c_mode_for_suffix.  */\n+\n+static enum machine_mode\n+pa_c_mode_for_suffix (char suffix)\n+{\n+  if (HPUX_LONG_DOUBLE_LIBRARY)\n+    {\n+      if (suffix == 'q')\n+\treturn TFmode;\n+    }\n+\n+  return VOIDmode;\n+}\n+\n /* Target hook for function_section.  */\n \n static section *"}, {"sha": "41af1f12f6edff21c8d116c4342e2fcfc54356d1", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "patch": "@@ -86,6 +86,11 @@ extern int flag_pa_unix;\n #define TARGET_HPUX_11_11 0\n #endif\n \n+/* HP-UX long double library.  */\n+#ifndef HPUX_LONG_DOUBLE_LIBRARY\n+#define HPUX_LONG_DOUBLE_LIBRARY 0\n+#endif\n+\n /* The following three defines are potential target switches.  The current\n    defines are optimal given the current capabilities of GAS and GNU ld.  */\n "}, {"sha": "2c1160015edeb29c8845c5aab3a8f76fe2d5085e", "filename": "gcc/config/pa/quadlib.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fquadlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fconfig%2Fpa%2Fquadlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fquadlib.c?ref=41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "patch": "@@ -58,6 +58,7 @@ int _U_Qford (long double, long double);\n int _U_Qfcomp (long double, long double);\n \n long double _U_Qfneg (long double);\n+long double _U_Qfcopysign (long double, long double);\n \n #ifdef __LP64__\n int __U_Qfcnvfxt_quad_to_sgl (long double);\n@@ -160,7 +161,6 @@ _U_Qfcomp (long double a, long double b)\n   return (_U_Qfcmp (a, b, QCMP_UNORD | QCMP_EQ | QCMP_GT) != 0 ? 1 : -1);\n }\n \n-\n /* Negate long double A.  */\n long double\n _U_Qfneg (long double a)\n@@ -176,6 +176,23 @@ _U_Qfneg (long double a)\n   return u.ld;\n }\n \n+/* Return long double A with sign changed to sign of long double B.  */\n+long double\n+_U_Qfcopysign (long double a, long double b)\n+{\n+  union\n+   {\n+     long double ld;\n+     int i[4];\n+   } ua, ub;\n+\n+  ua.ld = a;\n+  ub.ld = b;\n+  ua.i[0] &= 0x7fffffff;\n+  ua.i[0] |= (0x80000000 & ub.i[0]);\n+  return ua.ld;\n+}\n+\n #ifdef __LP64__\n /* This routine is only necessary for the PA64 port; for reasons unknown\n    _U_Qfcnvfxt_quad_to_sgl returns the integer in the high 32bits of the"}, {"sha": "ab65fd6848e6a19d933e236e1aecc2b074f779b1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "patch": "@@ -934,6 +934,7 @@ typedef _Complex float __attribute__((mode(XC))) _Complex80;\n \n Not all targets support additional floating point types.  @code{__float80}\n and @code{__float128} types are supported on i386, x86_64 and ia64 targets.\n+The @code{__float128} type is supported on hppa HP-UX targets.\n \n @node Half-Precision\n @section Half-Precision Floating Point"}]}