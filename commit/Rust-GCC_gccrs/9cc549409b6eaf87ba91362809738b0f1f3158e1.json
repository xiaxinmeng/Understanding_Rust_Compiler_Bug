{"sha": "9cc549409b6eaf87ba91362809738b0f1f3158e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjNTQ5NDA5YjZlYWY4N2JhOTEzNjI4MDk3MzhiMGYxZjMxNThlMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2010-06-01T12:57:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-01T12:57:57Z"}, "message": "invoke.texi: Mention -fdump-ada-spec.\n\n\t* doc/invoke.texi: Mention -fdump-ada-spec.\n\t* tree-dump.c (dump_files): Add ada-spec.\n\t(FIRST_AUTO_NUMBERED_DUMP): Bump to 8.\n\t* tree-pass.h (tree_dump_index): Add TDI_ada.\n\t* gcc.c: Add support for -C without -E and for -fdump-ada-spec.\n\t(cpp_unique_options): Do not reject -C or -CC when -E isn't present.\n\t(default_compilers) <@c-header>: Allow -fdump-ada-spec on header files.\n\t* c-decl.c: Include c-ada-spec.h.\n\t(collect_source_ref_cb, collect_all_refs, for_each_global_decl): New\n\tfunctions.\n\t(c_write_global_declarations): Add handling of -fdump-ada-spec.\n\t* c-lex.c (c_lex_with_flags): Add handling of CPP_COMMENT.\n\t* Makefile.in (C_AND_OBJC_OBJS): Add c-ada-spec.o.\n\t* c-ada-spec.h, c-ada-spec.c: New files.\n\nCo-Authored-By: Matthew Gingell <gingell@adacore.com>\n\nFrom-SVN: r160100", "tree": {"sha": "ec3e2b9e58ba96e229b86b77334b2495b9c3eff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec3e2b9e58ba96e229b86b77334b2495b9c3eff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cc549409b6eaf87ba91362809738b0f1f3158e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc549409b6eaf87ba91362809738b0f1f3158e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc549409b6eaf87ba91362809738b0f1f3158e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc549409b6eaf87ba91362809738b0f1f3158e1/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97d45cef597d472c47550365291dcdbf1c31ccec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d45cef597d472c47550365291dcdbf1c31ccec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d45cef597d472c47550365291dcdbf1c31ccec"}], "stats": {"total": 3390, "additions": 3377, "deletions": 13}, "files": [{"sha": "7a4bdbe748b55218a8812b372c82c47477b0d680", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -1,3 +1,21 @@\n+2010-06-01  Arnaud Charlet  <charlet@adacore.com>\n+            Matthew Gingell  <gingell@adacore.com>\n+\n+\t* doc/invoke.texi: Mention -fdump-ada-spec.\n+\t* tree-dump.c (dump_files): Add ada-spec.\n+\t(FIRST_AUTO_NUMBERED_DUMP): Bump to 8.\n+\t* tree-pass.h (tree_dump_index): Add TDI_ada.\n+\t* gcc.c: Add support for -C without -E and for -fdump-ada-spec.\n+\t(cpp_unique_options): Do not reject -C or -CC when -E isn't present.\n+\t(default_compilers) <@c-header>: Allow -fdump-ada-spec on header files.\n+\t* c-decl.c: Include c-ada-spec.h.\n+\t(collect_source_ref_cb, collect_all_refs, for_each_global_decl): New\n+\tfunctions.\n+\t(c_write_global_declarations): Add handling of -fdump-ada-spec.\n+\t* c-lex.c (c_lex_with_flags): Add handling of CPP_COMMENT.\n+\t* Makefile.in (C_AND_OBJC_OBJS): Add c-ada-spec.o.\n+\t* c-ada-spec.h, c-ada-spec.c: New files.\n+\n 2010-06-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/43853"}, {"sha": "27e52b662a9ac99df25332a911c84c8db81340c7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -1133,7 +1133,7 @@ C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n   c-ppoutput.o c-cppbuiltin.o \\\n   c-objc-common.o c-dump.o c-pch.o c-parser.o $(C_TARGET_OBJS) \\\n-  c-gimplify.o tree-mudflap.o c-pretty-print.o c-omp.o\n+  c-gimplify.o tree-mudflap.o c-pretty-print.o c-omp.o c-ada-spec.o\n \n # Language-specific object files for C.\n C_OBJS = c-lang.o stub-objc.o $(C_AND_OBJC_OBJS)\n@@ -1995,7 +1995,7 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     opts.h $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) $(HASHTAB_H) libfuncs.h \\\n     $(EXCEPT_H) $(LANGHOOKS_DEF_H) $(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) \\\n     $(DIAGNOSTIC_CORE_H) $(INPUT_H) langhooks.h tree-mudflap.h \\\n-    pointer-set.h tree-iterator.h c-lang.h $(PLUGIN_H)\n+    pointer-set.h tree-iterator.h c-lang.h $(PLUGIN_H) c-ada-spec.h\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(TREE_H) $(C_TREE_H) $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) \\\n     $(TOPLEV_H) langhooks.h $(TREE_FLOW_H) tree-iterator.h c-lang.h\n@@ -2744,6 +2744,10 @@ tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_PASS_H) value-prof.h output.h tree-pretty-print.h\n tree-diagnostic.o : tree-diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_H) $(DIAGNOSTIC_H) tree-diagnostic.h langhooks.h $(LANGHOOKS_DEF_H)\n+c-ada-spec.o : c-ada-spec.c c-ada-spec.h $(CONFIG_H) $(SYSTEM_H) \\\n+   $(TREE_H) $(REAL_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n+   $(CPP_ID_DATA_H) $(TM_H) coretypes.h tree-iterator.h tree-pass.h \\\n+   value-prof.h fixed-value.h output.h\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(FLAGS_H) $(TOPLEV_H) $(HASHTAB_H) $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h $(TARGET_H) \\"}, {"sha": "a4d417cff77e6a4887381fdab9f03057a7d58efb", "filename": "gcc/c-ada-spec.c", "status": "added", "additions": 3239, "deletions": 0, "changes": 3239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ada-spec.c?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1"}, {"sha": "8aed158678cdc73690d07a7a2f67e0117416384e", "filename": "gcc/c-ada-spec.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-ada-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-ada-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ada-spec.h?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -0,0 +1,41 @@\n+/* Interface for -fdump-ada-spec capability.\n+   Copyright (C) 2010, Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef C_ADA_SPEC_H\n+#define C_ADA_SPEC_H\n+\n+#include \"pretty-print.h\"\n+\n+/* In c-ada-spec.c  */\n+\n+typedef enum {\n+  IS_ABSTRACT,\n+  IS_CONSTRUCTOR,\n+  IS_DESTRUCTOR,\n+  IS_COPY_CONSTRUCTOR,\n+  IS_TEMPLATE\n+} cpp_operation;\n+\n+extern location_t decl_sloc (const_tree, bool);\n+extern void collect_ada_nodes (tree, const char *);\n+extern void collect_source_ref (const char *);\n+extern void dump_ada_specs (void (*)(const char *),\n+\t\t\t    int (*)(tree, cpp_operation));\n+\n+#endif /* ! C_ADA_SPEC_H */"}, {"sha": "cda6ce3ca7741657e38a81c1d07501f243c3369a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks-def.h\"\n #include \"pointer-set.h\"\n #include \"plugin.h\"\n+#include \"c-ada-spec.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -9614,6 +9615,43 @@ c_write_global_declarations_2 (tree globals)\n     debug_hooks->global_decl (decl);\n }\n \n+/* Callback to collect a source_ref from a DECL.  */\n+\n+static void\n+collect_source_ref_cb (tree decl)\n+{\n+  if (!DECL_IS_BUILTIN (decl))\n+    collect_source_ref (LOCATION_FILE (decl_sloc (decl, false)));\n+}\n+\n+/* Collect all references relevant to SOURCE_FILE.  */\n+\n+static void\n+collect_all_refs (const char *source_file)\n+{\n+  tree t;\n+\n+  for (t = all_translation_units; t; t = TREE_CHAIN (t))\n+    collect_ada_nodes (BLOCK_VARS (DECL_INITIAL (t)), source_file);\n+}\n+\n+/* Iterate over all global declarations and call CALLBACK.  */\n+\n+static void\n+for_each_global_decl (void (*callback) (tree decl))\n+{\n+  tree t;\n+  tree decls;\n+  tree decl;\n+\n+  for (t = all_translation_units; t; t = TREE_CHAIN (t))\n+    { \n+      decls = DECL_INITIAL (t);\n+      for (decl = BLOCK_VARS (decls); decl; decl = TREE_CHAIN (decl))\n+\tcallback (decl);\n+    }\n+}\n+\n /* Preserve the external declarations scope across a garbage collect.  */\n static GTY(()) tree ext_block;\n \n@@ -9636,6 +9674,18 @@ c_write_global_declarations (void)\n   external_scope = 0;\n   gcc_assert (!current_scope);\n \n+  /* Handle -fdump-ada-spec[-slim]. */\n+  if (dump_enabled_p (TDI_ada))\n+    {\n+      /* Build a table of files to generate specs for */\n+      if (get_dump_file_info (TDI_ada)->flags & TDF_SLIM)\n+\tcollect_source_ref (main_input_filename);\n+      else\n+\tfor_each_global_decl (collect_source_ref_cb);\n+\n+      dump_ada_specs (collect_all_refs, NULL);\n+    }\n+\n   if (ext_block)\n     {\n       tree tmp = BLOCK_VARS (ext_block);"}, {"sha": "463e595a4814dd5649ade2a1ac5421a42211bb8e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -435,10 +435,14 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \n       /* These tokens should not be visible outside cpplib.  */\n     case CPP_HEADER_NAME:\n-    case CPP_COMMENT:\n     case CPP_MACRO_ARG:\n       gcc_unreachable ();\n \n+    /* CPP_COMMENT will appear when compiling with -C and should be\n+       ignored. */\n+     case CPP_COMMENT:\n+       goto retry;\n+\n     default:\n       *value = NULL_TREE;\n       break;"}, {"sha": "2a4ea479682f4012a1fa22fc9b098df8231b27bf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -164,7 +164,8 @@ in the following sections.\n @gccoptlist{-c  -S  -E  -o @var{file}  -combine  -no-canonical-prefixes  @gol\n -pipe  -pass-exit-codes  @gol\n -x @var{language}  -v  -###  --help@r{[}=@var{class}@r{[},@dots{}@r{]]}  --target-help  @gol\n---version -wrapper@@@var{file} -fplugin=@var{file} -fplugin-arg-@var{name}=@var{arg}}\n+--version -wrapper@@@var{file} -fplugin=@var{file} -fplugin-arg-@var{name}=@var{arg}  @gol\n+-fdump-ada-spec@r{[}-slim@r{]}}\n \n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n@@ -987,7 +988,8 @@ Objective-C++ source code which should not be preprocessed.\n \n @item @var{file}.h\n C, C++, Objective-C or Objective-C++ header file to be turned into a\n-precompiled header.\n+precompiled header (default), or C, C++ header file to be turned into an\n+Ada spec (via the @option{-fdump-ada-spec} switch).\n \n @item @var{file}.cc\n @itemx @var{file}.cp\n@@ -1015,7 +1017,7 @@ Objective-C++ source code which should not be preprocessed.\n @itemx @var{file}.HPP\n @itemx @var{file}.h++\n @itemx @var{file}.tcc\n-C++ header file to be turned into a precompiled header.\n+C++ header file to be turned into a precompiled header or Ada spec.\n \n @item @var{file}.f\n @itemx @var{file}.for\n@@ -1370,6 +1372,11 @@ Plugins API.\n Define an argument called @var{key} with a value of @var{value}\n for the plugin called @var{name}.\n \n+@item -fdump-ada-spec@r{[}-slim@r{]}\n+For C and C++ source and include files, generate corresponding Ada\n+specs. @xref{Generating Ada Bindings for C and C++ headers,,, gnat_ugn,\n+GNAT User's Guide}, which provides detailed documentation on this feature.\n+\n @include @value{srcdir}/../libiberty/at-file.texi\n @end table\n "}, {"sha": "a199f02b46d25af524b919fff9f6f935ab6a919f", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -856,8 +856,7 @@ static const char *trad_capable_cpp =\n    therefore no dependency entry, confuses make into thinking a .o\n    file that happens to exist is up-to-date.  */\n static const char *cpp_unique_options =\n-\"%{C|CC:%{!E:%eGCC does not support -C or -CC without -E}}\\\n- %{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*&F*} %{P} %I\\\n+\"%{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*&F*} %{P} %I\\\n  %{MD:-MD %{!o:%b.d}%{o*:%.d%*}}\\\n  %{MMD:-MMD %{!o:%b.d}%{o*:%.d%*}}\\\n  %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\\n@@ -1091,12 +1090,12 @@ static const struct compiler default_compilers[] =\n \t\t%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i} \\n\\\n \t\t    cc1 -fpreprocessed %{save-temps*:%b.i} %{!save-temps*:%g.i} \\\n \t\t\t%(cc1_options)\\\n-                        -o %g.s %{!o*:--output-pch=%i.gch}\\\n-                        %W{o*:--output-pch=%*}%V}\\\n+                        %{!fdump-ada-spec*:-o %g.s %{!o*:--output-pch=%i.gch}\\\n+                        %W{o*:--output-pch=%*}}%V}\\\n \t  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)\\\n-                    -o %g.s %{!o*:--output-pch=%i.gch}\\\n-                    %W{o*:--output-pch=%*}%V}}}}}}\", 0, 0, 0},\n+                    %{!fdump-ada-spec*:-o %g.s %{!o*:--output-pch=%i.gch}\\\n+                    %W{o*:--output-pch=%*}}%V}}}}}}\", 0, 0, 0},\n   {\".i\", \"@cpp-output\", 0, 1, 0},\n   {\"@cpp-output\",\n    \"%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\", 0, 1, 0},"}, {"sha": "99e9c79fcde778a3e1d9ee6f2bff550e7b9f6e19", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -781,7 +781,8 @@ static struct dump_file_info dump_files[TDI_end] =\n   {\".gimple\", \"tree-gimple\", NULL, TDF_TREE, 0, 4},\n   {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 5},\n   {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 6},\n-#define FIRST_AUTO_NUMBERED_DUMP 7\n+  {\".ads\", \"ada-spec\", NULL, 0, 0, 7},\n+#define FIRST_AUTO_NUMBERED_DUMP 8\n \n   {NULL, \"tree-all\", NULL, TDF_TREE, 0, 0},\n   {NULL, \"rtl-all\", NULL, TDF_RTL, 0, 0},"}, {"sha": "b5971d5433a87382c283dfc58698a5568db748b1", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc549409b6eaf87ba91362809738b0f1f3158e1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=9cc549409b6eaf87ba91362809738b0f1f3158e1", "patch": "@@ -38,6 +38,7 @@ enum tree_dump_index\n   TDI_nested,\t\t\t/* dump each function after unnesting it */\n   TDI_vcg,\t\t\t/* create a VCG graph file for each\n \t\t\t\t   function's flowgraph.  */\n+  TDI_ada,                      /* dump declarations in Ada syntax.  */\n   TDI_tree_all,                 /* enable all the GENERIC/GIMPLE dumps.  */\n   TDI_rtl_all,                  /* enable all the RTL dumps.  */\n   TDI_ipa_all,                  /* enable all the IPA dumps.  */"}]}