{"sha": "9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1OWU5OWE2MDE2NDIwZjM2ZWIzYTJhOGE3OTEyYzU4ZWY5OWExNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-01-13T15:46:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-13T15:46:22Z"}, "message": "re PR middle-end/61912 (Missed (partial) dead store elimination for structures on GIMPLE)\n\n\tPR tree-optimization/61912\n\tPR tree-optimization/77485\n\t* tree-ssa-dse.c: Include expr.h.\n\t(maybe_trim_constructor_store): New function.\n\t(maybe_trim_partially_dead_store): Call maybe_trim_constructor_store.\n\n\tPR tree-optimization/61912\n\tPR tree-optimization/77485\n\t* g++.dg/tree-ssa/ssa-dse-1.C: New test.\n\t* gcc.dg/tree-ssa/pr30375: Adjust expected output.\n\t* gcc.dg/tree-ssa/ssa-dse-24.c: New test.\n\nFrom-SVN: r244443", "tree": {"sha": "9f6f6ea0036d61c5d838b447db3b895284ec705a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6f6ea0036d61c5d838b447db3b895284ec705a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/comments", "author": null, "committer": null, "parents": [{"sha": "d155c6fef06cba08d6ed48b90092c70fa69f8c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d155c6fef06cba08d6ed48b90092c70fa69f8c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d155c6fef06cba08d6ed48b90092c70fa69f8c79"}], "stats": {"total": 254, "additions": 247, "deletions": 7}, "files": [{"sha": "221aff93d49d59cae74e5e852193b49c2eca8ecc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "patch": "@@ -1,8 +1,14 @@\n 2017-01-13  Jeff Law  <law@redhat.com>\n \n-        PR tree-optimization/33562\n-        PR tree-optimization/61912\n-        PR tree-optimization/77485\n+\tPR tree-optimization/61912\n+\tPR tree-optimization/77485\n+\t* tree-ssa-dse.c: Include expr.h.\n+\t(maybe_trim_constructor_store): New function.\n+\t(maybe_trim_partially_dead_store): Call maybe_trim_constructor_store.\n+\n+\tPR tree-optimization/33562\n+\tPR tree-optimization/61912\n+\tPR tree-optimization/77485\n \t* doc/invoke.texi: Document new dse-max-object-size param.\n \t* params.def (PARM_DSE_MAX_OBJECT_SIZE): New PARAM.\n \t* tree-ssa-dse.c: Include params.h."}, {"sha": "bb9b824b18753bd2bed8615995b85433313ed32b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "patch": "@@ -1,8 +1,14 @@\n 2017-01-13  Jeff Law  <law@redhat.com>\n \n-        PR tree-optimization/33562\n-        PR tree-optimization/61912\n-        PR tree-optimization/77485\n+\tPR tree-optimization/61912\n+\tPR tree-optimization/77485\n+\t* g++.dg/tree-ssa/ssa-dse-1.C: New test.\n+\t* gcc.dg/tree-ssa/pr30375: Adjust expected output.\n+\t* gcc.dg/tree-ssa/ssa-dse-24.c: New test.\n+\n+\tPR tree-optimization/33562\n+\tPR tree-optimization/61912\n+\tPR tree-optimization/77485\n \t* gcc.dg/tree-ssa/complex-4.c: Remove xfail.\n \t* gcc.dg/tree-ssa/complex-5.c: Likewise.\n \t* gcc.dg/tree-ssa/ssa-dse-9.c: Likewise."}, {"sha": "1fd8dec99e986c78b54608a335f3f74c5afca7cb", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-dse-1.C", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dse-1.C?ref=9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++14 -O -fdump-tree-dse1-details\" } */\n+\n+using uint = unsigned int;\n+\n+template<typename C, uint S>\n+struct FixBuf\n+{\n+\tC buf[S] = {};\n+};\n+\n+template<typename C>\n+struct OutBuf\n+{\n+\tC*\tcur;\n+\tC*\tend;\n+\tC*\tbeg;\n+\n+\ttemplate<uint S>\n+\tconstexpr\n+\tOutBuf(FixBuf<C, S>& b) : cur{b.buf}, end{b.buf + S}, beg{b.buf} { }\n+\n+\tOutBuf(C* b, C* e) : cur{b}, end{e} { }\n+\tOutBuf(C* b, uint s) : cur{b}, end{b + s} { }\n+\n+\tconstexpr\n+\tOutBuf& operator<<(C v)\n+\t{\n+\t\tif (cur < end) {\n+\t\t\t*cur = v;\n+\t\t}\n+\t\t++cur;\n+\t\treturn *this;\n+\t}\n+\n+\tconstexpr\n+\tOutBuf& operator<<(uint v)\n+\t{\n+\t\tuint q = v / 10U;\n+\t\tuint r = v % 10U;\n+\t\tif (q) {\n+\t\t\t*this << q;\n+\t\t}\n+\t\t*this << static_cast<C>(r + '0');\n+\t\treturn *this;\n+\t}\n+};\n+\n+template<bool BOS>\n+struct BufOrSize\n+{\n+\ttemplate<typename C, uint S>\n+\tstatic constexpr auto Select(FixBuf<C, S>& fb, OutBuf<C>&)\n+\t{\n+\t\treturn fb;\n+\t}\n+};\n+\n+template<>\n+struct BufOrSize<true>\n+{\n+\ttemplate<typename C, uint S>\n+\tstatic constexpr auto Select(FixBuf<C, S>&, OutBuf<C>& ob)\n+\t{\n+\t\treturn ob.cur - ob.beg;\n+\t}\n+};\n+\n+// if BOS=1, it will return the size of the generated data, else the data itself\n+template<uint N, uint S, bool BOS = 0>\n+constexpr\n+auto fixbuf()\n+{\n+\tFixBuf<char, S> fb;\n+\tOutBuf<char> ob{fb};\n+\tfor (uint i = 0; i <= N; ++i) {\n+\t\tob << i << static_cast<char>(i == N ? 0 : ' ');\n+\t}\n+\treturn BufOrSize<BOS>::Select(fb, ob);\n+}\n+\n+auto foo()\n+{\n+\tconstexpr auto x = fixbuf<13, 200>();\n+\treturn x;\n+}\n+\n+auto foo_sized()\n+{\n+\tconstexpr auto s = fixbuf<13, 0, 1>();\n+\tconstexpr auto x = fixbuf<13, s>();\n+\treturn x;\n+}\n+\n+int main()\n+{\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct FixBuf \\\\*\\\\)&<retval> \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" } } */\n+"}, {"sha": "4494a2b0bd6b274ac983914c75580f9098fe00f3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr30375.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr30375.c?ref=9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "patch": "@@ -22,4 +22,5 @@ void test_signed_msg_encoding(void)\n     f();\n }\n \n-/* { dg-final { scan-tree-dump-times \"signInfo = {}\" 1 \"dse1\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct _s \\\\*\\\\)&signInfo \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" } } */\n+"}, {"sha": "282194c1e3279e21e54b1f9349ca45ba0b6a05ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-24.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-24.c?ref=9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse1\" } */\n+\n+\n+typedef unsigned int wchar_t;\n+struct printf_info\n+{\n+  int prec;\n+  int width;\n+  wchar_t spec;\n+  unsigned int is_long_double:1;\n+  unsigned int is_short:1;\n+  unsigned int is_long:1;\n+  unsigned int alt:1;\n+  unsigned int space:1;\n+  unsigned int left:1;\n+  unsigned int showsign:1;\n+  unsigned int group:1;\n+  unsigned int extra:1;\n+  unsigned int is_char:1;\n+  unsigned int wide:1;\n+  unsigned int i18n:1;\n+  unsigned int __pad:4;\n+  unsigned short int user;\n+  wchar_t pad;\n+} info;\n+\n+void bar (struct printf_info *);\n+\n+void foo(int prec,\n+  int width,\n+  wchar_t spec,\n+  unsigned int is_long_double,\n+  unsigned int is_short,\n+  unsigned int is_long,\n+  unsigned int alt,\n+  unsigned int space,\n+  unsigned int left,\n+  unsigned int showsign,\n+  unsigned int group,\n+  wchar_t pad)\n+{\n+    struct printf_info info = {\n+        .prec = prec,\n+        .width = width,\n+        .spec = spec,\n+        .is_long_double = is_long_double,\n+        .is_short = is_short,\n+        .is_long = is_long,\n+        .alt = alt,\n+        .space = space,\n+        .left = left,\n+        .showsign = showsign,\n+        .group = group,\n+        .pad = pad,\n+        .extra = 0,\n+        .wide = sizeof (char) != 1 };\n+\n+    bar (&info);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct printf_info \\\\*\\\\)&info \\\\+ \\[0-9\\]+B\\\\\\] = {}\" 1 \"dse1\" } } */"}, {"sha": "83ce29b86701781e8ec6a1c97d825062e5a30a95", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e59e99a6016420f36eb3a2a8a7912c58ef99a17/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"domwalk.h\"\n #include \"tree-cfgcleanup.h\"\n #include \"params.h\"\n+#include \"alias.h\"\n \n /* This file implements dead store elimination.\n \n@@ -271,6 +272,66 @@ maybe_trim_complex_store (ao_ref *ref, sbitmap live, gimple *stmt)\n      are live.  We do not try to optimize those cases.  */\n }\n \n+/* STMT initializes an object using a CONSTRUCTOR where one or more of the\n+   bytes written are dead stores.  ORIG is the bitmap of bytes stored by\n+   STMT.  LIVE is the bitmap of stores that are actually live.\n+\n+   Attempt to rewrite STMT so that only the real or imaginary part of\n+   the object is actually stored.\n+\n+   The most common case for getting here is a CONSTRUCTOR with no elements\n+   being used to zero initialize an object.  We do not try to handle other\n+   cases as those would force us to fully cover the object with the\n+   CONSTRUCTOR node except for the components that are dead.  */\n+\n+static void\n+maybe_trim_constructor_store (ao_ref *ref, sbitmap live, gimple *stmt)\n+{\n+  tree ctor = gimple_assign_rhs1 (stmt);\n+\n+  /* This is the only case we currently handle.  It actually seems to\n+     catch most cases of actual interest.  */\n+  gcc_assert (CONSTRUCTOR_NELTS (ctor) == 0);\n+\n+  int head_trim = 0;\n+  int tail_trim = 0;\n+  compute_trims (ref, live, &head_trim, &tail_trim);\n+\n+  /* Now we want to replace the constructor initializer\n+     with memset (object + head_trim, 0, size - head_trim - tail_trim).  */\n+  if (head_trim || tail_trim)\n+    {\n+      /* We want &lhs for the MEM_REF expression.  */\n+      tree lhs_addr = build_fold_addr_expr (gimple_assign_lhs (stmt));\n+\n+      if (! is_gimple_min_invariant (lhs_addr))\n+\treturn;\n+\n+      /* The number of bytes for the new constructor.  */\n+      int count = (ref->size / BITS_PER_UNIT) - head_trim - tail_trim;\n+\n+      /* And the new type for the CONSTRUCTOR.  Essentially it's just\n+\t a char array large enough to cover the non-trimmed parts of\n+\t the original CONSTRUCTOR.  Note we want explicit bounds here\n+\t so that we know how many bytes to clear when expanding the\n+\t CONSTRUCTOR.  */\n+      tree type = build_array_type_nelts (char_type_node, count);\n+\n+      /* Build a suitable alias type rather than using alias set zero\n+\t to avoid pessimizing.  */\n+      tree alias_type = reference_alias_ptr_type (gimple_assign_lhs (stmt));\n+\n+      /* Build a MEM_REF representing the whole accessed area, starting\n+\t at the first byte not trimmed.  */\n+      tree exp = fold_build2 (MEM_REF, type, lhs_addr,\n+\t\t\t      build_int_cst (alias_type, head_trim));\n+\n+      /* Now update STMT with a new RHS and LHS.  */\n+      gimple_assign_set_lhs (stmt, exp);\n+      gimple_assign_set_rhs1 (stmt, build_constructor (type, NULL));\n+    }\n+}\n+\n /* STMT is a memory write where one or more bytes written are dead\n    stores.  ORIG is the bitmap of bytes stored by STMT.  LIVE is the\n    bitmap of stores that are actually live.\n@@ -287,6 +348,9 @@ maybe_trim_partially_dead_store (ao_ref *ref, sbitmap live, gimple *stmt)\n     {\n       switch (gimple_assign_rhs_code (stmt))\n \t{\n+\tcase CONSTRUCTOR:\n+\t  maybe_trim_constructor_store (ref, live, stmt);\n+\t  break;\n \tcase COMPLEX_CST:\n \t  maybe_trim_complex_store (ref, live, stmt);\n \t  break;"}]}