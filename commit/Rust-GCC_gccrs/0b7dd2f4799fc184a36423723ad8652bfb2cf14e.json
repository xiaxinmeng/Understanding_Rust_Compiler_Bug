{"sha": "0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "node_id": "C_kwDOANBUbNoAKDBiN2RkMmY0Nzk5ZmMxODRhMzY0MjM3MjNhZDg2NTJiZmIyY2YxNGU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-09T21:58:35Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:26:33Z"}, "message": "RISC-V: Add vnsrl C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vnsrl_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vv_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnsrl_vx_tumu-3.C: New test.", "tree": {"sha": "3a0648f9e3a3b81ba50681473c0a38d71b71d2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a0648f9e3a3b81ba50681473c0a38d71b71d2bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ea34be11c0da54c18b010ab51b97fc95657a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ea34be11c0da54c18b010ab51b97fc95657a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ea34be11c0da54c18b010ab51b97fc95657a4a"}], "stats": {"total": 3960, "additions": 3960, "deletions": 0}, "files": [{"sha": "d1ff982600975dff914b695107ac9fdd2036a0d8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl(vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnsrl(vbool64_t mask,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vbool32_t mask,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vbool16_t mask,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vbool8_t mask,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vbool4_t mask,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vbool2_t mask,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vbool64_t mask,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vbool32_t mask,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vbool16_t mask,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vbool8_t mask,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vbool4_t mask,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vbool64_t mask,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vbool32_t mask,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vbool16_t mask,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vbool8_t mask,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a78e3d3f98a57a036ff1e2e1185a348f86488168", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl(vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnsrl(vbool64_t mask,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vbool32_t mask,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vbool16_t mask,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vbool8_t mask,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vbool4_t mask,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vbool2_t mask,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vbool64_t mask,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vbool32_t mask,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vbool16_t mask,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vbool8_t mask,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vbool4_t mask,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vbool64_t mask,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vbool32_t mask,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vbool16_t mask,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vbool8_t mask,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "95530232250f9d2a471880aa5a9cc747d91fa501", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl(vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnsrl(vbool64_t mask,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vbool32_t mask,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vbool16_t mask,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vbool8_t mask,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vbool4_t mask,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vbool2_t mask,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vbool64_t mask,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vbool32_t mask,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vbool16_t mask,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vbool8_t mask,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vbool4_t mask,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vbool64_t mask,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vbool32_t mask,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vbool16_t mask,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vbool8_t mask,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9b4504623dd3d138df0935e8e3bd269da9ae78e2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f772dd7fd06026b6ee5f919a7682542f732f2b00", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "525f012bfd7975dd5ade7835702d6aff0a04c72d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_mu-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "081c438decf065cd45460f4fd203916771267ba6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tu(vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tu(vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tu(vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tu(vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tu(vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tu(vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tu(vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tu(vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tu(vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tu(vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tu(vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tu(vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tu(vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tu(vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tu(vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "5b3ce209c2140321c33fd389e506c266b2eb00b9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tu(vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tu(vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tu(vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tu(vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tu(vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tu(vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tu(vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tu(vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tu(vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tu(vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tu(vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tu(vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tu(vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tu(vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tu(vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "b0fbd0ca215c64ffdad30bb3ad87c1111322613c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tu-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tu(vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tu(vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tu(vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tu(vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tu(vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tu(vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tu(vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tu(vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tu(vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tu(vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tu(vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tu(vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tu(vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tu(vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tu(vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "82197f6667e1af91b9606f0f85f5fe4313ff6603", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "955e07b7968657681e91f16d00ef074c59359081", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1170714752354e5a4f9bfb83a859df9ca9409440", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tum-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "be166919138daa37aa5e9db67f5c3a8733a88b46", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "52d2ce5a0c052e4441b2ab1f507aac97d6551efc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c4be22c8792098365d10d6b9d12e784dbbaf20ee", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vv_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vv_tumu-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c82b9be83c5cb215496fb92aca9c76fe1735cb5d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnsrl(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "db585a8ea21dc56d256d808054b095de41dd68fa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnsrl(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b980a5e7cdf4dac1044c327ad4b4ff3ee4fa0b5d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnsrl(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2ae2e714567a81695ade9a6bf964fbe458112b80", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "282c25be25c3b37d2fd552d7cb11d89d7a51c53a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "cff5a0a63d56bcc2c1f6b29e78fdc593b636a4d0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_mu-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c1a2a59613688b26ea4677aca123fc7d628ee82a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tu(vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tu(vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tu(vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tu(vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tu(vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tu(vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tu(vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tu(vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tu(vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tu(vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tu(vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tu(vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tu(vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tu(vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tu(vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "51fd7bc052dd3f79cd9ed67d23107ff43c43487b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tu(vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tu(vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tu(vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tu(vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tu(vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tu(vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tu(vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tu(vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tu(vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tu(vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tu(vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tu(vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tu(vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tu(vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tu(vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "678dd38750f002696d7b33c11419074185d4e80d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tu-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tu(vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tu(vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tu(vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tu(vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tu(vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tu(vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tu(vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tu(vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tu(vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tu(vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tu(vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tu(vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tu(vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tu(vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tu(vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "9154ee122008dc3d7d2a604518668abc4c0b9e87", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b1908e8ed0703f28acc901507cce9fc85a449c97", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f2178b615d714c2eb9bf67bda63e2a4e98eb009b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tum-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "cfc444dcd9a490ebf57548de841d3af486324177", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-1.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "36e9b9a3db33e4a727ee94671e1e8bf93479d376", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-2.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "08b859d807716d23d8142726729eecbae84ab786", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnsrl_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dd2f4799fc184a36423723ad8652bfb2cf14e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnsrl_vx_tumu-3.C?ref=0b7dd2f4799fc184a36423723ad8652bfb2cf14e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnsrl\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}