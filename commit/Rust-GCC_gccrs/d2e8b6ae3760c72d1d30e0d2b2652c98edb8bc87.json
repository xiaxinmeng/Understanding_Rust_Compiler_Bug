{"sha": "d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlOGI2YWUzNzYwYzcyZDFkMzBlMGQyYjI2NTJjOThlZGI4YmM4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-24T08:58:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-24T08:58:50Z"}, "message": "re PR target/90568 (stack protector should use cmp or sub, not xor, to allow macro-fusion on x86)\n\n\tPR target/90568\n\t* config/i386/x86-tune-sched.c (ix86_macro_funsion_pair_p): Call\n\tgen_attr_type just once instead of 4-7 times.  Formatting fixes.\n\tHandle stack_protect_test_<mode> codegen similarly to corresponding\n\tsub instruction.\n\nFrom-SVN: r271596", "tree": {"sha": "3903d923531246d8c715b9a2a15ce63d7d85f604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3903d923531246d8c715b9a2a15ce63d7d85f604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d672917b4b324a6aac3743f21b8c58940a0ceb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d672917b4b324a6aac3743f21b8c58940a0ceb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d672917b4b324a6aac3743f21b8c58940a0ceb8"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "0cf0edbd36e7d644579de0673d259fefd47ef483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87", "patch": "@@ -1,3 +1,11 @@\n+2019-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/90568\n+\t* config/i386/x86-tune-sched.c (ix86_macro_funsion_pair_p): Call\n+\tgen_attr_type just once instead of 4-7 times.  Formatting fixes.\n+\tHandle stack_protect_test_<mode> codegen similarly to corresponding\n+\tsub instruction.\n+\n 2019-05-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n        * config/i386/darwin.h: Reject -mfentry*."}, {"sha": "eb84c61456fd4866565b596eb4d15ccbbcbd4d6c", "filename": "gcc/config/i386/x86-tune-sched.c", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c?ref=d2e8b6ae3760c72d1d30e0d2b2652c98edb8bc87", "patch": "@@ -525,6 +525,7 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n   enum rtx_code ccode;\n   rtx compare_set = NULL_RTX, test_if, cond;\n   rtx alu_set = NULL_RTX, addr = NULL_RTX;\n+  enum attr_type condgen_type;\n \n   if (!any_condjump_p (condjmp))\n     return false;\n@@ -538,15 +539,26 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n       || !modified_in_p (cc_reg_1, condgen))\n     return false;\n \n-  if (get_attr_type (condgen) != TYPE_TEST\n-      && get_attr_type (condgen) != TYPE_ICMP\n-      && get_attr_type (condgen) != TYPE_INCDEC\n-      && get_attr_type (condgen) != TYPE_ALU)\n+  condgen_type = get_attr_type (condgen);\n+  if (condgen_type == TYPE_MULTI\n+      && (INSN_CODE (condgen) == CODE_FOR_stack_protect_test_di\n+\t  || INSN_CODE (condgen) == CODE_FOR_stack_protect_test_si)\n+      && TARGET_FUSE_ALU_AND_BRANCH)\n+    {\n+      /* stack_protect_test_<mode> ends with a sub, which subtracts\n+\t a non-rip special memory operand from a GPR.  */\n+      src = NULL_RTX;\n+      alu_set = XVECEXP (PATTERN (condgen), 0, 1);\n+      goto handle_stack_protect_test;\n+    }\n+  else if (condgen_type != TYPE_TEST\n+\t   && condgen_type != TYPE_ICMP\n+\t   && condgen_type != TYPE_INCDEC\n+\t   && condgen_type != TYPE_ALU)\n     return false;\n \n   compare_set = single_set (condgen);\n-  if (compare_set == NULL_RTX\n-      && !TARGET_FUSE_ALU_AND_BRANCH)\n+  if (compare_set == NULL_RTX && !TARGET_FUSE_ALU_AND_BRANCH)\n     return false;\n \n   if (compare_set == NULL_RTX)\n@@ -571,10 +583,8 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n \n   /* Macro-fusion for cmp/test MEM-IMM + conditional jmp is not\n      supported.  */\n-  if ((MEM_P (XEXP (src, 0))\n-       && CONST_INT_P (XEXP (src, 1)))\n-      || (MEM_P (XEXP (src, 1))\n-\t  && CONST_INT_P (XEXP (src, 0))))\n+  if ((MEM_P (XEXP (src, 0)) && CONST_INT_P (XEXP (src, 1)))\n+      || (MEM_P (XEXP (src, 1)) && CONST_INT_P (XEXP (src, 0))))\n     return false;\n \n   /* No fusion for RIP-relative address.  */\n@@ -583,29 +593,27 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n   else if (MEM_P (XEXP (src, 1)))\n     addr = XEXP (XEXP (src, 1), 0);\n \n-  if (addr) {\n-    ix86_address parts;\n-    int ok = ix86_decompose_address (addr, &parts);\n-    gcc_assert (ok);\n+  if (addr)\n+    {\n+      ix86_address parts;\n+      int ok = ix86_decompose_address (addr, &parts);\n+      gcc_assert (ok);\n \n-    if (ix86_rip_relative_addr_p (&parts))\n-      return false;\n-  }\n+      if (ix86_rip_relative_addr_p (&parts))\n+\treturn false;\n+    }\n \n+ handle_stack_protect_test:\n   test_if = SET_SRC (pc_set (condjmp));\n   cond = XEXP (test_if, 0);\n   ccode = GET_CODE (cond);\n   /* Check whether conditional jump use Sign or Overflow Flags.  */\n   if (!TARGET_FUSE_CMP_AND_BRANCH_SOFLAGS\n-      && (ccode == GE\n-          || ccode == GT\n-\t  || ccode == LE\n-\t  || ccode == LT))\n+      && (ccode == GE || ccode == GT || ccode == LE || ccode == LT))\n     return false;\n \n   /* Return true for TYPE_TEST and TYPE_ICMP.  */\n-  if (get_attr_type (condgen) == TYPE_TEST\n-      || get_attr_type (condgen) == TYPE_ICMP)\n+  if (condgen_type == TYPE_TEST || condgen_type == TYPE_ICMP)\n     return true;\n \n   /* The following is the case that macro-fusion for alu + jmp.  */\n@@ -619,11 +627,8 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n \n   /* Macro-fusion for inc/dec + unsigned conditional jump is not\n      supported.  */\n-  if (get_attr_type (condgen) == TYPE_INCDEC\n-      && (ccode == GEU\n-\t  || ccode == GTU\n-\t  || ccode == LEU\n-\t  || ccode == LTU))\n+  if (condgen_type == TYPE_INCDEC\n+      && (ccode == GEU || ccode == GTU || ccode == LEU || ccode == LTU))\n     return false;\n \n   return true;"}]}