{"sha": "e792884f755b35f38d3868ec17473ac608f7dffd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5Mjg4NGY3NTViMzVmMzhkMzg2OGVjMTc0NzNhYzYwOGY3ZGZmZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-04-21T17:44:03Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-04-21T17:44:03Z"}, "message": "tree-pass.h (ipa_opt_pass_d): Rename function_read_summary...\n\n\n\t* tree-pass.h (ipa_opt_pass_d): Rename function_read_summary;\n\tadd write_optimization_summary, read_optimization_summary.\n\t(ipa_write_summaries_of_cgraph_node_set): Remove.\n\t(ipa_write_optimization_summaries): Declare.\n\t(ipa_read_optimization_summaries): Declare.\n\t* ipa-cp.c (pass_ipa_cp): Update.\n\t* ipa-reference.c (pass_ipa_reference): Update.\n\t* ipa-pure-const.c (pass_ipa_pure_const): Update.\n\t* lto-streamer-out.c (pass_ipa_lto_gimple, pass_ipa_lto_finish):\n\tUpdate.\n\t* ipa-inline.c (pass_ipa_inline): Update.\n\t* ipa.c (pass_ipa_whole_program): Update.\n\t* lto-wpa-fixup.c (pass_ipa_lto_wpa_fixup): Update.\n\t* passes.c (ipa_write_summaries_1): Do not test wpa.\n\t(ipa_write_optimization_summaries_1): New.\n\t(ipa_write_optimization_summaries): New.\n\t(ipa_read_summaries): Do not test ltrans.\n\t(ipa_read_optimization_summaries_1): New.\n\t(ipa_read_optimization_summaries): New.\n\n\t* lto.c (lto_wpa_write_files): Update.\n\t(read_cgraph_and_symbols): Be more verbose.\n\t(materialize_cgraph): Likewise.\n\t(do_whole_program_analysis): Likewise.\n\nFrom-SVN: r158616", "tree": {"sha": "cfd66cda5ba04c051de517b5c83b259a5b88d52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfd66cda5ba04c051de517b5c83b259a5b88d52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e792884f755b35f38d3868ec17473ac608f7dffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e792884f755b35f38d3868ec17473ac608f7dffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e792884f755b35f38d3868ec17473ac608f7dffd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e792884f755b35f38d3868ec17473ac608f7dffd/comments", "author": null, "committer": null, "parents": [{"sha": "ecd03d10ccfc428749fcada10f9bee48e13f22cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd03d10ccfc428749fcada10f9bee48e13f22cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd03d10ccfc428749fcada10f9bee48e13f22cc"}], "stats": {"total": 217, "additions": 191, "deletions": 26}, "files": [{"sha": "85d41033672e7f01db2dc57e89c0a12ec7c48319", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1,3 +1,25 @@\n+2010-04-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-pass.h (ipa_opt_pass_d): Rename function_read_summary;\n+\tadd write_optimization_summary, read_optimization_summary.\n+\t(ipa_write_summaries_of_cgraph_node_set): Remove.\n+\t(ipa_write_optimization_summaries): Declare.\n+\t(ipa_read_optimization_summaries): Declare.\n+\t* ipa-cp.c (pass_ipa_cp): Update.\n+\t* ipa-reference.c (pass_ipa_reference): Update.\n+\t* ipa-pure-const.c (pass_ipa_pure_const): Update.\n+\t* lto-streamer-out.c (pass_ipa_lto_gimple, pass_ipa_lto_finish):\n+\tUpdate.\n+\t* ipa-inline.c (pass_ipa_inline): Update.\n+\t* ipa.c (pass_ipa_whole_program): Update.\n+\t* lto-wpa-fixup.c (pass_ipa_lto_wpa_fixup): Update.\n+\t* passes.c (ipa_write_summaries_1): Do not test wpa.\n+\t(ipa_write_optimization_summaries_1): New.\n+\t(ipa_write_optimization_summaries): New.\n+\t(ipa_read_summaries): Do not test ltrans.\n+\t(ipa_read_optimization_summaries_1): New.\n+\t(ipa_read_optimization_summaries): New.\n+\n 2010-04-21  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (lto_output_node): Do not output comdat groups"}, {"sha": "ca7c0e6b7c9cf6221211b3317a669a2270feaa36", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1344,7 +1344,8 @@ struct ipa_opt_pass_d pass_ipa_cp =\n  ipcp_generate_summary,\t\t\t/* generate_summary */\n  ipcp_write_summary,\t\t\t/* write_summary */\n  ipcp_read_summary,\t\t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ NULL,\t\t\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  lto_ipa_fixup_call_notes, \t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t\t\t/* function_transform */"}, {"sha": "fbd695d129ca41fe0e6807d8697f228b71b120d2", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -2135,7 +2135,8 @@ struct ipa_opt_pass_d pass_ipa_inline =\n  inline_generate_summary,\t\t/* generate_summary */\n  inline_write_summary,\t\t\t/* write_summary */\n  inline_read_summary,\t\t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ NULL,\t\t\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  lto_ipa_fixup_call_notes,\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  inline_transform,\t\t\t/* function_transform */"}, {"sha": "d6a0d41307ac5555caeb595f427334894e4f65a0", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1095,7 +1095,8 @@ struct ipa_opt_pass_d pass_ipa_pure_const =\n  generate_summary,\t\t        /* generate_summary */\n  pure_const_write_summary,\t\t/* write_summary */\n  pure_const_read_summary,\t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ NULL,\t\t\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  NULL,\t\t\t\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t                /* function_transform */"}, {"sha": "7183e65a7fdb0cef1ea9f5534e369ee4ba3e22a5", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1514,7 +1514,8 @@ struct ipa_opt_pass_d pass_ipa_reference =\n  generate_summary,\t\t        /* generate_summary */\n  ipa_reference_write_summary,\t\t/* write_summary */\n  ipa_reference_read_summary,\t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ NULL,\t\t\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  NULL,\t\t\t\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t                /* function_transform */"}, {"sha": "3a5ef16d2bea372a06eb8c1056b18fa35070964c", "filename": "gcc/ipa.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -271,6 +271,8 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t\t      node->analyzed = false;\n \t\t      node->local.inlinable = false;\n \t\t    }\n+\t\t  else\n+\t\t    gcc_assert (!clone->in_other_partition);\n \t\t  cgraph_node_remove_callees (node);\n \t\t  if (node->prev_sibling_clone)\n \t\t    node->prev_sibling_clone->next_sibling_clone = node->next_sibling_clone;\n@@ -574,7 +576,8 @@ struct ipa_opt_pass_d pass_ipa_whole_program_visibility =\n  NULL,\t\t\t\t\t/* generate_summary */\n  NULL,\t\t\t\t\t/* write_summary */\n  NULL,\t\t\t\t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ NULL,\t\t\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  NULL,\t\t\t\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t\t\t/* function_transform */"}, {"sha": "c9220254db99cbcfb81c87a65f9d69bfb937672b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -2147,7 +2147,8 @@ struct ipa_opt_pass_d pass_ipa_lto_gimple_out =\n  NULL,\t\t                        /* generate_summary */\n  lto_output,           \t\t\t/* write_summary */\n  NULL,\t\t         \t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ lto_output,           \t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  NULL,\t\t\t\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t                /* function_transform */\n@@ -2565,7 +2566,8 @@ struct ipa_opt_pass_d pass_ipa_lto_finish_out =\n  NULL,\t\t                        /* generate_summary */\n  produce_asm_for_decls,\t\t\t/* write_summary */\n  NULL,\t\t         \t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ produce_asm_for_decls,\t\t\t/* write_optimization_summary */\n+ NULL,\t\t\t\t\t/* read_optimization_summary */\n  NULL,\t\t\t\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t                /* function_transform */"}, {"sha": "46d66e5b192cac53410a3cbe02bd6c5289de25ff", "filename": "gcc/lto-wpa-fixup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto-wpa-fixup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto-wpa-fixup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wpa-fixup.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -271,9 +271,10 @@ struct ipa_opt_pass_d pass_ipa_lto_wpa_fixup =\n   TODO_dump_func                        /* todo_flags_finish */\n  },\n  NULL,\t\t                        /* generate_summary */\n- lto_output_wpa_fixup,\t\t\t/* write_summary */\n- lto_input_wpa_fixup,\t\t\t/* read_summary */\n- NULL,\t\t\t\t\t/* function_read_summary */\n+ NULL,\t\t\t\t\t/* write_summary */\n+ NULL,\t\t\t\t\t/* read_summary */\n+ lto_output_wpa_fixup,\t\t\t/* write_optimization_summary */\n+ lto_input_wpa_fixup,\t\t\t/* read_optimization_summary */\n  NULL,\t\t\t\t\t/* stmt_fixup */\n  0,\t\t\t\t\t/* TODOs */\n  NULL,\t\t\t                /* function_transform */"}, {"sha": "74e06502c502dba4fc66464d7a400261fccd355a", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1,3 +1,10 @@\n+2010-04-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto.c (lto_wpa_write_files): Update.\n+\t(read_cgraph_and_symbols): Be more verbose.\n+\t(materialize_cgraph): Likewise.\n+\t(do_whole_program_analysis): Likewise.\n+\n 2010-04-21  Jan Hubicka  <jh@suse.cz>\n \n \t* lto.c (globalize_cross_file_statics): When function has address taken,"}, {"sha": "12475f1d3cf972da0fcd4b7d62ff5fc07a7dc3e4", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1046,7 +1046,7 @@ lto_wpa_write_files (void)\n \n \t  lto_set_current_out_file (file);\n \n-\t  ipa_write_summaries_of_cgraph_node_set (set);\n+\t  ipa_write_optimization_summaries (set);\n \n \t  lto_set_current_out_file (NULL);\n \t  lto_elf_file_close (file);\n@@ -1822,10 +1822,18 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n       gcc_assert (num_objects == nfiles);\n     }\n \n+  if (!quiet_flag)\n+    fprintf (stderr, \"Reading object files:\");\n+\n   /* Read all of the object files specified on the command line.  */\n   for (i = 0, last_file_ix = 0; i < nfiles; ++i)\n     {\n       struct lto_file_decl_data *file_data = NULL;\n+      if (!quiet_flag)\n+\t{\n+\t  fprintf (stderr, \" %s\", fnames[i]);\n+\t  fflush (stderr);\n+\t}\n \n       current_lto_file = lto_elf_file_open (fnames[i], false);\n       if (!current_lto_file)\n@@ -1852,18 +1860,30 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   /* Each pass will set the appropriate timer.  */\n   timevar_pop (TV_IPA_LTO_DECL_IO);\n \n+  if (!quiet_flag)\n+    fprintf (stderr, \"\\nReading the callgraph\\n\");\n+\n   /* Read the callgraph.  */\n   input_cgraph ();\n \n+  if (!quiet_flag)\n+    fprintf (stderr, \"Merging declarations\\n\");\n+\n   /* Merge global decls.  */\n   lto_symtab_merge_decls ();\n \n   /* Fixup all decls and types and free the type hash tables.  */\n   lto_fixup_decls (all_file_decl_data);\n   free_gimple_type_tables ();\n \n+  if (!quiet_flag)\n+    fprintf (stderr, \"Reading summaries\\n\");\n+\n   /* Read the IPA summary data.  */\n-  ipa_read_summaries ();\n+  if (flag_ltrans)\n+    ipa_read_optimization_summaries ();\n+  else\n+    ipa_read_summaries ();\n \n   /* Finally merge the cgraph according to the decl merging decisions.  */\n   lto_symtab_merge_cgraph_nodes ();\n@@ -1909,6 +1929,11 @@ materialize_cgraph (void)\n   unsigned i;\n   timevar_id_t lto_timer;\n \n+  if (!quiet_flag)\n+    fprintf (stderr,\n+\t     flag_wpa ? \"Materializing decls:\" : \"Reading function bodies:\");\n+\n+\n   /* Now that we have input the cgraph, we need to clear all of the aux\n      nodes and read the functions if we are not running in WPA mode.  */\n   timevar_push (TV_IPA_LTO_GIMPLE_IO);\n@@ -1927,6 +1952,7 @@ materialize_cgraph (void)\n       if (node->local.lto_file_data\n           && !DECL_IS_BUILTIN (node->decl))\n \t{\n+\t  announce_function (node->decl);\n \t  lto_materialize_function (node);\n \t  lto_stats.num_input_cgraph_nodes++;\n \t}\n@@ -1950,6 +1976,8 @@ materialize_cgraph (void)\n \n   /* Fix up any calls to DECLs that have become not exception throwing.  */\n   lto_fixup_nothrow_decls ();\n+  if (!quiet_flag)\n+    fprintf (stderr, \"\\n\");\n \n   timevar_pop (lto_timer);\n }\n@@ -1987,7 +2015,14 @@ do_whole_program_analysis (void)\n \n   lto_1_to_1_map ();\n \n+  if (!quiet_flag)\n+    {\n+      fprintf (stderr, \"\\nStreaming out\");\n+      fflush (stderr);\n+    }\n   output_files = lto_wpa_write_files ();\n+  if (!quiet_flag)\n+    fprintf (stderr, \"\\n\");\n \n   /* Show the LTO report before launching LTRANS.  */\n   if (flag_lto_report)"}, {"sha": "d9bf3cca77a41c2606392da133b0ea48d778ba56", "filename": "gcc/passes.c", "status": "modified", "additions": 95, "deletions": 8, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -1674,8 +1674,8 @@ ipa_write_summaries_1 (cgraph_node_set set)\n   struct lto_out_decl_state *state = lto_new_out_decl_state ();\n   lto_push_out_decl_state (state);\n \n-  if (!flag_wpa)\n-    ipa_write_summaries_2 (all_regular_ipa_passes, set, state);\n+  gcc_assert (!flag_wpa);\n+  ipa_write_summaries_2 (all_regular_ipa_passes, set, state);\n   ipa_write_summaries_2 (all_lto_gen_passes, set, state);\n \n   gcc_assert (lto_get_out_decl_state () == state);\n@@ -1730,15 +1730,58 @@ ipa_write_summaries (void)\n   ggc_free (set);\n }\n \n+/* Same as execute_pass_list but assume that subpasses of IPA passes\n+   are local passes. If SET is not NULL, write out optimization summaries of\n+   only those node in SET. */\n \n-/* Write all the summaries for the cgraph nodes in SET.  If SET is\n+static void\n+ipa_write_optimization_summaries_1 (struct opt_pass *pass, cgraph_node_set set,\n+\t\t       struct lto_out_decl_state *state)\n+{\n+  while (pass)\n+    {\n+      struct ipa_opt_pass_d *ipa_pass = (struct ipa_opt_pass_d *)pass;\n+      gcc_assert (!current_function_decl);\n+      gcc_assert (!cfun);\n+      gcc_assert (pass->type == SIMPLE_IPA_PASS || pass->type == IPA_PASS);\n+      if (pass->type == IPA_PASS\n+\t  && ipa_pass->write_optimization_summary\n+\t  && (!pass->gate || pass->gate ()))\n+\t{\n+\t  /* If a timevar is present, start it.  */\n+\t  if (pass->tv_id)\n+\t    timevar_push (pass->tv_id);\n+\n+\t  ipa_pass->write_optimization_summary (set);\n+\n+\t  /* If a timevar is present, start it.  */\n+\t  if (pass->tv_id)\n+\t    timevar_pop (pass->tv_id);\n+\t}\n+\n+      if (pass->sub && pass->sub->type != GIMPLE_PASS)\n+\tipa_write_optimization_summaries_1 (pass->sub, set, state);\n+\n+      pass = pass->next;\n+    }\n+}\n+\n+/* Write all the optimization summaries for the cgraph nodes in SET.  If SET is\n    NULL, write out all summaries of all nodes. */\n \n void\n-ipa_write_summaries_of_cgraph_node_set (cgraph_node_set set)\n+ipa_write_optimization_summaries (cgraph_node_set set)\n {\n-  if (flag_generate_lto && !(errorcount || sorrycount))\n-    ipa_write_summaries_1 (set);\n+  struct lto_out_decl_state *state = lto_new_out_decl_state ();\n+  lto_push_out_decl_state (state);\n+\n+  gcc_assert (flag_wpa);\n+  ipa_write_optimization_summaries_1 (all_regular_ipa_passes, set, state);\n+  ipa_write_optimization_summaries_1 (all_lto_gen_passes, set, state);\n+\n+  gcc_assert (lto_get_out_decl_state () == state);\n+  lto_pop_out_decl_state ();\n+  lto_delete_out_decl_state (state);\n }\n \n /* Same as execute_pass_list but assume that subpasses of IPA passes\n@@ -1783,11 +1826,55 @@ ipa_read_summaries_1 (struct opt_pass *pass)\n void\n ipa_read_summaries (void)\n {\n-  if (!flag_ltrans)\n-    ipa_read_summaries_1 (all_regular_ipa_passes);\n+  ipa_read_summaries_1 (all_regular_ipa_passes);\n   ipa_read_summaries_1 (all_lto_gen_passes);\n }\n \n+/* Same as execute_pass_list but assume that subpasses of IPA passes\n+   are local passes.  */\n+\n+static void\n+ipa_read_optimization_summaries_1 (struct opt_pass *pass)\n+{\n+  while (pass)\n+    {\n+      struct ipa_opt_pass_d *ipa_pass = (struct ipa_opt_pass_d *) pass;\n+\n+      gcc_assert (!current_function_decl);\n+      gcc_assert (!cfun);\n+      gcc_assert (pass->type == SIMPLE_IPA_PASS || pass->type == IPA_PASS);\n+\n+      if (pass->gate == NULL || pass->gate ())\n+\t{\n+\t  if (pass->type == IPA_PASS && ipa_pass->read_optimization_summary)\n+\t    {\n+\t      /* If a timevar is present, start it.  */\n+\t      if (pass->tv_id)\n+\t\ttimevar_push (pass->tv_id);\n+\n+\t      ipa_pass->read_optimization_summary ();\n+\n+\t      /* Stop timevar.  */\n+\t      if (pass->tv_id)\n+\t\ttimevar_pop (pass->tv_id);\n+\t    }\n+\n+\t  if (pass->sub && pass->sub->type != GIMPLE_PASS)\n+\t    ipa_read_optimization_summaries_1 (pass->sub);\n+\t}\n+      pass = pass->next;\n+    }\n+}\n+\n+/* Read all the summaries for all_regular_ipa_passes and all_lto_gen_passes.  */\n+\n+void\n+ipa_read_optimization_summaries (void)\n+{\n+  ipa_read_optimization_summaries_1 (all_regular_ipa_passes);\n+  ipa_read_optimization_summaries_1 (all_lto_gen_passes);\n+}\n+\n /* Same as execute_pass_list but assume that subpasses of IPA passes\n    are local passes.  */\n void"}, {"sha": "42ef8b203920b07fa91a35639ec602dfd82e7fe9", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e792884f755b35f38d3868ec17473ac608f7dffd/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=e792884f755b35f38d3868ec17473ac608f7dffd", "patch": "@@ -182,11 +182,15 @@ struct ipa_opt_pass_d\n   /* This hook is used to serialize IPA summaries on disk.  */\n   void (*write_summary) (struct cgraph_node_set_def *);\n \n-  /* For most ipa passes, the information can only be deserialized in\n-     one chunk.  However, function bodies are read function at a time\n-     as needed so both calls are necessary.  */\n+  /* This hook is used to deserialize IPA summaries from disk.  */\n   void (*read_summary) (void);\n-  void (*function_read_summary) (struct cgraph_node *);\n+\n+  /* This hook is used to serialize IPA optimization summaries on disk.  */\n+  void (*write_optimization_summary) (struct cgraph_node_set_def *);\n+\n+  /* This hook is used to deserialize IPA summaries from disk.  */\n+  void (*read_optimization_summary) (void);\n+\n   /* Hook to convert gimple stmt uids into true gimple statements.  The second\n      parameter is an array of statements indexed by their uid. */\n   void (*stmt_fixup) (struct cgraph_node *, gimple *);\n@@ -601,9 +605,9 @@ extern const char *get_current_pass_name (void);\n extern void print_current_pass (FILE *);\n extern void debug_pass (void);\n extern void ipa_write_summaries (void);\n-extern void ipa_write_summaries_of_cgraph_node_set (\n-\t      struct cgraph_node_set_def *);\n+extern void ipa_write_optimization_summaries (struct cgraph_node_set_def *);\n extern void ipa_read_summaries (void);\n+extern void ipa_read_optimization_summaries (void);\n extern void register_one_dump_file (struct opt_pass *);\n extern bool function_called_by_processed_nodes_p (void);\n extern void register_pass (struct register_pass_info *);"}]}