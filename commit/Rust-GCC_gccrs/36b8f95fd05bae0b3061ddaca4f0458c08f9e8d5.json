{"sha": "36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiOGY5NWZkMDViYWUwYjMwNjFkZGFjYTRmMDQ1OGMwOGY5ZThkNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:14:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:14:10Z"}, "message": "[multiple changes]\n\n2011-08-31  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch7.ads, exp_ch7.adb (Finalization_Exception_Data): New type to\n\thold variables between these following subprograms.\n\t(Build_Exception_Handler, Build_Object_Declarations,\n\tBuild_Raise_Statement): Use the above type as parameter.\n\tMake the above adjustments.\n\t* exp_intr.adb (Expand_Unc_Deallocation): Adjust.\n\n2011-08-31  Pascal Obry  <obry@adacore.com>\n\n\t* projects.texi: Minor reformatting.\n\n2011-08-31  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-ransee.ads, s-ransee.adb: Add system.random_seed unit.\n\t* s-rannum.adb (Reset): Use Get_Seed from s-ransee.\n\n2011-08-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb: Minor code cleanup.\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): Set ekind of loop variable to\n\tprevent cascaded errors.\n\t(Analyze_Loop_Statement): In semantics-only mode, introduce loop\n\tvariable of an iterator specification in current scope.\n\t* sem_ch6.adb (Analyze_Return_Statement, Find_what_It_Apples_To): Skip\n\tpostconditions on the stack, as they contain no return statements.\n\n2011-08-31  Yannick Moy  <moy@adacore.com>\n\n\t* exp_alfa.adb (Expand_Alfa_N_Package_Declaration,\n\tExpand_Alfa_N_Subprogram_Body): Remove useless procedures which simply\n\tcall Qualify_Entity_Names.\n\t(Expand_Alfa): call Qualify_Entity_Names in more cases\n\t* lib-xref-alfa.adb: Take into account system package.\n\t* sem_prag.adb Take into account restrictions in Alfa mode, contrary to\n\tCodePeer mode in which we are interested in finding bugs even if\n\tcompiler cannot compile source.\n\t* sem_util.adb, sem_util.ads (Unique_Entity): Take into account case of\n\tdeferred constant.\n\n2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch3.adb (Constrain_Concurrent): Retrieve Base_Type of the subtype\n\tdenoted by the subtype mark to ensure getting the concurrent type in\n\tthe case where the subtype mark denotes a private subtype of a\n\tconcurrent type (needed when using -gnatc).\n\t(Process_Subtype): For the processing specific to type kinds, case on\n\tthe Base_Type kind of the Subtype_Mark_Id, to handle cases where the\n\tsubtype denotes a private subtype whose base type is nonprivate (needed\n\tfor subtypes of private fulfilled by task types when compiling with\n\t-gnatc).\n\n2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_disp.adb (Check_Dispatching_Operation): Bypass registration of\n\tlate primitives that override interface operations when the full\n\texpander is not active, to avoid blowups in Register_Primitive when\n\ttypes don't have associated secondary dispatch tables.\n\n2011-08-31  Yannick Moy  <moy@adacore.com>\n\n\t* alfa_test.adb: Code clean up.\n\n2011-08-31  Marc Sango  <sango@adacore.com>\n\n\t* restrict.adb (Check_SPARK_Restriction): Change Comes_From_Source (N)\n\tby Comes_From_Source (Original_Node (N)) in order to treat also the\n\tnodes which have been rewritten.\n\t* sem_ch4.adb (Analyze_Explicit_Dereference, Analyze_Slice): Guard the\n\texplicit dereference and slice violation in spark mode on the nodes \n\tcoming only from the source code.\n\nFrom-SVN: r178365", "tree": {"sha": "b9b708390d471cfd292189c4bb21c4acb80c2cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9b708390d471cfd292189c4bb21c4acb80c2cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/comments", "author": null, "committer": null, "parents": [{"sha": "8cf23b91885b80e1f673cbc4135d01390b65d213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf23b91885b80e1f673cbc4135d01390b65d213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf23b91885b80e1f673cbc4135d01390b65d213"}], "stats": {"total": 812, "additions": 473, "deletions": 339}, "files": [{"sha": "8595b8b05aeb0596ceb9eb7f08b1fe774b4bafe1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -1,3 +1,76 @@\n+2011-08-31  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch7.ads, exp_ch7.adb (Finalization_Exception_Data): New type to\n+\thold variables between these following subprograms.\n+\t(Build_Exception_Handler, Build_Object_Declarations,\n+\tBuild_Raise_Statement): Use the above type as parameter.\n+\tMake the above adjustments.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Adjust.\n+\n+2011-08-31  Pascal Obry  <obry@adacore.com>\n+\n+\t* projects.texi: Minor reformatting.\n+\n+2011-08-31  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-ransee.ads, s-ransee.adb: Add system.random_seed unit.\n+\t* s-rannum.adb (Reset): Use Get_Seed from s-ransee.\n+\n+2011-08-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb: Minor code cleanup.\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): Set ekind of loop variable to\n+\tprevent cascaded errors.\n+\t(Analyze_Loop_Statement): In semantics-only mode, introduce loop\n+\tvariable of an iterator specification in current scope.\n+\t* sem_ch6.adb (Analyze_Return_Statement, Find_what_It_Apples_To): Skip\n+\tpostconditions on the stack, as they contain no return statements.\n+\n+2011-08-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_alfa.adb (Expand_Alfa_N_Package_Declaration,\n+\tExpand_Alfa_N_Subprogram_Body): Remove useless procedures which simply\n+\tcall Qualify_Entity_Names.\n+\t(Expand_Alfa): call Qualify_Entity_Names in more cases\n+\t* lib-xref-alfa.adb: Take into account system package.\n+\t* sem_prag.adb Take into account restrictions in Alfa mode, contrary to\n+\tCodePeer mode in which we are interested in finding bugs even if\n+\tcompiler cannot compile source.\n+\t* sem_util.adb, sem_util.ads (Unique_Entity): Take into account case of\n+\tdeferred constant.\n+\n+2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Concurrent): Retrieve Base_Type of the subtype\n+\tdenoted by the subtype mark to ensure getting the concurrent type in\n+\tthe case where the subtype mark denotes a private subtype of a\n+\tconcurrent type (needed when using -gnatc).\n+\t(Process_Subtype): For the processing specific to type kinds, case on\n+\tthe Base_Type kind of the Subtype_Mark_Id, to handle cases where the\n+\tsubtype denotes a private subtype whose base type is nonprivate (needed\n+\tfor subtypes of private fulfilled by task types when compiling with\n+\t-gnatc).\n+\n+2011-08-31  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Operation): Bypass registration of\n+\tlate primitives that override interface operations when the full\n+\texpander is not active, to avoid blowups in Register_Primitive when\n+\ttypes don't have associated secondary dispatch tables.\n+\n+2011-08-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* alfa_test.adb: Code clean up.\n+\n+2011-08-31  Marc Sango  <sango@adacore.com>\n+\n+\t* restrict.adb (Check_SPARK_Restriction): Change Comes_From_Source (N)\n+\tby Comes_From_Source (Original_Node (N)) in order to treat also the\n+\tnodes which have been rewritten.\n+\t* sem_ch4.adb (Analyze_Explicit_Dereference, Analyze_Slice): Guard the\n+\texplicit dereference and slice violation in spark mode on the nodes \n+\tcoming only from the source code.\n+\n 2011-08-31  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch5.adb, exp_alfa.ads, prj.ads, sem_attr.adb,"}, {"sha": "762ca78da28e0e5d753f94aadd33bc23386331db", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -603,6 +603,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-powtab$(objext) \\\n   s-purexc$(objext) \\\n   s-rannum$(objext) \\\n+  s-ransee$(objext) \\\n   s-regexp$(objext) \\\n   s-regpat$(objext) \\\n   s-restri$(objext) \\"}, {"sha": "1e83477506ae98ae6da75193a0450a177bcf1a5b", "filename": "gcc/ada/alfa_test.adb", "status": "modified", "additions": 26, "deletions": 41, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Falfa_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Falfa_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa_test.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -39,23 +39,30 @@\n with Get_Alfa;\n with Put_Alfa;\n \n-with Alfa;  use Alfa;\n-with Types; use Types;\n+with Alfa;                  use Alfa;\n+with Types;                 use Types;\n \n with Ada.Command_Line;      use Ada.Command_Line;\n with Ada.Streams;           use Ada.Streams;\n with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;\n with Ada.Text_IO;\n \n+with GNAT.OS_Lib;           use GNAT.OS_Lib;\n+\n procedure Alfa_Test is\n    Infile    : File_Type;\n+   Name1     : String_Access;\n    Outfile_1 : File_Type;\n+   Name2     : String_Access;\n    Outfile_2 : File_Type;\n    C         : Character;\n \n    Stop : exception;\n    --  Terminate execution\n \n+   Diff_Exec   : constant String_Access := Locate_Exec_On_Path (\"diff\");\n+   Diff_Result : Integer;\n+\n    use ASCII;\n \n begin\n@@ -64,9 +71,12 @@ begin\n       raise Stop;\n    end if;\n \n-   Create (Outfile_1, Out_File, \"log1\");\n-   Create (Outfile_2, Out_File, \"log2\");\n+   Name1 := new String'(Argument (1) & \".1\");\n+   Name2 := new String'(Argument (1) & \".2\");\n+\n    Open   (Infile,    In_File,  Argument (1));\n+   Create (Outfile_1, Out_File, Name1.all);\n+   Create (Outfile_2, Out_File, Name2.all);\n \n    --  Read input file till we get to first 'F' line\n \n@@ -281,49 +291,24 @@ begin\n \n       Write_Info_Terminate;\n \n-      --  Now Outfile_1 and Outfile_2 should be identical\n-\n-      Compare_Files : declare\n-         Line : Natural;\n-         Col  : Natural;\n-         C1   : Character;\n-         C2   : Character;\n-\n-      begin\n-         Reset (Outfile_1, In_File);\n-         Reset (Outfile_2, In_File);\n+      --  Flush to disk\n \n-         --  Loop to compare the two files\n+      Close (Outfile_1);\n+      Close (Outfile_2);\n \n-         Line := 1;\n-         Col  := 1;\n-         loop\n-            C1 := Get_Char (Outfile_1);\n-            C2 := Get_Char (Outfile_2);\n-            exit when C1 = EOF or else C1 /= C2;\n-\n-            if C1 = LF then\n-               Line := Line + 1;\n-               Col  := 1;\n-            else\n-               Col := Col + 1;\n-            end if;\n-         end loop;\n+      --  Now Outfile_1 and Outfile_2 should be identical\n \n-         --  If we reached the end of file, then the files were identical,\n-         --  otherwise, we have a failure in the comparison.\n+      Diff_Result :=\n+        Spawn (Diff_Exec.all,\n+               Argument_String_To_List\n+                 (\"-u \" & Name1.all & \" \" & Name2.all).all);\n \n-         if C1 = EOF then\n-            --  Success: exit silently\n+      if Diff_Result /= 0 then\n+         Ada.Text_IO.Put_Line (\"diff(1) exit status\" & Diff_Result'Img);\n+      end if;\n \n-            null;\n+      OS_Exit (Diff_Result);\n \n-         else\n-            Ada.Text_IO.Put_Line\n-              (Argument (1) & \": failure, files log1 and log2 differ at line\"\n-               & Line'Img & \" column\" & Col'Img);\n-         end if;\n-      end Compare_Files;\n    end Process;\n \n exception"}, {"sha": "04c8484cb0ccc59cc2075c76642c36d8383e2056", "filename": "gcc/ada/exp_alfa.adb", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_alfa.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -51,15 +51,9 @@ package body Exp_Alfa is\n    procedure Expand_Alfa_N_Attribute_Reference (N : Node_Id);\n    --  Expand attributes 'Old and 'Result only\n \n-   procedure Expand_Alfa_N_Package_Declaration (N : Node_Id);\n-   --  Fully qualify names of enclosed entities\n-\n    procedure Expand_Alfa_N_Simple_Return_Statement (N : Node_Id);\n    --  Insert conversion on function return if necessary\n \n-   procedure Expand_Alfa_N_Subprogram_Body (N : Node_Id);\n-   --  Fully qualify names of enclosed entities\n-\n    procedure Expand_Alfa_Simple_Function_Return (N : Node_Id);\n    --  Expand simple return from function\n \n@@ -71,15 +65,15 @@ package body Exp_Alfa is\n    begin\n       case Nkind (N) is\n \n-         when N_Package_Declaration =>\n-            Expand_Alfa_N_Package_Declaration (N);\n+         when N_Package_Body        |\n+              N_Package_Declaration |\n+              N_Subprogram_Body     |\n+              N_Block_Statement     =>\n+            Qualify_Entity_Names (N);\n \n          when N_Simple_Return_Statement =>\n             Expand_Alfa_N_Simple_Return_Statement (N);\n \n-         when N_Subprogram_Body =>\n-            Expand_Alfa_N_Subprogram_Body (N);\n-\n          when N_Function_Call            |\n               N_Procedure_Call_Statement =>\n             Expand_Alfa_Call (N);\n@@ -173,15 +167,6 @@ package body Exp_Alfa is\n       end case;\n    end Expand_Alfa_N_Attribute_Reference;\n \n-   ---------------------------------------\n-   -- Expand_Alfa_N_Package_Declaration --\n-   ---------------------------------------\n-\n-   procedure Expand_Alfa_N_Package_Declaration (N : Node_Id) is\n-   begin\n-      Qualify_Entity_Names (N);\n-   end Expand_Alfa_N_Package_Declaration;\n-\n    -------------------------------------------\n    -- Expand_Alfa_N_Simple_Return_Statement --\n    -------------------------------------------\n@@ -222,15 +207,6 @@ package body Exp_Alfa is\n          return;\n    end Expand_Alfa_N_Simple_Return_Statement;\n \n-   -----------------------------------\n-   -- Expand_Alfa_N_Subprogram_Body --\n-   -----------------------------------\n-\n-   procedure Expand_Alfa_N_Subprogram_Body (N : Node_Id) is\n-   begin\n-      Qualify_Entity_Names (N);\n-   end Expand_Alfa_N_Subprogram_Body;\n-\n    ----------------------------------------\n    -- Expand_Alfa_Simple_Function_Return --\n    ----------------------------------------"}, {"sha": "5203885712d23c8be816011d212f5366d65543f8", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -2905,7 +2905,7 @@ package body Exp_Ch5 is\n       Loc    : constant Source_Ptr := Sloc (N);\n \n       Container     : constant Node_Id   := Name (I_Spec);\n-      Container_Typ : constant Entity_Id := Etype (Container);\n+      Container_Typ : constant Entity_Id := Base_Type (Etype (Container));\n       Cursor        : Entity_Id;\n       Iterator      : Entity_Id;\n       New_Loop      : Node_Id;\n@@ -2990,7 +2990,7 @@ package body Exp_Ch5 is\n          --       declare\n          --       --  the block is added when Element_Type is controlled\n \n-         --          Obj : Pack.Element_Type := Element (Iterator);\n+         --          Obj : Pack.Element_Type := Element (Cursor);\n          --          --  for the \"of\" loop form\n          --       begin\n          --          <original loop statements>\n@@ -3156,9 +3156,11 @@ package body Exp_Ch5 is\n \n             --  X in Iterate (S) : type of iterator is type of explicitly\n             --  given Iterate function, and the loop variable is the cursor.\n+            --  It will be assigned in the loop and must be a variable.\n \n             else\n                Cursor := Id;\n+               Set_Ekind (Cursor, E_Variable);\n             end if;\n \n             Iterator := Make_Temporary (Loc, 'I');\n@@ -3247,6 +3249,8 @@ package body Exp_Ch5 is\n                    Subtype_Mark  => New_Occurrence_Of (Iter_Type, Loc),\n                    Name          => Relocate_Node (Name (I_Spec)));\n \n+               --  Create declaration for cursor.\n+\n                Decl2 :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Cursor,"}, {"sha": "09015394f1e5f8520c057f19fddbea374b710b4a", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 145, "deletions": 179, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -711,36 +711,35 @@ package body Exp_Ch7 is\n    -----------------------------\n \n    function Build_Exception_Handler\n-     (Loc         : Source_Ptr;\n-      E_Id        : Entity_Id;\n-      Raised_Id   : Entity_Id;\n+     (Data        : Finalization_Exception_Data;\n       For_Library : Boolean := False) return Node_Id\n    is\n       Actuals      : List_Id;\n       Proc_To_Call : Entity_Id;\n \n    begin\n-      pragma Assert (Present (E_Id));\n-      pragma Assert (Present (Raised_Id));\n+      pragma Assert (Present (Data.E_Id));\n+      pragma Assert (Present (Data.Raised_Id));\n \n       --  Generate:\n       --    Get_Current_Excep.all.all\n \n       Actuals := New_List (\n-        Make_Explicit_Dereference (Loc,\n+        Make_Explicit_Dereference (Data.Loc,\n           Prefix =>\n-            Make_Function_Call (Loc,\n+            Make_Function_Call (Data.Loc,\n               Name =>\n-                Make_Explicit_Dereference (Loc,\n+                Make_Explicit_Dereference (Data.Loc,\n                   Prefix =>\n-                    New_Reference_To (RTE (RE_Get_Current_Excep), Loc)))));\n+                    New_Reference_To (RTE (RE_Get_Current_Excep),\n+                                      Data.Loc)))));\n \n       if For_Library and then not Restricted_Profile then\n          Proc_To_Call := RTE (RE_Save_Library_Occurrence);\n \n       else\n          Proc_To_Call := RTE (RE_Save_Occurrence);\n-         Prepend_To (Actuals, New_Reference_To (E_Id, Loc));\n+         Prepend_To (Actuals, New_Reference_To (Data.E_Id, Data.Loc));\n       end if;\n \n       --  Generate:\n@@ -754,23 +753,23 @@ package body Exp_Ch7 is\n       --       end if;\n \n       return\n-        Make_Exception_Handler (Loc,\n+        Make_Exception_Handler (Data.Loc,\n           Exception_Choices =>\n-            New_List (Make_Others_Choice (Loc)),\n+            New_List (Make_Others_Choice (Data.Loc)),\n           Statements => New_List (\n-            Make_If_Statement (Loc,\n+            Make_If_Statement (Data.Loc,\n               Condition       =>\n-                Make_Op_Not (Loc,\n-                  Right_Opnd => New_Reference_To (Raised_Id, Loc)),\n+                Make_Op_Not (Data.Loc,\n+                  Right_Opnd => New_Reference_To (Data.Raised_Id, Data.Loc)),\n \n               Then_Statements => New_List (\n-                Make_Assignment_Statement (Loc,\n-                  Name       => New_Reference_To (Raised_Id, Loc),\n-                  Expression => New_Reference_To (Standard_True, Loc)),\n+                Make_Assignment_Statement (Data.Loc,\n+                  Name       => New_Reference_To (Data.Raised_Id, Data.Loc),\n+                  Expression => New_Reference_To (Standard_True, Data.Loc)),\n \n-                Make_Procedure_Call_Statement (Loc,\n+                Make_Procedure_Call_Statement (Data.Loc,\n                   Name                   =>\n-                    New_Reference_To (Proc_To_Call, Loc),\n+                    New_Reference_To (Proc_To_Call, Data.Loc),\n                   Parameter_Associations => Actuals)))));\n    end Build_Exception_Handler;\n \n@@ -1052,21 +1051,14 @@ package body Exp_Ch7 is\n       --  structures right from the start. Entities and lists are created once\n       --  it has been established that N has at least one controlled object.\n \n-      Abort_Id : Entity_Id := Empty;\n-      --  Entity of local flag. The flag is set when finalization is triggered\n-      --  by an abort.\n-\n       Components_Built : Boolean := False;\n       --  A flag used to avoid double initialization of entities and lists. If\n       --  the flag is set then the following variables have been initialized:\n       --\n-      --    Abort_Id\n       --    Counter_Id\n-      --    E_Id\n       --    Finalizer_Decls\n       --    Finalizer_Stmts\n       --    Jump_Alts\n-      --    Raised_Id\n \n       Counter_Id  : Entity_Id := Empty;\n       Counter_Val : Int       := 0;\n@@ -1076,9 +1068,8 @@ package body Exp_Ch7 is\n       --  Declarative region of N (if available). If N is a package declaration\n       --  Decls denotes the visible declarations.\n \n-      E_Id : Entity_Id := Empty;\n-      --  Entity of the local exception occurence. The first exception which\n-      --  occurred during finalization is stored in E_Id and later reraised.\n+      Finalizer_Data : Finalization_Exception_Data;\n+      --  Data for the exception\n \n       Finalizer_Decls : List_Id := No_List;\n       --  Local variable declarations. This list holds the label declarations\n@@ -1140,10 +1131,6 @@ package body Exp_Ch7 is\n       Priv_Decls : List_Id := No_List;\n       --  The private declarations of N if N is a package declaration\n \n-      Raised_Id : Entity_Id := Empty;\n-      --  Entity for the raised flag. Along with E_Id, the flag is used in the\n-      --  propagation of exceptions which occur during finalization.\n-\n       Spec_Id    : Entity_Id := Empty;\n       Spec_Decls : List_Id   := Top_Decls;\n       Stmts      : List_Id   := No_List;\n@@ -1217,10 +1204,11 @@ package body Exp_Ch7 is\n             Counter_Id  := Make_Temporary (Loc, 'C');\n             Counter_Typ := Make_Temporary (Loc, 'T');\n \n+            Finalizer_Decls := New_List;\n+\n             if Exceptions_OK then\n-               Abort_Id  := Make_Temporary (Loc, 'A');\n-               E_Id      := Make_Temporary (Loc, 'E');\n-               Raised_Id := Make_Temporary (Loc, 'R');\n+               Build_Object_Declarations\n+                 (Finalizer_Data, Finalizer_Decls, Loc, For_Package);\n             end if;\n \n             --  Since the total number of controlled objects is always known,\n@@ -1280,7 +1268,6 @@ package body Exp_Ch7 is\n                Analyze (Counter_Decl);\n             end if;\n \n-            Finalizer_Decls := New_List;\n             Jump_Alts := New_List;\n          end if;\n \n@@ -1442,7 +1429,7 @@ package body Exp_Ch7 is\n               and then Exceptions_OK\n             then\n                Append_To (Finalizer_Stmts,\n-                 Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+                 Build_Raise_Statement (Finalizer_Data));\n             end if;\n \n             --  Create the jump block which controls the finalization flow\n@@ -1533,14 +1520,6 @@ package body Exp_Ch7 is\n          --       Abort_Undefer;             --  Added if abort is allowed\n          --    end Fin_Id;\n \n-         if Has_Ctrl_Objs\n-           and then Exceptions_OK\n-         then\n-            Prepend_List_To (Finalizer_Decls,\n-              Build_Object_Declarations\n-                (Loc, Abort_Id, E_Id, Raised_Id, For_Package));\n-         end if;\n-\n          --  Create the body of the finalizer\n \n          Body_Id := Make_Defining_Identifier (Loc, Chars (Fin_Id));\n@@ -2567,7 +2546,7 @@ package body Exp_Ch7 is\n \n                     Exception_Handlers => New_List (\n                       Build_Exception_Handler\n-                        (Loc, E_Id, Raised_Id, For_Package)))));\n+                        (Finalizer_Data, For_Package)))));\n \n             --  When exception handlers are prohibited, the finalization call\n             --  appears unprotected. Any exception raised during finalization\n@@ -2940,27 +2919,29 @@ package body Exp_Ch7 is\n    -- Build_Object_Declarations --\n    -------------------------------\n \n-   function Build_Object_Declarations\n-     (Loc         : Source_Ptr;\n-      Abort_Id    : Entity_Id;\n-      E_Id        : Entity_Id;\n-      Raised_Id   : Entity_Id;\n-      For_Package : Boolean := False) return List_Id\n+   procedure Build_Object_Declarations\n+     (Data        : out Finalization_Exception_Data;\n+      Decls       : List_Id;\n+      Loc         : Source_Ptr;\n+      For_Package : Boolean := False)\n    is\n       A_Expr : Node_Id;\n       E_Decl : Node_Id;\n-      Result : List_Id;\n \n    begin\n+      pragma Assert (Decls /= No_List);\n+\n       if Restriction_Active (No_Exception_Propagation) then\n-         return Empty_List;\n+         Data.Abort_Id := Empty;\n+         Data.E_Id := Empty;\n+         Data.Raised_Id := Empty;\n+         return;\n       end if;\n \n-      pragma Assert (Present (Abort_Id));\n-      pragma Assert (Present (E_Id));\n-      pragma Assert (Present (Raised_Id));\n-\n-      Result := New_List;\n+      Data.Abort_Id  := Make_Temporary (Loc, 'A');\n+      Data.E_Id      := Make_Temporary (Loc, 'E');\n+      Data.Raised_Id := Make_Temporary (Loc, 'R');\n+      Data.Loc       := Loc;\n \n       --  In certain scenarios, finalization can be triggered by an abort. If\n       --  the finalization itself fails and raises an exception, the resulting\n@@ -2990,9 +2971,9 @@ package body Exp_Ch7 is\n       --  Generate:\n       --    Abort_Id : constant Boolean := <A_Expr>;\n \n-      Append_To (Result,\n+      Append_To (Decls,\n         Make_Object_Declaration (Loc,\n-          Defining_Identifier => Abort_Id,\n+          Defining_Identifier => Data.Abort_Id,\n           Constant_Present    => True,\n           Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n           Expression          => A_Expr));\n@@ -3002,34 +2983,29 @@ package body Exp_Ch7 is\n \n       E_Decl :=\n         Make_Object_Declaration (Loc,\n-          Defining_Identifier => E_Id,\n+          Defining_Identifier => Data.E_Id,\n           Object_Definition   =>\n             New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n       Set_No_Initialization (E_Decl);\n \n-      Append_To (Result, E_Decl);\n+      Append_To (Decls, E_Decl);\n \n       --  Generate:\n       --    Raised_Id : Boolean := False;\n \n-      Append_To (Result,\n+      Append_To (Decls,\n         Make_Object_Declaration (Loc,\n-          Defining_Identifier => Raised_Id,\n+          Defining_Identifier => Data.Raised_Id,\n           Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n           Expression          => New_Reference_To (Standard_False, Loc)));\n-\n-      return Result;\n    end Build_Object_Declarations;\n \n    ---------------------------\n    -- Build_Raise_Statement --\n    ---------------------------\n \n    function Build_Raise_Statement\n-     (Loc       : Source_Ptr;\n-      Abort_Id  : Entity_Id;\n-      E_Id      : Entity_Id;\n-      Raised_Id : Entity_Id) return Node_Id\n+     (Data : Finalization_Exception_Data) return Node_Id\n    is\n       Stmt : Node_Id;\n \n@@ -3039,20 +3015,20 @@ package body Exp_Ch7 is\n \n       if RTE_Available (RE_Raise_From_Controlled_Operation) then\n          Stmt :=\n-           Make_Procedure_Call_Statement (Loc,\n+           Make_Procedure_Call_Statement (Data.Loc,\n               Name                   =>\n                 New_Reference_To\n-                  (RTE (RE_Raise_From_Controlled_Operation), Loc),\n+                  (RTE (RE_Raise_From_Controlled_Operation), Data.Loc),\n               Parameter_Associations =>\n-                New_List (New_Reference_To (E_Id, Loc)));\n+                New_List (New_Reference_To (Data.E_Id, Data.Loc)));\n \n       --  Restricted runtime: exception messages are not supported and hence\n       --  Raise_From_Controlled_Operation is not supported. Raise Program_Error\n       --  instead.\n \n       else\n          Stmt :=\n-           Make_Raise_Program_Error (Loc,\n+           Make_Raise_Program_Error (Data.Loc,\n              Reason => PE_Finalize_Raised_Exception);\n       end if;\n \n@@ -3064,13 +3040,13 @@ package body Exp_Ch7 is\n       --    end if;\n \n       return\n-        Make_If_Statement (Loc,\n+        Make_If_Statement (Data.Loc,\n           Condition       =>\n-            Make_And_Then (Loc,\n-              Left_Opnd  => New_Reference_To (Raised_Id, Loc),\n+            Make_And_Then (Data.Loc,\n+              Left_Opnd  => New_Reference_To (Data.Raised_Id, Data.Loc),\n               Right_Opnd =>\n-                Make_Op_Not (Loc,\n-                  Right_Opnd => New_Reference_To (Abort_Id, Loc))),\n+                Make_Op_Not (Data.Loc,\n+                  Right_Opnd => New_Reference_To (Data.Abort_Id, Data.Loc))),\n \n           Then_Statements => New_List (Stmt));\n    end Build_Raise_Statement;\n@@ -4222,18 +4198,17 @@ package body Exp_Ch7 is\n          Last_Object  : Node_Id;\n          Related_Node : Node_Id)\n       is\n-         Abort_Id  : Entity_Id;\n-         Built     : Boolean := False;\n-         Desig     : Entity_Id;\n-         E_Id      : Entity_Id;\n-         Fin_Block : Node_Id;\n-         Last_Fin  : Node_Id := Empty;\n-         Loc       : Source_Ptr;\n-         Obj_Id    : Entity_Id;\n-         Obj_Ref   : Node_Id;\n-         Obj_Typ   : Entity_Id;\n-         Raised_Id : Entity_Id;\n-         Stmt      : Node_Id;\n+         Finalizer_Data  : Finalization_Exception_Data;\n+         Finalizer_Decls : List_Id;\n+         Built           : Boolean := False;\n+         Desig           : Entity_Id;\n+         Fin_Block       : Node_Id;\n+         Last_Fin        : Node_Id := Empty;\n+         Loc             : Source_Ptr;\n+         Obj_Id          : Entity_Id;\n+         Obj_Ref         : Node_Id;\n+         Obj_Typ         : Entity_Id;\n+         Stmt            : Node_Id;\n \n       begin\n          --  Examine all objects in the list First_Object .. Last_Object\n@@ -4266,13 +4241,12 @@ package body Exp_Ch7 is\n                --  time around.\n \n                if not Built then\n-                  Abort_Id  := Make_Temporary (Loc, 'A');\n-                  E_Id      := Make_Temporary (Loc, 'E');\n-                  Raised_Id := Make_Temporary (Loc, 'R');\n+                  Finalizer_Decls := New_List;\n+                  Build_Object_Declarations\n+                      (Finalizer_Data, Finalizer_Decls, Loc);\n \n-                  Insert_List_Before_And_Analyze (First_Object,\n-                    Build_Object_Declarations\n-                      (Loc, Abort_Id, E_Id, Raised_Id));\n+                  Insert_List_Before_And_Analyze\n+                    (First_Object, Finalizer_Decls);\n \n                   Built := True;\n                end if;\n@@ -4306,7 +4280,7 @@ package body Exp_Ch7 is\n                             Typ     => Desig)),\n \n                        Exception_Handlers => New_List (\n-                         Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n+                         Build_Exception_Handler (Finalizer_Data))));\n                Insert_After_And_Analyze (Last_Object, Fin_Block);\n \n                --  The raise statement must be inserted after all the\n@@ -4371,7 +4345,7 @@ package body Exp_Ch7 is\n            and then Present (Last_Fin)\n          then\n             Insert_After_And_Analyze (Last_Fin,\n-              Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+              Build_Raise_Statement (Finalizer_Data));\n          end if;\n       end Process_Transient_Objects;\n \n@@ -4760,20 +4734,19 @@ package body Exp_Ch7 is\n       function Build_Adjust_Or_Finalize_Statements\n         (Typ : Entity_Id) return List_Id\n       is\n-         Comp_Typ   : constant Entity_Id  := Component_Type (Typ);\n-         Index_List : constant List_Id    := New_List;\n-         Loc        : constant Source_Ptr := Sloc (Typ);\n-         Num_Dims   : constant Int        := Number_Dimensions (Typ);\n-         Abort_Id   : Entity_Id := Empty;\n-         Call       : Node_Id;\n-         Comp_Ref   : Node_Id;\n-         Core_Loop  : Node_Id;\n-         Dim        : Int;\n-         E_Id       : Entity_Id := Empty;\n-         J          : Entity_Id;\n-         Loop_Id    : Entity_Id;\n-         Raised_Id  : Entity_Id := Empty;\n-         Stmts      : List_Id;\n+         Comp_Typ        : constant Entity_Id  := Component_Type (Typ);\n+         Index_List      : constant List_Id    := New_List;\n+         Loc             : constant Source_Ptr := Sloc (Typ);\n+         Num_Dims        : constant Int        := Number_Dimensions (Typ);\n+         Finalizer_Decls : List_Id := No_List;\n+         Finalizer_Data  : Finalization_Exception_Data;\n+         Call            : Node_Id;\n+         Comp_Ref        : Node_Id;\n+         Core_Loop       : Node_Id;\n+         Dim             : Int;\n+         J               : Entity_Id;\n+         Loop_Id         : Entity_Id;\n+         Stmts           : List_Id;\n \n          Exceptions_OK : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n@@ -4802,9 +4775,8 @@ package body Exp_Ch7 is\n          Build_Indices;\n \n          if Exceptions_OK then\n-            Abort_Id  := Make_Temporary (Loc, 'A');\n-            E_Id      := Make_Temporary (Loc, 'E');\n-            Raised_Id := Make_Temporary (Loc, 'R');\n+            Finalizer_Decls := New_List;\n+            Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n          end if;\n \n          Comp_Ref :=\n@@ -4848,7 +4820,7 @@ package body Exp_Ch7 is\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements         => New_List (Call),\n                     Exception_Handlers => New_List (\n-                      Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n+                      Build_Exception_Handler (Finalizer_Data))));\n          else\n             Core_Loop := Call;\n          end if;\n@@ -4912,14 +4884,14 @@ package body Exp_Ch7 is\n \n          if Exceptions_OK then\n             Append_To (Stmts,\n-              Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+              Build_Raise_Statement (Finalizer_Data));\n          end if;\n \n          return\n            New_List (\n              Make_Block_Statement (Loc,\n                Declarations               =>\n-                 Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n+                 Finalizer_Decls,\n                Handled_Statement_Sequence =>\n                  Make_Handled_Sequence_Of_Statements (Loc, Stmts)));\n       end Build_Adjust_Or_Finalize_Statements;\n@@ -4929,24 +4901,23 @@ package body Exp_Ch7 is\n       ---------------------------------\n \n       function Build_Initialize_Statements (Typ : Entity_Id) return List_Id is\n-         Comp_Typ    : constant Entity_Id  := Component_Type (Typ);\n-         Final_List  : constant List_Id    := New_List;\n-         Index_List  : constant List_Id    := New_List;\n-         Loc         : constant Source_Ptr := Sloc (Typ);\n-         Num_Dims    : constant Int        := Number_Dimensions (Typ);\n-         Abort_Id    : Entity_Id;\n-         Counter_Id  : Entity_Id;\n-         Dim         : Int;\n-         E_Id        : Entity_Id := Empty;\n-         F           : Node_Id;\n-         Fin_Stmt    : Node_Id;\n-         Final_Block : Node_Id;\n-         Final_Loop  : Node_Id;\n-         Init_Loop   : Node_Id;\n-         J           : Node_Id;\n-         Loop_Id     : Node_Id;\n-         Raised_Id   : Entity_Id := Empty;\n-         Stmts       : List_Id;\n+         Comp_Typ        : constant Entity_Id  := Component_Type (Typ);\n+         Final_List      : constant List_Id    := New_List;\n+         Index_List      : constant List_Id    := New_List;\n+         Loc             : constant Source_Ptr := Sloc (Typ);\n+         Num_Dims        : constant Int        := Number_Dimensions (Typ);\n+         Counter_Id      : Entity_Id;\n+         Dim             : Int;\n+         F               : Node_Id;\n+         Fin_Stmt        : Node_Id;\n+         Final_Block     : Node_Id;\n+         Final_Loop      : Node_Id;\n+         Finalizer_Data  : Finalization_Exception_Data;\n+         Finalizer_Decls : List_Id := No_List;\n+         Init_Loop       : Node_Id;\n+         J               : Node_Id;\n+         Loop_Id         : Node_Id;\n+         Stmts           : List_Id;\n \n          Exceptions_OK : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n@@ -5081,9 +5052,8 @@ package body Exp_Ch7 is\n          Counter_Id := Make_Temporary (Loc, 'C');\n \n          if Exceptions_OK then\n-            Abort_Id  := Make_Temporary (Loc, 'A');\n-            E_Id      := Make_Temporary (Loc, 'E');\n-            Raised_Id := Make_Temporary (Loc, 'R');\n+            Finalizer_Decls := New_List;\n+            Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n          end if;\n \n          --  Generate the block which houses the finalization call, the index\n@@ -5112,7 +5082,7 @@ package body Exp_Ch7 is\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements         => New_List (Build_Finalization_Call),\n                     Exception_Handlers => New_List (\n-                      Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n+                      Build_Exception_Handler (Finalizer_Data))));\n          else\n             Fin_Stmt := Build_Finalization_Call;\n          end if;\n@@ -5204,14 +5174,14 @@ package body Exp_Ch7 is\n \n          if Exceptions_OK then\n             Append_To (Stmts,\n-              Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+              Build_Raise_Statement (Finalizer_Data));\n             Append_To (Stmts, Make_Raise_Statement (Loc));\n          end if;\n \n          Final_Block :=\n            Make_Block_Statement (Loc,\n              Declarations               =>\n-               Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n+               Finalizer_Decls,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts));\n \n@@ -5583,14 +5553,13 @@ package body Exp_Ch7 is\n       -----------------------------\n \n       function Build_Adjust_Statements (Typ : Entity_Id) return List_Id is\n-         Loc       : constant Source_Ptr := Sloc (Typ);\n-         Typ_Def   : constant Node_Id := Type_Definition (Parent (Typ));\n-         Abort_Id  : Entity_Id := Empty;\n-         Bod_Stmts : List_Id;\n-         E_Id      : Entity_Id := Empty;\n-         Raised_Id : Entity_Id := Empty;\n-         Rec_Def   : Node_Id;\n-         Var_Case  : Node_Id;\n+         Loc             : constant Source_Ptr := Sloc (Typ);\n+         Typ_Def         : constant Node_Id := Type_Definition (Parent (Typ));\n+         Bod_Stmts       : List_Id;\n+         Finalizer_Data  : Finalization_Exception_Data;\n+         Finalizer_Decls : List_Id := No_List;\n+         Rec_Def         : Node_Id;\n+         Var_Case        : Node_Id;\n \n          Exceptions_OK : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n@@ -5654,7 +5623,7 @@ package body Exp_Ch7 is\n                         Make_Handled_Sequence_Of_Statements (Loc,\n                           Statements         => New_List (Adj_Stmt),\n                           Exception_Handlers => New_List (\n-                            Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n+                            Build_Exception_Handler (Finalizer_Data))));\n                end if;\n \n                Append_To (Stmts, Adj_Stmt);\n@@ -5792,9 +5761,8 @@ package body Exp_Ch7 is\n \n       begin\n          if Exceptions_OK then\n-            Abort_Id  := Make_Temporary (Loc, 'A');\n-            E_Id      := Make_Temporary (Loc, 'E');\n-            Raised_Id := Make_Temporary (Loc, 'R');\n+            Finalizer_Decls := New_List;\n+            Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n          end if;\n \n          if Nkind (Typ_Def) = N_Derived_Type_Definition then\n@@ -5891,7 +5859,7 @@ package body Exp_Ch7 is\n                                 Statements         => New_List (Adj_Stmt),\n                                 Exception_Handlers => New_List (\n                                   Build_Exception_Handler\n-                                    (Loc, E_Id, Raised_Id))));\n+                                    (Finalizer_Data))));\n                      end if;\n \n                      Prepend_To (Bod_Stmts, Adj_Stmt);\n@@ -5942,7 +5910,7 @@ package body Exp_Ch7 is\n                              Statements         => New_List (Adj_Stmt),\n                              Exception_Handlers => New_List (\n                                Build_Exception_Handler\n-                                 (Loc, E_Id, Raised_Id))));\n+                                 (Finalizer_Data))));\n                   end if;\n \n                   Append_To (Bod_Stmts,\n@@ -5981,14 +5949,14 @@ package body Exp_Ch7 is\n          else\n             if Exceptions_OK then\n                Append_To (Bod_Stmts,\n-                 Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+                 Build_Raise_Statement (Finalizer_Data));\n             end if;\n \n             return\n               New_List (\n                 Make_Block_Statement (Loc,\n                   Declarations               =>\n-                    Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n+                    Finalizer_Decls,\n                   Handled_Statement_Sequence =>\n                     Make_Handled_Sequence_Of_Statements (Loc, Bod_Stmts)));\n          end if;\n@@ -5999,15 +5967,14 @@ package body Exp_Ch7 is\n       -------------------------------\n \n       function Build_Finalize_Statements (Typ : Entity_Id) return List_Id is\n-         Loc       : constant Source_Ptr := Sloc (Typ);\n-         Typ_Def   : constant Node_Id := Type_Definition (Parent (Typ));\n-         Abort_Id  : Entity_Id := Empty;\n-         Bod_Stmts : List_Id;\n-         Counter   : Int := 0;\n-         E_Id      : Entity_Id := Empty;\n-         Raised_Id : Entity_Id := Empty;\n-         Rec_Def   : Node_Id;\n-         Var_Case  : Node_Id;\n+         Loc             : constant Source_Ptr := Sloc (Typ);\n+         Typ_Def         : constant Node_Id := Type_Definition (Parent (Typ));\n+         Bod_Stmts       : List_Id;\n+         Counter         : Int := 0;\n+         Finalizer_Data  : Finalization_Exception_Data;\n+         Finalizer_Decls : List_Id := No_List;\n+         Rec_Def         : Node_Id;\n+         Var_Case        : Node_Id;\n \n          Exceptions_OK : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n@@ -6140,7 +6107,7 @@ package body Exp_Ch7 is\n                         Make_Handled_Sequence_Of_Statements (Loc,\n                           Statements         => New_List (Fin_Stmt),\n                           Exception_Handlers => New_List (\n-                            Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n+                            Build_Exception_Handler (Finalizer_Data))));\n                end if;\n \n                Append_To (Stmts, Fin_Stmt);\n@@ -6372,9 +6339,8 @@ package body Exp_Ch7 is\n \n       begin\n          if Exceptions_OK then\n-            Abort_Id  := Make_Temporary (Loc, 'A');\n-            E_Id      := Make_Temporary (Loc, 'E');\n-            Raised_Id := Make_Temporary (Loc, 'R');\n+            Finalizer_Decls := New_List;\n+            Build_Object_Declarations (Finalizer_Data, Finalizer_Decls, Loc);\n          end if;\n \n          if Nkind (Typ_Def) = N_Derived_Type_Definition then\n@@ -6473,7 +6439,7 @@ package body Exp_Ch7 is\n                                 Statements         => New_List (Fin_Stmt),\n                                 Exception_Handlers => New_List (\n                                   Build_Exception_Handler\n-                                    (Loc, E_Id, Raised_Id))));\n+                                    (Finalizer_Data))));\n                      end if;\n \n                      Append_To (Bod_Stmts, Fin_Stmt);\n@@ -6526,7 +6492,7 @@ package body Exp_Ch7 is\n                              Statements         => New_List (Fin_Stmt),\n                              Exception_Handlers => New_List (\n                                Build_Exception_Handler\n-                                 (Loc, E_Id, Raised_Id))));\n+                                 (Finalizer_Data))));\n                   end if;\n \n                   Prepend_To (Bod_Stmts,\n@@ -6563,14 +6529,14 @@ package body Exp_Ch7 is\n          else\n             if Exceptions_OK then\n                Append_To (Bod_Stmts,\n-                 Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+                 Build_Raise_Statement (Finalizer_Data));\n             end if;\n \n             return\n               New_List (\n                 Make_Block_Statement (Loc,\n                   Declarations               =>\n-                    Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n+                    Finalizer_Decls,\n                   Handled_Statement_Sequence =>\n                     Make_Handled_Sequence_Of_Statements (Loc, Bod_Stmts)));\n          end if;"}, {"sha": "8a0be81bac22e3ef14b84836e3c53fb3f37409e3", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -40,10 +40,39 @@ package Exp_Ch7 is\n    --  Create the procedures Deep_Initialize, Deep_Adjust and Deep_Finalize\n    --  that take care of finalization management at run-time.\n \n-   function Build_Exception_Handler\n-     (Loc         : Source_Ptr;\n+   --  Support of exceptions from user finalization procedures\n+   --\n+   --  There is a specific mechanism to handle these exceptions, continue\n+   --  finalization and then raise PE.\n+   --  This mechanism is used by this package but also by exp_intr for\n+   --  Ada.Unchecked_Deallocation.\n+   --  There are 3 subprograms to use this mechanism, and the type\n+   --  Finalization_Exception_Data carries internal data between these\n+   --  subprograms:\n+   --\n+   --  1. Build_Object_Declaration: create the variables for the next two\n+   --  subprograms.\n+   --  2. Build_Exception_Handler: create the exception handler for a call to\n+   --  a user finalization procedure.\n+   --  3. Build_Raise_Stmt: create the code to potentially raise a PE exception\n+   --  if am exception was raise in a user finalization procedure.\n+   type Finalization_Exception_Data is record\n+      Loc         : Source_Ptr;\n+      --  Sloc for the added nodes\n+\n+      Abort_Id    : Entity_Id;\n+      --  Boolean variable set to true if the finalization was triggered by\n+      --  an abort.\n+\n       E_Id        : Entity_Id;\n+      --  Variable containing the exception occurrence raised by user code\n+\n       Raised_Id   : Entity_Id;\n+      --  Boolean variable set to true if an exception was raised in user code\n+   end record;\n+\n+   function Build_Exception_Handler\n+     (Data        : Finalization_Exception_Data;\n       For_Library : Boolean := False) return Node_Id;\n    --  Subsidiary to Build_Finalizer, Make_Deep_Array_Body and Make_Deep_Record\n    --  _Body. Create an exception handler of the following form:\n@@ -84,15 +113,14 @@ package Exp_Ch7 is\n    --  Build one controlling procedure when a late body overrides one of\n    --  the controlling operations.\n \n-   function Build_Object_Declarations\n-     (Loc         : Source_Ptr;\n-      Abort_Id    : Entity_Id;\n-      E_Id        : Entity_Id;\n-      Raised_Id   : Entity_Id;\n-      For_Package : Boolean := False) return List_Id;\n-   --  Subsidiary to Make_Deep_Array_Body and Make_Deep_Record_Body. Return a\n-   --  list containing the object declarations of boolean flag Abort_Id, the\n-   --  exception occurrence E_Id and boolean flag Raised_Id.\n+   procedure Build_Object_Declarations\n+     (Data        : out Finalization_Exception_Data;\n+      Decls       : List_Id;\n+      Loc         : Source_Ptr;\n+      For_Package : Boolean := False);\n+   --  Subsidiary to Make_Deep_Array_Body and Make_Deep_Record_Body. Create the\n+   --  list List containing the object declarations of boolean flag Abort_Id,\n+   --  the exception occurrence E_Id and boolean flag Raised_Id.\n    --\n    --    Abort_Id  : constant Boolean :=\n    --                  Exception_Identity (Get_Current_Excep.all) =\n@@ -104,10 +132,7 @@ package Exp_Ch7 is\n    --    Raised_Id : Boolean := False;\n \n    function Build_Raise_Statement\n-     (Loc       : Source_Ptr;\n-      Abort_Id  : Entity_Id;\n-      E_Id      : Entity_Id;\n-      Raised_Id : Entity_Id) return Node_Id;\n+     (Data : Finalization_Exception_Data) return Node_Id;\n    --  Subsidiary to routines Build_Finalizer, Make_Deep_Array_Body and Make_\n    --  Deep_Record_Body. Generate the following conditional raise statement:\n    --"}, {"sha": "163258293142eb53391deaf0fc2f350c63d253fc", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -876,23 +876,23 @@ package body Exp_Intr is\n    --  structures to find and terminate those components.\n \n    procedure Expand_Unc_Deallocation (N : Node_Id) is\n-      Arg     : constant Node_Id    := First_Actual (N);\n-      Loc     : constant Source_Ptr := Sloc (N);\n-      Typ     : constant Entity_Id  := Etype (Arg);\n-      Desig_T : constant Entity_Id  := Designated_Type (Typ);\n-      Rtyp    : constant Entity_Id  := Underlying_Type (Root_Type (Typ));\n-      Pool    : constant Entity_Id  := Associated_Storage_Pool (Rtyp);\n-      Stmts   : constant List_Id    := New_List;\n-\n-      Abort_Id   : Entity_Id := Empty;\n+      Arg       : constant Node_Id    := First_Actual (N);\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Typ       : constant Entity_Id  := Etype (Arg);\n+      Desig_T   : constant Entity_Id  := Designated_Type (Typ);\n+      Rtyp      : constant Entity_Id  := Underlying_Type (Root_Type (Typ));\n+      Pool      : constant Entity_Id  := Associated_Storage_Pool (Rtyp);\n+      Stmts     : constant List_Id    := New_List;\n+      Needs_Fin : constant Boolean    := Needs_Finalization (Desig_T);\n+\n+      Finalizer_Data  : Finalization_Exception_Data;\n+\n       Blk        : Node_Id := Empty;\n       Deref      : Node_Id;\n-      E_Id       : Entity_Id := Empty;\n       Final_Code : List_Id;\n       Free_Arg   : Node_Id;\n       Free_Node  : Node_Id;\n       Gen_Code   : Node_Id;\n-      Raised_Id  : Entity_Id := Empty;\n \n       Arg_Known_Non_Null : constant Boolean := Known_Non_Null (N);\n       --  This captures whether we know the argument to be non-null so that\n@@ -909,7 +909,7 @@ package body Exp_Intr is\n \n       --  Processing for pointer to controlled type\n \n-      if Needs_Finalization (Desig_T) then\n+      if Needs_Fin then\n          Deref :=\n            Make_Explicit_Dereference (Loc,\n              Prefix => Duplicate_Subexpr_No_Checks (Arg));\n@@ -958,12 +958,7 @@ package body Exp_Intr is\n          --          Save_Occurrence (E, Get_Current_Excep.all.all);\n          --    end;\n \n-         Abort_Id  := Make_Temporary (Loc, 'A');\n-         E_Id      := Make_Temporary (Loc, 'E');\n-         Raised_Id := Make_Temporary (Loc, 'R');\n-\n-         Append_List_To (Stmts,\n-            Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id));\n+         Build_Object_Declarations (Finalizer_Data, Stmts, Loc);\n \n          Final_Code := New_List (\n            Make_Block_Statement (Loc,\n@@ -974,7 +969,7 @@ package body Exp_Intr is\n                      Obj_Ref => Deref,\n                      Typ     => Desig_T)),\n                  Exception_Handlers => New_List (\n-                   Build_Exception_Handler (Loc, E_Id, Raised_Id)))));\n+                   Build_Exception_Handler (Finalizer_Data)))));\n \n          --  For .NET/JVM, detach the object from the containing finalization\n          --  collection before finalizing it.\n@@ -1216,9 +1211,8 @@ package body Exp_Intr is\n       --       Raise_From_Controlled_Operation (E);  --  all other cases\n       --    end if;\n \n-      if Present (Raised_Id) then\n-         Append_To (Stmts,\n-           Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n+      if Needs_Fin then\n+         Append_To (Stmts, Build_Raise_Statement (Finalizer_Data));\n       end if;\n \n       --  If we know the argument is non-null, then make a block statement"}, {"sha": "25b7b79797c88775a51b54422205d4f28ad57d69", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -886,14 +886,7 @@ package body Alfa is\n       --  Generate file and scope Alfa information\n \n       for D in 1 .. Num_Sdep loop\n-\n-         --  Ignore file for System\n-\n-         if Units.Table (Sdep_Table (D)).Source_Index /=\n-           System_Source_File_Index\n-         then\n-            Add_Alfa_File (U => Sdep_Table (D), D => D);\n-         end if;\n+         Add_Alfa_File (U => Sdep_Table (D), D => D);\n       end loop;\n \n       --  Fill in the spec information when relevant"}, {"sha": "6f87ba5a011208a5feb9c577659cbaced485d273", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -985,7 +985,6 @@ The following attributes can be defined in package @code{Naming}:\n   other than Ada. They are indexed on the language name, and contain\n   a list of file names respectively for headers and source code.\n \n-\n @end table\n \n @ifclear vms\n@@ -1315,7 +1314,6 @@ There are two main approaches to avoiding this duplication:\n   more qualifiers).\n @end itemize\n \n-\n @c ---------------------------------------------\n @node Global Attributes\n @subsection Global Attributes\n@@ -1649,7 +1647,6 @@ Other library-related attributes can be used to change the defaults:\n   upon this subsystem.\n @end table\n \n-\n @c ---------------------------------------------\n @node Using Library Projects\n @subsection Using Library Projects\n@@ -1873,7 +1870,6 @@ included in the library.\n   must exist in the object directory.\n @end table\n \n-\n @c ---------------------------------------------\n @node Installing a library with project files\n @subsection Installing a library with project files\n@@ -2270,7 +2266,6 @@ aggregate project Agg is\n     for Project_Files use (\"myproject.gpr\");\n end Agg;\n \n-\n with \"prj.gpr\";  --  searched on Agg'Project_Path\n project MyProject is\n    ...\n@@ -2777,7 +2772,6 @@ The current list of qualifiers is:\n   It describes compilers and other tools to @code{gprbuild}.\n @end table\n \n-\n @c ---------------------------------------------\n @node Declarations\n @subsection Declarations\n@@ -3226,7 +3220,6 @@ A @b{context} may be one of the following:\n   whose selector is a package name in that project.\n @end itemize\n \n-\n @c ---------------------------------------------\n @node Attributes\n @subsection Attributes\n@@ -3547,7 +3540,6 @@ end MyProj;\n \n @noindent\n \n-\n @menu\n * gnatmake and Project Files::\n * The GNAT Driver and Project Files::\n@@ -4049,7 +4041,6 @@ When a library project file is specified, switches ^-b^/ACTION=BIND^ and\n   (in the case of a stand-alone library) and that the library should be built.\n @end itemize\n \n-\n @c ---------------------------------------------\n @node The GNAT Driver and Project Files\n @section The GNAT Driver and Project Files\n@@ -4490,6 +4481,3 @@ The switches for GPRclean are:\n @item @option{-Xnm=val} : Specify an external reference for Project Files.\n \n @end itemize\n-\n-\n-"}, {"sha": "1bfe1568d7195036171845ec3e1a08968112e3f2", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -117,7 +117,7 @@ package body Restrict is\n       Msg_Issued          : Boolean;\n       Save_Error_Msg_Sloc : Source_Ptr;\n    begin\n-      if Force or else Comes_From_Source (N) then\n+      if Force or else Comes_From_Source (Original_Node (N)) then\n \n          if Restriction_Check_Required (SPARK)\n            and then Is_In_Hidden_Part_In_SPARK (Sloc (N))\n@@ -145,7 +145,7 @@ package body Restrict is\n    begin\n       pragma Assert (Msg2'Length /= 0 and then Msg2 (Msg2'First) = '\\');\n \n-      if Comes_From_Source (N) then\n+      if Comes_From_Source (Original_Node (N)) then\n \n          if Restriction_Check_Required (SPARK)\n            and then Is_In_Hidden_Part_In_SPARK (Sloc (N))"}, {"sha": "d0b14fdf9db89274360b430b6374bc31bc11ae2e", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2007-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2007-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,20 +86,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Calendar;             use Ada.Calendar;\n with Ada.Unchecked_Conversion;\n+with System.Random_Seed;\n \n with Interfaces; use Interfaces;\n \n use Ada;\n \n package body System.Random_Numbers is\n \n-   Y2K : constant Calendar.Time :=\n-           Calendar.Time_Of\n-             (Year => 2000, Month => 1, Day => 1, Seconds => 0.0);\n-   --  First day of Year 2000 (what is this for???)\n-\n    Image_Numeral_Length : constant := Max_Image_Width / N;\n    subtype Image_String is String (1 .. Max_Image_Width);\n \n@@ -484,11 +479,9 @@ package body System.Random_Numbers is\n    -----------\n \n    procedure Reset (Gen : Generator) is\n-      Clock              : constant Time := Calendar.Clock;\n-      Duration_Since_Y2K : constant Duration := Clock - Y2K;\n-\n       X : constant Unsigned_32 :=\n-            Unsigned_32'Mod (Unsigned_64 (Duration_Since_Y2K) * 64);\n+           Unsigned_32'Mod (Unsigned_64 (Random_Seed.Get_Seed) * 64);\n+      --  Why * 64 ???\n \n    begin\n       Init (Gen, X);"}, {"sha": "dec22dbf4dc47dd6d78ec0d6941fc247f4b67b5f", "filename": "gcc/ada/s-ransee.adb", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fs-ransee.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fs-ransee.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ransee.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . R A N D O M _ S E E D                     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--               Copyright (C) 2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Calendar; use Ada.Calendar;\n+\n+package body System.Random_Seed is\n+\n+   Y2K : constant Time :=\n+           Time_Of (Year => 2000, Month => 1, Day => 1, Seconds => 0.0);\n+   --  First day of Year 2000, to get a duration.\n+\n+   function Get_Seed return Duration is\n+   begin\n+      return Clock - Y2K;\n+   end Get_Seed;\n+\n+end System.Random_Seed;"}, {"sha": "7a2dedd7e120aef5ff8d3647bde2070cc5506e2d", "filename": "gcc/ada/s-ransee.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fs-ransee.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fs-ransee.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ransee.ads?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . R A N D O M _ S E E D                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--               Copyright (C) 2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provide a seed for pseudo-random number generation using\n+--  the clock.\n+--  There are two separate implementations of this package:\n+--  o  one based on Ada.Calendar\n+--  o  one based on Ada.Real_Time\n+--  This is required because Ada.Calendar cannot be used on ravenscar, but\n+--  Ada.Real_Time drags the tasking runtime on regular platforms.\n+\n+package System.Random_Seed is\n+\n+   function Get_Seed return Duration;\n+   --  Get a seed based on the clock\n+\n+end System.Random_Seed;"}, {"sha": "25134b6dc7ca66ab6cf99a209c7337c6219e8739", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -11340,7 +11340,10 @@ package body Sem_Ch3 is\n       Related_Id  : Entity_Id;\n       Suffix      : Character)\n    is\n-      T_Ent : Entity_Id := Entity (Subtype_Mark (SI));\n+      --  Retrieve Base_Type to ensure getting to the concurrent type in the\n+      --  case of a private subtype (needed when only doing semantic analysis).\n+\n+      T_Ent : Entity_Id := Base_Type (Entity (Subtype_Mark (SI)));\n       T_Val : Entity_Id;\n \n    begin\n@@ -18570,9 +18573,11 @@ package body Sem_Ch3 is\n             return Process_Subtype (S, Related_Nod, Related_Id, Suffix);\n          end if;\n \n-         --  Remaining processing depends on type\n+         --  Remaining processing depends on type. Select on Base_Type kind to\n+         --  ensure getting to the concrete type kind in the case of a private\n+         --  subtype (needed when only doing semantic analysis).\n \n-         case Ekind (Subtype_Mark_Id) is\n+         case Ekind (Base_Type (Subtype_Mark_Id)) is\n             when Access_Kind =>\n                Constrain_Access (Def_Id, S, Related_Nod);\n "}, {"sha": "3f03aeea50638900a1057702b715acf7702e0737", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -1763,7 +1763,9 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Explicit_Dereference\n \n    begin\n-      Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n+      if Comes_From_Source (N) then\n+         Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n+      end if;\n \n       --  In formal verification mode, keep track of all reads and writes\n       --  through explicit dereferences.\n@@ -4417,7 +4419,9 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Slice\n \n    begin\n-      Check_SPARK_Restriction (\"slice is not allowed\", N);\n+      if Comes_From_Source (N) then\n+         Check_SPARK_Restriction (\"slice is not allowed\", N);\n+      end if;\n \n       Analyze (P);\n       Analyze (D);"}, {"sha": "ccd431fb65165668578e8f987cd50ca86bb098de", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -1965,6 +1965,7 @@ package body Sem_Ch5 is\n \n             begin\n                Enter_Name (Id);\n+               Set_Ekind (Id, E_Constant);\n \n                --  We always consider the loop variable to be referenced, since\n                --  the loop may be used just for counting purposes.\n@@ -2243,7 +2244,14 @@ package body Sem_Ch5 is\n       Typ : Entity_Id;\n \n    begin\n-      Enter_Name (Def_Id);\n+      --  In semantics mode, introduce loop variable so that\n+      --  loop body can be properly analyzed. Otherwise this\n+      --  is one after expansion.\n+\n+      if Operating_Mode = Check_Semantics then\n+         Enter_Name (Def_Id);\n+      end if;\n+\n       Set_Ekind (Def_Id, E_Variable);\n \n       if Present (Subt) then\n@@ -2326,6 +2334,10 @@ package body Sem_Ch5 is\n          else\n             Error_Msg_N\n               (\"to iterate over the elements of an array, use OF\", N);\n+\n+            --  Prevent cascaded errors.\n+\n+            Set_Ekind (Def_Id, E_Constant);\n             Set_Etype (Def_Id, Etype (First_Index (Typ)));\n          end if;\n \n@@ -2476,12 +2488,26 @@ package body Sem_Ch5 is\n \n       --  If the expander is not active, then we want to analyze the loop body\n       --  now even in the Ada 2012 iterator case, since the rewriting will not\n-      --  be done.\n+      --  be done. Insert the loop variable in the current scope, if not done\n+      --  when analysing the iteration scheme.\n \n       if No (Iter)\n         or else No (Iterator_Specification (Iter))\n         or else not Expander_Active\n       then\n+         if Present (Iter)\n+           and then  Present (Iterator_Specification (Iter))\n+         then\n+            declare\n+               Id : constant Entity_Id :=\n+                  Defining_Identifier (Iterator_Specification (Iter));\n+            begin\n+               if Scope (Id) /= Current_Scope then\n+                  Enter_Name (Id);\n+               end if;\n+            end;\n+         end if;\n+\n          Analyze_Statements (Statements (Loop_Statement));\n       end if;\n "}, {"sha": "b4d58495df65d9b41a1dfb06c1c5bf50038f6e91", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -1350,12 +1350,14 @@ package body Sem_Ch6 is\n          Result : Entity_Id := Empty;\n \n       begin\n-         --  Loop outward through the Scope_Stack, skipping blocks and loops\n+         --  Loop outward through the Scope_Stack, skipping blocks, loops,\n+         --  and postconditions.\n \n          for J in reverse 0 .. Scope_Stack.Last loop\n             Result := Scope_Stack.Table (J).Entity;\n-            exit when Ekind (Result) /= E_Block and then\n-                      Ekind (Result) /= E_Loop;\n+            exit when Ekind (Result) /= E_Block\n+              and then Ekind (Result) /= E_Loop\n+            and then Chars (Result) /= Name_uPostconditions;\n          end loop;\n \n          pragma Assert (Present (Result));"}, {"sha": "fb20b1a65543ad1411b50fd2c7b5c0a4c3729a36", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -1156,11 +1156,14 @@ package body Sem_Disp is\n             --  Ada 2005 (AI-251): In case of late overriding of a primitive\n             --  that covers abstract interface subprograms we must register it\n             --  in all the secondary dispatch tables associated with abstract\n-            --  interfaces. We do this now only if not building static tables.\n-            --  Otherwise the patch code is emitted after those tables are\n-            --  built, to prevent access_before_elaboration in gigi.\n-\n-            if Body_Is_Last_Primitive then\n+            --  interfaces. We do this now only if not building static tables,\n+            --  nor when the expander is inactive (we avoid trying to register\n+            --  primitives in semantics-only mode, since the type may not have\n+            --  an associated dispatch table). Otherwise the patch code is\n+            --  emitted after those tables are built, to prevent access before\n+            --  elaboration in gigi.\n+\n+            if Body_Is_Last_Primitive and then Full_Expander_Active then\n                declare\n                   Subp_Body : constant Node_Id := Unit_Declaration_Node (Subp);\n                   Elmt      : Elmt_Id;"}, {"sha": "7b1fd5500670a94d4d39ec5bf35ee147b0b31c60", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -5090,9 +5090,9 @@ package body Sem_Prag is\n       --  Start of processing for Process_Restrictions_Or_Restriction_Warnings\n \n       begin\n-         --  Ignore all Restrictions pragma in CodePeer and Alfa modes\n+         --  Ignore all Restrictions pragma in CodePeer mode\n \n-         if CodePeer_Mode or Alfa_Mode then\n+         if CodePeer_Mode then\n             return;\n          end if;\n "}, {"sha": "fbc72a8cafabb4d0d332cf4ee02945017ff11315", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -12656,6 +12656,11 @@ package body Sem_Util is\n \n    begin\n       case Ekind (E) is\n+         when E_Constant =>\n+            if Present (Full_View (E)) then\n+               U := Full_View (E);\n+            end if;\n+\n          when Type_Kind =>\n             if Present (Full_View (E)) then\n                U := Full_View (E);"}, {"sha": "fc408b31a4a778167708d4b3b8ac843f55ac0527", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=36b8f95fd05bae0b3061ddaca4f0458c08f9e8d5", "patch": "@@ -1448,7 +1448,8 @@ package Sem_Util is\n    --  views of the same entity have the same unique defining entity:\n    --  * package spec and body;\n    --  * subprogram declaration, subprogram stub and subprogram body;\n-   --  * private view and full view of a type.\n+   --  * private view and full view of a type;\n+   --  * private view and full view of a deferred constant.\n    --  In other cases, return the defining entity for N.\n \n    function Unique_Entity (E : Entity_Id) return Entity_Id;"}]}