{"sha": "13b670acd32e02f0d749723a9631f2582bb2771d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiNjcwYWNkMzJlMDJmMGQ3NDk3MjNhOTYzMWYyNTgyYmIyNzcxZA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-09-26T17:44:13Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-09-26T17:44:13Z"}, "message": "re PR fortran/58113 (gfortran.dg/round_4.f90 FAILs)\n\n2013-09-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR fortran/58113\n        * gfortran.dg/round_4.f90: Check for rounding support.\n\nFrom-SVN: r202954", "tree": {"sha": "d98036d5e76a414092bdf284f0b8866a1d2dfaf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d98036d5e76a414092bdf284f0b8866a1d2dfaf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b670acd32e02f0d749723a9631f2582bb2771d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b670acd32e02f0d749723a9631f2582bb2771d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b670acd32e02f0d749723a9631f2582bb2771d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b670acd32e02f0d749723a9631f2582bb2771d/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84f48495e979dee9adf890c0d14b87bf1bf911a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f48495e979dee9adf890c0d14b87bf1bf911a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f48495e979dee9adf890c0d14b87bf1bf911a1"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "b35d8b5e52bd737b0dbd80d72d7a83df19c0a0b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b670acd32e02f0d749723a9631f2582bb2771d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b670acd32e02f0d749723a9631f2582bb2771d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13b670acd32e02f0d749723a9631f2582bb2771d", "patch": "@@ -1,3 +1,8 @@\n+2013-09-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR fortran/58113\n+\t* gfortran.dg/round_4.f90: Check for rounding support.\n+\n 2013-09-26  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* g++.dg/vect/pr58513.cc (op): Make static."}, {"sha": "093d04ea79642ccb791ae9984fe0368427574810", "filename": "gcc/testsuite/gfortran.dg/round_4.f90", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b670acd32e02f0d749723a9631f2582bb2771d/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b670acd32e02f0d749723a9631f2582bb2771d/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_4.f90?ref=13b670acd32e02f0d749723a9631f2582bb2771d", "patch": "@@ -6,12 +6,18 @@\n ! Test whether I/O rounding works. Uses internally (libgfortran) strtod\n ! for the conversion - and sets the CPU rounding mode accordingly.\n !\n+! Only few strtod implementations currently support rounding. Therefore\n+! we use a heuristic to determine if the rounding support is available.\n+! The assumption is that if strtod gives *different* results for up/down\n+! rounding, then it will give *correct* results for nearest/zero/up/down\n+! rounding too. And that is what is effectively checked.\n+!\n ! If it doesn't work on your system, please check whether strtod handles\n-! rounding and whether your system is supported in libgfortran/config/fpu*.c\n+! rounding correctly and whether your system is supported in\n+! libgfortran/config/fpu*.c\n !\n ! Please only add ... run { target { ! { triplets } } } if it is unfixable\n-! on your target - and a note why (strtod doesn't handle it, no rounding\n-! support, etc.)\n+! on your target - and a note why (strtod has broken rounding support, etc.)\n !\n program main\n   use iso_fortran_env\n@@ -27,6 +33,17 @@ program main\n   real(xp) :: r10p, r10m, ref10u, ref10d\n   real(qp) :: r16p, r16m, ref16u, ref16d\n   character(len=20) :: str, round\n+  logical :: rnd4, rnd8, rnd10, rnd16\n+\n+  ! Test for which types glibc's strtod function supports rounding\n+  str = '0.01 0.01 0.01 0.01'\n+  read (str, *, round='up') r4p, r8p, r10p, r16p\n+  read (str, *, round='down') r4m, r8m, r10m, r16m\n+  rnd4 = r4p /= r4m\n+  rnd8 = r8p /= r8m\n+  rnd10 = r10p /= r10m\n+  rnd16 = r16p /= r16m\n+!  write (*, *) rnd4, rnd8, rnd10, rnd16\n \n   ref4u = 0.100000001_4\n   ref8u = 0.10000000000000001_8\n@@ -55,40 +72,40 @@ program main\n \n   round = 'up'\n   call t()\n-  if (r4p  /= ref4u  .or. r4m  /= -ref4d)  call abort()\n-  if (r8p  /= ref8u  .or. r8m  /= -ref8d)  call abort()\n-  if (r10p /= ref10u .or. r10m /= -ref10d) call abort()\n-  if (r16p /= ref16u .or. r16m /= -ref16d) call abort()\n+  if (rnd4  .and. (r4p  /= ref4u  .or. r4m  /= -ref4d))  call abort()\n+  if (rnd8  .and. (r8p  /= ref8u  .or. r8m  /= -ref8d))  call abort()\n+  if (rnd10 .and. (r10p /= ref10u .or. r10m /= -ref10d)) call abort()\n+  if (rnd16 .and. (r16p /= ref16u .or. r16m /= -ref16d)) call abort()\n \n   round = 'down'\n   call t()\n-  if (r4p  /= ref4d  .or. r4m  /= -ref4u)  call abort()\n-  if (r8p  /= ref8d  .or. r8m  /= -ref8u)  call abort()\n-  if (r10p /= ref10d .or. r10m /= -ref10u) call abort()\n-  if (r16p /= ref16d .or. r16m /= -ref16u) call abort()\n+  if (rnd4  .and. (r4p  /= ref4d  .or. r4m  /= -ref4u))  call abort()\n+  if (rnd8  .and. (r8p  /= ref8d  .or. r8m  /= -ref8u))  call abort()\n+  if (rnd10 .and. (r10p /= ref10d .or. r10m /= -ref10u)) call abort()\n+  if (rnd16 .and. (r16p /= ref16d .or. r16m /= -ref16u)) call abort()\n \n   round = 'zero'\n   call t()\n-  if (r4p  /= ref4d  .or. r4m  /= -ref4d)  call abort()\n-  if (r8p  /= ref8d  .or. r8m  /= -ref8d)  call abort()\n-  if (r10p /= ref10d .or. r10m /= -ref10d) call abort()\n-  if (r16p /= ref16d .or. r16m /= -ref16d) call abort()\n+  if (rnd4  .and. (r4p  /= ref4d  .or. r4m  /= -ref4d))  call abort()\n+  if (rnd8  .and. (r8p  /= ref8d  .or. r8m  /= -ref8d))  call abort()\n+  if (rnd10 .and. (r10p /= ref10d .or. r10m /= -ref10d)) call abort()\n+  if (rnd16 .and. (r16p /= ref16d .or. r16m /= -ref16d)) call abort()\n \n   round = 'nearest'\n   call t()\n-  if (r4p  /= ref4u  .or. r4m  /= -ref4u)  call abort()\n-  if (r8p  /= ref8u  .or. r8m  /= -ref8u)  call abort()\n-  if (r10p /= ref10u .or. r10m /= -ref10u) call abort()\n-  if (r16p /= ref16u .or. r16m /= -ref16u) call abort()\n+  if (rnd4  .and. (r4p  /= ref4u  .or. r4m  /= -ref4u))  call abort()\n+  if (rnd8  .and. (r8p  /= ref8u  .or. r8m  /= -ref8u))  call abort()\n+  if (rnd10 .and. (r10p /= ref10u .or. r10m /= -ref10u)) call abort()\n+  if (rnd16 .and. (r16p /= ref16u .or. r16m /= -ref16u)) call abort()\n \n ! Same as nearest (but rounding towards zero if there is a tie\n ! [does not apply here])\n   round = 'compatible'\n   call t()\n-  if (r4p  /= ref4u  .or. r4m  /= -ref4u)  call abort()\n-  if (r8p  /= ref8u  .or. r8m  /= -ref8u)  call abort()\n-  if (r10p /= ref10u .or. r10m /= -ref10u) call abort()\n-  if (r16p /= ref16u .or. r16m /= -ref16u) call abort()\n+  if (rnd4  .and. (r4p  /= ref4u  .or. r4m  /= -ref4u))  call abort()\n+  if (rnd8  .and. (r8p  /= ref8u  .or. r8m  /= -ref8u))  call abort()\n+  if (rnd10 .and. (r10p /= ref10u .or. r10m /= -ref10u)) call abort()\n+  if (rnd16 .and. (r16p /= ref16u .or. r16m /= -ref16u)) call abort()\n contains\n   subroutine t()\n !    print *, round"}]}