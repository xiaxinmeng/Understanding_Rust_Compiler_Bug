{"sha": "8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyN2I3ZDRkMWIzNWZhMGQyZjUxNGE5OGQwNTI0ZWZmMjI3OGU0MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-05T16:05:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-05T16:05:06Z"}, "message": "c-common.c, [...]: Fix comment formatting.\n\n\t* c-common.c, c-decl.c, combine.c, defaults.h, fold-const.c,\n\tgimplify.c, gthr-nks.h, hooks.c, lambda-code.c, lambda-mat.c,\n\tstor-layout.c, target.h, tree-cfg.c, tree-chrec.c,\n\ttree-if-conv.c, tree-inline.c, tree-into-ssa.c,\n\ttree-mudflap.c, tree-optimize.c, tree-scalar-evolution.c,\n\ttree-ssa-alias.c, tree-ssa-ccp.c, tree-ssa-dce.c,\n\ttree-ssa-pre.c, tree-vectorizer.c, tree-vectorizer.h, tree.h,\n\tvec.h: Fix comment formatting.\n\nFrom-SVN: r87105", "tree": {"sha": "f62d741d707e9201cb9c5b7758045bd92d649415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f62d741d707e9201cb9c5b7758045bd92d649415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/comments", "author": null, "committer": null, "parents": [{"sha": "2a7e31df70cf600dfaa401cb426578994739bce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7e31df70cf600dfaa401cb426578994739bce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7e31df70cf600dfaa401cb426578994739bce0"}], "stats": {"total": 159, "additions": 85, "deletions": 74}, "files": [{"sha": "77cdac9e450bdd250ce69bb34408f4aa4866ffe4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -1,3 +1,14 @@\n+2004-09-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.c, c-decl.c, combine.c, defaults.h, fold-const.c,\n+\tgimplify.c, gthr-nks.h, hooks.c, lambda-code.c, lambda-mat.c,\n+\tstor-layout.c, target.h, tree-cfg.c, tree-chrec.c,\n+\ttree-if-conv.c, tree-inline.c, tree-into-ssa.c,\n+\ttree-mudflap.c, tree-optimize.c, tree-scalar-evolution.c,\n+\ttree-ssa-alias.c, tree-ssa-ccp.c, tree-ssa-dce.c,\n+\ttree-ssa-pre.c, tree-vectorizer.c, tree-vectorizer.h, tree.h,\n+\tvec.h: Fix comment formatting.\n+\n 2004-09-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-common.c, cfgexpand.c, cgraphunit.c, defaults.h,"}, {"sha": "e1fa8e497cde466640039f2aded72f0b4aebadd8", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -2557,7 +2557,7 @@ c_type_hash (const void *p)\n   tree t2;\n   switch (TREE_CODE (t))\n     {\n-    /* For pointers, hash on pointee type plus some swizzling. */\n+    /* For pointers, hash on pointee type plus some swizzling.  */\n     case POINTER_TYPE:\n       return c_type_hash (TREE_TYPE (t)) ^ 0x3003003;\n     /* Hash on number of elements and total size.  */\n@@ -3009,7 +3009,7 @@ c_common_nodes_and_builtins (void)\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);\n \n-  /* This node must not be shared. */\n+  /* This node must not be shared.  */\n   void_zero_node = make_node (INTEGER_CST);\n   TREE_TYPE (void_zero_node) = void_type_node;\n "}, {"sha": "f5c74f35aa661006e639cf8a5376765fdb8ee185", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -1280,7 +1280,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t not undefined behavior, and is the most convenient way to get\n \t some effects (see e.g.  what unwind-dw2-fde-glibc.c does to\n \t the definition of _Unwind_Find_FDE in unwind-dw2-fde.c), but\n-\t we do diagnose it if -Wtraditional. */\n+\t we do diagnose it if -Wtraditional.  */\n       if (TREE_PUBLIC (olddecl) && !TREE_PUBLIC (newdecl))\n \t{\n \t  /* Two exceptions to the rule.  If olddecl is an extern\n@@ -1483,7 +1483,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t definition.  */\n       && !(TREE_CODE (newdecl) == FUNCTION_DECL\n \t   && DECL_INITIAL (newdecl) && !DECL_INITIAL (olddecl))\n-      /* Don't warn about redundant redeclarations of builtins. */\n+      /* Don't warn about redundant redeclarations of builtins.  */\n       && !(TREE_CODE (newdecl) == FUNCTION_DECL\n \t   && !DECL_BUILT_IN (newdecl)\n \t   && DECL_BUILT_IN (olddecl)"}, {"sha": "ea4c5b257473c46627d23d00b28a8e7d3f1ff5e0", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -1251,7 +1251,7 @@ can_combine_p (rtx insn, rtx i3, rtx pred ATTRIBUTE_UNUSED, rtx succ,\n       if (GET_CODE (XVECEXP (PATTERN (i3), 0, i)) == CLOBBER)\n \t{\n           /* Don't substitute for a register intended as a clobberable\n-\t     operand. */\n+\t     operand.  */\n \t  rtx reg = XEXP (XVECEXP (PATTERN (i3), 0, i), 0);\n \t  if (rtx_equal_p (reg, dest))\n \t    return 0;"}, {"sha": "588d0fc99183557f205c72e277d31dc8fd12fa83", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -243,7 +243,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n    archive's table of contents.  Defining this macro to be nonzero has\n    the consequence that certain symbols will not be made weak that\n    otherwise would be.  The C++ ABI requires this macro to be zero;\n-   see the documentation. */\n+   see the documentation.  */\n #ifndef TARGET_WEAK_NOT_IN_ARCHIVE_TOC\n #define TARGET_WEAK_NOT_IN_ARCHIVE_TOC 0\n #endif"}, {"sha": "a86fb4c1187b5981ba3c44b9062c0d8ad238e9f4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -10584,7 +10584,7 @@ round_up (tree value, int divisor)\n   /* See if VALUE is already a multiple of DIVISOR.  If so, we don't\n      have to do anything.  Only do this when we are not given a const,\n      because in that case, this check is more expensive than just\n-     doing it. */\n+     doing it.  */\n   if (TREE_CODE (value) != INTEGER_CST)\n     {\n       div = build_int_cst (TREE_TYPE (value), divisor);\n@@ -10629,7 +10629,7 @@ round_down (tree value, int divisor)\n   /* See if VALUE is already a multiple of DIVISOR.  If so, we don't\n      have to do anything.  Only do this when we are not given a const,\n      because in that case, this check is more expensive than just\n-     doing it. */\n+     doing it.  */\n   if (TREE_CODE (value) != INTEGER_CST)\n     {\n       div = build_int_cst (TREE_TYPE (value), divisor);"}, {"sha": "839b62553b65815c26917842a21530fe1138170a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -4123,7 +4123,7 @@ gimplify_type_sizes (tree type, tree *list_p)\n       break;\n \n     case ARRAY_TYPE:\n-      /* These anonymous types don't have declarations, so handle them here. */\n+      /* These anonymous types don't have declarations, so handle them here.  */\n       gimplify_type_sizes (TYPE_DOMAIN (type), list_p);\n       break;\n "}, {"sha": "cee8059dbb0f04852cc2c61edfb9f2ef91127ee9", "filename": "gcc/gthr-nks.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fgthr-nks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fgthr-nks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-nks.h?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #define __gthr_nks_h\n \n /* NKS threads specific definitions.\n-   Easy, since the interface is mostly one-to-one mapping. */\n+   Easy, since the interface is mostly one-to-one mapping.  */\n \n #define __GTHREADS 1\n \n@@ -63,7 +63,7 @@ static NXKey_t _objc_thread_storage;\n \n /* Backend initialization functions */\n \n-/* Initialize the threads subsystem. */\n+/* Initialize the threads subsystem.  */\n static inline int\n __gthread_objc_init_thread_system(void)\n {\n@@ -73,7 +73,7 @@ __gthread_objc_init_thread_system(void)\n   return -1;\n }\n \n-/* Close the threads subsystem. */\n+/* Close the threads subsystem.  */\n static inline int\n __gthread_objc_close_thread_system(void)\n {\n@@ -84,7 +84,7 @@ __gthread_objc_close_thread_system(void)\n \n /* Backend thread functions */\n \n-/* Create a new thread of execution. */\n+/* Create a new thread of execution.  */\n static inline objc_thread_t\n __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n {\n@@ -105,7 +105,7 @@ __gthread_objc_thread_detach(void (*func)(void *), void *arg)\n   return thread_id;\n }\n \n-/* Set the current thread's priority. */\n+/* Set the current thread's priority.  */\n static inline int\n __gthread_objc_thread_set_priority(int priority)\n {\n@@ -114,7 +114,7 @@ __gthread_objc_thread_set_priority(int priority)\n   return -1;\n }\n \n-/* Return the current thread's priority. */\n+/* Return the current thread's priority.  */\n static inline int\n __gthread_objc_thread_get_priority(void)\n {\n@@ -125,14 +125,14 @@ __gthread_objc_thread_get_priority(void)\n   return -1;\n }\n \n-/* Yield our process time to another thread. */\n+/* Yield our process time to another thread.  */\n static inline void\n __gthread_objc_thread_yield(void)\n {\n   NXThreadYield();\n }\n \n-/* Terminate the current thread. */\n+/* Terminate the current thread.  */\n static inline int\n __gthread_objc_thread_exit(void)\n {\n@@ -143,21 +143,21 @@ __gthread_objc_thread_exit(void)\n   return -1;\n }\n \n-/* Returns an integer value which uniquely describes a thread. */\n+/* Returns an integer value which uniquely describes a thread.  */\n static inline objc_thread_t\n __gthread_objc_thread_id(void)\n {\n   (objc_thread_t) NXThreadGetId();\n }\n \n-/* Sets the thread's local storage pointer. */\n+/* Sets the thread's local storage pointer.  */\n static inline int\n __gthread_objc_thread_set_data(void *value)\n {\n   return NXKeySetValue(_objc_thread_storage, value);\n }\n \n-/* Returns the thread's local storage pointer. */\n+/* Returns the thread's local storage pointer.  */\n static inline void *\n __gthread_objc_thread_get_data(void)\n {\n@@ -170,7 +170,7 @@ __gthread_objc_thread_get_data(void)\n \n /* Backend mutex functions */\n \n-/* Allocate a mutex. */\n+/* Allocate a mutex.  */\n static inline int\n __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n {\n@@ -181,7 +181,7 @@ __gthread_objc_mutex_allocate(objc_mutex_t mutex)\n   return -1;\n }\n \n-/* Deallocate a mutex. */\n+/* Deallocate a mutex.  */\n static inline int\n __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n {\n@@ -193,14 +193,14 @@ __gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n   return 0;\n }\n \n-/* Grab a lock on a mutex. */\n+/* Grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_lock(objc_mutex_t mutex)\n {\n   return NXLock((NXMutex_t *)mutex->backend);\n }\n \n-/* Try to grab a lock on a mutex. */\n+/* Try to grab a lock on a mutex.  */\n static inline int\n __gthread_objc_mutex_trylock(objc_mutex_t mutex)\n {\n@@ -218,7 +218,7 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Backend condition mutex functions */\n \n-/* Allocate a condition. */\n+/* Allocate a condition.  */\n static inline int\n __gthread_objc_condition_allocate(objc_condition_t condition)\n {\n@@ -229,7 +229,7 @@ __gthread_objc_condition_allocate(objc_condition_t condition)\n   return 0;\n }\n \n-/* Deallocate a condition. */\n+/* Deallocate a condition.  */\n static inline int\n __gthread_objc_condition_deallocate(objc_condition_t condition)\n {\n@@ -246,14 +246,14 @@ __gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n   return NXCondWait((NXCond_t *)condition->backend, (NXMutex_t *)mutex->backend);\n }\n \n-/* Wake up all threads waiting on this condition. */\n+/* Wake up all threads waiting on this condition.  */\n static inline int\n __gthread_objc_condition_broadcast(objc_condition_t condition)\n {\n   return NXCondBroadcast((NXCond_t *)condition->backend);\n }\n \n-/* Wake up one thread waiting on this condition. */\n+/* Wake up one thread waiting on this condition.  */\n static inline int\n __gthread_objc_condition_signal(objc_condition_t condition)\n {\n@@ -303,7 +303,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  /* Just reset the key value to zero. */\n+  /* Just reset the key value to zero.  */\n   if (ptr)\n     return NXKeySetValue (key, NULL);\n   return 0;"}, {"sha": "be4b9f9be16220b448f58b646130803df81309f6", "filename": "gcc/hooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -48,7 +48,7 @@ hook_bool_void_true (void)\n   return true;\n }\n \n-/* Generic hook that takes no arguments and returns NO_REGS. */\n+/* Generic hook that takes no arguments and returns NO_REGS.  */\n int\n hook_int_void_no_regs (void)\n {"}, {"sha": "cdf04708bfb46fc16505781552a173e1ca47d03d", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -288,7 +288,7 @@ print_lambda_linear_expression (FILE * outfile,\n /* Print a lambda loop structure LOOP to OUTFILE.  The depth/number of\n    coefficients is given by DEPTH, the number of invariants is \n    given by INVARIANTS, and the character to start variable names with is given\n-   by START. */\n+   by START.  */\n \n void\n print_lambda_loop (FILE * outfile, lambda_loop loop, int depth,\n@@ -487,7 +487,7 @@ lcm (int a, int b)\n }\n \n /* Compute the loop bounds for the auxiliary space NEST.\n-   Input system used is Ax <= b.  TRANS is the unimodular transformation. */\n+   Input system used is Ax <= b.  TRANS is the unimodular transformation.  */\n \n static lambda_loopnest\n lambda_compute_auxillary_space (lambda_loopnest nest,\n@@ -702,7 +702,7 @@ lambda_compute_auxillary_space (lambda_loopnest nest,\n \n \t    }\n \t}\n-      /* creates a new system by deleting the i'th variable. */\n+      /* creates a new system by deleting the i'th variable.  */\n       newsize = 0;\n       for (j = 0; j < size; j++)\n \t{\n@@ -1360,7 +1360,7 @@ gcc_loop_to_lambda_loop (struct loop *loop, int depth,\n   if (VEC_length (tree, *invariants) > (unsigned int) (2 * depth))\n     abort ();\n \n-  /* We might have some leftover. */\n+  /* We might have some leftover.  */\n   if (TREE_CODE (test) == LT_EXPR)\n     extra = -1 * stepint;\n   else if (TREE_CODE (test) == NE_EXPR)\n@@ -1785,15 +1785,15 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       newloop = LN_LOOPS (new_loopnest)[i];\n \n       /* Linear offset is a bit tricky to handle.  Punt on the unhandled\n-         cases for now. */\n+         cases for now.  */\n       offset = LL_LINEAR_OFFSET (newloop);\n \n       if (LLE_DENOMINATOR (offset) != 1\n \t  || !lambda_vector_zerop (LLE_COEFFICIENTS (offset), depth))\n \tabort ();\n \n       /* Now build the  new lower bounds, and insert the statements\n-         necessary to generate it on the loop preheader. */\n+         necessary to generate it on the loop preheader.  */\n       newlowerbound = lle_to_gcc_expression (LL_LOWER_BOUND (newloop),\n \t\t\t\t\t     LL_LINEAR_OFFSET (newloop),\n \t\t\t\t\t     new_ivs,"}, {"sha": "4734dc297b821b847443b45675c82953d762327d", "filename": "gcc/lambda-mat.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Flambda-mat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Flambda-mat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-mat.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -155,7 +155,7 @@ lambda_matrix_get_column (lambda_matrix mat, int n, int col,\n     vec[i] = mat[i][col];\n }\n \n-/* Delete rows r1 to r2 (not including r2). */\n+/* Delete rows r1 to r2 (not including r2).  */\n \n void\n lambda_matrix_delete_rows (lambda_matrix mat, int rows, int from, int to)\n@@ -463,7 +463,7 @@ lambda_matrix_hermite (lambda_matrix mat, int n,\n    \"U.A = S\".  This decomposition is also known as \"right Hermite\".\n    \n    Ref: Algorithm 2.1 page 33 in \"Loop Transformations for\n-   Restructuring Compilers\" Utpal Banerjee. */\n+   Restructuring Compilers\" Utpal Banerjee.  */\n \n void\n lambda_matrix_right_hermite (lambda_matrix A, int m, int n,\n@@ -508,7 +508,7 @@ lambda_matrix_right_hermite (lambda_matrix A, int m, int n,\n    V.S\".  This decomposition is also known as \"left Hermite\".\n    \n    Ref: Algorithm 2.2 page 36 in \"Loop Transformations for\n-   Restructuring Compilers\" Utpal Banerjee. */\n+   Restructuring Compilers\" Utpal Banerjee.  */\n \n void\n lambda_matrix_left_hermite (lambda_matrix A, int m, int n,"}, {"sha": "01c9947a56f70e237bba3d7ecacc5138abecfba0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -44,7 +44,7 @@ tree sizetype_tab[(int) TYPE_KIND_LAST];\n /* If nonzero, this is an upper limit on alignment of structure fields.\n    The value is measured in bits.  */\n unsigned int maximum_field_alignment = TARGET_DEFAULT_PACK_STRUCT * BITS_PER_UNIT;\n-/* ... and its original value in bytes, specified via -fpack-struct=<value>. */\n+/* ... and its original value in bytes, specified via -fpack-struct=<value>.  */\n unsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT;\n \n /* If nonzero, the alignment of a bitstring or (power-)set value, in bits."}, {"sha": "e91219cfd5634f0d5bc9cf248e503a4084022b59", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -281,7 +281,7 @@ struct gcc_target\n     bool (* is_costly_dependence) (rtx, rtx, rtx, int, int);\n   } sched;\n \n-  /* Return machine mode for filter value. */\n+  /* Return machine mode for filter value.  */\n   enum machine_mode (* eh_return_filter_mode) (void);\n \n   /* Given two decls, merge their attributes and return the result.  */"}, {"sha": "2be194794dcd4464370b4c5daf83aa4de3e79aea", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -2000,7 +2000,7 @@ cleanup_control_expr_graph (basic_block bb, block_stmt_iterator bsi)\n \n /* Given a control block BB and a predicate VAL, return the edge that\n    will be taken out of the block.  If VAL does not match a unique\n-   edge, NULL is returned. */\n+   edge, NULL is returned.  */\n \n edge\n find_taken_edge (basic_block bb, tree val)"}, {"sha": "d16522f5fae0ef9b9a9db9b5b8dd92bfb3954c34", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -241,7 +241,7 @@ chrec_fold_automatically_generated_operands (tree op0,\n       || op1 == chrec_not_analyzed_yet)\n     return chrec_not_analyzed_yet;\n   \n-  /* The default case produces a safe result. */\n+  /* The default case produces a safe result.  */\n   return chrec_dont_know;\n }\n "}, {"sha": "86e1bb0ce8b481d2240869201a3f72b482b4b0e8", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -467,7 +467,7 @@ if_convertable_stmt_p (struct loop *loop, basic_block bb, tree stmt)\n    - Basic block is after exit block but before latch.\n    - Basic block edge(s) is not normal.\n    EXIT_BB_SEEN is true if basic block with exit edge is already seen.\n-   BB is inside loop LOOP. */\n+   BB is inside loop LOOP.  */\n \n static bool\n if_convertable_bb_p (struct loop *loop, basic_block bb, bool exit_bb_seen)\n@@ -847,7 +847,7 @@ process_phi_nodes (struct loop *loop)\n }\n \n /* Combine all basic block from the given LOOP into one or two super\n-   basic block.  Replace PHI nodes with conditional modify expression. */\n+   basic block.  Replace PHI nodes with conditional modify expression.  */\n \n static void\n combine_blocks (struct loop *loop)"}, {"sha": "71e9ef2731bc603c493ee3dffb0e09da8e6d6f1b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -183,7 +183,7 @@ remap_decl (tree decl, inline_data *id)\n       walk_tree (&DECL_SIZE (t), copy_body_r, id, NULL);\n       walk_tree (&DECL_SIZE_UNIT (t), copy_body_r, id, NULL);\n \n-      /* If fields, do likewise for offset and qualifier. */\n+      /* If fields, do likewise for offset and qualifier.  */\n       if (TREE_CODE (t) == FIELD_DECL)\n \t{\n \t  walk_tree (&DECL_FIELD_OFFSET (t), copy_body_r, id, NULL);\n@@ -691,7 +691,7 @@ setup_one_parameter (inline_data *id, tree p, tree value, tree fn,\n \n   /* Make an equivalent VAR_DECL.  Note that we must NOT remap the type\n      here since the type of this decl must be visible to the calling\n-     function. */\n+     function.  */\n   var = copy_decl_for_inlining (p, fn, VARRAY_TREE (id->fns, 0));\n \n   /* Register the VAR_DECL as the equivalent for the PARM_DECL;\n@@ -1965,7 +1965,7 @@ walk_type_fields (tree type, walk_tree_fn func, void *data, void *htab)\n \n     case ARRAY_TYPE:\n       /* Don't follow this nodes's type if a pointer for fear that we'll\n-\t have infinite recursion.  Those types are uninteresting anyway. */\n+\t have infinite recursion.  Those types are uninteresting anyway.  */\n       if (!POINTER_TYPE_P (TREE_TYPE (type))\n \t  && TREE_CODE (TREE_TYPE (type)) != OFFSET_TYPE)\n \tWALK_SUBTREE (TREE_TYPE (type));"}, {"sha": "5df92ff94a0b57a5a2a038bb4596d5f045c698de", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -67,7 +67,7 @@ struct def_blocks_d\n      Ith block contains a definition of VAR.  */\n   bitmap def_blocks;\n \n-  /* Blocks that contain a phi node for VAR. */\n+  /* Blocks that contain a phi node for VAR.  */\n   bitmap phi_blocks;\n \n   /* Blocks where VAR is live-on-entry.  Similar semantics as"}, {"sha": "5ee7e1bfba122da6b5c39341d7d62293dddc6221", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -193,7 +193,7 @@ mf_file_function_line_tree (location_t location)\n   char *string;\n   tree result;\n \n-  /* Add FILENAME[:LINENUMBER]. */\n+  /* Add FILENAME[:LINENUMBER].  */\n   file = xloc.file;\n   if (file == NULL && current_function_decl != NULL_TREE)\n     file = DECL_SOURCE_FILE (current_function_decl);\n@@ -251,7 +251,7 @@ static GTY (()) tree mf_cache_shift_decl;\n /* extern uintptr_t __mf_lc_mask; */\n static GTY (()) tree mf_cache_mask_decl;\n \n-/* Their function-scope local shadows, used in single-threaded mode only. */\n+/* Their function-scope local shadows, used in single-threaded mode only.  */\n \n /* auto const unsigned char __mf_lc_shift_l; */\n static GTY (()) tree mf_cache_shift_decl_l;\n@@ -413,7 +413,7 @@ execute_mudflap_function_ops (void)\n \n /* Create and initialize local shadow variables for the lookup cache\n    globals.  Put their decls in the *_l globals for use by\n-   mf_build_check_statement_for. */\n+   mf_build_check_statement_for.  */\n \n static void\n mf_decl_cache_locals (void)\n@@ -462,7 +462,7 @@ mf_decl_cache_locals (void)\n static void\n mf_decl_clear_locals (void)\n {\n-  /* Unset local shadows. */\n+  /* Unset local shadows.  */\n   mf_cache_shift_decl_l = NULL_TREE;\n   mf_cache_mask_decl_l = NULL_TREE;\n }"}, {"sha": "71b66c87e6f1ed55d63e1cc624c494e1e36b0e7a", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -260,7 +260,7 @@ next_pass_1 (struct tree_opt_pass **list, struct tree_opt_pass *pass)\n {\n \n   /* A non-zero static_pass_number indicates that the\n-     pass is already in the list. */\n+     pass is already in the list.  */\n   if (pass->static_pass_number)\n     {\n       struct tree_opt_pass *new;"}, {"sha": "2566a238547214daf8dc7e9a9bf9b944bf2ac01d", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -514,7 +514,7 @@ compute_overall_effect_of_inner_loop (struct loop *loop, tree evolution_fn)\n \t\t its value in the nb_iter-th iteration.  */\n \t      res = chrec_apply (inner_loop->num, evolution_fn, nb_iter);\n \t      \n-\t      /* Continue the computation until ending on a parent of LOOP. */\n+\t      /* Continue the computation until ending on a parent of LOOP.  */\n \t      return compute_overall_effect_of_inner_loop (loop, res);\n \t    }\n \t}\n@@ -1572,7 +1572,7 @@ analyze_evolution_in_loop (tree loop_phi_node,\n \tev_fn = chrec_dont_know;\n       \n       /* When there are multiple back edges of the loop (which in fact never\n-\t happens currently, but nevertheless), merge their evolutions. */\n+\t happens currently, but nevertheless), merge their evolutions.  */\n       evolution_function = chrec_merge (evolution_function, ev_fn);\n     }\n   "}, {"sha": "3569023ad781d708df2c66b103d26f1e90f5f89a", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -1703,7 +1703,7 @@ set_pt_malloc (tree ptr)\n   struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n \n   /* If the pointer has already been found to point to arbitrary\n-     memory locations, it is unsafe to mark it as pointing to malloc. */\n+     memory locations, it is unsafe to mark it as pointing to malloc.  */\n   if (pi->pt_anything)\n     return;\n "}, {"sha": "e3577c1da1881d0d7d3376218c5db9fb802024c5", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -328,7 +328,7 @@ likely_value (tree stmt)\n         return UNKNOWN_VAL;\n \t\n #ifdef ENABLE_CHECKING\n-  /* There should be no VUSE operands that are UNDEFINED. */\n+  /* There should be no VUSE operands that are UNDEFINED.  */\n   if (val->lattice_val == UNDEFINED)\n     abort ();\n #endif\n@@ -773,7 +773,7 @@ ccp_visit_phi_node (tree phi)\n       fprintf (dump_file, \"\\n\\n\");\n     }\n \n-  /* Check for an invalid change from UNKNOWN_VAL to UNDEFINED. */\n+  /* Check for an invalid change from UNKNOWN_VAL to UNDEFINED.  */\n   if (old_val->lattice_val == UNKNOWN_VAL\n       && new_val.lattice_val == UNDEFINED)\n     return SSA_PROP_NOT_INTERESTING;\n@@ -1076,7 +1076,7 @@ visit_assignment (tree stmt, tree *output_p)\n   }\n \n   /* If LHS is not a gimple register, then it cannot take on an\n-     UNDEFINED value. */\n+     UNDEFINED value.  */\n   if (!is_gimple_reg (SSA_NAME_VAR (lhs)) \n       && val.lattice_val == UNDEFINED)\n     val.lattice_val = UNKNOWN_VAL;      "}, {"sha": "3b08aa32de4c37046ccbfea16522700299d09408", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -425,7 +425,7 @@ mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n \t{\n \t  /* If LHS is NULL, it means that we couldn't get the base\n \t     address of the reference.  In which case, we should not\n-\t     remove this store. */\n+\t     remove this store.  */\n \t  mark_stmt_necessary (stmt, true);\n \t}\n       else if (DECL_P (lhs))"}, {"sha": "2bdf8853ca51ade7cff509465e8e20be725bc915", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -225,7 +225,7 @@ typedef struct value_set\n \n \n /* An unordered bitmap set.  One bitmap tracks values, the other,\n-   expressions. */\n+   expressions.  */\n typedef struct bitmap_set\n {\n   bitmap expressions;\n@@ -321,7 +321,7 @@ static htab_t phi_translate_table;\n \n typedef struct expr_pred_trans_d\n {\n-  /* The expression. */\n+  /* The expression.  */\n   tree e;\n \n   /* The predecessor block along which we translated the expression.  */\n@@ -371,7 +371,7 @@ expr_pred_trans_eq (const void *p1, const void *p2)\n \n /* Search in the phi translation table for the translation of\n    expression E in basic block PRED. Return the translated value, if\n-   found, NULL otherwise. */ \n+   found, NULL otherwise.  */ \n \n static inline tree\n phi_trans_lookup (tree e, basic_block pred)\n@@ -703,7 +703,7 @@ bitmap_set_subtract_from_value_set (value_set_t a, bitmap_set_t b,\n   return ret;\n }\n \n-/* Return true if two sets are equal. */\n+/* Return true if two sets are equal.  */\n \n static bool\n set_equal (value_set_t a, value_set_t b)\n@@ -1533,7 +1533,7 @@ insert_aux (basic_block block)\n \t\t\t      fprintf (dump_file, \"\\n\");\n \t\t\t    }\n \n-\t\t\t  /* Make the necessary insertions. */\n+\t\t\t  /* Make the necessary insertions.  */\n \t\t\t  for (pred = block->pred;\n \t\t\t       pred;\n \t\t\t       pred = pred->pred_next)"}, {"sha": "f229fd45452e7bf3db14f84641ad40de9e95c6ae", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -1432,7 +1432,7 @@ vect_transform_loop_bound (loop_vec_info loop_vinfo)\n \t     &loop_exit_bsi, false, &indx_before_incr, &indx_after_incr);\n \n   /* bsi_insert is using BSI_NEW_STMT. We need to bump it back \n-     to point to the exit condition. */\n+     to point to the exit condition.  */\n   bsi_next (&loop_exit_bsi);\n   if (bsi_stmt (loop_exit_bsi) != orig_cond_expr)\n     abort ();\n@@ -2887,7 +2887,7 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo)\n }\n \n \n-/* Utility functions used by vect_mark_stmts_to_be_vectorized. */\n+/* Utility functions used by vect_mark_stmts_to_be_vectorized.  */\n \n /* Function vect_mark_relevant.\n "}, {"sha": "98c2ac82713c1b81df9b5fe19f1b351469b660de", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -28,7 +28,7 @@ enum vect_var_kind {\n   vect_pointer_var\n };\n \n-/* Defines type of operation: unary or binary. */\n+/* Defines type of operation: unary or binary.  */\n enum operation_type {\n   unary_op = 1,\n   binary_op"}, {"sha": "c078fdb55c797a5bb196bb0212576dc7fb3403ae", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -1097,7 +1097,7 @@ struct tree_vec GTY(())\n #define SET_EXPR_LOCATION(NODE, FROM) \\\n   (EXPR_CHECK (NODE)->exp.locus = (FROM))\n #define EXPR_HAS_LOCATION(NODE) (EXPR_LOCATION (NODE) != UNKNOWN_LOCATION)\n-/* EXPR_LOCUS and SET_EXPR_LOCUS are deprecated. */\n+/* EXPR_LOCUS and SET_EXPR_LOCUS are deprecated.  */\n #define EXPR_LOCUS(NODE)\t\t\t\t\t\\\n   (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (NODE)))\t\\\n    ? &(NODE)->exp.locus\t\t\t\t\t\t\\\n@@ -1430,7 +1430,7 @@ struct tree_block GTY(())\n #define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (VECTOR_TYPE_CHECK (NODE)->type.values)\n \n /* For record and union types, information about this type, as a base type\n-   for itself. */\n+   for itself.  */\n #define TYPE_BINFO(NODE) (RECORD_OR_UNION_CHECK(NODE)->type.binfo)\n \n /* For non record and union types, used in a language-dependent way.  */\n@@ -2369,7 +2369,7 @@ struct tree_value_handle GTY(())\n \n   /* Unique ID for this value handle.  IDs are handed out in a\n      conveniently dense form starting at 0, so that we can make\n-     bitmaps of value handles. */\n+     bitmaps of value handles.  */\n   unsigned int id;\n };\n \f\n@@ -3109,7 +3109,7 @@ extern void put_pending_sizes (tree);\n \n /* If nonzero, an upper limit on alignment of structure fields, in bits,  */\n extern unsigned int maximum_field_alignment;\n-/* and its original value in bytes, specified via -fpack-struct=<value>. */\n+/* and its original value in bytes, specified via -fpack-struct=<value>.  */\n extern unsigned int initial_max_fld_align;\n \n /* If nonzero, the alignment of a bitstring or (power-)set value, in bits.  */"}, {"sha": "cbc5f81062a51d2041c8a3d18ff085b78855a67d", "filename": "gcc/vec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c27b7d4d1b35fa0d2f514a98d0524eff2278e40/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=8c27b7d4d1b35fa0d2f514a98d0524eff2278e40", "patch": "@@ -202,7 +202,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    Push a new element onto the end, returns a pointer to the slot\n    filled in. For object vectors, the new value can be NULL, in which\n    case NO initialization is performed.  Aborts if there is\n-   insufficient space in the vector. */\n+   insufficient space in the vector.  */\n \n #define VEC_quick_push(TDEF,V,O)\t\\\n \t(VEC_OP(TDEF,quick_push)(V,O VEC_CHECK_INFO))"}]}