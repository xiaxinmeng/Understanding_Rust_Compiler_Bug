{"sha": "1cdfa9be54975f0566d6f261a706dcb8d767601d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNkZmE5YmU1NDk3NWYwNTY2ZDZmMjYxYTcwNmRjYjhkNzY3NjAxZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T14:54:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T14:54:24Z"}, "message": "[multiple changes]\n\n2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Create_Finalizer): Treat freeze nodes in similar fashion\n\tto packages. This ensures that the finalizer body will not end up\n\tinside the freeze node.\n\t(Process_Declarations): Add code to detect whether a freeze node has a\n\tnested finalization collection.\n\n2011-08-03  Pascal Obry  <obry@adacore.com>\n\n\t* g-awk.adb, g-awk.ads: Make GNAT.AWK API compatible with Ada 2005.\n\t(Current_Session): Return a not null access to Session_Type.\n\t(Default_Session): Likewise.\n\nFrom-SVN: r177282", "tree": {"sha": "3dfed43821a83ea125d3b2afd4c3d6fa17d004b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dfed43821a83ea125d3b2afd4c3d6fa17d004b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cdfa9be54975f0566d6f261a706dcb8d767601d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdfa9be54975f0566d6f261a706dcb8d767601d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdfa9be54975f0566d6f261a706dcb8d767601d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdfa9be54975f0566d6f261a706dcb8d767601d/comments", "author": null, "committer": null, "parents": [{"sha": "243cae0a5108e18638c9c4844baaf392171130d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243cae0a5108e18638c9c4844baaf392171130d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243cae0a5108e18638c9c4844baaf392171130d4"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "f96bc1e1a0270c03dbc359bf82924ad6cab4f9c9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1cdfa9be54975f0566d6f261a706dcb8d767601d", "patch": "@@ -1,3 +1,17 @@\n+2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Create_Finalizer): Treat freeze nodes in similar fashion\n+\tto packages. This ensures that the finalizer body will not end up\n+\tinside the freeze node.\n+\t(Process_Declarations): Add code to detect whether a freeze node has a\n+\tnested finalization collection.\n+\n+2011-08-03  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-awk.adb, g-awk.ads: Make GNAT.AWK API compatible with Ada 2005.\n+\t(Current_Session): Return a not null access to Session_Type.\n+\t(Default_Session): Likewise.\n+\n 2011-08-03  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cfdlli.adb, bindgen.adb, exp_ch4.adb, exp_ch13.adb, sem_warn.adb,"}, {"sha": "41dba9205dc883c09391cdb08b04631e345a37f8", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=1cdfa9be54975f0566d6f261a706dcb8d767601d", "patch": "@@ -1756,10 +1756,12 @@ package body Exp_Ch7 is\n                Set_Is_Frozen (Fin_Id);\n \n                --  In the case where the last construct to contain a controlled\n-               --  object is either a nested package or instantiation, the body\n-               --  must be inserted directly after the construct.\n+               --  object is either a nested package, an instantiation or a\n+               --  freeze node, the body must be inserted directly after the\n+               --  construct.\n \n                if Nkind_In (Last_Top_Level_Ctrl_Construct,\n+                              N_Freeze_Entity,\n                               N_Package_Declaration,\n                               N_Package_Body)\n                then\n@@ -1988,7 +1990,24 @@ package body Exp_Ch7 is\n                   (Is_Type (Typ)\n                      and then Needs_Finalization (Typ))\n                then\n+                  Old_Counter_Val := Counter_Val;\n+\n+                  --  Freeze nodes are considered to be identical to packages\n+                  --  and blocks in terms of nesting. The difference is that\n+                  --  a finalization collection created inside the freeze node\n+                  --  is at the same nesting level as the node itself.\n+\n                   Process_Declarations (Actions (Decl), Preprocess);\n+\n+                  --  The freeze node contains a finalization collection\n+\n+                  if Preprocess\n+                    and then Top_Level\n+                    and then No (Last_Top_Level_Ctrl_Construct)\n+                    and then Counter_Val > Old_Counter_Val\n+                  then\n+                     Last_Top_Level_Ctrl_Construct := Decl;\n+                  end if;\n                end if;\n \n             --  Nested package declarations, avoid generics"}, {"sha": "f2c934c2f25af62a5fa9122e1330ca0b830e7510", "filename": "gcc/ada/g-awk.adb", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2Fg-awk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2Fg-awk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-awk.adb?ref=1cdfa9be54975f0566d6f261a706dcb8d767601d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2010, AdaCore                     --\n+--                     Copyright (C) 2000-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,11 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Ada_95;\n---  This is needed because the pragmas Warnings (Off) in Current_Session and\n---  Default_Session (see below) do not work when compiling clients of this\n---  package that instantiate generic units herein.\n-\n with Ada.Exceptions;\n with Ada.Text_IO;\n with Ada.Strings.Unbounded;\n@@ -735,30 +730,18 @@ package body GNAT.AWK is\n    -- Current_Session --\n    ---------------------\n \n-   function Current_Session return Session_Type is\n+   function Current_Session return not null access Session_Type is\n    begin\n-      pragma Warnings (Off);\n-      return Cur_Session;\n-      --  ???The above return statement violates the Ada 2005 rule forbidding\n-      --  copying of limited objects (see RM-7.5(2.8/2)). When compiled with\n-      --  -gnatg, the compiler gives a warning instead of an error, so we can\n-      --  turn it off.\n-      pragma Warnings (On);\n+      return Cur_Session.Self;\n    end Current_Session;\n \n    ---------------------\n    -- Default_Session --\n    ---------------------\n \n-   function Default_Session return Session_Type is\n+   function Default_Session return not null access Session_Type is\n    begin\n-      pragma Warnings (Off);\n-      return Def_Session;\n-      --  ???The above return statement violates the Ada 2005 rule forbidding\n-      --  copying of limited objects (see RM-7.5(2.8/2)). When compiled with\n-      --  -gnatg, the compiler gives a warning instead of an error, so we can\n-      --  turn it off.\n-      pragma Warnings (On);\n+      return Def_Session.Self;\n    end Default_Session;\n \n    --------------------"}, {"sha": "d6dc83eb64fd2c359241814fc3a59c5f610f7a9d", "filename": "gcc/ada/g-awk.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2Fg-awk.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdfa9be54975f0566d6f261a706dcb8d767601d/gcc%2Fada%2Fg-awk.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-awk.ads?ref=1cdfa9be54975f0566d6f261a706dcb8d767601d", "patch": "@@ -229,12 +229,12 @@ package GNAT.AWK is\n    --  Set the session to be used by default. This file will be used when the\n    --  Session parameter in following services is not specified.\n \n-   function Current_Session return Session_Type;\n+   function Current_Session return not null access Session_Type;\n    --  Returns the session used by default by all services. This is the\n    --  latest session specified by Set_Current service or the session\n    --  provided by default with this implementation.\n \n-   function Default_Session return Session_Type;\n+   function Default_Session return not null access Session_Type;\n    --  Returns the default session provided by this package. Note that this is\n    --  the session return by Current_Session if Set_Current has not been used.\n \n@@ -633,6 +633,7 @@ private\n \n    type Session_Type is new Ada.Finalization.Limited_Controlled with record\n       Data : Session_Data_Access;\n+      Self : not null access Session_Type := Session_Type'Unchecked_Access;\n    end record;\n \n    procedure Initialize (Session : in out Session_Type);"}]}