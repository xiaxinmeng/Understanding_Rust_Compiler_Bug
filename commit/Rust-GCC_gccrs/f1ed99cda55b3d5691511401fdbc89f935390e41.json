{"sha": "f1ed99cda55b3d5691511401fdbc89f935390e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlZDk5Y2RhNTViM2Q1NjkxNTExNDAxZmRiYzg5ZjkzNTM5MGU0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-11-27T11:37:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-11-27T11:37:06Z"}, "message": "i386.c (ix86_emit_restore_sse_regs_using_mov): Remove unused insn variable.\n\n\t* config/i386/i386.c (ix86_emit_restore_sse_regs_using_mov): Remove\n\tunused insn variable.\n\t* genemit.c (output_peephole2_scratches): Only declare and initialize\n\t_regs_allocated if it will be ever used.\n\t* cfgloopmanip.c (create_empty_if_region_on_edge): Remove unused\n\tsucc_bb variable.\n\t(create_empty_loop_on_edge): Remove unused freq and cnt variables.\n\t* unwind-c.c (PERSONALITY_FUNCTION): Remove unused action_record\n\tvariable.\n\nFrom-SVN: r154701", "tree": {"sha": "027be71194c935739a93c1242312d1cda1ae72c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/027be71194c935739a93c1242312d1cda1ae72c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1ed99cda55b3d5691511401fdbc89f935390e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ed99cda55b3d5691511401fdbc89f935390e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ed99cda55b3d5691511401fdbc89f935390e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ed99cda55b3d5691511401fdbc89f935390e41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e96fee3e91436d8183a5dd06223b37ae8393c928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96fee3e91436d8183a5dd06223b37ae8393c928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96fee3e91436d8183a5dd06223b37ae8393c928"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "7c2c1705ef7807c7bc57616069cc2369a2e91e75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1ed99cda55b3d5691511401fdbc89f935390e41", "patch": "@@ -1,5 +1,15 @@\n 2009-11-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.c (ix86_emit_restore_sse_regs_using_mov): Remove\n+\tunused insn variable.\n+\t* genemit.c (output_peephole2_scratches): Only declare and initialize\n+\t_regs_allocated if it will be ever used.\n+\t* cfgloopmanip.c (create_empty_if_region_on_edge): Remove unused\n+\tsucc_bb variable.\n+\t(create_empty_loop_on_edge): Remove unused freq and cnt variables.\n+\t* unwind-c.c (PERSONALITY_FUNCTION): Remove unused action_record\n+\tvariable.\n+\n \t* opts.c (decode_options): If optimize is bigger than 255,\n \tset it to 255.\n "}, {"sha": "459a1fdf2bfce74452219995ca8861e5cc5cd0e3", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=f1ed99cda55b3d5691511401fdbc89f935390e41", "patch": "@@ -541,13 +541,12 @@ edge\n create_empty_if_region_on_edge (edge entry_edge, tree condition)\n {\n \n-  basic_block succ_bb, cond_bb, true_bb, false_bb, join_bb;\n+  basic_block cond_bb, true_bb, false_bb, join_bb;\n   edge e_true, e_false, exit_edge;\n   gimple cond_stmt;\n   tree simple_cond;\n   gimple_stmt_iterator gsi;\n \n-  succ_bb = entry_edge->dest;\n   cond_bb = split_edge (entry_edge);\n \n   /* Insert condition in cond_bb.  */\n@@ -628,8 +627,6 @@ create_empty_loop_on_edge (edge entry_edge,\n {\n   basic_block loop_header, loop_latch, succ_bb, pred_bb;\n   struct loop *loop;\n-  int freq;\n-  gcov_type cnt;\n   gimple_stmt_iterator gsi;\n   gimple_seq stmts;\n   gimple cond_expr;\n@@ -659,9 +656,6 @@ create_empty_loop_on_edge (edge entry_edge,\n   add_loop (loop, outer);\n \n   /* TODO: Fix frequencies and counts.  */\n-  freq = EDGE_FREQUENCY (entry_edge);\n-  cnt = entry_edge->count;\n-\n   prob = REG_BR_PROB_BASE / 2;\n \n   scale_loop_frequencies (loop, REG_BR_PROB_BASE - prob, REG_BR_PROB_BASE);"}, {"sha": "6cbc2dc7f175ce489c3e1b5becbef9c9a580a2ab", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f1ed99cda55b3d5691511401fdbc89f935390e41", "patch": "@@ -8844,7 +8844,7 @@ ix86_emit_restore_sse_regs_using_mov (rtx pointer, HOST_WIDE_INT offset,\n {\n   int regno;\n   rtx base_address = gen_rtx_MEM (TImode, pointer);\n-  rtx mem, insn;\n+  rtx mem;\n \n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if (SSE_REGNO_P (regno) && ix86_save_reg (regno, maybe_eh_return))\n@@ -8865,7 +8865,7 @@ ix86_emit_restore_sse_regs_using_mov (rtx pointer, HOST_WIDE_INT offset,\n \t  }\n \tmem = adjust_address (base_address, TImode, offset);\n \tset_mem_align (mem, 128);\n-\tinsn = emit_move_insn (reg, mem);\n+\temit_move_insn (reg, mem);\n \toffset += 16;\n \n \tix86_add_cfa_restore_note (NULL_RTX, reg, red_offset);"}, {"sha": "7ac3c917067fefb8895f24142ff44847604880fb", "filename": "gcc/genemit.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=f1ed99cda55b3d5691511401fdbc89f935390e41", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from machine description to emit insns as rtl.\n    Copyright (C) 1987, 1988, 1991, 1994, 1995, 1997, 1998, 1999, 2000, 2001,\n-   2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -782,9 +782,7 @@ output_peephole2_scratches (rtx split)\n {\n   int i;\n   int insn_nr = 0;\n-\n-  printf (\"  HARD_REG_SET _regs_allocated;\\n\");\n-  printf (\"  CLEAR_HARD_REG_SET (_regs_allocated);\\n\");\n+  bool first = true;\n \n   for (i = 0; i < XVECLEN (split, 0); i++)\n     {\n@@ -803,6 +801,13 @@ output_peephole2_scratches (rtx split)\n \t    else if (GET_CODE (XVECEXP (split, 0, j)) != MATCH_SCRATCH)\n \t      cur_insn_nr++;\n \n+\t  if (first)\n+\t    {\n+\t      printf (\"  HARD_REG_SET _regs_allocated;\\n\");\n+\t      printf (\"  CLEAR_HARD_REG_SET (_regs_allocated);\\n\");\n+\t      first = false;\n+\t    }\n+\n \t  printf (\"  if ((operands[%d] = peep2_find_free_register (%d, %d, \\\"%s\\\", %smode, &_regs_allocated)) == NULL_RTX)\\n\\\n     return NULL;\\n\",\n \t\t  XINT (elt, 0),"}, {"sha": "86b9f55704819fd2b712196cd464d14981b162ee", "filename": "gcc/unwind-c.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Funwind-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ed99cda55b3d5691511401fdbc89f935390e41/gcc%2Funwind-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-c.c?ref=f1ed99cda55b3d5691511401fdbc89f935390e41", "patch": "@@ -120,7 +120,7 @@ PERSONALITY_FUNCTION (int version,\n #endif\n {\n   lsda_header_info info;\n-  const unsigned char *language_specific_data, *p, *action_record;\n+  const unsigned char *language_specific_data, *p;\n   _Unwind_Ptr landing_pad, ip;\n   int ip_before_insn = 0;\n \n@@ -181,8 +181,6 @@ PERSONALITY_FUNCTION (int version,\n       /* Can never have null landing pad for sjlj -- that would have\n \t been indicated by a -1 call site index.  */\n       landing_pad = (_Unwind_Ptr)cs_lp + 1;\n-      if (cs_action)\n-\taction_record = info.action_table + cs_action - 1;\n       goto found_something;\n     }\n #else\n@@ -205,8 +203,6 @@ PERSONALITY_FUNCTION (int version,\n \t{\n \t  if (cs_lp)\n \t    landing_pad = info.LPStart + cs_lp;\n-\t  if (cs_action)\n-\t    action_record = info.action_table + cs_action - 1;\n \t  goto found_something;\n \t}\n     }"}]}