{"sha": "850aac532e0a0846f12c6c84c42370749c9bf461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwYWFjNTMyZTBhMDg0NmYxMmM2Yzg0YzQyMzcwNzQ5YzliZjQ2MQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-08-19T15:49:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-08-19T15:49:01Z"}, "message": "reload1.c (reload_as_needed): Accept dumpfile argument, pass it to emit_reload_insns.\n\n        * reload1.c (reload_as_needed): Accept dumpfile argument,\n        pass it to emit_reload_insns.\n        (emit_reload_insns): Add new dumpfile argument.  If non-null\n        then dump the reloads for each insn into the dumpfile.\n        (reload): Pass dumpfile to reload_as_needed.\n\nFrom-SVN: r35807", "tree": {"sha": "b4f7ddbf7b42c3c85f1c16874139919377b9fd5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f7ddbf7b42c3c85f1c16874139919377b9fd5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/850aac532e0a0846f12c6c84c42370749c9bf461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850aac532e0a0846f12c6c84c42370749c9bf461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850aac532e0a0846f12c6c84c42370749c9bf461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850aac532e0a0846f12c6c84c42370749c9bf461/comments", "author": null, "committer": null, "parents": [{"sha": "f49957d671b1a98ca2886231ff36c7712d71577a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49957d671b1a98ca2886231ff36c7712d71577a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49957d671b1a98ca2886231ff36c7712d71577a"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "eb714b1190fd8a396682f4854d2268ba42a646ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850aac532e0a0846f12c6c84c42370749c9bf461/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850aac532e0a0846f12c6c84c42370749c9bf461/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=850aac532e0a0846f12c6c84c42370749c9bf461", "patch": "@@ -1,5 +1,11 @@\n Sat Aug 19 09:18:47 2000  Jeffrey A Law  (law@cygnus.com)\n \n+\t* reload1.c (reload_as_needed): Accept dumpfile argument,\n+\tpass it to emit_reload_insns.\n+\t(emit_reload_insns): Add new dumpfile argument.  If non-null\n+\tthen dump the reloads for each insn into the dumpfile.\n+\t(reload): Pass dumpfile to reload_as_needed.\n+\n \t* invoke.texi: Clean up linux-gnu vs linux comments.\n \n 2000-08-19  Richard Henderson  <rth@cygnus.com>"}, {"sha": "ecbc1f0832f65910569bd4fb4c91943ef3cf70df", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850aac532e0a0846f12c6c84c42370749c9bf461/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850aac532e0a0846f12c6c84c42370749c9bf461/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=850aac532e0a0846f12c6c84c42370749c9bf461", "patch": "@@ -401,7 +401,7 @@ static void ior_hard_reg_set\t\tPARAMS ((HARD_REG_SET *, HARD_REG_SET *));\n static void scan_paradoxical_subregs\tPARAMS ((rtx));\n static void count_pseudo\t\tPARAMS ((int));\n static void order_regs_for_reload\tPARAMS ((struct insn_chain *));\n-static void reload_as_needed\t\tPARAMS ((int));\n+static void reload_as_needed\t\tPARAMS ((int, FILE *));\n static void forget_old_reloads_1\tPARAMS ((rtx, rtx, void *));\n static int reload_reg_class_lower\tPARAMS ((const PTR, const PTR));\n static void mark_reload_reg_in_use\tPARAMS ((unsigned int, int,\n@@ -431,7 +431,7 @@ static void do_input_reload\t\tPARAMS ((struct insn_chain *,\n \t\t\t\t\t\t struct reload *, int));\n static void do_output_reload\t\tPARAMS ((struct insn_chain *,\n \t\t\t\t\t\t struct reload *, int));\n-static void emit_reload_insns\t\tPARAMS ((struct insn_chain *));\n+static void emit_reload_insns\t\tPARAMS ((struct insn_chain *, FILE *));\n static void delete_output_reload\tPARAMS ((rtx, int, int));\n static void delete_address_reloads\tPARAMS ((rtx, rtx));\n static void delete_address_reloads_1\tPARAMS ((rtx, rtx, rtx));\n@@ -1023,7 +1023,7 @@ reload (first, global, dumpfile)\n     {\n       int old_frame_size = get_frame_size ();\n \n-      reload_as_needed (global);\n+      reload_as_needed (global, dumpfile);\n \n       if (old_frame_size != get_frame_size ())\n \tabort ();\n@@ -3717,8 +3717,9 @@ scan_paradoxical_subregs (x)\n    as the insns are scanned.  */\n \n static void\n-reload_as_needed (live_known)\n+reload_as_needed (live_known, dumpfile)\n      int live_known;\n+     FILE *dumpfile;\n {\n   struct insn_chain *chain;\n #if defined (AUTO_INC_DEC)\n@@ -3819,7 +3820,7 @@ reload_as_needed (live_known)\n \n \t      /* Generate the insns to reload operands into or out of\n \t\t their reload regs.  */\n-\t      emit_reload_insns (chain);\n+\t      emit_reload_insns (chain, dumpfile);\n \n \t      /* Substitute the chosen reload regs from reload_reg_rtx\n \t\t into the insn's body (or perhaps into the bodies of other\n@@ -6770,8 +6771,9 @@ do_output_reload (chain, rl, j)\n /* Output insns to reload values in and out of the chosen reload regs.  */\n \n static void\n-emit_reload_insns (chain)\n+emit_reload_insns (chain, dumpfile)\n      struct insn_chain *chain;\n+     FILE *dumpfile;\n {\n   rtx insn = chain->insn;\n \n@@ -6792,6 +6794,13 @@ emit_reload_insns (chain)\n   operand_reload_insns = 0;\n   other_operand_reload_insns = 0;\n \n+  /* Dump reloads into the dump file.  */\n+  if (dumpfile)\n+    {\n+      fprintf (dumpfile, \"\\nReloads for insn # %d\\n\", INSN_UID (insn));\n+      debug_reload_to_stream (dumpfile);\n+    }\n+\n   /* Now output the instructions to copy the data into and out of the\n      reload registers.  Do these in the order that the reloads were reported,\n      since reloads of base and index registers precede reloads of operands"}]}