{"sha": "676e33ca810aa9f33fd233c75d845638e4755c0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2ZTMzY2E4MTBhYTlmMzNmZDIzM2M3NWQ4NDU2MzhlNDc1NWMwZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-02T02:06:18Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-02T02:06:18Z"}, "message": "re PR c++/14360 (Overeager argument dependent name lookup)\n\n\tPR c++/14360\n\t* parser.c (cp_parser_postfix_expression): Do not perform Koenig\n\tlookup if ordinary name-lookup finds a non-function.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\n\tPR c++/14361\n\t* parser.c (cp_parser_late_parsing_default_args): Check that there\n\tare no extra tokens after the end of the default-argument\n\texpression.\n\n\tPR c++/14360\n\t* g++.old-deja/g++.ns/koenig5.C: Remove some error markers.\n\n\tPR c++/14361\n\t* g++.dg/parse/defarg7.C: New test.\n\n\tPR c++/14359\n\t* g++.dg/template/friend26.C: New test.\n\nFrom-SVN: r78739", "tree": {"sha": "f8b065afcbf7bbac4005023631dc51179db6ee71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8b065afcbf7bbac4005023631dc51179db6ee71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676e33ca810aa9f33fd233c75d845638e4755c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e33ca810aa9f33fd233c75d845638e4755c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e33ca810aa9f33fd233c75d845638e4755c0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e33ca810aa9f33fd233c75d845638e4755c0d/comments", "author": null, "committer": null, "parents": [{"sha": "738ed9776c49223ef88f6fe43b7fac990f9f2682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738ed9776c49223ef88f6fe43b7fac990f9f2682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738ed9776c49223ef88f6fe43b7fac990f9f2682"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "21b0172d2c4158fb1891e51cf74f92a2cce732fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -3,6 +3,18 @@\n \tPR c++/14369\n \t* error.c (dump_expr): Handle THROW_EXPR.\n \n+2004-03-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14360\n+\t* parser.c (cp_parser_postfix_expression): Do not perform Koenig\n+\tlookup if ordinary name-lookup finds a non-function.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\n+\tPR c++/14361\n+\t* parser.c (cp_parser_late_parsing_default_args): Check that there\n+\tare no extra tokens after the end of the default-argument\n+\texpression.\n+\t\n 2004-03-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14324"}, {"sha": "9184f0ea1db4b202afa43289495a7d2975baf107", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -3810,9 +3810,11 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t    koenig_p = false;\n \t    if (idk == CP_ID_KIND_UNQUALIFIED)\n \t      {\n+\t\t/* We do not perform argument-dependent lookup if\n+\t\t   normal lookup finds a non-function, in accordance\n+\t\t   with the expected resolution of DR 218.  */\n \t\tif (args\n \t\t    && (is_overloaded_fn (postfix_expression)\n-\t\t\t|| DECL_P (postfix_expression)\n \t\t\t|| TREE_CODE (postfix_expression) == IDENTIFIER_NODE))\n \t\t  {\n \t\t    koenig_p = true;\n@@ -14757,6 +14759,12 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       if (DECL_CLASS_SCOPE_P (fn))\n \tpop_nested_class ();\n \n+      /* If the token stream has not been completely used up, then\n+\t there was extra junk after the end of the default\n+\t argument.  */\n+      if (!cp_lexer_next_token_is (parser->lexer, CPP_EOF))\n+\tcp_parser_error (parser, \"expected `,'\");\n+\n        /* Restore saved state.  */\n       parser->lexer = saved_lexer;\n       parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;"}, {"sha": "8f9a7bdc4c431af25ccd272e953052bcb36d216f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -8361,10 +8361,12 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \tcall_args = RECUR (TREE_OPERAND (t, 1));\n-\t  \n+\n+\t/* We do not perform argument-dependent lookup if normal\n+\t   lookup finds a non-function, in accordance with the\n+\t   expected resolution of DR 218.  */\n \tif (koenig_p\n \t    && (is_overloaded_fn (function)\n-\t\t|| DECL_P (function)\n \t\t|| TREE_CODE (function) == IDENTIFIER_NODE))\n \t  function = perform_koenig_lookup (function, call_args);\n "}, {"sha": "b2df61fec54e7238ad36986f392da7544f75a6e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -1,3 +1,14 @@\n+2004-03-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14360\n+\t* g++.old-deja/g++.ns/koenig5.C: Remove some error markers.\n+\t\n+\tPR c++/14361\n+\t* g++.dg/parse/defarg7.C: New test.\n+\n+\tPR c++/14359\n+\t* g++.dg/template/friend26.C: New test.\n+\n 2004-03-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14324"}, {"sha": "c1f75ce8f18ea297032f2489f56a5cc0d15ede4b", "filename": "gcc/testsuite/g++.dg/parse/defarg7.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg7.C?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/14361\n+\n+class A {\n+  A ( int n=0 int n ); // { dg-error \"\" }\n+};"}, {"sha": "3cf659df402c0235534286348201e95de6f2c28a", "filename": "gcc/testsuite/g++.dg/template/friend26.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend26.C?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/14359\n+\n+template<typename> struct A {};\n+\n+template<typename> struct B\n+{\n+    template<typename T> friend void foo(const A<T>& a, const B&) { a; }\n+};\n+\n+void bar()\n+{\n+    A<void> a;\n+    B<void> b;\n+    foo(a,b);\n+}"}, {"sha": "d84fc8dbf41f250f6f380ba4f405fb72c4830b0b", "filename": "gcc/testsuite/g++.old-deja/g++.ns/koenig5.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e33ca810aa9f33fd233c75d845638e4755c0d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fkoenig5.C?ref=676e33ca810aa9f33fd233c75d845638e4755c0d", "patch": "@@ -1,16 +1,18 @@\n // { dg-do assemble  }\n // To find function pointers in Koenig lookup is ok as long as we only find one.\n namespace A{\n-  void foo();             // { dg-error \"\" } \n+  void foo();             \n   struct X{};\n   void (*bar)(X*)=0;\n }\n using A::X;\n \n-void (*foo)(X*)=0;        // { dg-error \"\" } \n+void (*foo)(X*)=0;        \n \n void g()\n {\n-  foo(new X);            // { dg-error \"\" } both objects and functions found\n+  foo(new X);            // ok -- DR 218 says that we find the global\n+\t\t\t // foo variable first, and therefore do not\n+\t\t\t // perform argument-dependent lookup.\n   bar(new X);            // ok\n }"}]}