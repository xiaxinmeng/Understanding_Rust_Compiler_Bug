{"sha": "37c9f67474a1361512677f00ccf51de259334171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdjOWY2NzQ3NGExMzYxNTEyNjc3ZjAwY2NmNTFkZTI1OTMzNDE3MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-12T13:04:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-12T13:04:24Z"}, "message": "(vms_fopen): Call `fopen' through an indirect pointer to inhibit checking argument list against its prototype.\n\n(vms_fopen): Call `fopen' through an indirect pointer to inhibit checking\nargument list against its prototype.\nIncrease RMS multi-block count from 16 to 32.\n\nFrom-SVN: r8644", "tree": {"sha": "247ac4fe62cb5ac74d12eb9f31a22079fc2c6548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247ac4fe62cb5ac74d12eb9f31a22079fc2c6548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37c9f67474a1361512677f00ccf51de259334171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c9f67474a1361512677f00ccf51de259334171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c9f67474a1361512677f00ccf51de259334171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c9f67474a1361512677f00ccf51de259334171/comments", "author": null, "committer": null, "parents": [{"sha": "9dff20283a4f7ed3a6c0e476b39613a3253dd2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dff20283a4f7ed3a6c0e476b39613a3253dd2eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dff20283a4f7ed3a6c0e476b39613a3253dd2eb"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "20bd11946dde1123fd8b7e670577c8c37bb8d4e8", "filename": "gcc/cccp.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c9f67474a1361512677f00ccf51de259334171/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c9f67474a1361512677f00ccf51de259334171/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=37c9f67474a1361512677f00ccf51de259334171", "patch": "@@ -9967,9 +9967,16 @@ fopen (fname, type)\n      char *type;\n {\n #undef fopen\t/* Get back the REAL fopen routine */\n-  if (strcmp (type, \"w\") == 0)\n-    return fopen (fname, type, \"mbc=16\", \"deq=64\", \"fop=tef\", \"shr=nil\");\n-  return fopen (fname, type, \"mbc=16\");\n+  /* The gcc-vms-1.42 distribution's header files prototype fopen with two\n+     fixed arguments, which matches ANSI's specification but not VAXCRTL's\n+     pre-ANSI implmentation.  This hack circumvents the mismatch problem.  */\n+  FILE *(*vmslib_fopen)() = (FILE *(*)()) fopen;\n+\n+  if (*type == 'w')\n+    return (*vmslib_fopen) (fname, type, \"mbc=32\",\n+\t\t\t    \"deq=64\", \"fop=tef\", \"shr=nil\");\n+  else\n+    return (*vmslib_fopen) (fname, type, \"mbc=32\");\n }\n \n static int "}, {"sha": "62c34f0aa56b0f6a997a449b04194951f4772d93", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c9f67474a1361512677f00ccf51de259334171/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c9f67474a1361512677f00ccf51de259334171/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=37c9f67474a1361512677f00ccf51de259334171", "patch": "@@ -71,16 +71,23 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifdef VMS\n /* The extra parameters substantially improve the I/O performance.  */\n static FILE *\n-VMS_fopen (fname, type)\n+vms_fopen (fname, type)\n      char * fname;\n      char * type;\n {\n-  if (strcmp (type, \"w\") == 0)\n-    return fopen (fname, type, \"mbc=16\", \"deq=64\", \"fop=tef\", \"shr=nil\");\n-  return fopen (fname, type, \"mbc=16\");\n+  /* The <stdio.h> in the gcc-vms-1.42 distribution prototypes fopen with two\n+     fixed arguments, which matches ANSI's specification but not VAXCRTL's\n+     pre-ANSI implementation.  This hack circumvents the mismatch problem.  */\n+  FILE *(*vmslib_fopen)() = (FILE *(*)()) fopen;\n+\n+  if (*type == 'w')\n+    return (*vmslib_fopen) (fname, type, \"mbc=32\",\n+\t\t\t    \"deq=64\", \"fop=tef\", \"shr=nil\");\n+  else\n+    return (*vmslib_fopen) (fname, type, \"mbc=32\");\n }\n-#define fopen VMS_fopen\n-#endif\n+#define fopen vms_fopen\n+#endif\t/* VMS */\n \n #ifndef DEFAULT_GDB_EXTENSIONS\n #define DEFAULT_GDB_EXTENSIONS 1"}]}