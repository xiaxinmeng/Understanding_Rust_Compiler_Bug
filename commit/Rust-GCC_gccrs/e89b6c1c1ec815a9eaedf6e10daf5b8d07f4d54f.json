{"sha": "e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5YjZjMWMxZWM4MTVhOWVhZWRmNmUxMGRhZjViOGQwN2Y0ZDU0Zg==", "commit": {"author": {"name": "Mark Kettenis", "email": "kettenis@gnu.org", "date": "2005-08-17T17:30:47Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-08-17T17:30:47Z"}, "message": "floatformat.c (floatformat_always_valid): Change type of last argument to `void *'.\n\n[libiberty]\n* floatformat.c (floatformat_always_valid): Change type of last\nargument to `void *'.\n(floatformat_i387_ext_is_valid): Likewise.\n(floatformat_to_double): Change type of second argument to `const\nvoid *'.\n(floatformat_from_double): Change type of last argument to `void\n*'.\n(floatformat_is_valid): Change type of last argument to `const\nvoid *'.\n(ieee_test): Remove redundant casts.\n[include]\n* floatformat.h (struct floatformat): Change type of large\nargument for is_valid member to `const void *'.\n(floatformat_to_double): Change type of second argument to `const\nvoid *'.\n(floatformat_from_double): Change type of last argument to `void\n*'.\n(floatformat_is_valid): Change type of last argument to `const\nvoid *'.\n\nFrom-SVN: r103218", "tree": {"sha": "ec71c39fb7a9ac9e5c922bc2257f46fc0c9221a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec71c39fb7a9ac9e5c922bc2257f46fc0c9221a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/comments", "author": null, "committer": null, "parents": [{"sha": "0f029d398bb38fcc1b89a5e0de9a2848e3142154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f029d398bb38fcc1b89a5e0de9a2848e3142154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f029d398bb38fcc1b89a5e0de9a2848e3142154"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "c0c22b548c2ceaec8cba1d9a3940cd100154a76c", "filename": "include/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "patch": "@@ -1,3 +1,14 @@\n+2005-08-17  Mark Kettenis  <kettenis@gnu.org>\n+\n+\t* floatformat.h (struct floatformat): Change type of large\n+\targument for is_valid member to `const void *'.\n+\t(floatformat_to_double): Change type of second argument to `const\n+\tvoid *'.\n+\t(floatformat_from_double): Change type of last argument to `void\n+\t*'.\n+\t(floatformat_is_valid): Change type of last argument to `const\n+\tvoid *'.\n+\n 2005-07-12  Ben Elliston  <bje@au.ibm.com>\n \n \t* xregex2.h (regexec): Qualify this prototype with __extension__"}, {"sha": "a24487430504148e2a968996da65c88190c227a5", "filename": "include/floatformat.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/include%2Ffloatformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/include%2Ffloatformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffloatformat.h?ref=e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "patch": "@@ -1,5 +1,6 @@\n /* IEEE floating point support declarations, for GDB, the GNU Debugger.\n-   Copyright 1991, 1994, 1995, 1997, 2000, 2003 Free Software Foundation, Inc.\n+   Copyright 1991, 1994, 1995, 1997, 2000, 2003, 2005\n+   Free Software Foundation, Inc.\n \n This file is part of GDB.\n \n@@ -82,7 +83,7 @@ struct floatformat\n   const char *name;\n \n   /* Validator method.  */\n-  int (*is_valid) (const struct floatformat *fmt, const char *from);\n+  int (*is_valid) (const struct floatformat *fmt, const void *from);\n };\n \n /* floatformats for IEEE single and double, big and little endian.  */\n@@ -116,17 +117,17 @@ extern const struct floatformat floatformat_ia64_quad_little;\n    Store the double in *TO.  */\n \n extern void\n-floatformat_to_double (const struct floatformat *, const char *, double *);\n+floatformat_to_double (const struct floatformat *, const void *, double *);\n \n /* The converse: convert the double *FROM to FMT\n    and store where TO points.  */\n \n extern void\n-floatformat_from_double (const struct floatformat *, const double *, char *);\n+floatformat_from_double (const struct floatformat *, const double *, void *);\n \n /* Return non-zero iff the data at FROM is a valid number in format FMT.  */\n \n extern int\n-floatformat_is_valid (const struct floatformat *fmt, const char *from);\n+floatformat_is_valid (const struct floatformat *fmt, const void *from);\n \n #endif\t/* defined (FLOATFORMAT_H) */"}, {"sha": "3e2e92e6068486c6075165c0f6c98c0eb1ad3904", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "patch": "@@ -1,3 +1,16 @@\n+2005-08-17  Mark Kettenis  <kettenis@gnu.org>\n+\n+\t* floatformat.c (floatformat_always_valid): Change type of last\n+\targument to `void *'.\n+\t(floatformat_i387_ext_is_valid): Likewise.\n+\t(floatformat_to_double): Change type of second argument to `const\n+\tvoid *'.\n+\t(floatformat_from_double): Change type of last argument to `void\n+\t*'.\n+\t(floatformat_is_valid): Change type of last argument to `const\n+\tvoid *'.\n+\t(ieee_test): Remove redundant casts.\n+\n 2005-08-17  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* strverscmp.c: Update FSF address."}, {"sha": "8f0d7894641702ab6fc04f51058f94ec8060f627", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=e89b6c1c1ec815a9eaedf6e10daf5b8d07f4d54f", "patch": "@@ -1,5 +1,6 @@\n /* IEEE floating point support routines, for GDB, the GNU Debugger.\n-   Copyright (C) 1991, 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+   Copyright 1991, 1994, 1999, 2000, 2003, 2005\n+   Free Software Foundation, Inc.\n \n This file is part of GDB.\n \n@@ -52,11 +53,11 @@ static unsigned long get_field (const unsigned char *,\n                                 unsigned int,\n                                 unsigned int);\n static int floatformat_always_valid (const struct floatformat *fmt,\n-                                     const char *from);\n+                                     const void *from);\n \n static int\n floatformat_always_valid (const struct floatformat *fmt ATTRIBUTE_UNUSED,\n-                          const char *from ATTRIBUTE_UNUSED)\n+                          const void *from ATTRIBUTE_UNUSED)\n {\n   return 1;\n }\n@@ -107,23 +108,24 @@ const struct floatformat floatformat_ieee_double_littlebyte_bigword =\n   floatformat_always_valid\n };\n \n-static int floatformat_i387_ext_is_valid (const struct floatformat *fmt, const char *from);\n+static int floatformat_i387_ext_is_valid (const struct floatformat *fmt,\n+\t\t\t\t\t  const void *from);\n \n static int\n-floatformat_i387_ext_is_valid (const struct floatformat *fmt, const char *from)\n+floatformat_i387_ext_is_valid (const struct floatformat *fmt, const void *from)\n {\n   /* In the i387 double-extended format, if the exponent is all ones,\n      then the integer bit must be set.  If the exponent is neither 0\n      nor ~0, the intbit must also be set.  Only if the exponent is\n      zero can it be zero, and then it must be zero.  */\n   unsigned long exponent, int_bit;\n-  const unsigned char *ufrom = (const unsigned char *) from;\n-  \n+  const unsigned char *ufrom = from;\n+\n   exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n \t\t\tfmt->exp_start, fmt->exp_len);\n   int_bit = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n \t\t       fmt->man_start, 1);\n-  \n+\n   if ((exponent == 0) != (int_bit == 0))\n     return 0;\n   else\n@@ -267,9 +269,9 @@ get_field (const unsigned char *data, enum floatformat_byteorders order,\n \n void\n floatformat_to_double (const struct floatformat *fmt,\n-                       const char *from, double *to)\n+                       const void *from, double *to)\n {\n-  const unsigned char *ufrom = (const unsigned char *)from;\n+  const unsigned char *ufrom = from;\n   double dto;\n   long exponent;\n   unsigned long mant;\n@@ -438,14 +440,14 @@ put_field (unsigned char *data, enum floatformat_byteorders order,\n \n void\n floatformat_from_double (const struct floatformat *fmt,\n-                         const double *from, char *to)\n+                         const double *from, void *to)\n {\n   double dfrom;\n   int exponent;\n   double mant;\n   unsigned int mant_bits, mant_off;\n   int mant_bits_left;\n-  unsigned char *uto = (unsigned char *)to;\n+  unsigned char *uto = to;\n \n   dfrom = *from;\n   memset (uto, 0, fmt->totalsize / FLOATFORMAT_CHAR_BIT);\n@@ -533,7 +535,7 @@ floatformat_from_double (const struct floatformat *fmt,\n /* Return non-zero iff the data at FROM is a valid number in format FMT.  */\n \n int\n-floatformat_is_valid (const struct floatformat *fmt, const char *from)\n+floatformat_is_valid (const struct floatformat *fmt, const void *from)\n {\n   return fmt->is_valid (fmt, from);\n }\n@@ -550,15 +552,13 @@ ieee_test (double n)\n {\n   double result;\n \n-  floatformat_to_double (&floatformat_ieee_double_little, (char *) &n,\n-\t\t\t &result);\n+  floatformat_to_double (&floatformat_ieee_double_little, &n, &result);\n   if ((n != result && (! isnan (n) || ! isnan (result)))\n       || (n < 0 && result >= 0)\n       || (n >= 0 && result < 0))\n     printf (\"Differ(to): %.20g -> %.20g\\n\", n, result);\n \n-  floatformat_from_double (&floatformat_ieee_double_little, &n,\n-\t\t\t   (char *) &result);\n+  floatformat_from_double (&floatformat_ieee_double_little, &n, &result);\n   if ((n != result && (! isnan (n) || ! isnan (result)))\n       || (n < 0 && result >= 0)\n       || (n >= 0 && result < 0))"}]}