{"sha": "ae83b9deb87787371cd94b4417e160d41dd0322c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4M2I5ZGViODc3ODczNzFjZDk0YjQ0MTdlMTYwZDQxZGQwMzIyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-13T08:42:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-13T08:42:56Z"}, "message": "[C++] Fix interaction between aka changes and DR1558 (PR92206)\n\nOne of the changes in r277281 was to make the typedef variant\nhandling in strip_typedefs pass the raw DECL_ORIGINAL_TYPE to the\nrecursive call, instead of applying TYPE_MAIN_VARIANT first.\nThis PR shows that that interacts badly with the implementation\nof DR1558, because we then refuse to strip aliases with dependent\ntemplate parameters and trip:\n\n  gcc_assert (!typedef_variant_p (result)\n\t      || ((flags & STF_USER_VISIBLE)\n\t\t  && !user_facing_original_type_p (result)));\n\nKeeping the current behaviour but suppressing the ICE leads to a\nduplicate error (the dg-bogus in the first test), so that didn't\nseem like a good fix.\n\nI assume keeping the alias should never actually be necessary for\nDECL_ORIGINAL_TYPEs, because it will already have been checked\nsomewhere, even for implicit TYPE_DECLs.  This patch therefore\npasses a flag to say that we can safely strip aliases with\ndependent template parameters.\n\n2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/cp/\n\tPR c++/92206\n\t* cp-tree.h (STF_STRIP_DEPENDENT): New constant.\n\t* tree.c (strip_typedefs): Add STF_STRIP_DEPENDENT to the flags\n\twhen calling strip_typedefs recursively on a DECL_ORIGINAL_TYPE.\n\tDon't apply the fix for DR1558 in that case; allow aliases with\n\tdependent template parameters to be stripped instead.\n\ngcc/testsuite/\n\tPR c++/92206\n\t* g++.dg/cpp0x/alias-decl-pr92206-1.C: New test.\n\t* g++.dg/cpp0x/alias-decl-pr92206-2.C: Likewise.\n\t* g++.dg/cpp0x/alias-decl-pr92206-3.C: Likewise.\n\nFrom-SVN: r278119", "tree": {"sha": "26bc42e873c9153d6f8a4a953debfdb868a4aca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26bc42e873c9153d6f8a4a953debfdb868a4aca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae83b9deb87787371cd94b4417e160d41dd0322c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae83b9deb87787371cd94b4417e160d41dd0322c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae83b9deb87787371cd94b4417e160d41dd0322c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae83b9deb87787371cd94b4417e160d41dd0322c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b6e95d30e321c4d0e1355a3f20b88ef2ea29785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6e95d30e321c4d0e1355a3f20b88ef2ea29785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6e95d30e321c4d0e1355a3f20b88ef2ea29785"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "5dcf13bbc89c23dbe35e845b5c5dd4a5099c22bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -1,3 +1,12 @@\n+2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/92206\n+\t* cp-tree.h (STF_STRIP_DEPENDENT): New constant.\n+\t* tree.c (strip_typedefs): Add STF_STRIP_DEPENDENT to the flags\n+\twhen calling strip_typedefs recursively on a DECL_ORIGINAL_TYPE.\n+\tDon't apply the fix for DR1558 in that case; allow aliases with\n+\tdependent template parameters to be stripped instead.\n+\n 2019-11-12  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.c (lookup_using_decl): New function, merged from ..."}, {"sha": "42afe1bd5cb86f15fcc940b8dc2380438e827033", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -5759,8 +5759,13 @@ enum auto_deduction_context\n \n    STF_USER_VISIBLE: use heuristics to try to avoid stripping user-facing\n        aliases of internal details.  This is intended for diagnostics,\n-       where it should (for example) give more useful \"aka\" types.  */\n+       where it should (for example) give more useful \"aka\" types.\n+\n+   STF_STRIP_DEPENDENT: allow the stripping of aliases with dependent\n+       template parameters, relying on code elsewhere to report any\n+       appropriate diagnostics.  */\n const unsigned int STF_USER_VISIBLE = 1U;\n+const unsigned int STF_STRIP_DEPENDENT = 1U << 1;\n \n /* Returns the TEMPLATE_DECL associated to a TEMPLATE_TEMPLATE_PARM\n    node.  */"}, {"sha": "6c39c004b011d1d0ff0332caf1cdfdf914741717", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -1488,7 +1488,8 @@ strip_typedefs (tree t, bool *remove_attributes, unsigned int flags)\n   if (t == TYPE_CANONICAL (t))\n     return t;\n \n-  if (dependent_alias_template_spec_p (t))\n+  if (!(flags & STF_STRIP_DEPENDENT)\n+      && dependent_alias_template_spec_p (t))\n     /* DR 1558: However, if the template-id is dependent, subsequent\n        template argument substitution still applies to the template-id.  */\n     return t;\n@@ -1673,7 +1674,8 @@ strip_typedefs (tree t, bool *remove_attributes, unsigned int flags)\n \t      && !user_facing_original_type_p (t))\n \t    return t;\n \t  result = strip_typedefs (DECL_ORIGINAL_TYPE (TYPE_NAME (t)),\n-\t\t\t\t   remove_attributes, flags);\n+\t\t\t\t   remove_attributes,\n+\t\t\t\t   flags | STF_STRIP_DEPENDENT);\n \t}\n       else\n \tresult = TYPE_MAIN_VARIANT (t);"}, {"sha": "a253a5397cc006a34c041dd80b4d8db2db45b8ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -1,3 +1,10 @@\n+2019-11-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/92206\n+\t* g++.dg/cpp0x/alias-decl-pr92206-1.C: New test.\n+\t* g++.dg/cpp0x/alias-decl-pr92206-2.C: Likewise.\n+\t* g++.dg/cpp0x/alias-decl-pr92206-3.C: Likewise.\n+\n 2019-11-13  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/params/params.exp: Restore test by parsing output"}, {"sha": "c3f7b1977db67dd24bb74b765ebe76a7230037db", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-pr92206-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-1.C?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -0,0 +1,9 @@\n+// { dg-require-effective-target c++11 }\n+\n+template<typename> struct A {};\n+template<typename T1, typename T2 = typename T1::value> using alias1 = A<T1>;\n+template<typename T> class B {\n+  using alias2 = alias1<A<T>>; // { dg-error {no type named 'value'} }\n+  A<alias2> a; // { dg-bogus {no type named 'value'} }\n+};\n+B<int> b;"}, {"sha": "31d73d6bad368b9aa1d078be98c76f1a35bb9ebc", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-pr92206-2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-2.C?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -0,0 +1,14 @@\n+// { dg-require-effective-target c++11 }\n+\n+template <bool> struct A;\n+class Vector {\n+  template <typename> struct TypeIsGCThing {\n+    template <typename T, typename A<T ::value>::Type> using Vector = Vector;\n+    struct B;\n+    template <typename> class ContainerIter {\n+      using Action = B;\n+      using ActionVector = Vector<Action, 0>;\n+      ContainerIter<ActionVector> a;\n+    };\n+  };\n+};"}, {"sha": "6698a3664113cc4b60aecb7e78dc46f3867b6bc7", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-pr92206-3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae83b9deb87787371cd94b4417e160d41dd0322c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-pr92206-3.C?ref=ae83b9deb87787371cd94b4417e160d41dd0322c", "patch": "@@ -0,0 +1,8 @@\n+// { dg-require-effective-target c++11 }\n+\n+template <typename> void a();\n+template <typename> struct b;\n+template <bool> using c = int;\n+template <typename d, typename e = decltype(a<d>)> using f = e;\n+template <typename e> using g = f<e>;\n+template <typename h> c<b<g<h>>::i> j;"}]}