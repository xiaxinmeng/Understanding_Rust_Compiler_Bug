{"sha": "bc5e395d603755490456a20d6f9042e89f64ee01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1ZTM5NWQ2MDM3NTU0OTA0NTZhMjBkNmY5MDQyZTg5ZjY0ZWUwMQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-08-05T09:49:05Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-08-05T09:49:05Z"}, "message": "[AArch64] Some aarch64-builtins.c cleanup.\n\ngcc/\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_simd_builtin_type_mode): Delete.\n\t(v8qi_UP): Remap to V8QImode.\n\t(v4hi_UP): Remap to V4HImode.\n\t(v2si_UP): Remap to V2SImode.\n\t(v2sf_UP): Remap to V2SFmode.\n\t(v1df_UP): Remap to V1DFmode.\n\t(di_UP): Remap to DImode.\n\t(df_UP): Remap to DFmode.\n\t(v16qi_UP):V16QImode.\n\t(v8hi_UP): Remap to V8HImode.\n\t(v4si_UP): Remap to V4SImode.\n\t(v4sf_UP): Remap to V4SFmode.\n\t(v2di_UP): Remap to V2DImode.\n\t(v2df_UP): Remap to V2DFmode.\n\t(ti_UP): Remap to TImode.\n\t(ei_UP): Remap to EImode.\n\t(oi_UP): Remap to OImode.\n\t(ci_UP): Map to CImode.\n\t(xi_UP): Remap to XImode.\n\t(si_UP): Remap to SImode.\n\t(sf_UP): Remap to SFmode.\n\t(hi_UP): Remap to HImode.\n\t(qi_UP): Remap to QImode.\n\t(aarch64_simd_builtin_datum): Make mode a machine_mode.\n\t(VAR1): Build builtin name.\n\t(aarch64_init_simd_builtins): Remove dead code.\n\nFrom-SVN: r213627", "tree": {"sha": "ba635f3e19265d65bd5b154513aec18591abb7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba635f3e19265d65bd5b154513aec18591abb7c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc5e395d603755490456a20d6f9042e89f64ee01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5e395d603755490456a20d6f9042e89f64ee01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5e395d603755490456a20d6f9042e89f64ee01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5e395d603755490456a20d6f9042e89f64ee01/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a12a0041b602fcf10fd774152b91a3f302dd3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a12a0041b602fcf10fd774152b91a3f302dd3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a12a0041b602fcf10fd774152b91a3f302dd3eb"}], "stats": {"total": 129, "additions": 59, "deletions": 70}, "files": [{"sha": "d9dc7fdaf2b8f7fac3c4b57c2a4a091a1cf1496d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5e395d603755490456a20d6f9042e89f64ee01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5e395d603755490456a20d6f9042e89f64ee01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc5e395d603755490456a20d6f9042e89f64ee01", "patch": "@@ -1,3 +1,33 @@\n+2014-08-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_simd_builtin_type_mode): Delete.\n+\t(v8qi_UP): Remap to V8QImode.\n+\t(v4hi_UP): Remap to V4HImode.\n+\t(v2si_UP): Remap to V2SImode.\n+\t(v2sf_UP): Remap to V2SFmode.\n+\t(v1df_UP): Remap to V1DFmode.\n+\t(di_UP): Remap to DImode.\n+\t(df_UP): Remap to DFmode.\n+\t(v16qi_UP):V16QImode.\n+\t(v8hi_UP): Remap to V8HImode.\n+\t(v4si_UP): Remap to V4SImode.\n+\t(v4sf_UP): Remap to V4SFmode.\n+\t(v2di_UP): Remap to V2DImode.\n+\t(v2df_UP): Remap to V2DFmode.\n+\t(ti_UP): Remap to TImode.\n+\t(ei_UP): Remap to EImode.\n+\t(oi_UP): Remap to OImode.\n+\t(ci_UP): Map to CImode.\n+\t(xi_UP): Remap to XImode.\n+\t(si_UP): Remap to SImode.\n+\t(sf_UP): Remap to SFmode.\n+\t(hi_UP): Remap to HImode.\n+\t(qi_UP): Remap to QImode.\n+\t(aarch64_simd_builtin_datum): Make mode a machine_mode.\n+\t(VAR1): Build builtin name.\n+\t(aarch64_init_simd_builtins): Remove dead code.\n+\n 2014-08-05  Roman Gareev  <gareevroman@gmail.com>\n \n \t* graphite-isl-ast-to-gimple.c:"}, {"sha": "ba58a99174a2d2014b4268c1a3e7b3972c4ba568", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 29, "deletions": 70, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc5e395d603755490456a20d6f9042e89f64ee01/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc5e395d603755490456a20d6f9042e89f64ee01/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=bc5e395d603755490456a20d6f9042e89f64ee01", "patch": "@@ -47,54 +47,28 @@\n #include \"gimple.h\"\n #include \"gimple-iterator.h\"\n \n-enum aarch64_simd_builtin_type_mode\n-{\n-  T_V8QI,\n-  T_V4HI,\n-  T_V2SI,\n-  T_V2SF,\n-  T_V1DF,\n-  T_DI,\n-  T_DF,\n-  T_V16QI,\n-  T_V8HI,\n-  T_V4SI,\n-  T_V4SF,\n-  T_V2DI,\n-  T_V2DF,\n-  T_TI,\n-  T_EI,\n-  T_OI,\n-  T_XI,\n-  T_SI,\n-  T_SF,\n-  T_HI,\n-  T_QI,\n-  T_MAX\n-};\n-\n-#define v8qi_UP  T_V8QI\n-#define v4hi_UP  T_V4HI\n-#define v2si_UP  T_V2SI\n-#define v2sf_UP  T_V2SF\n-#define v1df_UP  T_V1DF\n-#define di_UP    T_DI\n-#define df_UP    T_DF\n-#define v16qi_UP T_V16QI\n-#define v8hi_UP  T_V8HI\n-#define v4si_UP  T_V4SI\n-#define v4sf_UP  T_V4SF\n-#define v2di_UP  T_V2DI\n-#define v2df_UP  T_V2DF\n-#define ti_UP\t T_TI\n-#define ei_UP\t T_EI\n-#define oi_UP\t T_OI\n-#define xi_UP\t T_XI\n-#define si_UP    T_SI\n-#define sf_UP    T_SF\n-#define hi_UP    T_HI\n-#define qi_UP    T_QI\n-\n+#define v8qi_UP  V8QImode\n+#define v4hi_UP  V4HImode\n+#define v2si_UP  V2SImode\n+#define v2sf_UP  V2SFmode\n+#define v1df_UP  V1DFmode\n+#define di_UP    DImode\n+#define df_UP    DFmode\n+#define v16qi_UP V16QImode\n+#define v8hi_UP  V8HImode\n+#define v4si_UP  V4SImode\n+#define v4sf_UP  V4SFmode\n+#define v2di_UP  V2DImode\n+#define v2df_UP  V2DFmode\n+#define ti_UP\t TImode\n+#define ei_UP\t EImode\n+#define oi_UP\t OImode\n+#define ci_UP\t CImode\n+#define xi_UP\t XImode\n+#define si_UP    SImode\n+#define sf_UP    SFmode\n+#define hi_UP    HImode\n+#define qi_UP    QImode\n #define UP(X) X##_UP\n \n #define SIMD_MAX_BUILTIN_ARGS 5\n@@ -134,7 +108,7 @@ enum aarch64_type_qualifiers\n typedef struct\n {\n   const char *name;\n-  enum aarch64_simd_builtin_type_mode mode;\n+  enum machine_mode mode;\n   const enum insn_code code;\n   unsigned int fcode;\n   enum aarch64_type_qualifiers *qualifiers;\n@@ -288,7 +262,7 @@ aarch64_types_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define CF10(N, X) CODE_FOR_##N##X\n \n #define VAR1(T, N, MAP, A) \\\n-  {#N, UP (A), CF##MAP (N, A), 0, TYPES_##T},\n+  {#N #A, UP (A), CF##MAP (N, A), 0, TYPES_##T},\n #define VAR2(T, N, MAP, A, B) \\\n   VAR1 (T, N, MAP, A) \\\n   VAR1 (T, N, MAP, B)\n@@ -731,25 +705,10 @@ aarch64_init_simd_builtins (void)\n       bool print_type_signature_p = false;\n       char type_signature[SIMD_MAX_BUILTIN_ARGS] = { 0 };\n       aarch64_simd_builtin_datum *d = &aarch64_simd_builtin_data[i];\n-      const char *const modenames[] =\n-\t{\n-\t  \"v8qi\", \"v4hi\", \"v2si\", \"v2sf\", \"v1df\", \"di\", \"df\",\n-\t  \"v16qi\", \"v8hi\", \"v4si\", \"v4sf\", \"v2di\", \"v2df\",\n-\t  \"ti\", \"ei\", \"oi\", \"xi\", \"si\", \"sf\", \"hi\", \"qi\"\n-\t};\n-      const enum machine_mode modes[] =\n-\t{\n-\t  V8QImode, V4HImode, V2SImode, V2SFmode, V1DFmode, DImode, DFmode,\n-\t  V16QImode, V8HImode, V4SImode, V4SFmode, V2DImode,\n-\t  V2DFmode, TImode, EImode, OImode, XImode, SImode,\n-\t  SFmode, HImode, QImode\n-\t};\n       char namebuf[60];\n       tree ftype = NULL;\n       tree fndecl = NULL;\n \n-      gcc_assert (ARRAY_SIZE (modenames) == T_MAX);\n-\n       d->fcode = fcode;\n \n       /* We must track two variables here.  op_num is\n@@ -797,7 +756,7 @@ aarch64_init_simd_builtins (void)\n \t  /* Some builtins have different user-facing types\n \t     for certain arguments, encoded in d->mode.  */\n \t  if (qualifiers & qualifier_map_mode)\n-\t      op_mode = modes[d->mode];\n+\t      op_mode = d->mode;\n \n \t  /* For pointers, we want a pointer to the basic type\n \t     of the vector.  */\n@@ -829,11 +788,11 @@ aarch64_init_simd_builtins (void)\n       gcc_assert (ftype != NULL);\n \n       if (print_type_signature_p)\n-\tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s%s_%s\",\n-\t\t  d->name, modenames[d->mode], type_signature);\n+\tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s_%s\",\n+\t\t  d->name, type_signature);\n       else\n-\tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s%s\",\n-\t\t  d->name, modenames[d->mode]);\n+\tsnprintf (namebuf, sizeof (namebuf), \"__builtin_aarch64_%s\",\n+\t\t  d->name);\n \n       fndecl = add_builtin_function (namebuf, ftype, fcode, BUILT_IN_MD,\n \t\t\t\t     NULL, NULL_TREE);"}]}