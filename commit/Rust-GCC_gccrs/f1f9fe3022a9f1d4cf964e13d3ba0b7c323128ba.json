{"sha": "f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmOWZlMzAyMmE5ZjFkNGNmOTY0ZTEzZDNiYTBiN2MzMjMxMjhiYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-21T10:46:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-21T10:46:37Z"}, "message": "[multiple changes]\n\n2003-11-20  Jerome Guitton  <guitton@act-europe.fr>\n\n\t* 5ztiitho.adb: Remove an unreferenced variable.\n\n2003-11-20  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* adaint.c: For FreeBSD, use mkstemp.\n\n2003-11-20  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* gnatlbr.adb: Now reference Gnat_Static_Version_String.\n\n2003-11-20  Robert Dewar  <dewar@gnat.com>\n\n\t* bld.adb: Remove useless USE of gnatvsn\n\n\t* gnatchop.adb: Minor reformatting\n\tClean up version handling to be more consistent\n\n\t* gnatxref.adb: Minor reformatting\n\n\t* gprcmd.adb: Minor reformatting\n\tFix output of copyright to be more consistent with other tools\n\n2003-11-20  Vincent Celier  <celier@gnat.com>\n\n\t* make.adb (Scan_Make_Args): Do not transmit --RTS= to gnatlink\n\n2003-11-20  Sergey Rybin  <rybin@act-europe.fr>\n\n\t* atree.adb (Initialize): Add initializations for global variables\n\tused in New_Copy_Tree.\n\n\t* cstand.adb (Create_Standard): Add call to Initialize_Scanner (with\n\tInternal_Source_File as the actual).\n\tPut the set of statements creating Any_Character before the set of\n\tstatements creating Any_Array to have Any_Character fully initialized\n\twhen it is used in creating Any_Array.\n\n\t* scn.adb (Initialize_Scanner): Do not set Comes_From_Source ON and do\n\tnot call Scan in case if the actual is Internal_Source_File\n\tAdd 2003 to copyright note.\n\n\t* sinput.adb (Source_First, Source_Last, Source_Text): Add code for\n\tprocessing Internal_Source_File.\n\n\t* types.ads: Add the constant Internal_Source_File representing the\n\tsource buffer for artificial source-code-like strings created within\n\tthe compiler (the definition of Source_File_Index is changed).\n\nFrom-SVN: r73798", "tree": {"sha": "132085c540a6cf57220b0a3538e1675d09a58a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132085c540a6cf57220b0a3538e1675d09a58a83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/comments", "author": null, "committer": null, "parents": [{"sha": "d91edf86b0cb904a88fc086d9580fcfa8ee53d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91edf86b0cb904a88fc086d9580fcfa8ee53d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91edf86b0cb904a88fc086d9580fcfa8ee53d3f"}], "stats": {"total": 207, "additions": 147, "deletions": 60}, "files": [{"sha": "4f72f04d0a37b298c2d1d472d7bdf4c1b88aadcf", "filename": "gcc/ada/5wsystem.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2F5wsystem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2F5wsystem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5wsystem.ads?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -138,7 +138,7 @@ private\n    Support_Long_Shifts       : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n    GCC_ZCX_Support           : constant Boolean := True;\n    Front_End_ZCX_Support     : constant Boolean := False;\n "}, {"sha": "bda356e16a48c77e5caf90e7445305491d648ec0", "filename": "gcc/ada/5ztiitho.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2F5ztiitho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2F5ztiitho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5ztiitho.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -43,7 +43,6 @@ procedure Initialize_Task_Hooks is\n    procedure taskCreateHookAdd (createHookFunction : FUNCPTR);\n    pragma Import (C, taskCreateHookAdd, \"taskCreateHookAdd\");\n \n-   Result : OSI.STATUS;\n begin\n    taskCreateHookAdd (Register'Access);\n end Initialize_Task_Hooks;"}, {"sha": "0720435a4115f42152c71edad7dc4e5cdebccaa0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -1,3 +1,53 @@\n+2003-11-21  Jerome Guitton  <guitton@act-europe.fr>\n+\n+\t* 5ztiitho.adb: Remove an unreferenced variable.\n+\n+2003-11-21  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* adaint.c: For FreeBSD, use mkstemp.\n+\n+2003-11-21  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* gnatlbr.adb: Now reference Gnat_Static_Version_String.\n+\n+2003-11-21  Robert Dewar  <dewar@gnat.com>\n+\n+\t* bld.adb: Remove useless USE of gnatvsn\n+\n+\t* gnatchop.adb: Minor reformatting\n+\tClean up version handling to be more consistent\n+\n+\t* gnatxref.adb: Minor reformatting\n+\n+\t* gprcmd.adb: Minor reformatting\n+\tFix output of copyright to be more consistent with other tools\n+\n+2003-11-21  Vincent Celier  <celier@gnat.com>\n+\n+\t* make.adb (Scan_Make_Args): Do not transmit --RTS= to gnatlink\n+\n+2003-11-21  Sergey Rybin  <rybin@act-europe.fr>\n+\n+\t* atree.adb (Initialize): Add initializations for global variables\n+\tused in New_Copy_Tree.\n+\n+\t* cstand.adb (Create_Standard): Add call to Initialize_Scanner (with\n+\tInternal_Source_File as the actual).\n+\tPut the set of statements creating Any_Character before the set of\n+\tstatements creating Any_Array to have Any_Character fully initialized\n+\twhen it is used in creating Any_Array.\n+\n+\t* scn.adb (Initialize_Scanner): Do not set Comes_From_Source ON and do\n+\tnot call Scan in case if the actual is Internal_Source_File\n+\tAdd 2003 to copyright note.\n+\n+\t* sinput.adb (Source_First, Source_Last, Source_Text): Add code for\n+\tprocessing Internal_Source_File.\n+\n+\t* types.ads: Add the constant Internal_Source_File representing the\n+\tsource buffer for artificial source-code-like strings created within\n+\tthe compiler (the definition of Source_File_Index is changed).\n+\n 2003-11-20  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* 35soccon.ads, 45intnam.ads, 55osinte.adb, 55osinte.ads,"}, {"sha": "921e1d84f29e7cd99ce97a03b001847613e609a7", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -667,7 +667,7 @@ __gnat_open_new_temp (char *path, int fmode)\n \n   strcpy (path, \"GNAT-XXXXXX\");\n \n-#if defined (linux) && !defined (__vxworks)\n+#if (defined (__FreeBSD__) || defined (linux)) && !defined (__vxworks)\n   return mkstemp (path);\n #elif defined (__Lynx__)\n   mktemp (path);\n@@ -742,7 +742,7 @@ __gnat_tmp_name (char *tmp_filename)\n     free (pname);\n   }\n \n-#elif defined (linux)\n+#elif defined (linux) || defined (__FreeBSD__)\n #define MAX_SAFE_PATH 1000\n   char *tmpdir = getenv (\"TMPDIR\");\n "}, {"sha": "65d2056da31b4fc98ae4daf23cced616f6f086d6", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -882,6 +882,11 @@ package body Atree is\n       Dummy := New_Node (N_Error, No_Location);\n       Set_Name1 (Error, Error_Name);\n       Set_Error_Posted (Error, True);\n+\n+      --  Set global variables for New_Copy_Tree:\n+      NCT_Hash_Tables_Used := False;\n+      NCT_Table_Entries    := 0;\n+      NCT_Hash_Table_Setup := False;\n    end Initialize;\n \n    --------------------------"}, {"sha": "492f205ec6173de3996ae7eaeb816a2d24511eb4", "filename": "gcc/ada/bld.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fbld.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fbld.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbld.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -40,7 +40,7 @@ with GNAT.OS_Lib;               use GNAT.OS_Lib;\n \n with Erroutc;  use Erroutc;\n with Err_Vars; use Err_Vars;\n-with Gnatvsn;  use Gnatvsn;\n+with Gnatvsn;\n with Namet;    use Namet;\n with Opt;      use Opt;\n with Output;   use Output;"}, {"sha": "67b7a883f61fdc8ebf6bc4fc5d52f5b7b5210538", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -38,6 +38,7 @@ with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n with Ttypef;   use Ttypef;\n+with Scn;\n with Sem_Mech; use Sem_Mech;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n@@ -259,10 +260,10 @@ package body CStand is\n    --  by Initialize_Standard in the semantics module.\n \n    procedure Create_Standard is\n-      Decl_S : List_Id;\n+      Decl_S : List_Id := New_List;\n       --  List of declarations in Standard\n \n-      Decl_A : List_Id;\n+      Decl_A : List_Id := New_List;\n       --  List of declarations in ASCII\n \n       Decl       : Node_Id;\n@@ -297,7 +298,9 @@ package body CStand is\n    --  Start of processing for Create_Standard\n \n    begin\n-      Decl_S := New_List;\n+      --  Initialize scanner for internal scans of literals\n+\n+      Scn.Initialize_Scanner (No_Unit, Internal_Source_File);\n \n       --  First step is to create defining identifiers for each entity\n \n@@ -414,7 +417,6 @@ package body CStand is\n \n       declare\n          LIS : Nat;\n-\n       begin\n          if Debug_Flag_M then\n             LIS := 64;\n@@ -657,7 +659,6 @@ package body CStand is\n \n       Set_Defining_Unit_Name (Pspec, Standard_Entity (S_ASCII));\n       Set_Ekind (Standard_Entity (S_ASCII), E_Package);\n-      Decl_A := New_List; -- for ASCII declarations\n       Set_Visible_Declarations (Pspec, Decl_A);\n \n       --  Create control character definitions in package ASCII. Note that\n@@ -791,6 +792,18 @@ package body CStand is\n       Set_Prim_Alignment    (Any_Access);\n       Make_Name             (Any_Access, \"an access type\");\n \n+      Any_Character := New_Standard_Entity;\n+      Set_Ekind             (Any_Character, E_Enumeration_Type);\n+      Set_Scope             (Any_Character, Standard_Standard);\n+      Set_Etype             (Any_Character, Any_Character);\n+      Set_Is_Unsigned_Type  (Any_Character);\n+      Set_Is_Character_Type (Any_Character);\n+      Init_Esize            (Any_Character, Standard_Character_Size);\n+      Init_RM_Size          (Any_Character, 8);\n+      Set_Prim_Alignment    (Any_Character);\n+      Set_Scalar_Range      (Any_Character, Scalar_Range (Standard_Character));\n+      Make_Name             (Any_Character, \"a character type\");\n+\n       Any_Array := New_Standard_Entity;\n       Set_Ekind             (Any_Array, E_String_Type);\n       Set_Scope             (Any_Array, Standard_Standard);\n@@ -810,18 +823,6 @@ package body CStand is\n       Set_Scalar_Range      (Any_Boolean, Scalar_Range (Standard_Boolean));\n       Make_Name             (Any_Boolean, \"a boolean type\");\n \n-      Any_Character := New_Standard_Entity;\n-      Set_Ekind             (Any_Character, E_Enumeration_Type);\n-      Set_Scope             (Any_Character, Standard_Standard);\n-      Set_Etype             (Any_Character, Any_Character);\n-      Set_Is_Unsigned_Type  (Any_Character);\n-      Set_Is_Character_Type (Any_Character);\n-      Init_Esize            (Any_Character, Standard_Character_Size);\n-      Init_RM_Size          (Any_Character, 8);\n-      Set_Prim_Alignment    (Any_Character);\n-      Set_Scalar_Range      (Any_Character, Scalar_Range (Standard_Character));\n-      Make_Name             (Any_Character, \"a character type\");\n-\n       Any_Composite := New_Standard_Entity;\n       Set_Ekind             (Any_Composite, E_Array_Type);\n       Set_Scope             (Any_Composite, Standard_Standard);"}, {"sha": "6855454c2106c9166fe8b61f47e3d0f93764b989", "filename": "gcc/ada/gnatchop.adb", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgnatchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgnatchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatchop.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -37,11 +37,6 @@ with Hostparm;\n \n procedure Gnatchop is\n \n-   Cwrite : constant String :=\n-              \"GNATCHOP \" &\n-              Gnatvsn.Gnat_Version_String  &\n-              \" Copyright 1998-2000, Ada Core Technologies Inc.\";\n-\n    Terminate_Program : exception;\n    --  Used to terminate execution immediately\n \n@@ -57,9 +52,13 @@ procedure Gnatchop is\n    Gnat_Cmd : String_Access;\n    --  Command to execute the GNAT compiler\n \n-   Gnat_Args : Argument_List_Access   := new Argument_List'\n-     (new String'(\"-c\"), new String'(\"-x\"), new String'(\"ada\"),\n-      new String'(\"-gnats\"), new String'(\"-gnatu\"));\n+   Gnat_Args : Argument_List_Access :=\n+                 new Argument_List'\n+                   (new String'(\"-c\"),\n+                    new String'(\"-x\"),\n+                    new String'(\"ada\"),\n+                    new String'(\"-gnats\"),\n+                    new String'(\"-gnatu\"));\n    --  Arguments used in Gnat_Cmd call\n \n    EOF : constant Character := Character'Val (26);\n@@ -1110,6 +1109,7 @@ procedure Gnatchop is\n                            else\n                               Error_Msg (\"-k# requires numeric parameter\");\n                            end if;\n+\n                            return False;\n                         end if;\n                      end loop;\n@@ -1129,23 +1129,31 @@ procedure Gnatchop is\n                end;\n \n             when 'p' =>\n-               Preserve_Mode     := True;\n+               Preserve_Mode := True;\n \n             when 'q' =>\n-               Quiet_Mode        := True;\n+               Quiet_Mode := True;\n \n             when 'r' =>\n                Source_References := True;\n \n             when 'v' =>\n-               Verbose_Mode      := True;\n-               Put_Line (Standard_Error, Cwrite);\n+               Verbose_Mode := True;\n+\n+               --  Why is following written to standard error. Most other\n+               --  tools write to standard output ???\n+\n+               Put (Standard_Error, \"GNATCHOP \");\n+               Put (Standard_Error, Gnatvsn.Gnat_Version_String);\n+               Put_Line\n+                 (Standard_Error,\n+                  \" Copyright 1998-2000, Ada Core Technologies Inc.\");\n \n             when 'w' =>\n-               Overwrite_Files   := True;\n+               Overwrite_Files := True;\n \n             when 'x' =>\n-               Exit_On_Error     := True;\n+               Exit_On_Error := True;\n \n             when others =>\n                null;"}, {"sha": "40d54349bee6baaf001510c605ff87c8505d3d76", "filename": "gcc/ada/gnatlbr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgnatlbr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgnatlbr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlbr.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -50,7 +50,7 @@ with Osint;                use Osint;\n with System;\n \n procedure GnatLbr is\n-   pragma Ident (Gnat_Version_String);\n+   pragma Ident (Gnat_Static_Version_String);\n \n    type Lib_Mode is (None, Create, Set, Delete);\n    Next_Arg  : Integer;"}, {"sha": "a7b22d6a3c87e1e85751c16d428ed3bd7517f433", "filename": "gcc/ada/gnatxref.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgnatxref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgnatxref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatxref.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -24,21 +24,20 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Xr_Tabls;     use Xr_Tabls;\n-with Xref_Lib;     use Xref_Lib;\n-with Osint;        use Osint;\n-with Types;        use Types;\n+with Xr_Tabls; use Xr_Tabls;\n+with Xref_Lib; use Xref_Lib;\n+with Osint;    use Osint;\n+with Types;    use Types;\n \n with Gnatvsn;\n with Opt;\n \n with Ada.Strings.Fixed; use Ada.Strings.Fixed;\n with Ada.Text_IO;       use Ada.Text_IO;\n with GNAT.Command_Line; use GNAT.Command_Line;\n-with GNAT.Strings;       use GNAT.Strings;\n+with GNAT.Strings;      use GNAT.Strings;\n \n procedure Gnatxref is\n-\n    Search_Unused   : Boolean := False;\n    Local_Symbols   : Boolean := True;\n    Prj_File        : File_Name_String;\n@@ -209,8 +208,6 @@ procedure Gnatxref is\n    -----------------\n \n    procedure Write_Usage is\n-      use Ada.Text_IO;\n-\n    begin\n       Put_Line (\"GNATXREF \" & Gnatvsn.Gnat_Version_String\n                 & \" Copyright 1998-2003, Ada Core Technologies Inc.\");"}, {"sha": "5718e120d553cd339465b3c4ff69bd7a619e2a5d", "filename": "gcc/ada/gprcmd.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgprcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fgprcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprcmd.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -39,23 +39,22 @@\n --    stamp        copy file time stamp from file1 to file2\n --    prefix       get the prefix of the GNAT installation\n \n+with Gnatvsn;\n+with Osint;   use Osint;\n+with Namet;   use Namet;\n+\n with Ada.Characters.Handling;   use Ada.Characters.Handling;\n with Ada.Command_Line;          use Ada.Command_Line;\n with Ada.Text_IO;               use Ada.Text_IO;\n with GNAT.OS_Lib;               use GNAT.OS_Lib;\n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n with GNAT.Regpat;               use GNAT.Regpat;\n-with Gnatvsn;\n-with Osint;                     use Osint;\n-with Namet;                     use Namet;\n+\n \n procedure Gprcmd is\n \n    --  ??? comments are thin throughout this unit\n \n-   Version : constant String :=\n-               \"GPRCMD \" & Gnatvsn.Gnat_Version_String &\n-               \" Copyright 2002-2003, Free Software Fundation, Inc.\";\n \n    procedure Cat (File : String);\n    --  Print the contents of file on standard output.\n@@ -350,7 +349,13 @@ begin\n \n    begin\n       if Cmd = \"-v\" then\n-         Put_Line (Standard_Error, Version);\n+\n+         --  Should this be on Standard_Error ???\n+\n+         Put (Standard_Error, \"GPRCMD \");\n+         Put (Standard_Error, Gnatvsn.Gnat_Version_String);\n+         Put_Line (Standard_Error,\n+                   \" Copyright 2002-2003, Free Software Fundation, Inc.\");\n          Usage;\n \n       elsif Cmd = \"pwd\" then"}, {"sha": "5d2a9ce6ba72ad2fa36fc9a414a11c524488b861", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -6551,7 +6551,6 @@ package body Make is\n          then\n             Add_Switch (Argv, Compiler, And_Save => And_Save);\n             Add_Switch (Argv, Binder, And_Save => And_Save);\n-            Add_Switch (Argv, Linker, And_Save => And_Save);\n \n             if Argv'Length <= 6 or else Argv (6) /= '=' then\n                Make_Failed (\"missing path for --RTS\");"}, {"sha": "1e829e43aee1fec8fb26587e013141b18e836dbe", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -264,7 +264,9 @@ package body Scn is\n       --  Set default for Comes_From_Source. All nodes built now until we\n       --  reenter the analyzer will have Comes_From_Source set to True\n \n-      Set_Comes_From_Source_Default (True);\n+      if Index /= Internal_Source_File then\n+         Set_Comes_From_Source_Default (True);\n+      end if;\n \n       --  Check license if GNAT type header possibly present\n \n@@ -278,7 +280,9 @@ package body Scn is\n       --  call Scan. Scan initial token (note this initializes Prev_Token,\n       --  Prev_Token_Ptr).\n \n-      Scan;\n+      if Index /= Internal_Source_File then\n+         Scan;\n+      end if;\n \n       --  Clear flags for reserved words used as indentifiers\n "}, {"sha": "2ad21be4f10d977b3d70f50e31747445261a1a50", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -1110,17 +1110,31 @@ package body Sinput is\n \n    function Source_First (S : SFI) return Source_Ptr is\n    begin\n-      return Source_File.Table (S).Source_First;\n+      if S = Internal_Source_File then\n+         return Internal_Source_Ptr'First;\n+      else\n+         return Source_File.Table (S).Source_First;\n+      end if;\n    end Source_First;\n \n    function Source_Last (S : SFI) return Source_Ptr is\n    begin\n-      return Source_File.Table (S).Source_Last;\n+      if S = Internal_Source_File then\n+         return Internal_Source_Ptr'Last;\n+      else\n+         return Source_File.Table (S).Source_Last;\n+      end if;\n+\n    end Source_Last;\n \n    function Source_Text (S : SFI) return Source_Buffer_Ptr is\n    begin\n-      return Source_File.Table (S).Source_Text;\n+      if S = Internal_Source_File then\n+         return Internal_Source_Ptr;\n+      else\n+         return Source_File.Table (S).Source_Text;\n+      end if;\n+\n    end Source_Text;\n \n    function Template (S : SFI) return SFI is"}, {"sha": "a2c15984cf6e92a34a1764c84261eaf56f0d72a7", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=f1f9fe3022a9f1d4cf964e13d3ba0b7c323128ba", "patch": "@@ -569,9 +569,14 @@ pragma Preelaborate (Types);\n    No_Unit : constant Unit_Number_Type := -1;\n    --  Special value used to signal no unit\n \n-   type Source_File_Index is new Nat;\n+   type Source_File_Index is new Int range -1 .. Int'Last;\n    --  Type used to index the source file table (see package Sinput)\n \n+   Internal_Source_File : constant Source_File_Index :=\n+                            Source_File_Index'First;\n+   --  Value used to indicate the buffer for the source-code-like strings\n+   --  internally created withing the compiler (see package Sinput)\n+\n    No_Source_File : constant Source_File_Index := 0;\n    --  Value used to indicate no source file present\n "}]}