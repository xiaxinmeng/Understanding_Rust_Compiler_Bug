{"sha": "67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiNWQwYjJmZThjZGI3MmRmYzU2NjQ0ZTQyYzI4ZjQ1M2NiMmY3Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-11-21T15:50:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-11-21T15:50:38Z"}, "message": "substring_loc info needs default track-macro-expansion (PR preprocessor/78324)\n\ngcc/ChangeLog:\n\tPR preprocessor/78324\n\t* input.c (get_substring_ranges_for_loc): Fail gracefully if\n\t-ftrack-macro-expansion has a value other than 2.\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/78324\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(test_multitoken_macro): New function.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-3.c: New test\n\tcase.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-4.c: New test\n\tcase.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new test\n\tcases.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c (test_sprintf_note):\n\tMove to...\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-4.c: ...here.  Drop\n\t-ftrack-macro-expansion=0.\n\t(test_sprintf_note): Remove \"P\" macro.  Add\n\tdg-begin/end-multiline-output directives.\n\t(LINE, buffer, ptr): Copy from builtin-sprintf-warn-1.c.\n\nFrom-SVN: r242667", "tree": {"sha": "e310cae0dff43fc2c619bb7bf0b1a055a547085e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e310cae0dff43fc2c619bb7bf0b1a055a547085e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd586f9814de2a14a90ef915f91f74144757e256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd586f9814de2a14a90ef915f91f74144757e256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd586f9814de2a14a90ef915f91f74144757e256"}], "stats": {"total": 249, "additions": 218, "deletions": 31}, "files": [{"sha": "171107e8345131837702e0c13249fb45dc7a2dae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -1,3 +1,9 @@\n+2016-11-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/78324\n+\t* input.c (get_substring_ranges_for_loc): Fail gracefully if\n+\t-ftrack-macro-expansion has a value other than 2.\n+\n 2016-11-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/78400"}, {"sha": "611e18b541ecbd3d200e64e5f3eee520694ecd95", "filename": "gcc/input.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -1322,6 +1322,15 @@ get_substring_ranges_for_loc (cpp_reader *pfile,\n   if (strloc == UNKNOWN_LOCATION)\n     return \"unknown location\";\n \n+  /* Reparsing the strings requires accurate location information.\n+     If -ftrack-macro-expansion has been overridden from its default\n+     of 2, then we might have a location of a macro expansion point,\n+     rather than the location of the literal itself.\n+     Avoid this by requiring that we have full macro expansion tracking\n+     for substring locations to be available.  */\n+  if (cpp_get_options (pfile)->track_macro_expansion != 2)\n+    return \"track_macro_expansion != 2\";\n+\n   /* If string concatenation has occurred at STRLOC, get the locations\n      of all of the literal tokens making up the compound string.\n      Otherwise, just use STRLOC.  */"}, {"sha": "16196967f43dace5913bd3380b25a90d3ed4d5e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -1,3 +1,22 @@\n+2016-11-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/78324\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(test_multitoken_macro): New function.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-3.c: New test\n+\tcase.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-4.c: New test\n+\tcase.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new test\n+\tcases.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c (test_sprintf_note):\n+\tMove to...\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-4.c: ...here.  Drop\n+\t-ftrack-macro-expansion=0.\n+\t(test_sprintf_note): Remove \"P\" macro.  Add\n+\tdg-begin/end-multiline-output directives.\n+\t(LINE, buffer, ptr): Copy from builtin-sprintf-warn-1.c.\n+\n 2016-11-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* lib/target-supports.exp (check_effective_target_tiny) [avr]:"}, {"sha": "76a085e97794e7cb93cab25eca33b87d2b7ec876", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -243,6 +243,22 @@ test_macro (void)\n    { dg-end-multiline-output \"\" } */\n }\n \n+void\n+test_multitoken_macro (void)\n+{\n+#define RANGE (\"0123456789\")  /* { dg-error \"unable to read substring location: macro expansion\" } */\n+  __emit_string_literal_range (RANGE, 4, 3, 6);\n+/* { dg-begin-multiline-output \"\" }\n+ #define RANGE (\"0123456789\")\n+               ^\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_string_literal_range (RANGE, 4, 3, 6);\n+                                ^~~~~\n+   { dg-end-multiline-output \"\" } */\n+#undef RANGE\n+}\n+\n /* Verify that the location of the closing quote is used\n    for the location of the null terminating character.  */\n "}, {"sha": "95b78bc6aeba4acca0e763e212eb89ce5d02cc4b", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-3.c?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -0,0 +1,43 @@\n+/* Similar to diagnostic-test-string-literals-1.c, but with\n+   -ftrack-macro-expansion=0.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+\n+extern void __emit_string_literal_range (const void *literal, int caret_idx,\n+\t\t\t\t\t int start_idx, int end_idx);\n+\n+void\n+test_simple_string_literal (void)\n+{\n+  __emit_string_literal_range (\"0123456789\", /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+\t\t\t       6, 6, 7);\n+}\n+\n+void\n+test_concatenated_string_literal (void)\n+{\n+  __emit_string_literal_range (\"01234\" \"56789\", /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+\t\t\t       4, 3, 6);\n+}\n+\n+/* To reproduce PR preprocessor/78324, the macro name should start\n+   with the letter 'R'.  */\n+\n+void\n+test_macro (void)\n+{\n+#define RANGE \"01234\"\n+  __emit_string_literal_range (RANGE /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+                               \"56789\",\n+                               4, 3, 6);\n+#undef RANGE\n+}\n+\n+void\n+test_multitoken_macro (void)\n+{\n+#define RANGE (\"0123456789\")\n+  __emit_string_literal_range (RANGE, 4, 3, 6); /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+#undef RANGE\n+}"}, {"sha": "d47818a72694ff8c86e593b698acfe2c20507022", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-4.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-4.c?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -0,0 +1,43 @@\n+/* Similar to diagnostic-test-string-literals-1.c, but with\n+   -ftrack-macro-expansion=1.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftrack-macro-expansion=1\" } */\n+\n+extern void __emit_string_literal_range (const void *literal, int caret_idx,\n+\t\t\t\t\t int start_idx, int end_idx);\n+\n+void\n+test_simple_string_literal (void)\n+{\n+  __emit_string_literal_range (\"0123456789\", /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+\t\t\t       6, 6, 7);\n+}\n+\n+void\n+test_concatenated_string_literal (void)\n+{\n+  __emit_string_literal_range (\"01234\" \"56789\", /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+\t\t\t       4, 3, 6);\n+}\n+\n+/* To reproduce PR preprocessor/78324, the macro name should start\n+   with the letter 'R'.  */\n+\n+void\n+test_macro (void)\n+{\n+#define RANGE \"01234\"  /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+  __emit_string_literal_range (RANGE\n+                               \"56789\",\n+                               4, 3, 6);\n+#undef RANGE\n+}\n+\n+void\n+test_multitoken_macro (void)\n+{\n+#define RANGE (\"0123456789\")  /* { dg-error \"unable to read substring location: track_macro_expansion != 2\" } */\n+  __emit_string_literal_range (RANGE, 4, 3, 6);\n+#undef RANGE\n+}"}, {"sha": "eb15a66391e24e38c786087aa51110ac4084c911", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -73,7 +73,9 @@ set plugin_test_list [list \\\n \t  diagnostic-test-show-trees-1.c } \\\n     { diagnostic_plugin_test_string_literals.c \\\n \t  diagnostic-test-string-literals-1.c \\\n-\t  diagnostic-test-string-literals-2.c } \\\n+\t  diagnostic-test-string-literals-2.c \\\n+\t  diagnostic-test-string-literals-3.c \\\n+\t  diagnostic-test-string-literals-4.c } \\\n     { location_overflow_plugin.c \\\n \t  location-overflow-test-1.c \\\n \t  location-overflow-test-2.c } \\"}, {"sha": "a24889bb0e9d48218505c04fe0a859e25b03016e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-1.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -170,35 +170,6 @@ void test_sprintf_zero_length_array (void *p, int i)\n   __builtin_sprintf (buffer (1), \"%s\",  s [i].a);\n }\n \n-/* Verify that the note printed along with the diagnostic mentions\n-   the correct sizes and refers to the location corresponding to\n-   the affected directive.  */\n-\n-void test_sprintf_note (void)\n-{\n-#define P __builtin_sprintf\n-\n-  /* Diagnostic column numbers are 1-based.  */\n-\n-  P (buffer (0),                /* { dg-message \"format output 4 bytes into a destination of size 0\" } */\n-     \"%c%s%i\", '1', \"2\", 3);    /* { dg-warning \"7:.%c. directive writing 1 byte into a region of size 0\" } */\n-\n-  P (buffer (1),                /* { dg-message \"format output 6 bytes into a destination of size 1\" } */\n-     \"%c%s%i\", '1', \"23\", 45);  /* { dg-warning \"9:.%s. directive writing 2 bytes into a region of size 0\" } */\n-\n-  P (buffer (2),                /* { dg-message \"format output 6 bytes into a destination of size 2\" } */\n-     \"%c%s%i\", '1', \"2\", 345);  /* { dg-warning \"11:.%i. directive writing 3 bytes into a region of size 0\" } */\n-\n-  /* It would be nice if the caret in the location range for the format\n-     string below could be made to point at the closing quote of the format\n-     string, like so:\n-       sprintf (d, \"%c%s%i\", '1', \"2\", 3456);\n-\t            ~~~~~~^\n-     Unfortunately, that doesn't work with the current setup.  */\n-  P (buffer (6),                /* { dg-message \"format output 7 bytes into a destination of size 6\" } */\n-     \"%c%s%i\", '1', \"2\", 3456); /* { dg-warning \"writing a terminating nul past the end of the destination\" } */\n-}\n-\n #undef T\n #define T(size, fmt, ...)\t\t\t\t\t  \\\n   __builtin___sprintf_chk (buffer (size), 0, objsize (size), fmt, \\"}, {"sha": "3b3fb68b40dd0731ba42ecaa5e9b0fadfd8c6aef", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-4.c", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-4.c?ref=67b5d0b2fe8cdb72dfc56644e42c28f453cb2f76", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wformat -Wformat-length=1 -fdiagnostics-show-caret -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-Wformat -Wformat-length=1 -fdiagnostics-show-caret\" } */\n \n extern int sprintf (char*, const char*, ...);\n \n@@ -91,3 +91,81 @@ void test (void)\n }\n \n /* { dg-prune-output \"too many arguments for format\" } */\n+\n+/* When debugging, define LINE to the line number of the test case to exercise\n+   and avoid exercising any of the others.  The buffer macro\n+   below makes use of LINE to avoid warnings for other lines.  */\n+#ifndef LINE\n+# define LINE 0\n+#endif\n+\n+char buffer [256];\n+extern char *ptr;\n+\n+/* Evaluate to an array of SIZE characters when non-negative and LINE\n+   is not set or set to the line the macro is on, or to a pointer to\n+   an unknown object otherwise.  */\n+#define buffer(size)\t\t\t\t\t\t\t\\\n+  (0 <= size && (!LINE || __LINE__ == LINE)\t\t\t\t\\\n+   ? buffer + sizeof buffer - size : ptr)\n+\n+/* Verify that the note printed along with the diagnostic mentions\n+   the correct sizes and refers to the location corresponding to\n+   the affected directive.  */\n+\n+void test_sprintf_note (void)\n+{\n+  /* Diagnostic column numbers are 1-based.  */\n+\n+  __builtin_sprintf (buffer (0), \"%c%s%i\", '1', \"2\", 3);\n+  /* { dg-warning \"35: .%c. directive writing 1 byte into a region of size 0\" \"\" { target *-*-* } .-1 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (0), \"%c%s%i\", '1', \"2\", 3);\n+                                   ^~\n+     { dg-end-multiline-output \"\" }\n+\n+     { dg-message \"format output 4 bytes into a destination of size 0\" \"\" { target *-*-* } .-7 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (0), \"%c%s%i\", '1', \"2\", 3);\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (buffer (1), \"%c%s%i\", '1', \"23\", 45);\n+  /* { dg-warning \"37: .%s. directive writing 2 bytes into a region of size 0\" \"\" { target *-*-* } .-1 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (1), \"%c%s%i\", '1', \"23\", 45);\n+                                     ^~          ~~~~\n+     { dg-end-multiline-output \"\" }\n+\n+     { dg-message \"format output 6 bytes into a destination of size 1\" \"\" { target *-*-* } .-7 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (1), \"%c%s%i\", '1', \"23\", 45);\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (buffer (2), \"%c%s%i\", '1', \"2\", 345);\n+  /* { dg-warning \"39: .%i. directive writing 3 bytes into a region of size 0\" \"\" { target *-*-* } .-1 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (2), \"%c%s%i\", '1', \"2\", 345);\n+                                       ^~\n+     { dg-end-multiline-output \"\" }\n+\n+     { dg-message \"format output 6 bytes into a destination of size 2\" \"\" { target *-*-* } .-7 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (2), \"%c%s%i\", '1', \"2\", 345);\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (buffer (6), \"%c%s%i\", '1', \"2\", 3456);\n+  /* { dg-warning \"41: writing a terminating nul past the end of the destination\" \"\" { target *-*-* } .-1 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (6), \"%c%s%i\", '1', \"2\", 3456);\n+                                   ~~~~~~^\n+     { dg-end-multiline-output \"\" }\n+\n+     { dg-message \"format output 7 bytes into a destination of size 6\" \"\" { target *-*-* } .-7 }\n+     { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (buffer (6), \"%c%s%i\", '1', \"2\", 3456);\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}