{"sha": "d9330fb5caa06a5007b1fc59797cdba73a805c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzMzBmYjVjYWEwNmE1MDA3YjFmYzU5Nzk3Y2RiYTczYTgwNWM1OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-05-27T18:33:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-27T18:33:23Z"}, "message": "i386.c (ix86_gen_add3): Remove indirect function.\n\n\t* config/i386/i386.c (ix86_gen_add3): Remove indirect function.\n\t(*ix86_gen_sub3): Ditto.\n\t(*ix86_gen_sub3_carry): Ditto.\n\t(*ix86_gen_one_cmpl2): Ditto.\n\t(*ix86_gen_andsp): Ditto.\n\t(ix86_init_large_pic_reg): Use gen_add2_insn instead of ix86_gen_add3.\n\t(gen_and2_insn): New static function.\n\t(ix86_expand_prologue): Use gen_and2_insn instead of ix86_gen_andsp.\n\tUse gen_add3_insn instead of ix86_gen_add3.\n\t(ix86_expand_split_stack_prologue): Use gen_add2_insn\n\tinstead of ix86_gen_add3.\n\t(legitimize_tls_address): Use gen_add2_insn instead of ix86_gen_add3.\n\tUse gen_sub3_insn instead of ix86_gen_sub3.\n\t* config/i386-expand.c (ix86_split_long_move): Use gen_add2_insn\n\tinstead of ix86_gen_add3.\n\t(ix86_expand_strlensi_unroll_1): Use gen_add2_insn instead of\n\tix86_gen_add3.  Use gen_sub3_insn instead of ix86_gen_sub3.\n\t(construct_plt_address): Use gen_add2_insn instead of ix86_gen_add3.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tDo not initialize ix86_gen_add3, ix86_gen_sub3, ix86_gen_sub3_carry,\n\tix86_gen_one_cmpl2 and ix86_gen_andsp.\n\nFrom-SVN: r271667", "tree": {"sha": "d614df18ee9b733e1c9545ce1787dc6c23aa5217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d614df18ee9b733e1c9545ce1787dc6c23aa5217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9330fb5caa06a5007b1fc59797cdba73a805c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9330fb5caa06a5007b1fc59797cdba73a805c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9330fb5caa06a5007b1fc59797cdba73a805c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9330fb5caa06a5007b1fc59797cdba73a805c58/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e8ae6c818690765f54ff7d5a6f8571c1ef8bd99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8ae6c818690765f54ff7d5a6f8571c1ef8bd99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8ae6c818690765f54ff7d5a6f8571c1ef8bd99"}], "stats": {"total": 133, "additions": 72, "deletions": 61}, "files": [{"sha": "a6f75ae5096a921b4594b9850632b57ed8371642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9330fb5caa06a5007b1fc59797cdba73a805c58", "patch": "@@ -1,3 +1,27 @@\n+2019-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_gen_add3): Remove indirect function.\n+\t(*ix86_gen_sub3): Ditto.\n+\t(*ix86_gen_sub3_carry): Ditto.\n+\t(*ix86_gen_one_cmpl2): Ditto.\n+\t(*ix86_gen_andsp): Ditto.\n+\t(ix86_init_large_pic_reg): Use gen_add2_insn instead of ix86_gen_add3.\n+\t(gen_and2_insn): New static function.\n+\t(ix86_expand_prologue): Use gen_and2_insn instead of ix86_gen_andsp.\n+\tUse gen_add3_insn instead of ix86_gen_add3.\n+\t(ix86_expand_split_stack_prologue): Use gen_add2_insn\n+\tinstead of ix86_gen_add3.\n+\t(legitimize_tls_address): Use gen_add2_insn instead of ix86_gen_add3.\n+\tUse gen_sub3_insn instead of ix86_gen_sub3.\n+\t* config/i386-expand.c (ix86_split_long_move): Use gen_add2_insn\n+\tinstead of ix86_gen_add3.\n+\t(ix86_expand_strlensi_unroll_1): Use gen_add2_insn instead of\n+\tix86_gen_add3.  Use gen_sub3_insn instead of ix86_gen_sub3.\n+\t(construct_plt_address): Use gen_add2_insn instead of ix86_gen_add3.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tDo not initialize ix86_gen_add3, ix86_gen_sub3, ix86_gen_sub3_carry,\n+\tix86_gen_one_cmpl2 and ix86_gen_andsp.\n+\n 2019-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (resolve_args_picking_1): Deal with DW_OP_GNU_addr_index\n@@ -21,29 +45,32 @@\n \n 2019-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/i386.md (@leave_<mode>): New expander.\n+\t* config/i386/i386.md (@sub<mode>3_carry): Rename\n+\tfrom sub<mode>3_carry.\n+\t(@leave_<mode>): New expander.\n \t(*leave): Rename from leave.\n \t(*leave_rex64): Rename from leave_rex64.\n \t(@monitorx_<mode>): Rename from monitorx_<mode>.\n \t(@clzero_<mode>): Rename from clzero_<mode>.\n-\t* config/i386/sse.md (@sse3_monitor_<mode>): Rename from\n-\tsse3_monitor_<mode>.\n-\t* config/i386/i386.c (*ix86_gen_leave): Remove indirect function.\n+\t* config/i386/sse.md (@sse3_monitor_<mode>): Rename\n+\tfrom sse3_monitor_<mode>.\n+\t* config/i386/i386.c (ix86_gen_sub3_carry): Remove indirect function.\n+\t(*ix86_gen_leave): Ditto.\n \t(*ix86_gen_monitor): Ditto.\n \t(*ix86_gen_monitorx): Ditto.\n \t(*ix86_gen_clzero): Ditto.\n-\t(*ix86_gen_one_cmpl2): Ditto.\n \t(ix86_emit_leave): Use gen_leave instead of ix86_gen_leave.\n-\t* config/i386/i386-expand.c (ix86_expand_builtin)\n-\t<case IX86_BUILTIN_MONITOR>: Use gen_sse3_monitor\n-\tinstead of ix86_gen_monitor.\n+\t* config/i386/i386-expand.c (ix86_expand_strlensi_unroll_1):\n+\tUse gen_sub3_carry instead of ix86_gen_sub3_carry.\n+\t(ix86_expand_builtin) <case IX86_BUILTIN_MONITOR>:\n+\tUse gen_sse3_monitor instead of ix86_gen_monitor.\n \t<case IX86_BUILTIN_MONITORX>: Use gen_monitorx\n \tinstead of ix86_gen_monitorx.\n \t<case IX86_BUILTIN_CLZERO>: Use gen_clzero\n \tinstead of ix86_gen_clzero.\n \t* config/i386/i386-options.c (ix86_option_override_internal):\n-\tDo not initialize ix86_gen_leave, ix86_gen_monitor,\n-\tix86_gen_monitorx, ix86_gen_clzero and ix86_gen_one_cmpl2.\n+\tDo not initialize ix86_gen_leave, ix86_gen_sub3_carry,\n+\tix86_gen_monitor, ix86_gen_monitorx and ix86_gen_clzero.\n \n 2019-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "9f9069a5fb9615abc0a81b53a61607690b55246c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=d9330fb5caa06a5007b1fc59797cdba73a805c58", "patch": "@@ -5380,8 +5380,7 @@ ix86_split_long_move (rtx operands[])\n \t  if (nparts == 3)\n \t    {\n \t      if (TARGET_128BIT_LONG_DOUBLE && mode == XFmode)\n-                emit_insn (ix86_gen_add3 (stack_pointer_rtx,\n-\t\t\t\t\t  stack_pointer_rtx, GEN_INT (-4)));\n+                emit_insn (gen_add2_insn (stack_pointer_rtx, GEN_INT (-4)));\n \t      emit_move_insn (part[0][2], part[1][2]);\n \t    }\n \t  else if (nparts == 4)\n@@ -7789,7 +7788,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t\t\t       QImode, 1, end_0_label);\n \n       /* Increment the address.  */\n-      emit_insn (ix86_gen_add3 (out, out, const1_rtx));\n+      emit_insn (gen_add2_insn (out, const1_rtx));\n \n       /* Not needed with an alignment of 2 */\n       if (align != 2)\n@@ -7799,15 +7798,15 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t  emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL, QImode, 1,\n \t\t\t\t   end_0_label);\n \n-\t  emit_insn (ix86_gen_add3 (out, out, const1_rtx));\n+\t  emit_insn (gen_add2_insn (out, const1_rtx));\n \n \t  emit_label (align_3_label);\n \t}\n \n       emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL, QImode, 1,\n \t\t\t       end_0_label);\n \n-      emit_insn (ix86_gen_add3 (out, out, const1_rtx));\n+      emit_insn (gen_add2_insn (out, const1_rtx));\n     }\n \n   /* Generate loop to check 4 bytes at a time.  It is not a good idea to\n@@ -7817,7 +7816,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \n   mem = change_address (src, SImode, out);\n   emit_move_insn (scratch, mem);\n-  emit_insn (ix86_gen_add3 (out, out, GEN_INT (4)));\n+  emit_insn (gen_add2_insn (out, GEN_INT (4)));\n \n   /* This formula yields a nonzero result iff one of the bytes is zero.\n      This saves three branches inside loop and many cycles.  */\n@@ -7871,7 +7870,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \n        /* Not in the first two.  Move two bytes forward.  */\n        emit_insn (gen_lshrsi3 (tmpreg, tmpreg, GEN_INT (16)));\n-       emit_insn (ix86_gen_add3 (out, out, const2_rtx));\n+       emit_insn (gen_add2_insn (out, const2_rtx));\n \n        emit_label (end_2_label);\n \n@@ -7882,7 +7881,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n   emit_insn (gen_addqi3_cconly_overflow (tmpreg, tmpreg));\n   tmp = gen_rtx_REG (CCmode, FLAGS_REG);\n   cmp = gen_rtx_LTU (VOIDmode, tmp, const0_rtx);\n-  emit_insn (ix86_gen_sub3_carry (out, out, GEN_INT (3), tmp, cmp));\n+  emit_insn (gen_sub3_carry (Pmode, out, out, GEN_INT (3), tmp, cmp));\n \n   emit_label (end_0_label);\n }\n@@ -7915,7 +7914,7 @@ if (TARGET_UNROLL_STRLEN\n       /* strlensi_unroll_1 returns the address of the zero at the end of\n \t the string, like memchr(), so compute the length by subtracting\n \t the start address.  */\n-      emit_insn (ix86_gen_sub3 (out, out, addr));\n+      emit_insn (gen_sub2_insn (out, addr));\n       return true;\n     }\n   else\n@@ -7938,7 +7937,7 @@ construct_plt_address (rtx symbol)\n   unspec = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, symbol), UNSPEC_PLTOFF);\n \n   emit_move_insn (tmp, gen_rtx_CONST (Pmode, unspec));\n-  emit_insn (ix86_gen_add3 (tmp, tmp, pic_offset_table_rtx));\n+  emit_insn (gen_add2_insn (tmp, pic_offset_table_rtx));\n   return tmp;\n }\n "}, {"sha": "cd33d227d9bfe52b0cf033a31d0a15355bb421b4", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=d9330fb5caa06a5007b1fc59797cdba73a805c58", "patch": "@@ -2552,21 +2552,6 @@ ix86_option_override_internal (bool main_args_p,\n   if (!TARGET_64BIT_P (opts->x_ix86_isa_flags) && !opts->x_flag_split_stack)\n     targetm.expand_builtin_va_start = NULL;\n \n-  if (Pmode == DImode)\n-    {\n-      ix86_gen_add3 = gen_adddi3;\n-      ix86_gen_sub3 = gen_subdi3;\n-      ix86_gen_sub3_carry = gen_subdi3_carry;\n-      ix86_gen_andsp = gen_anddi3;\n-    }\n-  else\n-    {\n-      ix86_gen_add3 = gen_addsi3;\n-      ix86_gen_sub3 = gen_subsi3;\n-      ix86_gen_sub3_carry = gen_subsi3_carry;\n-      ix86_gen_andsp = gen_andsi3;\n-    }\n-\n #ifdef USE_IX86_CLD\n   /* Use -mcld by default for 32-bit code if configured with --enable-cld.  */\n   if (!TARGET_64BIT_P (opts->x_ix86_isa_flags))"}, {"sha": "966eb766ad9309f3d674bb5c30fd6a0fe4ebb2a0", "filename": "gcc/config/i386/i386-options.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.h?ref=d9330fb5caa06a5007b1fc59797cdba73a805c58", "patch": "@@ -55,11 +55,6 @@ extern tree (*ix86_veclib_handler) (combined_fn, tree, tree);\n extern tree ix86_veclibabi_svml (combined_fn, tree, tree);\n extern tree ix86_veclibabi_acml (combined_fn, tree, tree);\n \n-extern rtx (*ix86_gen_add3) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n-extern rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n-\n enum ix86_function_specific_strings\n {\n   IX86_FUNCTION_SPECIFIC_ARCH,"}, {"sha": "72e59417fdf25031b6f73c3f902d22656a41faf1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d9330fb5caa06a5007b1fc59797cdba73a805c58", "patch": "@@ -349,11 +349,6 @@ enum processor_type ix86_arch;\n /* True if processor has SSE prefetch instruction.  */\n unsigned char x86_prefetch_sse;\n \n-rtx (*ix86_gen_add3) (rtx, rtx, rtx);\n-rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n-rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n-rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n-\n /* Preferred alignment for stack boundary in bits.  */\n unsigned int ix86_preferred_stack_boundary;\n \n@@ -1647,8 +1642,7 @@ ix86_init_large_pic_reg (unsigned int tmp_regno)\n   emit_insn (gen_set_rip_rex64 (pic_offset_table_rtx,\n \t\t\t\tlabel));\n   emit_insn (gen_set_got_offset_rex64 (tmp_reg, label));\n-  emit_insn (ix86_gen_add3 (pic_offset_table_rtx,\n-\t\t\t    pic_offset_table_rtx, tmp_reg));\n+  emit_insn (gen_add2_insn (pic_offset_table_rtx, tmp_reg));\n   const char *name = LABEL_NAME (label);\n   PUT_CODE (label, NOTE);\n   NOTE_KIND (label) = NOTE_INSN_DELETED_LABEL;\n@@ -7746,6 +7740,20 @@ ix86_emit_outlined_ms2sysv_save (const struct ix86_frame &frame)\n   RTX_FRAME_RELATED_P (insn) = true;\n }\n \n+/* Generate and return an insn body to AND X with Y.  */\n+\n+static rtx_insn *\n+gen_and2_insn (rtx x, rtx y)\n+{\n+  enum insn_code icode = optab_handler (and_optab, GET_MODE (x));\n+\n+  gcc_assert (insn_operand_matches (icode, 0, x));\n+  gcc_assert (insn_operand_matches (icode, 1, x));\n+  gcc_assert (insn_operand_matches (icode, 2, y));\n+\n+  return GEN_FCN (icode) (x, x, y);\n+}\n+\n /* Expand the prologue into a bunch of separate insns.  */\n \n void\n@@ -7901,9 +7909,8 @@ ix86_expand_prologue (void)\n       m->fs.cfa_offset = 0;\n \n       /* Align the stack.  */\n-      insn = emit_insn (ix86_gen_andsp (stack_pointer_rtx,\n-\t\t\t\t\tstack_pointer_rtx,\n-\t\t\t\t\tGEN_INT (-align_bytes)));\n+      insn = emit_insn (gen_and2_insn (stack_pointer_rtx,\n+\t\t\t\t       GEN_INT (-align_bytes)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n       /* Replicate the return address on the stack so that return\n@@ -8007,9 +8014,8 @@ ix86_expand_prologue (void)\n \t\t\t\t   GEN_INT (-allocate), -1, false);\n \n       /* Align the stack.  */\n-      insn = emit_insn (ix86_gen_andsp (stack_pointer_rtx,\n-\t\t\t\t\tstack_pointer_rtx,\n-\t\t\t\t\tGEN_INT (-align_bytes)));\n+      insn = emit_insn (gen_and2_insn (stack_pointer_rtx,\n+\t\t\t\t       GEN_INT (-align_bytes)));\n       m->fs.sp_offset = ROUND_UP (m->fs.sp_offset, align_bytes);\n       m->fs.sp_realigned_offset = m->fs.sp_offset\n \t\t\t\t\t      - frame.stack_realign_allocate;\n@@ -8258,7 +8264,7 @@ ix86_expand_prologue (void)\n   /* If we havn't already set up the frame pointer, do so now.  */\n   if (frame_pointer_needed && !m->fs.fp_valid)\n     {\n-      insn = ix86_gen_add3 (hard_frame_pointer_rtx, stack_pointer_rtx,\n+      insn = gen_add3_insn (hard_frame_pointer_rtx, stack_pointer_rtx,\n \t\t\t    GEN_INT (frame.stack_pointer_offset\n \t\t\t\t     - frame.hard_frame_pointer_offset));\n       insn = emit_insn (insn);\n@@ -9291,7 +9297,7 @@ ix86_expand_split_stack_prologue (void)\n       scratch_reg = gen_rtx_REG (Pmode, scratch_regno);\n       if (!TARGET_64BIT || x86_64_immediate_operand (offset, Pmode))\n \t{\n-\t  /* We don't use ix86_gen_add3 in this case because it will\n+\t  /* We don't use gen_add in this case because it will\n \t     want to split to lea, but when not optimizing the insn\n \t     will not be split after this point.  */\n \t  emit_insn (gen_rtx_SET (scratch_reg,\n@@ -9301,8 +9307,7 @@ ix86_expand_split_stack_prologue (void)\n       else\n \t{\n \t  emit_move_insn (scratch_reg, offset);\n-\t  emit_insn (ix86_gen_add3 (scratch_reg, scratch_reg,\n-\t\t\t\t    stack_pointer_rtx));\n+\t  emit_insn (gen_add2_insn (scratch_reg, stack_pointer_rtx));\n \t}\n       current = scratch_reg;\n     }\n@@ -9379,7 +9384,7 @@ ix86_expand_split_stack_prologue (void)\n \t      LABEL_PRESERVE_P (label) = 1;\n \t      emit_insn (gen_set_rip_rex64 (reg10, label));\n \t      emit_insn (gen_set_got_offset_rex64 (reg11, label));\n-\t      emit_insn (ix86_gen_add3 (reg10, reg10, reg11));\n+\t      emit_insn (gen_add2_insn (reg10, reg11));\n \t      x = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, split_stack_fn_large),\n \t\t\t\t  UNSPEC_GOT);\n \t      x = gen_rtx_CONST (Pmode, x);\n@@ -10954,7 +10959,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  base = get_thread_pointer (Pmode, true);\n \t  dest = gen_reg_rtx (Pmode);\n-\t  emit_insn (ix86_gen_sub3 (dest, base, off));\n+\t  emit_insn (gen_sub3_insn (dest, base, off));\n \t}\n       break;\n \n@@ -10974,7 +10979,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  base = get_thread_pointer (Pmode, true);\n \t  dest = gen_reg_rtx (Pmode);\n-\t  emit_insn (ix86_gen_sub3 (dest, base, off));\n+\t  emit_insn (gen_sub3_insn (dest, base, off));\n \t}\n       break;\n "}, {"sha": "dae80ccb5592d735644dc80ef5957b1bf7cf7cfc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9330fb5caa06a5007b1fc59797cdba73a805c58/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d9330fb5caa06a5007b1fc59797cdba73a805c58", "patch": "@@ -6633,7 +6633,7 @@\n \t   (plus:SWI48 (match_dup 1) (match_dup 2)))])]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\")\n \n-(define_insn \"sub<mode>3_carry\"\n+(define_insn \"@sub<mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI\n \t  (minus:SWI"}]}