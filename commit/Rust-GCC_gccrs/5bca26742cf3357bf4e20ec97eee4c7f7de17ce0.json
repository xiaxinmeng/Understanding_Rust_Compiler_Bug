{"sha": "5bca26742cf3357bf4e20ec97eee4c7f7de17ce0", "node_id": "C_kwDOANBUbNoAKDViY2EyNjc0MmNmMzM1N2JmNGUyMGVjOTdlZWU0YzdmN2RlMTdjZTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-24T09:30:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-24T09:30:32Z"}, "message": "openmp: Fix up handling of kind(host) and kind(nohost) in ACCEL_COMPILERs [PR103384]\n\nAs the testcase shows, we weren't handling kind(host) and kind(nohost) properly\nin the ACCEL_COMPILERs, the code written in there is valid for the host\ncompiler only, where if we are maybe offloaded, we defer resolution after IPA,\notherwise return 0 for kind(nohost) and accept it for kind(host).  Note,\nomp_maybe_offloaded is false after IPA.  If ACCEL_COMPILER is defined, it is\nthe other way around, but also we know we are after IPA.\n\n2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/103384\ngcc/\n\t* omp-general.c (omp_context_selector_matches): For ACCEL_COMPILER,\n\treturn 0 for kind(host) and continue for kind(nohost).\nlibgomp/\n\t* testsuite/libgomp.c/declare-variant-2.c: New test.", "tree": {"sha": "c47407db15186348af5eb4ce842dd1d837c43fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47407db15186348af5eb4ce842dd1d837c43fed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709716b9f49f2fcf46f319000562cf6e61bd2f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709716b9f49f2fcf46f319000562cf6e61bd2f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709716b9f49f2fcf46f319000562cf6e61bd2f71"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "8fcca730471fa58aaa28886c04c92a9d8af72bb8", "filename": "gcc/omp-general.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=5bca26742cf3357bf4e20ec97eee4c7f7de17ce0", "patch": "@@ -1487,16 +1487,22 @@ omp_context_selector_matches (tree ctx)\n \t\t      continue;\n \t\t    if (!strcmp (prop, \"host\"))\n \t\t      {\n+#ifdef ACCEL_COMPILER\n+\t\t\treturn 0;\n+#else\n \t\t\tif (omp_maybe_offloaded ())\n \t\t\t  ret = -1;\n \t\t\tcontinue;\n+#endif\n \t\t      }\n \t\t    if (!strcmp (prop, \"nohost\"))\n \t\t      {\n+#ifndef ACCEL_COMPILER\n \t\t\tif (omp_maybe_offloaded ())\n \t\t\t  ret = -1;\n \t\t\telse\n \t\t\t  return 0;\n+#endif\n \t\t\tcontinue;\n \t\t      }\n \t\t    int r = 0;"}, {"sha": "666ab20ea5f8aaff4c7aafb2d2efc13a1079d260", "filename": "libgomp/testsuite/libgomp.c/declare-variant-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0/libgomp%2Ftestsuite%2Flibgomp.c%2Fdeclare-variant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca26742cf3357bf4e20ec97eee4c7f7de17ce0/libgomp%2Ftestsuite%2Flibgomp.c%2Fdeclare-variant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fdeclare-variant-2.c?ref=5bca26742cf3357bf4e20ec97eee4c7f7de17ce0", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+void\n+foo_host (void)\n+{\n+  if (!omp_is_initial_device ())\n+    abort ();\n+}\n+\n+#pragma omp declare variant (foo_host) match (device={kind(host)})\n+void\n+foo (void)\n+{\n+  if (omp_is_initial_device ())\n+    abort ();\n+}\n+\n+void\n+bar_nohost (void)\n+{\n+  if (omp_is_initial_device ())\n+    abort ();\n+}\n+\n+#pragma omp declare variant (bar_nohost) match (device={kind(nohost)})\n+void\n+bar (void)\n+{\n+  if (!omp_is_initial_device ())\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp target\n+  {\n+    foo ();\n+    bar ();\n+  }\n+  return 0;\n+}"}]}