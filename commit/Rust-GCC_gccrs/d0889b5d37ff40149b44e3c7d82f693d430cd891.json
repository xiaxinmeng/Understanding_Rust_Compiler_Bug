{"sha": "d0889b5d37ff40149b44e3c7d82f693d430cd891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA4ODliNWQzN2ZmNDAxNDliNDRlM2M3ZDgyZjY5M2Q0MzBjZDg5MQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-14T14:09:18Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-16T13:22:22Z"}, "message": "aarch64: Model zero-high-half semantics of [SU]QXTN instructions\n\nSplit the aarch64_<su>qmovn<mode> pattern into separate scalar and\nvector variants. Further split the vector RTL  pattern into big/\nlittle endian variants that model the zero-high-half semantics of the\nunderlying instruction. Modeling these semantics allows for better\nRTL combinations while also removing some register allocation issues\nas the compiler now knows that the operation is totally destructive.\n\nAdd new tests to narrow_zero_high_half.c to verify the benefit of\nthis change.\n\ngcc/ChangeLog:\n\n2021-06-14  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Split generator\n\tfor aarch64_<su>qmovn builtins into scalar and vector\n\tvariants.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>qmovn<mode>_insn_le):\n\tDefine.\n\t(aarch64_<su>qmovn<mode>_insn_be): Define.\n\t(aarch64_<su>qmovn<mode>): Split into scalar and vector\n\tvariants. Change vector variant to an expander that emits the\n\tcorrect instruction depending on endianness.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.", "tree": {"sha": "a9bc2a939eef3ebf8df796c46860f74485b8d734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9bc2a939eef3ebf8df796c46860f74485b8d734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0889b5d37ff40149b44e3c7d82f693d430cd891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0889b5d37ff40149b44e3c7d82f693d430cd891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0889b5d37ff40149b44e3c7d82f693d430cd891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0889b5d37ff40149b44e3c7d82f693d430cd891/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86a3039683a8d2bb1006c1a0277678de3786ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86a3039683a8d2bb1006c1a0277678de3786ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86a3039683a8d2bb1006c1a0277678de3786ceb"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "ac5d4fc7ff1e61d404e66193b629986382ee4ffd", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0889b5d37ff40149b44e3c7d82f693d430cd891/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0889b5d37ff40149b44e3c7d82f693d430cd891/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d0889b5d37ff40149b44e3c7d82f693d430cd891", "patch": "@@ -271,8 +271,10 @@\n   BUILTIN_VQN (BINOP_UUS, sqxtun2, 0, NONE)\n \n   /* Implemented by aarch64_<su>qmovn<mode>.  */\n-  BUILTIN_VSQN_HSDI (UNOP, sqmovn, 0, NONE)\n-  BUILTIN_VSQN_HSDI (UNOP, uqmovn, 0, NONE)\n+  BUILTIN_VQN (UNOP, sqmovn, 0, NONE)\n+  BUILTIN_SD_HSDI (UNOP, sqmovn, 0, NONE)\n+  BUILTIN_VQN (UNOP, uqmovn, 0, NONE)\n+  BUILTIN_SD_HSDI (UNOP, uqmovn, 0, NONE)\n \n   /* Implemented by aarch64_<su>qxtn2<mode>.  */\n   BUILTIN_VQN (BINOP, sqxtn2, 0, NONE)"}, {"sha": "2b75e57eb77a0dea449f2c13bd77a88f48c4cea5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0889b5d37ff40149b44e3c7d82f693d430cd891/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0889b5d37ff40149b44e3c7d82f693d430cd891/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d0889b5d37ff40149b44e3c7d82f693d430cd891", "patch": "@@ -4875,10 +4875,54 @@\n (define_insn \"aarch64_<su>qmovn<mode>\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n \t(SAT_TRUNC:<VNARROWQ>\n-    (match_operand:VSQN_HSDI 1 \"register_operand\" \"w\")))]\n+\t  (match_operand:SD_HSDI 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"<su>qxtn\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>\"\n-   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+  [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_<su>qmovn<mode>_insn_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (SAT_TRUNC:<VNARROWQ>\n+\t    (match_operand:VQN 1 \"register_operand\" \"w\"))\n+\t  (match_operand:<VNARROWQ> 2 \"aarch64_simd_or_scalar_imm_zero\")))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"<su>qxtn\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>\"\n+  [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_<su>qmovn<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 2 \"aarch64_simd_or_scalar_imm_zero\")\n+\t  (SAT_TRUNC:<VNARROWQ>\n+\t    (match_operand:VQN 1 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"<su>qxtn\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>\"\n+  [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_<su>qmovn<mode>\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\")\n+\t(SAT_TRUNC:<VNARROWQ>\n+\t  (match_operand:VQN 1 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_<su>qmovn<mode>_insn_be (tmp, operands[1],\n+\t\t\t\tCONST0_RTX (<VNARROWQ>mode)));\n+    else\n+      emit_insn (gen_aarch64_<su>qmovn<mode>_insn_le (tmp, operands[1],\n+\t\t\t\tCONST0_RTX (<VNARROWQ>mode)));\n+\n+    /* The intrinsic expects a narrow result, so emit a subreg that will get\n+       optimized away as appropriate.  */\n+    emit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n+\t\t\t\t\t\t <VNARROWQ2>mode));\n+    DONE;\n+  }\n )\n \n (define_insn \"aarch64_<su>qxtn2<mode>_le\""}, {"sha": "aa6c7ef389ddaf6be09414a6f09a0dc25949b628", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_zero_high_half.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0889b5d37ff40149b44e3c7d82f693d430cd891/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0889b5d37ff40149b44e3c7d82f693d430cd891/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c?ref=d0889b5d37ff40149b44e3c7d82f693d430cd891", "patch": "@@ -67,6 +67,13 @@ TEST_UNARY (vqmovun, uint8x16_t, int16x8_t, s16, u8)\n TEST_UNARY (vqmovun, uint16x8_t, int32x4_t, s32, u16)\n TEST_UNARY (vqmovun, uint32x4_t, int64x2_t, s64, u32)\n \n+TEST_UNARY (vqmovn, int8x16_t, int16x8_t, s16, s8)\n+TEST_UNARY (vqmovn, int16x8_t, int32x4_t, s32, s16)\n+TEST_UNARY (vqmovn, int32x4_t, int64x2_t, s64, s32)\n+TEST_UNARY (vqmovn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_UNARY (vqmovn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_UNARY (vqmovn, uint32x4_t, uint64x2_t, u64, u32)\n+\n /* { dg-final { scan-assembler-not \"dup\\\\t\" } } */\n \n /* { dg-final { scan-assembler-times \"\\\\tshrn\\\\tv\" 6} }  */\n@@ -79,3 +86,5 @@ TEST_UNARY (vqmovun, uint32x4_t, int64x2_t, s64, u32)\n /* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\txtn\\\\tv\" 6} }  */\n /* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\tv\" 3} }  */"}]}