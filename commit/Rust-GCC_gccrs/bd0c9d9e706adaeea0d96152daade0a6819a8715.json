{"sha": "bd0c9d9e706adaeea0d96152daade0a6819a8715", "node_id": "C_kwDOANBUbNoAKGJkMGM5ZDllNzA2YWRhZWVhMGQ5NjE1MmRhYWRlMGE2ODE5YTg3MTU", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-17T22:08:07Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-18T17:02:06Z"}, "message": "Fix PRs 106764, 106765, and 107307, all ICE after invalid re-declaration\n\nThe problem here is the gimplifier returns GS_ERROR but\nin some cases we don't check that soon enough and try\nto do other work which could crash.\nSo the fix in these two cases is to return GS_ERROR\nearly if the gimplify_* functions had return GS_ERROR.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\tPR c/106764\n\tPR c/106765\n\tPR c/107307\n\t* gimplify.cc (gimplify_compound_lval): Return GS_ERROR\n\tif gimplify_expr had return GS_ERROR.\n\t(gimplify_call_expr): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/106764\n\tPR c/106765\n\tPR c/107307\n\t* gcc.dg/redecl-19.c: New test.\n\t* gcc.dg/redecl-20.c: New test.\n\t* gcc.dg/redecl-21.c: New test.", "tree": {"sha": "d8e626cab3c19969d76650b8cb06d81b5580478c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8e626cab3c19969d76650b8cb06d81b5580478c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd0c9d9e706adaeea0d96152daade0a6819a8715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0c9d9e706adaeea0d96152daade0a6819a8715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0c9d9e706adaeea0d96152daade0a6819a8715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0c9d9e706adaeea0d96152daade0a6819a8715/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acc205eff4091d761af45f992ab43f8d09cbb5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc205eff4091d761af45f992ab43f8d09cbb5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc205eff4091d761af45f992ab43f8d09cbb5ad"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "c62a966e9180126edc682ff933b3d46fb0a92c1e", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=bd0c9d9e706adaeea0d96152daade0a6819a8715", "patch": "@@ -3272,6 +3272,8 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   tret = gimplify_expr (p, pre_p, post_p, is_gimple_min_lval,\n \t\t\tfallback | fb_lvalue);\n   ret = MIN (ret, tret);\n+  if (ret == GS_ERROR)\n+    return GS_ERROR;\n \n   /* Step 2a: if we have component references we do not support on\n      registers then make sure the base isn't a register.  Of course\n@@ -3709,6 +3711,9 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n   ret = gimplify_expr (&CALL_EXPR_FN (*expr_p), pre_p, NULL,\n \t\t       is_gimple_call_addr, fb_rvalue);\n \n+  if (ret == GS_ERROR)\n+    return GS_ERROR;\n+\n   nargs = call_expr_nargs (*expr_p);\n \n   /* Get argument types for verification.  */"}, {"sha": "cc10685448b52566dbe7da8f46c2882dbc40cc93", "filename": "gcc/testsuite/gcc.dg/redecl-19.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-19.c?ref=bd0c9d9e706adaeea0d96152daade0a6819a8715", "patch": "@@ -0,0 +1,5 @@\n+/* We used to ICE in the gimplifier, PR 106764 */\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+(*a)(); // { dg-note \"\" }\n+b(){a()} a; // { dg-error \"\" }"}, {"sha": "07f52115ec86e6fcc74c450dea3182a6fe6ed34c", "filename": "gcc/testsuite/gcc.dg/redecl-20.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-20.c?ref=bd0c9d9e706adaeea0d96152daade0a6819a8715", "patch": "@@ -0,0 +1,9 @@\n+/* We used to ICE in the gimplifier, PR 107307 */\n+// { dg-do compile }\n+// { dg-options \"-w\" }\n+void f ()\n+{\n+  const struct { int a[1]; } b; // { dg-note \"\" }\n+  int *c = b.a;\n+  int *b; // { dg-error \"\" }\n+}"}, {"sha": "2f2a6548a57b031f4bdd3fa027a894a565b92189", "filename": "gcc/testsuite/gcc.dg/redecl-21.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0c9d9e706adaeea0d96152daade0a6819a8715/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-21.c?ref=bd0c9d9e706adaeea0d96152daade0a6819a8715", "patch": "@@ -0,0 +1,9 @@\n+/* We used to ICE in the gimplifier, PR 106765 */\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+struct a {\n+  int b\n+} c() {\n+  struct a a; // { dg-note \"\" }\n+  a.b;\n+  d a; // { dg-error \"\" }"}]}