{"sha": "7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UwOGUxOTAzMGZlODdmMDBhZjg4MzcyYzJmZWEyM2MxYjhmMGFjMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-10-31T20:50:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-10-31T20:50:30Z"}, "message": "i386.h: Clarify CCNOmode description in comment.\n\n\t* config/i386/i386.h: Clarify CCNOmode description in comment.\n\t(EXTRA_CC_MODES): Remove CCRCmode.\n\t* config/i386/i386.c (ix86_comparison_operator): Remove CCRCmode.\n\t(put_condition_code, ix86_match_ccmode): Likewise.\n\t(ix86_cc_mode): Likewise.  Fix comment.\n\t(ix86_expand_strlensi_unroll_1): *rc patterns are gone.\n\t* config/i386/i386.md: Add unspec 12 description.\n\t(adddi3 split): Use unspec 12 instead of CCRCmode.\n\t(addsi3_carry_rc): Remove.\n\t(addsi3_cc, addqi3_cc): New patterns.\n\t(addsi_3): Swap operands, match CCZmode.\n\t(addsi_4): Rewritten.\n\t(addsi_5): Renamed from addsi_6.\n\t(addsi_6): Removed.\n\t(addhi_3): Swap operands, match CCZmode.\n\t(addhi_4): Rewritten.\n\t(addhi_5): Renamed from addhi_6.\n\t(addhi_6): Removed.\n\t(addqi_3): Swap operands, match CCZmode.\n\t(addqi_4): Rewritten.\n\t(addqi_5): Renamed from addqi_6.  Use =q constraint for clobber.\n\t(subsi3_carry_rc): Removed.\n\t(iorqi_3): Use =q constraint for clobber.\n\t(xorqi_cc_2): Likewise.\n\t(negdi2_1 split): Don't use CCRCmode, use ltu instead of gtu.\n\t(x86_movsicc_0_m1_rc): Removed.\n\t(cmp?i peepholes): Remove neg.  Use CCGCmode instead of CCRCmode.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r37166", "tree": {"sha": "761c6c2001ea9ba5b8a37dd1bf369c67942c2d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/761c6c2001ea9ba5b8a37dd1bf369c67942c2d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/comments", "author": null, "committer": null, "parents": [{"sha": "99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fa3f5eddb9b963d43c55444705af6c2e3daf4a"}], "stats": {"total": 405, "additions": 216, "deletions": 189}, "files": [{"sha": "3c48642316a16063ec5e789d5773d6eb32de11ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "patch": "@@ -1,3 +1,34 @@\n+2000-10-31  Jan Hubicka  <jh@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.h: Clarify CCNOmode description in comment.\n+\t(EXTRA_CC_MODES): Remove CCRCmode.\n+\t* config/i386/i386.c (ix86_comparison_operator): Remove CCRCmode.\n+\t(put_condition_code, ix86_match_ccmode): Likewise.\n+\t(ix86_cc_mode): Likewise.  Fix comment.\n+\t(ix86_expand_strlensi_unroll_1): *rc patterns are gone.\n+\t* config/i386/i386.md: Add unspec 12 description.\n+\t(adddi3 split): Use unspec 12 instead of CCRCmode.\n+\t(addsi3_carry_rc): Remove.\n+\t(addsi3_cc, addqi3_cc): New patterns.\n+\t(addsi_3): Swap operands, match CCZmode.\n+\t(addsi_4): Rewritten.\n+\t(addsi_5): Renamed from addsi_6.\n+\t(addsi_6): Removed.\n+\t(addhi_3): Swap operands, match CCZmode.\n+\t(addhi_4): Rewritten.\n+\t(addhi_5): Renamed from addhi_6.\n+\t(addhi_6): Removed.\n+\t(addqi_3): Swap operands, match CCZmode.\n+\t(addqi_4): Rewritten.\n+\t(addqi_5): Renamed from addqi_6.  Use =q constraint for clobber.\n+\t(subsi3_carry_rc): Removed.\n+\t(iorqi_3): Use =q constraint for clobber.\n+\t(xorqi_cc_2): Likewise.\n+\t(negdi2_1 split): Don't use CCRCmode, use ltu instead of gtu.\n+\t(x86_movsicc_0_m1_rc): Removed.\n+\t(cmp?i peepholes): Remove neg.  Use CCGCmode instead of CCRCmode.\n+\n 2000-10-31  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-typeck.c (build_unary_op): If pedantic, pedwarn for increment"}, {"sha": "b27edaaf8119d2b257ec77209f16ea4048ef1364", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "patch": "@@ -1305,22 +1305,18 @@ ix86_comparison_operator (op, mode)\n       return 1;\n     case LT: case GE:\n       inmode = GET_MODE (XEXP (op, 0));\n-      if (inmode == CCmode || inmode == CCGCmode || inmode == CCRCmode\n+      if (inmode == CCmode || inmode == CCGCmode\n \t  || inmode == CCGOCmode || inmode == CCNOmode)\n \treturn 1;\n       return 0;\n-    case LTU: case GTU:\n-      inmode = GET_MODE (XEXP (op, 0));\n-      return inmode == CCmode;\n-    case LEU: case ORDERED: case UNORDERED: case GEU:\n+    case LTU: case GTU: case LEU: case ORDERED: case UNORDERED: case GEU:\n       inmode = GET_MODE (XEXP (op, 0));\n-      if (inmode == CCmode || inmode == CCRCmode)\n+      if (inmode == CCmode)\n \treturn 1;\n       return 0;\n     case GT: case LE:\n       inmode = GET_MODE (XEXP (op, 0));\n-      if (inmode == CCmode || inmode == CCGCmode || inmode == CCNOmode\n-\t  || inmode == CCRCmode)\n+      if (inmode == CCmode || inmode == CCGCmode || inmode == CCNOmode)\n \treturn 1;\n       return 0;\n     default:\n@@ -3112,22 +3108,21 @@ put_condition_code (code, mode, reverse, fp, file)\n       suffix = \"ne\";\n       break;\n     case GT:\n-      if (mode != CCmode && mode != CCNOmode && mode != CCGCmode\n-\t  && mode != CCRCmode)\n+      if (mode != CCmode && mode != CCNOmode && mode != CCGCmode)\n \tabort ();\n       suffix = \"g\";\n       break;\n     case GTU:\n       /* ??? Use \"nbe\" instead of \"a\" for fcmov losage on some assemblers.\n \t Those same assemblers have the same but opposite losage on cmov.  */\n-      if (mode != CCmode && mode != CCRCmode)\n+      if (mode != CCmode)\n \tabort ();\n       suffix = fp ? \"nbe\" : \"a\";\n       break;\n     case LT:\n       if (mode == CCNOmode || mode == CCGOCmode)\n \tsuffix = \"s\";\n-      else if (mode == CCmode || mode == CCGCmode || mode == CCRCmode)\n+      else if (mode == CCmode || mode == CCGCmode)\n \tsuffix = \"l\";\n       else\n \tabort ();\n@@ -3140,33 +3135,26 @@ put_condition_code (code, mode, reverse, fp, file)\n     case GE:\n       if (mode == CCNOmode || mode == CCGOCmode)\n \tsuffix = \"ns\";\n-      else if (mode == CCmode || mode == CCGCmode || mode == CCRCmode)\n+      else if (mode == CCmode || mode == CCGCmode)\n \tsuffix = \"ge\";\n       else\n \tabort ();\n       break;\n     case GEU:\n       /* ??? As above.  */\n-      if (mode != CCmode && mode != CCRCmode)\n+      if (mode != CCmode)\n \tabort ();\n-      if (mode == CCRCmode)\n-\tsuffix = \"be\";\n-      else\n-\tsuffix = fp ? \"nb\" : \"ae\";\n+      suffix = fp ? \"nb\" : \"ae\";\n       break;\n     case LE:\n-      if (mode != CCmode && mode != CCGCmode && mode != CCNOmode\n-\t  && mode != CCRCmode)\n+      if (mode != CCmode && mode != CCGCmode && mode != CCNOmode)\n \tabort ();\n       suffix = \"le\";\n       break;\n     case LEU:\n       if (mode != CCmode)\n \tabort ();\n-      if (mode == CCRCmode)\n-\tsuffix = fp ? \"nb\" : \"ae\";\n-      else\n-        suffix = \"be\";\n+      suffix = \"be\";\n       break;\n     case UNORDERED:\n       suffix = \"p\";\n@@ -4594,13 +4582,6 @@ ix86_match_ccmode (insn, req_mode)\n \treturn 0;\n       break;\n     case CCmode:\n-      if (req_mode == CCRCmode)\n-\treturn 0;\n-      goto no_carry;\n-    case CCRCmode:\n-      if (req_mode == CCmode)\n-\treturn 0;\n-    no_carry:\n       if (req_mode == CCGCmode)\n \treturn 0;\n       /* FALLTHRU */\n@@ -4732,18 +4713,15 @@ ix86_cc_mode (code, op0, op1)\n     case NE:\t\t\t/* ZF!=0 */\n       return CCZmode;\n       /* Codes needing carry flag.  */\n-    case LTU:\t\t\t/* CF=1 */\n-    case LEU:\t\t\t/* CF=1 | ZF=1 */\n-      return CCmode;\n     case GEU:\t\t\t/* CF=0 */\n     case GTU:\t\t\t/* CF=0 & ZF=0 */\n-      if (GET_CODE (op1) == NEG)\n-\treturn CCRCmode;\n+    case LTU:\t\t\t/* CF=1 */\n+    case LEU:\t\t\t/* CF=1 | ZF=1 */\n       return CCmode;\n       /* Codes possibly doable only with sign flag when\n          comparing against zero.  */\n     case GE:\t\t\t/* SF=OF   or   SF=0 */\n-    case LT:\t\t\t/* SF<>OF  or   SF=0 */\n+    case LT:\t\t\t/* SF<>OF  or   SF=1 */\n       if (op1 == const0_rtx)\n \treturn CCGOCmode;\n       else\n@@ -6197,8 +6175,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \n   /* Avoid branch in fixing the byte.  */\n   tmpreg = gen_lowpart (QImode, tmpreg);\n-  emit_insn (gen_addqi3_ccrc (tmpreg, tmpreg, tmpreg));\n-  emit_insn (gen_subsi3_carry_rc (out, out, GEN_INT (3)));\n+  emit_insn (gen_addqi3_cc (tmpreg, tmpreg, tmpreg));\n+  emit_insn (gen_subsi3_carry (out, out, GEN_INT (3)));\n \n   emit_label (end_0_label);\n }"}, {"sha": "7bc5f582b4e1cfdf9e4a941dc5b02091bc9983dc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "patch": "@@ -2478,8 +2478,8 @@ while (0)\n    equality comparisons are being done. \n    \n    Add CCNO to indicate comparisons against zero that requires\n-   No Overflow.  Sign bit test is used instead and thus\n-   can be used to form \"a&b>0\" type of tests.\n+   Overflow flag to be unset.  Sign bit test is used instead and\n+   thus can be used to form \"a&b>0\" type of tests.\n \n    Add CCGC to indicate comparisons agains zero that allows\n    unspecified garbage in the Carry flag.  This mode is used\n@@ -2490,14 +2490,10 @@ while (0)\n    mode is used to simulate comparisons of (a-b) and (a+b)\n    against zero using sub/cmp/add operations.\n \n-   Add CCZ to indicate that only the Zero flag is valid.  \n-\n-   Add CCRC to indicate that carry flag is valid, but reversed.\n-*/\n+   Add CCZ to indicate that only the Zero flag is valid.  */\n \n #define EXTRA_CC_MODES \\\n \tCC(CCGCmode, \"CCGC\") \\\n-\tCC(CCRCmode, \"CCRC\") \\\n \tCC(CCGOCmode, \"CCGOC\") \\\n \tCC(CCNOmode, \"CCNO\") \\\n \tCC(CCZmode, \"CCZ\") \\"}, {"sha": "9f662a390fe8b8cdaf7db4b9c8c477df71117a20", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 165, "deletions": 143, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e08e19030fe87f00af88372c2fea23c1b8f0ac1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7e08e19030fe87f00af88372c2fea23c1b8f0ac1", "patch": "@@ -71,6 +71,7 @@\n ;; 9  This is an `fnstsw' operation.\n ;; 10 This is a `sahf' operation.\n ;; 11 This is a `fstcw' operation\n+;; 12 This is behaviour of add when setting carry flag.\n \n ;; For SSE/MMX support:\n ;; 30 This is `fix', guaranteed to be truncating.\n@@ -3738,11 +3739,10 @@\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"reload_completed\"\n-  [(parallel [(set (reg:CCRC 17)\n-\t\t   (compare:CCRC (match_dup 1) (neg:SI (match_dup 2))))\n+  [(parallel [(set (reg:CC 17) (unspec:CC [(match_dup 1) (match_dup 2)] 12))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n-\t\t   (plus:SI (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n+\t\t   (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n \t\t\t\t     (match_dup 4))\n \t\t\t    (match_dup 5)))\n \t      (clobber (reg:CC 17))])]\n@@ -3763,18 +3763,25 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"ppro_uops\" \"few\")])\n \n-(define_insn \"*addsi3_carry_rc\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t  (plus:SI (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n-\t\t\t    (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\"))\n-\t\t   (match_operand:SI 2 \"general_operand\" \"ri,rm\")))\n-   (clobber (reg:CC 17))]\n+(define_insn \"*addsi3_cc\"\n+  [(set (reg:CC 17) (unspec:CC [(match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t        (match_operand:SI 2 \"general_operand\" \"ri,rm\")] 12))\n+   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n-  \"adc{l}\\\\t{%2, %0|%0, %2}\"\n+  \"add{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"ppro_uops\" \"few\")])\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"addqi3_cc\"\n+  [(set (reg:CC 17) (unspec:CC [(match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t        (match_operand:QI 2 \"general_operand\" \"qi,qm\")] 12))\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n+\t(plus:QI (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+  \"add{b}\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n \n (define_expand \"addsi3\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n@@ -4020,10 +4027,10 @@\n \n (define_insn \"*addsi_3\"\n   [(set (reg 17)\n-\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))))\n+\t(compare (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))\n+\t\t (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGCmode)\n+  \"ix86_match_ccmode (insn, CCZmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n@@ -4064,36 +4071,53 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"SI\")])\n \n+; For comparisons agains 1, -1 and 128, we may generate better code\n+; by converting cmp to add, inc or dec as done by peephole2.  This pattern\n+; is matched then.  We can't accept general immediate, because for\n+; case of overflows,  the result is messed up.\n+; This pattern also don't hold of 0x80000000, since the value overflows\n+; when negated.\n+; Also carry flag is reversed compared to cmp, so this converison is valid\n+; only for comparisons not depending on it.\n (define_insn \"*addsi_4\"\n   [(set (reg 17)\n-\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, SImode, operands)\n-   && ix86_match_ccmode (insn, CCRCmode)\n-   /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n-   && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n-  \"add{l}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n+\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))\n+   (clobber (match_scratch:SI 0 \"=rm\"))]\n+  \"ix86_match_ccmode (insn, CCGCmode)\n+   && (INTVAL (operands[2]) & 0xffffffff) != 0x80000000\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (operands[2] == constm1_rtx)\n+        return \\\"inc{l}\\\\t%0\\\";\n+      else if (operands[2] == const1_rtx)\n+        return \\\"dec{l}\\\\t%0\\\";\n+      else\n+\tabort();\n \n-(define_insn \"*addsi_5\"\n-  [(set (reg 17)\n-\t(compare (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (neg:SI (match_operand:SI 2 \"general_operand\" \"rmni\"))))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"(GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n-   && ix86_match_ccmode (insn, CCRCmode)\n-   /* Current assemblers are broken and do not allow @GOTOFF in\n-      ought but a memory context. */\n-   && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n-  \"add{l}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+    default:\n+      if (! rtx_equal_p (operands[0], operands[1]))\n+\tabort ();\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n+\t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n+      if ((INTVAL (operands[2]) == -128\n+\t   || (INTVAL (operands[2]) > 0\n+\t       && INTVAL (operands[2]) != 128)))\n+\treturn \\\"sub{l}\\\\t{%2, %0|%0, %2}\\\";\n+      operands[2] = GEN_INT (-INTVAL (operands[2]));\n+      return \\\"add{l}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:SI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*addsi_6\"\n+(define_insn \"*addsi_5\"\n   [(set (reg 17)\n \t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n@@ -4282,10 +4306,10 @@\n \n (define_insn \"*addhi_3\"\n   [(set (reg 17)\n-\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))))\n+\t(compare (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))\n+\t\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGCmode)\n+  \"ix86_match_ccmode (insn, CCZmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"*\n {\n@@ -4320,30 +4344,49 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"HI\")])\n \n+; See comments above addsi_3_imm for details.\n (define_insn \"*addhi_4\"\n   [(set (reg 17)\n-\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n-\t(plus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCRCmode)\n-   && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n-  \"add{w}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"HI\")])\n+\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+   (clobber (match_scratch:HI 0 \"=rm\"))]\n+  \"ix86_match_ccmode (insn, CCGCmode)\n+   && (INTVAL (operands[2]) & 0xffff) != 0x8000\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (operands[2] == constm1_rtx\n+\t  || (GET_CODE (operands[2]) == CONST_INT\n+\t      && INTVAL (operands[2]) == 65535))\n+        return \\\"inc{w}\\\\t%0\\\";\n+      else if (operands[2] == const1_rtx)\n+        return \\\"dec{w}\\\\t%0\\\";\n+      else\n+\tabort();\n+\n+    default:\n+      if (! rtx_equal_p (operands[0], operands[1]))\n+\tabort ();\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n+\t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n+      if ((INTVAL (operands[2]) == -128\n+\t   || (INTVAL (operands[2]) > 0\n+\t       && INTVAL (operands[2]) != 128)))\n+\treturn \\\"sub{w}\\\\t{%2, %0|%0, %2}\\\";\n+      operands[2] = GEN_INT (-INTVAL (operands[2]));\n+      return \\\"add{w}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*addhi_5\"\n-  [(set (reg 17)\n-\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (neg:HI (match_operand:HI 2 \"general_operand\" \"rmni\"))))\n-   (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCRCmode)\n-   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  \"add{w}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"*addhi_6\"\n+(define_insn \"*addhi_5\"\n   [(set (reg 17)\n \t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0\")\n@@ -4534,10 +4577,10 @@\n \n (define_insn \"*addqi_3\"\n   [(set (reg 17)\n-\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))))\n-   (clobber (match_scratch:QI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCGCmode)\n+\t(compare (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))\n+\t\t (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")))\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n+  \"ix86_match_ccmode (insn, CCZmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"*\n {\n@@ -4569,45 +4612,53 @@\n \t(const_string \"alu\")))\n    (set_attr \"mode\" \"QI\")])\n \n+; See comments above addsi_3_imm for details.\n (define_insn \"*addqi_4\"\n   [(set (reg 17)\n-\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n-\t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCRCmode)\n-   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n-  \"add{b}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t (match_operand:QI 2 \"const_int_operand\" \"n\")))\n+   (clobber (match_scratch:QI 0 \"=qm\"))]\n+  \"ix86_match_ccmode (insn, CCGCmode)\n+   && (INTVAL (operands[2]) & 0xff) != 0x80\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_INCDEC:\n+      if (operands[2] == constm1_rtx\n+\t  || (GET_CODE (operands[2]) == CONST_INT\n+\t      && INTVAL (operands[2]) == 255))\n+        return \\\"inc{b}\\\\t%0\\\";\n+      else if (operands[2] == const1_rtx)\n+        return \\\"dec{b}\\\\t%0\\\";\n+      else\n+\tabort();\n+\n+    default:\n+      if (! rtx_equal_p (operands[0], operands[1]))\n+\tabort ();\n+      if (INTVAL (operands[2]) < 0)\n+        {\n+          operands[2] = GEN_INT (-INTVAL (operands[2]));\n+          return \\\"add{b}\\\\t{%2, %0|%0, %2}\\\";\n+        }\n+      return \\\"sub{b}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n+\t(const_string \"incdec\")\n+\t(const_string \"alu\")))\n    (set_attr \"mode\" \"QI\")])\n \n-(define_expand \"addqi3_ccrc\"\n-  [(parallel [\n-     (set (reg:CCRC 17)\n-\t  (compare:CCRC (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n-\t\t        (neg:QI (match_operand:QI 2 \"general_operand\" \"\"))))\n-     (clobber (match_scratch:QI 0 \"\"))])]\n-  \"\"\n-  \"\")\n \n (define_insn \"*addqi_5\"\n-  [(set (reg 17)\n-\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (neg:QI (match_operand:QI 2 \"general_operand\" \"qmni\"))))\n-   (clobber (match_scratch:QI 0 \"=r\"))]\n-  \"ix86_match_ccmode (insn, CCRCmode)\n-   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  \"add{b}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*addqi_6\"\n   [(set (reg 17)\n \t(compare\n \t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"qmni\"))\n \t  (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=r\"))]\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"*\n@@ -4748,7 +4799,7 @@\n    split_di (operands+1, 1, operands+1, operands+4);\n    split_di (operands+2, 1, operands+2, operands+5);\")\n \n-(define_insn \"*subsi3_carry\"\n+(define_insn \"subsi3_carry\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n \t    (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n@@ -4761,19 +4812,6 @@\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"subsi3_carry_rc\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t    (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n-\t       (match_operand:SI 2 \"general_operand\" \"ri,rm\"))))\n-   (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n-  \"sbb{l}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"ppro_uops\" \"few\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_expand \"subsi3\"\n   [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t   (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -5933,7 +5971,7 @@\n \t(compare (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"qim\"))\n \t\t (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=r\"))]\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"or{b}\\\\t{%2, %0|%0, %2}\"\n@@ -6092,7 +6130,7 @@\n \t  (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"qim\"))\n \t  (const_int 0)))\n-   (clobber (match_scratch:QI 0 \"=r\"))]\n+   (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"xor{b}\\\\t{%2, %0|%0, %2}\"\n@@ -6169,7 +6207,7 @@\n      (set (match_dup 0) (neg:SI (match_dup 2)))])\n    (parallel\n     [(set (match_dup 1)\n-\t  (plus:SI (plus:SI (gtu:SI (reg:CCRC 17) (const_int 0))\n+\t  (plus:SI (plus:SI (ltu:SI (reg:CC 17) (const_int 0))\n \t\t\t    (match_dup 3))\n \t\t   (const_int 0)))\n      (clobber (reg:CC 17))])\n@@ -10603,22 +10641,6 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"0\")])\n \n-(define_insn \"x86_movsicc_0_m1_rc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else:SI (gtu (reg:CCRC 17) (const_int 0))\n-\t  (const_int -1)\n-\t  (const_int 0)))\n-   (clobber (reg:CC 17))]\n-  \"\"\n-  \"sbb{l}\\\\t%0, %0\"\n-  ; Since we don't have the proper number of operands for an alu insn,\n-  ; fill in all the blanks.\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"memory\" \"none\")\n-   (set_attr \"imm_disp\" \"false\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"length_immediate\" \"0\")])\n-\n (define_insn \"*movsicc_noc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\" \n@@ -11457,9 +11479,9 @@\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCGC 17)\n \t\t   (compare:CCGC (match_dup 0)\n-\t\t\t\t (neg:SI (match_dup 1))))\n+\t\t\t\t (match_dup 1)))\n \t      (clobber (match_dup 0))])]\n-  \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n+  \"\")\n \n (define_peephole2\n   [(set (reg 17)\n@@ -11469,9 +11491,9 @@\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCGC 17)\n \t\t   (compare:CCGC (match_dup 0)\n-\t\t\t\t (neg:HI (match_dup 1))))\n+\t\t\t\t (match_dup 1)))\n \t      (clobber (match_dup 0))])]\n-  \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n+  \"\")\n \n (define_peephole2\n   [(set (reg 17)\n@@ -11481,32 +11503,32 @@\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCGC 17)\n \t\t   (compare:CCGC (match_dup 0)\n-\t\t\t\t (neg:QI (match_dup 1))))\n+\t\t\t\t (match_dup 1)))\n \t      (clobber (match_dup 0))])]\n-  \"operands[1] = (operands[1] == const1_rtx) ? constm1_rtx : const1_rtx;\")\n+  \"\")\n \n ;; Convert compares with 128 to shorter add -128\n (define_peephole2\n   [(set (reg 17)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (const_int 128)))]\n-  \"ix86_match_ccmode (insn, CCRCmode)\n+  \"ix86_match_ccmode (insn, CCGCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n-  [(parallel [(set (reg:CCRC 17)\n-\t\t   (compare:CCRC (match_dup 0)\n-\t\t\t         (neg:SI (const_int -128))))\n+  [(parallel [(set (reg:CCGC 17)\n+\t\t   (compare:CCGC (match_dup 0)\n+\t\t\t         (const_int 128)))\n \t      (clobber (match_dup 0))])]\n   \"\")\n \n (define_peephole2\n   [(set (reg 17)\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n \t\t (const_int 128)))]\n-  \"ix86_match_ccmode (insn, CCRCmode)\n+  \"ix86_match_ccmode (insn, CCGCmode)\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n-  [(parallel [(set (reg:CCRC 17)\n-\t\t   (compare:CCRC (match_dup 0)\n-\t\t\t         (neg:HI (const_int -128))))\n+  [(parallel [(set (reg:CCGC 17)\n+\t\t   (compare:CCGC (match_dup 0)\n+\t\t\t         (const_int 128)))\n \t      (clobber (match_dup 0))])]\n   \"\")\n \f"}]}