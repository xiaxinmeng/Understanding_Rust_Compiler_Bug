{"sha": "191b18e9de50031b9b526079cd025f9755357f01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxYjE4ZTlkZTUwMDMxYjliNTI2MDc5Y2QwMjVmOTc1NTM1N2YwMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-23T23:26:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-23T23:26:34Z"}, "message": "(find_reloads_address): Properly check for constant address.\n\nFrom-SVN: r2220", "tree": {"sha": "6d6241b154ef88e56155dad923f5c591787e3199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d6241b154ef88e56155dad923f5c591787e3199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191b18e9de50031b9b526079cd025f9755357f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191b18e9de50031b9b526079cd025f9755357f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191b18e9de50031b9b526079cd025f9755357f01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191b18e9de50031b9b526079cd025f9755357f01/comments", "author": null, "committer": null, "parents": [{"sha": "f12564b4c0bfb9a6c7ed634e5713631be4c15d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12564b4c0bfb9a6c7ed634e5713631be4c15d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12564b4c0bfb9a6c7ed634e5713631be4c15d63"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "b5f844ba3fa48fb104c6bca769df67e2bf698da7", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191b18e9de50031b9b526079cd025f9755357f01/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191b18e9de50031b9b526079cd025f9755357f01/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=191b18e9de50031b9b526079cd025f9755357f01", "patch": "@@ -3775,7 +3775,7 @@ find_reloads_address (mode, memrefloc, ad, loc, operand, ind_levels)\n \n   /* If constants aren't valid addresses, reload the constant address\n      into a register.  */\n-  if (CONSTANT_ADDRESS_P (ad) && ! strict_memory_address_p (mode, ad))\n+  if (CONSTANT_P (ad) && ! strict_memory_address_p (mode, ad))\n     {\n       /* If AD is in address in the constant pool, the MEM rtx may be shared.\n \t Unshare it so we can safely alter it.  */"}]}