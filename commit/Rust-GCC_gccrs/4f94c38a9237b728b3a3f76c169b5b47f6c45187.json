{"sha": "4f94c38a9237b728b3a3f76c169b5b47f6c45187", "node_id": "C_kwDOANBUbNoAKDRmOTRjMzhhOTIzN2I3MjhiM2EzZjc2YzE2OWI1YjQ3ZjZjNDUxODc", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-05-17T09:01:04Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-05-17T09:01:04Z"}, "message": "OpenMP: Add omp_all_memory support to Fortran\n\nFortran part to the C/C++/backend implementation\nr13-337-g7f78783dbedca0183d193e475262ca3c489fd365\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.cc (show_omp_namelist): Handle omp_all_memory.\n\t* openmp.cc (gfc_match_omp_variable_list, gfc_match_omp_depend_sink,\n\tgfc_match_omp_clauses, resolve_omp_clauses): Likewise.\n\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):\n\tLikewise.\n\t* resolve.cc (resolve_symbol): Reject it as symbol.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi (OpenMP 5.1): Set omp_all_memory to 'Y'.\n\t* testsuite/libgomp.fortran/depend-5.f90: New test.\n\t* testsuite/libgomp.fortran/depend-6.f90: New test.\n\t* testsuite/libgomp.fortran/depend-7.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/all-memory-1.f90: New test.\n\t* gfortran.dg/gomp/all-memory-2.f90: New test.\n\t* gfortran.dg/gomp/all-memory-3.f90: New test.", "tree": {"sha": "2ec7b560f303f268bb602613d6ea0d3eff96e428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ec7b560f303f268bb602613d6ea0d3eff96e428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f94c38a9237b728b3a3f76c169b5b47f6c45187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f94c38a9237b728b3a3f76c169b5b47f6c45187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f94c38a9237b728b3a3f76c169b5b47f6c45187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f94c38a9237b728b3a3f76c169b5b47f6c45187/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebce0e9bd8d714a8607ae24331a3d842b0d11859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebce0e9bd8d714a8607ae24331a3d842b0d11859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebce0e9bd8d714a8607ae24331a3d842b0d11859"}], "stats": {"total": 589, "additions": 567, "deletions": 22}, "files": [{"sha": "a32992035a277fce04a2d9776426efd972165994", "filename": "gcc/fortran/dump-parse-tree.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Fdump-parse-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Fdump-parse-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.cc?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -1423,7 +1423,7 @@ show_omp_namelist (int list_type, gfc_omp_namelist *n)\n \t  case OMP_LINEAR_UVAL: fputs (\"uval(\", dumpfile); break;\n \t  default: break;\n \t  }\n-      fprintf (dumpfile, \"%s\", n->sym->name);\n+      fprintf (dumpfile, \"%s\", n->sym ? n->sym->name : \"omp_all_memory\");\n       if (list_type == OMP_LIST_LINEAR && n->u.linear_op != OMP_LINEAR_DEFAULT)\n \tfputc (')', dumpfile);\n       if (n->expr)"}, {"sha": "3061e5297b735253e8a85195da13d70bd5f29dc5", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -296,14 +296,17 @@ gfc_find_omp_udr (gfc_namespace *ns, const char *name, gfc_typespec *ts)\n }\n \n \n-/* Match a variable/common block list and construct a namelist from it.  */\n+/* Match a variable/common block list and construct a namelist from it;\n+   if has_all_memory != NULL, *has_all_memory is set and omp_all_memory\n+   yields a list->sym NULL entry. */\n \n static match\n gfc_match_omp_variable_list (const char *str, gfc_omp_namelist **list,\n \t\t\t     bool allow_common, bool *end_colon = NULL,\n \t\t\t     gfc_omp_namelist ***headp = NULL,\n \t\t\t     bool allow_sections = false,\n-\t\t\t     bool allow_derived = false)\n+\t\t\t     bool allow_derived = false,\n+\t\t\t     bool *has_all_memory = NULL)\n {\n   gfc_omp_namelist *head, *tail, *p;\n   locus old_loc, cur_loc;\n@@ -315,15 +318,44 @@ gfc_match_omp_variable_list (const char *str, gfc_omp_namelist **list,\n   head = tail = NULL;\n \n   old_loc = gfc_current_locus;\n-\n+  if (has_all_memory)\n+    *has_all_memory = false;\n   m = gfc_match (str);\n   if (m != MATCH_YES)\n     return m;\n \n   for (;;)\n     {\n       cur_loc = gfc_current_locus;\n-      m = gfc_match_symbol (&sym, 1);\n+\n+      m = gfc_match_name (n);\n+      if (m == MATCH_YES && strcmp (n, \"omp_all_memory\") == 0)\n+\t{\n+\t  if (!has_all_memory)\n+\t    {\n+\t      gfc_error (\"%<omp_all_memory%> at %C not permitted in this \"\n+\t\t\t \"clause\");\n+\t      goto cleanup;\n+\t    }\n+\t  *has_all_memory = true;\n+\t  p = gfc_get_omp_namelist ();\n+\t  if (head == NULL)\n+\t    head = tail = p;\n+\t  else\n+\t    {\n+\t      tail->next = p;\n+\t      tail = tail->next;\n+\t    }\n+\t  tail->where = cur_loc;\n+\t  goto next_item;\n+\t}\n+      if (m == MATCH_YES)\n+\t{\n+\t  gfc_symtree *st;\n+\t  if ((m = gfc_get_ha_sym_tree (n, &st) ? MATCH_ERROR : MATCH_YES)\n+\t      == MATCH_YES)\n+\t    sym = st->n.sym;\n+\t}\n       switch (m)\n \t{\n \tcase MATCH_YES:\n@@ -578,6 +610,12 @@ gfc_match_omp_depend_sink (gfc_omp_namelist **list)\n \t  tail->sym = sym;\n \t  tail->expr = NULL;\n \t  tail->where = cur_loc;\n+\t  if (UNLIKELY (strcmp (sym->name, \"omp_all_memory\") == 0))\n+\t    {\n+\t      gfc_error (\"%<omp_all_memory%> used with DEPEND kind \"\n+\t\t\t \"other than OUT or INOUT at %C\");\n+\t      goto cleanup;\n+\t    }\n \t  if (gfc_match_char ('+') == MATCH_YES)\n \t    {\n \t      if (gfc_match_literal_constant (&tail->expr, 0) != MATCH_YES)\n@@ -1868,6 +1906,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_DEPEND)\n \t      && gfc_match (\"depend ( \") == MATCH_YES)\n \t    {\n+\t      bool has_omp_all_memory;\n \t      gfc_namespace *ns_iter = NULL, *ns_curr = gfc_current_ns;\n \t      match m_it = gfc_match_iterator (&ns_iter, false);\n \t      if (m_it == MATCH_ERROR)\n@@ -1920,21 +1959,27 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      if (m == MATCH_YES)\n \t\tm = gfc_match_omp_variable_list (\" : \",\n \t\t\t\t\t\t &c->lists[OMP_LIST_DEPEND],\n-\t\t\t\t\t\t false, NULL, &head, true);\n+\t\t\t\t\t\t false, NULL, &head, true,\n+\t\t\t\t\t\t false, &has_omp_all_memory);\n+\t      if (m != MATCH_YES)\n+\t\tgoto error;\n \t      gfc_current_ns = ns_curr;\n-\t      if (m == MATCH_YES)\n+\t      if (has_omp_all_memory && depend_op != OMP_DEPEND_INOUT\n+\t\t  && depend_op != OMP_DEPEND_OUT)\n \t\t{\n-\t\t  gfc_omp_namelist *n;\n-\t\t  for (n = *head; n; n = n->next)\n-\t\t    {\n-\t\t      n->u.depend_op = depend_op;\n-\t\t      n->u2.ns = ns_iter;\n-\t\t      if (ns_iter)\n-\t\t\tns_iter->refs++;\n-\t\t    }\n-\t\t  continue;\n+\t\t  gfc_error (\"%<omp_all_memory%> used with DEPEND kind \"\n+\t\t\t     \"other than OUT or INOUT at %C\");\n+\t\t  goto error;\n \t\t}\n-\t      break;\n+\t      gfc_omp_namelist *n;\n+\t      for (n = *head; n; n = n->next)\n+\t\t{\n+\t\t  n->u.depend_op = depend_op;\n+\t\t  n->u2.ns = ns_iter;\n+\t\t  if (ns_iter)\n+\t\t    ns_iter->refs++;\n+\t\t}\n+\t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_DETACH)\n \t      && !openacc\n@@ -6490,6 +6535,8 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   for (list = 0; list < OMP_LIST_NUM; list++)\n     for (n = omp_clauses->lists[list]; n; n = n->next)\n       {\n+\tif (!n->sym)  /* omp_all_memory.  */\n+\t  continue;\n \tn->sym->mark = 0;\n \tn->sym->comp_mark = 0;\n \tif (n->sym->attr.flavor == FL_VARIABLE"}, {"sha": "2ebf076f7304130236fc0459944d572043df36c3", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -15505,6 +15505,13 @@ resolve_symbol (gfc_symbol *sym)\n   if (sym->attr.unlimited_polymorphic)\n     return;\n \n+  if (UNLIKELY (flag_openmp && strcmp (sym->name, \"omp_all_memory\") == 0))\n+    {\n+      gfc_error (\"%<omp_all_memory%>, declared at %L, may only be used in \"\n+\t\t \"the OpenMP DEPEND clause\", &sym->declared_at);\n+      return;\n+    }\n+\n   if (sym->attr.flavor == FL_UNKNOWN\n       || (sym->attr.flavor == FL_PROCEDURE && !sym->attr.intrinsic\n \t  && !sym->attr.generic && !sym->attr.external"}, {"sha": "7633aee755c4059d19f4e63bbfca1b1eb9d7b20b", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -2880,14 +2880,16 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  continue;\n \t\t}\n \n-\t      if (!n->sym->attr.referenced)\n+\t      if (n->sym && !n->sym->attr.referenced)\n \t\tcontinue;\n \n \t      tree node = build_omp_clause (input_location,\n \t\t\t\t\t    list == OMP_LIST_DEPEND\n \t\t\t\t\t    ? OMP_CLAUSE_DEPEND\n \t\t\t\t\t    : OMP_CLAUSE_AFFINITY);\n-\t      if (n->expr == NULL || n->expr->ref->u.ar.type == AR_FULL)\n+\t      if (n->sym == NULL)  /* omp_all_memory  */\n+\t\tOMP_CLAUSE_DECL (node) = null_pointer_node;\n+\t      else if (n->expr == NULL || n->expr->ref->u.ar.type == AR_FULL)\n \t\t{\n \t\t  tree decl = gfc_trans_omp_variable (n->sym, false);\n \t\t  if (gfc_omp_privatize_by_reference (decl))\n@@ -5531,7 +5533,9 @@ gfc_trans_omp_depobj (gfc_code *code)\n   if (n)\n     {\n       tree var;\n-      if (n->expr && n->expr->ref->u.ar.type != AR_FULL)\n+      if (!n->sym)  /* omp_all_memory.  */\n+\tvar = null_pointer_node;\n+      else if (n->expr && n->expr->ref->u.ar.type != AR_FULL)\n \t{\n \t  gfc_init_se (&se, NULL);\n \t  if (n->expr->ref->u.ar.type == AR_ELEMENT)"}, {"sha": "6d56473b1f391781590d98b0e814e96a98c0334d", "filename": "gcc/testsuite/gfortran.dg/gomp/all-memory-1.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-1.f90?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -0,0 +1,51 @@\n+module m\n+ integer :: omp_all_memory  ! { dg-error \"'omp_all_memory', declared at .1., may only be used in the OpenMP DEPEND clause\" }\n+end module m\n+\n+subroutine f1\n+  integer :: omp_all_memory  ! { dg-error \"'omp_all_memory', declared at .1., may only be used in the OpenMP DEPEND clause\" }\n+  !$omp target depend(out: omp_all_memory)\n+  !$omp end target\n+end\n+\n+subroutine f2\n+  dimension :: omp_all_memory(5)  ! { dg-error \"'omp_all_memory', declared at .1., may only be used in the OpenMP DEPEND clause\" }\n+  !$omp target depend(out: omp_all_memory)\n+  !$omp end target\n+end\n+\n+subroutine f3\n+  integer :: A\n+  !$omp target depend(out: omp_all_memory)  ! OK\n+    omp_all_memory = 5  ! { dg-error \"'omp_all_memory', declared at .1., may only be used in the OpenMP DEPEND clause\" }\n+  !$omp end target\n+end\n+\n+subroutine f4\n+  !$omp target map(to: omp_all_memory)  ! { dg-error \"'omp_all_memory' at .1. not permitted in this clause\" }\n+  ! !$omp end target\n+\n+  !$omp task private (omp_all_memory)  ! { dg-error \"'omp_all_memory' at .1. not permitted in this clause\" }\n+  ! !$omp end task\n+end\n+\n+subroutine f5  ! OK\n+  !$omp target depend(inout : omp_all_memory )\n+  !$omp end target\n+\n+  !$omp target depend ( out : omp_all_memory)\n+  !$omp end target\n+end\n+\n+subroutine f6\n+  !$omp target depend(in : omp_all_memory )  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n+  ! !$omp end target\n+\n+  !$omp target depend(mutexinoutset : omp_all_memory )  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n+  ! !$omp end target\n+\n+  !$omp target depend ( depobj : omp_all_memory)  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n+  !!$omp end target\n+\n+  !$omp ordered depend ( sink : omp_all_memory)  ! { dg-error \"'omp_all_memory' used with DEPEND kind other than OUT or INOUT\" }\n+end"}, {"sha": "f7ee34fedc8ebecc3242e955bb819ba4e8c8f31e", "filename": "gcc/testsuite/gfortran.dg/gomp/all-memory-2.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-2.f90?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -0,0 +1,52 @@\n+! { dg-additional-options \"-fno-openmp\" }\n+module m\n+ integer :: omp_all_memory\n+end module m\n+\n+subroutine f1\n+  integer :: omp_all_memory\n+  !$omp target depend(out: omp_all_memory)\n+  !$omp end target\n+end\n+\n+subroutine f2\n+  dimension :: omp_all_memory(5)\n+  !$omp target depend(out: omp_all_memory)\n+  !$omp end target\n+end\n+\n+subroutine f3\n+  integer :: A\n+  !$omp target depend(out: omp_all_memory)\n+    omp_all_memory = 5\n+  !$omp end target\n+end\n+\n+subroutine f4\n+  !$omp target map(to: omp_all_memory)\n+  ! !$omp end target\n+\n+  !$omp task private (omp_all_memory)\n+  ! !$omp end task\n+end\n+\n+subroutine f5\n+  !$omp target depend(inout : omp_all_memory )\n+  !$omp end target\n+\n+  !$omp target depend ( out : omp_all_memory)\n+  !$omp end target\n+end\n+\n+subroutine f6\n+  !$omp target depend(in : omp_all_memory )\n+  ! !$omp end target\n+\n+  !$omp target depend(mutexinoutset : omp_all_memory )\n+  ! !$omp end target\n+\n+ !$omp target depend ( depobj : omp_all_memory)\n+ !$omp end target\n+\n+ !$omp ordered depend ( sink : omp_all_memory)\n+end"}, {"sha": "dc95e086ee6a08fa624c33f259cb4c5eb7d0e796", "filename": "gcc/testsuite/gfortran.dg/gomp/all-memory-3.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fall-memory-3.f90?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -0,0 +1,24 @@\n+module m\n+  use iso_c_binding\n+  implicit none\n+  integer, parameter :: omp_depend_kind = 2*c_size_t\n+\n+  integer(omp_depend_kind) :: z\n+contains\n+\n+subroutine foo\n+  integer :: x, y\n+  x = 0; y = 0\n+  !$omp task depend(out: omp_all_memory)\n+    block; end block\n+  !$omp task depend(inout: omp_all_memory)\n+    block; end block\n+  !$omp task depend(out: x, omp_all_memory, y)\n+    block; end block\n+  !$omp task depend(inout: omp_all_memory, y)\n+    block; end block\n+  !$omp task depend(out: x, omp_all_memory)\n+    block; end block\n+  !$omp depobj (z) depend (inout: omp_all_memory)\n+end\n+end"}, {"sha": "d9d86f36a50cd7cb75d01ad23437e5f62aeb78ed", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -274,7 +274,7 @@ The OpenMP 4.5 specification is fully supported.\n @multitable @columnfractions .60 .10 .25\n @headitem Description @tab Status @tab Comments\n @item OpenMP directive as C++ attribute specifiers @tab Y @tab\n-@item @code{omp_all_memory} reserved locator @tab N @tab\n+@item @code{omp_all_memory} reserved locator @tab Y @tab\n @item @emph{target_device trait} in OpenMP Context @tab N @tab\n @item @code{target_device} selector set in context selectors @tab N @tab\n @item C/C++'s @code{declare variant} directive: elision support of\n@@ -283,7 +283,7 @@ The OpenMP 4.5 specification is fully supported.\n       @code{append_args} @tab N @tab\n @item @code{dispatch} construct @tab N @tab\n @item device-specific ICV settings the environment variables @tab N @tab\n-@item assume directive @tab N @tab\n+@item @code{assume} directive @tab N @tab\n @item @code{nothing} directive @tab Y @tab\n @item @code{error} directive @tab Y @tab\n @item @code{masked} construct @tab Y @tab"}, {"sha": "a350e793623bb5ce240b74748a59552e8334689e", "filename": "libgomp/testsuite/libgomp.fortran/depend-5.f90", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-5.f90?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -0,0 +1,121 @@\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+\n+module m\n+  implicit none\n+\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+contains\n+subroutine test (ifval)\n+  logical, value :: ifval\n+  integer :: a(0:7), b(0:7), i\n+\n+  do i = 0, 7\n+    a(i) = i\n+    b(i) = 2 * i\n+  end do\n+  !$omp parallel\n+  block\n+   !$omp single\n+   block\n+    !$omp task shared(a) depend(in: a(0))\n+    block\n+      call usleep (5000)\n+      a(0) = 42\n+    end block\n+    !$omp task shared(a) depend(out: a(1))\n+    block\n+      call usleep (5000)\n+      a(1) = 43\n+    end block\n+    !$omp task shared(a) depend(inout: a(2))\n+    block\n+      call usleep (5000)\n+      a(2) = 44\n+    end block\n+    !$omp task shared(a) depend(mutexinoutset: a(3))\n+    block\n+      call usleep (5000)\n+      a(3) = 45\n+    end block\n+    !$omp task shared(a)\n+    block\n+      call usleep (15000)\n+      a(4) = 46\n+    end block\n+    !$omp task shared(b) depend(in: b(0))\n+    block\n+      call usleep (5000)\n+      b(0) = 47\n+    end block\n+    !$omp task shared(b) depend(in: b(4))\n+    block\n+      call usleep (5000)\n+      b(4) = 48\n+    end block\n+    ! None of the above tasks depend on each other.\n+    ! The following task depends on all but the a(4) = 46; one.\n+    !$omp task shared(a, b) depend(out: omp_all_memory) private(i) if(ifval)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45       &\n+          .or. a(5) /= 5 .or. a(6) /= 6 .or. a(7) /= 7                     &\n+          .or. b(0) /= 47 .or. b(1) /= 2 .or. b(2) /= 4 .or. b(3) /= 6     &\n+          .or. b(4) /= 48 .or. b(5) /= 10 .or. b(6) /= 12 .or. b(7) /= 14) &\n+        error stop\n+      do i = 0, 7\n+        if (i /= 4) &\n+          a(i) = 3 * i + 7\n+      end do\n+      do i = 0, 7\n+        b(i) = 4 * i - 7\n+      end do\n+    end block\n+    ! The following task depends on both b(0) = 47; and\n+    ! above omp_all_memory tasks, but as the latter depends on\n+    ! the former, effectively it is dependent just on the omp_all_memory\n+    ! task.\n+    !$omp task shared(b) depend(inout: b(0))\n+    block\n+      call usleep (5000)\n+      b(0) = 49\n+    end block\n+    ! The following task depends on all the above except a(4) = 46; one,\n+    ! but it can be reduced to dependency on the above omp_all_memory\n+    ! one and b(0) = 49; one.\n+    !$omp task shared(a, b) depend(inout: b(7), omp_all_memory, b(6)) &\n+    !$omp&     private(i) if(ifval)\n+    block\n+      do i = 0, 7\n+        if (i /= 4) then\n+            if (a(i) /= 3 * i + 7) &\n+              error stop\n+            a(i) = 5 * i + 50\n+        end if\n+      end do\n+      if (b(0) /= 49) &\n+        error stop\n+      b(0) = 6 * i + 57\n+      do i = 1, 7\n+        if (b(i) /= 4 * i - 7) &\n+          error stop\n+        b(i) = 6 * i + 57\n+      end do\n+    end block\n+    !$omp taskwait\n+    if (a(4) /= 46) &\n+      error stop\n+   end block   ! end single\n+  end block  ! end parallel\n+end\n+end module m\n+\n+use m\n+call test(.true.)\n+call test(.false.)\n+end"}, {"sha": "edea8571bba0d840f69a8598be0291dc59b543f7", "filename": "libgomp/testsuite/libgomp.fortran/depend-6.f90", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-6.f90?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -0,0 +1,126 @@\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+\n+module m\n+  use omp_lib\n+  implicit none\n+\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+contains\n+subroutine test (ifval)\n+  logical, value :: ifval\n+  integer :: a(0:7), b(0:7), i\n+  integer(omp_depend_kind) d1, d2\n+  !$omp depobj (d1) depend(inout: omp_all_memory) \n+  !$omp depobj (d2) depend(out: omp_all_memory)\n+  do i = 0, 7\n+    a(i) = i\n+    b(i) = 2 * i\n+  end do\n+  !$omp parallel\n+  block\n+   !$omp single\n+   block\n+    !$omp task shared(a) depend(in: a(0))\n+    block\n+      call usleep (5000)\n+      a(0) = 42\n+    end block\n+    !$omp task shared(a) depend(out: a(1))\n+    block\n+      call usleep (5000)\n+      a(1) = 43\n+    end block\n+    !$omp task shared(a) depend(inout: a(2))\n+    block\n+      call usleep (5000)\n+      a(2) = 44\n+    end block\n+    !$omp task shared(a) depend(mutexinoutset: a(3))\n+    block\n+      call usleep (5000)\n+      a(3) = 45\n+    end block\n+    !$omp task shared(a)\n+    block\n+      call usleep (15000)\n+      a(4) = 46\n+    end block\n+    !$omp task shared(b) depend(in: b(0))\n+    block\n+      call usleep (5000)\n+      b(0) = 47\n+    end block\n+    !$omp task shared(b) depend(in: b(4))\n+    block\n+      call usleep (5000)\n+      b(4) = 48\n+    end block\n+    ! None of the above tasks depend on each other.\n+    ! The following task depends on all but the a(4) = 46; one.\n+    !$omp task shared(a, b) depend(depobj: d1) private(i) if(ifval)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45       &\n+          .or. a(5) /= 5 .or. a(6) /= 6 .or. a(7) /= 7                     &\n+          .or. b(0) /= 47 .or. b(1) /= 2 .or. b(2) /= 4 .or. b(3) /= 6     &\n+          .or. b(4) /= 48 .or. b(5) /= 10 .or. b(6) /= 12 .or. b(7) /= 14) &\n+        error stop\n+      do i = 0, 7\n+        if (i /= 4) &\n+          a(i) = 3 * i + 7\n+      end do\n+      do i = 0, 7\n+        b(i) = 4 * i - 7\n+      end do\n+    end block\n+    ! The following task depends on both b(0) = 47; and\n+    ! above omp_all_memory tasks, but as the latter depends on\n+    ! the former, effectively it is dependent just on the omp_all_memory\n+    ! task.\n+    !$omp task shared(b) depend(inout: b(0))\n+    block\n+      call usleep (5000)\n+      b(0) = 49\n+    end block\n+    ! The following task depends on all the above except a(4) = 46; one,\n+    ! but it can be reduced to dependency on the above omp_all_memory\n+    ! one and b(0) = 49; one.\n+    !$omp task shared(a, b) depend(inout: b(6)) depend(depobj: d2) &\n+    !$omp&     depend(out: b(7)) private(i) if(ifval)\n+    block\n+      do i = 0, 7\n+        if (i /= 4) then\n+          if (a(i) /= 3 * i + 7) &\n+            error stop\n+          a(i) = 5 * i + 50\n+        end if\n+      end do\n+      if (b(0) /= 49) &\n+        error stop\n+      b(0) = 6 * i + 57\n+      do i = 1, 7\n+        if (b(i) /= 4 * i - 7) &\n+          error stop\n+        b(i) = 6 * i + 57\n+      end do\n+    end block\n+    !$omp taskwait\n+    if (a(4) /= 46) &\n+      error stop\n+   end block\n+  end block\n+  !$omp depobj (d2) destroy\n+  !$omp depobj (d1) destroy\n+end\n+end module m\n+\n+use m\n+call test (.true.)\n+call test (.false.)\n+end"}, {"sha": "d3f3988f0da4ed0458a59e47d446beb48684a4b8", "filename": "libgomp/testsuite/libgomp.fortran/depend-7.f90", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f94c38a9237b728b3a3f76c169b5b47f6c45187/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-7.f90?ref=4f94c38a9237b728b3a3f76c169b5b47f6c45187", "patch": "@@ -0,0 +1,113 @@\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+\n+program main\n+  implicit none\n+\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+  integer :: a(0:7), b(0:7), i\n+\n+  do i = 0, 7\n+    a(i) = i\n+    b(i) = 2 * i\n+  end do\n+\n+  !$omp parallel\n+  block\n+   !$omp single\n+   block\n+    !$omp task shared(a) depend(in: a(0))\n+    block\n+      call usleep (5000)\n+      a(0) = 42\n+    end block\n+    !$omp task shared(a) depend(out: a(1))\n+    block\n+      call usleep (5000)\n+      a(1) = 43\n+    end block\n+    !$omp task shared(a) depend(inout: a(2))\n+    block\n+      call usleep (5000)\n+      a(2) = 44\n+    end block\n+    !$omp task shared(a) depend(mutexinoutset: a(3))\n+    block\n+      call usleep (5000)\n+      a(3) = 45\n+    end block\n+    !$omp task shared(a)\n+    block\n+      call usleep (15000)\n+      a(4) = 46\n+    end block\n+    !$omp task shared(b) depend(in: b(0))\n+    block\n+      call usleep (5000)\n+      b(0) = 47\n+    end block\n+    !$omp task shared(b) depend(in: b(4))\n+    block\n+      call usleep (5000)\n+      b(4) = 48\n+    end block\n+    ! None of the above tasks depend on each other.\n+    ! The following task depends on all but the a(4) = 46; one.\n+    !$omp task shared(a, b) depend(iterator (j=0:7), inout: omp_all_memory) private(i)\n+    block\n+      if (a(0) /= 42 .or. a(1) /= 43 .or. a(2) /= 44 .or. a(3) /= 45       &\n+          .or. a(5) /= 5 .or. a(6) /= 6 .or. a(7) /= 7                     &\n+          .or. b(0) /= 47 .or. b(1) /= 2 .or. b(2) /= 4 .or. b(3) /= 6     &\n+          .or. b(4) /= 48 .or. b(5) /= 10 .or. b(6) /= 12 .or. b(7) /= 14) &\n+        error stop\n+      do i = 0, 7\n+        if (i /= 4) &\n+          a(i) = 3 * i + 7\n+      end do\n+      do i = 0, 7\n+        b(i) = 4 * i - 7\n+      end do\n+    end block\n+    ! The following task depends on both b(0) = 47; and\n+    ! above omp_all_memory tasks, but as the latter depends on\n+    ! the former, effectively it is dependent just on the omp_all_memory\n+    ! task.\n+    !$omp task shared(b) depend(inout: b(0))\n+    block\n+      call usleep (5000)\n+      b(0) = 49\n+    end block\n+    ! The following task depends on all the above except a(4) = 46; one,\n+    ! but it can be reduced to dependency on the above omp_all_memory\n+    ! one and b(0) = 49; one.\n+    !$omp task shared(a, b) depend(inout: b(7)) depend(iterator(j=4:5), out: omp_all_memory) &\n+    !$omp&     depend(inout: b(6)) private(i)\n+    block\n+      do i = 0, 7\n+        if (i /= 4) then\n+          if (a(i) /= 3 * i + 7) &\n+            error stop\n+          a(i) = 5 * i + 50\n+        end if\n+      end do\n+      if (b(0) /= 49) &\n+        error stop\n+      b(0) = 6 * i + 57\n+      do i = 1, 7\n+        if (b(i) /= 4 * i - 7) &\n+          error stop\n+        b(i) = 6 * i + 57\n+      end do\n+    end block\n+    !$omp taskwait\n+    if (a(4) /= 46) &\n+      error stop\n+   end block\n+  end block\n+end program"}]}