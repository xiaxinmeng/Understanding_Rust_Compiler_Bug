{"sha": "9d89efebaac0b2c66ddd7f993717b341c8651cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4OWVmZWJhYWMwYjJjNjZkZGQ3Zjk5MzcxN2IzNDFjODY1MWNmNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-09-15T10:50:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-09-15T10:50:05Z"}, "message": "[Demangle PATCH] Some pre-fix cleanups\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-09/msg00983.html\n\n\t* cp-demangle.c (is_fnqual_component_type): Reimplement using\n\tFNQUAL_COMPONENT_CASE.\n\t(d_encoding): Hold bare_function_type in local var.\n\t(d_local_name): Build name in both cases and build result once.\n\tCollapse switch-if to single conditional.\n\t* testsuite/demangle-expected: Realign blank lines with tests.\n\nFrom-SVN: r252802", "tree": {"sha": "94e0883a0fd5c2512e92b4bfdddc51a68d9d580f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e0883a0fd5c2512e92b4bfdddc51a68d9d580f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d89efebaac0b2c66ddd7f993717b341c8651cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d89efebaac0b2c66ddd7f993717b341c8651cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d89efebaac0b2c66ddd7f993717b341c8651cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d89efebaac0b2c66ddd7f993717b341c8651cf6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "897da3034cc2b1e3675d891e833c6b2a02fd4fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897da3034cc2b1e3675d891e833c6b2a02fd4fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897da3034cc2b1e3675d891e833c6b2a02fd4fe5"}], "stats": {"total": 85, "additions": 45, "deletions": 40}, "files": [{"sha": "2ecd478f31e2561ac4355aae09e34d0cab32ab21", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d89efebaac0b2c66ddd7f993717b341c8651cf6/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d89efebaac0b2c66ddd7f993717b341c8651cf6/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9d89efebaac0b2c66ddd7f993717b341c8651cf6", "patch": "@@ -1,3 +1,12 @@\n+2017-09-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (is_fnqual_component_type): Reimplement using\n+\tFNQUAL_COMPONENT_CASE.\n+\t(d_encoding): Hold bare_function_type in local var.\n+\t(d_local_name): Build name in both cases and build result once.\n+\tCollapse switch-if to single conditional.\n+\t* testsuite/demangle-expected: Realign blank lines with tests.\n+\n 2017-09-12  Jiong Wang  <jiong.wang@arm.com>\n \n \t* dwarfnames.c (DW_CFA_DUP): New define."}, {"sha": "e8705984c5276c0b9fe1addca107301a23e6cde5", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d89efebaac0b2c66ddd7f993717b341c8651cf6/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d89efebaac0b2c66ddd7f993717b341c8651cf6/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=9d89efebaac0b2c66ddd7f993717b341c8651cf6", "patch": "@@ -568,22 +568,6 @@ static int d_demangle_callback (const char *, int,\n                                 demangle_callbackref, void *);\n static char *d_demangle (const char *, int, size_t *);\n \n-/* True iff TYPE is a demangling component representing a\n-   function-type-qualifier.  */\n-\n-static int\n-is_fnqual_component_type (enum demangle_component_type type)\n-{\n-  return (type == DEMANGLE_COMPONENT_RESTRICT_THIS\n-\t  || type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t  || type == DEMANGLE_COMPONENT_CONST_THIS\n-\t  || type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS\n-\t  || type == DEMANGLE_COMPONENT_TRANSACTION_SAFE\n-\t  || type == DEMANGLE_COMPONENT_NOEXCEPT\n-\t  || type == DEMANGLE_COMPONENT_THROW_SPEC\n-\t  || type == DEMANGLE_COMPONENT_REFERENCE_THIS);\n-}\n-\n #define FNQUAL_COMPONENT_CASE\t\t\t\t\\\n     case DEMANGLE_COMPONENT_RESTRICT_THIS:\t\t\\\n     case DEMANGLE_COMPONENT_VOLATILE_THIS:\t\t\\\n@@ -594,6 +578,23 @@ is_fnqual_component_type (enum demangle_component_type type)\n     case DEMANGLE_COMPONENT_NOEXCEPT:\t\t\t\\\n     case DEMANGLE_COMPONENT_THROW_SPEC\n \n+/* True iff TYPE is a demangling component representing a\n+   function-type-qualifier.  */\n+\n+static int\n+is_fnqual_component_type (enum demangle_component_type type)\n+{\n+  switch (type)\n+    {\n+    FNQUAL_COMPONENT_CASE:\n+      return 1;\n+    default:\n+      break;\n+    }\n+  return 0;\n+}\n+\n+\n #ifdef CP_DEMANGLE_DEBUG\n \n static void\n@@ -1305,7 +1306,7 @@ d_encoding (struct d_info *di, int top_level)\n     return d_special_name (di);\n   else\n     {\n-      struct demangle_component *dc;\n+      struct demangle_component *dc, *dcr;\n \n       dc = d_name (di);\n \n@@ -1327,8 +1328,6 @@ d_encoding (struct d_info *di, int top_level)\n \t     which is local to a function.  */\n \t  if (dc->type == DEMANGLE_COMPONENT_LOCAL_NAME)\n \t    {\n-\t      struct demangle_component *dcr;\n-\n \t      dcr = d_right (dc);\n \t      while (is_fnqual_component_type (dcr->type))\n \t\tdcr = d_left (dcr);\n@@ -1341,8 +1340,8 @@ d_encoding (struct d_info *di, int top_level)\n       peek = d_peek_char (di);\n       if (dc == NULL || peek == '\\0' || peek == 'E')\n \treturn dc;\n-      return d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME, dc,\n-\t\t\t  d_bare_function_type (di, has_return_type (dc)));\n+      dcr = d_bare_function_type (di, has_return_type (dc));\n+      return d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME, dc, dcr);\n     }\n }\n \n@@ -3571,6 +3570,7 @@ static struct demangle_component *\n d_local_name (struct d_info *di)\n {\n   struct demangle_component *function;\n+  struct demangle_component *name;\n \n   if (! d_check_char (di, 'Z'))\n     return NULL;\n@@ -3585,13 +3585,10 @@ d_local_name (struct d_info *di)\n       d_advance (di, 1);\n       if (! d_discriminator (di))\n \treturn NULL;\n-      return d_make_comp (di, DEMANGLE_COMPONENT_LOCAL_NAME, function,\n-\t\t\t  d_make_name (di, \"string literal\",\n-\t\t\t\t       sizeof \"string literal\" - 1));\n+      name = d_make_name (di, \"string literal\", sizeof \"string literal\" - 1);\n     }\n   else\n     {\n-      struct demangle_component *name;\n       int num = -1;\n \n       if (d_peek_char (di) == 'd')\n@@ -3604,21 +3601,19 @@ d_local_name (struct d_info *di)\n \t}\n \n       name = d_name (di);\n-      if (name)\n-\tswitch (name->type)\n-\t  {\n-\t    /* Lambdas and unnamed types have internal discriminators.  */\n-\t  case DEMANGLE_COMPONENT_LAMBDA:\n-\t  case DEMANGLE_COMPONENT_UNNAMED_TYPE:\n-\t    break;\n-\t  default:\n-\t    if (! d_discriminator (di))\n-\t      return NULL;\n-\t  }\n+      if (name\n+\t  /* Lambdas and unnamed types have internal discriminators.  */\n+\t  && name->type != DEMANGLE_COMPONENT_LAMBDA\n+\t  && name->type != DEMANGLE_COMPONENT_UNNAMED_TYPE\n+\t  /* Otherwise read and ignore an optional discriminator.  */\n+\t  && ! d_discriminator (di))\n+\treturn NULL;\n+\n       if (num >= 0)\n \tname = d_make_default_arg (di, num, name);\n-      return d_make_comp (di, DEMANGLE_COMPONENT_LOCAL_NAME, function, name);\n     }\n+\n+  return d_make_comp (di, DEMANGLE_COMPONENT_LOCAL_NAME, function, name);\n }\n \n /* <discriminator> ::= _ <number>    # when number < 10"}, {"sha": "519f6d05f27d3d7a773a6100432df74b9663a78e", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d89efebaac0b2c66ddd7f993717b341c8651cf6/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d89efebaac0b2c66ddd7f993717b341c8651cf6/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=9d89efebaac0b2c66ddd7f993717b341c8651cf6", "patch": "@@ -4720,18 +4720,19 @@ _ZdvMMMMMMMMMMMMMrrrrA_DTdvfp_fp_Eededilfdfdfdfd\n \n _Z1MA_aMMMMA_MMA_MMMMMMMMSt1MS_o11T0000000000t2M0oooozoooo\n _Z1MA_aMMMMA_MMA_MMMMMMMMSt1MS_o11T0000000000t2M0oooozoooo\n-\n #\n # demangler/80513 Test for overflow in d_number\n+\n _Z4294967297x\n _Z4294967297x\n-\n #\n # demangler/80513 Test for bogus characters after __thunk_\n+\n __thunk_16a_$_1x\n __thunk_16a_$_1x\n-\n #\n # demangler/80513 Test for overflow in consume_count\n+\n __thunk_4294967297__$_1x\n __thunk_4294967297__$_1x\n+#"}]}