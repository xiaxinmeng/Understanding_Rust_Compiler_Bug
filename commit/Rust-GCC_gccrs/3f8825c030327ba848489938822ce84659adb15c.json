{"sha": "3f8825c030327ba848489938822ce84659adb15c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4ODI1YzAzMDMyN2JhODQ4NDg5OTM4ODIyY2U4NDY1OWFkYjE1Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-07T13:02:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-07T13:02:36Z"}, "message": "calls.c (special_function_p): setjmp-like functions are leaf.\n\n2013-05-07  Richard Biener  <rguenther@suse.de>\n\n\t* calls.c (special_function_p): setjmp-like functions are leaf.\n\t* builtins.def (BUILT_IN_SETJMP): setjmp is leaf.\n\t* tree-inline.c (update_ssa_across_abnormal_edges): Remove assert.\n\nFrom-SVN: r198681", "tree": {"sha": "526d59f90336916a5e5f4f289babd36470843647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/526d59f90336916a5e5f4f289babd36470843647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8825c030327ba848489938822ce84659adb15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8825c030327ba848489938822ce84659adb15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8825c030327ba848489938822ce84659adb15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8825c030327ba848489938822ce84659adb15c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd4842cd6793508d4cdf630ef8a3e406cff7b895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4842cd6793508d4cdf630ef8a3e406cff7b895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4842cd6793508d4cdf630ef8a3e406cff7b895"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "62feb5901f168522570390278fd995199358acae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8825c030327ba848489938822ce84659adb15c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8825c030327ba848489938822ce84659adb15c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f8825c030327ba848489938822ce84659adb15c", "patch": "@@ -1,3 +1,9 @@\n+2013-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* calls.c (special_function_p): setjmp-like functions are leaf.\n+\t* builtins.def (BUILT_IN_SETJMP): setjmp is leaf.\n+\t* tree-inline.c (update_ssa_across_abnormal_edges): Remove assert.\n+\n 2013-05-07  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov<mode>): call splitter."}, {"sha": "276f89c26e29cc6ca23002c54f71001591114f95", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8825c030327ba848489938822ce84659adb15c/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8825c030327ba848489938822ce84659adb15c/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=3f8825c030327ba848489938822ce84659adb15c", "patch": "@@ -732,7 +732,7 @@ DEF_LIB_BUILTIN        (BUILT_IN_REALLOC, \"realloc\", BT_FN_PTR_PTR_SIZE, ATTR_NO\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN, \"return\", BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UINT, ATTR_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_SAVEREGS, \"saveregs\", BT_FN_PTR_VAR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_SETJMP, \"setjmp\", BT_FN_INT_PTR, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_SETJMP, \"setjmp\", BT_FN_INT_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRFMON, \"strfmon\", BT_FN_SSIZE_STRING_SIZE_CONST_STRING_VAR, ATTR_FORMAT_STRFMON_NOTHROW_3_4)\n DEF_LIB_BUILTIN        (BUILT_IN_STRFTIME, \"strftime\", BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR, ATTR_FORMAT_STRFTIME_NOTHROW_3_0)\n DEF_GCC_BUILTIN        (BUILT_IN_TRAP, \"trap\", BT_FN_VOID, ATTR_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "0c7f22566bca805af477585aaa0991f2a8bce27a", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8825c030327ba848489938822ce84659adb15c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8825c030327ba848489938822ce84659adb15c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3f8825c030327ba848489938822ce84659adb15c", "patch": "@@ -545,7 +545,7 @@ special_function_p (const_tree fndecl, int flags)\n \t\t  && ! strcmp (tname, \"sigsetjmp\"))\n \t      || (tname[1] == 'a'\n \t\t  && ! strcmp (tname, \"savectx\")))\n-\t    flags |= ECF_RETURNS_TWICE;\n+\t    flags |= ECF_RETURNS_TWICE | ECF_LEAF;\n \n \t  if (tname[1] == 'i'\n \t      && ! strcmp (tname, \"siglongjmp\"))\n@@ -557,7 +557,7 @@ special_function_p (const_tree fndecl, int flags)\n \t\t   && ! strcmp (tname, \"vfork\"))\n \t       || (tname[0] == 'g' && tname[1] == 'e'\n \t\t   && !strcmp (tname, \"getcontext\")))\n-\tflags |= ECF_RETURNS_TWICE;\n+\tflags |= ECF_RETURNS_TWICE | ECF_LEAF;\n \n       else if (tname[0] == 'l' && tname[1] == 'o'\n \t       && ! strcmp (tname, \"longjmp\"))"}, {"sha": "57af7de2c09ecf675be11ad8b61a7b17dac97d50", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8825c030327ba848489938822ce84659adb15c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8825c030327ba848489938822ce84659adb15c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3f8825c030327ba848489938822ce84659adb15c", "patch": "@@ -1835,8 +1835,8 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n \n \t    phi = gsi_stmt (si);\n \n-\t    /* There shouldn't be any PHI nodes in the ENTRY_BLOCK.  */\n-\t    gcc_assert (!e->dest->aux);\n+\t    /* For abnormal goto/call edges the receiver can be the\n+\t       ENTRY_BLOCK.  Do not assert this cannot happen.  */\n \n \t    gcc_assert ((e->flags & EDGE_EH)\n \t\t\t|| SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)));"}]}