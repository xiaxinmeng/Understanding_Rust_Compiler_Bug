{"sha": "b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyYzEwNDM1M2VmMThmMWUzMzM3OGJhNmRjYzVhMGIzNWY2NzBiYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T10:01:06Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T10:01:06Z"}, "message": "[AArch64][4/14] Create TARGET_FIX_ERR_A53_835769 and use that instead of aarch64_fix_a53_err835769\n\n        * config/aarch64/aarch64.h (TARGET_FIX_ERR_A53_835769_DEFAULT): Always\n        define to 0 or 1.\n        (TARGET_FIX_ERR_A53_835769): New macro.\n        * config/aarch64/aarch64.c (aarch64_override_options_internal): Remove\n        handling of opts->x_aarch64_fix_a53_err835769.\n        (aarch64_madd_needs_nop): Check for TARGET_FIX_ERR_A53_835769 rather\n        than aarch64_fix_a53_err835769.\n        * config/aarch64/aarch64-elf-raw.h: Update for above changes.\n        * config/aarch64/aarch64-linux.h: Likewise.\n\nFrom-SVN: r226556", "tree": {"sha": "c7a9c9626efceb78807dabe70a73fef90360148c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a9c9626efceb78807dabe70a73fef90360148c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eadc745824115fe09e7e3b12ffbf6db2c64fee2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadc745824115fe09e7e3b12ffbf6db2c64fee2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eadc745824115fe09e7e3b12ffbf6db2c64fee2f"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "213bfc7bb6ce9236919fcdcfdef592721669b3c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "patch": "@@ -1,3 +1,15 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.h (TARGET_FIX_ERR_A53_835769_DEFAULT): Always\n+\tdefine to 0 or 1.\n+\t(TARGET_FIX_ERR_A53_835769): New macro.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Remove\n+\thandling of opts->x_aarch64_fix_a53_err835769.\n+\t(aarch64_madd_needs_nop): Check for TARGET_FIX_ERR_A53_835769 rather\n+\tthan aarch64_fix_a53_err835769.\n+\t* config/aarch64/aarch64-elf-raw.h: Update for above changes.\n+\t* config/aarch64/aarch64-linux.h: Likewise.\n+\n 2015-08-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_int_movcc): Check result of"}, {"sha": "ecd35908aa2208e40042ad70f546271fef6d98b6", "filename": "gcc/config/aarch64/aarch64-elf-raw.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h?ref=b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "patch": "@@ -27,7 +27,7 @@\n   \" crtend%O%s crtn%O%s \" \\\n   \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n \n-#ifdef TARGET_FIX_ERR_A53_835769_DEFAULT\n+#if TARGET_FIX_ERR_A53_835769_DEFAULT\n #define CA53_ERR_835769_SPEC \\\n   \" %{!mno-fix-cortex-a53-835769:--fix-cortex-a53-835769}\"\n #else"}, {"sha": "e41ca25cd7b15f9e3fd6a8e022100ee39bffabc6", "filename": "gcc/config/aarch64/aarch64-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h?ref=b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "patch": "@@ -45,7 +45,7 @@\n    %{mbig-endian:-EB} %{mlittle-endian:-EL}     \\\n    -maarch64linux%{mabi=ilp32:32}%{mbig-endian:b}\"\n \n-#ifdef TARGET_FIX_ERR_A53_835769_DEFAULT\n+#if TARGET_FIX_ERR_A53_835769_DEFAULT\n #define CA53_ERR_835769_SPEC \\\n   \" %{!mno-fix-cortex-a53-835769:--fix-cortex-a53-835769}\"\n #else"}, {"sha": "3cd29272d33cafab7a7bc4cec7b64ed349909487", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "patch": "@@ -7542,15 +7542,6 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   if (opts->x_flag_strict_volatile_bitfields < 0 && abi_version_at_least (2))\n     opts->x_flag_strict_volatile_bitfields = 1;\n \n-  if (opts->x_aarch64_fix_a53_err835769 == 2)\n-    {\n-#ifdef TARGET_FIX_ERR_A53_835769_DEFAULT\n-      opts->x_aarch64_fix_a53_err835769 = 1;\n-#else\n-      opts->x_aarch64_fix_a53_err835769 = 0;\n-#endif\n-    }\n-\n   /* -mgeneral-regs-only sets a mask in target_flags, make sure that\n      aarch64_isa_flags does not contain the FP/SIMD/Crypto feature flags\n      in case some code tries reading aarch64_isa_flags directly to check if\n@@ -8985,7 +8976,7 @@ aarch64_madd_needs_nop (rtx_insn* insn)\n   rtx_insn *prev;\n   rtx body;\n \n-  if (!aarch64_fix_a53_err835769)\n+  if (!TARGET_FIX_ERR_A53_835769)\n     return false;\n \n   if (recog_memoized (insn) < 0)"}, {"sha": "1f8f52cede943d2e9b2435ea09f476b77e1172b0", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32c104353ef18f1e33378ba6dcc5a0b35f670bc/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=b32c104353ef18f1e33378ba6dcc5a0b35f670bc", "patch": "@@ -235,6 +235,20 @@ extern unsigned long aarch64_isa_flags;\n /* CRC instructions that can be enabled through +crc arch extension.  */\n #define TARGET_CRC32 (AARCH64_ISA_CRC)\n \n+/* Make sure this is always defined so we don't have to check for ifdefs\n+   but rather use normal ifs.  */\n+#ifndef TARGET_FIX_ERR_A53_835769_DEFAULT\n+#define TARGET_FIX_ERR_A53_835769_DEFAULT 0\n+#else\n+#undef TARGET_FIX_ERR_A53_835769_DEFAULT\n+#define TARGET_FIX_ERR_A53_835769_DEFAULT 1\n+#endif\n+\n+/* Apply the workaround for Cortex-A53 erratum 835769.  */\n+#define TARGET_FIX_ERR_A53_835769\t\\\n+  ((aarch64_fix_a53_err835769 == 2)\t\\\n+  ? TARGET_FIX_ERR_A53_835769_DEFAULT : aarch64_fix_a53_err835769)\n+\n /* Standard register usage.  */\n \n /* 31 64-bit general purpose registers R0-R30:"}]}