{"sha": "f05911fb07ef21bd158da44d8618b7be84f11b21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA1OTExZmIwN2VmMjFiZDE1OGRhNDRkODYxOGI3YmU4NGYxMWIyMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-02-17T21:38:12Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-02-17T21:38:12Z"}, "message": "sh.opt (mcbranch-force-delay-slot): New option.\n\ngcc/\n\t* config/sh/sh.opt (mcbranch-force-delay-slot): New option.\n\t* doc/invoke.texi (SH options): Document it.\n\t* config/sh/sh.c (sh_insn_length_adjustment): Check\n\tTARGET_CBRANCH_FORCE_DELAY_SLOT instead of sh_cpu_attr == CPU_SH2E.\n\ngcc/testsuite/\n\t* gcc.target/sh/sh.exp (check_effective_target_sh1): New.\n\t* gcc.target/sh/force-cbranch-delay-slot.c: New.\n\nFrom-SVN: r220774", "tree": {"sha": "685fc20a708ab8624e9861230b4a7db17dc300a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/685fc20a708ab8624e9861230b4a7db17dc300a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f05911fb07ef21bd158da44d8618b7be84f11b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05911fb07ef21bd158da44d8618b7be84f11b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05911fb07ef21bd158da44d8618b7be84f11b21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05911fb07ef21bd158da44d8618b7be84f11b21/comments", "author": null, "committer": null, "parents": [{"sha": "3c99176a7f968bdb8b7a3225265246f643551c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c99176a7f968bdb8b7a3225265246f643551c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c99176a7f968bdb8b7a3225265246f643551c80"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "5a44fccaf5c2b9ee783152514576d01a8820187f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -1,3 +1,10 @@\n+2015-02-17  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.opt (mcbranch-force-delay-slot): New option.\n+\t* doc/invoke.texi (SH options): Document it.\n+\t* config/sh/sh.c (sh_insn_length_adjustment): Check\n+\tTARGET_CBRANCH_FORCE_DELAY_SLOT instead of sh_cpu_attr == CPU_SH2E.\n+\n 2015-02-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* common.opt (fipa-cp-alignment): New."}, {"sha": "7c9d8e2e0c6626ceafa51fa1e17ca00c0af86d60", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -10245,11 +10245,10 @@ sh_insn_length_adjustment (rtx_insn *insn)\n       && get_attr_needs_delay_slot (insn) == NEEDS_DELAY_SLOT_YES)\n     return 2;\n \n-  /* SH2e has a bug that prevents the use of annulled branches, so if\n-     the delay slot is not filled, we'll have to put a NOP in it.  */\n-  if (sh_cpu_attr == CPU_SH2E\n-      && JUMP_P (insn)\n-      && get_attr_type (insn) == TYPE_CBRANCH\n+  /* Increase the insn length of a cbranch without a delay slot insn to\n+     force a delay slot which will be stuffed with a nop.  */\n+  if (TARGET_CBRANCH_FORCE_DELAY_SLOT && TARGET_SH2\n+      && JUMP_P (insn) && get_attr_type (insn) == TYPE_CBRANCH\n       && ! sequence_insn_p (insn))\n     return 2;\n "}, {"sha": "beb4bc8a0171d63addc843ec5abf31c97e82da58", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -229,7 +229,7 @@ Target RejectNegative Joined UInteger Var(sh_branch_cost) Init(-1)\n Cost to assume for a branch insn\n \n mzdcbranch\n-Target Var(TARGET_ZDCBRANCH)\n+Target Report Var(TARGET_ZDCBRANCH)\n Assume that zero displacement conditional branches are fast\n \n mcbranchdi\n@@ -240,6 +240,10 @@ mcmpeqdi\n Target Undocumented Var(TARGET_CMPEQDI_T) Warn(%qs is deprecated and has no effect)\n Emit cmpeqdi_t pattern even when -mcbranchdi is in effect.\n \n+mcbranch-force-delay-slot\n+Target Report RejectNegative Var(TARGET_CBRANCH_FORCE_DELAY_SLOT) Init(0)\n+Force the usage of delay slots for conditional branches.\n+\n mcut2-workaround\n Target RejectNegative Var(TARGET_SH5_CUT2_WORKAROUND)\n Enable SH5 cut2 workaround"}, {"sha": "d009cb2c940685e8c5469204ad1dd56f2dd93a70", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -965,6 +965,7 @@ See RS/6000 and PowerPC Options.\n -maccumulate-outgoing-args -minvalid-symbols @gol\n -matomic-model=@var{atomic-model} @gol\n -mbranch-cost=@var{num} -mzdcbranch -mno-zdcbranch @gol\n+-mcbranch-force-delay-slot @gol\n -mfused-madd -mno-fused-madd -mfsca -mno-fsca -mfsrra -mno-fsrra @gol\n -mpretend-cmove -mtas}\n \n@@ -20593,6 +20594,13 @@ compiler prefers zero displacement branch code sequences.  This is\n enabled by default when generating code for SH4 and SH4A.  It can be explicitly\n disabled by specifying @option{-mno-zdcbranch}.\n \n+@item -mcbranch-force-delay-slot\n+@opindex mcbranch-force-delay-slot\n+Force the usage of delay slots for conditional branches, which stuffs the delay\n+slot with a @code{nop} if a suitable instruction can't be found.  By default\n+this option is disabled.  It can be enabled to work around hardware bugs as\n+found in the original SH7055.\n+\n @item -mfused-madd\n @itemx -mno-fused-madd\n @opindex mfused-madd"}, {"sha": "866d4d93481cd60d7344fec4c9fba95045c77608", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -1,3 +1,8 @@\n+2015-02-17  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* gcc.target/sh/sh.exp (check_effective_target_sh1): New.\n+\t* gcc.target/sh/force-cbranch-delay-slot.c: New.\n+\n 2015-02-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/ipa/propalign-3.c: New test."}, {"sha": "e828b993a1005ca42abf9579630e6066f5c2034b", "filename": "gcc/testsuite/gcc.target/sh/force-cbranch-delay-slot.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fforce-cbranch-delay-slot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fforce-cbranch-delay-slot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fforce-cbranch-delay-slot.c?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -0,0 +1,18 @@\n+/* Check that the option -mcbranch-force-delay-slot works as expected on\n+   targets other than SH1, and that it compiles on SH1 targets without fuzz.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -mcbranch-force-delay-slot\" }  */\n+/* { dg-final { scan-assembler-times \"nop\" 2 { target { ! sh1 } } } }  */\n+\n+int g (int, int);\n+\n+int\n+f (int a, int b)\n+{\n+  /* Expected: 1x bt/s, 1x nop.  */\n+  if (a != 5)\n+    a = 10;\n+\n+  /* Expected: 1x jmp, 1x nop.  */\n+  return g (a, b);\n+}"}, {"sha": "f00dbd54cef7c3e6c8cf8ba6afd2fa920f6b7d91", "filename": "gcc/testsuite/gcc.target/sh/sh.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05911fb07ef21bd158da44d8618b7be84f11b21/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp?ref=f05911fb07ef21bd158da44d8618b7be84f11b21", "patch": "@@ -33,6 +33,15 @@ proc check_effective_target_sh2a { } {\n     } \"\"]\n }\n \n+# Return 1 if target is SH1\n+proc check_effective_target_sh1 { } {\n+    return [check_no_compiler_messages sh1 object {\n+\t     #ifndef __SH1__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n # Return 1 if target supports atomic-model=soft-gusa\n proc check_effective_target_atomic_model_soft_gusa_available { } {\n     return [check_no_compiler_messages atomic_model_soft_gusa_available object {"}]}