{"sha": "4618de23d8ac1c2a2c054c8120bcf02d190901d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxOGRlMjNkOGFjMWMyYTJjMDU0YzgxMjBiY2YwMmQxOTA5MDFkNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-01-22T13:50:25Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-01-22T13:50:25Z"}, "message": "re PR fortran/47399 ([OOP] ICE with TBP of a PARAMETER)\n\n2011-01-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47399\n        * primary.c (gfc_match_varspec): Relax gcc_assert to allow for\n        PARAMETER TBP.\n\n2011-01-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47399\n        * gfortran.dg/typebound_proc_19.f90: New.\n\nFrom-SVN: r169126", "tree": {"sha": "92e63a65a75a31ae825b8b194f60db85cd2c192a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e63a65a75a31ae825b8b194f60db85cd2c192a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4618de23d8ac1c2a2c054c8120bcf02d190901d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4618de23d8ac1c2a2c054c8120bcf02d190901d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4618de23d8ac1c2a2c054c8120bcf02d190901d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4618de23d8ac1c2a2c054c8120bcf02d190901d5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "caaf13d38729701accab60cfee5d743a5b9afad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf13d38729701accab60cfee5d743a5b9afad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caaf13d38729701accab60cfee5d743a5b9afad1"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "f0562acb04d66fbbffe53d85467817fbed4ef4ac", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4618de23d8ac1c2a2c054c8120bcf02d190901d5", "patch": "@@ -1,3 +1,9 @@\n+2011-01-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47399\n+\t* primary.c (gfc_match_varspec): Relax gcc_assert to allow for\n+\tPARAMETER TBP.\n+\n 2011-01-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47394"}, {"sha": "360176edfdbd1b094d63c7aaf2a4ea034d9d6ea9", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=4618de23d8ac1c2a2c054c8120bcf02d190901d5", "patch": "@@ -1843,7 +1843,10 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t    return MATCH_ERROR;\n \n \t  gcc_assert (!tail || !tail->next);\n-\t  gcc_assert (primary->expr_type == EXPR_VARIABLE);\n+\t  gcc_assert (primary->expr_type == EXPR_VARIABLE\n+\t\t      || (primary->expr_type == EXPR_STRUCTURE\n+\t\t\t  && primary->symtree && primary->symtree->n.sym\n+\t\t\t  && primary->symtree->n.sym->attr.flavor));\n \n \t  if (tbp->n.tb->is_generic)\n \t    tbp_sym = NULL;"}, {"sha": "d0a8f4051709d6693f3c885d2e65afadbb13c289", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4618de23d8ac1c2a2c054c8120bcf02d190901d5", "patch": "@@ -1,3 +1,8 @@\n+2011-01-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47399\n+\t* gfortran.dg/typebound_proc_19.f90: New.\n+\n 2011-01-21  Jeff Law <law@redhat.com>\n \n \tPR tree-optimization/47053"}, {"sha": "be15bf09fc3436517fd0a8745296ac6af890433a", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_19.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4618de23d8ac1c2a2c054c8120bcf02d190901d5/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_19.f90?ref=4618de23d8ac1c2a2c054c8120bcf02d190901d5", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do compile }\n+!\n+! PR fortran/47399\n+!\n+! Contributed by Wolfgang Kilian.\n+!\n+\n+module mytypes\n+   implicit none\n+   private\n+   public :: mytype, get_i\n+\n+   integer, save :: i_priv = 13\n+   type :: mytype\n+      integer :: dummy\n+    contains\n+      procedure, nopass :: i => get_i\n+   end type mytype\n+ contains\n+   pure function get_i () result (i)\n+     integer :: i\n+     i = i_priv\n+   end function get_i\n+end module mytypes\n+\n+subroutine test()\n+   use mytypes\n+   implicit none\n+\n+   type(mytype) :: a\n+   type(mytype), parameter :: a_const = mytype (0)\n+   integer, dimension (get_i()) :: x            ! #1\n+   integer, dimension (a%i()) :: y              ! #2\n+   integer, dimension (a_const%i()) :: z        ! #3\n+\n+   if (size (x) /= 13 .or. size(y) /= 13 .or. size(z) /= 13) call abort()\n+!   print *, size (x), size(y), size(z)\n+end subroutine test\n+\n+call test()\n+end\n+\n+! { dg-final { cleanup-modules \"mytypes\" } }"}]}