{"sha": "603349bf3ddd56a90ad8091a41038f0c38eb4838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzMzQ5YmYzZGRkNTZhOTBhZDgwOTFhNDEwMzhmMGMzOGViNDgzOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-08-16T10:15:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-08-16T10:15:15Z"}, "message": "common.opt: Add driver options.\n\n\t* common.opt: Add driver options.\n\t(auxbase, auxbase-strip, quiet, version): Mark RejectDriver.\n\t* doc/options.texi (Driver, RejectDriver): Document.\n\t* gcc.c (pass_exit_codes, print_search_dirs, print_file_name,\n\tprint_prog_name, print_multi_directory, print_sysroot,\n\tprint_multi_os_directory, print_multi_lib,\n\tprint_sysroot_headers_suffix, report_times, combine_flag,\n\tuse_pipes, wrapper_string): Remove.\n\t(save_switch, driver_unknown_option_callback,\n\tdriver_wrong_lang_callback, driver_post_handling_callback,\n\tdriver_handle_option): New.\n\t(spec_lang, last_language_n_infiles): Make file-scope static\n\tinstead of local to process_command.\n\t(process_command): Use decode_cmdline_options_to_array and\n\tread_cmdline_option for option processing.  Compute have_c in\n\tprescan of decoded options.\n\t* opt-functions.awk (switch_flags): Handle Driver and\n\tRejectDriver.\n\t(var_type, var_type_struct): Handle Separate options as generating\n\tconst char * variables.\n\t* opts-common.c (decode_cmdline_option): Expect CL_COMMON and\n\tCL_TARGET to be passed by caller if required.\n\t(decode_cmdline_options_to_array): Update comment.\n\t* opts.c (complain_wrong_lang): Handle options only valid for the\n\tdriver.\n\t(decode_options): Update call to decode_cmdline_options_to_array.\n\t(print_filtered_help): Ignore driver-only options.\n\t(print_specific_help): Ignore CL_DRIVER.\n\t(common_handle_option): Don't call print_specific_help for\n\tCL_DRIVER.\n\t* opts.h (CL_DRIVER, CL_REJECT_DRIVER): Define.\n\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_TARGET, CL_COMMON):\n\tUpdate values.\n\nc-family:\n\t* c.opt (MDX, MMDX, lang-asm): Mark RejectDriver.\n\nfortran:\n\t* lang.opt (MDX, MMDX): Mark RejectDriver.\n\njava:\n\t* lang.opt (MD_, MMD_, version): Mark RejectDriver.\n\nFrom-SVN: r163279", "tree": {"sha": "a8e55701ad8152ef11268c33109062e262817e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e55701ad8152ef11268c33109062e262817e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603349bf3ddd56a90ad8091a41038f0c38eb4838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603349bf3ddd56a90ad8091a41038f0c38eb4838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603349bf3ddd56a90ad8091a41038f0c38eb4838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603349bf3ddd56a90ad8091a41038f0c38eb4838/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b228e61a98d8bdd1286e536a1f74cdbce50d0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b228e61a98d8bdd1286e536a1f74cdbce50d0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b228e61a98d8bdd1286e536a1f74cdbce50d0ff"}], "stats": {"total": 1351, "additions": 740, "deletions": 611}, "files": [{"sha": "92ae2640778dde94ffb43c6fad018d2d2029ca1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -1,3 +1,39 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt: Add driver options.\n+\t(auxbase, auxbase-strip, quiet, version): Mark RejectDriver.\n+\t* doc/options.texi (Driver, RejectDriver): Document.\n+\t* gcc.c (pass_exit_codes, print_search_dirs, print_file_name,\n+\tprint_prog_name, print_multi_directory, print_sysroot,\n+\tprint_multi_os_directory, print_multi_lib,\n+\tprint_sysroot_headers_suffix, report_times, combine_flag,\n+\tuse_pipes, wrapper_string): Remove.\n+\t(save_switch, driver_unknown_option_callback,\n+\tdriver_wrong_lang_callback, driver_post_handling_callback,\n+\tdriver_handle_option): New.\n+\t(spec_lang, last_language_n_infiles): Make file-scope static\n+\tinstead of local to process_command.\n+\t(process_command): Use decode_cmdline_options_to_array and\n+\tread_cmdline_option for option processing.  Compute have_c in\n+\tprescan of decoded options.\n+\t* opt-functions.awk (switch_flags): Handle Driver and\n+\tRejectDriver.\n+\t(var_type, var_type_struct): Handle Separate options as generating\n+\tconst char * variables.\n+\t* opts-common.c (decode_cmdline_option): Expect CL_COMMON and\n+\tCL_TARGET to be passed by caller if required.\n+\t(decode_cmdline_options_to_array): Update comment.\n+\t* opts.c (complain_wrong_lang): Handle options only valid for the\n+\tdriver.\n+\t(decode_options): Update call to decode_cmdline_options_to_array.\n+\t(print_filtered_help): Ignore driver-only options.\n+\t(print_specific_help): Ignore CL_DRIVER.\n+\t(common_handle_option): Don't call print_specific_help for\n+\tCL_DRIVER.\n+\t* opts.h (CL_DRIVER, CL_REJECT_DRIVER): Define.\n+\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_TARGET, CL_COMMON):\n+\tUpdate values.\n+\n 2010-08-16  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_types_in_gimple_reference): Verify"}, {"sha": "80034e6d6ecee7b8a6cd8f2eadae524109ab0fc0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -1,3 +1,7 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (MDX, MMDX, lang-asm): Mark RejectDriver.\n+\n 2010-08-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (MD, MMD): Change to MDX and MMDX."}, {"sha": "d1aa10e1887b51d90ba26d69c414d3fd07bcda19", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -73,7 +73,7 @@ C ObjC C++ ObjC++\n Generate make dependencies\n \n MDX\n-C ObjC C++ ObjC++ Separate MissingArgError(missing filename after %qs)\n+C ObjC C++ ObjC++ RejectDriver Separate MissingArgError(missing filename after %qs)\n -MD\tGenerate make dependencies and compile\n \n MF\n@@ -89,7 +89,7 @@ C ObjC C++ ObjC++\n Like -M but ignore system header files\n \n MMDX\n-C ObjC C++ ObjC++ Separate MissingArgError(missing filename after %qs)\n+C ObjC C++ ObjC++ RejectDriver Separate MissingArgError(missing filename after %qs)\n -MMD\tLike -MD but ignore system header files\n \n MP\n@@ -926,7 +926,7 @@ C ObjC C++ ObjC++ Joined Separate\n -iwithprefixbefore <dir>\tAdd <dir> to the end of the main include path\n \n lang-asm\n-C Undocumented\n+C Undocumented RejectDriver\n \n nostdinc\n C ObjC C++ ObjC++"}, {"sha": "96d0c9f3ec8d3966fb26f949fa8c8c4cd2ff447b", "filename": "gcc/common.opt", "status": "modified", "additions": 146, "deletions": 15, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -23,39 +23,51 @@\n \n ; Please try to keep this file in ASCII collating order.\n \n+###\n+Driver\n+\n -help\n-Common\n+Common Driver\n Display this information\n \n -help=\n-Common Report Joined\n+Common Driver Report Joined\n --help=<class>\tDisplay descriptions of a specific class of options.  <class> is one or more of optimizers, target, warnings, undocumented, params\n \n -target-help\n-Common\n+Common Driver\n Alias for --help=target\n \n ;; The following four entries are to work around the gcc driver\n ;; program's insatiable desire to turn options starting with a\n ;; double dash (--) into options starting with a dash f (-f).\n fhelp\n-Common Var(help_flag)\n+Common Driver Var(help_flag)\n \n fhelp=\n-Common Joined\n+Common Driver Joined\n \n ftarget-help\n-Common\n+Common Driver\n \n fversion\n-Common\n+Common Driver\n \n -param\n Common Separate\n --param <param>=<value>\tSet parameter <param> to value.  See below for a complete list of parameters\n \n+-sysroot=\n+Driver JoinedOrMissing\n+\n -version\n-Common\n+Common Driver\n+\n+B\n+Driver Joined Separate\n+\n+E\n+Driver\n \n O\n Common JoinedOrMissing Optimization\n@@ -69,10 +81,22 @@ Ofast\n Common Optimization\n Optimize for speed disregarding exact standards compliance\n \n+S\n+Driver\n+\n W\n Common RejectNegative Var(extra_warnings) Warning\n This switch is deprecated; use -Wextra instead\n \n+Wa,\n+Driver JoinedOrMissing\n+\n+Wl,\n+Driver JoinedOrMissing\n+\n+Wp,\n+Driver JoinedOrMissing\n+\n Waggregate-return\n Common Var(warn_aggregate_return) Warning\n Warn about returning structures, unions or arrays\n@@ -260,6 +284,15 @@ Wcoverage-mismatch\n Common Var(warn_coverage_mismatch) Init(1) Warning\n Warn in case profiles in -fprofile-use do not match\n \n+Xassembler\n+Driver Separate\n+\n+Xlinker\n+Driver Separate\n+\n+Xpreprocessor\n+Driver Separate\n+\n aux-info\n Common Separate\n -aux-info <file>\tEmit declaration information into <file>\n@@ -268,10 +301,16 @@ aux-info=\n Common Joined\n \n auxbase\n-Common Separate\n+Common Separate RejectDriver\n \n auxbase-strip\n-Common Separate\n+Common Separate RejectDriver\n+\n+combine\n+Driver Var(combine_flag)\n+\n+c\n+Driver\n \n d\n Common Joined\n@@ -285,6 +324,15 @@ dumpdir\n Common Separate\n -dumpdir <dir>\tSet the directory name to be used for dumps\n \n+dumpmachine\n+Driver\n+\n+dumpspecs\n+Driver\n+\n+dumpversion\n+Driver\n+\n ; The version of the C++ ABI in use.  The following values are allowed:\n ;\n ; 0: The version of the ABI believed most conformant with the C++ ABI\n@@ -410,12 +458,16 @@ fcommon\n Common Report Var(flag_no_common,0) Optimization\n Do not put uninitialized globals in the common section\n \n+fcompare-debug\n+Driver\n+; Converted by the driver to -fcompare-debug= options.\n+\n fcompare-debug=\n-Common JoinedOrMissing RejectNegative Var(flag_compare_debug_opt)\n+Common Driver JoinedOrMissing RejectNegative Var(flag_compare_debug_opt)\n -fcompare-debug[=<opts>]\tCompile with and without e.g. -gtoggle, and compare the final-insns dump\n \n fcompare-debug-second\n-Common RejectNegative Var(flag_compare_debug)\n+Common Driver RejectNegative Var(flag_compare_debug)\n Run only the second compilation of -fcompare-debug\n \n fconserve-stack\n@@ -1587,14 +1639,23 @@ iplugindir=\n Common Joined Var(plugindir_string) Init(0)\n -iplugindir=<dir>\tSet <dir> to be the default plugin directory\n \n+l\n+Driver Joined Separate\n+\n+no-canonical-prefixes\n+Driver\n+\n o\n-Common Joined Separate MissingArgError(missing filename after %qs)\n+Common Driver Joined Separate MissingArgError(missing filename after %qs)\n -o <file>\tPlace output into <file>\n \n p\n Common Var(profile_flag)\n Enable function profiling\n \n+pass-exit-codes\n+Driver Var(pass_exit_codes)\n+\n pedantic\n Common Var(pedantic)\n Issue warnings needed for strict compliance to the standard\n@@ -1603,22 +1664,92 @@ pedantic-errors\n Common\n Like -pedantic but issue them as errors\n \n+pipe\n+Driver Var(use_pipes)\n+\n+print-file-name=\n+Driver JoinedOrMissing Var(print_file_name)\n+\n+print-libgcc-file-name\n+Driver\n+\n+print-multi-directory\n+Driver Var(print_multi_directory)\n+\n+print-multi-lib\n+Driver Var(print_multi_lib)\n+\n+print-multi-os-directory\n+Driver Var(print_multi_os_directory)\n+\n+print-prog-name=\n+Driver JoinedOrMissing Var(print_prog_name)\n+\n+print-search-dirs\n+Driver Var(print_search_dirs)\n+\n+print-sysroot\n+Driver Var(print_sysroot)\n+\n+print-sysroot-headers-suffix\n+Driver Var(print_sysroot_headers_suffix)\n+\n quiet\n-Common Var(quiet_flag)\n+Common Var(quiet_flag) RejectDriver\n Do not display functions compiled or elapsed time\n \n+save-temps\n+Driver\n+\n+save-temps=\n+Driver Joined\n+\n+time\n+Driver Var(report_times)\n+\n+time=\n+Driver JoinedOrMissing\n+\n+v\n+Driver\n+\n version\n-Common Var(version_flag)\n+Common Var(version_flag) RejectDriver\n Display the compiler's version\n \n w\n Common Var(inhibit_warnings)\n Suppress warnings\n \n+wrapper\n+Driver Separate Var(wrapper_string)\n+\n+x\n+Driver Joined Separate\n+\n shared\n Common RejectNegative Negative(pie)\n Create a shared library\n \n+shared-libgcc\n+Driver\n+\n+specs\n+Driver Separate\n+\n+specs=\n+Driver Joined\n+\n+static-libgcc\n+Driver\n+\n+static-libgfortran\n+Driver\n+; Documented for Fortran, but always accepted by driver.\n+\n+static-libstdc++\n+Driver\n+\n pie\n Common RejectNegative Negative(shared)\n Create a position independent executable"}, {"sha": "fff148defad9891e98a72a821a68b11f1d144f43", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -102,13 +102,21 @@ The option is available for all languages and targets.\n @item Target\n The option is available for all languages but is target-specific.\n \n+@item Driver\n+The option is handled by the compiler driver using code not shared\n+with the compilers proper (@file{cc1} etc.).\n+\n @item @var{language}\n The option is available when compiling for the given language.\n \n It is possible to specify several different languages for the same\n option.  Each @var{language} must have been declared by an earlier\n @code{Language} record.  @xref{Option file format}.\n \n+@item RejectDriver\n+The option is only handled by the compilers proper (@file{cc1} etc.)@:\n+and should not be accepted by the driver.\n+\n @item RejectNegative\n The option does not have a ``no-'' form.  All options beginning with\n ``f'', ``W'' or ``m'' are assumed to have a ``no-'' form unless this"}, {"sha": "cf8eb49c0a40353416ba8af8f0eb97a1d08c1cc2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -1,3 +1,7 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt (MDX, MMDX): Mark RejectDriver.\n+\n 2010-08-15  Janus Weil  <janus@gcc.gnu.org>\n \n \t* trans-expr.c (gfc_trans_assign_vtab_procs): Clean up (we don't have"}, {"sha": "dea14511baa8c4c76a84eb565019ad319059bf94", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -61,7 +61,7 @@ Fortran\n ; Documented in C\n \n MDX\n-Fortran Separate\n+Fortran Separate RejectDriver\n ; Documented in C\n \n MF\n@@ -77,7 +77,7 @@ Fortran\n ; Documented in C\n \n MMDX\n-Fortran Separate\n+Fortran Separate RejectDriver\n ; Documented in C\n \n MP"}, {"sha": "f0a037c16b1e59ed3f0b225de40841d18df5f296", "filename": "gcc/gcc.c", "status": "modified", "additions": 480, "deletions": 563, "changes": 1043, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -140,44 +140,9 @@ int is_cpp_driver;\n /* Flag set to nonzero if an @file argument has been supplied to gcc.  */\n static bool at_file_supplied;\n \n-/* Flag saying to pass the greatest exit code returned by a sub-process\n-   to the calling program.  */\n-static int pass_exit_codes;\n-\n /* Definition of string containing the arguments given to configure.  */\n #include \"configargs.h\"\n \n-/* Flag saying to print the directories gcc will search through looking for\n-   programs, libraries, etc.  */\n-\n-static int print_search_dirs;\n-\n-/* Flag saying to print the full filename of this file\n-   as found through our usual search mechanism.  */\n-\n-static const char *print_file_name = NULL;\n-\n-/* As print_file_name, but search for executable file.  */\n-\n-static const char *print_prog_name = NULL;\n-\n-/* Flag saying to print the relative path we'd use to\n-   find libgcc.a given the current compiler flags.  */\n-\n-static int print_multi_directory;\n-\n-static int print_sysroot;\n-\n-/* Flag saying to print the relative path we'd use to\n-   find OS libraries given the current compiler flags.  */\n-\n-static int print_multi_os_directory;\n-\n-/* Flag saying to print the list of subdirectories and\n-   compiler flags used to select them in a standard form.  */\n-\n-static int print_multi_lib;\n-\n /* Flag saying to print the command line options understood by gcc and its\n    sub-processes.  */\n \n@@ -187,11 +152,6 @@ static int print_help_list;\n \n static int print_version;\n \n-/* Flag saying to print the sysroot suffix used for searching for\n-   headers.  */\n-\n-static int print_sysroot_headers_suffix;\n-\n /* Flag indicating whether we should print the command and arguments */\n \n static int verbose_flag;\n@@ -207,11 +167,6 @@ static int verbose_only_flag;\n \n static int print_subprocess_help;\n \n-/* Flag indicating whether we should report subprocess execution times\n-   (if this is supported by the system - see pexecute.c).  */\n-\n-static int report_times;\n-\n /* Whether we should report subprocess execution times to a file.  */\n \n FILE *report_times_to_file = NULL;\n@@ -250,15 +205,6 @@ static enum save_temps {\n static char *save_temps_prefix = 0;\n static size_t save_temps_length = 0;\n \n-/* Nonzero means pass multiple source files to the compiler at one time.  */\n-\n-static int combine_flag = 0;\n-\n-/* Nonzero means use pipes to communicate between subprocesses.\n-   Overridden by either of the above two flags.  */\n-\n-static int use_pipes;\n-\n /* The compiler version.  */\n \n static const char *compiler_version;\n@@ -295,14 +241,6 @@ static struct obstack obstack;\n \n static struct obstack collect_obstack;\n \n-/* This is a list of a wrapper program and its arguments.\n-   e.g. wrapper_string of \"strace,-c\"\n-   will cause all programs to run as\n-       strace -c program arguments\n-   instead of just\n-       program arguments */\n-static const char  *wrapper_string;\n-\n /* Forward declaration for prototypes.  */\n struct path_prefix;\n struct prefix_list;\n@@ -3506,6 +3444,448 @@ alloc_switch (void)\n     }\n }\n \n+/* Save an option OPT with N_ARGS arguments in array ARGS, marking it\n+   as validated if VALIDATED.  */\n+\n+static void\n+save_switch (const char *opt, size_t n_args, const char *const *args,\n+\t     bool validated)\n+{\n+  alloc_switch ();\n+  switches[n_switches].part1 = opt + 1;\n+  if (n_args == 0)\n+    switches[n_switches].args = 0;\n+  else\n+    {\n+      switches[n_switches].args = XNEWVEC (const char *, n_args + 1);\n+      memcpy (switches[n_switches].args, args, n_args * sizeof (const char *));\n+      switches[n_switches].args[n_args] = NULL;\n+    }\n+\n+  switches[n_switches].live_cond = 0;\n+  switches[n_switches].validated = validated;\n+  switches[n_switches].ordering = 0;\n+  n_switches++;\n+}\n+\n+/* Handle an option DECODED that is unknown to the option-processing\n+   machinery, but may be known to specs.  */\n+\n+static bool\n+driver_unknown_option_callback (const struct cl_decoded_option *decoded)\n+{\n+  save_switch (decoded->canonical_option[0],\n+\t       decoded->canonical_option_num_elements - 1,\n+\t       &decoded->canonical_option[1], false);\n+\n+  return false;\n+}\n+\n+/* Handle an option DECODED that is not marked as CL_DRIVER.\n+   LANG_MASK will always be CL_DRIVER.  */\n+\n+static void\n+driver_wrong_lang_callback (const struct cl_decoded_option *decoded,\n+\t\t\t    unsigned int lang_mask ATTRIBUTE_UNUSED)\n+{\n+  /* At this point, non-driver options are accepted (and expected to\n+     be passed down by specs) unless marked to be rejected by the\n+     driver.  Options to be rejected by the driver but accepted by the\n+     compilers proper are treated just like completely unknown\n+     options.  */\n+  const struct cl_option *option = &cl_options[decoded->opt_index];\n+\n+  if (option->flags & CL_REJECT_DRIVER)\n+    error (\"unrecognized command line option %qs\",\n+\t   decoded->orig_option_with_args_text);\n+  else\n+    driver_unknown_option_callback (decoded);\n+}\n+\n+/* Note that an option (index OPT_INDEX, argument ARG, value VALUE)\n+   has been successfully handled with a handler for mask MASK.  */\n+\n+static void\n+driver_post_handling_callback (const struct cl_decoded_option *decoded ATTRIBUTE_UNUSED,\n+\t\t\t       unsigned int mask ATTRIBUTE_UNUSED)\n+{\n+  /* Nothing to do here.  */\n+}\n+\n+static const char *spec_lang = 0;\n+static int last_language_n_infiles;\n+\n+/* Handle a driver option; arguments and return value as for\n+   handle_option.  */\n+\n+static bool\n+driver_handle_option (const struct cl_decoded_option *decoded,\n+\t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n+\t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n+{\n+  size_t opt_index = decoded->opt_index;\n+  const char *arg = decoded->arg;\n+  const char *compare_debug_replacement_opt;\n+  int value = decoded->value;\n+  bool validated = false;\n+  bool do_save = true;\n+\n+  gcc_assert (kind == DK_UNSPECIFIED);\n+\n+  switch (opt_index)\n+    {\n+    case OPT_dumpspecs:\n+      {\n+\tstruct spec_list *sl;\n+\tinit_spec ();\n+\tfor (sl = specs; sl; sl = sl->next)\n+\t  printf (\"*%s:\\n%s\\n\\n\", sl->name, *(sl->ptr_spec));\n+\tif (link_command_spec)\n+\t  printf (\"*link_command:\\n%s\\n\\n\", link_command_spec);\n+\texit (0);\n+      }\n+\n+    case OPT_dumpversion:\n+      printf (\"%s\\n\", spec_version);\n+      exit (0);\n+\n+    case OPT_dumpmachine:\n+      printf (\"%s\\n\", spec_machine);\n+      exit (0);\n+\n+    case OPT_fversion:\n+      /* translate_options () has turned --version into -fversion.  */\n+      print_version = 1;\n+\n+      /* CPP driver cannot obtain switch from cc1_options.  */\n+      if (is_cpp_driver)\n+\tadd_preprocessor_option (\"--version\", strlen (\"--version\"));\n+      add_assembler_option (\"--version\", strlen (\"--version\"));\n+      add_linker_option (\"--version\", strlen (\"--version\"));\n+      break;\n+\n+    case OPT_fhelp:\n+      /* translate_options () has turned --help into -fhelp.  */\n+      print_help_list = 1;\n+\n+      /* CPP driver cannot obtain switch from cc1_options.  */\n+      if (is_cpp_driver)\n+\tadd_preprocessor_option (\"--help\", 6);\n+      add_assembler_option (\"--help\", 6);\n+      add_linker_option (\"--help\", 6);\n+      break;\n+\n+    case OPT_fhelp_:\n+      /* translate_options () has turned --help into -fhelp.  */\n+      print_subprocess_help = 2;\n+      break;\n+\n+    case OPT_ftarget_help:\n+      /* translate_options() has turned --target-help into -ftarget-help.  */\n+      print_subprocess_help = 1;\n+\n+      /* CPP driver cannot obtain switch from cc1_options.  */\n+      if (is_cpp_driver)\n+\tadd_preprocessor_option (\"--target-help\", 13);\n+      add_assembler_option (\"--target-help\", 13);\n+      add_linker_option (\"--target-help\", 13);\n+      break;\n+\n+    case OPT_pass_exit_codes:\n+    case OPT_print_search_dirs:\n+    case OPT_print_file_name_:\n+    case OPT_print_prog_name_:\n+    case OPT_print_multi_lib:\n+    case OPT_print_multi_directory:\n+    case OPT_print_sysroot:\n+    case OPT_print_multi_os_directory:\n+    case OPT_print_sysroot_headers_suffix:\n+    case OPT_time:\n+    case OPT_wrapper:\n+      /* These options set the variables specified in common.opt\n+\t automatically, and do not need to be saved for spec\n+\t processing.  */\n+      do_save = false;\n+      break;\n+\n+    case OPT_print_libgcc_file_name:\n+      print_file_name = \"libgcc.a\";\n+      do_save = false;\n+      break;\n+\n+    case OPT_fcompare_debug_second:\n+      compare_debug_second = 1;\n+      break;\n+\n+    case OPT_fcompare_debug:\n+      switch (value)\n+\t{\n+\tcase 0:\n+\t  compare_debug_replacement_opt = \"-fcompare-debug=\";\n+\t  arg = \"\";\n+\t  goto compare_debug_with_arg;\n+\n+\tcase 1:\n+\t  compare_debug_replacement_opt = \"-fcompare-debug=-gtoggle\";\n+\t  arg = \"-gtoggle\";\n+\t  goto compare_debug_with_arg;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n+\n+    case OPT_fcompare_debug_:\n+      compare_debug_replacement_opt = decoded->canonical_option[0];\n+    compare_debug_with_arg:\n+      gcc_assert (decoded->canonical_option_num_elements == 1);\n+      gcc_assert (arg != NULL);\n+      if (arg)\n+\tcompare_debug = 1;\n+      else\n+\tcompare_debug = -1;\n+      if (compare_debug < 0)\n+\tcompare_debug_opt = NULL;\n+      else\n+\tcompare_debug_opt = arg;\n+      save_switch (compare_debug_replacement_opt, 0, NULL, validated);\n+      return true;\n+\n+    case OPT_Wa_:\n+      {\n+\tint prev, j;\n+\t/* Pass the rest of this option to the assembler.  */\n+\n+\t/* Split the argument at commas.  */\n+\tprev = 0;\n+\tfor (j = 0; arg[j]; j++)\n+\t  if (arg[j] == ',')\n+\t    {\n+\t      add_assembler_option (arg + prev, j - prev);\n+\t      prev = j + 1;\n+\t    }\n+\n+\t/* Record the part after the last comma.  */\n+\tadd_assembler_option (arg + prev, j - prev);\n+      }\n+      do_save = false;\n+      break;\n+\n+    case OPT_Wp_:\n+      {\n+\tint prev, j;\n+\t/* Pass the rest of this option to the preprocessor.  */\n+\n+\t/* Split the argument at commas.  */\n+\tprev = 0;\n+\tfor (j = 0; arg[j]; j++)\n+\t  if (arg[j] == ',')\n+\t    {\n+\t      add_preprocessor_option (arg + prev, j - prev);\n+\t      prev = j + 1;\n+\t    }\n+\n+\t/* Record the part after the last comma.  */\n+\tadd_preprocessor_option (arg + prev, j - prev);\n+      }\n+      do_save = false;\n+      break;\n+\n+    case OPT_Wl_:\n+      {\n+\tint prev, j;\n+\t/* Split the argument at commas.  */\n+\tprev = 0;\n+\tfor (j = 0; arg[j]; j++)\n+\t  if (arg[j] == ',')\n+\t    {\n+\t      add_infile (save_string (arg + prev, j - prev), \"*\");\n+\t      prev = j + 1;\n+\t    }\n+\t/* Record the part after the last comma.  */\n+\tadd_infile (arg + prev, \"*\");\n+      }\n+      do_save = false;\n+      break;\n+\n+    case OPT_Xlinker:\n+      add_infile (arg, \"*\");\n+      do_save = false;\n+      break;\n+\n+    case OPT_Xpreprocessor:\n+      add_preprocessor_option (arg, strlen (arg));\n+      do_save = false;\n+      break;\n+\n+    case OPT_Xassembler:\n+      add_assembler_option (arg, strlen (arg));\n+      do_save = false;\n+      break;\n+\n+    case OPT_l:\n+      /* POSIX allows separation of -l and the lib arg; canonicalize\n+\t by concatenating -l with its arg */\n+      add_infile (concat (\"-l\", arg, NULL), \"*\");\n+      do_save = false;\n+      break;\n+\n+    case OPT_save_temps:\n+      save_temps_flag = SAVE_TEMPS_CWD;\n+      validated = true;\n+      break;\n+\n+    case OPT_save_temps_:\n+      if (strcmp (arg, \"cwd\") == 0)\n+\tsave_temps_flag = SAVE_TEMPS_CWD;\n+      else if (strcmp (arg, \"obj\") == 0\n+\t       || strcmp (arg, \"object\") == 0)\n+\tsave_temps_flag = SAVE_TEMPS_OBJ;\n+      else\n+\tfatal_error (\"%qs is an unknown -save-temps option\",\n+\t\t     decoded->orig_option_with_args_text);\n+      break;\n+\n+    case OPT_no_canonical_prefixes:\n+      /* Already handled as a special case, so ignored here.  */\n+      do_save = false;\n+      break;\n+\n+    case OPT_pipe:\n+      validated = true;\n+      /* Fall through.  */\n+    case OPT_combine:\n+      /* These options set the variables specified in common.opt\n+\t automatically, but do need to be saved for spec\n+\t processing.  */\n+      break;\n+\n+    case OPT_specs:\n+    case OPT_specs_:\n+      {\n+\tstruct user_specs *user = XNEW (struct user_specs);\n+\n+\tuser->next = (struct user_specs *) 0;\n+\tuser->filename = arg;\n+\tif (user_specs_tail)\n+\t  user_specs_tail->next = user;\n+\telse\n+\t  user_specs_head = user;\n+\tuser_specs_tail = user;\n+      }\n+      do_save = false;\n+      break;\n+\n+    case OPT__sysroot_:\n+      target_system_root = arg;\n+      target_system_root_changed = 1;\n+      do_save = false;\n+      break;\n+\n+    case OPT_time_:\n+      if (report_times_to_file)\n+\tfclose (report_times_to_file);\n+      report_times_to_file = fopen (arg, \"a\");\n+      do_save = false;\n+      break;\n+\n+    case OPT____:\n+      /* \"-###\"\n+\t This is similar to -v except that there is no execution\n+\t of the commands and the echoed arguments are quoted.  It\n+\t is intended for use in shell scripts to capture the\n+\t driver-generated command line.  */\n+      verbose_only_flag++;\n+      verbose_flag++;\n+      do_save = false;\n+      break;\n+\n+    case OPT_B:\n+      {\n+\tsize_t len = strlen (arg);\n+\n+\t/* Catch the case where the user has forgotten to append a\n+\t   directory separator to the path.  Note, they may be using\n+\t   -B to add an executable name prefix, eg \"i386-elf-\", in\n+\t   order to distinguish between multiple installations of\n+\t   GCC in the same directory.  Hence we must check to see\n+\t   if appending a directory separator actually makes a\n+\t   valid directory name.  */\n+\tif (!IS_DIR_SEPARATOR (arg[len - 1])\n+\t    && is_directory (arg, false))\n+\t  {\n+\t    char *tmp = XNEWVEC (char, len + 2);\n+\t    strcpy (tmp, arg);\n+\t    tmp[len] = DIR_SEPARATOR;\n+\t    tmp[++len] = 0;\n+\t    arg = tmp;\n+\t  }\n+\n+\tadd_prefix (&exec_prefixes, arg, NULL,\n+\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n+\tadd_prefix (&startfile_prefixes, arg, NULL,\n+\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n+\tadd_prefix (&include_prefixes, arg, NULL,\n+\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n+      }\n+      validated = true;\n+      break;\n+\n+    case OPT_v:\t/* Print our subcommands and print versions.  */\n+      verbose_flag++;\n+      break;\n+\n+    case OPT_x:\n+      spec_lang = arg;\n+      if (!strcmp (spec_lang, \"none\"))\n+\t/* Suppress the warning if -xnone comes after the last input\n+\t   file, because alternate command interfaces like g++ might\n+\t   find it useful to place -xnone after each input file.  */\n+\tspec_lang = 0;\n+      else\n+\tlast_language_n_infiles = n_infiles;\n+      do_save = false;\n+      break;\n+\n+    case OPT_S:\n+    case OPT_c:\n+    case OPT_E:\n+      /* have_c already set in a prescan above.  */\n+      break;\n+\n+    case OPT_o:\n+      have_o = 1;\n+#if defined(HAVE_TARGET_EXECUTABLE_SUFFIX) || defined(HAVE_TARGET_OBJECT_SUFFIX)\n+      arg = convert_filename (arg, ! have_c, 0);\n+#endif\n+      /* Save the output name in case -save-temps=obj was used.  */\n+      save_temps_prefix = xstrdup (arg);\n+      /* On some systems, ld cannot handle \"-o\" without a space.  So\n+\t split the option from its argument.  */\n+      save_switch (\"-o\", 1, &arg, validated);\n+      return true;\n+\n+    case OPT_static_libgcc:\n+    case OPT_shared_libgcc:\n+    case OPT_static_libgfortran:\n+    case OPT_static_libstdc__:\n+      /* These are always valid, since gcc.c itself understands the\n+\t first two, gfortranspec.c understands -static-libgfortran and\n+\t g++spec.c understands -static-libstdc++ */\n+      validated = true;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (do_save)\n+    save_switch (decoded->canonical_option[0],\n+\t\t decoded->canonical_option_num_elements - 1,\n+\t\t &decoded->canonical_option[1], validated);\n+  return true;\n+}\n+\n /* Create the vector `switches' and its contents.\n    Store its length in `n_switches'.  */\n \n@@ -3515,11 +3895,12 @@ process_command (int argc, const char **argv)\n   int i;\n   const char *temp;\n   char *temp1;\n-  const char *spec_lang = 0;\n-  int last_language_n_infiles;\n   const char *tooldir_prefix;\n   char *(*get_relative_prefix) (const char *, const char *,\n \t\t\t\tconst char *) = NULL;\n+  struct cl_option_handlers handlers;\n+  struct cl_decoded_option *decoded_options;\n+  unsigned int decoded_options_count, j;\n \n   GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n \n@@ -3735,538 +4116,74 @@ process_command (int argc, const char **argv)\n \n   last_language_n_infiles = -1;\n \n-  for (i = 1; i < argc; i++)\n-    {\n-      const char *p = NULL;\n-      int c = 0;\n-\n-      if (argv[i][0] == '-' && argv[i][1] != 0)\n-\t{\n-\t  p = &argv[i][1];\n-\t  c = *p;\n-\t}\n-\n-      if (! strcmp (argv[i], \"-dumpspecs\"))\n-\t{\n-\t  struct spec_list *sl;\n-\t  init_spec ();\n-\t  for (sl = specs; sl; sl = sl->next)\n-\t    printf (\"*%s:\\n%s\\n\\n\", sl->name, *(sl->ptr_spec));\n-\t  if (link_command_spec)\n-\t    printf (\"*link_command:\\n%s\\n\\n\", link_command_spec);\n-\t  exit (0);\n-\t}\n-      else if (! strcmp (argv[i], \"-dumpversion\"))\n-\t{\n-\t  printf (\"%s\\n\", spec_version);\n-\t  exit (0);\n-\t}\n-      else if (! strcmp (argv[i], \"-dumpmachine\"))\n-\t{\n-\t  printf (\"%s\\n\", spec_machine);\n-\t  exit (0);\n-\t}\n-      else if (strcmp (argv[i], \"-fversion\") == 0)\n-\t{\n-\t  /* translate_options () has turned --version into -fversion.  */\n-\t  print_version = 1;\n+  decode_cmdline_options_to_array (argc, argv, CL_DRIVER,\n+\t\t\t\t   &decoded_options, &decoded_options_count);\n \n-\t  /* CPP driver cannot obtain switch from cc1_options.  */\n-\t  if (is_cpp_driver)\n-\t    add_preprocessor_option (\"--version\", strlen (\"--version\"));\n-\t  add_assembler_option (\"--version\", strlen (\"--version\"));\n-\t  add_linker_option (\"--version\", strlen (\"--version\"));\n+  handlers.unknown_option_callback = driver_unknown_option_callback;\n+  handlers.wrong_lang_callback = driver_wrong_lang_callback;\n+  handlers.post_handling_callback = driver_post_handling_callback;\n+  handlers.num_handlers = 1;\n+  handlers.handlers[0].handler = driver_handle_option;\n+  handlers.handlers[0].mask = CL_DRIVER;\n \n-\t  goto normal_switch;\n-\t}\n-      else if (strcmp (argv[i], \"-fhelp\") == 0)\n-\t{\n-\t  /* translate_options () has turned --help into -fhelp.  */\n-\t  print_help_list = 1;\n-\n-\t  /* CPP driver cannot obtain switch from cc1_options.  */\n-\t  if (is_cpp_driver)\n-\t    add_preprocessor_option (\"--help\", 6);\n-\t  add_assembler_option (\"--help\", 6);\n-\t  add_linker_option (\"--help\", 6);\n-\n-\t  goto normal_switch;\n-\t}\n-      else if (strncmp (argv[i], \"-fhelp=\", 7) == 0)\n-\t{\n-\t  /* translate_options () has turned --help into -fhelp.  */\n-\t  print_subprocess_help = 2;\n-\n-\t  goto normal_switch;\n-\t}\n-      else if (strcmp (argv[i], \"-ftarget-help\") == 0)\n-\t{\n-\t  /* translate_options() has turned --target-help into -ftarget-help.  */\n-\t  print_subprocess_help = 1;\n-\n-\t  /* CPP driver cannot obtain switch from cc1_options.  */\n-\t  if (is_cpp_driver)\n-\t    add_preprocessor_option (\"--target-help\", 13);\n-\t  add_assembler_option (\"--target-help\", 13);\n-\t  add_linker_option (\"--target-help\", 13);\n-\n-\t  goto normal_switch;\n-\t}\n-      else if (! strcmp (argv[i], \"-pass-exit-codes\"))\n-\t{\n-\t  pass_exit_codes = 1;\n-\t}\n-      else if (! strcmp (argv[i], \"-print-search-dirs\"))\n-\tprint_search_dirs = 1;\n-      else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n-\tprint_file_name = \"libgcc.a\";\n-      else if (! strncmp (argv[i], \"-print-file-name=\", 17))\n-\tprint_file_name = argv[i] + 17;\n-      else if (! strncmp (argv[i], \"-print-prog-name=\", 17))\n-\tprint_prog_name = argv[i] + 17;\n-      else if (! strcmp (argv[i], \"-print-multi-lib\"))\n-\tprint_multi_lib = 1;\n-      else if (! strcmp (argv[i], \"-print-multi-directory\"))\n-\tprint_multi_directory = 1;\n-      else if (! strcmp (argv[i], \"-print-sysroot\"))\n-\tprint_sysroot = 1;\n-      else if (! strcmp (argv[i], \"-print-multi-os-directory\"))\n-\tprint_multi_os_directory = 1;\n-      else if (! strcmp (argv[i], \"-print-sysroot-headers-suffix\"))\n-\tprint_sysroot_headers_suffix = 1;\n-      else if (! strcmp (argv[i], \"-fcompare-debug-second\"))\n-\t{\n-\t  compare_debug_second = 1;\n-\t  goto normal_switch;\n-\t}\n-      else if (! strcmp (argv[i], \"-fno-compare-debug\"))\n-\t{\n-\t  argv[i] = \"-fcompare-debug=\";\n-\t  p = &argv[i][1];\n-\t  goto compare_debug_with_arg;\n-\t}\n-      else if (! strcmp (argv[i], \"-fcompare-debug\"))\n-\t{\n-\t  argv[i] = \"-fcompare-debug=-gtoggle\";\n-\t  p = &argv[i][1];\n-\t  goto compare_debug_with_arg;\n-\t}\n-#define OPT \"-fcompare-debug=\"\n-      else if (! strncmp (argv[i], OPT, sizeof (OPT) - 1))\n-\t{\n-\t  const char *opt;\n-\tcompare_debug_with_arg:\n-\t  opt = argv[i] + sizeof (OPT) - 1;\n-#undef OPT\n-\t  if (*opt)\n-\t    compare_debug = 1;\n-\t  else\n-\t    compare_debug = -1;\n-\t  if (compare_debug < 0)\n-\t    compare_debug_opt = NULL;\n-\t  else\n-\t    compare_debug_opt = opt;\n-\t  goto normal_switch;\n-\t}\n-      else if (! strncmp (argv[i], \"-Wa,\", 4))\n-\t{\n-\t  int prev, j;\n-\t  /* Pass the rest of this option to the assembler.  */\n-\n-\t  /* Split the argument at commas.  */\n-\t  prev = 4;\n-\t  for (j = 4; argv[i][j]; j++)\n-\t    if (argv[i][j] == ',')\n-\t      {\n-\t\tadd_assembler_option (argv[i] + prev, j - prev);\n-\t\tprev = j + 1;\n-\t      }\n-\n-\t  /* Record the part after the last comma.  */\n-\t  add_assembler_option (argv[i] + prev, j - prev);\n-\t}\n-      else if (! strncmp (argv[i], \"-Wp,\", 4))\n-\t{\n-\t  int prev, j;\n-\t  /* Pass the rest of this option to the preprocessor.  */\n-\n-\t  /* Split the argument at commas.  */\n-\t  prev = 4;\n-\t  for (j = 4; argv[i][j]; j++)\n-\t    if (argv[i][j] == ',')\n-\t      {\n-\t\tadd_preprocessor_option (argv[i] + prev, j - prev);\n-\t\tprev = j + 1;\n-\t      }\n-\n-\t  /* Record the part after the last comma.  */\n-\t  add_preprocessor_option (argv[i] + prev, j - prev);\n-\t}\n-      else if (strncmp (argv[i], \"-Wl,\", 4) == 0)\n-\t{\n-\t  int prev, j;\n-\t  /* Split the argument at commas.  */\n-\t  prev = 4;\n-\t  for (j = 4; argv[i][j]; j++)\n-\t    if (argv[i][j] == ',')\n-\t      {\n-\t\tadd_infile (save_string (argv[i] + prev, j - prev), \"*\");\n-\t\tprev = j + 1;\n-\t      }\n-\t  /* Record the part after the last comma.  */\n-\t  add_infile (argv[i] + prev, \"*\");\n-\t}\n-      else if (strcmp (argv[i], \"-Xlinker\") == 0)\n-\t{\n-\t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to %<-Xlinker%> is missing\");\n-\n-\t  add_infile (argv[i+1], \"*\");\n-\t  i++;\n-\t}\n-      else if (strcmp (argv[i], \"-Xpreprocessor\") == 0)\n-\t{\n-\t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to %<-Xpreprocessor%> is missing\");\n-\n-\t  add_preprocessor_option (argv[i+1], strlen (argv[i+1]));\n-\t  i++;\n-\t}\n-      else if (strcmp (argv[i], \"-Xassembler\") == 0)\n-\t{\n-\t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to %<-Xassembler%> is missing\");\n-\n-\t  add_assembler_option (argv[i+1], strlen (argv[i+1]));\n-\t  i++;\n-\t}\n-      else if (strcmp (argv[i], \"-l\") == 0)\n-\t{\n-\t  if (i + 1 == argc)\n-\t    fatal_error (\"argument to %<-l%> is missing\");\n-\n-\t  /* POSIX allows separation of -l and the lib arg;\n-\t     canonicalize by concatenating -l with its arg */\n-\t  add_infile (concat (\"-l\", argv[i + 1], NULL), \"*\");\n-\t  i++;\n-\t}\n-      else if (strncmp (argv[i], \"-l\", 2) == 0)\n-\t{\n-\t  add_infile (argv[i], \"*\");\n-\t}\n-      else if (strcmp (argv[i], \"-save-temps\") == 0)\n-\t{\n-\t  save_temps_flag = SAVE_TEMPS_CWD;\n-\t  goto normal_switch;\n-\t}\n-      else if (strncmp (argv[i], \"-save-temps=\", 12) == 0)\n-\t{\n-\t  if (strcmp (argv[i]+12, \"cwd\") == 0)\n-\t    save_temps_flag = SAVE_TEMPS_CWD;\n-\t  else if (strcmp (argv[i]+12, \"obj\") == 0\n-\t\t   || strcmp (argv[i]+12, \"object\") == 0)\n-\t    save_temps_flag = SAVE_TEMPS_OBJ;\n-\t  else\n-\t    fatal_error (\"%qs is an unknown -save-temps option\", argv[i]);\n-\t  goto normal_switch;\n-\t}\n-      else if (strcmp (argv[i], \"-no-canonical-prefixes\") == 0)\n-\t/* Already handled as a special case, so ignored here.  */\n-\t;\n-      else if (strcmp (argv[i], \"-combine\") == 0)\n-\t{\n-\t  combine_flag = 1;\n-\t  goto normal_switch;\n-\t}\n-      else if (strcmp (argv[i], \"-specs\") == 0)\n-\t{\n-\t  struct user_specs *user = XNEW (struct user_specs);\n-\t  if (++i >= argc)\n-\t    fatal_error (\"argument to %<-specs%> is missing\");\n-\n-\t  user->next = (struct user_specs *) 0;\n-\t  user->filename = argv[i];\n-\t  if (user_specs_tail)\n-\t    user_specs_tail->next = user;\n-\t  else\n-\t    user_specs_head = user;\n-\t  user_specs_tail = user;\n-\t}\n-      else if (strncmp (argv[i], \"-specs=\", 7) == 0)\n-\t{\n-\t  struct user_specs *user = XNEW (struct user_specs);\n-\t  if (strlen (argv[i]) == 7)\n-\t    fatal_error (\"argument to %<-specs=%> is missing\");\n-\n-\t  user->next = (struct user_specs *) 0;\n-\t  user->filename = argv[i] + 7;\n-\t  if (user_specs_tail)\n-\t    user_specs_tail->next = user;\n-\t  else\n-\t    user_specs_head = user;\n-\t  user_specs_tail = user;\n-\t}\n-      else if (! strncmp (argv[i], \"--sysroot=\", strlen (\"--sysroot=\")))\n-\t{\n-\t  target_system_root = argv[i] + strlen (\"--sysroot=\");\n-\t  target_system_root_changed = 1;\n-\t}\n-      else if (strcmp (argv[i], \"-time\") == 0)\n-\treport_times = 1;\n-      else if (strncmp (argv[i], \"-time=\", sizeof (\"-time=\") - 1) == 0)\n-\t{\n-\t  if (report_times_to_file)\n-\t    fclose (report_times_to_file);\n-\t  report_times_to_file = fopen (argv[i] + sizeof (\"-time=\") - 1, \"a\");\n-\t}\n-      else if (strcmp (argv[i], \"-pipe\") == 0)\n-\t{\n-\t  /* -pipe has to go into the switches array as well as\n-\t     setting a flag.  */\n-\t  use_pipes = 1;\n-\t  goto normal_switch;\n-\t}\n-      else if (strcmp (argv[i], \"-wrapper\") == 0)\n-        {\n-\t  if (++i >= argc)\n-\t    fatal_error (\"argument to %<-wrapper%> is missing\");\n-\n-          wrapper_string = argv[i];\n-        }\n-      else if (strcmp (argv[i], \"-###\") == 0)\n+  for (j = 1; j < decoded_options_count; j++)\n+    {\n+      switch (decoded_options[j].opt_index)\n \t{\n-\t  /* This is similar to -v except that there is no execution\n-\t     of the commands and the echoed arguments are quoted.  It\n-\t     is intended for use in shell scripts to capture the\n-\t     driver-generated command line.  */\n-\t  verbose_only_flag++;\n-\t  verbose_flag++;\n+\tcase OPT_S:\n+\tcase OPT_c:\n+\tcase OPT_E:\n+\t  have_c = 1;\n+\t  break;\n \t}\n-      else if (argv[i][0] == '-' && argv[i][1] != 0)\n-\t{\n-\t  switch (c)\n-\t    {\n-\t    case 'B':\n-\t      {\n-\t\tconst char *value;\n-\t\tint len;\n-\n-\t\tif (p[1] == 0 && i + 1 == argc)\n-\t\t  fatal_error (\"argument to %<-B%> is missing\");\n-\t\tif (p[1] == 0)\n-\t\t  value = argv[i + 1];\n-\t\telse\n-\t\t  value = p + 1;\n-\n-\t\tlen = strlen (value);\n-\n-\t\t/* Catch the case where the user has forgotten to append a\n-\t\t   directory separator to the path.  Note, they may be using\n-\t\t   -B to add an executable name prefix, eg \"i386-elf-\", in\n-\t\t   order to distinguish between multiple installations of\n-\t\t   GCC in the same directory.  Hence we must check to see\n-\t\t   if appending a directory separator actually makes a\n-\t\t   valid directory name.  */\n-\t\tif (! IS_DIR_SEPARATOR (value [len - 1])\n-\t\t    && is_directory (value, false))\n-\t\t  {\n-\t\t    char *tmp = XNEWVEC (char, len + 2);\n-\t\t    strcpy (tmp, value);\n-\t\t    tmp[len] = DIR_SEPARATOR;\n-\t\t    tmp[++ len] = 0;\n-\t\t    value = tmp;\n-\t\t  }\n-\n-\t\tadd_prefix (&exec_prefixes, value, NULL,\n-\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n-\t\tadd_prefix (&startfile_prefixes, value, NULL,\n-\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n-\t\tadd_prefix (&include_prefixes, value, NULL,\n-\t\t\t    PREFIX_PRIORITY_B_OPT, 0, 0);\n-\t      }\n-\t      goto normal_switch;\n-\n-\t    case 'v':\t/* Print our subcommands and print versions.  */\n-\t      /* If they do anything other than exactly `-v', don't set\n-\t\t verbose_flag; rather, continue on to give the error.  */\n-\t      if (p[1] != 0)\n-\t\tbreak;\n-\t      verbose_flag++;\n-\t      goto normal_switch;\n-\n-\t    case 'x':\n-\t      if (p[1] == 0 && i + 1 == argc)\n-\t\tfatal_error (\"argument to %<-x%> is missing\");\n-\t      if (p[1] == 0)\n-\t\tspec_lang = argv[++i];\n-\t      else\n-\t\tspec_lang = p + 1;\n-\t      if (! strcmp (spec_lang, \"none\"))\n-\t\t/* Suppress the warning if -xnone comes after the last input\n-\t\t   file, because alternate command interfaces like g++ might\n-\t\t   find it useful to place -xnone after each input file.  */\n-\t\tspec_lang = 0;\n-\t      else\n-\t\tlast_language_n_infiles = n_infiles;\n-\t      break;\n-\n-\t    case 'S':\n-\t    case 'c':\n-\t    case 'E':\n-\t      if (p[1] == 0)\n-\t\thave_c = 1;\n-\t      goto normal_switch;\n-\n-\t    case 'o':\n-\t      have_o = 1;\n-#if defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n-\t      if (! have_c)\n-\t\t{\n-\t\t  int skip;\n-\n-\t\t  /* Forward scan, just in case -S, -E or -c is specified\n-\t\t     after -o.  */\n-\t\t  int j = i + 1;\n-\t\t  if (p[1] == 0)\n-\t\t    ++j;\n-\t\t  while (j < argc)\n-\t\t    {\n-\t\t      if (argv[j][0] == '-')\n-\t\t\t{\n-\t\t\t  if (SWITCH_CURTAILS_COMPILATION (argv[j][1])\n-\t\t\t      && argv[j][2] == 0)\n-\t\t\t    {\n-\t\t\t      have_c = 1;\n-\t\t\t      break;\n-\t\t\t    }\n-\t\t\t  else if ((skip = SWITCH_TAKES_ARG (argv[j][1])))\n-\t\t\t    j += skip - (argv[j][2] != 0);\n-\t\t\t  else if ((skip = WORD_SWITCH_TAKES_ARG (argv[j] + 1)))\n-\t\t\t    j += skip;\n-\t\t\t}\n-\t\t      j++;\n-\t\t    }\n-\t\t}\n-#endif\n-#if defined(HAVE_TARGET_EXECUTABLE_SUFFIX) || defined(HAVE_TARGET_OBJECT_SUFFIX)\n-\t      if (p[1] == 0)\n-\t\targv[i + 1] = convert_filename (argv[i + 1], ! have_c, 0);\n-\t      else\n-\t\t{\n-\t\t  argv[i] = convert_filename (argv[i], ! have_c, 0);\n-\t\t  p = &argv[i][1];\n-\t\t}\n-#endif\n-\t      /* Save the output name in case -save-temps=obj was used.  */\n-\t      if ((p[1] == 0) && argv[i + 1])\n-\t\tsave_temps_prefix = xstrdup(argv[i + 1]);\n-\t      else\n-\t\tsave_temps_prefix = xstrdup(argv[i] + 1);\n-\t      goto normal_switch;\n-\n-\t    default:\n-\t    normal_switch:\n-\n-\t      alloc_switch ();\n-\t      switches[n_switches].part1 = p;\n-\t      /* Deal with option arguments in separate argv elements.  */\n-\t      if ((SWITCH_TAKES_ARG (c) > (p[1] != 0))\n-\t\t  || WORD_SWITCH_TAKES_ARG (p))\n-\t\t{\n-\t\t  int j = 0;\n-\t\t  int n_args = WORD_SWITCH_TAKES_ARG (p);\n+      if (have_c)\n+\tbreak;\n+    }\n \n-\t\t  if (n_args == 0)\n-\t\t    {\n-\t\t      /* Count only the option arguments in separate\n-\t\t\t argv elements.  */\n-\t\t      n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n-\t\t    }\n-\t\t  if (i + n_args >= argc)\n-\t\t    fatal_error (\"argument to %<-%s%> is missing\", p);\n-\t\t  switches[n_switches].args\n-\t\t    = XNEWVEC (const char *, n_args + 1);\n-\t\t  while (j < n_args)\n-\t\t    switches[n_switches].args[j++] = argv[++i];\n-\t\t  /* Null-terminate the vector.  */\n-\t\t  switches[n_switches].args[j] = 0;\n-\t\t}\n-\t      else if (c == 'o')\n-\t\t{\n-\t\t  /* On some systems, ld cannot handle \"-o\" without\n-\t\t     a space.  So split the option from its argument.  */\n-\t\t  char *part1 = XNEWVEC (char, 2);\n-\t\t  part1[0] = c;\n-\t\t  part1[1] = '\\0';\n-\n-\t\t  switches[n_switches].part1 = part1;\n-\t\t  switches[n_switches].args = XNEWVEC (const char *, 2);\n-\t\t  switches[n_switches].args[0] = xstrdup (p+1);\n-\t\t  switches[n_switches].args[1] = 0;\n-\t\t}\n-\t      else\n-\t\tswitches[n_switches].args = 0;\n-\n-\t      switches[n_switches].live_cond = 0;\n-\t      switches[n_switches].validated = 0;\n-\t      switches[n_switches].ordering = 0;\n-\t      /* These are always valid, since gcc.c itself understands the\n-\t\t first four, gfortranspec.c understands -static-libgfortran\n-\t\t and g++spec.c understands -static-libstdc++ */\n-\t      if (!strcmp (p, \"save-temps\")\n-\t\t  || !strcmp (p, \"static-libgcc\")\n-\t\t  || !strcmp (p, \"shared-libgcc\")\n-\t\t  || !strcmp (p, \"pipe\")\n-\t\t  || !strcmp (p, \"static-libgfortran\")\n-\t\t  || !strcmp (p, \"static-libstdc++\"))\n-\t\tswitches[n_switches].validated = 1;\n-\t      else\n-\t\t{\n-\t\t  char ch = switches[n_switches].part1[0];\n-\t\t  if (ch == 'B')\n-\t\t    switches[n_switches].validated = 1;\n-\t\t}\n-\t      n_switches++;\n-\t    }\n-\t}\n-      else\n+  for (j = 1; j < decoded_options_count; j++)\n+    {\n+      if (decoded_options[j].opt_index == OPT_SPECIAL_input_file)\n \t{\n-          const char *p = strrchr (argv[i], '@');\n+\t  const char *arg = decoded_options[j].arg;\n+          const char *p = strrchr (arg, '@');\n           char *fname;\n \t  long offset;\n \t  int consumed;\n #ifdef HAVE_TARGET_OBJECT_SUFFIX\n-\t  argv[i] = convert_filename (argv[i], 0, access (argv[i], F_OK));\n+\t  arg = convert_filename (arg, 0, access (arg, F_OK));\n #endif\n \t  /* For LTO static archive support we handle input file\n \t     specifications that are composed of a filename and\n \t     an offset like FNAME@OFFSET.  */\n \t  if (p\n-\t      && p != argv[i]\n+\t      && p != arg\n \t      && sscanf (p, \"@%li%n\", &offset, &consumed) >= 1\n \t      && strlen (p) == (unsigned int)consumed)\n \t    {\n-              fname = (char *)xmalloc (p - argv[i] + 1);\n-              memcpy (fname, argv[i], p - argv[i]);\n-              fname[p - argv[i]] = '\\0';\n+              fname = (char *)xmalloc (p - arg + 1);\n+              memcpy (fname, arg, p - arg);\n+              fname[p - arg] = '\\0';\n \t      /* Only accept non-stdin and existing FNAME parts, otherwise\n \t\t try with the full name.  */\n \t      if (strcmp (fname, \"-\") == 0 || access (fname, F_OK) < 0)\n \t\t{\n \t\t  free (fname);\n-\t\t  fname = xstrdup (argv[i]);\n+\t\t  fname = xstrdup (arg);\n \t\t}\n \t    }\n \t  else\n-\t    fname = xstrdup (argv[i]);\n+\t    fname = xstrdup (arg);\n  \n           if (strcmp (fname, \"-\") != 0 && access (fname, F_OK) < 0)\n \t    perror_with_name (fname);\n           else\n-\t    add_infile (argv[i], spec_lang);\n+\t    add_infile (arg, spec_lang);\n \n           free (fname);\n+\t  continue;\n \t}\n+\n+      read_cmdline_option (decoded_options + j, CL_DRIVER, &handlers);\n     }\n \n   /* If -save-temps=obj and -o name, create the prefix to use for %b."}, {"sha": "d0da14b3b69c17e861f534a994dfbbd2db690ec7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -1,3 +1,7 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt (MD_, MMD_, version): Mark RejectDriver.\n+\n 2010-08-05  David Daney  <ddaney@caviumnetworks.com>\n \n \t* class.c (build_utf8_ref): Fix code formatting from previous commit."}, {"sha": "6dba0840a009ab875bcb4535e23721b7c1e5766e", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -33,7 +33,7 @@ Java\n ; Documented for C\n \n MD_\n-Java Undocumented\n+Java Undocumented RejectDriver\n ; Documented for C\n \n MF\n@@ -45,7 +45,7 @@ Java\n ; Documented for C\n \n MMD_\n-Java Undocumented\n+Java Undocumented RejectDriver\n ; Documented for C\n \n MP\n@@ -209,7 +209,7 @@ Java Joined\n Set the target VM version\n \n version\n-Java\n+Java RejectDriver\n \n ;\n ; Warnings handled by ecj."}, {"sha": "4ff4068cc0c2fadd51334ce10d0e4647bd22ba0a", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -78,6 +78,8 @@ function switch_flags (flags)\n \tresult = result \\\n \t  test_flag(\"Common\", flags, \" | CL_COMMON\") \\\n \t  test_flag(\"Target\", flags, \" | CL_TARGET\") \\\n+\t  test_flag(\"Driver\", flags, \" | CL_DRIVER\") \\\n+\t  test_flag(\"RejectDriver\", flags, \" | CL_REJECT_DRIVER\") \\\n \t  test_flag(\"Save\", flags, \" | CL_SAVE\") \\\n \t  test_flag(\"Joined\", flags, \" | CL_JOINED\") \\\n \t  test_flag(\"JoinedOrMissing\", flags, \" | CL_JOINED | CL_MISSING_OK\") \\\n@@ -128,7 +130,7 @@ function static_var(name, flags)\n # Return the type of variable that should be associated with the given flags.\n function var_type(flags)\n {\n-\tif (!flag_set_p(\"Joined.*\", flags))\n+\tif (!flag_set_p(\"Joined.*\", flags) && !flag_set_p(\"Separate\", flags))\n \t\treturn \"int \"\n \telse if (flag_set_p(\"UInteger\", flags))\n \t\treturn \"int \"\n@@ -143,7 +145,7 @@ function var_type_struct(flags)\n {\n \tif (flag_set_p(\"UInteger\", flags))\n \t\treturn \"int \"\n-\telse if (!flag_set_p(\"Joined.*\", flags)) {\n+\telse if (!flag_set_p(\"Joined.*\", flags) && !flag_set_p(\"Separate\", flags)) {\n \t\tif (flag_set_p(\".*Mask.*\", flags))\n \t\t\treturn \"int \"\n \t\telse"}, {"sha": "f7c10407c3883798a8b2f6370392a33c36443b5e", "filename": "gcc/opts-common.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -128,8 +128,9 @@ integral_argument (const char *arg)\n }\n \n /* Decode the switch beginning at ARGV for the language indicated by\n-   LANG_MASK, into the structure *DECODED.  Returns the number of\n-   switches consumed.  */\n+   LANG_MASK (including CL_COMMON and CL_TARGET if applicable), into\n+   the structure *DECODED.  Returns the number of switches\n+   consumed.  */\n \n static unsigned int\n decode_cmdline_option (const char **argv, unsigned int lang_mask,\n@@ -147,7 +148,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \n   opt = argv[0];\n \n-  opt_index = find_opt (opt + 1, lang_mask | CL_COMMON | CL_TARGET);\n+  opt_index = find_opt (opt + 1, lang_mask);\n   if (opt_index == OPT_SPECIAL_unknown\n       && (opt[1] == 'W' || opt[1] == 'f' || opt[1] == 'm')\n       && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n@@ -161,7 +162,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n       memcpy (dup + 2, opt + 5, len - 2 + 1);\n       opt = dup;\n       value = 0;\n-      opt_index = find_opt (opt + 1, lang_mask | CL_COMMON | CL_TARGET);\n+      opt_index = find_opt (opt + 1, lang_mask);\n     }\n \n   if (opt_index == OPT_SPECIAL_unknown)\n@@ -218,11 +219,11 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     }\n \n   /* Check if this is a switch for a different front end.  */\n-  if (!(option->flags & (lang_mask | CL_COMMON | CL_TARGET)))\n+  if (!(option->flags & lang_mask))\n     errors |= CL_ERR_WRONG_LANG;\n   else if ((option->flags & CL_TARGET)\n-\t   && (option->flags & CL_LANG_ALL)\n-\t   && !(option->flags & lang_mask))\n+\t   && (option->flags & (CL_LANG_ALL | CL_DRIVER))\n+\t   && !(option->flags & (lang_mask & ~CL_COMMON & ~CL_TARGET)))\n     /* Complain for target flag language mismatches if any languages\n        are specified.  */\n       errors |= CL_ERR_WRONG_LANG;\n@@ -301,8 +302,9 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n    array and *DECODED_OPTIONS_COUNT to the number of entries in the\n    array.  The first entry in the array is always one for the program\n    name (OPT_SPECIAL_program_name).  LANG_MASK indicates the language\n-   applicable for decoding.  Do not produce any diagnostics or set\n-   state outside of these variables.  */\n+   flags applicable for decoding (including CL_COMMON and CL_TARGET if\n+   those options should be considered applicable).  Do not produce any\n+   diagnostics or set state outside of these variables.  */\n \n void\n decode_cmdline_options_to_array (unsigned int argc, const char **argv, "}, {"sha": "d04e81c64937b8f3fe5aa3b5353eac074453d4d9", "filename": "gcc/opts.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -418,17 +418,27 @@ complain_wrong_lang (const struct cl_decoded_option *decoded,\n {\n   const struct cl_option *option = &cl_options[decoded->opt_index];\n   const char *text = decoded->orig_option_with_args_text;\n-  char *ok_langs, *bad_lang;\n+  char *ok_langs = NULL, *bad_lang = NULL;\n+  unsigned int opt_flags = option->flags;\n \n   if (!lang_hooks.complain_wrong_lang_p (option))\n     return;\n \n-  ok_langs = write_langs (option->flags);\n-  bad_lang = write_langs (lang_mask);\n-\n-  /* Eventually this should become a hard error IMO.  */\n-  warning (0, \"command line option \\\"%s\\\" is valid for %s but not for %s\",\n-\t   text, ok_langs, bad_lang);\n+  opt_flags &= ((1U << cl_lang_count) - 1) | CL_DRIVER;\n+  if (opt_flags != CL_DRIVER)\n+    ok_langs = write_langs (opt_flags);\n+  if (lang_mask != CL_DRIVER)\n+    bad_lang = write_langs (lang_mask);\n+\n+  if (opt_flags == CL_DRIVER)\n+    error (\"command line option %qs is valid for the driver but not for %s\",\n+\t   text, bad_lang);\n+  else if (lang_mask == CL_DRIVER)\n+    gcc_unreachable ();\n+  else\n+    /* Eventually this should become a hard error IMO.  */\n+    warning (0, \"command line option %qs is valid for %s but not for %s\",\n+\t     text, ok_langs, bad_lang);\n \n   free (ok_langs);\n   free (bad_lang);\n@@ -681,7 +691,8 @@ decode_options (unsigned int argc, const char **argv,\n   else\n     lang_mask = initial_lang_mask;\n \n-  decode_cmdline_options_to_array (argc, argv, lang_mask,\n+  decode_cmdline_options_to_array (argc, argv,\n+\t\t\t\t   lang_mask | CL_COMMON | CL_TARGET,\n \t\t\t\t   decoded_options, decoded_options_count);\n   if (first_time_p)\n     /* Perform language-specific options initialization.  */\n@@ -1193,6 +1204,12 @@ print_filtered_help (unsigned int include_flags,\n       if ((option->flags & exclude_flags) != 0)\n \tcontinue;\n \n+      /* The driver currently prints its own help text.  */\n+      if ((option->flags & CL_DRIVER) != 0\n+\t  && (option->flags & (((1U << cl_lang_count) - 1)\n+\t\t\t       | CL_COMMON | CL_TARGET)) == 0)\n+\tcontinue;\n+\n       found = true;\n       /* Skip switches that have already been printed.  */\n       if (printed[i])\n@@ -1333,6 +1350,7 @@ print_specific_help (unsigned int include_flags,\n       switch (flag & include_flags)\n \t{\n \tcase 0:\n+\tcase CL_DRIVER:\n \t  break;\n \n \tcase CL_TARGET:\n@@ -1436,7 +1454,8 @@ common_handle_option (const struct cl_decoded_option *decoded,\n \tprint_specific_help (0, undoc_mask, all_langs_mask);\n \t/* Then display any remaining, non-language options.  */\n \tfor (i = CL_MIN_OPTION_CLASS; i <= CL_MAX_OPTION_CLASS; i <<= 1)\n-\t  print_specific_help (i, undoc_mask, 0);\n+\t  if (i != CL_DRIVER)\n+\t    print_specific_help (i, undoc_mask, 0);\n \texit_after_options = true;\n \tbreak;\n       }"}, {"sha": "18dfdc2a09610fd2c5e14e9757fb2bd32e12a4a6", "filename": "gcc/opts.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603349bf3ddd56a90ad8091a41038f0c38eb4838/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=603349bf3ddd56a90ad8091a41038f0c38eb4838", "patch": "@@ -67,11 +67,12 @@ extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n extern const unsigned int cl_lang_count;\n \n-#define CL_PARAMS               (1 << 17) /* Fake entry.  Used to display --param info with --help.  */\n-#define CL_WARNING\t\t(1 << 18) /* Enables an (optional) warning message.  */\n-#define CL_OPTIMIZATION\t\t(1 << 19) /* Enables an (optional) optimization.  */\n-#define CL_TARGET\t\t(1 << 20) /* Target-specific option.  */\n-#define CL_COMMON\t\t(1 << 21) /* Language-independent.  */\n+#define CL_PARAMS               (1 << 15) /* Fake entry.  Used to display --param info with --help.  */\n+#define CL_WARNING\t\t(1 << 16) /* Enables an (optional) warning message.  */\n+#define CL_OPTIMIZATION\t\t(1 << 17) /* Enables an (optional) optimization.  */\n+#define CL_DRIVER\t\t(1 << 18) /* Driver option.  */\n+#define CL_TARGET\t\t(1 << 19) /* Target-specific option.  */\n+#define CL_COMMON\t\t(1 << 20) /* Language-independent.  */\n \n #define CL_MIN_OPTION_CLASS\tCL_PARAMS\n #define CL_MAX_OPTION_CLASS\tCL_COMMON\n@@ -81,6 +82,7 @@ extern const unsigned int cl_lang_count;\n    This distinction is important because --help will not list options\n    which only have these higher bits set.  */\n \n+#define CL_REJECT_DRIVER\t(1 << 21) /* Reject this option in the driver.  */\n #define CL_SAVE\t\t\t(1 << 22) /* Target-specific option for attribute.  */\n #define CL_DISABLED\t\t(1 << 23) /* Disabled in this configuration.  */\n #define CL_REPORT\t\t(1 << 24) /* Report argument with -fverbose-asm  */"}]}