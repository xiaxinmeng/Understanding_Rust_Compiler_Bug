{"sha": "715914d3f9e4e40af58d22103c7650cdd720ef92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1OTE0ZDNmOWU0ZTQwYWY1OGQyMjEwM2M3NjUwY2RkNzIwZWY5Mg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-31T16:13:50Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-01T00:51:18Z"}, "message": "Do not calculate new values when evaluating a debug statement.\n\nAdd a flag to enable/disable immediately improving poor values found during\ncache propagation. Then disable it when processing debug statements.\n\n\tgcc/\n\tPR tree-optimization/100781\n\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Enable new\n\tvalue calculation by default.\n\t(ranger_cache::enable_new_values): New.\n\t(ranger_cache::disable_new_values): New.\n\t(ranger_cache::push_poor_value): Check if new values are allowed.\n\t* gimple-range-cache.h (class ranger_cache): New member/methods.\n\t* gimple-range.cc (gimple_ranger::range_of_expr): Check for debug\n\tstatement, and disable/renable new value calculation.\n\n\tgcc/testsuite/\n\tPR tree-optimization/100781\n\t* gcc.dg/pr100781.c: New.", "tree": {"sha": "aa53320abfc1b1ae61ae8ec3da4fce4e91f146f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa53320abfc1b1ae61ae8ec3da4fce4e91f146f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715914d3f9e4e40af58d22103c7650cdd720ef92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715914d3f9e4e40af58d22103c7650cdd720ef92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715914d3f9e4e40af58d22103c7650cdd720ef92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715914d3f9e4e40af58d22103c7650cdd720ef92/comments", "author": null, "committer": null, "parents": [{"sha": "2e0f3246e0bd92643ce36b9e7b9dde91650ac02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0f3246e0bd92643ce36b9e7b9dde91650ac02a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0f3246e0bd92643ce36b9e7b9dde91650ac02a"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "cc27574b7b4c40060ead95b6a9f0b60beac9b061", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=715914d3f9e4e40af58d22103c7650cdd720ef92", "patch": "@@ -586,6 +586,7 @@ ranger_cache::ranger_cache (gimple_ranger &q) : query (q)\n       if (bb)\n \tm_gori.exports (bb);\n     }\n+  enable_new_values ();\n }\n \n ranger_cache::~ranger_cache ()\n@@ -606,6 +607,23 @@ ranger_cache::dump (FILE *f)\n   fprintf (f, \"\\n\");\n }\n \n+// Allow the cache to flag and query new values when propagation is forced\n+// to use an unknown value.\n+\n+void\n+ranger_cache::enable_new_values ()\n+{\n+  m_new_value_p = true;\n+}\n+\n+// Disable new value querying.\n+\n+void\n+ranger_cache::disable_new_values ()\n+{\n+  m_new_value_p = false;\n+}\n+\n // Dump the caches for basic block BB to file F.\n \n void\n@@ -689,6 +707,8 @@ ranger_cache::set_global_range (tree name, const irange &r)\n bool\n ranger_cache::push_poor_value (basic_block bb, tree name)\n {\n+  if (!m_new_value_p)\n+    return false;\n   if (m_poor_value_list.length ())\n     {\n       // Don't push anything else to the same block.  If there are multiple "}, {"sha": "4af461d2aa3db5aa09a6fa0dc79012c41a51a004", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=715914d3f9e4e40af58d22103c7650cdd720ef92", "patch": "@@ -100,6 +100,8 @@ class ranger_cache : public range_query\n   bool get_non_stale_global_range (irange &r, tree name);\n   void set_global_range (tree name, const irange &r);\n \n+  void enable_new_values ();\n+  void disable_new_values ();\n   non_null_ref m_non_null;\n   gori_compute m_gori;\n \n@@ -131,6 +133,7 @@ class ranger_cache : public range_query\n   bool push_poor_value (basic_block bb, tree name);\n   vec<update_record> m_poor_value_list;\n   class gimple_ranger &query;\n+  bool m_new_value_p;\n };\n \n #endif // GCC_SSA_RANGE_CACHE_H"}, {"sha": "ed0a0c9702b7929348a94fa260d9035df5041469", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=715914d3f9e4e40af58d22103c7650cdd720ef92", "patch": "@@ -971,6 +971,15 @@ gimple_ranger::range_of_expr (irange &r, tree expr, gimple *stmt)\n       return true;\n     }\n \n+  // For a debug stmt, pick the best value currently available, do not\n+  // trigger new value calculations.  PR 100781.\n+  if (is_gimple_debug (stmt))\n+    {\n+      m_cache.disable_new_values ();\n+      m_cache.range_of_expr (r, expr, stmt);\n+      m_cache.enable_new_values ();\n+      return true;\n+    }\n   basic_block bb = gimple_bb (stmt);\n   gimple *def_stmt = SSA_NAME_DEF_STMT (expr);\n "}, {"sha": "c0e008a3ba5bcf928f22c7306dee781a0dd08477", "filename": "gcc/testsuite/gcc.dg/pr100781.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100781.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715914d3f9e4e40af58d22103c7650cdd720ef92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100781.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100781.c?ref=715914d3f9e4e40af58d22103c7650cdd720ef92", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param=evrp-mode=ranger -fcompare-debug  \" } */\n+\n+struct a {\n+  int b;\n+};\n+long c(short d, long e, struct a f) {\n+g:;\n+  int h = f.b <= e, i = d, n = h >= d;\n+  if (!n)\n+    goto j;\n+  goto k;\n+j:;\n+  long l = 5;\n+  if (l)\n+    goto m;\n+  d = 0;\n+m:\n+  if (d)\n+    return f.b;\n+k:\n+  goto g;\n+}\n+int main() { }\n+"}]}