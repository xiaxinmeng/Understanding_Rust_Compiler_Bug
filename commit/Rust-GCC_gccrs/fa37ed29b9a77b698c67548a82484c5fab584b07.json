{"sha": "fa37ed29b9a77b698c67548a82484c5fab584b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEzN2VkMjliOWE3N2I2OThjNjc1NDhhODI0ODRjNWZhYjU4NGIwNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-04T20:48:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-04T20:48:39Z"}, "message": "flags.h (g_switch_value, [...]): Remove.\n\n\t* flags.h (g_switch_value, g_switch_set): Remove.\n\t* opts.c (g_switch_value, g_switch_set): Remove.\n\t* config/g.opt (G): Add Var(g_switch_value).\n\t* config/alpha/alpha.c (alpha_handle_option): Don't handle -G\n\there.\n\t(alpha_option_override): Check global_options_set.x_g_switch_value\n\tinstead of g_switch_set.\n\t(alpha_in_small_data_p): Remove cast in comparison with\n\tg_switch_value.\n\t* config/alpha/elf.h (ASM_OUTPUT_ALIGNED_LOCAL): Cast\n\tg_switch_value to unsigned HOST_WIDE_INT.\n\t* config/frv/frv.c (frv_const_unspec_p): Remove cast in comparison\n\twith g_switch_value.\n\t(frv_handle_option): Don't handle -G here.\n\t(frv_option_override): Check global_options_set.x_g_switch_value\n\tinstead of g_switch_set.  Don't modify g_switch_set.\n\t(frv_in_small_data_p): Remove cast in comparison with\n\tg_switch_value.\n\t* config/frv/frv.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Cast\n\tg_switch_value to unsigned HOST_WIDE_INT.\n\t* config/ia64/ia64.c (ia64_handle_option): Don't handle -G here.\n\t(ia64_option_override): Check global_options_set.x_g_switch_value\n\tinstead of g_switch_set.\n\t* config/lm32/lm32.c (lm32_handle_option, TARGET_HANDLE_OPTION):\n\tRemove.\n\t(lm32_in_small_data_p): Remove cast in comparison with\n\tg_switch_value.\n\t* config/lm32/lm32.h (ASM_OUTPUT_ALIGNED_LOCAL,\n\tASM_OUTPUT_ALIGNED_COMMON): Cast g_switch_value to unsigned\n\tHOST_WIDE_INT.\n\t* config/m32r/m32r.c (m32r_handle_option): Don't handle -G here.\n\t(m32r_init): Check global_options_set.x_g_switch_value instead of\n\tg_switch_set.\n\t(m32r_in_small_data_p): Remove cast in comparison with\n\tg_switch_value.\n\t(m32r_file_start): Format g_switch_value with %d.\n\t* config/m32r/m32r.h (ASM_OUTPUT_ALIGNED_COMMON,\n\tASM_OUTPUT_ALIGNED_BSS): Cast g_switch_value to unsigned\n\tHOST_WIDE_INT.\n\t* config/microblaze/microblaze.c (microblaze_handle_option): Don't\n\thandle -G here.\n\t(microblaze_option_override): Check\n\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n\t* config/mips/mips.c (mips_handle_option): Don't handle -G here.\n\t(mips_option_override): Check global_options_set.x_g_switch_value\n\tinstead of g_switch_set.\n\t* config/rs6000/rs6000.c (rs6000_handle_option): Don't handle -G\n\there.\n\t(rs6000_file_start): Format g_switch_value with %d.\n\t(small_data_operand, rs6000_elf_in_small_data_p): Remove casts in\n\tcomparisons with g_switch_value.\n\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Check\n\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n\t* config/rs6000/vxworks.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n\t* config/score/score.c (score_handle_option): Don't handle -G\n\there.\n\t* config/score/score3.c (score3_option_override): Check\n\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n\t* config/score/score7.c (score7_option_override): Check\n\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n\nFrom-SVN: r164960", "tree": {"sha": "e2c9b6c9ff6c38ce8d977d64a8ed28287a1b5374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c9b6c9ff6c38ce8d977d64a8ed28287a1b5374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa37ed29b9a77b698c67548a82484c5fab584b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa37ed29b9a77b698c67548a82484c5fab584b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa37ed29b9a77b698c67548a82484c5fab584b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa37ed29b9a77b698c67548a82484c5fab584b07/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22b0982c1710877ba1dcb081b25cb68319628007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b0982c1710877ba1dcb081b25cb68319628007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b0982c1710877ba1dcb081b25cb68319628007"}], "stats": {"total": 204, "additions": 104, "deletions": 100}, "files": [{"sha": "01e33810f0d987264c3dac0057faa8c71c605fb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -1,3 +1,67 @@\n+2010-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* flags.h (g_switch_value, g_switch_set): Remove.\n+\t* opts.c (g_switch_value, g_switch_set): Remove.\n+\t* config/g.opt (G): Add Var(g_switch_value).\n+\t* config/alpha/alpha.c (alpha_handle_option): Don't handle -G\n+\there.\n+\t(alpha_option_override): Check global_options_set.x_g_switch_value\n+\tinstead of g_switch_set.\n+\t(alpha_in_small_data_p): Remove cast in comparison with\n+\tg_switch_value.\n+\t* config/alpha/elf.h (ASM_OUTPUT_ALIGNED_LOCAL): Cast\n+\tg_switch_value to unsigned HOST_WIDE_INT.\n+\t* config/frv/frv.c (frv_const_unspec_p): Remove cast in comparison\n+\twith g_switch_value.\n+\t(frv_handle_option): Don't handle -G here.\n+\t(frv_option_override): Check global_options_set.x_g_switch_value\n+\tinstead of g_switch_set.  Don't modify g_switch_set.\n+\t(frv_in_small_data_p): Remove cast in comparison with\n+\tg_switch_value.\n+\t* config/frv/frv.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Cast\n+\tg_switch_value to unsigned HOST_WIDE_INT.\n+\t* config/ia64/ia64.c (ia64_handle_option): Don't handle -G here.\n+\t(ia64_option_override): Check global_options_set.x_g_switch_value\n+\tinstead of g_switch_set.\n+\t* config/lm32/lm32.c (lm32_handle_option, TARGET_HANDLE_OPTION):\n+\tRemove.\n+\t(lm32_in_small_data_p): Remove cast in comparison with\n+\tg_switch_value.\n+\t* config/lm32/lm32.h (ASM_OUTPUT_ALIGNED_LOCAL,\n+\tASM_OUTPUT_ALIGNED_COMMON): Cast g_switch_value to unsigned\n+\tHOST_WIDE_INT.\n+\t* config/m32r/m32r.c (m32r_handle_option): Don't handle -G here.\n+\t(m32r_init): Check global_options_set.x_g_switch_value instead of\n+\tg_switch_set.\n+\t(m32r_in_small_data_p): Remove cast in comparison with\n+\tg_switch_value.\n+\t(m32r_file_start): Format g_switch_value with %d.\n+\t* config/m32r/m32r.h (ASM_OUTPUT_ALIGNED_COMMON,\n+\tASM_OUTPUT_ALIGNED_BSS): Cast g_switch_value to unsigned\n+\tHOST_WIDE_INT.\n+\t* config/microblaze/microblaze.c (microblaze_handle_option): Don't\n+\thandle -G here.\n+\t(microblaze_option_override): Check\n+\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n+\t* config/mips/mips.c (mips_handle_option): Don't handle -G here.\n+\t(mips_option_override): Check global_options_set.x_g_switch_value\n+\tinstead of g_switch_set.\n+\t* config/rs6000/rs6000.c (rs6000_handle_option): Don't handle -G\n+\there.\n+\t(rs6000_file_start): Format g_switch_value with %d.\n+\t(small_data_operand, rs6000_elf_in_small_data_p): Remove casts in\n+\tcomparisons with g_switch_value.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Check\n+\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n+\t* config/rs6000/vxworks.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Check\n+\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n+\t* config/score/score.c (score_handle_option): Don't handle -G\n+\there.\n+\t* config/score/score3.c (score3_option_override): Check\n+\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n+\t* config/score/score7.c (score7_option_override): Check\n+\tglobal_options_set.x_g_switch_value instead of g_switch_set.\n+\n 2010-10-04  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* common.opt (fira-coalesce): Remove."}, {"sha": "46627e379a2e1ec1ecd17dded80bf5ba5d11fd0f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -215,11 +215,6 @@ alpha_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      break;\n-\n     case OPT_mfp_regs:\n       if (value == 0)\n \ttarget_flags |= MASK_SOFT_FP;\n@@ -487,7 +482,7 @@ alpha_option_override (void)\n   }\n \n   /* Default the definition of \"small data\" to 8 bytes.  */\n-  if (!g_switch_set)\n+  if (!global_options_set.x_g_switch_value)\n     g_switch_value = 8;\n \n   /* Infer TARGET_SMALL_DATA from -fpic/-fPIC.  */\n@@ -775,7 +770,7 @@ alpha_in_small_data_p (const_tree exp)\n \n       /* If this is an incomplete type with size 0, then we can't put it\n \t in sdata because it might be too big when completed.  */\n-      if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n+      if (size > 0 && size <= g_switch_value)\n \treturn true;\n     }\n "}, {"sha": "78b2858db5630b8f647644c989650afe48198328", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -121,7 +121,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if ((SIZE) <= g_switch_value)\t\t\t\t\t\t\\\n+  if ((SIZE) <= (unsigned HOST_WIDE_INT) g_switch_value)\t\t\\\n     switch_to_section (sbss_section);\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     switch_to_section (bss_section);\t\t\t\t\t\\"}, {"sha": "401aeecf65bc6381617ff98fbe2e426f99a25099", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -572,7 +572,7 @@ frv_const_unspec_p (rtx x, struct frv_unspec *unspec)\n \n \t  if (frv_small_data_reloc_p (unspec->symbol, unspec->reloc)\n \t      && unspec->offset > 0\n-\t      && (unsigned HOST_WIDE_INT) unspec->offset < g_switch_value)\n+\t      && unspec->offset < g_switch_value)\n \t    return true;\n \t}\n     }\n@@ -611,11 +611,6 @@ frv_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n     case OPT_mcpu_:\n       if (strcmp (arg, \"simple\") == 0)\n \tfrv_cpu_type = FRV_CPU_SIMPLE;\n@@ -692,9 +687,8 @@ frv_option_override (void)\n       if (!flag_pic)\t\t/* -fPIC */\n \tflag_pic = 2;\n \n-      if (! g_switch_set)\t/* -G0 */\n+      if (!global_options_set.x_g_switch_value)\t/* -G0 */\n \t{\n-\t  g_switch_set = 1;\n \t  g_switch_value = 0;\n \t}\n     }\n@@ -786,7 +780,7 @@ frv_option_override (void)\n     }\n \n   /* Check for small data option */\n-  if (!g_switch_set)\n+  if (!global_options_set.x_g_switch_value && !TARGET_LIBPIC)\n     g_switch_value = SDATA_DEFAULT_SIZE;\n \n   /* A C expression which defines the machine-dependent operand\n@@ -9570,7 +9564,7 @@ frv_in_small_data_p (const_tree decl)\n     }\n \n   size = int_size_in_bytes (TREE_TYPE (decl));\n-  if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n+  if (size > 0 && size <= g_switch_value)\n     return true;\n \n   return false;"}, {"sha": "bf433d9978eae1768b0a1c19421b27a75ff4d163", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -2069,7 +2069,7 @@ extern int size_directive_output;\n #undef ASM_OUTPUT_ALIGNED_DECL_LOCAL\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)\t\\\n do {                                                                   \t\\\n-  if ((SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\t\\\n+  if ((SIZE) > 0 && (SIZE) <= (unsigned HOST_WIDE_INT) g_switch_value)\t\\\n     switch_to_section (get_named_section (NULL, \".sbss\", 0));           \\\n   else                                                                 \t\\\n     switch_to_section (bss_section);                                  \t\\"}, {"sha": "b0e30348d80351e002a49ae3c9d8a817c4a6b4a6", "filename": "gcc/config/g.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fg.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fg.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fg.opt?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -24,7 +24,7 @@\n ; Please try to keep this file in ASCII collating order.\n \n G\n-Target Joined Separate UInteger\n+Target Joined Separate UInteger Var(g_switch_value)\n -G<number>\tPut global and static data smaller than <number> bytes into a special section (on some targets)\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "d27286068610aae845f4f851aa8e550c91558dd5", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -5566,11 +5566,6 @@ ia64_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n     case OPT_mfixed_range_:\n       fix_range (arg);\n       return true;\n@@ -5627,7 +5622,9 @@ ia64_option_override (void)\n     flag_ira_loop_pressure = 1;\n \n \n-  ia64_section_threshold = g_switch_set ? g_switch_value : IA64_DEFAULT_GVALUE;\n+  ia64_section_threshold = (global_options_set.x_g_switch_value\n+\t\t\t    ? g_switch_value\n+\t\t\t    : IA64_DEFAULT_GVALUE);\n \n   init_machine_status = ia64_init_machine_status;\n "}, {"sha": "671f0e16d272c854b2db6cc295ad19cf00bd44f3", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -75,11 +75,8 @@ static bool lm32_can_eliminate (const int, const int);\n static bool\n lm32_legitimate_address_p (enum machine_mode mode, rtx x, bool strict);\n static HOST_WIDE_INT lm32_compute_frame_size (int size);\n-static bool lm32_handle_option (size_t code, const char *arg, int value);\n static void lm32_option_override (void);\n \n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION lm32_handle_option\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE lm32_option_override\n #undef TARGET_ADDRESS_COST\n@@ -698,23 +695,6 @@ lm32_setup_incoming_varargs (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n     }\n }\n \n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-lm32_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n-{\n-  switch (code)\n-    {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Override command line options.  */\n static void\n lm32_option_override (void)\n@@ -797,7 +777,7 @@ lm32_in_small_data_p (const_tree exp)\n \n       /* If this is an incomplete type with size 0, then we can't put it\n          in sdata because it might be too big when completed.  */\n-      if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n+      if (size > 0 && size <= g_switch_value)\n \treturn true;\n     }\n "}, {"sha": "b0c2d59ca9c1fb6de2b660c5801c0b7f04b7469f", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -429,7 +429,7 @@ enum reg_class\n #undef  ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if ((SIZE) <= g_switch_value)\t\t\t\t\t\t\\\n+  if ((SIZE) <= (unsigned HOST_WIDE_INT) g_switch_value)\t\t\\\n     switch_to_section (sbss_section);\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     switch_to_section (bss_section);\t\t\t\t\t\\\n@@ -446,7 +446,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do \t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if ((SIZE) <= g_switch_value)\t\t\t\t\t\t\\\n+  if ((SIZE) <= (unsigned HOST_WIDE_INT) g_switch_value)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       switch_to_section (sbss_section);\t\t\t\t\t\\\n       (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\t\\"}, {"sha": "903f410a07dcf9d858db26ab1c8e2bbe9692031a", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -210,11 +210,6 @@ m32r_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n     case OPT_m32r:\n       target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n       return true;\n@@ -270,7 +265,7 @@ m32r_init (void)\n   m32r_punct_chars['@'] = 1; /* ??? no longer used */\n \n   /* Provide default value if not specified.  */\n-  if (!g_switch_set)\n+  if (!global_options_set.x_g_switch_value)\n     g_switch_value = SDATA_DEFAULT_SIZE;\n }\n \n@@ -545,7 +540,7 @@ m32r_in_small_data_p (const_tree decl)\n \t{\n \t  int size = int_size_in_bytes (TREE_TYPE (decl));\n \n-\t  if (size > 0 && (unsigned HOST_WIDE_INT) size <= g_switch_value)\n+\t  if (size > 0 && size <= g_switch_value)\n \t    return true;\n \t}\n     }\n@@ -2106,7 +2101,7 @@ m32r_file_start (void)\n \n   if (flag_verbose_asm)\n     fprintf (asm_out_file,\n-\t     \"%s M32R/D special options: -G \" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t     \"%s M32R/D special options: -G %d\\n\",\n \t     ASM_COMMENT_START, g_switch_value);\n \n   if (TARGET_LITTLE_ENDIAN)"}, {"sha": "d767cb9234eb483a5e27c4d47e137d1b82105abf", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -1227,7 +1227,8 @@ L2:     .word STATIC\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! TARGET_SDATA_NONE\t\t\t\t\t\t\\\n-\t  && (SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\\\n+\t  && (SIZE) > 0\t\t\t\t\t\t\t\\\n+\t  && (SIZE) <= (unsigned HOST_WIDE_INT) g_switch_value)\t\t\\\n \tfprintf ((FILE), \"%s\", SCOMMON_ASM_OP);\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tfprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n@@ -1240,7 +1241,8 @@ L2:     .word STATIC\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! TARGET_SDATA_NONE\t\t\t\t\t\t\\\n-          && (SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\\\n+          && (SIZE) > 0\t\t\t\t\t\t\t\\\n+\t  && (SIZE) <= (unsigned HOST_WIDE_INT) g_switch_value)\t\t\\\n         switch_to_section (get_named_section (NULL, \".sbss\", 0));\t\\\n       else\t\t\t\t\t\t\t\t\\\n         switch_to_section (bss_section);\t\t\t\t\\"}, {"sha": "9872d8f7e2c32d2cb919c490ee4291d95de950a1", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -1279,11 +1279,6 @@ microblaze_handle_option (size_t code,\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n     case OPT_mno_clearbss:\n       flag_zero_initialized_in_bss = 0;\n       warning (0, \"-mno-clearbss is deprecated; use -fno-zero-initialized-in-bss\");\n@@ -1304,8 +1299,9 @@ microblaze_option_override (void)\n   register enum machine_mode mode;\n   int ver;\n \n-  microblaze_section_threshold =\n-    g_switch_set ? g_switch_value : MICROBLAZE_DEFAULT_GVALUE;\n+  microblaze_section_threshold = (global_options_set.x_g_switch_value\n+\t\t\t\t  ? g_switch_value\n+\t\t\t\t  : MICROBLAZE_DEFAULT_GVALUE);\n \n   /* Check the MicroBlaze CPU version for any special action to be done.  */\n   if (microblaze_select_cpu == NULL)"}, {"sha": "95994cfc7a9b39bd25883c73824d66e4301bac77", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -15442,11 +15442,6 @@ mips_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n     case OPT_mabi_:\n       if (strcmp (arg, \"32\") == 0)\n \tmips_abi = ABI_32;\n@@ -15527,7 +15522,7 @@ mips_option_override (void)\n     TARGET_INTERLINK_MIPS16 = 1;\n \n   /* Set the small data limit.  */\n-  mips_small_data_threshold = (g_switch_set\n+  mips_small_data_threshold = (global_options_set.x_g_switch_value\n \t\t\t       ? g_switch_value\n \t\t\t       : MIPS_DEFAULT_GVALUE);\n "}, {"sha": "030bb615f0c94102b753a7399aaa4e9c1f0e7ab1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -3996,11 +3996,6 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n \n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      break;\n-\n     case OPT_mno_power:\n       target_flags &= ~(MASK_POWER | MASK_POWER2\n \t\t\t| MASK_MULTIPLE | MASK_STRING);\n@@ -4425,7 +4420,7 @@ rs6000_file_start (void)\n \n       if (rs6000_sdata && g_switch_value)\n \t{\n-\t  fprintf (file, \"%s -G \" HOST_WIDE_INT_PRINT_UNSIGNED, start,\n+\t  fprintf (file, \"%s -G %d\", start,\n \t\t   g_switch_value);\n \t  start = \"\";\n \t}\n@@ -5416,7 +5411,7 @@ small_data_operand (rtx op ATTRIBUTE_UNUSED,\n       /* We have to be careful here, because it is the referenced address\n \t that must be 32k from _SDA_BASE_, not just the symbol.  */\n       summand = INTVAL (XEXP (sum, 1));\n-      if (summand < 0 || (unsigned HOST_WIDE_INT) summand > g_switch_value)\n+      if (summand < 0 || summand > g_switch_value)\n \treturn 0;\n \n       sym_ref = XEXP (sum, 0);\n@@ -24834,7 +24829,7 @@ rs6000_elf_in_small_data_p (const_tree decl)\n       HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n \n       if (size > 0\n-\t  && (unsigned HOST_WIDE_INT) size <= g_switch_value\n+\t  && size <= g_switch_value\n \t  /* If it's not public, and we're not going to reference it there,\n \t     there's no need to put it in the small data section.  */\n \t  && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)))"}, {"sha": "25584b2f5023690d895ca6babc1df20ddb25729c", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -81,7 +81,7 @@ extern const char *rs6000_tls_size_string; /* For -mtls-size= */\n \n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (!g_switch_set)\t\t\t\t\t\t\t\\\n+  if (!global_options_set.x_g_switch_value)\t\t\t\t\\\n     g_switch_value = SDATA_DEFAULT_SIZE;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (rs6000_abi_name == NULL)\t\t\t\t\t\t\\"}, {"sha": "d7484197f058149c6f6640e54c34b64dd69e9a33", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Vxworks PowerPC version.\n-   Copyright (C) 1996, 2000, 2002, 2003, 2004, 2005, 2007, 2009\n+   Copyright (C) 1996, 2000, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC.\n \n@@ -141,7 +141,7 @@ VXWORKS_ADDITIONAL_CPP_SPEC\n \trs6000_float_gprs = 1;\t\t\t\\\n       }\t\t\t\t\t\t\\\n \t\t\t\t\t\t\\\n-  if (!g_switch_set)\t\t\t\t\\\n+  if (!global_options_set.x_g_switch_value)\t\\\n     g_switch_value = SDATA_DEFAULT_SIZE;\t\\\n   VXWORKS_OVERRIDE_OPTIONS;\t\t\t\\\n   } while (0)"}, {"sha": "764293a9d65129814be7e64c27d312e47add7985", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -295,11 +295,6 @@ score_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      return true;\n-\n     case OPT_mscore7d:\n       target_flags &= ~(MASK_ALL_CPU_BITS);\n       target_flags |= MASK_SCORE7 | MASK_SCORE7D;"}, {"sha": "fd2e7844abd9428ff471026869ffa4d8945ad1a6", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -641,11 +641,13 @@ score3_option_override (void)\n {\n   flag_pic = false;\n   if (!flag_pic)\n-    score3_sdata_max = g_switch_set ? g_switch_value : SCORE3_DEFAULT_SDATA_MAX;\n+    score3_sdata_max = (global_options_set.x_g_switch_value\n+\t\t\t? g_switch_value\n+\t\t\t: SCORE3_DEFAULT_SDATA_MAX);\n   else\n     {\n       score3_sdata_max = 0;\n-      if (g_switch_set && (g_switch_value != 0))\n+      if (global_options_set.x_g_switch_value && (g_switch_value != 0))\n         warning (0, \"-fPIC and -G are incompatible\");\n     }\n "}, {"sha": "85ae017179032fefb87aec9b1dfa8632f6b32281", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -640,11 +640,13 @@ score7_option_override (void)\n {\n   flag_pic = false;\n   if (!flag_pic)\n-    score7_sdata_max = g_switch_set ? g_switch_value : SCORE7_DEFAULT_SDATA_MAX;\n+    score7_sdata_max = (global_options_set.x_g_switch_value\n+\t\t\t? g_switch_value\n+\t\t\t: SCORE7_DEFAULT_SDATA_MAX);\n   else\n     {\n       score7_sdata_max = 0;\n-      if (g_switch_set && (g_switch_value != 0))\n+      if (global_options_set.x_g_switch_value && (g_switch_value != 0))\n         warning (0, \"-fPIC and -G are incompatible\");\n     }\n "}, {"sha": "6e7e112e45bea0378f7b501efa59167683b3357a", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -272,10 +272,6 @@ extern struct target_flag_state *this_target_flag_state;\n /* Nonzero if subexpressions must be evaluated from left-to-right.  */\n extern int flag_evaluation_order;\n \n-/* Value of the -G xx switch, and whether it was passed or not.  */\n-extern unsigned HOST_WIDE_INT g_switch_value;\n-extern bool g_switch_set;\n-\n /* Whether to run the warn_unused_result attribute pass.  */\n extern bool flag_warn_unused_result;\n "}, {"sha": "6799f9bd3857e8243b5e34de396438a115bf4df3", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37ed29b9a77b698c67548a82484c5fab584b07/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fa37ed29b9a77b698c67548a82484c5fab584b07", "patch": "@@ -46,10 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"lto-streamer.h\"\n \n-/* Value of the -G xx switch, and whether it was passed or not.  */\n-unsigned HOST_WIDE_INT g_switch_value;\n-bool g_switch_set;\n-\n /* True if we should exit after parsing options.  */\n bool exit_after_options;\n "}]}