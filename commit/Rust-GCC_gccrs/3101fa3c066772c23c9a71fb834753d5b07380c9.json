{"sha": "3101fa3c066772c23c9a71fb834753d5b07380c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwMWZhM2MwNjY3NzJjMjNjOWE3MWZiODM0NzUzZDViMDczODBjOQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-12-20T15:51:09Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2003-12-20T15:51:09Z"}, "message": "TODO: Update.\n\n2003-12-20  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* docs/doxygen/TODO: Update.\n\t* include/bits/locale_classes.h (locale, facet, id): Document.\n\t* include/bits/locale_facets.tcc (has_facet, use_facet): Document.\n\nFrom-SVN: r74884", "tree": {"sha": "948f928d7fddaf40ca6a259c3c389055cd116cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948f928d7fddaf40ca6a259c3c389055cd116cb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3101fa3c066772c23c9a71fb834753d5b07380c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3101fa3c066772c23c9a71fb834753d5b07380c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3101fa3c066772c23c9a71fb834753d5b07380c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3101fa3c066772c23c9a71fb834753d5b07380c9/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c0817543fa510a679f31ea79c6fad839087e38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0817543fa510a679f31ea79c6fad839087e38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0817543fa510a679f31ea79c6fad839087e38b"}], "stats": {"total": 214, "additions": 210, "deletions": 4}, "files": [{"sha": "3d98c008a9475a041e17763db43065b82ecc196e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3101fa3c066772c23c9a71fb834753d5b07380c9", "patch": "@@ -1,3 +1,9 @@\n+2003-12-20  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* docs/doxygen/TODO: Update.\n+\t* include/bits/locale_classes.h (locale, facet, id): Document.\n+\t* include/bits/locale_facets.tcc (has_facet, use_facet): Document.\n+\n 2003-12-19  Jason Merrill  <jason@redhat.com>\n \n \t* config/cpu/cris/atomicity.h: Remove memory clobbers."}, {"sha": "d50c65d8bab6ddcdd7979a5cb79a384328d554a1", "filename": "libstdc++-v3/docs/doxygen/TODO", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO?ref=3101fa3c066772c23c9a71fb834753d5b07380c9", "patch": "@@ -23,7 +23,7 @@ c18             FINISHED, Note A\n c19             Note A\n c20             Note A\n c21             Public functions basic_string done, Note B\n-c22             Untouched; see docs/html/22_locale/*\n+c22             Most still to do; see docs/html/22_locale/*\n c23             See doxygroups.cc and Note B.  Notes on what invalidates\n                 iterators need to be added.\n c24             stl_iterator.h (__normal_iterator, other small TODO bits)"}, {"sha": "87f9e2b9cfbef566426fe96fa97b184d84da4bf7", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 178, "deletions": 3, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=3101fa3c066772c23c9a71fb834753d5b07380c9", "patch": "@@ -51,10 +51,24 @@\n namespace std\n {\n   // 22.1.1 Class locale\n+  /**\n+   *  @brief  Container class for localization functionality.\n+   *\n+   *  The locale class is first a class wrapper for C library locales.  It is\n+   *  also an extensible container for user-defined localization.  A locale is\n+   *  a collection of facets that implement various localization features such\n+   *  as money, time, and number printing.\n+   *\n+   *  Constructing C++ locales does not change the C library locale.\n+   *\n+   *  This library supports efficient construction and copying of locales\n+   *  through a reference counting implementation of the locale class.\n+  */\n   class locale\n   {\n   public:\n     // Types:\n+    /// Definition of locale::category.\n     typedef unsigned int \tcategory;\n \n     // Forward decls and friends:\n@@ -76,8 +90,18 @@ namespace std\n     template<typename _Cache>\n       friend struct __use_cache;\n    \n-    // Category values:\n-    // NB: Order must match _S_facet_categories definition in locale.cc\n+    //@{\n+    /**\n+     *  @brief  Category values.\n+     *\n+     *  The standard category values are none, ctype, numeric, collate, time,\n+     *  monetary, and messages.  They form a bitmask that supports union and\n+     *  intersection.  The category all is the union of these values.\n+     *\n+     *  @if maint\n+     *  NB: Order must match _S_facet_categories definition in locale.cc\n+     *  @endif\n+    */\n     static const category none\t\t= 0;\n     static const category ctype \t= 1L << 0;\n     static const category numeric \t= 1L << 1;\n@@ -87,51 +111,173 @@ namespace std\n     static const category messages \t= 1L << 5;\n     static const category all \t\t= (ctype | numeric | collate |\n \t\t\t\t \t   time  | monetary | messages);\n+    //@}\n \n     // Construct/copy/destroy:\n+    \n+    /**\n+     *  @brief  Default constructor.\n+     *\n+     *  Constructs a copy of the global locale.  If no locale has been\n+     *  explicitly set, this is the \"C\" locale.\n+    */\n     locale() throw();\n \n+    /**\n+     *  @brief  Copy constructor.\n+     *\n+     *  Constructs a copy of @a other.\n+     *\n+     *  @param  other  The locale to copy.\n+    */\n     locale(const locale& __other) throw();\n \n+    /**\n+     *  @brief  Named locale constructor.\n+     *\n+     *  Constructs a copy of the named C library locale.\n+     *\n+     *  @param  s  Name of the locale to construct.\n+     *  @throw  std::runtime_error if s is null or an undefined locale.\n+    */\n     explicit  \n     locale(const char* __s);\n \n+    /**\n+     *  @brief  Construct locale with facets from another locale.\n+     *\n+     *  Constructs a copy of the locale @a base.  The facets specified by @a\n+     *  cat are replaced with those from the locale named by @a s.  If base is\n+     *  named, this locale instance will also be named.\n+     *\n+     *  @param  base  The locale to copy.\n+     *  @param  s  Name of the locale to use facets from.\n+     *  @param  cat  Set of categories defining the facets to use from s.  \n+     *  @throw  std::runtime_error if s is null or an undefined locale.\n+    */\n     locale(const locale& __base, const char* __s, category __cat);\n \n+    /**\n+     *  @brief  Construct locale with facets from another locale.\n+     *\n+     *  Constructs a copy of the locale @a base.  The facets specified by @a\n+     *  cat are replaced with those from the locale @a add.  If @a base and @a\n+     *  add are named, this locale instance will also be named.\n+     *\n+     *  @param  base  The locale to copy.\n+     *  @param  add  The locale to use facets from.\n+     *  @param  cat  Set of categories defining the facets to use from add.\n+    */\n     locale(const locale& __base, const locale& __add, category __cat);\n \n+    /**\n+     *  @brief  Construct locale with another facet.\n+     *\n+     *  Constructs a copy of the locale @a other.  The facet @f is added to\n+     *  @other, replacing an existing facet of type Facet if there is one.  If\n+     *  @f is null, this locale is a copy of @a other.\n+     *\n+     *  @param  other  The locale to copy.\n+     *  @param  f  The facet to add in.\n+    */\n     template<typename _Facet>\n       locale(const locale& __other, _Facet* __f);\n \n+    /// Locale destructor.\n     ~locale() throw();\n \n-    const locale&  \n+    /**\n+     *  @brief  Assignment operator.\n+     *\n+     *  Set this locale to be a copy of @a other.\n+     *\n+     *  @param  other  The locale to copy.\n+     *  @return  A reference to this locale.\n+    */\n+    const locale&\n     operator=(const locale& __other) throw();\n \n+    /**\n+     *  @brief  Construct locale with another facet.\n+     *\n+     *  Constructs and returns a new copy of this locale.  Adds or replaces an\n+     *  existing facet of type Facet from the locale @a other into the new\n+     *  locale.\n+     *\n+     *  @param  Facet  The facet type to copy from other\n+     *  @param  other  The locale to copy from.\n+     *  @return  Newly constructed locale.\n+     *  @throw  std::runtime_error if other has no facet of type Facet.\n+    */\n     template<typename _Facet>\n       locale  \n       combine(const locale& __other) const;\n \n     // Locale operations:\n+    /**\n+     *  @brief  Return locale name.\n+     *  @return  Locale name or \"*\" if unnamed.\n+    */\n     string \n     name() const;\n \n+    /**\n+     *  @brief  Locale equality.\n+     *\n+     *  @param  other  The locale to compare against.\n+     *  @return  True if other and this refer to the same locale instance, are\n+     *  \t copies, or have the same name.  False otherwise.\n+    */\n     bool \n     operator==(const locale& __other) const throw ();\n \n+    /**\n+     *  @brief  Locale inequality.\n+     *\n+     *  @param  other  The locale to compare against.\n+     *  @return  ! (*this == other)\n+    */\n     inline bool  \n     operator!=(const locale& __other) const throw ()\n     { return !(this->operator==(__other));  }\n \n+    /**\n+     *  @brief  Compare two strings according to collate.\n+     *\n+     *  Template operator to compare two strings using the compare function of\n+     *  the collate facet in this locale.  One use is to provide the locale to\n+     *  the sort function.  For example, a vector v of strings could be sorted\n+     *  according to locale loc by doing:\n+     *  @code\n+     *  std::sort(v.begin(), v.end(), loc);\n+     *  @endcode\n+     *\n+     *  @param  s1  First string to compare.\n+     *  @param  s2  Second string to compare.\n+     *  @return  True if collate<Char> facet compares s1 < s2, else false.\n+    */\n     template<typename _Char, typename _Traits, typename _Alloc>\n       bool  \n       operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,\n \t\t const basic_string<_Char, _Traits, _Alloc>& __s2) const;\n \n     // Global locale objects:\n+    /**\n+     *  @brief  Set global locale\n+     *\n+     *  This function sets the global locale to the argument and returns a\n+     *  copy of the previous global locale.  If the argument has a name, it\n+     *  will also call std::setlocale(LC_ALL, loc.name()).\n+     *\n+     *  @param  locale  The new locale to make global.\n+     *  @return  Copy of the old global locale.\n+    */\n     static locale \n     global(const locale&);\n \n+    /**\n+     *  @brief  Return reference to the \"C\" locale.\n+    */\n     static const locale& \n     classic();\n \n@@ -185,6 +331,15 @@ namespace std\n \n \n   // 22.1.1.1.2  Class locale::facet\n+  /**\n+   *  @brief  Localization functionality base class.\n+   *\n+   *  The facet class is the base class for a localization feature, such as\n+   *  money, time, and number printing.  It provides common support for facets\n+   *  and reference management.\n+   *\n+   *  Facets may not be copied or assigned.\n+  */\n   class locale::facet\n   {\n   private:\n@@ -207,10 +362,20 @@ namespace std\n     _S_initialize_once();\n \n   protected:\n+    /**\n+     *  @brief  Facet constructor.\n+     *\n+     *  This is the constructor provided by the standard.  If refs is 0, the\n+     *  facet is destroyed when the last referencing locale is destroyed.\n+     *  Otherwise the facet will never be destroyed.\n+     *\n+     *  @param refs  The initial value for reference count.\n+    */\n     explicit \n     facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)\n     { }\n \n+    /// Facet destructor.\n     virtual \n     ~facet();\n \n@@ -257,6 +422,15 @@ namespace std\n \n \n   // 22.1.1.1.3 Class locale::id\n+  /**\n+   *  @brief  Facet ID class.\n+   *\n+   *  The ID class provides facets with an index used to identify them.\n+   *  Every facet class must define a public static member locale::id, or be\n+   *  derived from a facet that provides this member, otherwise the facet\n+   *  cannot be used in a locale.  The locale::id ensures that each class\n+   *  type gets a unique identifier.\n+  */\n   class locale::id\n   {\n   private:\n@@ -287,6 +461,7 @@ namespace std\n   public:\n     // NB: This class is always a static data member, and thus can be\n     // counted on to be zero-initialized.\n+    /// Constructor.\n     id() { }\n \n     size_t"}, {"sha": "b934482251114eefbe627510f3d3932cbfa7f44a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101fa3c066772c23c9a71fb834753d5b07380c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=3101fa3c066772c23c9a71fb834753d5b07380c9", "patch": "@@ -69,6 +69,18 @@ namespace std\n \t\t\t\t__s2.data(), __s2.data() + __s2.length()) < 0);\n     }\n \n+  /**\n+   *  @brief  Test for the presence of a facet.\n+   *\n+   *  has_facet tests the locale argument for the presence of the facet type\n+   *  provided as the template parameter.  Facets derived from the facet\n+   *  parameter will also return true.\n+   *\n+   *  @param  Facet  The facet type to test the presence of.\n+   *  @param  locale  The locale to test.\n+   *  @return  true if locale contains a facet of type Facet, else false.\n+   *  @throw  std::bad_cast if locale doesn't contain the facet.\n+  */\n   template<typename _Facet>\n     inline bool\n     has_facet(const locale& __loc) throw()\n@@ -78,6 +90,19 @@ namespace std\n       return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n     }\n \n+  /**\n+   *  @brief  Return a facet.\n+   *\n+   *  use_facet looks for and returns a reference to a facet of type Facet\n+   *  where Facet is the template parameter.  If has_facet(locale) is true,\n+   *  there is a suitable facet to return.  It throws std::bad_cast if the\n+   *  locale doesn't contain a facet of type Facet.\n+   *\n+   *  @param  Facet  The facet type to access.\n+   *  @param  locale  The locale to use.\n+   *  @return  Reference to facet of type Facet.\n+   *  @throw  std::bad_cast if locale doesn't contain a facet of type Facet.\n+  */\n   template<typename _Facet>\n     inline const _Facet&\n     use_facet(const locale& __loc)"}]}