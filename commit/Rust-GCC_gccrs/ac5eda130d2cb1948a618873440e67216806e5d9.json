{"sha": "ac5eda130d2cb1948a618873440e67216806e5d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1ZWRhMTMwZDJjYjE5NDhhNjE4ODczNDQwZTY3MjE2ODA2ZTVkOQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-05-25T09:22:41Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-05-25T09:22:41Z"}, "message": "tm.texi (STORE_FLAG_VALUE): Do not refer to sCC patterns.\n\n2010-05-25  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* doc/tm.texi (STORE_FLAG_VALUE): Do not refer to sCC patterns.\n\t* doc/md.texi (cstoreXX4): Update for cond-optab changes.\n\nFrom-SVN: r159814", "tree": {"sha": "d506bce2b35f8080730650bb922fb0860e21c53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d506bce2b35f8080730650bb922fb0860e21c53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac5eda130d2cb1948a618873440e67216806e5d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5eda130d2cb1948a618873440e67216806e5d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5eda130d2cb1948a618873440e67216806e5d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5eda130d2cb1948a618873440e67216806e5d9/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6597fd0bc63cb4686035d4a5dce85bcf6d32d598"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "0546d7218354aaa4abf99f135aa7e6bee7fba09b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5eda130d2cb1948a618873440e67216806e5d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5eda130d2cb1948a618873440e67216806e5d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac5eda130d2cb1948a618873440e67216806e5d9", "patch": "@@ -1,4 +1,9 @@\n-2010-05-09  Paolo Bonzini  <bonzini@gnu.org>\n+2010-05-25  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* doc/tm.texi (STORE_FLAG_VALUE): Do not refer to sCC patterns.\n+\t* doc/md.texi (cstoreXX4): Update for cond-optab changes.\n+\n+2010-05-25  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/43610\n \t* optabs.c (prepare_float_lib_cmp): Allow reversing the comparison"}, {"sha": "ead8b26545808ff049b74f105071874945cc754c", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5eda130d2cb1948a618873440e67216806e5d9/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5eda130d2cb1948a618873440e67216806e5d9/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ac5eda130d2cb1948a618873440e67216806e5d9", "patch": "@@ -4705,20 +4705,28 @@ else must be negative.  Otherwise the instruction is not suitable and\n you should omit it from the machine description.  You describe to the\n compiler exactly which value is stored by defining the macro\n @code{STORE_FLAG_VALUE} (@pxref{Misc}).  If a description cannot be\n-found that can be used for all the @samp{s@var{cond}} patterns, you\n-should omit those operations from the machine description.\n-\n-These operations may fail, but should do so only in relatively\n-uncommon cases; if they would fail for common cases involving\n-integer comparisons, it is best to omit these patterns.\n-\n-If these operations are omitted, the compiler will usually generate code\n-that copies the constant one to the target and branches around an\n-assignment of zero to the target.  If this code is more efficient than\n-the potential instructions used for the @samp{cstore@var{mode}4} pattern\n-followed by those required to convert the result into a 1 or a zero in\n-@code{SImode}, you should omit the @samp{cstore@var{mode}4} operations from\n-the machine description.\n+found that can be used for all the possible comparison operators, you\n+should pick one and use a @code{define_expand} to map all results\n+onto the one you chose.\n+\n+These operations may @code{FAIL}, but should do so only in relatively\n+uncommon cases; if they would @code{FAIL} for common cases involving\n+integer comparisons, it is best to restrict the predicates to not\n+allow these operands.  Likewise if a given comparison operator will\n+always fail, independent of the operands (for floating-point modes, the\n+@code{ordered_comparison_operator} predicate is often useful in this case).\n+\n+If this pattern is omitted, the compiler will generate a conditional\n+branch---for example, it may copy a constant one to the target and branching\n+around an assignment of zero to the target---or a libcall.  If the predicate\n+for operand 1 only rejects some operators, it will also try reordering the\n+operands and/or inverting the result value (e.g.@: by an exclusive OR).\n+These possibilities could be cheaper or equivalent to the instructions\n+used for the @samp{cstore@var{mode}4} pattern followed by those required\n+to convert a positive result from @code{STORE_FLAG_VALUE} to 1; in this\n+case, you can and should make operand 1's predicate reject some operators\n+in the @samp{cstore@var{mode}4} pattern, or remove the pattern altogether\n+from the machine description.\n \n @cindex @code{cbranch@var{mode}4} instruction pattern\n @item @samp{cbranch@var{mode}4}"}, {"sha": "b0175eaa1a44aca982563919bd9e16ddcb7ea674", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5eda130d2cb1948a618873440e67216806e5d9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5eda130d2cb1948a618873440e67216806e5d9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ac5eda130d2cb1948a618873440e67216806e5d9", "patch": "@@ -10264,8 +10264,8 @@ In order to enforce the representation of @code{mode},\n @defmac STORE_FLAG_VALUE\n A C expression describing the value returned by a comparison operator\n with an integral mode and stored by a store-flag instruction\n-(@samp{s@var{cond}}) when the condition is true.  This description must\n-apply to @emph{all} the @samp{s@var{cond}} patterns and all the\n+(@samp{cstore@var{mode}4}) when the condition is true.  This description must\n+apply to @emph{all} the @samp{cstore@var{mode}4} patterns and all the\n comparison operators whose results have a @code{MODE_INT} mode.\n \n A value of 1 or @minus{}1 means that the instruction implementing the\n@@ -10274,7 +10274,7 @@ and 0 when the comparison is false.  Otherwise, the value indicates\n which bits of the result are guaranteed to be 1 when the comparison is\n true.  This value is interpreted in the mode of the comparison\n operation, which is given by the mode of the first operand in the\n-@samp{s@var{cond}} pattern.  Either the low bit or the sign bit of\n+@samp{cstore@var{mode}4} pattern.  Either the low bit or the sign bit of\n @code{STORE_FLAG_VALUE} be on.  Presently, only those bits are used by\n the compiler.\n \n@@ -10347,7 +10347,7 @@ those cases, e.g., one matching\n \n Some machines can also perform @code{and} or @code{plus} operations on\n condition code values with less instructions than the corresponding\n-@samp{s@var{cond}} insn followed by @code{and} or @code{plus}.  On those\n+@samp{cstore@var{mode}4} insn followed by @code{and} or @code{plus}.  On those\n machines, define the appropriate patterns.  Use the names @code{incscc}\n and @code{decscc}, respectively, for the patterns which perform\n @code{plus} or @code{minus} operations on condition code values.  See"}]}