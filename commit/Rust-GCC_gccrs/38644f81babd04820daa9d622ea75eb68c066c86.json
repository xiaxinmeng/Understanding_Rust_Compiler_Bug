{"sha": "38644f81babd04820daa9d622ea75eb68c066c86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2NDRmODFiYWJkMDQ4MjBkYWE5ZDYyMmVhNzVlYjY4YzA2NmM4Ng==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-22T08:49:20Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-22T08:49:20Z"}, "message": "coroutines: Pass class reference to promise param preview [PR94682]\n\nAs reported in the PR, per [dcl.fct.def.coroutine]/4 we should\nbe passing a reference to the object to the promise parameter\npreview, and we are currently passing a pointer (this).  Amend to\npass the reference.\n\ngcc/cp/ChangeLog:\n\n2020-04-22  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94682\n\t* coroutines.cc (struct param_info): Add a field to note that\n\tthe param is 'this'.\n\t(morph_fn_to_coro): Convert this to a reference before using it\n\tin the promise parameter preview.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-22  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94682\n\t* g++.dg/coroutines/pr94682-preview-this.C: New test.", "tree": {"sha": "61495547ef6245a0200874f9d3cfec0ee10d0268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61495547ef6245a0200874f9d3cfec0ee10d0268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38644f81babd04820daa9d622ea75eb68c066c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38644f81babd04820daa9d622ea75eb68c066c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38644f81babd04820daa9d622ea75eb68c066c86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38644f81babd04820daa9d622ea75eb68c066c86/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad3c1d81c129fc76594b9df5b798c380cbf03ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad3c1d81c129fc76594b9df5b798c380cbf03ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad3c1d81c129fc76594b9df5b798c380cbf03ee"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "cce017cf245e9803a42b61f6d1014811415ce1f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38644f81babd04820daa9d622ea75eb68c066c86", "patch": "@@ -1,3 +1,11 @@\n+2020-04-22 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\tPR c++/94682\n+\t* coroutines.cc (struct param_info): Add a field to note that\n+\tthe param is 'this'.\n+\t(morph_fn_to_coro): Convert this to a reference before using it\n+\tin the promise parameter preview.\n+\n 2020-04-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/94546"}, {"sha": "b1d91f84cae042f8c8695596458133d7f69cf28f", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=38644f81babd04820daa9d622ea75eb68c066c86", "patch": "@@ -1760,14 +1760,15 @@ transform_await_wrapper (tree *stmt, int *do_subtree, void *d)\n \n struct param_info\n {\n-  tree field_id;  /* The name of the copy in the coroutine frame.  */\n+  tree field_id;     /* The name of the copy in the coroutine frame.  */\n   vec<tree *> *body_uses; /* Worklist of uses, void if there are none.  */\n-  tree frame_type; /* The type used to represent this parm in the frame.  */\n-  tree orig_type;  /* The original type of the parm (not as passed).  */\n-  bool by_ref;  /* Was passed by reference.  */\n-  bool rv_ref;  /* Was an rvalue reference.  */\n-  bool pt_ref;  /* Was a pointer to object.  */\n+  tree frame_type;   /* The type used to represent this parm in the frame.  */\n+  tree orig_type;    /* The original type of the parm (not as passed).  */\n+  bool by_ref;       /* Was passed by reference.  */\n+  bool rv_ref;       /* Was an rvalue reference.  */\n+  bool pt_ref;       /* Was a pointer to object.  */\n   bool trivial_dtor; /* The frame type has a trivial DTOR.  */\n+  bool this_ptr;     /* Is 'this' */\n };\n \n struct local_var_info\n@@ -3279,7 +3280,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t    }\n \t  else\n \t    parm.frame_type = actual_type;\n-\n+\t  parm.this_ptr = is_this_parameter (arg);\n \t  parm.trivial_dtor = TYPE_HAS_TRIVIAL_DESTRUCTOR (parm.frame_type);\n \t  tree pname = DECL_NAME (arg);\n \t  char *buf = xasprintf (\"__parm.%s\", IDENTIFIER_POINTER (pname));\n@@ -3617,8 +3618,21 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t\t      false, tf_warning_or_error);\n \n \t  /* Add this to the promise CTOR arguments list, accounting for\n-\t     refs.  */\n-\t  if (parm.by_ref)\n+\t     refs and this ptr.  */\n+\t  if (parm.this_ptr)\n+\t    {\n+\t      /* We pass a reference to *this to the param preview.  */\n+\t      tree tt = TREE_TYPE (arg);\n+\t      gcc_checking_assert (POINTER_TYPE_P (tt));\n+\t      tree ct = TREE_TYPE (tt);\n+\t      tree this_ref = build1 (INDIRECT_REF, ct, arg);\n+\t      tree rt = cp_build_reference_type (ct, false);\n+\t      this_ref = convert_to_reference (rt, this_ref, CONV_STATIC,\n+\t\t\t\t\t       LOOKUP_NORMAL , NULL_TREE,\n+\t\t\t\t\t       tf_warning_or_error);\n+\t      vec_safe_push (promise_args, this_ref);\n+\t    }\n+\t  else if (parm.by_ref)\n \t    vec_safe_push (promise_args, fld_idx);\n \t  else if (parm.rv_ref)\n \t    vec_safe_push (promise_args, rvalue (fld_idx));"}, {"sha": "413014277c802e9d11415505efc511d0011581a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38644f81babd04820daa9d622ea75eb68c066c86", "patch": "@@ -1,3 +1,8 @@\n+2020-04-22 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\tPR c++/94682\n+\t* g++.dg/coroutines/promise-parm-preview-this.C: New test.\n+\n 2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/gcc-dg.exp (schedule-cleanups): Accept --save-temps."}, {"sha": "ca96f373da2b955490e3c830518057e51688eee0", "filename": "gcc/testsuite/g++.dg/coroutines/pr94682-preview-this.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94682-preview-this.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38644f81babd04820daa9d622ea75eb68c066c86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94682-preview-this.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94682-preview-this.C?ref=38644f81babd04820daa9d622ea75eb68c066c86", "patch": "@@ -0,0 +1,27 @@\n+#include \"coro.h\"\n+\n+struct promise;\n+\n+struct future\n+{\n+    using promise_type = promise;\n+};\n+\n+struct promise\n+{\n+  template<typename Class>\n+  promise(Class &,int) { static_assert(!std::is_pointer<Class>::value, \"\"); }\n+\n+  coro::suspend_never initial_suspend() { return {}; }\n+  coro::suspend_never final_suspend() { return {}; }\n+\n+  future get_return_object() { return {}; }\n+\n+  void return_value(int) {}\n+  void unhandled_exception() {}\n+};\n+\n+struct bar\n+{\n+  future foo(int param) { co_return 0; }\n+};\n\\ No newline at end of file"}]}