{"sha": "e01c9849c9eba93dba15a1203522ab568017a80f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAxYzk4NDljOWViYTkzZGJhMTVhMTIwMzUyMmFiNTY4MDE3YTgwZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-06-20T19:08:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-06-20T19:08:42Z"}, "message": "Makefile.am: Add rules.\n\n\n2002-06-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am: Add rules.\n\t* include/Makefile.in: Regenerate.\n\n\t* acinclude.m4: Define GLIBCPP_C_HEADERS_COMPATIBILITY.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* configure.target (c_model, c_compatibility): Add.\n\n\t* libsupc++/Makefile.am (c_sources): New.\n\t(libsupc___la_SOURCES): Add c_sources.\n\t(LTCOMPILE): Remove INCLUDES.\n\t(GCC_INCLUDES): New.\n\t(C_COMPILE): New, like COMPILE but without INCLUDES.\n\t(cxa_demangle.o): Use C_COMPILE.\n\t(dyn-string.o): Use C_COMPILE.\n\n\t* include/c/std_cstdarg.h: Define __need___va_list.\n\t* include/c/std_cstddef.h: Define need_size_t, need_ptrdiff_t,\n\tneed_NULL, need_offsetof.\n\nFrom-SVN: r54849", "tree": {"sha": "98f6e76c529998912d79a283ed61f48aa3aee008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f6e76c529998912d79a283ed61f48aa3aee008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e01c9849c9eba93dba15a1203522ab568017a80f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01c9849c9eba93dba15a1203522ab568017a80f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01c9849c9eba93dba15a1203522ab568017a80f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01c9849c9eba93dba15a1203522ab568017a80f/comments", "author": null, "committer": null, "parents": [{"sha": "0ed4a39059b53f029b62e1d668ebd6c3de21c424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed4a39059b53f029b62e1d668ebd6c3de21c424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed4a39059b53f029b62e1d668ebd6c3de21c424"}], "stats": {"total": 2722, "additions": 1426, "deletions": 1296}, "files": [{"sha": "1f1174dec82f90e44e93ee00af2818c1f240883a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -1,3 +1,25 @@\n+2002-06-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am: Add rules.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* acinclude.m4: Define GLIBCPP_C_HEADERS_COMPATIBILITY.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.target (c_model, c_compatibility): Add.\n+\t\n+\t* libsupc++/Makefile.am (c_sources): New.\n+\t(libsupc___la_SOURCES): Add c_sources.\n+\t(LTCOMPILE): Remove INCLUDES.\n+\t(GCC_INCLUDES): New.\n+\t(C_COMPILE): New, like COMPILE but without INCLUDES.\n+\t(cxa_demangle.o): Use C_COMPILE.\n+\t(dyn-string.o): Use C_COMPILE.\t\n+\t\n+\t* include/c/std_cstdarg.h: Define __need___va_list.  \n+\t* include/c/std_cstddef.h: Define need_size_t, need_ptrdiff_t,\n+\tneed_NULL, need_offsetof.\n+\n 2002-06-19  Steve Ellcey  <sje@cup.hp.com>\n \n \t* configure.in (HAVE_FINITE*, HAVE_ISINF*, HAVE_ISNAN*):  Remove"}, {"sha": "16bee97cfc1f63c60c7adc6c0b0bd65494c955eb", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -75,7 +75,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@"}, {"sha": "5192b4076f24f0472a2891370f1e54ba56eafc0c", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -1691,23 +1691,20 @@ changequote([, ])\n   dnl Option parsed, now set things appropriately\n   case \"$enable_cheaders\" in\n     c_shadow) \n-        CSHADOW_FLAGS=\"-fno-builtin\"\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_shadow'\n         ;;\n     c_std)   \n-        CSHADOW_FLAGS=\"\"\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_std'\n         ;;\n     c)   \n-        CSHADOW_FLAGS=\"\"\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c'\n         ;;\n   esac\n \n-  AC_SUBST(CSHADOW_FLAGS)\n   AC_SUBST(C_INCLUDE_DIR)\n   AM_CONDITIONAL(GLIBCPP_C_HEADERS_C, test \"$enable_cheaders\" = c)\n   AM_CONDITIONAL(GLIBCPP_C_HEADERS_C_STD, test \"$enable_cheaders\" = c_std)\n+  AM_CONDITIONAL(GLIBCPP_C_HEADERS_COMPATIBILITY, test \"$c_compatibility\" = yes)\n ])\n \n "}, {"sha": "170912487b32e839d454515ec856b911d579da16", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -1703,23 +1703,20 @@ changequote([, ])\n   dnl Option parsed, now set things appropriately\n   case \"$enable_cheaders\" in\n     c_shadow) \n-        CSHADOW_FLAGS=\"-fno-builtin\"\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_shadow'\n         ;;\n     c_std)   \n-        CSHADOW_FLAGS=\"\"\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_std'\n         ;;\n     c)   \n-        CSHADOW_FLAGS=\"\"\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c'\n         ;;\n   esac\n \n-  AC_SUBST(CSHADOW_FLAGS)\n   AC_SUBST(C_INCLUDE_DIR)\n   AM_CONDITIONAL(GLIBCPP_C_HEADERS_C, test \"$enable_cheaders\" = c)\n   AM_CONDITIONAL(GLIBCPP_C_HEADERS_C_STD, test \"$enable_cheaders\" = c_std)\n+  AM_CONDITIONAL(GLIBCPP_C_HEADERS_COMPATIBILITY, test \"$c_compatibility\" = yes)\n ])\n \n "}, {"sha": "4bd2c7e399248c81bce9648d313aa8baad064c19", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1221, "deletions": 1213, "changes": 2434, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e01c9849c9eba93dba15a1203522ab568017a80f"}, {"sha": "709c3a3f1566b843e0c0f988a5e22e8286a5d702", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -61,7 +61,7 @@ GLIBCPP_ENABLE_CLOCALE\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_C99([yes])\n GLIBCPP_ENABLE_LONG_LONG([yes])\n-GLIBCPP_ENABLE_CHEADERS([c_std])\n+GLIBCPP_ENABLE_CHEADERS([$c_model])\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_CXX_FLAGS([none])\n GLIBCPP_ENABLE_SJLJ_EXCEPTIONS"}, {"sha": "c6bd5c0ed646acb77a70b658caca5d1242bc570a", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -26,6 +26,10 @@\n #\n #   os_include_dir         OS-specific directory, defaults to os/generic.\n #\n+#   c_model                the model to use for \"C\" headers, defaults to c_std.\n+#\n+#   c_compatibility        if \"C\" compatibility headers are necessary, \n+#                              defaults to no.\n #\n # It possibly modifies the following variables:\n #\n@@ -40,6 +44,7 @@\n # *_include_dir variables.\n \n \n+# DEFAULTS\n # Try to guess a default cpu_include_dir based on the name of the CPU.  We\n # cannot do this for os_include_dir; there are too many portable operating\n # systems out there.  :-)\n@@ -49,10 +54,14 @@ else\n     cpu_include_dir=\"cpu/generic\"\n fi\n \n+c_model=c_std\n+c_compatibility=no\n+\n \n+# TARGET-SPECIFIC OVERRIDES \n+# Set any CPU-dependent bits.\n # Here we override defaults and catch more general cases due to naming\n-# conventions (e.g., chip_name* to catch all variants).  Also set any\n-# CPU-dependent compiler flags.\n+# conventions (e.g., chip_name* to catch all variants).  \n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target_cpu}\" in\n   alpha*)\n@@ -113,9 +122,11 @@ fi\n unset _cpu_incdir_fullpath\n \n \n-# Set the os_include_dir.  If atomic ops and/or numeric limits are OS-specific\n-# rather than CPU-specifc, set those here too.  Also set any OS-dependent\n-# compiler flags.\n+# Set any OS-dependent bits.\n+# Set the os_include_dir.  \n+# Set c_model, c_compatibility here.\n+# If atomic ops and/or numeric limits are OS-specific rather than\n+# CPU-specifc, set those here too.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target_os}\" in\n   aix4.[3456789]* | aix[56789]*)\n@@ -177,14 +188,15 @@ case \"${target_os}\" in\n     ;;\n   qnx6.[12]*)\n     os_include_dir=\"os/qnx/qnx6.1\"\n+    c_model=c\n     ;;\n   *)\n     os_include_dir=\"os/generic\"\n     ;;\n esac\n \n \n-# Set any flags dependent on the full target triplet.\n+# Set any OS-dependent and CPU-dependent bits.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${target}\" in\n   alpha*-*-*osf5*)"}, {"sha": "ca2b4039e2c058c4f8186cbb49eef3a98baf2122", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -204,15 +204,45 @@ c_base_headers_rename = \\\n \tcwchar \\\n \tcwctype \n \n+# \"C\" compatibility headers.\n+c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n+c_compatibility_builddir = .\n+c_compatibility_headers = \\\n+\t${c_compatibility_srcdir}/assert.h \\\n+\t${c_compatibility_srcdir}/ctype.h \\\n+\t${c_compatibility_srcdir}/errno.h \\\n+\t${c_compatibility_srcdir}/float.h \\\n+\t${c_compatibility_srcdir}/iso646.h \\\n+\t${c_compatibility_srcdir}/limits.h \\\n+\t${c_compatibility_srcdir}/locale.h \\\n+\t${c_compatibility_srcdir}/math.h \\\n+\t${c_compatibility_srcdir}/setjmp.h \\\n+\t${c_compatibility_srcdir}/signal.h \\\n+\t${c_compatibility_srcdir}/stdarg.h \\\n+\t${c_compatibility_srcdir}/stddef.h \\\n+\t${c_compatibility_srcdir}/stdio.h \\\n+\t${c_compatibility_srcdir}/stdlib.h \\\n+\t${c_compatibility_srcdir}/string.h \\\n+\t${c_compatibility_srcdir}/time.h \\\n+\t${c_compatibility_srcdir}/wchar.h \\\n+\t${c_compatibility_srcdir}/wctype.h \n+\n # Some of the different \"C\" header models need extra files.\n+# Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n if GLIBCPP_C_HEADERS_C_STD\n-c_base_headers_extra = \\\n-\t${c_base_srcdir}/cmath.tcc \n+c_base_headers_extra = ${c_base_srcdir}/cmath.tcc \n else\n c_base_headers_extra = \n endif\n \n+if GLIBCPP_C_HEADERS_COMPATIBILITY\n+c_compatibility_headers_extra = ${c_compatibility_headers}\n+else\n+c_compatibility_headers_extra = \n+endif\n+\n+\n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n@@ -286,8 +316,8 @@ target_headers = \\\n \t${target_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n-# These extra_target_headers files are all built with ad hoc naming rules.\n-extra_target_headers = \\\n+# These target_headers_extra files are all built with ad hoc naming rules.\n+target_headers_extra = \\\n \t${target_builddir}/basic_file.h \\\n \t${target_builddir}/c++config.h \\\n \t${target_builddir}/c++io.h \\\n@@ -303,7 +333,9 @@ thread_target_headers = \\\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n+allstamps = \\\n+\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n+\tstamp-backward stamp-ext \\\n \t${target_builddir}/stamp-target\n \n \n@@ -342,6 +374,15 @@ stamp-c_base: ${c_base_headers} ${c_base_headers_extra}\n \tfi ;\\\n \techo `date` > stamp-c_base\n \n+stamp-c_compatibility: ${c_compatibility_headers_extra}\n+\t@if [ ! -d \"${c_compatibility_builddir}\" ]; then \\\n+\t  mkdir -p ${c_compatibility_builddir} ;\\\n+\tfi ;\\\n+\tif [ ! -z \"${c_compatibility_headers_extra}\" ]; then \\\n+\t  (cd ${c_compatibility_builddir} && @LN_S@ $? . || true) ;\\\n+\tfi ;\\\n+\techo `date` > stamp-c_compatibility\n+\n stamp-backward: ${backward_headers}\n \t@if [ ! -d \"${backward_builddir}\" ]; then \\\n \t  mkdir -p ${backward_builddir} ;\\\n@@ -423,7 +464,7 @@ ${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n # components.  Yes, with minor differences, this is sheer duplication\n # of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n # `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n-# extra_target_headers are taken out of the build tree staging area;\n+# target_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n install-data-local:\n@@ -439,17 +480,18 @@ install-data-local:\n \t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${ext_builddir}; done\n \t$(mkinstalldirs) ${gxx_include_dir}/${c_base_builddir}\n \tfor file in ${c_base_headers_rename}; do \\\n-\t  $(INSTALL_DATA) ${c_base_builddir}/$${file} \\\n-\t    ${gxx_include_dir}/${c_base_builddir}; done\n-\tc_base_headers_extra_install=${c_base_headers_extra};\\\n+\t  $(INSTALL_DATA) ${c_base_builddir}/$${file} ${gxx_include_dir}; done\n+\tc_base_headers_extra_install='$(c_base_headers_extra)';\\\n \tfor file in $$c_base_headers_extra_install; do \\\n \t  $(INSTALL_DATA) $$file ${gxx_include_dir}/${bits_builddir}; done\n+\tc_compatibility_headers_install='$(c_compatibility_headers_extra)';\\\n+\tfor file in $$c_compatibility_headers_install; do \\\n+\t  $(INSTALL_DATA) $$file ${gxx_include_dir}; done\n \t$(mkinstalldirs) ${gxx_include_dir}/${std_builddir}\n \tfor file in ${std_headers_rename}; do \\\n-\t  $(INSTALL_DATA) ${std_builddir}/$${file} \\\n-\t    ${gxx_include_dir}/${std_builddir}; done\n+\t  $(INSTALL_DATA) ${std_builddir}/$${file} ${gxx_include_dir}; done\n \t$(mkinstalldirs) ${gxx_include_dir}/${target_builddir}\n-\tfor file in ${target_headers} ${extra_target_headers} \\\n+\tfor file in ${target_headers} ${target_headers_extra} \\\n \t ${thread_target_headers}; do \\\n \t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${target_builddir}; done\n "}, {"sha": "21d308dd1bb429f060013fd27cee1e39aa2a6964", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -75,7 +75,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -316,9 +315,34 @@ c_base_headers_rename = \\\n \tcwchar \\\n \tcwctype \n \n-@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = @GLIBCPP_C_HEADERS_C_STD_TRUE@\\\n-@GLIBCPP_C_HEADERS_C_STD_TRUE@\t${c_base_srcdir}/cmath.tcc \n+\n+# \"C\" compatibility headers.\n+c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n+c_compatibility_builddir = .\n+c_compatibility_headers = \\\n+\t${c_compatibility_srcdir}/assert.h \\\n+\t${c_compatibility_srcdir}/ctype.h \\\n+\t${c_compatibility_srcdir}/errno.h \\\n+\t${c_compatibility_srcdir}/float.h \\\n+\t${c_compatibility_srcdir}/iso646.h \\\n+\t${c_compatibility_srcdir}/limits.h \\\n+\t${c_compatibility_srcdir}/locale.h \\\n+\t${c_compatibility_srcdir}/math.h \\\n+\t${c_compatibility_srcdir}/setjmp.h \\\n+\t${c_compatibility_srcdir}/signal.h \\\n+\t${c_compatibility_srcdir}/stdarg.h \\\n+\t${c_compatibility_srcdir}/stddef.h \\\n+\t${c_compatibility_srcdir}/stdio.h \\\n+\t${c_compatibility_srcdir}/stdlib.h \\\n+\t${c_compatibility_srcdir}/string.h \\\n+\t${c_compatibility_srcdir}/time.h \\\n+\t${c_compatibility_srcdir}/wchar.h \\\n+\t${c_compatibility_srcdir}/wctype.h \n+\n+@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = @GLIBCPP_C_HEADERS_C_STD_TRUE@${c_base_srcdir}/cmath.tcc \n @GLIBCPP_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n+@GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = @GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@${c_compatibility_headers}\n+@GLIBCPP_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = .\n@@ -396,8 +420,8 @@ target_headers = \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n \n-# These extra_target_headers files are all built with ad hoc naming rules.\n-extra_target_headers = \\\n+# These target_headers_extra files are all built with ad hoc naming rules.\n+target_headers_extra = \\\n \t${target_builddir}/basic_file.h \\\n \t${target_builddir}/c++config.h \\\n \t${target_builddir}/c++io.h \\\n@@ -415,7 +439,9 @@ thread_target_headers = \\\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n+allstamps = \\\n+\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n+\tstamp-backward stamp-ext \\\n \t${target_builddir}/stamp-target\n \n \n@@ -429,7 +455,7 @@ uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n # components.  Yes, with minor differences, this is sheer duplication\n # of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n # `$(mkinstalldirs)' instead of `mkdir -p'.  In particular,\n-# extra_target_headers are taken out of the build tree staging area;\n+# target_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n CONFIG_HEADER = ../config.h\n@@ -569,6 +595,15 @@ stamp-c_base: ${c_base_headers} ${c_base_headers_extra}\n \tfi ;\\\n \techo `date` > stamp-c_base\n \n+stamp-c_compatibility: ${c_compatibility_headers_extra}\n+\t@if [ ! -d \"${c_compatibility_builddir}\" ]; then \\\n+\t  mkdir -p ${c_compatibility_builddir} ;\\\n+\tfi ;\\\n+\tif [ ! -z \"${c_compatibility_headers_extra}\" ]; then \\\n+\t  (cd ${c_compatibility_builddir} && @LN_S@ $? . || true) ;\\\n+\tfi ;\\\n+\techo `date` > stamp-c_compatibility\n+\n stamp-backward: ${backward_headers}\n \t@if [ ! -d \"${backward_builddir}\" ]; then \\\n \t  mkdir -p ${backward_builddir} ;\\\n@@ -652,17 +687,18 @@ install-data-local:\n \t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${ext_builddir}; done\n \t$(mkinstalldirs) ${gxx_include_dir}/${c_base_builddir}\n \tfor file in ${c_base_headers_rename}; do \\\n-\t  $(INSTALL_DATA) ${c_base_builddir}/$${file} \\\n-\t    ${gxx_include_dir}/${c_base_builddir}; done\n-\tc_base_headers_extra_install=${c_base_headers_extra};\\\n+\t  $(INSTALL_DATA) ${c_base_builddir}/$${file} ${gxx_include_dir}; done\n+\tc_base_headers_extra_install='$(c_base_headers_extra)';\\\n \tfor file in $$c_base_headers_extra_install; do \\\n \t  $(INSTALL_DATA) $$file ${gxx_include_dir}/${bits_builddir}; done\n+\tc_compatibility_headers_install='$(c_compatibility_headers_extra)';\\\n+\tfor file in $$c_compatibility_headers_install; do \\\n+\t  $(INSTALL_DATA) $$file ${gxx_include_dir}; done\n \t$(mkinstalldirs) ${gxx_include_dir}/${std_builddir}\n \tfor file in ${std_headers_rename}; do \\\n-\t  $(INSTALL_DATA) ${std_builddir}/$${file} \\\n-\t    ${gxx_include_dir}/${std_builddir}; done\n+\t  $(INSTALL_DATA) ${std_builddir}/$${file} ${gxx_include_dir}; done\n \t$(mkinstalldirs) ${gxx_include_dir}/${target_builddir}\n-\tfor file in ${target_headers} ${extra_target_headers} \\\n+\tfor file in ${target_headers} ${target_headers_extra} \\\n \t ${thread_target_headers}; do \\\n \t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${target_builddir}; done\n "}, {"sha": "39d019bc1c28dbb9d440066f32c200b19506c8b8", "filename": "libstdc++-v3/include/c/std_cstdarg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstdarg.h?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -36,6 +36,7 @@\n \n #pragma GCC system_header\n \n+#undef __need___va_list\n #include_next <stdarg.h>\n \n #endif"}, {"sha": "82561cdac7bc37d15510505c0dbf361cf25d9f23", "filename": "libstdc++-v3/include/c/std_cstddef.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fstd_cstddef.h?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -36,6 +36,10 @@\n \n #pragma GCC system_header\n \n+#define __need_size_t\n+#define __need_ptrdiff_t\n+#define __need_NULL\n+#define __need_offsetof\n #include_next <stddef.h>\n \n #endif"}, {"sha": "efe7c27d394a8f41fdea7797f90069e12c92fc1a", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -75,7 +75,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@"}, {"sha": "545260024dd6b42060fa144fc77e292f1f3518b0", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -75,7 +75,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@"}, {"sha": "6017129a2523d88dbeb096bb53dfb8cd95704113", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -49,7 +49,7 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n # Warning flags to use.\n WARN_CXXFLAGS = \\\n@@ -58,21 +58,23 @@ WARN_CXXFLAGS = \\\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t$(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h \n \n-sources = \\\n+c_sources = \\\n \tcxa_demangle.c \\\n+\tdyn-string.c \n+\n+sources = \\\n \tdel_op.cc \\\n \tdel_opnt.cc \\\n \tdel_opv.cc \\\n \tdel_opvnt.cc \\\n-\tdyn-string.c \\\n \teh_alloc.cc \\\n \teh_aux_runtime.cc \\\n \teh_catch.cc \\\n@@ -92,34 +94,40 @@ sources = \\\n \ttinfo2.cc \\\n \tvec.cc\n \n-libsupc___la_SOURCES = $(sources)\n+libsupc___la_SOURCES = $(sources) $(c_sources)\n libsupc__convenience_la_SOURCES = $(sources)\n \n glibcppinstalldir = @gxx_include_dir@\n glibcppinstall_HEADERS = $(headers)\n \n LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n \n-# Use special rules for pulling things out of libiberty.\n+# Use special rules for pulling things out of libiberty.  These\n+# objects should be compiled with the \"C\" compiler, not the C++\n+# compiler, and also should not use the C++ includes.\n+C_COMPILE = \\\n+\t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\n cxa_demangle.c:\n \trm -f $@\n \t$(LN_S) $(toplevel_srcdir)/libiberty/cp-demangle.c $@\n cxa_demangle.lo: cxa_demangle.c\n \t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n cxa_demangle.o: cxa_demangle.c\n-\t$(COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n dyn-string.c:\n \trm -f $@\n \t$(LN_S) $(toplevel_srcdir)/libiberty/dyn-string.c $@\n dyn-string.lo: dyn-string.c\n \t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n dyn-string.o: dyn-string.c\n-\t$(COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n # LTCOMPILE is copied from LTCXXCOMPILE below.\n-LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared \\\n-               --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n-               $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n+\t    $(DEFS) $(GCC_INCLUDES) \\\n+            $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be"}, {"sha": "471bb620313b96eb52b884edab9dfa53d3056670", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -74,7 +74,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -155,7 +154,7 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n@@ -166,23 +165,26 @@ WARN_CXXFLAGS = \\\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t$(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n \n \n headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h \n \n \n-sources = \\\n+c_sources = \\\n \tcxa_demangle.c \\\n+\tdyn-string.c \n+\n+\n+sources = \\\n \tdel_op.cc \\\n \tdel_opnt.cc \\\n \tdel_opv.cc \\\n \tdel_opvnt.cc \\\n-\tdyn-string.c \\\n \teh_alloc.cc \\\n \teh_aux_runtime.cc \\\n \teh_catch.cc \\\n@@ -203,18 +205,26 @@ sources = \\\n \tvec.cc\n \n \n-libsupc___la_SOURCES = $(sources)\n+libsupc___la_SOURCES = $(sources) $(c_sources)\n libsupc__convenience_la_SOURCES = $(sources)\n \n glibcppinstalldir = @gxx_include_dir@\n glibcppinstall_HEADERS = $(headers)\n \n LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n \n+# Use special rules for pulling things out of libiberty.  These\n+# objects should be compiled with the \"C\" compiler, not the C++\n+# compiler, and also should not use the C++ includes.\n+C_COMPILE = \\\n+\t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\n+\n # LTCOMPILE is copied from LTCXXCOMPILE below.\n-LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared \\\n-               --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n-               $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n+\t    $(DEFS) $(GCC_INCLUDES) \\\n+            $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n@@ -277,18 +287,18 @@ LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libsupc__convenience_la_LDFLAGS = \n libsupc__convenience_la_LIBADD = \n-libsupc__convenience_la_OBJECTS =  cxa_demangle.lo del_op.lo del_opnt.lo \\\n-del_opv.lo del_opvnt.lo dyn-string.lo eh_alloc.lo eh_aux_runtime.lo \\\n-eh_catch.lo eh_exception.lo eh_globals.lo eh_personality.lo \\\n-eh_terminate.lo eh_throw.lo eh_type.lo new_handler.lo new_op.lo \\\n-new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo\n+libsupc__convenience_la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo \\\n+del_opvnt.lo eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo \\\n+eh_globals.lo eh_personality.lo eh_terminate.lo eh_throw.lo eh_type.lo \\\n+new_handler.lo new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo \\\n+tinfo.lo tinfo2.lo vec.lo\n libsupc___la_LDFLAGS = \n libsupc___la_LIBADD = \n-libsupc___la_OBJECTS =  cxa_demangle.lo del_op.lo del_opnt.lo del_opv.lo \\\n-del_opvnt.lo dyn-string.lo eh_alloc.lo eh_aux_runtime.lo eh_catch.lo \\\n-eh_exception.lo eh_globals.lo eh_personality.lo eh_terminate.lo \\\n-eh_throw.lo eh_type.lo new_handler.lo new_op.lo new_opnt.lo new_opv.lo \\\n-new_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo\n+libsupc___la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo del_opvnt.lo \\\n+eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo eh_globals.lo \\\n+eh_personality.lo eh_terminate.lo eh_throw.lo eh_type.lo new_handler.lo \\\n+new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo \\\n+tinfo2.lo vec.lo cxa_demangle.lo dyn-string.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n@@ -541,21 +551,20 @@ mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n-# Use special rules for pulling things out of libiberty.\n cxa_demangle.c:\n \trm -f $@\n \t$(LN_S) $(toplevel_srcdir)/libiberty/cp-demangle.c $@\n cxa_demangle.lo: cxa_demangle.c\n \t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n cxa_demangle.o: cxa_demangle.c\n-\t$(COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n dyn-string.c:\n \trm -f $@\n \t$(LN_S) $(toplevel_srcdir)/libiberty/dyn-string.c $@\n dyn-string.lo: dyn-string.c\n \t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n dyn-string.o: dyn-string.c\n-\t$(COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n # We have to have rules modified from the default to counteract SUN make\n # prepending each of $(glibcppinstall_HEADERS) with VPATH below."}, {"sha": "b14721acbbb73077c506a014730f41c47fb62c45", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -75,7 +75,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@"}, {"sha": "36c5dfd4b81be68c07b321a40c21fc60abc649ed", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -41,7 +41,7 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n # Warning flags to use.\n WARN_CXXFLAGS = \\"}, {"sha": "39a51b9f6a22b509a82e97634a3e9a9401f99a15", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -74,7 +74,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n@@ -145,7 +144,7 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use."}, {"sha": "eda3ba1c69f631aedb1120026969b22f8cec51dc", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01c9849c9eba93dba15a1203522ab568017a80f/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=e01c9849c9eba93dba15a1203522ab568017a80f", "patch": "@@ -75,7 +75,6 @@ CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n-CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}]}