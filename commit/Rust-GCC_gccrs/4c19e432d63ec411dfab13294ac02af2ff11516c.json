{"sha": "4c19e432d63ec411dfab13294ac02af2ff11516c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxOWU0MzJkNjNlYzQxMWRmYWIxMzI5NGFjMDJhZjJmZjExNTE2Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-06-02T18:35:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-06-02T18:35:37Z"}, "message": "PR libstdc++/80624 satisfy invariant for char_traits<char16_t>::eof()\n\n\tPR libstdc++/80624\n\t* doc/xml/manual/status_cxx2011.xml: Document to_int_type behaviour.\n\t* include/bits/char_traits.h (char_traits<char16_t>::to_int_type):\n\tTransform eof value to U+FFFD.\n\t* testsuite/21_strings/char_traits/requirements/char16_t/eof.cc: New.\n\t* testsuite/27_io/basic_streambuf/sgetc/char16_t/80624.cc: New.\n\t* testsuite/27_io/basic_streambuf/sputc/char16_t/80624.cc: New.\n\nFrom-SVN: r248843", "tree": {"sha": "22725a70454d80b6ac8bcfee93c8c8a34c4e29bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22725a70454d80b6ac8bcfee93c8c8a34c4e29bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c19e432d63ec411dfab13294ac02af2ff11516c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19e432d63ec411dfab13294ac02af2ff11516c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c19e432d63ec411dfab13294ac02af2ff11516c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19e432d63ec411dfab13294ac02af2ff11516c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cbae4a7a23c0faf9c1e14ebd07e7b137b9b6792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbae4a7a23c0faf9c1e14ebd07e7b137b9b6792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cbae4a7a23c0faf9c1e14ebd07e7b137b9b6792"}], "stats": {"total": 160, "additions": 159, "deletions": 1}, "files": [{"sha": "4d9148437d57d7aea47c9e1da2e76749b8e574cc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c19e432d63ec411dfab13294ac02af2ff11516c", "patch": "@@ -1,5 +1,13 @@\n 2017-06-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/80624\n+\t* doc/xml/manual/status_cxx2011.xml: Document to_int_type behaviour.\n+\t* include/bits/char_traits.h (char_traits<char16_t>::to_int_type):\n+\tTransform eof value to U+FFFD.\n+\t* testsuite/21_strings/char_traits/requirements/char16_t/eof.cc: New.\n+\t* testsuite/27_io/basic_streambuf/sgetc/char16_t/80624.cc: New.\n+\t* testsuite/27_io/basic_streambuf/sputc/char16_t/80624.cc: New.\n+\n \t* libsupc++/Makefile.am: Remove custom targets for files that need to\n \tbe compiled as C++11 or C++14.\n \t* libsupc++/Makefile.in: Regenerate."}, {"sha": "0fa4bc0dffe23d7c70126c9d3a8e290d365e9a8f", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=4c19e432d63ec411dfab13294ac02af2ff11516c", "patch": "@@ -2630,6 +2630,10 @@ particular release.\n       <classname>u32streampos</classname> are both synonyms for\n       <classname>fpos&lt;mbstate_t&gt;</classname>.\n       The function <function>eof</function> returns <code>int_type(-1)</code>.\n+      <function>char_traits&lt;char16_t&gt;::to_int_type</function> will\n+      transform the \"noncharacter\" U+FFFF to U+FFFD (REPLACEMENT CHARACTER).\n+      This is done to ensure that <function>to_int_type</function> never\n+      returns the same value as <function>eof</function>, which is U+FFFF.\n    </para>\n \n    <para>"}, {"sha": "f19120bd16a4bf15bd90fe00848ba1e6ceb4239c", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=4c19e432d63ec411dfab13294ac02af2ff11516c", "patch": "@@ -507,7 +507,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static constexpr int_type\n       to_int_type(const char_type& __c) noexcept\n-      { return int_type(__c); }\n+      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }\n \n       static constexpr bool\n       eq_int_type(const int_type& __c1, const int_type& __c2) noexcept"}, {"sha": "05def7f67d4c0aca964a6372c563f8cf370ade4a", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char16_t/eof.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar16_t%2Feof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar16_t%2Feof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar16_t%2Feof.cc?ref=4c19e432d63ec411dfab13294ac02af2ff11516c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <string>\n+\n+\n+constexpr bool not_equal_to_eof(char16_t c)\n+{\n+  using T = std::char_traits<char16_t>;\n+  return T::eq_int_type(T::eof(), T::to_int_type(c)) == false;\n+}\n+\n+// Last two code points of the BMP are noncharacters:\n+static_assert(not_equal_to_eof(u'\\uFFFE'), \"U+FFFE compares unequal to eof\");\n+static_assert(not_equal_to_eof(u'\\uFFFF'), \"U+FFFF compares unequal to eof\");"}, {"sha": "c08c2274706e31913eb10e0bb04f4ca93ec8a225", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetc/char16_t/80624.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar16_t%2F80624.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar16_t%2F80624.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fchar16_t%2F80624.cc?ref=4c19e432d63ec411dfab13294ac02af2ff11516c", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct streambuf : std::basic_streambuf<char16_t>\n+{\n+  basic_streambuf* setbuf(char_type* s, std::streamsize n) override\n+  {\n+    setp(s, s + n);\n+    setg(s, s, s + n);\n+    return this;\n+  }\n+};\n+\n+void\n+test01()\n+{\n+  using traits = streambuf::traits_type;\n+\n+  char16_t buf[2] = { streambuf::char_type(-1), streambuf::char_type(-2) };\n+  streambuf sb;\n+  sb.pubsetbuf(buf, 2);\n+\n+  streambuf::int_type res;\n+\n+  res = sb.sbumpc();\n+  VERIFY( traits::eq_int_type(res, traits::eof()) == false );\n+  res = sb.sbumpc();\n+  VERIFY( traits::eq_int_type(res, traits::eof()) == false );\n+  res = sb.sbumpc();\n+  VERIFY( traits::eq_int_type(res, traits::eof()) == true );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "a2a19176514ad784f88a80d0a738202558a112e5", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputc/char16_t/80624.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar16_t%2F80624.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19e432d63ec411dfab13294ac02af2ff11516c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar16_t%2F80624.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fchar16_t%2F80624.cc?ref=4c19e432d63ec411dfab13294ac02af2ff11516c", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct streambuf : std::basic_streambuf<char16_t>\n+{\n+  basic_streambuf* setbuf(char_type* s, std::streamsize n) override\n+  {\n+    setp(s, s + n);\n+    setg(s, s, s + n);\n+    return this;\n+  }\n+};\n+\n+void\n+test01()\n+{\n+  using traits = streambuf::traits_type;\n+\n+  char16_t buf[2] = { };\n+  streambuf sb;\n+  sb.pubsetbuf(buf, 2);\n+\n+  streambuf::int_type res;\n+\n+  res = sb.sputc(streambuf::char_type(-1));\n+  VERIFY( traits::eq_int_type(res, traits::eof()) == false );\n+  res = sb.sputc(streambuf::char_type(-2));\n+  VERIFY( traits::eq_int_type(res, traits::eof()) == false );\n+  res = sb.sputc(streambuf::char_type(1));\n+  VERIFY( traits::eq_int_type(res, traits::eof()) == true );\n+\n+  VERIFY( buf[0] == streambuf::char_type(-1) );\n+  VERIFY( buf[1] == streambuf::char_type(-2) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}