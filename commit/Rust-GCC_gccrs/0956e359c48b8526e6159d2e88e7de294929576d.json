{"sha": "0956e359c48b8526e6159d2e88e7de294929576d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk1NmUzNTljNDhiODUyNmU2MTU5ZDJlODhlN2RlMjk0OTI5NTc2ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-10-27T22:12:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-27T22:12:19Z"}, "message": "omp-low.c (oacc_init_rediction_array): New.\n\n\t* omp-low.c (oacc_init_rediction_array): New.\n\t(oacc_initialize_reduction_data): Initialize array.\n\nFrom-SVN: r229464", "tree": {"sha": "182f5d76eb4cf3705ccbbb935bf4cf19714f02dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/182f5d76eb4cf3705ccbbb935bf4cf19714f02dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0956e359c48b8526e6159d2e88e7de294929576d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0956e359c48b8526e6159d2e88e7de294929576d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0956e359c48b8526e6159d2e88e7de294929576d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0956e359c48b8526e6159d2e88e7de294929576d/comments", "author": null, "committer": null, "parents": [{"sha": "adc2b4d79c153b3036ba7e87f578e9bfea919482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc2b4d79c153b3036ba7e87f578e9bfea919482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc2b4d79c153b3036ba7e87f578e9bfea919482"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "c3a8e3b81c970a49359bb811b89dba4ec67e1a3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0956e359c48b8526e6159d2e88e7de294929576d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0956e359c48b8526e6159d2e88e7de294929576d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0956e359c48b8526e6159d2e88e7de294929576d", "patch": "@@ -1,3 +1,8 @@\n+2015-10-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* omp-low.c (oacc_init_rediction_array): New.\n+\t(oacc_initialize_reduction_data): Initialize array.\n+\n 2015-10-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c (pass_oacc_device_lower::execute): Ignore errors."}, {"sha": "f06daa1444a00612b174ca31246804917bf89cf3", "filename": "gcc/omp-low.c", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0956e359c48b8526e6159d2e88e7de294929576d/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0956e359c48b8526e6159d2e88e7de294929576d/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=0956e359c48b8526e6159d2e88e7de294929576d", "patch": "@@ -12239,6 +12239,71 @@ oacc_gimple_assign (tree dest, tree_code op, tree src, gimple_seq *seq)\n   gimplify_assign (dest, result, seq);\n }\n \n+/* Initialize the reduction array with default values.  */\n+\n+static void\n+oacc_init_reduction_array (tree array, tree init, tree nthreads,\n+\t\t\t   gimple_seq *stmt_seqp)\n+{\n+  tree type = TREE_TYPE (TREE_TYPE (array));\n+  tree x, loop_header, loop_body, loop_exit;\n+  gimple *stmt;\n+\n+  /* Create for loop.\n+\n+     let var = the original reduction variable\n+     let array = reduction variable array\n+\n+     for (i = 0; i < nthreads; i++)\n+       var op= array[i]\n+ */\n+\n+  loop_header = create_artificial_label (UNKNOWN_LOCATION);\n+  loop_body = create_artificial_label (UNKNOWN_LOCATION);\n+  loop_exit = create_artificial_label (UNKNOWN_LOCATION);\n+\n+  /* Create and initialize an index variable.  */\n+  tree ix = create_tmp_var (sizetype);\n+  gimplify_assign (ix, fold_build1 (NOP_EXPR, sizetype, integer_zero_node),\n+\t\t   stmt_seqp);\n+\n+  /* Insert the loop header label here.  */\n+  gimple_seq_add_stmt (stmt_seqp, gimple_build_label (loop_header));\n+\n+  /* Exit loop if ix >= nthreads.  */\n+  x = create_tmp_var (sizetype);\n+  gimplify_assign (x, fold_build1 (NOP_EXPR, sizetype, nthreads), stmt_seqp);\n+  stmt = gimple_build_cond (GE_EXPR, ix, x, loop_exit, loop_body);\n+  gimple_seq_add_stmt (stmt_seqp, stmt);\n+\n+  /* Insert the loop body label here.  */\n+  gimple_seq_add_stmt (stmt_seqp, gimple_build_label (loop_body));\n+\n+  /* Calculate the array offset.  */\n+  tree offset = create_tmp_var (sizetype);\n+  gimplify_assign (offset, TYPE_SIZE_UNIT (type), stmt_seqp);\n+  stmt = gimple_build_assign (offset, MULT_EXPR, offset, ix);\n+  gimple_seq_add_stmt (stmt_seqp, stmt);\n+\n+  tree ptr = create_tmp_var (TREE_TYPE (array));\n+  stmt = gimple_build_assign (ptr, POINTER_PLUS_EXPR, array, offset);\n+  gimple_seq_add_stmt (stmt_seqp, stmt);\n+\n+  /* Assign init.  */\n+  gimplify_assign (build_simple_mem_ref (ptr), init, stmt_seqp);\n+\n+  /* Increment the induction variable.  */\n+  tree one = fold_build1 (NOP_EXPR, sizetype, integer_one_node);\n+  stmt = gimple_build_assign (ix, PLUS_EXPR, ix, one);\n+  gimple_seq_add_stmt (stmt_seqp, stmt);\n+\n+  /* Go back to the top of the loop.  */\n+  gimple_seq_add_stmt (stmt_seqp, gimple_build_goto (loop_header));\n+\n+  /* Place the loop exit label here.  */\n+  gimple_seq_add_stmt (stmt_seqp, gimple_build_label (loop_exit));\n+}\n+\n /* Helper function to initialize local data for the reduction arrays.\n    The reduction arrays need to be placed inside the calling function\n    for accelerators, or else the host won't be able to preform the final\n@@ -12298,12 +12363,18 @@ oacc_initialize_reduction_data (tree clauses, tree nthreads,\n       gimple_call_set_lhs (stmt, array);\n       gimple_seq_add_stmt (stmt_seqp, stmt);\n \n+      /* Initialize array. */\n+      tree init = omp_reduction_init_op (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t OMP_CLAUSE_REDUCTION_CODE (c),\n+\t\t\t\t\t type);\n+      oacc_init_reduction_array (array, init, nthreads, stmt_seqp);\n+\n       /* Map this array into the accelerator.  */\n \n       /* Add the reduction array to the list of clauses.  */\n       tree x = array;\n       t = build_omp_clause (gimple_location (ctx->stmt), OMP_CLAUSE_MAP);\n-      OMP_CLAUSE_SET_MAP_KIND (t, GOMP_MAP_FORCE_FROM);\n+      OMP_CLAUSE_SET_MAP_KIND (t, GOMP_MAP_FORCE_TOFROM);\n       OMP_CLAUSE_DECL (t) = x;\n       OMP_CLAUSE_CHAIN (t) = NULL;\n       if (oc)"}]}