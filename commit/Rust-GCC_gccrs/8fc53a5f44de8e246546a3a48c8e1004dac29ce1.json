{"sha": "8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjNTNhNWY0NGRlOGUyNDY1NDZhM2E0OGM4ZTEwMDRkYWMyOWNlMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-09-21T21:12:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-09-21T21:12:20Z"}, "message": "predicates.md (ia64_cbranch_operator): Accept unordered comparison operators when -fno-trapping-math is in effect.\n\n\t* config/ia64/predicates.md (ia64_cbranch_operator): Accept unordered\n\tcomparison operators when -fno-trapping-math is in effect.\n\t* config/ia64/ia64.c (ia64_expand_compare): Add support for unordered\n\tcomparison operators in TFmode and assert that unsupported operators\n\tcannot reach here.\n\t(ia64_print_operand): Likewise.\n\nFrom-SVN: r202814", "tree": {"sha": "de55b56af7da1daf5a8da25d3ba7cd9706a9bf9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de55b56af7da1daf5a8da25d3ba7cd9706a9bf9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/comments", "author": null, "committer": null, "parents": [{"sha": "0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "57fb929ebb9cce58424d86267cdc5caa0bf51acf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "patch": "@@ -1,4 +1,13 @@\n-2013-09-20  Jan Hubicka  <jh@suse.cz>\n+2013-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/ia64/predicates.md (ia64_cbranch_operator): Accept unordered\n+\tcomparison operators when -fno-trapping-math is in effect.\n+\t* config/ia64/ia64.c (ia64_expand_compare): Add support for unordered\n+\tcomparison operators in TFmode and assert that unsupported operators\n+\tcannot reach here.\n+\t(ia64_print_operand): Likewise.\n+\n+2013-09-21  Jan Hubicka  <jh@suse.cz>\n \n \t* x86-tune.def (partial_reg_stall): Disable for CoreI7 and newer.\n \t(sse_typeless_stores): Enable for core"}, {"sha": "e12b0809e7dd1a327ed045fe38ce501f5be8a819", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "patch": "@@ -1754,7 +1754,7 @@ ia64_expand_compare (rtx *expr, rtx *op0, rtx *op1)\n   else if (TARGET_HPUX && GET_MODE (*op0) == TFmode)\n     {\n       enum qfcmp_magic {\n-\tQCMP_INV = 1,\t/* Raise FP_INVALID on SNaN as a side effect.  */\n+\tQCMP_INV = 1,\t/* Raise FP_INVALID on NaNs as a side effect.  */\n \tQCMP_UNORD = 2,\n \tQCMP_EQ = 4,\n \tQCMP_LT = 8,\n@@ -1768,21 +1768,27 @@ ia64_expand_compare (rtx *expr, rtx *op0, rtx *op1)\n       switch (code)\n \t{\n \t  /* 1 = equal, 0 = not equal.  Equality operators do\n-\t     not raise FP_INVALID when given an SNaN operand.  */\n+\t     not raise FP_INVALID when given a NaN operand.  */\n \tcase EQ:        magic = QCMP_EQ;                  ncode = NE; break;\n \tcase NE:        magic = QCMP_EQ;                  ncode = EQ; break;\n \t  /* isunordered() from C99.  */\n \tcase UNORDERED: magic = QCMP_UNORD;               ncode = NE; break;\n \tcase ORDERED:   magic = QCMP_UNORD;               ncode = EQ; break;\n \t  /* Relational operators raise FP_INVALID when given\n-\t     an SNaN operand.  */\n+\t     a NaN operand.  */\n \tcase LT:        magic = QCMP_LT        |QCMP_INV; ncode = NE; break;\n \tcase LE:        magic = QCMP_LT|QCMP_EQ|QCMP_INV; ncode = NE; break;\n \tcase GT:        magic = QCMP_GT        |QCMP_INV; ncode = NE; break;\n \tcase GE:        magic = QCMP_GT|QCMP_EQ|QCMP_INV; ncode = NE; break;\n-\t  /* FUTURE: Implement UNEQ, UNLT, UNLE, UNGT, UNGE, LTGT.\n-\t     Expanders for buneq etc. weuld have to be added to ia64.md\n-\t     for this to be useful.  */\n+          /* Unordered relational operators do not raise FP_INVALID\n+\t     when given a NaN operand.  */\n+\tcase UNLT:    magic = QCMP_LT        |QCMP_UNORD; ncode = NE; break;\n+\tcase UNLE:    magic = QCMP_LT|QCMP_EQ|QCMP_UNORD; ncode = NE; break;\n+\tcase UNGT:    magic = QCMP_GT        |QCMP_UNORD; ncode = NE; break;\n+\tcase UNGE:    magic = QCMP_GT|QCMP_EQ|QCMP_UNORD; ncode = NE; break;\n+\t  /* Not supported.  */\n+\tcase UNEQ:\n+\tcase LTGT:\n \tdefault: gcc_unreachable ();\n \t}\n \n@@ -5277,6 +5283,9 @@ ia64_print_operand (FILE * file, rtx x, int code)\n \tcase UNGE:\n \t  str = \"nlt\";\n \t  break;\n+\tcase UNEQ:\n+\tcase LTGT:\n+\t  gcc_unreachable ();\n \tdefault:\n \t  str = GET_RTX_NAME (GET_CODE (x));\n \t  break;"}, {"sha": "af7bc8ee4c208a9161660e9139d3216b26fea69f", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc53a5f44de8e246546a3a48c8e1004dac29ce1/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=8fc53a5f44de8e246546a3a48c8e1004dac29ce1", "patch": "@@ -568,9 +568,15 @@\n \t    (match_test \"op == CONST0_RTX (GET_MODE (op))\"))))\n \n ;; Return 1 if OP is a valid comparison operator for \"cbranch\" instructions.\n+;; If we're assuming that FP operations cannot generate user-visible traps,\n+;; then we can use the FP unordered-signaling instructions to implement the\n+;; FP unordered-quiet comparison predicates.\n (define_predicate \"ia64_cbranch_operator\"\n-  (ior (match_operand 0 \"ordered_comparison_operator\")\n-       (match_code \"ordered,unordered\")))\n+  (if_then_else (match_test \"flag_trapping_math\")\n+\t\t(ior (match_operand 0 \"ordered_comparison_operator\")\n+\t\t      (match_code \"ordered,unordered\"))\n+\t\t(and (match_operand 0 \"comparison_operator\")\n+\t\t      (not (match_code \"uneq,ltgt\")))))\n \n ;; True if this is a comparison operator, which accepts a normal 8-bit\n ;; signed immediate operand."}]}