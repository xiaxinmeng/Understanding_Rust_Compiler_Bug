{"sha": "3348b696a815eb5ddbde242b582ad43aeef6caad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM0OGI2OTZhODE1ZWI1ZGRiZGUyNDJiNTgyYWQ0M2FlZWY2Y2FhZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-18T21:51:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-18T21:51:30Z"}, "message": "basic-block.h (try_redirect_by_replacing_jump): Declare.\n\n\t* basic-block.h (try_redirect_by_replacing_jump): Declare.\n\t* cfgcleanup.c (try_optimize_cfg): Use it.\n\t* cfgrtl.c (try_redirect_by_replacing_jump): Export.\n\t(rtl_redirect_edge_and_branch, cfg_layout_redirect_edge_and_branch):\n\tKill hack.\n\t(cfg_layout_merge_blocks): Use try_redirect_by_replacing_jump.\n\n\tRevert:\n\t2004-01-16  Geoffrey Keating  <geoffk@apple.com>\n\n\t\t* cfgrtl.c (try_redirect_by_replacing_jump): Optimize tablejumps\n\t\teven after reload, just don't remove the actual jump tables.\n\nFrom-SVN: r76115", "tree": {"sha": "db89690196904c8e80b96367e5391e21d394dfd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db89690196904c8e80b96367e5391e21d394dfd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3348b696a815eb5ddbde242b582ad43aeef6caad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3348b696a815eb5ddbde242b582ad43aeef6caad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3348b696a815eb5ddbde242b582ad43aeef6caad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3348b696a815eb5ddbde242b582ad43aeef6caad/comments", "author": null, "committer": null, "parents": [{"sha": "72d89d359c5ead605318589e7ee6c30be782adce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d89d359c5ead605318589e7ee6c30be782adce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d89d359c5ead605318589e7ee6c30be782adce"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "74e3bab63e38810aeaaeb166fa08da8a4f5cccb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3348b696a815eb5ddbde242b582ad43aeef6caad", "patch": "@@ -1,3 +1,18 @@\n+2004-01-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* basic-block.h (try_redirect_by_replacing_jump): Declare.\n+\t* cfgcleanup.c (try_optimize_cfg): Use it.\n+\t* cfgrtl.c (try_redirect_by_replacing_jump): Export.\n+\t(rtl_redirect_edge_and_branch, cfg_layout_redirect_edge_and_branch):\n+\tKill hack.\n+\t(cfg_layout_merge_blocks): Use try_redirect_by_replacing_jump.\n+\n+\tRevert:\n+\t2004-01-16  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t\t* cfgrtl.c (try_redirect_by_replacing_jump): Optimize tablejumps\n+\t\teven after reload, just don't remove the actual jump tables.\n+\n 2004-01-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/rs6000/rs6000.h (STRICT_ARGUMENT_NAMING): Remove."}, {"sha": "190281830c54f7f22de847f3a1973025c8d948ce", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3348b696a815eb5ddbde242b582ad43aeef6caad", "patch": "@@ -640,6 +640,7 @@ extern void iterate_fix_dominators (enum cdi_direction, basic_block *, int);\n extern void verify_dominators (enum cdi_direction);\n extern basic_block first_dom_son (enum cdi_direction, basic_block);\n extern basic_block next_dom_son (enum cdi_direction, basic_block);\n+extern bool try_redirect_by_replacing_jump (edge, basic_block, bool);\n \n #include \"cfghooks.h\"\n "}, {"sha": "fe3a3b34493c450387fac7208dc8d57658652daa", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=3348b696a815eb5ddbde242b582ad43aeef6caad", "patch": "@@ -1785,13 +1785,13 @@ try_optimize_cfg (int mode)\n \t      /* If B has a single outgoing edge, but uses a\n \t\t non-trivial jump instruction without side-effects, we\n \t\t can either delete the jump entirely, or replace it\n-\t\t with a simple unconditional jump.  Use\n-\t\t redirect_edge_and_branch to do the dirty work.  */\n+\t\t with a simple unconditional jump.  */\n \t      if (b->succ\n \t\t  && ! b->succ->succ_next\n \t\t  && b->succ->dest != EXIT_BLOCK_PTR\n \t\t  && onlyjump_p (BB_END (b))\n-\t\t  && redirect_edge_and_branch (b->succ, b->succ->dest))\n+\t\t  && try_redirect_by_replacing_jump (b->succ, b->succ->dest,\n+\t\t\t\t\t\t     (mode & CLEANUP_CFGLAYOUT)))\n \t\t{\n \t\t  update_forwarder_flag (b);\n \t\t  changed_here = true;"}, {"sha": "f3e0d34ad8fb2c3182bc37061c4c2e4d51dac23f", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3348b696a815eb5ddbde242b582ad43aeef6caad/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=3348b696a815eb5ddbde242b582ad43aeef6caad", "patch": "@@ -687,7 +687,7 @@ block_label (basic_block block)\n    apply only if all edges now point to the same block.  The parameters and\n    return values are equivalent to redirect_edge_and_branch.  */\n \n-static bool\n+bool\n try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n {\n   basic_block src = e->src;\n@@ -703,7 +703,7 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n \n   if (tmp || !onlyjump_p (insn))\n     return false;\n-  if ((!optimize || flow2_completed) && tablejump_p (insn, NULL, NULL))\n+  if ((!optimize || reload_completed) && tablejump_p (insn, NULL, NULL))\n     return false;\n \n   /* Avoid removing branch with side effects.  */\n@@ -793,7 +793,7 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n       /* Recognize a tablejump that we are converting to a\n \t simple jump and remove its associated CODE_LABEL\n \t and ADDR_VEC or ADDR_DIFF_VEC.  */\n-      if (! reload_completed && tablejump_p (insn, &label, &table))\n+      if (tablejump_p (insn, &label, &table))\n \tdelete_insn_chain (label, table);\n \n       barrier = next_nonnote_insn (BB_END (src));\n@@ -971,15 +971,13 @@ rtl_redirect_edge_and_branch (edge e, basic_block target)\n   if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n     return false;\n \n+  if (e->dest == target)\n+    return true;\n+\n   if (try_redirect_by_replacing_jump (e, target, false))\n     return true;\n \n-  /* Do this fast path late, as we want above code to simplify for cases\n-     where called on single edge leaving basic block containing nontrivial\n-     jump insn.  */\n-  else if (e->dest == target)\n-    return false;\n-  else if (!redirect_branch_edge (e, target))\n+  if (!redirect_branch_edge (e, target))\n     return false;\n \n   return true;\n@@ -2437,11 +2435,11 @@ cfg_layout_redirect_edge_and_branch (edge e, basic_block dest)\n   if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n     return false;\n \n-  if (e->src != ENTRY_BLOCK_PTR\n-      && try_redirect_by_replacing_jump (e, dest, true))\n+  if (e->dest == dest)\n     return true;\n \n-  if (e->dest == dest)\n+  if (e->src != ENTRY_BLOCK_PTR\n+      && try_redirect_by_replacing_jump (e, dest, true))\n     return true;\n \n   if (e->src == ENTRY_BLOCK_PTR\n@@ -2627,7 +2625,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n   /* We should have fallthru edge in a, or we can do dummy redirection to get\n      it cleaned up.  */\n   if (GET_CODE (BB_END (a)) == JUMP_INSN)\n-    redirect_edge_and_branch (a->succ, b);\n+    try_redirect_by_replacing_jump (a->succ, b, true);\n   if (GET_CODE (BB_END (a)) == JUMP_INSN)\n     abort ();\n "}]}