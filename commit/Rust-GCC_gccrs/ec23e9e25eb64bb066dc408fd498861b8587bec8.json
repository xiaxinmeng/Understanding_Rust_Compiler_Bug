{"sha": "ec23e9e25eb64bb066dc408fd498861b8587bec8", "node_id": "C_kwDOANBUbNoAKGVjMjNlOWUyNWViNjRiYjA2NmRjNDA4ZmQ0OTg4NjFiODU4N2JlYzg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-09T10:03:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-15T07:28:08Z"}, "message": "target/108738 - STV bitmap operations compile-time hog\n\nWhen the set of candidates becomes very large then repeated\nbit checks on it during the build of an actual chain can become\nslow because of the O(n) nature of bitmap tests.  The following\nswitches the candidates bitmaps to the tree representation before\nbuilding the chains to get O(log n) amortized behavior.\n\nFor the testcase at hand this improves STV time by 50%.\n\n\tPR target/108738\n\t* config/i386/i386-features.cc (convert_scalars_to_vector):\n\tSwitch candidates bitmaps to tree view before building the chains.", "tree": {"sha": "355e43af0d628458d36c962120fd36d743f91f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/355e43af0d628458d36c962120fd36d743f91f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec23e9e25eb64bb066dc408fd498861b8587bec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23e9e25eb64bb066dc408fd498861b8587bec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23e9e25eb64bb066dc408fd498861b8587bec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23e9e25eb64bb066dc408fd498861b8587bec8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05467d08e777b72f57c50f7ef0430f8cf0edd8e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05467d08e777b72f57c50f7ef0430f8cf0edd8e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05467d08e777b72f57c50f7ef0430f8cf0edd8e1"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "9bd6d8677bb9296145c216ad14c839aa5ebf2ae3", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23e9e25eb64bb066dc408fd498861b8587bec8/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23e9e25eb64bb066dc408fd498861b8587bec8/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=ec23e9e25eb64bb066dc408fd498861b8587bec8", "patch": "@@ -2283,30 +2283,33 @@ convert_scalars_to_vector (bool timode_p)\n       fprintf (dump_file, \"There are no candidates for optimization.\\n\");\n \n   for (unsigned i = 0; i <= 2; ++i)\n-    while (!bitmap_empty_p (&candidates[i]))\n-      {\n-\tunsigned uid = bitmap_first_set_bit (&candidates[i]);\n-\tscalar_chain *chain;\n-\n-\tif (cand_mode[i] == TImode)\n-\t  chain = new timode_scalar_chain;\n-\telse\n-\t  chain = new general_scalar_chain (cand_mode[i], cand_vmode[i]);\n-\n-\t/* Find instructions chain we want to convert to vector mode.\n-\t   Check all uses and definitions to estimate all required\n-\t   conversions.  */\n-\tchain->build (&candidates[i], uid);\n-\n-\tif (chain->compute_convert_gain () > 0)\n-\t  converted_insns += chain->convert ();\n-\telse\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"Chain #%d conversion is not profitable\\n\",\n-\t\t     chain->chain_id);\n+    {\n+      bitmap_tree_view (&candidates[i]);\n+      while (!bitmap_empty_p (&candidates[i]))\n+\t{\n+\t  unsigned uid = bitmap_first_set_bit (&candidates[i]);\n+\t  scalar_chain *chain;\n \n-\tdelete chain;\n-      }\n+\t  if (cand_mode[i] == TImode)\n+\t    chain = new timode_scalar_chain;\n+\t  else\n+\t    chain = new general_scalar_chain (cand_mode[i], cand_vmode[i]);\n+\n+\t  /* Find instructions chain we want to convert to vector mode.\n+\t     Check all uses and definitions to estimate all required\n+\t     conversions.  */\n+\t  chain->build (&candidates[i], uid);\n+\n+\t  if (chain->compute_convert_gain () > 0)\n+\t    converted_insns += chain->convert ();\n+\t  else\n+\t    if (dump_file)\n+\t      fprintf (dump_file, \"Chain #%d conversion is not profitable\\n\",\n+\t\t       chain->chain_id);\n+\n+\t  delete chain;\n+\t}\n+    }\n \n   if (dump_file)\n     fprintf (dump_file, \"Total insns converted: %d\\n\", converted_insns);"}]}