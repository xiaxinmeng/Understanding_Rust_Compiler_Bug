{"sha": "c7c24828cfa4983ebc6744be3f913d0da6ff7163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdjMjQ4MjhjZmE0OTgzZWJjNjc0NGJlM2Y5MTNkMGRhNmZmNzE2Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-21T16:29:53Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-22T07:57:15Z"}, "message": "OpenMP: Fixes for omp critical + hint\n\ngcc/c-family/ChangeLog:\n\n\t* c-omp.c (c_finish_omp_critical): Check for no name but\n\tnonzero hint provided.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (c_parser_omp_clause_hint): Require nonnegative hint clause.\n\t(c_parser_omp_critical): Permit hint(0) clause without named critical.\n\t(c_parser_omp_construct): Don't assert if error_mark_node is returned.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_omp_clause_hint): Require nonnegative hint.\n\t(cp_parser_omp_critical): Permit hint(0) clause without named critical.\n\t* pt.c (tsubst_expr): Re-check the latter for templates.\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.c (gfc_match_omp_critical): Fix handling hints; permit\n\thint clause without named critical.\n\t(resolve_omp_clauses): Require nonnegative constant integer\n\tfor the hint clause.\n\t(gfc_resolve_omp_directive): Check for no name but\n\tnonzero value for hint clause.\n\t* parse.c (parse_omp_structured_block): Fix same-name check\n\tfor critical.\n\t* trans-openmp.c (gfc_trans_omp_critical): Handle hint clause properly.\n\nlibgomp/ChangeLog:\n\n\t* omp_lib.f90.in: Add omp_sync_hint_* and omp_sync_hint_kind.\n\t* omp_lib.h.in: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/gomp/critical-3.C: Add nameless critical with hint testcase.\n\t* c-c++-common/gomp/critical-hint-1.c: New test.\n\t* c-c++-common/gomp/critical-hint-2.c: New test.\n\t* gfortran.dg/gomp/critical-hint-1.f90: New test.\n\t* gfortran.dg/gomp/critical-hint-2.f90: New test.", "tree": {"sha": "a8de602e795da9f5bac1ff2dcc94a1a4fd016876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8de602e795da9f5bac1ff2dcc94a1a4fd016876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7c24828cfa4983ebc6744be3f913d0da6ff7163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c24828cfa4983ebc6744be3f913d0da6ff7163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c24828cfa4983ebc6744be3f913d0da6ff7163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c24828cfa4983ebc6744be3f913d0da6ff7163/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1de6a8543f4d7a63149bf99b54037315b8c3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1de6a8543f4d7a63149bf99b54037315b8c3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1de6a8543f4d7a63149bf99b54037315b8c3bb"}], "stats": {"total": 436, "additions": 385, "deletions": 51}, "files": [{"sha": "d7cff0f4cca71aea65c23fa37e3b55cbd82bc670", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -106,6 +106,17 @@ c_finish_omp_taskgroup (location_t loc, tree body, tree clauses)\n tree\n c_finish_omp_critical (location_t loc, tree body, tree name, tree clauses)\n {\n+  gcc_assert (!clauses || OMP_CLAUSE_CODE (clauses) == OMP_CLAUSE_HINT);\n+  if (name == NULL_TREE\n+      && clauses != NULL_TREE\n+      && integer_nonzerop (OMP_CLAUSE_HINT_EXPR (clauses)))\n+    {\n+      error_at (OMP_CLAUSE_LOCATION (clauses),\n+\t\t\"%<#pragma omp critical%> with %<hint%> clause requires \"\n+\t\t\"a name, except when %<omp_sync_hint_none%> is used\");\n+      return error_mark_node;\n+    }\n+\n   tree stmt = make_node (OMP_CRITICAL);\n   TREE_TYPE (stmt) = void_type_node;\n   OMP_CRITICAL_BODY (stmt) = body;"}, {"sha": "7961cbc98bb4f2877218beb2e972b274b53c41b9", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -13901,16 +13901,15 @@ c_parser_omp_clause_hint (c_parser *parser, tree list)\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n-\n-      parens.skip_until_found_close (parser);\n-\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t  || TREE_CODE (t) != INTEGER_CST)\n+\t  || TREE_CODE (t) != INTEGER_CST\n+\t  || tree_int_cst_sgn (t) == -1)\n \t{\n-\t  c_parser_error (parser, \"expected constant integer expression\");\n+\t  c_parser_error (parser, \"expected constant integer expression \"\n+\t\t\t\t  \"with valid sync-hint value\");\n \t  return list;\n \t}\n-\n+      parens.skip_until_found_close (parser);\n       check_no_duplicate_clause (list, OMP_CLAUSE_HINT, \"hint\");\n \n       c = build_omp_clause (hint_loc, OMP_CLAUSE_HINT);\n@@ -17795,18 +17794,9 @@ c_parser_omp_critical (location_t loc, c_parser *parser, bool *if_p)\n       if (c_parser_next_token_is (parser, CPP_COMMA)\n \t  && c_parser_peek_2nd_token (parser)->type == CPP_NAME)\n \tc_parser_consume_token (parser);\n-\n-      clauses = c_parser_omp_all_clauses (parser,\n-\t\t\t\t\t  OMP_CRITICAL_CLAUSE_MASK,\n-\t\t\t\t\t  \"#pragma omp critical\");\n     }\n-  else\n-    {\n-      if (c_parser_next_token_is_not (parser, CPP_PRAGMA_EOL))\n-\tc_parser_error (parser, \"expected %<(%> or end of line\");\n-      c_parser_skip_to_pragma_eol (parser);\n-    }\n-\n+  clauses = c_parser_omp_all_clauses (parser, OMP_CRITICAL_CLAUSE_MASK,\n+\t\t\t\t      \"#pragma omp critical\");\n   stmt = c_parser_omp_structured_block (parser, if_p);\n   return c_finish_omp_critical (loc, stmt, name, clauses);\n }\n@@ -21537,7 +21527,7 @@ c_parser_omp_construct (c_parser *parser, bool *if_p)\n       gcc_unreachable ();\n     }\n \n-  if (stmt)\n+  if (stmt && stmt != error_mark_node)\n     gcc_assert (EXPR_LOCATION (stmt) != UNKNOWN_LOCATION);\n }\n "}, {"sha": "0c77c20da8623f7211bb417d0076a927ba38858e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -35383,12 +35383,21 @@ cp_parser_omp_clause_hint (cp_parser *parser, tree list, location_t location)\n \n   t = cp_parser_assignment_expression (parser);\n \n+  if (t != error_mark_node)\n+    {\n+      t = fold_non_dependent_expr (t);\n+      if (!value_dependent_expression_p (t)\n+\t  && (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n+\t      || !tree_fits_shwi_p (t)\n+\t      || tree_int_cst_sgn (t) == -1))\n+\terror_at (location, \"expected constant integer expression with \"\n+\t\t\t    \"valid sync-hint value\");\n+    }\n   if (t == error_mark_node\n       || !parens.require_close (parser))\n     cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n \t\t\t\t\t   /*or_comma=*/false,\n \t\t\t\t\t   /*consume_paren=*/true);\n-\n   check_no_duplicate_clause (list, OMP_CLAUSE_HINT, \"hint\", location);\n \n   c = build_omp_clause (location, OMP_CLAUSE_HINT);\n@@ -38210,13 +38219,10 @@ cp_parser_omp_critical (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n       if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA)\n \t  && cp_lexer_nth_token_is (parser->lexer, 2, CPP_NAME))\n \tcp_lexer_consume_token (parser->lexer);\n-\n-      clauses = cp_parser_omp_all_clauses (parser,\n-\t\t\t\t\t   OMP_CRITICAL_CLAUSE_MASK,\n-\t\t\t\t\t   \"#pragma omp critical\", pragma_tok);\n     }\n-  else\n-    cp_parser_require_pragma_eol (parser, pragma_tok);\n+\n+  clauses = cp_parser_omp_all_clauses (parser, OMP_CRITICAL_CLAUSE_MASK,\n+\t\t\t\t       \"#pragma omp critical\", pragma_tok);\n \n   stmt = cp_parser_omp_structured_block (parser, if_p);\n   return c_finish_omp_critical (input_location, stmt, name, clauses);"}, {"sha": "d9db44f919d7719e211bee8ac6ae8cc6dd4eb968", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -18531,6 +18531,15 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t  stmt = pop_stmt_list (stmt);\n \t}\n \n+      if (TREE_CODE (t) == OMP_CRITICAL\n+\t  && tmp != NULL_TREE\n+\t  && integer_nonzerop (OMP_CLAUSE_HINT_EXPR (tmp)))\n+\t{\n+\t  error_at (OMP_CLAUSE_LOCATION (tmp),\n+\t\t    \"%<#pragma omp critical%> with %<hint%> clause requires \"\n+\t\t    \"a name, except when %<omp_sync_hint_none%> is used\");\n+\t  RETURN (error_mark_node);\n+\t}\n       t = copy_node (t);\n       OMP_BODY (t) = stmt;\n       OMP_CLAUSES (t) = tmp;"}, {"sha": "58552af0982e30d507fb5d0a2dc4e41cd1b09b0d", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -2631,15 +2631,10 @@ gfc_match_omp_critical (void)\n   gfc_omp_clauses *c = NULL;\n \n   if (gfc_match (\" ( %n )\", n) != MATCH_YES)\n-    {\n-      n[0] = '\\0';\n-      if (gfc_match_omp_eos () != MATCH_YES)\n-\t{\n-\t  gfc_error (\"Unexpected junk after $OMP CRITICAL statement at %C\");\n-\t  return MATCH_ERROR;\n-\t}\n-    }\n-  else if (gfc_match_omp_clauses (&c, omp_mask (OMP_CLAUSE_HINT)) != MATCH_YES)\n+    n[0] = '\\0';\n+\n+  if (gfc_match_omp_clauses (&c, omp_mask (OMP_CLAUSE_HINT),\n+\t\t\t     /* first = */ n[0] == '\\0') != MATCH_YES)\n     return MATCH_ERROR;\n \n   new_st.op = EXEC_OMP_CRITICAL;\n@@ -5000,7 +4995,14 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   if (omp_clauses->device)\n     resolve_nonnegative_int_expr (omp_clauses->device, \"DEVICE\");\n   if (omp_clauses->hint)\n-    resolve_scalar_int_expr (omp_clauses->hint, \"HINT\");\n+    {\n+      resolve_scalar_int_expr (omp_clauses->hint, \"HINT\");\n+    if (omp_clauses->hint->ts.type != BT_INTEGER\n+\t|| omp_clauses->hint->expr_type != EXPR_CONSTANT\n+\t|| mpz_sgn (omp_clauses->hint->value.integer) < 0)\n+      gfc_error (\"Value of HINT clause at %L shall be a valid \"\n+\t\t \"constant hint expression\", &omp_clauses->hint->where);\n+    }\n   if (omp_clauses->priority)\n     resolve_nonnegative_int_expr (omp_clauses->priority, \"PRIORITY\");\n   if (omp_clauses->dist_chunk_size)\n@@ -6515,6 +6517,17 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n     case EXEC_OMP_ATOMIC:\n       resolve_omp_atomic (code);\n       break;\n+    case EXEC_OMP_CRITICAL:\n+      if (code->ext.omp_clauses)\n+\tresolve_omp_clauses (code, code->ext.omp_clauses, NULL);\n+      if (!code->ext.omp_clauses->critical_name\n+\t  && code->ext.omp_clauses->hint\n+\t  && code->ext.omp_clauses->hint->ts.type == BT_INTEGER\n+\t  && code->ext.omp_clauses->hint->expr_type == EXPR_CONSTANT\n+\t  && mpz_sgn (code->ext.omp_clauses->hint->value.integer) != 0)\n+\tgfc_error (\"OMP CRITICAL at %L with HINT clause requires a NAME, \"\n+\t\t   \"except when omp_sync_hint_none is used\", &code->loc);\n+      break;\n     default:\n       break;\n     }"}, {"sha": "96fd4aaee5ede6a5790dc63f3957f45093ad2cd3", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -5384,7 +5384,8 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n       cp->ext.omp_clauses->nowait |= new_st.ext.omp_bool;\n       break;\n     case EXEC_OMP_END_CRITICAL:\n-      if (((cp->ext.omp_clauses == NULL) ^ (new_st.ext.omp_name == NULL))\n+      if (((cp->ext.omp_clauses->critical_name == NULL)\n+\t    ^ (new_st.ext.omp_name == NULL))\n \t  || (new_st.ext.omp_name != NULL\n \t      && strcmp (cp->ext.omp_clauses->critical_name,\n \t\t\t new_st.ext.omp_name) != 0))"}, {"sha": "a63000be314680485c1a406839ce846fb8126d0d", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -4242,12 +4242,20 @@ gfc_trans_omp_cancellation_point (gfc_code *code)\n static tree\n gfc_trans_omp_critical (gfc_code *code)\n {\n-  tree name = NULL_TREE, stmt;\n-  if (code->ext.omp_clauses != NULL)\n+  stmtblock_t block;\n+  tree stmt, name = NULL_TREE;\n+  if (code->ext.omp_clauses->critical_name != NULL)\n     name = get_identifier (code->ext.omp_clauses->critical_name);\n-  stmt = gfc_trans_code (code->block->next);\n-  return build3_loc (input_location, OMP_CRITICAL, void_type_node, stmt,\n-\t\t     NULL_TREE, name);\n+  gfc_start_block (&block);\n+  stmt = make_node (OMP_CRITICAL);\n+  TREE_TYPE (stmt) = void_type_node;\n+  OMP_CRITICAL_BODY (stmt) = gfc_trans_code (code->block->next);\n+  OMP_CRITICAL_NAME (stmt) = name;\n+  OMP_CRITICAL_CLAUSES (stmt) = gfc_trans_omp_clauses (&block,\n+\t\t\t\t\t\t       code->ext.omp_clauses,\n+\t\t\t\t\t\t       code->loc);\n+  gfc_add_expr_to_block (&block, stmt);\n+  return gfc_finish_block (&block);\n }\n \n typedef struct dovar_init_d {"}, {"sha": "510f8abef80db96864f6e59fa9646648c9af283f", "filename": "gcc/testsuite/c-c++-common/gomp/critical-hint-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcritical-hint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcritical-hint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcritical-hint-1.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -0,0 +1,47 @@\n+#include <omp.h>\n+\n+void\n+example_criticial ()\n+{\n+  int a, b;\n+  #pragma omp parallel for\n+  for (int i = 0; i < 10; ++i)\n+    {\n+      #pragma omp critical hint(omp_sync_hint_none)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH) hint(omp_sync_hint_none)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH2) hint(omp_sync_hint_uncontended)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH3) hint(omp_sync_hint_contended)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH4) hint(omp_sync_hint_speculative)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH5) hint(omp_sync_hint_nonspeculative)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH6) hint(omp_sync_hint_contended + omp_sync_hint_speculative)  /* OK */\n+      a += i;\n+      #pragma omp critical (HASH6) hint(omp_sync_hint_contended | omp_sync_hint_speculative)  /* OK */\n+      a += i;\n+\n+      /* Accepted but invalid: different hint for same name. */\n+      #pragma omp critical (HASH6) hint(omp_sync_hint_uncontended + omp_sync_hint_speculative)  \n+      a += i;\n+      /* Accepted but invalid: Some random integer expr. */\n+      #pragma omp critical (HASH) hint(omp_sync_hint_speculative + 1 + 2)\n+      a += i;\n+\n+      #pragma omp critical (HASH) hint(-3)  /* { dg-error \"expected constant integer expression\" } */\n+      a += i;\n+      #pragma omp critical (HASH2) hint(b)  /* { dg-error \"constant integer expression\" } */\n+      a += i;\n+/*\n+  Fails with gcc as 'expected identifier' and\n+        with g++ as \"clause requires a name, except when 'omp_sync_hint_none'\"\n+      #pragma omp critical () hint(omp_sync_hint_speculative)\n+      a += i;\n+*/\n+      #pragma omp critical hint(omp_sync_hint_speculative)  /* { dg-error \"with 'hint' clause requires a name, except when 'omp_sync_hint_none' is used\" } */\n+      a += i;\n+    }\n+}"}, {"sha": "effe24a63eceb37175634fdbcec00f54c0bf9d01", "filename": "gcc/testsuite/c-c++-common/gomp/critical-hint-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcritical-hint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcritical-hint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcritical-hint-2.c?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-additional-options \"-fdump-tree-original\" } */\n+#include <omp.h>\n+\n+void\n+example_criticial ()\n+{\n+  int a, b;\n+  #pragma omp parallel for\n+  for (int i = 0; i < 10; ++i)\n+    {\n+      #pragma omp critical hint(omp_sync_hint_none)\n+      a += i;\n+      #pragma omp critical (HASH1) hint(omp_sync_hint_none)\n+      a += i;\n+      #pragma omp critical (HASH2) hint(omp_sync_hint_uncontended)\n+      a += i;\n+      #pragma omp critical (HASH3) hint(omp_sync_hint_contended)\n+      a += i;\n+      #pragma omp critical (HASH4) hint(omp_sync_hint_speculative)\n+      a += i;\n+      #pragma omp critical (HASH5) hint(omp_sync_hint_nonspeculative)\n+      a += i;\n+      #pragma omp critical (HASH6) hint(omp_sync_hint_contended + omp_sync_hint_speculative)\n+      a += i;\n+      #pragma omp critical (HASH7) hint(omp_sync_hint_contended | omp_sync_hint_speculative)\n+      a += i;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH1\\\\) hint\\\\(0\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH2\\\\) hint\\\\(1\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH3\\\\) hint\\\\(2\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH4\\\\) hint\\\\(8\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH5\\\\) hint\\\\(4\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH6\\\\) hint\\\\(10\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp critical \\\\(HASH7\\\\) hint\\\\(10\\\\)\" 1 \"original\" } } */"}, {"sha": "788582f367ee5b172a84d9186a67ab7bf56d379f", "filename": "gcc/testsuite/g++.dg/gomp/critical-3.C", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcritical-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcritical-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fcritical-3.C?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -2,12 +2,36 @@ int i;\n \n template <int N>\n void\n-foo (void)\n+foo0 (void)\n+{\n+  #pragma omp critical (foo), hint (N + 1)  // { dg-error \"critical' with 'hint' clause requires a name, except when 'omp_sync_hint_none' is used\" }\n+  i++;\n+}\n+\n+template <int N>\n+void\n+foo_1 (void)\n {\n   #pragma omp critical (foo), hint (N + 1)\n   i++;\n }\n \n+template <int N>\n+void\n+foobar0 (void)\n+{\n+  #pragma omp critical hint (N + 0)\n+  i++;\n+}\n+\n+template <int N>\n+void\n+foobar1 (void)\n+{\n+  #pragma omp critical hint (N + 0)  // { dg-error \"critical' with 'hint' clause requires a name, except when 'omp_sync_hint_none' is used\" }\n+  i++;\n+}\n+\n template <int N>\n void\n bar (void)\n@@ -27,7 +51,10 @@ baz (T x)\n void\n test ()\n {\n-  foo <0> ();\n+  foo0 <0> ();    // Error\n+  foo_1 <-1> ();  // OK\n+  foobar0 <0> (); // OK\n+  foobar1 <1> (); // Error\n   bar <0> ();\n   baz (0.0);\n }"}, {"sha": "c26b617f1bd3538a762a4c97d055eea3aa772efd", "filename": "gcc/testsuite/gfortran.dg/gomp/critical-hint-1.f90", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcritical-hint-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcritical-hint-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcritical-hint-1.f90?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -0,0 +1,94 @@\n+subroutine example_criticial ()\n+  use omp_lib\n+  implicit none\n+  integer, parameter :: my_omp_hint = omp_sync_hint_contended\n+  integer i, a, b\n+\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH0) hint(my_omp_hint)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH0)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH1) hint(omp_sync_hint_none)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH1)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH2) hint(omp_sync_hint_uncontended)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH2)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH3) hint(omp_sync_hint_contended)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH3)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH4) hint(omp_sync_hint_speculative)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH4)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH5) hint(omp_sync_hint_nonspeculative)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH5)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH6) hint(omp_sync_hint_contended + omp_sync_hint_speculative)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH6)\n+  end do\n+\n+  !$omp parallel do\n+  do i = 1, 10\n+      ! Accepted but invalid: different hint for same name.\n+      !$omp critical (HASH6) hint(omp_sync_hint_contended + omp_sync_hint_speculative)  ! OK\n+      a = a + i;\n+      !$omp end critical (HASH6)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      ! Accepted but invalid: Some random integer expr.\n+      !$omp critical (HASH) hint(1 + 2)\n+      a = a + i;\n+      !$omp end critical (HASH)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH) hint(-3)  ! { dg-error \"shall be a valid constant hint expression\" }\n+      a = a + i;\n+      !$omp end critical (HASH)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH2) hint(b)  ! { dg-error \"shall be a valid constant hint expression\" }\n+      a = a + i;\n+      !$omp end critical (HASH2)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical () hint(omp_hint_speculative)  ! { dg-error \"Invalid character in name\" }\n+      a = a + i;\n+!      !$omp end critical\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical hint(omp_sync_hint_none)  ! OK\n+      a = a + i;\n+      !$omp end critical\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical hint(omp_sync_hint_contended)  ! { dg-error \"CRITICAL at .1. with HINT clause requires a NAME, except when omp_sync_hint_none is used\" }\n+      a = a + i;\n+      !$omp end critical\n+  end do\n+end"}, {"sha": "15d6206a438d077b22aaccc896487b9e944d77fd", "filename": "gcc/testsuite/gfortran.dg/gomp/critical-hint-2.f90", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcritical-hint-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcritical-hint-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcritical-hint-2.f90?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -0,0 +1,65 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+subroutine example_criticial ()\n+  use omp_lib\n+  implicit none\n+  integer, parameter :: my_omp_hint = omp_sync_hint_contended\n+  integer i, a, b\n+\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH0) hint(my_omp_hint)\n+      a = a + i;\n+      !$omp end critical (HASH0)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH1), hint(omp_sync_hint_none)\n+      a = a + i;\n+      !$omp end critical (HASH1)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH2) hint(omp_sync_hint_uncontended)\n+      a = a + i;\n+      !$omp end critical (HASH2)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH3) hint(omp_sync_hint_contended)\n+      a = a + i;\n+      !$omp end critical (HASH3)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH4) hint(omp_sync_hint_speculative)\n+      a = a + i;\n+      !$omp end critical (HASH4)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH5) hint(omp_sync_hint_nonspeculative)\n+      a = a + i;\n+      !$omp end critical (HASH5)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical (HASH6), hint(omp_sync_hint_contended + omp_sync_hint_speculative)\n+      a = a + i;\n+      !$omp end critical (HASH6)\n+  end do\n+  !$omp parallel do\n+  do i = 1, 10\n+      !$omp critical hint(omp_sync_hint_none + omp_sync_hint_none)\n+      a = a + i;\n+      !$omp end critical\n+  end do\n+end\n+\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash0\\\\) hint\\\\(2\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash1\\\\) hint\\\\(0\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash2\\\\) hint\\\\(1\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash3\\\\) hint\\\\(2\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash4\\\\) hint\\\\(8\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash5\\\\) hint\\\\(4\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical \\\\(hash6\\\\) hint\\\\(10\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"omp critical hint\\\\(0\\\\)\" 1 \"original\" } }"}, {"sha": "b22bcbaf77013559cfe1b99fc6901d75da3ded44", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -31,7 +31,8 @@\n         integer, parameter :: omp_nest_lock_kind = @OMP_NEST_LOCK_KIND@\n         integer, parameter :: omp_sched_kind = 4\n         integer, parameter :: omp_proc_bind_kind = 4\n-        integer, parameter :: omp_lock_hint_kind = 4\n+        integer, parameter :: omp_sync_hint_kind = 4\n+        integer, parameter :: omp_lock_hint_kind = omp_sync_hint_kind\n         integer, parameter :: omp_pause_resource_kind = 4\n         integer, parameter :: omp_allocator_handle_kind = c_intptr_t\n         integer, parameter :: omp_alloctrait_key_kind = c_int\n@@ -52,15 +53,29 @@\n         integer (omp_proc_bind_kind), &\n                  parameter :: omp_proc_bind_spread = 4\n         integer (omp_lock_hint_kind), &\n-                 parameter :: omp_lock_hint_none = 0\n+                 parameter :: omp_sync_hint_none = 0\n         integer (omp_lock_hint_kind), &\n-                 parameter :: omp_lock_hint_uncontended = 1\n+                 parameter :: omp_lock_hint_none = omp_sync_hint_none\n         integer (omp_lock_hint_kind), &\n-                 parameter :: omp_lock_hint_contended = 2\n+                 parameter :: omp_sync_hint_uncontended = 1\n         integer (omp_lock_hint_kind), &\n-                 parameter :: omp_lock_hint_nonspeculative = 4\n+                 parameter :: omp_lock_hint_uncontended &\n+                 = omp_sync_hint_uncontended\n         integer (omp_lock_hint_kind), &\n-                 parameter :: omp_lock_hint_speculative = 8\n+                 parameter :: omp_sync_hint_contended = 2\n+        integer (omp_lock_hint_kind), &\n+                 parameter :: omp_lock_hint_contended &\n+                 = omp_sync_hint_contended\n+        integer (omp_lock_hint_kind), &\n+                 parameter :: omp_sync_hint_nonspeculative = 4\n+        integer (omp_lock_hint_kind), &\n+                 parameter :: omp_lock_hint_nonspeculative &\n+                 = omp_sync_hint_nonspeculative\n+        integer (omp_lock_hint_kind), &\n+                 parameter :: omp_sync_hint_speculative = 8\n+        integer (omp_lock_hint_kind), &\n+                 parameter :: omp_lock_hint_speculative &\n+                 = omp_sync_hint_speculative\n         integer (kind=omp_pause_resource_kind), &\n                  parameter :: omp_pause_soft = 1\n         integer (kind=omp_pause_resource_kind), &"}, {"sha": "c7d444d4a97f73d79241ccf514ed55b6cabcfcae", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c24828cfa4983ebc6744be3f913d0da6ff7163/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c24828cfa4983ebc6744be3f913d0da6ff7163/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=c7c24828cfa4983ebc6744be3f913d0da6ff7163", "patch": "@@ -46,17 +46,29 @@\n       parameter (omp_proc_bind_master = 2)\n       parameter (omp_proc_bind_close = 3)\n       parameter (omp_proc_bind_spread = 4)\n+      integer omp_sync_hint_kind\n       integer omp_lock_hint_kind\n-      parameter (omp_lock_hint_kind = 4)\n+      parameter (omp_sync_hint_kind = 4)\n+      parameter (omp_lock_hint_kind = omp_sync_hint_kind)\n+      integer (omp_sync_hint_kind) omp_sync_hint_none\n       integer (omp_lock_hint_kind) omp_lock_hint_none\n+      integer (omp_sync_hint_kind) omp_sync_hint_uncontended\n       integer (omp_lock_hint_kind) omp_lock_hint_uncontended\n-      integer (omp_lock_hint_kind) omp_lock_hint_contended\n+      integer (omp_sync_hint_kind) omp_sync_hint_contended\n+      integer (omp_sync_hint_kind) omp_lock_hint_contended\n+      integer (omp_lock_hint_kind) omp_sync_hint_nonspeculative\n       integer (omp_lock_hint_kind) omp_lock_hint_nonspeculative\n+      integer (omp_sync_hint_kind) omp_sync_hint_speculative\n       integer (omp_lock_hint_kind) omp_lock_hint_speculative\n+      parameter (omp_sync_hint_none = 0)\n       parameter (omp_lock_hint_none = 0)\n+      parameter (omp_sync_hint_uncontended = 1)\n       parameter (omp_lock_hint_uncontended = 1)\n+      parameter (omp_sync_hint_contended = 2)\n       parameter (omp_lock_hint_contended = 2)\n+      parameter (omp_sync_hint_nonspeculative = 4)\n       parameter (omp_lock_hint_nonspeculative = 4)\n+      parameter (omp_sync_hint_speculative = 8)\n       parameter (omp_lock_hint_speculative = 8)\n       parameter (openmp_version = 201511)\n       integer omp_pause_resource_kind"}]}