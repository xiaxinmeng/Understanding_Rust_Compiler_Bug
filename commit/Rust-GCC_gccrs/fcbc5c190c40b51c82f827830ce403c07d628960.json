{"sha": "fcbc5c190c40b51c82f827830ce403c07d628960", "node_id": "C_kwDOANBUbNoAKGZjYmM1YzE5MGM0MGI1MWM4MmY4Mjc4MzBjZTQwM2MwN2Q2Mjg5NjA", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-03-10T00:53:39Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-03-10T17:51:54Z"}, "message": "Fix PR 108874: aarch64 code regression with shift and ands\n\nAfter r6-2044-g98e30e515f184b, code like \"((x & 0xff00ff00U) >> 8)\"\nwould be optimized like (x >> 8) & 0xff00ffU which is normally better\nexcept on aarch64, the shift right could be combined with another\noperation in some cases. So we need to add a few define_splits\nto the aarch64 backends that match \"((x >> shift) & CST0) OP Y\"\nand splits it to:\nTMP = X & CST1\n(TMP >> shift) OP Y\n\nNote this also gets us to matching rev16 back too so I added a\ntestcase to make sure we don't lose that matching any more.\nNote when the generic patch to recognize those as bswap ROT 16,\nwe might regress again and need to add a few more patterns to\nthe aarch64 backend but will deal with that once that happens.\n\nCommitted as approved after a bootstrapp/test on aarch64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md: Add a new define_split\n\tto help combine.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/rev16_2.c: New test.\n\t* gcc.target/aarch64/shift_and_operator-1.c: New test.", "tree": {"sha": "89071f26d2ff6e06cbca307e38ad9ad383c26088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89071f26d2ff6e06cbca307e38ad9ad383c26088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcbc5c190c40b51c82f827830ce403c07d628960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcbc5c190c40b51c82f827830ce403c07d628960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcbc5c190c40b51c82f827830ce403c07d628960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcbc5c190c40b51c82f827830ce403c07d628960/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8332e52a498df480f72303de32ad0751ad899fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8332e52a498df480f72303de32ad0751ad899fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8332e52a498df480f72303de32ad0751ad899fe"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "022eef80bc1e93299f329610dcd2321917d5770a", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcbc5c190c40b51c82f827830ce403c07d628960/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcbc5c190c40b51c82f827830ce403c07d628960/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fcbc5c190c40b51c82f827830ce403c07d628960", "patch": "@@ -4656,6 +4656,29 @@\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n+(define_split\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(LOGICAL_OR_PLUS:GPI\n+\t  (and:GPI\n+\t    (lshiftrt:GPI (match_operand:GPI 1 \"register_operand\")\n+\t\t\t  (match_operand:QI 2 \"aarch64_shift_imm_<mode>\"))\n+\t    (match_operand:GPI 3 \"aarch64_logical_immediate\"))\n+\t  (match_operand:GPI 4 \"register_operand\")))]\n+  \"can_create_pseudo_p ()\n+   && aarch64_bitmask_imm (UINTVAL (operands[3]) << UINTVAL (operands[2]),\n+\t\t\t   <MODE>mode)\"\n+  [(set (match_dup 5) (and:GPI (match_dup 1) (match_dup 6)))\n+   (set (match_dup 0) (LOGICAL_OR_PLUS:GPI\n+\t\t       (lshiftrt:GPI (match_dup 5) (match_dup 2))\n+                       (match_dup 4)))]\n+  {\n+    operands[5] = gen_reg_rtx (<MODE>mode);\n+    operands[6]\n+      = gen_int_mode (UINTVAL (operands[3]) << UINTVAL (operands[2]),\n+\t\t      <MODE>mode);\n+  }\n+)\n+\n (define_split\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(LOGICAL_OR_PLUS:GPI"}, {"sha": "621eb5dfbf047aa52fbef5ed60b0b3e49da3cda5", "filename": "gcc/testsuite/gcc.target/aarch64/rev16_2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcbc5c190c40b51c82f827830ce403c07d628960/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Frev16_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcbc5c190c40b51c82f827830ce403c07d628960/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Frev16_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Frev16_2.c?ref=fcbc5c190c40b51c82f827830ce403c07d628960", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-do compile } */\n+\n+extern void abort (void);\n+\n+typedef unsigned int __u32;\n+\n+__u32\n+__rev16_32_alt (__u32 x)\n+{\n+  return (((__u32)(x) & (__u32)0xff00ff00UL) >> 8)\n+         | (((__u32)(x) & (__u32)0x00ff00ffUL) << 8);\n+}\n+\n+__u32\n+__rev16_32 (__u32 x)\n+{\n+  return (((__u32)(x) & (__u32)0x00ff00ffUL) << 8)\n+         | (((__u32)(x) & (__u32)0xff00ff00UL) >> 8);\n+}\n+\n+typedef unsigned long long __u64;\n+\n+__u64\n+__rev16_64_alt (__u64 x)\n+{\n+  return (((__u64)(x) & (__u64)0xff00ff00ff00ff00UL) >> 8)\n+         | (((__u64)(x) & (__u64)0x00ff00ff00ff00ffUL) << 8);\n+}\n+\n+__u64\n+__rev16_64 (__u64 x)\n+{\n+  return (((__u64)(x) & (__u64)0x00ff00ff00ff00ffUL) << 8)\n+         | (((__u64)(x) & (__u64)0xff00ff00ff00ff00UL) >> 8);\n+}\n+\n+/* { dg-final { scan-assembler-times \"rev16\\\\tx\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"rev16\\\\tw\\[0-9\\]+\" 2 } } */"}, {"sha": "49152c5495a99dc5dad514aa37a5d416063d5d9a", "filename": "gcc/testsuite/gcc.target/aarch64/shift_and_operator-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcbc5c190c40b51c82f827830ce403c07d628960/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshift_and_operator-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcbc5c190c40b51c82f827830ce403c07d628960/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshift_and_operator-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshift_and_operator-1.c?ref=fcbc5c190c40b51c82f827830ce403c07d628960", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-do compile } */\n+\n+unsigned f(unsigned x, unsigned b)\n+{\n+  return ((x & 0xff00ff00U) >> 8) | b;\n+}\n+\n+unsigned f0(unsigned x, unsigned b)\n+{\n+  return ((x & 0xff00ff00U) >> 8) ^ b;\n+}\n+unsigned f1(unsigned x, unsigned b)\n+{\n+  return ((x & 0xff00ff00U) >> 8) + b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"lsr\\\\tw\\[0-9\\]+\" 0 } } */\n+/* { dg-final { scan-assembler-times \"lsr 8\" 3 } } */\n+/* { dg-final { scan-assembler-times \"eor\\\\tw\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"add\\\\tw\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"orr\\\\tw\\[0-9\\]+\" 1 } } */"}]}