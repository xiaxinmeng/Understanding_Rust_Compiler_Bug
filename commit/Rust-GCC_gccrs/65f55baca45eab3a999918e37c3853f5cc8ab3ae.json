{"sha": "65f55baca45eab3a999918e37c3853f5cc8ab3ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmNTViYWNhNDVlYWIzYTk5OTkxOGUzN2MzODUzZjVjYzhhYjNhZQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-10-25T05:36:14Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-25T05:36:14Z"}, "message": "mode-classes.def (MODE_POINTER_BOUNDS): New.\n\n        * mode-classes.def (MODE_POINTER_BOUNDS): New.\n        * tree.def (POINTER_BOUNDS_TYPE): New.\n        * genmodes.c (complete_mode): Support MODE_POINTER_BOUNDS.\n        (POINTER_BOUNDS_MODE): New.\n        (make_pointer_bounds_mode): New.\n        * machmode.h (POINTER_BOUNDS_MODE_P): New.\n        * stor-layout.c (int_mode_for_mode): Support MODE_POINTER_BOUNDS.\n        (layout_type): Support POINTER_BOUNDS_TYPE.\n        * tree-pretty-print.c (dump_generic_node): Support POINTER_BOUNDS_TYPE.\n        * tree.c (build_int_cst_wide): Support POINTER_BOUNDS_TYPE.\n        (type_contains_placeholder_1): Likewise.\n        * tree.h (POINTER_BOUNDS_TYPE_P): New.\n        * varasm.c (output_constant): Support POINTER_BOUNDS_TYPE.\n        * doc/rtl.texi (MODE_POINTER_BOUNDS): New.\n\nFrom-SVN: r204045", "tree": {"sha": "736c6d14e848e2e3cb0e1797f8c9423c4c512a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/736c6d14e848e2e3cb0e1797f8c9423c4c512a8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f55baca45eab3a999918e37c3853f5cc8ab3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f55baca45eab3a999918e37c3853f5cc8ab3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f55baca45eab3a999918e37c3853f5cc8ab3ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f55baca45eab3a999918e37c3853f5cc8ab3ae/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca9f377992fd5ea87d96ce1e2b3b41b8b3f70572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9f377992fd5ea87d96ce1e2b3b41b8b3f70572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9f377992fd5ea87d96ce1e2b3b41b8b3f70572"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "e919420a8af2201598e89a1541a48d8fca94b65a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -1,3 +1,20 @@\n+2013-10-24  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* mode-classes.def (MODE_POINTER_BOUNDS): New.\n+\t* tree.def (POINTER_BOUNDS_TYPE): New.\n+\t* genmodes.c (complete_mode): Support MODE_POINTER_BOUNDS.\n+\t(POINTER_BOUNDS_MODE): New.\n+\t(make_pointer_bounds_mode): New.\n+\t* machmode.h (POINTER_BOUNDS_MODE_P): New.\n+\t* stor-layout.c (int_mode_for_mode): Support MODE_POINTER_BOUNDS.\n+\t(layout_type): Support POINTER_BOUNDS_TYPE.\n+\t* tree-pretty-print.c (dump_generic_node): Support POINTER_BOUNDS_TYPE.\n+\t* tree.c (build_int_cst_wide): Support POINTER_BOUNDS_TYPE.\n+\t(type_contains_placeholder_1): Likewise.\n+\t* tree.h (POINTER_BOUNDS_TYPE_P): New.\n+\t* varasm.c (output_constant): Support POINTER_BOUNDS_TYPE.\n+\t* doc/rtl.texi (MODE_POINTER_BOUNDS): New.\n+\n 2013-10-24  Igor Shevlyakov  <igor.shevlyakov@gmail.com>\n \n \t* expr.c (expand_expr_real_1): Use mode of memory reference rather"}, {"sha": "77a9c703216deb4fecca36bbf28a631c858f8bca", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -1382,6 +1382,12 @@ any @code{CC_MODE} modes listed in the @file{@var{machine}-modes.def}.\n @xref{Jump Patterns},\n also see @ref{Condition Code}.\n \n+@findex MODE_POINTER_BOUNDS\n+@item MODE_POINTER_BOUNDS\n+Pointer bounds modes.  Used to represent values of pointer bounds type.\n+Operations in these modes may be executed as NOPs depending on hardware\n+features and environment setup.\n+\n @findex MODE_RANDOM\n @item MODE_RANDOM\n This is a catchall mode class for modes which don't fit into the above"}, {"sha": "0aa5de618b0ee7079044c1d98bcda2f13b495512", "filename": "gcc/genmodes.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -333,6 +333,7 @@ complete_mode (struct mode_data *m)\n       break;\n \n     case MODE_INT:\n+    case MODE_POINTER_BOUNDS:\n     case MODE_FLOAT:\n     case MODE_DECIMAL_FLOAT:\n     case MODE_FRACT:\n@@ -534,6 +535,19 @@ make_special_mode (enum mode_class cl, const char *name,\n   new_mode (cl, name, file, line);\n }\n \n+#define POINTER_BOUNDS_MODE(N, Y) \\\n+  make_pointer_bounds_mode (#N, Y, __FILE__, __LINE__)\n+\n+static void ATTRIBUTE_UNUSED\n+make_pointer_bounds_mode (const char *name,\n+\t\t\t  unsigned int bytesize,\n+\t\t\t  const char *file, unsigned int line)\n+{\n+  struct mode_data *m = new_mode (MODE_POINTER_BOUNDS, name, file, line);\n+  m->bytesize = bytesize;\n+}\n+\n+\n #define INT_MODE(N, Y) FRACTIONAL_INT_MODE (N, -1U, Y)\n #define FRACTIONAL_INT_MODE(N, B, Y) \\\n   make_int_mode (#N, B, Y, __FILE__, __LINE__)"}, {"sha": "71c72525b4a50066fa0bb3eba0b6a8d5e0cd0463", "filename": "gcc/machmode.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -174,6 +174,9 @@ extern const unsigned char mode_class[NUM_MACHINE_MODES];\n    || CLASS == MODE_ACCUM                      \\\n    || CLASS == MODE_UACCUM)\n \n+#define POINTER_BOUNDS_MODE_P(MODE)      \\\n+  (GET_MODE_CLASS (MODE) == MODE_POINTER_BOUNDS)\n+\n /* Get the size in bytes and bits of an object of mode MODE.  */\n \n extern CONST_MODE_SIZE unsigned char mode_size[NUM_MACHINE_MODES];"}, {"sha": "a94fd614603b599a36065a32e45b3096191fe595", "filename": "gcc/mode-classes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fmode-classes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fmode-classes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-classes.def?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_MODE_CLASS (MODE_CC),\t\t/* condition code in a register */ \\\n   DEF_MODE_CLASS (MODE_INT),\t\t/* integer */\t\t\t   \\\n   DEF_MODE_CLASS (MODE_PARTIAL_INT),\t/* integer with padding bits */    \\\n+  DEF_MODE_CLASS (MODE_POINTER_BOUNDS), /* bounds */                       \\\n   DEF_MODE_CLASS (MODE_FRACT),\t\t/* signed fractional number */\t   \\\n   DEF_MODE_CLASS (MODE_UFRACT),\t\t/* unsigned fractional number */   \\\n   DEF_MODE_CLASS (MODE_ACCUM),\t\t/* signed accumulator */\t   \\"}, {"sha": "f390eea79105c714c85d0fb611247b96fd2ce74f", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -383,6 +383,7 @@ int_mode_for_mode (enum machine_mode mode)\n     case MODE_VECTOR_ACCUM:\n     case MODE_VECTOR_UFRACT:\n     case MODE_VECTOR_UACCUM:\n+    case MODE_POINTER_BOUNDS:\n       mode = mode_for_size (GET_MODE_BITSIZE (mode), MODE_INT, 0);\n       break;\n \n@@ -2122,6 +2123,14 @@ layout_type (tree type)\n       SET_TYPE_MODE (type, VOIDmode);\n       break;\n \n+    case POINTER_BOUNDS_TYPE:\n+      SET_TYPE_MODE (type,\n+                     mode_for_size (TYPE_PRECISION (type),\n+\t\t\t\t    MODE_POINTER_BOUNDS, 0));\n+      TYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n+      TYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (TYPE_MODE (type)));\n+      break;\n+\n     case OFFSET_TYPE:\n       TYPE_SIZE (type) = bitsize_int (POINTER_SIZE);\n       TYPE_SIZE_UNIT (type) = size_int (POINTER_SIZE / BITS_PER_UNIT);"}, {"sha": "b2c5411f68c630ca389432c03846d2267bc07c7a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -866,6 +866,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case VOID_TYPE:\n+    case POINTER_BOUNDS_TYPE:\n     case INTEGER_TYPE:\n     case REAL_TYPE:\n     case FIXED_POINT_TYPE:"}, {"sha": "0a42109065c2f71e394b1399c6dcaf9785babacb", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -1221,7 +1221,8 @@ build_int_cst_wide (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      /* Cache NULL pointer.  */\n+    case POINTER_BOUNDS_TYPE:\n+      /* Cache NULL pointer and zero bounds.  */\n       if (!hi && !low)\n \t{\n \t  limit = 1;\n@@ -3273,6 +3274,7 @@ type_contains_placeholder_1 (const_tree type)\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:\n+    case POINTER_BOUNDS_TYPE:\n     case COMPLEX_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:"}, {"sha": "1a2c26635026244cbbadd3940165b84d5df95b5e", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -232,6 +232,11 @@ DEFTREECODE (QUAL_UNION_TYPE, \"qual_union_type\", tcc_type, 0)\n /* The void type in C */\n DEFTREECODE (VOID_TYPE, \"void_type\", tcc_type, 0)\n \n+/* Type to hold bounds for a pointer.\n+   Has TYPE_PRECISION component to specify number of bits used\n+   by this type.  */\n+DEFTREECODE (POINTER_BOUNDS_TYPE, \"pointer_bounds_type\", tcc_type, 0)\n+\n /* Type of functions.  Special fields:\n    TREE_TYPE\t\t    type of value returned.\n    TYPE_ARG_TYPES      list of types of arguments expected."}, {"sha": "bba117da819df6097b1349ea337e40f310e95193", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -542,6 +542,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Nonzero if this type is a complete type.  */\n #define COMPLETE_TYPE_P(NODE) (TYPE_SIZE (NODE) != NULL_TREE)\n \n+/* Nonzero if this type is a pointer bounds type.  */\n+#define POINTER_BOUNDS_TYPE_P(NODE) \\\n+  (TREE_CODE (NODE) == POINTER_BOUNDS_TYPE)\n+\n /* Nonzero if this type is the (possibly qualified) void type.  */\n #define VOID_TYPE_P(NODE) (TREE_CODE (NODE) == VOID_TYPE)\n "}, {"sha": "52ba182b00d320d97090bde02585135fa49f85f0", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f55baca45eab3a999918e37c3853f5cc8ab3ae/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=65f55baca45eab3a999918e37c3853f5cc8ab3ae", "patch": "@@ -4704,6 +4704,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n     case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n     case FIXED_POINT_TYPE:\n+    case POINTER_BOUNDS_TYPE:\n       if (! assemble_integer (expand_expr (exp, NULL_RTX, VOIDmode,\n \t\t\t\t\t   EXPAND_INITIALIZER),\n \t\t\t      MIN (size, thissize), align, 0))"}]}