{"sha": "64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhMWE0MjJkYmE0YjBjMDlhZDM4MzEwZTMyYTIyM2YyZTE2ZWQ5ZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2011-10-17T09:59:52Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-10-17T09:59:52Z"}, "message": "Add line map statistics to -fmem-report output\n\nThis patch adds statistics about line maps' memory consumption and\nmacro expansion to the output of -fmem-report.  It has been useful in\ntrying to reduce the memory consumption of the macro maps support.\n\nCo-Authored-By: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r180085", "tree": {"sha": "e11866266cf98c8e56a5c72d6c5ab06707407dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e11866266cf98c8e56a5c72d6c5ab06707407dc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/comments", "author": null, "committer": null, "parents": [{"sha": "847e697a240e6d30335335c62084743978fa2084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e697a240e6d30335335c62084743978fa2084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847e697a240e6d30335335c62084743978fa2084"}], "stats": {"total": 235, "additions": 231, "deletions": 4}, "files": [{"sha": "81caf547177c71d2a162d46c1e3cf7433163972b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -1,3 +1,14 @@\n+2011-10-15  Tom Tromey  <tromey@redhat.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* input.c (ONE_K, ONE_M, SCALE, STAT_LABEL, FORMAT_AMOUNT): New\n+\tmacros.\n+\t(num_expanded_macros_counter, num_macro_tokens_counter): Declare\n+\tnew counters.\n+\t(dump_line_table_statistics): Define new function.\n+\t* input.h (dump_line_table_statistics): Declare new function.\n+\t* toplev.c (dump_memory_report): Call dump_line_table_statistics.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "41842b7530f197545943418feade16b6429db3c3", "filename": "gcc/input.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -46,3 +46,99 @@ expand_location (source_location loc)\n \t\t\t\t\t LRK_SPELLING_LOCATION);\n   return xloc;\n }\n+\n+#define ONE_K 1024\n+#define ONE_M (ONE_K * ONE_K)\n+\n+/* Display a number as an integer multiple of either:\n+   - 1024, if said integer is >= to 10 K (in base 2)\n+   - 1024 * 1024, if said integer is >= 10 M in (base 2)\n+ */\n+#define SCALE(x) ((unsigned long) ((x) < 10 * ONE_K \\\n+\t\t  ? (x) \\\n+\t\t  : ((x) < 10 * ONE_M \\\n+\t\t     ? (x) / ONE_K \\\n+\t\t     : (x) / ONE_M)))\n+\n+/* For a given integer, display either:\n+   - the character 'k', if the number is higher than 10 K (in base 2)\n+     but strictly lower than 10 M (in base 2)\n+   - the character 'M' if the number is higher than 10 M (in base2)\n+   - the charcter ' ' if the number is strictly lower  than 10 K  */\n+#define STAT_LABEL(x) ((x) < 10 * ONE_K ? ' ' : ((x) < 10 * ONE_M ? 'k' : 'M'))\n+\n+/* Display an integer amount as multiple of 1K or 1M (in base 2).\n+   Display the correct unit (either k, M, or ' ') after the amout, as\n+   well.  */\n+#define FORMAT_AMOUNT(size) SCALE (size), STAT_LABEL (size)\n+\n+/* Dump statistics to stderr about the memory usage of the line_table\n+   set of line maps.  This also displays some statistics about macro\n+   expansion.  */\n+\n+void\n+dump_line_table_statistics (void)\n+{\n+  struct linemap_stats s;\n+  size_t total_used_map_size,\n+    macro_maps_size,\n+    total_allocated_map_size;\n+\n+  memset (&s, 0, sizeof (s));\n+\n+  linemap_get_statistics (line_table, &s);\n+\n+  macro_maps_size = s.macro_maps_used_size\n+    + s.macro_maps_locations_size;\n+\n+  total_allocated_map_size = s.ordinary_maps_allocated_size\n+    + s.macro_maps_allocated_size\n+    + s.macro_maps_locations_size;\n+\n+  total_used_map_size = s.ordinary_maps_used_size\n+    + s.macro_maps_used_size\n+    + s.macro_maps_locations_size;\n+\n+  fprintf (stderr, \"Number of expanded macros:                     %5lu\\n\",\n+           s.num_expanded_macros);\n+  if (s.num_expanded_macros != 0)\n+    fprintf (stderr, \"Average number of tokens per macro expansion:  %5lu\\n\",\n+             s.num_macro_tokens / s.num_expanded_macros);\n+  fprintf (stderr,\n+           \"\\nLine Table allocations during the \"\n+           \"compilation process\\n\");\n+  fprintf (stderr, \"Number of ordinary maps used:        %5lu%c\\n\",\n+           SCALE (s.num_ordinary_maps_used),\n+           STAT_LABEL (s.num_ordinary_maps_used));\n+  fprintf (stderr, \"Ordinary map used size:              %5lu%c\\n\",\n+           SCALE (s.ordinary_maps_used_size),\n+           STAT_LABEL (s.ordinary_maps_used_size));\n+  fprintf (stderr, \"Number of ordinary maps allocated:   %5lu%c\\n\",\n+           SCALE (s.num_ordinary_maps_allocated),\n+           STAT_LABEL (s.num_ordinary_maps_allocated));\n+  fprintf (stderr, \"Ordinary maps allocated size:        %5lu%c\\n\",\n+           SCALE (s.ordinary_maps_allocated_size),\n+           STAT_LABEL (s.ordinary_maps_allocated_size));\n+  fprintf (stderr, \"Number of macro maps used:           %5lu%c\\n\",\n+           SCALE (s.num_macro_maps_used),\n+           STAT_LABEL (s.num_macro_maps_used));\n+  fprintf (stderr, \"Macro maps used size:                %5lu%c\\n\",\n+           SCALE (s.macro_maps_used_size),\n+           STAT_LABEL (s.macro_maps_used_size));\n+  fprintf (stderr, \"Macro maps locations size:           %5lu%c\\n\",\n+           SCALE (s.macro_maps_locations_size),\n+           STAT_LABEL (s.macro_maps_locations_size));\n+  fprintf (stderr, \"Macro maps size:                     %5lu%c\\n\",\n+           SCALE (macro_maps_size),\n+           STAT_LABEL (macro_maps_size));\n+  fprintf (stderr, \"Duplicated maps locations size:      %5lu%c\\n\",\n+           SCALE (s.duplicated_macro_maps_locations_size),\n+           STAT_LABEL (s.duplicated_macro_maps_locations_size));\n+  fprintf (stderr, \"Total allocated maps size:           %5lu%c\\n\",\n+           SCALE (total_allocated_map_size),\n+           STAT_LABEL (total_allocated_map_size));\n+  fprintf (stderr, \"Total used maps size:                %5lu%c\\n\",\n+           SCALE (total_used_map_size),\n+           STAT_LABEL (total_used_map_size));\n+  fprintf (stderr, \"\\n\");\n+}"}, {"sha": "f2f351311fcc1843858616e7767ef43d0fa76b18", "filename": "gcc/input.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -55,4 +55,6 @@ extern location_t input_location;\n   ((linemap_location_in_system_header_p (line_table, LOC)))\n #define in_system_header (in_system_header_at (input_location))\n \n+void dump_line_table_statistics (void);\n+\n #endif"}, {"sha": "f508196b3ebcbe4ee1c99655377fbd92fa7be43e", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -1827,6 +1827,7 @@ target_reinit (void)\n void\n dump_memory_report (bool final)\n {\n+  dump_line_table_statistics ();\n   ggc_print_statistics ();\n   stringpool_statistics ();\n   dump_tree_statistics ();"}, {"sha": "fad0da6585318594bc149bcda3f9936c63a1585e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -1,3 +1,15 @@\n+2011-10-15  Tom Tromey  <tromey@redhat.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* line-map.h (struct linemap_stats): Declare new struct.\n+\t(linemap_get_statistics): Declare ...\n+\t* line-map.c (linemap_get_statistics):  ... new function.\n+\t* macro.c (num_expanded_macros_counter, num_macro_tokens_counter):\n+\tDeclare new counters.\n+\t(enter_macro_context, replace_args): Update\n+\tnum_macro_tokens_counter.\n+\t(cpp_get_token_1): Update num_expanded_macros_counter.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "572e330a1bd070b0206e6e8f9a57f49a0004bbbf", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -675,6 +675,27 @@ expanded_location linemap_expand_location_full (struct line_maps *,\n \t\t\t\t\t\tsource_location loc,\n \t\t\t\t\t\tenum location_resolution_kind lrk);\n \n+/* Statistics about maps allocation and usage as returned by\n+   linemap_get_statistics.  */\n+struct linemap_stats\n+{\n+  size_t num_ordinary_maps_allocated;\n+  size_t num_ordinary_maps_used;\n+  size_t ordinary_maps_allocated_size;\n+  size_t ordinary_maps_used_size;\n+  size_t num_expanded_macros;\n+  size_t num_macro_tokens;\n+  size_t num_macro_maps_used;\n+  size_t macro_maps_allocated_size;\n+  size_t macro_maps_used_size;\n+  size_t macro_maps_locations_size;\n+  size_t duplicated_macro_maps_locations_size;\n+};\n+\n+/* Compute and return statistics about the memory consumption of some\n+   parts of the line table SET.  */\n+void linemap_get_statistics (struct line_maps *, struct linemap_stats *);\n+\n /* Dump debugging information about source location LOC into the file\n    stream STREAM. SET is the line map set LOC comes from.  */\n void linemap_dump_location (struct line_maps *, source_location, FILE *);"}, {"sha": "9086b3e30651f3d2ebca1b40ae1b7d3417552c55", "filename": "libcpp/line-map.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -46,6 +46,10 @@ static source_location linemap_macro_loc_to_exp_point (struct line_maps *,\n \t\t\t\t\t\t       source_location,\n \t\t\t\t\t\t       const struct line_map **);\n \n+/* Counters defined in macro.c.  */\n+extern unsigned num_expanded_macros_counter;\n+extern unsigned num_macro_tokens_counter;\n+\n /* Initialize a line map set.  */\n \n void\n@@ -1143,3 +1147,62 @@ linemap_dump_location (struct line_maps *set,\n   fprintf (stream, \"{P:%s;F:%s;L:%d;C:%d;S:%d;M:%p;E:%d,LOC:%d}\",\n \t   path, from, l, c, s, (void*)map, e, loc);\n }\n+\n+/* Compute and return statistics about the memory consumption of some\n+   parts of the line table SET.  */\n+\n+void\n+linemap_get_statistics (struct line_maps *set,\n+\t\t\tstruct linemap_stats *s)\n+{\n+  size_t ordinary_maps_allocated_size, ordinary_maps_used_size,\n+    macro_maps_allocated_size, macro_maps_used_size,\n+    macro_maps_locations_size = 0, duplicated_macro_maps_locations_size = 0;\n+\n+  struct line_map *cur_map;\n+\n+  ordinary_maps_allocated_size =\n+    LINEMAPS_ORDINARY_ALLOCATED (set) * sizeof (struct line_map);\n+\n+  ordinary_maps_used_size =\n+    LINEMAPS_ORDINARY_USED (set) * sizeof (struct line_map);\n+\n+  macro_maps_allocated_size =\n+    LINEMAPS_MACRO_ALLOCATED (set) * sizeof (struct line_map);\n+\n+  for (cur_map = LINEMAPS_MACRO_MAPS (set);\n+       cur_map && cur_map <= LINEMAPS_LAST_MACRO_MAP (set);\n+       ++cur_map)\n+    {\n+      unsigned i;\n+\n+      linemap_assert (linemap_macro_expansion_map_p (cur_map));\n+\n+      macro_maps_locations_size +=\n+\t2 * MACRO_MAP_NUM_MACRO_TOKENS (cur_map) * sizeof (source_location);\n+\n+      for (i = 0; i < 2 * MACRO_MAP_NUM_MACRO_TOKENS (cur_map); i += 2)\n+\t{\n+\t  if (MACRO_MAP_LOCATIONS (cur_map)[i] ==\n+\t      MACRO_MAP_LOCATIONS (cur_map)[i + 1])\n+\t    duplicated_macro_maps_locations_size +=\n+\t      sizeof (source_location);\n+\t}\n+    }\n+\n+  macro_maps_used_size =\n+    LINEMAPS_MACRO_USED (set) * sizeof (struct line_map);\n+\n+  s->num_ordinary_maps_allocated = LINEMAPS_ORDINARY_ALLOCATED (set);\n+  s->num_ordinary_maps_used = LINEMAPS_ORDINARY_USED (set);\n+  s->ordinary_maps_allocated_size = ordinary_maps_allocated_size;\n+  s->ordinary_maps_used_size = ordinary_maps_used_size;\n+  s->num_expanded_macros = num_expanded_macros_counter;\n+  s->num_macro_tokens = num_macro_tokens_counter;\n+  s->num_macro_maps_used = LINEMAPS_MACRO_USED (set);\n+  s->macro_maps_allocated_size = macro_maps_allocated_size;\n+  s->macro_maps_locations_size = macro_maps_locations_size;\n+  s->macro_maps_used_size = macro_maps_used_size;\n+  s->duplicated_macro_maps_locations_size =\n+    duplicated_macro_maps_locations_size;\n+}"}, {"sha": "2d0eeaa0388bfd7d45f2d8b655978db495299d41", "filename": "libcpp/macro.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a1a422dba4b0c09ad38310e32a223f2e16ed9d/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=64a1a422dba4b0c09ad38310e32a223f2e16ed9d", "patch": "@@ -165,6 +165,13 @@ static void consume_next_token_from_context (cpp_reader *pfile,\n \t\t\t\t\t     source_location *);\n static const cpp_token* cpp_get_token_1 (cpp_reader *, source_location *);\n \n+/* Statistical counter tracking the number of macros that got\n+   expanded.  */\n+unsigned num_expanded_macros_counter = 0;\n+/* Statistical counter tracking the total number tokens resulting\n+   from macro expansion.  */\n+unsigned num_macro_tokens_counter = 0;\n+\n /* Emits a warning if NODE is a macro defined in the main file that\n    has not been used.  */\n int\n@@ -1082,10 +1089,15 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n \t\t\t\t\t    (const cpp_token **)\n \t\t\t\t\t    macro_tokens->base,\n \t\t\t\t\t    count);\n+\t      num_macro_tokens_counter += count;\n \t    }\n \t  else\n-\t    _cpp_push_token_context (pfile, node, macro->exp.tokens,\n-\t\t\t\t     macro_real_token_count (macro));\n+\t    {\n+\t      unsigned tokens_count = macro_real_token_count (macro);\n+\t      _cpp_push_token_context (pfile, node, macro->exp.tokens,\n+\t\t\t\t       tokens_count);\n+\t      num_macro_tokens_counter += tokens_count;\n+\t    }\n \t}\n \n       if (pragma_buff)\n@@ -1095,13 +1107,18 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n \t\t\t\t     padding_token (pfile, result), 1);\n \t  do\n \t    {\n+\t      unsigned tokens_count;\n \t      _cpp_buff *tail = pragma_buff->next;\n \t      pragma_buff->next = NULL;\n+\t      tokens_count = ((const cpp_token **) BUFF_FRONT (pragma_buff)\n+\t\t\t      - (const cpp_token **) pragma_buff->base);\n \t      push_ptoken_context (pfile, NULL, pragma_buff,\n \t\t\t\t   (const cpp_token **) pragma_buff->base,\n-\t\t\t\t   ((const cpp_token **) BUFF_FRONT (pragma_buff)\n-\t\t\t\t    - (const cpp_token **) pragma_buff->base));\n+\t\t\t\t   tokens_count);\n \t      pragma_buff = tail;\n+\t      if (!CPP_OPTION (pfile, track_macro_expansion))\n+\t\tnum_macro_tokens_counter += tokens_count;\n+\n \t    }\n \t  while (pragma_buff != NULL);\n \t  return 2;\n@@ -1711,6 +1728,8 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n   else\n     push_ptoken_context (pfile, node, buff, first,\n \t\t\t tokens_buff_count (buff));\n+\n+  num_macro_tokens_counter += tokens_buff_count (buff);\n }\n \n /* Return a special padding token, with padding inherited from SOURCE.  */\n@@ -2240,6 +2259,8 @@ cpp_get_token_1 (cpp_reader *pfile, source_location *location)\n \t}\n       else\n \t{\n+\t  if (pfile->context->c.macro)\n+\t    ++num_expanded_macros_counter;\n \t  _cpp_pop_context (pfile);\n \t  if (pfile->state.in_directive)\n \t    continue;"}]}