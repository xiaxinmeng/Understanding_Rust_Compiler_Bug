{"sha": "05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmNWIyY2RmOTdkMTBjZDQ0NDhhNTljN2Q2YzFiOTI0MTZjOGZjYw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-13T03:50:39Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-13T03:50:39Z"}, "message": "except.c (expand_start_all_catch): If the machine needs a nonlocal_goto_receiver...\n\n\t* except.c (expand_start_all_catch): If the machine needs a\n\tnonlocal_goto_receiver, add one at the start of the exception\n\thandler.\n\t(expand_leftover_cleanups): Likewise.\nPotential fix for eh on alpha, rs6000, and hppa.\n\nFrom-SVN: r14060", "tree": {"sha": "f38cd2b10fa587e04c411b0236f8b2a865ea378b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f38cd2b10fa587e04c411b0236f8b2a865ea378b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc/comments", "author": null, "committer": null, "parents": [{"sha": "15f3d16acb57c2ea3a9b86829ba51bde1c88c197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f3d16acb57c2ea3a9b86829ba51bde1c88c197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f3d16acb57c2ea3a9b86829ba51bde1c88c197"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "225b656c519f17463e978b01a2841a9101655b24", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=05f5b2cdf97d10cd4448a59c7d6c1b92416c8fcc", "patch": "@@ -1159,6 +1159,12 @@ expand_leftover_cleanups ()\n       /* Output the label for the start of the exception handler.  */\n       emit_label (entry->exception_handler_label);\n \n+#ifdef HAVE_nonlocal_goto_receiver\n+      if (! exceptions_via_longjmp)\n+\tif (HAVE_nonlocal_goto_receiver)\n+\t  emit_insn (gen_nonlocal_goto_receiver ());\n+#endif\n+\n       /* And now generate the insns for the handler.  */\n       expand_expr (entry->finalization, const0_rtx, VOIDmode, 0);\n \n@@ -1252,6 +1258,12 @@ expand_start_all_catch ()\n \t end up being the handler.  */\n       emit_label (entry->exception_handler_label);\n \n+#ifdef HAVE_nonlocal_goto_receiver\n+      if (! exceptions_via_longjmp)\n+\tif (HAVE_nonlocal_goto_receiver)\n+\t  emit_insn (gen_nonlocal_goto_receiver ());\n+#endif\n+\n       /* When we get down to the matching entry for this try block, stop.  */\n       if (entry->finalization == integer_zero_node)\n \t{"}]}