{"sha": "5123ad0975a0a439b6c97670beb1125a7f929d8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyM2FkMDk3NWEwYTQzOWI2Yzk3NjcwYmViMTEyNWE3ZjkyOWQ4Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-06-13T08:55:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-06-13T08:55:40Z"}, "message": "re PR debug/26754 (Wrong debug info for variable accessed non-locally)\n\n\tPR debug/26754\n\t* gimplify.c (declare_tmp_vars): Rename into declare_vars.\n\tAdd debug_info parameter.  Chain the vars to the BLOCK instead\n\tof the BIND_EXPR if debug info are requested for them.\n\t(pop_gimplify_context): Adjust for above change.\n\t(gimple_add_tmp_var): Likewise.\n\t* tree-gimple.h (declare_tmp_vars): Rename into declare_vars.\n\tAdd bool parameter.\n\t* tree-nested.c (convert_nonlocal_reference): Adjust for above change.\n\t(convert_local_reference): Likewise.\n\t(get_local_debug_decl): Set DECL_IGNORED_P on the original variable.\n\t(finalize_nesting_tree_1): Request that debug info be emitted\n\tfor debug_var_chain.\n\nFrom-SVN: r114605", "tree": {"sha": "05d681245e58a72d16cb2087bd700186752c60c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d681245e58a72d16cb2087bd700186752c60c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5123ad0975a0a439b6c97670beb1125a7f929d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5123ad0975a0a439b6c97670beb1125a7f929d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5123ad0975a0a439b6c97670beb1125a7f929d8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5123ad0975a0a439b6c97670beb1125a7f929d8f/comments", "author": null, "committer": null, "parents": [{"sha": "6f2ba390aeb310887314db61d9c4876ac7801474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2ba390aeb310887314db61d9c4876ac7801474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2ba390aeb310887314db61d9c4876ac7801474"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "ef35c991c54a06d731837bb3cd465b86d49bb929", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5123ad0975a0a439b6c97670beb1125a7f929d8f", "patch": "@@ -1,3 +1,19 @@\n+2006-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR debug/26754\n+\t* gimplify.c (declare_tmp_vars): Rename into declare_vars.\n+\tAdd debug_info parameter.  Chain the vars to the BLOCK instead\n+\tof the BIND_EXPR if debug info are requested for them.\n+\t(pop_gimplify_context): Adjust for above change.\n+\t(gimple_add_tmp_var): Likewise.\n+\t* tree-gimple.h (declare_tmp_vars): Rename into declare_vars.\n+\tAdd bool parameter.\n+\t* tree-nested.c (convert_nonlocal_reference): Adjust for above change.\n+\t(convert_local_reference): Likewise.\n+\t(get_local_debug_decl): Set DECL_IGNORED_P on the original variable.\n+\t(finalize_nesting_tree_1): Request that debug info be emitted\n+\tfor debug_var_chain.\n+\n 2006-06-13  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \t* haifa-sched.c (unlink_other_notes, unlink_line_notes): Fix the patch"}, {"sha": "08c5caa63d9f3d3c8fb17bc6d08244258d7bb5c0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5123ad0975a0a439b6c97670beb1125a7f929d8f", "patch": "@@ -180,7 +180,7 @@ pop_gimplify_context (tree body)\n     DECL_GIMPLE_FORMAL_TEMP_P (t) = 0;\n \n   if (body)\n-    declare_tmp_vars (c->temps, body);\n+    declare_vars (c->temps, body, false);\n   else\n     record_vars (c->temps);\n \n@@ -645,15 +645,16 @@ get_initialized_tmp_var (tree val, tree *pre_p, tree *post_p)\n   return internal_get_tmp_var (val, pre_p, post_p, false);\n }\n \n-/* Declares all the variables in VARS in SCOPE.  */\n+/* Declares all the variables in VARS in SCOPE.  If DEBUG_INFO is\n+   true, generate debug info for them; otherwise don't.  */\n \n void\n-declare_tmp_vars (tree vars, tree scope)\n+declare_vars (tree vars, tree scope, bool debug_info)\n {\n   tree last = vars;\n   if (last)\n     {\n-      tree temps;\n+      tree temps, block;\n \n       /* C99 mode puts the default 'return 0;' for main outside the outer\n \t braces.  So drill down until we find an actual scope.  */\n@@ -663,8 +664,27 @@ declare_tmp_vars (tree vars, tree scope)\n       gcc_assert (TREE_CODE (scope) == BIND_EXPR);\n \n       temps = nreverse (last);\n-      TREE_CHAIN (last) = BIND_EXPR_VARS (scope);\n-      BIND_EXPR_VARS (scope) = temps;\n+\n+      block = BIND_EXPR_BLOCK (scope);\n+      if (!block || !debug_info)\n+\t{\n+\t  TREE_CHAIN (last) = BIND_EXPR_VARS (scope);\n+\t  BIND_EXPR_VARS (scope) = temps;\n+\t}\n+      else\n+\t{\n+\t  /* We need to attach the nodes both to the BIND_EXPR and to its\n+\t     associated BLOCK for debugging purposes.  The key point here\n+\t     is that the BLOCK_VARS of the BIND_EXPR_BLOCK of a BIND_EXPR\n+\t     is a subchain of the BIND_EXPR_VARS of the BIND_EXPR.  */\n+\t  if (BLOCK_VARS (block))\n+\t    BLOCK_VARS (block) = chainon (BLOCK_VARS (block), temps);\n+\t  else\n+\t    {\n+\t      BIND_EXPR_VARS (scope) = chainon (BIND_EXPR_VARS (scope), temps);\n+\t      BLOCK_VARS (block) = temps;\n+\t    }\n+\t}\n     }\n }\n \n@@ -694,7 +714,7 @@ gimple_add_tmp_var (tree tmp)\n   else if (cfun)\n     record_vars (tmp);\n   else\n-    declare_tmp_vars (tmp, DECL_SAVED_TREE (current_function_decl));\n+    declare_vars (tmp, DECL_SAVED_TREE (current_function_decl), false);\n }\n \n /* Determines whether to assign a locus to the statement STMT.  */"}, {"sha": "60fde4ec9ff69bd5b1324c2fa34d9bbeffdc150a", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=5123ad0975a0a439b6c97670beb1125a7f929d8f", "patch": "@@ -30,7 +30,8 @@ extern tree create_tmp_var_name (const char *);\n extern tree create_tmp_var (tree, const char *);\n extern tree get_initialized_tmp_var (tree, tree *, tree *);\n extern tree get_formal_tmp_var (tree, tree *);\n-extern void declare_tmp_vars (tree, tree);\n+\n+extern void declare_vars (tree, tree, bool);\n \n extern void annotate_all_with_locus (tree *, location_t);\n "}, {"sha": "67a13c28a99a862dfd50186ea8d617c698da2d21", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5123ad0975a0a439b6c97670beb1125a7f929d8f/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=5123ad0975a0a439b6c97670beb1125a7f929d8f", "patch": "@@ -1048,7 +1048,7 @@ convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)\n       walk_body (convert_nonlocal_reference, info, &OMP_PARALLEL_BODY (t));\n \n       if (info->new_local_var_chain)\n-\tdeclare_tmp_vars (info->new_local_var_chain, OMP_PARALLEL_BODY (t));\n+\tdeclare_vars (info->new_local_var_chain, OMP_PARALLEL_BODY (t), false);\n       info->new_local_var_chain = save_local_var_chain;\n       info->suppress_expansion = save_suppress;\n       break;\n@@ -1186,6 +1186,9 @@ get_local_debug_decl (struct nesting_info *info, tree decl, tree field)\n   TREE_CHAIN (new_decl) = info->debug_var_chain;\n   info->debug_var_chain = new_decl;\n \n+  /* Do not emit debug info twice.  */\n+  DECL_IGNORED_P (decl) = 1;\n+\n   return new_decl;\n }\n \n@@ -1331,7 +1334,7 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n       walk_body (convert_local_reference, info, &OMP_PARALLEL_BODY (t));\n \n       if (info->new_local_var_chain)\n-\tdeclare_tmp_vars (info->new_local_var_chain, OMP_PARALLEL_BODY (t));\n+\tdeclare_vars (info->new_local_var_chain, OMP_PARALLEL_BODY (t), false);\n       info->new_local_var_chain = save_local_var_chain;\n       info->suppress_expansion = save_suppress;\n       break;\n@@ -1804,11 +1807,11 @@ finalize_nesting_tree_1 (struct nesting_info *root)\n   /* Make sure all new local variables get inserted into the\n      proper BIND_EXPR.  */\n   if (root->new_local_var_chain)\n-    declare_tmp_vars (root->new_local_var_chain,\n-\t\t      DECL_SAVED_TREE (root->context));\n+    declare_vars (root->new_local_var_chain, DECL_SAVED_TREE (root->context),\n+\t\t  false);\n   if (root->debug_var_chain)\n-    declare_tmp_vars (root->debug_var_chain,\n-\t\t      DECL_SAVED_TREE (root->context));\n+    declare_vars (root->debug_var_chain, DECL_SAVED_TREE (root->context),\n+\t\t  true);\n \n   /* Dump the translated tree function.  */\n   dump_function (TDI_nested, root->context);"}]}