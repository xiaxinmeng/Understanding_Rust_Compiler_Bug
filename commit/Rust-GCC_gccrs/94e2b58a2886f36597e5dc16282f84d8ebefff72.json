{"sha": "94e2b58a2886f36597e5dc16282f84d8ebefff72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlMmI1OGEyODg2ZjM2NTk3ZTVkYzE2MjgyZjg0ZDhlYmVmZmY3Mg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-07-22T14:07:19Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-07-22T14:07:19Z"}, "message": "[multiple changes]\n\n2005-07-22 Jerry DeLisle <jvdelisle@verizon.net>\n\n\tPR libfortran/21875  (FM111.f)\n\t* io/read.c (next_char): Return a ' ' character when BLANK_ZERO\n\tor BLANK_NULL are active.\n\t(read_decimal): Interpret ' ' character correctly for BZ or BN.\n\t(read_radix): Interpret ' ' character correctly for BZ or BN.\n\t(read_f): Interpret ' ' character correctly for BZ or BN.\n\n2005-07-22 Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR libfortran/22570\n\t* read.c (read_x): Correct the condition for doing the\n\tx-editing during formatted input.\n\t* transfer.c (formatted_transfer): Cast offset difference\n\tas int, clean-up arithmetic with new variable, bytes_used,\n\tzero counters for FMT_SLASH,\n\t(data_transfer_init) Zero X- and T-editing counters\n\tunconditionally.\n\t(next_record_w) Zero X- and T-editing counters.\n\tunconditionally.\n\nFrom-SVN: r102284", "tree": {"sha": "fcec375eaaebffa27d8cb8491cb445907311a0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcec375eaaebffa27d8cb8491cb445907311a0ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94e2b58a2886f36597e5dc16282f84d8ebefff72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e2b58a2886f36597e5dc16282f84d8ebefff72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e2b58a2886f36597e5dc16282f84d8ebefff72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e2b58a2886f36597e5dc16282f84d8ebefff72/comments", "author": null, "committer": null, "parents": [{"sha": "17c7e33e8c288eda8ec9316dad5daea43299f584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c7e33e8c288eda8ec9316dad5daea43299f584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c7e33e8c288eda8ec9316dad5daea43299f584"}], "stats": {"total": 104, "additions": 78, "deletions": 26}, "files": [{"sha": "b9bfc49281887fc5d1ebb301860f241a7aa43c1b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2b58a2886f36597e5dc16282f84d8ebefff72/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2b58a2886f36597e5dc16282f84d8ebefff72/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=94e2b58a2886f36597e5dc16282f84d8ebefff72", "patch": "@@ -1,3 +1,25 @@\n+2005-07-22 Jerry DeLisle <jvdelisle@verizon.net>\n+\n+\tPR libfortran/21875  (FM111.f)\n+\t* io/read.c (next_char): Return a ' ' character when BLANK_ZERO\n+\tor BLANK_NULL are active.\n+\t(read_decimal): Interpret ' ' character correctly for BZ or BN.\n+\t(read_radix): Interpret ' ' character correctly for BZ or BN.\n+\t(read_f): Interpret ' ' character correctly for BZ or BN.\n+\n+2005-07-22 Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR libfortran/22570\n+\t* read.c (read_x): Correct the condition for doing the\n+\tx-editing during formatted input.\n+\t* transfer.c (formatted_transfer): Cast offset difference\n+\tas int, clean-up arithmetic with new variable, bytes_used,\n+\tzero counters for FMT_SLASH, \n+\t(data_transfer_init) Zero X- and T-editing counters\n+\tunconditionally.\n+\t(next_record_w) Zero X- and T-editing counters.\n+\tunconditionally.\n+\n 2005-07-17  Jerry DeLisle  <jvdelisle@verizon.net>\n \n     * io/write.c (write_float): Fix field width checks for"}, {"sha": "654475dd0790604c163815631e2dd25cc9353d55", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2b58a2886f36597e5dc16282f84d8ebefff72/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2b58a2886f36597e5dc16282f84d8ebefff72/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=94e2b58a2886f36597e5dc16282f84d8ebefff72", "patch": "@@ -691,24 +691,46 @@ read_f (fnode * f, char *dest, int length)\n   p++;\n   w--;\n \n-  while (w > 0)\n+  if (g.blank_status == BLANK_UNSPECIFIED) /* Normal processing of exponent */\n     {\n-      if (*p == ' ')\n+      while (w > 0 && isdigit (*p))\n         {\n-          if (g.blank_status == BLANK_ZERO) *p = '0';\n-          if (g.blank_status == BLANK_NULL)\n+          exponent = 10 * exponent + *p - '0';\n+          p++;\n+          w--;\n+        }\n+        \n+      /* Only allow trailing blanks */\n+\n+      while (w > 0)\n+        {\n+          if (*p != ' ')\n+  \t  goto bad_float;\n+          p++;\n+          w--;\n+        }\n+    }    \n+  else  /* BZ or BN status is enabled */\n+    {\n+      while (w > 0)\n+        {\n+          if (*p == ' ')\n             {\n-              p++;\n-              w--;\n-              continue;\n+              if (g.blank_status == BLANK_ZERO) *p = '0';\n+              if (g.blank_status == BLANK_NULL)\n+                {\n+                  p++;\n+                  w--;\n+                  continue;\n+                }\n             }\n+          else if (!isdigit (*p))\n+            goto bad_float;\n+\n+          exponent = 10 * exponent + *p - '0';\n+          p++;\n+          w--;\n         }\n-      if (!isdigit (*p))\n-        goto bad_float;\n-        \n-      exponent = 10 * exponent + *p - '0';\n-      p++;\n-      w--;\n     }\n \n   exponent = exponent * exponent_sign;\n@@ -784,12 +806,14 @@ read_f (fnode * f, char *dest, int length)\n void\n read_x (fnode * f)\n {\n-  int n, m;\n+  int n;\n \n   n = f->u.n;\n-  m = (int)current_unit->bytes_left;\n-  if (f->format == FMT_X)\n-    n = (n > m) ? m : n;\n-  if (n)\n+\n+  if ((current_unit->flags.pad == PAD_NO || is_internal_unit ())\n+      && current_unit->bytes_left < n)\n+    n = current_unit->bytes_left;\n+\n+  if (n > 0)\n     read_block (&n);\n }"}, {"sha": "85d0dd91cfa533e0000f5de69e21ac66d9389e1b", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2b58a2886f36597e5dc16282f84d8ebefff72/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2b58a2886f36597e5dc16282f84d8ebefff72/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=94e2b58a2886f36597e5dc16282f84d8ebefff72", "patch": "@@ -444,7 +444,7 @@ require_type (bt expected, bt actual, fnode * f)\n static void\n formatted_transfer (bt type, void *p, int len)\n {\n-  int pos;\n+  int pos, bytes_used;\n   fnode *f;\n   format_token t;\n   int n;\n@@ -489,10 +489,12 @@ formatted_transfer (bt type, void *p, int len)\n \t    || t == FMT_STRING))\n \t{\n \t  write_x (skips, pending_spaces);\n-\t  max_pos = current_unit->recl - current_unit->bytes_left;\n+\t  max_pos = (int)(current_unit->recl - current_unit->bytes_left);\n \t  skips = pending_spaces = 0;\n \t}\n \n+      bytes_used = (int)(current_unit->recl - current_unit->bytes_left);\n+\n       switch (t)\n \t{\n \tcase FMT_I:\n@@ -687,8 +689,8 @@ formatted_transfer (bt type, void *p, int len)\n \tcase FMT_TR:\n \t  consume_data_flag = 0 ;\n \n-\t  pos = current_unit->recl - current_unit->bytes_left + f->u.n;\n-\t  skips = f->u.n;\n+\t  pos = bytes_used + f->u.n + skips;\n+\t  skips = f->u.n + skips;\n \t  pending_spaces = pos - max_pos;\n \n \t  /* Writes occur just before the switch on f->format, above, so that\n@@ -701,7 +703,7 @@ formatted_transfer (bt type, void *p, int len)\n \tcase FMT_TL:\n \tcase FMT_T:\n \t  if (f->format == FMT_TL)\n-\t    pos = current_unit->recl - current_unit->bytes_left - f->u.n;\n+\t    pos = bytes_used - f->u.n;\n \t  else /* FMT_T */\n \t    {\n \t      consume_data_flag = 0;\n@@ -714,7 +716,7 @@ formatted_transfer (bt type, void *p, int len)\n \t     bring us back again.  */\n \t  pos = pos < 0 ? 0 : pos;\n \n-\t  skips = skips + pos - (current_unit->recl - current_unit->bytes_left);\n+\t  skips = skips + pos - bytes_used;\n \t  pending_spaces =  pending_spaces + pos - max_pos;\n \n \t  if (skips == 0)\n@@ -776,6 +778,8 @@ formatted_transfer (bt type, void *p, int len)\n \n \tcase FMT_SLASH:\n \t  consume_data_flag = 0 ;\n+\t  skips = pending_spaces = 0;\n+\t  current_unit->bytes_left = 0;\n \t  next_record (0);\n \t  break;\n \n@@ -1225,8 +1229,7 @@ data_transfer_init (int read_flag)\n     }\n \n   /* Reset counters for T and X-editing.  */\n-  if (current_unit->flags.form == FORM_FORMATTED)\n-    max_pos = skips = pending_spaces = 0;\n+  max_pos = skips = pending_spaces = 0;\n \n   /* Start the data transfer if we are doing a formatted transfer.  */\n   if (current_unit->flags.form == FORM_FORMATTED && !ioparm.list_format\n@@ -1339,6 +1342,9 @@ next_record_w (void)\n   int length;\n   char *p;\n \n+  /* Zero counters for X- and T-editing.  */\n+  max_pos = skips = pending_spaces = 0;\n+\n   switch (current_mode ())\n     {\n     case FORMATTED_DIRECT:"}]}