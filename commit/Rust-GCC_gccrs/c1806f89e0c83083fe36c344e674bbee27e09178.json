{"sha": "c1806f89e0c83083fe36c344e674bbee27e09178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4MDZmODllMGM4MzA4M2ZlMzZjMzQ0ZTY3NGJiZWUyN2UwOTE3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-07-01T08:25:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-01T08:25:11Z"}, "message": "[multiple changes]\n\n2005-07-01  Paolo Carlini  <pcarlini@suse.de>\n\n        Port from libstdcxx_so_7-branch:\n\t2004-10-28  Chris Jefferson  <chris@bubblescope.net>\n\n\tPR libstdc++/17441\n\t* include/bit/stl_algo.h (find(,,,input_iterator_tag),\n\tfind(,,,random_access_interator_tag),\n\tfind_if(,,,input_iterator_tag),\n\tfind_if(,,,random_access_iterator_tag)): Uglify function name.\n\t(find, find_if): Use new uglified specialisation names.\n\t* testsuite/25_algorithms/find/17441.cc: New.\n\nFrom-SVN: r101501", "tree": {"sha": "c06b5b7b40d33135e64168941b4b1c7ac28c2175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c06b5b7b40d33135e64168941b4b1c7ac28c2175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1806f89e0c83083fe36c344e674bbee27e09178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1806f89e0c83083fe36c344e674bbee27e09178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1806f89e0c83083fe36c344e674bbee27e09178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1806f89e0c83083fe36c344e674bbee27e09178/comments", "author": null, "committer": null, "parents": [{"sha": "4f856a3e28c08d1b03bde0ec6a31da86917f02cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f856a3e28c08d1b03bde0ec6a31da86917f02cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f856a3e28c08d1b03bde0ec6a31da86917f02cf"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "44fb2eb9bc99731b62982e903207ad11f33f763d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1806f89e0c83083fe36c344e674bbee27e09178/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1806f89e0c83083fe36c344e674bbee27e09178/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c1806f89e0c83083fe36c344e674bbee27e09178", "patch": "@@ -1,3 +1,16 @@\n+2005-07-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+        Port from libstdcxx_so_7-branch:\n+\t2004-10-28  Chris Jefferson  <chris@bubblescope.net>\n+\n+\tPR libstdc++/17441\n+\t* include/bit/stl_algo.h (find(,,,input_iterator_tag),\n+\tfind(,,,random_access_interator_tag),\n+\tfind_if(,,,input_iterator_tag),\n+\tfind_if(,,,random_access_iterator_tag)): Uglify function name.\n+\t(find, find_if): Use new uglified specialisation names.\n+\t* testsuite/25_algorithms/find/17441.cc: New.\n+\n 2005-06-30  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* include/ext/pb_assoc/detail/hash_fn/mask_based_range_hashing.hpp"}, {"sha": "9a76452ad2056ca8160abec7a34d64d7254e8bc8", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1806f89e0c83083fe36c344e674bbee27e09178/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1806f89e0c83083fe36c344e674bbee27e09178/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=c1806f89e0c83083fe36c344e674bbee27e09178", "patch": "@@ -166,8 +166,8 @@ namespace std\n   */\n   template<typename _InputIterator, typename _Tp>\n     inline _InputIterator\n-    find(_InputIterator __first, _InputIterator __last,\n-\t const _Tp& __val, input_iterator_tag)\n+    __find(_InputIterator __first, _InputIterator __last,\n+\t   const _Tp& __val, input_iterator_tag)\n     {\n       while (__first != __last && !(*__first == __val))\n \t++__first;\n@@ -181,8 +181,8 @@ namespace std\n   */\n   template<typename _InputIterator, typename _Predicate>\n     inline _InputIterator\n-    find_if(_InputIterator __first, _InputIterator __last,\n-\t    _Predicate __pred, input_iterator_tag)\n+    __find_if(_InputIterator __first, _InputIterator __last,\n+\t      _Predicate __pred, input_iterator_tag)\n     {\n       while (__first != __last && !__pred(*__first))\n \t++__first;\n@@ -196,8 +196,8 @@ namespace std\n   */\n   template<typename _RandomAccessIterator, typename _Tp>\n     _RandomAccessIterator\n-    find(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t const _Tp& __val, random_access_iterator_tag)\n+    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t   const _Tp& __val, random_access_iterator_tag)\n     {\n       typename iterator_traits<_RandomAccessIterator>::difference_type\n \t__trip_count = (__last - __first) >> 2;\n@@ -248,8 +248,8 @@ namespace std\n   */\n   template<typename _RandomAccessIterator, typename _Predicate>\n     _RandomAccessIterator\n-    find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t    _Predicate __pred, random_access_iterator_tag)\n+    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t      _Predicate __pred, random_access_iterator_tag)\n     {\n       typename iterator_traits<_RandomAccessIterator>::difference_type\n \t__trip_count = (__last - __first) >> 2;\n@@ -311,8 +311,8 @@ namespace std\n       __glibcxx_function_requires(_EqualOpConcept<\n \t\ttypename iterator_traits<_InputIterator>::value_type, _Tp>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      return std::find(__first, __last, __val,\n-\t\t       std::__iterator_category(__first));\n+      return std::__find(__first, __last, __val,\n+\t\t         std::__iterator_category(__first));\n     }\n \n   /**\n@@ -333,8 +333,8 @@ namespace std\n       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n \t      typename iterator_traits<_InputIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n-      return std::find_if(__first, __last, __pred,\n-\t\t\t  std::__iterator_category(__first));\n+      return std::__find_if(__first, __last, __pred,\n+\t\t\t    std::__iterator_category(__first));\n     }\n \n   /**"}, {"sha": "b184bfa2bfe31119d7fb79251cb1db13f90d0912", "filename": "libstdc++-v3/testsuite/25_algorithms/find/17441.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1806f89e0c83083fe36c344e674bbee27e09178/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F17441.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1806f89e0c83083fe36c344e674bbee27e09178/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F17441.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F17441.cc?ref=c1806f89e0c83083fe36c344e674bbee27e09178", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1 algorithms, find()\n+\n+#include <algorithm>\n+\n+using namespace std;\n+\n+template<typename InputIterator, typename Tp>\n+  InputIterator\n+  find(InputIterator first, InputIterator last,\n+       const Tp& val, input_iterator_tag)\n+  { return first; }\n+\n+// libstdc++/17441\n+void test01()\n+{\n+  input_iterator_tag a;\n+  int i;\n+  find(&i, &i, 1, a);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}