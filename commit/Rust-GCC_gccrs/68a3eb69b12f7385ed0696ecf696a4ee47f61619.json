{"sha": "68a3eb69b12f7385ed0696ecf696a4ee47f61619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhM2ViNjliMTJmNzM4NWVkMDY5NmVjZjY5NmE0ZWU0N2Y2MTYxOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-16T12:23:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-16T12:23:39Z"}, "message": "trans.c (unchecked_conversion_nop): Handle function calls.\n\n\t* gcc-interface/trans.c (unchecked_conversion_nop): Handle function\n\tcalls.  Return true for conversion from a record subtype to its type.\n\nFrom-SVN: r158412", "tree": {"sha": "7b49675ef041277b8a277a1353c08016c4479bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b49675ef041277b8a277a1353c08016c4479bc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a3eb69b12f7385ed0696ecf696a4ee47f61619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a3eb69b12f7385ed0696ecf696a4ee47f61619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a3eb69b12f7385ed0696ecf696a4ee47f61619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a3eb69b12f7385ed0696ecf696a4ee47f61619/comments", "author": null, "committer": null, "parents": [{"sha": "1139f2e89d9e5199b66b05caba688be566561f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1139f2e89d9e5199b66b05caba688be566561f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1139f2e89d9e5199b66b05caba688be566561f1f"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "1fef2c72587955e2587dd4f877a3e97ae7f04c05", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=68a3eb69b12f7385ed0696ecf696a4ee47f61619", "patch": "@@ -1,3 +1,8 @@\n+2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (unchecked_conversion_nop): Handle function\n+\tcalls.  Return true for conversion from a record subtype to its type.\n+\n 2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Use boolean_type_node in"}, {"sha": "e2a480d10fd5e338e95ad157b3af2c1110b0880f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=68a3eb69b12f7385ed0696ecf696a4ee47f61619", "patch": "@@ -3670,7 +3670,8 @@ unchecked_conversion_nop (Node_Id gnat_node)\n      could de facto ensure type consistency and this should be preserved.  */\n   if (!(Nkind (Parent (gnat_node)) == N_Assignment_Statement\n \t&& Name (Parent (gnat_node)) == gnat_node)\n-      && !(Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n+      && !((Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n+\t    || Nkind (Parent (gnat_node)) == N_Function_Call)\n \t   && Name (Parent (gnat_node)) != gnat_node))\n     return false;\n \n@@ -3688,11 +3689,16 @@ unchecked_conversion_nop (Node_Id gnat_node)\n   if (to_type == from_type)\n     return true;\n \n-  /* For an array type, the conversion to the PAT is a no-op.  */\n+  /* For an array subtype, the conversion to the PAT is a no-op.  */\n   if (Ekind (from_type) == E_Array_Subtype\n       && to_type == Packed_Array_Type (from_type))\n     return true;\n \n+  /* For a record subtype, the conversion to the type is a no-op.  */\n+  if (Ekind (from_type) == E_Record_Subtype\n+      && to_type == Etype (from_type))\n+    return true;\n+\n   return false;\n }\n "}, {"sha": "589e80f89c0616abc6dce284c93a6fce74f23dae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68a3eb69b12f7385ed0696ecf696a4ee47f61619", "patch": "@@ -1,3 +1,7 @@\n+2010-04-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/specs/discr_private.ads: New test.\n+\n 2010-04-16  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/41514"}, {"sha": "0ddfbd137ff775d666142a88d387b4575b88506d", "filename": "gcc/testsuite/gnat.dg/specs/discr_private.ads", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr_private.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a3eb69b12f7385ed0696ecf696a4ee47f61619/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr_private.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr_private.ads?ref=68a3eb69b12f7385ed0696ecf696a4ee47f61619", "patch": "@@ -0,0 +1,50 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+package Discr_Private is\n+\n+   package Dec is\n+      type T_DECIMAL (Prec : Integer := 1) is private;\n+   private\n+      type T_DECIMAL (Prec : Integer := 1) is record\n+         case Prec is\n+            when  1 .. 2 => Value : Integer;\n+            when others => null;\n+         end case;\n+      end record;\n+   end;\n+\n+   type Value_T is record\n+      Bits  : Dec.T_DECIMAL(1);\n+   end record;\n+   for Value_T'size use 88;\n+\n+   type Value_Entry_T is record\n+      Index : Integer;\n+      Value : Value_T;\n+   end record;\n+\n+   type Value_Mode is (QI, HI, SI, DI, XI);\n+   for Value_Mode'size use 8;\n+\n+   type Valid_Modes_T is array (Value_Mode) of Boolean;\n+\n+   type Register_T is record\n+      Ventry : Value_Entry_T;\n+      Vmodes : Valid_Modes_T;\n+   end record;\n+\n+   type Regid_T is (Latch, Acc);\n+   for Regid_T use (Latch => 0, Acc => 2);\n+   for Regid_T'Size use 8;\n+\n+   type Regarray_T is array (Regid_T) of Register_T;\n+\n+   type Machine_T (Up : Boolean := True) is record\n+      case Up is\n+         when True  => Regs : Regarray_T;\n+         when False => null;\n+       end case;\n+   end record;\n+\n+end Discr_Private;"}]}