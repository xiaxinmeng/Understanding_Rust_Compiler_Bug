{"sha": "8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkY2VhNTFjMGZkNzUzZTZhNjUyYzliMjM2ZTkxYjNhNmUwOTExYw==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2021-08-09T07:06:14Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2021-08-16T13:34:25Z"}, "message": "gcov: Add TARGET_GCOV_TYPE_SIZE target hook\n\nIf -fprofile-update=atomic is used, then the target must provide atomic\noperations for the counters of the type returned by get_gcov_type().\nThis is a 64-bit type for targets which have a 64-bit long long type.\nOn 32-bit targets this could be an issue since they may not provide\n64-bit atomic operations.  Allow targets to override the default type\nsize with the new TARGET_GCOV_TYPE_SIZE target hook.\n\nIf a 32-bit gcov type size is used, then there is currently a warning in\nlibgcov-driver.c in a dead code block due to\nsizeof (counter) == sizeof (gcov_unsigned_t):\n\nlibgcc/libgcov-driver.c: In function 'dump_counter':\nlibgcc/libgcov-driver.c:401:46: warning: right shift count >= width of type [-Wshift-count-overflow]\n  401 |     dump_unsigned ((gcov_unsigned_t)(counter >> 32), dump_fn, arg);\n      |                                              ^~\n\ngcc/c-family/\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Define\n\t__LIBGCC_GCOV_TYPE_SIZE if flag_building_libgcc is true.\n\ngcc/\n\n\t* config/sparc/rtemself.h (SPARC_GCOV_TYPE_SIZE): Define.\n\t* config/sparc/sparc.c (sparc_gcov_type_size): New.\n\t(TARGET_GCOV_TYPE_SIZE): Redefine if SPARC_GCOV_TYPE_SIZE is defined.\n\t* coverage.c (get_gcov_type): Use targetm.gcov_type_size().\n\t* doc/tm.texi (TARGET_GCOV_TYPE_SIZE): Add hook under \"Misc\".\n\t* doc/tm.texi.in: Regenerate.\n\t* target.def (gcov_type_size): New target hook.\n\t* targhooks.c (default_gcov_type_size): New.\n\t* targhooks.h (default_gcov_type_size): Declare.\n\t* tree-profile.c (gimple_gen_edge_profiler): Use precision of\n\tgcov_type_node.\n\t(gimple_gen_time_profiler): Likewise.\n\nlibgcc/\n\n\t* libgcov.h (gcov_type): Define using __LIBGCC_GCOV_TYPE_SIZE.\n\t(gcov_type_unsigned): Likewise.", "tree": {"sha": "dfcfac7563c68b9b7d4397ae649b6b8a55c2c832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfcfac7563c68b9b7d4397ae649b6b8a55c2c832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be024a1285840bf2fc47fcbde32375468a92ce05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be024a1285840bf2fc47fcbde32375468a92ce05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be024a1285840bf2fc47fcbde32375468a92ce05"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "3fa62bc4fe7696bad109fd5f5bfd442579d2a518", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -1450,6 +1450,8 @@ c_cpp_builtins (cpp_reader *pfile)\n       /* For libgcov.  */\n       builtin_define_with_int_value (\"__LIBGCC_VTABLE_USES_DESCRIPTORS__\",\n \t\t\t\t     TARGET_VTABLE_USES_DESCRIPTORS);\n+      builtin_define_with_int_value (\"__LIBGCC_GCOV_TYPE_SIZE\",\n+\t\t\t\t     targetm.gcov_type_size());\n     }\n \n   /* For use in assembly language.  */"}, {"sha": "d64ce9012daf95dfb54e50b5d14674a67c364c73", "filename": "gcc/config/sparc/rtemself.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fconfig%2Fsparc%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fconfig%2Fsparc%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Frtemself.h?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -40,3 +40,5 @@\n \n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC\n+\n+#define SPARC_GCOV_TYPE_SIZE 32"}, {"sha": "06f41d7bb53f6d588a0d4c1a47da73e6c6c08423", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -944,6 +944,17 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_ZERO_CALL_USED_REGS\n #define TARGET_ZERO_CALL_USED_REGS sparc_zero_call_used_regs\n \n+#ifdef SPARC_GCOV_TYPE_SIZE\n+static HOST_WIDE_INT\n+sparc_gcov_type_size (void)\n+{\n+  return SPARC_GCOV_TYPE_SIZE;\n+}\n+\n+#undef TARGET_GCOV_TYPE_SIZE\n+#define TARGET_GCOV_TYPE_SIZE sparc_gcov_type_size\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Return the memory reference contained in X if any, zero otherwise.  */"}, {"sha": "10d7f8366cb547f06a00af5c11c8d7fe4532353b", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -146,7 +146,7 @@ tree\n get_gcov_type (void)\n {\n   scalar_int_mode mode\n-    = smallest_int_mode_for_size (LONG_LONG_TYPE_SIZE > 32 ? 64 : 32);\n+    = smallest_int_mode_for_size (targetm.gcov_type_size ());\n   return lang_hooks.types.type_for_mode (mode, false);\n }\n "}, {"sha": "f68f42638a112bed8396fd634bd3fd3c44ce848a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -12588,3 +12588,14 @@ Return an RTX representing @var{tagged_pointer} with its tag set to zero.\n Store the result in @var{target} if convenient.\n The default clears the top byte of the original pointer.\n @end deftypefn\n+\n+@deftypefn {Target Hook} HOST_WIDE_INT TARGET_GCOV_TYPE_SIZE (void)\n+Returns the gcov type size in bits.  This type is used for example for\n+counters incremented by profiling and code-coverage events.  The default\n+value is 64, if the type size of long long is greater than 32, otherwise the\n+default value is 32.  A 64-bit type is recommended to avoid overflows of the\n+counters.  If the @option{-fprofile-update=atomic} is used, then the\n+counters are incremented using atomic operations.  Targets not supporting\n+64-bit atomic operations may override the default value and request a 32-bit\n+type.\n+@end deftypefn"}, {"sha": "fdf16b901c537e6a02f630a80a2213d2dcb6d5d6", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -8180,3 +8180,5 @@ maintainer is familiar with.\n @hook TARGET_MEMTAG_EXTRACT_TAG\n \n @hook TARGET_MEMTAG_UNTAGGED_POINTER\n+\n+@hook TARGET_GCOV_TYPE_SIZE"}, {"sha": "28a34f1d51b5abb41c537b9cd327ca59f1f9260f", "filename": "gcc/target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -7104,6 +7104,18 @@ DEFHOOK\n  void, (void),\n  NULL)\n \n+DEFHOOK\n+(gcov_type_size,\n+ \"Returns the gcov type size in bits.  This type is used for example for\\n\\\n+counters incremented by profiling and code-coverage events.  The default\\n\\\n+value is 64, if the type size of long long is greater than 32, otherwise the\\n\\\n+default value is 32.  A 64-bit type is recommended to avoid overflows of the\\n\\\n+counters.  If the @option{-fprofile-update=atomic} is used, then the\\n\\\n+counters are incremented using atomic operations.  Targets not supporting\\n\\\n+64-bit atomic operations may override the default value and request a 32-bit\\n\\\n+type.\",\n+ HOST_WIDE_INT, (void), default_gcov_type_size)\n+\n /* Close the 'struct gcc_target' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)\n "}, {"sha": "c9b5208853dbc15706a65d1eb335e28e0564325e", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -2654,4 +2654,11 @@ default_memtag_untagged_pointer (rtx tagged_pointer, rtx target)\n   return untagged_base;\n }\n \n+/* The default implementation of TARGET_GCOV_TYPE_SIZE.  */\n+HOST_WIDE_INT\n+default_gcov_type_size (void)\n+{\n+  return TYPE_PRECISION (long_long_integer_type_node) > 32 ? 64 : 32;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "92d51992e625c2497aa8496b1e2e3d916e5706fd", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -302,4 +302,6 @@ extern rtx default_memtag_set_tag (rtx, rtx, rtx);\n extern rtx default_memtag_extract_tag (rtx, rtx);\n extern rtx default_memtag_untagged_pointer (rtx, rtx);\n \n+extern HOST_WIDE_INT default_gcov_type_size (void);\n+\n #endif /* GCC_TARGHOOKS_H */"}, {"sha": "cf46912631cb3fa5bd252b6cc8baebbc4eb55112", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -250,7 +250,7 @@ gimple_gen_edge_profiler (int edgeno, edge e)\n     {\n       /* __atomic_fetch_add (&counter, 1, MEMMODEL_RELAXED); */\n       tree addr = tree_coverage_counter_addr (GCOV_COUNTER_ARCS, edgeno);\n-      tree f = builtin_decl_explicit (LONG_LONG_TYPE_SIZE > 32\n+      tree f = builtin_decl_explicit (TYPE_PRECISION (gcov_type_node) > 32\n \t\t\t\t      ? BUILT_IN_ATOMIC_FETCH_ADD_8:\n \t\t\t\t      BUILT_IN_ATOMIC_FETCH_ADD_4);\n       gcall *stmt = gimple_build_call (f, 3, addr, one,\n@@ -525,7 +525,7 @@ gimple_gen_time_profiler (unsigned tag)\n \t\t\t  tree_time_profiler_counter);\n       gassign *assign = gimple_build_assign (ptr, NOP_EXPR, addr);\n       gsi_insert_before (&gsi, assign, GSI_NEW_STMT);\n-      tree f = builtin_decl_explicit (LONG_LONG_TYPE_SIZE > 32\n+      tree f = builtin_decl_explicit (TYPE_PRECISION (gcov_type_node) > 32\n \t\t\t\t      ? BUILT_IN_ATOMIC_ADD_FETCH_8:\n \t\t\t\t      BUILT_IN_ATOMIC_ADD_FETCH_4);\n       gcall *stmt = gimple_build_call (f, 3, ptr, one,"}, {"sha": "f6354a7a070580656da9f2a550d240647cecba3e", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdcea51c0fd753e6a652c9b236e91b3a6e0911c/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=8cdcea51c0fd753e6a652c9b236e91b3a6e0911c", "patch": "@@ -52,7 +52,7 @@\n #if __CHAR_BIT__ == 8\n typedef unsigned gcov_unsigned_t __attribute__ ((mode (SI)));\n typedef unsigned gcov_position_t __attribute__ ((mode (SI)));\n-#if LONG_LONG_TYPE_SIZE > 32\n+#if __LIBGCC_GCOV_TYPE_SIZE > 32\n typedef signed gcov_type __attribute__ ((mode (DI)));\n typedef unsigned gcov_type_unsigned __attribute__ ((mode (DI)));\n #else\n@@ -63,7 +63,7 @@ typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n #if __CHAR_BIT__ == 16\n typedef unsigned gcov_unsigned_t __attribute__ ((mode (HI)));\n typedef unsigned gcov_position_t __attribute__ ((mode (HI)));\n-#if LONG_LONG_TYPE_SIZE > 32\n+#if __LIBGCC_GCOV_TYPE_SIZE > 32\n typedef signed gcov_type __attribute__ ((mode (SI)));\n typedef unsigned gcov_type_unsigned __attribute__ ((mode (SI)));\n #else\n@@ -73,7 +73,7 @@ typedef unsigned gcov_type_unsigned __attribute__ ((mode (HI)));\n #else\n typedef unsigned gcov_unsigned_t __attribute__ ((mode (QI)));\n typedef unsigned gcov_position_t __attribute__ ((mode (QI)));\n-#if LONG_LONG_TYPE_SIZE > 32\n+#if __LIBGCC_GCOV_TYPE_SIZE > 32\n typedef signed gcov_type __attribute__ ((mode (HI)));\n typedef unsigned gcov_type_unsigned __attribute__ ((mode (HI)));\n #else"}]}