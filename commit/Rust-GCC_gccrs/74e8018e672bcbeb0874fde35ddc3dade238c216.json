{"sha": "74e8018e672bcbeb0874fde35ddc3dade238c216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlODAxOGU2NzJiY2JlYjA4NzRmZGUzNWRkYzNkYWRlMjM4YzIxNg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2008-10-16T17:30:06Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2008-10-16T17:30:06Z"}, "message": "re PR target/37381 (ICE in ia64_speculate_insn, at config/ia64/ia64.c:6902)\n\n2008-10-16  Alexander Monakov  <amonakov@ispras.ru>\n\n        PR target/37381\n        * gcc.c-torture/compile/pr37381.c: New test.\n\nFrom-SVN: r141177", "tree": {"sha": "06cf9d0b3131a8eb910be11e0196d66da5696d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06cf9d0b3131a8eb910be11e0196d66da5696d25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e8018e672bcbeb0874fde35ddc3dade238c216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e8018e672bcbeb0874fde35ddc3dade238c216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e8018e672bcbeb0874fde35ddc3dade238c216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e8018e672bcbeb0874fde35ddc3dade238c216/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbe67e7ccffa62d1b8990cf8c88fb6f659efc6e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe67e7ccffa62d1b8990cf8c88fb6f659efc6e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe67e7ccffa62d1b8990cf8c88fb6f659efc6e5"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "94f1659c6eaa2bcbe18047ccbe159f14cb5adc65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e8018e672bcbeb0874fde35ddc3dade238c216/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e8018e672bcbeb0874fde35ddc3dade238c216/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74e8018e672bcbeb0874fde35ddc3dade238c216", "patch": "@@ -1,3 +1,8 @@\n+2008-10-16  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/37381\n+\t* gcc.c-torture/compile/pr37381.c: New test.\n+\n 2008-10-16  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/33192"}, {"sha": "a2fed66c4eed704ff1f6bc91c04fadeec4e5fe73", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37381.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e8018e672bcbeb0874fde35ddc3dade238c216/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37381.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e8018e672bcbeb0874fde35ddc3dade238c216/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37381.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37381.c?ref=74e8018e672bcbeb0874fde35ddc3dade238c216", "patch": "@@ -0,0 +1,97 @@\n+extern unsigned int __invalid_size_argument_for_IOC;\n+typedef unsigned int __u32;\n+struct video_window\n+{\n+  __u32 x, y;\n+  __u32 width, height;\n+};\n+typedef unsigned long XID;\n+typedef XID Window;\n+typedef struct _XExtData\n+{\n+  Window root;\n+}\n+Screen;\n+typedef struct\n+{\n+  int border_width;\n+}\n+XWindowAttributes;\n+typedef struct _XDisplay Display;\n+typedef struct\n+{\n+  int default_screen;\n+  Screen *screens;\n+}\n+ *_XPrivDisplay;\n+typedef struct\n+{\n+  int x, y;\n+}\n+XSizeHints;\n+typedef struct\n+{\n+  unsigned short hdisplay;\n+  unsigned short vdisplay;\n+}\n+XF86VidModeModeInfo;\n+Display *display;\n+int tfd;\n+int ccapt;\n+int tml;\n+int fswidth = 0;\n+int fsheight = 0;\n+Window fmwin;\n+XF86VidModeModeInfo **modelines, *fullscreenmode = ((void *) 0);\n+struct video_window vswin;\n+DoFullScreen (void)\n+{\n+  int i;\n+  int rx, ry;\n+  Window junkwin;\n+  XSizeHints fmsizehints;\n+  XWindowAttributes fmwinattr;\n+  if (ioctl\n+      (tfd,\n+       (((1U) << (((0 + 8) + 8) + 14)) | ((('v')) << (0 + 8)) | (((8)) << 0) |\n+\t(((((sizeof (int) == sizeof (int[1])\n+\t     && sizeof (int) <\n+\t     (1 << 14)) ? sizeof (int) : __invalid_size_argument_for_IOC))) <<\n+\t ((0 + 8) + 8))), &ccapt) < 0)\n+    {\n+      perror (\"ioctl VIDIOCCAPTURE\");\n+    }\n+  if (!XTranslateCoordinates\n+      (display, fmwin,\n+       ((&((_XPrivDisplay) display)->\n+\t screens[(((_XPrivDisplay) display)->default_screen)])->root),\n+       -fmwinattr.border_width, -fmwinattr.border_width, &rx, &ry, &junkwin))\n+    {\n+    }\n+  vswin.width = fswidth;\n+  vswin.height = fsheight;\n+  vswin.x = fmsizehints.x + rx;\n+  vswin.y = fmsizehints.y + ry;\n+  if (ioctl\n+      (tfd,\n+       (((1U) << (((0 + 8) + 8) + 14)) | ((('v')) << (0 + 8)) | (((8)) << 0) |\n+\t(((((sizeof (int) == sizeof (int[1])\n+\t     && sizeof (int) <\n+\t     (1 << 14)) ? sizeof (int) : __invalid_size_argument_for_IOC))) <<\n+\t ((0 + 8) + 8))), &ccapt) < 0)\n+    {\n+      XF86VidModeGetAllModeLines (display, XDefaultScreen (display), &tml,\n+\t\t\t\t  &modelines);\n+\t{\n+\t  if ((modelines[i]->hdisplay == fswidth)\n+\t      && (modelines[i]->vdisplay == fsheight))\n+\t    {\n+\t      fullscreenmode = modelines[i];\n+\t    }\n+\t}\n+\t{\n+\t  XF86VidModeSetViewPort (display, XDefaultScreen (display), vswin.x,\n+\t\t\t\t  vswin.y);\n+\t}\n+    }\n+}"}]}