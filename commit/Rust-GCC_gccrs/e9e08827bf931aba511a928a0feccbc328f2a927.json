{"sha": "e9e08827bf931aba511a928a0feccbc328f2a927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllMDg4MjdiZjkzMWFiYTUxMWE5MjhhMGZlY2NiYzMyOGYyYTkyNw==", "commit": {"author": {"name": "Siva Chandra Reddy", "email": "sivachandra@google.com", "date": "2014-09-10T13:18:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-09-10T13:18:04Z"}, "message": "hook.in: Load the xmethods.\n\n2014-09-10  Siva Chandra Reddy  <sivachandra@google.com>\n\n\t* python/hook.in: Load the xmethods.\n\t* python/Makefile.am (nobase_python_DATA): Add xmethods.py.\n\t* python/Makefile.in: Regenerated.\n\t* python/libstdcxx/v6/xmethods.py: New file.\n\t* testsuite/lib/gdb-test.exp (gdb_version_check_xmethods): New\n\tfunction.\n\t(gdb-test): New optional argument LOAD_XMETHODS.  Load xmethods\n\tpython script if LOAD_XMETHODS is true.\n\t* testsuite/libstdc++-xmethods/unique_ptr.cc: New file.\n\t* testsuite/libstdc++-xmethods/vector.cc: New file.\n\t* testsuite/libstdc++-xmethods/xmethods.exp: New file.\n\nFrom-SVN: r215128", "tree": {"sha": "99b6859d870823eec6a19c39fa4d7c997524e91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b6859d870823eec6a19c39fa4d7c997524e91b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e08827bf931aba511a928a0feccbc328f2a927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e08827bf931aba511a928a0feccbc328f2a927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e08827bf931aba511a928a0feccbc328f2a927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e08827bf931aba511a928a0feccbc328f2a927/comments", "author": {"login": "sivachandra", "id": 635361, "node_id": "MDQ6VXNlcjYzNTM2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/635361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivachandra", "html_url": "https://github.com/sivachandra", "followers_url": "https://api.github.com/users/sivachandra/followers", "following_url": "https://api.github.com/users/sivachandra/following{/other_user}", "gists_url": "https://api.github.com/users/sivachandra/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivachandra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivachandra/subscriptions", "organizations_url": "https://api.github.com/users/sivachandra/orgs", "repos_url": "https://api.github.com/users/sivachandra/repos", "events_url": "https://api.github.com/users/sivachandra/events{/privacy}", "received_events_url": "https://api.github.com/users/sivachandra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f15b287f2dcdf5284a2abb3e5c727f26c11cc064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f15b287f2dcdf5284a2abb3e5c727f26c11cc064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f15b287f2dcdf5284a2abb3e5c727f26c11cc064"}], "stats": {"total": 277, "additions": 274, "deletions": 3}, "files": [{"sha": "79ddf35a4dcbdbab067f3d7935355ab67f46e76b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -1,3 +1,17 @@\n+2014-09-10  Siva Chandra Reddy  <sivachandra@google.com>\n+\n+\t* python/hook.in: Load the xmethods.\n+\t* python/Makefile.am (nobase_python_DATA): Add xmethods.py.\n+\t* python/Makefile.in: Regenerated.\n+\t* python/libstdcxx/v6/xmethods.py: New file.\n+\t* testsuite/lib/gdb-test.exp (gdb_version_check_xmethods): New\n+\tfunction.\n+\t(gdb-test): New optional argument LOAD_XMETHODS.  Load xmethods\n+\tpython script if LOAD_XMETHODS is true.\n+\t* testsuite/libstdc++-xmethods/unique_ptr.cc: New file.\n+\t* testsuite/libstdc++-xmethods/vector.cc: New file.\n+\t* testsuite/libstdc++-xmethods/xmethods.exp: New file.\n+\n 2014-09-10  Tony Wang  <tony.wang@arm.com>\n \n \tPR target/56846"}, {"sha": "c34c860987380c1a983d8f81b04f1d94679fbe9b", "filename": "libstdc++-v3/python/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.am?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -33,6 +33,7 @@ all-local: gdb.py\n \n nobase_python_DATA = \\\n     libstdcxx/v6/printers.py \\\n+    libstdcxx/v6/xmethods.py \\\n     libstdcxx/v6/__init__.py \\\n     libstdcxx/__init__.py\n "}, {"sha": "7d0c8ac413ea98b1652e27a02889f9b87c526fd2", "filename": "libstdc++-v3/python/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -316,6 +316,7 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n @ENABLE_PYTHONDIR_TRUE@pythondir = $(prefix)/$(python_mod_dir)\n nobase_python_DATA = \\\n     libstdcxx/v6/printers.py \\\n+    libstdcxx/v6/xmethods.py \\\n     libstdcxx/v6/__init__.py \\\n     libstdcxx/__init__.py\n "}, {"sha": "aeb1cdbc91accbb0b028fb30036053f71f9231c4", "filename": "libstdc++-v3/python/hook.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2Fhook.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2Fhook.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Fhook.in?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -58,3 +58,15 @@ if gdb.current_objfile () is not None:\n # Load the pretty-printers.\n from libstdcxx.v6.printers import register_libstdcxx_printers\n register_libstdcxx_printers (gdb.current_objfile ())\n+\n+# Load the xmethods if GDB supports them.\n+def gdb_has_xmethods():\n+    try:\n+        import gdb.xmethod\n+        return True\n+    except ImportError:\n+        return False\n+\n+if gdb_has_xmethods():\n+    from libstdcxx.v6.xmethods import register_libstdcxx_xmethods\n+    register_libstdcxx_xmethods (gdb.current_objfile ())"}, {"sha": "f20f411affd187047d04ff4e9f9cee84f17f1304", "filename": "libstdc++-v3/python/libstdcxx/v6/xmethods.py", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -0,0 +1,103 @@\n+# Xmethods for libstc++.\n+\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+import gdb\n+import gdb.xmethod\n+import re\n+\n+matcher_name_prefix = 'libstdc++::'\n+\n+# Xmethods for std::vector\n+\n+class VectorSizeWorker(gdb.xmethod.XMethodWorker):\n+    def __init__(self):\n+        self.name = 'size'\n+        self.enabled = True\n+\n+    def get_arg_types(self):\n+        return None\n+\n+    def __call__(self, obj):\n+        return obj['_M_impl']['_M_finish'] - obj['_M_impl']['_M_start']\n+\n+class VectorSubscriptWorker(gdb.xmethod.XMethodWorker):\n+    def __init__(self):\n+        self.name = 'operator[]'\n+        self.enabled = True\n+\n+    def get_arg_types(self):\n+        return gdb.lookup_type('std::size_t')\n+\n+    def __call__(self, obj, subscript):\n+        return obj['_M_impl']['_M_start'][subscript]\n+\n+class VectorMethodsMatcher(gdb.xmethod.XMethodMatcher):\n+    def __init__(self):\n+        gdb.xmethod.XMethodMatcher.__init__(self,\n+                                            matcher_name_prefix + 'vector')\n+        self._subscript_worker = VectorSubscriptWorker()\n+        self._size_worker = VectorSizeWorker()\n+        self.methods = [self._subscript_worker, self._size_worker]\n+\n+    def match(self, class_type, method_name):\n+        if not re.match('^std::vector<.*>$', class_type.tag):\n+            return None\n+        if method_name == 'operator[]' and self._subscript_worker.enabled:\n+            return self._subscript_worker\n+        elif method_name == 'size' and self._size_worker.enabled:\n+            return self._size_worker\n+\n+# Xmethods for std::unique_ptr\n+\n+class UniquePtrGetWorker(gdb.xmethod.XMethodWorker):\n+    def __init__(self):\n+        self.name = 'get'\n+        self.enabled = True\n+\n+    def get_arg_types(self):\n+        return None\n+\n+    def __call__(self, obj):\n+        return obj['_M_t']['_M_head_impl']\n+\n+class UniquePtrDerefWorker(UniquePtrGetWorker):\n+    def __init__(self):\n+        UniquePtrGetWorker.__init__(self)\n+        self.name = 'operator*'\n+\n+    def __call__(self, obj):\n+        return UniquePtrGetWorker.__call__(self, obj).dereference()\n+\n+class UniquePtrMethodsMatcher(gdb.xmethod.XMethodMatcher):\n+    def __init__(self):\n+        gdb.xmethod.XMethodMatcher.__init__(self,\n+                                            matcher_name_prefix + 'unique_ptr')\n+        self._get_worker = UniquePtrGetWorker()\n+        self._deref_worker = UniquePtrDerefWorker()\n+        self.methods = [self._get_worker, self._deref_worker]\n+\n+    def match(self, class_type, method_name):\n+        if not re.match('^std::unique_ptr<.*>$', class_type.tag):\n+            return None\n+        if method_name == 'operator*' and self._deref_worker.enabled:\n+            return self._deref_worker\n+        elif method_name == 'get' and self._get_worker.enabled:\n+            return self._get_worker\n+\f\n+def register_libstdcxx_xmethods(locus):\n+    gdb.xmethod.register_xmethod_matcher(locus, VectorMethodsMatcher())\n+    gdb.xmethod.register_xmethod_matcher(locus, UniquePtrMethodsMatcher())"}, {"sha": "1a68217a4fff71213406274e816ee2c48aa02e8e", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -79,7 +79,7 @@ proc whatis-test {var result} {\n #\n # Argument 0 is the marker on which to put a breakpoint\n # Argument 2 handles expected failures and the like\n-proc gdb-test { marker {selector {}} } {\n+proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n     if { ![isnative] || [is_remote target] } { return }\n \n     if {[string length $selector] > 0} {\n@@ -111,7 +111,8 @@ proc gdb-test { marker {selector {}} } {\n     set cmd_file \"[file rootname [file tail $prog]].gdb\"\n \n     global srcdir\n-    set pycode [file join $srcdir .. python libstdcxx v6 printers.py]\n+    set printer_code [file join $srcdir .. python libstdcxx v6 printers.py]\n+    set xmethod_code [file join $srcdir .. python libstdcxx v6 xmethods.py]\n \n     global gdb_tests\n \n@@ -121,8 +122,13 @@ proc gdb-test { marker {selector {}} } {\n     # Now that we've disabled auto-load, it's safe to set the target file\n     puts $fd \"file ./$output_file\"\n     # Load & register *our* copy of the pretty-printers\n-    puts $fd \"source $pycode\"\n+    puts $fd \"source $printer_code\"\n     puts $fd \"python register_libstdcxx_printers(None)\"\n+    if { $load_xmethods } {\n+\t# Load a& register xmethods.\n+\tputs $fd \"source $xmethod_code\"\n+\tputs $fd \"python register_libstdcxx_xmethods(None)\"\n+    }\n     # And start the program\n     puts $fd \"break $line\"\n     puts $fd \"run\"\n@@ -262,3 +268,12 @@ proc gdb_version_check {} {\n     return [gdb_batch_check \"python print(gdb.lookup_global_symbol)\" \\\n \t      \"<built-in function lookup_global_symbol>\"]\n }\n+\n+# Check for a version of gdb which supports xmethod tests.  It is done\n+# in a manner similar to the check for a version of gdb which supports the\n+# pretty-printer tests below.\n+proc gdb_version_check_xmethods {} {\n+    return [gdb_batch_check \\\n+\t      \"python import gdb.xmethod; print(gdb.xmethod.XMethod)\" \\\n+\t      \"<class 'gdb\\\\.xmethod\\\\.XMethod'>\"]\n+}"}, {"sha": "6c9fd8e99e4a1f6f65303d8a6c62ac4630b5060d", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/unique_ptr.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Funique_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Funique_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Funique_ptr.cc?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++11 -g -O0\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+\n+int\n+main ()\n+{\n+  int *i = new int;\n+  *i = 10;\n+\n+  std::unique_ptr<int> p(i);\n+// { dg-final { note-test *p 10 } }\n+// { dg-final { regexp-test p.get() 0x.* } }\n+\n+  return 0;  // Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT {} 1 } }"}, {"sha": "2ee93991f67c8cc2ede1948c3edf296cbe84d940", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/vector.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fvector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fvector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fvector.cc?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run }\n+// { dg-options \"-g -O0\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+int\n+main ()\n+{\n+  std::vector<int> v;\n+  v.push_back(1);\n+  v.push_back(2);\n+  v.push_back(3);\n+// { dg-final { note-test v\\[0\\] 1 } }\n+// { dg-final { note-test v\\[1\\] 2 } }\n+// { dg-final { note-test v\\[2\\] 3 } }\n+// { dg-final { note-test v.size() 3 } }\n+\n+  return 0;  // Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT {} 1 } }"}, {"sha": "c51c7e8ed137152cc09fed9c6f78138af5578dad", "filename": "libstdc++-v3/testsuite/libstdc++-xmethods/xmethods.exp", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fxmethods.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e08827bf931aba511a928a0feccbc328f2a927/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fxmethods.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-xmethods%2Fxmethods.exp?ref=e9e08827bf931aba511a928a0feccbc328f2a927", "patch": "@@ -0,0 +1,51 @@\n+#   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib gdb-test.exp\n+\n+dg-init\n+v3-build_support\n+\n+global GDB\n+if ![info exists ::env(GUALITY_GDB_NAME)] {\n+    if [info exists GDB] {\n+\tset guality_gdb_name \"$GDB\"\n+    } else {\n+\tset guality_gdb_name \"[transform gdb]\"\n+    }\n+    setenv GUALITY_GDB_NAME \"$guality_gdb_name\"\n+}\n+\n+if {! [gdb_version_check_xmethods]} {\n+    unsupported \"xmethods.exp\"\n+    return\n+}\n+\n+# This can be used to keep the .exe around.  dg-test has an option for\n+# this but there is no way to pass it through dg-runtest.\n+global dg-interpreter-batch-mode\n+set dg-interpreter-batch-mode 1\n+\n+global DEFAULT_CXXFLAGS\n+global PCH_CXXFLAGS\n+dg-runtest [lsort [glob $srcdir/$subdir/*.cc]] \\\n+  \"\" \"$DEFAULT_CXXFLAGS $PCH_CXXFLAGS\"\n+\n+if [info exists guality_gdb_name] {\n+    unsetenv GUALITY_GDB_NAME\n+}\n+\n+dg-finish"}]}