{"sha": "df161b697cfa29a387deeea64c57e3d8512edbe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxNjFiNjk3Y2ZhMjlhMzg3ZGVlZWE2NGM1N2UzZDg1MTJlZGJlMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-07-23T22:15:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-23T22:15:51Z"}, "message": "re PR fortran/45045 (Named COMMON with different size: No warning with -fwhole-file)\n\ngcc/fortran/\n2010-07-24  Tobias Burnus  <burnus@net-b.de>\n\n        * options.c (gfc_init_options): Enable -fwhole-file by default.\n        * interface.c (compare_parameter): Assume a Hollerith constant is\n        compatible with all other argument types.\n\nlibgomp/\n2010-07-24  Tobias Burnus  <burnus@net-b.de>\n\n        * testsuite/libgomp.fortran/appendix-a/a.28.5.f90: Add -w to\n        silence -fwhole-file warning.\n\ngcc/testsuite/\n2010-07-24  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/func_decl_4.f90: Split test into two ...\n        * gfortran.dg/func_decl_5.f90: ... parts.\n        * gfortran.dg/common_resize_1.f: xfail two warnings (cf. PR 45045).\n        * gfortran.dg/bounds_temporaries_1.f90: Add new dg-warning.\n        * gfortran.dg/global_references_1.f90: Add new dg-warning.\n        * gfortran.dg/generic_actual_arg.f90: Add new dg-warning.\n        * gfortran.dg/entry_17.f90: Remove no-longer needed dg-warning.\n        * gfortran.dg/used_before_typed_4.f90: Add new dg-warning.\n        * gfortran.dg/bounds_check_strlen_1.f90: Add new dg-warning.\n        * gfortran.dg/intrinsic_std_1.f90: Split by remove tree dump ...\n        * gfortran.dg/intrinsic_std_6.f90: ... and create a dump test.\n        * gfortran.dg/sizeof.f90: Make test valid.\n        * gfortran.dg/pr20865.f90: Add new dg-error.\n        * gfortran.dg/integer_exponentiation_2.f90: Add new dg-warnings.\n        * gfortran.dg/g77/19990218-0.f: Ditto.\n        * gfortran.dg/g77/19990218-1.f: Ditto.\n        * gfortran.dg/g77/970625-2.f: Ditto.\n        * gfortran.dg/pr37243.f: Fix function declaration.\n        * gfortran.dg/use_only_1.f90: Fix implicit typing.\n        * gfortran.dg/loc_1.f90: Fix pointer datatype.\n\nFrom-SVN: r162491", "tree": {"sha": "c983f3bd0f0b77e7322751841c73daea479f7408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c983f3bd0f0b77e7322751841c73daea479f7408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df161b697cfa29a387deeea64c57e3d8512edbe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df161b697cfa29a387deeea64c57e3d8512edbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df161b697cfa29a387deeea64c57e3d8512edbe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df161b697cfa29a387deeea64c57e3d8512edbe3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0bfea64bb2be9a8d697cca5ab099f2d251720d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0bfea64bb2be9a8d697cca5ab099f2d251720d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0bfea64bb2be9a8d697cca5ab099f2d251720d4"}], "stats": {"total": 139, "additions": 94, "deletions": 45}, "files": [{"sha": "68c4b7a0728c1e74d01d9879d80c248d65ccf257", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -1,3 +1,9 @@\n+2010-07-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* options.c (gfc_init_options): Enable -fwhole-file by default.\n+\t* interface.c (compare_parameter): Assume a Hollerith constant is\n+\tcompatible with all other argument types.\n+\n 2010-07-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44945"}, {"sha": "4ffe5ee33fb21e70c040adae7ccd21a05b441c70", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -1470,6 +1470,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n     }\n \n   if ((actual->expr_type != EXPR_NULL || actual->ts.type != BT_UNKNOWN)\n+      && actual->ts.type != BT_HOLLERITH\n       && !gfc_compare_types (&formal->ts, &actual->ts))\n     {\n       if (where)"}, {"sha": "5ba2544392a1038b144a6fb9e902b676210a9a07", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -96,7 +96,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.flag_default_real = 0;\n   gfc_option.flag_dollar_ok = 0;\n   gfc_option.flag_underscoring = 1;\n-  gfc_option.flag_whole_file = 0;\n+  gfc_option.flag_whole_file = 1;\n   gfc_option.flag_f2c = 0;\n   gfc_option.flag_second_underscore = -1;\n   gfc_option.flag_implicit_none = 0;"}, {"sha": "32d20170834147bb3029fe7089d3f8518acbd2c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -1,3 +1,26 @@\n+2010-07-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/func_decl_4.f90: Split test into two ...\n+\t* gfortran.dg/func_decl_5.f90: ... parts.\n+\t* gfortran.dg/common_resize_1.f: xfail two warnings (cf. PR 45045).\n+\t* gfortran.dg/bounds_temporaries_1.f90: Add new dg-warning.\n+\t* gfortran.dg/global_references_1.f90: Add new dg-warning.\n+\t* gfortran.dg/generic_actual_arg.f90: Add new dg-warning.\n+\t* gfortran.dg/entry_17.f90: Remove no-longer needed dg-warning.\n+\t* gfortran.dg/used_before_typed_4.f90: Add new dg-warning.\n+\t* gfortran.dg/bounds_check_strlen_1.f90: Add new dg-warning.\n+\t* gfortran.dg/intrinsic_std_1.f90: Split by remove tree dump ...\n+\t* gfortran.dg/intrinsic_std_6.f90: ... and create a dump test.\n+\t* gfortran.dg/sizeof.f90: Make test valid.\n+\t* gfortran.dg/pr20865.f90: Add new dg-error.\n+\t* gfortran.dg/integer_exponentiation_2.f90: Add new dg-warnings.\n+\t* gfortran.dg/g77/19990218-0.f: Ditto.\n+\t* gfortran.dg/g77/19990218-1.f: Ditto.\n+\t* gfortran.dg/g77/970625-2.f: Ditto.\n+\t* gfortran.dg/pr37243.f: Fix function declaration.\n+\t* gfortran.dg/use_only_1.f90: Fix implicit typing.\n+\t* gfortran.dg/loc_1.f90: Fix pointer datatype.\n+\n 2010-07-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44945"}, {"sha": "7ea4a89a1018e28e400eb13cd65f1e28fec99ba7", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_1.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -12,7 +12,7 @@ END SUBROUTINE test\n \n PROGRAM main\n   IMPLICIT NONE\n-  CALL test ('abc') ! String is too short.\n+  CALL test ('abc') ! { dg-warning \"Character length of actual argument shorter\" }\n END PROGRAM main\n \n ! { dg-output \"shorter than the declared one for dummy argument 'str' \\\\(3/5\\\\)\" }"}, {"sha": "32bb265c130e0c772becc8f03927f61d7ab7202f", "filename": "gcc/testsuite/gfortran.dg/bounds_temporaries_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_temporaries_1.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -22,7 +22,7 @@ end subroutine gfcbug34\n ! This is PR25669\n subroutine foo (a)\n   real a(*)\n-  call bar (a, LBOUND(a),2)\n+  call bar (a, LBOUND(a),2) ! { dg-warning \"Rank mismatch in argument\" }\n end subroutine foo\n subroutine bar (b, i, j)\n   real b(i:j)"}, {"sha": "a94c1bc0c6a74e330918f2913f172584f5523bc8", "filename": "gcc/testsuite/gfortran.dg/common_resize_1.f", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_resize_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_resize_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_resize_1.f?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -49,14 +49,15 @@ subroutine prtal\n      7 vy5(lnv),vy6(lnv),vy7(lnv),vy8(lnv),\r\n      8 vz1(lnv),vz2(lnv),vz3(lnv),vz4(lnv),\r\n      9 vz5(lnv),vz6(lnv),vz7(lnv),vz8(lnv)\r\n-      common/aux32/    ! { dg-warning \"shall be of the same size\" }\r\n+                       ! XFAILed here and below because of PRs 45045 and 45044\r\n+      common/aux32/    ! { dg-warning \"shall be of the same size\" \"\" { xfail *-*-*} }\r\n      a a17(lnv),a28(lnv),dett(lnv),\r\n      1 aj1(lnv),aj2(lnv),aj3(lnv),aj4(lnv),\r\n      2 aj5(lnv),aj6(lnv),aj7(lnv),aj8(lnv),\r\n      3 aj9(lnv),x17(lnv),x28(lnv),x35(lnv),\r\n      4 x46(lnv),y17(lnv),y28(lnv),y35(lnv),\r\n      5 y46(lnv),z17(lnv),z28(lnv),z35(lnv),z46(lnv)\r\n-      common/aux33/    ! { dg-warning \"shall be of the same size\" }\r\n+      common/aux33/    ! { dg-warning \"shall be of the same size\" \"\" { xfail *-*-*} }\r\n      a ix1(lnv),ix2(lnv),ix3(lnv),ix4(lnv),ix5(lnv),\r\n      1             ix6(lnv),ix7(lnv),ix8(lnv),mxt(lnv),nmel\r\n       common/aux36/lft,llt\r"}, {"sha": "b4e91c2a8eea42977222854837a8b61fe165b20e", "filename": "gcc/testsuite/gfortran.dg/entry_17.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_17.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -24,7 +24,7 @@ function test3() ! { dg-warning \"Obsolescent feature\" }\n   return\n entry bar3()\n   bar3 = \"\"\n-end function test3 ! { dg-warning \"Obsolescent feature\" }\n+end function test3\n \n function test4(n) ! { dg-error \"returning variables of different string lengths\" }\n   integer  :: n\n@@ -52,4 +52,4 @@ function test6() ! { dg-warning \"Obsolescent feature|returning variables of diff\n   return\n entry bar6()\n   bar6 = \"\"\n-end function test6 ! { dg-warning \"Obsolescent feature\" }\n+end function test6"}, {"sha": "edc6c7e25c77cafbd276407fc90f64836c895494", "filename": "gcc/testsuite/gfortran.dg/func_decl_4.f90", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_4.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -3,13 +3,18 @@\n !\n ! Functions shall not have an initializer.\n !\n+! Due to -fwhole-file, the function declaration\n+! warnings come before the init warnings; thus\n+! the warning for the WRONG lines have been moved to\n+! func_decl_5.f90\n+!\n \n-function f1()                      ! { dg-error \"cannot have an initializer\" }\n-  integer :: f1 = 42\n+function f1()\n+  integer :: f1 = 42 ! WRONG, see  func_decl_5.f90\n end function\n \n-function f2() RESULT (r)           ! { dg-error \"cannot have an initializer\" }\n-  integer :: r = 42\n+function f2() RESULT (r)\n+  integer :: r = 42 ! WRONG, see func_decl_5.f90\n end function\n \n function f3() RESULT (f3)          ! { dg-error \"must be different than function name\" }"}, {"sha": "57bb638411020c25101ad5aa848cb45f052adc15", "filename": "gcc/testsuite/gfortran.dg/g77/19990218-0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990218-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990218-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990218-0.f?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -2,7 +2,7 @@\n         program test\n         double precision a,b,c\n         data a,b/1.0d-46,1.0d0/\n-        c=fun(a,b)\n+        c=fun(a,b) ! { dg-error \"Return type mismatch of function\" }\n         print*,'in main: fun=',c\n         end\n         double precision function fun(a,b)"}, {"sha": "8506e4fe14800ecf8b42bc68fe6a5d3ad05cbc4b", "filename": "gcc/testsuite/gfortran.dg/g77/19990218-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990218-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990218-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990218-1.f?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -20,6 +20,6 @@ double precision function fun(a,b)\n         program test\n         double precision a,b,c\n         data a,b/1.0d-46,1.0d0/\n-        c=fun(a,b)\n+        c=fun(a,b) ! { dg-error \"Return type mismatch of function\" }\n         print*,'in main: fun=',c\n         end"}, {"sha": "19bd096815a96fae15c1923b98bb611f4a64e1f6", "filename": "gcc/testsuite/gfortran.dg/g77/970625-2.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970625-2.f?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -40,7 +40,7 @@ PROGRAM SUBROUTINE\n          PROGRAM = THEN - IF\n          ELSE IF = THEN .GT. IF\n          IF (THEN.GT.REAL) THEN\n-            CALL FUNCTION PROGRAM (ELSE IF, GO TO PROGRAM, THEN)\n+            CALL FUNCTION PROGRAM (ELSE IF, GO TO PROGRAM, THEN) ! { dg-warning \"Type mismatch in argument\" }\n          ELSE IF (ELSE IF) THEN\n             REAL = THEN + END DO\n          END IF"}, {"sha": "e0b36a010364535d571e3c0334cf5e4dc42cb782", "filename": "gcc/testsuite/gfortran.dg/generic_actual_arg.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_actual_arg.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_actual_arg.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_actual_arg.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -37,7 +37,7 @@ END MODULE TEST2\n USE TEST2\n CALL F(CALCULATION)  ! { dg-error \"GENERIC procedure\" } \n \n-CALL F(CALCULATION2) ! OK because there is a same name specific \n+CALL F(CALCULATION2) ! OK because there is a same name specific, but: ! { dg-warning \"More actual than formal arguments\" }\n END\n \n SUBROUTINE F()"}, {"sha": "d241aca1b5378a958849d9edaf899d177abb2ad7", "filename": "gcc/testsuite/gfortran.dg/global_references_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fglobal_references_1.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -32,11 +32,11 @@ function h(x)       ! { dg-error \"is already being used as a FUNCTION\" }\n end function h\n \n SUBROUTINE TT()\n-  CHARACTER(LEN=10), EXTERNAL :: j\n+  CHARACTER(LEN=10), EXTERNAL :: j ! { dg-warning \"Return type mismatch\" }\n   CHARACTER(LEN=10)          :: T\n ! PR20881=========================================================== \n ! Error only appears once but testsuite associates with both lines.\n-  T = j () ! { dg-error \"is already being used as a FUNCTION\" }\n+  T = j (1.0) ! { dg-error \"is already being used as a SUBROUTINE\" }\n   print *, T\n END SUBROUTINE TT\n \n@@ -78,7 +78,7 @@ end SUBROUTINE f\n ! Lahey - 2636-S: \"SOURCE.F90\", line 81:\n ! Subroutine 'j' is previously referenced as a function in 'line 39'.\n \n-SUBROUTINE j (x)    ! { dg-error \"is already being used as a FUNCTION\" }\n+SUBROUTINE j (x)    ! { dg-error \"is already being used as a SUBROUTINE\" }\n   integer a(10)\n   common /bar/ a    ! Global entity foo\n   real x"}, {"sha": "d55f70c9a95b8cfc3a16c74291f95b6805cd17cd", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_2.f90", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_2.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -139,16 +139,16 @@ subroutine foo(a)\n   call gee_i(i**(-huge(0_4)))\n   call gee_i(i**(-huge(0_4)-1_4))\n \n-  call gee_i(i**0_8)\n-  call gee_i(i**1_8)\n-  call gee_i(i**2_8)\n-  call gee_i(i**3_8)\n-  call gee_i(i**(-1_8))\n-  call gee_i(i**(-2_8))\n-  call gee_i(i**(-3_8))\n-  call gee_i(i**huge(0_8))\n-  call gee_i(i**(-huge(0_8)))\n-  call gee_i(i**(-huge(0_8)-1_8))\n+  call gee_i(i**0_8) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**1_8) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**2_8) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**3_8) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**(-1_8)) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**(-2_8)) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**(-3_8)) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**huge(0_8)) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**(-huge(0_8))) ! { dg-warning \"Type mismatch in argument\" }\n+  call gee_i(i**(-huge(0_8)-1_8)) ! { dg-warning \"Type mismatch in argument\" }\n \n   ! Real\n   call gee_r(a**0_1)"}, {"sha": "ac8649bbc627465e62672514a11282dee2abd95e", "filename": "gcc/testsuite/gfortran.dg/intrinsic_std_1.f90", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_std_1.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -1,5 +1,9 @@\n ! { dg-do compile }\n-! { dg-options \"-std=f95 -Wintrinsics-std -fdump-tree-original\" }\n+! { dg-options \"-std=f95 -Wintrinsics-std\" }\n+\n+!\n+! See intrinsic_std_6.f90 for the dump check.\n+!\n \n ! PR fortran/33141\n ! Check for the expected behaviour when an intrinsic function/subroutine is\n@@ -32,18 +36,12 @@ END SUBROUTINE implicit_type\n \n SUBROUTINE specification_expression\n   CHARACTER(KIND=selected_char_kind(\"ascii\")) :: x\n-! { dg-error \"must be an intrinsic function\" \"\" { target \"*-*-*\" } 34 }\n-! { dg-warning \"Fortran 2003\" \"\" { target \"*-*-*\" } 34 }\n+! { dg-error \"must be an intrinsic function\" \"\" { target \"*-*-*\" } 38 }\n+! { dg-warning \"Fortran 2003\" \"\" { target \"*-*-*\" } 38 }\n END SUBROUTINE specification_expression\n \n SUBROUTINE intrinsic_decl\n   IMPLICIT NONE\n   INTRINSIC :: atanh ! { dg-error \"Fortran 2008\" }\n   INTRINSIC :: abort ! { dg-error \"extension\" }\n END SUBROUTINE intrinsic_decl\n-\n-! Scan that really external functions are called.\n-! { dg-final { scan-tree-dump \" abort \" \"original\" } }\n-! { dg-final { scan-tree-dump \" asinh \" \"original\" } }\n-! { dg-final { scan-tree-dump \" acosh \" \"original\" } }\n-! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "2c070dfb1bbc35f87d4e02312b47b5de882775da", "filename": "gcc/testsuite/gfortran.dg/loc_1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Floc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Floc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Floc_1.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -17,9 +17,10 @@ subroutine fn\n end subroutine fn\n \n subroutine foo (ii)\n+  use iso_c_binding, only: c_intptr_t\n   common /targ/targ\n   integer targ(10)\n-  integer ii\n+  integer(c_intptr_t) ii\n   targ(2) = ii\n end subroutine foo\n "}, {"sha": "e99eb0bedbfd8e5bc6cdf5063c5a3ae40fc2a385", "filename": "gcc/testsuite/gfortran.dg/pr20865.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20865.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20865.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr20865.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -8,5 +8,5 @@ subroutine tt(j)\n \n   integer :: i, st\n   st(i) = (i*i+2)\n-  call tt(st) ! { dg-error \"Statement function .* is not allowed as an actual argument\" }\n+  call tt(st) ! { dg-error \"Statement function .* is not allowed as an actual argument|Invalid procedure argument\" }\n   end"}, {"sha": "0a606ad77071727a37de254ea5eb2757624ef7ff", "filename": "gcc/testsuite/gfortran.dg/pr37243.f", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr37243.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr37243.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr37243.f?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -53,10 +53,13 @@ program main\n       call schmd(V, 1, 18, 18)\n       end\n \n-      subroutine DAXPY\n+      subroutine DAXPY(N,D,V,M,W,L)\n+      INTEGER :: N, M, L\n+      DOUBLE PRECISION D, V(1,1), W(1,1)\n       end\n \n-      FUNCTION DDOT ()\n-      DOUBLE PRECISION DDOT\n+      FUNCTION DDOT (N,V,M,W,L)\n+      INTEGER :: N, M, L\n+      DOUBLE PRECISION DDOT, V(1,1), W(1,1)\n       DDOT = 1\n       end"}, {"sha": "fbe6b868fb0e200f606d39cf030fcb1ec21fac66", "filename": "gcc/testsuite/gfortran.dg/sizeof.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -82,7 +82,7 @@ subroutine check_derived ()\n        call abort\n end subroutine check_derived\n \n-call check_int ()\n-call check_real ()\n+call check_int (1)\n+call check_real (1.0, (/1.0, 2.0, 3.0, 4.0, 5.0/))\n call check_derived ()\n end"}, {"sha": "e0132438416641e9e25b6e2958f54f71e62d64aa", "filename": "gcc/testsuite/gfortran.dg/use_only_1.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_only_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_only_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_only_1.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -73,6 +73,7 @@ subroutine test2  ! Test the fix applies to generic interfaces\n     USE xmod, ONLY: xfoobar_renamed => xfoobar\n     USE ymod, ONLY: yfoobar_renamed => yfoobar\n     USE ymod\n+    implicit integer(4) (a-z)\n     if (xfoobar_renamed (42) == xfoobar ()) call abort ()\n     if (yfoobar_renamed (42) == yfoobar ()) call abort ()\n   end subroutine"}, {"sha": "ff8a1fc2970e69753b33f1567c28e40d4cf7153e", "filename": "gcc/testsuite/gfortran.dg/used_before_typed_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_4.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -22,5 +22,5 @@ END SUBROUTINE test\n PROGRAM main\n   IMPLICIT NONE\n   INTEGER :: arr1(42), arr2(42)\n-  CALL test (3, arr1, 2, arr2)\n+  CALL test (3, arr1, 2, arr2) ! { dg-warning \"Type mismatch in argument\" }\n END PROGRAM main"}, {"sha": "3ca2ac4e80be832f48e524c7284b23a62572f7f4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -1,3 +1,8 @@\n+2010-07-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* testsuite/libgomp.fortran/appendix-a/a.28.5.f90: Add -w to\n+\tsilence -fwhole-file warning.\n+\n 2010-07-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.tgt (*-*-solaris2.[56]*): Removed."}, {"sha": "08de997f8c48f1e2af109179d201fad3be21e583", "filename": "libgomp/testsuite/libgomp.fortran/appendix-a/a.28.5.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df161b697cfa29a387deeea64c57e3d8512edbe3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fappendix-a%2Fa.28.5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df161b697cfa29a387deeea64c57e3d8512edbe3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fappendix-a%2Fa.28.5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fappendix-a%2Fa.28.5.f90?ref=df161b697cfa29a387deeea64c57e3d8512edbe3", "patch": "@@ -1,4 +1,9 @@\n ! { dg-do compile }\n+! { dg-options \"-w\" }\n+!\n+! \"-w\" added as libgomp/testsuite seemingly cannot parse with\n+! dg-warning Fortran's output. Fortran warns for \"call sub1(a)\"\n+! that there is a \"Rank mismatch in argument 'x'\".\n \n       SUBROUTINE SUB1(X)\n         DIMENSION X(10)"}]}