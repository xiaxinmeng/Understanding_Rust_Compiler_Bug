{"sha": "c292cfe539cd7c060caad826d362ed5e845bfbef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5MmNmZTUzOWNkN2MwNjBjYWFkODI2ZDM2MmVkNWU4NDViZmJlZg==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-01-15T12:23:40Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-01-21T15:54:44Z"}, "message": "[AArch64] PR92424: Fix -fpatchable-function-entry=N,M with BTI\n\nThis is a workaround that emits a BTI after the function label if that\nis followed by a patch area. We try to remove the BTI that follows the\npatch area (this may fail e.g. if the first instruction is a PACIASP).\n\nSo before this commit -fpatchable-function-entry=3,1 with bti generates\n\n    .section __patchable_function_entries\n    .8byte .LPFE\n    .text\n  .LPFE:\n    nop\n  foo:\n    nop\n    nop\n    bti c // or paciasp\n    ...\n\nand after this commit\n\n    .section __patchable_function_entries\n    .8byte .LPFE\n    .text\n  .LPFE:\n    nop\n  foo:\n    bti c\n    nop\n    nop\n    // may be paciasp\n    ...\n\nand with -fpatchable-function-entry=1 (M=0) the code now is\n\n  foo:\n    bti c\n    .section __patchable_function_entries\n    .8byte .LPFE\n    .text\n  .LPFE:\n    nop\n    // may be paciasp\n    ...\n\nThere is a new bti insn in the middle of the patchable area users need\nto be aware of unless M=0 (patch area is after the new bti) or M=N\n(patch area is before the label, no new bti). Note: bti is not added to\nall functions consistently (it can be turned off per function using a\ntarget attribute or the compiler may detect that the function is never\ncalled indirectly), so if bti is inserted in the middle of a patch area\nthen user code needs to deal with detecting it.\n\nTested on aarch64-none-linux-gnu.\n\ngcc/ChangeLog:\n\n\tPR target/92424\n\t* config/aarch64/aarch64.c (aarch64_declare_function_name): Set\n\tcfun->machine->label_is_assembled.\n\t(aarch64_print_patchable_function_entry): New.\n\t(TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY): Define.\n\t* config/aarch64/aarch64.h (struct machine_function): New field,\n\tlabel_is_assembled.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/92424\n\t* gcc.target/aarch64/pr92424-1.c: New test.\n\t* gcc.target/aarch64/pr92424-2.c: New test.\n\t* gcc.target/aarch64/pr92424-3.c: New test.", "tree": {"sha": "dba81b6eb7a852688dedbc8b11da1da2b06d128f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba81b6eb7a852688dedbc8b11da1da2b06d128f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c292cfe539cd7c060caad826d362ed5e845bfbef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c292cfe539cd7c060caad826d362ed5e845bfbef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c292cfe539cd7c060caad826d362ed5e845bfbef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c292cfe539cd7c060caad826d362ed5e845bfbef/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65be83b5ac0410a5e64c648c36aaf4bd10d09bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65be83b5ac0410a5e64c648c36aaf4bd10d09bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65be83b5ac0410a5e64c648c36aaf4bd10d09bf2"}], "stats": {"total": 195, "additions": 195, "deletions": 0}, "files": [{"sha": "3b7df184ded353cc2e626f83f23e18f7b2e47e63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -1,3 +1,13 @@\n+2020-01-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/92424\n+\t* config/aarch64/aarch64.c (aarch64_declare_function_name): Set\n+\tcfun->machine->label_is_assembled.\n+\t(aarch64_print_patchable_function_entry): New.\n+\t(TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY): Define.\n+\t* config/aarch64/aarch64.h (struct machine_function): New field,\n+\tlabel_is_assembled.\n+\n 2020-01-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR ipa/93315"}, {"sha": "ef037e226a78750939ac23fbe2d22929f188c65e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -18123,6 +18123,34 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   /* Don't forget the type directive for ELF.  */\n   ASM_OUTPUT_TYPE_DIRECTIVE (stream, name, \"function\");\n   ASM_OUTPUT_LABEL (stream, name);\n+\n+  cfun->machine->label_is_assembled = true;\n+}\n+\n+/* Implement PRINT_PATCHABLE_FUNCTION_ENTRY.  Check if the patch area is after\n+   the function label and emit a BTI if necessary.  */\n+\n+void\n+aarch64_print_patchable_function_entry (FILE *file,\n+\t\t\t\t\tunsigned HOST_WIDE_INT patch_area_size,\n+\t\t\t\t\tbool record_p)\n+{\n+  if (cfun->machine->label_is_assembled\n+      && aarch64_bti_enabled ()\n+      && !cgraph_node::get (cfun->decl)->only_called_directly_p ())\n+    {\n+      /* Remove the BTI that follows the patch area and insert a new BTI\n+\t before the patch area right after the function label.  */\n+      rtx_insn *insn = next_real_nondebug_insn (get_insns ());\n+      if (insn\n+\t  && INSN_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+\t  && XINT (PATTERN (insn), 1) == UNSPECV_BTI_C)\n+\tdelete_insn (insn);\n+      asm_fprintf (file, \"\\thint\\t34 // bti c\\n\");\n+    }\n+\n+  default_print_patchable_function_entry (file, patch_area_size, record_p);\n }\n \n /* Implement ASM_OUTPUT_DEF_FROM_DECLS.  Output .variant_pcs for aliases.  */\n@@ -21970,6 +21998,9 @@ aarch64_run_selftests (void)\n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE aarch64_asm_trampoline_template\n \n+#undef TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY\n+#define TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY aarch64_print_patchable_function_entry\n+\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST aarch64_build_builtin_va_list\n "}, {"sha": "297d197297e3dafb850587466850db4539187c6b", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -842,6 +842,7 @@ typedef struct GTY (()) machine_function\n   struct aarch64_frame frame;\n   /* One entry for each hard register.  */\n   bool reg_is_wrapped_separately[LAST_SAVED_REGNUM];\n+  bool label_is_assembled;\n } machine_function;\n #endif\n "}, {"sha": "2bb1d525d17ee0f23b62a0ad4d4f8fdfeb972860", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -1,3 +1,10 @@\n+2020-01-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/92424\n+\t* gcc.target/aarch64/pr92424-1.c: New test.\n+\t* gcc.target/aarch64/pr92424-2.c: New test.\n+\t* gcc.target/aarch64/pr92424-3.c: New test.\n+\n 2020-01-21  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c: Use require"}, {"sha": "c413a2c306e2808854f560e8a904fcbb4594b343", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-1.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-1.c?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/* Note: this test only checks the instructions in the function bodies,\n+   not the placement of the patch label or nops before the futncion.  */\n+\n+/*\n+**f10_none:\n+**\tnop\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=none\"),\n+\t\tpatchable_function_entry (1, 0)))\n+f10_none ()\n+{\n+}\n+\n+/*\n+**f10_pac:\n+**\thint\t34 // bti c\n+**\tnop\n+**\thint\t25 // paciasp\n+**\thint\t29 // autiasp\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=bti+pac-ret+leaf\"),\n+\t\tpatchable_function_entry (1, 0)))\n+f10_pac ()\n+{\n+}\n+\n+/*\n+**f10_bti:\n+**\thint\t34 // bti c\n+**\tnop\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=bti\"),\n+\t\tpatchable_function_entry (1, 0)))\n+f10_bti ()\n+{\n+}\n+\n+/*\n+**f11_none:\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=none\"),\n+\t\tpatchable_function_entry (1, 1)))\n+f11_none ()\n+{\n+}\n+\n+/*\n+**f11_pac:\n+**\thint\t25 // paciasp\n+**\thint\t29 // autiasp\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=bti+pac-ret+leaf\"),\n+\t\tpatchable_function_entry (1, 1)))\n+f11_pac ()\n+{\n+}\n+\n+/*\n+**f11_bti:\n+**\thint\t34 // bti c\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=bti\"),\n+\t\tpatchable_function_entry (1, 1)))\n+f11_bti ()\n+{\n+}\n+\n+/*\n+**f21_none:\n+**\tnop\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=none\"),\n+\t\tpatchable_function_entry (2, 1)))\n+f21_none ()\n+{\n+}\n+\n+/*\n+**f21_pac:\n+**\thint\t34 // bti c\n+**\tnop\n+**\thint\t25 // paciasp\n+**\thint\t29 // autiasp\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=bti+pac-ret+leaf\"),\n+\t\tpatchable_function_entry (2, 1)))\n+f21_pac ()\n+{\n+}\n+\n+/*\n+**f21_bti:\n+**\thint\t34 // bti c\n+**\tnop\n+**\tret\n+*/\n+void\n+__attribute__ ((target(\"branch-protection=bti\"),\n+\t\tpatchable_function_entry (2, 1)))\n+f21_bti ()\n+{\n+}"}, {"sha": "0e75657a15371533c8d75dbb3a730b81ea6e67a0", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-O1\" } */\n+\n+/* Test the placement of the .LPFE1 label.  */\n+\n+void\n+__attribute__ ((target(\"branch-protection=bti\"),\n+\t\tpatchable_function_entry (1, 0)))\n+f10_bti ()\n+{\n+}\n+/* { dg-final { scan-assembler \"f10_bti:\\n\\thint\\t34 // bti c\\n.*\\.LPFE1:\\n\\tnop\\n.*\\tret\\n\" } } */"}, {"sha": "0a1f74d4096220ac69dec0886bbe4f6c5d174378", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c292cfe539cd7c060caad826d362ed5e845bfbef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c?ref=c292cfe539cd7c060caad826d362ed5e845bfbef", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-O1\" } */\n+\n+/* Test the placement of the .LPFE1 label.  */\n+\n+void\n+__attribute__ ((target(\"branch-protection=bti+pac-ret+leaf\"),\n+\t\tpatchable_function_entry (1, 0)))\n+f10_pac ()\n+{\n+}\n+/* { dg-final { scan-assembler \"f10_pac:\\n\\thint\\t34 // bti c\\n.*\\.LPFE1:\\n\\tnop\\n.*\\thint\\t25 // paciasp\\n.*\\thint\\t29 // autiasp\\n.*\\tret\\n\" } } */"}]}