{"sha": "b021b385661c7d6db34ef69e9e0cb89677b54ef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyMWIzODU2NjFjN2Q2ZGIzNGVmNjllOWUwY2I4OTY3N2I1NGVmNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-12-15T22:35:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-15T22:35:51Z"}, "message": "re PR middle-end/36550 (Wrong \"may be used uninitialized\" warning (conditional PHIs))\n\n\tPR tree-optimization/36550\n\t* tree-ssa-threadupdate.c (count_stmts_and_phis_in_block): New.\n\t(mark_threaded_blocks): Rewrite code to avoid block copying when\n\toptimizing for size.  Don't pessimize blocks which will be\n\tcopied, but all the statements will be dead.\n\n\tPR tree-optimization/36550\n\t* gcc.dg/tree-ssa/pr36550.c: New test.\n\nFrom-SVN: r255731", "tree": {"sha": "1ec9080b51eb1ab9c5076a5080fe7d4d67b53e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ec9080b51eb1ab9c5076a5080fe7d4d67b53e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b021b385661c7d6db34ef69e9e0cb89677b54ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b021b385661c7d6db34ef69e9e0cb89677b54ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b021b385661c7d6db34ef69e9e0cb89677b54ef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b021b385661c7d6db34ef69e9e0cb89677b54ef4/comments", "author": null, "committer": null, "parents": [{"sha": "5806e0622de3356ae291a74a4c0d4c2e0af4c0d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5806e0622de3356ae291a74a4c0d4c2e0af4c0d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5806e0622de3356ae291a74a4c0d4c2e0af4c0d6"}], "stats": {"total": 122, "additions": 104, "deletions": 18}, "files": [{"sha": "4528b6db5f2e6ff854826c2f7474f4470b67f5e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b021b385661c7d6db34ef69e9e0cb89677b54ef4", "patch": "@@ -1,3 +1,11 @@\n+2017-12-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/36550\n+\t* tree-ssa-threadupdate.c (count_stmts_and_phis_in_block): New.\n+\t(mark_threaded_blocks): Rewrite code to avoid block copying when\n+\toptimizing for size.  Don't pessimize blocks which will be\n+\tcopied, but all the statements will be dead.\n+\n 2017-12-15  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR tree-optimization/81165"}, {"sha": "5c91661c71b0e8775541b6845140dbf2d83081d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b021b385661c7d6db34ef69e9e0cb89677b54ef4", "patch": "@@ -1,3 +1,8 @@\n+2017-12-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/36550\n+\t* gcc.dg/tree-ssa/pr36550.c: New test.\n+\n 2017-12-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/81165"}, {"sha": "3eda5081c9bf1ff891dbd53ff95b8a95b2ec7eb6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr36550.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36550.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36550.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36550.c?ref=b021b385661c7d6db34ef69e9e0cb89677b54ef4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -Wuninitialized\" } */\n+void bail(void) __attribute__((noreturn));\n+unsigned once(void);\n+int pr(char**argv)\n+{\n+\tchar *bug;\n+\tunsigned check = once();\n+\tif (check) {\n+\t\tif (*argv)\n+\t\t\tbug = *++argv;\n+\t} else {\n+\t\tbug = *argv++;\n+\t\tif (!*argv)\n+\t\t\tbail();\n+\t}\n+\t/* now bug is set except if (check && !*argv) */\n+\tif (check) {\n+\t\tif (!*argv)\n+\t\t\treturn 0;\n+\t}\n+\t/* if we ever get here then bug is set */\n+\treturn *bug != 'X';\n+}\n+"}, {"sha": "7b823d130fac7519d6f264d3065bc1f0d269f7b7", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 66, "deletions": 18, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b021b385661c7d6db34ef69e9e0cb89677b54ef4/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=b021b385661c7d6db34ef69e9e0cb89677b54ef4", "patch": "@@ -1737,6 +1737,31 @@ phi_args_equal_on_edges (edge e1, edge e2)\n   return true;\n }\n \n+/* Return the number of non-debug statements and non-virtual PHIs in a\n+   block.  */\n+\n+static unsigned int\n+count_stmts_and_phis_in_block (basic_block bb)\n+{\n+  unsigned int num_stmts = 0;\n+\n+  gphi_iterator gpi;\n+  for (gpi = gsi_start_phis (bb); !gsi_end_p (gpi); gsi_next (&gpi))\n+    if (!virtual_operand_p (PHI_RESULT (gpi.phi ())))\n+      num_stmts++;\n+\n+  gimple_stmt_iterator gsi;\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      if (!is_gimple_debug (stmt))\n+        num_stmts++;\n+    }\n+\n+  return num_stmts;\n+}\n+\n+\n /* Walk through the registered jump threads and convert them into a\n    form convenient for this pass.\n \n@@ -1856,28 +1881,51 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t}\n     }\n \n-  /* If optimizing for size, only thread through block if we don't have\n-     to duplicate it or it's an otherwise empty redirection block.  */\n+  /* When optimizing for size, prune all thread paths where statement\n+     duplication is necessary.\n+\n+     We walk the jump thread path looking for copied blocks.  There's\n+     two types of copied blocks.\n+\n+       EDGE_COPY_SRC_JOINER_BLOCK is always copied and thus we will\n+       cancel the jump threading request when optimizing for size.\n+\n+       EDGE_COPY_SRC_BLOCK which is copied, but some of its statements\n+       will be killed by threading.  If threading does not kill all of\n+       its statements, then we should cancel the jump threading request\n+       when optimizing for size.  */\n   if (optimize_function_for_size_p (cfun))\n     {\n       EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, bi)\n \t{\n-\t  bb = BASIC_BLOCK_FOR_FN (cfun, i);\n-\t  if (EDGE_COUNT (bb->preds) > 1\n-\t      && !redirection_block_p (bb))\n-\t    {\n-\t      FOR_EACH_EDGE (e, ei, bb->preds)\n-\t\t{\n-\t\t  if (e->aux)\n-\t\t    {\n-\t\t      vec<jump_thread_edge *> *path = THREAD_PATH (e);\n-\t\t      delete_jump_thread_path (path);\n-\t\t      e->aux = NULL;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t  else\n-\t    bitmap_set_bit (threaded_blocks, i);\n+\t  FOR_EACH_EDGE (e, ei, BASIC_BLOCK_FOR_FN (cfun, i)->preds)\n+\t    if (e->aux)\n+\t      {\n+\t\tvec<jump_thread_edge *> *path = THREAD_PATH (e);\n+\n+\t\tunsigned int j;\n+\t\tfor (j = 1; j < path->length (); j++)\n+\t\t  {\n+\t\t    bb = (*path)[j]->e->src;\n+\t\t    if (redirection_block_p (bb))\n+\t\t      ;\n+\t\t    else if ((*path)[j]->type == EDGE_COPY_SRC_JOINER_BLOCK\n+\t\t\t     || ((*path)[j]->type == EDGE_COPY_SRC_BLOCK\n+\t\t\t         && (count_stmts_and_phis_in_block (bb)\n+\t\t\t\t     != estimate_threading_killed_stmts (bb))))\n+\t\t      break;\n+\t\t  }\n+\n+\t\tif (j != path->length ())\n+\t\t  {\n+\t\t    if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t      dump_jump_thread_path (dump_file, *path, 0);\n+\t\t    delete_jump_thread_path (path);\n+\t\t    e->aux = NULL;\n+\t\t  }\n+\t\telse\n+\t\t  bitmap_set_bit (threaded_blocks, i);\n+\t      }\n \t}\n     }\n   else"}]}