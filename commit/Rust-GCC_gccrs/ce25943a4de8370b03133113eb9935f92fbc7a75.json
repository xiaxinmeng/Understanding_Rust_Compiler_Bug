{"sha": "ce25943a4de8370b03133113eb9935f92fbc7a75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyNTk0M2E0ZGU4MzcwYjAzMTMzMTEzZWI5OTM1ZjkyZmJjN2E3NQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-06-14T01:27:57Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-06-14T01:27:57Z"}, "message": "Fix PR tree-optimization/15979 Fix PR tree-optimization/15981\n\n2004-06-13  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/15979\n\tFix PR tree-optimization/15981\n\t* tree-ssa-pre.c (insert_aux): Fix faulty logic so that we don't\n\ttry to insert values undefined along some path.\n\nFrom-SVN: r83076", "tree": {"sha": "14c168f85c8b4c078f80f0133136eaac2cd75da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14c168f85c8b4c078f80f0133136eaac2cd75da9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce25943a4de8370b03133113eb9935f92fbc7a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce25943a4de8370b03133113eb9935f92fbc7a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce25943a4de8370b03133113eb9935f92fbc7a75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce25943a4de8370b03133113eb9935f92fbc7a75/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd85b0cba676ce5dc076eec5146fd33575db40ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd85b0cba676ce5dc076eec5146fd33575db40ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd85b0cba676ce5dc076eec5146fd33575db40ec"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "a548afb6f30e119219213bb244448108177d9643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce25943a4de8370b03133113eb9935f92fbc7a75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce25943a4de8370b03133113eb9935f92fbc7a75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce25943a4de8370b03133113eb9935f92fbc7a75", "patch": "@@ -1,3 +1,10 @@\n+2004-06-13  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/15979\n+\tFix PR tree-optimization/15981\n+\t* tree-ssa-pre.c (insert_aux): Fix faulty logic so that we don't\n+\ttry to insert values undefined along some path.\n+\n 2004-06-13  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-pre.c (add_to_value): is_gimple_min_invariant things"}, {"sha": "c2853296cf5ad38de630155ea5173d2270b4a6ba", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce25943a4de8370b03133113eb9935f92fbc7a75/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce25943a4de8370b03133113eb9935f92fbc7a75/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ce25943a4de8370b03133113eb9935f92fbc7a75", "patch": "@@ -1279,6 +1279,8 @@ insert_aux (basic_block block)\n \t\t      edge pred;\n \t\t      basic_block bprime;\n \t\t      tree eprime;\n+\t\t      bool cant_insert = false;\n+\n \t\t      val = get_value_handle (node->expr);\n \t\t      if (set_contains_value (PHI_GEN (block), val))\n \t\t\tcontinue; \n@@ -1288,9 +1290,8 @@ insert_aux (basic_block block)\n \t\t\t    fprintf (dump_file, \"Found fully redundant value\\n\");\n \t\t\t  continue;\n \t\t\t}\n-\t\t    \n-\t\t    \n-\t\t       avail = xcalloc (last_basic_block, sizeof (tree));\n+\t\t    \t\t    \n+\t\t      avail = xcalloc (last_basic_block, sizeof (tree));\n \t\t      for (pred = block->pred;\n \t\t\t   pred;\n \t\t\t   pred = pred->pred_next)\n@@ -1301,8 +1302,21 @@ insert_aux (basic_block block)\n \t\t\t  eprime = phi_translate (node->expr,\n \t\t\t\t\t\t  ANTIC_IN (block),\n \t\t\t\t\t\t  bprime, block);\n+\n+\t\t\t  /* eprime will generally only be NULL if the\n+\t\t\t     value of the expression, translated\n+\t\t\t     through the PHI for this predecessor, is\n+\t\t\t     undefined.  If that is the case, we can't\n+\t\t\t     make the expression fully redundant,\n+\t\t\t     because its value is undefined along a\n+\t\t\t     predecessor path.  We can thus break out\n+\t\t\t     early because it doesn't matter what the\n+\t\t\t     rest of the results are.  */\n \t\t\t  if (eprime == NULL)\n-\t\t\t    continue;\n+\t\t\t    {\n+\t\t\t      cant_insert = true;\n+\t\t\t      break;\n+\t\t\t    }\n \n \t\t\t  vprime = get_value_handle (eprime);\n \t\t\t  if (!vprime)\n@@ -1328,7 +1342,7 @@ insert_aux (basic_block block)\n \t\t\t    }\n \t\t\t}\n \n-\t\t      if (!all_same && by_some)\n+\t\t      if (!cant_insert && !all_same && by_some)\n \t\t\t{\n \t\t\t  tree temp;\n \t\t\t  tree type = TREE_TYPE (avail[block->pred->src->index]);"}]}