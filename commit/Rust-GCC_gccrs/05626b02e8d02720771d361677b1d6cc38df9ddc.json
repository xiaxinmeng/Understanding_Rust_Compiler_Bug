{"sha": "05626b02e8d02720771d361677b1d6cc38df9ddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2MjZiMDJlOGQwMjcyMDc3MWQzNjE2NzdiMWQ2Y2MzOGRmOWRkYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-10-11T08:57:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-10-11T08:57:18Z"}, "message": "decl.c (annotate_value): Really test the sign of the value when deciding to build a NEGATE_EXPR.\n\n\t* gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Really test the\n\tsign of the value when deciding to build a NEGATE_EXPR.\n\t<PLUS_EXPR>: Remove redundant line.\n\t<BIT_AND_EXPR>: Do the negation here.\n\nFrom-SVN: r276866", "tree": {"sha": "94c3f94377f4d1e8177698edacad64458991477e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94c3f94377f4d1e8177698edacad64458991477e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05626b02e8d02720771d361677b1d6cc38df9ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05626b02e8d02720771d361677b1d6cc38df9ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05626b02e8d02720771d361677b1d6cc38df9ddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05626b02e8d02720771d361677b1d6cc38df9ddc/comments", "author": null, "committer": null, "parents": [{"sha": "43b60e578393cc58f1d75387b811cc90bc74297b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b60e578393cc58f1d75387b811cc90bc74297b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b60e578393cc58f1d75387b811cc90bc74297b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "792db56748130ef503318dcd422b97aeea81b148", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05626b02e8d02720771d361677b1d6cc38df9ddc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05626b02e8d02720771d361677b1d6cc38df9ddc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=05626b02e8d02720771d361677b1d6cc38df9ddc", "patch": "@@ -1,3 +1,10 @@\n+2019-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Really test the\n+\tsign of the value when deciding to build a NEGATE_EXPR.\n+\t<PLUS_EXPR>: Remove redundant line.\n+\t<BIT_AND_EXPR>: Do the negation here.\n+\n 2019-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (Gigi_Equivalent_Type) <E_Array_Subtype>: New"}, {"sha": "2c5f5732f74cc8b0e5c35b54f11790ffedc8cf73", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05626b02e8d02720771d361677b1d6cc38df9ddc/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05626b02e8d02720771d361677b1d6cc38df9ddc/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=05626b02e8d02720771d361677b1d6cc38df9ddc", "patch": "@@ -8287,9 +8287,8 @@ annotate_value (tree gnu_size)\n     {\n     case INTEGER_CST:\n       /* For negative values, build NEGATE_EXPR of the opposite.  Such values\n-\t can appear for discriminants in expressions for variants.  Note that,\n-\t sizetype being unsigned, we don't directly use tree_int_cst_sgn.  */\n-      if (tree_int_cst_sign_bit (gnu_size))\n+\t can appear for discriminants in expressions for variants.  */\n+      if (tree_int_cst_sgn (gnu_size) < 0)\n \t{\n \t  tree t = wide_int_to_tree (sizetype, -wi::to_wide (gnu_size));\n \t  tcode = Negate_Expr;\n@@ -8367,9 +8366,8 @@ annotate_value (tree gnu_size)\n \t  && tree_int_cst_sign_bit (TREE_OPERAND (gnu_size, 1)))\n \t{\n \t  tcode = Minus_Expr;\n-\t  ops[0] = annotate_value (TREE_OPERAND (gnu_size, 0));\n-\t  wide_int op1 = -wi::to_wide (TREE_OPERAND (gnu_size, 1));\n-\t  ops[1] = annotate_value (wide_int_to_tree (sizetype, op1));\n+\t  wide_int wop1 = -wi::to_wide (TREE_OPERAND (gnu_size, 1));\n+\t  ops[1] = annotate_value (wide_int_to_tree (sizetype, wop1));\n \t  break;\n \t}\n \n@@ -8410,9 +8408,9 @@ annotate_value (tree gnu_size)\n \t Such values can appear in expressions with aligning patterns.  */\n       if (TREE_CODE (TREE_OPERAND (gnu_size, 1)) == INTEGER_CST)\n \t{\n-\t  wide_int op1 = wi::sext (wi::to_wide (TREE_OPERAND (gnu_size, 1)),\n-\t\t\t\t   TYPE_PRECISION (sizetype));\n-\t  ops[1] = annotate_value (wide_int_to_tree (sizetype, op1));\n+\t  wide_int wop1 = -wi::to_wide (TREE_OPERAND (gnu_size, 1));\n+\t  tree op1 = wide_int_to_tree (sizetype, wop1);\n+\t  ops[1] = annotate_value (build1 (NEGATE_EXPR, sizetype, op1));\n \t}\n       break;\n "}]}