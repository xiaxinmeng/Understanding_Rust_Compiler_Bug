{"sha": "7255f3c31130b87e515afec8bf315206b1fb0fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1NWYzYzMxMTMwYjg3ZTUxNWFmZWM4YmYzMTUyMDZiMWZiMGZhMQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-21T14:51:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:51:15Z"}, "message": "[Ada] Placement of pragma Elaboration_Checks\n\nThis patch modifies the semantics of pragma Elaboration_Checks. The pragma\nwas intended to be a configuration pragma, however its placement was never\nverified until now.\n\nThe pragma may appear in the following contexts:\n\n   * Configuration pragmas file\n\n   * Prior to the context clauses of a compilation unit's initial declaration\n\nAny other placement of the pragma will result in a warning and the effects of\nthe offending pragma will be ignored.\n\n------------\n-- Source --\n------------\n\n--  elab_checks_1.adc\n\npragma Elaboration_Checks (Dynamic);\n\n--  elab_checks_2.adc\n\npragma Elaboration_Checks (Dynamic);\npragma Elaboration_Checks (Static);                                  --  Error\n\n--  pack_1.ads\n\npragma Elaboration_Checks (Static);                                  --  OK\n\npackage Pack_1 is\nend Pack_1;\n\n--  pack_2.ads\n\npragma Elaboration_Checks (Static);                                  --  OK\npragma Elaboration_Checks (Static);                                  --  Error\n\npackage Pack_2 is\nend Pack_2;\n\n--  pack_3.ads\n\npackage Pack_3 is\n   procedure Proc;\nend Pack_3;\n\n--  pack_3.adb\n\npragma Elaboration_Checks (Static);                                  --  Error\n\npackage body Pack_3 is\n   procedure Proc is begin null; end Proc;\nend Pack_3;\n\n--  pack_4.ads\n\npackage Pack_4 is\n   procedure Proc;\nend Pack_4;\n\n--  pack_4.adb\n\npackage body Pack_4 is\n   procedure Proc is separate;\nend Pack_4;\n\n--  pack_4-proc.adb\n\npragma Elaboration_Checks (Static);                                  --  Error\n\nseparate (Pack_4)\nprocedure Proc is begin null; end Proc;\n\n--  gen.ads\n\ngeneric\n   with function Called_At_Elaboration return Boolean;\n\npackage Gen is\n   procedure Proc;\nend Gen;\n\n--  gen.adb\n\npackage body Gen is\n   procedure Proc is\n      Obj : constant Boolean := Called_At_Elaboration;\n   begin null; end Proc;\nbegin\n   Proc;\nend Gen;\n\n--  abe_static.ads\n\npragma Elaboration_Checks (Static);\n\nwith Gen;\n\npackage ABE_Static is\n   function ABE return Boolean;\n\n   package Inst_1 is new Gen (ABE);\nend ABE_Static;\n\n--  abe_static.adb\n\npackage body ABE_Static is\n   package Inst_2 is new Gen (ABE);\n\n   package Subunit is\n   end Subunit;\n\n   package body Subunit is separate;\n\n   function ABE return Boolean is\n   begin\n      return True;\n   end ABE;\nend ABE_Static;\n\n--  abe_static-subunit.adb\n\nseparate (ABE_Static)\n\npackage body Subunit is\n   package Inst_3 is new Gen (ABE);\n\n   package Nested_Subunit is\n   end Nested_Subunit;\n\n   package body Nested_Subunit is separate;\nend Subunit;\n\n--  abe_static-subunit-nested_subunit.adb\n\nseparate (ABE_Static.Subunit)\n\npackage body Nested_Subunit is\n   package Inst_4 is new Gen (ABE);\nend Nested_Subunit;\n\n--  abe_static_main.adb\n\nwith ABE_Static;\n\nprocedure ABE_Static_Main is begin null; end ABE_Static_Main;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c pack_1.ads -gnatec=elab_checks_1.adc\n$ gcc -c pack_1.ads -gnatec=elab_checks_2.adc\n$ gcc -c pack_1.ads\n$ gcc -c pack_2.ads\n$ gcc -c pack_3.adb\n$ gcc -c pack_4.adb\n$ gnatmake -q -gnatE abe_static_main.adb\nelab_checks_2.adc:2:01: pragma \"Elaboration_Checks\" duplicates pragma declared\n  at line 1\npack_2.ads:2:01: pragma \"Elaboration_Checks\" duplicates pragma declared at line\n  1\npack_3.adb:1:01: warning: effects of pragma \"Elaboration_Checks\" are ignored\npack_3.adb:1:01: warning: place pragma on initial declaration of library unit\npack_4-proc.adb:1:01: warning: effects of pragma \"Elaboration_Checks\" are\n  ignored\npack_4-proc.adb:1:01: warning: place pragma on initial declaration of library\n  unit\nabe_static.adb:2:04: warning: in instantiation at gen.adb:3\nabe_static.adb:2:04: warning: cannot call \"ABE\" before body seen\nabe_static.adb:2:04: warning: Program_Error may be raised at run time\nabe_static.adb:2:04: warning:   body of unit \"ABE_Static\" elaborated\nabe_static.adb:2:04: warning:   procedure \"Proc\" called at gen.adb:6, instance\n  at line 2\nabe_static.adb:2:04: warning:   function \"ABE\" called at gen.adb:3, instance at\n  line 2\nabe_static.ads:8:04: warning: in instantiation at gen.adb:3\nabe_static.ads:8:04: warning: cannot call \"ABE\" before body seen\nabe_static.ads:8:04: warning: Program_Error may be raised at run time\nabe_static.ads:8:04: warning:   spec of unit \"ABE_Static\" elaborated\nabe_static.ads:8:04: warning:   procedure \"Proc\" called at gen.adb:6, instance\n  at line 8\nabe_static.ads:8:04: warning:   function \"ABE\" called at gen.adb:3, instance at\n  line 8\nabe_static-subunit.adb:4:04: warning: in instantiation at gen.adb:3\nabe_static-subunit.adb:4:04: warning: cannot call \"ABE\" before body seen\nabe_static-subunit.adb:4:04: warning: Program_Error may be raised at run time\nabe_static-subunit.adb:4:04: warning:   body of unit \"ABE_Static\" elaborated\nabe_static-subunit.adb:4:04: warning:   procedure \"Proc\" called at gen.adb:6,\n  instance at line 4\nabe_static-subunit.adb:4:04: warning:   function \"ABE\" called at gen.adb:3,\n  instance at line 4\nabe_static-subunit-nested_subunit.adb:4:04: warning: in instantiation at\n  gen.adb:3\nabe_static-subunit-nested_subunit.adb:4:04: warning: cannot call \"ABE\" before\n  body seen\nabe_static-subunit-nested_subunit.adb:4:04: warning: Program_Error may be\n  raised at run time\nabe_static-subunit-nested_subunit.adb:4:04: warning:   body of unit\n  \"ABE_Static\" elaborated\nabe_static-subunit-nested_subunit.adb:4:04: warning:   procedure \"Proc\" called\n  at gen.adb:6, instance at line 4\nabe_static-subunit-nested_subunit.adb:4:04: warning:   function \"ABE\" called at\n  gen.adb:3, instance at line 4\nwarning: \"abe_static_main.adb\" has dynamic elaboration checks and with's\nwarning:   \"abe_static.ads\" which has static elaboration checks\n\n2018-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Install the elaboration\n\tmodel of the compilation unit spec, if any.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Install the elaboration\n\tmodel of the compilation unit spec, if any.\n\t* sem_ch10.adb (Analyze_Subunit): Install the elaboration model of the\n\tparent compilation unit spec, if any.\n\t* sem_elab.adb (Check_Elaboration_Scenarios): Restore the elaboration\n\tmodel of the main unit.\n\t(Is_Same_Unit): The routine now uses Unit_Entity.\n\t(Is_Subunit): Removed.\n\t(Normalize_Unit): Removed.\n\t(Unit_Entity): New routine.\n\t* sem_prag.adb (Analyze_Pragma): Reimplement the handling of pragma\n\tElaboration_Checks. The analysis now ensures that the pragma appears at\n\tthe configuration level, and on the initial declaration of a unit.\n\tOther placements are either flagged as illegal, or ignored.\n\t(Check_Duplicate_Elaboration_Checks_Pragma): New routine.\n\t(Ignore_Elaboration_Checks_Pragma): New routine.\n\t* sem_util.adb (Install_Elaboration_Model): New routine.\n\t* sem_util.ads (Install_Elaboration_Model): New routine.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update the\n\tdocumentation of pragma Elaboration_Checks.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r260457", "tree": {"sha": "191a03d4f964ef8c51b723431e3d745cf547189b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/191a03d4f964ef8c51b723431e3d745cf547189b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7255f3c31130b87e515afec8bf315206b1fb0fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7255f3c31130b87e515afec8bf315206b1fb0fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7255f3c31130b87e515afec8bf315206b1fb0fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7255f3c31130b87e515afec8bf315206b1fb0fa1/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18c7a4eb877d3c3df5975a3841f76cb05897d1e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c7a4eb877d3c3df5975a3841f76cb05897d1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c7a4eb877d3c3df5975a3841f76cb05897d1e9"}], "stats": {"total": 420, "additions": 351, "deletions": 69}, "files": [{"sha": "4af6ce311fd02e3e107142798957c9253aa0d5f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -1,3 +1,29 @@\n+2018-04-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Install the elaboration\n+\tmodel of the compilation unit spec, if any.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Install the elaboration\n+\tmodel of the compilation unit spec, if any.\n+\t* sem_ch10.adb (Analyze_Subunit): Install the elaboration model of the\n+\tparent compilation unit spec, if any.\n+\t* sem_elab.adb (Check_Elaboration_Scenarios): Restore the elaboration\n+\tmodel of the main unit.\n+\t(Is_Same_Unit): The routine now uses Unit_Entity.\n+\t(Is_Subunit): Removed.\n+\t(Normalize_Unit): Removed.\n+\t(Unit_Entity): New routine.\n+\t* sem_prag.adb (Analyze_Pragma): Reimplement the handling of pragma\n+\tElaboration_Checks. The analysis now ensures that the pragma appears at\n+\tthe configuration level, and on the initial declaration of a unit.\n+\tOther placements are either flagged as illegal, or ignored.\n+\t(Check_Duplicate_Elaboration_Checks_Pragma): New routine.\n+\t(Ignore_Elaboration_Checks_Pragma): New routine.\n+\t* sem_util.adb (Install_Elaboration_Model): New routine.\n+\t* sem_util.ads (Install_Elaboration_Model): New routine.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update the\n+\tdocumentation of pragma Elaboration_Checks.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2018-04-04  Olivier Hainque  <hainque@adacore.com>\n \n \t* libgnat/s-trasym__dwarf.adb (Executable_Name): Return argv[0] instead"}, {"sha": "b39625c39c593238145e06852772581baf823be8", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -1678,18 +1678,23 @@ Syntax:\n   pragma Elaboration_Checks (Dynamic | Static);\n \n \n-This is a configuration pragma that provides control over the\n-elaboration model used by the compilation affected by the\n-pragma.  If the parameter is ``Dynamic``,\n-then the dynamic elaboration\n-model described in the Ada Reference Manual is used, as though\n-the *-gnatE* switch had been specified on the command\n-line.  If the parameter is ``Static``, then the default GNAT static\n-model is used.  This configuration pragma overrides the setting\n-of the command line.  For full details on the elaboration models\n-used by the GNAT compiler, see the chapter on elaboration order handling\n-in the *GNAT User's Guide*.\n+This is a configuration pragma which specifies the elaboration model to be\n+used during compilation. For more information on the elaboration models of\n+GNAT, consult the chapter on elaboration order handling in the *GNAT User's\n+Guide*.\n \n+The pragma may appear in the following contexts:\n+\n+* Configuration pragmas file\n+\n+* Prior to the context clauses of a compilation unit's initial declaration\n+\n+Any other placement of the pragma will result in a warning and the effects of\n+the offending pragma will be ignored.\n+\n+If the pragma argument is ``Dynamic``, then the dynamic elaboration model is in\n+effect. If the pragma argument is ``Static``, then the static elaboration model\n+is in effect.\n \n Pragma Eliminate\n ================"}, {"sha": "f8017d8ed3b9165fb3ba1d8991e1a938d15c5a3f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Jan 10, 2018\n+GNAT Reference Manual , Apr 20, 2018\n \n AdaCore\n \n@@ -3067,17 +3067,29 @@ Syntax:\n pragma Elaboration_Checks (Dynamic | Static);\n @end example\n \n-This is a configuration pragma that provides control over the\n-elaboration model used by the compilation affected by the\n-pragma.  If the parameter is @code{Dynamic},\n-then the dynamic elaboration\n-model described in the Ada Reference Manual is used, as though\n-the @emph{-gnatE} switch had been specified on the command\n-line.  If the parameter is @code{Static}, then the default GNAT static\n-model is used.  This configuration pragma overrides the setting\n-of the command line.  For full details on the elaboration models\n-used by the GNAT compiler, see the chapter on elaboration order handling\n-in the @emph{GNAT User's Guide}.\n+This is a configuration pragma which specifies the elaboration model to be\n+used during compilation. For more information on the elaboration models of\n+GNAT, consult the chapter on elaboration order handling in the @emph{GNAT User's\n+Guide}.\n+\n+The pragma may appear in the following contexts:\n+\n+\n+@itemize *\n+\n+@item \n+Configuration pragmas file\n+\n+@item \n+Prior to the context clauses of a compilation unit's initial declaration\n+@end itemize\n+\n+Any other placement of the pragma will result in a warning and the effects of\n+the offending pragma will be ignored.\n+\n+If the pragma argument is @code{Dynamic}, then the dynamic elaboration model is in\n+effect. If the pragma argument is @code{Static}, then the static elaboration model\n+is in effect.\n \n @node Pragma Eliminate,Pragma Enable_Atomic_Synchronization,Pragma Elaboration_Checks,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-eliminate}@anchor{5b}"}, {"sha": "ac8e2be5bf09a57dc1c25b440f3a3c90bc78b2a2", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -2390,6 +2390,12 @@ package body Sem_Ch10 is\n \n       Install_SPARK_Mode (Saved_SM, Saved_SMP);\n \n+      --  If the subunit is part of a compilation unit which is subject to\n+      --  pragma Elaboration_Checks, set the model specified by the pragma\n+      --  because it applies to all parts of the unit.\n+\n+      Install_Elaboration_Model (Par_Unit);\n+\n       Analyze (Proper_Body (Unit (N)));\n       Remove_Context (N);\n "}, {"sha": "c88721fa28cca30434f666b6fceadf72e17b94e8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -3528,6 +3528,13 @@ package body Sem_Ch6 is\n \n             Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n+            --  If the body completes the initial declaration of a compilation\n+            --  unit which is subject to pragma Elaboration_Checks, set the\n+            --  model specified by the pragma because it applies to all parts\n+            --  of the unit.\n+\n+            Install_Elaboration_Model (Spec_Id);\n+\n             Set_Is_Compilation_Unit (Body_Id, Is_Compilation_Unit (Spec_Id));\n             Set_Is_Child_Unit       (Body_Id, Is_Child_Unit       (Spec_Id));\n \n@@ -3573,6 +3580,12 @@ package body Sem_Ch6 is\n \n                Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n+               --  If the body completes a compilation unit which is subject\n+               --  to pragma Elaboration_Checks, set the model specified by\n+               --  the pragma because it applies to all parts of the unit.\n+\n+               Install_Elaboration_Model (Spec_Id);\n+\n             else\n                Spec_Id := Find_Corresponding_Spec (N);\n \n@@ -3583,6 +3596,12 @@ package body Sem_Ch6 is\n \n                Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n+               --  If the body completes a compilation unit which is subject\n+               --  to pragma Elaboration_Checks, set the model specified by\n+               --  the pragma because it applies to all parts of the unit.\n+\n+               Install_Elaboration_Model (Spec_Id);\n+\n                --  In GNATprove mode, if the body has no previous spec, create\n                --  one so that the inlining machinery can operate properly.\n                --  Transfer aspects, if any, to the new spec, so that they\n@@ -3683,6 +3702,13 @@ package body Sem_Ch6 is\n             --  and expansion are properly marked as Ghost.\n \n             Mark_And_Set_Ghost_Body (N, Spec_Id);\n+\n+            --  If the body completes the initial declaration of a compilation\n+            --  unit which is subject to pragma Elaboration_Checks, set the\n+            --  model specified by the pragma because it applies to all parts\n+            --  of the unit.\n+\n+            Install_Elaboration_Model (Spec_Id);\n          end if;\n       end if;\n "}, {"sha": "b20f77c9547af68b13bdb1f6e2f32d94ab6a028f", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -749,6 +749,12 @@ package body Sem_Ch7 is\n \n       Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n+      --  If the body completes the initial declaration of a compilation unit\n+      --  which is subject to pragma Elaboration_Checks, set the model of the\n+      --  pragma because it applies to all parts of the unit.\n+\n+      Install_Elaboration_Model (Spec_Id);\n+\n       Set_Is_Compilation_Unit (Body_Id, Is_Compilation_Unit (Spec_Id));\n       Style.Check_Identifier (Body_Id, Spec_Id);\n "}, {"sha": "69d46f4f857920d0953ebdd9e386a287c27e5f2d", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 61, "deletions": 43, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -1780,6 +1780,10 @@ package body Sem_Elab is\n    --  suitable elaboration scenarios and process them. State is the current\n    --  state of the Processing phase.\n \n+   function Unit_Entity (Unit_Id : Entity_Id) return Entity_Id;\n+   pragma Inline (Unit_Entity);\n+   --  Return the entity of the initial declaration for unit Unit_Id\n+\n    procedure Update_Elaboration_Scenario (New_N : Node_Id; Old_N : Node_Id);\n    pragma Inline (Update_Elaboration_Scenario);\n    --  Update all relevant internal data structures when scenario Old_N is\n@@ -2341,6 +2345,13 @@ package body Sem_Elab is\n          return;\n       end if;\n \n+      --  Restore the original elaboration model which was in effect when the\n+      --  scenarios were first recorded. The model may be specified by pragma\n+      --  Elaboration_Checks which appears on the initial declaration of the\n+      --  main unit.\n+\n+      Install_Elaboration_Model (Unit_Entity (Cunit_Entity (Main_Unit)));\n+\n       --  Examine the context of the main unit and record all units with prior\n       --  elaboration with respect to it.\n \n@@ -7120,50 +7131,8 @@ package body Sem_Elab is\n      (Unit_1 : Entity_Id;\n       Unit_2 : Entity_Id) return Boolean\n    is\n-      function Is_Subunit (Unit_Id : Entity_Id) return Boolean;\n-      pragma Inline (Is_Subunit);\n-      --  Determine whether unit Unit_Id is a subunit\n-\n-      function Normalize_Unit (Unit_Id : Entity_Id) return Entity_Id;\n-      --  Strip a potential subunit chain ending with unit Unit_Id and return\n-      --  the corresponding spec.\n-\n-      ----------------\n-      -- Is_Subunit --\n-      ----------------\n-\n-      function Is_Subunit (Unit_Id : Entity_Id) return Boolean is\n-      begin\n-         return Nkind (Parent (Unit_Declaration_Node (Unit_Id))) = N_Subunit;\n-      end Is_Subunit;\n-\n-      --------------------\n-      -- Normalize_Unit --\n-      --------------------\n-\n-      function Normalize_Unit (Unit_Id : Entity_Id) return Entity_Id is\n-         Result : Entity_Id;\n-\n-      begin\n-         --  Eliminate a potential chain of subunits to reach to proper body\n-\n-         Result := Unit_Id;\n-         while Present (Result)\n-           and then Result /= Standard_Standard\n-           and then Is_Subunit (Result)\n-         loop\n-            Result := Scope (Result);\n-         end loop;\n-\n-         --  Obtain the entity of the corresponding spec (if any)\n-\n-         return Unique_Entity (Result);\n-      end Normalize_Unit;\n-\n-   --  Start of processing for Is_Same_Unit\n-\n    begin\n-      return Normalize_Unit (Unit_1) = Normalize_Unit (Unit_2);\n+      return Unit_Entity (Unit_1) = Unit_Entity (Unit_2);\n    end Is_Same_Unit;\n \n    -----------------\n@@ -11153,6 +11122,55 @@ package body Sem_Elab is\n       end if;\n    end Traverse_Body;\n \n+   -----------------\n+   -- Unit_Entity --\n+   -----------------\n+\n+   function Unit_Entity (Unit_Id : Entity_Id) return Entity_Id is\n+      function Is_Subunit (Id : Entity_Id) return Boolean;\n+      pragma Inline (Is_Subunit);\n+      --  Determine whether the entity of an initial declaration denotes a\n+      --  subunit.\n+\n+      ----------------\n+      -- Is_Subunit --\n+      ----------------\n+\n+      function Is_Subunit (Id : Entity_Id) return Boolean is\n+         Decl : constant Node_Id := Unit_Declaration_Node (Id);\n+\n+      begin\n+         return\n+           Nkind_In (Decl, N_Generic_Package_Declaration,\n+                           N_Generic_Subprogram_Declaration,\n+                           N_Package_Declaration,\n+                           N_Protected_Type_Declaration,\n+                           N_Subprogram_Declaration,\n+                           N_Task_Type_Declaration)\n+             and then Present (Corresponding_Body (Decl))\n+             and then Nkind (Parent (Unit_Declaration_Node\n+                        (Corresponding_Body (Decl)))) = N_Subunit;\n+      end Is_Subunit;\n+\n+      --  Local variables\n+\n+      Id : Entity_Id;\n+\n+   --  Start of processing for Unit_Entity\n+\n+   begin\n+      Id := Unique_Entity (Unit_Id);\n+\n+      --  Skip all subunits found in the scope chain which ends at the input\n+      --  unit.\n+\n+      while Is_Subunit (Id) loop\n+         Id := Scope (Id);\n+      end loop;\n+\n+      return Id;\n+   end Unit_Entity;\n+\n    ---------------------------------\n    -- Update_Elaboration_Scenario --\n    ---------------------------------"}, {"sha": "11f978a99399a865b652f8dcab8c79872dc6484e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 105, "deletions": 3, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -15267,16 +15267,118 @@ package body Sem_Prag is\n \n          --  pragma Elaboration_Checks (Static | Dynamic);\n \n-         when Pragma_Elaboration_Checks =>\n+         when Pragma_Elaboration_Checks => Elaboration_Checks : declare\n+            procedure Check_Duplicate_Elaboration_Checks_Pragma;\n+            --  Emit an error if the current context list already contains\n+            --  a previous Elaboration_Checks pragma. This routine raises\n+            --  Pragma_Exit if a duplicate is found.\n+\n+            procedure Ignore_Elaboration_Checks_Pragma;\n+            --  Warn that the effects of the pragma are ignored. This routine\n+            --  raises Pragma_Exit.\n+\n+            -----------------------------------------------\n+            -- Check_Duplicate_Elaboration_Checks_Pragma --\n+            -----------------------------------------------\n+\n+            procedure Check_Duplicate_Elaboration_Checks_Pragma is\n+               Item : Node_Id;\n+\n+            begin\n+               Item := Prev (N);\n+               while Present (Item) loop\n+                  if Nkind (Item) = N_Pragma\n+                    and then Pragma_Name (Item) = Name_Elaboration_Checks\n+                  then\n+                     Duplication_Error\n+                       (Prag => N,\n+                        Prev => Item);\n+                     raise Pragma_Exit;\n+                  end if;\n+\n+                  Prev (Item);\n+               end loop;\n+            end Check_Duplicate_Elaboration_Checks_Pragma;\n+\n+            --------------------------------------\n+            -- Ignore_Elaboration_Checks_Pragma --\n+            --------------------------------------\n+\n+            procedure Ignore_Elaboration_Checks_Pragma is\n+            begin\n+               Error_Msg_Name_1 := Pname;\n+               Error_Msg_N (\"??effects of pragma % are ignored\", N);\n+               Error_Msg_N\n+                 (\"\\place pragma on initial declaration of library unit\", N);\n+\n+               raise Pragma_Exit;\n+            end Ignore_Elaboration_Checks_Pragma;\n+\n+            --  Local variables\n+\n+            Context : constant Node_Id := Parent (N);\n+            Unt     : Node_Id;\n+\n+         --  Start of processing for Elaboration_Checks\n+\n+         begin\n             GNAT_Pragma;\n             Check_Arg_Count (1);\n             Check_Arg_Is_One_Of (Arg1, Name_Static, Name_Dynamic);\n \n-            --  Set flag accordingly (ignore attempt at dynamic elaboration\n-            --  checks in SPARK mode).\n+            --  The pragma appears in a configuration file\n+\n+            if No (Context) then\n+               Check_Valid_Configuration_Pragma;\n+               Check_Duplicate_Elaboration_Checks_Pragma;\n+\n+            --  The pragma acts as a configuration pragma in a compilation unit\n+\n+            --    pragma Elaboration_Checks (...);\n+            --    package Pack is ...;\n+\n+            elsif Nkind (Context) = N_Compilation_Unit\n+              and then List_Containing (N) = Context_Items (Context)\n+            then\n+               Check_Valid_Configuration_Pragma;\n+               Check_Duplicate_Elaboration_Checks_Pragma;\n+\n+               Unt := Unit (Context);\n+\n+               --  The pragma must appear on the initial declaration of a unit.\n+               --  If this is not the case, warn that the effects of the pragma\n+               --  are ignored.\n+\n+               if Nkind (Unt) = N_Package_Body then\n+                  Ignore_Elaboration_Checks_Pragma;\n+\n+               --  Check the Acts_As_Spec flag of the compilation units itself\n+               --  to determine whether the subprogram body completes since it\n+               --  has not been analyzed yet. This is safe because compilation\n+               --  units are not overloadable.\n+\n+               elsif Nkind (Unt) = N_Subprogram_Body\n+                 and then not Acts_As_Spec (Context)\n+               then\n+                  Ignore_Elaboration_Checks_Pragma;\n+\n+               elsif Nkind (Unt) = N_Subunit then\n+                  Ignore_Elaboration_Checks_Pragma;\n+               end if;\n+\n+            --  Otherwise the pragma does not appear at the configuration level\n+            --  and is illegal.\n+\n+            else\n+               Pragma_Misplaced;\n+            end if;\n+\n+            --  At this point the pragma is not a duplicate, and appears in the\n+            --  proper context. Set the elaboration model in effect.\n \n             Dynamic_Elaboration_Checks :=\n               Chars (Get_Pragma_Arg (Arg1)) = Name_Dynamic;\n+         end Elaboration_Checks;\n \n          ---------------\n          -- Eliminate --"}, {"sha": "cba7c467af041934628710cab1408338c0a1ca51", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -12583,6 +12583,82 @@ package body Sem_Util is\n       end loop;\n    end Inspect_Deferred_Constant_Completion;\n \n+   -------------------------------\n+   -- Install_Elaboration_Model --\n+   -------------------------------\n+\n+   procedure Install_Elaboration_Model (Unit_Id : Entity_Id) is\n+      function Find_Elaboration_Checks_Pragma (L : List_Id) return Node_Id;\n+      --  Try to find pragma Elaboration_Checks in arbitrary list L. Return\n+      --  Empty if there is no such pragma.\n+\n+      ------------------------------------\n+      -- Find_Elaboration_Checks_Pragma --\n+      ------------------------------------\n+\n+      function Find_Elaboration_Checks_Pragma (L : List_Id) return Node_Id is\n+         Item : Node_Id;\n+\n+      begin\n+         Item := First (L);\n+         while Present (Item) loop\n+            if Nkind (Item) = N_Pragma\n+              and then Pragma_Name (Item) = Name_Elaboration_Checks\n+            then\n+               return Item;\n+            end if;\n+\n+            Next (Item);\n+         end loop;\n+\n+         return Empty;\n+      end Find_Elaboration_Checks_Pragma;\n+\n+      --  Local variables\n+\n+      Args  : List_Id;\n+      Model : Node_Id;\n+      Prag  : Node_Id;\n+      Unit  : Node_Id;\n+\n+   --  Start of processing for Install_Elaboration_Model\n+\n+   begin\n+      --  Nothing to do when the unit does not exist\n+\n+      if No (Unit_Id) then\n+         return;\n+      end if;\n+\n+      Unit := Parent (Unit_Declaration_Node (Unit_Id));\n+\n+      --  Nothing to do when the unit is not a library unit\n+\n+      if Nkind (Unit) /= N_Compilation_Unit then\n+         return;\n+      end if;\n+\n+      Prag := Find_Elaboration_Checks_Pragma (Context_Items (Unit));\n+\n+      --  The compilation unit is subject to pragma Elaboration_Checks. Set the\n+      --  elaboration model as specified by the pragma.\n+\n+      if Present (Prag) then\n+         Args := Pragma_Argument_Associations (Prag);\n+\n+         --  Guard against an illegal pragma. The sole argument must be an\n+         --  identifier which specifies either Dynamic or Static model.\n+\n+         if Present (Args) then\n+            Model := Get_Pragma_Arg (First (Args));\n+\n+            if Nkind (Model) = N_Identifier then\n+               Dynamic_Elaboration_Checks := Chars (Model) = Name_Dynamic;\n+            end if;\n+         end if;\n+      end if;\n+   end Install_Elaboration_Model;\n+\n    -----------------------------\n    -- Install_Generic_Formals --\n    -----------------------------"}, {"sha": "a9908516a9f324da4b76b4d3f8ded40a22be4025", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7255f3c31130b87e515afec8bf315206b1fb0fa1/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7255f3c31130b87e515afec8bf315206b1fb0fa1", "patch": "@@ -1453,6 +1453,11 @@ package Sem_Util is\n    --  whether they have been completed by a full constant declaration or an\n    --  Import pragma. Emit the error message if that is not the case.\n \n+   procedure Install_Elaboration_Model (Unit_Id : Entity_Id);\n+   --  Install the elaboration model specified by pragma Elaboration_Checks\n+   --  associated with compilation unit Unit_Id. No action is taken when the\n+   --  unit lacks such pragma.\n+\n    procedure Install_Generic_Formals (Subp_Id : Entity_Id);\n    --  Install both the generic formal parameters and the formal parameters of\n    --  generic subprogram Subp_Id into visibility."}]}