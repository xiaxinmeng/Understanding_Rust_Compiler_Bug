{"sha": "9607e404a5853c68bcfb8d1bab823736597409bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwN2U0MDRhNTg1M2M2OGJjZmI4ZDFiYWI4MjM3MzY1OTc0MDliYw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-11T21:11:03Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-11T21:11:03Z"}, "message": "libphobos: Merge upstream druntime 175bf5fc\n\nBackports extern(C) bindings committed to upstream druntime since the\nlast sync.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2552\n\nFrom-SVN: r270295", "tree": {"sha": "40a083dc403b4d5deed64c416c0da30d43bcc253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a083dc403b4d5deed64c416c0da30d43bcc253"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9607e404a5853c68bcfb8d1bab823736597409bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9607e404a5853c68bcfb8d1bab823736597409bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9607e404a5853c68bcfb8d1bab823736597409bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9607e404a5853c68bcfb8d1bab823736597409bc/comments", "author": null, "committer": null, "parents": [{"sha": "258ad81197cbd24452286d38975b0302342cffe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258ad81197cbd24452286d38975b0302342cffe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258ad81197cbd24452286d38975b0302342cffe0"}], "stats": {"total": 370, "additions": 304, "deletions": 66}, "files": [{"sha": "a7bbd3da9646941e4081a4ae6b1442b5e1a5a08e", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -1,4 +1,4 @@\n-d57fa1ffaecc858229ed7a730e8486b59197dee5\n+175bf5fc69d26fec60d533ff77f7e915fd5bb468\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "6ce3f9d13e588085848c186b956da968300f7e45", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -1643,9 +1643,6 @@ else version (CRuntime_Bionic)\n }\n else version (CRuntime_Musl)\n {\n-    import core.sys.posix.sys.types : off_t;\n-    ///\n-    int fseeko(FILE *, off_t, int);\n     @trusted\n     {\n         ///"}, {"sha": "4a571e153bf26f88f583131210d328a6c3c22858", "filename": "libphobos/libdruntime/core/stdc/time.d", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftime.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -148,21 +148,22 @@ else\n }\n \n ///\n-double  difftime(time_t time1, time_t time0);\n+pure double  difftime(time_t time1, time_t time0); // MT-Safe\n ///\n-time_t  mktime(tm* timeptr);\n+@system time_t  mktime(scope tm* timeptr); // @system: MT-Safe env locale\n ///\n-time_t  time(time_t* timer);\n+time_t  time(scope time_t* timer);\n+\n ///\n-char*   asctime(in tm* timeptr);\n+@system char*   asctime(const scope tm* timeptr); // @system: MT-Unsafe race:asctime locale\n ///\n-char*   ctime(in time_t* timer);\n+@system char*   ctime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf race:asctime env locale\n ///\n-tm*     gmtime(in time_t* timer);\n+@system tm*     gmtime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf env locale\n ///\n-tm*     localtime(in time_t* timer);\n+@system tm*     localtime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf env locale\n ///\n-@system size_t  strftime(char* s, size_t maxsize, in char* format, in tm* timeptr);\n+@system size_t  strftime(scope char* s, size_t maxsize, const scope char* format, const scope tm* timeptr); // @system: MT-Safe env locale\n \n version (Windows)\n {\n@@ -171,9 +172,9 @@ version (Windows)\n     ///\n     void  _tzset();                          // non-standard\n     ///\n-    @system char* _strdate(char* s);                 // non-standard\n+    @system char* _strdate(return scope char* s);                 // non-standard\n     ///\n-    @system char* _strtime(char* s);                 // non-standard\n+    @system char* _strtime(return scope char* s);                 // non-standard\n \n     ///\n     extern __gshared const(char)*[2] tzname; // non-standard"}, {"sha": "8afa8f7cc3805ff069d6f269f152397ba0d9a92c", "filename": "libphobos/libdruntime/core/sync/condition.d", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fcondition.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fcondition.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fcondition.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -23,7 +23,12 @@ public import core.time;\n version (Windows)\n {\n     private import core.sync.semaphore;\n-    private import core.sys.windows.windows;\n+    private import core.sys.windows.basetsd /+: HANDLE+/;\n+    private import core.sys.windows.winbase /+: CloseHandle, CreateSemaphoreA, CRITICAL_SECTION,\n+        DeleteCriticalSection, EnterCriticalSection, INFINITE, InitializeCriticalSection,\n+        LeaveCriticalSection, ReleaseSemaphore, WAIT_OBJECT_0, WaitForSingleObject+/;\n+    private import core.sys.windows.windef /+: BOOL, DWORD+/;\n+    private import core.sys.windows.winerror /+: WAIT_TIMEOUT+/;\n }\n else version (Posix)\n {"}, {"sha": "024009f48aa32e1bfac54927b424773cb78ead38", "filename": "libphobos/libdruntime/core/sync/mutex.d", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fmutex.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fmutex.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fmutex.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -20,7 +20,9 @@ public import core.sync.exception;\n \n version (Windows)\n {\n-    private import core.sys.windows.windows;\n+    private import core.sys.windows.winbase /+: CRITICAL_SECTION, DeleteCriticalSection,\n+        EnterCriticalSection, InitializeCriticalSection, LeaveCriticalSection,\n+        TryEnterCriticalSection+/;\n }\n else version (Posix)\n {\n@@ -144,7 +146,7 @@ class Mutex :\n         {\n             import core.internal.abort : abort;\n             !pthread_mutex_destroy(&m_hndl) ||\n-                abort(\"Error: pthread_mutex_init failed.\");\n+                abort(\"Error: pthread_mutex_destroy failed.\");\n         }\n         this.__monitor = null;\n     }\n@@ -318,7 +320,7 @@ unittest\n         void useResource() shared @safe nothrow @nogc\n         {\n             mtx.lock_nothrow();\n-            cargo++;\n+            (cast() cargo) += 1;\n             mtx.unlock_nothrow();\n         }\n     }\n@@ -370,14 +372,15 @@ unittest\n     // should happen only from a single thread.\n     (cast(Mutex) mtx).__dtor();\n \n-    // Verify that the underlying implementation has been destroyed\n-    // by checking that locking is not possible. This assumes\n-    // that the underlying implementation is well behaved\n-    // and makes the object non-lockable upon destruction.\n-    // The Bionic and Musl C runtimes and DragonFly don't appear to do so, so skip this test.\n+    // Verify that the underlying implementation has been destroyed by checking\n+    // that locking is not possible. This assumes that the underlying\n+    // implementation is well behaved and makes the object non-lockable upon\n+    // destruction. The Bionic, DragonFly, Musl, and Solaris C runtimes don't\n+    // appear to do so, so skip this test.\n     version (CRuntime_Bionic) {} else\n     version (CRuntime_Musl) {} else\n     version (DragonFlyBSD) {} else\n+    version (Solaris) {} else\n     assert(!mtx.tryLock_nothrow());\n \n     free(cast(void*) mtx);"}, {"sha": "56ac7dc3663580e6c5df930c8fc5edf7ed08741e", "filename": "libphobos/libdruntime/core/sync/semaphore.d", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fsemaphore.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fsemaphore.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsync%2Fsemaphore.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -29,7 +29,11 @@ else version (WatchOS)\n \n version (Windows)\n {\n-    private import core.sys.windows.windows;\n+    private import core.sys.windows.basetsd /+: HANDLE+/;\n+    private import core.sys.windows.winbase /+: CloseHandle, CreateSemaphoreA, INFINITE,\n+        ReleaseSemaphore, WAIT_OBJECT_0, WaitForSingleObject+/;\n+    private import core.sys.windows.windef /+: BOOL, DWORD+/;\n+    private import core.sys.windows.winerror /+: WAIT_TIMEOUT+/;\n }\n else version (Darwin)\n {\n@@ -337,19 +341,17 @@ class Semaphore\n     }\n \n \n-private:\n-    version (Windows)\n-    {\n-        HANDLE  m_hndl;\n-    }\n-    else version (Darwin)\n-    {\n-        semaphore_t m_hndl;\n-    }\n-    else version (Posix)\n-    {\n-        sem_t   m_hndl;\n-    }\n+protected:\n+\n+    /// Aliases the operating-system-specific semaphore type.\n+    version (Windows)        alias Handle = HANDLE;\n+    /// ditto\n+    else version (Darwin)    alias Handle = semaphore_t;\n+    /// ditto\n+    else version (Posix)     alias Handle = sem_t;\n+\n+    /// Handle to the system-specific semaphore.\n+    Handle m_hndl;\n }\n \n "}, {"sha": "954d2c3cc462a493126cf5135442da2a59e454d2", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -93,6 +93,60 @@ else version (CRuntime_Musl)\n         ubyte[32-2*(void*).sizeof] __dummy4;\n     }\n }\n+else version (CRuntime_UClibc)\n+{\n+    import core.sys.posix.config;\n+    import core.sys.posix.sys.types;\n+\n+    struct aiocb\n+    {\n+        int aio_fildes;\n+        int aio_lio_opcode;\n+        int aio_reqprio;\n+        void* aio_buf;   //volatile\n+        size_t aio_nbytes;\n+        sigevent aio_sigevent;\n+\n+        aiocb* __next_prio;\n+        int __abs_prio;\n+        int __policy;\n+        int __error_code;\n+        ssize_t __return_value;\n+\n+        static if (__USE_LARGEFILE64)\n+        {\n+            off_t aio_offset;\n+            ubyte[off64_t.sizeof - off_t.sizeof] __pad;\n+        }\n+        else\n+        {\n+            off64_t aio_offset;\n+        }\n+        ubyte[32] __unused;\n+    }\n+\n+    static if (__USE_LARGEFILE64)\n+    {\n+        struct aiocb64\n+        {\n+            int aio_fildes;\n+            int aio_lio_opcode;\n+            int aio_reqprio;\n+            void* aio_buf;   //volatile\n+            size_t aio_nbytes;\n+            sigevent aio_sigevent;\n+\n+            aiocb* __next_prio;\n+            int __abs_prio;\n+            int __policy;\n+            int __error_code;\n+            ssize_t __return_value;\n+\n+            off64_t aio_offset;\n+            ubyte[32] __unused;\n+        }\n+    }\n+}\n else version (Darwin)\n {\n     struct aiocb\n@@ -210,6 +264,15 @@ else version (CRuntime_Musl)\n         AIO_ALLDONE\n     }\n }\n+else version (CRuntime_UClibc)\n+{\n+    enum\n+    {\n+        AIO_CANCELED,\n+        AIO_NOTCANCELED,\n+        AIO_ALLDONE\n+    }\n+}\n else version (Darwin)\n {\n     enum\n@@ -257,6 +320,15 @@ else version (CRuntime_Musl)\n         LIO_NOP\n     }\n }\n+else version (CRuntime_UClibc)\n+{\n+    enum\n+    {\n+        LIO_READ,\n+        LIO_WRITE,\n+        LIO_NOP\n+    }\n+}\n else version (Darwin)\n {\n     enum\n@@ -302,6 +374,14 @@ else version (CRuntime_Musl)\n         LIO_NOWAIT\n     }\n }\n+else version (CRuntime_UClibc)\n+{\n+    enum\n+    {\n+        LIO_WAIT,\n+        LIO_NOWAIT\n+    }\n+}\n else version (Darwin)\n {\n     enum\n@@ -362,6 +442,40 @@ version (CRuntime_Glibc)\n         int lio_listio(int mode, const(aiocb*)* aiocb_list, int nitems, sigevent* sevp);\n     }\n }\n+version (CRuntime_UClibc)\n+{\n+    static if (__USE_LARGEFILE64)\n+    {\n+        int aio_read64(aiocb64* aiocbp);\n+        int aio_write64(aiocb64* aiocbp);\n+        int aio_fsync64(int op, aiocb64* aiocbp);\n+        int aio_error64(const(aiocb64)* aiocbp);\n+        ssize_t aio_return64(aiocb64* aiocbp);\n+        int aio_suspend64(const(aiocb64*)* aiocb_list, int nitems, const(timespec)* timeout);\n+        int aio_cancel64(int fd, aiocb64* aiocbp);\n+        int lio_listio64(int mode, const(aiocb64*)* aiocb_list, int nitems, sigevent* sevp);\n+\n+        alias aio_read = aio_read64;\n+        alias aio_write = aio_write64;\n+        alias aio_fsync = aio_fsync64;\n+        alias aio_error = aio_error64;\n+        alias aio_return = aio_return64;\n+        alias aio_suspend = aio_suspend64;\n+        alias aio_cancel = aio_cancel64;\n+        alias lio_listio = lio_listio64;\n+    }\n+    else\n+    {\n+        int aio_read(aiocb* aiocbp);\n+        int aio_write(aiocb* aiocbp);\n+        int aio_fsync(int op, aiocb* aiocbp);\n+        int aio_error(const(aiocb)* aiocbp);\n+        ssize_t aio_return(aiocb* aiocbp);\n+        int aio_suspend(const(aiocb*)* aiocb_list, int nitems, const(timespec)* timeout);\n+        int aio_cancel(int fd, aiocb* aiocbp);\n+        int lio_listio(int mode, const(aiocb*)* aiocb_list, int nitems, sigevent* sevp);\n+    }\n+}\n else\n {\n     int aio_read(aiocb* aiocbp);\n@@ -395,6 +509,26 @@ version (CRuntime_Glibc)\n         void aio_init(const(aioinit)* init);\n     }\n }\n+version (CRuntime_UClibc)\n+{\n+    static if (__USE_GNU)\n+    {\n+        /* To customize the implementation one can use the following struct.  */\n+        struct aioinit\n+        {\n+            int aio_threads;\n+            int aio_num;\n+            int aio_locks;\n+            int aio_usedba;\n+            int aio_debug;\n+            int aio_numusers;\n+            int aio_idle_time;\n+            int aio_reserved;\n+        }\n+\n+        void aio_init(const(aioinit)* init);\n+    }\n+}\n else version (FreeBSD)\n {\n     int aio_waitcomplete(aiocb** aiocb_list, const(timespec)* timeout);"}, {"sha": "2f1daf6ebc98d53b9cf5dddc1683bd6e63747fb6", "filename": "libphobos/libdruntime/core/sys/posix/fcntl.d", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -868,7 +868,7 @@ else version (CRuntime_UClibc)\n     enum F_UNLCK        = 2;\n     enum F_WRLCK        = 1;\n \n-    version (X86_64)\n+    version (X86_Any)\n     {\n         enum O_CREAT        = 0x40;     // octal     0100\n         enum O_EXCL         = 0x80;     // octal     0200\n@@ -877,12 +877,13 @@ else version (CRuntime_UClibc)\n \n         enum O_APPEND       = 0x400;    // octal    02000\n         enum O_NONBLOCK     = 0x800;    // octal    04000\n+        enum O_CLOEXEC      = 0x80000;  // octal    02000000\n         enum O_SYNC         = 0x1000;   // octal    010000\n         enum O_NDELAY       = O_NONBLOCK;\n         enum O_FSYNC        = O_SYNC;\n         enum O_ASYNC        = 0x2000;   // octal    020000\n     }\n-    else version (MIPS32)\n+    else version (MIPS_Any)\n     {\n         enum O_CREAT        = 0x0100;\n         enum O_EXCL         = 0x0400;\n@@ -892,11 +893,12 @@ else version (CRuntime_UClibc)\n         enum O_APPEND       = 0x0008;\n         enum O_SYNC         = 0x0010;\n         enum O_NONBLOCK     = 0x0080;\n+        enum O_CLOEXEC      = 0x80000;  // octal    02000000\n         enum O_NDELAY       = O_NONBLOCK;\n         enum O_FSYNC        = O_SYNC;\n         enum O_ASYNC        = 0x1000;\n     }\n-    else version (ARM)\n+    else version (ARM_Any)\n     {\n         enum O_CREAT        = 0x40;     // octal     0100\n         enum O_EXCL         = 0x80;     // octal     0200\n@@ -905,6 +907,7 @@ else version (CRuntime_UClibc)\n \n         enum O_APPEND       = 0x400;    // octal    02000\n         enum O_NONBLOCK     = 0x800;    // octal    04000\n+        enum O_CLOEXEC      = 0x80000;  // octal    02000000\n         enum O_SYNC         = 0x1000;   // octal    010000\n         enum O_NDELAY       = O_NONBLOCK;\n         enum O_FSYNC        = O_SYNC;"}, {"sha": "0c6a144f520bca49df609df38c499ad746e584c8", "filename": "libphobos/libdruntime/core/sys/posix/stdio.d", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -180,6 +180,37 @@ else version (CRuntime_UClibc)\n         FILE* tmpfile();\n     }\n }\n+else version (Solaris)\n+{\n+    static if (__USE_FILE_OFFSET64 && __WORDSIZE != 64)\n+    {\n+        int   fgetpos64(FILE*, fpos_t *);\n+        alias fgetpos = fgetpos64;\n+\n+        FILE* fopen64(in char*, in char*);\n+        alias fopen = fopen64;\n+\n+        FILE* freopen64(in char*, in char*, FILE*);\n+        alias freopen = freopen64;\n+\n+        int   fseek(FILE*, c_long, int);\n+\n+        int   fsetpos64(FILE*, in fpos_t*);\n+        alias fsetpos = fsetpos64;\n+\n+        FILE* tmpfile64();\n+        alias tmpfile = tmpfile64;\n+    }\n+    else\n+    {\n+        int   fgetpos(FILE*, fpos_t *);\n+        FILE* fopen(in char*, in char*);\n+        FILE* freopen(in char*, in char*, FILE*);\n+        int   fseek(FILE*, c_long, int);\n+        int   fsetpos(FILE*, in fpos_t*);\n+        FILE* tmpfile();\n+    }\n+}\n \n //\n // C Extension (CX)\n@@ -246,6 +277,31 @@ else version (CRuntime_UClibc)\n     off_t ftello(FILE*);\n   }\n }\n+else version (Solaris)\n+{\n+    enum L_ctermid = 9;\n+    enum L_cuserid = 9;\n+\n+    static if (__USE_FILE_OFFSET64 && __WORDSIZE != 64)\n+    {\n+        int   fseeko64(FILE*, off_t, int);\n+        alias fseeko = fseeko64;\n+    }\n+    else\n+    {\n+        int   fseeko(FILE*, off_t, int);\n+    }\n+\n+    static if (__USE_FILE_OFFSET64 && __WORDSIZE != 64)\n+    {\n+        off_t ftello64(FILE*);\n+        alias ftello = ftello64;\n+    }\n+    else\n+    {\n+        off_t ftello(FILE*);\n+    }\n+}\n else version (Posix)\n {\n     int   fseeko(FILE*, off_t, int);"}, {"sha": "197f1d6f712c0b9ab68a8015f3d1783a3d02d1a4", "filename": "libphobos/libdruntime/core/sys/posix/sys/socket.d", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -1941,31 +1941,37 @@ else version (CRuntime_UClibc)\n         int l_linger;\n     }\n \n-    version (X86_64)\n+    version (X86_Any)\n     {\n         enum\n         {\n             SOCK_DGRAM      = 2,\n             SOCK_SEQPACKET  = 5,\n-            SOCK_STREAM     = 1\n+            SOCK_STREAM     = 1,\n+            SOCK_CLOEXEC    = 0x80000, // octal 02000000\n+            SOCK_NONBLOCK   = 0x800 // octal 00004000\n         }\n     }\n-    else version (MIPS32)\n+    else version (MIPS_Any)\n     {\n         enum\n         {\n             SOCK_DGRAM      = 1,\n             SOCK_SEQPACKET  = 5,\n             SOCK_STREAM     = 2,\n+            SOCK_CLOEXEC    = 0x80000, // octal 02000000\n+            SOCK_NONBLOCK   = 0x80 // octal 00000200\n         }\n     }\n-    else version (ARM)\n+    else version (ARM_Any)\n     {\n         enum\n         {\n             SOCK_DGRAM      = 2,\n             SOCK_SEQPACKET  = 5,\n-            SOCK_STREAM     = 1\n+            SOCK_STREAM     = 1,\n+            SOCK_CLOEXEC    = 0x80000, // octal 02000000\n+            SOCK_NONBLOCK   = 0x800 // octal 00004000\n         }\n     }\n     else\n@@ -1991,6 +1997,7 @@ else version (CRuntime_UClibc)\n         SO_TYPE         = 3,\n \n         SOL_SOCKET      = 1,\n+        SOL_TCP         = 6,\n         SOMAXCONN       = 128\n     }\n "}, {"sha": "d23bdaa0b8d9994484a11be382c50e85d60f53d3", "filename": "libphobos/libdruntime/core/sys/solaris/dlfcn.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fdlfcn.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -9,6 +9,7 @@ module core.sys.solaris.dlfcn;\n version (Solaris):\n extern (C):\n nothrow:\n+@nogc:\n \n public import core.sys.posix.dlfcn;\n import core.stdc.config;\n@@ -109,4 +110,4 @@ struct Dl_serinfo\n     Dl_serpath[1]  dls_serpath;\n }\n \n-// FIXME: Dl_argsinfo, Dl_mapinfo, Dl_amd64_unwindinfo are missing\n\\ No newline at end of file\n+// FIXME: Dl_argsinfo, Dl_mapinfo, Dl_amd64_unwindinfo are missing"}, {"sha": "d9d47c0914243dfa628bce625deabd363292c08e", "filename": "libphobos/libdruntime/core/sys/solaris/sys/link.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fsys%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fsys%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fsys%2Flink.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -15,22 +15,22 @@ import core.stdc.config;\n struct Elf32_Dyn\n {\n     Elf32_Sword d_tag;\n-    union d_un\n+    union _d_un\n     {\n         Elf32_Word d_val;\n         Elf32_Addr d_ptr;\n         Elf32_Off  d_off;\n-    }\n+    } _d_un d_un;\n }\n \n struct Elf64_Dyn\n {\n     Elf64_Xword d_tag;\n-    union d_un\n+    union _d_un\n     {\n         Elf64_Xword d_val;\n         Elf64_Addr  d_ptr;\n-    }\n+    } _d_un d_un;\n }\n \n enum DT_NULL         = 0;"}, {"sha": "19b4426edf751a52a40c4e29b6688a22acc89362", "filename": "libphobos/libdruntime/core/sys/windows/shlobj.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlobj.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlobj.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlobj.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -708,7 +708,7 @@ static if (_WIN32_IE >= 0x500) {\n             ULONG dwFlags;\n             DWORD dwFileAttributes;\n             ULONG dwReserved;\n-            WCHAR *pwszExt = 0;\n+            WCHAR *pwszExt = null;\n             WCHAR[MAX_PATH] wszFile = 0;\n         }\n         alias SHCOLUMNDATA*        LPSHCOLUMNDATA;"}, {"sha": "e3bdd4006687af7d6f85caa5fc4951ded16c215d", "filename": "libphobos/libdruntime/core/sys/windows/threadaux.d", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -24,7 +24,7 @@ import core.stdc.stdlib;\n public import core.thread;\n \n extern(Windows)\n-HANDLE OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId) nothrow;\n+HANDLE OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId) nothrow @nogc;\n \n extern (C) extern __gshared int _tls_index;\n \n@@ -113,7 +113,7 @@ struct thread_aux\n     }\n \n     alias fnNtQuerySystemInformation = extern(Windows)\n-    HRESULT function( uint SystemInformationClass, void* info, uint infoLength, uint* ReturnLength ) nothrow;\n+    HRESULT function( uint SystemInformationClass, void* info, uint infoLength, uint* ReturnLength ) nothrow @nogc;\n \n     enum ThreadBasicInformation = 0;\n \n@@ -129,7 +129,7 @@ struct thread_aux\n     }\n \n     alias fnNtQueryInformationThread = extern(Windows)\n-    int function( HANDLE ThreadHandle, uint ThreadInformationClass, void* buf, uint size, uint* ReturnLength ) nothrow;\n+    int function( HANDLE ThreadHandle, uint ThreadInformationClass, void* buf, uint size, uint* ReturnLength ) nothrow @nogc;\n \n     enum SYNCHRONIZE = 0x00100000;\n     enum THREAD_GET_CONTEXT = 8;\n@@ -138,7 +138,7 @@ struct thread_aux\n \n     ///////////////////////////////////////////////////////////////////\n     // get the thread environment block (TEB) of the thread with the given handle\n-    static void** getTEB( HANDLE hnd ) nothrow\n+    static void** getTEB( HANDLE hnd ) nothrow @nogc\n     {\n         HANDLE nthnd = GetModuleHandleA( \"NTDLL\" );\n         assert( nthnd, \"cannot get module handle for ntdll\" );\n@@ -153,7 +153,7 @@ struct thread_aux\n     }\n \n     // get the thread environment block (TEB) of the thread with the given identifier\n-    static void** getTEB( uint id ) nothrow\n+    static void** getTEB( uint id ) nothrow @nogc\n     {\n         HANDLE hnd = OpenThread( THREAD_QUERY_INFORMATION, FALSE, id );\n         assert( hnd, \"OpenThread failed\" );\n@@ -164,7 +164,7 @@ struct thread_aux\n     }\n \n     // get linear address of TEB of current thread\n-    static void** getTEB() nothrow\n+    static void** getTEB() nothrow @nogc\n     {\n         version (Win32)\n         {\n@@ -210,21 +210,21 @@ struct thread_aux\n     }\n \n     // get the stack bottom (the top address) of the thread with the given handle\n-    static void* getThreadStackBottom( HANDLE hnd ) nothrow\n+    static void* getThreadStackBottom( HANDLE hnd ) nothrow @nogc\n     {\n         void** teb = getTEB( hnd );\n         return teb[1];\n     }\n \n     // get the stack bottom (the top address) of the thread with the given identifier\n-    static void* getThreadStackBottom( uint id ) nothrow\n+    static void* getThreadStackBottom( uint id ) nothrow @nogc\n     {\n         void** teb = getTEB( id );\n         return teb[1];\n     }\n \n     // create a thread handle with full access to the thread with the given identifier\n-    static HANDLE OpenThreadHandle( uint id ) nothrow\n+    static HANDLE OpenThreadHandle( uint id ) nothrow @nogc\n     {\n         return OpenThread( SYNCHRONIZE|THREAD_GET_CONTEXT|THREAD_QUERY_INFORMATION|THREAD_SUSPEND_RESUME, FALSE, id );\n     }"}, {"sha": "1982122858e00f4703194d7d4c3fa24ee7d6355f", "filename": "libphobos/libdruntime/core/time.d", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Ftime.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -85,7 +85,7 @@ import core.internal.string;\n \n version (Windows)\n {\n-import core.sys.windows.windows;\n+import core.sys.windows.winbase /+: QueryPerformanceCounter, QueryPerformanceFrequency+/;\n }\n else version (Posix)\n {\n@@ -195,7 +195,7 @@ version (CoreDdoc) enum ClockType\n         extremely frequently (e.g. hundreds of thousands of times a second) but\n         don't care about high precision, the coarse clock might be appropriate.\n \n-        Currently, only Linux and FreeBSD support a coarser clock, and on other\n+        Currently, only Linux and FreeBSD/DragonFlyBSD support a coarser clock, and on other\n         platforms, it's treated as $(D ClockType.normal).\n       +/\n     coarse = 2,\n@@ -207,7 +207,7 @@ version (CoreDdoc) enum ClockType\n         more precise clock than the normal one, it's treated as equivalent to\n         $(D ClockType.normal).\n \n-        Currently, only FreeBSD supports a more precise clock, where it uses\n+        Currently, only FreeBSD/DragonFlyBSD supports a more precise clock, where it uses\n         $(D CLOCK_MONOTONIC_PRECISE) for the monotonic time and\n         $(D CLOCK_REALTIME_PRECISE) for the wall clock time.\n       +/\n@@ -231,7 +231,7 @@ version (CoreDdoc) enum ClockType\n         Uses a clock that has a precision of one second (contrast to the coarse\n         clock, which has sub-second precision like the normal clock does).\n \n-        FreeBSD is the only system which specifically has a clock set up for\n+        FreeBSD/DragonFlyBSD are the only systems which specifically have a clock set up for\n         this (it has $(D CLOCK_SECOND) to use with $(D clock_gettime) which\n         takes advantage of an in-kernel cached value), but on other systems, the\n         fastest function available will be used, and the resulting $(D SysTime)\n@@ -320,6 +320,16 @@ else version (NetBSD) enum ClockType\n     precise = 3,\n     second = 6,\n }\n+else version (DragonFlyBSD) enum ClockType\n+{\n+    normal = 0,\n+    coarse = 2,\n+    precise = 3,\n+    second = 6,\n+    uptime = 8,\n+    uptimeCoarse = 9,\n+    uptimePrecise = 10,\n+}\n else version (Solaris) enum ClockType\n {\n     normal = 0,\n@@ -386,6 +396,20 @@ version (Posix)\n             case second: assert(0);\n             }\n         }\n+        else version (DragonFlyBSD)\n+        {\n+            import core.sys.dragonflybsd.time;\n+            with(ClockType) final switch (clockType)\n+            {\n+            case coarse: return CLOCK_MONOTONIC_FAST;\n+            case normal: return CLOCK_MONOTONIC;\n+            case precise: return CLOCK_MONOTONIC_PRECISE;\n+            case uptime: return CLOCK_UPTIME;\n+            case uptimeCoarse: return CLOCK_UPTIME_FAST;\n+            case uptimePrecise: return CLOCK_UPTIME_PRECISE;\n+            case second: assert(0);\n+            }\n+        }\n         else version (Solaris)\n         {\n             import core.sys.solaris.time;\n@@ -451,6 +475,8 @@ unittest\n \n     Examples:\n --------------------\n+import std.datetime;\n+\n assert(dur!\"days\"(12) == dur!\"hnsecs\"(10_368_000_000_000L));\n assert(dur!\"hnsecs\"(27) == dur!\"hnsecs\"(27));\n assert(std.datetime.Date(2010, 9, 7) + dur!\"days\"(5) =="}, {"sha": "cfef7f3f6658f6a1ee95b2cff48b7fcd89d299ad", "filename": "libphobos/libdruntime/gc/os.d", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fgc%2Fos.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9607e404a5853c68bcfb8d1bab823736597409bc/libphobos%2Flibdruntime%2Fgc%2Fos.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgc%2Fos.d?ref=9607e404a5853c68bcfb8d1bab823736597409bc", "patch": "@@ -16,7 +16,8 @@ module gc.os;\n \n version (Windows)\n {\n-    import core.sys.windows.windows;\n+    import core.sys.windows.winbase : GetCurrentThreadId, VirtualAlloc, VirtualFree;\n+    import core.sys.windows.winnt : MEM_COMMIT, MEM_RELEASE, MEM_RESERVE, PAGE_READWRITE;\n \n     alias int pthread_t;\n \n@@ -40,9 +41,11 @@ else version (Posix)\n \n     import core.sys.posix.sys.mman;\n     version (FreeBSD) import core.sys.freebsd.sys.mman : MAP_ANON;\n+    version (DragonFlyBSD) import core.sys.dragonflybsd.sys.mman : MAP_ANON;\n     version (NetBSD) import core.sys.netbsd.sys.mman : MAP_ANON;\n     version (CRuntime_Glibc) import core.sys.linux.sys.mman : MAP_ANON;\n     version (Darwin) import core.sys.darwin.sys.mman : MAP_ANON;\n+    version (CRuntime_UClibc) import core.sys.linux.sys.mman : MAP_ANON;\n     import core.stdc.stdlib;\n \n     //version = GC_Use_Alloc_MMap;\n@@ -170,7 +173,7 @@ version (Windows)\n             return false;\n         else\n         {\n-            import core.sys.windows.windows;\n+            import core.sys.windows.winbase : GlobalMemoryStatus, MEMORYSTATUS;\n             MEMORYSTATUS stat;\n             GlobalMemoryStatus(&stat);\n             // Less than 5 % of virtual address space available"}]}