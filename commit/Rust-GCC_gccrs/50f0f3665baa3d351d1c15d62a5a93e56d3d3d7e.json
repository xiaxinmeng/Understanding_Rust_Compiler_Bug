{"sha": "50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmMGYzNjY1YmFhM2QzNTFkMWMxNWQ2MmE1YTkzZTU2ZDNkM2Q3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-10-11T05:33:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-10-11T05:33:04Z"}, "message": "re PR rtl-optimization/33638 (wrong code with -O2 -fforce-addr)\n\n\tPR rtl-optimization/33638\n\t* dse.c (struct insn_info): Remove 'stack_read' field,\n\tadd 'stack_pointer_based' field.\n\t(record_store): For a store with non-constant base, record\n\twhether it is stack pointer based.\n\t(scan_insn): For the call to a const function, remove stack\n\tpointer based stores from the list of local active stores.\n\t(scan_reads_nospill): Delete code dealing with const functions.\n\nFrom-SVN: r129226", "tree": {"sha": "1ed6ded3e952f7e288d76e23fa06d79039ee252f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed6ded3e952f7e288d76e23fa06d79039ee252f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e494bf2c832da84c84df0f5a13ce0880c3c985ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e494bf2c832da84c84df0f5a13ce0880c3c985ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e494bf2c832da84c84df0f5a13ce0880c3c985ec"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "f2568d6c5bf019b455c150b86b1831316b437cd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e", "patch": "@@ -1,3 +1,14 @@\n+2007-10-11  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR rtl-optimization/33638\n+\t* dse.c (struct insn_info): Remove 'stack_read' field,\n+\tadd 'stack_pointer_based' field.\n+\t(record_store): For a store with non-constant base, record\n+\twhether it is stack pointer based.\n+\t(scan_insn): For the call to a const function, remove stack\n+\tpointer based stores from the list of local active stores.\n+\t(scan_reads_nospill): Delete code dealing with const functions.\n+\n 2007-10-10  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* ra-conflict.c (partial_bitnum, max_bitnum): Change type of variables"}, {"sha": "c5e8e26dc62c3e4a6753d996fcddcbc7e4dab7ea", "filename": "gcc/dse.c", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=50f0f3665baa3d351d1c15d62a5a93e56d3d3d7e", "patch": "@@ -284,12 +284,11 @@ struct insn_info\n      contains a wild read, the use_rec will be null.  */\n   bool wild_read;\n \n-  /* This field is set for const function calls.  Const functions\n-     cannot read memory, but they can read the stack because that is\n-     where they may get their parms.  So having this set is less\n-     severe than a wild read, it just means that all of the stores to\n-     the stack are killed rather than all stores.  */\n-  bool stack_read;\n+  /* This field is only used for the processing of const functions.\n+     These functions cannot read memory, but they can read the stack\n+     because that is where they may get their parms.  It is set to\n+     true if the insn may contain a stack pointer based store.  */\n+  bool stack_pointer_based;\n \n   /* This is true if any of the sets within the store contains a\n      cselib base.  Such stores can only be deleted by the local\n@@ -941,8 +940,9 @@ add_wild_read (bb_info_t bb_info)\n }\n \n \n-/* Return true if X is a constant or one of the registers that behaves\n-   as a constant over the life of a function.  */\n+/* Return true if X is a constant or one of the registers that behave\n+   as a constant over the life of a function.  This is equivalent to\n+   !rtx_varies_p for memory addresses.  */\n \n static bool\n const_or_frame_p (rtx x)\n@@ -1245,8 +1245,15 @@ record_store (rtx body, bb_info_t bb_info)\n     }\n   else\n     {\n-      store_info = pool_alloc (cse_store_info_pool);\n+      rtx base_term = find_base_term (XEXP (mem, 0));\n+      if (!base_term\n+\t  || (GET_CODE (base_term) == ADDRESS\n+\t      && GET_MODE (base_term) == Pmode\n+\t      && XEXP (base_term, 0) == stack_pointer_rtx))\n+\tinsn_info->stack_pointer_based = true;\n       insn_info->contains_cselib_groups = true;\n+\n+      store_info = pool_alloc (cse_store_info_pool);\n       group_id = -1;\n \n       if (dump_file)\n@@ -1948,9 +1955,10 @@ scan_insn (bb_info_t bb_info, rtx insn)\n   if (CALL_P (insn))\n     {\n       insn_info->cannot_delete = true;\n+\n       /* Const functions cannot do anything bad i.e. read memory,\n-\t however, they can read their parameters which may have been\n-\t pushed onto the stack.  */\n+\t however, they can read their parameters which may have\n+\t been pushed onto the stack.  */\n       if (CONST_OR_PURE_CALL_P (insn) && !pure_call_p (insn))\n \t{\n \t  insn_info_t i_ptr = active_local_stores;\n@@ -1961,15 +1969,8 @@ scan_insn (bb_info_t bb_info, rtx insn)\n \n \t  while (i_ptr)\n \t    {\n-\t      store_info_t store_info = i_ptr->store_rec;\n-\n-\t      /* Skip the clobbers.  */\n-\t      while (!store_info->is_set)\n-\t\tstore_info = store_info->next;\n-\n-\t      /* Remove the frame related stores.  */\n-\t      if (store_info->group_id >= 0\n-\t\t  && VEC_index (group_info_t, rtx_group_vec, store_info->group_id)->frame_related)\n+\t      /* Remove the stack pointer based stores.  */\n+\t      if (i_ptr->stack_pointer_based)\n \t\t{\n \t\t  if (dump_file)\n \t\t    dump_insn_info (\"removing from active\", i_ptr);\n@@ -1983,14 +1984,12 @@ scan_insn (bb_info_t bb_info, rtx insn)\n \t\tlast = i_ptr;\n \t      i_ptr = i_ptr->next_local_store;\n \t    }\n-\n-\t  insn_info->stack_read = true;\n-\t  \n-\t  return;\n \t}\n \n-      /* Every other call, including pure functions may read memory.  */\n-      add_wild_read (bb_info);\n+      else\n+\t/* Every other call, including pure functions, may read memory.  */\n+\tadd_wild_read (bb_info);\n+\n       return;\n     }\n \n@@ -2492,18 +2491,6 @@ scan_reads_nospill (insn_info_t insn_info, bitmap gen, bitmap kill)\n   int i;\n   group_info_t group;\n \n-  /* For const function calls kill the stack related stores.  */\n-  if (insn_info->stack_read)\n-    {\n-      for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)\n-\tif (group->process_globally && group->frame_related)\n-\t  {\n-\t    if (kill)\n-\t      bitmap_ior_into (kill, group->group_kill);\n-\t    bitmap_and_compl_into (gen, group->group_kill); \n-\t  }\n-    }\n-\n   while (read_info)\n     {\n       for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)"}]}