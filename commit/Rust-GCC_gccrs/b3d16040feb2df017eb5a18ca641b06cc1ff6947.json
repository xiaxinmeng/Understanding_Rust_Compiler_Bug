{"sha": "b3d16040feb2df017eb5a18ca641b06cc1ff6947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkMTYwNDBmZWIyZGYwMTdlYjVhMThjYTY0MWIwNmNjMWZmNjk0Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:19:14Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:19:28Z"}, "message": "libdecnumber: Enable Intel CET on Intel CET enabled host for jit\n\nSince on Intel CET enabled host, dlopen in Intel CET enabled applications\nfails on shared libraries which aren't Intel CET enabled, compile with\n-fcf-protection on Intel CET enabled host when jit is enabled to enable\nIntel CET on libgccjit.\n\n\t* Makefile.in (CET_HOST_FLAGS): New.\n\t(COMPILER): Add $(CET_HOST_FLAGS).\n\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n\tAC_SUBST(CET_HOST_FLAGS).  Clear CET_HOST_FLAGS if jit isn't\n\tenabled.\n\t* aclocal.m4: Regenerated.\n\t* configure: Likewise.", "tree": {"sha": "1d9827a6bda4c3826dde7d9aedab97f5c5baa546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9827a6bda4c3826dde7d9aedab97f5c5baa546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d16040feb2df017eb5a18ca641b06cc1ff6947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d16040feb2df017eb5a18ca641b06cc1ff6947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d16040feb2df017eb5a18ca641b06cc1ff6947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d16040feb2df017eb5a18ca641b06cc1ff6947/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051da74259d5ebbfaa5b363dd09dbe16a955d8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051da74259d5ebbfaa5b363dd09dbe16a955d8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051da74259d5ebbfaa5b363dd09dbe16a955d8a1"}], "stats": {"total": 181, "additions": 180, "deletions": 1}, "files": [{"sha": "6bdc7574c203295ae98bd1b621cbc8d6c3565d39", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=b3d16040feb2df017eb5a18ca641b06cc1ff6947", "patch": "@@ -1,3 +1,13 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.in (CET_HOST_FLAGS): New.\n+\t(COMPILER): Add $(CET_HOST_FLAGS).\n+\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n+\tAC_SUBST(CET_HOST_FLAGS).  Clear CET_HOST_FLAGS if jit isn't\n+\tenabled.\n+\t* aclocal.m4: Regenerated.\n+\t* configure: Likewise.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "9260b4849c8cd58df6e66274f6d58a58f76e1a03", "filename": "libdecnumber/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FMakefile.in?ref=b3d16040feb2df017eb5a18ca641b06cc1ff6947", "patch": "@@ -41,6 +41,7 @@ LDFLAGS = @LDFLAGS@\n LIBICONV = @LIBICONV@\n PACKAGE = @PACKAGE@\n PICFLAG = @PICFLAG@\n+CET_HOST_FLAGS = @CET_HOST_FLAGS@\n RANLIB = @RANLIB@\n SHELL = @SHELL@\n objext = @OBJEXT@\n@@ -60,7 +61,7 @@ enable_decimal_float= @enable_decimal_float@\n INCLUDES = -I$(srcdir) -I.\n \n ALL_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(NOLTO_FLAGS) $(INCLUDES) $(CPPFLAGS) \\\n-\t     $(PICFLAG)\n+\t     $(PICFLAG) $(CET_HOST_FLAGS)\n \n bid_OBJS = bid2dpd_dpd2bid.$(objext) host-ieee32.$(objext) \\\n \thost-ieee64.$(objext) host-ieee128.$(objext)"}, {"sha": "fe9f8b4f979796e30b60c245943d8e71703becd8", "filename": "libdecnumber/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Faclocal.m4?ref=b3d16040feb2df017eb5a18ca641b06cc1ff6947", "patch": "@@ -12,6 +12,8 @@\n # PARTICULAR PURPOSE.\n \n m4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\n+m4_include([../config/cet.m4])\n m4_include([../config/dfp.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/stdint.m4])\n m4_include([../config/warnings.m4])"}, {"sha": "b4542781457a348fed8737382c71b59b2f9706fd", "filename": "libdecnumber/configure", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=b3d16040feb2df017eb5a18ca641b06cc1ff6947", "patch": "@@ -624,6 +624,7 @@ ac_includes_default=\"\\\n \n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n+CET_HOST_FLAGS\n PICFLAG\n ADDITIONAL_OBJS\n enable_decimal_float\n@@ -704,6 +705,7 @@ enable_werror_always\n enable_maintainer_mode\n enable_decimal_float\n enable_host_shared\n+enable_cet\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1335,6 +1337,7 @@ Optional Features:\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n   --enable-host-shared    build host code as shared libraries\n+  --enable-cet            enable Intel CET in host libraries [default=auto]\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -5050,6 +5053,157 @@ fi\n \n \n \n+# Enable Intel CET on Intel CET enabled host if jit is enabled.\n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+if test x$may_have_cet = xyes; then\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_cet=no\n+else\n+  have_cet=yes\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+  LDFLAGS=\"$save_LDFLAGS\"\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  CET_HOST_FLAGS=\"-fcf-protection\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+case x$enable_languages in\n+*jit*)\n+  ;;\n+*)\n+  CET_HOST_FLAGS=\n+  ;;\n+esac\n+\n+\n+\n # Output.\n \n ac_config_headers=\"$ac_config_headers config.h:config.in\""}, {"sha": "de7e0088ceb5bdd68e751c5238ab88ee0ed81980", "filename": "libdecnumber/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d16040feb2df017eb5a18ca641b06cc1ff6947/libdecnumber%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure.ac?ref=b3d16040feb2df017eb5a18ca641b06cc1ff6947", "patch": "@@ -103,6 +103,18 @@ AC_ARG_ENABLE(host-shared,\n [PICFLAG=-fPIC], [PICFLAG=])\n AC_SUBST(PICFLAG)\n \n+# Enable Intel CET on Intel CET enabled host if jit is enabled.\n+GCC_CET_HOST_FLAGS(CET_HOST_FLAGS)\n+case x$enable_languages in\n+*jit*)\n+  ;;\n+*)\n+  CET_HOST_FLAGS=\n+  ;;\n+esac\n+AC_SUBST(CET_HOST_FLAGS)\n+\n+\n # Output.\n \n AC_CONFIG_HEADERS(config.h:config.in, [echo timestamp > stamp-h1])"}]}