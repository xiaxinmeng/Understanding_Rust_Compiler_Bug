{"sha": "aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEwYjNmOGY4ZDQ3NDhhYWFlZTQ4OTJlZDBkNWQ4NWFiYjJlODZmNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-09-22T10:33:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-22T10:33:24Z"}, "message": "predicates.md (expandable_comparison_operator): New predicate, extracted from...\n\ngcc/\n\t* config/arm/predicates.md (expandable_comparison_operator): New\n\tpredicate, extracted from...\n\t(arm_comparison_operator): ...here.\n\t* config/arm/arm.md (cbranchsi4, cbranchsf4, cbranchdf4, cbranchdi4)\n\t(cstoresi4, cstoresf4, cstoredf4, cstoredi4, movsicc, movsfcc)\n\t(movdfcc): Use expandable_comparison_operator.\n\ngcc/testsuite/\n\t* gcc.target/arm/cmp-1.c: New test.\n\t* gcc.target/arm/cmp-2.c: Likewise.\n\nFrom-SVN: r179082", "tree": {"sha": "6b94f7d09850a5b0fd14ea2c9cf57b123f94d0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b94f7d09850a5b0fd14ea2c9cf57b123f94d0b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/comments", "author": null, "committer": null, "parents": [{"sha": "6ebe2d6cf6a609ac9bad183daa9f3d9a920808fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ebe2d6cf6a609ac9bad183daa9f3d9a920808fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ebe2d6cf6a609ac9bad183daa9f3d9a920808fa"}], "stats": {"total": 131, "additions": 118, "deletions": 13}, "files": [{"sha": "7291c09ef8a91313ab15e540231457315dc9f2ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "patch": "@@ -1,3 +1,12 @@\n+2011-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/arm/predicates.md (expandable_comparison_operator): New\n+\tpredicate, extracted from...\n+\t(arm_comparison_operator): ...here.\n+\t* config/arm/arm.md (cbranchsi4, cbranchsf4, cbranchdf4, cbranchdi4)\n+\t(cstoresi4, cstoresf4, cstoredf4, cstoredi4, movsicc, movsfcc)\n+\t(movdfcc): Use expandable_comparison_operator.\n+\n 2011-09-22  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50447"}, {"sha": "3889322fd47a64bc1288fe5a985ad253340210c3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "patch": "@@ -6791,7 +6791,7 @@\n \n (define_expand \"cbranchsi4\"\n   [(set (pc) (if_then_else\n-\t      (match_operator 0 \"arm_comparison_operator\"\n+\t      (match_operator 0 \"expandable_comparison_operator\"\n \t       [(match_operand:SI 1 \"s_register_operand\" \"\")\n \t        (match_operand:SI 2 \"nonmemory_operand\" \"\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n@@ -6842,7 +6842,7 @@\n \n (define_expand \"cbranchsf4\"\n   [(set (pc) (if_then_else\n-\t      (match_operator 0 \"arm_comparison_operator\"\n+\t      (match_operator 0 \"expandable_comparison_operator\"\n \t       [(match_operand:SF 1 \"s_register_operand\" \"\")\n \t        (match_operand:SF 2 \"arm_float_compare_operand\" \"\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n@@ -6854,7 +6854,7 @@\n \n (define_expand \"cbranchdf4\"\n   [(set (pc) (if_then_else\n-\t      (match_operator 0 \"arm_comparison_operator\"\n+\t      (match_operator 0 \"expandable_comparison_operator\"\n \t       [(match_operand:DF 1 \"s_register_operand\" \"\")\n \t        (match_operand:DF 2 \"arm_float_compare_operand\" \"\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n@@ -6866,7 +6866,7 @@\n \n (define_expand \"cbranchdi4\"\n   [(set (pc) (if_then_else\n-\t      (match_operator 0 \"arm_comparison_operator\"\n+\t      (match_operator 0 \"expandable_comparison_operator\"\n \t       [(match_operand:DI 1 \"cmpdi_operand\" \"\")\n \t        (match_operand:DI 2 \"cmpdi_operand\" \"\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n@@ -7721,7 +7721,7 @@\n \n (define_expand \"cstoresi4\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(match_operator:SI 1 \"arm_comparison_operator\"\n+\t(match_operator:SI 1 \"expandable_comparison_operator\"\n \t [(match_operand:SI 2 \"s_register_operand\" \"\")\n \t  (match_operand:SI 3 \"reg_or_int_operand\" \"\")]))]\n   \"TARGET_32BIT || TARGET_THUMB1\"\n@@ -7857,7 +7857,7 @@\n \n (define_expand \"cstoresf4\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(match_operator:SI 1 \"arm_comparison_operator\"\n+\t(match_operator:SI 1 \"expandable_comparison_operator\"\n \t [(match_operand:SF 2 \"s_register_operand\" \"\")\n \t  (match_operand:SF 3 \"arm_float_compare_operand\" \"\")]))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n@@ -7867,7 +7867,7 @@\n \n (define_expand \"cstoredf4\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(match_operator:SI 1 \"arm_comparison_operator\"\n+\t(match_operator:SI 1 \"expandable_comparison_operator\"\n \t [(match_operand:DF 2 \"s_register_operand\" \"\")\n \t  (match_operand:DF 3 \"arm_float_compare_operand\" \"\")]))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n@@ -7877,7 +7877,7 @@\n \n (define_expand \"cstoredi4\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(match_operator:SI 1 \"arm_comparison_operator\"\n+\t(match_operator:SI 1 \"expandable_comparison_operator\"\n \t [(match_operand:DI 2 \"cmpdi_operand\" \"\")\n \t  (match_operand:DI 3 \"cmpdi_operand\" \"\")]))]\n   \"TARGET_32BIT\"\n@@ -7997,7 +7997,7 @@\n \n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SI (match_operand 1 \"arm_comparison_operator\" \"\")\n+\t(if_then_else:SI (match_operand 1 \"expandable_comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"arm_not_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"arm_not_operand\" \"\")))]\n   \"TARGET_32BIT\"\n@@ -8017,7 +8017,7 @@\n \n (define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SF (match_operand 1 \"arm_comparison_operator\" \"\")\n+\t(if_then_else:SF (match_operand 1 \"expandable_comparison_operator\" \"\")\n \t\t\t (match_operand:SF 2 \"s_register_operand\" \"\")\n \t\t\t (match_operand:SF 3 \"nonmemory_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n@@ -8043,7 +8043,7 @@\n \n (define_expand \"movdfcc\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(if_then_else:DF (match_operand 1 \"arm_comparison_operator\" \"\")\n+\t(if_then_else:DF (match_operand 1 \"expandable_comparison_operator\" \"\")\n \t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n \t\t\t (match_operand:DF 3 \"arm_float_add_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP_DOUBLE)\""}, {"sha": "8b4a6773936b97ede8b2573a84a6c174dcccd39c", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "patch": "@@ -249,9 +249,14 @@\n \n ;; True for integer comparisons and, if FP is active, for comparisons\n ;; other than LTGT or UNEQ.\n+(define_special_predicate \"expandable_comparison_operator\"\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,\n+\t       unordered,ordered,unlt,unle,unge,ungt\"))\n+\n+;; Likewise, but only accept comparisons that are directly supported\n+;; by ARM condition codes.\n (define_special_predicate \"arm_comparison_operator\"\n-  (and (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,\n-\t\t    unordered,ordered,unlt,unle,unge,ungt\")\n+  (and (match_operand 0 \"expandable_comparison_operator\")\n        (match_test \"maybe_get_arm_condition_code (op) != ARM_NV\")))\n \n (define_special_predicate \"lt_ge_comparison_operator\""}, {"sha": "1942dfc0f45469ec66b207ac0d9a46b8d9b5c8cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "patch": "@@ -1,3 +1,8 @@\n+2011-09-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/arm/cmp-1.c: New test.\n+\t* gcc.target/arm/cmp-2.c: Likewise.\n+\n 2011-09-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41733"}, {"sha": "0d6b7c26616bf3703a96c161e2bc2f7fe5716f98", "filename": "gcc/testsuite/gcc.target/arm/cmp-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-1.c?ref=aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"__aeabi\" } } */\n+int x, y;\n+\n+#define TEST_EXPR(NAME, ARGS, EXPR)\t\t\t\\\n+  int NAME##1 ARGS { return (EXPR); }\t\t\t\\\n+  int NAME##2 ARGS { return !(EXPR); }\t\t\t\\\n+  int NAME##3 ARGS { return (EXPR) ? x : y; }\t\t\\\n+  void NAME##4 ARGS { if (EXPR) x++; }\t\t\t\\\n+  void NAME##5 ARGS { if (!(EXPR)) x++; }\n+\n+#define TEST(NAME, TYPE, OPERATOR) \\\n+  TEST_EXPR (NAME##_rr, (TYPE a1, TYPE a2), a1 OPERATOR a2)\t\\\n+  TEST_EXPR (NAME##_rm, (TYPE a1, TYPE *a2), a1 OPERATOR *a2)\t\\\n+  TEST_EXPR (NAME##_mr, (TYPE *a1, TYPE a2), *a1 OPERATOR a2)\t\\\n+  TEST_EXPR (NAME##_mm, (TYPE *a1, TYPE *a2), *a1 OPERATOR *a2) \\\n+  TEST_EXPR (NAME##_rc, (TYPE a1), a1 OPERATOR 100)\t\t\\\n+  TEST_EXPR (NAME##_cr, (TYPE a1), 100 OPERATOR a1)\n+\n+#define TEST_OP(NAME, OPERATOR) \\\n+  TEST (sc_##NAME, signed char, OPERATOR)\t\t\\\n+  TEST (uc_##NAME, unsigned char, OPERATOR)\t\t\\\n+  TEST (ss_##NAME, short, OPERATOR)\t\t\t\\\n+  TEST (us_##NAME, unsigned short, OPERATOR)\t\t\\\n+  TEST (si_##NAME, int, OPERATOR)\t\t\t\\\n+  TEST (ui_##NAME, unsigned int, OPERATOR)\t\t\\\n+  TEST (sll_##NAME, long long, OPERATOR)\t\t\\\n+  TEST (ull_##NAME, unsigned long long, OPERATOR)\n+\n+TEST_OP (eq, ==)\n+TEST_OP (ne, !=)\n+TEST_OP (lt, <)\n+TEST_OP (gt, >)\n+TEST_OP (le, <=)\n+TEST_OP (ge, >=)"}, {"sha": "ed6b609ca86191779f1feb318c99e8fc5318e76e", "filename": "gcc/testsuite/gcc.target/arm/cmp-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c?ref=aa0b3f8f8d4748aaaee4892ed0d5d85abb2e86f6", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n+/* { dg-options \"-O -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"__aeabi\" } } */\n+int x, y;\n+\n+#define EQ(X, Y) ((X) == (Y))\n+#define NE(X, Y) ((X) != (Y))\n+#define LT(X, Y) ((X) < (Y))\n+#define GT(X, Y) ((X) > (Y))\n+#define LE(X, Y) ((X) <= (Y))\n+#define GE(X, Y) ((X) >= (Y))\n+\n+#define TEST_EXPR(NAME, ARGS, EXPR)\t\t\t\\\n+  int NAME##1 ARGS { return (EXPR); }\t\t\t\\\n+  int NAME##2 ARGS { return !(EXPR); }\t\t\t\\\n+  int NAME##3 ARGS { return (EXPR) ? x : y; }\t\t\\\n+  void NAME##4 ARGS { if (EXPR) x++; }\t\t\t\\\n+  void NAME##5 ARGS { if (!(EXPR)) x++; }\n+\n+#define TEST(NAME, TYPE, OPERATOR) \\\n+  TEST_EXPR (NAME##_rr, (TYPE a1, TYPE a2), OPERATOR (a1, a2))\t\t\\\n+  TEST_EXPR (NAME##_rm, (TYPE a1, TYPE *a2), OPERATOR (a1, *a2))\t\\\n+  TEST_EXPR (NAME##_mr, (TYPE *a1, TYPE a2), OPERATOR (*a1, a2))\t\\\n+  TEST_EXPR (NAME##_mm, (TYPE *a1, TYPE *a2), OPERATOR (*a1, *a2))\t\\\n+  TEST_EXPR (NAME##_rc, (TYPE a1), OPERATOR (a1, 100))\t\t\t\\\n+  TEST_EXPR (NAME##_cr, (TYPE a1), OPERATOR (100, a1))\n+\n+#define TEST_OP(NAME, OPERATOR) \\\n+  TEST (f_##NAME, float, OPERATOR)\t\t\\\n+  TEST (d_##NAME, double, OPERATOR)\t\t\\\n+  TEST (ld_##NAME, long double, OPERATOR)\n+\n+TEST_OP (eq, EQ)\n+TEST_OP (ne, NE)\n+TEST_OP (lt, LT)\n+TEST_OP (gt, GT)\n+TEST_OP (le, LE)\n+TEST_OP (ge, GE)\n+TEST_OP (blt, __builtin_isless)\n+TEST_OP (bgt, __builtin_isgreater)\n+TEST_OP (ble, __builtin_islessequal)\n+TEST_OP (bge, __builtin_isgreaterequal)\n+/* This one should be expanded into separate ordered and equality\n+   comparisons.  */\n+TEST_OP (blg, __builtin_islessgreater)\n+TEST_OP (bun, __builtin_isunordered)"}]}