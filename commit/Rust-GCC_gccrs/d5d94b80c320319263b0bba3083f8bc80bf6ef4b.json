{"sha": "d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkOTRiODBjMzIwMzE5MjYzYjBiYmEzMDgzZjhiYzgwYmY2ZWY0Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-09-21T10:01:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-09-21T10:01:16Z"}, "message": "rs6000.c (rs6000_function_ok_for_sibcall): Return false if the call takes a static chain.\n\n\t* config/rs6000/rs6000.c (rs6000_function_ok_for_sibcall): Return false\n\tif the call takes a static chain.\n\nFrom-SVN: r264463", "tree": {"sha": "b16000ec8301101b981930b4691f00e668e7ba76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b16000ec8301101b981930b4691f00e668e7ba76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/comments", "author": null, "committer": null, "parents": [{"sha": "512cc0151207de4c7ff3a84f040f730fe0d52458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512cc0151207de4c7ff3a84f040f730fe0d52458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512cc0151207de4c7ff3a84f040f730fe0d52458"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "d33af3eb89500cda7795c818af133af9ca583157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "patch": "@@ -1,3 +1,8 @@\n+2018-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_function_ok_for_sibcall): Return false\n+\tif the call takes a static chain.\n+\n 2018-09-21  Martin Liska  <mliska@suse.cz>\n \n \t* auto-profile.c (autofdo_source_profile::read): Do not"}, {"sha": "79dd2f648e8e8ae88d3c0f09faf2d240df0e7645", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "patch": "@@ -24331,6 +24331,12 @@ rs6000_function_ok_for_sibcall (tree decl, tree exp)\n {\n   tree fntype;\n \n+  /* The sibcall epilogue may clobber the static chain register.\n+     ??? We could work harder and avoid that, but it's probably\n+     not worth the hassle in practice.  */\n+  if (CALL_EXPR_STATIC_CHAIN (exp))\n+    return false;\n+\n   if (decl)\n     fntype = TREE_TYPE (decl);\n   else"}, {"sha": "b0664206895140271ed6f3c397b408e71d0cad55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "patch": "@@ -1,3 +1,10 @@\n+2018-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/nested-func-11.c: New test.\n+\n+\t* lib/target-supports.exp (check_effective_target_tls_runtime): Make\n+\tmore robust and remove target-specific handling.\n+\n 2018-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20180921-1.c: New test."}, {"sha": "01096b4147f6a8e082d5520be8649aaaf561beb2", "filename": "gcc/testsuite/gcc.dg/nested-func-11.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-11.c?ref=d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+int __attribute__((noipa)) foo (int i)\n+{\n+  int a;\n+\n+  void __attribute__((noipa)) nested2 (int i)\n+  {\n+    a = i;\n+  }\n+\n+  void  __attribute__((noipa)) nested1 (int i)\n+  {\n+    int b[32];\n+\n+    for (int j = 0; j < 32; j++)\n+      b[j] = i + j;\n+\n+    nested2 (b[i]);\n+  }\n+\n+  nested1 (i);\n+\n+  return a;\n+}\n+\n+int main (void)\n+{\n+  if (foo (4) != 8)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "57bfe9ccd2f58a85e48c2158f7209c97e694df84", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d94b80c320319263b0bba3083f8bc80bf6ef4b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d5d94b80c320319263b0bba3083f8bc80bf6ef4b", "patch": "@@ -879,13 +879,8 @@ proc check_effective_target_tls_emulated {} {\n # Return 1 if TLS executables can run correctly, 0 otherwise.\n \n proc check_effective_target_tls_runtime {} {\n-    # The runtime does not have TLS support, but just\n-    # running the test below is insufficient to show this.\n-    if { [istarget msp430-*-*] || [istarget visium-*-*] } {\n-\treturn 0\n-    }\n     return [check_runtime tls_runtime {\n-\t__thread int thr = 0;\n+\t__thread int thr __attribute__((tls_model(\"global-dynamic\"))) = 0;\n \tint main (void) { return thr; }\n     } [add_options_for_tls \"\"]]\n }"}]}