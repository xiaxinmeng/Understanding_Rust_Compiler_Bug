{"sha": "ed974488991256c50f151ccfb271e198072dfc4d", "node_id": "C_kwDOANBUbNoAKGVkOTc0NDg4OTkxMjU2YzUwZjE1MWNjZmIyNzFlMTk4MDcyZGZjNGQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-02T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-02T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "3335370aa90324f4e95c82b4c82245a208171cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3335370aa90324f4e95c82b4c82245a208171cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed974488991256c50f151ccfb271e198072dfc4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed974488991256c50f151ccfb271e198072dfc4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed974488991256c50f151ccfb271e198072dfc4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed974488991256c50f151ccfb271e198072dfc4d/comments", "author": null, "committer": null, "parents": [{"sha": "fbd7665360d259434f378f68cb2680b17d6cab57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd7665360d259434f378f68cb2680b17d6cab57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd7665360d259434f378f68cb2680b17d6cab57"}], "stats": {"total": 295, "additions": 294, "deletions": 1}, "files": [{"sha": "19a272a73852a762b440ba7cc2cb052bbbdb641c", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,7 @@\n+2022-07-01  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2022-06-30  Cui,Lili  <lili.cui@intel.com>\n \n \tRevert:"}, {"sha": "33642b6e783346dfd92b8aa399c4405b2c6ef272", "filename": "gcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,115 @@\n+2022-07-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* wide-int.h (struct trailing_wide_ints): Add m_num_elements.\n+\t(trailing_wide_ints::set_precision): Add num_elements argument.\n+\t(trailing_wide_ints::extra_size): Same.\n+\n+2022-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*andn<mode>3_doubleword_bmi):\n+\tUse \"r\" constraint for operand 1.\n+\n+2022-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-into-ssa.cc (rewrite_update_dom_walker::before_dom_children):\n+\tDo not look at interesting_blocks which is a copy of\n+\tblocks_to_update.\n+\t(update_ssa): Do not initialize it.\n+\t(pass_build_ssa::execute): Set interesting_blocks to NULL\n+\tafter releasing it.\n+\n+2022-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.cc (vn_reference_lookup_3): Revert\n+\tback to using maybe_ne (off, -1).\n+\n+2022-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.cc (vn_nary_op_insert_into): Make\n+\tchecking dominance check conditional on flag_checking.\n+\n+2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/gcn-protos.h (print_operand_address): Remove register\n+\tkeyword on 'rtx addr' argument.\n+\n+2022-07-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*andn<mode>3_doubleword_bmi): Add constraints\n+\tto post-reload define_insn_and_split.\n+\n+2022-07-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/106144\n+\t* wide-int.cc (wi::shifted_mask): If end >= prec, return right after\n+\temitting element for shift or if shift is 0 first element after start.\n+\t(wide_int_cc_tests): Add tests for equivalency of wi::mask and\n+\twi::shifted_mask with 0 start.\n+\n+2022-07-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106122\n+\t* config/i386/i386.md (peephole2): Avoid generating pop %esp\n+\twhen optimizing for size.\n+\n+2022-07-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (general_szext_operand): Add TImode\n+\tsupport using x86_64_hilo_general_operand predicate.\n+\t(*cmp<dwi>_doubleword): Use x86_64_hilo_general_operand predicate.\n+\t(*add<dwi>3_doubleword): Improved optimization of zero addition.\n+\t(and<mode>3): Use SDWIM mode iterator to add support for double\n+\tword bit-wise AND in TImode.  Use force_reg when double word\n+\timmediate operand isn't x86_64_hilo_general_operand.\n+\t(and<dwi>3_doubleword): Generalized from anddi3_doubleword and\n+\tconverted into a post-reload splitter.\n+\t(*andndi3_doubleword): Previous define_insn deleted.\n+\t(*andn<mode>3_doubleword_bmi): New define_insn_and_split for\n+\tTARGET_BMI that splits post-reload.\n+\t(*andn<mode>3_doubleword): New define_insn_and_split for\n+\t!TARGET_BMI, that lowers/splits before reload.\n+\t(<any_or><mode>3): Use SDWIM mode iterator to add suppport for\n+\tdouble word bit-wise XOR and bit-wise IOR in TImode.  Use\n+\tforce_reg when double word immediate operand isn't\n+\tx86_64_hilo_general_operand.\n+\t(*<any_or>di3_doubleword): Generalized from <any_or>di3_doubleword.\n+\t(one_cmpl<mode>2): Use SDWIM mode iterator to add support for\n+\tdouble word bit-wise NOT in TImode.\n+\t(one_cmpl<dwi>2_doubleword): Generalize from one_cmpldi2_doubleword\n+\tand converted into a post-reload splitter.\n+\n+2022-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/105874\n+\t* expr.cc (expand_expr_real_1) <normal_inner_ref>: Force\n+\tEXPAND_MEMORY for the expansion of the inner reference only\n+\tin the usual cases where a memory reference is required.\n+\n+2022-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106131\n+\t* tree-ssa-sccvn.cc (vn_reference_lookup_3): Force alias-set\n+\tzero when offsetting the read looking through an aggregate\n+\tcopy.\n+\n+2022-07-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/106126\n+\t* gimple-if-to-switch.cc (struct condition_info): Save\n+\thas_side_effect.\n+\t(find_conditions): Parse all BBs.\n+\t(pass_if_to_switch::execute): Allow only side effects for first\n+\tBB.\n+\n+2022-07-01  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/i386-common.cc (OPTION_MASK_ISA2_AVX512F_UNSET):\n+\tAdd OPTION_MASK_ISA2_AVX512BW_UNSET, remove\n+\tOPTION_MASK_ISA2_AVX512BF16_UNSET and\n+\tOPTION_MASK_ISA2_AVX512FP16_UNSET.\n+\n 2022-06-30  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR lto/106129"}, {"sha": "eb05de3bc0c9ac12af853b262b25a568b21d41d6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1 +1 @@\n-20220701\n+20220702"}, {"sha": "5beb46e2306bf248946376f4ef611a026d219aa7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,8 @@\n+2022-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106111\n+\t* c-common.h (enum rid): Update RID_LAST_CXX20.\n+\n 2022-06-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* known-headers.cc (get_stdlib_header_for_name): Add <time.h>"}, {"sha": "8a0b71a897bee84074bc7689ae97559cb881cbf6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,9 @@\n+2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-parser.cc (c_parser_omp_target_enter_data,\n+\tc_parser_omp_target_exit_data): Accept tofrom\n+\tmap-type modifier but use 'to' / 'from' internally.\n+\n 2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-decl.cc (implicitly_declare): Add auto_diagnostic_group to"}, {"sha": "28e030f68d60378edf0c4e43c577746da748f14b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,46 @@\n+2022-07-01  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* parser.cc (cp_token_is_module_directive): New function\n+\trefactoring common code.\n+\t(cp_parser_skip_to_closing_parenthesis_1): Use the new function.\n+\t(cp_parser_skip_to_end_of_statement): Likewise.\n+\t(cp_parser_skip_to_end_of_block_or_statement): Likewise.\n+\t(cp_parser_declaration): Likewise.\n+\n+2022-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105550\n+\t* constexpr.cc (cxx_eval_conditional_expression): Strip TARGET_EXPRs.\n+\n+2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parser.cc (cp_parser_omp_target_enter_data,\n+\tcp_parser_omp_target_exit_data): Accept tofrom\n+\tmap-type modifier but use 'to' / 'from' internally.\n+\n+2022-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106111\n+\t* parser.cc (cp_lexer_get_preprocessor_token): Also warn about\n+\tRID_ALIGNOF, RID_ALIGNAS, RID_THREAD.\n+\n+2022-07-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105779\n+\t* call.cc (resolve_args): Use complain.\n+\n+2022-07-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.cc (missing_template_diag): Split out...\n+\t(cp_parser_id_expression): ...from here.\n+\n+2022-07-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106024\n+\t* parser.cc (missing_template_diag): Factor out...\n+\t(cp_parser_id_expression): ...from here.\n+\t(cp_parser_lookup_name): Don't look in dependent object_type.\n+\n 2022-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc (module_state::write_define): Drop located param."}, {"sha": "ea9354c4c7ff42bb4e56793cfaa28662189f62f8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,11 @@\n+2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.cc (show_omp_namelist): For the map-type,\n+\talso handle the always modifer and release/delete.\n+\t* openmp.cc (resolve_omp_clauses): Accept tofrom\n+\tmap-type modifier for target enter/exit data,\n+\tbut use 'to' / 'from' internally.\n+\n 2022-06-30  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "04a986e6130e5d7694fd3d35ae598c448dcc7dd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,53 @@\n+2022-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105550\n+\t* g++.dg/cpp1y/nsdmi-aggr16.C: Remove FIXME.\n+\t* g++.dg/cpp1y/nsdmi-aggr17.C: Remove FIXME.\n+\t* g++.dg/cpp0x/constexpr-elision1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-elision1.C: New test.\n+\n+2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-c++-common/gomp/target-data-2.c: New test.\n+\t* c-c++-common/gomp/target-data-3.c: New test.\n+\t* gfortran.dg/gomp/target-data-1.f90: New test.\n+\t* gfortran.dg/gomp/target-data-2.f90: New test.\n+\n+2022-07-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106111\n+\t* g++.dg/cpp0x/keywords1.C: New test.\n+\t* g++.dg/cpp2a/keywords1.C: New test.\n+\n+2022-07-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106024\n+\t* g++.dg/cpp2a/lambda-generic10.C: New test.\n+\n+2022-07-01  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tRevert:\n+\t2022-06-30  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR testsuite/102690\n+\t* g++.dg/warn/Warray-bounds-16.C: XFAIL only on lp64 for the\n+\twarning.\n+\n+2022-07-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106122\n+\t* gcc.target/i386/pr106122.c: New test case.\n+\n+2022-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106131\n+\t* g++.dg/torture/pr106131.C: New testcase.\n+\n+2022-07-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/106126\n+\t* gcc.dg/tree-ssa/pr106126.c: New test.\n+\n 2022-06-30  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "6c4c8d2cfb8346cc7c84f23e80d6161b126f1a70", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,8 @@\n+2022-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.2): Mark target enter/exit data\n+\twith fromto as implemented.\n+\n 2022-06-28  Martin Liska  <mliska@suse.cz>\n \n \t* acinclude.m4: Fix typo in mold linker detection."}, {"sha": "f84e4076ee5c3a50b0a61dd696a7a197e8de8025", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,8 @@\n+2022-07-01  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR demangler/105039\n+\t* rust-demangle.c (demangle_const): Add recursion limit.\n+\n 2022-06-26  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* configure.ac: Add AC_CONFIG_MACRO_DIRS call."}, {"sha": "90c5d78b083a9640860a0d39641bd86cc6e9e5eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,50 @@\n+2022-07-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106162\n+\t* include/Makefile.am (largefile-config.h): Add\n+\tstamp-${host_alias} prerequisite.\n+\t* include/Makefile.in: Regenerate.\n+\n+2022-07-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_ops.h: Add nodiscard to all pure functions.\n+\t* include/experimental/bits/fs_ops.h: Likewise.\n+\t* testsuite/27_io/filesystem/operations/all.cc: Do not discard\n+\tresults of absolute and canonical.\n+\t* testsuite/27_io/filesystem/operations/absolute.cc: Cast\n+\tdiscarded result to void.\n+\t* testsuite/27_io/filesystem/operations/canonical.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/exists.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/is_empty.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/read_symlink.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/status.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/symlink_status.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/operations/canonical.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/operations/exists.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/operations/is_empty.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/operations/read_symlink.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n+\tLikewise.\n+\n+2022-07-01  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* configure: Regnerate.\n+\t* configure.ac (newlib, *-rtems*): Enable TLS support for all RTEMS\n+\ttargets except bfin, lm32, mips, moxie, or1k, and v850.\n+\tFor all RTEMS targets, define HAVE_ALIGNED_ALLOC, HAVE_AT_QUICK_EXIT,\n+\tHAVE_LINK, HAVE_POLL, HAVE_QUICK_EXIT, HAVE_READLINK, HAVE_SETENV,\n+\tHAVE_SLEEP, HAVE_SOCKATMARK, HAVE_STRERROR_L, HAVE_SYMLINK,\n+\tHAVE_TRUNCATE, and HAVE_USLEEP.\n+\t* crossconfig.m4 (*-rtems*): Remove.\n+\n 2022-06-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/utility.h: Fix comment typos."}, {"sha": "e3dd55e572a00c212bae867934d19a93afecd2f1", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed974488991256c50f151ccfb271e198072dfc4d/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed974488991256c50f151ccfb271e198072dfc4d/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=ed974488991256c50f151ccfb271e198072dfc4d", "patch": "@@ -1,3 +1,11 @@\n+2022-07-01  Pekka Sepp\u00e4nen  <pexu@gcc.mail.kapsi.fi>\n+\n+\tPR lto/106118\n+\t* configure.ac: Move -pthread from here...\n+\t* Makefile.am: ...to here.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Likewise.\n+\n 2022-06-27  Martin Liska  <mliska@suse.cz>\n \n \t* lto-plugin.c (plugin_lock): New lock."}]}