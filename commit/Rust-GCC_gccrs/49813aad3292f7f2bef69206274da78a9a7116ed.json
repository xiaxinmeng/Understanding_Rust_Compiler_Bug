{"sha": "49813aad3292f7f2bef69206274da78a9a7116ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4MTNhYWQzMjkyZjdmMmJlZjY5MjA2Mjc0ZGE3OGE5YTcxMTZlZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T18:49:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T18:49:33Z"}, "message": "aarch64: Don't emit -Wpsabi note when ABI was never affected [PR91710]\n\nAs the following testcase shows, we emit a -Wpsabi note about argument\npassing change since GCC 9, but in reality the ABI didn't change.\nThe alignment is 8 bits in GCC < 9 and 32 bits in GCC >= 9 and\nthe aarch64_function_arg_alignment returns in that case:\nreturn MIN (MAX (alignment, PARM_BOUNDARY), STACK_BOUNDARY);\nso when both the old and new alignment are smaller or equal to PARM_BOUNDARY\n(or both are larger than STACK_BOUNDARY, just in theory), even when the new\none is bigger, it doesn't change the argument passing.\n\nSo, the following patch changes aarch64_function_arg_alignment to tell the\ncallers the exact old alignmentm so that they can test it if needed.\nThe other aarch64_function_arg_alignment callers either check the\nalignment for equality against 16-byte alignment (when old alignment was\nsmaller than that and the new one is 16-byte, we want to emit -Wpsabi\nin all the cases) or the va_arg case which I think is ok now too.\n\n2021-04-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/91710\n\t* config/aarch64/aarch64.c (aarch64_function_arg_alignment): Change\n\tabi_break argument from bool * to unsigned *, store there the pre-GCC 9\n\talignment.\n\t(aarch64_layout_arg, aarch64_gimplify_va_arg_expr): Adjust callers.\n\t(aarch64_function_arg_regno_p): Likewise.  Only emit -Wpsabi note if\n\tthe old and new alignment after applying MIN/MAX to it is different.\n\n\t* gcc.target/aarch64/pr91710.c: New test.", "tree": {"sha": "a539db71a7c6c3444101ad4372dd2a48f6788f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a539db71a7c6c3444101ad4372dd2a48f6788f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49813aad3292f7f2bef69206274da78a9a7116ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49813aad3292f7f2bef69206274da78a9a7116ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49813aad3292f7f2bef69206274da78a9a7116ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49813aad3292f7f2bef69206274da78a9a7116ed/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1493f0603262a7dc1114d9827353e9810e63dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1493f0603262a7dc1114d9827353e9810e63dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1493f0603262a7dc1114d9827353e9810e63dc"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "12625a4bee3991f836cc13dc92922c17d4c0cf65", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49813aad3292f7f2bef69206274da78a9a7116ed/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49813aad3292f7f2bef69206274da78a9a7116ed/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=49813aad3292f7f2bef69206274da78a9a7116ed", "patch": "@@ -6337,9 +6337,9 @@ aarch64_vfp_is_call_candidate (cumulative_args_t pcum_v, machine_mode mode,\n \n static unsigned int\n aarch64_function_arg_alignment (machine_mode mode, const_tree type,\n-\t\t\t\tbool *abi_break)\n+\t\t\t\tunsigned int *abi_break)\n {\n-  *abi_break = false;\n+  *abi_break = 0;\n   if (!type)\n     return GET_MODE_ALIGNMENT (mode);\n \n@@ -6381,7 +6381,7 @@ aarch64_function_arg_alignment (machine_mode mode, const_tree type,\n \n   if (bitfield_alignment > alignment)\n     {\n-      *abi_break = true;\n+      *abi_break = alignment;\n       return bitfield_alignment;\n     }\n \n@@ -6403,7 +6403,7 @@ aarch64_layout_arg (cumulative_args_t pcum_v, const function_arg_info &arg)\n   int ncrn, nvrn, nregs;\n   bool allocate_ncrn, allocate_nvrn;\n   HOST_WIDE_INT size;\n-  bool abi_break;\n+  unsigned int abi_break;\n \n   /* We need to do this once per argument.  */\n   if (pcum->aapcs_arg_processed)\n@@ -6721,14 +6721,19 @@ aarch64_function_arg_regno_p (unsigned regno)\n static unsigned int\n aarch64_function_arg_boundary (machine_mode mode, const_tree type)\n {\n-  bool abi_break;\n+  unsigned int abi_break;\n   unsigned int alignment = aarch64_function_arg_alignment (mode, type,\n \t\t\t\t\t\t\t   &abi_break);\n+  alignment = MIN (MAX (alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n   if (abi_break & warn_psabi)\n-    inform (input_location, \"parameter passing for argument of type \"\n-\t    \"%qT changed in GCC 9.1\", type);\n+    {\n+      abi_break = MIN (MAX (abi_break, PARM_BOUNDARY), STACK_BOUNDARY);\n+      if (alignment != abi_break)\n+\tinform (input_location, \"parameter passing for argument of type \"\n+\t\t\"%qT changed in GCC 9.1\", type);\n+    }\n \n-  return MIN (MAX (alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n+  return alignment;\n }\n \n /* Implement TARGET_GET_RAW_RESULT_MODE and TARGET_GET_RAW_ARG_MODE.  */\n@@ -18253,7 +18258,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t  f_stack, NULL_TREE);\n   size = int_size_in_bytes (type);\n \n-  bool abi_break;\n+  unsigned int abi_break;\n   align\n     = aarch64_function_arg_alignment (mode, type, &abi_break) / BITS_PER_UNIT;\n "}, {"sha": "496eb505a71242abb32e19b83ce185cd500d11cf", "filename": "gcc/testsuite/gcc.target/aarch64/pr91710.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49813aad3292f7f2bef69206274da78a9a7116ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr91710.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49813aad3292f7f2bef69206274da78a9a7116ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr91710.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr91710.c?ref=49813aad3292f7f2bef69206274da78a9a7116ed", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/91710 */\n+/* { dg-do compile } */\n+\n+struct S { unsigned int i:4; };\n+\n+unsigned int test1(struct S s) {\t/* { dg-bogus \"parameter passing for argument of type\" } */\n+  return s.i;\n+}\n+\n+unsigned int test2(unsigned x, struct S s) {\t/* { dg-bogus \"parameter passing for argument of type\" } */\n+  return x - s.i;\n+}\n+\n+unsigned int test3(unsigned x, unsigned y, struct S s) {\t/* { dg-bogus \"parameter passing for argument of type\" } */\n+  return x - y - s.i;\n+}"}]}