{"sha": "ff50231797977a56a0d256db645f1e004c6acf00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1MDIzMTc5Nzk3N2E1NmEwZDI1NmRiNjQ1ZjFlMDA0YzZhY2YwMA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2017-05-19T14:39:44Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-05-19T14:39:44Z"}, "message": "c-format.c (locus): Move out of function scope, add GTY attribute.\n\ngcc/c-family:\n2017-05-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-format.c (locus): Move out of function scope,\n        add GTY attribute.\n\ngcc/cp:\n2017-05-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * config-lang.in (gtfiles): Add c-family/c-format.c,\n        except.c, init.c, lambda.c and friend.c.\n        * class.c (dvirt_fn): Move out of function scope,\n        add GTY attribute.\n        * except.c (fn1-5, throw_fn, rethrow_fn, spec): Likewise.\n        * init.c (fn): Likewise.\n        * lambda.c (ptr_id, max_id): Likewise.\n        * friend.c (global_friend): Add GTY attribute.\n\nFrom-SVN: r248290", "tree": {"sha": "643c9cb26148aa80dea4f81997110158d3bee05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643c9cb26148aa80dea4f81997110158d3bee05f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff50231797977a56a0d256db645f1e004c6acf00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff50231797977a56a0d256db645f1e004c6acf00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff50231797977a56a0d256db645f1e004c6acf00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff50231797977a56a0d256db645f1e004c6acf00/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f2f4050aacf448f1e63a844845a1d0e7cde59ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2f4050aacf448f1e63a844845a1d0e7cde59ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2f4050aacf448f1e63a844845a1d0e7cde59ca"}], "stats": {"total": 126, "additions": 72, "deletions": 54}, "files": [{"sha": "1db3c33194858d9104e465dc96f129f89453aed0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -1,3 +1,8 @@\n+2017-05-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-format.c (locus): Move out of function scope,\n+\tadd GTY attribute.\n+\n 2017-05-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-opts.c (class_dump_file, class_dump_flags): Delete."}, {"sha": "a561d0e30e4fa878bdfa6a52d9b13e6f8e526035", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -55,6 +55,7 @@ struct function_format_info\n \n /* Initialized in init_dynamic_diag_info.  */\n static GTY(()) tree local_tree_type_node;\n+static GTY(()) tree locus;\n \n static bool decode_format_attr (tree, function_format_info *, int);\n static int decode_format_type (const char *);\n@@ -3734,8 +3735,6 @@ init_dynamic_asm_fprintf_info (void)\n static void\n init_dynamic_gfc_info (void)\n {\n-  static tree locus;\n-\n   if (!locus)\n     {\n       static format_char_info *gfc_fci;"}, {"sha": "a8613a159ca0969040d78781f9db4b5262f22103", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -1,3 +1,14 @@\n+2017-05-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* config-lang.in (gtfiles): Add c-family/c-format.c,\n+\texcept.c, init.c, lambda.c and friend.c.\n+\t* class.c (dvirt_fn): Move out of function scope,\n+\tadd GTY attribute.\n+\t* except.c (fn1-5, throw_fn, rethrow_fn, spec): Likewise.\n+\t* init.c (fn): Likewise.\n+\t* lambda.c (ptr_id, max_id): Likewise.\n+\t* friend.c (global_friend): Add GTY attribute.\n+\n 2017-05-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* call.c (add_list_candidates): Use OVL_FIRST."}, {"sha": "984fb09ff4b4c4e8e75d0e145f03807eaec71137", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -9547,6 +9547,7 @@ dfs_accumulate_vtbl_inits (tree binfo,\n }\n \n static GTY(()) tree abort_fndecl_addr;\n+static GTY(()) tree dvirt_fn;\n \n /* Construct the initializer for BINFO's virtual function table.  BINFO\n    is part of the hierarchy dominated by T.  If we're building a\n@@ -9720,8 +9721,6 @@ build_vtbl_initializer (tree binfo,\n \t  /* Likewise for deleted virtuals.  */\n \t  else if (DECL_DELETED_FN (fn_original))\n \t    {\n-\t      static tree dvirt_fn;\n-\n \t      if (!dvirt_fn)\n \t\t{\n \t\t  tree name = get_identifier (\"__cxa_deleted_virtual\");"}, {"sha": "9390c96c510d9a6d823656aead22f7bd9a8d9e8e", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -29,4 +29,4 @@ compilers=\"cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3\"\n \n-gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c \\$(srcdir)/cp/except.c \\$(srcdir)/cp/vtable-class-hierarchy.c \\$(srcdir)/cp/constexpr.c \\$(srcdir)/cp/cp-gimplify.c\"\n+gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.h \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-family/c-common.c \\$(srcdir)/c-family/c-common.h \\$(srcdir)/c-family/c-objc.h \\$(srcdir)/c-family/c-lex.c \\$(srcdir)/c-family/c-pragma.h \\$(srcdir)/c-family/c-pragma.c \\$(srcdir)/c-family/c-format.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c \\$(srcdir)/cp/cp-lang.c \\$(srcdir)/cp/except.c \\$(srcdir)/cp/vtable-class-hierarchy.c \\$(srcdir)/cp/constexpr.c \\$(srcdir)/cp/cp-gimplify.c \\$(srcdir)/cp/init.c \\$(srcdir)/cp/friend.c \\$(srcdir)/cp/lambda.c\""}, {"sha": "da0be843ca7cc90216886c2f4b9949d160f4e1a6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 41, "deletions": 46, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -42,6 +42,15 @@ static int complete_ptr_ref_or_void_ptr_p (tree, tree);\n static bool is_admissible_throw_operand_or_catch_parameter (tree, bool);\n static int can_convert_eh (tree, tree);\n \n+static GTY(()) tree fn1;\n+static GTY(()) tree fn2;\n+static GTY(()) tree fn3;\n+static GTY(()) tree fn4;\n+static GTY(()) tree fn5;\n+static GTY(()) tree throw_fn;\n+static GTY(()) tree rethrow_fn;\n+static GTY(()) tree spec;\n+\n /* Sets up all the global eh stuff that needs to be initialized at the\n    start of compilation.  */\n \n@@ -154,20 +163,18 @@ declare_library_fn (tree name, tree return_type, tree parm_type, int ecf_flags)\n static tree\n do_get_exception_ptr (void)\n {\n-  static tree fn;\n-\n-  if (!fn)\n+  if (!fn1)\n     {\n       tree name = get_identifier (\"__cxa_get_exception_ptr\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n-      if (!fn)\n+      fn1 = IDENTIFIER_GLOBAL_VALUE (name);\n+      if (!fn1)\n \t/* Declare void* __cxa_get_exception_ptr (void *) throw().  */\n-\tfn = declare_library_fn\n+\tfn1 = declare_library_fn\n \t  (name, ptr_type_node, ptr_type_node,\n \t   ECF_NOTHROW | ECF_PURE | ECF_LEAF | ECF_TM_PURE);\n     }\n \n-  return cp_build_function_call_nary (fn, tf_warning_or_error,\n+  return cp_build_function_call_nary (fn1, tf_warning_or_error,\n \t\t\t\t      build_exc_ptr (), NULL_TREE);\n }\n \n@@ -177,16 +184,14 @@ do_get_exception_ptr (void)\n static tree\n do_begin_catch (void)\n {\n-  static tree fn;\n-\n-  if (!fn)\n+  if (!fn2)\n     {\n-      tree name = fn = get_identifier (\"__cxa_begin_catch\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n-      if (!fn)\n+      tree name = get_identifier (\"__cxa_begin_catch\");\n+      fn2 = IDENTIFIER_GLOBAL_VALUE (name);\n+      if (!fn2)\n \t{\n \t  /* Declare void* __cxa_begin_catch (void *) throw().  */\n-\t  fn = declare_library_fn\n+\t  fn2 = declare_library_fn\n \t    (name, ptr_type_node, ptr_type_node, ECF_NOTHROW);\n \n \t  /* Create its transactional-memory equivalent.  */\n@@ -198,12 +203,12 @@ do_begin_catch (void)\n \t\titm_fn = declare_library_fn\n \t\t  (itm_name, ptr_type_node, ptr_type_node,\n \t\t   ECF_NOTHROW | ECF_TM_PURE);\n-\t      record_tm_replacement (fn, itm_fn);\n+\t      record_tm_replacement (fn2, itm_fn);\n \t    }\n \t}\n     }\n \n-  return cp_build_function_call_nary (fn, tf_warning_or_error,\n+  return cp_build_function_call_nary (fn2, tf_warning_or_error,\n \t\t\t\t      build_exc_ptr (), NULL_TREE);\n }\n \n@@ -231,17 +236,15 @@ dtor_nothrow (tree type)\n static tree\n do_end_catch (tree type)\n {\n-  static tree fn;\n-\n-  if (!fn)\n+  if (!fn3)\n     {\n       tree name = get_identifier (\"__cxa_end_catch\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n-      if (!fn)\n+      fn3 = IDENTIFIER_GLOBAL_VALUE (name);\n+      if (!fn3)\n \t{\n \t  /* Declare void __cxa_end_catch ().\n \t     This can throw if the destructor for the exception throws.  */\n-\t  fn = push_void_library_fn (name, void_list_node, 0);\n+\t  fn3 = push_void_library_fn (name, void_list_node, 0);\n \n \t  /* Create its transactional-memory equivalent.  */\n \t  if (flag_tm)\n@@ -251,12 +254,12 @@ do_end_catch (tree type)\n \t      if (!itm_fn)\n \t\titm_fn = push_void_library_fn\n \t\t  (itm_name, void_list_node, ECF_TM_PURE);\n-\t      record_tm_replacement (fn, itm_fn);\n+\t      record_tm_replacement (fn3, itm_fn);\n \t    }\n \t}\n     }\n \n-  tree cleanup = cp_build_function_call_vec (fn, NULL, tf_warning_or_error);\n+  tree cleanup = cp_build_function_call_vec (fn3, NULL, tf_warning_or_error);\n   TREE_NOTHROW (cleanup) = dtor_nothrow (type);\n \n   return cleanup;\n@@ -516,17 +519,15 @@ finish_eh_spec_block (tree raw_raises, tree eh_spec_block)\n static tree\n do_allocate_exception (tree type)\n {\n-  static tree fn;\n-\n-  if (!fn)\n+  if (!fn4)\n     {\n       tree name = get_identifier (\"__cxa_allocate_exception\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n-      if (!fn)\n+      fn4 = IDENTIFIER_GLOBAL_VALUE (name);\n+      if (!fn4)\n \t{\n \t  /* Declare void *__cxa_allocate_exception(size_t) throw().  */\n-\t  fn = declare_library_fn (name, ptr_type_node, size_type_node,\n-\t\t\t\t   ECF_NOTHROW | ECF_MALLOC);\n+\t  fn4 = declare_library_fn (name, ptr_type_node, size_type_node,\n+\t\t\t\t    ECF_NOTHROW | ECF_MALLOC);\n \n \t  if (flag_tm)\n \t    {\n@@ -536,12 +537,12 @@ do_allocate_exception (tree type)\n \t\titm_fn = declare_library_fn\n \t\t  (itm_name, ptr_type_node, size_type_node, \n \t\t   ECF_NOTHROW | ECF_MALLOC | ECF_TM_PURE);\n-\t      record_tm_replacement (fn, itm_fn);\n+\t      record_tm_replacement (fn4, itm_fn);\n \t    }\n \t}\n     }\n \n-  return cp_build_function_call_nary (fn, tf_warning_or_error,\n+  return cp_build_function_call_nary (fn4, tf_warning_or_error,\n \t\t\t\t      size_in_bytes (type), NULL_TREE);\n }\n \n@@ -551,17 +552,15 @@ do_allocate_exception (tree type)\n static tree\n do_free_exception (tree ptr)\n {\n-  static tree fn;\n-\n-  if (!fn)\n+  if (!fn5)\n     {\n       tree name = get_identifier (\"__cxa_free_exception\");\n-      fn = IDENTIFIER_GLOBAL_VALUE (name);\n-      if (!fn)\n+      fn5 = IDENTIFIER_GLOBAL_VALUE (name);\n+      if (!fn5)\n \t{\n \t  /* Declare void __cxa_free_exception (void *) throw().  */\n-\t  fn = declare_library_fn (name, void_type_node, ptr_type_node,\n-\t\t\t\t   ECF_NOTHROW | ECF_LEAF);\n+\t  fn5 = declare_library_fn (name, void_type_node, ptr_type_node,\n+\t\t\t\t    ECF_NOTHROW | ECF_LEAF);\n \n \t  if (flag_tm)\n \t    {\n@@ -571,12 +570,12 @@ do_free_exception (tree ptr)\n \t\titm_fn = declare_library_fn\n \t\t  (itm_name, void_type_node, ptr_type_node,\n \t\t   ECF_NOTHROW | ECF_LEAF | ECF_TM_PURE);\n-\t      record_tm_replacement (fn, itm_fn);\n+\t      record_tm_replacement (fn5, itm_fn);\n \t    }\n \t}\n     }\n \n-  return cp_build_function_call_nary (fn, tf_warning_or_error, ptr, NULL_TREE);\n+  return cp_build_function_call_nary (fn5, tf_warning_or_error, ptr, NULL_TREE);\n }\n \n /* Wrap all cleanups for TARGET_EXPRs in MUST_NOT_THROW_EXPR.\n@@ -640,7 +639,6 @@ build_throw (tree exp)\n \n   if (exp)\n     {\n-      static tree throw_fn;\n       tree throw_type;\n       tree temp_type;\n       tree cleanup;\n@@ -793,8 +791,6 @@ build_throw (tree exp)\n   else\n     {\n       /* Rethrow current exception.  */\n-      static tree rethrow_fn;\n-\n       if (!rethrow_fn)\n \t{\n \t  tree name = get_identifier (\"__cxa_rethrow\");\n@@ -1261,7 +1257,6 @@ build_noexcept_spec (tree expr, int complain)\n tree\n unevaluated_noexcept_spec (void)\n {\n-  static tree spec;\n   if (spec == NULL_TREE)\n     spec = build_noexcept_spec (make_node (DEFERRED_NOEXCEPT), tf_none);\n   return spec;"}, {"sha": "194ee168298d6d30c0038fc62e006df5fb309be5", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n    template overload resolution results when accessibility matters\n    (e.g. tests for an accessible member).  */\n \n-static tree global_friend;\n+static GTY(()) tree global_friend;\n \n /* Set the GLOBAL_FRIEND for this compilation session.  It might be\n    set multiple times, but always to the same scope.  */\n@@ -668,3 +668,5 @@ do_friend (tree ctype, tree declarator, tree decl,\n \n   return decl;\n }\n+\n+#include \"gt-cp-friend.h\""}, {"sha": "4ad2cae541e23ee22481dc0f6cb3c488512628fe", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -46,6 +46,8 @@ static tree dfs_initialize_vtbl_ptrs (tree, void *);\n static tree build_field_list (tree, tree, int *);\n static int diagnose_uninitialized_cst_or_ref_member_1 (tree, tree, bool, bool);\n \n+static GTY(()) tree fn;\n+\n /* We are about to generate some complex initialization code.\n    Conceptually, it is all a single expression.  However, we may want\n    to include conditionals, loops, and other such statement-level\n@@ -2402,7 +2404,6 @@ diagnose_uninitialized_cst_or_ref_member (tree type, bool using_new, bool compla\n tree\n throw_bad_array_new_length (void)\n {\n-  static tree fn;\n   if (!fn)\n     {\n       tree name = get_identifier (\"__cxa_throw_bad_array_new_length\");\n@@ -4911,3 +4912,5 @@ build_vec_delete (tree base, tree maxindex,\n \n   return rval;\n }\n+\n+#include \"gt-cp-init.h\""}, {"sha": "5587f6021eaad61563e27d09989efcdf348c483d", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff50231797977a56a0d256db645f1e004c6acf00/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=ff50231797977a56a0d256db645f1e004c6acf00", "patch": "@@ -427,13 +427,15 @@ build_capture_proxy (tree member)\n   return var;\n }\n \n+static GTY(()) tree ptr_id;\n+static GTY(()) tree max_id;\n+\n /* Return a struct containing a pointer and a length for lambda capture of\n    an array of runtime length.  */\n \n static tree\n vla_capture_type (tree array_type)\n {\n-  static tree ptr_id, max_id;\n   tree type = xref_tag (record_type, make_anon_name (), ts_current, false);\n   xref_basetypes (type, NULL_TREE);\n   type = begin_class_definition (type);\n@@ -1248,3 +1250,5 @@ is_lambda_ignored_entity (tree val)\n \n   return false;\n }\n+\n+#include \"gt-cp-lambda.h\""}]}