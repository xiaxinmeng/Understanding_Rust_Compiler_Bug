{"sha": "3224beadb4cebe8137600efe3d13082f40076cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIyNGJlYWRiNGNlYmU4MTM3NjAwZWZlM2QxMzA4MmY0MDA3NmNjMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-20T14:17:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-20T14:17:39Z"}, "message": "stor-layout.c (initialize_sizetypes): Set SIZETYPE earlier, clear cache on copied sizetype.\n\n\t* stor-layout.c (initialize_sizetypes): Set SIZETYPE earlier,\n\tclear cache on copied sizetype.\n\n\t* ada/utils2.c (build_allocator): Use build_int_cst for negative\n\tsize types.\n\n\t* cp/class.c (build_vtbl_initializer): Use build_int_cst for\n\tnegative size types.\n\t* cp/decl.c (complete_array_type): Likewise.\n\t* cp/method.c (finish_thunk): Likewise.\n\nFrom-SVN: r86320", "tree": {"sha": "d83bea008f3292c8941443cff196c20fd0023ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d83bea008f3292c8941443cff196c20fd0023ab4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3224beadb4cebe8137600efe3d13082f40076cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3224beadb4cebe8137600efe3d13082f40076cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3224beadb4cebe8137600efe3d13082f40076cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3224beadb4cebe8137600efe3d13082f40076cc1/comments", "author": null, "committer": null, "parents": [{"sha": "346d5977dd043c0f83a7e68169a970bd4a4a1b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346d5977dd043c0f83a7e68169a970bd4a4a1b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346d5977dd043c0f83a7e68169a970bd4a4a1b31"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "d6bba043dc4d733f88e70b49315a4f92b0a9ad71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -1,3 +1,8 @@\n+2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* stor-layout.c (initialize_sizetypes): Set SIZETYPE earlier,\n+\tclear cache on copied sizetype.\n+\n 2004-08-20  Ben Elliston  <bje@au.ibm.com>\n \n \t* configure.ac: Don't escape apostrophe in --enable-coverage help.\n@@ -2785,7 +2790,7 @@\n \t* config/i386/xmmintrin.h: Include <mm_malloc.h>.\n \n 2004-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n-\t    Tanguy Fautr\u00c3?  <tfautre@pandora.be>\n+\t    Tanguy Fautr\ufffd  <tfautre@pandora.be>\n \n \t* config/i386/pmm_malloc.h: New file.\n "}, {"sha": "6ea32826406cd66dedb338461541c36893ee8884", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -1,3 +1,8 @@\n+2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* utils2.c (build_allocator): Use build_int_cst for negative\n+\tsize types.\n+\n 2004-08-18  Richard Henderson  <rth@redhat.com>\n \n \t* misc.c (LANG_HOOKS_HONOR_READONLY): Remove."}, {"sha": "60de87d89d6825a1780c1a2bfdfbcff08e8bef1e", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -1799,7 +1799,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n       /* If the size overflows, pass -1 so the allocator will raise\n \t storage error.  */\n       if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n-\tsize = ssize_int (-1);\n+\tsize = build_int_cst (ssizetype, -1, -1);\n \n       storage = build_call_alloc_dealloc (NULL_TREE, size,\n \t\t\t\t\t  TYPE_ALIGN (storage_type),\n@@ -1872,7 +1872,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n   /* If the size overflows, pass -1 so the allocator will raise\n      storage error.  */\n   if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n-    size = ssize_int (-1);\n+    size = build_int_cst (ssizetype, -1, -1);\n \n   /* If this is a type whose alignment is larger than the\n      biggest we support in normal alignment and this is in"}, {"sha": "372c27e0416bcf989770907dd472514c25f7889d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -1,3 +1,10 @@\n+2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (build_vtbl_initializer): Use build_int_cst for\n+\tnegative size types.\n+\t* decl.c (complete_array_type): Likewise.\n+\t* method.c (finish_thunk): Likewise.\n+\n 2004-08-20  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* tree.c: Remove unused mark_local_for_remap_r."}, {"sha": "c7294146b3a0030270787177f4d14cc13b59e5bf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -7278,7 +7278,8 @@ build_vtbl_initializer (tree binfo,\n   vid.ctor_vtbl_p = !same_type_p (BINFO_TYPE (rtti_binfo), t);\n   vid.generate_vcall_entries = true;\n   /* The first vbase or vcall offset is at index -3 in the vtable.  */\n-  vid.index = ssize_int (-3 * TARGET_VTABLE_DATA_ENTRY_DISTANCE);\n+  vid.index = build_int_cst (ssizetype,\n+\t\t\t     -3 * TARGET_VTABLE_DATA_ENTRY_DISTANCE, -1);\n \n   /* Add entries to the vtable for RTTI.  */\n   build_rtti_vtbl_entries (binfo, &vid);"}, {"sha": "36e83d9c1a52ac08b6d3bdb4838a0a6d55865780", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -5260,7 +5260,7 @@ complete_array_type (tree type, tree initial_value, int do_default)\n \t{\n \t  tree elts = CONSTRUCTOR_ELTS (initial_value);\n \n-\t  maxindex = ssize_int (-1);\n+\t  maxindex = build_int_cst (ssizetype, -1, -1);\n \t  for (; elts; elts = TREE_CHAIN (elts))\n \t    {\n \t      if (TREE_PURPOSE (elts))"}, {"sha": "d0bad5df4fb8f5dadf8559096c40621059c96a57", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -179,7 +179,9 @@ void\n finish_thunk (tree thunk)\n {\n   tree function, name;\n-  tree fixed_offset = ssize_int (THUNK_FIXED_OFFSET (thunk));\n+  tree fixed_offset = build_int_cst (ssizetype,\n+\t\t\t\t     THUNK_FIXED_OFFSET (thunk),\n+\t\t\t\t     THUNK_FIXED_OFFSET (thunk) < 0 ? -1 : 0);\n   tree virtual_offset = THUNK_VIRTUAL_OFFSET (thunk);\n \n   my_friendly_assert (!DECL_NAME (thunk) && DECL_THUNK_P (thunk), 20021127);"}, {"sha": "19de9b6d0a44d9173a84d54a47fcd23b0ab413e1", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3224beadb4cebe8137600efe3d13082f40076cc1/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=3224beadb4cebe8137600efe3d13082f40076cc1", "patch": "@@ -1863,12 +1863,12 @@ initialize_sizetypes (void)\n   TYPE_MODE (t) = SImode;\n   TYPE_ALIGN (t) = GET_MODE_ALIGNMENT (SImode);\n   TYPE_USER_ALIGN (t) = 0;\n+  TYPE_IS_SIZETYPE (t) = 1;\n   TYPE_SIZE (t) = build_int_cst (t, GET_MODE_BITSIZE (SImode), 0);\n   TYPE_SIZE_UNIT (t) = build_int_cst (t, GET_MODE_SIZE (SImode), 0);\n   TYPE_UNSIGNED (t) = 1;\n   TYPE_PRECISION (t) = GET_MODE_BITSIZE (SImode);\n   TYPE_MIN_VALUE (t) = build_int_cst (t, 0, 0);\n-  TYPE_IS_SIZETYPE (t) = 1;\n \n   /* 1000 avoids problems with possible overflow and is certainly\n      larger than any size value we'd want to be storing.  */\n@@ -1878,6 +1878,8 @@ initialize_sizetypes (void)\n      size_int_wide.  */\n   sizetype = t;\n   bitsizetype = copy_node (t);\n+  TYPE_CACHED_VALUES (bitsizetype) = NULL_TREE;\n+  TYPE_CACHED_VALUES_P (bitsizetype) = 0;\n }\n \n /* Set sizetype to TYPE, and initialize *sizetype accordingly."}]}