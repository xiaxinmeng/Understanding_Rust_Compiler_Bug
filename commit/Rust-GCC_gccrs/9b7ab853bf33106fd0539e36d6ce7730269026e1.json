{"sha": "9b7ab853bf33106fd0539e36d6ce7730269026e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3YWI4NTNiZjMzMTA2ZmQwNTM5ZTM2ZDZjZTc3MzAyNjkwMjZlMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T07:16:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T07:34:16Z"}, "message": "c++: Fix ICE on defaulted spaceship with pointer return type [PR94162]\n\nThe spaceship-synth-neg6.C testcase ICEs because we call cat_tag_for\non the explicit return type, but pointer types don't have\nTYPE_LINKAGE_IDENTIFIER.  The patch fixes that by checking for\nCLASS_TYPE_P only and also adds verification that it is in std\nnamespace, so we don't return non-cc_last for my_namespace::partial_ordering.\n\nThe g++.dg/cpp2a/spaceship-synth11.C testcase is from a PR that has been\nfixed with r12-619-gfc178519771db508c03611cff4a1466cf67fce1d (but\nnot backported to 11).\n\n2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/cp/\n\tPR c++/94162\n\t* method.c (cat_tag_for): Return cc_last for !CLASS_TYPE_P\n\tor for classes not in std namespace.\ngcc/testsuite/\n\tPR c++/99429\n\t* g++.dg/cpp2a/spaceship-synth11.C: New test.\n\n\tPR c++/94162\n\t* g++.dg/cpp2a/spaceship-synth-neg6.C: New test.", "tree": {"sha": "cd246195e79ecfddde3abe1930acea5e5083e592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd246195e79ecfddde3abe1930acea5e5083e592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b7ab853bf33106fd0539e36d6ce7730269026e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7ab853bf33106fd0539e36d6ce7730269026e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7ab853bf33106fd0539e36d6ce7730269026e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7ab853bf33106fd0539e36d6ce7730269026e1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84f79e9e3f63e9ae447fd15dbd0a768cab3f643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84f79e9e3f63e9ae447fd15dbd0a768cab3f643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84f79e9e3f63e9ae447fd15dbd0a768cab3f643"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "353046d3e470996261afa8b819a67b8ed8068ec1", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7ab853bf33106fd0539e36d6ce7730269026e1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7ab853bf33106fd0539e36d6ce7730269026e1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9b7ab853bf33106fd0539e36d6ce7730269026e1", "patch": "@@ -1029,6 +1029,8 @@ is_cat (tree type, comp_cat_tag tag)\n static comp_cat_tag\n cat_tag_for (tree type)\n {\n+  if (!CLASS_TYPE_P (type) || !decl_in_std_namespace_p (TYPE_MAIN_DECL (type)))\n+    return cc_last;\n   for (int i = 0; i < cc_last; ++i)\n     {\n       comp_cat_tag tag = (comp_cat_tag)i;"}, {"sha": "d3f95e13f135469e332e204dc1e2b3fe459bdf60", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth-neg6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7ab853bf33106fd0539e36d6ce7730269026e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7ab853bf33106fd0539e36d6ce7730269026e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg6.C?ref=9b7ab853bf33106fd0539e36d6ce7730269026e1", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/94162\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+struct S {\n+  int a;\t\t\t// { dg-error \"three-way comparison of 'S::a' has type 'std::strong_ordering', which does not convert to 'int\\\\*'\" }\n+  int *operator<=>(const S&) const = default;\n+};\n+\n+bool b = S{} < S{};\t\t// { dg-error \"use of deleted function 'constexpr int\\\\* S::operator<=>\\\\\\(const S&\\\\\\) const'\" }"}, {"sha": "37c8157526ddd9a83ddd227bb30bab21f7eb6f2b", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth11.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7ab853bf33106fd0539e36d6ce7730269026e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7ab853bf33106fd0539e36d6ce7730269026e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth11.C?ref=9b7ab853bf33106fd0539e36d6ce7730269026e1", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/99429\n+// { dg-do compile { target c++20 } }\n+\n+namespace std {\n+struct strong_ordering {\n+  int _v;\n+  constexpr strong_ordering (int v) :_v(v) {}\n+  constexpr operator int (void) const { return _v; }\n+  static const strong_ordering less;\n+  static const strong_ordering equal;\n+  static const strong_ordering greater;\n+};\n+constexpr strong_ordering strong_ordering::less = -1;\n+constexpr strong_ordering strong_ordering::equal = 0;\n+constexpr strong_ordering strong_ordering::greater = 1;\n+}\n+\n+template <unsigned long N>\n+struct duration {\n+  static constexpr const long period = N;\n+  constexpr duration (void) = default;\n+  constexpr duration (const duration& d) = default;\n+  constexpr bool operator== (const duration& d) const = default;\n+  constexpr bool operator<=> (const duration& d) const = default;\n+  long _d;\n+};\n+\n+using nanoseconds = duration<1>;\n+using microseconds = duration<nanoseconds::period * 1000>;"}]}