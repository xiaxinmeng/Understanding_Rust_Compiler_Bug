{"sha": "59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkYzQ4OTg4YWFiODI3NGI5MGRmZDRlMGU5ZWJiYjdkZDJlNzAwNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2009-01-28T18:16:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-01-28T18:16:57Z"}, "message": "re PR tree-optimization/38997 (-ftree-loop-distribution ICEs)\n\ngcc/\n\tPR tree-optimization/38997\n\t* tree-loop-distribution.c (generate_memset_zero): Use\n\tPOINTER_PLUS_EXPR for a pointer addition.\n\ngcc/testsuite/\n\tPR tree-optimization/38997\n\t* gcc.dg/tree-ssa/pr38997.c: New.\n\nFrom-SVN: r143739", "tree": {"sha": "020e113c14ad11d3ee75393bd400d5e267b929a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020e113c14ad11d3ee75393bd400d5e267b929a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/comments", "author": null, "committer": null, "parents": [{"sha": "07da44aba4702478a25e8483fd8455360aba760c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07da44aba4702478a25e8483fd8455360aba760c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07da44aba4702478a25e8483fd8455360aba760c"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "da53b53358b3337942b8809f0d7e39b74a03c2c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "patch": "@@ -1,3 +1,9 @@\n+2009-01-28  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR tree-optimization/38997\n+\t* tree-loop-distribution.c (generate_memset_zero): Use\n+\tPOINTER_PLUS_EXPR for a pointer addition.\n+\n 2009-01-28  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (bswap<mode>2): New pattern added."}, {"sha": "d6038a1ef282b8ec6bcce8a269ba6a832bc686b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "patch": "@@ -1,3 +1,8 @@\n+2009-01-28  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR tree-optimization/38997\n+\t* gcc.dg/tree-ssa/pr38997.c: New.\n+\n 2009-01-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38926"}, {"sha": "1463bee93d3b58ca64fc9b63b815911542e6f05d", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=59dc48988aab8274b90dfd4e0e9ebbb7dd2e7007", "patch": "@@ -256,10 +256,15 @@ generate_memset_zero (gimple stmt, tree op0, tree nb_iter,\n   /* Test for a positive stride, iterating over every element.  */\n   if (integer_zerop (fold_build2 (MINUS_EXPR, integer_type_node, DR_STEP (dr),\n \t\t\t\t  TYPE_SIZE_UNIT (TREE_TYPE (op0)))))\n-    addr_base = fold_build2 (PLUS_EXPR, TREE_TYPE (DR_BASE_ADDRESS (dr)),\n-\t\t\t     DR_BASE_ADDRESS (dr), \n-\t\t\t     size_binop (PLUS_EXPR,\n-\t\t\t\t\t DR_OFFSET (dr), DR_INIT (dr)));\n+    {\n+      tree offset = fold_convert (sizetype,\n+\t\t\t\t  size_binop (PLUS_EXPR,\n+\t\t\t\t\t      DR_OFFSET (dr),\n+\t\t\t\t\t      DR_INIT (dr)));\n+      addr_base = fold_build2 (POINTER_PLUS_EXPR,\n+\t\t\t       TREE_TYPE (DR_BASE_ADDRESS (dr)),\n+\t\t\t       DR_BASE_ADDRESS (dr), offset);\n+    }\n \n   /* Test for a negative stride, iterating over every element.  */\n   else if (integer_zerop (fold_build2 (PLUS_EXPR, integer_type_node,"}]}