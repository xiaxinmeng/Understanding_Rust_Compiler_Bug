{"sha": "9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1ODhjZmI0Mjg4ZWY0MWViNTllZGM2YWI4Y2I4MzA1NmIzYjZhNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T13:10:46Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T13:49:19Z"}, "message": "aarch64: Reimplement vabdl_high* intrinsics using builtins\n\nThis patch reimplements the vabdl_high intrinsics using builtins.\nIt slightly cleans up the RTL pattern (the mode iterators) but nothing\ninteresting apart from that.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (sabdl2, uabdl2):\n\tDefine builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abdl2<mode>_3):\n\tRename to...\n\t(aarch64_<sur>abdl2<mode>): ... This.\n\t(<sur>sadv16qi): Adjust use of above.\n\t* config/aarch64/arm_neon.h (vabdl_high_s8): Reimplement using\n\tbuiltin.\n\t(vabdl_high_s16): Likewise.\n\t(vabdl_high_s32): Likewise.\n\t(vabdl_high_u8): Likewise.\n\t(vabdl_high_u16): Likewise.\n\t(vabdl_high_u32): Likewise.", "tree": {"sha": "eabd274e2c16c87769a72cace42d6e96ebd5aff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eabd274e2c16c87769a72cace42d6e96ebd5aff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f499a86b29507e9afbb28dde537ee2609859510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f499a86b29507e9afbb28dde537ee2609859510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f499a86b29507e9afbb28dde537ee2609859510"}], "stats": {"total": 56, "additions": 15, "deletions": 41}, "files": [{"sha": "9db259a296787af018eda13f190327f97d59d1e7", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "patch": "@@ -172,6 +172,10 @@\n   BUILTIN_VQW (TERNOP, sabal2, 0, NONE)\n   BUILTIN_VQW (TERNOPU, uabal2, 0, NONE)\n \n+  /* Implemented by aarch64_<sur>abdl2<mode>.  */\n+  BUILTIN_VQW (BINOP, sabdl2, 0, NONE)\n+  BUILTIN_VQW (BINOPU, uabdl2, 0, NONE)\n+\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n   BUILTIN_VQN (BINOP, addhn, 0, NONE)\n   BUILTIN_VQN (BINOP, subhn, 0, NONE)"}, {"sha": "2f41d7aaa9b0eff5037c69143442897b7b8f1008", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "patch": "@@ -818,10 +818,10 @@\n   [(set_attr \"type\" \"neon_abd<q>\")]\n )\n \n-(define_insn \"aarch64_<sur>abdl2<mode>_3\"\n+(define_insn \"aarch64_<sur>abdl2<mode>\"\n   [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VDBLW> [(match_operand:VDQV_S 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:VDQV_S 2 \"register_operand\" \"w\")]\n+\t(unspec:<VDBLW> [(match_operand:VQW 1 \"register_operand\" \"w\")\n+\t\t\t (match_operand:VQW 2 \"register_operand\" \"w\")]\n \tABDL2))]\n   \"TARGET_SIMD\"\n   \"<sur>abdl2\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n@@ -897,8 +897,8 @@\n \tDONE;\n       }\n     rtx reduc = gen_reg_rtx (V8HImode);\n-    emit_insn (gen_aarch64_<sur>abdl2v16qi_3 (reduc, operands[1],\n-\t\t\t\t\t       operands[2]));\n+    emit_insn (gen_aarch64_<sur>abdl2v16qi (reduc, operands[1],\n+\t\t\t\t\t    operands[2]));\n     emit_insn (gen_aarch64_<sur>abalv8qi (reduc, reduc,\n \t\t\t\t\t  gen_lowpart (V8QImode, operands[1]),\n \t\t\t\t\t  gen_lowpart (V8QImode,"}, {"sha": "2297e5b8d414e8d9e30cf3220243ddca7f905dfc", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "patch": "@@ -6831,72 +6831,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_high_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sabdl2 %0.8h,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabdl2v16qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_high_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sabdl2 %0.4s,%1.8h,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabdl2v8hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_high_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sabdl2 %0.2d,%1.4s,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabdl2v4si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_high_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uabdl2 %0.8h,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabdl2v16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_high_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uabdl2 %0.4s,%1.8h,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabdl2v8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdl_high_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"uabdl2 %0.2d,%1.4s,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabdl2v4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t"}]}