{"sha": "36e38022125f2f336e5d281fb3e5e66191d21e73", "node_id": "C_kwDOANBUbNoAKDM2ZTM4MDIyMTI1ZjJmMzM2ZTVkMjgxZmIzZTVlNjYxOTFkMjFlNzM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-10-06T13:03:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:04Z"}, "message": "[Ada] tech debt: Clean up Uint fields, such as Esize\n\ngcc/ada/\n\n\t* atree.ads: Comment improvements. How is a \"completely new\n\tnode\" different from a \"new node\"? Document default values\n\tcorresponding to field types.\n\t* exp_ch7.adb (Process_Tagged_Type_Declaration): Use\n\thigher-level Scope_Depth instead of Scope_Depth_Value.  Remove\n\tconfusing comment: not clear what a \"true\" library level package\n\tis.\n\t* uintp.adb (Image_Out): Print No_Uint in a more readable way.\n\t* gen_il-gen.adb, gen_il-gen-gen_entities.adb,\n\tgen_il-gen-gen_nodes.adb, gen_il-types.ads: Tighten up the\n\tsubtypes of fields whose type is Uint, where possible; use\n\tmore-constrained subtypes such as Unat.\n\t* einfo-utils.adb, einfo-utils.ads, exp_attr.adb,\n\texp_ch3.adb, exp_intr.adb, exp_unst.adb, exp_util.adb,\n\tfreeze.adb, repinfo.adb, sem.adb, sem_ch12.adb, sem_ch13.adb,\n\tsem_ch3.adb, sem_ch8.adb, sem_util.adb, sprint.adb, treepr.adb:\n\tNo longer use Uint_0 to indicate \"unknown\" or \"not yet known\"\n\tfor various fields whose type is Uint. Use No_Uint for that,\n\texcept in a small number of legacy cases that cause test\n\tfailures. Protect many queries of such fields with calls to\n\tKnown_... functions. Improve comments.\n\t* exp_aggr.adb: Likewise.\n\t(Is_OK_Aggregate): Check whether Csiz is present.\n\t(Aggr_Assignment_OK_For_Backend): Ensure we do not access an\n\tuninitialized size.\n\t* exp_strm.adb (Build_Elementary_Input_Call,\n\tBuild_Elementary_Write_Call): Check whether P_Size is present.\n\t* cstand.adb: Leave Component_Size of Any_Composite unknown.\n\tSimilar for RM_Size of Standard_Exception_Type.  These should\n\tnot be used.\n\t* einfo.ads: Comment improvements.\n\t* exp_disp.ads: Minor.\n\t* gen_il-internals.ads, gen_il-internals.adb: Minor.\n\t* sinfo-utils.adb: Take advantage of full-coverage rules.\n\t* types.h: Minor.", "tree": {"sha": "568b72492d067a5dca44147b9e452dbba8b8136f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568b72492d067a5dca44147b9e452dbba8b8136f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e38022125f2f336e5d281fb3e5e66191d21e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e38022125f2f336e5d281fb3e5e66191d21e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e38022125f2f336e5d281fb3e5e66191d21e73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e38022125f2f336e5d281fb3e5e66191d21e73/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "749e01a5f310f2c4327f030d425aa6e23afbbbd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749e01a5f310f2c4327f030d425aa6e23afbbbd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749e01a5f310f2c4327f030d425aa6e23afbbbd5"}], "stats": {"total": 808, "additions": 431, "deletions": 377}, "files": [{"sha": "4861236b669bf6e6465d8208ee494d95f531d7b9", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -230,11 +230,18 @@ package Atree is\n    function New_Node\n      (New_Node_Kind : Node_Kind;\n       New_Sloc      : Source_Ptr) return Node_Id;\n-   --  Allocates a completely new node with the given node type and source\n-   --  location values. All other fields are set to their standard defaults:\n+   --  Allocates a new node with the given node type and source location\n+   --  values. Fields have defaults depending on their type:\n+\n+   --    Flag: False\n+   --    Node_Id: Empty\n+   --    List_Id: Empty\n+   --    Elist_Id: No_Elist\n+   --    Uint: No_Uint\n    --\n-   --    Empty for all FieldN fields\n-   --    False for all FlagN fields\n+   --    Name_Id, String_Id, Valid_Uint, Unat, Upos, Nonzero_Uint, Ureal:\n+   --      No default. This means it is an error to call the getter before\n+   --      calling the setter.\n    --\n    --  The usual approach is to build a new node using this function and\n    --  then, using the value returned, use the Set_xxx functions to set\n@@ -288,16 +295,16 @@ package Atree is\n    --  with copying aspect specifications where this is required.\n \n    function New_Copy (Source : Node_Id) return Node_Id;\n-   --  This function allocates a completely new node, and then initializes\n-   --  it by copying the contents of the source node into it. The contents of\n-   --  the source node is not affected. The target node is always marked as\n-   --  not being in a list (even if the source is a list member), and not\n-   --  overloaded. The new node will have an extension if the source has\n-   --  an extension. New_Copy (Empty) returns Empty, and New_Copy (Error)\n-   --  returns Error. Note that, unlike Copy_Separate_Tree, New_Copy does not\n-   --  recursively copy any descendants, so in general parent pointers are not\n-   --  set correctly for the descendants of the copied node. Both normal and\n-   --  extended nodes (entities) may be copied using New_Copy.\n+   --  This function allocates a new node, and then initializes it by copying\n+   --  the contents of the source node into it. The contents of the source node\n+   --  is not affected. The target node is always marked as not being in a list\n+   --  (even if the source is a list member), and not overloaded. The new node\n+   --  will have an extension if the source has an extension. New_Copy (Empty)\n+   --  returns Empty, and New_Copy (Error) returns Error. Note that, unlike\n+   --  Copy_Separate_Tree, New_Copy does not recursively copy any descendants,\n+   --  so in general parent pointers are not set correctly for the descendants\n+   --  of the copied node. Both normal and extended nodes (entities) may be\n+   --  copied using New_Copy.\n \n    function Relocate_Node (Source : Node_Id) return Node_Id;\n    --  Source is a non-entity node that is to be relocated. A new node is\n@@ -340,11 +347,11 @@ package Atree is\n    --  Exchange the contents of two entities. The parent pointers are switched\n    --  as well as the Defining_Identifier fields in the parents, so that the\n    --  entities point correctly to their original parents. The effect is thus\n-   --  to leave the tree completely unchanged in structure, except that the\n-   --  entity ID values of the two entities are interchanged. Neither of the\n-   --  two entities may be list members. Note that entities appear on two\n-   --  semantic chains: Homonym and Next_Entity: the corresponding links must\n-   --  be adjusted by the caller, according to context.\n+   --  to leave the tree unchanged in structure, except that the entity ID\n+   --  values of the two entities are interchanged. Neither of the two entities\n+   --  may be list members. Note that entities appear on two semantic chains:\n+   --  Homonym and Next_Entity: the corresponding links must be adjusted by the\n+   --  caller, according to context.\n \n    procedure Extend_Node (Source : Node_Id);\n    --  This turns a node into an entity; it function is used only by Sinfo.CN."}, {"sha": "3822d932046e4cfa49f0f422199232b25efb428b", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -1233,10 +1233,11 @@ package body CStand is\n       Mutate_Ekind          (Any_Composite, E_Array_Type);\n       Set_Scope             (Any_Composite, Standard_Standard);\n       Set_Etype             (Any_Composite, Any_Composite);\n-      Set_Component_Size    (Any_Composite, Uint_0);\n       Set_Component_Type    (Any_Composite, Standard_Integer);\n       Reinit_Size_Align     (Any_Composite);\n \n+      pragma Assert (not Known_Component_Size (Any_Composite));\n+\n       Any_Discrete := New_Standard_Entity (\"a discrete type\");\n       Mutate_Ekind          (Any_Discrete, E_Signed_Integer_Type);\n       Set_Scope             (Any_Discrete, Standard_Standard);\n@@ -1508,10 +1509,11 @@ package body CStand is\n          Set_Scope       (Standard_Exception_Type, Standard_Standard);\n          Set_Stored_Constraint\n                          (Standard_Exception_Type, No_Elist);\n-         Set_RM_Size (Standard_Exception_Type, Uint_0);\n          Set_Size_Known_At_Compile_Time\n                          (Standard_Exception_Type, True);\n \n+         pragma Assert (not Known_RM_Size (Standard_Exception_Type));\n+\n          Make_Aliased_Component (Standard_Exception_Type, Standard_Boolean,\n                          \"Not_Handled_By_Others\");\n          Make_Aliased_Component (Standard_Exception_Type, Standard_Character,"}, {"sha": "0c89c82bd1b2b4c91404b0c80a8e719e2597e79d", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -390,34 +390,23 @@ package body Einfo.Utils is\n \n    function Known_Static_Component_Bit_Offset (E : Entity_Id) return B is\n    begin\n-      return Present (Component_Bit_Offset (E))\n+      return Known_Component_Bit_Offset (E)\n         and then Component_Bit_Offset (E) >= Uint_0;\n    end Known_Static_Component_Bit_Offset;\n \n    function Known_Component_Size (E : Entity_Id) return B is\n    begin\n-      return Component_Size (E) /= Uint_0\n-        and then Present (Component_Size (E));\n+      return Present (Component_Size (E));\n    end Known_Component_Size;\n \n    function Known_Static_Component_Size (E : Entity_Id) return B is\n    begin\n-      return Component_Size (E) > Uint_0;\n+      return Known_Component_Size (E) and then Component_Size (E) >= Uint_0;\n    end Known_Static_Component_Size;\n \n-   Use_New_Unknown_Rep : constant Boolean := False;\n-   --  If False, we represent \"unknown\" as Uint_0, which is wrong.\n-   --  We intend to make it True (and remove it), and represent\n-   --  \"unknown\" as Field_Is_Initial_Zero. We also need to change\n-   --  the type of Esize and RM_Size from Uint to Valid_Uint.\n-\n    function Known_Esize (E : Entity_Id) return B is\n    begin\n-      if Use_New_Unknown_Rep then\n-         return not Field_Is_Initial_Zero (E, F_Esize);\n-      else\n-         return Present (Esize (E)) and then Esize (E) /= Uint_0;\n-      end if;\n+      return Present (Esize (E));\n    end Known_Esize;\n \n    function Known_Static_Esize (E : Entity_Id) return B is\n@@ -429,11 +418,7 @@ package body Einfo.Utils is\n \n    procedure Reinit_Esize (Id : E) is\n    begin\n-      if Use_New_Unknown_Rep then\n-         Reinit_Field_To_Zero (Id, F_Esize);\n-      else\n-         Set_Esize (Id, Uint_0);\n-      end if;\n+      Reinit_Field_To_Zero (Id, F_Esize);\n    end Reinit_Esize;\n \n    procedure Copy_Esize (To, From : E) is\n@@ -452,7 +437,7 @@ package body Einfo.Utils is\n \n    function Known_Static_Normalized_First_Bit (E : Entity_Id) return B is\n    begin\n-      return Present (Normalized_First_Bit (E))\n+      return Known_Normalized_First_Bit (E)\n         and then Normalized_First_Bit (E) >= Uint_0;\n    end Known_Static_Normalized_First_Bit;\n \n@@ -463,43 +448,25 @@ package body Einfo.Utils is\n \n    function Known_Static_Normalized_Position (E : Entity_Id) return B is\n    begin\n-      return Present (Normalized_Position (E))\n+      return Known_Normalized_Position (E)\n         and then Normalized_Position (E) >= Uint_0;\n    end Known_Static_Normalized_Position;\n \n    function Known_RM_Size (E : Entity_Id) return B is\n    begin\n-      if Use_New_Unknown_Rep then\n-         return not Field_Is_Initial_Zero (E, F_RM_Size);\n-      else\n-         return Present (RM_Size (E))\n-           and then (RM_Size (E) /= Uint_0\n-                       or else Is_Discrete_Type (E)\n-                       or else Is_Fixed_Point_Type (E));\n-      end if;\n+      return Present (RM_Size (E));\n    end Known_RM_Size;\n \n    function Known_Static_RM_Size (E : Entity_Id) return B is\n    begin\n-      if Use_New_Unknown_Rep then\n-         return Known_RM_Size (E)\n-           and then RM_Size (E) >= Uint_0\n-           and then not Is_Generic_Type (E);\n-      else\n-         return (RM_Size (E) > Uint_0\n-                   or else Is_Discrete_Type (E)\n-                   or else Is_Fixed_Point_Type (E))\n-           and then not Is_Generic_Type (E);\n-      end if;\n+      return Known_RM_Size (E)\n+        and then RM_Size (E) >= Uint_0\n+        and then not Is_Generic_Type (E);\n    end Known_Static_RM_Size;\n \n    procedure Reinit_RM_Size (Id : E) is\n    begin\n-      if Use_New_Unknown_Rep then\n-         Reinit_Field_To_Zero (Id, F_RM_Size);\n-      else\n-         Set_RM_Size (Id, Uint_0);\n-      end if;\n+      Reinit_Field_To_Zero (Id, F_RM_Size);\n    end Reinit_RM_Size;\n \n    procedure Copy_RM_Size (To, From : E) is\n@@ -541,9 +508,8 @@ package body Einfo.Utils is\n    begin\n       pragma Assert (Is_Type (Id));\n       pragma Assert (not Known_Esize (Id) or else Esize (Id) = V);\n-      if Use_New_Unknown_Rep then\n-         pragma Assert (not Known_RM_Size (Id) or else RM_Size (Id) = V);\n-      end if;\n+      pragma Assert (not Known_RM_Size (Id) or else RM_Size (Id) = V);\n+\n       Set_Esize (Id, UI_From_Int (V));\n       Set_RM_Size (Id, UI_From_Int (V));\n    end Init_Size;\n@@ -2593,6 +2559,16 @@ package body Einfo.Utils is\n       return Scope_Depth_Value (Scop);\n    end Scope_Depth;\n \n+   function Scope_Depth_Default_0 (Id : E) return U is\n+   begin\n+      if Scope_Depth_Set (Id) then\n+         return Scope_Depth (Id);\n+\n+      else\n+         return Uint_0;\n+      end if;\n+   end Scope_Depth_Default_0;\n+\n    ---------------------\n    -- Scope_Depth_Set --\n    ---------------------"}, {"sha": "0e6c8cdd25afbcb923e4deaa3de6971c3d8c8d95", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 42, "deletions": 54, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -274,14 +274,21 @@ package Einfo.Utils is\n    function Safe_Emax_Value                     (Id : E) return U;\n    function Safe_First_Value                    (Id : E) return R;\n    function Safe_Last_Value                     (Id : E) return R;\n-   function Scope_Depth                         (Id : E) return U;\n-   function Scope_Depth_Set                     (Id : E) return B;\n    function Size_Clause                         (Id : E) return N;\n    function Stream_Size_Clause                  (Id : E) return N;\n    function Type_High_Bound                     (Id : E) return N;\n    function Type_Low_Bound                      (Id : E) return N;\n    function Underlying_Type                     (Id : E) return E;\n \n+   function Scope_Depth                         (Id : E) return U;\n+   function Scope_Depth_Set                     (Id : E) return B;\n+\n+   function Scope_Depth_Default_0               (Id : E) return U;\n+   --  In rare cases, the Scope_Depth_Value (queried by Scope_Depth) is\n+   --  not correctly set before querying it; this may be used instead of\n+   --  Scope_Depth in such cases. It returns Uint_0 if the Scope_Depth_Value\n+   --  has not been set. See documentation in Einfo.\n+\n    pragma Inline (Address_Clause);\n    pragma Inline (Alignment_Clause);\n    pragma Inline (Base_Type);\n@@ -314,41 +321,58 @@ package Einfo.Utils is\n    -- Type Representation Attribute Fields --\n    ------------------------------------------\n \n-   --  Each of the following fields can be in a \"known\" or \"unknown\" state:\n+   function Known_Alignment (E : Entity_Id) return B with Inline;\n+   procedure Reinit_Alignment (Id : E) with Inline;\n+   procedure Copy_Alignment (To, From : E);\n+\n+   function Known_Component_Bit_Offset (E : Entity_Id) return B with Inline;\n+   function Known_Static_Component_Bit_Offset (E : Entity_Id) return B\n+     with Inline;\n+\n+   function Known_Component_Size (E : Entity_Id) return B with Inline;\n+   function Known_Static_Component_Size (E : Entity_Id) return B with Inline;\n+\n+   function Known_Esize (E : Entity_Id) return B with Inline;\n+   function Known_Static_Esize (E : Entity_Id) return B with Inline;\n+   procedure Reinit_Esize (Id : E) with Inline;\n+   procedure Copy_Esize (To, From : E);\n+\n+   function Known_Normalized_First_Bit (E : Entity_Id) return B with Inline;\n+   function Known_Static_Normalized_First_Bit (E : Entity_Id) return B\n+     with Inline;\n+\n+   function Known_Normalized_Position (E : Entity_Id) return B with Inline;\n+   function Known_Static_Normalized_Position (E : Entity_Id) return B\n+     with Inline;\n+\n+   function Known_RM_Size (E : Entity_Id) return B with Inline;\n+   function Known_Static_RM_Size (E : Entity_Id) return B with Inline;\n+   procedure Reinit_RM_Size (Id : E) with Inline;\n+   procedure Copy_RM_Size (To, From : E);\n \n-   --    Alignment\n-   --    Component_Size\n-   --    Component_Bit_Offset\n-   --    Digits_Value\n-   --    Esize\n-   --    Normalized_First_Bit\n-   --    Normalized_Position\n-   --    RM_Size\n-   --\n    --  NOTE: \"known\" here does not mean \"known at compile time\". It means that\n    --  the compiler has computed the value of the field (either by default, or\n    --  by noting some representation clauses), and the field has not been\n    --  reinitialized.\n    --\n-   --  We document the Esize functions here; the others are analogous:\n+   --  We document the Esize functions here; the others above are analogous:\n    --\n    --     Known_Esize: True if Set_Esize has been called without a subsequent\n    --     Reinit_Esize.\n    --\n    --     Known_Static_Esize: True if Known_Esize and the Esize is known at\n    --     compile time. (We're not using \"static\" in the Ada RM sense here. We\n-   --     are using it to mean \"known at compile time.)\n+   --     are using it to mean \"known at compile time\".)\n    --\n    --     Reinit_Esize: Set the Esize field to its initial unknown state.\n    --\n    --     Copy_Esize: Copies the Esize from From to To; Known_Esize (From) may\n    --     be False, in which case Known_Esize (To) becomes False.\n    --\n-   --     Esize: This is the normal automatially-generated getter for Esize,\n-   --     declared elsewhere. It is an error to call this if Set_Esize has not\n-   --     yet been called, or if Reinit_Esize has been called subsequently.\n+   --     Esize: This is the normal automatically-generated getter for Esize,\n+   --     declared elsewhere. Returns No_Uint if not Known_Esize.\n    --\n-   --     Set_Esize: This is the normal automatially-generated setter for\n+   --     Set_Esize: This is the normal automatically-generated setter for\n    --     Esize. After a call to this, Known_Esize is True. It is an error\n    --     to call this with a No_Uint value.\n    --\n@@ -357,49 +381,13 @@ package Einfo.Utils is\n    --  before calling Esize, because the code is written in such a way that we\n    --  don't know whether Set_Esize has already been called.\n    --\n-   --  We intend to use the initial zero value to represent \"unknown\". Note\n-   --  that this value is different from No_Uint, and different from Uint_0.\n-   --  However, this is work in progress; we are still using No_Uint or Uint_0\n-   --  to represent \"unknown\" in some cases. Using Uint_0 leads to several\n-   --  bugs, because zero is a legitimate value (T'Size can be zero bits) --\n-   --  Uint_0 shouldn't mean two different things.\n-   --\n    --  In two cases, Known_Static_Esize and Known_Static_RM_Size, there is one\n    --  more consideration, which is that we always return False for generic\n    --  types. Within a template, the size can look Known_Static, because of the\n    --  fake size values we put in template types, but they are not really\n    --  Known_Static and anyone testing if they are Known_Static within the\n    --  template should get False as a result to prevent incorrect assumptions.\n \n-   function Known_Alignment (E : Entity_Id) return B with Inline;\n-   procedure Reinit_Alignment (Id : E) with Inline;\n-   procedure Copy_Alignment (To, From : E);\n-\n-   function Known_Component_Bit_Offset (E : Entity_Id) return B with Inline;\n-   function Known_Static_Component_Bit_Offset (E : Entity_Id) return B\n-     with Inline;\n-\n-   function Known_Component_Size (E : Entity_Id) return B with Inline;\n-   function Known_Static_Component_Size (E : Entity_Id) return B with Inline;\n-\n-   function Known_Esize (E : Entity_Id) return B with Inline;\n-   function Known_Static_Esize (E : Entity_Id) return B with Inline;\n-   procedure Reinit_Esize (Id : E) with Inline;\n-   procedure Copy_Esize (To, From : E);\n-\n-   function Known_Normalized_First_Bit (E : Entity_Id) return B with Inline;\n-   function Known_Static_Normalized_First_Bit (E : Entity_Id) return B\n-     with Inline;\n-\n-   function Known_Normalized_Position (E : Entity_Id) return B with Inline;\n-   function Known_Static_Normalized_Position (E : Entity_Id) return B\n-     with Inline;\n-\n-   function Known_RM_Size (E : Entity_Id) return B with Inline;\n-   function Known_Static_RM_Size (E : Entity_Id) return B with Inline;\n-   procedure Reinit_RM_Size (Id : E) with Inline;\n-   procedure Copy_RM_Size (To, From : E);\n-\n    ---------------------------------------------------------\n    -- Procedures for setting multiple of the above fields --\n    ---------------------------------------------------------"}, {"sha": "13440ce2e53c9603faf413784d29e4d175beb310", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -4323,7 +4323,8 @@ package Einfo is\n --       Indicates the number of scopes that statically enclose the declaration\n --       of the unit or type. Library units have a depth of zero. Note that\n --       record types can act as scopes but do NOT have this field set (see\n---       Scope_Depth above).\n+--       Scope_Depth above). Queries should normally be via Scope_Depth,\n+--       and not call Scope_Depth_Value directly.\n \n --    Scope_Depth_Set (synthesized)\n --       Applies to a special predicate function that returns a Boolean value\n@@ -4555,7 +4556,7 @@ package Einfo is\n --       in inheritance of subprograms between views of the same type.\n \n --    Subps_Index\n---       Present in subprogram entries. Set if the subprogram contains nested\n+--       Present in subprogram entities. Set if the subprogram contains nested\n --       subprograms, or is a subprogram nested within such a subprogram. Holds\n --       the index in the Exp_Unst.Subps table for the subprogram. Note that\n --       for the outer level subprogram, this is the starting index in the Subp"}, {"sha": "f3d83a566ced6c2a37ecad3cddff9f4639b6270f", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -490,7 +490,7 @@ package body Exp_Aggr is\n          --  Fat pointers are rejected as they are not really elementary\n          --  for the backend.\n \n-         if Csiz /= System_Address_Size then\n+         if No (Csiz) or else Csiz /= System_Address_Size then\n             return False;\n          end if;\n \n@@ -504,8 +504,7 @@ package body Exp_Aggr is\n \n       --  Scalar types are OK if their size is a multiple of Storage_Unit\n \n-      elsif Is_Scalar_Type (Ctyp) then\n-         pragma Assert (Present (Csiz));\n+      elsif Is_Scalar_Type (Ctyp) and then Present (Csiz) then\n \n          if Csiz mod System_Storage_Unit /= 0 then\n             return False;\n@@ -9098,11 +9097,11 @@ package body Exp_Aggr is\n    -----------------------------\n \n    function Is_Two_Dim_Packed_Array (Typ : Entity_Id) return Boolean is\n-      C : constant Int := UI_To_Int (Component_Size (Typ));\n+      C : constant Uint := Component_Size (Typ);\n    begin\n       return Number_Dimensions (Typ) = 2\n         and then Is_Bit_Packed_Array (Typ)\n-        and then (C = 1 or else C = 2 or else C = 4);\n+        and then C in Uint_1 | Uint_2 | Uint_4; -- False if No_Uint\n    end Is_Two_Dim_Packed_Array;\n \n    --------------------"}, {"sha": "49f5c9413dd575644946843c2e3cd4edc42fd273", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -6294,7 +6294,7 @@ package body Exp_Attr is\n                --  size. This applies to both types and objects. The size of an\n                --  object can be specified in the following ways:\n \n-               --    An explicit size object is given for an object\n+               --    An explicit size clause is given for an object\n                --    A component size is specified for an indexed component\n                --    A component clause is specified for a selected component\n                --    The object is a component of a packed composite object\n@@ -6310,7 +6310,7 @@ package body Exp_Attr is\n                                 or else Is_Packed (Etype (Prefix (Pref)))))\n                  or else\n                    (Nkind (Pref) = N_Indexed_Component\n-                     and then (Component_Size (Etype (Prefix (Pref))) /= 0\n+                     and then (Known_Component_Size (Etype (Prefix (Pref)))\n                                 or else Is_Packed (Etype (Prefix (Pref)))))\n                then\n                   Set_Attribute_Name (N, Name_Size);\n@@ -7970,7 +7970,6 @@ package body Exp_Attr is\n       elsif Id = Attribute_Size\n         and then Is_Entity_Name (Pref)\n         and then Is_Object (Entity (Pref))\n-        and then Known_Esize (Entity (Pref))\n         and then Known_Static_Esize (Entity (Pref))\n       then\n          Siz := Esize (Entity (Pref));"}, {"sha": "e7eed282fbe7853771d68f33db0113f487c866cd", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -942,11 +942,11 @@ package body Exp_Ch3 is\n         (Case_Id : Entity_Id;\n          Variant : Node_Id) return Node_Id;\n       --  Build a case statement containing only two alternatives. The first\n-      --  alternative corresponds exactly to the discrete choices given on the\n-      --  variant with contains the components that we are generating the\n-      --  checks for. If the discriminant is one of these return False. The\n-      --  second alternative is an OTHERS choice that will return True\n-      --  indicating the discriminant did not match.\n+      --  alternative corresponds to the discrete choices given on the variant\n+      --  that contains the components that we are generating the checks\n+      --  for. If the discriminant is one of these return False. The second\n+      --  alternative is an OTHERS choice that returns True indicating the\n+      --  discriminant did not match.\n \n       function Build_Dcheck_Function\n         (Case_Id : Entity_Id;\n@@ -976,6 +976,7 @@ package body Exp_Ch3 is\n \n       begin\n          Case_Node := New_Node (N_Case_Statement, Loc);\n+         Set_End_Span (Case_Node, Uint_0);\n \n          --  Replace the discriminant which controls the variant with the name\n          --  of the formal of the checking function."}, {"sha": "59c9c44603728e777f8c9f10e0a9fa994d2b9116", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -3613,11 +3613,10 @@ package body Exp_Ch7 is\n         and then\n           (not Is_Library_Level_Entity (Spec_Id)\n \n-            --  Nested packages are considered to be library level entities,\n-            --  but do not need to be processed separately. True library level\n-            --  packages have a scope value of 1.\n+            --  Nested packages are library level entities, but do not need to\n+            --  be processed separately.\n \n-            or else Scope_Depth_Value (Spec_Id) /= Uint_1\n+            or else Scope_Depth (Spec_Id) /= Uint_1\n             or else (Is_Generic_Instance (Spec_Id)\n                       and then Package_Instantiation (Spec_Id) /= N))\n "}, {"sha": "f286763949e841a3d39cf1ec6164769f3bd5599d", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -373,9 +373,9 @@ package Exp_Disp is\n    --  target object in its first argument; such implicit argument is explicit\n    --  in the IP procedures built here.\n \n-   procedure Set_DT_Position_Value (Prim  : Entity_Id; Value : Uint);\n-   --  Set the position of a dispatching primitive its dispatch table. For\n-   --  subprogram wrappers propagate the value to the wrapped subprogram.\n+   procedure Set_DT_Position_Value (Prim : Entity_Id; Value : Uint);\n+   --  Set the position of a dispatching primitive in its dispatch table.\n+   --  For subprogram wrappers propagate the value to the wrapped subprogram.\n \n    procedure Set_DTC_Entity_Value (Tagged_Type : Entity_Id; Prim : Entity_Id);\n    --  Set the definite value of the DTC_Entity value associated with a given"}, {"sha": "c139bb4252440afad8e07e7f814f16978d2cb55f", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -325,7 +325,7 @@ package body Exp_Intr is\n       Result_Typ := Class_Wide_Type (Etype (Act_Constr));\n \n       --  Check that the accessibility level of the tag is no deeper than that\n-      --  of the constructor function (unless CodePeer_Mode)\n+      --  of the constructor function (unless CodePeer_Mode).\n \n       if not CodePeer_Mode then\n          Insert_Action (N,\n@@ -335,7 +335,8 @@ package body Exp_Intr is\n                  Left_Opnd  =>\n                    Build_Get_Access_Level (Loc, New_Copy_Tree (Tag_Arg)),\n                  Right_Opnd =>\n-                   Make_Integer_Literal (Loc, Scope_Depth (Act_Constr))),\n+                   Make_Integer_Literal\n+                     (Loc, Scope_Depth_Default_0 (Act_Constr))),\n \n              Then_Statements => New_List (\n                Make_Raise_Statement (Loc,"}, {"sha": "8983dab1c9db9523c3b263c7c190142695ab7c75", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -624,7 +624,7 @@ package body Exp_Strm is\n          end if;\n \n       else pragma Assert (Is_Access_Type (U_Type));\n-         if P_Size > System_Address_Size then\n+         if Present (P_Size) and then P_Size > System_Address_Size then\n             Lib_RE := RE_I_AD;\n          else\n             Lib_RE := RE_I_AS;\n@@ -868,7 +868,7 @@ package body Exp_Strm is\n \n       else pragma Assert (Is_Access_Type (U_Type));\n \n-         if P_Size > System_Address_Size then\n+         if Present (P_Size) and then P_Size > System_Address_Size then\n             Lib_RE := RE_W_AD;\n          else\n             Lib_RE := RE_W_AS;"}, {"sha": "1c5f61806c1e43d73c179c90c23c1eea384e570b", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -270,7 +270,9 @@ package body Exp_Unst is\n    begin\n       pragma Assert (Is_Subprogram (E));\n \n-      if Subps_Index (E) = Uint_0 then\n+      if Field_Is_Initial_Zero (E, F_Subps_Index)\n+        or else Subps_Index (E) = Uint_0\n+      then\n          E := Ultimate_Alias (E);\n \n          --  The body of a protected operation has a different name and"}, {"sha": "9bc94490acff6a94b430b106384ecc24ee9bead5", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -4784,7 +4784,8 @@ package body Exp_Util is\n       --  record or bit-packed array, then everything is fine, since the back\n       --  end can handle these cases correctly.\n \n-      elsif Esize (Comp) <= System_Max_Integer_Size\n+      elsif Known_Esize (Comp)\n+        and then Esize (Comp) <= System_Max_Integer_Size\n         and then (Is_Record_Type (UT) or else Is_Bit_Packed_Array (UT))\n       then\n          return False;"}, {"sha": "fac709478cd63214c1c1e0282e5818524267f59d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -865,9 +865,12 @@ package body Freeze is\n                Error_Msg_NE (Size_Too_Small_Message, Size_Clause (T), T);\n             end if;\n \n-         --  Set size if not set already\n+         --  Set size if not set already. Do not set it to Uint_0, because in\n+         --  some cases (notably array-of-record), the Component_Size is\n+         --  No_Uint, which causes S to be Uint_0. Presumably the RM_Size and\n+         --  Component_Size will eventually be set correctly by the back end.\n \n-         elsif not Known_RM_Size (T) then\n+         elsif not Known_RM_Size (T) and then S /= Uint_0 then\n             Set_RM_Size (T, S);\n          end if;\n       end Set_Small_Size;\n@@ -899,8 +902,17 @@ package body Freeze is\n             --  String literals always have known size, and we can set it\n \n             if Ekind (T) = E_String_Literal_Subtype then\n-               Set_Small_Size\n-                 (T, Component_Size (T) * String_Literal_Length (T));\n+               if Known_Component_Size (T) then\n+                  Set_Small_Size\n+                    (T, Component_Size (T) * String_Literal_Length (T));\n+\n+               else\n+                  --  The following is wrong, but does what previous versions\n+                  --  did. The Component_Size is unknown for the string in a\n+                  --  pragma Warnings.\n+                  Set_Small_Size (T, Uint_0);\n+               end if;\n+\n                return True;\n \n             --  Unconstrained types never have known at compile time size\n@@ -932,6 +944,12 @@ package body Freeze is\n                Dim   : Uint;\n \n             begin\n+               --  See comment in Set_Small_Size above\n+\n+               if No (Size) then\n+                  Size := Uint_0;\n+               end if;\n+\n                Index := First_Index (T);\n                while Present (Index) loop\n                   if Nkind (Index) = N_Range then\n@@ -954,7 +972,7 @@ package body Freeze is\n                   else\n                      Dim := Expr_Value (High) - Expr_Value (Low) + 1;\n \n-                     if Dim >= 0 then\n+                     if Dim > Uint_0 then\n                         Size := Size * Dim;\n                      else\n                         Size := Uint_0;\n@@ -3703,6 +3721,7 @@ package body Freeze is\n                      if Has_Pragma_Pack (Arr)\n                        and then not Present (Comp_Size_C)\n                        and then (Csiz = 7 or else Csiz = 15 or else Csiz = 31)\n+                       and then Known_Esize (Base_Type (Ctyp))\n                        and then Esize (Base_Type (Ctyp)) = Csiz + 1\n                      then\n                         Error_Msg_Uint_1 := Csiz;\n@@ -6646,7 +6665,7 @@ package body Freeze is\n \n                         Dim := Expr_Value (Hi) - Expr_Value (Lo) + 1;\n \n-                        if Dim >= 0 then\n+                        if Dim > Uint_0 then\n                            Num_Elmts := Num_Elmts * Dim;\n                         else\n                            Num_Elmts := Uint_0;\n@@ -6668,9 +6687,12 @@ package body Freeze is\n                         if Implicit_Packing then\n                            Set_Component_Size (Btyp, Rsiz);\n \n-                        --  Otherwise give an error message\n+                        --  Otherwise give an error message, except that if the\n+                        --  specified Size is zero, there is no need for pragma\n+                        --  Pack. Note that size zero is not considered\n+                        --  Addressable.\n \n-                        else\n+                        elsif RM_Size (E) /= Uint_0 then\n                            Error_Msg_NE\n                              (\"size given for& too small\", SZ, E);\n                            Error_Msg_N -- CODEFIX"}, {"sha": "d91faaa2b5a8309917d3aba731633a756b6ed3a0", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -252,7 +252,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Contract, Node_Id),\n         Sm (Is_Elaboration_Warnings_OK_Id, Flag),\n         Sm (Original_Record_Component, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag),\n         Sm (Current_Value, Node_Id), -- setter only\n@@ -607,7 +607,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  this is the first named subtype).\n \n    Ab (Decimal_Fixed_Point_Kind, Fixed_Point_Kind,\n-       (Sm (Digits_Value, Uint),\n+       (Sm (Digits_Value, Upos),\n         Sm (Has_Machine_Radix_Clause, Flag),\n         Sm (Machine_Radix_10, Flag),\n         Sm (Scale_Value, Uint)));\n@@ -623,7 +623,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  first named subtype).\n \n    Ab (Float_Kind, Real_Kind,\n-       (Sm (Digits_Value, Uint)));\n+       (Sm (Digits_Value, Upos)));\n \n    Cc (E_Floating_Point_Type, Float_Kind);\n        --  Floating point type, used for the anonymous base type of the\n@@ -866,23 +866,23 @@ begin -- Gen_IL.Gen.Gen_Entities\n        --  A private type, created by a private type declaration that has\n        --  neither the keyword limited nor the keyword tagged.\n        (Sm (Scalar_Range, Node_Id),\n-        Sm (Scope_Depth_Value, Uint)));\n+        Sm (Scope_Depth_Value, Unat)));\n \n    Cc (E_Private_Subtype, Private_Kind,\n        --  A subtype of a private type, created by a subtype declaration used\n        --  to declare a subtype of a private type.\n-       (Sm (Scope_Depth_Value, Uint)));\n+       (Sm (Scope_Depth_Value, Unat)));\n \n    Cc (E_Limited_Private_Type, Private_Kind,\n        --  A limited private type, created by a private type declaration that\n        --  has the keyword limited, but not the keyword tagged.\n        (Sm (Scalar_Range, Node_Id),\n-        Sm (Scope_Depth_Value, Uint)));\n+        Sm (Scope_Depth_Value, Unat)));\n \n    Cc (E_Limited_Private_Subtype, Private_Kind,\n        --  A subtype of a limited private type, created by a subtype declaration\n        --  used to declare a subtype of a limited private type.\n-       (Sm (Scope_Depth_Value, Uint)));\n+       (Sm (Scope_Depth_Value, Unat)));\n \n    Ab (Incomplete_Kind, Incomplete_Or_Private_Kind,\n        (Sm (Non_Limited_View, Node_Id)));\n@@ -900,7 +900,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (First_Entity, Node_Id),\n         Sm (First_Private_Entity, Node_Id),\n         Sm (Last_Entity, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (Stored_Constraint, Elist_Id)));\n \n    Ab (Task_Kind, Concurrent_Kind,\n@@ -1005,11 +1005,11 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Linker_Section_Pragma, Node_Id),\n         Sm (Overridden_Operation, Node_Id),\n         Sm (Protected_Body_Subprogram, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (Static_Call_Helper, Node_Id),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag),\n-        Sm (Subps_Index, Uint)));\n+        Sm (Subps_Index, Unat)));\n \n    Cc (E_Function, Subprogram_Kind,\n        --  A function, created by a function declaration or a function body\n@@ -1137,7 +1137,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Postconditions_Proc, Node_Id),\n         Sm (Protected_Body_Subprogram, Node_Id),\n         Sm (Protection_Object, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag)));\n \n@@ -1164,7 +1164,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Protected_Body_Subprogram, Node_Id),\n         Sm (Protection_Object, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag)));\n \n@@ -1178,7 +1178,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Last_Entity, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n         Sm (Return_Applies_To, Node_Id),\n-        Sm (Scope_Depth_Value, Uint)));\n+        Sm (Scope_Depth_Value, Unat)));\n \n    Cc (E_Entry_Index_Parameter, Entity_Kind,\n        --  An entry index parameter created by an entry index specification\n@@ -1209,7 +1209,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Is_Elaboration_Warnings_OK_Id, Flag),\n         Sm (Last_Entity, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag)));\n \n@@ -1254,7 +1254,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Has_Loop_Entry_Attributes, Flag),\n         Sm (Last_Entity, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Scope_Depth_Value, Uint)));\n+        Sm (Scope_Depth_Value, Unat)));\n \n    Cc (E_Return_Statement, Entity_Kind,\n        --  A dummy entity created for each return statement. Used to hold\n@@ -1266,7 +1266,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        (Sm (First_Entity, Node_Id),\n         Sm (Last_Entity, Node_Id),\n         Sm (Return_Applies_To, Node_Id),\n-        Sm (Scope_Depth_Value, Uint)));\n+        Sm (Scope_Depth_Value, Unat)));\n \n    Cc (E_Package, Entity_Kind,\n        --  A package, created by a package declaration\n@@ -1303,7 +1303,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Related_Instance, Node_Id),\n         Sm (Renamed_In_Spec, Flag),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Aux_Pragma, Node_Id),\n         Sm (SPARK_Aux_Pragma_Inherited, Flag),\n         Sm (SPARK_Pragma, Node_Id),\n@@ -1323,7 +1323,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Last_Entity, Node_Id),\n         Sm (Related_Instance, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Aux_Pragma, Node_Id),\n         Sm (SPARK_Aux_Pragma_Inherited, Flag),\n         Sm (SPARK_Pragma, Node_Id),\n@@ -1358,7 +1358,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Interface_Name, Node_Id),\n         Sm (Last_Entity, Node_Id),\n         Sm (Renamed_Or_Alias, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n+        Sm (Scope_Depth_Value, Unat),\n         Sm (SPARK_Pragma, Node_Id),\n         Sm (SPARK_Pragma_Inherited, Flag)));\n "}, {"sha": "3b6bd68cbd984b83c15a4686e4e42b9c9e93d52f", "filename": "gcc/ada/gen_il-gen-gen_nodes.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -984,7 +984,7 @@ begin -- Gen_IL.Gen.Gen_Nodes\n    Cc (N_Case_Statement, N_Statement_Other_Than_Procedure_Call,\n        (Sy (Expression, Node_Id, Default_Empty),\n         Sy (Alternatives, List_Id, Default_No_List),\n-        Sy (End_Span, Uint, Default_Uint_0),\n+        Sy (End_Span, Unat, Default_Uint_0),\n         Sm (From_Conditional_Expression, Flag)));\n \n    Cc (N_Code_Statement, N_Statement_Other_Than_Procedure_Call,\n@@ -1094,7 +1094,7 @@ begin -- Gen_IL.Gen.Gen_Nodes\n         Sy (Then_Statements, List_Id),\n         Sy (Elsif_Parts, List_Id, Default_No_List),\n         Sy (Else_Statements, List_Id, Default_No_List),\n-        Sy (End_Span, Uint, Default_Uint_0),\n+        Sy (End_Span, Unat, Default_Uint_0),\n         Sm (From_Conditional_Expression, Flag)));\n \n    Cc (N_Accept_Alternative, Node_Kind,\n@@ -1594,7 +1594,7 @@ begin -- Gen_IL.Gen.Gen_Nodes\n         Sm (Dcheck_Function, Node_Id),\n         Sm (Enclosing_Variant, Node_Id),\n         Sm (Has_SP_Choice, Flag),\n-        Sm (Present_Expr, Uint)));\n+        Sm (Present_Expr, Valid_Uint)));\n \n    Cc (N_Variant_Part, Node_Kind,\n        (Sy (Name, Node_Id, Default_Empty),"}, {"sha": "eed98ee97cc86cca0e1b3bbe974b5cbed59a6240", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -1197,6 +1197,12 @@ package body Gen_IL.Gen is\n          for F in First .. Last loop\n             if Field_Table (F).Field_Type in Node_Or_Entity_Type then\n                Result (Node_Id) := True;\n+\n+            --  Subtypes of Uint all use the same Cast for Uint\n+\n+            elsif Field_Table (F).Field_Type in Uint_Subtype then\n+               Result (Uint) := True;\n+\n             else\n                Result (Field_Table (F).Field_Type) := True;\n             end if;\n@@ -1767,6 +1773,7 @@ package body Gen_IL.Gen is\n          end if;\n \n          Put_Get_Set_Incr (S, F, \"Set\");\n+\n          Decrease_Indent (S, 3);\n          Put (S, \"end Set_\" & Image (F) & \";\" & LF & LF);\n       end Put_Setter_Body;"}, {"sha": "a1a8062c4aceafc36d56193a8344bf091532d314", "filename": "gcc/ada/gen_il-internals.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-internals.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-internals.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -370,7 +370,7 @@ package body Gen_IL.Internals is\n          return Image (Default);\n \n       else\n-         --  Strip off the prefix and capitalize it\n+         --  Strip off the prefix\n \n          declare\n             Im : constant String := Image (Default);"}, {"sha": "7b095c09692bf1896a510b6045dc0796554524e6", "filename": "gcc/ada/gen_il-internals.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-internals.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-internals.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.ads?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -133,7 +133,7 @@ package Gen_IL.Internals is\n       Default_Uint_0); -- Uint\n    --  Default value for a field in the Nmake functions. No_Default if the\n    --  field parameter has no default value. Otherwise this indicates the\n-   --  default value used, which must matcht the type of the field.\n+   --  default value used, which must match the type of the field.\n \n    function Image (Default : Field_Default_Value) return String;\n    --  This will be something like \"Default_Empty\".\n@@ -191,7 +191,10 @@ package Gen_IL.Internals is\n \n    function Special_Default\n      (Field_Type : Type_Enum) return String is\n-      (if Field_Type = Elist_Id then \"No_Elist\" else \"Uint_0\");\n+      (case Field_Type is\n+         when Elist_Id => \"No_Elist\",\n+         when Uint => \"No_Uint\",\n+         when others => \"can't happen\");\n \n    ----------------\n "}, {"sha": "9395e00818d2209ae9fdd54942778f30e670d8ea", "filename": "gcc/ada/gen_il-types.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fgen_il-types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-types.ads?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -589,5 +589,7 @@ package Gen_IL.Types is\n \n    subtype Uint_Subtype is Type_Enum with\n      Predicate => Uint_Subtype in Valid_Uint | Unat | Upos | Nonzero_Uint;\n+   --  These are the subtypes of Uint that have predicates restricting their\n+   --  values.\n \n end Gen_IL.Types;"}, {"sha": "83d9681d7a26581ef574323749a829406894f021", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -367,46 +367,48 @@ package body Repinfo is\n          null;\n \n       else\n-         --  If Esize and RM_Size are the same, list as Size. This is a common\n-         --  case, which we may as well list in simple form.\n+         if Known_Esize (Ent) and then Known_RM_Size (Ent) then\n+            --  If Esize and RM_Size are the same, list as Size. This is a\n+            --  common case, which we may as well list in simple form.\n \n-         if Esize (Ent) = RM_Size (Ent) then\n-            if List_Representation_Info_To_JSON then\n-               Write_Str (\"  \"\"Size\"\": \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\",\");\n-            else\n-               Write_Str (\"for \");\n-               List_Name (Ent);\n-               Write_Str (\"'Size use \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\";\");\n-            end if;\n+            if Esize (Ent) = RM_Size (Ent) then\n+               if List_Representation_Info_To_JSON then\n+                  Write_Str (\"  \"\"Size\"\": \");\n+                  Write_Val (Esize (Ent));\n+                  Write_Line (\",\");\n+               else\n+                  Write_Str (\"for \");\n+                  List_Name (Ent);\n+                  Write_Str (\"'Size use \");\n+                  Write_Val (Esize (Ent));\n+                  Write_Line (\";\");\n+               end if;\n \n-         --  Otherwise list size values separately\n+            --  Otherwise list size values separately\n \n-         else\n-            if List_Representation_Info_To_JSON then\n-               Write_Str (\"  \"\"Object_Size\"\": \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\",\");\n+            else\n+               if List_Representation_Info_To_JSON then\n+                  Write_Str (\"  \"\"Object_Size\"\": \");\n+                  Write_Val (Esize (Ent));\n+                  Write_Line (\",\");\n \n-               Write_Str (\"  \"\"Value_Size\"\": \");\n-               Write_Val (RM_Size (Ent));\n-               Write_Line (\",\");\n+                  Write_Str (\"  \"\"Value_Size\"\": \");\n+                  Write_Val (RM_Size (Ent));\n+                  Write_Line (\",\");\n \n-            else\n-               Write_Str (\"for \");\n-               List_Name (Ent);\n-               Write_Str (\"'Object_Size use \");\n-               Write_Val (Esize (Ent));\n-               Write_Line (\";\");\n-\n-               Write_Str (\"for \");\n-               List_Name (Ent);\n-               Write_Str (\"'Value_Size use \");\n-               Write_Val (RM_Size (Ent));\n-               Write_Line (\";\");\n+               else\n+                  Write_Str (\"for \");\n+                  List_Name (Ent);\n+                  Write_Str (\"'Object_Size use \");\n+                  Write_Val (Esize (Ent));\n+                  Write_Line (\";\");\n+\n+                  Write_Str (\"for \");\n+                  List_Name (Ent);\n+                  Write_Str (\"'Value_Size use \");\n+                  Write_Val (RM_Size (Ent));\n+                  Write_Line (\";\");\n+               end if;\n             end if;\n          end if;\n       end if;"}, {"sha": "ee5c7cfe3f95883896bc146559393e81514324b1", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -1022,16 +1022,20 @@ package body Sem is\n       Scop : Entity_Id;\n \n    begin\n-      --  Entity is global if defined outside of current outer_generic_scope:\n-      --  Either the entity has a smaller depth that the outer generic, or it\n+      --  Entity is global if defined outside of current Outer_Generic_Scope:\n+      --  Either the entity has a smaller depth than the outer generic, or it\n       --  is in a different compilation unit, or it is defined within a unit\n-      --  in the same compilation, that is not within the outer_generic.\n+      --  in the same compilation, that is not within the outer generic.\n \n       if No (Outer_Generic_Scope) then\n          return False;\n \n-      elsif Scope_Depth (Scope (E)) < Scope_Depth (Outer_Generic_Scope)\n-        or else not In_Same_Source_Unit (E, Outer_Generic_Scope)\n+      --  It makes no sense to compare depths if not in same unit. Scope_Depth\n+      --  is not set for inherited operations.\n+\n+      elsif not In_Same_Source_Unit (E, Outer_Generic_Scope)\n+        or else not Scope_Depth_Set (Scope (E))\n+        or else Scope_Depth (Scope (E)) < Scope_Depth (Outer_Generic_Scope)\n       then\n          return True;\n "}, {"sha": "a62eb7cfb9f38ebd1a1b0283d2273b22d31226b5", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -8090,7 +8090,9 @@ package body Sem_Ch12 is\n                 (Scope (Ent) = Current_Instantiated_Parent.Gen_Id\n                   and then not Is_Child_Unit (Ent))\n               or else\n-                (Scope_Depth (Scope (Ent)) >\n+                (Scope_Depth_Set (Scope (Ent))\n+                  and then\n+                 Scope_Depth (Scope (Ent)) >\n                              Scope_Depth (Current_Instantiated_Parent.Gen_Id)\n                   and then\n                     Get_Source_Unit (Ent) ="}, {"sha": "3374e8bf1f60f3f213f77dbc3119cf76924f378c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -7960,7 +7960,7 @@ package body Sem_Ch13 is\n                     (\"stream size for elementary type must be 8, 16, 24, \" &\n                      \"32 or 64\", N);\n \n-               elsif RM_Size (U_Ent) > Size then\n+               elsif Known_RM_Size (U_Ent) and then RM_Size (U_Ent) > Size then\n                   Error_Msg_Uint_1 := RM_Size (U_Ent);\n                   Error_Msg_N\n                     (\"stream size for elementary type must be 8, 16, 24, \" &\n@@ -17569,7 +17569,9 @@ package body Sem_Ch13 is\n                Source_Siz := RM_Size (Source);\n                Target_Siz := RM_Size (Target);\n \n-               if Source_Siz /= Target_Siz then\n+               if Present (Source_Siz) and then Present (Target_Siz)\n+                 and then Source_Siz /= Target_Siz\n+               then\n                   Error_Msg\n                     (\"?z?types for unchecked conversion have different sizes!\",\n                      Eloc, Act_Unit);"}, {"sha": "c8d4ec1abf3368ee51314d245873c31b1ddb16a6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 114, "deletions": 120, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -6343,7 +6343,7 @@ package body Sem_Ch3 is\n \n          --  Complete setup of implicit base type\n \n-         Set_Component_Size (Implicit_Base, Uint_0);\n+         pragma Assert (not Known_Component_Size (Implicit_Base));\n          Set_Component_Type (Implicit_Base, Element_Type);\n          Set_Finalize_Storage_Only\n                             (Implicit_Base,\n@@ -6372,7 +6372,7 @@ package body Sem_Ch3 is\n          Reinit_Size_Align            (T);\n          Set_Etype                    (T, T);\n          Set_Scope                    (T, Current_Scope);\n-         Set_Component_Size           (T, Uint_0);\n+         pragma Assert (not Known_Component_Size (T));\n          Set_Is_Constrained           (T, False);\n          Set_Is_Fixed_Lower_Bound_Array_Subtype\n                                       (T, Has_FLB_Index);\n@@ -17585,7 +17585,7 @@ package body Sem_Ch3 is\n       Set_High_Bound (R_Node, B_Node);\n \n       --  Initialize various fields of the type. Some of this information\n-      --  may be overwritten later through rep.clauses.\n+      --  may be overwritten later through rep. clauses.\n \n       Set_Scalar_Range    (T, R_Node);\n       Set_RM_Size         (T, UI_From_Int (Minimum_Size (T)));\n@@ -18517,7 +18517,12 @@ package body Sem_Ch3 is\n       Set_Size_Info          (T,          Implicit_Base);\n       Set_RM_Size            (T, RM_Size (Implicit_Base));\n       Inherit_Rep_Item_Chain (T,          Implicit_Base);\n-      Set_Digits_Value       (T, Digs_Val);\n+\n+      if Digs_Val >= Uint_1 then\n+         Set_Digits_Value (T, Digs_Val);\n+      else\n+         pragma Assert (Serious_Errors_Detected > 0); null;\n+      end if;\n    end Floating_Point_Type_Declaration;\n \n    ----------------------------\n@@ -19641,8 +19646,8 @@ package body Sem_Ch3 is\n             return;\n          end if;\n \n-         --  If the range bounds are \"T'Low .. T'High\" where T is a name of\n-         --  a discrete type, then use T as the type of the index.\n+         --  If the range bounds are \"T'First .. T'Last\" where T is a name of a\n+         --  discrete type, then use T as the type of the index.\n \n          if Nkind (Low_Bound (N)) = N_Attribute_Reference\n            and then Attribute_Name (Low_Bound (N)) = Name_First\n@@ -21747,141 +21752,130 @@ package body Sem_Ch3 is\n          --  represent the null range the Constraint_Error exception should\n          --  not be raised.\n \n-         --  ??? The Is_Null_Range (Lo, Hi) test should disappear since it\n-         --  is done in the call to Range_Check (R, T); below.\n+         --  Capture values of bounds and generate temporaries for them\n+         --  if needed, before applying checks, since checks may cause\n+         --  duplication of the expression without forcing evaluation.\n \n-         if Is_Null_Range (Lo, Hi) then\n-            null;\n+         --  The forced evaluation removes side effects from expressions,\n+         --  which should occur also in GNATprove mode. Otherwise, we end up\n+         --  with unexpected insertions of actions at places where this is\n+         --  not supposed to occur, e.g. on default parameters of a call.\n \n-         else\n-            --  Capture values of bounds and generate temporaries for them\n-            --  if needed, before applying checks, since checks may cause\n-            --  duplication of the expression without forcing evaluation.\n-\n-            --  The forced evaluation removes side effects from expressions,\n-            --  which should occur also in GNATprove mode. Otherwise, we end up\n-            --  with unexpected insertions of actions at places where this is\n-            --  not supposed to occur, e.g. on default parameters of a call.\n-\n-            if Expander_Active or GNATprove_Mode then\n-\n-               --  Call Force_Evaluation to create declarations as needed\n-               --  to deal with side effects, and also create typ_FIRST/LAST\n-               --  entities for bounds if we have a subtype name.\n-\n-               --  Note: we do this transformation even if expansion is not\n-               --  active if we are in GNATprove_Mode since the transformation\n-               --  is in general required to ensure that the resulting tree has\n-               --  proper Ada semantics.\n-\n-               Force_Evaluation\n-                 (Lo, Related_Id => Subtyp, Is_Low_Bound  => True);\n-               Force_Evaluation\n-                 (Hi, Related_Id => Subtyp, Is_High_Bound => True);\n-            end if;\n+         if Expander_Active or GNATprove_Mode then\n \n-            --  We use a flag here instead of suppressing checks on the type\n-            --  because the type we check against isn't necessarily the place\n-            --  where we put the check.\n+            --  Call Force_Evaluation to create declarations as needed\n+            --  to deal with side effects, and also create typ_FIRST/LAST\n+            --  entities for bounds if we have a subtype name.\n \n-            R_Checks := Get_Range_Checks (R, T);\n+            --  Note: we do this transformation even if expansion is not\n+            --  active if we are in GNATprove_Mode since the transformation\n+            --  is in general required to ensure that the resulting tree has\n+            --  proper Ada semantics.\n \n-            --  Look up tree to find an appropriate insertion point. We can't\n-            --  just use insert_actions because later processing depends on\n-            --  the insertion node. Prior to Ada 2012 the insertion point could\n-            --  only be a declaration or a loop, but quantified expressions can\n-            --  appear within any context in an expression, and the insertion\n-            --  point can be any statement, pragma, or declaration.\n+            Force_Evaluation\n+              (Lo, Related_Id => Subtyp, Is_Low_Bound  => True);\n+            Force_Evaluation\n+              (Hi, Related_Id => Subtyp, Is_High_Bound => True);\n+         end if;\n \n-            Insert_Node := Parent (R);\n-            while Present (Insert_Node) loop\n-               exit when\n-                 Nkind (Insert_Node) in N_Declaration\n-                 and then\n-                   Nkind (Insert_Node) not in N_Component_Declaration\n-                                            | N_Loop_Parameter_Specification\n-                                            | N_Function_Specification\n-                                            | N_Procedure_Specification;\n-\n-               exit when Nkind (Insert_Node) in\n-                           N_Later_Decl_Item                     |\n-                           N_Statement_Other_Than_Procedure_Call |\n-                           N_Procedure_Call_Statement            |\n-                           N_Pragma;\n-\n-               Insert_Node := Parent (Insert_Node);\n-            end loop;\n+         --  We use a flag here instead of suppressing checks on the type\n+         --  because the type we check against isn't necessarily the place\n+         --  where we put the check.\n \n-            --  Why would Type_Decl not be present???  Without this test,\n-            --  short regression tests fail.\n+         R_Checks := Get_Range_Checks (R, T);\n \n-            if Present (Insert_Node) then\n+         --  Look up tree to find an appropriate insertion point. We can't\n+         --  just use insert_actions because later processing depends on\n+         --  the insertion node. Prior to Ada 2012 the insertion point could\n+         --  only be a declaration or a loop, but quantified expressions can\n+         --  appear within any context in an expression, and the insertion\n+         --  point can be any statement, pragma, or declaration.\n \n-               --  Case of loop statement. Verify that the range is part of the\n-               --  subtype indication of the iteration scheme.\n+         Insert_Node := Parent (R);\n+         while Present (Insert_Node) loop\n+            exit when\n+              Nkind (Insert_Node) in N_Declaration\n+              and then\n+                Nkind (Insert_Node) not in N_Component_Declaration\n+                                         | N_Loop_Parameter_Specification\n+                                         | N_Function_Specification\n+                                         | N_Procedure_Specification;\n+\n+            exit when Nkind (Insert_Node) in\n+                        N_Later_Decl_Item                     |\n+                        N_Statement_Other_Than_Procedure_Call |\n+                        N_Procedure_Call_Statement            |\n+                        N_Pragma;\n+\n+            Insert_Node := Parent (Insert_Node);\n+         end loop;\n \n-               if Nkind (Insert_Node) = N_Loop_Statement then\n-                  declare\n-                     Indic : Node_Id;\n+         if Present (Insert_Node) then\n \n-                  begin\n-                     Indic := Parent (R);\n-                     while Present (Indic)\n-                       and then Nkind (Indic) /= N_Subtype_Indication\n-                     loop\n-                        Indic := Parent (Indic);\n-                     end loop;\n+            --  Case of loop statement. Verify that the range is part of the\n+            --  subtype indication of the iteration scheme.\n \n-                     if Present (Indic) then\n-                        Def_Id := Etype (Subtype_Mark (Indic));\n+            if Nkind (Insert_Node) = N_Loop_Statement then\n+               declare\n+                  Indic : Node_Id;\n \n-                        Insert_Range_Checks\n-                          (R_Checks,\n-                           Insert_Node,\n-                           Def_Id,\n-                           Sloc (Insert_Node),\n-                           Do_Before => True);\n-                     end if;\n-                  end;\n+               begin\n+                  Indic := Parent (R);\n+                  while Present (Indic)\n+                    and then Nkind (Indic) /= N_Subtype_Indication\n+                  loop\n+                     Indic := Parent (Indic);\n+                  end loop;\n \n-               --  Case of declarations. If the declaration is for a type and\n-               --  involves discriminants, the checks are premature at the\n-               --  declaration point and need to wait for the expansion of the\n-               --  initialization procedure, which will pass in the list to put\n-               --  them on; otherwise, the checks are done at the declaration\n-               --  point and there is no need to do them again in the\n-               --  initialization procedure.\n+                  if Present (Indic) then\n+                     Def_Id := Etype (Subtype_Mark (Indic));\n \n-               elsif Nkind (Insert_Node) in N_Declaration then\n-                  Def_Id := Defining_Identifier (Insert_Node);\n+                     Insert_Range_Checks\n+                       (R_Checks,\n+                        Insert_Node,\n+                        Def_Id,\n+                        Sloc (Insert_Node),\n+                        Do_Before => True);\n+                  end if;\n+               end;\n \n-                  if (Ekind (Def_Id) = E_Record_Type\n-                       and then Depends_On_Discriminant (R))\n-                    or else\n-                     (Ekind (Def_Id) = E_Protected_Type\n-                       and then Has_Discriminants (Def_Id))\n-                  then\n-                     if Present (Check_List) then\n-                        Append_Range_Checks\n-                          (R_Checks,\n-                            Check_List, Def_Id, Sloc (Insert_Node));\n-                     end if;\n+            --  Case of declarations. If the declaration is for a type and\n+            --  involves discriminants, the checks are premature at the\n+            --  declaration point and need to wait for the expansion of the\n+            --  initialization procedure, which will pass in the list to put\n+            --  them on; otherwise, the checks are done at the declaration\n+            --  point and there is no need to do them again in the\n+            --  initialization procedure.\n \n-                  else\n-                     if No (Check_List) then\n-                        Insert_Range_Checks\n-                          (R_Checks,\n-                            Insert_Node, Def_Id, Sloc (Insert_Node));\n-                     end if;\n-                  end if;\n+            elsif Nkind (Insert_Node) in N_Declaration then\n+               Def_Id := Defining_Identifier (Insert_Node);\n \n-               --  Case of statements. Drop the checks, as the range appears in\n-               --  the context of a quantified expression. Insertion will take\n-               --  place when expression is expanded.\n+               if (Ekind (Def_Id) = E_Record_Type\n+                    and then Depends_On_Discriminant (R))\n+                 or else\n+                  (Ekind (Def_Id) = E_Protected_Type\n+                    and then Has_Discriminants (Def_Id))\n+               then\n+                  if Present (Check_List) then\n+                     Append_Range_Checks\n+                       (R_Checks,\n+                         Check_List, Def_Id, Sloc (Insert_Node));\n+                  end if;\n \n                else\n-                  null;\n+                  if No (Check_List) then\n+                     Insert_Range_Checks\n+                       (R_Checks,\n+                         Insert_Node, Def_Id, Sloc (Insert_Node));\n+                  end if;\n                end if;\n+\n+            --  Case of statements. Drop the checks, as the range appears in\n+            --  the context of a quantified expression. Insertion will take\n+            --  place when expression is expanded.\n+\n+            else\n+               null;\n             end if;\n          end if;\n "}, {"sha": "7b3dfa606f71a47facc3de86ee6a12a64547efcc", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -7279,8 +7279,10 @@ package body Sem_Ch8 is\n                         if Within (It.Nam, Inst) then\n                            if Within (Old_S, Inst) then\n                               declare\n-                                 It_D  : constant Uint := Scope_Depth (It.Nam);\n-                                 Old_D : constant Uint := Scope_Depth (Old_S);\n+                                 It_D  : constant Uint :=\n+                                   Scope_Depth_Default_0 (It.Nam);\n+                                 Old_D : constant Uint :=\n+                                   Scope_Depth_Default_0 (Old_S);\n                                  N_Ent : Entity_Id;\n                               begin\n                                  --  Choose the innermost subprogram, which\n@@ -9057,10 +9059,12 @@ package body Sem_Ch8 is\n             Set_Scope_Depth_Value (S, Uint_1);\n \n          elsif not Is_Record_Type (Current_Scope) then\n-            if Ekind (S) = E_Loop then\n-               Set_Scope_Depth_Value (S, Scope_Depth (Current_Scope));\n-            else\n-               Set_Scope_Depth_Value (S, Scope_Depth (Current_Scope) + 1);\n+            if Scope_Depth_Set (Current_Scope) then\n+               if Ekind (S) = E_Loop then\n+                  Set_Scope_Depth_Value (S, Scope_Depth (Current_Scope));\n+               else\n+                  Set_Scope_Depth_Value (S, Scope_Depth (Current_Scope) + 1);\n+               end if;\n             end if;\n          end if;\n       end if;"}, {"sha": "b8ed8a4bcb9297683ac6d81809f82fc7e4d69765", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -315,7 +315,8 @@ package body Sem_Util is\n                --  Ignore transient scopes made during expansion\n \n                if Comes_From_Source (Node_Par) then\n-                  return Scope_Depth (Encl_Scop) + Master_Lvl_Modifier;\n+                  return\n+                    Scope_Depth_Default_0 (Encl_Scop) + Master_Lvl_Modifier;\n                end if;\n \n             --  For a return statement within a function, return\n@@ -1137,6 +1138,10 @@ package body Sem_Util is\n \n    function Addressable (V : Uint) return Boolean is\n    begin\n+      if No (V) then\n+         return False;\n+      end if;\n+\n       return V = Uint_8  or else\n              V = Uint_16 or else\n              V = Uint_32 or else"}, {"sha": "79269a5972d4ed2f990a926a35e5f9fafd1cb4ad", "filename": "gcc/ada/sinfo-utils.adb", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo-utils.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -242,15 +242,28 @@ package body Sinfo.Utils is\n    use Seinfo;\n \n    function Is_In_Union_Id (F_Kind : Field_Kind) return Boolean is\n-     (F_Kind in Node_Id_Field\n-              | List_Id_Field\n-              | Elist_Id_Field\n-              | Name_Id_Field\n-              | String_Id_Field\n-              | Uint_Field\n-              | Ureal_Field\n-              | Union_Id_Field);\n    --  True if the field type is one that can be converted to Types.Union_Id\n+     (case F_Kind is\n+       when Node_Id_Field\n+          | List_Id_Field\n+          | Elist_Id_Field\n+          | Name_Id_Field\n+          | String_Id_Field\n+          | Valid_Uint_Field\n+          | Unat_Field\n+          | Upos_Field\n+          | Nonzero_Uint_Field\n+          | Uint_Field\n+          | Ureal_Field\n+          | Union_Id_Field => True,\n+       when Flag_Field\n+          | Node_Kind_Type_Field\n+          | Entity_Kind_Type_Field\n+          | Source_Ptr_Field\n+          | Small_Paren_Count_Type_Field\n+          | Convention_Id_Field\n+          | Component_Alignment_Kind_Field\n+          | Mechanism_Type_Field => False);\n \n    -----------------------\n    -- Walk_Sinfo_Fields --"}, {"sha": "69996cbbc00c3ba55ba5882d62db90d6d639a2c3", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -4394,7 +4394,12 @@ package body Sprint is\n                   when E_Modular_Integer_Type =>\n                      Write_Header;\n                      Write_Str (\"mod \");\n-                     Write_Uint_With_Col_Check (Modulus (Typ), Auto);\n+\n+                     if No (Modulus (Typ)) then\n+                        Write_Uint_With_Col_Check (Uint_0, Auto);\n+                     else\n+                        Write_Uint_With_Col_Check (Modulus (Typ), Auto);\n+                     end if;\n \n                   --  Floating-point types and subtypes\n "}, {"sha": "d36042ca57977937866533b4eaf58185b8741f06", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -885,14 +885,13 @@ package body Treepr is\n                Val : constant Uint := Get_Uint (N, FD.Offset);\n                function Cast is new Unchecked_Conversion (Uint, Int);\n             begin\n-               --  Do this even if Val = No_Uint, because Uint fields default\n-               --  to Uint_0.\n-\n-               Print_Initial;\n-               UI_Write (Val, Format);\n-               Write_Str (\" (Uint = \");\n-               Write_Int (Cast (Val));\n-               Write_Char (')');\n+               if Present (Val) then\n+                  Print_Initial;\n+                  UI_Write (Val, Format);\n+                  Write_Str (\" (Uint = \");\n+                  Write_Int (Cast (Val));\n+                  Write_Char (')');\n+               end if;\n             end;\n \n          when Valid_Uint_Field | Unat_Field | Upos_Field"}, {"sha": "093836547db972d49904ae7fef74bfb5e0f478ad", "filename": "gcc/ada/types.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -261,10 +261,10 @@ typedef Int String_Id;\n \n /* Type used for representation of universal integers.  */\n typedef Int Uint;\n-typedef Int Valid_Uint;\n-typedef Int Unat;\n-typedef Int Upos;\n-typedef Int Nonzero_Uint;\n+typedef Uint Valid_Uint;\n+typedef Uint Unat;\n+typedef Uint Upos;\n+typedef Uint Nonzero_Uint;\n \n /* Used to indicate missing Uint value.  */\n #define No_Uint Uint_Low_Bound"}, {"sha": "5d1dec1e1bdcf867a00086e844098b3ad8966ff2", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e38022125f2f336e5d281fb3e5e66191d21e73/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=36e38022125f2f336e5d281fb3e5e66191d21e73", "patch": "@@ -282,7 +282,10 @@ package body Uintp is\n       --  value is returned from a correctness point of view.\n \n       procedure Image_Char (C : Character);\n-      --  Internal procedure to output one character\n+      --  Output one character\n+\n+      procedure Image_String (S : String);\n+      --  Output characters\n \n       procedure Image_Exponent (N : Natural);\n       --  Output non-zero exponent. Note that we only use the exponent form in\n@@ -371,6 +374,17 @@ package body Uintp is\n            Character'Val (Character'Pos ('0') + N mod 10);\n       end Image_Exponent;\n \n+      ------------------\n+      -- Image_String --\n+      ------------------\n+\n+      procedure Image_String (S : String) is\n+      begin\n+         for X in S'Range loop\n+            Image_Char (S (X));\n+         end loop;\n+      end Image_String;\n+\n       ----------------\n       -- Image_Uint --\n       ----------------\n@@ -401,7 +415,7 @@ package body Uintp is\n \n    begin\n       if No (Input) then\n-         Image_Char ('?');\n+         Image_String (\"No_Uint\");\n          return;\n       end if;\n "}]}