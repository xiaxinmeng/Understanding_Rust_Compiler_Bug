{"sha": "80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlOWIzYWFhYzQ2MWRhYzMxYjhhMzk5MGFjNmU4MjBkNWJjZTU0ZA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-01-08T09:21:19Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-01-08T09:21:19Z"}, "message": "re PR tree-optimization/67781 (wrong code generated on big-endian with -O1 -fexpensive-optimizations)\n\n2016-01-08  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR tree-optimization/67781\n    * tree-ssa-math-opts.c (find_bswap_or_nop): Zero out bytes in cmpxchg\n    and cmpnop in two steps: first the ones not accessed in original\n    gimple expression in a endian independent way and then the ones not\n    accessed in the final result in an endian-specific way.\n\n    gcc/testsuite/\n    PR tree-optimization/67781\n    * gcc.c-torture/execute/pr67781.c: New file.\n\nFrom-SVN: r232154", "tree": {"sha": "d1c49541c8f65f13e5506de1ce8fd3b3535f1404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1c49541c8f65f13e5506de1ce8fd3b3535f1404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "262a363ff9f03262fe5a8420fa53bd10cb4306d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262a363ff9f03262fe5a8420fa53bd10cb4306d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262a363ff9f03262fe5a8420fa53bd10cb4306d6"}], "stats": {"total": 83, "additions": 73, "deletions": 10}, "files": [{"sha": "b9c6daf55fb5464dcbaed03ed352fc3f99286e06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "patch": "@@ -1,3 +1,11 @@\n+2016-01-08  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/67781\n+\t* tree-ssa-math-opts.c (find_bswap_or_nop): Zero out bytes in cmpxchg\n+\tand cmpnop in two steps: first the ones not accessed in original\n+\tgimple expression in a endian independent way and then the ones not\n+\taccessed in the final result in an endian-specific way.\n+\n 2016-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69083"}, {"sha": "6b30af01e567b9ec71e0d38b4c1816f4f97f850d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "patch": "@@ -1,3 +1,8 @@\n+2016-01-08  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/67781\n+\t* gcc.c-torture/execute/pr67781.c: New file.\n+\n 2016-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69083"}, {"sha": "bf50aa2f6c38df89ac66d815245770e6ef4b75cd", "filename": "gcc/testsuite/gcc.c-torture/execute/pr67781.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr67781.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr67781.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr67781.c?ref=80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "patch": "@@ -0,0 +1,34 @@\n+#ifdef __UINT32_TYPE__\n+typedef __UINT32_TYPE__ uint32_t;\n+#else\n+typedef unsigned uint32_t;\n+#endif\n+\n+#ifdef __UINT8_TYPE__\n+typedef __UINT8_TYPE__ uint8_t;\n+#else\n+typedef unsigned char uint8_t;\n+#endif\n+\n+struct\n+{\n+  uint32_t a;\n+  uint8_t b;\n+} s = { 0x123456, 0x78 };\n+\n+int pr67781()\n+{\n+  uint32_t c = (s.a << 8) | s.b;\n+  return c;\n+}\n+\n+int\n+main ()\n+{\n+  if (sizeof (uint32_t) * __CHAR_BIT__ != 32)\n+    return 0;\n+\n+  if (pr67781 () != 0x12345678)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "abd77e76dce4e90f49dec2a7522ecd6894bb7457", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9b3aaac461dac31b8a3990ac6e820d5bce54d/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=80e9b3aaac461dac31b8a3990ac6e820d5bce54d", "patch": "@@ -2449,6 +2449,8 @@ find_bswap_or_nop_1 (gimple *stmt, struct symbolic_number *n, int limit)\n static gimple *\n find_bswap_or_nop (gimple *stmt, struct symbolic_number *n, bool *bswap)\n {\n+  unsigned rsize;\n+  uint64_t tmpn, mask;\n /* The number which the find_bswap_or_nop_1 result should match in order\n    to have a full byte swap.  The number is shifted to the right\n    according to the size of the symbolic number before using it.  */\n@@ -2472,24 +2474,38 @@ find_bswap_or_nop (gimple *stmt, struct symbolic_number *n, bool *bswap)\n \n   /* Find real size of result (highest non-zero byte).  */\n   if (n->base_addr)\n-    {\n-      int rsize;\n-      uint64_t tmpn;\n-\n-      for (tmpn = n->n, rsize = 0; tmpn; tmpn >>= BITS_PER_MARKER, rsize++);\n-      n->range = rsize;\n-    }\n+    for (tmpn = n->n, rsize = 0; tmpn; tmpn >>= BITS_PER_MARKER, rsize++);\n+  else\n+    rsize = n->range;\n \n-  /* Zero out the extra bits of N and CMP*.  */\n+  /* Zero out the bits corresponding to untouched bytes in original gimple\n+     expression.  */\n   if (n->range < (int) sizeof (int64_t))\n     {\n-      uint64_t mask;\n-\n       mask = ((uint64_t) 1 << (n->range * BITS_PER_MARKER)) - 1;\n       cmpxchg >>= (64 / BITS_PER_MARKER - n->range) * BITS_PER_MARKER;\n       cmpnop &= mask;\n     }\n \n+  /* Zero out the bits corresponding to unused bytes in the result of the\n+     gimple expression.  */\n+  if (rsize < n->range)\n+    {\n+      if (BYTES_BIG_ENDIAN)\n+\t{\n+\t  mask = ((uint64_t) 1 << (rsize * BITS_PER_MARKER)) - 1;\n+\t  cmpxchg &= mask;\n+\t  cmpnop >>= (n->range - rsize) * BITS_PER_MARKER;\n+\t}\n+      else\n+\t{\n+\t  mask = ((uint64_t) 1 << (rsize * BITS_PER_MARKER)) - 1;\n+\t  cmpxchg >>= (n->range - rsize) * BITS_PER_MARKER;\n+\t  cmpnop &= mask;\n+\t}\n+      n->range = rsize;\n+    }\n+\n   /* A complete byte swap should make the symbolic number to start with\n      the largest digit in the highest order byte. Unchanged symbolic\n      number indicates a read with same endianness as target architecture.  */"}]}