{"sha": "519d0798689cc68bfb27658c6f91ac3e07c04517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5ZDA3OTg2ODljYzY4YmZiMjc2NThjNmY5MWFjM2UwN2MwNDUxNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-08-18T23:50:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-08-18T23:50:34Z"}, "message": "jit: make simpler reproducers\n\nThe C reproducers generated by gcc_jit_context_dump_reproducer_to_file\ncontain numerous pointer values (from %p) to ensure uniqueness of the\nidentifiers, but this makes them less readable than they could be.\n\nThis patch updates reproducer::make_identifier so that the pointer\nis only added if it's necessary for uniqueness.\n\ngcc/jit/ChangeLog:\n\t* jit-recording.c (class gcc::jit::reproducer): Rename field\n\t\"m_identifiers\" to \"m_map_memento_to_identifier\".  Add field\n\t\"m_set_identifiers\" and struct hash_traits for it.\n\t(gcc::jit::reproducer::reproducer): Update for above.\n\t(convert_to_identifier): New function.\n\t(gcc::jit::reproducer::ensure_identifier_is_unique): New method.\n\t(gcc::jit::reproducer::make_identifier): Avoid appending the %p\n\tunless necessary for uniqueness.  Update for field renaming.\n\t(gcc::jit::reproducer::get_identifier): Update for field renaming.\n\nFrom-SVN: r251191", "tree": {"sha": "cc81ac395b2f465a9ba04bcf927d4703f1e0d7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc81ac395b2f465a9ba04bcf927d4703f1e0d7e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519d0798689cc68bfb27658c6f91ac3e07c04517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519d0798689cc68bfb27658c6f91ac3e07c04517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519d0798689cc68bfb27658c6f91ac3e07c04517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519d0798689cc68bfb27658c6f91ac3e07c04517/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1eb28d14049e19baf772e6052a3cc388e85bd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb28d14049e19baf772e6052a3cc388e85bd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1eb28d14049e19baf772e6052a3cc388e85bd51"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "824a4a556bc72551bebba2d378f394cd53b19f0d", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519d0798689cc68bfb27658c6f91ac3e07c04517/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519d0798689cc68bfb27658c6f91ac3e07c04517/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=519d0798689cc68bfb27658c6f91ac3e07c04517", "patch": "@@ -1,3 +1,15 @@\n+2017-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-recording.c (class gcc::jit::reproducer): Rename field\n+\t\"m_identifiers\" to \"m_map_memento_to_identifier\".  Add field\n+\t\"m_set_identifiers\" and struct hash_traits for it.\n+\t(gcc::jit::reproducer::reproducer): Update for above.\n+\t(convert_to_identifier): New function.\n+\t(gcc::jit::reproducer::ensure_identifier_is_unique): New method.\n+\t(gcc::jit::reproducer::make_identifier): Avoid appending the %p\n+\tunless necessary for uniqueness.  Update for field renaming.\n+\t(gcc::jit::reproducer::get_identifier): Update for field renaming.\n+\n 2017-08-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/cp/topics/types.rst (Vector types): New section."}, {"sha": "0e7f46e0ccadf07416ff23df6089830c4e367a4a", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519d0798689cc68bfb27658c6f91ac3e07c04517/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519d0798689cc68bfb27658c6f91ac3e07c04517/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=519d0798689cc68bfb27658c6f91ac3e07c04517", "patch": "@@ -236,7 +236,16 @@ class reproducer : public dump\n     GNU_PRINTF(2, 3);\n \n  private:\n-  hash_map<recording::memento *, const char *> m_identifiers;\n+  const char * ensure_identifier_is_unique (const char *candidate, void *ptr);\n+\n+ private:\n+  hash_map<recording::memento *, const char *> m_map_memento_to_identifier;\n+\n+  struct hash_traits : public string_hash\n+  {\n+    static void remove (const char *) {}\n+  };\n+  hash_set<const char *, hash_traits> m_set_identifiers;\n   allocator m_allocator;\n };\n \n@@ -245,7 +254,8 @@ class reproducer : public dump\n reproducer::reproducer (recording::context &ctxt,\n \t\t\tconst char *filename) :\n   dump (ctxt, filename, 0),\n-  m_identifiers (),\n+  m_map_memento_to_identifier (),\n+  m_set_identifiers (),\n   m_allocator ()\n {\n }\n@@ -286,28 +296,56 @@ reproducer::write_args (const vec <recording::context *> &contexts)\n     }\n }\n \n+/* Ensure that STR is a valid C identifier by overwriting\n+   any invalid chars in-place with underscores.\n+\n+   This doesn't special-case the first character.  */\n+\n+static void\n+convert_to_identifier (char *str)\n+{\n+  for (char *p = str; *p; p++)\n+    if (!ISALNUM (*p))\n+      *p = '_';\n+}\n+\n+/* Given CANDIDATE, a possible C identifier for use in a reproducer,\n+   ensure that it is unique within the generated source file by\n+   appending PTR to it if necessary.  Return the resulting string.\n+\n+   The reproducer will eventually clean up the buffer in its dtor.  */\n+\n+const char *\n+reproducer::ensure_identifier_is_unique (const char *candidate, void *ptr)\n+{\n+  if (m_set_identifiers.contains (candidate))\n+    candidate = m_allocator.xstrdup_printf (\"%s_%p\", candidate, ptr);\n+  gcc_assert (!m_set_identifiers.contains (candidate));\n+  m_set_identifiers.add (candidate);\n+  return candidate;\n+}\n+\n /* Generate a C identifier for the given memento, associating the generated\n    buffer with the memento (for future calls to get_identifier et al).\n \n    The reproducer will eventually clean up the buffer in its dtor.  */\n const char *\n reproducer::make_identifier (recording::memento *m, const char *prefix)\n {\n-  char *result;\n+  const char *result;\n   if (strlen (m->get_debug_string ()) < 100)\n     {\n-      result = m_allocator.xstrdup_printf (\"%s_%s_%p\",\n-\t\t\t\t\t   prefix,\n-\t\t\t\t\t   m->get_debug_string (),\n-\t\t\t\t\t   (void *) m);\n-      for (char *p = result; *p; p++)\n-\tif (!ISALNUM (*p))\n-\t  *p = '_';\n+      char *buf = m_allocator.xstrdup_printf (\"%s_%s\",\n+\t\t\t\t\t      prefix,\n+\t\t\t\t\t      m->get_debug_string ());\n+      convert_to_identifier (buf);\n+      result = buf;\n     }\n   else\n     result = m_allocator.xstrdup_printf (\"%s_%p\",\n \t\t\t\t\t prefix, (void *) m);\n-  m_identifiers.put (m, result);\n+  result = ensure_identifier_is_unique (result, m);\n+  m_map_memento_to_identifier.put (m, result);\n   return result;\n }\n \n@@ -350,7 +388,7 @@ reproducer::get_identifier (recording::memento *m)\n     if (!loc->created_by_user ())\n       return \"NULL\";\n \n-  const char **slot = m_identifiers.get (m);\n+  const char **slot = m_map_memento_to_identifier.get (m);\n   if (!slot)\n     {\n       get_context ().add_error (NULL,"}]}