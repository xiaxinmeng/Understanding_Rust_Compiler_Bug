{"sha": "7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "node_id": "C_kwDOANBUbNoAKDczMTMzODFkMmNlNDRiNzJiNGM5ZjcwYmQ1NjcwZTVkNzhkMWY2MzE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-18T11:57:10Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-18T11:57:10Z"}, "message": "arm: Replace arm_builtin_vectorized_function [PR106253]\n\nThis patch extends the fix for PR106253 to AArch32.  As with AArch64,\nwe were using ACLE intrinsics to vectorise scalar built-ins, even\nthough the two sometimes have different ECF_* flags.  (That in turn\nis because the ACLE intrinsics should follow the instruction semantics\nas closely as possible, whereas the scalar built-ins follow language\nspecs.)\n\nThe patch also removes the copysignf built-in, which only existed\nfor this purpose and wasn't a \u201creal\u201d arm_neon.h built-in.\n\nDoing this also has the side-effect of enabling vectorisation of\nrint and roundeven.  Logically that should be a separate patch,\nbut making it one would have meant adding a new int iterator\nfor the original set of instructions and then removing it again\nwhen including new functions.\n\nI've restricted the bswap tests to little-endian because we end\nup with excessive spilling on big-endian.  E.g.:\n\n        sub     sp, sp, #8\n        vstr    d1, [sp]\n        vldr    d16, [sp]\n        vrev16.8        d16, d16\n        vstr    d16, [sp]\n        vldr    d0, [sp]\n        add     sp, sp, #8\n        @ sp needed\n        bx      lr\n\nSimilarly, the copysign tests require little-endian because on\nbig-endian we unnecessarily load the constant from the constant pool:\n\n        vldr.32 s15, .L3\n        vdup.32 d0, d7[1]\n        vbsl    d0, d2, d1\n        bx      lr\n.L3:\n        .word   -2147483648\n\ngcc/\n\tPR target/106253\n\t* config/arm/arm-builtins.cc (arm_builtin_vectorized_function):\n\tDelete.\n\t* config/arm/arm-protos.h (arm_builtin_vectorized_function): Delete.\n\t* config/arm/arm.cc (TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION):\n\tDelete.\n\t* config/arm/arm_neon_builtins.def (copysignf): Delete.\n\t* config/arm/iterators.md (nvrint_pattern): New attribute.\n\t* config/arm/neon.md (<NEON_VRINT:nvrint_pattern><VCVTF:mode>2):\n\tNew pattern.\n\t(l<NEON_VCVT:nvrint_pattern><su_optab><VCVTF:mode><v_cmp_result>2):\n\tLikewise.\n\t(neon_copysignf<mode>): Rename to...\n\t(copysign<mode>3): ...this.\n\ngcc/testsuite/\n\tPR target/106253\n\t* gcc.target/arm/vect_unary_1.c: New test.\n\t* gcc.target/arm/vect_binary_1.c: Likewise.", "tree": {"sha": "9df6d1d1217e63a819687b13d479466f92fde366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df6d1d1217e63a819687b13d479466f92fde366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c8349ee1a35dac61b84bbae115ee6a1eeb6ddbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8349ee1a35dac61b84bbae115ee6a1eeb6ddbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8349ee1a35dac61b84bbae115ee6a1eeb6ddbd"}], "stats": {"total": 427, "additions": 297, "deletions": 130}, "files": [{"sha": "8f8155c441374cc4fa7bc70640595c972609cbd3", "filename": "gcc/config/arm/arm-builtins.cc", "status": "modified", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.cc?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -4026,129 +4026,6 @@ arm_expand_builtin (tree exp,\n   return NULL_RTX;\n }\n \n-tree\n-arm_builtin_vectorized_function (unsigned int fn, tree type_out, tree type_in)\n-{\n-  machine_mode in_mode, out_mode;\n-  int in_n, out_n;\n-  bool out_unsigned_p = TYPE_UNSIGNED (type_out);\n-\n-  /* Can't provide any vectorized builtins when we can't use NEON.  */\n-  if (!TARGET_NEON)\n-    return NULL_TREE;\n-\n-  if (TREE_CODE (type_out) != VECTOR_TYPE\n-      || TREE_CODE (type_in) != VECTOR_TYPE)\n-    return NULL_TREE;\n-\n-  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n-  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n-  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n-  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n-\n-/* ARM_CHECK_BUILTIN_MODE and ARM_FIND_VRINT_VARIANT are used to find the\n-   decl of the vectorized builtin for the appropriate vector mode.\n-   NULL_TREE is returned if no such builtin is available.  */\n-#undef ARM_CHECK_BUILTIN_MODE\n-#define ARM_CHECK_BUILTIN_MODE(C)    \\\n-  (TARGET_VFP5   \\\n-   && flag_unsafe_math_optimizations \\\n-   && ARM_CHECK_BUILTIN_MODE_1 (C))\n-\n-#undef ARM_CHECK_BUILTIN_MODE_1\n-#define ARM_CHECK_BUILTIN_MODE_1(C) \\\n-  (out_mode == SFmode && out_n == C \\\n-   && in_mode == SFmode && in_n == C)\n-\n-#undef ARM_FIND_VRINT_VARIANT\n-#define ARM_FIND_VRINT_VARIANT(N) \\\n-  (ARM_CHECK_BUILTIN_MODE (2) \\\n-    ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v2sf, false) \\\n-    : (ARM_CHECK_BUILTIN_MODE (4) \\\n-      ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v4sf, false) \\\n-      : NULL_TREE))\n-\n-  switch (fn)\n-    {\n-    CASE_CFN_FLOOR:\n-      return ARM_FIND_VRINT_VARIANT (vrintm);\n-    CASE_CFN_CEIL:\n-      return ARM_FIND_VRINT_VARIANT (vrintp);\n-    CASE_CFN_TRUNC:\n-      return ARM_FIND_VRINT_VARIANT (vrintz);\n-    CASE_CFN_ROUND:\n-      return ARM_FIND_VRINT_VARIANT (vrinta);\n-#undef ARM_CHECK_BUILTIN_MODE_1\n-#define ARM_CHECK_BUILTIN_MODE_1(C) \\\n-  (out_mode == SImode && out_n == C \\\n-   && in_mode == SFmode && in_n == C)\n-\n-#define ARM_FIND_VCVT_VARIANT(N) \\\n-  (ARM_CHECK_BUILTIN_MODE (2) \\\n-   ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v2sfv2si, false) \\\n-   : (ARM_CHECK_BUILTIN_MODE (4) \\\n-     ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v4sfv4si, false) \\\n-     : NULL_TREE))\n-\n-#define ARM_FIND_VCVTU_VARIANT(N) \\\n-  (ARM_CHECK_BUILTIN_MODE (2) \\\n-   ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##uv2sfv2si, false) \\\n-   : (ARM_CHECK_BUILTIN_MODE (4) \\\n-     ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##uv4sfv4si, false) \\\n-     : NULL_TREE))\n-    CASE_CFN_LROUND:\n-      return (out_unsigned_p\n-\t      ? ARM_FIND_VCVTU_VARIANT (vcvta)\n-\t      : ARM_FIND_VCVT_VARIANT (vcvta));\n-    CASE_CFN_LCEIL:\n-      return (out_unsigned_p\n-\t      ? ARM_FIND_VCVTU_VARIANT (vcvtp)\n-\t      : ARM_FIND_VCVT_VARIANT (vcvtp));\n-    CASE_CFN_LFLOOR:\n-      return (out_unsigned_p\n-\t      ? ARM_FIND_VCVTU_VARIANT (vcvtm)\n-\t      : ARM_FIND_VCVT_VARIANT (vcvtm));\n-#undef ARM_CHECK_BUILTIN_MODE\n-#define ARM_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == N##mode && out_n == C \\\n-   && in_mode == N##mode && in_n == C)\n-    case CFN_BUILT_IN_BSWAP16:\n-      if (ARM_CHECK_BUILTIN_MODE (4, HI))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4hi, false);\n-      else if (ARM_CHECK_BUILTIN_MODE (8, HI))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv8hi, false);\n-      else\n-\treturn NULL_TREE;\n-    case CFN_BUILT_IN_BSWAP32:\n-      if (ARM_CHECK_BUILTIN_MODE (2, SI))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2si, false);\n-      else if (ARM_CHECK_BUILTIN_MODE (4, SI))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4si, false);\n-      else\n-\treturn NULL_TREE;\n-    case CFN_BUILT_IN_BSWAP64:\n-      if (ARM_CHECK_BUILTIN_MODE (2, DI))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2di, false);\n-      else\n-\treturn NULL_TREE;\n-    CASE_CFN_COPYSIGN:\n-      if (ARM_CHECK_BUILTIN_MODE (2, SF))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv2sf, false);\n-      else if (ARM_CHECK_BUILTIN_MODE (4, SF))\n-\treturn arm_builtin_decl (ARM_BUILTIN_NEON_copysignfv4sf, false);\n-      else\n-\treturn NULL_TREE;\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-  return NULL_TREE;\n-}\n-#undef ARM_FIND_VCVT_VARIANT\n-#undef ARM_FIND_VCVTU_VARIANT\n-#undef ARM_CHECK_BUILTIN_MODE\n-#undef ARM_FIND_VRINT_VARIANT\n-\n void\n arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n {"}, {"sha": "f8aabbdae378448ec8d4c0019110fb124d244a42", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -103,7 +103,6 @@ extern void neon_pairwise_reduce (rtx, rtx, machine_mode,\n \t\t\t\t  rtx (*) (rtx, rtx, rtx));\n extern rtx mve_bool_vec_to_const (rtx const_vec);\n extern rtx neon_make_constant (rtx, bool generate = true);\n-extern tree arm_builtin_vectorized_function (unsigned int, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);\n extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);\n extern void arm_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);"}, {"sha": "eca99c904ba85b44b270fb3b279a1d6676066b83", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -739,10 +739,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_VECTORIZE_BUILTINS\n #define TARGET_VECTORIZE_BUILTINS\n \n-#undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n-#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n-  arm_builtin_vectorized_function\n-\n #undef TARGET_VECTOR_ALIGNMENT\n #define TARGET_VECTOR_ALIGNMENT arm_vector_alignment\n "}, {"sha": "2e642cc4364d8c0460bf1acd4a816a51dab68fb3", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -264,7 +264,6 @@ VAR1 (UNOP, vcvtv4hf, v4sf)\n VAR10 (TERNOP, vbsl,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n VAR2 (TERNOP, vbsl, v8hf, v4hf)\n-VAR2 (UNOP, copysignf, v2sf, v4sf)\n VAR2 (UNOP, vrintn, v2sf, v4sf)\n VAR2 (UNOP, vrinta, v2sf, v4sf)\n VAR2 (UNOP, vrintp, v2sf, v4sf)"}, {"sha": "29062cd6fb3c61c22417ef8fc25abd7819d2c034", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -1150,6 +1150,13 @@\n                               (UNSPEC_VRINTA \"unconditional\") (UNSPEC_VRINTM \"unconditional\")\n                               (UNSPEC_VRINTR \"nocond\") (UNSPEC_VRINTX \"nocond\")])\n \n+(define_int_attr nvrint_pattern [(UNSPEC_NVRINTZ \"btrunc\")\n+\t\t\t\t (UNSPEC_NVRINTP \"ceil\")\n+\t\t\t\t (UNSPEC_NVRINTA \"round\")\n+\t\t\t\t (UNSPEC_NVRINTM \"floor\")\n+\t\t\t\t (UNSPEC_NVRINTX \"rint\")\n+\t\t\t\t (UNSPEC_NVRINTN \"roundeven\")])\n+\n (define_int_attr nvrint_variant [(UNSPEC_NVRINTZ \"z\") (UNSPEC_NVRINTP \"p\")\n                                 (UNSPEC_NVRINTA \"a\") (UNSPEC_NVRINTM \"m\")\n                                 (UNSPEC_NVRINTX \"x\") (UNSPEC_NVRINTN \"n\")])"}, {"sha": "e1dae28d8d1234a31468817635ecdf76ba255a81", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -635,6 +635,13 @@\n  [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n )\n \n+(define_expand \"<NEON_VRINT:nvrint_pattern><VCVTF:mode>2\"\n+  [(set (match_operand:VCVTF 0 \"s_register_operand\")\n+        (unspec:VCVTF [(match_operand:VCVTF 1 \"s_register_operand\")]\n+\t\t      NEON_VRINT))]\n+  \"TARGET_NEON && TARGET_VFP5 && flag_unsafe_math_optimizations\"\n+)\n+\n (define_insn \"neon_vrint<NEON_VRINT:nvrint_variant><VCVTF:mode>\"\n   [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n         (unspec:VCVTF [(match_operand:VCVTF 1\n@@ -645,6 +652,14 @@\n   [(set_attr \"type\" \"neon_fp_round_<V_elem_ch><q>\")]\n )\n \n+(define_expand \"l<NEON_VCVT:nvrint_pattern><su_optab><VCVTF:mode><v_cmp_result>2\"\n+  [(set (match_operand:<V_cmp_result> 0 \"register_operand\")\n+\t(FIXUORS:<V_cmp_result>\n+\t  (unspec:VCVTF [(match_operand:VCVTF 1 \"register_operand\")]\n+\t\t\tNEON_VCVT)))]\n+  \"TARGET_NEON && TARGET_VFP5 && flag_unsafe_math_optimizations\"\n+)\n+\n (define_insn \"neon_vcvt<NEON_VCVT:nvrint_variant><su_optab><VCVTF:mode><v_cmp_result>\"\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w\")\n \t(FIXUORS:<V_cmp_result> (unspec:VCVTF\n@@ -3059,7 +3074,7 @@\n   \"TARGET_I8MM\"\n )\n \n-(define_expand \"neon_copysignf<mode>\"\n+(define_expand \"copysign<mode>3\"\n   [(match_operand:VCVTF 0 \"register_operand\")\n    (match_operand:VCVTF 1 \"register_operand\")\n    (match_operand:VCVTF 2 \"register_operand\")]"}, {"sha": "c1fc9052d84939a27e43dcdb777a3702b5a58172", "filename": "gcc/testsuite/gcc.target/arm/vect_binary_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect_binary_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect_binary_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect_binary_1.c?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_hard_ok } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-add-options arm_v8_neon }  */\n+/* { dg-additional-options \"-O3 -mfloat-abi=hard\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <stdint.h>\n+\n+#define TEST2(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(sizeof(OUT) * 2)))\t\t\t\\\n+test2_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(IN) * 2))) y, \\\n+\t\t\t     IN __attribute__((vector_size(sizeof(IN) * 2))) z) \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(sizeof(OUT) * 2))) x;\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0], z[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1], z[1]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST4(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(sizeof(OUT) * 4)))\t\t\t\\\n+test4_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(OUT) * 4))) y,\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(OUT) * 4))) z)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(sizeof(OUT) * 4))) x;\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0], z[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1], z[1]);\t\t\t\t\t\\\n+  x[2] = __builtin_##NAME (y[2], z[2]);\t\t\t\t\t\\\n+  x[3] = __builtin_##NAME (y[3], z[3]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\n+\n+/*\n+** test2_float_copysignf_float: { target arm_little_endian }\n+**\tvmov.i32\td0, #(0x80000000|2147483648)(\\s+.*)\n+**\tvbsl\td0, d2, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, copysignf, float)\n+\n+/*\n+** test4_float_copysignf_float: { target arm_little_endian }\n+**\tvmov.i32\tq0, #(0x80000000|2147483648)(\\s+.*)\n+**\tvbsl\tq0, q2, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, copysignf, float)"}, {"sha": "46771801ed3ce022fc638bcd58e2aa6c24811421", "filename": "gcc/testsuite/gcc.target/arm/vect_unary_1.c", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect_unary_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313381d2ce44b72b4c9f70bd5670e5d78d1f631/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect_unary_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect_unary_1.c?ref=7313381d2ce44b72b4c9f70bd5670e5d78d1f631", "patch": "@@ -0,0 +1,224 @@\n+/* { dg-do compile { target { arm*-*-* } } } */\n+/* { dg-require-effective-target arm_hard_ok } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-add-options arm_v8_neon }  */\n+/* { dg-additional-options \"-Ofast -mfloat-abi=hard\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <stdint.h>\n+\n+#define TEST2(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(sizeof(OUT) * 2)))\t\t\t\\\n+test2_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(IN) * 2))) y) \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(sizeof(OUT) * 2))) x;\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST4(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(sizeof(OUT) * 4)))\t\t\t\\\n+test4_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(OUT) * 4))) y)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(sizeof(OUT) * 4))) x;\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1]);\t\t\t\t\t\\\n+  x[2] = __builtin_##NAME (y[2]);\t\t\t\t\t\\\n+  x[3] = __builtin_##NAME (y[3]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST8(OUT, NAME, IN)\t\t\t\t\t\t\\\n+OUT __attribute__((vector_size(sizeof(OUT) * 8)))\t\t\t\\\n+test8_##OUT##_##NAME##_##IN (float dummy,\t\t\t\t\\\n+\t\t\t     IN __attribute__((vector_size(sizeof(OUT) * 8))) y)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  OUT __attribute__((vector_size(sizeof(OUT) * 8))) x;\t\t\t\\\n+  x[0] = __builtin_##NAME (y[0]);\t\t\t\t\t\\\n+  x[1] = __builtin_##NAME (y[1]);\t\t\t\t\t\\\n+  x[2] = __builtin_##NAME (y[2]);\t\t\t\t\t\\\n+  x[3] = __builtin_##NAME (y[3]);\t\t\t\t\t\\\n+  x[4] = __builtin_##NAME (y[4]);\t\t\t\t\t\\\n+  x[5] = __builtin_##NAME (y[5]);\t\t\t\t\t\\\n+  x[6] = __builtin_##NAME (y[6]);\t\t\t\t\t\\\n+  x[7] = __builtin_##NAME (y[7]);\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\t\t\t\\\n+}\n+\n+/*\n+** test2_float_truncf_float:\n+**\tvrintz.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, truncf, float)\n+\n+/*\n+** test4_float_truncf_float:\n+**\tvrintz.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, truncf, float)\n+\n+/*\n+** test2_float_roundf_float:\n+**\tvrinta.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, roundf, float)\n+\n+/*\n+** test4_float_roundf_float:\n+**\tvrinta.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, roundf, float)\n+\n+/*\n+** test2_float_floorf_float:\n+**\tvrintm.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, floorf, float)\n+\n+/*\n+** test4_float_floorf_float:\n+**\tvrintm.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, floorf, float)\n+\n+/*\n+** test2_float_ceilf_float:\n+**\tvrintp.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, ceilf, float)\n+\n+/*\n+** test4_float_ceilf_float:\n+**\tvrintp.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, ceilf, float)\n+\n+/*\n+** test2_float_rintf_float:\n+**\tvrintx.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, rintf, float)\n+\n+/*\n+** test4_float_rintf_float:\n+**\tvrintx.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, rintf, float)\n+\n+/*\n+** test2_float_roundevenf_float:\n+**\tvrintn.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (float, roundevenf, float)\n+\n+/*\n+** test4_float_roundevenf_float:\n+**\tvrintn.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (float, roundevenf, float)\n+\n+/*\n+** test2_int_roundf_float:\n+**\tvcvta.s32.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (int, roundf, float)\n+\n+/*\n+** test4_int_roundf_float:\n+**\tvcvta.s32.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (int, roundf, float)\n+\n+/*\n+** test2_int_floorf_float:\n+**\tvcvtm.s32.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (int, floorf, float)\n+\n+/*\n+** test4_int_floorf_float:\n+**\tvcvtm.s32.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (int, floorf, float)\n+\n+/*\n+** test2_int_ceilf_float:\n+**\tvcvtp.s32.f32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (int, ceilf, float)\n+\n+/*\n+** test4_int_ceilf_float:\n+**\tvcvtp.s32.f32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (int, ceilf, float)\n+\n+/*\n+** test2_int_clz_int:\n+**\tvclz.i32\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (int, clz, int)\n+\n+/*\n+** test4_int_clz_int:\n+**\tvclz.i32\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (int, clz, int)\n+\n+/*\n+** test4_int16_t_bswap16_int16_t: { target arm_little_endian }\n+**\tvrev16.8\td0, d1\n+**\tbx\tlr\n+*/\n+TEST4 (int16_t, bswap16, int16_t)\n+\n+/*\n+** test8_int16_t_bswap16_int16_t: { target arm_little_endian }\n+**\tvrev16.8\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST8 (int16_t, bswap16, int16_t)\n+\n+/*\n+** test2_int_bswap32_int: { target arm_little_endian }\n+**\tvrev32.8\td0, d1\n+**\tbx\tlr\n+*/\n+TEST2 (int, bswap32, int)\n+\n+/*\n+** test4_int_bswap32_int: { target arm_little_endian }\n+**\tvrev32.8\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST4 (int, bswap32, int)\n+\n+/*\n+** test2_int64_t_bswap64_int64_t: { target arm_little_endian }\n+**\tvrev64.8\tq0, q1\n+**\tbx\tlr\n+*/\n+TEST2 (int64_t, bswap64, int64_t)"}]}