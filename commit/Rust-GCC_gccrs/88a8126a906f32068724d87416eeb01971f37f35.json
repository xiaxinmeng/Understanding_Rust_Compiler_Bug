{"sha": "88a8126a906f32068724d87416eeb01971f37f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhODEyNmE5MDZmMzIwNjg3MjRkODc0MTZlZWIwMTk3MWYzN2YzNQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-05-22T11:56:01Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2019-05-22T11:56:01Z"}, "message": "fortran/89100: Default widths with -fdec-format-defaults\n\ngcc/fortran ChangeLog:\n\n2019-05-22  Jeff Law  <law@redhat.com>\n            Mark Eggleston  <mark.eggleston@codethink.com>\n\n        PR fortran/89100\n        * gfortran.texi: Add Default widths for F, G and I format\n        descriptors to Extensions section.\n        * invoke.texi: Add -fdec-format-defaults\n        * io.c (check_format): Use default widths for i, f and g when\n        flag_dec_format_defaults is enabled.\n        * lang.opt: Add new option.\n        * options.c (set_dec_flags): Add SET_BITFLAG for\n        flag_dec_format_defaults.\n\n\ngcc/testsuite ChangeLog:\n\n2019-05-22  Mark Eggleston  <mark.eggleston@codethink.com>\n\n        PR fortran/89100\n        * gfortran.dg/fmt_f_default_field_width_1.f90: New test.\n        * gfortran.dg/fmt_f_default_field_width_2.f90: New test.\n        * gfortran.dg/fmt_f_default_field_width_3.f90: New test.\n        * gfortran.dg/fmt_g_default_field_width_1.f90: New test.\n        * gfortran.dg/fmt_g_default_field_width_2.f90: New test.\n        * gfortran.dg/fmt_g_default_field_width_3.f90: New test.\n        * gfortran.dg/fmt_i_default_field_width_1.f90: New test.\n        * gfortran.dg/fmt_i_default_field_width_2.f90: New test.\n        * gfortran.dg/fmt_i_default_field_width_3.f90: New test.\n\n\nlibgfortran ChangeLog:\n\n2019-05-22  Jeff Law  <law@redhat.com>\n\n        PR fortran/89100\n        * io/format.c (parse_format_list): set default width when the\n        IOPARM_DT_DEC_EXT flag is set for i, f and g.\n        * io/io.h: add default_width_for_integer, default_width_for_float\n        and default_precision_for_float.\n        * io/write.c (write_boz): extra parameter giving length of data\n        corresponding to the type's kind.\n        (write_b): pass data length as extra parameter in calls to\n        write_boz.\n        (write_o): pass data length as extra parameter in calls to\n        write_boz.\n        (write_z): pass data length as extra parameter in calls to\n        write_boz.\n        (size_from_kind): also set size is default width is set.\n        * io/write_float.def (build_float_string): new paramter inserted\n        before result parameter. If default width use values passed\n        instead of the values in fnode.\n        (FORMAT_FLOAT): macro modified to check for default width and\n        calls to build_float_string to pass in default width.\n        (get_float_string): set width and precision to defaults when\n        needed.\n\nFrom-SVN: r271511", "tree": {"sha": "ab7979c83f78bf0bfec681cc5ace497f74f98998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7979c83f78bf0bfec681cc5ace497f74f98998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a8126a906f32068724d87416eeb01971f37f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a8126a906f32068724d87416eeb01971f37f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a8126a906f32068724d87416eeb01971f37f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a8126a906f32068724d87416eeb01971f37f35/comments", "author": null, "committer": null, "parents": [{"sha": "fa70c22141f5075ad4a9a3a6630f083c92755799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa70c22141f5075ad4a9a3a6630f083c92755799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa70c22141f5075ad4a9a3a6630f083c92755799"}], "stats": {"total": 638, "additions": 610, "deletions": 28}, "files": [{"sha": "f119e748bf84bd3e341da8d079364279fd76480f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -1,3 +1,16 @@\n+2019-05-22  Jeff Law  <law@redhat.com>\n+\t    Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/89100\n+\t* gfortran.texi: Add Default widths for F, G and I format\n+\tdescriptors to Extensions section.\n+\t* invoke.texi: Add -fdec-format-defaults\n+\t* io.c (check_format): Use default widths for i, f and g when\n+\tflag_dec_format_defaults is enabled.\n+\t* lang.opt: Add new option.\n+\t* options.c (set_dec_flags): Add SET_BITFLAG for\n+\tflag_dec_format_defaults.\n+\n 2019-05-21  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/90038"}, {"sha": "57461e0e42fa41e2c722b7008c5b6660d236ba54", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -1576,6 +1576,7 @@ additional compatibility extensions along with those enabled by\n * X format descriptor without count field::\n * Commas in FORMAT specifications::\n * Missing period in FORMAT specifications::\n+* Default widths for F@comma{} G and I format descriptors::\n * I/O item lists::\n * @code{Q} exponent-letter::\n * BOZ literal constants::\n@@ -1782,6 +1783,22 @@ discouraged.\n 10     FORMAT ('F4')\n @end smallexample\n \n+@node Default widths for F@comma{} G and I format descriptors\n+@subsection Default widths for @code{F}, @code{G} and @code{I} format descriptors\n+\n+To support legacy codes, GNU Fortran allows width to be omitted from format\n+specifications if and only if @option{-fdec-format-defaults} is given on the\n+command line.  Default widths will be used. This is considered non-conforming\n+code and is discouraged.\n+\n+@smallexample\n+       REAL :: value1\n+       INTEGER :: value2\n+       WRITE(*,10) value1, value1, value2\n+10     FORMAT ('F, G, I')\n+@end smallexample\n+\n+\n @node I/O item lists\n @subsection I/O item lists\n @cindex I/O item lists"}, {"sha": "73b836ed7d05b3704045cc62ac3c2df1c367bb3a", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -117,16 +117,16 @@ by type.  Explanations are in the following sections.\n @item Fortran Language Options\n @xref{Fortran Dialect Options,,Options controlling Fortran dialect}.\n @gccoptlist{-fall-intrinsics -fbackslash -fcray-pointer -fd-lines-as-code @gol\n--fd-lines-as-comments @gol\n--fdec -fdec-structure -fdec-intrinsic-ints -fdec-static -fdec-math @gol\n--fdec-include -fdefault-double-8 -fdefault-integer-8 -fdefault-real-8 @gol\n--fdefault-real-10 -fdefault-real-16 -fdollar-ok -ffixed-line-length-@var{n} @gol\n--ffixed-line-length-none -fpad-source -ffree-form -ffree-line-length-@var{n} @gol\n--ffree-line-length-none -fimplicit-none -finteger-4-integer-8 @gol\n--fmax-identifier-length -fmodule-private -ffixed-form -fno-range-check @gol\n--fopenacc -fopenmp -freal-4-real-10 -freal-4-real-16 -freal-4-real-8 @gol\n--freal-8-real-10 -freal-8-real-16 -freal-8-real-4 -std=@var{std}\n--ftest-forall-temp\n+-fd-lines-as-comments -fdec -fdec-structure -fdec-intrinsic-ints @gol\n+-fdec-static -fdec-math -fdec-include -fdec-format-defaults @gol\n+-fdefault-double-8 -fdefault-integer-8 -fdefault-real-8 -fdefault-real-10 @gol\n+-fdefault-real-16 -fdollar-ok -ffixed-line-length-@var{n} @gol\n+-ffixed-line-length-none -fpad-source -ffree-form @gol\n+-ffree-line-length-@var{n} -ffree-line-length-none @gol\n+-fimplicit-none -finteger-4-integer-8 -fmax-identifier-length @gol\n+-fmodule-private -ffixed-form -fno-range-check -fopenacc -fopenmp @gol\n+-freal-4-real-10 -freal-4-real-16 -freal-4-real-8 -freal-8-real-10 @gol\n+-freal-8-real-16 -freal-8-real-4 -std=@var{std} -ftest-forall-temp\n }\n \n @item Preprocessing Options\n@@ -283,6 +283,11 @@ Enable parsing of INCLUDE as a statement in addition to parsing it as\n INCLUDE line.  When parsed as INCLUDE statement, INCLUDE does not have to\n be on a single line and can use line continuations.\n \n+@item -fdec-format-defaults\n+@opindex @code{fdec-format-defaults}\n+Enable format specifiers F, G and I to be used without width specifiers,\n+default widths will be used instead.\n+\n @item -fdollar-ok\n @opindex @code{fdollar-ok}\n @cindex @code{$}"}, {"sha": "5711757962779410bb8463f8914a0f2cad5ffb74", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -903,6 +903,13 @@ check_format (bool is_input)\n \n       if (u != FMT_POSINT)\n \t{\n+\t  if (flag_dec_format_defaults)\n+\t    {\n+\t      /* Assume a default width based on the variable size.  */\n+\t      saved_token = u;\n+\t      break;\n+\t    }\n+\n \t  format_locus.nextc += format_string_pos;\n \t  gfc_error (\"Positive width required in format \"\n \t\t\t \"specifier %s at %L\", token_to_string (t),\n@@ -1027,6 +1034,13 @@ check_format (bool is_input)\n \tgoto fail;\n       if (t != FMT_ZERO && t != FMT_POSINT)\n \t{\n+\t  if (flag_dec_format_defaults)\n+\t    {\n+\t      /* Assume the default width is expected here and continue lexing.  */\n+\t      value = 0; /* It doesn't matter what we set the value to here.  */\n+\t      saved_token = t;\n+\t      break;\n+\t    }\n \t  error = nonneg_required;\n \t  goto syntax;\n \t}\n@@ -1096,8 +1110,17 @@ check_format (bool is_input)\n \tgoto fail;\n       if (t != FMT_ZERO && t != FMT_POSINT)\n \t{\n-\t  error = nonneg_required;\n-\t  goto syntax;\n+\t  if (flag_dec_format_defaults)\n+\t    {\n+\t      /* Assume the default width is expected here and continue lexing.  */\n+\t      value = 0; /* It doesn't matter what we set the value to here.  */\n+\t      saved_token = t;\n+\t    }\n+\t  else\n+\t    {\n+\t      error = nonneg_required;\n+\t      goto syntax;\n+\t    }\n \t}\n       else if (is_input && t == FMT_ZERO)\n \t{\n@@ -4368,8 +4391,8 @@ match_io (io_kind k)\n     }\n \n   /* See if we want to use defaults for missing exponents in real transfers\n-     and other DEC runtime extensions.  */\n-  if (flag_dec)\n+     and other DEC runtime extensions. */\n+  if (flag_dec_format_defaults)\n     dt->dec_ext = 1;\n \n   /* A full IO statement has been matched.  Check the constraints.  spec_end is"}, {"sha": "4d2340a73fabab5ba7d9fe1455453b5d0675a459", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -452,6 +452,10 @@ fdec-include\n Fortran Var(flag_dec_include)\n Enable legacy parsing of INCLUDE as statement.\n \n+fdec-format-defaults\n+Fortran Var(flag_dec_format_defaults)\n+Enable default widths for i, f and g format specifiers.\n+\n fdec-intrinsic-ints\n Fortran Var(flag_dec_intrinsic_ints)\n Enable kind-specific variants of integer intrinsic functions."}, {"sha": "4f91486e977f2e3707bd8f3a969397db703b1b25", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -74,6 +74,7 @@ set_dec_flags (int value)\n   SET_BITFLAG (flag_dec_static, value, value);\n   SET_BITFLAG (flag_dec_math, value, value);\n   SET_BITFLAG (flag_dec_include, value, value);\n+  SET_BITFLAG (flag_dec_format_defaults, value, value);\n }\n \n /* Finalize DEC flags.  */"}, {"sha": "07a473dd9568b17748aa68820a9691321e782c03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -1,3 +1,16 @@\n+2019-05-22  Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/89100\n+\t* gfortran.dg/fmt_f_default_field_width_1.f90: New test.\n+\t* gfortran.dg/fmt_f_default_field_width_2.f90: New test.\n+\t* gfortran.dg/fmt_f_default_field_width_3.f90: New test.\n+\t* gfortran.dg/fmt_g_default_field_width_1.f90: New test.\n+\t* gfortran.dg/fmt_g_default_field_width_2.f90: New test.\n+\t* gfortran.dg/fmt_g_default_field_width_3.f90: New test.\n+\t* gfortran.dg/fmt_i_default_field_width_1.f90: New test.\n+\t* gfortran.dg/fmt_i_default_field_width_2.f90: New test.\n+\t* gfortran.dg/fmt_i_default_field_width_3.f90: New test.\n+\n 2019-05-22  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/90564"}, {"sha": "5c0834211ffb83ba4dfa848661129e0aaffa62fc", "filename": "gcc/testsuite/gfortran.dg/fmt_f_default_field_width_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_1.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! { dg-options -fdec }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+!\n+\n+program test\n+    character(50) :: buffer\n+\n+    real(4) :: real_4\n+    real(8) :: real_8\n+    real(16) :: real_16\n+    integer :: len\n+    character(*), parameter :: fmt = \"(A, F, A)\"\n+\n+    real_4 = 4.18\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":      4.1799998:\") stop 1\n+\n+    real_4 = 0.00000018\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":      0.0000002:\") stop 2\n+\n+    real_8 = 4.18\n+    write(buffer, fmt) ':',real_8,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 27) stop 3\n+\n+    real_16 = 4.18\n+    write(buffer, fmt) ':',real_16,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 44) stop 4\n+end"}, {"sha": "fd5b1d25a568a00f2485945c0305804611c8e462", "filename": "gcc/testsuite/gfortran.dg/fmt_f_default_field_width_2.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_2.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! { dg-options -fdec-format-defaults }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+!\n+! Test case added by Mark Eggleston <mark.eggleston@codethink.com> to check\n+! use of -fdec-format-defaults\n+!\n+\n+program test\n+    character(50) :: buffer\n+\n+    real(4) :: real_4\n+    real(8) :: real_8\n+    real(16) :: real_16\n+    integer :: len\n+    character(*), parameter :: fmt = \"(A, F, A)\"\n+\n+    real_4 = 4.18\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":      4.1799998:\") stop 1\n+\n+    real_4 = 0.00000018\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":      0.0000002:\") stop 2\n+\n+    real_8 = 4.18\n+    write(buffer, fmt) ':',real_8,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 27) stop 3\n+\n+    real_16 = 4.18\n+    write(buffer, fmt) ':',real_16,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 44) stop 4\n+end"}, {"sha": "6852f8e9aa29d46d5595b8033e6be0cf53c20880", "filename": "gcc/testsuite/gfortran.dg/fmt_f_default_field_width_3.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_f_default_field_width_3.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec -fno-dec-format-defaults\" }\n+!\n+! Test case for the default field widths not enabled.\n+!\n+! Test case added by Mark Eggleston <mark.eggleston@codethink.com> to check\n+! use of -fno-dec-format-defaults\n+!\n+\n+program test\n+    character(50) :: buffer\n+\n+    real*4 :: real_4\n+    real*8 :: real_8\n+    real*16 :: real_16\n+    integer :: len\n+    character(*), parameter :: fmt = \"(A, F, A)\"\n+\n+    real_4 = 4.18\n+    write(buffer, fmt) ':',real_4,':' ! { dg-error \"Nonnegative width required\" }\n+\n+    real_4 = 0.00000018\n+    write(buffer, fmt) ':',real_4,':' ! { dg-error \"Nonnegative width required\" }\n+\n+    real_8 = 4.18\n+    write(buffer, fmt) ':',real_8,':' ! { dg-error \"Nonnegative width required\" }\n+\n+    real_16 = 4.18\n+    write(buffer, fmt) ':',real_16,':' ! { dg-error \"Nonnegative width required\" }\n+end"}, {"sha": "028cd113929f41008231e993ae560274b2d34bfd", "filename": "gcc/testsuite/gfortran.dg/fmt_g_default_field_width_1.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_1.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-options -fdec }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+!\n+\n+program test\n+    character(50) :: buffer\n+\n+    real(4) :: real_4\n+    real(8) :: real_8\n+    real(16) :: real_16\n+    integer :: len\n+    character(*), parameter :: fmt = \"(A, G, A)\"\n+\n+    real_4 = 4.18\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":   4.180000    :\") stop 1\n+\n+    real_4 = 0.00000018\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":  0.1800000E-06:\") stop 2\n+\n+    real_4 = 18000000.4\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":  0.1800000E+08:\") stop 3\n+\n+    real_8 = 4.18\n+    write(buffer, fmt) ':',real_8,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 27) stop 4\n+\n+    real_16 = 4.18\n+    write(buffer, fmt) ':',real_16,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 44) stop 5\n+end"}, {"sha": "45c98c7c300663e77e2adcb4eecd2eca905f3525", "filename": "gcc/testsuite/gfortran.dg/fmt_g_default_field_width_2.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_2.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+! { dg-options -fdec-format-defaults }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+!\n+! Test case added by Mark Eggleston <mark.eggleston@codethink.com> to check\n+! use of -fdec-format-defaults\n+!\n+\n+program test\n+    character(50) :: buffer\n+\n+    real(4) :: real_4\n+    real(8) :: real_8\n+    real(16) :: real_16\n+    integer :: len\n+    character(*), parameter :: fmt = \"(A, G, A)\"\n+\n+    real_4 = 4.18\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":   4.180000    :\") stop 1\n+\n+    real_4 = 0.00000018\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":  0.1800000E-06:\") stop 2\n+\n+    real_4 = 18000000.4\n+    write(buffer, fmt) ':',real_4,':'\n+    print *,buffer\n+    if (buffer.ne.\":  0.1800000E+08:\") stop 3\n+\n+    real_8 = 4.18\n+    write(buffer, fmt) ':',real_8,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 27) stop 4\n+\n+    real_16 = 4.18\n+    write(buffer, fmt) ':',real_16,':'\n+    print *,buffer\n+    len = len_trim(buffer)\n+    if (len /= 44) stop 5\n+end"}, {"sha": "3db4fddd162329af9be0d3e4d5f7b3f5cfff8c77", "filename": "gcc/testsuite/gfortran.dg/fmt_g_default_field_width_3.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g_default_field_width_3.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec -fno-dec-format-defaults\" }\n+!\n+! Test case for the default field widths not enabled.\n+!\n+! Test case added by Mark Eggleston <mark.eggleston@codethink.com> to check\n+! use of -fno-dec-format-defaults\n+!\n+\n+program test\n+    character(50) :: buffer\n+\n+    real(4) :: real_4\n+    real(8) :: real_8\n+    real(16) :: real_16\n+    integer :: len\n+    character(*), parameter :: fmt = \"(A, G, A)\"\n+\n+    real_4 = 4.18\n+    write(buffer, fmt) ':',real_4,':' ! { dg-error \"Positive width required\" }\n+\n+    real_4 = 0.00000018\n+    write(buffer, fmt) ':',real_4,':' ! { dg-error \"Positive width required\" }\n+\n+    real_4 = 18000000.4\n+    write(buffer, fmt) ':',real_4,':' ! { dg-error \"Positive width required\" }\n+\n+    real_8 = 4.18\n+    write(buffer, fmt) ':',real_8,':' ! { dg-error \"Positive width required\" }\n+\n+    real_16 = 4.18\n+    write(buffer, fmt) ':',real_16,':' ! { dg-error \"Positive width required\" }\n+end"}, {"sha": "bb539adf2626c85bc4319a9d8b175f18ff6d4ebf", "filename": "gcc/testsuite/gfortran.dg/fmt_i_default_field_width_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_1.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! { dg-options -fdec }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+\n+program test\n+    character(50) :: buffer\n+    character(1) :: colon\n+\n+    integer(2) :: integer_2\n+    integer(4) :: integer_4\n+    integer(8) :: integer_8\n+    character(*), parameter :: fmt = \"(A, I, A)\"\n+\n+    write(buffer, fmt) ':',12340,':'\n+    print *,buffer\n+    if (buffer.ne.\":       12340:\") stop 1\n+\n+    read(buffer, \"(1A, I, 1A)\") colon, integer_4, colon\n+    if ((integer_4.ne.12340).or.(colon.ne.\":\")) stop 2\n+\n+    integer_2 = -99\n+    write(buffer, fmt) ':',integer_2,':'\n+    print *,buffer\n+    if (buffer.ne.\":    -99:\") stop 3\n+\n+    integer_8 = -11112222\n+    write(buffer, fmt) ':',integer_8,':'\n+    print *,buffer\n+    if (buffer.ne.\":              -11112222:\") stop 4\n+\n+! If the width is 7 and there are 7 leading zeroes, the result should be zero.\n+    integer_2 = 789\n+    buffer = '0000000789'\n+    read(buffer, '(I)') integer_2\n+    if (integer_2.ne.0) stop 5\n+end"}, {"sha": "1583c23e3e2b1569539fd52b492fc433152e8cab", "filename": "gcc/testsuite/gfortran.dg/fmt_i_default_field_width_2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_2.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-options -fdec-format-defaults }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+!\n+! Test case added by Mark Eggleston <mark.eggleston@codethink.com> to check\n+! use of -fdec-format-defaults\n+!\n+\n+program test\n+    character(50) :: buffer\n+    character(1) :: colon\n+\n+    integer(2) :: integer_2\n+    integer(4) :: integer_4\n+    integer(8) :: integer_8\n+    character(*), parameter :: fmt = \"(A, I, A)\"\n+\n+    write(buffer, fmt) ':',12340,':'\n+    print *,buffer\n+    if (buffer.ne.\":       12340:\") stop 1\n+\n+    read(buffer, '(A1, I, A1)') colon, integer_4, colon\n+    if ((integer_4.ne.12340).or.(colon.ne.\":\")) stop 2\n+\n+    integer_2 = -99\n+    write(buffer, fmt) ':',integer_2,':'\n+    print *,buffer\n+    if (buffer.ne.\":    -99:\") stop 3\n+\n+    integer_8 = -11112222\n+    write(buffer, fmt) ':',integer_8,':'\n+    print *,buffer\n+    if (buffer.ne.\":              -11112222:\") stop 4\n+\n+! If the width is 7 and there are 7 leading zeroes, the result should be zero.\n+    integer_2 = 789\n+    buffer = '0000000789'\n+    read(buffer, '(I)') integer_2\n+    if (integer_2.ne.0) stop 5\n+end"}, {"sha": "325190d0dadf93634429729e2f571ffe1ca9dba9", "filename": "gcc/testsuite/gfortran.dg/fmt_i_default_field_width_3.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_i_default_field_width_3.f90?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec -fno-dec-format-defaults\" }\n+!\n+! Test case for the default field widths enabled by the -fdec-format-defaults flag.\n+!\n+! This feature is not part of any Fortran standard, but it is supported by the\n+! Oracle Fortran compiler and others.\n+!\n+! Test case added by Mark Eggleston <mark.eggleston@codethink.com> to check\n+! use of -fdec-format-defaults\n+!\n+\n+program test\n+    character(50) :: buffer\n+    character(1) :: colon\n+\n+    integer(2) :: integer_2\n+    integer(4) :: integer_4\n+    integer(8) :: integer_8\n+    character(*), parameter :: fmt = \"(A, I, A)\"\n+\n+    write(buffer, fmt) ':',12340,':' ! { dg-error \"Nonnegative width required\" }\n+\n+    read(buffer, '(A1, I, A1)') colon, integer_4, colon ! { dg-error \"Nonnegative width required\" }\n+    if (integer_4.ne.12340) stop 2\n+\n+    integer_2 = -99\n+    write(buffer, fmt) ':',integer_2,':' ! { dg-error \"Nonnegative width required\" }\n+\n+    integer_8 = -11112222\n+    write(buffer, fmt) ':',integer_8,':' ! { dg-error \"Nonnegative width required\" }\n+\n+! If the width is 7 and there are 7 leading zeroes, the result should be zero.\n+    integer_2 = 789\n+    buffer = '0000000789'\n+    read(buffer, '(I)') integer_2 ! { dg-error \"Nonnegative width required\" }\n+end"}, {"sha": "19c297efa32c7fc9231882ba022a95159706981a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -1,3 +1,27 @@\n+2019-05-22  Jeff Law  <law@redhat.com>\n+\n+\tPR fortran/89100\n+\t* io/format.c (parse_format_list): set default width when the\n+\tIOPARM_DT_DEC_EXT flag is set for i, f and g.\n+\t* io/io.h: add default_width_for_integer, default_width_for_float\n+\tand default_precision_for_float.\n+\t* io/write.c (write_boz): extra parameter giving length of data\n+\tcorresponding to the type's kind.\n+\t(write_b): pass data length as extra parameter in calls to\n+\twrite_boz.\n+\t(write_o): pass data length as extra parameter in calls to\n+\twrite_boz.\n+\t(write_z): pass data length as extra parameter in calls to\n+\twrite_boz.\n+\t(size_from_kind): also set size is default width is set.\n+\t* io/write_float.def (build_float_string): new paramter inserted\n+\tbefore result parameter. If default width use values passed\n+\tinstead of the values in fnode.\n+\t(FORMAT_FLOAT): macro modified to check for default width and\n+\tcalls to build_float_string to pass in default width.\n+\t(get_float_string): set width and precision to defaults when\n+\tneeded.\n+\n 2019-05-19  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR libfortran/90038"}, {"sha": "e798d9bda8780b2d36961787ceb5aba9b038f83c", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -956,12 +956,33 @@ parse_format_list (st_parameter_dt *dtp, bool *seen_dd)\n \t  *seen_dd = true;\n \t  if (u != FMT_POSINT && u != FMT_ZERO)\n \t    {\n+\t      if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n+\t\t{\n+\t\t  tail->u.real.w = DEFAULT_WIDTH;\n+\t\t  tail->u.real.d = 0;\n+\t\t  tail->u.real.e = -1;\n+\t\t  fmt->saved_token = u;\n+\t\t  break;\n+\t\t}\n \t      fmt->error = nonneg_required;\n \t      goto finished;\n \t    }\n \t}\n+      else if (u == FMT_ZERO)\n+\t{\n+\t  fmt->error = posint_required;\n+\t  goto finished;\n+\t}\n       else if (u != FMT_POSINT)\n \t{\n+\t  if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n+\t    {\n+\t      tail->u.real.w = DEFAULT_WIDTH;\n+\t      tail->u.real.d = 0;\n+\t      tail->u.real.e = -1;\n+\t      fmt->saved_token = u;\n+\t      break;\n+\t    }\n \t  fmt->error = posint_required;\n \t  goto finished;\n \t}\n@@ -1100,6 +1121,13 @@ parse_format_list (st_parameter_dt *dtp, bool *seen_dd)\n \t{\n \t  if (t != FMT_POSINT)\n \t    {\n+\t      if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n+\t\t{\n+\t\t  tail->u.integer.w = DEFAULT_WIDTH;\n+\t\t  tail->u.integer.m = -1;\n+\t\t  fmt->saved_token = t;\n+\t\t  break;\n+\t\t}\n \t      fmt->error = posint_required;\n \t      goto finished;\n \t    }\n@@ -1108,6 +1136,13 @@ parse_format_list (st_parameter_dt *dtp, bool *seen_dd)\n \t{\n \t  if (t != FMT_ZERO && t != FMT_POSINT)\n \t    {\n+\t      if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n+\t\t{\n+\t\t  tail->u.integer.w = DEFAULT_WIDTH;\n+\t\t  tail->u.integer.m = -1;\n+\t\t  fmt->saved_token = t;\n+\t\t  break;\n+\t\t}\n \t      fmt->error = nonneg_required;\n \t      goto finished;\n \t    }"}, {"sha": "f5e63797ba105e38ab6e62790eaade61f3181713", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -1011,6 +1011,56 @@ memset4 (gfc_char4_t *p, gfc_char4_t c, int k)\n     *p++ = c;\n }\n \n+/* Used in width fields to indicate that the default should be used */\n+#define DEFAULT_WIDTH -1\n+\n+/* Defaults for certain format field descriptors. These are decided based on\n+ * the type of the value being formatted.\n+ *\n+ * The behaviour here is modelled on the Oracle Fortran compiler. At the time\n+ * of writing, the details were available at this URL:\n+ *\n+ *   https://docs.oracle.com/cd/E19957-01/805-4939/6j4m0vnc3/index.html#z4000743746d\n+ */\n+\n+static inline int\n+default_width_for_integer (int kind)\n+{\n+  switch (kind)\n+    {\n+    case 1:\n+    case 2:  return  7;\n+    case 4:  return 12;\n+    case 8:  return 23;\n+    case 16: return 44;\n+    default: return  0;\n+    }\n+}\n+\n+static inline int\n+default_width_for_float (int kind)\n+{\n+  switch (kind)\n+    {\n+    case 4:  return 15;\n+    case 8:  return 25;\n+    case 16: return 42;\n+    default: return  0;\n+    }\n+}\n+\n+static inline int\n+default_precision_for_float (int kind)\n+{\n+  switch (kind)\n+    {\n+    case 4:  return 7;\n+    case 8:  return 16;\n+    case 16: return 33;\n+    default: return 0;\n+    }\n+}\n+\n #endif\n \n extern void"}, {"sha": "be9f6cb6f76c1f6c87ee2b1d12b9bab113fa8479", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -635,6 +635,12 @@ read_decimal (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \n   w = f->u.w;\n \n+  /* This is a legacy extension, and the frontend will only allow such cases\n+   * through when -fdec-format-defaults is passed.\n+   */\n+  if (w == DEFAULT_WIDTH)\n+    w = default_width_for_integer (length);\n+\n   p = read_block_form (dtp, &w);\n \n   if (p == NULL)"}, {"sha": "4ef35561fdd70a588968c3c2cc8ef28f0c8245be", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -685,9 +685,8 @@ write_l (st_parameter_dt *dtp, const fnode *f, char *source, int len)\n   p[wlen - 1] = (n) ? 'T' : 'F';\n }\n \n-\n static void\n-write_boz (st_parameter_dt *dtp, const fnode *f, const char *q, int n)\n+write_boz (st_parameter_dt *dtp, const fnode *f, const char *q, int n, int len)\n {\n   int w, m, digits, nzero, nblank;\n   char *p;\n@@ -720,6 +719,9 @@ write_boz (st_parameter_dt *dtp, const fnode *f, const char *q, int n)\n   /* Select a width if none was specified.  The idea here is to always\n      print something.  */\n \n+  if (w == DEFAULT_WIDTH)\n+    w = default_width_for_integer (len);\n+\n   if (w == 0)\n     w = ((digits < m) ? m : digits);\n \n@@ -846,6 +848,8 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n \n   /* Select a width if none was specified.  The idea here is to always\n      print something.  */\n+  if (w == DEFAULT_WIDTH)\n+    w = default_width_for_integer (len);\n \n   if (w == 0)\n     w = ((digits < m) ? m : digits) + nsign;\n@@ -1206,13 +1210,13 @@ write_b (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n   if (len > (int) sizeof (GFC_UINTEGER_LARGEST))\n     {\n       p = btoa_big (source, itoa_buf, len, &n);\n-      write_boz (dtp, f, p, n);\n+      write_boz (dtp, f, p, n, len);\n     }\n   else\n     {\n       n = extract_uint (source, len);\n       p = btoa (n, itoa_buf, sizeof (itoa_buf));\n-      write_boz (dtp, f, p, n);\n+      write_boz (dtp, f, p, n, len);\n     }\n }\n \n@@ -1227,13 +1231,13 @@ write_o (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n   if (len > (int) sizeof (GFC_UINTEGER_LARGEST))\n     {\n       p = otoa_big (source, itoa_buf, len, &n);\n-      write_boz (dtp, f, p, n);\n+      write_boz (dtp, f, p, n, len);\n     }\n   else\n     {\n       n = extract_uint (source, len);\n       p = otoa (n, itoa_buf, sizeof (itoa_buf));\n-      write_boz (dtp, f, p, n);\n+      write_boz (dtp, f, p, n, len);\n     }\n }\n \n@@ -1247,13 +1251,13 @@ write_z (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n   if (len > (int) sizeof (GFC_UINTEGER_LARGEST))\n     {\n       p = ztoa_big (source, itoa_buf, len, &n);\n-      write_boz (dtp, f, p, n);\n+      write_boz (dtp, f, p, n, len);\n     }\n   else\n     {\n       n = extract_uint (source, len);\n       p = gfc_xtoa (n, itoa_buf, sizeof (itoa_buf));\n-      write_boz (dtp, f, p, n);\n+      write_boz (dtp, f, p, n, len);\n     }\n }\n \n@@ -1491,7 +1495,7 @@ size_from_kind (st_parameter_dt *dtp, const fnode *f, int kind)\n {\n   int size;\n \n-  if (f->format == FMT_F && f->u.real.w == 0)\n+  if ((f->format == FMT_F && f->u.real.w == 0) || f->u.real.w == DEFAULT_WIDTH)\n     {\n       switch (kind)\n       {"}, {"sha": "daa16679f53261ac81e80118d7cbe815f5657e9b", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a8126a906f32068724d87416eeb01971f37f35/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=88a8126a906f32068724d87416eeb01971f37f35", "patch": "@@ -113,7 +113,8 @@ determine_precision (st_parameter_dt * dtp, const fnode * f, int len)\n static void\n build_float_string (st_parameter_dt *dtp, const fnode *f, char *buffer,\n \t\t    size_t size, int nprinted, int precision, int sign_bit,\n-\t\t    bool zero_flag, int npad, char *result, size_t *len)\n+\t\t    bool zero_flag, int npad, int default_width, char *result,\n+\t\t    size_t *len)\n {\n   char *put;\n   char *digits;\n@@ -132,8 +133,17 @@ build_float_string (st_parameter_dt *dtp, const fnode *f, char *buffer,\n   sign_t sign;\n \n   ft = f->format;\n-  w = f->u.real.w;\n-  d = f->u.real.d;\n+  if (f->u.real.w == DEFAULT_WIDTH)\n+    /* This codepath can only be reached with -fdec-format-defaults. */\n+    {\n+      w = default_width;\n+      d = precision;\n+    }\n+  else\n+    {\n+      w = f->u.real.w;\n+      d = f->u.real.d;\n+    }\n   p = dtp->u.p.scale_factor;\n   *len = 0;\n \n@@ -960,6 +970,11 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n       int save_scale_factor;\\\n       volatile GFC_REAL_ ## x temp;\\\n       save_scale_factor = dtp->u.p.scale_factor;\\\n+      if (w == DEFAULT_WIDTH)\\\n+\t{\\\n+\t  w = default_width;\\\n+\t  d = precision;\\\n+\t}\\\n       switch (dtp->u.p.current_unit->round_status)\\\n \t{\\\n \t  case ROUND_ZERO:\\\n@@ -1035,7 +1050,8 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n \t  nprinted = FDTOA(y,precision,m);\\\n \t}\\\n       build_float_string (dtp, &newf, buffer, size, nprinted, precision,\\\n-\t\t\t\t   sign_bit, zero_flag, npad, result, res_len);\\\n+\t\t\t\t   sign_bit, zero_flag, npad, default_width,\\\n+\t\t\t\t   result, res_len);\\\n       dtp->u.p.scale_factor = save_scale_factor;\\\n     }\\\n   else\\\n@@ -1045,7 +1061,8 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n       else\\\n \tnprinted = DTOA(y,precision,m);\\\n       build_float_string (dtp, f, buffer, size, nprinted, precision,\\\n-\t\t\t\t   sign_bit, zero_flag, npad, result, res_len);\\\n+\t\t\t\t   sign_bit, zero_flag, npad, default_width,\\\n+\t\t\t\t   result, res_len);\\\n     }\\\n }\\\n \n@@ -1059,6 +1076,16 @@ get_float_string (st_parameter_dt *dtp, const fnode *f, const char *source,\n {\n   int sign_bit, nprinted;\n   bool zero_flag;\n+  int default_width = 0;\n+\n+  if (f->u.real.w == DEFAULT_WIDTH)\n+    /* This codepath can only be reached with -fdec-format-defaults. The default\n+     * values are based on those used in the Oracle Fortran compiler.\n+     */\n+    {\n+      default_width = default_width_for_float (kind);\n+      precision = default_precision_for_float (kind);\n+    }\n \n   switch (kind)\n     {"}]}