{"sha": "dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzZDZhNDJmY2Q4ODFiMWY0ZjhmYmQ2Y2M4MmMxZjE0MTI0YjMxNw==", "commit": {"author": {"name": "Andrew Burgess", "email": "andrew.burgess@embecosm.com", "date": "2017-04-14T21:14:34Z"}, "committer": {"name": "Andrew Burgess", "email": "aburgess@gcc.gnu.org", "date": "2017-04-14T21:14:34Z"}, "message": "arc: Fix for loop end detection\n\nWe use a negative ID number to link together the doloop_begin and\ndoloop_end instructions.  This negative ID number is setup within\ndoloop_begin, at this point the ID is stored into the loop end\ninstruction (doloop_end_i) and placed into the doloop_begin_i\ninstruction.\n\nIn arc.c (arc_reorg) we extract the ID from the doloop_end_i\ninstruction in order to find the matching doloop_begin_i instruction,\nthough the ID is only used in some cases.\n\nCurrently in arc_reorg when we extract the ID we negate it.  This\nnegation is invalid.  The ID stored in both doloop_end_i and\ndoloop_begin_i is already negative, the negation in arc_reorg means\nthat if we need to use the ID to find the doloop_begin_i then we will\nnever find it (as the IDs will never match).\n\nThis commit removes the unneeded negation, moves the extraction of the\nID into a more appropriately scoped block and adds a new test for this\nissue.\n\ngcc/ChangeLog:\n\n\t* config/arc/arc.c (arc_reorg): Move loop_end_id into a more local\n\tblock, and do not negate it, the stored id is already negative.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arc/loop-1.c: New file.\n\n\nCo-Authored-By: Guy Benyei <guybe@mellanox.com>\n\nFrom-SVN: r246933", "tree": {"sha": "d956a464bc5962f2dee2f1d70f39ffd824ed2d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d956a464bc5962f2dee2f1d70f39ffd824ed2d80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/comments", "author": {"login": "T-J-Teru", "id": 475372, "node_id": "MDQ6VXNlcjQ3NTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T-J-Teru", "html_url": "https://github.com/T-J-Teru", "followers_url": "https://api.github.com/users/T-J-Teru/followers", "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}", "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}", "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions", "organizations_url": "https://api.github.com/users/T-J-Teru/orgs", "repos_url": "https://api.github.com/users/T-J-Teru/repos", "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}", "received_events_url": "https://api.github.com/users/T-J-Teru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c1d6b64e3e163e434b2f8d8521a31c9469089f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1d6b64e3e163e434b2f8d8521a31c9469089f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1d6b64e3e163e434b2f8d8521a31c9469089f0"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "2807eb23f85d60704637db38a7eb8c0886b26203", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "patch": "@@ -1,3 +1,9 @@\n+2017-04-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Guy Benyei  <guybe@mellanox.com>\n+\n+\t* config/arc/arc.c (arc_reorg): Move loop_end_id into a more local\n+\tblock, and do not negate it, the stored id is already negative.\n+\n 2017-04-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* config/arc/arc.md (doloop_begin_i): Use @pcl assembler syntax."}, {"sha": "92fecad93d9bc026befa11a4ff84326abd91be2d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "patch": "@@ -6569,8 +6569,6 @@ arc_reorg (void)\n \t  rtx_insn *lp_simple = NULL;\n \t  rtx_insn *next = NULL;\n \t  rtx op0 = XEXP (XVECEXP (PATTERN (insn), 0, 1), 0);\n-\t  HOST_WIDE_INT loop_end_id\n-\t    = -INTVAL (XEXP (XVECEXP (PATTERN (insn), 0, 4), 0));\n \t  int seen_label = 0;\n \n \t  for (lp = prev;\n@@ -6581,6 +6579,9 @@ arc_reorg (void)\n \t  if (!lp || !NONJUMP_INSN_P (lp)\n \t      || dead_or_set_regno_p (lp, LP_COUNT))\n \t    {\n+\t      HOST_WIDE_INT loop_end_id\n+\t\t= INTVAL (XEXP (XVECEXP (PATTERN (insn), 0, 4), 0));\n+\n \t      for (prev = next = insn, lp = NULL ; prev || next;)\n \t\t{\n \t\t  if (prev)"}, {"sha": "3de763f5dc3cf081a42b7b551cde740410b75c00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "patch": "@@ -1,3 +1,7 @@\n+2017-04-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gcc.target/arc/loop-1.c: New file.\n+\n 2017-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/80098"}, {"sha": "1afe8ebacea379344719a8607f910d5fd714486e", "filename": "gcc/testsuite/gcc.target/arc/loop-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-1.c?ref=dd3d6a42fcd881b1f4f8fbd6cc82c1f14124b317", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* This case would fail to make use of the zero-overhead loop\n+   instruction at one time due to a bug.  */\n+\n+extern char a[];\n+\n+struct some_t\n+{\n+  struct\n+  {\n+    int aaa;\n+    short bbb;\n+    char ccc;\n+    char ddd;\n+  } ppp[8];\n+\n+  int www[1];\n+};\n+\n+int b;\n+\n+void\n+some_function ()\n+{\n+  struct some_t *tmp = (struct some_t *) a;\n+\n+  while ((*tmp).ppp[b].ccc)\n+    while(0);\n+\n+  for (; b; b++)\n+    {\n+      if (tmp->ppp[b].ccc)\n+        {\n+          int c = tmp->ppp[b].bbb;\n+          int d = tmp->ppp[b].aaa;\n+          int e = d - tmp->www[c];\n+          if (e)\n+            tmp->ppp[b].ddd = 1;\n+        }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"\\[^\\n\\]+lp \\\\.L__GCC__\" } } */"}]}