{"sha": "1566ca0969ac4a14f7434d710e75dd89da303e75", "node_id": "C_kwDOANBUbNoAKDE1NjZjYTA5NjlhYzRhMTRmNzQzNGQ3MTBlNzVkZDg5ZGEzMDNlNzU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-11T22:52:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:22Z"}, "message": "libstdc++: Improve doxygen docs for <atomic>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/atomic: Suppress doxygen docs for\n\timplementation details.\n\t* include/bits/atomic_base.h: Likewise.\n\t* include/bits/shared_ptr_atomic.h: Use markdown. Fix grouping\n\tso that std::atomic is not added to the pointer abstractions\n\tgroup.", "tree": {"sha": "12cf75c75cb281ec684cbd26835b6123b4a5c84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12cf75c75cb281ec684cbd26835b6123b4a5c84e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1566ca0969ac4a14f7434d710e75dd89da303e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1566ca0969ac4a14f7434d710e75dd89da303e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1566ca0969ac4a14f7434d710e75dd89da303e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1566ca0969ac4a14f7434d710e75dd89da303e75/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b917e7c007f54dd471f64b301124d4d1f8b636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b917e7c007f54dd471f64b301124d4d1f8b636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b917e7c007f54dd471f64b301124d4d1f8b636"}], "stats": {"total": 82, "additions": 56, "deletions": 26}, "files": [{"sha": "d29e443417778436caf103e9ca6853b2830d4f4a", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1566ca0969ac4a14f7434d710e75dd89da303e75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1566ca0969ac4a14f7434d710e75dd89da303e75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=1566ca0969ac4a14f7434d710e75dd89da303e75", "patch": "@@ -86,13 +86,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     } memory_order;\n #endif\n \n+  /// @cond undocumented\n   enum __memory_order_modifier\n     {\n       __memory_order_mask          = 0x0ffff,\n       __memory_order_modifier_mask = 0xffff0000,\n       __memory_order_hle_acquire   = 0x10000,\n       __memory_order_hle_release   = 0x20000\n     };\n+  /// @endcond\n \n   constexpr memory_order\n   operator|(memory_order __m, __memory_order_modifier __mod)\n@@ -106,6 +108,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return memory_order(int(__m) & int(__mod));\n   }\n \n+  /// @cond undocumented\n+\n   // Drop release ordering as per [atomics.types.operations.req]/21\n   constexpr memory_order\n   __cmpexch_failure_order2(memory_order __m) noexcept\n@@ -128,6 +132,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t&& (__m & __memory_order_mask) != memory_order_acq_rel;\n   }\n \n+  // Base types for atomics.\n+  template<typename _IntTp>\n+    struct __atomic_base;\n+\n+  /// @endcond\n+\n   _GLIBCXX_ALWAYS_INLINE void\n   atomic_thread_fence(memory_order __m) noexcept\n   { __atomic_thread_fence(int(__m)); }\n@@ -145,16 +155,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __ret;\n     }\n \n-  // Base types for atomics.\n-  template<typename _IntTp>\n-    struct __atomic_base;\n-\n-#if __cplusplus <= 201703L\n-# define _GLIBCXX20_INIT(I)\n-#else\n+#if __cplusplus >= 202002L\n # define __cpp_lib_atomic_value_initialization 201911L\n+#endif\n+\n+/// @cond undocumented\n+#if __cpp_lib_atomic_value_initialization\n # define _GLIBCXX20_INIT(I) = I\n+#else\n+# define _GLIBCXX20_INIT(I)\n #endif\n+/// @endcond\n \n #define ATOMIC_VAR_INIT(_VI) { _VI }\n \n@@ -171,8 +182,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typedef unsigned char __atomic_flag_data_type;\n #endif\n \n-  /**\n-   *  @brief Base type for atomic_flag.\n+  /// @cond undocumented\n+\n+  /*\n+   *  Base type for atomic_flag.\n    *\n    *  Base type is POD with data, allowing atomic_flag to derive from\n    *  it and meet the standard layout type requirement. In addition to\n@@ -190,6 +203,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _GLIBCXX_END_EXTERN_C\n \n+  /// @endcond\n+\n #define ATOMIC_FLAG_INIT { 0 }\n \n   /// atomic_flag\n@@ -295,6 +310,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __i ? __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : 0; }\n   };\n \n+  /// @cond undocumented\n \n   /// Base class for atomic integrals.\n   //\n@@ -936,7 +952,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), int(__m)); }\n     };\n \n+  /// @endcond\n+\n #if __cplusplus > 201703L\n+  /// @cond undocumented\n+\n   // Implementation details of atomic_ref and atomic<floating-point>.\n   namespace __atomic_impl\n   {\n@@ -1936,6 +1956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tp** _M_ptr;\n     };\n \n+  /// @endcond\n #endif // C++2a\n \n   /// @} group atomics"}, {"sha": "d4bd712fc7d4e0210ab81b9c4401c3c9675f77c1", "filename": "libstdc++-v3/include/bits/shared_ptr_atomic.h", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1566ca0969ac4a14f7434d710e75dd89da303e75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1566ca0969ac4a14f7434d710e75dd89da303e75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h?ref=1566ca0969ac4a14f7434d710e75dd89da303e75", "patch": "@@ -38,9 +38,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @addtogroup pointer_abstractions\n+   * @relates shared_ptr\n    * @{\n    */\n-  /// @relates shared_ptr @{\n \n   /// @cond undocumented\n \n@@ -94,8 +94,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __p A non-null pointer to a shared_ptr object.\n    *  @return @c *__p\n    *\n-   *  The memory order shall not be @c memory_order_release or\n-   *  @c memory_order_acq_rel.\n+   *  The memory order shall not be `memory_order_release` or\n+   *  `memory_order_acq_rel`.\n    *  @{\n   */\n   template<typename _Tp>\n@@ -130,8 +130,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __p A non-null pointer to a shared_ptr object.\n    *  @param  __r The value to store.\n    *\n-   *  The memory order shall not be @c memory_order_acquire or\n-   *  @c memory_order_acq_rel.\n+   *  The memory order shall not be `memory_order_acquire` or\n+   *  `memory_order_acq_rel`.\n    *  @{\n   */\n   template<typename _Tp>\n@@ -167,8 +167,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  @brief  Atomic exchange for shared_ptr objects.\n    *  @param  __p A non-null pointer to a shared_ptr object.\n-   *  @param  __r New value to store in @c *__p.\n-   *  @return The original value of @c *__p\n+   *  @param  __r New value to store in `*__p`.\n+   *  @return The original value of `*__p`\n    *  @{\n   */\n   template<typename _Tp>\n@@ -214,10 +214,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __p A non-null pointer to a shared_ptr object.\n    *  @param  __v A non-null pointer to a shared_ptr object.\n    *  @param  __w A non-null pointer to a shared_ptr object.\n-   *  @return True if @c *__p was equivalent to @c *__v, false otherwise.\n+   *  @return True if `*__p` was equivalent to `*__v`, false otherwise.\n    *\n-   *  The memory order for failure shall not be @c memory_order_release or\n-   *  @c memory_order_acq_rel, or stronger than the memory order for success.\n+   *  The memory order for failure shall not be `memory_order_release` or\n+   *  `memory_order_acq_rel`.\n    *  @{\n   */\n   template<typename _Tp>\n@@ -327,11 +327,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n   /// @}\n \n+  /// @} group pointer_abstractions\n+\n #if __cplusplus >= 202002L\n # define __cpp_lib_atomic_shared_ptr 201711L\n   template<typename _Tp>\n     class atomic;\n \n+  /**\n+   * @addtogroup pointer_abstractions\n+   * @relates shared_ptr\n+   * @{\n+   */\n+\n   template<typename _Up>\n     static constexpr bool __is_shared_ptr = false;\n   template<typename _Up>\n@@ -788,10 +796,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       _Sp_atomic<weak_ptr<_Tp>> _M_impl;\n     };\n-#endif // C++20\n-\n-  /// @} relates shared_ptr\n   /// @} group pointer_abstractions\n+#endif // C++20\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1c6acfa36d03002c6ff70ae9b08ed3fbec513767", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1566ca0969ac4a14f7434d710e75dd89da303e75/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1566ca0969ac4a14f7434d710e75dd89da303e75/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=1566ca0969ac4a14f7434d710e75dd89da303e75", "patch": "@@ -181,11 +181,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // __cpp_lib_atomic_wait\n   };\n \n-#if __cplusplus <= 201703L\n-# define _GLIBCXX20_INIT(I)\n-#else\n+/// @cond undocumented\n+#if __cpp_lib_atomic_value_initialization\n # define _GLIBCXX20_INIT(I) = I\n+#else\n+# define _GLIBCXX20_INIT(I)\n #endif\n+/// @endcond\n \n   /**\n    *  @brief Generic atomic type, primary class template.\n@@ -1241,11 +1243,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   atomic_flag_clear(volatile atomic_flag* __a) noexcept\n   { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n \n-\n+  /// @cond undocumented\n   template<typename _Tp>\n     using __atomic_val_t = typename atomic<_Tp>::value_type;\n   template<typename _Tp>\n     using __atomic_diff_t = typename atomic<_Tp>::difference_type;\n+  /// @endcond\n \n   // [atomics.nonmembers] Non-member functions.\n   // Function templates generally applicable to atomic types."}]}