{"sha": "b9abf793932ab4b7387eacbf58c6030a8f3f554a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhYmY3OTM5MzJhYjRiNzM4N2VhY2JmNThjNjAzMGE4ZjNmNTU0YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-03-18T12:30:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-03-18T12:30:11Z"}, "message": "invoke.texi (flto): Update for changes in 4.9.\n\n2014-03-18  Richard Biener  <rguenther@suse.de>\n\n\t* doc/invoke.texi (flto): Update for changes in 4.9.\n\nFrom-SVN: r208646", "tree": {"sha": "d89382c7fd7efbf4e8b54bdd6fd0300dad64d9fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d89382c7fd7efbf4e8b54bdd6fd0300dad64d9fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9abf793932ab4b7387eacbf58c6030a8f3f554a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9abf793932ab4b7387eacbf58c6030a8f3f554a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9abf793932ab4b7387eacbf58c6030a8f3f554a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9abf793932ab4b7387eacbf58c6030a8f3f554a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f00cf18ca022961177f13399323de7b674ff515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f00cf18ca022961177f13399323de7b674ff515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f00cf18ca022961177f13399323de7b674ff515"}], "stats": {"total": 103, "additions": 66, "deletions": 37}, "files": [{"sha": "8038951e2263645c8a10274b0646f2cfbe04406c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9abf793932ab4b7387eacbf58c6030a8f3f554a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9abf793932ab4b7387eacbf58c6030a8f3f554a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9abf793932ab4b7387eacbf58c6030a8f3f554a", "patch": "@@ -1,3 +1,7 @@\n+2014-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (flto): Update for changes in 4.9.\n+\n 2014-03-18  Richard Biener  <rguenther@suse.de>\n \n \t* doc/loop.texi: Remove section on the removed lambda framework."}, {"sha": "4c183a37b1b3cd6d416d325f355fc7b23eeb6e6b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 62, "deletions": 37, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9abf793932ab4b7387eacbf58c6030a8f3f554a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9abf793932ab4b7387eacbf58c6030a8f3f554a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b9abf793932ab4b7387eacbf58c6030a8f3f554a", "patch": "@@ -8524,8 +8524,9 @@ file.  When the object files are linked together, all the function\n bodies are read from these ELF sections and instantiated as if they\n had been part of the same translation unit.\n \n-To use the link-time optimizer, @option{-flto} needs to be specified at\n-compile time and during the final link.  For example:\n+To use the link-time optimizer, @option{-flto} and optimization\n+options should be specified at compile time and during the final link.\n+For example:\n \n @smallexample\n gcc -c -O2 -flto foo.c\n@@ -8555,8 +8556,15 @@ merges them together into a single GIMPLE representation and optimizes\n them as usual to produce @file{myprog}.\n \n The only important thing to keep in mind is that to enable link-time\n-optimizations the @option{-flto} flag needs to be passed to both the\n-compile and the link commands.\n+optimizations you need to use the GCC driver to perform the link-step.\n+GCC then automatically performs link-time optimization if any of the\n+objects involved were compiled with the @option{-flto}.  You generally\n+should specify the optimization options to be used for link-time\n+optimization though GCC will try to be clever at guessing an\n+optimization level to use from the options used at compile-time\n+if you fail to specify one at link-time.  You can always override\n+the automatic decision to do link-time optimization at link-time\n+by passing @option{-fno-lto} to the link command.\n \n To make whole program optimization effective, it is necessary to make\n certain whole program assumptions.  The compiler needs to know\n@@ -8568,28 +8576,31 @@ the linker plugin is not available, @option{-fwhole-program} should be\n used to allow the compiler to make these assumptions, which leads\n to more aggressive optimization decisions.\n \n-Note that when a file is compiled with @option{-flto}, the generated\n-object file is larger than a regular object file because it \n-contains GIMPLE bytecodes and the usual final code.  This means that\n+When @option{-fuse-linker-plugin} is not enabled then, when a file is\n+compiled with @option{-flto}, the generated object file is larger than\n+a regular object file because it contains GIMPLE bytecodes and the usual\n+final code (see @option{-ffat-lto-objects}.  This means that\n object files with LTO information can be linked as normal object\n-files; if @option{-flto} is not passed to the linker, no\n-interprocedural optimizations are applied.\n+files; if @option{-fno-lto} is passed to the linker, no\n+interprocedural optimizations are applied.  Note that when\n+@option{-fno-fat-lto-objects} is enabled the compile-stage is faster\n+but you cannot perform a regular, non-LTO link on them.\n \n Additionally, the optimization flags used to compile individual files\n are not necessarily related to those used at link time.  For instance,\n \n @smallexample\n-gcc -c -O0 -flto foo.c\n-gcc -c -O0 -flto bar.c\n-gcc -o myprog -flto -O3 foo.o bar.o\n+gcc -c -O0 -ffat-lto-objects -flto foo.c\n+gcc -c -O0 -ffat-lto-objects -flto bar.c\n+gcc -o myprog -O3 foo.o bar.o\n @end smallexample\n \n This produces individual object files with unoptimized assembler\n code, but the resulting binary @file{myprog} is optimized at\n-@option{-O3}.  If, instead, the final binary is generated without\n-@option{-flto}, then @file{myprog} is not optimized.\n+@option{-O3}.  If, instead, the final binary is generated with\n+@option{-fno-lto}, then @file{myprog} is not optimized.\n \n-When producing the final binary with @option{-flto}, GCC only\n+When producing the final binary, GCC only\n applies link-time optimizations to those files that contain bytecode.\n Therefore, you can mix and match object files and libraries with\n GIMPLE bytecodes and final object code.  GCC automatically selects\n@@ -8598,28 +8609,45 @@ further processing.\n \n There are some code generation flags preserved by GCC when\n generating bytecodes, as they need to be used during the final link\n-stage.  Currently, the following options are saved into the GIMPLE\n-bytecode files: @option{-fPIC}, @option{-fcommon} and all the\n-@option{-m} target flags.\n-\n-At link time, these options are read in and reapplied.  Note that the\n-current implementation makes no attempt to recognize conflicting\n-values for these options.  If different files have conflicting option\n-values (e.g., one file is compiled with @option{-fPIC} and another\n-isn't), the compiler simply uses the last value read from the\n-bytecode files.  It is recommended, then, that you compile all the files\n-participating in the same link with the same options.\n+stage.  Generally options specified at link-time override those\n+specified at compile-time.\n+\n+If you do not specify an optimization level option @option{-O} at\n+link-time then GCC will compute one based on the optimization levels\n+used when compiling the object files.  The highest optimization\n+level will win here.\n+\n+Currently, the following options and their setting are take from\n+the first object file that explicitely specified it: \n+@option{-fPIC}, @option{-fpic}, @option{-fpie}, @option{-fcommon},\n+@option{-fexceptions}, @option{-fnon-call-exceptions}, @option{-fgnu-tm}\n+and all the @option{-m} target flags.\n+\n+Certain ABI changing flags are required to match in all compilation-units\n+and trying to override this at link-time with a conflicting value\n+is ignored.  This includes options such as @option{-freg-struct-return}\n+and @option{-fpcc-struct-return}. \n+\n+Other options such as @option{-ffp-contract}, @option{-fno-strict-overflow},\n+@option{-fwrapv}, @option{-fno-trapv} or @option{-fno-strict-aliasing}\n+are passed through to the link stage and merged conservatively for\n+conflicting translation units.  Specifically\n+@option{-fno-strict-overflow}, @option{-fwrapv} and @option{-fno-trapv} take\n+precedence and for example @option{-ffp-contract=off} takes precedence\n+over @option{-ffp-contract=fast}.  You can override them at linke-time.\n+\n+It is recommended that you compile all the files participating in the\n+same link with the same options and also specify those options at\n+link time.\n \n If LTO encounters objects with C linkage declared with incompatible\n types in separate translation units to be linked together (undefined\n behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be\n-issued.  The behavior is still undefined at run time.\n+issued.  The behavior is still undefined at run time.  Similar\n+diagnostics may be raised for other languages.\n \n Another feature of LTO is that it is possible to apply interprocedural\n-optimizations on files written in different languages.  This requires\n-support in the language front end.  Currently, the C, C++ and\n-Fortran front ends are capable of emitting GIMPLE bytecodes, so\n-something like this should work:\n+optimizations on files written in different languages:\n \n @smallexample\n gcc -c -flto foo.c\n@@ -8632,8 +8660,7 @@ Notice that the final link is done with @command{g++} to get the C++\n runtime libraries and @option{-lgfortran} is added to get the Fortran\n runtime libraries.  In general, when mixing languages in LTO mode, you\n should use the same link command options as when mixing languages in a\n-regular (non-LTO) compilation; all you need to add is @option{-flto} to\n-all the compile and link commands.\n+regular (non-LTO) compilation.\n \n If object files containing GIMPLE bytecode are stored in a library archive, say\n @file{libfoo.a}, it is possible to extract and use them in an LTO link if you\n@@ -8665,11 +8692,11 @@ The current implementation of LTO makes no\n attempt to generate bytecode that is portable between different\n types of hosts.  The bytecode files are versioned and there is a\n strict version check, so bytecode files generated in one version of\n-GCC will not work with an older/newer version of GCC@.\n+GCC will not work with an older or newer version of GCC.\n \n Link-time optimization does not work well with generation of debugging\n information.  Combining @option{-flto} with\n-@option{-g} is currently experimental and expected to produce wrong\n+@option{-g} is currently experimental and expected to produce unexpected\n results.\n \n If you specify the optional @var{n}, the optimization and code\n@@ -8685,8 +8712,6 @@ You must prepend a @samp{+} to the command recipe in the parent Makefile\n for this to work.  This option likely only works if @env{MAKE} is\n GNU make.\n \n-This option is disabled by default.\n-\n @item -flto-partition=@var{alg}\n @opindex flto-partition\n Specify the partitioning algorithm used by the link-time optimizer."}]}