{"sha": "4267db98773b84dd48f9bcc3b5b03dba6cbb9494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI2N2RiOTg3NzNiODRkZDQ4ZjliY2MzYjViMDNkYmE2Y2JiOTQ5NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-06-03T04:06:19Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-06-03T04:06:19Z"}, "message": "re PR java/21722 (gcj miscompiles accesses to static final vars with indirect dispatch)\n\n\tPR java/21722:\n\t* class.c (build_static_field_ref): Don't fold constant fields if\n\tcurrent class is from a .class file and we're using indirect\n\tdispatch.\n\nFrom-SVN: r100533", "tree": {"sha": "7b45e87b69d880417f426174ec0944cdb7ac49a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b45e87b69d880417f426174ec0944cdb7ac49a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4267db98773b84dd48f9bcc3b5b03dba6cbb9494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4267db98773b84dd48f9bcc3b5b03dba6cbb9494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4267db98773b84dd48f9bcc3b5b03dba6cbb9494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4267db98773b84dd48f9bcc3b5b03dba6cbb9494/comments", "author": null, "committer": null, "parents": [{"sha": "50e5241d1f27fa5ce2919c3b9ef681bc3b2d24b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e5241d1f27fa5ce2919c3b9ef681bc3b2d24b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e5241d1f27fa5ce2919c3b9ef681bc3b2d24b3"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "117cea996d4d71474e1e47d4d12b2cc437c06179", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4267db98773b84dd48f9bcc3b5b03dba6cbb9494/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4267db98773b84dd48f9bcc3b5b03dba6cbb9494/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4267db98773b84dd48f9bcc3b5b03dba6cbb9494", "patch": "@@ -1,3 +1,10 @@\n+2005-06-01  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/21722:\n+\t* class.c (build_static_field_ref): Don't fold constant fields if\n+\tcurrent class is from a .class file and we're using indirect\n+\tdispatch.\n+\n 2005-05-31  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* java/verify-glue.c: Don't include errors.h and include toplev.h."}, {"sha": "68732b74dd56a6c9148a10d24dae9a1f1ef3c046", "filename": "gcc/java/class.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4267db98773b84dd48f9bcc3b5b03dba6cbb9494/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4267db98773b84dd48f9bcc3b5b03dba6cbb9494/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=4267db98773b84dd48f9bcc3b5b03dba6cbb9494", "patch": "@@ -1068,19 +1068,18 @@ build_static_field_ref (tree fdecl)\n {\n   tree fclass = DECL_CONTEXT (fdecl);\n   int is_compiled = is_compiled_class (fclass);\n+  int from_class = ! CLASS_FROM_SOURCE_P (current_class);\n \n   /* Allow static final fields to fold to a constant.  When using\n-     -fno-assume-compiled, gcj will sometimes try to fold a field from\n-     an uncompiled class.  This is required when the field in question\n-     meets the appropriate criteria for a compile-time constant.\n-     However, currently sometimes gcj is too eager and will end up\n-     returning the field itself, leading to an incorrect external\n-     reference being generated.  */\n-  if ((is_compiled && !flag_indirect_dispatch)\n-      || (FIELD_FINAL (fdecl) && DECL_INITIAL (fdecl) != NULL_TREE\n-\t  && (JSTRING_TYPE_P (TREE_TYPE (fdecl))\n-\t      || JNUMERIC_TYPE_P (TREE_TYPE (fdecl)))\n-\t  && TREE_CONSTANT (DECL_INITIAL (fdecl))))\n+     -findirect-dispatch, we simply never do this folding if compiling\n+     from .class; in the .class file constants will be referred to via\n+     the constant pool.  */\n+  if ((!flag_indirect_dispatch || !from_class)\n+      && (is_compiled\n+\t  || (FIELD_FINAL (fdecl) && DECL_INITIAL (fdecl) != NULL_TREE\n+\t      && (JSTRING_TYPE_P (TREE_TYPE (fdecl))\n+\t\t  || JNUMERIC_TYPE_P (TREE_TYPE (fdecl)))\n+\t      && TREE_CONSTANT (DECL_INITIAL (fdecl)))))\n     {\n       if (is_compiled == 1)\n \tDECL_EXTERNAL (fdecl) = 1;"}]}