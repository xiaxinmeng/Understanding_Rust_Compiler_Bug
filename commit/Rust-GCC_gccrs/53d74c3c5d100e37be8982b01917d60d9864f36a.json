{"sha": "53d74c3c5d100e37be8982b01917d60d9864f36a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkNzRjM2M1ZDEwMGUzN2JlODk4MmIwMTkxN2Q2MGQ5ODY0ZjM2YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-13T13:29:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-13T13:29:32Z"}, "message": "Include setjmp.h.\n\n(build_real_from_int_cst): Propagate overflow flags and establish float\nhandler.\n(build_complex): Propagate overflow flags.\n\nFrom-SVN: r6766", "tree": {"sha": "2a7bcc523f98a74396bbca1ee340e4036b64feed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7bcc523f98a74396bbca1ee340e4036b64feed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53d74c3c5d100e37be8982b01917d60d9864f36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d74c3c5d100e37be8982b01917d60d9864f36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d74c3c5d100e37be8982b01917d60d9864f36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d74c3c5d100e37be8982b01917d60d9864f36a/comments", "author": null, "committer": null, "parents": [{"sha": "ae202b5602ef429b6ebf140483de69acb084a8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae202b5602ef429b6ebf140483de69acb084a8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae202b5602ef429b6ebf140483de69acb084a8e8"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "d75419432885c8d4f70f49159837528e88d70c9e", "filename": "gcc/tree.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d74c3c5d100e37be8982b01917d60d9864f36a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d74c3c5d100e37be8982b01917d60d9864f36a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=53d74c3c5d100e37be8982b01917d60d9864f36a", "patch": "@@ -32,6 +32,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    are used also for allocating many other kinds of objects\n    by all passes of the compiler.  */\n \n+#include <setjmp.h>\n #include \"config.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n@@ -1292,19 +1293,35 @@ build_real_from_int_cst (type, i)\n      tree i;\n {\n   tree v;\n+  int overflow = TREE_OVERFLOW (i);\n   REAL_VALUE_TYPE d;\n+  jmp_buf float_error;\n \n   v = make_node (REAL_CST);\n   TREE_TYPE (v) = type;\n \n+  if (setjmp (float_error))\n+    {\n+      d = dconst0;\n+      overflow = 1;\n+      goto got_it;\n+    }\n+\n+  set_float_handler (float_error);\n+\n   d = REAL_VALUE_TRUNCATE (TYPE_MODE (type), real_value_from_int_cst (i));\n-  /* Check for valid float value for this type on this target machine;\n-     if not, can print error message and store a valid value in D.  */\n+\n+  /* Check for valid float value for this type on this target machine.  */\n+\n+ got_it:\n+  set_float_handler (NULL_PTR);\n+\n #ifdef CHECK_FLOAT_VALUE\n-  CHECK_FLOAT_VALUE (TYPE_MODE (type), d);\n+  CHECK_FLOAT_VALUE (TYPE_MODE (type), d, overflow);\n #endif\n \n   TREE_REAL_CST (v) = d;\n+  TREE_OVERFLOW (v) = TREE_CONSTANT_OVERFLOW (v) = overflow;\n   return v;\n }\n \n@@ -1339,9 +1356,13 @@ build_complex (real, imag)\n      tree real, imag;\n {\n   register tree t = make_node (COMPLEX_CST);\n+\n   TREE_REALPART (t) = real;\n   TREE_IMAGPART (t) = imag;\n   TREE_TYPE (t) = build_complex_type (TREE_TYPE (real));\n+  TREE_OVERFLOW (t) = TREE_OVERFLOW (real) | TREE_OVERFLOW (imag);\n+  TREE_CONSTANT_OVERFLOW (t)\n+    = TREE_CONSTANT_OVERFLOW (real) | TREE_CONSTANT_OVERFLOW (imag);\n   return t;\n }\n "}]}