{"sha": "8f540f069535891aff80eab68f58ac1d4691c2c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1NDBmMDY5NTM1ODkxYWZmODBlYWI2OGY1OGFjMWQ0NjkxYzJjMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-12-03T23:57:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-12-03T23:57:19Z"}, "message": "re PR c++/38232 (\"value-initialization of reference\" warning too strict)\n\n        PR c++/38232\n        * init.c (build_value_init): Do initial zero-initialization\n        of a class with an implicitly-defined constructor using\n        build_zero_init rather than in build_value_init.\n        (build_value_init_1): Fold into build_value_init.\n\nFrom-SVN: r142418", "tree": {"sha": "38f8a82d1a414cec14d58ef9c8ed577e4200187b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38f8a82d1a414cec14d58ef9c8ed577e4200187b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f540f069535891aff80eab68f58ac1d4691c2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f540f069535891aff80eab68f58ac1d4691c2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f540f069535891aff80eab68f58ac1d4691c2c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f540f069535891aff80eab68f58ac1d4691c2c2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c39d1b46ffb3e78962d56e6d42ed93c1fb53eca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39d1b46ffb3e78962d56e6d42ed93c1fb53eca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39d1b46ffb3e78962d56e6d42ed93c1fb53eca2"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "0c6ecf813147c12f77dfbc892ef4df1c6451fdec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f540f069535891aff80eab68f58ac1d4691c2c2", "patch": "@@ -1,5 +1,11 @@\n 2008-12-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/38232\n+\t* init.c (build_value_init): Do initial zero-initialization\n+\tof a class with an implicitly-defined constructor using\n+\tbuild_zero_init rather than in build_value_init.\n+\t(build_value_init_1): Fold into build_value_init.\n+\n \tPR c++/38256\n \t* parser.c (cp_parser_conversion_type_id): Diagnose\n \t'operator auto'\there."}, {"sha": "d71b68badaa1c71707efecb65b6f3d43086c7eba", "filename": "gcc/cp/init.c", "status": "modified", "additions": 30, "deletions": 41, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8f540f069535891aff80eab68f58ac1d4691c2c2", "patch": "@@ -267,12 +267,10 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n }\n \n /* Return a suitable initializer for value-initializing an object of type\n-   TYPE, as described in [dcl.init].  If HAVE_CTOR is true, the initializer\n-   for an enclosing object is already calling the constructor for this\n-   object.  */\n+   TYPE, as described in [dcl.init].  */\n \n-static tree\n-build_value_init_1 (tree type, bool have_ctor)\n+tree\n+build_value_init (tree type)\n {\n   /* [dcl.init]\n \n@@ -300,17 +298,38 @@ build_value_init_1 (tree type, bool have_ctor)\n \n   if (CLASS_TYPE_P (type))\n     {\n-      if (type_has_user_provided_constructor (type) && !have_ctor)\n+      if (type_has_user_provided_constructor (type))\n \treturn build_aggr_init_expr\n \t  (type,\n \t   build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t      NULL_TREE, type, LOOKUP_NORMAL,\n \t\t\t\t      tf_warning_or_error));\n+      else if (TREE_CODE (type) != UNION_TYPE && TYPE_NEEDS_CONSTRUCTING (type))\n+\t{\n+\t  /* This is a class that needs constructing, but doesn't have\n+\t     a user-provided constructor.  So we need to zero-initialize\n+\t     the object and then call the implicitly defined ctor.\n+\t     Implement this by sticking the zero-initialization inside\n+\t     the TARGET_EXPR for the constructor call;\n+\t     cp_gimplify_init_expr will know how to handle it.  */\n+\t  tree init = build_zero_init (type, NULL_TREE,\n+\t\t\t\t       /*static_storage_p=*/false);\n+\t  tree ctor = build_special_member_call\n+\t    (NULL_TREE, complete_ctor_identifier,\n+\t     NULL_TREE, type, LOOKUP_NORMAL, tf_warning_or_error);\n+\n+\t  ctor = build_cplus_new (type, ctor);\n+\t  init = build2 (INIT_EXPR, void_type_node,\n+\t\t\t TARGET_EXPR_SLOT (ctor), init);\n+\t  init = build2 (COMPOUND_EXPR, void_type_node, init,\n+\t\t\t TARGET_EXPR_INITIAL (ctor));\n+\t  TARGET_EXPR_INITIAL (ctor) = init;\n+\t  return ctor;\n+\t}\n       else if (TREE_CODE (type) != UNION_TYPE)\n \t{\n-\t  tree field, init;\n+\t  tree field;\n \t  VEC(constructor_elt,gc) *v = NULL;\n-\t  bool call_ctor = !have_ctor && TYPE_NEEDS_CONSTRUCTING (type);\n \n \t  /* Iterate over the fields, building initializations.  */\n \t  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n@@ -335,35 +354,14 @@ build_value_init_1 (tree type, bool have_ctor)\n \t\t corresponding to base classes as well.  Thus, iterating\n \t\t over TYPE_FIELDs will result in correct initialization of\n \t\t all of the subobjects.  */\n-\t      value = build_value_init_1 (ftype, have_ctor || call_ctor);\n+\t      value = build_value_init (ftype);\n \n \t      if (value)\n \t\tCONSTRUCTOR_APPEND_ELT(v, field, value);\n \t    }\n \n \t  /* Build a constructor to contain the zero- initializations.  */\n-\t  init = build_constructor (type, v);\n-\t  if (call_ctor)\n-\t    {\n-\t      /* This is a class that needs constructing, but doesn't have\n-\t\t a user-defined constructor.  So we need to zero-initialize\n-\t\t the object and then call the implicitly defined ctor.\n-\t\t Implement this by sticking the zero-initialization inside\n-\t\t the TARGET_EXPR for the constructor call;\n-\t\t cp_gimplify_init_expr will know how to handle it.  */\n-\t      tree ctor = build_special_member_call\n-\t\t(NULL_TREE, complete_ctor_identifier,\n-\t\t NULL_TREE, type, LOOKUP_NORMAL, tf_warning_or_error);\n-\n-\t      ctor = build_cplus_new (type, ctor);\n-\t      init = build2 (INIT_EXPR, void_type_node,\n-\t\t\t     TARGET_EXPR_SLOT (ctor), init);\n-\t      init = build2 (COMPOUND_EXPR, void_type_node, init,\n-\t\t\t     TARGET_EXPR_INITIAL (ctor));\n-\t      TARGET_EXPR_INITIAL (ctor) = init;\n-\t      return ctor;\n-\t    }\n-\t  return init;\n+\t  return build_constructor (type, v);\n \t}\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n@@ -395,7 +393,7 @@ build_value_init_1 (tree type, bool have_ctor)\n \t    ce->index = build2 (RANGE_EXPR, sizetype, size_zero_node,\n \t\t\t\tmax_index);\n \n-\t  ce->value = build_value_init_1 (TREE_TYPE (type), have_ctor);\n+\t  ce->value = build_value_init (TREE_TYPE (type));\n \n \t  /* The gimplifier can't deal with a RANGE_EXPR of TARGET_EXPRs.  */\n \t  gcc_assert (TREE_CODE (ce->value) != TARGET_EXPR\n@@ -409,15 +407,6 @@ build_value_init_1 (tree type, bool have_ctor)\n   return build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n }\n \n-/* Return a suitable initializer for value-initializing an object of type\n-   TYPE, as described in [dcl.init].  */\n-\n-tree\n-build_value_init (tree type)\n-{\n-  return build_value_init_1 (type, false);\n-}\n-\n /* Initialize MEMBER, a FIELD_DECL, with INIT, a TREE_LIST of\n    arguments.  If TREE_LIST is void_type_node, an empty initializer\n    list was given; if NULL_TREE no initializer was given.  */"}, {"sha": "8156ee1ef8e463e0f1d32f29ee20bda43b55203a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f540f069535891aff80eab68f58ac1d4691c2c2", "patch": "@@ -8,6 +8,9 @@\n \n 2008-12-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/38232\n+\t* g++.dg/init/value5.C: New test.\n+\n \tPR c++/38256\n \t* g++.dg/cpp0x/auto11.C: New test.\n "}, {"sha": "d705f87b68ec2d9b72199e817ee2c8e409681a3b", "filename": "gcc/testsuite/g++.dg/init/value5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f540f069535891aff80eab68f58ac1d4691c2c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue5.C?ref=8f540f069535891aff80eab68f58ac1d4691c2c2", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/38232\n+\n+class base {\n+ public:\n+  base();\n+  virtual ~base();\n+\n+ private:\n+  int& int_ref;  // initialized by base ctor, not visible here\n+};\n+\n+class derived : public base {\n+};\n+\n+base *make_derived() {\n+  return new derived();\n+}"}]}