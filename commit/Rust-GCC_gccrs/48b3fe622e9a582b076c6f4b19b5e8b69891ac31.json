{"sha": "48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "node_id": "C_kwDOANBUbNoAKDQ4YjNmZTYyMmU5YTU4MmIwNzZjNmY0YjE5YjVlOGI2OTg5MWFjMzE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-23T09:05:13Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-23T13:36:11Z"}, "message": "macros: Add optional builtin transcribers to MacroRulesDefinition", "tree": {"sha": "f7a3fd3afb0c2e2b2678d80dcd742da23c1b8f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7a3fd3afb0c2e2b2678d80dcd742da23c1b8f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b46175fb8f807b4a07918001f0490d0f3fc0ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b46175fb8f807b4a07918001f0490d0f3fc0ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b46175fb8f807b4a07918001f0490d0f3fc0ba5"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "9f8f19c61c59bef34c1f101d155f057bb230b067", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "patch": "@@ -361,9 +361,26 @@ class MacroRulesDefinition : public MacroItem\n   DelimType delim_type;\n   // MacroRules rules;\n   std::vector<MacroRule> rules; // inlined form\n-\n   Location locus;\n \n+  std::function<ASTFragment (Location, MacroInvocData &)>\n+    associated_transcriber;\n+  // Since we can't compare std::functions, we need to use an extra boolean\n+  bool is_builtin_rule;\n+\n+  /**\n+   * Default function to use as an associated transcriber. This function should\n+   * never be called, hence the gcc_unreachable().\n+   * If this function is used, then the macro is not builtin and the compiler\n+   * should make use of the actual rules. If the macro is builtin, then another\n+   * associated transcriber should be used\n+   */\n+  static ASTFragment dummy_builtin (Location, MacroInvocData &)\n+  {\n+    gcc_unreachable ();\n+    return ASTFragment::create_empty ();\n+  }\n+\n   /* NOTE: in rustc, macro definitions are considered (and parsed as) a type\n    * of macro, whereas here they are considered part of the language itself.\n    * I am not aware of the implications of this decision. The rustc spec does\n@@ -377,7 +394,17 @@ class MacroRulesDefinition : public MacroItem\n \t\t\tstd::vector<MacroRule> rules,\n \t\t\tstd::vector<Attribute> outer_attrs, Location locus)\n     : outer_attrs (std::move (outer_attrs)), rule_name (std::move (rule_name)),\n-      delim_type (delim_type), rules (std::move (rules)), locus (locus)\n+      delim_type (delim_type), rules (std::move (rules)), locus (locus),\n+      associated_transcriber (dummy_builtin), is_builtin_rule (false)\n+  {}\n+\n+  MacroRulesDefinition (Identifier builtin_name, DelimType delim_type,\n+\t\t\tstd::function<ASTFragment (Location, MacroInvocData &)>\n+\t\t\t  associated_transcriber)\n+    : outer_attrs (std::vector<Attribute> ()), rule_name (builtin_name),\n+      delim_type (delim_type), rules (std::vector<MacroRule> ()),\n+      locus (Location ()), associated_transcriber (associated_transcriber),\n+      is_builtin_rule (true)\n   {}\n \n   void accept_vis (ASTVisitor &vis) override;\n@@ -400,6 +427,20 @@ class MacroRulesDefinition : public MacroItem\n   std::vector<MacroRule> &get_rules () { return rules; }\n   const std::vector<MacroRule> &get_rules () const { return rules; }\n \n+  bool is_builtin () const { return is_builtin_rule; }\n+  const std::function<ASTFragment (Location, MacroInvocData &)> &\n+  get_builtin_transcriber () const\n+  {\n+    rust_assert (is_builtin ());\n+    return associated_transcriber;\n+  }\n+  void set_builtin_transcriber (\n+    std::function<ASTFragment (Location, MacroInvocData &)> transcriber)\n+  {\n+    associated_transcriber = transcriber;\n+    is_builtin_rule = true;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "7552e82a1c5429c3d384a6c84121e1486b764e2e", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "patch": "@@ -3194,8 +3194,14 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n   bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n   rust_assert (ok);\n \n-  auto fragment\n-    = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, false);\n+  auto fragment = AST::ASTFragment::create_empty ();\n+\n+  if (rules_def->is_builtin ())\n+    fragment\n+      = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n+  else\n+    fragment\n+      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, false);\n \n   // lets attach this fragment to the invocation\n   invoc.set_fragment (std::move (fragment));\n@@ -3229,8 +3235,14 @@ MacroExpander::expand_invoc_semi (AST::MacroInvocationSemi &invoc)\n   bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n   rust_assert (ok);\n \n-  auto fragment\n-    = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, true);\n+  auto fragment = AST::ASTFragment::create_empty ();\n+\n+  if (rules_def->is_builtin ())\n+    fragment\n+      = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n+  else\n+    fragment\n+      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, true);\n \n   // lets attach this fragment to the invocation\n   invoc.set_fragment (std::move (fragment));"}, {"sha": "1c0e8fcb9ca814481a0fec860c77a1e10ce7376b", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3fe622e9a582b076c6f4b19b5e8b69891ac31/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "patch": "@@ -19,6 +19,7 @@\n #include \"rust-hir-map.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-macro-builtins.h\"\n \n namespace Rust {\n namespace Analysis {\n@@ -741,6 +742,16 @@ Mappings::iterate_trait_items (\n void\n Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n {\n+  static std::map<std::string, std::function<AST::ASTFragment (\n+\t\t\t\t Location, AST::MacroInvocData &)>>\n+    builtin_macros = {\n+      {\"assert\", MacroBuiltin::assert},\n+    };\n+\n+  auto builtin = builtin_macros.find (macro->get_rule_name ());\n+  if (builtin != builtin_macros.end ())\n+    macro->set_builtin_transcriber (builtin->second);\n+\n   auto it = macroMappings.find (macro->get_node_id ());\n   rust_assert (it == macroMappings.end ());\n "}]}