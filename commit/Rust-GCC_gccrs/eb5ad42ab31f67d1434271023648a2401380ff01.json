{"sha": "eb5ad42ab31f67d1434271023648a2401380ff01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1YWQ0MmFiMzFmNjdkMTQzNDI3MTAyMzY0OGEyNDAxMzgwZmYwMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-13T04:03:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-13T04:03:24Z"}, "message": "(record_jump_cond): At end, make missing equivalences\nfirst, and then merge them.\n\nFrom-SVN: r5769", "tree": {"sha": "75069734e14011aa5b613b0c7c1fb058e9dec004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75069734e14011aa5b613b0c7c1fb058e9dec004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb5ad42ab31f67d1434271023648a2401380ff01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5ad42ab31f67d1434271023648a2401380ff01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5ad42ab31f67d1434271023648a2401380ff01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5ad42ab31f67d1434271023648a2401380ff01/comments", "author": null, "committer": null, "parents": [{"sha": "c9646177c95d6d64a52d1d393d741e0f127574ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9646177c95d6d64a52d1d393d741e0f127574ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9646177c95d6d64a52d1d393d741e0f127574ee"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "2f378763500ec26fbb6e07c7aa35a3f9e2f52c81", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ad42ab31f67d1434271023648a2401380ff01/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ad42ab31f67d1434271023648a2401380ff01/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=eb5ad42ab31f67d1434271023648a2401380ff01", "patch": "@@ -5670,42 +5670,37 @@ record_jump_cond (code, mode, op0, op1, reversed_nonequality)\n       return;\n     }\n \n-  /* If both are equivalent, merge the two classes.  Save this class for\n-     `cse_set_around_loop'.  */\n-  if (op0_elt && op1_elt)\n-    {\n-      merge_equiv_classes (op0_elt, op1_elt);\n-      last_jump_equiv_class = op0_elt;\n-    }\n+  /* If either side is still missing an equivalence, make it now,\n+     then merge the equivalences.  */\n \n-  /* For whichever side doesn't have an equivalence, make one.  */\n   if (op0_elt == 0)\n     {\n-      if (insert_regs (op0, op1_elt, 0))\n+      if (insert_regs (op0, NULL_PTR, 0))\n \t{\n \t  rehash_using_reg (op0);\n \t  op0_hash_code = HASH (op0, mode);\n \t}\n \n-      op0_elt = insert (op0, op1_elt, op0_hash_code, mode);\n+      op0_elt = insert (op0, NULL_PTR, op0_hash_code, mode);\n       op0_elt->in_memory = op0_in_memory;\n       op0_elt->in_struct = op0_in_struct;\n-      last_jump_equiv_class = op0_elt;\n     }\n \n   if (op1_elt == 0)\n     {\n-      if (insert_regs (op1, op0_elt, 0))\n+      if (insert_regs (op1, NULL_PTR, 0))\n \t{\n \t  rehash_using_reg (op1);\n \t  op1_hash_code = HASH (op1, mode);\n \t}\n \n-      op1_elt = insert (op1, op0_elt, op1_hash_code, mode);\n+      op1_elt = insert (op1, NULL_PTR, op1_hash_code, mode);\n       op1_elt->in_memory = op1_in_memory;\n       op1_elt->in_struct = op1_in_struct;\n-      last_jump_equiv_class = op1_elt;\n     }\n+\n+  merge_equiv_classes (op0_elt, op1_elt);\n+  last_jump_equiv_class = op0_elt;\n }\n \f\n /* CSE processing for one instruction."}]}