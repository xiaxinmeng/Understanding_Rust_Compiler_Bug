{"sha": "383252a7242000c2438883cf1b4bb70eeac4dac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzMjUyYTcyNDIwMDBjMjQzODg4M2NmMWI0YmI3MGVlYWM0ZGFjOQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-04-12T02:59:43Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-04-12T02:59:43Z"}, "message": "i386.md: Apply trunc_int_for_mode() to GEN_INT operands that make it to RTL.\n\n* config/i386/i386.md: Apply trunc_int_for_mode() to GEN_INT\noperands that make it to RTL.\n\nFrom-SVN: r41279", "tree": {"sha": "5faf7c3a70d2e48a3299769b11c8e81f84d186b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5faf7c3a70d2e48a3299769b11c8e81f84d186b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/383252a7242000c2438883cf1b4bb70eeac4dac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383252a7242000c2438883cf1b4bb70eeac4dac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383252a7242000c2438883cf1b4bb70eeac4dac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383252a7242000c2438883cf1b4bb70eeac4dac9/comments", "author": null, "committer": null, "parents": [{"sha": "125404c5f30a127e57a78dcfe173541507a8fd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125404c5f30a127e57a78dcfe173541507a8fd96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125404c5f30a127e57a78dcfe173541507a8fd96"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "01f0943b08c7378318dc71ff6f28968b37542a36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/383252a7242000c2438883cf1b4bb70eeac4dac9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/383252a7242000c2438883cf1b4bb70eeac4dac9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=383252a7242000c2438883cf1b4bb70eeac4dac9", "patch": "@@ -1,3 +1,8 @@\n+2001-04-11  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/i386/i386.md: Apply trunc_int_for_mode() to GEN_INT\n+\toperands that make it to RTL.\n+\n 2001-04-11  Stan Shebs  <shebs@apple.com>\n \n \tAdd Darwin (Mac OS X kernel) native support."}, {"sha": "a243109947e2ebf4e9f6aab9067d696b8dbbfe0c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/383252a7242000c2438883cf1b4bb70eeac4dac9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/383252a7242000c2438883cf1b4bb70eeac4dac9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=383252a7242000c2438883cf1b4bb70eeac4dac9", "patch": "@@ -8113,7 +8113,8 @@\n   mask  = ((HOST_WIDE_INT)1 << (pos + len)) - 1;\n   mask &= ~(((HOST_WIDE_INT)1 << pos) - 1);\n \n-  operands[3] = gen_rtx_AND (mode, operands[0], GEN_INT (mask));\n+  operands[3] = gen_rtx_AND (mode, operands[0],\n+\t\t\t     GEN_INT (trunc_int_for_mode (mask, mode)));\n }\")\n \n ;; %%% This used to optimize known byte-wide and operations to memory,\n@@ -9335,7 +9336,7 @@\n   \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[1] = GEN_INT (0x80000000);\n+  \"operands[1] = GEN_INT (trunc_int_for_mode (0x80000000, SImode));\n    operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n \n (define_split\n@@ -9354,7 +9355,7 @@\n     size = 10;\n   operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n   operands[0] = adj_offsettable_operand (operands[0], size - 1);\n-  operands[1] = GEN_INT (0x80);\n+  operands[1] = GEN_INT (trunc_int_for_mode (0x80, QImode));\n }\")\n \n (define_expand \"negdf2\"\n@@ -9390,7 +9391,7 @@\n   \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 3) (xor:SI (match_dup 3) (match_dup 4)))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[4] = GEN_INT (0x80000000);\n+  \"operands[4] = GEN_INT (trunc_int_for_mode (0x80000000, SImode));\n    split_di (operands+0, 1, operands+2, operands+3);\")\n \n (define_expand \"negxf2\"\n@@ -9651,7 +9652,7 @@\n   \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[1] = GEN_INT (~0x80000000);\n+  \"operands[1] = GEN_INT (trunc_int_for_mode (~0x80000000, SImode));\n    operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n \n (define_split\n@@ -9670,7 +9671,7 @@\n     size = 10;\n   operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n   operands[0] = adj_offsettable_operand (operands[0], size - 1);\n-  operands[1] = GEN_INT (~0x80);\n+  operands[1] = GEN_INT (trunc_int_for_mode (~0x80, QImode));\n }\")\n \n (define_expand \"absdf2\"\n@@ -9773,7 +9774,7 @@\n   \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 3) (and:SI (match_dup 3) (match_dup 4)))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[4] = GEN_INT (~0x80000000);\n+  \"operands[4] = GEN_INT (trunc_int_for_mode (~0x80000000, SImode));\n    split_di (operands+0, 1, operands+2, operands+3);\")\n \n (define_expand \"absxf2\"\n@@ -9817,7 +9818,7 @@\n   \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[1] = GEN_INT (~0x8000);\n+  \"operands[1] = GEN_INT (trunc_int_for_mode (~0x8000, SImode));\n    operands[0] = gen_rtx_REG (SImode, true_regnum (operands[0]) + 2);\")\n \n (define_insn \"*abstf2_if\"\n@@ -9843,7 +9844,7 @@\n   \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n \t      (clobber (reg:CC 17))])]\n-  \"operands[1] = GEN_INT (~0x8000);\n+  \"operands[1] = GEN_INT (trunc_int_for_mode (~0x8000, SImode));\n    operands[0] = gen_rtx_REG (SImode, true_regnum (operands[0]) + 2);\")\n \n (define_insn \"*abssf2_1\"\n@@ -10225,7 +10226,8 @@\n   [(set (match_dup 0)\n \t(mult:DI (match_dup 1)\n \t\t (match_dup 2)))]\n-  \"operands[2] = GEN_INT (1 << INTVAL (operands[2]));\")\n+  \"operands[2] = GEN_INT (trunc_int_for_mode (1 << INTVAL (operands[2]),\n+\t\t\t\t\t      DImode));\")\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -10436,7 +10438,8 @@\n   rtx pat;\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = gen_lowpart (Pmode, operands[1]);\n-  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n+  operands[2] = GEN_INT (trunc_int_for_mode (1 << INTVAL (operands[2]),\n+\t\t\t\t\t     Pmode));\n   pat = gen_rtx_MULT (Pmode, operands[1], operands[2]);\n   if (Pmode != SImode)\n     pat = gen_rtx_SUBREG (SImode, pat, 0);\n@@ -10496,7 +10499,8 @@\n   \"\n {\n   operands[1] = gen_lowpart (Pmode, operands[1]);\n-  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n+  operands[2] = GEN_INT (trunc_int_for_mode (1 << INTVAL (operands[2]),\n+\t\t\t\t\t     Pmode));\n }\")\n \n ;; This pattern can't accept a variable shift count, since shifts by\n@@ -16142,7 +16146,9 @@\n \t      (set (match_dup 0)\n \t\t   (and:SI (match_dup 1) (match_dup 2)))])]\n   \"operands[2]\n-     = GEN_INT (INTVAL (operands[2]) & GET_MODE_MASK (GET_MODE (operands[0])));\n+     = GEN_INT (trunc_int_for_mode (INTVAL (operands[2])\n+\t\t\t\t    & GET_MODE_MASK (GET_MODE (operands[0])),\n+\t\t\t\t    SImode));\n    operands[0] = gen_lowpart (SImode, operands[0]);\n    operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n@@ -16160,7 +16166,9 @@\n \t(compare:CCNO (and:SI (match_dup 0) (match_dup 1))\n \t\t      (const_int 0)))]\n   \"operands[1]\n-     = GEN_INT (INTVAL (operands[1]) & GET_MODE_MASK (GET_MODE (operands[0])));\n+     = GEN_INT (trunc_int_for_mode (INTVAL (operands[1])\n+\t\t\t\t    & GET_MODE_MASK (GET_MODE (operands[0])),\n+\t\t\t\t    SImode));\n    operands[0] = gen_lowpart (SImode, operands[0]);\")\n \n (define_split"}]}