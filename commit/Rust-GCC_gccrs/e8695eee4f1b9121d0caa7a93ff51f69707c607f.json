{"sha": "e8695eee4f1b9121d0caa7a93ff51f69707c607f", "node_id": "C_kwDOANBUbNoAKGU4Njk1ZWVlNGYxYjkxMjFkMGNhYTdhOTNmZjUxZjY5NzA3YzYwN2Y", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-17T17:25:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-17T17:25:01Z"}, "message": "Add missing implict monomorphized types into the context", "tree": {"sha": "dd7a488eae409a4de7886a5b8cb35bbecd17df66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd7a488eae409a4de7886a5b8cb35bbecd17df66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8695eee4f1b9121d0caa7a93ff51f69707c607f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8695eee4f1b9121d0caa7a93ff51f69707c607f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8695eee4f1b9121d0caa7a93ff51f69707c607f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8695eee4f1b9121d0caa7a93ff51f69707c607f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649e2ec5682ed8007987f2acb4899892a81cc18f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e2ec5682ed8007987f2acb4899892a81cc18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e2ec5682ed8007987f2acb4899892a81cc18f"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "f0e9bc338254227701a39ee6c75d0abe91535ff7", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8695eee4f1b9121d0caa7a93ff51f69707c607f/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8695eee4f1b9121d0caa7a93ff51f69707c607f/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=e8695eee4f1b9121d0caa7a93ff51f69707c607f", "patch": "@@ -86,6 +86,7 @@ GRS_OBJS = \\\n     rust/rust-hir-const-fold.o \\\n     rust/rust-hir-type-check-type.o \\\n     rust/rust-hir-type-check-struct.o \\\n+    rust/rust-substitution-mapper.o \\\n     rust/rust-lint-marklive.o \\\n     rust/rust-hir-type-check-path.o \\\n     rust/rust-compile-intrinsic.o \\"}, {"sha": "a439416b698df6cea1f7d3ace58002601d151341", "filename": "gcc/rust/typecheck/rust-substitution-mapper.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8695eee4f1b9121d0caa7a93ff51f69707c607f/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8695eee4f1b9121d0caa7a93ff51f69707c607f/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.cc?ref=e8695eee4f1b9121d0caa7a93ff51f69707c607f", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2020-2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-substitution-mapper.h\"\n+#include \"rust-hir-type-check.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+TyTy::BaseType *\n+SubstMapperInternal::Resolve (TyTy::BaseType *base,\n+\t\t\t      TyTy::SubstitutionArgumentMappings &mappings)\n+{\n+  SubstMapperInternal mapper (base->get_ref (), mappings);\n+  base->accept_vis (mapper);\n+  rust_assert (mapper.resolved != nullptr);\n+\n+  // insert these new implict types into the context\n+  bool is_fn = mapper.resolved->get_kind () == TyTy::TypeKind::FNDEF;\n+  bool is_adt = mapper.resolved->get_kind () == TyTy::TypeKind::ADT;\n+  bool is_param = mapper.resolved->get_kind () == TyTy::TypeKind::PARAM;\n+  if (!is_fn && !is_adt && !is_param)\n+    {\n+      auto context = TypeCheckContext::get ();\n+      context->insert_type (\n+\tAnalysis::NodeMapping (0, 0, mapper.resolved->get_ty_ref (), 0),\n+\tmapper.resolved);\n+    }\n+\n+  return mapper.resolved;\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "0932038d8c2554f8d9fcfeff6822b7ed36c1b65a", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8695eee4f1b9121d0caa7a93ff51f69707c607f/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8695eee4f1b9121d0caa7a93ff51f69707c607f/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=e8695eee4f1b9121d0caa7a93ff51f69707c607f", "patch": "@@ -154,13 +154,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n {\n public:\n   static TyTy::BaseType *Resolve (TyTy::BaseType *base,\n-\t\t\t\t  TyTy::SubstitutionArgumentMappings &mappings)\n-  {\n-    SubstMapperInternal mapper (base->get_ref (), mappings);\n-    base->accept_vis (mapper);\n-    rust_assert (mapper.resolved != nullptr);\n-    return mapper.resolved;\n-  }\n+\t\t\t\t  TyTy::SubstitutionArgumentMappings &mappings);\n \n   void visit (TyTy::FnType &type) override\n   {"}]}