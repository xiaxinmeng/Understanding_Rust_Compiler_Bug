{"sha": "58a29af8ef14bfa2d595deed5144891bff821eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhMjlhZjhlZjE0YmZhMmQ1OTVkZWVkNTE0NDg5MWJmZjgyMWVmZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-14T18:22:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-14T18:22:31Z"}, "message": "c++: \"'decltype_type' not supported\" in diagnostic [PR85278]\n\nThis fixes a garbled concepts diagnostic by moving the handling of DECLTYPE_TYPE\nfrom pp_cxx_type_specifier_seq to cxx_pretty_printer::simple_type_specifier, a\nmove which also seems to be more consistent with the language grammar.\n\nThis patch also fixes pretty printing of rvalue reference types via\ncxx_pretty_printer::type_id, which eventually calls pp_c_pointer which currently\ndoesn't distinguish between lvalue and rvalue references.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/85278\n\t* c-pretty-print.c (pp_c_pointer) <case REFERENCE_TYPE>: Print a double\n\tampersand if it's an rvalue reference type.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/85278\n\t* cxx-pretty-print.c (cxx_pretty_printer:simple_type_specifier)\n\t<case DECLTYPE_TYPE>: Handle DECLTYPE_TYPE here instead of ...\n\t(pp_cxx_type_specifier_seq) <case DECLTYPE_TYPE>: ... here.\n\t(cxx_pretty_printer::direct_abstract_declarator) <case DECLTYPE_TYPE>:\n\tNew no-op case.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/85278\n\t* g++.dg/concepts/diagnostic9.C: New test.", "tree": {"sha": "9c328539d5e9ef52e34dc7aebecda7faad0d4c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c328539d5e9ef52e34dc7aebecda7faad0d4c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a29af8ef14bfa2d595deed5144891bff821eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a29af8ef14bfa2d595deed5144891bff821eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a29af8ef14bfa2d595deed5144891bff821eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a29af8ef14bfa2d595deed5144891bff821eff/comments", "author": null, "committer": null, "parents": [{"sha": "9707b593f88041e74e5cf5640ec64fea13a0387c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9707b593f88041e74e5cf5640ec64fea13a0387c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9707b593f88041e74e5cf5640ec64fea13a0387c"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "66f4873c3c26a6f2620a697c0ff241587cd868e2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=58a29af8ef14bfa2d595deed5144891bff821eff", "patch": "@@ -1,3 +1,9 @@\n+2020-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/85278\n+\t* c-pretty-print.c (pp_c_pointer) <case REFERENCE_TYPE>: Print a double\n+\tampersand if it's an rvalue reference type.\n+\n 2020-04-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/92326"}, {"sha": "32f30f2d452692a610269b835e86d71f4e29273e", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=58a29af8ef14bfa2d595deed5144891bff821eff", "patch": "@@ -278,7 +278,11 @@ pp_c_pointer (c_pretty_printer *pp, tree t)\n       if (TREE_CODE (t) == POINTER_TYPE)\n \tpp_c_star (pp);\n       else\n-\tpp_c_ampersand (pp);\n+\t{\n+\t  pp_c_ampersand (pp);\n+\t  if (TYPE_REF_IS_RVALUE (t))\n+\t    pp_c_ampersand (pp);\n+\t}\n       pp_c_type_qualifier_list (pp, t);\n       break;\n "}, {"sha": "e34ef9303a4ed98f7e06ff62ac08d023d229e41c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58a29af8ef14bfa2d595deed5144891bff821eff", "patch": "@@ -1,5 +1,12 @@\n 2020-04-14  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/85278\n+\t* cxx-pretty-print.c (cxx_pretty_printer:simple_type_specifier)\n+\t<case DECLTYPE_TYPE>: Handle DECLTYPE_TYPE here instead of ...\n+\t(pp_cxx_type_specifier_seq) <case DECLTYPE_TYPE>: ... here.\n+\t(cxx_pretty_printer::direct_abstract_declarator) <case DECLTYPE_TYPE>:\n+\tNew no-op case.\n+\n \tPR c++/94034\n \t* constexpr.c (replace_result_decl_data): New struct.\n \t(replace_result_decl_data_r): New function."}, {"sha": "a26291eee0fed0c1e28477291cdc6e83bc8888a3", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=58a29af8ef14bfa2d595deed5144891bff821eff", "patch": "@@ -1325,6 +1325,7 @@ cxx_pretty_printer::declaration_specifiers (tree t)\n /* simple-type-specifier:\n       ::(opt) nested-name-specifier(opt) type-name\n       ::(opt) nested-name-specifier(opt) template(opt) template-id\n+      decltype-specifier\n       char\n       wchar_t\n       bool\n@@ -1363,6 +1364,13 @@ cxx_pretty_printer::simple_type_specifier (tree t)\n       pp_cxx_unqualified_id (this, TYPENAME_TYPE_FULLNAME (t));\n       break;\n \n+    case DECLTYPE_TYPE:\n+      pp_cxx_ws_string (this, \"decltype\");\n+      pp_cxx_left_paren (this);\n+      this->expression (DECLTYPE_TYPE_EXPR (t));\n+      pp_cxx_right_paren (this);\n+      break;\n+\n     default:\n       c_pretty_printer::simple_type_specifier (t);\n       break;\n@@ -1389,6 +1397,7 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_TEMPLATE_PARM:\n     case TYPE_DECL:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n+    case DECLTYPE_TYPE:\n       pp_cxx_cv_qualifier_seq (pp, t);\n       pp->simple_type_specifier (t);\n       break;\n@@ -1399,13 +1408,6 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n       pp_cxx_nested_name_specifier (pp, TYPE_METHOD_BASETYPE (t));\n       break;\n \n-    case DECLTYPE_TYPE:\n-      pp_cxx_ws_string (pp, \"decltype\");\n-      pp_cxx_left_paren (pp);\n-      pp->expression (DECLTYPE_TYPE_EXPR (t));\n-      pp_cxx_right_paren (pp);\n-      break;\n-\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (t))\n \t{\n@@ -1799,6 +1801,7 @@ cxx_pretty_printer::direct_abstract_declarator (tree t)\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n     case UNBOUND_CLASS_TEMPLATE:\n+    case DECLTYPE_TYPE:\n       break;\n \n     default:"}, {"sha": "cb4b23c0b76aeb8bf60e038ee80b1c0709e49165", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58a29af8ef14bfa2d595deed5144891bff821eff", "patch": "@@ -1,5 +1,8 @@\n 2020-04-14  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/85278\n+\t* g++.dg/concepts/diagnostic9.C: New test.\n+\n \tPR c++/94034\n \t* g++.dg/cpp0x/constexpr-empty15.C: New test.\n \t* g++.dg/cpp1y/constexpr-nsdmi6a.C: New test."}, {"sha": "414b924f11571ce19d62a114d6ec82753ddb02d3", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a29af8ef14bfa2d595deed5144891bff821eff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic9.C?ref=58a29af8ef14bfa2d595deed5144891bff821eff", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/85278\n+// { dg-do compile { target concepts } }\n+\n+template<typename T>\n+void f2(T a)\n+  requires requires (const decltype(a) &&x) { -x; }\n+{ }\n+\n+int main() {\n+  f2<void*>(nullptr); // { dg-error \"use of function .*const decltype\\\\(f2::a\\\\)&&\" }\n+}"}]}