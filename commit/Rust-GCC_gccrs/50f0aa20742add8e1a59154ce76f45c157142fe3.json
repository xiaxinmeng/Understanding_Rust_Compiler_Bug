{"sha": "50f0aa20742add8e1a59154ce76f45c157142fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmMGFhMjA3NDJhZGQ4ZTFhNTkxNTRjZTc2ZjQ1YzE1NzE0MmZlMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-07T14:19:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-07T14:19:14Z"}, "message": "re PR tree-optimization/61034 (Optimizing takes too many passes)\n\n2014-05-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61034\n\t* tree-ssa-alias.c (call_may_clobber_ref_p_1): Export.\n\t(maybe_skip_until): Use translate to take into account\n\tlattices when trying to do disambiguations.\n\t(get_continuation_for_phi_1): Likewise.\n\t(get_continuation_for_phi): Adjust for added translate\n\targuments.\n\t(walk_non_aliased_vuses): Likewise.\n\t* tree-ssa-alias.h (get_continuation_for_phi): Adjust\n\tprototype.\n\t(walk_non_aliased_vuses): Likewise.\n\t(call_may_clobber_ref_p_1): Declare.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Also\n\tdisambiguate against calls.  Stop early if we are\n\tonly supposed to disambiguate.\n\t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n\n\t* g++.dg/tree-ssa/pr61034.C: New testcase.\n\nFrom-SVN: r210160", "tree": {"sha": "a056046546fd39e638f07831fd0af58c4f918b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a056046546fd39e638f07831fd0af58c4f918b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f0aa20742add8e1a59154ce76f45c157142fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f0aa20742add8e1a59154ce76f45c157142fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f0aa20742add8e1a59154ce76f45c157142fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f0aa20742add8e1a59154ce76f45c157142fe3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2588652e1742e1cf473917d59505632b9ce47ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2588652e1742e1cf473917d59505632b9ce47ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2588652e1742e1cf473917d59505632b9ce47ffa"}], "stats": {"total": 163, "additions": 145, "deletions": 18}, "files": [{"sha": "afac89bf1d73af0cc8247e52f07939566d8d4ce1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -1,3 +1,22 @@\n+2014-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61034\n+\t* tree-ssa-alias.c (call_may_clobber_ref_p_1): Export.\n+\t(maybe_skip_until): Use translate to take into account\n+\tlattices when trying to do disambiguations.\n+\t(get_continuation_for_phi_1): Likewise.\n+\t(get_continuation_for_phi): Adjust for added translate\n+\targuments.\n+\t(walk_non_aliased_vuses): Likewise.\n+\t* tree-ssa-alias.h (get_continuation_for_phi): Adjust\n+\tprototype.\n+\t(walk_non_aliased_vuses): Likewise.\n+\t(call_may_clobber_ref_p_1): Declare.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Also\n+\tdisambiguate against calls.  Stop early if we are\n+\tonly supposed to disambiguate.\n+\t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n+\n 2014-05-07  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.c (epiphany_handle_interrupt_attribute):"}, {"sha": "723967fa3bbf63e762aabd0a65a1b4dad2c34979", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -1,3 +1,8 @@\n+2014-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61034\n+\t* g++.dg/tree-ssa/pr61034.C: New testcase.\n+\n 2014-05-07  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* gcc.target/epiphany/isr-arg.c: New file."}, {"sha": "fe09df31209d030b272d1a832f9dcc0bc21d2530", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr61034.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -fdump-tree-fre2\" }\n+\n+#define assume(x) if(!(x))__builtin_unreachable()\n+\n+inline void* operator new(__SIZE_TYPE__ n){ return __builtin_malloc(n); }\n+inline void operator delete(void *p) { __builtin_free(p); }\n+struct O {\n+    double num;\n+    int count;\n+};\n+struct I {\n+    O *o;\n+    I(double d = 0) : o (new O) { o->num = d; o->count = 1; }\n+    I(I const&i) { assume(i.o->count >= 1); o = i.o; ++o->count; }\n+    I& operator=(I const&i) { I(i).swap(*this); return *this; }\n+    ~I() { if (--o->count == 0) delete o; }\n+    void swap(I& i) { O *tmp = o; o = i.o; i.o = tmp; }\n+    I& operator*= (I const&i) {\n+\tif (o->count > 1) *this = I(o->num);\n+\to->num *= i.o->num;\n+\treturn *this;\n+    }\n+    I& operator-= (I const&i) {\n+\tif (o->count > 1) *this = I(o->num);\n+\to->num -= i.o->num;\n+\treturn *this;\n+    }\n+};\n+inline I operator* (I a, I const&b) { return a *= b; }\n+inline I operator- (I a, I const&b) { return a -= b; }\n+inline bool operator< (I const&a, I const&b) { return a.o->num < b.o->num; }\n+\n+bool f(I a, I b, I c, I d) {\n+    return (a * d - b * c) * (a * b - c * d) < 42;\n+}\n+\n+// We should be able to CSE most references to count and thus remove\n+// a bunch of conditional free()s and unreachable()s.\n+// This works only if everything is inlined into 'f'.\n+\n+// { dg-final { scan-tree-dump-times \";; Function\" 1 \"fre2\" } }\n+// { dg-final { scan-tree-dump-times \"free\" 19 \"fre2\" } }\n+// { dg-final { scan-tree-dump-times \"unreachable\" 11 \"fre2\" } }\n+// { dg-final { cleanup-tree-dump \"fre2\" } }"}, {"sha": "479fa9ce0f012108971836fae6e331b817a95dcd", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -1835,7 +1835,7 @@ ref_maybe_used_by_stmt_p (gimple stmt, tree ref)\n /* If the call in statement CALL may clobber the memory reference REF\n    return true, otherwise return false.  */\n \n-static bool\n+bool\n call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n {\n   tree base;\n@@ -2318,7 +2318,9 @@ stmt_kills_ref_p (gimple stmt, tree ref)\n static bool\n maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \t\t  tree vuse, unsigned int *cnt, bitmap *visited,\n-\t\t  bool abort_on_visited)\n+\t\t  bool abort_on_visited,\n+\t\t  void *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t  void *data)\n {\n   basic_block bb = gimple_bb (phi);\n \n@@ -2338,7 +2340,8 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \t  if (bitmap_bit_p (*visited, SSA_NAME_VERSION (PHI_RESULT (def_stmt))))\n \t    return !abort_on_visited;\n \t  vuse = get_continuation_for_phi (def_stmt, ref, cnt,\n-\t\t\t\t\t   visited, abort_on_visited);\n+\t\t\t\t\t   visited, abort_on_visited,\n+\t\t\t\t\t   translate, data);\n \t  if (!vuse)\n \t    return false;\n \t  continue;\n@@ -2350,7 +2353,13 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \t  /* A clobbering statement or the end of the IL ends it failing.  */\n \t  ++*cnt;\n \t  if (stmt_may_clobber_ref_p_1 (def_stmt, ref))\n-\t    return false;\n+\t    {\n+\t      if (translate\n+\t\t  && (*translate) (ref, vuse, data, true) == NULL)\n+\t\t;\n+\t      else\n+\t\treturn false;\n+\t    }\n \t}\n       /* If we reach a new basic-block see if we already skipped it\n          in a previous walk that ended successfully.  */\n@@ -2372,7 +2381,9 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n static tree\n get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n \t\t\t    ao_ref *ref, unsigned int *cnt,\n-\t\t\t    bitmap *visited, bool abort_on_visited)\n+\t\t\t    bitmap *visited, bool abort_on_visited,\n+\t\t\t    void *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t\t    void *data)\n {\n   gimple def0 = SSA_NAME_DEF_STMT (arg0);\n   gimple def1 = SSA_NAME_DEF_STMT (arg1);\n@@ -2386,15 +2397,15 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n \t\t\t\t  gimple_bb (def1), gimple_bb (def0))))\n     {\n       if (maybe_skip_until (phi, arg0, ref, arg1, cnt,\n-\t\t\t    visited, abort_on_visited))\n+\t\t\t    visited, abort_on_visited, translate, data))\n \treturn arg0;\n     }\n   else if (gimple_nop_p (def1)\n \t   || dominated_by_p (CDI_DOMINATORS,\n \t\t\t      gimple_bb (def0), gimple_bb (def1)))\n     {\n       if (maybe_skip_until (phi, arg1, ref, arg0, cnt,\n-\t\t\t    visited, abort_on_visited))\n+\t\t\t    visited, abort_on_visited, translate, data))\n \treturn arg1;\n     }\n   /* Special case of a diamond:\n@@ -2414,8 +2425,12 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n \t   && common_vuse == gimple_vuse (def1))\n     {\n       *cnt += 2;\n-      if (!stmt_may_clobber_ref_p_1 (def0, ref)\n-\t  && !stmt_may_clobber_ref_p_1 (def1, ref))\n+      if ((!stmt_may_clobber_ref_p_1 (def0, ref)\n+\t   || (translate\n+\t       && (*translate) (ref, arg0, data, true) == NULL))\n+\t  && (!stmt_may_clobber_ref_p_1 (def1, ref)\n+\t      || (translate\n+\t\t  && (*translate) (ref, arg1, data, true) == NULL)))\n \treturn common_vuse;\n     }\n \n@@ -2432,7 +2447,9 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n tree\n get_continuation_for_phi (gimple phi, ao_ref *ref,\n \t\t\t  unsigned int *cnt, bitmap *visited,\n-\t\t\t  bool abort_on_visited)\n+\t\t\t  bool abort_on_visited,\n+\t\t\t  void *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t\t  void *data)\n {\n   unsigned nargs = gimple_phi_num_args (phi);\n \n@@ -2470,7 +2487,8 @@ get_continuation_for_phi (gimple phi, ao_ref *ref,\n \t{\n \t  arg1 = PHI_ARG_DEF (phi, i);\n \t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref,\n-\t\t\t\t\t     cnt, visited, abort_on_visited);\n+\t\t\t\t\t     cnt, visited, abort_on_visited,\n+\t\t\t\t\t     translate, data);\n \t  if (!arg0)\n \t    return NULL_TREE;\n \t}\n@@ -2502,7 +2520,8 @@ get_continuation_for_phi (gimple phi, ao_ref *ref,\n void *\n walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n \t\t\tvoid *(*walker)(ao_ref *, tree, unsigned int, void *),\n-\t\t\tvoid *(*translate)(ao_ref *, tree, void *), void *data)\n+\t\t\tvoid *(*translate)(ao_ref *, tree, void *, bool),\n+\t\t\tvoid *data)\n {\n   bitmap visited = NULL;\n   void *res;\n@@ -2532,15 +2551,15 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n \tbreak;\n       else if (gimple_code (def_stmt) == GIMPLE_PHI)\n \tvuse = get_continuation_for_phi (def_stmt, ref, &cnt,\n-\t\t\t\t\t &visited, translated);\n+\t\t\t\t\t &visited, translated, translate, data);\n       else\n \t{\n \t  cnt++;\n \t  if (stmt_may_clobber_ref_p_1 (def_stmt, ref))\n \t    {\n \t      if (!translate)\n \t\tbreak;\n-\t      res = (*translate) (ref, vuse, data);\n+\t      res = (*translate) (ref, vuse, data, false);\n \t      /* Failed lookup and translation.  */\n \t      if (res == (void *)-1)\n \t\t{"}, {"sha": "c0b472bd3bef9d6dbda99e3920b6cb8edf68f182", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -110,13 +110,17 @@ extern bool stmt_may_clobber_global_p (gimple);\n extern bool stmt_may_clobber_ref_p (gimple, tree);\n extern bool stmt_may_clobber_ref_p_1 (gimple, ao_ref *);\n extern bool call_may_clobber_ref_p (gimple, tree);\n+extern bool call_may_clobber_ref_p_1 (gimple, ao_ref *);\n extern bool stmt_kills_ref_p (gimple, tree);\n extern tree get_continuation_for_phi (gimple, ao_ref *,\n-\t\t\t\t      unsigned int *, bitmap *, bool);\n+\t\t\t\t      unsigned int *, bitmap *, bool,\n+\t\t\t\t      void *(*)(ao_ref *, tree, void *, bool),\n+\t\t\t\t      void *);\n extern void *walk_non_aliased_vuses (ao_ref *, tree,\n \t\t\t\t     void *(*)(ao_ref *, tree,\n \t\t\t\t\t       unsigned int, void *),\n-\t\t\t\t     void *(*)(ao_ref *, tree, void *), void *);\n+\t\t\t\t     void *(*)(ao_ref *, tree, void *, bool),\n+\t\t\t\t     void *);\n extern unsigned int walk_aliased_vdefs (ao_ref *, tree,\n \t\t\t\t\tbool (*)(ao_ref *, tree, void *),\n \t\t\t\t\tvoid *, bitmap *);"}, {"sha": "f634f5efd29e076a18829673407eb683b62ae6de", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -1308,7 +1308,8 @@ translate_vuse_through_block (vec<vn_reference_op_s> operands,\n \t  unsigned int cnt;\n \t  /* Try to find a vuse that dominates this phi node by skipping\n \t     non-clobbering statements.  */\n-\t  vuse = get_continuation_for_phi (phi, &ref, &cnt, &visited, false);\n+\t  vuse = get_continuation_for_phi (phi, &ref, &cnt, &visited, false,\n+\t\t\t\t\t   NULL, NULL);\n \t  if (visited)\n \t    BITMAP_FREE (visited);\n \t}"}, {"sha": "05a5fe8e73f6c7770693200f1e2073ac65959241", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f0aa20742add8e1a59154ce76f45c157142fe3/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=50f0aa20742add8e1a59154ce76f45c157142fe3", "patch": "@@ -1542,7 +1542,8 @@ vn_reference_lookup_or_insert_for_pieces (tree vuse,\n    of VUSE.  */\n \n static void *\n-vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n+vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n+\t\t       bool disambiguate_only)\n {\n   vn_reference_t vr = (vn_reference_t)vr_;\n   gimple def_stmt = SSA_NAME_DEF_STMT (vuse);\n@@ -1580,6 +1581,39 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  lhs_ref_ok = true;\n \t}\n     }\n+  else if (gimple_call_builtin_p (def_stmt, BUILT_IN_NORMAL)\n+\t   && gimple_call_num_args (def_stmt) <= 4)\n+    {\n+      /* For builtin calls valueize its arguments and call the\n+         alias oracle again.  Valueization may improve points-to\n+\t info of pointers and constify size and position arguments.\n+\t Originally this was motivated by PR61034 which has\n+\t conditional calls to free falsely clobbering ref because\n+\t of imprecise points-to info of the argument.  */\n+      tree oldargs[4];\n+      bool valueized_anything;\n+      for (unsigned i = 0; i < gimple_call_num_args (def_stmt); ++i)\n+\t{\n+\t  oldargs[i] = gimple_call_arg (def_stmt, i);\n+\t  if (TREE_CODE (oldargs[i]) == SSA_NAME\n+\t      && VN_INFO (oldargs[i])->valnum != oldargs[i])\n+\t    {\n+\t      gimple_call_set_arg (def_stmt, i, VN_INFO (oldargs[i])->valnum);\n+\t      valueized_anything = true;\n+\t    }\n+\t}\n+      if (valueized_anything)\n+\t{\n+\t  bool res = call_may_clobber_ref_p_1 (def_stmt, ref);\n+\t  for (unsigned i = 0; i < gimple_call_num_args (def_stmt); ++i)\n+\t    gimple_call_set_arg (def_stmt, i, oldargs[i]);\n+\t  if (!res)\n+\t    return NULL;\n+\t}\n+    }\n+\n+  if (disambiguate_only)\n+    return (void *)-1;\n \n   base = ao_ref_base (ref);\n   offset = ref->offset;"}]}