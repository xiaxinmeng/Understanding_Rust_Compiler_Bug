{"sha": "b8a71aedd80dc9c0212da116defa88b178d11e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhNzFhZWRkODBkYzljMDIxMmRhMTE2ZGVmYTg4YjE3OGQxMWUwYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-13T14:02:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-13T14:02:42Z"}, "message": "gimple.c (gimple_canonical_types_compatible_p): Do not use type-pair caching, do not compare hashes.\n\n2011-05-13  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_canonical_types_compatible_p): Do not use\n\ttype-pair caching, do not compare hashes.\n\nFrom-SVN: r173734", "tree": {"sha": "8c3a6d86e38d1a5a856921b8e956ad07a98cfcf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c3a6d86e38d1a5a856921b8e956ad07a98cfcf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a71aedd80dc9c0212da116defa88b178d11e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a71aedd80dc9c0212da116defa88b178d11e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a71aedd80dc9c0212da116defa88b178d11e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a71aedd80dc9c0212da116defa88b178d11e0b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb9f925985506bf4c98f928bfdc141e2ea3e73a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9f925985506bf4c98f928bfdc141e2ea3e73a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9f925985506bf4c98f928bfdc141e2ea3e73a6"}], "stats": {"total": 69, "additions": 22, "deletions": 47}, "files": [{"sha": "004440cef4850389a5e6b37b289e53624525b10a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a71aedd80dc9c0212da116defa88b178d11e0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a71aedd80dc9c0212da116defa88b178d11e0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8a71aedd80dc9c0212da116defa88b178d11e0b", "patch": "@@ -1,3 +1,8 @@\n+2011-05-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_canonical_types_compatible_p): Do not use\n+\ttype-pair caching, do not compare hashes.\n+\n 2011-05-13  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR middle-end/48965"}, {"sha": "7d7ae09d0e17ce800160900b2204d8b0ac727bfd", "filename": "gcc/gimple.c", "status": "modified", "additions": 17, "deletions": 47, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a71aedd80dc9c0212da116defa88b178d11e0b/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a71aedd80dc9c0212da116defa88b178d11e0b/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=b8a71aedd80dc9c0212da116defa88b178d11e0b", "patch": "@@ -4569,8 +4569,6 @@ gimple_register_type (tree t)\n static bool\n gimple_canonical_types_compatible_p (tree t1, tree t2)\n {\n-  type_pair_t p = NULL;\n-\n   /* Before starting to set up the SCC machinery handle simple cases.  */\n \n   /* Check first for the obvious case of pointer identity.  */\n@@ -4656,27 +4654,9 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n       return true;\n     }\n \n-  /* If the hash values of t1 and t2 are different the types can't\n-     possibly be the same.  This helps keeping the type-pair hashtable\n-     small, only tracking comparisons for hash collisions.  */\n-  if (gimple_canonical_type_hash (t1) != gimple_canonical_type_hash (t2))\n-    return false;\n-\n-  /* If we've visited this type pair before (in the case of aggregates\n-     with self-referential types), and we made a decision, return it.  */\n-  p = lookup_type_pair (t1, t2, &gtc_visited, &gtc_ob);\n-  if (p->same_p[GTC_DIAG] == 0 || p->same_p[GTC_DIAG] == 1)\n-    {\n-      /* We have already decided whether T1 and T2 are the\n-\t same, return the cached result.  */\n-      return p->same_p[GTC_DIAG] == 1;\n-    }\n-\n-  gcc_assert (p->same_p[GTC_DIAG] == -2);\n-\n   /* If their attributes are not the same they can't be the same type.  */\n   if (!attribute_list_equal (TYPE_ATTRIBUTES (t1), TYPE_ATTRIBUTES (t2)))\n-    goto different_types;\n+    return false;\n \n   /* Do type-specific comparisons.  */\n   switch (TREE_CODE (t1))\n@@ -4687,7 +4667,7 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n       if (!gimple_canonical_types_compatible_p (TREE_TYPE (t1), TREE_TYPE (t2))\n \t  || TYPE_STRING_FLAG (t1) != TYPE_STRING_FLAG (t2)\n \t  || TYPE_NONALIASED_COMPONENT (t1) != TYPE_NONALIASED_COMPONENT (t2))\n-\tgoto different_types;\n+\treturn false;\n       else\n \t{\n \t  tree i1 = TYPE_DOMAIN (t1);\n@@ -4696,16 +4676,16 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t  /* For an incomplete external array, the type domain can be\n  \t     NULL_TREE.  Check this condition also.  */\n \t  if (i1 == NULL_TREE && i2 == NULL_TREE)\n-\t    goto same_types;\n+\t    return true;\n \t  else if (i1 == NULL_TREE || i2 == NULL_TREE)\n-\t    goto different_types;\n+\t    return false;\n \t  /* If for a complete array type the possibly gimplified sizes\n \t     are different the types are different.  */\n \t  else if (((TYPE_SIZE (i1) != NULL) ^ (TYPE_SIZE (i2) != NULL))\n \t\t   || (TYPE_SIZE (i1)\n \t\t       && TYPE_SIZE (i2)\n \t\t       && !operand_equal_p (TYPE_SIZE (i1), TYPE_SIZE (i2), 0)))\n-\t    goto different_types;\n+\t    return false;\n \t  else\n \t    {\n \t      tree min1 = TYPE_MIN_VALUE (i1);\n@@ -4724,17 +4704,17 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t\t\t  && ((TREE_CODE (max1) == PLACEHOLDER_EXPR\n \t\t\t       && TREE_CODE (max2) == PLACEHOLDER_EXPR)\n \t\t\t      || operand_equal_p (max1, max2, 0)))))\n-\t\tgoto same_types;\n+\t\treturn true;\n \t      else\n-\t\tgoto different_types;\n+\t\treturn false;\n \t    }\n \t}\n \n     case METHOD_TYPE:\n       /* Method types should belong to the same class.  */\n       if (!gimple_canonical_types_compatible_p\n \t     (TYPE_METHOD_BASETYPE (t1), TYPE_METHOD_BASETYPE (t2)))\n-\tgoto different_types;\n+\treturn false;\n \n       /* Fallthru  */\n \n@@ -4745,13 +4725,13 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t     (TREE_TYPE (t1), TREE_TYPE (t2))\n \t  && !gimple_canonical_types_compatible_p\n \t        (TREE_TYPE (t1), TREE_TYPE (t2)))\n-\tgoto different_types;\n+\treturn false;\n \n       if (!comp_type_attributes (t1, t2))\n-\tgoto different_types;\n+\treturn false;\n \n       if (TYPE_ARG_TYPES (t1) == TYPE_ARG_TYPES (t2))\n-\tgoto same_types;\n+\treturn true;\n       else\n \t{\n \t  tree parms1, parms2;\n@@ -4764,13 +4744,13 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t\t         (TREE_VALUE (parms1), TREE_VALUE (parms2))\n \t\t  && !gimple_canonical_types_compatible_p\n \t\t        (TREE_VALUE (parms1), TREE_VALUE (parms2)))\n-\t\tgoto different_types;\n+\t\treturn false;\n \t    }\n \n \t  if (parms1 || parms2)\n-\t    goto different_types;\n+\t    return false;\n \n-\t  goto same_types;\n+\t  return true;\n \t}\n \n     case RECORD_TYPE:\n@@ -4789,30 +4769,20 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t\t|| !gimple_compare_field_offset (f1, f2)\n \t\t|| !gimple_canonical_types_compatible_p\n \t\t      (TREE_TYPE (f1), TREE_TYPE (f2)))\n-\t      goto different_types;\n+\t      return false;\n \t  }\n \n \t/* If one aggregate has more fields than the other, they\n \t   are not the same.  */\n \tif (f1 || f2)\n-\t  goto different_types;\n+\t  return false;\n \n-\tgoto same_types;\n+\treturn true;\n       }\n \n     default:\n       gcc_unreachable ();\n     }\n-\n-  /* Common exit path for types that are not compatible.  */\n-different_types:\n-  p->same_p[GTC_DIAG] = 0;\n-  return false;\n-\n-  /* Common exit path for types that are compatible.  */\n-same_types:\n-  p->same_p[GTC_DIAG] = 1;\n-  return true;\n }\n \n "}]}