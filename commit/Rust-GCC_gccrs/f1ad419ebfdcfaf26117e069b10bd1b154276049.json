{"sha": "f1ad419ebfdcfaf26117e069b10bd1b154276049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhZDQxOWViZmRjZmFmMjYxMTdlMDY5YjEwYmQxYjE1NDI3NjA0OQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-09-05T00:24:22Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-01-15T23:31:12Z"}, "message": "rs6000, vector integer multiply/divide/modulo instructions\n\n2021-01-15  Carl Love  <cel@us.ibm.com>\n\ngcc/ChangeLog:\n\t* config/rs6000/altivec.h (vec_mulh, vec_div, vec_dive, vec_mod):\n\tNew defines.\n\t* config/rs6000/altivec.md (VIlong): Move define to file vsx.md.\n\t* config/rs6000/rs6000-builtin.def (DIVES_V4SI, DIVES_V2DI,\n\tDIVEU_V4SI, DIVEU_V2DI, DIVS_V4SI, DIVS_V2DI, DIVU_V4SI,\n\tDIVU_V2DI, MODS_V2DI, MODS_V4SI, MODU_V2DI, MODU_V4SI,\n\tMULHS_V2DI, MULHS_V4SI, MULHU_V2DI, MULHU_V4SI, MULLD_V2DI):\n\tAdd builtin define.\n\t(MULH, DIVE, MOD):  Add new BU_P10_OVERLOAD_2 definitions.\n\t* config/rs6000/rs6000-call.c (VSX_BUILTIN_VEC_DIV,\n\tVSX_BUILTIN_VEC_DIVE, P10_BUILTIN_VEC_MOD, P10_BUILTIN_VEC_MULH):\n\tNew overloaded definitions.\n\t(builtin_function_type) [P10V_BUILTIN_DIVEU_V4SI,\n\tP10V_BUILTIN_DIVEU_V2DI, P10V_BUILTIN_DIVU_V4SI,\n\tP10V_BUILTIN_DIVU_V2DI, P10V_BUILTIN_MODU_V2DI,\n\tP10V_BUILTIN_MODU_V4SI, P10V_BUILTIN_MULHU_V2DI,\n\tP10V_BUILTIN_MULHU_V4SI]: Add case\n\tstatement for builtins.\n\t* config/rs6000/rs6000.md (bits): Add new attribute sizes V4SI, V2DI.\n\t* config/rs6000/vsx.md (VIlong): Moved from config/rs6000/altivec.md.\n\t(UNSPEC_VDIVES, UNSPEC_VDIVEU): New unspec definitions.\n\t(vsx_mul_v2di): Add if TARGET_POWER10 statement.\n\t(vsx_udiv_v2di): Add if TARGET_POWER10 statement.\n\t(dives_<mode>, diveu_<mode>, div<mode>3, uvdiv<mode>3,\n\tmods_<mode>, modu_<mode>, mulhs_<mode>, mulhu_<mode>, mulv2di3):\n\tAdd define_insn, mode is VIlong.\n\t* doc/extend.texi (vec_mulh, vec_mul, vec_div, vec_dive, vec_mod):\n\tAdd builtin descriptions.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/powerpc/builtins-1-p10-runnable.c: New test file.", "tree": {"sha": "c91ae09ab6a79d3de1f83a893f8e9e4296e771ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91ae09ab6a79d3de1f83a893f8e9e4296e771ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1ad419ebfdcfaf26117e069b10bd1b154276049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ad419ebfdcfaf26117e069b10bd1b154276049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ad419ebfdcfaf26117e069b10bd1b154276049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ad419ebfdcfaf26117e069b10bd1b154276049/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c029fcb56805bcb556e5c4dccdd4d124ca7eda33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c029fcb56805bcb556e5c4dccdd4d124ca7eda33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c029fcb56805bcb556e5c4dccdd4d124ca7eda33"}], "stats": {"total": 814, "additions": 760, "deletions": 54}, "files": [{"sha": "961621a0841d87bb67a3a5188512a05b30743e29", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -750,6 +750,10 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_strir_p(a)\t__builtin_vec_strir_p (a)\n #define vec_stril_p(a)\t__builtin_vec_stril_p (a)\n \n+#define vec_mulh(a, b) __builtin_vec_mulh ((a), (b))\n+#define vec_dive(a, b) __builtin_vec_dive ((a), (b))\n+#define vec_mod(a, b) __builtin_vec_mod ((a), (b))\n+\n /* VSX Mask Manipulation builtin. */\n #define vec_genbm __builtin_vec_mtvsrbm\n #define vec_genhm __builtin_vec_mtvsrhm"}, {"sha": "27a269b9e72da04a06730ce90d1ed79b898eac1e", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -193,8 +193,6 @@\n \n ;; Short vec int modes\n (define_mode_iterator VIshort [V8HI V16QI])\n-;; Longer vec int modes for rotate/mask ops\n-(define_mode_iterator VIlong [V2DI V4SI])\n ;; Vec float modes\n (define_mode_iterator VF [V4SF])\n ;; Vec modes, pity mode iterators are not composable"}, {"sha": "058a32abf4ce9584884a336aa3bf6f8fba9e0f8e", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -2883,6 +2883,24 @@ BU_P10V_AV_3 (VSRDB_V8HI, \"vsrdb_v8hi\", CONST, vsrdb_v8hi)\n BU_P10V_AV_3 (VSRDB_V4SI, \"vsrdb_v4si\", CONST, vsrdb_v4si)\n BU_P10V_AV_3 (VSRDB_V2DI, \"vsrdb_v2di\", CONST, vsrdb_v2di)\n \n+BU_P10V_AV_2 (DIVES_V4SI, \"vdivesw\", CONST, dives_v4si)\n+BU_P10V_AV_2 (DIVES_V2DI, \"vdivesd\", CONST, dives_v2di)\n+BU_P10V_AV_2 (DIVEU_V4SI, \"vdiveuw\", CONST, diveu_v4si)\n+BU_P10V_AV_2 (DIVEU_V2DI, \"vdiveud\", CONST, diveu_v2di)\n+BU_P10V_AV_2 (DIVS_V4SI, \"vdivsw\", CONST, divv4si3)\n+BU_P10V_AV_2 (DIVS_V2DI, \"vdivsd\", CONST, divv2di3)\n+BU_P10V_AV_2 (DIVU_V4SI, \"vdivuw\", CONST, udivv4si3)\n+BU_P10V_AV_2 (DIVU_V2DI, \"vdivud\", CONST, udivv2di3)\n+BU_P10V_AV_2 (MODS_V2DI, \"vmodsd\", CONST, mods_v2di)\n+BU_P10V_AV_2 (MODS_V4SI, \"vmodsw\", CONST, mods_v4si)\n+BU_P10V_AV_2 (MODU_V2DI, \"vmodud\", CONST, modu_v2di)\n+BU_P10V_AV_2 (MODU_V4SI, \"vmoduw\", CONST, modu_v4si)\n+BU_P10V_AV_2 (MULHS_V2DI, \"vmulhsd\", CONST, mulhs_v2di)\n+BU_P10V_AV_2 (MULHS_V4SI, \"vmulhsw\", CONST, mulhs_v4si)\n+BU_P10V_AV_2 (MULHU_V2DI, \"vmulhud\", CONST, mulhu_v2di)\n+BU_P10V_AV_2 (MULHU_V4SI, \"vmulhuw\", CONST, mulhu_v4si)\n+BU_P10V_AV_2 (MULLD_V2DI, \"vmulld\", CONST, mulv2di3)\n+\n BU_P10V_VSX_1 (VXXSPLTIW_V4SI, \"vxxspltiw_v4si\", CONST, xxspltiw_v4si)\n BU_P10V_VSX_1 (VXXSPLTIW_V4SF, \"vxxspltiw_v4sf\", CONST, xxspltiw_v4sf)\n \n@@ -2958,6 +2976,9 @@ BU_P10_OVERLOAD_1 (VSTRIL_P, \"stril_p\")\n BU_P10_OVERLOAD_1 (XVTLSBB_ZEROS, \"xvtlsbb_all_zeros\")\n BU_P10_OVERLOAD_1 (XVTLSBB_ONES, \"xvtlsbb_all_ones\")\n \n+BU_P10_OVERLOAD_2 (MULH, \"mulh\")\n+BU_P10_OVERLOAD_2 (DIVE, \"dive\")\n+BU_P10_OVERLOAD_2 (MOD, \"mod\")\n \f\n BU_P10_OVERLOAD_1 (MTVSRBM, \"mtvsrbm\")\n BU_P10_OVERLOAD_1 (MTVSRHM, \"mtvsrhm\")"}, {"sha": "ae0c761f0a4ca206e4c4b887bfe374e5ade21cfe", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -1069,6 +1069,40 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { VSX_BUILTIN_VEC_DIV, VSX_BUILTIN_UDIV_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n+\n+  { VSX_BUILTIN_VEC_DIV, P10V_BUILTIN_DIVS_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_DIV, P10V_BUILTIN_DIVU_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_DIV, P10V_BUILTIN_DIVS_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_DIV, P10V_BUILTIN_DIVU_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+\n+  { P10_BUILTIN_VEC_DIVE, P10V_BUILTIN_DIVES_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P10_BUILTIN_VEC_DIVE, P10V_BUILTIN_DIVEU_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P10_BUILTIN_VEC_DIVE, P10V_BUILTIN_DIVES_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P10_BUILTIN_VEC_DIVE, P10V_BUILTIN_DIVEU_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+\n+  { P10_BUILTIN_VEC_MOD, P10V_BUILTIN_MODS_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P10_BUILTIN_VEC_MOD, P10V_BUILTIN_MODU_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P10_BUILTIN_VEC_MOD, P10V_BUILTIN_MODS_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P10_BUILTIN_VEC_MOD, P10V_BUILTIN_MODU_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+\n   { VSX_BUILTIN_VEC_DOUBLE, VSX_BUILTIN_XVCVSXDDP,\n     RS6000_BTI_V2DF, RS6000_BTI_V2DI, 0, 0 },\n   { VSX_BUILTIN_VEC_DOUBLE, VSX_BUILTIN_XVCVUXDDP,\n@@ -1909,6 +1943,17 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMINUB, ALTIVEC_BUILTIN_VMINUB,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, 0 },\n+  { P10_BUILTIN_VEC_MULH, P10V_BUILTIN_MULHS_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P10_BUILTIN_VEC_MULH, P10V_BUILTIN_MULHU_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P10_BUILTIN_VEC_MULH, P10V_BUILTIN_MULHS_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P10_BUILTIN_VEC_MULH, P10V_BUILTIN_MULHU_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_MULE, ALTIVEC_BUILTIN_VMULEUB,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MULE, ALTIVEC_BUILTIN_VMULESB,\n@@ -14438,6 +14483,14 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P10V_BUILTIN_XXGENPCVM_V8HI:\n     case P10V_BUILTIN_XXGENPCVM_V4SI:\n     case P10V_BUILTIN_XXGENPCVM_V2DI:\n+    case P10V_BUILTIN_DIVEU_V4SI:\n+    case P10V_BUILTIN_DIVEU_V2DI:\n+    case P10V_BUILTIN_DIVU_V4SI:\n+    case P10V_BUILTIN_DIVU_V2DI:\n+    case P10V_BUILTIN_MODU_V2DI:\n+    case P10V_BUILTIN_MODU_V4SI:\n+    case P10V_BUILTIN_MULHU_V2DI:\n+    case P10V_BUILTIN_MULHU_V4SI:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "976425361d929ec64104479852cc59e8d95c33d5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -668,9 +668,10 @@\n \t\t\t   (V4SI  \"du\")\n \t\t\t   (V2DI  \"d\")])\n \n-;; How many bits in this mode?\n+;; How many bits (per element) in this mode?\n (define_mode_attr bits [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")\n-\t\t\t\t\t   (SF \"32\") (DF \"64\")])\n+\t\t\t\t\t   (SF \"32\") (DF \"64\")\n+\t\t\t\t\t   (V4SI \"32\") (V2DI \"64\")])\n \n ; DImode bits\n (define_mode_attr dbits [(QI \"56\") (HI \"48\") (SI \"32\")])"}, {"sha": "3e0518631dfbe88429f8b3eb1ca78bce205e183d", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 161, "deletions": 50, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -267,6 +267,10 @@\n (define_mode_iterator VSX_MM [V16QI V8HI V4SI V2DI V1TI])\n (define_mode_iterator VSX_MM4 [V16QI V8HI V4SI V2DI])\n \n+;; Longer vec int modes for rotate/mask ops\n+;; and Vector Integer Multiply/Divide/Modulo Instructions\n+(define_mode_iterator VIlong [V2DI V4SI])\n+\n ;; Constants for creating unspecs\n (define_c_enum \"unspec\"\n   [UNSPEC_VSX_CONCAT\n@@ -363,6 +367,8 @@\n    UNSPEC_INSERTR\n    UNSPEC_REPLACE_ELT\n    UNSPEC_REPLACE_UN\n+   UNSPEC_VDIVES\n+   UNSPEC_VDIVEU\n   ])\n \n (define_int_iterator XVCVBF16\t[UNSPEC_VSX_XVCVSPBF16\n@@ -1623,28 +1629,35 @@\n   rtx op0 = operands[0];\n   rtx op1 = operands[1];\n   rtx op2 = operands[2];\n-  rtx op3 = gen_reg_rtx (DImode);\n-  rtx op4 = gen_reg_rtx (DImode);\n-  rtx op5 = gen_reg_rtx (DImode);\n-  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n-  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n-  if (TARGET_POWERPC64)\n-    emit_insn (gen_muldi3 (op5, op3, op4));\n-  else\n-    {\n-      rtx ret = expand_mult (DImode, op3, op4, NULL, 0, false);\n-      emit_move_insn (op5, ret);\n-    }\n-  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n-  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n-  if (TARGET_POWERPC64)\n-    emit_insn (gen_muldi3 (op3, op3, op4));\n+\n+  if (TARGET_POWER10)\n+    emit_insn (gen_mulv2di3 (op0, op1, op2) );\n+\n   else\n     {\n-      rtx ret = expand_mult (DImode, op3, op4, NULL, 0, false);\n-      emit_move_insn (op3, ret);\n+      rtx op3 = gen_reg_rtx (DImode);\n+      rtx op4 = gen_reg_rtx (DImode);\n+      rtx op5 = gen_reg_rtx (DImode);\n+      emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n+      emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n+      if (TARGET_POWERPC64)\n+\temit_insn (gen_muldi3 (op5, op3, op4));\n+      else\n+\t{\n+\t  rtx ret = expand_mult (DImode, op3, op4, NULL, 0, false);\n+\t  emit_move_insn (op5, ret);\n+\t}\n+      emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n+      emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n+      if (TARGET_POWERPC64)\n+\temit_insn (gen_muldi3 (op3, op3, op4));\n+      else\n+\t{\n+\t  rtx ret = expand_mult (DImode, op3, op4, NULL, 0, false);\n+\t  emit_move_insn (op3, ret);\n+\t}\n+      emit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n     }\n-  emit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n   DONE;\n }\n   [(set_attr \"type\" \"mul\")])\n@@ -1718,37 +1731,46 @@\n   rtx op0 = operands[0];\n   rtx op1 = operands[1];\n   rtx op2 = operands[2];\n-  rtx op3 = gen_reg_rtx (DImode);\n-  rtx op4 = gen_reg_rtx (DImode);\n-  rtx op5 = gen_reg_rtx (DImode);\n-  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n-  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n-  if (TARGET_POWERPC64)\n-    emit_insn (gen_udivdi3 (op5, op3, op4));\n-  else\n-    {\n-      rtx libfunc = optab_libfunc (udiv_optab, DImode);\n-      rtx target = emit_library_call_value (libfunc,\n-\t\t\t\t\t    op5, LCT_NORMAL, DImode,\n-\t\t\t\t\t    op3, DImode,\n-\t\t\t\t\t    op4, DImode);\n-      emit_move_insn (op5, target);\n-    }\n-  emit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n-  emit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n-  if (TARGET_POWERPC64)\n-    emit_insn (gen_udivdi3 (op3, op3, op4));\n-  else\n-    {\n-      rtx libfunc = optab_libfunc (udiv_optab, DImode);\n-      rtx target = emit_library_call_value (libfunc,\n-\t\t\t\t\t    op3, LCT_NORMAL, DImode,\n-\t\t\t\t\t    op3, DImode,\n-\t\t\t\t\t    op4, DImode);\n-      emit_move_insn (op3, target);\n-    }\n-  emit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n-  DONE;\n+\n+    if (TARGET_POWER10)\n+      emit_insn (gen_udivv2di3 (op0, op1, op2) );\n+    else\n+      {\n+\trtx op3 = gen_reg_rtx (DImode);\n+\trtx op4 = gen_reg_rtx (DImode);\n+\trtx op5 = gen_reg_rtx (DImode);\n+\n+\temit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (0)));\n+\temit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (0)));\n+\n+\tif (TARGET_POWERPC64)\n+\t  emit_insn (gen_udivdi3 (op5, op3, op4));\n+\telse\n+\t  {\n+\t    rtx libfunc = optab_libfunc (udiv_optab, DImode);\n+\t    rtx target = emit_library_call_value (libfunc,\n+\t\t\t\t\t\t  op5, LCT_NORMAL, DImode,\n+\t\t\t\t\t\t  op3, DImode,\n+\t\t\t\t\t\t  op4, DImode);\n+\t    emit_move_insn (op5, target);\n+\t  }\n+\temit_insn (gen_vsx_extract_v2di (op3, op1, GEN_INT (1)));\n+\temit_insn (gen_vsx_extract_v2di (op4, op2, GEN_INT (1)));\n+\n+\tif (TARGET_POWERPC64)\n+\t  emit_insn (gen_udivdi3 (op3, op3, op4));\n+\telse\n+\t  {\n+\t    rtx libfunc = optab_libfunc (udiv_optab, DImode);\n+\t    rtx target = emit_library_call_value (libfunc,\n+\t\t\t\t\t\t  op3, LCT_NORMAL, DImode,\n+\t\t\t\t\t\t  op3, DImode,\n+\t\t\t\t\t\t  op4, DImode);\n+\t    emit_move_insn (op3, target);\n+\t  }\n+\temit_insn (gen_vsx_concat_v2di (op0, op5, op3));\n+      }\n+    DONE;\n }\n   [(set_attr \"type\" \"div\")])\n \n@@ -6104,3 +6126,92 @@\n   \"TARGET_POWER10\"\n   \"vexpand<wd>m %0,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"dives_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+        (unspec:VIlong [(match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t        (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")]\n+        UNSPEC_VDIVES))]\n+  \"TARGET_POWER10\"\n+  \"vdives<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"diveu_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+        (unspec:VIlong [(match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t\t(match_operand:VIlong 2 \"vsx_register_operand\" \"v\")]\n+\tUNSPEC_VDIVEU))]\n+  \"TARGET_POWER10\"\n+  \"vdiveu<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"div<mode>3\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(div:VIlong (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t    (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+  \"vdivs<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"udiv<mode>3\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(udiv:VIlong (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t    (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+  \"vdivu<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"mods_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(mod:VIlong (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t    (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+  \"vmods<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"modu_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(umod:VIlong (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t     (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+  \"vmodu<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"<bits>\")])\n+\n+(define_insn \"mulhs_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(mult:VIlong (ashiftrt\n+\t\t       (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t       (const_int 32))\n+\t\t     (ashiftrt\n+\t\t       (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")\n+\t\t       (const_int 32))))]\n+  \"TARGET_POWER10\"\n+  \"vmulhs<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+(define_insn \"mulhu_<mode>\"\n+  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n+\t(us_mult:VIlong (ashiftrt\n+\t\t\t  (match_operand:VIlong 1 \"vsx_register_operand\" \"v\")\n+\t\t\t  (const_int 32))\n+\t\t\t(ashiftrt\n+\t\t\t  (match_operand:VIlong 2 \"vsx_register_operand\" \"v\")\n+\t\t\t  (const_int 32))))]\n+  \"TARGET_POWER10\"\n+  \"vmulhu<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+;; Vector multiply low double word\n+(define_insn \"mulv2di3\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n+\t(mult:V2DI (match_operand:V2DI 1 \"vsx_register_operand\" \"v\")\n+\t\t   (match_operand:V2DI 2 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+  \"vmulld %0,%1,%2\"\n+  [(set_attr \"type\" \"veccomplex\")])"}, {"sha": "c5b1faff60bb0d4f5f5bf0714c8994c436e11abf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -21642,6 +21642,126 @@ integer value between 0 and 255 inclusive.\n @exdent vector unsigned int vec_genpcvm (vector unsigned long long int,\n                                          const int)\n @end smallexample\n+\n+Vector Integer Multiply/Divide/Modulo\n+\n+@smallexample\n+@exdent vector signed int\n+@exdent vec_mulh (vector signed int a, vector signed int b)\n+@exdent vector unsigned int\n+@exdent vec_mulh (vector unsigned int a, vector unsigned int b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 3, do the following. The integer\n+value in word element @code{i} of a is multiplied by the integer value in word\n+element @code{i} of b. The high-order 32 bits of the 64-bit product are placed\n+into word element @code{i} of the vector returned.\n+\n+@smallexample\n+@exdent vector signed long long\n+@exdent vec_mulh (vector signed long long a, vector signed long long b)\n+@exdent vector unsigned long long\n+@exdent vec_mulh (vector unsigned long long a, vector unsigned long long b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 1, do the following. The integer\n+value in doubleword element @code{i} of a is multiplied by the integer value in\n+doubleword element @code{i} of b. The high-order 64 bits of the 128-bit product\n+are placed into doubleword element @code{i} of the vector returned.\n+\n+@smallexample\n+@exdent vector unsigned long long\n+@exdent vec_mul (vector unsigned long long a, vector unsigned long long b)\n+@exdent vector signed long long\n+@exdent vec_mul (vector signed long long a, vector signed long long b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 1, do the following. The integer\n+value in doubleword element @code{i} of a is multiplied by the integer value in\n+doubleword element @code{i} of b. The low-order 64 bits of the 128-bit product\n+are placed into doubleword element @code{i} of the vector returned.\n+\n+@smallexample\n+@exdent vector signed int\n+@exdent vec_div (vector signed int a, vector signed int b)\n+@exdent vector unsigned int\n+@exdent vec_div (vector unsigned int a, vector unsigned int b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 3, do the following. The integer in\n+word element @code{i} of a is divided by the integer in word element @code{i}\n+of b. The unique integer quotient is placed into the word element @code{i} of\n+the vector returned. If an attempt is made to perform any of the divisions\n+<anything> \u00f7 0 then the quotient is undefined.\n+\n+@smallexample\n+@exdent vector signed long long\n+@exdent vec_div (vector signed long long a, vector signed long long b)\n+@exdent vector unsigned long long\n+@exdent vec_div (vector unsigned long long a, vector unsigned long long b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 1, do the following. The integer in\n+doubleword element @code{i} of a is divided by the integer in doubleword\n+element @code{i} of b. The unique integer quotient is placed into the\n+doubleword element @code{i} of the vector returned. If an attempt is made to\n+perform any of the divisions 0x8000_0000_0000_0000 \u00f7 -1 or <anything> \u00f7 0 then\n+the quotient is undefined.\n+\n+@smallexample\n+@exdent vector signed int\n+@exdent vec_dive (vector signed int a, vector signed int b)\n+@exdent vector unsigned int\n+@exdent vec_dive (vector unsigned int a, vector unsigned int b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 3, do the following. The integer in\n+word element @code{i} of a is shifted left by 32 bits, then divided by the\n+integer in word element @code{i} of b. The unique integer quotient is placed\n+into the word element @code{i} of the vector returned. If the quotient cannot\n+be represented in 32 bits, or if an attempt is made to perform any of the\n+divisions <anything> \u00f7 0 then the quotient is undefined.\n+\n+@smallexample\n+@exdent vector signed long long\n+@exdent vec_dive (vector signed long long a, vector signed long long b)\n+@exdent vector unsigned long long\n+@exdent vec_dive (vector unsigned long long a, vector unsigned long long b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 1, do the following. The integer in\n+doubleword element @code{i} of a is shifted left by 64 bits, then divided by\n+the integer in doubleword element @code{i} of b. The unique integer quotient is\n+placed into the doubleword element @code{i} of the vector returned. If the\n+quotient cannot be represented in 64 bits, or if an attempt is made to perform\n+<anything> \u00f7 0 then the quotient is undefined.\n+\n+@smallexample\n+@exdent vector signed int\n+@exdent vec_mod (vector signed int a, vector signed int b)\n+@exdent vector unsigned int\n+@exdent vec_mod (vector unsigned int a, vector unsigned int b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 3, do the following. The integer in\n+word element @code{i} of a is divided by the integer in word element @code{i}\n+of b. The unique integer remainder is placed into the word element @code{i} of\n+the vector returned.  If an attempt is made to perform any of the divisions\n+0x8000_0000 \u00f7 -1 or <anything> \u00f7 0 then the remainder is undefined.\n+\n+@smallexample\n+@exdent vector signed long long\n+@exdent vec_mod (vector signed long long a, vector signed long long b)\n+@exdent vector unsigned long long\n+@exdent vec_mod (vector unsigned long long a, vector unsigned long long b)\n+@end smallexample\n+\n+For each integer value @code{i} from 0 to 1, do the following. The integer in\n+doubleword element @code{i} of a is divided by the integer in doubleword\n+element @code{i} of b. The unique integer remainder is placed into the\n+doubleword element @code{i} of the vector returned. If an attempt is made to\n+perform <anything> \u00f7 0 then the remainder is undefined.\n+\n Generate PCV from specified Mask size, as if implemented by the\n @code{xxgenpcvbm}, @code{xxgenpcvhm}, @code{xxgenpcvwm} instructions, where\n immediate value is either 0, 1, 2 or 3."}, {"sha": "222c8b3a409c3cbcf9ef1e9c907fbdd056714b79", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-p10-runnable.c", "status": "added", "additions": 398, "deletions": 0, "changes": 398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-p10-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ad419ebfdcfaf26117e069b10bd1b154276049/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-p10-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-p10-runnable.c?ref=f1ad419ebfdcfaf26117e069b10bd1b154276049", "patch": "@@ -0,0 +1,398 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -save-temps\" } */\n+\n+/* { dg-final { scan-assembler-times {\\mvdivsw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdivuw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdivsd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdivud\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdivesw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdiveuw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdivesd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvdiveud\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmodsw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmoduw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmodsd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmodud\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhsw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhuw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhsd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulhud\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmulld\\M} 2 } } */\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <math.h>\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int main()\n+  {\n+    int i;\n+    vector int i_arg1, i_arg2;\n+    vector unsigned int u_arg1, u_arg2;\n+    vector long long int d_arg1, d_arg2;\n+    vector long long unsigned int ud_arg1, ud_arg2;\n+   \n+    vector int vec_i_expected, vec_i_result;\n+    vector unsigned int vec_u_expected, vec_u_result;\n+    vector long long int vec_d_expected, vec_d_result;\n+    vector long long unsigned int vec_ud_expected, vec_ud_result;\n+  \n+    /* Signed word divide */\n+    i_arg1 = (vector int){ 20, 40, 60, 80};\n+    i_arg2 = (vector int){ 2, 2, 2, 2};\n+    vec_i_expected = (vector int){10, 20, 30, 40};\n+\n+    vec_i_result = vec_div (i_arg1, i_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_i_expected[i] != vec_i_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_div signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_i_result[i],  i, vec_i_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned word divide */\n+    u_arg1 = (vector unsigned int){ 20, 40, 60, 80};\n+    u_arg2 = (vector unsigned int){ 2, 2, 2, 2};\n+    vec_u_expected = (vector unsigned int){10, 20, 30, 40};\n+\n+    vec_u_result = vec_div (u_arg1, u_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_u_expected[i] != vec_u_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_div unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_u_result[i],  i, vec_u_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Signed double word divide */\n+    d_arg1 = (vector long long){ 24, 68};\n+    d_arg2 = (vector long long){ 2, 2};\n+    vec_d_expected = (vector long long){12, 34};\n+\n+    vec_d_result = vec_div (d_arg1, d_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_d_expected[i] != vec_d_result[i])\n+#ifdef DEBUG\n+\t  printf(\"ERROR vec_div signed result[%d] = %d != \"\n+\t\t \"expected[%d] = %d\\n\",\n+\t\t i, vec_d_result[i],  i, vec_d_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned double word divide */\n+    ud_arg1 = (vector unsigned long long){ 24, 68};\n+    ud_arg2 = (vector unsigned long long){ 2, 2};\n+    vec_ud_expected = (vector unsigned long long){12, 34};\n+\n+    vec_ud_result = vec_div (ud_arg1, ud_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_ud_expected[i] != vec_ud_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_div unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_ud_result[i],  i, vec_ud_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Divide Extended signed word  result = (arg1 << 32)/arg2 */\n+    i_arg1 = (vector int){ 2, 4, 6, 8};\n+    i_arg2 = (vector int){ 2048, 2048, 2048, 2048};\n+    vec_i_expected = (vector int){4194304, 8388608, 12582912, 16777216};\n+\n+    vec_i_result = vec_dive (i_arg1, i_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_i_expected[i] != vec_i_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_dive signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_i_result[i],  i, vec_i_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Divide Extended unsigned word  result = (arg1 << 32)/arg2 */\n+    u_arg1 = (vector unsigned int){ 2, 4, 6, 8};\n+    u_arg2 = (vector unsigned int){ 2048, 2048, 2048, 2048};\n+    vec_u_expected = (vector unsigned int){4194304, 8388608,\n+\t\t\t\t\t   12582912, 16777216};\n+\n+    vec_u_result = vec_dive (u_arg1, u_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_u_expected[i] != vec_u_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_dive unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_u_result[i],  i, vec_u_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Divide Extended double signed  esult = (arg1 << 64)/arg2 */\n+    d_arg1 = (vector long long int){ 2, 4};\n+    d_arg2 = (vector long long int){ 4294967296, 4294967296};\n+\n+    vec_d_expected = (vector long long int){8589934592, 17179869184};\n+\n+    vec_d_result = vec_dive (d_arg1, d_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_d_expected[i] != vec_d_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_dive signed result[%d] = %lld != \"\n+\t\t  \"expected[%d] = %lld\\n\",\n+\t\t  i, vec_d_result[i],  i, vec_d_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Divide Extended double unsigned result = (arg1 << 64)/arg2 */\n+    ud_arg1 = (vector long long unsigned int){ 2, 4};\n+    ud_arg2 = (vector long long unsigned int){ 4294967296, 4294967296};\n+\n+    vec_ud_expected = (vector long long unsigned int){8589934592,\n+\t\t\t\t\t\t      17179869184};\n+\n+    vec_ud_result = vec_dive (ud_arg1, ud_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_ud_expected[i] != vec_ud_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_dive unsigned result[%d] = %lld != \"\n+\t\t  \"expected[%d] = %lld\\n\",\n+\t\t  i, vec_ud_result[i],  i, vec_ud_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Signed word modulo */\n+    i_arg1 = (vector int){ 23, 45, 61, 89};\n+    i_arg2 = (vector int){ 2, 2, 2, 2};\n+    vec_i_expected = (vector int){1, 1, 1, 1};\n+\n+    vec_i_result = vec_mod (i_arg1, i_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_i_expected[i] != vec_i_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mod signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_i_result[i],  i, vec_i_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned word modulo */\n+    u_arg1 = (vector unsigned int){ 25, 41, 67, 86};\n+    u_arg2 = (vector unsigned int){ 3, 3, 3, 3};\n+    vec_u_expected = (vector unsigned int){1, 2, 1, 2};\n+\n+    vec_u_result = vec_mod (u_arg1, u_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_u_expected[i] != vec_u_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mod unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_u_result[i],  i, vec_u_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Signed double word modulo */\n+    d_arg1 = (vector long long){ 24, 68};\n+    d_arg2 = (vector long long){ 7, 7};\n+    vec_d_expected = (vector long long){3, 5};\n+\n+    vec_d_result = vec_mod (d_arg1, d_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_d_expected[i] != vec_d_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mod signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_d_result[i],  i, vec_d_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned double word modulo */\n+    ud_arg1 = (vector unsigned long long){ 24, 68};\n+    ud_arg2 = (vector unsigned long long){ 8, 8};\n+    vec_ud_expected = (vector unsigned long long){0, 4};\n+\n+    vec_ud_result = vec_mod (ud_arg1, ud_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_ud_expected[i] != vec_ud_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vecmod unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_ud_result[i],  i, vec_ud_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Signed word multiply high */\n+    i_arg1 = (vector int){ 2147483648, 2147483648, 2147483648, 2147483648 };\n+    i_arg2 = (vector int){ 2, 3, 4, 5};\n+    //    vec_i_expected = (vector int){-1, -2, -2, -3};\n+    vec_i_expected = (vector int){1, -2, -2, -3};\n+\n+    vec_i_result = vec_mulh (i_arg1, i_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_i_expected[i] != vec_i_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mulh signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_i_result[i],  i, vec_i_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned word multiply high */\n+    u_arg1 = (vector unsigned int){ 2147483648, 2147483648,\n+\t\t\t\t    2147483648, 2147483648 };\n+    u_arg2 = (vector unsigned int){ 4, 5, 6, 7 };\n+    vec_u_expected = (vector unsigned int){2, 2, 3, 3 };\n+\n+    vec_u_result = vec_mulh (u_arg1, u_arg2);\n+\n+    for (i = 0; i < 4; i++)\n+      {\n+        if (vec_u_expected[i] != vec_u_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mulh unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_u_result[i],  i, vec_u_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Signed double word multiply high */\n+    d_arg1 = (vector long long int){  2305843009213693951,\n+\t\t\t\t      4611686018427387903 };\n+    d_arg2 = (vector long long int){ 12, 20 };\n+    vec_d_expected = (vector long long int){ 1, 4 };\n+\n+    vec_d_result = vec_mulh (d_arg1, d_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_d_expected[i] != vec_d_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mulh signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_d_result[i],  i, vec_d_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned double word multiply high */\n+    ud_arg1 = (vector unsigned long long int){ 2305843009213693951,\n+\t\t\t\t\t       4611686018427387903 };\n+    ud_arg2 = (vector unsigned long long int){ 32, 10 };\n+    vec_ud_expected = (vector unsigned long long int){ 3, 2 };\n+\n+    vec_ud_result = vec_mulh (ud_arg1, ud_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_ud_expected[i] != vec_ud_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mulh unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_ud_result[i],  i, vec_ud_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Unsigned double word multiply low */\n+    ud_arg1 = (vector unsigned long long int){ 2048, 4096 };\n+    ud_arg2 = (vector unsigned long long int){ 2, 4 };\n+    vec_ud_expected = (vector unsigned long long int){ 4096, 16384 };\n+\n+    vec_ud_result = vec_mul (ud_arg1, ud_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_ud_expected[i] != vec_ud_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mul unsigned result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_ud_result[i],  i, vec_ud_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+    /* Signed double word multiply low */\n+    d_arg1 = (vector signed long long int){ 2048, 4096 };\n+    d_arg2 = (vector signed long long int){ 2, 4 };\n+    vec_d_expected = (vector signed long long int){ 4096, 16384 };\n+\n+    vec_d_result = vec_mul (d_arg1, d_arg2);\n+\n+    for (i = 0; i < 2; i++)\n+      {\n+        if (vec_d_expected[i] != vec_d_result[i])\n+#ifdef DEBUG\n+           printf(\"ERROR vec_mul signed result[%d] = %d != \"\n+\t\t  \"expected[%d] = %d\\n\",\n+\t\t  i, vec_d_result[i],  i, vec_d_expected[i]);\n+#else\n+        abort();\n+#endif\n+      }\n+  }"}]}