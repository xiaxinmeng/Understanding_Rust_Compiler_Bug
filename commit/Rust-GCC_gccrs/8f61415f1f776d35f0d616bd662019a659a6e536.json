{"sha": "8f61415f1f776d35f0d616bd662019a659a6e536", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY2MTQxNWYxZjc3NmQzNWYwZDYxNmJkNjYyMDE5YTY1OWE2ZTUzNg==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-12-02T08:26:19Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:26:19Z"}, "message": "PR target/77822: Add helper macro EXTRACT_ARGS_IN_RANGE to system.h.\n\nThe macro can be used to validate the arguments of zero_extract and\nsign_extract to fix this problem:\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=77822\n\ngcc/ChangeLog:\n\n2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\tPR target/77822\n\t* rtl.h (EXTRACT_ARGS_IN_RANGE): New.\n\nFrom-SVN: r243159", "tree": {"sha": "05837f8d404bbfc6a3056defa244950336cb02ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05837f8d404bbfc6a3056defa244950336cb02ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f61415f1f776d35f0d616bd662019a659a6e536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f61415f1f776d35f0d616bd662019a659a6e536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f61415f1f776d35f0d616bd662019a659a6e536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f61415f1f776d35f0d616bd662019a659a6e536/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f5fc63362a675a216f1475bb08fd42d8274f8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5fc63362a675a216f1475bb08fd42d8274f8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5fc63362a675a216f1475bb08fd42d8274f8cf"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "8c71c21d1eb8808bacea62105d07d321c6e73eab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f61415f1f776d35f0d616bd662019a659a6e536/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f61415f1f776d35f0d616bd662019a659a6e536/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f61415f1f776d35f0d616bd662019a659a6e536", "patch": "@@ -1,3 +1,8 @@\n+2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\tPR target/77822\n+\t* rtl.h (EXTRACT_ARGS_IN_RANGE): New.\n+\n 2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc/config/s390/s390.c (s390_builtin_vectorization_cost): New"}, {"sha": "a5efa282a157f40b7666cc36488e475340fb47a2", "filename": "gcc/rtl.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f61415f1f776d35f0d616bd662019a659a6e536/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f61415f1f776d35f0d616bd662019a659a6e536/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8f61415f1f776d35f0d616bd662019a659a6e536", "patch": "@@ -2694,6 +2694,16 @@ get_full_set_src_cost (rtx x, machine_mode mode, struct full_rtx_costs *c)\n }\n #endif\n \n+/* A convenience macro to validate the arguments of a zero_extract\n+   expression.  It determines whether SIZE lies inclusively within\n+   [1, RANGE], POS lies inclusively within between [0, RANGE - 1]\n+   and the sum lies inclusively within [1, RANGE].  RANGE must be\n+   >= 1, but SIZE and POS may be negative.  */\n+#define EXTRACT_ARGS_IN_RANGE(SIZE, POS, RANGE) \\\n+  (IN_RANGE ((POS), 0, (unsigned HOST_WIDE_INT) (RANGE) - 1) \\\n+   && IN_RANGE ((SIZE), 1, (unsigned HOST_WIDE_INT) (RANGE) \\\n+\t\t\t   - (unsigned HOST_WIDE_INT)(POS)))\n+\n /* In explow.c */\n extern HOST_WIDE_INT trunc_int_for_mode\t(HOST_WIDE_INT, machine_mode);\n extern rtx plus_constant (machine_mode, rtx, HOST_WIDE_INT, bool = false);"}]}