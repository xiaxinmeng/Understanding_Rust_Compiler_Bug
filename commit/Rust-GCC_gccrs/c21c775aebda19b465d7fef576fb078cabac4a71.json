{"sha": "c21c775aebda19b465d7fef576fb078cabac4a71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxYzc3NWFlYmRhMTliNDY1ZDdmZWY1NzZmYjA3OGNhYmFjNGE3MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-03-27T15:40:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-03-27T15:40:09Z"}, "message": "tree-dfa.c (get_ref_base_and_extent): Replace bit_offset and computations with it with a HOST_WIDE_INT variable.\n\n2007-03-27  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (get_ref_base_and_extent): Replace bit_offset and\n\tcomputations with it with a HOST_WIDE_INT variable.\n\nFrom-SVN: r123259", "tree": {"sha": "3fb264f19864e00073dc1bd950919337dac2c6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fb264f19864e00073dc1bd950919337dac2c6d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21c775aebda19b465d7fef576fb078cabac4a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21c775aebda19b465d7fef576fb078cabac4a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21c775aebda19b465d7fef576fb078cabac4a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21c775aebda19b465d7fef576fb078cabac4a71/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3761d39ce4bcacf49e8e367e9fb82a3d720dddc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3761d39ce4bcacf49e8e367e9fb82a3d720dddc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3761d39ce4bcacf49e8e367e9fb82a3d720dddc6"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "7600b6e05f173b1e08f5597d9d2d13b155f353f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21c775aebda19b465d7fef576fb078cabac4a71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21c775aebda19b465d7fef576fb078cabac4a71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c21c775aebda19b465d7fef576fb078cabac4a71", "patch": "@@ -1,3 +1,8 @@\n+2007-03-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (get_ref_base_and_extent): Replace bit_offset and\n+\tcomputations with it with a HOST_WIDE_INT variable.  \n+\n 2007-03-26  Mike Stump  <mrs@apple.com>\n \n \t* config/rs6000/darwin.h (DARWIN_MINVERSION_SPEC): Add"}, {"sha": "b23c531cadc3934071e60c64dc29ec1750c4395f", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21c775aebda19b465d7fef576fb078cabac4a71/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21c775aebda19b465d7fef576fb078cabac4a71/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=c21c775aebda19b465d7fef576fb078cabac4a71", "patch": "@@ -859,7 +859,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n   HOST_WIDE_INT bitsize = -1;\n   HOST_WIDE_INT maxsize = -1;\n   tree size_tree = NULL_TREE;\n-  tree bit_offset = bitsize_zero_node;\n+  HOST_WIDE_INT bit_offset = 0;\n   bool seen_variable_array_ref = false;\n \n   gcc_assert (!SSA_VAR_P (exp));\n@@ -896,8 +896,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       switch (TREE_CODE (exp))\n \t{\n \tcase BIT_FIELD_REF:\n-\t  bit_offset = size_binop (PLUS_EXPR, bit_offset,\n-\t\t\t\t   TREE_OPERAND (exp, 2));\n+\t  bit_offset += tree_low_cst (TREE_OPERAND (exp, 2), 1);\n \t  break;\n \n \tcase COMPONENT_REF:\n@@ -907,14 +906,11 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \n \t    if (this_offset && TREE_CODE (this_offset) == INTEGER_CST)\n \t      {\n-\t\tthis_offset = size_binop (MULT_EXPR,\n-\t\t\t\t\t  fold_convert (bitsizetype,\n-\t\t\t\t\t\t\tthis_offset),\n-\t\t\t\t\t  bitsize_unit_node);\n-\t\tbit_offset = size_binop (PLUS_EXPR,\n-\t\t\t\t         bit_offset, this_offset);\n-\t\tbit_offset = size_binop (PLUS_EXPR, bit_offset,\n-\t\t\t\t\t DECL_FIELD_BIT_OFFSET (field));\n+\t\tHOST_WIDE_INT hthis_offset = tree_low_cst (this_offset, 1);\n+\n+\t\ththis_offset *= BITS_PER_UNIT;\n+\t\tbit_offset += hthis_offset;\n+\t\tbit_offset += tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1);\n \t      }\n \t    else\n \t      {\n@@ -925,8 +921,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\tif (maxsize != -1\n \t\t    && csize && host_integerp (csize, 1))\n \t\t  {\n-\t\t    maxsize = (TREE_INT_CST_LOW (csize)\n-\t\t\t       - TREE_INT_CST_LOW (bit_offset));\n+\t\t    maxsize = (TREE_INT_CST_LOW (csize) - bit_offset);\n \t\t  }\n \t\telse\n \t\t  maxsize = -1;\n@@ -941,17 +936,17 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t    tree low_bound = array_ref_low_bound (exp);\n \t    tree unit_size = array_ref_element_size (exp);\n \n-\t    if (! integer_zerop (low_bound))\n-\t      index = fold_build2 (MINUS_EXPR, TREE_TYPE (index),\n-\t\t\t\t   index, low_bound);\n-\t    index = size_binop (MULT_EXPR,\n-\t\t\t\tfold_convert (sizetype, index), unit_size);\n-\t    if (TREE_CODE (index) == INTEGER_CST)\n+\t    /* If the resulting bit-offset is constant, track it.  */\n+\t    if (host_integerp (index, 0)\n+\t\t&& host_integerp (low_bound, 0)\n+\t\t&& host_integerp (unit_size, 1))\n \t      {\n-\t\tindex = size_binop (MULT_EXPR,\n-\t\t\t\t    fold_convert (bitsizetype, index),\n-\t\t\t\t    bitsize_unit_node);\n-\t\tbit_offset = size_binop (PLUS_EXPR, bit_offset, index);\n+\t\tHOST_WIDE_INT hindex = tree_low_cst (index, 0);\n+\n+\t\thindex -= tree_low_cst (low_bound, 0);\n+\t\thindex *= tree_low_cst (unit_size, 1);\n+\t\thindex *= BITS_PER_UNIT;\n+\t\tbit_offset += hindex;\n \n \t\t/* An array ref with a constant index up in the structure\n \t\t   hierarchy will constrain the size of any variable array ref\n@@ -967,8 +962,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\tif (maxsize != -1\n \t\t    && asize && host_integerp (asize, 1))\n \t\t  {\n-\t\t    maxsize = (TREE_INT_CST_LOW (asize)\n-\t\t\t       - TREE_INT_CST_LOW (bit_offset));\n+\t\t    maxsize = (TREE_INT_CST_LOW (asize) - bit_offset);\n \t\t  }\n \t\telse\n \t\t  maxsize = -1;\n@@ -984,8 +978,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t  break;\n \n \tcase IMAGPART_EXPR:\n-\t  bit_offset = size_binop (PLUS_EXPR, bit_offset,\n-\t\t\t\t   bitsize_int (bitsize));\n+\t  bit_offset += bitsize;\n \t  break;\n \n \tcase VIEW_CONVERT_EXPR:\n@@ -1011,14 +1004,14 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n   if (seen_variable_array_ref\n       && maxsize != -1\n       && host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n-      && TREE_INT_CST_LOW (bit_offset) + maxsize\n-\t == TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))))\n+      && bit_offset + maxsize\n+\t   == (signed)TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))))\n     maxsize = -1;\n \n   /* ???  Due to negative offsets in ARRAY_REF we can end up with\n      negative bit_offset here.  We might want to store a zero offset\n      in this case.  */\n-  *poffset = TREE_INT_CST_LOW (bit_offset);\n+  *poffset = bit_offset;\n   *psize = bitsize;\n   *pmax_size = maxsize;\n "}]}