{"sha": "21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhNWI1NzVjZmJiNWNiMjM5NWNiZDA2ODljNzE4ZmE3NmY3YzY4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T09:25:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T09:25:26Z"}, "message": "[multiple changes]\n\n2010-10-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Output_References): Common handling for objects and\n\tformals of an anonymous access type.\n\n2010-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* make.adb (Scan_Make_Arg): Also pass -O to both compiler and linker.\n\n2010-10-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb: Fix check for illegal equality declaration in Ada2012\n\n2010-10-11  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_disp.adb (Check_Dispatching_Operation): When testing for issuing\n\ta warning about subprograms of a tagged type not being dispatching,\n\tlimit this to cases where the tagged type and the subprogram are\n\tdeclared within the same declaration list.\n\n2010-10-11  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* projects.texi, prj-attr.adb: Add new attribute documentation_dir.\n\nFrom-SVN: r165284", "tree": {"sha": "46d21e8ecd9d60ce42e83f3b64e35a1ce9fee130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d21e8ecd9d60ce42e83f3b64e35a1ce9fee130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/comments", "author": null, "committer": null, "parents": [{"sha": "0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0791fbe9c5fc4a6a5608b9dcc5d8055da33bc6fa"}], "stats": {"total": 132, "additions": 93, "deletions": 39}, "files": [{"sha": "87552d1dcf1553cfdac6fb46cd3e0d1c6144381a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -1,3 +1,27 @@\n+2010-10-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Output_References): Common handling for objects and\n+\tformals of an anonymous access type.\n+\n+2010-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* make.adb (Scan_Make_Arg): Also pass -O to both compiler and linker.\n+\n+2010-10-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb: Fix check for illegal equality declaration in Ada2012\n+\n+2010-10-11  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Operation): When testing for issuing\n+\ta warning about subprograms of a tagged type not being dispatching,\n+\tlimit this to cases where the tagged type and the subprogram are\n+\tdeclared within the same declaration list.\n+\n+2010-10-11  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* projects.texi, prj-attr.adb: Add new attribute documentation_dir.\n+\n 2010-10-11  Bob Duff  <duff@adacore.com>\n \n \t* par-ch9.adb, sem_aggr.adb, exp_ch5.adb, sem_ch3.adb, impunit.adb,"}, {"sha": "d87daec69b94dc6acf154b15b1e2877c553d7be0", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -1809,27 +1809,25 @@ package body Lib.Xref is\n                      Ctyp := '*';\n                   end if;\n \n-                  --  Special handling for access parameter\n+                  --  Special handling for access parameters and objects of\n+                  --  an anonymous access type.\n \n-                  declare\n-                     K : constant Entity_Kind := Ekind (Etype (XE.Ent));\n-\n-                  begin\n-                     if (K = E_Anonymous_Access_Type\n-                           or else\n-                         K = E_Anonymous_Access_Subprogram_Type\n-                            or else K =\n-                         E_Anonymous_Access_Protected_Subprogram_Type)\n-                       and then Is_Formal (XE.Ent)\n+                  if Ekind_In (Etype (XE.Ent),\n+                               E_Anonymous_Access_Type,\n+                               E_Anonymous_Access_Subprogram_Type,\n+                               E_Anonymous_Access_Protected_Subprogram_Type)\n+                  then\n+                     if Is_Formal (XE.Ent)\n+                       or else Ekind_In (XE.Ent, E_Variable, E_Constant)\n                      then\n                         Ctyp := 'p';\n+                     end if;\n \n-                        --  Special handling for Boolean\n+                     --  Special handling for Boolean\n \n-                     elsif Ctyp = 'e' and then Is_Boolean_Type (Ent) then\n-                        Ctyp := 'b';\n-                     end if;\n-                  end;\n+                  elsif Ctyp = 'e' and then Is_Boolean_Type (Ent) then\n+                     Ctyp := 'b';\n+                  end if;\n                end if;\n \n                --  Special handling for abstract types and operations"}, {"sha": "9aa812a2356ea435cd0f72ef79cd746edb28686d", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -8115,7 +8115,7 @@ package body Make is\n              or else Argv (2 .. Argv'Last) = \"pg\"\n              or else (Argv (2) = 'm' and then Argv'Last > 2)\n              or else (Argv (2) = 'f' and then Argv'Last > 2)\n-             or else (Argv (2) = 'O' and then Argv'Last > 2)\n+             or else Argv (2) = 'O'\n          then\n             Add_Switch (Argv, Compiler, And_Save => And_Save);\n             Add_Switch (Argv, Linker,   And_Save => And_Save);"}, {"sha": "91ae42cd41f7f18aca3f21dc33c28bd0e406b204", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -334,6 +334,7 @@ package body Prj.Attr is\n    \"SVvcs_kind#\" &\n    \"SVvcs_file_check#\" &\n    \"SVvcs_log_check#\" &\n+   \"SVdocumentation_dir#\" &\n \n    --  package Stack\n "}, {"sha": "979dc33ab2efa3f6c97ddf95856ff92e1fb9e2da", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -2874,6 +2874,7 @@ system (file). The text is between brackets ([]) if the index is optional.\n @item VCS_Kind @tab string @tab IDE @tab -\n @item VCS_File_Check @tab string @tab IDE @tab -\n @item VCS_Log_Check @tab string @tab IDE @tab -\n+@item Documentation_Dir @tab string @tab IDE @tab -\n @headitem\n    Configuration files @tab @tab @tab See gprbuild manual\n @item Default_Language @tab string @tab - @tab -"}, {"sha": "12635f49a59eb3462da70d49f2d2eca7874d1dc8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -5899,32 +5899,55 @@ package body Sem_Ch6 is\n         and then Is_Record_Type (Typ)\n         and then not Is_Tagged_Type (Typ)\n       then\n+         --  If the type is not declared in a package, or if we are in the\n+         --  body of the package or in some other scope, the new operation is\n+         --  not primitive, and therefore legal, though suspicious. If the\n+         --  type is a generic actual (sub)type, the operation is not primitive\n+         --  either because the base type is declared elsewhere.\n+\n          if Is_Frozen (Typ) then\n-            Error_Msg_NE\n-              (\"equality operator must be declared \"\n-                & \"before type& is frozen\", Eq_Op, Typ);\n+            if Ekind (Scope (Typ)) /= E_Package\n+              or else Scope (Typ) /= Current_Scope\n+            then\n+               null;\n \n-            Obj_Decl := Next (Parent (Typ));\n-            while Present (Obj_Decl)\n-              and then Obj_Decl /= Decl\n-            loop\n-               if Nkind (Obj_Decl) = N_Object_Declaration\n-                 and then Etype (Defining_Identifier (Obj_Decl)) = Typ\n-               then\n-                  Error_Msg_NE (\"type& is frozen by declaration?\",\n-                     Obj_Decl, Typ);\n-                  Error_Msg_N\n-                    (\"\\an equality operator cannot be declared after this \"\n-                      & \"point ('R'M 4.5.2 (9.8)) (Ada 2012))?\", Obj_Decl);\n-                  exit;\n-               end if;\n+            elsif Is_Generic_Actual_Type (Typ) then\n+               null;\n \n-               Next (Obj_Decl);\n-            end loop;\n+            elsif In_Package_Body (Scope (Typ)) then\n+               null;   --  warrants a warning ???\n+\n+            else\n+               Error_Msg_NE\n+                 (\"equality operator must be declared \"\n+                   & \"before type& is frozen\", Eq_Op, Typ);\n+\n+               Obj_Decl := Next (Parent (Typ));\n+               while Present (Obj_Decl)\n+                 and then Obj_Decl /= Decl\n+               loop\n+                  if Nkind (Obj_Decl) = N_Object_Declaration\n+                    and then Etype (Defining_Identifier (Obj_Decl)) = Typ\n+                  then\n+                     Error_Msg_NE (\"type& is frozen by declaration?\",\n+                        Obj_Decl, Typ);\n+                     Error_Msg_N\n+                       (\"\\an equality operator cannot be declared after this \"\n+                         & \"point ('R'M 4.5.2 (9.8)) (Ada 2012))?\", Obj_Decl);\n+                     exit;\n+                  end if;\n+\n+                  Next (Obj_Decl);\n+               end loop;\n+            end if;\n \n          elsif not In_Same_List (Parent (Typ), Decl)\n            and then not Is_Limited_Type (Typ)\n          then\n+\n+            --  This makes it illegal to have a primitive equality declared in\n+            --  the private part if the type is visible.\n+\n             Error_Msg_N (\"equality operator appears too late\", Eq_Op);\n          end if;\n       end if;"}, {"sha": "478819af0077d86b7941563243e8e72507239c4c", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a5b575cfbb5cb2395cbd0689c718fa76f7c686/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=21a5b575cfbb5cb2395cbd0689c718fa76f7c686", "patch": "@@ -1044,9 +1044,16 @@ package body Sem_Disp is\n          --  If the type is not frozen yet and we are not in the overriding\n          --  case it looks suspiciously like an attempt to define a primitive\n          --  operation, which requires the declaration to be in a package spec\n-         --  (3.2.3(6)).\n-\n-         elsif not Is_Frozen (Tagged_Type) then\n+         --  (3.2.3(6)). Only report cases where the type and subprogram are\n+         --  in the same declaration list (by comparing the unit nodes reached\n+         --  via Parent links), to avoid spurious warnings on subprograms in\n+         --  instance bodies when the type is declared in the instance spec but\n+         --  hasn't been frozen by the instance body.\n+\n+         elsif not Is_Frozen (Tagged_Type)\n+           and then\n+             Parent (Parent (Tagged_Type)) = Parent (Parent (Parent (Subp)))\n+         then\n             Error_Msg_N\n               (\"?not dispatching (must be defined in a package spec)\", Subp);\n             return;"}]}