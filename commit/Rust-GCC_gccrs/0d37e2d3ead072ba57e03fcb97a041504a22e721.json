{"sha": "0d37e2d3ead072ba57e03fcb97a041504a22e721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzN2UyZDNlYWQwNzJiYTU3ZTAzZmNiOTdhMDQxNTA0YTIyZTcyMQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-26T17:09:24Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-26T17:11:30Z"}, "message": "[PR99766] Consider relaxed memory associated more with memory instead of special memory.\n\nRelaxed memory should be considered more like memory then special memory.\n\ngcc/ChangeLog:\n\n\tPR target/99766\n\t* ira-costs.c (record_reg_classes): Put case with\n\tCT_RELAXED_MEMORY adjacent to one with CT_MEMORY.\n\t* ira.c (ira_setup_alts): Ditto.\n\t* lra-constraints.c (process_alt_operands): Ditto.\n\t* recog.c (asm_operand_ok): Ditto.\n\t* reload.c (find_reloads): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99766\n\t* g++.target/aarch64/sve/pr99766.C: New.", "tree": {"sha": "01956ec203c173039a8d1838fcd6c724f1db6cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01956ec203c173039a8d1838fcd6c724f1db6cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d37e2d3ead072ba57e03fcb97a041504a22e721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d37e2d3ead072ba57e03fcb97a041504a22e721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d37e2d3ead072ba57e03fcb97a041504a22e721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d37e2d3ead072ba57e03fcb97a041504a22e721/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8b0c8e243bdc122a9ddd42030275494b1148ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8b0c8e243bdc122a9ddd42030275494b1148ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8b0c8e243bdc122a9ddd42030275494b1148ff"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "10727b5ff9efcd8501c359e72aafde445f3d56dc", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=0d37e2d3ead072ba57e03fcb97a041504a22e721", "patch": "@@ -773,14 +773,14 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t      break;\n \n \t\t    case CT_MEMORY:\n+\t\t    case CT_RELAXED_MEMORY:\n \t\t      /* Every MEM can be reloaded to fit.  */\n \t\t      insn_allows_mem[i] = allows_mem[i] = 1;\n \t\t      if (MEM_P (op))\n \t\t\twin = 1;\n \t\t      break;\n \n \t\t    case CT_SPECIAL_MEMORY:\n-\t\t    case CT_RELAXED_MEMORY:\n \t\t      insn_allows_mem[i] = allows_mem[i] = 1;\n \t\t      if (MEM_P (extract_mem_from_operand (op))\n \t\t\t  && constraint_satisfied_p (op, cn))"}, {"sha": "b93588d8a9fc4707fba0a234d1e16bfbadd11ab6", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=0d37e2d3ead072ba57e03fcb97a041504a22e721", "patch": "@@ -1871,10 +1871,10 @@ ira_setup_alts (rtx_insn *insn)\n \t\t\t  goto op_success;\n \n \t\t\tcase CT_MEMORY:\n+\t\t\tcase CT_RELAXED_MEMORY:\n \t\t\t  mem = op;\n \t\t\t  /* Fall through.  */\n \t\t\tcase CT_SPECIAL_MEMORY:\n-\t\t\tcase CT_RELAXED_MEMORY:\n \t\t\t  if (!mem)\n \t\t\t    mem = extract_mem_from_operand (op);\n \t\t\t  if (MEM_P (mem))"}, {"sha": "9993065f8d637888374970636ee9f55907a88d85", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=0d37e2d3ead072ba57e03fcb97a041504a22e721", "patch": "@@ -2417,6 +2417,7 @@ process_alt_operands (int only_alternative)\n \t\t      break;\n \n \t\t    case CT_MEMORY:\n+\t\t    case CT_RELAXED_MEMORY:\n \t\t      if (MEM_P (op)\n \t\t\t  && satisfies_memory_constraint_p (op, cn))\n \t\t\twin = true;\n@@ -2459,7 +2460,6 @@ process_alt_operands (int only_alternative)\n \t\t      break;\n \n \t\t    case CT_SPECIAL_MEMORY:\n-\t\t    case CT_RELAXED_MEMORY:\n \t\t      if (satisfies_memory_constraint_p (op, cn))\n \t\t\twin = true;\n \t\t      else if (spilled_pseudo_p (op))"}, {"sha": "eb617f11163bcb56f471902f171a08561d55925b", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=0d37e2d3ead072ba57e03fcb97a041504a22e721", "patch": "@@ -2267,10 +2267,10 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t      break;\n \n \t    case CT_MEMORY:\n+\t    case CT_RELAXED_MEMORY:\n \t      mem = op;\n \t      /* Fall through.  */\n \t    case CT_SPECIAL_MEMORY:\n-\t    case CT_RELAXED_MEMORY:\n \t      /* Every memory operand can be reloaded to fit.  */\n \t      if (!mem)\n \t\tmem = extract_mem_from_operand (op);"}, {"sha": "461fd0272eb5af4222f5c90a63fb32f0f3616ebb", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=0d37e2d3ead072ba57e03fcb97a041504a22e721", "patch": "@@ -3471,6 +3471,7 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t\t\tbreak;\n \n \t\t      case CT_MEMORY:\n+\t\t      case CT_RELAXED_MEMORY:\n \t\t\tif (force_reload)\n \t\t\t  break;\n \t\t\tif (constraint_satisfied_p (operand, cn))\n@@ -3504,7 +3505,6 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t\t\tbreak;\n \n \t\t      case CT_SPECIAL_MEMORY:\n-\t\t      case CT_RELAXED_MEMORY:\n \t\t\tif (force_reload)\n \t\t\t  break;\n \t\t\tif (constraint_satisfied_p (operand, cn))"}, {"sha": "0ca8aee5798741ec62737640ba72c61e05d482f2", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr99766.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr99766.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37e2d3ead072ba57e03fcb97a041504a22e721/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr99766.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr99766.C?ref=0d37e2d3ead072ba57e03fcb97a041504a22e721", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -march=armv8.2-a+sve\" } */\n+typedef float a __attribute__((__mode__(HF)));\n+typedef struct {\n+  a b;\n+  a c;\n+} d;\n+int e;\n+d *f, *g;\n+__fp16 h;\n+void j() {\n+  for (int i;; ++i) {\n+    auto l = &f[i];\n+    for (int k; k < e;) {\n+      k = 0;\n+      for (; k < e; ++k)\n+        g[k].b = l[k].b * l[k].c;\n+    }\n+    for (int k; k < e; ++k) {\n+      g[k].b *= h;\n+      g[k].c *= h;\n+    }\n+  }\n+}"}]}