{"sha": "380e5ca402e4dc6441a903de5ff88593f92f71d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwZTVjYTQwMmU0ZGM2NDQxYTkwM2RlNWZmODg1OTNmOTJmNzFkNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-04-27T20:35:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-04-27T20:35:54Z"}, "message": "configure.ac: Check for ld --sysroot support.\n\n\t* configure.ac: Check for ld --sysroot support.\n\t* gcc.c: Document %R specifier for specs.\n\t(SYSROOT_SPEC): New macro.\n\t(sysroot_spec): New variable.\n\t(static_specs): Add sysroot_spec.\n\t(main): Pass the sysroot spec to the linker if appropriate.\n\t* configure: Regenerated.\n\t* config.in: Likewise.\n\nFrom-SVN: r98880", "tree": {"sha": "e35f58f5c5ef495d2de849689e0398b292c98c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e35f58f5c5ef495d2de849689e0398b292c98c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380e5ca402e4dc6441a903de5ff88593f92f71d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380e5ca402e4dc6441a903de5ff88593f92f71d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380e5ca402e4dc6441a903de5ff88593f92f71d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380e5ca402e4dc6441a903de5ff88593f92f71d7/comments", "author": null, "committer": null, "parents": [{"sha": "c7a5c6238107a92afe645481a7ad770289b274ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a5c6238107a92afe645481a7ad770289b274ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a5c6238107a92afe645481a7ad770289b274ca"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "c02765c856b0111398a5510e1e860b2e9a18c9b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=380e5ca402e4dc6441a903de5ff88593f92f71d7", "patch": "@@ -1,3 +1,14 @@\n+2005-04-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* configure.ac: Check for ld --sysroot support.\n+\t* gcc.c: Document %R specifier for specs.\n+\t(SYSROOT_SPEC): New macro.\n+\t(sysroot_spec): New variable.\n+\t(static_specs): Add sysroot_spec.\n+\t(main): Pass the sysroot spec to the linker if appropriate.\n+\t* configure: Regenerated.\n+\t* config.in: Likewise.\n+\n 2005-04-27  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \t* fold-const.c (fold_binary): Use build_fold_addr_expr"}, {"sha": "eae8b5465c1094a27f9b1709c8075bd0bedf9bb8", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=380e5ca402e4dc6441a903de5ff88593f92f71d7", "patch": "@@ -461,6 +461,9 @@\n /* Define if your linker supports -Bstatic/-Bdynamic option. */\n #undef HAVE_LD_STATIC_DYNAMIC\n \n+/* Define if your linker supports --sysroot. */\n+#undef HAVE_LD_SYSROOT\n+\n /* Define to 1 if you have the <limits.h> header file. */\n #undef HAVE_LIMITS_H\n "}, {"sha": "bf9966f4340808861babe0b498b33c93bab764ba", "filename": "gcc/configure", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=380e5ca402e4dc6441a903de5ff88593f92f71d7", "patch": "@@ -15050,6 +15050,32 @@ _ACEOF\n     ;;\n esac\n \n+echo \"$as_me:$LINENO: checking linker --sysroot support\" >&5\n+echo $ECHO_N \"checking linker --sysroot support... $ECHO_C\" >&6\n+if test \"${gcc_cv_ld_sysroot+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_ld_sysroot=no\n+  if test $in_tree_ld = yes ; then\n+      if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 16 -o \"$gcc_cv_gld_major_version\" -gt 2 ; then\n+        gcc_cv_ld_sysroot = yes\n+      fi\n+  elif test x$gcc_cv_ld != x; then\n+    if $gcc_cv_ld --help 2>/dev/null | grep sysroot > /dev/null; then\n+      gcc_cv_ld_sysroot=yes\n+    fi\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_ld_sysroot\" >&5\n+echo \"${ECHO_T}$gcc_cv_ld_sysroot\" >&6\n+if test x\"$gcc_cv_ld_sysroot\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LD_SYSROOT 1\n+_ACEOF\n+\n+fi\n+\n if test x$with_sysroot = x && test x$host = x$target \\\n    && test \"$prefix\" != \"/usr\" && test \"x$prefix\" != \"x$local_prefix\" ; then\n "}, {"sha": "23c914de44366aeb7915db3f6f3a88efbc821831", "filename": "gcc/configure.ac", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=380e5ca402e4dc6441a903de5ff88593f92f71d7", "patch": "@@ -3024,6 +3024,23 @@ EOF\n     ;;\n esac\n \n+AC_CACHE_CHECK(linker --sysroot support,\n+  gcc_cv_ld_sysroot,\n+  [gcc_cv_ld_sysroot=no\n+  if test $in_tree_ld = yes ; then\n+      if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 16 -o \"$gcc_cv_gld_major_version\" -gt 2 ; then\n+        gcc_cv_ld_sysroot = yes\n+      fi\n+  elif test x$gcc_cv_ld != x; then \n+    if $gcc_cv_ld --help 2>/dev/null | grep sysroot > /dev/null; then\n+      gcc_cv_ld_sysroot=yes\n+    fi\n+  fi])\n+if test x\"$gcc_cv_ld_sysroot\" = xyes; then\n+  AC_DEFINE(HAVE_LD_SYSROOT, 1,\n+  [Define if your linker supports --sysroot.])\n+fi\t  \n+\n if test x$with_sysroot = x && test x$host = x$target \\\n    && test \"$prefix\" != \"/usr\" && test \"x$prefix\" != \"x$local_prefix\" ; then\n   AC_DEFINE_UNQUOTED(PREFIX_INCLUDE_DIR, \"$prefix/include\","}, {"sha": "1a0418d9ed070e1c0ce40ee1e05840cf05aa280b", "filename": "gcc/gcc.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380e5ca402e4dc6441a903de5ff88593f92f71d7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=380e5ca402e4dc6441a903de5ff88593f92f71d7", "patch": "@@ -460,6 +460,8 @@ or with constant text in a single argument.\n  %l     process LINK_SPEC as a spec.\n  %L     process LIB_SPEC as a spec.\n  %G     process LIBGCC_SPEC as a spec.\n+ %R     Output the concatenation of target_system_root and\n+        target_sysroot_suffix.\n  %S     process STARTFILE_SPEC as a spec.  A capital S is actually used here.\n  %E     process ENDFILE_SPEC as a spec.  A capital E is actually used here.\n  %C     process CPP_SPEC as a spec.\n@@ -701,6 +703,10 @@ proper position among the other output files.  */\n # define STARTFILE_PREFIX_SPEC \"\"\n #endif\n \n+#ifndef SYSROOT_SPEC\n+# define SYSROOT_SPEC \"--sysroot=%R\"\n+#endif\n+\n #ifndef SYSROOT_SUFFIX_SPEC\n # define SYSROOT_SUFFIX_SPEC \"\"\n #endif\n@@ -728,6 +734,7 @@ static const char *linker_name_spec = LINKER_NAME;\n static const char *link_command_spec = LINK_COMMAND_SPEC;\n static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n static const char *startfile_prefix_spec = STARTFILE_PREFIX_SPEC;\n+static const char *sysroot_spec = SYSROOT_SPEC;\n static const char *sysroot_suffix_spec = SYSROOT_SUFFIX_SPEC;\n static const char *sysroot_hdrs_suffix_spec = SYSROOT_HEADERS_SUFFIX_SPEC;\n \n@@ -1532,6 +1539,7 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"md_startfile_prefix\",\t&md_startfile_prefix),\n   INIT_STATIC_SPEC (\"md_startfile_prefix_1\",\t&md_startfile_prefix_1),\n   INIT_STATIC_SPEC (\"startfile_prefix_spec\",\t&startfile_prefix_spec),\n+  INIT_STATIC_SPEC (\"sysroot_spec\",             &sysroot_spec),\n   INIT_STATIC_SPEC (\"sysroot_suffix_spec\",\t&sysroot_suffix_spec),\n   INIT_STATIC_SPEC (\"sysroot_hdrs_suffix_spec\",\t&sysroot_hdrs_suffix_spec),\n };\n@@ -6148,6 +6156,19 @@ main (int argc, const char **argv)\n         target_sysroot_suffix = xstrdup (argbuf[argbuf_index -1]);\n     }\n \n+#ifdef HAVE_LD_SYSROOT\n+  /* Pass the --sysroot option to the linker, if it supports that.  If\n+     there is a sysroot_suffix_spec, it has already been processed by\n+     this point, so target_system_root really is the system root we\n+     should be using.  */\n+  if (target_system_root)\n+    {\n+      obstack_grow (&obstack, \"%(sysroot_spec) \", strlen (\"%(sysroot_spec) \"));\n+      obstack_grow0 (&obstack, link_spec, strlen (link_spec));\n+      set_spec (\"link\", obstack_finish (&obstack));\n+    }\n+#endif\n+\n   /* Process sysroot_hdrs_suffix_spec.  */\n   if (*sysroot_hdrs_suffix_spec != 0\n       && do_spec_2 (sysroot_hdrs_suffix_spec) == 0)"}]}