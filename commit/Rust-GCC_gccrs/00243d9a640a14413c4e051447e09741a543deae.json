{"sha": "00243d9a640a14413c4e051447e09741a543deae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyNDNkOWE2NDBhMTQ0MTNjNGUwNTE0NDdlMDk3NDFhNTQzZGVhZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-14T22:44:07Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-19T09:40:55Z"}, "message": "New mklog script.\n\ncontrib/ChangeLog:\n\n2020-05-15  Martin Liska  <mliska@suse.cz>\n\n\t* gcc-git-customization.sh: Add\n\talias.gcc-mklog new hook.\n\t* mklog.py: New file.\n\t* test_mklog.py: New file.", "tree": {"sha": "de023e5565bd712ddde87613321518fa4d9c29b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de023e5565bd712ddde87613321518fa4d9c29b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00243d9a640a14413c4e051447e09741a543deae", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7DqacACgkQTcGC3A+n\nN4UQtQgAq6b0km+PVYpSroqQejspn2mYOrSt6y7Wtr4y2Kpy2eQh7dzuoK4lGDP0\nrwz8UK9nHLWIqCu3xvm2r3D1pAMzdDpkdzlm+Z8AWcedt0AqSD89ZXj0Q2hWHqVu\njFfPvjijsK9lbbbeSSFzuEo36KaMg+3oOa7mvfUBnG805uvaxGDYKf3TVza5Izv+\n00oYVuQUhCq9Dq/H5LfZm1mlwqT6AZYFYKuiE6X/l4lVTPceYfgBUrb9VRxCdxg9\nS+7WrpPcRdVj/R2idgZjJh5w8D4R49YdWHsHnIvS76ZeMzFI8BG9vSyoFnW2HBBl\nERhpvJ8gJGCn80hGWCHyaJBKihLWwg==\n=9tfA\n-----END PGP SIGNATURE-----", "payload": "tree de023e5565bd712ddde87613321518fa4d9c29b8\nparent e576ed7a9dd71049e0af015137f75a9aa34a4844\nauthor Martin Liska <mliska@suse.cz> 1589496247 +0200\ncommitter Martin Liska <mliska@suse.cz> 1589881255 +0200\n\nNew mklog script.\n\ncontrib/ChangeLog:\n\n2020-05-15  Martin Liska  <mliska@suse.cz>\n\n\t* gcc-git-customization.sh: Add\n\talias.gcc-mklog new hook.\n\t* mklog.py: New file.\n\t* test_mklog.py: New file.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00243d9a640a14413c4e051447e09741a543deae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00243d9a640a14413c4e051447e09741a543deae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00243d9a640a14413c4e051447e09741a543deae/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e576ed7a9dd71049e0af015137f75a9aa34a4844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e576ed7a9dd71049e0af015137f75a9aa34a4844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e576ed7a9dd71049e0af015137f75a9aa34a4844"}], "stats": {"total": 577, "additions": 577, "deletions": 0}, "files": [{"sha": "85f067507f132168edeef806a8c0e73eb7f7c303", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00243d9a640a14413c4e051447e09741a543deae/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00243d9a640a14413c4e051447e09741a543deae/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=00243d9a640a14413c4e051447e09741a543deae", "patch": "@@ -1,3 +1,10 @@\n+2020-05-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-git-customization.sh: Add\n+\talias.gcc-mklog new hook.\n+\t* mklog.py: New file.\n+\t* test_mklog.py: New file.\n+\n 2020-05-19  Martin Liska  <mliska@suse.cz>\n \n \t* legacy/mklog: Moved from mklog."}, {"sha": "91d378ba32af403c9d613149a3e7a3c04c698764", "filename": "contrib/gcc-git-customization.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00243d9a640a14413c4e051447e09741a543deae/contrib%2Fgcc-git-customization.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00243d9a640a14413c4e051447e09741a543deae/contrib%2Fgcc-git-customization.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-git-customization.sh?ref=00243d9a640a14413c4e051447e09741a543deae", "patch": "@@ -27,6 +27,8 @@ git config alias.gcc-undescr \\!\"f() { o=\\$(git config --get gcc-config.upstream)\n \n git config alias.gcc-verify '!f() { \"`git rev-parse --show-toplevel`/contrib/gcc-changelog/git_check_commit.py\" $@; } ; f'\n \n+git config alias.gcc-mklog '!f() { \"`git rev-parse --show-toplevel`/contrib/mklog.py\" $@; } ; f'\n+\n # Make diff on MD files use \"(define\" as a function marker.\n # Use this in conjunction with a .gitattributes file containing\n # *.md    diff=md"}, {"sha": "cc3f937c253ecf88196fd05c7f779ce119043fe8", "filename": "contrib/mklog.py", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00243d9a640a14413c4e051447e09741a543deae/contrib%2Fmklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00243d9a640a14413c4e051447e09741a543deae/contrib%2Fmklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog.py?ref=00243d9a640a14413c4e051447e09741a543deae", "patch": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+# This script parses a .diff file generated with 'diff -up' or 'diff -cp'\n+# and adds a skeleton ChangeLog file to the file. It does not try to be\n+# too smart when parsing function names, but it produces a reasonable\n+# approximation.\n+#\n+# Author: Martin Liska <mliska@suse.cz>\n+\n+import argparse\n+import bs4\n+import os\n+import re\n+import requests\n+import sys\n+\n+from unidiff import PatchSet\n+\n+pr_regex = re.compile(r'(\\/(\\/|\\*)|[Cc*!])\\s+(?P<pr>PR [a-z+-]+\\/[0-9]+)')\n+identifier_regex = re.compile(r'^([a-zA-Z0-9_#].*)')\n+comment_regex = re.compile(r'^\\/\\*')\n+struct_regex = re.compile(r'^((class|struct|union|enum)\\s+[a-zA-Z0-9_]+)')\n+macro_regex = re.compile(r'#\\s*(define|undef)\\s+([a-zA-Z0-9_]+)')\n+super_macro_regex = re.compile(r'^DEF[A-Z0-9_]+\\s*\\(([a-zA-Z0-9_]+)')\n+fn_regex = re.compile(r'([a-zA-Z_][^()\\s]*)\\s*\\([^*]')\n+template_and_param_regex = re.compile(r'<[^<>]*>')\n+\n+function_extensions = set(['.c', '.cpp', '.C', '.cc', '.h', '.inc', '.def'])\n+\n+help_message = \"\"\"\\\n+Generate ChangeLog template for PATCH.\n+PATCH must be generated using diff(1)'s -up or -cp options\n+(or their equivalent in git).\n+\"\"\"\n+\n+script_folder = os.path.realpath(__file__)\n+gcc_root = os.path.dirname(os.path.dirname(script_folder))\n+\n+\n+def find_changelog(path):\n+    folder = os.path.split(path)[0]\n+    while True:\n+        if os.path.exists(os.path.join(gcc_root, folder, 'ChangeLog')):\n+            return folder\n+        folder = os.path.dirname(folder)\n+        if folder == '':\n+            return folder\n+    raise AssertionError()\n+\n+\n+def extract_function_name(line):\n+    if comment_regex.match(line):\n+        return None\n+    m = struct_regex.search(line)\n+    if m:\n+        # Struct declaration\n+        return m.group(1)\n+    m = macro_regex.search(line)\n+    if m:\n+        # Macro definition\n+        return m.group(2)\n+    m = super_macro_regex.search(line)\n+    if m:\n+        # Supermacro\n+        return m.group(1)\n+    m = fn_regex.search(line)\n+    if m:\n+        # Discard template and function parameters.\n+        fn = m.group(1)\n+        fn = re.sub(template_and_param_regex, '', fn)\n+        return fn.rstrip()\n+    return None\n+\n+\n+def try_add_function(functions, line):\n+    fn = extract_function_name(line)\n+    if fn and fn not in functions:\n+        functions.append(fn)\n+    return bool(fn)\n+\n+\n+def sort_changelog_files(changed_file):\n+    return (changed_file.is_added_file, changed_file.is_removed_file)\n+\n+\n+def get_pr_titles(prs):\n+    if not prs:\n+        return ''\n+\n+    output = ''\n+    for pr in prs:\n+        id = pr.split('/')[-1]\n+        r = requests.get('https://gcc.gnu.org/PR%s' % id)\n+        html = bs4.BeautifulSoup(r.text, features='lxml')\n+        title = html.title.text\n+        title = title[title.find('\u2013') + 1:].strip()\n+        output += '%s - %s\\n' % (pr, title)\n+    output += '\\n'\n+    return output\n+\n+def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n+    changelogs = {}\n+    changelog_list = []\n+    prs = []\n+    out = ''\n+    diff = PatchSet(data)\n+\n+    for file in diff:\n+        changelog = find_changelog(file.path)\n+        if changelog not in changelogs:\n+            changelogs[changelog] = []\n+            changelog_list.append(changelog)\n+        changelogs[changelog].append(file)\n+\n+        # Extract PR entries from newly added tests\n+        if 'testsuite' in file.path and file.is_added_file:\n+            for line in list(file)[0]:\n+                m = pr_regex.search(line.value)\n+                if m:\n+                    pr = m.group('pr')\n+                    if pr not in prs:\n+                        prs.append(pr)\n+                else:\n+                    break\n+\n+    if fill_pr_titles:\n+        out += get_pr_titles(prs)\n+\n+    # sort ChangeLog so that 'testsuite' is at the end\n+    for changelog in sorted(changelog_list, key=lambda x: 'testsuite' in x):\n+        files = changelogs[changelog]\n+        out += '%s:\\n' % os.path.join(changelog, 'ChangeLog')\n+        out += '\\n'\n+        for pr in prs:\n+            out += '\\t%s\\n' % pr\n+        # new and deleted files should be at the end\n+        for file in sorted(files, key=sort_changelog_files):\n+            assert file.path.startswith(changelog)\n+            in_tests = 'testsuite' in changelog or 'testsuite' in file.path\n+            relative_path = file.path[len(changelog):].lstrip('/')\n+            functions = []\n+            if file.is_added_file:\n+                msg = 'New test' if in_tests else 'New file'\n+                out += '\\t* %s: %s.\\n' % (relative_path, msg)\n+            elif file.is_removed_file:\n+                out += '\\t* %s: Removed.\\n' % (relative_path)\n+            else:\n+                if not no_functions:\n+                    for hunk in file:\n+                        # Do not add function names for testsuite files\n+                        extension = os.path.splitext(relative_path)[1]\n+                        if not in_tests and extension in function_extensions:\n+                            last_fn = None\n+                            modified_visited = False\n+                            success = False\n+                            for line in hunk:\n+                                m = identifier_regex.match(line.value)\n+                                if line.is_added or line.is_removed:\n+                                    if not line.value.strip():\n+                                        continue\n+                                    modified_visited = True\n+                                    if m and try_add_function(functions,\n+                                                              m.group(1)):\n+                                        last_fn = None\n+                                        success = True\n+                                elif line.is_context:\n+                                    if last_fn and modified_visited:\n+                                        try_add_function(functions, last_fn)\n+                                        last_fn = None\n+                                        modified_visited = False\n+                                        success = True\n+                                    elif m:\n+                                        last_fn = m.group(1)\n+                                        modified_visited = False\n+                            if not success:\n+                                try_add_function(functions,\n+                                                 hunk.section_header)\n+                if functions:\n+                    out += '\\t* %s (%s):\\n' % (relative_path, functions[0])\n+                    for fn in functions[1:]:\n+                        out += '\\t(%s):\\n' % fn\n+                else:\n+                    out += '\\t* %s:\\n' % relative_path\n+        out += '\\n'\n+    return out\n+\n+\n+if __name__ == '__main__':\n+    parser = argparse.ArgumentParser(description=help_message)\n+    parser.add_argument('input', nargs='?',\n+                        help='Patch file (or missing, read standard input)')\n+    parser.add_argument('-s', '--no-functions', action='store_true',\n+                        help='Do not generate function names in ChangeLogs')\n+    parser.add_argument('-p', '--fill-up-bug-titles', action='store_true',\n+                        help='Download title of mentioned PRs')\n+    args = parser.parse_args()\n+    if args.input == '-':\n+        args.input = None\n+\n+    input = open(args.input) if args.input else sys.stdin\n+    data = input.read()\n+    output = generate_changelog(data, args.no_functions,\n+                                args.fill_up_bug_titles)\n+    print(output, end='')"}, {"sha": "ca7b9e79d959980788694cd5e443139350eb807f", "filename": "contrib/test_mklog.py", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00243d9a640a14413c4e051447e09741a543deae/contrib%2Ftest_mklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00243d9a640a14413c4e051447e09741a543deae/contrib%2Ftest_mklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftest_mklog.py?ref=00243d9a640a14413c4e051447e09741a543deae", "patch": "@@ -0,0 +1,345 @@\n+#!/usr/bin/env python3\n+\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+# This script parses a .diff file generated with 'diff -up' or 'diff -cp'\n+# and adds a skeleton ChangeLog file to the file. It does not try to be\n+# too smart when parsing function names, but it produces a reasonable\n+# approximation.\n+#\n+# Author: Martin Liska <mliska@suse.cz>\n+\n+import unittest\n+\n+from mklog import generate_changelog\n+\n+PATCH1 = '''\\\n+diff --git a/gcc/config/riscv/riscv.h b/gcc/config/riscv/riscv.h\n+index 567c23380fe..e6209ede9d6 100644\n+--- a/gcc/config/riscv/riscv.h\n++++ b/gcc/config/riscv/riscv.h\n+@@ -920,6 +920,7 @@ extern unsigned riscv_stack_boundary;\n+ #define SHIFT_RS1 15\n+ #define SHIFT_IMM 20\n+ #define IMM_BITS 12\n++#define C_S_BITS 5\n+ #define C_SxSP_BITS 6\n+ \n+ #define IMM_REACH (1LL << IMM_BITS)\n+@@ -929,6 +930,10 @@ extern unsigned riscv_stack_boundary;\n+ #define SWSP_REACH (4LL << C_SxSP_BITS)\n+ #define SDSP_REACH (8LL << C_SxSP_BITS)\n+ \n++/* This is the maximum value that can be represented in a compressed load/store\n++   offset (an unsigned 5-bit value scaled by 4).  */\n++#define CSW_MAX_OFFSET ((4LL << C_S_BITS) - 1) & ~3\n++\n+ /* Called from RISCV_REORG, this is defined in riscv-sr.c.  */\n+ \n+ extern void riscv_remove_unneeded_save_restore_calls (void);\n+\n+'''\n+\n+EXPECTED1 = '''\\\n+gcc/ChangeLog:\n+\n+\t* config/riscv/riscv.h (C_S_BITS):\n+\t(CSW_MAX_OFFSET):\n+\n+'''\n+\n+PATCH2 = '''\\\n+diff --git a/gcc/targhooks.h b/gcc/targhooks.h\n+index 9704d23f1db..b572a36e8cf 100644\n+--- a/gcc/targhooks.h\n++++ b/gcc/targhooks.h\n+@@ -120,7 +120,7 @@ extern bool default_empty_mask_is_expensive (unsigned);\n+ extern void *default_init_cost (class loop *);\n+ extern unsigned default_add_stmt_cost (class vec_info *, void *, int,\n+ \t\t\t\t       enum vect_cost_for_stmt,\n+-\t\t\t\t       class _stmt_vec_info *, int,\n++\t\t\t\t       class _stmt_vec_info *, tree, int,\n+ \t\t\t\t       enum vect_cost_model_location);\n+ extern void default_finish_cost (void *, unsigned *, unsigned *, unsigned *);\n+ extern void default_destroy_cost_data (void *);\n+@@ -186,6 +186,7 @@ extern tree default_emutls_var_init (tree, tree, tree);\n+ extern unsigned int default_hard_regno_nregs (unsigned int, machine_mode);\n+ extern bool default_hard_regno_scratch_ok (unsigned int);\n+ extern bool default_mode_dependent_address_p (const_rtx, addr_space_t);\n++extern bool default_new_address_profitable_p (rtx, rtx_insn *, rtx);\n+ extern bool default_target_option_valid_attribute_p (tree, tree, tree, int);\n+ extern bool default_target_option_pragma_parse (tree, tree);\n+ extern bool default_target_can_inline_p (tree, tree);\n+\n+'''\n+\n+EXPECTED2 = '''\\\n+gcc/ChangeLog:\n+\n+\t* targhooks.h (default_add_stmt_cost):\n+\t(default_new_address_profitable_p):\n+\n+'''\n+\n+PATCH3 = '''\\\n+diff --git a/libcpp/include/cpplib.h b/libcpp/include/cpplib.h\n+index 2b1e33f94ae..7f47402f9b9 100644\n+--- a/libcpp/include/cpplib.h\n++++ b/libcpp/include/cpplib.h\n+@@ -173,7 +173,7 @@ enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X,\n+ \t     CLK_STDC2X,\n+ \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n+ \t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,\n+-\t     CLK_GNUCXX2A, CLK_CXX2A, CLK_ASM};\n++\t     CLK_GNUCXX20, CLK_CXX20, CLK_ASM};\n+ \n+ /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n+ struct GTY(()) cpp_string {\n+@@ -484,7 +484,7 @@ struct cpp_options\n+   /* Nonzero for C2X decimal floating-point constants.  */\n+   unsigned char dfp_constants;\n+ \n+-  /* Nonzero for C++2a __VA_OPT__ feature.  */\n++  /* Nonzero for C++20 __VA_OPT__ feature.  */\n+   unsigned char va_opt;\n+ \n+   /* Nonzero for the '::' token.  */\n+\n+'''\n+\n+EXPECTED3 = '''\\\n+libcpp/ChangeLog:\n+\n+\t* include/cpplib.h (enum c_lang):\n+\t(struct cpp_options):\n+\n+'''\n+\n+EXPECTED3B = '''\\\n+libcpp/ChangeLog:\n+\n+\t* include/cpplib.h:\n+\n+'''\n+\n+PATCH4 = '''\\\n+diff --git a/gcc/ipa-icf.c b/gcc/ipa-icf.c\n+index aab79492357..f0df1002488 100644\n+--- a/gcc/ipa-icf.c\n++++ b/gcc/ipa-icf.c\n+@@ -1,5 +1,7 @@\n+ \n+ \n++\n++\n+ /* Interprocedural Identical Code Folding pass\n+    Copyright (C) 2014-2020 Free Software Foundation, Inc.\n+ \n+diff --git a/gcc/testsuite/gcc.dg/pr32374.c b/gcc/testsuite/gcc.dg/pr32374.c\n+deleted file mode 100644\n+index de15d559f5b..00000000000\n+--- a/gcc/testsuite/gcc.dg/pr32374.c\n++++ /dev/null\n+@@ -1,20 +0,0 @@\n+-/* { dg-do compile } */\n+-/* { dg-options \"-O2\" } */\n+-\n+-extern int *stderr;\n+-\n+-void f (int *, const char *, ...);\n+-\n+-void g (const char *conf_name)\n+-{\n+-  typedef struct\n+-  {\n+-    const char *label;\n+-    const int value;\n+-  } Section;\n+-\n+-  const Section sections[2] = { {\"\", 0}, {\"\", 1} };\n+-\n+-  f (stderr, \"\", \"\", conf_name, 0, sections[0]);\n+-  f (stderr, \"\", \"\", conf_name, 0, sections[0]);\n+-}\n+diff --git a/gcc/testsuite/gcc.dg/pr40209.c b/gcc/testsuite/gcc.dg/pr40209.c\n+index 4e77df5c2e6..c23d69d1f1b 100644\n+--- a/gcc/testsuite/gcc.dg/pr40209.c\n++++ b/gcc/testsuite/gcc.dg/pr40209.c\n+@@ -1,6 +1,8 @@\n+ /* { dg-do compile } */\n+ /* { dg-options \"-O2 -fprofile-use -fopt-info -Wno-missing-profile\" } */\n+ \n++\n++\n+ void process(const char *s);\n+ \n+ struct BaseHolder {\n+diff --git a/gcc/testsuite/gcc.dg/pr50209.c b/gcc/testsuite/gcc.dg/pr50209.c\n+new file mode 100644\n+index 00000000000..b28b04f6431\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.dg/pr50209.c\n+@@ -0,0 +1,3 @@\n++\n++\n++\n+diff --git a/gcc/testsuite/gcc.dg/pr63567-1.c b/gcc/testsuite/gcc.dg/pr63567-1.c\n+index 97da171563e..00c5ecc11fa 100644\n+--- a/gcc/testsuite/gcc.dg/pr63567-1.c\n++++ b/gcc/testsuite/gcc.dg/pr63567-1.c\n+@@ -1,3 +1,4 @@\n++\n+ /* PR c/63567 */\n+ /* { dg-do compile } */\n+ /* { dg-options \"\" } */\n+diff --git a/gcc/varasm.c b/gcc/varasm.c\n+index f062e48071f..fd3c7ca8cf3 100644\n+--- a/gcc/varasm.c\n++++ b/gcc/varasm.c\n+@@ -1,3 +1,5 @@\n++\n++\n+ /* Output variables, constants and external declarations, for GNU compiler.\n+    Copyright (C) 1987-2020 Free Software Foundation, Inc.\n+ \n+diff --git a/libssp/gets-chk.c b/libssp/gets-chk.c\n+index 4ad78c1f77b..6687b368038 100644\n+--- a/libssp/gets-chk.c\n++++ b/libssp/gets-chk.c\n+@@ -32,6 +32,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+ <http://www.gnu.org/licenses/>.  */\n+ \n+ \n++\n++\n+ #include \"config.h\"\n+ #include <ssp/ssp.h>\n+ #include <stdarg.h>\n+'''\n+\n+EXPECTED4 = '''\\\n+gcc/ChangeLog:\n+\n+\t* ipa-icf.c:\n+\t* varasm.c:\n+\n+libssp/ChangeLog:\n+\n+\t* gets-chk.c:\n+\n+gcc/testsuite/ChangeLog:\n+\n+\t* gcc.dg/pr40209.c:\n+\t* gcc.dg/pr63567-1.c:\n+\t* gcc.dg/pr32374.c: Removed.\n+\t* gcc.dg/pr50209.c: New test.\n+\n+'''\n+\n+PATCH5 = '''\\\n+diff --git a/gcc/testsuite/gcc.target/i386/pr95046-6.c b/gcc/testsuite/gcc.target/i386/pr95046-6.c\n+new file mode 100644\n+index 00000000000..dcc8999c446\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/i386/pr95046-6.c\n+@@ -0,0 +1,44 @@\n++/* PR target/95046 */\n++/* { dg-do compile { target { ! ia32 } } } */\n++/* { dg-options \"-O3 -mavx512vl\" } */\n++\n++\n++double r[2];\n++int s[2];\n++unsigned int u[2];\n++\n++void\n++test_float (void)\n++{\n++  for (int i = 0; i < 2; i++)\n++    r[i] = s[i];\n++}\n++\n++/* { dg-final { scan-assembler \"\\tvcvtdq2pd\" } } */\n++\n++void\n++test_ufloat (void)\n++{\n++  for (int i = 0; i < 2; i++)\n++    r[i] = u[i];\n++}\n++\n++/* { dg-final { scan-assembler \"\\tvcvtudq2pd\" } } */\n++\n++void\n++test_fix (void)\n++{\n++  for (int i = 0; i < 2; i++)\n++    s[i] = r[i];\n++}\n++\n++/* { dg-final { scan-assembler \"\\tvcvttpd2dqx\" } } */\n++\n++void\n++test_ufix (void)\n++{\n++  for (int i = 0; i < 2; i++)\n++    u[i] = r[i];\n++}\n++\n++/* { dg-final { scan-assembler \"\\tvcvttpd2udqx\" } } */\n+-- \n+2.26.2\n+\n+'''\n+\n+EXPECTED5 = '''\\\n+PR target/95046 - Vectorize V2SFmode operations\n+\n+gcc/testsuite/ChangeLog:\n+\n+\tPR target/95046\n+\t* gcc.target/i386/pr95046-6.c: New test.\n+\n+'''\n+\n+class TestMklog(unittest.TestCase):\n+    def test_macro_definition(self):\n+        changelog = generate_changelog(PATCH1)\n+        assert changelog == EXPECTED1\n+\n+    def test_changed_argument(self):\n+        changelog = generate_changelog(PATCH2)\n+        assert changelog == EXPECTED2\n+\n+    def test_enum_and_struct(self):\n+        changelog = generate_changelog(PATCH3)\n+        assert changelog == EXPECTED3\n+\n+    def test_no_function(self):\n+        changelog = generate_changelog(PATCH3, True)\n+        assert changelog == EXPECTED3B\n+\n+    def test_sorting(self):\n+        changelog = generate_changelog(PATCH4)\n+        assert changelog == EXPECTED4\n+\n+    def test_pr_bugzilla_download(self):\n+        changelog = generate_changelog(PATCH5, fill_pr_titles=True)\n+        assert changelog == EXPECTED5"}]}