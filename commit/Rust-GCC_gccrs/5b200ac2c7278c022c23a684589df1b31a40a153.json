{"sha": "5b200ac2c7278c022c23a684589df1b31a40a153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyMDBhYzJjNzI3OGMwMjJjMjNhNjg0NTg5ZGYxYjMxYTQwYTE1Mw==", "commit": {"author": {"name": "Feng Wang", "email": "fengwang@nudt.edu.cn", "date": "2004-05-19T00:34:59Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-05-19T00:34:59Z"}, "message": "f95-lang.c (gfc_init_builtin_functions): Use vold_list_node.\n\n\t* f95-lang.c (gfc_init_builtin_functions): Use vold_list_node.\n\tCreate decls for __builtin_pow{,f}.\n\t* gfortran.h (PREFIX_LEN): Define.\n\t* trans-decl.c (gfor_fndecl_math_powi): Add.\n\t(gfor_fndecl_math_powf, gfor_fndecl_math_pow): Remove.\n\t(gfc_build_intrinsic_function_decls): Create decls for powi.\n\t* trans-expr.c (powi_table): Add.\n\t(gfc_conv_integer_power): Remove.\n\t(gfc_conv_powi): New function.\n\t(gfc_conv_cst_int_power): New function.\n\t(gfc_conv_power_op): Use new powi routines.\n\t* trans.h (struct gfc_powdecl_list): Add.\n\t(gfor_fndecl_math_powi): Add.\n\t(gfor_fndecl_math_powf, gfor_fndecl_math_pow): Remove.\ntestsuite/\n\t* gfortran.fortran-torture/execute/power.f90: Test constant integers.\nlibgfortran/\n\t* Makefile.am (i_pow_c): Set it. Add build rule.\n\t(gfor_built_src): Use it.\n\t(m4_files): add m4/pow.m4.\n\t* Makefile.in: Regenerate.\n\t* m4/pow.m4: New file.\n\t* generated/pow_*.c: Regenerate.\n\nFrom-SVN: r82014", "tree": {"sha": "6d5551f77f0b03649dcf0b885fe4be35ce373a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d5551f77f0b03649dcf0b885fe4be35ce373a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b200ac2c7278c022c23a684589df1b31a40a153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b200ac2c7278c022c23a684589df1b31a40a153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b200ac2c7278c022c23a684589df1b31a40a153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b200ac2c7278c022c23a684589df1b31a40a153/comments", "author": null, "committer": null, "parents": [{"sha": "933520b9beeea22009be7637b3186c61679266b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/933520b9beeea22009be7637b3186c61679266b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/933520b9beeea22009be7637b3186c61679266b0"}], "stats": {"total": 1698, "additions": 1493, "deletions": 205}, "files": [{"sha": "babea082d994b9fb38fda00ab51dafb4fe9c0c00", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -1,3 +1,20 @@\n+2004-05-18  Paul Brook  <paul@codesourcery.com>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Use vold_list_node.\n+\tCreate decls for __builtin_pow{,f}.\n+\t* gfortran.h (PREFIX_LEN): Define.\n+\t* trans-decl.c (gfor_fndecl_math_powi): Add.\n+\t(gfor_fndecl_math_powf, gfor_fndecl_math_pow): Remove.\n+\t(gfc_build_intrinsic_function_decls): Create decls for powi.\n+\t* trans-expr.c (powi_table): Add.\n+\t(gfc_conv_integer_power): Remove.\n+\t(gfc_conv_powi): New function.\n+\t(gfc_conv_cst_int_power): New function.\n+\t(gfc_conv_power_op): Use new powi routines.\n+\t* trans.h (struct gfc_powdecl_list): Add.\n+\t(gfor_fndecl_math_powi): Add.\n+\t(gfor_fndecl_math_powf, gfor_fndecl_math_pow): Remove.\n+\n 2004-05-18  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans.c, trans-decl.c: Fix comment typos."}, {"sha": "ab151fcd7373337015967b3833e1c46ae050acd5", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -750,16 +750,13 @@ gfc_init_builtin_functions (void)\n   tree mfunc_double[2];\n   tree ftype;\n   tree tmp;\n-  tree voidchain;\n \n-  voidchain = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n-\n-  tmp = tree_cons (NULL_TREE, float_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, float_type_node, void_list_node);\n   mfunc_float[0] = build_function_type (float_type_node, tmp);\n   tmp = tree_cons (NULL_TREE, float_type_node, tmp);\n   mfunc_float[1] = build_function_type (float_type_node, tmp);\n \n-  tmp = tree_cons (NULL_TREE, double_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, double_type_node, void_list_node);\n   mfunc_double[0] = build_function_type (double_type_node, tmp);\n   tmp = tree_cons (NULL_TREE, double_type_node, tmp);\n   mfunc_double[1] = build_function_type (double_type_node, tmp);\n@@ -777,57 +774,63 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_roundf\", mfunc_float[0], \n \t\t      BUILT_IN_ROUNDF, \"roundf\", true);\n \n+  /* These are used to implement the ** operator.  */\n+  gfc_define_builtin (\"__builtin_pow\", mfunc_double[0], \n+\t\t      BUILT_IN_POW, \"pow\", true);\n+  gfc_define_builtin (\"__builtin_powf\", mfunc_float[0], \n+\t\t      BUILT_IN_POWF, \"powf\", true);\n+\n   /* Other builtin functions we use.  */\n \n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n   tmp = tree_cons (NULL_TREE, long_integer_type_node, tmp);\n   ftype = build_function_type (long_integer_type_node, tmp);\n   gfc_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n \t\t      \"__builtin_expect\", true);\n \n-  tmp = tree_cons (NULL_TREE, size_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n   tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n   tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n   ftype = build_function_type (pvoid_type_node, tmp);\n   gfc_define_builtin (\"__builtin_memcpy\", ftype, BUILT_IN_MEMCPY,\n \t\t      \"memcpy\", false);\n \n-  tmp = tree_cons (NULL_TREE, integer_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, integer_type_node, void_list_node);\n   ftype = build_function_type (integer_type_node, tmp);\n   gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ, \"clz\", true);\n \n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n   ftype = build_function_type (integer_type_node, tmp);\n   gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL, \"clzl\", true);\n \n-  tmp = tree_cons (NULL_TREE, long_long_integer_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, long_long_integer_type_node, void_list_node);\n   ftype = build_function_type (integer_type_node, tmp);\n   gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL, \"clzll\", true);\n \n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n   tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n   tmp = tree_cons (NULL_TREE, pvoid_type_node, tmp);\n   ftype = build_function_type (void_type_node, tmp);\n   gfc_define_builtin (\"__builtin_init_trampoline\", ftype,\n \t\t      BUILT_IN_INIT_TRAMPOLINE, \"init_trampoline\", false);\n \n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n   ftype = build_function_type (pvoid_type_node, tmp);\n   gfc_define_builtin (\"__builtin_adjust_trampoline\", ftype,\n \t\t      BUILT_IN_ADJUST_TRAMPOLINE, \"adjust_trampoline\", true);\n \n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, voidchain);\n-  tmp = tree_cons (NULL_TREE, size_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n+  tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n   ftype = build_function_type (pvoid_type_node, tmp);\n   gfc_define_builtin (\"__builtin_stack_alloc\", ftype, BUILT_IN_STACK_ALLOC,\n \t\t      \"stack_alloc\", false);\n \n   /* The stack_save and stack_restore builtins aren't used directly.  They\n      are inserted during gimplification to implement stack_alloc calls.  */\n-  ftype = build_function_type (pvoid_type_node, voidchain);\n+  ftype = build_function_type (pvoid_type_node, void_list_node);\n   gfc_define_builtin (\"__builtin_stack_save\", ftype, BUILT_IN_STACK_SAVE,\n \t\t      \"stack_save\", false);\n-  tmp = tree_cons (NULL_TREE, pvoid_type_node, voidchain);\n+  tmp = tree_cons (NULL_TREE, pvoid_type_node, void_list_node);\n   ftype = build_function_type (void_type_node, tmp);\n   gfc_define_builtin (\"__builtin_stack_restore\", ftype, BUILT_IN_STACK_RESTORE,\n \t\t      \"stack_restore\", false);"}, {"sha": "e698cd3c8008c2299c422522374162d74b2a0903", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -82,6 +82,7 @@ char *alloca ();\n    ugly to look at and a pain to type when you add the prefix by hand,\n    so we hide it behind a macro.  */\n #define PREFIX(x) \"_gfortran_\" x\n+#define PREFIX_LEN 10\n \n /* Macro to initialize an mstring structure.  */\n #define minit(s, t) { s, NULL, t }"}, {"sha": "8708bea14b109467b901b9c286cab1cc0bdaeedc", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -93,8 +93,7 @@ tree gfor_fndecl_associated;\n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */\n \n-tree gfor_fndecl_math_powf;\n-tree gfor_fndecl_math_pow;\n+gfc_powdecl_list gfor_fndecl_math_powi[3][2];\n tree gfor_fndecl_math_cpowf;\n tree gfor_fndecl_math_cpow;\n tree gfor_fndecl_math_cabsf;\n@@ -1398,14 +1397,40 @@ gfc_build_intrinsic_function_decls (void)\n \n \n   /* Power functions.  */\n-  gfor_fndecl_math_powf =\n-    gfc_build_library_function_decl (get_identifier (\"powf\"),\n-\t\t\t\t     gfc_real4_type_node,\n-\t\t\t\t     1, gfc_real4_type_node);\n-  gfor_fndecl_math_pow =\n-    gfc_build_library_function_decl (get_identifier (\"pow\"),\n-\t\t\t\t     gfc_real8_type_node,\n-\t\t\t\t     1, gfc_real8_type_node);\n+  {\n+    tree type;\n+    tree itype;\n+    int kind;\n+    int ikind;\n+    static int kinds[2] = {4, 8};\n+    char name[PREFIX_LEN + 10]; /* _gfortran_pow_?n_?n */\n+\n+    for (ikind=0; ikind < 2; ikind++)\n+      {\n+\titype = gfc_get_int_type (kinds[ikind]);\n+\tfor (kind = 0; kind < 2; kind ++)\n+\t  {\n+\t    type = gfc_get_int_type (kinds[kind]);\n+\t    sprintf(name, PREFIX(\"pow_i%d_i%d\"), kinds[kind], kinds[ikind]);\n+\t    gfor_fndecl_math_powi[kind][ikind].integer =\n+\t      gfc_build_library_function_decl (get_identifier (name),\n+\t\t  type, 2, type, itype);\n+\n+\t    type = gfc_get_real_type (kinds[kind]);\n+\t    sprintf(name, PREFIX(\"pow_r%d_i%d\"), kinds[kind], kinds[ikind]);\n+\t    gfor_fndecl_math_powi[kind][ikind].real =\n+\t      gfc_build_library_function_decl (get_identifier (name),\n+\t\t  type, 2, type, itype);\n+\n+\t    type = gfc_get_complex_type (kinds[kind]);\n+\t    sprintf(name, PREFIX(\"pow_c%d_i%d\"), kinds[kind], kinds[ikind]);\n+\t    gfor_fndecl_math_powi[kind][ikind].cmplx =\n+\t      gfc_build_library_function_decl (get_identifier (name),\n+\t\t  type, 2, type, itype);\n+\t  }\n+      }\n+  }\n+\n   gfor_fndecl_math_cpowf =\n     gfc_build_library_function_decl (get_identifier (\"cpowf\"),\n \t\t\t\t     gfc_complex4_type_node,"}, {"sha": "092daa70ea4e8970d4f97a76e54b2b31f20227b1", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 202, "deletions": 160, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -382,189 +382,172 @@ gfc_conv_unary_op (enum tree_code code, gfc_se * se, gfc_expr * expr)\n \n }\n \n-\n-/* For power op (lhs ** rhs) We generate:\n-    m = lhs\n-    if (rhs > 0)\n-      count = rhs\n-    else if (rhs == 0)\n-      {\n-        count = 0\n-        m = 1\n-      }\n-    else // (rhs < 0)\n-      {\n-        count = -rhs\n-        m = 1 / m;\n-      }\n-    // for constant rhs we do the above at compile time\n-    val = m;\n-    for (n = 1; n < count; n++)\n-      val = val * m;\n- */\n-\n-static void\n-gfc_conv_integer_power (gfc_se * se, tree lhs, tree rhs)\n+/* Expand power operator to optimal multiplications when a value is raised\n+   to an constant integer n. See section 4.6.3, \"Evaluation of Powers\" of\n+   Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art of Computer\n+   Programming\", 3rd Edition, 1998.  */\n+\n+/* This code is mostly duplicated from expand_powi in the backend.\n+   We establish the \"optimal power tree\" lookup table with the defined size.\n+   The items in the table are the exponents used to calculate the index\n+   exponents. Any integer n less than the value can get an \"addition chain\",\n+   with the first node being one.  */\n+#define POWI_TABLE_SIZE 256\n+\n+/* The table is from Builtins.c.  */\n+static const unsigned char powi_table[POWI_TABLE_SIZE] =\n+  {\n+      0,   1,   1,   2,   2,   3,   3,   4,  /*   0 -   7 */\n+      4,   6,   5,   6,   6,  10,   7,   9,  /*   8 -  15 */\n+      8,  16,   9,  16,  10,  12,  11,  13,  /*  16 -  23 */\n+     12,  17,  13,  18,  14,  24,  15,  26,  /*  24 -  31 */\n+     16,  17,  17,  19,  18,  33,  19,  26,  /*  32 -  39 */\n+     20,  25,  21,  40,  22,  27,  23,  44,  /*  40 -  47 */\n+     24,  32,  25,  34,  26,  29,  27,  44,  /*  48 -  55 */\n+     28,  31,  29,  34,  30,  60,  31,  36,  /*  56 -  63 */\n+     32,  64,  33,  34,  34,  46,  35,  37,  /*  64 -  71 */\n+     36,  65,  37,  50,  38,  48,  39,  69,  /*  72 -  79 */\n+     40,  49,  41,  43,  42,  51,  43,  58,  /*  80 -  87 */\n+     44,  64,  45,  47,  46,  59,  47,  76,  /*  88 -  95 */\n+     48,  65,  49,  66,  50,  67,  51,  66,  /*  96 - 103 */\n+     52,  70,  53,  74,  54, 104,  55,  74,  /* 104 - 111 */\n+     56,  64,  57,  69,  58,  78,  59,  68,  /* 112 - 119 */\n+     60,  61,  61,  80,  62,  75,  63,  68,  /* 120 - 127 */\n+     64,  65,  65, 128,  66, 129,  67,  90,  /* 128 - 135 */\n+     68,  73,  69, 131,  70,  94,  71,  88,  /* 136 - 143 */\n+     72, 128,  73,  98,  74, 132,  75, 121,  /* 144 - 151 */\n+     76, 102,  77, 124,  78, 132,  79, 106,  /* 152 - 159 */\n+     80,  97,  81, 160,  82,  99,  83, 134,  /* 160 - 167 */\n+     84,  86,  85,  95,  86, 160,  87, 100,  /* 168 - 175 */\n+     88, 113,  89,  98,  90, 107,  91, 122,  /* 176 - 183 */\n+     92, 111,  93, 102,  94, 126,  95, 150,  /* 184 - 191 */\n+     96, 128,  97, 130,  98, 133,  99, 195,  /* 192 - 199 */\n+    100, 128, 101, 123, 102, 164, 103, 138,  /* 200 - 207 */\n+    104, 145, 105, 146, 106, 109, 107, 149,  /* 208 - 215 */\n+    108, 200, 109, 146, 110, 170, 111, 157,  /* 216 - 223 */\n+    112, 128, 113, 130, 114, 182, 115, 132,  /* 224 - 231 */\n+    116, 200, 117, 132, 118, 158, 119, 206,  /* 232 - 239 */\n+    120, 240, 121, 162, 122, 147, 123, 152,  /* 240 - 247 */\n+    124, 166, 125, 214, 126, 138, 127, 153,  /* 248 - 255 */\n+  };\n+\n+/* If n is larger than lookup table's max index, we use \"window method\".  */\n+#define POWI_WINDOW_SIZE 3\n+\n+/* Recursive function to expand power operator. The temporary values are put\n+   in tmpvar. The function return tmpvar[1] ** n.  */\n+static tree\n+gfc_conv_powi (gfc_se * se, int n, tree * tmpvar)\n {\n-  tree count;\n-  tree result;\n-  tree cond;\n-  tree neg_stmt;\n-  tree pos_stmt;\n+  tree op0;\n+  tree op1;\n   tree tmp;\n-  tree var;\n-  tree type;\n-  stmtblock_t block;\n-  tree exit_label;\n-\n-  type = TREE_TYPE (lhs);\n+  int digit;\n \n-  if (INTEGER_CST_P (rhs))\n+  if (n < POWI_TABLE_SIZE)\n     {\n-      if (integer_zerop (rhs))\n-\t{\n-\t  se->expr = gfc_build_const (type, integer_one_node);\n-\t  return;\n-\t}\n-      /* Special cases for constant values.  */\n-      if (TREE_INT_CST_HIGH (rhs) == -1)\n-\t{\n-\t  /* x ** (-y) == 1 / (x ** y).  */\n-\t  if (TREE_CODE (type) == INTEGER_TYPE)\n-\t    {\n-\t      se->expr = integer_zero_node;\n-\t      return;\n-\t    }\n-\n-\t  tmp = gfc_build_const (type, integer_one_node);\n-\t  lhs = fold (build (RDIV_EXPR, type, tmp, lhs));\n+      if (tmpvar[n])\n+        return tmpvar[n];\n \n-\t  rhs = fold (build1 (NEGATE_EXPR, TREE_TYPE (rhs), rhs));\n-\t  assert (INTEGER_CST_P (rhs));\n-\t}\n-      else\n-\t{\n-\t  /* TODO: really big integer powers.  */\n-\t  assert (TREE_INT_CST_HIGH (rhs) == 0);\n-\t}\n-\n-      if (integer_onep (rhs))\n-\t{\n-\t  se->expr = lhs;\n-\t  return;\n-\t}\n-      if (TREE_INT_CST_LOW (rhs) == 2)\n-\t{\n-\t  se->expr = build (MULT_EXPR, type, lhs, lhs);\n-\t  return;\n-\t}\n-      if (TREE_INT_CST_LOW (rhs) == 3)\n-\t{\n-\t  tmp = build (MULT_EXPR, type, lhs, lhs);\n-\t  se->expr = fold (build (MULT_EXPR, type, tmp, lhs));\n-\t  return;\n-\t}\n-\n-      /* Create the loop count variable.  */\n-      count = gfc_create_var (TREE_TYPE (rhs), \"count\");\n-      gfc_add_modify_expr (&se->pre, count, rhs);\n+      op0 = gfc_conv_powi (se, n - powi_table[n], tmpvar);\n+      op1 = gfc_conv_powi (se, powi_table[n], tmpvar);\n+    }\n+  else if (n & 1)\n+    {\n+      digit = n & ((1 << POWI_WINDOW_SIZE) - 1);\n+      op0 = gfc_conv_powi (se, n - digit, tmpvar);\n+      op1 = gfc_conv_powi (se, digit, tmpvar);\n     }\n   else\n     {\n-      /* Put the lhs into a temporary variable.  */\n-      var = gfc_create_var (type, \"val\");\n-      count = gfc_create_var (TREE_TYPE (rhs), \"count\");\n-      gfc_add_modify_expr (&se->pre, var, lhs);\n-      lhs = var;\n-\n-      /* Generate code for negative rhs.  */\n-      gfc_start_block (&block);\n-\n-      if (TREE_CODE (TREE_TYPE (lhs)) == INTEGER_TYPE)\n-\t{\n-\t  gfc_add_modify_expr (&block, lhs, integer_zero_node);\n-\t  gfc_add_modify_expr (&block, count, integer_zero_node);\n-\t}\n-      else\n-\t{\n-\t  tmp = gfc_build_const (type, integer_one_node);\n-\t  tmp = build (RDIV_EXPR, type, tmp, lhs);\n-\t  gfc_add_modify_expr (&block, var, tmp);\n-\n-\t  tmp = build1 (NEGATE_EXPR, TREE_TYPE (rhs), rhs);\n-\t  gfc_add_modify_expr (&block, count, tmp);\n-\t}\n-      neg_stmt = gfc_finish_block (&block);\n-\n-      pos_stmt = build_v (MODIFY_EXPR, count, rhs);\n-\n-      /* Code for rhs == 0.  */\n-      gfc_start_block (&block);\n-\n-      gfc_add_modify_expr (&block, count, integer_zero_node);\n-      tmp = gfc_build_const (type, integer_one_node);\n-      gfc_add_modify_expr (&block, lhs, tmp);\n-\n-      tmp = gfc_finish_block (&block);\n-\n-      /* Select the appropriate action.  */\n-      cond = build (EQ_EXPR, boolean_type_node, rhs, integer_zero_node);\n-      tmp = build_v (COND_EXPR, cond, tmp, neg_stmt);\n-\n-      cond = build (GT_EXPR, boolean_type_node, rhs, integer_zero_node);\n-      tmp = build_v (COND_EXPR, cond, pos_stmt, tmp);\n-      gfc_add_expr_to_block (&se->pre, tmp);\n+      op0 = gfc_conv_powi (se, n >> 1, tmpvar);\n+      op1 = op0;\n     }\n \n-  /* Create a variable for the result.  */\n-  result = gfc_create_var (type, \"pow\");\n-  gfc_add_modify_expr (&se->pre, result, lhs);\n-\n-  exit_label = gfc_build_label_decl (NULL_TREE);\n-  TREE_USED (exit_label) = 1;\n+  tmp = fold (build (MULT_EXPR, TREE_TYPE (op0), op0, op1));\n+  tmp = gfc_evaluate_now (tmp, &se->pre);\n \n-  /* Create the loop body.  */\n-  gfc_start_block (&block);\n+  if (n < POWI_TABLE_SIZE)\n+    tmpvar[n] = tmp;\n \n-  /* First the exit condition (until count <= 1).  */\n-  tmp = build1_v (GOTO_EXPR, exit_label);\n-  cond = build (LE_EXPR, TREE_TYPE (count), count, integer_one_node);\n-  tmp = build_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n-  gfc_add_expr_to_block (&block, tmp);\n+  return tmp;\n+}\n \n-  /* Multiply by the lhs.  */\n-  tmp = build (MULT_EXPR, type, result, lhs);\n-  gfc_add_modify_expr (&block, result, tmp);\n+/* Expand lhs ** rhs. rhs is an constant integer. If expand successfully,\n+   return 1. Else return 0 and will call runtime library functions.  */\n+static int\n+gfc_conv_cst_int_power (gfc_se * se, tree lhs, tree rhs)\n+{\n+  tree cond;\n+  tree tmp;\n+  tree type;\n+  tree vartmp[POWI_TABLE_SIZE];\n+  int n;\n+  int sgn;\n \n-  /* Adjust the loop count.  */\n-  tmp = build (MINUS_EXPR, TREE_TYPE (count), count, integer_one_node);\n-  gfc_add_modify_expr (&block, count, tmp);\n+  type = TREE_TYPE (lhs);\n+  n = abs (TREE_INT_CST_LOW (rhs));\n+  sgn = tree_int_cst_sgn (rhs);\n \n-  tmp = gfc_finish_block (&block);\n+  if ((!flag_unsafe_math_optimizations || optimize_size) && (n > 2 || n < -1))\n+    return 0;\n \n-  /* Create the the loop.  */\n-  tmp = build_v (LOOP_EXPR, tmp);\n-  gfc_add_expr_to_block (&se->pre, tmp);\n+  /* rhs == 0  */\n+  if (sgn == 0)\n+    {\n+      se->expr = gfc_build_const (type, integer_one_node);\n+      return 1;\n+    }\n+  /* If rhs < 0 and lhs is an integer, the result is -1, 0 or 1.  */\n+  if ((sgn == -1) && (TREE_CODE (type) == INTEGER_TYPE))\n+    {\n+      tmp = build (EQ_EXPR, boolean_type_node, lhs,\n+\t\t\tinteger_minus_one_node);\n+      cond = build (EQ_EXPR, boolean_type_node, lhs,\n+\t\t\tinteger_one_node);\n+\n+      /* If rhs is an even,\n+\tresult = (lhs == 1 || lhs == -1) ? 1 : 0.  */\n+      if ((n & 1) == 0)\n+        {\n+\t  tmp = build (TRUTH_OR_EXPR, boolean_type_node, tmp, cond);\n+\t  se->expr = build (COND_EXPR, type, tmp, integer_one_node, \n+\t\t\tinteger_zero_node);\n+\t  return 1;\n+\t}\n+      /* If rhs is an odd,\n+\t result = (lhs == 1) ? 1 : (lhs == -1) ? -1 : 0.  */\n+      tmp = build (COND_EXPR, type, tmp, integer_minus_one_node,\n+\t\t\tinteger_zero_node);\n+      se->expr = build (COND_EXPR, type, cond, integer_one_node,\n+\t\t\ttmp);\n+      return 1;\n+    }\n \n-  /* Add the exit label.  */\n-  tmp = build1_v (LABEL_EXPR, exit_label);\n-  gfc_add_expr_to_block (&se->pre, tmp);\n+  memset (vartmp, 0, sizeof (vartmp));\n+  vartmp[1] = lhs;\n \n-  se->expr = result;\n+  se->expr = gfc_conv_powi (se, n, vartmp);\n+  if (sgn == -1)\n+    {\n+      tmp = gfc_build_const (type, integer_one_node);\n+      se->expr = build (RDIV_EXPR, type, tmp, se->expr);\n+    }\n+  return 1;\n }\n \n \n-/* Power op (**).  Integer rhs has special handling.  */\n+/* Power op (**).  Constant integer exponent has special handling.  */\n \n static void\n gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n {\n   int kind;\n+  int ikind;\n   gfc_se lse;\n   gfc_se rse;\n   tree fndecl;\n   tree tmp;\n-  tree type;\n \n   gfc_init_se (&lse, se);\n   gfc_conv_expr_val (&lse, expr->op1);\n@@ -574,24 +557,83 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n   gfc_conv_expr_val (&rse, expr->op2);\n   gfc_add_block_to_block (&se->pre, &rse.pre);\n \n-  type = TREE_TYPE (lse.expr);\n+  if (expr->op2->ts.type == BT_INTEGER\n+\t && expr->op2->expr_type == EXPR_CONSTANT)\n+    if (gfc_conv_cst_int_power (se, lse.expr, rse.expr))\n+      return;        \n \n   kind = expr->op1->ts.kind;\n   switch (expr->op2->ts.type)\n     {\n     case BT_INTEGER:\n-      /* Integer powers are expanded inline as multiplications.  */\n-      gfc_conv_integer_power (se, lse.expr, rse.expr);\n-      return;\n+      ikind = expr->op2->ts.kind;\n+      switch (ikind)\n+\t{\n+\tcase 1:\n+\tcase 2:\n+\t  rse.expr = convert (gfc_int4_type_node, rse.expr);\n+\t  /* Fall through.  */\n+\n+\tcase 4:\n+\t  ikind = 0;\n+\t  break;\n+\t  \n+\tcase 8:\n+\t  ikind = 1;\n+\t  break;\n+\n+\tdefault:\n+\t  abort();\n+\t}\n+      switch (kind)\n+\t{\n+\tcase 1:\n+\tcase 2:\n+\t  if (expr->op1->ts.type == BT_INTEGER)\n+\t    lse.expr = convert (gfc_int4_type_node, lse.expr);\n+\t  else\n+\t    abort ();\n+\t  /* Fall through.  */\n+\n+\tcase 4:\n+\t  kind = 0;\n+\t  break;\n+\t  \n+\tcase 8:\n+\t  kind = 1;\n+\t  break;\n+\n+\tdefault:\n+\t  abort();\n+\t}\n+      \n+      switch (expr->op1->ts.type)\n+\t{\n+\tcase BT_INTEGER:\n+\t  fndecl = gfor_fndecl_math_powi[kind][ikind].integer;\n+\t  break;\n+\n+\tcase BT_REAL:\n+\t  fndecl = gfor_fndecl_math_powi[kind][ikind].real;\n+\t  break;\n+\n+\tcase BT_COMPLEX:\n+\t  fndecl = gfor_fndecl_math_powi[kind][ikind].cmplx;\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+ \t}\n+      break;\n \n     case BT_REAL:\n       switch (kind)\n \t{\n \tcase 4:\n-\t  fndecl = gfor_fndecl_math_powf;\n+\t  fndecl = built_in_decls[BUILT_IN_POWF];\n \t  break;\n \tcase 8:\n-\t  fndecl = gfor_fndecl_math_pow;\n+\t  fndecl = built_in_decls[BUILT_IN_POW];\n \t  break;\n \tdefault:\n \t  abort ();\n@@ -619,7 +661,7 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \n   tmp = gfc_chainon_list (NULL_TREE, lse.expr);\n   tmp = gfc_chainon_list (tmp, rse.expr);\n-  se->expr = gfc_build_function_call (fndecl, tmp);\n+  se->expr = fold (gfc_build_function_call (fndecl, tmp));\n }\n \n "}, {"sha": "ada575fc9e0378c07dcf21988932cd9034ae5b34", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -428,8 +428,16 @@ extern GTY(()) tree gfor_fndecl_associated;\n \n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */\n-extern GTY(()) tree gfor_fndecl_math_powf;\n-extern GTY(()) tree gfor_fndecl_math_pow;\n+\n+typedef struct gfc_powdecl_list GTY(())\n+{\n+  tree integer;\n+  tree real;\n+  tree cmplx;\n+}\n+gfc_powdecl_list;\n+\n+extern GTY(()) gfc_powdecl_list gfor_fndecl_math_powi[3][2];\n extern GTY(()) tree gfor_fndecl_math_cpowf;\n extern GTY(()) tree gfor_fndecl_math_cpow;\n extern GTY(()) tree gfor_fndecl_math_cabsf;"}, {"sha": "01ab2bb7439911ef4213802d3dad080064a7e7f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -1,3 +1,7 @@\n+2004-05-18  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gfortran.fortran-torture/execute/power.f90: Test constant integers.\n+\n 2004-05-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/tree-ssa/20040518-1.c: New test."}, {"sha": "6866470dd6a4e4d464a278d61cb757aa99d958ea", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/power.f90", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpower.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpower.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fpower.f90?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -3,9 +3,41 @@ program testpow\n    implicit none\n    real(kind=4) r, s, two\n    real(kind=8) :: q\n-   complex(kind=4) :: c\n+   complex(kind=4) :: c, z\n    real, parameter :: del = 0.0001\n-   integer i\n+   integer i, j\n+\n+   i = 2\n+   j = i ** 10\n+   if (abs (j - 1024) .gt. del) call abort\n+   j = i ** (-10)\n+   if (abs (j - 0) .gt. del) call abort\n+   j = i ** 0\n+   if (abs (j - 1) .gt. del) call abort\n+   i = 1\n+   j = i ** 10\n+   if (abs (j - 1) .gt. del) call abort\n+   j = i ** (-10)\n+   if (abs (j - 1) .gt. del) call abort\n+   j = i ** 0\n+   if (abs (j - 1) .gt. del) call abort\n+   i = -1\n+   j = i ** 10\n+   if (abs (j - 1) .gt. del) call abort\n+   j = i ** (-10)\n+   if (abs (j - 1) .gt. del) call abort\n+   j = i ** 0\n+   if (abs (j - 1) .gt. del) call abort\n+   j = i ** 11\n+   if (abs (j - (-1)) .gt. del) call abort\n+   j = i ** (-11)\n+   if (abs (j - (-1)) .gt. del) call abort\n+\n+   c = (2.0, 3.0)\n+   z = c ** 2\n+   if (abs(z - (-5.0, 12.0)) .gt. del) call abort\n+   z = c ** 7\n+   if (abs(z - (6554.0, 4449.0)) .gt. del) call abort\n \n    two = 2.0\n "}, {"sha": "1c60175e40ab3d0ab3236d092ba7531b6f91051f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -1,3 +1,12 @@\n+2004-05-18  Paul Brook  <paul@codesourcery.com>\n+\n+\t* Makefile.am (i_pow_c): Set it. Add build rule.\n+\t(gfor_built_src): Use it.\n+\t(m4_files): add m4/pow.m4.\n+\t* Makefile.in: Regenerate.\n+\t* m4/pow.m4: New file.\n+\t* generated/pow_*.c: Regenerate.\n+\n 2004-05-18  Paul Brook  <paul@codesourcery.com>\n \n \t* Makefile.am: Remove references to types.m4."}, {"sha": "12977f5bd3d05f83219252b8bb5f5d6bdaf6fb57", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -222,21 +222,36 @@ i_set_exponent_c = \\\n generated/set_exponent_r4.c \\\n generated/set_exponent_r8.c\n \n+i_pow_c = \\\n+generated/pow_i4_i4.c \\\n+generated/pow_i8_i4.c \\\n+generated/pow_r4_i4.c \\\n+generated/pow_r8_i4.c \\\n+generated/pow_c4_i4.c \\\n+generated/pow_c8_i4.c \\\n+generated/pow_i4_i8.c \\\n+generated/pow_i8_i8.c \\\n+generated/pow_r4_i8.c \\\n+generated/pow_r8_i8.c \\\n+generated/pow_c4_i8.c \\\n+generated/pow_c8_i8.c\n+\n m4_files= m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/any.m4 m4/count.m4 m4/maxloc0.m4 m4/maxloc1.m4 m4/maxval.m4 \\\n     m4/minloc0.m4 m4/minloc1.m4 m4/minval.m4 m4/product.m4 m4/sum.m4 \\\n     m4/dotprod.m4 m4/dotprodl.m4 m4/dotprodc.m4 m4/matmul.m4 m4/matmull.m4 \\\n     m4/ctrig.m4 m4/cexp.m4 m4/chyp.m4 m4/mtype.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n-    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4\n+    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4\n \n gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n     $(i_product_c) $(i_sum_c) $(i_dotprod_c) $(i_dotprodl_c) $(i_dotprodc_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n-    $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c)\n+    $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n+    $(i_pow_c)\n \n # We only use these if libm doesn't contain complex math functions.\n \n@@ -443,6 +458,9 @@ $(i_nearest_c): m4/nearest.m4 m4/mtype.m4\n $(i_set_exponent_c): m4/set_exponent.m4 m4/mtype.m4\n \tm4 -Dfile=$@ -I$(srcdir)/m4 set_exponent.m4 > $@\n \n+$(i_pow_c): m4/pow.m4 $(I_M4_DEPS)\n+\tm4 -Dfile=$@ -I$(srcdir)/m4 pow.m4 > $@\n+\n $(gfor_math_trig_c): m4/ctrig.m4 m4/mtype.m4\n \tm4 -Dfile=$@ -I$(srcdir)/m4 ctrig.m4 > $@\n "}, {"sha": "1bb1dd57627bede024670022aef78d1a39a6a072", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 346, "deletions": 13, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -101,7 +101,10 @@ am__objects_26 = exponent_r4.lo exponent_r8.lo\n am__objects_27 = fraction_r4.lo fraction_r8.lo\n am__objects_28 = nearest_r4.lo nearest_r8.lo\n am__objects_29 = set_exponent_r4.lo set_exponent_r8.lo\n-am__objects_30 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n+am__objects_30 = pow_i4_i4.lo pow_i8_i4.lo pow_r4_i4.lo pow_r8_i4.lo \\\n+\tpow_c4_i4.lo pow_c8_i4.lo pow_i4_i8.lo pow_i8_i8.lo \\\n+\tpow_r4_i8.lo pow_r8_i8.lo pow_c4_i8.lo pow_c8_i8.lo\n+am__objects_31 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_5) $(am__objects_6) $(am__objects_7) \\\n \t$(am__objects_8) $(am__objects_9) $(am__objects_10) \\\n \t$(am__objects_11) $(am__objects_12) $(am__objects_13) \\\n@@ -110,18 +113,18 @@ am__objects_30 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_20) $(am__objects_21) $(am__objects_22) \\\n \t$(am__objects_23) $(am__objects_24) $(am__objects_25) \\\n \t$(am__objects_26) $(am__objects_27) $(am__objects_28) \\\n-\t$(am__objects_29)\n-am__objects_31 = backspace.lo close.lo endfile.lo format.lo inquire.lo \\\n+\t$(am__objects_29) $(am__objects_30)\n+am__objects_32 = backspace.lo close.lo endfile.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo rewind.lo transfer.lo \\\n \tunit.lo unix.lo write.lo\n-am__objects_32 = associated.lo abort.lo cpu_time.lo cshift0.lo \\\n+am__objects_33 = associated.lo abort.lo cpu_time.lo cshift0.lo \\\n \teoshift0.lo eoshift2.lo ishftc.lo pack_generic.lo size.lo \\\n \tspread_generic.lo string_intrinsics.lo random.lo \\\n \treshape_generic.lo reshape_packed.lo selected_kind.lo \\\n \ttranspose_generic.lo unpack_generic.lo in_pack_generic.lo \\\n \tin_unpack_generic.lo\n-am__objects_33 =\n-am__objects_34 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n+am__objects_34 =\n+am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n \t_abs_r4.lo _abs_r8.lo _exp_r4.lo _exp_r8.lo _exp_c4.lo \\\n \t_exp_c8.lo _log_r4.lo _log_r8.lo _log_c4.lo _log_c8.lo \\\n \t_log10_r4.lo _log10_r8.lo _sqrt_r4.lo _sqrt_r8.lo _sqrt_c4.lo \\\n@@ -131,13 +134,13 @@ am__objects_34 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n \t_tan_r4.lo _tan_r8.lo _sinh_r4.lo _sinh_r8.lo _cosh_r4.lo \\\n \t_cosh_r8.lo _tanh_r4.lo _tanh_r8.lo _conjg_c4.lo _conjg_c8.lo \\\n \t_aint_r4.lo _aint_r8.lo _anint_r4.lo _anint_r8.lo\n-am__objects_35 = _sign_i4.lo _sign_i8.lo _sign_r4.lo _sign_r8.lo \\\n+am__objects_36 = _sign_i4.lo _sign_i8.lo _sign_r4.lo _sign_r8.lo \\\n \t_dim_i4.lo _dim_i8.lo _dim_r4.lo _dim_r8.lo _atan2_r4.lo \\\n \t_atan2_r8.lo _mod_i4.lo _mod_i8.lo _mod_r4.lo _mod_r8.lo\n-am__objects_36 = $(am__objects_34) $(am__objects_35) dprod_r8.lo\n-am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_30) \\\n-\t$(am__objects_31) $(am__objects_32) $(am__objects_33) \\\n-\t$(am__objects_36)\n+am__objects_37 = $(am__objects_35) $(am__objects_36) dprod_r8.lo\n+am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_31) \\\n+\t$(am__objects_32) $(am__objects_33) $(am__objects_34) \\\n+\t$(am__objects_37)\n libgfortran_la_OBJECTS = $(am_libgfortran_la_OBJECTS)\n libgfortranbegin_la_LIBADD =\n am_libgfortranbegin_la_OBJECTS = fmain.lo\n@@ -235,6 +238,18 @@ am__depfiles_maybe = depfiles\n @AMDEP_TRUE@\t./$(DEPDIR)/nearest_r4.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/nearest_r8.Plo ./$(DEPDIR)/open.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/pack_generic.Plo ./$(DEPDIR)/pause.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_c4_i4.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_c4_i8.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_c8_i4.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_c8_i8.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_i4_i4.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_i4_i8.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_i8_i4.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_i8_i8.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_r4_i4.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_r4_i8.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_r8_i4.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/pow_r8_i8.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/product_c4.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/product_c8.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/product_i4.Plo \\\n@@ -600,21 +615,36 @@ i_set_exponent_c = \\\n generated/set_exponent_r4.c \\\n generated/set_exponent_r8.c\n \n+i_pow_c = \\\n+generated/pow_i4_i4.c \\\n+generated/pow_i8_i4.c \\\n+generated/pow_r4_i4.c \\\n+generated/pow_r8_i4.c \\\n+generated/pow_c4_i4.c \\\n+generated/pow_c8_i4.c \\\n+generated/pow_i4_i8.c \\\n+generated/pow_i8_i8.c \\\n+generated/pow_r4_i8.c \\\n+generated/pow_r8_i8.c \\\n+generated/pow_c4_i8.c \\\n+generated/pow_c8_i8.c\n+\n m4_files = m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/any.m4 m4/count.m4 m4/maxloc0.m4 m4/maxloc1.m4 m4/maxval.m4 \\\n     m4/minloc0.m4 m4/minloc1.m4 m4/minval.m4 m4/product.m4 m4/sum.m4 \\\n     m4/dotprod.m4 m4/dotprodl.m4 m4/dotprodc.m4 m4/matmul.m4 m4/matmull.m4 \\\n     m4/ctrig.m4 m4/cexp.m4 m4/chyp.m4 m4/mtype.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n-    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4\n+    m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4\n \n gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n     $(i_product_c) $(i_sum_c) $(i_dotprod_c) $(i_dotprodl_c) $(i_dotprodc_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n-    $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c)\n+    $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n+    $(i_pow_c)\n \n \n # We only use these if libm doesn't contain complex math functions.\n@@ -938,6 +968,18 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/open.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pack_generic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pause.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_c4_i4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_c4_i8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_c8_i4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_c8_i8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_i4_i4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_i4_i8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_i8_i4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_i8_i8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r4_i4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r4_i8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r8_i4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_r8_i8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/product_c4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/product_c8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/product_i4.Plo@am__quote@\n@@ -3594,6 +3636,294 @@ set_exponent_r8.lo: generated/set_exponent_r8.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o set_exponent_r8.lo `test -f 'generated/set_exponent_r8.c' || echo '$(srcdir)/'`generated/set_exponent_r8.c\n \n+pow_i4_i4.o: generated/pow_i4_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i4_i4.o -MD -MP -MF \"$(DEPDIR)/pow_i4_i4.Tpo\" -c -o pow_i4_i4.o `test -f 'generated/pow_i4_i4.c' || echo '$(srcdir)/'`generated/pow_i4_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i4_i4.Tpo\" \"$(DEPDIR)/pow_i4_i4.Po\"; else rm -f \"$(DEPDIR)/pow_i4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i4_i4.c' object='pow_i4_i4.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i4_i4.Po' tmpdepfile='$(DEPDIR)/pow_i4_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i4_i4.o `test -f 'generated/pow_i4_i4.c' || echo '$(srcdir)/'`generated/pow_i4_i4.c\n+\n+pow_i4_i4.obj: generated/pow_i4_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i4_i4.obj -MD -MP -MF \"$(DEPDIR)/pow_i4_i4.Tpo\" -c -o pow_i4_i4.obj `if test -f 'generated/pow_i4_i4.c'; then $(CYGPATH_W) 'generated/pow_i4_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i4_i4.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i4_i4.Tpo\" \"$(DEPDIR)/pow_i4_i4.Po\"; else rm -f \"$(DEPDIR)/pow_i4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i4_i4.c' object='pow_i4_i4.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i4_i4.Po' tmpdepfile='$(DEPDIR)/pow_i4_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i4_i4.obj `if test -f 'generated/pow_i4_i4.c'; then $(CYGPATH_W) 'generated/pow_i4_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i4_i4.c'; fi`\n+\n+pow_i4_i4.lo: generated/pow_i4_i4.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i4_i4.lo -MD -MP -MF \"$(DEPDIR)/pow_i4_i4.Tpo\" -c -o pow_i4_i4.lo `test -f 'generated/pow_i4_i4.c' || echo '$(srcdir)/'`generated/pow_i4_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i4_i4.Tpo\" \"$(DEPDIR)/pow_i4_i4.Plo\"; else rm -f \"$(DEPDIR)/pow_i4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i4_i4.c' object='pow_i4_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i4_i4.Plo' tmpdepfile='$(DEPDIR)/pow_i4_i4.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i4_i4.lo `test -f 'generated/pow_i4_i4.c' || echo '$(srcdir)/'`generated/pow_i4_i4.c\n+\n+pow_i8_i4.o: generated/pow_i8_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i8_i4.o -MD -MP -MF \"$(DEPDIR)/pow_i8_i4.Tpo\" -c -o pow_i8_i4.o `test -f 'generated/pow_i8_i4.c' || echo '$(srcdir)/'`generated/pow_i8_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i8_i4.Tpo\" \"$(DEPDIR)/pow_i8_i4.Po\"; else rm -f \"$(DEPDIR)/pow_i8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i8_i4.c' object='pow_i8_i4.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i8_i4.Po' tmpdepfile='$(DEPDIR)/pow_i8_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i8_i4.o `test -f 'generated/pow_i8_i4.c' || echo '$(srcdir)/'`generated/pow_i8_i4.c\n+\n+pow_i8_i4.obj: generated/pow_i8_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i8_i4.obj -MD -MP -MF \"$(DEPDIR)/pow_i8_i4.Tpo\" -c -o pow_i8_i4.obj `if test -f 'generated/pow_i8_i4.c'; then $(CYGPATH_W) 'generated/pow_i8_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i8_i4.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i8_i4.Tpo\" \"$(DEPDIR)/pow_i8_i4.Po\"; else rm -f \"$(DEPDIR)/pow_i8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i8_i4.c' object='pow_i8_i4.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i8_i4.Po' tmpdepfile='$(DEPDIR)/pow_i8_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i8_i4.obj `if test -f 'generated/pow_i8_i4.c'; then $(CYGPATH_W) 'generated/pow_i8_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i8_i4.c'; fi`\n+\n+pow_i8_i4.lo: generated/pow_i8_i4.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i8_i4.lo -MD -MP -MF \"$(DEPDIR)/pow_i8_i4.Tpo\" -c -o pow_i8_i4.lo `test -f 'generated/pow_i8_i4.c' || echo '$(srcdir)/'`generated/pow_i8_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i8_i4.Tpo\" \"$(DEPDIR)/pow_i8_i4.Plo\"; else rm -f \"$(DEPDIR)/pow_i8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i8_i4.c' object='pow_i8_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i8_i4.Plo' tmpdepfile='$(DEPDIR)/pow_i8_i4.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i8_i4.lo `test -f 'generated/pow_i8_i4.c' || echo '$(srcdir)/'`generated/pow_i8_i4.c\n+\n+pow_r4_i4.o: generated/pow_r4_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r4_i4.o -MD -MP -MF \"$(DEPDIR)/pow_r4_i4.Tpo\" -c -o pow_r4_i4.o `test -f 'generated/pow_r4_i4.c' || echo '$(srcdir)/'`generated/pow_r4_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r4_i4.Tpo\" \"$(DEPDIR)/pow_r4_i4.Po\"; else rm -f \"$(DEPDIR)/pow_r4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r4_i4.c' object='pow_r4_i4.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r4_i4.Po' tmpdepfile='$(DEPDIR)/pow_r4_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r4_i4.o `test -f 'generated/pow_r4_i4.c' || echo '$(srcdir)/'`generated/pow_r4_i4.c\n+\n+pow_r4_i4.obj: generated/pow_r4_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r4_i4.obj -MD -MP -MF \"$(DEPDIR)/pow_r4_i4.Tpo\" -c -o pow_r4_i4.obj `if test -f 'generated/pow_r4_i4.c'; then $(CYGPATH_W) 'generated/pow_r4_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r4_i4.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r4_i4.Tpo\" \"$(DEPDIR)/pow_r4_i4.Po\"; else rm -f \"$(DEPDIR)/pow_r4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r4_i4.c' object='pow_r4_i4.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r4_i4.Po' tmpdepfile='$(DEPDIR)/pow_r4_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r4_i4.obj `if test -f 'generated/pow_r4_i4.c'; then $(CYGPATH_W) 'generated/pow_r4_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r4_i4.c'; fi`\n+\n+pow_r4_i4.lo: generated/pow_r4_i4.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r4_i4.lo -MD -MP -MF \"$(DEPDIR)/pow_r4_i4.Tpo\" -c -o pow_r4_i4.lo `test -f 'generated/pow_r4_i4.c' || echo '$(srcdir)/'`generated/pow_r4_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r4_i4.Tpo\" \"$(DEPDIR)/pow_r4_i4.Plo\"; else rm -f \"$(DEPDIR)/pow_r4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r4_i4.c' object='pow_r4_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r4_i4.Plo' tmpdepfile='$(DEPDIR)/pow_r4_i4.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r4_i4.lo `test -f 'generated/pow_r4_i4.c' || echo '$(srcdir)/'`generated/pow_r4_i4.c\n+\n+pow_r8_i4.o: generated/pow_r8_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r8_i4.o -MD -MP -MF \"$(DEPDIR)/pow_r8_i4.Tpo\" -c -o pow_r8_i4.o `test -f 'generated/pow_r8_i4.c' || echo '$(srcdir)/'`generated/pow_r8_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r8_i4.Tpo\" \"$(DEPDIR)/pow_r8_i4.Po\"; else rm -f \"$(DEPDIR)/pow_r8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r8_i4.c' object='pow_r8_i4.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r8_i4.Po' tmpdepfile='$(DEPDIR)/pow_r8_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r8_i4.o `test -f 'generated/pow_r8_i4.c' || echo '$(srcdir)/'`generated/pow_r8_i4.c\n+\n+pow_r8_i4.obj: generated/pow_r8_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r8_i4.obj -MD -MP -MF \"$(DEPDIR)/pow_r8_i4.Tpo\" -c -o pow_r8_i4.obj `if test -f 'generated/pow_r8_i4.c'; then $(CYGPATH_W) 'generated/pow_r8_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r8_i4.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r8_i4.Tpo\" \"$(DEPDIR)/pow_r8_i4.Po\"; else rm -f \"$(DEPDIR)/pow_r8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r8_i4.c' object='pow_r8_i4.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r8_i4.Po' tmpdepfile='$(DEPDIR)/pow_r8_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r8_i4.obj `if test -f 'generated/pow_r8_i4.c'; then $(CYGPATH_W) 'generated/pow_r8_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r8_i4.c'; fi`\n+\n+pow_r8_i4.lo: generated/pow_r8_i4.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r8_i4.lo -MD -MP -MF \"$(DEPDIR)/pow_r8_i4.Tpo\" -c -o pow_r8_i4.lo `test -f 'generated/pow_r8_i4.c' || echo '$(srcdir)/'`generated/pow_r8_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r8_i4.Tpo\" \"$(DEPDIR)/pow_r8_i4.Plo\"; else rm -f \"$(DEPDIR)/pow_r8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r8_i4.c' object='pow_r8_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r8_i4.Plo' tmpdepfile='$(DEPDIR)/pow_r8_i4.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r8_i4.lo `test -f 'generated/pow_r8_i4.c' || echo '$(srcdir)/'`generated/pow_r8_i4.c\n+\n+pow_c4_i4.o: generated/pow_c4_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i4.o -MD -MP -MF \"$(DEPDIR)/pow_c4_i4.Tpo\" -c -o pow_c4_i4.o `test -f 'generated/pow_c4_i4.c' || echo '$(srcdir)/'`generated/pow_c4_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c4_i4.Tpo\" \"$(DEPDIR)/pow_c4_i4.Po\"; else rm -f \"$(DEPDIR)/pow_c4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c4_i4.c' object='pow_c4_i4.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c4_i4.Po' tmpdepfile='$(DEPDIR)/pow_c4_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c4_i4.o `test -f 'generated/pow_c4_i4.c' || echo '$(srcdir)/'`generated/pow_c4_i4.c\n+\n+pow_c4_i4.obj: generated/pow_c4_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i4.obj -MD -MP -MF \"$(DEPDIR)/pow_c4_i4.Tpo\" -c -o pow_c4_i4.obj `if test -f 'generated/pow_c4_i4.c'; then $(CYGPATH_W) 'generated/pow_c4_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c4_i4.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c4_i4.Tpo\" \"$(DEPDIR)/pow_c4_i4.Po\"; else rm -f \"$(DEPDIR)/pow_c4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c4_i4.c' object='pow_c4_i4.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c4_i4.Po' tmpdepfile='$(DEPDIR)/pow_c4_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c4_i4.obj `if test -f 'generated/pow_c4_i4.c'; then $(CYGPATH_W) 'generated/pow_c4_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c4_i4.c'; fi`\n+\n+pow_c4_i4.lo: generated/pow_c4_i4.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i4.lo -MD -MP -MF \"$(DEPDIR)/pow_c4_i4.Tpo\" -c -o pow_c4_i4.lo `test -f 'generated/pow_c4_i4.c' || echo '$(srcdir)/'`generated/pow_c4_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c4_i4.Tpo\" \"$(DEPDIR)/pow_c4_i4.Plo\"; else rm -f \"$(DEPDIR)/pow_c4_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c4_i4.c' object='pow_c4_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c4_i4.Plo' tmpdepfile='$(DEPDIR)/pow_c4_i4.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c4_i4.lo `test -f 'generated/pow_c4_i4.c' || echo '$(srcdir)/'`generated/pow_c4_i4.c\n+\n+pow_c8_i4.o: generated/pow_c8_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c8_i4.o -MD -MP -MF \"$(DEPDIR)/pow_c8_i4.Tpo\" -c -o pow_c8_i4.o `test -f 'generated/pow_c8_i4.c' || echo '$(srcdir)/'`generated/pow_c8_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c8_i4.Tpo\" \"$(DEPDIR)/pow_c8_i4.Po\"; else rm -f \"$(DEPDIR)/pow_c8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c8_i4.c' object='pow_c8_i4.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c8_i4.Po' tmpdepfile='$(DEPDIR)/pow_c8_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c8_i4.o `test -f 'generated/pow_c8_i4.c' || echo '$(srcdir)/'`generated/pow_c8_i4.c\n+\n+pow_c8_i4.obj: generated/pow_c8_i4.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c8_i4.obj -MD -MP -MF \"$(DEPDIR)/pow_c8_i4.Tpo\" -c -o pow_c8_i4.obj `if test -f 'generated/pow_c8_i4.c'; then $(CYGPATH_W) 'generated/pow_c8_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c8_i4.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c8_i4.Tpo\" \"$(DEPDIR)/pow_c8_i4.Po\"; else rm -f \"$(DEPDIR)/pow_c8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c8_i4.c' object='pow_c8_i4.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c8_i4.Po' tmpdepfile='$(DEPDIR)/pow_c8_i4.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c8_i4.obj `if test -f 'generated/pow_c8_i4.c'; then $(CYGPATH_W) 'generated/pow_c8_i4.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c8_i4.c'; fi`\n+\n+pow_c8_i4.lo: generated/pow_c8_i4.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c8_i4.lo -MD -MP -MF \"$(DEPDIR)/pow_c8_i4.Tpo\" -c -o pow_c8_i4.lo `test -f 'generated/pow_c8_i4.c' || echo '$(srcdir)/'`generated/pow_c8_i4.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c8_i4.Tpo\" \"$(DEPDIR)/pow_c8_i4.Plo\"; else rm -f \"$(DEPDIR)/pow_c8_i4.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c8_i4.c' object='pow_c8_i4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c8_i4.Plo' tmpdepfile='$(DEPDIR)/pow_c8_i4.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c8_i4.lo `test -f 'generated/pow_c8_i4.c' || echo '$(srcdir)/'`generated/pow_c8_i4.c\n+\n+pow_i4_i8.o: generated/pow_i4_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i4_i8.o -MD -MP -MF \"$(DEPDIR)/pow_i4_i8.Tpo\" -c -o pow_i4_i8.o `test -f 'generated/pow_i4_i8.c' || echo '$(srcdir)/'`generated/pow_i4_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i4_i8.Tpo\" \"$(DEPDIR)/pow_i4_i8.Po\"; else rm -f \"$(DEPDIR)/pow_i4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i4_i8.c' object='pow_i4_i8.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i4_i8.Po' tmpdepfile='$(DEPDIR)/pow_i4_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i4_i8.o `test -f 'generated/pow_i4_i8.c' || echo '$(srcdir)/'`generated/pow_i4_i8.c\n+\n+pow_i4_i8.obj: generated/pow_i4_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i4_i8.obj -MD -MP -MF \"$(DEPDIR)/pow_i4_i8.Tpo\" -c -o pow_i4_i8.obj `if test -f 'generated/pow_i4_i8.c'; then $(CYGPATH_W) 'generated/pow_i4_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i4_i8.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i4_i8.Tpo\" \"$(DEPDIR)/pow_i4_i8.Po\"; else rm -f \"$(DEPDIR)/pow_i4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i4_i8.c' object='pow_i4_i8.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i4_i8.Po' tmpdepfile='$(DEPDIR)/pow_i4_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i4_i8.obj `if test -f 'generated/pow_i4_i8.c'; then $(CYGPATH_W) 'generated/pow_i4_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i4_i8.c'; fi`\n+\n+pow_i4_i8.lo: generated/pow_i4_i8.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i4_i8.lo -MD -MP -MF \"$(DEPDIR)/pow_i4_i8.Tpo\" -c -o pow_i4_i8.lo `test -f 'generated/pow_i4_i8.c' || echo '$(srcdir)/'`generated/pow_i4_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i4_i8.Tpo\" \"$(DEPDIR)/pow_i4_i8.Plo\"; else rm -f \"$(DEPDIR)/pow_i4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i4_i8.c' object='pow_i4_i8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i4_i8.Plo' tmpdepfile='$(DEPDIR)/pow_i4_i8.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i4_i8.lo `test -f 'generated/pow_i4_i8.c' || echo '$(srcdir)/'`generated/pow_i4_i8.c\n+\n+pow_i8_i8.o: generated/pow_i8_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i8_i8.o -MD -MP -MF \"$(DEPDIR)/pow_i8_i8.Tpo\" -c -o pow_i8_i8.o `test -f 'generated/pow_i8_i8.c' || echo '$(srcdir)/'`generated/pow_i8_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i8_i8.Tpo\" \"$(DEPDIR)/pow_i8_i8.Po\"; else rm -f \"$(DEPDIR)/pow_i8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i8_i8.c' object='pow_i8_i8.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i8_i8.Po' tmpdepfile='$(DEPDIR)/pow_i8_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i8_i8.o `test -f 'generated/pow_i8_i8.c' || echo '$(srcdir)/'`generated/pow_i8_i8.c\n+\n+pow_i8_i8.obj: generated/pow_i8_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i8_i8.obj -MD -MP -MF \"$(DEPDIR)/pow_i8_i8.Tpo\" -c -o pow_i8_i8.obj `if test -f 'generated/pow_i8_i8.c'; then $(CYGPATH_W) 'generated/pow_i8_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i8_i8.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i8_i8.Tpo\" \"$(DEPDIR)/pow_i8_i8.Po\"; else rm -f \"$(DEPDIR)/pow_i8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i8_i8.c' object='pow_i8_i8.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i8_i8.Po' tmpdepfile='$(DEPDIR)/pow_i8_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i8_i8.obj `if test -f 'generated/pow_i8_i8.c'; then $(CYGPATH_W) 'generated/pow_i8_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_i8_i8.c'; fi`\n+\n+pow_i8_i8.lo: generated/pow_i8_i8.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_i8_i8.lo -MD -MP -MF \"$(DEPDIR)/pow_i8_i8.Tpo\" -c -o pow_i8_i8.lo `test -f 'generated/pow_i8_i8.c' || echo '$(srcdir)/'`generated/pow_i8_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_i8_i8.Tpo\" \"$(DEPDIR)/pow_i8_i8.Plo\"; else rm -f \"$(DEPDIR)/pow_i8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_i8_i8.c' object='pow_i8_i8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_i8_i8.Plo' tmpdepfile='$(DEPDIR)/pow_i8_i8.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_i8_i8.lo `test -f 'generated/pow_i8_i8.c' || echo '$(srcdir)/'`generated/pow_i8_i8.c\n+\n+pow_r4_i8.o: generated/pow_r4_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r4_i8.o -MD -MP -MF \"$(DEPDIR)/pow_r4_i8.Tpo\" -c -o pow_r4_i8.o `test -f 'generated/pow_r4_i8.c' || echo '$(srcdir)/'`generated/pow_r4_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r4_i8.Tpo\" \"$(DEPDIR)/pow_r4_i8.Po\"; else rm -f \"$(DEPDIR)/pow_r4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r4_i8.c' object='pow_r4_i8.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r4_i8.Po' tmpdepfile='$(DEPDIR)/pow_r4_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r4_i8.o `test -f 'generated/pow_r4_i8.c' || echo '$(srcdir)/'`generated/pow_r4_i8.c\n+\n+pow_r4_i8.obj: generated/pow_r4_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r4_i8.obj -MD -MP -MF \"$(DEPDIR)/pow_r4_i8.Tpo\" -c -o pow_r4_i8.obj `if test -f 'generated/pow_r4_i8.c'; then $(CYGPATH_W) 'generated/pow_r4_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r4_i8.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r4_i8.Tpo\" \"$(DEPDIR)/pow_r4_i8.Po\"; else rm -f \"$(DEPDIR)/pow_r4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r4_i8.c' object='pow_r4_i8.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r4_i8.Po' tmpdepfile='$(DEPDIR)/pow_r4_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r4_i8.obj `if test -f 'generated/pow_r4_i8.c'; then $(CYGPATH_W) 'generated/pow_r4_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r4_i8.c'; fi`\n+\n+pow_r4_i8.lo: generated/pow_r4_i8.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r4_i8.lo -MD -MP -MF \"$(DEPDIR)/pow_r4_i8.Tpo\" -c -o pow_r4_i8.lo `test -f 'generated/pow_r4_i8.c' || echo '$(srcdir)/'`generated/pow_r4_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r4_i8.Tpo\" \"$(DEPDIR)/pow_r4_i8.Plo\"; else rm -f \"$(DEPDIR)/pow_r4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r4_i8.c' object='pow_r4_i8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r4_i8.Plo' tmpdepfile='$(DEPDIR)/pow_r4_i8.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r4_i8.lo `test -f 'generated/pow_r4_i8.c' || echo '$(srcdir)/'`generated/pow_r4_i8.c\n+\n+pow_r8_i8.o: generated/pow_r8_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r8_i8.o -MD -MP -MF \"$(DEPDIR)/pow_r8_i8.Tpo\" -c -o pow_r8_i8.o `test -f 'generated/pow_r8_i8.c' || echo '$(srcdir)/'`generated/pow_r8_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r8_i8.Tpo\" \"$(DEPDIR)/pow_r8_i8.Po\"; else rm -f \"$(DEPDIR)/pow_r8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r8_i8.c' object='pow_r8_i8.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r8_i8.Po' tmpdepfile='$(DEPDIR)/pow_r8_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r8_i8.o `test -f 'generated/pow_r8_i8.c' || echo '$(srcdir)/'`generated/pow_r8_i8.c\n+\n+pow_r8_i8.obj: generated/pow_r8_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r8_i8.obj -MD -MP -MF \"$(DEPDIR)/pow_r8_i8.Tpo\" -c -o pow_r8_i8.obj `if test -f 'generated/pow_r8_i8.c'; then $(CYGPATH_W) 'generated/pow_r8_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r8_i8.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r8_i8.Tpo\" \"$(DEPDIR)/pow_r8_i8.Po\"; else rm -f \"$(DEPDIR)/pow_r8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r8_i8.c' object='pow_r8_i8.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r8_i8.Po' tmpdepfile='$(DEPDIR)/pow_r8_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r8_i8.obj `if test -f 'generated/pow_r8_i8.c'; then $(CYGPATH_W) 'generated/pow_r8_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_r8_i8.c'; fi`\n+\n+pow_r8_i8.lo: generated/pow_r8_i8.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_r8_i8.lo -MD -MP -MF \"$(DEPDIR)/pow_r8_i8.Tpo\" -c -o pow_r8_i8.lo `test -f 'generated/pow_r8_i8.c' || echo '$(srcdir)/'`generated/pow_r8_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_r8_i8.Tpo\" \"$(DEPDIR)/pow_r8_i8.Plo\"; else rm -f \"$(DEPDIR)/pow_r8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_r8_i8.c' object='pow_r8_i8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_r8_i8.Plo' tmpdepfile='$(DEPDIR)/pow_r8_i8.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_r8_i8.lo `test -f 'generated/pow_r8_i8.c' || echo '$(srcdir)/'`generated/pow_r8_i8.c\n+\n+pow_c4_i8.o: generated/pow_c4_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i8.o -MD -MP -MF \"$(DEPDIR)/pow_c4_i8.Tpo\" -c -o pow_c4_i8.o `test -f 'generated/pow_c4_i8.c' || echo '$(srcdir)/'`generated/pow_c4_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c4_i8.Tpo\" \"$(DEPDIR)/pow_c4_i8.Po\"; else rm -f \"$(DEPDIR)/pow_c4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c4_i8.c' object='pow_c4_i8.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c4_i8.Po' tmpdepfile='$(DEPDIR)/pow_c4_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c4_i8.o `test -f 'generated/pow_c4_i8.c' || echo '$(srcdir)/'`generated/pow_c4_i8.c\n+\n+pow_c4_i8.obj: generated/pow_c4_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i8.obj -MD -MP -MF \"$(DEPDIR)/pow_c4_i8.Tpo\" -c -o pow_c4_i8.obj `if test -f 'generated/pow_c4_i8.c'; then $(CYGPATH_W) 'generated/pow_c4_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c4_i8.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c4_i8.Tpo\" \"$(DEPDIR)/pow_c4_i8.Po\"; else rm -f \"$(DEPDIR)/pow_c4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c4_i8.c' object='pow_c4_i8.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c4_i8.Po' tmpdepfile='$(DEPDIR)/pow_c4_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c4_i8.obj `if test -f 'generated/pow_c4_i8.c'; then $(CYGPATH_W) 'generated/pow_c4_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c4_i8.c'; fi`\n+\n+pow_c4_i8.lo: generated/pow_c4_i8.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c4_i8.lo -MD -MP -MF \"$(DEPDIR)/pow_c4_i8.Tpo\" -c -o pow_c4_i8.lo `test -f 'generated/pow_c4_i8.c' || echo '$(srcdir)/'`generated/pow_c4_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c4_i8.Tpo\" \"$(DEPDIR)/pow_c4_i8.Plo\"; else rm -f \"$(DEPDIR)/pow_c4_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c4_i8.c' object='pow_c4_i8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c4_i8.Plo' tmpdepfile='$(DEPDIR)/pow_c4_i8.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c4_i8.lo `test -f 'generated/pow_c4_i8.c' || echo '$(srcdir)/'`generated/pow_c4_i8.c\n+\n+pow_c8_i8.o: generated/pow_c8_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c8_i8.o -MD -MP -MF \"$(DEPDIR)/pow_c8_i8.Tpo\" -c -o pow_c8_i8.o `test -f 'generated/pow_c8_i8.c' || echo '$(srcdir)/'`generated/pow_c8_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c8_i8.Tpo\" \"$(DEPDIR)/pow_c8_i8.Po\"; else rm -f \"$(DEPDIR)/pow_c8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c8_i8.c' object='pow_c8_i8.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c8_i8.Po' tmpdepfile='$(DEPDIR)/pow_c8_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c8_i8.o `test -f 'generated/pow_c8_i8.c' || echo '$(srcdir)/'`generated/pow_c8_i8.c\n+\n+pow_c8_i8.obj: generated/pow_c8_i8.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c8_i8.obj -MD -MP -MF \"$(DEPDIR)/pow_c8_i8.Tpo\" -c -o pow_c8_i8.obj `if test -f 'generated/pow_c8_i8.c'; then $(CYGPATH_W) 'generated/pow_c8_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c8_i8.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c8_i8.Tpo\" \"$(DEPDIR)/pow_c8_i8.Po\"; else rm -f \"$(DEPDIR)/pow_c8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c8_i8.c' object='pow_c8_i8.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c8_i8.Po' tmpdepfile='$(DEPDIR)/pow_c8_i8.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c8_i8.obj `if test -f 'generated/pow_c8_i8.c'; then $(CYGPATH_W) 'generated/pow_c8_i8.c'; else $(CYGPATH_W) '$(srcdir)/generated/pow_c8_i8.c'; fi`\n+\n+pow_c8_i8.lo: generated/pow_c8_i8.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pow_c8_i8.lo -MD -MP -MF \"$(DEPDIR)/pow_c8_i8.Tpo\" -c -o pow_c8_i8.lo `test -f 'generated/pow_c8_i8.c' || echo '$(srcdir)/'`generated/pow_c8_i8.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/pow_c8_i8.Tpo\" \"$(DEPDIR)/pow_c8_i8.Plo\"; else rm -f \"$(DEPDIR)/pow_c8_i8.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='generated/pow_c8_i8.c' object='pow_c8_i8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/pow_c8_i8.Plo' tmpdepfile='$(DEPDIR)/pow_c8_i8.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c8_i8.lo `test -f 'generated/pow_c8_i8.c' || echo '$(srcdir)/'`generated/pow_c8_i8.c\n+\n backspace.o: io/backspace.c\n @am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT backspace.o -MD -MP -MF \"$(DEPDIR)/backspace.Tpo\" -c -o backspace.o `test -f 'io/backspace.c' || echo '$(srcdir)/'`io/backspace.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/backspace.Tpo\" \"$(DEPDIR)/backspace.Po\"; else rm -f \"$(DEPDIR)/backspace.Tpo\"; exit 1; fi\n@@ -5464,6 +5794,9 @@ uninstall-am: uninstall-info-am uninstall-libLTLIBRARIES\n @MAINTAINER_MODE_TRUE@$(i_set_exponent_c): m4/set_exponent.m4 m4/mtype.m4\n @MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 set_exponent.m4 > $@\n \n+@MAINTAINER_MODE_TRUE@$(i_pow_c): m4/pow.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 pow.m4 > $@\n+\n @MAINTAINER_MODE_TRUE@$(gfor_math_trig_c): m4/ctrig.m4 m4/mtype.m4\n @MAINTAINER_MODE_TRUE@\tm4 -Dfile=$@ -I$(srcdir)/m4 ctrig.m4 > $@\n "}, {"sha": "de0f6f62dfe7a9f48a3f0b7105f82052ae205b0a", "filename": "libgfortran/generated/pow_c4_i4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c4_i4.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_COMPLEX_4\n+prefix(pow_c4_i4) (GFC_COMPLEX_4 a, GFC_INTEGER_4 b)\n+{\n+  GFC_COMPLEX_4 pow, x;\n+  GFC_INTEGER_4 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "6606527b4adb4189280144ff4ec882f2653d2141", "filename": "libgfortran/generated/pow_c4_i8.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c4_i8.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_COMPLEX_4\n+prefix(pow_c4_i8) (GFC_COMPLEX_4 a, GFC_INTEGER_8 b)\n+{\n+  GFC_COMPLEX_4 pow, x;\n+  GFC_INTEGER_8 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "5efb874d7e47a4e3d5af08ae6ccc2b6b3f108be1", "filename": "libgfortran/generated/pow_c8_i4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c8_i4.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_COMPLEX_8\n+prefix(pow_c8_i4) (GFC_COMPLEX_8 a, GFC_INTEGER_4 b)\n+{\n+  GFC_COMPLEX_8 pow, x;\n+  GFC_INTEGER_4 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "17026b32c14c94bd2bd4446f3ffa93dddcfc4c75", "filename": "libgfortran/generated/pow_c8_i8.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_c8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_c8_i8.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_COMPLEX_8\n+prefix(pow_c8_i8) (GFC_COMPLEX_8 a, GFC_INTEGER_8 b)\n+{\n+  GFC_COMPLEX_8 pow, x;\n+  GFC_INTEGER_8 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "15a349c1e9cbe505b784bf63c5e10efc07b35182", "filename": "libgfortran/generated/pow_i4_i4.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i4_i4.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,62 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_INTEGER_4\n+prefix(pow_i4_i4) (GFC_INTEGER_4 a, GFC_INTEGER_4 b)\n+{\n+  GFC_INTEGER_4 pow, x;\n+  GFC_INTEGER_4 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\t  if (x == 1)\n+\t    return 1;\n+\t  if (x == -1)\n+\t    return (n & 1) ? -1 : 1;\n+\t  return (x == 0) ? 1 / x : 0;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "72e8837912ca3a656fc9762ca3ef7e10907c959b", "filename": "libgfortran/generated/pow_i4_i8.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i4_i8.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,62 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_INTEGER_4\n+prefix(pow_i4_i8) (GFC_INTEGER_4 a, GFC_INTEGER_8 b)\n+{\n+  GFC_INTEGER_4 pow, x;\n+  GFC_INTEGER_8 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\t  if (x == 1)\n+\t    return 1;\n+\t  if (x == -1)\n+\t    return (n & 1) ? -1 : 1;\n+\t  return (x == 0) ? 1 / x : 0;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "7a900d74daeb4a3ca3f0ab6ded4b4ec37359c9f0", "filename": "libgfortran/generated/pow_i8_i4.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i8_i4.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,62 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_INTEGER_8\n+prefix(pow_i8_i4) (GFC_INTEGER_8 a, GFC_INTEGER_4 b)\n+{\n+  GFC_INTEGER_8 pow, x;\n+  GFC_INTEGER_4 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\t  if (x == 1)\n+\t    return 1;\n+\t  if (x == -1)\n+\t    return (n & 1) ? -1 : 1;\n+\t  return (x == 0) ? 1 / x : 0;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "591536fce7b8832cc56f3d84297c04ea2c085dd2", "filename": "libgfortran/generated/pow_i8_i8.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_i8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_i8_i8.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,62 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_INTEGER_8\n+prefix(pow_i8_i8) (GFC_INTEGER_8 a, GFC_INTEGER_8 b)\n+{\n+  GFC_INTEGER_8 pow, x;\n+  GFC_INTEGER_8 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\t  if (x == 1)\n+\t    return 1;\n+\t  if (x == -1)\n+\t    return (n & 1) ? -1 : 1;\n+\t  return (x == 0) ? 1 / x : 0;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "ffb8df7a8b29b2998eff51a35b2a5a984b363b6c", "filename": "libgfortran/generated/pow_r4_i4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r4_i4.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_REAL_4\n+prefix(pow_r4_i4) (GFC_REAL_4 a, GFC_INTEGER_4 b)\n+{\n+  GFC_REAL_4 pow, x;\n+  GFC_INTEGER_4 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "128388258a6f46ab734f397a613fdeb0e5294648", "filename": "libgfortran/generated/pow_r4_i8.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r4_i8.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_REAL_4\n+prefix(pow_r4_i8) (GFC_REAL_4 a, GFC_INTEGER_8 b)\n+{\n+  GFC_REAL_4 pow, x;\n+  GFC_INTEGER_8 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "fcead044cf2bf8c55681900990e16005e9da9d2c", "filename": "libgfortran/generated/pow_r8_i4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r8_i4.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_REAL_8\n+prefix(pow_r8_i4) (GFC_REAL_8 a, GFC_INTEGER_4 b)\n+{\n+  GFC_REAL_8 pow, x;\n+  GFC_INTEGER_4 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "7f75c82f79ba3807cacdd74d0b01c6cd29d6cb0e", "filename": "libgfortran/generated/pow_r8_i8.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fgenerated%2Fpow_r8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpow_r8_i8.c?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,60 @@\n+/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+GFC_REAL_8\n+prefix(pow_r8_i8) (GFC_REAL_8 a, GFC_INTEGER_8 b)\n+{\n+  GFC_REAL_8 pow, x;\n+  GFC_INTEGER_8 n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+\n+\t  n = -n;\n+\t  x = pow / x;\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}, {"sha": "4bf453a3946d751c7cf43a95029f1377c78f93c5", "filename": "libgfortran/m4/pow.m4", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fm4%2Fpow.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b200ac2c7278c022c23a684589df1b31a40a153/libgfortran%2Fm4%2Fpow.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fpow.m4?ref=5b200ac2c7278c022c23a684589df1b31a40a153", "patch": "@@ -0,0 +1,68 @@\n+`/* Support routines for the intrinsic power (**) operator.\n+   Copyright 2004 Free Software Foundation, Inc.\n+   Contributed by Paul Brook\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfor).\n+\n+Libgfor is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Ligbfor is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"'\n+include(iparm.m4)dnl\n+\n+/* Uuse Binary Method to calculate the powi. This is not an optimal but\n+   a simple and reasonable arithmetic. See section 4.6.3, \"Evaluation of\n+   Powers\" of Donald E. Knuth, \"Seminumerical Algorithms\", Vol. 2, \"The Art\n+   of Computer Programming\", 3rd Edition, 1998.  */\n+\n+rtype_name\n+`prefix(pow_'rtype_code`_'atype_code) (rtype_name a, atype_name b)\n+{\n+  rtype_name pow, x;\n+  atype_name n, u;\n+  \n+  n = b;\n+  x = a;\n+  pow = 1;\n+  if (n != 0)\n+    {\n+      if (n < 0)\n+\t{\n+ifelse(rtype_letter,i,`dnl\n+\t  if (x == 1)\n+\t    return 1;\n+\t  if (x == -1)\n+\t    return (n & 1) ? -1 : 1;\n+\t  return (x == 0) ? 1 / x : 0;\n+',`\n+\t  n = -n;\n+\t  x = pow / x;\n+')dnl\n+\t}\n+      u = n;\n+      for (;;)\n+\t{\n+\t  if (u & 1)\n+\t    pow *= x;\n+\t  u >>= 1;\n+\t  if (u)\n+\t    x *= x;\n+\t  else\n+\t    break;\n+\t}\n+    }\n+  return pow;\n+}"}]}