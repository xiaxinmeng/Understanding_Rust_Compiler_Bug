{"sha": "617718f72d0736e5f8630012d3276a276b9e153f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3NzE4ZjcyZDA3MzZlNWY4NjMwMDEyZDMyNzZhMjc2YjllMTUzZg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2011-03-07T07:50:23Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2011-03-07T07:50:23Z"}, "message": "linux.h (TARGET_ASM_FILE_END): Don't define.\n\n\t* config/rs6000/linux.h (TARGET_ASM_FILE_END): Don't define.\n\t* config/rs6000/linux64.h (TARGET_ASM_FILE_END): Don't define.\n\t* config/rs6000/sysv4.h (TARGET_ASM_FILE_END): Define.\n\t* config/rs6000/rs6000-protos.h (init_cumulative_args): Add fndecl and\n\treturn_mode args.\n\t* config/rs6000/rs6000.h (CUMULATIVE_ARGS): Add \"escapes\".\n\t(INIT_CUMULATIVE_ARGS): Pass FNDECL, VOIDmode.\n\t(INIT_CUMULATIVE_INCOMING_ARGS): Pass current_function_decl, VOIDmode.\n\t(INIT_CUMULATIVE_LIBCALL_ARGS): Pass NULL_TREE, MODE.\n\t* config/rs6000/rs6000.c\n\t(rs6000_elf_end_indicate_exec_stack): Rename to..\n\t(rs6000_elf_file_end): ..this.  Only call file_end_indicate_exec_stack\n\tfor POWERPC_LINUX.  Move code emitting .gnu_attribute to here, from..\n\t(rs6000_file_start): ..here.\n\t(rs6000_passes_float, rs6000_passes_vector, rs6000_returns_struct): New\n\tfile scope variables.\n\t(call_ABI_of_interest): New function.\n\t(init_cumulative_args): Set above vars when function return value\n\tis a float, vector, or small struct.\n\t(rs6000_function_arg_advance_1): Likewise for function args.\n\t(rs6000_va_start): Set rs6000_passes_float if variable arg function\n\treferences float args.\n\nFrom-SVN: r170734", "tree": {"sha": "78fcd00ea7956cb3b408e04c4eb0eb1dae126454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fcd00ea7956cb3b408e04c4eb0eb1dae126454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/617718f72d0736e5f8630012d3276a276b9e153f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/617718f72d0736e5f8630012d3276a276b9e153f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/617718f72d0736e5f8630012d3276a276b9e153f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/617718f72d0736e5f8630012d3276a276b9e153f/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb72848b0cf6d12be7af24e4f0d984e0d6a5b385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb72848b0cf6d12be7af24e4f0d984e0d6a5b385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb72848b0cf6d12be7af24e4f0d984e0d6a5b385"}], "stats": {"total": 190, "additions": 158, "deletions": 32}, "files": [{"sha": "0918f7a60fa8fac92c8b8dfd8b86dd42031f0c1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -1,3 +1,28 @@\n+2011-03-07  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/linux.h (TARGET_ASM_FILE_END): Don't define.\n+\t* config/rs6000/linux64.h (TARGET_ASM_FILE_END): Don't define.\n+\t* config/rs6000/sysv4.h (TARGET_ASM_FILE_END): Define.\n+\t* config/rs6000/rs6000-protos.h (init_cumulative_args): Add fndecl and\n+\treturn_mode args.\n+\t* config/rs6000/rs6000.h (CUMULATIVE_ARGS): Add \"escapes\".\n+\t(INIT_CUMULATIVE_ARGS): Pass FNDECL, VOIDmode.\n+\t(INIT_CUMULATIVE_INCOMING_ARGS): Pass current_function_decl, VOIDmode.\n+\t(INIT_CUMULATIVE_LIBCALL_ARGS): Pass NULL_TREE, MODE.\n+\t* config/rs6000/rs6000.c\n+\t(rs6000_elf_end_indicate_exec_stack): Rename to..\n+\t(rs6000_elf_file_end): ..this.  Only call file_end_indicate_exec_stack\n+\tfor POWERPC_LINUX.  Move code emitting .gnu_attribute to here, from..\n+\t(rs6000_file_start): ..here.\n+\t(rs6000_passes_float, rs6000_passes_vector, rs6000_returns_struct): New\n+\tfile scope variables.\n+\t(call_ABI_of_interest): New function.\n+\t(init_cumulative_args): Set above vars when function return value\n+\tis a float, vector, or small struct.\n+\t(rs6000_function_arg_advance_1): Likewise for function args.\n+\t(rs6000_va_start): Set rs6000_passes_float if variable arg function\n+\treferences float args.\n+\n 2011-03-07  Mingjie Xing  <mingjie.xing@gmail.com>\n \n \t* doc/cfg.texi: Remove \"See\" before @ref."}, {"sha": "77c8f61035b343d4fc5b7bbf410cca0b696aaed4", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for PowerPC machines running Linux.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2006, 2007, 2010 Free Software Foundation, Inc.\n+   2004, 2005, 2006, 2007, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Michael Meissner (meissner@cygnus.com).\n \n    This file is part of GCC.\n@@ -114,8 +114,6 @@\n #define RELOCATABLE_NEEDS_FIXUP \\\n   (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n \n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n-\n #define TARGET_POSIX_IO\n \n #define MD_UNWIND_SUPPORT \"config/rs6000/linux-unwind.h\""}, {"sha": "e6840d63e80eeb6a12b8e7f33ed5370a4339cf2e", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -537,8 +537,6 @@ extern int dot_symbols;\n #undef DRAFT_V4_STRUCT_RET\n #define DRAFT_V4_STRUCT_RET (!TARGET_64BIT)\n \n-#define TARGET_ASM_FILE_END rs6000_elf_end_indicate_exec_stack\n-\n #define TARGET_POSIX_IO\n \n #define LINK_GCC_C_SEQUENCE_SPEC \\"}, {"sha": "3b0d1dab7db1f73947d68a627005b5035871b3e2", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -28,7 +28,8 @@\n #ifdef RTX_CODE\n \n #ifdef TREE_CODE\n-extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, int, int, int);\n+extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, int, int, int,\n+\t\t\t\t  tree, enum machine_mode);\n #endif /* TREE_CODE */\n \n extern bool easy_altivec_constant (rtx, enum machine_mode);"}, {"sha": "8609c63d3c0de909e76d04ea6e7cb6e2ad176296", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 120, "deletions": 22, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -184,6 +184,14 @@ unsigned rs6000_pmode;\n /* Width in bits of a pointer.  */\n unsigned rs6000_pointer_size;\n \n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+/* Flag whether floating point values have been passed/returned.  */\n+static bool rs6000_passes_float;\n+/* Flag whether vector values have been passed/returned.  */\n+static bool rs6000_passes_vector;\n+/* Flag whether small (<= 8 byte) structures have been returned.  */\n+static bool rs6000_returns_struct;\n+#endif\n \n /* Value is TRUE if register/mode pair is acceptable.  */\n bool rs6000_hard_regno_mode_ok_p[NUM_MACHINE_MODES][FIRST_PSEUDO_REGISTER];\n@@ -940,7 +948,7 @@ static void rs6000_file_start (void);\n static int rs6000_elf_reloc_rw_mask (void);\n static void rs6000_elf_asm_out_constructor (rtx, int) ATTRIBUTE_UNUSED;\n static void rs6000_elf_asm_out_destructor (rtx, int) ATTRIBUTE_UNUSED;\n-static void rs6000_elf_end_indicate_exec_stack (void) ATTRIBUTE_UNUSED;\n+static void rs6000_elf_file_end (void) ATTRIBUTE_UNUSED;\n static void rs6000_elf_asm_init_sections (void);\n static section *rs6000_elf_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t       unsigned HOST_WIDE_INT);\n@@ -4695,23 +4703,6 @@ rs6000_file_start (void)\n \tputc ('\\n', file);\n     }\n \n-#ifdef HAVE_AS_GNU_ATTRIBUTE\n-  if (TARGET_32BIT && DEFAULT_ABI == ABI_V4)\n-    {\n-      fprintf (file, \"\\t.gnu_attribute 4, %d\\n\",\n-\t       ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT) ? 1 \n-\t        : (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT) ? 3 \n-\t        : 2));\n-      fprintf (file, \"\\t.gnu_attribute 8, %d\\n\",\n-\t       (TARGET_ALTIVEC_ABI ? 2\n-\t\t: TARGET_SPE_ABI ? 3\n-\t\t: 1));\n-      fprintf (file, \"\\t.gnu_attribute 12, %d\\n\",\n-\t       aix_struct_return ? 2 : 1);\n-\n-    }\n-#endif\n-\n   if (DEFAULT_ABI == ABI_AIX || (TARGET_ELF && flag_pic == 2))\n     {\n       switch_to_section (toc_section);\n@@ -7865,17 +7856,46 @@ rs6000_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+/* Return TRUE if a call to function FNDECL may be one that\n+   potentially affects the function calling ABI of the object file.  */\n+\n+static bool\n+call_ABI_of_interest (tree fndecl)\n+{\n+  if (cgraph_state == CGRAPH_STATE_EXPANSION)\n+    {\n+      struct cgraph_node *c_node;\n+\n+      /* Libcalls are always interesting.  */\n+      if (fndecl == NULL_TREE)\n+\treturn true;\n+\n+      /* Any call to an external function is interesting.  */\n+      if (DECL_EXTERNAL (fndecl))\n+\treturn true;\n+\n+      /* Interesting functions that we are emitting in this object file.  */\n+      c_node = cgraph_node (fndecl);\n+      return !cgraph_only_called_directly_p (c_node);\n+    }\n+  return false;\n+}\n+#endif\n+\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n-   For a library call, FNTYPE is 0.\n+   For a library call, FNTYPE is 0 and RETURN_MODE the return value mode.\n \n    For incoming args we set the number of arguments in the prototype large\n    so we never return a PARALLEL.  */\n \n void\n init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t\t      rtx libname ATTRIBUTE_UNUSED, int incoming,\n-\t\t      int libcall, int n_named_args)\n+\t\t      int libcall, int n_named_args,\n+\t\t      tree fndecl ATTRIBUTE_UNUSED,\n+\t\t      enum machine_mode return_mode ATTRIBUTE_UNUSED)\n {\n   static CUMULATIVE_ARGS zero_cumulative;\n \n@@ -7917,6 +7937,45 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t       cum->prototype, cum->nargs_prototype);\n     }\n \n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+  if (DEFAULT_ABI == ABI_V4)\n+    {\n+      cum->escapes = call_ABI_of_interest (fndecl);\n+      if (cum->escapes)\n+\t{\n+\t  tree return_type;\n+\n+\t  if (fntype)\n+\t    {\n+\t      return_type = TREE_TYPE (fntype);\n+\t      return_mode = TYPE_MODE (return_type);\n+\t    }\n+\t  else\n+\t    return_type = lang_hooks.types.type_for_mode (return_mode, 0);\n+\n+\t  if (return_type != NULL)\n+\t    {\n+\t      if (TREE_CODE (return_type) == RECORD_TYPE\n+\t\t  && TYPE_TRANSPARENT_AGGR (return_type))\n+\t\t{\n+\t\t  return_type = TREE_TYPE (first_field (return_type));\n+\t\t  return_mode = TYPE_MODE (return_type);\n+\t\t}\n+\t      if (AGGREGATE_TYPE_P (return_type)\n+\t\t  && ((unsigned HOST_WIDE_INT) int_size_in_bytes (return_type)\n+\t\t      <= 8))\n+\t\trs6000_returns_struct = true;\n+\t    }\n+\t  if (SCALAR_FLOAT_MODE_P (return_mode))\n+\t    rs6000_passes_float = true;\n+\t  else if (ALTIVEC_VECTOR_MODE (return_mode)\n+\t\t   || VSX_VECTOR_MODE (return_mode)\n+\t\t   || SPE_VECTOR_MODE (return_mode))\n+\t    rs6000_passes_vector = true;\n+\t}\n+    }\n+#endif\n+\n   if (fntype\n       && !TARGET_ALTIVEC\n       && TARGET_ALTIVEC_ABI\n@@ -8235,11 +8294,25 @@ static void\n rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t       const_tree type, bool named, int depth)\n {\n-\n   /* Only tick off an argument if we're not recursing.  */\n   if (depth == 0)\n     cum->nargs_prototype--;\n \n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+  if (DEFAULT_ABI == ABI_V4\n+      && cum->escapes)\n+    {\n+      if (SCALAR_FLOAT_MODE_P (mode))\n+\trs6000_passes_float = true;\n+      else if (named && (ALTIVEC_VECTOR_MODE (mode) || VSX_VECTOR_MODE (mode)))\n+\trs6000_passes_vector = true;\n+      else if (SPE_VECTOR_MODE (mode)\n+\t       && !cum->stdarg\n+\t       && cum->sysv_gregno <= GP_ARG_MAX_REG)\n+\trs6000_passes_vector = true;\n+    }\n+#endif\n+\n   if (TARGET_ALTIVEC_ABI\n       && (ALTIVEC_VECTOR_MODE (mode)\n \t  || VSX_VECTOR_MODE (mode)\n@@ -9504,6 +9577,11 @@ rs6000_va_start (tree valist, rtx nextarg)\n \t\t  build_int_cst (NULL_TREE, n_fpr));\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+      if (call_ABI_of_interest (cfun->decl))\n+\trs6000_passes_float = true;\n+#endif\n     }\n \n   /* Find the overflow area.  */\n@@ -25786,10 +25864,30 @@ rs6000_elf_declare_function_name (FILE *file, const char *name, tree decl)\n }\n \n static void\n-rs6000_elf_end_indicate_exec_stack (void)\n+rs6000_elf_file_end (void)\n {\n+#ifdef HAVE_AS_GNU_ATTRIBUTE\n+  if (TARGET_32BIT && DEFAULT_ABI == ABI_V4)\n+    {\n+      if (rs6000_passes_float)\n+\tfprintf (asm_out_file, \"\\t.gnu_attribute 4, %d\\n\",\n+\t\t ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT) ? 1 \n+\t\t  : (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT) ? 3 \n+\t\t  : 2));\n+      if (rs6000_passes_vector)\n+\tfprintf (asm_out_file, \"\\t.gnu_attribute 8, %d\\n\",\n+\t\t (TARGET_ALTIVEC_ABI ? 2\n+\t\t  : TARGET_SPE_ABI ? 3\n+\t\t  : 1));\n+      if (rs6000_returns_struct)\n+\tfprintf (asm_out_file, \"\\t.gnu_attribute 12, %d\\n\",\n+\t\t aix_struct_return ? 2 : 1);\n+    }\n+#endif\n+#ifdef POWERPC_LINUX\n   if (TARGET_32BIT)\n     file_end_indicate_exec_stack ();\n+#endif\n }\n #endif\n "}, {"sha": "98ec24c75eb9b21e17595b501e5c336970c5066e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -1570,25 +1570,29 @@ typedef struct rs6000_args\n   int floats_in_gpr;\t\t/* count of SFmode floats taking up\n \t\t\t\t   GPR space (darwin64) */\n   int named;\t\t\t/* false for varargs params */\n+  int escapes;\t\t\t/* if function visible outside tu */\n } CUMULATIVE_ARGS;\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n-  init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, FALSE, N_NAMED_ARGS)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n+  init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, FALSE, \\\n+\t\t\tN_NAMED_ARGS, FNDECL, VOIDmode)\n \n /* Similar, but when scanning the definition of a procedure.  We always\n    set NARGS_PROTOTYPE large so we never return an EXPR_LIST.  */\n \n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n-  init_cumulative_args (&CUM, FNTYPE, LIBNAME, TRUE, FALSE, 1000)\n+  init_cumulative_args (&CUM, FNTYPE, LIBNAME, TRUE, FALSE, \\\n+\t\t\t1000, current_function_decl, VOIDmode)\n \n /* Like INIT_CUMULATIVE_ARGS' but only used for outgoing libcalls.  */\n \n #define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n-  init_cumulative_args (&CUM, NULL_TREE, LIBNAME, FALSE, TRUE, 0)\n+  init_cumulative_args (&CUM, NULL_TREE, LIBNAME, FALSE, TRUE, \\\n+\t\t\t0, NULL_TREE, MODE)\n \n /* If defined, a C expression which determines whether, and in which\n    direction, to pad out an argument with extra space.  The value"}, {"sha": "aeb934f6ed5651524da79ba02dfc7bc139aca25c", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/617718f72d0736e5f8630012d3276a276b9e153f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=617718f72d0736e5f8630012d3276a276b9e153f", "patch": "@@ -1031,6 +1031,8 @@ ncrtn.o%s\"\n /* Generate entries in .fixup for relocatable addresses.  */\n #define RELOCATABLE_NEEDS_FIXUP 1\n \n+#define TARGET_ASM_FILE_END rs6000_elf_file_end\n+\n /* This target uses the sysv4.opt file.  */\n #define TARGET_USES_SYSV4_OPT 1\n "}]}