{"sha": "439ef907aeff88f1ca7c19bca5d24810a7500796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM5ZWY5MDdhZWZmODhmMWNhN2MxOWJjYTVkMjQ4MTBhNzUwMDc5Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-06T14:55:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-06T14:55:31Z"}, "message": "re PR tree-optimization/28868 (Not eliminating the PHIs which have the same arguments)\n\n2009-04-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/28868\n\t* tree-ssa-pre.c (inserted_phi_names): New bitmap to keep track\n\tof which PHI results we inserted.\n\t(insert_into_preds_of_block): Record inserted PHIs.\n\t(eliminate): Eliminate redundant PHI nodes.\n\t(init_pre): Init inserted_phi_names.\n\n\t* gcc.dg/tree-ssa/ssa-fre-21.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-sccvn-1.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-sccvn-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-sccvn-4.c: Likewise.\n\nFrom-SVN: r145607", "tree": {"sha": "a9c105e503475558e3ac3923c722ae7cafcc529a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c105e503475558e3ac3923c722ae7cafcc529a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/439ef907aeff88f1ca7c19bca5d24810a7500796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439ef907aeff88f1ca7c19bca5d24810a7500796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439ef907aeff88f1ca7c19bca5d24810a7500796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439ef907aeff88f1ca7c19bca5d24810a7500796/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ae3576fa412634f1a4d8dcfe949531b8e7990da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae3576fa412634f1a4d8dcfe949531b8e7990da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae3576fa412634f1a4d8dcfe949531b8e7990da"}], "stats": {"total": 137, "additions": 129, "deletions": 8}, "files": [{"sha": "ff890deb3f565660bbdbcbd1dbad59144e99c03f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -1,3 +1,12 @@\n+2009-04-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28868\n+\t* tree-ssa-pre.c (inserted_phi_names): New bitmap to keep track\n+\tof which PHI results we inserted.\n+\t(insert_into_preds_of_block): Record inserted PHIs.\n+\t(eliminate): Eliminate redundant PHI nodes.\n+\t(init_pre): Init inserted_phi_names.\n+\n 2009-04-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39643"}, {"sha": "ffc5ad2c56c51188454982444147b55a96536389", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -1,3 +1,11 @@\n+2009-04-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28868\n+\t* gcc.dg/tree-ssa/ssa-fre-21.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-sccvn-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-sccvn-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-sccvn-4.c: Likewise.\n+\n 2009-04-06  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.dg/pragma-isr-trapa2.c: Skip test for FPU-less architectures."}, {"sha": "491836d28ef63eac002f660809cb35161d6d6929", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-23.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-23.c?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre\" } */\n+\n+int f(int t, int a, int b)\n+{\n+  int c, d;\n+  if (t)\n+    {\n+      c = a;\n+      d = a;\n+    }\n+  else\n+    {\n+      c = b;\n+      d = b;\n+    }\n+  return c+d;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"PHI\" 1 \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "65cd83d7cded5f0b2d17bdca80a899326e110ecd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sccvn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-1.c?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -17,5 +17,5 @@ void vnum_test8(int *data)\n   } \n } \n /* We should eliminate m - n, and set n = n + k into n = m. */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"fre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"fre\"} } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "cc3661cc6d78ca3c028349505ddb1d6b1fba94c4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sccvn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-2.c?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -21,5 +21,5 @@ int vnum_test8(int *data)\n } \n /* We should eliminate m - n, and set n = n + k into n = m, and\n    set p to 0 */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"fre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"fre\"} } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "27ccda5264a9a9bc7eebd929366b7cff1cc64501", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sccvn-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-4.c?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -23,5 +23,5 @@ int vnum_test8(int *data)\n } \n /* We should eliminate m - n, n + k, set data[5] = 0, eliminate the\n    address arithmetic for data[5], and set p = 0.\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 5\" 1 \"fre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 6\" 1 \"fre\"} } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "0b913dc117d2349c4202c9046827ba35b5b83a3c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 88, "deletions": 5, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439ef907aeff88f1ca7c19bca5d24810a7500796/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=439ef907aeff88f1ca7c19bca5d24810a7500796", "patch": "@@ -2597,6 +2597,7 @@ can_PRE_operation (tree op)\n    for performing quick dead code elimination of insertions we made\n    that didn't turn out to be necessary.   */\n static VEC(gimple,heap) *inserted_exprs;\n+static bitmap inserted_phi_names;\n \n /* Pool allocated fake store expressions are placed onto this\n    worklist, which, after performing dead code elimination, is walked\n@@ -3242,6 +3243,8 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   VN_INFO_GET (gimple_phi_result (phi))->valnum = gimple_phi_result (phi);\n   VN_INFO (gimple_phi_result (phi))->value_id = val;\n   VEC_safe_push (gimple, heap, inserted_exprs, phi);\n+  bitmap_set_bit (inserted_phi_names,\n+\t\t  SSA_NAME_VERSION (gimple_phi_result (phi)));\n   FOR_EACH_EDGE (pred, ei, block->preds)\n     {\n       pre_expr ae = avail[pred->src->index];\n@@ -4129,16 +4132,95 @@ eliminate (void)\n \t\t}\n \t    }\n \t}\n+\n+      for (gsi = gsi_start_phis (b); !gsi_end_p (gsi);)\n+\t{\n+\t  gimple stmt, phi = gsi_stmt (gsi);\n+\t  tree sprime = NULL_TREE, res = PHI_RESULT (phi);\n+\t  pre_expr sprimeexpr, resexpr;\n+\t  gimple_stmt_iterator gsi2;\n+\n+\t  /* We want to perform redundant PHI elimination.  Do so by\n+\t     replacing the PHI with a single copy if possible.\n+\t     Do not touch inserted, single-argument or virtual PHIs.  */\n+\t  if (gimple_phi_num_args (phi) == 1\n+\t      || !is_gimple_reg (res)\n+\t      || bitmap_bit_p (inserted_phi_names, SSA_NAME_VERSION (res)))\n+\t    {\n+\t      gsi_next (&gsi);\n+\t      continue;\n+\t    }\n+\n+\t  resexpr = get_or_alloc_expr_for_name (res);\n+\t  sprimeexpr = bitmap_find_leader (AVAIL_OUT (b),\n+\t\t\t\t\t   get_expr_value_id (resexpr), NULL);\n+\t  if (sprimeexpr)\n+\t    {\n+\t      if (sprimeexpr->kind == CONSTANT)\n+\t\tsprime = PRE_EXPR_CONSTANT (sprimeexpr);\n+\t      else if (sprimeexpr->kind == NAME)\n+\t\tsprime = PRE_EXPR_NAME (sprimeexpr);\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n+\t  if (!sprimeexpr\n+\t      || sprime == res)\n+\t    {\n+\t      gsi_next (&gsi);\n+\t      continue;\n+\t    }\n+\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Replaced redundant PHI node defining \");\n+\t      print_generic_expr (dump_file, res, 0);\n+\t      fprintf (dump_file, \" with \");\n+\t      print_generic_expr (dump_file, sprime, 0);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\n+\t  remove_phi_node (&gsi, false);\n+\n+\t  stmt = gimple_build_assign (res, sprime);\n+\t  SSA_NAME_DEF_STMT (res) = stmt;\n+\t  if (TREE_CODE (sprime) == SSA_NAME)\n+\t    gimple_set_plf (SSA_NAME_DEF_STMT (sprime),\n+\t\t\t    NECESSARY, true);\n+\t  gsi2 = gsi_after_labels (b);\n+\t  gsi_insert_before (&gsi2, stmt, GSI_NEW_STMT);\n+\t  /* Queue the copy for eventual removal.  */\n+\t  VEC_safe_push (gimple, heap, to_remove, stmt);\n+\t  pre_stats.eliminations++;\n+\t}\n     }\n \n   /* We cannot remove stmts during BB walk, especially not release SSA\n-     names there as this confuses the VN machinery.  */\n+     names there as this confuses the VN machinery.  The stmts ending\n+     up in to_remove are either stores or simple copies.  */\n   for (i = 0; VEC_iterate (gimple, to_remove, i, stmt); ++i)\n     {\n-      gsi = gsi_for_stmt (stmt);\n-      unlink_stmt_vdef (stmt);\n-      gsi_remove (&gsi, true);\n-      release_defs (stmt);\n+      tree lhs = gimple_assign_lhs (stmt);\n+      use_operand_p use_p;\n+      gimple use_stmt;\n+\n+      /* If there is a single use only, propagate the equivalency\n+\t instead of keeping the copy.  */\n+      if (TREE_CODE (lhs) == SSA_NAME\n+\t  && single_imm_use (lhs, &use_p, &use_stmt))\n+\t{\n+\t  SET_USE (use_p, gimple_assign_rhs1 (stmt));\n+\t  update_stmt (stmt);\n+\t}\n+\n+      /* If this is a store or a now unused copy, remove it.  */\n+      if (TREE_CODE (lhs) != SSA_NAME\n+\t  || has_zero_uses (lhs))\n+\t{\n+\t  gsi = gsi_for_stmt (stmt);\n+\t  unlink_stmt_vdef (stmt);\n+\t  gsi_remove (&gsi, true);\n+\t  release_defs (stmt);\n+\t}\n     }\n   VEC_free (gimple, heap, to_remove);\n \n@@ -4296,6 +4378,7 @@ init_pre (bool do_fre)\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   bitmap_obstack_initialize (&grand_bitmap_obstack);\n+  inserted_phi_names = BITMAP_ALLOC (&grand_bitmap_obstack);\n   phi_translate_table = htab_create (5110, expr_pred_trans_hash,\n \t\t\t\t     expr_pred_trans_eq, free);\n   expression_to_id = htab_create (num_ssa_names * 3,"}]}