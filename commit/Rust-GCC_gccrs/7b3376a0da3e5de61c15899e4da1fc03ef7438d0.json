{"sha": "7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzMzc2YTBkYTNlNWRlNjFjMTU4OTllNGRhMWZjMDNlZjc0MzhkMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-05-19T01:01:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-05-19T01:01:12Z"}, "message": "ipa.c (symtab_remove_unreachable_nodes): Remove symbol from comdat group if its body was eliminated.\n\n\t* ipa.c (symtab_remove_unreachable_nodes): Remove\n\tsymbol from comdat group if its body was eliminated.\n\t(comdat_can_be_unshared_p_1): Static symbols can always\n\tbe privatized.\n\t* symtab.c (symtab_remove_from_same_comdat_group): Break out\n\tfrom ...\n\t(symtab_unregister_node): ... this one.\n\t(verify_symtab_base): More strict checking of comdats.\n\t* cgraph.h (symtab_remove_from_same_comdat_group): Declare.\n\nFrom-SVN: r210598", "tree": {"sha": "ba76d5a126b19a9883d7c963376b2cffd9f0d6a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba76d5a126b19a9883d7c963376b2cffd9f0d6a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/comments", "author": null, "committer": null, "parents": [{"sha": "a04d9035ec03996fd6f96a1ece21bc8d4c54cd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04d9035ec03996fd6f96a1ece21bc8d4c54cd40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04d9035ec03996fd6f96a1ece21bc8d4c54cd40"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "dcbe6f658de3e0ae153ebc5f9621815625b5f4b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "patch": "@@ -1,3 +1,15 @@\n+2014-05-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa.c (symtab_remove_unreachable_nodes): Remove\n+\tsymbol from comdat group if its body was eliminated.\n+\t(comdat_can_be_unshared_p_1): Static symbols can always\n+\tbe privatized.\n+\t* symtab.c (symtab_remove_from_same_comdat_group): Break out\n+\tfrom ...\n+\t(symtab_unregister_node): ... this one.\n+\t(verify_symtab_base): More strict checking of comdats.\n+\t* cgraph.h (symtab_remove_from_same_comdat_group): Declare.\n+\n 2014-05-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-pass.h (make_pass_ipa_comdats): New pass."}, {"sha": "9dc6f0186f18694bfddb7fcae2d5a6d3f52ddcd4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "patch": "@@ -725,6 +725,7 @@ enum symbol_partitioning_class\n /* In symtab.c  */\n void symtab_register_node (symtab_node *);\n void symtab_unregister_node (symtab_node *);\n+void symtab_remove_from_same_comdat_group (symtab_node *);\n void symtab_remove_node (symtab_node *);\n symtab_node *symtab_get_node (const_tree);\n symtab_node *symtab_node_for_asm (const_tree asmname);"}, {"sha": "9c88fe4dbbadaaae5ae2e9dfc00e0d68f215ba7d", "filename": "gcc/ipa.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "patch": "@@ -517,6 +517,7 @@ symtab_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t      if (!node->in_other_partition)\n \t\tnode->local.local = false;\n \t      cgraph_node_remove_callees (node);\n+\t      symtab_remove_from_same_comdat_group (node);\n \t      ipa_remove_all_references (&node->ref_list);\n \t      changed = true;\n \t    }\n@@ -572,6 +573,8 @@ symtab_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t  vnode->analyzed = false;\n \t  vnode->aux = NULL;\n \n+\t  symtab_remove_from_same_comdat_group (vnode);\n+\n \t  /* Keep body if it may be useful for constant folding.  */\n \t  if ((init = ctor_for_folding (vnode->decl)) == error_mark_node)\n \t    varpool_remove_initializer (vnode);\n@@ -776,6 +779,8 @@ address_taken_from_non_vtable_p (symtab_node *node)\n static bool\n comdat_can_be_unshared_p_1 (symtab_node *node)\n {\n+  if (!node->externally_visible)\n+    return true;\n   /* When address is taken, we don't know if equality comparison won't\n      break eventually. Exception are virutal functions, C++\n      constructors/destructors and vtables, where this is not possible by"}, {"sha": "6b9b77abdfc8f9afa06447b02b4e80b4a55fff32", "filename": "gcc/symtab.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3376a0da3e5de61c15899e4da1fc03ef7438d0/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=7b3376a0da3e5de61c15899e4da1fc03ef7438d0", "patch": "@@ -323,16 +323,11 @@ symtab_insert_node_to_hashtable (symtab_node *node)\n   *slot = node;\n }\n \n-/* Remove node from symbol table.  This function is not used directly, but via\n-   cgraph/varpool node removal routines.  */\n+/* Remove NODE from same comdat group.   */\n \n void\n-symtab_unregister_node (symtab_node *node)\n+symtab_remove_from_same_comdat_group (symtab_node *node)\n {\n-  void **slot;\n-  ipa_remove_all_references (&node->ref_list);\n-  ipa_remove_all_referring (&node->ref_list);\n-\n   if (node->same_comdat_group)\n     {\n       symtab_node *prev;\n@@ -346,6 +341,19 @@ symtab_unregister_node (symtab_node *node)\n \tprev->same_comdat_group = node->same_comdat_group;\n       node->same_comdat_group = NULL;\n     }\n+}\n+\n+/* Remove node from symbol table.  This function is not used directly, but via\n+   cgraph/varpool node removal routines.  */\n+\n+void\n+symtab_unregister_node (symtab_node *node)\n+{\n+  void **slot;\n+  ipa_remove_all_references (&node->ref_list);\n+  ipa_remove_all_referring (&node->ref_list);\n+\n+  symtab_remove_from_same_comdat_group (node);\n \n   if (node->previous)\n     node->previous->next = node->next;\n@@ -829,6 +837,16 @@ verify_symtab_base (symtab_node *node)\n \t  error (\"non-DECL_ONE_ONLY node in a same_comdat_group list\");\n \t  error_found = true;\n \t}\n+      if (DECL_COMDAT_GROUP (n->decl) != DECL_COMDAT_GROUP (node->same_comdat_group->decl))\n+\t{\n+\t  error (\"same_comdat_group list across different groups\");\n+\t  error_found = true;\n+\t}\n+      if (!n->definition)\n+\t{\n+\t  error (\"Node has same_comdat_group but it is not a definition\");\n+\t  error_found = true;\n+\t}\n       if (n->type != node->type)\n \t{\n \t  error (\"mixing different types of symbol in same comdat groups is not supported\");"}]}