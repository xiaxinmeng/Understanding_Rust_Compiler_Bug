{"sha": "2b271002241ca01925b19d586ff2f30ce797d380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIyNzEwMDIyNDFjYTAxOTI1YjE5ZDU4NmZmMmYzMGNlNzk3ZDM4MA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-03-10T08:55:57Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-03-10T08:55:57Z"}, "message": "Makefile.in (tree-optimize.o): Add CFGLOOP_H dependence.\n\n\t* Makefile.in (tree-optimize.o): Add CFGLOOP_H dependence.\n\t* cfgloop.c (flow_loop_nodes_find): Export.\n\t* cfgloop.h (flow_loop_nodes_find, fix_loop_structure):\n\tDeclare.\n\t* cfgloopmanip.c (fix_loop_structure): New function.\n\t* predict.c (predict_loops): Clean up the loops information.\n\t* tree-cfg.c (cleanup_tree_cfg_loop): New function.\n\t(tree_can_merge_blocks_p, remove_bb, tree_forwarder_block_p): Respect\n\tloop structure.\n\t* tree-flow.h (cleanup_tree_cfg_loop): Declare.\n\t(rewrite_into_loop_closed_ssa): Declaration changed.\n\t* tree-loop-linear.c (linear_transform_loops): Add argument to\n\trewrite_into_loop_closed_ssa call.\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Ditto.\n\t* tree-ssa-loop-im.c (move_computations): Ditto.\n\t* tree-ssa-loop.c (tree_loop_optimizer_init): Ditto.\n\t* tree-vectorizer.c (vectorize_loops): Ditto.\n\t* tree-optimize.c: Include cfgloop.h.\n\t(execute_todo): Choose whether to call cleanup_tree_cfg or\n\tcleanup_tree_cfg_loop.\n\t* tree-ssa-loop-ivcanon.c (canonicalize_loop_induction_variables,\n\t(tree_unroll_loops_completely): Enable cleanup_tree_cfg_loop call.\n\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Enable\n\tcleanup_tree_cfg_loop call.\n\t* tree-ssa-loop-manip.c (find_uses_to_rename_bb): New function.\n\t(find_uses_to_rename, rewrite_into_loop_closed_ssa): Support\n\twork on part of cfg.\n\nFrom-SVN: r96232", "tree": {"sha": "f2b46ed67074fdbfd5baaae62b80c6995933ebe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b46ed67074fdbfd5baaae62b80c6995933ebe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b271002241ca01925b19d586ff2f30ce797d380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b271002241ca01925b19d586ff2f30ce797d380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b271002241ca01925b19d586ff2f30ce797d380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b271002241ca01925b19d586ff2f30ce797d380/comments", "author": null, "committer": null, "parents": [{"sha": "17049f0bbb41269470981caefa6d05fd3c26b47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17049f0bbb41269470981caefa6d05fd3c26b47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17049f0bbb41269470981caefa6d05fd3c26b47b"}], "stats": {"total": 299, "additions": 261, "deletions": 38}, "files": [{"sha": "a2be0af12b8cec81dd2299bd1deb2df70711f301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -1,3 +1,33 @@\n+2005-03-10  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* Makefile.in (tree-optimize.o): Add CFGLOOP_H dependence.\n+\t* cfgloop.c (flow_loop_nodes_find): Export.\n+\t* cfgloop.h (flow_loop_nodes_find, fix_loop_structure):\n+\tDeclare.\n+\t* cfgloopmanip.c (fix_loop_structure): New function.\n+\t* predict.c (predict_loops): Clean up the loops information.\n+\t* tree-cfg.c (cleanup_tree_cfg_loop): New function.\n+\t(tree_can_merge_blocks_p, remove_bb, tree_forwarder_block_p): Respect\n+\tloop structure.\n+\t* tree-flow.h (cleanup_tree_cfg_loop): Declare.\n+\t(rewrite_into_loop_closed_ssa): Declaration changed.\n+\t* tree-loop-linear.c (linear_transform_loops): Add argument to\n+\trewrite_into_loop_closed_ssa call.\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Ditto.\n+\t* tree-ssa-loop-im.c (move_computations): Ditto.\n+\t* tree-ssa-loop.c (tree_loop_optimizer_init): Ditto.\n+\t* tree-vectorizer.c (vectorize_loops): Ditto.\n+\t* tree-optimize.c: Include cfgloop.h.\n+\t(execute_todo): Choose whether to call cleanup_tree_cfg or\n+\tcleanup_tree_cfg_loop.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_loop_induction_variables,\n+\t(tree_unroll_loops_completely): Enable cleanup_tree_cfg_loop call.\n+\t* tree-ssa-loop-unswitch.c (tree_ssa_unswitch_loops): Enable\n+\tcleanup_tree_cfg_loop call.\n+\t* tree-ssa-loop-manip.c (find_uses_to_rename_bb): New function.\n+\t(find_uses_to_rename, rewrite_into_loop_closed_ssa): Support\n+\twork on part of cfg.\n+\n 2005-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/20314"}, {"sha": "1b72ac8132efe065c4b742edf93c6f69e2031cb5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -1740,7 +1740,7 @@ tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(GGC_H) output.h diagnostic.h errors.h $(FLAGS_H) \\\n    $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) toplev.h function.h \\\n    langhooks.h $(FLAGS_H) $(CGRAPH_H) tree-inline.h tree-mudflap.h $(GGC_H) \\\n-   $(CGRAPH_H) tree-pass.h\n+   $(CGRAPH_H) tree-pass.h $(CFGLOOP_H)\n c-gimplify.o : c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) errors.h \\\n    $(C_TREE_H) $(C_COMMON_H) diagnostic.h $(TREE_GIMPLE_H) varray.h $(FLAGS_H) \\\n    langhooks.h toplev.h rtl.h $(TREE_FLOW_H) langhooks-def.h \\"}, {"sha": "b85fac52d80fabcfb7235c5d15530205b02b911a", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -41,7 +41,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define LATCH_EDGE(E) (*(int *) (E)->aux)\n \n static void flow_loops_cfg_dump (const struct loops *, FILE *);\n-static int flow_loop_nodes_find (basic_block, struct loop *);\n static int flow_loop_level_compute (struct loop *);\n static void flow_loops_level_compute (struct loops *);\n static void establish_preds (struct loop *);\n@@ -222,7 +221,7 @@ flow_loops_free (struct loops *loops)\n /* Find the nodes contained within the LOOP with header HEADER.\n    Return the number of nodes within the loop.  */\n \n-static int\n+int\n flow_loop_nodes_find (basic_block header, struct loop *loop)\n {\n   basic_block *stack;"}, {"sha": "e0dad37ec103f9a58c94e8de281f4ad4a61ec233", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -236,6 +236,8 @@ extern void flow_loops_dump (const struct loops *, FILE *,\n extern void flow_loop_dump (const struct loop *, FILE *,\n \t\t\t    void (*)(const struct loop *, FILE *, int), int);\n extern void flow_loop_free (struct loop *);\n+int flow_loop_nodes_find (basic_block, struct loop *);\n+void fix_loop_structure (struct loops *, bitmap changed_bbs);\n void mark_irreducible_loops (struct loops *);\n void mark_single_exit_loops (struct loops *);\n extern void create_loop_notes (void);"}, {"sha": "7405380fb25d2b9497f747a321cc37af98889c08", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -1372,3 +1372,102 @@ create_loop_notes (void)\n     }\n   flow_loops_free (&loops);\n }\n+\n+/* The structure of LOOPS might have changed.  Some loops might get removed\n+   (and their headers and latches were set to NULL), loop exists might get\n+   removed (thus the loop nesting may be wrong), and some blocks and edges\n+   were changed (so the information about bb --> loop mapping does not have\n+   to be correct).  But still for the remaining loops the header dominates\n+   the latch, and loops did not get new subloobs (new loops might possibly\n+   get created, but we are not interested in them).  Fix up the mess.\n+ \n+   If CHANGED_BBS is not NULL, basic blocks whose loop has changed are\n+   marked in it.  */\n+\n+void\n+fix_loop_structure (struct loops *loops, bitmap changed_bbs)\n+{\n+  basic_block bb;\n+  struct loop *loop, *ploop;\n+  unsigned i;\n+\n+  /* Remove the old bb -> loop mapping.  */\n+  FOR_EACH_BB (bb)\n+    {\n+      bb->aux = (void *) (size_t) bb->loop_father->depth;\n+      bb->loop_father = loops->tree_root;\n+    }\n+\n+  /* Remove the dead loops from structures.  */\n+  loops->tree_root->num_nodes = n_basic_blocks + 2;\n+  for (i = 1; i < loops->num; i++)\n+    {\n+      loop = loops->parray[i];\n+      if (!loop)\n+\tcontinue;\n+\n+      loop->num_nodes = 0;\n+      if (loop->header)\n+\tcontinue;\n+\n+      while (loop->inner)\n+\t{\n+\t  ploop = loop->inner;\n+\t  flow_loop_tree_node_remove (ploop);\n+\t  flow_loop_tree_node_add (loop->outer, ploop);\n+\t}\n+\n+      /* Remove the loop and free its data.  */\n+      flow_loop_tree_node_remove (loop);\n+      loops->parray[loop->num] = NULL;\n+      flow_loop_free (loop);\n+    }\n+\n+  /* Rescan the bodies of loops, starting from the outermost.  */\n+  loop = loops->tree_root;\n+  while (1)\n+    {\n+      if (loop->inner)\n+\tloop = loop->inner;\n+      else\n+\t{\n+\t  while (!loop->next\n+\t\t && loop != loops->tree_root)\n+\t    loop = loop->outer;\n+\t  if (loop == loops->tree_root)\n+\t    break;\n+\n+\t  loop = loop->next;\n+\t}\n+\n+      loop->num_nodes = flow_loop_nodes_find (loop->header, loop);\n+    }\n+\n+  /* Now fix the loop nesting.  */\n+  for (i = 1; i < loops->num; i++)\n+    {\n+      loop = loops->parray[i];\n+      if (!loop)\n+\tcontinue;\n+\n+      bb = loop_preheader_edge (loop)->src;\n+      if (bb->loop_father != loop->outer)\n+\t{\n+\t  flow_loop_tree_node_remove (loop);\n+\t  flow_loop_tree_node_add (bb->loop_father, loop);\n+\t}\n+    }\n+\n+  /* Mark the blocks whose loop has changed.  */\n+  FOR_EACH_BB (bb)\n+    {\n+      if (changed_bbs\n+\t  && (void *) (size_t) bb->loop_father->depth != bb->aux)\n+\tbitmap_set_bit (changed_bbs, bb->index);\n+\n+      bb->aux = NULL;\n+    }\n+\n+  mark_single_exit_loops (loops);\n+  mark_irreducible_loops (loops);\n+}"}, {"sha": "116de356da494fe7f37157cfd6c2824977577bc3", "filename": "gcc/predict.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -695,7 +695,10 @@ predict_loops (struct loops *loops_info, bool rtlsimpleloops)\n     }\n \n   if (!rtlsimpleloops)\n-    scev_finalize ();\n+    {\n+      scev_finalize ();\n+      current_loops = NULL;\n+    }\n }\n \n /* Attempt to predict probabilities of BB outgoing edges using local"}, {"sha": "c9a8e31ad45271c5cdcb9c77bf70924213bf670e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -959,6 +959,30 @@ cleanup_tree_cfg (void)\n }\n \n \n+/* Cleanup cfg and repair loop structures.  */\n+\n+void\n+cleanup_tree_cfg_loop (void)\n+{\n+  bitmap changed_bbs = BITMAP_ALLOC (NULL);\n+\n+  cleanup_tree_cfg ();\n+\n+  fix_loop_structure (current_loops, changed_bbs);\n+  calculate_dominance_info (CDI_DOMINATORS);\n+\n+  /* This usually does nothing.  But sometimes parts of cfg that originally\n+     were inside a loop get out of it due to edge removal (since they\n+     become unreachable by back edges from latch).  */\n+  rewrite_into_loop_closed_ssa (changed_bbs);\n+\n+  BITMAP_FREE (changed_bbs);\n+\n+#ifdef ENABLE_CHECKING\n+  verify_loop_structure (current_loops);\n+#endif\n+}\n+\n /* Cleanup useless labels in basic blocks.  This is something we wish\n    to do early because it allows us to group case labels before creating\n    the edges for the CFG, and it speeds up block statement iterators in\n@@ -1277,6 +1301,11 @@ tree_can_merge_blocks_p (basic_block a, basic_block b)\n \treturn false;\n     }\n \n+  /* Protect the loop latches.  */\n+  if (current_loops\n+      && b->loop_father->latch == b)\n+    return false;\n+\n   return true;\n }\n \n@@ -2045,6 +2074,20 @@ remove_bb (basic_block bb)\n \t}\n     }\n \n+  /* If we remove the header or the latch of a loop, mark the loop for\n+     removal by setting its header and latch to NULL.  */\n+  if (current_loops)\n+    {\n+      struct loop *loop = bb->loop_father;\n+\n+      if (loop->latch == bb\n+\t  || loop->header == bb)\n+\t{\n+\t  loop->latch = NULL;\n+\t  loop->header = NULL;\n+\t}\n+    }\n+\n   /* Remove all the instructions in the block.  */\n   for (i = bsi_start (bb); !bsi_end_p (i);)\n     {\n@@ -4099,6 +4142,18 @@ tree_forwarder_block_p (basic_block bb, bool phi_wanted)\n   if (find_edge (ENTRY_BLOCK_PTR, bb))\n     return false;\n \n+  if (current_loops)\n+    { \n+      basic_block dest;\n+      /* Protect loop latches, headers and preheaders.  */\n+      if (bb->loop_father->header == bb)\n+\treturn false;\n+      dest = EDGE_SUCC (bb, 0)->dest;\n+ \n+      if (dest->loop_father->header == dest)\n+\treturn false;\n+    }\n+\n   return true;\n }\n "}, {"sha": "479996dfdc391f20e0f5e3ac742482cd0d4414b3", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -478,6 +478,7 @@ extern void print_loop_ir (FILE *);\n extern void cleanup_dead_labels (void);\n extern void group_case_labels (void);\n extern bool cleanup_tree_cfg (void);\n+extern void cleanup_tree_cfg_loop (void);\n extern tree first_stmt (basic_block);\n extern tree last_stmt (basic_block);\n extern tree *last_stmt_ptr (basic_block);\n@@ -671,7 +672,7 @@ tree find_loop_niter_by_eval (struct loop *, edge *);\n void estimate_numbers_of_iterations (struct loops *);\n tree can_count_iv_in_wider_type (struct loop *, tree, tree, tree, tree);\n void free_numbers_of_iterations_estimates (struct loops *);\n-void rewrite_into_loop_closed_ssa (void);\n+void rewrite_into_loop_closed_ssa (bitmap);\n void verify_loop_closed_ssa (void);\n void loop_commit_inserts (void);\n bool for_each_index (tree *, bool (*) (tree, tree *, void *), void *);"}, {"sha": "860fafbd1de7b866f7b18180844c07acff504bba", "filename": "gcc/tree-loop-linear.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-loop-linear.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-loop-linear.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-linear.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -272,7 +272,7 @@ linear_transform_loops (struct loops *loops)\n                 ...\n                }\n            } */\n-      if (!loop_nest->inner)\n+      if (!loop_nest || !loop_nest->inner)\n \tcontinue;\n       depth = 1;\n       for (temp = loop_nest->inner; temp; temp = temp->inner)\n@@ -374,7 +374,7 @@ linear_transform_loops (struct loops *loops)\n   free_df ();\n   scev_reset ();\n   rewrite_into_ssa (false);\n-  rewrite_into_loop_closed_ssa ();\n+  rewrite_into_loop_closed_ssa (NULL);\n #ifdef ENABLE_CHECKING\n   verify_loop_closed_ssa ();\n #endif"}, {"sha": "524ce6aa4354960a779095762f0636c671ef2256", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"cgraph.h\"\n #include \"graph.h\"\n+#include \"cfgloop.h\"\n \n \n /* Global variables used to communicate with passes.  */\n@@ -450,7 +451,12 @@ execute_todo (int properties, unsigned int flags)\n     }\n \n   if (flags & TODO_cleanup_cfg)\n-    cleanup_tree_cfg ();\n+    {\n+      if (current_loops)\n+\tcleanup_tree_cfg_loop ();\n+      else\n+\tcleanup_tree_cfg ();\n+    }\n \n   if ((flags & TODO_dump_func) && dump_file)\n     {"}, {"sha": "5cf2f92056c0731cf8a992864e1f2f459cbfca59", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -134,7 +134,7 @@ copy_loop_headers (void)\n   loops = loop_optimizer_init (dump_file);\n   if (!loops)\n     return;\n-  rewrite_into_loop_closed_ssa ();\n+  rewrite_into_loop_closed_ssa (NULL);\n   \n   /* We do not try to keep the information about irreducible regions\n      up-to-date.  */"}, {"sha": "ce9ca97da99b73bc13ad4f0e51d39cdcba0d3ba2", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -725,7 +725,7 @@ move_computations (void)\n       /* The rewrite of ssa names may cause violation of loop closed ssa\n \t form invariants.  TODO -- avoid these rewrites completely.\n \t Information in virtual phi nodes is sufficient for it.  */\n-      rewrite_into_loop_closed_ssa ();\n+      rewrite_into_loop_closed_ssa (NULL);\n     }\n   bitmap_clear (vars_to_rename);\n }"}, {"sha": "ab21465953a6f91237609b8e19e7b6970bed7965", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -262,24 +262,23 @@ canonicalize_induction_variables (struct loops *loops)\n {\n   unsigned i;\n   struct loop *loop;\n+  bool changed = false;\n   \n   for (i = 1; i < loops->num; i++)\n     {\n       loop = loops->parray[i];\n \n       if (loop)\n-\tcanonicalize_loop_induction_variables (loops, loop, true, false, true);\n+\tchanged |= canonicalize_loop_induction_variables (loops, loop,\n+\t\t\t\t\t\t\t  true, false, true);\n     }\n \n   /* Clean up the information about numbers of iterations, since brute force\n      evaluation could reveal new information.  */\n   scev_reset ();\n \n-#if 0\n-  /* The necessary infrastructure is not in yet.  */\n   if (changed)\n     cleanup_tree_cfg_loop ();\n-#endif\n }\n \n /* Unroll LOOPS completely if they iterate just few times.  */\n@@ -307,9 +306,6 @@ tree_unroll_loops_completely (struct loops *loops)\n      unrolling might have invalidated it.  */\n   scev_reset ();\n \n-#if 0\n-  /* The necessary infrastructure is not in yet.  */\n   if (changed)\n     cleanup_tree_cfg_loop ();\n-#endif\n }"}, {"sha": "a4057f75a6699917180d0ae263fec5216ab32a42", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -259,27 +259,52 @@ find_uses_to_rename_stmt (tree stmt, bitmap *use_blocks)\n     find_uses_to_rename_use (bb, var, use_blocks);\n }\n \n-/* Marks names that are used outside of the loop they are defined in\n-   for rewrite.  Records the set of blocks in that the ssa\n+/* Marks names that are used in BB and outside of the loop they are\n+   defined in for rewrite.  Records the set of blocks in that the ssa\n    names are defined to USE_BLOCKS.  */\n \n static void\n-find_uses_to_rename (bitmap *use_blocks)\n+find_uses_to_rename_bb (basic_block bb, bitmap *use_blocks)\n {\n-  basic_block bb;\n   block_stmt_iterator bsi;\n+  edge e;\n+  edge_iterator ei;\n   tree phi;\n-  unsigned i;\n \n-  FOR_EACH_BB (bb)\n-    {\n-      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\tfor (i = 0; i < (unsigned) PHI_NUM_ARGS (phi); i++)\n-\t  find_uses_to_rename_use (EDGE_PRED (bb, i)->src,\n-\t\t\t\t   PHI_ARG_DEF (phi, i), use_blocks);\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n+      find_uses_to_rename_use (bb, PHI_ARG_DEF_FROM_EDGE (phi, e),\n+\t\t\t       use_blocks);\n+ \n+  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+    find_uses_to_rename_stmt (bsi_stmt (bsi), use_blocks);\n+}\n+     \n+/* Marks names that are used outside of the loop they are defined in\n+   for rewrite.  Records the set of blocks in that the ssa\n+   names are defined to USE_BLOCKS.  If CHANGED_BBS is not NULL,\n+   scan only blocks in this set.  */\n \n-      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\tfind_uses_to_rename_stmt (bsi_stmt (bsi), use_blocks);\n+static void\n+find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks)\n+{\n+  basic_block bb;\n+  unsigned index;\n+  bitmap_iterator bi;\n+\n+  if (changed_bbs)\n+    {\n+      EXECUTE_IF_SET_IN_BITMAP (changed_bbs, 0, index, bi)\n+\t{\n+\t  find_uses_to_rename_bb (BASIC_BLOCK (index), use_blocks);\n+\t}\n+    }\n+  else\n+    {\n+      FOR_EACH_BB (bb)\n+\t{\n+\t  find_uses_to_rename_bb (bb, use_blocks);\n+\t}\n     }\n }\n \n@@ -307,10 +332,13 @@ find_uses_to_rename (bitmap *use_blocks)\n \n       Looking from the outer loop with the normal SSA form, the first use of k\n       is not well-behaved, while the second one is an induction variable with\n-      base 99 and step 1.  */\n+      base 99 and step 1.\n+      \n+      If CHANGED_BBS is not NULL, we look for uses outside loops only in\n+      the basic blocks in this set.  */\n \n void\n-rewrite_into_loop_closed_ssa (void)\n+rewrite_into_loop_closed_ssa (bitmap changed_bbs)\n {\n   bitmap loop_exits = get_loops_exits ();\n   bitmap *use_blocks;\n@@ -322,7 +350,14 @@ rewrite_into_loop_closed_ssa (void)\n   use_blocks = xcalloc (num_ssa_names, sizeof (bitmap));\n \n   /* Find the uses outside loops.  */\n-  find_uses_to_rename (use_blocks);\n+  find_uses_to_rename (changed_bbs, use_blocks);\n+\n+  if (!any_marked_for_rewrite_p ())\n+    {\n+      free (use_blocks);\n+      BITMAP_FREE (loop_exits);\n+      return;\n+    }\n \n   /* Add the phi nodes on exits of the loops for the names we need to\n      rewrite.  */"}, {"sha": "d406fb5905a31c096f69a7a838ac4987fa2a3829", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -107,11 +107,8 @@ tree_ssa_unswitch_loops (struct loops *loops)\n #endif\n     }\n \n-#if 0\n-  /* The necessary infrastructure is not in yet.  */\n   if (changed)\n     cleanup_tree_cfg_loop ();\n-#endif\n }\n \n /* Checks whether we can unswitch LOOP on condition at end of BB -- one of its"}, {"sha": "cb5d5619c9d917f472262d659cb3bf1df32c3481", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -60,7 +60,7 @@ tree_loop_optimizer_init (FILE *dump)\n   rewrite_into_ssa (false);\n   bitmap_clear (vars_to_rename);\n \n-  rewrite_into_loop_closed_ssa ();\n+  rewrite_into_loop_closed_ssa (NULL);\n #ifdef ENABLE_CHECKING\n   verify_loop_closed_ssa ();\n #endif"}, {"sha": "8c8554193a56bbae5cbe9b17c0d2f0bb7946c356", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b271002241ca01925b19d586ff2f30ce797d380/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=2b271002241ca01925b19d586ff2f30ce797d380", "patch": "@@ -1617,6 +1617,6 @@ vectorize_loops (struct loops *loops)\n     }\n \n   rewrite_into_ssa (false);\n-  rewrite_into_loop_closed_ssa (); /* FORNOW */\n+  rewrite_into_loop_closed_ssa (NULL); /* FORNOW */\n   bitmap_clear (vars_to_rename);\n }"}]}