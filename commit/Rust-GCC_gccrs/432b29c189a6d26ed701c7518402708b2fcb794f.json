{"sha": "432b29c189a6d26ed701c7518402708b2fcb794f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyYjI5YzE4OWE2ZDI2ZWQ3MDFjNzUxODQwMjcwOGIyZmNiNzk0Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:39:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:39:42Z"}, "message": "[AArch64] Add more SVE FMLA and FMAD /z alternatives\n\nThis patch makes the floating-point conditional FMA patterns provide the\nsame /z alternatives as the integer patterns added by a previous patch.\nWe can handle cases in which individual inputs are allocated to the same\nregister as the output, so we don't need to force all registers to be\ndifferent.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(*cond_<SVE_COND_FP_TERNARY:optab><SVE_F:mode>_any): Add /z\n\talternatives in which one of the inputs is in the same register\n\tas the output.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_mla_5.c: Allow FMAD as well as FMLA\n\tand FMSB as well as FMLS.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274516", "tree": {"sha": "ae62e77cb99e0dacf887f0ce02f765500e34a86c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae62e77cb99e0dacf887f0ce02f765500e34a86c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/432b29c189a6d26ed701c7518402708b2fcb794f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432b29c189a6d26ed701c7518402708b2fcb794f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432b29c189a6d26ed701c7518402708b2fcb794f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432b29c189a6d26ed701c7518402708b2fcb794f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06b3ba23eb6ff965a92cd99d2835d4c29316a447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b3ba23eb6ff965a92cd99d2835d4c29316a447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b3ba23eb6ff965a92cd99d2835d4c29316a447"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "0fd607e46bb4ca383238e76d62b309a8167b10da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=432b29c189a6d26ed701c7518402708b2fcb794f", "patch": "@@ -1,3 +1,11 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><SVE_F:mode>_any): Add /z\n+\talternatives in which one of the inputs is in the same register\n+\tas the output.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (*vec_extract<mode><Vel>_ext)"}, {"sha": "c5d7801a3cec1549a0f524a8f6b77009a3435607", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=432b29c189a6d26ed701c7518402708b2fcb794f", "patch": "@@ -3844,17 +3844,17 @@\n ;; Predicated floating-point ternary operations, merging with an\n ;; independent value.\n (define_insn_and_rewrite \"*cond_<optab><mode>_any\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=&w, &w, ?&w\")\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n \t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n \t   (unspec:SVE_F\n \t     [(match_operand 6)\n \t      (match_operand:SI 7 \"aarch64_sve_gp_strictness\")\n-\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, w\")\n-\t      (match_operand:SVE_F 3 \"register_operand\" \"w, w, w\")\n-\t      (match_operand:SVE_F 4 \"register_operand\" \"w, w, w\")]\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, 0, w, w, w\")\n+\t      (match_operand:SVE_F 3 \"register_operand\" \"w, w, w, 0, w, w\")\n+\t      (match_operand:SVE_F 4 \"register_operand\" \"w, 0, w, w, w, w\")]\n \t     SVE_COND_FP_TERNARY)\n-\t   (match_operand:SVE_F 5 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t   (match_operand:SVE_F 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\n    && !rtx_equal_p (operands[2], operands[5])\n@@ -3863,6 +3863,9 @@\n    && aarch64_sve_pred_dominates_p (&operands[6], operands[1])\"\n   \"@\n    movprfx\\t%0.<Vetype>, %1/z, %4.<Vetype>\\;<sve_fmla_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_fmla_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_fmad_op>\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<sve_fmad_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>, %4.<Vetype>\n    movprfx\\t%0.<Vetype>, %1/m, %4.<Vetype>\\;<sve_fmla_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n    #\"\n   \"&& 1\""}, {"sha": "308386c703c16a972e412920b3b9fbfa6b5560dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=432b29c189a6d26ed701c7518402708b2fcb794f", "patch": "@@ -1,3 +1,9 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_mla_5.c: Allow FMAD as well as FMLA\n+\tand FMSB as well as FMLS.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/ext_2.c: Expect a MOVPRFX."}, {"sha": "97e2335799602757ae99690909deee4746802d43", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_5.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432b29c189a6d26ed701c7518402708b2fcb794f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5.c?ref=432b29c189a6d26ed701c7518402708b2fcb794f", "patch": "@@ -39,13 +39,13 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n /* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:fmla|fmad)\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:fmla|fmad)\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:fmla|fmad)\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:fmls|fmsb)\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:fmls|fmsb)\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:fmls|fmsb)\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n /* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z,} 2 } } */\n /* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z,} 4 } } */"}]}