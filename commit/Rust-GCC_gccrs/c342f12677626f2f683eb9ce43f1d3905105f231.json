{"sha": "c342f12677626f2f683eb9ce43f1d3905105f231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0MmYxMjY3NzYyNmYyZjY4M2ViOWNlNDNmMWQzOTA1MTA1ZjIzMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T04:06:33Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T04:06:33Z"}, "message": "[multiple changes]\n\n2002-01-15  Tom Tromey  <tromey@redhat.com>\n\n\t* java/lang/Float.java (equals): Preserve old code.\n\t* java/lang/Double.java (equals): Preserve old code.\n\n2002-01-15  Eric Blake  <ebb9@email.byu.edu>\n\n\t* java/lang/Double.java (equals, compare): Fix 0.0 vs. -0.0 math.\n\t* java/lang/Float.java (equals, compare): Ditto.\n\nFrom-SVN: r48895", "tree": {"sha": "3924ea9da53671d684daf3f6ae1e210162fdf4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3924ea9da53671d684daf3f6ae1e210162fdf4ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c342f12677626f2f683eb9ce43f1d3905105f231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c342f12677626f2f683eb9ce43f1d3905105f231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c342f12677626f2f683eb9ce43f1d3905105f231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c342f12677626f2f683eb9ce43f1d3905105f231/comments", "author": null, "committer": null, "parents": [{"sha": "30c7461653e4a98d4bdf09ff993282bb59ec7623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c7461653e4a98d4bdf09ff993282bb59ec7623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c7461653e4a98d4bdf09ff993282bb59ec7623"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "27cbd78f53328ba25b874210d971c75dcb5219a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c342f12677626f2f683eb9ce43f1d3905105f231/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c342f12677626f2f683eb9ce43f1d3905105f231/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c342f12677626f2f683eb9ce43f1d3905105f231", "patch": "@@ -1,3 +1,13 @@\n+2002-01-15  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/Float.java (equals): Preserve old code.\n+\t* java/lang/Double.java (equals): Preserve old code.\n+\n+2002-01-15  Eric Blake  <ebb9@email.byu.edu>\n+\n+\t* java/lang/Double.java (equals, compare): Fix 0.0 vs. -0.0 math.\n+\t* java/lang/Float.java (equals, compare): Ditto.\n+\n 2002-01-13  Mark Wielaard  <mark@klomp.org>\n \n \t* java/net/DatagramSocket.java (getReceiveBufferSize): new 1.2 method."}, {"sha": "87f5d03bf0531adb293cb80d431f68ee61eee35c", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c342f12677626f2f683eb9ce43f1d3905105f231/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c342f12677626f2f683eb9ce43f1d3905105f231/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=c342f12677626f2f683eb9ce43f1d3905105f231", "patch": "@@ -1,5 +1,5 @@\n /* Double.java -- object wrapper for double primitive\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -163,9 +163,12 @@ public boolean equals (Object obj)\n     if (!(obj instanceof Double))\n       return false;\n \n-    Double d = (Double) obj;\n+    double d = ((Double) obj).value;\n \n-    return doubleToLongBits (value) == doubleToLongBits (d.doubleValue ());\n+    // GCJ LOCAL: this implementation is probably faster than\n+    // Classpath's, especially once we inline doubleToLongBits.\n+    return doubleToLongBits (value) == doubleToLongBits (d);\n+    // END GCJ LOCAL\n   }\n \n   /**\n@@ -334,10 +337,9 @@ public static int compare (double x, double y)\n       return isNaN (y) ? 0 : 1;\n     if (isNaN (y))\n       return -1;\n-    if (x == 0.0d && y == -0.0d)\n-      return 1;\n-    if (x == -0.0d && y == 0.0d)\n-      return -1;\n+    // recall that 0.0 == -0.0, so we convert to infinites and try again\n+    if (x == 0 && y == 0)\n+      return (int) (1 / x - 1 / y);\n     if (x == y)\n       return 0;\n "}, {"sha": "65caf430f5413de330a3bbdb0598ffd1d76d159a", "filename": "libjava/java/lang/Float.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c342f12677626f2f683eb9ce43f1d3905105f231/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c342f12677626f2f683eb9ce43f1d3905105f231/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=c342f12677626f2f683eb9ce43f1d3905105f231", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.Float\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -232,9 +232,12 @@ public boolean equals (Object obj)\n     if (!(obj instanceof Float))\n       return false;\n \n-    Float f = (Float) obj;\n+    float f = ((Float) obj).value;\n \n-    return floatToIntBits (value) == floatToIntBits (f.floatValue ());\n+    // GCJ LOCAL: this implementation is probably faster than\n+    // Classpath's, especially once we inline floatToIntBits.\n+    return floatToIntBits (value) == floatToIntBits (f);\n+    // END GCJ LOCAL\n   }\n \n   /**\n@@ -484,10 +487,9 @@ public static int compare (float x, float y)\n       return isNaN (y) ? 0 : 1;\n     if (isNaN (y))\n       return -1;\n-    if (x == 0.0 && y == -0.0)\n-      return 1;\n-    if (x == -0.0 && y == 0.0)\n-      return -1;\n+    // recall that 0.0 == -0.0, so we convert to infinities and try again\n+    if (x == 0 && y == 0)\n+      return (int) (1 / x - 1 / y);\n     if (x == y)\n       return 0;\n "}]}