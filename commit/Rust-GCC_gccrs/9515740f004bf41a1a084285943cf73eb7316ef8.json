{"sha": "9515740f004bf41a1a084285943cf73eb7316ef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUxNTc0MGYwMDRiZjQxYTFhMDg0Mjg1OTQzY2Y3M2ViNzMxNmVmOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:20:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:20:54Z"}, "message": "[multiple changes]\n\n2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Bad_Attribute_For_Predicate): flag illegal use of\n\tattribute only if prefix type is scalar.\n\n2011-08-04  Emmanuel Briot  <briot@adacore.com>\n\n\t* make.adb, makeutl.adb, prj-env.adb (Check_Mains): put back support\n\tin gnatmake for specifying mains on the command line that do not belong\n\tto the main project. These mains must currently all belong to the same\n\tproject, though.\n\t(Ultimate_Extension_Of): removed, since duplicated\n\tUltimate_Extending_Project.\n\nFrom-SVN: r177367", "tree": {"sha": "a542690d898f0782dd65d3705cc63405beb101d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a542690d898f0782dd65d3705cc63405beb101d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9515740f004bf41a1a084285943cf73eb7316ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9515740f004bf41a1a084285943cf73eb7316ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9515740f004bf41a1a084285943cf73eb7316ef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9515740f004bf41a1a084285943cf73eb7316ef8/comments", "author": null, "committer": null, "parents": [{"sha": "92966893f5475bd56ba2956e1e97cc0a0557aacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92966893f5475bd56ba2956e1e97cc0a0557aacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92966893f5475bd56ba2956e1e97cc0a0557aacd"}], "stats": {"total": 101, "additions": 62, "deletions": 39}, "files": [{"sha": "f0256d7d1bda5a222b29cd3bc489042ba40d09f8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9515740f004bf41a1a084285943cf73eb7316ef8", "patch": "@@ -1,3 +1,17 @@\n+2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Bad_Attribute_For_Predicate): flag illegal use of\n+\tattribute only if prefix type is scalar.\n+\n+2011-08-04  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* make.adb, makeutl.adb, prj-env.adb (Check_Mains): put back support\n+\tin gnatmake for specifying mains on the command line that do not belong\n+\tto the main project. These mains must currently all belong to the same\n+\tproject, though.\n+\t(Ultimate_Extension_Of): removed, since duplicated\n+\tUltimate_Extending_Project.\n+\n 2011-08-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* make.adb (Do_Codepeer_Globalize_Step): Removed. Use CodePeer_Mode"}, {"sha": "4bbb61a70f719fc84c2966fe3f8625f1571b4c07", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=9515740f004bf41a1a084285943cf73eb7316ef8", "patch": "@@ -5673,6 +5673,9 @@ package body Make is\n       -----------------\n \n       procedure Check_Mains is\n+         Real_Main_Project : Project_Id := No_Project;\n+         Info : Main_Info;\n+         Proj : Project_Id;\n       begin\n          if Mains.Number_Of_Mains (Project_Tree) = 0\n            and then not Unique_Compile\n@@ -5682,6 +5685,38 @@ package body Make is\n \n          Mains.Complete_Mains\n            (Root_Environment.Flags, Main_Project, Project_Tree);\n+\n+         --  If we have multiple mains on the command line, they need not\n+         --  belong to the root project, but they must all belong to the same\n+         --  project.\n+         if not Unique_Compile then\n+            Mains.Reset;\n+            loop\n+               Info := Mains.Next_Main;\n+               exit when Info = No_Main_Info;\n+\n+               Debug_Output (\"MANU Got main: \", Name_Id (Info.File));\n+               Debug_Output (\"MANU    in project: \", Info.Project.Name);\n+\n+               Proj := Ultimate_Extending_Project_Of (Info.Project);\n+\n+               if Real_Main_Project = No_Project then\n+                  Real_Main_Project := Proj;\n+               elsif Real_Main_Project /= Proj then\n+                  Make_Failed\n+                    (\"\"\"\" & Get_Name_String (Info.File) &\n+                     \"\"\" is not a source of project \" &\n+                     Get_Name_String (Real_Main_Project.Name));\n+               end if;\n+            end loop;\n+\n+            if Real_Main_Project /= No_Project then\n+               Main_Project := Real_Main_Project;\n+            end if;\n+\n+            Debug_Output (\"After checking mains, main project is\",\n+                          Main_Project.Name);\n+         end if;\n       end Check_Mains;\n \n    --  Start of processing for Gnatmake"}, {"sha": "f9d4d728ed8460f7bd4243dc662741c776f2cbe1", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=9515740f004bf41a1a084285943cf73eb7316ef8", "patch": "@@ -1442,9 +1442,10 @@ package body Makeutl is\n \n                   begin\n                      if Base /= Main then\n+                        Is_Absolute := True;\n+\n                         if Is_Absolute_Path (Main) then\n                            Main_Id := Create_Name (Base);\n-                           Is_Absolute := True;\n                         else\n                            declare\n                               Absolute : constant String :=\n@@ -1545,7 +1546,7 @@ package body Makeutl is\n                            Debug_Output\n                              (\"found main in project\", Source.Project.Name);\n                            Names.Table (J).File    := Source.File;\n-                           Names.Table (J).Project := File.Project;\n+                           Names.Table (J).Project := Source.Project;\n \n                            if Names.Table (J).Tree = null then\n                               Names.Table (J).Tree := File.Tree;"}, {"sha": "15a443698fa3f31d6975ca19a7fa6d1ab8fdbaa1", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=9515740f004bf41a1a084285943cf73eb7316ef8", "patch": "@@ -105,11 +105,6 @@ package body Prj.Env is\n    procedure Set_Path_File_Var (Name : String; Value : String);\n    --  Call Setenv, after calling To_Host_File_Spec\n \n-   function Ultimate_Extension_Of\n-     (Project : Project_Id) return Project_Id;\n-   --  Return a project that is either Project or an extended ancestor of\n-   --  Project that itself is not extended.\n-\n    ----------------------\n    -- Ada_Include_Path --\n    ----------------------\n@@ -1345,8 +1340,8 @@ package body Prj.Env is\n                               (Unit.File_Names (Spec).Path.Name) =\n                             Original_Name))\n             then\n-               Project := Ultimate_Extension_Of\n-                          (Project => Unit.File_Names (Spec).Project);\n+               Project := Ultimate_Extending_Project_Of\n+                          (Unit.File_Names (Spec).Project);\n                Path := Unit.File_Names (Spec).Path.Display_Name;\n \n                if Current_Verbosity > Default then\n@@ -1367,8 +1362,8 @@ package body Prj.Env is\n                             (Unit.File_Names (Impl).Path.Name) =\n                             Original_Name))\n             then\n-               Project := Ultimate_Extension_Of\n-                            (Project => Unit.File_Names (Impl).Project);\n+               Project := Ultimate_Extending_Project_Of\n+                            (Unit.File_Names (Impl).Project);\n                Path := Unit.File_Names (Impl).Path.Display_Name;\n \n                if Current_Verbosity > Default then\n@@ -1556,15 +1551,7 @@ package body Prj.Env is\n          Unit := Units_Htable.Get_Next (In_Tree.Units_HT);\n       end loop;\n \n-      --  Get the ultimate extending project\n-\n-      if Result /= No_Project then\n-         while Result.Extended_By /= No_Project loop\n-            Result := Result.Extended_By;\n-         end loop;\n-      end if;\n-\n-      return Result;\n+      return Ultimate_Extending_Project_Of (Result);\n    end Project_Of;\n \n    -------------------\n@@ -1805,24 +1792,6 @@ package body Prj.Env is\n       end if;\n    end Set_Path_File_Var;\n \n-   ---------------------------\n-   -- Ultimate_Extension_Of --\n-   ---------------------------\n-\n-   function Ultimate_Extension_Of\n-     (Project : Project_Id) return Project_Id\n-   is\n-      Result : Project_Id;\n-\n-   begin\n-      Result := Project;\n-      while Result.Extended_By /= No_Project loop\n-         Result := Result.Extended_By;\n-      end loop;\n-\n-      return Result;\n-   end Ultimate_Extension_Of;\n-\n    ---------------------\n    -- Add_Directories --\n    ---------------------"}, {"sha": "e7dd01ad0882a8a2f6e118a644acc892cf9f170e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9515740f004bf41a1a084285943cf73eb7316ef8/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=9515740f004bf41a1a084285943cf73eb7316ef8", "patch": "@@ -217,6 +217,8 @@ package body Sem_Attr is\n       --  actual, then the message is a warning, and we generate code to raise\n       --  program error with an appropriate reason. No error message is given\n       --  for internally generated uses of the attributes.\n+      --  The legality rule only applies to scalar types, even though the\n+      --  current AI mentions all subtypes.\n \n       procedure Check_Array_Or_Scalar_Type;\n       --  Common procedure used by First, Last, Range attribute to check\n@@ -840,7 +842,9 @@ package body Sem_Attr is\n \n       procedure Bad_Attribute_For_Predicate is\n       begin\n-         if Comes_From_Source (N) then\n+         if Is_Scalar_Type (P_Type)\n+           and then  Comes_From_Source (N)\n+         then\n             Error_Msg_Name_1 := Aname;\n             Bad_Predicated_Subtype_Use\n               (\"type& has predicates, attribute % not allowed\", N, P_Type);"}]}