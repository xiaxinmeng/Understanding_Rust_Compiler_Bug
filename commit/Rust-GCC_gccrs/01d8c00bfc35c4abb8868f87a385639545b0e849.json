{"sha": "01d8c00bfc35c4abb8868f87a385639545b0e849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkOGMwMGJmYzM1YzRhYmI4ODY4Zjg3YTM4NTYzOTU0NWIwZTg0OQ==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2004-10-12T20:50:08Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2004-10-12T20:50:08Z"}, "message": "re PR tree-optimization/17892 (gcc-4.0 should not reassociate floating point add or multiplication)\n\nPR 17892.\nOKed by Roger Sayle.\n\nFrom-SVN: r88950", "tree": {"sha": "307a8f37393b25c5868e66d16067530b6f501427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/307a8f37393b25c5868e66d16067530b6f501427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d8c00bfc35c4abb8868f87a385639545b0e849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d8c00bfc35c4abb8868f87a385639545b0e849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d8c00bfc35c4abb8868f87a385639545b0e849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d8c00bfc35c4abb8868f87a385639545b0e849/comments", "author": null, "committer": null, "parents": [{"sha": "967af719d20daa485fa058923111e3e418d17028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967af719d20daa485fa058923111e3e418d17028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967af719d20daa485fa058923111e3e418d17028"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "4e3bba79196f6e40fdfa51d904b2c659139cea1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01d8c00bfc35c4abb8868f87a385639545b0e849", "patch": "@@ -1,3 +1,11 @@\n+2004-10-12  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tPR 17892\n+\t* tree-ssa-dom.c (unsafe_associative_fp_binop): New function.\n+\t(simplify_rhs_and_lookup_avail_expr): Disallow associativity\n+\tand constant folding of floating point MULT_EXPR/PLUS_EXPR \n+\texpressions.\n+\n 2004-10-12  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_va_start): Use build_va_arg_indirect_ref."}, {"sha": "d67fef023214ee3fdf2d3d248e693af6a3b30798", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/unsafe-fp-assoc.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Funsafe-fp-assoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Funsafe-fp-assoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Funsafe-fp-assoc.c?ref=01d8c00bfc35c4abb8868f87a385639545b0e849", "patch": "@@ -0,0 +1,19 @@\n+#include <float.h>\n+\n+extern void abort(void);\n+\n+static const double C = DBL_MAX;\n+\n+double foo(double x)\n+{\n+        return ( ( (x * C) * C ) * C);\n+}\n+\n+int main ()\n+{\n+  double d = foo (0.0);\n+  if (d != 0.0)\n+   abort ();\n+\n+  return 0;\n+}"}, {"sha": "a99f03d0121aaec630a4d704e433d3efa0226bac", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=01d8c00bfc35c4abb8868f87a385639545b0e849", "patch": "@@ -1634,12 +1634,20 @@ find_replaceable_in_bb (temp_expr_table_p tab, basic_block bb)\n   var_map map = tab->map;\n   value_expr_p p;\n   ssa_op_iter iter;\n+  bitmap_iterator bi;\n \n   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n     {\n       stmt = bsi_stmt (bsi);\n       ann = stmt_ann (stmt);\n \n+      if (TREE_CODE (stmt) == ASM_EXPR && ASM_VOLATILE_P (stmt))\n+\t{\n+\t  /* Volatile ASM_EXPRs kill all current expressions.  */\n+\t  EXECUTE_IF_SET_IN_BITMAP ((tab->partition_in_use), 0, partition, bi)\n+\t    kill_expr (tab, partition, false);\n+\t  continue;\n+\t}\n       /* Determine if this stmt finishes an existing expression.  */\n       FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_USE)\n \t{"}, {"sha": "4ab36138f653c37b2ffaa5e864695ce715703484", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d8c00bfc35c4abb8868f87a385639545b0e849/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=01d8c00bfc35c4abb8868f87a385639545b0e849", "patch": "@@ -266,6 +266,7 @@ static void restore_currdefs_to_original_value (void);\n static void register_definitions_for_stmt (tree);\n static edge single_incoming_edge_ignoring_loop_edges (basic_block);\n static void restore_nonzero_vars_to_original_value (void);\n+static inline bool unsafe_associative_fp_binop (tree);\n \n /* Local version of fold that doesn't introduce cruft.  */\n \n@@ -1549,6 +1550,18 @@ record_equality (tree x, tree y)\n   record_const_or_copy_1 (x, y, prev_x);\n }\n \n+/* Return true, if it is ok to do folding of an associative expression.\n+   EXP is the tree for the associative expression.  */ \n+\n+static inline bool\n+unsafe_associative_fp_binop (tree exp)\n+{\n+  enum tree_code code = TREE_CODE (exp);\n+  return !(!flag_unsafe_math_optimizations\n+           && (code == MULT_EXPR || code == PLUS_EXPR)\n+           && FLOAT_TYPE_P (TREE_TYPE (exp)));\n+}\n+\n /* STMT is a MODIFY_EXPR for which we were unable to find RHS in the\n    hash tables.  Try to simplify the RHS using whatever equivalences\n    we may have recorded.\n@@ -1608,7 +1621,7 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t  tree rhs_def_rhs = TREE_OPERAND (rhs_def_stmt, 1);\n \t  enum tree_code rhs_def_code = TREE_CODE (rhs_def_rhs);\n \n-\t  if (rhs_code == rhs_def_code\n+\t  if ((rhs_code == rhs_def_code && unsafe_associative_fp_binop (rhs))\n \t      || (rhs_code == PLUS_EXPR && rhs_def_code == MINUS_EXPR)\n \t      || (rhs_code == MINUS_EXPR && rhs_def_code == PLUS_EXPR))\n \t    {"}]}