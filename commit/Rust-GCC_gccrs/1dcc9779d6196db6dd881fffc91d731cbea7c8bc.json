{"sha": "1dcc9779d6196db6dd881fffc91d731cbea7c8bc", "node_id": "C_kwDOANBUbNoAKDFkY2M5Nzc5ZDYxOTZkYjZkZDg4MWZmZmM5MWQ3MzFjYmVhN2M4YmM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-09T22:50:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-09T22:52:08Z"}, "message": "Modula-2: fix documentation layout\n\nThe Modula-2 documentation is rejected by older versions of Makeinfo because\nthe web of @node markers is fairly broken, apparently some subsections were\nmoved around, most notably between the Overview and Using sections, and the\n@node markers were not (properly) adjusted.\n\ngcc/\n\t* doc/gm2.texi (Overview): Fix @node markers.\n\t(Using): Likewise.  Remove subsections that were moved to Overview\n\tfrom the menu and move others around.", "tree": {"sha": "78fccdec197615d9bf8791b8dfda10b7beeae9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fccdec197615d9bf8791b8dfda10b7beeae9a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dcc9779d6196db6dd881fffc91d731cbea7c8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcc9779d6196db6dd881fffc91d731cbea7c8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcc9779d6196db6dd881fffc91d731cbea7c8bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcc9779d6196db6dd881fffc91d731cbea7c8bc/comments", "author": null, "committer": null, "parents": [{"sha": "01ea66a6c56e53163d9430f4d87615d570848aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ea66a6c56e53163d9430f4d87615d570848aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ea66a6c56e53163d9430f4d87615d570848aa8"}], "stats": {"total": 390, "additions": 193, "deletions": 197}, "files": [{"sha": "35e0f5ef6229f2709d10b3bed32194749f11100f", "filename": "gcc/doc/gm2.texi", "status": "modified", "additions": 193, "deletions": 197, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcc9779d6196db6dd881fffc91d731cbea7c8bc/gcc%2Fdoc%2Fgm2.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcc9779d6196db6dd881fffc91d731cbea7c8bc/gcc%2Fdoc%2Fgm2.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgm2.texi?ref=1dcc9779d6196db6dd881fffc91d731cbea7c8bc", "patch": "@@ -89,7 +89,7 @@ Boston, MA 02110-1301, USA@*\n * Features::              GNU Modula-2 Features\n @end menu\n \n-@node What is GNU Modula-2, Why use GNU Modula-2, , Using\n+@node What is GNU Modula-2, Why use GNU Modula-2, , Overview\n @section What is GNU Modula-2\n \n GNU Modula-2 is a @uref{http://gcc.gnu.org/frontends.html, front end}\n@@ -115,7 +115,7 @@ technology - programming languages - part 1: Modula-2 Language,\n ISO/IEC 10514-1 (1996)'\n }\n \n-@node Why use GNU Modula-2, Release map, What is GNU Modula-2, Using\n+@node Why use GNU Modula-2, Development, What is GNU Modula-2, Overview\n @section Why use GNU Modula-2\n \n There are a number of advantages of using GNU Modula-2 rather than\n@@ -149,25 +149,13 @@ directory for a sub directory @code{foo} containing the library\n contents.  The library module search path is altered accordingly\n for compile and link.\n \n-@node Release map, Development, Why use GNU Modula-2, Using\n-@section Release map\n-\n-GNU Modula-2 is now part of GCC and therefore will adopt the GCC\n-release schedule.  It is intended that GNU Modula-2 implement more of\n-the GCC builtins (vararg access) and GCC features.\n-\n-There is an intention to implement the ISO generics and the M2R10\n-dialect of Modula-2.  It will also implement all language changes.  If\n-you wish to see something different please email\n-@email{gm2@@nongnu.org} with your ideas.\n-\n-@node Development, Features, Release map, Using\n+@node Development, Features, Why use GNU Modula-2, Overview\n @section How to get source code using git\n \n GNU Modula-2 is now in the @url{https://gcc.gnu.org/git.html, GCC git\n tree}.\n \n-@node Features, Documentation, Development, Using\n+@node Features, , Development, Overview\n @section GNU Modula-2 Features\n \n @itemize @bullet\n@@ -230,99 +218,7 @@ such as the AVR and the ARM).\n \n @end itemize\n \n-@node Documentation, Regression tests, Features, Using\n-@section Documentation\n-\n-The GNU Modula-2 documentation is available on line\n-@url{https://www.nongnu.org/gm2/homepage.html,at the gm2 homepage}\n-or in the pdf, info, html file format.\n-\n-@node Regression tests, Limitations, Documentation, Using\n-@section Regression tests for gm2 in the repository\n-\n-The regression testsuite can be run from the gcc build directory:\n-\n-@example\n-$ cd build-gcc\n-$ make check -j 24\n-@end example\n-\n-which runs the complete testsuite for all compilers using 24 parallel\n-invocations of the compiler.  Individual language testsuites can be\n-run by specifying the language, for example the Modula-2 testsuite can\n-be run using:\n-\n-@example\n-$ cd build-gcc\n-$ make check-m2 -j 24\n-@end example\n-\n-Finally the results of the testsuite can be emailed to the\n-@url{https://gcc.gnu.org/lists.html, gcc-testresults} list using the\n-@file{test_summary} script found in the gcc source tree:\n-\n-@example\n-$ @samp{directory to the sources}/contrib/test_summary\n-@end example\n-\n-@node Limitations, Objectives, Regression tests, Using\n-@section Limitations\n-\n-Logitech compatibility library is incomplete.  The principle modules\n-for this platform exist however for a comprehensive list of completed\n-modules please check the documentation\n-@url{gm2.html}.\n-\n-@node Objectives, FAQ, , Using\n-@section Objectives\n-\n-@itemize @bullet\n-\n-@item\n-The intention of GNU Modula-2 is to provide a production Modula-2\n-front end to GCC.\n-\n-@item\n-It should support all Niklaus Wirth PIM Dialects [234] and also ISO\n-Modula-2 including a re-implementation of all the ISO modules.\n-\n-@item\n-There should be an easy interface to C.\n-\n-@item\n-Exploit the features of GCC.\n-\n-@item\n-Listen to the requests of the users.\n-@end itemize\n-\n-@node FAQ, Community, Objectives, Using\n-@section FAQ\n-\n-@subsection Why use the C++ exception mechanism in GCC, rather than a bespoke Modula-2 mechanism?\n-\n-The C++ mechanism is tried and tested, it also provides GNU Modula-2\n-with the ability to link with C++ modules and via swig it can raise\n-Python exceptions.\n-\n-@node Community, Other languages, FAQ, Using\n-@section Community\n-\n-You can subscribe to the GNU Modula-2 mailing by sending an\n-email to:\n-@email{gm2-subscribe@@nongnu.org}\n-or by\n-@url{http://lists.nongnu.org/mailman/listinfo/gm2}.\n-The mailing list contents can be viewed\n-@url{http://lists.gnu.org/archive/html/gm2}.\n-\n-@node Other languages, , Community, Using\n-@section Other languages for GCC\n-\n-These exist and can be found on the frontends web page on the\n-@uref{http://gcc.gnu.org/frontends.html, gcc web site}.\n-\n-@node Using, , Community, Top\n+@node Using, License, Overview, Top\n @chapter Using GNU Modula-2\n \n @menu\n@@ -347,20 +243,16 @@ These exist and can be found on the frontends web page on the\n * Built-ins::             Accessing GNU Modula-2 Built-ins.\n * The PIM system module:: SYSTEM data types and procedures.\n * The ISO system module:: SYSTEM data types, procedures and run time.\n-* Other languages::       Other languages for GCC.\n-* What is GNU Modula-2::  Brief description of GNU Modula-2.\n-* Why use GNU Modula-2::  Advantages of GNU Modula-2.\n @ifnothtml\n @c omit these nodes if generating gm2 webpage as these are hand written.\n * Release map:: Release map.\n-* Development:: Development.\n-* Features:: Features of the implementation.\n * Documentation:: Placeholder for how to access the documentation online.\n * Regression tests:: How to run the testsuite.\n * Limitations:: Current limitations.\n * Objectives:: Objectives of the implementation.\n * FAQ:: Frequently asked questions.\n * Community:: How to join the community.\n+* Other languages:: Other languages for GCC.\n @end ifnothtml\n @end menu\n \n@@ -427,7 +319,7 @@ add the @samp{-v} flag at the command line, for example:\n This displays the sub processes initiated by @samp{gm2} which can be useful\n when trouble shooting.}\n \n-@node Compiler options, Elementary data types, Example usage, Using\n+@node Compiler options, Linking, Example usage, Using\n @section Compiler options\n \n This section describes the compiler options specific to GNU Modula-2\n@@ -804,7 +696,86 @@ generate code to detect whole number overflow and underflow.\n \n @c man end\n \n-@node Elementary data types, Standard procedures, Compiler options, Using\n+@node Linking, Elementary data types, Compiler options, Using\n+\n+This section describes the linking related options.  There are three\n+linking strategies available which are dynamic scaffold, static\n+scaffold and user defined.  The dynamic scaffold is enabled by default\n+and each module will register itself to the run time @samp{M2RTS} via\n+a constructor.  The static scaffold mechanism will invoke each modules\n+@samp{_init} and @samp{_finish} function in turn via a sequence of\n+calls from within @samp{main}.  Lastly the user defined strategy\n+can be implemented by turning off the dynamic and static options via\n+@samp{-fno-scaffold-dynamic} and @samp{-fno-scaffold-static}.\n+\n+In the simple test below:\n+\n+@example\n+$ gm2 hello.mod\n+@end example\n+\n+the driver will add the options @samp{-fscaffold-dynamic} and\n+@samp{-fgen-module-list=-} which generate a list of application\n+modules and also creates the @samp{main} function with calls to\n+@samp{M2RTS}.  It can be useful to add the option @samp{-fsources}\n+which displays the source files as they are parsed and summarizes\n+whether the source file is required for compilation or linking.\n+\n+If you wish to split the above command line into a compile and link\n+then you could use these steps:\n+\n+@example\n+$ gm2 -c -fscaffold-main hello.mod\n+$ gm2 hello.o\n+@end example\n+\n+The @samp{-fscaffold-main} informs the compiler to generate the\n+@samp{main} function and scaffold.  You can enable the environment\n+variable @samp{GCC_M2LINK_RTFLAG} to trace the construction and\n+destruction of the application.  The values for\n+@samp{GCC_M2LINK_RTFLAG} are shown in the table below:\n+\n+@example\n+value   | meaning\n+=================\n+all     | turn on all flags below\n+module  | trace modules as they register themselves\n+pre     | generate module list prior to dependency resolution\n+dep     | trace module dependency resolution\n+post    | generate module list after dependency resolution\n+force   | generate a module list after dependency and forced\n+        | ordering is complete\n+@end example\n+\n+The values can be combined using a comma separated list.\n+\n+One of the advantages of the dynamic scaffold is that the driver\n+behaves in a similar way to the other front end drivers.\n+For example consider a small project consisting of 4 definition\n+implementation modules (@samp{a.def}, @samp{a.mod}, @samp{b.def},\n+@samp{b.mod}, @samp{c.def}, @samp{c.mod}, @samp{d.def}, @samp{d.mod})\n+and a program module @samp{program.mod}.\n+\n+To link this project we could:\n+\n+@example\n+$ gm2 -g -c a.mod\n+$ gm2 -g -c b.mod\n+$ gm2 -g -c c.mod\n+$ gm2 -g -c d.mod\n+$ gm2 -g program.mod a.o b.o c.o d.o\n+@end example\n+\n+The module initialization sequence is defined by the ISO standard to\n+follow the import graph traversal.  The initialization order is the\n+order in which the corresponding separate modules finish the\n+processing of their import lists.\n+\n+However, if required, you can override this using\n+@samp{-fruntime-modules=a,b,c,d} for example which forces the\n+initialization sequence to @samp{a}, @samp{b}, @samp{c} and @samp{d}.\n+\n+@node Elementary data types, Standard procedures, Linking, Using\n @section Elementary data types\n \n This section describes the elementary data types supported by GNU\n@@ -1851,85 +1822,6 @@ and @code{f} are type compatible and will produce run time checking\n code to test whether the address range of their respective contents\n intersect.\n \n-@node Linking, Building a shared library, Unbounded by reference, Using\n-\n-This section describes the linking related options.  There are three\n-linking strategies available which are dynamic scaffold, static\n-scaffold and user defined.  The dynamic scaffold is enabled by default\n-and each module will register itself to the run time @samp{M2RTS} via\n-a constructor.  The static scaffold mechanism will invoke each modules\n-@samp{_init} and @samp{_finish} function in turn via a sequence of\n-calls from within @samp{main}.  Lastly the user defined strategy\n-can be implemented by turning off the dynamic and static options via\n-@samp{-fno-scaffold-dynamic} and @samp{-fno-scaffold-static}.\n-\n-In the simple test below:\n-\n-@example\n-$ gm2 hello.mod\n-@end example\n-\n-the driver will add the options @samp{-fscaffold-dynamic} and\n-@samp{-fgen-module-list=-} which generate a list of application\n-modules and also creates the @samp{main} function with calls to\n-@samp{M2RTS}.  It can be useful to add the option @samp{-fsources}\n-which displays the source files as they are parsed and summarizes\n-whether the source file is required for compilation or linking.\n-\n-If you wish to split the above command line into a compile and link\n-then you could use these steps:\n-\n-@example\n-$ gm2 -c -fscaffold-main hello.mod\n-$ gm2 hello.o\n-@end example\n-\n-The @samp{-fscaffold-main} informs the compiler to generate the\n-@samp{main} function and scaffold.  You can enable the environment\n-variable @samp{GCC_M2LINK_RTFLAG} to trace the construction and\n-destruction of the application.  The values for\n-@samp{GCC_M2LINK_RTFLAG} are shown in the table below:\n-\n-@example\n-value   | meaning\n-=================\n-all     | turn on all flags below\n-module  | trace modules as they register themselves\n-pre     | generate module list prior to dependency resolution\n-dep     | trace module dependency resolution\n-post    | generate module list after dependency resolution\n-force   | generate a module list after dependency and forced\n-        | ordering is complete\n-@end example\n-\n-The values can be combined using a comma separated list.\n-\n-One of the advantages of the dynamic scaffold is that the driver\n-behaves in a similar way to the other front end drivers.\n-For example consider a small project consisting of 4 definition\n-implementation modules (@samp{a.def}, @samp{a.mod}, @samp{b.def},\n-@samp{b.mod}, @samp{c.def}, @samp{c.mod}, @samp{d.def}, @samp{d.mod})\n-and a program module @samp{program.mod}.\n-\n-To link this project we could:\n-\n-@example\n-$ gm2 -g -c a.mod\n-$ gm2 -g -c b.mod\n-$ gm2 -g -c c.mod\n-$ gm2 -g -c d.mod\n-$ gm2 -g program.mod a.o b.o c.o d.o\n-@end example\n-\n-The module initialization sequence is defined by the ISO standard to\n-follow the import graph traversal.  The initialization order is the\n-order in which the corresponding separate modules finish the\n-processing of their import lists.\n-\n-However, if required, you can override this using\n-@samp{-fruntime-modules=a,b,c,d} for example which forces the\n-initialization sequence to @samp{a}, @samp{b}, @samp{c} and @samp{d}.\n-\n @node Building a shared library, Interface for Python, Unbounded by reference, Using\n @section Building a shared library\n \n@@ -2733,7 +2625,7 @@ There are also a variety of fixed sized @code{INTEGER} and\n @code{CARDINAL} types.  The variety of the fixed sized types will\n depend upon the target architecture.\n \n-@node The ISO system module, , The PIM system module, Using\n+@node The ISO system module, Release map, The PIM system module, Using\n @section The ISO system module\n \n @include m2/SYSTEM-iso.texi\n@@ -2750,7 +2642,111 @@ There are also a variety of fixed sized @code{INTEGER} and\n @code{CARDINAL} types.  The variety of the fixed sized types will\n depend upon the target architecture.\n \n-@node License, Copying, The ISO system module, Top\n+@node Release map, Documentation, The ISO system module, Using\n+@section Release map\n+\n+GNU Modula-2 is now part of GCC and therefore will adopt the GCC\n+release schedule.  It is intended that GNU Modula-2 implement more of\n+the GCC builtins (vararg access) and GCC features.\n+\n+There is an intention to implement the ISO generics and the M2R10\n+dialect of Modula-2.  It will also implement all language changes.  If\n+you wish to see something different please email\n+@email{gm2@@nongnu.org} with your ideas.\n+\n+@node Documentation, Regression tests, Release map, Using\n+@section Documentation\n+\n+The GNU Modula-2 documentation is available on line\n+@url{https://www.nongnu.org/gm2/homepage.html,at the gm2 homepage}\n+or in the pdf, info, html file format.\n+\n+@node Regression tests, Limitations, Documentation, Using\n+@section Regression tests for gm2 in the repository\n+\n+The regression testsuite can be run from the gcc build directory:\n+\n+@example\n+$ cd build-gcc\n+$ make check -j 24\n+@end example\n+\n+which runs the complete testsuite for all compilers using 24 parallel\n+invocations of the compiler.  Individual language testsuites can be\n+run by specifying the language, for example the Modula-2 testsuite can\n+be run using:\n+\n+@example\n+$ cd build-gcc\n+$ make check-m2 -j 24\n+@end example\n+\n+Finally the results of the testsuite can be emailed to the\n+@url{https://gcc.gnu.org/lists.html, gcc-testresults} list using the\n+@file{test_summary} script found in the gcc source tree:\n+\n+@example\n+$ @samp{directory to the sources}/contrib/test_summary\n+@end example\n+\n+@node Limitations, Objectives, Regression tests, Using\n+@section Limitations\n+\n+Logitech compatibility library is incomplete.  The principle modules\n+for this platform exist however for a comprehensive list of completed\n+modules please check the documentation\n+@url{gm2.html}.\n+\n+@node Objectives, FAQ, Limitations, Using\n+@section Objectives\n+\n+@itemize @bullet\n+\n+@item\n+The intention of GNU Modula-2 is to provide a production Modula-2\n+front end to GCC.\n+\n+@item\n+It should support all Niklaus Wirth PIM Dialects [234] and also ISO\n+Modula-2 including a re-implementation of all the ISO modules.\n+\n+@item\n+There should be an easy interface to C.\n+\n+@item\n+Exploit the features of GCC.\n+\n+@item\n+Listen to the requests of the users.\n+@end itemize\n+\n+@node FAQ, Community, Objectives, Using\n+@section FAQ\n+\n+@subsection Why use the C++ exception mechanism in GCC, rather than a bespoke Modula-2 mechanism?\n+\n+The C++ mechanism is tried and tested, it also provides GNU Modula-2\n+with the ability to link with C++ modules and via swig it can raise\n+Python exceptions.\n+\n+@node Community, Other languages, FAQ, Using\n+@section Community\n+\n+You can subscribe to the GNU Modula-2 mailing by sending an\n+email to:\n+@email{gm2-subscribe@@nongnu.org}\n+or by\n+@url{http://lists.nongnu.org/mailman/listinfo/gm2}.\n+The mailing list contents can be viewed\n+@url{http://lists.gnu.org/archive/html/gm2}.\n+\n+@node Other languages, , Community, Using\n+@section Other languages for GCC\n+\n+These exist and can be found on the frontends web page on the\n+@uref{http://gcc.gnu.org/frontends.html, gcc web site}.\n+\n+@node License, Copying, Using, Top\n @section License of GNU Modula-2\n \n GNU Modula-2 is free software, the compiler is held under the GPL v3"}]}