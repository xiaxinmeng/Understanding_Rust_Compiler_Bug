{"sha": "18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "node_id": "C_kwDOANBUbNoAKDE4YWU0NzFmN2I5YjcwY2RjZjkyYWRjODdjOTg2NzQ0OTBjZGJlN2Y", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-04T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-04T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "8859686eefa50499f1cd67443bb8a7150922d980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8859686eefa50499f1cd67443bb8a7150922d980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/comments", "author": null, "committer": null, "parents": [{"sha": "c79399c7e128a3eaa61597f5991e909224fc9808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79399c7e128a3eaa61597f5991e909224fc9808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79399c7e128a3eaa61597f5991e909224fc9808"}], "stats": {"total": 220, "additions": 219, "deletions": 1}, "files": [{"sha": "63948b0d1f6ff851669a057b297a4e4d684bf237", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,8 @@\n+2021-11-03  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* MAINTAINERS: Clarify the policy WRT the Write After Approval\n+\tlist.\n+\n 2021-11-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* MAINTAINERS (Reviewers, arc): Remove my entry."}, {"sha": "a84a7228e54817804a1ed4fd82db59ac9a268493", "filename": "gcc/ChangeLog", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,158 @@\n+2021-11-03  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/riscv/riscv.c (riscv_class_max_nregs): Swap the\n+\targuments to `reg_class_subset_p'.\n+\n+2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/103031\n+\t* fold-const.c (fold_init): New function.\n+\t* fold-const.h (fold_init): New prototype.\n+\n+2021-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* params.opt (param_vrp2_mode): Make ranger the default for VRP2.\n+\n+2021-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Don't import\n+\ta range from edge if arg == phidef.\n+\n+2021-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_builtin_call): Test\n+\tfor constant before any other processing.\n+\n+2021-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* flag-types.h (RANGER_DEBUG_ALL): Fix values.\n+\n+2021-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Initialize current_bb.\n+\t(gimple_ranger::range_of_expr): Pick up range_on_entry when there is\n+\tno explcit context and current_bb is set.\n+\t(gimple_ranger::fold_stmt): New.\n+\t* gimple-range.h (current_bb, fold_stmt): New.\n+\t* tree-vrp.c (rvrp_folder::fold_stmt): Call ranger's fold_stmt.\n+\n+2021-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102970\n+\t* tree-ssa-pre.c (phi_translate_1): Drop clique and base\n+\twhen translating a MEM_REF over a backedge.\n+\n+2021-11-03  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New Ampere-1\tcore.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* config/aarch64/aarch64-cost-tables.h: Add extra costs for Ampere-1.\n+\t* config/aarch64/aarch64.c: Add tuning structures for Ampere-1.\n+\t* doc/invoke.texi: Add documentation for Ampere-1 core.\n+\n+2021-11-03  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (movsi): Add alternative for GOT accesses.\n+\t(movdi): Likewise.\n+\t(ldr_got_small_<mode>): Remove pattern.\n+\t(ldr_got_small_sidi): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Keep\n+\tGOT accesses as moves.\n+\t(aarch64_print_operand): Correctly print got_lo12 in L specifier.\n+\t(aarch64_mov_operand_p): Make GOT accesses valid move operands.\n+\t* config/aarch64/constraints.md: Add new constraint Usw for GOT access.\n+\n+2021-11-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (read_line): Remove dead variable.\n+\n+2021-11-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/102828\n+\t* ipa-fnsummary.c (edge_predicate_pool): Rename predicate class to ipa_predicate.\n+\t(ipa_fn_summary::account_size_time): Likewise.\n+\t(edge_set_predicate): Likewise.\n+\t(set_hint_predicate): Likewise.\n+\t(add_freqcounting_predicate): Likewise.\n+\t(evaluate_conditions_for_known_args): Likewise.\n+\t(evaluate_properties_for_edge): Likewise.\n+\t(remap_freqcounting_preds_after_dup): Likewise.\n+\t(ipa_fn_summary_t::duplicate): Likewise.\n+\t(set_cond_stmt_execution_predicate): Likewise.\n+\t(set_switch_stmt_execution_predicate): Likewise.\n+\t(compute_bb_predicates): Likewise.\n+\t(will_be_nonconstant_expr_predicate): Likewise.\n+\t(will_be_nonconstant_predicate): Likewise.\n+\t(phi_result_unknown_predicate): Likewise.\n+\t(predicate_for_phi_result): Likewise.\n+\t(analyze_function_body): Likewise.\n+\t(compute_fn_summary): Likewise.\n+\t(summarize_calls_size_and_time): Likewise.\n+\t(estimate_calls_size_and_time): Likewise.\n+\t(ipa_call_context::estimate_size_and_time): Likewise.\n+\t(remap_edge_summaries): Likewise.\n+\t(remap_freqcounting_predicate): Likewise.\n+\t(ipa_merge_fn_summary_after_inlining): Likewise.\n+\t(ipa_update_overall_fn_summary): Likewise.\n+\t(read_ipa_call_summary): Likewise.\n+\t(inline_read_section): Likewise.\n+\t* ipa-fnsummary.h (struct ipa_freqcounting_predicate): Likewise.\n+\t* ipa-predicate.c (predicate::add_clause): Likewise.\n+\t(ipa_predicate::add_clause): Likewise.\n+\t(predicate::or_with): Likewise.\n+\t(ipa_predicate::or_with): Likewise.\n+\t(predicate::evaluate): Likewise.\n+\t(ipa_predicate::evaluate): Likewise.\n+\t(predicate::probability): Likewise.\n+\t(ipa_predicate::probability): Likewise.\n+\t(dump_condition): Likewise.\n+\t(dump_clause): Likewise.\n+\t(predicate::dump): Likewise.\n+\t(ipa_predicate::dump): Likewise.\n+\t(predicate::debug): Likewise.\n+\t(ipa_predicate::debug): Likewise.\n+\t(predicate::remap_after_duplication): Likewise.\n+\t(ipa_predicate::remap_after_duplication): Likewise.\n+\t(predicate::remap_after_inlining): Likewise.\n+\t(ipa_predicate::remap_after_inlining): Likewise.\n+\t(predicate::stream_in): Likewise.\n+\t(ipa_predicate::stream_in): Likewise.\n+\t(predicate::stream_out): Likewise.\n+\t(ipa_predicate::stream_out): Likewise.\n+\t(add_condition): Likewise.\n+\t* ipa-predicate.h (class predicate): Likewise.\n+\t(class ipa_predicate): Likewise.\n+\t(add_condition): Likewise.\n+\n+2021-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* bitmap.h (bitmap_bit_p): Change the return type to bool.\n+\t* bitmap.c (bitmap_bit_p): Likewise.\n+\t* sbitmap.h (bitmap_bit_p): Likewise.\n+\t(bitmap_set_bit): Return whether the bit changed.\n+\t(bitmap_clear_bit): Likewise.\n+\t* tree-ssa.c (verify_vssa): Make use of the changed state\n+\tfrom bitmap_set_bit.\n+\n+2021-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/103033\n+\t* internal-fn.c (expand_DEFERRED_INIT): Elide the\n+\tnative_interpret_expr path in favor of folding the\n+\tVIEW_CONVERT_EXPR generated when punning the RHS.\n+\n+2021-11-03  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_loop_unroll_adjust): In case of early\n+\texit free bbs.\n+\n+2021-11-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103040\n+\t* ipa-modref.c (callee_to_caller_flags): New function.\n+\t(modref_eaf_analysis::analyze_ssa_name): Use it.\n+\t(ipa_merge_modref_summary_after_inlining): Fix whitespace.\n+\n 2021-11-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-modref.c (modref_eaf_analysis::analyze_ssa_name): Revert"}, {"sha": "9a49e747f2b1279e0ae1fa7690cf43e740d502b8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1 +1 @@\n-20211103\n+20211104"}, {"sha": "18ca6734b7605319057919d83c3db82c472de40e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,11 @@\n+2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/103031\n+\t* c-common.c (convert_and_check): Add argument init_const.  Call\n+\tconvert_init if init_const.\n+\t* c-common.h (convert_and_check): Update prototype.\n+\t(convert_init): New prototype.\n+\n 2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-lex.c (c_lex_with_flags): When complaining about non-printable"}, {"sha": "306daddb4e3becfad20bcfee38714be7b8a73513", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,15 @@\n+2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/103031\n+\t* c-convert.c (c_convert): New function, based on convert.\n+\t(convert): Make into wrapper of c_convert.\n+\t(convert_init): New function.\n+\t* c-typeck.c (enum impl_conv): Add ic_init_const.\n+\t(convert_for_assignment): Handle ic_init_const like ic_init.  Add\n+\tnew argument to convert_and_check call.\n+\t(digest_init): Pass ic_init_const to convert_for_assignment for\n+\tinitializers required to be constant.\n+\n 2021-11-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-tree.h (c_simulate_record_decl): Declare."}, {"sha": "f6aa396ed185d0b92e6dde63e3f8dd671f51f4a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,8 @@\n+2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/103031\n+\t* cvt.c (convert_init): New function.\n+\n 2021-11-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* decl.c: Include langhooks-def.h."}, {"sha": "9270f9e9dad1f5032a01313620ae8327fcddb5a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,27 @@\n+2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/103031\n+\t* gcc.dg/init-rounding-math-1.c: New test.\n+\n+2021-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr23744.c: Tweak output checks.\n+\t* gcc.dg/tree-ssa/vrp07.c: Ditto.\n+\t* gcc.dg/tree-ssa/vrp08.c: Ditto.\n+\t* gcc.dg/tree-ssa/vrp09.c: Ditto.\n+\t* gcc.dg/tree-ssa/vrp20.c: Ditto.\n+\t* gcc.dg/tree-ssa/vrp92.c: Ditto.\n+\t* jit.dg/test-sum-of-squares.c: Ditto.\n+\n+2021-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102970\n+\t* g++.dg/opt/pr102970.C: New testcase.\n+\n+2021-11-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/torture/pr103040.C: New test.\n+\n 2021-11-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/ipa/modref-3.c: New test."}, {"sha": "f2d0a69d21af75901535d54466ca10e5d03e8d21", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18ae471f7b9b70cdcf92adc87c98674490cdbe7f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=18ae471f7b9b70cdcf92adc87c98674490cdbe7f", "patch": "@@ -1,3 +1,12 @@\n+2021-11-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/66742\n+\t* include/bits/list.tcc (list::sort): Use mutable iterators for\n+\tcomparisons.\n+\t* include/bits/stl_list.h (_Scratch_list::_Ptr_cmp): Likewise.\n+\t* testsuite/23_containers/list/operations/66742.cc: Check\n+\tnon-const comparisons.\n+\n 2021-11-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/valarray (valarray::valarray()): Add noexcept."}]}