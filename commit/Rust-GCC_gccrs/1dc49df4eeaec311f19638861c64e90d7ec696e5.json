{"sha": "1dc49df4eeaec311f19638861c64e90d7ec696e5", "node_id": "C_kwDOANBUbNoAKDFkYzQ5ZGY0ZWVhZWMzMTFmMTk2Mzg4NjFjNjRlOTBkN2VjNjk2ZTU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-08T13:55:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-08T13:55:46Z"}, "message": "i386: Add *concat<mode><dwi>3_{5,6,7} patterns [PR107627]\n\nOn Thu, Dec 01, 2022 at 09:09:51AM +0100, Jakub Jelinek via Gcc-patches wrote:\n> BTW, I wonder if we couldn't add additional patterns which would catch\n> the case where one of the operands is constant.\n\nThe following patch does add those.\nThe difference with the patch on the 2 testcases is:\n baz:\n-       movq    8(%rsi), %rax\n+       movq    8(%rsi), %rsi\n+       movq    %rdi, %r8\n        movl    %edx, %ecx\n-       xorl    %r8d, %r8d\n-       xorl    %edx, %edx\n-       movabsq $-2401053089206453570, %r9\n-       orq     %r8, %rax\n-       orq     %r9, %rdx\n-       shrdq   %rdx, %rax\n-       movq    %rax, (%rdi)\n+       movabsq $-2401053089206453570, %rdi\n+       movq    %rsi, %rax\n+       shrdq   %rdi, %rax\n+       movq    %rax, (%r8)\n qux:\n-       movq    (%rsi), %rax\n+       movq    %rdi, %r8\n+       movq    (%rsi), %rdi\n        movl    %edx, %ecx\n-       xorl    %r9d, %r9d\n-       movabsq $-2401053089206453570, %r8\n-       movq    %rax, %rdx\n-       xorl    %eax, %eax\n-       orq     %r8, %rax\n-       orq     %r9, %rdx\n-       shrdq   %rdx, %rax\n-       movq    %rax, (%rdi)\n+       movabsq $-2401053089206453570, %rsi\n+       movq    %rsi, %rax\n+       shrdq   %rdi, %rax\n+       movq    %rax, (%r8)\nand\n garply:\n        pushl   %esi\n-       xorl    %edx, %edx\n+       movl    $-559038737, %esi\n        pushl   %ebx\n        movl    16(%esp), %eax\n-       orl     $-559038737, %edx\n        movl    20(%esp), %ecx\n-       movl    4(%eax), %eax\n-       shrdl   %edx, %eax\n        movl    12(%esp), %edx\n+       movl    4(%eax), %ebx\n+       movl    %ebx, %eax\n+       shrdl   %esi, %eax\n fred:\n...\n        movl    16(%esp), %eax\n+       movl    $-889275714, %ebx\n        movl    20(%esp), %ecx\n-       movl    (%eax), %eax\n-       movl    %eax, %edx\n-       movl    $0, %eax\n-       orl     $-889275714, %eax\n-       shrdl   %edx, %eax\n        movl    12(%esp), %edx\n+       movl    (%eax), %esi\n+       movl    %ebx, %eax\n+       shrdl   %esi, %eax\n\n2022-12-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107627\n\t* config/i386/i386.md (HALF, half): New mode attributes.\n\t(*concat<half><mode>3_5, *concat<mode><dwi>3_6,\n\t*concat<mode><dwi>3_7): New define_insn_and_split patterns.\n\n\t* gcc.target/i386/pr107627-3.c: New test.\n\t* gcc.target/i386/pr107627-4.c: New test.", "tree": {"sha": "d932cedc88282c350b01d21b4515bf593fa09e31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d932cedc88282c350b01d21b4515bf593fa09e31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dc49df4eeaec311f19638861c64e90d7ec696e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc49df4eeaec311f19638861c64e90d7ec696e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc49df4eeaec311f19638861c64e90d7ec696e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc49df4eeaec311f19638861c64e90d7ec696e5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef9991d8767932f51fa97753c16058d17b29b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef9991d8767932f51fa97753c16058d17b29b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef9991d8767932f51fa97753c16058d17b29b18"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "04a5d634021ab8dde6cd7d8ef7aaba867b0247d1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc49df4eeaec311f19638861c64e90d7ec696e5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc49df4eeaec311f19638861c64e90d7ec696e5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1dc49df4eeaec311f19638861c64e90d7ec696e5", "patch": "@@ -1134,6 +1134,10 @@\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\") (TI \"OI\")])\n (define_mode_attr dwi [(QI \"hi\") (HI \"si\") (SI \"di\") (DI \"ti\") (TI \"oi\")])\n \n+;; Half sized integer modes.\n+(define_mode_attr HALF [(TI \"DI\") (DI \"SI\")])\n+(define_mode_attr half [(TI \"di\") (DI \"si\")])\n+\n ;; LEA mode corresponding to an integer mode\n (define_mode_attr LEAMODE [(QI \"SI\") (HI \"SI\") (SI \"SI\") (DI \"DI\")])\n \n@@ -11464,6 +11468,80 @@\n   split_double_concat (<DWI>mode, operands[0], operands[1], operands[2]);\n   DONE;\n })\n+\n+(define_insn_and_split \"*concat<half><mode>3_5\"\n+  [(set (match_operand:DWI 0 \"nonimmediate_operand\" \"=ro\")\n+\t(any_or_plus:DWI\n+\t  (ashift:DWI (match_operand:DWI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:DWI 2 \"const_int_operand\"))\n+\t  (match_operand:DWI 3 \"const_scalar_int_operand\")))]\n+  \"INTVAL (operands[2]) == <MODE_SIZE> * BITS_PER_UNIT / 2\n+   && (<MODE>mode == DImode\n+       ? CONST_INT_P (operands[3])\n+\t && (UINTVAL (operands[3]) & ~GET_MODE_MASK (SImode)) == 0\n+       : CONST_INT_P (operands[3])\n+       ? INTVAL (operands[3]) >= 0\n+       : CONST_WIDE_INT_NUNITS (operands[3]) == 2\n+\t && CONST_WIDE_INT_ELT (operands[3], 1) == 0)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n+{\n+  rtx op3 = simplify_subreg (<HALF>mode, operands[3], <MODE>mode, 0);\n+  split_double_concat (<MODE>mode, operands[0], op3,\n+\t\t       gen_lowpart (<HALF>mode, operands[1]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*concat<mode><dwi>3_6\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+\t(any_or_plus:<DWI>\n+\t  (ashift:<DWI>\n+\t    (zero_extend:<DWI>\n+\t      (match_operand:DWIH 1 \"nonimmediate_operand\" \"r,m\"))\n+\t    (match_operand:<DWI> 2 \"const_int_operand\"))\n+\t  (match_operand:<DWI> 3 \"const_scalar_int_operand\")))]\n+  \"INTVAL (operands[2]) == <MODE_SIZE> * BITS_PER_UNIT\n+   && (<DWI>mode == DImode\n+       ? CONST_INT_P (operands[3])\n+\t && (UINTVAL (operands[3]) & ~GET_MODE_MASK (SImode)) == 0\n+       : CONST_INT_P (operands[3])\n+       ? INTVAL (operands[3]) >= 0\n+       : CONST_WIDE_INT_NUNITS (operands[3]) == 2\n+\t && CONST_WIDE_INT_ELT (operands[3], 1) == 0)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n+{\n+  rtx op3 = simplify_subreg (<MODE>mode, operands[3], <DWI>mode, 0);\n+  split_double_concat (<DWI>mode, operands[0], op3, operands[1]);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*concat<mode><dwi>3_7\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+\t(any_or_plus:<DWI>\n+\t  (zero_extend:<DWI>\n+\t    (match_operand:DWIH 1 \"nonimmediate_operand\" \"r,m\"))\n+\t  (match_operand:<DWI> 2 \"const_scalar_int_operand\")))]\n+  \"<DWI>mode == DImode\n+   ? CONST_INT_P (operands[2])\n+     && (UINTVAL (operands[2]) & GET_MODE_MASK (SImode)) == 0\n+   : CONST_WIDE_INT_P (operands[2])\n+     && CONST_WIDE_INT_NUNITS (operands[2]) == 2\n+     && CONST_WIDE_INT_ELT (operands[2], 0) == 0\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(clobber (const_int 0))]\n+{\n+  rtx op2;\n+  if (<DWI>mode == DImode)\n+    op2 = gen_int_mode (INTVAL (operands[2]) >> 32, <MODE>mode);\n+  else\n+    op2 = gen_int_mode (CONST_WIDE_INT_ELT (operands[2], 1), <MODE>mode);\n+  split_double_concat (<DWI>mode, operands[0], operands[1], op2);\n+  DONE;\n+})\n \f\n ;; Negation instructions\n "}, {"sha": "99c7f7f4a6bc0d920fd7fec11971a8731362dfbe", "filename": "gcc/testsuite/gcc.target/i386/pr107627-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc49df4eeaec311f19638861c64e90d7ec696e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107627-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc49df4eeaec311f19638861c64e90d7ec696e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107627-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107627-3.c?ref=1dc49df4eeaec311f19638861c64e90d7ec696e5", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/107627 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"\\torq\\t\" } } */\n+\n+static inline unsigned __int128\n+foo (unsigned long long x, unsigned long long y)\n+{\n+  return ((unsigned __int128) x << 64) | y;\n+}\n+\n+static inline unsigned long long\n+bar (unsigned long long x, unsigned long long y, unsigned z)\n+{\n+  return foo (x, y) >> (z % 64);\n+}\n+\n+void\n+baz (unsigned long long *x, const unsigned long long *y, unsigned z)\n+{\n+  x[0] = bar (0xdeadbeefcafebabeULL, y[1], z);\n+}\n+\n+void\n+qux (unsigned long long *x, const unsigned long long *y, unsigned z)\n+{\n+  x[0] = bar (y[0], 0xdeadbeefcafebabeULL, z);\n+}"}, {"sha": "f7d9bdb6b77841d218017252abfdff1d82249b58", "filename": "gcc/testsuite/gcc.target/i386/pr107627-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc49df4eeaec311f19638861c64e90d7ec696e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107627-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc49df4eeaec311f19638861c64e90d7ec696e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107627-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107627-4.c?ref=1dc49df4eeaec311f19638861c64e90d7ec696e5", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/107627 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"\\torl\\t\" } } */\n+\n+static inline unsigned long long\n+qux (unsigned int x, unsigned int y)\n+{\n+  return ((unsigned long long) x << 32) | y;\n+}\n+\n+static inline unsigned int\n+corge (unsigned int x, unsigned int y, unsigned z)\n+{\n+  return qux (x, y) >> (z % 32);\n+}\n+\n+void\n+garply (unsigned int *x, const unsigned int *y, unsigned z)\n+{\n+  x[0] = corge (0xdeadbeefU, y[1], z);\n+}\n+\n+void\n+fred (unsigned int *x, const unsigned int *y, unsigned z)\n+{\n+  x[0] = corge (y[0], 0xcafebabeU, z);\n+}"}]}