{"sha": "eecee223f435fa01fb07a2fdba1615b89627d710", "node_id": "C_kwDOANBUbNoAKGVlY2VlMjIzZjQzNWZhMDFmYjA3YTJmZGJhMTYxNWI4OTYyN2Q3MTA", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-03T16:26:29Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-03T17:16:43Z"}, "message": "rs6000: Consolidate target built-ins code\n\nContinuing with the refactoring effort, this patch moves as much of the\ntarget-specific built-in support code into a new file, rs6000-builtin.cc.\nHowever, we can't easily move the overloading support code out of\nrs6000-c.cc, because the build machinery understands that as a special file\nto be included with the C and C++ front ends.\n\nThis patch is just a straightforward move, with one exception.  I found\nthat the builtin_mode_to_type[] array is no longer used, so I also removed\nall code having to do with it.\n\nThe code in rs6000-builtin.cc is organized in related sections:\n - General support functions\n - Initialization support\n - GIMPLE folding support\n - Expansion support\n\nOverloading support remains in rs6000-c.cc.\n\n2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config.gcc (powerpc*-*-*): Add rs6000-builtin.o to extra_objs.\n\t* config/rs6000/rs6000-builtin.cc: New file, containing code moved\n\tfrom other files.\n\t* config/rs6000/rs6000-call.cc (cpu_is_info): Move to\n\trs6000-builtin.cc.\n\t(cpu_supports_info): Likewise.\n\t(rs6000_type_string): Likewise.\n\t(altivec_expand_predicate_builtin): Likewise.\n\t(rs6000_htm_spr_icode): Likewise.\n\t(altivec_expand_vec_init_builtin): Likewise.\n\t(get_element_number): Likewise.\n\t(altivec_expand_vec_set_builtin): Likewise.\n\t(altivec_expand_vec_ext_builtin): Likewise.\n\t(rs6000_invalid_builtin): Likewise.\n\t(rs6000_fold_builtin): Likewise.\n\t(fold_build_vec_cmp): Likewise.\n\t(fold_compare_helper): Likewise.\n\t(map_to_integral_tree_type): Likewise.\n\t(fold_mergehl_helper): Likewise.\n\t(fold_mergeeo_helper): Likewise.\n\t(rs6000_builtin_valid_without_lhs): Likewise.\n\t(rs6000_builtin_is_supported): Likewise.\n\t(rs6000_gimple_fold_mma_builtin): Likewise.\n\t(rs6000_gimple_fold_builtin): Likewise.\n\t(rs6000_expand_ldst_mask): Likewise.\n\t(cpu_expand_builtin): Likewise.\n\t(elemrev_icode): Likewise.\n\t(ldv_expand_builtin): Likewise.\n\t(lxvrse_expand_builtin): Likewise.\n\t(lxvrze_expand_builtin): Likewise.\n\t(stv_expand_builtin): Likewise.\n\t(mma_expand_builtin): Likewise.\n\t(htm_spr_num): Likewise.\n\t(htm_expand_builtin): Likewise.\n\t(rs6000_expand_builtin): Likewise.\n\t(rs6000_vector_type): Likewise.\n\t(rs6000_init_builtins): Likewise.  Remove initialization of\n\tbuiltin_mode_to_type entries.\n\t(rs6000_builtin_decl): Move to rs6000-builtin.cc.\n\t* config/rs6000/rs6000.cc (rs6000_builtin_mask_for_load): New\n\texternal declaration.\n\t(rs6000_builtin_md_vectorized_function): Likewise.\n\t(rs6000_builtin_reciprocal): Likewise.\n\t(altivec_builtin_mask_for_load): Move to rs6000-builtin.cc.\n\t(rs6000_builtin_types): Likewise.\n\t(builtin_mode_to_type): Remove.\n\t(rs6000_builtin_mask_for_load): Move to rs6000-builtin.cc.  Remove\n\tstatic qualifier.\n\t(rs6000_builtin_md_vectorized_function): Likewise.\n\t(rs6000_builtin_reciprocal): Likewise.\n\t* config/rs6000/rs6000.h (builtin_mode_to_type): Remove.\n\t* config/rs6000/t-rs6000 (rs6000-builtin.o): New target.", "tree": {"sha": "d85aa197bff7ff6be563bba4f9e9ed1a8c43ac60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85aa197bff7ff6be563bba4f9e9ed1a8c43ac60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eecee223f435fa01fb07a2fdba1615b89627d710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecee223f435fa01fb07a2fdba1615b89627d710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eecee223f435fa01fb07a2fdba1615b89627d710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecee223f435fa01fb07a2fdba1615b89627d710/comments", "author": null, "committer": null, "parents": [{"sha": "45ba6bf28b75ee3391df83fbfb1060a50dc63d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ba6bf28b75ee3391df83fbfb1060a50dc63d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ba6bf28b75ee3391df83fbfb1060a50dc63d3a"}], "stats": {"total": 7410, "additions": 3723, "deletions": 3687}, "files": [{"sha": "fdcfb5b6e78f02efe6ca8929e6c4f711e9f439cc", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=eecee223f435fa01fb07a2fdba1615b89627d710", "patch": "@@ -485,7 +485,7 @@ powerpc*-*-*)\n \tcpu_type=rs6000\n \textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o\"\n \textra_objs=\"${extra_objs} rs6000-call.o rs6000-pcrel-opt.o\"\n-\textra_objs=\"${extra_objs} rs6000-builtins.o\"\n+\textra_objs=\"${extra_objs} rs6000-builtins.o rs6000-builtin.o\"\n \textra_headers=\"ppc-asm.h altivec.h htmintrin.h htmxlintrin.h\"\n \textra_headers=\"${extra_headers} bmi2intrin.h bmiintrin.h\"\n \textra_headers=\"${extra_headers} xmmintrin.h mm_malloc.h emmintrin.h\""}, {"sha": "005f936a49c0741da8d0eb279cb66083d3d957f6", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "added", "additions": 3714, "deletions": 0, "changes": 3714, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=eecee223f435fa01fb07a2fdba1615b89627d710"}, {"sha": "f06c69252b2f84d370bb03792c1abe47ba2e9bae", "filename": "gcc/config/rs6000/rs6000-call.cc", "status": "modified", "additions": 0, "deletions": 3526, "changes": 3526, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc?ref=eecee223f435fa01fb07a2fdba1615b89627d710"}, {"sha": "ac6dd19cd6482955d57b66f9fe0a0a8f23101bd4", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 4, "deletions": 159, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=eecee223f435fa01fb07a2fdba1615b89627d710", "patch": "@@ -86,6 +86,10 @@\n /* This file should be included last.  */\n #include \"target-def.h\"\n \n+extern tree rs6000_builtin_mask_for_load (void);\n+extern tree rs6000_builtin_md_vectorized_function (tree, tree, tree);\n+extern tree rs6000_builtin_reciprocal (tree);\n+\n   /* Set -mabi=ieeelongdouble on some old targets.  In the future, power server\n      systems will also set long double to be IEEE 128-bit.  AIX and Darwin\n      explicitly redefine TARGET_IEEEQUAD and TARGET_IEEEQUAD_DEFAULT to 0, so\n@@ -105,9 +109,6 @@\n #define PCREL_SUPPORTED_BY_OS\t0\n #endif\n \n-/* Support targetm.vectorize.builtin_mask_for_load.  */\n-tree altivec_builtin_mask_for_load;\n-\n #ifdef USING_ELFOS_H\n /* Counter for labels which are to be placed in .fixup.  */\n int fixuplabelno = 0;\n@@ -159,9 +160,6 @@ enum reg_class rs6000_regno_regclass[FIRST_PSEUDO_REGISTER];\n \n static int dbg_cost_ctrl;\n \n-/* Built in types.  */\n-tree rs6000_builtin_types[RS6000_BTI_MAX];\n-\n /* Flag to say the TOC is initialized */\n int toc_initialized, need_toc_init;\n char toc_label_name[10];\n@@ -190,9 +188,6 @@ enum reg_class rs6000_constraints[RS6000_CONSTRAINT_MAX];\n /* Describe the alignment of a vector.  */\n int rs6000_vector_align[NUM_MACHINE_MODES];\n \n-/* Map selected modes to types for builtins.  */\n-tree builtin_mode_to_type[MAX_MACHINE_MODE][2];\n-\n /* What modes to automatically generate reciprocal divide estimate (fre) and\n    reciprocal sqrt (frsqrte) for.  */\n unsigned char rs6000_recip_bits[MAX_MACHINE_MODE];\n@@ -4969,18 +4964,6 @@ rs6000_option_override (void)\n }\n \n \f\n-/* Implement targetm.vectorize.builtin_mask_for_load.  */\n-static tree\n-rs6000_builtin_mask_for_load (void)\n-{\n-  /* Don't use lvsl/vperm for P8 and similarly efficient machines.  */\n-  if ((TARGET_ALTIVEC && !TARGET_VSX)\n-      || (TARGET_VSX && !TARGET_EFFICIENT_UNALIGNED_VSX))\n-    return altivec_builtin_mask_for_load;\n-  else\n-    return 0;\n-}\n-\n /* Implement LOOP_ALIGN. */\n align_flags\n rs6000_loop_align (rtx label)\n@@ -5689,119 +5672,6 @@ rs6000_builtin_vectorized_function (unsigned int fn, tree type_out,\n   return NULL_TREE;\n }\n \n-/* Implement targetm.vectorize.builtin_md_vectorized_function.  */\n-\n-static tree\n-rs6000_builtin_md_vectorized_function (tree fndecl, tree type_out,\n-\t\t\t\t       tree type_in)\n-{\n-  machine_mode in_mode, out_mode;\n-  int in_n, out_n;\n-\n-  if (TARGET_DEBUG_BUILTIN)\n-    fprintf (stderr,\n-\t     \"rs6000_builtin_md_vectorized_function (%s, %s, %s)\\n\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (fndecl)),\n-\t     GET_MODE_NAME (TYPE_MODE (type_out)),\n-\t     GET_MODE_NAME (TYPE_MODE (type_in)));\n-\n-  /* TODO: Should this be gcc_assert?  */\n-  if (TREE_CODE (type_out) != VECTOR_TYPE\n-      || TREE_CODE (type_in) != VECTOR_TYPE)\n-    return NULL_TREE;\n-\n-  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n-  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n-  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n-  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n-\n-  enum rs6000_gen_builtins fn\n-    = (enum rs6000_gen_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n-  switch (fn)\n-    {\n-    case RS6000_BIF_RSQRTF:\n-      if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n-\t  && out_mode == SFmode && out_n == 4\n-\t  && in_mode == SFmode && in_n == 4)\n-\treturn rs6000_builtin_decls[RS6000_BIF_VRSQRTFP];\n-      break;\n-    case RS6000_BIF_RSQRT:\n-      if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t  && out_mode == DFmode && out_n == 2\n-\t  && in_mode == DFmode && in_n == 2)\n-\treturn rs6000_builtin_decls[RS6000_BIF_RSQRT_2DF];\n-      break;\n-    case RS6000_BIF_RECIPF:\n-      if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n-\t  && out_mode == SFmode && out_n == 4\n-\t  && in_mode == SFmode && in_n == 4)\n-\treturn rs6000_builtin_decls[RS6000_BIF_VRECIPFP];\n-      break;\n-    case RS6000_BIF_RECIP:\n-      if (VECTOR_UNIT_VSX_P (V2DFmode)\n-\t  && out_mode == DFmode && out_n == 2\n-\t  && in_mode == DFmode && in_n == 2)\n-\treturn rs6000_builtin_decls[RS6000_BIF_RECIP_V2DF];\n-      break;\n-    default:\n-      break;\n-    }\n-\n-  machine_mode in_vmode = TYPE_MODE (type_in);\n-  machine_mode out_vmode = TYPE_MODE (type_out);\n-\n-  /* Power10 supported vectorized built-in functions.  */\n-  if (TARGET_POWER10\n-      && in_vmode == out_vmode\n-      && VECTOR_UNIT_ALTIVEC_OR_VSX_P (in_vmode))\n-    {\n-      machine_mode exp_mode = DImode;\n-      machine_mode exp_vmode = V2DImode;\n-      enum rs6000_gen_builtins bif;\n-      switch (fn)\n-\t{\n-\tcase RS6000_BIF_DIVWE:\n-\tcase RS6000_BIF_DIVWEU:\n-\t  exp_mode = SImode;\n-\t  exp_vmode = V4SImode;\n-\t  if (fn == RS6000_BIF_DIVWE)\n-\t    bif = RS6000_BIF_VDIVESW;\n-\t  else\n-\t    bif = RS6000_BIF_VDIVEUW;\n-\t  break;\n-\tcase RS6000_BIF_DIVDE:\n-\tcase RS6000_BIF_DIVDEU:\n-\t  if (fn == RS6000_BIF_DIVDE)\n-\t    bif = RS6000_BIF_VDIVESD;\n-\t  else\n-\t    bif = RS6000_BIF_VDIVEUD;\n-\t  break;\n-\tcase RS6000_BIF_CFUGED:\n-\t  bif = RS6000_BIF_VCFUGED;\n-\t  break;\n-\tcase RS6000_BIF_CNTLZDM:\n-\t  bif = RS6000_BIF_VCLZDM;\n-\t  break;\n-\tcase RS6000_BIF_CNTTZDM:\n-\t  bif = RS6000_BIF_VCTZDM;\n-\t  break;\n-\tcase RS6000_BIF_PDEPD:\n-\t  bif = RS6000_BIF_VPDEPD;\n-\t  break;\n-\tcase RS6000_BIF_PEXTD:\n-\t  bif = RS6000_BIF_VPEXTD;\n-\t  break;\n-\tdefault:\n-\t  return NULL_TREE;\n-\t}\n-\n-      if (in_mode == exp_mode && in_vmode == exp_vmode)\n-\treturn rs6000_builtin_decls[bif];\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Handler for the Mathematical Acceleration Subsystem (mass) interface to a\n    library with vectorized intrinsics.  */\n \n@@ -22543,31 +22413,6 @@ rs6000_ira_change_pseudo_allocno_class (int regno ATTRIBUTE_UNUSED,\n   return allocno_class;\n }\n \n-/* Returns a code for a target-specific builtin that implements\n-   reciprocal of the function, or NULL_TREE if not available.  */\n-\n-static tree\n-rs6000_builtin_reciprocal (tree fndecl)\n-{\n-  switch (DECL_MD_FUNCTION_CODE (fndecl))\n-    {\n-    case RS6000_BIF_XVSQRTDP:\n-      if (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))\n-\treturn NULL_TREE;\n-\n-      return rs6000_builtin_decls[RS6000_BIF_RSQRT_2DF];\n-\n-    case RS6000_BIF_XVSQRTSP:\n-      if (!RS6000_RECIP_AUTO_RSQRTE_P (V4SFmode))\n-\treturn NULL_TREE;\n-\n-      return rs6000_builtin_decls[RS6000_BIF_RSQRT_4SF];\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n /* Load up a constant.  If the mode is a vector mode, splat the value across\n    all of the vector elements.  */\n "}, {"sha": "17af314416c3353d64bf15938204dadaf229660a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=eecee223f435fa01fb07a2fdba1615b89627d710", "patch": "@@ -2551,7 +2551,6 @@ enum rs6000_builtin_type_index\n extern GTY(()) tree rs6000_builtin_types[RS6000_BTI_MAX];\n \n #ifndef USED_FOR_TARGET\n-extern GTY(()) tree builtin_mode_to_type[MAX_MACHINE_MODE][2];\n extern GTY(()) tree altivec_builtin_mask_for_load;\n extern GTY(()) section *toc_section;\n "}, {"sha": "597cea423ec2de4f81bcb190a3b6a590c57e0354", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecee223f435fa01fb07a2fdba1615b89627d710/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=eecee223f435fa01fb07a2fdba1615b89627d710", "patch": "@@ -43,6 +43,10 @@ rs6000-logue.o: $(srcdir)/config/rs6000/rs6000-logue.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+rs6000-builtin.o: $(srcdir)/config/rs6000/rs6000-builtin.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n build/rs6000-gen-builtins.o: $(srcdir)/config/rs6000/rs6000-gen-builtins.cc\n build/rbtree.o: $(srcdir)/config/rs6000/rbtree.cc\n "}]}