{"sha": "848ca96f30746fc6972105de156656ce8c5ee586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4Y2E5NmYzMDc0NmZjNjk3MjEwNWRlMTU2NjU2Y2U4YzVlZTU4Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-07-11T18:38:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-07-11T18:38:54Z"}, "message": "re PR libstdc++/49559 ([C++0x] stable_sort calls self-move-assignment operator)\n\n2011-07-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/49559\n\t* include/bits/stl_algo.h (__move_merge_backward): Remove.\n\t(__move_merge_adaptive, __move_merge_adaptive_backward): New.\n\t(__merge_adaptive): Use the latter two.\n\t(__rotate_adaptive): Avoid self move-assignment.\n\t* include/bits/stl_algobase.h (move_backward): Fix comment.\n\t* testsuite/25_algorithms/stable_sort/49559.cc: New.\n\t* testsuite/25_algorithms/inplace_merge/49559.cc: Likewise.\n\t* testsuite/25_algorithms/inplace_merge/moveable.cc: Extend.\n\t* testsuite/25_algorithms/inplace_merge/moveable2.cc: Likewise.\n\t* testsuite/util/testsuite_rvalref.h (rvalstruct::operator=\n\t(rvalstruct&&)): Check for self move-assignment.\n\nFrom-SVN: r176174", "tree": {"sha": "af254038a743c9a107aed7a037726e84595e5ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af254038a743c9a107aed7a037726e84595e5ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848ca96f30746fc6972105de156656ce8c5ee586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848ca96f30746fc6972105de156656ce8c5ee586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848ca96f30746fc6972105de156656ce8c5ee586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848ca96f30746fc6972105de156656ce8c5ee586/comments", "author": null, "committer": null, "parents": [{"sha": "f9610d205a723ac0d4cb4076dbd2d935b0077373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9610d205a723ac0d4cb4076dbd2d935b0077373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9610d205a723ac0d4cb4076dbd2d935b0077373"}], "stats": {"total": 543, "additions": 434, "deletions": 109}, "files": [{"sha": "e628417e350f1e6c734cc4a2d8751f02ebb3f3cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -1,3 +1,18 @@\n+2011-07-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/49559\n+\t* include/bits/stl_algo.h (__move_merge_backward): Remove.\n+\t(__move_merge_adaptive, __move_merge_adaptive_backward): New.\n+\t(__merge_adaptive): Use the latter two.\n+\t(__rotate_adaptive): Avoid self move-assignment.\n+\t* include/bits/stl_algobase.h (move_backward): Fix comment.\n+\t* testsuite/25_algorithms/stable_sort/49559.cc: New.\n+\t* testsuite/25_algorithms/inplace_merge/49559.cc: Likewise.\n+\t* testsuite/25_algorithms/inplace_merge/moveable.cc: Extend.\n+\t* testsuite/25_algorithms/inplace_merge/moveable2.cc: Likewise.\n+\t* testsuite/util/testsuite_rvalref.h (rvalstruct::operator=\n+\t(rvalstruct&&)): Check for self move-assignment.\n+\n 2011-07-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_allocator.h (propagating_allocator<>::"}, {"sha": "8391d3e4854175d0c7e0775af4ad61bd831f438e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 170, "deletions": 93, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -2716,20 +2716,76 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // merge\n \n-  /// This is a helper function for the merge routines.\n+  /// This is a helper function for the __merge_adaptive routines.\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _OutputIterator>\n+    void\n+    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t  _InputIterator2 __first2, _InputIterator2 __last2,\n+\t\t\t  _OutputIterator __result)\n+    {\n+      while (__first1 != __last1 && __first2 != __last2)\n+\t{\n+\t  if (*__first2 < *__first1)\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first2);\n+\t      ++__first2;\n+\t    }\n+\t  else\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first1);\n+\t      ++__first1;\n+\t    }\n+\t  ++__result;\n+\t}\n+      if (__first1 != __last1)\n+\t_GLIBCXX_MOVE3(__first1, __last1, __result);\n+    }\n+\n+  /// This is a helper function for the __merge_adaptive routines.\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _OutputIterator, typename _Compare>\n+    void\n+    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t\t  _InputIterator2 __first2, _InputIterator2 __last2,\n+\t\t\t  _OutputIterator __result, _Compare __comp)\n+    {\n+      while (__first1 != __last1 && __first2 != __last2)\n+\t{\n+\t  if (__comp(*__first2, *__first1))\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first2);\n+\t      ++__first2;\n+\t    }\n+\t  else\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first1);\n+\t      ++__first1;\n+\t    }\n+\t  ++__result;\n+\t}\n+      if (__first1 != __last1)\n+\t_GLIBCXX_MOVE3(__first1, __last1, __result);\n+    }\n+\n+  /// This is a helper function for the __merge_adaptive routines.\n   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,\n \t   typename _BidirectionalIterator3>\n-    _BidirectionalIterator3\n-    __move_merge_backward(_BidirectionalIterator1 __first1,\n-\t\t\t  _BidirectionalIterator1 __last1,\n-\t\t\t  _BidirectionalIterator2 __first2,\n-\t\t\t  _BidirectionalIterator2 __last2,\n-\t\t\t  _BidirectionalIterator3 __result)\n+    void\n+    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,\n+\t\t\t\t   _BidirectionalIterator1 __last1,\n+\t\t\t\t   _BidirectionalIterator2 __first2,\n+\t\t\t\t   _BidirectionalIterator2 __last2,\n+\t\t\t\t   _BidirectionalIterator3 __result)\n     {\n       if (__first1 == __last1)\n-\treturn _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);\n-      if (__first2 == __last2)\n-\treturn _GLIBCXX_MOVE_BACKWARD3(__first1, __last1, __result);\n+\t{\n+\t  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);\n+\t  return;\n+\t}\n+      else if (__first2 == __last2)\n+\treturn;\n+\n       --__last1;\n       --__last2;\n       while (true)\n@@ -2738,34 +2794,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    {\n \t      *--__result = _GLIBCXX_MOVE(*__last1);\n \t      if (__first1 == __last1)\n-\t\treturn _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);\n+\t\t{\n+\t\t  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);\n+\t\t  return;\n+\t\t}\n \t      --__last1;\n \t    }\n \t  else\n \t    {\n \t      *--__result = _GLIBCXX_MOVE(*__last2);\n \t      if (__first2 == __last2)\n-\t\treturn _GLIBCXX_MOVE_BACKWARD3(__first1, ++__last1, __result);\n+\t\treturn;\n \t      --__last2;\n \t    }\n \t}\n     }\n \n-  /// This is a helper function for the merge routines.\n+  /// This is a helper function for the __merge_adaptive routines.\n   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,\n \t   typename _BidirectionalIterator3, typename _Compare>\n-    _BidirectionalIterator3\n-    __move_merge_backward(_BidirectionalIterator1 __first1,\n-\t\t\t  _BidirectionalIterator1 __last1,\n-\t\t\t  _BidirectionalIterator2 __first2,\n-\t\t\t  _BidirectionalIterator2 __last2,\n-\t\t\t  _BidirectionalIterator3 __result,\n-\t\t\t  _Compare __comp)\n+    void\n+    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,\n+\t\t\t\t   _BidirectionalIterator1 __last1,\n+\t\t\t\t   _BidirectionalIterator2 __first2,\n+\t\t\t\t   _BidirectionalIterator2 __last2,\n+\t\t\t\t   _BidirectionalIterator3 __result,\n+\t\t\t\t   _Compare __comp)\n     {\n       if (__first1 == __last1)\n-\treturn _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);\n-      if (__first2 == __last2)\n-\treturn _GLIBCXX_MOVE_BACKWARD3(__first1, __last1, __result);\n+\t{\n+\t  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);\n+\t  return;\n+\t}\n+      else if (__first2 == __last2)\n+\treturn;\n+\n       --__last1;\n       --__last2;\n       while (true)\n@@ -2774,74 +2837,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    {\n \t      *--__result = _GLIBCXX_MOVE(*__last1);\n \t      if (__first1 == __last1)\n-\t\treturn _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);\n+\t\t{\n+\t\t  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);\n+\t\t  return;\n+\t\t}\n \t      --__last1;\n \t    }\n \t  else\n \t    {\n \t      *--__result = _GLIBCXX_MOVE(*__last2);\n \t      if (__first2 == __last2)\n-\t\treturn _GLIBCXX_MOVE_BACKWARD3(__first1, ++__last1, __result);\n+\t\treturn;\n \t      --__last2;\n \t    }\n \t}\n     }\n \n-  /// This is a helper function for the merge routines.\n-  template<typename _InputIterator1, typename _InputIterator2,\n-\t   typename _OutputIterator>\n-    _OutputIterator\n-    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t\t _InputIterator2 __first2, _InputIterator2 __last2,\n-\t\t _OutputIterator __result)\n-    {\n-      while (__first1 != __last1 && __first2 != __last2)\n-\t{\n-\t  if (*__first2 < *__first1)\n-\t    {\n-\t      *__result = _GLIBCXX_MOVE(*__first2);\n-\t      ++__first2;\n-\t    }\n-\t  else\n-\t    {\n-\t      *__result = _GLIBCXX_MOVE(*__first1);\n-\t      ++__first1;\n-\t    }\n-\t  ++__result;\n-\t}\n-      return _GLIBCXX_MOVE3(__first2, __last2,\n-\t\t\t    _GLIBCXX_MOVE3(__first1, __last1,\n-\t\t\t\t\t   __result));\n-    }\n-\n-  /// This is a helper function for the merge routines.\n-  template<typename _InputIterator1, typename _InputIterator2,\n-\t   typename _OutputIterator, typename _Compare>\n-    _OutputIterator\n-    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t\t _InputIterator2 __first2, _InputIterator2 __last2,\n-\t\t _OutputIterator __result, _Compare __comp)\n-    {\n-      while (__first1 != __last1 && __first2 != __last2)\n-\t{\n-\t  if (__comp(*__first2, *__first1))\n-\t    {\n-\t      *__result = _GLIBCXX_MOVE(*__first2);\n-\t      ++__first2;\n-\t    }\n-\t  else\n-\t    {\n-\t      *__result = _GLIBCXX_MOVE(*__first1);\n-\t      ++__first1;\n-\t    }\n-\t  ++__result;\n-\t}\n-      return _GLIBCXX_MOVE3(__first2, __last2,\n-\t\t\t    _GLIBCXX_MOVE3(__first1, __last1,\n-\t\t\t\t\t   __result));\n-    }\n-\n-\n   /// This is a helper function for the merge routines.\n   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,\n \t   typename _Distance>\n@@ -2856,15 +2867,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _BidirectionalIterator2 __buffer_end;\n       if (__len1 > __len2 && __len2 <= __buffer_size)\n \t{\n-\t  __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n-\t  _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);\n-\t  return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);\n+\t  if (__len2)\n+\t    {\n+\t      __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n+\t      _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);\n+\t      return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);\n+\t    }\n+\t  else\n+\t    return __first;\n \t}\n       else if (__len1 <= __buffer_size)\n \t{\n-\t  __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n-\t  _GLIBCXX_MOVE3(__middle, __last, __first);\n-\t  return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);\n+\t  if (__len1)\n+\t    {\n+\t      __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n+\t      _GLIBCXX_MOVE3(__middle, __last, __first);\n+\t      return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);\n+\t    }\n+\t  else\n+\t    return __last;\n \t}\n       else\n \t{\n@@ -2887,13 +2908,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__len1 <= __len2 && __len1 <= __buffer_size)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n-\t  std::__move_merge(__buffer, __buffer_end, __middle, __last, __first);\n+\t  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,\n+\t\t\t\t     __first);\n \t}\n       else if (__len2 <= __buffer_size)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n-\t  std::__move_merge_backward(__first, __middle, __buffer,\n-\t\t\t\t    __buffer_end, __last);\n+\t  std::__move_merge_adaptive_backward(__first, __middle, __buffer,\n+\t\t\t\t\t      __buffer_end, __last);\n \t}\n       else\n \t{\n@@ -2943,14 +2965,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__len1 <= __len2 && __len1 <= __buffer_size)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n-\t  std::__move_merge(__buffer, __buffer_end, __middle, __last,\n-\t\t\t    __first, __comp);\n+\t  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,\n+\t\t\t\t     __first, __comp);\n \t}\n       else if (__len2 <= __buffer_size)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n-\t  std::__move_merge_backward(__first, __middle, __buffer, __buffer_end,\n-\t\t\t\t     __last, __comp);\n+\t  std::__move_merge_adaptive_backward(__first, __middle, __buffer,\n+\t\t\t\t\t      __buffer_end, __last, __comp);\n \t}\n       else\n \t{\n@@ -3187,6 +3209,61 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      __comp);\n     }\n \n+\n+  /// This is a helper function for the __merge_sort_loop routines.\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _OutputIterator>\n+    _OutputIterator\n+    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t _InputIterator2 __first2, _InputIterator2 __last2,\n+\t\t _OutputIterator __result)\n+    {\n+      while (__first1 != __last1 && __first2 != __last2)\n+\t{\n+\t  if (*__first2 < *__first1)\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first2);\n+\t      ++__first2;\n+\t    }\n+\t  else\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first1);\n+\t      ++__first1;\n+\t    }\n+\t  ++__result;\n+\t}\n+      return _GLIBCXX_MOVE3(__first2, __last2,\n+\t\t\t    _GLIBCXX_MOVE3(__first1, __last1,\n+\t\t\t\t\t   __result));\n+    }\n+\n+  /// This is a helper function for the __merge_sort_loop routines.\n+  template<typename _InputIterator1, typename _InputIterator2,\n+\t   typename _OutputIterator, typename _Compare>\n+    _OutputIterator\n+    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,\n+\t\t _InputIterator2 __first2, _InputIterator2 __last2,\n+\t\t _OutputIterator __result, _Compare __comp)\n+    {\n+      while (__first1 != __last1 && __first2 != __last2)\n+\t{\n+\t  if (__comp(*__first2, *__first1))\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first2);\n+\t      ++__first2;\n+\t    }\n+\t  else\n+\t    {\n+\t      *__result = _GLIBCXX_MOVE(*__first1);\n+\t      ++__first1;\n+\t    }\n+\t  ++__result;\n+\t}\n+      return _GLIBCXX_MOVE3(__first2, __last2,\n+\t\t\t    _GLIBCXX_MOVE3(__first1, __last1,\n+\t\t\t\t\t   __result));\n+    }\n+\n   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,\n \t   typename _Distance>\n     void"}, {"sha": "aecdcb9c6de287ad2db236c9d77ff31c4a9b4b2f", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -641,7 +641,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  loop count will be known (and therefore a candidate for compiler\n    *  optimizations such as unrolling).\n    *\n-   *  Result may not be in the range [first,last).  Use move instead.  Note\n+   *  Result may not be in the range (first,last].  Use move instead.  Note\n    *  that the start of the output range may overlap [first,last).\n   */\n   template<typename _BI1, typename _BI2>"}, {"sha": "8b7b52e3f68ff8b40cd5bc0cf8128242bb9f1c48", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/49559.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F49559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F49559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F49559.cc?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+// XXX FIXME:  parallel-mode should deal correctly with moveable-only types\n+// per C++0x, at minimum smoothly fall back to serial.\n+#undef _GLIBCXX_PARALLEL\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, bidirectional_iterator_wrapper> Container;\n+\n+const int A[] = { 0, 1, 2, 3, 4, 5 };\n+const int N = 6;\n+\n+bool are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+// libstdc++/49559\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[6];\n+  std::copy(A, A + N, s1);\n+  Container con1(s1, s1 + N);\n+  std::inplace_merge(con1.begin(), con1.it(4), con1.end());\n+  VERIFY( s1[0] == 0 && s1[1] == 1 && s1[2] == 2\n+\t  && s1[3] == 3 && s1[4] == 4 && s1[5] == 5 );\n+  VERIFY( s1[0].valid && s1[1].valid && s1[2].valid\n+\t  && s1[3].valid && s1[4].valid && s1[5].valid );\n+\n+  rvalstruct s2[6];\n+  std::copy(A, A + N, s2);\n+  Container con2(s2, s2 + N);\n+  std::inplace_merge(con2.begin(), con2.it(4), con2.end(), are_ordered);\n+  VERIFY( s2[0] == 0 && s2[1] == 1 && s2[2] == 2\n+\t  && s2[3] == 3 && s2[4] == 4 && s2[5] == 5 );\n+  VERIFY( s2[0].valid && s2[1].valid && s2[2].valid\n+\t  && s2[3].valid && s2[4].valid && s2[5].valid );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7d14c295e9fc1b47f0188931b9eaad32422c46ea", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/moveable.cc", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable.cc?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -35,13 +35,59 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  int array[]={0,2,4,1,3,5};\n-  rvalstruct rv_array[6];\n-  std::copy(array, array + 6, rv_array);\n-  container con(rv_array, rv_array + 6);\n-  std::inplace_merge(con.begin(), con.it(3), con.end());\n-  VERIFY( rv_array[0] == 0 && rv_array[1] == 1 && rv_array[2] == 2\n-\t  && rv_array[3] == 3 && rv_array[4] == 4 && rv_array[5] == 5 );\n+  int array1[]={0,2,4,1,3,5};\n+  rvalstruct rv_array1[6];\n+  std::copy(array1, array1 + 6, rv_array1);\n+  container con1(rv_array1, rv_array1 + 6);\n+  std::inplace_merge(con1.begin(), con1.it(3), con1.end());\n+  VERIFY( rv_array1[0] == 0 && rv_array1[1] == 1 && rv_array1[2] == 2\n+\t  && rv_array1[3] == 3 && rv_array1[4] == 4 && rv_array1[5] == 5 );\n+\n+  int array2[]={0,2,4,5,1,3};\n+  rvalstruct rv_array2[6];\n+  std::copy(array2, array2 + 6, rv_array2);\n+  container con2(rv_array2, rv_array2 + 6);\n+  std::inplace_merge(con2.begin(), con2.it(4), con2.end());\n+  VERIFY( rv_array2[0] == 0 && rv_array2[1] == 1 && rv_array2[2] == 2\n+\t  && rv_array2[3] == 3 && rv_array2[4] == 4 && rv_array2[5] == 5 );\n+\n+  int array3[]={1,1,1,2,2,2};\n+  rvalstruct rv_array3[6];\n+  std::copy(array3, array3 + 6, rv_array3);\n+  container con3(rv_array3, rv_array3 + 6);\n+  std::inplace_merge(con3.begin(), con3.it(3), con3.end());\n+  VERIFY( rv_array3[0] == 1 && rv_array3[1] == 1 && rv_array3[2] == 1\n+\t  && rv_array3[3] == 2 && rv_array3[4] == 2 && rv_array3[5] == 2 );\n+\n+  int array4[]={1,1,1,1,2,2};\n+  rvalstruct rv_array4[6];\n+  std::copy(array4, array4 + 6, rv_array4);\n+  container con4(rv_array4, rv_array4 + 6);\n+  std::inplace_merge(con4.begin(), con4.it(4), con4.end());\n+  VERIFY( rv_array4[0] == 1 && rv_array4[1] == 1 && rv_array4[2] == 1\n+\t  && rv_array4[3] == 1 && rv_array4[4] == 2 && rv_array4[5] == 2 );\n+\n+  int array5[]={3,3,3,3};\n+  rvalstruct rv_array5[4];\n+  std::copy(array5, array5 + 4, rv_array5);\n+  container con5(rv_array5, rv_array5 + 4);\n+  std::inplace_merge(con5.begin(), con5.it(2), con5.end());\n+  VERIFY( rv_array5[0] == 3 && rv_array5[1] == 3 && rv_array5[2] == 3\n+\t  && rv_array5[3] == 3 );\n+\n+  int array6[]={3,3,3};\n+  rvalstruct rv_array6[3];\n+  std::copy(array6, array6 + 3, rv_array6);\n+  container con6(rv_array6, rv_array6 + 3);\n+  std::inplace_merge(con6.begin(), con6.it(0), con6.end());\n+  VERIFY( rv_array6[0] == 3 && rv_array6[1] == 3 && rv_array6[2] == 3 );\n+\n+  int array7[]={3,3};\n+  rvalstruct rv_array7[2];\n+  std::copy(array7, array7 + 2, rv_array7);\n+  container con7(rv_array7, rv_array7 + 2);\n+  std::inplace_merge(con7.begin(), con7.it(2), con7.end());\n+  VERIFY( rv_array7[0] == 3 && rv_array7[1] == 3 );\n }\n \n int "}, {"sha": "a3a898cd5f86508bd7c554bde2fcf4ba7c1ae8c0", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/moveable2.cc", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fmoveable2.cc?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,13 +39,59 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  int array[]={0,2,4,1,3,5};\n-  rvalstruct rv_array[6];\n-  std::copy(array, array + 6, rv_array);\n-  container con(rv_array, rv_array + 6);\n-  std::inplace_merge(con.begin(), con.it(3), con.end(), are_ordered);\n-  VERIFY( rv_array[0] == 0 && rv_array[1] == 1 && rv_array[2] == 2\n-\t  && rv_array[3] == 3 && rv_array[4] == 4 && rv_array[5] == 5 );\n+  int array1[]={0,2,4,1,3,5};\n+  rvalstruct rv_array1[6];\n+  std::copy(array1, array1 + 6, rv_array1);\n+  container con1(rv_array1, rv_array1 + 6);\n+  std::inplace_merge(con1.begin(), con1.it(3), con1.end(), are_ordered);\n+  VERIFY( rv_array1[0] == 0 && rv_array1[1] == 1 && rv_array1[2] == 2\n+\t  && rv_array1[3] == 3 && rv_array1[4] == 4 && rv_array1[5] == 5 );\n+\n+  int array2[]={0,2,4,5,1,3};\n+  rvalstruct rv_array2[6];\n+  std::copy(array2, array2 + 6, rv_array2);\n+  container con2(rv_array2, rv_array2 + 6);\n+  std::inplace_merge(con2.begin(), con2.it(4), con2.end(), are_ordered);\n+  VERIFY( rv_array2[0] == 0 && rv_array2[1] == 1 && rv_array2[2] == 2\n+\t  && rv_array2[3] == 3 && rv_array2[4] == 4 && rv_array2[5] == 5 );\n+\n+  int array3[]={1,1,1,2,2,2};\n+  rvalstruct rv_array3[6];\n+  std::copy(array3, array3 + 6, rv_array3);\n+  container con3(rv_array3, rv_array3 + 6);\n+  std::inplace_merge(con3.begin(), con3.it(3), con3.end(), are_ordered);\n+  VERIFY( rv_array3[0] == 1 && rv_array3[1] == 1 && rv_array3[2] == 1\n+\t  && rv_array3[3] == 2 && rv_array3[4] == 2 && rv_array3[5] == 2 );\n+\n+  int array4[]={1,1,1,1,2,2};\n+  rvalstruct rv_array4[6];\n+  std::copy(array4, array4 + 6, rv_array4);\n+  container con4(rv_array4, rv_array4 + 6);\n+  std::inplace_merge(con4.begin(), con4.it(4), con4.end(), are_ordered);\n+  VERIFY( rv_array4[0] == 1 && rv_array4[1] == 1 && rv_array4[2] == 1\n+\t  && rv_array4[3] == 1 && rv_array4[4] == 2 && rv_array4[5] == 2 );\n+\n+  int array5[]={3,3,3,3};\n+  rvalstruct rv_array5[4];\n+  std::copy(array5, array5 + 4, rv_array5);\n+  container con5(rv_array5, rv_array5 + 4);\n+  std::inplace_merge(con5.begin(), con5.it(2), con5.end(), are_ordered);\n+  VERIFY( rv_array5[0] == 3 && rv_array5[1] == 3 && rv_array5[2] == 3\n+\t  && rv_array5[3] == 3 );\n+\n+  int array6[]={3,3,3};\n+  rvalstruct rv_array6[3];\n+  std::copy(array6, array6 + 3, rv_array6);\n+  container con6(rv_array6, rv_array6 + 3);\n+  std::inplace_merge(con6.begin(), con6.it(0), con6.end(), are_ordered);\n+  VERIFY( rv_array6[0] == 3 && rv_array6[1] == 3 && rv_array6[2] == 3 );\n+\n+  int array7[]={3,3};\n+  rvalstruct rv_array7[2];\n+  std::copy(array7, array7 + 2, rv_array7);\n+  container con7(rv_array7, rv_array7 + 2);\n+  std::inplace_merge(con7.begin(), con7.it(2), con7.end(), are_ordered);\n+  VERIFY( rv_array7[0] == 3 && rv_array7[1] == 3 );\n }\n \n int "}, {"sha": "5445117935b74d63219ae6379ffa4561b74388fc", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/49559.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F49559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F49559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F49559.cc?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+\n+// XXX FIXME:  parallel-mode should deal correctly with moveable-only types\n+// per C++0x, at minimum smoothly fall back to serial.\n+#undef _GLIBCXX_PARALLEL\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+\n+typedef test_container<rvalstruct, random_access_iterator_wrapper> Container;\n+\n+const int A[] = { 10 };\n+const int N = 1;\n+\n+bool order(const rvalstruct& lhs, const rvalstruct& rhs)\n+{ return lhs < rhs; }\n+\n+// libstdc++/49559\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  rvalstruct s1[1];\n+  std::copy(A, A + 1, s1);\n+  Container con1(s1, s1 + 1);\n+  std::stable_sort(con1.begin(), con1.end());\n+  VERIFY( s1[0] == 10 );\n+  VERIFY( s1[0].valid );\n+\n+  rvalstruct s2[1];\n+  std::copy(A, A + 1, s2);\n+  Container con2(s2, s2 + 1);\n+  std::stable_sort(con2.begin(), con2.end(), order);\n+  VERIFY( s2[0] == 10 );\n+  VERIFY( s2[0].valid );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2234e8112a9632bf0c23477df1480ac106e7a332", "filename": "libstdc++-v3/testsuite/util/testsuite_rvalref.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848ca96f30746fc6972105de156656ce8c5ee586/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h?ref=848ca96f30746fc6972105de156656ce8c5ee586", "patch": "@@ -68,6 +68,7 @@ namespace __gnu_test\n     operator=(rvalstruct&& in)\n     {\n       bool test __attribute__((unused)) = true;\n+      VERIFY( this != &in );\n       VERIFY( in.valid == true );\n       val = in.val;\n       in.valid = false;"}]}