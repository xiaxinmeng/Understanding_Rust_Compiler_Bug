{"sha": "56517dda83af315590448610b4b6cd9d4f4d7527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY1MTdkZGE4M2FmMzE1NTkwNDQ4NjEwYjRiNmNkOWQ0ZjRkNzUyNw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-10-30T13:27:10Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-10-30T13:27:10Z"}, "message": "[Trivial] tree-sra.c: A few comment fixes/additions.\n\n    \n\t* tree-sra.c (scalarizable_type_p): Comment variable-length arrays.\n\t(completely_scalarize): Comment zero-length arrays.\n\t(get_access_replacement): Correct comment re. precondition.\n\nFrom-SVN: r229577", "tree": {"sha": "1733c96c8fbc3c1388b70def1f87e934230e3d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1733c96c8fbc3c1388b70def1f87e934230e3d50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56517dda83af315590448610b4b6cd9d4f4d7527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56517dda83af315590448610b4b6cd9d4f4d7527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56517dda83af315590448610b4b6cd9d4f4d7527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56517dda83af315590448610b4b6cd9d4f4d7527/comments", "author": null, "committer": null, "parents": [{"sha": "2ef543e47016ce97fabb14dc3cba52f86e8f4a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef543e47016ce97fabb14dc3cba52f86e8f4a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef543e47016ce97fabb14dc3cba52f86e8f4a16"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "7178c5aeec33ea7df6822ebc8b4759754a30a7c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56517dda83af315590448610b4b6cd9d4f4d7527/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56517dda83af315590448610b4b6cd9d4f4d7527/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56517dda83af315590448610b4b6cd9d4f4d7527", "patch": "@@ -1,3 +1,9 @@\n+2015-10-30  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* tree-sra.c (scalarizable_type_p): Comment variable-length arrays.\n+\t(completely_scalarize): Comment zero-length arrays.\n+\t(get_access_replacement): Correct comment re. precondition.\n+\n 2015-10-30  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n \n \t* config/i386/i386.c (get_builtin_code_for_version): Set priority"}, {"sha": "82c58f0ae3a71dcace2f9c39e6c76d4392108c05", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56517dda83af315590448610b4b6cd9d4f4d7527/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56517dda83af315590448610b4b6cd9d4f4d7527/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=56517dda83af315590448610b4b6cd9d4f4d7527", "patch": "@@ -956,6 +956,7 @@ scalarizable_type_p (tree type)\n \t;\n       else if ((tree_to_shwi (TYPE_SIZE (type)) <= 0)\n \t       || !tree_fits_shwi_p (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n+\t/* Variable-length array, do not allow scalarization.  */\n \treturn false;\n \n       tree elem = TREE_TYPE (type);\n@@ -1005,6 +1006,7 @@ completely_scalarize (tree base, tree decl_type, HOST_WIDE_INT offset, tree ref)\n \ttree minidx = TYPE_MIN_VALUE (TYPE_DOMAIN (decl_type));\n \tgcc_assert (TREE_CODE (minidx) == INTEGER_CST);\n \ttree maxidx = TYPE_MAX_VALUE (TYPE_DOMAIN (decl_type));\n+\t/* Skip (some) zero-length arrays; others have MAXIDX == MINIDX - 1.  */\n \tif (maxidx)\n \t  {\n \t    gcc_assert (TREE_CODE (maxidx) == INTEGER_CST);\n@@ -2146,7 +2148,7 @@ create_access_replacement (struct access *access)\n   return repl;\n }\n \n-/* Return ACCESS scalar replacement, create it if it does not exist yet.  */\n+/* Return ACCESS scalar replacement, which must exist.  */\n \n static inline tree\n get_access_replacement (struct access *access)"}]}