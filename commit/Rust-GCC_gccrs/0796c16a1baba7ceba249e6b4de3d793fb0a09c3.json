{"sha": "0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5NmMxNmExYmFiYTdjZWJhMjQ5ZTZiNGRlM2Q3OTNmYjBhMDljMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-03-19T14:54:26Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-03-19T14:54:26Z"}, "message": "s390.c (s390_preferred_reload_class): Do not force constants to the pool unless necessary.\n\n\t* config/s390/s390.c (s390_preferred_reload_class): Do not\n\tforce constants to the pool unless necessary.\n\t(s390_decompose_address): Prefer to use pointer as base,\n\tnot index register.\n\t* config/s390/s390.md (\"*tsthiCCT_only\"): Remove '?' from\n\tQ alternative.\n\t(\"*movdi_64\", \"*movsi\", \"movhi\", \"movqi_64\", \"movqi\",\n\t\"*movdf_64\", \"*movsf\"): Add '?' to Q->Q alternatives.\n\t(\"*extractqi\", \"*extracthi\", \"*zero_extendhisi2_31\",\n\t\"*zero_extendqisi2_31\", \"*zero_extendqihi2_31\",\n\t\"*adddi3_31\", \"*subdi3_31\"): Do not set \"type\" attribute.\n\nFrom-SVN: r64583", "tree": {"sha": "8e3ca04f09509118632659a7c7f98aa2be7a0a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e3ca04f09509118632659a7c7f98aa2be7a0a86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/comments", "author": null, "committer": null, "parents": [{"sha": "d9b40e8dbeca786fec7b2f01af13be0e8e892c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b40e8dbeca786fec7b2f01af13be0e8e892c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b40e8dbeca786fec7b2f01af13be0e8e892c39"}], "stats": {"total": 100, "additions": 57, "deletions": 43}, "files": [{"sha": "5a0fd43f336295dee54ab6a3f3b3d78b65eedc3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "patch": "@@ -1,3 +1,17 @@\n+2003-03-18  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_preferred_reload_class): Do not\n+\tforce constants to the pool unless necessary.\n+\t(s390_decompose_address): Prefer to use pointer as base,\n+\tnot index register.\n+\t* config/s390/s390.md (\"*tsthiCCT_only\"): Remove '?' from\n+\tQ alternative.\n+\t(\"*movdi_64\", \"*movsi\", \"movhi\", \"movqi_64\", \"movqi\", \n+\t\"*movdf_64\", \"*movsf\"): Add '?' to Q->Q alternatives.\n+\t(\"*extractqi\", \"*extracthi\", \"*zero_extendhisi2_31\",\n+\t\"*zero_extendqisi2_31\", \"*zero_extendqihi2_31\",\n+\t\"*adddi3_31\", \"*subdi3_31\"): Do not set \"type\" attribute.\n+\n Wed Mar 19 11:28:45 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.h (machine_function): New fields use_fast_prologue_epilogue."}, {"sha": "0e5d0f682ac7850e21834b0ab6363e5de7779fd8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "patch": "@@ -1674,23 +1674,14 @@ s390_preferred_reload_class (op, class)\n   switch (GET_CODE (op))\n     {\n       /* Constants we cannot reload must be forced into the\n-\t literal pool.  For constants we *could* handle directly,\n-\t it might still be preferable to put them in the pool and\n-\t use a memory-to-memory instruction.\n-\n-\t However, try to avoid needlessly allocating a literal\n-\t pool in a routine that wouldn't otherwise need any.\n-\t Heuristically, we assume that 64-bit leaf functions\n-\t typically don't need a literal pool, all others do.  */\n+\t literal pool.  */\n+\n       case CONST_DOUBLE:\n       case CONST_INT:\n-\tif (!legitimate_reload_constant_p (op))\n-\t  return NO_REGS;\n-\n-\tif (TARGET_64BIT && current_function_is_leaf)\n+\tif (legitimate_reload_constant_p (op))\n \t  return class;\n-\n-\treturn NO_REGS;\n+\telse\n+\t  return NO_REGS;\n \n       /* If a symbolic constant or a PLUS is reloaded,\n \t it is most likely being used as an address, so\n@@ -1879,6 +1870,22 @@ s390_decompose_address (addr, out)\n     disp = addr;\t\t/* displacement */\n \n \n+  /* Prefer to use pointer as base, not index.  */\n+  if (base && indx)\n+    {\n+      int base_ptr = GET_CODE (base) == UNSPEC\n+\t\t     || (REG_P (base) && REG_POINTER (base));\n+      int indx_ptr = GET_CODE (indx) == UNSPEC\n+\t\t     || (REG_P (indx) && REG_POINTER (indx));\n+\n+      if (!base_ptr && indx_ptr)\n+\t{\n+\t  rtx tmp = base;\n+\t  base = indx;\n+\t  indx = tmp;\n+\t}\n+    }\n+\n   /* Validate base register.  */\n   if (base)\n     {"}, {"sha": "370dceba5e14b16419349ad1d54ef238bc99a2a9", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0796c16a1baba7ceba249e6b4de3d793fb0a09c3/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=0796c16a1baba7ceba249e6b4de3d793fb0a09c3", "patch": "@@ -608,7 +608,7 @@\n \n (define_insn \"*tsthiCCT_cconly\"\n   [(set (reg 33)\n-        (compare (match_operand:HI 0 \"nonimmediate_operand\" \"?Q,d\")\n+        (compare (match_operand:HI 0 \"nonimmediate_operand\" \"Q,d\")\n                  (match_operand:HI 1 \"const0_operand\" \"\")))\n    (clobber (match_scratch:HI 2 \"=d,X\"))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n@@ -1028,8 +1028,8 @@\n     (set_attr \"type\"    \"larl\")])\n \n (define_insn \"*movdi_64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,m,!*f,!*f,!m,Q\")\n-        (match_operand:DI 1 \"general_operand\" \"d,m,d,*f,m,*f,Q\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,m,!*f,!*f,!m,?Q\")\n+        (match_operand:DI 1 \"general_operand\" \"d,m,d,*f,m,*f,?Q\"))]\n   \"TARGET_64BIT\"\n   \"@\n    lgr\\\\t%0,%1\n@@ -1187,8 +1187,8 @@\n   [(set_attr \"op_type\" \"RI\")])\n \n (define_insn \"*movsi\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,m,!*f,!*f,!m,Q\")\n-        (match_operand:SI 1 \"general_operand\" \"d,m,d,*f,m,*f,Q\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,m,!*f,!*f,!m,?Q\")\n+        (match_operand:SI 1 \"general_operand\" \"d,m,d,*f,m,*f,?Q\"))]\n   \"\"\n   \"@\n    lr\\\\t%0,%1\n@@ -1217,8 +1217,8 @@\n ;\n \n (define_insn \"movhi\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,m,Q\")\n-        (match_operand:HI 1 \"general_operand\" \"d,n,m,d,Q\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,m,?Q\")\n+        (match_operand:HI 1 \"general_operand\" \"d,n,m,d,?Q\"))]\n   \"\"\n   \"@\n    lr\\\\t%0,%1\n@@ -1244,8 +1244,8 @@\n ;\n \n (define_insn \"movqi_64\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,m,Q,Q\")\n-        (match_operand:QI 1 \"general_operand\" \"d,n,m,d,n,Q\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,m,Q,?Q\")\n+        (match_operand:QI 1 \"general_operand\" \"d,n,m,d,n,?Q\"))]\n   \"TARGET_64BIT\"\n   \"@\n    lr\\\\t%0,%1\n@@ -1258,8 +1258,8 @@\n    (set_attr \"type\" \"lr,*,*,store,store,cs\")])\n \n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,m,Q,Q\")\n-        (match_operand:QI 1 \"general_operand\" \"d,n,m,d,n,Q\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,m,Q,?Q\")\n+        (match_operand:QI 1 \"general_operand\" \"d,n,m,d,n,?Q\"))]\n   \"\"\n   \"@\n    lr\\\\t%0,%1\n@@ -1338,8 +1338,8 @@\n }\")\n \n (define_insn \"*movdf_64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,m,d,d,m,Q\")\n-        (match_operand:DF 1 \"general_operand\" \"f,m,f,d,m,d,Q\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,m,d,d,m,?Q\")\n+        (match_operand:DF 1 \"general_operand\" \"f,m,f,d,m,d,?Q\"))]\n   \"TARGET_64BIT\"\n   \"@\n    ldr\\\\t%0,%1\n@@ -1438,8 +1438,8 @@\n }\")\n \n (define_insn \"*movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,m,d,d,m,Q\")\n-        (match_operand:SF 1 \"general_operand\" \"f,m,f,d,m,d,Q\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,m,d,d,m,?Q\")\n+        (match_operand:SF 1 \"general_operand\" \"f,m,f,d,m,d,?Q\"))]\n   \"\"\n   \"@\n    ler\\\\t%0,%1\n@@ -2086,8 +2086,7 @@\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   operands[1] = change_address (operands[1], QImode, 0);\n }\"\n-  [(set_attr \"type\"    \"o2\")\n-   (set_attr \"atype\"   \"agen\")])\n+  [(set_attr \"atype\"   \"agen\")])\n \n (define_insn_and_split \"*extracthi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -2108,8 +2107,7 @@\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   operands[1] = change_address (operands[1], HImode, 0);\n }\"\n-  [(set_attr \"type\"    \"o2\")\n-   (set_attr \"atype\"   \"agen\")])\n+  [(set_attr \"atype\"   \"agen\")])\n \n ;\n ; extendsidi2 instruction pattern(s).\n@@ -2404,8 +2402,7 @@\n     [(set (strict_low_part (match_dup 2)) (match_dup 1))\n      (clobber (reg:CC 33))])]\n   \"operands[2] = gen_lowpart (HImode, operands[0]);\"\n-  [(set_attr \"type\" \"o2\")\n-   (set_attr \"atype\" \"agen\")])\n+  [(set_attr \"atype\" \"agen\")])\n  \n ;\n ; zero_extendqisi2 instruction pattern(s).\n@@ -2439,8 +2436,7 @@\n   [(set (match_dup 0) (const_int 0))\n    (set (strict_low_part (match_dup 2)) (match_dup 1))]\n   \"operands[2] = gen_lowpart (QImode, operands[0]);\"\n-  [(set_attr \"type\" \"o2\")\n-   (set_attr \"atype\" \"agen\")])\n+  [(set_attr \"atype\" \"agen\")])\n  \n ;\n ; zero_extendqihi2 instruction pattern(s).\n@@ -2474,8 +2470,7 @@\n   [(set (match_dup 0) (const_int 0))\n    (set (strict_low_part (match_dup 2)) (match_dup 1))]\n   \"operands[2] = gen_lowpart (QImode, operands[0]);\"\n-  [(set_attr \"type\" \"o2\")\n-   (set_attr \"atype\" \"agen\")])\n+  [(set_attr \"atype\" \"agen\")])\n \n \n ;\n@@ -3067,8 +3062,7 @@\n    operands[7] = operand_subword (operands[1], 1, 1, DImode);\n    operands[8] = operand_subword (operands[2], 1, 1, DImode);\n    operands[9] = gen_label_rtx ();\"\n-  [(set_attr \"op_type\"  \"NN\")\n-   (set_attr \"type\"     \"o3\")])\n+  [(set_attr \"op_type\"  \"NN\")])\n \n (define_expand \"adddi3\"\n   [(parallel\n@@ -3532,8 +3526,7 @@\n    operands[7] = operand_subword (operands[1], 1, 1, DImode);\n    operands[8] = operand_subword (operands[2], 1, 1, DImode);\n    operands[9] = gen_label_rtx ();\"\n-  [(set_attr \"op_type\"  \"NN\")\n-   (set_attr \"type\"     \"o3\")])\n+  [(set_attr \"op_type\"  \"NN\")])\n \n (define_expand \"subdi3\"\n   [(parallel"}]}