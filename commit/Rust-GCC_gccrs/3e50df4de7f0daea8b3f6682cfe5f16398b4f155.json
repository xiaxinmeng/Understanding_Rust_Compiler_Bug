{"sha": "3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1MGRmNGRlN2YwZGFlYThiM2Y2NjgyY2ZlNWYxNjM5OGI0ZjE1NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-07-31T09:33:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:33:10Z"}, "message": "sem_ch13.adb (Build_Invariant_Procedure): If body of procedure is already present, nothing to do.\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Build_Invariant_Procedure): If body of procedure\n\tis already present, nothing to do.\n\t* exp_ch3.adb (Build_Component_Invariant_Call): For an access\n\tcomponent, check whether the access type has an invariant before\n\tchecking the designated type.\n\t(Build_Record_Invariant_Proc): Change suffix of generated\n\tname to prevent ambiguity when record type has invariants\n\tin addition to those of components, and two subprograms are\n\tconstructed. Consistent with handling of array types.\n\t(Insert_Component_Invariant_Checks): Build invariant procedure\n\tbody when one has not been created yet, in the case of composite\n\ttypes that are completions and whose full declarations carry\n\tinvariants.\n\nFrom-SVN: r213322", "tree": {"sha": "0b095b8f157d221a4c09861718672792dae5468a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b095b8f157d221a4c09861718672792dae5468a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a793528482910aca0f7c840ee5bdd5e722b0528a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a793528482910aca0f7c840ee5bdd5e722b0528a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a793528482910aca0f7c840ee5bdd5e722b0528a"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "0d3638d98bdc376a3a1e14f997ba173dc56dd59c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "patch": "@@ -1,3 +1,19 @@\n+2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Invariant_Procedure): If body of procedure\n+\tis already present, nothing to do.\n+\t* exp_ch3.adb (Build_Component_Invariant_Call): For an access\n+\tcomponent, check whether the access type has an invariant before\n+\tchecking the designated type.\n+\t(Build_Record_Invariant_Proc): Change suffix of generated\n+\tname to prevent ambiguity when record type has invariants\n+\tin addition to those of components, and two subprograms are\n+\tconstructed. Consistent with handling of array types.\n+\t(Insert_Component_Invariant_Checks): Build invariant procedure\n+\tbody when one has not been created yet, in the case of composite\n+\ttypes that are completions and whose full declarations carry\n+\tinvariants.\n+\n 2014-07-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* gnat_rm.texi: Minor doc fixes."}, {"sha": "520f9329bd3347714506532d7a1be1bd7ef47cd0", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "patch": "@@ -56,6 +56,7 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Ch13; use Sem_Ch13;\n with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n with Sem_Mech; use Sem_Mech;\n@@ -3704,8 +3705,21 @@ package body Exp_Ch3 is\n              Selector_Name => New_Occurrence_Of (Comp, Loc));\n \n          if Is_Access_Type (Typ) then\n-            Sel_Comp := Make_Explicit_Dereference (Loc, Sel_Comp);\n-            Typ := Designated_Type (Typ);\n+\n+            --  If the access component designates a type with an invariant,\n+            --  the check applies to the designated object. The access type\n+            --  itself may have an invariant, in which case it applies to the\n+            --  access value directly.\n+\n+            --  Note: we are assuming that invariants will not occur on both\n+            --  the access type and the type that it designates. This is not\n+            --  really justified but it is hard to imagine that this case will\n+            --  ever cause trouble ???\n+\n+            if not (Has_Invariants (Typ)) then\n+               Sel_Comp := Make_Explicit_Dereference (Loc, Sel_Comp);\n+               Typ := Designated_Type (Typ);\n+            end if;\n          end if;\n \n          Call :=\n@@ -3822,9 +3836,14 @@ package body Exp_Ch3 is\n          return Empty;\n       end if;\n \n+      --  The name of the invariant procedure reflects the fact that the\n+      --  checks correspond to invariants on the component types. The\n+      --  record type itself may have invariants that will create a separate\n+      --  procedure whose name carries the Invariant suffix.\n+\n       Proc_Id :=\n         Make_Defining_Identifier (Loc,\n-           Chars => New_External_Name (Chars (R_Type), \"Invariant\"));\n+           Chars => New_External_Name (Chars (R_Type), \"CInvariant\"));\n \n       Proc_Body :=\n         Make_Subprogram_Body (Loc,\n@@ -8045,14 +8064,15 @@ package body Exp_Ch3 is\n \n          else\n \n-            --  Find already created invariant body, insert body of component\n-            --  invariant proc in it, and add call after other checks.\n+            --  Find already created invariant subprogram, insert body of\n+            --  component invariant proc in its body, and add call after\n+            --  other checks.\n \n             declare\n                Bod : Node_Id;\n                Inv_Id : constant Entity_Id := Invariant_Procedure (Typ);\n                Call   : constant Node_Id :=\n-                 Make_Procedure_Call_Statement (Loc,\n+                 Make_Procedure_Call_Statement (Sloc (N),\n                    Name => New_Occurrence_Of (Proc_Id, Loc),\n                    Parameter_Associations =>\n                      New_List\n@@ -8070,8 +8090,22 @@ package body Exp_Ch3 is\n                   Next (Bod);\n                end loop;\n \n+               --  If the body is not found, it is the case of an invariant\n+               --  appearing on a full declaration in a private part, in\n+               --  which case the type has been frozen but the invariant\n+               --  procedure for the composite type not created yet. Create\n+               --  body now.\n+\n+               if No (Bod) then\n+                  Build_Invariant_Procedure (Typ, Parent (Current_Scope));\n+                  Bod := Unit_Declaration_Node\n+                    (Corresponding_Body (Unit_Declaration_Node (Inv_Id)));\n+               end if;\n+\n                Append_To (Declarations (Bod), Proc);\n                Append_To (Statements (Handled_Statement_Sequence (Bod)), Call);\n+               Analyze (Proc);\n+               Analyze (Call);\n             end;\n          end if;\n       end if;"}, {"sha": "7454eaefcf38a4aad4b7d791a9020bf2900e228e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e50df4de7f0daea8b3f6682cfe5f16398b4f155/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "patch": "@@ -7485,8 +7485,22 @@ package body Sem_Ch13 is\n          SId := Invariant_Procedure (Typ);\n       end if;\n \n+      --  If the body is already present, nothing to do. This will occur when\n+      --  the type is already frozen, which is the case when the invariant\n+      --  appears in a private part, and the freezing takes place before the\n+      --  final pass over full declarations.\n+      --  See exp_ch3.Insert_Component_Invariant_Checks for details.\n+\n       if Present (SId) then\n          PDecl := Unit_Declaration_Node (SId);\n+\n+         if Present (PDecl)\n+           and then Nkind (PDecl) = N_Subprogram_Declaration\n+           and then Present (Corresponding_Body (PDecl))\n+         then\n+            return;\n+         end if;\n+\n       else\n          PDecl := Build_Invariant_Procedure_Declaration (Typ);\n       end if;"}]}