{"sha": "c6540bdeb4a50fadc96f5b0087cca5602ad04845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1NDBiZGViNGE1MGZhZGM5NmY1YjAwODdjY2E1NjAyYWQwNDg0NQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-07-09T23:04:06Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-07-09T23:04:06Z"}, "message": "tree-scalar-evolution.c (scev_const_prop): Add arguments to force_gimple_operand_bsi.\n\n\t* tree-scalar-evolution.c (scev_const_prop): Add arguments to\n\tforce_gimple_operand_bsi.\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr,\n\trewrite_use_compare): Ditto.\n\t* tree-ssa-address.c (gimplify_mem_ref_parts, create_mem_ref):\n\tDitto.\n\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Ditto.\n\t* tree-ssa-loop-prefetch.c (issue_prefetch_ref): Ditto.\n\t* lambda-code.c (replace_uses_equiv_to_x_with_y): Ditto.\n\t* tree-profile.c (prepare_instrumented_value,\n\ttree_gen_interval_profiler, tree_gen_pow2_profiler,\n\ttree_gen_one_value_profiler, tree_gen_ic_profiler,\n\ttree_gen_ic_func_profiler, tree_gen_average_profiler,\n\ttree_gen_ior_profiler): Ditto.\n\t* tree-ssa-reassoc.c (negate_value): Ditto.\n\t* matrix-reorg.c (transform_access_sites, transform_allocation_sites):\n\tUse force_gimple_operand_bsi.\n\t* tree-vect-transform.c (vect_update_ivs_after_vectorizer): Ditto.\n\t* tree-if-conv.c (add_to_dst_predicate_list,\n\tfind_phi_replacement_condition): Ditto.\n\t* gimplify.c (force_gimple_operand_bsi): Add before and m arguments.\n\tCall mark_symbols_for_renaming for new statements.\n\t* tree-flow.h (force_gimple_operand_bsi): Declaration changed.\n\nFrom-SVN: r126500", "tree": {"sha": "e5a7ffd19651ec8e341a482d405d293a6e720838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5a7ffd19651ec8e341a482d405d293a6e720838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6540bdeb4a50fadc96f5b0087cca5602ad04845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6540bdeb4a50fadc96f5b0087cca5602ad04845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6540bdeb4a50fadc96f5b0087cca5602ad04845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6540bdeb4a50fadc96f5b0087cca5602ad04845/comments", "author": null, "committer": null, "parents": [{"sha": "452ba14de17872cf0d51da73f6faa6b2f3668753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452ba14de17872cf0d51da73f6faa6b2f3668753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452ba14de17872cf0d51da73f6faa6b2f3668753"}], "stats": {"total": 219, "additions": 116, "deletions": 103}, "files": [{"sha": "db3a99c1dfa00283bc358aaf72331fe26416a797", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -1,3 +1,29 @@\n+2007-07-10  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-scalar-evolution.c (scev_const_prop): Add arguments to\n+\tforce_gimple_operand_bsi.\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr,\n+\trewrite_use_compare): Ditto.\n+\t* tree-ssa-address.c (gimplify_mem_ref_parts, create_mem_ref):\n+\tDitto.\n+\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Ditto.\n+\t* tree-ssa-loop-prefetch.c (issue_prefetch_ref): Ditto.\n+\t* lambda-code.c (replace_uses_equiv_to_x_with_y): Ditto.\n+\t* tree-profile.c (prepare_instrumented_value,\n+\ttree_gen_interval_profiler, tree_gen_pow2_profiler,\n+\ttree_gen_one_value_profiler, tree_gen_ic_profiler,\n+\ttree_gen_ic_func_profiler, tree_gen_average_profiler,\n+\ttree_gen_ior_profiler): Ditto.\n+\t* tree-ssa-reassoc.c (negate_value): Ditto.\n+\t* matrix-reorg.c (transform_access_sites, transform_allocation_sites):\n+\tUse force_gimple_operand_bsi.\n+\t* tree-vect-transform.c (vect_update_ivs_after_vectorizer): Ditto.\n+\t* tree-if-conv.c (add_to_dst_predicate_list,\n+\tfind_phi_replacement_condition): Ditto.\n+\t* gimplify.c (force_gimple_operand_bsi): Add before and m arguments.\n+\tCall mark_symbols_for_renaming for new statements.\n+\t* tree-flow.h (force_gimple_operand_bsi): Declaration changed.\n+\n 2007-07-10  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* cfghooks.c (remove_edge): New function."}, {"sha": "3b5fa895238bc573d5035dd9d9ce0ec65b9c5092", "filename": "gcc/gimplify.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -6648,17 +6648,34 @@ force_gimple_operand (tree expr, tree *stmts, bool simple, tree var)\n }\n \n /* Invokes force_gimple_operand for EXPR with parameters SIMPLE_P and VAR.  If\n-   some statements are produced, emits them before BSI.  */\n+   some statements are produced, emits them at BSI.  If BEFORE is true.\n+   the statements are appended before BSI, otherwise they are appended after\n+   it.  M specifies the way BSI moves after insertion (BSI_SAME_STMT or\n+   BSI_CONTINUE_LINKING are the usual values).  */\n \n tree\n force_gimple_operand_bsi (block_stmt_iterator *bsi, tree expr,\n-\t\t\t  bool simple_p, tree var)\n+\t\t\t  bool simple_p, tree var, bool before,\n+\t\t\t  enum bsi_iterator_update m)\n {\n   tree stmts;\n \n   expr = force_gimple_operand (expr, &stmts, simple_p, var);\n   if (stmts)\n-    bsi_insert_before (bsi, stmts, BSI_SAME_STMT);\n+    {\n+      if (gimple_in_ssa_p (cfun))\n+\t{\n+\t  tree_stmt_iterator tsi;\n+\n+\t  for (tsi = tsi_start (stmts); !tsi_end_p (tsi); tsi_next (&tsi))\n+\t    mark_symbols_for_renaming (tsi_stmt (tsi));\n+\t}\n+\n+      if (before)\n+\tbsi_insert_before (bsi, stmts, m);\n+      else\n+\tbsi_insert_after (bsi, stmts, m);\n+    }\n \n   return expr;\n }"}, {"sha": "40c61759698de98723aad2210f9eb7decc8d3a1f", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -2058,7 +2058,8 @@ replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x,\n \t which sets Y.  */\n       var = create_tmp_var (TREE_TYPE (use), \"perfecttmp\");\n       add_referenced_var (var);\n-      val = force_gimple_operand_bsi (firstbsi, val, false, NULL);\n+      val = force_gimple_operand_bsi (firstbsi, val, false, NULL,\n+\t\t\t\t      true, BSI_SAME_STMT);\n       setstmt = build_gimple_modify_stmt (var, val);\n       var = make_ssa_name (var, setstmt);\n       GIMPLE_STMT_OPERAND (setstmt, 0) = var;"}, {"sha": "5b54fe0d81e719e82ff8450f634e19e5eb0cb803", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -1708,7 +1708,6 @@ compute_offset (HOST_WIDE_INT orig, HOST_WIDE_INT new, tree result)\n static int\n transform_access_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n {\n-  tree stmts;\n   block_stmt_iterator bsi;\n   struct matrix_info *mi = *slot;\n   int min_escape_l = mi->min_indirect_level_escape;\n@@ -1831,19 +1830,10 @@ transform_access_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n \t\t  total_elements = new_offset;\n \t\t  if (new_offset != offset)\n \t\t    {\n-\t\t      tmp1 =\n-\t\t\tforce_gimple_operand (total_elements, &stmts, true,\n-\t\t\t\t\t      NULL);\n-\t\t      if (stmts)\n-\t\t\t{\n-\t\t\t  tree_stmt_iterator tsi;\n-\n-\t\t\t  for (tsi = tsi_start (stmts); !tsi_end_p (tsi);\n-\t\t\t       tsi_next (&tsi))\n-\t\t\t    mark_symbols_for_renaming (tsi_stmt (tsi));\n-\t\t\t  bsi = bsi_for_stmt (acc_info->stmt);\n-\t\t\t  bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);\n-\t\t\t}\n+\t\t      bsi = bsi_for_stmt (acc_info->stmt);\n+\t\t      tmp1 = force_gimple_operand_bsi (&bsi, total_elements,\n+\t\t\t\t\t\t       true, NULL,\n+\t\t\t\t\t\t       true, BSI_SAME_STMT);\n \t\t    }\n \t\t  else\n \t\t    tmp1 = offset;\n@@ -1855,18 +1845,10 @@ transform_access_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n \t      num_elements =\n \t\tfold_build2 (MULT_EXPR, sizetype, fold_convert (sizetype, acc_info->index),\n \t\t\t    fold_convert (sizetype, d_size));\n-\t      tmp1 = force_gimple_operand (num_elements, &stmts, true, NULL);\n \t      add_referenced_var (d_size);\n-\t      if (stmts)\n-\t\t{\n-\t\t  tree_stmt_iterator tsi;\n-\n-\t\t  for (tsi = tsi_start (stmts); !tsi_end_p (tsi);\n-\t\t       tsi_next (&tsi))\n-\t\t    mark_symbols_for_renaming (tsi_stmt (tsi));\n-\t\t  bsi = bsi_for_stmt (acc_info->stmt);\n-\t\t  bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);\n-\t\t}\n+\t      bsi = bsi_for_stmt (acc_info->stmt);\n+\t      tmp1 = force_gimple_operand_bsi (&bsi, num_elements, true,\n+\t\t\t\t\t       NULL, true, BSI_SAME_STMT);\n \t    }\n \t  /* Replace the offset if needed.  */\n \t  if (tmp1 != offset)\n@@ -1942,7 +1924,7 @@ transform_allocation_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n {\n   int i;\n   struct matrix_info *mi;\n-  tree type, call_stmt_0, malloc_stmt, oldfn, stmts, prev_dim_size, use_stmt;\n+  tree type, call_stmt_0, malloc_stmt, oldfn, prev_dim_size, use_stmt;\n   struct cgraph_node *c_node;\n   struct cgraph_edge *e;\n   block_stmt_iterator bsi;\n@@ -2069,7 +2051,6 @@ transform_allocation_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n     {\n       tree dim_size, dim_var, tmp;\n       tree d_type_size;\n-      tree_stmt_iterator tsi;\n \n       /* Now put the size expression in a global variable and initialize it to\n          the size expression before the malloc of level 0.  */\n@@ -2099,20 +2080,13 @@ transform_allocation_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n \n \t  dim_size = fold_build2 (MULT_EXPR, type, dim_size, prev_dim_size);\n \t}\n-      dim_size = force_gimple_operand (dim_size, &stmts, true, NULL);\n-      if (stmts)\n-\t{\n-\t  for (tsi = tsi_start (stmts); !tsi_end_p (tsi); tsi_next (&tsi))\n-\t    mark_symbols_for_renaming (tsi_stmt (tsi));\n-\t  bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);\n-\t  bsi = bsi_for_stmt (call_stmt_0);\n-\t}\n+      dim_size = force_gimple_operand_bsi (&bsi, dim_size, true, NULL,\n+\t\t\t\t\t   true, BSI_SAME_STMT);\n       /* GLOBAL_HOLDING_THE_SIZE = DIM_SIZE.  */\n       tmp = fold_build2 (GIMPLE_MODIFY_STMT, type, dim_var, dim_size);\n       GIMPLE_STMT_OPERAND (tmp, 0) = dim_var;\n       mark_symbols_for_renaming (tmp);\n-      bsi_insert_before (&bsi, tmp, BSI_NEW_STMT);\n-      bsi = bsi_for_stmt (call_stmt_0);\n+      bsi_insert_before (&bsi, tmp, BSI_SAME_STMT);\n \n       prev_dim_size = mi->dimension_size[i] = dim_var;\n     }\n@@ -2122,17 +2096,8 @@ transform_allocation_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n   malloc_stmt = GIMPLE_STMT_OPERAND (call_stmt_0, 1);\n   c_node = cgraph_node (mi->allocation_function_decl);\n   old_size_0 = CALL_EXPR_ARG (malloc_stmt, 0);\n-  bsi = bsi_for_stmt (call_stmt_0);\n-  tmp = force_gimple_operand (mi->dimension_size[0], &stmts, true, NULL);\n-  if (stmts)\n-    {\n-      tree_stmt_iterator tsi;\n-\n-      for (tsi = tsi_start (stmts); !tsi_end_p (tsi); tsi_next (&tsi))\n-\tmark_symbols_for_renaming (tsi_stmt (tsi));\n-      bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);\n-      bsi = bsi_for_stmt (call_stmt_0);\n-    }\n+  tmp = force_gimple_operand_bsi (&bsi, mi->dimension_size[0], true,\n+\t\t\t\t  NULL, true, BSI_SAME_STMT);\n   if (TREE_CODE (old_size_0) == SSA_NAME)\n     {\n       FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, old_size_0)"}, {"sha": "51a03ba604f4de1bd6f4557bd2890e65f9170c14", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -1126,7 +1126,8 @@ extern void register_jump_thread (edge, edge);\n \n /* In gimplify.c  */\n tree force_gimple_operand (tree, tree *, bool, tree);\n-tree force_gimple_operand_bsi (block_stmt_iterator *, tree, bool, tree);\n+tree force_gimple_operand_bsi (block_stmt_iterator *, tree, bool, tree,\n+\t\t\t       bool, enum bsi_iterator_update);\n \n /* In tree-ssa-structalias.c */\n bool find_what_p_points_to (tree);"}, {"sha": "b18de42fd3e0831a8f3fcfcb59091b1d9d104a79", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -637,17 +637,12 @@ add_to_dst_predicate_list (struct loop * loop, edge e,\n     {\n       tree tmp;\n       tree tmp_stmt = NULL_TREE;\n-      tree tmp_stmts1 = NULL_TREE;\n-      tree tmp_stmts2 = NULL_TREE;\n-      prev_cond = force_gimple_operand (unshare_expr (prev_cond),\n-\t\t\t\t\t&tmp_stmts1, true, NULL);\n-      if (tmp_stmts1)\n-        bsi_insert_before (bsi, tmp_stmts1, BSI_SAME_STMT);\n-\n-      cond = force_gimple_operand (unshare_expr (cond),\n-\t\t\t\t   &tmp_stmts2, true, NULL);\n-      if (tmp_stmts2)\n-        bsi_insert_before (bsi, tmp_stmts2, BSI_SAME_STMT);\n+\n+      prev_cond = force_gimple_operand_bsi (bsi, unshare_expr (prev_cond),\n+\t\t\t\t\t    true, NULL, true, BSI_SAME_STMT);\n+\n+      cond = force_gimple_operand_bsi (bsi, unshare_expr (cond),\n+\t\t\t\t       true, NULL, true, BSI_SAME_STMT);\n \n       /* Add the condition to aux field of the edge.  In case edge\n \t destination is a PHI node, this condition will be ANDed with\n@@ -698,7 +693,7 @@ find_phi_replacement_condition (struct loop *loop,\n                                 block_stmt_iterator *bsi)\n {\n   edge first_edge, second_edge;\n-  tree tmp_cond, new_stmts;\n+  tree tmp_cond;\n \n   gcc_assert (EDGE_COUNT (bb->preds) == 2);\n   first_edge = EDGE_PRED (bb, 0);\n@@ -777,9 +772,8 @@ find_phi_replacement_condition (struct loop *loop,\n      value as condition. Various targets use different means to communicate\n      condition in vector compare operation. Using gimple value allows compiler\n      to emit vector compare and select RTL without exposing compare's result.  */\n-  *cond = force_gimple_operand (*cond, &new_stmts, false, NULL_TREE);\n-  if (new_stmts)\n-    bsi_insert_before (bsi, new_stmts, BSI_SAME_STMT);\n+  *cond = force_gimple_operand_bsi (bsi, *cond, false, NULL_TREE,\n+\t\t\t\t    true, BSI_SAME_STMT);\n   if (!is_gimple_reg (*cond) && !is_gimple_condexpr (*cond))\n     {\n       tree new_stmt;"}, {"sha": "ee2748bb3aa6d70825c26e0fd1d38a362b508502", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -192,7 +192,7 @@ prepare_instrumented_value (block_stmt_iterator *bsi,\n {\n   tree val = value->hvalue.value;\n   return force_gimple_operand_bsi (bsi, fold_convert (gcov_type_node, val),\n-\t\t\t\t   true, NULL_TREE);\n+\t\t\t\t   true, NULL_TREE, true, BSI_SAME_STMT);\n }\n \n /* Output instructions as GIMPLE trees to increment the interval histogram \n@@ -211,7 +211,7 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n \t\t\t\t      build_addr (ref, current_function_decl),\n-\t\t\t\t      true, NULL_TREE);\n+\t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_interval_profiler_fn, 4,\n \t\t\t  ref_ptr, val, start, steps);\n@@ -232,7 +232,7 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n \t\t\t\t      build_addr (ref, current_function_decl),\n-\t\t\t\t      true, NULL_TREE);\n+\t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_pow2_profiler_fn, 2, ref_ptr, val);\n   bsi_insert_before (&bsi, call, BSI_SAME_STMT);\n@@ -252,7 +252,7 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n \t\t\t\t      build_addr (ref, current_function_decl),\n-\t\t\t\t      true, NULL_TREE);\n+\t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_one_value_profiler_fn, 2, ref_ptr, val);\n   bsi_insert_before (&bsi, call, BSI_SAME_STMT);\n@@ -275,7 +275,7 @@ tree_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n \t\t\t\t      build_addr (ref, current_function_decl),\n-\t\t\t\t      true, NULL_TREE);\n+\t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n \n   /* Insert code:\n     \n@@ -325,7 +325,8 @@ tree_gen_ic_func_profiler (void)\n       cur_func = force_gimple_operand_bsi (&bsi,\n \t\t\t\t\t   build_addr (current_function_decl, \n \t\t\t\t\t\t       current_function_decl),\n-\t\t\t\t\t   true, NULL_TREE);\n+\t\t\t\t\t   true, NULL_TREE,\n+\t\t\t\t\t   true, BSI_SAME_STMT);\n       tree_uid = build_int_cst (gcov_type_node, c_node->pid);\n       stmt1 = build_call_expr (tree_indirect_call_profiler_fn, 4,\n \t\t\t       ic_gcov_type_ptr_var,\n@@ -367,7 +368,8 @@ tree_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n \t\t\t\t      build_addr (ref, current_function_decl),\n-\t\t\t\t      true, NULL_TREE);\n+\t\t\t\t      true, NULL_TREE,\n+\t\t\t\t      true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_average_profiler_fn, 2, ref_ptr, val);\n   bsi_insert_before (&bsi, call, BSI_SAME_STMT);\n@@ -387,7 +389,7 @@ tree_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n   \n   ref_ptr = force_gimple_operand_bsi (&bsi,\n \t\t\t\t      build_addr (ref, current_function_decl),\n-\t\t\t\t      true, NULL_TREE);\n+\t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_ior_profiler_fn, 2, ref_ptr, val);\n   bsi_insert_before (&bsi, call, BSI_SAME_STMT);"}, {"sha": "f9d08f38794913513f431349f094da755c7ba807", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -2851,7 +2851,8 @@ scev_const_prop (void)\n \t  {\n \t    block_stmt_iterator dest = bsi;\n \t    bsi_insert_before (&dest, ass, BSI_NEW_STMT);\n-\t    def = force_gimple_operand_bsi (&dest, def, false, NULL_TREE);\n+\t    def = force_gimple_operand_bsi (&dest, def, false, NULL_TREE,\n+\t\t\t\t\t    true, BSI_SAME_STMT);\n \t  }\n \t  GIMPLE_STMT_OPERAND (ass, 1) = def;\n \t  update_stmt (ass);"}, {"sha": "7904b1af333f8e5247815610c1394f2c053036b8", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -556,10 +556,12 @@ gimplify_mem_ref_parts (block_stmt_iterator *bsi, struct mem_address *parts)\n {\n   if (parts->base)\n     parts->base = force_gimple_operand_bsi (bsi, parts->base,\n-\t\t\t\t\t    true, NULL_TREE);\n+\t\t\t\t\t    true, NULL_TREE,\n+\t\t\t\t\t    true, BSI_SAME_STMT);\n   if (parts->index)\n     parts->index = force_gimple_operand_bsi (bsi, parts->index,\n-\t\t\t\t\t     true, NULL_TREE);\n+\t\t\t\t\t     true, NULL_TREE,\n+\t\t\t\t\t     true, BSI_SAME_STMT);\n }\n \n /* Creates and returns a TARGET_MEM_REF for address ADDR.  If necessary\n@@ -588,7 +590,7 @@ create_mem_ref (block_stmt_iterator *bsi, tree type, aff_tree *addr)\n       parts.index = force_gimple_operand_bsi (bsi,\n \t\t\t\tfold_build2 (MULT_EXPR, sizetype,\n \t\t\t\t\t     parts.index, parts.step),\n-\t\t\t\ttrue, NULL_TREE);\n+\t\t\t\ttrue, NULL_TREE, true, BSI_SAME_STMT);\n       parts.step = NULL_TREE;\n   \n       mem_ref = create_mem_ref_raw (type, &parts);\n@@ -614,7 +616,7 @@ create_mem_ref (block_stmt_iterator *bsi, tree type, aff_tree *addr)\n \t\t\tfold_build2 (PLUS_EXPR, atype,\n \t\t\t\t     fold_convert (atype, parts.base),\n \t\t\t\t     tmp),\n-\t\t\ttrue, NULL_TREE);\n+\t\t\ttrue, NULL_TREE, true, BSI_SAME_STMT);\n \t    }\n \t  else\n \t    {\n@@ -641,7 +643,7 @@ create_mem_ref (block_stmt_iterator *bsi, tree type, aff_tree *addr)\n \t\t\tfold_build2 (PLUS_EXPR, atype,\n \t\t\t\t     parts.base,\n \t\t\t    \t     fold_convert (atype, parts.index)),\n-\t\t\ttrue, NULL_TREE);\n+\t\t\ttrue, NULL_TREE, true, BSI_SAME_STMT);\n \t}\n       else\n \tparts.base = parts.index;\n@@ -662,7 +664,7 @@ create_mem_ref (block_stmt_iterator *bsi, tree type, aff_tree *addr)\n \t\t\tfold_build2 (POINTER_PLUS_EXPR, atype,\n \t\t\t\t     parts.base,\n \t\t\t\t     fold_convert (sizetype, parts.offset)),\n-\t\t\ttrue, NULL_TREE);\n+\t\t\ttrue, NULL_TREE, true, BSI_SAME_STMT);\n \t}\n       else\n \tparts.base = parts.offset;"}, {"sha": "9486e54281df0fe15109118db49f2518d8e22cd6", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -317,9 +317,11 @@ ifcombine_ifandif (basic_block inner_cond_bb, basic_block outer_cond_bb)\n       t2 = fold_build2 (LSHIFT_EXPR, TREE_TYPE (name1),\n \t\t        integer_one_node, bit2);\n       t = fold_build2 (BIT_IOR_EXPR, TREE_TYPE (name1), t, t2);\n-      t = force_gimple_operand_bsi (&bsi, t, true, NULL_TREE);\n+      t = force_gimple_operand_bsi (&bsi, t, true, NULL_TREE,\n+\t\t\t\t    true, BSI_SAME_STMT);\n       t2 = fold_build2 (BIT_AND_EXPR, TREE_TYPE (name1), name1, t);\n-      t2 = force_gimple_operand_bsi (&bsi, t2, true, NULL_TREE);\n+      t2 = force_gimple_operand_bsi (&bsi, t2, true, NULL_TREE,\n+\t\t\t\t     true, BSI_SAME_STMT);\n       COND_EXPR_COND (inner_cond) = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t\t\t\t\t t2, t);\n       update_stmt (inner_cond);\n@@ -405,9 +407,11 @@ ifcombine_iforif (basic_block inner_cond_bb, basic_block outer_cond_bb)\n       /* Do it.  */\n       bsi = bsi_for_stmt (inner_cond);\n       t = fold_build2 (BIT_IOR_EXPR, TREE_TYPE (name1), bits1, bits2);\n-      t = force_gimple_operand_bsi (&bsi, t, true, NULL_TREE);\n+      t = force_gimple_operand_bsi (&bsi, t, true, NULL_TREE,\n+\t\t\t\t    true, BSI_SAME_STMT);\n       t = fold_build2 (BIT_AND_EXPR, TREE_TYPE (name1), name1, t);\n-      t = force_gimple_operand_bsi (&bsi, t, true, NULL_TREE);\n+      t = force_gimple_operand_bsi (&bsi, t, true, NULL_TREE,\n+\t\t\t\t    true, BSI_SAME_STMT);\n       COND_EXPR_COND (inner_cond) = fold_build2 (NE_EXPR, boolean_type_node, t,\n \t\t\t\t\t\t build_int_cst (TREE_TYPE (t), 0));\n       update_stmt (inner_cond);"}, {"sha": "c67310032bcc53da83658842dabb227a6cc2a719", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -4862,7 +4862,7 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n \t\t\t    struct iv_use *use, struct iv_cand *cand)\n {\n   tree comp;\n-  tree op, stmts, tgt, ass;\n+  tree op, tgt, ass;\n   block_stmt_iterator bsi;\n \n   /* An important special case -- if we are asked to express value of\n@@ -4947,9 +4947,8 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n       gcc_unreachable ();\n     }\n \n-  op = force_gimple_operand (comp, &stmts, false, SSA_NAME_VAR (tgt));\n-  if (stmts)\n-    bsi_insert_before (&bsi, stmts, BSI_SAME_STMT);\n+  op = force_gimple_operand_bsi (&bsi, comp, false, SSA_NAME_VAR (tgt),\n+\t\t\t\t true, BSI_SAME_STMT);\n \n   if (TREE_CODE (use->stmt) == PHI_NODE)\n     {\n@@ -5115,7 +5114,8 @@ rewrite_use_compare (struct ivopts_data *data,\n \n       compare = iv_elimination_compare (data, use);\n       bound = unshare_expr (fold_convert (var_type, bound));\n-      op = force_gimple_operand_bsi (&bsi, bound, true, NULL_TREE);\n+      op = force_gimple_operand_bsi (&bsi, bound, true, NULL_TREE,\n+\t\t\t\t     true, BSI_SAME_STMT);\n \n       *use->op_p = build2 (compare, boolean_type_node, var, op);\n       return;\n@@ -5129,7 +5129,8 @@ rewrite_use_compare (struct ivopts_data *data,\n   ok = extract_cond_operands (data, use->op_p, &var_p, NULL, NULL, NULL);\n   gcc_assert (ok);\n \n-  *var_p = force_gimple_operand_bsi (&bsi, comp, true, SSA_NAME_VAR (*var_p));\n+  *var_p = force_gimple_operand_bsi (&bsi, comp, true, SSA_NAME_VAR (*var_p),\n+\t\t\t\t     true, BSI_SAME_STMT);\n }\n \n /* Rewrites USE using candidate CAND.  */"}, {"sha": "2105299725913bc95c2e4c65a91efa7279ab5078", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -883,7 +883,8 @@ issue_prefetch_ref (struct mem_ref *ref, unsigned unroll_factor, unsigned ahead)\n   n_prefetches = ((unroll_factor + ref->prefetch_mod - 1)\n \t\t  / ref->prefetch_mod);\n   addr_base = build_fold_addr_expr_with_type (ref->mem, ptr_type_node);\n-  addr_base = force_gimple_operand_bsi (&bsi, unshare_expr (addr_base), true, NULL);\n+  addr_base = force_gimple_operand_bsi (&bsi, unshare_expr (addr_base),\n+\t\t\t\t\ttrue, NULL, true, BSI_SAME_STMT);\n   write_p = ref->write_p ? integer_one_node : integer_zero_node;\n   local = build_int_cst (integer_type_node, nontemporal ? 0 : 3);\n \n@@ -893,7 +894,8 @@ issue_prefetch_ref (struct mem_ref *ref, unsigned unroll_factor, unsigned ahead)\n       delta = (ahead + ap * ref->prefetch_mod) * ref->group->step;\n       addr = fold_build2 (POINTER_PLUS_EXPR, ptr_type_node,\n \t\t\t  addr_base, size_int (delta));\n-      addr = force_gimple_operand_bsi (&bsi, unshare_expr (addr), true, NULL);\n+      addr = force_gimple_operand_bsi (&bsi, unshare_expr (addr), true, NULL,\n+\t\t\t\t       true, BSI_SAME_STMT);\n \n       /* Create the prefetch instruction.  */\n       prefetch = build_call_expr (built_in_decls[BUILT_IN_PREFETCH],"}, {"sha": "cc974f1e10bf88c7c72de7b0409fa7822f96fcdb", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -1026,7 +1026,7 @@ negate_value (tree tonegate, block_stmt_iterator *bsi)\n \n   tonegate = fold_build1 (NEGATE_EXPR, TREE_TYPE (tonegate), tonegate);\n   resultofnegate = force_gimple_operand_bsi (bsi, tonegate, true,\n-\t\t\t\t\t     NULL_TREE);\n+\t\t\t\t\t     NULL_TREE, true, BSI_SAME_STMT);\n   VEC_safe_push (tree, heap, broken_up_subtracts, resultofnegate);\n   return resultofnegate;\n "}, {"sha": "8a6e08624de3fe4dd44b3b5b7ed43a57ce8d9397", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6540bdeb4a50fadc96f5b0087cca5602ad04845/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=c6540bdeb4a50fadc96f5b0087cca5602ad04845", "patch": "@@ -5341,7 +5341,7 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n       tree evolution_part;\n       tree init_expr;\n       tree step_expr;\n-      tree var, stmt, ni, ni_name;\n+      tree var, ni, ni_name;\n       block_stmt_iterator last_bsi;\n \n       if (vect_print_dump_info (REPORT_DETAILS))\n@@ -5399,13 +5399,10 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n       var = create_tmp_var (TREE_TYPE (init_expr), \"tmp\");\n       add_referenced_var (var);\n \n-      ni_name = force_gimple_operand (ni, &stmt, false, var);\n-      \n-      /* Insert stmt into exit_bb.  */\n       last_bsi = bsi_last (exit_bb);\n-      if (stmt)\n-        bsi_insert_before (&last_bsi, stmt, BSI_SAME_STMT);   \n-\n+      ni_name = force_gimple_operand_bsi (&last_bsi, ni, false, var,\n+\t\t\t\t\t  true, BSI_SAME_STMT);\n+      \n       /* Fix phi expressions in the successor bb.  */\n       SET_PHI_ARG_DEF (phi1, update_e->dest_idx, ni_name);\n     }"}]}