{"sha": "748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4ZDI5YzFmYzZjYjIyMDlhMWRhNmUwNTM2MTY4ZDJiNmU3OGFmNw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-16T19:09:40Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-16T19:09:40Z"}, "message": "c-common.c (cb_register_builtins): Handle more built-ins here rather than in gcc.c specs.\n\n\t* c-common.c (cb_register_builtins): Handle more built-ins\n\there rather than in gcc.c specs.\n\t* gcc.c (cpp_unique_options): Move many built-ins to c-common.c.\n\t(cpp_options): Pass -O flags even when only preprocessing.\n\t* toplev.c (set_fast_math_flags): New prototype.\n\t(fast_math_flags_set_p): New.\n\t(set_no_fast_math_flags): Remove.\n\t(decode_f_option): Update.\n\t* toplev.h (set_fast_math_flags): Update.\n\t(fast_math_flags_set_p): New.\n\t(set_no_fast_math_flags): Remove.\nconfig:\n\t* c4x/c4x.c (c4x_override_options): Update.\n\nFrom-SVN: r53526", "tree": {"sha": "ef69824f78f40bb0b12f54abb92bfa60441f8a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef69824f78f40bb0b12f54abb92bfa60441f8a3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/comments", "author": null, "committer": null, "parents": [{"sha": "5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5279d7394efe3e6d39e9c5f0bbb066e63f4cf398"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "a9b68cfe3ee1de4f08fccc5e2d5e18fb4406a792", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "patch": "@@ -1,3 +1,19 @@\n+2002-05-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (cb_register_builtins): Handle more built-ins\n+\there rather than in gcc.c specs.\n+\t* gcc.c (cpp_unique_options): Move many built-ins to c-common.c.\n+\t(cpp_options): Pass -O flags even when only preprocessing.\n+\t* toplev.c (set_fast_math_flags): New prototype.\n+\t(fast_math_flags_set_p): New.\n+\t(set_no_fast_math_flags): Remove.\n+\t(decode_f_option): Update.\n+\t* toplev.h (set_fast_math_flags): Update.\n+\t(fast_math_flags_set_p): New.\n+\t(set_no_fast_math_flags): Remove.\n+config:\n+\t* c4x/c4x.c (c4x_override_options): Update.\n+\n 2002-05-16  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-common.c (STDC_0_IN_SYSTEM_HEADERS, REGISTER_PREFIX):"}, {"sha": "c799e95886d41b720628610bb2f3359aa15181f0", "filename": "gcc/c-common.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "patch": "@@ -4351,6 +4351,23 @@ cb_register_builtins (pfile)\n   /* Misc.  */\n   builtin_define_with_value (\"__VERSION__\", version_string, 1);\n \n+  /* Other target-independent built-ins determined by command-line\n+     options.  */\n+  if (optimize_size)\n+    cpp_define (pfile, \"__OPTIMIZE_SIZE__\");\n+  if (optimize)\n+    cpp_define (pfile, \"__OPTIMIZE__\");\n+\n+  if (flag_hosted)\n+    cpp_define (pfile, \"__STDC_HOSTED__=1\");\n+  else\n+    cpp_define (pfile, \"__STDC_HOSTED__=0\");\n+\n+  if (fast_math_flags_set_p ())\n+    cpp_define (pfile, \"__FAST_MATH__\");\n+  if (flag_no_inline)\n+    cpp_define (pfile, \"__NO_INLINE__\");\n+\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n   TARGET_CPU_CPP_BUILTINS ();"}, {"sha": "ff4ac02941acda2561acd9eb90f21972368ffce5", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "patch": "@@ -307,7 +307,7 @@ c4x_override_options ()\n     target_flags &= ~C3X_FLAG;\n \n   /* Convert foo / 8.0 into foo * 0.125, etc.  */\n-  set_fast_math_flags();\n+  set_fast_math_flags (1);\n \n   /* We should phase out the following at some stage.\n      This provides compatibility with the old -mno-aliases option.  */"}, {"sha": "cad8444c4717561f789fc05a1f436a7a9d8fcc5c", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "patch": "@@ -682,18 +682,14 @@ static const char *cpp_unique_options =\n  %{!E:%{!M:%{!MM:%{MD|MMD:%{o*:-MQ %*}}}}}\\\n  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n- %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n- %{fno-inline|O0|!O*:-D__NO_INLINE__} %{ffast-math:-D__FAST_MATH__}\\\n- %{ffreestanding:-D__STDC_HOSTED__=0} %{fno-hosted:-D__STDC_HOSTED__=0}\\\n- %{!ffreestanding:%{!fno-hosted:-D__STDC_HOSTED__=1}} %{remap}\\\n- %{g3:-dD} %{H} %C %{D*&U*&A*} %{i*} %Z %i\\\n+ %{remap} %{g3:-dD} %{H} %C %{D*&U*&A*} %{i*} %Z %i\\\n  %{E|M|MM:%W{o*}}\";\n \n /* This contains cpp options which are common with cc1_options and are passed\n    only when preprocessing only to avoid duplication.  */\n static const char *cpp_options =\n \"%(cpp_unique_options) %{std*} %{d*} %{W*&pedantic*} %{w} %{m*} %{f*}\\\n- %{undef}\";\n+ %{O*} %{undef}\";\n \n /* NB: This is shared amongst all front-ends.  */\n static const char *cc1_options ="}, {"sha": "9fb8813191a81e3d1c63be1c13667053103d26c8", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "patch": "@@ -1540,19 +1540,20 @@ set_Wunused (setting)\n    -ffast-math and -fno-fast-math imply.  */\n \n void\n-set_fast_math_flags ()\n+set_fast_math_flags (int set)\n {\n-  flag_trapping_math = 0;\n-  flag_unsafe_math_optimizations = 1;\n-  flag_errno_math = 0;\n+  flag_trapping_math = !set;\n+  flag_unsafe_math_optimizations = set;\n+  flag_errno_math = !set;\n }\n \n-void\n-set_no_fast_math_flags ()\n+/* Return true iff flags are set as if -ffast-math.  */\n+bool\n+fast_math_flags_set_p ()\n {\n-  flag_trapping_math = 1;\n-  flag_unsafe_math_optimizations = 0;\n-  flag_errno_math = 1;\n+  return (!flag_trapping_math\n+\t  && flag_unsafe_math_optimizations\n+\t  && !flag_errno_math);\n }\n \n \f\n@@ -3819,9 +3820,9 @@ decode_f_option (arg)\n     }\n \n   if (!strcmp (arg, \"fast-math\"))\n-    set_fast_math_flags ();\n+    set_fast_math_flags (1);\n   else if (!strcmp (arg, \"no-fast-math\"))\n-    set_no_fast_math_flags ();\n+    set_fast_math_flags (0);\n   else if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n \t   || (option_value = skip_leading_substring (arg, \"inline-limit=\")))\n     {"}, {"sha": "04477c0a0148b6816309786440f2fa046c7a1045", "filename": "gcc/toplev.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d29c1fc6cb2209a1da6e0536168d2b6e78af7/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=748d29c1fc6cb2209a1da6e0536168d2b6e78af7", "patch": "@@ -113,11 +113,13 @@ extern const char *dump_base_name;\n /* The hashtable, so that the C front ends can pass it to cpplib.  */\n extern struct ht *ident_hash;\n \n-/* These functions can be used by targets to set the flags originally\n-   implied by -ffast-math and -fno-fast-math.  */\n+/* This function can be used by targets to set the flags originally\n+    implied by -ffast-math and -fno-fast-math.  */\n+ \n+extern void set_fast_math_flags         PARAMS ((int));\n \n-extern void set_fast_math_flags         PARAMS ((void));\n-extern void set_no_fast_math_flags      PARAMS ((void));\n+/* Return true iff flags are set as if -ffast-math.  */\n+extern bool fast_math_flags_set_p\tPARAMS ((void));\n \n /* The following functions accept a wide integer argument.  Rather\n    than having to cast on every function call, we use a macro instead.  */"}]}