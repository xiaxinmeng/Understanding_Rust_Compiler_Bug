{"sha": "ccd4e386c55ee58e2d62e24f1b973df469cb2975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkNGUzODZjNTVlZTU4ZTJkNjJlMjRmMWI5NzNkZjQ2OWNiMjk3NQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-05T23:13:17Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2008-02-05T23:13:17Z"}, "message": "re PR driver/30330 (-Wdeprecated is not documented)\n\n\tPR documentation/30330\n\t* doc/invoke.texi (C++ Dialect Options)\n\t(Objective-C and Objective-C++ Dialect Options, Warning Options):\n\tFor each warning option -Wfoo that allows -Wno-foo, ensure both\n\t-Wfoo and -Wno-foo are listed in the option index.  Fix index\n\tentry of -Wswitch-default, index -Wnormalized= including the\n\t`=', and -Wlarger-than-@var{len} including @var{len}.\n\nFrom-SVN: r132131", "tree": {"sha": "a26effc9a93bbd7a35ec4bde3d073ac678f38141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a26effc9a93bbd7a35ec4bde3d073ac678f38141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccd4e386c55ee58e2d62e24f1b973df469cb2975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd4e386c55ee58e2d62e24f1b973df469cb2975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd4e386c55ee58e2d62e24f1b973df469cb2975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd4e386c55ee58e2d62e24f1b973df469cb2975/comments", "author": null, "committer": null, "parents": [{"sha": "4e6a492c780873755b0e7c2d426c3d0495f2633f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6a492c780873755b0e7c2d426c3d0495f2633f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6a492c780873755b0e7c2d426c3d0495f2633f"}], "stats": {"total": 117, "additions": 114, "deletions": 3}, "files": [{"sha": "290b3e68a999f1f30af0f51db7103b12ede862ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4e386c55ee58e2d62e24f1b973df469cb2975/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4e386c55ee58e2d62e24f1b973df469cb2975/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccd4e386c55ee58e2d62e24f1b973df469cb2975", "patch": "@@ -1,3 +1,13 @@\n+2008-02-06  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\tPR documentation/30330\n+\t* doc/invoke.texi (C++ Dialect Options)\n+\t(Objective-C and Objective-C++ Dialect Options, Warning Options):\n+\tFor each warning option -Wfoo that allows -Wno-foo, ensure both\n+\t-Wfoo and -Wno-foo are listed in the option index.  Fix index\n+\tentry of -Wswitch-default, index -Wnormalized= including the\n+\t`=', and -Wlarger-than-@var{len} including @var{len}.\n+\n 2008-02-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (floatunssisf2): Use"}, {"sha": "ea5968298802ea86ae22a4ab3d94c658ce6ffc43", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 104, "deletions": 3, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd4e386c55ee58e2d62e24f1b973df469cb2975/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd4e386c55ee58e2d62e24f1b973df469cb2975/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ccd4e386c55ee58e2d62e24f1b973df469cb2975", "patch": "@@ -1908,6 +1908,7 @@ inlined by default.\n \n @item -Wabi @r{(C++ only)}\n @opindex Wabi\n+@opindex Wno-abi\n Warn when G++ generates code that is probably not compatible with the\n vendor-neutral C++ ABI@.  Although an effort has been made to warn about\n all such cases, there are probably some cases that are not warned about,\n@@ -2007,19 +2008,22 @@ Instantiations of these templates may be mangled incorrectly.\n \n @item -Wctor-dtor-privacy @r{(C++ only)}\n @opindex Wctor-dtor-privacy\n+@opindex Wno-ctor-dtor-privacy\n Warn when a class seems unusable because all the constructors or\n destructors in that class are private, and it has neither friends nor\n public static member functions.\n \n @item -Wnon-virtual-dtor @r{(C++ only)}\n @opindex Wnon-virtual-dtor\n+@opindex Wno-non-virtual-dtor\n Warn when a class has virtual functions and accessible non-virtual\n destructor, in which case it would be possible but unsafe to delete\n an instance of a derived class through a pointer to the base class.\n This warning is also enabled if -Weffc++ is specified.\n \n @item -Wreorder @r{(C++ only)}\n @opindex Wreorder\n+@opindex Wno-reorder\n @cindex reordering, warning\n @cindex warning for reordering of member initializers\n Warn when the order of member initializers given in the code does not\n@@ -2043,6 +2047,7 @@ The following @option{-W@dots{}} options are not affected by @option{-Wall}.\n @table @gcctabopt\n @item -Weffc++ @r{(C++ only)}\n @opindex Weffc++\n+@opindex Wno-effc++\n Warn about violations of the following style guidelines from Scott Meyers'\n @cite{Effective C++} book:\n \n@@ -2084,10 +2089,12 @@ to filter out those warnings.\n \n @item -Wno-deprecated @r{(C++ only)}\n @opindex Wno-deprecated\n+@opindex Wdeprecated\n Do not warn about usage of deprecated features.  @xref{Deprecated Features}.\n \n @item -Wstrict-null-sentinel @r{(C++ only)}\n @opindex Wstrict-null-sentinel\n+@opindex Wno-strict-null-sentinel\n Warn also about the use of an uncasted @code{NULL} as sentinel.  When\n compiling only with GCC this is a valid sentinel, as @code{NULL} is defined\n to @code{__null}.  Although it is a null pointer constant not a null pointer,\n@@ -2096,6 +2103,7 @@ not portable across different compilers.\n \n @item -Wno-non-template-friend @r{(C++ only)}\n @opindex Wno-non-template-friend\n+@opindex Wnon-template-friend\n Disable warnings when non-templatized friend functions are declared\n within a template.  Since the advent of explicit template specification\n support in G++, if the name of the friend is an unqualified-id (i.e.,\n@@ -2112,13 +2120,15 @@ but disables the helpful warning.\n \n @item -Wold-style-cast @r{(C++ only)}\n @opindex Wold-style-cast\n+@opindex Wno-old-style-cast\n Warn if an old-style (C-style) cast to a non-void type is used within\n a C++ program.  The new-style casts (@samp{dynamic_cast},\n @samp{static_cast}, @samp{reinterpret_cast}, and @samp{const_cast}) are\n less vulnerable to unintended effects and much easier to search for.\n \n @item -Woverloaded-virtual @r{(C++ only)}\n @opindex Woverloaded-virtual\n+@opindex Wno-overloaded-virtual\n @cindex overloaded virtual fn, warning\n @cindex warning for overloaded virtual fn\n Warn when a function declaration hides virtual functions from a\n@@ -2146,11 +2156,13 @@ will fail to compile.\n \n @item -Wno-pmf-conversions @r{(C++ only)}\n @opindex Wno-pmf-conversions\n+@opindex Wpmf-conversions\n Disable the diagnostic for converting a bound pointer to member function\n to a plain pointer.\n \n @item -Wsign-promo @r{(C++ only)}\n @opindex Wsign-promo\n+@opindex Wno-sign-promo\n Warn when overload resolution chooses a promotion from unsigned or\n enumerated type to a signed type, over a conversion to an unsigned type of\n the same size.  Previous versions of G++ would try to preserve\n@@ -2390,11 +2402,13 @@ file named @file{@var{sourcename}.decl}.\n \n @item -Wassign-intercept\n @opindex Wassign-intercept\n+@opindex Wno-assign-intercept\n Warn whenever an Objective-C assignment is being intercepted by the\n garbage collector.\n \n @item -Wno-protocol\n @opindex Wno-protocol\n+@opindex Wprotocol\n If a class is declared to implement a protocol, a warning is issued for\n every method in the protocol that is not implemented by the class.  The\n default behavior is to issue a warning for every method not explicitly\n@@ -2405,6 +2419,7 @@ and no warning is issued for them.\n \n @item -Wselector\n @opindex Wselector\n+@opindex Wno-selector\n Warn if multiple methods of different types for the same selector are\n found during compilation.  The check is performed on the list of methods\n in the final stage of compilation.  Additionally, a check is performed\n@@ -2418,6 +2433,7 @@ being used.\n \n @item -Wstrict-selector-match\n @opindex Wstrict-selector-match\n+@opindex Wno-strict-selector-match\n Warn if multiple methods with differing argument and/or return types are\n found for a given selector when attempting to send a message using this\n selector to a receiver of type @code{id} or @code{Class}.  When this flag\n@@ -2427,6 +2443,7 @@ and alignment.\n \n @item -Wundeclared-selector\n @opindex Wundeclared-selector\n+@opindex Wno-undeclared-selector\n Warn if a @code{@@selector(@dots{})} expression referring to an\n undeclared selector is found.  A selector is considered undeclared if no\n method with that name has been declared before the\n@@ -2532,10 +2549,12 @@ Inhibit all warning messages.\n \n @item -Werror\n @opindex Werror\n+@opindex Wno-error\n Make all warnings into errors.\n \n @item -Werror=\n @opindex Werror=\n+@opindex Wno-error=\n Make the specified warning into an error.  The specifier for a warning\n is appended, for example @option{-Werror=switch} turns the warnings\n controlled by @option{-Wswitch} into errors.  This switch takes a\n@@ -2552,6 +2571,7 @@ imply anything.\n \n @item -Wfatal-errors\n @opindex Wfatal-errors\n+@opindex Wno-fatal-errors\n This option causes the compiler to abort compilation on the first error\n occurred rather than trying to keep going and printing further error\n messages.\n@@ -2616,6 +2636,7 @@ warnings.\n \n @item -Wall\n @opindex Wall\n+@opindex Wno-all\n This enables all the warnings about constructions that some users\n consider questionable, and that are easy to avoid (or modify to\n prevent the warning), even in conjunction with macros.  This also\n@@ -2664,6 +2685,7 @@ them must be enabled individually.\n @item -Wextra\n @opindex W\n @opindex Wextra\n+@opindex Wno-extra\n This enables some extra warning flags that are not enabled by\n @option{-Wall}. (This option used to be called @option{-W}.  The older\n name is still supported, but the newer name is more descriptive.)\n@@ -2716,23 +2738,27 @@ constructor.\n \n @item -Wno-import\n @opindex Wno-import\n+@opindex Wimport\n Inhibit warning messages about the use of @samp{#import}.\n \n @item -Wchar-subscripts\n @opindex Wchar-subscripts\n+@opindex Wno-char-subscripts\n Warn if an array subscript has type @code{char}.  This is a common cause\n of error, as programmers often forget that this type is signed on some\n machines.\n This warning is enabled by @option{-Wall}.\n \n @item -Wcomment\n @opindex Wcomment\n+@opindex Wno-comment\n Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n comment, or whenever a Backslash-Newline appears in a @samp{//} comment.\n This warning is enabled by @option{-Wall}.\n \n @item -Wformat\n @opindex Wformat\n+@opindex Wno-format\n @opindex ffreestanding\n @opindex fno-builtin\n Check calls to @code{printf} and @code{scanf}, etc., to make sure that\n@@ -2769,11 +2795,13 @@ aspects of format checking, the options @option{-Wformat-y2k},\n \n @item -Wformat-y2k\n @opindex Wformat-y2k\n+@opindex Wno-format-y2k\n If @option{-Wformat} is specified, also warn about @code{strftime}\n formats which may yield only a two-digit year.\n \n @item -Wno-format-extra-args\n @opindex Wno-format-extra-args\n+@opindex Wformat-extra-args\n If @option{-Wformat} is specified, do not warn about excess arguments to a\n @code{printf} or @code{scanf} format function.  The C standard specifies\n that such arguments are ignored.\n@@ -2788,17 +2816,20 @@ Unix Specification says that such unused arguments are allowed.\n \n @item -Wno-format-zero-length\n @opindex Wno-format-zero-length\n+@opindex Wformat-zero-length\n If @option{-Wformat} is specified, do not warn about zero-length formats.\n The C standard specifies that zero-length formats are allowed.\n \n @item -Wformat-nonliteral\n @opindex Wformat-nonliteral\n+@opindex Wno-format-nonliteral\n If @option{-Wformat} is specified, also warn if the format string is not a\n string literal and so cannot be checked, unless the format function\n takes its format arguments as a @code{va_list}.\n \n @item -Wformat-security\n @opindex Wformat-security\n+@opindex Wno-format-security\n If @option{-Wformat} is specified, also warn about uses of format\n functions that represent possible security problems.  At present, this\n warns about calls to @code{printf} and @code{scanf} functions where the\n@@ -2811,12 +2842,14 @@ included in @option{-Wformat-nonliteral}.)\n \n @item -Wformat=2\n @opindex Wformat=2\n+@opindex Wno-format=2\n Enable @option{-Wformat} plus format checks not included in\n @option{-Wformat}.  Currently equivalent to @samp{-Wformat\n -Wformat-nonliteral -Wformat-security -Wformat-y2k}.\n \n @item -Wnonnull\n @opindex Wnonnull\n+@opindex Wno-nonnull\n Warn about passing a null pointer for arguments marked as\n requiring a non-null value by the @code{nonnull} function attribute.\n \n@@ -2825,6 +2858,7 @@ can be disabled with the @option{-Wno-nonnull} option.\n \n @item -Winit-self @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Winit-self\n+@opindex Wno-init-self\n Warn about uninitialized variables which are initialized with themselves.\n Note this option can only be used with the @option{-Wuninitialized} option,\n which in turn only works with @option{-O1} and above.\n@@ -2843,6 +2877,7 @@ int f()\n \n @item -Wimplicit-int\n @opindex Wimplicit-int\n+@opindex Wno-implicit-int\n Warn when a declaration does not specify a type.\n This warning is enabled by @option{-Wall}.\n \n@@ -2857,6 +2892,7 @@ enabled by default and it is made into an error by\n \n @item -Wimplicit\n @opindex Wimplicit\n+@opindex Wno-implicit\n Same as @option{-Wimplicit-int} and @option{-Wimplicit-function-declaration}.\n This warning is enabled by @option{-Wall}.\n \n@@ -2875,13 +2911,15 @@ This warning is also enabled by @option{-Wextra}.\n \n @item -Wmain\n @opindex Wmain\n+@opindex Wno-main\n Warn if the type of @samp{main} is suspicious.  @samp{main} should be a\n function with external linkage, returning int, taking either zero\n arguments, two, or three arguments of appropriate types.\n This warning is enabled by @option{-Wall}.\n \n @item -Wmissing-braces\n @opindex Wmissing-braces\n+@opindex Wno-missing-braces\n Warn if an aggregate or union initializer is not fully bracketed.  In\n the following example, the initializer for @samp{a} is not fully\n bracketed, but that for @samp{b} is fully bracketed.\n@@ -2895,10 +2933,12 @@ This warning is enabled by @option{-Wall}.\n \n @item -Wmissing-include-dirs @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Wmissing-include-dirs\n+@opindex Wno-missing-include-dirs\n Warn if a user-supplied include directory does not exist.\n \n @item -Wparentheses\n @opindex Wparentheses\n+@opindex Wno-parentheses\n Warn if parentheses are omitted in certain contexts, such\n as when there is an assignment in a context where a truth value\n is expected, or when operators are nested whose precedence people\n@@ -2952,6 +2992,7 @@ This warning is enabled by @option{-Wall}.\n \n @item -Wsequence-point\n @opindex Wsequence-point\n+@opindex Wno-sequence-point\n Warn about code that may have undefined semantics because of violations\n of sequence point rules in the C and C++ standards.\n \n@@ -3013,6 +3054,7 @@ This warning is enabled by @option{-Wall}.\n \n @item -Wswitch\n @opindex Wswitch\n+@opindex Wno-switch\n Warn whenever a @code{switch} statement has an index of enumerated type\n and lacks a @code{case} for one or more of the named codes of that\n enumeration.  (The presence of a @code{default} label prevents this\n@@ -3021,31 +3063,36 @@ provoke warnings when this option is used.\n This warning is enabled by @option{-Wall}.\n \n @item -Wswitch-default\n-@opindex Wswitch-switch\n+@opindex Wswitch-default\n+@opindex Wno-switch-default\n Warn whenever a @code{switch} statement does not have a @code{default}\n case.\n \n @item -Wswitch-enum\n @opindex Wswitch-enum\n+@opindex Wno-switch-enum\n Warn whenever a @code{switch} statement has an index of enumerated type\n and lacks a @code{case} for one or more of the named codes of that\n enumeration.  @code{case} labels outside the enumeration range also\n provoke warnings when this option is used.\n \n @item -Wtrigraphs\n @opindex Wtrigraphs\n+@opindex Wno-trigraphs\n Warn if any trigraphs are encountered that might change the meaning of\n the program (trigraphs within comments are not warned about).\n This warning is enabled by @option{-Wall}.\n \n @item -Wunused-function\n @opindex Wunused-function\n+@opindex Wno-unused-function\n Warn whenever a static function is declared but not defined or a\n non-inline static function is unused.\n This warning is enabled by @option{-Wall}.\n \n @item -Wunused-label\n @opindex Wunused-label\n+@opindex Wno-unused-label\n Warn whenever a label is declared but not used.\n This warning is enabled by @option{-Wall}.\n \n@@ -3054,13 +3101,15 @@ To suppress this warning use the @samp{unused} attribute\n \n @item -Wunused-parameter\n @opindex Wunused-parameter\n+@opindex Wno-unused-parameter\n Warn whenever a function parameter is unused aside from its declaration.\n \n To suppress this warning use the @samp{unused} attribute\n (@pxref{Variable Attributes}).\n \n @item -Wunused-variable\n @opindex Wunused-variable\n+@opindex Wno-unused-variable\n Warn whenever a local variable or non-constant static variable is unused\n aside from its declaration.\n This warning is enabled by @option{-Wall}.\n@@ -3070,6 +3119,7 @@ To suppress this warning use the @samp{unused} attribute\n \n @item -Wunused-value\n @opindex Wunused-value\n+@opindex Wno-unused-value\n Warn whenever a statement computes a result that is explicitly not\n used. To suppress this warning cast the unused expression to\n @samp{void}. This includes an expression-statement or the left-hand\n@@ -3081,6 +3131,7 @@ This warning is enabled by @option{-Wall}.\n \n @item -Wunused\n @opindex Wunused\n+@opindex Wno-unused\n All the above @option{-Wunused} options combined.\n \n In order to get a warning about an unused function parameter, you must\n@@ -3089,6 +3140,7 @@ either specify @samp{-Wextra -Wunused} (note that @samp{-Wall} implies\n \n @item -Wuninitialized\n @opindex Wuninitialized\n+@opindex Wno-uninitialized\n Warn if an automatic variable is used without first being initialized or\n if a variable may be clobbered by a @code{setjmp} call.\n \n@@ -3173,6 +3225,7 @@ optimizing compilations (@option{-O1} and above).\n \n @item -Wunknown-pragmas\n @opindex Wunknown-pragmas\n+@opindex Wno-unknown-pragmas\n @cindex warning for unknown pragmas\n @cindex unknown pragmas, warning\n @cindex pragmas, warning of unknown\n@@ -3190,6 +3243,7 @@ invalid syntax, or conflicts between pragmas.  See also\n \n @item -Wstrict-aliasing\n @opindex Wstrict-aliasing\n+@opindex Wno-strict-aliasing\n This option is only active when @option{-fstrict-aliasing} is active.\n It warns about code which might break the strict aliasing rules that the\n compiler is using for optimization.  The warning does not catch all\n@@ -3199,6 +3253,7 @@ It is equivalent to @option{-Wstrict-aliasing=3}\n \n @item -Wstrict-aliasing=n\n @opindex Wstrict-aliasing=n\n+@opindex Wno-strict-aliasing=n\n This option is only active when @option{-fstrict-aliasing} is active.\n It warns about code which might break the strict aliasing rules that the\n compiler is using for optimization.\n@@ -3233,6 +3288,7 @@ Does not warn about incomplete types.\n @item -Wstrict-overflow\n @itemx -Wstrict-overflow=@var{n}\n @opindex Wstrict-overflow\n+@opindex Wno-strict-overflow\n This option is only active when @option{-fstrict-overflow} is active.\n It warns about cases where the compiler optimizes based on the\n assumption that signed overflow does not occur.  Note that it does not\n@@ -3299,6 +3355,7 @@ obtaining infinities and NaNs.\n \n @item -Wsystem-headers\n @opindex Wsystem-headers\n+@opindex Wno-system-headers\n @cindex warnings from system headers\n @cindex system headers, warnings from\n Print warning messages for constructs found in system header files.\n@@ -3312,6 +3369,7 @@ headers---for that, @option{-Wunknown-pragmas} must also be used.\n \n @item -Wfloat-equal\n @opindex Wfloat-equal\n+@opindex Wno-float-equal\n Warn if floating point values are used in equality comparisons.\n \n The idea behind this is that sometimes it is convenient (for the\n@@ -3327,6 +3385,7 @@ probably mistaken.\n \n @item -Wtraditional @r{(C only)}\n @opindex Wtraditional\n+@opindex Wno-traditional\n Warn about certain constructs that behave differently in traditional and\n ISO C@.  Also warn about ISO C constructs that have no traditional C\n equivalent, and/or problematic constructs which should be avoided.\n@@ -3415,6 +3474,7 @@ traditional C compatibility.\n \n @item -Wtraditional-conversion @r{(C only)}\n @opindex Wtraditional-conversion\n+@opindex Wno-traditional-conversion\n Warn if a prototype causes a type conversion that is different from what\n would happen to the same argument in the absence of a prototype.  This\n includes conversions of fixed point to floating and vice versa, and\n@@ -3423,13 +3483,15 @@ except when the same as the default promotion.\n \n @item -Wdeclaration-after-statement @r{(C only)}\n @opindex Wdeclaration-after-statement\n+@opindex Wno-declaration-after-statement\n Warn when a declaration is found after a statement in a block.  This\n construct, known from C++, was introduced with ISO C99 and is by default\n allowed in GCC@.  It is not supported by ISO C90 and was not supported by\n GCC versions before GCC 3.0.  @xref{Mixed Declarations}.\n \n @item -Wundef\n @opindex Wundef\n+@opindex Wno-undef\n Warn if an undefined identifier is evaluated in an @samp{#if} directive.\n \n @item -Wno-endif-labels\n@@ -3439,22 +3501,25 @@ Do not warn whenever an @samp{#else} or an @samp{#endif} are followed by text.\n \n @item -Wshadow\n @opindex Wshadow\n+@opindex Wno-shadow\n Warn whenever a local variable shadows another local variable, parameter or\n global variable or whenever a built-in function is shadowed.\n \n @item -Wlarger-than-@var{len}\n-@opindex Wlarger-than\n+@opindex Wlarger-than-@var{len}\n Warn whenever an object of larger than @var{len} bytes is defined.\n \n @item -Wunsafe-loop-optimizations\n @opindex Wunsafe-loop-optimizations\n+@opindex Wno-unsafe-loop-optimizations\n Warn if the loop cannot be optimized because the compiler could not\n assume anything on the bounds of the loop indices.  With\n @option{-funsafe-loop-optimizations} warn if the compiler made\n such assumptions.\n \n @item -Wpointer-arith\n @opindex Wpointer-arith\n+@opindex Wno-pointer-arith\n Warn about anything that depends on the ``size of'' a function type or\n of @code{void}.  GNU C assigns these types a size of 1, for\n convenience in calculations with @code{void *} pointers and pointers\n@@ -3472,6 +3537,7 @@ example, warn if an unsigned variable is compared against zero with\n \n @item -Wbad-function-cast @r{(C only)}\n @opindex Wbad-function-cast\n+@opindex Wno-bad-function-cast\n Warn whenever a function call is cast to a non-matching type.\n For example, warn if @code{int malloc()} is cast to @code{anything *}.\n \n@@ -3487,19 +3553,22 @@ in ISO C++ 200x.  This warning is enabled by @option{-Wall}.\n \n @item -Wcast-qual\n @opindex Wcast-qual\n+@opindex Wno-cast-qual\n Warn whenever a pointer is cast so as to remove a type qualifier from\n the target type.  For example, warn if a @code{const char *} is cast\n to an ordinary @code{char *}.\n \n @item -Wcast-align\n @opindex Wcast-align\n+@opindex Wno-cast-align\n Warn whenever a pointer is cast such that the required alignment of the\n target is increased.  For example, warn if a @code{char *} is cast to\n an @code{int *} on machines where integers can only be accessed at\n two- or four-byte boundaries.\n \n @item -Wwrite-strings\n @opindex Wwrite-strings\n+@opindex Wno-write-strings\n When compiling C, give string constants the type @code{const\n char[@var{length}]} so that\n copying the address of one into a non-@code{const} @code{char *}\n@@ -3514,6 +3583,7 @@ this is why we did not make @option{-Wall} request these warnings.\n \n @item -Wclobbered\n @opindex Wclobbered\n+@opindex Wno-clobbered\n Warn for variables that might be changed by @samp{longjmp} or\n @samp{vfork}.  This warning is also enabled by @option{-Wextra}.\n \n@@ -3540,13 +3610,15 @@ integers are disabled by default in C++ unless\n \n @item -Wempty-body\n @opindex Wempty-body\n+@opindex Wno-empty-body\n Warn if an empty body occurs in an @samp{if}, @samp{else} or @samp{do\n while} statement.  Additionally, in C++, warn when an empty body occurs\n in a @samp{while} or @samp{for} statement with no whitespacing before\n the semicolon.  This warning is also enabled by @option{-Wextra}.\n \n @item -Wsign-compare\n @opindex Wsign-compare\n+@opindex Wno-sign-compare\n @cindex warning for comparison of signed and unsigned values\n @cindex comparison of signed and unsigned values, warning\n @cindex signed and unsigned values, comparison warning\n@@ -3587,6 +3659,7 @@ bit-wise operator is likely to be expected.\n \n @item -Waggregate-return\n @opindex Waggregate-return\n+@opindex Wno-aggregate-return\n Warn if any functions that return structures or unions are defined or\n called.  (In languages where you can return an array, this also elicits\n a warning.)\n@@ -3601,25 +3674,29 @@ attributes.\n \n @item -Wstrict-prototypes @r{(C only)}\n @opindex Wstrict-prototypes\n+@opindex Wno-strict-prototypes\n Warn if a function is declared or defined without specifying the\n argument types.  (An old-style function definition is permitted without\n a warning if preceded by a declaration which specifies the argument\n types.)\n \n @item -Wold-style-declaration @r{(C only)}\n @opindex Wold-style-declaration\n+@opindex Wno-old-style-declaration\n Warn for obsolescent usages, according to the C Standard, in a\n declaration. For example, warn if storage-class specifiers like\n @code{static} are not the first things in a declaration.  This warning\n is also enabled by @option{-Wextra}.\n \n @item -Wold-style-definition @r{(C only)}\n @opindex Wold-style-definition\n+@opindex Wno-old-style-definition\n Warn if an old-style function definition is used.  A warning is given\n even if there is a previous prototype.\n \n @item -Wmissing-parameter-type @r{(C only)}\n @opindex Wmissing-parameter-type\n+@opindex Wno-missing-parameter-type\n A function parameter is declared without a type specifier in K&R-style\n functions:\n \n@@ -3631,13 +3708,15 @@ This warning is also enabled by @option{-Wextra}.\n \n @item -Wmissing-prototypes @r{(C only)}\n @opindex Wmissing-prototypes\n+@opindex Wno-missing-prototypes\n Warn if a global function is defined without a previous prototype\n declaration.  This warning is issued even if the definition itself\n provides a prototype.  The aim is to detect global functions that fail\n to be declared in header files.\n \n @item -Wmissing-declarations @r{(C and C++ only)}\n @opindex Wmissing-declarations\n+@opindex Wno-missing-declarations\n Warn if a global function is defined without a previous declaration.\n Do so even if the definition itself provides a prototype.\n Use this option to detect global functions that are not declared in\n@@ -3646,8 +3725,10 @@ or for inline functions, or for functions in anonymous namespaces.\n \n @item -Wmissing-field-initializers\n @opindex Wmissing-field-initializers\n+@opindex Wno-missing-field-initializers\n @opindex W\n @opindex Wextra\n+@opindex Wno-extra\n Warn if a structure's initializer has some fields missing.  For\n example, the following code would cause such a warning, because\n @code{x.h} is implicitly zero:\n@@ -3670,6 +3751,7 @@ warnings without this one, use @samp{-Wextra -Wno-missing-field-initializers}.\n \n @item -Wmissing-noreturn\n @opindex Wmissing-noreturn\n+@opindex Wno-missing-noreturn\n Warn about functions which might be candidates for attribute @code{noreturn}.\n Note these are only possible candidates, not absolute ones.  Care should\n be taken to manually verify functions actually do not ever return before\n@@ -3679,7 +3761,9 @@ hosted C environments.\n \n @item -Wmissing-format-attribute\n @opindex Wmissing-format-attribute\n+@opindex Wno-missing-format-attribute\n @opindex Wformat\n+@opindex Wno-format\n Warn about function pointers which might be candidates for @code{format}\n attributes.  Note these are only possible candidates, not absolute ones.\n GCC will guess that function pointers with @code{format} attributes that\n@@ -3706,7 +3790,7 @@ Usually they indicate a typo in the user's code, as they have\n implementation-defined values, and should not be used in portable code.\n \n @item -Wnormalized=<none|id|nfc|nfkc>\n-@opindex Wnormalized\n+@opindex Wnormalized=\n @cindex NFC\n @cindex NFKC\n @cindex character set, input normalization\n@@ -3752,19 +3836,23 @@ unable to be fixed to display these characters distinctly.\n \n @item -Wno-deprecated-declarations\n @opindex Wno-deprecated-declarations\n+@opindex Wdeprecated-declarations\n Do not warn about uses of functions (@pxref{Function Attributes}),\n variables (@pxref{Variable Attributes}), and types (@pxref{Type\n Attributes}) marked as deprecated by using the @code{deprecated}\n attribute.\n \n @item -Wno-overflow\n @opindex Wno-overflow\n+@opindex Woverflow\n Do not warn about compile-time overflow in constant expressions.\n \n @item -Woverride-init\n @opindex Woverride-init\n+@opindex Wno-override-init\n @opindex W\n @opindex Wextra\n+@opindex Wno-extra\n Warn if an initialized field without side effects is overridden when\n using designated initializers (@pxref{Designated Inits, , Designated\n Initializers}).\n@@ -3775,6 +3863,7 @@ This warning is included in @option{-Wextra}.  To get other\n \n @item -Wpacked\n @opindex Wpacked\n+@opindex Wno-packed\n Warn if a structure is given the packed attribute, but the packed\n attribute has no effect on the layout or size of the structure.\n Such structures may be mis-aligned for little benefit.  For\n@@ -3797,22 +3886,26 @@ struct bar @{\n \n @item -Wpadded\n @opindex Wpadded\n+@opindex Wno-padded\n Warn if padding is included in a structure, either to align an element\n of the structure or to align the whole structure.  Sometimes when this\n happens it is possible to rearrange the fields of the structure to\n reduce the padding and so make the structure smaller.\n \n @item -Wredundant-decls\n @opindex Wredundant-decls\n+@opindex Wno-redundant-decls\n Warn if anything is declared more than once in the same scope, even in\n cases where multiple declaration is valid and changes nothing.\n \n @item -Wnested-externs @r{(C only)}\n @opindex Wnested-externs\n+@opindex Wno-nested-externs\n Warn if an @code{extern} declaration is encountered within a function.\n \n @item -Wunreachable-code\n @opindex Wunreachable-code\n+@opindex Wno-unreachable-code\n Warn if the compiler detects that code will never be executed.\n \n This option is intended to warn when the compiler detects that at\n@@ -3835,6 +3928,7 @@ code is to provide behavior which is selectable at compile-time.\n \n @item -Winline\n @opindex Winline\n+@opindex Wno-inline\n Warn if a function can not be inlined and it was declared as inline.\n Even with this option, the compiler will not warn about failures to\n inline functions declared in system headers.\n@@ -3848,6 +3942,7 @@ warnings produced by @option{-Winline} to appear or disappear.\n \n @item -Wno-invalid-offsetof @r{(C++ only)}\n @opindex Wno-invalid-offsetof\n+@opindex Winvalid-offsetof\n Suppress warnings from applying the @samp{offsetof} macro to a non-POD\n type.  According to the 1998 ISO C++ standard, applying @samp{offsetof}\n to a non-POD type is undefined.  In existing C++ implementations,\n@@ -3863,16 +3958,19 @@ of the C++ standard.\n \n @item -Wno-int-to-pointer-cast @r{(C only)}\n @opindex Wno-int-to-pointer-cast\n+@opindex Wint-to-pointer-cast\n Suppress warnings from casts to pointer type of an integer of a\n different size.\n \n @item -Wno-pointer-to-int-cast @r{(C only)}\n @opindex Wno-pointer-to-int-cast\n+@opindex Wpointer-to-int-cast\n Suppress warnings from casts from a pointer to an integer type of a\n different size.\n \n @item -Winvalid-pch\n @opindex Winvalid-pch\n+@opindex Wno-invalid-pch\n Warn if a precompiled header (@pxref{Precompiled Headers}) is found in\n the search path but can't be used.\n \n@@ -3907,6 +4005,7 @@ and/or writes to register variables.\n \n @item -Wdisabled-optimization\n @opindex Wdisabled-optimization\n+@opindex Wno-disabled-optimization\n Warn if a requested optimization pass is disabled.  This warning does\n not generally indicate that there is anything wrong with your code; it\n merely indicates that GCC's optimizers were unable to handle the code\n@@ -3924,11 +4023,13 @@ This option is only supported for C and Objective-C@.  It is implied by\n \n @item -Wstack-protector\n @opindex Wstack-protector\n+@opindex Wno-stack-protector\n This option is only active when @option{-fstack-protector} is active.  It\n warns about functions that will not be protected against stack smashing.\n \n @item -Woverlength-strings\n @opindex Woverlength-strings\n+@opindex Wno-overlength-strings\n Warn about string constants which are longer than the ``minimum\n maximum'' length specified in the C standard.  Modern compilers\n generally allow string constants which are much longer than the"}]}