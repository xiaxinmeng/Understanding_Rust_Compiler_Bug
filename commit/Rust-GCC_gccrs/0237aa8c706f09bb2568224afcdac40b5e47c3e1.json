{"sha": "0237aa8c706f09bb2568224afcdac40b5e47c3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzN2FhOGM3MDZmMDliYjI1NjgyMjRhZmNkYWM0MGI1ZTQ3YzNlMQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-24T13:20:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-24T13:20:13Z"}, "message": "libstdc++: Improve copysign(simd) codegen\n\nThis also resolves a test failure on aarch64 with -ffast-math and\nfixed_size<N> with large N.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h: Add missing operator~\n\toverload for simd<floating-point> to __float_bitwise_operators.\n\t* include/experimental/bits/simd_builtin.h\n\t(_SimdImplBuiltin::_S_complement): Bitcast to int (and back) to\n\timplement complement for floating-point vectors.\n\t* include/experimental/bits/simd_fixed_size.h\n\t(_SimdImplFixedSize::_S_copysign): New function, forwarding to\n\tcopysign implementation of _SimdTuple members.\n\t* include/experimental/bits/simd_math.h (copysign): Call\n\t_SimdImpl::_S_copysign for fixed_size arguments. Simplify\n\tgeneric copysign implementation using the new ~ operator.", "tree": {"sha": "ededaa5c376512293fc0b5a1e2f48b574bce73a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ededaa5c376512293fc0b5a1e2f48b574bce73a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0237aa8c706f09bb2568224afcdac40b5e47c3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0237aa8c706f09bb2568224afcdac40b5e47c3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0237aa8c706f09bb2568224afcdac40b5e47c3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0237aa8c706f09bb2568224afcdac40b5e47c3e1/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ba52849ffca26a3d461f94921b23a9cdbaea7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ba52849ffca26a3d461f94921b23a9cdbaea7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ba52849ffca26a3d461f94921b23a9cdbaea7f"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "163f1b574e20af96156ed644bf89a5ea7589c14a", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=0237aa8c706f09bb2568224afcdac40b5e47c3e1", "patch": "@@ -5189,6 +5189,12 @@ template <typename _Tp, typename _Ap>\n     return {__private_init,\n \t    _Ap::_SimdImpl::_S_bit_and(__data(__a), __data(__b))};\n   }\n+\n+template <typename _Tp, typename _Ap>\n+  _GLIBCXX_SIMD_INTRINSIC _GLIBCXX_SIMD_CONSTEXPR\n+  enable_if_t<is_floating_point_v<_Tp>, simd<_Tp, _Ap>>\n+  operator~(const simd<_Tp, _Ap>& __a)\n+  { return {__private_init, _Ap::_SimdImpl::_S_complement(__data(__a))}; }\n } // namespace __float_bitwise_operators }}}\n \n _GLIBCXX_SIMD_END_NAMESPACE"}, {"sha": "8cd338e313f077a6f289ea40a35a200f7eaad19b", "filename": "libstdc++-v3/include/experimental/bits/simd_builtin.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h?ref=0237aa8c706f09bb2568224afcdac40b5e47c3e1", "patch": "@@ -1632,7 +1632,12 @@ template <typename _Abi>\n     template <typename _Tp, size_t _Np>\n       _GLIBCXX_SIMD_INTRINSIC static constexpr _SimdWrapper<_Tp, _Np>\n       _S_complement(_SimdWrapper<_Tp, _Np> __x) noexcept\n-      { return ~__x._M_data; }\n+      {\n+\tif constexpr (is_floating_point_v<_Tp>)\n+\t  return __vector_bitcast<_Tp>(~__vector_bitcast<__int_for_sizeof_t<_Tp>>(__x));\n+\telse\n+\t  return ~__x._M_data;\n+      }\n \n     // _S_unary_minus {{{2\n     template <typename _Tp, size_t _Np>"}, {"sha": "7c2c1df77c84a4e85d5b41c47749e9c677f79e82", "filename": "libstdc++-v3/include/experimental/bits/simd_fixed_size.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h?ref=0237aa8c706f09bb2568224afcdac40b5e47c3e1", "patch": "@@ -1663,7 +1663,7 @@ template <int _Np>\n     _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, ldexp)\n     _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, fmod)\n     _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, remainder)\n-    // copysign in simd_math.h\n+    _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, copysign)\n     _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, nextafter)\n     _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, fdim)\n     _GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp, fmax)"}, {"sha": "d954e761eee24ea8d37cae70092f6f52943ad87d", "filename": "libstdc++-v3/include/experimental/bits/simd_math.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0237aa8c706f09bb2568224afcdac40b5e47c3e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_math.h?ref=0237aa8c706f09bb2568224afcdac40b5e47c3e1", "patch": "@@ -1304,6 +1304,8 @@ template <typename _Tp, typename _Abi>\n   {\n     if constexpr (simd_size_v<_Tp, _Abi> == 1)\n       return std::copysign(__x[0], __y[0]);\n+    else if constexpr (__is_fixed_size_abi_v<_Abi>)\n+      return {__private_init, _Abi::_SimdImpl::_S_copysign(__data(__x), __data(__y))};\n     else if constexpr (is_same_v<_Tp, long double> && sizeof(_Tp) == 12)\n       // Remove this case once __bit_cast is implemented via __builtin_bit_cast.\n       // It is necessary, because __signmask below cannot be computed at compile\n@@ -1315,7 +1317,7 @@ template <typename _Tp, typename _Abi>\n \tusing _V = simd<_Tp, _Abi>;\n \tusing namespace std::experimental::__float_bitwise_operators;\n \t_GLIBCXX_SIMD_USE_CONSTEXPR_API auto __signmask = _V(1) ^ _V(-1);\n-\treturn (__x & (__x ^ __signmask)) | (__y & __signmask);\n+\treturn (__x & ~__signmask) | (__y & __signmask);\n       }\n   }\n "}]}