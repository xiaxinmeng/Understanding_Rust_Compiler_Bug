{"sha": "ae5dd5f579538ba4f64f628b716019e01f887f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1ZGQ1ZjU3OTUzOGJhNGY2NGY2MjhiNzE2MDE5ZTAxZjg4N2YyYw==", "commit": {"author": {"name": "Razya Ladelsky", "email": "razya@gcc.gnu.org", "date": "2007-05-28T11:27:34Z"}, "committer": {"name": "Razya Ladelsky", "email": "razya@gcc.gnu.org", "date": "2007-05-28T11:27:34Z"}, "message": "matrix: New directory.\n\n2007-05-28  Razya Ladelsky  <razya@il.ibm.com>\n\n        * gcc.dg/matrix: New directory.\n\nFrom-SVN: r125128", "tree": {"sha": "46177d147328ca44c05153c52ef4ed9ecada81e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46177d147328ca44c05153c52ef4ed9ecada81e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5dd5f579538ba4f64f628b716019e01f887f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5dd5f579538ba4f64f628b716019e01f887f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5dd5f579538ba4f64f628b716019e01f887f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5dd5f579538ba4f64f628b716019e01f887f2c/comments", "author": null, "committer": null, "parents": [{"sha": "138e99d1a01265d110d7aa67676305bdb04f3aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138e99d1a01265d110d7aa67676305bdb04f3aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138e99d1a01265d110d7aa67676305bdb04f3aed"}], "stats": {"total": 1252, "additions": 1252, "deletions": 0}, "files": [{"sha": "12df17283a009e107f567d25446f6ef1c0c3297a", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-1.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The whole matrix VEL is flattened (3 dimensions).  */\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k, id;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+  mem_init ();\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump-times \"Flattened 3 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "318faa54ef694d2d46a438d1982a9f2c88b49ac2", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-2.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-2.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The last dimension of VEL escapes because of\n+   the assignment : vel[1][1] =...\n+   Only the two external dimensions are flattened.  */\n+\n+\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      printf (\"%x\\n\",vel[i][j]);\n+      /*if (i!=1 || j!=1)*/\n+      /*if (i==1 && j==1)\n+        continue;\n+      else\n+        free (vel[i][j]);*/\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+          printf (\"%x %d %d\\n\",vel[i][j], ARCHnodes1, sizeof (int));\n+\t}\n+    }\n+   for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+        {\n+          printf (\"%x\\n\",vel[i][j]);\n+        }\n+    }\n+\n+  printf (\"again:\\n\\n\");\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  printf (\"%x\\n\",vel[i][j]);\n+          /*for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }*/\n+\t}\n+    }\n+  /*vel[1][1] = vel[0][1];*/\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump-times \"Flattened 2 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "5990abf48a6c634e562a29d1fcdf441d09280380", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-3.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-3.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -c -fwhole-program -combine\"  } */\n+\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+void just_a_call (int *);\n+\n+/* The last dimension of VEL escapes because it was sent\n+   as argumet to just_a_call(). (external function)\n+   Only the two external dimensions are flattened.\n+   Run with -c.  */\n+\n+\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  just_a_call (vel[1][1]);\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump-times \"Flattened 2 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "7ca79ec4b5a532542b5ffae8fa07deb81213f5ab", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-4.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-4.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -c -fwhole-program -combine\"  } */\n+\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+void just_a_call (int ****);\n+\n+/* Address of VEL is taken.\n+   It is not flattened.  */\n+\n+\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  just_a_call (&vel);\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump-times \"Flattened\" 0 \"matrix-reorg\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "1398c5b429fe5568b2dcf037bcc43c2e1ebb4186", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-5.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-5.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The two inner dimesions of matrix escape because of the \n+   assignment vel[1]= ...\n+   VEL is not Flattened. */\n+\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes-1; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes-1; i++)\n+      free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  vel[1] = vel[0];\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump-times \"Flattened\" 0 \"matrix-reorg\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "3b9fceef7ac9360dfaae4be389ff8bc248aa4301", "filename": "gcc/testsuite/gcc.dg/matrix/matrix-6.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix-6.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do compile } */\n+\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The last dimension of VEL escapes because of\n+   the assignment : *vel[1] =...\n+   Only the two external dimensions are flattened.  */\n+\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  *vel[1] = (int *)d;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump-times \"Flattened 2 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "2a6e38db34152d43c55f213b1e6eb8205d2e4d7b", "filename": "gcc/testsuite/gcc.dg/matrix/matrix.exp", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,64 @@\n+#   Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+# Test the functionality of programs compiled with profile-directed block\n+# ordering using -fprofile-generate followed by -fbranch-use.\n+load_lib gcc-dg.exp\n+load_lib target-supports.exp\n+\n+set DEFAULT_MATCFLAGS \"-O3 -fipa-matrix-reorg -fdump-ipa-matrix-reorg -fwhole-program -combine\"\n+\n+# Initialize `dg'.\n+dg-init\n+\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/matrix-\\[1-6\\].\\[cS\\]]]  \\\n+        \"\" $DEFAULT_MATCFLAGS\n+\n+dg-final\n+\n+# Some targets don't support tree profiling.\n+if { ![check_profiling_available \"\"] } {\n+    return\n+}\n+\n+# The procedures in profopt.exp need these parameters.\n+set tool gcc\n+set prof_ext \"gcda gcno\"\n+\n+# Override the list defined in profopt.exp.\n+set PROFOPT_OPTIONS [list {}]\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load support procs.\n+load_lib profopt.exp\n+\n+# These are globals used by profopt-execute.  The first is options\n+# needed to generate profile data, the second is options to use the\n+# profile data.\n+set profile_option \"-fprofile-generate -O3\"\n+set feedback_option \"-fprofile-use -fipa-matrix-reorg -fdump-ipa-matrix-reorg -O3 -fwhole-program -combine\"\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/transpose-*.c]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    profopt-execute $src\n+}\n+"}, {"sha": "8969ecb2eea34bc8160fec6f82306f0ce0cc66cc", "filename": "gcc/testsuite/gcc.dg/matrix/transpose-1.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-1.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,98 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The whole matrix VEL is flattened (3 dimensions).  \n+   All dimensions are transposed : dim 0 -> dim 2\n+                                   dim 1 -> dim 0\n+                                   dim 2 -> dim 1 \n+*/\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\t{\n+\t  for (k = 0; k < 2; k++)\n+\t{\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[k][i][j]);\n+\t}\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump-times \"Flattened 3 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final-use { scan-ipa-dump-times \"Transposed\" 3 \"matrix-reorg\"  } } */\n+/* { dg-final-use { cleanup-ipa-dump \"matrix-reorg\" } } */\n+"}, {"sha": "5943781ca5f6ad9f876b59b4258e546fccc45ce4", "filename": "gcc/testsuite/gcc.dg/matrix/transpose-2.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-2.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,95 @@\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The whole matrix VEL is flattened (3 dimensions).  \n+   No transposing is necessary.  */\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (j = 0; j < 2; j++)\n+    {\n+      for (i = 0; i < 4; i++)\n+\t{\n+\t  for (k = 0; k < 2; k++)\n+\t{\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[k][k][k]);\n+\t}\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump-times \"Flattened 3 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final-use { scan-ipa-dump-times \"Transposed\" 0 \"matrix-reorg\"  } } */\n+/* { dg-final-use { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "5defdb8fd17647af474cb3f25dd45c37f41bff25", "filename": "gcc/testsuite/gcc.dg/matrix/transpose-3.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-3.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,101 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+/* The inner most dimension escapes. \n+   The two external dimensions are flattened \n+   after being transposed.  */\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (j = 0; j < 4; j++)\n+    {\n+      for (i = 0; i < 3; i++)\n+\t{\n+\t  for (k = 0; k < 2; k++)\n+\t   {\n+ \t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[k][i][j]);\n+           }\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  vel[0][0]=vel[1][1];\n+\n+  for (i = 0; i < 2; i++)\n+    for (j = 0; j < 3; j++)\n+      if (i==1 && j==1)\n+        continue;\n+      else\n+        free (vel[i][j]);\n+\n+  for (i = 0; i < 2; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  signed int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+              printf (\"acc to dim2 \");\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  printf (\"\\n\");\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump-times \"Flattened 2 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final-use { scan-ipa-dump-times \"Transposed\" 2 \"matrix-reorg\"  } } */\n+/* { dg-final-use { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "f6eb4657fdc213f51165c2875effcdd06172f8cf", "filename": "gcc/testsuite/gcc.dg/matrix/transpose-4.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-4.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,100 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The whole matrix VEL is flattened (3 dimensions).  \n+   The two inner dimensions are transposed.  \n+                                    dim 1 -> dim 2\n+                                    dim 2 -> dim 1\n+*/\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (j = 0; j < 4; j++)\n+    {\n+      for (i = 0; i < 2; i++)\n+\t{\n+\t  for (k = 0; k < 3; k++)\n+\t{\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][k][j]);\n+\t}\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < 2; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < 2; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  signed int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+              printf (\"acc to dim2 \");\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  printf (\"\\n\");\n+\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump-times \"Flattened 3 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final-use { scan-ipa-dump-times \"Transposed\" 2 \"matrix-reorg\"  } } */\n+/* { dg-final-use { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "27e8476288902223ecfe41b24e740df1f22f5b9e", "filename": "gcc/testsuite/gcc.dg/matrix/transpose-5.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-5.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,96 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The whole matrix VEL is flattened (3 dimensions).  \n+   The dimensions are NOT transposed.  */\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (j = 0; j < 3; j++)\n+    {\n+      for (i = 0; i < 2; i++)\n+\t{\n+\t  for (k = 0; k < 4; k++)\n+\t{\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][j][k]);\n+\t}\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < 2; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < 2; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  signed int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+              printf (\"acc to dim2 \");\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  printf (\"\\n\");\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump-times \"Flattened 3 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final-use { scan-ipa-dump-times \"Transposed\" 0 \"matrix-reorg\"  } } */\n+/* { dg-final-use { cleanup-ipa-dump \"matrix-reorg\" } } */"}, {"sha": "f7c6a8a72a2e79865aec59e20eadd7a00c137f4e", "filename": "gcc/testsuite/gcc.dg/matrix/transpose-6.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd5f579538ba4f64f628b716019e01f887f2c/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Ftranspose-6.c?ref=ae5dd5f579538ba4f64f628b716019e01f887f2c", "patch": "@@ -0,0 +1,96 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+#include <string.h>\n+\n+void mem_init (void);\n+int ARCHnodes, ARCHnodes1;\n+int ***vel;\n+\n+/* The whole matrix VEL is flattened (3 dimensions).  \n+   The dimensions are NOT transposed.  */\n+/*--------------------------------------------------------------------------*/\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i, j, k;\n+\n+  ARCHnodes = 2;\n+  ARCHnodes1 = 4;\n+\n+/* Dynamic memory allocations and initializations */\n+\n+  mem_init ();\n+\n+  for (j = 0; j < 3; j++)\n+    {\n+      for (i = 0; i < 2; i++)\n+\t{\n+\t  for (k = 0; k < 3; k++)\n+\t{\n+\t    printf (\"[%d][%d][%d]=%d \", i, j, k, vel[i][k][k]);\n+\t}\n+\t  printf (\"\\n\");\n+\t}\n+      printf (\"\\n\");\n+    }\n+  for (i = 0; i < 2; i++)\n+    for (j = 0; j < 3; j++)\n+      free (vel[i][j]);\n+\n+  for (i = 0; i < 2; i++)\n+    free (vel[i]);\n+\n+  free (vel);\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Dynamic memory allocations and initializations                           */\n+\n+void\n+mem_init (void)\n+{\n+\n+  signed int i, j, k,d;\n+ \n+  d = 0;\n+  vel = (int ***) malloc (ARCHnodes * sizeof (int **));\n+\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      vel[i] = (int **) malloc (3 * sizeof (int *));\n+      if (vel[i] == (int **) NULL)\n+\t{\n+\t  fprintf (stderr, \"malloc failed for vel[%d]\\n\", i);\n+\t  fflush (stderr);\n+\t  exit (0);\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  vel[i][j] = (int *) malloc (ARCHnodes1 * sizeof (int));\n+\t}\n+    }\n+  for (i = 0; i < ARCHnodes; i++)\n+    {\n+      for (j = 0; j < 3; j++)\n+\t{\n+\t  for (k = 0; k < ARCHnodes1; k++)\n+\t    {\n+              printf (\"acc to dim2 \");\n+\t      vel[i][j][k] = d;\n+\t      d++;\n+\t    }\n+\t}\n+    }\n+  printf (\"\\n\");\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump-times \"Flattened 3 dimensions\" 1 \"matrix-reorg\"  } } */\n+/* { dg-final-use { scan-ipa-dump-times \"Transposed\" 0 \"matrix-reorg\"  } } */\n+/* { dg-final-use { cleanup-ipa-dump \"matrix-reorg\" } } */"}]}