{"sha": "e004f2f76e03ff21d9c834302098db16133ed3b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwNGYyZjc2ZTAzZmYyMWQ5YzgzNDMwMjA5OGRiMTYxMzNlZDNiOQ==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-10-25T05:00:53Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2000-10-25T05:00:53Z"}, "message": "alias.c: Include basic-block.h.\n\n\t* alias.c: Include basic-block.h.\n\t(loop_p): New function.\n\t(mark_constant_function): Use it.\n\t* Makefile.in (alias.o): Update dependencies.\n\nFrom-SVN: r37044", "tree": {"sha": "8b38b5f56630ac29602da88b70cd3a1d2553583d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b38b5f56630ac29602da88b70cd3a1d2553583d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e004f2f76e03ff21d9c834302098db16133ed3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e004f2f76e03ff21d9c834302098db16133ed3b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e004f2f76e03ff21d9c834302098db16133ed3b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e004f2f76e03ff21d9c834302098db16133ed3b9/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "842a07880fd9628643e75042943f1a4bb7ecc1e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842a07880fd9628643e75042943f1a4bb7ecc1e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842a07880fd9628643e75042943f1a4bb7ecc1e6"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "e9e2a1c914409a078dd10bf7ce7856d0058ca4f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004f2f76e03ff21d9c834302098db16133ed3b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004f2f76e03ff21d9c834302098db16133ed3b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e004f2f76e03ff21d9c834302098db16133ed3b9", "patch": "@@ -1,3 +1,10 @@\n+Wed Oct 25 01:02:44 EDT 2000  John Wehle  (john@feith.com)\n+\n+\t* alias.c: Include basic-block.h.\n+\t(loop_p): New function.\n+\t(mark_constant_function): Use it.\n+\t* Makefile.in (alias.o): Update dependencies.\n+\n 2000-10-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/mn10300/mn10300.c (secondary_reload_class): Treat pseudos"}, {"sha": "c7cab3c7aa02f6fd822928d2303c103c6e9813ff", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004f2f76e03ff21d9c834302098db16133ed3b9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004f2f76e03ff21d9c834302098db16133ed3b9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e004f2f76e03ff21d9c834302098db16133ed3b9", "patch": "@@ -1398,8 +1398,8 @@ reorg.o : reorg.c $(CONFIG_H) system.h $(RTL_H) conditions.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(INSN_ATTR_H) insn-flags.h \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h\n alias.o : alias.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h \\\n-   $(REGS_H) toplev.h output.h $(EXPR_H) insn-flags.h $(GGC_H) function.h \\\n-   cselib.h $(TREE_H)\n+   $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h $(EXPR_H) insn-flags.h \\\n+   $(GGC_H) function.h cselib.h $(TREE_H)\n regmove.o : regmove.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) insn-flags.h $(BASIC_BLOCK_H) toplev.h"}, {"sha": "28016d3245a4881d03a18205c8b6168e31dd099c", "filename": "gcc/alias.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e004f2f76e03ff21d9c834302098db16133ed3b9/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e004f2f76e03ff21d9c834302098db16133ed3b9/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e004f2f76e03ff21d9c834302098db16133ed3b9", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n+#include \"basic-block.h\"\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n@@ -105,6 +106,8 @@ static int aliases_everything_p         PARAMS ((rtx));\n static int write_dependence_p           PARAMS ((rtx, rtx, int));\n static int nonlocal_mentioned_p         PARAMS ((rtx));\n \n+static int loop_p                       PARAMS ((void));\n+\n /* Set up all info needed to perform alias analysis on memory references.  */\n \n /* Returns the size in bytes of the mode of X.  */\n@@ -1863,6 +1866,96 @@ nonlocal_mentioned_p (x)\n   return 0;\n }\n \n+/* Return non-zero if a loop (natural or otherwise) is present.\n+   Inspired by Depth_First_Search_PP described in:\n+\n+     Advanced Compiler Design and Implementation\n+     Steven Muchnick\n+     Morgan Kaufmann, 1997\n+\n+   and heavily borrowed from flow_depth_first_order_compute.  */\n+\n+static int\n+loop_p ()\n+{\n+  edge *stack;\n+  int *pre;\n+  int *post;\n+  int sp;\n+  int prenum = 1;\n+  int postnum = 1;\n+  sbitmap visited;\n+\n+  /* Allocate the preorder and postorder number arrays.  */\n+  pre = (int *) xcalloc (n_basic_blocks, sizeof (int));\n+  post = (int *) xcalloc (n_basic_blocks, sizeof (int));\n+\n+  /* Allocate stack for back-tracking up CFG.  */\n+  stack = (edge *) xmalloc ((n_basic_blocks + 1) * sizeof (edge));\n+  sp = 0;\n+\n+  /* Allocate bitmap to track nodes that have been visited.  */\n+  visited = sbitmap_alloc (n_basic_blocks);\n+\n+  /* None of the nodes in the CFG have been visited yet.  */\n+  sbitmap_zero (visited);\n+\n+  /* Push the first edge on to the stack.  */\n+  stack[sp++] = ENTRY_BLOCK_PTR->succ;\n+\n+  while (sp)\n+    {\n+      edge e;\n+      basic_block src;\n+      basic_block dest;\n+\n+      /* Look at the edge on the top of the stack.  */\n+      e = stack[sp - 1];\n+      src = e->src;\n+      dest = e->dest;\n+\n+      /* Check if the edge destination has been visited yet.  */\n+      if (dest != EXIT_BLOCK_PTR && ! TEST_BIT (visited, dest->index))\n+\t{\n+\t  /* Mark that we have visited the destination.  */\n+\t  SET_BIT (visited, dest->index);\n+\n+\t  pre[dest->index] = prenum++;\n+\n+\t  if (dest->succ)\n+\t    {\n+\t      /* Since the DEST node has been visited for the first\n+\t\t time, check its successors.  */\n+\t      stack[sp++] = dest->succ;\n+\t    }\n+\t  else\n+\t    post[dest->index] = postnum++;\n+\t}\n+      else\n+\t{\n+\t  if (dest != EXIT_BLOCK_PTR\n+\t      && pre[src->index] >= pre[dest->index]\n+\t      && post[dest->index] == 0)\n+\t    break;\n+\n+\t  if (! e->succ_next && src != ENTRY_BLOCK_PTR)\n+\t    post[src->index] = postnum++;\n+\n+\t  if (e->succ_next)\n+\t    stack[sp - 1] = e->succ_next;\n+\t  else\n+\t    sp--;\n+\t}\n+    }\n+\n+  free (pre);\n+  free (post);\n+  free (stack);\n+  sbitmap_free (visited);\n+\n+  return sp;\n+}\n+\n /* Mark the function if it is constant.  */\n \n void\n@@ -1878,6 +1971,10 @@ mark_constant_function ()\n       || TYPE_MODE (TREE_TYPE (current_function_decl)) == VOIDmode)\n     return;\n \n+  /* A loop might not return which counts as a side effect.  */\n+  if (loop_p ())\n+    return;\n+\n   nonlocal_mentioned = 0;\n \n   init_alias_analysis ();"}]}