{"sha": "93f238cea15b50c7e069c8b909102bb5b5202e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmMjM4Y2VhMTViNTBjN2UwNjljOGI5MDkxMDJiYjViNTIwMmU2Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-10-15T18:29:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-10-15T18:29:54Z"}, "message": "re PR tree-optimization/33136 (wrong code due to alias with allocation in loop)\n\n\tPR tree-optimization/33136\n\t* opts.c (decode_options): Don't enable flag_ipa_type_escape.\n\n\t* gcc.c-torture/execute/20070824-1.c: New test.\n\t* gcc.dg/pr33136-1.c: New test.\n\t* gcc.dg/pr33136-2.c: New test.\n\t* gcc.dg/pr33136-3.c: New test.\n\nFrom-SVN: r129366", "tree": {"sha": "5055893c6fdc01eadea5452c37ad27230ad97805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5055893c6fdc01eadea5452c37ad27230ad97805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f238cea15b50c7e069c8b909102bb5b5202e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f238cea15b50c7e069c8b909102bb5b5202e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f238cea15b50c7e069c8b909102bb5b5202e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f238cea15b50c7e069c8b909102bb5b5202e6f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3afcaaf4e901387d270aabcce1966a82a5b680d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afcaaf4e901387d270aabcce1966a82a5b680d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3afcaaf4e901387d270aabcce1966a82a5b680d6"}], "stats": {"total": 212, "additions": 211, "deletions": 1}, "files": [{"sha": "4ba02e47fcbcc752c06b8eba74ad04b4cc747803", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -1,3 +1,8 @@\n+2007-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33136\n+\t* opts.c (decode_options): Don't enable flag_ipa_type_escape.\n+\n 2007-10-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/33735"}, {"sha": "f93c746bd97818c10dc3cec258038e39576bb125", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -830,7 +830,6 @@ decode_options (unsigned int argc, const char **argv)\n       flag_cse_follow_jumps = 1;\n       flag_gcse = 1;\n       flag_expensive_optimizations = 1;\n-      flag_ipa_type_escape = 1;\n       flag_rerun_cse_after_loop = 1;\n       flag_caller_saves = 1;\n       flag_peephole2 = 1;"}, {"sha": "63f57c486d1c2e462bf4c4b33484beba41a7c368", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -1,3 +1,11 @@\n+2007-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33136\n+\t* gcc.c-torture/execute/20070824-1.c: New test.\n+\t* gcc.dg/pr33136-1.c: New test.\n+\t* gcc.dg/pr33136-2.c: New test.\n+\t* gcc.dg/pr33136-3.c: New test.\n+\n 2007-10-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/33735"}, {"sha": "74eb58c05b961dbac4e1aff504a12110fb20d84f", "filename": "gcc/testsuite/gcc.c-torture/execute/20070824-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20070824-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20070824-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20070824-1.c?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/33136 */\n+\n+extern void abort (void);\n+\n+struct S\n+{\n+  struct S *a;\n+  int b;\n+};\n+\n+int\n+main (void)\n+{\n+  struct S *s = (struct S *) 0, **p, *n;\n+  for (p = &s; *p; p = &(*p)->a);\n+  n = (struct S *) __builtin_alloca (sizeof (*n));\n+  n->a = *p;\n+  n->b = 1;\n+  *p = n;\n+\n+  if (!s)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d07c97eb7e94b591d52cac764a82c80005317ff8", "filename": "gcc/testsuite/gcc.dg/pr33136-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-1.c?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -0,0 +1,54 @@\n+/* PR tree-optimization/33136 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+struct S\n+{\n+  struct S *a;\n+  int b;\n+  float f;\n+};\n+\n+static struct S s;\n+\n+static int *\n+__attribute__((noinline, const))\n+foo (void)\n+{\n+  return &s.b;\n+}\n+\n+float\n+__attribute__((noinline))\n+bar (float *f)\n+{\n+  s.f = 1.0;\n+  *f = 4.0;\n+  return s.f;\n+}\n+\n+int\n+__attribute__((noinline))\n+baz (int *x)\n+{\n+  s.b = 1;\n+  *x = 4;\n+  return s.b;\n+}\n+\n+int\n+t (void)\n+{\n+  float f = 8.0;\n+  return bar (&f) + baz (foo ());\n+}\n+\n+int\n+main (void)\n+{\n+  if (t () != 5)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "760b5a06fdd518f2a450c1f2323c09a1b0ad4ff5", "filename": "gcc/testsuite/gcc.dg/pr33136-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-2.c?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -0,0 +1,60 @@\n+/* PR tree-optimization/33136 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+struct S\n+{\n+  void *a;\n+  int b;\n+  int *c;\n+};\n+static int d, e;\n+\n+static struct S s;\n+\n+static int *\n+__attribute__((noinline, const))\n+foo (void)\n+{\n+  return &s.b;\n+}\n+\n+int *\n+__attribute__((noinline))\n+bar (int **f)\n+{\n+  s.c = &d;\n+  *f = &e;\n+  /* As nothing ever takes the address of any int * field in struct S,\n+     the write to *f can't alias with the s.c field.  */\n+  return s.c;\n+}\n+\n+int\n+__attribute__((noinline))\n+baz (int *x)\n+{\n+  s.b = 1;\n+  *x = 4;\n+  /* Function foo takes address of an int field in struct S,\n+     so *x can alias with the s.b field (and it does in this testcase).  */\n+  return s.b;\n+}\n+\n+int\n+__attribute__((noinline))\n+t (void)\n+{\n+  int *f = (int *) 0;\n+  return 10 * (bar (&f) != &d) + baz (foo ());\n+}\n+\n+int\n+main (void)\n+{\n+  if (t () != 4)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "fcb5972ebf0c9631964bfcb5ccf25e8447dfc1aa", "filename": "gcc/testsuite/gcc.dg/pr33136-3.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f238cea15b50c7e069c8b909102bb5b5202e6f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33136-3.c?ref=93f238cea15b50c7e069c8b909102bb5b5202e6f", "patch": "@@ -0,0 +1,60 @@\n+/* PR tree-optimization/33136 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+struct S\n+{\n+  void *a;\n+  int b[3];\n+  double *c;\n+};\n+static double d, e;\n+\n+static struct S s;\n+\n+static int *\n+__attribute__((noinline, const))\n+foo (void)\n+{\n+  return (int *) &s.b;\n+}\n+\n+double *\n+__attribute__((noinline))\n+bar (double **f)\n+{\n+  s.c = &d;\n+  *f = &e;\n+  /* As nothing ever takes the address of any double * field in struct S,\n+     the write to *f can't alias with the s.c field.  */\n+  return s.c;\n+}\n+\n+int\n+__attribute__((noinline))\n+baz (int *x)\n+{\n+  s.b[0] = 1;\n+  *x = 4;\n+  /* Function foo takes address of an int array field in struct S,\n+     so *x can alias with the s.b field (and it does in this testcase).  */\n+  return s.b[0];\n+}\n+\n+int\n+__attribute__((noinline))\n+t (void)\n+{\n+  double *f = (double *) 0;\n+  return 10 * (bar (&f) != &d) + baz (foo ());\n+}\n+\n+int\n+main (void)\n+{\n+  if (t () != 4)\n+    abort ();\n+  return 0;\n+}"}]}