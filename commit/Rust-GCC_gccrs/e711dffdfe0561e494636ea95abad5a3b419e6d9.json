{"sha": "e711dffdfe0561e494636ea95abad5a3b419e6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxMWRmZmRmZTA1NjFlNDk0NjM2ZWE5NWFiYWQ1YTNiNDE5ZTZkOQ==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2014-01-27T19:21:02Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-01-27T19:21:02Z"}, "message": "avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd): New.\n\ngcc/\n        * config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd): New.\n\t(_mm512_mask_prefetch_i64gather_pd): Ditto.\n\t(_mm512_prefetch_i32scatter_pd): Ditto.\n\t(_mm512_mask_prefetch_i32scatter_pd): Ditto.\n\t(_mm512_prefetch_i64scatter_pd): Ditto.\n\t(_mm512_mask_prefetch_i64scatter_pd): Ditto.\n\t(_mm512_mask_prefetch_i32gather_ps): Fix operand type.\n\t(_mm512_mask_prefetch_i64gather_ps): Ditto.\n\t(_mm512_prefetch_i32scatter_ps): Ditto.\n\t(_mm512_mask_prefetch_i32scatter_ps): Ditto.\n\t(_mm512_prefetch_i64scatter_ps): Ditto.\n\t(_mm512_mask_prefetch_i64scatter_ps): Ditto.\n\t* config/i386/i386-builtin-types.def: Define\n\tVOID_FTYPE_QI_V8SI_PCINT64_INT_INT and VOID_FTYPE_QI_V8DI_PCINT64_INT_INT.\n\t* config/i386/i386.c (ix86_builtins): Define IX86_BUILTIN_GATHERPFQPD,\n\tIX86_BUILTIN_GATHERPFDPD, IX86_BUILTIN_SCATTERPFDPD,\n\tIX86_BUILTIN_SCATTERPFQPD.\n\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_gatherpfdpd,\n\t__builtin_ia32_gatherpfdps, __builtin_ia32_gatherpfqpd,\n\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdpd,\n\t__builtin_ia32_scatterpfdps, __builtin_ia32_scatterpfqpd,\n\t__builtin_ia32_scatterpfqps.\n\t(ix86_expand_builtin): Expand new built-ins.\n\t* config/i386/sse.md (avx512pf_gatherpf<mode>): Add SF suffix,\n\tfix memory access data type.\n\t(*avx512pf_gatherpf<mode>_mask): Ditto.\n\t(*avx512pf_gatherpf<mode>): Ditto.\n\t(avx512pf_scatterpf<mode>): Ditto.\n\t(*avx512pf_scatterpf<mode>_mask): Ditto.\n\t(*avx512pf_scatterpf<mode>): Ditto.\n\t(GATHER_SCATTER_SF_MEM_MODE): New.\n\t(avx512pf_gatherpf<mode>df): Ditto.\n\t(*avx512pf_gatherpf<mode>df_mask): Ditto.\n\t(*avx512pf_scatterpf<mode>df): Ditto.\n\ntestsuite/\n        * gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: New.\n\t* gcc.target/i386/avx512pf-vgatherpf0qpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1dpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1qpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf0dpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf0qpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf1dpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vscatterpf1qpd-1.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add new built-ins, fix AVX-512ER\n\tbuilt-ins roudning immediate.\n\t* gcc.target/i386/sse-22.c: Add new built-ins.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/avx-1.c: Ditto.\n\nFrom-SVN: r207149", "tree": {"sha": "366432d5179816ff167c45857622ddee8b31f542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366432d5179816ff167c45857622ddee8b31f542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e711dffdfe0561e494636ea95abad5a3b419e6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e711dffdfe0561e494636ea95abad5a3b419e6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e711dffdfe0561e494636ea95abad5a3b419e6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e711dffdfe0561e494636ea95abad5a3b419e6d9/comments", "author": null, "committer": null, "parents": [{"sha": "fb1ca954c03cfc4664a4b587029b8845b22a2455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1ca954c03cfc4664a4b587029b8845b22a2455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1ca954c03cfc4664a4b587029b8845b22a2455"}], "stats": {"total": 524, "additions": 493, "deletions": 31}, "files": [{"sha": "da99a66b0fa372a2484e576732798b26647be84b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -1,3 +1,40 @@\n+2014-01-27  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * config/i386/avx512pfintrin.h (_mm512_mask_prefetch_i32gather_pd): New.\n+\t(_mm512_mask_prefetch_i64gather_pd): Ditto.\n+\t(_mm512_prefetch_i32scatter_pd): Ditto.\n+\t(_mm512_mask_prefetch_i32scatter_pd): Ditto.\n+\t(_mm512_prefetch_i64scatter_pd): Ditto.\n+\t(_mm512_mask_prefetch_i64scatter_pd): Ditto.\n+\t(_mm512_mask_prefetch_i32gather_ps): Fix operand type.\n+\t(_mm512_mask_prefetch_i64gather_ps): Ditto.\n+\t(_mm512_prefetch_i32scatter_ps): Ditto.\n+\t(_mm512_mask_prefetch_i32scatter_ps): Ditto.\n+\t(_mm512_prefetch_i64scatter_ps): Ditto.\n+\t(_mm512_mask_prefetch_i64scatter_ps): Ditto.\n+\t* config/i386/i386-builtin-types.def: Define\n+\tVOID_FTYPE_QI_V8SI_PCINT64_INT_INT and VOID_FTYPE_QI_V8DI_PCINT64_INT_INT.\n+\t* config/i386/i386.c (ix86_builtins): Define IX86_BUILTIN_GATHERPFQPD,\n+\tIX86_BUILTIN_GATHERPFDPD, IX86_BUILTIN_SCATTERPFDPD,\n+\tIX86_BUILTIN_SCATTERPFQPD.\n+\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_gatherpfdpd,\n+\t__builtin_ia32_gatherpfdps, __builtin_ia32_gatherpfqpd,\n+\t__builtin_ia32_gatherpfqps, __builtin_ia32_scatterpfdpd,\n+\t__builtin_ia32_scatterpfdps, __builtin_ia32_scatterpfqpd,\n+\t__builtin_ia32_scatterpfqps.\n+\t(ix86_expand_builtin): Expand new built-ins.\n+\t* config/i386/sse.md (avx512pf_gatherpf<mode>): Add SF suffix,\n+\tfix memory access data type.\n+\t(*avx512pf_gatherpf<mode>_mask): Ditto.\n+\t(*avx512pf_gatherpf<mode>): Ditto.\n+\t(avx512pf_scatterpf<mode>): Ditto.\n+\t(*avx512pf_scatterpf<mode>_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>): Ditto.\n+\t(GATHER_SCATTER_SF_MEM_MODE): New.\n+\t(avx512pf_gatherpf<mode>df): Ditto.\n+\t(*avx512pf_gatherpf<mode>df_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>df): Ditto.\n+\n 2014-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/59934"}, {"sha": "bc7598e7ae1e48dc6c8e10a889197cedda4f7f0e", "filename": "gcc/config/i386/avx512pfintrin.h", "status": "modified", "additions": 98, "deletions": 15, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -46,76 +46,159 @@ typedef unsigned char  __mmask8;\n typedef unsigned short __mmask16;\n \n #ifdef __OPTIMIZE__\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i32gather_pd (__m256i index, __mmask8 mask,\n+\t\t\t\t   void *addr, int scale, int hint)\n+{\n+  __builtin_ia32_gatherpfdpd (mask, (__v8si) index, (long long const *) addr,\n+\t\t\t      scale, hint);\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i32gather_ps (__m512i index, __mmask16 mask,\n-\t\t\t\t   int const *addr, int scale, int hint)\n+\t\t\t\t   void *addr, int scale, int hint)\n+{\n+  __builtin_ia32_gatherpfdps (mask, (__v16si) index, (int const *) addr,\n+\t\t\t      scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i64gather_pd (__m512i index, __mmask8 mask,\n+\t\t\t\t   void *addr, int scale, int hint)\n {\n-  __builtin_ia32_gatherpfdps (mask, (__v16si) index, addr, scale, hint);\n+  __builtin_ia32_gatherpfqpd (mask, (__v8di) index, (long long const *) addr,\n+\t\t\t      scale, hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i64gather_ps (__m512i index, __mmask8 mask,\n-\t\t\t\t   int const *addr, int scale, int hint)\n+\t\t\t\t   void *addr, int scale, int hint)\n {\n-  __builtin_ia32_gatherpfqps (mask, (__v8di) index, addr, scale, hint);\n+  __builtin_ia32_gatherpfqps (mask, (__v8di) index, (int const *) addr,\n+\t\t\t      scale, hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_prefetch_i32scatter_ps (int const *addr, __m512i index, int scale,\n+_mm512_prefetch_i32scatter_pd (void *addr, __m256i index, int scale,\n \t\t\t       int hint)\n {\n-  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) index, addr, scale,\n-\t\t\t       hint);\n+  __builtin_ia32_scatterpfdpd ((__mmask8) 0xFF, (__v8si) index, \n+\t\t\t       (long long const *)addr, scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i32scatter_ps (void *addr, __m512i index, int scale,\n+\t\t\t       int hint)\n+{\n+  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) index, (int const *) addr,\n+\t\t\t       scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i32scatter_pd (void *addr, __mmask8 mask,\n+\t\t\t\t    __m256i index, int scale, int hint)\n+{\n+  __builtin_ia32_scatterpfdpd (mask, (__v8si) index, (long long const *) addr,\n+\t\t\t       scale, hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i32scatter_ps (int const *addr, __mmask16 mask,\n+_mm512_mask_prefetch_i32scatter_ps (void *addr, __mmask16 mask,\n \t\t\t\t    __m512i index, int scale, int hint)\n {\n-  __builtin_ia32_scatterpfdps (mask, (__v16si) index, addr, scale, hint);\n+  __builtin_ia32_scatterpfdps (mask, (__v16si) index, (int const *) addr,\n+\t\t\t       scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_prefetch_i64scatter_pd (void *addr, __m512i index, int scale,\n+\t\t\t       int hint)\n+{\n+  __builtin_ia32_scatterpfqpd ((__mmask8) 0xFF, (__v8di) index, (long long const *) addr,\n+\t\t\t       scale, hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_prefetch_i64scatter_ps (int const *addr, __m512i index, int scale,\n+_mm512_prefetch_i64scatter_ps (void *addr, __m512i index, int scale,\n \t\t\t       int hint)\n {\n-  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) index, addr, scale,\n-\t\t\t       hint);\n+  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) index, (int const *) addr,\n+\t\t\t       scale, hint);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_prefetch_i64scatter_pd (void *addr, __mmask16 mask,\n+\t\t\t\t    __m512i index, int scale, int hint)\n+{\n+  __builtin_ia32_scatterpfqpd (mask, (__v8di) index, (long long const *) addr,\n+\t\t\t       scale, hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_prefetch_i64scatter_ps (int const *addr, __mmask16 mask,\n+_mm512_mask_prefetch_i64scatter_ps (void *addr, __mmask16 mask,\n \t\t\t\t    __m512i index, int scale, int hint)\n {\n-  __builtin_ia32_scatterpfqps (mask, (__v8di) index, addr, scale, hint);\n+  __builtin_ia32_scatterpfqps (mask, (__v8di) index, (int const *) addr,\n+\t\t\t       scale, hint);\n }\n+\n #else\n+#define _mm512_mask_prefetch_i32gather_pd(INDEX, MASK, ADDR, SCALE, HINT)    \\\n+  __builtin_ia32_gatherpfdpd ((__mmask8)MASK, (__v8si)(__m256i)INDEX,\t     \\\n+\t\t\t      (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_mask_prefetch_i32gather_ps(INDEX, MASK, ADDR, SCALE, HINT)    \\\n-  __builtin_ia32_gatherpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,\t     \\\n+  __builtin_ia32_gatherpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,      \\\n \t\t\t      (int const *)ADDR, (int)SCALE, (int)HINT)\n \n+#define _mm512_mask_prefetch_i64gather_pd(INDEX, MASK, ADDR, SCALE, HINT)    \\\n+  __builtin_ia32_gatherpfqpd ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t      (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_mask_prefetch_i64gather_ps(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfqps ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n \t\t\t      (int const *)ADDR, (int)SCALE, (int)HINT)\n \n+#define _mm512_prefetch_i32scatter_pd(ADDR, INDEX, SCALE, HINT)              \\\n+  __builtin_ia32_scatterpfdpd ((__mmask8)0xFF, (__v8si)(__m256i)INDEX,       \\\n+\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_prefetch_i32scatter_ps(ADDR, INDEX, SCALE, HINT)              \\\n   __builtin_ia32_scatterpfdps ((__mmask16)0xFFFF, (__v16si)(__m512i)INDEX,   \\\n \t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n \n+#define _mm512_mask_prefetch_i32scatter_pd(ADDR, MASK, INDEX, SCALE, HINT)   \\\n+  __builtin_ia32_scatterpfdpd ((__mmask8)MASK, (__v8si)(__m256i)INDEX,       \\\n+\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_mask_prefetch_i32scatter_ps(ADDR, MASK, INDEX, SCALE, HINT)   \\\n   __builtin_ia32_scatterpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,     \\\n \t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n \n+#define _mm512_prefetch_i64scatter_pd(ADDR, INDEX, SCALE, HINT)              \\\n+  __builtin_ia32_scatterpfqpd ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_prefetch_i64scatter_ps(ADDR, INDEX, SCALE, HINT)              \\\n   __builtin_ia32_scatterpfqps ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n \t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n \n+#define _mm512_mask_prefetch_i64scatter_pd(ADDR, MASK, INDEX, SCALE, HINT)   \\\n+  __builtin_ia32_scatterpfqpd ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n+\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\n #define _mm512_mask_prefetch_i64scatter_ps(ADDR, MASK, INDEX, SCALE, HINT)   \\\n   __builtin_ia32_scatterpfqps ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n \t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)"}, {"sha": "f3c658b61c074d39959a78abd87cb14766ae8e0d", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -733,7 +733,9 @@ DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8SI, V8DI, INT)\n DEF_FUNCTION_TYPE (VOID, PINT, QI, V8DI, V8SI, INT)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8DI, V8DI, INT)\n \n+DEF_FUNCTION_TYPE (VOID, QI, V8SI, PCINT64, INT, INT)\n DEF_FUNCTION_TYPE (VOID, HI, V16SI, PCINT, INT, INT)\n+DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCINT64, INT, INT)\n DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCINT, INT, INT)\n \n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)"}, {"sha": "a390b19ebdd627fd686d59fc8e3a492af092bc9e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -28406,9 +28406,13 @@ enum ix86_builtins\n   IX86_BUILTIN_SCATTERSIV8DI,\n \n   /* AVX512PF */\n+  IX86_BUILTIN_GATHERPFQPD,\n   IX86_BUILTIN_GATHERPFDPS,\n+  IX86_BUILTIN_GATHERPFDPD,\n   IX86_BUILTIN_GATHERPFQPS,\n+  IX86_BUILTIN_SCATTERPFDPD,\n   IX86_BUILTIN_SCATTERPFDPS,\n+  IX86_BUILTIN_SCATTERPFQPD,\n   IX86_BUILTIN_SCATTERPFQPS,\n \n   /* AVX-512ER */\n@@ -30939,15 +30943,27 @@ ix86_init_mmx_sse_builtins (void)\n \t       IX86_BUILTIN_SCATTERDIV8DI);\n \n   /* AVX512PF */\n+  def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfdpd\",\n+\t       VOID_FTYPE_QI_V8SI_PCINT64_INT_INT,\n+\t       IX86_BUILTIN_GATHERPFDPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfdps\",\n \t       VOID_FTYPE_HI_V16SI_PCINT_INT_INT,\n \t       IX86_BUILTIN_GATHERPFDPS);\n+  def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfqpd\",\n+\t       VOID_FTYPE_QI_V8DI_PCINT64_INT_INT,\n+\t       IX86_BUILTIN_GATHERPFQPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfqps\",\n \t       VOID_FTYPE_QI_V8DI_PCINT_INT_INT,\n \t       IX86_BUILTIN_GATHERPFQPS);\n+  def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfdpd\",\n+\t       VOID_FTYPE_QI_V8SI_PCINT64_INT_INT,\n+\t       IX86_BUILTIN_SCATTERPFDPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfdps\",\n \t       VOID_FTYPE_HI_V16SI_PCINT_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFDPS);\n+  def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfqpd\",\n+\t       VOID_FTYPE_QI_V8DI_PCINT64_INT_INT,\n+\t       IX86_BUILTIN_SCATTERPFQPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfqps\",\n \t       VOID_FTYPE_QI_V8DI_PCINT_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFQPS);\n@@ -35593,17 +35609,30 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n     case IX86_BUILTIN_SCATTERDIV8DI:\n       icode = CODE_FOR_avx512f_scatterdiv8di;\n       goto scatter_gen;\n+\n+    case IX86_BUILTIN_GATHERPFDPD:\n+      icode = CODE_FOR_avx512pf_gatherpfv8sidf;\n+      goto vec_prefetch_gen;\n     case IX86_BUILTIN_GATHERPFDPS:\n-      icode = CODE_FOR_avx512pf_gatherpfv16si;\n+      icode = CODE_FOR_avx512pf_gatherpfv16sisf;\n+      goto vec_prefetch_gen;\n+    case IX86_BUILTIN_GATHERPFQPD:\n+      icode = CODE_FOR_avx512pf_gatherpfv8didf;\n       goto vec_prefetch_gen;\n     case IX86_BUILTIN_GATHERPFQPS:\n-      icode = CODE_FOR_avx512pf_gatherpfv8di;\n+      icode = CODE_FOR_avx512pf_gatherpfv8disf;\n+      goto vec_prefetch_gen;\n+    case IX86_BUILTIN_SCATTERPFDPD:\n+      icode = CODE_FOR_avx512pf_scatterpfv8sidf;\n       goto vec_prefetch_gen;\n     case IX86_BUILTIN_SCATTERPFDPS:\n-      icode = CODE_FOR_avx512pf_scatterpfv16si;\n+      icode = CODE_FOR_avx512pf_scatterpfv16sisf;\n+      goto vec_prefetch_gen;\n+    case IX86_BUILTIN_SCATTERPFQPD:\n+      icode = CODE_FOR_avx512pf_scatterpfv8didf;\n       goto vec_prefetch_gen;\n     case IX86_BUILTIN_SCATTERPFQPS:\n-      icode = CODE_FOR_avx512pf_scatterpfv8di;\n+      icode = CODE_FOR_avx512pf_scatterpfv8disf;\n       goto vec_prefetch_gen;\n \n     gather_gen:"}, {"sha": "fd2ca2f1127983d0e74bb5377ba8c8c8972a1c40", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 162, "deletions": 12, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -417,6 +417,7 @@\n   [V32QI V16HI V8SI (V8DI \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\")])\n (define_mode_iterator VI48_256 [V8SI V4DI])\n (define_mode_iterator VI48_512 [V16SI V8DI])\n+(define_mode_iterator VI4_256_8_512 [V8SI V8DI])\n \n ;; Int-float size matches\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n@@ -12495,10 +12496,14 @@\n    (set_attr \"btver2_decode\" \"vector,vector,vector,vector\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"avx512pf_gatherpf<mode>\"\n+;; Packed float variants\n+(define_mode_attr GATHER_SCATTER_SF_MEM_MODE\n+\t\t      [(V8DI \"V8SF\") (V16SI \"V16SF\")])\n+\n+(define_expand \"avx512pf_gatherpf<mode>sf\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n-      (mem:<ssescalarmode>\n+      (mem:<GATHER_SCATTER_SF_MEM_MODE>\n \t(match_par_dup 5\n \t  [(match_operand 2 \"vsib_address_operand\")\n \t   (match_operand:VI48_512 1 \"register_operand\")\n@@ -12512,10 +12517,10 @@\n \t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512pf_gatherpf<mode>_mask\"\n+(define_insn \"*avx512pf_gatherpf<mode>sf_mask\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n-      (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n+      (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 5 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n@@ -12539,10 +12544,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"*avx512pf_gatherpf<mode>\"\n+(define_insn \"*avx512pf_gatherpf<mode>sf\"\n   [(unspec\n      [(const_int -1)\n-      (match_operator:<ssescalarmode> 4 \"vsib_mem_operator\"\n+      (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 4 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n@@ -12566,10 +12571,83 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"avx512pf_scatterpf<mode>\"\n+;; Packed double variants\n+(define_expand \"avx512pf_gatherpf<mode>df\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+      (mem:V8DF\n+\t(match_par_dup 5\n+\t  [(match_operand 2 \"vsib_address_operand\")\n+\t   (match_operand:VI4_256_8_512 1 \"register_operand\")\n+\t   (match_operand:SI 3 \"const1248_operand\")]))\n+      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+     UNSPEC_GATHER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  operands[5]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[1],\n+\t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512pf_gatherpf<mode>df_mask\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+      (match_operator:V8DF 5 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n+\t    (match_operand:VI4_256_8_512 1 \"register_operand\" \"v\")\n+\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_GATHER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[4]))\n+    {\n+    case 0:\n+      return \"vgatherpf0<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 1:\n+      return \"vgatherpf1<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"*avx512pf_gatherpf<mode>df\"\n+  [(unspec\n+     [(const_int -1)\n+      (match_operator:V8DF 4 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n+\t    (match_operand:VI4_256_8_512 0 \"register_operand\" \"v\")\n+\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_GATHER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[3]))\n+    {\n+    case 0:\n+      return \"vgatherpf0<ssemodesuffix>pd\\t{%4|%4}\";\n+    case 1:\n+      return \"vgatherpf1<ssemodesuffix>pd\\t{%4|%4}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+;; Packed float variants\n+(define_expand \"avx512pf_scatterpf<mode>sf\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n-      (mem:<ssescalarmode>\n+      (mem:<GATHER_SCATTER_SF_MEM_MODE>\n \t(match_par_dup 5\n \t  [(match_operand 2 \"vsib_address_operand\")\n \t   (match_operand:VI48_512 1 \"register_operand\")\n@@ -12583,10 +12661,10 @@\n \t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512pf_scatterpf<mode>_mask\"\n+(define_insn \"*avx512pf_scatterpf<mode>sf_mask\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n-      (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n+      (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 5 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n@@ -12610,10 +12688,10 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"*avx512pf_scatterpf<mode>\"\n+(define_insn \"*avx512pf_scatterpf<mode>sf\"\n   [(unspec\n      [(const_int -1)\n-      (match_operator:<ssescalarmode> 4 \"vsib_mem_operator\"\n+      (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 4 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n@@ -12637,6 +12715,78 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+;; Packed double variants\n+(define_expand \"avx512pf_scatterpf<mode>df\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+      (mem:V8DF\n+\t(match_par_dup 5\n+\t  [(match_operand 2 \"vsib_address_operand\")\n+\t   (match_operand:VI4_256_8_512 1 \"register_operand\")\n+\t   (match_operand:SI 3 \"const1248_operand\")]))\n+      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+     UNSPEC_SCATTER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  operands[5]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[1],\n+\t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512pf_scatterpf<mode>df_mask\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+      (match_operator:V8DF 5 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n+\t    (match_operand:VI4_256_8_512 1 \"register_operand\" \"v\")\n+\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_SCATTER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[4]))\n+    {\n+    case 0:\n+      return \"vscatterpf0<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 1:\n+      return \"vscatterpf1<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"*avx512pf_scatterpf<mode>df\"\n+  [(unspec\n+     [(const_int -1)\n+      (match_operator:V8DF 4 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n+\t    (match_operand:VI4_256_8_512 0 \"register_operand\" \"v\")\n+\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_SCATTER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[3]))\n+    {\n+    case 0:\n+      return \"vscatterpf0<ssemodesuffix>pd\\t{%4|%4}\";\n+    case 1:\n+      return \"vscatterpf1<ssemodesuffix>pd\\t{%4|%4}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"avx512er_exp2<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512"}, {"sha": "fab600113314261cbffe68bbfd9dd1cbb7dc932e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -1,3 +1,19 @@\n+2014-01-27  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: New.\n+\t* gcc.target/i386/avx512pf-vgatherpf0qpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1dpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1qpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf0dpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf0qpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf1dpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vscatterpf1qpd-1.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add new built-ins, fix AVX-512ER\n+\tbuilt-ins roudning immediate.\n+\t* gcc.target/i386/sse-22.c: Add new built-ins.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx-1.c: Ditto.\n+\n 2014-01-27  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.target/sh/torture/strncmp.c: New tests."}, {"sha": "8fb6fb880c1076a3a601917466875711d8675880", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -362,6 +362,10 @@\n #define __builtin_ia32_gatherpfqps(A, B, C, D, E) __builtin_ia32_gatherpfqps(A, B, C, 1, 1)\n #define __builtin_ia32_scatterpfdps(A, B, C, D, E) __builtin_ia32_scatterpfdps(A, B, C, 1, 1)\n #define __builtin_ia32_scatterpfqps(A, B, C, D, E) __builtin_ia32_scatterpfqps(A, B, C, 1, 1)\n+#define __builtin_ia32_gatherpfdpd(A, B, C, D, E) __builtin_ia32_gatherpfdpd(A, B, C, 1, 1)\n+#define __builtin_ia32_gatherpfqpd(A, B, C, D, E) __builtin_ia32_gatherpfqpd(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfdpd(A, B, C, D, E) __builtin_ia32_scatterpfdpd(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfqpd(A, B, C, D, E) __builtin_ia32_scatterpfqpd(A, B, C, 1, 1)\n \n /* shaintrin.h */\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)"}, {"sha": "1368b7a459d6812dbbfb08e289002c9b41586524", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0dpd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherpf0dpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+void *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 0);\n+}"}, {"sha": "61a81bb29ae3536c65ab8eac7edb55e361884e58", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0qpd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherpf0qpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+int *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, 0);\n+}"}, {"sha": "5bc7599712ee6ef619cc42666aeba388587129f6", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1dpd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherpf1dpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+int *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 1);\n+}"}, {"sha": "96610dbe2431fc7fbe9fd3264eaeab9026e094c6", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1qpd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgatherpf1qpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+int *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, 1);\n+}"}, {"sha": "83c31cc45946b46eb65acf33208b9e2206330b17", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0dpd-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0dpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0dpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+void *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_prefetch_i32scatter_pd (base, idx, 8, 0);\n+  _mm512_mask_prefetch_i32scatter_pd (base, m8, idx, 8, 0);\n+}"}, {"sha": "31172f855867960004f8d134390ecb2ef91d0116", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0qpd-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0qpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf0qpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+void *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_prefetch_i64scatter_pd (base, idx, 8, 0);\n+  _mm512_mask_prefetch_i64scatter_pd (base, m8, idx, 8, 0);\n+}"}, {"sha": "205505b85974ad05e7fac418b6bf26d27b1ea038", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1dpd-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1dpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1dpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i idx;\n+volatile __mmask8 m8;\n+void *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_prefetch_i32scatter_pd (base, idx, 8, 1);\n+  _mm512_mask_prefetch_i32scatter_pd (base, m8, idx, 8, 1);\n+}"}, {"sha": "64d7dfa95f9862e4f7bca8121d3dec738d3f9ddb", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1qpd-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512pf -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1qpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscatterpf1qpd\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i idx;\n+volatile __mmask8 m8;\n+int *base;\n+\n+void extern\n+avx512pf_test (void)\n+{\n+  _mm512_prefetch_i64scatter_pd (base, idx, 8, 1);\n+  _mm512_mask_prefetch_i64scatter_pd (base, m8, idx, 8, 1);\n+}"}, {"sha": "643eb992f48e2f595db1137cf175411a06c8ffad", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -523,6 +523,10 @@ test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1\n test_3vx (_mm512_mask_prefetch_i32scatter_ps, void const *, __mmask16, __m512i, 1, 1)\n test_3vx (_mm512_mask_prefetch_i64gather_ps, __m512i, __mmask8, void const *, 1, 1)\n test_3vx (_mm512_mask_prefetch_i64scatter_ps, void const *, __mmask8, __m512i, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i32gather_pd, __m256i, __mmask8, void const *, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i32scatter_pd, void const *, __mmask8, __m256i, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i64gather_pd, __m512i, __mmask8, void const *, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i64scatter_pd, void const *, __mmask8, __m512i, 1, 1)\n \n /* avx512erintrin.h */\n test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 5)"}, {"sha": "7d68be1a5ed74ceb71ad5ca38e905d219be3a1a9", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -646,6 +646,11 @@ test_3vx (_mm512_mask_prefetch_i32scatter_ps, void const *, __mmask16, __m512i,\n test_3vx (_mm512_mask_prefetch_i64gather_ps, __m512i, __mmask8, void const *, 1, 1)\n test_3vx (_mm512_mask_prefetch_i64scatter_ps, void const *, __mmask8, __m512i, 1, 1)\n \n+test_3vx (_mm512_mask_prefetch_i32gather_pd, __m256i, __mmask8, void const *, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i32scatter_pd, void const *, __mmask8, __m256i, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i64gather_pd, __m512i, __mmask8, long long *, 1, 1)\n+test_3vx (_mm512_mask_prefetch_i64scatter_pd, void const *, __mmask8, __m512i, 1, 1)\n+\n /* avx512erintrin.h */\n test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 5)\n test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 5)"}, {"sha": "77c8d67af390cf78b781493c671e32d26eb4da54", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e711dffdfe0561e494636ea95abad5a3b419e6d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=e711dffdfe0561e494636ea95abad5a3b419e6d9", "patch": "@@ -365,6 +365,10 @@\n #define __builtin_ia32_gatherpfqps(A, B, C, D, E) __builtin_ia32_gatherpfqps(A, B, C, 1, 1)\n #define __builtin_ia32_scatterpfdps(A, B, C, D, E) __builtin_ia32_scatterpfdps(A, B, C, 1, 1)\n #define __builtin_ia32_scatterpfqps(A, B, C, D, E) __builtin_ia32_scatterpfqps(A, B, C, 1, 1)\n+#define __builtin_ia32_gatherpfdpd(A, B, C, D, E) __builtin_ia32_gatherpfdpd(A, B, C, 1, 1)\n+#define __builtin_ia32_gatherpfqpd(A, B, C, D, E) __builtin_ia32_gatherpfqpd(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfdpd(A, B, C, D, E) __builtin_ia32_scatterpfdpd(A, B, C, 1, 1)\n+#define __builtin_ia32_scatterpfqpd(A, B, C, D, E) __builtin_ia32_scatterpfqpd(A, B, C, 1, 1)\n \n /* avx512erintrin.h */\n #define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask (A, B, C, 5)"}]}