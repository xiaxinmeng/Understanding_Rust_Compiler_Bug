{"sha": "cbdffae5745327b0e5eb887afc512daf34b049b1", "node_id": "C_kwDOANBUbNoAKGNiZGZmYWU1NzQ1MzI3YjBlNWViODg3YWZjNTEyZGFmMzRiMDQ5YjE", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-11-30T17:38:16Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-11-30T17:38:16Z"}, "message": "aarch64: Specify that FEAT_MOPS sequences clobber CC\n\nAccording to the architecture pseudocode the FEAT_MOPS sequences overwrite the NZCV flags\nas par of their operation, so GCC needs to model that in the relevant RTL patterns.\nFor the testcase:\nvoid g();\nvoid foo (int a, size_t N, char *__restrict__ in,\n         char *__restrict__ out)\n{\n  if (a != 3)\n    __builtin_memcpy (out, in, N);\n  if (a > 3)\n    g ();\n}\n\nwe will currently generate:\nfoo:\n        cmp     w0, 3\n        bne     .L6\n.L1:\n        ret\n.L6:\n        cpyfp   [x3]!, [x2]!, x1!\n        cpyfm   [x3]!, [x2]!, x1!\n        cpyfe   [x3]!, [x2]!, x1!\n        ble     .L1 // Flags reused after CPYF* sequence\n        b       g\n\nThis is wrong as the result of cmp needs to be recalculated after the MOPS sequence.\nWith this patch we'll insert a \"cmp w0, 3\" before the ble, similar to what clang does.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\nPushing to trunk and to the GCC 12 branch after some baking time.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md (aarch64_cpymemdi): Specify clobber of CC reg.\n\t(*aarch64_cpymemdi): Likewise.\n\t(aarch64_movmemdi): Likewise.\n\t(aarch64_setmemdi): Likewise.\n\t(*aarch64_setmemdi): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/mops_5.c: New test.\n\t* gcc.target/aarch64/mops_6.c: Likewise.\n\t* gcc.target/aarch64/mops_7.c: Likewise.", "tree": {"sha": "ff8575e5bfb0fbd897da1a0ad1b614b0990bdb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff8575e5bfb0fbd897da1a0ad1b614b0990bdb5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbdffae5745327b0e5eb887afc512daf34b049b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdffae5745327b0e5eb887afc512daf34b049b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdffae5745327b0e5eb887afc512daf34b049b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdffae5745327b0e5eb887afc512daf34b049b1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "031d3f095520f0e1ee03e29b7ad5067c2a3f96e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031d3f095520f0e1ee03e29b7ad5067c2a3f96e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/031d3f095520f0e1ee03e29b7ad5067c2a3f96e0"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "8a18405b04ea0df8ad74c24719cd315b265c501c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=cbdffae5745327b0e5eb887afc512daf34b049b1", "patch": "@@ -1592,6 +1592,7 @@\n      [(set (match_operand 2) (const_int 0))\n       (clobber (match_dup 3))\n       (clobber (match_dup 4))\n+      (clobber (reg:CC CC_REGNUM))\n       (set (match_operand 0)\n \t   (unspec:BLK [(match_operand 1) (match_dup 2)] UNSPEC_CPYMEM))])]\n   \"TARGET_MOPS\"\n@@ -1605,6 +1606,7 @@\n   [(set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n    (clobber (match_operand:DI 0 \"register_operand\" \"+&r\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"+&r\"))\n+   (clobber (reg:CC CC_REGNUM))\n    (set (mem:BLK (match_dup 0))\n         (unspec:BLK [(mem:BLK (match_dup 1)) (match_dup 2)] UNSPEC_CPYMEM))]\n   \"TARGET_MOPS\"\n@@ -1635,6 +1637,7 @@\n    (set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n    (clobber (match_operand:DI 0 \"register_operand\" \"+&r\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"+&r\"))\n+   (clobber (reg:CC CC_REGNUM))\n    (set (mem:BLK (match_dup 0))\n         (unspec:BLK [(mem:BLK (match_dup 1)) (match_dup 2)] UNSPEC_MOVMEM))])]\n  \"TARGET_MOPS\"\n@@ -1680,6 +1683,7 @@\n   [(parallel\n      [(set (match_operand 2) (const_int 0))\n       (clobber (match_dup 3))\n+      (clobber (reg:CC CC_REGNUM))\n       (set (match_operand 0)\n \t   (unspec:BLK [(match_operand 1)\n \t\t\t(match_dup 2)] UNSPEC_SETMEM))])]\n@@ -1692,6 +1696,7 @@\n (define_insn \"*aarch64_setmemdi\"\n   [(set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n    (clobber (match_operand:DI 0 \"register_operand\" \"+&r\"))\n+   (clobber (reg:CC CC_REGNUM))\n    (set (mem:BLK (match_dup 0))\n         (unspec:BLK [(match_operand:QI 1 \"aarch64_reg_or_zero\" \"rZ\")\n \t\t     (match_dup 2)] UNSPEC_SETMEM))]"}, {"sha": "8a2626786eb510ed880850fc6ab8992482a955de", "filename": "gcc/testsuite/gcc.target/aarch64/mops_5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_5.c?ref=cbdffae5745327b0e5eb887afc512daf34b049b1", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.6-a+mops\" } */\n+\n+#include <stddef.h>\n+\n+void g();\n+void foo (int a, size_t N, char *__restrict__ in,\n+         char *__restrict__ out)\n+{\n+  if (a != 3)\n+    __builtin_memcpy (out, in, N);\n+  if (a > 3)\n+    g ();\n+}\n+\n+/* { dg-final { scan-assembler-times {cmp\\tw0, *} 2 } } */\n+"}, {"sha": "c6c9a548351e4e8e12960138c55630b125994ed7", "filename": "gcc/testsuite/gcc.target/aarch64/mops_6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_6.c?ref=cbdffae5745327b0e5eb887afc512daf34b049b1", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.6-a+mops\" } */\n+\n+#include <stddef.h>\n+\n+void g();\n+void foo (int a, size_t N, char *__restrict__ in,\n+         char *__restrict__ out)\n+{\n+  if (a != 3)\n+    __builtin_memmove (out, in, N);\n+  if (a > 3)\n+    g ();\n+}\n+\n+/* { dg-final { scan-assembler-times {cmp\\tw0, *} 2 } } */\n+"}, {"sha": "79720ca164c400061da1fc2d0ef7a969b603190c", "filename": "gcc/testsuite/gcc.target/aarch64/mops_7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdffae5745327b0e5eb887afc512daf34b049b1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_7.c?ref=cbdffae5745327b0e5eb887afc512daf34b049b1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.6-a+mops\" } */\n+\n+#include <stddef.h>\n+\n+void g();\n+void foo (int a, size_t N, char *__restrict__ out)\n+{\n+  if (a != 3)\n+    __builtin_memset (out, 0, N);\n+  if (a > 3)\n+    g ();\n+}\n+\n+/* { dg-final { scan-assembler-times {cmp\\tw0, *} 2 } } */\n+"}]}