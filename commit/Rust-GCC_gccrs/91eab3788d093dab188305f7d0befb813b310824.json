{"sha": "91eab3788d093dab188305f7d0befb813b310824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlYWIzNzg4ZDA5M2RhYjE4ODMwNWY3ZDBiZWZiODEzYjMxMDgyNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-25T22:43:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-25T22:43:07Z"}, "message": "basic_string.h (_M_replace_aux, [...]): Define inline here.\n\n2004-01-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (_M_replace_aux, _M_replace_safe):\n\tDefine inline here.\n\t* include/bits/basic_string.tcc (_M_replace_aux, _M_replace_safe):\n\tMove inline.\n\n\t* include/bits/basic_string.tcc: Very minor tweaks.\n\nFrom-SVN: r76592", "tree": {"sha": "0f881c663b9d73cd90e24d7a13603c5783da8a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f881c663b9d73cd90e24d7a13603c5783da8a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91eab3788d093dab188305f7d0befb813b310824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eab3788d093dab188305f7d0befb813b310824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91eab3788d093dab188305f7d0befb813b310824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91eab3788d093dab188305f7d0befb813b310824/comments", "author": null, "committer": null, "parents": [{"sha": "7e43c821f0301ea2d61568390afe223a240a754e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e43c821f0301ea2d61568390afe223a240a754e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e43c821f0301ea2d61568390afe223a240a754e"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "5a3ca4291efa316b5db90e3a92e5829db740dffe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eab3788d093dab188305f7d0befb813b310824/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eab3788d093dab188305f7d0befb813b310824/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=91eab3788d093dab188305f7d0befb813b310824", "patch": "@@ -1,3 +1,12 @@\n+2004-01-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (_M_replace_aux, _M_replace_safe):\n+\tDefine inline here.\n+\t* include/bits/basic_string.tcc (_M_replace_aux, _M_replace_safe):\n+\tMove inline.\n+\n+\t* include/bits/basic_string.tcc: Very minor tweaks.\n+\n 2004-01-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/performance/string_append.cc: Increase number"}, {"sha": "19bb8000a0fa0665809cdf5284ce1066baa3b5d3", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eab3788d093dab188305f7d0befb813b310824/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eab3788d093dab188305f7d0befb813b310824/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=91eab3788d093dab188305f7d0befb813b310824", "patch": "@@ -1361,11 +1361,26 @@ namespace std\n \t\t\t    _InputIterator __k2, __false_type);\n \n       basic_string&\n-      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c);\n+      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t     _CharT __c)\n+      {\n+\tif (this->max_size() - (this->size() - __n1) < __n2)\n+\t  __throw_length_error(\"basic_string::_M_replace_aux\");\n+\t_M_mutate(__pos1, __n1, __n2);\n+\tif (__n2)\n+\t  traits_type::assign(_M_data() + __pos1, __n2, __c);\n+\treturn *this;\t\n+      }\n \n       basic_string&\n       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n-\t\t      size_type __n2);\n+\t\t      size_type __n2)\n+      {\n+\t_M_mutate(__pos1, __n1, __n2);\n+\tif (__n2)\n+\t  traits_type::copy(_M_data() + __pos1, __s, __n2);\n+\treturn *this;\t\n+      }\n \n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type"}, {"sha": "3d9df9f5e4817f5796c0b946299389c5d7a3db49", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91eab3788d093dab188305f7d0befb813b310824/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91eab3788d093dab188305f7d0befb813b310824/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=91eab3788d093dab188305f7d0befb813b310824", "patch": "@@ -142,7 +142,7 @@ namespace std\n       }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template <class _InIterator>\n+    template <typename _InIterator>\n       _CharT*\n       basic_string<_CharT, _Traits, _Alloc>::\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a, \n@@ -391,7 +391,7 @@ namespace std\n \t  || _M_rep()->_M_is_shared() || __new_size > capacity())\n \t{\n \t  // Must reallocate.\n-\t  allocator_type __a = get_allocator();\n+\t  const allocator_type __a = get_allocator();\n \t  // See below (_S_create) for the meaning and value of these\n \t  // constants.\n \t  const size_type __pagesize = 4096;\n@@ -439,7 +439,7 @@ namespace std\n \t  // Make sure we don't shrink below the current size\n \t  if (__res < this->size())\n \t    __res = this->size();\n-\t  allocator_type __a = get_allocator();\n+\t  const allocator_type __a = get_allocator();\n \t  _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());\n \t  _M_rep()->_M_dispose(__a);\n \t  _M_data(__tmp);\n@@ -599,34 +599,6 @@ namespace std\n \t\t\t       __s.size());\n       }\n \n-  // This helper doesn't buffer internally and can be used in \"safe\" situations,\n-  // i.e., when source and destination ranges are known to not overlap.\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n-\t\t    size_type __n2)\n-    {\n-      _M_mutate(__pos1, __n1, __n2);\n-      if (__n2)\n-\ttraits_type::copy(_M_data() + __pos1, __s, __n2);\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n-\t\t   _CharT __c)\n-    {\n-      if (this->max_size() - (this->size() - __n1) < __n2)\n-\t__throw_length_error(\"basic_string::_M_replace_aux\");\n-      _M_mutate(__pos1, __n1, __n2);\n-      if (__n2)\n-\ttraits_type::assign(_M_data() + __pos1, __n2, __c);\n-      return *this;\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::"}]}