{"sha": "92fab505d29cc38f12ad0369648ef7d0a54a3aef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmYWI1MDVkMjljYzM4ZjEyYWQwMzY5NjQ4ZWY3ZDBhNTRhM2FlZg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-02-15T17:33:02Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-02-15T17:33:02Z"}, "message": "re PR c++/35023 (ICE with parameter pack in variable declaration)\n\n2008-02-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/35023\n\tPR c++/35024\n\tPR c++/35026\n\t* pt.c (finish_member_template_decl): If the type in a TYPE_DECL\n\tis error_mark_node, return an error early.\n\t(find_parameter_packs_r): Pass the pointer set along to recursive\n\tcalls of cp_walk_subtrees; don't try to manage the pointer set\n\tourselves.\n\t(uses_parameter_packs): Pass the pointer set to cp_walk_tree.\n\t(make_pack_expansion): Ditto.\n\t(check_for_bare_parameter_packs): Ditto. Also, don't bother taking\n\ta second pass through the tree with find_parameter_packs_r; that\n\tsecond pass no longer does anything.\n\t(push_template_decl_real): If we have an erroneous declaration,\n\tset its type to error_mark_node before returning an error.\n\n2008-02-15  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/35023\n\tPR c++/35024\n\tPR c++/35026\n\t* g++.dg/cpp0x/vt-35026.C: New.\n\t* g++.dg/cpp0x/vt-35023.C: New.\n\t* g++.dg/cpp0x/vt-34055.C: Tweak expected error messages.\n\t* g++.dg/cpp0x/vt-35024.C: New.\n\nFrom-SVN: r132348", "tree": {"sha": "4be6e73c708aaa2c7d6a020cbfcf01b14cf713f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be6e73c708aaa2c7d6a020cbfcf01b14cf713f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92fab505d29cc38f12ad0369648ef7d0a54a3aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fab505d29cc38f12ad0369648ef7d0a54a3aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fab505d29cc38f12ad0369648ef7d0a54a3aef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fab505d29cc38f12ad0369648ef7d0a54a3aef/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8900287b29f4a9093299f76ab8838f79ea151c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8900287b29f4a9093299f76ab8838f79ea151c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8900287b29f4a9093299f76ab8838f79ea151c6"}], "stats": {"total": 114, "additions": 80, "deletions": 34}, "files": [{"sha": "6789236c031f2c99ee3b2ece54ffd3ace80748fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -1,3 +1,21 @@\n+2008-02-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/35023\n+\tPR c++/35024\n+\tPR c++/35026\n+\t* pt.c (finish_member_template_decl): If the type in a TYPE_DECL\n+\tis error_mark_node, return an error early.\n+\t(find_parameter_packs_r): Pass the pointer set along to recursive\n+\tcalls of cp_walk_subtrees; don't try to manage the pointer set\n+\tourselves.\n+\t(uses_parameter_packs): Pass the pointer set to cp_walk_tree.\n+\t(make_pack_expansion): Ditto.\n+\t(check_for_bare_parameter_packs): Ditto. Also, don't bother taking\n+\ta second pass through the tree with find_parameter_packs_r; that\n+\tsecond pass no longer does anything.\n+\t(push_template_decl_real): If we have an erroneous declaration,\n+\tset its type to error_mark_node before returning an error.\n+\n 2008-02-14  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/34050"}, {"sha": "5931126e860b68b00b50391cfd615ba90afea798", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -236,6 +236,8 @@ finish_member_template_decl (tree decl)\n       tree type;\n \n       type = TREE_TYPE (decl);\n+      if (type == error_mark_node)\n+\treturn error_mark_node;\n       if (IS_AGGR_TYPE (type)\n \t  && CLASSTYPE_TEMPLATE_INFO (type)\n \t  && !CLASSTYPE_TEMPLATE_SPECIALIZATION (type))\n@@ -2445,13 +2447,6 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     (struct find_parameter_pack_data*)data;\n   bool parameter_pack_p = false;\n \n-  /* Don't visit nodes twice.  */\n-  if (pointer_set_contains (ppd->visited, *tp))\n-    {\n-      *walk_subtrees = 0;\n-      return NULL_TREE;\n-    }\n-\n   /* Identify whether this is a parameter pack or not.  */\n   switch (TREE_CODE (t))\n     {\n@@ -2487,12 +2482,9 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       *ppd->parameter_packs = tree_cons (NULL_TREE, t, *ppd->parameter_packs);\n     }\n \n-  /* Make sure we do not visit this node again.  */\n-  pointer_set_insert (ppd->visited, *tp);\n-\n   if (TYPE_P (t))\n     cp_walk_tree (&TYPE_CONTEXT (t), \n-\t\t  &find_parameter_packs_r, ppd, NULL);\n+\t\t  &find_parameter_packs_r, ppd, ppd->visited);\n \n   /* This switch statement will return immediately if we don't find a\n      parameter pack.  */\n@@ -2504,10 +2496,10 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       /* Check the template itself.  */\n       cp_walk_tree (&TREE_TYPE (TYPE_TI_TEMPLATE (t)), \n-\t\t    &find_parameter_packs_r, ppd, NULL);\n+\t\t    &find_parameter_packs_r, ppd, ppd->visited);\n       /* Check the template arguments.  */\n       cp_walk_tree (&TYPE_TI_ARGS (t), &find_parameter_packs_r, ppd, \n-\t\t    NULL);\n+\t\t    ppd->visited);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n@@ -2527,19 +2519,19 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     case ENUMERAL_TYPE:\n       if (TYPE_TEMPLATE_INFO (t))\n \tcp_walk_tree (&TREE_VALUE (TYPE_TEMPLATE_INFO (t)), \n-\t\t      &find_parameter_packs_r, ppd, NULL);\n+\t\t      &find_parameter_packs_r, ppd, ppd->visited);\n \n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n     case TEMPLATE_DECL:\n       cp_walk_tree (&TREE_TYPE (t),\n-\t\t    &find_parameter_packs_r, ppd, NULL);\n+\t\t    &find_parameter_packs_r, ppd, ppd->visited);\n       return NULL_TREE;\n  \n     case TYPENAME_TYPE:\n       cp_walk_tree (&TYPENAME_TYPE_FULLNAME (t), &find_parameter_packs_r,\n-                   ppd, NULL);\n+                   ppd, ppd->visited);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n       \n@@ -2550,12 +2542,13 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \n     case INTEGER_TYPE:\n       cp_walk_tree (&TYPE_MAX_VALUE (t), &find_parameter_packs_r, \n-\t\t    ppd, NULL);\n+\t\t    ppd, ppd->visited);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n     case IDENTIFIER_NODE:\n-      cp_walk_tree (&TREE_TYPE (t), &find_parameter_packs_r, ppd, NULL);\n+      cp_walk_tree (&TREE_TYPE (t), &find_parameter_packs_r, ppd, \n+\t\t    ppd->visited);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n@@ -2574,7 +2567,7 @@ uses_parameter_packs (tree t)\n   struct find_parameter_pack_data ppd;\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n+  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n   pointer_set_destroy (ppd.visited);\n   return parameter_packs != NULL_TREE;\n }\n@@ -2625,7 +2618,7 @@ make_pack_expansion (tree arg)\n       ppd.visited = pointer_set_create ();\n       ppd.parameter_packs = &parameter_packs;\n       cp_walk_tree (&TREE_PURPOSE (arg), &find_parameter_packs_r, \n-                    &ppd, NULL);\n+                    &ppd, ppd.visited);\n \n       if (parameter_packs == NULL_TREE)\n         {\n@@ -2643,7 +2636,7 @@ make_pack_expansion (tree arg)\n               /* Determine which parameter packs will be expanded in this\n                  argument.  */\n               cp_walk_tree (&TREE_VALUE (value), &find_parameter_packs_r, \n-                            &ppd, NULL);\n+                            &ppd, ppd.visited);\n             }\n         }\n \n@@ -2681,7 +2674,7 @@ make_pack_expansion (tree arg)\n   /* Determine which parameter packs will be expanded.  */\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  cp_walk_tree (&arg, &find_parameter_packs_r, &ppd, NULL);\n+  cp_walk_tree (&arg, &find_parameter_packs_r, &ppd, ppd.visited);\n   pointer_set_destroy (ppd.visited);\n \n   /* Make sure we found some parameter packs.  */\n@@ -2726,7 +2719,7 @@ check_for_bare_parameter_packs (tree t)\n \n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n+  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n   pointer_set_destroy (ppd.visited);\n \n   if (parameter_packs) \n@@ -2753,13 +2746,6 @@ check_for_bare_parameter_packs (tree t)\n           parameter_packs = TREE_CHAIN (parameter_packs);\n         }\n \n-      /* Clean up any references to these parameter packs within the\n-\t tree.  */\n-      ppd.parameter_packs = &parameter_packs;\n-      ppd.visited = pointer_set_create ();\n-      cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n-      pointer_set_destroy (ppd.visited);\n-\n       return true;\n     }\n \n@@ -3887,7 +3873,10 @@ push_template_decl_real (tree decl, bool is_friend)\n \tTYPE_RAISES_EXCEPTIONS (type) = NULL_TREE;\n     }\n   else if (check_for_bare_parameter_packs (TREE_TYPE (decl)))\n-    return error_mark_node;\n+    {\n+      TREE_TYPE (decl) = error_mark_node;\n+      return error_mark_node;\n+    }\n \n   if (is_partial)\n     return process_partial_specialization (decl);"}, {"sha": "6665d266314a1beb41d9545cae750b43eded5b83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -1,3 +1,13 @@\n+2008-02-15  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/35023\n+\tPR c++/35024\n+\tPR c++/35026\n+\t* g++.dg/cpp0x/vt-35026.C: New.\n+\t* g++.dg/cpp0x/vt-35023.C: New.\n+\t* g++.dg/cpp0x/vt-34055.C: Tweak expected error messages.\n+\t* g++.dg/cpp0x/vt-35024.C: New.\n+\n 2008-02-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.c-torture/execute/va-arg-25.x: Remove."}, {"sha": "29066b50bd72ff9cce1fa08574ffc8739c40ba0c", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34055.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -7,7 +7,7 @@ template<typename...T> struct A<T*> // { dg-error \"parameter packs|T\" }\n   void foo();  // { dg-error \"parameter packs|T|candidate\" }\n };\n \n-template<typename...T> void A<T*>::foo() {} // { dg-error \"does not match\" }\n+template<typename...T> void A<T*>::foo() {} // { dg-error \"invalid declarator\" }\n \n \n \n@@ -18,7 +18,7 @@ template<typename...T> struct B<T&> // { dg-error \"parameter packs|T\" }\n   void foo(); // { dg-error \"parameter packs|T\" }\n };\n \n-template<typename...T> void B<T&>::foo() {} // { dg-error \"does not match\" }\n+template<typename...T> void B<T&>::foo() {} // { dg-error \"invalid declarator\" }\n \n \n template<typename...> struct C;\n@@ -28,4 +28,4 @@ template<typename...T> struct C<T()> // { dg-error \"parameter packs|T\" }\n   void foo(); // { dg-error \"parameter packs|T\" }\n };\n \n-template<typename...T> void C<T()>::foo() {} // { dg-error \"does not match\" }\n+template<typename...T> void C<T()>::foo() {} // { dg-error \"invalid declarator\" }"}, {"sha": "9db20503e7ef43323d9167c721fd9d9d4849413d", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-35023.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35023.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35023.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35023.C?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T> int foo()\n+{\n+  T t; // { dg-error \"parameter packs|T\" }\n+  return t;\n+}\n+\n+void bar()\n+{\n+  foo<int>();\n+}"}, {"sha": "77f0b66bdc0218ff3ba08f73bc1080dcf3998629", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-35024.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35024.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35024.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35024.C?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T> int foo()\n+{\n+  typename T::X x; // { dg-error \"parameter packs|T\" }\n+  return x;\n+}\n+\n+void bar()\n+{\n+  foo<int>();\n+}"}, {"sha": "643a416c578758aa843dbc736a315c54e0dd9ee4", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-35026.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35026.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92fab505d29cc38f12ad0369648ef7d0a54a3aef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35026.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-35026.C?ref=92fab505d29cc38f12ad0369648ef7d0a54a3aef", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T> struct A\n+{\n+  T* x[1]; // { dg-error \"parameter packs|T\" }\n+};\n+\n+A<int> a;"}]}