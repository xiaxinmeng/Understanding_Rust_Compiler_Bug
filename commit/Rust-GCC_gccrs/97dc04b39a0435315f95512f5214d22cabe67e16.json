{"sha": "97dc04b39a0435315f95512f5214d22cabe67e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkYzA0YjM5YTA0MzUzMTVmOTU1MTJmNTIxNGQyMmNhYmU2N2UxNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-24T15:46:38Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-08-24T15:46:38Z"}, "message": "gimplify.c (gimplify_array_ref_to_plus): Delete.\n\n2004-08-24  Richard Henderson  <rth@redhat.com>\n            Andrew Pinski  <apinski@apple.com>\n\n        * gimplify.c (gimplify_array_ref_to_plus): Delete.\n        (gimplify_addr_expr): Do not call gimplify_array_ref_to_plus\n        for ARRAY_REF.\n\n        * config/rs6000/rs6000.c (altivec_expand_builtin): Go passed\n        ARRAY_REF also to get to the STRING_CST.\n\nCo-Authored-By: Andrew Pinski <apinski@apple.com>\n\nFrom-SVN: r86487", "tree": {"sha": "467c45352a962f5923c35a9726f78208789f2593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467c45352a962f5923c35a9726f78208789f2593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97dc04b39a0435315f95512f5214d22cabe67e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97dc04b39a0435315f95512f5214d22cabe67e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97dc04b39a0435315f95512f5214d22cabe67e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97dc04b39a0435315f95512f5214d22cabe67e16/comments", "author": null, "committer": null, "parents": [{"sha": "6fd7cc54192ed659f81c0e5264f1004282011dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd7cc54192ed659f81c0e5264f1004282011dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd7cc54192ed659f81c0e5264f1004282011dca"}], "stats": {"total": 75, "additions": 12, "deletions": 63}, "files": [{"sha": "7d711fa5273f87b7bdb7fece2bd9f20bd958378d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97dc04b39a0435315f95512f5214d22cabe67e16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97dc04b39a0435315f95512f5214d22cabe67e16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97dc04b39a0435315f95512f5214d22cabe67e16", "patch": "@@ -1,3 +1,13 @@\n+2004-08-24  Richard Henderson  <rth@redhat.com>\n+            Andrew Pinski  <apinski@apple.com>\n+\n+\t* gimplify.c (gimplify_array_ref_to_plus): Delete.\n+\t(gimplify_addr_expr): Do not call gimplify_array_ref_to_plus\n+\tfor ARRAY_REF.\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Go passed\n+\tARRAY_REF also to get to the STRING_CST.\n+\n 2004-08-24  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (arm_override_options): Update error message."}, {"sha": "c6198cf6392f37247a1e28d841f3759bf66eb18f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97dc04b39a0435315f95512f5214d22cabe67e16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97dc04b39a0435315f95512f5214d22cabe67e16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=97dc04b39a0435315f95512f5214d22cabe67e16", "patch": "@@ -6784,7 +6784,8 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n     case ALTIVEC_BUILTIN_COMPILETIME_ERROR:\n       arg0 = TREE_VALUE (arglist);\n-      while (TREE_CODE (arg0) == NOP_EXPR || TREE_CODE (arg0) == ADDR_EXPR)\n+      while (TREE_CODE (arg0) == NOP_EXPR || TREE_CODE (arg0) == ADDR_EXPR\n+             || TREE_CODE (arg0) == ARRAY_REF)\n \targ0 = TREE_OPERAND (arg0, 0);\n       error (\"invalid parameter combination for `%s' AltiVec intrinsic\",\n \t     TREE_STRING_POINTER (arg0));"}, {"sha": "b008a17375c2a273f96728b3ed385121e90d5e03", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97dc04b39a0435315f95512f5214d22cabe67e16/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97dc04b39a0435315f95512f5214d22cabe67e16/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=97dc04b39a0435315f95512f5214d22cabe67e16", "patch": "@@ -1426,59 +1426,6 @@ gimplify_conversion (tree *expr_p)\n   return GS_OK;\n }\n \n-/* Subroutine of gimplify_compound_lval.\n-   Converts an ARRAY_REF to the equivalent *(&array + offset) form.  */\n-\n-static enum gimplify_status\n-gimplify_array_ref_to_plus (tree *expr_p, tree *pre_p, tree *post_p)\n-{\n-  tree array = TREE_OPERAND (*expr_p, 0);\n-  tree arrtype = TREE_TYPE (array);\n-  tree elttype = TREE_TYPE (arrtype);\n-  tree size = array_ref_element_size (*expr_p);\n-  tree ptrtype = build_pointer_type (elttype);\n-  enum tree_code add_code = PLUS_EXPR;\n-  tree idx = TREE_OPERAND (*expr_p, 1);\n-  tree minidx = unshare_expr (array_ref_low_bound (*expr_p));\n-  tree offset, addr, result;\n-  enum gimplify_status ret;\n-\n-  /* If the array domain does not start at zero, apply the offset.  */\n-  if (!integer_zerop (minidx))\n-    {\n-      idx = convert (TREE_TYPE (minidx), idx);\n-      idx = fold (build (MINUS_EXPR, TREE_TYPE (minidx), idx, minidx));\n-    }\n-  \n-  /* If the index is negative -- a technically invalid situation now\n-     that we've biased the index back to zero -- then casting it to\n-     unsigned has ill effects.  In particular, -1*4U/4U != -1.\n-     Represent this as a subtraction of a positive rather than addition\n-     of a negative.  This will prevent any conversion back to ARRAY_REF\n-     from getting the wrong results from the division.  */\n-  if (TREE_CODE (idx) == INTEGER_CST && tree_int_cst_sgn (idx) < 0)\n-    {\n-      idx = fold (build1 (NEGATE_EXPR, TREE_TYPE (idx), idx));\n-      add_code = MINUS_EXPR;\n-    }\n-\n-  /* Pointer arithmetic must be done in sizetype.  */\n-  idx = fold_convert (sizetype, idx);\n-\n-  /* Convert the index to a byte offset.  */\n-  offset = size_binop (MULT_EXPR, size, idx);\n-\n-  ret = gimplify_expr (&array, pre_p, post_p, is_gimple_min_lval, fb_lvalue);\n-  if (ret == GS_ERROR)\n-    return ret;\n-\n-  addr = build_fold_addr_expr_with_type (array, ptrtype);\n-  result = fold (build (add_code, ptrtype, addr, offset));\n-  *expr_p = build1 (INDIRECT_REF, elttype, result);\n-\n-  return GS_OK;\n-}\n-\n /* Gimplify the COMPONENT_REF, ARRAY_REF, REALPART_EXPR or IMAGPART_EXPR\n    node pointed by EXPR_P.\n \n@@ -3124,15 +3071,6 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       ret = GS_OK;\n       break;\n \n-    case ARRAY_REF:\n-      /* Fold &a[6] to (&a + 6).  */\n-      ret = gimplify_array_ref_to_plus (&TREE_OPERAND (expr, 0),\n-\t\t\t\t\tpre_p, post_p);\n-\n-      /* This added an INDIRECT_REF.  Fold it away.  */\n-      *expr_p = TREE_OPERAND (TREE_OPERAND (expr, 0), 0);\n-      break;\n-\n     case VIEW_CONVERT_EXPR:\n       /* Take the address of our operand and then convert it to the type of\n \t this ADDR_EXPR."}]}