{"sha": "dbfc28948e3e382cc1e6409087e963ba2266d0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmYzI4OTQ4ZTNlMzgyY2MxZTY0MDkwODdlOTYzYmEyMjY2ZDBiOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-03T10:00:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-03T10:00:06Z"}, "message": "re PR tree-optimization/57656 (Wrong constant folding)\n\n2013-09-03  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57656\n\t* fold-const.c (negate_expr_p): Fix division case.\n\t(negate_expr): Likewise.\n\n\t* gcc.dg/torture/pr57656.c: New testcase.\n\nFrom-SVN: r202204", "tree": {"sha": "7dcb70b0e0b265ed2adce63bdc4c85c0764dfd8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dcb70b0e0b265ed2adce63bdc4c85c0764dfd8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbfc28948e3e382cc1e6409087e963ba2266d0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfc28948e3e382cc1e6409087e963ba2266d0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfc28948e3e382cc1e6409087e963ba2266d0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfc28948e3e382cc1e6409087e963ba2266d0b9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20059c8b38abf30ecdd9bc79f52945f8a2618246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20059c8b38abf30ecdd9bc79f52945f8a2618246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20059c8b38abf30ecdd9bc79f52945f8a2618246"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "11b95c70dfb2376194d982c18227d58e7f7645c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbfc28948e3e382cc1e6409087e963ba2266d0b9", "patch": "@@ -1,3 +1,9 @@\n+2013-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57656\n+\t* fold-const.c (negate_expr_p): Fix division case.\n+\t(negate_expr): Likewise.\n+\n 2013-09-03  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/58285"}, {"sha": "9956b2c9f0731c0797c6e2e4e8b33e32ff7c9bec", "filename": "gcc/fold-const.c", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dbfc28948e3e382cc1e6409087e963ba2266d0b9", "patch": "@@ -483,11 +483,24 @@ negate_expr_p (tree t)\n \t and actually traps on some architectures.  But if overflow is\n \t undefined, we can negate, because - (INT_MIN / 1) is an\n \t overflow.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t  && !TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (t)))\n-        break;\n-      return negate_expr_p (TREE_OPERAND (t, 1))\n-             || negate_expr_p (TREE_OPERAND (t, 0));\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\t{\n+\t  if (!TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (t)))\n+\t    break;\n+\t  /* If overflow is undefined then we have to be careful because\n+\t     we ask whether it's ok to associate the negate with the\n+\t     division which is not ok for example for\n+\t     -((a - b) / c) where (-(a - b)) / c may invoke undefined\n+\t     overflow because of negating INT_MIN.  So do not use\n+\t     negate_expr_p here but open-code the two important cases.  */\n+\t  if (TREE_CODE (TREE_OPERAND (t, 0)) == NEGATE_EXPR\n+\t      || (TREE_CODE (TREE_OPERAND (t, 0)) == INTEGER_CST\n+\t\t  && may_negate_without_overflow_p (TREE_OPERAND (t, 0))))\n+\t    return true;\n+\t}\n+      else if (negate_expr_p (TREE_OPERAND (t, 0)))\n+\treturn true;\n+      return negate_expr_p (TREE_OPERAND (t, 1));\n \n     case NOP_EXPR:\n       /* Negate -((double)float) as (double)(-float).  */\n@@ -682,16 +695,20 @@ fold_negate_expr (location_t loc, tree t)\n \t      return fold_build2_loc (loc, TREE_CODE (t), type,\n \t\t\t\t  TREE_OPERAND (t, 0), negate_expr (tem));\n \t    }\n+\t  /* If overflow is undefined then we have to be careful because\n+\t     we ask whether it's ok to associate the negate with the\n+\t     division which is not ok for example for\n+\t     -((a - b) / c) where (-(a - b)) / c may invoke undefined\n+\t     overflow because of negating INT_MIN.  So do not use\n+\t     negate_expr_p here but open-code the two important cases.  */\n           tem = TREE_OPERAND (t, 0);\n-          if (negate_expr_p (tem))\n-\t    {\n-\t      if (INTEGRAL_TYPE_P (type)\n-\t\t  && (TREE_CODE (tem) != INTEGER_CST\n-\t\t      || tree_int_cst_equal (tem, TYPE_MIN_VALUE (type))))\n-\t\tfold_overflow_warning (warnmsg, WARN_STRICT_OVERFLOW_MISC);\n-\t      return fold_build2_loc (loc, TREE_CODE (t), type,\n-\t\t\t\t  negate_expr (tem), TREE_OPERAND (t, 1));\n-\t    }\n+\t  if ((INTEGRAL_TYPE_P (type)\n+\t       && (TREE_CODE (tem) == NEGATE_EXPR\n+\t\t   || (TREE_CODE (tem) == INTEGER_CST\n+\t\t       && may_negate_without_overflow_p (tem))))\n+\t      || !INTEGRAL_TYPE_P (type))\n+\t    return fold_build2_loc (loc, TREE_CODE (t), type,\n+\t\t\t\t    negate_expr (tem), TREE_OPERAND (t, 1));\n         }\n       break;\n "}, {"sha": "33282ff31de671b93f7551653784b1d52c1d6561", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbfc28948e3e382cc1e6409087e963ba2266d0b9", "patch": "@@ -1,3 +1,8 @@\n+2013-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57656\n+\t* gcc.dg/torture/pr57656.c: New testcase.\n+\n 2013-09-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57287"}, {"sha": "4f3645e4693ea2895bdb1e50eb42448f8d579cc4", "filename": "gcc/testsuite/gcc.dg/torture/pr57656.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfc28948e3e382cc1e6409087e963ba2266d0b9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57656.c?ref=dbfc28948e3e382cc1e6409087e963ba2266d0b9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fstrict-overflow\" } */\n+\n+int main (void)\n+{\n+  int a = -1;\n+  int b = __INT_MAX__;\n+  int c = 2;\n+  int t = 1 - ((a - b) / c);  // t = 1 - ( __INT_MIN__ / 2 )\n+  if (t != (1 - (-1 - __INT_MAX__) / 2))\n+    __builtin_abort();\n+  return 0;\n+}"}]}