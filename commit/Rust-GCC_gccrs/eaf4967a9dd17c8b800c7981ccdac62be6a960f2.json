{"sha": "eaf4967a9dd17c8b800c7981ccdac62be6a960f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmNDk2N2E5ZGQxN2M4YjgwMGM3OTgxY2NkYWM2MmJlNmE5NjBmMg==", "commit": {"author": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-12-11T13:13:43Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-12-11T13:13:43Z"}, "message": "Regenerate gcc/configure and gcc/config.in\n\nFrom-SVN: r205892", "tree": {"sha": "e2c1ff7d5702adbe210e4e75c2908030a41fffdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c1ff7d5702adbe210e4e75c2908030a41fffdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaf4967a9dd17c8b800c7981ccdac62be6a960f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf4967a9dd17c8b800c7981ccdac62be6a960f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf4967a9dd17c8b800c7981ccdac62be6a960f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf4967a9dd17c8b800c7981ccdac62be6a960f2/comments", "author": null, "committer": null, "parents": [{"sha": "63892fa207fee716dfc34f94f9d2edfbc5fa84ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63892fa207fee716dfc34f94f9d2edfbc5fa84ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63892fa207fee716dfc34f94f9d2edfbc5fa84ca"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "3aefa06708e9a281cb771dd6edd95aff86ccd056", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4967a9dd17c8b800c7981ccdac62be6a960f2/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4967a9dd17c8b800c7981ccdac62be6a960f2/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=eaf4967a9dd17c8b800c7981ccdac62be6a960f2", "patch": "@@ -411,6 +411,12 @@\n #endif\n \n \n+/* Define if your assembler supports the -mabi option. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_MABI_OPTION\n+#endif\n+\n+\n /* Define if your assembler supports mfcr field. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_MFCRF"}, {"sha": "e4527fcec844fcd0276a9a64a26dd22eeba102ef", "filename": "gcc/configure", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf4967a9dd17c8b800c7981ccdac62be6a960f2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf4967a9dd17c8b800c7981ccdac62be6a960f2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=eaf4967a9dd17c8b800c7981ccdac62be6a960f2", "patch": "@@ -23932,6 +23932,60 @@ _ACEOF\n $as_echo \"$gcc_cv_lto_plugin\" >&6; }\n \n case \"$target\" in\n+  aarch64*-*-*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -mabi option\" >&5\n+$as_echo_n \"checking assembler for -mabi option... \" >&6; }\n+if test \"${gcc_cv_as_aarch64_mabi+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_aarch64_mabi=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -mabi=lp64 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_aarch64_mabi=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_aarch64_mabi\" >&5\n+$as_echo \"$gcc_cv_as_aarch64_mabi\" >&6; }\n+\n+    if test x$gcc_cv_as_aarch64_mabi = xyes; then\n+\n+$as_echo \"#define HAVE_AS_MABI_OPTION 1\" >>confdefs.h\n+\n+    else\n+      if test x$with_abi = xilp32; then\n+        as_fn_error \"Assembler does not support -mabi=ilp32.\\\n+                     Upgrade the Assembler.\" \"$LINENO\" 5\n+      fi\n+      if test x\"$with_multilib_list\" = xdefault; then\n+        TM_MULTILIB_CONFIG=lp64\n+      else\n+        aarch64_multilibs=`echo $with_multilib_list | sed -e 's/,/ /g'`\n+        for aarch64_multilib in ${aarch64_multilibs}; do\n+          case ${aarch64_multilib} in\n+            ilp32)\n+              as_fn_error \"Assembler does not support -mabi=ilp32.\\\n+                            Upgrade the Assembler.\" \"$LINENO\" 5\n+              ;;\n+            *)\n+              ;;\n+          esac\n+        done\n+      fi\n+    fi\n+    ;;\n+\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-linux* | alpha*-*-*bsd*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for explicit relocation support\" >&5"}]}