{"sha": "6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwZTg3YjI1ZWUyMTQ5M2Q0ZjQ3YmIzOWFlZTNlMmQzM2NiMDhkOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-04-27T15:00:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-04-27T15:00:53Z"}, "message": "PR c++/85545 - ICE with noexcept PMF conversion.\n\n\t* cvt.c (cp_fold_convert): Pass PMF CONSTRUCTORs to\n\tbuild_ptrmemfunc.\n\t* typeck.c (build_ptrmemfunc): Don't build a NOP_EXPR for zero\n\tadjustment.\n\t(build_ptrmemfunc_access_expr): Special-case CONSTRUCTORs.\n\nFrom-SVN: r259712", "tree": {"sha": "df50d3a40a9ba75887fd0d79d59d06b3940f8dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df50d3a40a9ba75887fd0d79d59d06b3940f8dc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bdc2738ce61b5f380930f670709ed9e9cd7cf2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdc2738ce61b5f380930f670709ed9e9cd7cf2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdc2738ce61b5f380930f670709ed9e9cd7cf2a"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "9fd52669e97e510bfc3506801c1af8a132aba5e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "patch": "@@ -1,3 +1,12 @@\n+2018-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85545 - ICE with noexcept PMF conversion.\n+\t* cvt.c (cp_fold_convert): Pass PMF CONSTRUCTORs to\n+\tbuild_ptrmemfunc.\n+\t* typeck.c (build_ptrmemfunc): Don't build a NOP_EXPR for zero\n+\tadjustment.\n+\t(build_ptrmemfunc_access_expr): Special-case CONSTRUCTORs.\n+\n 2018-04-27  Nathan Sidwell  <nathan@acm.org>\n \n \t* typeck.c (convert_ptrmem): Move local var decls to initialization."}, {"sha": "0f045e2ab1266a80727222bfdcd8167fd2d171b6", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "patch": "@@ -601,14 +601,16 @@ cp_fold_convert (tree type, tree expr)\n   tree conv;\n   if (TREE_TYPE (expr) == type)\n     conv = expr;\n-  else if (TREE_CODE (expr) == PTRMEM_CST\n-\t   || (TREE_CODE (expr) == CONSTRUCTOR\n-\t       && TYPE_PTRMEMFUNC_P (type)))\n+  else if (TREE_CODE (expr) == PTRMEM_CST)\n     {\n       /* Avoid wrapping a PTRMEM_CST in NOP_EXPR.  */\n       conv = copy_node (expr);\n       TREE_TYPE (conv) = type;\n     }\n+  else if (TREE_CODE (expr) == CONSTRUCTOR\n+\t   && TYPE_PTRMEMFUNC_P (type))\n+    conv = build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr,\n+\t\t\t     true, false, tf_warning_or_error);\n   else\n     {\n       conv = fold_convert (type, expr);"}, {"sha": "19db3154e81b948c1f4be84da4c8bff67a277525", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6d0e87b25ee21493d4f47bb39aee3e2d33cb08d9", "patch": "@@ -3042,6 +3042,17 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n   tree ptrmem_type;\n   tree member;\n \n+  if (TREE_CODE (ptrmem) == CONSTRUCTOR)\n+    {\n+      unsigned int ix;\n+      tree index, value;\n+      FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ptrmem),\n+\t\t\t\tix, index, value)\n+\tif (index && DECL_P (index) && DECL_NAME (index) == member_name)\n+\t  return value;\n+      gcc_unreachable ();\n+    }\n+\n   /* This code is a stripped down version of\n      build_class_member_access_expr.  It does not work to use that\n      routine directly because it expects the object to be of class\n@@ -8511,7 +8522,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n \t{\n \t  if (same_type_p (to_type, pfn_type))\n \t    return pfn;\n-\t  else if (integer_zerop (n))\n+\t  else if (integer_zerop (n) && TREE_CODE (pfn) != CONSTRUCTOR)\n \t    return build_reinterpret_cast (to_type, pfn, \n                                            complain);\n \t}\n@@ -8531,12 +8542,15 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n       /* Just adjust the DELTA field.  */\n       gcc_assert  (same_type_ignoring_top_level_qualifiers_p\n \t\t   (TREE_TYPE (delta), ptrdiff_type_node));\n-      if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_delta)\n-\tn = cp_build_binary_op (input_location,\n-\t\t\t\tLSHIFT_EXPR, n, integer_one_node,\n-\t\t\t\tcomplain);\n-      delta = cp_build_binary_op (input_location,\n-\t\t\t\t  PLUS_EXPR, delta, n, complain);\n+      if (!integer_zerop (n))\n+\t{\n+\t  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_delta)\n+\t    n = cp_build_binary_op (input_location,\n+\t\t\t\t    LSHIFT_EXPR, n, integer_one_node,\n+\t\t\t\t    complain);\n+\t  delta = cp_build_binary_op (input_location,\n+\t\t\t\t      PLUS_EXPR, delta, n, complain);\n+\t}\n       return build_ptrmemfunc1 (to_type, delta, npfn);\n     }\n "}]}