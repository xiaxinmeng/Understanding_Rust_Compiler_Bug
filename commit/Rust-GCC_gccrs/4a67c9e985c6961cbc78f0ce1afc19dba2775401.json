{"sha": "4a67c9e985c6961cbc78f0ce1afc19dba2775401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE2N2M5ZTk4NWM2OTYxY2JjNzhmMGNlMWFmYzE5ZGJhMjc3NTQwMQ==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-15T03:28:07Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-15T03:28:07Z"}, "message": "cp-tree.h (struct lang_decl_flags): Add needs_final_overrider.\n\nd\n\t* cp-tree.h (struct lang_decl_flags): Add needs_final_overrider.\n\t(DECL_NEEDS_FINAL_OVERRIDER_P): New macro.\n\t* class.c (override_one_vtable): Set DECL_NEEDS_FINAL_OVERRIDER_P.\n\t* decl.c (duplicate_decls): Propagate it.\n\t* typeck2.c (abstract_virtuals_error): Use two loops to emit\n\tabstract virtual functions and virtual functions which need a\n\tfinal overrider separately.\n\nFrom-SVN: r18588", "tree": {"sha": "5dc477a4ae87ddf2829783fba1f5d00999bcb0af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dc477a4ae87ddf2829783fba1f5d00999bcb0af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a67c9e985c6961cbc78f0ce1afc19dba2775401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a67c9e985c6961cbc78f0ce1afc19dba2775401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a67c9e985c6961cbc78f0ce1afc19dba2775401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a67c9e985c6961cbc78f0ce1afc19dba2775401/comments", "author": null, "committer": null, "parents": [{"sha": "cdcb673e6e6c4b7534fb5b98efda5f8079de8905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcb673e6e6c4b7534fb5b98efda5f8079de8905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcb673e6e6c4b7534fb5b98efda5f8079de8905"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "cb3246148fa24911c7a8c3f0cb50726d2dc25287", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a67c9e985c6961cbc78f0ce1afc19dba2775401/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a67c9e985c6961cbc78f0ce1afc19dba2775401/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4a67c9e985c6961cbc78f0ce1afc19dba2775401", "patch": "@@ -2725,6 +2725,7 @@ override_one_vtable (binfo, old, t)\n \t    fndecl = copy_node (fndecl);\n \t    copy_lang_decl (fndecl);\n \t    DECL_ABSTRACT_VIRTUAL_P (fndecl) = 1;\n+\t    DECL_NEEDS_FINAL_OVERRIDER_P (fndecl) = 1;\n \t    /* Make sure we search for it later.  */\n \t    if (! CLASSTYPE_ABSTRACT_VIRTUALS (t))\n \t      CLASSTYPE_ABSTRACT_VIRTUALS (t) = error_mark_node;"}, {"sha": "43a1660a9888c09ae808ab0bdb84cfdf8593dffe", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a67c9e985c6961cbc78f0ce1afc19dba2775401/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a67c9e985c6961cbc78f0ce1afc19dba2775401/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4a67c9e985c6961cbc78f0ce1afc19dba2775401", "patch": "@@ -2740,6 +2740,7 @@ duplicate_decls (newdecl, olddecl)\n       DECL_STATIC_DESTRUCTOR (newdecl) |= DECL_STATIC_DESTRUCTOR (olddecl);\n       DECL_ABSTRACT_VIRTUAL_P (newdecl) |= DECL_ABSTRACT_VIRTUAL_P (olddecl);\n       DECL_VIRTUAL_P (newdecl) |= DECL_VIRTUAL_P (olddecl);\n+      DECL_NEEDS_FINAL_OVERRIDER_P (newdecl) |= DECL_NEEDS_FINAL_OVERRIDER_P (olddecl);\n     }\n \n   /* Deal with C++: must preserve virtual function table size.  */"}, {"sha": "2a208afd149edc55bd1ae409247619fde815ad19", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a67c9e985c6961cbc78f0ce1afc19dba2775401/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a67c9e985c6961cbc78f0ce1afc19dba2775401/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4a67c9e985c6961cbc78f0ce1afc19dba2775401", "patch": "@@ -130,6 +130,29 @@ abstract_virtuals_error (decl, type)\n      tree type;\n {\n   tree u = CLASSTYPE_ABSTRACT_VIRTUALS (type);\n+  int has_abstract_virtuals, needs_final_overriders;\n+  tree tu;\n+\n+  /* Count how many abstract methods need to be defined.  */\n+  for (has_abstract_virtuals = 0, tu = u; tu; tu = TREE_CHAIN (tu))\n+    {\n+      if (DECL_ABSTRACT_VIRTUAL_P (TREE_VALUE (tu))\n+\t  && ! DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n+\t{\n+\t  has_abstract_virtuals = 1;\n+\t  break;\n+\t}\n+    }\n+\n+  /* Count how many virtual methods need a final overrider.  */\n+  for (needs_final_overriders = 0, tu = u; tu; tu = TREE_CHAIN (tu))\n+    {\n+      if (DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n+\t{\n+\t  needs_final_overriders = 1;\n+\t  break;\n+\t}\n+    }\n \n   if (decl)\n     {\n@@ -151,19 +174,52 @@ abstract_virtuals_error (decl, type)\n       else if (TREE_CODE (decl) == FUNCTION_DECL)\n \tcp_error (\"invalid return type for function `%#D'\", decl);\n     }\n-  else cp_error (\"cannot allocate an object of type `%T'\", type);\n+  else\n+    cp_error (\"cannot allocate an object of type `%T'\", type);\n+\n   /* Only go through this once.  */\n   if (TREE_PURPOSE (u) == NULL_TREE)\n     {\n-      error (\"  since the following virtual functions are abstract:\");\n       TREE_PURPOSE (u) = error_mark_node;\n-      while (u)\n+\n+      if (has_abstract_virtuals)\n+\terror (\"  since the following virtual functions are abstract:\");\n+      tu = u;\n+      while (tu)\n+\t{\n+\t  if (DECL_ABSTRACT_VIRTUAL_P (TREE_VALUE (tu))\n+\t      && ! DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n+\t    cp_error (\"\\t%#D\", TREE_VALUE (tu));\n+\t  tu = TREE_CHAIN (tu);\n+\t}\n+\n+      if (needs_final_overriders)\n+\t{\n+\t  if (has_abstract_virtuals)\n+\t    error (\"  and the following virtual functions need a final overrider:\");\n+\t  else\n+\t    error (\"  since the following virtual functions need a final overrider:\");\n+\t}\n+      tu = u;\n+      while (tu)\n \t{\n-\t  cp_error (\"\\t%#D\", TREE_VALUE (u));\n-\t  u = TREE_CHAIN (u);\n+\t  if (DECL_NEEDS_FINAL_OVERRIDER_P (TREE_VALUE (tu)))\n+\t    cp_error (\"\\t%#D\", TREE_VALUE (tu));\n+\t  tu = TREE_CHAIN (tu);\n \t}\n     }\n-  else cp_error (\"  since type `%T' has abstract virtual functions\", type);\n+  else\n+    {\n+      if (has_abstract_virtuals)\n+\t{\n+\t  if (needs_final_overriders)\n+\t    cp_error (\"  since type `%T' has abstract virtual functions and must override virtual functions\", type);\n+\t  else\n+\t    cp_error (\"  since type `%T' has abstract virtual functions\", type);\n+\t}\n+      else\n+\tcp_error (\"  since type `%T' must override virtual functions\", type);\n+    }\n }\n \n /* Print an error message for invalid use of a signature type."}]}