{"sha": "3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwMjAxZjAxNGFiYzBjY2EyYzZiMDI4NmIzY2Q3ZjU1MmIzMGYxOQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-11-22T14:01:57Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-11-22T14:01:57Z"}, "message": "Add multilib support for embedded bare-metal targets\n\n2016-11-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config.gcc: Allow new rmprofile value for configure option\n    --with-multilib-list.\n    * config/arm/t-rmprofile: New file.\n    * doc/install.texi (--with-multilib-list): Document new rmprofile value\n    for ARM.\n\nFrom-SVN: r242696", "tree": {"sha": "a9b1f797425555a2efe3836cb585a61b522be2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9b1f797425555a2efe3836cb585a61b522be2d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c69fb8161a4fcfc302c026dec3c0c4103731cd37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69fb8161a4fcfc302c026dec3c0c4103731cd37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69fb8161a4fcfc302c026dec3c0c4103731cd37"}], "stats": {"total": 259, "additions": 246, "deletions": 13}, "files": [{"sha": "ceb9a338dd4fe95e60a48a5be9c57d56853e193c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "patch": "@@ -1,3 +1,11 @@\n+2016-11-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config.gcc: Allow new rmprofile value for configure option\n+\t--with-multilib-list.\n+\t* config/arm/t-rmprofile: New file.\n+\t* doc/install.texi (--with-multilib-list): Document new rmprofile value\n+\tfor ARM.\n+\n 2016-11-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/78439"}, {"sha": "98267d84a8e4e609ffba1a3925ff23a3f7865d52", "filename": "gcc/config.gcc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "patch": "@@ -3756,6 +3756,16 @@ case \"${target}\" in\n \t\t\t\t# pragmatic.\n \t\t\t\ttmake_profile_file=\"arm/t-aprofile\"\n \t\t\t\t;;\n+\t\t\trmprofile)\n+\t\t\t\t# Note that arm/t-rmprofile is a\n+\t\t\t\t# stand-alone make file fragment to be\n+\t\t\t\t# used only with itself.  We do not\n+\t\t\t\t# specifically use the\n+\t\t\t\t# TM_MULTILIB_OPTION framework because\n+\t\t\t\t# this shorthand is more\n+\t\t\t\t# pragmatic.\n+\t\t\t\ttmake_profile_file=\"arm/t-rmprofile\"\n+\t\t\t\t;;\n \t\t\tdefault)\n \t\t\t\t;;\n \t\t\t*)\n@@ -3765,9 +3775,10 @@ case \"${target}\" in\n \t\t\tesac\n \n \t\t\tif test \"x${tmake_profile_file}\" != x ; then\n-\t\t\t\t# arm/t-aprofile is only designed to work\n-\t\t\t\t# without any with-cpu, with-arch, with-mode,\n-\t\t\t\t# with-fpu or with-float options.\n+\t\t\t\t# arm/t-aprofile and arm/t-rmprofile are only\n+\t\t\t\t# designed to work without any with-cpu,\n+\t\t\t\t# with-arch, with-mode, with-fpu or with-float\n+\t\t\t\t# options.\n \t\t\t\tif test \"x$with_arch\" != x \\\n \t\t\t\t    || test \"x$with_cpu\" != x \\\n \t\t\t\t    || test \"x$with_float\" != x \\"}, {"sha": "c8b5c9cbd03694eea69855e20372afa3e97d6b4c", "filename": "gcc/config/arm/t-rmprofile", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2Fconfig%2Farm%2Ft-rmprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2Fconfig%2Farm%2Ft-rmprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-rmprofile?ref=3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "patch": "@@ -0,0 +1,174 @@\n+# Copyright (C) 2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This is a target makefile fragment that attempts to get\n+# multilibs built for the range of CPU's, FPU's and ABI's that\n+# are relevant for the ARM architecture.  It should not be used in\n+# conjunction with another make file fragment and assumes --with-arch,\n+# --with-cpu, --with-fpu, --with-float, --with-mode have their default\n+# values during the configure step.  We enforce this during the\n+# top-level configury.\n+\n+MULTILIB_OPTIONS     =\n+MULTILIB_DIRNAMES    =\n+MULTILIB_EXCEPTIONS  =\n+MULTILIB_MATCHES     =\n+MULTILIB_REUSE       =\n+\n+# We have the following hierachy:\n+#   ISA: A32 (.) or T16/T32 (thumb).\n+#   Architecture: ARMv6S-M (v6-m), ARMv7-M (v7-m), ARMv7E-M (v7e-m),\n+#                 ARMv8-M Baseline (v8-m.base) or ARMv8-M Mainline (v8-m.main).\n+#   FPU: VFPv3-D16 (fpv3), FPV4-SP-D16 (fpv4-sp), FPV5-SP-D16 (fpv5-sp),\n+#        VFPv5-D16 (fpv5), or None (.).\n+#   Float-abi: Soft (.), softfp (softfp), or hard (hardfp).\n+\n+# Options to build libraries with\n+\n+MULTILIB_OPTIONS       += mthumb\n+MULTILIB_DIRNAMES      += thumb\n+\n+MULTILIB_OPTIONS       += march=armv6s-m/march=armv7-m/march=armv7e-m/march=armv7/march=armv8-m.base/march=armv8-m.main\n+MULTILIB_DIRNAMES      += v6-m v7-m v7e-m v7-ar v8-m.base v8-m.main\n+\n+MULTILIB_OPTIONS       += mfpu=vfpv3-d16/mfpu=fpv4-sp-d16/mfpu=fpv5-sp-d16/mfpu=fpv5-d16\n+MULTILIB_DIRNAMES      += fpv3 fpv4-sp fpv5-sp fpv5\n+\n+MULTILIB_OPTIONS       += mfloat-abi=softfp/mfloat-abi=hard\n+MULTILIB_DIRNAMES      += softfp hard\n+\n+\n+# Option combinations to build library with\n+\n+# Default CPU/Arch\n+MULTILIB_REQUIRED      += mthumb\n+MULTILIB_REQUIRED      += mfloat-abi=hard\n+\n+# ARMv6-M\n+MULTILIB_REQUIRED      += mthumb/march=armv6s-m\n+\n+# ARMv8-M Baseline\n+MULTILIB_REQUIRED      += mthumb/march=armv8-m.base\n+\n+# ARMv7-M\n+MULTILIB_REQUIRED      += mthumb/march=armv7-m\n+\n+# ARMv7E-M\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m/mfpu=fpv4-sp-d16/mfloat-abi=softfp\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m/mfpu=fpv4-sp-d16/mfloat-abi=hard\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m/mfpu=fpv5-d16/mfloat-abi=softfp\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m/mfpu=fpv5-d16/mfloat-abi=hard\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m/mfpu=fpv5-sp-d16/mfloat-abi=softfp\n+MULTILIB_REQUIRED      += mthumb/march=armv7e-m/mfpu=fpv5-sp-d16/mfloat-abi=hard\n+\n+# ARMv8-M Mainline\n+MULTILIB_REQUIRED      += mthumb/march=armv8-m.main\n+MULTILIB_REQUIRED      += mthumb/march=armv8-m.main/mfpu=fpv5-d16/mfloat-abi=softfp\n+MULTILIB_REQUIRED      += mthumb/march=armv8-m.main/mfpu=fpv5-d16/mfloat-abi=hard\n+MULTILIB_REQUIRED      += mthumb/march=armv8-m.main/mfpu=fpv5-sp-d16/mfloat-abi=softfp\n+MULTILIB_REQUIRED      += mthumb/march=armv8-m.main/mfpu=fpv5-sp-d16/mfloat-abi=hard\n+\n+# ARMv7-R as well as ARMv7-A and ARMv8-A if aprofile was not specified\n+MULTILIB_REQUIRED      += mthumb/march=armv7\n+MULTILIB_REQUIRED      += mthumb/march=armv7/mfpu=vfpv3-d16/mfloat-abi=softfp\n+MULTILIB_REQUIRED      += mthumb/march=armv7/mfpu=vfpv3-d16/mfloat-abi=hard\n+\n+\n+# Matches\n+\n+# CPU Matches\n+MULTILIB_MATCHES       += march?armv6s-m=mcpu?cortex-m0\n+MULTILIB_MATCHES       += march?armv6s-m=mcpu?cortex-m0.small-multiply\n+MULTILIB_MATCHES       += march?armv6s-m=mcpu?cortex-m0plus\n+MULTILIB_MATCHES       += march?armv6s-m=mcpu?cortex-m0plus.small-multiply\n+MULTILIB_MATCHES       += march?armv6s-m=mcpu?cortex-m1\n+MULTILIB_MATCHES       += march?armv6s-m=mcpu?cortex-m1.small-multiply\n+MULTILIB_MATCHES       += march?armv7-m=mcpu?cortex-m3\n+MULTILIB_MATCHES       += march?armv7e-m=mcpu?cortex-m4\n+MULTILIB_MATCHES       += march?armv7e-m=mcpu?cortex-m7\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-r4\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-r4f\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-r5\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-r7\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-r8\n+MULTILIB_MATCHES       += march?armv7=mcpu?marvell-pj4\n+MULTILIB_MATCHES       += march?armv7=mcpu?generic-armv7-a\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a8\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a9\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a5\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a7\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a15\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a12\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a17\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a15.cortex-a7\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a17.cortex-a7\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a32\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a35\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a53\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a57\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a57.cortex-a53\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a72\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a72.cortex-a53\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a73\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a73.cortex-a35\n+MULTILIB_MATCHES       += march?armv7=mcpu?cortex-a73.cortex-a53\n+MULTILIB_MATCHES       += march?armv7=mcpu?exynos-m1\n+MULTILIB_MATCHES       += march?armv7=mcpu?qdf24xx\n+MULTILIB_MATCHES       += march?armv7=mcpu?xgene1\n+\n+# Arch Matches\n+MULTILIB_MATCHES       += march?armv6s-m=march?armv6-m\n+MULTILIB_MATCHES       += march?armv8-m.main=march?armv8-m.main+dsp\n+MULTILIB_MATCHES       += march?armv7=march?armv7-r\n+ifeq (,$(HAS_APROFILE))\n+MULTILIB_MATCHES       += march?armv7=march?armv7-a\n+MULTILIB_MATCHES       += march?armv7=march?armv7ve\n+MULTILIB_MATCHES       += march?armv7=march?armv8-a\n+MULTILIB_MATCHES       += march?armv7=march?armv8-a+crc\n+MULTILIB_MATCHES       += march?armv7=march?armv8.1-a\n+MULTILIB_MATCHES       += march?armv7=march?armv8.1-a+crc\n+MULTILIB_MATCHES       += march?armv7=march?armv8.2-a\n+MULTILIB_MATCHES       += march?armv7=march?armv8.2-a+fp16\n+endif\n+\n+# FPU matches\n+ifeq (,$(HAS_APROFILE))\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?vfpv3\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?vfpv3-fp16\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?vfpv3-d16-fp16\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?neon\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?neon-fp16\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?vfpv4\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?vfpv4-d16\n+MULTILIB_MATCHES       += mfpu?vfpv3-d16=mfpu?neon-vfpv4\n+MULTILIB_MATCHES       += mfpu?fpv5-d16=mfpu?fp-armv8\n+MULTILIB_MATCHES       += mfpu?fpv5-d16=mfpu?neon-fp-armv8\n+MULTILIB_MATCHES       += mfpu?fpv5-d16=mfpu?crypto-neon-fp-armv8\n+endif\n+\n+\n+# We map all requests for ARMv7-R or ARMv7-A in ARM mode to Thumb mode and\n+# any FPU to VFPv3-d16 if possible.\n+MULTILIB_REUSE         += mthumb/march.armv7=march.armv7\n+MULTILIB_REUSE         += mthumb/march.armv7/mfpu.vfpv3-d16/mfloat-abi.softfp=march.armv7/mfpu.vfpv3-d16/mfloat-abi.softfp\n+MULTILIB_REUSE         += mthumb/march.armv7/mfpu.vfpv3-d16/mfloat-abi.hard=march.armv7/mfpu.vfpv3-d16/mfloat-abi.hard\n+MULTILIB_REUSE         += mthumb/march.armv7/mfpu.vfpv3-d16/mfloat-abi.softfp=march.armv7/mfpu.fpv5-d16/mfloat-abi.softfp\n+MULTILIB_REUSE         += mthumb/march.armv7/mfpu.vfpv3-d16/mfloat-abi.hard=march.armv7/mfpu.fpv5-d16/mfloat-abi.hard\n+MULTILIB_REUSE         += mthumb/march.armv7/mfpu.vfpv3-d16/mfloat-abi.softfp=mthumb/march.armv7/mfpu.fpv5-d16/mfloat-abi.softfp\n+MULTILIB_REUSE         += mthumb/march.armv7/mfpu.vfpv3-d16/mfloat-abi.hard=mthumb/march.armv7/mfpu.fpv5-d16/mfloat-abi.hard"}, {"sha": "fe484c31c934ae42f8fd0ce6c02c003d742b9b9f", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e0201f014abc0cca2c6b0286b3cd7f552b30f19/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=3e0201f014abc0cca2c6b0286b3cd7f552b30f19", "patch": "@@ -1081,19 +1081,59 @@ sysv, aix.\n \n @item --with-multilib-list=@var{list}\n @itemx --without-multilib-list\n-Specify what multilibs to build.\n-Currently only implemented for arm*-*-*, sh*-*-* and x86-64-*-linux*.\n+Specify what multilibs to build.  @var{list} is a comma separated list of\n+values, possibly consisting of a single value.  Currently only implemented\n+for arm*-*-*, sh*-*-* and x86-64-*-linux*.  The accepted values and meaning\n+for each target is given below.\n \n @table @code\n @item arm*-*-*\n-@var{list} is either @code{default} or @code{aprofile}.  Specifying\n-@code{default} is equivalent to omitting this option while specifying\n-@code{aprofile} builds multilibs for each combination of ISA (@code{-marm} or\n-@code{-mthumb}), architecture (@code{-march=armv7-a}, @code{-march=armv7ve},\n-or @code{-march=armv8-a}), FPU available (none, @code{-mfpu=vfpv3-d16},\n-@code{-mfpu=neon}, @code{-mfpu=vfpv4-d16}, @code{-mfpu=neon-vfpv4} or\n-@code{-mfpu=neon-fp-armv8} depending on architecture) and floating-point ABI\n-(@code{-mfloat-abi=softfp} or @code{-mfloat-abi=hard}).\n+@var{list} is one of@code{default}, @code{aprofile} or @code{rmprofile}.\n+Specifying @code{default} is equivalent to omitting this option, ie. only the\n+default runtime library will be enabled.  Specifying @code{aprofile} or\n+@code{rmprofile} builds multilibs for a combination of ISA, architecture,\n+FPU available and floating-point ABI.\n+\n+The table below gives the combination of ISAs, architectures, FPUs and\n+floating-point ABIs for which multilibs are built for each accepted value.\n+\n+@multitable @columnfractions .15 .28 .30\n+@item Option @tab aprofile @tab rmprofile\n+@item ISAs\n+@tab @code{-marm} and @code{-mthumb}\n+@tab @code{-mthumb}\n+@item Architectures@*@*@*@*@*@*\n+@tab default architecture@*\n+@code{-march=armv7-a}@*\n+@code{-march=armv7ve}@*\n+@code{-march=armv8-a}@*@*@*\n+@tab default architecture@*\n+@code{-march=armv6s-m}@*\n+@code{-march=armv7-m}@*\n+@code{-march=armv7e-m}@*\n+@code{-march=armv8-m.base}@*\n+@code{-march=armv8-m.main}@*\n+@code{-march=armv7}\n+@item FPUs@*@*@*@*@*\n+@tab none@*\n+@code{-mfpu=vfpv3-d16}@*\n+@code{-mfpu=neon}@*\n+@code{-mfpu=vfpv4-d16}@*\n+@code{-mfpu=neon-vfpv4}@*\n+@code{-mfpu=neon-fp-armv8}\n+@tab none@*\n+@code{-mfpu=vfpv3-d16}@*\n+@code{-mfpu=fpv4-sp-d16}@*\n+@code{-mfpu=fpv5-sp-d16}@*\n+@code{-mfpu=fpv5-d16}@*\n+@item floating-point@/ ABIs@*@*\n+@tab @code{-mfloat-abi=soft}@*\n+@code{-mfloat-abi=softfp}@*\n+@code{-mfloat-abi=hard}\n+@tab @code{-mfloat-abi=soft}@*\n+@code{-mfloat-abi=softfp}@*\n+@code{-mfloat-abi=hard}\n+@end multitable\n \n @item sh*-*-*\n @var{list} is a comma separated list of CPU names.  These must be of the"}]}