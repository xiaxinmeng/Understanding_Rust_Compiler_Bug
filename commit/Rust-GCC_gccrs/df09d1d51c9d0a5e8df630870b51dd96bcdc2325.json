{"sha": "df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwOWQxZDUxYzlkMGE1ZThkZjYzMDg3MGI1MWRkOTZiY2RjMjMyNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-04T13:18:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-04T13:18:34Z"}, "message": "trans-array.c (gfc_trans_array_constructor_value): Use size_int for bounds of range types.\n\n2011-05-04  Richard Guenther  <rguenther@suse.de>\n\n\t* trans-array.c (gfc_trans_array_constructor_value): Use\n\tsize_int for bounds of range types.\n\t(gfc_trans_array_constructor_value): Use size_type_node\n\tfor memcpy argument.\n\t* trans-common.c (build_field): Use gfc_charlen_type_node\n\tfor lengths.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Do not pass NULL\n\tas type to build_int_cst.\n\t* trans-const.c (gfc_build_string_const): Use size_int\n\tfor bounds of range types.\n\t(gfc_build_wide_string_const): Likewise.\n\t* trans-stmt.c (gfc_trans_label_assign): Use gfc_charlen_type_node\n\tfor lengths.\n\t(gfc_trans_character_select): Likewise.\n\t(gfc_trans_character_select): Do not pass NULL\n\tas type to build_int_cst.\n\t(gfc_trans_character_select): Use size_int for bounds of range types.\n\t* trans-io.c (gfc_build_io_library_fndecls): Likewise.\n\t(add_case): Do not pass NULL as type to build_int_cst.\n\t(transfer_expr): Likewise.\n\t(transfer_array_desc): Likewise.\n\t* trans-decl.c (gfc_add_assign_aux_vars): Use gfc_charlen_type_node\n\tfor lengths.\n\t(gfc_trans_assign_aux_var): Likewise.\n\t(create_main_function): Use size_int for bounds of range types.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax_char): Do not pass\n\tNULL as type to build_int_cst.\n\t(gfc_conv_intrinsic_spacing): Likewise.\n\t(gfc_conv_intrinsic_rrspacing): Likewise.\n\t(gfc_conv_intrinsic_len): Use gfc_charlen_type_node for lengths.\n\nFrom-SVN: r173374", "tree": {"sha": "7edd68ae3ca4afd68e43a1be0427b04cd892f89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7edd68ae3ca4afd68e43a1be0427b04cd892f89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdabf26955aeaf884a8824d376b56e00effa7485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdabf26955aeaf884a8824d376b56e00effa7485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdabf26955aeaf884a8824d376b56e00effa7485"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "ce33b0495038f97a430396f2fc27e22fa9c3fb79", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -1,3 +1,36 @@\n+2011-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-array.c (gfc_trans_array_constructor_value): Use\n+\tsize_int for bounds of range types.\n+\t(gfc_trans_array_constructor_value): Use size_type_node\n+\tfor memcpy argument.\n+\t* trans-common.c (build_field): Use gfc_charlen_type_node\n+\tfor lengths.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Do not pass NULL\n+\tas type to build_int_cst.\n+\t* trans-const.c (gfc_build_string_const): Use size_int\n+\tfor bounds of range types.\n+\t(gfc_build_wide_string_const): Likewise.\n+\t* trans-stmt.c (gfc_trans_label_assign): Use gfc_charlen_type_node\n+\tfor lengths.\n+\t(gfc_trans_character_select): Likewise.\n+\t(gfc_trans_character_select): Do not pass NULL\n+\tas type to build_int_cst.\n+\t(gfc_trans_character_select): Use size_int for bounds of range types.\n+\t* trans-io.c (gfc_build_io_library_fndecls): Likewise.\n+\t(add_case): Do not pass NULL as type to build_int_cst.\n+\t(transfer_expr): Likewise.\n+\t(transfer_array_desc): Likewise.\n+\t* trans-decl.c (gfc_add_assign_aux_vars): Use gfc_charlen_type_node\n+\tfor lengths.\n+\t(gfc_trans_assign_aux_var): Likewise.\n+\t(create_main_function): Use size_int for bounds of range types.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax_char): Do not pass\n+\tNULL as type to build_int_cst.\n+\t(gfc_conv_intrinsic_spacing): Likewise.\n+\t(gfc_conv_intrinsic_rrspacing): Likewise.\n+\t(gfc_conv_intrinsic_len): Use gfc_charlen_type_node for lengths.\n+\n 2011-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-types.c (gfc_get_array_type_bounds): Remove zero notrunc"}, {"sha": "a7e5f812f89fc58d5ff62e20c0377979f728629d", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -1364,7 +1364,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t\t  p = gfc_constructor_next (p);\n \t\t}\n \n-\t      bound = build_int_cst (NULL_TREE, n - 1);\n+\t      bound = size_int (n - 1);\n               /* Create an array type to hold them.  */\n \t      tmptype = build_range_type (gfc_array_index_type,\n \t\t\t\t\t  gfc_index_zero_node, bound);\n@@ -1390,7 +1390,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t      init = gfc_build_addr_expr (NULL_TREE, init);\n \n \t      size = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (type));\n-\t      bound = build_int_cst (NULL_TREE, n * size);\n+\t      bound = build_int_cst (size_type_node, n * size);\n \t      tmp = build_call_expr_loc (input_location,\n \t\t\t\t     built_in_decls[BUILT_IN_MEMCPY], 3,\n \t\t\t\t     tmp, init, bound);"}, {"sha": "c289bbe3dafdb7ef0cfd36ef2e7f3317b184c636", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -309,7 +309,7 @@ build_field (segment_info *h, tree union_type, record_layout_info rli)\n       addr = gfc_create_var_np (pvoid_type_node, h->sym->name);\n       TREE_STATIC (len) = 1;\n       TREE_STATIC (addr) = 1;\n-      DECL_INITIAL (len) = build_int_cst (NULL_TREE, -2);\n+      DECL_INITIAL (len) = build_int_cst (gfc_charlen_type_node, -2);\n       gfc_set_decl_location (len, &h->sym->declared_at);\n       gfc_set_decl_location (addr, &h->sym->declared_at);\n       GFC_DECL_STRING_LEN (field) = pushdecl_top_level (len);"}, {"sha": "5fbe765c4938ac52b8e379a65dbaa2f7827df0cd", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -75,11 +75,11 @@ gfc_build_string_const (int length, const char *s)\n   tree len;\n \n   str = build_string (length, s);\n-  len = build_int_cst (NULL_TREE, length);\n+  len = size_int (length);\n   TREE_TYPE (str) =\n     build_array_type (gfc_character1_type_node,\n \t\t      build_range_type (gfc_charlen_type_node,\n-\t\t\t\t\tinteger_one_node, len));\n+\t\t\t\t\tsize_one_node, len));\n   return str;\n }\n \n@@ -104,11 +104,11 @@ gfc_build_wide_string_const (int kind, int length, const gfc_char_t *string)\n   str = build_string (size, s);\n   free (s);\n \n-  len = build_int_cst (NULL_TREE, length);\n+  len = size_int (length);\n   TREE_TYPE (str) =\n     build_array_type (gfc_get_char_type (kind),\n \t\t      build_range_type (gfc_charlen_type_node,\n-\t\t\t\t\tinteger_one_node, len));\n+\t\t\t\t\tsize_one_node, len));\n   return str;\n }\n "}, {"sha": "a5527d5f3c0ad178c30b2e37fcbb3db086553f31", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -1096,7 +1096,7 @@ gfc_add_assign_aux_vars (gfc_symbol * sym)\n       target label's address. Otherwise, value is the length of a format string\n       and ASSIGN_ADDR is its address.  */\n   if (TREE_STATIC (length))\n-    DECL_INITIAL (length) = build_int_cst (NULL_TREE, -2);\n+    DECL_INITIAL (length) = build_int_cst (gfc_charlen_type_node, -2);\n   else\n     gfc_defer_symbol_init (sym);\n \n@@ -3130,7 +3130,7 @@ gfc_trans_assign_aux_var (gfc_symbol * sym, gfc_wrapped_block * block)\n   /* Set the initial value to length. See the comments in\n      function gfc_add_assign_aux_vars in this file.  */\n   gfc_add_modify (&init, GFC_DECL_STRING_LEN (sym->backend_decl),\n-\t\t  build_int_cst (NULL_TREE, -2));\n+\t\t  build_int_cst (gfc_charlen_type_node, -2));\n \n   gfc_add_init_cleanup (block, gfc_finish_block (&init), NULL_TREE);\n }\n@@ -4639,7 +4639,7 @@ create_main_function (tree fndecl)\n                                            gfc_option.flag_range_check));\n \n     array_type = build_array_type (integer_type_node,\n-\t\t       build_index_type (build_int_cst (NULL_TREE, 7)));\n+\t\t\t\t   build_index_type (size_int (7)));\n     array = build_constructor (array_type, v);\n     TREE_CONSTANT (array) = 1;\n     TREE_STATIC (array) = 1;"}, {"sha": "fd538bf76d496e7336ad3a64c85d12dd6868ba34", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -2213,8 +2213,8 @@ gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n   args[0] = gfc_build_addr_expr (NULL_TREE, len);\n   var = gfc_create_var (gfc_get_pchar_type (expr->ts.kind), \"pstr\");\n   args[1] = gfc_build_addr_expr (ppvoid_type_node, var);\n-  args[2] = build_int_cst (NULL_TREE, op);\n-  args[3] = build_int_cst (NULL_TREE, nargs / 2);\n+  args[2] = build_int_cst (integer_type_node, op);\n+  args[3] = build_int_cst (integer_type_node, nargs / 2);\n \n   if (expr->ts.kind == 1)\n     function = gfor_fndecl_string_minmax;\n@@ -4420,7 +4420,7 @@ gfc_conv_intrinsic_len (gfc_se * se, gfc_expr * expr)\n   switch (arg->expr_type)\n     {\n     case EXPR_CONSTANT:\n-      len = build_int_cst (NULL_TREE, arg->value.character.length);\n+      len = build_int_cst (gfc_charlen_type_node, arg->value.character.length);\n       break;\n \n     case EXPR_ARRAY:\n@@ -4766,8 +4766,8 @@ gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n   stmtblock_t block;\n \n   k = gfc_validate_kind (BT_REAL, expr->ts.kind, false);\n-  prec = build_int_cst (NULL_TREE, gfc_real_kinds[k].digits);\n-  emin = build_int_cst (NULL_TREE, gfc_real_kinds[k].min_exponent - 1);\n+  prec = build_int_cst (integer_type_node, gfc_real_kinds[k].digits);\n+  emin = build_int_cst (integer_type_node, gfc_real_kinds[k].min_exponent - 1);\n   tiny = gfc_conv_mpfr_to_tree (gfc_real_kinds[k].tiny, expr->ts.kind, 0);\n \n   frexp = gfc_builtin_decl_for_float_kind (BUILT_IN_FREXP, expr->ts.kind);\n@@ -4850,7 +4850,7 @@ gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n   gfc_add_expr_to_block (&block, tmp);\n \n   tmp = fold_build2_loc (input_location, MINUS_EXPR, integer_type_node,\n-\t\t\t build_int_cst (NULL_TREE, prec), e);\n+\t\t\t build_int_cst (integer_type_node, prec), e);\n   tmp = build_call_expr_loc (input_location, scalbn, 2, x, tmp);\n   gfc_add_modify (&block, x, tmp);\n   stmt = gfc_finish_block (&block);"}, {"sha": "07df5d8d8879f61412c635613f4f7b8021d25a52", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -295,7 +295,7 @@ gfc_build_io_library_fndecls (void)\n   types[IOPARM_type_pchar] = pchar_type_node;\n   pad_size = 16 * TREE_INT_CST_LOW (TYPE_SIZE_UNIT (pchar_type_node));\n   pad_size += 32 * TREE_INT_CST_LOW (TYPE_SIZE_UNIT (integer_type_node));\n-  pad_idx = build_index_type (build_int_cst (NULL_TREE, pad_size - 1));\n+  pad_idx = build_index_type (size_int (pad_size - 1));\n   types[IOPARM_type_pad] = build_array_type (char_type_node, pad_idx);\n \n   /* pad actually contains pointers and integers so it needs to have an\n@@ -826,7 +826,7 @@ add_case (int label_value, gfc_st_label * label, stmtblock_t * body)\n   if (label == NULL)\n     return;\t\t\t/* No label, no case */\n \n-  value = build_int_cst (NULL_TREE, label_value);\n+  value = build_int_cst (integer_type_node, label_value);\n \n   /* Make a backend label for this case.  */\n   tmp = gfc_build_label_decl (NULL_TREE);\n@@ -2051,7 +2051,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n   switch (ts->type)\n     {\n     case BT_INTEGER:\n-      arg2 = build_int_cst (NULL_TREE, kind);\n+      arg2 = build_int_cst (integer_type_node, kind);\n       if (last_dt == READ)\n \tfunction = iocall[IOCALL_X_INTEGER];\n       else\n@@ -2060,7 +2060,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n       break;\n \n     case BT_REAL:\n-      arg2 = build_int_cst (NULL_TREE, kind);\n+      arg2 = build_int_cst (integer_type_node, kind);\n       if (last_dt == READ)\n \t{\n \t  if (gfc_real16_is_float128 && ts->kind == 16)\n@@ -2079,7 +2079,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n       break;\n \n     case BT_COMPLEX:\n-      arg2 = build_int_cst (NULL_TREE, kind);\n+      arg2 = build_int_cst (integer_type_node, kind);\n       if (last_dt == READ)\n \t{\n \t  if (gfc_real16_is_float128 && ts->kind == 16)\n@@ -2098,7 +2098,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n       break;\n \n     case BT_LOGICAL:\n-      arg2 = build_int_cst (NULL_TREE, kind);\n+      arg2 = build_int_cst (integer_type_node, kind);\n       if (last_dt == READ)\n \tfunction = iocall[IOCALL_X_LOGICAL];\n       else\n@@ -2119,7 +2119,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n \t      arg2 = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tmp)));\n \t      arg2 = fold_convert (gfc_charlen_type_node, arg2);\n \t    }\n-\t  arg3 = build_int_cst (NULL_TREE, kind);\n+\t  arg3 = build_int_cst (integer_type_node, kind);\n \t  if (last_dt == READ)\n \t    function = iocall[IOCALL_X_CHARACTER_WIDE];\n \t  else\n@@ -2203,9 +2203,9 @@ transfer_array_desc (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   if (ts->type == BT_CHARACTER)\n     charlen_arg = se->string_length;\n   else\n-    charlen_arg = build_int_cst (NULL_TREE, 0);\n+    charlen_arg = build_int_cst (gfc_charlen_type_node, 0);\n \n-  kind_arg = build_int_cst (NULL_TREE, ts->kind);\n+  kind_arg = build_int_cst (integer_type_node, ts->kind);\n \n   tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);\n   if (last_dt == READ)"}, {"sha": "75548897a08bcd1aa1be81ac39eb31fc6edad7c6", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -948,7 +948,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n   if (clauses->collapse)\n     {\n       c = build_omp_clause (where.lb->location, OMP_CLAUSE_COLLAPSE);\n-      OMP_CLAUSE_COLLAPSE_EXPR (c) = build_int_cst (NULL, clauses->collapse);\n+      OMP_CLAUSE_COLLAPSE_EXPR (c)\n+\t= build_int_cst (integer_type_node, clauses->collapse);\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n "}, {"sha": "9147d889ac601847a692456f0f5fa35d636a74f2", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df09d1d51c9d0a5e8df630870b51dd96bcdc2325/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=df09d1d51c9d0a5e8df630870b51dd96bcdc2325", "patch": "@@ -119,7 +119,7 @@ gfc_trans_label_assign (gfc_code * code)\n       gfc_expr *format = code->label1->format;\n \n       label_len = format->value.character.length;\n-      len_tree = build_int_cst (NULL_TREE, label_len);\n+      len_tree = build_int_cst (gfc_charlen_type_node, label_len);\n       label_tree = gfc_build_wide_string_const (format->ts.kind, label_len + 1,\n \t\t\t\t\t\tformat->value.character.string);\n       label_tree = gfc_build_addr_expr (pvoid_type_node, label_tree);\n@@ -2131,7 +2131,8 @@ gfc_trans_character_select (gfc_code *code)\n \t  tmp = fold_build3_loc (input_location, CASE_LABEL_EXPR,\n \t\t\t\t void_type_node,\n \t\t\t\t (d->low == NULL && d->high == NULL)\n-\t\t\t\t ? NULL : build_int_cst (NULL_TREE, d->n),\n+\t\t\t\t ? NULL : build_int_cst (integer_type_node,\n+\t\t\t\t\t\t\t d->n),\n \t\t\t\t NULL, label);\n           gfc_add_expr_to_block (&body, tmp);\n         }\n@@ -2185,7 +2186,7 @@ gfc_trans_character_select (gfc_code *code)\n     }\n \n   type = build_array_type (select_struct[k],\n-\t\t\t   build_index_type (build_int_cst (NULL_TREE, n-1)));\n+\t\t\t   build_index_type (size_int (n-1)));\n \n   init = build_constructor (type, inits);\n   TREE_CONSTANT (init) = 1;\n@@ -2209,7 +2210,8 @@ gfc_trans_character_select (gfc_code *code)\n     gcc_unreachable ();\n \n   tmp = build_call_expr_loc (input_location,\n-\t\t\t fndecl, 4, init, build_int_cst (NULL_TREE, n),\n+\t\t\t fndecl, 4, init,\n+\t\t\t build_int_cst (gfc_charlen_type_node, n),\n \t\t\t expr1se.expr, expr1se.string_length);\n   case_num = gfc_create_var (integer_type_node, \"case_num\");\n   gfc_add_modify (&block, case_num, tmp);"}]}