{"sha": "49219895115ee8d9391c29912b057a7a7f58807b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyMTk4OTUxMTVlZThkOTM5MWMyOTkxMmIwNTdhN2E3ZjU4ODA3Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-07-30T18:35:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-07-30T18:35:53Z"}, "message": "* combine.c (if_then_else_cond): Be sure that mode fits in HOST_WIDE_INT\n\nFrom-SVN: r35347", "tree": {"sha": "7013ddfaa893aa1d122d9f7e462aa5eb0c926e59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7013ddfaa893aa1d122d9f7e462aa5eb0c926e59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49219895115ee8d9391c29912b057a7a7f58807b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49219895115ee8d9391c29912b057a7a7f58807b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49219895115ee8d9391c29912b057a7a7f58807b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49219895115ee8d9391c29912b057a7a7f58807b/comments", "author": null, "committer": null, "parents": [{"sha": "25af74a0a73a453dccba99e7c91fbfd5d2fe1a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25af74a0a73a453dccba99e7c91fbfd5d2fe1a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25af74a0a73a453dccba99e7c91fbfd5d2fe1a53"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "176c7bb5f76e471765acdf173f7bc5fe87586f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49219895115ee8d9391c29912b057a7a7f58807b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49219895115ee8d9391c29912b057a7a7f58807b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49219895115ee8d9391c29912b057a7a7f58807b", "patch": "@@ -1,3 +1,7 @@\n+Sun Jul 30 20:30:41 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* combine.c (if_then_else_cond): Be sure that mode fits in HOST_WIDE_INT\n+\n Sun Jul 30 20:27:36 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* combine.c (record_promoted_value):  Allow bitsize of mode"}, {"sha": "55be324ccf0e49e67b10a8b62f58e5f348b92092", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49219895115ee8d9391c29912b057a7a7f58807b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49219895115ee8d9391c29912b057a7a7f58807b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=49219895115ee8d9391c29912b057a7a7f58807b", "patch": "@@ -7210,7 +7210,6 @@ if_then_else_cond (x, ptrue, pfalse)\n {\n   enum machine_mode mode = GET_MODE (x);\n   enum rtx_code code = GET_CODE (x);\n-  unsigned int size = GET_MODE_BITSIZE (mode);\n   rtx cond0, cond1, true0, true1, false0, false1;\n   unsigned HOST_WIDE_INT nz;\n \n@@ -7361,9 +7360,9 @@ if_then_else_cond (x, ptrue, pfalse)\n \t  true0 = operand_subword (true0, SUBREG_WORD (x), 0, mode);\n \t  false0 = operand_subword (false0, SUBREG_WORD (x), 0, mode);\n \t}\n-      *ptrue = force_to_mode (true0, mode, GET_MODE_MASK (mode), NULL_RTX, 0);\n+      *ptrue = force_to_mode (true0, mode, ~(HOST_WIDE_INT) 0, NULL_RTX, 0);\n       *pfalse\n-\t= force_to_mode (false0, mode, GET_MODE_MASK (mode), NULL_RTX, 0);\n+\t= force_to_mode (false0, mode, ~(HOST_WIDE_INT) 0, NULL_RTX, 0);\n \n       return cond0;\n     }\n@@ -7376,14 +7375,18 @@ if_then_else_cond (x, ptrue, pfalse)\n \n   /* If X is known to be either 0 or -1, those are the true and \n      false values when testing X.  */\n-  else if (num_sign_bit_copies (x, mode) == size)\n+  else if (x == constm1_rtx || x == const0_rtx\n+\t   || (mode != VOIDmode\n+\t       && num_sign_bit_copies (x, mode) == GET_MODE_BITSIZE (mode)))\n     {\n       *ptrue = constm1_rtx, *pfalse = const0_rtx;\n       return x;\n     }\n \n   /* Likewise for 0 or a single bit.  */\n-  else if (exact_log2 (nz = nonzero_bits (x, mode)) >= 0)\n+  else if (mode != VOIDmode\n+\t   && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n+\t   && exact_log2 (nz = nonzero_bits (x, mode)) >= 0)\n     {\n       *ptrue = GEN_INT (nz), *pfalse = const0_rtx;\n       return x;"}]}