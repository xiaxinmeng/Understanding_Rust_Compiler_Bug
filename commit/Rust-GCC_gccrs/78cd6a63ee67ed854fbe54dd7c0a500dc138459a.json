{"sha": "78cd6a63ee67ed854fbe54dd7c0a500dc138459a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhjZDZhNjNlZTY3ZWQ4NTRmYmU1NGRkN2MwYTUwMGRjMTM4NDU5YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-17T16:38:25Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-21T20:35:14Z"}, "message": "c++: Allow template lambdas without lambda-declarator [PR97839]\n\nOur implementation of template lambdas incorrectly requires the optional\nlambda-declarator.  This was probably required by an early draft of\ngeneric lambdas, but now the production is [expr.prim.lambda.general]:\n\n lambda-expression:\n    lambda-introducer lambda-declarator [opt] compound-statement\n    lambda-introducer < template-parameter-list > requires-clause [opt]\n\t  lambda-declarator [opt] compound-statement\n\nTherefore, we should accept the following test.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97839\n\t* parser.c (cp_parser_lambda_declarator_opt): Don't require ().\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97839\n\t* g++.dg/cpp2a/lambda-generic8.C: New test.", "tree": {"sha": "bf7e0f1f965778ff911221099b83e465ddfccdd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7e0f1f965778ff911221099b83e465ddfccdd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78cd6a63ee67ed854fbe54dd7c0a500dc138459a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cd6a63ee67ed854fbe54dd7c0a500dc138459a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78cd6a63ee67ed854fbe54dd7c0a500dc138459a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cd6a63ee67ed854fbe54dd7c0a500dc138459a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddaad23e2f49a91ab59f87f31b01e57439a3d6df"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "ea5af7094874cdef317fd7d822b27b63485e538c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78cd6a63ee67ed854fbe54dd7c0a500dc138459a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78cd6a63ee67ed854fbe54dd7c0a500dc138459a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=78cd6a63ee67ed854fbe54dd7c0a500dc138459a", "patch": "@@ -10604,6 +10604,8 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \n    lambda-expression:\n      lambda-introducer lambda-declarator [opt] compound-statement\n+     lambda-introducer < template-parameter-list > requires-clause [opt]\n+       lambda-declarator [opt] compound-statement\n \n    Returns a representation of the expression.  */\n \n@@ -11061,13 +11063,11 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n /* Parse the (optional) middle of a lambda expression.\n \n    lambda-declarator:\n-     < template-parameter-list [opt] >\n-       requires-clause [opt]\n-     ( parameter-declaration-clause [opt] )\n-       attribute-specifier [opt]\n+     ( parameter-declaration-clause )\n        decl-specifier-seq [opt]\n-       exception-specification [opt]\n-       lambda-return-type-clause [opt]\n+       noexcept-specifier [opt]\n+       attribute-specifier-seq [opt]\n+       trailing-return-type [opt]\n        requires-clause [opt]\n \n    LAMBDA_EXPR is the current representation of the lambda expression.  */\n@@ -11217,8 +11217,6 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n          trailing-return-type in case of decltype.  */\n       pop_bindings_and_leave_scope ();\n     }\n-  else if (template_param_list != NULL_TREE) // generate diagnostic\n-    cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n \n   /* Create the function call operator.\n "}, {"sha": "f3c3809b36ddb37a8b17d0dd8b2c8580333cc754", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic8.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78cd6a63ee67ed854fbe54dd7c0a500dc138459a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78cd6a63ee67ed854fbe54dd7c0a500dc138459a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic8.C?ref=78cd6a63ee67ed854fbe54dd7c0a500dc138459a", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/97839\n+// { dg-do compile { target c++20 } }\n+// Test that a lambda with <template-param-list> doesn't require\n+// a lambda-declarator.\n+\n+int main()\n+{\n+  []<typename T>{}.operator()<int>();\n+}"}]}