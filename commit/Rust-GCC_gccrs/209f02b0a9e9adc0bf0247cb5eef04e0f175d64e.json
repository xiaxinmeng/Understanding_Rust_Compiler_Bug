{"sha": "209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "node_id": "C_kwDOANBUbNoAKDIwOWYwMmIwYTllOWFkYzBiZjAyNDdjYjVlZWYwNGUwZjE3NWQ2NGU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2023-02-01T05:30:12Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2023-02-02T09:02:01Z"}, "message": "Don't peel nonlinear iv(mult or shift) for epilog when vf is not constant.\n\nNormally when vf is not constant, it will be prevented by\nvectorizable_nonlinear_inductions, but for this case, it failed going\ninto\n\n    if (STMT_VINFO_RELEVANT_P (stmt_info))\n      {\n\tneed_to_vectorize = true;\n\tif (STMT_VINFO_DEF_TYPE (stmt_info) == vect_induction_def\n\t   && ! PURE_SLP_STMT (stmt_info))\n\t  ok = vectorizable_induction (loop_vinfo,\n\t\t\t\t       stmt_info, NULL, NULL,\n\t\t\t\t       &cost_vec);\n\nsince the iv is never used outside of the loop, and will be dce later, so\nvectorizer doesn't bother checking if it's vectorizable. it's\ntrue but hit gcc_assert in vect_can_peel_nonlinear_iv_p when vf is not\nconstant. One solution is ignoring the nonlinear iv peeling if it's\n!STMT_VINFO_RELEVANT_P (stmt_info) just like the upper code, the other\nsolution is returning false earlier in the\nvect_can_peel_nonlinear_iv_p when vf is not constant, the patch chooses\nthe second incase there's other cases using vect_can_advance_ivs_p which\ncalls vect_can_peel_nonlinear_iv_p.\nAlso remove vect_peel_nonlinear_iv_p from\nvectorizable_nonlinear_inductions.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/108601\n\t* tree-vectorizer.h (vect_can_peel_nonlinear_iv_p): Removed.\n\t* tree-vect-loop.cc\n\t(vectorizable_nonlinear_induction): Remove\n\tvect_can_peel_nonlinear_iv_p.\n\t(vect_can_peel_nonlinear_iv_p): Don't peel\n\tnonlinear iv(mult or shift) for epilog when vf is not\n\tconstant and moved the defination to ..\n\t* tree-vect-loop-manip.cc (vect_can_peel_nonlinear_iv_p):\n\t.. Here.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/pr108601.c: New test.", "tree": {"sha": "536170ab9e00d799297b6d85f3258b604107ba77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536170ab9e00d799297b6d85f3258b604107ba77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f349928e16fdc7dba52561e8d40347909f9f0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f349928e16fdc7dba52561e8d40347909f9f0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f349928e16fdc7dba52561e8d40347909f9f0ff"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "deb8b3061d89958ed760b8da46610e441e514252", "filename": "gcc/testsuite/gcc.target/aarch64/pr108601.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108601.c?ref=209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fprofile-generate -mcpu=neoverse-v1\" } */\n+\n+int\n+foo() {\n+  int flag = 1;\n+  for (; flag <= 1 << 21; flag <<= 1)\n+    ;\n+  return 0;\n+}\n+"}, {"sha": "c04fcf40c44ec06f1149174d131c89981fc5e366", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "patch": "@@ -1390,6 +1390,50 @@ iv_phi_p (stmt_vec_info stmt_info)\n   return true;\n }\n \n+/* Return true if vectorizer can peel for nonlinear iv.  */\n+static bool\n+vect_can_peel_nonlinear_iv_p (loop_vec_info loop_vinfo,\n+\t\t\t      enum vect_induction_op_type induction_type)\n+{\n+  tree niters_skip;\n+  /* Init_expr will be update by vect_update_ivs_after_vectorizer,\n+     if niters or vf is unkown:\n+     For shift, when shift mount >= precision, there would be UD.\n+     For mult, don't known how to generate\n+     init_expr * pow (step, niters) for variable niters.\n+     For neg, it should be ok, since niters of vectorized main loop\n+     will always be multiple of 2.  */\n+  if ((!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+       || !LOOP_VINFO_VECT_FACTOR (loop_vinfo).is_constant ())\n+      && induction_type != vect_step_op_neg)\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"Peeling for epilogue is not supported\"\n+\t\t\t \" for nonlinear induction except neg\"\n+\t\t\t \" when iteration count is unknown.\\n\");\n+      return false;\n+    }\n+\n+  /* Also doens't support peel for neg when niter is variable.\n+     ??? generate something like niter_expr & 1 ? init_expr : -init_expr?  */\n+  niters_skip = LOOP_VINFO_MASK_SKIP_NITERS (loop_vinfo);\n+  if ((niters_skip != NULL_TREE\n+       && TREE_CODE (niters_skip) != INTEGER_CST)\n+      || (!vect_use_loop_mask_for_alignment_p (loop_vinfo)\n+\t  && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) < 0))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"Peeling for alignement is not supported\"\n+\t\t\t \" for nonlinear induction when niters_skip\"\n+\t\t\t \" is not constant.\\n\");\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Function vect_can_advance_ivs_p\n \n    In case the number of iterations that LOOP iterates is unknown at compile"}, {"sha": "becf96bb2b804529a5f68cc1a759b279dce8c76f", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "patch": "@@ -8812,49 +8812,6 @@ vect_update_nonlinear_iv (gimple_seq* stmts, tree vectype,\n \n }\n \n-/* Return true if vectorizer can peel for nonlinear iv.  */\n-bool\n-vect_can_peel_nonlinear_iv_p (loop_vec_info loop_vinfo,\n-\t\t\t      enum vect_induction_op_type induction_type)\n-{\n-  tree niters_skip;\n-  /* Init_expr will be update by vect_update_ivs_after_vectorizer,\n-     if niters is unkown:\n-     For shift, when shift mount >= precision, there would be UD.\n-     For mult, don't known how to generate\n-     init_expr * pow (step, niters) for variable niters.\n-     For neg, it should be ok, since niters of vectorized main loop\n-     will always be multiple of 2.  */\n-  if (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-      && induction_type != vect_step_op_neg)\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"Peeling for epilogue is not supported\"\n-\t\t\t \" for nonlinear induction except neg\"\n-\t\t\t \" when iteration count is unknown.\\n\");\n-      return false;\n-    }\n-\n-  /* Also doens't support peel for neg when niter is variable.\n-     ??? generate something like niter_expr & 1 ? init_expr : -init_expr?  */\n-  niters_skip = LOOP_VINFO_MASK_SKIP_NITERS (loop_vinfo);\n-  if ((niters_skip != NULL_TREE\n-       && TREE_CODE (niters_skip) != INTEGER_CST)\n-      || (!vect_use_loop_mask_for_alignment_p (loop_vinfo)\n-\t  && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) < 0))\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"Peeling for alignement is not supported\"\n-\t\t\t \" for nonlinear induction when niters_skip\"\n-\t\t\t \" is not constant.\\n\");\n-      return false;\n-    }\n-\n-  return true;\n-}\n-\n /* Function vectorizable_induction\n \n    Check if STMT_INFO performs an nonlinear induction computation that can be\n@@ -8925,9 +8882,6 @@ vectorizable_nonlinear_induction (loop_vec_info loop_vinfo,\n       return false;\n     }\n \n-  if (!vect_can_peel_nonlinear_iv_p (loop_vinfo, induction_type))\n-    return false;\n-\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (vectype)))\n     {\n       if (dump_enabled_p ())"}, {"sha": "4ba653712e98d80e96b1bf898ad32b0c67c2bad4", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209f02b0a9e9adc0bf0247cb5eef04e0f175d64e/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=209f02b0a9e9adc0bf0247cb5eef04e0f175d64e", "patch": "@@ -2347,9 +2347,6 @@ extern tree cse_and_gimplify_to_preheader (loop_vec_info, tree);\n /* Nonlinear induction.  */\n extern tree vect_peel_nonlinear_iv_init (gimple_seq*, tree, tree,\n \t\t\t\t\t tree, enum vect_induction_op_type);\n-extern bool\n-vect_can_peel_nonlinear_iv_p (loop_vec_info loop_vinfo,\n-\t\t\t      enum vect_induction_op_type induction_type);\n \n /* In tree-vect-slp.cc.  */\n extern void vect_slp_init (void);"}]}