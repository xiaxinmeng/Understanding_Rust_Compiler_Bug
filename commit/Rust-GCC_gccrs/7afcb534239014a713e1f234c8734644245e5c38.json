{"sha": "7afcb534239014a713e1f234c8734644245e5c38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmY2I1MzQyMzkwMTRhNzEzZTFmMjM0Yzg3MzQ2NDQyNDVlNWMzOA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T04:14:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T05:03:07Z"}, "message": "Support embedded broadcast for AVX512FP16 instructions.\n\ngcc/ChangeLog:\n\n\tPR target/87767\n\t* config/i386/i386.c (ix86_print_operand): Handle\n\tV8HF/V16HF/V32HFmode.\n\t* config/i386/i386.h (VALID_BCST_MODE_P): Add HFmode.\n\t* config/i386/sse.md (avx512bcst): Remove.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-broadcast-1.c: New test.\n\t* gcc.target/i386/avx512fp16-broadcast-2.c: New test.", "tree": {"sha": "64a5dcfeda5dc83246ef8b9de711e6eacd9f62b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a5dcfeda5dc83246ef8b9de711e6eacd9f62b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7afcb534239014a713e1f234c8734644245e5c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afcb534239014a713e1f234c8734644245e5c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afcb534239014a713e1f234c8734644245e5c38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afcb534239014a713e1f234c8734644245e5c38/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b57c1d4a8777bedfe4ed47166f033e71bc144b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b57c1d4a8777bedfe4ed47166f033e71bc144b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b57c1d4a8777bedfe4ed47166f033e71bc144b"}], "stats": {"total": 102, "additions": 93, "deletions": 9}, "files": [{"sha": "1f6d6ce567c094b74948a7f118484cd6a0bde8c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7afcb534239014a713e1f234c8734644245e5c38", "patch": "@@ -13610,12 +13610,17 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \tcase E_V8SFmode:\n \tcase E_V8DFmode:\n \tcase E_V8DImode:\n+\tcase E_V8HFmode:\n \t  fputs (\"{1to8}\", file);\n \t  break;\n \tcase E_V16SFmode:\n \tcase E_V16SImode:\n+\tcase E_V16HFmode:\n \t  fputs (\"{1to16}\", file);\n \t  break;\n+\tcase E_V32HFmode:\n+\t  fputs (\"{1to32}\", file);\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "8a4251b49265e1fd690d2f9f93c1c72dfa037bbf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7afcb534239014a713e1f234c8734644245e5c38", "patch": "@@ -1105,7 +1105,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_BCST_MODE_P(MODE)\t\t\t\\\n   ((MODE) == SFmode || (MODE) == DFmode\t\t\\\n-   || (MODE) == SImode || (MODE) == DImode)\n+   || (MODE) == SImode || (MODE) == DImode\t\\\n+   || (MODE) == HFmode)\n \n /* It is possible to write patterns to move flags; but until someone\n    does it,  */"}, {"sha": "c5d202cf5bde73d381447683498feae19c54129c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7afcb534239014a713e1f234c8734644245e5c38", "patch": "@@ -841,14 +841,6 @@\n (define_mode_iterator V16_256 [V16HI V16HF])\n (define_mode_iterator V32_512 [V32HI V32HF])\n \n-(define_mode_attr avx512bcst\n-  [(V4SI \"%{1to4%}\") (V2DI \"%{1to2%}\")\n-   (V8SI \"%{1to8%}\") (V4DI \"%{1to4%}\")\n-   (V16SI \"%{1to16%}\") (V8DI \"%{1to8%}\")\n-   (V4SF \"%{1to4%}\") (V2DF \"%{1to2%}\")\n-   (V8SF \"%{1to8%}\") (V4DF \"%{1to4%}\")\n-   (V16SF \"%{1to16%}\") (V8DF \"%{1to8%}\")])\n-\n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse\n   [(SF \"sse\") (DF \"sse2\") (HF \"avx512fp16\")"}, {"sha": "3e2397f066f86da2feb4afc87162ea26cd65163f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-broadcast-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-1.c?ref=7afcb534239014a713e1f234c8734644245e5c38", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/87767 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mavx512dq\" } */\n+/* { dg-additional-options \"-mdynamic-no-pic\" { target { *-*-darwin* && ia32 } } }\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 4 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to32\\\\\\}\" 4 } }  */\n+\n+typedef _Float16 v8hf  __attribute__ ((vector_size (16)));\n+typedef _Float16 v16hf  __attribute__ ((vector_size (32)));\n+typedef _Float16 v32hf  __attribute__ ((vector_size (64)));\n+\n+#define CONSTANT 101;\n+#define FOO(VTYPE, OP_NAME, OP)                        \\\n+VTYPE                                          \\\n+ __attribute__ ((noipa))                       \\\n+foo_##OP_NAME##_##VTYPE (VTYPE a)              \\\n+{                                              \\\n+  return a OP CONSTANT;                                \\\n+}                                              \\\n+\n+FOO (v8hf, add, +);\n+FOO (v16hf, add, +);\n+FOO (v32hf, add, +);\n+FOO (v8hf, sub, -);\n+FOO (v16hf, sub, -);\n+FOO (v32hf, sub, -);\n+FOO (v8hf, mul, *);\n+FOO (v16hf, mul, *);\n+FOO (v32hf, mul, *);\n+FOO (v8hf, div, /);\n+FOO (v16hf, div, /);\n+FOO (v32hf, div, /);"}, {"sha": "016e0ea465b12fc55c2b3abbdea7c2e2bdb57a38", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-broadcast-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afcb534239014a713e1f234c8734644245e5c38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-broadcast-2.c?ref=7afcb534239014a713e1f234c8734644245e5c38", "patch": "@@ -0,0 +1,53 @@\n+/* PR target/87767 */\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mavx512fp16 -mavx512dq -mavx512vl\" } */\n+/* { dg-require-effective-target avx512dq } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#define AVX512DQ\n+#define AVX512VL\n+#define AVX512FP16\n+#include \"avx512f-helper.h\"\n+\n+#include \"avx512fp16-broadcast-1.c\"\n+\n+#define RTEST(VTYPE, TYPE, N, OP_NAME, OP)             \\\n+  do                                                   \\\n+    {                                                  \\\n+      TYPE exp[N], src[N];                             \\\n+      VTYPE res;                                       \\\n+      for (int i = 0; i < N; i++)                      \\\n+       src[i] = 2.0 * i - 8.4;                         \\\n+      res = foo_##OP_NAME##_##VTYPE (*(VTYPE*)&src[0]);        \\\n+      for (int i = 0; i < N; i ++)                     \\\n+       exp[i] = src[i] OP CONSTANT;                    \\\n+      for (int j = 0; j < N; j++)                      \\\n+       {                                               \\\n+         if (res[j] != exp[j])                         \\\n+           abort();                                    \\\n+       }                                               \\\n+    }                                                  \\\n+  while (0)\n+\n+void\n+test_256 (void)\n+{\n+  RTEST (v8hf, _Float16, 8, add, +);\n+  RTEST (v16hf, _Float16, 16, add, +);\n+  RTEST (v32hf, _Float16, 32, add, +);\n+  RTEST (v8hf, _Float16, 8, sub, -);\n+  RTEST (v16hf, _Float16, 16, sub, -);\n+  RTEST (v32hf, _Float16, 32, sub, -);\n+  RTEST (v8hf, _Float16, 8, mul, *);\n+  RTEST (v16hf, _Float16, 16, mul, *);\n+  RTEST (v32hf, _Float16, 32, mul, *);\n+  RTEST (v8hf, _Float16, 8, div, /);\n+  RTEST (v16hf, _Float16, 16, div, /);\n+  RTEST (v32hf, _Float16, 32, div, /);\n+}\n+\n+void\n+test_128 (void)\n+{\n+}"}]}