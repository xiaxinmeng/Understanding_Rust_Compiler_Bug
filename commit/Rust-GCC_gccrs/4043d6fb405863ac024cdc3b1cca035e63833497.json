{"sha": "4043d6fb405863ac024cdc3b1cca035e63833497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0M2Q2ZmI0MDU4NjNhYzAyNGNkYzNiMWNjYTAzNWU2MzgzMzQ5Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-01-20T07:38:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-01-20T07:38:18Z"}, "message": "re PR target/13557 (deviation from the psABI for small structures)\n\n\tPR target/13557\n\t* config/sparc/sparc.c (function_arg): Reorder the cases.\n\nFrom-SVN: r76202", "tree": {"sha": "3ea858ffd65c2aa274ad51f09b33c6482e341ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ea858ffd65c2aa274ad51f09b33c6482e341ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4043d6fb405863ac024cdc3b1cca035e63833497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4043d6fb405863ac024cdc3b1cca035e63833497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4043d6fb405863ac024cdc3b1cca035e63833497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4043d6fb405863ac024cdc3b1cca035e63833497/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54020b29a8760669d695760325b82e97f260df2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54020b29a8760669d695760325b82e97f260df2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54020b29a8760669d695760325b82e97f260df2c"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "c48b56ef316ef1d05cb67b48e6e02d00f66923a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043d6fb405863ac024cdc3b1cca035e63833497/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043d6fb405863ac024cdc3b1cca035e63833497/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4043d6fb405863ac024cdc3b1cca035e63833497", "patch": "@@ -1,3 +1,8 @@\n+2004-01-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/13557\n+\t* config/sparc/sparc.c (function_arg): Reorder the cases.\n+\n 2004-01-19  Per Bothner  <per@bothner.com>\n \n \tMove cpp_reader's line_maps field to a shared global."}, {"sha": "6002a5d73002035fe17e9ff4abe4364e5e154878", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043d6fb405863ac024cdc3b1cca035e63833497/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043d6fb405863ac024cdc3b1cca035e63833497/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4043d6fb405863ac024cdc3b1cca035e63833497", "patch": "@@ -5353,13 +5353,34 @@ function_arg (const struct sparc_args *cum, enum machine_mode mode,\n       reg = gen_rtx_REG (mode, regno);\n       return reg;\n     }\n+    \n+  if (type && TREE_CODE (type) == RECORD_TYPE)\n+    {\n+      /* Structures up to 16 bytes in size are passed in arg slots on the\n+\t stack and are promoted to registers where possible.  */\n+\n+      if (int_size_in_bytes (type) > 16)\n+\tabort (); /* shouldn't get here */\n+\n+      return function_arg_record_value (type, mode, slotno, named, regbase);\n+    }\n+  else if (type && TREE_CODE (type) == UNION_TYPE)\n+    {\n+      enum machine_mode mode;\n+      int bytes = int_size_in_bytes (type);\n+\n+      if (bytes > 16)\n+\tabort ();\n \n+      mode = mode_for_size (bytes * BITS_PER_UNIT, MODE_INT, 0);\n+      reg = gen_rtx_REG (mode, regno);\n+    }\n   /* v9 fp args in reg slots beyond the int reg slots get passed in regs\n      but also have the slot allocated for them.\n      If no prototype is in scope fp values in register slots get passed\n      in two places, either fp regs and int regs or fp regs and memory.  */\n-  if ((GET_MODE_CLASS (mode) == MODE_FLOAT\n-       || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n+  else if ((GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t    || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n       && SPARC_FP_REG_P (regno))\n     {\n       reg = gen_rtx_REG (mode, regno);\n@@ -5423,27 +5444,6 @@ function_arg (const struct sparc_args *cum, enum machine_mode mode,\n \t    }\n \t}\n     }\n-  else if (type && TREE_CODE (type) == RECORD_TYPE)\n-    {\n-      /* Structures up to 16 bytes in size are passed in arg slots on the\n-\t stack and are promoted to registers where possible.  */\n-\n-      if (int_size_in_bytes (type) > 16)\n-\tabort (); /* shouldn't get here */\n-\n-      return function_arg_record_value (type, mode, slotno, named, regbase);\n-    }\n-  else if (type && TREE_CODE (type) == UNION_TYPE)\n-    {\n-      enum machine_mode mode;\n-      int bytes = int_size_in_bytes (type);\n-\n-      if (bytes > 16)\n-\tabort ();\n-\n-      mode = mode_for_size (bytes * BITS_PER_UNIT, MODE_INT, 0);\n-      reg = gen_rtx_REG (mode, regno);\n-    }\n   else\n     {\n       /* Scalar or complex int.  */"}]}