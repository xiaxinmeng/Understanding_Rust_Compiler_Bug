{"sha": "9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhMDAzMmM5MTgzYzIwMjQ3YWE4YjE2NjUwYWQxYzI2ZTljZDNmZA==", "commit": {"author": {"name": "Marat Zakirov", "email": "m.zakirov@samsung.com", "date": "2014-11-18T08:46:39Z"}, "committer": {"name": "Marat Zakirov", "email": "mzakirov@gcc.gnu.org", "date": "2014-11-18T08:46:39Z"}, "message": "opts.c (finish_options): Disable aggressive opts for sanitizer.\n\ngcc\n\n2014-11-18  Marat Zakirov  <m.zakirov@samsung.com>\n\n\t* opts.c (finish_options): Disable aggressive opts for sanitizer.  \n\t(common_handle_option): Move code to finish_options.  \n\ngcc/testsuite\n\n2014-11-18  Marat Zakirov  <m.zakirov@samsung.com>\n\n\t* c-c++-common/asan/aggressive-opts.c: New test.\n\nFrom-SVN: r217690", "tree": {"sha": "fa0e89f662222008a55de589be3b96b6f1bc3ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0e89f662222008a55de589be3b96b6f1bc3ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/comments", "author": null, "committer": null, "parents": [{"sha": "24ebfddf68935c1eee6e91296040edc8a0ebb5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ebfddf68935c1eee6e91296040edc8a0ebb5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ebfddf68935c1eee6e91296040edc8a0ebb5d8"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "4877dc977479c08340f786106fc4f07700a58beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "patch": "@@ -1,3 +1,8 @@\n+2014-11-18  Marat Zakirov  <m.zakirov@samsung.com>\n+\n+\t* opts.c (finish_options): Disable aggressive opts for sanitizer.  \n+\t(common_handle_option): Move code to finish_options.  \n+\n 2014-11-18  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/63802"}, {"sha": "a83345b91e21fd5a02dd69252385695dedbc9a1a", "filename": "gcc/opts.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "patch": "@@ -904,6 +904,19 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   if (opts->x_flag_sanitize_recover & SANITIZE_LEAK)\n     error_at (loc, \"-fsanitize-recover=leak is not supported\");\n+\n+  /* When instrumenting the pointers, we don't want to remove\n+     the null pointer checks.  */\n+  if (opts->x_flag_sanitize & (SANITIZE_NULL | SANITIZE_NONNULL_ATTRIBUTE\n+\t\t\t\t| SANITIZE_RETURNS_NONNULL_ATTRIBUTE))\n+    opts->x_flag_delete_null_pointer_checks = 0;\n+\n+  /* Aggressive compiler optimizations may cause false negatives.  */\n+  if (opts->x_flag_sanitize)\n+    {\n+      opts->x_flag_aggressive_loop_optimizations = 0;\n+      opts->x_flag_strict_overflow = 0;\n+    }\n }\n \n #define LEFT_COLUMN\t27\n@@ -1622,12 +1635,6 @@ common_handle_option (struct gcc_options *opts,\n \tif (code != OPT_fsanitize_)\n \t  break;\n \n-\t/* When instrumenting the pointers, we don't want to remove\n-\t   the null pointer checks.  */\n-\tif (opts->x_flag_sanitize & (SANITIZE_NULL | SANITIZE_NONNULL_ATTRIBUTE\n-\t\t\t\t     | SANITIZE_RETURNS_NONNULL_ATTRIBUTE))\n-\t  opts->x_flag_delete_null_pointer_checks = 0;\n-\n \t/* Kernel ASan implies normal ASan but does not yet support\n \t   all features.  */\n \tif (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS)"}, {"sha": "fbae34cb8c053ee0739589197d45ee2fd6761e02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "patch": "@@ -1,3 +1,7 @@\n+2014-11-18  Marat Zakirov  <m.zakirov@samsung.com>\n+\n+\t* c-c++-common/asan/aggressive-opts.c: New test.\n+\n 2014-11-18  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/63802"}, {"sha": "979b6118d1d9770b04497dc94ea30f87276301ff", "filename": "gcc/testsuite/c-c++-common/asan/aggressive-opts.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Faggressive-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca0032c9183c20247aa8b16650ad1c26e9cd3fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Faggressive-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Faggressive-opts.c?ref=9ca0032c9183c20247aa8b16650ad1c26e9cd3fd", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-fdump-tree-asan\" } */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O3\" } } */\n+\n+int ext;\n+\n+int\n+Perl_do_sv_dump()\n+{\n+    int freq[10];\n+    int i;\n+    int max = 0;\n+\n+    if (max < ext)\n+      max = ext;\n+    \n+    for (i = 0; i <= max; i++)\n+      if (freq[i])\n+\text = 0;\n+\n+    if (i > 20)\n+      return freq[i];\n+    else\n+      return 0;    \n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ASAN_CHECK\" 2 \"asan1\" } } */\n+/* { dg-final { cleanup-tree-dump \"asan1\" } } */"}]}