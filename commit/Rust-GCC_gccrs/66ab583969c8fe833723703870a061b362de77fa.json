{"sha": "66ab583969c8fe833723703870a061b362de77fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhYjU4Mzk2OWM4ZmU4MzM3MjM3MDM4NzBhMDYxYjM2MmRlNzdmYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2019-12-05T02:20:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-12-05T02:20:11Z"}, "message": "libbacktrace: simplify DWARF section handling\n\nThis is in preparation for adding DWARF 5 support.\n\n\t* internal.h (enum dwarf_section): Define.\n\t(struct dwarf_sections): Define.\n\t(backtrace_dwarf_add): Update declaration to replace specific\n\tsection parameters with dwarf_sections parameter.\n\t* dwarf.c (struct dwarf_data): Replace specific section fields\n\twith dwarf_sections field.\n\t(read_attribute): Use dwarf_sections with altlink.\n\t(build_address_map): Replace specific section parameters with\n\tdwarf_sections parameter.  Change all callers.\n\t(read_line_info): Use dwarf_sections with ddata.\n\t(read_referenced_name): Likewise.\n\t(add_function_ranges): Likewise.\n\t(read_function_entry): Likewise.\n\t(read_function_info): Likewise.\n\t(build_dwarf_data): Replace specific section parameters with\n\tdwarf_sections parameter.  Change all callers.\n\t(backtrace_dwarf_add): Likewise.\n\t* elf.c (enum debug_section): Remove.\n\t(dwarf_section_names): Remove .zdebug names.\n\t(elf_add): Track zsections separately.  Build dwarf_sections.\n\t* pecoff.c (enum debug_section): Remove.\n\t(struct debug_section_info): Remove data field.\n\t(coff_add): Build dwarf_sections.\n\t* xcoff.c (enum dwarf_section): Remove.  Replace DWSECT_xxx\n\treferences with DEBUG_xxx references.\n\t(xcoff_add): Build dwarf_sections.\n\nFrom-SVN: r278984", "tree": {"sha": "b56c972c897f04194bf100b70bf0a40a31e53468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56c972c897f04194bf100b70bf0a40a31e53468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66ab583969c8fe833723703870a061b362de77fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ab583969c8fe833723703870a061b362de77fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ab583969c8fe833723703870a061b362de77fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ab583969c8fe833723703870a061b362de77fa/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "268209f3a0dc07fcf13534610447ab732742eb2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268209f3a0dc07fcf13534610447ab732742eb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268209f3a0dc07fcf13534610447ab732742eb2f"}], "stats": {"total": 391, "additions": 183, "deletions": 208}, "files": [{"sha": "365aef7d4bdb960f13952689fc92f838fd33e511", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=66ab583969c8fe833723703870a061b362de77fa", "patch": "@@ -1,3 +1,32 @@\n+2019-12-04  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* internal.h (enum dwarf_section): Define.\n+\t(struct dwarf_sections): Define.\n+\t(backtrace_dwarf_add): Update declaration to replace specific\n+\tsection parameters with dwarf_sections parameter.\n+\t* dwarf.c (struct dwarf_data): Replace specific section fields\n+\twith dwarf_sections field.\n+\t(read_attribute): Use dwarf_sections with altlink.\n+\t(build_address_map): Replace specific section parameters with\n+\tdwarf_sections parameter.  Change all callers.\n+\t(read_line_info): Use dwarf_sections with ddata.\n+\t(read_referenced_name): Likewise.\n+\t(add_function_ranges): Likewise.\n+\t(read_function_entry): Likewise.\n+\t(read_function_info): Likewise.\n+\t(build_dwarf_data): Replace specific section parameters with\n+\tdwarf_sections parameter.  Change all callers.\n+\t(backtrace_dwarf_add): Likewise.\n+\t* elf.c (enum debug_section): Remove.\n+\t(dwarf_section_names): Remove .zdebug names.\n+\t(elf_add): Track zsections separately.  Build dwarf_sections.\n+\t* pecoff.c (enum debug_section): Remove.\n+\t(struct debug_section_info): Remove data field.\n+\t(coff_add): Build dwarf_sections.\n+\t* xcoff.c (enum dwarf_section): Remove.  Replace DWSECT_xxx\n+\treferences with DEBUG_xxx references.\n+\t(xcoff_add): Build dwarf_sections.\n+\n 2019-09-27  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure: Regenerate."}, {"sha": "93d35710561107c3ee81cc1269c9c1c29a76d3fb", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 37, "deletions": 73, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=66ab583969c8fe833723703870a061b362de77fa", "patch": "@@ -373,18 +373,8 @@ struct dwarf_data\n   struct unit **units;\n   /* Number of units in the list.  */\n   size_t units_count;\n-  /* The unparsed .debug_info section.  */\n-  const unsigned char *dwarf_info;\n-  size_t dwarf_info_size;\n-  /* The unparsed .debug_line section.  */\n-  const unsigned char *dwarf_line;\n-  size_t dwarf_line_size;\n-  /* The unparsed .debug_ranges section.  */\n-  const unsigned char *dwarf_ranges;\n-  size_t dwarf_ranges_size;\n-  /* The unparsed .debug_str section.  */\n-  const unsigned char *dwarf_str;\n-  size_t dwarf_str_size;\n+  /* The unparsed DWARF debug data.  */\n+  struct dwarf_sections dwarf_sections;\n   /* Whether the data is big-endian or not.  */\n   int is_bigendian;\n   /* A vector used for function addresses.  We keep this here so that\n@@ -871,13 +861,14 @@ read_attribute (enum dwarf_form form, struct dwarf_buf *buf,\n \t    val->encoding = ATTR_VAL_NONE;\n \t    return 1;\n \t  }\n-\tif (offset >= altlink->dwarf_str_size)\n+\tif (offset >= altlink->dwarf_sections.size[DEBUG_STR])\n \t  {\n \t    dwarf_buf_error (buf, \"DW_FORM_GNU_strp_alt out of range\");\n \t    return 0;\n \t  }\n \tval->encoding = ATTR_VAL_STRING;\n-\tval->u.string = (const char *) altlink->dwarf_str + offset;\n+\tval->u.string =\n+\t  (const char *) altlink->dwarf_sections.data[DEBUG_STR] + offset;\n \treturn 1;\n       }\n     default:\n@@ -1499,10 +1490,7 @@ find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n \n static int\n build_address_map (struct backtrace_state *state, uintptr_t base_address,\n-\t\t   const unsigned char *dwarf_info, size_t dwarf_info_size,\n-\t\t   const unsigned char *dwarf_abbrev, size_t dwarf_abbrev_size,\n-\t\t   const unsigned char *dwarf_ranges, size_t dwarf_ranges_size,\n-\t\t   const unsigned char *dwarf_str, size_t dwarf_str_size,\n+\t\t   const struct dwarf_sections *dwarf_sections,\n \t\t   int is_bigendian, struct dwarf_data *altlink,\n \t\t   backtrace_error_callback error_callback, void *data,\n \t\t   struct unit_addrs_vector *addrs,\n@@ -1525,9 +1513,9 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n      not sure why.  */\n \n   info.name = \".debug_info\";\n-  info.start = dwarf_info;\n-  info.buf = dwarf_info;\n-  info.left = dwarf_info_size;\n+  info.start = dwarf_sections->data[DEBUG_INFO];\n+  info.buf = info.start;\n+  info.left = dwarf_sections->size[DEBUG_INFO];\n   info.is_bigendian = is_bigendian;\n   info.error_callback = error_callback;\n   info.data = data;\n@@ -1583,7 +1571,9 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \n       memset (&u->abbrevs, 0, sizeof u->abbrevs);\n       abbrev_offset = read_offset (&unit_buf, is_dwarf64);\n-      if (!read_abbrevs (state, abbrev_offset, dwarf_abbrev, dwarf_abbrev_size,\n+      if (!read_abbrevs (state, abbrev_offset,\n+\t\t\t dwarf_sections->data[DEBUG_ABBREV],\n+\t\t\t dwarf_sections->size[DEBUG_ABBREV],\n \t\t\t is_bigendian, error_callback, data, &u->abbrevs))\n \tgoto fail;\n \n@@ -1610,8 +1600,10 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       u->function_addrs_count = 0;\n \n       if (!find_address_ranges (state, base_address, &unit_buf,\n-\t\t\t\tdwarf_str, dwarf_str_size,\n-\t\t\t\tdwarf_ranges, dwarf_ranges_size,\n+\t\t\t\tdwarf_sections->data[DEBUG_STR],\n+\t\t\t\tdwarf_sections->size[DEBUG_STR],\n+\t\t\t\tdwarf_sections->data[DEBUG_RANGES],\n+\t\t\t\tdwarf_sections->size[DEBUG_RANGES],\n \t\t\t\tis_bigendian, altlink, error_callback, data,\n \t\t\t\tu, addrs, &unit_tag))\n \tgoto fail;\n@@ -2089,16 +2081,16 @@ read_line_info (struct backtrace_state *state, struct dwarf_data *ddata,\n   memset (hdr, 0, sizeof *hdr);\n \n   if (u->lineoff != (off_t) (size_t) u->lineoff\n-      || (size_t) u->lineoff >= ddata->dwarf_line_size)\n+      || (size_t) u->lineoff >= ddata->dwarf_sections.size[DEBUG_LINE])\n     {\n       error_callback (data, \"unit line offset out of range\", 0);\n       goto fail;\n     }\n \n   line_buf.name = \".debug_line\";\n-  line_buf.start = ddata->dwarf_line;\n-  line_buf.buf = ddata->dwarf_line + u->lineoff;\n-  line_buf.left = ddata->dwarf_line_size - u->lineoff;\n+  line_buf.start = ddata->dwarf_sections.data[DEBUG_LINE];\n+  line_buf.buf = ddata->dwarf_sections.data[DEBUG_LINE] + u->lineoff;\n+  line_buf.left = ddata->dwarf_sections.size[DEBUG_LINE] - u->lineoff;\n   line_buf.is_bigendian = ddata->is_bigendian;\n   line_buf.error_callback = error_callback;\n   line_buf.data = data;\n@@ -2241,7 +2233,7 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n   offset -= u->unit_data_offset;\n \n   unit_buf.name = \".debug_info\";\n-  unit_buf.start = ddata->dwarf_info;\n+  unit_buf.start = ddata->dwarf_sections.data[DEBUG_INFO];\n   unit_buf.buf = u->unit_data + offset;\n   unit_buf.left = u->unit_data_len - offset;\n   unit_buf.is_bigendian = ddata->is_bigendian;\n@@ -2267,7 +2259,8 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n \n       if (!read_attribute (abbrev->attrs[i].form, &unit_buf,\n \t\t\t   u->is_dwarf64, u->version, u->addrsize,\n-\t\t\t   ddata->dwarf_str, ddata->dwarf_str_size,\n+\t\t\t   ddata->dwarf_sections.data[DEBUG_STR],\n+\t\t\t   ddata->dwarf_sections.size[DEBUG_STR],\n \t\t\t   ddata->altlink, &val))\n \treturn NULL;\n \n@@ -2364,16 +2357,16 @@ add_function_ranges (struct backtrace_state *state, struct dwarf_data *ddata,\n {\n   struct dwarf_buf ranges_buf;\n \n-  if (ranges >= ddata->dwarf_ranges_size)\n+  if (ranges >= ddata->dwarf_sections.size[DEBUG_RANGES])\n     {\n       error_callback (data, \"function ranges offset out of range\", 0);\n       return 0;\n     }\n \n   ranges_buf.name = \".debug_ranges\";\n-  ranges_buf.start = ddata->dwarf_ranges;\n-  ranges_buf.buf = ddata->dwarf_ranges + ranges;\n-  ranges_buf.left = ddata->dwarf_ranges_size - ranges;\n+  ranges_buf.start = ddata->dwarf_sections.data[DEBUG_RANGES];\n+  ranges_buf.buf = ddata->dwarf_sections.data[DEBUG_RANGES] + ranges;\n+  ranges_buf.left = ddata->dwarf_sections.size[DEBUG_RANGES] - ranges;\n   ranges_buf.is_bigendian = ddata->is_bigendian;\n   ranges_buf.error_callback = error_callback;\n   ranges_buf.data = data;\n@@ -2479,7 +2472,8 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \n \t  if (!read_attribute (abbrev->attrs[i].form, unit_buf,\n \t\t\t       u->is_dwarf64, u->version, u->addrsize,\n-\t\t\t       ddata->dwarf_str, ddata->dwarf_str_size,\n+\t\t\t       ddata->dwarf_sections.data[DEBUG_STR],\n+\t\t\t       ddata->dwarf_sections.size[DEBUG_STR],\n \t\t\t       ddata->altlink, &val))\n \t    return 0;\n \n@@ -2698,7 +2692,7 @@ read_function_info (struct backtrace_state *state, struct dwarf_data *ddata,\n     }\n \n   unit_buf.name = \".debug_info\";\n-  unit_buf.start = ddata->dwarf_info;\n+  unit_buf.start = ddata->dwarf_sections.data[DEBUG_INFO];\n   unit_buf.buf = u->unit_data;\n   unit_buf.left = u->unit_data_len;\n   unit_buf.is_bigendian = ddata->is_bigendian;\n@@ -3077,16 +3071,7 @@ dwarf_fileline (struct backtrace_state *state, uintptr_t pc,\n static struct dwarf_data *\n build_dwarf_data (struct backtrace_state *state,\n \t\t  uintptr_t base_address,\n-\t\t  const unsigned char *dwarf_info,\n-\t\t  size_t dwarf_info_size,\n-\t\t  const unsigned char *dwarf_line,\n-\t\t  size_t dwarf_line_size,\n-\t\t  const unsigned char *dwarf_abbrev,\n-\t\t  size_t dwarf_abbrev_size,\n-\t\t  const unsigned char *dwarf_ranges,\n-\t\t  size_t dwarf_ranges_size,\n-\t\t  const unsigned char *dwarf_str,\n-\t\t  size_t dwarf_str_size,\n+\t\t  const struct dwarf_sections *dwarf_sections,\n \t\t  int is_bigendian,\n \t\t  struct dwarf_data *altlink,\n \t\t  backtrace_error_callback error_callback,\n@@ -3100,11 +3085,9 @@ build_dwarf_data (struct backtrace_state *state,\n   size_t units_count;\n   struct dwarf_data *fdata;\n \n-  if (!build_address_map (state, base_address, dwarf_info, dwarf_info_size,\n-\t\t\t  dwarf_abbrev, dwarf_abbrev_size, dwarf_ranges,\n-\t\t\t  dwarf_ranges_size, dwarf_str, dwarf_str_size,\n-\t\t\t  is_bigendian, altlink, error_callback, data,\n-\t\t\t  &addrs_vec, &units_vec))\n+  if (!build_address_map (state, base_address, dwarf_sections, is_bigendian,\n+\t\t\t  altlink, error_callback, data, &addrs_vec,\n+\t\t\t  &units_vec))\n     return NULL;\n \n   if (!backtrace_vector_release (state, &addrs_vec.vec, error_callback, data))\n@@ -3132,14 +3115,7 @@ build_dwarf_data (struct backtrace_state *state,\n   fdata->addrs_count = addrs_count;\n   fdata->units = units;\n   fdata->units_count = units_count;\n-  fdata->dwarf_info = dwarf_info;\n-  fdata->dwarf_info_size = dwarf_info_size;\n-  fdata->dwarf_line = dwarf_line;\n-  fdata->dwarf_line_size = dwarf_line_size;\n-  fdata->dwarf_ranges = dwarf_ranges;\n-  fdata->dwarf_ranges_size = dwarf_ranges_size;\n-  fdata->dwarf_str = dwarf_str;\n-  fdata->dwarf_str_size = dwarf_str_size;\n+  fdata->dwarf_sections = *dwarf_sections;\n   fdata->is_bigendian = is_bigendian;\n   memset (&fdata->fvec, 0, sizeof fdata->fvec);\n \n@@ -3153,16 +3129,7 @@ build_dwarf_data (struct backtrace_state *state,\n int\n backtrace_dwarf_add (struct backtrace_state *state,\n \t\t     uintptr_t base_address,\n-\t\t     const unsigned char *dwarf_info,\n-\t\t     size_t dwarf_info_size,\n-\t\t     const unsigned char *dwarf_line,\n-\t\t     size_t dwarf_line_size,\n-\t\t     const unsigned char *dwarf_abbrev,\n-\t\t     size_t dwarf_abbrev_size,\n-\t\t     const unsigned char *dwarf_ranges,\n-\t\t     size_t dwarf_ranges_size,\n-\t\t     const unsigned char *dwarf_str,\n-\t\t     size_t dwarf_str_size,\n+\t\t     const struct dwarf_sections *dwarf_sections,\n \t\t     int is_bigendian,\n \t\t     struct dwarf_data *fileline_altlink,\n \t\t     backtrace_error_callback error_callback,\n@@ -3171,10 +3138,7 @@ backtrace_dwarf_add (struct backtrace_state *state,\n {\n   struct dwarf_data *fdata;\n \n-  fdata = build_dwarf_data (state, base_address, dwarf_info, dwarf_info_size,\n-\t\t\t    dwarf_line, dwarf_line_size, dwarf_abbrev,\n-\t\t\t    dwarf_abbrev_size, dwarf_ranges, dwarf_ranges_size,\n-\t\t\t    dwarf_str, dwarf_str_size, is_bigendian,\n+  fdata = build_dwarf_data (state, base_address, dwarf_sections, is_bigendian,\n \t\t\t    fileline_altlink, error_callback, data);\n   if (fdata == NULL)\n     return 0;"}, {"sha": "89e0ab7169db0d5a185a054f7de7db223c6eed3e", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 56, "deletions": 57, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=66ab583969c8fe833723703870a061b362de77fa", "patch": "@@ -337,41 +337,15 @@ typedef struct\n \n #define ELFCOMPRESS_ZLIB 1\n \n-/* An index of ELF sections we care about.  */\n+/* Names of sections, indexed by enum dwarf_section in internal.h.  */\n \n-enum debug_section\n-{\n-  DEBUG_INFO,\n-  DEBUG_LINE,\n-  DEBUG_ABBREV,\n-  DEBUG_RANGES,\n-  DEBUG_STR,\n-\n-  /* The old style compressed sections.  This list must correspond to\n-     the list of normal debug sections.  */\n-  ZDEBUG_INFO,\n-  ZDEBUG_LINE,\n-  ZDEBUG_ABBREV,\n-  ZDEBUG_RANGES,\n-  ZDEBUG_STR,\n-\n-  DEBUG_MAX\n-};\n-\n-/* Names of sections, indexed by enum elf_section.  */\n-\n-static const char * const debug_section_names[DEBUG_MAX] =\n+static const char * const dwarf_section_names[DEBUG_MAX] =\n {\n   \".debug_info\",\n   \".debug_line\",\n   \".debug_abbrev\",\n   \".debug_ranges\",\n   \".debug_str\",\n-  \".zdebug_info\",\n-  \".zdebug_line\",\n-  \".zdebug_abbrev\",\n-  \".zdebug_ranges\",\n-  \".zdebug_str\"\n };\n \n /* Information we gather for the sections we care about.  */\n@@ -2661,6 +2635,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   unsigned int dynsym_shndx;\n   unsigned int i;\n   struct debug_section_info sections[DEBUG_MAX];\n+  struct debug_section_info zsections[DEBUG_MAX];\n   struct backtrace_view symtab_view;\n   int symtab_view_valid;\n   struct backtrace_view strtab_view;\n@@ -2685,6 +2660,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   unsigned int using_debug_view;\n   uint16_t *zdebug_table;\n   struct elf_ppc64_opd_data opd_data, *opd;\n+  struct dwarf_sections dwarf_sections;\n \n   if (!debuginfo)\n     {\n@@ -2825,6 +2801,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n   dynsym_shndx = 0;\n \n   memset (sections, 0, sizeof sections);\n+  memset (zsections, 0, sizeof zsections);\n \n   /* Look for the symbol table.  */\n   for (i = 1; i < shnum; ++i)\n@@ -2852,7 +2829,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \n       for (j = 0; j < (int) DEBUG_MAX; ++j)\n \t{\n-\t  if (strcmp (name, debug_section_names[j]) == 0)\n+\t  if (strcmp (name, dwarf_section_names[j]) == 0)\n \t    {\n \t      sections[j].offset = shdr->sh_offset;\n \t      sections[j].size = shdr->sh_size;\n@@ -2861,6 +2838,19 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t    }\n \t}\n \n+      if (name[0] == '.' && name[1] == 'z')\n+\t{\n+\t  for (j = 0; j < (int) DEBUG_MAX; ++j)\n+\t    {\n+\t      if (strcmp (name + 2, dwarf_section_names[j] + 1) == 0)\n+\t\t{\n+\t\t  zsections[j].offset = shdr->sh_offset;\n+\t\t  zsections[j].size = shdr->sh_size;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+\n       /* Read the build ID if present.  This could check for any\n \t SHT_NOTE section with the right note name and type, but gdb\n \t looks for a specific section name.  */\n@@ -3132,21 +3122,31 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n     }\n \n   /* Read all the debug sections in a single view, since they are\n-     probably adjacent in the file.  We never release this view.  */\n+     probably adjacent in the file.  If any of sections are\n+     uncompressed, we never release this view.  */\n \n   min_offset = 0;\n   max_offset = 0;\n   for (i = 0; i < (int) DEBUG_MAX; ++i)\n     {\n       off_t end;\n \n-      if (sections[i].size == 0)\n-\tcontinue;\n-      if (min_offset == 0 || sections[i].offset < min_offset)\n-\tmin_offset = sections[i].offset;\n-      end = sections[i].offset + sections[i].size;\n-      if (end > max_offset)\n-\tmax_offset = end;\n+      if (sections[i].size != 0)\n+\t{\n+\t  if (min_offset == 0 || sections[i].offset < min_offset)\n+\t    min_offset = sections[i].offset;\n+\t  end = sections[i].offset + sections[i].size;\n+\t  if (end > max_offset)\n+\t    max_offset = end;\n+\t}\n+      if (zsections[i].size != 0)\n+\t{\n+\t  if (min_offset == 0 || zsections[i].offset < min_offset)\n+\t    min_offset = zsections[i].offset;\n+\t  end = zsections[i].offset + zsections[i].size;\n+\t  if (end > max_offset)\n+\t    max_offset = end;\n+\t}\n     }\n   if (min_offset == 0 || max_offset == 0)\n     {\n@@ -3175,20 +3175,22 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t{\n \t  sections[i].data = ((const unsigned char *) debug_view.data\n \t\t\t      + (sections[i].offset - min_offset));\n-\t  if (i < ZDEBUG_INFO)\n-\t    ++using_debug_view;\n+\t  ++using_debug_view;\n \t}\n+\n+      if (zsections[i].size == 0)\n+\tzsections[i].data = NULL;\n+      else\n+\tzsections[i].data = ((const unsigned char *) debug_view.data\n+\t\t\t     + (zsections[i].offset - min_offset));\n     }\n \n   /* Uncompress the old format (--compress-debug-sections=zlib-gnu).  */\n \n   zdebug_table = NULL;\n-  for (i = 0; i < ZDEBUG_INFO; ++i)\n+  for (i = 0; i < (int) DEBUG_MAX; ++i)\n     {\n-      struct debug_section_info *pz;\n-\n-      pz = &sections[i + ZDEBUG_INFO - DEBUG_INFO];\n-      if (sections[i].size == 0 && pz->size > 0)\n+      if (sections[i].size == 0 && zsections[i].size > 0)\n \t{\n \t  unsigned char *uncompressed_data;\n \t  size_t uncompressed_size;\n@@ -3204,7 +3206,8 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \n \t  uncompressed_data = NULL;\n \t  uncompressed_size = 0;\n-\t  if (!elf_uncompress_zdebug (state, pz->data, pz->size, zdebug_table,\n+\t  if (!elf_uncompress_zdebug (state, zsections[i].data,\n+\t\t\t\t      zsections[i].size, zdebug_table,\n \t\t\t\t      error_callback, data,\n \t\t\t\t      &uncompressed_data, &uncompressed_size))\n \t    goto fail;\n@@ -3216,7 +3219,7 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \n   /* Uncompress the official ELF format\n      (--compress-debug-sections=zlib-gabi).  */\n-  for (i = 0; i < ZDEBUG_INFO; ++i)\n+  for (i = 0; i < (int) DEBUG_MAX; ++i)\n     {\n       unsigned char *uncompressed_data;\n       size_t uncompressed_size;\n@@ -3256,17 +3259,13 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n       debug_view_valid = 0;\n     }\n \n-  if (!backtrace_dwarf_add (state, base_address,\n-\t\t\t    sections[DEBUG_INFO].data,\n-\t\t\t    sections[DEBUG_INFO].size,\n-\t\t\t    sections[DEBUG_LINE].data,\n-\t\t\t    sections[DEBUG_LINE].size,\n-\t\t\t    sections[DEBUG_ABBREV].data,\n-\t\t\t    sections[DEBUG_ABBREV].size,\n-\t\t\t    sections[DEBUG_RANGES].data,\n-\t\t\t    sections[DEBUG_RANGES].size,\n-\t\t\t    sections[DEBUG_STR].data,\n-\t\t\t    sections[DEBUG_STR].size,\n+  for (i = 0; i < (int) DEBUG_MAX; ++i)\n+    {\n+      dwarf_sections.data[i] = sections[i].data;\n+      dwarf_sections.size[i] = sections[i].size;\n+    }\n+\n+  if (!backtrace_dwarf_add (state, base_address, &dwarf_sections,\n \t\t\t    ehdr.e_ident[EI_DATA] == ELFDATA2MSB,\n \t\t\t    fileline_altlink,\n \t\t\t    error_callback, data, fileline_fn,"}, {"sha": "31004bbd954a1df7b0b69ab018b109b8f2a44790", "filename": "libbacktrace/internal.h", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Finternal.h?ref=66ab583969c8fe833723703870a061b362de77fa", "patch": "@@ -286,22 +286,36 @@ extern int backtrace_initialize (struct backtrace_state *state,\n \t\t\t\t void *data,\n \t\t\t\t fileline *fileline_fn);\n \n+/* An enum for the DWARF sections we care about.  */\n+\n+enum dwarf_section\n+{\n+  DEBUG_INFO,\n+  DEBUG_LINE,\n+  DEBUG_ABBREV,\n+  DEBUG_RANGES,\n+  DEBUG_STR,\n+\n+  DEBUG_MAX\n+};\n+\n+/* Data for the DWARF sections we care about.  */\n+\n+struct dwarf_sections\n+{\n+  const unsigned char *data[DEBUG_MAX];\n+  size_t size[DEBUG_MAX];\n+};\n+\n+/* DWARF data read from a file, used for .gnu_debugaltlink.  */\n+\n struct dwarf_data;\n \n /* Add file/line information for a DWARF module.  */\n \n extern int backtrace_dwarf_add (struct backtrace_state *state,\n \t\t\t\tuintptr_t base_address,\n-\t\t\t\tconst unsigned char* dwarf_info,\n-\t\t\t\tsize_t dwarf_info_size,\n-\t\t\t\tconst unsigned char *dwarf_line,\n-\t\t\t\tsize_t dwarf_line_size,\n-\t\t\t\tconst unsigned char *dwarf_abbrev,\n-\t\t\t\tsize_t dwarf_abbrev_size,\n-\t\t\t\tconst unsigned char *dwarf_ranges,\n-\t\t\t\tsize_t dwarf_range_size,\n-\t\t\t\tconst unsigned char *dwarf_str,\n-\t\t\t\tsize_t dwarf_str_size,\n+\t\t\t\tconst struct dwarf_sections *dwarf_sections,\n \t\t\t\tint is_bigendian,\n \t\t\t\tstruct dwarf_data *fileline_altlink,\n \t\t\t\tbacktrace_error_callback error_callback,"}, {"sha": "fe64a7e695bcb4f524d9f2203dcdb588107c95f7", "filename": "libbacktrace/pecoff.c", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Fpecoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Fpecoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fpecoff.c?ref=66ab583969c8fe833723703870a061b362de77fa", "patch": "@@ -133,19 +133,7 @@ typedef struct {\n   uint16_t sc;\n } b_coff_internal_symbol;\n \n-/* An index of sections we care about.  */\n-\n-enum debug_section\n-{\n-  DEBUG_INFO,\n-  DEBUG_LINE,\n-  DEBUG_ABBREV,\n-  DEBUG_RANGES,\n-  DEBUG_STR,\n-  DEBUG_MAX\n-};\n-\n-/* Names of sections, indexed by enum debug_section.  */\n+/* Names of sections, indexed by enum dwarf_section in internal.h.  */\n \n static const char * const debug_section_names[DEBUG_MAX] =\n {\n@@ -164,8 +152,6 @@ struct debug_section_info\n   off_t offset;\n   /* Section size.  */\n   size_t size;\n-  /* Section contents, after read from file.  */\n-  const unsigned char *data;\n };\n \n /* Information we keep for an coff symbol.  */\n@@ -616,6 +602,7 @@ coff_add (struct backtrace_state *state, int descriptor,\n   struct backtrace_view debug_view;\n   int debug_view_valid;\n   uintptr_t image_base;\n+  struct dwarf_sections dwarf_sections;\n \n   *found_sym = 0;\n   *found_dwarf = 0;\n@@ -848,28 +835,20 @@ coff_add (struct backtrace_state *state, int descriptor,\n \n   for (i = 0; i < (int) DEBUG_MAX; ++i)\n     {\n-      if (sections[i].size == 0)\n-\tsections[i].data = NULL;\n+      size_t size = sections[i].size;\n+      dwarf_sections.size[i] = size;\n+      if (size == 0)\n+\tdwarf_sections.data[i] = NULL;\n       else\n-\tsections[i].data = ((const unsigned char *) debug_view.data\n-\t\t\t    + (sections[i].offset - min_offset));\n+\tdwarf_sections.data[i] = ((const unsigned char *) debug_view.data\n+\t\t\t\t  + (sections[i].offset - min_offset));\n     }\n \n-  if (!backtrace_dwarf_add (state, /* base_address */ 0,\n-\t\t\t    sections[DEBUG_INFO].data,\n-\t\t\t    sections[DEBUG_INFO].size,\n-\t\t\t    sections[DEBUG_LINE].data,\n-\t\t\t    sections[DEBUG_LINE].size,\n-\t\t\t    sections[DEBUG_ABBREV].data,\n-\t\t\t    sections[DEBUG_ABBREV].size,\n-\t\t\t    sections[DEBUG_RANGES].data,\n-\t\t\t    sections[DEBUG_RANGES].size,\n-\t\t\t    sections[DEBUG_STR].data,\n-\t\t\t    sections[DEBUG_STR].size,\n-\t\t\t    0, /* FIXME */\n-\t\t\t    NULL,\n+  if (!backtrace_dwarf_add (state, /* base_address */ 0, &dwarf_sections,\n+\t\t\t    0, /* FIXME: is_bigendian */\n+\t\t\t    NULL, /* altlink */\n \t\t\t    error_callback, data, fileline_fn,\n-\t\t\t    NULL))\n+\t\t\t    NULL /* returned fileline_entry */))\n     goto fail;\n \n   *found_dwarf = 1;"}, {"sha": "468b24c418d7cfd98ae37ba9b0dfd309e5ea7c05", "filename": "libbacktrace/xcoff.c", "status": "modified", "additions": 25, "deletions": 35, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Fxcoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ab583969c8fe833723703870a061b362de77fa/libbacktrace%2Fxcoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fxcoff.c?ref=66ab583969c8fe833723703870a061b362de77fa", "patch": "@@ -387,18 +387,6 @@ struct xcoff_fileline_data\n   uintptr_t base_address;\n };\n \n-/* An index of DWARF sections we care about.  */\n-\n-enum dwarf_section\n-{\n-  DWSECT_INFO,\n-  DWSECT_LINE,\n-  DWSECT_ABBREV,\n-  DWSECT_RANGES,\n-  DWSECT_STR,\n-  DWSECT_MAX\n-};\n-\n /* Information we gather for the DWARF sections we care about.  */\n \n struct dwsect_info\n@@ -1100,7 +1088,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n   off_t str_off;\n   off_t min_offset;\n   off_t max_offset;\n-  struct dwsect_info dwsect[DWSECT_MAX];\n+  struct dwsect_info dwsect[DEBUG_MAX];\n   size_t sects_size;\n   size_t syms_size;\n   int32_t str_size;\n@@ -1111,6 +1099,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n   int dwarf_view_valid;\n   int magic_ok;\n   int i;\n+  struct dwarf_sections dwarf_sections;\n \n   *found_sym = 0;\n \n@@ -1255,19 +1244,19 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n       switch (sects[i].s_flags & 0xffff0000)\n \t{\n \t  case SSUBTYP_DWINFO:\n-\t    idx = DWSECT_INFO;\n+\t    idx = DEBUG_INFO;\n \t    break;\n \t  case SSUBTYP_DWLINE:\n-\t    idx = DWSECT_LINE;\n+\t    idx = DEBUG_LINE;\n \t    break;\n \t  case SSUBTYP_DWABREV:\n-\t    idx = DWSECT_ABBREV;\n+\t    idx = DEBUG_ABBREV;\n \t    break;\n \t  case SSUBTYP_DWARNGE:\n-\t    idx = DWSECT_RANGES;\n+\t    idx = DEBUG_RANGES;\n \t    break;\n \t  case SSUBTYP_DWSTR:\n-\t    idx = DWSECT_STR;\n+\t    idx = DEBUG_STR;\n \t    break;\n \t  default:\n \t    continue;\n@@ -1288,7 +1277,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n \tgoto fail;\n       dwarf_view_valid = 1;\n \n-      for (i = 0; i < (int) DWSECT_MAX; ++i)\n+      for (i = 0; i < (int) DEBUG_MAX; ++i)\n \t{\n \t  if (dwsect[i].offset == 0)\n \t    dwsect[i].data = NULL;\n@@ -1297,27 +1286,28 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n \t\t\t      + (dwsect[i].offset - min_offset));\n \t}\n \n-      if (!backtrace_dwarf_add (state, 0,\n-\t\t\t\tdwsect[DWSECT_INFO].data,\n-\t\t\t\tdwsect[DWSECT_INFO].size,\n+      dwarf_sections.data[DEBUG_INFO] = dwsect[DEBUG_INFO].data;\n+      dwarf_sections.size[DEBUG_INFO] = dwsect[DEBUG_INFO].size;\n #if BACKTRACE_XCOFF_SIZE == 32\n-\t\t\t\t/* XXX workaround for broken lineoff */\n-\t\t\t\tdwsect[DWSECT_LINE].data - 4,\n+      /* XXX workaround for broken lineoff */\n+      dwarf_sections.data[DEBUG_LINE] = dwsect[DEBUG_LINE].data - 4;\n #else\n-\t\t\t\t/* XXX workaround for broken lineoff */\n-\t\t\t\tdwsect[DWSECT_LINE].data - 12,\n+      /* XXX workaround for broken lineoff */\n+      dwarf_sections.data[DEBUG_LINE] = dwsect[DEBUG_LINE].data - 12;\n #endif\n-\t\t\t\tdwsect[DWSECT_LINE].size,\n-\t\t\t\tdwsect[DWSECT_ABBREV].data,\n-\t\t\t\tdwsect[DWSECT_ABBREV].size,\n-\t\t\t\tdwsect[DWSECT_RANGES].data,\n-\t\t\t\tdwsect[DWSECT_RANGES].size,\n-\t\t\t\tdwsect[DWSECT_STR].data,\n-\t\t\t\tdwsect[DWSECT_STR].size,\n+      dwarf_sections.size[DEBUG_LINE] = dwsect[DEBUG_LINE].size;\n+      dwarf_sections.data[DEBUG_ABBREV] = dwsect[DEBUG_ABBREV].data;\n+      dwarf_sections.size[DEBUG_ABBREV] = dwsect[DEBUG_ABBREV].size;\n+      dwarf_sections.data[DEBUG_RANGES] = dwsect[DEBUG_RANGES].data;\n+      dwarf_sections.size[DEBUG_RANGES] = dwsect[DEBUG_RANGES].size;\n+      dwarf_sections.data[DEBUG_STR] = dwsect[DEBUG_STR].data;\n+      dwarf_sections.size[DEBUG_STR] = dwsect[DEBUG_STR].size;\n+\n+      if (!backtrace_dwarf_add (state, 0, &dwarf_sections,\n \t\t\t\t1, /* big endian */\n-\t\t\t\tNULL,\n+\t\t\t\tNULL, /* altlink */\n \t\t\t\terror_callback, data, fileline_fn,\n-\t\t\t\tNULL))\n+\t\t\t\tNULL /* returned fileline_entry */))\n \tgoto fail;\n     }\n "}]}