{"sha": "ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjNzVlOGJhZmMyNmVjZTJjNDc5MmYxM2ZiMzY2OTNhMWIyZjhjZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-05-22T20:17:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-05-22T20:17:09Z"}, "message": "pa.md (integer_indexed_store splitters): Use mem_shadd_operand.\n\n\t* config/pa/pa.md (integer_indexed_store splitters): Use\n\tmem_shadd_operand.  Use ASHIFT rather than MULT in the resulting\n\tinsns -- adjusting the constant 2nd operand accordingly.\n\nFrom-SVN: r223586", "tree": {"sha": "078339a798a9a370465bc3e4761e9fef11b8421b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078339a798a9a370465bc3e4761e9fef11b8421b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce/comments", "author": null, "committer": null, "parents": [{"sha": "cc55969de9b20786ade9537e6497532972e6f566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc55969de9b20786ade9537e6497532972e6f566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc55969de9b20786ade9537e6497532972e6f566"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "769c7b5e58f08157b0fbf1703b2d5971abe1b0ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce", "patch": "@@ -1,5 +1,9 @@\n 2015-05-22  Jeff Law  <law@redhat.com>\n \n+\t* config/pa/pa.md (integer_indexed_store splitters): Use\n+\tmem_shadd_operand.  Use ASHIFT rather than MULT in the resulting\n+\tinsns -- adjusting the constant 2nd operand accordingly.\n+\n \t* combine.c (try_combine): Canonicalize (plus (mult X pow2) Y) into\n \t(plus (ashift X log2) Y) if it is a split point.\n "}, {"sha": "6cc7a3cf054f4f1d618500939e38bf65757e0add", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=ddc75e8bafc26ece2c4792f13fb36693a1b2f8ce", "patch": "@@ -2819,42 +2819,54 @@\n ;; a 2 insn store with some creative RTL rewriting.\n (define_split\n   [(set (mem:SI (plus:SI (mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t       (match_operand:SI 1 \"shadd_operand\" \"\"))\n+\t\t\t       (match_operand:SI 1 \"mem_shadd_operand\" \"\"))\n \t\t   (plus:SI (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t    (match_operand:SI 3 \"const_int_operand\" \"\"))))\n \t(match_operand:SI 4 \"register_operand\" \"\"))\n    (clobber (match_operand:SI 5 \"register_operand\" \"\"))]\n   \"\"\n-  [(set (match_dup 5) (plus:SI (mult:SI (match_dup 0) (match_dup 1))\n+  [(set (match_dup 5) (plus:SI (ashift:SI (match_dup 0) (match_dup 1))\n \t\t\t       (match_dup 2)))\n    (set (mem:SI (plus:SI (match_dup 5) (match_dup 3))) (match_dup 4))]\n-  \"\")\n+  \"\n+{\n+  operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));\n+\n+}\")\n \n (define_split\n   [(set (mem:HI (plus:SI (mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t       (match_operand:SI 1 \"shadd_operand\" \"\"))\n+\t\t\t       (match_operand:SI 1 \"mem_shadd_operand\" \"\"))\n \t\t   (plus:SI (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t    (match_operand:SI 3 \"const_int_operand\" \"\"))))\n \t(match_operand:HI 4 \"register_operand\" \"\"))\n    (clobber (match_operand:SI 5 \"register_operand\" \"\"))]\n   \"\"\n-  [(set (match_dup 5) (plus:SI (mult:SI (match_dup 0) (match_dup 1))\n+  [(set (match_dup 5) (plus:SI (ashift:SI (match_dup 0) (match_dup 1))\n \t\t\t       (match_dup 2)))\n    (set (mem:HI (plus:SI (match_dup 5) (match_dup 3))) (match_dup 4))]\n-  \"\")\n+  \"\n+{\n+  operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));\n+\n+}\")\n \n (define_split\n   [(set (mem:QI (plus:SI (mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t       (match_operand:SI 1 \"shadd_operand\" \"\"))\n+\t\t\t       (match_operand:SI 1 \"mem_shadd_operand\" \"\"))\n \t\t   (plus:SI (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t    (match_operand:SI 3 \"const_int_operand\" \"\"))))\n \t(match_operand:QI 4 \"register_operand\" \"\"))\n    (clobber (match_operand:SI 5 \"register_operand\" \"\"))]\n   \"\"\n-  [(set (match_dup 5) (plus:SI (mult:SI (match_dup 0) (match_dup 1))\n+  [(set (match_dup 5) (plus:SI (ashift:SI (match_dup 0) (match_dup 1))\n \t\t\t       (match_dup 2)))\n    (set (mem:QI (plus:SI (match_dup 5) (match_dup 3))) (match_dup 4))]\n-  \"\")\n+  \"\n+{\n+  operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));\n+\n+}\")\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand\" \"\")"}]}