{"sha": "e24fa5340495964dc7abda7e3d0809dbb24e048b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0ZmE1MzQwNDk1OTY0ZGM3YWJkYTdlM2QwODA5ZGJiMjRlMDQ4Yg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-08-20T00:20:05Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-08-20T00:20:05Z"}, "message": "(build_type_variant): Only return existing type if it\nalso has the same TYPE_NAME.\n\nFrom-SVN: r7954", "tree": {"sha": "cff6b87cd32a17d2d4c54960b2087b9f13901596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff6b87cd32a17d2d4c54960b2087b9f13901596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24fa5340495964dc7abda7e3d0809dbb24e048b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24fa5340495964dc7abda7e3d0809dbb24e048b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24fa5340495964dc7abda7e3d0809dbb24e048b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24fa5340495964dc7abda7e3d0809dbb24e048b/comments", "author": null, "committer": null, "parents": [{"sha": "b6d5307feb2f1fd16042a7689f0b6ed7ec198c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d5307feb2f1fd16042a7689f0b6ed7ec198c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d5307feb2f1fd16042a7689f0b6ed7ec198c98"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "7b8fb5182c6d3b4c0e654a7b343a93a16437e148", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24fa5340495964dc7abda7e3d0809dbb24e048b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24fa5340495964dc7abda7e3d0809dbb24e048b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e24fa5340495964dc7abda7e3d0809dbb24e048b", "patch": "@@ -2802,19 +2802,14 @@ build_type_variant (type, constp, volatilep)\n   constp = !!constp;\n   volatilep = !!volatilep;\n \n-  /* If not generating auxiliary info, search the chain of variants to see\n-     if there is already one there just like the one we need to have.  If so,\n-     use that existing one.\n-\n-     We don't do this in the case where we are generating aux info because\n-     in that case we want each typedef names to get it's own distinct type\n-     node, even if the type of this new typedef is the same as some other\n-     (existing) type.  */\n-\n-  if (!flag_gen_aux_info)\n-    for (t = TYPE_MAIN_VARIANT(type); t; t = TYPE_NEXT_VARIANT (t))\n-      if (constp == TYPE_READONLY (t) && volatilep == TYPE_VOLATILE (t))\n-        return t;\n+  /* Search the chain of variants to see if there is already one there just\n+     like the one we need to have.  If so, use that existing one.  We must\n+     preserve the TYPE_NAME, since there is code that depends on this.  */\n+\n+  for (t = TYPE_MAIN_VARIANT(type); t; t = TYPE_NEXT_VARIANT (t))\n+    if (constp == TYPE_READONLY (t) && volatilep == TYPE_VOLATILE (t)\n+\t&& TYPE_NAME (t) == TYPE_NAME (type))\n+      return t;\n \n   /* We need a new one.  */\n "}]}