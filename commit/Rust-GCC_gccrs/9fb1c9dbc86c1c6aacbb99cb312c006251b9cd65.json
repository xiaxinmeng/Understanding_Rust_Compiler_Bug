{"sha": "9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZiMWM5ZGJjODZjMWM2YWFjYmI5OWNiMzEyYzAwNjI1MWI5Y2Q2NQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-11-18T03:22:18Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-11-18T03:22:18Z"}, "message": "re PR target/24348 (bootstrap failure building libgcc)\n\n\tPR target/24348\n\t* config.gcc (hppa*-*-hpux*): Add pa/t-slibgcc-elf-ver to tmake config\n\twhen not using sjlj exceptions.\n\t* config/pa/pa64-hpux.h (LIB_SPEC): Add -lpthread in static links.\n\t* config/pa/pa-hpux11.h (LIB_SPEC): Likewise.\n\t* config/pa/som.h (ASM_PREFERRED_EH_DATA_FORMAT): Delete define.\n\t* config/pa/linux-unwind.h (pa32_fallback_frame_state): Use\n\tDWARF_ALT_FRAME_RETURN_COLUMN instead of column 0 as return column.\n\t* config/pa/pa-hpux.h (MD_UNWIND_SUPPORT): New define.\n\t* config/pa/pa-linux.h (INCOMING_RETURN_ADDR_RTX,\n\tDWARF_FRAME_RETURN_COLUMN, ASM_PREFERRED_EH_DATA_FORMAT,\n\tASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): Delete defines.\n\t* config/pa/pa.h (ARG_POINTER_CFA_OFFSET): Delete.\n\t(FRAME_POINTER_CFA_OFFSET, INCOMING_RETURN_ADDR_RTX,\n\tDWARF_FRAME_RETURN_COLUMN, DWARF_ALT_FRAME_RETURN_COLUMN,\n\tASM_PREFERRED_EH_DATA_FORMAT, ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): New\n\tdefines.\n\t* config/pa/hpux-unwind.h: New file.\n\n\t* testsuite/gcc.dg/cleanup-8.c: Enable test on hppa*-*-hpux*.\n\t* testsuite/gcc.dg/cleanup-9.c: Likewise.\n\t* testsuite/gcc.dg/cleanup-10.c: Likewise.\n\t* testsuite/gcc.dg/cleanup-11.c: Likewise.\n\nFrom-SVN: r107157", "tree": {"sha": "f9fc68c5b5010a61963d607596bf9c5d5c165fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9fc68c5b5010a61963d607596bf9c5d5c165fe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/comments", "author": null, "committer": null, "parents": [{"sha": "ff2d10c1e49a8936763ea7bfa2ee335f4b797298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2d10c1e49a8936763ea7bfa2ee335f4b797298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2d10c1e49a8936763ea7bfa2ee335f4b797298"}], "stats": {"total": 498, "additions": 437, "deletions": 61}, "files": [{"sha": "bc474273bc165ca1e31992bccdf1040716545314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -1,3 +1,24 @@\n+2005-11-17  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/24348\n+\t* config.gcc (hppa*-*-hpux*): Add pa/t-slibgcc-elf-ver to tmake config\n+\twhen not using sjlj exceptions.\n+\t* config/pa/pa64-hpux.h (LIB_SPEC): Add -lpthread in static links.\n+\t* config/pa/pa-hpux11.h (LIB_SPEC): Likewise.\n+\t* config/pa/som.h (ASM_PREFERRED_EH_DATA_FORMAT): Delete define.\n+\t* config/pa/linux-unwind.h (pa32_fallback_frame_state): Use\n+\tDWARF_ALT_FRAME_RETURN_COLUMN instead of column 0 as return column.\n+\t* config/pa/pa-hpux.h (MD_UNWIND_SUPPORT): New define.\n+\t* config/pa/pa-linux.h (INCOMING_RETURN_ADDR_RTX,\n+\tDWARF_FRAME_RETURN_COLUMN, ASM_PREFERRED_EH_DATA_FORMAT,\n+\tASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): Delete defines.\n+\t* config/pa/pa.h (ARG_POINTER_CFA_OFFSET): Delete.\n+\t(FRAME_POINTER_CFA_OFFSET, INCOMING_RETURN_ADDR_RTX,\n+\tDWARF_FRAME_RETURN_COLUMN, DWARF_ALT_FRAME_RETURN_COLUMN,\n+\tASM_PREFERRED_EH_DATA_FORMAT, ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): New\n+\tdefines.\n+\t* config/pa/hpux-unwind.h: New file.\n+\n 2005-11-17  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/rs6000/rs6000.h (ASM_OUTPUT_WEAKREF): Define."}, {"sha": "c0867e1e91c469699e0efa713a7919e4b530b949", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -900,6 +900,9 @@ hppa[12]*-*-hpux10*)\n \t    tmake_file=\"${tmake_file} pa/t-dce-thr\"\n \t    ;;\n \tesac\n+\tif test x$sjlj != x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\tfi\n \tuse_collect2=yes\n \tuse_fixproto=yes\n \t;;\n@@ -932,6 +935,9 @@ hppa*64*-*-hpux11*)\n \t\t       pa/pa-hpux1010.opt pa/pa64-hpux.opt\"\n \tneed_64bit_hwint=yes\n \ttmake_file=\"pa/t-pa64 pa/t-pa-hpux pa/t-hpux-shlib\"\n+\tif test x$sjlj != x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\tfi\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tcase x${enable_threads} in\n \txyes | xposix )\n@@ -955,6 +961,9 @@ hppa[12]*-*-hpux11*)\n \t\t;;\n \tesac\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n+\tif test x$sjlj != x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\tfi\n \tcase x${enable_threads} in\n \txyes | xposix )\n \t\tthread_file=posix "}, {"sha": "aa443bfba0b0652afd55fe255b3957371473bea9", "filename": "gcc/config/pa/hpux-unwind.h", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fhpux-unwind.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -0,0 +1,316 @@\n+/* DWARF2 EH unwinding support for PA HP-UX.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+#include <unistd.h>\n+\n+/* FIXME: We currently ignore the high halves of general, space and\n+   control registers on PA 2.0 machines for applications using the\n+   32-bit runtime.  We don't restore space registers or the floating\n+   point status registers.  */\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR pa_fallback_frame_state\n+\n+/* HP-UX 10.X doesn't define GetSSReg.  */\n+#ifndef GetSSReg\n+#define GetSSReg(ssp, ss_reg) \\\n+  ((UseWideRegs (ssp))\t\t\t\t\t\t\t\\\n+   ? (ssp)->ss_wide.ss_32.ss_reg ## _lo\t\t\t\t\t\\\n+   : (ssp)->ss_narrow.ss_reg)\n+#endif\n+\n+#if TARGET_64BIT\n+#define GetSSRegAddr(ssp, ss_reg) ((long) &((ssp)->ss_wide.ss_64.ss_reg))\n+#else\n+#define GetSSRegAddr(ssp, ss_reg) \\\n+  ((UseWideRegs (ssp))\t\t\t\t\t\t\t\\\n+   ? (long) &((ssp)->ss_wide.ss_32.ss_reg ## _lo)\t\t\t\\\n+   : (long) &((ssp)->ss_narrow.ss_reg))\n+#endif\n+\n+#define UPDATE_FS_FOR_SAR(FS, N) \\\n+  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.reg[N].loc.offset = GetSSRegAddr (mc, ss_cr11) - new_cfa\n+\n+#define UPDATE_FS_FOR_GR(FS, GRN, N) \\\n+  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.reg[N].loc.offset = GetSSRegAddr (mc, ss_gr##GRN) - new_cfa\n+\n+#define UPDATE_FS_FOR_FR(FS, FRN, N) \\\n+  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.reg[N].loc.offset = (long) &(mc->ss_fr##FRN) - new_cfa;\n+\n+#define UPDATE_FS_FOR_PC(FS, N) \\\n+  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.reg[N].loc.offset = GetSSRegAddr (mc, ss_pcoq_head) - new_cfa\n+\n+/* Extract bit field from word using HP's numbering (MSB = 0).  */\n+#define GET_FIELD(X, FROM, TO) \\\n+  ((X) >> (31 - (TO)) & ((1 << ((TO) - (FROM) + 1)) - 1))\n+\n+static inline int\n+sign_extend (int x, int len)\n+{\n+  int signbit = (1 << (len - 1));\n+  int mask = (signbit << 1) - 1;\n+  return ((x & mask) ^ signbit) - signbit;\n+}\n+\n+/* Extract a 17-bit signed constant from branch instructions.  */\n+static inline int\n+extract_17 (unsigned word)\n+{\n+  return sign_extend (GET_FIELD (word, 19, 28)\n+\t\t      | GET_FIELD (word, 29, 29) << 10\n+\t\t      | GET_FIELD (word, 11, 15) << 11\n+\t\t      | (word & 0x1) << 16, 17);\n+}\n+\n+/* Extract a 22-bit signed constant from branch instructions.  */\n+static inline int\n+extract_22 (unsigned word)\n+{\n+  return sign_extend (GET_FIELD (word, 19, 28)\n+\t\t      | GET_FIELD (word, 29, 29) << 10\n+\t\t      | GET_FIELD (word, 11, 15) << 11\n+\t\t      | GET_FIELD (word, 6, 10) << 16\n+\t\t      | (word & 0x1) << 21, 22);\n+}\n+\n+static _Unwind_Reason_Code\n+pa_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t _Unwind_FrameState *fs)\n+{\n+  static long cpu;\n+  unsigned int *pc = (unsigned int *) context->ra;\n+\n+  if (pc == 0)\n+    return _URC_END_OF_STACK;\n+\n+  /* Check if the return address points to an export stub (PA 1.1 or 2.0).  */\n+  if ((!TARGET_64BIT\n+       && *(pc + 0) == 0x4bc23fd1\t\t/* ldw -18(sp),rp */\n+       && *(pc + 1) == 0x004010a1\t\t/* ldsid (rp),r1 */\n+       && *(pc + 2) == 0x00011820\t\t/* mtsp r1,sr0 */\n+       && *(pc + 3) == 0xe0400002)\t\t/* be,n 0(sr0,rp) */\n+      ||\n+      (!TARGET_64BIT\n+       && *(pc + 0) == 0x4bc23fd1\t\t/* ldw -18(sp),rp */\n+       && *(pc + 1) == 0xe840d002))\t\t/* bve,n (rp) */\n+    {\n+      fs->cfa_how    = CFA_REG_OFFSET;\n+      fs->cfa_reg    = 30;\n+      fs->cfa_offset = 0;\n+\n+      fs->retaddr_column = 0;\n+      fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[0].loc.offset = -24;\n+\n+      return _URC_NO_REASON;\n+    }\n+\n+  /* Check if the return address is an export stub as signal handlers\n+     may return via an export stub.  */\n+  if (!TARGET_64BIT\n+      && (*pc & 0xffe0e002) == 0xe8400000\t/* bl x,r2 */\n+      && *(pc + 1) == 0x08000240\t\t/* nop */\n+      && *(pc + 2) == 0x4bc23fd1\t\t/* ldw -18(sp),rp */\n+      && *(pc + 3) == 0x004010a1\t\t/* ldsid (rp),r1 */\n+      && *(pc + 4) == 0x00011820\t\t/* mtsp r1,sr0 */\n+      && *(pc + 5) == 0xe0400002)\t\t/* be,n 0(sr0,rp) */\n+    /* Extract target address from PA 1.x 17-bit branch.  */\n+    pc += extract_17 (*pc) + 2;\n+  else if (!TARGET_64BIT\n+\t   && (*pc & 0xfc00e002) == 0xe800a000\t/* b,l x,r2 */\n+\t   && *(pc + 1) == 0x08000240\t\t/* nop */\n+\t   && *(pc + 2) == 0x4bc23fd1\t\t/* ldw -18(sp),rp */\n+\t   && *(pc + 3) == 0xe840d002)\t\t/* bve,n (rp) */\n+    /* Extract target address from PA 2.0 22-bit branch.  */\n+    pc += extract_22 (*pc) + 2;\n+\n+  /* Now check if the return address is one of the signal handler\n+     returns, _sigreturn or _sigsetreturn.  */\n+  if ((TARGET_64BIT\n+       && *(pc + 0)  == 0x53db3f51\t\t/* ldd -58(sp),dp */\n+       && *(pc + 8)  == 0x34160116\t\t/* ldi 8b,r22 */\n+       && *(pc + 9)  == 0x08360ac1\t\t/* shladd,l r22,3,r1,r1 */\n+       && *(pc + 10) == 0x0c2010c1\t\t/* ldd 0(r1),r1 */\n+       && *(pc + 11) == 0xe4202000)\t\t/* be,l 0(sr4,r1) */\n+      ||\n+      (TARGET_64BIT\n+       && *(pc + 0)  == 0x36dc0000\t\t/* ldo 0(r22),ret0 */\n+       && *(pc + 6)  == 0x341601c0\t\t/* ldi e0,r22 */\n+       && *(pc + 7)  == 0x08360ac1\t\t/* shladd,l r22,3,r1,r1 */\n+       && *(pc + 8)  == 0x0c2010c1\t\t/* ldd 0(r1),r1 */\n+       && *(pc + 9)  == 0xe4202000)\t\t/* be,l 0(sr4,r1) */\n+      ||\n+      (!TARGET_64BIT\n+       && *(pc + 0)  == 0x379a0000\t\t/* ldo 0(ret0),r26 */\n+       && *(pc + 1)  == 0x6bd33fc9\t\t/* stw r19,-1c(sp) */\n+       && *(pc + 2)  == 0x20200801\t\t/* ldil L%-40000000,r1 */\n+       && *(pc + 3)  == 0xe420e008\t\t/* be,l 4(sr7,r1) */\n+       && *(pc + 4)  == 0x34160116)\t\t/* ldi 8b,r22 */\n+      ||\n+      (!TARGET_64BIT\n+       && *(pc + 0)  == 0x6bd33fc9\t\t/* stw r19,-1c(sp) */\n+       && *(pc + 1)  == 0x20200801\t\t/* ldil L%-40000000,r1 */\n+       && *(pc + 2)  == 0xe420e008\t\t/* be,l 4(sr7,r1) */\n+       && *(pc + 3)  == 0x341601c0))\t\t/* ldi e0,r22 */\n+    {\n+      /* The previous stack pointer is saved at (long *)SP - 1.  The\n+\t ucontext structure is offset from the start of the previous\n+\t frame by the siglocal_misc structure.  */\n+      struct siglocalx *sl = (struct siglocalx *)\n+\t(*((long *) context->cfa - 1));\n+      mcontext_t *mc = &(sl->sl_uc.uc_mcontext);\n+\n+      long new_cfa = GetSSReg (mc, ss_sp);\n+\n+      fs->cfa_how = CFA_REG_OFFSET;\n+      fs->cfa_reg = 30;\n+      fs->cfa_offset = new_cfa - (long) context->cfa;\n+\n+      UPDATE_FS_FOR_GR (fs, 1, 1);\n+      UPDATE_FS_FOR_GR (fs, 2, 2);\n+      UPDATE_FS_FOR_GR (fs, 3, 3);\n+      UPDATE_FS_FOR_GR (fs, 4, 4);\n+      UPDATE_FS_FOR_GR (fs, 5, 5);\n+      UPDATE_FS_FOR_GR (fs, 6, 6);\n+      UPDATE_FS_FOR_GR (fs, 7, 7);\n+      UPDATE_FS_FOR_GR (fs, 8, 8);\n+      UPDATE_FS_FOR_GR (fs, 9, 9);\n+      UPDATE_FS_FOR_GR (fs, 10, 10);\n+      UPDATE_FS_FOR_GR (fs, 11, 11);\n+      UPDATE_FS_FOR_GR (fs, 12, 12);\n+      UPDATE_FS_FOR_GR (fs, 13, 13);\n+      UPDATE_FS_FOR_GR (fs, 14, 14);\n+      UPDATE_FS_FOR_GR (fs, 15, 15);\n+      UPDATE_FS_FOR_GR (fs, 16, 16);\n+      UPDATE_FS_FOR_GR (fs, 17, 17);\n+      UPDATE_FS_FOR_GR (fs, 18, 18);\n+      UPDATE_FS_FOR_GR (fs, 19, 19);\n+      UPDATE_FS_FOR_GR (fs, 20, 20);\n+      UPDATE_FS_FOR_GR (fs, 21, 21);\n+      UPDATE_FS_FOR_GR (fs, 22, 22);\n+      UPDATE_FS_FOR_GR (fs, 23, 23);\n+      UPDATE_FS_FOR_GR (fs, 24, 24);\n+      UPDATE_FS_FOR_GR (fs, 25, 25);\n+      UPDATE_FS_FOR_GR (fs, 26, 26);\n+      UPDATE_FS_FOR_GR (fs, 27, 27);\n+      UPDATE_FS_FOR_GR (fs, 28, 28);\n+      UPDATE_FS_FOR_GR (fs, 29, 29);\n+      UPDATE_FS_FOR_GR (fs, 30, 30);\n+      UPDATE_FS_FOR_GR (fs, 31, 31);\n+\n+      if (TARGET_64BIT)\n+\t{\n+\t  UPDATE_FS_FOR_FR (fs, 4, 32);\n+\t  UPDATE_FS_FOR_FR (fs, 5, 33);\n+\t  UPDATE_FS_FOR_FR (fs, 6, 34);\n+\t  UPDATE_FS_FOR_FR (fs, 7, 35);\n+\t  UPDATE_FS_FOR_FR (fs, 8, 36);\n+\t  UPDATE_FS_FOR_FR (fs, 9, 37);\n+\t  UPDATE_FS_FOR_FR (fs, 10, 38);\n+\t  UPDATE_FS_FOR_FR (fs, 11, 39);\n+\t  UPDATE_FS_FOR_FR (fs, 12, 40);\n+\t  UPDATE_FS_FOR_FR (fs, 13, 41);\n+\t  UPDATE_FS_FOR_FR (fs, 14, 42);\n+\t  UPDATE_FS_FOR_FR (fs, 15, 43);\n+\t  UPDATE_FS_FOR_FR (fs, 16, 44);\n+\t  UPDATE_FS_FOR_FR (fs, 17, 45);\n+\t  UPDATE_FS_FOR_FR (fs, 18, 46);\n+\t  UPDATE_FS_FOR_FR (fs, 19, 47);\n+\t  UPDATE_FS_FOR_FR (fs, 20, 48);\n+\t  UPDATE_FS_FOR_FR (fs, 21, 49);\n+\t  UPDATE_FS_FOR_FR (fs, 22, 50);\n+\t  UPDATE_FS_FOR_FR (fs, 23, 51);\n+\t  UPDATE_FS_FOR_FR (fs, 24, 52);\n+\t  UPDATE_FS_FOR_FR (fs, 25, 53);\n+\t  UPDATE_FS_FOR_FR (fs, 26, 54);\n+\t  UPDATE_FS_FOR_FR (fs, 27, 55);\n+\t  UPDATE_FS_FOR_FR (fs, 28, 56);\n+\t  UPDATE_FS_FOR_FR (fs, 29, 57);\n+\t  UPDATE_FS_FOR_FR (fs, 30, 58);\n+\t  UPDATE_FS_FOR_FR (fs, 31, 59);\n+\n+\t  UPDATE_FS_FOR_SAR (fs, 60);\n+\t}\n+      else\n+\t{\n+\t  UPDATE_FS_FOR_FR (fs, 4, 32);\n+\t  UPDATE_FS_FOR_FR (fs, 5, 34);\n+\t  UPDATE_FS_FOR_FR (fs, 6, 36);\n+\t  UPDATE_FS_FOR_FR (fs, 7, 38);\n+\t  UPDATE_FS_FOR_FR (fs, 8, 40);\n+\t  UPDATE_FS_FOR_FR (fs, 9, 44);\n+\t  UPDATE_FS_FOR_FR (fs, 10, 44);\n+\t  UPDATE_FS_FOR_FR (fs, 11, 46);\n+\t  UPDATE_FS_FOR_FR (fs, 12, 48);\n+\t  UPDATE_FS_FOR_FR (fs, 13, 50);\n+\t  UPDATE_FS_FOR_FR (fs, 14, 52);\n+\t  UPDATE_FS_FOR_FR (fs, 15, 54);\n+\n+\t  if (!cpu)\n+\t    cpu = sysconf (_SC_CPU_VERSION);\n+\n+\t  /* PA-RISC 1.0 only has 16 floating point registers.  */\n+\t  if (cpu != CPU_PA_RISC1_0)\n+\t    {\n+\t      UPDATE_FS_FOR_FR (fs, 16, 56);\n+\t      UPDATE_FS_FOR_FR (fs, 17, 58);\n+\t      UPDATE_FS_FOR_FR (fs, 18, 60);\n+\t      UPDATE_FS_FOR_FR (fs, 19, 62);\n+\t      UPDATE_FS_FOR_FR (fs, 20, 64);\n+\t      UPDATE_FS_FOR_FR (fs, 21, 66);\n+\t      UPDATE_FS_FOR_FR (fs, 22, 68);\n+\t      UPDATE_FS_FOR_FR (fs, 23, 70);\n+\t      UPDATE_FS_FOR_FR (fs, 24, 72);\n+\t      UPDATE_FS_FOR_FR (fs, 25, 74);\n+\t      UPDATE_FS_FOR_FR (fs, 26, 76);\n+\t      UPDATE_FS_FOR_FR (fs, 27, 78);\n+\t      UPDATE_FS_FOR_FR (fs, 28, 80);\n+\t      UPDATE_FS_FOR_FR (fs, 29, 82);\n+\t      UPDATE_FS_FOR_FR (fs, 30, 84);\n+\t      UPDATE_FS_FOR_FR (fs, 31, 86);\n+\t    }\n+\n+\t  UPDATE_FS_FOR_SAR (fs, 88);\n+\t}\n+\n+      fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n+      UPDATE_FS_FOR_PC (fs, DWARF_ALT_FRAME_RETURN_COLUMN);\n+\n+      return _URC_NO_REASON;\n+    }\n+\n+  return _URC_END_OF_STACK;\n+}"}, {"sha": "36b9b382708ba1419ee44c8349f9499619b7061c", "filename": "gcc/config/pa/linux-unwind.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flinux-unwind.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -131,8 +131,9 @@ pa32_fallback_frame_state (struct _Unwind_Context *context,\n     }\n   fs->regs.reg[88].how = REG_SAVED_OFFSET;\n   fs->regs.reg[88].loc.offset = (long) &sc->sc_sar - new_cfa;\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[0].loc.offset = (long) &sc->sc_iaoq[0] - new_cfa;\n-  fs->retaddr_column = 0;\n+  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].loc.offset\n+    = (long) &sc->sc_iaoq[0] - new_cfa;\n+  fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n   return _URC_NO_REASON;\n }"}, {"sha": "4b6c91092f3ed1449d6286641355234ae9df6a13", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -124,3 +124,5 @@ Boston, MA 02110-1301, USA.  */\n /* Define this so we can compile MS code for use with WINE.  */\n #undef HANDLE_PRAGMA_PACK_PUSH_POP\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n+\n+#define MD_UNWIND_SUPPORT \"config/pa/hpux-unwind.h\""}, {"sha": "ad16bb41e3f2cd3ff99cc19785a206cdce3daf45", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -134,7 +134,7 @@ Boston, MA 02110-1301, USA.  */\n #define LIB_SPEC \\\n   \"%{!shared:\\\n      %{mt|pthread:-lpthread} -lc \\\n-     %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}\"\n+     %{static:%{!nolibdld:-a shared -ldld -a archive -lpthread -lc}}}\"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\"}, {"sha": "fcbcebdb949f5aad461fcce0052a9b5e75a26bba", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -19,39 +19,6 @@ the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n \n-/* A C expression whose value is RTL representing the location of the\n-   incoming return address at the beginning of any function, before the\n-   prologue.  You only need to define this macro if you want to support\n-   call frame debugging information like that provided by DWARF 2.  */\n-#define INCOMING_RETURN_ADDR_RTX (gen_rtx_REG (word_mode, 2))\n-#define DWARF_FRAME_RETURN_COLUMN (DWARF_FRAME_REGNUM (2))\n-\n-/* This macro chooses the encoding of pointers embedded in the exception\n-   handling sections.  If at all possible, this should be defined such\n-   that the exception handling section will not require dynamic relocations,\n-   and so may be read-only.\n-\n-   FIXME: We use DW_EH_PE_aligned to output a PLABEL constructor for\n-   global function pointers.  */\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t\\\n-  (CODE == 2 && GLOBAL ? DW_EH_PE_aligned : DW_EH_PE_absptr)\n-\n-/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n-   indirect are handled automatically.  Since pc-relative encoding is\n-   not possible on the PA and we don't have the infrastructure for\n-   data relative encoding, we use aligned plabels for global function\n-   pointers.  */\n-#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (((ENCODING) & 0x0F) == DW_EH_PE_aligned)\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfputs (integer_asm_op (SIZE, FALSE), FILE);\t\t\t\\\n-\tfputs (\"P%\", FILE);\t\t\t\t\t\t\\\n-\tassemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n-\tgoto DONE;\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-\n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\"}, {"sha": "b83630fba32a8b01c488e238b049c5b22184d216", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -404,12 +404,72 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n   gen_rtx_MEM (word_mode,\t\t\t\t\t\t\\\n \t       gen_rtx_PLUS (word_mode, frame_pointer_rtx,\t\t\\\n \t\t\t     TARGET_64BIT ? GEN_INT (-16) : GEN_INT (-20)))\n-\t\t\t  \t\n \n-/* Offset from the argument pointer register value to the top of\n-   stack.  This is different from FIRST_PARM_OFFSET because of the\n-   frame marker.  */\n-#define ARG_POINTER_CFA_OFFSET(FNDECL) 0\n+/* Offset from the frame pointer register value to the top of stack.  */\n+#define FRAME_POINTER_CFA_OFFSET(FNDECL) 0\n+\n+/* A C expression whose value is RTL representing the location of the\n+   incoming return address at the beginning of any function, before the\n+   prologue.  You only need to define this macro if you want to support\n+   call frame debugging information like that provided by DWARF 2.  */\n+#define INCOMING_RETURN_ADDR_RTX (gen_rtx_REG (word_mode, 2))\n+#define DWARF_FRAME_RETURN_COLUMN (DWARF_FRAME_REGNUM (2))\n+\n+/* A C expression whose value is an integer giving a DWARF 2 column\n+   number that may be used as an alternate return column.  This should\n+   be defined only if DWARF_FRAME_RETURN_COLUMN is set to a general\n+   register, but an alternate column needs to be used for signal frames.\n+\n+   Column 0 is not used but unfortunately its register size is set to\n+   4 bytes (sizeof CCmode) so it can't be used on 64-bit targets.  */\n+#define DWARF_ALT_FRAME_RETURN_COLUMN FIRST_PSEUDO_REGISTER\n+\n+/* This macro chooses the encoding of pointers embedded in the exception\n+   handling sections.  If at all possible, this should be defined such\n+   that the exception handling section will not require dynamic relocations,\n+   and so may be read-only.\n+\n+   Because the HP assembler auto aligns, it is necessary to use\n+   DW_EH_PE_aligned.  It's not possible to make the data read-only\n+   on the HP-UX SOM port since the linker requires fixups for label\n+   differences in different sections to be word aligned.  However,\n+   the SOM linker can do unaligned fixups for absolute pointers.\n+   We also need aligned pointers for global and function pointers.\n+\n+   Although the HP-UX 64-bit ELF linker can handle unaligned pc-relative\n+   fixups, the runtime doesn't have a consistent relationship between\n+   text and data for dynamically loaded objects.  Thus, it's not possible\n+   to use pc-relative encoding for pointers on this target.  It may be\n+   possible to use segment relative encodings but GAS doesn't currently\n+   have a mechanism to generate these encodings.  For other targets, we\n+   use pc-relative encoding for pointers.  If the pointer might require\n+   dynamic relocation, we make it indirect.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t\\\n+  (TARGET_GAS && !TARGET_HPUX\t\t\t\t\t\t\\\n+   ? (DW_EH_PE_pcrel\t\t\t\t\t\t\t\\\n+      | ((GLOBAL) || (CODE) == 2 ? DW_EH_PE_indirect : 0)\t\t\\\n+      | (TARGET_64BIT ? DW_EH_PE_sdata8 : DW_EH_PE_sdata4))\t\t\\\n+   : (!TARGET_GAS || (GLOBAL) || (CODE) == 2\t\t\t\t\\\n+      ? DW_EH_PE_aligned : DW_EH_PE_absptr))\n+\n+/* Handle special EH pointer encodings.  Absolute, pc-relative, and\n+   indirect are handled automatically.  We output pc-relative, and\n+   indirect pc-relative ourself since we need some special magic to\n+   generate pc-relative relocations, and to handle indirect function\n+   pointers.  */\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (((ENCODING) & 0x70) == DW_EH_PE_pcrel)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfputs (integer_asm_op (SIZE, FALSE), FILE);\t\t\t\\\n+\tif ((ENCODING) & DW_EH_PE_indirect)\t\t\t\t\\\n+\t  output_addr_const (FILE, get_deferred_plabel (ADDR));\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  assemble_name (FILE, XSTR ((ADDR), 0));\t\t\t\\\n+\tfputs (\"+8-$PIC_pcrel$0\", FILE);\t\t\t\t\\\n+\tgoto DONE;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    } while (0)\n \f\n /* The letters I, J, K, L and M in a register constraint string\n    can be used to stand for particular ranges of immediate operands."}, {"sha": "9f51f66ae311b8cff1d5b2f76b80ac65a562354f", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -56,23 +56,25 @@ Boston, MA 02110-1301, USA.  */\n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GNU_LD)\n #define LIB_SPEC \\\n   \"%{!shared:\\\n-     %{!p:%{!pg: -lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n+     %{!p:%{!pg: %{static:-lpthread} -lc\\\n+\t    %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{p:%{!pg:%{static:%{!mhp-ld:-a shared}%{mhp-ld:-a archive_shared}}\\\n-\t   -lprof %{static:-a archive} -lc\\\n+\t   -lprof %{static:-a archive -lpthread} -lc\\\n \t   %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{pg:%{static:%{!mhp-ld:-a shared}%{mhp-ld:-a archive_shared}}\\\n-       -lgprof %{static:-a archive} -lc\\\n+       -lgprof %{static:-a archive -lpthread} -lc\\\n        %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n    /usr/lib/pa20_64/milli.a\"\n #else\n #define LIB_SPEC \\\n   \"%{!shared:\\\n-     %{!p:%{!pg: -lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n+     %{!p:%{!pg: %{static:-lpthread} -lc\\\n+\t    %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{p:%{!pg:%{static:%{mgnu-ld:-a shared}%{!mgnu-ld:-a archive_shared}}\\\n-\t   -lprof %{static:-a archive} -lc\\\n+\t   -lprof %{static:-a archive -lpthread} -lc\\\n \t   %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{pg:%{static:%{mgnu-ld:-a shared}%{!mgnu-ld:-a archive_shared}}\\\n-       -lgprof %{static:-a archive} -lc\\\n+       -lgprof %{static:-a archive -lpthread} -lc\\\n        %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n    /usr/lib/pa20_64/milli.a\"\n #endif"}, {"sha": "e397b9dfd8ef3d6267803f376f7a935e53847723", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -34,15 +34,6 @@ Boston, MA 02110-1301, USA.  */\n \n #define DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END\n \n-/* Select a format to encode pointers in exception handling data.  CODE\n-   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n-   true if the symbol may be affected by dynamic relocations.  Because\n-   the HP assembler does auto alignment, it is necessary to use\n-   DW_EH_PE_aligned instead of the default DW_EH_PE_absptr.  */\n-\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n-  (TARGET_GAS ? DW_EH_PE_absptr : DW_EH_PE_aligned)\n-\n /* HPUX has a program 'chatr' to list the dependencies of dynamically\n    linked executables and shared libraries.  */\n #define LDD_SUFFIX \"chatr\""}, {"sha": "50ada5db973dd88ae70b2aaad09ebd7cbf1565eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -1,3 +1,10 @@\n+2005-11-17  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* gcc.dg/cleanup-8.c: Enable test on hppa*-*-hpux*.\n+\t* gcc.dg/cleanup-9.c: Likewise.\n+\t* gcc.dg/cleanup-10.c: Likewise.\n+\t* gcc.dg/cleanup-11.c: Likewise.\n+\n 2005-11-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/24892"}, {"sha": "beac2ecd56fa68de45b8e503cd792d438a8ec61c", "filename": "gcc/testsuite/gcc.dg/cleanup-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-10.c?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target *-*-linux* powerpc*-*-darwin* } } */\n+/* { dg-do run { target hppa*-*-hpux* *-*-linux* powerpc*-*-darwin* } } */\n /* { dg-options \"-fexceptions -fnon-call-exceptions -O2\" } */\n /* Verify that cleanups work with exception handling through signal frames\n    on alternate stack.  */"}, {"sha": "8330c2b4bbe1c8b74c2051c2ecd397e65e35125c", "filename": "gcc/testsuite/gcc.dg/cleanup-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-11.c?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target *-*-linux* powerpc*-*-darwin* } } */\n+/* { dg-do run { target hppa*-*-hpux* *-*-linux* powerpc*-*-darwin* } } */\n /* { dg-options \"-fexceptions -fnon-call-exceptions -O2\" } */\n /* Verify that cleanups work with exception handling through realtime signal\n    frames on alternate stack.  */"}, {"sha": "3aca7223bd7e03372e71939ef9aef899050836f4", "filename": "gcc/testsuite/gcc.dg/cleanup-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-8.c?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target *-*-linux* powerpc*-*-darwin* } } */\n+/* { dg-do run { target hppa*-*-hpux* *-*-linux* powerpc*-*-darwin* } } */\n /* { dg-options \"-fexceptions -fnon-call-exceptions -O2\" } */\n /* Verify that cleanups work with exception handling through signal\n    frames.  */"}, {"sha": "62a7e80017900a33b2db7581854525d388975608", "filename": "gcc/testsuite/gcc.dg/cleanup-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-9.c?ref=9fb1c9dbc86c1c6aacbb99cb312c006251b9cd65", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target *-*-linux* powerpc*-*-darwin* } } */\n+/* { dg-do run { target hppa*-*-hpux* *-*-linux* powerpc*-*-darwin* } } */\n /* { dg-options \"-fexceptions -fnon-call-exceptions -O2\" } */\n /* Verify that cleanups work with exception handling through realtime\n    signal frames.  */"}]}