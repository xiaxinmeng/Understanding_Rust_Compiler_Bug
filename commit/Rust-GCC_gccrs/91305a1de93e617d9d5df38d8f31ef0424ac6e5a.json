{"sha": "91305a1de93e617d9d5df38d8f31ef0424ac6e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzMDVhMWRlOTNlNjE3ZDlkNWRmMzhkOGYzMWVmMDQyNGFjNmU1YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-02T14:13:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-02T14:13:46Z"}, "message": "2003-12-02  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/http/Connection.java\n\t(Connection): Initialize doOutput to false;\n\t(connect): Initialize inputStream, moved \"send request\" code to new\n\tmethod.\n\t(sendRequest): New method.\n\t(getHttpHeaders): Don't reinitialize inputStream.\n\nFrom-SVN: r74177", "tree": {"sha": "62bb52cd750b9a2150b095f29f129a90c4a518a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62bb52cd750b9a2150b095f29f129a90c4a518a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91305a1de93e617d9d5df38d8f31ef0424ac6e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91305a1de93e617d9d5df38d8f31ef0424ac6e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91305a1de93e617d9d5df38d8f31ef0424ac6e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91305a1de93e617d9d5df38d8f31ef0424ac6e5a/comments", "author": null, "committer": null, "parents": [{"sha": "2b95402c940f52981d511f55bcf218bf74bf9929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b95402c940f52981d511f55bcf218bf74bf9929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b95402c940f52981d511f55bcf218bf74bf9929"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "2940d41eab0be6181319b80a4cefc03c5f74e482", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91305a1de93e617d9d5df38d8f31ef0424ac6e5a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91305a1de93e617d9d5df38d8f31ef0424ac6e5a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=91305a1de93e617d9d5df38d8f31ef0424ac6e5a", "patch": "@@ -1,3 +1,12 @@\n+2003-12-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/http/Connection.java\n+\t(Connection): Initialize doOutput to false;\n+\t(connect): Initialize inputStream, moved \"send request\" code to new\n+\tmethod.\n+\t(sendRequest): New method.\n+\t(getHttpHeaders): Don't reinitialize inputStream.\n+\n 2003-12-02  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol//http/Connection.java"}, {"sha": "ae13dff8506136aed3ddffc539da775dc06f41e2", "filename": "libjava/gnu/java/net/protocol/http/Connection.java", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91305a1de93e617d9d5df38d8f31ef0424ac6e5a/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91305a1de93e617d9d5df38d8f31ef0424ac6e5a/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java?ref=91305a1de93e617d9d5df38d8f31ef0424ac6e5a", "patch": "@@ -117,6 +117,9 @@ public final class Connection extends HttpURLConnection\n   protected Connection(URL url)\n   {\n     super(url);\n+\n+    /* Set up some variables */\n+    doOutput = false;\n   }\n \n   public void setRequestProperty(String key, String value)\n@@ -160,17 +163,15 @@ public void connect() throws IOException\n \tsocket = new Socket(url.getHost(), port);\n       }\n \n-    PrintWriter out = new PrintWriter(socket.getOutputStream());\n+    // Originally tried using a BufferedReader here to take advantage of\n+    // the readLine method and avoid the following, but the buffer read\n+    // past the end of the headers so the first part of the content was lost.\n+    // It is probably more robust than it needs to be, e.g. the byte[]\n+    // is unlikely to overflow and a '\\r' should always be followed by a '\\n',\n+    // but it is better to be safe just in case.\n+    inputStream = new BufferedInputStream(socket.getInputStream());\n \n-    // Send request including any request properties that were set.\n-    out.print(getRequestMethod() + \" \" + url.getFile() + \" HTTP/1.0\\r\\n\");\n-    out.print(\"Host: \" + url.getHost() + \":\" + port + \"\\r\\n\");\n-    Enumeration reqKeys = requestProperties.keys();\n-    Enumeration reqVals = requestProperties.elements();\n-    while (reqKeys.hasMoreElements())\n-      out.print(reqKeys.nextElement() + \": \" + reqVals.nextElement() + \"\\r\\n\");\n-    out.print(\"\\r\\n\");\n-    out.flush();    \n+    sendRequest();\n     getHttpHeaders();\n     connected = true;\n   }\n@@ -194,6 +195,34 @@ public void disconnect()\n       }\n   }\n \n+  /**\n+   * Write HTTP request header and content to outputWriter.\n+   */\n+  void sendRequest() throws IOException\n+  {\n+    // Create PrintWriter for easier sending of headers.\n+    PrintWriter outputWriter = new PrintWriter(socket.getOutputStream());\n+    \n+    // Send request including any request properties that were set.\n+    outputWriter.print (getRequestMethod() + \" \" + url.getFile()\n+                        + \" HTTP/1.0\\r\\n\");\n+\n+    // Set additional HTTP headers.\n+    if (getRequestProperty (\"Host\") == null)\n+      setRequestProperty (\"Host\", url.getHost());\n+    \n+    // Write all req_props name-value pairs to the output writer.\n+    Enumeration reqKeys = requestProperties.keys();\n+    Enumeration reqVals = requestProperties.elements();\n+    \n+    while (reqKeys.hasMoreElements())\n+      outputWriter.print (reqKeys.nextElement() + \": \" + reqVals.nextElement() + \"\\r\\n\");\n+    \n+    // One more CR-LF indicates end of header.\n+    outputWriter.print (\"\\r\\n\");\n+    outputWriter.flush();\n+  }\n+\n   /**\n    * Return a boolean indicating whether or not this connection is\n    * going through a proxy\n@@ -318,14 +347,6 @@ private String getField(String str)\n    */\n   private void getHttpHeaders() throws IOException\n   {\n-    // Originally tried using a BufferedReader here to take advantage of\n-    // the readLine method and avoid the following, but the buffer read\n-    // past the end of the headers so the first part of the content was lost.\n-    // It is probably more robust than it needs to be, e.g. the byte[]\n-    // is unlikely to overflow and a '\\r' should always be followed by a '\\n',\n-    // but it is better to be safe just in case.\n-    inputStream = new BufferedInputStream(socket.getInputStream());\n-\n     int buflen = 100;\n     byte[] buf = new byte[buflen];\n     String line = \"\";"}]}