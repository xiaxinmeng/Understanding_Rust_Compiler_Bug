{"sha": "98cf2c265962e260f2f95617983915c754f446ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjZjJjMjY1OTYyZTI2MGYyZjk1NjE3OTgzOTE1Yzc1NGY0NDZlYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T13:20:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T13:20:57Z"}, "message": "libstdc++: Implement \"Safe Integral Comparisons\" (P0586R2)\n\n\t* include/std/type_traits (__is_standard_integer): New helper trait.\n\t* include/std/utility (cmp_equal, cmp_not_equal, cmp_less, cmp_greater)\n\t(cmp_less_equal, cmp_greater_equal, in_range): Define for C++20.\n\t* include/std/version (__cpp_lib_integer_comparison_functions): Define.\n\t* testsuite/20_util/integer_comparisons/1.cc: New test.\n\t* testsuite/20_util/integer_comparisons/2.cc: New test.\n\t* testsuite/20_util/integer_comparisons/equal.cc: New test.\n\t* testsuite/20_util/integer_comparisons/equal_neg.cc: New test.\n\t* testsuite/20_util/integer_comparisons/greater_equal.cc: New test.\n\t* testsuite/20_util/integer_comparisons/greater_equal_neg.cc: New test.\n\t* testsuite/20_util/integer_comparisons/greater_neg.cc: New test.\n\t* testsuite/20_util/integer_comparisons/in_range.cc: New test.\n\t* testsuite/20_util/integer_comparisons/in_range_neg.cc: New test.\n\t* testsuite/20_util/integer_comparisons/less.cc: New test.\n\t* testsuite/20_util/integer_comparisons/less_equal.cc: New test.\n\t* testsuite/20_util/integer_comparisons/less_equal_neg.cc: New test.\n\t* testsuite/20_util/integer_comparisons/less_neg.cc: New test.\n\t* testsuite/20_util/integer_comparisons/not_equal.cc: New test.\n\t* testsuite/20_util/integer_comparisons/not_equal_neg.cc: New test.", "tree": {"sha": "d6a289228989f60b777a58d6ee657070bc0702f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a289228989f60b777a58d6ee657070bc0702f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98cf2c265962e260f2f95617983915c754f446ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cf2c265962e260f2f95617983915c754f446ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cf2c265962e260f2f95617983915c754f446ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cf2c265962e260f2f95617983915c754f446ea/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e2dae50d2dced9896048e036e2c8bebfc65472c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2dae50d2dced9896048e036e2c8bebfc65472c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2dae50d2dced9896048e036e2c8bebfc65472c"}], "stats": {"total": 877, "additions": 877, "deletions": 0}, "files": [{"sha": "2dca4b50dd79719bcb001c7bd1b376bc685460d0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -1,3 +1,25 @@\n+2020-02-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__is_standard_integer): New helper trait.\n+\t* include/std/utility (cmp_equal, cmp_not_equal, cmp_less, cmp_greater)\n+\t(cmp_less_equal, cmp_greater_equal, in_range): Define for C++20.\n+\t* include/std/version (__cpp_lib_integer_comparison_functions): Define.\n+\t* testsuite/20_util/integer_comparisons/1.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/2.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/equal.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/equal_neg.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/greater_equal.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/greater_equal_neg.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/greater_neg.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/in_range.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/in_range_neg.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/less.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/less_equal.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/less_equal_neg.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/less_neg.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/not_equal.cc: New test.\n+\t* testsuite/20_util/integer_comparisons/not_equal_neg.cc: New test.\n+\n 2020-02-16  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/ranges_algo.h (__lexicographical_compare_fn::operator()):"}, {"sha": "684a792d02c19d284b58d6e33149ed93bb090b92", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -622,6 +622,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t  >;\n \n+  // Check if a type is one of the signed or unsigned integer types.\n+  template<typename _Tp>\n+    using __is_standard_integer\n+      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;\n \n   // __void_t (std::void_t for C++11)\n   template<typename...> using __void_t = void;"}, {"sha": "380c059395cc542e77eaa05bfde31dde3d874e84", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -75,6 +75,10 @@\n #include <bits/move.h>\n #include <initializer_list>\n \n+#if __cplusplus > 201703L\n+#include <limits>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -397,6 +401,76 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     void as_const(const _Tp&&) = delete;\n \n+#if __cplusplus > 201703L\n+#define __cpp_lib_integer_comparison_functions 202002L\n+\n+  template<typename _Tp, typename _Up>\n+    constexpr bool\n+    cmp_equal(_Tp __t, _Up __u) noexcept\n+    {\n+      static_assert(__is_standard_integer<_Tp>::value);\n+      static_assert(__is_standard_integer<_Up>::value);\n+\n+      if constexpr (is_signed_v<_Tp> == is_signed_v<_Up>)\n+\treturn __t == __u;\n+      else if constexpr (is_signed_v<_Tp>)\n+\treturn __t >= 0 && make_unsigned_t<_Tp>(__t) == __u;\n+      else\n+\treturn __u >= 0 && __t == make_unsigned_t<_Up>(__u);\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    constexpr bool\n+    cmp_not_equal(_Tp __t, _Up __u) noexcept\n+    { return !std::cmp_equal(__t, __u); }\n+\n+  template<typename _Tp, typename _Up>\n+    constexpr bool\n+    cmp_less(_Tp __t, _Up __u) noexcept\n+    {\n+      static_assert(__is_standard_integer<_Tp>::value);\n+      static_assert(__is_standard_integer<_Up>::value);\n+\n+      if constexpr (is_signed_v<_Tp> == is_signed_v<_Up>)\n+\treturn __t < __u;\n+      else if constexpr (is_signed_v<_Tp>)\n+\treturn __t < 0 || make_unsigned_t<_Tp>(__t) < __u;\n+      else\n+\treturn __u >= 0 && __t < make_unsigned_t<_Up>(__u);\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    constexpr bool\n+    cmp_greater(_Tp __t, _Up __u) noexcept\n+    { return std::cmp_less(__u, __t); }\n+\n+  template<typename _Tp, typename _Up>\n+    constexpr bool\n+    cmp_less_equal(_Tp __t, _Up __u) noexcept\n+    { return !std::cmp_less(__u, __t); }\n+\n+  template<typename _Tp, typename _Up>\n+    constexpr bool\n+    cmp_greater_equal(_Tp __t, _Up __u) noexcept\n+    { return !std::cmp_less(__t, __u); }\n+\n+  template<typename _Up, typename _Tp>\n+    constexpr bool\n+    in_range(_Tp __t) noexcept\n+    {\n+      static_assert(__is_standard_integer<_Up>::value);\n+      static_assert(__is_standard_integer<_Tp>::value);\n+\n+      if constexpr (is_signed_v<_Tp> == is_signed_v<_Up>)\n+\treturn numeric_limits<_Up>::min() <= __t\n+\t  && __t <= numeric_limits<_Up>::max();\n+      else if constexpr (is_signed_v<_Tp>)\n+\treturn __t >= 0\n+\t  && make_unsigned_t<_Tp>(__t) <= numeric_limits<_Up>::max();\n+      else\n+\treturn __t <= make_unsigned_t<_Up>(numeric_limits<_Up>::max());\n+    }\n+#endif // C++20\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "6db569c2ff2918cca53de75d6d641cbd72446b83", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -180,6 +180,7 @@\n \n #if _GLIBCXX_HOSTED\n #define __cpp_lib_bind_front 201907L\n+#define __cpp_lib_integer_comparison_functions 202002L\n #define __cpp_lib_constexpr_algorithms 201806L\n #define __cpp_lib_constexpr_complex 201711L\n #define __cpp_lib_constexpr_dynamic_alloc 201907L"}, {"sha": "e76da7f1c1768333414636368c1c1745bc63bbaa", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/1.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2F1.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do preprocess { target c++2a } }\n+\n+#include <utility>\n+\n+#ifndef __cpp_lib_integer_comparison_functions\n+# error \"Feature test macro for comparison functions is missing in <utility>\"\n+#elif __cpp_lib_integer_comparison_functions < 202002L\n+# error \"Feature test macro for comparison functions has wrong value in <utility>\"\n+#endif"}, {"sha": "71007aef8151b7829199839c4ea966325a20f2af", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2F2.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do preprocess { target c++2a } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_integer_comparison_functions\n+# error \"Feature test macro for comparison functions is missing in <version>\"\n+#elif __cpp_lib_integer_comparison_functions < 202002L\n+# error \"Feature test macro for comparison functions has wrong value in <version>\"\n+#endif"}, {"sha": "16d4e3bd65c10d5abf963073d8bb0da166248caf", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/equal.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fequal.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <utility>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  VERIFY( !std::cmp_equal(s, u) );\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  if (std::cmp_equal(s, u))\n+    throw 1;\n+  if (std::cmp_equal(u, s))\n+    throw 2;\n+  return true;\n+}\n+\n+void\n+test03()\n+{\n+  short ss = -1;\n+  int s = -1;\n+  VERIFY( std::cmp_equal(s, ss) );\n+  VERIFY( std::cmp_equal(ss, s) );\n+\n+  unsigned int u = (unsigned int) -1;\n+  VERIFY( !std::cmp_equal(s, u) );\n+  VERIFY( !std::cmp_equal(u, s) );\n+  VERIFY( !std::cmp_equal(ss, u) );\n+  VERIFY( !std::cmp_equal(u, ss) );\n+\n+  unsigned long ul = (unsigned long) -1;\n+  VERIFY( !std::cmp_equal(s, ul) );\n+  VERIFY( !std::cmp_equal(ul, s) );\n+  VERIFY( !std::cmp_equal(ss, ul) );\n+  VERIFY( !std::cmp_equal(ul, ss) );\n+  VERIFY( !std::cmp_equal(u, ul) );\n+  VERIFY( !std::cmp_equal(ul, u) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  static_assert( test02() );\n+  test03();\n+}"}, {"sha": "dc70d8dfe82e1fdc0e5ea021568223c07f2e9987", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/equal_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fequal_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fequal_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fequal_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::cmp_equal('1', 49); // { dg-error \"here\" }\n+bool b = std::cmp_equal(50, '2'); // { dg-error \"here\" }\n+bool c = std::cmp_equal(2, L'2'); // { dg-error \"here\" }\n+bool d = std::cmp_equal(L'2', 2); // { dg-error \"here\" }\n+bool e = std::cmp_equal(true, 1); // { dg-error \"here\" }\n+bool f = std::cmp_equal(0, false); // { dg-error \"here\" }\n+bool g = std::cmp_equal(97, u8'a'); // { dg-error \"here\" }\n+bool h = std::cmp_equal(u8'a', 97); // { dg-error \"here\" }\n+bool i = std::cmp_equal(97, u'a'); // { dg-error \"here\" }\n+bool j = std::cmp_equal(u'a', 97); // { dg-error \"here\" }\n+bool k = std::cmp_equal(97, U'a'); // { dg-error \"here\" }\n+bool l = std::cmp_equal(U'a', 97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "61f461b40561a2390b3f5647141f9ce769e548b5", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/greater_equal.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_equal.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <utility>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  VERIFY( !std::cmp_greater_equal(s, u) );\n+  VERIFY( std::cmp_greater_equal(u, s) );\n+  u = (unsigned) std::numeric_limits<int>::max() + 1U;\n+  VERIFY( !std::cmp_greater_equal(s, u) );\n+  VERIFY( std::cmp_greater_equal(u, s) );\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  if (std::cmp_greater_equal(s, u))\n+    throw 1;\n+  if (!std::cmp_greater_equal(u, s))\n+    throw 2;\n+  return true;\n+}\n+\n+void\n+test03()\n+{\n+  short ss = -1;\n+  int s = -1;\n+  VERIFY( std::cmp_greater_equal(s, ss) );\n+  VERIFY( std::cmp_greater_equal(ss, s) );\n+  VERIFY( std::cmp_greater_equal(ss, -2) );\n+\n+  unsigned int u = (unsigned int) -1;\n+  VERIFY( !std::cmp_greater_equal(s, u) );\n+  VERIFY( std::cmp_greater_equal(u, s) );\n+  VERIFY( !std::cmp_greater_equal(ss, u) );\n+  VERIFY( std::cmp_greater_equal(u, ss) );\n+  VERIFY( std::cmp_greater_equal(u, -2U) );\n+\n+  unsigned long ul = (unsigned long) -1;\n+  VERIFY( !std::cmp_greater_equal(s, ul) );\n+  VERIFY( std::cmp_greater_equal(ul, s) );\n+  VERIFY( !std::cmp_greater_equal(ss, ul) );\n+  VERIFY( std::cmp_greater_equal(ul, ss) );\n+  VERIFY( !std::cmp_greater_equal(u, ul) );\n+  VERIFY( std::cmp_greater_equal(ul, u) );\n+  VERIFY( std::cmp_greater_equal(ul, -2UL) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  static_assert( test02() );\n+  test03();\n+}"}, {"sha": "52657c159bac65c46f46339124ee37d2d9146707", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/greater_equal_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_equal_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_equal_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_equal_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::cmp_greater_equal('1', 49); // { dg-error \"here\" }\n+bool b = std::cmp_greater_equal(50, '2'); // { dg-error \"here\" }\n+bool c = std::cmp_greater_equal(2, L'2'); // { dg-error \"here\" }\n+bool d = std::cmp_greater_equal(L'2', 2); // { dg-error \"here\" }\n+bool e = std::cmp_greater_equal(true, 1); // { dg-error \"here\" }\n+bool f = std::cmp_greater_equal(0, false); // { dg-error \"here\" }\n+bool g = std::cmp_greater_equal(97, u8'a'); // { dg-error \"here\" }\n+bool h = std::cmp_greater_equal(u8'a', 97); // { dg-error \"here\" }\n+bool i = std::cmp_greater_equal(97, u'a'); // { dg-error \"here\" }\n+bool j = std::cmp_greater_equal(u'a', 97); // { dg-error \"here\" }\n+bool k = std::cmp_greater_equal(97, U'a'); // { dg-error \"here\" }\n+bool l = std::cmp_greater_equal(U'a', 97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "e878e26a480bd2064a30a0e867bd6c2386149159", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/greater_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fgreater_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::cmp_greater('1', 49); // { dg-error \"here\" }\n+bool b = std::cmp_greater(50, '2'); // { dg-error \"here\" }\n+bool c = std::cmp_greater(2, L'2'); // { dg-error \"here\" }\n+bool d = std::cmp_greater(L'2', 2); // { dg-error \"here\" }\n+bool e = std::cmp_greater(true, 1); // { dg-error \"here\" }\n+bool f = std::cmp_greater(0, false); // { dg-error \"here\" }\n+bool g = std::cmp_greater(97, u8'a'); // { dg-error \"here\" }\n+bool h = std::cmp_greater(u8'a', 97); // { dg-error \"here\" }\n+bool i = std::cmp_greater(97, u'a'); // { dg-error \"here\" }\n+bool j = std::cmp_greater(u'a', 97); // { dg-error \"here\" }\n+bool k = std::cmp_greater(97, U'a'); // { dg-error \"here\" }\n+bool l = std::cmp_greater(U'a', 97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "218f1f881e712adb8f6a0f41559fd46b5bbfe83a", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/in_range.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <utility>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  VERIFY( std::in_range<unsigned int>(u) );\n+  VERIFY( !std::in_range<int>(u) );\n+  int s = -1;\n+  VERIFY( !std::in_range<unsigned int>(s) );\n+  s = std::numeric_limits<int>::max();\n+  VERIFY( std::in_range<unsigned int>(s) );\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  if (std::in_range<int>(u))\n+    throw 1;\n+  int s = -1;\n+  if (std::in_range<unsigned>(s))\n+    throw 2;\n+  s = std::numeric_limits<int>::max();\n+  if (!std::in_range<unsigned>(s))\n+    throw 3;\n+  return true;\n+}\n+\n+void\n+test03()\n+{\n+  short ss = -1;\n+  VERIFY( std::in_range<int>(ss) );\n+  VERIFY( !std::in_range<unsigned>(ss) );\n+  int s = -1;\n+  VERIFY( std::in_range<short>(s) );\n+  VERIFY( !std::in_range<unsigned>(s) );\n+  VERIFY( !std::in_range<unsigned long>(s) );\n+  VERIFY( std::in_range<long>(s) );\n+  s = std::numeric_limits<short>::min() - 1;\n+  VERIFY( !std::in_range<short>(s) );\n+\n+  unsigned int u = (unsigned int) -1;\n+  VERIFY( !std::in_range<int>(u) );\n+  VERIFY( !std::in_range<unsigned short>(u) );\n+\n+  unsigned long ul = (unsigned long) -1;\n+  VERIFY( !std::in_range<unsigned short>(ul) );\n+  VERIFY( std::in_range<unsigned long long>(ul) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  static_assert( test02() );\n+  test03();\n+}"}, {"sha": "13e2bf75a8a957c98d921b1f2573c3f4691afce4", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/in_range_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::in_range<int>('1'); // { dg-error \"here\" }\n+bool b = std::in_range<char>(50); // { dg-error \"here\" }\n+bool c = std::in_range<int>(L'2'); // { dg-error \"here\" }\n+bool d = std::in_range<wchar_t>(2); // { dg-error \"here\" }\n+bool e = std::in_range<int>(true); // { dg-error \"here\" }\n+bool f = std::in_range<bool>(0); // { dg-error \"here\" }\n+bool g = std::in_range<int>(u8'a'); // { dg-error \"here\" }\n+bool h = std::in_range<char8_t>(97); // { dg-error \"here\" }\n+bool i = std::in_range<int>(u'a'); // { dg-error \"here\" }\n+bool j = std::in_range<char16_t>(97); // { dg-error \"here\" }\n+bool k = std::in_range<int>(U'a'); // { dg-error \"here\" }\n+bool l = std::in_range<char32_t>(97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "a35006fc2fbb43b1b2e42a0feb67157140c5ebbd", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/less.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <utility>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  VERIFY( std::cmp_less(s, u) );\n+  VERIFY( !std::cmp_less(u, s) );\n+  u = (unsigned) std::numeric_limits<int>::max() + 1U;\n+  VERIFY( std::cmp_less(s, u) );\n+  VERIFY( !std::cmp_less(u, s) );\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  if (!std::cmp_less(s, u))\n+    throw 1;\n+  if (std::cmp_less(u, s))\n+    throw 2;\n+  return true;\n+}\n+\n+void\n+test03()\n+{\n+  short ss = -1;\n+  int s = -1;\n+  VERIFY( !std::cmp_less(s, ss) );\n+  VERIFY( !std::cmp_less(ss, s) );\n+\n+  unsigned int u = (unsigned int) -1;\n+  VERIFY( std::cmp_less(s, u) );\n+  VERIFY( !std::cmp_less(u, s) );\n+  VERIFY( std::cmp_less(ss, u) );\n+  VERIFY( !std::cmp_less(u, ss) );\n+\n+  unsigned long ul = (unsigned long) -1;\n+  VERIFY( std::cmp_less(s, ul) );\n+  VERIFY( !std::cmp_less(ul, s) );\n+  VERIFY( std::cmp_less(ss, ul) );\n+  VERIFY( !std::cmp_less(ul, ss) );\n+  VERIFY( std::cmp_less(u, ul) );\n+  VERIFY( !std::cmp_less(ul, u) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  static_assert( test02() );\n+  test03();\n+}"}, {"sha": "7875802856c1db3f31758dc9b528fb46949f5145", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/less_equal.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_equal.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <utility>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  VERIFY( std::cmp_less_equal(s, u) );\n+  VERIFY( !std::cmp_less_equal(u, s) );\n+  u = (unsigned) std::numeric_limits<int>::max() + 1U;\n+  VERIFY( std::cmp_less_equal(s, u) );\n+  VERIFY( !std::cmp_less_equal(u, s) );\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  if (!std::cmp_less_equal(s, u))\n+    throw 1;\n+  if (std::cmp_less_equal(u, s))\n+    throw 2;\n+  return true;\n+}\n+\n+void\n+test03()\n+{\n+  short ss = -1;\n+  int s = -1;\n+  VERIFY( std::cmp_less_equal(s, ss) );\n+  VERIFY( std::cmp_less_equal(ss, s) );\n+  VERIFY( std::cmp_less_equal(-2, ss) );\n+\n+  unsigned int u = (unsigned int) -1;\n+  VERIFY( std::cmp_less_equal(s, u) );\n+  VERIFY( !std::cmp_less_equal(u, s) );\n+  VERIFY( std::cmp_less_equal(ss, u) );\n+  VERIFY( !std::cmp_less_equal(u, ss) );\n+  VERIFY( std::cmp_less_equal(-2U, u) );\n+\n+  unsigned long ul = (unsigned long) -1;\n+  VERIFY( std::cmp_less_equal(s, ul) );\n+  VERIFY( !std::cmp_less_equal(ul, s) );\n+  VERIFY( std::cmp_less_equal(ss, ul) );\n+  VERIFY( !std::cmp_less_equal(ul, ss) );\n+  VERIFY( std::cmp_less_equal(u, ul) );\n+  VERIFY( !std::cmp_less_equal(ul, u) );\n+  VERIFY( std::cmp_less_equal(-2UL, ul) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  static_assert( test02() );\n+  test03();\n+}"}, {"sha": "39b558dac0b7e90458d65df2fe0191081312097d", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/less_equal_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_equal_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_equal_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_equal_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::cmp_less_equal('1', 49); // { dg-error \"here\" }\n+bool b = std::cmp_less_equal(50, '2'); // { dg-error \"here\" }\n+bool c = std::cmp_less_equal(2, L'2'); // { dg-error \"here\" }\n+bool d = std::cmp_less_equal(L'2', 2); // { dg-error \"here\" }\n+bool e = std::cmp_less_equal(true, 1); // { dg-error \"here\" }\n+bool f = std::cmp_less_equal(0, false); // { dg-error \"here\" }\n+bool g = std::cmp_less_equal(97, u8'a'); // { dg-error \"here\" }\n+bool h = std::cmp_less_equal(u8'a', 97); // { dg-error \"here\" }\n+bool i = std::cmp_less_equal(97, u'a'); // { dg-error \"here\" }\n+bool j = std::cmp_less_equal(u'a', 97); // { dg-error \"here\" }\n+bool k = std::cmp_less_equal(97, U'a'); // { dg-error \"here\" }\n+bool l = std::cmp_less_equal(U'a', 97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "171e7279e99c8e8e16a637702b455a94b514bfa4", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/less_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fless_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::cmp_less('1', 49); // { dg-error \"here\" }\n+bool b = std::cmp_less(50, '2'); // { dg-error \"here\" }\n+bool c = std::cmp_less(2, L'2'); // { dg-error \"here\" }\n+bool d = std::cmp_less(L'2', 2); // { dg-error \"here\" }\n+bool e = std::cmp_less(true, 1); // { dg-error \"here\" }\n+bool f = std::cmp_less(0, false); // { dg-error \"here\" }\n+bool g = std::cmp_less(97, u8'a'); // { dg-error \"here\" }\n+bool h = std::cmp_less(u8'a', 97); // { dg-error \"here\" }\n+bool i = std::cmp_less(97, u'a'); // { dg-error \"here\" }\n+bool j = std::cmp_less(u'a', 97); // { dg-error \"here\" }\n+bool k = std::cmp_less(97, U'a'); // { dg-error \"here\" }\n+bool l = std::cmp_less(U'a', 97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "81cbb3f49210dfba286b0a255a0a65d91a174d33", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/not_equal.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fnot_equal.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <utility>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  VERIFY( std::cmp_not_equal(s, u) );\n+  VERIFY( std::cmp_not_equal(u, s) );\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  unsigned int u = std::numeric_limits<unsigned int>::max();\n+  int s = -1;\n+  if (!std::cmp_not_equal(s, u))\n+    throw 1;\n+  if (!std::cmp_not_equal(u, s))\n+    throw 2;\n+  return true;\n+}\n+\n+void\n+test03()\n+{\n+  short ss = -1;\n+  int s = -1;\n+  VERIFY( !std::cmp_not_equal(s, ss) );\n+  VERIFY( !std::cmp_not_equal(ss, s) );\n+\n+  unsigned int u = (unsigned int) -1;\n+  VERIFY( std::cmp_not_equal(s, u) );\n+  VERIFY( std::cmp_not_equal(u, s) );\n+  VERIFY( std::cmp_not_equal(ss, u) );\n+  VERIFY( std::cmp_not_equal(u, ss) );\n+\n+  unsigned long ul = (unsigned long) -1;\n+  VERIFY( std::cmp_not_equal(s, ul) );\n+  VERIFY( std::cmp_not_equal(ul, s) );\n+  VERIFY( std::cmp_not_equal(ss, ul) );\n+  VERIFY( std::cmp_not_equal(ul, ss) );\n+  VERIFY( std::cmp_not_equal(u, ul) );\n+  VERIFY( std::cmp_not_equal(ul, u) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  static_assert( test02() );\n+  test03();\n+}"}, {"sha": "dc70d8dfe82e1fdc0e5ea021568223c07f2e9987", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/not_equal_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fnot_equal_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf2c265962e260f2f95617983915c754f446ea/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fnot_equal_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fnot_equal_neg.cc?ref=98cf2c265962e260f2f95617983915c754f446ea", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <utility>\n+\n+bool a = std::cmp_equal('1', 49); // { dg-error \"here\" }\n+bool b = std::cmp_equal(50, '2'); // { dg-error \"here\" }\n+bool c = std::cmp_equal(2, L'2'); // { dg-error \"here\" }\n+bool d = std::cmp_equal(L'2', 2); // { dg-error \"here\" }\n+bool e = std::cmp_equal(true, 1); // { dg-error \"here\" }\n+bool f = std::cmp_equal(0, false); // { dg-error \"here\" }\n+bool g = std::cmp_equal(97, u8'a'); // { dg-error \"here\" }\n+bool h = std::cmp_equal(u8'a', 97); // { dg-error \"here\" }\n+bool i = std::cmp_equal(97, u'a'); // { dg-error \"here\" }\n+bool j = std::cmp_equal(u'a', 97); // { dg-error \"here\" }\n+bool k = std::cmp_equal(97, U'a'); // { dg-error \"here\" }\n+bool l = std::cmp_equal(U'a', 97); // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}]}