{"sha": "dd2c62dcb685f9de4d53cd8c6e656e358754589a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyYzYyZGNiNjg1ZjlkZTRkNTNjZDhjNmU2NTZlMzU4NzU0NTg5YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-28T17:55:26Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-28T17:55:26Z"}, "message": "fold-const.c (fold_binary): Fold (X & Y) ^ Y as the equivalent ~X & Y, and the symmetry related transformations.\n\n\n\t* fold-const.c (fold_binary) <BIT_XOR_EXPR>: Fold (X & Y) ^ Y as\n\tthe equivalent ~X & Y, and the symmetry related transformations.\n\t(fold_binary) <BIT_AND_EXPR>: Similarly, fold (X ^ Y) & Y as \n\t~X & Y, and symmetry related transforms.\n\n\t* gcc.dg/fold-andxor-1.c: New test case.\n\t* gcc.dg/fold-xorand-1.c: Likewise.\n\nFrom-SVN: r112459", "tree": {"sha": "1b476f274da069b822455449eb6034e17e14926c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b476f274da069b822455449eb6034e17e14926c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd2c62dcb685f9de4d53cd8c6e656e358754589a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2c62dcb685f9de4d53cd8c6e656e358754589a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2c62dcb685f9de4d53cd8c6e656e358754589a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2c62dcb685f9de4d53cd8c6e656e358754589a/comments", "author": null, "committer": null, "parents": [{"sha": "3cc82eea2bfea5681e8374a85794102b68bdd4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc82eea2bfea5681e8374a85794102b68bdd4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc82eea2bfea5681e8374a85794102b68bdd4be"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "17f1e2e4fc2637619a0387edb42cdb95ca2013e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd2c62dcb685f9de4d53cd8c6e656e358754589a", "patch": "@@ -1,3 +1,10 @@\n+2006-03-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_binary) <BIT_XOR_EXPR>: Fold (X & Y) ^ Y as\n+\tthe equivalent ~X & Y, and the symmetry related transformations.\n+\t(fold_binary) <BIT_AND_EXPR>: Similarly, fold (X ^ Y) & Y as \n+\t~X & Y, and symmetry related transforms.\n+\n 2006-03-28  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \tRevert my 2006-03-27 patches."}, {"sha": "aa710b126c8a3e9202f71b5ed6e6bdd84c87d7ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dd2c62dcb685f9de4d53cd8c6e656e358754589a", "patch": "@@ -8803,6 +8803,45 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \treturn fold_build2 (EQ_EXPR, type, arg0,\n \t\t\t    build_int_cst (TREE_TYPE (arg0), 0));\n \n+      /* Fold (X & Y) ^ Y as ~X & Y.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg0, 0));\n+\t  return fold_build2 (BIT_AND_EXPR, type, \n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem),\n+\t\t\t      fold_convert (type, arg1));\n+\t}\n+      /* Fold (X & Y) ^ X as ~Y & X.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg0, 1));\n+\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem),\n+\t\t\t      fold_convert (type, arg1));\n+\t}\n+      /* Fold X ^ (X & Y) as X & ~Y.  */\n+      if (TREE_CODE (arg1) == BIT_AND_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg1, 1));\n+\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t      fold_convert (type, arg0),\n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem));\n+\t}\n+      /* Fold X ^ (Y & X) as ~Y & X.  */\n+      if (TREE_CODE (arg1) == BIT_AND_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0)\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg1, 0));\n+\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem),\n+\t\t\t      fold_convert (type, arg0));\n+\t}\n+\n       /* See if this can be simplified into a rotate first.  If that\n \t is unsuccessful continue in the association code.  */\n       goto bit_rotate;\n@@ -8877,6 +8916,45 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t      build_int_cst (TREE_TYPE (tem), 0));\n \t}\n \n+      /* Fold (X ^ Y) & Y as ~X & Y.  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg0, 0));\n+\t  return fold_build2 (BIT_AND_EXPR, type, \n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem),\n+\t\t\t      fold_convert (type, arg1));\n+\t}\n+      /* Fold (X ^ Y) & X as ~Y & X.  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n+\t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg0, 1));\n+\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem),\n+\t\t\t      fold_convert (type, arg1));\n+\t}\n+      /* Fold X & (X ^ Y) as X & ~Y.  */\n+      if (TREE_CODE (arg1) == BIT_XOR_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg1, 1));\n+\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t      fold_convert (type, arg0),\n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem));\n+\t}\n+      /* Fold X & (Y ^ X) as ~Y & X.  */\n+      if (TREE_CODE (arg1) == BIT_XOR_EXPR\n+\t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0)\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n+\t{\n+\t  tem = fold_convert (type, TREE_OPERAND (arg1, 0));\n+\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t      fold_build1 (BIT_NOT_EXPR, type, tem),\n+\t\t\t      fold_convert (type, arg0));\n+\t}\n+\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;"}, {"sha": "91e22200af4ad3868616dca263dc70f0b549fbeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd2c62dcb685f9de4d53cd8c6e656e358754589a", "patch": "@@ -1,3 +1,8 @@\n+2006-03-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/fold-andxor-1.c: New test case.\n+\t* gcc.dg/fold-xorand-1.c: Likewise.\n+\n 2006-03-28  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/fold-convnotconv-1.c: New test case."}, {"sha": "cc46577148af2b4d91f8197f3dea30593f95e626", "filename": "gcc/testsuite/gcc.dg/fold-andxor-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-andxor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-andxor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-andxor-1.c?ref=dd2c62dcb685f9de4d53cd8c6e656e358754589a", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return (a ^ b) & a;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return (c ^ d) & d;\n+}\n+\n+int test3(int e, int f)\n+{\n+  return e & (e ^ f);\n+}\n+\n+int test4(int g, int h)\n+{\n+  return g & (h ^ g);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"~b \\& a\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~c \\& d\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~f \\& e\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~h \\& g\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}, {"sha": "8d4265417c9ed9c7ae0f6ee8c4d76e852150f215", "filename": "gcc/testsuite/gcc.dg/fold-xorand-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xorand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2c62dcb685f9de4d53cd8c6e656e358754589a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xorand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xorand-1.c?ref=dd2c62dcb685f9de4d53cd8c6e656e358754589a", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a, int b)\n+{\n+  return (a & b) ^ a;\n+}\n+\n+int test2(int c, int d)\n+{\n+  return (c & d) ^ d;\n+}\n+\n+int test3(int e, int f)\n+{\n+  return e ^ (e & f);\n+}\n+\n+int test4(int g, int h)\n+{\n+  return g ^ (h & g);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"~b \\& a\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~c \\& d\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~f \\& e\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~h \\& g\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}