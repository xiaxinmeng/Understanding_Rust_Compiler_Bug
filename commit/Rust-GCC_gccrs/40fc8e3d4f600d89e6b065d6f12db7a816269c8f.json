{"sha": "40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "node_id": "C_kwDOANBUbNoAKDQwZmM4ZTNkNGY2MDBkODllNmIwNjVkNmYxMmRiN2E4MTYyNjljOGY", "commit": {"author": {"name": "Yanzhang Wang", "email": "yanzhang.wang@intel.com", "date": "2023-04-11T11:37:48Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-04-11T14:02:41Z"}, "message": "RISC-V: Fix regression of -fzero-call-used-regs=all [PR109104]\n\nThis patch registers a riscv specific function to\nTARGET_ZERO_CALL_USED_REGS instead of default in targhooks.cc. It will\nclean gpr and vector relevant registers.\n\ngcc/ChangeLog:\n\n\tPR target/109104\n\t* config/riscv/riscv-protos.h (emit_hard_vlmax_vsetvl): New.\n\t* config/riscv/riscv-v.cc (emit_hard_vlmax_vsetvl): New.\n\t(emit_vlmax_vsetvl): Use emit_hard_vlmax_vsetvl.\n\t* config/riscv/riscv.cc (vector_zero_call_used_regs): New.\n\t(riscv_zero_call_used_regs): New.\n\t(TARGET_ZERO_CALL_USED_REGS): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/109104\n\t* gcc.target/riscv/zero-scratch-regs-1.c: New test.\n\t* gcc.target/riscv/zero-scratch-regs-2.c: New test.\n\t* gcc.target/riscv/zero-scratch-regs-3.c: New test.\n\nSigned-off-by: Yanzhang Wang <yanzhang.wang@intel.com>\nCo-authored-by: Pan Li <pan2.li@intel.com>\nCo-authored-by: Ju-Zhe Zhong <juzhe.zhong@rivai.ai>\nCo-authored-by: Kito Cheng <kito.cheng@sifive.com>", "tree": {"sha": "0159b34bd41711e3c0d27754bbe279288b7a2cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0159b34bd41711e3c0d27754bbe279288b7a2cd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/comments", "author": {"login": "yanzhang-dev", "id": 75354404, "node_id": "MDQ6VXNlcjc1MzU0NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/75354404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanzhang-dev", "html_url": "https://github.com/yanzhang-dev", "followers_url": "https://api.github.com/users/yanzhang-dev/followers", "following_url": "https://api.github.com/users/yanzhang-dev/following{/other_user}", "gists_url": "https://api.github.com/users/yanzhang-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanzhang-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanzhang-dev/subscriptions", "organizations_url": "https://api.github.com/users/yanzhang-dev/orgs", "repos_url": "https://api.github.com/users/yanzhang-dev/repos", "events_url": "https://api.github.com/users/yanzhang-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/yanzhang-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e32978e3d9e3b88cd4f441edfdebfa395a5c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e32978e3d9e3b88cd4f441edfdebfa395a5c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e32978e3d9e3b88cd4f441edfdebfa395a5c26"}], "stats": {"total": 180, "additions": 177, "deletions": 3}, "files": [{"sha": "5244e8dcbf0a69f1e6c5ed3d4f81c62b7ffe0cd6", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "patch": "@@ -159,6 +159,7 @@ bool check_builtin_call (location_t, vec<location_t>, unsigned int,\n bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n bool legitimize_move (rtx, rtx, machine_mode);\n void emit_vlmax_vsetvl (machine_mode, rtx);\n+void emit_hard_vlmax_vsetvl (machine_mode, rtx);\n void emit_vlmax_op (unsigned, rtx, rtx, machine_mode);\n void emit_vlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n void emit_nonvlmax_op (unsigned, rtx, rtx, rtx, machine_mode);"}, {"sha": "392f5d02e17c0ce6c5d76a2248343f70ba41a4c6", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "patch": "@@ -118,6 +118,17 @@ const_vec_all_same_in_range_p (rtx x, HOST_WIDE_INT minval,\n \t  && IN_RANGE (INTVAL (elt), minval, maxval));\n }\n \n+/* Emit a vlmax vsetvl instruction.  This should only be used when\n+   optimization is disabled or after vsetvl insertion pass.  */\n+void\n+emit_hard_vlmax_vsetvl (machine_mode vmode, rtx vl)\n+{\n+  unsigned int sew = get_sew (vmode);\n+  emit_insn (gen_vsetvl (Pmode, vl, RVV_VLMAX, gen_int_mode (sew, Pmode),\n+\t\t\t gen_int_mode (get_vlmul (vmode), Pmode), const0_rtx,\n+\t\t\t const0_rtx));\n+}\n+\n void\n emit_vlmax_vsetvl (machine_mode vmode, rtx vl)\n {\n@@ -126,9 +137,7 @@ emit_vlmax_vsetvl (machine_mode vmode, rtx vl)\n   unsigned int ratio = calculate_ratio (sew, vlmul);\n \n   if (!optimize)\n-    emit_insn (gen_vsetvl (Pmode, vl, RVV_VLMAX, gen_int_mode (sew, Pmode),\n-\t\t\t   gen_int_mode (get_vlmul (vmode), Pmode), const0_rtx,\n-\t\t\t   const0_rtx));\n+    emit_hard_vlmax_vsetvl (vmode, vl);\n   else\n     emit_insn (gen_vlmax_avl (Pmode, vl, gen_int_mode (ratio, Pmode)));\n }"}, {"sha": "dc47434fac424b7a2c08b203e9a837923b4b0e92", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "patch": "@@ -7066,6 +7066,77 @@ riscv_shamt_matches_mask_p (int shamt, HOST_WIDE_INT mask)\n   return shamt == ctz_hwi (mask);\n }\n \n+static HARD_REG_SET\n+vector_zero_call_used_regs (HARD_REG_SET need_zeroed_hardregs)\n+{\n+  HARD_REG_SET zeroed_hardregs;\n+  CLEAR_HARD_REG_SET (zeroed_hardregs);\n+\n+  /* Find a register to hold vl.  */\n+  unsigned vl_regno = INVALID_REGNUM;\n+  /* Skip the first GPR, otherwise the existing vl is kept due to the same\n+     between vl and avl.  */\n+  for (unsigned regno = GP_REG_FIRST + 1; regno <= GP_REG_LAST; regno++)\n+    {\n+      if (TEST_HARD_REG_BIT (need_zeroed_hardregs, regno))\n+\t{\n+\t  vl_regno = regno;\n+\t  break;\n+\t}\n+    }\n+\n+  if (vl_regno > GP_REG_LAST)\n+    sorry (\"cannot allocate vl register for %qs on this target\",\n+\t   \"-fzero-call-used-regs\");\n+\n+  /* Vector configurations need not be saved and restored here.  The\n+     -fzero-call-used-regs=* option will zero all vector registers and\n+     return.  So there's no vector operations between them.  */\n+\n+  bool emitted_vlmax_vsetvl = false;\n+  rtx vl = gen_rtx_REG (Pmode, vl_regno); /* vl is VLMAX.  */\n+  for (unsigned regno = V_REG_FIRST; regno <= V_REG_LAST; ++regno)\n+    {\n+      if (TEST_HARD_REG_BIT (need_zeroed_hardregs, regno))\n+\t{\n+\t  rtx target = regno_reg_rtx[regno];\n+\t  machine_mode mode = GET_MODE (target);\n+\t  poly_uint16 nunits = GET_MODE_NUNITS (mode);\n+\t  machine_mode mask_mode\n+\t    = riscv_vector::get_vector_mode (BImode, nunits).require ();\n+\n+\t  if (!emitted_vlmax_vsetvl)\n+\t    {\n+\t      riscv_vector::emit_hard_vlmax_vsetvl (mode, vl);\n+\t      emitted_vlmax_vsetvl = true;\n+\t    }\n+\n+\t  riscv_vector::emit_vlmax_op (code_for_pred_mov (mode), target,\n+\t\t\t\t       CONST0_RTX (mode), vl, mask_mode);\n+\n+\t  SET_HARD_REG_BIT (zeroed_hardregs, regno);\n+\t}\n+    }\n+\n+  return zeroed_hardregs;\n+}\n+\n+/* Generate a sequence of instructions that zero registers specified by\n+   NEED_ZEROED_HARDREGS.  Return the ZEROED_HARDREGS that are actually\n+   zeroed.  */\n+HARD_REG_SET\n+riscv_zero_call_used_regs (HARD_REG_SET need_zeroed_hardregs)\n+{\n+  HARD_REG_SET zeroed_hardregs;\n+  CLEAR_HARD_REG_SET (zeroed_hardregs);\n+\n+  if (TARGET_VECTOR)\n+    zeroed_hardregs |= vector_zero_call_used_regs (need_zeroed_hardregs);\n+\n+  return zeroed_hardregs | default_zero_call_used_regs (need_zeroed_hardregs\n+\t\t\t\t\t\t\t& ~zeroed_hardregs);\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -7317,6 +7388,9 @@ riscv_shamt_matches_mask_p (int shamt, HOST_WIDE_INT mask)\n #undef TARGET_DWARF_POLY_INDETERMINATE_VALUE\n #define TARGET_DWARF_POLY_INDETERMINATE_VALUE riscv_dwarf_poly_indeterminate_value\n \n+#undef TARGET_ZERO_CALL_USED_REGS\n+#define TARGET_ZERO_CALL_USED_REGS riscv_zero_call_used_regs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-riscv.h\""}, {"sha": "41d94ab921a9e986f4187123d8c6d87f68d4f516", "filename": "gcc/testsuite/gcc.target/riscv/zero-scratch-regs-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-1.c?ref=40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2 -fzero-call-used-regs=used -fno-stack-protector -fno-PIC\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"li\\t\" } } */"}, {"sha": "9161dd3d4ec8b0c235bfa3014b2c7a689405a9d9", "filename": "gcc/testsuite/gcc.target/riscv/zero-scratch-regs-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-2.c?ref=40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2 -fzero-call-used-regs=all-gpr\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"vsetvli\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a6,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a7,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t6,0\" } } */"}, {"sha": "824fe9e548ff9a108b19aff103c7f7a96b5f4f4d", "filename": "gcc/testsuite/gcc.target/riscv/zero-scratch-regs-3.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fc8e3d4f600d89e6b065d6f12db7a816269c8f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-3.c?ref=40fc8e3d4f600d89e6b065d6f12db7a816269c8f", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O2 -fzero-call-used-regs=all\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"vsetvli\\[ \\t\\]*t0,zero,e32,m1,tu,mu\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v0,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v1,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v2,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v3,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v4,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v5,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v6,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v7,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v8,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v9,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v10,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v11,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v12,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v13,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v14,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v15,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v16,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v17,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v18,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v19,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v20,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v21,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v22,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v23,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v24,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v25,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v26,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v27,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v28,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v29,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v30,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v31,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a6,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a7,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t6,0\" } } */\n+/* { dg-final { scan-assembler \"fmv.d.x\\[ \\t\\]*ft0,zero\" } } */"}]}