{"sha": "134d23547e10276280b1022c4463cc1f52bab831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0ZDIzNTQ3ZTEwMjc2MjgwYjEwMjJjNDQ2M2NjMWY1MmJhYjgzMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-15T12:39:06Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-15T12:39:06Z"}, "message": "Disable -Wreturn-type by default in all languages other from C++.\n\n2017-11-15  Martin Liska  <mliska@suse.cz>\n\n\t* tree-cfg.c (pass_warn_function_return::execute):\n\tCompare warn_return_type for greater than zero.\n2017-11-15  Martin Liska  <mliska@suse.cz>\n\n\t* options.c (gfc_post_options):\n\tDo not set default value of warn_return_type.\n\t* trans-decl.c (gfc_trans_deferred_vars):\n\tCompare warn_return_type for greater than zero.\n\t(generate_local_decl): Likewise\n\t(gfc_generate_function_code): Likewise.\n\nFrom-SVN: r254764", "tree": {"sha": "ff8c417c9e925fa6db7f1ed3018ffe6b351dfc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff8c417c9e925fa6db7f1ed3018ffe6b351dfc07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/134d23547e10276280b1022c4463cc1f52bab831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134d23547e10276280b1022c4463cc1f52bab831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134d23547e10276280b1022c4463cc1f52bab831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134d23547e10276280b1022c4463cc1f52bab831/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6f146d226b225b1aa2fdcd0a868cb24e88321fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f146d226b225b1aa2fdcd0a868cb24e88321fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f146d226b225b1aa2fdcd0a868cb24e88321fd"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "4e2e4151859918fec60627583ab50add49d7f66a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134d23547e10276280b1022c4463cc1f52bab831/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134d23547e10276280b1022c4463cc1f52bab831/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=134d23547e10276280b1022c4463cc1f52bab831", "patch": "@@ -1,3 +1,8 @@\n+2017-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-cfg.c (pass_warn_function_return::execute):\n+\tCompare warn_return_type for greater than zero.\n+\n 2017-11-15  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \tPR target/82941"}, {"sha": "d3170c7370a93f961771ba1ba85189a421015205", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=134d23547e10276280b1022c4463cc1f52bab831", "patch": "@@ -1,3 +1,12 @@\n+2017-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* options.c (gfc_post_options):\n+\tDo not set default value of warn_return_type.\n+\t* trans-decl.c (gfc_trans_deferred_vars):\n+\tCompare warn_return_type for greater than zero.\n+\t(generate_local_decl): Likewise\n+\t(gfc_generate_function_code): Likewise.\n+\n 2017-11-13  Fritz Reese <fritzoreese@gmail.com>\n \n \tPR fortran/78240"}, {"sha": "0ee6b7808d97aaae479646dd14df15dcaa5bc4d5", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=134d23547e10276280b1022c4463cc1f52bab831", "patch": "@@ -435,9 +435,6 @@ gfc_post_options (const char **pfilename)\n     gfc_fatal_error (\"Maximum subrecord length cannot exceed %d\",\n \t\t     MAX_SUBRECORD_LENGTH);\n \n-  if (warn_return_type == -1)\n-    warn_return_type = 0;\n-\n   gfc_cpp_post_options ();\n \n   if (gfc_option.allow_std & GFC_STD_F2008)"}, {"sha": "60e7d8f79eec4961d9d68ad80645ad2ab09786d1", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=134d23547e10276280b1022c4463cc1f52bab831", "patch": "@@ -4198,7 +4198,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  break;\n \t    }\n \t  /* TODO: move to the appropriate place in resolve.c.  */\n-\t  if (warn_return_type && el == NULL)\n+\t  if (warn_return_type > 0 && el == NULL)\n \t    gfc_warning (OPT_Wreturn_type,\n \t\t\t \"Return value of function %qs at %L not set\",\n \t\t\t proc_sym->name, &proc_sym->declared_at);\n@@ -5619,7 +5619,7 @@ generate_local_decl (gfc_symbol * sym)\n   else if (sym->attr.flavor == FL_PROCEDURE)\n     {\n       /* TODO: move to the appropriate place in resolve.c.  */\n-      if (warn_return_type\n+      if (warn_return_type > 0\n \t  && sym->attr.function\n \t  && sym->result\n \t  && sym != sym->result\n@@ -6494,11 +6494,11 @@ gfc_generate_function_code (gfc_namespace * ns)\n       if (result == NULL_TREE || artificial_result_decl)\n \t{\n \t  /* TODO: move to the appropriate place in resolve.c.  */\n-\t  if (warn_return_type && sym == sym->result)\n+\t  if (warn_return_type > 0 && sym == sym->result)\n \t    gfc_warning (OPT_Wreturn_type,\n \t\t\t \"Return value of function %qs at %L not set\",\n \t\t\t sym->name, &sym->declared_at);\n-\t  if (warn_return_type)\n+\t  if (warn_return_type > 0)\n \t    TREE_NO_WARNING(sym->backend_decl) = 1;\n \t}\n       if (result != NULL_TREE)"}, {"sha": "f08a0547f0f7de1aeab8885b676774d4c6e625ef", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134d23547e10276280b1022c4463cc1f52bab831/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=134d23547e10276280b1022c4463cc1f52bab831", "patch": "@@ -9071,7 +9071,7 @@ pass_warn_function_return::execute (function *fun)\n \n   /* If we see \"return;\" in some basic block, then we do reach the end\n      without returning a value.  */\n-  else if (warn_return_type\n+  else if (warn_return_type > 0\n \t   && !TREE_NO_WARNING (fun->decl)\n \t   && EDGE_COUNT (EXIT_BLOCK_PTR_FOR_FN (fun)->preds) > 0\n \t   && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fun->decl))))"}]}