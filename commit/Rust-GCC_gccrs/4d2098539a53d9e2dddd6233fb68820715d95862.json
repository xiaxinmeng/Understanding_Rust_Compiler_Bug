{"sha": "4d2098539a53d9e2dddd6233fb68820715d95862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQyMDk4NTM5YTUzZDllMmRkZGQ2MjMzZmI2ODgyMDcxNWQ5NTg2Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-11-14T12:09:48Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-11-14T12:09:48Z"}, "message": "Introduce -fprofile-update=prefer-atomic\n\n\tPR bootstrap/78069\n\t* common.opt: Add prefer-atomic as a new enum value for\n\t-fprofile-update.\n\t* coretypes.h: Likewise.\n\t* doc/invoke.texi: Document the new option value.\n\t* gcc.c: Replace atomic with prefer-atomic.  Remove warning.\n\t* tree-profile.c (tree_profiling): Select default value\n\tof -fprofile-update when 'prefer-atomic' is selected.\n\tPR bootstrap/78069\n\t* gcc.dg/no_profile_instrument_function-attr-1.c: Update test\n\tto match scanned pattern.\n\t* gcc.dg/tree-ssa/ssa-lim-11.c: Likewise.\n\nFrom-SVN: r242386", "tree": {"sha": "ddc0a002eeabbf51f86b3f439e6a98477e64cc67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc0a002eeabbf51f86b3f439e6a98477e64cc67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d2098539a53d9e2dddd6233fb68820715d95862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2098539a53d9e2dddd6233fb68820715d95862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2098539a53d9e2dddd6233fb68820715d95862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2098539a53d9e2dddd6233fb68820715d95862/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6b9a2a0c58a6f8b29f801fd1631c7eee5138c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b9a2a0c58a6f8b29f801fd1631c7eee5138c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b9a2a0c58a6f8b29f801fd1631c7eee5138c3a"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "f8dc1bd2bf84dc00b48d724494ca96d7087ff297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -1,3 +1,14 @@\n+2016-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/78069\n+\t* common.opt: Add prefer-atomic as a new enum value for\n+\t-fprofile-update.\n+\t* coretypes.h: Likewise.\n+\t* doc/invoke.texi: Document the new option value.\n+\t* gcc.c: Replace atomic with prefer-atomic.  Remove warning.\n+\t* tree-profile.c (tree_profiling): Select default value\n+\tof -fprofile-update when 'prefer-atomic' is selected.\n+\n 2016-11-14  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/cortex-a57.md (cortex_a57_alu): Move extend here, bfm..."}, {"sha": "5e8d72d6ae673e5be6cac88f9b68e3f4e4f04765", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -1959,7 +1959,7 @@ Enable correction of flow inconsistent profile data input.\n \n fprofile-update=\n Common Joined RejectNegative Enum(profile_update) Var(flag_profile_update) Init(PROFILE_UPDATE_SINGLE)\n--fprofile-update=[single|atomic]\tSet the profile update method.\n+-fprofile-update=[single|atomic|prefer-atomic]\tSet the profile update method.\n \n Enum\n Name(profile_update) Type(enum profile_update) UnknownError(unknown profile update method %qs)\n@@ -1970,6 +1970,9 @@ Enum(profile_update) String(single) Value(PROFILE_UPDATE_SINGLE)\n EnumValue\n Enum(profile_update) String(atomic) Value(PROFILE_UPDATE_ATOMIC)\n \n+EnumValue\n+Enum(profile_update) String(prefer-atomic) Value(PROFILE_UPDATE_PREFER_ATOMIC)\n+\n fprofile-generate\n Common\n Enable common options for generating profile info for profile feedback directed optimizations."}, {"sha": "6d78a25c9719743c37b13848625c32efdbaa77c1", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -177,7 +177,8 @@ enum offload_abi {\n /* Types of profile update methods.  */\n enum profile_update {\n   PROFILE_UPDATE_SINGLE,\n-  PROFILE_UPDATE_ATOMIC\n+  PROFILE_UPDATE_ATOMIC,\n+  PROFILE_UPDATE_PREFER_ATOMIC\n };\n \n /* Types of unwind/exception handling info that can be generated.  */"}, {"sha": "0668d2bb9ee65c48e10ff949187eb517ef4ef006", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -10504,13 +10504,18 @@ To optimize the program based on the collected profile information, use\n \n Alter the update method for an application instrumented for profile\n feedback based optimization.  The @var{method} argument should be one of\n-@samp{single} or @samp{atomic}.  The first one is useful for single-threaded\n-applications, while the second one prevents profile corruption by emitting\n-thread-safe code.\n+@samp{single}, @samp{atomic} or @samp{prefer-atomic}.\n+The first one is useful for single-threaded applications,\n+while the second one prevents profile corruption by emitting thread-safe code.\n \n @strong{Warning:} When an application does not properly join all threads\n (or creates an detached thread), a profile file can be still corrupted.\n \n+Using @samp{prefer-atomic} would be transformed either to @samp{atomic},\n+when supported by a target, or to @samp{single} otherwise.  The GCC driver\n+automatically selects @samp{prefer-atomic} when @option{-pthread}\n+is present in the command line.\n+\n @item -fsanitize=address\n @opindex fsanitize=address\n Enable AddressSanitizer, a fast memory error detector."}, {"sha": "f78acd68606ceba08cd096ccee972a6b3336c681", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -1144,11 +1144,7 @@ static const char *cc1_options =\n  %{coverage:-fprofile-arcs -ftest-coverage}\\\n  %{fprofile-arcs|fprofile-generate*|coverage:\\\n    %{!fprofile-update=single:\\\n-     %{pthread:-fprofile-update=atomic}}}\\\n- %{fprofile-update=single:\\\n-   %{fprofile-arcs|fprofile-generate*|coverage:\\\n-     %{pthread:%n-fprofile-update=atomic should be used\\\n- for a multithreaded application}}}\";\n+     %{pthread:-fprofile-update=prefer-atomic}}}\";\n \n static const char *asm_options =\n \"%{-target-help:%:print-asm-header()} \""}, {"sha": "c47c8b2af5c3425772cc3b0b5c8594fa5f80f408", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -1,3 +1,10 @@\n+2016-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/78069\n+\t* gcc.dg/no_profile_instrument_function-attr-1.c: Update test\n+\tto match scanned pattern.\n+\t* gcc.dg/tree-ssa/ssa-lim-11.c: Likewise.\n+\n 2016-11-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78312"}, {"sha": "f7afb346d7f7507785c030d3902fe80349d6ed6e", "filename": "gcc/testsuite/gcc.dg/no_profile_instrument_function-attr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-1.c?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fprofile-generate -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fprofile-generate -fprofile-update=single -fdump-tree-optimized\" } */\n \n __attribute__ ((no_profile_instrument_function))\n int foo()"}, {"sha": "4c3898278b112589e41ae68073c9c6f90d66e717", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fprofile-arcs -fdump-tree-lim2-details\" } */\n+/* { dg-options \"-O -fprofile-arcs -fprofile-update=single -fdump-tree-lim2-details\" } */\n /* { dg-require-profiling \"-fprofile-generate\" } */\n \n struct thread_param"}, {"sha": "a4f9d11b16100731b73225d82b0bdfca0b512c63", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2098539a53d9e2dddd6233fb68820715d95862/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=4d2098539a53d9e2dddd6233fb68820715d95862", "patch": "@@ -592,25 +592,26 @@ tree_profiling (void)\n   struct cgraph_node *node;\n \n   /* Verify whether we can utilize atomic update operations.  */\n-  if (flag_profile_update == PROFILE_UPDATE_ATOMIC)\n+  bool can_support_atomic = false;\n+  unsigned HOST_WIDE_INT gcov_type_size\n+    = tree_to_uhwi (TYPE_SIZE_UNIT (get_gcov_type ()));\n+  if (gcov_type_size == 4)\n+    can_support_atomic\n+      = HAVE_sync_compare_and_swapsi || HAVE_atomic_compare_and_swapsi;\n+  else if (gcov_type_size == 8)\n+    can_support_atomic\n+      = HAVE_sync_compare_and_swapdi || HAVE_atomic_compare_and_swapdi;\n+\n+  if (flag_profile_update == PROFILE_UPDATE_ATOMIC\n+      && !can_support_atomic)\n     {\n-      bool can_support = false;\n-      unsigned HOST_WIDE_INT gcov_type_size\n-\t= tree_to_uhwi (TYPE_SIZE_UNIT (get_gcov_type ()));\n-      if (gcov_type_size == 4)\n-\tcan_support\n-\t  = HAVE_sync_compare_and_swapsi || HAVE_atomic_compare_and_swapsi;\n-      else if (gcov_type_size == 8)\n-\tcan_support\n-\t  = HAVE_sync_compare_and_swapdi || HAVE_atomic_compare_and_swapdi;\n-\n-      if (!can_support)\n-      {\n-\twarning (0, \"target does not support atomic profile update, \"\n-\t\t \"single mode is selected\");\n-\tflag_profile_update = PROFILE_UPDATE_SINGLE;\n-      }\n+      warning (0, \"target does not support atomic profile update, \"\n+\t       \"single mode is selected\");\n+      flag_profile_update = PROFILE_UPDATE_SINGLE;\n     }\n+  else if (flag_profile_update == PROFILE_UPDATE_PREFER_ATOMIC)\n+    flag_profile_update = can_support_atomic\n+      ? PROFILE_UPDATE_ATOMIC : PROFILE_UPDATE_SINGLE;\n \n   /* This is a small-ipa pass that gets called only once, from\n      cgraphunit.c:ipa_passes().  */"}]}