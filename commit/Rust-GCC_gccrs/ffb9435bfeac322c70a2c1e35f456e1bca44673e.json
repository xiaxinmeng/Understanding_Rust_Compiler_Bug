{"sha": "ffb9435bfeac322c70a2c1e35f456e1bca44673e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiOTQzNWJmZWFjMzIyYzcwYTJjMWUzNWY0NTZlMWJjYTQ0NjczZQ==", "commit": {"author": {"name": "Matt Kraai", "email": "kraai@alumni.carnegiemellon.edu", "date": "2001-08-22T21:02:06Z"}, "committer": {"name": "Matt Kraai", "email": "kraai@gcc.gnu.org", "date": "2001-08-22T21:02:06Z"}, "message": "fibheap.c (fibheap_init, [...]): Remove.\n\n \t* fibheap.c (fibheap_init, fibnode_init): Remove.\n \t(fibheap_new, fibnode_new): Use xcalloc to allocate and\n \tinitialize memory.\n \t(fibheap_insert): Remove check for node allocation failure.\n\nFrom-SVN: r45113", "tree": {"sha": "2c046d630a67dd6c1b71bda350b3ae98b6aa109a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c046d630a67dd6c1b71bda350b3ae98b6aa109a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb9435bfeac322c70a2c1e35f456e1bca44673e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb9435bfeac322c70a2c1e35f456e1bca44673e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb9435bfeac322c70a2c1e35f456e1bca44673e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb9435bfeac322c70a2c1e35f456e1bca44673e/comments", "author": null, "committer": null, "parents": [{"sha": "29401c300b273963c88bb08bb6282acdf11e75c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29401c300b273963c88bb08bb6282acdf11e75c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29401c300b273963c88bb08bb6282acdf11e75c2"}], "stats": {"total": 60, "additions": 16, "deletions": 44}, "files": [{"sha": "f80d808257d29c761b04263f86e633b91e0bbaaf", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9435bfeac322c70a2c1e35f456e1bca44673e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9435bfeac322c70a2c1e35f456e1bca44673e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ffb9435bfeac322c70a2c1e35f456e1bca44673e", "patch": "@@ -1,3 +1,10 @@\n+2001-08-22  Matt Kraai  <kraai@alumni.carnegiemellon.edu>\n+\n+ \t* fibheap.c (fibheap_init, fibnode_init): Remove.\n+ \t(fibheap_new, fibnode_new): Use xcalloc to allocate and\n+ \tinitialize memory.\n+ \t(fibheap_insert): Remove check for node allocation failure.\n+\n 2001-08-21  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (fibheap.o): Depend on config.h."}, {"sha": "0ba9b8d6b0a4bf136fc7089666055bd061d47c73", "filename": "libiberty/fibheap.c", "status": "modified", "additions": 9, "deletions": 44, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9435bfeac322c70a2c1e35f456e1bca44673e/libiberty%2Ffibheap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9435bfeac322c70a2c1e35f456e1bca44673e/libiberty%2Ffibheap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffibheap.c?ref=ffb9435bfeac322c70a2c1e35f456e1bca44673e", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define FIBHEAPKEY_MIN\tLONG_MIN\n \n-static void fibheap_init PARAMS ((fibheap_t));\n static void fibheap_ins_root PARAMS ((fibheap_t, fibnode_t));\n static void fibheap_rem_root PARAMS ((fibheap_t, fibnode_t));\n static void fibheap_consolidate PARAMS ((fibheap_t));\n@@ -49,62 +48,29 @@ static int fibheap_compare PARAMS ((fibheap_t, fibnode_t, fibnode_t));\n static int fibheap_comp_data PARAMS ((fibheap_t, fibheapkey_t, void *,\n \t\t\t\t      fibnode_t));\n static fibnode_t fibnode_new PARAMS ((void));\n-static void fibnode_init PARAMS ((fibnode_t));\n static void fibnode_insert_after PARAMS ((fibnode_t, fibnode_t));\n #define fibnode_insert_before(a, b) fibnode_insert_after (a->left, b)\n static fibnode_t fibnode_remove PARAMS ((fibnode_t));\n \n \f\n-/* Initialize the passed in fibonacci heap.  */\n-static inline void\n-fibheap_init (heap)\n-     fibheap_t heap;\n-{\n-  heap->nodes = 0;\n-  heap->min = NULL;\n-  heap->root = NULL;\n-}\n-\n /* Create a new fibonacci heap.  */\n fibheap_t\n fibheap_new ()\n {\n-  fibheap_t result;\n-\n-  if ((result = xmalloc (sizeof (*result))) == NULL)\n-    return NULL;\n-\n-  fibheap_init (result);\n-\n-  return result;\n-}\n-\n-/* Initialize the passed in fibonacci heap node.  */\n-static inline void\n-fibnode_init (node)\n-     fibnode_t node;\n-{\n-  node->degree = 0;\n-  node->mark = 0;\n-  node->parent = NULL;\n-  node->child = NULL;\n-  node->left = node;\n-  node->right = node;\n-  node->data = NULL;\n+  return (fibheap_t) xcalloc (1, sizeof (struct fibheap));\n }\n \n /* Create a new fibonacci heap node.  */\n-static inline fibnode_t\n+static fibnode_t\n fibnode_new ()\n {\n-  fibnode_t e;\n-\n-  if ((e = xmalloc (sizeof *e)) == NULL)\n-    return NULL;\n+  fibnode_t node;\n \n-  fibnode_init (e);\n+  node = xcalloc (1, sizeof *node);\n+  node->left = node;\n+  node->right = node;\n \n-  return e;\n+  return node;\n }\n \n static inline int\n@@ -144,9 +110,8 @@ fibheap_insert (heap, key, data)\n {\n   fibnode_t node;\n \n-  /* Create the new node, if we fail, return NULL.  */\n-  if ((node = fibnode_new ()) == NULL)\n-    return NULL;\n+  /* Create the new node.  */\n+  node = fibnode_new ();\n \n   /* Set the node's data.  */\n   node->data = data;"}]}