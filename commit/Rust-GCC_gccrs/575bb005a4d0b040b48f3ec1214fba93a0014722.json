{"sha": "575bb005a4d0b040b48f3ec1214fba93a0014722", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1YmIwMDVhNGQwYjA0MGI0OGYzZWMxMjE0ZmJhOTNhMDAxNDcyMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-04-05T00:08:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-04-05T00:08:33Z"}, "message": "pa.c (short_memory_operand): Delete.\n\n\t* pa.c (short_memory_operand): Delete.\n\t(emit_move_sequence): Do not use short_memory_operand When testing\n\tfor secondary reloads for FP loads/stores.\n\nFrom-SVN: r4014", "tree": {"sha": "3cc4f20ff1244d2b70cabc4165f551b7b7a26c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc4f20ff1244d2b70cabc4165f551b7b7a26c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575bb005a4d0b040b48f3ec1214fba93a0014722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575bb005a4d0b040b48f3ec1214fba93a0014722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575bb005a4d0b040b48f3ec1214fba93a0014722", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575bb005a4d0b040b48f3ec1214fba93a0014722/comments", "author": null, "committer": null, "parents": [{"sha": "84721fbde7a0bc86a1e3b279293394829ba43746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84721fbde7a0bc86a1e3b279293394829ba43746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84721fbde7a0bc86a1e3b279293394829ba43746"}], "stats": {"total": 31, "additions": 6, "deletions": 25}, "files": [{"sha": "6edb348cbab448a06b695a93bacfdaba93f6a656", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575bb005a4d0b040b48f3ec1214fba93a0014722/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575bb005a4d0b040b48f3ec1214fba93a0014722/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=575bb005a4d0b040b48f3ec1214fba93a0014722", "patch": "@@ -218,29 +218,6 @@ pic_operand (op, mode)\n   return flag_pic && GET_CODE (op) == LABEL_REF;\n }\n \n-int\n-short_memory_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  if (GET_CODE (op) == MEM)\n-    {\n-      if (GET_CODE (XEXP (op, 0)) == REG)\n-\treturn 1;\n-      else if (GET_CODE (XEXP (op, 0)) == PLUS)\n-\t{\n-\t  rtx op1 = XEXP (XEXP (op, 0), 0);\n-\t  rtx op2 = XEXP (XEXP (op, 0), 1);\n-\n-\t  if (GET_CODE (op1) == REG)\n-\t    return (GET_CODE (op2) == CONST_INT && INT_5_BITS (op2));\n-\t  else if (GET_CODE (op2) == REG)\n-\t    return (GET_CODE (op1) == CONST_INT && INT_5_BITS (op1));\n-\t}\n-    }\n-  return 0;\n-}\n-\n int\n fp_reg_operand (op, mode)\n      rtx op;\n@@ -729,7 +706,9 @@ emit_move_sequence (operands, mode, scratch_reg)\n      REG+D addresses where D does not fit in 5 bits.  */\n   if (fp_reg_operand (operand0, mode)\n       && GET_CODE (operand1) == MEM\n-      && !short_memory_operand  (operand1, mode)\n+      /* Using DFmode forces only short displacements be be\n+\t recognized as valid in reg+d addressing modes.  */\n+      && ! memory_address_p (DFmode, XEXP (operand1, 0))\n       && scratch_reg)\n     {\n       emit_move_insn (scratch_reg, XEXP (operand1 , 0));\n@@ -739,7 +718,9 @@ emit_move_sequence (operands, mode, scratch_reg)\n     }\n   else if (fp_reg_operand (operand1, mode)\n \t   && GET_CODE (operand0) == MEM\n-\t   && !short_memory_operand  (operand0, mode)\n+\t   /* Using DFmode forces only short displacements be be\n+\t      recognized as valid in reg+d addressing modes.  */\n+\t   && ! memory_address_p (DFmode, XEXP (operand0, 0))\n \t   && scratch_reg)\n     {\n       emit_move_insn (scratch_reg, XEXP (operand0 , 0));"}]}