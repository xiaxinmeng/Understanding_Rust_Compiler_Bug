{"sha": "74af13c174714dd3b9f1ded4b39955f003c16361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhZjEzYzE3NDcxNGRkM2I5ZjFkZWQ0YjM5OTU1ZjAwM2MxNjM2MQ==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-02-18T07:47:05Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-02-23T09:21:10Z"}, "message": "config.sub, config.guess : Import upstream 2021-01-25.\n\nHi\n\nDoes it update config.sub and config.guess, I know it's already\nstage 4, but the config.* stuff update should be harmless things,\nand we need this for RISC-V big-endian support, which is already\nsupported in binutils 2.36.\n\nThis imports from:\n\nsha1 6faca61810d335c7837f320733fe8e15a1431fc2\n\nChangeLog:\n\n\t* config.guess: Import latest upstream.\n\t* config.sub: Import latest upstream.", "tree": {"sha": "a7b8aaeefe8a86024dff8211fffc9e5e02d58511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b8aaeefe8a86024dff8211fffc9e5e02d58511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74af13c174714dd3b9f1ded4b39955f003c16361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74af13c174714dd3b9f1ded4b39955f003c16361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74af13c174714dd3b9f1ded4b39955f003c16361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74af13c174714dd3b9f1ded4b39955f003c16361/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b64a3547b91677189c6cbf4c08d7c80770a93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b64a3547b91677189c6cbf4c08d7c80770a93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b64a3547b91677189c6cbf4c08d7c80770a93a"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "1972fda8eb05d040c1390495644252fc92fa2d10", "filename": "config.guess", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af13c174714dd3b9f1ded4b39955f003c16361/config.guess", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af13c174714dd3b9f1ded4b39955f003c16361/config.guess", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.guess?ref=74af13c174714dd3b9f1ded4b39955f003c16361", "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2020 Free Software Foundation, Inc.\n+#   Copyright 1992-2021 Free Software Foundation, Inc.\n \n-timestamp='2020-11-07'\n+timestamp='2021-01-25'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -27,7 +27,7 @@ timestamp='2020-11-07'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+# https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2020 Free Software Foundation, Inc.\n+Copyright 1992-2021 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -138,9 +138,7 @@ UNAME_VERSION=$( (uname -v) 2>/dev/null) || UNAME_VERSION=unknown\n \n case \"$UNAME_SYSTEM\" in\n Linux|GNU|GNU/*)\n-\t# If the system lacks a compiler, then just pick glibc.\n-\t# We could probably try harder.\n-\tLIBC=gnu\n+\tLIBC=unknown\n \n \tset_cc_for_build\n \tcat <<-EOF > \"$dummy.c\"\n@@ -149,16 +147,30 @@ Linux|GNU|GNU/*)\n \tLIBC=uclibc\n \t#elif defined(__dietlibc__)\n \tLIBC=dietlibc\n+\t#elif defined(__GLIBC__)\n+\tLIBC=gnu\n \t#else\n \t#include <stdarg.h>\n+\t/* First heuristic to detect musl libc.  */\n \t#ifdef __DEFINED_va_list\n \tLIBC=musl\n-\t#else\n-\tLIBC=gnu\n \t#endif\n \t#endif\n \tEOF\n \teval \"$($CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g')\"\n+\n+\t# Second heuristic to detect musl libc.\n+\tif [ \"$LIBC\" = unknown ] &&\n+\t   command -v ldd >/dev/null &&\n+\t   ldd --version 2>&1 | grep -q ^musl; then\n+\t\tLIBC=musl\n+\tfi\n+\n+\t# If the system lacks a compiler, then just pick glibc.\n+\t# We could probably try harder.\n+\tif [ \"$LIBC\" = unknown ]; then\n+\t\tLIBC=gnu\n+\tfi\n \t;;\n esac\n \n@@ -176,10 +188,9 @@ case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n \t#\n \t# Note: NetBSD doesn't particularly care about the vendor\n \t# portion of the name.  We always set it to \"unknown\".\n-\tsysctl=\"sysctl -n hw.machine_arch\"\n \tUNAME_MACHINE_ARCH=$( (uname -p 2>/dev/null || \\\n-\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n-\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n+\t    /sbin/sysctl -n hw.machine_arch 2>/dev/null || \\\n+\t    /usr/sbin/sysctl -n hw.machine_arch 2>/dev/null || \\\n \t    echo unknown))\n \tcase \"$UNAME_MACHINE_ARCH\" in\n \t    aarch64eb) machine=aarch64_be-unknown ;;\n@@ -984,6 +995,9 @@ EOF\n     k1om:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n+    loongarch32:Linux:*:* | loongarch64:Linux:*:* | loongarchx32:Linux:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n+\texit ;;\n     m32r*:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n@@ -1072,7 +1086,7 @@ EOF\n     ppcle:Linux:*:*)\n \techo powerpcle-unknown-linux-\"$LIBC\"\n \texit ;;\n-    riscv32:Linux:*:* | riscv64:Linux:*:*)\n+    riscv32:Linux:*:* | riscv32be:Linux:*:* | riscv64:Linux:*:* | riscv64be:Linux:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n@@ -1468,8 +1482,8 @@ EOF\n     i*86:rdos:*:*)\n \techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n-    i*86:AROS:*:*)\n-\techo \"$UNAME_MACHINE\"-pc-aros\n+    *:AROS:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n \techo \"$UNAME_MACHINE\"-unknown-esx\n@@ -1638,9 +1652,9 @@ This script (version $timestamp), has failed to recognize the\n operating system you are using. If your script is old, overwrite *all*\n copies of config.guess and config.sub with the latest versions from:\n \n-  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+  https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n and\n-  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+  https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n EOF\n \n year=$(echo $timestamp | sed 's,-.*,,')"}, {"sha": "63c1f1c8b5e2d881e106d8951a11c6c94ae6352b", "filename": "config.sub", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74af13c174714dd3b9f1ded4b39955f003c16361/config.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74af13c174714dd3b9f1ded4b39955f003c16361/config.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.sub?ref=74af13c174714dd3b9f1ded4b39955f003c16361", "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2020 Free Software Foundation, Inc.\n+#   Copyright 1992-2021 Free Software Foundation, Inc.\n \n-timestamp='2020-11-07'\n+timestamp='2021-01-08'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -33,7 +33,7 @@ timestamp='2020-11-07'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+# https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2020 Free Software Foundation, Inc.\n+Copyright 1992-2021 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -1185,6 +1185,7 @@ case $cpu-$vendor in\n \t\t\t| k1om \\\n \t\t\t| le32 | le64 \\\n \t\t\t| lm32 \\\n+\t\t\t| loongarch32 | loongarch64 | loongarchx32 \\\n \t\t\t| m32c | m32r | m32rle \\\n \t\t\t| m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k \\\n \t\t\t| m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x \\\n@@ -1229,7 +1230,7 @@ case $cpu-$vendor in\n \t\t\t| powerpc | powerpc64 | powerpc64le | powerpcle | powerpcspe \\\n \t\t\t| pru \\\n \t\t\t| pyramid \\\n-\t\t\t| riscv | riscv32 | riscv64 \\\n+\t\t\t| riscv | riscv32 | riscv32be | riscv64 | riscv64be \\\n \t\t\t| rl78 | romp | rs6000 | rx \\\n \t\t\t| s390 | s390x \\\n \t\t\t| score \\\n@@ -1241,6 +1242,7 @@ case $cpu-$vendor in\n \t\t\t| sparcv8 | sparcv9 | sparcv9b | sparcv9v | sv1 | sx* \\\n \t\t\t| spu \\\n \t\t\t| tahoe \\\n+\t\t\t| thumbv7* \\\n \t\t\t| tic30 | tic4x | tic54x | tic55x | tic6x | tic80 \\\n \t\t\t| tron \\\n \t\t\t| ubicom32 \\\n@@ -1681,11 +1683,14 @@ fi\n \n # Now, validate our (potentially fixed-up) OS.\n case $os in\n-\t# Sometimes we do \"kernel-abi\", so those need to count as OSes.\n+\t# Sometimes we do \"kernel-libc\", so those need to count as OSes.\n \tmusl* | newlib* | uclibc*)\n \t\t;;\n-\t# Likewise for \"kernel-libc\"\n-\teabi | eabihf | gnueabi | gnueabihf)\n+\t# Likewise for \"kernel-abi\"\n+\teabi* | gnueabi*)\n+\t\t;;\n+\t# VxWorks passes extra cpu info in the 4th filed.\n+\tsimlinux | simwindows | spe)\n \t\t;;\n \t# Now accept the basic system types.\n \t# The portable systems comes first.\n@@ -1749,6 +1754,8 @@ case $kernel-$os in\n \t\t;;\n \tkfreebsd*-gnu* | kopensolaris*-gnu*)\n \t\t;;\n+\tvxworks-simlinux | vxworks-simwindows | vxworks-spe)\n+\t\t;;\n \tnto-qnx*)\n \t\t;;\n \tos2-emx)"}]}