{"sha": "410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwYWJlZWIwZGRlNGFhNzFlNDdhNTA3YWE1MTdmZjRhNGRiYjZhMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-08T13:41:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T13:41:58Z"}, "message": "exp_aggr.adb: (Aggr_Assignment_OK_For_Backend): Add early return for access types.\n\n2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_aggr.adb: (Aggr_Assignment_OK_For_Backend): Add early return for\n\taccess types.\n\nFrom-SVN: r251896", "tree": {"sha": "7971c24d0eff4082a18f211748ca528f27085134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7971c24d0eff4082a18f211748ca528f27085134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1/comments", "author": null, "committer": null, "parents": [{"sha": "333e4f86e84ad505c372908d169c11032ba5641d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/333e4f86e84ad505c372908d169c11032ba5641d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/333e4f86e84ad505c372908d169c11032ba5641d"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "2302293f545c22f1ed8593a1dc7e6627d2433e58", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1", "patch": "@@ -1,3 +1,8 @@\n+2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb: (Aggr_Assignment_OK_For_Backend): Add early return for\n+\taccess types.\n+\n 2017-09-08  Bob Duff  <duff@adacore.com>\n \n \t* par-prag.adb, sem_prag.adb, snames.ads-tmpl: Implement pragma"}, {"sha": "2fa0dc52b7ae8682c2a3c8109b8903efc6e550ab", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=410abeeb0dde4aa71e47a507aa517ff4a4dbb6a1", "patch": "@@ -4971,16 +4971,32 @@ package body Exp_Aggr is\n             return False;\n          end if;\n \n-         --  All elementary types are supported except for fat pointers\n-         --  because they are not really elementary for the backend.\n+         --  All elementary types are supported\n \n-         if not Is_Elementary_Type (Ctyp)\n-           or else (Is_Access_Type (Ctyp)\n-                     and then Esize (Ctyp) /= System_Address_Size)\n-         then\n+         if not Is_Elementary_Type (Ctyp) then\n             return False;\n          end if;\n \n+         --  However access types need to be dealt with specially\n+\n+         if Is_Access_Type (Ctyp) then\n+\n+            --  Fat pointers are rejected as they are not really elementary\n+            --  for the backend.\n+\n+            if Esize (Ctyp) /= System_Address_Size then\n+               return False;\n+            end if;\n+\n+            --  The supported expressions are NULL and constants, others are\n+            --  rejected upfront to avoid being analyzed below, which can be\n+            --  problematic for some of them, for example allocators.\n+\n+            if Nkind (Expr) /= N_Null and then not Is_Entity_Name (Expr) then\n+               return False;\n+            end if;\n+         end if;\n+\n          --  The expression needs to be analyzed if True is returned\n \n          Analyze_And_Resolve (Expr, Ctyp);"}]}