{"sha": "fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmZDUzN2JjYjA2OWFhY2I5OTIxYzA1NjdlZGNlZjdjZjRjZmJhZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-31T11:54:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-31T11:54:26Z"}, "message": "re PR middle-end/59990 (incorrect memcpy optimization)\n\n2014-01-31  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/59990\n\t* builtins.c (fold_builtin_memory_op): Make sure to not\n\tuse a floating-point mode or a boolean or enumeral type for\n\tthe copy operation.\n\n\t* gcc.dg/torture/pr59990.c: New testcase.\n\nFrom-SVN: r207338", "tree": {"sha": "10490efcd99d7b2f362558ef38f3c6b16634e18f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10490efcd99d7b2f362558ef38f3c6b16634e18f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "798888a05059cba666420de3607e19efab36b123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798888a05059cba666420de3607e19efab36b123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798888a05059cba666420de3607e19efab36b123"}], "stats": {"total": 94, "additions": 71, "deletions": 23}, "files": [{"sha": "bbf6b476f97f63acdb55b7c2bd31a87752ae15e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "patch": "@@ -1,3 +1,10 @@\n+2014-01-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/59990\n+\t* builtins.c (fold_builtin_memory_op): Make sure to not\n+\tuse a floating-point mode or a boolean or enumeral type for\n+\tthe copy operation.\n+\n 2014-01-30  DJ Delorie  <dj@redhat.com>\n \n \t* config/msp430/msp430.h (LIB_SPEC): Add -lcrt"}, {"sha": "f5f55bf0e2e60ffb009a4368573ec4fbb165ecd8", "filename": "gcc/builtins.c", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "patch": "@@ -8851,6 +8851,12 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n       if (!POINTER_TYPE_P (TREE_TYPE (src))\n \t  || !POINTER_TYPE_P (TREE_TYPE (dest)))\n \treturn NULL_TREE;\n+      /* In the following try to find a type that is most natural to be\n+\t used for the memcpy source and destination and that allows\n+\t the most optimization when memcpy is turned into a plain assignment\n+\t using that type.  In theory we could always use a char[len] type\n+\t but that only gains us that the destination and source possibly\n+\t no longer will have their address taken.  */\n       /* As we fold (void *)(p + CST) to (void *)p + CST undo this here.  */\n       if (TREE_CODE (src) == POINTER_PLUS_EXPR)\n \t{\n@@ -8886,6 +8892,41 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  || TREE_ADDRESSABLE (desttype))\n \treturn NULL_TREE;\n \n+      /* Make sure we are not copying using a floating-point mode or\n+         a type whose size possibly does not match its precision.  */\n+      if (FLOAT_MODE_P (TYPE_MODE (desttype))\n+\t  || TREE_CODE (desttype) == BOOLEAN_TYPE\n+\t  || TREE_CODE (desttype) == ENUMERAL_TYPE)\n+\t{\n+\t  /* A more suitable int_mode_for_mode would return a vector\n+\t     integer mode for a vector float mode or a integer complex\n+\t     mode for a float complex mode if there isn't a regular\n+\t     integer mode covering the mode of desttype.  */\n+\t  enum machine_mode mode = int_mode_for_mode (TYPE_MODE (desttype));\n+\t  if (mode == BLKmode)\n+\t    desttype = NULL_TREE;\n+\t  else\n+\t    desttype = build_nonstandard_integer_type (GET_MODE_BITSIZE (mode),\n+\t\t\t\t\t\t       1);\n+\t}\n+      if (FLOAT_MODE_P (TYPE_MODE (srctype))\n+\t  || TREE_CODE (srctype) == BOOLEAN_TYPE\n+\t  || TREE_CODE (srctype) == ENUMERAL_TYPE)\n+\t{\n+\t  enum machine_mode mode = int_mode_for_mode (TYPE_MODE (srctype));\n+\t  if (mode == BLKmode)\n+\t    srctype = NULL_TREE;\n+\t  else\n+\t    srctype = build_nonstandard_integer_type (GET_MODE_BITSIZE (mode),\n+\t\t\t\t\t\t      1);\n+\t}\n+      if (!srctype)\n+\tsrctype = desttype;\n+      if (!desttype)\n+\tdesttype = srctype;\n+      if (!srctype)\n+\treturn NULL_TREE;\n+\n       src_align = get_pointer_alignment (src);\n       dest_align = get_pointer_alignment (dest);\n       if (dest_align < TYPE_ALIGN (desttype)\n@@ -8899,29 +8940,6 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n       off0 = build_int_cst (build_pointer_type_for_mode (char_type_node,\n \t\t\t\t\t\t\t ptr_mode, true), 0);\n \n-      /* For -fsanitize={bool,enum} make sure the load isn't performed in\n-\t the bool or enum type.  */\n-      if (((flag_sanitize & SANITIZE_BOOL)\n-\t   && TREE_CODE (desttype) == BOOLEAN_TYPE)\n-\t  || ((flag_sanitize & SANITIZE_ENUM)\n-\t      && TREE_CODE (desttype) == ENUMERAL_TYPE))\n-\t{\n-\t  tree destitype\n-\t    = lang_hooks.types.type_for_mode (TYPE_MODE (desttype),\n-\t\t\t\t\t      TYPE_UNSIGNED (desttype));\n-\t  desttype = build_aligned_type (destitype, TYPE_ALIGN (desttype));\n-\t}\n-      if (((flag_sanitize & SANITIZE_BOOL)\n-\t   && TREE_CODE (srctype) == BOOLEAN_TYPE)\n-\t  || ((flag_sanitize & SANITIZE_ENUM)\n-\t      && TREE_CODE (srctype) == ENUMERAL_TYPE))\n-\t{\n-\t  tree srcitype\n-\t    = lang_hooks.types.type_for_mode (TYPE_MODE (srctype),\n-\t\t\t\t\t      TYPE_UNSIGNED (srctype));\n-\t  srctype = build_aligned_type (srcitype, TYPE_ALIGN (srctype));\n-\t}\n-\n       destvar = dest;\n       STRIP_NOPS (destvar);\n       if (TREE_CODE (destvar) == ADDR_EXPR"}, {"sha": "87fff131c64e0a0280c2c63b59d1ab8cce87ff96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "patch": "@@ -1,3 +1,8 @@\n+2014-01-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/59990\n+\t* gcc.dg/torture/pr59990.c: New testcase.\n+\n 2014-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lib/tsan-dg.exp (tsan_init): Try to run a trivial program,"}, {"sha": "e54f9b7efb06a90b75bd06bbbd9a79b790359744", "filename": "gcc/testsuite/gcc.dg/torture/pr59990.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59990.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfd537bcb069aacb9921c0567edcef7cf4cfbae/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59990.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59990.c?ref=fdfd537bcb069aacb9921c0567edcef7cf4cfbae", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+unsigned char value[4] = { 66, 9, 160, 255 };\n+\n+int main (void)\n+{\n+  volatile float f;\n+  unsigned char a[4];\n+\n+  __builtin_memcpy ((void *)&f, value, 4);\n+  __builtin_memcpy (a, (void *)&f, 4);\n+  if (a[2] != 160)\n+    abort ();\n+\n+  return 0;\n+}"}]}