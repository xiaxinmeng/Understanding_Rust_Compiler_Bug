{"sha": "9ea97097e5ae3d9979e6f72e44f72d665703bad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhOTcwOTdlNWFlM2Q5OTc5ZTZmNzJlNDRmNzJkNjY1NzAzYmFkOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-28T21:34:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-28T21:34:07Z"}, "message": "PR c++/71784 - ICE with ref-qualifier and explicit specialization.\n\n\t* pt.c (determine_specialization): Check ref-qualifier.\n\nFrom-SVN: r258085", "tree": {"sha": "6b946cb286f25b5f8a699f14fd501f60663cec2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b946cb286f25b5f8a699f14fd501f60663cec2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ea97097e5ae3d9979e6f72e44f72d665703bad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea97097e5ae3d9979e6f72e44f72d665703bad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea97097e5ae3d9979e6f72e44f72d665703bad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea97097e5ae3d9979e6f72e44f72d665703bad8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74fc2a2bb39b8dcf5deb81a24401a91f6d7f647f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fc2a2bb39b8dcf5deb81a24401a91f6d7f647f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fc2a2bb39b8dcf5deb81a24401a91f6d7f647f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "be9b3fdcdd3d9b019584a561eb20927d2137c73d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea97097e5ae3d9979e6f72e44f72d665703bad8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea97097e5ae3d9979e6f72e44f72d665703bad8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ea97097e5ae3d9979e6f72e44f72d665703bad8", "patch": "@@ -1,3 +1,8 @@\n+2018-02-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71784 - ICE with ref-qualifier and explicit specialization.\n+\t* pt.c (determine_specialization): Check ref-qualifier.\n+\n 2018-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/84609"}, {"sha": "73451195cd04232f973eca148b067e5a11f0b782", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea97097e5ae3d9979e6f72e44f72d665703bad8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea97097e5ae3d9979e6f72e44f72d665703bad8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9ea97097e5ae3d9979e6f72e44f72d665703bad8", "patch": "@@ -2163,10 +2163,17 @@ determine_specialization (tree template_id,\n \t     that the const qualification is the same.  Since\n \t     get_bindings does not try to merge the \"this\" parameter,\n \t     we must do the comparison explicitly.  */\n-\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n-\t      && !same_type_p (TREE_VALUE (fn_arg_types),\n-\t\t\t       TREE_VALUE (decl_arg_types)))\n-\t    continue;\n+\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n+\t    {\n+\t      if (!same_type_p (TREE_VALUE (fn_arg_types),\n+\t\t\t\tTREE_VALUE (decl_arg_types)))\n+\t\tcontinue;\n+\n+\t      /* And the ref-qualification.  */\n+\t      if (type_memfn_rqual (TREE_TYPE (decl))\n+\t\t  != type_memfn_rqual (TREE_TYPE (fn)))\n+\t\tcontinue;\n+\t    }\n \n \t  /* Skip the \"this\" parameter and, for constructors of\n \t     classes with virtual bases, the VTT parameter.  A\n@@ -2277,6 +2284,11 @@ determine_specialization (tree template_id,\n \t\t\t decl_arg_types))\n             continue;\n \n+\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n+\t      && (type_memfn_rqual (TREE_TYPE (decl))\n+\t\t  != type_memfn_rqual (TREE_TYPE (fn))))\n+\t    continue;\n+\n           // If the deduced arguments do not satisfy the constraints,\n           // this is not a candidate.\n           if (flag_concepts && !constraints_satisfied_p (fn))"}, {"sha": "aaa00b9cfc3de84c46262026ccdbffc76d36a322", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-qual18.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea97097e5ae3d9979e6f72e44f72d665703bad8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea97097e5ae3d9979e6f72e44f72d665703bad8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual18.C?ref=9ea97097e5ae3d9979e6f72e44f72d665703bad8", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/71784\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> struct A {\n+  template<typename U> void f(U const&) & { }\n+  template<typename U> void f(U const&) && { }\n+};\n+\n+template void A<int>::f<int>(int const&) &;\n+template void A<float>::f<int>(int const&) &&;\n+\n+template<typename T> struct B {\n+  void f(int const&) & { }\n+  void f(int const&) && { }\n+};\n+\n+template void B<int>::f(int const&) &;\n+template void B<float>::f(int const&) &&;"}]}