{"sha": "62be5d0aad9a968382ad5299f47189ca2a8faa59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiZTVkMGFhZDlhOTY4MzgyYWQ1Mjk5ZjQ3MTg5Y2EyYThmYWE1OQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2011-08-02T10:44:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T10:44:29Z"}, "message": "sem_ch5.adb (Analyze_Iteration_Scheme): Fix typo.\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iteration_Scheme): Fix typo.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Is_Variable): Add a new formal to\n\tdetermine if the analysis is performed using N or Original_Node (N).\n\t* exp_util.adb (Side_Effect_Free): Code cleanup since the new\n\tfunctionality of routine Is_Variable avoids code duplication.\n\t* checks.adb (Determine_Range): Handle temporaries generated by\n\tRemove_Side_Effects.\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Quantified_Expression): Force reanalysis and\n\texpansion of the condition. Required since the previous analysis was\n\tdone with expansion disabled (see Resolve_Quantified_Expression) and\n\thence checks were not inserted and record comparisons have not been\n\texpanded.\n\nFrom-SVN: r177132", "tree": {"sha": "fbed311c0a95314e3f81e2593c9221c9618513f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbed311c0a95314e3f81e2593c9221c9618513f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62be5d0aad9a968382ad5299f47189ca2a8faa59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62be5d0aad9a968382ad5299f47189ca2a8faa59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62be5d0aad9a968382ad5299f47189ca2a8faa59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62be5d0aad9a968382ad5299f47189ca2a8faa59/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a20f43891384a48d94b627d240db8f9db41dc78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20f43891384a48d94b627d240db8f9db41dc78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20f43891384a48d94b627d240db8f9db41dc78a"}], "stats": {"total": 128, "additions": 83, "deletions": 45}, "files": [{"sha": "c60ff137195716e55d9c28cfa9fb6ed5f2b9b0d8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -1,3 +1,25 @@\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iteration_Scheme): Fix typo.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Variable): Add a new formal to\n+\tdetermine if the analysis is performed using N or Original_Node (N).\n+\t* exp_util.adb (Side_Effect_Free): Code cleanup since the new\n+\tfunctionality of routine Is_Variable avoids code duplication.\n+\t* checks.adb (Determine_Range): Handle temporaries generated by\n+\tRemove_Side_Effects.\n+\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Quantified_Expression): Force reanalysis and\n+\texpansion of the condition. Required since the previous analysis was\n+\tdone with expansion disabled (see Resolve_Quantified_Expression) and\n+\thence checks were not inserted and record comparisons have not been\n+\texpanded.\n+\n 2011-08-02  Ed Falis  <falis@adacore.com>\n \n \t* s-taprop-vxworks.adb, s-intman-vxworks.adb, s-intman-vxworks.ads:"}, {"sha": "cfd5fc7a49bcbf624d7a12fc6b1b1007e22743a0", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -3087,6 +3087,20 @@ package body Checks is\n    --  Start of processing for Determine_Range\n \n    begin\n+      --  For temporary constants internally generated to remove side effects\n+      --  we must use the corresponding expression to determine the range of\n+      --  the expression.\n+\n+      if Is_Entity_Name (N)\n+        and then Nkind (Parent (Entity (N))) = N_Object_Declaration\n+        and then Ekind (Entity (N)) = E_Constant\n+        and then Is_Internal_Name (Chars (Entity (N)))\n+      then\n+         Determine_Range\n+           (Expression (Parent (Entity (N))), OK, Lo, Hi, Assume_Valid);\n+         return;\n+      end if;\n+\n       --  Prevent junk warnings by initializing range variables\n \n       Lo  := No_Uint;"}, {"sha": "09d9e75f59682dfc9028de36dcc7f2dea8b38328", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -7502,6 +7502,13 @@ package body Exp_Ch4 is\n \n       Cond := Relocate_Node (Condition (N));\n \n+      --  Reset flag analyzed in the condition to force its analysis. Required\n+      --  since the previous analysis was done with expansion disabled (see\n+      --  Resolve_Quantified_Expression) and hence checks were not inserted\n+      --  and record comparisons have not been expanded.\n+\n+      Reset_Analyzed_Flags (Cond);\n+\n       if Is_Universal then\n          Cond := Make_Op_Not (Loc, Cond);\n       end if;"}, {"sha": "9a5eef05b6e92a61618ab4cd9b95a00160f72fb4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -4692,32 +4692,12 @@ package body Exp_Util is\n \n          if Is_Entity_Name (N) then\n \n-            --  If the entity is a constant, it is definitely side effect free.\n-            --  Note that the test of Is_Variable (N) below might be expected\n-            --  to catch this case, but it does not, because this test goes to\n-            --  the original tree, and we may have already rewritten a variable\n-            --  node with a constant as a result of an earlier Force_Evaluation\n-            --  call.\n-\n-            if Ekind_In (Entity (N), E_Constant, E_In_Parameter) then\n-               return True;\n-\n-            --  Functions are not side effect free\n-\n-            elsif Ekind (Entity (N)) = E_Function then\n-               return False;\n-\n             --  Variables are considered to be a side effect if Variable_Ref\n             --  is set or if we have a volatile reference and Name_Req is off.\n             --  If Name_Req is True then we can't help returning a name which\n             --  effectively allows multiple references in any case.\n \n-            --  Need comment for Is_True_Constant test below ???\n-\n-            elsif Is_Variable (N)\n-               or else (Ekind (Entity (N)) = E_Variable\n-                          and then not Is_True_Constant (Entity (N)))\n-            then\n+            if Is_Variable (N, Use_Original_Node => False) then\n                return not Variable_Ref\n                  and then (not Is_Volatile_Reference (N) or else Name_Req);\n "}, {"sha": "b5cc34ee22daede97fb129cefa7e0ac98a223cf7", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -3574,20 +3574,21 @@ ada/sem_ch5.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/atree.adb ada/casing.ads ada/checks.ads ada/checks.adb \\\n    ada/csets.ads ada/debug.ads ada/debug_a.ads ada/einfo.ads ada/einfo.adb \\\n    ada/elists.ads ada/err_vars.ads ada/errout.ads ada/erroutc.ads \\\n-   ada/eval_fat.ads ada/exp_ch11.ads ada/exp_ch2.ads ada/exp_ch4.ads \\\n-   ada/exp_ch6.ads ada/exp_ch7.ads ada/exp_code.ads ada/exp_disp.ads \\\n-   ada/exp_pakd.ads ada/exp_tss.ads ada/exp_util.ads ada/expander.ads \\\n-   ada/fname.ads ada/freeze.ads ada/get_targ.ads ada/gnat.ads \\\n-   ada/g-hesorg.ads ada/g-htable.ads ada/hostparm.ads ada/interfac.ads \\\n-   ada/itypes.ads ada/lib.ads ada/lib-xref.ads ada/namet.ads ada/namet.adb \\\n-   ada/nlists.ads ada/nlists.adb ada/nmake.ads ada/nmake.adb ada/opt.ads \\\n-   ada/output.ads ada/par_sco.ads ada/restrict.ads ada/rident.ads \\\n-   ada/rtsfind.ads ada/scans.ads ada/sem.ads ada/sem_aggr.ads \\\n-   ada/sem_attr.ads ada/sem_aux.ads ada/sem_case.ads ada/sem_case.adb \\\n-   ada/sem_cat.ads ada/sem_ch13.ads ada/sem_ch3.ads ada/sem_ch4.ads \\\n-   ada/sem_ch5.ads ada/sem_ch5.adb ada/sem_ch6.ads ada/sem_ch8.ads \\\n-   ada/sem_disp.ads ada/sem_dist.ads ada/sem_elab.ads ada/sem_elim.ads \\\n-   ada/sem_eval.ads ada/sem_eval.adb ada/sem_intr.ads ada/sem_res.ads \\\n+   ada/eval_fat.ads ada/exp_aggr.ads ada/exp_ch11.ads ada/exp_ch2.ads \\\n+   ada/exp_ch4.ads ada/exp_ch6.ads ada/exp_ch7.ads ada/exp_code.ads \\\n+   ada/exp_disp.ads ada/exp_pakd.ads ada/exp_tss.ads ada/exp_util.ads \\\n+   ada/exp_util.adb ada/expander.ads ada/fname.ads ada/freeze.ads \\\n+   ada/get_targ.ads ada/gnat.ads ada/g-hesorg.ads ada/g-htable.ads \\\n+   ada/hostparm.ads ada/inline.ads ada/interfac.ads ada/itypes.ads \\\n+   ada/lib.ads ada/lib-xref.ads ada/namet.ads ada/namet.adb ada/nlists.ads \\\n+   ada/nlists.adb ada/nmake.ads ada/nmake.adb ada/opt.ads ada/output.ads \\\n+   ada/par_sco.ads ada/restrict.ads ada/rident.ads ada/rtsfind.ads \\\n+   ada/scans.ads ada/sem.ads ada/sem_aggr.ads ada/sem_attr.ads \\\n+   ada/sem_aux.ads ada/sem_case.ads ada/sem_case.adb ada/sem_cat.ads \\\n+   ada/sem_ch13.ads ada/sem_ch3.ads ada/sem_ch4.ads ada/sem_ch5.ads \\\n+   ada/sem_ch5.adb ada/sem_ch6.ads ada/sem_ch8.ads ada/sem_disp.ads \\\n+   ada/sem_dist.ads ada/sem_elab.ads ada/sem_elim.ads ada/sem_eval.ads \\\n+   ada/sem_eval.adb ada/sem_intr.ads ada/sem_prag.ads ada/sem_res.ads \\\n    ada/sem_res.adb ada/sem_type.ads ada/sem_util.ads ada/sem_util.adb \\\n    ada/sem_warn.ads ada/sem_warn.adb ada/sinfo.ads ada/sinfo.adb \\\n    ada/sinfo-cn.ads ada/sinput.ads ada/snames.ads ada/sprint.ads \\"}, {"sha": "4c6c9a26b55009dafe87b2149174560945ee52ad", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -1602,7 +1602,7 @@ package body Sem_Ch5 is\n             --  proper trace of the value, useful in optimizations that get rid\n             --  of junk range checks.\n \n-            if not Has_Call_Using_Secondary_Stack (N) then\n+            if not Has_Call_Using_Secondary_Stack (Original_Bound) then\n                Force_Evaluation (Original_Bound);\n                return Original_Bound;\n             end if;"}, {"sha": "8f285d78e49d78946478dcc6c385c6b51071befe", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -7508,14 +7508,11 @@ package body Sem_Util is\n    -- Is_Variable --\n    -----------------\n \n-   function Is_Variable (N : Node_Id) return Boolean is\n-\n-      Orig_Node : constant Node_Id := Original_Node (N);\n-      --  We do the test on the original node, since this is basically a test\n-      --  of syntactic categories, so it must not be disturbed by whatever\n-      --  rewriting might have occurred. For example, an aggregate, which is\n-      --  certainly NOT a variable, could be turned into a variable by\n-      --  expansion.\n+   function Is_Variable\n+     (N                 : Node_Id;\n+      Use_Original_Node : Boolean := True) return Boolean\n+   is\n+      Orig_Node : Node_Id;\n \n       function In_Protected_Function (E : Entity_Id) return Boolean;\n       --  Within a protected function, the private components of the enclosing\n@@ -7580,6 +7577,18 @@ package body Sem_Util is\n    --  Start of processing for Is_Variable\n \n    begin\n+      --  Check if we perform the test on the original node since this may be a\n+      --  test of syntactic categories which must not be disturbed by whatever\n+      --  rewriting might have occurred. For example, an aggregate, which is\n+      --  certainly NOT a variable, could be turned into a variable by\n+      --  expansion.\n+\n+      if Use_Original_Node then\n+         Orig_Node := Original_Node (N);\n+      else\n+         Orig_Node := N;\n+      end if;\n+\n       --  Definitely OK if Assignment_OK is set. Since this is something that\n       --  only gets set for expanded nodes, the test is on N, not Orig_Node.\n "}, {"sha": "6625d3fc8782df92127d2310a678a53d66c9c682", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62be5d0aad9a968382ad5299f47189ca2a8faa59/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=62be5d0aad9a968382ad5299f47189ca2a8faa59", "patch": "@@ -866,13 +866,18 @@ package Sem_Util is\n    --  object used to represent access-to-subprogram types. This is only\n    --  relevant to CIL, will always return false for other targets.\n \n-   function Is_Variable (N : Node_Id) return Boolean;\n+   function Is_Variable\n+     (N                 : Node_Id;\n+      Use_Original_Node : Boolean := True) return Boolean;\n    --  Determines if the tree referenced by N represents a variable, i.e. can\n    --  appear on the left side of an assignment. There is one situation (formal\n    --  parameters) in which non-tagged type conversions are also considered\n    --  variables, but Is_Variable returns False for such cases, since it has\n    --  no knowledge of the context. Note that this is the point at which\n    --  Assignment_OK is checked, and True is returned for any tree thus marked.\n+   --  Use_Original_Node is used to perform the test on Original_Node (N). By\n+   --  default is True since this routine is commonly invoked as part of the\n+   --  semantic analysis and it must not be disturbed by the rewriten nodes.\n \n    function Is_Visibly_Controlled (T : Entity_Id) return Boolean;\n    --  Check whether T is derived from a visibly controlled type. This is true"}]}