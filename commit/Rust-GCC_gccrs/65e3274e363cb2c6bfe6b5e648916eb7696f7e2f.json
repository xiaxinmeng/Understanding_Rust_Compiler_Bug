{"sha": "65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "node_id": "C_kwDOANBUbNoAKDY1ZTMyNzRlMzYzY2IyYzZiZmU2YjVlNjQ4OTE2ZWI3Njk2ZjdlMmY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-24T15:53:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-24T15:54:17Z"}, "message": "c, c++: Fix up excess precision handling of scalar_to_vector conversion [PR107358]\n\nAs mentioned earlier in the C++ excess precision support mail, the following\ntestcase is broken with excess precision both in C and C++ (though just in C++\nit was triggered in real-world code).\nscalar_to_vector is called in both FEs after the excess precision promotions\n(or stripping of EXCESS_PRECISION_EXPR), so we can then get invalid\ndiagnostics that say float vector + float involves truncation (on ia32\nfrom long double to float).\n\nThe following patch fixes that by calling scalar_to_vector on the operands\nbefore the excess precision promotions, let scalar_to_vector just do the\ndiagnostics (it does e.g. fold_for_warn so it will fold\nEXCESS_PRECISION_EXPR around REAL_CST to constants etc.) but will then\ndo the actual conversions using the excess precision promoted operands\n(so say if we have vector double + (float + float) we don't actually do\nvector double + (float) ((long double) float + (long double) float)\nbut\nvector double + (double) ((long double) float + (long double) float)\n\n2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107358\ngcc/c/\n\t* c-typeck.cc (build_binary_op): Pass operands before excess precision\n\tpromotions to scalar_to_vector call.\ngcc/cp/\n\t* typeck.cc (cp_build_binary_op): Pass operands before excess precision\n\tpromotions to scalar_to_vector call.\ngcc/testsuite/\n\t* c-c++-common/pr107358.c: New test.\n\t* g++.dg/cpp1y/pr68180.C: Remove -fexcess-precision=fast from\n\tdg-options.", "tree": {"sha": "6b9b50d26c3954f7255a51f41bca267b82e4adb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b9b50d26c3954f7255a51f41bca267b82e4adb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131d18e928a3ea1ab2d3bf61aa92d68a8a254609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131d18e928a3ea1ab2d3bf61aa92d68a8a254609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131d18e928a3ea1ab2d3bf61aa92d68a8a254609"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "92f3afc585751e7d692980311819f9ba6122808f", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "patch": "@@ -11995,8 +11995,8 @@ build_binary_op (location_t location, enum tree_code code,\n   if ((gnu_vector_type_p (type0) && code1 != VECTOR_TYPE)\n       || (gnu_vector_type_p (type1) && code0 != VECTOR_TYPE))\n     {\n-      enum stv_conv convert_flag = scalar_to_vector (location, code, op0, op1,\n-\t\t\t\t\t\t     true);\n+      enum stv_conv convert_flag = scalar_to_vector (location, code, orig_op0,\n+\t\t\t\t\t\t     orig_op1, true);\n \n       switch (convert_flag)\n \t{"}, {"sha": "530d260b1e8268c3a8051862d1dc3ff6789804a9", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "patch": "@@ -5191,6 +5191,8 @@ cp_build_binary_op (const op_location_t &location,\n \n   orig_type0 = type0 = TREE_TYPE (op0);\n   orig_type1 = type1 = TREE_TYPE (op1);\n+  tree non_ep_op0 = op0;\n+  tree non_ep_op1 = op1;\n \n   /* The expression codes of the data types of the arguments tell us\n      whether the arguments are integers, floating, pointers, etc.  */\n@@ -5303,8 +5305,9 @@ cp_build_binary_op (const op_location_t &location,\n   if ((gnu_vector_type_p (type0) && code1 != VECTOR_TYPE)\n       || (gnu_vector_type_p (type1) && code0 != VECTOR_TYPE))\n     {\n-      enum stv_conv convert_flag = scalar_to_vector (location, code, op0, op1,\n-\t\t\t\t\t\t     complain & tf_error);\n+      enum stv_conv convert_flag\n+\t= scalar_to_vector (location, code, non_ep_op0, non_ep_op1,\n+\t\t\t    complain & tf_error);\n \n       switch (convert_flag)\n         {"}, {"sha": "4ab75e064f89d3570a560ac4f94eb5f300526c49", "filename": "gcc/testsuite/c-c++-common/pr107358.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr107358.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr107358.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr107358.c?ref=65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "patch": "@@ -0,0 +1,30 @@\n+/* PR c++/107358 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fexcess-precision=standard\" } */\n+\n+typedef float __attribute__((vector_size (4 * sizeof (float)))) A;\n+typedef double __attribute__((vector_size (2 * sizeof (double)))) B;\n+\n+void\n+foo (A *x)\n+{\n+  *x = *x - 124.225514990f;\n+}\n+\n+void\n+bar (A *x, float y)\n+{\n+  *x = *x - y;\n+}\n+\n+void\n+baz (B *x)\n+{\n+  *x = *x + 124.225514990f;\n+}\n+\n+void\n+qux (B *x, double y)\n+{\n+  *x = *x + y;\n+}"}, {"sha": "9e6e5e984f9977ff53b4f7456a7823ee0cc5fb5e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr68180.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68180.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68180.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68180.C?ref=65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "patch": "@@ -1,6 +1,6 @@\n // PR c++/68180\n // { dg-do compile { target c++14 } }\n-// { dg-additional-options \"-Wno-psabi -fexcess-precision=fast\" }\n+// { dg-additional-options \"-Wno-psabi\" }\n \n typedef float __attribute__( ( vector_size( 16 ) ) ) float32x4_t;\n constexpr float32x4_t fill(float x) {"}]}