{"sha": "7168133a372e15373f3687d9b5e01ce24a954de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE2ODEzM2EzNzJlMTUzNzNmMzY4N2Q5YjVlMDFjZTI0YTk1NGRlOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-03-01T01:02:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-03-01T01:02:49Z"}, "message": "PR preprocessor/69985: fix ICE with long lines in -Wformat\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/69985\n\t* gcc.dg/cpp/pr69985.c: New test case.\n\nlibcpp/ChangeLog:\n\tPR preprocessor/69985\n\t(linemap_position_for_loc_and_offset): Rename param from \"offset\"\n\tto \"column_offset\".  Right-shift the column_offset by m_range_bits\n\tof the pertinent ordinary map whenever offsetting a\n\tsource_location.  For clarity, offset the column by the column\n\toffset, rather than the other way around.\n\nFrom-SVN: r233836", "tree": {"sha": "24b174cddca2c8a46a928dffe42c5c6b0c8718a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24b174cddca2c8a46a928dffe42c5c6b0c8718a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7168133a372e15373f3687d9b5e01ce24a954de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7168133a372e15373f3687d9b5e01ce24a954de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7168133a372e15373f3687d9b5e01ce24a954de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7168133a372e15373f3687d9b5e01ce24a954de9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3c7a94580c1ca9d78bc246be19750ebd047124f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c7a94580c1ca9d78bc246be19750ebd047124f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c7a94580c1ca9d78bc246be19750ebd047124f"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "50c4aa9e1f5a37041f02cc2ec41836af46b59512", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7168133a372e15373f3687d9b5e01ce24a954de9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7168133a372e15373f3687d9b5e01ce24a954de9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7168133a372e15373f3687d9b5e01ce24a954de9", "patch": "@@ -1,3 +1,8 @@\n+2016-02-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69985\n+\t* gcc.dg/cpp/pr69985.c: New test case.\n+\n 2016-02-29  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/70005"}, {"sha": "28f17e956a56459ce977767180e08c46b94c08c3", "filename": "gcc/testsuite/gcc.dg/cpp/pr69985.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7168133a372e15373f3687d9b5e01ce24a954de9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr69985.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7168133a372e15373f3687d9b5e01ce24a954de9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr69985.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr69985.c?ref=7168133a372e15373f3687d9b5e01ce24a954de9", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-options \"-Wformat\" } */\n+extern int printf (const char *__restrict __format, ...);\n+void test (void)\n+{\n+  /* A very long line, so that we start a new line map.  */\n+  printf (\"%llu01233456789012334567890123345678901233456789012334567890123345678901233456789012334567890123345678901233456789012334567890123345678901233456789\"); /* { dg-warning \"15: format .%llu. expects a matching\" } */\n+}"}, {"sha": "676272de0a888ca2519d97e0121979bc3ebe3274", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7168133a372e15373f3687d9b5e01ce24a954de9/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7168133a372e15373f3687d9b5e01ce24a954de9/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7168133a372e15373f3687d9b5e01ce24a954de9", "patch": "@@ -1,3 +1,12 @@\n+2016-02-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69985\n+\t(linemap_position_for_loc_and_offset): Rename param from \"offset\"\n+\tto \"column_offset\".  Right-shift the column_offset by m_range_bits\n+\tof the pertinent ordinary map whenever offsetting a\n+\tsource_location.  For clarity, offset the column by the column\n+\toffset, rather than the other way around.\n+\n 2016-02-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69126"}, {"sha": "264ae2097b25acfa500a03e85ac37bb8987ab469", "filename": "libcpp/line-map.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7168133a372e15373f3687d9b5e01ce24a954de9/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7168133a372e15373f3687d9b5e01ce24a954de9/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=7168133a372e15373f3687d9b5e01ce24a954de9", "patch": "@@ -864,13 +864,13 @@ linemap_position_for_line_and_column (line_maps *set,\n }\n \n /* Encode and return a source_location starting from location LOC and\n-   shifting it by OFFSET columns.  This function does not support\n+   shifting it by COLUMN_OFFSET columns.  This function does not support\n    virtual locations.  */\n \n source_location\n linemap_position_for_loc_and_offset (struct line_maps *set,\n \t\t\t\t     source_location loc,\n-\t\t\t\t     unsigned int offset)\n+\t\t\t\t     unsigned int column_offset)\n {\n   const line_map_ordinary * map = NULL;\n \n@@ -882,7 +882,7 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n       (!linemap_location_from_macro_expansion_p (set, loc)))\n     return loc;\n \n-  if (offset == 0\n+  if (column_offset == 0\n       /* Adding an offset to a reserved location (like\n \t UNKNOWN_LOCATION for the C/C++ FEs) does not really make\n \t sense.  So let's leave the location intact in that case.  */\n@@ -894,7 +894,7 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n   /* The new location (loc + offset) should be higher than the first\n      location encoded by MAP.  This can fail if the line information\n      is messed up because of line directives (see PR66415).  */\n-  if (MAP_START_LOCATION (map) >= loc + offset)\n+  if (MAP_START_LOCATION (map) >= loc + (column_offset << map->m_range_bits))\n     return loc;\n \n   linenum_type line = SOURCE_LINE (map, loc);\n@@ -905,7 +905,8 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n      the next line map of the set.  Otherwise, we try to encode the\n      location in the next map.  */\n   while (map != LINEMAPS_LAST_ORDINARY_MAP (set)\n-\t && loc + offset >= MAP_START_LOCATION (&map[1]))\n+\t && (loc + (column_offset << map->m_range_bits)\n+\t     >= MAP_START_LOCATION (&map[1])))\n     {\n       map = &map[1];\n       /* If the next map starts in a higher line, we cannot encode the\n@@ -914,12 +915,12 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n \treturn loc;\n     }\n \n-  offset += column;\n-  if (linemap_assert_fails (offset < (1u << map->m_column_and_range_bits)))\n+  column += column_offset;\n+  if (linemap_assert_fails (column < (1u << map->m_column_and_range_bits)))\n     return loc;\n \n   source_location r = \n-    linemap_position_for_line_and_column (set, map, line, offset);\n+    linemap_position_for_line_and_column (set, map, line, column);\n   if (linemap_assert_fails (r <= set->highest_location)\n       || linemap_assert_fails (map == linemap_lookup (set, r)))\n     return loc;"}]}