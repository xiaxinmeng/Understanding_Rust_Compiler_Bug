{"sha": "b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "node_id": "C_kwDOANBUbNoAKGI1YzNkZDNkZjM4MTg5NmIwOWZhNzZiNTJjZDdhNDliOWIyNGFmYjM", "commit": {"author": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-07-03T01:22:30Z"}, "committer": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-07-03T01:26:05Z"}, "message": "Use fixed-width types in allocation size tests\n\nThe patch changes the types inside the tests for the allocation size\nchecker to fixed-width types of stdint.h to account for different\narchitectures with different type widths.\n\n2022-07-03  Tim Lange  <mail@tim-lange.me>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/analyzer/allocation-size-1.c: Use fixed-length types.\n\t* gcc.dg/analyzer/allocation-size-2.c: Likewise.\n\t* gcc.dg/analyzer/allocation-size-3.c: Likewise.\n\t* gcc.dg/analyzer/allocation-size-4.c: Likewise.\n\t* gcc.dg/analyzer/allocation-size-5.c: Likewise.", "tree": {"sha": "b534b104b06082b0f68b60c9b6a0d28358f5d918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b534b104b06082b0f68b60c9b6a0d28358f5d918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/comments", "author": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86a20ee8bed8840d39ab781c935a411e28fa0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86a20ee8bed8840d39ab781c935a411e28fa0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86a20ee8bed8840d39ab781c935a411e28fa0b6"}], "stats": {"total": 189, "additions": 97, "deletions": 92}, "files": [{"sha": "4a78a81d054b9461548d04ee15708169aa87f746", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-1.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-1.c?ref=b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "patch": "@@ -1,79 +1,80 @@\n #include <stdlib.h>\n #include <stdio.h>\n+#include <stdint.h>\n \n /* Tests with constant buffer sizes.  */\n \n void test_1 (void)\n {\n-  short *ptr = malloc (21 * sizeof (short));\n+  int16_t *ptr = malloc (21 * sizeof (int16_t));\n   free (ptr);\n }\n \n void test_2 (void)\n {\n-  int *ptr = malloc (21 * sizeof (short)); /* { dg-line malloc2 } */\n+  int32_t *ptr = malloc (21 * sizeof (int16_t)); /* { dg-line malloc2 } */\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc2 } */\n-  /* { dg-message \"\\\\d+ bytes\" \"note\" { target *-*-* } malloc2 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc2 } */\n+  /* { dg-message \"42 bytes\" \"note\" { target *-*-* } malloc2 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } malloc2 } */\n }\n \n void test_3 (void)\n {\n-  void *ptr = malloc (21 * sizeof (short));\n-  short *sptr = (short *)ptr;\n+  void *ptr = malloc (21 * sizeof (int16_t));\n+  int16_t *sptr = (int16_t *)ptr;\n   free (sptr);\n }\n \n void test_4 (void)\n {\n-  void *ptr = malloc (21 * sizeof (short)); /* { dg-message \"\\\\d+ bytes\" } */\n-  int *iptr = (int *)ptr; /* { dg-line assign4 } */\n+  void *ptr = malloc (21 * sizeof (int16_t)); /* { dg-message \"42 bytes\" } */\n+  int32_t *iptr = (int32_t *)ptr; /* { dg-line assign4 } */\n   free (iptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign4 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign4 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign4 } */\n }\n \n void test_5 (void)\n {\n-  int user_input;\n+  int32_t user_input;\n   scanf(\"%i\", &user_input);\n-  int n;\n+  int32_t n;\n   if (user_input == 0)\n-    n = 21 * sizeof (short);\n+    n = 21 * sizeof (int16_t);\n   else\n-    n = 42 * sizeof (short);\n+    n = 42 * sizeof (int16_t);\n   void *ptr = malloc (n);\n-  short *sptr = (short *)ptr;\n+  int16_t *sptr = (int16_t *)ptr;\n   free (sptr);\n }\n \n void test_6 (void)\n {\n-  int user_input;\n+  int32_t user_input;\n   scanf(\"%i\", &user_input);\n-  int n;\n+  int32_t n;\n   if (user_input == 0)\n-    n = 21 * sizeof (short);\n+    n = 21 * sizeof (int16_t);\n   else\n-    n = 42 * sizeof (short);\n+    n = 42 * sizeof (int16_t);\n   void *ptr = malloc (n); /* { dg-message \"\" \"note\" } */\n                           /* ^^^ on widening_svalues no expr is returned\n                                  by get_representative_tree at the moment.  */ \n-  int *iptr = (int *)ptr; /* { dg-line assign6 } */\n+  int32_t *iptr = (int32_t *)ptr; /* { dg-line assign6 } */\n   free (iptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign6 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign6 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign6 } */\n }\n \n void test_7 (void)\n {\n-  int user_input;\n+  int32_t user_input;\n   scanf(\"%i\", &user_input);\n-  int n;\n+  int32_t n;\n   if (user_input == 0)\n     n = 1;\n   else if (user_input == 2)\n@@ -82,18 +83,18 @@ void test_7 (void)\n     n = 7;\n   /* n is an unknown_svalue at this point.  */\n   void *ptr = malloc (n);\n-  int *iptr = (int *)ptr;\n+  int32_t *iptr = (int32_t *)ptr;\n   free (iptr);\n }\n \n-void *create_buffer (int n)\n+void *create_buffer (int32_t n)\n {\n   return malloc(n);\n }\n \n void test_8 (void) \n {\n-  int *buf = create_buffer(4 * sizeof (int));\n+  int32_t *buf = create_buffer(4 * sizeof (int));\n   free (buf);\n }\n \n@@ -105,11 +106,11 @@ void test_9 (void)\n      impl_region_model_context::warn. To ensure that the indentation\n      in the diagnostic is right, the warning has to be emitted on an EN\n      that is after the return edge.  */\n-  int *buf = create_buffer(42); /* { dg-warning \"\" \"\" { xfail *-*-* } } */\n+  int32_t *buf = create_buffer(42); /* { dg-warning \"\" \"\" { xfail *-*-* } } */\n   free (buf);\n }\n \n-void test_10 (int n)\n+void test_10 (int32_t n)\n {\n   char *ptr = malloc (7 * n);\n   free (ptr);"}, {"sha": "d541d5ef8dbe7fcf4e7836767e7653f373b220a0", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-2.c", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-2.c?ref=b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "patch": "@@ -1,60 +1,61 @@\n #include <stdlib.h>\n #include <stdio.h>\n+#include <stdint.h>\n \n /* Tests with symbolic buffer sizes.  */\n \n-void test_1 (int n)\n+void test_1 (int32_t n)\n {\n-  short *ptr = malloc (n * sizeof (short));\n+  int16_t *ptr = malloc (n * sizeof (int16_t));\n   free (ptr);\n }\n \n-void test_2 (int n)\n+void test_2 (int32_t n)\n {\n-  int *ptr = malloc (n * sizeof (short)); /* { dg-line malloc2 } */\n+  int32_t *ptr = malloc (n * sizeof (int16_t)); /* { dg-line malloc2 } */\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc2 } */\n   /* { dg-message \"'\\[a-z0-9\\\\*\\\\(\\\\)\\\\s\\]*' bytes\" \"note\" { target *-*-* } malloc2 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc2 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4\" \"note\" { target *-*-* } malloc2 } */\n }\n \n-void test_3 (int n)\n+void test_3 (int32_t n)\n {\n-  void *ptr = malloc (n * sizeof (short));\n-  short *sptr = (short *)ptr;\n+  void *ptr = malloc (n * sizeof (int16_t));\n+  int16_t *sptr = (int16_t *)ptr;\n   free (sptr);\n }\n \n-void test_4 (int n)\n+void test_4 (int32_t n)\n {\n-  void *ptr = malloc (n * sizeof (short)); /* { dg-message \"'\\[a-z0-9\\\\*\\\\(\\\\)\\\\s\\]*'\" \"note\" } */\n-  int *iptr = (int *)ptr; /* { dg-line assign4 } */\n+  void *ptr = malloc (n * sizeof (int16_t)); /* { dg-message \"'\\[a-z0-9\\\\*\\\\(\\\\)\\\\s\\]*'\" \"note\" } */\n+  int32_t *iptr = (int32_t *)ptr; /* { dg-line assign4 } */\n   free (iptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign4 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign4 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign4 } */\n }\n \n void test_5 (void)\n {\n-  int user_input;\n+  int32_t user_input;\n   scanf(\"%i\", &user_input);\n-  int n;\n+  int32_t n;\n   if (user_input == 0)\n-    n = 3 * user_input * sizeof (short);\n+    n = 3 * user_input * sizeof (int16_t);\n   else\n-    n = 5 * user_input * sizeof (short);\n+    n = 5 * user_input * sizeof (int16_t);\n   void *ptr = malloc (n);\n-  short *sptr = (short *)ptr;\n+  int16_t *sptr = (int16_t *)ptr;\n   free (sptr);\n }\n \n void test_6 (void)\n {\n-  int user_input;\n+  int32_t user_input;\n   scanf(\"%i\", &user_input);\n-  int n;\n+  int32_t n;\n   if (user_input == 0)\n     n = user_input;\n   else if (user_input == 2)\n@@ -63,56 +64,56 @@ void test_6 (void)\n     n = user_input * 5;\n   /* n is an unknown_svalue at this point.  */\n   void *ptr = malloc (n);\n-  int *iptr = (int *)ptr;\n+  int32_t *iptr = (int32_t *)ptr;\n   free (iptr);\n }\n \n-void *create_buffer(int n)\n+void *create_buffer(int32_t n)\n {\n   return malloc(n);\n }\n \n-void test_7(int n) \n+void test_7(int32_t n) \n {\n-  int *buf = create_buffer(n * sizeof (int));\n+  int32_t *buf = create_buffer(n * sizeof (int32_t));\n   free (buf);\n }\n \n-void test_8(int n) \n+void test_8(int32_t n) \n {\n   /* FIXME: At the moment, region_model::set_value (lhs, <return_value>)\n      is called at the src_node of the return edge. This edge has no stmts\n      associated with it, leading to a rejection of the warning inside\n      impl_region_model_context::warn. To ensure that the indentation\n      in the diagnostic is right, the warning has to be emitted on an EN\n      that is after the return edge.  */\n-  int *buf = create_buffer(n * sizeof(short)); /* { dg-warning \"\" \"\" { xfail *-*-* } } */\n+  int32_t *buf = create_buffer(n * sizeof(int16_t)); /* { dg-warning \"\" \"\" { xfail *-*-* } } */\n   free (buf);\n }\n \n void test_9 (void)\n {\n-  int n;\n+  int32_t n;\n   scanf(\"%i\", &n);\n   /* n is a conjured_svalue.  */\n   void *ptr = malloc (n); /* { dg-message \"'n' bytes\" \"note\" } */\n-  int *iptr = (int *)ptr; /* { dg-line assign9 } */\n+  int32_t *iptr = (int32_t *)ptr; /* { dg-line assign9 } */\n   free (iptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign9 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign9 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign9 } */\n }\n \n void test_11 (void)\n {\n-  int n;\n+  int32_t n;\n   scanf(\"%i\", &n);\n   void *ptr = malloc (n);\n-  if (n == sizeof (int))\n+  if (n == sizeof (int32_t))\n     {\n       /* n is a conjured_svalue but guarded such that we\n          know the value is a multiple of sizeof (*iptr).  */\n-      int *iptr = (int *)ptr;\n+      int32_t *iptr = (int32_t *)ptr;\n       free (iptr);\n     }\n   else\n@@ -121,33 +122,33 @@ void test_11 (void)\n \n void test_12 (void)\n {\n-  int n;\n+  int32_t n;\n   scanf(\"%i\", &n);\n   void *ptr = malloc (n); /* { dg-message \"'n' bytes\" } */\n   if (n == 5)\n     {\n       /* n is a conjured_svalue but guarded such that we\n          know the value isn't a multiple of sizeof (*iptr).  */\n-      int *iptr = (int *)ptr; /* { dg-line assign12 } */\n+      int32_t *iptr = (int32_t *)ptr; /* { dg-line assign12 } */\n       free (iptr);\n     }\n   else\n     free (ptr);\n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign12 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign12 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign12 } */\n }\n \n void test_13 (void)\n {\n-  int n;\n+  int32_t n;\n   scanf(\"%i\", &n);\n   void *ptr = malloc (n);\n   if (n == n * n)\n     {\n       /* n is a conjured_svalue but guarded such that we don't have an\n          equivalence class for it. In such cases, we assume that the\n          condition ensures that the value is okay.  */\n-      int *iptr = (int *)ptr;\n+      int32_t *iptr = (int32_t *)ptr;\n       free (iptr);\n     }\n   else"}, {"sha": "012dbbe81ce72ea0413a12416e7a6c3e243474ce", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-3.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-3.c?ref=b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "patch": "@@ -1,10 +1,11 @@\n #include <stdlib.h>\n #include <stdio.h>\n+#include <stdint.h>\n \n /* CWE-131 example 5 */\n void test_1 (void) \n {\n-  int *id_sequence = (int *) malloc (3); /* { dg-line malloc1 } */\n+  int32_t *id_sequence = (int32_t *) malloc (3); /* { dg-line malloc1 } */\n   if (id_sequence == NULL) exit (1);\n \n   id_sequence[0] = 13579;\n@@ -14,32 +15,32 @@ void test_1 (void)\n   free (id_sequence);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc1 } */\n-  /* { dg-message \"\\\\d+ bytes\" \"note\" { target *-*-* } malloc1 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc1 } */\n+  /* { dg-message \"3 bytes\" \"note\" { target *-*-* } malloc1 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } malloc1 } */\n }\n \n void test_2 (void)\n {\n-  int *ptr = malloc (10 + sizeof(int)); /* { dg-line malloc2 } */\n+  int32_t *ptr = malloc (10 + sizeof(int32_t)); /* { dg-line malloc2 } */\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc2 } */\n-  /* { dg-message \"\\\\d+ bytes\" \"note\" { target *-*-* } malloc2 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc2 } */\n+  /* { dg-message \"14 bytes\" \"note\" { target *-*-* } malloc2 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } malloc2 } */\n }\n \n-void test_3 (int n)\n+void test_3 (int32_t n)\n {\n-  int *ptr = malloc (n + sizeof (int)); /* { dg-line malloc3 } */\n+  int32_t *ptr = malloc (n + sizeof (int32_t)); /* { dg-line malloc3 } */\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc3 } */\n   /* { dg-message \"'\\[a-z0-9\\\\+\\\\(\\\\)\\\\s\\]*' bytes\" \"note\" { target *-*-* } malloc3 } */\n-  /* { dg-message \"'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc3 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } malloc3 } */\n }\n \n-void test_4 (int n, int m)\n+void test_4 (int32_t n, int32_t m)\n {\n-  int *ptr = malloc ((n + m) * sizeof (int));\n+  int32_t *ptr = malloc ((n + m) * sizeof (int32_t));\n   free (ptr);\n }"}, {"sha": "90df687651145fb5e61d984ef85b3ddefa713d2a", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-4.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-4.c?ref=b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "patch": "@@ -1,18 +1,19 @@\n #include <stdlib.h>\n+#include <stdint.h>\n \n /* Tests related to structs.  */\n \n struct base {\n-  int i;\n+  int16_t i;\n };\n \n struct sub {\n   struct base b;\n-  int j;\n+  int16_t j;\n };\n \n struct var_len {\n-  int i;\n+  int16_t i;\n   char arr[];\n };\n \n@@ -25,12 +26,12 @@ void test_1 (void)\n \n void test_2 (void)\n {\n-  long *ptr = malloc (5 * sizeof (struct base));  /* { dg-line malloc2 } */\n+  int32_t *ptr = malloc (5 * sizeof (struct base));  /* { dg-line malloc2 } */\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc2 } */\n   /* { dg-message \"\\\\d+ bytes\" \"note\" { target *-*-* } malloc2 } */\n-  /* { dg-message \"'long (int)? \\\\*' here; 'sizeof \\\\(long (int)?\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc2 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } malloc2 } */\n }\n \n void test_3 (void)\n@@ -51,10 +52,10 @@ void test_5 (void)\n {\n   /* For constant sizes, we warn if the buffer\n      is too small to hold a single struct.  */\n-  struct base *ptr = malloc (2);  /* { dg-line malloc5 } */\n+  struct base *ptr = malloc (1);  /* { dg-line malloc5 } */\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc5 } */\n-  /* { dg-message \"\\\\d+ bytes\" \"note\" { target *-*-* } malloc5 } */\n+  /* { dg-message \"1 bytes\" \"note\" { target *-*-* } malloc5 } */\n   /* { dg-message \"'struct base \\\\*' here; 'sizeof \\\\(struct base\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc5 } */\n }"}, {"sha": "5b92f1970475ed7113a0481d026efdf93880becf", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-5.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c3dd3df381896b09fa76b52cd7a49b9b24afb3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-5.c?ref=b5c3dd3df381896b09fa76b52cd7a49b9b24afb3", "patch": "@@ -1,36 +1,37 @@\n #include <stdlib.h>\n #include <stdio.h>\n+#include <stdint.h>\n \n /* Tests related to statically allocated buffers.  */\n \n typedef struct a {\n-  short s;\n+  int16_t s;\n } a;\n \n-int *test_1 (void)\n+int32_t *test_1 (void)\n {\n   a A; /* { dg-message \"\\\\d+ bytes\" \"note\" } */\n   A.s = 1;\n-  int *ptr = (int *) &A; /* { dg-line assign1 } */\n+  int32_t *ptr = (int32_t *) &A; /* { dg-line assign1 } */\n   return ptr;\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign1 } */\n-  /* { dg-message \"assigned to 'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign1 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign1 } */\n }\n \n-int *test2 (void)\n+int32_t *test2 (void)\n {\n-  char arr[sizeof (int)];\n-  int *ptr = (int *)arr;\n+  char arr[sizeof (int32_t)];\n+  int32_t *ptr = (int32_t *)arr;\n   return ptr;\n }\n \n-int *test3 (void)\n+int32_t *test3 (void)\n {\n-  char arr[sizeof (short)]; /* { dg-message \"\\\\d+ bytes\" \"note\" } */\n-  int *ptr = (int *)arr; /* { dg-line assign3 } */\n+  char arr[sizeof (int16_t)]; /* { dg-message \"\\\\d+ bytes\" \"note\" } */\n+  int32_t *ptr = (int32_t *)arr; /* { dg-line assign3 } */\n   return ptr;\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } assign3 } */\n-  /* { dg-message \"assigned to 'int \\\\*' here; 'sizeof \\\\(int\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } assign3 } */\n+  /* { dg-message \"'int32_t \\\\*' (\\\\\\{aka 'int \\\\*'\\\\\\})? here; 'sizeof \\\\(int32_t (\\\\\\{aka int\\\\\\})?\\\\)' is '4'\" \"note\" { target *-*-* } assign3 } */\n }"}]}