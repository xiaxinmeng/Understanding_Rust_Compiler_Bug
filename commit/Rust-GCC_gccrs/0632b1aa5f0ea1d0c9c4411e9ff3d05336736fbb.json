{"sha": "0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb", "node_id": "C_kwDOANBUbNoAKDA2MzJiMWFhNWYwZWExZDBjOWM0NDExZTlmZjNkMDUzMzY3MzZmYmI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-28T19:06:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-28T19:06:19Z"}, "message": "Merge #1415\n\n1415: Add generic `StackedContexts<T>` type r=CohenArthur a=CohenArthur\n\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "60a7e720e153695f37ee378c88f8a83b39b62611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60a7e720e153695f37ee378c88f8a83b39b62611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4t4rCRBK7hj4Ov3rIwAAj6sIAI0CQj7C0CpbZaUfGfzOO8tF\nBU6h7xI8iJlygsKHyOljpaBhCVyB4NNJl5GI2YyTlTpCLGVfo5WXa4+e5ExbLC0o\nbwfVXL3B1aCNiissaYgdjR39sTFjroWx0UJCZLmV3ejqPg4OPYV8tRqeA8YXRfSs\ntOMohV1z/tWCA6jwbvLF31VRRp+lFVbYzt5hcTTzjBzSPGR0WdTSYNcvyWl2GyKC\nG2xTJllg4moGeJHIkSfTFma6F3X0o5PL8rilwZDcJPt8iUy2t3hUV6lnUEPQOizk\ntWN5REk/KK2ezbPQSCIbbrdXlXbYGbos45cfx7kIg423eesrBji+RoLanLs4TXE=\n=QW/y\n-----END PGP SIGNATURE-----\n", "payload": "tree 60a7e720e153695f37ee378c88f8a83b39b62611\nparent 6d5eb739f069e41a8789c15b199893acf06915a8\nparent 957e6180e12245719602597984a499485e2c758a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1659035179 +0000\ncommitter GitHub <noreply@github.com> 1659035179 +0000\n\nMerge #1415\n\n1415: Add generic `StackedContexts<T>` type r=CohenArthur a=CohenArthur\n\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d5eb739f069e41a8789c15b199893acf06915a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d5eb739f069e41a8789c15b199893acf06915a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d5eb739f069e41a8789c15b199893acf06915a8"}, {"sha": "957e6180e12245719602597984a499485e2c758a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957e6180e12245719602597984a499485e2c758a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957e6180e12245719602597984a499485e2c758a"}], "stats": {"total": 58, "additions": 9, "deletions": 49}, "files": [{"sha": "0d1e0e928e1a97e27347417ab9529345e58ea777", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb", "patch": "@@ -65,7 +65,7 @@ check_extern_static (HIR::ExternalItem *maybe_static, Location locus)\n void\n UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n {\n-  if (is_unsafe_context ())\n+  if (unsafe_context.is_in_context ())\n     return;\n \n   auto maybe_static_mut = mappings.lookup_hir_item (node_id);\n@@ -79,29 +79,6 @@ UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n \t\t\t locus);\n }\n \n-void\n-UnsafeChecker::push_unsafe (HirId id)\n-{\n-  unsafe_contexts.emplace_back (id);\n-}\n-\n-HirId\n-UnsafeChecker::pop_unsafe ()\n-{\n-  rust_assert (!unsafe_contexts.empty ());\n-\n-  auto last = unsafe_contexts.back ();\n-  unsafe_contexts.pop_back ();\n-\n-  return last;\n-}\n-\n-bool\n-UnsafeChecker::is_unsafe_context ()\n-{\n-  return !unsafe_contexts.empty ();\n-}\n-\n void\n UnsafeChecker::visit (IdentifierExpr &ident_expr)\n {\n@@ -183,7 +160,7 @@ UnsafeChecker::visit (DereferenceExpr &expr)\n   rust_assert (context.lookup_type (to_deref, &to_deref_type));\n \n   if (to_deref_type->get_kind () == TyTy::TypeKind::POINTER\n-      && !is_unsafe_context ())\n+      && !unsafe_context.is_in_context ())\n     rust_error_at (expr.get_locus (), \"dereference of raw pointer requires \"\n \t\t\t\t      \"unsafe function or block\");\n }\n@@ -334,7 +311,7 @@ UnsafeChecker::visit (FieldAccessExpr &expr)\n {\n   expr.get_receiver_expr ()->accept_vis (*this);\n \n-  if (is_unsafe_context ())\n+  if (unsafe_context.is_in_context ())\n     return;\n \n   TyTy::BaseType *receiver_ty;\n@@ -427,11 +404,11 @@ UnsafeChecker::visit (ReturnExpr &expr)\n void\n UnsafeChecker::visit (UnsafeBlockExpr &expr)\n {\n-  push_unsafe (expr.get_mappings ().get_hirid ());\n+  unsafe_context.enter (expr.get_mappings ().get_hirid ());\n \n   expr.get_block_expr ()->accept_vis (*this);\n \n-  pop_unsafe ();\n+  unsafe_context.exit ();\n }\n \n void\n@@ -595,12 +572,12 @@ UnsafeChecker::visit (Function &function)\n   auto is_unsafe_fn = function.get_qualifiers ().is_unsafe ();\n \n   if (is_unsafe_fn)\n-    push_unsafe (function.get_mappings ().get_hirid ());\n+    unsafe_context.enter (function.get_mappings ().get_hirid ());\n \n   function.get_definition ()->accept_vis (*this);\n \n   if (is_unsafe_fn)\n-    pop_unsafe ();\n+    unsafe_context.exit ();\n }\n \n void"}, {"sha": "b9d06ef33d1a0db703967d61762c3540a231ff9e", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=0632b1aa5f0ea1d0c9c4411e9ff3d05336736fbb", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-hir-visitor.h\"\n #include \"rust-name-resolver.h\"\n #include \"rust-hir-type-check.h\"\n+#include \"rust-stacked-contexts.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -33,31 +34,13 @@ class UnsafeChecker : public HIRFullVisitor\n   void go (HIR::Crate &crate);\n \n private:\n-  /* Stack of unsafe contexts */\n-  std::vector<HirId> unsafe_contexts;\n-\n-  /**\n-   * Add an unsafe context to the stack. To call when entering unsafe blocks\n-   */\n-  void push_unsafe (HirId id);\n-\n-  /**\n-   * Remove an unsafe context from the stack. Call this when exiting unsafe\n-   * blocks\n-   */\n-  HirId pop_unsafe ();\n-\n-  /**\n-   * Are we currently in an unsafe context or not\n-   */\n-  bool is_unsafe_context ();\n-\n   /**\n    * Check if a mutable static or external static item is used outside of an\n    * unsafe context\n    */\n   void check_use_of_static (HirId node_id, Location locus);\n \n+  StackedContexts<HirId> unsafe_context;\n   Resolver::TypeCheckContext &context;\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;"}]}