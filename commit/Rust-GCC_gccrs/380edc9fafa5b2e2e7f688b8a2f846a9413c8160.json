{"sha": "380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwZWRjOWZhZmE1YjJlMmU3ZjY4OGI4YTJmODQ2YTk0MTNjODE2MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-01T20:20:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-01T20:20:09Z"}, "message": "i386.md (rex64suffix): New mode attribute.\n\n        * config/i386/i386.md (rex64suffix): New mode attribute.\n        (floathi<mode>2): Disable expander for SSE math.\n        (*floathi<mode>2_1): New insn insn_and_split pattern.\n        (*floathi<mode>2_i387_with_temp): New macroized instruction pattern and\n        corresponding post-reload splitters.\n        (*floathi<mode>2_i387): New macroized insn pattern.\n        (float<SSEMODEI24:mode><X87MODEF:mode>2): New macroized expander.\n        (*float<SSEMODEI24:mode><X87MODEF:mode>2_1): New macroized\n        insn_and_split pattern.\n        (*floatsi<mode>2_vector_mixed_with_temp, *floatsi<mode>2_vector_mixed):\n        New macroized instruction patterns and corresponding post-reload\n        splitters.\n        (*floatsi<mode>2_mixed_with_temp): New macroized instruction pattern\n        and corresponding post-reload splitters.\n        (*floatsi<mode>2_mixed_interunit, *floatsi<mode>2_mixed_nointerunit):\n        New macroized instruction patterns.\n        (*floatsi<mode>2_vector_sse_with_temp, *floatsi<mode>2_vector_sse): New\n        macroized instruction patterns and corresponding post-reload splitters.\n        (*floatsi<mode>2_sse_with_temp): New macroized instruction pattern and\n        corresponding post-reload splitters.\n        (*floatsi<mode>2_sse_interunit, *floatsi<mode>2_mixed_nointerunit):\n        New macroized instruction patterns.\n        (*floatsi<mode>2_i387_with_temp): New macroized instruction pattern and\n        corresponding post-reload splitters.\n        (*floatsi<mode>2_i387): New macroized instruction patterns.\n\nFrom-SVN: r133798", "tree": {"sha": "e81b34711eb49306f5301da9844a94bc489a9a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e81b34711eb49306f5301da9844a94bc489a9a92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380edc9fafa5b2e2e7f688b8a2f846a9413c8160/comments", "author": null, "committer": null, "parents": [{"sha": "78e8956be7341fa4e60420e762b4c8e24cf58eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e8956be7341fa4e60420e762b4c8e24cf58eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e8956be7341fa4e60420e762b4c8e24cf58eef"}], "stats": {"total": 884, "additions": 434, "deletions": 450}, "files": [{"sha": "693ea09f3e1dd4435da21a86b03c4404240ea9ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380edc9fafa5b2e2e7f688b8a2f846a9413c8160/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380edc9fafa5b2e2e7f688b8a2f846a9413c8160/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "patch": "@@ -1,3 +1,31 @@\n+2008-04-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (rex64suffix): New mode attribute.\n+\t(floathi<mode>2): Disable expander for SSE math.\n+\t(*floathi<mode>2_1): New insn insn_and_split pattern.\n+\t(*floathi<mode>2_i387_with_temp): New macroized instruction pattern and\n+\tcorresponding post-reload splitters.\n+\t(*floathi<mode>2_i387): New macroized insn pattern.\n+\t(float<SSEMODEI24:mode><X87MODEF:mode>2): New macroized expander.\n+\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_1): New macroized\n+\tinsn_and_split pattern.\n+\t(*floatsi<mode>2_vector_mixed_with_temp, *floatsi<mode>2_vector_mixed):\n+\tNew macroized instruction patterns and corresponding post-reload\n+\tsplitters.\n+\t(*floatsi<mode>2_mixed_with_temp): New macroized instruction pattern\n+\tand corresponding post-reload splitters.\n+\t(*floatsi<mode>2_mixed_interunit, *floatsi<mode>2_mixed_nointerunit):\n+\tNew macroized instruction patterns.\n+\t(*floatsi<mode>2_vector_sse_with_temp, *floatsi<mode>2_vector_sse): New\n+\tmacroized instruction patterns and corresponding post-reload splitters.\n+\t(*floatsi<mode>2_sse_with_temp): New macroized instruction pattern and\n+\tcorresponding post-reload splitters.\n+\t(*floatsi<mode>2_sse_interunit, *floatsi<mode>2_mixed_nointerunit):\n+\tNew macroized instruction patterns.\n+\t(*floatsi<mode>2_i387_with_temp): New macroized instruction pattern and\n+\tcorresponding post-reload splitters.\n+\t(*floatsi<mode>2_i387): New macroized instruction patterns.\n+\n 2008-04-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.md (smaxmin): New.\n@@ -115,10 +143,10 @@\n \t* common.opt (fprofile-dir=, fprofile-use=, fprofile-generate=):\n \tNew options\n \t(fprofile-use): Add var flag_profile_use\n-\t* coverage.c (coverage_begin_output): Do not open a gcno file for output\n-\tonly if -ftest-coverage is set.\n+\t* coverage.c (coverage_begin_output): Do not open a gcno file for\n+\toutput only if -ftest-coverage is set.\n \tDo not add getpwd() to gcda file path.\n-\t(build_gcov_info): Check the new flag \n+\t(build_gcov_info): Check the new flag\n \tflag_profile_datafile_relative_path.\n \t(coverage_init): Use profile_data_prefix.\n \tRead profile counter only if flag_profile_use is set.\n@@ -131,8 +159,8 @@\n \n 2008-03-31  James E. Wilson  <wilson@tuliptree.org>\n \n-\t* varasm.c (output_constant_pool_1): In LABEL_REF check, use tmp\n-\tconsistently.\n+\t* varasm.c (output_constant_pool_1): In LABEL_REF check,\n+\tuse tmp consistently.\n \n \tPR target/35695\n \t* config/ia64/div.md (recip_approx_rf): Use UNSPEC not DIV.\n@@ -153,8 +181,7 @@\n \n 2008-03-31  Ian Lance Taylor  <iant@google.com>\n \n-\t* tlink.c (scan_linker_output): Look for symbol name in single\n-\tquotes.\n+\t* tlink.c (scan_linker_output): Look for symbol name in single quotes.\n \n 2008-03-31  Jan Hubicka  <jh@suse.cz>\n \n@@ -173,7 +200,8 @@\n \t(regno_reg_rtx): ... new global array.\n \t(reg_rtx_no, seq_stack, REGNO_POINTER_ALIGN): Update accestors.\n \t(pending_stack_adjust, inhibit_defer_pop, saveregs_value,\n-\tapply_args_value, forced_labels, stack_pointer_delta): Update accestors.\n+\tapply_args_value, forced_labels, stack_pointer_delta):\n+\tUpdate accestors.\n \t(struct varasm_status): Move here from varasm.c\n \t(struct rtl_data): New. Move here some fields from struct function.\n \t(return_label, naked_return_label, stack_slot_list, parm_birth_insn,\n@@ -185,7 +213,8 @@\n \t(get_arg_pointer_save_area): Update prototype.\n \t* emit-rtl.c (rtl): Declare.\n \t(regno_reg_rtx): Declare.\n-\t(first_insn, last_insn, cur_insn_uid, last_location, first_label_num): Update.\n+\t(first_insn, last_insn, cur_insn_uid, last_location, first_label_num):\n+\tUpdate.\n \t(gen_reg_rtx): Update.\n \t(init_virtual_regs): Do not tate emit_status argument.\n \t(init_emit): Do not allocate emit."}, {"sha": "a72e7725d8339973bd6ad43f11cb2f7c7744baf1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 396, "deletions": 441, "changes": 837, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380edc9fafa5b2e2e7f688b8a2f846a9413c8160/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380edc9fafa5b2e2e7f688b8a2f846a9413c8160/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=380edc9fafa5b2e2e7f688b8a2f846a9413c8160", "patch": "@@ -580,6 +580,9 @@\n ;; SSE vector mode corresponding to a scalar mode\n (define_mode_attr ssevecmode\n   [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (SF \"V4SF\") (DF \"V2DF\")])\n+\n+;; Instruction suffix for REX 64bit operators.\n+(define_mode_attr rex64suffix [(SI \"\") (DI \"{q}\")])\n \f\n ;; Scheduling descriptions\n \n@@ -4819,535 +4822,487 @@\n ;; wants to be able to do this between registers.\n \n (define_expand \"floathi<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n-\t(float:MODEF (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-{\n-  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-    {\n-      emit_insn\n-\t(gen_floatsi<mode>2 (operands[0],\n-\t\t\t     convert_to_mode (SImode, operands[1], 0)));\n-      DONE;\n-    }\n-})\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_80387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\"\n+  \"\")\n \n-(define_insn \"*floathi<mode>2_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f\")\n-\t(float:MODEF\n-\t  (match_operand:HI 1 \"nonimmediate_operand\" \"m,?r\")))]\n+;; Pre-reload splitter to add memory clobber to the pattern.\n+(define_insn_and_split \"*floathi<mode>2_1\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:HI 1 \"register_operand\" \"\")))]\n+  \"TARGET_80387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0)\n+\t      (float:X87MODEF (match_dup 1)))\n+   (clobber (match_dup 2))])]\n+  \"operands[2] = assign_386_stack_local (HImode, SLOT_TEMP);\")\n+\n+(define_insn \"*floathi<mode>2_i387_with_temp\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n+\t(float:X87MODEF (match_operand:HI 1 \"nonimmediate_operand\" \"m,?r\")))\n+  (clobber (match_operand:HI 2 \"memory_operand\" \"=m,m\"))]\n   \"TARGET_80387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\"\n-  \"@\n-   fild%z1\\t%1\n-   #\"\n+  \"#\"\n   [(set_attr \"type\" \"fmov,multi\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"unit\" \"*,i387\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_expand \"floatsi<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n-\t(float:MODEF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-  \"\n-   /* When we use vector converts, we can't have input in memory.  */\n-   if (GET_MODE (operands[0]) == DFmode\n-       && TARGET_USE_VECTOR_CONVERTS && !optimize_size && TARGET_SSE_MATH\n-       && SSE_FLOAT_MODE_P (DFmode))\n-     operands[1] = force_reg (SImode, operands[1]);\n-   else if (GET_MODE (operands[0]) == SFmode\n-            && !optimize_size && TARGET_USE_VECTOR_CONVERTS && TARGET_SSE_MATH\n-            && SSE_FLOAT_MODE_P (SFmode))\n-     {\n-       /* When !flag_trapping_math, we handle SImode->SFmode vector\n-\t  conversions same way as SImode->DFmode.\n-\n-\t  For flat_trapping_math we can't safely use vector conversion without\n-\t  clearing upper half, otherwise precision exception might occur.\n-\t  However we can still generate the common sequence converting value\n-\t  from general register to XMM register as:\n-\n-\t    mov \treg32, mem32\n-\t    movd\tmem32, xmm\n-\t    cvtdq2pd xmm,xmm\n-\n-\t  because we know that movd clears the upper half.\n-\n-\t  Sadly in this case we can't rely on reload moving the value to XMM\n-\t  register, since we need to know if upper half is OK, so we need\n-\t  to do reloading by hand.  We force operand to memory unless target\n-\t  supports inter unit moves.  */\n-       if (!flag_trapping_math)\n-         operands[1] = force_reg (SImode, operands[1]);\n-       else if (!MEM_P (operands[1]))\n-\t {\n-\t   int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n-\t   rtx tmp = assign_386_stack_local (SImode, slot);\n-\t   emit_move_insn (tmp, operands[1]);\n-\t   operands[1] = tmp;\n-\t }\n-     }\n-   /* Offload operand of cvtsi2ss and cvtsi2sd into memory for\n-      !TARGET_INTER_UNIT_CONVERSIONS\n-      It is necessary for the patterns to not accept nonmemory operands\n-      as we would optimize out later.  */\n-   else if (!TARGET_INTER_UNIT_CONVERSIONS\n-\t    && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n-\t    && !optimize_size\n-\t    && !MEM_P (operands[1]))\n-     {\n-       int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n-       rtx tmp = assign_386_stack_local (GET_MODE (operands[1]), slot);\n-       emit_move_insn (tmp, operands[1]);\n-       operands[1] = tmp;\n-     }\n-  \")\n-\n-(define_insn \"*floatsisf2_mixed_vector\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,f,?f\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"x,m,r\")))]\n-  \"TARGET_MIX_SSE_I387 && !flag_trapping_math\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n-  \"@\n-   cvtdq2ps\\t{%1, %0|%0, %1}\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"sseicvt,fmov,multi\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"unit\" \"*,i387,*\")\n-   (set_attr \"athlon_decode\" \"double,*,*\")\n-   (set_attr \"amdfam10_decode\" \"double,*,*\")\n-   (set_attr \"fp_int_src\" \"false,true,true\")])\n-\n-(define_insn \"*floatsisf2_mixed\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,?f,x,x\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,r,m\")))]\n-  \"TARGET_MIX_SSE_I387\n-   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n-       || optimize_size)\"\n-  \"@\n-   fild%z1\\t%1\n-   #\n-   cvtsi2ss\\t{%1, %0|%0, %1}\n-   cvtsi2ss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"unit\" \"*,i387,*,*\")\n-   (set_attr \"athlon_decode\" \"*,*,vector,double\")\n-   (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n-\n-(define_insn \"*floatsisf2_mixed_memory\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,x\")\n-\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m,m\")))]\n-  \"TARGET_MIX_SSE_I387\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n-  \"@\n-   fild%z1\\t%1\n-   cvtsi2ss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"*,double\")\n-   (set_attr \"amdfam10_decode\" \"*,double\")\n+(define_insn \"*floathi<mode>2_i387\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(float:X87MODEF (match_operand:HI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_80387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\"\n+  \"fild%z1\\t%1\"\n+  [(set_attr \"type\" \"fmov\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatsisf2_sse_vector_nointernunit\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_SSE_MATH && flag_trapping_math\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n-   && !TARGET_INTER_UNIT_MOVES\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n-(define_insn \"*floatsisf2_sse_vector_internunit\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"rm,x\")))]\n-  \"TARGET_SSE_MATH && flag_trapping_math\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n-   && TARGET_INTER_UNIT_MOVES\"\n-  \"#\"\n-  [(set_attr \"type\" \"multi\")])\n-\n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"flag_trapping_math\n-   && TARGET_USE_VECTOR_CONVERTS && reload_completed\n-   && (TARGET_INTER_UNIT_MOVES || MEM_P (operands[1]))\n-   && !SSE_REG_P (operands[1]) && SSE_REG_P (operands[0])\"\n-  [(set (match_dup 0)\n-\t(float:V4SF (match_dup 2)))]\n-{\n-  operands[2] = simplify_gen_subreg (V4SImode, operands[0], SFmode, 0);\n-  operands[0] = simplify_gen_subreg (V4SFmode, operands[0], SFmode, 0);\n-  emit_insn (gen_sse2_loadld (operands[2], CONST0_RTX (V4SImode), operands[1]));\n-})\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:HI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:HI 2 \"memory_operand\" \"\"))]\n+  \"TARGET_80387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && reload_completed\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n+  \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"flag_trapping_math\n-   && TARGET_USE_VECTOR_CONVERTS && reload_completed\n-   && SSE_REG_P (operands[1]) && SSE_REG_P (operands[0])\"\n-  [(set (match_dup 2) (vec_duplicate:V4SI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(float:V4SF (match_dup 2)))]\n-{\n-  operands[2] = simplify_gen_subreg (V4SImode, operands[0], SFmode, 0);\n-  operands[0] = simplify_gen_subreg (V4SFmode, operands[0], SFmode, 0);\n-})\n-\n-(define_insn \"*floatsisf2_sse_vector\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(float:SF (match_operand:SI 1 \"register_operand\" \"x\")))]\n-  \"TARGET_SSE_MATH && !flag_trapping_math\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n-   && !TARGET_INTER_UNIT_MOVES\"\n-  \"cvtdq2ps\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"double\")\n-   (set_attr \"amdfam10_decode\" \"double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:HI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:HI 2 \"memory_operand\" \"\"))]\n+   \"TARGET_80387\n+    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+        || TARGET_MIX_SSE_I387)\n+    && reload_completed\"\n+  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n+  \"\")\n \n-(define_insn \"*floatsisf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_SSE_MATH\n-   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n-       || optimize_size)\"\n-  \"cvtsi2ss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"vector,double\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+(define_expand \"float<SSEMODEI24:mode><X87MODEF:mode>2\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF\n+\t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_80387\n+   || ((<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+       && SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH)\"\n+  \"\")\n \n-(define_insn \"*floatsisf2_sse_memory\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_SSE_MATH\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n-  \"cvtsi2ss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"double\")\n-   (set_attr \"amdfam10_decode\" \"double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+;; Pre-reload splitter to add memory clobber to the pattern.\n+(define_insn_and_split \"*float<SSEMODEI24:mode><X87MODEF:mode>2_1\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:SSEMODEI24 1 \"register_operand\" \"\")))]\n+  \"((TARGET_80387\n+     && (!((<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+\t   && SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH)\n+\t || TARGET_MIX_SSE_I387))\n+    || ((<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+\t&& SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH\n+\t&& ((<SSEMODEI24:MODE>mode == SImode\n+\t     && TARGET_SSE2 && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+\t     && flag_trapping_math)\n+\t    || !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size))))\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0) (float:X87MODEF (match_dup 1)))\n+\t      (clobber (match_dup 2))])]\n+  \"operands[2] = assign_386_stack_local (<SSEMODEI24:MODE>mode, SLOT_TEMP);\")\n \n-(define_insn \"*floatsidf2_mixed_vector\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x,f,f\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"x,m,r\")))]\n+(define_insn \"*floatsi<mode>2_vector_mixed_with_temp\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,x,x\")\n+\t(float:MODEF\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r,r,m,!x\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"=m,m,m,m,m\"))]\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n    && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n-  \"@\n-   cvtdq2pd\\t{%1, %0|%0, %1}\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"sseicvt,fmov,multi\")\n-   (set_attr \"mode\" \"V2DF,DF,DF\")\n-   (set_attr \"unit\" \"*,*,i387\")\n-   (set_attr \"athlon_decode\" \"double,*,*\")\n-   (set_attr \"amdfam10_decode\" \"double,*,*\")\n-   (set_attr \"fp_int_src\" \"false,true,true\")])\n-\n-(define_insn \"*floatsidf2_mixed\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,?f,x,x,!x\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r,r,m,x\")))]\n-  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n-       || optimize_size)\"\n-  \"@\n-   fild%z1\\t%1\n-   #\n-   cvtsi2sd\\t{%1, %0|%0, %1}\n-   cvtsi2sd\\t{%1, %0|%0, %1}\n-   cvtdq2pd\\t{%1, %0|%0, %1}\"\n+  \"#\"\n   [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt,sseicvt\")\n-   (set_attr \"mode\" \"DF,DF,DF,DF,V2DF\")\n+   (set_attr \"mode\" \"<MODE>,<MODE>,<MODE>,<MODE>,<ssevecmode>\")\n    (set_attr \"unit\" \"*,i387,*,*,*\")\n    (set_attr \"athlon_decode\" \"*,*,double,direct,double\")\n    (set_attr \"amdfam10_decode\" \"*,*,vector,double,double\")\n-   (set_attr \"fp_int_src\" \"true,true,true,true,false\")])\n+   (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatsidf2_mixed_memory\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,x\")\n-\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m,m\")))]\n+(define_insn \"*floatsi<mode>2_vector_mixed\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x\")\n+\t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"m,m\")))]\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n   \"@\n    fild%z1\\t%1\n-   cvtsi2sd\\t{%1, %0|%0, %1}\"\n+   #\"\n   [(set_attr \"type\" \"fmov,sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n+   (set_attr \"mode\" \"<MODE>,<ssevecmode>\")\n+   (set_attr \"unit\" \"i387,*\")\n    (set_attr \"athlon_decode\" \"*,direct\")\n    (set_attr \"amdfam10_decode\" \"*,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatsidf2_sse_vector\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(float:DF (match_operand:SI 1 \"register_operand\" \"x\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n-  \"cvtdq2pd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"V2DF\")\n-   (set_attr \"athlon_decode\" \"double\")\n-   (set_attr \"amdfam10_decode\" \"double\")\n+(define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_mixed_with_temp\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,x\")\n+\t(float:MODEF\n+\t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"m,?r,r,m\")))\n+  (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"=m,m,m,m\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\"\n+  \"#\"\n+  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set_attr \"unit\" \"*,i387,*,*\")\n+   (set_attr \"athlon_decode\" \"*,*,double,direct\")\n+   (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float:DF (match_operand:SI 1 \"memory_operand\" \"\")))]\n-  \"TARGET_USE_VECTOR_CONVERTS && reload_completed\n-   && SSE_REG_P (operands[0])\"\n-  [(set (match_dup 0)\n-\t(float:V2DF\n-\t  (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 0) (const_int 1)]))))]\n-{\n-  operands[2] = simplify_gen_subreg (V4SImode, operands[0], DFmode, 0);\n-  operands[0] = simplify_gen_subreg (V2DFmode, operands[0], DFmode, 0);\n-  emit_insn (gen_sse2_loadld (operands[2], CONST0_RTX (V4SImode), operands[1]));\n-})\n-\n-(define_insn \"*floatsidf2_sse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x,x,!x\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,x\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n-       || optimize_size)\"\n-  \"@\n-   cvtsi2sd\\t{%1, %0|%0, %1}\n-   cvtsi2sd\\t{%1, %0|%0, %1}\n-   cvtdq2pd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF,DF,V2DF\")\n-   (set_attr \"athlon_decode\" \"double,direct,double\")\n-   (set_attr \"amdfam10_decode\" \"vector,double,double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SSEMODEI24 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n+   && TARGET_INTER_UNIT_CONVERSIONS\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(set (match_dup 0) (float:MODEF (match_dup 1)))]\n+  \"\")\n \n-(define_insn \"*floatsidf2_memory\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(float:DF (match_operand:SI 1 \"memory_operand\" \"x\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && ((!TARGET_USE_VECTOR_CONVERTS && TARGET_INTER_UNIT_CONVERSIONS)\n-       || optimize_size)\"\n-  \"cvtsi2sd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"direct\")\n-   (set_attr \"amdfam10_decode\" \"double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SSEMODEI24 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (float:MODEF (match_dup 2)))]\n+  \"\")\n \n-(define_insn \"*floatsi<mode>2_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f\")\n+(define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,x\")\n \t(float:MODEF\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\")))]\n-  \"TARGET_80387\n-   && (!TARGET_SSE_MATH || !SSE_FLOAT_MODE_P (GET_MODE (operands[0])))\"\n-  \"@\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set_attr \"unit\" \"*,i387\")\n-   (set_attr \"fp_int_src\" \"true\")])\n-\n-(define_expand \"floatdisf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (TARGET_64BIT && TARGET_SSE_MATH)\"\n-{\n-  if (!TARGET_INTER_UNIT_CONVERSIONS && TARGET_64BIT\n-      && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (SFmode)\n-      && !optimize_size\n-      && !MEM_P (operands[1]))\n-    {\n-      int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n-      rtx tmp = assign_386_stack_local (GET_MODE (operands[1]), slot);\n-      emit_move_insn (tmp, operands[1]);\n-      operands[1] = tmp;\n-    }\n-})\n-\n-(define_insn \"*floatdisf2_mixed\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,?f,x,x\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,r,m\")))]\n-  \"TARGET_64BIT && TARGET_MIX_SSE_I387\n+\t  (match_operand:SSEMODEI24 1 \"register_operand\" \"m,r,m\")))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n   \"@\n    fild%z1\\t%1\n-   #\n-   cvtsi2ss{q}\\t{%1, %0|%0, %1}\n-   cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"unit\" \"*,i387,*,*\")\n-   (set_attr \"athlon_decode\" \"*,*,vector,double\")\n-   (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n+   cvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %0|%0, %1}\n+   cvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"fmov,sseicvt,sseicvt\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set_attr \"unit\" \"i387,*,*\")\n+   (set_attr \"athlon_decode\" \"*,double,direct\")\n+   (set_attr \"amdfam10_decode\" \"*,vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatdisf2_mixed\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,x\")\n-\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m,m\")))]\n-  \"TARGET_64BIT && TARGET_MIX_SSE_I387\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n+(define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x\")\n+\t(float:MODEF\n+\t  (match_operand:SSEMODEI24 1 \"memory_operand\" \"m,m\")))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n   \"@\n    fild%z1\\t%1\n-   cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n+   cvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"fmov,sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"*,double\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set_attr \"athlon_decode\" \"*,direct\")\n    (set_attr \"amdfam10_decode\" \"*,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatdisf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,x\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE_MATH\n-   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n-  \"cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n+(define_insn \"*floatsi<mode>2_vector_sse_with_temp\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,x\")\n+\t(float:MODEF\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,!x\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"=m,m,m\"))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n+  \"#\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"vector,double\")\n-   (set_attr \"amdfam10_decode\" \"vector,double\")\n+   (set_attr \"mode\" \"<MODE>,<MODE>,<ssevecmode>\")\n+   (set_attr \"athlon_decode\" \"double,direct,double\")\n+   (set_attr \"amdfam10_decode\" \"vector,double,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatdisf2_memory\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT && TARGET_SSE_MATH\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n-  \"cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n+(define_insn \"*floatsi<mode>2_vector_sse\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n+  \"#\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"double\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"athlon_decode\" \"direct\")\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_expand \"floatdidf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(const_int 0)]\n {\n-  if (!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH)\n+  rtx op1 = operands[1];\n+\n+  operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n+\t\t\t\t     <MODE>mode, 0);\n+  if (GET_CODE (op1) == SUBREG)\n+    op1 = SUBREG_REG (op1);\n+\n+  if (GENERAL_REG_P (op1) && TARGET_INTER_UNIT_MOVES)\n     {\n-      ix86_expand_convert_sign_didf_sse (operands[0], operands[1]);\n-      DONE;\n+      operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n+      emit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t\t  CONST0_RTX (V4SImode), operands[1]));\n     }\n-  if (!TARGET_INTER_UNIT_CONVERSIONS && TARGET_64BIT\n-      && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (DFmode)\n-      && !optimize_size\n-      && !MEM_P (operands[1]))\n+  /* We can ignore possible trapping value in the\n+     high part of SSE register for non-trapping math. */\n+  else if (SSE_REG_P (op1) && !flag_trapping_math)\n+    operands[4] = simplify_gen_subreg (V4SImode, operands[1], SImode, 0);\n+  else\n     {\n-      int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n-      rtx tmp = assign_386_stack_local (GET_MODE (operands[1]), slot);\n-      emit_move_insn (tmp, operands[1]);\n-      operands[1] = tmp;\n+      operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n+      emit_move_insn (operands[2], operands[1]);\n+      emit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t\t  CONST0_RTX (V4SImode), operands[2]));\n     }\n+  emit_insn\n+    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+  DONE;\n })\n \n-(define_insn \"*floatdidf2_mixed\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,?f,x,x\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,r,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n-  \"@\n-   fild%z1\\t%1\n-   #\n-   cvtsi2sd{q}\\t{%1, %0|%0, %1}\n-   cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"unit\" \"*,i387,*,*\")\n-   (set_attr \"athlon_decode\" \"*,*,double,direct\")\n-   (set_attr \"amdfam10_decode\" \"*,*,vector,double\")\n-   (set_attr \"fp_int_src\" \"true\")])\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(const_int 0)]\n+{\n+  operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n+\t\t\t\t     <MODE>mode, 0);\n+  operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n \n-(define_insn \"*floatdidf2_mixed_memory\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,x\")\n-\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n-  \"@\n-   fild%z1\\t%1\n-   cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fmov,sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"*,direct\")\n-   (set_attr \"amdfam10_decode\" \"*,double\")\n+  emit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t      CONST0_RTX (V4SImode), operands[1]));\n+  emit_insn\n+    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+  DONE;\n+})\n+\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+\n+  operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n+\t\t\t\t     <MODE>mode, 0);\n+  if (GET_CODE (op1) == SUBREG)\n+    op1 = SUBREG_REG (op1);\n+\n+  if (GENERAL_REG_P (op1) && TARGET_INTER_UNIT_MOVES)\n+    {\n+      operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n+      emit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t\t  CONST0_RTX (V4SImode), operands[1]));\n+    }\n+  /* We can ignore possible trapping value in the\n+     high part of SSE register for non-trapping math. */\n+  else if (SSE_REG_P (op1) && !flag_trapping_math)\n+    operands[4] = simplify_gen_subreg (V4SImode, operands[1], SImode, 0);\n+  else\n+    gcc_unreachable ();\n+})\n+\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"\")))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(const_int 0)]\n+{\n+  operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n+\t\t\t\t     <MODE>mode, 0);\n+  operands[4] = simplify_gen_subreg (V4SImode, operands[0], <MODE>mode, 0);\n+\n+  emit_insn (gen_sse2_loadld (operands[4],\n+\t\t\t      CONST0_RTX (V4SImode), operands[1]));\n+  emit_insn\n+    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_sse_with_temp\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n+\t(float:MODEF\n+\t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"r,m\")))\n+  (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"=m,m\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"\n+  \"#\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set_attr \"athlon_decode\" \"double,direct\")\n+   (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatdidf2_sse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x,x\")\n-\t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n+(define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_sse_interunit\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n+\t(float:MODEF\n+\t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n-  \"cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n+  \"@\n+   cvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %0|%0, %1}\n+   cvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n    (set_attr \"athlon_decode\" \"double,direct\")\n    (set_attr \"amdfam10_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatdidf2_sse_memory\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n-\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n-   && !TARGET_INTER_UNIT_CONVERSIONS && !optimize_size\"\n-  \"cvtsi2sd{q}\\t{%1, %0|%0, %1}\"\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(set (match_dup 0) (float:MODEF (match_dup 1)))]\n+  \"\")\n+\n+(define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_sse_nointerunit\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n+\t(float:MODEF\n+\t  (match_operand:SSEMODEI24 1 \"memory_operand\" \"m\")))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n+  \"cvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"mode\" \"DF\")\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n    (set_attr \"athlon_decode\" \"direct\")\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"*floatdi<mode>2_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f\")\n-\t(float:MODEF\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"m,?r\")))]\n-  \"TARGET_80387\n-   && (!TARGET_SSE_MATH || !TARGET_64BIT\n-       || !SSE_FLOAT_MODE_P (GET_MODE (operands[0])))\"\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SSEMODEI24 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (float:MODEF (match_dup 2)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n+\t(float:MODEF (match_operand:SSEMODEI24 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n+   && reload_completed\n+   && (SSE_REG_P (operands[0])\n+       || (GET_CODE (operands[0]) == SUBREG\n+\t   && SSE_REG_P (operands[0])))\"\n+  [(set (match_dup 0) (float:MODEF (match_dup 1)))]\n+  \"\")\n+\n+(define_insn \"*float<SSEMODEI24:mode><X87MODEF:mode>2_i387_with_temp\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n+\t(float:X87MODEF\n+\t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"m,?r\")))\n+  (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"=m,m\"))]\n+  \"TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n   [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"mode\" \"<X87MODEF:MODE>\")\n    (set_attr \"unit\" \"*,i387\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-(define_insn \"float<mode>xf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(float:XF (match_operand:X87MODEI 1 \"nonimmediate_operand\" \"m,?r\")))]\n+(define_insn \"*float<SSEMODEI24:mode><X87MODEF:mode>2_i387\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(float:X87MODEF\n+\t  (match_operand:SSEMODEI24 1 \"memory_operand\" \"m\")))]\n   \"TARGET_80387\"\n-  \"@\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"unit\" \"*,i387\")\n+  \"fild%z1\\t%1\"\n+  [(set_attr \"type\" \"fmov\")\n+   (set_attr \"mode\" \"<X87MODEF:MODE>\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-;; %%% Kill these when reload knows how to do it.\n (define_split\n-  [(set (match_operand 0 \"fp_register_operand\" \"\")\n-\t(float (match_operand 1 \"register_operand\" \"\")))]\n-  \"reload_completed\n-   && X87_FLOAT_MODE_P (GET_MODE (operands[0]))\"\n-  [(const_int 0)]\n-{\n-  operands[2] = ix86_force_to_memory (GET_MODE (operands[1]), operands[1]);\n-  operands[2] = gen_rtx_FLOAT (GET_MODE (operands[0]), operands[2]);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[2]));\n-  ix86_free_from_memory (GET_MODE (operands[1]));\n-  DONE;\n-})\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:SSEMODEI24 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"TARGET_80387\n+   && reload_completed\n+   && FP_REG_P (operands[0])\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(float:X87MODEF (match_operand:SSEMODEI24 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n+  \"TARGET_80387\n+   && reload_completed\n+   && FP_REG_P (operands[0])\"\n+  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n+  \"\")\n \n ;; Avoid store forwarding (partial memory) stall penalty by extending\n ;; SImode value to DImode through XMM register instead of pushing two"}]}