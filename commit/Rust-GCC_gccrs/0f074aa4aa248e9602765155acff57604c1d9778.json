{"sha": "0f074aa4aa248e9602765155acff57604c1d9778", "node_id": "C_kwDOANBUbNoAKDBmMDc0YWE0YWEyNDhlOTYwMjc2NTE1NWFjZmY1NzYwNGMxZDk3Nzg", "commit": {"author": {"name": "Johannes Kliemann", "email": "kliemann@adacore.com", "date": "2021-09-30T11:41:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:04Z"}, "message": "[Ada] Add ghost code version of Ada.Numerics.Big_Numbers.Big_Integers\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin__ghost.ads: Add ghost package.", "tree": {"sha": "ecbd11df4ca164c2a6b0328085d60781cdb1085e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecbd11df4ca164c2a6b0328085d60781cdb1085e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f074aa4aa248e9602765155acff57604c1d9778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f074aa4aa248e9602765155acff57604c1d9778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f074aa4aa248e9602765155acff57604c1d9778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f074aa4aa248e9602765155acff57604c1d9778/comments", "author": {"login": "jklmnn", "id": 7999005, "node_id": "MDQ6VXNlcjc5OTkwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7999005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jklmnn", "html_url": "https://github.com/jklmnn", "followers_url": "https://api.github.com/users/jklmnn/followers", "following_url": "https://api.github.com/users/jklmnn/following{/other_user}", "gists_url": "https://api.github.com/users/jklmnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jklmnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jklmnn/subscriptions", "organizations_url": "https://api.github.com/users/jklmnn/orgs", "repos_url": "https://api.github.com/users/jklmnn/repos", "events_url": "https://api.github.com/users/jklmnn/events{/privacy}", "received_events_url": "https://api.github.com/users/jklmnn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa814cb27fe3f61adfe894d52f01a4c377263fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa814cb27fe3f61adfe894d52f01a4c377263fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa814cb27fe3f61adfe894d52f01a4c377263fe"}], "stats": {"total": 206, "additions": 206, "deletions": 0}, "files": [{"sha": "bf79d0576c7e8021d8a1f9dbc506966efaba7244", "filename": "gcc/ada/libgnat/a-nbnbin__ghost.ads", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f074aa4aa248e9602765155acff57604c1d9778/gcc%2Fada%2Flibgnat%2Fa-nbnbin__ghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f074aa4aa248e9602765155acff57604c1d9778/gcc%2Fada%2Flibgnat%2Fa-nbnbin__ghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin__ghost.ads?ref=0f074aa4aa248e9602765155acff57604c1d9778", "patch": "@@ -0,0 +1,206 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                  ADA.NUMERICS.BIG_NUMBERS.BIG_INTEGERS                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package Ada.Numerics.Big_Numbers.Big_Integers with\n+   SPARK_Mode,\n+   Ghost,\n+   Preelaborate\n+is\n+   type Big_Integer is private\n+     with Integer_Literal => From_Universal_Image;\n+\n+   function Is_Valid (Arg : Big_Integer) return Boolean\n+   with\n+     Import,\n+     Global => null;\n+\n+   subtype Valid_Big_Integer is Big_Integer\n+     with Dynamic_Predicate => Is_Valid (Valid_Big_Integer),\n+          Predicate_Failure => raise Program_Error;\n+\n+   function \"=\" (L, R : Valid_Big_Integer) return Boolean with\n+      Import,\n+      Global => null;\n+\n+   function \"<\" (L, R : Valid_Big_Integer) return Boolean with\n+      Import,\n+      Global => null;\n+\n+   function \"<=\" (L, R : Valid_Big_Integer) return Boolean with\n+      Import,\n+      Global => null;\n+\n+   function \">\" (L, R : Valid_Big_Integer) return Boolean with\n+      Import,\n+      Global => null;\n+\n+   function \">=\" (L, R : Valid_Big_Integer) return Boolean with\n+      Import,\n+      Global => null;\n+\n+   function To_Big_Integer (Arg : Integer) return Valid_Big_Integer\n+     with\n+       Import,\n+       Global => null;\n+\n+   subtype Big_Positive is Big_Integer\n+     with Dynamic_Predicate =>\n+            (if Is_Valid (Big_Positive)\n+             then Big_Positive > To_Big_Integer (0)),\n+          Predicate_Failure => (raise Constraint_Error);\n+\n+   subtype Big_Natural is Big_Integer\n+     with Dynamic_Predicate =>\n+            (if Is_Valid (Big_Natural)\n+             then Big_Natural >= To_Big_Integer (0)),\n+          Predicate_Failure => (raise Constraint_Error);\n+\n+   function In_Range\n+     (Arg : Valid_Big_Integer; Low, High : Big_Integer) return Boolean\n+   is (Low <= Arg and Arg <= High)\n+   with\n+     Import,\n+     Global => null;\n+\n+   function To_Integer (Arg : Valid_Big_Integer) return Integer\n+   with\n+     Import,\n+     Pre    => In_Range (Arg,\n+                         Low  => To_Big_Integer (Integer'First),\n+                         High => To_Big_Integer (Integer'Last))\n+                or else (raise Constraint_Error),\n+     Global => null;\n+\n+   generic\n+      type Int is range <>;\n+   package Signed_Conversions is\n+\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer\n+      with\n+        Import,\n+        Global => null;\n+\n+      function From_Big_Integer (Arg : Valid_Big_Integer) return Int\n+      with\n+        Import,\n+        Pre    => In_Range (Arg,\n+                            Low  => To_Big_Integer (Int'First),\n+                            High => To_Big_Integer (Int'Last))\n+                   or else (raise Constraint_Error),\n+        Global => null;\n+   end Signed_Conversions;\n+\n+   generic\n+      type Int is mod <>;\n+   package Unsigned_Conversions is\n+\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer\n+      with\n+        Import,\n+        Global => null;\n+\n+      function From_Big_Integer (Arg : Valid_Big_Integer) return Int\n+      with\n+        Import,\n+        Pre    => In_Range (Arg,\n+                            Low  => To_Big_Integer (Int'First),\n+                            High => To_Big_Integer (Int'Last))\n+                   or else (raise Constraint_Error),\n+        Global => null;\n+\n+   end Unsigned_Conversions;\n+\n+   function From_String (Arg : String) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function From_Universal_Image (Arg : String) return Valid_Big_Integer\n+     renames From_String;\n+\n+   function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"-\" (L : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"abs\" (L : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"+\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"-\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"*\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"/\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"mod\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"rem\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function \"**\" (L : Valid_Big_Integer; R : Natural) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function Min (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function Max (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+   with\n+     Import,\n+     Global => null;\n+\n+   function Greatest_Common_Divisor\n+     (L, R : Valid_Big_Integer) return Big_Positive\n+   with\n+     Import,\n+     Pre    => (L /= To_Big_Integer (0) and R /= To_Big_Integer (0))\n+             or else (raise Constraint_Error),\n+     Global => null;\n+\n+private\n+   pragma SPARK_Mode (Off);\n+\n+   type Big_Integer is null record;\n+\n+end Ada.Numerics.Big_Numbers.Big_Integers;"}]}