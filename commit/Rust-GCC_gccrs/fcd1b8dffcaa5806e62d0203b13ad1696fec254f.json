{"sha": "fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNkMWI4ZGZmY2FhNTgwNmU2MmQwMjAzYjEzYWQxNjk2ZmVjMjU0Zg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-11-08T12:28:33Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-11-08T12:28:33Z"}, "message": "use-after-scope fallout\n\n\tPR testsuite/78242\n\t* g++.dg/asan/use-after-scope-4.C: New test.\n\t* g++.dg/asan/use-after-scope-types-4.C: Update scanned pattern.\n\t* gcc.dg/asan/use-after-scope-8.c: Remove.\n\tPR testsuite/78242\n\t* dbgcnt.def: Add new debug counter asan_use_after_scope.\n\t* gimplify.c (gimplify_decl_expr): Do not sanitize vars\n\twith a value expr.  Do not add artificial variables to\n\tlive_switch_vars.  Use the debug counter.\n\t(gimplify_target_expr): Use the debug counter.\n\t* internal-fn.def: Remove ECF_TM_PURE from ASAN_MARK builtin.\n\t* sanitizer.def: Set ATTR_NOTHROW_LEAF_LIST to\n\tBUILT_IN_ASAN_CLOBBER_N and BUILT_IN_ASAN_UNCLOBBER_N.\n\nFrom-SVN: r241961", "tree": {"sha": "60e233b74357c8dd648d02460fdf3495684deb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e233b74357c8dd648d02460fdf3495684deb06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "f06b68e856d6de9e54536701f7fe19f1e08a64cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -1,3 +1,15 @@\n+2016-11-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/78242\n+\t* dbgcnt.def: Add new debug counter asan_use_after_scope.\n+\t* gimplify.c (gimplify_decl_expr): Do not sanitize vars\n+\twith a value expr.  Do not add artificial variables to\n+\tlive_switch_vars.  Use the debug counter.\n+\t(gimplify_target_expr): Use the debug counter.\n+\t* internal-fn.def: Remove ECF_TM_PURE from ASAN_MARK builtin.\n+\t* sanitizer.def: Set ATTR_NOTHROW_LEAF_LIST to\n+\tBUILT_IN_ASAN_CLOBBER_N and BUILT_IN_ASAN_UNCLOBBER_N.\n+\n 2016-11-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (get_group_load_store_type): If the"}, {"sha": "0a45bac279ec700edffd296131779e4d43c00975", "filename": "gcc/dbgcnt.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Fdbgcnt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Fdbgcnt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.def?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -141,6 +141,7 @@ echo ubound: $ub\n */\n \n /* Debug counter definitions.  */\n+DEBUG_COUNTER (asan_use_after_scope)\n DEBUG_COUNTER (auto_inc_dec)\n DEBUG_COUNTER (ccp)\n DEBUG_COUNTER (cfg_cleanup)"}, {"sha": "d392450ddf51f000fbc0acd0e4afb1665bf44d40", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks-def.h\"\t/* FIXME: for lhd_set_decl_assembler_name */\n #include \"builtins.h\"\n #include \"asan.h\"\n+#include \"dbgcnt.h\"\n \n /* Hash set of poisoned variables in a bind expr.  */\n static hash_set<tree> *asan_poisoned_variables = NULL;\n@@ -1622,11 +1623,13 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n \t  && !asan_no_sanitize_address_p ()\n \t  && !is_vla\n \t  && TREE_ADDRESSABLE (decl)\n-\t  && !TREE_STATIC (decl))\n+\t  && !TREE_STATIC (decl)\n+\t  && !DECL_HAS_VALUE_EXPR_P (decl)\n+\t  && dbg_cnt (asan_use_after_scope))\n \t{\n \t  asan_poisoned_variables->add (decl);\n \t  asan_poison_variable (decl, false, seq_p);\n-\t  if (gimplify_ctxp->live_switch_vars)\n+\t  if (!DECL_ARTIFICIAL (decl) && gimplify_ctxp->live_switch_vars)\n \t    gimplify_ctxp->live_switch_vars->add (decl);\n \t}\n \n@@ -6399,7 +6402,8 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t      else\n \t\tcleanup = clobber;\n \t    }\n-\t  if (asan_sanitize_use_after_scope ())\n+\t  if (asan_sanitize_use_after_scope ()\n+\t      && dbg_cnt (asan_use_after_scope))\n \t    {\n \t      tree asan_cleanup = build_asan_poison_call_expr (temp);\n \t      if (asan_cleanup)"}, {"sha": "0869b2fd52d5a64842bfd7f6194875f97d10f13a", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -158,7 +158,7 @@ DEF_INTERNAL_FN (UBSAN_OBJECT_SIZE, ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (ABNORMAL_DISPATCHER, ECF_NORETURN, NULL)\n DEF_INTERNAL_FN (BUILTIN_EXPECT, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (ASAN_CHECK, ECF_TM_PURE | ECF_LEAF | ECF_NOTHROW, \".R...\")\n-DEF_INTERNAL_FN (ASAN_MARK, ECF_TM_PURE | ECF_LEAF | ECF_NOTHROW, \".R..\")\n+DEF_INTERNAL_FN (ASAN_MARK, ECF_LEAF | ECF_NOTHROW, \".R..\")\n DEF_INTERNAL_FN (ADD_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (SUB_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (MUL_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)"}, {"sha": "c11c95a7e23a954875888d80c40b7116af1b5f6b", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -166,9 +166,9 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_AFTER_DYNAMIC_INIT,\n \t\t      \"__asan_after_dynamic_init\",\n \t\t      BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_CLOBBER_N, \"__asan_poison_stack_memory\",\n-\t\t      BT_FN_VOID_PTR_PTRMODE, 0)\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_ASAN_UNCLOBBER_N, \"__asan_unpoison_stack_memory\",\n-\t\t      BT_FN_VOID_PTR_PTRMODE, 0)\n+\t\t      BT_FN_VOID_PTR_PTRMODE, ATTR_NOTHROW_LEAF_LIST)\n \n /* Thread Sanitizer */\n DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_INIT, \"__tsan_init\", "}, {"sha": "22de1a9b755b19c3be7c47f64f5f699edb779f17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -1,3 +1,10 @@\n+2016-11-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/78242\n+\t* g++.dg/asan/use-after-scope-4.C: New test.\n+\t* g++.dg/asan/use-after-scope-types-4.C: Update scanned pattern.\n+\t* gcc.dg/asan/use-after-scope-8.c: Remove.\n+\n 2016-11-08  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/vect-nb-iter-ub-2.c: Adjust."}, {"sha": "c3b6932609bae141ddc27331cffb7b3a3cd0afc1", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-4.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-4.C?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -0,0 +1,36 @@\n+/* Caused ICE in in make_decl_rtl, at varasm.c:1311.  */\n+/* { dg-do compile } */\n+\n+class A\n+{\n+public:\n+  A () : value (123) {}\n+  int value;\n+};\n+\n+template <typename StoredFunction> class B\n+{\n+public:\n+  template <typename F> B (F p1) : mFunction (p1) { mFunction (); }\n+  StoredFunction mFunction;\n+};\n+template <typename Function>\n+void\n+NS_NewRunnableFunction (Function p1)\n+{\n+  (B<Function> (p1));\n+}\n+class C\n+{\n+  void DispatchConnectionCloseEvent (A);\n+  void AsyncCloseConnectionWithErrorMsg (const A &);\n+};\n+void\n+C::AsyncCloseConnectionWithErrorMsg (const A &)\n+{\n+  {\n+    A message;\n+    NS_NewRunnableFunction (\n+      [this, message] { DispatchConnectionCloseEvent (message); });\n+  }\n+}"}, {"sha": "44f4d3b09f544dc078001d65b26a9159de5ed538", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd1b8dffcaa5806e62d0203b13ad1696fec254f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-4.C?ref=fcd1b8dffcaa5806e62d0203b13ad1696fec254f", "patch": "@@ -13,5 +13,5 @@ int main()\n }\n \n // { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"READ of size 8 at\" }\n+// { dg-output \"READ of size \" }\n // { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "b20420684ab99cabf77e505c366bbc38ce8ae9cd", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-8.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ef2c765ad3fce93ddacdabede6b67efdc13c0d/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-8.c?ref=f9ef2c765ad3fce93ddacdabede6b67efdc13c0d", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do compile }\n-// { dg-additional-options \"-fdump-tree-asan0\" }\n-/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n-\n-int\n-fn1 ()\n-{\n-  int x = 123;\n-  register int a asm(\"rdi\") = 123;\n-\n-  return x * x;\n-}\n-\n-/* { dg-final { scan-tree-dump-not \"ASAN_CHECK\" \"asan0\" } }  */"}]}