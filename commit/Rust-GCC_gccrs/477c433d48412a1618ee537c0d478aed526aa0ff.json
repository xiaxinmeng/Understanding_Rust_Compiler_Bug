{"sha": "477c433d48412a1618ee537c0d478aed526aa0ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3YzQzM2Q0ODQxMmExNjE4ZWU1MzdjMGQ0NzhhZWQ1MjZhYTBmZg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-05-07T19:37:15Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-05-07T19:37:15Z"}, "message": "* config/cris/cris.md (\"*movdi_insn\", \"*mov_sidesisf_biap\")\n\t(\"*mov_sidesisf\", \"*mov_sidesisf_biap_mem\", \"*mov_sidesisf_mem\"):\n\tHandle moved operand being in special register.\n\t(\"smulsi3_highpart\", \"umulsi3_highpart\"): Change .error into\n\tpresumed working insn.\n\t(mover2side): Add FIXME.\n\nFrom-SVN: r99359", "tree": {"sha": "4db2852a98209f07d9930d567347f1f968aafc17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db2852a98209f07d9930d567347f1f968aafc17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477c433d48412a1618ee537c0d478aed526aa0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477c433d48412a1618ee537c0d478aed526aa0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477c433d48412a1618ee537c0d478aed526aa0ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477c433d48412a1618ee537c0d478aed526aa0ff/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f72392241a3b1735042c4d6fb7568e12d7499d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72392241a3b1735042c4d6fb7568e12d7499d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72392241a3b1735042c4d6fb7568e12d7499d56"}], "stats": {"total": 94, "additions": 58, "deletions": 36}, "files": [{"sha": "d967acae3a94d8e3799c86311398872e11063d69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477c433d48412a1618ee537c0d478aed526aa0ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477c433d48412a1618ee537c0d478aed526aa0ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=477c433d48412a1618ee537c0d478aed526aa0ff", "patch": "@@ -1,3 +1,12 @@\n+2005-05-07  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.md (\"*movdi_insn\", \"*mov_sidesisf_biap\")\n+\t(\"*mov_sidesisf\", \"*mov_sidesisf_biap_mem\", \"*mov_sidesisf_mem\"):\n+\tHandle moved operand being in special register.\n+\t(\"smulsi3_highpart\", \"umulsi3_highpart\"): Change .error into\n+\tpresumed working insn.\n+\t(mover2side): Add FIXME.\n+\n 2005-05-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* integrate.c (get_func_hard_reg_initial_val): Delete."}, {"sha": "7c567274632c40eb98a5de1f80f7bd546e540b8b", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477c433d48412a1618ee537c0d478aed526aa0ff/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477c433d48412a1618ee537c0d478aed526aa0ff/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=477c433d48412a1618ee537c0d478aed526aa0ff", "patch": "@@ -441,8 +441,8 @@\n }\")\n \n (define_insn \"*movdi_insn\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(match_operand:DI 1 \"general_operand\" \"r,g,rM\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rx,m\")\n+\t(match_operand:DI 1 \"general_operand\" \"rx,g,rxM\"))]\n   \"register_operand (operands[0], DImode)\n    || register_operand (operands[1], DImode)\n    || operands[1] == const0_rtx\"\n@@ -499,20 +499,22 @@\n ;; SImode\n \n (define_insn \"*mov_sidesisf_biap\"\n-  [(set (match_operand 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand 0 \"register_operand\" \"=r,r,x,x\")\n \t(mem (plus:SI\n-\t      (mult:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t       (match_operand:SI 2 \"const_int_operand\" \"n,n\"))\n-\t      (match_operand:SI 3 \"register_operand\" \"r,r\"))))\n-   (set (match_operand:SI 4 \"register_operand\" \"=*3,r\")\n+\t      (mult:SI (match_operand:SI 1 \"register_operand\" \"r,r,r,r\")\n+\t\t       (match_operand:SI 2 \"const_int_operand\" \"n,n,n,n\"))\n+\t      (match_operand:SI 3 \"register_operand\" \"r,r,r,r\"))))\n+   (set (match_operand:SI 4 \"register_operand\" \"=*3,r,*3,r\")\n \t(plus:SI (mult:SI (match_dup 1)\n \t\t\t  (match_dup 2))\n \t\t (match_dup 3)))]\n   \"GET_MODE_SIZE (GET_MODE (operands[0])) == UNITS_PER_WORD\n    && cris_side_effect_mode_ok (MULT, operands, 4, 3, 1, 2, 0)\"\n   \"@\n    #\n-   move.%s0 [%4=%3+%1%T2],%0\")\n+   move.%s0 [%4=%3+%1%T2],%0\n+   #\n+   move [%4=%3+%1%T2],%0\")\n \f\n ;; move.S1 [rx=ry+i],rz\n ;; avoiding move.S1 [ry=ry+i],rz\n@@ -569,26 +571,28 @@\n ;; SImode\n \n (define_insn \"*mov_sidesisf\"\n-  [(set (match_operand 0 \"register_operand\" \"=r,r,r\")\n+  [(set (match_operand 0 \"register_operand\" \"=r,r,r,x,x,x\")\n \t(mem\n-\t (plus:SI (match_operand:SI 1 \"cris_bdap_operand\" \"%r,r,r\")\n-\t\t  (match_operand:SI 2 \"cris_bdap_operand\" \"r>Rn,r,>Rn\"))))\n-   (set (match_operand:SI 3 \"register_operand\" \"=*1,r,r\")\n+\t (plus:SI\n+\t  (match_operand:SI 1 \"cris_bdap_operand\" \"%r,r,r,r,r,r\")\n+\t  (match_operand:SI 2 \"cris_bdap_operand\" \"r>Rn,r,>Rn,r>Rn,r,>Rn\"))))\n+   (set (match_operand:SI 3 \"register_operand\" \"=*1,r,r,*1,r,r\")\n \t(plus:SI (match_dup 1)\n \t\t (match_dup 2)))]\n   \"GET_MODE_SIZE (GET_MODE (operands[0])) == UNITS_PER_WORD\n    && cris_side_effect_mode_ok (PLUS, operands, 3, 1, 2, -1, 0)\"\n-  \"*\n {\n-  if (which_alternative == 0\n+  if ((which_alternative == 0 || which_alternative == 3)\n       && (GET_CODE (operands[2]) != CONST_INT\n \t  || INTVAL (operands[2]) > 127\n \t  || INTVAL (operands[2]) < -128\n \t  || CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'N')\n \t  || CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')))\n-    return \\\"#\\\";\n-  return \\\"move.%s0 [%3=%1%S2],%0\\\";\n-}\")\n+    return \"#\";\n+  if (which_alternative < 3)\n+    return \"move.%s0 [%3=%1%S2],%0\";\n+  return \"move [%3=%1%S2],%0\";\n+})\n \f\n ;; Other way around; move to memory.\n \n@@ -650,11 +654,11 @@\n \n (define_insn \"*mov_sidesisf_biap_mem\"\n   [(set (mem (plus:SI\n-\t      (mult:SI (match_operand:SI 0 \"register_operand\" \"r,r,r\")\n-\t\t       (match_operand:SI 1 \"const_int_operand\" \"n,n,n\"))\n-\t      (match_operand:SI 2 \"register_operand\" \"r,r,r\")))\n-\t(match_operand 3 \"register_operand\" \"r,r,r\"))\n-   (set (match_operand:SI 4 \"register_operand\" \"=*2,!3,r\")\n+\t      (mult:SI (match_operand:SI 0 \"register_operand\" \"r,r,r,r,r,r\")\n+\t\t       (match_operand:SI 1 \"const_int_operand\" \"n,n,n,n,n,n\"))\n+\t      (match_operand:SI 2 \"register_operand\" \"r,r,r,r,r,r\")))\n+\t(match_operand 3 \"register_operand\" \"r,r,r,x,x,x\"))\n+   (set (match_operand:SI 4 \"register_operand\" \"=*2,!3,r,*2,!3,r\")\n \t(plus:SI (mult:SI (match_dup 0)\n \t\t\t  (match_dup 1))\n \t\t (match_dup 2)))]\n@@ -663,7 +667,10 @@\n   \"@\n    #\n    #\n-   move.%s3 %3,[%4=%2+%0%T1]\")\n+   move.%s3 %3,[%4=%2+%0%T1]\n+   #\n+   #\n+   move %3,[%4=%2+%0%T1]\")\n \n ;; Split for the case above where we're out of luck with register\n ;; allocation (again, the condition isn't checked for that), and we end up\n@@ -755,27 +762,31 @@\n \n (define_insn \"*mov_sidesisf_mem\"\n   [(set (mem\n-\t (plus:SI (match_operand:SI 0 \"cris_bdap_operand\" \"%r,r,r,r\")\n-\t\t  (match_operand:SI 1 \"cris_bdap_operand\" \"r>Rn,r>Rn,r,>Rn\")))\n-\t(match_operand 2 \"register_operand\" \"r,r,r,r\"))\n-   (set (match_operand:SI 3 \"register_operand\" \"=*0,!2,r,r\")\n+\t (plus:SI\n+\t  (match_operand:SI\n+\t   0 \"cris_bdap_operand\" \"%r,r,r,r,r,r,r,r\")\n+\t  (match_operand:SI\n+\t   1 \"cris_bdap_operand\" \"r>Rn,r>Rn,r,>Rn,r>Rn,r>Rn,r,>Rn\")))\n+\t(match_operand 2 \"register_operand\" \"r,r,r,r,x,x,x,x\"))\n+   (set (match_operand:SI 3 \"register_operand\" \"=*0,!2,r,r,*0,!2,r,r\")\n \t(plus:SI (match_dup 0)\n \t\t (match_dup 1)))]\n   \"GET_MODE_SIZE (GET_MODE (operands[2])) == UNITS_PER_WORD\n    && cris_side_effect_mode_ok (PLUS, operands, 3, 0, 1, -1, 2)\"\n-  \"*\n {\n-  if (which_alternative == 0\n+  if ((which_alternative == 0 || which_alternative == 4)\n       && (GET_CODE (operands[1]) != CONST_INT\n \t  || INTVAL (operands[1]) > 127\n \t  || INTVAL (operands[1]) < -128\n \t  || CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'N')\n \t  || CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'J')))\n-    return \\\"#\\\";\n-  if (which_alternative == 1)\n-    return \\\"#\\\";\n-  return \\\"move.%s2 %2,[%3=%0%S1]\\\";\n-}\")\n+    return \"#\";\n+  if (which_alternative == 1 || which_alternative == 5)\n+    return \"#\";\n+  if (which_alternative < 4)\n+    return \"move.%s2 %2,[%3=%0%S1]\";\n+  return \"move %2,[%3=%0%S1]\";\n+})\n \n ;; Like the biap case, a split where the set in the side-effect gets the\n ;; same register as the input register to the main insn, since the\n@@ -2711,7 +2722,7 @@\n   \"TARGET_HAS_MUL_INSNS\"\n   \"@\n    %!muls.d %2,%1\n-   .error 'untested assembly generated by GCC (smulsi3_highpart): muls.d %1,%2'\n+   %!muls.d %1,%2\n    %!muls.d %2,%1\\;move $mof,%0\n    %!muls.d %1,%2\\;move $mof,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")\n@@ -2729,7 +2740,7 @@\n   \"TARGET_HAS_MUL_INSNS\"\n   \"@\n    %!mulu.d %2,%1\n-   .error 'untested assembly generated by GCC (umulsi3_highpart): mulu.d %1,%2'\n+   %!mulu.d %1,%2\n    %!mulu.d %2,%1\\;move $mof,%0\n    %!mulu.d %1,%2\\;move $mof,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")\n@@ -4986,6 +4997,8 @@\n \t\t\t  [(match_dup 3)\n \t\t\t   (match_operator\n \t\t\t    5 \"cris_mem_op\" [(match_dup 0)])]))]\n+  ;; FIXME: What about DFmode?\n+  ;; Change to GET_MODE_SIZE (GET_MODE (operands[3])) <= UNITS_PER_WORD?\n   \"GET_MODE (operands[3]) != DImode\n    && REGNO (operands[0]) != REGNO (operands[3])\n    && ! CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')"}]}