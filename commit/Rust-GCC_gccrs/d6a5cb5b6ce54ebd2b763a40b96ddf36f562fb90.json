{"sha": "d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZhNWNiNWI2Y2U1NGViZDJiNzYzYTQwYjk2ZGRmMzZmNTYyZmI5MA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:43:18Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:43:18Z"}, "message": "vrecps.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrecps.c: New file.\n\nFrom-SVN: r224651", "tree": {"sha": "9567c8207fc41d4574a8da02b9ac88fa0a016925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9567c8207fc41d4574a8da02b9ac88fa0a016925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90/comments", "author": null, "committer": null, "parents": [{"sha": "650c3cc47767ace889b6961562d7410186568e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650c3cc47767ace889b6961562d7410186568e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650c3cc47767ace889b6961562d7410186568e44"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "5bdbcd79743087a12dfdc3cbcd71f4bafbf3ceff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrecps.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h"}, {"sha": "0e41947f6d57382a55169d5e70b0b5509523f0f4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecps.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecps.c?ref=d6a5cb5b6ce54ebd2b763a40b96ddf36f562fb90", "patch": "@@ -0,0 +1,117 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results with positive input.  */\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc2e19eb7, 0xc2e19eb7 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1db851f, 0xc1db851f,\n+\t\t\t\t\t   0xc1db851f, 0xc1db851f };\n+\n+/* Expected results with FP special values (NaN).  */\n+VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n+\t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n+\n+/* Expected results with FP special values (infinity, 0) and normal\n+   values.  */\n+VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n+VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t       0x40000000, 0x40000000 };\n+\n+/* Expected results with FP special values (infinity, 0).  */\n+VECT_VAR_DECL(expected_fp3,hfloat,32,2) [] = { 0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_fp3,hfloat,32,4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t       0x40000000, 0x40000000 };\n+\n+#define TEST_MSG \"VRECPS/VRECPSQ\"\n+void exec_vrecps(void)\n+{\n+  int i;\n+\n+  /* Basic test: y=vrecps(x), then store the result.  */\n+#define TEST_VRECPS(Q, T1, T2, W, N)\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\\\n+    vrecps##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\\\n+\t\t\tVECT_VAR(vector2, T1, W, N));\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n+\n+  /* No need for integer variants.  */\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector2, float, 32, 2);\n+  DECL_VARIABLE(vector2, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector, , float, f, 32, 2, 12.9f);\n+  VDUP(vector, q, float, f, 32, 4, 9.2f);\n+\n+  VDUP(vector2, , float, f, 32, 2, 8.9f);\n+  VDUP(vector2, q, float, f, 32, 4, 3.2f);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPS(, float, f, 32, 2);\n+  TEST_VRECPS(q, float, f, 32, 4);\n+\n+#define CMT \" (positive input)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, CMT);\n+\n+\n+  /* Test FP variants with special input values (NaN).  */\n+  VDUP(vector, , float, f, 32, 2, NAN);\n+  VDUP(vector2, q, float, f, 32, 4, NAN);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPS(, float, f, 32, 2);\n+  TEST_VRECPS(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (NaN)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n+\n+\n+  /* Test FP variants with special input values (infinity, 0).  */\n+  VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n+  VDUP(vector, q, float, f, 32, 4, 0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, 3.2f); /* Restore a normal value.  */\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPS(, float, f, 32, 2);\n+  TEST_VRECPS(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (infinity, 0) and normal value\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n+\n+\n+  /* Test FP variants with only special input values (infinity, 0).  */\n+  VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n+  VDUP(vector, q, float, f, 32, 4, 0.0f);\n+  VDUP(vector2, , float, f, 32, 2, 0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, HUGE_VALF);\n+\n+  /* Apply the operator */\n+  TEST_VRECPS(, float, f, 32, 2);\n+  TEST_VRECPS(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (infinity, 0)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp3, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp3, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrecps ();\n+  return 0;\n+}"}]}