{"sha": "59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmZjRhMWMxY2JmNWU0Zjc0ODA4N2I5YWViZDZjMjQwOGYwZjlkOQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-12-20T00:42:34Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-12-20T00:42:34Z"}, "message": "darwin.c (machopic_select_section): Rewrite.\n\n2006-12-19  Eric Christopher  <echristo@apple.com>\n\n        * config/darwin.c (machopic_select_section): Rewrite.\n        (darwin_text_section): New.\n        (darwin_rodata_section): Ditto.\n        (darwin_mergeable_string_section): Ditto.\n        (darwin_mergeable_constant_section): Ditto.\n        * config/darwin-sections.def: Add SECTION_STRINGS for cstring_section.\n\nFrom-SVN: r120066", "tree": {"sha": "3d03489462c529086a25f60ecfc7a74fd7ef9c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d03489462c529086a25f60ecfc7a74fd7ef9c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/comments", "author": null, "committer": null, "parents": [{"sha": "91321cd0224ae8cc8864bf45f28c00e1ebe35187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91321cd0224ae8cc8864bf45f28c00e1ebe35187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91321cd0224ae8cc8864bf45f28c00e1ebe35187"}], "stats": {"total": 290, "additions": 188, "deletions": 102}, "files": [{"sha": "e0bcb986e31ad3d043e3cd954a85a1e16a89fb4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "patch": "@@ -1,3 +1,12 @@\n+2006-12-19  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/darwin.c (machopic_select_section): Rewrite.\n+\t(darwin_text_section): New.\n+\t(darwin_rodata_section): Ditto.\n+\t(darwin_mergeable_string_section): Ditto.\n+\t(darwin_mergeable_constant_section): Ditto.\n+\t* config/darwin-sections.def: Add SECTION_STRINGS for cstring_section.\n+\n 2006-12-19  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/pa/pa64-hpux.h (ASM_OUTPUT_EXTERNAL):  Add undef.\n@@ -66,7 +75,7 @@\n \t(init_ssa_operands): Initialize operand memory and free lists.\n \t(fini_ssa_operands): Remove references to free_vuses and free_vdefs.\n \t(ssa_operand_alloc): Use graduated size memory allocation.\n-\t(APPEND_OP_AFTER, MOVE_HEAD_AFTER, MOVE_HEAD_TO_FREELIST, \n+\t(APPEND_OP_AFTER, MOVE_HEAD_AFTER, MOVE_HEAD_TO_FREELIST,\n \tINITIALIZE_USE): Remove.\n \t(alloc_vop): New.  Allocate a virtual operand.\n \t(alloc_vdef, alloc_vuse): Delete.\n@@ -168,7 +177,7 @@\n \t* c-opts.c (c_common_post_options): Enabled by -Wextra.\n \t* c-common.c (empty_body_warning): Replace Wextra with Wempty-body.\n \t* c-parser.c (c_parser_c99_block_statement): Likewise.\n-\t\n+\n 2006-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/30185\n@@ -215,8 +224,8 @@\n \t    Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n \n \t* spu.c (TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): Defined.\n-\t(spu_init_builtins): Mark the SPU_MASK_FOR_LOAD builtin decl as read \n-\tonly.   \n+\t(spu_init_builtins): Mark the SPU_MASK_FOR_LOAD builtin decl as read\n+\tonly.\n \t(spu_expand_builtin_1): Handle the SPU_MASK_FOR_LOAD builtin.\n \t(spu_builtin_mask_for_load): New.\n \t* spu-builtins.def (SPU_MASK_FOR_LOAD): Define new builtin.\n@@ -474,7 +483,7 @@\n 2006-12-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/28624\n-\t* tree-ssa-dom.c (eliminate_degenerate_phis): Use a temporary \n+\t* tree-ssa-dom.c (eliminate_degenerate_phis): Use a temporary\n \tbitmap for EXECUTE_IF_SET_IN_BITMAP.\n \n 2006-12-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n@@ -535,9 +544,9 @@\n \tremove redundant pass_partition_blocks declaration.\n \n 2006-12-12  Andrew Macleod  <amacleod@redhat.com>\n-\t\n+\n \tPR tree-optimization/30159\n-\t* tree-ssa-coalesce.c (coalesce_ssa_name): Process single ssa_name \n+\t* tree-ssa-coalesce.c (coalesce_ssa_name): Process single ssa_name\n \tfunctions in case a default_def coalesce is required.\n \n 2006-12-12  Jakub Jelinek  <jakub@redhat.com>\n@@ -577,9 +586,9 @@\n 2006-12-12  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/vxlib.c: Extract tls related routines into ...\n-\t* config/vxlib-tls.c: New file. \n+\t* config/vxlib-tls.c: New file.\n \t* config/t-vxworks: Add vxlib-tls.c to LIB2FUNCS_EXTRA.\n-\t\n+\n 2006-12-12  Sa Liu  <saliu@de.ibm.com>\n \t    Ben Elliston  <bje@au.ibm.com>\n \n@@ -1204,7 +1213,7 @@\n \n 2006-12-11  Ira Rosen  <irar@il.ibm.com>\n \n-\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Use \n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Use\n \tGIMPLE_STMT_OPERAND.\n \t* tree-vect-transform.c (vect_permute_store_chain): Likewise.\n \t(vect_setup_realignment): Likewise.\n@@ -1326,7 +1335,7 @@\n \t* tree-flow-inline.h (single_imm_use_p): New.  Check for single use.\n \t* tree-outof-ssa.c: Remove header files which aren't needed.\n \t(SSANORM_*): Remove flags.\n-\t(print_exprs_edge, coalesce_abnormal_edges, coalesce_phi_operands, \n+\t(print_exprs_edge, coalesce_abnormal_edges, coalesce_phi_operands,\n \tcoalesce_result_decls_and_copies, coalesce_asm_operands): Remove.\n \t(coalesce_ssa_name): Move to tree-ssa-coalesce.c.\n \t(assign_vars): Use Basevar instead of root_var structure.\n@@ -1402,7 +1411,7 @@\n \ttpa_dump): Moved to tree-ssa-coalesce.c and/or renamed there.\n \t(dump_var_map): Use renamed fields.\n \t* tree-ssa-live.h (struct  _var_map): Modify fields.\n-\t(partition_to_var, version_to_var, var_to_partition): Use renamed \n+\t(partition_to_var, version_to_var, var_to_partition): Use renamed\n \tfields.\n \t(basevar_index): New.  Index of the base variable of a partition.\n \t(num_basevars): New.  Number of unique base variables in partition map.\n@@ -1411,9 +1420,9 @@\n \t(tpa_num_trees, tpa_tree, tpa_first_partition, tpa_next_partition,\n \ttpa_find_tree, tpa_decompact, root_var_init, root_var_num,\n \troot_var, root_var_first_partition, root_var_next_partition,\n-\troot_var_dump, root_var_delete, root_var_remove_partition, \n+\troot_var_dump, root_var_delete, root_var_remove_partition,\n \troot_var_find, root_var_compact, root_var_decompact): Remove.\n-\t(struct partition_pair, struct coalesce_list_d): Moved to \n+\t(struct partition_pair, struct coalesce_list_d): Moved to\n \ttree-ssa-coalesce.c\n \t* tree-ssa-ter.c: Remove header files which aren't needed.\n "}, {"sha": "e335ab4bf64fcf7e2750ea1b2ac3dc1efd615416", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "patch": "@@ -11,7 +11,7 @@ DEF_SECTION (const_data_coal_section, 0,\n \t     \".section __DATA,__const_coal,coalesced\", 0)\n DEF_SECTION (data_coal_section, SECTION_WRITE,\n \t     \".section __DATA,__datacoal_nt,coalesced\", 0)\n-DEF_SECTION (cstring_section, SECTION_MERGE, \".cstring\", 0)\n+DEF_SECTION (cstring_section, SECTION_MERGE | SECTION_STRINGS, \".cstring\", 0)\n DEF_SECTION (literal4_section, SECTION_MERGE, \".literal4\", 0)\n DEF_SECTION (literal8_section, SECTION_MERGE, \".literal8\", 0)\n DEF_SECTION (literal16_section, SECTION_MERGE, \".literal16\", 0)"}, {"sha": "385b89269c0e6ae6383acaee76d8024fe9e08723", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 164, "deletions": 87, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=59ff4a1c1cbf5e4f748087b9aebd6c2408f0f9d9", "patch": "@@ -1095,138 +1095,215 @@ darwin_mark_decl_preserved (const char *name)\n   fputc ('\\n', asm_out_file);\n }\n \n-section *\n-machopic_select_section (tree exp, int reloc,\n-\t\t\t unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n+static section *\n+darwin_text_section (int reloc, int weak)\n {\n-  section *base_section;\n-  bool weak_p = (DECL_P (exp) && DECL_WEAK (exp)\n-\t\t && (lookup_attribute (\"weak\", DECL_ATTRIBUTES (exp))\n-\t\t     || ! lookup_attribute (\"weak_import\",\n-\t\t\t\t\t    DECL_ATTRIBUTES (exp))));\n-\n-  if (TREE_CODE (exp) == FUNCTION_DECL)\n-    {\n-      if (reloc == 1)\n-\tbase_section = (weak_p\n-\t\t\t? darwin_sections[text_unlikely_coal_section]\n-\t\t\t: unlikely_text_section ());\n-      else\n-\tbase_section = weak_p ? darwin_sections[text_coal_section]\n-\t  : text_section;\n-    }\n-  else if (decl_readonly_section_1 (exp, reloc, MACHOPIC_INDIRECT))\n-    base_section = weak_p ? darwin_sections[const_coal_section]\n-      : darwin_sections[const_section];\n-  else if (TREE_READONLY (exp) || TREE_CONSTANT (exp))\n-    base_section = weak_p ? darwin_sections[const_data_coal_section]\n-      : darwin_sections[const_data_section];\n+  if (reloc)\n+    return (weak\n+\t    ? darwin_sections[text_unlikely_coal_section]\n+\t    : unlikely_text_section ());\n   else\n-    base_section = weak_p ? darwin_sections[data_coal_section] : data_section;\n+    return (weak\n+\t    ? darwin_sections[text_coal_section]\n+\t    : text_section);\n+}\n+\n+static section *\n+darwin_rodata_section (int weak)\n+{\n+  return (weak\n+\t  ? darwin_sections[const_coal_section]\n+\t  : darwin_sections[const_section]);\n+}\n \n-  if (TREE_CODE (exp) == STRING_CST\n+static section *\n+darwin_mergeable_string_section (tree exp,\n+\t\t\t\t unsigned HOST_WIDE_INT align)\n+{\n+  if (flag_merge_constants\n+      && TREE_CODE (exp) == STRING_CST\n+      && TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n+      && align <= 256\n       && ((size_t) TREE_STRING_LENGTH (exp)\n \t  == strlen (TREE_STRING_POINTER (exp)) + 1))\n     return darwin_sections[cstring_section];\n-  else if ((TREE_CODE (exp) == INTEGER_CST || TREE_CODE (exp) == REAL_CST)\n-\t   && flag_merge_constants)\n+\n+  return readonly_data_section;\n+}\n+\n+static section *\n+darwin_mergeable_constant_section (tree exp,\n+\t\t\t\t   unsigned HOST_WIDE_INT align)\n+{\n+  enum machine_mode mode = DECL_MODE (exp);\n+  unsigned int modesize = GET_MODE_BITSIZE (mode);\n+\n+  if (flag_merge_constants\n+      && mode != VOIDmode\n+      && mode != BLKmode\n+      && modesize <= align\n+      && align >= 8\n+      && align <= 256\n+      && (align & (align -1)) == 0)\n     {\n       tree size = TYPE_SIZE_UNIT (TREE_TYPE (exp));\n \n-      if (TREE_CODE (size) == INTEGER_CST &&\n-\t  TREE_INT_CST_LOW (size) == 4 &&\n-\t  TREE_INT_CST_HIGH (size) == 0)\n-\treturn darwin_sections[literal4_section];\n-      else if (TREE_CODE (size) == INTEGER_CST &&\n-\t       TREE_INT_CST_LOW (size) == 8 &&\n-\t       TREE_INT_CST_HIGH (size) == 0)\n-\treturn darwin_sections[literal8_section];\n-      else if (TARGET_64BIT\n-\t       && TREE_CODE (size) == INTEGER_CST\n-\t       && TREE_INT_CST_LOW (size) == 16\n+      if (TREE_CODE (size) == INTEGER_CST\n+\t  && TREE_INT_CST_LOW (size) == 4\n+\t  && TREE_INT_CST_HIGH (size) == 0)\n+        return darwin_sections[literal4_section];\n+      else if (TREE_CODE (size) == INTEGER_CST\n+\t       && TREE_INT_CST_LOW (size) == 8\n \t       && TREE_INT_CST_HIGH (size) == 0)\n-\treturn darwin_sections[literal16_section];\n+        return darwin_sections[literal8_section];\n+      else if (TARGET_64BIT\n+               && TREE_CODE (size) == INTEGER_CST\n+               && TREE_INT_CST_LOW (size) == 16\n+               && TREE_INT_CST_HIGH (size) == 0)\n+        return darwin_sections[literal16_section];\n+      else\n+        return readonly_data_section;\n+    }\n+\n+  return readonly_data_section;\n+}\n+\n+section *\n+machopic_select_section (tree decl,\n+\t\t\t int reloc,\n+\t\t\t unsigned HOST_WIDE_INT align)\n+{\n+  bool weak = (DECL_P (decl)\n+\t       && DECL_WEAK (decl)\n+\t       && (lookup_attribute (\"weak\", DECL_ATTRIBUTES (decl))\n+\t\t   || ! lookup_attribute (\"weak_import\",\n+\t\t\t\t\t  DECL_ATTRIBUTES (decl))));\n+  int shlib = flag_pic;\n+  section *base_section;\n+\n+  switch (categorize_decl_for_section (decl, reloc, shlib))\n+    {\n+    case SECCAT_TEXT:\n+      base_section = darwin_text_section (reloc, weak);\n+      break;\n+\n+    case SECCAT_RODATA:\n+    case SECCAT_SRODATA:\n+      base_section = darwin_rodata_section (weak);\n+      break;\n+\n+    case SECCAT_RODATA_MERGE_STR:\n+      base_section = darwin_mergeable_string_section (decl, align);\n+      break;\n+\n+    case SECCAT_RODATA_MERGE_STR_INIT:\n+      base_section = darwin_mergeable_string_section (DECL_INITIAL (decl), align);\n+      break;\n+\n+    case SECCAT_RODATA_MERGE_CONST:\n+      base_section =  darwin_mergeable_constant_section (decl, align);\n+      break;\n+\n+    case SECCAT_DATA:\n+    case SECCAT_DATA_REL:\n+    case SECCAT_DATA_REL_LOCAL:\n+    case SECCAT_DATA_REL_RO:\n+    case SECCAT_DATA_REL_RO_LOCAL:\n+    case SECCAT_SDATA:\n+    case SECCAT_TDATA:\n+    case SECCAT_BSS:\n+    case SECCAT_SBSS:\n+    case SECCAT_TBSS:\n+      if (TREE_READONLY (decl) || TREE_CONSTANT (decl))\n+\tbase_section = weak ? darwin_sections[const_data_coal_section]\n+\t\t\t    : darwin_sections[const_data_section];\n       else\n-\treturn base_section;\n+\tbase_section = weak ? darwin_sections[data_coal_section] : data_section;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n-  else if (TREE_CODE (exp) == CONSTRUCTOR\n-\t   && TREE_TYPE (exp)\n-\t   && TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t   && TYPE_NAME (TREE_TYPE (exp)))\n+\n+  /* Darwin weird special cases.  */\n+  if (TREE_CODE (decl) == CONSTRUCTOR\n+      && TREE_TYPE (decl)\n+      && TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n+      && TYPE_NAME (TREE_TYPE (decl)))\n     {\n-      tree name = TYPE_NAME (TREE_TYPE (exp));\n+      tree name = TYPE_NAME (TREE_TYPE (decl));\n       if (TREE_CODE (name) == TYPE_DECL)\n-\tname = DECL_NAME (name);\n+        name = DECL_NAME (name);\n \n       if (!strcmp (IDENTIFIER_POINTER (name), \"__builtin_ObjCString\"))\n-\t{\n-\t  if (flag_next_runtime)\n-\t    return darwin_sections[objc_constant_string_object_section];\n-\t  else\n-\t    return darwin_sections[objc_string_object_section];\n-\t}\n+        {\n+          if (flag_next_runtime)\n+            return darwin_sections[objc_constant_string_object_section];\n+          else\n+            return darwin_sections[objc_string_object_section];\n+        }\n       else\n-\treturn base_section;\n+        return base_section;\n     }\n-  else if (TREE_CODE (exp) == VAR_DECL &&\n-\t   DECL_NAME (exp) &&\n-\t   TREE_CODE (DECL_NAME (exp)) == IDENTIFIER_NODE &&\n-\t   IDENTIFIER_POINTER (DECL_NAME (exp)) &&\n-\t   !strncmp (IDENTIFIER_POINTER (DECL_NAME (exp)), \"_OBJC_\", 6))\n+  else if (TREE_CODE (decl) == VAR_DECL\n+\t   && DECL_NAME (decl)\n+\t   && TREE_CODE (DECL_NAME (decl)) == IDENTIFIER_NODE\n+\t   && IDENTIFIER_POINTER (DECL_NAME (decl))\n+\t   && !strncmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \"_OBJC_\", 6))\n     {\n-      const char *name = IDENTIFIER_POINTER (DECL_NAME (exp));\n+      const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n \n       if (!strncmp (name, \"_OBJC_CLASS_METHODS_\", 20))\n-\treturn darwin_sections[objc_cls_meth_section];\n+        return darwin_sections[objc_cls_meth_section];\n       else if (!strncmp (name, \"_OBJC_INSTANCE_METHODS_\", 23))\n-\treturn darwin_sections[objc_inst_meth_section];\n+        return darwin_sections[objc_inst_meth_section];\n       else if (!strncmp (name, \"_OBJC_CATEGORY_CLASS_METHODS_\", 20))\n-\treturn darwin_sections[objc_cat_cls_meth_section];\n+        return darwin_sections[objc_cat_cls_meth_section];\n       else if (!strncmp (name, \"_OBJC_CATEGORY_INSTANCE_METHODS_\", 23))\n-\treturn darwin_sections[objc_cat_inst_meth_section];\n+        return darwin_sections[objc_cat_inst_meth_section];\n       else if (!strncmp (name, \"_OBJC_CLASS_VARIABLES_\", 22))\n-\treturn darwin_sections[objc_class_vars_section];\n+        return darwin_sections[objc_class_vars_section];\n       else if (!strncmp (name, \"_OBJC_INSTANCE_VARIABLES_\", 25))\n-\treturn darwin_sections[objc_instance_vars_section];\n+        return darwin_sections[objc_instance_vars_section];\n       else if (!strncmp (name, \"_OBJC_CLASS_PROTOCOLS_\", 22))\n-\treturn darwin_sections[objc_cat_cls_meth_section];\n+        return darwin_sections[objc_cat_cls_meth_section];\n       else if (!strncmp (name, \"_OBJC_CLASS_NAME_\", 17))\n-\treturn darwin_sections[objc_class_names_section];\n+        return darwin_sections[objc_class_names_section];\n       else if (!strncmp (name, \"_OBJC_METH_VAR_NAME_\", 20))\n-\treturn darwin_sections[objc_meth_var_names_section];\n+        return darwin_sections[objc_meth_var_names_section];\n       else if (!strncmp (name, \"_OBJC_METH_VAR_TYPE_\", 20))\n-\treturn darwin_sections[objc_meth_var_types_section];\n+        return darwin_sections[objc_meth_var_types_section];\n       else if (!strncmp (name, \"_OBJC_CLASS_REFERENCES\", 22))\n-\treturn darwin_sections[objc_cls_refs_section];\n+        return darwin_sections[objc_cls_refs_section];\n       else if (!strncmp (name, \"_OBJC_CLASS_\", 12))\n-\treturn darwin_sections[objc_class_section];\n+        return darwin_sections[objc_class_section];\n       else if (!strncmp (name, \"_OBJC_METACLASS_\", 16))\n-\treturn darwin_sections[objc_meta_class_section];\n+        return darwin_sections[objc_meta_class_section];\n       else if (!strncmp (name, \"_OBJC_CATEGORY_\", 15))\n-\treturn darwin_sections[objc_category_section];\n+        return darwin_sections[objc_category_section];\n       else if (!strncmp (name, \"_OBJC_SELECTOR_REFERENCES\", 25))\n-\treturn darwin_sections[objc_selector_refs_section];\n+        return darwin_sections[objc_selector_refs_section];\n       else if (!strncmp (name, \"_OBJC_SELECTOR_FIXUP\", 20))\n-\treturn darwin_sections[objc_selector_fixup_section];\n+        return darwin_sections[objc_selector_fixup_section];\n       else if (!strncmp (name, \"_OBJC_SYMBOLS\", 13))\n-\treturn darwin_sections[objc_symbols_section];\n+        return darwin_sections[objc_symbols_section];\n       else if (!strncmp (name, \"_OBJC_MODULES\", 13))\n-\treturn darwin_sections[objc_module_info_section];\n+        return darwin_sections[objc_module_info_section];\n       else if (!strncmp (name, \"_OBJC_IMAGE_INFO\", 16))\n-\treturn darwin_sections[objc_image_info_section];\n+        return darwin_sections[objc_image_info_section];\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_INSTANCE_METHODS_\", 32))\n-\treturn darwin_sections[objc_cat_inst_meth_section];\n+        return darwin_sections[objc_cat_inst_meth_section];\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_CLASS_METHODS_\", 29))\n-\treturn darwin_sections[objc_cat_cls_meth_section];\n+        return darwin_sections[objc_cat_cls_meth_section];\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_REFS_\", 20))\n-\treturn darwin_sections[objc_cat_cls_meth_section];\n+        return darwin_sections[objc_cat_cls_meth_section];\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_\", 15))\n-\treturn darwin_sections[objc_protocol_section];\n+        return darwin_sections[objc_protocol_section];\n       else\n-\treturn base_section;\n+        return base_section;\n     }\n-  else\n-    return base_section;\n+\n+  return base_section;\n }\n \n /* This can be called with address expressions as \"rtx\"."}]}