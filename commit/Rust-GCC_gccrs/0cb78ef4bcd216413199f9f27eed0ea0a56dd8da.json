{"sha": "0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiNzhlZjRiY2QyMTY0MTMxOTlmOWYyN2VlZDBlYTBhNTZkZDhkYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-03T09:47:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-03T09:47:47Z"}, "message": "Define std::hash specializations for C++17 PMR strings\n\nThese hash specializations should have been added when the pmr::string\nand related typedefs were added.\n\n\t* include/std/string (__hash_string_base): New class template defining\n\toperator() for hashing strings.\n\t(hash<pmr::string>, hash<pmr::u8string>, hash<pmr::u16string>)\n\t(hash<pmr::u32string>, hash<pmr::wstring>): Define for C++17.\n\t* testsuite/21_strings/basic_string/hash/hash.cc: New test.\n\t* testsuite/21_strings/basic_string/hash/hash_char8_t.cc: New test.\n\nFrom-SVN: r270116", "tree": {"sha": "c4d7fd4a00fd3526c53a1055a9e91973a4a0fd1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d7fd4a00fd3526c53a1055a9e91973a4a0fd1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a3976b14e329421e51a2aa43e516a6871cb5e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3976b14e329421e51a2aa43e516a6871cb5e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3976b14e329421e51a2aa43e516a6871cb5e6b"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "422ec850a5dd0ea3d74959f8bf2c4c3de725e6f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "patch": "@@ -1,3 +1,12 @@\n+2019-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/string (__hash_string_base): New class template defining\n+\toperator() for hashing strings.\n+\t(hash<pmr::string>, hash<pmr::u8string>, hash<pmr::u16string>)\n+\t(hash<pmr::u32string>, hash<pmr::wstring>): Define for C++17.\n+\t* testsuite/21_strings/basic_string/hash/hash.cc: New test.\n+\t* testsuite/21_strings/basic_string/hash/hash_char8_t.cc: New test.\n+\n 2019-04-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tUse single-visitation in variant assignment and swap and relops."}, {"sha": "6ccc06f337aabb253978ee964891330e6dac848d", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "patch": "@@ -74,6 +74,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using wstring   = basic_string<wchar_t>;\n #endif\n   } // namespace pmr\n+\n+  template<typename _Str>\n+    struct __hash_string_base\n+    : public __hash_base<size_t, _Str>\n+    {\n+      size_t\n+      operator()(const _Str& __s) const noexcept\n+      { return hash<basic_string_view<typename _Str::value_type>>{}(__s); }\n+    };\n+\n+  template<>\n+    struct hash<pmr::string>\n+    : public __hash_string_base<pmr::string>\n+    { };\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct hash<pmr::u8string>\n+    : public __hash_string_base<pmr::u8string>\n+    { };\n+#endif\n+  template<>\n+    struct hash<pmr::u16string>\n+    : public __hash_string_base<pmr::u16string>\n+    { };\n+  template<>\n+    struct hash<pmr::u32string>\n+    : public __hash_string_base<pmr::u32string>\n+    { };\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct hash<pmr::wstring>\n+    : public __hash_string_base<pmr::wstring>\n+    { };\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17"}, {"sha": "9bdf9bd41abb2252318d387127eead9626ac9e7d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash.cc?ref=0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <string>\n+#include <memory_resource>\n+#include <testsuite_hooks.h>\n+\n+// C++17 24.3.5 [basic.string.hash]\n+// If S is one of these string types, SV is the corresponding string view type,\n+// and s is an object of type S, then hash<S>()(s) == hash<SV>()(SV(s)).\n+\n+template<typename S>\n+  bool\n+  test(const S& s)\n+  {\n+    using std::hash;\n+    using SV = std::basic_string_view<typename S::value_type>;\n+    return hash<S>()(s) == hash<SV>()(SV(s));\n+  }\n+\n+void\n+test01()\n+{\n+  VERIFY( test(std::string(\"a narrow string\")) );\n+  VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n+  VERIFY( test(std::u16string(u\"a utf-16 string\")) );\n+  VERIFY( test(std::pmr::u16string(u\"a utf-16 string, but with PMR!\")) );\n+  VERIFY( test(std::u32string(U\"a utf-32 string\")) );\n+  VERIFY( test(std::pmr::u32string(U\"a utf-32 string, but with PMR!\")) );\n+#if _GLIBCXX_USE_WCHAR_T\n+  VERIFY( test(std::wstring(L\"a wide string\")) );\n+  VERIFY( test(std::pmr::wstring(L\"a wide string, but with PMR!\")) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "0e4cfae4b76f8acf0800cb9bae1ad7e55fd607b5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/hash_char8_t.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fhash_char8_t.cc?ref=0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <string>\n+#include <memory_resource>\n+#include <testsuite_hooks.h>\n+\n+// C++2a N4810 21.3.5 [basic.string.hash]\n+// If S is one of these string types, SV is the corresponding string view type,\n+// and s is an object of type S, then hash<S>()(s) == hash<SV>()(SV(s)).\n+\n+template<typename S>\n+  bool\n+  test(const S& s)\n+  {\n+    using std::hash;\n+    using SV = std::basic_string_view<typename S::value_type>;\n+    return hash<S>()(s) == hash<SV>()(SV(s));\n+  }\n+\n+void\n+test01()\n+{\n+  VERIFY( test(std::string(\"a narrow string\")) );\n+  VERIFY( test(std::pmr::string(\"a narrow string, but with PMR!\")) );\n+  VERIFY( test(std::u8string(u8\"a utf-8 string\")) );\n+  VERIFY( test(std::pmr::u8string(u8\"a utf-8 string, but with PMR!\")) );\n+}\n+\n+void\n+test02()\n+{\n+  using std::hash;\n+  std::string native(\"a string, a string, my stringdom for a string\");\n+  std::u8string utf8(u8\"a string, a string, my stringdom for a string\");\n+  VERIFY( hash<std::string>()(native) == hash<std::u8string>()(utf8) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}