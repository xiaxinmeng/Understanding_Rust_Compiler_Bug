{"sha": "f6b5c26b8a6c827ec20445daad76a6cee0435e0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiNWMyNmI4YTZjODI3ZWMyMDQ0NWRhYWQ3NmE2Y2VlMDQzNWUwZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-20T07:34:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-20T07:34:55Z"}, "message": "graphite-sese-to-poly.c (extract_affine): Properly handle POINTER_PLUS_EXPR, BIT_NOT_EXPR and conversion to signed.\n\n2017-09-20  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-sese-to-poly.c (extract_affine): Properly handle\n\tPOINTER_PLUS_EXPR, BIT_NOT_EXPR and conversion to signed.\n\nFrom-SVN: r253001", "tree": {"sha": "6b578530d2ea16b4385843b92344b9473b2fabb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b578530d2ea16b4385843b92344b9473b2fabb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b5c26b8a6c827ec20445daad76a6cee0435e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b5c26b8a6c827ec20445daad76a6cee0435e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b5c26b8a6c827ec20445daad76a6cee0435e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b5c26b8a6c827ec20445daad76a6cee0435e0e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73fe2f3229f1e1be902ffd09c42b444e5af9e7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe2f3229f1e1be902ffd09c42b444e5af9e7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fe2f3229f1e1be902ffd09c42b444e5af9e7f5"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "ae6d143d6aea65fed86fdb01850e5ee161527f8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5c26b8a6c827ec20445daad76a6cee0435e0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5c26b8a6c827ec20445daad76a6cee0435e0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6b5c26b8a6c827ec20445daad76a6cee0435e0e", "patch": "@@ -1,3 +1,8 @@\n+2017-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-sese-to-poly.c (extract_affine): Properly handle\n+\tPOINTER_PLUS_EXPR, BIT_NOT_EXPR and conversion to signed.\n+\n 2017-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81373"}, {"sha": "5d6ba67bbce41be8bb992d4f02a0a51f8844f05d", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b5c26b8a6c827ec20445daad76a6cee0435e0e/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b5c26b8a6c827ec20445daad76a6cee0435e0e/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=f6b5c26b8a6c827ec20445daad76a6cee0435e0e", "patch": "@@ -237,6 +237,7 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n     return NULL;\n   }\n \n+  tree type = TREE_TYPE (e);\n   switch (TREE_CODE (e))\n     {\n     case POLYNOMIAL_CHREC:\n@@ -247,8 +248,22 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       res = extract_affine_mul (s, e, space);\n       break;\n \n-    case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:\n+      {\n+\tlhs = extract_affine (s, TREE_OPERAND (e, 0), isl_space_copy (space));\n+\t/* The RHS of a pointer-plus expression is to be interpreted\n+\t   as signed value.  Try to look through a sign-changing conversion\n+\t   first.  */\n+\ttree tem = TREE_OPERAND (e, 1);\n+\tSTRIP_NOPS (tem);\n+\trhs = extract_affine (s, tem, space);\n+\tif (TYPE_UNSIGNED (TREE_TYPE (tem)))\n+\t  rhs = wrap (rhs, TYPE_PRECISION (type) - 1);\n+\tres = isl_pw_aff_add (lhs, rhs);\n+\tbreak;\n+      }\n+\n+    case PLUS_EXPR:\n       lhs = extract_affine (s, TREE_OPERAND (e, 0), isl_space_copy (space));\n       rhs = extract_affine (s, TREE_OPERAND (e, 1), space);\n       res = isl_pw_aff_add (lhs, rhs);\n@@ -260,8 +275,13 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       res = isl_pw_aff_sub (lhs, rhs);\n       break;\n \n-    case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n+      lhs = extract_affine (s, integer_minus_one_node, isl_space_copy (space));\n+      rhs = extract_affine (s, TREE_OPERAND (e, 0), space);\n+      res = isl_pw_aff_sub (lhs, rhs);\n+      break;\n+\n+    case NEGATE_EXPR:\n       lhs = extract_affine (s, TREE_OPERAND (e, 0), isl_space_copy (space));\n       rhs = extract_affine (s, integer_minus_one_node, space);\n       res = isl_pw_aff_mul (lhs, rhs);\n@@ -279,6 +299,12 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       return res;\n \n     CASE_CONVERT:\n+      res = extract_affine (s, TREE_OPERAND (e, 0), space);\n+      /* signed values, even if overflow is undefined, get modulo-reduced.  */\n+      if (! TYPE_UNSIGNED (type))\n+\tres = wrap (res, TYPE_PRECISION (type) - 1);\n+      break;\n+\n     case NON_LVALUE_EXPR:\n       res = extract_affine (s, TREE_OPERAND (e, 0), space);\n       break;\n@@ -288,7 +314,6 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       break;\n     }\n \n-  tree type = TREE_TYPE (e);\n   if (TYPE_UNSIGNED (type))\n     res = wrap (res, TYPE_PRECISION (type));\n "}]}