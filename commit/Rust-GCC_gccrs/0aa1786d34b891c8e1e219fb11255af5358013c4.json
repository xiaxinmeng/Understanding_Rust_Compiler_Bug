{"sha": "0aa1786d34b891c8e1e219fb11255af5358013c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhMTc4NmQzNGI4OTFjOGUxZTIxOWZiMTEyNTVhZjUzNTgwMTNjNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-09T16:53:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-09T16:56:54Z"}, "message": "libstdc++: Fix build failure for target with no way to sleep\n\nIn previous releases the std::this_thread::sleep_for function was only\ndeclared if the target supports multiple threads. I changed that\nrecently in r11-2649-g5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb so that\nsleep_for could be used single-threaded. But that means that targets\nusing --disable-threads are now required to provide some way to sleep.\nThis breaks the build for (at least) AVR when trying to build a hosted\nlibrary.\n\nThis patch adds a new autoconf macro that is defined when no way to\nsleep is available, and uses that to suppress the sleeping functions in\nstd::this_thread.\n\nThe #error in src/c++11/thread.cc is retained for the case where there\nis no sleep function available but multiple threads are supported. This\nis consistent with previous releases, but that #error could probably be\nremoved without any consequences.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Define NO_SLEEP\n\tif none of nanosleep, sleep and Sleep is available.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/std/thread [_GLIBCXX_NO_SLEEP] (__sleep_for): Do\n\tnot declare.\n\t[_GLIBCXX_NO_SLEEP] (sleep_for, sleep_until): Do not\n\tdefine.\n\t* src/c++11/thread.cc [_GLIBCXX_NO_SLEEP] (__sleep_for): Do\n\tnot define.", "tree": {"sha": "ffcd99b767bd68d2d519d0e697977203496133f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffcd99b767bd68d2d519d0e697977203496133f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aa1786d34b891c8e1e219fb11255af5358013c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa1786d34b891c8e1e219fb11255af5358013c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa1786d34b891c8e1e219fb11255af5358013c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa1786d34b891c8e1e219fb11255af5358013c4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84d08255f9f2f7137caf648fcc9dc36101bc893c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d08255f9f2f7137caf648fcc9dc36101bc893c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d08255f9f2f7137caf648fcc9dc36101bc893c"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "61191812c926cdba88a83c44773fdd9d38c44bb6", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=0aa1786d34b891c8e1e219fb11255af5358013c4", "patch": "@@ -1626,16 +1626,22 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n   fi\n \n   if test x\"$ac_has_nanosleep$ac_has_sleep\" = x\"nono\"; then\n+      ac_no_sleep=yes\n       AC_MSG_CHECKING([for Sleep])\n       AC_TRY_COMPILE([#include <windows.h>],\n                      [Sleep(1)],\n                      [ac_has_win32_sleep=yes],[ac_has_win32_sleep=no])\n       if test x\"$ac_has_win32_sleep\" = x\"yes\"; then\n         AC_DEFINE(HAVE_WIN32_SLEEP,1, [Defined if Sleep exists.])\n+\tac_no_sleep=no\n       fi\n       AC_MSG_RESULT($ac_has_win32_sleep)\n   fi\n \n+  if test x\"$ac_no_sleep\" = x\"yes\"; then\n+    AC_DEFINE(NO_SLEEP,1, [Defined if no way to sleep is available.])\n+  fi\n+\n   AC_SUBST(GLIBCXX_LIBS)\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\""}, {"sha": "17b11997d48af71adbb03a9cdcb3ab1140ad2da3", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=0aa1786d34b891c8e1e219fb11255af5358013c4", "patch": "@@ -767,6 +767,9 @@\n    */\n #undef LT_OBJDIR\n \n+/* Defined if no way to sleep is available. */\n+#undef NO_SLEEP\n+\n /* Name of package */\n #undef PACKAGE\n "}, {"sha": "d7a4826b8e209978b0a135fde6ea4bd96e2fd368", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0aa1786d34b891c8e1e219fb11255af5358013c4", "patch": "@@ -21751,6 +21751,7 @@ $as_echo \"$ac_has_usleep\" >&6; }\n   fi\n \n   if test x\"$ac_has_nanosleep$ac_has_sleep\" = x\"nono\"; then\n+      ac_no_sleep=yes\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for Sleep\" >&5\n $as_echo_n \"checking for Sleep... \" >&6; }\n       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -21774,11 +21775,18 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n \n $as_echo \"#define HAVE_WIN32_SLEEP 1\" >>confdefs.h\n \n+\tac_no_sleep=no\n       fi\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_win32_sleep\" >&5\n $as_echo \"$ac_has_win32_sleep\" >&6; }\n   fi\n \n+  if test x\"$ac_no_sleep\" = x\"yes\"; then\n+\n+$as_echo \"#define NO_SLEEP 1\" >>confdefs.h\n+\n+  fi\n+\n \n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\""}, {"sha": "8d0ede2b6c2a878d92cb3192da6bd4ec0cb06442", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=0aa1786d34b891c8e1e219fb11255af5358013c4", "patch": "@@ -122,8 +122,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   namespace this_thread\n   {\n+#ifndef _GLIBCXX_NO_SLEEP\n+\n+#ifndef _GLIBCXX_USE_NANOSLEEP\n     void\n     __sleep_for(chrono::seconds, chrono::nanoseconds);\n+#endif\n \n     /// this_thread::sleep_for\n     template<typename _Rep, typename _Period>\n@@ -168,7 +172,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __now = _Clock::now();\n \t  }\n       }\n-  }\n+  } // namespace this_thread\n+#endif // ! NO_SLEEP\n \n #ifdef __cpp_lib_jthread\n "}, {"sha": "62f6ddcd80225a66f0906d33553805bf650ec346", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa1786d34b891c8e1e219fb11255af5358013c4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=0aa1786d34b891c8e1e219fb11255af5358013c4", "patch": "@@ -35,7 +35,8 @@\n #  include <unistd.h>\n # elif defined(_GLIBCXX_HAVE_WIN32_SLEEP)\n #  include <windows.h>\n-# else\n+# elif defined _GLIBCXX_NO_SLEEP && defined _GLIBCXX_HAS_GTHREADS\n+// We expect to be able to sleep for targets that support multiple threads:\n #  error \"No sleep function known for this target\"\n # endif\n #endif\n@@ -196,6 +197,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #endif // _GLIBCXX_HAS_GTHREADS\n \n+#ifndef _GLIBCXX_NO_SLEEP\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -252,3 +254,4 @@ namespace this_thread\n }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n+#endif // ! NO_SLEEP"}]}