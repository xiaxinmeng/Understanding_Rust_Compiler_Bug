{"sha": "0a28aef93e6edbd2a0858840e3856ce4e0b4037b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyOGFlZjkzZTZlZGJkMmEwODU4ODQwZTM4NTZjZTRlMGI0MDM3Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-24T23:50:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-24T23:50:56Z"}, "message": "reload.c (find_reloads_subreg_address): Fail the substitution if the resulting address is insufficiently aligned.\n\n        * reload.c (find_reloads_subreg_address): Fail the substitution\n        if the resulting address is insufficiently aligned.\n\nFrom-SVN: r39250", "tree": {"sha": "b56353a0eed78434279ea535f0b49194fb4a6e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56353a0eed78434279ea535f0b49194fb4a6e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a28aef93e6edbd2a0858840e3856ce4e0b4037b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a28aef93e6edbd2a0858840e3856ce4e0b4037b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a28aef93e6edbd2a0858840e3856ce4e0b4037b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a28aef93e6edbd2a0858840e3856ce4e0b4037b/comments", "author": null, "committer": null, "parents": [{"sha": "bf5582ec663dce078a2baebe444e0a656ab1ee60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5582ec663dce078a2baebe444e0a656ab1ee60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf5582ec663dce078a2baebe444e0a656ab1ee60"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "fbc0142fcf6bde44f3d71b5b25006f338158ffc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a28aef93e6edbd2a0858840e3856ce4e0b4037b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a28aef93e6edbd2a0858840e3856ce4e0b4037b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a28aef93e6edbd2a0858840e3856ce4e0b4037b", "patch": "@@ -1,3 +1,8 @@\n+2001-01-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* reload.c (find_reloads_subreg_address): Fail the substitution\n+\tif the resulting address is insufficiently aligned.\n+\n 2001-01-24  DJ Delorie  <dj@redhat.com>\n \n \t* combine.c (combine_simplify_rtx): If the modes are all VOIDmode,"}, {"sha": "5f27744057d53a558ae65e092a92333b77b16ce3", "filename": "gcc/reload.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a28aef93e6edbd2a0858840e3856ce4e0b4037b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a28aef93e6edbd2a0858840e3856ce4e0b4037b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=0a28aef93e6edbd2a0858840e3856ce4e0b4037b", "patch": "@@ -5648,21 +5648,42 @@ find_reloads_subreg_address (x, force_replace, opnum, type,\n \t      || ! rtx_equal_p (tem, reg_equiv_mem[regno]))\n \t    {\n \t      int offset = SUBREG_WORD (x) * UNITS_PER_WORD;\n+\t      unsigned outer_size = GET_MODE_SIZE (GET_MODE (x));\n+\t      unsigned inner_size = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n \n \t      if (BYTES_BIG_ENDIAN)\n \t\t{\n-\t\t  int size;\n-\n-\t\t  size = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n-\t\t  offset += MIN (size, UNITS_PER_WORD);\n-\t\t  size = GET_MODE_SIZE (GET_MODE (x));\n-\t\t  offset -= MIN (size, UNITS_PER_WORD);\n+\t\t  offset += MIN (inner_size, UNITS_PER_WORD);\n+\t\t  offset -= MIN (outer_size, UNITS_PER_WORD);\n \t\t}\n \t      XEXP (tem, 0) = plus_constant (XEXP (tem, 0), offset);\n \t      PUT_MODE (tem, GET_MODE (x));\n+\n+\t      /* If this was a paradoxical subreg that we replaced, the\n+\t\t resulting memory must be sufficiently aligned to allow\n+\t\t us to widen the mode of the memory.  */\n+\t      if (outer_size > inner_size && STRICT_ALIGNMENT)\n+\t\t{\n+\t\t  rtx base;\n+\n+\t\t  base = XEXP (tem, 0);\n+\t\t  if (GET_CODE (base) == PLUS)\n+\t\t    {\n+\t\t      if (GET_CODE (XEXP (base, 1)) == CONST_INT\n+\t\t\t  && INTVAL (XEXP (base, 1)) % outer_size != 0)\n+\t\t\treturn x;\n+\t\t      base = XEXP (base, 0);\n+\t\t    }\n+\t\t  if (GET_CODE (base) != REG\n+\t\t      || (REGNO_POINTER_ALIGN (REGNO (base))\n+\t\t\t  < outer_size * BITS_PER_UNIT))\n+\t\t    return x;\n+\t\t}\n+\n \t      find_reloads_address (GET_MODE (tem), &tem, XEXP (tem, 0),\n \t\t\t\t    &XEXP (tem, 0), opnum, ADDR_TYPE (type),\n \t\t\t\t    ind_levels, insn);\n+\n \t      /* If this is not a toplevel operand, find_reloads doesn't see\n \t\t this substitution.  We have to emit a USE of the pseudo so\n \t\t that delete_output_reload can see it.  */"}]}