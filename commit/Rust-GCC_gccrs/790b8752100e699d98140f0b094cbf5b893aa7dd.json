{"sha": "790b8752100e699d98140f0b094cbf5b893aa7dd", "node_id": "C_kwDOANBUbNoAKDc5MGI4NzUyMTAwZTY5OWQ5ODE0MGYwYjA5NGNiZjViODkzYWE3ZGQ", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-10-08T14:19:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:40Z"}, "message": "[Ada] Improve error messages for dot notation when -gnatX not used\n\ngcc/ada/\n\n\t* einfo.ads (Direct_Primitive_Operations): Update the doc to\n\tindicate that this field is used for all types now.\n\t* sem_ch4.adb (Try_Object_Operation): Add parameter\n\tAllow_Extensions set to True to pretend that extensions are\n\tallowed.\n\t* sem_ch4.ads: Same.\n\t* sem_ch6.adb: Do not require Extensions_Allowed.\n\t* sem_ch8.adb (Find_Selected_Component): Remove duplicate\n\t\"where\" in comment.  Improve the error messages regarding use of\n\tprefixed calls.", "tree": {"sha": "e7d313e8e288969e63fee93dfca9cbeb0791f5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7d313e8e288969e63fee93dfca9cbeb0791f5cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/790b8752100e699d98140f0b094cbf5b893aa7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790b8752100e699d98140f0b094cbf5b893aa7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790b8752100e699d98140f0b094cbf5b893aa7dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790b8752100e699d98140f0b094cbf5b893aa7dd/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8de8e127b06017f2c3602c81de99ad5937ef9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8de8e127b06017f2c3602c81de99ad5937ef9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8de8e127b06017f2c3602c81de99ad5937ef9d"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "4f748703209b79ad580298718010721be13e38fb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=790b8752100e699d98140f0b094cbf5b893aa7dd", "patch": "@@ -946,16 +946,17 @@ package Einfo is\n \n --    Direct_Primitive_Operations\n --       Defined in tagged types and subtypes (including synchronized types),\n---       in tagged private types, and in tagged incomplete types. However, when\n---       Extensions_Allowed is True (-gnatX), also defined for untagged types\n---       (for support of the extension feature of prefixed calls for untagged\n---       types). This field is an element list of entities for primitive\n---       operations of the type. For incomplete types the list is always empty.\n---       In order to follow the C++ ABI, entities of primitives that come from\n---       source must be stored in this list in the order of their occurrence in\n---       the sources. When expansion is disabled, the corresponding record type\n---       of a synchronized type is not constructed. In that case, such types\n---       carry this attribute directly.\n+--       in tagged private types, and in tagged incomplete types. Moreover, it\n+--       is also defined for untagged types, both when Extensions_Allowed is\n+--       True (-gnatX) to support the extension feature of prefixed calls for\n+--       untagged types, and when Extensions_Allowed is False to get better\n+--       error messages. This field is an element list of entities for\n+--       primitive operations of the type. For incomplete types the list is\n+--       always empty. In order to follow the C++ ABI, entities of primitives\n+--       that come from source must be stored in this list in the order of\n+--       their occurrence in the sources. When expansion is disabled, the\n+--       corresponding record type of a synchronized type is not constructed.\n+--       In that case, such types carry this attribute directly.\n \n --    Directly_Designated_Type\n --       Defined in access types. This field points to the type that is"}, {"sha": "3ffe7219320ba3e351061fb68f8419df09773c39", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=790b8752100e699d98140f0b094cbf5b893aa7dd", "patch": "@@ -9032,7 +9032,9 @@ package body Sem_Ch4 is\n    --------------------------\n \n    function Try_Object_Operation\n-     (N : Node_Id; CW_Test_Only : Boolean := False) return Boolean\n+     (N                : Node_Id;\n+      CW_Test_Only     : Boolean := False;\n+      Allow_Extensions : Boolean := False) return Boolean\n    is\n       K              : constant Node_Kind  := Nkind (Parent (N));\n       Is_Subprg_Call : constant Boolean    := K in N_Subprogram_Call;\n@@ -9719,7 +9721,7 @@ package body Sem_Ch4 is\n \n          if (not Is_Tagged_Type (Obj_Type)\n               and then\n-                (not Extensions_Allowed\n+                (not (Extensions_Allowed or Allow_Extensions)\n                   or else not Present (Primitive_Operations (Obj_Type))))\n            or else Is_Incomplete_Type (Obj_Type)\n          then\n@@ -9748,7 +9750,7 @@ package body Sem_Ch4 is\n                --  have homographic prefixed-view operations that could result\n                --  in an ambiguity, but handling properly may be tricky. ???)\n \n-               if Extensions_Allowed\n+               if (Extensions_Allowed or Allow_Extensions)\n                  and then not Prim_Result\n                  and then Is_Named_Access_Type (Prev_Obj_Type)\n                  and then Present (Direct_Primitive_Operations (Prev_Obj_Type))"}, {"sha": "395b81e9ce8ec8c40ace50e8325379d72f8a3151", "filename": "gcc/ada/sem_ch4.ads", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.ads?ref=790b8752100e699d98140f0b094cbf5b893aa7dd", "patch": "@@ -65,15 +65,18 @@ package Sem_Ch4  is\n    --  on the prefix and the indexes.\n \n    function Try_Object_Operation\n-     (N            : Node_Id;\n-      CW_Test_Only : Boolean := False) return Boolean;\n-   --  Ada 2005 (AI-252): Support the object.operation notation. If node N\n-   --  is a call in this notation, it is transformed into a normal subprogram\n-   --  call where the prefix is a parameter, and True is returned. If node\n-   --  N is not of this form, it is unchanged, and False is returned. If\n-   --  CW_Test_Only is true then N is an N_Selected_Component node which\n-   --  is part of a call to an entry or procedure of a tagged concurrent\n-   --  type and this routine is invoked to search for class-wide subprograms\n-   --  conflicting with the target entity.\n+     (N                : Node_Id;\n+      CW_Test_Only     : Boolean := False;\n+      Allow_Extensions : Boolean := False) return Boolean;\n+   --  Ada 2005 (AI-252): Support the object.operation notation. If node N is\n+   --  a call in this notation, it is transformed into a normal subprogram call\n+   --  where the prefix is a parameter, and True is returned. If node N is not\n+   --  of this form, it is unchanged, and False is returned. If CW_Test_Only is\n+   --  true then N is an N_Selected_Component node which is part of a call to\n+   --  an entry or procedure of a tagged concurrent type and this routine is\n+   --  invoked to search for class-wide subprograms conflicting with the target\n+   --  entity. If Allow_Extensions is True, then a prefixed call of a primitive\n+   --  of a non-tagged type is allowed as if Extensions_Allowed returned True.\n+   --  This is used to issue better error messages.\n \n end Sem_Ch4;"}, {"sha": "9c21732e5f9a2166e48e78fe0f70fb96e65783c7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=790b8752100e699d98140f0b094cbf5b893aa7dd", "patch": "@@ -11380,11 +11380,11 @@ package body Sem_Ch6 is\n          if not Comes_From_Source (S) then\n \n             --  Add an inherited primitive for an untagged derived type to\n-            --  Derived_Type's list of primitives. Tagged primitives are dealt\n-            --  with in Check_Dispatching_Operation.\n+            --  Derived_Type's list of primitives. Tagged primitives are\n+            --  dealt with in Check_Dispatching_Operation. Do this even when\n+            --  Extensions_Allowed is False to issue better error messages.\n \n             if Present (Derived_Type)\n-              and then Extensions_Allowed\n               and then not Is_Tagged_Type (Derived_Type)\n             then\n                Append_Unique_Elmt (S, Primitive_Operations (Derived_Type));\n@@ -11418,13 +11418,13 @@ package body Sem_Ch6 is\n                   Set_Has_Primitive_Operations (B_Typ);\n                   Set_Is_Primitive (S);\n \n-                  --  Add a primitive for an untagged type to B_Typ's list\n-                  --  of primitives. Tagged primitives are dealt with in\n-                  --  Check_Dispatching_Operation.\n+                  --  Add a primitive for an untagged type to B_Typ's\n+                  --  list of primitives. Tagged primitives are dealt with\n+                  --  in Check_Dispatching_Operation. Do this even when\n+                  --  Extensions_Allowed is False to issue better error\n+                  --  messages.\n \n-                  if Extensions_Allowed\n-                    and then not Is_Tagged_Type (B_Typ)\n-                  then\n+                  if not Is_Tagged_Type (B_Typ) then\n                      Add_Or_Replace_Untagged_Primitive (B_Typ);\n                   end if;\n \n@@ -11463,11 +11463,11 @@ package body Sem_Ch6 is\n \n                   --  Add a primitive for an untagged type to B_Typ's list\n                   --  of primitives. Tagged primitives are dealt with in\n-                  --  Check_Dispatching_Operation.\n+                  --  Check_Dispatching_Operation. Do this even when\n+                  --  Extensions_Allowed is False to issue better error\n+                  --  messages.\n \n-                  if Extensions_Allowed\n-                    and then not Is_Tagged_Type (B_Typ)\n-                  then\n+                  if not Is_Tagged_Type (B_Typ) then\n                      Add_Or_Replace_Untagged_Primitive (B_Typ);\n                   end if;\n "}, {"sha": "e3a4881cf6cdfb52f3c5c7ad4c0184301d180a9e", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/790b8752100e699d98140f0b094cbf5b893aa7dd/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=790b8752100e699d98140f0b094cbf5b893aa7dd", "patch": "@@ -7805,9 +7805,9 @@ package body Sem_Ch8 is\n \n          --  First check for components of a record object (not the result of\n          --  a call, which is handled below). This also covers the case where\n-         --  where the extension feature that supports the prefixed form of\n-         --  calls for primitives of untagged types is enabled (excluding\n-         --  concurrent cases, which are handled further below).\n+         --  the extension feature that supports the prefixed form of calls\n+         --  for primitives of untagged types is enabled (excluding concurrent\n+         --  cases, which are handled further below).\n \n          if Is_Type (P_Type)\n            and then (Has_Components (P_Type)\n@@ -8043,6 +8043,10 @@ package body Sem_Ch8 is\n             elsif Ekind (P_Name) = E_Void then\n                Premature_Usage (P);\n \n+            elsif Ekind (P_Name) = E_Generic_Package then\n+               Error_Msg_N (\"prefix must not be a generic package\", N);\n+               Error_Msg_N (\"\\use package instantiation as prefix instead\", N);\n+\n             elsif Nkind (P) /= N_Attribute_Reference then\n \n                --  This may have been meant as a prefixed call to a primitive\n@@ -8060,7 +8064,16 @@ package body Sem_Ch8 is\n                   then\n                      Error_Msg_N\n                        (\"prefixed call is only allowed for objects of a \"\n-                        & \"tagged type\", N);\n+                        & \"tagged type unless -gnatX is used\", N);\n+\n+                     if not Extensions_Allowed\n+                       and then\n+                         Try_Object_Operation (N, Allow_Extensions => True)\n+                     then\n+                        Error_Msg_N\n+                          (\"\\using -gnatX would make the prefixed call legal\",\n+                           N);\n+                     end if;\n                   end if;\n                end;\n "}]}