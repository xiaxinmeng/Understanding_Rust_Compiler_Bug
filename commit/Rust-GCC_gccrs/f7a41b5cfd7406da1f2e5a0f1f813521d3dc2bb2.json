{"sha": "f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "node_id": "C_kwDOANBUbNoAKGY3YTQxYjVjZmQ3NDA2ZGExZjJlNWEwZjFmODEzNTIxZDNkYzJiYjI", "commit": {"author": {"name": "Fei Gao", "email": "gaofei@eswincomputing.com", "date": "2022-11-28T16:31:09Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-11-28T16:33:23Z"}, "message": "RISC-V: fix stack access before allocation.\n\nIn current riscv stack frame allocation, 2 steps are used. The first step allocates memories at least for callee saved GPRs and FPRs, and the second step allocates the rest if stack size is greater than signed 12-bit range. But it's observed in some cases, like gcc.target/riscv/stack_frame.c in my patch, callee saved FPRs fail to be included in the first step allocation, so we get generated instructions like this:\n\n\tli\tt0,-16384\n\taddi\tsp,sp,-48\n\taddi\tt0,t0,752\n\t...\n\tfsw\tfs4,-4(sp) #issue here of accessing before allocation\n\t...\n\tadd\tsp,sp,t0\n\n\"fsw\tfs4,-4(sp)\" has issue here of accessing stack before allocation. Although \"add\tsp,sp,t0\" reserves later the memory for fs4, it exposes a risk when an interrupt comes in between \"fsw\tfs4,-4(sp)\" and \"add\tsp,sp,t0\", resulting in a corruption in the stack storing fs4 after interrupt context saving and a failure to get the correct value of fs4 later.\n\nThis patch fixes issue above, adapts testcases identified in regression tests, and add a new testcase for the change.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_first_stack_step): Fix computation\n\tof MIN_FIRST_STEP to cover FP save area too.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/pr93304.c: Adapt testcase for the change, constrain\n\tmatch to assembly instructions only.\n\t* gcc.target/riscv/rvv/base/spill-11.c: Adapt testcase for the change.\n\t* gcc.target/riscv/stack_frame.c: New test.", "tree": {"sha": "15b4936dd55301ab82979d6a9dee701784d20ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15b4936dd55301ab82979d6a9dee701784d20ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/comments", "author": null, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30e98b54d6a5124bb48b10b593e264f048d38aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30e98b54d6a5124bb48b10b593e264f048d38aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d30e98b54d6a5124bb48b10b593e264f048d38aa"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "74612a701b0dd225249231016181991d1935019a", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "patch": "@@ -4903,7 +4903,7 @@ riscv_first_stack_step (struct riscv_frame_info *frame)\n     return frame_total_constant_size;\n \n   HOST_WIDE_INT min_first_step =\n-    RISCV_STACK_ALIGN ((frame->total_size - frame->fp_sp_offset).to_constant());\n+    RISCV_STACK_ALIGN ((frame->total_size - frame->frame_pointer_offset).to_constant());\n   HOST_WIDE_INT max_first_step = IMM_REACH / 2 - PREFERRED_STACK_BOUNDARY / 8;\n   HOST_WIDE_INT min_second_step = frame_total_constant_size - max_first_step;\n   gcc_assert (min_first_step <= max_first_step);"}, {"sha": "76975ff81c50ac859ee4004e76aefd82b19c1e0a", "filename": "gcc/testsuite/gcc.target/riscv/pr93304.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr93304.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr93304.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr93304.c?ref=f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "patch": "@@ -16,4 +16,4 @@ foo (void)\n    regradless of the REG_ALLOC_ORDER.\n    In theory, t2 should not used in such small program if regrename\n    not executed incorrectly, because t0-a2 should be enough.  */\n-/* { dg-final { scan-assembler-not \"t2\" } } */\n+/* { dg-final { scan-assembler-not {\\t[a-zA-Z0-9]+\\t.*t2} } } */"}, {"sha": "f52234916651e0116c8d39b302a7a28102bdcc35", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-11.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-11.c?ref=f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "patch": "@@ -21,9 +21,8 @@ void fn3 (char*);\n **\tslli\\tt1,t0,1\n **\tadd\\tsp,sp,t1\n **\tli\\tt0,8192\n-**\taddi\\tt0,t0,-208\n+**\taddi\\tt0,t0,-192\n **\tadd\\tsp,sp,t0\n-**\taddi\\tsp,sp,16\n **\ttail\\t__riscv_restore_2\n */\n int stack_save_restore_2 (float a1, float a2, float a3, float a4,"}, {"sha": "485a52d513392bc0acaf432f5887c5527cde2ba3", "filename": "gcc/testsuite/gcc.target/riscv/stack_frame.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fstack_frame.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fstack_frame.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fstack_frame.c?ref=f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32imafc -mabi=ilp32f\" } */\n+char my_getchar();\n+float getf();\n+\n+float foo()\n+{\n+  char volatile array[3120];\n+  float volatile farray[3120];\n+  float sum = 0;\n+  float f1 = getf();\n+  float f2 = getf();\n+  float f3 = getf();\n+  float f4 = getf();\n+\n+  for (int i = 0; i < 3120; i++)\n+  {\n+    array[i] = my_getchar();\n+    farray[i] = my_getchar() * 1.2;\n+    sum += array[i] + farray[i] + f1 + f2 + f3 + f4;\n+  }\n+\n+  return sum;\n+}\n+\n+/* { dg-final { scan-assembler-not {,-[0-9]+\\(sp\\)} } } */"}]}