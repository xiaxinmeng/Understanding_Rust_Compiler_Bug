{"sha": "9cad01cefbf1620fe2264feab58011ea3c23ccee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhZDAxY2VmYmYxNjIwZmUyMjY0ZmVhYjU4MDExZWEzYzIzY2NlZQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-07-22T17:05:55Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-07-22T17:05:55Z"}, "message": "re PR fortran/29835 (Error message of unknown edit descriptor needs improvement)\n\n2008-07-22  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/29835\n\t* io.c (error_element), (format_locus):  New static globals.\n\t(unexpected_element):  Spelled out this message fully.\n\t(next_char):  Keep track of locus when not MODE_STRING.\n\t(next_char_not_space):  Remember last parsed element in error_element.\n\t(format_lex):  Fix two indentation errors.\n\t(check_format):  Use format_locus and possibly error_element for a\n\tslightly better error message on invalid format.\n\t(check_format_string):  Set format_locus to start of the string\n\texpression used as format.\n\n2008-07-22  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/29835\n\t* io/format.c (struct format_data):  New member error_element.\n\t(unexpected_element):  Added '%c' to message.\n\t(next_char):  Keep track of last parsed character in fmt->error_element.\n\t(format_error):  If the message is unexpected_element, output the\n\toffending character, too.\n\n2008-07-22  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/29835\n\t* gfortran.dg/fmt_error_3.f90:  New test.\n\t* gfortran.dg/fmt_error_4.f90:  New test.\n\t* gfortran.dg/fmt_error_5.f90:  New test.\n\nFrom-SVN: r138063", "tree": {"sha": "67b495422c086b17e39317d3339ecd1b1cfb0040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67b495422c086b17e39317d3339ecd1b1cfb0040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cad01cefbf1620fe2264feab58011ea3c23ccee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cad01cefbf1620fe2264feab58011ea3c23ccee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cad01cefbf1620fe2264feab58011ea3c23ccee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cad01cefbf1620fe2264feab58011ea3c23ccee/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e58e43be96f1001a41de4e770a0e1f78e8ee68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e58e43be96f1001a41de4e770a0e1f78e8ee68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e58e43be96f1001a41de4e770a0e1f78e8ee68e"}], "stats": {"total": 146, "additions": 136, "deletions": 10}, "files": [{"sha": "3e50db4dcc83e866e3ee82bd3fe82435aabb14a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -1,3 +1,16 @@\n+2008-07-22  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/29835\n+\t* io.c (error_element), (format_locus):  New static globals.\n+\t(unexpected_element):  Spelled out this message fully.\n+\t(next_char):  Keep track of locus when not MODE_STRING.\n+\t(next_char_not_space):  Remember last parsed element in error_element.\n+\t(format_lex):  Fix two indentation errors.\n+\t(check_format):  Use format_locus and possibly error_element for a\n+\tslightly better error message on invalid format.\n+\t(check_format_string):  Set format_locus to start of the string\n+\texpression used as format.\n+\n 2008-07-21  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* expr.c (gfc_check_pointer_assign): Fix typo in string."}, {"sha": "188cf95ad06ee46236924c7447e4ef26d1617657", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -119,6 +119,8 @@ format_token;\n    process.  */\n static gfc_char_t *format_string;\n static int format_length, use_last_char;\n+static char error_element;\n+static locus format_locus;\n \n static format_token saved_token;\n \n@@ -165,6 +167,9 @@ next_char (int in_string)\n   if (mode == MODE_COPY)\n     *format_string++ = c;\n \n+  if (mode != MODE_STRING)\n+    format_locus = gfc_current_locus;\n+\n   c = gfc_wide_toupper (c);\n   return c;\n }\n@@ -186,7 +191,7 @@ next_char_not_space (bool *error)\n   char c;\n   do\n     {\n-      c = next_char (0);\n+      error_element = c = next_char (0);\n       if (c == '\\t')\n \t{\n \t  if (gfc_option.allow_std & GFC_STD_GNU)\n@@ -431,14 +436,14 @@ format_lex (void)\n \t{\n \t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: DP format \"\n \t      \"specifier not allowed at %C\") == FAILURE)\n-\t  return FMT_ERROR;\n+\t    return FMT_ERROR;\n \t  token = FMT_DP;\n \t}\n       else if (c == 'C')\n \t{\n \t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: DC format \"\n \t      \"specifier not allowed at %C\") == FAILURE)\n-\t  return FMT_ERROR;\n+\t    return FMT_ERROR;\n \t  token = FMT_DC;\n \t}\n       else\n@@ -474,7 +479,8 @@ check_format (bool is_input)\n {\n   const char *posint_required\t  = _(\"Positive width required\");\n   const char *nonneg_required\t  = _(\"Nonnegative width required\");\n-  const char *unexpected_element  = _(\"Unexpected element\");\n+  const char *unexpected_element  = _(\"Unexpected element '%c' in format string\"\n+\t\t\t\t      \" at %L\");\n   const char *unexpected_end\t  = _(\"Unexpected end of format string\");\n   const char *zero_width\t  = _(\"Zero width in format descriptor\");\n   const char *g0_precision\t= _(\"Specifying precision with G0 not allowed\");\n@@ -960,10 +966,11 @@ check_format (bool is_input)\n   goto format_item;\n \n syntax:\n-  gfc_error (\"%s in format string at %C\", error);\n+  if (error == unexpected_element)\n+    gfc_error (error, error_element, &format_locus);\n+  else\n+    gfc_error (\"%s in format string at %L\", error, &format_locus);\n fail:\n-  /* TODO: More elaborate measures are needed to show where a problem\n-     is within a format string that has been calculated.  */\n   rv = FAILURE;\n \n finished:\n@@ -982,6 +989,12 @@ check_format_string (gfc_expr *e, bool is_input)\n \n   mode = MODE_STRING;\n   format_string = e->value.character.string;\n+\n+  /* More elaborate measures are needed to show where a problem is within a\n+     format string that has been calculated, but that's probably not worth the\n+     effort.  */\n+  format_locus = e->where;\n+\n   return check_format (is_input);\n }\n "}, {"sha": "a35b25fc2104e1b838d6cd385533f24cd4b2c3ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -1,3 +1,10 @@\n+2008-07-22  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/29835\n+\t* gfortran.dg/fmt_error_3.f90:  New test.\n+\t* gfortran.dg/fmt_error_4.f90:  New test.\n+\t* gfortran.dg/fmt_error_5.f90:  New test.\n+\n 2008-07-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 28079"}, {"sha": "257f876ed80de482cc54cbde2bdeceecd98155fc", "filename": "gcc/testsuite/gfortran.dg/fmt_error_3.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_3.f90?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+\n+! PR fortran/29835\n+! Check for improved format error messages with correct locus and more detailed\n+! \"unexpected element\" messages.\n+\n+SUBROUTINE format_labels\n+  IMPLICIT NONE\n+\n+1 FORMAT (A, &\n+          A, &\n+          Q, & ! { dg-error \"Unexpected element 'Q'\" }\n+          A)\n+\n+2 FORMAT (A, &\n+          I, & ! { dg-error \"Nonnegative width\" }\n+          A)\n+\n+END SUBROUTINE format_labels\n+\n+SUBROUTINE format_strings\n+  IMPLICIT NONE\n+  CHARACTER(len=32), PARAMETER :: str = \"hello\"\n+  INTEGER :: x\n+\n+  PRINT '(A, Q, A)', & ! { dg-error \"Unexpected element 'Q'\" }\n+        str, str, str ! { dg-bogus \"Unexpected element\" }\n+\n+  PRINT '(A, ' // & ! { dg-error \"Nonnegative width\" }\n+        ' I, ' // &\n+        ' A)', str, str, str ! { dg-bogus \"Nonnegative width\" }\n+\n+  READ '(Q)', & ! { dg-error \"Unexpected element 'Q'\" }\n+       x ! { dg-bogus \"Unexpected element\" }\n+\n+END SUBROUTINE format_strings"}, {"sha": "2310573bd1f9a8775f24564eb10945a039fcf056", "filename": "gcc/testsuite/gfortran.dg/fmt_error_4.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_4.f90?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! { dg-shouldfail \"runtime error\" }\n+\n+! PR fortran/29835\n+! Check for improved format error messages with correct locus and more detailed\n+! \"unexpected element\" messages.\n+\n+! Now with runtime supplied format strings\n+SUBROUTINE format_runtime (fmtstr)\n+  IMPLICIT NONE\n+  CHARACTER(len=*) :: fmtstr\n+  CHARACTER(len=32), PARAMETER :: str = \"hello\"\n+\n+  PRINT fmtstr, str, str, str\n+END SUBROUTINE format_runtime\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+  CALL format_runtime ('(A, Q, A)')\n+END PROGRAM main\n+\n+! { dg-output \"Unexpected element 'Q'.*(\\n|\\r\\n|\\r)\\\\(A, Q, A\\\\)(\\n|\\r\\n|\\r)    \\\\^\" }"}, {"sha": "18de68e0719d01b5b4f701cf36daf88a4395c367", "filename": "gcc/testsuite/gfortran.dg/fmt_error_5.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_5.f90?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! { dg-shouldfail \"runtime error\" }\n+\n+! PR fortran/29835\n+! Check for improved format error messages with correct locus and more detailed\n+! \"unexpected element\" messages.\n+\n+! Now with runtime supplied format strings\n+SUBROUTINE format_runtime (fmtstr)\n+  IMPLICIT NONE\n+  CHARACTER(len=*) :: fmtstr\n+  INTEGER :: x\n+\n+  PRINT fmtstr, x\n+END SUBROUTINE format_runtime\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+  CALL format_runtime ('(Q)')\n+END PROGRAM main\n+\n+! { dg-output \"Unexpected element 'Q'.*(\\n|\\r\\n|\\r)\\\\(Q\\\\)(\\n|\\r\\n|\\r) \\\\^\" }"}, {"sha": "cf5591095443c59016a89e940caeebaaeb83f8b9", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -1,3 +1,12 @@\n+2008-07-22  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/29835\n+\t* io/format.c (struct format_data):  New member error_element.\n+\t(unexpected_element):  Added '%c' to message.\n+\t(next_char):  Keep track of last parsed character in fmt->error_element.\n+\t(format_error):  If the message is unexpected_element, output the\n+\toffending character, too.\n+\n 2008-07-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/36890"}, {"sha": "02ce2913bd20d0ce7af4bc1afb51f6379c82ef38", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cad01cefbf1620fe2264feab58011ea3c23ccee/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cad01cefbf1620fe2264feab58011ea3c23ccee/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=9cad01cefbf1620fe2264feab58011ea3c23ccee", "patch": "@@ -50,6 +50,7 @@ typedef struct format_data\n {\n   char *format_string, *string;\n   const char *error;\n+  char error_element;\n   format_token saved_token;\n   int value, format_string_len, reversion_ok;\n   fnode *avail;\n@@ -67,7 +68,7 @@ static const fnode colon_node = { FMT_COLON, 0, NULL, NULL, {{ 0, 0, 0 }}, 0,\n static const char posint_required[] = \"Positive width required in format\",\n   period_required[] = \"Period required in format\",\n   nonneg_required[] = \"Nonnegative width required in format\",\n-  unexpected_element[] = \"Unexpected element in format\",\n+  unexpected_element[] = \"Unexpected element '%c' in format\\n\",\n   unexpected_end[] = \"Unexpected end of format string\",\n   bad_string[] = \"Unterminated character constant in format\",\n   bad_hollerith[] = \"Hollerith constant extends past the end of the format\",\n@@ -89,7 +90,7 @@ next_char (format_data *fmt, int literal)\n \treturn -1;\n \n       fmt->format_string_len--;\n-      c = toupper (*fmt->format_string++);\n+      fmt->error_element = c = toupper (*fmt->format_string++);\n     }\n   while ((c == ' ' || c == '\\t') && !literal);\n \n@@ -948,7 +949,10 @@ format_error (st_parameter_dt *dtp, const fnode *f, const char *message)\n   if (f != NULL)\n     fmt->format_string = f->source;\n \n-  sprintf (buffer, \"%s\\n\", message);\n+  if (message == unexpected_element)\n+    sprintf (buffer, message, fmt->error_element);\n+  else\n+    sprintf (buffer, \"%s\\n\", message);\n \n   j = fmt->format_string - dtp->format;\n "}]}