{"sha": "bd059b265f8adbe9a45995118356d7d623a268f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwNTliMjY1ZjhhZGJlOWE0NTk5NTExODM1NmQ3ZDYyM2EyNjhmNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-21T12:37:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-21T12:37:23Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r196871", "tree": {"sha": "0897556681c18089ef5f176e8e6692f9ccf933f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0897556681c18089ef5f176e8e6692f9ccf933f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd059b265f8adbe9a45995118356d7d623a268f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd059b265f8adbe9a45995118356d7d623a268f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd059b265f8adbe9a45995118356d7d623a268f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd059b265f8adbe9a45995118356d7d623a268f5/comments", "author": null, "committer": null, "parents": [{"sha": "cad1735b5d0f73d94c5d6ca79d0579dee4594d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad1735b5d0f73d94c5d6ca79d0579dee4594d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad1735b5d0f73d94c5d6ca79d0579dee4594d40"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "5c62ed9be6cd33ac144629e6eecbac221efed75e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd059b265f8adbe9a45995118356d7d623a268f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd059b265f8adbe9a45995118356d7d623a268f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd059b265f8adbe9a45995118356d7d623a268f5", "patch": "@@ -61,14 +61,14 @@\n \tmovd instead of movq mnemonic for interunit moves.\n \t(*movdi_internal): Ditto.\n \n-2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+2013-03-21  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64-simd.md (simd_fabd): New Attribute.\n \t(abd<mode>_3): New pattern.\n \t(aba<mode>_3): New pattern.\n \t(fabd<mode>_3): New pattern.\n \n-2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+2013-03-21  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64-elf.h (REGISTER_PREFIX): Remove.\n \t* config/aarch64/aarch64.c (aarch64_print_operand): Remove all\n@@ -179,8 +179,7 @@\n \t* config/rs6000/dfp.md (movsd): Delete, combine with binary\n \tfloating point moves in rs6000.md.  Combine power6x (mfpgpr) moves\n \twith other moves by using conditional constraits (wg).  Use LFIWZX\n-\tand STFIWX for loading SDmode on power7.  Use xxlxor to create\n-\t0.0f.\n+\tand STFIWX for loading SDmode on power7.  Use xxlxor to create 0.0f.\n \t(movsd splitter): Likewise.\n \t(movsd_hardfloat): Likewise.\n \t(movsd_softfloat): Likewise.\n@@ -199,8 +198,7 @@\n \t(f32_si): Likewise.\n \t(movsf): Combine binary and decimal floating point moves.  Combine\n \tpower6x (mfpgpr) moves with other moves by using conditional\n-\tconstraits (wg).  Use LFIWZX and STFIWX for loading SDmode on\n-\tpower7.\n+\tconstraits (wg).  Use LFIWZX and STFIWX for loading SDmode on power7.\n \t(mov<mode> for SFmode/SDmode); Likewise.\n \t(SFmode/SDmode splitters): Likewise.\n \t(movsf_hardfloat): Likewise.\n@@ -232,7 +230,6 @@\n \t(rs6000_preferred_reload_class): On VSX, we can create SFmode 0.0f\n \tvia xxlxor, just like DFmode 0.0.\n \n-\n \t* config/rs6000/dfp.md (movdd): Delete, combine with binary\n \tfloating point moves in rs6000.md.  Combine power6x (mfpgpr) moves\n \twith other moves by using conditional constraits (wg).  Use LFIWZX\n@@ -269,8 +266,8 @@\n \n \t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Print out wg\n \tconstraint if -mdebug=reg.\n-\t(rs6000_initi_hard_regno_mode_ok): Enable wg constraint if\n-\t-mfpgpr.  Enable using dd reload support if needed.\n+\t(rs6000_initi_hard_regno_mode_ok): Enable wg constraint if -mfpgpr.\n+\tEnable using dd reload support if needed.\n \n \t* config/rs6000/dfp.md (movtd): Delete, combine with 128-bit\n \tbinary and decimal floating point moves in rs6000.md.\n@@ -293,12 +290,10 @@\n \tthe various virtual registers. Use GPR/FPR first/last values,\n \tinstead of hard coding the register numbers.  Print which modes\n \thave reload functions registered.\n-\t(rs6000_option_override_internal): If -mdebug=reg, trace the\n-\toptions settings before/after setting cpu, target and subtarget\n-\tsettings.\n-\t(rs6000_secondary_reload_trace): Improve the RTL dump for\n-\t-mdebug=addr and for secondary reload failures in\n-\trs6000_secondary_reload_inner.\n+\t(rs6000_option_override_internal): If -mdebug=reg, trace the options\n+\tsettings before/after setting cpu, target and subtarget settings.\n+\t(rs6000_secondary_reload_trace): Improve the RTL dump for -mdebug=addr\n+\tand for secondary reload failures in rs6000_secondary_reload_inner.\n \t(rs6000_secondary_reload_fail): Likewise.\n \t(rs6000_secondary_reload_inner): Likewise.\n \n@@ -316,8 +311,7 @@\n \t(vector_gtu<mode>): Likewise.\n \t(vector_gte<mode>): Likewise.\n \t(xor<mode>3): Don't allow logical operations on TImode in 32-bit\n-\tto prevent the compiler from converting DImode operations to\n-\tTImode.\n+\tto prevent the compiler from converting DImode operations to TImode.\n \t(ior<mode>3): Likewise.\n \t(and<mode>3): Likewise.\n \t(one_cmpl<mode>2): Likewise.\n@@ -369,8 +363,7 @@\n \tDrop test for PRE_MODIFY, since VSX loads/stores no longer support\n \tit.  Treat LO_SUM like a PLUS operation.\n \t(rs6000_secondary_reload_class): If type is 64-bit, prefer to use\n-\tFLOAT_REGS instead of VSX_RGS to allow use of reg+offset\n-\taddressing.\n+\tFLOAT_REGS instead of VSX_RGS to allow use of reg+offset addressing.\n \t(rs6000_cannot_change_mode_class): Do not allow TImode in VSX\n \tregisters to share a register with a smaller sized type, since VSX\n \tputs scalars in the upper 64-bits.\n@@ -409,9 +402,8 @@\n \t* config/rs6000/rs6000.md (INT mode attribute): Add PTImode.\n \t(TI2 iterator): New iterator for TImode, PTImode.\n \t(wd mode attribute): Add values for vector types.\n-\t(movti_string): Replace TI move operations with operations for\n-\tTImode and PTImode.  Add support for TImode being allowed in VSX\n-\tregisters.\n+\t(movti_string): Replace TI move operations with operations for TImode\n+\tand PTImode.  Add support for TImode being allowed in VSX registers.\n \t(mov<mode>_string, TImode/PTImode): Likewise.\n \t(movti_ppc64): Likewise.\n \t(mov<mode>_ppc64, TImode/PTImode): Likewise."}]}