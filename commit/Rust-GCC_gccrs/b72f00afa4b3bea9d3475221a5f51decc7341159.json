{"sha": "b72f00afa4b3bea9d3475221a5f51decc7341159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyZjAwYWZhNGIzYmVhOWQzNDc1MjIxYTVmNTFkZWNjNzM0MTE1OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-07-03T19:44:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-07-03T19:44:20Z"}, "message": "explow.c (plus_constant_wide, case PLUS): Call find_constant_term and avoid checking for constant as first operand.\n\n\t* explow.c (plus_constant_wide, case PLUS): Call find_constant_term\n\tand avoid checking for constant as first operand.\n\t* recog.c (find_constant_term_loc): No longer static.\n\t(adj_offettable_operand): Delete.\n\t* rtl.h (adj_offsettable_operand): Delete declaration.\n\t(find_constant_term): Add declaration.\n\t* caller-save.c: Replace calls to adj_offsettable_operand with calls\n\tto adjust_address.\n\t* config/arm/arm.c, config/c4x/c4x.c: Likewise.\n\t* config/clipper/clipper.md, config/h8300/h8300.c: Likewise.\n\t* config/i386/i386.c, config/i386/i386.md: Likewise.\n\t* config/i860/i860.c, config/i960/i960.c: Likewise.\n\t* config/i960/i960.md, config/m68hc11/m68hc11.c: Likewise.\n\t* config/m68k/m68k.c, config/m68k/m68k.md: Likewise.\n\t* config/m88k/m88k.md, config/mcore/mcore.c: Likewise.\n\t* config/mips/mips.c, config/mips/mips.md: Likewise.\n\t* config/mn10200/mn10200.c, config/mn10300/mn10300.c: Likewise.\n\t* config/ns32k/ns32k.c, config/ns32k/ns32k.md: Likewise.\n\t* config/pa/pa.c, config/pdp11/pdp11.c: Likewise.\n\t* config/pdp11/pdp11.md, config/sh/sh.c, config/v850/v850.c: Likewise.\n\t* config/vax/vax.md, config/ns32k/ns32k.c: Likewise.\n\t* config/ns32k/ns32k.md: Likewise.\n\nFrom-SVN: r43733", "tree": {"sha": "081c8c15685a2597ef47710962db021ebdc66c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/081c8c15685a2597ef47710962db021ebdc66c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b72f00afa4b3bea9d3475221a5f51decc7341159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72f00afa4b3bea9d3475221a5f51decc7341159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72f00afa4b3bea9d3475221a5f51decc7341159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72f00afa4b3bea9d3475221a5f51decc7341159/comments", "author": null, "committer": null, "parents": [{"sha": "3b324340369b9c67e16382e949b63fb0cfeafaaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b324340369b9c67e16382e949b63fb0cfeafaaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b324340369b9c67e16382e949b63fb0cfeafaaa"}], "stats": {"total": 526, "additions": 254, "deletions": 272}, "files": [{"sha": "437e4faf78bc6e9f962c62e09d4f9c488255f6d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,3 +1,28 @@\n+Tue Jul  3 15:35:52 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* explow.c (plus_constant_wide, case PLUS): Call find_constant_term\n+\tand avoid checking for constant as first operand.\n+\t* recog.c (find_constant_term_loc): No longer static.\n+\t(adj_offettable_operand): Delete.\n+\t* rtl.h (adj_offsettable_operand): Delete declaration.\n+\t(find_constant_term): Add declaration.\n+\t* caller-save.c: Replace calls to adj_offsettable_operand with calls\n+\tto adjust_address.\n+\t* config/arm/arm.c, config/c4x/c4x.c: Likewise.\n+\t* config/clipper/clipper.md, config/h8300/h8300.c: Likewise.\n+\t* config/i386/i386.c, config/i386/i386.md: Likewise.\n+\t* config/i860/i860.c, config/i960/i960.c: Likewise.\n+\t* config/i960/i960.md, config/m68hc11/m68hc11.c: Likewise.\n+\t* config/m68k/m68k.c, config/m68k/m68k.md: Likewise.\n+\t* config/m88k/m88k.md, config/mcore/mcore.c: Likewise.\n+\t* config/mips/mips.c, config/mips/mips.md: Likewise.\n+\t* config/mn10200/mn10200.c, config/mn10300/mn10300.c: Likewise.\n+\t* config/ns32k/ns32k.c, config/ns32k/ns32k.md: Likewise.\n+\t* config/pa/pa.c, config/pdp11/pdp11.c: Likewise.\n+\t* config/pdp11/pdp11.md, config/sh/sh.c, config/v850/v850.c: Likewise.\n+\t* config/vax/vax.md, config/ns32k/ns32k.c: Likewise.\n+\t* config/ns32k/ns32k.md: Likewise.\n+\n 2001-07-03  Zack Weinberg  <zackw@stanford.edu>\n \n \t* rtl.c (copy_rtx): Handle 'T' format letter."}, {"sha": "1b5b4d93c6c177b79abc36caf3bae181016c305b", "filename": "gcc/caller-save.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -329,15 +329,11 @@ setup_save_areas ()\n \n \t/* Setup single word save area just in case...  */\n \tfor (k = 0; k < j; k++)\n-\t  {\n-\t    /* This should not depend on WORDS_BIG_ENDIAN.\n-\t       The order of words in regs is the same as in memory.  */\n-\t    rtx temp = gen_rtx_MEM (regno_save_mode[i + k][1], \n-\t\t\t\t    XEXP (regno_save_mem[i][j], 0));\n-\n-\t    regno_save_mem[i + k][1] \n-\t      = adj_offsettable_operand (temp, k * UNITS_PER_WORD);\n-\t  }\n+\t  /* This should not depend on WORDS_BIG_ENDIAN.\n+\t     The order of words in regs is the same as in memory.  */\n+\t  regno_save_mem[i + k][1]\n+\t    = adjust_address (regno_save_mem[i][j], regno_save_mode[i + k][1],\n+\t\t\t      k * UNITS_PER_WORD);\n       }\n \n   /* Now loop again and set the alias set of any save areas we made to"}, {"sha": "24c3317bd30b4d0501a8bfaecbce07326d043425", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -6569,7 +6569,7 @@ output_move_double (operands)\n                 }\n               else\n                 {\n-\t\t  otherops[1] = adj_offsettable_operand (operands[1], 4);\n+\t\t  otherops[1] = adjust_address (operands[1], VOIDmode, 4);\n \t\t  /* Take care of overlapping base/data reg.  */\n \t\t  if (reg_mentioned_p (operands[0], operands[1]))\n \t\t    {\n@@ -6635,7 +6635,7 @@ output_move_double (operands)\n \t  /* Fall through */\n \n         default:\n-\t  otherops[0] = adj_offsettable_operand (operands[0], 4);\n+\t  otherops[0] = adjust_address (operands[0], VOIDmode, 4);\n \t  otherops[1] = gen_rtx_REG (SImode, 1 + REGNO (operands[1]));\n \t  output_asm_insn (\"str%?\\t%1, %0\", operands);\n \t  output_asm_insn (\"str%?\\t%1, %0\", otherops);"}, {"sha": "458d1bd337610db3f7a1eaf2dc4b468fb4188076", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1921,7 +1921,7 @@ c4x_print_operand (file, op, letter)\n           if (GET_CODE(op1) == CONST_INT || GET_CODE(op1) == SYMBOL_REF)\n \t    {\n \t      asm_fprintf (file, \"\\t%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n-\t      output_address (XEXP (adj_offsettable_operand (op, 1), 0));\n+\t      output_address (XEXP (adjust_address (op, VOIDmodem, 1), 0));\n \t      asm_fprintf (file, \"\\n\");\n \t    }\n \t}\n@@ -1943,7 +1943,7 @@ c4x_print_operand (file, op, letter)\n       if (code == MEM && c4x_autoinc_operand (op, Pmode))\n \tbreak;\n       else if (code == MEM)\n-\toutput_address (XEXP (adj_offsettable_operand (op, 1), 0));\n+\toutput_address (XEXP (adjust_address (op, 1), VOIDmode, 0));\n       else if (code == REG)\n \tfprintf (file, \"%s\", reg_names[REGNO (op) + 1]);\n       else"}, {"sha": "95f402ed7bd100ae3c3dd7852012da538105738f", "filename": "gcc/config/clipper/clipper.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fclipper%2Fclipper.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fclipper%2Fclipper.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Clipper Version\n-;;  Copyright (C) 1987, 88, 91, 93, 94, 97, 98, 1999\n+;;  Copyright (C) 1987, 1988, 1991, 1993, 1994, 1997, 1998, 1999, 2001\n ;;  Free Software Foundation, Inc.\n ;; Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n@@ -181,7 +181,7 @@\n       xops[0] = operands[0];\n       xops[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       xops[2] = operands[1];\n-      xops[3] = adj_offsettable_operand (operands[1], 4);\n+      xops[3] = adjust_address (operands[1], SImode, 4);\n       output_asm_insn (\\\"loadw  %2,%0\\;loadw  %3,%1\\\", xops);\n       return \\\"\\\";\n     }\n@@ -214,7 +214,7 @@\n     return \\\"stord  %1,%0\\\";\n \n   xops[0] = operands[0];\t\t/* r -> o */\n-  xops[1] = adj_offsettable_operand (operands[0], 4);\n+  xops[1] = adjust_address (operands[0], SImode, 4);\n   xops[2] = operands[1];\n   xops[3] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   output_asm_insn (\\\"storw  %2,%0\\;storw  %3,%1\\\", xops);\n@@ -350,7 +350,7 @@\n     }\n \t\t\t\t\t/* m -> r */\n   output_asm_insn (\\\"loadw  %1,%0\\\", operands);\n-  xoperands[1] = adj_offsettable_operand (operands[1], 4);\n+  xoperands[1] = adjust_address (operands[1], SImode, 4);\n   output_asm_insn (\\\"loadw  %1,%0\\\", xoperands);\n   return \\\"\\\";\n }\" \n@@ -365,7 +365,7 @@\n {\n   rtx xops[4];\n   xops[0] = operands[0];\n-  xops[1] = adj_offsettable_operand (operands[0], 4);\n+  xops[1] = adjust_address (operands[0], SImode, 4);\n   xops[2] = operands[1];\n   xops[3] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   output_asm_insn (\\\"storw  %2,%0\\;storw  %3,%1\\\", xops);"}, {"sha": "b03f6f852add3bdde38ea5eaa9cb935c49dfacb8", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1190,7 +1190,6 @@ print_operand (file, x, code)\n \t    fprintf (file, \"%s\", names_upper_extended[REGNO (x)]);\n \t  break;\n \tcase MEM:\n-\t  x = adj_offsettable_operand (x, 0);\n \t  print_operand (file, x, 0);\n \t  break;\n \tcase CONST_INT:\n@@ -1220,7 +1219,7 @@ print_operand (file, x, code)\n \t    fprintf (file, \"%s\", names_big[REGNO (x)]);\n \t  break;\n \tcase MEM:\n-\t  x = adj_offsettable_operand (x, 2);\n+\t  x = adjust_address (x, HImode, 2);\n \t  print_operand (file, x, 0);\n \t  break;\n \tcase CONST_INT:"}, {"sha": "27b1db93438579de6f51e4db06d0fa56efc019e3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -2484,18 +2484,17 @@ ix86_emit_save_regs ()\n    is restored from POINTER + OFFSET.  */\n static void\n ix86_emit_save_regs_using_mov (pointer, offset)\n-\trtx pointer;\n-\tHOST_WIDE_INT offset;\n+     rtx pointer;\n+     HOST_WIDE_INT offset;\n {\n   int regno;\n   rtx insn;\n \n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if (ix86_save_reg (regno, true))\n       {\n-\tinsn = emit_move_insn (adj_offsettable_operand (gen_rtx_MEM (Pmode,\n-\t\t\t\t\t\t\t\t     pointer),\n-\t\t\t\t\t\t\toffset),\n+\tinsn = emit_move_insn (adjust_address (gen_rtx_MEM (Pmode, pointer),\n+\t\t\t\t\t       Pmode, offset),\n \t\t\t       gen_rtx_REG (Pmode, regno));\n \tRTX_FRAME_RELATED_P (insn) = 1;\n \toffset += UNITS_PER_WORD;\n@@ -2606,9 +2605,8 @@ ix86_emit_restore_regs_using_mov (pointer, offset, maybe_eh_return)\n     if (ix86_save_reg (regno, maybe_eh_return))\n       {\n \temit_move_insn (gen_rtx_REG (Pmode, regno),\n-\t\t\tadj_offsettable_operand (gen_rtx_MEM (Pmode,\n-\t\t\t\t\t\t\t      pointer),\n-\t\t\t\t\t\t offset));\n+\t\t\tadjust_address (gen_rtx_MEM (Pmode, pointer),\n+\t\t\t\t\tPmode, offset));\n \toffset += UNITS_PER_WORD;\n       }\n }\n@@ -4411,10 +4409,8 @@ split_di (operands, num, lo_half, hi_half)\n \t}\n       else if (offsettable_memref_p (op))\n \t{\n-\t  rtx hi_addr = XEXP (adj_offsettable_operand (op, 4), 0);\n-\n \t  lo_half[num] = adjust_address (op, SImode, 0);\n-\t  hi_half[num] = change_address (op, SImode, hi_addr);\n+\t  hi_half[num] = adjust_address (op, SImode, 4);\n \t}\n       else\n \tabort ();\n@@ -6870,9 +6866,9 @@ ix86_split_to_parts (operand, parts, mode)\n \t    {\n \t      operand = adjust_address (operand, SImode, 0);\n \t      parts[0] = operand;\n-\t      parts[1] = adj_offsettable_operand (operand, 4);\n+\t      parts[1] = adjust_address (operand, SImode, 4);\n \t      if (size == 3)\n-\t\tparts[2] = adj_offsettable_operand (operand, 8);\n+\t\tparts[2] = adjust_address (operand, SImode, 8);\n \t    }\n \t  else if (GET_CODE (operand) == CONST_DOUBLE)\n \t    {\n@@ -6913,10 +6909,9 @@ ix86_split_to_parts (operand, parts, mode)\n \t    }\n \t  else if (offsettable_memref_p (operand))\n \t    {\n-\t      operand = change_address (operand, DImode, XEXP (operand, 0));\n+\t      operand = adjust_address (operand, DImode, 0);\n \t      parts[0] = operand;\n-\t      parts[1] = adj_offsettable_operand (operand, 8);\n-\t      parts[1] = change_address (parts[1], SImode, XEXP (parts[1], 0));\n+\t      parts[1] = adjust_address (operand, SImode, 8);\n \t    }\n \t  else if (GET_CODE (operand) == CONST_DOUBLE)\n \t    {\n@@ -7031,12 +7026,9 @@ ix86_split_long_move (operands)\n \t  part[1][0] = change_address (part[1][0],\n \t\t\t\t       TARGET_64BIT ? DImode : SImode,\n \t\t\t\t       part[0][nparts - 1]);\n-\t  part[1][1] = adj_offsettable_operand (part[1][0],\n-\t\t\t\t\t        UNITS_PER_WORD);\n-\t  part[1][1] = change_address (part[1][1], GET_MODE (part[0][1]),\n-\t\t\t \t       XEXP (part[1][1], 0));\n+\t  part[1][1] = adjust_address (part[1][0], VOIDmode, UNITS_PER_WORD);\n \t  if (nparts == 3)\n-\t    part[1][2] = adj_offsettable_operand (part[1][0], 8);\n+\t    part[1][2] = adjust_address (part[1][0], VOIDmode, 8);\n \t}\n     }\n \n@@ -10197,18 +10189,17 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \n     case IX86_BUILTIN_SETPS:\n       target = assign_386_stack_local (V4SFmode, 0);\n-      op0 = adjust_address (target, SFmode, 0);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n       arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n-      emit_move_insn (op0,\n+      emit_move_insn (adjust_address (op0, SFmode, 0),\n \t\t      expand_expr (arg0, NULL_RTX, VOIDmode, 0));\n-      emit_move_insn (adj_offsettable_operand (op0, 4),\n+      emit_move_insn (adjust_address (op0, SFmode, 4),\n \t\t      expand_expr (arg1, NULL_RTX, VOIDmode, 0));\n-      emit_move_insn (adj_offsettable_operand (op0, 8),\n+      emit_move_insn (adjust_address (op0, SFmode, 8),\n \t\t      expand_expr (arg2, NULL_RTX, VOIDmode, 0));\n-      emit_move_insn (adj_offsettable_operand (op0, 12),\n+      emit_move_insn (adjust_address (op0, SFmode, 12),\n \t\t      expand_expr (arg3, NULL_RTX, VOIDmode, 0));\n       op0 = gen_reg_rtx (V4SFmode);\n       emit_insn (gen_sse_movaps (op0, target));"}, {"sha": "1743ed3ae4329c2bd203f064930f7740da609571", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -9384,8 +9384,7 @@\n   /* XFmode's size is 12, TFmode 16, but only 10 bytes are used.  */\n   if (size >= 12)\n     size = 10;\n-  operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n-  operands[0] = adj_offsettable_operand (operands[0], size - 1);\n+  operands[0] = adjust_address (operands[0], QImode, size - 1);\n   operands[1] = GEN_INT (trunc_int_for_mode (0x80, QImode));\n })\n \n@@ -9837,8 +9836,7 @@\n   /* XFmode's size is 12, TFmode 16, but only 10 bytes are used.  */\n   if (size >= 12)\n     size = 10;\n-  operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n-  operands[0] = adj_offsettable_operand (operands[0], size - 1);\n+  operands[0] = adjust_address (operands[0], QImode, size - 1);\n   operands[1] = GEN_INT (trunc_int_for_mode (~0x80, QImode));\n })\n "}, {"sha": "fd04a3a30ab564d1316102b1cddb8ec404780c51", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel 860\n-   Copyright (C) 1989, 1991, 1997, 1998, 1999, 2000\n+   Copyright (C) 1989, 1991, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Derived from sparc.c.\n \n@@ -643,14 +643,14 @@ output_move_double (operands)\n   if (optype0 == REGOP)\n     latehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (optype0 == OFFSOP)\n-    latehalf[0] = adj_offsettable_operand (operands[0], 4);\n+    latehalf[0] = adjust_address (operands[0], SImode, 4);\n   else\n     latehalf[0] = operands[0];\n \n   if (optype1 == REGOP)\n     latehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else if (optype1 == OFFSOP)\n-    latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+    latehalf[1] = adjust_address (operands[1], SImode, 4);\n   else if (optype1 == CNSTOP)\n     {\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n@@ -708,7 +708,7 @@ output_move_double (operands)\n \t  xops[1] = operands[0];\n \t  output_asm_insn (\"adds %1,%0,%1\", xops);\n \t  operands[1] = gen_rtx_MEM (DImode, operands[0]);\n-\t  latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+\t  latehalf[1] = adjust_address (operands[1], SImode, 4);\n \t  addreg1 = 0;\n \t  highest_first = 1;\n \t}"}, {"sha": "663539b9ecc5b9fff00ff2f4b4be2777656c8594", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on intel 80960.\n-   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Steven McGeady, Intel Corp.\n    Additional Work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n@@ -590,8 +590,10 @@ i960_output_move_double (dst, src)\n \t  operands[1] = src;\n \t  operands[2] = gen_rtx_REG (Pmode, REGNO (dst) + 1);\n \t  operands[3] = gen_rtx_MEM (word_mode, operands[2]);\n-\t  operands[4] = adj_offsettable_operand (operands[3], UNITS_PER_WORD);\n-\t  output_asm_insn (\"lda\t%1,%2\\n\\tld\t%3,%0\\n\\tld\t%4,%D0\", operands);\n+\t  operands[4] = adjust_address (operands[3], word_mode,\n+\t\t\t\t\tUNITS_PER_WORD);\n+\t  output_asm_insn\n+\t    (\"lda\t%1,%2\\n\\tld\t%3,%0\\n\\tld\t%4,%D0\", operands);\n \t  return \"\";\n \t}\n       else\n@@ -603,7 +605,7 @@ i960_output_move_double (dst, src)\n       if (REGNO (src) & 1)\n \t{\n \t  operands[0] = dst;\n-\t  operands[1] = adj_offsettable_operand (dst, UNITS_PER_WORD);\n+\t  operands[1] = adjust_address (dst, word_mode, UNITS_PER_WORD);\n \t  if (! memory_address_p (word_mode, XEXP (operands[1], 0)))\n \t    abort ();\n \t  operands[2] = src;\n@@ -626,7 +628,7 @@ i960_output_move_double_zero (dst)\n \n   operands[0] = dst;\n     {\n-      operands[1] = adj_offsettable_operand (dst, 4);\n+      operands[1] = adjust_address (dst, word_mode, 4);\n       output_asm_insn (\"st\tg14,%0\\n\\tst\tg14,%1\", operands);\n     }\n   return \"\";\n@@ -680,9 +682,12 @@ i960_output_move_quad (dst, src)\n \t  operands[1] = src;\n \t  operands[2] = gen_rtx_REG (Pmode, REGNO (dst) + 3);\n \t  operands[3] = gen_rtx_MEM (word_mode, operands[2]);\n-\t  operands[4] = adj_offsettable_operand (operands[3], UNITS_PER_WORD);\n-\t  operands[5] = adj_offsettable_operand (operands[4], UNITS_PER_WORD);\n-\t  operands[6] = adj_offsettable_operand (operands[5], UNITS_PER_WORD);\n+\t  operands[4]\n+\t    = adjust_address (operands[3], word_mode, UNITS_PER_WORD);\n+\t  operands[5]\n+\t    = adjust_address (operands[4], word_mode, UNITS_PER_WORD);\n+\t  operands[6]\n+\t    = adjust_address (operands[5], word_mode, UNITS_PER_WORD);\n \t  output_asm_insn (\"lda\t%1,%2\\n\\tld\t%3,%0\\n\\tld\t%4,%D0\\n\\tld\t%5,%E0\\n\\tld\t%6,%F0\", operands);\n \t  return \"\";\n \t}\n@@ -695,9 +700,9 @@ i960_output_move_quad (dst, src)\n       if (REGNO (src) & 3)\n \t{\n \t  operands[0] = dst;\n-\t  operands[1] = adj_offsettable_operand (dst, UNITS_PER_WORD);\n-\t  operands[2] = adj_offsettable_operand (dst, 2*UNITS_PER_WORD);\n-\t  operands[3] = adj_offsettable_operand (dst, 3*UNITS_PER_WORD);\n+\t  operands[1] = adjust_address (dst, word_mode, UNITS_PER_WORD);\n+\t  operands[2] = adjust_address (dst, word_mode, 2 * UNITS_PER_WORD);\n+\t  operands[3] = adjust_address (dst, word_mode, 3 * UNITS_PER_WORD);\n \t  if (! memory_address_p (word_mode, XEXP (operands[3], 0)))\n \t    abort ();\n \t  operands[4] = src;\n@@ -720,9 +725,9 @@ i960_output_move_quad_zero (dst)\n \n   operands[0] = dst;\n     {\n-      operands[1] = adj_offsettable_operand (dst, 4);\n-      operands[2] = adj_offsettable_operand (dst, 8);\n-      operands[3] = adj_offsettable_operand (dst, 12);\n+      operands[1] = adjust_address (dst, word_mode, 4);\n+      operands[2] = adjust_address (dst, word_mode, 8);\n+      operands[3] = adjust_address (dst, word_mode, 12);\n       output_asm_insn (\"st\tg14,%0\\n\\tst\tg14,%1\\n\\tst\tg14,%2\\n\\tst\tg14,%3\", operands);\n     }\n   return \"\";"}, {"sha": "341d13c540cc69337f9711cbda5f59e1aebb0b76", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for Intel 80960 chip for GNU C compiler\n-;;   Copyright (C) 1992, 1995, 1998 Free Software Foundation, Inc.\n+;;   Copyright (C) 1992, 1995, 1998, 2001 Free Software Foundation, Inc.\n ;;   Contributed by Steven McGeady, Intel Corp.\n ;;   Additional work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n ;;   Converted to GCC 2.0 by Jim Wilson and Michael Tiemann, Cygnus Support.\n@@ -909,7 +909,7 @@\n     return i960_output_move_double (operands[0], operands[1]);\n     \n   operands[3] = gen_rtx_MEM (word_mode, operands[2]);\n-  operands[4] = adj_offsettable_operand (operands[3], UNITS_PER_WORD);\n+  operands[4] = adjust_address (operands[3], word_mode, UNITS_PER_WORD);\n   return \\\"lda\t%0,%2\\;st\t%1,%3\\;st\t%D1,%4\\\";\n }\"\n   [(set_attr \"type\" \"move,store\")])\n@@ -988,9 +988,9 @@\n     return i960_output_move_quad (operands[0], operands[1]);\n \n   operands[3] = gen_rtx_MEM (word_mode, operands[2]);\n-  operands[4] = adj_offsettable_operand (operands[3], UNITS_PER_WORD);\n-  operands[5] = adj_offsettable_operand (operands[4], UNITS_PER_WORD);\n-  operands[6] = adj_offsettable_operand (operands[5], UNITS_PER_WORD);\n+  operands[4] = adjust_address (operands[3], word_mode, UNITS_PER_WORD);\n+  operands[5] = adjust_address (operands[4], word_mode, UNITS_PER_WORD);\n+  operands[6] = adjust_address (operands[5], word_mode, UNITS_PER_WORD);\n   return \\\"lda\t%0,%2\\;st\t%1,%3\\;st\t%D1,%4\\;st\t%E1,%5\\;st\t%F1,%6\\\";\n }\"\n   [(set_attr \"type\" \"move,store\")])\n@@ -1084,7 +1084,7 @@\n     case 4:\n       return \\\"stl\t%1,%0\\\";\n     case 5:\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n+      operands[1] = adjust_address (operands[0], VOIDmode, 4);\n       return \\\"st\tg14,%0\\;st\tg14,%1\\\";\n     }\n }\""}, {"sha": "e7dc1dfe16de327c43ebe4034fdb060ffa742644", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -2635,7 +2635,7 @@ m68hc11_split_move (to, from, scratch)\n \n   if (offset)\n     {\n-      high_from = adj_offsettable_operand (high_from, offset);\n+      high_from = adjust_address (high_from, mode, offset);\n       low_from = high_from;\n     }\n   if (mode == SImode)"}, {"sha": "8eaee6ec42436e11981894f91156f9f43787c740", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1066,14 +1066,14 @@ output_scc_di(op, operand1, operand2, dest)\n   if (GET_CODE (operand1) == REG)\n     loperands[1] = gen_rtx_REG (SImode, REGNO (operand1) + 1);\n   else\n-    loperands[1] = adj_offsettable_operand (operand1, 4);\n+    loperands[1] = adjust_address (operand1, SImode, 4);\n   if (operand2 != const0_rtx)\n     {\n       loperands[2] = operand2;\n       if (GET_CODE (operand2) == REG)\n \tloperands[3] = gen_rtx_REG (SImode, REGNO (operand2) + 1);\n       else\n-\tloperands[3] = adj_offsettable_operand (operand2, 4);\n+\tloperands[3] = adjust_address (operand2, SImode, 4);\n     }\n   loperands[4] = gen_label_rtx();\n   if (operand2 != const0_rtx)\n@@ -1244,7 +1244,7 @@ output_btst (operands, countop, dataop, insn, signpos)\n \t{\n \t  int offset = (count & ~signpos) / 8;\n \t  count = count & signpos;\n-\t  operands[1] = dataop = adj_offsettable_operand (dataop, offset);\n+\t  operands[1] = dataop = adjust_address (dataop, QImode, offset);\n \t}\n       if (count == signpos)\n \tcc_status.flags = CC_NOT_POSITIVE | CC_Z_IN_NOT_N;\n@@ -1879,8 +1879,8 @@ output_move_double (operands)\n \t}\n       else if (optype0 == OFFSOP)\n \t{\n-\t  middlehalf[0] = adj_offsettable_operand (operands[0], 4);\n-\t  latehalf[0] = adj_offsettable_operand (operands[0], size - 4);\n+\t  middlehalf[0] = adjust_address (operands[0], SImode, 4);\n+\t  latehalf[0] = adjust_address (operands[0], SImode, size - 4);\n \t}\n       else\n \t{\n@@ -1895,8 +1895,8 @@ output_move_double (operands)\n \t}\n       else if (optype1 == OFFSOP)\n \t{\n-\t  middlehalf[1] = adj_offsettable_operand (operands[1], 4);\n-\t  latehalf[1] = adj_offsettable_operand (operands[1], size - 4);\n+\t  middlehalf[1] = adjust_address (operands[1], SImode, 4);\n+\t  latehalf[1] = adjust_address (operands[1], SImode, size - 4);\n \t}\n       else if (optype1 == CNSTOP)\n \t{\n@@ -1934,14 +1934,14 @@ output_move_double (operands)\n       if (optype0 == REGOP)\n \tlatehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else if (optype0 == OFFSOP)\n-\tlatehalf[0] = adj_offsettable_operand (operands[0], size - 4);\n+\tlatehalf[0] = adjust_address (operands[0], SImode, size - 4);\n       else\n \tlatehalf[0] = operands[0];\n \n       if (optype1 == REGOP)\n \tlatehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n       else if (optype1 == OFFSOP)\n-\tlatehalf[1] = adj_offsettable_operand (operands[1], size - 4);\n+\tlatehalf[1] = adjust_address (operands[1], SImode, size - 4);\n       else if (optype1 == CNSTOP)\n \tsplit_double (operands[1], &operands[1], &latehalf[1]);\n       else\n@@ -1976,16 +1976,16 @@ output_move_double (operands)\n \t  xops[0] = latehalf[0];\n \t  xops[1] = XEXP (operands[1], 0);\n \t  output_asm_insn (\"lea %a1,%0\", xops);\n-\t  if( GET_MODE (operands[1]) == XFmode )\n+\t  if (GET_MODE (operands[1]) == XFmode )\n \t    {\n \t      operands[1] = gen_rtx_MEM (XFmode, latehalf[0]);\n-\t      middlehalf[1] = adj_offsettable_operand (operands[1], size-8);\n-\t      latehalf[1] = adj_offsettable_operand (operands[1], size-4);\n+\t      middlehalf[1] = adjust_address (operands[1], DImode, size - 8);\n+\t      latehalf[1] = adjust_address (operands[1], DImode, size - 4);\n \t    }\n \t  else\n \t    {\n \t      operands[1] = gen_rtx_MEM (DImode, latehalf[0]);\n-\t      latehalf[1] = adj_offsettable_operand (operands[1], size-4);\n+\t      latehalf[1] = adjust_address (operands[1], DImode, size - 4);\n \t    }\n \t}\n       else if (size == 12\n@@ -3492,7 +3492,7 @@ output_andsi3 (operands)\n       && !TARGET_5200)\n     {\n       if (GET_CODE (operands[0]) != REG)\n-        operands[0] = adj_offsettable_operand (operands[0], 2);\n+        operands[0] = adjust_address (operands[0], HImode, 2);\n       operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n       /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n       CC_STATUS_INIT;\n@@ -3511,7 +3511,7 @@ output_andsi3 (operands)\n         }\n       else\n         {\n-\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[0] = adjust_address (operands[0], SImode, 3 - (logval / 8));\n \t  operands[1] = GEN_INT (logval % 8);\n         }\n       /* This does not set condition codes in a standard way.  */\n@@ -3533,7 +3533,7 @@ output_iorsi3 (operands)\n       && !TARGET_5200)\n     {\n       if (GET_CODE (operands[0]) != REG)\n-        operands[0] = adj_offsettable_operand (operands[0], 2);\n+        operands[0] = adjust_address (operands[0], HImode, 2);\n       /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n       CC_STATUS_INIT;\n       if (INTVAL (operands[2]) == 0xffff)\n@@ -3546,12 +3546,10 @@ output_iorsi3 (operands)\n \t  || offsettable_memref_p (operands[0])))\n     {\n       if (DATA_REG_P (operands[0]))\n-\t{\n-\t  operands[1] = GEN_INT (logval);\n-\t}\n+\toperands[1] = GEN_INT (logval);\n       else\n         {\n-\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[0] = adjust_address (operands[0], SImode, 3 - (logval / 8));\n \t  operands[1] = GEN_INT (logval % 8);\n \t}\n       CC_STATUS_INIT;\n@@ -3571,7 +3569,7 @@ output_xorsi3 (operands)\n       && !TARGET_5200)\n     {\n       if (! DATA_REG_P (operands[0]))\n-\toperands[0] = adj_offsettable_operand (operands[0], 2);\n+\toperands[0] = adjust_address (operands[0], HImode, 2);\n       /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n       CC_STATUS_INIT;\n       if (INTVAL (operands[2]) == 0xffff)\n@@ -3584,12 +3582,10 @@ output_xorsi3 (operands)\n \t  || offsettable_memref_p (operands[0])))\n     {\n       if (DATA_REG_P (operands[0]))\n-\t{\n-\t  operands[1] = GEN_INT (logval);\n-\t}\n+\toperands[1] = GEN_INT (logval);\n       else\n         {\n-\t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n+\t  operands[0] = adjust_address (operands[0], SImode, 3 - (logval / 8));\n \t  operands[1] = GEN_INT (logval % 8);\n \t}\n       CC_STATUS_INIT;"}, {"sha": "33473ddff3b74416c9874a8151add6c1e33e022d", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 65, "deletions": 56, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -837,8 +837,8 @@\n {\n   if (GET_CODE (operands[0]) == MEM)\n     {\n-      operands[0] = adj_offsettable_operand (operands[0],\n-\t\t\t\t\t     INTVAL (operands[1]) / 8);\n+      operands[0] = adjust_address (operands[0], QImode,\n+\t\t\t\t    INTVAL (operands[1]) / 8);\n       operands[1] = GEN_INT (7 - INTVAL (operands[1]) % 8);\n       return output_btst (operands, operands[1], operands[0], insn, 7);\n     }\n@@ -858,8 +858,8 @@\n {\n   if (GET_CODE (operands[0]) == MEM)\n     {\n-      operands[0] = adj_offsettable_operand (operands[0],\n-\t\t\t\t\t     INTVAL (operands[1]) / 8);\n+      operands[0] = adjust_address (operands[0], QImode,\n+\t\t\t\t    INTVAL (operands[1]) / 8);\n       operands[1] = GEN_INT (7 - INTVAL (operands[1]) % 8);\n       return output_btst (operands, operands[1], operands[0], insn, 7);\n     }\n@@ -1442,7 +1442,7 @@\n       return \\\"move%.l %1,%0\\\";\n     }\n   if (GET_CODE (operands[1]) == MEM)\n-    operands[1] = adj_offsettable_operand (operands[1], 3);\n+    operands[1] = adjust_address (operands[1], QImode, 3);\n   return \\\"move%.b %1,%0\\\";\n }\")\n \n@@ -1470,7 +1470,7 @@\n       return \\\"move%.l %1,%0\\\";\n     }\n   if (GET_CODE (operands[1]) == MEM)\n-    operands[1] = adj_offsettable_operand (operands[1], 1);\n+    operands[1] = adjust_address (operands[1], QImode, 1);\n   return \\\"move%.b %1,%0\\\";\n }\")\n \n@@ -1489,7 +1489,7 @@\n       return \\\"move%.l %1,%0\\\";\n     }\n   if (GET_CODE (operands[1]) == MEM)\n-    operands[1] = adj_offsettable_operand (operands[1], 2);\n+    operands[1] = adjust_address (operands[1], QImode, 2);\n   return \\\"move%.w %1,%0\\\";\n }\")\n \f\n@@ -1532,7 +1532,7 @@\n   else if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n     return \\\"clr%.l %0\\;move%.l %1,%0\\\";\n   else\n-    operands[2] = adj_offsettable_operand (operands[0], 4);\n+    operands[2] = adjust_address (operands[0], SImode, 4);\n   if (GET_CODE (operands[1]) != REG || GET_CODE (operands[2]) != REG\n       || REGNO (operands[1]) != REGNO (operands[2]))\n     output_asm_insn (\\\"move%.l %1,%2\\\", operands);\n@@ -1619,7 +1619,7 @@\n   else\n     {\n       output_asm_insn (\\\"clr%.w %0\\\", operands);\n-      operands[0] = adj_offsettable_operand (operands[0], 2);\n+      operands[0] = adjust_address (operands[0], HImode, 2);\n       return \\\"move%.w %1,%0\\\";\n     }\n }\")\n@@ -1660,7 +1660,7 @@\n   else\n     {\n       output_asm_insn (\\\"clr%.b %0\\\", operands);\n-      operands[0] = adj_offsettable_operand (operands[0], 1);\n+      operands[0] = adjust_address (operands[0], QImode, 1);\n       return \\\"move%.b %1,%0\\\";\n     }\n }\")\n@@ -1711,7 +1711,7 @@\n   else\n     {\n       output_asm_insn (\\\"clr%.l %0\\\", operands);\n-      operands[0] = adj_offsettable_operand (operands[0], 3);\n+      operands[0] = adjust_address (operands[0], QImode, 3);\n       return \\\"move%.b %1,%0\\\";\n     }\n }\")\n@@ -2109,7 +2109,7 @@\n         || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n     operands[4] = operands[1];\n   else\n-    operands[4] = adj_offsettable_operand (operands[1], 4);\n+    operands[4] = adjust_address (operands[1], SImode, 4);\n   if (GET_CODE (operands[1]) == MEM\n    && GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n     output_asm_insn (\\\"move%.l %4,%3\\\", operands);\n@@ -2158,7 +2158,7 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[2] = adj_offsettable_operand (operands[0], 4);\n+    operands[2] = adjust_address (operands[0], SImode, 4);\n   return \\\"add%.l %1,%2\\;negx%.l %0\\;neg%.l %0\\\";\n } \")\n \n@@ -2177,7 +2177,7 @@\n   if (GET_CODE (operands[1]) == REG)\n     operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n-    operands[1] = adj_offsettable_operand (operands[1], 4);\n+    operands[1] = adjust_address (operands[1], SImode, 4);\n   return \\\"add%.l %1,%0\\\";\n } \")\n \n@@ -2210,7 +2210,7 @@\n \t    split_double (operands[2], &high, &low);\n \t  else\n \t    {\n-\t      low = adj_offsettable_operand (operands[2], 4);\n+\t      low = adjust_address (operands[2], SImode, 4);\n \t      high = operands[2];\n \t    }\n \n@@ -2265,7 +2265,7 @@\n \t}\n       else\n \t{\n-\t  operands[1] = adj_offsettable_operand (operands[0], 4);\n+\t  operands[1] = adjust_address (operands[0], SImode, 4);\n \t  return \\\"add%.l %R2,%1\\;move%.l %0,%3\\;addx%.l %2,%3\\;move%.l %3,%0\\\";\n \t}\n     }\n@@ -2737,7 +2737,7 @@\n   if (GET_CODE (operands[1]) == REG)\n     operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n-    operands[1] = adj_offsettable_operand (operands[1], 4);\n+    operands[1] = adjust_address (operands[1], SImode, 4);\n   return \\\"sub%.l %1,%0\\\";\n } \")\n \n@@ -2772,7 +2772,7 @@\n \t    split_double (operands[2], &high, &low);\n \t  else\n \t    {\n-\t      low = adj_offsettable_operand (operands[2], 4);\n+\t      low = adjust_address (operands[2], SImode, 4);\n \t      high = operands[2];\n \t    }\n \n@@ -2827,7 +2827,7 @@\n \t}\n       else\n \t{\n-\t  operands[1] = adj_offsettable_operand (operands[0], 4);\n+\t  operands[1] = adjust_address (operands[0], SImode, 4);\n \t  return \\\"sub%.l %R2,%1\\;move%.l %0,%3\\;subx%.l %2,%3\\;move%.l %3,%0\\\";\n \t}\n     }\n@@ -3664,7 +3664,7 @@\n       if (GET_CODE (operands[0]) == REG)\n \toperands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else\n-\toperands[0] = adj_offsettable_operand (operands[0], 4);\n+\toperands[0] = adjust_address (operands[0], SImode, 4);\n       switch (INTVAL (lo))\n \t{\n \t  case 0 :\n@@ -3685,12 +3685,12 @@\n     }\n   if (GET_CODE (operands[0]) != REG)\n     {\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n+      operands[1] = adjust_address (operands[0], SImode, 4);\n       return \\\"and%.l %2,%0\\;and%.l %R2,%1\\\";\n     }\n   if (GET_CODE (operands[2]) != REG)\n     {\n-      operands[1] = adj_offsettable_operand (operands[2], 4);\n+      operands[1] = adjust_address (operands[2], SImode, 4);\n       return \\\"and%.l %2,%0\\;and%.l %1,%R0\\\";\n     }\n   return \\\"and%.l %2,%0\\;and%.l %R2,%R0\\\";\n@@ -3781,12 +3781,13 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[0] = adj_offsettable_operand (operands[0], 4);\n+    operands[0] = adjust_address (operands[0], SImode, 4);\n   if (GET_MODE (operands[1]) == SImode)\n     return \\\"or%.l %1,%0\\\";\n   byte_mode = (GET_MODE (operands[1]) == QImode);\n   if (GET_CODE (operands[0]) == MEM)\n-    operands[0] = adj_offsettable_operand (operands[0], byte_mode ? 3 : 2);\n+    operands[0] = adjust_address (operands[0], byte_mode ? QImode : HImode,\n+\t\t\t\t  byte_mode ? 3 : 2);\n   if (byte_mode)\n     return \\\"or%.b %1,%0\\\";\n   else\n@@ -3830,7 +3831,7 @@\n       if (GET_CODE (operands[0]) == REG)\n \toperands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else\n-\toperands[0] = adj_offsettable_operand (operands[0], 4);\n+\toperands[0] = adjust_address (operands[0], SImode, 4);\n       switch (INTVAL (lo))\n \t{\n \t  case 0 :\n@@ -3853,12 +3854,12 @@\n     }\n   if (GET_CODE (operands[0]) != REG)\n     {\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n+      operands[1] = adjust_address (operands[0], SImode, 4);\n       return \\\"or%.l %2,%0\\;or%.l %R2,%1\\\";\n     }\n   if (GET_CODE (operands[2]) != REG)\n     {\n-      operands[1] = adj_offsettable_operand (operands[2], 4);\n+      operands[1] = adjust_address (operands[2], SImode, 4);\n       return \\\"or%.l %2,%0\\;or%.l %1,%R0\\\";\n     }\n   return \\\"or%.l %2,%0\\;or%.l %R2,%R0\\\";\n@@ -3943,7 +3944,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[2]) != REG)\n-      operands[2] = adj_offsettable_operand (operands[2], 2);\n+      operands[2] = adjust_address (operands[2], HImode, 2);\n   if (GET_CODE (operands[2]) != REG\n   || REGNO (operands[2]) != REGNO (operands[0]))\n     output_asm_insn (\\\"move%.w %2,%0\\\", operands);\n@@ -3962,7 +3963,8 @@\n   CC_STATUS_INIT;\n   byte_mode = (GET_MODE (operands[1]) == QImode);\n   if (GET_CODE (operands[0]) == MEM)\n-    operands[0] = adj_offsettable_operand (operands[0], byte_mode ? 3 : 2);\n+    operands[0] = adjust_address (operands[0], byte_mode ? QImode : HImode,\n+\t\t\t\t  byte_mode ? 3 : 2);\n   if (byte_mode)\n     return \\\"or%.b %1,%0\\\";\n   else\n@@ -4009,7 +4011,7 @@\n       if (GET_CODE (operands[0]) == REG)\n \toperands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else\n-\toperands[0] = adj_offsettable_operand (operands[0], 4);\n+\toperands[0] = adjust_address (operands[0], SImode, 4);\n       switch (INTVAL (lo))\n \t{\n \t  case 0 :\n@@ -4034,12 +4036,12 @@\n     }\n   if (GET_CODE (operands[0]) != REG)\n     {\n-      operands[1] = adj_offsettable_operand (operands[0], 4);\n+      operands[1] = adjust_address (operands[0], SImode, 4);\n       return \\\"eor%.l %2,%0\\;eor%.l %R2,%1\\\";\n     }\n   if (GET_CODE (operands[2]) != REG)\n     {\n-      operands[1] = adj_offsettable_operand (operands[2], 4);\n+      operands[1] = adjust_address (operands[2], SImode, 4);\n       return \\\"eor%.l %2,%0\\;eor%.l %1,%R0\\\";\n     }\n   return \\\"eor%.l %2,%0\\;eor%.l %R2,%R0\\\";\n@@ -4138,7 +4140,7 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[1] = adj_offsettable_operand (operands[0], 4);\n+    operands[1] = adjust_address (operands[0], SImode, 4);\n   if (ADDRESS_REG_P (operands[0]))\n     return \\\"exg %/d0,%1\\;neg%.l %/d0\\;exg %/d0,%1\\;exg %/d0,%0\\;negx%.l %/d0\\;exg %/d0,%0\\\";\n   else\n@@ -4451,7 +4453,7 @@\n         || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n     operands[1] = operands[0];\n   else\n-    operands[1] = adj_offsettable_operand (operands[0], 4);\n+    operands[1] = adjust_address (operands[0], SImode, 4);\n   return \\\"not%.l %1\\;not%.l %0\\\";\n }\")\n \n@@ -4520,7 +4522,7 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[2] = adj_offsettable_operand (operands[0], 4);\n+    operands[2] = adjust_address (operands[0], SImode, 4);\n   if (ADDRESS_REG_P (operands[0]))\n     return \\\"move%.l %1,%0\\;sub%.l %2,%2\\\";\n   else\n@@ -4544,7 +4546,7 @@\n       return \\\"move%.w %1,%2\\;move%.l %2,%0\\;clr%.l %0\\\";\n     else\n       {\n-\toperands[3] = adj_offsettable_operand (operands[0], 4);\n+\toperands[3] = adjust_address (operands[0], SImode, 4);\n \treturn \\\"move%.w %1,%2\\;move%.l %2,%0\\;clr%.l %3\\\";\n       }\n     }\n@@ -4565,15 +4567,15 @@\n   if (GET_CODE (operands[1]) == REG)\n     operands[3] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n-    operands[3] = adj_offsettable_operand (operands[1], 4);\n+    operands[3] = adjust_address (operands[1], SImode, 4);\n   if (GET_CODE (operands[0]) == REG)\n     operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n     return \\\"clr%.l %0\\;move%.l %3,%0\\\";\n   else if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n     return \\\"move%.l %3,%0\\;clr%.l %0\\\";\n   else\n-    operands[2] = adj_offsettable_operand (operands[0], 4);\n+    operands[2] = adjust_address (operands[0], SImode, 4);\n   if (ADDRESS_REG_P (operands[2]))\n     return \\\"move%.l %3,%0\\;sub%.l %2,%2\\\";\n   else\n@@ -4735,7 +4737,7 @@\n   \"*\n {\n   if (GET_CODE (operands[1]) != REG)\n-    operands[1] = adj_offsettable_operand (operands[1], 2);\n+    operands[1] = adjust_address (operands[1], HImode, 2);\n   return \\\"move%.w %1,%0\\\";\n } \")\n \n@@ -4776,7 +4778,7 @@\n   if (which_alternative == 1)\n     operands[3] = operands[0];\n   else\n-    operands[3] = adj_offsettable_operand (operands[0], 4);\n+    operands[3] = adjust_address (operands[0], SImode, 4);\n   if (TARGET_68020)\n     return \\\"move%.l %1,%3\\;smi %2\\;extb%.l %2\\;move%.l %2,%0\\\";\n   else\n@@ -4916,7 +4918,7 @@\n ;;  if (GET_CODE (operands[1]) == REG)\n ;;    operands[2] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n ;;  else\n-;;    operands[2] = adj_offsettable_operand (operands[1], 4);\n+;;    operands[2] = adjust_address (operands[1], SImode, 4);\n ;;  return \\\"move%.l %0,%2\\;clr%.l %1\\\";\n ;;} \")\n \n@@ -4945,11 +4947,11 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[2] = adj_offsettable_operand (operands[0], 4);\n+    operands[2] = adjust_address (operands[0], SImode, 4);\n   if (GET_CODE (operands[1]) == REG)\n     operands[3] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n-    operands[3] = adj_offsettable_operand (operands[1], 4);\n+    operands[3] = adjust_address (operands[1], SImode, 4);\n   if (ADDRESS_REG_P (operands[0]))\n     return \\\"move%.l %1,%2\\;sub%.l %0,%0\\\";\n   else\n@@ -5284,7 +5286,7 @@\n   \"*\n {\n   operands[0]\n-    = adj_offsettable_operand (operands[0], INTVAL (operands[1]) / 8);\n+    = adjust_address (operands[0], SImode, INTVAL (operands[1]) / 8);\n \n   return \\\"move%.l %2,%0\\\";\n }\")\n@@ -5307,12 +5309,15 @@\n         return \\\"bfins %3,%0{%b2:%b1}\\\";\n     }\n   else\n-    operands[0]\n-      = adj_offsettable_operand (operands[0], INTVAL (operands[2]) / 8);\n+    operands[0] = adjust_address (operands[0],\n+\t\t\t\t  INTVAL (operands[1]) == 8 ? QImode : HImode,\n+\t\t\t\t  INTVAL (operands[2]) / 8);\n \n   if (GET_CODE (operands[3]) == MEM)\n-    operands[3] = adj_offsettable_operand (operands[3],\n-\t\t\t\t\t   (32 - INTVAL (operands[1])) / 8);\n+    operands[3] = adjust_address (operands[3],\n+\t\t\t\t  INTVAL (operands[1]) == 8 ? QImode : HImode,\n+\t\t\t\t  (32 - INTVAL (operands[1])) / 8);\n+\n   if (INTVAL (operands[1]) == 8)\n     return \\\"move%.b %3,%0\\\";\n   return \\\"move%.w %3,%0\\\";\n@@ -5337,7 +5342,7 @@\n   \"*\n {\n   operands[1]\n-    = adj_offsettable_operand (operands[1], INTVAL (operands[2]) / 8);\n+    = adjust_address (operands[1], SImode, INTVAL (operands[2]) / 8);\n \n   return \\\"move%.l %1,%0\\\";\n }\")\n@@ -5362,12 +5367,14 @@\n     }\n   else\n     operands[1]\n-      = adj_offsettable_operand (operands[1], INTVAL (operands[3]) / 8);\n+      = adjust_address (operands[1], SImode, INTVAL (operands[3]) / 8);\n \n   output_asm_insn (\\\"clr%.l %0\\\", operands);\n   if (GET_CODE (operands[0]) == MEM)\n-    operands[0] = adj_offsettable_operand (operands[0],\n-\t\t\t\t\t   (32 - INTVAL (operands[1])) / 8);\n+    operands[0] = adjust_address (operands[0],\n+\t\t\t\t  INTVAL (operands[2]) == 8 ? QImode : HImode,\n+\t\t\t\t  (32 - INTVAL (operands[1])) / 8);\n+\n   if (INTVAL (operands[2]) == 8)\n     return \\\"move%.b %1,%0\\\";\n   return \\\"move%.w %1,%0\\\";\n@@ -5391,7 +5398,7 @@\n   \"*\n {\n   operands[1]\n-    = adj_offsettable_operand (operands[1], INTVAL (operands[2]) / 8);\n+    = adjust_address (operands[1], SImode, INTVAL (operands[2]) / 8);\n \n   return \\\"move%.l %1,%0\\\";\n }\")\n@@ -5415,7 +5422,9 @@\n     }\n   else\n     operands[1]\n-      = adj_offsettable_operand (operands[1], INTVAL (operands[3]) / 8);\n+      = adjust_address (operands[1],\n+\t\t\tINTVAL (operands[2]) == 8 ? QImode : HImode,\n+\t\t\tINTVAL (operands[3]) / 8);\n \n   if (INTVAL (operands[2]) == 8)\n     return \\\"move%.b %1,%0\\;extb%.l %0\\\";\n@@ -5918,7 +5927,7 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[3] = adj_offsettable_operand (operands[0], 4);\n+    operands[3] = adjust_address (operands[0], SImode, 4);\n   if (! ADDRESS_REG_P (operands[0]))\n     {\n       if (reg_overlap_mentioned_p (operands[2], operands[0]))\n@@ -5998,7 +6007,7 @@\n   if (GET_CODE (operands[0]) == REG)\n     operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n-    operands[3] = adj_offsettable_operand (operands[0], 4);\n+    operands[3] = adjust_address (operands[0], SImode, 4);\n   if (!ADDRESS_REG_P (operands[0]))\n     {\n       if (reg_overlap_mentioned_p (operands[2], operands[0]))"}, {"sha": "83b4e5249c27c99bd6c60a27b5e323e7ac30b424", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -2013,7 +2013,7 @@\n ;    case 0:\n ;      return \\\"or %0,%#r0,0\\;or %d0,%#r0,0\\\";\n ;    case 1:\n-;      operands[1] = adj_offsettable_operand (operands[0], 4);\n+;      operands[1] = adjust_address (operands[0], SImode, 4);\n ;      return \\\"%v0st\\\\t %#r0,%0\\;st %#r0,%1\\\";\n ;    }\n ;}\")"}, {"sha": "c5781752e213f70f914a95365a3225c5df47f8cc", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -309,8 +309,8 @@ mcore_print_operand (stream, x, code)\n \t  fputs (reg_names[REGNO (x) + 1], (stream));\n \t  break;\n \tcase MEM:\n-\t  mcore_print_operand_address (stream,\n-\t\t\t\t       XEXP (adj_offsettable_operand (x, 4), 0));\n+\t  mcore_print_operand_address\n+\t    (stream, XEXP (adjust_address (x, SImode, 4), 0));\n \t  break;\n \tdefault:\n \t  abort ();"}, {"sha": "0a614d9009879493feea3801e4a747ce29f47eb9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -2538,7 +2538,7 @@ mips_move_2words (operands, insn)\n \n \t  else if (double_memory_operand (op1, GET_MODE (op1)))\n \t    {\n-\t      operands[2] = adj_offsettable_operand (op1, 4);\n+\t      operands[2] = adjust_address (op1, SImode, 4);\n \t      ret = (reg_mentioned_p (op0, op1)\n \t\t     ? \"lw\\t%D0,%2\\n\\tlw\\t%0,%1\"\n \t\t     : \"lw\\t%0,%1\\n\\tlw\\t%D0,%2\");\n@@ -2632,7 +2632,7 @@ mips_move_2words (operands, insn)\n \n \t  else if (double_memory_operand (op0, GET_MODE (op0)))\n \t    {\n-\t      operands[2] = adj_offsettable_operand (op0, 4);\n+\t      operands[2] = adjust_address (op0, SImode, 4);\n \t      ret = \"sw\\t%1,%0\\n\\tsw\\t%D1,%2\";\n \t    }\n \t}\n@@ -2647,7 +2647,7 @@ mips_move_2words (operands, insn)\n \t    ret = \"sd\\t%.,%0\";\n \t  else\n \t    {\n-\t      operands[2] = adj_offsettable_operand (op0, 4);\n+\t      operands[2] = adjust_address (op0, SImode, 4);\n \t      ret = \"sw\\t%.,%0\\n\\tsw\\t%.,%2\";\n \t    }\n \t}"}, {"sha": "bba9645b4eb1321639be33d1b412d575b3769492", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -5070,8 +5070,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n \t  scratch = gen_rtx_REG (SImode, REGNO (scratch));\n \t  memword = adjust_address (op1, SImode, 0);\n-\t  offword = change_address (adj_offsettable_operand (op1, 4),\n-\t\t\t\t    SImode, NULL_RTX);\n+\t  offword = adjust_address (op1, SImode, 4);\n+\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n \t      hi_word = memword;\n@@ -5150,8 +5150,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \n \t  scratch = gen_rtx_REG (SImode, REGNO (operands[2]));\n \t  memword = adjust_address (op0, SImode, 0);\n-\t  offword = change_address (adj_offsettable_operand (op0, 4),\n-\t\t\t\t    SImode, NULL_RTX);\n+\t  offword = adjust_address (op0, SImode, 4);\n+\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n \t      hi_word = memword;"}, {"sha": "55c9fa5db2796efba1e34e1a8ffac7b564a9420f", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Matsushita MN10200 series\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -217,7 +217,7 @@ print_operand (file, x, code)\n \t  {\n \t  case MEM:\n \t    fputc ('(', file);\n-\t    x = adj_offsettable_operand (x, 2);\n+\t    x = adjust_address (x, HImode, 2);\n \t    output_address (XEXP (x, 0));\n \t    fputc (')', file);\n \t    break;"}, {"sha": "f472867cf281d33f95340f33e03d53aa3e87f06f", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -200,7 +200,7 @@ print_operand (file, x, code)\n \t  {\n \t  case MEM:\n \t    fputc ('(', file);\n-\t    x = adj_offsettable_operand (x, 4);\n+\t    x = adjust_address (x, SImode, 4);\n \t    output_address (XEXP (x, 0));\n \t    fputc (')', file);\n \t    break;"}, {"sha": "6dc89b168789b209576b48793ed647c2cb7f65c9", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -255,7 +255,7 @@ split_di (operands, num, lo_half, hi_half)\n       else if (offsettable_memref_p (operands[num]))\n \t{\n \t  lo_half[num] = operands[num];\n-\t  hi_half[num] = adj_offsettable_operand (operands[num], 4);\n+\t  hi_half[num] = adjust_address (operands[num], SImode, 4);\n \t}\n       else\n \tabort ();\n@@ -325,14 +325,14 @@ output_move_double (operands)\n   if (optype0 == REGOP)\n     latehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (optype0 == OFFSOP)\n-    latehalf[0] = adj_offsettable_operand (operands[0], 4);\n+    latehalf[0] = adjust_address (operands[0], SImode, 4);\n   else\n     latehalf[0] = operands[0];\n \n   if (optype1 == REGOP)\n     latehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else if (optype1 == OFFSOP)\n-    latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+    latehalf[1] = adjust_address (operands[1], SImode, 4);\n   else if (optype1 == CNSTOP)\n     split_double (operands[1], &operands[1], &latehalf[1]);\n   else\n@@ -382,7 +382,7 @@ output_move_double (operands)\n \t  xops[1] = operands[0];\n \t  output_asm_insn (\"addr %a0,%1\", xops);\n \t  operands[1] = gen_rtx_MEM (DImode, operands[0]);\n-\t  latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+\t  latehalf[1] = adjust_address (operands[1], SImode, 4);\n \t  /* The first half has the overlap, Do the late half first.  */\n \t  output_asm_insn (singlemove_string (latehalf), latehalf);\n \t  /* Then clobber.  */"}, {"sha": "af1b60fcb70c9e253193171461952ec42f7cff3c", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, ns32000 Version\n-;;  Copyright (C) 1988, 1994, 1996, 1998, 1999, 2000\n+;;  Copyright (C) 1988, 1994, 1996, 1998, 1999, 2000, 2001\n ;;  Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -2217,8 +2217,8 @@\n     {\n       if (INTVAL (operands[2]) >= 8)\n \t{\n-\t  operands[0] = adj_offsettable_operand (operands[0],\n-\t\t\t\t\t        INTVAL (operands[2]) / 8);\n+\t  operands[0] = adjust_address (operands[0], QImode,\n+\t\t\t\t\tINTVAL (operands[2]) / 8);\n           operands[2] = GEN_INT (INTVAL (operands[2]) % 8);\n \t}\n       if (INTVAL (operands[1]) <= 8)"}, {"sha": "59aaf6165ebe4e4ed0ac5b5d0752ccd274846f9b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -2061,14 +2061,14 @@ output_move_double (operands)\n   if (optype0 == REGOP)\n     latehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (optype0 == OFFSOP)\n-    latehalf[0] = adj_offsettable_operand (operands[0], 4);\n+    latehalf[0] = adjust_address (operands[0], SImode, 4);\n   else\n     latehalf[0] = operands[0];\n \n   if (optype1 == REGOP)\n     latehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else if (optype1 == OFFSOP)\n-    latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+    latehalf[1] = adjust_address (operands[1], SImode, 4);\n   else if (optype1 == CNSTOP)\n     split_double (operands[1], &operands[1], &latehalf[1]);\n   else"}, {"sha": "a06f17faf433b0ebf075ea5017821ba6e4f3691b", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for gcc2 for pdp11.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001\n    Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n@@ -404,14 +404,14 @@ output_move_double (operands)\n   if (optype0 == REGOP)\n     latehalf[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n   else if (optype0 == OFFSOP)\n-    latehalf[0] = adj_offsettable_operand (operands[0], 2);\n+    latehalf[0] = adjust_address (operands[0], HImode, 2);\n   else\n     latehalf[0] = operands[0];\n \n   if (optype1 == REGOP)\n     latehalf[1] = gen_rtx_REG (HImode, REGNO (operands[1]) + 1);\n   else if (optype1 == OFFSOP)\n-    latehalf[1] = adj_offsettable_operand (operands[1], 2);\n+    latehalf[1] = adjust_address (operands[1], HImode, 2);\n   else if (optype1 == CNSTOP)\n     {\n \tif (CONSTANT_P (operands[1]))\n@@ -616,14 +616,14 @@ output_move_quad (operands)\n   if (optype0 == REGOP)\n     latehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 2);\n   else if (optype0 == OFFSOP)\n-    latehalf[0] = adj_offsettable_operand (operands[0], 4);\n+    latehalf[0] = adjust_address (operands[0], SImode, 4);\n   else\n     latehalf[0] = operands[0];\n \n   if (optype1 == REGOP)\n     latehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 2);\n   else if (optype1 == OFFSOP)\n-    latehalf[1] = adj_offsettable_operand (operands[1], 4);\n+    latehalf[1] = adjust_address (operands[1], SImode, 4);\n   else if (optype1 == CNSTOP)\n     {\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)"}, {"sha": "93fac95be810fab61684fd8967398e357156dc42", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the pdp11 for GNU C compiler\n-;; Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000\n+;; Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001\n ;; Free Software Foundation, Inc.\n ;; Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n@@ -834,12 +834,12 @@\n \n   /* we don't want to mess with auto increment */\n   \n-  switch(which_alternative)\n+  switch (which_alternative)\n   {\n     case 0:\n \n       latehalf[0] = operands[0];\n-      operands[0] = adj_offsettable_operand(operands[0], 2);\n+      operands[0] = adjust_address(operands[0], HImode, 2);\n   \n       output_asm_insn(\\\"mov %1, %0\\\", operands);\n       output_asm_insn(\\\"sxt %0\\\", latehalf);\n@@ -1000,7 +1000,7 @@\n   if (REG_P (operands[0]))\n     operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n   else\n-    operands[0] = adj_offsettable_operand (operands[0], 2);\n+    operands[0] = adjust_address (operands[0], HImode, 2);\n   \n   if (! CONSTANT_P(operands[2]))\n   {\n@@ -1009,7 +1009,7 @@\n     if (REG_P (operands[2]))\n       operands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n     else\n-      operands[2] = adj_offsettable_operand(operands[2], 2);\n+      operands[2] = adjust_address (operands[2], HImode, 2);\n \n     output_asm_insn (\\\"add %2, %0\\\", operands);\n     output_asm_insn (\\\"adc %0\\\", lateoperands);\n@@ -1102,14 +1102,14 @@\n   if (REG_P (operands[0]))\n     operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n   else\n-    operands[0] = adj_offsettable_operand (operands[0], 2);\n+    operands[0] = adjust_address (operands[0], HImode, 2);\n   \n   lateoperands[2] = operands[2];\n \n   if (REG_P (operands[2]))\n     operands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n   else\n-    operands[2] = adj_offsettable_operand(operands[2], 2);\n+    operands[2] = adjust_address (operands[2], HImode, 2);\n \n   output_asm_insn (\\\"sub %2, %0\\\", operands);\n   output_asm_insn (\\\"sbc %0\\\", lateoperands);\n@@ -1209,7 +1209,7 @@\n   if (REG_P (operands[0]))\n     operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n   else\n-    operands[0] = adj_offsettable_operand (operands[0], 2);\n+    operands[0] = adjust_address (operands[0], HImode, 2);\n   \n   if (! CONSTANT_P(operands[2]))\n   {\n@@ -1218,7 +1218,7 @@\n     if (REG_P (operands[2]))\n       operands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n     else\n-      operands[2] = adj_offsettable_operand(operands[2], 2);\n+      operands[2] = adjust_address (operands[2], HImode, 2);\n \n     output_asm_insn (\\\"bic %2, %0\\\", operands);\n     output_asm_insn (\\\"bic %2, %0\\\", lateoperands);\n@@ -1274,7 +1274,7 @@\n   if (REG_P (operands[0]))\n     operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n   else\n-    operands[0] = adj_offsettable_operand (operands[0], 2);\n+    operands[0] = adjust_address (operands[0], HImode, 2);\n   \n   if (! CONSTANT_P(operands[2]))\n     {\n@@ -1283,7 +1283,7 @@\n       if (REG_P (operands[2]))\n \toperands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n       else\n-\toperands[2] = adj_offsettable_operand (operands[2], 2);\n+\toperands[2] = adjust_address (operands[2], HImode, 2);\n \n       output_asm_insn (\\\"bis %2, %0\\\", operands);\n       output_asm_insn (\\\"bis %2, %0\\\", lateoperands);"}, {"sha": "c36d13c69b253230cda22197fdab285601561dbe", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -294,7 +294,7 @@ print_operand (stream, x, code)\n \tcase MEM:\n \t  if (GET_CODE (XEXP (x, 0)) != PRE_DEC\n \t      && GET_CODE (XEXP (x, 0)) != POST_INC)\n-\t    x = adj_offsettable_operand (x, 4);\n+\t    x = adjust_address (x, SImode, 4);\n \t  print_operand_address (stream, XEXP (x, 0));\n \t  break;\n \tdefault:"}, {"sha": "88d6f3f909d4259c7c2382af305d107fa1bf1164", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -482,7 +482,7 @@ print_operand (file, x, code)\n \t  fprintf (file, reg_names[REGNO (x) + 1]);\n \t  break;\n \tcase MEM:\n-\t  x = XEXP (adj_offsettable_operand (x, 4), 0);\n+\t  x = XEXP (adjust_address (x, SImode, 4), 0);\n \t  print_operand_address (file, x);\n \t  if (GET_CODE (x) == CONST_INT)\n \t    fprintf (file, \"[r0]\");"}, {"sha": "182a6edc80de499158ddefe995def0ae97f5a6c7", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description for GNU compiler, Vax Version\n-;; Copyright (C) 1987, 1988, 1991, 1994, 1995, 1996, 1998, 1999, 2000\n+;; Copyright (C) 1987, 1988, 1991, 1994, 1995, 1996, 1998, 1999, 2000, 2001\n ;; Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n@@ -1322,7 +1322,9 @@\n     }\n   else\n     operands[0]\n-      = adj_offsettable_operand (operands[0], INTVAL (operands[2]) / 8);\n+      = adjust_address (operands[0],\n+\t\t\tINTVAL (operands[1]) == 8 ? QImode : HImode,\n+\t\t\tINTVAL (operands[2]) / 8);\n \n   CC_STATUS_INIT;\n   if (INTVAL (operands[1]) == 8)\n@@ -1348,7 +1350,9 @@\n     }\n   else\n     operands[1]\n-      = adj_offsettable_operand (operands[1], INTVAL (operands[3]) / 8);\n+      = adjust_address (operands[1],\n+\t\t\tINTVAL (operands[2]) == 8 ? QImode : HImode,\n+\t\t\tINTVAL (operands[3]) / 8);\n \n   if (INTVAL (operands[2]) == 8)\n     return \\\"movzbl %1,%0\\\";\n@@ -1373,7 +1377,9 @@\n     }\n   else\n     operands[1]\n-      = adj_offsettable_operand (operands[1], INTVAL (operands[3]) / 8);\n+      = adjust_address (operands[1],\n+\t\t\tINTVAL (operands[2]) == 8 ? QImode : HImode,\n+\t\t\tINTVAL (operands[3]) / 8);\n \n   if (INTVAL (operands[2]) == 8)\n     return \\\"cvtbl %1,%0\\\";"}, {"sha": "9fad7d6b33d997056b34402e3e19ed7b18c3b87e", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for AT&T we32000 Family.\n-   Copyright (C) 1991, 1992, 1997, 1998, 1999, 2000\n+   Copyright (C) 1991, 1992, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by John Wehle (john@feith1.uucp)\n \n@@ -51,7 +51,7 @@ output_move_double (operands)\n       msw_dreg = operands[0];\n     }\n   else if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-    lsw_operands[0] = adj_offsettable_operand (operands[0], 4);\n+    lsw_operands[0] = adjust_address (operands[0], SImode, 4);\n   else\n     abort ();\n \n@@ -62,7 +62,7 @@ output_move_double (operands)\n     }\n   else if (GET_CODE (operands[1]) == MEM && offsettable_memref_p (operands[1])) \n     {\n-      lsw_operands[1] = adj_offsettable_operand (operands[1], 4);\n+      lsw_operands[1] = adjust_address (operands[1], SImode, 4);\n       lsw_sreg = operands[1];\n       for ( ; ; ) \n \t{\n@@ -128,7 +128,7 @@ output_push_double (operands)\n   if (GET_CODE (operands[0]) == REG)\n     lsw_operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-    lsw_operands[0] = adj_offsettable_operand (operands[0], 4);\n+    lsw_operands[0] = adjust_address (operands[0], SImode, 4);\n   else if (GET_CODE (operands[0]) == CONST_DOUBLE)\n     {\n       lsw_operands[0] = GEN_INT (CONST_DOUBLE_HIGH (operands[0]));"}, {"sha": "e9a789a0b364f22a8893adb52ce4a9186df8eac1", "filename": "gcc/config/we32k/we32k.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fconfig%2Fwe32k%2Fwe32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.md?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1,5 +1,6 @@\n ;; Machine description for GNU compiler, AT&T we32000 Version\n-;; Copyright (C) 1991, 1992, 1994, 1998, 1999 Free Software Foundation, Inc.\n+;; Copyright (C) 1991, 1992, 1994, 1998, 1999, 2001\n+;; Free Software Foundation, Inc.\n ;; Contributed by John Wehle (john@feith1.uucp)\n \n ;; This file is part of GNU CC.\n@@ -128,15 +129,15 @@\n     lsw_operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-      lsw_operands[0] = adj_offsettable_operand(operands[0], 4);\n+      lsw_operands[0] = adjust_address (operands[0], SImode, 4);\n     else\n       abort();\n \n   if (GET_CODE (operands[2]) == REG)\n     lsw_operands[2] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n   else\n     if (GET_CODE (operands[2]) == MEM && offsettable_memref_p (operands[2]))\n-      lsw_operands[2] = adj_offsettable_operand(operands[2], 4);\n+      lsw_operands[2] = adjust_address (operands[2], SImode, 4);\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n@@ -178,15 +179,15 @@\n     lsw_operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-      lsw_operands[0] = adj_offsettable_operand(operands[0], 4);\n+      lsw_operands[0] = adjust_address(operands[0], SImode, 4);\n     else\n       abort();\n \n   if (GET_CODE (operands[1]) == REG)\n     lsw_operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n     if (GET_CODE (operands[1]) == MEM && offsettable_memref_p (operands[1]))\n-      lsw_operands[1] = adj_offsettable_operand(operands[1], 4);\n+      lsw_operands[1] = adjust_address (operands[1], SImode, 4);\n     else\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n         {\n@@ -206,7 +207,7 @@\n     lsw_operands[2] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n   else\n     if (GET_CODE (operands[2]) == MEM && offsettable_memref_p (operands[2]))\n-      lsw_operands[2] = adj_offsettable_operand(operands[2], 4);\n+      lsw_operands[2] = adjust_address (operands[2], SImode, 4);\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n@@ -292,15 +293,15 @@\n     lsw_operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-      lsw_operands[0] = adj_offsettable_operand(operands[0], 4);\n+      lsw_operands[0] = adjust_address (operands[0], SImode, 4);\n     else\n       abort();\n \n   if (GET_CODE (operands[2]) == REG)\n     lsw_operands[2] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n   else\n     if (GET_CODE (operands[2]) == MEM && offsettable_memref_p (operands[2]))\n-      lsw_operands[2] = adj_offsettable_operand(operands[2], 4);\n+      lsw_operands[2] = adjust_address (operands[2], SImode, 4);\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {\n@@ -342,15 +343,15 @@\n     lsw_operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     if (GET_CODE (operands[0]) == MEM && offsettable_memref_p (operands[0]))\n-      lsw_operands[0] = adj_offsettable_operand(operands[0], 4);\n+      lsw_operands[0] = adjust_address (operands[0], SImode, 4);\n     else\n       abort();\n \n   if (GET_CODE (operands[1]) == REG)\n     lsw_operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n     if (GET_CODE (operands[1]) == MEM && offsettable_memref_p (operands[1]))\n-      lsw_operands[1] = adj_offsettable_operand(operands[1], 4);\n+      lsw_operands[1] = adjust_address (operands[1], SImode, 4);\n     else\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n         {\n@@ -370,7 +371,7 @@\n     lsw_operands[2] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n   else\n     if (GET_CODE (operands[2]) == MEM && offsettable_memref_p (operands[2]))\n-      lsw_operands[2] = adj_offsettable_operand(operands[2], 4);\n+      lsw_operands[2] = adjust_address (operands[2], SImode, 4);\n     else\n       if (GET_CODE (operands[2]) == CONST_DOUBLE)\n         {"}, {"sha": "bf5eb89622af5ea52b9edfc24a89b80eaab79e2a", "filename": "gcc/explow.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -78,6 +78,7 @@ plus_constant_wide (x, c)\n      register HOST_WIDE_INT c;\n {\n   register RTX_CODE code;\n+  rtx y = x;\n   register enum machine_mode mode;\n   register rtx tem;\n   int all_constant = 0;\n@@ -159,18 +160,20 @@ plus_constant_wide (x, c)\n \t  x = XEXP (x, 0);\n \t  goto restart;\n \t}\n-      else if (CONSTANT_P (XEXP (x, 0)))\n+      else if (CONSTANT_P (XEXP (x, 1)))\n \t{\n-\t  x = gen_rtx_PLUS (mode,\n-\t\t\t    plus_constant (XEXP (x, 0), c),\n-\t\t\t    XEXP (x, 1));\n+\t  x = gen_rtx_PLUS (mode, XEXP (x, 0), plus_constant (XEXP (x, 1), c));\n \t  c = 0;\n \t}\n-      else if (CONSTANT_P (XEXP (x, 1)))\n+      else if (find_constant_term_loc (&y))\n \t{\n-\t  x = gen_rtx_PLUS (mode,\n-\t\t\t    XEXP (x, 0),\n-\t\t\t    plus_constant (XEXP (x, 1), c));\n+\t  /* We need to be careful since X may be shared and we can't\n+\t     modify it in place.  */\n+\t  rtx copy = copy_rtx (x);\n+\t  rtx *const_loc = find_constant_term_loc (&copy);\n+\n+\t  *const_loc = plus_constant (*const_loc, c);\n+\t  x = copy;\n \t  c = 0;\n \t}\n       break;"}, {"sha": "e3472a53aeada4922e4a77f11595275efd2cef6a", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -55,7 +55,6 @@ Boston, MA 02111-1307, USA.  */\n \n static void validate_replace_rtx_1\tPARAMS ((rtx *, rtx, rtx, rtx));\n static rtx *find_single_use_1\t\tPARAMS ((rtx, rtx *));\n-static rtx *find_constant_term_loc\tPARAMS ((rtx *));\n static void validate_replace_src_1 \tPARAMS ((rtx *, void *));\n static rtx split_insn\t\t\tPARAMS ((rtx));\n \n@@ -1829,7 +1828,7 @@ asm_operand_ok (op, constraint)\n    return the location (type rtx *) of the pointer to that constant term.\n    Otherwise, return a null pointer.  */\n \n-static rtx *\n+rtx *\n find_constant_term_loc (p)\n      rtx *p;\n {\n@@ -2015,52 +2014,6 @@ mode_independent_operand (op, mode)\n  lose: ATTRIBUTE_UNUSED_LABEL\n   return 0;\n }\n-\n-/* Given an operand OP that is a valid memory reference which\n-   satisfies offsettable_memref_p, return a new memory reference whose\n-   address has been adjusted by OFFSET.  OFFSET should be positive and\n-   less than the size of the object referenced.  */\n-\n-rtx\n-adj_offsettable_operand (op, offset)\n-     rtx op;\n-     int offset;\n-{\n-  register enum rtx_code code = GET_CODE (op);\n-\n-  if (code == MEM) \n-    {\n-      register rtx y = XEXP (op, 0);\n-      register rtx new;\n-\n-      if (CONSTANT_ADDRESS_P (y))\n-\t{\n-\t  new = gen_rtx_MEM (GET_MODE (op), plus_constant (y, offset));\n-\t  MEM_COPY_ATTRIBUTES (new, op);\n-\t  return new;\n-\t}\n-\n-      if (GET_CODE (y) == PLUS)\n-\t{\n-\t  rtx z = y;\n-\t  register rtx *const_loc;\n-\n-\t  op = copy_rtx (op);\n-\t  z = XEXP (op, 0);\n-\t  const_loc = find_constant_term_loc (&z);\n-\t  if (const_loc)\n-\t    {\n-\t      *const_loc = plus_constant (*const_loc, offset);\n-\t      return op;\n-\t    }\n-\t}\n-\n-      new = gen_rtx_MEM (GET_MODE (op), plus_constant (y, offset));\n-      MEM_COPY_ATTRIBUTES (new, op);\n-      return new;\n-    }\n-  abort ();\n-}\n \f\n /* Like extract_insn, but save insn extracted and don't extract again, when\n    called again for the same insn expecting that recog_data still contain the"}, {"sha": "13edabdd8acba3e72f5f7d6343554dc89e88007a", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72f00afa4b3bea9d3475221a5f51decc7341159/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b72f00afa4b3bea9d3475221a5f51decc7341159", "patch": "@@ -1295,7 +1295,7 @@ extern rtx get_label_after\t\tPARAMS ((rtx));\n extern rtx follow_jumps\t\t\tPARAMS ((rtx));\n \n /* In recog.c  */\n-extern rtx adj_offsettable_operand\tPARAMS ((rtx, int));\n+extern rtx *find_constant_term_loc\tPARAMS ((rtx *));\n \n /* In emit-rtl.c  */\n extern rtx try_split\t\t\tPARAMS ((rtx, rtx, int));"}]}