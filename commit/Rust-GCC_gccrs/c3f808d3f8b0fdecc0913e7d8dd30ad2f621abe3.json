{"sha": "c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNmODA4ZDNmOGIwZmRlY2MwOTEzZTdkOGRkMzBhZDJmNjIxYWJlMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-05-18T13:08:16Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-05-18T13:08:16Z"}, "message": "[arm][1/2] Remove support for deprecated -march=armv5 and armv5e\n\nThe -march=armv5 and armv5e options have been deprecated in GCC 7 [1].\nThis patch removes support for them.\nIt's mostly mechanical stuff. The functionality that was previously\ngated on arm_arch5 is now gated on arm_arch5t and the functionality\nthat was gated on arm_arch5e is now gated on arm_arch5te.\n\nA path in TARGET_OS_CPP_BUILTINS for VxWorks is now unreachable and\ntherefore is deleted.\n\nReferences to armv5 and armv5e are deleted/updated throughout the\nsource tree and testsuite.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\nAlso built a cc1 for arm-wrs-vxworks as a sanity check.\n\n        * config/arm/arm-cpus.in (armv5, armv5e): Delete features.\n        (armv5t, armv5te): New features.\n        (ARMv5, ARMv5e): Delete fgroups.\n        (ARMv5t, ARMv5te): Adjust for above changes.\n        (ARMv6m): Likewise.\n        (armv5, armv5e): Delete arches.\n        * config/arm/arm.md (*call_reg_armv5): Use arm_arch5t instead of\n        arm_arch5.\n        (*call_reg_arm): Likewise.\n        (*call_value_reg_armv5): Likewise.\n        (*call_value_reg_arm): Likewise.\n        (*call_symbol): Likewise.\n        (*call_value_symbol): Likewise.\n        (*sibcall_insn): Likewise.\n        (*sibcall_value_insn): Likewise.\n        (clzsi2): Likewise.\n        (prefetch): Likewise.\n        (define_split and define_peephole2 dependent on arm_arch5):\n        Likewise.\n        * config/arm/arm.h (TARGET_LDRD): Use arm_arch5te instead of\n        arm_arch5e.\n        (TARGET_ARM_QBIT): Likewise.\n        (TARGET_DSP_MULTIPLY): Likewise.\n        (enum base_architecture): Delete BASE_ARCH_5, BASE_ARCH_5E.\n        (arm_arch5, arm_arch5e): Delete.\n        (arm_arch5t, arm_arch5te): Declare.\n        * config/arm/arm.c (arm_arch5, arm_arch5e): Delete.\n        (arm_arch5t): Declare.\n        (arm_option_reconfigure_globals): Update for the above.\n        (arm_options_perform_arch_sanity_checks): Update comment, replace\n        use of arm_arch5 with arm_arch5t.\n        (use_return_insn): Likewise.\n        (arm_emit_call_insn): Likewise.\n        (output_return_instruction): Likewise.\n        (arm_final_prescan_insn): Likewise.\n        (arm_coproc_builtin_available): Likewise.\n        * config/arm/arm-c.c (arm_cpu_builtins): Replace arm_arch5 and\n        arm_arch5e with arm_arch5t and arm_arch5te.\n        * config/arm/arm-protos.h (arm_arch5, arm_arch5e): Delete.\n        (arm_arch5t, arm_arch5te): Declare.\n        * config/arm/arm-tables.opt: Regenerate.\n        * config/arm/t-arm-elf: Remove references to armv5, armv5e.\n        * config/arm/t-multilib: Likewise.\n        * config/arm/thumb1.md (*call_reg_thumb1_v5): Check arm_arch5t\n        instead of arm_arch5.\n        (*call_reg_thumb1): Likewise.\n        (*call_value_reg_thumb1_v5): Likewise.\n        (*call_value_reg_thumb1): Likewise.\n        * config/arm/vxworks.h (TARGET_OS_CPP_BUILTINS): Remove now\n        unreachable path.\n        * doc/invoke.texi (ARM Options): Remove references to armv5, armv5e.\n\n        * gcc.target/arm/pr40887.c: Update comment.\n        * lib/target-supports.exp: Don't generate effective target checks\n        and related helpers for armv5.  Update comment.\n        * gcc.target/arm/armv5_thumb_isa.c: Delete.\n        * gcc.target/arm/di-longlong64-sync-withhelpers.c: Update effective\n        target check and options.\n\n        * config/arm/libunwind.S: Update comment relating to armv5.\n\nFrom-SVN: r260362", "tree": {"sha": "c0b71c9aabe01d63143b65b27526e73b503fc56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b71c9aabe01d63143b65b27526e73b503fc56d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "feb4589d19187bc4b46160d0571eea2cb9a263af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb4589d19187bc4b46160d0571eea2cb9a263af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb4589d19187bc4b46160d0571eea2cb9a263af"}], "stats": {"total": 300, "additions": 160, "deletions": 140}, "files": [{"sha": "ce3dc01b9c80deef6b8a5c18ee8d61fe529837aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -1,3 +1,57 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv5, armv5e): Delete features.\n+\t(armv5t, armv5te): New features.\n+\t(ARMv5, ARMv5e): Delete fgroups.\n+\t(ARMv5t, ARMv5te): Adjust for above changes.\n+\t(ARMv6m): Likewise.\n+\t(armv5, armv5e): Delete arches.\n+\t* config/arm/arm.md (*call_reg_armv5): Use arm_arch5t instead of\n+\tarm_arch5.\n+\t(*call_reg_arm): Likewise.\n+\t(*call_value_reg_armv5): Likewise.\n+\t(*call_value_reg_arm): Likewise.\n+\t(*call_symbol): Likewise.\n+\t(*call_value_symbol): Likewise.\n+\t(*sibcall_insn): Likewise.\n+\t(*sibcall_value_insn): Likewise.\n+\t(clzsi2): Likewise.\n+\t(prefetch): Likewise.\n+\t(define_split and define_peephole2 dependent on arm_arch5):\n+\tLikewise.\n+\t* config/arm/arm.h (TARGET_LDRD): Use arm_arch5te instead of\n+\tarm_arch5e.\n+\t(TARGET_ARM_QBIT): Likewise.\n+\t(TARGET_DSP_MULTIPLY): Likewise.\n+\t(enum base_architecture): Delete BASE_ARCH_5, BASE_ARCH_5E.\n+\t(arm_arch5, arm_arch5e): Delete.\n+\t(arm_arch5t, arm_arch5te): Declare.\n+\t* config/arm/arm.c (arm_arch5, arm_arch5e): Delete.\n+\t(arm_arch5t): Declare.\n+\t(arm_option_reconfigure_globals): Update for the above.\n+\t(arm_options_perform_arch_sanity_checks): Update comment, replace\n+\tuse of arm_arch5 with arm_arch5t.\n+\t(use_return_insn): Likewise.\n+\t(arm_emit_call_insn): Likewise.\n+\t(output_return_instruction): Likewise.\n+\t(arm_final_prescan_insn): Likewise.\n+\t(arm_coproc_builtin_available): Likewise.\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Replace arm_arch5 and\n+\tarm_arch5e with arm_arch5t and arm_arch5te.\n+\t* config/arm/arm-protos.h (arm_arch5, arm_arch5e): Delete.\n+\t(arm_arch5t, arm_arch5te): Declare.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/t-arm-elf: Remove references to armv5, armv5e.\n+\t* config/arm/t-multilib: Likewise.\n+\t* config/arm/thumb1.md (*call_reg_thumb1_v5): Check arm_arch5t\n+\tinstead of arm_arch5.\n+\t(*call_reg_thumb1): Likewise.\n+\t(*call_value_reg_thumb1_v5): Likewise.\n+\t(*call_value_reg_thumb1): Likewise.\n+\t* config/arm/vxworks.h (TARGET_OS_CPP_BUILTINS): Remove now\n+\tunreachable path.\n+\t* doc/invoke.texi (ARM Options): Remove references to armv5, armv5e.\n+\n 2018-05-18  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/84846"}, {"sha": "4471f7914cf282c516a142174f9913e491558b44", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -212,9 +212,9 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n     {\n       int coproc_level = 0x1;\n \n-      if (arm_arch5)\n+      if (arm_arch5t)\n \tcoproc_level |= 0x2;\n-      if (arm_arch5e)\n+      if (arm_arch5te)\n \tcoproc_level |= 0x4;\n       if (arm_arch6)\n \tcoproc_level |= 0x8;"}, {"sha": "0a318877f10394e2c045d2a03a8f0757557136cf", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -60,14 +60,14 @@ define feature mode32\n # Architecture rel 4\n define feature armv4\n \n-# Architecture rel 5\n-define feature armv5\n-\n # Thumb aware.\n define feature thumb\n \n-# Architecture rel 5e.\n-define feature armv5e\n+# Architecture rel 5t.\n+define feature armv5t\n+\n+# Architecture rel 5te.\n+define feature armv5te\n \n # XScale.\n define feature xscale\n@@ -220,10 +220,8 @@ define fgroup ARMv3       ARMv2 mode32\n define fgroup ARMv3m      ARMv3 armv3m\n define fgroup ARMv4       ARMv3m armv4\n define fgroup ARMv4t      ARMv4 thumb\n-define fgroup ARMv5       ARMv4 armv5\n-define fgroup ARMv5t      ARMv5 thumb\n-define fgroup ARMv5e      ARMv5 armv5e\n-define fgroup ARMv5te     ARMv5e thumb\n+define fgroup ARMv5t      ARMv4t armv5t\n+define fgroup ARMv5te     ARMv5t armv5te\n define fgroup ARMv5tej    ARMv5te\n define fgroup ARMv6       ARMv5te armv6 be8\n define fgroup ARMv6j      ARMv6\n@@ -234,7 +232,7 @@ define fgroup ARMv6zk     ARMv6k\n define fgroup ARMv6t2     ARMv6 thumb2\n # This is suspect.  ARMv6-m doesn't really pull in any useful features\n # from ARMv5* or ARMv6.\n-define fgroup ARMv6m      mode32 armv3m armv4 thumb armv5 armv5e armv6 be8\n+define fgroup ARMv6m      mode32 armv3m armv4 thumb armv5t armv5te armv6 be8\n # This is suspect, the 'common' ARMv7 subset excludes the thumb2 'DSP' and\n # integer SIMD instructions that are in ARMv6T2.  */\n define fgroup ARMv7       ARMv6m thumb2 armv7\n@@ -325,30 +323,13 @@ begin arch armv4t\n  isa ARMv4t\n end arch armv4t\n \n-begin arch armv5\n- tune for arm10tdmi\n- tune flags CO_PROC\n- base 5\n- isa ARMv5\n-end arch armv5\n-\n begin arch armv5t\n  tune for arm10tdmi\n  tune flags CO_PROC\n  base 5T\n  isa ARMv5t\n end arch armv5t\n \n-begin arch armv5e\n- tune for arm1026ej-s\n- tune flags CO_PROC\n- base 5E\n- isa ARMv5e\n- option fp add VFPv2 FP_DBL\n- optalias vfpv2 fp\n- option nofp remove ALL_FP\n-end arch armv5e\n-\n begin arch armv5te\n  tune for arm1026ej-s\n  tune flags CO_PROC"}, {"sha": "ea2cf694f2fc6a7337accb0a7f7044fc99a7630d", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -388,11 +388,11 @@ extern int arm_arch4;\n /* Nonzero if this chip supports the ARM Architecture 4t extensions.  */\n extern int arm_arch4t;\n \n-/* Nonzero if this chip supports the ARM Architecture 5 extensions.  */\n-extern int arm_arch5;\n+/* Nonzero if this chip supports the ARM Architecture 5t extensions.  */\n+extern int arm_arch5t;\n \n-/* Nonzero if this chip supports the ARM Architecture 5E extensions.  */\n-extern int arm_arch5e;\n+/* Nonzero if this chip supports the ARM Architecture 5te extensions.  */\n+extern int arm_arch5te;\n \n /* Nonzero if this chip supports the ARM Architecture 6 extensions.  */\n extern int arm_arch6;"}, {"sha": "b05da649ac580655142cb8f27adf8717d135b911", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -383,94 +383,88 @@ EnumValue\n Enum(arm_arch) String(armv4t) Value(5)\n \n EnumValue\n-Enum(arm_arch) String(armv5) Value(6)\n+Enum(arm_arch) String(armv5t) Value(6)\n \n EnumValue\n-Enum(arm_arch) String(armv5t) Value(7)\n+Enum(arm_arch) String(armv5te) Value(7)\n \n EnumValue\n-Enum(arm_arch) String(armv5e) Value(8)\n+Enum(arm_arch) String(armv5tej) Value(8)\n \n EnumValue\n-Enum(arm_arch) String(armv5te) Value(9)\n+Enum(arm_arch) String(armv6) Value(9)\n \n EnumValue\n-Enum(arm_arch) String(armv5tej) Value(10)\n+Enum(arm_arch) String(armv6j) Value(10)\n \n EnumValue\n-Enum(arm_arch) String(armv6) Value(11)\n+Enum(arm_arch) String(armv6k) Value(11)\n \n EnumValue\n-Enum(arm_arch) String(armv6j) Value(12)\n+Enum(arm_arch) String(armv6z) Value(12)\n \n EnumValue\n-Enum(arm_arch) String(armv6k) Value(13)\n+Enum(arm_arch) String(armv6kz) Value(13)\n \n EnumValue\n-Enum(arm_arch) String(armv6z) Value(14)\n+Enum(arm_arch) String(armv6zk) Value(14)\n \n EnumValue\n-Enum(arm_arch) String(armv6kz) Value(15)\n+Enum(arm_arch) String(armv6t2) Value(15)\n \n EnumValue\n-Enum(arm_arch) String(armv6zk) Value(16)\n+Enum(arm_arch) String(armv6-m) Value(16)\n \n EnumValue\n-Enum(arm_arch) String(armv6t2) Value(17)\n+Enum(arm_arch) String(armv6s-m) Value(17)\n \n EnumValue\n-Enum(arm_arch) String(armv6-m) Value(18)\n+Enum(arm_arch) String(armv7) Value(18)\n \n EnumValue\n-Enum(arm_arch) String(armv6s-m) Value(19)\n+Enum(arm_arch) String(armv7-a) Value(19)\n \n EnumValue\n-Enum(arm_arch) String(armv7) Value(20)\n+Enum(arm_arch) String(armv7ve) Value(20)\n \n EnumValue\n-Enum(arm_arch) String(armv7-a) Value(21)\n+Enum(arm_arch) String(armv7-r) Value(21)\n \n EnumValue\n-Enum(arm_arch) String(armv7ve) Value(22)\n+Enum(arm_arch) String(armv7-m) Value(22)\n \n EnumValue\n-Enum(arm_arch) String(armv7-r) Value(23)\n+Enum(arm_arch) String(armv7e-m) Value(23)\n \n EnumValue\n-Enum(arm_arch) String(armv7-m) Value(24)\n+Enum(arm_arch) String(armv8-a) Value(24)\n \n EnumValue\n-Enum(arm_arch) String(armv7e-m) Value(25)\n+Enum(arm_arch) String(armv8.1-a) Value(25)\n \n EnumValue\n-Enum(arm_arch) String(armv8-a) Value(26)\n+Enum(arm_arch) String(armv8.2-a) Value(26)\n \n EnumValue\n-Enum(arm_arch) String(armv8.1-a) Value(27)\n+Enum(arm_arch) String(armv8.3-a) Value(27)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a) Value(28)\n+Enum(arm_arch) String(armv8.4-a) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(armv8.3-a) Value(29)\n+Enum(arm_arch) String(armv8-m.base) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(armv8.4-a) Value(30)\n+Enum(arm_arch) String(armv8-m.main) Value(30)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(31)\n+Enum(arm_arch) String(armv8-r) Value(31)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(32)\n+Enum(arm_arch) String(iwmmxt) Value(32)\n \n EnumValue\n-Enum(arm_arch) String(armv8-r) Value(33)\n-\n-EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(34)\n-\n-EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(35)\n+Enum(arm_arch) String(iwmmxt2) Value(33)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "3bfc0d5ec0e8e455a169d595d1f1c926c4ac349b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -859,11 +859,8 @@ int arm_arch4 = 0;\n /* Nonzero if this chip supports the ARM Architecture 4t extensions.  */\n int arm_arch4t = 0;\n \n-/* Nonzero if this chip supports the ARM Architecture 5 extensions.  */\n-int arm_arch5 = 0;\n-\n-/* Nonzero if this chip supports the ARM Architecture 5E extensions.  */\n-int arm_arch5e = 0;\n+/* Nonzero if this chip supports the ARM Architecture 5T extensions.  */\n+int arm_arch5t = 0;\n \n /* Nonzero if this chip supports the ARM Architecture 5TE extensions.  */\n int arm_arch5te = 0;\n@@ -3642,10 +3639,8 @@ arm_option_reconfigure_globals (void)\n   arm_arch3m = bitmap_bit_p (arm_active_target.isa, isa_bit_armv3m);\n   arm_arch4 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv4);\n   arm_arch4t = arm_arch4 && bitmap_bit_p (arm_active_target.isa, isa_bit_thumb);\n-  arm_arch5 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv5);\n-  arm_arch5e = bitmap_bit_p (arm_active_target.isa, isa_bit_armv5e);\n-  arm_arch5te = arm_arch5e\n-    && bitmap_bit_p (arm_active_target.isa, isa_bit_thumb);\n+  arm_arch5t =  bitmap_bit_p (arm_active_target.isa, isa_bit_armv5t);\n+  arm_arch5te = bitmap_bit_p (arm_active_target.isa, isa_bit_armv5te);\n   arm_arch6 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv6);\n   arm_arch6k = bitmap_bit_p (arm_active_target.isa, isa_bit_armv6k);\n   arm_arch_notm = bitmap_bit_p (arm_active_target.isa, isa_bit_notm);\n@@ -3694,15 +3689,15 @@ arm_option_reconfigure_globals (void)\n void\n arm_options_perform_arch_sanity_checks (void)\n {\n-  /* V5 code we generate is completely interworking capable, so we turn off\n+  /* V5T code we generate is completely interworking capable, so we turn off\n      TARGET_INTERWORK here to avoid many tests later on.  */\n \n   /* XXX However, we must pass the right pre-processor defines to CPP\n      or GLD can get confused.  This is a hack.  */\n   if (TARGET_INTERWORK)\n     arm_cpp_interwork = 1;\n \n-  if (arm_arch5)\n+  if (arm_arch5t)\n     target_flags &= ~MASK_INTERWORK;\n \n   if (TARGET_IWMMXT && !ARM_DOUBLEWORD_ALIGN)\n@@ -4061,10 +4056,10 @@ use_return_insn (int iscond, rtx sibling)\n      the other registers, since that is never slower than executing\n      another instruction.\n \n-     We test for !arm_arch5 here, because code for any architecture\n+     We test for !arm_arch5t here, because code for any architecture\n      less than this could potentially be run on one of the buggy\n      chips.  */\n-  if (stack_adjust == 4 && !arm_arch5 && TARGET_ARM)\n+  if (stack_adjust == 4 && !arm_arch5t && TARGET_ARM)\n     {\n       /* Validate that r3 is a call-clobbered register (always true in\n \t the default abi) ...  */\n@@ -18097,7 +18092,7 @@ arm_emit_call_insn (rtx pat, rtx addr, bool sibcall)\n const char *\n output_call (rtx *operands)\n {\n-  gcc_assert (!arm_arch5); /* Patterns should call blx <reg> directly.  */\n+  gcc_assert (!arm_arch5t); /* Patterns should call blx <reg> directly.  */\n \n   /* Handle calls to lr using ip (which may be clobbered in subr anyway).  */\n   if (REGNO (operands[0]) == LR_REGNUM)\n@@ -19732,7 +19727,7 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t      stack_adjust = offsets->outgoing_args - offsets->saved_regs;\n \t      gcc_assert (stack_adjust == 0 || stack_adjust == 4);\n \n-\t      if (stack_adjust && arm_arch5 && TARGET_ARM)\n+\t      if (stack_adjust && arm_arch5t && TARGET_ARM)\n \t\t  sprintf (instr, \"ldmib%s\\t%%|sp, {\", conditional);\n \t      else\n \t\t{\n@@ -19807,7 +19802,7 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t  break;\n \n \tcase ARM_FT_INTERWORKED:\n-\t  gcc_assert (arm_arch5 || arm_arch4t);\n+\t  gcc_assert (arm_arch5t || arm_arch4t);\n \t  sprintf (instr, \"bx%s\\t%%|lr\", conditional);\n \t  break;\n \n@@ -19855,7 +19850,7 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t      snprintf (instr, sizeof (instr), \"bxns\\t%%|lr\");\n \t    }\n \t  /* Use bx if it's available.  */\n-\t  else if (arm_arch5 || arm_arch4t)\n+\t  else if (arm_arch5t || arm_arch4t)\n \t    sprintf (instr, \"bx%s\\t%%|lr\", conditional);\n \t  else\n \t    sprintf (instr, \"mov%s\\t%%|pc, %%|lr\", conditional);\n@@ -23459,7 +23454,7 @@ arm_final_prescan_insn (rtx_insn *insn)\n \t\t used since they make interworking inefficient (the\n \t\t linker can't transform BL<cond> into BLX).  That's\n \t\t only a problem if the machine has BLX.  */\n-\t      if (arm_arch5)\n+\t      if (arm_arch5t)\n \t\t{\n \t\t  fail = TRUE;\n \t\t  break;\n@@ -31433,7 +31428,7 @@ arm_coproc_builtin_available (enum unspecv builtin)\n       case VUNSPEC_MRC2:\n \t/* Only present in ARMv5*, ARMv6 (but not ARMv6-M), ARMv7* and\n \t   ARMv8-{A,M}.  */\n-\tif (arm_arch5)\n+\tif (arm_arch5t)\n \t  return true;\n \tbreak;\n       case VUNSPEC_MCRR:"}, {"sha": "f3a6f7db95ef4806ea0677babe503cd9d62d40a3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -155,7 +155,7 @@ extern tree arm_fp16_type_node;\n /* Thumb-1 only.  */\n #define TARGET_THUMB1_ONLY\t\t(TARGET_THUMB1 && !arm_arch_notm)\n \n-#define TARGET_LDRD\t\t\t(arm_arch5e && ARM_DOUBLEWORD_ALIGN \\\n+#define TARGET_LDRD\t\t\t(arm_arch5te && ARM_DOUBLEWORD_ALIGN \\\n                                          && !TARGET_THUMB1)\n \n #define TARGET_CRC32\t\t\t(arm_arch_crc)\n@@ -233,13 +233,13 @@ extern tree arm_fp16_type_node;\n \n /* Q-bit is present.  */\n #define TARGET_ARM_QBIT \\\n-  (TARGET_32BIT && arm_arch5e && (arm_arch_notm || arm_arch7))\n+  (TARGET_32BIT && arm_arch5te && (arm_arch_notm || arm_arch7))\n /* Saturation operation, e.g. SSAT.  */\n #define TARGET_ARM_SAT \\\n   (TARGET_32BIT && arm_arch6 && (arm_arch_notm || arm_arch7))\n /* \"DSP\" multiply instructions, eg. SMULxy.  */\n #define TARGET_DSP_MULTIPLY \\\n-  (TARGET_32BIT && arm_arch5e && (arm_arch_notm || arm_arch7em))\n+  (TARGET_32BIT && arm_arch5te && (arm_arch_notm || arm_arch7em))\n /* Integer SIMD instructions, and extend-accumulate instructions.  */\n #define TARGET_INT_SIMD \\\n   (TARGET_32BIT && arm_arch6 && (arm_arch_notm || arm_arch7em))\n@@ -375,8 +375,6 @@ enum base_architecture\n   BASE_ARCH_3M = 3,\n   BASE_ARCH_4 = 4,\n   BASE_ARCH_4T = 4,\n-  BASE_ARCH_5 = 5,\n-  BASE_ARCH_5E = 5,\n   BASE_ARCH_5T = 5,\n   BASE_ARCH_5TE = 5,\n   BASE_ARCH_5TEJ = 5,\n@@ -410,11 +408,11 @@ extern int arm_arch4;\n /* Nonzero if this chip supports the ARM Architecture 4T extensions.  */\n extern int arm_arch4t;\n \n-/* Nonzero if this chip supports the ARM Architecture 5 extensions.  */\n-extern int arm_arch5;\n+/* Nonzero if this chip supports the ARM Architecture 5T extensions.  */\n+extern int arm_arch5t;\n \n-/* Nonzero if this chip supports the ARM Architecture 5E extensions.  */\n-extern int arm_arch5e;\n+/* Nonzero if this chip supports the ARM Architecture 5TE extensions.  */\n+extern int arm_arch5te;\n \n /* Nonzero if this chip supports the ARM Architecture 6 extensions.  */\n extern int arm_arch6;"}, {"sha": "118cecfffdd9f312fb6371797d4d7d28cc877ba1", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -8087,7 +8087,7 @@\n          (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && arm_arch5 && !SIBLING_CALL_P (insn)\"\n+  \"TARGET_ARM && arm_arch5t && !SIBLING_CALL_P (insn)\"\n   \"blx%?\\\\t%0\"\n   [(set_attr \"type\" \"call\")]\n )\n@@ -8097,7 +8097,7 @@\n          (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n+  \"TARGET_ARM && !arm_arch5t && !SIBLING_CALL_P (insn)\"\n   \"*\n   return output_call (operands);\n   \"\n@@ -8179,7 +8179,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && arm_arch5 && !SIBLING_CALL_P (insn)\"\n+  \"TARGET_ARM && arm_arch5t && !SIBLING_CALL_P (insn)\"\n   \"blx%?\\\\t%1\"\n   [(set_attr \"type\" \"call\")]\n )\n@@ -8190,7 +8190,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n+  \"TARGET_ARM && !arm_arch5t && !SIBLING_CALL_P (insn)\"\n   \"*\n   return output_call (&operands[1]);\n   \"\n@@ -8216,7 +8216,7 @@\n \n    /* Switch mode now when possible.  */\n    if (SYMBOL_REF_DECL (op) && !TREE_PUBLIC (SYMBOL_REF_DECL (op))\n-        && arm_arch5 && arm_change_mode_p (SYMBOL_REF_DECL (op)))\n+\t&& arm_arch5t && arm_change_mode_p (SYMBOL_REF_DECL (op)))\n       return NEED_PLT_RELOC ? \\\"blx%?\\\\t%a0(PLT)\\\" : \\\"blx%?\\\\t(%a0)\\\";\n \n     return NEED_PLT_RELOC ? \\\"bl%?\\\\t%a0(PLT)\\\" : \\\"bl%?\\\\t%a0\\\";\n@@ -8240,7 +8240,7 @@\n \n    /* Switch mode now when possible.  */\n    if (SYMBOL_REF_DECL (op) && !TREE_PUBLIC (SYMBOL_REF_DECL (op))\n-        && arm_arch5 && arm_change_mode_p (SYMBOL_REF_DECL (op)))\n+\t&& arm_arch5t && arm_change_mode_p (SYMBOL_REF_DECL (op)))\n       return NEED_PLT_RELOC ? \\\"blx%?\\\\t%a1(PLT)\\\" : \\\"blx%?\\\\t(%a1)\\\";\n \n     return NEED_PLT_RELOC ? \\\"bl%?\\\\t%a1(PLT)\\\" : \\\"bl%?\\\\t%a1\\\";\n@@ -8325,7 +8325,7 @@\n     return NEED_PLT_RELOC ? \\\"b%?\\\\t%a0(PLT)\\\" : \\\"b%?\\\\t%a0\\\";\n   else\n     {\n-      if (arm_arch5 || arm_arch4t)\n+      if (arm_arch5t || arm_arch4t)\n \treturn \\\"bx%?\\\\t%0\\\\t%@ indirect register sibling call\\\";\n       else\n \treturn \\\"mov%?\\\\t%|pc, %0\\\\t%@ indirect register sibling call\\\";\n@@ -8346,7 +8346,7 @@\n    return NEED_PLT_RELOC ? \\\"b%?\\\\t%a1(PLT)\\\" : \\\"b%?\\\\t%a1\\\";\n   else\n     {\n-      if (arm_arch5 || arm_arch4t)\n+      if (arm_arch5t || arm_arch4t)\n \treturn \\\"bx%?\\\\t%1\\\";\n       else\n \treturn \\\"mov%?\\\\t%|pc, %1\\\\t@ indirect sibling call \\\";\n@@ -8984,7 +8984,7 @@\n \t(eq:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n \t       (const_int 0)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"arm_arch5 && TARGET_32BIT\"\n+  \"arm_arch5t && TARGET_32BIT\"\n   [(set (match_dup 0) (clz:SI (match_dup 1)))\n    (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 5)))]\n )\n@@ -9077,7 +9077,7 @@\n \t      (set (match_operand:SI 0 \"register_operand\" \"\") (const_int 0)))\n    (cond_exec (eq (reg:CC CC_REGNUM) (const_int 0))\n \t      (set (match_dup 0) (const_int 1)))]\n-  \"arm_arch5 && TARGET_32BIT && peep2_regno_dead_p (3, CC_REGNUM)\"\n+  \"arm_arch5t && TARGET_32BIT && peep2_regno_dead_p (3, CC_REGNUM)\"\n   [(set (match_dup 0) (clz:SI (match_dup 1)))\n    (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 5)))]\n )\n@@ -9116,7 +9116,7 @@\n \t      (set (match_operand:SI 0 \"register_operand\" \"\") (const_int 0)))\n    (cond_exec (eq (reg:CC CC_REGNUM) (const_int 0))\n \t      (set (match_dup 0) (const_int 1)))]\n-  \"arm_arch5 && TARGET_32BIT && peep2_regno_dead_p (3, CC_REGNUM)\n+  \"arm_arch5t && TARGET_32BIT && peep2_regno_dead_p (3, CC_REGNUM)\n   && !(TARGET_THUMB2 && optimize_insn_for_size_p ())\"\n   [(set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (clz:SI (match_dup 0)))\n@@ -11273,7 +11273,7 @@\n (define_insn \"clzsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(clz:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_32BIT && arm_arch5\"\n+  \"TARGET_32BIT && arm_arch5t\"\n   \"clz%?\\\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"clz\")])\n@@ -11309,7 +11309,7 @@\n   [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n \t     (match_operand:SI 1 \"\" \"\")\n \t     (match_operand:SI 2 \"\" \"\"))]\n-  \"TARGET_32BIT && arm_arch5e\"\n+  \"TARGET_32BIT && arm_arch5te\"\n   \"pld\\\\t%a0\"\n   [(set_attr \"type\" \"load_4\")]\n )"}, {"sha": "aa36ff08d783a1c7281d4d9e14c1243cc263e4d4", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -39,9 +39,9 @@ v7ve_fps\t:= vfpv3-d16 vfpv3 vfpv3-d16-fp16 vfpv3-fp16 vfpv4 neon \\\n v8_fps\t\t:= simd fp16 crypto fp16+crypto dotprod fp16fml\n \n # We don't do anything special with these.  Pre-v4t probably doesn't work.\n-all_early_nofp\t:= armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5t\n+all_early_nofp\t:= armv2 armv2a armv3 armv3m armv4 armv4t armv5t\n \n-all_early_arch\t:= armv5e armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n+all_early_arch\t:= armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n \t\t   armv6zk armv6t2 iwmmxt iwmmxt2\n \n all_v7_a_r\t:= armv7-a armv7ve armv7-r"}, {"sha": "25788ad09851daf41038b1578307bf23b7f34a94", "filename": "gcc/config/arm/t-multilib", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-multilib?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -58,7 +58,7 @@ all_feat_combs\t= +$(firstword $(1)) \\\n \t\t      +$(firstword $(1))$(OPT) $(OPT)),)\n \n # Variables used.\n-all_early_arch\t\t:= armv5e armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n+all_early_arch\t\t:= armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n \t\t\t   armv6zk armv6t2 iwmmxt iwmmxt2\n v7_a_nosimd_variants\t:= +fp +vfpv3 +vfpv3-d16-fp16 +vfpv3-fp16 +vfpv4-d16 +vfpv4\n v7_a_simd_variants\t:= +simd +neon-fp16 +neon-vfpv4"}, {"sha": "19dcdbcdd7333b3711e1d71c55cb89ae1d24204e", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -1725,7 +1725,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB1 && arm_arch5 && !SIBLING_CALL_P (insn)\"\n+  \"TARGET_THUMB1 && arm_arch5t && !SIBLING_CALL_P (insn)\"\n   \"blx\\\\t%0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"call\")]\n@@ -1748,7 +1748,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB1 && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n+  \"TARGET_THUMB1 && !arm_arch5t && !SIBLING_CALL_P (insn)\"\n   \"*\n   {\n     if (!TARGET_CALLER_INTERWORKING)\n@@ -1769,7 +1769,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB1 && arm_arch5\"\n+  \"TARGET_THUMB1 && arm_arch5t\"\n   \"blx\\\\t%1\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"call\")]\n@@ -1795,7 +1795,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB1 && !arm_arch5\"\n+  \"TARGET_THUMB1 && !arm_arch5t\"\n   \"*\n   {\n     if (!TARGET_CALLER_INTERWORKING)"}, {"sha": "fc0e411f6aff1edd418c737a61b2000deee1c6b5", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -60,13 +60,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \telse\t\t\t\t\t\\\n \t  builtin_define (\"CPU=ARMARCH6\");\t\\\n       }\t\t\t\t\t\t\\\n-    else if (arm_arch5)\t\t\t\t\\\n-      {\t\t\t\t\t\t\\\n-\tif (TARGET_THUMB)\t\t\t\\\n-\t  builtin_define (\"CPU=ARMARCH5_T\");\t\\\n-\telse\t\t\t\t\t\\\n-\t  builtin_define (\"CPU=ARMARCH5\");\t\\\n-      }\t\t\t\t\t\t\\\n+    else if (arm_arch5t)\t\t\t\t\\\n+\tbuiltin_define (\"CPU=ARMARCH5_T\");\t\\\n     else if (arm_arch4)\t\t\t\t\\\n       {\t\t\t\t\t\t\\\n \tif (TARGET_THUMB)\t\t\t\\"}, {"sha": "d221bb943a48bc7807a84c84670fdc545693bd4c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -15906,7 +15906,7 @@ Permissible names are:\n Additionally, the following architectures, which lack support for the\n Thumb execution state, are recognized but support is deprecated:\n @samp{armv2}, @samp{armv2a}, @samp{armv3}, @samp{armv3m},\n-@samp{armv4}, @samp{armv5} and @samp{armv5e}.\n+@samp{armv4}.\n \n Many of the architectures support extensions.  These can be added by\n appending @samp{+@var{extension}} to the architecture name.  Extension\n@@ -15934,7 +15934,6 @@ The table below lists the supported extensions for each architecture.\n Architectures not mentioned do not support any extensions.\n \n @table @samp\n-@item  armv5e\n @itemx armv5te\n @itemx armv6\n @itemx armv6j"}, {"sha": "d8cf65b803cbe2f323148e21d19dd23e3a916331", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -1,3 +1,12 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/pr40887.c: Update comment.\n+\t* lib/target-supports.exp: Don't generate effective target checks\n+\tand related helpers for armv5.  Update comment.\n+\t* gcc.target/arm/armv5_thumb_isa.c: Delete.\n+\t* gcc.target/arm/di-longlong64-sync-withhelpers.c: Update effective\n+\ttarget check and options.\n+\n 2018-05-18  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR middle-end/85817"}, {"sha": "80a00aec978778e848ea47d1eb00974fe7b0d3f5", "filename": "gcc/testsuite/gcc.target/arm/armv5_thumb_isa.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv5_thumb_isa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feb4589d19187bc4b46160d0571eea2cb9a263af/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv5_thumb_isa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv5_thumb_isa.c?ref=feb4589d19187bc4b46160d0571eea2cb9a263af", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-require-effective-target arm_arch_v5_ok } */\n-/* { dg-add-options arm_arch_v5 } */\n-\n-#if __ARM_ARCH_ISA_THUMB\n-#error \"__ARM_ARCH_ISA_THUMB defined for ARMv5\"\n-#endif\n-\n-int foo;"}, {"sha": "422b061c7a7049fab9060253bc036980584793ed", "filename": "gcc/testsuite/gcc.target/arm/di-longlong64-sync-withhelpers.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fdi-longlong64-sync-withhelpers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fdi-longlong64-sync-withhelpers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fdi-longlong64-sync-withhelpers.c?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_arch_v5_ok } */\n-/* { dg-options \"-std=gnu99\" } */\n-/* { dg-add-options arm_arch_v5 } */\n+/* { dg-require-effective-target arm_arch_v5t_ok } */\n+/* { dg-options \"-marm -std=gnu99\" } */\n+/* { dg-add-options arm_arch_v5t } */\n /* { dg-message \"note: '__sync_fetch_and_nand' changed semantics in GCC 4.4\" \"fetch_and_nand\" { target *-*-* } 0 } */\n /* { dg-message \"note: '__sync_nand_and_fetch' changed semantics in GCC 4.4\" \"nand_and_fetch\" { target *-*-* } 0 } */\n /* { dg-message \"file included\" \"In file included\" { target *-*-* } 0 } */"}, {"sha": "aa1296e6e61aa9396ef91bc6b0005d95ad4ba366", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -4096,12 +4096,11 @@ proc check_effective_target_arm_fp16_hw { } {\n # extension (eg. ARMv8.1-A) since there is no macro defined for them.  See\n # how only __ARM_ARCH_8A__ is checked for ARMv8.1-A.\n # Usage: /* { dg-require-effective-target arm_arch_v5_ok } */\n-#        /* { dg-add-options arm_arch_v5 } */\n-#\t /* { dg-require-effective-target arm_arch_v5_multilib } */\n+#        /* { dg-add-options arm_arch_v5t } */\n+#\t /* { dg-require-effective-target arm_arch_v5t_multilib } */\n foreach { armfunc armflag armdefs } {\n \tv4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \tv4t \"-march=armv4t\" __ARM_ARCH_4T__\n-\tv5 \"-march=armv5 -marm\" __ARM_ARCH_5__\n \tv5t \"-march=armv5t\" __ARM_ARCH_5T__\n \tv5te \"-march=armv5te\" __ARM_ARCH_5TE__\n \tv6 \"-march=armv6\" __ARM_ARCH_6__"}, {"sha": "f6cf15e83a2032f53c8967ad11ff0f620cfa5949", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -1,3 +1,7 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/libunwind.S: Update comment relating to armv5.\n+\n 2018-05-17  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* config/arm/cmse.c (cmse_check_address_range): Replace"}, {"sha": "330244716184c7d1e8273c9f71a37ad351e938d8", "filename": "libgcc/config/arm/libunwind.S", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/libgcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3/libgcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flibunwind.S?ref=c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "patch": "@@ -47,8 +47,8 @@\n .endm\n \n #if (__ARM_ARCH__ == 4)\n-/* Some coprocessors require armv5.  We know this code will never be run on\n-   other cpus.  Tell gas to allow armv5, but only mark the objects as armv4.\n+/* Some coprocessors require armv5t.  We know this code will never be run on\n+   other cpus.  Tell gas to allow armv5t, but only mark the objects as armv4.\n  */\n .arch armv5t\n #ifdef __ARM_ARCH_4T__"}]}