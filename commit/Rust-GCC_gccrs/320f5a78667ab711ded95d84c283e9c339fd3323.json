{"sha": "320f5a78667ab711ded95d84c283e9c339fd3323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwZjVhNzg2NjdhYjcxMWRlZDk1ZDg0YzI4M2U5YzMzOWZkMzMyMw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:28:15Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:28:15Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_name): New.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_name): New.\n\t(instantiate_scev_1): Move code in instantiate_scev_name.\n\nFrom-SVN: r154532", "tree": {"sha": "43ddb93cc8d964672322bc13afa39e0a05c89df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43ddb93cc8d964672322bc13afa39e0a05c89df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320f5a78667ab711ded95d84c283e9c339fd3323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320f5a78667ab711ded95d84c283e9c339fd3323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320f5a78667ab711ded95d84c283e9c339fd3323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320f5a78667ab711ded95d84c283e9c339fd3323/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a344997538f878f765ded57b15e481a72841e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a344997538f878f765ded57b15e481a72841e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a344997538f878f765ded57b15e481a72841e69"}], "stats": {"total": 152, "additions": 94, "deletions": 58}, "files": [{"sha": "52ff2f9e1d89e2c8782fc72d5b20180bbbc382de", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320f5a78667ab711ded95d84c283e9c339fd3323/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320f5a78667ab711ded95d84c283e9c339fd3323/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=320f5a78667ab711ded95d84c283e9c339fd3323", "patch": "@@ -1,3 +1,12 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_name): New.\n+\t(instantiate_scev_1): Move code in instantiate_scev_name.\n+\n+2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* Merge from mainline (150992:151171).\n+\n 2009-08-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (graphite_legal_transform_bb): Call"}, {"sha": "8214c4aa2376e5d03f628f751677c049fff6b9a3", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 85, "deletions": 58, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320f5a78667ab711ded95d84c283e9c339fd3323/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320f5a78667ab711ded95d84c283e9c339fd3323/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=320f5a78667ab711ded95d84c283e9c339fd3323", "patch": "@@ -2109,6 +2109,88 @@ loop_closed_phi_def (tree var)\n   return NULL_TREE;\n }\n \n+static tree instantiate_scev_1 (basic_block, struct loop *, tree, bool,\n+\t\t\t\thtab_t, int);\n+\n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is an SSA_NAME to be instantiated.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_name (basic_block instantiate_below,\n+\t\t       struct loop *evolution_loop, tree chrec,\n+\t\t       bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree res;\n+  struct loop *def_loop;\n+  basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (chrec));\n+\n+  /* A parameter (or loop invariant and we do not want to include\n+     evolutions in outer loops), nothing to do.  */\n+  if (!def_bb\n+      || loop_depth (def_bb->loop_father) == 0\n+      || dominated_by_p (CDI_DOMINATORS, instantiate_below, def_bb))\n+    return chrec;\n+\n+  /* We cache the value of instantiated variable to avoid exponential\n+     time complexity due to reevaluations.  We also store the convenient\n+     value in the cache in order to prevent infinite recursion -- we do\n+     not want to instantiate the SSA_NAME if it is in a mixer\n+     structure.  This is used for avoiding the instantiation of\n+     recursively defined functions, such as:\n+\n+     | a_2 -> {0, +, 1, +, a_2}_1  */\n+\n+  res = get_instantiated_value (cache, instantiate_below, chrec);\n+  if (res)\n+    return res;\n+\n+  res = chrec_dont_know;\n+  set_instantiated_value (cache, instantiate_below, chrec, res);\n+\n+  def_loop = find_common_loop (evolution_loop, def_bb->loop_father);\n+\n+  /* If the analysis yields a parametric chrec, instantiate the\n+     result again.  */\n+  res = analyze_scalar_evolution (def_loop, chrec);\n+\n+  /* Don't instantiate loop-closed-ssa phi nodes.  */\n+  if (TREE_CODE (res) == SSA_NAME\n+      && (loop_containing_stmt (SSA_NAME_DEF_STMT (res)) == NULL\n+\t  || (loop_depth (loop_containing_stmt (SSA_NAME_DEF_STMT (res)))\n+\t      > loop_depth (def_loop))))\n+    {\n+      if (res == chrec)\n+\tres = loop_closed_phi_def (chrec);\n+      else\n+\tres = chrec;\n+\n+      if (res == NULL_TREE\n+\t  || !dominated_by_p (CDI_DOMINATORS, instantiate_below,\n+\t\t\t      gimple_bb (SSA_NAME_DEF_STMT (res))))\n+\tres = chrec_dont_know;\n+    }\n+\n+  else if (res != chrec_dont_know)\n+    res = instantiate_scev_1 (instantiate_below, evolution_loop, res,\n+\t\t\t      fold_conversions, cache, size_expr);\n+\n+  /* Store the correct value to the cache.  */\n+  set_instantiated_value (cache, instantiate_below, chrec, res);\n+  return res;\n+\n+}\n+\n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.  \n \n@@ -2128,9 +2210,7 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n-  tree res, op0, op1, op2;\n-  basic_block def_bb;\n-  struct loop *def_loop;\n+  tree op0, op1, op2;\n   tree type = chrec_type (chrec);\n \n   /* Give up if the expression is larger than the MAX that we allow.  */\n@@ -2144,61 +2224,8 @@ instantiate_scev_1 (basic_block instantiate_below,\n   switch (TREE_CODE (chrec))\n     {\n     case SSA_NAME:\n-      def_bb = gimple_bb (SSA_NAME_DEF_STMT (chrec));\n-\n-      /* A parameter (or loop invariant and we do not want to include\n-\t evolutions in outer loops), nothing to do.  */\n-      if (!def_bb\n-\t  || loop_depth (def_bb->loop_father) == 0\n-\t  || dominated_by_p (CDI_DOMINATORS, instantiate_below, def_bb))\n-\treturn chrec;\n-\n-      /* We cache the value of instantiated variable to avoid exponential\n-\t time complexity due to reevaluations.  We also store the convenient\n-\t value in the cache in order to prevent infinite recursion -- we do\n-\t not want to instantiate the SSA_NAME if it is in a mixer\n-\t structure.  This is used for avoiding the instantiation of\n-\t recursively defined functions, such as: \n-\n-\t | a_2 -> {0, +, 1, +, a_2}_1  */\n-\n-      res = get_instantiated_value (cache, instantiate_below, chrec);\n-      if (res)\n-\treturn res;\n-\n-      res = chrec_dont_know;\n-      set_instantiated_value (cache, instantiate_below, chrec, res);\n-\n-      def_loop = find_common_loop (evolution_loop, def_bb->loop_father);\n-\n-      /* If the analysis yields a parametric chrec, instantiate the\n-\t result again.  */\n-      res = analyze_scalar_evolution (def_loop, chrec);\n-\n-      /* Don't instantiate loop-closed-ssa phi nodes.  */\n-      if (TREE_CODE (res) == SSA_NAME\n-\t  && (loop_containing_stmt (SSA_NAME_DEF_STMT (res)) == NULL\n-\t      || (loop_depth (loop_containing_stmt (SSA_NAME_DEF_STMT (res)))\n-\t\t  > loop_depth (def_loop))))\n-\t{\n-\t  if (res == chrec)\n-\t    res = loop_closed_phi_def (chrec);\n-\t  else\n-\t    res = chrec;\n-\n-\t  if (res == NULL_TREE\n-\t      || !dominated_by_p (CDI_DOMINATORS, instantiate_below,\n-\t\t\t\t  gimple_bb (SSA_NAME_DEF_STMT (res))))\n-\t    res = chrec_dont_know;\n-\t}\n-\n-      else if (res != chrec_dont_know)\n-\tres = instantiate_scev_1 (instantiate_below, evolution_loop, res,\n-\t\t\t\t  fold_conversions, cache, size_expr);\n-\n-      /* Store the correct value to the cache.  */\n-      set_instantiated_value (cache, instantiate_below, chrec, res);\n-      return res;\n+      return instantiate_scev_name (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t    fold_conversions, cache, size_expr);\n \n     case POLYNOMIAL_CHREC:\n       op0 = instantiate_scev_1 (instantiate_below, evolution_loop,"}]}