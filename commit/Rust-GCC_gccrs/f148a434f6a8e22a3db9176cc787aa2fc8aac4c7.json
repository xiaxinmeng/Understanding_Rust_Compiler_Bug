{"sha": "f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0OGE0MzRmNmE4ZTIyYTNkYjkxNzZjYzc4N2FhMmZjOGFhYzRjNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-01-10T09:06:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-01-10T09:06:11Z"}, "message": "constraints.md (\"L\"): Return true for 0xffffffff.\n\n\t* config/i386/constraints.md (\"L\"): Return true for 0xffffffff.\n\t* config/i386/i386.c (*anddi_1): Emit AND with 0xffffffff as MOV.\n\nFrom-SVN: r183054", "tree": {"sha": "56ef0e7e329cabfd0cdd0c6532a2d6279f040112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ef0e7e329cabfd0cdd0c6532a2d6279f040112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/comments", "author": null, "committer": null, "parents": [{"sha": "6fcebe798104a384be5df55ae83cd6ca50d1c159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fcebe798104a384be5df55ae83cd6ca50d1c159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fcebe798104a384be5df55ae83cd6ca50d1c159"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "290b976a767b4ce062d093dc293419d5a3e5779b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "patch": "@@ -1,3 +1,8 @@\n+2012-01-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (\"L\"): Return true for 0xffffffff.\n+\t* config/i386/i386.c (*anddi_1): Emit AND with 0xffffffff as MOV.\n+\n 2012-01-10  Tom de Vries  <tom@codesourcery.com>\n \n \tPR rtl-optimization/51271\n@@ -6,7 +11,7 @@\n \n 2012-01-10  Richard Henderson  <rth@redhat.com>\n \n-\t* config/arm/arm.c (arm_vectorize_vec_perm_const_ok, \n+\t* config/arm/arm.c (arm_vectorize_vec_perm_const_ok,\n \tTARGET_VECTORIZE_VEC_PERM_CONST_OK, neon_split_vcombine, MAX_VECT_LEN,\n \tstruct expand_vec_perm_d, arm_expand_vec_perm_1, arm_expand_vec_perm,\n \tarm_evpc_neon_vuzp, arm_evpc_neon_vzip, arm_evpc_neon_vrev,\n@@ -95,7 +100,8 @@\n \t    Andrew Pinski  <apinski@cavium.com>\n \n \tPR debug/51471\n-\t* reorg.c (fill_slots_from_thread): Don't speculate frame-related insns.\n+\t* reorg.c (fill_slots_from_thread): Don't speculate\n+\tframe-related insns.\n \n 2012-01-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n@@ -215,8 +221,7 @@\n 2012-01-06  Torvald Riegel  <triegel@redhat.com>\n \n \tPR rtl-optimization/51771\n-\t* builtin-attrs.def (ATTR_RETURNS_TWICE, ATTR_TM_NOTHROW_RT_LIST):\n-\tNew.\n+\t* builtin-attrs.def (ATTR_RETURNS_TWICE, ATTR_TM_NOTHROW_RT_LIST): New.\n \t* gtm-builtins.def (BUILT_IN_TM_START): Add returns-twice attrib.\n \n 2012-01-05  Eric Botcazou  <ebotcazou@adacore.com>"}, {"sha": "c231779b90bd0d1ee7d036ecc78fa6ca0b74f907", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "patch": "@@ -149,9 +149,11 @@\n        (match_test \"IN_RANGE (ival, -128, 127)\")))\n \n (define_constraint \"L\"\n-  \"@code{0xFF} or @code{0xFFFF}, for andsi as a zero-extending move.\"\n+  \"@code{0xFF}, @code{0xFFFF} or @code{0xFFFFFFFF}\n+   for AND as a zero-extending move.\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival == 0xFF || ival == 0xFFFF\")))\n+       (match_test \"ival == 0xff || ival == 0xffff\n+\t\t    || ival == (HOST_WIDE_INT) 0xffffffff\")))\n \n (define_constraint \"M\"\n   \"0, 1, 2, or 3 (shifts for the @code{lea} instruction).\""}, {"sha": "beaf5327dfaa442349698b2e25dea9cb92923b6c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f148a434f6a8e22a3db9176cc787aa2fc8aac4c7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f148a434f6a8e22a3db9176cc787aa2fc8aac4c7", "patch": "@@ -7678,19 +7678,23 @@\n \tenum machine_mode mode;\n \n \tgcc_assert (CONST_INT_P (operands[2]));\n-        if (INTVAL (operands[2]) == 0xff)\n-\t  mode = QImode;\n+\tif (INTVAL (operands[2]) == (HOST_WIDE_INT) 0xffffffff)\n+\t  mode = SImode;\n+\telse if (INTVAL (operands[2]) == 0xffff)\n+\t  mode = HImode;\n \telse\n \t  {\n-\t    gcc_assert (INTVAL (operands[2]) == 0xffff);\n-\t    mode = HImode;\n+\t    gcc_assert (INTVAL (operands[2]) == 0xff);\n+\t    mode = QImode;\n \t  }\n \n \toperands[1] = gen_lowpart (mode, operands[1]);\n-\tif (mode == QImode)\n-\t  return \"movz{bl|x}\\t{%1, %k0|%k0, %1}\";\n-\telse\n+\tif (mode == SImode)\n+\t  return \"mov{l}\\t{%1, %k0|%k0, %1}\";\n+\telse if (mode == HImode)\n \t  return \"movz{wl|x}\\t{%1, %k0|%k0, %1}\";\n+\telse\n+\t  return \"movz{bl|x}\\t{%1, %k0|%k0, %1}\";\n       }\n \n     default:\n@@ -7726,19 +7730,19 @@\n \tenum machine_mode mode;\n \n \tgcc_assert (CONST_INT_P (operands[2]));\n-        if (INTVAL (operands[2]) == 0xff)\n-\t  mode = QImode;\n+        if (INTVAL (operands[2]) == 0xffff)\n+\t  mode = HImode;\n \telse\n \t  {\n-\t    gcc_assert (INTVAL (operands[2]) == 0xffff);\n-\t    mode = HImode;\n+\t    gcc_assert (INTVAL (operands[2]) == 0xff);\n+\t    mode = QImode;\n \t  }\n \n \toperands[1] = gen_lowpart (mode, operands[1]);\n-\tif (mode == QImode)\n-\t  return \"movz{bl|x}\\t{%1, %0|%0, %1}\";\n-\telse\n+\tif (mode == HImode)\n \t  return \"movz{wl|x}\\t{%1, %0|%0, %1}\";\n+\telse\n+\t  return \"movz{bl|x}\\t{%1, %0|%0, %1}\";\n       }\n \n     default:"}]}