{"sha": "ecf6e535fcda673a5f1691bef91752f197662e81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNmNmU1MzVmY2RhNjczYTVmMTY5MWJlZjkxNzUyZjE5NzY2MmU4MQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2015-07-22T15:30:14Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2015-07-22T15:30:14Z"}, "message": "* config/nvptx/nvptx.c: Expand some comments.\n\nFrom-SVN: r226075", "tree": {"sha": "5c049ffbced219957cc3290da7bde9bf4c975d27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c049ffbced219957cc3290da7bde9bf4c975d27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecf6e535fcda673a5f1691bef91752f197662e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf6e535fcda673a5f1691bef91752f197662e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf6e535fcda673a5f1691bef91752f197662e81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf6e535fcda673a5f1691bef91752f197662e81/comments", "author": null, "committer": null, "parents": [{"sha": "252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252207bd03e4e0ba784aa60cdaa9f646ddcb3796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252207bd03e4e0ba784aa60cdaa9f646ddcb3796"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "d4c7de316683d6656cf7fc71957ae01edc1aad21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf6e535fcda673a5f1691bef91752f197662e81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf6e535fcda673a5f1691bef91752f197662e81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecf6e535fcda673a5f1691bef91752f197662e81", "patch": "@@ -1,3 +1,7 @@\n+2015-07-22  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c: Expand some comments.\n+\n 2015-07-22  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/cortex-a53 (cortex_53_advsimd): Rename to..."}, {"sha": "5d9b41fb2b66160f24c9df1ee4275da75ec278c7", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf6e535fcda673a5f1691bef91752f197662e81/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf6e535fcda673a5f1691bef91752f197662e81/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=ecf6e535fcda673a5f1691bef91752f197662e81", "patch": "@@ -266,7 +266,9 @@ write_as_kernel (tree attrs)\n \t  || lookup_attribute (\"omp target entrypoint\", attrs) != NULL_TREE);\n }\n \n-/* Write a function decl for DECL to S, where NAME is the name to be used.  */\n+/* Write a function decl for DECL to S, where NAME is the name to be used.\n+   This includes ptx .visible or .extern specifiers, .func or .kernel, and\n+   argument and return types.  */\n \n static void\n nvptx_write_function_decl (std::stringstream &s, const char *name, const_tree decl)\n@@ -756,7 +758,11 @@ nvptx_end_call_args (void)\n   free_EXPR_LIST_list (&cfun->machine->call_args);\n }\n \n-/* Emit the sequence for a call.  */\n+/* Emit the sequence for a call to ADDRESS, setting RETVAL.  Keep\n+   track of whether calls involving static chains or varargs were seen\n+   in the current function.\n+   For libcalls, maintain a hash table of decls we have seen, and\n+   record a function decl for later when encountering a new one.  */\n \n void\n nvptx_expand_call (rtx retval, rtx address)\n@@ -815,6 +821,8 @@ nvptx_expand_call (rtx retval, rtx address)\n       XVECEXP (pat, 0, nargs + 1) = gen_rtx_USE (VOIDmode, this_arg);\n     }\n \n+  /* Construct the call insn, including a USE for each argument pseudo\n+     register.  These will be used when printing the insn.  */\n   int i;\n   rtx arg;\n   for (i = 1, arg = cfun->machine->call_args; arg; arg = XEXP (arg, 1), i++)\n@@ -832,6 +840,11 @@ nvptx_expand_call (rtx retval, rtx address)\n       t = gen_rtx_SET (tmp_retval, t);\n     }\n   XVECEXP (pat, 0, 0) = t;\n+\n+  /* If this is a libcall, decl_type is NULL. For a call to a non-libcall\n+     undeclared function, we'll have an external decl without arg types.\n+     In either case we have to try to construct a ptx declaration from one of\n+     the calls to the function.  */\n   if (!REG_P (callee)\n       && (decl_type == NULL_TREE\n \t  || (external_decl && TYPE_ARG_TYPES (decl_type) == NULL_TREE)))\n@@ -1194,7 +1207,10 @@ nvptx_addr_space_from_address (rtx addr)\n   return ADDR_SPACE_GLOBAL;\n }\n \f\n-/* Machinery to output constant initializers.  */\n+/* Machinery to output constant initializers.  When beginning an initializer,\n+   we decide on a chunk size (which is visible in ptx in the type used), and\n+   then all initializer data is buffered until a chunk is filled and ready to\n+   be written out.  */\n \n /* Used when assembling integers to ensure data is emitted in\n    pieces whose size matches the declaration we printed.  */\n@@ -1464,7 +1480,8 @@ nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n }\n \n /* Output INSN, which is a call to CALLEE with result RESULT.  For ptx, this\n-   involves writing .param declarations and in/out copies into them.  */\n+   involves writing .param declarations and in/out copies into them.  For\n+   indirect calls, also write the .callprototype.  */\n \n const char *\n nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n@@ -1484,6 +1501,7 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n \t\t\t\t\t false));\n     }\n \n+  /* Ensure we have a ptx declaration in the output if necessary.  */\n   if (GET_CODE (callee) == SYMBOL_REF)\n     {\n       decl = SYMBOL_REF_DECL (callee);\n@@ -2057,7 +2075,8 @@ nvptx_file_start (void)\n   fputs (\"// END PREAMBLE\\n\", asm_out_file);\n }\n \n-/* Write out the function declarations we've collected.  */\n+/* Write out the function declarations we've collected and declare storage\n+   for the broadcast buffer.  */\n \n static void\n nvptx_file_end (void)"}]}