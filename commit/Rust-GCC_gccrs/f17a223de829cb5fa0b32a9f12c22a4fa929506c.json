{"sha": "f17a223de829cb5fa0b32a9f12c22a4fa929506c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3YTIyM2RlODI5Y2I1ZmEwYjMyYTlmMTJjMjJhNGZhOTI5NTA2Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-24T07:55:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-24T07:55:56Z"}, "message": "re PR middle-end/70434 (adding an extraneous cast to vector type results in inferior code)\n\n2016-05-24  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/70434\n\tPR c/69504\n\tc-family/\n\t* c-common.h (convert_vector_to_pointer_for_subscript): Rename to ...\n\t(convert_vector_to_array_for_subscript): ... this.\n\t* c-common.c (convert_vector_to_pointer_for_subscript): Use a\n\tVIEW_CONVERT_EXPR to an array type.  Rename to ...\n\t(convert_vector_to_array_for_subscript): ... this.\n\n\tcp/\n\t* expr.c (mark_exp_read): Handle VIEW_CONVERT_EXPR.\n\t* constexpr.c (cxx_eval_array_reference): Handle indexed\n\tvectors.\n\t* typeck.c (cp_build_array_ref): Adjust.\n\n\tc/\n\t* c-typeck.c (build_array_ref): Do not complain about indexing\n\tnon-lvalue vectors.  Adjust for function name change.\n\n\t* tree-ssa.c (non_rewritable_mem_ref_base): Make sure to mark\n\tbases which are accessed with non-invariant indices.\n\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Re-write\n\tconstant index ARRAY_REFs of vectors into BIT_FIELD_REFs.\n\n\t* c-c++-common/vector-subscript-4.c: New testcase.\n\t* c-c++-common/vector-subscript-5.c: Likewise.\n\nFrom-SVN: r236630", "tree": {"sha": "8563bc5695a3444a499e0c3f237354120053f294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8563bc5695a3444a499e0c3f237354120053f294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17a223de829cb5fa0b32a9f12c22a4fa929506c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17a223de829cb5fa0b32a9f12c22a4fa929506c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17a223de829cb5fa0b32a9f12c22a4fa929506c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17a223de829cb5fa0b32a9f12c22a4fa929506c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64fc0cd9b2a83a4b0301d8d7890bf27880d8384e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64fc0cd9b2a83a4b0301d8d7890bf27880d8384e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64fc0cd9b2a83a4b0301d8d7890bf27880d8384e"}], "stats": {"total": 223, "additions": 167, "deletions": 56}, "files": [{"sha": "d94460e9419d843af1932d2eac16491441a8d2b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1,3 +1,12 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70434\n+\tPR c/69504\n+\t* tree-ssa.c (non_rewritable_mem_ref_base): Make sure to mark\n+\tbases which are accessed with non-invariant indices.\n+\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Re-write\n+\tconstant index ARRAY_REFs of vectors into BIT_FIELD_REFs.\n+\n 2016-05-24  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71170"}, {"sha": "7f0ca2d805735a716b40fb72e54fcbab5eb624f4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1,3 +1,13 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70434\n+\tPR c/69504\n+\t* c-common.h (convert_vector_to_pointer_for_subscript): Rename to ...\n+\t(convert_vector_to_array_for_subscript): ... this.\n+\t* c-common.c (convert_vector_to_pointer_for_subscript): Use a\n+\tVIEW_CONVERT_EXPR to an array type.  Rename to ...\n+\t(convert_vector_to_array_for_subscript): ... this.\n+\n 2016-05-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70756"}, {"sha": "4568cf62a98b72af30d4c148c6f638799cdd30cd", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 14, "deletions": 46, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -12496,66 +12496,34 @@ build_userdef_literal (tree suffix_id, tree value,\n   return literal;\n }\n \n-/* For vector[index], convert the vector to a\n-   pointer of the underlying type.  Return true if the resulting\n-   ARRAY_REF should not be an lvalue.  */\n+/* For vector[index], convert the vector to an array of the underlying type.\n+   Return true if the resulting ARRAY_REF should not be an lvalue.  */\n \n bool\n-convert_vector_to_pointer_for_subscript (location_t loc,\n-\t\t\t\t\t tree *vecp, tree index)\n+convert_vector_to_array_for_subscript (location_t loc,\n+\t\t\t\t       tree *vecp, tree index)\n {\n   bool ret = false;\n   if (VECTOR_TYPE_P (TREE_TYPE (*vecp)))\n     {\n       tree type = TREE_TYPE (*vecp);\n-      tree type1;\n \n       ret = !lvalue_p (*vecp);\n+\n       if (TREE_CODE (index) == INTEGER_CST)\n         if (!tree_fits_uhwi_p (index)\n             || tree_to_uhwi (index) >= TYPE_VECTOR_SUBPARTS (type))\n           warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n \n-      if (ret)\n-\t{\n-\t  tree tmp = create_tmp_var_raw (type);\n-\t  DECL_SOURCE_LOCATION (tmp) = loc;\n-\t  *vecp = c_save_expr (*vecp);\n-\t  if (TREE_CODE (*vecp) == C_MAYBE_CONST_EXPR)\n-\t    {\n-\t      bool non_const = C_MAYBE_CONST_EXPR_NON_CONST (*vecp);\n-\t      *vecp = C_MAYBE_CONST_EXPR_EXPR (*vecp);\n-\t      *vecp\n-\t\t= c_wrap_maybe_const (build4 (TARGET_EXPR, type, tmp,\n-\t\t\t\t\t      *vecp, NULL_TREE, NULL_TREE),\n-\t\t\t\t      non_const);\n-\t    }\n-\t  else\n-\t    *vecp = build4 (TARGET_EXPR, type, tmp, *vecp,\n-\t\t\t    NULL_TREE, NULL_TREE);\n-\t  SET_EXPR_LOCATION (*vecp, loc);\n-\t  c_common_mark_addressable_vec (tmp);\n-\t}\n-      else\n-\tc_common_mark_addressable_vec (*vecp);\n-      type = build_qualified_type (TREE_TYPE (type), TYPE_QUALS (type));\n-      type1 = build_pointer_type (TREE_TYPE (*vecp));\n-      bool ref_all = TYPE_REF_CAN_ALIAS_ALL (type1);\n-      if (!ref_all\n-\t  && !DECL_P (*vecp))\n-\t{\n-\t  /* If the original vector isn't declared may_alias and it\n-\t     isn't a bare vector look if the subscripting would\n-\t     alias the vector we subscript, and if not, force ref-all.  */\n-\t  alias_set_type vecset = get_alias_set (*vecp);\n-\t  alias_set_type sset = get_alias_set (type);\n-\t  if (!alias_sets_must_conflict_p (sset, vecset)\n-\t      && !alias_set_subset_of (sset, vecset))\n-\t    ref_all = true;\n-\t}\n-      type = build_pointer_type_for_mode (type, ptr_mode, ref_all);\n-      *vecp = build1 (ADDR_EXPR, type1, *vecp);\n-      *vecp = convert (type, *vecp);\n+      /* We are building an ARRAY_REF so mark the vector as addressable\n+         to not run into the gimplifiers premature setting of DECL_GIMPLE_REG_P\n+\t for function parameters.  */\n+      c_common_mark_addressable_vec (*vecp);\n+\n+      *vecp = build1 (VIEW_CONVERT_EXPR,\n+\t\t      build_array_type_nelts (TREE_TYPE (type),\n+\t\t\t\t\t      TYPE_VECTOR_SUBPARTS (type)),\n+\t\t      *vecp);\n     }\n   return ret;\n }"}, {"sha": "0295532d3ea5671fd2e244e4e96e3b864050680d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1368,7 +1368,7 @@ extern tree build_userdef_literal (tree suffix_id, tree value,\n \t\t\t\t   enum overflow_type overflow,\n \t\t\t\t   tree num_string);\n \n-extern bool convert_vector_to_pointer_for_subscript (location_t, tree *, tree);\n+extern bool convert_vector_to_array_for_subscript (location_t, tree *, tree);\n \n /* Possibe cases of scalar_to_vector conversion.  */\n enum stv_conv {"}, {"sha": "9bb5ec1dfceb9f9a385b8e0d5f9ddbf2d0fcfbd3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1,3 +1,10 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70434\n+\tPR c/69504\n+\t* c-typeck.c (build_array_ref): Do not complain about indexing\n+\tnon-lvalue vectors.  Adjust for function name change.\n+\n 2016-05-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/71115"}, {"sha": "74bad2acc5d5e95fd39e59f7a14b302e54e3e44e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -2583,8 +2583,8 @@ build_array_ref (location_t loc, tree array, tree index)\n \n   gcc_assert (TREE_CODE (TREE_TYPE (index)) == INTEGER_TYPE);\n \n-  bool non_lvalue\n-    = convert_vector_to_pointer_for_subscript (loc, &array, index);\n+  bool was_vector = VECTOR_TYPE_P (TREE_TYPE (array));\n+  bool non_lvalue = convert_vector_to_array_for_subscript (loc, &array, index);\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n@@ -2613,7 +2613,8 @@ build_array_ref (location_t loc, tree array, tree index)\n \t    return error_mark_node;\n \t}\n \n-      if (pedantic || warn_c90_c99_compat)\n+      if ((pedantic || warn_c90_c99_compat)\n+\t  && ! was_vector)\n \t{\n \t  tree foo = array;\n \t  while (TREE_CODE (foo) == COMPONENT_REF)"}, {"sha": "eaf42b83f1c67350b438969b8c3b5b3d78a9ade8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1,3 +1,12 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70434\n+\tPR c/69504\n+\t* expr.c (mark_exp_read): Handle VIEW_CONVERT_EXPR.\n+\t* constexpr.c (cxx_eval_array_reference): Handle indexed\n+\tvectors.\n+\t* typeck.c (cp_build_array_ref): Adjust.\n+\n 2016-05-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70344"}, {"sha": "482f8afaeb6d07a967434c964c9bbc178a4dd44b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1983,6 +1983,10 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n   else if (lval)\n     return build4 (ARRAY_REF, TREE_TYPE (t), ary, index, NULL, NULL);\n   elem_type = TREE_TYPE (TREE_TYPE (ary));\n+  if (TREE_CODE (ary) == VIEW_CONVERT_EXPR\n+      && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (ary, 0)))\n+      && TREE_TYPE (t) == TREE_TYPE (TREE_TYPE (TREE_OPERAND (ary, 0))))\n+    ary = TREE_OPERAND (ary, 0);\n   if (TREE_CODE (ary) == CONSTRUCTOR)\n     len = CONSTRUCTOR_NELTS (ary);\n   else if (TREE_CODE (ary) == STRING_CST)\n@@ -1991,6 +1995,8 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n \t\t     / TYPE_PRECISION (char_type_node));\n       len = (unsigned) TREE_STRING_LENGTH (ary) / elem_nchars;\n     }\n+  else if (TREE_CODE (ary) == VECTOR_CST)\n+    len = VECTOR_CST_NELTS (ary);\n   else\n     {\n       /* We can't do anything with other tree codes, so use\n@@ -2007,7 +2013,14 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n       return t;\n     }\n \n-  tree nelts = array_type_nelts_top (TREE_TYPE (ary));\n+  tree nelts;\n+  if (TREE_CODE (TREE_TYPE (ary)) == ARRAY_TYPE)\n+    nelts = array_type_nelts_top (TREE_TYPE (ary));\n+  else if (VECTOR_TYPE_P (TREE_TYPE (ary)))\n+    nelts = size_int (TYPE_VECTOR_SUBPARTS (TREE_TYPE (ary)));\n+  else\n+    gcc_unreachable ();\n+\n   /* For VLAs, the number of elements won't be an integer constant.  */\n   nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n \t\t\t\t\toverflow_p);\n@@ -2053,6 +2066,8 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n \n   if (TREE_CODE (ary) == CONSTRUCTOR)\n     return (*CONSTRUCTOR_ELTS (ary))[i].value;\n+  else if (TREE_CODE (ary) == VECTOR_CST)\n+    return VECTOR_CST_ELT (ary, i);\n   else if (elem_nchars == 1)\n     return build_int_cst (cv_unqualified (TREE_TYPE (TREE_TYPE (ary))),\n \t\t\t  TREE_STRING_POINTER (ary)[i]);"}, {"sha": "e879f3c5e8db079f8879834f4abaf0e6985423cb", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -146,6 +146,7 @@ mark_exp_read (tree exp)\n     case INDIRECT_REF:\n     case FLOAT_EXPR:\n     case NON_DEPENDENT_EXPR:\n+    case VIEW_CONVERT_EXPR:\n       mark_exp_read (TREE_OPERAND (exp, 0));\n       break;\n     case COMPOUND_EXPR:"}, {"sha": "8b3fec66250913875d5cdd3e182eba0e01f7bd0d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -3161,8 +3161,7 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n       break;\n     }\n \n-  bool non_lvalue\n-    = convert_vector_to_pointer_for_subscript (loc, &array, idx);\n+  bool non_lvalue = convert_vector_to_array_for_subscript (loc, &array, idx);\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {"}, {"sha": "83b7150998861fe916312578b42d5420a54ca4b2", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -3459,6 +3459,44 @@ maybe_canonicalize_mem_ref_addr (tree *t)\n   if (TREE_CODE (*t) == ADDR_EXPR)\n     t = &TREE_OPERAND (*t, 0);\n \n+  /* The C and C++ frontends use an ARRAY_REF for indexing with their\n+     generic vector extension.  The actual vector referenced is\n+     view-converted to an array type for this purpose.  If the index\n+     is constant the canonical representation in the middle-end is a\n+     BIT_FIELD_REF so re-write the former to the latter here.  */\n+  if (TREE_CODE (*t) == ARRAY_REF\n+      && TREE_CODE (TREE_OPERAND (*t, 0)) == VIEW_CONVERT_EXPR\n+      && TREE_CODE (TREE_OPERAND (*t, 1)) == INTEGER_CST\n+      && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (*t, 0), 0))))\n+    {\n+      tree vtype = TREE_TYPE (TREE_OPERAND (TREE_OPERAND (*t, 0), 0));\n+      if (VECTOR_TYPE_P (vtype))\n+\t{\n+\t  tree low = array_ref_low_bound (*t);\n+\t  if (TREE_CODE (low) == INTEGER_CST)\n+\t    {\n+\t      if (tree_int_cst_le (low, TREE_OPERAND (*t, 1)))\n+\t\t{\n+\t\t  widest_int idx = wi::sub (wi::to_widest (TREE_OPERAND (*t, 1)),\n+\t\t\t\t\t    wi::to_widest (low));\n+\t\t  idx = wi::mul (idx, wi::to_widest\n+\t\t\t\t\t (TYPE_SIZE (TREE_TYPE (*t))));\n+\t\t  widest_int ext\n+\t\t    = wi::add (idx, wi::to_widest (TYPE_SIZE (TREE_TYPE (*t))));\n+\t\t  if (wi::les_p (ext, wi::to_widest (TYPE_SIZE (vtype))))\n+\t\t    {\n+\t\t      *t = build3_loc (EXPR_LOCATION (*t), BIT_FIELD_REF,\n+\t\t\t\t       TREE_TYPE (*t),\n+\t\t\t\t       TREE_OPERAND (TREE_OPERAND (*t, 0), 0),\n+\t\t\t\t       TYPE_SIZE (TREE_TYPE (*t)),\n+\t\t\t\t       wide_int_to_tree (sizetype, idx));\n+\t\t      res = true;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   while (handled_component_p (*t))\n     t = &TREE_OPERAND (*t, 0);\n "}, {"sha": "65589fa4effe87a94c5358850bafc5bf60f0afe5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1,3 +1,10 @@\n+2016-05-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70434\n+\tPR c/69504\n+\t* c-c++-common/vector-subscript-4.c: New testcase.\n+\t* c-c++-common/vector-subscript-5.c: Likewise.\n+\n 2016-05-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/71123"}, {"sha": "2c2481f88b799ed31342020114e59f0447da0e86", "filename": "gcc/testsuite/c-c++-common/vector-subscript-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-4.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -w -Wno-psabi\" } */\n+\n+#define foobar(n) \\\n+    typedef int v##n##si __attribute__ ((vector_size (4 * n))); \\\n+\\\n+int \\\n+foo##n(int x, v##n##si v) \\\n+{ \\\n+  v[0] ^= v[1]; \\\n+  return ((v##n##si)v)[x]; \\\n+} \\\n+\\\n+int \\\n+bar##n(int x, v##n##si v) \\\n+{ \\\n+  v[0] ^= v[1]; \\\n+  return v[x]; \\\n+}\n+\n+foobar(2)\n+foobar(4)\n+foobar(8)\n+foobar(16)\n+foobar(32)\n+foobar(64)\n+\n+/* Verify we don't have any vector temporaries in the IL.  */\n+/* { dg-final { scan-tree-dump-not \"vector\" \"optimized\" } } */"}, {"sha": "58a94f0fb15daefda13e8f00b04bbc64e6225073", "filename": "gcc/testsuite/c-c++-common/vector-subscript-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-5.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+typedef int U __attribute__ ((vector_size (16)));\n+\n+int\n+foo (int i)\n+{\n+  register U u\n+#if __SSE2__\n+      asm (\"xmm0\");\n+#endif\n+  return u[i];\n+}"}, {"sha": "a53322d9837ed1b683fb3350df11b85151973f44", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17a223de829cb5fa0b32a9f12c22a4fa929506c/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f17a223de829cb5fa0b32a9f12c22a4fa929506c", "patch": "@@ -1222,14 +1222,19 @@ maybe_rewrite_mem_ref_base (tree *tp, bitmap suitable_for_renaming)\n static tree\n non_rewritable_mem_ref_base (tree ref)\n {\n-  tree base = ref;\n+  tree base;\n \n   /* A plain decl does not need it set.  */\n   if (DECL_P (ref))\n     return NULL_TREE;\n \n-  while (handled_component_p (base))\n-    base = TREE_OPERAND (base, 0);\n+  if (! (base = CONST_CAST_TREE (strip_invariant_refs (ref))))\n+    {\n+      base = get_base_address (ref);\n+      if (DECL_P (base))\n+\treturn base;\n+      return NULL_TREE;\n+    }\n \n   /* But watch out for MEM_REFs we cannot lower to a\n      VIEW_CONVERT_EXPR or a BIT_FIELD_REF.  */"}]}