{"sha": "812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyZThjNzliNGJmMWQzYjc2ZWExN2RhNTZhNmFkN2VjYjE0MWFhYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-07T00:36:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-07T00:36:33Z"}, "message": "vector.tcc (vector<>::_M_insert_aux<>(iterator, _Args&&...)): In C++0x mode do not use temporary copies.\n\n2007-11-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/vector.tcc (vector<>::_M_insert_aux<>(iterator,\n\t_Args&&...)): In C++0x mode do not use temporary copies.\n\t(insert(iterator, const value_type&)): Copy to a temporary\n\twhen not reallocating.\n\n\t* include/bits/vector.tcc (insert(iterator, value_type&&)):\n\tMinor tweaks in C++0x mode.\n\nFrom-SVN: r129954", "tree": {"sha": "5bdb72b0746fff126fbec50c1fa31eb8b13f639e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bdb72b0746fff126fbec50c1fa31eb8b13f639e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac/comments", "author": null, "committer": null, "parents": [{"sha": "b6e2138fb7bb684c6c5658393011f5aeab1f7ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e2138fb7bb684c6c5658393011f5aeab1f7ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e2138fb7bb684c6c5658393011f5aeab1f7ffb"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "53d97a7ca0b260ee74c7b6a1cb4c8baa80aff877", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac", "patch": "@@ -1,3 +1,13 @@\n+2007-11-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/vector.tcc (vector<>::_M_insert_aux<>(iterator,\n+\t_Args&&...)): In C++0x mode do not use temporary copies.\n+\t(insert(iterator, const value_type&)): Copy to a temporary\n+\twhen not reallocating.\n+\n+\t* include/bits/vector.tcc (insert(iterator, value_type&&)):\n+\tMinor tweaks in C++0x mode.\n+\n 2007-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/tr1_impl/boost_shared_ptr.h: Avoid unnecessary memory"}, {"sha": "2b5c4b7ffa5c09df6283a9e668dcc1062708a257", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=812e8c79b4bf1d3b76ea17da56a6ad7ecb141aac", "patch": "@@ -101,7 +101,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  ++this->_M_impl._M_finish;\n \t}\n       else\n-        _M_insert_aux(__position, __x);\n+\t{\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n+\t    {\n+\t      _Tp __x_copy = __x;\n+\t      _M_insert_aux(__position, std::move(__x_copy));\n+\t    }\n+\t  else\n+#endif\n+\t    _M_insert_aux(__position, __x);\n+\t}\n       return iterator(this->_M_impl._M_start + __n);\n     }\n \n@@ -115,12 +125,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage\n \t  && __position == end())\n \t{\n-\t  this->_M_impl.construct(this->_M_impl._M_finish,\n-\t\t\t\t  std::forward<value_type>(__x));\n+\t  this->_M_impl.construct(this->_M_impl._M_finish, std::move(__x));\n \t  ++this->_M_impl._M_finish;\n \t}\n       else\n-        _M_insert_aux(__position, std::forward<value_type>(__x));\n+        _M_insert_aux(__position, std::move(__x));\n       return iterator(this->_M_impl._M_start + __n);\n     }\n #endif\n@@ -286,15 +295,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       void\n       vector<_Tp, _Alloc>::\n       _M_insert_aux(iterator __position, _Args&&... __args)\n-      {\n-\t_Tp __x_copy(std::forward<_Args>(__args)...);\n #else\n   template<typename _Tp, typename _Alloc>\n     void\n     vector<_Tp, _Alloc>::\n     _M_insert_aux(iterator __position, const _Tp& __x)\n-    {\n #endif\n+    {\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t{\n \t  this->_M_impl.construct(this->_M_impl._M_finish,\n@@ -307,7 +314,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  _GLIBCXX_MOVE_BACKWARD3(__position.base(),\n \t\t\t\t  this->_M_impl._M_finish - 2,\n \t\t\t\t  this->_M_impl._M_finish - 1);\n-\t  *__position = _GLIBCXX_MOVE(__x_copy);\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+\t  *__position = __x_copy;\n+#else\n+\t  *__position = _Tp(std::forward<_Args>(__args)...);\n+#endif\n \t}\n       else\n \t{\n@@ -317,13 +328,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  pointer __new_finish(__new_start);\n \t  try\n \t    {\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t      this->_M_impl.construct(__new_start + (__position - begin()),\n+\t\t\t\t      std::forward<_Args>(__args)...);\n+#endif\n \t      __new_finish =\n \t\tstd::__uninitialized_move_a(this->_M_impl._M_start,\n \t\t\t\t\t    __position.base(), __new_start,\n \t\t\t\t\t    _M_get_Tp_allocator());\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-\t      this->_M_impl.construct(__new_finish, std::move(__x_copy));\n-#else\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t      this->_M_impl.construct(__new_finish, __x);\n #endif\n \t      ++__new_finish;"}]}