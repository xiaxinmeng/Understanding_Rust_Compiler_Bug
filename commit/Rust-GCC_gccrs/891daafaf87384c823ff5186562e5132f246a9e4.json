{"sha": "891daafaf87384c823ff5186562e5132f246a9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxZGFhZmFmODczODRjODIzZmY1MTg2NTYyZTUxMzJmMjQ2YTllNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-06-11T06:21:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-06-11T06:21:55Z"}, "message": "Use backend interface for map descriptors.\n\nFrom-SVN: r174943", "tree": {"sha": "29722e971d77f0c6e8746df791aa82fe0bc3bd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29722e971d77f0c6e8746df791aa82fe0bc3bd79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891daafaf87384c823ff5186562e5132f246a9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891daafaf87384c823ff5186562e5132f246a9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891daafaf87384c823ff5186562e5132f246a9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891daafaf87384c823ff5186562e5132f246a9e4/comments", "author": null, "committer": null, "parents": [{"sha": "70f910247bd52a16c6195b0508d4ae4c4dce91d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f910247bd52a16c6195b0508d4ae4c4dce91d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f910247bd52a16c6195b0508d4ae4c4dce91d8"}], "stats": {"total": 312, "additions": 151, "deletions": 161}, "files": [{"sha": "9c6af0b77626574c2a674d84d258bbbeb190d113", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -11747,7 +11747,7 @@ Map_construction_expression::do_get_tree(Translate_context* context)\n       valaddr = build_fold_addr_expr(tmp);\n     }\n \n-  tree descriptor = gogo->map_descriptor(mt);\n+  tree descriptor = mt->map_descriptor_pointer(gogo, loc);\n \n   tree type_tree = type_to_tree(this->type_->get_backend(gogo));\n   if (type_tree == error_mark_node)"}, {"sha": "94d1c4dd1db8ecb002f0befe02402f6c5fc18ee1", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -1974,141 +1974,6 @@ Gogo::slice_constructor(tree slice_type_tree, tree values, tree count,\n   return build_constructor(slice_type_tree, init);\n }\n \n-// Build a map descriptor for a map of type MAPTYPE.\n-\n-tree\n-Gogo::map_descriptor(Map_type* maptype)\n-{\n-  if (this->map_descriptors_ == NULL)\n-    this->map_descriptors_ = new Map_descriptors(10);\n-\n-  std::pair<const Map_type*, tree> val(maptype, NULL);\n-  std::pair<Map_descriptors::iterator, bool> ins =\n-    this->map_descriptors_->insert(val);\n-  Map_descriptors::iterator p = ins.first;\n-  if (!ins.second)\n-    {\n-      if (p->second == error_mark_node)\n-\treturn error_mark_node;\n-      go_assert(p->second != NULL_TREE && DECL_P(p->second));\n-      return build_fold_addr_expr(p->second);\n-    }\n-\n-  Type* keytype = maptype->key_type();\n-  Type* valtype = maptype->val_type();\n-\n-  std::string mangled_name = (\"__go_map_\" + maptype->mangled_name(this));\n-\n-  tree id = get_identifier_from_string(mangled_name);\n-\n-  // Get the type of the map descriptor.  This is __go_map_descriptor\n-  // in libgo/map.h.\n-\n-  tree struct_type = this->map_descriptor_type();\n-\n-  // The map entry type is a struct with three fields.  This struct is\n-  // specific to MAPTYPE.  Build it.\n-\n-  tree map_entry_type = make_node(RECORD_TYPE);\n-\n-  Btype* bkey_type = keytype->get_backend(this);\n-  Btype* bval_type = valtype->get_backend(this);\n-  map_entry_type = Gogo::builtin_struct(NULL, \"__map\", map_entry_type, 3,\n-\t\t\t\t\t\"__next\",\n-\t\t\t\t\tbuild_pointer_type(map_entry_type),\n-\t\t\t\t\t\"__key\",\n-\t\t\t\t\ttype_to_tree(bkey_type),\n-\t\t\t\t\t\"__val\",\n-\t\t\t\t\ttype_to_tree(bval_type));\n-  if (map_entry_type == error_mark_node)\n-    {\n-      p->second = error_mark_node;\n-      return error_mark_node;\n-    }\n-\n-  tree map_entry_key_field = DECL_CHAIN(TYPE_FIELDS(map_entry_type));\n-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(map_entry_key_field)),\n-\t\t    \"__key\") == 0);\n-\n-  tree map_entry_val_field = DECL_CHAIN(map_entry_key_field);\n-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(map_entry_val_field)),\n-\t\t    \"__val\") == 0);\n-\n-  // Initialize the entries.\n-\n-  tree map_descriptor_field = TYPE_FIELDS(struct_type);\n-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(map_descriptor_field)),\n-\t\t    \"__map_descriptor\") == 0);\n-  tree entry_size_field = DECL_CHAIN(map_descriptor_field);\n-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(entry_size_field)),\n-\t\t    \"__entry_size\") == 0);\n-  tree key_offset_field = DECL_CHAIN(entry_size_field);\n-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(key_offset_field)),\n-\t\t    \"__key_offset\") == 0);\n-  tree val_offset_field = DECL_CHAIN(key_offset_field);\n-  go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(val_offset_field)),\n-\t\t    \"__val_offset\") == 0);\n-\n-  VEC(constructor_elt, gc)* descriptor = VEC_alloc(constructor_elt, gc, 6);\n-\n-  constructor_elt* elt = VEC_quick_push(constructor_elt, descriptor, NULL);\n-  elt->index = map_descriptor_field;\n-  elt->value = maptype->type_descriptor_pointer(this, BUILTINS_LOCATION);\n-\n-  elt = VEC_quick_push(constructor_elt, descriptor, NULL);\n-  elt->index = entry_size_field;\n-  elt->value = TYPE_SIZE_UNIT(map_entry_type);\n-\n-  elt = VEC_quick_push(constructor_elt, descriptor, NULL);\n-  elt->index = key_offset_field;\n-  elt->value = byte_position(map_entry_key_field);\n-\n-  elt = VEC_quick_push(constructor_elt, descriptor, NULL);\n-  elt->index = val_offset_field;\n-  elt->value = byte_position(map_entry_val_field);\n-\n-  tree constructor = build_constructor(struct_type, descriptor);\n-\n-  tree decl = build_decl(BUILTINS_LOCATION, VAR_DECL, id, struct_type);\n-  TREE_STATIC(decl) = 1;\n-  TREE_USED(decl) = 1;\n-  TREE_READONLY(decl) = 1;\n-  TREE_CONSTANT(decl) = 1;\n-  DECL_INITIAL(decl) = constructor;\n-  make_decl_one_only(decl, DECL_ASSEMBLER_NAME(decl));\n-  resolve_unique_section(decl, 1, 0);\n-\n-  rest_of_decl_compilation(decl, 1, 0);\n-\n-  go_preserve_from_gc(decl);\n-  p->second = decl;\n-\n-  return build_fold_addr_expr(decl);\n-}\n-\n-// Return a tree for the type of a map descriptor.  This is struct\n-// __go_map_descriptor in libgo/runtime/map.h.  This is the same for\n-// all map types.\n-\n-tree\n-Gogo::map_descriptor_type()\n-{\n-  static tree struct_type;\n-  Type* tdt = Type::make_type_descriptor_type();\n-  tree dtype = type_to_tree(tdt->get_backend(this));\n-  dtype = build_qualified_type(dtype, TYPE_QUAL_CONST);\n-  return Gogo::builtin_struct(&struct_type, \"__go_map_descriptor\", NULL_TREE,\n-\t\t\t      4,\n-\t\t\t      \"__map_descriptor\",\n-\t\t\t      build_pointer_type(dtype),\n-\t\t\t      \"__entry_size\",\n-\t\t\t      sizetype,\n-\t\t\t      \"__key_offset\",\n-\t\t\t      sizetype,\n-\t\t\t      \"__val_offset\",\n-\t\t\t      sizetype);\n-}\n-\n // Build an interface method table for a type: a list of function\n // pointers, one for each interface method.  This is used for\n // interfaces."}, {"sha": "194cacafcaf4ca05dd1803cece67c7049ff845fc", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -29,7 +29,6 @@ Gogo::Gogo(Backend* backend, int int_type_size, int pointer_size)\n     imports_(),\n     imported_unsafe_(false),\n     packages_(),\n-    map_descriptors_(NULL),\n     init_functions_(),\n     need_init_fn_(false),\n     init_fn_name_(),\n@@ -2596,6 +2595,7 @@ Gogo::convert_named_types()\n   Array_type::make_array_type_descriptor_type();\n   Array_type::make_slice_type_descriptor_type();\n   Map_type::make_map_type_descriptor_type();\n+  Map_type::make_map_descriptor_type();\n   Channel_type::make_chan_type_descriptor_type();\n   Interface_type::make_interface_type_descriptor_type();\n   Type::convert_builtin_named_types(this);"}, {"sha": "cc349afd064d2ee2e9ce543279129878189bcf5d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -473,16 +473,6 @@ class Gogo\n   slice_constructor(tree slice_type_tree, tree values, tree count,\n \t\t    tree capacity);\n \n-  // Build a map descriptor.\n-  tree\n-  map_descriptor(Map_type*);\n-\n-  // Return a tree for the type of a map descriptor.  This is struct\n-  // __go_map_descriptor in libgo/runtime/map.h.  This is the same for\n-  // all map types.\n-  tree\n-  map_descriptor_type();\n-\n   // Build required interface method tables.\n   void\n   build_interface_method_tables();\n@@ -599,10 +589,6 @@ class Gogo\n   // Type used to map special names in the sys package.\n   typedef std::map<std::string, std::string> Sys_names;\n \n-  // Hash table mapping map types to map descriptor decls.\n-  typedef Unordered_map_hash(const Map_type*, tree, Type_hash_identical,\n-\t\t\t     Type_identical) Map_descriptors;\n-\n   // The backend generator.\n   Backend* backend_;\n   // The package we are compiling.\n@@ -619,8 +605,6 @@ class Gogo\n   // Mapping from package names we have seen to packages.  This does\n   // not include the package we are compiling.\n   Packages packages_;\n-  // Mapping from map types to map descriptors.\n-  Map_descriptors* map_descriptors_;\n   // The functions named \"init\", if there are any.\n   std::vector<Named_object*> init_functions_;\n   // Whether we need a magic initialization function."}, {"sha": "e19d4f2e7441bf96f8f2035b069a3499e5edd2ef", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 126, "deletions": 2, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -5049,7 +5049,8 @@ Map_type::do_make_expression_tree(Translate_context* context,\n \t\t\t\t\t   location);\n     }\n \n-  tree map_type = type_to_tree(this->get_backend(context->gogo()));\n+  Gogo* gogo = context->gogo();\n+  tree map_type = type_to_tree(this->get_backend(gogo));\n \n   static tree new_map_fndecl;\n   tree ret = Gogo::call_builtin(&new_map_fndecl,\n@@ -5058,7 +5059,7 @@ Map_type::do_make_expression_tree(Translate_context* context,\n \t\t\t\t2,\n \t\t\t\tmap_type,\n \t\t\t\tTREE_TYPE(TYPE_FIELDS(TREE_TYPE(map_type))),\n-\t\t\t\tcontext->gogo()->map_descriptor(this),\n+\t\t\t\tthis->map_descriptor_pointer(gogo, location),\n \t\t\t\tsizetype,\n \t\t\t\texpr_tree);\n   if (ret == error_mark_node)\n@@ -5136,6 +5137,129 @@ Map_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   return Expression::make_struct_composite_literal(mtdt, vals, bloc);\n }\n \n+// A mapping from map types to map descriptors.\n+\n+Map_type::Map_descriptors Map_type::map_descriptors;\n+\n+// Build a map descriptor for this type.  Return a pointer to it.\n+\n+tree\n+Map_type::map_descriptor_pointer(Gogo* gogo, source_location location)\n+{\n+  Bvariable* bvar = this->map_descriptor(gogo);\n+  tree var_tree = var_to_tree(bvar);\n+  if (var_tree == error_mark_node)\n+    return error_mark_node;\n+  return build_fold_addr_expr_loc(location, var_tree);\n+}\n+\n+// Build a map descriptor for this type.\n+\n+Bvariable*\n+Map_type::map_descriptor(Gogo* gogo)\n+{\n+  std::pair<Map_type*, Bvariable*> val(this, NULL);\n+  std::pair<Map_type::Map_descriptors::iterator, bool> ins =\n+    Map_type::map_descriptors.insert(val);\n+  if (!ins.second)\n+    return ins.first->second;\n+\n+  Type* key_type = this->key_type_;\n+  Type* val_type = this->val_type_;\n+\n+  // The map entry type is a struct with three fields.  Build that\n+  // struct so that we can get the offsets of the key and value within\n+  // a map entry.  The first field should technically be a pointer to\n+  // this type itself, but since we only care about field offsets we\n+  // just use pointer to bool.\n+  Type* pbool = Type::make_pointer_type(Type::make_boolean_type());\n+  Struct_type* map_entry_type =\n+    Type::make_builtin_struct_type(3,\n+\t\t\t\t   \"__next\", pbool,\n+\t\t\t\t   \"__key\", key_type,\n+\t\t\t\t   \"__val\", val_type);\n+\n+  Type* map_descriptor_type = Map_type::make_map_descriptor_type();\n+\n+  const Struct_field_list* fields =\n+    map_descriptor_type->struct_type()->fields();\n+\n+  Expression_list* vals = new Expression_list();\n+  vals->reserve(4);\n+\n+  source_location bloc = BUILTINS_LOCATION;\n+\n+  Struct_field_list::const_iterator p = fields->begin();\n+\n+  go_assert(p->field_name() == \"__map_descriptor\");\n+  vals->push_back(Expression::make_type_descriptor(this, bloc));\n+\n+  ++p;\n+  go_assert(p->field_name() == \"__entry_size\");\n+  Expression::Type_info type_info = Expression::TYPE_INFO_SIZE;\n+  vals->push_back(Expression::make_type_info(map_entry_type, type_info));\n+\n+  Struct_field_list::const_iterator pf = map_entry_type->fields()->begin();\n+  ++pf;\n+  go_assert(pf->field_name() == \"__key\");\n+\n+  ++p;\n+  go_assert(p->field_name() == \"__key_offset\");\n+  vals->push_back(Expression::make_struct_field_offset(map_entry_type, &*pf));\n+\n+  ++pf;\n+  go_assert(pf->field_name() == \"__val\");\n+\n+  ++p;\n+  go_assert(p->field_name() == \"__val_offset\");\n+  vals->push_back(Expression::make_struct_field_offset(map_entry_type, &*pf));\n+\n+  ++p;\n+  go_assert(p == fields->end());\n+\n+  Expression* initializer =\n+    Expression::make_struct_composite_literal(map_descriptor_type, vals, bloc);\n+\n+  std::string mangled_name = \"__go_map_\" + this->mangled_name(gogo);\n+  Btype* map_descriptor_btype = map_descriptor_type->get_backend(gogo);\n+  Bvariable* bvar = gogo->backend()->immutable_struct(mangled_name, true,\n+\t\t\t\t\t\t      map_descriptor_btype,\n+\t\t\t\t\t\t      bloc);\n+\n+  Translate_context context(gogo, NULL, NULL, NULL);\n+  context.set_is_const();\n+  Bexpression* binitializer = tree_to_expr(initializer->get_tree(&context));\n+\n+  gogo->backend()->immutable_struct_set_init(bvar, mangled_name, true,\n+\t\t\t\t\t     map_descriptor_btype, bloc,\n+\t\t\t\t\t     binitializer);\n+\n+  ins.first->second = bvar;\n+  return bvar;\n+}\n+\n+// Build the type of a map descriptor.  This must match the struct\n+// __go_map_descriptor in libgo/runtime/map.h.\n+\n+Type*\n+Map_type::make_map_descriptor_type()\n+{\n+  static Type* ret;\n+  if (ret == NULL)\n+    {\n+      Type* ptdt = Type::make_type_descriptor_ptr_type();\n+      Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+      Struct_type* sf =\n+\tType::make_builtin_struct_type(4,\n+\t\t\t\t       \"__map_descriptor\", ptdt,\n+\t\t\t\t       \"__entry_size\", uintptr_type,\n+\t\t\t\t       \"__key_offset\", uintptr_type,\n+\t\t\t\t       \"__val_offset\", uintptr_type);\n+      ret = Type::make_builtin_named_type(\"__go_map_descriptor\", sf);\n+    }\n+  return ret;\n+}\n+\n // Reflection string for a map.\n \n void"}, {"sha": "2ee80a4868b24d937f196bb10e2e0bce8f23fad2", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -2157,6 +2157,15 @@ class Map_type : public Type\n   static Type*\n   make_map_type_descriptor_type();\n \n+  static Type*\n+  make_map_descriptor_type();\n+\n+  // Build a map descriptor for this type.  Return a pointer to it.\n+  // The location is the location which causes us to need the\n+  // descriptor.\n+  tree\n+  map_descriptor_pointer(Gogo* gogo, source_location);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -2194,6 +2203,14 @@ class Map_type : public Type\n   do_export(Export*) const;\n \n  private:\n+  // Mapping from map types to map descriptors.\n+  typedef Unordered_map_hash(const Map_type*, Bvariable*, Type_hash_identical,\n+\t\t\t     Type_identical) Map_descriptors;\n+  static Map_descriptors map_descriptors;\n+\n+  Bvariable*\n+  map_descriptor(Gogo*);\n+\n   // The key type.\n   Type* key_type_;\n   // The value type."}, {"sha": "7a3a7b83d92cb46b6074cd3c798c222cc325688a", "filename": "libgo/runtime/go-map-delete.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/libgo%2Fruntime%2Fgo-map-delete.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/libgo%2Fruntime%2Fgo-map-delete.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-delete.c?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -18,7 +18,7 @@ __go_map_delete (struct __go_map *map, const void *key)\n {\n   const struct __go_map_descriptor *descriptor;\n   const struct __go_type_descriptor *key_descriptor;\n-  size_t key_offset;\n+  uintptr_t key_offset;\n   _Bool (*equalfn) (const void*, const void*, size_t);\n   size_t key_hash;\n   size_t key_size;"}, {"sha": "a387c4b98bc673b2ac2447533ac8d045dcadddf3", "filename": "libgo/runtime/go-map-index.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/libgo%2Fruntime%2Fgo-map-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/libgo%2Fruntime%2Fgo-map-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-index.c?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -18,7 +18,7 @@ __go_map_rehash (struct __go_map *map)\n {\n   const struct __go_map_descriptor *descriptor;\n   const struct __go_type_descriptor *key_descriptor;\n-  size_t key_offset;\n+  uintptr_t key_offset;\n   size_t key_size;\n   size_t (*hashfn) (const void *, size_t);\n   uintptr_t old_bucket_count;\n@@ -78,7 +78,7 @@ __go_map_index (struct __go_map *map, const void *key, _Bool insert)\n {\n   const struct __go_map_descriptor *descriptor;\n   const struct __go_type_descriptor *key_descriptor;\n-  size_t key_offset;\n+  uintptr_t key_offset;\n   _Bool (*equalfn) (const void*, const void*, size_t);\n   size_t key_hash;\n   size_t key_size;"}, {"sha": "0c587bb2afac96e2b12ee40bfb5a1cffae73c0de", "filename": "libgo/runtime/map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891daafaf87384c823ff5186562e5132f246a9e4/libgo%2Fruntime%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891daafaf87384c823ff5186562e5132f246a9e4/libgo%2Fruntime%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmap.h?ref=891daafaf87384c823ff5186562e5132f246a9e4", "patch": "@@ -22,15 +22,15 @@ struct __go_map_descriptor\n        key_type key;\n        value_type value;\n      This is the size of that struct.  */\n-  size_t __entry_size;\n+  uintptr_t __entry_size;\n \n   /* The offset of the key field in a map entry struct.  */\n-  size_t __key_offset;\n+  uintptr_t __key_offset;\n \n   /* The offset of the value field in a map entry struct (the value\n      field immediately follows the key field, but there may be some\n      bytes inserted for alignment).  */\n-  size_t __val_offset;\n+  uintptr_t __val_offset;\n };\n \n struct __go_map"}]}