{"sha": "855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1ZjAzNmRjYzA5YzNjMGE3NzE4YmRjYjBmZDQxMjViNTdjMWRjZQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-06-18T10:14:38Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-06-18T10:14:38Z"}, "message": "re PR middle-end/66568 ([CHKP] internal compiler error: in expand_expr_addr_expr_1)\n\ngcc/\n\n\tPR middle-end/66568\n\t* cfgexpand.c (expand_return): Handle missing bounds.\n\t(expand_gimple_stmt_1): Likewise.\n\t* tree-chkp.c (chkp_expand_zero_bounds): New.\n\t* tree-chkp.h (chkp_expand_zero_bounds): New.\n\ngcc/testsuite/\n\n\tPR middle-end/66568\n\t* gcc.target/i386/mpx/pr66568.c: New test.\n\nFrom-SVN: r224601", "tree": {"sha": "555dbafe475f14c973a8d7cf45e60c09bd75dc1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/555dbafe475f14c973a8d7cf45e60c09bd75dc1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/comments", "author": null, "committer": null, "parents": [{"sha": "847ffe1718d3eac1a1e605686e8bb27b25969ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847ffe1718d3eac1a1e605686e8bb27b25969ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847ffe1718d3eac1a1e605686e8bb27b25969ef0"}], "stats": {"total": 131, "additions": 96, "deletions": 35}, "files": [{"sha": "23301d4beee43d6ff7fddfed96283ea76dec2c1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "patch": "@@ -1,3 +1,11 @@\n+2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR middle-end/66568\n+\t* cfgexpand.c (expand_return): Handle missing bounds.\n+\t(expand_gimple_stmt_1): Likewise.\n+\t* tree-chkp.c (chkp_expand_zero_bounds): New.\n+\t* tree-chkp.h (chkp_expand_zero_bounds): New.\n+\n 2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR middle-end/66567"}, {"sha": "6b79b1dae77831930d12318f1b23e9c3b53d4a85", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 57, "deletions": 35, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "patch": "@@ -3134,18 +3134,25 @@ expand_return (tree retval, tree bounds)\n   bounds_rtl = DECL_BOUNDS_RTL (DECL_RESULT (current_function_decl));\n   if (bounds_rtl)\n     {\n-      rtx addr, bnd;\n+      rtx addr = NULL;\n+      rtx bnd = NULL;\n \n-      if (bounds)\n+      if (bounds && bounds != error_mark_node)\n \t{\n \t  bnd = expand_normal (bounds);\n \t  targetm.calls.store_returned_bounds (bounds_rtl, bnd);\n \t}\n       else if (REG_P (bounds_rtl))\n \t{\n-\t  addr = expand_normal (build_fold_addr_expr (retval_rhs));\n-\t  addr = gen_rtx_MEM (Pmode, addr);\n-\t  bnd = targetm.calls.load_bounds_for_arg (addr, NULL, NULL);\n+\t  if (bounds)\n+\t    bnd = chkp_expand_zero_bounds ();\n+\t  else\n+\t    {\n+\t      addr = expand_normal (build_fold_addr_expr (retval_rhs));\n+\t      addr = gen_rtx_MEM (Pmode, addr);\n+\t      bnd = targetm.calls.load_bounds_for_arg (addr, NULL, NULL);\n+\t    }\n+\n \t  targetm.calls.store_returned_bounds (bounds_rtl, bnd);\n \t}\n       else\n@@ -3154,15 +3161,23 @@ expand_return (tree retval, tree bounds)\n \n \t  gcc_assert (GET_CODE (bounds_rtl) == PARALLEL);\n \n-\t  addr = expand_normal (build_fold_addr_expr (retval_rhs));\n-\t  addr = gen_rtx_MEM (Pmode, addr);\n+\t  if (bounds)\n+\t    bnd = chkp_expand_zero_bounds ();\n+\t  else\n+\t    {\n+\t      addr = expand_normal (build_fold_addr_expr (retval_rhs));\n+\t      addr = gen_rtx_MEM (Pmode, addr);\n+\t    }\n \n \t  for (n = 0; n < XVECLEN (bounds_rtl, 0); n++)\n \t    {\n-\t      rtx offs = XEXP (XVECEXP (bounds_rtl, 0, n), 1);\n \t      rtx slot = XEXP (XVECEXP (bounds_rtl, 0, n), 0);\n-\t      rtx from = adjust_address (addr, Pmode, INTVAL (offs));\n-\t      rtx bnd = targetm.calls.load_bounds_for_arg (from, NULL, NULL);\n+\t      if (!bounds)\n+\t\t{\n+\t\t  rtx offs = XEXP (XVECEXP (bounds_rtl, 0, n), 1);\n+\t\t  rtx from = adjust_address (addr, Pmode, INTVAL (offs));\n+\t\t  bnd = targetm.calls.load_bounds_for_arg (from, NULL, NULL);\n+\t\t}\n \t      targetm.calls.store_returned_bounds (slot, bnd);\n \t    }\n \t}\n@@ -3259,33 +3274,40 @@ expand_gimple_stmt_1 (gimple stmt)\n       break;\n \n     case GIMPLE_RETURN:\n-      op0 = gimple_return_retval (as_a <greturn *> (stmt));\n+      {\n+\ttree bnd = gimple_return_retbnd (as_a <greturn *> (stmt));\n+\top0 = gimple_return_retval (as_a <greturn *> (stmt));\n \n-      if (op0 && op0 != error_mark_node)\n-\t{\n-\t  tree result = DECL_RESULT (current_function_decl);\n+\tif (op0 && op0 != error_mark_node)\n+\t  {\n+\t    tree result = DECL_RESULT (current_function_decl);\n \n-\t  /* If we are not returning the current function's RESULT_DECL,\n-\t     build an assignment to it.  */\n-\t  if (op0 != result)\n-\t    {\n-\t      /* I believe that a function's RESULT_DECL is unique.  */\n-\t      gcc_assert (TREE_CODE (op0) != RESULT_DECL);\n-\n-\t      /* ??? We'd like to use simply expand_assignment here,\n-\t         but this fails if the value is of BLKmode but the return\n-\t\t decl is a register.  expand_return has special handling\n-\t\t for this combination, which eventually should move\n-\t\t to common code.  See comments there.  Until then, let's\n-\t\t build a modify expression :-/  */\n-\t      op0 = build2 (MODIFY_EXPR, TREE_TYPE (result),\n-\t\t\t    result, op0);\n-\t    }\n-\t}\n-      if (!op0)\n-\texpand_null_return ();\n-      else\n-\texpand_return (op0, gimple_return_retbnd (stmt));\n+\t    /* If we are not returning the current function's RESULT_DECL,\n+\t       build an assignment to it.  */\n+\t    if (op0 != result)\n+\t      {\n+\t\t/* I believe that a function's RESULT_DECL is unique.  */\n+\t\tgcc_assert (TREE_CODE (op0) != RESULT_DECL);\n+\n+\t\t/* ??? We'd like to use simply expand_assignment here,\n+\t\t   but this fails if the value is of BLKmode but the return\n+\t\t   decl is a register.  expand_return has special handling\n+\t\t   for this combination, which eventually should move\n+\t\t   to common code.  See comments there.  Until then, let's\n+\t\t   build a modify expression :-/  */\n+\t\top0 = build2 (MODIFY_EXPR, TREE_TYPE (result),\n+\t\t\t      result, op0);\n+\t      }\n+\t    /* Mark we have return statement with missing bounds.  */\n+\t    if (!bnd && chkp_function_instrumented_p (cfun->decl))\n+\t      bnd = error_mark_node;\n+\t  }\n+\n+\tif (!op0)\n+\t  expand_null_return ();\n+\telse\n+\t  expand_return (op0, bnd);\n+      }\n       break;\n \n     case GIMPLE_ASSIGN:"}, {"sha": "3b1d0710c1a93b151263375ece3d8a3b4d8cd889", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "patch": "@@ -1,3 +1,8 @@\n+2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR middle-end/66568\n+\t* gcc.target/i386/mpx/pr66568.c: New test.\n+\n 2015-06-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR middle-end/66567"}, {"sha": "d7bb9f6e31d9fed86fa2f7c773e2249d9b16879a", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66568.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66568.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66568.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66568.c?ref=855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx -O2 -fPIC\" } */\n+\n+int a, b, c;\n+void *set_test () {\n+  if (b)\n+    a ? exit (0) : exit (1);\n+  b = c;\n+}"}, {"sha": "7ffec7b630574b7144522619e489c9d508bdfff6", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "patch": "@@ -466,6 +466,21 @@ chkp_gimple_call_builtin_p (gimple call,\n   return false;\n }\n \n+/* Emit code to build zero bounds and return RTL holding\n+   the result.  */\n+rtx\n+chkp_expand_zero_bounds ()\n+{\n+  tree zero_bnd;\n+\n+  if (flag_chkp_use_static_const_bounds)\n+    zero_bnd = chkp_get_zero_bounds_var ();\n+  else\n+    zero_bnd = chkp_build_make_bounds_call (integer_zero_node,\n+\t\t\t\t\t    integer_zero_node);\n+  return expand_normal (zero_bnd);\n+}\n+\n /* Emit code to store zero bounds for PTR located at MEM.  */\n void\n chkp_expand_bounds_reset_for_mem (tree mem, tree ptr)"}, {"sha": "6e41086ebe4d78af82ccdc8336b181d712e90408", "filename": "gcc/tree-chkp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftree-chkp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855f036dcc09c3c0a7718bdcb0fd4125b57c1dce/gcc%2Ftree-chkp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.h?ref=855f036dcc09c3c0a7718bdcb0fd4125b57c1dce", "patch": "@@ -53,6 +53,7 @@ extern void chkp_copy_bounds_for_assign (gimple assign,\n \t\t\t\t\t struct cgraph_edge *edge);\n extern bool chkp_gimple_call_builtin_p (gimple call,\n \t\t\t\t\tenum built_in_function code);\n+extern rtx chkp_expand_zero_bounds (void);\n extern void chkp_expand_bounds_reset_for_mem (tree mem, tree ptr);\n extern tree chkp_insert_retbnd_call (tree bndval, tree retval,\n \t\t\t\t     gimple_stmt_iterator *gsi);"}]}