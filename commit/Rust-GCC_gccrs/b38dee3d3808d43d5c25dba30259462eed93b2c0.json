{"sha": "b38dee3d3808d43d5c25dba30259462eed93b2c0", "node_id": "C_kwDOANBUbNoAKGIzOGRlZTNkMzgwOGQ0M2Q1YzI1ZGJhMzAyNTk0NjJlZWQ5M2IyYzA", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T09:08:27Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-29T16:18:54Z"}, "message": "mappings: Keep track of extern blocks\n\nWhen inserting external items, it's interesting to also be able to\nlookup the extern block they were defined in, similarly to impl items.\nThis is useful to know the ABI or other specifiers of the block the item\nhas been declared in.", "tree": {"sha": "1ed0c2f53d0478509bb617b42094146a1e26e824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed0c2f53d0478509bb617b42094146a1e26e824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b38dee3d3808d43d5c25dba30259462eed93b2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38dee3d3808d43d5c25dba30259462eed93b2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38dee3d3808d43d5c25dba30259462eed93b2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38dee3d3808d43d5c25dba30259462eed93b2c0/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88a55ab6919346e0afe79bfd13f84ecf9634889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88a55ab6919346e0afe79bfd13f84ecf9634889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88a55ab6919346e0afe79bfd13f84ecf9634889"}], "stats": {"total": 69, "additions": 51, "deletions": 18}, "files": [{"sha": "b5bfa3c21bff573184c4b6334dca56a9261bcd00", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=b38dee3d3808d43d5c25dba30259462eed93b2c0", "patch": "@@ -159,8 +159,9 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t\t\t       Location expr_locus, bool is_qualified_path)\n {\n   HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (ref);\n+  HirId parent_block;\n   HIR::ExternalItem *resolved_extern_item\n-    = ctx->get_mappings ()->lookup_hir_extern_item (ref);\n+    = ctx->get_mappings ()->lookup_hir_extern_item (ref, &parent_block);\n   bool is_hir_item = resolved_item != nullptr;\n   bool is_hir_extern_item = resolved_extern_item != nullptr;\n   if (is_hir_item)"}, {"sha": "9642baadfed385d63d1fece3934fa87457266451", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=b38dee3d3808d43d5c25dba30259462eed93b2c0", "patch": "@@ -69,7 +69,9 @@ UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n     return;\n \n   auto maybe_static_mut = mappings.lookup_hir_item (node_id);\n-  auto maybe_extern_static = mappings.lookup_hir_extern_item (node_id);\n+  HirId extern_block;\n+  auto maybe_extern_static\n+    = mappings.lookup_hir_extern_item (node_id, &extern_block);\n \n   if (maybe_static_mut)\n     check_static_mut (maybe_static_mut, locus);"}, {"sha": "a67461791d750a084ca65f6e0eb51e68f365946d", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=b38dee3d3808d43d5c25dba30259462eed93b2c0", "patch": "@@ -1038,14 +1038,19 @@ ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n {\n   HIR::Visibility vis = translate_visibility (extern_block.get_visibility ());\n \n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n   std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n   for (auto &item : extern_block.get_extern_items ())\n     {\n       if (item->is_marked_for_strip ())\n \tcontinue;\n \n       HIR::ExternalItem *lowered\n-\t= ASTLoweringExternItem::translate (item.get ());\n+\t= ASTLoweringExternItem::translate (item.get (), mapping.get_hirid ());\n       extern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));\n     }\n \n@@ -1058,17 +1063,14 @@ ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n \trust_error_at (extern_block.get_locus (), \"unknown ABI option\");\n     }\n \n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n   HIR::ExternBlock *hir_extern_block\n     = new HIR::ExternBlock (mapping, abi, std::move (extern_items),\n \t\t\t    std::move (vis), extern_block.get_inner_attrs (),\n \t\t\t    extern_block.get_outer_attrs (),\n \t\t\t    extern_block.get_locus ());\n \n+  mappings->insert_hir_extern_block (hir_extern_block);\n+\n   return hir_extern_block;\n }\n "}, {"sha": "eeb59c9c5d6f75111a3d2eca18a629bf97a3f0af", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=b38dee3d3808d43d5c25dba30259462eed93b2c0", "patch": "@@ -31,13 +31,15 @@ class ASTLoweringExternItem : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::ExternalItem *translate (AST::ExternalItem *item)\n+  static HIR::ExternalItem *translate (AST::ExternalItem *item,\n+\t\t\t\t       HirId parent_hirid)\n   {\n     ASTLoweringExternItem resolver;\n     item->accept_vis (resolver);\n \n     rust_assert (resolver.translated != nullptr);\n-    resolver.mappings->insert_hir_extern_item (resolver.translated);\n+    resolver.mappings->insert_hir_extern_item (resolver.translated,\n+\t\t\t\t\t       parent_hirid);\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_hirid (),\n       resolver.translated->get_locus ());"}, {"sha": "6a6deebf944a68f4c9eb99daab9adf321026325e", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=b38dee3d3808d43d5c25dba30259462eed93b2c0", "patch": "@@ -371,23 +371,45 @@ Mappings::lookup_hir_trait_item (HirId id)\n }\n \n void\n-Mappings::insert_hir_extern_item (HIR::ExternalItem *item)\n+Mappings::insert_hir_extern_block (HIR::ExternBlock *block)\n+{\n+  auto id = block->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_extern_block (id) == nullptr);\n+\n+  hirExternBlockMappings[id] = block;\n+  insert_node_to_hir (block->get_mappings ().get_nodeid (), id);\n+}\n+\n+HIR::ExternBlock *\n+Mappings::lookup_hir_extern_block (HirId id)\n+{\n+  auto it = hirExternBlockMappings.find (id);\n+  if (it == hirExternBlockMappings.end ())\n+    return nullptr;\n+\n+  return it->second;\n+}\n+\n+void\n+Mappings::insert_hir_extern_item (HIR::ExternalItem *item, HirId parent_block)\n {\n   auto id = item->get_mappings ().get_hirid ();\n-  rust_assert (lookup_hir_extern_item (id) == nullptr);\n+  rust_assert (lookup_hir_extern_item (id, nullptr) == nullptr);\n \n-  hirExternItemMappings[id] = item;\n+  hirExternItemMappings[id] = {item, parent_block};\n   insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n }\n \n HIR::ExternalItem *\n-Mappings::lookup_hir_extern_item (HirId id)\n+Mappings::lookup_hir_extern_item (HirId id, HirId *parent_block)\n {\n   auto it = hirExternItemMappings.find (id);\n   if (it == hirExternItemMappings.end ())\n     return nullptr;\n \n-  return it->second;\n+  *parent_block = it->second.second;\n+\n+  return it->second.first;\n }\n \n void"}, {"sha": "98fcfe6a6a741e9d768853113019b0530ebc090c", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38dee3d3808d43d5c25dba30259462eed93b2c0/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=b38dee3d3808d43d5c25dba30259462eed93b2c0", "patch": "@@ -115,8 +115,11 @@ class Mappings\n   void insert_hir_trait_item (HIR::TraitItem *item);\n   HIR::TraitItem *lookup_hir_trait_item (HirId id);\n \n-  void insert_hir_extern_item (HIR::ExternalItem *item);\n-  HIR::ExternalItem *lookup_hir_extern_item (HirId id);\n+  void insert_hir_extern_block (HIR::ExternBlock *block);\n+  HIR::ExternBlock *lookup_hir_extern_block (HirId id);\n+\n+  void insert_hir_extern_item (HIR::ExternalItem *item, HirId parent_block);\n+  HIR::ExternalItem *lookup_hir_extern_item (HirId id, HirId *parent_block);\n \n   void insert_hir_impl_block (HIR::ImplBlock *item);\n   HIR::ImplBlock *lookup_hir_impl_block (HirId id);\n@@ -312,7 +315,8 @@ class Mappings\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n   std::map<HirId, HIR::ImplBlock *> hirImplBlockMappings;\n   std::map<HirId, HIR::TraitItem *> hirTraitItemMappings;\n-  std::map<HirId, HIR::ExternalItem *> hirExternItemMappings;\n+  std::map<HirId, HIR::ExternBlock *> hirExternBlockMappings;\n+  std::map<HirId, std::pair<HIR::ExternalItem *, HirId>> hirExternItemMappings;\n   std::map<HirId, HIR::PathExprSegment *> hirPathSegMappings;\n   std::map<HirId, HIR::GenericParam *> hirGenericParamMappings;\n   std::map<HirId, HIR::Trait *> hirTraitItemsToTraitMappings;"}]}