{"sha": "5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "node_id": "C_kwDOANBUbNoAKDVkYjA0MmIyYjg0ODRlMjhkMWJmODcyNmZhOWVmNjliODQ5NWRkYWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-04T20:32:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:49:50Z"}, "message": "fortran, libgfortran: Add remaining missing *_r17 symbols\n\nFollowing patch adds remaining missing *_r17 entrypoints, so that\nwe have 91 *_r16 and 91 *_r17 entrypoints (and 24 *_c16 and 24 *_c17).\n\nThis fixes:\nFAIL: gfortran.dg/dec_math.f90   -O0  execution test\nFAIL: gfortran.dg/dec_math.f90   -O1  execution test\nFAIL: gfortran.dg/dec_math.f90   -O2  execution test\nFAIL: gfortran.dg/dec_math.f90   -O3 -fomit-frame-pointer -funroll-loops -fpeel-loops -ftracer -finline-functions  execution test\nFAIL: gfortran.dg/dec_math.f90   -O3 -g  execution test\nFAIL: gfortran.dg/dec_math.f90   -Os  execution test\nFAIL: gfortran.dg/ieee/dec_math_1.f90   -O0  execution test\nFAIL: gfortran.dg/ieee/dec_math_1.f90   -O1  execution test\nFAIL: gfortran.dg/ieee/dec_math_1.f90   -O2  execution test\nFAIL: gfortran.dg/ieee/dec_math_1.f90   -O3 -fomit-frame-pointer -funroll-loops -fpeel-loops -ftracer -finline-functions  execution test\nFAIL: gfortran.dg/ieee/dec_math_1.f90   -O3 -g  execution test\nFAIL: gfortran.dg/ieee/dec_math_1.f90   -Os  execution test\n\n2022-01-04  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/fortran/\n\t* trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl): Use\n\tgfc_type_abi_kind.\nlibgfortran/\n\t* libgfortran.h (GFC_REAL_17_INFINITY, GFC_REAL_17_QUIET_NAN): Define.\n\t(__erfcieee128): Declare.\n\t* intrinsics/trigd.c (_gfortran_sind_r17, _gfortran_cosd_r17,\n\t_gfortran_tand_r17): Define for HAVE_GFC_REAL_17.\n\t* intrinsics/random.c (random_r17, arandom_r17, rnumber_17): Define.\n\t* intrinsics/erfc_scaled.c (ERFC_SCALED): Define.\n\t(erfc_scaled_r16): Use ERFC_SCALED macro.\n\t(erfc_scaled_r17): Define.", "tree": {"sha": "3e0f48801e5a46fe4c04a04daabaea89edda220e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e0f48801e5a46fe4c04a04daabaea89edda220e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a74228ce589dc24b37341d22a6933cdccdb6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a74228ce589dc24b37341d22a6933cdccdb6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a74228ce589dc24b37341d22a6933cdccdb6bd"}], "stats": {"total": 292, "additions": 251, "deletions": 41}, "files": [{"sha": "db1d87ac36d7ac64490d7995f3560e1063d7171a", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "patch": "@@ -881,7 +881,7 @@ gfc_get_intrinsic_lib_fndecl (gfc_intrinsic_map_t * m, gfc_expr * expr)\n     {\n       snprintf (name, sizeof (name), PREFIX (\"%s_%c%d\"), m->name,\n \t\tts->type == BT_COMPLEX ? 'c' : 'r',\n-\t\tts->kind);\n+\t\tgfc_type_abi_kind (ts));\n     }\n \n   argtypes = NULL;"}, {"sha": "60982fb161c1ac81300d34ad960ce16cdf5997cd", "filename": "libgfortran/intrinsics/erfc_scaled.c", "status": "modified", "additions": 79, "deletions": 40, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Fintrinsics%2Ferfc_scaled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Fintrinsics%2Ferfc_scaled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ferfc_scaled.c?ref=5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "patch": "@@ -75,52 +75,91 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif\n \n+#define ERFC_SCALED(k) \\\n+GFC_REAL_ ## k\t\t\t\t\t\t\t\t    \\\n+erfc_scaled_r ## k (GFC_REAL_ ## k x)\t\t\t\t\t    \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  if (x < _THRESH)\t\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+      return _INF;\t\t\t\t\t\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+  if (x < 12)\t\t\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+      /* Compute directly as ERFC_SCALED(x) = ERFC(x) * EXP(X**2).\t    \\\n+\t This is not perfect, but much better than netlib.  */\t\t    \\\n+      return _ERFC(x) * _EXP(x * x);\t\t\t\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+  else\t\t\t\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+      /* Calculate ERFC_SCALED(x) using a power series in 1/x:\t\t    \\\n+\t ERFC_SCALED(x) = 1 / (x * sqrt(pi))\t\t\t\t    \\\n+\t\t\t * (1 + Sum_n (-1)**n * (1 * 3 * 5 * ... * (2n-1))  \\\n+\t\t\t\t\t      / (2 * x**2)**n)\t\t    \\\n+       */\t\t\t\t\t\t\t\t    \\\n+      GFC_REAL_ ## k sum = 0, oldsum;\t\t\t\t\t    \\\n+      GFC_REAL_ ## k inv2x2 = 1 / (2 * x * x);\t\t\t\t    \\\n+      GFC_REAL_ ## k fac = 1;\t\t\t\t\t\t    \\\n+      int n = 1;\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+      while (n < 200)\t\t\t\t\t\t\t    \\\n+\t{\t\t\t\t\t\t\t\t    \\\n+\t  fac *= - (2*n - 1) * inv2x2;\t\t\t\t\t    \\\n+\t  oldsum = sum;\t\t\t\t\t\t\t    \\\n+\t  sum += fac;\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+\t  if (sum == oldsum)\t\t\t\t\t\t    \\\n+\t    break;\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+\t  n++;\t\t\t\t\t\t\t\t    \\\n+\t}\t\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+      return (1 + sum) / x * (_M_2_SQRTPI / 2);\t\t\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+}\n+\n #if defined(_ERFC) && defined(_EXP)\n \n extern GFC_REAL_16 erfc_scaled_r16 (GFC_REAL_16);\n export_proto(erfc_scaled_r16);\n \n-GFC_REAL_16\n-erfc_scaled_r16 (GFC_REAL_16 x)\n-{\n-  if (x < _THRESH)\n-    {\n-      return _INF;\n-    }\n-  if (x < 12)\n-    {\n-      /* Compute directly as ERFC_SCALED(x) = ERFC(x) * EXP(X**2).\n-\t This is not perfect, but much better than netlib.  */\n-      return _ERFC(x) * _EXP(x * x);\n-    }\n-  else\n-    {\n-      /* Calculate ERFC_SCALED(x) using a power series in 1/x:\n-\t ERFC_SCALED(x) = 1 / (x * sqrt(pi))\n-\t\t\t * (1 + Sum_n (-1)**n * (1 * 3 * 5 * ... * (2n-1))\n-\t\t\t\t\t      / (2 * x**2)**n)\n-       */\n-      GFC_REAL_16 sum = 0, oldsum;\n-      GFC_REAL_16 inv2x2 = 1 / (2 * x * x);\n-      GFC_REAL_16 fac = 1;\n-      int n = 1;\n-\n-      while (n < 200)\n-\t{\n-\t  fac *= - (2*n - 1) * inv2x2;\n-\t  oldsum = sum;\n-\t  sum += fac;\n-\n-\t  if (sum == oldsum)\n-\t    break;\n-\n-\t  n++;\n-\t}\n-\n-      return (1 + sum) / x * (_M_2_SQRTPI / 2);\n-    }\n-}\n+ERFC_SCALED(16)\n \n #endif\n \n+#undef _THRESH\n+#undef _M_2_SQRTPI\n+#undef _INF\n+#undef _ERFC\n+#undef _EXP\n+\n+#endif\n+\n+#ifdef HAVE_GFC_REAL_17\n+\n+/* For quadruple-precision, netlib's implementation is\n+   not accurate enough.  We provide another one.  */\n+\n+# define _THRESH -106.566990228185312813205074546585730Q\n+# define _M_2_SQRTPI M_2_SQRTPIq\n+# define _INF __builtin_inff128()\n+# ifdef POWER_IEEE128\n+#  define _ERFC(x) __erfcieee128(x)\n+#  define _EXP(x) __expieee128(x)\n+# else\n+#  define _ERFC(x) erfcq(x)\n+#  define _EXP(x) expq(x)\n+# endif\n+\n+extern GFC_REAL_17 erfc_scaled_r17 (GFC_REAL_17);\n+export_proto(erfc_scaled_r17);\n+\n+ERFC_SCALED(17)\n+\n+#undef _THRESH\n+#undef _M_2_SQRTPI\n+#undef _INF\n+#undef _ERFC\n+#undef _EXP\n+#undef ERFC_SCALED\n+\n #endif"}, {"sha": "b5732e6c25a14359745c5f698c2dd4cab6f3c81f", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "patch": "@@ -79,6 +79,16 @@ export_proto(arandom_r16);\n \n #endif\n \n+#ifdef HAVE_GFC_REAL_17\n+\n+extern void random_r17 (GFC_REAL_17 *);\n+iexport_proto(random_r17);\n+\n+extern void arandom_r17 (gfc_array_r17 *);\n+export_proto(arandom_r17);\n+\n+#endif\n+\n #ifdef __GTHREAD_MUTEX_INIT\n static __gthread_mutex_t random_lock = __GTHREAD_MUTEX_INIT;\n #else\n@@ -161,6 +171,27 @@ rnumber_16 (GFC_REAL_16 *f, GFC_UINTEGER_8 v1, GFC_UINTEGER_8 v2)\n }\n #endif\n \n+#ifdef HAVE_GFC_REAL_17\n+\n+/* For REAL(KIND=16), we only need to mask off the lower bits.  */\n+\n+static void\n+rnumber_17 (GFC_REAL_17 *f, GFC_UINTEGER_8 v1, GFC_UINTEGER_8 v2)\n+{\n+  GFC_UINTEGER_8 mask;\n+#if GFC_REAL_17_RADIX == 2\n+  mask = ~ (GFC_UINTEGER_8) 0u << (128 - GFC_REAL_17_DIGITS);\n+#elif GFC_REAL_17_RADIX == 16\n+  mask = ~ (GFC_UINTEGER_8) 0u << ((32 - GFC_REAL_17_DIGITS) * 4);\n+#else\n+#error \"GFC_REAL_17_RADIX has unknown value\"\n+#endif\n+  v2 = v2 & mask;\n+  *f = (GFC_REAL_17) v1 * GFC_REAL_17_LITERAL(0x1.p-64)\n+    + (GFC_REAL_17) v2 * GFC_REAL_17_LITERAL(0x1.p-128);\n+}\n+#endif\n+\n \n /*\n \n@@ -443,6 +474,28 @@ random_r16 (GFC_REAL_16 *x)\n iexport(random_r16);\n \n \n+#endif\n+\n+/*  This function produces a REAL(16) value from the uniform distribution\n+    with range [0,1).  */\n+\n+#ifdef HAVE_GFC_REAL_17\n+\n+void\n+random_r17 (GFC_REAL_17 *x)\n+{\n+  GFC_UINTEGER_8 r1, r2;\n+  prng_state* rs = get_rand_state();\n+\n+  if (unlikely (!rs->init))\n+    init_rand_state (rs, false);\n+  r1 = prng_next (rs);\n+  r2 = prng_next (rs);\n+  rnumber_17 (x, r1, r2);\n+}\n+iexport(random_r17);\n+\n+\n #endif\n \n /*  This function fills a REAL(4) array with values from the uniform\n@@ -719,6 +772,77 @@ arandom_r16 (gfc_array_r16 *x)\n \n #endif\n \n+#ifdef HAVE_GFC_REAL_17\n+\n+/*  This function fills a REAL(16) array with values from the uniform\n+    distribution with range [0,1).  */\n+\n+void\n+arandom_r17 (gfc_array_r17 *x)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type stride[GFC_MAX_DIMENSIONS];\n+  index_type stride0;\n+  index_type dim;\n+  GFC_REAL_17 *dest;\n+  prng_state* rs = get_rand_state();\n+\n+  dest = x->base_addr;\n+\n+  dim = GFC_DESCRIPTOR_RANK (x);\n+\n+  for (index_type n = 0; n < dim; n++)\n+    {\n+      count[n] = 0;\n+      stride[n] = GFC_DESCRIPTOR_STRIDE(x,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(x,n);\n+      if (extent[n] <= 0)\n+        return;\n+    }\n+\n+  stride0 = stride[0];\n+\n+  if (unlikely (!rs->init))\n+    init_rand_state (rs, false);\n+\n+  while (dest)\n+    {\n+      /* random_r17 (dest);  */\n+      uint64_t r1 = prng_next (rs);\n+      uint64_t r2 = prng_next (rs);\n+      rnumber_17 (dest, r1, r2);\n+\n+      /* Advance to the next element.  */\n+      dest += stride0;\n+      count[0]++;\n+      /* Advance to the next source element.  */\n+      index_type n = 0;\n+      while (count[n] == extent[n])\n+        {\n+          /* When we get to the end of a dimension, reset it and increment\n+             the next dimension.  */\n+          count[n] = 0;\n+          /* We could precalculate these products, but this is a less\n+             frequently used path so probably not worth it.  */\n+          dest -= stride[n] * extent[n];\n+          n++;\n+          if (n == dim)\n+            {\n+              dest = NULL;\n+              break;\n+            }\n+          else\n+            {\n+              count[n]++;\n+              dest += stride[n];\n+            }\n+        }\n+    }\n+}\n+\n+#endif\n+\n \n /* Number of elements in master_state array.  */\n #define SZU64 (sizeof (master_state.s) / sizeof (uint64_t))"}, {"sha": "2fed8b25e441a127c6fa2252a6b8dd8bc5b40b5e", "filename": "libgfortran/intrinsics/trigd.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Fintrinsics%2Ftrigd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Fintrinsics%2Ftrigd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftrigd.c?ref=5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "patch": "@@ -289,3 +289,42 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef HAVE_INFINITY_KIND\n \n #endif /* HAVE_GFC_REAL_16 */\n+\n+#ifdef HAVE_GFC_REAL_17\n+\n+/* Build _gfortran_sind_r17, _gfortran_cosd_r17, and _gfortran_tand_r17  */\n+\n+#define KIND\t17\n+#define TINY\t0x1.p-16400\t/* ~= 1.28e-4937 */\n+#undef  SIND_SMALL\t\t/* not precise */\n+\n+/* Proper float128 precision.  */\n+#define COSD_SMALL  0x1.p-51\t/* ~= 4.441e-16 */\n+#define COSD30      8.66025403784438646763723170752936183e-01\n+#define PIO180H     1.74532925199433197605003442731685936e-02\n+#define PIO180L     -2.39912634365882824665106671063098954e-17\n+\n+/* libquadmath or glibc 2.32+: HAVE_*Q are never defined.  They must be available.  */\n+#define ENABLE_SIND\n+#define ENABLE_COSD\n+#define ENABLE_TAND\n+\n+#ifdef GFC_REAL_17_INFINITY\n+#define HAVE_INFINITY_KIND\n+#endif\n+\n+#include \"trigd_lib.inc\"\n+\n+#undef KIND\n+#undef TINY\n+#undef COSD_SMALL\n+#undef SIND_SMALL\n+#undef COSD30\n+#undef PIO180H\n+#undef PIO180L\n+#undef ENABLE_SIND\n+#undef ENABLE_COSD\n+#undef ENABLE_TAND\n+#undef HAVE_INFINITY_KIND\n+\n+#endif /* HAVE_GFC_REAL_17 */"}, {"sha": "dc7a5f13921381131bdb4ba73cbce9aa5d0f39bc", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db042b2b8484e28d1bf8726fa9ef69b8495ddac/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=5db042b2b8484e28d1bf8726fa9ef69b8495ddac", "patch": "@@ -324,6 +324,9 @@ typedef GFC_UINTEGER_4 gfc_char4_t;\n #   define GFC_REAL_16_INFINITY __builtin_infq ()\n #  endif\n # endif\n+# ifdef HAVE_GFC_REAL_17\n+#  define GFC_REAL_17_INFINITY __builtin_inff128 ()\n+# endif\n #endif\n #if __FLT_HAS_QUIET_NAN__\n # define GFC_REAL_4_QUIET_NAN __builtin_nanf (\"\")\n@@ -342,6 +345,9 @@ typedef GFC_UINTEGER_4 gfc_char4_t;\n #   define GFC_REAL_16_QUIET_NAN nanq (\"\")\n #  endif\n # endif\n+# ifdef HAVE_GFC_REAL_17\n+#  define GFC_REAL_17_QUIET_NAN __builtin_nanf128 (\"\")\n+# endif\n #endif\n \n typedef struct descriptor_dimension\n@@ -1966,6 +1972,8 @@ extern __float128 __coshieee128 (__float128)\n   __attribute__ ((__nothrow__, __leaf__));\n extern __float128 __cosieee128 (__float128)\n   __attribute__ ((__nothrow__, __leaf__));\n+extern __float128 __erfcieee128 (__float128)\n+  __attribute__ ((__nothrow__, __leaf__));\n extern __float128 __erfieee128 (__float128)\n   __attribute__ ((__nothrow__, __leaf__));\n extern __float128 __expieee128 (__float128)"}]}