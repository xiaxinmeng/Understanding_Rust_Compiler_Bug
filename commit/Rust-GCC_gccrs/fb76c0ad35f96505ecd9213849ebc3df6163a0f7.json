{"sha": "fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "node_id": "C_kwDOANBUbNoAKGZiNzZjMGFkMzVmOTY1MDVlY2Q5MjEzODQ5ZWJjM2RmNjE2M2EwZjc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-11T10:34:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-11T12:51:56Z"}, "message": "combine: Fix ICE with substitution of CONST_INT into PRE_DEC argument [PR104446]\n\nThe following testcase ICEs, because combine substitutes\n(insn 10 9 11 2 (set (reg/v:SI 7 sp [ a ])\n        (const_int 0 [0])) \"pr104446.c\":9:5 81 {*movsi_internal}\n     (nil))\n(insn 13 11 14 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])\n        (reg:SI 85)) \"pr104446.c\":10:3 56 {*pushsi2}\n     (expr_list:REG_DEAD (reg:SI 85)\n        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])\n            (nil))))\nforming\n(insn 13 11 14 2 (set (mem/f:SI (pre_dec:SI (const_int 0 [0])) [0  S4 A32])\n        (reg:SI 85)) \"pr104446.c\":10:3 56 {*pushsi2}\n     (expr_list:REG_DEAD (reg:SI 85)\n        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])\n            (nil))))\nwhich is invalid RTL (pre_dec's argument must be a REG).\nI know substitution creates various forms of invalid RTL and hopes that\ninvalid RTL just won't recog.\nBut unfortunately in this case we ICE before we get to recog, as\ntry_combine does:\n  if (n_auto_inc)\n    {\n      int new_n_auto_inc = 0;\n      for_each_inc_dec (newpat, count_auto_inc, &new_n_auto_inc);\n\n      if (n_auto_inc != new_n_auto_inc)\n        {\n          if (dump_file && (dump_flags & TDF_DETAILS))\n            fprintf (dump_file, \"Number of auto_inc expressions changed\\n\");\n          undo_all ();\n          return 0;\n        }\n    }\nand for_each_inc_dec under the hood will do e.g. for the PRE_DEC case:\n    case PRE_DEC:\n    case POST_DEC:\n      {\n        poly_int64 size = GET_MODE_SIZE (GET_MODE (mem));\n        rtx r1 = XEXP (x, 0);\n        rtx c = gen_int_mode (-size, GET_MODE (r1));\n        return fn (mem, x, r1, r1, c, data);\n      }\nand that code rightfully expects that the PRE_DEC operand has non-VOIDmode\n(as it needs to be a REG) - gen_int_mode for VOIDmode results in ICE.\nI think it is better not to emit the clearly invalid RTL during substitution\nlike we do for other cases, than to adding workarounds for invalid IL\ncreated by combine to rtlanal.cc and perhaps elsewhere.\nAs for the testcase, of course it is UB at runtime to modify sp that way,\nbut if such code is never reached, we must compile it, not to ICE on it.\nAnd I don't see why on other targets which use the autoinc rtxes much more\nit couldn't happen with other registers.\n\n2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/104446\n\t* combine.cc (subst): Don't substitute CONST_INTs into RTX_AUTOINC\n\toperands.\n\n\t* gcc.target/i386/pr104446.c: New test.", "tree": {"sha": "e1f827354048105f87ecf3245c37b305d2b5f513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f827354048105f87ecf3245c37b305d2b5f513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb76c0ad35f96505ecd9213849ebc3df6163a0f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f8d228aff80ede554b1735533af7eb0bd4a912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f8d228aff80ede554b1735533af7eb0bd4a912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f8d228aff80ede554b1735533af7eb0bd4a912"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "c4c5444038eb848b5c53b4f2fa6ff16def9c45fd", "filename": "gcc/combine.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb76c0ad35f96505ecd9213849ebc3df6163a0f7/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb76c0ad35f96505ecd9213849ebc3df6163a0f7/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "patch": "@@ -5534,6 +5534,12 @@ subst (rtx x, rtx from, rtx to, int in_dest, int in_cond, int unique_copy)\n \t\t  if (!x)\n \t\t    return gen_rtx_CLOBBER (VOIDmode, const0_rtx);\n \t\t}\n+\t      /* CONST_INTs shouldn't be substituted into PRE_DEC, PRE_MODIFY\n+\t\t etc. arguments, otherwise we can ICE before trying to recog\n+\t\t it.  See PR104446.  */\n+\t      else if (CONST_SCALAR_INT_P (new_rtx)\n+\t\t       && GET_RTX_CLASS (GET_CODE (x)) == RTX_AUTOINC)\n+\t\treturn gen_rtx_CLOBBER (VOIDmode, const0_rtx);\n \t      else\n \t\tSUBST (XEXP (x, i), new_rtx);\n \t    }"}, {"sha": "510cb69cfb62b893333fc86108b369106f331d79", "filename": "gcc/testsuite/gcc.target/i386/pr104446.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb76c0ad35f96505ecd9213849ebc3df6163a0f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104446.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb76c0ad35f96505ecd9213849ebc3df6163a0f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104446.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104446.c?ref=fb76c0ad35f96505ecd9213849ebc3df6163a0f7", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/104446 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mrtd\" } */\n+\n+register volatile int a __asm__(\"%esp\");\n+void foo (void *);\n+void bar (void *);\n+\n+void\n+baz (void)\n+{\n+  foo (__builtin_return_address (0));\n+  a = 0;\n+  bar (__builtin_return_address (0));\n+}"}]}