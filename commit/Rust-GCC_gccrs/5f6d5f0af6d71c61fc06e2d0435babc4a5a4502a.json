{"sha": "5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2ZDVmMGFmNmQ3MWM2MWZjMDZlMmQwNDM1YmFiYzRhNWE0NTAyYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-12-26T21:58:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-26T21:58:49Z"}, "message": "re PR libstdc++/34595 (std::copy copies the output iterator before assigning)\n\n2007-12-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/34595\n\t* include/bits/stl_algobase.h (struct __cm_assign): Remove.\n\t(struct __copy_move<true, false, _Category>,\n\tstruct __copy_move<true, false, random_access_iterator_tag>,\n\tstruct __copy_move_backward<true, false, _Category>,\n\tstruct __copy_move_backward<true, false, random_access_iterator_tag>):\n\tAdd.\n\t(struct __copy_move, struct __copy_move_backward,\n\tstruct __copy_move<false, false, random_access_iterator_tag>,\n\tstruct __copy_move_backward<false, false, random_access_iterator_tag>):\n\tAdjust.\n\t* testsuite/25_algorithms/copy/34595.C: New.\n\nFrom-SVN: r131188", "tree": {"sha": "2945204b1ef2d8252e1890c5d77161474f662035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2945204b1ef2d8252e1890c5d77161474f662035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/comments", "author": null, "committer": null, "parents": [{"sha": "3dfb41c56409dcba9febba4cec9a42f1c2b0a3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfb41c56409dcba9febba4cec9a42f1c2b0a3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfb41c56409dcba9febba4cec9a42f1c2b0a3a3"}], "stats": {"total": 177, "additions": 146, "deletions": 31}, "files": [{"sha": "28a509ef144b63cee179810cdeb2cfac65ff1604", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "patch": "@@ -1,3 +1,18 @@\n+2007-12-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/34595\n+\t* include/bits/stl_algobase.h (struct __cm_assign): Remove.\n+\t(struct __copy_move<true, false, _Category>,\n+\tstruct __copy_move<true, false, random_access_iterator_tag>,\n+\tstruct __copy_move_backward<true, false, _Category>,\n+\tstruct __copy_move_backward<true, false, random_access_iterator_tag>):\n+\tAdd.\n+\t(struct __copy_move, struct __copy_move_backward,\n+\tstruct __copy_move<false, false, random_access_iterator_tag>,\n+\tstruct __copy_move_backward<false, false, random_access_iterator_tag>):\n+\tAdjust.\n+\t* testsuite/25_algorithms/copy/34595.C: New.\n+\n 2007-12-26  Chris Fairles  <chris.fairles@gmail.com>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "8f194537fd21a32c9997e87d51e6ea489a9cc27a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 76, "deletions": 31, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "patch": "@@ -295,48 +295,61 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __it.base(); }\n     };\n \n-  // Used in __copy_move and __copy_move_backward below.\n-  template<bool _IsMove>\n-    struct __cm_assign\n-    {\n-      template<typename _IteratorL, typename _IteratorR>\n-        static void\n-        __a(_IteratorL __lhs, _IteratorR __rhs) \n-\t{ *__lhs = *__rhs; }\n-    };\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<>\n-    struct __cm_assign<true>\n-    {\n-      template<typename _IteratorL, typename _IteratorR>\n-        static void\n-        __a(_IteratorL __lhs, _IteratorR __rhs) \n-\t{ *__lhs = std::move(*__rhs); }\n-    };\n-#endif\n-\n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n   // (2) If we're using random access iterators, then write the loop as\n   // a for loop with an explicit count.\n \n-  template<bool _IsMove, bool, typename>\n+  template<bool, bool, typename>\n     struct __copy_move\n     {\n       template<typename _II, typename _OI>\n         static _OI\n         __copy_m(_II __first, _II __last, _OI __result)\n         {\n \t  for (; __first != __last; ++__result, ++__first)\n-\t    std::__cm_assign<_IsMove>::__a(__result, __first);\n+\t    *__result = *__first;\n+\t  return __result;\n+\t}\n+    };\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Category>\n+    struct __copy_move<true, false, _Category>\n+    {\n+      template<typename _II, typename _OI>\n+        static _OI\n+        __copy_m(_II __first, _II __last, _OI __result)\n+        {\n+\t  for (; __first != __last; ++__result, ++__first)\n+\t    *__result = std::move(*__first);\n+\t  return __result;\n+\t}\n+    };\n+#endif\n+\n+  template<>\n+    struct __copy_move<false, false, random_access_iterator_tag>\n+    {\n+      template<typename _II, typename _OI>\n+        static _OI\n+        __copy_m(_II __first, _II __last, _OI __result)\n+        { \n+\t  typedef typename iterator_traits<_II>::difference_type _Distance;\n+\t  for(_Distance __n = __last - __first; __n > 0; --__n)\n+\t    {\n+\t      *__result = *__first;\n+\t      ++__first;\n+\t      ++__result;\n+\t    }\n \t  return __result;\n \t}\n     };\n \n-  template<bool _IsMove, bool _IsSimple>\n-    struct __copy_move<_IsMove, _IsSimple, random_access_iterator_tag>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<>\n+    struct __copy_move<true, false, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n         static _OI\n@@ -345,13 +358,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  typedef typename iterator_traits<_II>::difference_type _Distance;\n \t  for(_Distance __n = __last - __first; __n > 0; --__n)\n \t    {\n-\t      std::__cm_assign<_IsMove>::__a(__result, __first);\n+\t      *__result = std::move(*__first);\n \t      ++__first;\n \t      ++__result;\n \t    }\n \t  return __result;\n \t}\n     };\n+#endif\n \n   template<bool _IsMove>\n     struct __copy_move<_IsMove, true, random_access_iterator_tag>\n@@ -489,33 +503,64 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)\n #endif\n \n-  template<bool _IsMove, bool, typename>\n+  template<bool, bool, typename>\n     struct __copy_move_backward\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n         {\n \t  while (__first != __last)\n-\t    std::__cm_assign<_IsMove>::__a(--__result, --__last);\n+\t    *--__result = *--__last;\n \t  return __result;\n \t}\n     };\n \n-  template<bool _IsMove, bool _IsSimple>\n-    struct __copy_move_backward<_IsMove, _IsSimple, random_access_iterator_tag>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Category>\n+    struct __copy_move_backward<true, false, _Category>\n+    {\n+      template<typename _BI1, typename _BI2>\n+        static _BI2\n+        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+        {\n+\t  while (__first != __last)\n+\t    *--__result = std::move(*--__last);\n+\t  return __result;\n+\t}\n+    };\n+#endif\n+\n+  template<>\n+    struct __copy_move_backward<false, false, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n         {\n \t  typename iterator_traits<_BI1>::difference_type __n;\n \t  for (__n = __last - __first; __n > 0; --__n)\n-\t    std::__cm_assign<_IsMove>::__a(--__result, --__last);\n+\t    *--__result = *--__last;\n \t  return __result;\n \t}\n     };\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<>\n+    struct __copy_move_backward<true, false, random_access_iterator_tag>\n+    {\n+      template<typename _BI1, typename _BI2>\n+        static _BI2\n+        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+        {\n+\t  typename iterator_traits<_BI1>::difference_type __n;\n+\t  for (__n = __last - __first; __n > 0; --__n)\n+\t    *--__result = std::move(*--__last);\n+\t  return __result;\n+\t}\n+    };\n+#endif\n+\n   template<bool _IsMove>\n     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>\n     {"}, {"sha": "85bef554dd91e57c51a6bb74e559b954f1d0b173", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/34595.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F34595.C?ref=5f6d5f0af6d71c61fc06e2d0435babc4a5a4502a", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.2.1 [lib.alg.copy] Copy.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+class Counting_output_iterator\n+: public std::iterator< std::output_iterator_tag, void, void, void, void >\n+{\n+  std::size_t c;\n+public:\n+  Counting_output_iterator() : c(0) {}\n+  Counting_output_iterator& operator++() { return *this; }\n+  Counting_output_iterator& operator*() { return *this; }\n+  \n+  template <typename T>\n+  void operator=(const T&) { ++c; }\n+  \n+  std::size_t current_counter() const { return c; }\n+};\n+\n+// libstdc++/34595\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  int t[10] = {0,};\n+  Counting_output_iterator cnt;\n+  std::size_t res = std::copy(t+0, t+5, cnt).current_counter();\n+\n+  VERIFY( res == 5 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}