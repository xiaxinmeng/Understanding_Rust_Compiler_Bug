{"sha": "72613dfaa22b438aa161bad3a92e87984148ae0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2MTNkZmFhMjJiNDM4YWExNjFiYWQzYTkyZTg3OTg0MTQ4YWUwZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-23T13:24:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-01-23T13:24:58Z"}, "message": "* i386.c (ix86_emit_restore_regs_using_mov):  Deal with large offsets.\n\nFrom-SVN: r76416", "tree": {"sha": "f67cbdcb1cbea103fe639e0b587f59e241edefb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67cbdcb1cbea103fe639e0b587f59e241edefb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72613dfaa22b438aa161bad3a92e87984148ae0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72613dfaa22b438aa161bad3a92e87984148ae0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72613dfaa22b438aa161bad3a92e87984148ae0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72613dfaa22b438aa161bad3a92e87984148ae0d/comments", "author": null, "committer": null, "parents": [{"sha": "7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "e1c07a06cd964816de0ceee04779bb4ee443281d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72613dfaa22b438aa161bad3a92e87984148ae0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72613dfaa22b438aa161bad3a92e87984148ae0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72613dfaa22b438aa161bad3a92e87984148ae0d", "patch": "@@ -1,3 +1,7 @@\n+2003-11-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_emit_restore_regs_using_mov):  Deal with large offsets.\n+\n 2004-01-23  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* doc/tm.texi: Insert some weasel words when LOAD_EXTEND_OP"}, {"sha": "0cad3f1571d4a54060b306814347f369b9b817f5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72613dfaa22b438aa161bad3a92e87984148ae0d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72613dfaa22b438aa161bad3a92e87984148ae0d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72613dfaa22b438aa161bad3a92e87984148ae0d", "patch": "@@ -808,7 +808,7 @@ static int ix86_split_to_parts (rtx, rtx *, enum machine_mode);\n static int ix86_nsaved_regs (void);\n static void ix86_emit_save_regs (void);\n static void ix86_emit_save_regs_using_mov (rtx, HOST_WIDE_INT);\n-static void ix86_emit_restore_regs_using_mov (rtx, int, int);\n+static void ix86_emit_restore_regs_using_mov (rtx, HOST_WIDE_INT, int);\n static void ix86_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void ix86_set_move_mem_attrs_1 (rtx, rtx, rtx, rtx, rtx);\n static void ix86_sched_reorder_ppro (rtx *, rtx *);\n@@ -5278,16 +5278,29 @@ ix86_expand_prologue (void)\n /* Emit code to restore saved registers using MOV insns.  First register\n    is restored from POINTER + OFFSET.  */\n static void\n-ix86_emit_restore_regs_using_mov (rtx pointer, int offset, int maybe_eh_return)\n+ix86_emit_restore_regs_using_mov (rtx pointer, HOST_WIDE_INT offset,\n+\t\t\t\t  int maybe_eh_return)\n {\n   int regno;\n+  rtx base_address = gen_rtx_MEM (Pmode, pointer);\n \n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if (ix86_save_reg (regno, maybe_eh_return))\n       {\n+\t/* Ensure that adjust_address won't be forced to produce pointer\n+\t   out of range allowed by x86-64 instruction set.  */\n+\tif (TARGET_64BIT && offset != trunc_int_for_mode (offset, SImode))\n+\t  {\n+\t    rtx r11;\n+\n+\t    r11 = gen_rtx_REG (DImode, FIRST_REX_INT_REG + 3 /* R11 */);\n+\t    emit_move_insn (r11, GEN_INT (offset));\n+\t    emit_insn (gen_adddi3 (r11, r11, pointer));\n+\t    base_address = gen_rtx_MEM (Pmode, r11);\n+\t    offset = 0;\n+\t  }\n \temit_move_insn (gen_rtx_REG (Pmode, regno),\n-\t\t\tadjust_address (gen_rtx_MEM (Pmode, pointer),\n-\t\t\t\t\tPmode, offset));\n+\t\t\tadjust_address (base_address, Pmode, offset));\n \toffset += UNITS_PER_WORD;\n       }\n }"}]}