{"sha": "3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2MmE3ZmI2ZTdkMmEwZjJlZTIwMTE4ZGUyYjBmMTZjYzFiMmY3NA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-07-28T14:57:05Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-07-28T14:57:05Z"}, "message": "tree-predcom.c (ref_at_iteration): Add parameter NITERS.\n\n\t* tree-predcom.c (ref_at_iteration): Add parameter NITERS.  Compute\n\tmemory reference to DR at (NITERS + ITERS)-th iteration of loop.\n\nFrom-SVN: r250667", "tree": {"sha": "8606d60bc15bc697fbb98d04e0af3563350943f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8606d60bc15bc697fbb98d04e0af3563350943f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74/comments", "author": null, "committer": null, "parents": [{"sha": "aa4de160ccafb70787013aaa540375aaac0056da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4de160ccafb70787013aaa540375aaac0056da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4de160ccafb70787013aaa540375aaac0056da"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "6d33678487c0bedd3960a5bef4f197683dbbb806", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74", "patch": "@@ -1,3 +1,8 @@\n+2017-07-28  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-predcom.c (ref_at_iteration): Add parameter NITERS.  Compute\n+\tmemory reference to DR at (NITERS + ITERS)-th iteration of loop.\n+\n 2017-07-28  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-predcom.c (struct chain): New field init_seq."}, {"sha": "8861f31cc55b9125a0632b726c34880891aa80a3", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=3c62a7fb6e7d2a0f2ee20118de2b0f16cc1b2f74", "patch": "@@ -1370,11 +1370,12 @@ replace_ref_with (gimple *stmt, tree new_tree, bool set, bool in_lhs)\n   gsi_insert_after (&bsi, new_stmt, GSI_NEW_STMT);\n }\n \n-/* Returns a memory reference to DR in the ITER-th iteration of\n-   the loop it was analyzed in.  Append init stmts to STMTS.  */\n+/* Returns a memory reference to DR in the (NITERS + ITER)-th iteration\n+   of the loop it was analyzed in.  Append init stmts to STMTS.  */\n \n static tree\n-ref_at_iteration (data_reference_p dr, int iter, gimple_seq *stmts)\n+ref_at_iteration (data_reference_p dr, int iter,\n+\t\t  gimple_seq *stmts, tree niters = NULL_TREE)\n {\n   tree off = DR_OFFSET (dr);\n   tree coff = DR_INIT (dr);\n@@ -1383,14 +1384,27 @@ ref_at_iteration (data_reference_p dr, int iter, gimple_seq *stmts)\n   tree ref_type = NULL_TREE;\n   tree ref_op1 = NULL_TREE;\n   tree ref_op2 = NULL_TREE;\n-  if (iter == 0)\n-    ;\n-  else if (TREE_CODE (DR_STEP (dr)) == INTEGER_CST)\n-    coff = size_binop (PLUS_EXPR, coff,\n-\t\t       size_binop (MULT_EXPR, DR_STEP (dr), ssize_int (iter)));\n-  else\n-    off = size_binop (PLUS_EXPR, off,\n-\t\t      size_binop (MULT_EXPR, DR_STEP (dr), ssize_int (iter)));\n+  tree new_offset;\n+\n+  if (iter != 0)\n+    {\n+      new_offset = size_binop (MULT_EXPR, DR_STEP (dr), ssize_int (iter));\n+      if (TREE_CODE (new_offset) == INTEGER_CST)\n+\tcoff = size_binop (PLUS_EXPR, coff, new_offset);\n+      else\n+\toff = size_binop (PLUS_EXPR, off, new_offset);\n+    }\n+\n+  if (niters != NULL_TREE)\n+    {\n+      niters = fold_convert (ssizetype, niters);\n+      new_offset = size_binop (MULT_EXPR, DR_STEP (dr), niters);\n+      if (TREE_CODE (niters) == INTEGER_CST)\n+\tcoff = size_binop (PLUS_EXPR, coff, new_offset);\n+      else\n+\toff = size_binop (PLUS_EXPR, off, new_offset);\n+    }\n+\n   /* While data-ref analysis punts on bit offsets it still handles\n      bitfield accesses at byte boundaries.  Cope with that.  Note that\n      if the bitfield object also starts at a byte-boundary we can simply"}]}