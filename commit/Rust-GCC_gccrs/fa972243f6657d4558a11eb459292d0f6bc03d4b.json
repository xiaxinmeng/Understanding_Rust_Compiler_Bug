{"sha": "fa972243f6657d4558a11eb459292d0f6bc03d4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5NzIyNDNmNjY1N2Q0NTU4YTExZWI0NTkyOTJkMGY2YmMwM2Q0Yg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-12-15T19:03:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-12-15T19:03:13Z"}, "message": "re PR libstdc++/12855 (Thread safety problems in ios_base::Init)\n\n\n2003-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/12855\n\t* include/bits/ios_base.h (Init::_S_ios_base_init): Change to\n\t_S_refcount, make atomic.\n\t* src/ios.cc: Adjust definition.\n\t* src/ios_init.cc (ios_base::Init::Init): Use __exchange_and_add,\n\tand __atomic_add.\n\t(ios_base::Init::~Init): Same.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\nFrom-SVN: r74642", "tree": {"sha": "7f2287749bdb532c7b8f07d4fdf2b69378b77add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f2287749bdb532c7b8f07d4fdf2b69378b77add"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa972243f6657d4558a11eb459292d0f6bc03d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa972243f6657d4558a11eb459292d0f6bc03d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa972243f6657d4558a11eb459292d0f6bc03d4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa972243f6657d4558a11eb459292d0f6bc03d4b/comments", "author": null, "committer": null, "parents": [{"sha": "adf269c7af5d044cbd7b71e88dea7e04461d19a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf269c7af5d044cbd7b71e88dea7e04461d19a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adf269c7af5d044cbd7b71e88dea7e04461d19a0"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "c64b3aa5f9fc9e2268e6192d2e49e6db93449b4f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa972243f6657d4558a11eb459292d0f6bc03d4b", "patch": "@@ -1,3 +1,15 @@\n+2003-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/12855\t\n+\t* include/bits/ios_base.h (Init::_S_ios_base_init): Change to\n+\t_S_refcount, make atomic.\n+\t* src/ios.cc: Adjust definition.\t\n+\t* src/ios_init.cc (ios_base::Init::Init): Use __exchange_and_add,\n+\tand __atomic_add.\n+\t(ios_base::Init::~Init): Same.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\t\n 2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get::do_get(bool&)):"}, {"sha": "e2d3fbab62ec86684cb8ceaca2df24febd7e55ab", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=fa972243f6657d4558a11eb459292d0f6bc03d4b", "patch": "@@ -493,14 +493,13 @@ namespace std\n       ~Init();\n       \n       // NB: Allows debugger applications use of the standard streams\n-      // from operator new. _S_ios_base_init must be incremented in\n-      // _S_ios_create _after_ initialization is completed.\n+      // from operator new. \n       static bool\n-      _S_initialized() { return _S_ios_base_init; }\n+      _S_initialized() { return _S_refcount > 0; }\n \n     private:\n-      static int \t_S_ios_base_init;\n-      static bool\t_S_synced_with_stdio;\n+      static _Atomic_word\t_S_refcount;\n+      static bool\t\t_S_synced_with_stdio;\n     };\n \n     // [27.4.2.2] fmtflags state functions"}, {"sha": "b36165e7497bdf93d5d5c7312e090fd95fc55ec5", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=fa972243f6657d4558a11eb459292d0f6bc03d4b", "patch": "@@ -107,7 +107,7 @@ namespace std\n \n   const int ios_base::_S_local_word_size;\n \n-  int ios_base::Init::_S_ios_base_init = 0;\n+  _Atomic_word ios_base::Init::_S_refcount;\n \n   bool ios_base::Init::_S_synced_with_stdio = true;\n "}, {"sha": "b40202553e53a4fd6795fec70df5f68068891476", "filename": "libstdc++-v3/src/ios_init.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc?ref=fa972243f6657d4558a11eb459292d0f6bc03d4b", "patch": "@@ -80,7 +80,7 @@ namespace std\n \n   ios_base::Init::Init()\n   {\n-    if (_S_ios_base_init == 0)\n+    if (__exchange_and_add(&_S_refcount, 1) == 0)\n       {\n \t// Standard streams default to synced with \"C\" operations.\n \t_S_synced_with_stdio = true;\n@@ -110,15 +110,18 @@ namespace std\n \twcin.tie(&wcout);\n \twcerr.flags(ios_base::unitbuf);\n #endif\n-\n-\t_S_ios_base_init = 1;\n+\t\n+\t// NB: Have to set refcount above one, so that standard\n+\t// streams are not re-initialized with uses of ios_base::Init\n+\t// besides <iostream> static object, ie just using <ios> with\n+\t// ios_base::Init objects.\n+\t__atomic_add(&_S_refcount, 1);\n       }\n-    ++_S_ios_base_init;\n   }\n \n   ios_base::Init::~Init()\n   {\n-    if (--_S_ios_base_init == 1)\n+    if (__exchange_and_add(&_S_refcount, -1) == 2)\n       {\n \t// Catch any exceptions thrown by basic_ostream::flush()\n \ttry"}, {"sha": "3261c07be9c300c6accfe3fb09d0b7e7ae882ef0", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=fa972243f6657d4558a11eb459292d0f6bc03d4b", "patch": "@@ -41,5 +41,5 @@ void test01()\n   io1 = io2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 746 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 745 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "5f8871fa5c9a78254eb6be4b5ab7545d51670181", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa972243f6657d4558a11eb459292d0f6bc03d4b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=fa972243f6657d4558a11eb459292d0f6bc03d4b", "patch": "@@ -41,5 +41,5 @@ void test02()\n   test_base io2 = io1; \n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 743 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 742 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}