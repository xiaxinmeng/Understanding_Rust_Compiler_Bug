{"sha": "861de21eb294a9d1d2602d4239edfc4a5239a9c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxZGUyMWViMjk0YTlkMWQyNjAyZDQyMzllZGZjNGE1MjM5YTljOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-12-16T05:16:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-12-16T05:16:46Z"}, "message": "PR libstdc++/21772 part 1\n\n2009-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/21772 part 1\n\t* include/ext/throw_allocator.h: Rework.\n\t(__gnu_cxx::throw_allocator): To...\n\t(__gnu_cxx::throw_allocator_limit): ...this.\n\t(__gnu_cxx::throw_allocator_random): ...and this.\n\t(throw_value_base, throw_value_limit, throw_value_random): Add.\n\t(condition_base, random_condition, limit_condition): Add.\n\t(forced_exception_error): To...\n\t(forced_error): ...this.\n\t* testsuite/ext/throw_value: New.\n\t* testsuite/ext/throw_value/cons.cc: New.\n\t* testsuite/ext/throw_allocator/deallocate_global.cc: Adjust for\n\tthrow_allocator, forced_exception_error changes.\n\t* testsuite/ext/throw_allocator/check_delete.cc: Same.\n\t* testsuite/ext/throw_allocator/check_allocate_max_size.cc: Same.\n\t* testsuite/ext/throw_allocator/check_deallocate_null.cc: Same.\n\t* testsuite/ext/throw_allocator/explicit_instantiation.cc: Same.\n\t* testsuite/ext/throw_allocator/check_new.cc: Same.\n\t* testsuite/ext/throw_allocator/variadic_construct.cc: Same.\n\t* testsuite/ext/throw_allocator/deallocate_local.cc: Same.\n\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Same.\n\t* testsuite/23_containers/list/modifiers/insert/25288.h: Same.\n\t* testsuite/util/regression/common_type.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/\n\tcontainer_rand_regression_test.tcc: Same.\n\t* testsuite/util/regression/rand/assoc/\n\tcontainer_rand_regression_test.h: Same.\n\t* testsuite/util/regression/rand/assoc/\n\tcontainer_rand_regression_test.tcc: Same.\n\t* testsuite/util/regression/basic_type.hpp: Same.\n\n\t* testsuite/ext/forced_exception_error/cons_virtual_derivation.cc: To...\n\t* testsuite/ext/forced_error/cons_virtual_derivation.cc: ...this, same.\n\nFrom-SVN: r155283", "tree": {"sha": "f1aa6ebcc1aeff3911a0c56d9fdaffa8e4cc3963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1aa6ebcc1aeff3911a0c56d9fdaffa8e4cc3963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861de21eb294a9d1d2602d4239edfc4a5239a9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861de21eb294a9d1d2602d4239edfc4a5239a9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861de21eb294a9d1d2602d4239edfc4a5239a9c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861de21eb294a9d1d2602d4239edfc4a5239a9c9/comments", "author": null, "committer": null, "parents": [{"sha": "c7d9f803bb64218c45b7e85a9a1e0e143c025205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d9f803bb64218c45b7e85a9a1e0e143c025205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d9f803bb64218c45b7e85a9a1e0e143c025205"}], "stats": {"total": 691, "additions": 534, "deletions": 157}, "files": [{"sha": "21a6978dba611baede5c56a8947a07a11b119a07", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 76, "deletions": 40, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -1,3 +1,39 @@\n+2009-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/21772 part 1\n+\t* include/ext/throw_allocator.h: Rework.\n+\t(__gnu_cxx::throw_allocator): To...\n+\t(__gnu_cxx::throw_allocator_limit): ...this.\n+\t(__gnu_cxx::throw_allocator_random): ...and this.\n+\t(throw_value_base, throw_value_limit, throw_value_random): Add.\n+\t(condition_base, random_condition, limit_condition): Add.\n+\t(forced_exception_error): To...\n+\t(forced_error): ...this.\n+\t* testsuite/ext/throw_value: New.\n+\t* testsuite/ext/throw_value/cons.cc: New.\n+\t* testsuite/ext/throw_allocator/deallocate_global.cc: Adjust for\n+\tthrow_allocator, forced_exception_error changes.\n+\t* testsuite/ext/throw_allocator/check_delete.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_allocate_max_size.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_deallocate_null.cc: Same.\n+\t* testsuite/ext/throw_allocator/explicit_instantiation.cc: Same.\n+\t* testsuite/ext/throw_allocator/check_new.cc: Same.\n+\t* testsuite/ext/throw_allocator/variadic_construct.cc: Same.\n+\t* testsuite/ext/throw_allocator/deallocate_local.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.cc: Same.\n+\t* testsuite/23_containers/list/modifiers/insert/25288.h: Same.\n+\t* testsuite/util/regression/common_type.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\tcontainer_rand_regression_test.tcc: Same.\n+\t* testsuite/util/regression/rand/assoc/\n+\tcontainer_rand_regression_test.h: Same.\n+\t* testsuite/util/regression/rand/assoc/\n+\tcontainer_rand_regression_test.tcc: Same.\n+\t* testsuite/util/regression/basic_type.hpp: Same.\n+\n+\t* testsuite/ext/forced_exception_error/cons_virtual_derivation.cc: To...\n+\t* testsuite/ext/forced_error/cons_virtual_derivation.cc: ...this, same.\n+\n 2009-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/42381\n@@ -165,7 +201,7 @@\n 2009-12-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert:\n-        2009-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t2009-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/42261\n \t* include/bits/basic_string.h (_S_construct_aux(_Integer, _Integer,\n@@ -295,21 +331,21 @@\n \n 2009-11-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n-        * include/tr1_impl/functional (function): Add rvalue support and\n-        tweak doxygen markup.\n-        * testsuite/20_util/function/assign/move.cc: New.\n-        * testsuite/20_util/function/cons/move.cc: New.\n-        * testsuite/20_util/function/invoke/move_only.cc: New.\n-        * testsuite/20_util/function/cmp/cmp_neg.cc: New.\n-        * testsuite/20_util/function/1.cc: Copy from testsuite/tr1/.\n-        * testsuite/20_util/function/2.cc: Likewise.\n-        * testsuite/20_util/function/3.cc: Likewise.\n-        * testsuite/20_util/function/4.cc: Likewise.\n-        * testsuite/20_util/function/5.cc: Likewise.\n-        * testsuite/20_util/function/6.cc: Likewise.\n-        * testsuite/20_util/function/7.cc: Likewise.\n-        * testsuite/20_util/function/8.cc: Likewise.\n-        * testsuite/20_util/function/9.cc: Likewise.\n+\t* include/tr1_impl/functional (function): Add rvalue support and\n+\ttweak doxygen markup.\n+\t* testsuite/20_util/function/assign/move.cc: New.\n+\t* testsuite/20_util/function/cons/move.cc: New.\n+\t* testsuite/20_util/function/invoke/move_only.cc: New.\n+\t* testsuite/20_util/function/cmp/cmp_neg.cc: New.\n+\t* testsuite/20_util/function/1.cc: Copy from testsuite/tr1/.\n+\t* testsuite/20_util/function/2.cc: Likewise.\n+\t* testsuite/20_util/function/3.cc: Likewise.\n+\t* testsuite/20_util/function/4.cc: Likewise.\n+\t* testsuite/20_util/function/5.cc: Likewise.\n+\t* testsuite/20_util/function/6.cc: Likewise.\n+\t* testsuite/20_util/function/7.cc: Likewise.\n+\t* testsuite/20_util/function/8.cc: Likewise.\n+\t* testsuite/20_util/function/9.cc: Likewise.\n \n 2009-11-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n@@ -374,10 +410,10 @@\n \n 2009-11-19  Johannes Singler  <singler@kit.edu>\n \n-        * include/parallel/partition.h (__parallel_partition): Correctly\n-        initialize chunk size.\n-        (__parallel_nth_element): Respect nth_element_minimal_n.  Use\n-        sequential nth_element as base case, instead of sequential sort.\n+\t* include/parallel/partition.h (__parallel_partition): Correctly\n+\tinitialize chunk size.\n+\t(__parallel_nth_element): Respect nth_element_minimal_n.  Use\n+\tsequential nth_element as base case, instead of sequential sort.\n \n 2009-11-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -848,26 +884,26 @@\n \n 009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR libstdc++/41773\n-        Revert:\n-        2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n-\n-        * include/bits/basic_string.h (_S_construct(const _CharT*, size_type,\n-        const _Alloc&)): New, declare.\n-        (_S_construct(_CharT*, _CharT*, const _Alloc&),\n-        _S_construct(const _CharT*, const _CharT*, const _Alloc&),\n-        _S_construct(iterator, iterator, const _Alloc&),\n-        _S_construct(const_iterator, const_iterator, const _Alloc&)): New,\n-        forward to the latter.\n-        * include/bits/basic_string.tcc (_S_construct(const _CharT*,\n-        size_type, const _Alloc&)): Define.\n-        (basic_string(const basic_string&, size_type, size_type),\n-        basic_string(const basic_string&, size_type, size_type,\n-        const _Alloc&), basic_string(const _CharT*, size_type,\n-        const _Alloc&), basic_string(const _CharT*, const _Alloc&),\n-        basic_string(initializer_list<>, const _Alloc&)): Call the latter.\n-        * config/abi/pre/gnu.ver: Remove recently added exports.\n-        * src/string-inst.cc: Remove instantiations.\n+\tPR libstdc++/41773\n+\tRevert:\n+\t2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (_S_construct(const _CharT*, size_type,\n+\tconst _Alloc&)): New, declare.\n+\t(_S_construct(_CharT*, _CharT*, const _Alloc&),\n+\t_S_construct(const _CharT*, const _CharT*, const _Alloc&),\n+\t_S_construct(iterator, iterator, const _Alloc&),\n+\t_S_construct(const_iterator, const_iterator, const _Alloc&)): New,\n+\tforward to the latter.\n+\t* include/bits/basic_string.tcc (_S_construct(const _CharT*,\n+\tsize_type, const _Alloc&)): Define.\n+\t(basic_string(const basic_string&, size_type, size_type),\n+\tbasic_string(const basic_string&, size_type, size_type,\n+\tconst _Alloc&), basic_string(const _CharT*, size_type,\n+\tconst _Alloc&), basic_string(const _CharT*, const _Alloc&),\n+\tbasic_string(initializer_list<>, const _Alloc&)): Call the latter.\n+\t* config/abi/pre/gnu.ver: Remove recently added exports.\n+\t* src/string-inst.cc: Remove instantiations.\n \n 2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "fd939b2e168e9aef49404f713492711f7d94a9e0", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 373, "deletions": 76, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -36,9 +36,11 @@\n /** @file ext/throw_allocator.h\n  *  This file is a GNU extension to the Standard C++ Library.\n  *\n- *  Contains an exception-throwing allocator, useful for testing\n- *  exception safety. In addition, allocation addresses are stored and\n- *  sanity checked.\n+ *  Contains two exception-generating types (throw_value, throw_allocator)\n+ *  intended to be used as value and allocator types while testing\n+ *  exception safety in templatized containers and algorithms. The\n+ *  allocator has additional log and debug features. The exception\n+ *  generated is of type forced_exception_error.\n  */\n \n #ifndef _THROW_ALLOCATOR_H\n@@ -64,35 +66,38 @@\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n-   *  @brief Thown by throw_allocator.\n+   *  @brief Thown by exception safety machinery.\n    *  @ingroup exceptions\n    */\n-  struct forced_exception_error : public std::exception\n+  struct forced_error : public std::exception\n   { };\n \n-  // Substitute for concurrence_error object in the case of -fno-exceptions.\n+  // Substitute for forced_error object when -fno-exceptions.\n   inline void\n-  __throw_forced_exception_error()\n+  __throw_forced_error()\n   {\n #if __EXCEPTIONS\n-    throw forced_exception_error();\n+    throw forced_error();\n #else\n     __builtin_abort();\n #endif\n   }\n \n-  // Base class for checking address and label information about\n-  // allocations. Create a std::map between the allocated address\n-  // (void*) and a datum for annotations, which are a pair of numbers\n-  // corresponding to label and allocated size.\n+\n+  /**\n+   *  @brief Base class for checking address and label information\n+   *  about allocations. Create a std::map between the allocated\n+   *  address (void*) and a datum for annotations, which are a pair of\n+   *  numbers corresponding to label and allocated size.\n+   */\n   struct annotate_base\n   {\n     annotate_base()\n     {\n       label();\n       map();\n     }\n-    \n+\n     static void\n     set_label(size_t l)\n     { label() = l; }\n@@ -106,15 +111,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     {\n       if (p == NULL)\n \t{\n-\t  std::string error(\"throw_allocator_base::insert null insert!\\n\");\n+\t  std::string error(\"annotate_base::insert null insert!\\n\");\n \t  log_to_string(error, make_entry(p, size));\n \t  std::__throw_logic_error(error.c_str());\n \t}\n \n       const_iterator found = map().find(p);\n       if (found != map().end())\n \t{\n-\t  std::string error(\"throw_allocator_base::insert double insert!\\n\");\n+\t  std::string error(\"annotate_base::insert double insert!\\n\");\n \t  log_to_string(error, make_entry(p, size));\n \t  log_to_string(error, *found);\n \t  std::__throw_logic_error(error.c_str());\n@@ -130,7 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       map().erase(p);\n     }\n \n-    // See if a particular address and size has been allocated.\n+    // See if a particular address and allocation size has been saved.\n     inline void\n     check_allocated(void* p, size_t size)\n     {\n@@ -142,7 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  log_to_string(error, make_entry(p, size));\n \t  std::__throw_logic_error(error.c_str());\n \t}\n-      \n+\n       if (found->second.second != size)\n \t{\n \t  std::string error(\"annotate_base::check_allocated by value \"\n@@ -166,7 +171,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    log_to_string(found, *beg);\n \t  ++beg;\n \t}\n-      \n+\n       if (!found.empty())\n \t{\n \t  std::string error(\"annotate_base::check_allocated by label\\n\");\n@@ -213,15 +218,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     static size_t&\n     label()\n     {\n-      static size_t ll;\n-      return ll;\n+      static size_t _S_label(std::numeric_limits<size_t>::max());\n+      return _S_label;\n     }\n \n     static map_type&\n     map()\n     {\n-      static map_type mp;\n-      return mp;\n+      static map_type _S_map;\n+      return _S_map;\n     }\n   };\n \n@@ -237,47 +242,133 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     return os << error;\n   }\n \n-  /// Base class for probability control and throw.\n-  struct probability_base\n+\n+  /**\n+   *  @brief Base struct for condition policy.\n+   *\n+   * Requires a public member function with the signature\n+   * void throw_conditionally()\n+   */\n+  struct condition_base\n+  {\n+    virtual ~condition_base() { };\n+  };\n+\n+\n+  /**\n+   *  @brief Base class for incremental control and throw.\n+   */\n+  struct limit_condition : public condition_base\n   {\n-    // Scope-level probability adjustor objects: set probability for\n-    // throw at the beginning of a scope block, and restores to\n-    // previous probability when object is destroyed on exiting the\n-    // block.\n+    // Scope-level adjustor objects: set limit for throw at the\n+    // beginning of a scope block, and restores to previous limit when\n+    // object is destroyed on exiting the block.\n     struct adjustor_base\n     {\n     private:\n-      const double _M_prob;\n+      const size_t _M_orig;\n \n     public:\n-      adjustor_base() : _M_prob(get_probability()) { }\n+      adjustor_base() : _M_orig(limit()) { }\n+\n+      virtual\n+      ~adjustor_base() { set_limit(_M_orig); }\n+    };\n+\n+    /// Never enter the condition.\n+    struct never_adjustor : public adjustor_base\n+    {\n+      never_adjustor() { set_limit(std::numeric_limits<size_t>::max()); }\n+    };\n+\n+    /// Always enter the condition.\n+    struct always_adjustor : public adjustor_base\n+    {\n+      always_adjustor() { set_limit(count()); }\n+    };\n+\n+    /// Enter the nth condition.\n+    struct limit_adjustor : public adjustor_base\n+    {\n+      limit_adjustor(const size_t __l) { set_limit(__l); }\n+    };\n+\n+    // Increment _S_count every time called.\n+    // If _S_count matches the limit count, throw.\n+    static void\n+    throw_conditionally()\n+    {\n+      if (count() == limit())\n+\t__throw_forced_error();\n+      ++count();\n+    }\n+\n+    static size_t&\n+    count()\n+    {\n+      static size_t _S_count(0);\n+      return _S_count;\n+    }\n+\n+    static size_t&\n+    limit()\n+    {\n+      static size_t _S_limit(std::numeric_limits<size_t>::max());\n+      return _S_limit;\n+    }\n+\n+    // Zero the throw counter, set limit to argument.\n+    static void\n+    set_limit(const size_t __l)\n+    {\n+      limit() = __l;\n+      count() = 0;\n+    }\n+  };\n+\n+\n+  /**\n+   *  @brief Base class for random probability control and throw.\n+   */\n+  struct random_condition : public condition_base\n+  {\n+    // Scope-level adjustor objects: set probability for throw at the\n+    // beginning of a scope block, and restores to previous\n+    // probability when object is destroyed on exiting the block.\n+    struct adjustor_base\n+    {\n+    private:\n+      const double _M_orig;\n+\n+    public:\n+      adjustor_base() : _M_orig(probability()) { }\n \n       virtual ~adjustor_base()\n-      { set_probability(_M_prob); }\n+      { set_probability(_M_orig); }\n     };\n \n-    // Group condition.\n+    /// Group condition.\n     struct group_adjustor : public adjustor_base\n     {\n       group_adjustor(size_t size)\n-      { set_probability(1 - std::pow(double(1 - get_probability()),\n+      { set_probability(1 - std::pow(double(1 - probability()),\n \t\t\t\t     double(0.5 / (size + 1))));\n       }\n     };\n \n-    // Never enter the condition.\n+    /// Never enter the condition.\n     struct never_adjustor : public adjustor_base\n     {\n       never_adjustor() { set_probability(0); }\n     };\n \n-    // Always enter the condition.\n+    /// Always enter the condition.\n     struct always_adjustor : public adjustor_base\n     {\n       always_adjustor() { set_probability(1); }\n     };\n \n-    probability_base()\n+    random_condition()\n     {\n       probability();\n       engine();\n@@ -287,15 +378,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     set_probability(double __p)\n     { probability() = __p; }\n \n-    static double&\n-    get_probability()\n-    { return probability(); }\n-\n-    void\n+    static void\n     throw_conditionally()\n     {\n-      if (generate() < get_probability())\n-\t__throw_forced_exception_error();\n+      if (generate() < probability())\n+\t__throw_forced_error();\n     }\n \n     void\n@@ -311,7 +398,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     typedef std::tr1::mt19937 \t\t\t\tengine_type;\n #endif\n \n-    double\n+    static double\n     generate()\n     {\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -327,7 +414,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       double random = generator();\n       if (random < distribution.min() || random > distribution.max())\n \t{\n-\t  std::string __s(\"throw_allocator::throw_conditionally\");\n+\t  std::string __s(\"random_condition::generate\");\n \t  __s += \"\\n\";\n \t  __s += \"random number generated is: \";\n \t  char buf[40];\n@@ -342,54 +429,186 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     static double&\n     probability()\n     {\n-      static double __p;\n-      return __p;\n+      static double _S_p;\n+      return _S_p;\n     }\n \n     static engine_type&\n     engine()\n     {\n-      static engine_type __e;\n-      return __e;\n+      static engine_type _S_e;\n+      return _S_e;\n     }\n   };\n \n+\n   /**\n-   *  @brief Allocator class with logging and exception control.\n+   *  @brief Class with exception generation control. Intended to be\n+   *  used as a value_type in templatized code.\n+   *\n+   *  Note: Destructor not allowed to throw.\n+   */\n+  template<typename _Cond>\n+    struct throw_value_base : public _Cond\n+    {\n+      typedef _Cond  \t\t\t\tcondition_type;\n+\n+      using condition_type::throw_conditionally;\n+\n+      std::size_t\t\t\t       \t_M_i;\n+\n+      throw_value_base() : _M_i(0)\n+      { throw_conditionally(); }\n+\n+      throw_value_base(const throw_value_base& __v)\n+      : _M_i(__v._M_i)\n+      { throw_conditionally(); }\n+\n+      explicit throw_value_base(const std::size_t __i)\n+\t: _M_i(__i)\n+      { throw_conditionally(); }\n+\n+      throw_value_base&\n+      operator=(const throw_value_base& __v)\n+      {\n+\tthrow_conditionally();\n+\t_M_i = __v._M_i;\n+\treturn *this;\n+      }\n+\n+      throw_value_base&\n+      operator++()\n+      {\n+\tthrow_conditionally();\n+\t++_M_i;\n+\treturn *this;\n+      }\n+    };\n+\n+  template<typename _Cond>\n+    inline void\n+    swap(throw_value_base<_Cond>& __a, throw_value_base<_Cond>& __b)\n+    {\n+      typedef throw_value_base<_Cond> throw_value;\n+      throw_value::throw_conditionally();\n+      throw_value orig(__a);\n+      __a = __b;\n+      __b = orig;\n+    }\n+\n+  // General instantiable types requirements.\n+  template<typename _Cond>\n+    inline bool\n+    operator==(const throw_value_base<_Cond>& __a,\n+\t       const throw_value_base<_Cond>& __b)\n+    {\n+      typedef throw_value_base<_Cond> throw_value;\n+      throw_value::throw_conditionally();\n+      bool __ret = __a._M_i == __b._M_i;\n+      return __ret;\n+    }\n+\n+  template<typename _Cond>\n+    inline bool\n+    operator<(const throw_value_base<_Cond>& __a,\n+\t      const throw_value_base<_Cond>& __b)\n+    {\n+      typedef throw_value_base<_Cond> throw_value;\n+      throw_value::throw_conditionally();\n+      bool __ret = __a._M_i < __b._M_i;\n+      return __ret;\n+    }\n+\n+  // Numeric algorithms instantiable types requirements.\n+  template<typename _Cond>\n+    inline throw_value_base<_Cond>\n+    operator+(const throw_value_base<_Cond>& __a,\n+\t      const throw_value_base<_Cond>& __b)\n+    {\n+      typedef throw_value_base<_Cond> throw_value;\n+      throw_value::throw_conditionally();\n+      throw_value __ret(__a._M_i + __b._M_i);\n+      return __ret;\n+    }\n+\n+  template<typename _Cond>\n+    inline throw_value_base<_Cond>\n+    operator-(const throw_value_base<_Cond>& __a,\n+\t      const throw_value_base<_Cond>& __b)\n+    {\n+      typedef throw_value_base<_Cond> throw_value;\n+      throw_value::throw_conditionally();\n+      throw_value __ret(__a._M_i - __b._M_i);\n+      return __ret;\n+    }\n+\n+  template<typename _Cond>\n+    inline throw_value_base<_Cond>\n+    operator*(const throw_value_base<_Cond>& __a,\n+\t      const throw_value_base<_Cond>& __b)\n+    {\n+      typedef throw_value_base<_Cond> throw_value;\n+      throw_value::throw_conditionally();\n+      throw_value __ret(__a._M_i * __b._M_i);\n+      return __ret;\n+    }\n+\n+  /// Type throwing via limit condition.\n+  struct throw_value_limit : public throw_value_base<limit_condition>\n+  {\n+    typedef throw_value_base<limit_condition> base_type;\n+\n+    throw_value_limit() { }\n+\n+    throw_value_limit(const throw_value_limit& __other)\n+    : base_type(__other._M_i) { }\n+\n+    explicit throw_value_limit(const std::size_t __i) : base_type(__i) { }\n+  };\n+\n+  /// Type throwing via random condition.\n+  struct throw_value_random : public throw_value_base<random_condition>\n+  {\n+    typedef throw_value_base<random_condition> base_type;\n+\n+    throw_value_random() { }\n+\n+    throw_value_random(const throw_value_random& __other)\n+    : base_type(__other._M_i) { }\n+\n+\n+    explicit throw_value_random(const std::size_t __i) : base_type(__i) { }\n+  };\n+\n+\n+  /**\n+   *  @brief Allocator class with logging and exception generation control.\n+   * Intended to be used as an allocator_type in templatized code.\n    *  @ingroup allocators\n+   *\n+   *  Note: Deallocate not allowed to throw.\n    */\n-  template<typename T>\n-    class throw_allocator\n-    : public probability_base, public annotate_base\n+  template<typename _Tp, typename _Cond>\n+    class throw_allocator_base\n+    : public annotate_base, public _Cond\n     {\n     public:\n       typedef size_t \t\t\t\tsize_type;\n       typedef ptrdiff_t \t\t\tdifference_type;\n-      typedef T \t\t\t\tvalue_type;\n+      typedef _Tp \t\t\t\tvalue_type;\n       typedef value_type* \t\t\tpointer;\n       typedef const value_type* \t\tconst_pointer;\n       typedef value_type& \t\t\treference;\n       typedef const value_type& \t\tconst_reference;\n \n     private:\n-      std::allocator<value_type> \t\t_M_allocator;\n+      typedef _Cond\t\t\t\tcondition_type;\n \n-    public:\n-      template<typename U>\n-      struct rebind\n-      {\n-\ttypedef throw_allocator<U> other;\n-      };\n-\n-      throw_allocator() throw() { }\n-\n-      throw_allocator(const throw_allocator&) throw() { }\n-\n-      template<typename U>\n-\tthrow_allocator(const throw_allocator<U>&) throw() { }\n+      std::allocator<value_type> \t\t_M_allocator;\n \n-      ~throw_allocator() throw() { }\n+      using condition_type::throw_conditionally;\n \n+    public:\n       size_type\n       max_size() const throw()\n       { return _M_allocator.max_size(); }\n@@ -407,7 +626,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n \n       void\n-      construct(pointer __p, const T& val)\n+      construct(pointer __p, const value_type& val)\n       { return _M_allocator.construct(__p, val); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -435,19 +654,97 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tannotate_base::check_allocated(__p, __t);\n       }\n \n-      using annotate_base::check_allocated;\n-    };\n+      void\n+      check_allocated(size_type __n)\n+      { annotate_base::check_allocated(__n); }\n+  };\n \n-  template<typename T>\n+  template<typename _Tp, typename _Cond>\n     inline bool\n-    operator==(const throw_allocator<T>&, const throw_allocator<T>&)\n+    operator==(const throw_allocator_base<_Tp, _Cond>&,\n+\t       const throw_allocator_base<_Tp, _Cond>&)\n     { return true; }\n \n-  template<typename T>\n+  template<typename _Tp, typename _Cond>\n     inline bool\n-    operator!=(const throw_allocator<T>&, const throw_allocator<T>&)\n+    operator!=(const throw_allocator_base<_Tp, _Cond>&,\n+\t       const throw_allocator_base<_Tp, _Cond>&)\n     { return false; }\n \n+  /// Allocator throwing via limit condition.\n+  template<typename _Tp>\n+    struct throw_allocator_limit\n+    : public throw_allocator_base<_Tp, limit_condition>\n+    {\n+      template<typename _Tp1>\n+\tstruct rebind\n+\t{ typedef throw_allocator_limit<_Tp1> other; };\n+\n+      throw_allocator_limit() throw() { }\n+\n+      throw_allocator_limit(const throw_allocator_limit&) throw() { }\n+\n+      template<typename _Tp1>\n+\tthrow_allocator_limit(const throw_allocator_limit<_Tp1>&) throw() { }\n+\n+      ~throw_allocator_limit() throw() { }\n+    };\n+\n+  /// Allocator throwing via random condition.\n+  template<typename _Tp>\n+    struct throw_allocator_random\n+    : public throw_allocator_base<_Tp, random_condition>\n+    {\n+      template<typename _Tp1>\n+\tstruct rebind\n+\t{ typedef throw_allocator_random<_Tp1> other; };\n+\n+      throw_allocator_random() throw() { }\n+\n+      throw_allocator_random(const throw_allocator_random&) throw() { }\n+\n+      template<typename _Tp1>\n+\tthrow_allocator_random(const throw_allocator_random<_Tp1>&) throw() { }\n+\n+      ~throw_allocator_random() throw() { }\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+# include <bits/functional_hash.h>\n+\n+namespace std\n+{\n+  /// Explicit specialization of std::hash for __gnu_cxx::throw_value_limit.\n+  template<>\n+    struct hash<__gnu_cxx::throw_value_limit>\n+    : public std::unary_function<__gnu_cxx::throw_value_limit, size_t>\n+    {\n+      size_t\n+      operator()(__gnu_cxx::throw_value_limit __val) const\n+      {\n+\tstd::hash<std::size_t> h;\n+\tsize_t __result = h(__val._M_i);\n+\treturn __result;\n+      }\n+    };\n+\n+  /// Explicit specialization of std::hash for __gnu_cxx::throw_value_limit.\n+  template<>\n+    struct hash<__gnu_cxx::throw_value_random>\n+    : public std::unary_function<__gnu_cxx::throw_value_random, size_t>\n+    {\n+      size_t\n+      operator()(__gnu_cxx::throw_value_random __val) const\n+      {\n+\tstd::hash<std::size_t> h;\n+\tsize_t __result = h(__val._M_i);\n+\treturn __result;\n+      }\n+    };\n+} // end namespace std\n+#endif\n+\n #endif"}, {"sha": "eb286e0f54dffdea854554d281acac8d57ad8a5d", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -23,7 +23,7 @@\n int main()\n {\n   typedef int value_type;\n-  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n   typedef std::list<value_type, allocator_type> list_type;\n \n   insert1<list_type>();"}, {"sha": "aebbe0ba537cd1067b82c599496e0b776209b825", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/25288.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2F25288.h?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -47,7 +47,7 @@ void insert1()\n \t    list1.insert(list1.begin(), 10, 99);\n \t    VERIFY( false );\n \t  }\n-\tcatch (__gnu_cxx::forced_exception_error&)\n+\tcatch (__gnu_cxx::forced_error&)\n \t  {\n \t    VERIFY( true );\n \t  }\n@@ -74,7 +74,7 @@ void insert1()\n \t    list2.insert(list2.begin(), data, data + 10);\n \t    VERIFY( false );\n \t  }\n-\tcatch (__gnu_cxx::forced_exception_error&)\n+\tcatch (__gnu_cxx::forced_error&)\n \t  {\n \t    VERIFY( true );\n \t  }"}, {"sha": "f505a796ed025be0c06fb6c04d2cde8ee1d16c14", "filename": "libstdc++-v3/testsuite/ext/forced_error/cons_virtual_derivation.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fforced_error%2Fcons_virtual_derivation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fforced_error%2Fcons_virtual_derivation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fforced_error%2Fcons_virtual_derivation.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -24,7 +24,7 @@\n \n int main()\n {\n-  typedef __gnu_cxx::forced_exception_error test_type;\n+  typedef __gnu_cxx::forced_error test_type;\n   __gnu_test::diamond_derivation<test_type, true>::test();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/ext/forced_exception_error/cons_virtual_derivation.cc"}, {"sha": "b4d099671e24d80025669882107732bdcfe6da2f", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_allocate_max_size.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_allocate_max_size.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -24,7 +24,7 @@\n int main()\n {\n   typedef int value_type;\n-  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n   __gnu_test::check_allocate_max_size<allocator_type>();\n   return 0;\n }"}, {"sha": "3f9d37ab12de9eee16638ed88e1e6439752622d5", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_deallocate_null.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_deallocate_null.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -24,7 +24,7 @@\n int main()\n { \n   typedef int value_type;\n-  typedef __gnu_cxx::throw_allocator<value_type> allocator_type;\n+  typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n   \n   try { __gnu_test::check_deallocate_null<allocator_type>(); }\n   catch (std::logic_error&)"}, {"sha": "181a1ebc78ec62eb19ef42a81f757c37f887756c", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_delete.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_delete.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -24,7 +24,7 @@\n \n int main()\n { \n-  typedef __gnu_cxx::throw_allocator<unsigned int> allocator_type;\n+  typedef __gnu_cxx::throw_allocator_random<unsigned int> allocator_type;\n   __gnu_test::check_delete<allocator_type, true>(); \n   return 0;\n }"}, {"sha": "4338471a02a6ca1479917703eb1818287fa1c571", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/check_new.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fcheck_new.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -24,7 +24,7 @@\n \n int main()\n { \n-  typedef __gnu_cxx::throw_allocator<unsigned int> allocator_type;\n+  typedef __gnu_cxx::throw_allocator_random<unsigned int> allocator_type;\n   __gnu_test::check_new<allocator_type, true>(); \n   return 0;\n }"}, {"sha": "65ef6dbb6613463b0e8a480ab7743fa56ad93817", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/deallocate_global.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_global.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -25,7 +25,7 @@\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::throw_allocator<char_t> allocator_t;\n+typedef __gnu_cxx::throw_allocator_random<char_t> allocator_t;\n typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n string_t s(\"bayou bend\");"}, {"sha": "4f00928c69b151bf5190345d2681060060c0f8cb", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/deallocate_local.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fdeallocate_local.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -24,7 +24,7 @@\n \n typedef char char_t;\n typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::throw_allocator<char_t> allocator_t;\n+typedef __gnu_cxx::throw_allocator_random<char_t> allocator_t;\n typedef std::basic_string<char_t, traits_t, allocator_t> string_t;  \n \n int main()"}, {"sha": "c2600446ff22597c5315283ff6675e18c799ab91", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/explicit_instantiation.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fexplicit_instantiation.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -21,4 +21,5 @@\n #include <cstdlib>\n #include <ext/throw_allocator.h>\n \n-template class __gnu_cxx::throw_allocator<int>;\n+template class __gnu_cxx::throw_allocator_random<int>;\n+template class __gnu_cxx::throw_allocator_limit<int>;"}, {"sha": "fd1ee8df499edd7e515b759e61ad356862191a8e", "filename": "libstdc++-v3/testsuite/ext/throw_allocator/variadic_construct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_allocator%2Fvariadic_construct.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -29,7 +29,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n   typedef std::pair<int, char> pair_type;\n-  __gnu_cxx::throw_allocator<pair_type> alloc1;\n+  __gnu_cxx::throw_allocator_random<pair_type> alloc1;\n \n   pair_type* ptp1 = alloc1.allocate(1);\n   alloc1.construct(ptp1, 3, 'a');"}, {"sha": "fa3f3f71ca020670201c71c8abcfa334be97674c", "filename": "libstdc++-v3/testsuite/ext/throw_value/cons.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_value%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_value%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fthrow_value%2Fcons.cc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <ext/throw_allocator.h>\n+\n+void foo1()\n+{ \n+  typedef __gnu_cxx::throw_value_limit value_type;\n+  value_type v1;\n+  value_type v2(v2);\n+  value_type v3(value_type());\n+}\n+\n+bool foo2()\n+{ \n+  typedef __gnu_cxx::throw_value_limit value_type;\n+  bool b = std::is_convertible<value_type, value_type>::value;\n+  return b;\n+}\n+\n+int main()\n+{\n+  foo1();\n+  foo2();\n+  return 0;\n+}"}, {"sha": "9fe6ef24d413e3dd00d6f768598e966a0c79a60a", "filename": "libstdc++-v3/testsuite/util/regression/basic_type.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -46,7 +46,7 @@ namespace test\n {\n #define PB_DS_BASE_C_DEC \\\n   std::basic_string<char, std::char_traits<char>, \\\n-\t\t    __gnu_cxx::throw_allocator<char> >\n+\t\t    __gnu_cxx::throw_allocator_random<char> >\n \n   struct basic_type : public PB_DS_BASE_C_DEC\n   {"}, {"sha": "37705bc2d7d479788c8de825ab23718dc5a2a769", "filename": "libstdc++-v3/testsuite/util/regression/common_type.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fcommon_type.hpp?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -46,7 +46,7 @@ namespace __gnu_pbds\n {\n namespace test\n {\n-  typedef __gnu_cxx::throw_allocator<basic_type> alloc_type;\n+  typedef __gnu_cxx::throw_allocator_random<basic_type> alloc_type;\n \n   struct hash\n   {"}, {"sha": "ca4433212169e102a2bba91781a60229b991ace9", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/container_rand_regression_test.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.h?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -80,7 +80,7 @@ namespace detail\n     typedef typename test_traits::native_type \t\tnative_type;\n     typedef twister_rand_gen \t\t\t\tgen;\n     typedef __gnu_pbds::container_traits<Cntnr> \tcontainer_traits;\n-    typedef __gnu_cxx::throw_allocator<char> \t\talloc_t;\n+    typedef __gnu_cxx::throw_allocator_random<char>    \talloc_t;\n \n     enum op\n       {"}, {"sha": "43cdb9f2b62e7836d9a91f389facaee60a52d139", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/container_rand_regression_test.tcc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.tcc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -66,7 +66,7 @@ default_constructor()\n     {\n       m_p_c = new Cntnr;\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -107,7 +107,7 @@ copy_constructor()\n       p_c = new Cntnr(*m_p_c);\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -134,7 +134,7 @@ assignment_operator()\n       * p_c =* m_p_c;\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -210,7 +210,7 @@ it_constructor_imp(__gnu_pbds::cc_hash_tag)\n         };\n       std::swap(p_c, m_p_c);\n     }\n-  catch (__gnu_cxx::forced_exception_error&)\n+  catch (__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -293,7 +293,7 @@ it_constructor_imp(__gnu_pbds::gp_hash_tag)\n         };\n       std::swap(p_c, m_p_c);\n     }\n-  catch (__gnu_cxx::forced_exception_error&)\n+  catch (__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -329,7 +329,7 @@ it_constructor_imp(__gnu_pbds::tree_tag)\n         };\n       std::swap(p_c, m_p_c);\n     }\n-  catch (__gnu_cxx::forced_exception_error&)\n+  catch (__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -354,7 +354,7 @@ it_constructor_imp(__gnu_pbds::list_update_tag)\n       p_c = new Cntnr(m_p_c->begin(), m_p_c->end());\n       std::swap(p_c, m_p_c);\n     }\n-  catch (__gnu_cxx::forced_exception_error&)\n+  catch (__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -392,7 +392,7 @@ it_constructor_imp(__gnu_pbds::pat_trie_tag)\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch (__gnu_cxx::forced_exception_error&)\n+  catch (__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -1088,7 +1088,7 @@ insert()\n \t}\n       m_native_c.insert(test_traits::native_value(v));\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -1139,7 +1139,7 @@ subscript_imp(__gnu_pbds::detail::false_type)\n       m_native_c[test_traits::native_value(v).first] =\n \ttest_traits::native_value(v).second;\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -1164,7 +1164,7 @@ subscript_imp(__gnu_pbds::detail::true_type)\n       (*m_p_c)[v] = __gnu_pbds::null_mapped_type();\n       m_native_c.insert(test_traits::native_value(v));\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -1213,7 +1213,7 @@ erase()\n       PB_DS_THROW_IF_FAILED(m_p_c->find(k) == m_p_c->end(), \"\", \n \t\t\t    m_p_c, &m_native_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n \n@@ -1251,7 +1251,7 @@ erase_if()\n       PB_DS_THROW_IF_FAILED(ersd == native_ersd,\n \t\t\t    ersd << \" \" << native_ersd, m_p_c, &m_native_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n       PB_DS_THROW_IF_FAILED(container_traits::erase_can_throw, \n@@ -1329,7 +1329,7 @@ erase_it_imp(__gnu_pbds::detail::true_type)\n       if (range_guarantee)\n \tPB_DS_THROW_IF_FAILED(next_ers_it == next_it, \"\", m_p_c, &m_native_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n       PB_DS_THROW_IF_FAILED(container_traits::erase_can_throw, container_traits::erase_can_throw, m_p_c, &m_native_c);\n@@ -1392,7 +1392,7 @@ erase_rev_it_imp(__gnu_pbds::detail::true_type)\n       if (native_it != m_native_c.end())\n \tm_native_c.erase(native_it);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;      \n       PB_DS_THROW_IF_FAILED(container_traits::erase_can_throw, \n@@ -1763,7 +1763,7 @@ split_join_imp(__gnu_pbds::detail::true_type)\n       PB_DS_THROW_IF_FAILED(rhs.empty(), rhs.size(), m_p_c, &m_native_c);\n       m_p_c->swap(lhs);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n       PB_DS_THROW_IF_FAILED(container_traits::split_join_can_throw, "}, {"sha": "f964911facb1f01a4e44d8f2a66d4a85fa352866", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/container_rand_regression_test.tcc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fcontainer_rand_regression_test.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861de21eb294a9d1d2602d4239edfc4a5239a9c9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fcontainer_rand_regression_test.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fcontainer_rand_regression_test.tcc?ref=861de21eb294a9d1d2602d4239edfc4a5239a9c9", "patch": "@@ -66,7 +66,7 @@ default_constructor()\n     {\n       m_p_c = new Cntnr;\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -110,7 +110,7 @@ copy_constructor()\n       p_c = new Cntnr(*m_p_c);\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -139,7 +139,7 @@ assignment_operator()\n       *p_c = *m_p_c;\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -180,7 +180,7 @@ it_constructor()\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n     }\n@@ -433,7 +433,7 @@ push()\n         _GLIBCXX_THROW_IF(sz != m_p_c->size() - 1, sz, m_p_c, &m_native_c);\n         m_native_c.push(test_traits::native_value(v));\n       }\n-    catch(__gnu_cxx::forced_exception_error& )\n+    catch(__gnu_cxx::forced_error&)\n       {\n         done = false;\n       }\n@@ -475,7 +475,7 @@ modify()\n \t  m_native_c.modify(native_v, new_native_v);\n \t}\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n       _GLIBCXX_THROW_IF(true, \"\", m_p_c, &m_native_c);\n@@ -517,7 +517,7 @@ pop()\n \t  m_native_c.pop();\n         }\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;\n       _GLIBCXX_THROW_IF(true, \"\", m_p_c, &m_native_c);\n@@ -560,7 +560,7 @@ erase_if()\n       _GLIBCXX_THROW_IF(ersd != native_ersd, ersd << \" \" << native_ersd,\n \t\t\tm_p_c, &m_native_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;      \n       _GLIBCXX_THROW_IF(true, \"\", m_p_c, &m_native_c);\n@@ -592,7 +592,7 @@ erase_it()\n \t  m_p_c->erase(it);\n \t}\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;      \n       _GLIBCXX_THROW_IF(true, \"\", m_p_c, &m_native_c);\n@@ -715,7 +715,7 @@ split_join()\n       _GLIBCXX_THROW_IF(rhs.size() != 0, rhs.size(), m_p_c, &m_native_c);\n       _GLIBCXX_THROW_IF(!rhs.empty(), rhs.size(), m_p_c, &m_native_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error&)\n+  catch(__gnu_cxx::forced_error&)\n     {\n       done = false;      \n       const bool b = __gnu_pbds::container_traits<cntnr>::split_join_can_throw;"}]}