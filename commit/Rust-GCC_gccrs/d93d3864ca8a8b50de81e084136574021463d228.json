{"sha": "d93d3864ca8a8b50de81e084136574021463d228", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzZDM4NjRjYThhOGI1MGRlODFlMDg0MTM2NTc0MDIxNDYzZDIyOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:18:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:18:20Z"}, "message": "[57/77] Use scalar_int_mode in expand_expr_addr_expr\n\nThis patch rewrites the condition:\n\n  if (tmode != address_mode && tmode != pointer_mode)\n    tmode = address_mode;\n\nto the equivalent:\n\n  tmode == pointer_mode ? pointer_mode : address_mode\n\nThe latter has the advantage that the result is naturally\na scalar_int_mode; a later mechanical patch makes it one.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (expand_expr_addr_expr): Add a new_tmode local variable\n\tthat is always either address_mode or pointer_mode.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251509", "tree": {"sha": "5748870db71e821da0effe7ffd9bba46b412170c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5748870db71e821da0effe7ffd9bba46b412170c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d93d3864ca8a8b50de81e084136574021463d228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93d3864ca8a8b50de81e084136574021463d228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93d3864ca8a8b50de81e084136574021463d228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93d3864ca8a8b50de81e084136574021463d228/comments", "author": null, "committer": null, "parents": [{"sha": "8a92a3f3841992f9440236861a20c178f01f7c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a92a3f3841992f9440236861a20c178f01f7c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a92a3f3841992f9440236861a20c178f01f7c21"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "51f6f374546fac22cb63a5e99fc1da68a19019b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93d3864ca8a8b50de81e084136574021463d228/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93d3864ca8a8b50de81e084136574021463d228/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d93d3864ca8a8b50de81e084136574021463d228", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (expand_expr_addr_expr): Add a new_tmode local variable\n+\tthat is always either address_mode or pointer_mode.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "481ad6439565e93b7408387ecae91f09359d3e45", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93d3864ca8a8b50de81e084136574021463d228/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93d3864ca8a8b50de81e084136574021463d228/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d93d3864ca8a8b50de81e084136574021463d228", "patch": "@@ -7910,20 +7910,21 @@ expand_expr_addr_expr (tree exp, rtx target, machine_mode tmode,\n   /* We can get called with some Weird Things if the user does silliness\n      like \"(short) &a\".  In that case, convert_memory_address won't do\n      the right thing, so ignore the given target mode.  */\n-  if (tmode != address_mode && tmode != pointer_mode)\n-    tmode = address_mode;\n+  machine_mode new_tmode = (tmode == pointer_mode\n+\t\t\t    ? pointer_mode\n+\t\t\t    : address_mode);\n \n   result = expand_expr_addr_expr_1 (TREE_OPERAND (exp, 0), target,\n-\t\t\t\t    tmode, modifier, as);\n+\t\t\t\t    new_tmode, modifier, as);\n \n   /* Despite expand_expr claims concerning ignoring TMODE when not\n      strictly convenient, stuff breaks if we don't honor it.  Note\n      that combined with the above, we only do this for pointer modes.  */\n   rmode = GET_MODE (result);\n   if (rmode == VOIDmode)\n-    rmode = tmode;\n-  if (rmode != tmode)\n-    result = convert_memory_address_addr_space (tmode, result, as);\n+    rmode = new_tmode;\n+  if (rmode != new_tmode)\n+    result = convert_memory_address_addr_space (new_tmode, result, as);\n \n   return result;\n }"}]}