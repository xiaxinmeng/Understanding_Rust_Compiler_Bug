{"sha": "bebc2c610a138303843eb6de56ce9e842885686a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViYzJjNjEwYTEzODMwMzg0M2ViNmRlNTZjZTllODQyODg1Njg2YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-05-25T11:16:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-05-25T11:16:11Z"}, "message": "catch11.C: New test.\n\n\t* g++.old-deja/g++.eh/catch11.C: New test.\n\t* g++.old-deja/g++.eh/catch12.C: New test.\n\nFrom-SVN: r34164", "tree": {"sha": "054f4e4682614499778b86e67198562599d2d32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/054f4e4682614499778b86e67198562599d2d32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bebc2c610a138303843eb6de56ce9e842885686a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebc2c610a138303843eb6de56ce9e842885686a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebc2c610a138303843eb6de56ce9e842885686a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebc2c610a138303843eb6de56ce9e842885686a/comments", "author": null, "committer": null, "parents": [{"sha": "e2e11048ae4f1436fd315193d89f49c25c0a0aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e11048ae4f1436fd315193d89f49c25c0a0aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e11048ae4f1436fd315193d89f49c25c0a0aea"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "ccdc8ddfd58fcf2d40ca3d62b90b8223094e8373", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebc2c610a138303843eb6de56ce9e842885686a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebc2c610a138303843eb6de56ce9e842885686a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bebc2c610a138303843eb6de56ce9e842885686a", "patch": "@@ -1,3 +1,8 @@\n+2000-05-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.eh/catch11.C: New test.\n+\t* g++.old-deja/g++.eh/catch12.C: New test.\n+\n 2000-05-24  Nick Clifton  <nickc@cygnus.com>\n \n \t* gcc.c-torture/execute/20000523-1.c: New test."}, {"sha": "298dd039824908db5b651ee51c7918c45612cd67", "filename": "gcc/testsuite/g++.old-deja/g++.eh/catch11.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebc2c610a138303843eb6de56ce9e842885686a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebc2c610a138303843eb6de56ce9e842885686a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch11.C?ref=bebc2c610a138303843eb6de56ce9e842885686a", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 May 2000 <nathan@codesourcery.com>\n+\n+// we should be able to catch a base a virtual, provided it is accessible by at\n+// least one public path\n+// -- public, << private, == virtual\n+// E<<B==A\n+// +--C==A\n+// +<<D==A\n+\n+struct A {};\n+struct B : virtual A {};\n+struct C : virtual A {};\n+struct D : virtual A {};\n+struct E : private B, public C, private D {};\n+\n+extern \"C\" void abort ();\n+\n+void fne (E *e)\n+{\n+  throw e;\n+}\n+\n+void check(E *e)\n+{\n+  int caught;\n+  \n+  caught = 0;\n+  try { fne(e); }\n+  catch(A *p) { caught = 1; if (p != e) abort();}\n+  catch(...) { abort(); }\n+  if (!caught) abort();\n+\n+  caught = 0;\n+  try { fne(e); }\n+  catch(B *p) { abort ();}\n+  catch(...) { caught = 1; }\n+  if (!caught) abort();\n+\n+  caught = 0;\n+  try { fne(e); }\n+  catch(C *p) { caught = 1; if (p != e) abort();}\n+  catch(...) { abort(); }\n+  if (!caught) abort();\n+\n+  caught = 0;\n+  try { fne(e); }\n+  catch(D *p) { abort ();}\n+  catch(...) { caught = 1; }\n+  if (!caught) abort();\n+\n+  return;\n+}\n+\n+int main ()\n+{\n+  E e;\n+  \n+  check (&e);\n+  check ((E *)0);\n+\n+  return 0;\n+}"}, {"sha": "b174019fe89df857e4f1aab4342d07d5413ca9ef", "filename": "gcc/testsuite/g++.old-deja/g++.eh/catch12.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebc2c610a138303843eb6de56ce9e842885686a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebc2c610a138303843eb6de56ce9e842885686a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatch12.C?ref=bebc2c610a138303843eb6de56ce9e842885686a", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 May 2000 <nathan@codesourcery.com>\n+\n+// we should be able to catch a base a virtual, provided it is accessible by at\n+// least one public path\n+// -- public, << private, == virtual\n+// E--B<<==A\n+// +--C--==A\n+// +--D<<==A\n+\n+struct A {};\n+struct B : private virtual A {};\n+struct C : virtual A {};\n+struct D : private virtual A {};\n+struct E : public B, public C, public D {};\n+\n+extern \"C\" void abort ();\n+\n+void fne (E *e)\n+{\n+  throw e;\n+}\n+\n+void check(E *e)\n+{\n+  int caught;\n+  \n+  caught = 0;\n+  try { fne(e); }\n+  catch(A *p) { caught = 1; if (p != e) abort();}\n+  catch(...) { abort(); }\n+  if (!caught) abort();\n+\n+  caught = 0;\n+  try { fne(e); }\n+  catch(B *p) { caught = 1; if (p != e) abort();}\n+  catch(...) { abort (); }\n+  if (!caught) abort();\n+\n+  caught = 0;\n+  try { fne(e); }\n+  catch(C *p) { caught = 1; if (p != e) abort();}\n+  catch(...) { abort(); }\n+  if (!caught) abort();\n+\n+  caught = 0;\n+  try { fne(e); }\n+  catch(D *p) { caught = 1; if (p != e) abort ();}\n+  catch(...) { abort (); }\n+  if (!caught) abort();\n+\n+  return;\n+}\n+\n+int main ()\n+{\n+  E e;\n+  \n+  check (&e);\n+  check ((E *)0);\n+\n+  return 0;\n+}"}]}