{"sha": "5ae6cd0d1b33941dc142292062ff565cd99e4504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlNmNkMGQxYjMzOTQxZGMxNDIyOTIwNjJmZjU2NWNkOTllNDUwNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-18T20:43:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-18T20:43:13Z"}, "message": "re PR target/11184 ([ia64 hpux] ICE on __builtin_apply building libobjc)\n\n\tPR target/11184\n\t* builtins.c (expand_builtin_apply): Use convert_memory_address\n\tbefore returning the value.\n\n\t* alias.c (find_base_value): Simplify use of\n\tconvert_memory_address.\n\t(find_base_term): Likewise.\n\t* builtins.c (expand_builtin_stejmp_setup): Likewise.\n\t(expand_builtin_longjmp): Likewise.\n\t(expand_builtin_prefetch): Likewise.\n\t(get_memory_rtx): Likewise.\n\t(expand_builtin_return): Likewise.\n\t(expand_builtin_memcpy): Likewise.\n\t(expand_builtin_strncpy): Likewise.\n\t(expand_builtin_memset): Likewise.\n\t(expand_builtin_va_arg): Likewise.\n\t(expand_builtin_va_copy): Likewise.\n\t(expand_builtin_alloca): Likewise.\n\t* calls.c (expand_call): Likewise.\n\t* except.c (expand_builtin_extract_return_addr): Likewise.\n\t(expand_builtin_eh_return): Likewise.\n\t* explow.c (convert_memory_address): Define even when\n\tPOINTER_EXTEND_UNSIGNED is not defined.  Do nothing if the address\n\tis already in the right mode.\n\t* explow.c (memory_address): Simplify use of convert_memory_address.\n\t(probe_stack_range): Likewise.\n\t* expmed.c (make_tree): Likewise.\n\t* expr.c (emit_block_move_in_libcall): Likewise.\n\t(expand_assignment): Likewise.\n\t(expand_expr): Likewise.\n\t* function.c (assign_parms): Likewise.\n\t(expand_function_end): Likewise.\n\t* integrate.c (copy_rtx_and_substitute): Likewise.\n\t* stmt.c (expand_computed_goto): Likewise.\n\n\tPR target/11184\n\t* gcc.dg/builtin-apply1.c: New test.\n\nFrom-SVN: r71539", "tree": {"sha": "dc06eda173c4ba3b692dac9d2c7c0e70f0eeba75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc06eda173c4ba3b692dac9d2c7c0e70f0eeba75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae6cd0d1b33941dc142292062ff565cd99e4504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae6cd0d1b33941dc142292062ff565cd99e4504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae6cd0d1b33941dc142292062ff565cd99e4504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae6cd0d1b33941dc142292062ff565cd99e4504/comments", "author": null, "committer": null, "parents": [{"sha": "bdf1f1c16d069eb1b1509cbef8fa1316d4349ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf1f1c16d069eb1b1509cbef8fa1316d4349ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf1f1c16d069eb1b1509cbef8fa1316d4349ba7"}], "stats": {"total": 248, "additions": 102, "deletions": 146}, "files": [{"sha": "2634cbbcedd56539a111413be9e64da209a44481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -1,3 +1,40 @@\n+2003-09-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR target/11184\n+\t* builtins.c (expand_builtin_apply): Use convert_memory_address\n+\tbefore returning the value.\n+\t\n+\t* alias.c (find_base_value): Simplify use of\n+\tconvert_memory_address.\n+\t(find_base_term): Likewise.\n+\t* builtins.c (expand_builtin_stejmp_setup): Likewise.\n+\t(expand_builtin_longjmp): Likewise.\n+\t(expand_builtin_prefetch): Likewise.\n+\t(get_memory_rtx): Likewise.\n+\t(expand_builtin_return): Likewise.\n+\t(expand_builtin_memcpy): Likewise.\n+\t(expand_builtin_strncpy): Likewise.\n+\t(expand_builtin_memset): Likewise.\n+\t(expand_builtin_va_arg): Likewise.\n+\t(expand_builtin_va_copy): Likewise.\n+\t(expand_builtin_alloca): Likewise.\n+\t* calls.c (expand_call): Likewise.\n+\t* except.c (expand_builtin_extract_return_addr): Likewise.\n+\t(expand_builtin_eh_return): Likewise.\n+\t* explow.c (convert_memory_address): Define even when\n+\tPOINTER_EXTEND_UNSIGNED is not defined.  Do nothing if the address\n+\tis already in the right mode.\n+\t* explow.c (memory_address): Simplify use of convert_memory_address.\n+\t(probe_stack_range): Likewise.\n+\t* expmed.c (make_tree): Likewise.\n+\t* expr.c (emit_block_move_in_libcall): Likewise.\n+\t(expand_assignment): Likewise.\n+\t(expand_expr): Likewise.\n+\t* function.c (assign_parms): Likewise.\n+\t(expand_function_end): Likewise.\n+\t* integrate.c (copy_rtx_and_substitute): Likewise.\n+\t* stmt.c (expand_computed_goto): Likewise.\n+\n 2003-09-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_unary_operation): Only transform"}, {"sha": "19ac3f786556570a6703cdf1f227251e59c47255", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -888,10 +888,8 @@ find_base_value (rtx src)\n       {\n \trtx temp = find_base_value (XEXP (src, 0));\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\tif (temp != 0 && CONSTANT_P (temp) && GET_MODE (temp) != Pmode)\n+\tif (temp != 0 && CONSTANT_P (temp))\n \t  temp = convert_memory_address (Pmode, temp);\n-#endif\n \n \treturn temp;\n       }\n@@ -1307,10 +1305,8 @@ find_base_term (rtx x)\n       {\n \trtx temp = find_base_term (XEXP (x, 0));\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\tif (temp != 0 && CONSTANT_P (temp) && GET_MODE (temp) != Pmode)\n+\tif (temp != 0 && CONSTANT_P (temp))\n \t  temp = convert_memory_address (Pmode, temp);\n-#endif\n \n \treturn temp;\n       }"}, {"sha": "5de1ac35a5adff833bcfdaad4ca46456a1291089", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 73, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -477,10 +477,7 @@ expand_builtin_setjmp_setup (rtx buf_addr, rtx receiver_label)\n   if (setjmp_alias_set == -1)\n     setjmp_alias_set = new_alias_set ();\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (buf_addr) != Pmode)\n-    buf_addr = convert_memory_address (Pmode, buf_addr);\n-#endif\n+  buf_addr = convert_memory_address (Pmode, buf_addr);\n \n   buf_addr = force_reg (Pmode, force_operand (buf_addr, NULL_RTX));\n \n@@ -661,10 +658,7 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n   if (setjmp_alias_set == -1)\n     setjmp_alias_set = new_alias_set ();\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (buf_addr) != Pmode)\n-    buf_addr = convert_memory_address (Pmode, buf_addr);\n-#endif\n+  buf_addr = convert_memory_address (Pmode, buf_addr);\n \n   buf_addr = force_reg (Pmode, buf_addr);\n \n@@ -807,10 +801,7 @@ expand_builtin_prefetch (tree arglist)\n \t      insn_data[(int) CODE_FOR_prefetch].operand[0].mode))\n \t  || (GET_MODE (op0) != Pmode))\n \t{\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (op0) != Pmode)\n-\t    op0 = convert_memory_address (Pmode, op0);\n-#endif\n+\t  op0 = convert_memory_address (Pmode, op0);\n \t  op0 = force_reg (Pmode, op0);\n \t}\n       emit_insn (gen_prefetch (op0, op1, op2));\n@@ -833,10 +824,7 @@ get_memory_rtx (tree exp)\n   rtx addr = expand_expr (exp, NULL_RTX, ptr_mode, EXPAND_SUM);\n   rtx mem;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (addr) != Pmode)\n-    addr = convert_memory_address (Pmode, addr);\n-#endif\n+  addr = convert_memory_address (Pmode, addr);\n \n   mem = gen_rtx_MEM (BLKmode, memory_address (BLKmode, addr));\n \n@@ -1193,10 +1181,7 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   rtx call_fusage = 0;\n   rtx struct_value = targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 0);\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (arguments) != Pmode)\n-    arguments = convert_memory_address (Pmode, arguments);\n-#endif\n+  arguments = convert_memory_address (Pmode, arguments);\n \n   /* Create a block where the return registers can be saved.  */\n   result = assign_stack_local (BLKmode, apply_result_size (), -1);\n@@ -1334,7 +1319,8 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   OK_DEFER_POP;\n \n   /* Return the address of the result block.  */\n-  return copy_addr_to_reg (XEXP (result, 0));\n+  result = copy_addr_to_reg (XEXP (result, 0));\n+  return convert_memory_address (ptr_mode, result);\n }\n \n /* Perform an untyped return.  */\n@@ -1347,10 +1333,7 @@ expand_builtin_return (rtx result)\n   rtx reg;\n   rtx call_fusage = 0;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (result) != Pmode)\n-    result = convert_memory_address (Pmode, result);\n-#endif\n+  result = convert_memory_address (Pmode, result);\n \n   apply_result_size ();\n   result = gen_rtx_MEM (BLKmode, result);\n@@ -2521,10 +2504,7 @@ expand_builtin_memcpy (tree arglist, rtx target, enum machine_mode mode)\n \t\t\t\t      builtin_memcpy_read_str,\n \t\t\t\t      (void *) src_str, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_mem) != ptr_mode)\n-\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n-#endif\n+\t  dest_mem = convert_memory_address (ptr_mode, dest_mem);\n \t  return dest_mem;\n \t}\n \n@@ -2538,10 +2518,7 @@ expand_builtin_memcpy (tree arglist, rtx target, enum machine_mode mode)\n       if (dest_addr == 0)\n \t{\n \t  dest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_addr) != ptr_mode)\n-\t    dest_addr = convert_memory_address (ptr_mode, dest_addr);\n-#endif\n+\t  dest_addr = convert_memory_address (ptr_mode, dest_addr);\n \t}\n       return dest_addr;\n     }\n@@ -2620,10 +2597,7 @@ expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n \t\t\t\t      builtin_memcpy_read_str,\n \t\t\t\t      (void *) src_str, dest_align, endp);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_mem) != ptr_mode)\n-\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n-#endif\n+\t  dest_mem = convert_memory_address (ptr_mode, dest_mem);\n \t  return dest_mem;\n \t}\n \n@@ -2638,10 +2612,7 @@ expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n \t  dest_mem = move_by_pieces (dest_mem, src_mem, INTVAL (len_rtx),\n \t\t\t\t     MIN (dest_align, src_align), endp);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_mem) != ptr_mode)\n-\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n-#endif\n+\t  dest_mem = convert_memory_address (ptr_mode, dest_mem);\n \t  return dest_mem;\n \t}\n \n@@ -2877,10 +2848,7 @@ expand_builtin_strncpy (tree arglist, rtx target, enum machine_mode mode)\n \t\t\t   builtin_strncpy_read_str,\n \t\t\t   (void *) p, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_mem) != ptr_mode)\n-\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n-#endif\n+\t  dest_mem = convert_memory_address (ptr_mode, dest_mem);\n \t  return dest_mem;\n \t}\n \n@@ -2998,10 +2966,7 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n \t\t\t   builtin_memset_gen_str,\n \t\t\t   val_rtx, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_mem) != ptr_mode)\n-\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n-#endif\n+\t  dest_mem = convert_memory_address (ptr_mode, dest_mem);\n \t  return dest_mem;\n \t}\n \n@@ -3022,10 +2987,7 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n \t\t\t   builtin_memset_read_str,\n \t\t\t   &c, dest_align, 0);\n \t  dest_mem = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_mem) != ptr_mode)\n-\t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n-#endif\n+\t  dest_mem = convert_memory_address (ptr_mode, dest_mem);\n \t  return dest_mem;\n \t}\n \n@@ -3038,10 +3000,7 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n       if (dest_addr == 0)\n \t{\n \t  dest_addr = force_operand (XEXP (dest_mem, 0), NULL_RTX);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (dest_addr) != ptr_mode)\n-\t    dest_addr = convert_memory_address (ptr_mode, dest_addr);\n-#endif\n+\t  dest_addr = convert_memory_address (ptr_mode, dest_addr);\n \t}\n \n       return dest_addr;\n@@ -4039,10 +3998,7 @@ expand_builtin_va_arg (tree valist, tree type)\n #endif\n     }\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (addr) != Pmode)\n-    addr = convert_memory_address (Pmode, addr);\n-#endif\n+  addr = convert_memory_address (Pmode, addr);\n \n   result = gen_rtx_MEM (TYPE_MODE (type), addr);\n   set_mem_alias_set (result, get_varargs_alias_set ());\n@@ -4101,13 +4057,8 @@ expand_builtin_va_copy (tree arglist)\n       size = expand_expr (TYPE_SIZE_UNIT (va_list_type_node), NULL_RTX,\n \t\t\t  VOIDmode, EXPAND_NORMAL);\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-      if (GET_MODE (dstb) != Pmode)\n-\tdstb = convert_memory_address (Pmode, dstb);\n-\n-      if (GET_MODE (srcb) != Pmode)\n-\tsrcb = convert_memory_address (Pmode, srcb);\n-#endif\n+      dstb = convert_memory_address (Pmode, dstb);\n+      srcb = convert_memory_address (Pmode, srcb);\n \n       /* \"Dereference\" to BLKmode memories.  */\n       dstb = gen_rtx_MEM (BLKmode, dstb);\n@@ -4190,11 +4141,7 @@ expand_builtin_alloca (tree arglist, rtx target)\n \n   /* Allocate the desired space.  */\n   result = allocate_dynamic_stack_space (op0, target, BITS_PER_UNIT);\n-\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (result) != ptr_mode)\n-    result = convert_memory_address (ptr_mode, result);\n-#endif\n+  result = convert_memory_address (ptr_mode, result);\n \n   return result;\n }"}, {"sha": "2c952ab1b68ab3dd130ded443a36700b015f5786", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -3026,11 +3026,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t structure value.  */\n       if (pass != 0 && structure_value_addr && ! structure_value_addr_parm)\n \t{\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (structure_value_addr) != Pmode)\n-\t    structure_value_addr = convert_memory_address\n-\t\t\t\t\t(Pmode, structure_value_addr);\n-#endif\n+\t  structure_value_addr \n+\t    = convert_memory_address (Pmode, structure_value_addr);\n \t  emit_move_insn (struct_value,\n \t\t\t  force_reg (Pmode,\n \t\t\t\t     force_operand (structure_value_addr,"}, {"sha": "6745dd1bd5ec9d4934afaa90af232975aa6fa1df", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -2974,10 +2974,7 @@ expand_builtin_frob_return_addr (tree addr_tree)\n {\n   rtx addr = expand_expr (addr_tree, NULL_RTX, ptr_mode, 0);\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (addr) != Pmode)\n-    addr = convert_memory_address (Pmode, addr);\n-#endif\n+  addr = convert_memory_address (Pmode, addr);\n \n #ifdef RETURN_ADDR_OFFSET\n   addr = force_reg (Pmode, addr);\n@@ -2998,21 +2995,15 @@ expand_builtin_eh_return (tree stackadj_tree ATTRIBUTE_UNUSED,\n \n #ifdef EH_RETURN_STACKADJ_RTX\n   tmp = expand_expr (stackadj_tree, cfun->eh->ehr_stackadj, VOIDmode, 0);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (tmp) != Pmode)\n-    tmp = convert_memory_address (Pmode, tmp);\n-#endif\n+  tmp = convert_memory_address (Pmode, tmp);\n   if (!cfun->eh->ehr_stackadj)\n     cfun->eh->ehr_stackadj = copy_to_reg (tmp);\n   else if (tmp != cfun->eh->ehr_stackadj)\n     emit_move_insn (cfun->eh->ehr_stackadj, tmp);\n #endif\n \n   tmp = expand_expr (handler_tree, cfun->eh->ehr_handler, VOIDmode, 0);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (tmp) != Pmode)\n-    tmp = convert_memory_address (Pmode, tmp);\n-#endif\n+  tmp = convert_memory_address (Pmode, tmp);\n   if (!cfun->eh->ehr_handler)\n     cfun->eh->ehr_handler = copy_to_reg (tmp);\n   else if (tmp != cfun->eh->ehr_handler)"}, {"sha": "56f9a3ff04a9412515000cf35380990a08173796", "filename": "gcc/explow.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -303,21 +303,29 @@ break_out_memory_refs (rtx x)\n   return x;\n }\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\n /* Given X, a memory address in ptr_mode, convert it to an address\n    in Pmode, or vice versa (TO_MODE says which way).  We take advantage of\n    the fact that pointers are not allowed to overflow by commuting arithmetic\n    operations over conversions so that address arithmetic insns can be\n    used.  */\n \n rtx\n-convert_memory_address (enum machine_mode to_mode, rtx x)\n+convert_memory_address (enum machine_mode to_mode ATTRIBUTE_UNUSED, \n+\t\t\trtx x)\n {\n-  enum machine_mode from_mode = to_mode == ptr_mode ? Pmode : ptr_mode;\n+#ifndef POINTERS_EXTEND_UNSIGNED\n+  return x;\n+#else /* defined(POINTERS_EXTEND_UNSIGNED) */\n+  enum machine_mode from_mode;\n   rtx temp;\n   enum rtx_code code;\n \n+  /* If X already has the right mode, just return it.  */\n+  if (GET_MODE (x) == to_mode)\n+    return x;\n+\n+  from_mode = to_mode == ptr_mode ? Pmode : ptr_mode;\n+\n   /* Here we handle some special cases.  If none of them apply, fall through\n      to the default case.  */\n   switch (GET_CODE (x))\n@@ -381,8 +389,8 @@ convert_memory_address (enum machine_mode to_mode, rtx x)\n \n   return convert_modes (to_mode, from_mode,\n \t\t\tx, POINTERS_EXTEND_UNSIGNED);\n+#endif /* defined(POINTERS_EXTEND_UNSIGNED) */\n }\n-#endif\n \n /* Given a memory address or facsimile X, construct a new address,\n    currently equivalent, that is stable: future stores won't change it.\n@@ -434,10 +442,7 @@ memory_address (enum machine_mode mode, rtx x)\n   if (GET_CODE (x) == ADDRESSOF)\n     return x;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (x) != Pmode)\n-    x = convert_memory_address (Pmode, x);\n-#endif\n+  x = convert_memory_address (Pmode, x);\n \n   /* By passing constant addresses thru registers\n      we get a chance to cse them.  */\n@@ -1419,11 +1424,7 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n \t\t\t\t\t         stack_pointer_rtx,\n \t\t\t\t\t         plus_constant (size, first)));\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-      if (GET_MODE (addr) != ptr_mode)\n-\taddr = convert_memory_address (ptr_mode, addr);\n-#endif\n-\n+      addr = convert_memory_address (ptr_mode, addr);\n       emit_library_call (stack_check_libfunc, LCT_NORMAL, VOIDmode, 1, addr,\n \t\t\t ptr_mode);\n     }"}, {"sha": "6acc8956e267ecafebb081923e164c32fd27f7eb", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -4115,12 +4115,10 @@ make_tree (tree type, rtx x)\n       t = make_node (RTL_EXPR);\n       TREE_TYPE (t) = type;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n       /* If TYPE is a POINTER_TYPE, X might be Pmode with TYPE_MODE being\n \t ptr_mode.  So convert.  */\n-      if (POINTER_TYPE_P (type) && GET_MODE (x) != TYPE_MODE (type))\n+      if (POINTER_TYPE_P (type))\n \tx = convert_memory_address (TYPE_MODE (type), x);\n-#endif\n \n       RTL_EXPR_RTL (t) = x;\n       /* There are no insns to be output"}, {"sha": "5c055462a90fbf1c616085c41e1cbbb74d6ad569", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -1957,10 +1957,8 @@ emit_block_move_via_libcall (rtx dst, rtx src, rtx size)\n   dst_addr = copy_to_mode_reg (Pmode, XEXP (dst, 0));\n   src_addr = copy_to_mode_reg (Pmode, XEXP (src, 0));\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n   dst_addr = convert_memory_address (ptr_mode, dst_addr);\n   src_addr = convert_memory_address (ptr_mode, src_addr);\n-#endif\n \n   dst_tree = make_tree (ptr_type_node, dst_addr);\n   src_tree = make_tree (ptr_type_node, src_addr);\n@@ -4299,11 +4297,8 @@ expand_assignment (tree to, tree from, int want_value)\n \temit_block_move (to_rtx, value, expr_size (from), BLOCK_OP_NORMAL);\n       else\n \t{\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (POINTER_TYPE_P (TREE_TYPE (to))\n-\t      && GET_MODE (to_rtx) != GET_MODE (value))\n+\t  if (POINTER_TYPE_P (TREE_TYPE (to)))\n \t    value = convert_memory_address (GET_MODE (to_rtx), value);\n-#endif\n \t  emit_move_insn (to_rtx, value);\n \t}\n       preserve_temp_slots (to_rtx);\n@@ -9228,11 +9223,8 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t  if (modifier == EXPAND_SUM || modifier == EXPAND_INITIALIZER)\n \t    {\n \t      op0 = XEXP (op0, 0);\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t      if (GET_MODE (op0) == Pmode && GET_MODE (op0) != mode\n-\t\t  && mode == ptr_mode)\n+\t      if (GET_MODE (op0) == Pmode && mode == ptr_mode)\n \t\top0 = convert_memory_address (ptr_mode, op0);\n-#endif\n \t      return op0;\n \t    }\n \n@@ -9293,11 +9285,8 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \t  && ! REG_USERVAR_P (op0))\n \tmark_reg_pointer (op0, TYPE_ALIGN (TREE_TYPE (type)));\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-      if (GET_MODE (op0) == Pmode && GET_MODE (op0) != mode\n-\t  && mode == ptr_mode)\n+      if (GET_MODE (op0) == Pmode && mode == ptr_mode)\n \top0 = convert_memory_address (ptr_mode, op0);\n-#endif\n \n       return op0;\n "}, {"sha": "344e31bc1e5655d8875dc592bd0a6326b417dad1", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -5182,11 +5182,7 @@ assign_parms (tree fndecl)\n       rtx addr = DECL_RTL (function_result_decl);\n       rtx x;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-      if (GET_MODE (addr) != Pmode)\n-\taddr = convert_memory_address (Pmode, addr);\n-#endif\n-\n+      addr = convert_memory_address (Pmode, addr);\n       x = gen_rtx_MEM (DECL_MODE (result), addr);\n       set_mem_attributes (x, result, 1);\n       SET_DECL_RTL (result, x);\n@@ -7069,12 +7065,9 @@ expand_function_end (void)\n \t assignment and USE below when inlining this function.  */\n       REG_FUNCTION_VALUE_P (outgoing) = 1;\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n       /* The address may be ptr_mode and OUTGOING may be Pmode.  */\n-      if (GET_MODE (outgoing) != GET_MODE (value_address))\n-\tvalue_address = convert_memory_address (GET_MODE (outgoing),\n-\t\t\t\t\t\tvalue_address);\n-#endif\n+      value_address = convert_memory_address (GET_MODE (outgoing),\n+\t\t\t\t\t      value_address);\n \n       emit_move_insn (outgoing, value_address);\n "}, {"sha": "21a738ea237bc0beb89fe5e75f5903d37e267ade", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -2157,11 +2157,7 @@ copy_rtx_and_substitute (rtx orig, struct inline_remap *map, int for_lhs)\n #endif\n \n \t      temp = XEXP (temp, 0);\n-\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t      if (GET_MODE (temp) != GET_MODE (orig))\n-\t\ttemp = convert_memory_address (GET_MODE (orig), temp);\n-#endif\n+\t      temp = convert_memory_address (GET_MODE (orig), temp);\n \t      return temp;\n \t    }\n \t  else if (GET_CODE (constant) == LABEL_REF)"}, {"sha": "18f46c818d642835d0e761fdd22f7c0b52289c1a", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -520,10 +520,7 @@ expand_computed_goto (tree exp)\n {\n   rtx x = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n \n-#ifdef POINTERS_EXTEND_UNSIGNED\n-  if (GET_MODE (x) != Pmode)\n-    x = convert_memory_address (Pmode, x);\n-#endif\n+  x = convert_memory_address (Pmode, x);\n \n   emit_queue ();\n "}, {"sha": "878bcda49ccd83b504fb2daabab2c5391e3a6567", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -1,3 +1,8 @@\n+2003-09-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR target/11184\n+\t* gcc.dg/builtin-apply1.c: New test.\n+\n 2003-09-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/9848"}, {"sha": "38b384e7ccaa762830096bb6868cabfb582aec71", "filename": "gcc/testsuite/gcc.dg/builtin-apply1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae6cd0d1b33941dc142292062ff565cd99e4504/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply1.c?ref=5ae6cd0d1b33941dc142292062ff565cd99e4504", "patch": "@@ -0,0 +1,9 @@\n+/* PR 11184 */\n+/* Origin:  Dara Hazeghi <dhazeghi@yahoo.com> */\n+\n+void *\n+objc_msg_sendv (char * arg_frame, void (*foo)())\n+{\n+  return __builtin_apply ( foo, arg_frame, 4);\n+}\n+"}]}