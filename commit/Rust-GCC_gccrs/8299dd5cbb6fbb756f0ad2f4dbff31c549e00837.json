{"sha": "8299dd5cbb6fbb756f0ad2f4dbff31c549e00837", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5OWRkNWNiYjZmYmI3NTZmMGFkMmY0ZGJmZjMxYzU0OWUwMDgzNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-08-11T12:34:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-08-11T12:34:43Z"}, "message": "* tree-vrp.c (simplify_abs_using_ranges): Simplify.\n\nFrom-SVN: r226779", "tree": {"sha": "af86e77b2c0ba60ccadff98269b63e61f2dd9844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af86e77b2c0ba60ccadff98269b63e61f2dd9844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6810021afdc4e05a44d7c56682eebe9452c359d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6810021afdc4e05a44d7c56682eebe9452c359d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6810021afdc4e05a44d7c56682eebe9452c359d"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "cb2d6a06b9a335b53d9c98a4b2574cb1cca28b44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8299dd5cbb6fbb756f0ad2f4dbff31c549e00837", "patch": "@@ -1,5 +1,7 @@\n 2015-08-11  Nathan Sidwell  <nathan@acm.org>\n \n+\t* tree-vrp.c (simplify_abs_using_ranges): Simplify.\n+\n \t* tree-ssa-phiopt.c (minmax_replacement): Create new ssa name if\n \twe're not the only contributor to target phi.\n "}, {"sha": "d51acaa52fc5fcccbc935b9d03e15bf273896c54", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8299dd5cbb6fbb756f0ad2f4dbff31c549e00837/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8299dd5cbb6fbb756f0ad2f4dbff31c549e00837", "patch": "@@ -9152,37 +9152,25 @@ simplify_div_or_mod_using_ranges (gimple stmt)\n static bool\n simplify_abs_using_ranges (gimple stmt)\n {\n-  tree val = NULL;\n   tree op = gimple_assign_rhs1 (stmt);\n-  tree type = TREE_TYPE (op);\n   value_range_t *vr = get_value_range (op);\n \n-  if (TYPE_UNSIGNED (type))\n-    {\n-      val = integer_zero_node;\n-    }\n-  else if (vr)\n+  if (vr)\n     {\n+      tree val = NULL;\n       bool sop = false;\n \n       val = compare_range_with_value (LE_EXPR, vr, integer_zero_node, &sop);\n       if (!val)\n \t{\n+\t  /* The range is neither <= 0 nor > 0.  Now see if it is\n+\t     either < 0 or >= 0.  */\n \t  sop = false;\n-\t  val = compare_range_with_value (GE_EXPR, vr, integer_zero_node,\n+\t  val = compare_range_with_value (LT_EXPR, vr, integer_zero_node,\n \t\t\t\t\t  &sop);\n-\n-\t  if (val)\n-\t    {\n-\t      if (integer_zerop (val))\n-\t\tval = integer_one_node;\n-\t      else if (integer_onep (val))\n-\t\tval = integer_zero_node;\n-\t    }\n \t}\n \n-      if (val\n-\t  && (integer_onep (val) || integer_zerop (val)))\n+      if (val)\n \t{\n \t  if (sop && issue_strict_overflow_warning (WARN_STRICT_OVERFLOW_MISC))\n \t    {\n@@ -9198,10 +9186,10 @@ simplify_abs_using_ranges (gimple stmt)\n \t    }\n \n \t  gimple_assign_set_rhs1 (stmt, op);\n-\t  if (integer_onep (val))\n-\t    gimple_assign_set_rhs_code (stmt, NEGATE_EXPR);\n-\t  else\n+\t  if (integer_zerop (val))\n \t    gimple_assign_set_rhs_code (stmt, SSA_NAME);\n+\t  else\n+\t    gimple_assign_set_rhs_code (stmt, NEGATE_EXPR);\n \t  update_stmt (stmt);\n \t  return true;\n \t}"}]}