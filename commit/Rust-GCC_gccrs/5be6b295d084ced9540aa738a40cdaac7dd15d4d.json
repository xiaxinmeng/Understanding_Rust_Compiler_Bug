{"sha": "5be6b295d084ced9540aa738a40cdaac7dd15d4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlNmIyOTVkMDg0Y2VkOTU0MGFhNzM4YTQwY2RhYWM3ZGQxNWQ0ZA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-10-21T17:15:22Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-10-21T17:15:22Z"}, "message": "Improve stack adjustment by reusing a temporary move immediate from the epilog...\n\nImprove stack adjustment by reusing a temporary move immediate from the epilog\nif the register is still valid in the epilog.  This generates smaller code for\nleaf functions with a stack size of more then 4KB.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_add_constant_internal):\n\tAdd extra argument to allow emitting the move immediate.\n\tUse add/sub with positive immediate.\n\t(aarch64_add_constant): Add inline function.\n\t(aarch64_add_sp): Likewise.\n\t(aarch64_sub_sp): Likewise.\n\t(aarch64_expand_prologue): Call aarch64_sub_sp.\n\t(aarch64_expand_epilogue): Call aarch64_add_sp.\n\tDecide when to leave out move.\n\t(aarch64_output_mi_thunk): Call aarch64_add_constant.\n\ntestsuite/\n\t* gcc.target/aarch64/test_frame_17.c: New test.\n\nFrom-SVN: r241420", "tree": {"sha": "ae80522de55744d04de1bfd5cf8142651fe0dc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae80522de55744d04de1bfd5cf8142651fe0dc77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be6b295d084ced9540aa738a40cdaac7dd15d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be6b295d084ced9540aa738a40cdaac7dd15d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be6b295d084ced9540aa738a40cdaac7dd15d4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be6b295d084ced9540aa738a40cdaac7dd15d4d/comments", "author": null, "committer": null, "parents": [{"sha": "4b0685d91591a8493e7fd41f87c8690c675c40d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0685d91591a8493e7fd41f87c8690c675c40d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0685d91591a8493e7fd41f87c8690c675c40d9"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "a2f86411661ea641a269becf425038f0d4a923fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6b295d084ced9540aa738a40cdaac7dd15d4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6b295d084ced9540aa738a40cdaac7dd15d4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5be6b295d084ced9540aa738a40cdaac7dd15d4d", "patch": "@@ -1,3 +1,16 @@\n+2016-10-21  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_add_constant_internal):\n+\tAdd extra argument to allow emitting the move immediate.\n+\tUse add/sub with positive immediate.\n+\t(aarch64_add_constant): Add inline function.\n+\t(aarch64_add_sp): Likewise.\n+\t(aarch64_sub_sp): Likewise.\n+\t(aarch64_expand_prologue): Call aarch64_sub_sp.\n+\t(aarch64_expand_epilogue): Call aarch64_add_sp.\n+\tDecide when to leave out move.\n+\t(aarch64_output_mi_thunk): Call aarch64_add_constant.\n+\n 2016-10-21  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_layout_frame):"}, {"sha": "df74ad96949aec67f193c2b704c50848c979dd61", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 51, "deletions": 25, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6b295d084ced9540aa738a40cdaac7dd15d4d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6b295d084ced9540aa738a40cdaac7dd15d4d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5be6b295d084ced9540aa738a40cdaac7dd15d4d", "patch": "@@ -1954,38 +1954,42 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n   aarch64_internal_mov_immediate (dest, imm, true, GET_MODE (dest));\n }\n \n-/* Add DELTA to REGNUM in mode MODE.  SCRATCHREG can be used to held\n-   intermediate value if necessary.\n-\n-   This function is sometimes used to adjust the stack pointer, so we must\n-   ensure that it can never cause transient stack deallocation by writing an\n-   invalid value into REGNUM.  */\n+/* Add DELTA to REGNUM in mode MODE.  SCRATCHREG can be used to hold a\n+   temporary value if necessary.  FRAME_RELATED_P should be true if\n+   the RTX_FRAME_RELATED flag should be set and CFA adjustments added\n+   to the generated instructions.  If SCRATCHREG is known to hold\n+   abs (delta), EMIT_MOVE_IMM can be set to false to avoid emitting the\n+   immediate again.\n+\n+   Since this function may be used to adjust the stack pointer, we must\n+   ensure that it cannot cause transient stack deallocation (for example\n+   by first incrementing SP and then decrementing when adjusting by a\n+   large immediate).  */\n \n static void\n-aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n-\t\t      HOST_WIDE_INT delta, bool frame_related_p)\n+aarch64_add_constant_internal (machine_mode mode, int regnum, int scratchreg,\n+\t\t\t       HOST_WIDE_INT delta, bool frame_related_p,\n+\t\t\t       bool emit_move_imm)\n {\n   HOST_WIDE_INT mdelta = abs_hwi (delta);\n   rtx this_rtx = gen_rtx_REG (mode, regnum);\n   rtx_insn *insn;\n \n-  /* Do nothing if mdelta is zero.  */\n   if (!mdelta)\n     return;\n \n-  /* We only need single instruction if the offset fit into add/sub.  */\n+  /* Single instruction adjustment.  */\n   if (aarch64_uimm12_shift (mdelta))\n     {\n       insn = emit_insn (gen_add2_insn (this_rtx, GEN_INT (delta)));\n       RTX_FRAME_RELATED_P (insn) = frame_related_p;\n       return;\n     }\n \n-  /* We need two add/sub instructions, each one performing part of the\n-     calculation.  Don't do this if the addend can be loaded into register with\n-     a single instruction, in that case we prefer a move to a scratch register\n-     following by an addition.  */\n-  if (mdelta < 0x1000000 && !aarch64_move_imm (delta, mode))\n+  /* Emit 2 additions/subtractions if the adjustment is less than 24 bits.\n+     Only do this if mdelta is not a 16-bit move as adjusting using a move\n+     is better.  */\n+  if (mdelta < 0x1000000 && !aarch64_move_imm (mdelta, mode))\n     {\n       HOST_WIDE_INT low_off = mdelta & 0xfff;\n \n@@ -1997,10 +2001,12 @@ aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n       return;\n     }\n \n-  /* Otherwise use generic function to handle all other situations.  */\n+  /* Emit a move immediate if required and an addition/subtraction.  */\n   rtx scratch_rtx = gen_rtx_REG (mode, scratchreg);\n-  aarch64_internal_mov_immediate (scratch_rtx, GEN_INT (delta), true, mode);\n-  insn = emit_insn (gen_add2_insn (this_rtx, scratch_rtx));\n+  if (emit_move_imm)\n+    aarch64_internal_mov_immediate (scratch_rtx, GEN_INT (mdelta), true, mode);\n+  insn = emit_insn (delta < 0 ? gen_sub2_insn (this_rtx, scratch_rtx)\n+\t\t\t      : gen_add2_insn (this_rtx, scratch_rtx));\n   if (frame_related_p)\n     {\n       RTX_FRAME_RELATED_P (insn) = frame_related_p;\n@@ -2009,6 +2015,27 @@ aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n     }\n }\n \n+static inline void\n+aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n+\t\t      HOST_WIDE_INT delta)\n+{\n+  aarch64_add_constant_internal (mode, regnum, scratchreg, delta, false, true);\n+}\n+\n+static inline void\n+aarch64_add_sp (int scratchreg, HOST_WIDE_INT delta, bool emit_move_imm)\n+{\n+  aarch64_add_constant_internal (Pmode, SP_REGNUM, scratchreg, delta,\n+\t\t\t\t true, emit_move_imm);\n+}\n+\n+static inline void\n+aarch64_sub_sp (int scratchreg, HOST_WIDE_INT delta, bool frame_related_p)\n+{\n+  aarch64_add_constant_internal (Pmode, SP_REGNUM, scratchreg, -delta,\n+\t\t\t\t frame_related_p, true);\n+}\n+\n static bool\n aarch64_function_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED,\n \t\t\t\t tree exp ATTRIBUTE_UNUSED)\n@@ -3230,7 +3257,7 @@ aarch64_expand_prologue (void)\n \taarch64_emit_probe_stack_range (STACK_CHECK_PROTECT, frame_size);\n     }\n \n-  aarch64_add_constant (Pmode, SP_REGNUM, IP0_REGNUM, -initial_adjust, true);\n+  aarch64_sub_sp (IP0_REGNUM, initial_adjust, true);\n \n   if (callee_adjust != 0)\n     aarch64_push_regs (reg1, reg2, callee_adjust);\n@@ -3251,8 +3278,7 @@ aarch64_expand_prologue (void)\n \t\t\t     callee_adjust != 0 || frame_pointer_needed);\n   aarch64_save_callee_saves (DFmode, callee_offset, V0_REGNUM, V31_REGNUM,\n \t\t\t     callee_adjust != 0 || frame_pointer_needed);\n-  aarch64_add_constant (Pmode, SP_REGNUM, IP1_REGNUM, -final_adjust,\n-\t\t\t!frame_pointer_needed);\n+  aarch64_sub_sp (IP1_REGNUM, final_adjust, !frame_pointer_needed);\n }\n \n /* Return TRUE if we can use a simple_return insn.\n@@ -3317,7 +3343,7 @@ aarch64_expand_epilogue (bool for_sibcall)\n       RTX_FRAME_RELATED_P (insn) = callee_adjust == 0;\n     }\n   else\n-    aarch64_add_constant (Pmode, SP_REGNUM, IP1_REGNUM, final_adjust, true);\n+    aarch64_add_sp (IP1_REGNUM, final_adjust, df_regs_ever_live_p (IP1_REGNUM));\n \n   aarch64_restore_callee_saves (DImode, callee_offset, R0_REGNUM, R30_REGNUM,\n \t\t\t\tcallee_adjust != 0, &cfi_ops);\n@@ -3340,7 +3366,7 @@ aarch64_expand_epilogue (bool for_sibcall)\n       cfi_ops = NULL;\n     }\n \n-  aarch64_add_constant (Pmode, SP_REGNUM, IP0_REGNUM, initial_adjust, true);\n+  aarch64_add_sp (IP0_REGNUM, initial_adjust, df_regs_ever_live_p (IP0_REGNUM));\n \n   if (cfi_ops)\n     {\n@@ -3435,7 +3461,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n   if (vcall_offset == 0)\n-    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta, false);\n+    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta);\n   else\n     {\n       gcc_assert ((vcall_offset & (POINTER_BYTES - 1)) == 0);\n@@ -3451,7 +3477,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t    addr = gen_rtx_PRE_MODIFY (Pmode, this_rtx,\n \t\t\t\t       plus_constant (Pmode, this_rtx, delta));\n \t  else\n-\t    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta, false);\n+\t    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta);\n \t}\n \n       if (Pmode == ptr_mode)"}, {"sha": "e3726c772accea750a5258352ee70aab4b8571fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be6b295d084ced9540aa738a40cdaac7dd15d4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be6b295d084ced9540aa738a40cdaac7dd15d4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5be6b295d084ced9540aa738a40cdaac7dd15d4d", "patch": "@@ -1,3 +1,7 @@\n+2016-10-21  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/test_frame_17.c: New test.\n+\n 2016-10-21  Andris Pavenis  <andris.pavenis@iki.fi>\n \n \tPR preprocessor/71681"}]}