{"sha": "3b8bcc3f8b821e7359f8504334488ff2b1fc8f30", "node_id": "C_kwDOANBUbNoAKDNiOGJjYzNmOGI4MjFlNzM1OWY4NTA0MzM0NDg4ZmYyYjFmYzhmMzA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-04T14:54:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-04T14:54:36Z"}, "message": "libstdc++: Avoid heavyweight std::visit in ranges::join_with_view\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (join_with_view::_Iterator::operator*):\n\tReplace use of std::visit with manual visitation.\n\t(join_with_view::_Iterator::operator++): Likewise.\n\t(join_with_view::_Iterator::operator--): Likewise.\n\t(join_with_view::_Iterator::iter_move): Likewise.\n\t(join_with_view::_Iterator::iter_swap): Likewise.", "tree": {"sha": "b5eed05d124c50e8e23c4842fea0a94d6872e465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5eed05d124c50e8e23c4842fea0a94d6872e465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8bcc3f8b821e7359f8504334488ff2b1fc8f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8bcc3f8b821e7359f8504334488ff2b1fc8f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8bcc3f8b821e7359f8504334488ff2b1fc8f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8bcc3f8b821e7359f8504334488ff2b1fc8f30/comments", "author": null, "committer": null, "parents": [{"sha": "beeb6898fe8ad44731bc58cad7220511b8225797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeb6898fe8ad44731bc58cad7220511b8225797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beeb6898fe8ad44731bc58cad7220511b8225797"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "1f821128d2d5f1d34cc790d550f1c2ac19f34dde", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8bcc3f8b821e7359f8504334488ff2b1fc8f30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8bcc3f8b821e7359f8504334488ff2b1fc8f30/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=3b8bcc3f8b821e7359f8504334488ff2b1fc8f30", "patch": "@@ -7165,18 +7165,23 @@ namespace views::__adaptor\n \t_M_inner_it.template emplace<1>(std::get<1>(std::move(__i._M_inner_it)));\n     }\n \n-    constexpr decltype(auto)\n+    constexpr common_reference_t<iter_reference_t<_InnerIter>,\n+\t\t\t         iter_reference_t<_PatternIter>>\n     operator*() const\n     {\n-      using reference = common_reference_t<iter_reference_t<_InnerIter>,\n-\t\t\t\t\t   iter_reference_t<_PatternIter>>;\n-      return std::visit([](auto& __it) -> reference { return *__it; }, _M_inner_it);\n+      if (_M_inner_it.index() == 0)\n+\treturn *std::get<0>(_M_inner_it);\n+      else\n+\treturn *std::get<1>(_M_inner_it);\n     }\n \n     constexpr _Iterator&\n     operator++()\n     {\n-      std::visit([](auto& __it){ ++__it; }, _M_inner_it);\n+      if (_M_inner_it.index() == 0)\n+\t++std::get<0>(_M_inner_it);\n+      else\n+\t++std::get<1>(_M_inner_it);\n       _M_satisfy();\n       return *this;\n     }\n@@ -7232,7 +7237,10 @@ namespace views::__adaptor\n \t    }\n \t}\n \n-      std::visit([](auto& __it){ --__it; }, _M_inner_it);\n+      if (_M_inner_it.index() == 0)\n+\t--std::get<0>(_M_inner_it);\n+      else\n+\t--std::get<1>(_M_inner_it);\n       return *this;\n     }\n \n@@ -7253,18 +7261,35 @@ namespace views::__adaptor\n \t&& equality_comparable<_OuterIter> && equality_comparable<_InnerIter>\n     { return __x._M_outer_it == __y._M_outer_it && __x._M_inner_it ==__y._M_inner_it; }\n \n-    friend constexpr decltype(auto)\n+    friend constexpr common_reference_t<iter_rvalue_reference_t<_InnerIter>,\n+\t\t\t\t\titer_rvalue_reference_t<_PatternIter>>\n     iter_move(const _Iterator& __x)\n     {\n-      using __rval_ref = common_reference_t<iter_rvalue_reference_t<_InnerIter>,\n-\t\t\t\t\t    iter_rvalue_reference_t<_PatternIter>>;\n-      return std::visit<__rval_ref>(ranges::iter_move, __x._M_inner_it);\n+      if (__x._M_inner_it.index() == 0)\n+\treturn ranges::iter_move(std::get<0>(__x._M_inner_it));\n+      else\n+\treturn ranges::iter_move(std::get<1>(__x._M_inner_it));\n     }\n \n     friend constexpr void\n     iter_swap(const _Iterator& __x, const _Iterator& __y)\n       requires indirectly_swappable<_InnerIter, _PatternIter>\n-    { std::visit(ranges::iter_swap, __x._M_inner_it, __y._M_inner_it); }\n+    {\n+      if (__x._M_inner_it.index() == 0)\n+\t{\n+\t  if (__y._M_inner_it.index() == 0)\n+\t    ranges::iter_swap(std::get<0>(__x._M_inner_it), std::get<0>(__y._M_inner_it));\n+\t  else\n+\t    ranges::iter_swap(std::get<0>(__x._M_inner_it), std::get<1>(__y._M_inner_it));\n+\t}\n+      else\n+\t{\n+\t  if (__y._M_inner_it.index() == 0)\n+\t    ranges::iter_swap(std::get<1>(__x._M_inner_it), std::get<0>(__y._M_inner_it));\n+\t  else\n+\t    ranges::iter_swap(std::get<1>(__x._M_inner_it), std::get<1>(__y._M_inner_it));\n+\t}\n+    }\n   };\n \n   template<input_range _Vp, forward_range _Pattern>"}]}