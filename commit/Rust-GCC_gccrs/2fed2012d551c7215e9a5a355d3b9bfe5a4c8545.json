{"sha": "2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlZDIwMTJkNTUxYzcyMTVlOWE1YTM1NWQzYjliZmU1YTRjODU0NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-13T06:59:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-13T06:59:56Z"}, "message": "re PR debug/44901 (-fcompare-debug failure for tree-predcom.c)\n\n\tPR debug/44901\n\t* vec.h (VEC_block_remove): Fix comment.\n\t* tree-ssa-live.c (remove_unused_locals): Don't use\n\tVEC_unordered_remove on local_decls, instead replace a single\n\tvector element in each iteration if at least one element had\n\tto be removed and VEC_truncate at the end.\n\t* omp-low.c (expand_omp_taskreg): Likewise.\n\nFrom-SVN: r162126", "tree": {"sha": "b123c5327b8752f626c90a170c875178af34b826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b123c5327b8752f626c90a170c875178af34b826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88ce80316fbb4d001f08eb4c65dbb7ae88e0474f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce80316fbb4d001f08eb4c65dbb7ae88e0474f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ce80316fbb4d001f08eb4c65dbb7ae88e0474f"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "b994fa26e49dcfff51d160fa1176b17e63ce7e59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "patch": "@@ -1,3 +1,13 @@\n+2010-07-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/44901\n+\t* vec.h (VEC_block_remove): Fix comment.\n+\t* tree-ssa-live.c (remove_unused_locals): Don't use\n+\tVEC_unordered_remove on local_decls, instead replace a single\n+\tvector element in each iteration if at least one element had\n+\tto be removed and VEC_truncate at the end.\n+\t* omp-low.c (expand_omp_taskreg): Likewise.\n+\n 2010-07-13  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c-decl.c (finish_function): Fix typo in comment."}, {"sha": "872d567fe4b1374d9bac6f1ddf79c9135924f8bd", "filename": "gcc/omp-low.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "patch": "@@ -3378,7 +3378,7 @@ expand_omp_taskreg (struct omp_region *region)\n     }\n   else\n     {\n-      unsigned ix;\n+      unsigned srcidx, dstidx, num;\n \n       /* If the parallel region needs data sent from the parent\n \t function, then the very first statement (except possible\n@@ -3515,11 +3515,18 @@ expand_omp_taskreg (struct omp_region *region)\n \tsingle_succ_edge (new_bb)->flags = EDGE_FALLTHRU;\n \n       /* Remove non-local VAR_DECLs from child_cfun->local_decls list.  */\n-      for (ix = 0; VEC_iterate (tree, child_cfun->local_decls, ix, t); )\n-\tif (DECL_CONTEXT (t) != cfun->decl)\n-\t  ix++;\n-\telse\n-\t  VEC_unordered_remove (tree, child_cfun->local_decls, ix);\n+      num = VEC_length (tree, child_cfun->local_decls);\n+      for (srcidx = 0, dstidx = 0; srcidx < num; srcidx++)\n+\t{\n+\t  t = VEC_index (tree, child_cfun->local_decls, srcidx);\n+\t  if (DECL_CONTEXT (t) == cfun->decl)\n+\t    continue;\n+\t  if (srcidx != dstidx)\n+\t    VEC_replace (tree, child_cfun->local_decls, dstidx, t);\n+\t  dstidx++;\n+\t}\n+      if (dstidx != num)\n+\tVEC_truncate (tree, child_cfun->local_decls, dstidx);\n \n       /* Inform the callgraph about the new function.  */\n       DECL_STRUCT_FUNCTION (child_fn)->curr_properties"}, {"sha": "ab79d7f327ebc8c5c353780402f31593a32f3140", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "patch": "@@ -689,7 +689,7 @@ remove_unused_locals (void)\n   referenced_var_iterator rvi;\n   var_ann_t ann;\n   bitmap global_unused_vars = NULL;\n-  unsigned ix;\n+  unsigned srcidx, dstidx, num;\n \n   /* Removing declarations from lexical blocks when not optimizing is\n      not only a waste of time, it actually causes differences in stack\n@@ -756,8 +756,10 @@ remove_unused_locals (void)\n   cfun->has_local_explicit_reg_vars = false;\n \n   /* Remove unmarked local vars from local_decls.  */\n-  for (ix = 0; VEC_iterate (tree, cfun->local_decls, ix, var); )\n+  num = VEC_length (tree, cfun->local_decls);\n+  for (srcidx = 0, dstidx = 0; srcidx < num; srcidx++)\n     {\n+      var = VEC_index (tree, cfun->local_decls, srcidx);\n       if (TREE_CODE (var) != FUNCTION_DECL\n \t  && (!(ann = var_ann (var))\n \t      || !ann->used))\n@@ -769,18 +771,19 @@ remove_unused_locals (void)\n \t      bitmap_set_bit (global_unused_vars, DECL_UID (var));\n \t    }\n \t  else\n-\t    {\n-\t      VEC_unordered_remove (tree, cfun->local_decls, ix);\n-\t      continue;\n-\t    }\n+\t    continue;\n \t}\n       else if (TREE_CODE (var) == VAR_DECL\n \t       && DECL_HARD_REGISTER (var)\n \t       && !is_global_var (var))\n \tcfun->has_local_explicit_reg_vars = true;\n \n-      ix++;\n+      if (srcidx != dstidx)\n+\tVEC_replace (tree, cfun->local_decls, dstidx, var);\n+      dstidx++;\n     }\n+  if (dstidx != num)\n+    VEC_truncate (tree, cfun->local_decls, dstidx);\n \n   /* Remove unmarked global vars from local_decls.  */\n   if (global_unused_vars != NULL)\n@@ -794,13 +797,21 @@ remove_unused_locals (void)\n \t    && ann->used)\n \t  mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n \n-      for (ix = 0; VEC_iterate (tree, cfun->local_decls, ix, var); )\n-\tif (TREE_CODE (var) == VAR_DECL\n-\t    && is_global_var (var)\n-\t    && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n-\t  VEC_unordered_remove (tree, cfun->local_decls, ix);\n-\telse\n-\t  ix++;\n+      num = VEC_length (tree, cfun->local_decls);\n+      for (srcidx = 0, dstidx = 0; srcidx < num; srcidx++)\n+\t{\n+\t  var = VEC_index (tree, cfun->local_decls, srcidx);\n+\t  if (TREE_CODE (var) == VAR_DECL\n+\t      && is_global_var (var)\n+\t      && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n+\t    continue;\n+\n+\t  if (srcidx != dstidx)\n+\t    VEC_replace (tree, cfun->local_decls, dstidx, var);\n+\t  dstidx++;\n+\t}\n+      if (dstidx != num)\n+\tVEC_truncate (tree, cfun->local_decls, dstidx);\n       BITMAP_FREE (global_unused_vars);\n     }\n "}, {"sha": "321b13fc2ce395e30f4620491553462532ba3df8", "filename": "gcc/vec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fed2012d551c7215e9a5a355d3b9bfe5a4c8545/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=2fed2012d551c7215e9a5a355d3b9bfe5a4c8545", "patch": "@@ -424,7 +424,7 @@ along with GCC; see the file COPYING3.  If not see\n    void VEC_T_block_remove (VEC(T) *v, unsigned ix, unsigned len);\n \n    Remove LEN elements starting at the IXth.  Ordering is retained.\n-   This is an O(1) operation.  */\n+   This is an O(N) operation due to memmove.  */\n \n #define VEC_block_remove(T,V,I,L)\t\\\n \t(VEC_OP(T,base,block_remove)(VEC_BASE(V),I,L VEC_CHECK_INFO))"}]}