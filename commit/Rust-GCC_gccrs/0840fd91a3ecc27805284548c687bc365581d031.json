{"sha": "0840fd91a3ecc27805284548c687bc365581d031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0MGZkOTFhM2VjYzI3ODA1Mjg0NTQ4YzY4N2JjMzY1NTgxZDAzMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-18T21:48:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-18T21:48:33Z"}, "message": "(nonzero_bits): Handle case when BYTE_LOADS_EXTEND is not on and we\nare asked for something in a mode wider than it.\n\nFrom-SVN: r5183", "tree": {"sha": "1d041d50fabfd7401bd555373c950a1d5956209a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d041d50fabfd7401bd555373c950a1d5956209a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0840fd91a3ecc27805284548c687bc365581d031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0840fd91a3ecc27805284548c687bc365581d031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0840fd91a3ecc27805284548c687bc365581d031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0840fd91a3ecc27805284548c687bc365581d031/comments", "author": null, "committer": null, "parents": [{"sha": "9d53c942648faa593c459b137142338e9864dc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d53c942648faa593c459b137142338e9864dc53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d53c942648faa593c459b137142338e9864dc53"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "af83df5cf8300f9891fc7ae8eaec0146a5a31da6", "filename": "gcc/combine.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0840fd91a3ecc27805284548c687bc365581d031/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0840fd91a3ecc27805284548c687bc365581d031/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0840fd91a3ecc27805284548c687bc365581d031", "patch": "@@ -6347,6 +6347,25 @@ nonzero_bits (x, mode)\n        just return the mode mask.  Those tests will then be false.  */\n     return nonzero;\n \n+#ifndef BYTE_LOADS_EXTEND\n+  /* If X is wider than MODE, but both are a single word for both the host\n+     and target machines, we can compute this from which bits of the \n+     object might be nonzero in its own mode, taking into account the fact\n+     that on many CISC machines, accessing an object in a wider mode\n+     causes the high-order bits to become undefined.  So they are\n+     not known to be zero.  */\n+\n+  if (GET_MODE (x) != VOIDmode && GET_MODE (x) != mode\n+      && GET_MODE_BITSIZE (GET_MODE (x)) <= BITS_PER_WORD\n+      && GET_MODE_BITSIZE (GET_MODE (x)) <= HOST_BITS_PER_WIDE_INT\n+      && GET_MODE_BITSIZE (mode) < GET_MODE_BITSIZE (GET_MODE (x)))\n+    {\n+      nonzero &= nonzero_bits (x, GET_MODE (x));\n+      nonzero |= GET_MODE_MASK (mode) & ~ GET_MODE_MASK (GET_MODE (x));\n+      return nonzero;\n+    }\n+#endif\n+\n   code = GET_CODE (x);\n   switch (code)\n     {"}]}