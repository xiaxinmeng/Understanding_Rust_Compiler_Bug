{"sha": "6f6a3861aac9ba13bba2d684fb96df0091533112", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2YTM4NjFhYWM5YmExM2JiYTJkNjg0ZmI5NmRmMDA5MTUzMzExMg==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2003-06-03T20:22:20Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2003-06-03T20:22:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r67399", "tree": {"sha": "4f3b9a672b8f19997e6596856bd1a974b7db2fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f3b9a672b8f19997e6596856bd1a974b7db2fab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f6a3861aac9ba13bba2d684fb96df0091533112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6a3861aac9ba13bba2d684fb96df0091533112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f6a3861aac9ba13bba2d684fb96df0091533112", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6a3861aac9ba13bba2d684fb96df0091533112/comments", "author": null, "committer": null, "parents": [{"sha": "aa6b9f6dcd3afc760bc4f02506a1372bf8249e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6b9f6dcd3afc760bc4f02506a1372bf8249e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6b9f6dcd3afc760bc4f02506a1372bf8249e9a"}], "stats": {"total": 235, "additions": 7, "deletions": 228}, "files": [{"sha": "f56de91ff8908339c9fd9e3cb410f073fbabf8c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6a3861aac9ba13bba2d684fb96df0091533112/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6a3861aac9ba13bba2d684fb96df0091533112/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f6a3861aac9ba13bba2d684fb96df0091533112", "patch": "@@ -1,3 +1,9 @@\n+2003-06-03  Douglas B Rupp  <rupp@gnat.com>\n+\n+\tMakefile.in (TEXI_GCC_FILES): Remove vms.texi entry.\n+\tdoc/gcc.texi: Remove vms.texi section.\n+\tdoc/vms.texi: Remove obsolete file.\n+\n 2003-05-23  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* configure.in (inhibit_libc): Don't define when configuring"}, {"sha": "41176616db803b4a147e8dedd43ef1eed61dc4a0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6a3861aac9ba13bba2d684fb96df0091533112/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6a3861aac9ba13bba2d684fb96df0091533112/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6f6a3861aac9ba13bba2d684fb96df0091533112", "patch": "@@ -2638,7 +2638,7 @@ TEXI_GCC_FILES = $(docdir)/gcc.texi $(docdir)/include/gcc-common.texi \\\n \t $(docdir)/invoke.texi $(docdir)/extend.texi $(docdir)/md.texi \\\n \t $(docdir)/objc.texi $(docdir)/gcov.texi $(docdir)/trouble.texi \\\n \t $(docdir)/bugreport.texi $(docdir)/service.texi \\\n-\t $(docdir)/contribute.texi $(docdir)/vms.texi $(docdir)/compat.texi \\\n+\t $(docdir)/contribute.texi $(docdir)/compat.texi \\\n \t $(docdir)/include/funding.texi $(docdir)/gnu.texi \\\n \t $(docdir)/include/gpl.texi $(docdir)/include/fdl.texi \\\n \t $(docdir)/contrib.texi $(docdir)/cppenv.texi $(docdir)/cppopts.texi"}, {"sha": "721150ac8a1e7e781b5780bd317bc4a230b8f4e8", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6a3861aac9ba13bba2d684fb96df0091533112/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6a3861aac9ba13bba2d684fb96df0091533112/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=6f6a3861aac9ba13bba2d684fb96df0091533112", "patch": "@@ -153,7 +153,6 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n * Bugs::            How, why and where to report bugs.\n * Service::         How to find suppliers of support for GCC.\n * Contributing::    How to contribute to testing and developing GCC.\n-* VMS::             Using GCC on VMS.\n \n * Funding::         How to help assure funding for free software.\n * GNU Project::     The GNU Project and GNU/Linux.\n@@ -178,7 +177,6 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n @include bugreport.texi\n @include service.texi\n @include contribute.texi\n-@include vms.texi\n \n @include funding.texi\n @include gnu.texi"}, {"sha": "080d4522bedf8795fa78bbd2be000eb8b6495a6b", "filename": "gcc/doc/vms.texi", "status": "removed", "additions": 0, "deletions": 225, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6b9f6dcd3afc760bc4f02506a1372bf8249e9a/gcc%2Fdoc%2Fvms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6b9f6dcd3afc760bc4f02506a1372bf8249e9a/gcc%2Fdoc%2Fvms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fvms.texi?ref=aa6b9f6dcd3afc760bc4f02506a1372bf8249e9a", "patch": "@@ -1,225 +0,0 @@\n-@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node VMS\n-@chapter Using GCC on VMS\n-\n-@c prevent bad page break with this line\n-Here is how to use GCC on VMS@.\n-\n-@menu\n-* Global Declarations::    How to do globaldef, globalref and globalvalue with\n-                           GCC.\n-* VMS Misc::\t\t   Misc information.\n-@end menu\n-\n-@node Global Declarations\n-@section Global Declarations and VMS\n-\n-@findex GLOBALREF\n-@findex GLOBALDEF\n-@findex GLOBALVALUEDEF\n-@findex GLOBALVALUEREF\n-GCC does not provide the @code{globalref}, @code{globaldef} and\n-@code{globalvalue} keywords of VAX-C@.  You can get the same effect with\n-an obscure feature of GAS, the GNU assembler.  (This requires GAS\n-version 1.39 or later.)  The following macros allow you to use this\n-feature in a fairly natural way:\n-\n-@smallexample\n-#ifdef __GNUC__\n-#define GLOBALREF(TYPE,NAME)                      \\\n-  TYPE NAME                                       \\\n-  asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME)\n-#define GLOBALDEF(TYPE,NAME,VALUE)                \\\n-  TYPE NAME                                       \\\n-  asm (\"_$$PsectAttributes_GLOBALSYMBOL$$\" #NAME) \\\n-    = VALUE\n-#define GLOBALVALUEREF(TYPE,NAME)                 \\\n-  const TYPE NAME[1]                              \\\n-  asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)\n-#define GLOBALVALUEDEF(TYPE,NAME,VALUE)           \\\n-  const TYPE NAME[1]                              \\\n-  asm (\"_$$PsectAttributes_GLOBALVALUE$$\" #NAME)  \\\n-    = @{VALUE@}\n-#else\n-#define GLOBALREF(TYPE,NAME) \\\n-  globalref TYPE NAME\n-#define GLOBALDEF(TYPE,NAME,VALUE) \\\n-  globaldef TYPE NAME = VALUE\n-#define GLOBALVALUEDEF(TYPE,NAME,VALUE) \\\n-  globalvalue TYPE NAME = VALUE\n-#define GLOBALVALUEREF(TYPE,NAME) \\\n-  globalvalue TYPE NAME\n-#endif\n-@end smallexample\n-\n-@noindent\n-(The @code{_$$PsectAttributes_GLOBALSYMBOL} prefix at the start of the\n-name is removed by the assembler, after it has modified the attributes\n-of the symbol).  These macros are provided in the VMS binaries\n-distribution in a header file @file{GNU_HACKS.H}.  An example of the\n-usage is:\n-\n-@example\n-GLOBALREF (int, ijk);\n-GLOBALDEF (int, jkl, 0);\n-@end example\n-\n-The macros @code{GLOBALREF} and @code{GLOBALDEF} cannot be used\n-straightforwardly for arrays, since there is no way to insert the array\n-dimension into the declaration at the right place.  However, you can\n-declare an array with these macros if you first define a typedef for the\n-array type, like this:\n-\n-@example\n-typedef int intvector[10];\n-GLOBALREF (intvector, foo);\n-@end example\n-\n-Array and structure initializers will also break the macros; you can\n-define the initializer to be a macro of its own, or you can expand the\n-@code{GLOBALDEF} macro by hand.  You may find a case where you wish to\n-use the @code{GLOBALDEF} macro with a large array, but you are not\n-interested in explicitly initializing each element of the array.  In\n-such cases you can use an initializer like: @code{@{0,@}}, which will\n-initialize the entire array to @code{0}.\n-\n-A shortcoming of this implementation is that a variable declared with\n-@code{GLOBALVALUEREF} or @code{GLOBALVALUEDEF} is always an array.  For\n-example, the declaration:\n-\n-@example\n-GLOBALVALUEREF(int, ijk);\n-@end example\n-\n-@noindent\n-declares the variable @code{ijk} as an array of type @code{int [1]}.\n-This is done because a globalvalue is actually a constant; its ``value''\n-is what the linker would normally consider an address.  That is not how\n-an integer value works in C, but it is how an array works.  So treating\n-the symbol as an array name gives consistent results---with the\n-exception that the value seems to have the wrong type.  @strong{Don't\n-try to access an element of the array.}  It doesn't have any elements.\n-The array ``address'' may not be the address of actual storage.\n-\n-The fact that the symbol is an array may lead to warnings where the\n-variable is used.  Insert type casts to avoid the warnings.  Here is an\n-example; it takes advantage of the ISO C feature allowing macros that\n-expand to use the same name as the macro itself.\n-\n-@example\n-GLOBALVALUEREF (int, ss$_normal);\n-GLOBALVALUEDEF (int, xyzzy,123);\n-#ifdef __GNUC__\n-#define ss$_normal ((int) ss$_normal)\n-#define xyzzy ((int) xyzzy)\n-#endif\n-@end example\n-\n-Don't use @code{globaldef} or @code{globalref} with a variable whose\n-type is an enumeration type; this is not implemented.  Instead, make the\n-variable an integer, and use a @code{globalvaluedef} for each of the\n-enumeration values.  An example of this would be:\n-\n-@example\n-#ifdef __GNUC__\n-GLOBALDEF (int, color, 0);\n-GLOBALVALUEDEF (int, RED, 0);\n-GLOBALVALUEDEF (int, BLUE, 1);\n-GLOBALVALUEDEF (int, GREEN, 3);\n-#else\n-enum globaldef color @{RED, BLUE, GREEN = 3@};\n-#endif\n-@end example\n-\n-@node VMS Misc\n-@section Other VMS Issues\n-\n-@cindex exit status and VMS\n-@cindex return value of @code{main}\n-@cindex @code{main} and the exit status\n-GCC automatically arranges for @code{main} to return 1 by default if\n-you fail to specify an explicit return value.  This will be interpreted\n-by VMS as a status code indicating a normal successful completion.\n-Version 1 of GCC did not provide this default.\n-\n-GCC on VMS works only with the GNU assembler, GAS@.  You need version\n-1.37 or later of GAS in order to produce value debugging information for\n-the VMS debugger.  Use the ordinary VMS linker with the object files\n-produced by GAS@.\n-\n-@cindex shared VMS run time system\n-@cindex @file{VAXCRTL}\n-Under previous versions of GCC, the generated code would occasionally\n-give strange results when linked to the sharable @file{VAXCRTL} library.\n-Now this should work.\n-\n-A caveat for use of @code{const} global variables: the @code{const}\n-modifier must be specified in every external declaration of the variable\n-in all of the source files that use that variable.  Otherwise the linker\n-will issue warnings about conflicting attributes for the variable.  Your\n-program will still work despite the warnings, but the variable will be\n-placed in writable storage.\n-\n-@cindex name augmentation\n-@cindex case sensitivity and VMS\n-@cindex VMS and case sensitivity\n-Although the VMS linker does distinguish between upper and lower case\n-letters in global symbols, most VMS compilers convert all such symbols\n-into upper case and most run-time library routines also have upper case\n-names.  To be able to reliably call such routines, GCC (by means of\n-the assembler GAS) converts global symbols into upper case like other\n-VMS compilers.  However, since the usual practice in C is to distinguish\n-case, GCC (via GAS) tries to preserve usual C behavior by augmenting\n-each name that is not all lower case.  This means truncating the name\n-to at most 23 characters and then adding more characters at the end\n-which encode the case pattern of those 23.   Names which contain at\n-least one dollar sign are an exception; they are converted directly into\n-upper case without augmentation.\n-\n-Name augmentation yields bad results for programs that use precompiled\n-libraries (such as Xlib) which were generated by another compiler.  You\n-can use the compiler option @samp{/NOCASE_HACK} to inhibit augmentation;\n-it makes external C functions and variables case-independent as is usual\n-on VMS@.  Alternatively, you could write all references to the functions\n-and variables in such libraries using lower case; this will work on VMS,\n-but is not portable to other systems.  The compiler option @samp{/NAMES}\n-also provides control over global name handling.\n-\n-Function and variable names are handled somewhat differently with G++.\n-The GNU C++ compiler performs @dfn{name mangling} on function\n-names, which means that it adds information to the function name to\n-describe the data types of the arguments that the function takes.  One\n-result of this is that the name of a function can become very long.\n-Since the VMS linker only recognizes the first 31 characters in a name,\n-special action is taken to ensure that each function and variable has a\n-unique name that can be represented in 31 characters.\n-\n-If the name (plus a name augmentation, if required) is less than 32\n-characters in length, then no special action is performed.  If the name\n-is longer than 31 characters, the assembler (GAS) will generate a\n-hash string based upon the function name, truncate the function name to\n-23 characters, and append the hash string to the truncated name.  If the\n-@samp{/VERBOSE} compiler option is used, the assembler will print both\n-the full and truncated names of each symbol that is truncated.\n-\n-The @samp{/NOCASE_HACK} compiler option should not be used when you are\n-compiling programs that use libg++.  libg++ has several instances of\n-objects (i.e.  @code{Filebuf} and @code{filebuf}) which become\n-indistinguishable in a case-insensitive environment.  This leads to\n-cases where you need to inhibit augmentation selectively (if you were\n-using libg++ and Xlib in the same program, for example).  There is no\n-special feature for doing this, but you can get the result by defining a\n-macro for each mixed case symbol for which you wish to inhibit\n-augmentation.  The macro should expand into the lower case equivalent of\n-itself.  For example:\n-\n-@example\n-#define StuDlyCapS studlycaps\n-@end example\n-\n-These macro definitions can be placed in a header file to minimize the\n-number of changes to your source code."}]}