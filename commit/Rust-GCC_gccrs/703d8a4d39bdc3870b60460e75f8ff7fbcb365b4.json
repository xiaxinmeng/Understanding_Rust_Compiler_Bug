{"sha": "703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "node_id": "C_kwDOANBUbNoAKDcwM2Q4YTRkMzliZGMzODcwYjYwNDYwZTc1ZjhmZjdmYmNiMzY1YjQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-02T09:29:35Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-02T09:29:35Z"}, "message": "Add libgomp.fortran/order-reproducible-*.f90\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/order-reproducible-1.f90: New test\n\tbased on libgomp.c-c++-common/order-reproducible-1.c.\n\t* testsuite/libgomp.fortran/order-reproducible-2.f90: Likewise.\n\t* testsuite/libgomp.fortran/my-usleep.c: New test.", "tree": {"sha": "791619bb93e811e9e237b37c2dd052356fb8123c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791619bb93e811e9e237b37c2dd052356fb8123c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda4aa3673267bdb20b67326072ee3e7e2b29698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda4aa3673267bdb20b67326072ee3e7e2b29698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda4aa3673267bdb20b67326072ee3e7e2b29698"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "1764db9cd64c1a2e51636f5eb40a8f263e8b954b", "filename": "libgomp/testsuite/libgomp.fortran/my-usleep.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fmy-usleep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fmy-usleep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fmy-usleep.c?ref=703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "patch": "@@ -0,0 +1,9 @@\n+/* Wrapper as usleep takes 'useconds_t', an unsigned integer type, as argument. */\n+\n+#include <unistd.h>\n+\n+void\n+my_usleep (int t)\n+{\n+  usleep (t);\n+}"}, {"sha": "ba416b9525e8cca4980c6c75f870164bd1c08075", "filename": "libgomp/testsuite/libgomp.fortran/order-reproducible-1.f90", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Forder-reproducible-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Forder-reproducible-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Forder-reproducible-1.f90?ref=703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "patch": "@@ -0,0 +1,72 @@\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+program main\n+  implicit none\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+  integer :: a(128)\n+  integer :: i\n+\n+  !$omp teams num_teams(5)\n+    !$omp loop bind(teams)\n+    do i = 1, 128\n+      a(i) = i\n+      if (i == 1) then\n+        call usleep (20)\n+      else if (i == 17) then\n+        call usleep (40)\n+      end if\n+    end do\n+    !$omp loop bind(teams)\n+    do i = 1, 128\n+      a(i) = a(i) + i\n+    end do\n+  !$omp end teams\n+  do i = 1, 128\n+    if (a(i) /= 2 * i) &\n+      stop 1\n+  end do\n+  !$omp teams num_teams(5)\n+    !$omp loop bind(teams) order(concurrent)\n+    do i = 1, 128\n+      a(i) = a(i) * 2\n+      if (i == 1) then\n+        call usleep (20)\n+      else if (i == 13) then\n+        call usleep (40)\n+      end if\n+    end do\n+    !$omp loop bind(teams) order(concurrent)\n+    do i = 1, 128\n+      a(i) = a(i) + i\n+    end do\n+  !$omp end teams\n+  do i = 1, 128\n+    if (a(i) /= 5 * i) &\n+      stop 2\n+  end do\n+  !$omp teams num_teams(5)\n+    !$omp loop bind(teams) order(reproducible:concurrent)\n+    do i = 1, 128\n+      a(i) = a(i) * 2\n+      if (i == 3) then\n+        call usleep (20)\n+      else if (i == 106) then\n+        call usleep (40)\n+      end if\n+    end do\n+    !$omp loop bind(teams) order(reproducible:concurrent)\n+    do i = 1, 128\n+      a(i) = a(i) + i\n+    end do\n+  !$omp end teams\n+  do i = 1, 128\n+    if (a(i) /= 11 * i) &\n+      stop 3\n+  end do\n+end program main"}, {"sha": "9d7202061443e0d8c11c0f422db8ad8c46008158", "filename": "libgomp/testsuite/libgomp.fortran/order-reproducible-2.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Forder-reproducible-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703d8a4d39bdc3870b60460e75f8ff7fbcb365b4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Forder-reproducible-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Forder-reproducible-2.f90?ref=703d8a4d39bdc3870b60460e75f8ff7fbcb365b4", "patch": "@@ -0,0 +1,37 @@\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+program main\n+  implicit none\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+  integer :: a(128)\n+  integer :: i\n+\n+  !$omp parallel num_threads(8)\n+    !$omp barrier\n+    !$omp do schedule (dynamic, 2) order(reproducible:concurrent)\n+    do i = 1, 128\n+      a(i) = i\n+      if (i == 1) then\n+        call usleep (20)\n+      else if (i == 18) then\n+        call usleep (40)\n+      end if\n+    end do\n+    !$omp end do nowait\n+    !$omp do schedule (dynamic, 2) order(reproducible:concurrent)\n+    do i = 1, 128\n+      a(i) = a(i) + i\n+    end do\n+    !$omp end do nowait\n+  !$omp end parallel\n+  do i = 1, 128\n+    if (a(i) /= 2 * i) &\n+      stop\n+  end do\n+end program main"}]}