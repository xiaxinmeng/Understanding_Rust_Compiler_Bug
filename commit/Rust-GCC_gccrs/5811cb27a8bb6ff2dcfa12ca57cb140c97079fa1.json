{"sha": "5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxMWNiMjdhOGJiNmZmMmRjZmExMmNhNTdjYjE0MGM5NzA3OWZhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T06:53:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T06:53:46Z"}, "message": "config.gcc (mips-*-*): Remove definitions of MASK_GAS and OBJECT_FORMAT_ELF.\n\n\t* config.gcc (mips-*-*): Remove definitions of MASK_GAS and\n\tOBJECT_FORMAT_ELF.  Set MASK_SPLIT_ADDR by default if using GNU ld.\n\t* config/mips/mips.h (MASK_GAS): Delete.  Shuffle later masks down.\n\t(TARGET_GAS, TARGET_MIPS_AS): Delete.\n\t(TARGET_GPWORD): Define to true for n32 on IRIX.\n\t(TARGET_SWITCHES): Remove -mmips-as.  Turn -mgas into a no-op.\n\t(MIPS_AS_ASM_SPEC, SUBTARGET_MIPS_AS_ASM_SPEC): Delete.\n\t(GAS_ASM_SPEC): Delete, folding into ASM_SPEC.\n\t(ASM_ABI_DEFAULT_SPEC, TARGET_ASM_SPEC): Delete.\n\t(MDEBUG_ASM_SPEC): Delete, folding into...\n\t(SUBTARGET_ASM_DEBUGGING_SPEC): ...here.\n\t(ASM_SPEC): Inline old GAS_ASM_SPEC.  Use GNU names for ABI switches.\n\t(EXTRA_SPECS): Remove mips_as_asm_spec, gas_asm_spec, target_asm_spec,\n\tsubtarget_mips_as_asm_spec, mdebug_asm_spec.  Use MULTILIB_ABI_DEFAULT\n\tto define asm_abi_default_spec.\n\t(ASM_STABS_OP, ASM_STABN_OP, ASM_STABD_OP): Delete.\n\t(TARGET_ASM_SELECT_SECTION): Delete.\n\t* config/mips/mips.c (MIPS_MAX_FIRST_STACK_STEP): Define to 0x7ff0\n\tfor non-mips16 code, removing previous workaround for SGI assemblers.\n\t(TARGET_ASM_INTEGER, mips_assemble_integer): Delete.\n\t(TARGET_ASM_ALIGNED_DI_OP): Define this instead.\n\t(override_options): Remove !TARGET_GAS and !have_named_sections code.\n\t(print_operand): Fold TARGET_GAS conditionals into asm strings.\n\t(mips_output_filename): Remove !TARGET_GAS code.  Replace use of\n\tASM_STABS_OP and ASM_STABN_OP.\n\t(mips_file_start): Remove TARGET_MIPS_AS/TARGET_GAS checks.\n\t(mips_output_aligned_decl_common): Remove mention of SGI o32 assembler.\n\t(mips_output_function_prologue): Remove !TARGET_GAS code.\n\t(mips_select_rtx_section): Remove !have_named_sections code.\n\t(mips_select_section): Delete.\n\t* config/mips/mips.md (trap): Remove !TARGET_GAS check.\n\t* config/mips/linux.h (TARGET_DEFAULT): Remove use of MASK_GAS.\n\t* config/mips/sdb.h (PUT_SDB_DEF, PUT_SDB_PLAIN_DEF): Delete.\n\t(PUT_SDB_BLOCK_START, PUT_SDB_BLOCK_END): Fold TARGET_GAS conditional.\n\t* config/mips/vxworks.h (ASM_SPEC): As for mips.h.\n\t* config/mips/windiss.h (ASM_SPEC): Likewise.\n\ntestsuite/\n\t* gcc.dg/special/mips-abi.exp: Expect gcc to pass the GNU ABI flags\n\tto the assembler.  Simplify test accordingly.\n\t(asm_abi_flags): Use GNU names.\n\t(check_mips_abi, default_abi): Use string matches against \"-mabi=*\"\n\tto check for ABI flags.\n\nFrom-SVN: r86405", "tree": {"sha": "0ce749c70bb47c216da30c58df972b2dda6fe033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce749c70bb47c216da30c58df972b2dda6fe033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/comments", "author": null, "committer": null, "parents": [{"sha": "032e83482b77e6d7fcc933640bc3fd17448d74a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/032e83482b77e6d7fcc933640bc3fd17448d74a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/032e83482b77e6d7fcc933640bc3fd17448d74a2"}], "stats": {"total": 453, "additions": 135, "deletions": 318}, "files": [{"sha": "cd83846fcf17d9a073b04a84317f928234b44a77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -1,3 +1,42 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (mips-*-*): Remove definitions of MASK_GAS and\n+\tOBJECT_FORMAT_ELF.  Set MASK_SPLIT_ADDR by default if using GNU ld.\n+\t* config/mips/mips.h (MASK_GAS): Delete.  Shuffle later masks down.\n+\t(TARGET_GAS, TARGET_MIPS_AS): Delete.\n+\t(TARGET_GPWORD): Define to true for n32 on IRIX.\n+\t(TARGET_SWITCHES): Remove -mmips-as.  Turn -mgas into a no-op.\n+\t(MIPS_AS_ASM_SPEC, SUBTARGET_MIPS_AS_ASM_SPEC): Delete.\n+\t(GAS_ASM_SPEC): Delete, folding into ASM_SPEC.\n+\t(ASM_ABI_DEFAULT_SPEC, TARGET_ASM_SPEC): Delete.\n+\t(MDEBUG_ASM_SPEC): Delete, folding into...\n+\t(SUBTARGET_ASM_DEBUGGING_SPEC): ...here.\n+\t(ASM_SPEC): Inline old GAS_ASM_SPEC.  Use GNU names for ABI switches.\n+\t(EXTRA_SPECS): Remove mips_as_asm_spec, gas_asm_spec, target_asm_spec,\n+\tsubtarget_mips_as_asm_spec, mdebug_asm_spec.  Use MULTILIB_ABI_DEFAULT\n+\tto define asm_abi_default_spec.\n+\t(ASM_STABS_OP, ASM_STABN_OP, ASM_STABD_OP): Delete.\n+\t(TARGET_ASM_SELECT_SECTION): Delete.\n+\t* config/mips/mips.c (MIPS_MAX_FIRST_STACK_STEP): Define to 0x7ff0\n+\tfor non-mips16 code, removing previous workaround for SGI assemblers.\n+\t(TARGET_ASM_INTEGER, mips_assemble_integer): Delete.\n+\t(TARGET_ASM_ALIGNED_DI_OP): Define this instead.\n+\t(override_options): Remove !TARGET_GAS and !have_named_sections code.\n+\t(print_operand): Fold TARGET_GAS conditionals into asm strings.\n+\t(mips_output_filename): Remove !TARGET_GAS code.  Replace use of\n+\tASM_STABS_OP and ASM_STABN_OP.\n+\t(mips_file_start): Remove TARGET_MIPS_AS/TARGET_GAS checks.\n+\t(mips_output_aligned_decl_common): Remove mention of SGI o32 assembler.\n+\t(mips_output_function_prologue): Remove !TARGET_GAS code.\n+\t(mips_select_rtx_section): Remove !have_named_sections code.\n+\t(mips_select_section): Delete.\n+\t* config/mips/mips.md (trap): Remove !TARGET_GAS check.\n+\t* config/mips/linux.h (TARGET_DEFAULT): Remove use of MASK_GAS.\n+\t* config/mips/sdb.h (PUT_SDB_DEF, PUT_SDB_PLAIN_DEF): Delete.\n+\t(PUT_SDB_BLOCK_START, PUT_SDB_BLOCK_END): Fold TARGET_GAS conditional.\n+\t* config/mips/vxworks.h (ASM_SPEC): As for mips.h.\n+\t* config/mips/windiss.h (ASM_SPEC): Likewise.\n+\n 2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* read-rtl.c (map_value, mapping, macro_group): New structures."}, {"sha": "ecb619b913483f136dea0fa98a6f16ace6312510", "filename": "gcc/config.gcc", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -1278,7 +1278,7 @@ mcore-*-pe*)\n mips-sgi-irix[56]*)\n \ttm_file=\"elfos.h ${tm_file} mips/iris.h\"\n \ttmake_file=\"mips/t-iris mips/t-slibgcc-irix\"\n-\ttarget_cpu_default=\"MASK_GAS|MASK_ABICALLS\"\n+\ttarget_cpu_default=\"MASK_ABICALLS\"\n \tcase ${target} in\n \t*-*-irix5*)\n \t\ttm_file=\"${tm_file} mips/iris5.h\"\n@@ -1304,7 +1304,7 @@ mips-sgi-irix[56]*)\n \tuse_fixproto=yes\n \t;;\n mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n-\ttarget_cpu_default=\"MASK_GAS|MASK_ABICALLS\"\n+\ttarget_cpu_default=\"MASK_ABICALLS\"\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h netbsd.h netbsd-elf.h mips/netbsd.h\"\n \t;;\n mips64*-*-linux*)\n@@ -1333,7 +1333,7 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n \t;;\n mips*-*-openbsd*)\n \ttm_defines=\"OBSD_HAS_DECLARE_FUNCTION_NAME OBSD_HAS_DECLARE_OBJECT OBSD_HAS_CORRECT_SPECS\"\n-\ttarget_cpu_default=\"MASK_GAS|MASK_ABICALLS\"\n+\ttarget_cpu_default=\"MASK_ABICALLS\"\n \ttm_file=\"mips/mips.h openbsd.h mips/openbsd.h mips/sdb.h\"\n \tcase ${target} in\n \tmips*el-*-openbsd*) \n@@ -1356,21 +1356,21 @@ mipsisa32r2-*-elf* | mipsisa32r2el-*-elf*)\n mipsisa64-*-elf* | mipsisa64el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n \ttmake_file=mips/t-isa3264\n-\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_ABI_DEFAULT=ABI_EABI\"\n \tuse_fixproto=yes\n \t;;\n mipsisa64sr71k-*-elf*)\n         tm_file=\"elfos.h ${tm_file} mips/elf.h\"\n         tmake_file=mips/t-sr71k\n-\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_CPU_STRING_DEFAULT=\\\\\\\"sr71000\\\\\\\" MIPS_ABI_DEFAULT=ABI_EABI\"\n \tuse_fixproto=yes\n         ;;\n mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n \ttmake_file=mips/t-elf\n-\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_CPU_STRING_DEFAULT=\\\\\\\"sb1\\\\\\\" MIPS_ABI_DEFAULT=ABI_O64\"\n \tuse_fixproto=yes\n \t;;\n@@ -1382,7 +1382,7 @@ mips-*-elf* | mipsel-*-elf*)\n mips64-*-elf* | mips64el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n \ttmake_file=mips/t-elf\n-\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \tuse_fixproto=yes\n \t;;\n@@ -1394,7 +1394,7 @@ mips64vr-*-elf* | mips64vrel-*-elf*)\n mips64orion-*-elf* | mips64orionel-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elforion.h mips/elf.h\"\n \ttmake_file=mips/t-elf\n-\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64|MASK_GAS\"\n+\ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \tuse_fixproto=yes\n \t;;\n@@ -1407,13 +1407,11 @@ mips-wrs-vxworks)\n \t# have to redo the tm_file list from scratch.\n \ttm_file=\"elfos.h mips/mips.h svr4.h mips/elf.h vxworks.h mips/vxworks.h\"\n \ttmake_file=\"${tmake_file} mips/t-vxworks\"\n-\ttarget_cpu_default=\"MASK_GAS\"\n \t;;\n mips-wrs-windiss)\t# Instruction-level simulator for VxWorks.\n \txm_defines=POSIX\n \ttm_file=\"elfos.h mips/mips.h svr4.h mips/elf.h windiss.h mips/windiss.h\"\n \ttmake_file=\"${tmake_file} mips/t-elf\"\n-\ttarget_cpu_default=\"MASK_GAS\"\n \tthread_file=\n \t;;\n mipstx39-*-elf* | mipstx39el-*-elf*)\n@@ -2598,35 +2596,15 @@ fi\n \t\t;;\n \n \tmips*-*-*)\n-\t\tcase ${target} in\n-\t\tmips*-*-ecoff* | mips*-*-elf*)\n-\t\t\tif test x$gas = xyes\n-\t\t\tthen\n-\t\t\t\tif test x$gnu_ld = xyes\n-\t\t\t\tthen\n-\t\t\t\t\ttarget_cpu_default2=\"MASK_GAS|MASK_SPLIT_ADDR\"\n-\t\t\t\telse\n-\t\t\t\t\ttarget_cpu_default2=\"MASK_GAS\"\n-\t\t\t\tfi\n-\t\t\tfi\n-\t\t\t;;\n-\t\tmips*-*-*)\n-\t\t\tif test x$gas = xyes\n-\t\t\tthen\n-\t\t\t\ttarget_cpu_default2=\"MASK_GAS\"\n-\t\t\tfi\n-\t\t\t;;\n-\t\tesac\n+\t\tif test x$gnu_ld = xyes\n+\t\tthen\n+\t\t\ttarget_cpu_default2=\"MASK_SPLIT_ADDR\"\n+\t\tfi\n \t\tcase ${target} in\n \t\t\tmips*el-*-*)\n \t\t\t\ttm_defines=\"TARGET_ENDIAN_DEFAULT=0 $tm_defines\"\n \t\t\t\t;;\n \t\tesac\n-\t\tcase $tm_file in\n-\t\t\t*mips/elf.h*)\n-\t\t\t\ttm_defines=\"OBJECT_FORMAT_ELF $tm_defines\"\n-\t\t\t\t;;\n-\t\tesac\n \t\tif test \"x$enable_gofast\" = xyes\n \t\tthen\n \t\t\ttm_defines=\"US_SOFTWARE_GOFAST $tm_defines\""}, {"sha": "a4765d494ee330a4cbc0215aea7c73619690e56b", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -51,7 +51,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* If we don't set MASK_ABICALLS, we can't default to PIC.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_ABICALLS|MASK_GAS)\n+#define TARGET_DEFAULT MASK_ABICALLS\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\"}, {"sha": "5067324a05eab1e1128f6e8fe6573844190e176f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 14, "deletions": 99, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -79,10 +79,8 @@ Boston, MA 02111-1307, USA.  */\n    allocate and deallocate the top part of the frame.\n \n    The value in the !mips16 case must be a SMALL_OPERAND and must\n-   preserve the maximum stack alignment.  It could really be 0x7ff0,\n-   but SGI's assemblers implement daddiu $sp,$sp,-0x7ff0 as a\n-   multi-instruction addu sequence.  Use 0x7fe0 to work around this.  */\n-#define MIPS_MAX_FIRST_STACK_STEP (TARGET_MIPS16 ? 0x100 : 0x7fe0)\n+   preserve the maximum stack alignment.  */\n+#define MIPS_MAX_FIRST_STACK_STEP (TARGET_MIPS16 ? 0x100 : 0x7ff0)\n \n /* True if INSN is a mips.md pattern or asm statement.  */\n #define USEFUL_INSN_P(INSN)\t\t\t\t\t\t\\\n@@ -180,7 +178,6 @@ static void mips_set_architecture (const struct mips_cpu_info *);\n static void mips_set_tune (const struct mips_cpu_info *);\n static struct machine_function *mips_init_machine_status (void);\n static void print_operand_reloc (FILE *, rtx, const char **);\n-static bool mips_assemble_integer (rtx, unsigned int, int);\n #if TARGET_IRIX\n static void irix_output_external_libcall (rtx);\n #endif\n@@ -208,8 +205,6 @@ static void mips_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n static int symbolic_expression_p (rtx);\n static void mips_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t     unsigned HOST_WIDE_INT);\n-static void mips_select_section (tree, int, unsigned HOST_WIDE_INT)\n-\t\t\t\t  ATTRIBUTE_UNUSED;\n static bool mips_in_small_data_p (tree);\n static int mips_fpr_return_fields (tree, tree *);\n static bool mips_return_in_msb (tree);\n@@ -613,8 +608,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n #undef TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n-#undef TARGET_ASM_INTEGER\n-#define TARGET_ASM_INTEGER mips_assemble_integer\n+#undef TARGET_ASM_ALIGNED_DI_OP\n+#define TARGET_ASM_ALIGNED_DI_OP \"\\t.dword\\t\"\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE mips_output_function_prologue\n@@ -4063,20 +4058,6 @@ override_options (void)\n \twarning (\"-G is incompatible with PIC code which is the default\");\n     }\n \n-  /* The MIPS and SGI o32 assemblers expect small-data variables to\n-     be declared before they are used.  Although we once had code to\n-     do this, it was very invasive and fragile.  It no longer seems\n-     worth the effort.  */\n-  if (!TARGET_EXPLICIT_RELOCS && !TARGET_GAS)\n-    mips_section_threshold = 0;\n-\n-  /* We switch to small data sections using \".section\", which the native\n-     o32 irix assemblers don't understand.  Disable -G accordingly.\n-     We must do this regardless of command-line options since otherwise\n-     the compiler would abort.  */\n-  if (!targetm.have_named_sections)\n-    mips_section_threshold = 0;\n-\n   /* mips_split_addresses is a half-way house between explicit\n      relocations and the traditional assembler macros.  It can\n      split absolute 32-bit symbolic constants into a high/lo_sum\n@@ -4087,20 +4068,13 @@ override_options (void)\n \n      Although this code should work for -O0, it has traditionally\n      been treated as an optimization.  */\n-  if (TARGET_GAS && !TARGET_MIPS16 && TARGET_SPLIT_ADDRESSES\n+  if (!TARGET_MIPS16 && TARGET_SPLIT_ADDRESSES\n       && optimize && !flag_pic\n       && !ABI_HAS_64BIT_SYMBOLS)\n     mips_split_addresses = 1;\n   else\n     mips_split_addresses = 0;\n \n-  /* Explicit relocations for \"old\" ABIs are a GNU extension.  Unless\n-     the user has said otherwise, assume that they are not available\n-     with assemblers other than gas.  */\n-  if (!TARGET_NEWABI && !TARGET_GAS\n-      && (target_flags_explicit & MASK_EXPLICIT_RELOCS) == 0)\n-    target_flags &= ~MASK_EXPLICIT_RELOCS;\n-\n   /* -mvr4130-align is a \"speed over size\" optimization: it usually produces\n      faster code, but at the expense of more nops.  Enable it at -O3 and\n      above.  */\n@@ -4646,14 +4620,14 @@ print_operand (FILE *file, rtx op, int letter)\n \n \tcase '{':\n \t  if (set_volatile++ == 0)\n-\t    fprintf (file, \"%s.set\\tvolatile\\n\\t\", TARGET_MIPS_AS ? \"\" : \"#\");\n+\t    fputs (\"#.set\\tvolatile\\n\\t\", file);\n \t  break;\n \n \tcase '}':\n \t  if (set_volatile == 0)\n \t    error (\"internal error: %%} found without a %%{ in assembler pattern\");\n \t  else if (--set_volatile == 0)\n-\t    fprintf (file, \"\\n\\t%s.set\\tnovolatile\", (TARGET_MIPS_AS) ? \"\" : \"#\");\n+\t    fputs (\"\\n\\t#.set\\tnovolatile\", file);\n \n \t  break;\n \n@@ -4869,26 +4843,6 @@ print_operand_address (FILE *file, rtx x)\n   abort ();\n }\n \f\n-/* Target hook for assembling integer objects.  It appears that the Irix\n-   6 assembler can't handle 64-bit decimal integers, so avoid printing\n-   such an integer here.  */\n-\n-static bool\n-mips_assemble_integer (rtx x, unsigned int size, int aligned_p)\n-{\n-  if ((TARGET_64BIT || TARGET_GAS) && size == 8 && aligned_p)\n-    {\n-      fputs (\"\\t.dword\\t\", asm_out_file);\n-      if (HOST_BITS_PER_WIDE_INT < 64 || GET_CODE (x) != CONST_INT)\n-\toutput_addr_const (asm_out_file, x);\n-      else\n-\tprint_operand (asm_out_file, x, 'X');\n-      fputc ('\\n', asm_out_file);\n-      return true;\n-    }\n-  return default_assemble_integer (x, size, aligned_p);\n-}\n-\f\n /* When using assembler macros, keep track of all of small-data externs\n    so that mips_file_end can emit the appropriate declarations for them.\n \n@@ -4958,15 +4912,12 @@ mips_output_filename (FILE *stream, const char *name)\n       num_source_filenames += 1;\n       current_function_file = name;\n       ASM_OUTPUT_FILENAME (stream, num_source_filenames, name);\n-      /* This tells mips-tfile that stabs will follow.  */\n-      if (!TARGET_GAS && write_symbols == DBX_DEBUG)\n-\tfprintf (stream, \"\\t#@stabs\\n\");\n     }\n \n   else if (write_symbols == DBX_DEBUG)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (ltext_label_name, \"Ltext\", 0);\n-      fprintf (stream, \"%s\", ASM_STABS_OP);\n+      fputs (\"\\t.stabs\\t\", stream);\n       output_quoted_string (stream, name);\n       fprintf (stream, \",%d,0,0,%s\\n\", N_SOL, &ltext_label_name[1]);\n     }\n@@ -4991,8 +4942,8 @@ mips_output_lineno (FILE *stream, int line)\n   if (write_symbols == DBX_DEBUG)\n     {\n       ++sym_lineno;\n-      fprintf (stream, \"%sLM%d:\\n%s%d,0,%d,%sLM%d\\n\",\n-\t       LOCAL_LABEL_PREFIX, sym_lineno, ASM_STABN_OP, N_SLINE, line,\n+      fprintf (stream, \"%sLM%d:\\n\\t.stabn\\t%d,0,%d,%sLM%d\\n\",\n+\t       LOCAL_LABEL_PREFIX, sym_lineno, N_SLINE, line,\n \t       LOCAL_LABEL_PREFIX, sym_lineno);\n     }\n   else\n@@ -5087,15 +5038,7 @@ mips_file_start (void)\n {\n   default_file_start ();\n \n-  /* Versions of the MIPS assembler before 2.20 generate errors if a branch\n-     inside of a .set noreorder section jumps to a label outside of the .set\n-     noreorder section.  Revision 2.20 just set nobopt silently rather than\n-     fixing the bug.  */\n-\n-  if (TARGET_MIPS_AS && optimize && flag_delayed_branch)\n-    fprintf (asm_out_file, \"\\t.set\\tnobopt\\n\");\n-\n-  if (TARGET_GAS && !TARGET_IRIX)\n+  if (!TARGET_IRIX)\n     {\n       /* Generate a special section to describe the ABI switches used to\n \t produce the resultant binary.  This used to be done by the assembler\n@@ -5212,9 +5155,8 @@ mips_file_end (void)\n     }\n }\n \n-/* Implement ASM_OUTPUT_ALIGNED_DECL_COMMON.  This is usually the same as\n-   the elfos.h version, but we also need to handle -muninit-const-in-rodata\n-   and the limitations of the SGI o32 assembler.  */\n+/* Implement ASM_OUTPUT_ALIGNED_DECL_COMMON.  This is usually the same as the\n+   elfos.h version, but we also need to handle -muninit-const-in-rodata.  */\n \n void\n mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n@@ -5237,7 +5179,6 @@ mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n \t\t\t   size);\n     }\n   else\n-    /* The SGI o32 assembler doesn't accept an alignment.  */\n     mips_declare_common_object (stream, name, \"\\n\\t.comm\\t\",\n \t\t\t\tsize, align, true);\n }\n@@ -5862,12 +5803,6 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n   const char *fnname;\n   HOST_WIDE_INT tsize = cfun->machine->frame.total_size;\n \n-  /* ??? When is this really needed?  At least the GNU assembler does not\n-     need the source filename more than once in the file, beyond what is\n-     emitted by the debug information.  */\n-  if (!TARGET_GAS)\n-    ASM_OUTPUT_SOURCE_FILENAME (file, DECL_SOURCE_FILE (current_function_decl));\n-\n #ifdef SDB_DEBUGGING_INFO\n   if (debug_info_level != DINFO_LEVEL_TERSE && write_symbols == SDB_DEBUG)\n     ASM_OUTPUT_SOURCE_LINE (file, DECL_SOURCE_LINE (current_function_decl), 0);\n@@ -6480,32 +6415,12 @@ mips_select_rtx_section (enum machine_mode mode, rtx x,\n \t  && mips_section_threshold > 0)\n \tnamed_section (0, \".sdata\", 0);\n       else if (flag_pic && symbolic_expression_p (x))\n-\t{\n-\t  if (targetm.have_named_sections)\n-\t    named_section (0, \".data.rel.ro\", 3);\n-\t  else\n-\t    data_section ();\n-\t}\n+\tnamed_section (0, \".data.rel.ro\", 3);\n       else\n \tmergeable_constant_section (mode, align, 0);\n     }\n }\n \n-/* Choose the section to use for DECL.  RELOC is true if its value contains\n-   any relocatable expression.  */\n-\n-static void\n-mips_select_section (tree decl, int reloc,\n-\t\t     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n-{\n-  if (targetm.have_named_sections)\n-    default_elf_select_section (decl, reloc, align);\n-  else\n-    /* The native irix o32 assembler doesn't support named sections.  */\n-    default_select_section (decl, reloc, align);\n-}\n-\n-\n /* Implement TARGET_IN_SMALL_DATA_P.  Return true if it would be safe to\n    access DECL using %gp_rel(...)($gp).  */\n "}, {"sha": "7d83f4f73c316ef9949e4a8f7bbf248f6b71a895", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 38, "deletions": 135, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -133,34 +133,33 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_SPLIT_ADDR\t   0x00000004\t/* Address splitting is enabled.  */\n #define MASK_NO_FUSED_MADD 0x00000008   /* Don't generate floating point\n \t\t\t\t\t   multiply-add operations.  */\n-#define MASK_GAS\t   0x00000010\t/* Gas used instead of MIPS as */\n-#define MASK_EXPLICIT_RELOCS 0x00000020 /* Use relocation operators.  */\n-#define MASK_MEMCPY\t   0x00000040\t/* call memcpy instead of inline code*/\n-#define MASK_SOFT_FLOAT\t   0x00000080\t/* software floating point */\n-#define MASK_FLOAT64\t   0x00000100\t/* fp registers are 64 bits */\n-#define MASK_ABICALLS\t   0x00000200\t/* emit .abicalls/.cprestore/.cpload */\n-#define MASK_XGOT\t   0x00000400\t/* emit big-got PIC */\n-#define MASK_LONG_CALLS\t   0x00000800\t/* Always call through a register */\n-#define MASK_64BIT\t   0x00001000\t/* Use 64 bit GP registers and insns */\n-#define MASK_EMBEDDED_DATA 0x00002000\t/* Reduce RAM usage, not fast code */\n-#define MASK_BIG_ENDIAN\t   0x00004000\t/* Generate big endian code */\n-#define MASK_SINGLE_FLOAT  0x00008000\t/* Only single precision FPU.  */\n-#define MASK_MAD\t   0x00010000\t/* Generate mad/madu as on 4650.  */\n-#define MASK_4300_MUL_FIX  0x00020000   /* Work-around early Vr4300 CPU bug */\n-#define MASK_MIPS16\t   0x00040000\t/* Generate mips16 code */\n+#define MASK_EXPLICIT_RELOCS 0x00000010 /* Use relocation operators.  */\n+#define MASK_MEMCPY\t   0x00000020\t/* call memcpy instead of inline code*/\n+#define MASK_SOFT_FLOAT\t   0x00000040\t/* software floating point */\n+#define MASK_FLOAT64\t   0x00000080\t/* fp registers are 64 bits */\n+#define MASK_ABICALLS\t   0x00000100\t/* emit .abicalls/.cprestore/.cpload */\n+#define MASK_XGOT\t   0x00000200\t/* emit big-got PIC */\n+#define MASK_LONG_CALLS\t   0x00000400\t/* Always call through a register */\n+#define MASK_64BIT\t   0x00000800\t/* Use 64 bit GP registers and insns */\n+#define MASK_EMBEDDED_DATA 0x00001000\t/* Reduce RAM usage, not fast code */\n+#define MASK_BIG_ENDIAN\t   0x00002000\t/* Generate big endian code */\n+#define MASK_SINGLE_FLOAT  0x00004000\t/* Only single precision FPU.  */\n+#define MASK_MAD\t   0x00008000\t/* Generate mad/madu as on 4650.  */\n+#define MASK_4300_MUL_FIX  0x00010000   /* Work-around early Vr4300 CPU bug */\n+#define MASK_MIPS16\t   0x00020000\t/* Generate mips16 code */\n #define MASK_NO_CHECK_ZERO_DIV \\\n-\t\t\t   0x00080000\t/* divide by zero checking */\n-#define MASK_BRANCHLIKELY  0x00100000   /* Generate Branch Likely\n+\t\t\t   0x00040000\t/* divide by zero checking */\n+#define MASK_BRANCHLIKELY  0x00080000   /* Generate Branch Likely\n \t\t\t\t\t   instructions.  */\n #define MASK_UNINIT_CONST_IN_RODATA \\\n-\t\t\t   0x00200000\t/* Store uninitialized\n+\t\t\t   0x00100000\t/* Store uninitialized\n \t\t\t\t\t   consts in rodata */\n-#define MASK_FIX_R4000\t   0x00400000\t/* Work around R4000 errata.  */\n-#define MASK_FIX_R4400\t   0x00800000\t/* Work around R4400 errata.  */\n-#define MASK_FIX_SB1\t   0x01000000\t/* Work around SB-1 errata.  */\n-#define MASK_FIX_VR4120\t   0x02000000   /* Work around VR4120 errata.  */\n-#define MASK_VR4130_ALIGN  0x04000000\t/* Perform VR4130 alignment opts.  */\n-#define MASK_FP_EXCEPTIONS 0x08000000   /* FP exceptions are enabled.  */\n+#define MASK_FIX_R4000\t   0x00200000\t/* Work around R4000 errata.  */\n+#define MASK_FIX_R4400\t   0x00400000\t/* Work around R4400 errata.  */\n+#define MASK_FIX_SB1\t   0x00800000\t/* Work around SB-1 errata.  */\n+#define MASK_FIX_VR4120\t   0x01000000   /* Work around VR4120 errata.  */\n+#define MASK_VR4130_ALIGN  0x02000000\t/* Perform VR4130 alignment opts.  */\n+#define MASK_FP_EXCEPTIONS 0x04000000   /* FP exceptions are enabled.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -178,10 +177,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \t\t\t\t\t/* Mips vs. GNU linker */\n #define TARGET_SPLIT_ADDRESSES\t((target_flags & MASK_SPLIT_ADDR) != 0)\n \n-\t\t\t\t\t/* Mips vs. GNU assembler */\n-#define TARGET_GAS\t\t((target_flags & MASK_GAS) != 0)\n-#define TARGET_MIPS_AS\t\t(!TARGET_GAS)\n-\n \t\t\t\t\t/* Debug Modes */\n #define TARGET_DEBUG_MODE\t((target_flags & MASK_DEBUG) != 0)\n #define TARGET_DEBUG_D_MODE\t((target_flags & MASK_DEBUG_D) != 0)\n@@ -271,22 +266,11 @@ extern const struct mips_cpu_info *mips_tune_info;\n   (!TARGET_MIPS16 && (!TARGET_ABICALLS || TARGET_EXPLICIT_RELOCS))\n \n /* True if .gpword or .gpdword should be used for switch tables.\n-   There are some problems with using these directives with the\n-   native IRIX tools:\n-\n-      - It has been reported that some versions of the native n32\n-\tassembler mishandle .gpword, complaining that symbols are\n-\tglobal when they are in fact local.\n-\n-      - The native assemblers don't understand .gpdword.\n-\n-      - Although GAS does understand .gpdword, the native linker\n-\tmishandles the relocations GAS generates (R_MIPS_GPREL32\n-\tfollowed by R_MIPS_64).\n \n-   We therefore disable GP-relative switch tables for n32 and n64\n-   on IRIX targets.  */\n-#define TARGET_GPWORD (TARGET_ABICALLS && !(TARGET_NEWABI && TARGET_IRIX))\n+   Although GAS does understand .gpdword, the SGI linker mishandles\n+   the relocations GAS generates (R_MIPS_GPREL32 followed by R_MIPS_64).\n+   We therefore disable GP-relative switch tables for n64 on IRIX targets.  */\n+#define TARGET_GPWORD (TARGET_ABICALLS && !(mips_abi == ABI_64 && TARGET_IRIX))\n \n \t\t\t\t\t/* Generate mips16 code */\n #define TARGET_MIPS16\t\t((target_flags & MASK_MIPS16) != 0)\n@@ -533,10 +517,8 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"Optimize lui/addiu address loads\")},\t\t\t\t\\\n   {\"no-split-addresses\", -MASK_SPLIT_ADDR,\t\t\t\t\\\n      N_(\"Don't optimize lui/addiu address loads\")},\t\t\t\\\n-  {\"mips-as\",\t\t -MASK_GAS,\t\t\t\t\t\\\n-     N_(\"Use MIPS as\")},\t\t\t\t\t\t\\\n-  {\"gas\",\t\t  MASK_GAS,\t\t\t\t\t\\\n-     N_(\"Use GNU as\")},\t\t\t\t\t\t\t\\\n+  {\"gas\",\t\t  0,\t\t\t\t\t\t\\\n+     N_(\"Use GNU as (now ignored)\")},\t\t\t\t\t\\\n   {\"gpOPT\",\t\t  0,\t\t\t\t\t\t\\\n      N_(\"Use GP relative sdata/sbss sections (now ignored)\")},\t\t\\\n   {\"gpopt\",\t\t  0,\t\t\t\t\t\t\\\n@@ -1004,28 +986,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n #endif\n \n \f\n-/* Assembler specs.  */\n-\n-/* MIPS_AS_ASM_SPEC is passed when using the MIPS assembler rather\n-   than gas.  */\n-\n-#define MIPS_AS_ASM_SPEC \"\\\n-%{!.s:-nocpp} %{.s: %{cpp} %{nocpp}} \\\n-%{pipe: %e-pipe is not supported} \\\n-%{K} %(subtarget_mips_as_asm_spec)\"\n-\n-/* SUBTARGET_MIPS_AS_ASM_SPEC is passed when using the MIPS assembler\n-   rather than gas.  It may be overridden by subtargets.  */\n-\n-#ifndef SUBTARGET_MIPS_AS_ASM_SPEC\n-#define SUBTARGET_MIPS_AS_ASM_SPEC \"%{v}\"\n-#endif\n-\n-/* GAS_ASM_SPEC is passed when using gas, rather than the MIPS\n-   assembler.  */\n-\n-#define GAS_ASM_SPEC \"%{mtune=*} %{v}\"\n-\n #define SUBTARGET_TARGET_SWITCHES\n \n #ifndef MIPS_ABI_DEFAULT\n@@ -1036,48 +996,24 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n #if MIPS_ABI_DEFAULT == ABI_32\n #define MULTILIB_ABI_DEFAULT \"mabi=32\"\n-#define ASM_ABI_DEFAULT_SPEC \"-32\"\n #endif\n \n #if MIPS_ABI_DEFAULT == ABI_O64\n #define MULTILIB_ABI_DEFAULT \"mabi=o64\"\n-#define ASM_ABI_DEFAULT_SPEC \"-mabi=o64\"\n #endif\n \n #if MIPS_ABI_DEFAULT == ABI_N32\n #define MULTILIB_ABI_DEFAULT \"mabi=n32\"\n-#define ASM_ABI_DEFAULT_SPEC \"-n32\"\n #endif\n \n #if MIPS_ABI_DEFAULT == ABI_64\n #define MULTILIB_ABI_DEFAULT \"mabi=64\"\n-#define ASM_ABI_DEFAULT_SPEC \"-64\"\n #endif\n \n #if MIPS_ABI_DEFAULT == ABI_EABI\n #define MULTILIB_ABI_DEFAULT \"mabi=eabi\"\n-#define ASM_ABI_DEFAULT_SPEC \"-mabi=eabi\"\n #endif\n \n-/* TARGET_ASM_SPEC is used to select either MIPS_AS_ASM_SPEC or\n-   GAS_ASM_SPEC as the default, depending upon the value of\n-   TARGET_DEFAULT.  */\n-\n-#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GAS) != 0\n-/* GAS */\n-\n-#define TARGET_ASM_SPEC \"\\\n-%{mmips-as: %(mips_as_asm_spec)} \\\n-%{!mmips-as: %(gas_asm_spec)}\"\n-\n-#else /* not GAS */\n-\n-#define TARGET_ASM_SPEC \"\\\n-%{!mgas: %(mips_as_asm_spec)} \\\n-%{mgas: %(gas_asm_spec)}\"\n-\n-#endif /* not GAS */\n-\n /* SUBTARGET_ASM_OPTIMIZING_SPEC handles passing optimization options\n    to the assembler.  It may be overridden by subtargets.  */\n #ifndef SUBTARGET_ASM_OPTIMIZING_SPEC\n@@ -1087,40 +1023,28 @@ extern const struct mips_cpu_info *mips_tune_info;\n #endif\n \n /* SUBTARGET_ASM_DEBUGGING_SPEC handles passing debugging options to\n-   the assembler.  It may be overridden by subtargets.  */\n+   the assembler.  It may be overridden by subtargets.\n+\n+   Beginning with gas 2.13, -mdebug must be passed to correctly handle\n+   COFF debugging info.  */\n+\n #ifndef SUBTARGET_ASM_DEBUGGING_SPEC\n #define SUBTARGET_ASM_DEBUGGING_SPEC \"\\\n %{g} %{g0} %{g1} %{g2} %{g3} \\\n %{ggdb:-g} %{ggdb0:-g0} %{ggdb1:-g1} %{ggdb2:-g2} %{ggdb3:-g3} \\\n %{gstabs:-g} %{gstabs0:-g0} %{gstabs1:-g1} %{gstabs2:-g2} %{gstabs3:-g3} \\\n %{gstabs+:-g} %{gstabs+0:-g0} %{gstabs+1:-g1} %{gstabs+2:-g2} %{gstabs+3:-g3} \\\n %{gcoff:-g} %{gcoff0:-g0} %{gcoff1:-g1} %{gcoff2:-g2} %{gcoff3:-g3} \\\n-%(mdebug_asm_spec)\"\n+%{gcoff*:-mdebug} %{!gcoff*:-no-mdebug}\"\n #endif\n \n-/* Beginning with gas 2.13, -mdebug must be passed to correctly handle COFF\n-   debugging info.  */\n-#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GAS) != 0\n-/* GAS */\n-#define MDEBUG_ASM_SPEC \"%{gcoff*:-mdebug} \\\n-                         %{!gcoff*:-no-mdebug}\"\n-#else /* not GAS */\n-#define MDEBUG_ASM_SPEC \"\"\n-#endif /* not GAS */\n-\n /* SUBTARGET_ASM_SPEC is always passed to the assembler.  It may be\n    overridden by subtargets.  */\n \n #ifndef SUBTARGET_ASM_SPEC\n #define SUBTARGET_ASM_SPEC \"\"\n #endif\n \n-/* ASM_SPEC is the set of arguments to pass to the assembler.  Note: we\n-   pass -mgp32, -mgp64, -march, -mabi=eabi and -mabi=o64 regardless of\n-   whether we're using GAS.  These options can only be used properly\n-   with GAS, and it is better to get an error from a non-GAS assembler\n-   than to silently generate bad code.  */\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} \\\n@@ -1129,10 +1053,9 @@ extern const struct mips_cpu_info *mips_tune_info;\n %{mfix-vr4120} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n-%{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \\\n-%{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \\\n+%{mabi=*} %{!mabi*: %(asm_abi_default_spec)} \\\n %{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n-%(target_asm_spec) \\\n+%{mtune=*} %{v} \\\n %(subtarget_asm_spec)\"\n \n /* Extra switches sometimes passed to the linker.  */\n@@ -1188,15 +1111,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n   { \"subtarget_cc1_spec\", SUBTARGET_CC1_SPEC },\t\t\t\t\\\n   { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\t\\\n-  { \"mips_as_asm_spec\", MIPS_AS_ASM_SPEC },\t\t\t\t\\\n-  { \"gas_asm_spec\", GAS_ASM_SPEC },\t\t\t\t\t\\\n-  { \"target_asm_spec\", TARGET_ASM_SPEC },\t\t\t\t\\\n-  { \"subtarget_mips_as_asm_spec\", SUBTARGET_MIPS_AS_ASM_SPEC }, \t\\\n   { \"subtarget_asm_optimizing_spec\", SUBTARGET_ASM_OPTIMIZING_SPEC },\t\\\n   { \"subtarget_asm_debugging_spec\", SUBTARGET_ASM_DEBUGGING_SPEC },\t\\\n-  { \"mdebug_asm_spec\", MDEBUG_ASM_SPEC },\t\t\t\t\\\n   { \"subtarget_asm_spec\", SUBTARGET_ASM_SPEC },\t\t\t\t\\\n-  { \"asm_abi_default_spec\", ASM_ABI_DEFAULT_SPEC },\t\t\t\\\n+  { \"asm_abi_default_spec\", \"-\" MULTILIB_ABI_DEFAULT },\t\t\t\\\n   { \"endian_spec\", ENDIAN_SPEC },\t\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n@@ -1217,15 +1135,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n /* By default, turn on GDB extensions.  */\n #define DEFAULT_GDB_EXTENSIONS 1\n \n-/* If we are passing smuggling stabs through the MIPS ECOFF object\n-   format, put a comment in front of the .stab<x> operation so\n-   that the MIPS assembler does not choke.  The mips-tfile program\n-   will correctly put the stab into the object file.  */\n-\n-#define ASM_STABS_OP\t((TARGET_GAS) ? \"\\t.stabs\\t\" : \" #.stabs\\t\")\n-#define ASM_STABN_OP\t((TARGET_GAS) ? \"\\t.stabn\\t\" : \" #.stabn\\t\")\n-#define ASM_STABD_OP\t((TARGET_GAS) ? \"\\t.stabd\\t\" : \" #.stabd\\t\")\n-\n /* Local compiler-generated symbols must have a prefix that the assembler\n    understands.   By default, this is $, although some targets (e.g.,\n    NetBSD-ELF) need to override this.  */\n@@ -2997,12 +2906,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.rdata\"\t/* read-only data */\n-\n-/* Given a decl node or constant node, choose the section to output it in\n-   and select that section.  */\n-\n-#undef  TARGET_ASM_SELECT_SECTION\n-#define TARGET_ASM_SELECT_SECTION  mips_select_section\n \f\n #define ASM_OUTPUT_REG_PUSH(STREAM,REGNO)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\"}, {"sha": "26ab551b013217ee8cc2d1abe21bf0ac16542747", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -376,8 +376,7 @@\n {\n   if (ISA_HAS_COND_TRAP)\n     return \"teq\\t$0,$0\";\n-  /* The IRIX 6 O32 assembler requires the first break operand.  */\n-  else if (TARGET_MIPS16 || !TARGET_GAS)\n+  else if (TARGET_MIPS16)\n     return \"break 0\";\n   else\n     return \"break\";"}, {"sha": "4192b71a8d4bc6d19e3b8ff3b8f51e73030b6898", "filename": "gcc/config/mips/sdb.h", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fsdb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fsdb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdb.h?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -34,20 +34,6 @@ extern int sdb_label_count;\n /* Starting line of current function.  */\n extern int sdb_begin_function_line;\n \n-#define PUT_SDB_DEF(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file, \"\\t%s.def\\t\",\t\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\");\t\t\t\\\n-  ASM_OUTPUT_LABELREF (asm_out_file, a); \t\t\\\n-  fputc (';', asm_out_file);\t\t\t\t\\\n-} while (0)\n-\n-#define PUT_SDB_PLAIN_DEF(a)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file, \"\\t%s.def\\t.%s;\",\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\", (a));\t\t\\\n-} while (0)\n-\n /* For block start and end, we create labels, so that\n    later we can figure out where the correct offset is.\n    The normal .ent/.end serve well enough for functions,\n@@ -56,10 +42,9 @@ do {\t\t\t\t\t\t\t\\\n #define PUT_SDB_BLOCK_START(LINE)\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   fprintf (asm_out_file,\t\t\t\t\\\n-\t   \"%sLb%d:\\n\\t%s.begin\\t%sLb%d\\t%d\\n\",\t\t\\\n+\t   \"%sLb%d:\\n\\t.begin\\t%sLb%d\\t%d\\n\",\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\\\n \t   sdb_label_count,\t\t\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\",\t\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\\\n \t   sdb_label_count,\t\t\t\t\\\n \t   (LINE));\t\t\t\t\t\\\n@@ -69,10 +54,9 @@ do {\t\t\t\t\t\t\t\\\n #define PUT_SDB_BLOCK_END(LINE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n   fprintf (asm_out_file,\t\t\t\t\\\n-\t   \"%sLe%d:\\n\\t%s.bend\\t%sLe%d\\t%d\\n\",\t\t\\\n+\t   \"%sLe%d:\\n\\t.bend\\t%sLe%d\\t%d\\n\",\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\\\n \t   sdb_label_count,\t\t\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\",\t\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\\\n \t   sdb_label_count,\t\t\t\t\\\n \t   (LINE));\t\t\t\t\t\\"}, {"sha": "33ca077896e7faa71e87d23f8b03f6b623960799", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -45,10 +45,9 @@ Boston, MA 02111-1307, USA.  */\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n-%{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \\\n-%{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \\\n+%{mabi=*} %{!mabi*: %(asm_abi_default_spec)} \\\n %{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n-%(target_asm_spec) \\\n+%{mtune=*} %{v} \\\n %(subtarget_asm_spec)\"\n \n #undef LINK_SPEC"}, {"sha": "1ee112c6bccf12200dfabcf99a0691fe5f8d36da", "filename": "gcc/config/mips/windiss.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fwindiss.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Fconfig%2Fmips%2Fwindiss.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fwindiss.h?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -45,10 +45,9 @@ Boston, MA 02111-1307, USA.  */\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n-%{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \\\n-%{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \\\n+%{mabi=*} %{!mabi*: %(asm_abi_default_spec)} \\\n %{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n-%(target_asm_spec) \\\n+%{mtune=*} %{v} \\\n %(subtarget_asm_spec)\"\n \n #undef LINK_SPEC"}, {"sha": "d3627a076afea8bfd783bad74ac8f3757a185606", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -1,3 +1,11 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.dg/special/mips-abi.exp: Expect gcc to pass the GNU ABI flags\n+\tto the assembler.  Simplify test accordingly.\n+\t(asm_abi_flags): Use GNU names.\n+\t(check_mips_abi, default_abi): Use string matches against \"-mabi=*\"\n+\tto check for ABI flags.\n+\n 2004-08-22  Andrew Pinski  <apinski@apple.com>\n \n \t* g++.dg/opt/pr14029.C: New test."}, {"sha": "3c900d7a82e0a3a2e5627fdf095dd3a2007d4f46", "filename": "gcc/testsuite/gcc.dg/special/mips-abi.exp", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fmips-abi.exp?ref=5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2002 Free Software Foundation, Inc.\n+#   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -25,9 +25,8 @@ if {![istarget mips*-*-*] || [gcc_target_object_format] != \"elf\"} {\n     return\n }\n \n-# A list of all assembler ABI flags.  We should use SGI-compatible\n-# flags where possible.\n-set asm_abi_flags {-32 -n32 -64 -mabi=o64 -mabi=eabi}\n+# A list of all assembler ABI flags.\n+set asm_abi_flags {-mabi=32 -mabi=n32 -mabi=64 -mabi=o64 -mabi=eabi}\n \n # Try to assemble mips-abi.s (an empty file), passing -v in order to\n # get the assembler command line.  Check whether an appropriate ABI\n@@ -38,7 +37,7 @@ set asm_abi_flags {-32 -n32 -64 -mabi=o64 -mabi=eabi}\n #   ABI flag is expected.\n # FLAGS is a list of options for gcc.\n proc check_mips_abi {name abis flags} {\n-    global srcdir subdir asm_abi_flags\n+    global srcdir subdir\n \n     lappend flags \"-v\"\n     set lines [gcc_target_compile \"$srcdir/$subdir/mips-abi.s\" \\\n@@ -54,7 +53,7 @@ proc check_mips_abi {name abis flags} {\n \t\t# ABI options.\n \t\tif {[lsearch -exact $abis $arg] >= 0} {\n \t\t    incr good\n-\t\t} elseif {[lsearch -exact $asm_abi_flags $arg] >= 0} {\n+\t\t} elseif {[string match \"-mabi=*\" $arg]} {\n \t\t    incr bad\n \t\t}\n \t    }\n@@ -83,29 +82,23 @@ if {[board_info $target exists multilib_flags]} {\n # See whether the default command line specifies an ABI.\n set default_abi \"\"\n foreach flag $default_flags {\n-    if {[string first \"-mabi\" $flag] == 0} {\n+    if {[string match \"-mabi=*\" $flag]} {\n \tset default_abi $flag\n     }\n }\n \n # If the command line does specify an ABI, just check for the\n # appropriate assembler flag.\n-switch -- $default_abi {\n-    -mabi=eabi { check_mips_abi \"EABI\" \"-mabi=eabi\" \"\" }\n-    -mabi=32 { check_mips_abi \"o32\" \"-32\" \"\" }\n-    -mabi=n32 { check_mips_abi \"n32\" \"-n32\" \"\" }\n-    -mabi=o64 { check_mips_abi \"o64\" \"-mabi=o64\" \"\" }\n-    -mabi=64 { check_mips_abi \"n64\" \"-64\" \"\" }\n-    \"\" {\n-\t# An ABI should be passed to the assembler by default.\n-\t# It doesn't seem worthwhile to duplicate the\n-\t# configuration to ABI logic here, so just accept any ABI.\n-\tcheck_mips_abi \"default\" $asm_abi_flags \"\"\n+if {$default_abi != \"\"} {\n+    check_mips_abi \"command line\" $default_abi \"\"\n+} else {\n+    # An ABI should be passed to the assembler by default.\n+    # It doesn't seem worthwhile to duplicate the\n+    # configuration to ABI logic here, so just accept any ABI.\n+    check_mips_abi \"default\" $asm_abi_flags \"\"\n \n-\t# See whether passing a -mabi flag does the right thing.\n-\t# Only try ABIs that the SGI assembler also understands.\n-\tcheck_mips_abi \"o32\" \"-32\" \"-mabi=32\"\n-\tcheck_mips_abi \"n32\" \"-n32\" \"-mabi=n32\"\n-\tcheck_mips_abi \"64\" \"-64\" \"-mabi=64\"\n+    # See whether passing a -mabi flag does the right thing.\n+    foreach abi $asm_abi_flags {\n+\tcheck_mips_abi $abi $abi $abi\n     }\n }"}]}