{"sha": "12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlM2MzOTYxNDM2ZTBiYzE5ZjdmY2JmN2RkNWJhNmQ1NTZiMDgwMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-12T06:23:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-12T06:23:08Z"}, "message": "re PR go/52084 (go tests fail to link on powerpc-linux-gnu (undefined reference to __sync_add_and_fetch_8))\n\n\tPR go/52084\nlibgo: Provide more __sync functions if required.\n\nFrom-SVN: r184138", "tree": {"sha": "d088dbdf76ccf89230dc607d000488ace3bb43e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d088dbdf76ccf89230dc607d000488ace3bb43e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/comments", "author": null, "committer": null, "parents": [{"sha": "22d87829789be10d2b3a88c2ee6253d88ff88d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d87829789be10d2b3a88c2ee6253d88ff88d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d87829789be10d2b3a88c2ee6253d88ff88d6b"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "ae81ff45b471665bd7602585bddf995e3c8e9aff", "filename": "libgo/config.h.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "patch": "@@ -105,10 +105,18 @@\n /* Define to 1 if <math.h> defines struct exception */\n #undef HAVE_STRUCT_EXCEPTION\n \n+/* Define to 1 if the compiler provides the __sync_add_and_fetch function for\n+   uint64 */\n+#undef HAVE_SYNC_ADD_AND_FETCH_8\n+\n /* Define to 1 if the compiler provides the __sync_bool_compare_and_swap\n    function for uint32 */\n #undef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4\n \n+/* Define to 1 if the compiler provides the __sync_bool_compare_and_swap\n+   function for uint64 */\n+#undef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_8\n+\n /* Define to 1 if the compiler provides the __sync_fetch_and_add function for\n    uint32 */\n #undef HAVE_SYNC_FETCH_AND_ADD_4"}, {"sha": "1ce89d223609e79bc383980a4510c2b8c597130d", "filename": "libgo/configure", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "patch": "@@ -14667,6 +14667,35 @@ $as_echo \"#define HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_bool_compare_and_swap_8\" >&5\n+$as_echo_n \"checking for __sync_bool_compare_and_swap_8... \" >&6; }\n+if test \"${libgo_cv_func___sync_bool_compare_and_swap_8+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+typedef unsigned int uint64  __attribute__ ((mode (DI)));\n+uint64 i;\n+int main() { return __sync_bool_compare_and_swap (&i, 0, 1); }\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgo_cv_func___sync_bool_compare_and_swap_8=yes\n+else\n+  libgo_cv_func___sync_bool_compare_and_swap_8=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_func___sync_bool_compare_and_swap_8\" >&5\n+$as_echo \"$libgo_cv_func___sync_bool_compare_and_swap_8\" >&6; }\n+if test \"$libgo_cv_func___sync_bool_compare_and_swap_8\" = \"yes\"; then\n+\n+$as_echo \"#define HAVE_SYNC_BOOL_COMPARE_AND_SWAP_8 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_fetch_and_add_4\" >&5\n $as_echo_n \"checking for __sync_fetch_and_add_4... \" >&6; }\n if test \"${libgo_cv_func___sync_fetch_and_add_4+set}\" = set; then :\n@@ -14696,6 +14725,35 @@ $as_echo \"#define HAVE_SYNC_FETCH_AND_ADD_4 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_add_and_fetch_8\" >&5\n+$as_echo_n \"checking for __sync_add_and_fetch_8... \" >&6; }\n+if test \"${libgo_cv_func___sync_add_and_fetch_8+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+typedef unsigned int uint64  __attribute__ ((mode (DI)));\n+uint64 i;\n+int main() { return __sync_add_and_fetch (&i, 1); }\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgo_cv_func___sync_add_and_fetch_8=yes\n+else\n+  libgo_cv_func___sync_add_and_fetch_8=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_func___sync_add_and_fetch_8\" >&5\n+$as_echo \"$libgo_cv_func___sync_add_and_fetch_8\" >&6; }\n+if test \"$libgo_cv_func___sync_add_and_fetch_8\" = \"yes\"; then\n+\n+$as_echo \"#define HAVE_SYNC_ADD_AND_FETCH_8 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether compiler supports -minline-all-stringops\" >&5\n $as_echo_n \"checking whether compiler supports -minline-all-stringops... \" >&6; }\n if test \"${libgo_cv_c_stringops+set}\" = set; then :"}, {"sha": "c3c1f5e94526f0944470455f34300472dbfcb03e", "filename": "libgo/configure.ac", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "patch": "@@ -497,6 +497,20 @@ if test \"$libgo_cv_func___sync_bool_compare_and_swap_4\" = \"yes\"; then\n     [Define to 1 if the compiler provides the __sync_bool_compare_and_swap function for uint32])\n fi\n \n+AC_CACHE_CHECK([for __sync_bool_compare_and_swap_8],\n+[libgo_cv_func___sync_bool_compare_and_swap_8],\n+[AC_LINK_IFELSE([\n+typedef unsigned int uint64  __attribute__ ((mode (DI)));\n+uint64 i;\n+int main() { return __sync_bool_compare_and_swap (&i, 0, 1); }\n+],\n+[libgo_cv_func___sync_bool_compare_and_swap_8=yes],\n+[libgo_cv_func___sync_bool_compare_and_swap_8=no])])\n+if test \"$libgo_cv_func___sync_bool_compare_and_swap_8\" = \"yes\"; then\n+  AC_DEFINE(HAVE_SYNC_BOOL_COMPARE_AND_SWAP_8, 1,\n+    [Define to 1 if the compiler provides the __sync_bool_compare_and_swap function for uint64])\n+fi\n+\n AC_CACHE_CHECK([for __sync_fetch_and_add_4],\n [libgo_cv_func___sync_fetch_and_add_4],\n [AC_LINK_IFELSE([\n@@ -511,6 +525,20 @@ if test \"$libgo_cv_func___sync_fetch_and_add_4\" = \"yes\"; then\n     [Define to 1 if the compiler provides the __sync_fetch_and_add function for uint32])\n fi\n \n+AC_CACHE_CHECK([for __sync_add_and_fetch_8],\n+[libgo_cv_func___sync_add_and_fetch_8],\n+[AC_LINK_IFELSE([\n+typedef unsigned int uint64  __attribute__ ((mode (DI)));\n+uint64 i;\n+int main() { return __sync_add_and_fetch (&i, 1); }\n+],\n+[libgo_cv_func___sync_add_and_fetch_8=yes],\n+[libgo_cv_func___sync_add_and_fetch_8=no])])\n+if test \"$libgo_cv_func___sync_add_and_fetch_8\" = \"yes\"; then\n+  AC_DEFINE(HAVE_SYNC_ADD_AND_FETCH_8, 1,\n+    [Define to 1 if the compiler provides the __sync_add_and_fetch function for uint64])\n+fi\n+\n dnl For x86 we want to use the -minline-all-stringops option to avoid\n dnl forcing a stack split when calling memcpy and friends.\n AC_CACHE_CHECK([whether compiler supports -minline-all-stringops],"}, {"sha": "748a62d59f579c30fb7df75066bc0ca031cec303", "filename": "libgo/runtime/thread.c", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fruntime%2Fthread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803/libgo%2Fruntime%2Fthread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fthread.c?ref=12e3c3961436e0bc19f7fcbf7dd5ba6d556b0803", "patch": "@@ -11,7 +11,7 @@\n /* For targets which don't have the required sync support.  Really\n    these should be provided by gcc itself.  FIXME.  */\n \n-#if !defined (HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4) || !defined (HAVE_SYNC_FETCH_AND_ADD_4)\n+#if !defined (HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4) || !defined (HAVE_SYNC_BOOL_COMPARE_AND_SWAP_8) || !defined (HAVE_SYNC_FETCH_AND_ADD_4) || !defined (HAVE_SYNC_ADD_AND_FETCH_8)\n \n static pthread_mutex_t sync_lock = PTHREAD_MUTEX_INITIALIZER;\n \n@@ -48,6 +48,37 @@ __sync_bool_compare_and_swap_4 (uint32* ptr, uint32 old, uint32 new)\n \n #endif\n \n+#ifndef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_8\n+\n+_Bool\n+__sync_bool_compare_and_swap_8 (uint64*, uint64, uint64)\n+  __attribute__ ((visibility (\"hidden\")));\n+\n+_Bool\n+__sync_bool_compare_and_swap_8 (uint64* ptr, uint64 old, uint64 new)\n+{\n+  int i;\n+  _Bool ret;\n+\n+  i = pthread_mutex_lock (&sync_lock);\n+  __go_assert (i == 0);\n+\n+  if (*ptr != old)\n+    ret = 0;\n+  else\n+    {\n+      *ptr = new;\n+      ret = 1;\n+    }\n+\n+  i = pthread_mutex_unlock (&sync_lock);\n+  __go_assert (i == 0);\n+\n+  return ret;\n+}\n+\n+#endif\n+\n #ifndef HAVE_SYNC_FETCH_AND_ADD_4\n \n uint32\n@@ -74,6 +105,32 @@ __sync_fetch_and_add_4 (uint32* ptr, uint32 add)\n \n #endif\n \n+#ifndef HAVE_SYNC_ADD_AND_FETCH_8\n+\n+uint64\n+__sync_add_and_fetch_8 (uint64*, uint64)\n+  __attribute__ ((visibility (\"hidden\")));\n+\n+uint64\n+__sync_add_and_fetch_8 (uint64* ptr, uint64 add)\n+{\n+  int i;\n+  uint64 ret;\n+\n+  i = pthread_mutex_lock (&sync_lock);\n+  __go_assert (i == 0);\n+\n+  *ptr += add;\n+  ret = *ptr;\n+\n+  i = pthread_mutex_unlock (&sync_lock);\n+  __go_assert (i == 0);\n+\n+  return ret;\n+}\n+\n+#endif\n+\n // Called to initialize a new m (including the bootstrap m).\n void\n runtime_minit(void)"}]}