{"sha": "e32329336b0430340ddfec171b2258ff1e65ffb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyMzI5MzM2YjA0MzAzNDBkZGZlYzE3MWIyMjU4ZmYxZTY1ZmZiMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-26T13:26:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-26T13:26:31Z"}, "message": "fold-const.c (fold <MULT_EXPR>): Optimize (C1/X)*C2 into (C1*C2)/X when unsafe math optimizations are allowed.\n\n\n\t* fold-const.c (fold <MULT_EXPR>): Optimize (C1/X)*C2 into\n\t(C1*C2)/X when unsafe math optimizations are allowed.\n\t(fold <RDIV_EXPR>): Optimize C1/(X*C2) into (C1/C2)/X with unsafe\n\tmath optimizations.  Minor code clean-ups.  Recursively call\n\tfold when constructing sub-expressions.\n\n\t* gcc.dg/20030826-1.c: New test case.\n\nFrom-SVN: r70807", "tree": {"sha": "79ebdecf429956376ddd06509d488422d9478694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ebdecf429956376ddd06509d488422d9478694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32329336b0430340ddfec171b2258ff1e65ffb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32329336b0430340ddfec171b2258ff1e65ffb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32329336b0430340ddfec171b2258ff1e65ffb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32329336b0430340ddfec171b2258ff1e65ffb1/comments", "author": null, "committer": null, "parents": [{"sha": "cf42869d28e645cd7bffb3a3a948807dffb93d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf42869d28e645cd7bffb3a3a948807dffb93d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf42869d28e645cd7bffb3a3a948807dffb93d6b"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "1b7d9708fa6be2706fa27e674062283f6a441d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e32329336b0430340ddfec171b2258ff1e65ffb1", "patch": "@@ -1,3 +1,11 @@\n+2003-08-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold <MULT_EXPR>): Optimize (C1/X)*C2 into\n+\t(C1*C2)/X when unsafe math optimizations are allowed.\n+\t(fold <RDIV_EXPR>): Optimize C1/(X*C2) into (C1/C2)/X with unsafe\n+\tmath optimizations.  Minor code clean-ups.  Recursively call\n+\tfold when constructing sub-expressions.\n+\n 2003-08-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (fold_builtin_bitop): New function to perform constant"}, {"sha": "efa2db966373309896db2dcedaef9cfe7e7e2db8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e32329336b0430340ddfec171b2258ff1e65ffb1", "patch": "@@ -6060,6 +6060,19 @@ fold (tree expr)\n \t      && real_minus_onep (arg1))\n \t    return fold (build1 (NEGATE_EXPR, type, arg0));\n \n+\t  /* Convert (C1/X)*C2 into (C1*C2)/X.  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && TREE_CODE (arg0) == RDIV_EXPR\n+\t      && TREE_CODE (arg1) == REAL_CST\n+\t      && TREE_CODE (TREE_OPERAND (arg0, 0)) == REAL_CST)\n+\t    {\n+\t      tree tem = const_binop (MULT_EXPR, TREE_OPERAND (arg0, 0),\n+\t\t\t\t      arg1, 0);\n+\t      if (tem)\n+\t\treturn fold (build (RDIV_EXPR, type, tem,\n+\t\t\t\t    TREE_OPERAND (arg0, 1)));\n+\t    }\n+\n \t  if (flag_unsafe_math_optimizations)\n \t    {\n \t      enum built_in_function fcode0 = builtin_mathfn_code (arg0);\n@@ -6393,7 +6406,7 @@ fold (tree expr)\n \t\t\t\t\t  arg1, 0)))\n \t    return fold (build (MULT_EXPR, type, arg0, tem));\n \t  /* Find the reciprocal if optimizing and the result is exact.  */\n-\t  else if (optimize)\n+\t  if (optimize)\n \t    {\n \t      REAL_VALUE_TYPE r;\n \t      r = TREE_REAL_CST (arg1);\n@@ -6407,19 +6420,29 @@ fold (tree expr)\n       /* Convert A/B/C to A/(B*C).  */\n       if (flag_unsafe_math_optimizations\n \t  && TREE_CODE (arg0) == RDIV_EXPR)\n-\t{\n-\t  return fold (build (RDIV_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t\t      build (MULT_EXPR, type, TREE_OPERAND (arg0, 1),\n-\t\t\t\t     arg1)));\n-\t}\n+\treturn fold (build (RDIV_EXPR, type, TREE_OPERAND (arg0, 0),\n+\t\t\t    fold (build (MULT_EXPR, type,\n+\t\t\t\t\t TREE_OPERAND (arg0, 1), arg1))));\n+\n       /* Convert A/(B/C) to (A/B)*C.  */\n       if (flag_unsafe_math_optimizations\n \t  && TREE_CODE (arg1) == RDIV_EXPR)\n+\treturn fold (build (MULT_EXPR, type,\n+\t\t\t    fold (build (RDIV_EXPR, type, arg0,\n+\t\t\t\t\t TREE_OPERAND (arg1, 0))),\n+\t\t\t    TREE_OPERAND (arg1, 1)));\n+\n+      /* Convert C1/(X*C2) into (C1/C2)/X.  */\n+      if (flag_unsafe_math_optimizations\n+\t  && TREE_CODE (arg1) == MULT_EXPR\n+\t  && TREE_CODE (arg0) == REAL_CST\n+\t  && TREE_CODE (TREE_OPERAND (arg1, 1)) == REAL_CST)\n \t{\n-\t  return fold (build (MULT_EXPR, type,\n-\t\t\t      build (RDIV_EXPR, type, arg0,\n-\t\t\t\t     TREE_OPERAND (arg1, 0)),\n-\t\t\t      TREE_OPERAND (arg1, 1)));\n+\t  tree tem = const_binop (RDIV_EXPR, arg0,\n+\t\t\t\t  TREE_OPERAND (arg1, 1), 0);\n+\t  if (tem)\n+\t    return fold (build (RDIV_EXPR, type, tem,\n+\t\t\t\tTREE_OPERAND (arg1, 0)));\n \t}\n \n       if (flag_unsafe_math_optimizations)"}, {"sha": "ba803a16550bf1f0b9301470e0dde2f5b2ad47b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e32329336b0430340ddfec171b2258ff1e65ffb1", "patch": "@@ -1,3 +1,7 @@\n+2003-08-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/20030826-1.c: New test case.\n+\n 2003-08-26  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* gcc.dg/noncompile/20030818-1.c: Expect second line of error."}, {"sha": "b344ad2dcbce81c39934cb2da8116c803c96ec7b", "filename": "gcc/testsuite/gcc.dg/20030826-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2Ftestsuite%2Fgcc.dg%2F20030826-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32329336b0430340ddfec171b2258ff1e65ffb1/gcc%2Ftestsuite%2Fgcc.dg%2F20030826-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030826-1.c?ref=e32329336b0430340ddfec171b2258ff1e65ffb1", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Check that constant folding of mathematical expressions doesn't\n+   break anything.\n+\n+   Written by Roger Sayle, 24th August 2003.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+void abort(void);\n+\n+double foo(double x)\n+{\n+  return 12.0/(x*3.0);\n+}\n+\n+double bar(double x)\n+{\n+  return (3.0/x)*4.0;\n+}\n+\n+int main()\n+{\n+  if (foo(2.0) != 2.0)\n+    abort ();\n+\n+  if (bar(2.0) != 6.0)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}