{"sha": "9ddfe26ede88adcac397ad4d2c26f8322ab53107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkZmUyNmVkZTg4YWRjYWMzOTdhZDRkMmMyNmY4MzIyYWI1MzEwNw==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-08-06T02:03:47Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-08-06T02:03:47Z"}, "message": "lang.c (flag_emit_class_files, [...]): Remove explicit declarations.\n\n2004-08-06  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* lang.c (flag_emit_class_files, flag_filelist_file, flag_redundant,\n\tflag_use_divide_subroutine, flag_use_boehm_gc, flag_store_check,\n\tflag_hash_synchronization, flag_assert, flag_jni, flag_newer,\n\tflag_check_references, flag_extraneous_semicolon, flag_deprecated,\n\tflag_force_classes_archive_check, flag_optimize_sci,\n\tflag_indirect_dispatch): Remove explicit declarations.\n\t* lang.opt: Add implicit declare/define/assign.  Remove obsolete\n\tfinal comment.\n\nFrom-SVN: r85622", "tree": {"sha": "a62be5846af4c96790969e619cf9f460f827bd3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a62be5846af4c96790969e619cf9f460f827bd3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ddfe26ede88adcac397ad4d2c26f8322ab53107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddfe26ede88adcac397ad4d2c26f8322ab53107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ddfe26ede88adcac397ad4d2c26f8322ab53107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddfe26ede88adcac397ad4d2c26f8322ab53107/comments", "author": null, "committer": null, "parents": [{"sha": "b2ca370228811541d31d023ffd1280f5a819d8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ca370228811541d31d023ffd1280f5a819d8f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ca370228811541d31d023ffd1280f5a819d8f2"}], "stats": {"total": 182, "additions": 41, "deletions": 141}, "files": [{"sha": "bf424bfd9226566b23626590b54bd09145e6532a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ddfe26ede88adcac397ad4d2c26f8322ab53107/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ddfe26ede88adcac397ad4d2c26f8322ab53107/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9ddfe26ede88adcac397ad4d2c26f8322ab53107", "patch": "@@ -1,3 +1,14 @@\n+2004-08-06  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* lang.c (flag_emit_class_files, flag_filelist_file, flag_redundant,\n+\tflag_use_divide_subroutine, flag_use_boehm_gc, flag_store_check,\n+\tflag_hash_synchronization, flag_assert, flag_jni, flag_newer,\n+\tflag_check_references, flag_extraneous_semicolon, flag_deprecated,\n+\tflag_force_classes_archive_check, flag_optimize_sci,\n+\tflag_indirect_dispatch): Remove explicit declarations.\n+\t* lang.opt: Add implicit declare/define/assign.  Remove obsolete\n+\tfinal comment.\n+\n 2004-08-05  Michael Chastain  <mec.gnu@mindspring.com>\n \n \tPR bootstrap/14893"}, {"sha": "6b48849c630e2f8ff4eb9b6b69bdbf72389492a8", "filename": "gcc/java/lang.c", "status": "modified", "additions": 5, "deletions": 122, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ddfe26ede88adcac397ad4d2c26f8322ab53107/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ddfe26ede88adcac397ad4d2c26f8322ab53107/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=9ddfe26ede88adcac397ad4d2c26f8322ab53107", "patch": "@@ -117,12 +117,6 @@ int compiling_from_source;\n \n const char *resource_name;\n \n-int flag_emit_class_files = 0;\n-\n-/* Nonzero if input file is a file with a list of filenames to compile. */\n-\n-int flag_filelist_file = 0;\n-\n /* When nonzero, we emit xref strings. Values of the flag for xref\n    backends are defined in xref_flag_table, xref.c.  */\n \n@@ -131,57 +125,9 @@ int flag_emit_xref = 0;\n /* When nonzero, -Wall was turned on.  */\n int flag_wall = 0;\n \n-/* When nonzero, check for redundant modifier uses.  */\n-int flag_redundant = 0;\n-\n-/* When nonzero, call a library routine to do integer divisions. */\n-int flag_use_divide_subroutine = 1;\n-\n-/* When nonzero, generate code for the Boehm GC.  */\n-int flag_use_boehm_gc = 0;\n-\n-/* When nonzero, assume the runtime uses a hash table to map an\n-   object to its synchronization structure.  */\n-int flag_hash_synchronization;\n-\n-/* When nonzero, permit the use of the assert keyword.  */\n-int flag_assert = 1;\n-\n-/* When nonzero, assume all native functions are implemented with\n-   JNI, not CNI.  */\n-int flag_jni = 0;\n-\n-/* When nonzero, warn when source file is newer than matching class\n-   file.  */\n-int flag_newer = 1;\n-\n-/* When nonzero, generate checks for references to NULL.  */\n-int flag_check_references = 0;\n-\n /* The encoding of the source file.  */\n const char *current_encoding = NULL;\n \n-/* When nonzero, report the now deprecated empty statements.  */\n-int flag_extraneous_semicolon;\n-\n-/* When nonzero, report use of deprecated classes, methods, or fields.  */\n-int flag_deprecated = 1;\n-\n-/* When nonzero, always check for a non gcj generated classes archive.  */\n-int flag_force_classes_archive_check;\n-\n-/* When zero, don't optimize static class initialization. This flag shouldn't\n-   be tested alone, use STATIC_CLASS_INITIALIZATION_OPTIMIZATION_P instead.  */\n-/* FIXME: Make this work with gimplify.  */\n-int flag_optimize_sci = 0;\n-\n-/* When nonzero, use offset tables for virtual method calls\n-   in order to improve binary compatibility. */\n-int flag_indirect_dispatch = 0;\n-\n-/* When zero, don't generate runtime array store checks. */\n-int flag_store_check = 1;\n-\n /* When nonzero, print extra version information.  */\n static int v_flag = 0;\n \n@@ -279,9 +225,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n \n   switch (code)\n     {\n-    default:\n-      abort();\n-\n     case OPT_I:\n       jcf_path_include_arg (arg);\n       break;\n@@ -329,26 +272,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n       set_Wunused (value);\n       break;\n \n-    case OPT_Wdeprecated:\n-      flag_deprecated = value;\n-      break;\n-\n-    case OPT_Wextraneous_semicolon:\n-      flag_extraneous_semicolon = value;\n-      break;\n-\n-    case OPT_Wout_of_date:\n-      flag_newer = value;\n-      break;\n-\n-    case OPT_Wredundant_modifiers:\n-      flag_redundant = value;\n-      break;\n-\n-    case OPT_fassert:\n-      flag_assert = value;\n-      break;\n-\n     case OPT_fenable_assertions_:\n       add_enable_assert (arg, value);\n       break;\n@@ -377,10 +300,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n       jcf_path_bootclasspath_arg (arg);\n       break;\n \n-    case OPT_fcheck_references:\n-      flag_check_references = value;\n-      break;\n-\n     case OPT_fclasspath_:\n     case OPT_fCLASSPATH_:\n       jcf_path_classpath_arg (arg);\n@@ -395,11 +314,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n \treturn 0;\n       break;\n \n-    case OPT_femit_class_file:\n-    case OPT_femit_class_files:\n-      flag_emit_class_files = value;\n-      break;\n-\n     case OPT_fencoding_:\n       current_encoding = arg;\n       break;\n@@ -408,54 +322,23 @@ java_handle_option (size_t scode, const char *arg, int value)\n       jcf_path_extdirs_arg (arg);\n       break;\n \n-    case OPT_ffilelist_file:\n-      flag_filelist_file = value;\n-      break;\n-\n-    case OPT_fforce_classes_archive_check:\n-      flag_force_classes_archive_check = value;\n-      break;\n-\n-    case OPT_fhash_synchronization:\n-      flag_hash_synchronization = value;\n-      break;\n-\n-    case OPT_findirect_dispatch:\n-      flag_indirect_dispatch = value;\n-      break;\n-\n     case OPT_finline_functions:\n       flag_inline_functions = value;\n       flag_really_inline = value;\n       break;\n \n-    case OPT_fjni:\n-      flag_jni = value;\n-      break;\n-\n-    case OPT_foptimize_static_class_initialization:\n-      flag_optimize_sci = value;\n-      break;\n-\n     case OPT_foutput_class_dir_:\n       jcf_write_base_directory = arg;\n       break;\n \n-    case OPT_fstore_check:\n-      flag_store_check = value;\n-      break;\n-\n-    case OPT_fuse_boehm_gc:\n-      flag_use_boehm_gc = value;\n-      break;\n-\n-    case OPT_fuse_divide_subroutine:\n-      flag_use_divide_subroutine = value;\n-      break;\n-\n     case OPT_version:\n       v_flag = 1;\n       break;\n+      \n+    default:\n+      if (cl_options[code].flags & CL_Java)\n+\tbreak;\n+      abort();\n     }\n \n   return 1;"}, {"sha": "8cac2db15ba8b802d4193a3ed668bc58c2222f19", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ddfe26ede88adcac397ad4d2c26f8322ab53107/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ddfe26ede88adcac397ad4d2c26f8322ab53107/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=9ddfe26ede88adcac397ad4d2c26f8322ab53107", "patch": "@@ -62,27 +62,28 @@ Java\n ; Documented for C\n \n Wdeprecated\n-Java\n+Java Var(flag_deprecated) Init(1)\n Warn if deprecated class, method, or field is used\n \n Wextraneous-semicolon\n-Java\n+Java Var(flag_extraneous_semicolon)\n Warn if deprecated empty statements are found\n \n Wout-of-date\n-Java\n+Java Var(flag_newer) Init(1)\n Warn if .class files are out of date\n \n Wredundant-modifiers\n-Java\n+Java Var(flag_redundant)\n Warn if modifiers are specified when not necessary\n \n fCLASSPATH=\n Java JoinedOrMissing RejectNegative\n --CLASSPATH\tDeprecated; use --classpath instead\n \n fassert\n-Java\n+Java Var(flag_assert) Init(1)\n+Permit the use of the assert keyword\n \n fassume-compiled\n Java\n@@ -107,7 +108,8 @@ Java JoinedOrMissing RejectNegative\n --bootclasspath=<path>\tReplace system path\n \n fcheck-references\n-Java\n+Java Var(flag_check_references)\n+Generate checks for references to NULL\n \n fclasspath=\n Java JoinedOrMissing RejectNegative\n@@ -117,10 +119,12 @@ fcompile-resource=\n Java Joined RejectNegative\n \n femit-class-file\n-Java\n+Java Var(flag_emit_class_files) VarExists\n+Output a class file\n \n femit-class-files\n-Java\n+Java Var(flag_emit_class_files)\n+Alias for -femit-class-file\n \n fencoding=\n Java Joined RejectNegative\n@@ -130,44 +134,46 @@ fextdirs=\n Java Joined RejectNegative\n \n ffilelist-file\n-Java\n+Java Var(flag_filelist_file)\n+Input file is a file with a list of filenames to compile\n \n fforce-classes-archive-check\n-Java\n+Java Var(flag_force_classes_archive_check)\n Always check for non gcj generated classes archives\n \n fhash-synchronization\n-Java\n+Java Var(flag_hash_synchronization)\n+Assume the runtime uses a hash table to map an object to its synchronization structure\n \n findirect-dispatch\n-Java\n+Java Var(flag_indirect_dispatch)\n Use offset tables for virtual method calls\n \n finline-functions\n Java\n \n fjni\n-Java\n+Java Var(flag_jni)\n Assume native functions are implemented using JNI\n \n foptimize-static-class-initialization\n-Java\n+Java Var(flag_optimize_sci)\n Enable optimization of static class initialization code\n \n foutput-class-dir=\n Java Joined RejectNegative\n \n fstore-check\n-Java\n+Java Var(flag_store_check) Init(1)\n Enable assignability checks for stores into object arrays\n \n fuse-boehm-gc\n-Java\n+Java Var(flag_use_boehm_gc)\n+Generate code for the Boehm GC\n \n fuse-divide-subroutine\n-Java\n+Java Var(flag_use_divide_subroutine) Init(1)\n+Call a library routine to do integer divisions\n \n version\n Java\n-\n-; This comment is to ensure we retain the blank line above."}]}