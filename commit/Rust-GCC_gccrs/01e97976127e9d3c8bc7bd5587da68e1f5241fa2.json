{"sha": "01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlOTc5NzYxMjdlOWQzYzhiYzdiZDU1ODdkYTY4ZTFmNTI0MWZhMg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2003-11-05T22:26:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2003-11-05T22:26:58Z"}, "message": "install-old.texi: Remove old documentation of building cross-compilers.\n\n\t* doc/install-old.texi: Remove old documentation of building\n\tcross-compilers.\n\t* doc/install.texi: Move some of it to here.\n\nFrom-SVN: r73283", "tree": {"sha": "1ed726d768f08eab12fba197aa3ff65f45bcf735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed726d768f08eab12fba197aa3ff65f45bcf735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d90f821d4d9b5f6be324d39369617c1c87574a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d90f821d4d9b5f6be324d39369617c1c87574a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d90f821d4d9b5f6be324d39369617c1c87574a"}], "stats": {"total": 326, "additions": 58, "deletions": 268}, "files": [{"sha": "7eff7ed1aa7faf18b3e2103ceddd0ccbf0002531", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "patch": "@@ -1,3 +1,9 @@\n+2003-11-05  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/install-old.texi: Remove old documentation of building\n+\tcross-compilers.\n+\t* doc/install.texi: Move some of it to here.\n+\n 2003-11-05  Per Bothner  <pbothner@apple.com>\n \n \tPR preprocessor/12891"}, {"sha": "0a4afbe451f87af1db7ffcf48498a90417c8e392", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 2, "deletions": 267, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "patch": "@@ -21,7 +21,6 @@ main manual.\n @ifnothtml\n @menu\n * Configurations::    Configurations Supported by GCC.\n-* Cross-Compiler::   Building and installing a cross-compiler.\n @end menu\n @end ifnothtml\n \n@@ -57,8 +56,7 @@ wrong.\n \n In those cases, specify the build machine's @dfn{configuration name}\n with the @option{--host} option; the host and target will default to be\n-the same as the host machine.  (If you are building a cross-compiler,\n-see @ref{Cross-Compiler}.)\n+the same as the host machine.\n \n Here is an example:\n \n@@ -90,7 +88,7 @@ section before proceeding any further with the installation of GCC@.\n @end enumerate\n \n @ifnothtml\n-@node Configurations, Cross-Compiler, , Old\n+@node Configurations, , , Old\n @section Configurations Supported by GCC\n @end ifnothtml\n @html\n@@ -194,266 +192,3 @@ Thus, if you specify @samp{m68k-local}, configuration uses\n files @file{m68k.md}, @file{local.h}, @file{m68k.c},\n @file{xm-local.h}, @file{t-local}, and @file{x-local}, all in the\n directory @file{config/m68k}.\n-\n-@ifnothtml\n-@node Cross-Compiler, , Configurations, Old\n-@section Building and Installing a Cross-Compiler\n-@end ifnothtml\n-@html\n-<h2>@anchor{Cross-Compiler}Building and Installing a Cross-Compiler</h2>\n-@end html\n-@cindex cross-compiler, installation\n-\n-GCC can function as a cross-compiler for many machines, but not all.\n-\n-@itemize @bullet\n-@item\n-Cross-compilers for the Mips as target using the Mips assembler\n-currently do not work, because the auxiliary programs\n-@file{mips-tdump.c} and @file{mips-tfile.c} can't be compiled on\n-anything but a Mips.  It does work to cross compile for a Mips\n-if you use the GNU assembler and linker.\n-\n-@item\n-Cross-compilers between machines with different floating point formats\n-have not all been made to work.  GCC now has a floating point\n-emulator with which these can work, but each target machine description\n-needs to be updated to take advantage of it.\n-\n-@item\n-Cross-compilation between machines of different word sizes is\n-somewhat problematic and sometimes does not work.\n-@end itemize\n-\n-Since GCC generates assembler code, you probably need a\n-cross-assembler that GCC can run, in order to produce object files.\n-If you want to link on other than the target machine, you need a\n-cross-linker as well.  You also need header files and libraries suitable\n-for the target machine that you can install on the host machine.\n-\n-@ifnothtml\n-@menu\n-* Steps of Cross::      Using a cross-compiler involves several steps\n-                          that may be carried out on different machines.\n-* Configure Cross::     Configuring a cross-compiler.\n-* Tools and Libraries:: Where to put the linker and assembler, and the C library.\n-* Cross Headers::       Finding and installing header files\n-                          for a cross-compiler.\n-* Build Cross::         Actually compiling the cross-compiler.\n-@end menu\n-@end ifnothtml\n-\n-@ifnothtml\n-@node Steps of Cross, Configure Cross, , Cross-Compiler\n-@subsection Steps of Cross-Compilation\n-@end ifnothtml\n-@html\n-<h2>Steps of Cross-Compilation</h2>\n-@end html\n-\n-To compile and run a program using a cross-compiler involves several\n-steps:\n-\n-@itemize @bullet\n-@item\n-Run the cross-compiler on the host machine to produce assembler files\n-for the target machine.  This requires header files for the target\n-machine.\n-\n-@item\n-Assemble the files produced by the cross-compiler.  You can do this\n-either with an assembler on the target machine, or with a\n-cross-assembler on the host machine.\n-\n-@item\n-Link those files to make an executable.  You can do this either with a\n-linker on the target machine, or with a cross-linker on the host\n-machine.  Whichever machine you use, you need libraries and certain\n-startup files (typically @file{crt@dots{}.o}) for the target machine.\n-@end itemize\n-\n-It is most convenient to do all of these steps on the same host machine,\n-since then you can do it all with a single invocation of GCC@.  This\n-requires a suitable cross-assembler and cross-linker.  For some targets,\n-the GNU assembler and linker are available.\n-\n-@ifnothtml\n-@node Configure Cross, Tools and Libraries, Steps of Cross, Cross-Compiler\n-@subsection Configuring a Cross-Compiler\n-@end ifnothtml\n-@html\n-<h2>Configuring a Cross-Compiler</h2>\n-@end html\n-\n-To build GCC as a cross-compiler, you start out by running\n-@file{configure}.  Use the @option{--target=@var{target}} to specify the\n-target type.  If @file{configure} was unable to correctly identify the\n-system you are running on, also specify the @option{--build=@var{build}}\n-option.  For example, here is how to configure for a cross-compiler that\n-produces code for an HP 68030 system running BSD on a system that\n-@file{configure} can correctly identify:\n-\n-@smallexample\n-./configure --target=m68k-hp-bsd4.3\n-@end smallexample\n-\n-@ifnothtml\n-@node Tools and Libraries, Cross Headers, Configure Cross, Cross-Compiler\n-@subsection Tools and Libraries for a Cross-Compiler\n-@end ifnothtml\n-@html\n-<h2>Tools and Libraries for a Cross-Compiler</h2>\n-@end html\n-\n-If you have a cross-assembler and cross-linker available, you should\n-install them now.  Put them in the directory\n-@file{/usr/local/@var{target}/bin}.  Here is a table of the tools\n-you should put in this directory:\n-\n-@table @file\n-@item as\n-This should be the cross-assembler.\n-\n-@item ld\n-This should be the cross-linker.\n-\n-@item ar\n-This should be the cross-archiver: a program which can manipulate\n-archive files (linker libraries) in the target machine's format.\n-\n-@item ranlib\n-This should be a program to construct a symbol table in an archive file.\n-@end table\n-\n-The installation of GCC will find these programs in that directory,\n-and copy or link them to the proper place to for the cross-compiler to\n-find them when run later.\n-\n-The easiest way to provide these files is to build the Binutils package\n-and GAS@.  Configure them with the same @option{--host} and @option{--target}\n-options that you use for configuring GCC, then build and install\n-them.  They install their executables automatically into the proper\n-directory.  Alas, they do not support all the targets that GCC\n-supports.\n-\n-If you want to install libraries to use with the cross-compiler, such as\n-a standard C library, put them in the directory\n-@file{/usr/local/@var{target}/lib}; installation of GCC copies\n-all the files in that subdirectory into the proper place for GCC to\n-find them and link with them.  Here's an example of copying some\n-libraries from a target machine:\n-\n-@example\n-ftp @var{target-machine}\n-lcd /usr/local/@var{target}/lib\n-cd /lib\n-get libc.a\n-cd /usr/lib\n-get libg.a\n-get libm.a\n-quit\n-@end example\n-\n-@noindent\n-The precise set of libraries you'll need, and their locations on\n-the target machine, vary depending on its operating system.\n-\n-@cindex start files\n-Many targets require ``start files'' such as @file{crt0.o} and\n-@file{crtn.o} which are linked into each executable; these too should be\n-placed in @file{/usr/local/@var{target}/lib}.  There may be several\n-alternatives for @file{crt0.o}, for use with profiling or other\n-compilation options.  Check your target's definition of\n-@code{STARTFILE_SPEC} to find out what start files it uses.\n-Here's an example of copying these files from a target machine:\n-\n-@example\n-ftp @var{target-machine}\n-lcd /usr/local/@var{target}/lib\n-prompt\n-cd /lib\n-mget *crt*.o\n-cd /usr/lib\n-mget *crt*.o\n-quit\n-@end example\n-\n-@ifnothtml\n-@node Cross Headers, Build Cross, Tools and Libraries, Cross-Compiler\n-@subsection Cross-Compilers and Header Files\n-@end ifnothtml\n-@html\n-<h2>Cross-Compilers and Header Files</h2>\n-@end html\n-\n-If you are cross-compiling a standalone program or a program for an\n-embedded system, then you may not need any header files except the few\n-that are part of GCC (and those of your program).  However, if you\n-intend to link your program with a standard C library such as\n-@file{libc.a}, then you probably need to compile with the header files\n-that go with the library you use.\n-\n-The GNU C compiler does not come with these files, because (1) they are\n-system-specific, and (2) they belong in a C library, not in a compiler.\n-\n-If the GNU C library supports your target machine, then you can get the\n-header files from there (assuming you actually use the GNU library when\n-you link your program).\n-\n-If your target machine comes with a C compiler, it probably comes with\n-suitable header files also.  If you make these files accessible from the host\n-machine, the cross-compiler can use them also.\n-\n-Otherwise, you're on your own in finding header files to use when\n-cross-compiling.\n-\n-When you have found suitable header files, you should put them in the\n-directory @file{/usr/local/@var{target}/include}, before building the\n-cross compiler.  Then installation will run fixincludes properly and\n-install the corrected versions of the header files where the compiler\n-will use them.\n-\n-Provide the header files before you build the cross-compiler, because\n-the build stage actually runs the cross-compiler to produce parts of\n-@file{libgcc.a}.  (These are the parts that @emph{can} be compiled with\n-GCC@.)  Some of them need suitable header files.\n-\n-Here's an example showing how to copy the header files from a target\n-machine.  On the target machine, do this:\n-\n-@example\n-(cd /usr/include; tar cf - .) > tarfile\n-@end example\n-\n-Then, on the host machine, do this:\n-\n-@example\n-ftp @var{target-machine}\n-lcd /usr/local/@var{target}/include\n-get tarfile\n-quit\n-tar xf tarfile\n-@end example\n-\n-@ifnothtml\n-@node Build Cross, , Cross Headers, Cross-Compiler\n-@subsection Actually Building the Cross-Compiler\n-@end ifnothtml\n-@html\n-<h2>Actually Building the Cross-Compiler</h2>\n-@end html\n-\n-Now you can proceed just as for compiling a single-machine compiler\n-through the step of building stage 1.\n-\n-Do not try to build stage 2 for a cross-compiler.  It doesn't work to\n-rebuild GCC as a cross-compiler using the cross-compiler, because\n-that would produce a program that runs on the target machine, not on the\n-host.  For example, if you compile a 386-to-68030 cross-compiler with\n-itself, the result will not be right either for the 386 (because it was\n-compiled into 68030 code) or for the 68030 (because it was configured\n-for a 386 as the host).  If you want to compile GCC into 68030 code,\n-whether you compile it on a 68030 or with a cross-compiler on a 386, you\n-must specify a 68030 as the host when you configure it.\n-\n-To install the cross-compiler, use @samp{make install}, as usual."}, {"sha": "7183df3765b08889ca5a26edf62f7a33828516f6", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e97976127e9d3c8bc7bd5587da68e1f5241fa2/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=01e97976127e9d3c8bc7bd5587da68e1f5241fa2", "patch": "@@ -43,7 +43,7 @@\n @end ifset\n \n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n @c Include everything if we're not making html\n@@ -1347,6 +1347,49 @@ Build runtime libraries using the compiler from the previous step.\n \n Note that if an error occurs in any step the make process will exit.\n \n+If you are not building GNU binutils in the same source tree as GCC,\n+you will need a cross-assembler and cross-linker installed before\n+configuring GCC@.  Put them in the directory\n+@file{@var{prefix}/@var{target}/bin}.  Here is a table of the tools\n+you should put in this directory:\n+\n+@table @file\n+@item as\n+This should be the cross-assembler.\n+\n+@item ld\n+This should be the cross-linker.\n+\n+@item ar\n+This should be the cross-archiver: a program which can manipulate\n+archive files (linker libraries) in the target machine's format.\n+\n+@item ranlib\n+This should be a program to construct a symbol table in an archive file.\n+@end table\n+\n+The installation of GCC will find these programs in that directory,\n+and copy or link them to the proper place to for the cross-compiler to\n+find them when run later.\n+\n+The easiest way to provide these files is to build the Binutils package.\n+Configure it with the same @option{--host} and @option{--target}\n+options that you use for configuring GCC, then build and install\n+them.  They install their executables automatically into the proper\n+directory.  Alas, they do not support all the targets that GCC\n+supports.\n+\n+If you are not building a C library in the same source tree as GCC,\n+you should also provide the target libraries and headers before\n+configuring GCC, specifying the directories with\n+@option{--with-sysroot} or @option{--with-headers} and\n+@option{--with-libs}.  Many targets also require ``start files'' such\n+as @file{crt0.o} and\n+@file{crtn.o} which are linked into each executable.  There may be several\n+alternatives for @file{crt0.o}, for use with profiling or other\n+compilation options.  Check your target's definition of\n+@code{STARTFILE_SPEC} to find out what start files it uses.\n+\n @section Building in parallel\n \n You can use @samp{make bootstrap MAKE=\"make -j 2\" -j 2}, or just\n@@ -2952,6 +2995,12 @@ configure for @samp{mipsel-elf} as a workaround.  The\n @samp{mips*-*-linux*} target continues to use the MIPS II routines.  More\n work on this is expected in future releases.\n \n+Cross-compilers for the Mips as target using the Mips assembler\n+currently do not work, because the auxiliary programs\n+@file{mips-tdump.c} and @file{mips-tfile.c} can't be compiled on\n+anything but a Mips.  It does work to cross compile for a Mips\n+if you use the GNU assembler and linker.\n+\n @html\n <hr />\n @end html"}]}