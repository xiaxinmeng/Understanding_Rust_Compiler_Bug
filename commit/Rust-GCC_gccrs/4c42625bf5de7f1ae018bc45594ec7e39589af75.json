{"sha": "4c42625bf5de7f1ae018bc45594ec7e39589af75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0MjYyNWJmNWRlN2YxYWUwMThiYzQ1NTk0ZWM3ZTM5NTg5YWY3NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-19T05:46:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-19T05:46:22Z"}, "message": "(convert_to_integer): Warn if integer is truncated and that changes the value.\n\nFrom-SVN: r3496", "tree": {"sha": "16393033c7932c0f389c8ac240dbd5b3e19aa892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16393033c7932c0f389c8ac240dbd5b3e19aa892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c42625bf5de7f1ae018bc45594ec7e39589af75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c42625bf5de7f1ae018bc45594ec7e39589af75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c42625bf5de7f1ae018bc45594ec7e39589af75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c42625bf5de7f1ae018bc45594ec7e39589af75/comments", "author": null, "committer": null, "parents": [{"sha": "3c15ff863f7160d15ff3cba22f61078082ced134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c15ff863f7160d15ff3cba22f61078082ced134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c15ff863f7160d15ff3cba22f61078082ced134"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "0833a5fbcd7a177f5548e920af72f401659cb84f", "filename": "gcc/convert.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c42625bf5de7f1ae018bc45594ec7e39589af75/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c42625bf5de7f1ae018bc45594ec7e39589af75/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=4c42625bf5de7f1ae018bc45594ec7e39589af75", "patch": "@@ -172,6 +172,30 @@ convert_to_integer (type, expr)\n \n       switch (ex_form)\n \t{\n+        case INTEGER_CST:\n+\t  if (TREE_UNSIGNED (type))\n+\t    {\n+\t      if (TREE_INT_CST_LOW (expr) >> outprec)\n+\t\twarning (\"integer constant truncated\");\n+\t    }\n+\t  else\n+\t    {\n+\t      /* if the sign bit of the low-order part isn't replicated\n+\t\t through the entire high part, we have overflow */\n+\t      int sign  = TREE_INT_CST_LOW (expr) & (1 << (outprec - 1));\n+\t      if (!sign)                       /* lower part positive */\n+\t\t{\n+\t\t  if (TREE_INT_CST_LOW (expr) >> outprec)\n+\t\t    warning (\"integer constant truncated\");\n+\t\t}\n+\t      else \n+\t\t{\n+\t\t  if ((TREE_INT_CST_LOW (expr) >> outprec) + 1)\n+\t\t    warning (\"integer constant truncated\");\n+\t\t}\n+\t    }\n+\t  break;\n+\n \tcase RSHIFT_EXPR:\n \t  /* We can pass truncation down through right shifting\n \t     when the shift count is a nonpositive constant.  */"}]}