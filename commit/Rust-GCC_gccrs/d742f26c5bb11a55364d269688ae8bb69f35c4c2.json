{"sha": "d742f26c5bb11a55364d269688ae8bb69f35c4c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0MmYyNmM1YmIxMWE1NTM2NGQyNjk2ODhhZThiYjY5ZjM1YzRjMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-19T20:32:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-19T20:32:28Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r525", "tree": {"sha": "d03a9bb29d5132436f4575a6111bfcca297ecc7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d03a9bb29d5132436f4575a6111bfcca297ecc7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d742f26c5bb11a55364d269688ae8bb69f35c4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d742f26c5bb11a55364d269688ae8bb69f35c4c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d742f26c5bb11a55364d269688ae8bb69f35c4c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d742f26c5bb11a55364d269688ae8bb69f35c4c2/comments", "author": null, "committer": null, "parents": [{"sha": "7d57b4cac6493c35e1cd8d68565257a4ca4b87a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d57b4cac6493c35e1cd8d68565257a4ca4b87a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d57b4cac6493c35e1cd8d68565257a4ca4b87a3"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "6a6a8839d55b7f84bc8d5e94306f7a26daf5d222", "filename": "gcc/protoize.c", "status": "modified", "additions": 67, "deletions": 21, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d742f26c5bb11a55364d269688ae8bb69f35c4c2/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d742f26c5bb11a55364d269688ae8bb69f35c4c2/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=d742f26c5bb11a55364d269688ae8bb69f35c4c2", "patch": "@@ -245,7 +245,7 @@ static const char * const save_suffix = \".save\";\n    routines.  Note that we never actually do anything with this file per se,\n    but we do read in its corresponding aux_info file.  */\n \n-static const char * const syscalls_filename = \"SYSCALLS.c\";\n+static const char syscalls_filename[] = \"SYSCALLS.c\";\n \n /* Default place to find the above file.  */\n \n@@ -894,7 +894,9 @@ static int\n is_syscalls_file (fi_p)\n      const file_info *fi_p;\n {\n-  return (substr (fi_p->hash_entry->symbol, syscalls_filename) != NULL);\n+  char const *f = fi_p->hash_entry->symbol;\n+  size_t fl = strlen (f), sysl = sizeof (syscalls_filename) - 1;\n+  return sysl <= fl  &&  strcmp (f + fl - sysl, syscalls_filename) == 0;\n }\n \n #endif /* !defined (UNPROTOIZE) */\n@@ -1225,15 +1227,17 @@ abspath (cwd, rel_filename)\n     src_p = rel_filename;\n     while (*endp++ = *src_p++)\n       continue;\n-    if (endp[-1] == '/')\n-      *endp = '\\0';\n   }\n \n   /* Now make a copy of abs_buffer into abs_buffer, shortening the\n      filename (by taking out slashes and dots) as we go.  */\n \n   outp = inp = abs_buffer;\n   *outp++ = *inp++;        \t/* copy first slash */\n+#ifdef apollo\n+  if (inp[0] == '/')\n+    *outp++ = *inp++;        \t/* copy second slash */\n+#endif\n   for (;;)\n     {\n       if (!inp[0])\n@@ -1312,16 +1316,17 @@ shortpath (cwd, filename)\n   char *cwd_p = cwd_buffer;\n   char *path_p;\n   int unmatched_slash_count = 0;\n+  size_t filename_len = strlen (filename);\n \n   path_p = abspath (cwd, filename);\n-  rel_buf_p = rel_buffer = (char *) xmalloc (strlen (path_p) + 1);\n+  rel_buf_p = rel_buffer = (char *) xmalloc (filename_len);\n \n   while (*cwd_p && (*cwd_p == *path_p))\n     {\n       cwd_p++;\n       path_p++;\n     }\n-  if (!*cwd_p)        \t\t/* whole pwd matched */\n+  if (!*cwd_p && (!*path_p || *path_p == '/'))\t/* whole pwd matched */\n     {\n       if (!*path_p)        \t/* input *is* the current path! */\n         return \".\";\n@@ -1348,17 +1353,23 @@ shortpath (cwd, filename)\n                 unmatched_slash_count++;\n       while (unmatched_slash_count--)\n         {\n+\t  if (rel_buffer + filename_len <= rel_buf_p + 3)\n+\t    return filename;\n           *rel_buf_p++ = '.';\n           *rel_buf_p++ = '.';\n           *rel_buf_p++ = '/';\n         }\n-      while (*rel_buf_p++ = *path_p++)\n-        continue;\n+\n+      do\n+\t{\n+\t  if (rel_buffer + filename_len <= rel_buf_p)\n+\t    return filename;\n+\t}\n+      while (*rel_buf_p++ = *path_p++);\n+\n       --rel_buf_p;\n       if (*(rel_buf_p-1) == '/')\n         *--rel_buf_p = '\\0';\n-      if (strlen (rel_buffer) > (unsigned) strlen (filename))\n-\tstrcpy (rel_buffer, filename);\n       return rel_buffer;\n     }\n }\n@@ -2005,19 +2016,32 @@ gen_aux_info_file (base_filename)\n           }\n         if (!WIFEXITED (wait_status))\n           {\n+            fprintf (stderr, \"%s: error: subprocess %ld did not exit\\n\",\n+\t\t     pname, (long) child_pid);\n             kill (child_pid, 9);\n             return 0;\n           }\n-        return (WEXITSTATUS (wait_status) == 0) ? 1 : 0;\n+        if (WEXITSTATUS (wait_status) != 0)\n+\t  {\n+\t    fprintf (stderr, \"%s: error: %s: compilation failed\\n\",\n+\t\t     pname, base_filename);\n+\t    return 0;\n+\t  }\n+\treturn 1;\n       }\n     }\n   else\n     {\n       if (my_execvp (compile_params[0], (char *const *) compile_params))\n         {\n-          fprintf (stderr, \"%s: error: execvp returned: %s\\n\",\n-\t\t   pname, sys_errlist[errno]);\n-          exit (errno);\n+\t  int e = errno, f = fileno (stderr);\n+\t  write (f, pname, strlen (pname));\n+\t  write (f, \": \", 2);\n+\t  write (f, compile_params[0], strlen (compile_params[0]));\n+\t  write (f, \": \", 2);\n+\t  write (f, sys_errlist[e], strlen (sys_errlist[e]));\n+\t  write (f, \"\\n\", 1);\n+          _exit (1);\n         }\n       return 1;\t\t/* Never executed.  */\n     }\n@@ -2032,11 +2056,12 @@ process_aux_info_file (base_source_filename, keep_it, is_syscalls)\n      int keep_it;\n      int is_syscalls;\n {\n-  char *const aux_info_filename\n-    = (char *) alloca (strlen (base_source_filename)\n-\t\t       + strlen (aux_info_suffix) + 1);\n+  size_t base_len = strlen (base_source_filename);\n+  char * aux_info_filename\n+    = (char *) alloca (base_len + strlen (aux_info_suffix) + 1);\n   char *aux_info_base;\n   char *aux_info_limit;\n+  char *aux_info_relocated_name;\n   const char *aux_info_second_line;\n   time_t aux_info_mtime;\n   size_t aux_info_size;\n@@ -2066,7 +2091,10 @@ start_over: ;\n                 return;\n               }\n             if (!gen_aux_info_file (base_source_filename))\n-              return;\n+\t      {\n+\t\terrors++;\n+\t\treturn;\n+\t      }\n             retries++;\n             goto retry;\n           }\n@@ -2184,6 +2212,22 @@ start_over: ;\n     while (*p++ != '\\n')\n       continue;\n     aux_info_second_line = p;\n+    aux_info_relocated_name = 0;\n+    if (invocation_filename[0] != '/')\n+      {\n+\t/* INVOCATION_FILENAME is relative;\n+\t   append it to BASE_SOURCE_FILENAME's dir.  */\n+\tchar *dir_end;\n+\taux_info_relocated_name = xmalloc (base_len + (p-invocation_filename));\n+\tstrcpy (aux_info_relocated_name, base_source_filename);\n+\tdir_end = strrchr (aux_info_relocated_name, '/');\n+\tif (dir_end)\n+\t  dir_end++;\n+\telse\n+\t  dir_end = aux_info_relocated_name;\n+\tstrcpy (dir_end, invocation_filename);\n+\tinvocation_filename = aux_info_relocated_name;\n+      }\n   }\n \n \n@@ -2204,7 +2248,8 @@ start_over: ;\n             if (referenced_file_is_newer (aux_info_p, aux_info_mtime))\n               {\n                 free (aux_info_base);\n-                if (my_unlink (aux_info_filename) == -1)\n+\t\txfree (aux_info_relocated_name);\n+                if (keep_it && my_unlink (aux_info_filename) == -1)\n                   {\n                     fprintf (stderr, \"%s: error: can't delete file `%s': %s\\n\",\n \t\t\t     pname, shortpath (NULL, aux_info_filename),\n@@ -2250,6 +2295,7 @@ start_over: ;\n   }\n \n   free (aux_info_base);\n+  xfree (aux_info_relocated_name);\n }\n \f\n #ifndef UNPROTOIZE\n@@ -4263,14 +4309,14 @@ do_processing ()\n     {\n       syscalls_absolute_filename\n         = (char *) xmalloc (strlen (nondefault_syscalls_dir)\n-                            + strlen (syscalls_filename) + 2);\n+                            + sizeof (syscalls_filename) + 1);\n       strcpy (syscalls_absolute_filename, nondefault_syscalls_dir);\n     }\n   else\n     {\n       syscalls_absolute_filename\n         = (char *) xmalloc (strlen (default_syscalls_dir)\n-                            + strlen (syscalls_filename) + 2);\n+                            + sizeof (syscalls_filename) + 1);\n       strcpy (syscalls_absolute_filename, default_syscalls_dir);\n     }\n "}]}