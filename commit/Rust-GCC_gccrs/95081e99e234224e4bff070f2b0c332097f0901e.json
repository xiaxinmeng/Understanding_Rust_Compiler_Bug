{"sha": "95081e99e234224e4bff070f2b0c332097f0901e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwODFlOTllMjM0MjI0ZTRiZmYwNzBmMmIwYzMzMjA5N2YwOTAxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-05T14:29:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-05T14:29:57Z"}, "message": "[multiple changes]\n\n2012-10-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_dim.adb, errout.adb, errout.ads (Analyze_Dimension_Call): Add\n\tguard against abnormal tree resulting from a previously diagnosed\n\tillegality.\n\n2012-10-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Expression): Rename local variable Cspc to Spec\n\tand update all refs to it. Do not freeze an entity outside a subprogram\n\tbody when the original context is an expression function.\n\n2012-10-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Default for overflow checking\n\tis suppressed, even if backend overflow/divide checks are enabled.\n\n2012-10-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.adb (Set_Invariant_Procedure, Set_Predicate_Function):\n\tchain properly subprograms on Subprograms_For_Type list.\n\t* sem_ch13.ads; (Build_Invariant_Procedure_Declaration): new\n\tprocedure, to create declaration for invariant procedure\n\tindependently of the construction of the body, so that it can\n\tbe called within expression functions.\n\t* sem_ch13.adb (Build_Invariant_Procedure): code cleanup. The\n\tdeclaration may already have been generated at the point an\n\texplicit invariant aspect is encountered.\n\t* sem_prag.adb; (Analyze_Pragma, case Invariant): create declaration\n\tfor invariant procedure.\n\t* sem_ch7.adb (Analyze_Package_Specification): clean up call to\n\tbuild invariant procedure.\n\t(Preserve_Full_Attributes): propagate information about invariants\n\tif they appear on a completion,\n\n2012-10-05  Pascal Obry  <obry@adacore.com>\n\n\t* gnat_ugn.texi: Update documentation to lift Microsoft C\n\trestriction.\n\nFrom-SVN: r192128", "tree": {"sha": "91363a32a29c19d899aa9f267516d2afed823ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91363a32a29c19d899aa9f267516d2afed823ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95081e99e234224e4bff070f2b0c332097f0901e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95081e99e234224e4bff070f2b0c332097f0901e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95081e99e234224e4bff070f2b0c332097f0901e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95081e99e234224e4bff070f2b0c332097f0901e/comments", "author": null, "committer": null, "parents": [{"sha": "967fb65e809daa9c8d5a233dab77dd5e61d8effc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967fb65e809daa9c8d5a233dab77dd5e61d8effc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967fb65e809daa9c8d5a233dab77dd5e61d8effc"}], "stats": {"total": 328, "additions": 252, "deletions": 76}, "files": [{"sha": "ea4667fb2ce7fcdd8a03eb122bd49274987a9ec8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -1,3 +1,43 @@\n+2012-10-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_dim.adb, errout.adb, errout.ads (Analyze_Dimension_Call): Add\n+\tguard against abnormal tree resulting from a previously diagnosed\n+\tillegality.\n+\n+2012-10-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): Rename local variable Cspc to Spec\n+\tand update all refs to it. Do not freeze an entity outside a subprogram\n+\tbody when the original context is an expression function.\n+\n+2012-10-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Default for overflow checking\n+\tis suppressed, even if backend overflow/divide checks are enabled.\n+\n+2012-10-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.adb (Set_Invariant_Procedure, Set_Predicate_Function):\n+\tchain properly subprograms on Subprograms_For_Type list.\n+\t* sem_ch13.ads; (Build_Invariant_Procedure_Declaration): new\n+\tprocedure, to create declaration for invariant procedure\n+\tindependently of the construction of the body, so that it can\n+\tbe called within expression functions.\n+\t* sem_ch13.adb (Build_Invariant_Procedure): code cleanup. The\n+\tdeclaration may already have been generated at the point an\n+\texplicit invariant aspect is encountered.\n+\t* sem_prag.adb; (Analyze_Pragma, case Invariant): create declaration\n+\tfor invariant procedure.\n+\t* sem_ch7.adb (Analyze_Package_Specification): clean up call to\n+\tbuild invariant procedure.\n+\t(Preserve_Full_Attributes): propagate information about invariants\n+\tif they appear on a completion,\n+\n+2012-10-05  Pascal Obry  <obry@adacore.com>\n+\n+\t* gnat_ugn.texi: Update documentation to lift Microsoft C\n+\trestriction.\n+\n 2012-10-05  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb (Has_One_Matching_Field): Handle case of lone"}, {"sha": "bfa7593dc5d318a6657fee916b4d566897681316", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -7113,6 +7113,7 @@ package body Einfo is\n \n       S := Subprograms_For_Type (Id);\n       Set_Subprograms_For_Type (Id, V);\n+      Set_Subprograms_For_Type (V, S);\n \n       while Present (S) loop\n          if Has_Invariants (S) then\n@@ -7121,8 +7122,6 @@ package body Einfo is\n             S := Subprograms_For_Type (S);\n          end if;\n       end loop;\n-\n-      Set_Subprograms_For_Type (Id, V);\n    end Set_Invariant_Procedure;\n \n    ----------------------------\n@@ -7137,6 +7136,7 @@ package body Einfo is\n \n       S := Subprograms_For_Type (Id);\n       Set_Subprograms_For_Type (Id, V);\n+      Set_Subprograms_For_Type (V, S);\n \n       while Present (S) loop\n          if Has_Predicates (S) then\n@@ -7145,8 +7145,6 @@ package body Einfo is\n             S := Subprograms_For_Type (S);\n          end if;\n       end loop;\n-\n-      Set_Subprograms_For_Type (Id, V);\n    end Set_Predicate_Function;\n \n    -----------------"}, {"sha": "64062b29e9ce2325c86bd788956231808acd7ffd", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -198,6 +198,21 @@ package body Errout is\n    --  spec for precise definition of the conversion that is performed by this\n    --  routine in OpenVMS mode.\n \n+   --------------------\n+   -- Cascaded_Error --\n+   --------------------\n+\n+   procedure Cascaded_Error is\n+   begin\n+      --  An anomaly has been detected which is assumed to be a consequence of\n+      --  a previous error. Raise an exception if no serious error has been\n+      --  found so far.\n+\n+      if Serious_Errors_Detected = 0 then\n+         raise Program_Error;\n+      end if;\n+   end Cascaded_Error;\n+\n    -----------------------\n    -- Change_Error_Text --\n    -----------------------"}, {"sha": "7da6493e453bd47c84e1c54e042159cf50e1b79c", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -727,6 +727,13 @@ package Errout is\n    --  This routine can only be called during semantic analysis. It may not\n    --  be called during parsing.\n \n+   procedure Cascaded_Error;\n+   --  When an anomaly is detected, many semantic routines silently bail out,\n+   --  assuming that the anomaly was caused by a previously detected error.\n+   --  This routine should be called in these cases, and will raise an\n+   --  exception if no serious error has been detected. This ensure that the\n+   --  anomaly is never allowed to go unnoticed.\n+\n    procedure Change_Error_Text (Error_Id : Error_Msg_Id; New_Msg : String);\n    --  The error message text of the message identified by Id is replaced by\n    --  the given text. This text may contain insertion characters in the"}, {"sha": "9e0cbcacf80f9cfc3a3af3a54b511ef99fbeb232", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -5156,43 +5156,63 @@ package body Freeze is\n                --  subprogram body that we are inside.\n \n                if In_Exp_Body (Parent_P) then\n-\n-                  --  However, we *do* want to freeze at this point if we have\n-                  --  an entity to freeze, and that entity is declared *inside*\n-                  --  the body of the expander generated procedure. This case\n-                  --  is recognized by the scope of the type, which is either\n-                  --  the spec for some enclosing body, or (in the case of\n-                  --  init_procs, for which there are no separate specs) the\n-                  --  current scope.\n-\n                   declare\n                      Subp : constant Node_Id := Parent (Parent_P);\n-                     Cspc : Entity_Id;\n+                     Spec : Entity_Id;\n \n                   begin\n+                     --  Freeze the entity only when it is declared inside the\n+                     --  body of the expander generated procedure. This case\n+                     --  is recognized by the scope of the entity or its type,\n+                     --  which is either the spec for some enclosing body, or\n+                     --  (in the case of init_procs, for which there are no\n+                     --  separate specs) the current scope.\n+\n                      if Nkind (Subp) = N_Subprogram_Body then\n-                        Cspc := Corresponding_Spec (Subp);\n+                        Spec := Corresponding_Spec (Subp);\n \n-                        if (Present (Typ) and then Scope (Typ) = Cspc)\n+                        if (Present (Typ) and then Scope (Typ) = Spec)\n                              or else\n-                           (Present (Nam) and then Scope (Nam) = Cspc)\n+                           (Present (Nam) and then Scope (Nam) = Spec)\n                         then\n                            exit;\n \n                         elsif Present (Typ)\n                           and then Scope (Typ) = Current_Scope\n-                          and then Current_Scope = Defining_Entity (Subp)\n+                          and then Defining_Entity (Subp) = Current_Scope\n                         then\n                            exit;\n                         end if;\n                      end if;\n-                  end;\n \n-                  --  If not that exception to the exception, then this is\n-                  --  where we delay the freeze till outside the body.\n+                     --  An expression function may act as a completion of\n+                     --  a function declaration. As such, it can reference\n+                     --  entities declared between the two views:\n \n-                  Parent_P := Parent (Parent_P);\n-                  Freeze_Outside := True;\n+                     --     Hidden [];                             -- 1\n+                     --     function F return ...;\n+                     --     private\n+                     --        function Hidden return ...;\n+                     --        function F return ... is (Hidden);  -- 2\n+\n+                     --  Refering to the example above, freezing the expression\n+                     --  of F (2) would place Hidden's freeze node (1) in the\n+                     --  wrong place. Avoid explicit freezing and let the usual\n+                     --  scenarios do the job - for example, reaching the end\n+                     --  of the private declarations.\n+\n+                     if Nkind (Original_Node (Subp)) =\n+                                                N_Expression_Function\n+                     then\n+                        null;\n+\n+                     --  Freeze outside the body\n+\n+                     else\n+                        Parent_P := Parent (Parent_P);\n+                        Freeze_Outside := True;\n+                     end if;\n+                  end;\n \n                --  Here if normal case where we are in handled statement\n                --  sequence and want to do the insertion right there."}, {"sha": "a4d01c9f8bad72c90d1e6f5f03a9e8cb966775d3", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -328,29 +328,36 @@ procedure Gnat1drv is\n          Exception_Mechanism := Back_End_Exceptions;\n       end if;\n \n-      --  Set proper status for overflow checks. If already set (by -gnato or\n-      --  -gnatp) then we have nothing to do.\n+      --  Set proper status for overflow checks\n+\n+      --  If already set (by - gnato or -gnatp) then we have nothing to do\n \n       if Opt.Suppress_Options.Overflow_Checks_General /= Not_Set then\n          null;\n \n+      --  Otherwise set appropriate default mode. Note: at present we set\n+      --  SUPPRESSED in all three of the following cases. They are separated\n+      --  because in the future we may make different choices.\n+\n       --  By default suppress overflow checks in -gnatg mode\n \n       elsif GNAT_Mode then\n          Suppress_Options.Overflow_Checks_General    := Suppressed;\n          Suppress_Options.Overflow_Checks_Assertions := Suppressed;\n \n       --  If we have backend divide and overflow checks, then by default\n-      --  overflow checks are minimized, which is a reasonable setting.\n+      --  overflow checks are suppressed. Historically this code used to\n+      --  activate overflow checks, although no target currently has these\n+      --  flags set, so this was dead code anyway.\n \n       elsif Targparm.Backend_Divide_Checks_On_Target\n               and\n             Targparm.Backend_Overflow_Checks_On_Target\n       then\n-         Suppress_Options.Overflow_Checks_General    := Minimized;\n-         Suppress_Options.Overflow_Checks_Assertions := Minimized;\n+         Suppress_Options.Overflow_Checks_General    := Suppressed;\n+         Suppress_Options.Overflow_Checks_Assertions := Suppressed;\n \n-      --  Otherwise for now, default is checks are suppressed. This is likely\n+      --  Otherwise for now, default is checks are suppressed. This is subject\n       --  to change in the future, but for now this is the compatible behavior\n       --  with previous versions of GNAT.\n "}, {"sha": "b94f035ba918e8263c13b05a2913d8ea2f658785", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -28212,9 +28212,15 @@ success. It should be possible to use @code{GetLastError} and\n features are not used, but it is not guaranteed to work.\n \n @item\n-It is not possible to link against Microsoft libraries except for\n+It is not possible to link against Microsoft C++ libraries except for\n import libraries. Interfacing must be done by the mean of DLLs.\n \n+@item\n+It is possible to link against Microsoft C libraries. Yet the preferred\n+solution is to use C/C++ compiler that comes with @value{EDITION}, since it\n+doesn't require having two different development environments and makes the\n+inter-language debugging experience smoother.\n+\n @item\n When the compilation environment is located on FAT32 drives, users may\n experience recompilations of the source files that have not changed if\n@@ -28302,14 +28308,14 @@ application that contains a mix of Ada and C/C++, the choice of your\n Windows C/C++ development environment conditions your overall\n interoperability strategy.\n \n-If you use @command{gcc} to compile the non-Ada part of your application,\n-there are no Windows-specific restrictions that affect the overall\n-interoperability with your Ada code. If you do want to use the\n-Microsoft tools for your non-Ada code, you have two choices:\n+If you use @command{gcc} or Microsoft C to compile the non-Ada part of\n+your application, there are no Windows-specific restrictions that\n+affect the overall interoperability with your Ada code. If you do want\n+to use the Microsoft tools for your C++ code, you have two choices:\n \n @enumerate\n @item\n-Encapsulate your non-Ada code in a DLL to be linked with your Ada\n+Encapsulate your C++ code in a DLL to be linked with your Ada\n application. In this case, use the Microsoft or whatever environment to\n build the DLL and use GNAT to build your executable\n (@pxref{Using DLLs with GNAT})."}, {"sha": "521eb80b174426c8efd3d8bd3a95f5de446385d0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 76, "deletions": 39, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -4902,6 +4902,48 @@ package body Sem_Ch13 is\n       end if;\n    end Analyze_Record_Representation_Clause;\n \n+   -------------------------------------------\n+   -- Build_Invariant_Procedure_Declaration --\n+   -------------------------------------------\n+\n+   function Build_Invariant_Procedure_Declaration\n+     (Typ : Entity_Id) return Node_Id\n+   is\n+      Loc           : constant Source_Ptr := Sloc (Typ);\n+      Object_Entity : constant Entity_Id :=\n+        Make_Defining_Identifier (Loc, New_Internal_Name ('I'));\n+      Spec          : Node_Id;\n+      SId           : Entity_Id;\n+\n+   begin\n+      Set_Etype (Object_Entity, Typ);\n+\n+      --  Check for duplicate definiations.\n+\n+      if Has_Invariants (Typ)\n+        and then Present (Invariant_Procedure (Typ))\n+      then\n+         return Empty;\n+      end if;\n+\n+      SId := Make_Defining_Identifier (Loc,\n+         Chars => New_External_Name (Chars (Typ), \"Invariant\"));\n+      Set_Has_Invariants (SId);\n+      Set_Has_Invariants (Typ);\n+      Set_Ekind (SId, E_Procedure);\n+      Set_Invariant_Procedure (Typ, SId);\n+\n+      Spec :=\n+        Make_Procedure_Specification (Loc,\n+          Defining_Unit_Name       => SId,\n+          Parameter_Specifications => New_List (\n+            Make_Parameter_Specification (Loc,\n+              Defining_Identifier => Object_Entity,\n+              Parameter_Type      => New_Occurrence_Of (Typ, Loc))));\n+\n+      return Make_Subprogram_Declaration (Loc, Specification => Spec);\n+   end Build_Invariant_Procedure_Declaration;\n+\n    -------------------------------\n    -- Build_Invariant_Procedure --\n    -------------------------------\n@@ -4936,12 +4978,11 @@ package body Sem_Ch13 is\n       --  \"inherited\" to the exception message and generating an informational\n       --  message about the inheritance of an invariant.\n \n-      Object_Name : constant Name_Id := New_Internal_Name ('I');\n+      Object_Name : Name_Id;\n       --  Name for argument of invariant procedure\n \n-      Object_Entity : constant Node_Id :=\n-                        Make_Defining_Identifier (Loc, Object_Name);\n-      --  The procedure declaration entity for the argument\n+      Object_Entity : Node_Id;\n+      --  The entity of the formal for the procedure\n \n       --------------------\n       -- Add_Invariants --\n@@ -5140,7 +5181,29 @@ package body Sem_Ch13 is\n       Stmts := No_List;\n       PDecl := Empty;\n       PBody := Empty;\n-      Set_Etype (Object_Entity, Typ);\n+      SId   := Empty;\n+\n+      --  If the aspect specification exists for some view of the type, the\n+      --  declaration for the procedure has been created.\n+\n+      if Has_Invariants (Typ) then\n+         SId := Invariant_Procedure (Typ);\n+      end if;\n+\n+      if Present (SId) then\n+         PDecl := Unit_Declaration_Node (SId);\n+\n+      else\n+         PDecl := Build_Invariant_Procedure_Declaration (Typ);\n+      end if;\n+\n+      --  Recover formal of procedure, for use in the calls to invariant\n+      --  functions (including inherited ones).\n+\n+      Object_Entity :=\n+        Defining_Identifier\n+          (First (Parameter_Specifications (Specification (PDecl))));\n+      Object_Name := Chars (Object_Entity);\n \n       --  Add invariants for the current type\n \n@@ -5174,38 +5237,7 @@ package body Sem_Ch13 is\n \n       if Stmts /= No_List then\n \n-         --  Build procedure declaration\n-\n-         SId :=\n-           Make_Defining_Identifier (Loc,\n-             Chars => New_External_Name (Chars (Typ), \"Invariant\"));\n-         Set_Has_Invariants (SId);\n-         Set_Invariant_Procedure (Typ, SId);\n-\n-         Spec :=\n-           Make_Procedure_Specification (Loc,\n-             Defining_Unit_Name       => SId,\n-             Parameter_Specifications => New_List (\n-               Make_Parameter_Specification (Loc,\n-                 Defining_Identifier => Object_Entity,\n-                 Parameter_Type      => New_Occurrence_Of (Typ, Loc))));\n-\n-         PDecl := Make_Subprogram_Declaration (Loc, Specification => Spec);\n-\n-         --  Build procedure body\n-\n-         SId :=\n-           Make_Defining_Identifier (Loc,\n-             Chars => New_External_Name (Chars (Typ), \"Invariant\"));\n-\n-         Spec :=\n-           Make_Procedure_Specification (Loc,\n-             Defining_Unit_Name       => SId,\n-             Parameter_Specifications => New_List (\n-               Make_Parameter_Specification (Loc,\n-                 Defining_Identifier =>\n-                   Make_Defining_Identifier (Loc, Object_Name),\n-                 Parameter_Type => New_Occurrence_Of (Typ, Loc))));\n+         Spec  := Copy_Separate_Tree (Specification (PDecl));\n \n          PBody :=\n            Make_Subprogram_Body (Loc,\n@@ -5216,14 +5248,18 @@ package body Sem_Ch13 is\n                  Statements => Stmts));\n \n          --  Insert procedure declaration and spec at the appropriate points.\n+         --  If declaration is already analyzed, it was processed by the\n+         --  generated pragma.\n \n          if Present (Private_Decls) then\n \n             --  The spec goes at the end of visible declarations, but they have\n             --  already been analyzed, so we need to explicitly do the analyze.\n \n-            Append_To (Visible_Decls, PDecl);\n-            Analyze (PDecl);\n+            if not Analyzed (PDecl) then\n+               Append_To (Visible_Decls, PDecl);\n+               Analyze (PDecl);\n+            end if;\n \n             --  The body goes at the end of the private declarations, which we\n             --  have not analyzed yet, so we do not need to perform an explicit\n@@ -5523,6 +5559,7 @@ package body Sem_Ch13 is\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (Typ), \"Predicate\"));\n          Set_Has_Predicates (SId);\n+         Set_Ekind (SId, E_Function);\n          Set_Predicate_Function (Typ, SId);\n \n          --  The predicate function is shared between views of a type."}, {"sha": "611f3f1c6172a7bbfd2e80f9243f8e4b3acf4e4e", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -46,6 +46,14 @@ package Sem_Ch13 is\n    --  order is specified and there is at least one component clause. Adjusts\n    --  component positions according to either Ada 95 or Ada 2005 (AI-133).\n \n+   function Build_Invariant_Procedure_Declaration\n+     (Typ : Entity_Id) return Node_Id;\n+   --  If a type declaration has a specified invariant aspect, build the\n+   --  declaration for the procedure at once, so that calls to it can be\n+   --  generated before the body of the invariant procedure is built. This\n+   --  is needed in the presence of public expression functions that return\n+   --  the type in question.\n+\n    procedure Build_Invariant_Procedure (Typ : Entity_Id; N : Node_Id);\n    --  Typ is a private type with invariants (indicated by Has_Invariants being\n    --  set for Typ, indicating the presence of pragma Invariant entries on the"}, {"sha": "103aa5b2bdd5b02e9925c533e98d25d25ea5cca3", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -28,6 +28,7 @@\n --  handling of private and full declarations, and the construction of dispatch\n --  tables for tagged types.\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n@@ -1387,7 +1388,21 @@ package body Sem_Ch7 is\n            and then Nkind (Parent (E)) = N_Full_Type_Declaration\n            and then Has_Aspects (Parent (E))\n          then\n-            Build_Invariant_Procedure (E, N);\n+            declare\n+               ASN : Node_Id;\n+            begin\n+               ASN := First (Aspect_Specifications (Parent (E)));\n+               while Present (ASN) loop\n+                  if Chars (Identifier (ASN)) = Name_Invariant\n+                    or else Chars (Identifier (ASN)) = Name_Type_Invariant\n+                  then\n+                     Build_Invariant_Procedure (E, N);\n+                     exit;\n+                  end if;\n+\n+                  Next (ASN);\n+               end loop;\n+            end;\n          end if;\n \n          Next_Entity (E);\n@@ -2143,6 +2158,14 @@ package body Sem_Ch7 is\n \n          Set_Freeze_Node (Priv, Freeze_Node (Full));\n \n+         --  Propagate information of type invariants, which may be specified\n+         --  for the full view.\n+\n+         if Has_Invariants (Full) and not Has_Invariants (Priv) then\n+            Set_Has_Invariants (Priv);\n+            Set_Subprograms_For_Type (Priv, Subprograms_For_Type (Full));\n+         end if;\n+\n          if Is_Tagged_Type (Priv)\n            and then Is_Tagged_Type (Full)\n            and then not Error_Posted (Full)"}, {"sha": "9b9de0a102baac06412a0440d532a5d71f1bfd9b", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -1629,6 +1629,15 @@ package body Sem_Dim is\n          Formal := First_Formal (Nam);\n \n          while Present (Formal) loop\n+\n+            --  A missing corresponding actual indicates that the analysis of\n+            --  the call was aborted due to a previous error.\n+\n+            if No (Actual) then\n+               Cascaded_Error;\n+               return;\n+            end if;\n+\n             Formal_Typ     := Etype (Formal);\n             Dims_Of_Formal := Dimensions_Of (Formal_Typ);\n "}, {"sha": "1739673bf06c39d22fd4a4cce6cdba5f227427cb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95081e99e234224e4bff070f2b0c332097f0901e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=95081e99e234224e4bff070f2b0c332097f0901e", "patch": "@@ -10329,6 +10329,7 @@ package body Sem_Prag is\n          when Pragma_Invariant => Invariant : declare\n             Type_Id : Node_Id;\n             Typ     : Entity_Id;\n+            PDecl   : Node_Id;\n \n             Discard : Boolean;\n             pragma Unreferenced (Discard);\n@@ -10380,8 +10381,13 @@ package body Sem_Prag is\n \n             --  Note that the type has at least one invariant, and also that\n             --  it has inheritable invariants if we have Invariant'Class.\n+            --  Build the corresponding invariant procedure declaration, so\n+            --  that calls to it can be generated before the body is built\n+            --  (for example wihin an expression function).\n \n-            Set_Has_Invariants (Typ);\n+            PDecl := Build_Invariant_Procedure_Declaration (Typ);\n+            Insert_After (N, PDecl);\n+            Analyze (PDecl);\n \n             if Class_Present (N) then\n                Set_Has_Inheritable_Invariants (Typ);"}]}