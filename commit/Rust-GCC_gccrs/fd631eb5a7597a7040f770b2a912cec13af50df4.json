{"sha": "fd631eb5a7597a7040f770b2a912cec13af50df4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2MzFlYjVhNzU5N2E3MDQwZjc3MGIyYTkxMmNlYzEzYWY1MGRmNA==", "commit": {"author": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2019-08-31T06:00:56Z"}, "committer": {"name": "Stafford Horne", "email": "shorne@gcc.gnu.org", "date": "2019-08-31T06:00:56Z"}, "message": "or1k: Fix issue with set_got clobbering LR (r9)\n\nWhen compiling glibc we found that the GOT register was being allocated\nr9 when the instruction was still set_got_tmp.  That is a problem\nbecause r9 is the Link Register (LR) in OpenRISC which is used/clobbered\nin set_got.  We cannot use r9 as the GOT register.  Also, we cannot\nsimply say set_got_tmp clobbers r9 as this is the reason for having the\ntemporary set_got_tmp.\n\nFix by using a register class constraint that does not allow r9 during\nregister allocation.\n\ngcc/ChangeLog:\n\n        * config/or1k/constraints.md (t): New constraint.\n        * config/or1k/or1k.h (GOT_REGS): New register class.\n        * config/or1k/or1k.md (set_got_tmp, set_got): Use t contraint.\n\nFrom-SVN: r275242", "tree": {"sha": "29306617e9d66d1e5b92c3832c3ab9d2e5d7a0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29306617e9d66d1e5b92c3832c3ab9d2e5d7a0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd631eb5a7597a7040f770b2a912cec13af50df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd631eb5a7597a7040f770b2a912cec13af50df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd631eb5a7597a7040f770b2a912cec13af50df4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd631eb5a7597a7040f770b2a912cec13af50df4/comments", "author": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ba155dd1921b55f04866b35a2e054e092670cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba155dd1921b55f04866b35a2e054e092670cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba155dd1921b55f04866b35a2e054e092670cd6"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "023275e1fb52b94a2bd27fed2576092dc6ef09fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd631eb5a7597a7040f770b2a912cec13af50df4", "patch": "@@ -1,3 +1,9 @@\n+2019-08-31  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/constraints.md (t): New constraint.\n+\t* config/or1k/or1k.h (GOT_REGS): New register class.\n+\t* config/or1k/or1k.md (set_got_tmp, set_got): Use t contraint.\n+\n 2019-08-30  Jim Wilson  <jimw@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_option_override): If -msave-restore"}, {"sha": "3ca477c1c9eb4e6e2b24fd90e140d903bb55c70a", "filename": "gcc/config/or1k/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2Fconfig%2For1k%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2Fconfig%2For1k%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Fconstraints.md?ref=fd631eb5a7597a7040f770b2a912cec13af50df4", "patch": "@@ -25,6 +25,7 @@\n ; We use:\n ;  c - sibcall registers\n ;  d - double pair base registers (excludes r0, r30 and r31 which overflow)\n+;  t - got address registers (excludes LR (r9) which is clobbered by set_got)\n ;  I - constant signed 16-bit\n ;  K - constant unsigned 16-bit\n ;  M - constant signed 16-bit shifted left 16-bits (l.movhi)\n@@ -36,6 +37,9 @@\n (define_register_constraint \"d\" \"DOUBLE_REGS\"\n   \"Registers which can be used for double reg pairs.\")\n \n+(define_register_constraint \"t\" \"GOT_REGS\"\n+  \"Registers which can be used to store the Global Offset Table (GOT) address.\")\n+\n ;; Immediates\n (define_constraint \"I\"\n   \"A signed 16-bit immediate in the range -32768 to 32767.\""}, {"sha": "4c32607bac1db5ef4a23dc09b96d42857f0660c4", "filename": "gcc/config/or1k/or1k.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2Fconfig%2For1k%2For1k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2Fconfig%2For1k%2For1k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.h?ref=fd631eb5a7597a7040f770b2a912cec13af50df4", "patch": "@@ -190,6 +190,7 @@ enum reg_class\n   NO_REGS,\n   SIBCALL_REGS,\n   DOUBLE_REGS,\n+  GOT_REGS,\n   GENERAL_REGS,\n   FLAG_REGS,\n   ALL_REGS,\n@@ -202,6 +203,7 @@ enum reg_class\n   \"NO_REGS\", \t\t\t\\\n   \"SIBCALL_REGS\",\t\t\\\n   \"DOUBLE_REGS\",\t\t\\\n+  \"GOT_REGS\",\t\t\t\\\n   \"GENERAL_REGS\",\t\t\\\n   \"FLAG_REGS\",\t\t\t\\\n   \"ALL_REGS\" }\n@@ -215,6 +217,7 @@ enum reg_class\n { { 0x00000000, 0x00000000 },\t\\\n   { SIBCALL_REGS_MASK,   0 },\t\\\n   { 0x7f7ffffe, 0x00000000 },\t\\\n+  { 0xfffffdff, 0x00000000 },\t\\\n   { 0xffffffff, 0x00000003 },\t\\\n   { 0x00000000, 0x00000004 },\t\\\n   { 0xffffffff, 0x00000007 }\t\\"}, {"sha": "36bcee336abd69ddaa5e3b49ecafeba442dc423f", "filename": "gcc/config/or1k/or1k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2Fconfig%2For1k%2For1k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd631eb5a7597a7040f770b2a912cec13af50df4/gcc%2Fconfig%2For1k%2For1k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.md?ref=fd631eb5a7597a7040f770b2a912cec13af50df4", "patch": "@@ -706,7 +706,7 @@\n ;; set_got pattern below.  This works because the set_got_tmp insn is the\n ;; first insn in the stream and that it isn't moved during RA.\n (define_insn \"set_got_tmp\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_SET_GOT))]\n   \"\"\n {\n@@ -715,7 +715,7 @@\n \n ;; The insn to initialize the GOT.\n (define_insn \"set_got\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n    (clobber (reg:SI LR_REGNUM))]\n   \"\""}]}