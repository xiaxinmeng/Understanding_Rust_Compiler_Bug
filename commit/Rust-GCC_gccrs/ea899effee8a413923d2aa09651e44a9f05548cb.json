{"sha": "ea899effee8a413923d2aa09651e44a9f05548cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4OTllZmZlZThhNDEzOTIzZDJhYTA5NjUxZTQ0YTlmMDU1NDhjYg==", "commit": {"author": {"name": "Roman Kennke", "email": "roman@ontographics.com", "date": "2005-04-19T05:39:27Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-19T05:39:27Z"}, "message": "CellRendererPane.java: implemented all methods of this class.\n\n2005-04-19  Roman Kennke  <roman@ontographics.com>\n\n\t* javax/swing/CellRendererPane.java:\n\timplemented all methods of this class.\n\treformatted all wrong formatted code.\n\nFrom-SVN: r98379", "tree": {"sha": "6883fb47b32ae03958e691bfa679b97d3c99dfc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6883fb47b32ae03958e691bfa679b97d3c99dfc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea899effee8a413923d2aa09651e44a9f05548cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea899effee8a413923d2aa09651e44a9f05548cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea899effee8a413923d2aa09651e44a9f05548cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea899effee8a413923d2aa09651e44a9f05548cb/comments", "author": null, "committer": null, "parents": [{"sha": "f8bf4f42f2c2b4c6c6a711a070068e47d0bcb84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8bf4f42f2c2b4c6c6a711a070068e47d0bcb84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8bf4f42f2c2b4c6c6a711a070068e47d0bcb84e"}], "stats": {"total": 277, "additions": 167, "deletions": 110}, "files": [{"sha": "29d956ab634c658ecef2f26734e943f7a11ecbd0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea899effee8a413923d2aa09651e44a9f05548cb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea899effee8a413923d2aa09651e44a9f05548cb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ea899effee8a413923d2aa09651e44a9f05548cb", "patch": "@@ -1,3 +1,9 @@\n+2005-04-19  Roman Kennke  <roman@ontographics.com>\n+\n+\t* javax/swing/CellRendererPane.java:\n+\timplemented all methods of this class.\n+\treformatted all wrong formatted code.\n+\n 2005-04-19  Roman Kennke  <roman@kennke.org>\n \n \t* javax/swing/BoxLayout.java:"}, {"sha": "0ef270bf85a6a2ff444ff5cfedc3bbf9afedcb41", "filename": "libjava/javax/swing/CellRendererPane.java", "status": "modified", "additions": 161, "deletions": 110, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea899effee8a413923d2aa09651e44a9f05548cb/libjava%2Fjavax%2Fswing%2FCellRendererPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea899effee8a413923d2aa09651e44a9f05548cb/libjava%2Fjavax%2Fswing%2FCellRendererPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FCellRendererPane.java?ref=ea899effee8a413923d2aa09651e44a9f05548cb", "patch": "@@ -50,11 +50,16 @@\n import javax.accessibility.AccessibleRole;\n \n /**\n- * CellRendererPane\n+ * The CellRendererPane's purpose is to paint the cells of JList, JTable and\n+ * JTree. It intercepts the usual paint tree, so that we don't walk up and\n+ * repaint everything.\n+ *\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class CellRendererPane extends Container implements Accessible\n+public class CellRendererPane\n+  extends Container\n+  implements Accessible\n {\n   private static final long serialVersionUID = -7642183829532984273L;\n \n@@ -83,116 +88,162 @@ public AccessibleRole getAccessibleRole()\n     }\n   }\n \n-\t/**\n-\t * accessibleContext\n-\t */\n-\tprotected AccessibleContext accessibleContext = null;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor CellRendererPane\n-\t */\n-\tpublic CellRendererPane() {\n-\t\t// TODO\n-\t} // CellRendererPane()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * writeObject\n-\t * @param stream TODO\n-\t * @exception IOException TODO\n-\t */\n-\tprivate void writeObject(ObjectOutputStream stream) throws IOException {\n-\t\t// TODO\n-\t} // writeObject()\n-\n-\t/**\n-\t * update\n-\t * @param graphics TODO\n-\t */\n-\tpublic void update(Graphics graphics) {\n-\t\t// TODO\n-\t} // update()\n-\n-\t/**\n-\t * invalidate\n-\t */\n-\tpublic void invalidate() {\n-\t\t// TODO\n-\t} // invalidate()\n-\n-\t/**\n-\t * paint\n-\t * @param graphics TODO\n-\t */\n-\tpublic void paint(Graphics graphics) {\n-\t\t// TODO\n-\t} // paint()\n-\n-\t/**\n-\t * addImpl\n-\t * @param c TODO\n-\t * @param constraints TODO\n-\t * @param index TODO\n-\t */\n-\tprotected void addImpl(Component c, Object constraints, int index) {\n-\t\t// TODO\n-\t} // addImpl()\n-\n-\t/**\n-\t * paintComponent\n-\t * @param graphics TODO\n-\t * @param c TODO\n-\t * @param p TODO\n-\t * @param x TODO\n-\t * @param y TODO\n-\t * @param w TODO\n-\t * @param h TODO\n-\t * @param shouldValidate TODO\n-\t */\n-\tpublic void paintComponent(Graphics graphics, Component c,\n-\t\t\tContainer p, int x, int y, int w, int h, \n-\t\t\tboolean shouldValidate) {\n-\t\t// TODO\n-\t} // paintComponent()\n-\n-\t/**\n-\t * paintComponent\n-\t * @param graphics TODO\n-\t * @param c TODO\n-\t * @param p TODO\n-\t * @param x TODO\n-\t * @param y TODO\n-\t * @param w TODO\n-\t * @param h TODO\n-\t */\n-\tpublic void paintComponent(Graphics graphics, Component c,\n-\t\t\tContainer p, int x, int y, int w, int h) {\n-\t\t// TODO\n-\t} // paintComponent()\n-\n-\t/**\n-\t * paintComponent\n-\t * @param graphics TODO\n-\t * @param c TODO\n-\t * @param p TODO\n-\t * @param r TODO\n-\t */\n-\tpublic void paintComponent(Graphics graphics, Component c,\n-\t\t\tContainer p, Rectangle r) {\n-\t\t// TODO\n-\t} // paintComponent()\n+  /**\n+   * accessibleContext\n+   */\n+  protected AccessibleContext accessibleContext = null;\n+\n+\n+  //-------------------------------------------------------------\n+  // Initialization ---------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * Constructs a new CellRendererPane.\n+   */\n+  public CellRendererPane()\n+  {\n+  } // CellRendererPane()\n+\n+\n+  //-------------------------------------------------------------\n+  // Methods ----------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * Should not be called.\n+   *\n+   * @param graphics not used here\n+   */\n+  public void update(Graphics graphics)\n+  {\n+  } // update()\n+\n+  /**\n+   * Despite normal behaviour this does <em>not</em> cause the container\n+   * to be invalidated. This prevents propagating up the paint tree.\n+   */\n+  public void invalidate()\n+  {\n+  } // invalidate()\n+\n+  /**\n+   * Should not be called.\n+   *\n+   * @param graphics not used here\n+   */\n+  public void paint(Graphics graphics)\n+  {\n+  }\n+\n+  /**\n+   * Overridden to check if a component is already a child of this Container.\n+   * If it's already a child, nothing is done. Otherwise we pass this to\n+   * <code>super.addImpl()</code>.\n+   *\n+   * @param c the component to add\n+   * @param constraints not used here\n+   * @param index not used here\n+   */\n+  protected void addImpl(Component c, Object constraints, int index)\n+  {\n+    if (!isAncestorOf(c))\n+      {\n+        super.addImpl(c, constraints, index);\n+      }\n+  } // addImpl()\n+\n+  /**\n+   * Paints the specified component <code>c</code> on the {@link Graphics}\n+   * context <code>graphics</code>. The Graphics context is tranlated to\n+   * (x,y) and the components bounds are set to (w,h). If\n+   * <code>shouldValidate</code>\n+   * is set to true, then the component is validated before painting.\n+   *\n+   * @param graphics the graphics context to paint on\n+   * @param c the component to be painted\n+   * @param p the parent of the component\n+   * @param x the X coordinate of the upper left corner where c should\n+            be painted\n+   * @param y the Y coordinate of the upper left corner where c should\n+            be painted\n+   * @param w the width of the components drawing area\n+   * @param h the height of the components drawing area\n+   * @param shouldValidate if <code>c</code> should be validated before\n+   *        painting\n+   */\n+  public void paintComponent(Graphics graphics, Component c,\n+                             Container p, int x, int y, int w, int h, \n+                             boolean shouldValidate)\n+  {\n+    // reparent c\n+    addImpl(c, null, 0);\n+\n+    // translate to (x,y)\n+    graphics.translate(x, y);\n+\n+    // set bounds of c\n+    c.setBounds(0, 0, w, h);\n+\n+    // validate if necessary\n+    if (shouldValidate)\n+      {\n+        c.validate();\n+      }\n+\n+    // paint component\n+    c.paint(graphics);\n+\n+    // untranslate g\n+    graphics.translate(-x, -y);\n+\n+  } // paintComponent()\n+\n+  /**\n+   * Paints the specified component <code>c</code> on the {@link Graphics}\n+   * context <code>graphics</code>. The Graphics context is tranlated to (x,y)\n+   * and the components bounds are set to (w,h). The component is <em>not</em>\n+   * validated before painting.\n+   *\n+   * @param graphics the graphics context to paint on\n+   * @param c the component to be painted\n+   * @param p the parent of the component\n+   * @param x the X coordinate of the upper left corner where c should\n+            be painted\n+   * @param y the Y coordinate of the upper left corner where c should\n+            be painted\n+   * @param w the width of the components drawing area\n+   * @param h the height of the components drawing area\n+   */\n+  public void paintComponent(Graphics graphics, Component c,\n+                             Container p, int x, int y, int w, int h) {\n+\n+    paintComponent(graphics, c, p, x, y, w, h, false);\n+\n+  } // paintComponent()\n+\n+  /**\n+   * Paints the specified component <code>c</code> on the {@link Graphics}\n+   * context <code>g</code>. The Graphics context is tranlated to (r.x,r.y) and\n+   * the components bounds are set to (r.width,r.height).\n+   * The component is <em>not</em>\n+   * validated before painting.\n+   *\n+   * @param graphics the graphics context to paint on\n+   * @param c the component to be painted\n+   * @param p the component on which we paint\n+   * @param r the bounding rectangle of c\n+   */\n+  public void paintComponent(Graphics graphics, Component c,\n+                             Container p, Rectangle r)\n+  {\n+\n+    paintComponent(graphics, c, p, r.x, r.y, r.width, r.height);\n+\n+  } // paintComponent()\n \n   /**\n-   * getAccessibleContext\n+   * getAccessibleContext <em>TODO</em>\n    * @return AccessibleContext\n    */\n   public AccessibleContext getAccessibleContext()"}]}