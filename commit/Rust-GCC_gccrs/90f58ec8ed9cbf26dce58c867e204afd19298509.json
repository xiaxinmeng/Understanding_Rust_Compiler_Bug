{"sha": "90f58ec8ed9cbf26dce58c867e204afd19298509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmNThlYzhlZDljYmYyNmRjZTU4Yzg2N2UyMDRhZmQxOTI5ODUwOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-20T14:22:33Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-20T14:22:33Z"}, "message": "trans-stmt.c (gfc_trans_where_2): Avoid updating unused current execution mask for empty WHERE/ELSEWHERE clauses.\n\n\n\t* trans-stmt.c (gfc_trans_where_2): Avoid updating unused current\n\texecution mask for empty WHERE/ELSEWHERE clauses.  Don't allocate\n\ttemporary mask arrays if they won't be used.\n\nFrom-SVN: r111303", "tree": {"sha": "198c569b1f6f7e1aa0b1e096ca980cb549bac953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198c569b1f6f7e1aa0b1e096ca980cb549bac953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f58ec8ed9cbf26dce58c867e204afd19298509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f58ec8ed9cbf26dce58c867e204afd19298509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f58ec8ed9cbf26dce58c867e204afd19298509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f58ec8ed9cbf26dce58c867e204afd19298509/comments", "author": null, "committer": null, "parents": [{"sha": "c849c938da6a020ec36b705ae9d4ce159661241d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c849c938da6a020ec36b705ae9d4ce159661241d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c849c938da6a020ec36b705ae9d4ce159661241d"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "b54c9df33921588a2b4cd22673720efdfa9027c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f58ec8ed9cbf26dce58c867e204afd19298509/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f58ec8ed9cbf26dce58c867e204afd19298509/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=90f58ec8ed9cbf26dce58c867e204afd19298509", "patch": "@@ -1,3 +1,9 @@\n+2006-02-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* trans-stmt.c (gfc_trans_where_2): Avoid updating unused current\n+\texecution mask for empty WHERE/ELSEWHERE clauses.  Don't allocate\n+\ttemporary mask arrays if they won't be used.\n+\n 2006-02-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-stmt.c (gfc_trans_where_assign): Remove code to handle"}, {"sha": "14a2a23e4f9c4df4c9638f1ec58d4c92b3fa9335", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f58ec8ed9cbf26dce58c867e204afd19298509/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f58ec8ed9cbf26dce58c867e204afd19298509/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=90f58ec8ed9cbf26dce58c867e204afd19298509", "patch": "@@ -2960,12 +2960,28 @@ gfc_trans_where_2 (gfc_code * code, tree mask,\n   /* As the mask array can be very big, prefer compact boolean types.  */\n   mask_type = gfc_get_logical_type (gfc_logical_kinds[0].kind);\n \n-  /* Allocate temporary for where mask.  */\n-  cmask = allocate_temp_for_forall_nest_1 (mask_type, size, block, &pcmask);\n+  /* Allocate temporary for WHERE mask.  We only need a \"cmask\" if\n+     there are statements to be executed.  The following test only\n+     checks the first ELSEWHERE to catch the F90 cases.  */\n+  if (cblock->next\n+      || (cblock->block && cblock->block->next && cblock->block->expr)\n+      || (cblock->block && cblock->block->block))\n+    {\n+      cmask = allocate_temp_for_forall_nest_1 (mask_type, size, block,\n+\t\t\t\t\t       &pcmask);\n+    }\n+  else\n+    {\n+      pcmask = NULL_TREE;\n+      cmask = NULL_TREE;\n+    }\n \n-  if (cblock->block)\n+  /* Allocate temporary for !mask.  We only need a \"pmask\" if there \n+     is an ELSEWHERE clause containing executable statements.  Again\n+     we only lookahead a single ELSEWHERE to catch the F90 cases.  */\n+  if ((cblock->block && cblock->block->next)\n+      || (cblock->block && cblock->block->block))\n     {\n-      /* Allocate temporary for !mask.  */\n       pmask = allocate_temp_for_forall_nest_1 (mask_type, size, block,\n \t\t\t\t\t       &ppmask);\n     }\n@@ -2980,17 +2996,18 @@ gfc_trans_where_2 (gfc_code * code, tree mask,\n       /* Has mask-expr.  */\n       if (cblock->expr)\n         {\n-\t  /* If this is the last clause of the WHERE construct, then\n+          /* Ensure that the WHERE mask will be evaluated exactly once.\n+\t     If there are no statements in this WHERE/ELSEWHERE clause,\n+\t     then we don't need to update the control mask (cmask).\n+\t     If this is the last clause of the WHERE construct, then\n \t     we don't need to update the pending control mask (pmask).  */\n-\t  if (! cblock->block)\n-\t    pmask = NULL_TREE;\n-\n-          /* Ensure that the WHERE mask be evaluated only once.  */\n-          gfc_evaluate_where_mask (cblock->expr, nested_forall_info,\n-\t\t\t\t   mask, cmask, pmask, mask_type, block);\n+          gfc_evaluate_where_mask (cblock->expr, nested_forall_info, mask,\n+\t\t\t\t   cblock->next ? cmask : NULL_TREE,\n+\t\t\t\t   cblock->block ? pmask : NULL_TREE,\n+\t\t\t\t   mask_type, block);\n \n         }\n-      /* It's a elsewhere-stmt. No mask-expr is present.  */\n+      /* It's a final elsewhere-stmt. No mask-expr is present.  */\n       else\n         cmask = mask;\n "}]}