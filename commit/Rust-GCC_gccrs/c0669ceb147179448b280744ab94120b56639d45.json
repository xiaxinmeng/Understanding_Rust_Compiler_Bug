{"sha": "c0669ceb147179448b280744ab94120b56639d45", "node_id": "C_kwDOANBUbNoAKGMwNjY5Y2ViMTQ3MTc5NDQ4YjI4MDc0NGFiOTQxMjBiNTY2MzlkNDU", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-10-13T16:50:13Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-10-13T20:49:25Z"}, "message": "Refactor HIR to use new Mutability enum\n\nIntroduce a new header rust/util/rust-common.h and move the enum\npreviously Rust::TyTy::TypeMutability there as Rust::Mutability.\n\nUpdate the following objects to use Mutability enum rather than a bool:\n- HIR::IdentifierPattern\n- HIR::ReferencePattern\n- HIR::StructPatternFieldIdent\n- HIR::BorrowExpr\n- HIR::RawPointerType\n- HIR::ReferenceType\n- HIR::StaticItem\n- HIR::ExternalStaticItem\n\nAlso add a HIR::SelfParam::get_mut () helper, mapping its internal\ncustom mutability to the common Rust::Mutability.\n\nFixes: #731", "tree": {"sha": "2b448df48a9790b1ddc335809e40cb52434a16bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b448df48a9790b1ddc335809e40cb52434a16bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0669ceb147179448b280744ab94120b56639d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0669ceb147179448b280744ab94120b56639d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0669ceb147179448b280744ab94120b56639d45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0669ceb147179448b280744ab94120b56639d45/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3057d98a4e3fc777b06e51cd678723f5c5b4c898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3057d98a4e3fc777b06e51cd678723f5c5b4c898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3057d98a4e3fc777b06e51cd678723f5c5b4c898"}], "stats": {"total": 274, "additions": 163, "deletions": 111}, "files": [{"sha": "9ef72efd927a04dbaeee92d65b61a802b3b7c9e5", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -40,7 +40,7 @@ class CompileFnParam : public HIRCompileBase\n \n   void visit (HIR::IdentifierPattern &pattern) override\n   {\n-    if (!pattern.is_mut)\n+    if (!pattern.is_mut ())\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n     translated"}, {"sha": "bd15a0cb98ddeb4c044c514ff80b4b29b5e8ceca", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -54,7 +54,7 @@ class CompileVarDecl : public HIRCompileBase\n \n   void visit (HIR::IdentifierPattern &pattern) override\n   {\n-    if (!pattern.is_mut)\n+    if (!pattern.is_mut ())\n       translated_type = ctx->get_backend ()->immutable_type (translated_type);\n \n     translated"}, {"sha": "586ec0a906d6713a8c8822069ee40cca50a2ef54", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -649,11 +649,10 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n-    translated\n-      = new HIR::BorrowExpr (mapping,\n-\t\t\t     std::unique_ptr<HIR::Expr> (borrow_lvalue),\n-\t\t\t     expr.get_is_mut (), expr.get_is_double_borrow (),\n-\t\t\t     expr.get_outer_attrs (), expr.get_locus ());\n+    translated = new HIR::BorrowExpr (\n+      mapping, std::unique_ptr<HIR::Expr> (borrow_lvalue),\n+      expr.get_is_mut () ? Mutability::Mut : Mutability::Imm,\n+      expr.get_is_double_borrow (), expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n   void visit (AST::DereferenceExpr &expr) override"}, {"sha": "80852cff20a09707bd8803f1ee980df6b3ac2bd1", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -48,12 +48,10 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    HIR::ExternalStaticItem *static_item\n-      = new HIR::ExternalStaticItem (mapping, item.get_identifier (),\n-\t\t\t\t     std::unique_ptr<HIR::Type> (static_type),\n-\t\t\t\t     item.is_mut (), std::move (vis),\n-\t\t\t\t     item.get_outer_attrs (),\n-\t\t\t\t     item.get_locus ());\n+    HIR::ExternalStaticItem *static_item = new HIR::ExternalStaticItem (\n+      mapping, item.get_identifier (), std::unique_ptr<HIR::Type> (static_type),\n+      item.is_mut () ? Mutability::Mut : Mutability::Imm, std::move (vis),\n+      item.get_outer_attrs (), item.get_locus ());\n \n     translated = static_item;\n "}, {"sha": "5b4ebc5ed63e4672d58b3d2db171e17f4d557ad6", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -339,11 +339,12 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated\n-      = new HIR::StaticItem (mapping, var.get_identifier (), var.is_mutable (),\n-\t\t\t     std::unique_ptr<HIR::Type> (type),\n-\t\t\t     std::unique_ptr<HIR::Expr> (expr), vis,\n-\t\t\t     var.get_outer_attrs (), var.get_locus ());\n+    translated = new HIR::StaticItem (mapping, var.get_identifier (),\n+\t\t\t\t      var.is_mutable () ? Mutability::Mut\n+\t\t\t\t\t\t\t: Mutability::Imm,\n+\t\t\t\t      std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t      std::unique_ptr<HIR::Expr> (expr), vis,\n+\t\t\t\t      var.get_outer_attrs (), var.get_locus ());\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),"}, {"sha": "c68044ae1c2ea82f52c7994dcfa6ece7eb5033a4", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -45,7 +45,9 @@ class ASTLoweringPattern : public ASTLoweringBase\n     translated\n       = new HIR::IdentifierPattern (pattern.get_ident (), pattern.get_locus (),\n \t\t\t\t    pattern.get_is_ref (),\n-\t\t\t\t    pattern.get_is_mut (), std::move (to_bind));\n+\t\t\t\t    pattern.get_is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t\t  : Mutability::Imm,\n+\t\t\t\t    std::move (to_bind));\n   }\n \n private:"}, {"sha": "f5d764185c824dd3fdf92ac6cd806cbb5d3bb8cb", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -247,7 +247,9 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated = new HIR::ReferenceType (mapping, type.get_has_mut (),\n+    translated = new HIR::ReferenceType (mapping,\n+\t\t\t\t\t type.get_has_mut () ? Mutability::Mut\n+\t\t\t\t\t\t\t     : Mutability::Imm,\n \t\t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n \t\t\t\t\t type.get_locus (), lifetime);\n \n@@ -268,7 +270,9 @@ class ASTLoweringType : public ASTLoweringBase\n     translated\n       = new HIR::RawPointerType (mapping,\n \t\t\t\t type.get_pointer_type ()\n-\t\t\t\t   == AST::RawPointerType::PointerType::MUT,\n+\t\t\t\t     == AST::RawPointerType::PointerType::MUT\n+\t\t\t\t   ? Mutability::Mut\n+\t\t\t\t   : Mutability::Imm,\n \t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n \t\t\t\t type.get_locus ());\n "}, {"sha": "a1865c3031744a384eb0ffc55ac91109e377141a", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_HIR_EXPR_H\n #define RUST_HIR_EXPR_H\n \n+#include \"rust-common.h\"\n #include \"rust-ast-full-decls.h\"\n #include \"rust-hir.h\"\n #include \"rust-hir-path.h\"\n@@ -171,23 +172,24 @@ class OperatorExpr : public ExprWithoutBlock\n  * overloaded. */\n class BorrowExpr : public OperatorExpr\n {\n-  bool is_mut;\n+  Mutability mut;\n   bool double_borrow;\n \n public:\n   std::string as_string () const override;\n \n   BorrowExpr (Analysis::NodeMapping mappings,\n-\t      std::unique_ptr<Expr> borrow_lvalue, bool is_mut_borrow,\n+\t      std::unique_ptr<Expr> borrow_lvalue, Mutability mut,\n \t      bool is_double_borrow, AST::AttrVec outer_attribs, Location locus)\n     : OperatorExpr (std::move (mappings), std::move (borrow_lvalue),\n \t\t    std::move (outer_attribs), locus),\n-      is_mut (is_mut_borrow), double_borrow (is_double_borrow)\n+      mut (mut), double_borrow (is_double_borrow)\n   {}\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  bool get_is_mut () const { return is_mut; }\n+  Mutability get_mut () const { return mut; }\n+  bool is_mut () const { return mut == Mutability::Mut; }\n   bool get_is_double_borrow () const { return double_borrow; }\n \n protected:"}, {"sha": "5a4ff76d24867479a5e7ea127558c6f8ed972c76", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -221,7 +221,7 @@ StaticItem::as_string () const\n \n   str += indent_spaces (stay) + \"static\";\n \n-  if (has_mut)\n+  if (is_mut ())\n     {\n       str += \" mut\";\n     }\n@@ -1200,7 +1200,7 @@ BorrowExpr::as_string () const\n       str += \"&\";\n     }\n \n-  if (is_mut)\n+  if (is_mut ())\n     {\n       str += \"mut \";\n     }\n@@ -2463,7 +2463,7 @@ StructPatternFieldIdent::as_string () const\n       str += \"ref \";\n     }\n \n-  if (has_mut)\n+  if (is_mut ())\n     {\n       str += \"mut \";\n     }\n@@ -2570,7 +2570,7 @@ ReferencePattern::as_string () const\n       str += \"&\";\n     }\n \n-  if (is_mut)\n+  if (is_mut ())\n     {\n       str += \"mut \";\n     }\n@@ -2590,7 +2590,7 @@ IdentifierPattern::as_string () const\n       str += \"ref \";\n     }\n \n-  if (is_mut)\n+  if (is_mut ())\n     {\n       str += \"mut \";\n     }\n@@ -2776,7 +2776,7 @@ ReferenceType::as_string () const\n       str += lifetime.as_string () + \" \";\n     }\n \n-  if (has_mut)\n+  if (is_mut ())\n     {\n       str += \"mut \";\n     }\n@@ -3249,7 +3249,7 @@ ExternalStaticItem::as_string () const\n \n   str += \"static \";\n \n-  if (has_mut)\n+  if (is_mut ())\n     {\n       str += \"mut \";\n     }"}, {"sha": "40913550ed012e93c9702182368d17ba5653be16", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -404,6 +404,14 @@ struct SelfParam\n \n   Analysis::NodeMapping get_mappings () { return mappings; }\n \n+  Mutability get_mut () const\n+  {\n+    return (self_kind == ImplicitSelfKind::MUT\n+\t    || self_kind == ImplicitSelfKind::MUT_REF)\n+\t     ? Mutability::Mut\n+\t     : Mutability::Imm;\n+  }\n+\n   bool is_mut () const\n   {\n     return self_kind == ImplicitSelfKind::MUT\n@@ -2033,7 +2041,7 @@ class ConstantItem : public VisItem, public ImplItem\n  * duration? */\n class StaticItem : public VisItem\n {\n-  bool has_mut;\n+  Mutability mut;\n   Identifier name;\n   std::unique_ptr<Type> type;\n   std::unique_ptr<Expr> expr;\n@@ -2042,17 +2050,17 @@ class StaticItem : public VisItem\n public:\n   std::string as_string () const override;\n \n-  StaticItem (Analysis::NodeMapping mappings, Identifier name, bool is_mut,\n+  StaticItem (Analysis::NodeMapping mappings, Identifier name, Mutability mut,\n \t      std::unique_ptr<Type> type, std::unique_ptr<Expr> expr,\n \t      Visibility vis, AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n-      has_mut (is_mut), name (std::move (name)), type (std::move (type)),\n+      mut (mut), name (std::move (name)), type (std::move (type)),\n       expr (std::move (expr)), locus (locus)\n   {}\n \n   // Copy constructor with clone\n   StaticItem (StaticItem const &other)\n-    : VisItem (other), has_mut (other.has_mut), name (other.name),\n+    : VisItem (other), mut (other.mut), name (other.name),\n       type (other.type->clone_type ()), expr (other.expr->clone_expr ()),\n       locus (other.locus)\n   {}\n@@ -2062,7 +2070,7 @@ class StaticItem : public VisItem\n   {\n     VisItem::operator= (other);\n     name = other.name;\n-    has_mut = other.has_mut;\n+    mut = other.mut;\n     type = other.type->clone_type ();\n     expr = other.expr->clone_expr ();\n     locus = other.locus;\n@@ -2080,7 +2088,9 @@ class StaticItem : public VisItem\n \n   Identifier get_identifier () const { return name; }\n \n-  bool is_mutable () const { return has_mut; }\n+  Mutability get_mut () const { return mut; }\n+\n+  bool is_mut () const { return mut == Mutability::Mut; }\n \n   Expr *get_expr () { return expr.get (); }\n \n@@ -2726,21 +2736,21 @@ class ExternalItem\n // A static item used in an extern block\n class ExternalStaticItem : public ExternalItem\n {\n-  bool has_mut;\n+  Mutability mut;\n   std::unique_ptr<Type> item_type;\n \n public:\n   ExternalStaticItem (Analysis::NodeMapping mappings, Identifier item_name,\n-\t\t      std::unique_ptr<Type> item_type, bool is_mut,\n+\t\t      std::unique_ptr<Type> item_type, Mutability mut,\n \t\t      Visibility vis, AST::AttrVec outer_attrs, Location locus)\n     : ExternalItem (std::move (mappings), std::move (item_name),\n \t\t    std::move (vis), std::move (outer_attrs), locus),\n-      has_mut (is_mut), item_type (std::move (item_type))\n+      mut (mut), item_type (std::move (item_type))\n   {}\n \n   // Copy constructor\n   ExternalStaticItem (ExternalStaticItem const &other)\n-    : ExternalItem (other), has_mut (other.has_mut),\n+    : ExternalItem (other), mut (other.mut),\n       item_type (other.item_type->clone_type ())\n   {}\n \n@@ -2749,7 +2759,7 @@ class ExternalStaticItem : public ExternalItem\n   {\n     ExternalItem::operator= (other);\n     item_type = other.item_type->clone_type ();\n-    has_mut = other.has_mut;\n+    mut = other.mut;\n \n     return *this;\n   }\n@@ -2762,6 +2772,10 @@ class ExternalStaticItem : public ExternalItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  bool is_mut () const { return mut == Mutability::Mut; }\n+\n+  Mutability get_mut () { return mut; }\n+\n   std::unique_ptr<Type> &get_item_type () { return item_type; }\n \n protected:"}, {"sha": "14a2a7dfee8ea0bb4018f6f6112220b435dbe709", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_HIR_PATTERN_H\n #define RUST_HIR_PATTERN_H\n \n+#include \"rust-common.h\"\n #include \"rust-hir.h\"\n \n namespace Rust {\n@@ -70,7 +71,7 @@ class IdentifierPattern : public Pattern\n public:\n   Identifier variable_ident;\n   bool is_ref;\n-  bool is_mut;\n+  Mutability mut;\n \n   // bool has_pattern;\n   std::unique_ptr<Pattern> to_bind;\n@@ -84,16 +85,16 @@ class IdentifierPattern : public Pattern\n \n   // Constructor\n   IdentifierPattern (Identifier ident, Location locus, bool is_ref = false,\n-\t\t     bool is_mut = false,\n+\t\t     Mutability mut = Mutability::Imm,\n \t\t     std::unique_ptr<Pattern> to_bind = nullptr)\n-    : variable_ident (std::move (ident)), is_ref (is_ref), is_mut (is_mut),\n+    : variable_ident (std::move (ident)), is_ref (is_ref), mut (mut),\n       to_bind (std::move (to_bind)), locus (locus)\n   {}\n \n   // Copy constructor with clone\n   IdentifierPattern (IdentifierPattern const &other)\n     : variable_ident (other.variable_ident), is_ref (other.is_ref),\n-      is_mut (other.is_mut), locus (other.locus)\n+      mut (other.mut), locus (other.locus)\n   {\n     // fix to get prevent null pointer dereference\n     if (other.to_bind != nullptr)\n@@ -105,7 +106,7 @@ class IdentifierPattern : public Pattern\n   {\n     variable_ident = other.variable_ident;\n     is_ref = other.is_ref;\n-    is_mut = other.is_mut;\n+    mut = other.mut;\n     locus = other.locus;\n \n     // fix to get prevent null pointer dereference\n@@ -121,6 +122,8 @@ class IdentifierPattern : public Pattern\n \n   Location get_locus () const { return locus; }\n \n+  bool is_mut () const { return mut == Mutability::Mut; }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n protected:\n@@ -327,30 +330,30 @@ class RangePattern : public Pattern\n class ReferencePattern : public Pattern\n {\n   bool has_two_amps;\n-  bool is_mut;\n+  Mutability mut;\n   std::unique_ptr<Pattern> pattern;\n   Location locus;\n \n public:\n   std::string as_string () const override;\n \n-  ReferencePattern (std::unique_ptr<Pattern> pattern, bool is_mut_reference,\n+  ReferencePattern (std::unique_ptr<Pattern> pattern, Mutability reference_mut,\n \t\t    bool ref_has_two_amps, Location locus)\n-    : has_two_amps (ref_has_two_amps), is_mut (is_mut_reference),\n+    : has_two_amps (ref_has_two_amps), mut (reference_mut),\n       pattern (std::move (pattern)), locus (locus)\n   {}\n \n   // Copy constructor requires clone\n   ReferencePattern (ReferencePattern const &other)\n-    : has_two_amps (other.has_two_amps), is_mut (other.is_mut),\n+    : has_two_amps (other.has_two_amps), mut (other.mut),\n       pattern (other.pattern->clone_pattern ()), locus (other.locus)\n   {}\n \n   // Overload assignment operator to clone\n   ReferencePattern &operator= (ReferencePattern const &other)\n   {\n     pattern = other.pattern->clone_pattern ();\n-    is_mut = other.is_mut;\n+    mut = other.mut;\n     has_two_amps = other.has_two_amps;\n     locus = other.locus;\n \n@@ -361,6 +364,8 @@ class ReferencePattern : public Pattern\n   ReferencePattern (ReferencePattern &&other) = default;\n   ReferencePattern &operator= (ReferencePattern &&other) = default;\n \n+  bool is_mut () const { return mut == Mutability::Mut; }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n protected:\n@@ -527,18 +532,20 @@ class StructPatternFieldIdentPat : public StructPatternField\n class StructPatternFieldIdent : public StructPatternField\n {\n   bool has_ref;\n-  bool has_mut;\n+  Mutability mut;\n   Identifier ident;\n \n public:\n-  StructPatternFieldIdent (Identifier ident, bool is_ref, bool is_mut,\n+  StructPatternFieldIdent (Identifier ident, bool is_ref, Mutability mut,\n \t\t\t   AST::AttrVec outer_attrs, Location locus)\n     : StructPatternField (std::move (outer_attrs), locus), has_ref (is_ref),\n-      has_mut (is_mut), ident (std::move (ident))\n+      mut (mut), ident (std::move (ident))\n   {}\n \n   std::string as_string () const override;\n \n+  bool is_mut () const { return mut == Mutability::Mut; }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n protected:"}, {"sha": "5eb1d23182af85db5b25655c935cc775ad780baf", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_HIR_TYPE_H\n #define RUST_HIR_TYPE_H\n \n+#include \"rust-common.h\"\n #include \"rust-hir.h\"\n #include \"rust-hir-path.h\"\n \n@@ -448,29 +449,28 @@ class NeverType : public TypeNoBounds\n class RawPointerType : public TypeNoBounds\n {\n private:\n-  bool is_mutable;\n+  Mutability mut;\n   std::unique_ptr<Type> type;\n   Location locus;\n \n public:\n   // Constructor requires pointer for polymorphism reasons\n-  RawPointerType (Analysis::NodeMapping mappings, bool is_mutable,\n+  RawPointerType (Analysis::NodeMapping mappings, Mutability mut,\n \t\t  std::unique_ptr<Type> type, Location locus)\n-    : TypeNoBounds (mappings), is_mutable (is_mutable), type (std::move (type)),\n-      locus (locus)\n+    : TypeNoBounds (mappings), mut (mut), type (std::move (type)), locus (locus)\n   {}\n \n   // Copy constructor calls custom polymorphic clone function\n   RawPointerType (RawPointerType const &other)\n-    : TypeNoBounds (other.mappings), is_mutable (other.is_mutable),\n+    : TypeNoBounds (other.mappings), mut (other.mut),\n       type (other.type->clone_type ()), locus (other.locus)\n   {}\n \n   // overload assignment operator to use custom clone method\n   RawPointerType &operator= (RawPointerType const &other)\n   {\n     mappings = other.mappings;\n-    is_mutable = other.is_mutable;\n+    mut = other.mut;\n     type = other.type->clone_type ();\n     locus = other.locus;\n     return *this;\n@@ -488,9 +488,11 @@ class RawPointerType : public TypeNoBounds\n \n   std::unique_ptr<Type> &get_type () { return type; }\n \n-  bool is_mut () const { return is_mutable; }\n+  Mutability get_mut () const { return mut; }\n+\n+  bool is_mut () const { return mut == Mutability::Mut; }\n \n-  bool is_const () const { return !is_mutable; }\n+  bool is_const () const { return mut == Mutability::Imm; }\n \n   std::unique_ptr<Type> &get_base_type () { return type; }\n \n@@ -516,38 +518,37 @@ class ReferenceType : public TypeNoBounds\n   // bool has_lifetime; // TODO: handle in lifetime or something?\n   Lifetime lifetime;\n \n-  bool has_mut;\n+  Mutability mut;\n   std::unique_ptr<Type> type;\n   Location locus;\n \n public:\n   // Returns whether the reference is mutable or immutable.\n-  bool is_mut () const { return has_mut; }\n+  bool is_mut () const { return mut == Mutability::Mut; }\n \n   // Returns whether the reference has a lifetime.\n   bool has_lifetime () const { return !lifetime.is_error (); }\n \n   // Constructor\n-  ReferenceType (Analysis::NodeMapping mappings, bool is_mut,\n+  ReferenceType (Analysis::NodeMapping mappings, Mutability mut,\n \t\t std::unique_ptr<Type> type_no_bounds, Location locus,\n \t\t Lifetime lifetime)\n-    : TypeNoBounds (mappings), lifetime (std::move (lifetime)),\n-      has_mut (is_mut), type (std::move (type_no_bounds)), locus (locus)\n+    : TypeNoBounds (mappings), lifetime (std::move (lifetime)), mut (mut),\n+      type (std::move (type_no_bounds)), locus (locus)\n   {}\n \n   // Copy constructor with custom clone method\n   ReferenceType (ReferenceType const &other)\n-    : TypeNoBounds (other.mappings), lifetime (other.lifetime),\n-      has_mut (other.has_mut), type (other.type->clone_type ()),\n-      locus (other.locus)\n+    : TypeNoBounds (other.mappings), lifetime (other.lifetime), mut (other.mut),\n+      type (other.type->clone_type ()), locus (other.locus)\n   {}\n \n   // Operator overload assignment operator to custom clone the unique pointer\n   ReferenceType &operator= (ReferenceType const &other)\n   {\n     mappings = other.mappings;\n     lifetime = other.lifetime;\n-    has_mut = other.has_mut;\n+    mut = other.mut;\n     type = other.type->clone_type ();\n     locus = other.locus;\n \n@@ -566,7 +567,7 @@ class ReferenceType : public TypeNoBounds\n \n   Lifetime &get_lifetime () { return lifetime; }\n \n-  bool get_has_mut () const { return has_mut; }\n+  Mutability get_mut () const { return mut; }\n \n   std::unique_ptr<Type> &get_base_type () { return type; }\n "}, {"sha": "279e67f582a283be7004b069ae853fef2835bdf7", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -51,7 +51,7 @@ class MethodResolution\n \t// 2. try ref\n \tTyTy::ReferenceType *r1\n \t  = new TyTy::ReferenceType (r->get_ref (), TyTy::TyVar (r->get_ref ()),\n-\t\t\t\t     TyTy::TypeMutability::IMMUT);\n+\t\t\t\t     Mutability::Imm);\n \tc = Try (candidates, r1);\n \tif (c != nullptr)\n \t  {\n@@ -63,7 +63,7 @@ class MethodResolution\n \t// 3. try mut ref\n \tTyTy::ReferenceType *r2\n \t  = new TyTy::ReferenceType (r->get_ref (), TyTy::TyVar (r->get_ref ()),\n-\t\t\t\t     TyTy::TypeMutability::MUT);\n+\t\t\t\t     Mutability::Mut);\n \tc = Try (candidates, r2);\n \tif (c != nullptr)\n \t  {"}, {"sha": "b38676399ab50635dadc214d6734eafeebebbb23", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -604,7 +604,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n \t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t     TyTy::TyVar (base->get_ref ()),\n-\t\t\t\t\t     TyTy::TypeMutability::IMMUT);\n+\t\t\t\t\t     Mutability::Imm);\n \t}\n \tbreak;\n \n@@ -651,7 +651,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n \t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t     TyTy::TyVar (array->get_ref ()),\n-\t\t\t\t\t     TyTy::TypeMutability::IMMUT);\n+\t\t\t\t\t     Mutability::Imm);\n \t}\n \tbreak;\n \n@@ -1094,9 +1094,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n \t\t\t\t       TyTy::TyVar (resolved_base->get_ref ()),\n-\t\t\t\t       expr.get_is_mut ()\n-\t\t\t\t\t ? TyTy::TypeMutability::MUT\n-\t\t\t\t\t : TyTy::TypeMutability::IMMUT);\n+\t\t\t\t       expr.get_mut ());\n   }\n \n   void visit (HIR::DereferenceExpr &expr) override"}, {"sha": "1260c2e7c881e78b8140912a8860f0a090e73369", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -101,7 +101,7 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ().get ());\n \n \tHIR::IdentifierPattern *param_pattern = new HIR::IdentifierPattern (\n-\t  param.get_param_name (), Location (), false, false,\n+\t  param.get_param_name (), Location (), false, Mutability::Imm,\n \t  std::unique_ptr<HIR::Pattern> (nullptr));\n \n \tparams.push_back (\n@@ -219,7 +219,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tHIR::SelfParam &self_param = function.get_self_param ();\n \tHIR::IdentifierPattern *self_pattern = new HIR::IdentifierPattern (\n \t  \"self\", self_param.get_locus (), self_param.is_ref (),\n-\t  self_param.is_mut (), std::unique_ptr<HIR::Pattern> (nullptr));\n+\t  self_param.get_mut (), std::unique_ptr<HIR::Pattern> (nullptr));\n \n \t// might have a specified type\n \tTyTy::BaseType *self_type = nullptr;\n@@ -240,13 +240,13 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t      case HIR::SelfParam::IMM_REF:\n \t\tself_type = new TyTy::ReferenceType (\n \t\t  self_param.get_mappings ().get_hirid (),\n-\t\t  TyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::IMMUT);\n+\t\t  TyTy::TyVar (self->get_ref ()), Mutability::Imm);\n \t\tbreak;\n \n \t      case HIR::SelfParam::MUT_REF:\n \t\tself_type = new TyTy::ReferenceType (\n \t\t  self_param.get_mappings ().get_hirid (),\n-\t\t  TyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::MUT);\n+\t\t  TyTy::TyVar (self->get_ref ()), Mutability::Mut);\n \t\tbreak;\n \n \t      default:"}, {"sha": "3fdbe302b2d5037a991a17db7a2777966d1e7b34", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -129,9 +129,7 @@ class TypeCheckType : public TypeCheckBase\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n \t\t\t\t\t  TyTy::TyVar (base->get_ref ()),\n-\t\t\t\t\t  type.get_has_mut ()\n-\t\t\t\t\t    ? TyTy::TypeMutability::MUT\n-\t\t\t\t\t    : TyTy::TypeMutability::IMMUT);\n+\t\t\t\t\t  type.get_mut ());\n   }\n \n   void visit (HIR::RawPointerType &type) override\n@@ -140,9 +138,7 @@ class TypeCheckType : public TypeCheckBase\n       = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated\n       = new TyTy::PointerType (type.get_mappings ().get_hirid (),\n-\t\t\t       TyTy::TyVar (base->get_ref ()),\n-\t\t\t       type.is_mut () ? TyTy::TypeMutability::MUT\n-\t\t\t\t\t      : TyTy::TypeMutability::IMMUT);\n+\t\t\t       TyTy::TyVar (base->get_ref ()), type.get_mut ());\n   }\n \n   void visit (HIR::InferredType &type) override"}, {"sha": "1c72d816447a0c08652d02459c8ea67fb622aa51", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -526,7 +526,8 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n       HIR::IdentifierPattern *self_pattern\n \t= new HIR::IdentifierPattern (\"self\", self_param.get_locus (),\n \t\t\t\t      self_param.is_ref (),\n-\t\t\t\t      self_param.is_mut (),\n+\t\t\t\t      self_param.is_mut () ? Mutability::Mut\n+\t\t\t\t\t\t\t   : Mutability::Imm,\n \t\t\t\t      std::unique_ptr<HIR::Pattern> (nullptr));\n       // might have a specified type\n       TyTy::BaseType *self_type = nullptr;\n@@ -547,13 +548,13 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n \t    case HIR::SelfParam::IMM_REF:\n \t      self_type = new TyTy::ReferenceType (\n \t\tself_param.get_mappings ().get_hirid (),\n-\t\tTyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::IMMUT);\n+\t\tTyTy::TyVar (self->get_ref ()), Mutability::Imm);\n \t      break;\n \n \t    case HIR::SelfParam::MUT_REF:\n \t      self_type = new TyTy::ReferenceType (\n \t\tself_param.get_mappings ().get_hirid (),\n-\t\tTyTy::TyVar (self->get_ref ()), TyTy::TypeMutability::MUT);\n+\t\tTyTy::TyVar (self->get_ref ()), Mutability::Mut);\n \t      break;\n \n \t    default:"}, {"sha": "2d3c1dc4662d7ca33feae551b43537e847d2d959", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-hir-full.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-abi.h\"\n+#include \"rust-common.h\"\n \n namespace Rust {\n \n@@ -35,12 +36,6 @@ class AssociatedImplTrait;\n \n namespace TyTy {\n \n-enum TypeMutability\n-{\n-  IMMUT,\n-  MUT\n-};\n-\n // https://rustc-dev-guide.rust-lang.org/type-inference.html#inference-variables\n // https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variants\n enum TypeKind\n@@ -1558,12 +1553,12 @@ class CharType : public BaseType\n class ReferenceType : public BaseType\n {\n public:\n-  ReferenceType (HirId ref, TyVar base, TypeMutability mut,\n+  ReferenceType (HirId ref, TyVar base, Mutability mut,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::REF, refs), base (base), mut (mut)\n   {}\n \n-  ReferenceType (HirId ref, HirId ty_ref, TyVar base, TypeMutability mut,\n+  ReferenceType (HirId ref, HirId ty_ref, TyVar base, Mutability mut,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::REF, refs), base (base), mut (mut)\n   {}\n@@ -1593,24 +1588,24 @@ class ReferenceType : public BaseType\n \n   ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n-  TypeMutability mutability () const { return mut; }\n+  Mutability mutability () const { return mut; }\n \n-  bool is_mutable () const { return mut == TypeMutability::MUT; }\n+  bool is_mutable () const { return mut == Mutability::Mut; }\n \n private:\n   TyVar base;\n-  TypeMutability mut;\n+  Mutability mut;\n };\n \n class PointerType : public BaseType\n {\n public:\n-  PointerType (HirId ref, TyVar base, TypeMutability mut,\n+  PointerType (HirId ref, TyVar base, Mutability mut,\n \t       std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::POINTER, refs), base (base), mut (mut)\n   {}\n \n-  PointerType (HirId ref, HirId ty_ref, TyVar base, TypeMutability mut,\n+  PointerType (HirId ref, HirId ty_ref, TyVar base, Mutability mut,\n \t       std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::POINTER, refs), base (base), mut (mut)\n   {}\n@@ -1640,15 +1635,15 @@ class PointerType : public BaseType\n \n   PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n-  TypeMutability mutability () const { return mut; }\n+  Mutability mutability () const { return mut; }\n \n-  bool is_mutable () const { return mut == TypeMutability::MUT; }\n+  bool is_mutable () const { return mut == Mutability::Mut; }\n \n-  bool is_const () const { return mut == TypeMutability::IMMUT; }\n+  bool is_const () const { return mut == Mutability::Imm; }\n \n private:\n   TyVar base;\n-  TypeMutability mut;\n+  Mutability mut;\n };\n \n class StrType : public BaseType"}, {"sha": "6c8f454e11bdf530fc643d92e44f2ace7a5a75b5", "filename": "gcc/rust/util/rust-common.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Futil%2Frust-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0669ceb147179448b280744ab94120b56639d45/gcc%2Frust%2Futil%2Frust-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-common.h?ref=c0669ceb147179448b280744ab94120b56639d45", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Common definitions useful throughout the Rust frontend.\n+\n+#ifndef RUST_COMMON\n+#define RUST_COMMON\n+\n+namespace Rust {\n+\n+enum Mutability\n+{\n+  Imm,\n+  Mut\n+};\n+\n+} // namespace Rust\n+\n+#endif // RUST_COMMON"}]}