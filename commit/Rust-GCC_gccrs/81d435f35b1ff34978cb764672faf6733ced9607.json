{"sha": "81d435f35b1ff34978cb764672faf6733ced9607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkNDM1ZjM1YjFmZjM0OTc4Y2I3NjQ2NzJmYWY2NzMzY2VkOTYwNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-11-15T14:02:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:02:01Z"}, "message": "sem_ch10.adb: Change name Is_Package to Is_Package_Or_Generic_Package Do not give obsolescent...\n\n2005-11-14  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb: Change name Is_Package to Is_Package_Or_Generic_Package\n\tDo not give obsolescent warning on with of subprogram (since we\n\tdiagnose calls)\n\t(Analyze_With_Clause): Add test for obsolescent package\n\t(Install_Context_Clauses): If the unit is the body of a child unit, do\n\tnot install twice the private declarations of the parents, to prevent\n\tcircular lists of Use_Clauses in a parent.\n\t(Implicit_With_On_Parent): Do add duplicate with_clause on parent when\n\tcompiling body of child unit.\n\tUse new class N_Subprogram_Instantiation\n\t(Expand_With_Clause): If this is a private with_clause for a child unit,\n\tappearing in the context of a package declaration, then the implicit\n\twith_clauses generated for parent units are private as well.\n\t(License_Check): Do not generate message if with'ed unit is internal\n\nFrom-SVN: r106998", "tree": {"sha": "ecdf96df91faaa260d5665921aedaa4b1951dc2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecdf96df91faaa260d5665921aedaa4b1951dc2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d435f35b1ff34978cb764672faf6733ced9607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d435f35b1ff34978cb764672faf6733ced9607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d435f35b1ff34978cb764672faf6733ced9607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d435f35b1ff34978cb764672faf6733ced9607/comments", "author": null, "committer": null, "parents": [{"sha": "d8387153496ed7275d92f11b0bb6f09ea22e14dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8387153496ed7275d92f11b0bb6f09ea22e14dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8387153496ed7275d92f11b0bb6f09ea22e14dd"}], "stats": {"total": 118, "additions": 76, "deletions": 42}, "files": [{"sha": "838e82256e7bd14c06848d1c0979ed0b4691bf5c", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 76, "deletions": 42, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d435f35b1ff34978cb764672faf6733ced9607/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d435f35b1ff34978cb764672faf6733ced9607/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=81d435f35b1ff34978cb764672faf6733ced9607", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,7 +95,7 @@ package body Sem_Ch10 is\n    --  Verify that a stub is declared immediately within a compilation unit,\n    --  and not in an inner frame.\n \n-   procedure Expand_With_Clause (Nam : Node_Id; N : Node_Id);\n+   procedure Expand_With_Clause (Item : Node_Id; Nam : Node_Id; N : Node_Id);\n    --  When a child unit appears in a context clause, the implicit withs on\n    --  parents are made explicit, and with clauses are inserted in the context\n    --  clause before the one for the child. If a parent in the with_clause\n@@ -998,7 +998,7 @@ package body Sem_Ch10 is\n       Check_Stub_Level (N);\n       Nam := Current_Entity_In_Scope (Id);\n \n-      if No (Nam) or else not Is_Package (Nam) then\n+      if No (Nam) or else not Is_Package_Or_Generic_Package (Nam) then\n          Error_Msg_N (\"missing specification for package stub\", N);\n \n       elsif Has_Completion (Nam)\n@@ -1843,9 +1843,8 @@ package body Sem_Ch10 is\n \n          E_Name := Defining_Entity (Specification (Instance_Spec (U)));\n \n-      elsif Unit_Kind = N_Procedure_Instantiation\n-        or else Unit_Kind = N_Function_Instantiation\n-      then\n+      elsif Unit_Kind in N_Subprogram_Instantiation then\n+\n          --  Instantiation node is replaced with a package that contains\n          --  renaming declarations and instance itself. The subprogram\n          --  Instance is declared in the visible part of the wrapper package.\n@@ -1953,6 +1952,13 @@ package body Sem_Ch10 is\n       if Private_Present (N) then\n          Set_Is_Immediately_Visible (E_Name, False);\n       end if;\n+\n+      --  Check for with'ing obsolescent package. Exclude subprograms here\n+      --  since we will catch those on the call rather than the WITH.\n+\n+      if Is_Package_Or_Generic_Package (E_Name) then\n+         Check_Obsolescent (E_Name, N);\n+      end if;\n    end Analyze_With_Clause;\n \n    ------------------------------\n@@ -2480,13 +2486,14 @@ package body Sem_Ch10 is\n    -- Expand_With_Clause --\n    ------------------------\n \n-   procedure Expand_With_Clause (Nam : Node_Id; N : Node_Id) is\n+   procedure Expand_With_Clause (Item : Node_Id; Nam : Node_Id; N : Node_Id) is\n       Loc   : constant Source_Ptr := Sloc (Nam);\n       Ent   : constant Entity_Id := Entity (Nam);\n       Withn : Node_Id;\n       P     : Node_Id;\n \n       function Build_Unit_Name (Nam : Node_Id) return Node_Id;\n+      --  Comment requireed here ???\n \n       ---------------------\n       -- Build_Unit_Name --\n@@ -2523,12 +2530,20 @@ package body Sem_Ch10 is\n       Set_First_Name            (Withn, True);\n       Set_Implicit_With         (Withn, True);\n \n+      --  If the unit is a package declaration, a private_with_clause on a\n+      --  child unit implies that the implicit with on the parent is also\n+      --  private.\n+\n+      if Nkind (Unit (N)) = N_Package_Declaration then\n+         Set_Private_Present       (Withn, Private_Present (Item));\n+      end if;\n+\n       Prepend (Withn, Context_Items (N));\n       Mark_Rewrite_Insertion (Withn);\n       Install_Withed_Unit (Withn);\n \n       if Nkind (Nam) = N_Expanded_Name then\n-         Expand_With_Clause (Prefix (Nam), N);\n+         Expand_With_Clause (Item, Prefix (Nam), N);\n       end if;\n \n       New_Nodes_OK := New_Nodes_OK - 1;\n@@ -2640,6 +2655,16 @@ package body Sem_Ch10 is\n          P_Unit := Original_Node (P_Unit);\n       end if;\n \n+      --  We add the implicit with if the child unit is the current unit\n+      --  being compiled. If the current unit is a body, we do not want\n+      --  to add an implicit_with a second time to the corresponding spec.\n+\n+      if Nkind (Child_Unit) = N_Package_Declaration\n+        and then Child_Unit /= Unit (Cunit (Current_Sem_Unit))\n+      then\n+         return;\n+      end if;\n+\n       New_Nodes_OK := New_Nodes_OK + 1;\n       Withn := Make_With_Clause (Loc, Name => Build_Unit_Name);\n \n@@ -2764,7 +2789,7 @@ package body Sem_Ch10 is\n \n             if Is_Child_Spec (Decl_Node) then\n                if Nkind (Name (Item)) = N_Expanded_Name then\n-                  Expand_With_Clause (Prefix (Name (Item)), N);\n+                  Expand_With_Clause (Item, Prefix (Name (Item)), N);\n                else\n                   --  if not an expanded name, the child unit must be a\n                   --  renaming, nothing to do.\n@@ -2784,10 +2809,12 @@ package body Sem_Ch10 is\n \n             if Sloc (Library_Unit (Item)) /= No_Location then\n                License_Check : declare\n+\n+                  Withu : constant Unit_Number_Type :=\n+                            Get_Source_Unit (Library_Unit (Item));\n+\n                   Withl : constant License_Type :=\n-                            License (Source_Index\n-                                       (Get_Source_Unit\n-                                         (Library_Unit (Item))));\n+                            License (Source_Index (Withu));\n \n                   Unitl : constant License_Type :=\n                            License (Source_Index (Current_Sem_Unit));\n@@ -2802,35 +2829,44 @@ package body Sem_Ch10 is\n                   procedure License_Error is\n                   begin\n                      Error_Msg_N\n-                       (\"?license of with'ed unit & is incompatible\",\n+                       (\"?license of with'ed unit & may be inconsistent\",\n                         Name (Item));\n                   end License_Error;\n \n                --  Start of processing for License_Check\n \n                begin\n-                  case Unitl is\n-                     when Unknown =>\n-                        null;\n+                  --  Exclude license check if withed unit is an internal unit.\n+                  --  This situation arises e.g. with the GPL version of GNAT.\n \n-                     when Restricted =>\n-                        if Withl = GPL then\n-                           License_Error;\n-                        end if;\n+                  if Is_Internal_File_Name (Unit_File_Name (Withu)) then\n+                     null;\n \n-                     when GPL =>\n-                        if Withl = Restricted then\n-                           License_Error;\n-                        end if;\n+                     --  Otherwise check various cases\n+                  else\n+                     case Unitl is\n+                        when Unknown =>\n+                           null;\n \n-                     when Modified_GPL =>\n-                        if Withl = Restricted or else Withl = GPL then\n-                           License_Error;\n-                        end if;\n+                        when Restricted =>\n+                           if Withl = GPL then\n+                              License_Error;\n+                           end if;\n \n-                     when Unrestricted =>\n-                        null;\n-                  end case;\n+                        when GPL =>\n+                           if Withl = Restricted then\n+                              License_Error;\n+                           end if;\n+\n+                        when Modified_GPL =>\n+                           if Withl = Restricted or else Withl = GPL then\n+                              License_Error;\n+                           end if;\n+\n+                        when Unrestricted =>\n+                           null;\n+                     end case;\n+                  end if;\n                end License_Check;\n             end if;\n \n@@ -2901,10 +2937,12 @@ package body Sem_Ch10 is\n             begin\n                Lib_Spec := Unit (Library_Unit (N));\n                while Is_Child_Spec (Lib_Spec) loop\n-                  P := Unit (Parent_Spec (Lib_Spec));\n+                  P      := Unit (Parent_Spec (Lib_Spec));\n+                  P_Name := Defining_Entity (P);\n \n-                  if not (Private_Present (Parent (Lib_Spec))) then\n-                     P_Name := Defining_Entity (P);\n+                  if not (Private_Present (Parent (Lib_Spec)))\n+                    and then not In_Private_Part (P_Name)\n+                  then\n                      Install_Private_Declarations (P_Name);\n                      Install_Private_With_Clauses (P_Name);\n                      Set_Use (Private_Declarations (Specification (P)));\n@@ -3125,7 +3163,7 @@ package body Sem_Ch10 is\n             Item : Node_Id;\n \n          begin\n-            --  A limited with_clause can not appear in the same context_clause\n+            --  A limited with_clause cannot appear in the same context_clause\n             --  as a nonlimited with_clause which mentions the same library.\n \n             Item := First (Context_Items (Comp_Unit));\n@@ -3270,7 +3308,7 @@ package body Sem_Ch10 is\n          Error_Msg_N\n            (\"child of a generic package must be a generic unit\", Lib_Unit);\n \n-      elsif not Is_Package (P_Name) then\n+      elsif not Is_Package_Or_Generic_Package (P_Name) then\n          Error_Msg_N\n            (\"parent unit must be package or generic package\", Lib_Unit);\n          raise Unrecoverable_Error;\n@@ -4378,16 +4416,12 @@ package body Sem_Ch10 is\n                          & \"limited with_clauses\", N);\n             return;\n \n-         when N_Package_Instantiation |\n-              N_Function_Instantiation |\n-              N_Procedure_Instantiation =>\n+         when N_Generic_Instantiation =>\n             Error_Msg_N (\"generic instantiations not allowed in \"\n                          & \"limited with_clauses\", N);\n             return;\n \n-         when N_Generic_Package_Renaming_Declaration |\n-              N_Generic_Procedure_Renaming_Declaration |\n-              N_Generic_Function_Renaming_Declaration =>\n+         when N_Generic_Renaming_Declaration =>\n             Error_Msg_N (\"generic renamings not allowed in \"\n                          & \"limited with_clauses\", N);\n             return;"}]}