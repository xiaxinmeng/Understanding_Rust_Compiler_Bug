{"sha": "39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmODdjMDMzMzExN2ZhNjQ4OTRjYjFmN2RkMGU2OTMwN2E5Y2YwZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-11-19T21:18:26Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-11-19T21:18:26Z"}, "message": "module.c (gfc_use_module): Uncomment the ISO_FORTRAN_ENV code.\n\n\t* module.c (gfc_use_module): Uncomment the ISO_FORTRAN_ENV code.\n\tCheck that intrinsic and non-intrinsic modules don't conflict.\n\t(use_iso_fortran_env_module): New function.\n\t(create_int_parameter): New function.\n\t* trans-types.c (gfc_init_kinds): Choose values for\n\tgfc_numeric_storage_size and gfc_character_storage_size.\n\t(gfc_numeric_storage_size, gfc_character_storage_size): New variables.\n\t* resolve.c (resolve_symbol): Do no check intrinsic modules\n\tagainst the list of intrinsic symbols.\n\t* iso-fortran-env.def: New file.\n\t* gfortran.h (gfc_numeric_storage_size,\n\tgfc_character_storage_size): Add prototypes.\n\n\t* gfortran.dg/use_3.f90: Remove error message.\n\t* gfortran.dg/iso_fortran_env_1.f90: New test.\n\t* gfortran.dg/iso_fortran_env_2.f90: New test.\n\t* gfortran.dg/iso_fortran_env_3.f90: New test.\n\t* gfortran.dg/iso_fortran_env_4.f90: New test.\n\nFrom-SVN: r118998", "tree": {"sha": "b2734b99a31fb23609fb1cb9fad4c26a5baeb8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2734b99a31fb23609fb1cb9fad4c26a5baeb8b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eab7815089fe868b55e502c69d61d97346535af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eab7815089fe868b55e502c69d61d97346535af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eab7815089fe868b55e502c69d61d97346535af"}], "stats": {"total": 438, "additions": 409, "deletions": 29}, "files": [{"sha": "70ca870af2c6d8ae92650722842b5f2c964116d7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -1,3 +1,18 @@\n+2006-11-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* module.c (gfc_use_module): Uncomment the ISO_FORTRAN_ENV code.\n+\tCheck that intrinsic and non-intrinsic modules don't conflict.\n+\t(use_iso_fortran_env_module): New function.\n+\t(create_int_parameter): New function.\n+\t* trans-types.c (gfc_init_kinds): Choose values for\n+\tgfc_numeric_storage_size and gfc_character_storage_size.\n+\t(gfc_numeric_storage_size, gfc_character_storage_size): New variables.\n+\t* resolve.c (resolve_symbol): Do no check intrinsic modules\n+\tagainst the list of intrinsic symbols.\n+\t* iso-fortran-env.def: New file.\n+\t* gfortran.h (gfc_numeric_storage_size,\n+\tgfc_character_storage_size): Add prototypes.\n+\n 2006-11-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/24285"}, {"sha": "277cc7836a092c57e884d53c0838f09c73f03c29", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -1823,6 +1823,8 @@ extern int gfc_default_logical_kind;\n extern int gfc_default_complex_kind;\n extern int gfc_c_int_kind;\n extern int gfc_intio_kind;\n+extern int gfc_numeric_storage_size;\n+extern int gfc_character_storage_size;\n \n /* symbol.c */\n void gfc_clear_new_implicit (void);"}, {"sha": "b9e753ad16bc0d3fd360996dc904483561c29c51", "filename": "gcc/fortran/iso-fortran-env.def", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fiso-fortran-env.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fiso-fortran-env.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-fortran-env.def?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* This file contains the definition of the named integer constants provided\n+   by the Fortran 2003 ISO_FORTRAN_ENV intrinsic module.  */\n+\n+/* The arguments to NAMED_INTCST are:\n+     -- an internal name\n+     -- the symbol name in the module, as seen by Fortran code\n+     -- the value it has  */\n+\n+NAMED_INTCST (ISOFORTRANENV_CHARACTER_STORAGE_SIZE, \"character_storage_size\", \\\n+              gfc_character_storage_size)\n+NAMED_INTCST (ISOFORTRANENV_ERROR_UNIT, \"error_unit\", 0)\n+NAMED_INTCST (ISOFORTRANENV_FILE_STORAGE_SIZE, \"file_storage_size\", 8)\n+NAMED_INTCST (ISOFORTRANENV_INPUT_UNIT, \"input_unit\", 5)\n+NAMED_INTCST (ISOFORTRANENV_IOSTAT_END, \"iostat_end\", -1)\n+NAMED_INTCST (ISOFORTRANENV_IOSTAT_EOR, \"iostat_eor\", -2)\n+NAMED_INTCST (ISOFORTRANENV_NUMERIC_STORAGE_SIZE, \"numeric_storage_size\", \\\n+              gfc_numeric_storage_size)\n+NAMED_INTCST (ISOFORTRANENV_OUTPUT_UNIT, \"output_unit\", 6)"}, {"sha": "cd83ff9b270202dee4aca16d0d447ff9a0837d1f", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 164, "deletions": 25, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -498,24 +498,24 @@ gfc_match_use (void)\n   if (gfc_match (\" , \") == MATCH_YES)\n     {\n       if ((m = gfc_match (\" %n ::\", module_nature)) == MATCH_YES)\n-       {\n-         if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: module \"\n-                             \"nature in USE statement at %C\") == FAILURE)\n-           return MATCH_ERROR;\n-\n-         if (strcmp (module_nature, \"intrinsic\") == 0)\n-           specified_int = true;\n-         else\n-           {\n-             if (strcmp (module_nature, \"non_intrinsic\") == 0)\n-               specified_nonint = true;\n-             else\n-               {\n-                 gfc_error (\"Module nature in USE statement at %C shall \"\n-                            \"be either INTRINSIC or NON_INTRINSIC\");\n-                 return MATCH_ERROR;\n-               }\n-           }\n+\t{\n+\t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: module \"\n+\t\t\t      \"nature in USE statement at %C\") == FAILURE)\n+\t    return MATCH_ERROR;\n+\n+\t  if (strcmp (module_nature, \"intrinsic\") == 0)\n+\t    specified_int = true;\n+\t  else\n+\t    {\n+\t      if (strcmp (module_nature, \"non_intrinsic\") == 0)\n+\t\tspecified_nonint = true;\n+\t      else\n+\t\t{\n+\t\t  gfc_error (\"Module nature in USE statement at %C shall \"\n+\t\t\t     \"be either INTRINSIC or NON_INTRINSIC\");\n+\t\t  return MATCH_ERROR;\n+\t\t}\n+\t    }\n \t}\n       else\n \t{\n@@ -538,11 +538,11 @@ gfc_match_use (void)\n \treturn MATCH_ERROR;\n \n       if (m != MATCH_YES)\n-       {\n-         m = gfc_match (\"% \");\n-         if (m != MATCH_YES)\n-           return m;\n-       }\n+\t{\n+\t  m = gfc_match (\"% \");\n+\t  if (m != MATCH_YES)\n+\t    return m;\n+\t}\n     }\n \n   m = gfc_match_name (module_name);\n@@ -3843,6 +3843,138 @@ gfc_dump_module (const char *name, int dump_flag)\n }\n \n \n+/* Add an integer named constant from a given module.  */\n+static void\n+create_int_parameter (const char *name, int value, const char *modname)\n+{\n+  gfc_symtree * tmp_symtree;\n+  gfc_symbol * sym;\n+\n+  tmp_symtree = gfc_find_symtree (gfc_current_ns->sym_root, name);\n+  if (tmp_symtree != NULL)\n+    {\n+      if (strcmp (modname, tmp_symtree->n.sym->module) == 0)\n+\treturn;\n+      else\n+\tgfc_error (\"Symbol '%s' already declared\", name);\n+    }\n+\n+  gfc_get_sym_tree (name, gfc_current_ns, &tmp_symtree);\n+  sym = tmp_symtree->n.sym;\n+\n+  sym->module = gfc_get_string (modname);\n+  sym->attr.flavor = FL_PARAMETER;\n+  sym->ts.type = BT_INTEGER;\n+  sym->ts.kind = gfc_default_integer_kind;\n+  sym->value = gfc_int_expr (value);\n+  sym->attr.use_assoc = 1;\n+}\n+\n+/* USE the ISO_FORTRAN_ENV intrinsic module.  */\n+static void\n+use_iso_fortran_env_module (void)\n+{\n+  static char mod[] = \"iso_fortran_env\";\n+  const char *local_name;\n+  gfc_use_rename *u;\n+  gfc_symbol *mod_sym;\n+  gfc_symtree *mod_symtree;\n+  int i;\n+\n+  mstring symbol[] = {\n+#define NAMED_INTCST(a,b,c) minit(b,0),\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_INTCST\n+    minit (NULL, -1234) };\n+\n+  i = 0;\n+#define NAMED_INTCST(a,b,c) symbol[i++].tag = c;\n+#include \"iso-fortran-env.def\"\n+#undef NAMED_INTCST\n+\n+  /* Generate the symbol for the module itself.  */\n+  mod_symtree = gfc_find_symtree (gfc_current_ns->sym_root, mod);\n+  if (mod_symtree == NULL)\n+    {\n+      gfc_get_sym_tree (mod, gfc_current_ns, &mod_symtree);\n+      gcc_assert (mod_symtree);\n+      mod_sym = mod_symtree->n.sym;\n+\n+      mod_sym->attr.flavor = FL_MODULE;\n+      mod_sym->attr.intrinsic = 1;\n+      mod_sym->module = gfc_get_string (mod);\n+    }\n+  else\n+    if (!mod_symtree->n.sym->attr.intrinsic)\n+      gfc_error (\"Use of intrinsic module '%s' at %C conflicts with \"\n+\t\t \"non-intrinsic module name used previously\", mod);\n+\n+  /* Generate the symbols for the module integer named constants.  */\n+  if (only_flag)\n+    for (u = gfc_rename_list; u; u = u->next)\n+      {\n+\tfor (i = 0; symbol[i].string; i++)\n+\t  if (strcmp (symbol[i].string, u->use_name) == 0)\n+\t    break;\n+\n+\tif (symbol[i].string == NULL)\n+\t  {\n+\t    gfc_error (\"Symbol '%s' referenced at %L does not exist in \"\n+\t\t       \"intrinsic module ISO_FORTRAN_ENV\", u->use_name,\n+\t\t       &u->where);\n+\t    continue;\n+\t  }\n+\n+\tif ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n+\t    && strcmp (symbol[i].string, \"numeric_storage_size\") == 0)\n+\t  gfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named constant \"\n+\t\t\t   \"from intrinsic module ISO_FORTRAN_ENV at %L is \"\n+\t\t\t   \"incompatible with option %s\", &u->where,\n+\t\t\t   gfc_option.flag_default_integer\n+\t\t\t     ? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n+\n+\tcreate_int_parameter (u->local_name[0] ? u->local_name\n+\t\t\t\t\t       : symbol[i].string,\n+\t\t\t      symbol[i].tag, mod);\n+      }\n+  else\n+    {\n+      for (i = 0; symbol[i].string; i++)\n+\t{\n+\t  local_name = NULL;\n+\t  for (u = gfc_rename_list; u; u = u->next)\n+\t    {\n+\t      if (strcmp (symbol[i].string, u->use_name) == 0)\n+\t\t{\n+\t\t  local_name = u->local_name;\n+\t\t  u->found = 1;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\n+\t  if ((gfc_option.flag_default_integer || gfc_option.flag_default_real)\n+\t      && strcmp (symbol[i].string, \"numeric_storage_size\") == 0)\n+\t    gfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named constant \"\n+\t\t\t     \"from intrinsic module ISO_FORTRAN_ENV at %C is \"\n+\t\t\t     \"incompatible with option %s\",\n+\t\t\t     gfc_option.flag_default_integer\n+\t\t\t\t? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n+\n+\t  create_int_parameter (local_name ? local_name : symbol[i].string,\n+\t\t\t\tsymbol[i].tag, mod);\n+\t}\n+\n+      for (u = gfc_rename_list; u; u = u->next)\n+\t{\n+\t  if (u->found)\n+\t    continue;\n+\n+\t  gfc_error (\"Symbol '%s' referenced at %L not found in intrinsic \"\n+\t\t     \"module ISO_FORTRAN_ENV\", u->use_name, &u->where);\n+\t}\n+    }\n+}\n+\n /* Process a USE directive.  */\n \n void\n@@ -3851,6 +3983,7 @@ gfc_use_module (void)\n   char *filename;\n   gfc_state_data *p;\n   int c, line, start;\n+  gfc_symtree *mod_symtree;\n \n   filename = (char *) alloca(strlen(module_name) + strlen(MODULE_EXTENSION)\n \t\t\t     + 1);\n@@ -3867,15 +4000,13 @@ gfc_use_module (void)\n      specified that the module is non-intrinsic.  */\n   if (module_fp == NULL && !specified_nonint)\n     {\n-#if 0\n       if (strcmp (module_name, \"iso_fortran_env\") == 0\n          && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: \"\n                             \"ISO_FORTRAN_ENV intrinsic module at %C\") != FAILURE)\n        {\n          use_iso_fortran_env_module ();\n          return;\n        }\n-#endif\n \n       module_fp = gfc_open_intrinsic_module (filename);\n \n@@ -3888,6 +4019,14 @@ gfc_use_module (void)\n     gfc_fatal_error (\"Can't open module file '%s' for reading at %C: %s\",\n \t\t     filename, strerror (errno));\n \n+  /* Check that we haven't already USEd an intrinsic module with the\n+     same name.  */\n+\n+  mod_symtree = gfc_find_symtree (gfc_current_ns->sym_root, module_name);\n+  if (mod_symtree && mod_symtree->n.sym->attr.intrinsic)\n+    gfc_error (\"Use of non-intrinsic module '%s' at %C conflicts with \"\n+\t       \"intrinsic module name used previously\", module_name);\n+\n   iomode = IO_INPUT;\n   module_line = 1;\n   module_column = 1;"}, {"sha": "31e1d7c2426d0b2a65250e0232d631829168e05b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -6007,7 +6007,7 @@ resolve_symbol (gfc_symbol * sym)\n     }\n \n   /* Make sure that intrinsic exist */\n-  if (sym->attr.intrinsic\n+  if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic\n       && ! gfc_intrinsic_name(sym->name, 0)\n       && ! gfc_intrinsic_name(sym->name, 1))\n     gfc_error(\"Intrinsic at %L does not exist\", &sym->declared_at);"}, {"sha": "f0c41bb79922464110f12015cfe5f103c6f1962e", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -97,6 +97,10 @@ int gfc_c_int_kind;\n    kind=8, this will be set to 8, otherwise it is set to 4.  */\n int gfc_intio_kind; \n \n+/* The size of the numeric storage unit and character storage unit.  */\n+int gfc_numeric_storage_size;\n+int gfc_character_storage_size;\n+\n /* Query the target to determine which machine modes are available for\n    computation.  Choose KIND numbers for them.  */\n \n@@ -228,11 +232,22 @@ gfc_init_kinds (void)\n       if (!saw_i8)\n \tfatal_error (\"integer kind=8 not available for -fdefault-integer-8 option\");\n       gfc_default_integer_kind = 8;\n+\n+      /* Even if the user specified that the default integer kind be 8,\n+         the numerica storage size isn't 64.  In this case, a warning will\n+\t be issued when NUMERIC_STORAGE_SIZE is used.  */\n+      gfc_numeric_storage_size = 4 * 8;\n     }\n   else if (saw_i4)\n-    gfc_default_integer_kind = 4;\n+    {\n+      gfc_default_integer_kind = 4;\n+      gfc_numeric_storage_size = 4 * 8;\n+    }\n   else\n-    gfc_default_integer_kind = gfc_integer_kinds[i_index - 1].kind;\n+    {\n+      gfc_default_integer_kind = gfc_integer_kinds[i_index - 1].kind;\n+      gfc_numeric_storage_size = gfc_integer_kinds[i_index - 1].bit_size;\n+    }\n \n   /* Choose the default real kind.  Again, we choose 4 when possible.  */\n   if (gfc_option.flag_default_real)\n@@ -283,6 +298,7 @@ gfc_init_kinds (void)\n \n   /* Choose the smallest integer kind for our default character.  */\n   gfc_default_character_kind = gfc_integer_kinds[0].kind;\n+  gfc_character_storage_size = gfc_default_character_kind * 8;\n \n   /* Choose the integer kind the same size as \"void*\" for our index kind.  */\n   gfc_index_integer_kind = POINTER_SIZE / 8;"}, {"sha": "61cf82cd076030ef960db5ae9e0e20eeb872e96c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -1,3 +1,11 @@\n+2006-11-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* gfortran.dg/use_3.f90: Remove error message.\n+\t* gfortran.dg/iso_fortran_env_1.f90: New test.\n+\t* gfortran.dg/iso_fortran_env_2.f90: New test.\n+\t* gfortran.dg/iso_fortran_env_3.f90: New test.\n+\t* gfortran.dg/iso_fortran_env_4.f90: New test.\n+\n 2006-11-19  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/vect-27.c: Fix initialization."}, {"sha": "dfcf49bf96097a409886986b061c006b99c72792", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_1.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_1.f90?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+module iso_fortran_env\n+  real :: x\n+end module iso_fortran_env\n+\n+subroutine bar\n+  use , intrinsic :: iso_fortran_env\n+  implicit none\n+\n+  if (file_storage_size /= 8) call abort\n+  if (character_storage_size /= 8) call abort\n+  if (all (numeric_storage_size /= [ 8, 16, 32, 64, 128])) call abort\n+  if (input_unit /= 5) call abort\n+  if (output_unit /= 6) call abort\n+  if (error_unit /= 0) call abort\n+  if (iostat_end /= -1) call abort\n+  if (iostat_eor /= -2) call abort\n+end\n+\n+subroutine bar2\n+  use , intrinsic :: iso_fortran_env, only : file_storage_size, &\n+    character_storage_size, numeric_storage_size, input_unit, output_unit, &\n+    error_unit, iostat_end, iostat_eor\n+  implicit none\n+\n+  if (file_storage_size /= 8) call abort\n+  if (character_storage_size /= 8) call abort\n+  if (all (numeric_storage_size /= [ 8, 16, 32, 64, 128])) call abort\n+  if (input_unit /= 5) call abort\n+  if (output_unit /= 6) call abort\n+  if (error_unit /= 0) call abort\n+  if (iostat_end /= -1) call abort\n+  if (iostat_eor /= -2) call abort\n+end\n+\n+program test\n+  use , intrinsic :: iso_fortran_env, uu => output_unit\n+  implicit none\n+\n+  if (input_unit /= 5 .or. uu /= 6) call abort\n+  call bar\n+  call bar2\n+end\n+! { dg-final { cleanup-modules \"iso_fortran_env\" } }"}, {"sha": "6f8d228d924b5b4a7cf47fa64a0490ccc32cc98a", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_2.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_2.f90?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do compile }\n+module iso_fortran_env\n+  logical :: x\n+end module iso_fortran_env\n+\n+subroutine bar1\n+  use , intrinsic :: iso_fortran_env\n+  print *, character_storage_size\n+end\n+\n+subroutine bar2\n+  use, intrinsic :: iso_fortran_env\n+  print *, character_storage_size\n+end\n+\n+subroutine bar3\n+  use,intrinsic :: iso_fortran_env\n+  print *, character_storage_size\n+end\n+\n+subroutine bar4\n+  use,intrinsic::iso_fortran_env\n+  print *, character_storage_size\n+end\n+\n+subroutine bar5\n+  use ,intrinsic :: iso_fortran_env\n+  print *, character_storage_size\n+end\n+\n+subroutine foo1\n+  use :: iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine foo2\n+  use:: iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine foo3\n+  use::iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine foo4\n+  use  ::iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine gee1\n+  use , non_intrinsic :: iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine gee2\n+  use, non_intrinsic :: iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine gee3\n+  use,non_intrinsic :: iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine gee4\n+  use,non_intrinsic::iso_fortran_env\n+  print *, x\n+end\n+\n+subroutine gee5\n+  use ,non_intrinsic :: iso_fortran_env\n+  print *, x\n+end\n+\n+! { dg-final { cleanup-modules \"iso_fortran_env\" } }"}, {"sha": "a90315958a90e96ec45236fcc18f1e5cd46577c3", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_3.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_3.f90?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+subroutine foo1 (x,y)\n+  use iso_fortran_env\n+  integer, intent(out) :: x, y\n+\n+  x = numeric_storage_size\n+  y = character_storage_size\n+end\n+\n+subroutine foo2 (x,y)\n+  use iso_fortran_env, foo => numeric_storage_size\n+  integer, intent(in) :: x, y\n+\n+  if (foo /= x .or. character_storage_size /= y) call abort\n+end\n+\n+subroutine foo3 (x,y)\n+  use iso_fortran_env, only : numeric_storage_size, character_storage_size\n+  integer, intent(in) :: x, y\n+\n+  if (numeric_storage_size /= x .or. character_storage_size /= y) call abort\n+end\n+\n+program test\n+  integer :: x, y\n+  call foo1(x,y)\n+  call foo2(x,y)\n+  call foo3(x,y)\n+end"}, {"sha": "515269bd7ec102bb941c52b5330b09e72cdbcfc7", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_4.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_4.f90?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+module iso_fortran_env\n+end module iso_fortran_env\n+\n+program foo\n+ use, intrinsic :: iso_fortran_env\n+ use, non_intrinsic :: iso_fortran_env ! { dg-error \"conflicts with intrinsic module\" }\n+end program foo\n+\n+subroutine truc\n+ use, non_intrinsic :: iso_fortran_env\n+ use, intrinsic :: iso_fortran_env ! { dg-error \"conflicts with non-intrinsic module\" }\n+end subroutine truc\n+! { dg-final { cleanup-modules \"iso_fortran_env\" } }"}, {"sha": "54100d191dda79b7888951c30d32b9c07df30e02", "filename": "gcc/testsuite/gfortran.dg/use_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f87c0333117fa64894cb1f7dd0e69307a9cf0d/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_3.f90?ref=39f87c0333117fa64894cb1f7dd0e69307a9cf0d", "patch": "@@ -7,6 +7,6 @@ end module foo\n   use, intrinsic iso_fortran_env ! { dg-error \"\\\"::\\\" was expected after module nature\" }\n   use, non_intrinsic iso_fortran_env ! { dg-error \"\\\"::\\\" was expected after module nature\" }\n   use, nonintrinsic :: iso_fortran_env ! { dg-error \"shall be either INTRINSIC or NON_INTRINSIC\" }\n-  use, intrinsic :: iso_fortran_env ! { dg-error \"Can't find an intrinsic module named\" }\n+  use, intrinsic :: iso_fortran_env\n end\n ! { dg-final { cleanup-modules \"foo\" } }"}]}