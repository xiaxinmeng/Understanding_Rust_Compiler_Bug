{"sha": "9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjM2I5NWRmZWZkMzdkODYwYzVkYzAwMDRmOGE1M2Y2MjkwZmJiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-09T07:17:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-09T07:17:10Z"}, "message": "openmp: Optimize DECL_IN_CONSTANT_POOL vars in target regions\n\nDECL_IN_CONSTANT_POOL are shared and thus don't really get emitted in the\nBLOCK where they are used, so for OpenMP target regions that have initializers\ngimplified into copying from them we actually map them at runtime from host to\noffload devices.  This patch instead marks them as \"omp declare target\", so\nthat they are on the target device from the beginning and don't need to be\ncopied there.\n\n2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gimplify.c (gimplify_adjust_omp_clauses_1): Promote\n\tDECL_IN_CONSTANT_POOL variables into \"omp declare target\" to avoid\n\tcopying them around between host and target.\n\n\t* testsuite/libgomp.c/target-38.c: New test.", "tree": {"sha": "3c52ec4eaaf12982e117be6ae6dd5ed634055cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c52ec4eaaf12982e117be6ae6dd5ed634055cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5691173e6142b11c5d45bed073ff65bfe1f2d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5691173e6142b11c5d45bed073ff65bfe1f2d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5691173e6142b11c5d45bed073ff65bfe1f2d73"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "34c0811491a82b6cd9333b87a42fd94657ae4931", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "patch": "@@ -1,3 +1,9 @@\n+2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (gimplify_adjust_omp_clauses_1): Promote\n+\tDECL_IN_CONSTANT_POOL variables into \"omp declare target\" to avoid\n+\tcopying them around between host and target.\n+\n 2020-02-08  Andrew Pinski  <apinski@marvell.com>\n \n \tPR target/91927"}, {"sha": "a6205d69701013e85819a336941532a6c945f3c2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "patch": "@@ -9906,6 +9906,22 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n \t  error (\"%<_Atomic%> %qD in implicit %<map%> clause\", decl);\n \t  return 0;\n \t}\n+      if (VAR_P (decl)\n+\t  && DECL_IN_CONSTANT_POOL (decl)\n+          && !lookup_attribute (\"omp declare target\",\n+\t\t\t\tDECL_ATTRIBUTES (decl)))\n+\t{\n+\t  tree id = get_identifier (\"omp declare target\");\n+\t  DECL_ATTRIBUTES (decl)\n+\t    = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t  varpool_node *node = varpool_node::get (decl);\n+\t  if (node)\n+\t    {\n+\t      node->offloadable = 1;\n+\t      if (ENABLE_OFFLOADING)\n+\t\tg->have_offload = true;\n+\t    }\n+\t}\n     }\n   else if (flags & GOVD_SHARED)\n     {"}, {"sha": "0740df8b2a14d8a02f51162fa7bd41cdf16327e4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "patch": "@@ -1,3 +1,7 @@\n+2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/target-38.c: New test.\n+\n 2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/93515"}, {"sha": "816997205267dbdcca6f494f3374341787a76203", "filename": "libgomp/testsuite/libgomp.c/target-38.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-38.c?ref=9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "patch": "@@ -0,0 +1,28 @@\n+#define A(n) n##0, n##1, n##2, n##3, n##4, n##5, n##6, n##7, n##8, n##9\n+#define B(n) A(n##0), A(n##1), A(n##2), A(n##3), A(n##4), A(n##5), A(n##6), A(n##7), A(n##8), A(n##9)\n+\n+int\n+foo (int x)\n+{\n+  int b[] = { B(4), B(5), B(6) };\n+  return b[x];\n+}\n+\n+int v[] = { 1, 2, 3, 4, 5, 6 };\n+#pragma omp declare target to (foo, v)\n+\n+int\n+main ()\n+{\n+  int i = 5;\n+  asm (\"\" : \"+g\" (i));\n+  #pragma omp target map(tofrom:i)\n+  {\n+    int a[] = { B(1), B(2), B(3) };\n+    asm (\"\" : : \"m\" (a) : \"memory\");\n+    i = a[i] + foo (i) + v[i & 63];\n+  }\n+  if (i != 105 + 405 + 6)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}