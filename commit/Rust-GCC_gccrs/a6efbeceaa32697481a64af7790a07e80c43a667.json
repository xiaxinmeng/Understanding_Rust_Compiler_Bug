{"sha": "a6efbeceaa32697481a64af7790a07e80c43a667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlZmJlY2VhYTMyNjk3NDgxYTY0YWY3NzkwYTA3ZTgwYzQzYTY2Nw==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-09-05T18:29:56Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-09-05T18:29:56Z"}, "message": "always read header files with poorly chosen sizes\n\nFrom-SVN: r36163", "tree": {"sha": "eadd63265629d02cd0806c7616c488e6e56668ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eadd63265629d02cd0806c7616c488e6e56668ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6efbeceaa32697481a64af7790a07e80c43a667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6efbeceaa32697481a64af7790a07e80c43a667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6efbeceaa32697481a64af7790a07e80c43a667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6efbeceaa32697481a64af7790a07e80c43a667/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bb06853c3f6e4d4ff811f756245d0a4d8d0a2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb06853c3f6e4d4ff811f756245d0a4d8d0a2ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb06853c3f6e4d4ff811f756245d0a4d8d0a2ee"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "552efaa1598cc8b015329f14f59d8e7cdd4e08b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6efbeceaa32697481a64af7790a07e80c43a667/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6efbeceaa32697481a64af7790a07e80c43a667/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6efbeceaa32697481a64af7790a07e80c43a667", "patch": "@@ -1,3 +1,8 @@\n+2000-09-05  Bruce Korb  <bkorb@gnu.org>\n+\n+        * gcc/fixinc/fixincl.c(load_file): always read header files\n+        with sizes that are a multiple of the page size.\n+\n 2000-09-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcse.c (hash_string_1): Add prototype."}, {"sha": "ad5d23ac4324147974c20385735cabcfafc0e319", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6efbeceaa32697481a64af7790a07e80c43a667/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6efbeceaa32697481a64af7790a07e80c43a667/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=a6efbeceaa32697481a64af7790a07e80c43a667", "patch": "@@ -338,6 +338,10 @@ load_file ( fname )\n   if (stbf.st_size == 0)\n     return (char*)NULL;\n \n+  /*  Make the data map size one larger than the file size for documentation\n+      purposes.  Truth is that there will be a following NUL character if\n+      the file size is not a multiple of the page size.  If it is a multiple,\n+      then this adjustment sometimes fails anyway.  */\n   data_map_size = stbf.st_size+1;\n   data_map_fd   = open (fname, O_RDONLY);\n   ttl_data_size += data_map_size-1;\n@@ -352,8 +356,14 @@ load_file ( fname )\n \n #ifdef HAVE_MMAP_FILE\n   curr_data_mapped = BOOL_TRUE;\n-  res = (char*)mmap ((void*)NULL, data_map_size, PROT_READ, MAP_PRIVATE,\n-                     data_map_fd, 0);\n+\n+  /*  IF the file size is a multiple of the page size,\n+      THEN sometimes you will seg fault trying to access a trailing byte */\n+  if ((stbf.st_size & (PAGESIZE-1)) == 0)\n+    res = (char*)BAD_ADDR;\n+  else\n+    res = (char*)mmap ((void*)NULL, data_map_size, PROT_READ,\n+                       MAP_PRIVATE, data_map_fd, 0);\n   if (res == (char*)BAD_ADDR)\n     {\n       curr_data_mapped = BOOL_FALSE;"}]}