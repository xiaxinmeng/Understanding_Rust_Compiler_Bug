{"sha": "1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4ZDdhZWY1MWRjOWUzNjg1M2E1YjE0YjNmOGNlMjVkMGNkOTUyYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-26T02:37:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-26T02:37:19Z"}, "message": "(calls_function): Don't scan a single save_expr twice.\n\n(calls_function_1): New subroutine for the actual recursion.\n\nFrom-SVN: r4737", "tree": {"sha": "4b199812c54f6fbed15472dd20d3d71c47a2ad33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b199812c54f6fbed15472dd20d3d71c47a2ad33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a/comments", "author": null, "committer": null, "parents": [{"sha": "4d06f1a21804905f8f73a2d339c1296628599d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d06f1a21804905f8f73a2d339c1296628599d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d06f1a21804905f8f73a2d339c1296628599d07"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "052cbb27fc3d2e920a31933294384bef8c15936a", "filename": "gcc/calls.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1c8d7aef51dc9e36853a5b14b3f8ce25d0cd952a", "patch": "@@ -132,10 +132,24 @@ static void store_one_arg\tPROTO ((struct arg_data *, rtx, int, int,\n    arguments on the stack, but that is too difficult to compute, so we just\n    assume any function call might require the stack.  */\n \n+static tree calls_function_save_exprs;\n+\n static int\n calls_function (exp, which)\n      tree exp;\n      int which;\n+{\n+  int val;\n+  calls_function_save_exprs = 0;\n+  val = calls_function_1 (exp, which);\n+  calls_function_save_exprs = 0;\n+  return val;\n+}\n+\n+static int\n+calls_function_1 (exp, which)\n+     tree exp;\n+     int which;\n {\n   register int i;\n   int type = TREE_CODE_CLASS (TREE_CODE (exp));\n@@ -167,15 +181,20 @@ calls_function (exp, which)\n     case SAVE_EXPR:\n       if (SAVE_EXPR_RTL (exp) != 0)\n \treturn 0;\n-      break;\n+      if (value_member (exp, calls_function_save_exprs))\n+\treturn 0;\n+      calls_function_save_exprs = tree_cons (NULL_TREE, exp,\n+\t\t\t\t\t     calls_function_save_exprs);\n+      return (TREE_OPERAND (exp, 0) != 0\n+\t      && calls_function_1 (TREE_OPERAND (exp, 0), which));\n \n     case BLOCK:\n       {\n \tregister tree local;\n \n \tfor (local = BLOCK_VARS (exp); local; local = TREE_CHAIN (local))\n \t  if (DECL_INITIAL (local) != 0\n-\t      && calls_function (DECL_INITIAL (local), which))\n+\t      && calls_function_1 (DECL_INITIAL (local), which))\n \t    return 1;\n       }\n       {\n@@ -184,7 +203,7 @@ calls_function (exp, which)\n \tfor (subblock = BLOCK_SUBBLOCKS (exp);\n \t     subblock;\n \t     subblock = TREE_CHAIN (subblock))\n-\t  if (calls_function (subblock, which))\n+\t  if (calls_function_1 (subblock, which))\n \t    return 1;\n       }\n       return 0;\n@@ -203,7 +222,7 @@ calls_function (exp, which)\n \n   for (i = 0; i < length; i++)\n     if (TREE_OPERAND (exp, i) != 0\n-\t&& calls_function (TREE_OPERAND (exp, i), which))\n+\t&& calls_function_1 (TREE_OPERAND (exp, i), which))\n       return 1;\n \n   return 0;"}]}