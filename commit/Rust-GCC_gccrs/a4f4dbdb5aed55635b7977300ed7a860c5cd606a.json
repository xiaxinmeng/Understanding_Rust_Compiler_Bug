{"sha": "a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmNGRiZGI1YWVkNTU2MzViNzk3NzMwMGVkN2E4NjBjNWNkNjA2YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T10:07:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T10:07:16Z"}, "message": "[multiple changes]\n\n2017-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch5.adb, freeze.adb, exp_ch4.adb, exp_ch6.adb, lib-xref.adb:\n\tMinor reformatting.\n\n2017-09-06  Justin Squirek  <squirek@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Modified Image\n\tattribute cases (Rewrite_Object_Reference_Image): Created to\n\taid the rewriting of new-style 'Image attributes.\n\t* sem_attr.adb (Analyze_Attribute): Modified Image attribute cases\n\t(Check_Object_Reference_Image): Created to handle verification of\n\t'Image with object-references as prefixes.\n\t* sem_util.ads, sem_util.adb (Is_Image_Applied_To_Object):\n\tCreate predicate to identify cases where an 'Image attribute's\n\tprefix applies to an object reference.\n\nFrom-SVN: r251767", "tree": {"sha": "2d0b490839b9a77f1f7a6e4af7c974573e86ffce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d0b490839b9a77f1f7a6e4af7c974573e86ffce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/comments", "author": null, "committer": null, "parents": [{"sha": "3e69995410d3462cca8846369620b2e438996138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e69995410d3462cca8846369620b2e438996138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e69995410d3462cca8846369620b2e438996138"}], "stats": {"total": 256, "additions": 164, "deletions": 92}, "files": [{"sha": "e5e1c7d0d68d0891a1477ab4a4c1d9e572e88ab9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -1,3 +1,20 @@\n+2017-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch5.adb, freeze.adb, exp_ch4.adb, exp_ch6.adb, lib-xref.adb:\n+\tMinor reformatting.\n+\n+2017-09-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Modified Image\n+\tattribute cases (Rewrite_Object_Reference_Image): Created to\n+\taid the rewriting of new-style 'Image attributes.\n+\t* sem_attr.adb (Analyze_Attribute): Modified Image attribute cases\n+\t(Check_Object_Reference_Image): Created to handle verification of\n+\t'Image with object-references as prefixes.\n+\t* sem_util.ads, sem_util.adb (Is_Image_Applied_To_Object):\n+\tCreate predicate to identify cases where an 'Image attribute's\n+\tprefix applies to an object reference.\n+\n 2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): Do not generate a freeze"}, {"sha": "456c1cb01f6a064a67668777a86ca9bdda9cf651", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -1594,10 +1594,33 @@ package body Exp_Attr is\n       Exprs : constant List_Id      := Expressions (N);\n       Id    : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n \n+      procedure Rewrite_Object_Reference_Image\n+        (Name    : Name_Id;\n+         Str_Typ : Entity_Id);\n+      --  Rewrite an 'Image attribute applied to an object reference for\n+      --  AI12-0012401 into an attribute applied to a type.\n+\n       procedure Rewrite_Stream_Proc_Call (Pname : Entity_Id);\n       --  Rewrites a stream attribute for Read, Write or Output with the\n       --  procedure call. Pname is the entity for the procedure to call.\n \n+      ------------------------------------\n+      -- Rewrite_Object_Reference_Image --\n+      ------------------------------------\n+\n+      procedure Rewrite_Object_Reference_Image\n+        (Name    : Name_Id;\n+         Str_Typ : Entity_Id) is\n+      begin\n+         Rewrite (N,\n+           Make_Attribute_Reference (Loc,\n+             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n+             Attribute_Name => Name,\n+             Expressions    => New_List (Relocate_Node (Pref))));\n+\n+         Analyze_And_Resolve (N, Str_Typ);\n+      end Rewrite_Object_Reference_Image;\n+\n       ------------------------------\n       -- Rewrite_Stream_Proc_Call --\n       ------------------------------\n@@ -3613,6 +3636,10 @@ package body Exp_Attr is\n       --  Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Image =>\n+         if Is_Image_Applied_To_Object (Pref, Ptyp) then\n+            Rewrite_Object_Reference_Image (Name_Image, Standard_String);\n+            return;\n+         end if;\n \n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n@@ -3630,13 +3657,7 @@ package body Exp_Attr is\n       --  X'Img is expanded to typ'Image (X), where typ is the type of X\n \n       when Attribute_Img =>\n-         Rewrite (N,\n-           Make_Attribute_Reference (Loc,\n-             Prefix         => New_Occurrence_Of (Ptyp, Loc),\n-             Attribute_Name => Name_Image,\n-             Expressions    => New_List (Relocate_Node (Pref))));\n-\n-         Analyze_And_Resolve (N, Standard_String);\n+         Rewrite_Object_Reference_Image (Name_Image, Standard_String);\n \n       -----------\n       -- Input --\n@@ -6982,6 +7003,11 @@ package body Exp_Attr is\n       --  Wide_Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Wide_Image =>\n+         if Is_Image_Applied_To_Object (Pref, Ptyp) then\n+            Rewrite_Object_Reference_Image\n+              (Name_Wide_Image, Standard_Wide_String);\n+            return;\n+         end if;\n \n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n@@ -6999,6 +7025,11 @@ package body Exp_Attr is\n       --  Wide_Wide_Image attribute is handled in separate unit Exp_Imgv\n \n       when Attribute_Wide_Wide_Image =>\n+         if Is_Image_Applied_To_Object (Pref, Ptyp) then\n+            Rewrite_Object_Reference_Image\n+              (Name_Wide_Wide_Image, Standard_Wide_Wide_String);\n+            return;\n+         end if;\n \n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly."}, {"sha": "ce8783742f56ef31f3acdf51b3e3a90ef336e9a4", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -4072,10 +4072,9 @@ package body Exp_Ch4 is\n \n             --  Link this node to the tree to analyze it\n \n-            --  If the parent node is an expression with actions we link it\n-            --  to N since otherwise Force_Evaluation cannot identify if this\n-            --  node comes from the Expression and rejects generating the\n-            --  temporary.\n+            --  If the parent node is an expression with actions we link it to\n+            --  N since otherwise Force_Evaluation cannot identify if this node\n+            --  comes from the Expression and rejects generating the temporary.\n \n             if Nkind (Parent (N)) = N_Expression_With_Actions then\n                Set_Parent (Op_Expr, N);\n@@ -10698,13 +10697,13 @@ package body Exp_Ch4 is\n \n                   declare\n                      Stored : constant Elist_Id :=\n-                       Stored_Constraint (Operand_Type);\n+                                Stored_Constraint (Operand_Type);\n \n                      Elmt : Elmt_Id;\n \n                      Disc_O : Entity_Id;\n                      --  Discriminant of the operand type. Its value in the\n-                     --  the object is captured in a selected component.\n+                     --  object is captured in a selected component.\n \n                      Disc_S : Entity_Id;\n                      --  Stored discriminant of the operand. If present, it\n@@ -10732,7 +10731,7 @@ package body Exp_Ch4 is\n                              Make_Selected_Component (Loc,\n                                Prefix        =>\n                                  Duplicate_Subexpr_Move_Checks (Operand),\n-                                  Selector_Name =>\n+                               Selector_Name =>\n                                  Make_Identifier (Loc, Chars (Disc_O))));\n                            Next_Discriminant (Disc_O);\n \n@@ -10756,10 +10755,10 @@ package body Exp_Ch4 is\n \n                      Append_To (Cons,\n                        Make_Range (Loc,\n-                         Low_Bound =>\n+                         Low_Bound  =>\n                            Unchecked_Convert_To (Etype (N_Ix),\n                              Make_Attribute_Reference (Loc,\n-                               Prefix =>\n+                               Prefix         =>\n                                  Duplicate_Subexpr_No_Checks\n                                    (Operand, Name_Req => True),\n                                Attribute_Name => Name_First,\n@@ -10769,7 +10768,7 @@ package body Exp_Ch4 is\n                          High_Bound =>\n                            Unchecked_Convert_To (Etype (N_Ix),\n                              Make_Attribute_Reference (Loc,\n-                               Prefix =>\n+                               Prefix         =>\n                                  Duplicate_Subexpr_No_Checks\n                                    (Operand, Name_Req => True),\n                                Attribute_Name => Name_Last,\n@@ -10787,7 +10786,7 @@ package body Exp_Ch4 is\n                Odef :=\n                  Make_Subtype_Indication (Loc,\n                    Subtype_Mark => Odef,\n-                   Constraint =>\n+                   Constraint   =>\n                      Make_Index_Or_Discriminant_Constraint (Loc,\n                        Constraints => Cons));\n             end if;\n@@ -10808,7 +10807,7 @@ package body Exp_Ch4 is\n               New_List (\n                 Decl,\n                 Make_Assignment_Statement (Loc,\n-                  Name => New_Occurrence_Of (Temp, Loc),\n+                  Name       => New_Occurrence_Of (Temp, Loc),\n                   Expression => Relocate_Node (N))),\n                 Suppress => All_Checks);\n "}, {"sha": "c30307415fa6e337d4932246b4f91d78265b3a77", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -1452,10 +1452,9 @@ package body Exp_Ch5 is\n             Expr : Node_Id;\n \n          begin\n-\n             --  The discriminant entity to be used in the retrieval below must\n-            --  be one in the corresponding type, given that the assignment\n-            --  may be between derived and parent types.\n+            --  be one in the corresponding type, given that the assignment may\n+            --  be between derived and parent types.\n \n             if Is_Derived_Type (Etype (Rhs)) then\n                Disc := Find_Component (R_Typ, C);\n@@ -1599,8 +1598,8 @@ package body Exp_Ch5 is\n \n             if Stored_Constraint (R_Typ) /= No_Elist then\n                declare\n-                  Discr_Val : Elmt_Id;\n                   Assign    : Node_Id;\n+                  Discr_Val : Elmt_Id;\n \n                begin\n                   Discr_Val := First_Elmt (Stored_Constraint (R_Typ));\n@@ -1609,19 +1608,20 @@ package body Exp_Ch5 is\n                      if Ekind (F) = E_Discriminant\n                        and then Is_Completely_Hidden (F)\n                        and then Present (Corresponding_Record_Component (F))\n-                       and then (not Is_Entity_Name (Node (Discr_Val))\n-                         or else Ekind (Entity (Node (Discr_Val)))\n-                           /= E_Discriminant)\n+                       and then\n+                         (not Is_Entity_Name (Node (Discr_Val))\n+                           or else Ekind (Entity (Node (Discr_Val))) /=\n+                                     E_Discriminant)\n                      then\n                         Assign :=\n                           Make_Assignment_Statement (Loc,\n-                            Name =>\n+                            Name       =>\n                               Make_Selected_Component (Loc,\n                                 Prefix        => Duplicate_Subexpr (Lhs),\n                                 Selector_Name =>\n                                   New_Occurrence_Of\n                                     (Corresponding_Record_Component (F), Loc)),\n-                            Expression => New_Copy (Node ((Discr_Val))));\n+                            Expression => New_Copy (Node (Discr_Val)));\n \n                         Set_Assignment_OK (Name (Assign));\n                         Insert_Action (N, Assign);"}, {"sha": "756eeaba4496f362d8a9ff866420662ac91dd9e4", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -3505,17 +3505,17 @@ package body Exp_Ch6 is\n                     Root_Type (Etype (Name (Ass)))\n                   then\n                      Error_Msg_NE\n-                       (\"tag-indeterminate expression \"\n-                         & \" must have designated type& (RM 5.2 (6))\",\n+                       (\"tag-indeterminate expression must have designated \"\n+                        & \"type& (RM 5.2 (6))\",\n                          Call_Node, Root_Type (Etype (Name (Ass))));\n                   else\n                      Propagate_Tag (Name (Ass), Call_Node);\n                   end if;\n \n                elsif Etype (Call_Node) /= Root_Type (Etype (Name (Ass))) then\n                   Error_Msg_NE\n-                    (\"tag-indeterminate expression must have type&\"\n-                     & \" (RM 5.2 (6))\",\n+                    (\"tag-indeterminate expression must have type & \"\n+                     & \"(RM 5.2 (6))\",\n                      Call_Node, Root_Type (Etype (Name (Ass))));\n \n                else"}, {"sha": "42c7463bed89fa758f52ffa0bb0a5a7f0d41f42f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -5270,7 +5270,7 @@ package body Freeze is\n       --  delayed in the parent, so these must also be captured now.\n \n       if Has_Delayed_Aspects (E)\n-         or else May_Inherit_Delayed_Rep_Aspects (E)\n+        or else May_Inherit_Delayed_Rep_Aspects (E)\n       then\n          Analyze_Aspects_At_Freeze_Point (E);\n       end if;\n@@ -5490,7 +5490,7 @@ package body Freeze is\n                Explode_Initialization_Compound_Statement (E);\n             end if;\n \n-            --  Do not generate a freeze node for a generic unit.\n+            --  Do not generate a freeze node for a generic unit\n \n             if Is_Generic_Unit (E) then\n                Result := No_List;"}, {"sha": "c2958ead3263755719238e861e824bdfbae5fde4", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -415,6 +415,7 @@ package body Lib.Xref is\n       function Get_Through_Renamings (E : Entity_Id) return Entity_Id is\n       begin\n          case Ekind (E) is\n+\n             --  For subprograms we just need to check once if they are have a\n             --  Renamed_Entity, because Renamed_Entity is set transitively.\n \n@@ -443,13 +444,15 @@ package body Lib.Xref is\n \n                      declare\n                         Renamed : constant Entity_Id := Renamed_Object (Obj);\n+\n                      begin\n                         if Present (Renamed) then\n                            Obj := Get_Enclosing_Object (Renamed);\n \n                            --  The renamed expression denotes a non-object,\n                            --  e.g. function call, slicing of a function call,\n                            --  pointer dereference, etc.\n+\n                            if No (Obj) then\n                               return Empty;\n                            end if;"}, {"sha": "44320b89ff095a18e294fe881553927b587146ed", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 48, "deletions": 56, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -326,18 +326,18 @@ package body Sem_Attr is\n \n       procedure Check_Fixed_Point_Type_0;\n       --  Verify that prefix of attribute N is a fixed type and that\n-      --  no attribute expressions are present\n+      --  no attribute expressions are present.\n \n       procedure Check_Floating_Point_Type;\n       --  Verify that prefix of attribute N is a float type\n \n       procedure Check_Floating_Point_Type_0;\n       --  Verify that prefix of attribute N is a float type and that\n-      --  no attribute expressions are present\n+      --  no attribute expressions are present.\n \n       procedure Check_Floating_Point_Type_1;\n       --  Verify that prefix of attribute N is a float type and that\n-      --  exactly one attribute expression is present\n+      --  exactly one attribute expression is present.\n \n       procedure Check_Floating_Point_Type_2;\n       --  Verify that prefix of attribute N is a float type and that\n@@ -363,6 +363,9 @@ package body Sem_Attr is\n       procedure Check_Object_Reference (P : Node_Id);\n       --  Check that P is an object reference\n \n+      procedure Check_Object_Reference_Image (Str_Typ : Entity_Id);\n+      --  Verify that the prefix of an image attribute....\n+\n       procedure Check_PolyORB_Attribute;\n       --  Validity checking for PolyORB/DSA attribute\n \n@@ -2160,6 +2163,33 @@ package body Sem_Attr is\n          end if;\n       end Check_Object_Reference;\n \n+      ----------------------------------\n+      -- Check_Object_Reference_Image --\n+      ----------------------------------\n+\n+      procedure Check_Object_Reference_Image (Str_Typ : Entity_Id) is\n+      begin\n+         Check_E0;\n+         Set_Etype (N, Str_Typ);\n+\n+         if not Is_Scalar_Type (P_Type)\n+           or else (Is_Entity_Name (P) and then Is_Type (Entity (P)))\n+         then\n+            Error_Attr_P\n+              (\"prefix of % attribute must be scalar object name\");\n+         end if;\n+\n+         Check_Enum_Image;\n+\n+         --  Check restriction No_Fixed_IO\n+\n+         if Restriction_Check_Required (No_Fixed_IO)\n+           and then Is_Fixed_Point_Type (P_Type)\n+         then\n+            Check_Restriction (No_Fixed_IO, P);\n+         end if;\n+      end Check_Object_Reference_Image;\n+\n       ----------------------------\n       -- Check_PolyORB_Attribute --\n       ----------------------------\n@@ -4044,43 +4074,12 @@ package body Sem_Attr is\n       when Attribute_Image =>\n          Check_SPARK_05_Restriction_On_Attribute;\n \n-         --  AI12-00124-1 : The ARG has adopted the GNAT semantics of 'Img for\n-         --  scalar types, so that the prefix can be an object and not a type,\n-         --  and there is no need for an argument. Given the vote of confidence\n-         --  from the ARG, simplest is to transform this new usage of 'Image\n-         --  into a reference to 'Img.\n-\n-         if Ada_Version > Ada_2005\n-           and then Is_Object_Reference (P)\n-           and then Is_Scalar_Type (P_Type)\n-         then\n-            if No (Expressions (N)) then\n-               Rewrite (N,\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix         => Relocate_Node (P),\n-                   Attribute_Name => Name_Img));\n-\n-            --  If the attribute reference includes expressions, the only\n-            --  possible interpretation is as an indexing of the parameterless\n-            --  version of 'Image, so rewrite it accordingly.\n-\n-            else\n-               Rewrite (N,\n-                 Make_Indexed_Component (Loc,\n-                   Prefix      =>\n-                     Make_Attribute_Reference (Loc,\n-                       Prefix         => Relocate_Node (P),\n-                       Attribute_Name => Name_Img),\n-                   Expressions => Expressions (N)));\n-            end if;\n-\n-            Analyze (N);\n+         if Is_Image_Applied_To_Object (P, P_Type) then\n+            Check_Object_Reference_Image (Standard_String);\n             return;\n-\n-         else\n-            Check_Scalar_Type;\n          end if;\n \n+         Check_Scalar_Type;\n          Set_Etype (N, Standard_String);\n \n          if Is_Real_Type (P_Type) then\n@@ -4115,25 +4114,7 @@ package body Sem_Attr is\n       ---------\n \n       when Attribute_Img =>\n-         Check_E0;\n-         Set_Etype (N, Standard_String);\n-\n-         if not Is_Scalar_Type (P_Type)\n-           or else (Is_Entity_Name (P) and then Is_Type (Entity (P)))\n-         then\n-            Error_Attr_P\n-              (\"prefix of % attribute must be scalar object name\");\n-         end if;\n-\n-         Check_Enum_Image;\n-\n-         --  Check restriction No_Fixed_IO\n-\n-         if Restriction_Check_Required (No_Fixed_IO)\n-           and then Is_Fixed_Point_Type (P_Type)\n-         then\n-            Check_Restriction (No_Fixed_IO, P);\n-         end if;\n+         Check_Object_Reference_Image (Standard_String);\n \n       -----------\n       -- Input --\n@@ -7014,6 +6995,12 @@ package body Sem_Attr is\n \n       when Attribute_Wide_Image =>\n          Check_SPARK_05_Restriction_On_Attribute;\n+\n+         if Is_Image_Applied_To_Object (P, P_Type) then\n+            Check_Object_Reference_Image (Standard_Wide_String);\n+            return;\n+         end if;\n+\n          Check_Scalar_Type;\n          Set_Etype (N, Standard_Wide_String);\n          Check_E1;\n@@ -7033,6 +7020,11 @@ package body Sem_Attr is\n       ---------------------\n \n       when Attribute_Wide_Wide_Image =>\n+         if Is_Image_Applied_To_Object (P, P_Type) then\n+            Check_Object_Reference_Image (Standard_Wide_Wide_String);\n+            return;\n+         end if;\n+\n          Check_Scalar_Type;\n          Set_Etype (N, Standard_Wide_Wide_String);\n          Check_E1;"}, {"sha": "4e03381463c3e1161aed069449b94b78ff2e75fd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -13773,6 +13773,20 @@ package body Sem_Util is\n                              N_Generic_Subprogram_Declaration);\n    end Is_Generic_Declaration_Or_Body;\n \n+   --------------------------------\n+   -- Is_Image_Applied_To_Object --\n+   --------------------------------\n+\n+   function Is_Image_Applied_To_Object\n+     (Prefix : Node_Id;\n+      P_Typ  : Entity_Id) return Boolean\n+   is\n+   begin\n+      return Ada_Version > Ada_2005\n+        and then Is_Object_Reference (Prefix)\n+        and then Is_Scalar_Type (P_Typ);\n+   end Is_Image_Applied_To_Object;\n+\n    ----------------------------\n    -- Is_Inherited_Operation --\n    ----------------------------\n@@ -17045,12 +17059,16 @@ package body Sem_Util is\n       Formal : Entity_Id;\n \n    begin\n-      --  Ada 2005 or later, and formals present\n+      --  Ada 2005 or later, and formals present. The first formal must\n+      --  be of  type that supports prefix notation: a controlling argument,\n+      --  a class-wide type, or an access to such.\n \n       if Ada_Version >= Ada_2005\n         and then Present (First_Formal (E))\n         and then No (Default_Value (First_Formal (E)))\n-        and then Is_Controlling_Formal (First_Formal (E))\n+        and then (Is_Controlling_Formal (First_Formal (E))\n+          or else Is_Class_Wide_Type (Etype (First_Formal (E)))\n+          or else Is_Anonymous_Access_Type (Etype (First_Formal (E))))\n       then\n          Formal := Next_Formal (First_Formal (E));\n          while Present (Formal) loop"}, {"sha": "1656c402437500f40104413b6bcf69076152514f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f4dbdb5aed55635b7977300ed7a860c5cd606a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a4f4dbdb5aed55635b7977300ed7a860c5cd606a", "patch": "@@ -1598,6 +1598,18 @@ package Sem_Util is\n    --  Determine whether arbitrary declaration Decl denotes a generic package,\n    --  a generic subprogram or a generic body.\n \n+   function Is_Image_Applied_To_Object\n+     (Prefix : Node_Id;\n+      P_Typ  : Entity_Id) return Boolean;\n+   --  Returns true if an 'Image, 'Wide_Image, or 'Wide_Wide_Image attribute\n+   --  can be applied to a given object-reference prefix (see AI12-00124-1).\n+\n+   --  AI12-00124-1 : The ARG has adopted the GNAT semantics of 'Img for\n+   --  scalar types, so that the prefix can be an object and not a type,\n+   --  and there is no need for an argument. Given the vote of confidence\n+   --  from the ARG, simplest is to transform this new usage of 'Image\n+   --  into a reference to 'Img.\n+\n    function Is_Inherited_Operation (E : Entity_Id) return Boolean;\n    --  E is a subprogram. Return True is E is an implicit operation inherited\n    --  by a derived type declaration."}]}