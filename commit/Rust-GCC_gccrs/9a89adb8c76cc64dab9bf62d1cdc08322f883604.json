{"sha": "9a89adb8c76cc64dab9bf62d1cdc08322f883604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4OWFkYjhjNzZjYzY0ZGFiOWJmNjJkMWNkYzA4MzIyZjg4MzYwNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-14T20:28:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-14T20:28:11Z"}, "message": "ia64.md (movdi): Delay calling ia64_expand_load_address.\n\n        * config/ia64/ia64.md (movdi): Delay calling ia64_expand_load_address.\n        (movdi_symbolic): New.\n\nFrom-SVN: r35685", "tree": {"sha": "ad82a4c0f4c17b838f1008f28729361acbb7aa4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad82a4c0f4c17b838f1008f28729361acbb7aa4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a89adb8c76cc64dab9bf62d1cdc08322f883604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a89adb8c76cc64dab9bf62d1cdc08322f883604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a89adb8c76cc64dab9bf62d1cdc08322f883604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a89adb8c76cc64dab9bf62d1cdc08322f883604/comments", "author": null, "committer": null, "parents": [{"sha": "00e149c78fc099a8f3485f4ea81995e2c7e65733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e149c78fc099a8f3485f4ea81995e2c7e65733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e149c78fc099a8f3485f4ea81995e2c7e65733"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "484a47e6de6c5a2112a280197c33a4c0710f8cdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a89adb8c76cc64dab9bf62d1cdc08322f883604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a89adb8c76cc64dab9bf62d1cdc08322f883604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a89adb8c76cc64dab9bf62d1cdc08322f883604", "patch": "@@ -1,3 +1,8 @@\n+2000-08-14  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.md (movdi): Delay calling ia64_expand_load_address.\n+\t(movdi_symbolic): New.\n+\n 2000-08-14  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/ia64/ia64.h (ASM_SPEC): Pass -mconstant-gp and -mauto-pic"}, {"sha": "4a68623c13c1106a7d2751b7394f6ae99f8c3bf9", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a89adb8c76cc64dab9bf62d1cdc08322f883604/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a89adb8c76cc64dab9bf62d1cdc08322f883604/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=9a89adb8c76cc64dab9bf62d1cdc08322f883604", "patch": "@@ -351,14 +351,21 @@\n   \"\"\n   \"\n {\n+  if (! reload_in_progress && ! reload_completed\n+      && ! ia64_move_ok (operands[0], operands[1]))\n+    operands[1] = force_reg (DImode, operands[1]);\n   if (! TARGET_NO_PIC && symbolic_operand (operands[1], DImode))\n     {\n-      ia64_expand_load_address (operands[0], operands[1]);\n+      /* Before optimization starts, delay committing to any particular\n+\t type of PIC address load.  If this function gets deferred, we\n+\t may acquire information that changes the value of the\n+\t sdata_symbolic_operand predicate.  */\n+      if (rtx_equal_function_value_matters)\n+\temit_insn (gen_movdi_symbolic (operands[0], operands[1]));\n+      else\n+        ia64_expand_load_address (operands[0], operands[1]);\n       DONE;\n     }\n-  if (! reload_in_progress && ! reload_completed\n-      && ! ia64_move_ok (operands[0], operands[1]))\n-    operands[1] = force_reg (DImode, operands[1]);\n }\")\n \n ;; Errata 72 workaround.\n@@ -407,6 +414,22 @@\n   [(set_attr \"type\" \"A,A,L,M,M,F,I,I,M,M\")\n    (set_attr \"predicable\" \"no\")])\n \n+;; This is used during early compilation to delay the decision on\n+;; how to refer to a variable as long as possible.  This is especially\n+;; important between initial rtl generation and optimization for\n+;; deferred functions, since we may acquire additional information\n+;; on the variables used in the meantime.\n+\n+(define_insn_and_split \"movdi_symbolic\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operand:DI 1 \"symbolic_operand\" \"s\"))\n+   (use (reg:DI 1))]\n+  \"\"\n+  \"* abort ();\"\n+  \"\"\n+  [(const_int 0)]\n+  \"ia64_expand_load_address (operands[0], operands[1]); DONE;\")\n+\n (define_insn \"*movdi_internal_astep\"\n   [(set (match_operand:DI 0 \"destination_operand\"\n \t\t    \"=r,r,r,r, m, r,*f,*f,*f, Q,   r,*b*e, r,*d, r,*c\")"}]}