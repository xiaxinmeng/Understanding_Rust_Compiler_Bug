{"sha": "121ebe3f8338aeef47846cef83e4108c5e3aa0e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxZWJlM2Y4MzM4YWVlZjQ3ODQ2Y2VmODNlNDEwOGM1ZTNhYTBlNg==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-28T18:09:43Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "Compile LazyBooleans and ComparisonExpr to gimple", "tree": {"sha": "95fcac598e12c16f13dc489f531a7c4cb62a2c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fcac598e12c16f13dc489f531a7c4cb62a2c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/121ebe3f8338aeef47846cef83e4108c5e3aa0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121ebe3f8338aeef47846cef83e4108c5e3aa0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121ebe3f8338aeef47846cef83e4108c5e3aa0e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121ebe3f8338aeef47846cef83e4108c5e3aa0e6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab24b0549e3c0b358875d86c7528f301ddcc0e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab24b0549e3c0b358875d86c7528f301ddcc0e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab24b0549e3c0b358875d86c7528f301ddcc0e49"}], "stats": {"total": 96, "additions": 88, "deletions": 8}, "files": [{"sha": "ee4368f5d7ed96e38d89cf32d8b9ae03b557c38d", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ebe3f8338aeef47846cef83e4108c5e3aa0e6/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ebe3f8338aeef47846cef83e4108c5e3aa0e6/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=121ebe3f8338aeef47846cef83e4108c5e3aa0e6", "patch": "@@ -662,7 +662,6 @@ class ComparisonExpr : public OperatorExpr\n     LESS_OR_EQUAL     // std::cmp::PartialEq::le\n   };\n \n-private:\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -714,6 +713,8 @@ class ComparisonExpr : public OperatorExpr\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  Expr *get_lhs () { return main_or_left_expr.get (); }\n+\n   // TODO: implement via a function call to std::cmp::PartialEq::eq(&op1, &op2)\n   // maybe?\n protected:\n@@ -746,7 +747,6 @@ class LazyBooleanExpr : public OperatorExpr\n     LOGICAL_AND\n   };\n \n-private:\n   ExprType expr_type;\n \n   // Expr* right_expr;\n@@ -796,6 +796,8 @@ class LazyBooleanExpr : public OperatorExpr\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  Expr *get_lhs () { return main_or_left_expr.get (); }\n+\n protected:\n   // Use covariance to implement clone function as returning this object rather\n   // than base"}, {"sha": "13d6b8046b2603d270f44fdcd20e85b6d768ead4", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ebe3f8338aeef47846cef83e4108c5e3aa0e6/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ebe3f8338aeef47846cef83e4108c5e3aa0e6/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=121ebe3f8338aeef47846cef83e4108c5e3aa0e6", "patch": "@@ -357,10 +357,92 @@ Compilation::visit (AST::ArithmeticOrLogicalExpr &expr)\n \n void\n Compilation::visit (AST::ComparisonExpr &expr)\n-{}\n+{\n+  Bexpression *lhs = NULL;\n+  VISIT_POP (expr.get_lhs ()->get_locus_slow (), expr.get_lhs (), lhs, exprs);\n+  if (lhs == NULL)\n+    {\n+      rust_error_at (expr.get_lhs ()->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  Bexpression *rhs = NULL;\n+  VISIT_POP (expr.right_expr->get_locus_slow (), expr.right_expr, rhs, exprs);\n+  if (rhs == NULL)\n+    {\n+      rust_error_at (expr.right_expr->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  Operator op;\n+  switch (expr.expr_type)\n+    {\n+    case AST::ComparisonExpr::EQUAL:\n+      op = OPERATOR_EQEQ;\n+      break;\n+    case AST::ComparisonExpr::NOT_EQUAL:\n+      op = OPERATOR_NOTEQ;\n+      break;\n+    case AST::ComparisonExpr::GREATER_THAN:\n+      op = OPERATOR_GT;\n+      break;\n+    case AST::ComparisonExpr::LESS_THAN:\n+      op = OPERATOR_LT;\n+      break;\n+    case AST::ComparisonExpr::GREATER_OR_EQUAL:\n+      op = OPERATOR_GE;\n+      break;\n+    case AST::ComparisonExpr::LESS_OR_EQUAL:\n+      op = OPERATOR_LE;\n+      break;\n+    default:\n+      rust_fatal_error (expr.get_locus_slow (), \"failed to compile operator\");\n+      return;\n+    }\n+\n+  auto compExpr\n+    = backend->binary_expression (op, lhs, rhs, expr.get_locus_slow ());\n+  exprs.push_back (compExpr);\n+}\n+\n void\n Compilation::visit (AST::LazyBooleanExpr &expr)\n-{}\n+{\n+  Bexpression *lhs = NULL;\n+  VISIT_POP (expr.get_lhs ()->get_locus_slow (), expr.get_lhs (), lhs, exprs);\n+  if (lhs == NULL)\n+    {\n+      rust_error_at (expr.get_lhs ()->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  Bexpression *rhs = NULL;\n+  VISIT_POP (expr.right_expr->get_locus_slow (), expr.right_expr, rhs, exprs);\n+  if (rhs == NULL)\n+    {\n+      rust_error_at (expr.right_expr->get_locus_slow (), \"failed to compile\");\n+      return;\n+    }\n+\n+  Operator op;\n+  switch (expr.expr_type)\n+    {\n+    case AST::LazyBooleanExpr::LOGICAL_OR:\n+      op = OPERATOR_OROR;\n+      break;\n+    case AST::LazyBooleanExpr::LOGICAL_AND:\n+      op = OPERATOR_ANDAND;\n+      break;\n+    default:\n+      rust_fatal_error (expr.get_locus_slow (), \"failed to compile operator\");\n+      return;\n+    }\n+\n+  auto compExpr\n+    = backend->binary_expression (op, lhs, rhs, expr.get_locus_slow ());\n+  exprs.push_back (compExpr);\n+}\n+\n void\n Compilation::visit (AST::TypeCastExpr &expr)\n {}\n@@ -463,14 +545,12 @@ void\n Compilation::visit (AST::CallExpr &expr)\n {\n   Bexpression *fn = NULL;\n-  translatedType = NULL;\n   VISIT_POP (expr.function->get_locus_slow (), expr.function, fn, exprs);\n   if (fn == NULL)\n     {\n       rust_error_at (expr.function->get_locus_slow (), \"failed to resolve\");\n       return;\n     }\n-  Btype *returnType = translatedType; // can be NULL\n \n   std::vector<Bexpression *> args;\n   for (auto &param : expr.params)\n@@ -535,8 +615,6 @@ Compilation::visit (AST::RangeToInclExpr &expr)\n void\n Compilation::visit (AST::ReturnExpr &expr)\n {\n-  printf (\"ReturnExpr: %s\\n\", expr.as_string ().c_str ());\n-\n   Bexpression *ret = NULL;\n   VISIT_POP (expr.return_expr->get_locus_slow (), expr.return_expr, ret, exprs);\n   if (ret == NULL)"}]}