{"sha": "44965badd05492fe569dc2fbbee784364592ec11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ5NjViYWRkMDU0OTJmZTU2OWRjMmZiYmVlNzg0MzY0NTkyZWMxMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-11-30T19:43:54Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-11-30T19:43:54Z"}, "message": "(seqdi_special_trunc, snedi_special_trunc,\n\nseqsi_special_extend, snesi_special_extend): Delete uses of SUBREG.\nMake compare modes match modes of operands.\n(snesi_zero_extend, snedi_zero_trunc_sp32, snedi_zero_trunc_sp64,\nseqsi_zero_extend, seqdi_zero_trunc_sp32, seqdi_zero_trunc_sp64):\nNew patterns.\n\nFrom-SVN: r10646", "tree": {"sha": "7f2896c0fef603b78da8b9949467305e65267308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f2896c0fef603b78da8b9949467305e65267308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44965badd05492fe569dc2fbbee784364592ec11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44965badd05492fe569dc2fbbee784364592ec11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44965badd05492fe569dc2fbbee784364592ec11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44965badd05492fe569dc2fbbee784364592ec11/comments", "author": null, "committer": null, "parents": [{"sha": "482cfaf8a5ee0dbd79b7a671663e01532f385041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482cfaf8a5ee0dbd79b7a671663e01532f385041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/482cfaf8a5ee0dbd79b7a671663e01532f385041"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "a51b1912a24cb108ece3303b9222335b05d72238", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 74, "deletions": 14, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44965badd05492fe569dc2fbbee784364592ec11/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44965badd05492fe569dc2fbbee784364592ec11/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=44965badd05492fe569dc2fbbee784364592ec11", "patch": "@@ -370,8 +370,8 @@\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (eq:SI (subreg:SI (match_dup 3) 0) (const_int 0)))\n-\t      (clobber (reg:CC 0))])]\n+\t\t   (eq:DI (match_dup 3) (const_int 0)))\n+\t      (clobber (reg:CCX 0))])]\n   \"\"\n   \"{ operands[3] = gen_reg_rtx (DImode); }\")\n \n@@ -380,30 +380,30 @@\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (ne:SI (subreg:SI (match_dup 3) 0) (const_int 0)))\n-\t      (clobber (reg:CC 0))])]\n+\t\t   (ne:DI (match_dup 3) (const_int 0)))\n+\t      (clobber (reg:CCX 0))])]\n   \"\"\n   \"{ operands[3] = gen_reg_rtx (DImode); }\")\n \n (define_expand \"seqsi_special_extend\"\n-  [(set (subreg:SI (match_dup 3) 0)\n+  [(set (match_dup 3)\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t(match_operand:SI 2 \"register_operand\" \"\")))\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (eq:DI (match_dup 3) (const_int 0)))\n-\t      (clobber (reg:CCX 0))])]\n-  \"\"\n-  \"{ operands[3] = gen_reg_rtx (DImode); }\")\n+\t\t   (eq:SI (match_dup 3) (const_int 0)))\n+\t      (clobber (reg:CC 0))])]\n+  \"TARGET_V9\"\n+  \"{ operands[3] = gen_reg_rtx (SImode); }\")\n \n (define_expand \"snesi_special_extend\"\n-  [(set (subreg:SI (match_dup 3) 0)\n+  [(set (match_dup 3)\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t(match_operand:SI 2 \"register_operand\" \"\")))\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ne:DI (match_dup 3) (const_int 0)))\n-\t      (clobber (reg:CCX 0))])]\n-  \"\"\n-  \"{ operands[3] = gen_reg_rtx (DImode); }\")\n+\t\t   (ne:SI (match_dup 3) (const_int 0)))\n+\t      (clobber (reg:CC 0))])]\n+  \"TARGET_V9\"\n+  \"{ operands[3] = gen_reg_rtx (SImode); }\")\n \n ;; ??? v9: Operand 0 needs a mode, so SImode was chosen.\n ;; However, the code handles both SImode and DImode.\n@@ -824,6 +824,16 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n+(define_insn \"*snesi_zero_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CC 0))]\n+  \"TARGET_V9\"\n+  \"subcc %%g0,%1,%%g0\\;addx %%g0,0,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -844,6 +854,26 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n+(define_insn \"*snedi_zero_trunc_sp32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CCX 0))]\n+  \"! TARGET_V9\"\n+  \"xor %1,%R1,%0\\;subcc %%g0,%0,%%g0\\;addx %%g0,0,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_insn \"*snedi_zero_trunc_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CCX 0))]\n+  \"TARGET_V9\"\n+  \"mov 0,%0\\;movrnz %1,1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -864,6 +894,16 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n+(define_insn \"*seqsi_zero_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CC 0))]\n+  \"TARGET_V9\"\n+  \"subcc %%g0,%1,%%g0\\;subx %%g0,-1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*seqdi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -884,6 +924,26 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")]) \n \n+(define_insn \"*seqdi_zero_trunc_sp32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CCX 0))]\n+  \"! TARGET_V9\"\n+  \"xor %1,%R1,%0\\;subcc %%g0,%0,%%g0\\;subx %%g0,-1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_insn \"*seqdi_zero_trunc_sp64\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (const_int 0)))\n+   (clobber (reg:CCX 0))]\n+  \"TARGET_V9\"\n+  \"mov 0,%0\\;movrz %1,1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; We can also do (x + (i == 0)) and related, so put them in.\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n ;; versions for v9."}]}