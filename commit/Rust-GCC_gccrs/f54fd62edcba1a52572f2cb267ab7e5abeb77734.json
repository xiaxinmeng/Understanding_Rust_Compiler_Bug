{"sha": "f54fd62edcba1a52572f2cb267ab7e5abeb77734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0ZmQ2MmVkY2JhMWE1MjU3MmYyY2IyNjdhYjdlNWFiZWI3NzczNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-04-06T16:24:02Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-04-06T16:24:02Z"}, "message": "(incscc): Use a match_operand with cc_register to match the condition code register.\n\n(incscc): Use a match_operand with cc_register to match\nthe condition code register.\n(decscc, *condbranch, *condbranch_reversed, *mov_scc): Likewise.\n(*mov_negscc, *mov_notscc, *cond_return): Likewise.\n(*cond_return_inverted, *ior_scc, *cond_move): Likewise.\n(insv): New expand.\n(andsi_notsi_si): Renamed from *andsi_notsi_si.\n(andsi_not_shiftsi_si): New insn.\n(*minmax_arithsi): Don't match this insn if operand1 is an\neliminable register.\n({sin,cos}*): Delete, since the ARM always emulates these its\nfaster to call a library function.\n(movsicc, *movsicc_insn): Make operand0 an s_register_operand,\nand operand3 an arm_not_operand.  Use cc_register to match the\ncondition code register.\n(mov[sd]fcc*): Make operand[0,2] s_register_operands, and operand3\nthe nonmemory_operand.  Use cc_register to match the condition\ncode register.\n(*ifcompare_plus_move): Move before *ifcompare_arith_move.  Just do\na split for the output.\n(*ifcompare_move_plus): Similarly, but relative\nto *ifcompare_move_arith.\n(*if_plus_move, *if_move_plus): New patterns.\n(*ifcompare_arith_arith): Simplify the alternatives down to just one,\nand split the insn before output.\n(*if_arith_arith, *if_arith_move, *if_move_arith): New patterns.\n(*ifcompare_move_not, *ifcompare_not_move): Simplify and split the\ninsn before output.\n(*if_move_not, *if_not_move): New patterns.\n(*ifcompare_shift_move, *ifcompare_move_shift): Simplify and split the\ninsn before output.\n(*if_shift_move, *if_move_shift): New patterns.\n(*ifcompare_shift_shift): Simplify and split the insn before output.\n(*if_shift_shift): New pattern.\n(*ifcompare_not_arith, *ifcompare_arith_not): Simplify and split the\ninsn before output.\n(*if_not_arith, *if_arith_not): New patterns.\n(*ifcompare_neg_move, *ifcompare_move_neg): Simplify and split the\ninsn before output.\n(*if_neg_move, *if_move_neg): New patterns..\n\nFrom-SVN: r13840", "tree": {"sha": "a3dd9e32cb62dd6dec7ca807c42587ab83cd8c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3dd9e32cb62dd6dec7ca807c42587ab83cd8c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f54fd62edcba1a52572f2cb267ab7e5abeb77734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54fd62edcba1a52572f2cb267ab7e5abeb77734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54fd62edcba1a52572f2cb267ab7e5abeb77734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54fd62edcba1a52572f2cb267ab7e5abeb77734/comments", "author": null, "committer": null, "parents": [{"sha": "1b30b9cf1dbd954e15bce114165b72987e419160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b30b9cf1dbd954e15bce114165b72987e419160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b30b9cf1dbd954e15bce114165b72987e419160"}], "stats": {"total": 872, "additions": 575, "deletions": 297}, "files": [{"sha": "444e9adcc17303434d5e440cacf736971001152c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 575, "deletions": 297, "changes": 872, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54fd62edcba1a52572f2cb267ab7e5abeb77734/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54fd62edcba1a52572f2cb267ab7e5abeb77734/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f54fd62edcba1a52572f2cb267ab7e5abeb77734", "patch": "@@ -36,6 +36,7 @@\n ;;   registers are in parallel (use...) expressions.\n ;; 3 A symbol that has been treated properly for pic usage, that is, we\n ;;   will add the pic_register value to it before trying to dereference it.\n+;; Note: sin and cos are no-longer used.\n \f\n ;; Attributes\n \n@@ -427,7 +428,7 @@\n (define_insn \"incscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (plus:SI (match_operator:SI 2 \"comparison_operator\"\n-                    [(reg 24) (const_int 0)])\n+                    [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n                  (match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n   \"\"\n   \"@\n@@ -673,7 +674,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0,?r\")\n \t\t  (match_operator:SI 2 \"comparison_operator\"\n-                   [(reg 24) (const_int 0)])))]\n+                   [(match_operand 3 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"@\n   sub%d2\\\\t%0, %1, #1\n@@ -1151,6 +1152,112 @@\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"8\")])\n \n+(define_expand \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"s_register_operand\" \"\")\n+                         (match_operand:SI 1 \"general_operand\" \"\")\n+                         (match_operand:SI 2 \"general_operand\" \"\"))\n+        (match_operand:SI 3 \"nonmemory_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  HOST_WIDE_INT mask = (((HOST_WIDE_INT)1) << INTVAL (operands[1])) - 1;\n+\n+  if (GET_CODE (operands[3]) == CONST_INT)\n+    {\n+      /* Since we are inserting a known constant, we may be able to\n+\t reduce the number of bits that we have to clear so that\n+\t the mask becomes simple.  */\n+      rtx op1 = gen_reg_rtx (SImode);\n+      HOST_WIDE_INT mask2 = ((mask & ~INTVAL (operands[3]))\n+\t\t\t     << INTVAL (operands[2]));\n+\n+      emit_insn (gen_andsi3 (op1, operands[0], GEN_INT (~mask2)));\n+      emit_insn (gen_iorsi3 (operands[0], op1,\n+\t\t\t     GEN_INT (INTVAL (operands[3])\n+\t\t\t\t      << INTVAL (operands[2]))));\n+    }\n+  else if (INTVAL (operands[2]) == 0\n+\t   && ! (const_ok_for_arm (mask)\n+\t\t || const_ok_for_arm (~mask)))\n+    {\n+      /* A Trick, since we are setting the bottom bits in the word,\n+\t we can shift operand[3] up, operand[0] down, OR them together\n+\t and rotate the result back again.  This takes 3 insns, and\n+\t the third might be mergable into another op.  */\n+\n+      rtx op0 = gen_reg_rtx (SImode);\n+      rtx op1 = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_ashlsi3 (op0, operands[3],\n+\t\t\t      GEN_INT (32 - INTVAL (operands[1]))));\n+      emit_insn (gen_iorsi3 (op1, gen_rtx (LSHIFTRT, SImode, operands[0],\n+\t\t\t\t\t   operands[1]),\n+\t\t\t     op0));\n+      emit_insn (gen_rotlsi3 (operands[0], op1, operands[1]));\n+    }\n+  else if ((INTVAL (operands[1]) + INTVAL (operands[2]) == 32)\n+\t   && ! (const_ok_for_arm (mask)\n+\t\t || const_ok_for_arm (~mask)))\n+    {\n+      /* Similar trick, but slightly less efficient.  */\n+\n+      rtx op0 = gen_reg_rtx (SImode);\n+      rtx op1 = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_ashlsi3 (op0, operands[3],\n+\t\t\t      GEN_INT (32 - INTVAL (operands[1]))));\n+      emit_insn (gen_ashlsi3 (op1, operands[0], operands[1]));\n+      emit_insn (gen_iorsi3 (operands[0], gen_rtx (LSHIFTRT, SImode, op1,\n+\t\t\t\t\t\t   operands[1]), op0));\n+    }\n+  else\n+    {\n+      rtx op0 = GEN_INT (mask);\n+      rtx op1 = gen_reg_rtx (SImode);\n+      rtx op2 = gen_reg_rtx (SImode);\n+\n+      if (! (const_ok_for_arm (mask) || const_ok_for_arm (~mask)))\n+\t{\n+\t  rtx tmp = gen_reg_rtx (SImode);\n+\n+\t  emit_insn (gen_movsi (tmp, op0));\n+\t  op0 = tmp;\n+\t}\n+\n+      emit_insn (gen_andsi3 (op1, operands[3], op0));\n+\n+      if (GET_CODE (op0) == CONST_INT\n+\t  && (const_ok_for_arm (mask << INTVAL (operands[2]))\n+\t      || const_ok_for_arm (~ (mask << INTVAL (operands[2])))))\n+\t{\n+\t  op0 = GEN_INT (~(mask << INTVAL (operands[2])));\n+\t  emit_insn (gen_andsi3 (op2, operands[0], op0));\n+\t}\n+      else\n+\t{\n+\t  if (GET_CODE (op0) == CONST_INT)\n+\t    {\n+\t      rtx tmp = gen_reg_rtx (SImode);\n+\n+\t      emit_insn (gen_movsi (tmp, op0));\n+\t      op0 = tmp;\n+\t    }\n+\n+\t  if (INTVAL (operands[2]) != 0)\n+\t    op0 = gen_rtx (ASHIFT, SImode, op0, operands[2]);\n+\t  emit_insn (gen_andsi_notsi_si (op2, operands[0], op0));\n+\t}\n+\n+      if (INTVAL (operands[2]) != 0)\n+\top1 = gen_rtx (ASHIFT, SImode, op1, operands[2]);\n+\n+      emit_insn (gen_iorsi3 (operands[0], op1, op2));\n+    }\n+\n+  DONE;\n+}\n+\")\n+\n ;; constants for op 2 will never be given to these patterns.\n (define_insn \"*anddi_notdi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -1180,13 +1287,22 @@\n   \"bic%?\\\\t%Q0, %Q1, %2\\;bic%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n   \n-(define_insn \"*andsi_notsi_si\"\n+(define_insn \"andsi_notsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n   \"bic%?\\\\t%0, %1, %2\")\n \n+(define_insn \"andsi_not_shiftsi_si\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(and:SI (not:SI (match_operator:SI 4 \"shift_operator\"\n+\t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 3 \"arm_rhs_operand\" \"rM\")]))\n+\t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+  \"\"\n+  \"bic%?\\\\t%0, %1, %2%S4\")\n+\n (define_insn \"*andsi_notsi_si_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV\n@@ -1434,7 +1550,7 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12\")])\n \n-(define_insn \"*store_minmansi\"\n+(define_insn \"*store_minmaxsi\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(match_operator:SI 3 \"minmax_operator\"\n \t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1453,6 +1569,8 @@\n  (set_attr \"length\" \"12\")\n  (set_attr \"type\" \"store1\")])\n \n+; Reject the frame pointer in operand[1], since reloading this after\n+; it has been eliminated can cause carnage.\n (define_insn \"*minmax_arithsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_operator:SI 4 \"shiftable_operator\"\n@@ -1461,7 +1579,9 @@\n \t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])\n \t  (match_operand:SI 1 \"s_register_operand\" \"0,?r\")]))\n    (clobber (reg:CC 24))]\n-  \"\"\n+  \"GET_CODE (operands[1]) != REG\n+   || (REGNO(operands[1]) != FRAME_POINTER_REGNUM\n+       && REGNO(operands[1]) != ARG_POINTER_REGNUM)\"\n   \"*\n {\n   enum rtx_code code = GET_CODE (operands[4]);\n@@ -1741,63 +1861,65 @@\n   \"sqt%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n-(define_insn \"sinsf2\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")] 0))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"sin%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"sindf2\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")] 0))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"sin%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"*sindf_esfdf\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 0))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"sin%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"sinxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")] 0))]\n-  \"ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"sin%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"cossf2\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")] 1))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"cos%?s\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"cosdf2\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")] 1))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"cos%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"*cosdf_esfdf\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 1))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"cos%?d\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n-\n-(define_insn \"cosxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")] 1))]\n-  \"ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"cos%?e\\\\t%0, %1\"\n-[(set_attr \"type\" \"float_em\")])\n+;; SIN COS TAN and family are always emulated, so it's probably better\n+;; to always call a library function.\n+;(define_insn \"sinsf2\"\n+;  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")] 0))]\n+;  \"TARGET_HARD_FLOAT\"\n+;  \"sin%?s\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"sindf2\"\n+;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")] 0))]\n+;  \"TARGET_HARD_FLOAT\"\n+;  \"sin%?d\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"*sindf_esfdf\"\n+;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:DF [(float_extend:DF\n+;\t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 0))]\n+;  \"TARGET_HARD_FLOAT\"\n+;  \"sin%?d\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"sinxf2\"\n+;  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")] 0))]\n+;  \"ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n+;  \"sin%?e\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"cossf2\"\n+;  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")] 1))]\n+;  \"TARGET_HARD_FLOAT\"\n+;  \"cos%?s\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"cosdf2\"\n+;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")] 1))]\n+;  \"TARGET_HARD_FLOAT\"\n+;  \"cos%?d\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"*cosdf_esfdf\"\n+;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:DF [(float_extend:DF\n+;\t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 1))]\n+;  \"TARGET_HARD_FLOAT\"\n+;  \"cos%?d\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n+;\n+;(define_insn \"cosxf2\"\n+;  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n+;\t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")] 1))]\n+;  \"ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n+;  \"cos%?e\\\\t%0, %1\"\n+;[(set_attr \"type\" \"float_em\")])\n \n (define_insn \"one_cmpldi2\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -3324,7 +3446,7 @@\n ; mode changes of the condition codes aren't lost by this even though we don't\n ; specify what they are.\n \n-(define_insn \"*delted_compare\"\n+(define_insn \"*deleted_compare\"\n   [(set (match_operand 0 \"cc_register\" \"\") (match_dup 0))]\n   \"\"\n   \"\\\\t%@ deleted compare\"\n@@ -3469,7 +3591,7 @@\n (define_insn \"*condbranch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t\t[(reg 24) (const_int 0)])\n+\t\t       [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -3489,7 +3611,7 @@\n (define_insn \"*condbranch_reversed\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t\t[(reg 24) (const_int 0)])\n+\t\t       [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n@@ -3621,7 +3743,8 @@\n \n (define_insn \"*mov_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(match_operator:SI 1 \"comparison_operator\" [(reg 24) (const_int 0)]))]\n+\t(match_operator:SI 1 \"comparison_operator\"\n+\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n   \"\"\n   \"mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\"\n [(set_attr \"conds\" \"use\")\n@@ -3630,7 +3753,7 @@\n (define_insn \"*mov_negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator:SI 1 \"comparison_operator\"\n-\t\t [(reg 24) (const_int 0)])))]\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #0\"\n [(set_attr \"conds\" \"use\")\n@@ -3639,7 +3762,7 @@\n (define_insn \"*mov_notscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operator:SI 1 \"comparison_operator\"\n-\t\t [(reg 24) (const_int 0)])))]\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #1\"\n [(set_attr \"conds\" \"use\")\n@@ -3649,10 +3772,10 @@\n ;; Conditional move insns\n \n (define_expand \"movsicc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"arm_not_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:SI 3 \"arm_not_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -3664,10 +3787,10 @@\n }\")\n \n (define_expand \"movsfcc\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n \t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:SF 2 \"nonmemory_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:SF 2 \"s_register_operand\" \"\")\n+\t\t\t (match_operand:SF 3 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -3679,10 +3802,10 @@\n }\")\n \n (define_expand \"movdfcc\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+  [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n \t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:DF 2 \"nonmemory_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"register_operand\" \"\")))]\n+\t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n+\t\t\t (match_operand:DF 3 \"nonmemory_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"\n {\n@@ -3694,48 +3817,56 @@\n }\")\n \n (define_insn \"*movsicc_insn\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n-\t\t\t  [(reg 24) (const_int 0)])\n-\t\t\t (match_operand:SI 2 \"arm_not_operand\" \"rI,K\")\n-\t\t\t (match_operand:SI 3 \"register_operand\" \"0,0\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 3 \"comparison_operator\"\n+\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,0,?rI,?rI,K,K\")\n+\t (match_operand:SI 2 \"arm_not_operand\" \"rI,K,rI,K,rI,K\")))]\n   \"\"\n   \"@\n-   mov%d1\\\\t%0, %2\n-   mvn%d1\\\\t%0, #%B2\"\n-  [(set_attr \"type\" \"*,*\")\n-   (set_attr \"conds\" \"use,use\")])\n+   mov%D3\\\\t%0, %2\n+   mvn%D3\\\\t%0, #%B2\n+   mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n+   mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n+   mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n+   mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n+  [(set_attr \"length\" \"4,4,8,8,8,8\")\n+   (set_attr \"conds\" \"use\")])\n \n (define_insn \"*movsfcc_hard_insn\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n-\t\t\t  [(reg 24) (const_int 0)])\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"f\")\n-\t\t\t (match_operand:SF 3 \"register_operand\" \"0\")))]\n+  [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f\")\n+\t(if_then_else:SF (match_operator 3 \"comparison_operator\" \n+\t\t\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n+\t\t\t (match_operand:SF 1 \"s_register_operand\" \"0,0\")\n+\t\t\t (match_operand:SF 2 \"fpu_add_operand\" \"fG,H\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"mvf%d1s\\\\t%0, %2\"\n+  \"@\n+   mvf%D3s\\\\t%0, %2\n+   mnf%D3s\\\\t%0, #%N2\"\n   [(set_attr \"type\" \"ffarith\")\n    (set_attr \"conds\" \"use\")])\n \n (define_insn \"*movsfcc_soft_insn\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n-\t(if_then_else:SF (match_operator 1 \"comparison_operator\"\n-\t\t\t  [(reg 24) (const_int 0)])\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SF 3 \"register_operand\" \"0\")))]\n+  [(set (match_operand:SF 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SF (match_operator 3 \"comparison_operator\"\n+\t\t\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n+\t\t\t (match_operand:SF 1 \"s_register_operand\" \"0\")\n+\t\t\t (match_operand:SF 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_SOFT_FLOAT\"\n-  \"mov%d1\\\\t%0, %2\"\n-  [(set_attr \"type\" \"*\")\n-   (set_attr \"conds\" \"use\")])\n+  \"mov%D3\\\\t%0, %2\"\n+  [(set_attr \"conds\" \"use\")])\n \n (define_insn \"*movdfcc_insn\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(if_then_else:DF (match_operator 1 \"comparison_operator\"\n-\t\t\t  [(reg 24) (const_int 0)])\n-\t\t\t (match_operand:DF 2 \"register_operand\" \"f\")\n-\t\t\t (match_operand:DF 3 \"register_operand\" \"0\")))]\n+  [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n+\t(if_then_else:DF (match_operator 3 \"comparison_operator\"\n+\t\t\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n+\t\t\t (match_operand:DF 1 \"s_register_operand\" \"0,0\")\n+\t\t\t (match_operand:DF 2 \"fpu_add_operand\" \"fG,H\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"mvf%d1d\\\\t%0, %2\"\n+  \"@\n+   mvf%D3d\\\\t%0, %2\n+   mnf%D3d\\\\t%0, #%N2\"\n   [(set_attr \"type\" \"ffarith\")\n    (set_attr \"conds\" \"use\")])\n \f\n@@ -3859,7 +3990,7 @@\n (define_insn \"*cond_return\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"comparison_operator\"\n-\t\t       [(reg 24) (const_int 0)])\n+\t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (return)\n                       (pc)))]\n   \"USE_RETURN_INSN\"\n@@ -3880,7 +4011,7 @@\n (define_insn \"*cond_return_inverted\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"comparison_operator\"\n-\t\t       [(reg 24) (const_int 0)])\n+\t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (pc)\n \t\t      (return)))]\n   \"USE_RETURN_INSN\"\n@@ -4102,7 +4233,7 @@\n ; we have no idea how long the add_immediate is, it could be up to 4.\n [(set_attr \"length\" \"20\")])\n \n-(define_insn \"*relaod_mulsi_compare0\"\n+(define_insn \"*reload_mulsi_compare0\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (plus:SI\n \t\t\t  (plus:SI \n@@ -4216,7 +4347,7 @@\n (define_insn \"*ior_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(ior:SI (match_operator 2 \"comparison_operator\"\n-\t\t [(reg 24) (const_int 0)])\n+\t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n   \"\"\n   \"@\n@@ -4258,7 +4389,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI (match_operator 3 \"equality_operator\"\n \t\t\t  [(match_operator 4 \"comparison_operator\"\n-\t\t\t    [(reg 24) (const_int 0)])\n+\t\t\t    [(match_operand 5 \"cc_register\" \"\") (const_int 0)])\n \t\t\t   (const_int 0)])\n \t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,rI,?rI\")\n \t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))]\n@@ -4474,25 +4605,110 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,8,12\")])\n \n-(define_insn \"*ifcompare_arith_arith\"\n+(define_insn \"*ifcompare_plus_move\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n+\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n+\t\t\t (plus:SI\n+\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rIL,rIL\"))\n+\t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rIm\")))\n+   (clobber (reg 24))]\n+  \"\"\n+  \"#\"\n+[(set_attr \"conds\" \"clob\")\n+ (set_attr \"length\" \"8,12\")])\n+\n+(define_insn \"*if_plus_move\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 5 \"cc_register\" \"\") (const_int 0)])\n+\t (plus:SI\n+\t  (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r,r,r\")\n+\t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L,rI,L,rI,L\"))\n+\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,0,?rI,?rI,m,m\")))]\n+  \"\"\n+  \"@\n+   add%d4\\\\t%0, %2, %3\n+   sub%d4\\\\t%0, %2, #%n3\n+   add%d4\\\\t%0, %2, %3\\;mov%D4\\\\t%0, %1\n+   sub%d4\\\\t%0, %2, #%n3\\;mov%D4\\\\t%0, %1\n+   add%d4\\\\t%0, %2, %3\\;ldr%D4\\\\t%0, %1\n+   sub%d4\\\\t%0, %2, #%n3\\;ldr%D4\\\\t%0, %1\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,4,8,8,8,8\")\n+ (set_attr \"type\" \"*,*,*,*,load,load\")])\n+\n+(define_insn \"*ifcompare_move_plus\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n+\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n+\t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rIm\")\n+\t\t\t (plus:SI\n+\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rIL,rIL\"))))\n+   (clobber (reg 24))]\n+  \"\"\n+  \"#\"\n+[(set_attr \"conds\" \"clob\")\n+ (set_attr \"length\" \"8,12\")])\n+\n+(define_insn \"*if_move_plus\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 5 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,0,?rI,?rI,m,m\")\n+\t (plus:SI\n+\t  (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r,r,r\")\n+\t  (match_operand:SI 3 \"arm_add_operand\" \"rI,L,rI,L,rI,L\"))))]\n+  \"\"\n+  \"@\n+   add%D4\\\\t%0, %2, %3\n+   sub%D4\\\\t%0, %2, #%n3\n+   add%D4\\\\t%0, %2, %3\\;mov%d4\\\\t%0, %1\n+   sub%D4\\\\t%0, %2, #%n3\\;mov%d4\\\\t%0, %1\n+   add%D4\\\\t%0, %2, %3\\;ldr%d4\\\\t%0, %1\n+   sub%D4\\\\t%0, %2, #%n3\\;ldr%d4\\\\t%0, %1\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,4,8,8,8,8\")\n+ (set_attr \"type\" \"*,*,*,*,load,load\")])\n+\n+(define_insn \"*ifcompare_arith_arith\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI (match_operator 9 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 6 \"arm_add_operand\" \"rI,L\")])\n+\t\t\t  [(match_operand:SI 5 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 6 \"arm_add_operand\" \"rIL\")])\n \t\t\t (match_operator:SI 8 \"shiftable_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rI,rI\")])\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])\n \t\t\t (match_operator:SI 7 \"shiftable_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI,rI\")])))\n+\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%5, %6\\;%I8%d9\\\\t%0, %1, %2\\;%I7%D9\\\\t%0, %3, %4\n-   cmn\\\\t%5, #%n6\\;%I8%d9\\\\t%0, %1, %2\\;%I7%D9\\\\t%0, %3, %4\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n+(define_insn \"*if_arith_arith\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n+\t\t\t  [(match_operand 8 \"cc_register\" \"\") (const_int 0)])\n+\t\t\t (match_operator:SI 6 \"shiftable_operator\"\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])\n+\t\t\t (match_operator:SI 7 \"shiftable_operator\"\n+\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI\")])))]\n+  \"\"\n+  \"%I6%d5\\\\t%0, %1, %2\\;%I7%D5\\\\t%0, %3, %4\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"8\")])\n+\n (define_insn \"*ifcompare_arith_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n@@ -4538,6 +4754,23 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n+(define_insn \"*if_arith_move\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI (match_operator 4 \"comparison_operator\"\n+\t\t\t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n+\t\t\t (match_operator:SI 5 \"shiftable_operator\"\n+\t\t\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r\")\n+\t\t\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI,rI\")])\n+\t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rI,m\")))]\n+  \"\"\n+  \"@\n+   %I5%d4\\\\t%0, %2, %3\n+   %I5%d4\\\\t%0, %2, %3\\;mov%D4\\\\t%0, %1\n+   %I5%d4\\\\t%0, %2, %3\\;ldr%D4\\\\t%0, %1\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")\n+ (set_attr \"type\" \"*,*,load\")])\n+\n (define_insn \"*ifcompare_move_arith\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n@@ -4584,242 +4817,301 @@\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"*ifcompare_plus_move\"\n+(define_insn \"*if_move_arith\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rI,m\")\n+\t (match_operator:SI 5 \"shiftable_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI,rI\")])))]\n+  \"\"\n+  \"@\n+   %I5%D4\\\\t%0, %2, %3\n+   %I5%D4\\\\t%0, %2, %3\\;mov%d4\\\\t%0, %1\n+   %I5%D4\\\\t%0, %2, %3\\;ldr%d4\\\\t%0, %1\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")\n+ (set_attr \"type\" \"*,*,load\")])\n+\n+(define_insn \"*ifcompare_move_not\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n-\t\t\t (plus:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rL,rL\"))\n-\t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rIm\")))\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")\n+\t (not:SI\n+\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-{\n-  if (GET_CODE (operands[5]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[5])))\n-    output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  if (GET_CODE (operands[3]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[3])))\n-    output_asm_insn (\\\"sub%d6\\\\t%0, %2, #%n3\\\", operands);\n-  else\n-    output_asm_insn (\\\"add%d6\\\\t%0, %2, %3\\\", operands);\n-  if (which_alternative != 0)\n-    {\n-      if (GET_CODE (operands[1]) == MEM)\n-\toutput_asm_insn (\\\"ldr%D6\\\\t%0, %1\\\", operands);\n-      else\n-\toutput_asm_insn (\\\"mov%D6\\\\t%0, %1\\\", operands);\n-    }\n-  return \\\"\\\";\n-}\n-\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"*ifcompare_move_plus\"\n+(define_insn \"*if_move_not\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")\n+\t (not:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))))]\n+  \"\"\n+  \"@\n+   mvn%D4\\\\t%0, %2\n+   mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\n+   mvn%d4\\\\t%0, #%B1\\;mvn%D4\\\\t%0, %2\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")])\n+\n+(define_insn \"*ifcompare_not_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 6 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n-\t\t\t (match_operand:SI 1 \"arm_rhsm_operand\" \"0,?rIm\")\n-\t\t\t (plus:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 3 \"arm_add_operand\" \"rIL,rIL\"))))\n+\t(if_then_else:SI \n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n+\t (not:SI\n+\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")))\n    (clobber (reg 24))]\n   \"\"\n-  \"*\n-{\n-  if (GET_CODE (operands[5]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[5])))\n-    output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n-  else\n-    output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  if (GET_CODE (operands[3]) == CONST_INT\n-      && !const_ok_for_arm (INTVAL (operands[3])))\n-    output_asm_insn (\\\"sub%D6\\\\t%0, %2, #%n3\\\", operands);\n-  else\n-    output_asm_insn (\\\"add%D6\\\\t%0, %2, %3\\\", operands);\n-  if (which_alternative != 0)\n-    {\n-      if (GET_CODE (operands[6]) == MEM)\n-\toutput_asm_insn (\\\"ldr%d6\\\\t%0, %1\\\", operands);\n-      else\n-\toutput_asm_insn (\\\"mov%d6\\\\t%0, %1\\\", operands);\n-    }\n-  return \\\"\\\";\n-}\n-\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"*ifcompare_move_not\"\n+(define_insn \"*if_not_move\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n+\t (not:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")))]\n+  \"\"\n+  \"@\n+   mvn%d4\\\\t%0, %2\n+   mov%D4\\\\t%0, %1\\;mvn%d4\\\\t%0, %2\n+   mvn%D4\\\\t%0, #%B1\\;mvn%d4\\\\t%0, %2\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")])\n+\n+(define_insn \"*ifcompare_shift_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 5 \"comparison_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n-\t\t\t (not:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))\n+\t(if_then_else:SI\n+\t (match_operator 6 \"comparison_operator\"\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n+\t (match_operator:SI 7 \"shift_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM\")])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")))\n    (clobber (reg 24))]\n   \"\"\n   \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"*ifcompare_not_move\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n-\t(if_then_else:SI \n+(define_insn \"*if_shift_move\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI\n \t (match_operator 5 \"comparison_operator\"\n-\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 4 \"arm_add_operand\" \"rI,L,rI,L\")])\n-\t (not:SI\n-\t  (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\"))\n-\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n-   (clobber (reg 24))]\n+\t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operator:SI 4 \"shift_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM,rM\")])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")))]\n   \"\"\n   \"@\n-   cmp\\\\t%3, %4\\;mvn%d5\\\\t%0, %2\n-   cmn\\\\t%3, #%n4\\;mvn%d5\\\\t%0, %2\n-   cmp\\\\t%3, %4\\;mov%D5\\\\t%0, %1\\;mvn%d5\\\\t%0, %2\n-   cmn\\\\t%3, #%n4\\;mov%D5\\\\t%0, %1\\;mvn%d5\\\\t%0, %2\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12,12\")])\n+   mov%d5\\\\t%0, %2%S4\n+   mov%D5\\\\t%0, %1\\;mov%d5\\\\t%0, %2%S4\n+   mvn%D5\\\\t%0, #%B1\\;mov%d5\\\\t%0, %2%S4\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")])\n \n-(define_insn \"*ifcompare_shift_move\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+(define_insn \"*ifcompare_move_shift\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n-\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL\")])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")\n \t (match_operator:SI 7 \"shift_operator\"\n-\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM,rM,rM\")])\n-\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %2%S7\n-   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %2%S7\n-   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2%S7\n-   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %1\\;mov%d6\\\\t%0, %2%S7\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12,12\")])\n+ (set_attr \"length\" \"8,12\")])\n \n-(define_insn \"ifcompare_move_shift\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+(define_insn \"*if_move_shift\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI\n-\t (match_operator 6 \"comparison_operator\"\n-\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L,rI,L\")])\n-\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")\n-\t (match_operator:SI 7 \"shift_operator\"\n-\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM,rM,rM\")])))\n-   (clobber (reg 24))]\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand 6 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")\n+\t (match_operator:SI 4 \"shift_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r,r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rM,rM,rM\")])))]\n   \"\"\n   \"@\n-   cmp\\\\t%4, %5\\;mov%D6\\\\t%0, %2%S7\n-   cmn\\\\t%4, #%n5\\;mov%D6\\\\t%0, %2%S7\n-   cmp\\\\t%4, %5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2%S7\n-   cmn\\\\t%4, #%n5\\;mov%d6\\\\t%0, %1\\;mov%D6\\\\t%0, %2%S7\"\n-[(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12,12\")])\n+   mov%D5\\\\t%0, %2%S4\n+   mov%d5\\\\t%0, %1\\;mov%D5\\\\t%0, %2%S4\n+   mvn%d5\\\\t%0, #%B1\\;mov%D5\\\\t%0, %2%S4\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")])\n \n (define_insn \"*ifcompare_shift_shift\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n \t (match_operator 7 \"comparison_operator\"\n-\t  [(match_operand:SI 5 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 6 \"arm_add_operand\" \"rI,L\")])\n+\t  [(match_operand:SI 5 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 6 \"arm_add_operand\" \"rIL\")])\n \t (match_operator:SI 8 \"shift_operator\"\n-\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM,rM\")])\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n \t (match_operator:SI 9 \"shift_operator\"\n-\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rI,rI\")])))\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rM\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%5, %6\\;mov%d7\\\\t%0, %1%S8\\;mov%D7\\\\t%0, %3%S9\n-   cmn\\\\t%5, #%n6\\;mov%d7\\\\t%0, %1%S8\\;mov%D7\\\\t%0, %3%S9\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n+(define_insn \"*if_shift_shift\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand 8 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operator:SI 6 \"shift_operator\"\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n+\t (match_operator:SI 7 \"shift_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rM\")])))]\n+  \"\"\n+  \"mov%d5\\\\t%0, %1%S6\\;mov%D5\\\\t%0, %3%S7\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"8\")])\n+\n (define_insn \"*ifcompare_not_arith\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n-\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L\")])\n-\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\"))\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL\")])\n+\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n \t (match_operator:SI 7 \"shiftable_operator\"\n-\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])))\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])))\n    (clobber (reg 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%4, %5\\;mvn%d6\\\\t%0, %1\\;%I7%D6\\\\t%0, %2, %3\n-   cmn\\\\t%4, #%n5\\;mvn%d6\\\\t%0, %1\\;%I7%D6\\\\t%0, %2, %3\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n-(define_insn \"*if_compare_arith_not\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+(define_insn \"*if_not_arith\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n+\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t (match_operator:SI 6 \"shiftable_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])))]\n+  \"\"\n+  \"mvn%d5\\\\t%0, %1\\;%I6%D5\\\\t%0, %2, %3\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"8\")])\n+\n+(define_insn \"*ifcompare_arith_not\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(if_then_else:SI\n \t (match_operator 6 \"comparison_operator\"\n-\t  [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 5 \"arm_add_operand\" \"rI,L\")])\n+\t  [(match_operand:SI 4 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 5 \"arm_add_operand\" \"rIL\")])\n \t (match_operator:SI 7 \"shiftable_operator\"\n-\t  [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])\n-\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\"))))\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])\n+\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))))\n    (clobber (reg 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%4, %5\\;mvn%D6\\\\t%0, %1\\;%I7%d6\\\\t%0, %2, %3\n-   cmn\\\\t%4, #%n5\\;mvn%D6\\\\t%0, %1\\;%I7%d6\\\\t%0, %2, %3\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n \n+(define_insn \"*if_arith_not\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operator:SI 6 \"shiftable_operator\"\n+\t  [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])\n+\t (not:SI (match_operand:SI 1 \"s_register_operand\" \"r\"))))]\n+  \"\"\n+  \"mvn%D5\\\\t%0, %1\\;%I6%d5\\\\t%0, %2, %3\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"8\")])\n+\n (define_insn \"*ifcompare_neg_move\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t (match_operator 5 \"comparison_operator\"\n-\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 4 \"arm_add_operand\" \"rI,L,rI,L\")])\n-\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\"))\n-\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")))\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n+\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%3, %4\\;rsb%d5\\\\t%0, %2, #0\n-   cmn\\\\t%3, #%n4\\;rsb%d5\\\\t%0, %2, #0\n-   cmp\\\\t%3, %4\\;mov%D5\\\\t%0, %1\\;rsb%d5\\\\t%0, %2, #0\n-   cmn\\\\t%3, #%n4\\;mov%D5\\\\t%0, %1\\;rsb%d5\\\\t%0, %2, #0\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12,12\")])\n+ (set_attr \"length\" \"8,12\")])\n+\n+(define_insn \"*if_neg_move\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n+\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")))]\n+  \"\"\n+  \"@\n+   rsb%d4\\\\t%0, %2, #0\n+   mov%D4\\\\t%0, %1\\;rsb%d4\\\\t%0, %2, #0\n+   mvn%D4\\\\t%0, #%B1\\;rsb%d4\\\\t%0, %2, #0\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")])\n \n (define_insn \"*ifcompare_move_neg\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(if_then_else:SI\n \t (match_operator 5 \"comparison_operator\"\n-\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n-\t   (match_operand:SI 4 \"arm_add_operand\" \"rI,L,rI,L\")])\n-\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,0,?rI,?rI\")\n-\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\"))))\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL\")])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rIK\")\n+\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))\n    (clobber (reg:CC 24))]\n   \"\"\n-  \"@\n-   cmp\\\\t%3, %4\\;rsb%D5\\\\t%0, %2, #0\n-   cmn\\\\t%3, #%n4\\;rsb%D5\\\\t%0, %2, #0\n-   cmp\\\\t%3, %4\\;mov%d5\\\\t%0, %1\\;rsb%D5\\\\t%0, %2, #0\n-   cmn\\\\t%3, #%n4\\;mov%d5\\\\t%0, %1\\;rsb%D5\\\\t%0, %2, #0\"\n+  \"#\"\n [(set_attr \"conds\" \"clob\")\n- (set_attr \"length\" \"8,8,12,12\")])\n+ (set_attr \"length\" \"8,12\")])\n+\n+(define_insn \"*if_move_neg\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(if_then_else:SI\n+\t (match_operator 4 \"comparison_operator\"\n+\t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0,?rI,K\")\n+\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r\"))))]\n+  \"\"\n+  \"@\n+   rsb%D4\\\\t%0, %2, #0\n+   mov%d4\\\\t%0, %1\\;rsb%D4\\\\t%0, %2, #0\n+   mvn%d4\\\\t%0, #%B1\\;rsb%D4\\\\t%0, %2, #0\"\n+[(set_attr \"conds\" \"use\")\n+ (set_attr \"length\" \"4,8,8\")])\n \n (define_insn \"*arith_adjacentmem\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5620,7 +5912,7 @@\n ;; that need assembler instructions adding to them.  We allowed the setting\n ;; of the conditions to be implicit during rtl generation so that\n ;; the conditional compare patterns would work.  However this conflicts to\n-;; some extend with the conditional data operations, so we have to split them\n+;; some extent with the conditional data operations, so we have to split them\n ;; up again here.\n \n (define_split\n@@ -5647,20 +5939,6 @@\n \")\n \n \n-(define_insn \"*cond_move_not\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 4 \"comparison_operator\"\n-\t\t\t  [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n-\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,?rI\")\n-\t\t\t (not:SI\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))))]\n-  \"\"\n-  \"@\n-   mvn%D4\\\\t%0, %2\n-   mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\"\n-[(set_attr \"conds\" \"use\")\n- (set_attr \"length\" \"4,8\")])\n-\n ;; The next two patterns occur when an AND operation is followed by a\n ;; scc insn sequence \n "}]}