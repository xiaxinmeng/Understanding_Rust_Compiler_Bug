{"sha": "f9bf4777c1f93f733b4e99e44dd176417ed0afca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliZjQ3NzdjMWY5M2Y3MzNiNGU5OWU0NGRkMTc2NDE3ZWQwYWZjYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-14T16:18:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-14T16:18:26Z"}, "message": "tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Do not predict loops with multiple exits realistically.\n\n\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Do not\n\tpredict loops with multiple exits realistically.\n\t* cfgloopanal.c (single_likely_exit): New function.\n\n\t* gcc.dg/unroll_5.c: New testcase.\n\nFrom-SVN: r192433", "tree": {"sha": "14ab7474f3d373fee0bea0afe2d5c0a3d96fa5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ab7474f3d373fee0bea0afe2d5c0a3d96fa5e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bf4777c1f93f733b4e99e44dd176417ed0afca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bf4777c1f93f733b4e99e44dd176417ed0afca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bf4777c1f93f733b4e99e44dd176417ed0afca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bf4777c1f93f733b4e99e44dd176417ed0afca/comments", "author": null, "committer": null, "parents": [{"sha": "ca6729e2ed7b8a1308fdfdec0edcb6e9240f3258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6729e2ed7b8a1308fdfdec0edcb6e9240f3258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6729e2ed7b8a1308fdfdec0edcb6e9240f3258"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "a50d9d305c015159858d2465c6fcb9060b6a4c48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9bf4777c1f93f733b4e99e44dd176417ed0afca", "patch": "@@ -1,3 +1,9 @@\n+2012-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Do not\n+\tpredict loops with multiple exits realistically.\n+\t* cfgloopanal.c (single_likely_exit): New function.\n+\n 2012-10-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md: Remove empty predicates and/or constraints."}, {"sha": "c3cf3edf9b9f60af5ddd74a6c825647c155b1e31", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=f9bf4777c1f93f733b4e99e44dd176417ed0afca", "patch": "@@ -446,3 +446,40 @@ mark_loop_exit_edges (void)\n     }\n }\n \n+/* Return exit edge if loop has only one exit that is likely\n+   to be executed on runtime (i.e. it is not EH or leading\n+   to noreturn call.  */\n+\n+edge\n+single_likely_exit (struct loop *loop)\n+{\n+  edge found = single_exit (loop);\n+  VEC (edge, heap) *exits;\n+  unsigned i;\n+  edge ex;\n+\n+  if (found)\n+    return found;\n+  exits = get_loop_exit_edges (loop);\n+  FOR_EACH_VEC_ELT (edge, exits, i, ex)\n+    {\n+      if (ex->flags & (EDGE_EH | EDGE_ABNORMAL_CALL))\n+\tcontinue;\n+      /* The constant of 5 is set in a way so noreturn calls are\n+\t ruled out by this test.  The static branch prediction algorithm\n+         will not assign such a low probability to conditionals for usual\n+         reasons.  */\n+      if (profile_status != PROFILE_ABSENT\n+\t  && ex->probability < 5 && !ex->count)\n+\tcontinue;\n+      if (!found)\n+\tfound = ex;\n+      else\n+\t{\n+\t  VEC_free (edge, heap, exits);\n+\t  return NULL;\n+\t}\n+    }\n+  VEC_free (edge, heap, exits);\n+  return found;\n+}"}, {"sha": "79aee2f3d6e317731a7a0f5500525f5ca2e95958", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9bf4777c1f93f733b4e99e44dd176417ed0afca", "patch": "@@ -1,3 +1,7 @@\n+2012-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/unroll_5.c: New testcase.\n+\n 2012-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/52643"}, {"sha": "48259eb8447383291002c3b77113c00423c404f6", "filename": "gcc/testsuite/gcc.dg/unroll_5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_5.c?ref=f9bf4777c1f93f733b4e99e44dd176417ed0afca", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-rtl-loop2_unroll -funroll-loops\" } */\n+void abort (void);\n+int *a;\n+int t()\n+{\n+   int i;\n+  for (i=0;i<1000000;i++)\n+    if (a[i])\n+      return 1;\n+  return 0;\n+}\n+int t2()\n+{\n+   int i;\n+  for (i=0;i<3000000;i++)\n+    if (a[i])\n+        abort ();\n+  return 0;\n+}\n+/* { dg-final { scan-rtl-dump-times \"upper bound: 999999\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-not \"realistic bound: 999999\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-times \"upper bound: 2999999\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-times \"realistic bound: 2999999\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop2_unroll\" } } */"}, {"sha": "3c39413ee1bd6f3055125afe7ec330d12185ca71", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf4777c1f93f733b4e99e44dd176417ed0afca/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=f9bf4777c1f93f733b4e99e44dd176417ed0afca", "patch": "@@ -2965,6 +2965,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n   struct tree_niter_desc niter_desc;\n   edge ex;\n   double_int bound;\n+  edge likely_exit;\n \n   /* Give up if we already have tried to compute an estimation.  */\n   if (loop->estimate_state != EST_NOT_COMPUTED)\n@@ -2975,6 +2976,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n   loop->any_estimate = false;\n \n   exits = get_loop_exit_edges (loop);\n+  likely_exit = single_likely_exit (loop);\n   FOR_EACH_VEC_ELT (edge, exits, i, ex)\n     {\n       if (!number_of_iterations_exit (loop, ex, &niter_desc, false))\n@@ -2988,7 +2990,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n \t\t\tniter);\n       record_estimate (loop, niter, niter_desc.max,\n \t\t       last_stmt (ex->src),\n-\t\t       true, true, true);\n+\t\t       true, ex == likely_exit, true);\n     }\n   VEC_free (edge, heap, exits);\n "}]}