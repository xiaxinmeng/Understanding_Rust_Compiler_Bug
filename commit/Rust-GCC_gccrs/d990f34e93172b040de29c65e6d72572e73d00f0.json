{"sha": "d990f34e93172b040de29c65e6d72572e73d00f0", "node_id": "C_kwDOANBUbNoAKGQ5OTBmMzRlOTMxNzJiMDQwZGUyOWM2NWU2ZDcyNTcyZTczZDAwZjA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-14T14:16:21Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-05T14:29:57Z"}, "message": "ada: Fix finalization issues in extended return statements\n\nThe first issue pertains to return objects of (class-wide) interface types,\nwhich need to be adjusted if the type is not inherently limited.  The second\nissue is for return objects of non-class-wide types that are initialized by\na function call, which can use a direct renaming only if the object doing\nthe capture of the function call is flagged by Is_Related_To_Func_Return.\nThe third one is that, in the second case, we may need to reassign the tag.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): For a special return\n\tobject of an interface type that is not inherently limited, make\n\ta call to the Adjust primitive after doing the copy.  For a special\n\treturn object of a non-class-wide type initialized by a function\n\tcall, use a direct renaming only if the object doing the capture\n\tis flagged by Is_Related_To_Func_Return.  For a special return\n\tobject using a direct renaming, reassign the tag, if need be.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Fix comment.\n\t* exp_util.adb (Is_Related_To_Func_Return): Accept both regular and\n\trenaming object declarations for return objects.", "tree": {"sha": "3490300fc2b7f62e0c2329ab1f93c43e93132241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3490300fc2b7f62e0c2329ab1f93c43e93132241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d990f34e93172b040de29c65e6d72572e73d00f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d990f34e93172b040de29c65e6d72572e73d00f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d990f34e93172b040de29c65e6d72572e73d00f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d990f34e93172b040de29c65e6d72572e73d00f0/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46924ad780665721a51306a646f7f601c359ba4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46924ad780665721a51306a646f7f601c359ba4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46924ad780665721a51306a646f7f601c359ba4c"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "7dbf82671aa4eac92269d645200ac1a2065e2c72", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d990f34e93172b040de29c65e6d72572e73d00f0/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d990f34e93172b040de29c65e6d72572e73d00f0/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=d990f34e93172b040de29c65e6d72572e73d00f0", "patch": "@@ -7480,7 +7480,19 @@ package body Exp_Ch3 is\n             --  creating the object (via allocator) and initializing it.\n \n             if Is_Special_Return_Object (Def_Id) then\n-               null;\n+\n+               --  If the type needs finalization and is not inherently\n+               --  limited, then the target is adjusted after the copy\n+               --  and attached to the finalization list.\n+\n+               if Needs_Finalization (Typ)\n+                 and then not Is_Limited_View (Typ)\n+               then\n+                  Adj_Call :=\n+                    Make_Adjust_Call (\n+                      Obj_Ref => New_Occurrence_Of (Def_Id, Loc),\n+                      Typ     => Base_Typ);\n+               end if;\n \n             elsif Tagged_Type_Expansion then\n                declare\n@@ -7908,9 +7920,20 @@ package body Exp_Ch3 is\n                 --  This avoids an extra copy and, in the case where Typ needs\n                 --  finalization, a pair of Adjust/Finalize calls (see below).\n \n+                --  However, in the case of a special return object, we need to\n+                --  make sure that the object Rnn is properly recognized by the\n+                --  Is_Related_To_Func_Return predicate; otherwise, if it is of\n+                --  a type that needs finalization, Requires_Cleanup_Actions\n+                --  would return true because of this and Build_Finalizer would\n+                --  finalize it prematurely (see Expand_Simple_Function_Return\n+                --  for the same test in the case of a simple return).\n+\n                 and then\n                   ((not Is_Library_Level_Entity (Def_Id)\n                      and then Is_Captured_Function_Call (Expr_Q)\n+                     and then (not Is_Special_Return_Object (Def_Id)\n+                                or else Is_Related_To_Func_Return\n+                                          (Entity (Prefix (Expr_Q))))\n                      and then not Is_Class_Wide_Type (Typ))\n \n                    --  If the initializing expression is a variable with the\n@@ -8554,7 +8577,8 @@ package body Exp_Ch3 is\n \n       --  If we can rename the initialization expression, we need to make sure\n       --  that we use the proper type in the case of a return object that lives\n-      --  on the secondary stack. See other cases below for a similar handling.\n+      --  on the secondary stack (see other cases below for a similar handling)\n+      --  and that the tag is assigned in the case of any return object.\n \n       elsif Rewrite_As_Renaming then\n          if Is_Secondary_Stack_Return_Object (Def_Id) then\n@@ -8577,6 +8601,12 @@ package body Exp_Ch3 is\n             end;\n          end if;\n \n+         if Is_Special_Return_Object (Def_Id)\n+           and then Present (Tag_Assign)\n+         then\n+            Insert_Action_After (Init_After, Tag_Assign);\n+         end if;\n+\n       --  If this is the return object of a function returning on the secondary\n       --  stack, convert the declaration to a renaming of the dereference of ah\n       --  allocator for the secondary stack."}, {"sha": "b97d69b81b6d3c272bc618af45f30d919a80efa8", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d990f34e93172b040de29c65e6d72572e73d00f0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d990f34e93172b040de29c65e6d72572e73d00f0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=d990f34e93172b040de29c65e6d72572e73d00f0", "patch": "@@ -6449,7 +6449,7 @@ package body Exp_Ch6 is\n       --  sure that the object doing the capture is properly recognized by the\n       --  Is_Related_To_Func_Return predicate; otherwise, if it is of a type\n       --  that needs finalization, Requires_Cleanup_Actions would return true\n-      --  because of it and Build_Finalizer would finalize it prematurely.\n+      --  because of this and Build_Finalizer would finalize it prematurely.\n \n       Exp_Typ : constant Entity_Id := Etype (Exp);\n       --  The type of the expression (not necessarily the same as R_Type)"}, {"sha": "c8829cac85a3884a8114442d1bca8387d2b33234", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d990f34e93172b040de29c65e6d72572e73d00f0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d990f34e93172b040de29c65e6d72572e73d00f0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d990f34e93172b040de29c65e6d72572e73d00f0", "patch": "@@ -9196,7 +9196,8 @@ package body Exp_Util is\n           and then Nkind (Unqual_Conv (Expr)) = N_Explicit_Dereference\n           and then (Nkind (Parent (Expr)) = N_Simple_Return_Statement\n                      or else\n-                       (Nkind (Parent (Expr)) = N_Object_Renaming_Declaration\n+                       (Nkind (Parent (Expr)) in N_Object_Declaration\n+                                               | N_Object_Renaming_Declaration\n                          and then\n                         Is_Return_Object (Defining_Entity (Parent (Expr)))));\n    end Is_Related_To_Func_Return;"}]}