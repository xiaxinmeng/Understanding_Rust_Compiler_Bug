{"sha": "969c851727df5eef4698ece7ffb51483aac1c385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5Yzg1MTcyN2RmNWVlZjQ2OThlY2U3ZmZiNTE0ODNhYWMxYzM4NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T23:03:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T23:03:23Z"}, "message": "(canon_hash, CONST_DOUBLE): Hash integer and real differently.\n\nFrom-SVN: r10303", "tree": {"sha": "9f0dbb7e107a5299129bf63d4aca296ff1785347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f0dbb7e107a5299129bf63d4aca296ff1785347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/969c851727df5eef4698ece7ffb51483aac1c385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969c851727df5eef4698ece7ffb51483aac1c385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969c851727df5eef4698ece7ffb51483aac1c385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969c851727df5eef4698ece7ffb51483aac1c385/comments", "author": null, "committer": null, "parents": [{"sha": "28a19afce3adc9b0ad44346c8de63577e0e670f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a19afce3adc9b0ad44346c8de63577e0e670f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a19afce3adc9b0ad44346c8de63577e0e670f2"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "cba56febbd21eb732354a583f77434851c49895a", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969c851727df5eef4698ece7ffb51483aac1c385/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969c851727df5eef4698ece7ffb51483aac1c385/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=969c851727df5eef4698ece7ffb51483aac1c385", "patch": "@@ -1897,11 +1897,15 @@ canon_hash (x, mode)\n       /* This is like the general case, except that it only counts\n \t the integers representing the constant.  */\n       hash += (unsigned) code + (unsigned) GET_MODE (x);\n-      for (i = 2; i < GET_RTX_LENGTH (CONST_DOUBLE); i++)\n-\t{\n-\t  unsigned tem = XINT (x, i);\n-\t  hash += tem;\n-\t}\n+      if (GET_MODE (x) != VOIDmode)\n+\tfor (i = 2; i < GET_RTX_LENGTH (CONST_DOUBLE); i++)\n+\t  {\n+\t    unsigned tem = XINT (x, i);\n+\t    hash += tem;\n+\t  }\n+      else\n+\thash += ((unsigned) CONST_DOUBLE_LOW (x)\n+\t\t + (unsigned) CONST_DOUBLE_HIGH (x));\n       return hash;\n \n       /* Assume there is only one rtx object for any given label.  */"}]}