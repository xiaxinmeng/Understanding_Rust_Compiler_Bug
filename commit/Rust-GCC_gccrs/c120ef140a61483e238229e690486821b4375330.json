{"sha": "c120ef140a61483e238229e690486821b4375330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyMGVmMTQwYTYxNDgzZTIzODIyOWU2OTA0ODY4MjFiNDM3NTMzMA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-05T22:14:34Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-05T22:14:34Z"}, "message": "re PR fortran/31202 (Incorrect rounding generated for NINT)\n\n2007-08-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n\tPR fortran/31202\n\t* intrinsics/c99_functions.c (roundl): Provide fallback\n\timplementation for systems without ceill.\n\t* c99_protos.h (roundl): Define prototype in all cases.\n\nFrom-SVN: r127227", "tree": {"sha": "f504b2d268647874e55d8ef70dee853132ef178d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f504b2d268647874e55d8ef70dee853132ef178d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c120ef140a61483e238229e690486821b4375330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c120ef140a61483e238229e690486821b4375330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c120ef140a61483e238229e690486821b4375330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c120ef140a61483e238229e690486821b4375330/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dfbac5b94278cac26c43986553827e0fe4adc8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfbac5b94278cac26c43986553827e0fe4adc8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dfbac5b94278cac26c43986553827e0fe4adc8e"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "bb999ece2f0caaa63a29e3e3943c79622ff6412f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120ef140a61483e238229e690486821b4375330/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120ef140a61483e238229e690486821b4375330/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c120ef140a61483e238229e690486821b4375330", "patch": "@@ -1,3 +1,10 @@\n+2007-08-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31202\n+\t* intrinsics/c99_functions.c (roundl): Provide fallback\n+\timplementation for systems without ceill.\n+\t* c99_protos.h (roundl): Define prototype in all cases.\n+\n 2007-08-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/32977"}, {"sha": "e511b687eea3fc296f97803334d2d2deb538c9e0", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120ef140a61483e238229e690486821b4375330/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120ef140a61483e238229e690486821b4375330/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=c120ef140a61483e238229e690486821b4375330", "patch": "@@ -200,7 +200,7 @@ extern double round(double);\n extern float roundf(float);\n #endif\n \n-#if !defined(HAVE_ROUNDL) && defined(HAVE_CEILL)\n+#if !defined(HAVE_ROUNDL)\n #define HAVE_ROUNDL 1\n extern long double roundl(long double);\n #endif"}, {"sha": "65c284e9b8c4d4ececc362725d3a42c3b5233991", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c120ef140a61483e238229e690486821b4375330/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c120ef140a61483e238229e690486821b4375330/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=c120ef140a61483e238229e690486821b4375330", "patch": "@@ -500,8 +500,9 @@ powf(float x, float y)\n \n /* Algorithm by Steven G. Kargl.  */\n \n-#if !defined(HAVE_ROUNDL) && defined(HAVE_CEILL)\n+#if !defined(HAVE_ROUNDL)\n #define HAVE_ROUNDL 1\n+#if defined(HAVE_CEILL)\n /* Round to nearest integral value.  If the argument is halfway between two\n    integral values then round away from zero.  */\n \n@@ -527,6 +528,27 @@ roundl(long double x)\n       return (-t);\n     }\n }\n+#else\n+\n+/* Poor version of roundl for system that don't have ceill.  */\n+long double\n+roundl(long double x)\n+{\n+  if (x > DBL_MAX || x < -DBL_MAX)\n+    {\n+#ifdef HAVE_NEXTAFTERL\n+      static long double prechalf = nexafterl (0.5L, LDBL_MAX);\n+#else\n+      static long double prechalf = 0.5L;\n+#endif\n+      return (GFC_INTEGER_LARGEST) (x + (x > 0 ? prechalf : -prechalf));\n+    }\n+  else\n+    /* Use round().  */\n+    return round((double) x);\n+}\n+\n+#endif\n #endif\n \n #ifndef HAVE_ROUND"}]}