{"sha": "3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiMTkyZDJjN2ZkM2FjODA4MGQzMzVkNjJhYzlhZDY3NTRjZDM2Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-07-11T16:11:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-07-11T16:11:28Z"}, "message": "bfin.md (define_attr \"type\"): Add \"sync\".\n\n\t* config/bfin/bfin.md (define_attr \"type\"): Add \"sync\".\n\t(define_insn_reservation \"alu\"): Likewise.\n\t(csync, ssync): Now of type sync.\n\t* config/bfin/bfin.h (TARGET_DEFAULT): Defaults to\n\t-mcsync-anomaly -mspecld-anomaly.\n\t* config/bfin/bfin.opt (mcsync): Remove.\n\t(mcsync-anomaly, mspecld-anomaly): Add.\n\t* config/bfin/bfin.c: Include \"insn-codes.h\".\n\t(bfin_reorg): Extend to handle the CSYNC anomaly as well.\n\t(TARGET_DEFAULT_TARGET_FLAGS): New.\n\t* doc/invoke.texi: Document -mcsync-anomaly, -mspecld-anomaly.\n\nFrom-SVN: r101880", "tree": {"sha": "c7f52b707d3f9c206e1169f8eb194b6e9bfca2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f52b707d3f9c206e1169f8eb194b6e9bfca2cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/comments", "author": null, "committer": null, "parents": [{"sha": "2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd2d53e2c8c049a08ce582ee9354c884e5dd857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd2d53e2c8c049a08ce582ee9354c884e5dd857"}], "stats": {"total": 177, "additions": 147, "deletions": 30}, "files": [{"sha": "b5147ab56ba8742a4153cd1c285c95968ee4703e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "patch": "@@ -1,3 +1,17 @@\n+2005-07-11  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.md (define_attr \"type\"): Add \"sync\".\n+\t(define_insn_reservation \"alu\"): Likewise.\n+\t(csync, ssync): Now of type sync.\n+\t* config/bfin/bfin.h (TARGET_DEFAULT): Defaults to\n+\t-mcsync-anomaly -mspecld-anomaly.\n+\t* config/bfin/bfin.opt (mcsync): Remove.\n+\t(mcsync-anomaly, mspecld-anomaly): Add.\n+\t* config/bfin/bfin.c: Include \"insn-codes.h\".\n+\t(bfin_reorg): Extend to handle the CSYNC anomaly as well.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): New.\n+\t* doc/invoke.texi: Document -mcsync-anomaly, -mspecld-anomaly.\n+\n 2005-07-11  Steven Bosscher  <stevenb@suse.de>\n \n \t* basic-block.h: Give the BB flags enum a name, bb_flags."}, {"sha": "5be76bbec5a03c50e63c48376be3ad5f0c9fb71e", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 102, "deletions": 16, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "patch": "@@ -28,6 +28,7 @@\n #include \"hard-reg-set.h\"\n #include \"real.h\"\n #include \"insn-config.h\"\n+#include \"insn-codes.h\"\n #include \"conditions.h\"\n #include \"insn-flags.h\"\n #include \"output.h\"\n@@ -2470,9 +2471,11 @@ bfin_reorg (void)\n   rtx insn, last_condjump = NULL_RTX;\n   int cycles_since_jump = INT_MAX;\n \n-  if (! TARGET_CSYNC)\n+  if (! TARGET_SPECLD_ANOMALY || ! TARGET_CSYNC_ANOMALY)\n     return;\n \n+  /* First pass: find predicted-false branches; if something after them\n+     needs nops, insert them or change the branch to predict true.  */\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n       rtx pat;\n@@ -2500,30 +2503,110 @@ bfin_reorg (void)\n       else if (INSN_P (insn))\n \t{\n \t  enum attr_type type = get_attr_type (insn);\n+\t  int delay_needed = 0;\n \t  if (cycles_since_jump < INT_MAX)\n \t    cycles_since_jump++;\n \n-\t  if (type == TYPE_MCLD && cycles_since_jump < 3)\n+\t  if (type == TYPE_MCLD && TARGET_SPECLD_ANOMALY)\n+\t    {\n+\t      rtx pat = single_set (insn);\n+\t      if (may_trap_p (SET_SRC (pat)))\n+\t\tdelay_needed = 3;\n+\t    }\n+\t  else if (type == TYPE_SYNC && TARGET_CSYNC_ANOMALY)\n+\t    delay_needed = 4;\n+\n+\t  if (delay_needed > cycles_since_jump)\n \t    {\n \t      rtx pat;\n+\t      int num_clobbers;\n+\t      rtx *op = recog_data.operand;\n \n-\t      pat = single_set (insn);\n-\t      if (may_trap_p (SET_SRC (pat)))\n+\t      delay_needed -= cycles_since_jump;\n+\n+\t      extract_insn (last_condjump);\n+\t      if (optimize_size)\n \t\t{\n-\t\t  int num_clobbers;\n-\t\t  rtx *op = recog_data.operand;\n-\n-\t\t  extract_insn (last_condjump);\n-\t\t  if (optimize_size)\n-\t\t    pat = gen_cbranch_predicted_taken (op[0], op[1], op[2],\n-\t\t\t\t\t\t       op[3]);\n-\t\t  else\n-\t\t    pat = gen_cbranch_with_nops (op[0], op[1], op[2], op[3],\n-\t\t\t\t\t\t GEN_INT (3 - cycles_since_jump));\n-\t\t  PATTERN (last_condjump) = pat;\n-\t\t  INSN_CODE (last_condjump) = recog (pat, insn, &num_clobbers);\n+\t\t  pat = gen_cbranch_predicted_taken (op[0], op[1], op[2],\n+\t\t\t\t\t\t     op[3]);\n \t\t  cycles_since_jump = INT_MAX;\n \t\t}\n+\t      else\n+\t\t/* Do not adjust cycles_since_jump in this case, so that\n+\t\t   we'll increase the number of NOPs for a subsequent insn\n+\t\t   if necessary.  */\n+\t\tpat = gen_cbranch_with_nops (op[0], op[1], op[2], op[3],\n+\t\t\t\t\t     GEN_INT (delay_needed));\n+\t      PATTERN (last_condjump) = pat;\n+\t      INSN_CODE (last_condjump) = recog (pat, insn, &num_clobbers);\n+\t    }\n+\t}\n+    }\n+  /* Second pass: for predicted-true branches, see if anything at the\n+     branch destination needs extra nops.  */\n+  if (! TARGET_CSYNC_ANOMALY)\n+    return;\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    {\n+      if (JUMP_P (insn)\n+\t  && any_condjump_p (insn)\n+\t  && (INSN_CODE (insn) == CODE_FOR_cbranch_predicted_taken\n+\t      || cbranch_predicted_taken_p (insn)))\n+\t{\n+\t  rtx target = JUMP_LABEL (insn);\n+\t  rtx label = target;\n+\t  cycles_since_jump = 0;\n+\t  for (; target && cycles_since_jump < 3; target = NEXT_INSN (target))\n+\t    {\n+\t      rtx pat;\n+\n+\t      if (NOTE_P (target) || BARRIER_P (target) || LABEL_P (target))\n+\t\tcontinue;\n+\n+\t      pat = PATTERN (target);\n+\t      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER\n+\t\t  || GET_CODE (pat) == ASM_INPUT || GET_CODE (pat) == ADDR_VEC\n+\t\t  || GET_CODE (pat) == ADDR_DIFF_VEC || asm_noperands (pat) >= 0)\n+\t\tcontinue;\n+\n+\t      if (INSN_P (target))\n+\t\t{\n+\t\t  enum attr_type type = get_attr_type (target);\n+\t\t  int delay_needed = 0;\n+\t\t  if (cycles_since_jump < INT_MAX)\n+\t\t    cycles_since_jump++;\n+\n+\t\t  if (type == TYPE_SYNC && TARGET_CSYNC_ANOMALY)\n+\t\t    delay_needed = 2;\n+\n+\t\t  if (delay_needed > cycles_since_jump)\n+\t\t    {\n+\t\t      rtx prev = prev_real_insn (label);\n+\t\t      delay_needed -= cycles_since_jump;\n+\t\t      if (dump_file)\n+\t\t\tfprintf (dump_file, \"Adding %d nops after %d\\n\",\n+\t\t\t\t delay_needed, INSN_UID (label));\n+\t\t      if (JUMP_P (prev)\n+\t\t\t  && INSN_CODE (prev) == CODE_FOR_cbranch_with_nops)\n+\t\t\t{\n+\t\t\t  rtx x;\n+\t\t\t  HOST_WIDE_INT v;\n+\n+\t\t\t  if (dump_file)\n+\t\t\t    fprintf (dump_file,\n+\t\t\t\t     \"Reducing nops on insn %d.\\n\",\n+\t\t\t\t     INSN_UID (prev));\n+\t\t\t  x = PATTERN (prev);\n+\t\t\t  x = XVECEXP (x, 0, 1);\n+\t\t\t  v = INTVAL (XVECEXP (x, 0, 0)) - delay_needed;\n+\t\t\t  XVECEXP (x, 0, 0) = GEN_INT (v);\n+\t\t\t}\n+\t\t      while (delay_needed-- > 0)\n+\t\t\temit_insn_after (gen_nop (), label);\n+\t\t      break;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n     }\n@@ -2792,4 +2875,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION bfin_handle_option\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "7ced865f997c45fa31da957cbea46617d5646c03", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "patch": "@@ -48,7 +48,7 @@ extern int target_flags;\n /* Generate DSP instructions, like DSP halfword loads */\n #define TARGET_DSP\t\t\t(1)\n \n-#define TARGET_DEFAULT MASK_CSYNC\n+#define TARGET_DEFAULT (MASK_SPECLD_ANOMALY | MASK_CSYNC_ANOMALY)\n \n /* Maximum number of library ids we permit */\n #define MAX_LIBRARY_ID 255"}, {"sha": "be430c8c6bab6d9d4b4549b08dbf71871f9ad827", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "patch": "@@ -125,7 +125,7 @@\n    (UNSPEC_VOLATILE_SSYNC 2)])\n \n (define_attr \"type\"\n-  \"move,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,compare,dummy\"\n+  \"move,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,sync,compare,dummy\"\n   (const_string \"misc\"))\n \n ;; Scheduling definitions\n@@ -135,7 +135,7 @@\n (define_cpu_unit \"core\" \"bfin\")\n \n (define_insn_reservation \"alu\" 1\n-  (eq_attr \"type\" \"move,mvi,mcst,dsp32,alu0,shft,brcc,br,call,misc,compare\")\n+  (eq_attr \"type\" \"move,mvi,mcst,dsp32,alu0,shft,brcc,br,call,misc,sync,compare\")\n   \"core\")\n \n (define_insn_reservation \"imul\" 3\n@@ -1931,13 +1931,13 @@\n   [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_CSYNC)]\n   \"\"\n   \"csync;\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"sync\")])\n \n (define_insn \"ssync\"\n   [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_SSYNC)]\n   \"\"\n   \"ssync;\"\n-  [(set_attr \"type\" \"misc\")])\n+  [(set_attr \"type\" \"sync\")])\n \n ;;; Vector instructions\n "}, {"sha": "43f56c4d6241dcfd8a2c386c65b0c1ab0bdb5b87", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "patch": "@@ -27,9 +27,14 @@ mlow64k\n Target Report Mask(LOW_64K)\n Program is entirely located in low 64k of memory\n \n-mcsync\n-Target Report Mask(CSYNC)\n-Avoid speculative loads by inserting CSYNC or equivalent\n+mcsync-anomaly\n+Target Report Mask(CSYNC_ANOMALY)\n+Work around a hardware anomaly by adding a number of NOPs before a\n+CSYNC or SSYNC instruction.\n+\n+mspecld-anomaly\n+Target Report Mask(SPECLD_ANOMALY)\n+Avoid speculative loads to work around a hardware anomaly.\n \n mid-shared-library\n Target Report Mask(ID_SHARED_LIBRARY)"}, {"sha": "8fa98600472dbd98e7642c695bd441c28dd7ad65", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3fb192d2c7fd3ac8080d335d62ac9ad6754cd36f", "patch": "@@ -414,8 +414,9 @@ Objective-C and Objective-C++ Dialects}.\n -mcall-prologues  -mno-tablejump  -mtiny-stack  -mint8}\n \n @emph{Blackfin Options}\n-@gccoptlist{-momit-leaf-frame-pointer -mno-omit-leaf-frame-pointer -mcsync @gol\n--mno-csync -mlow-64k -mno-low64k -mid-shared-library @gol\n+@gccoptlist{-momit-leaf-frame-pointer -mno-omit-leaf-frame-pointer @gol\n+-mspecld-anomaly -mno-specld-anomaly -mcsync-anomaly -mno-csync-anomaly @gol\n+-mlow-64k -mno-low64k -mid-shared-library @gol\n -mno-id-shared-library -mshared-library-id=@var{n} @gol\n -mlong-calls  -mno-long-calls}\n \n@@ -7403,16 +7404,27 @@ makes an extra register available in leaf functions.  The option\n @option{-fomit-frame-pointer} removes the frame pointer for all functions\n which might make debugging harder.\n \n-@item -mcsync\n-@opindex mcsync\n+@item -mspecld-anomaly\n+@opindex mspecld-anomaly\n When enabled, the compiler will ensure that the generated code does not\n contain speculative loads after jump instructions.  This option is enabled\n by default.\n \n-@item -mno-csync\n-@opindex mno-csync\n+@item -mno-specld-anomaly\n+@opindex mno-specld-anomaly\n Don't generate extra code to prevent speculative loads from occurring.\n \n+@item -mcsync-anomaly\n+@opindex mspecld-anomaly\n+When enabled, the compiler will ensure that the generated code does not\n+contain CSYNC or SSYNC instructions too soon after conditional branches.\n+This option is enabled by default.\n+\n+@item -mno-csync-anomaly\n+@opindex mno-specld-anomaly\n+Don't generate extra code to prevent CSYNC or SSYNC instructions from\n+occurring too soon after a conditional branch.\n+\n @item -mlow-64k\n @opindex mlow-64k\n When enabled, the compiler is free to take advantage of the knowledge that"}]}