{"sha": "7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ2NWMyZWQ2ZjFhMWRmYjJiZWM0YjE4YmNhZDVmZTMyMTBiM2Y0ZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-24T17:10:19Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-30T19:58:30Z"}, "message": "rs6000: Always initialize vector_pair and vector_quad nodes\n\n2021-08-24  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Remove\n\tTARGET_EXTRA_BUILTINS guard.", "tree": {"sha": "770aefaf64b22eb3adee7620add779a64bf70b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/770aefaf64b22eb3adee7620add779a64bf70b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e/comments", "author": null, "committer": null, "parents": [{"sha": "a5027ea2ad22c82adc68e02dae8be7f69131503a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5027ea2ad22c82adc68e02dae8be7f69131503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5027ea2ad22c82adc68e02dae8be7f69131503a"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "e8625d17d18bcabba13fcc13d7579eb9a03e8fb9", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=7465c2ed6f1a1dfb2bec4b18bcad5fe3210b3f4e", "patch": "@@ -13551,32 +13551,29 @@ rs6000_init_builtins (void)\n     ieee128_float_type_node = ibm128_float_type_node = long_double_type_node;\n \n   /* Vector pair and vector quad support.  */\n-  if (TARGET_EXTRA_BUILTINS)\n-    {\n-      vector_pair_type_node = make_node (OPAQUE_TYPE);\n-      SET_TYPE_MODE (vector_pair_type_node, OOmode);\n-      TYPE_SIZE (vector_pair_type_node) = bitsize_int (GET_MODE_BITSIZE (OOmode));\n-      TYPE_PRECISION (vector_pair_type_node) = GET_MODE_BITSIZE (OOmode);\n-      TYPE_SIZE_UNIT (vector_pair_type_node) = size_int (GET_MODE_SIZE (OOmode));\n-      SET_TYPE_ALIGN (vector_pair_type_node, 256);\n-      TYPE_USER_ALIGN (vector_pair_type_node) = 0;\n-      lang_hooks.types.register_builtin_type (vector_pair_type_node,\n-\t\t\t\t\t      \"__vector_pair\");\n-      t = build_qualified_type (vector_pair_type_node, TYPE_QUAL_CONST);\n-      ptr_vector_pair_type_node = build_pointer_type (t);\n-\n-      vector_quad_type_node = make_node (OPAQUE_TYPE);\n-      SET_TYPE_MODE (vector_quad_type_node, XOmode);\n-      TYPE_SIZE (vector_quad_type_node) = bitsize_int (GET_MODE_BITSIZE (XOmode));\n-      TYPE_PRECISION (vector_quad_type_node) = GET_MODE_BITSIZE (XOmode);\n-      TYPE_SIZE_UNIT (vector_quad_type_node) = size_int (GET_MODE_SIZE (XOmode));\n-      SET_TYPE_ALIGN (vector_quad_type_node, 512);\n-      TYPE_USER_ALIGN (vector_quad_type_node) = 0;\n-      lang_hooks.types.register_builtin_type (vector_quad_type_node,\n-\t\t\t\t\t      \"__vector_quad\");\n-      t = build_qualified_type (vector_quad_type_node, TYPE_QUAL_CONST);\n-      ptr_vector_quad_type_node = build_pointer_type (t);\n-    }\n+  vector_pair_type_node = make_node (OPAQUE_TYPE);\n+  SET_TYPE_MODE (vector_pair_type_node, OOmode);\n+  TYPE_SIZE (vector_pair_type_node) = bitsize_int (GET_MODE_BITSIZE (OOmode));\n+  TYPE_PRECISION (vector_pair_type_node) = GET_MODE_BITSIZE (OOmode);\n+  TYPE_SIZE_UNIT (vector_pair_type_node) = size_int (GET_MODE_SIZE (OOmode));\n+  SET_TYPE_ALIGN (vector_pair_type_node, 256);\n+  TYPE_USER_ALIGN (vector_pair_type_node) = 0;\n+  lang_hooks.types.register_builtin_type (vector_pair_type_node,\n+\t\t\t\t\t  \"__vector_pair\");\n+  t = build_qualified_type (vector_pair_type_node, TYPE_QUAL_CONST);\n+  ptr_vector_pair_type_node = build_pointer_type (t);\n+\n+  vector_quad_type_node = make_node (OPAQUE_TYPE);\n+  SET_TYPE_MODE (vector_quad_type_node, XOmode);\n+  TYPE_SIZE (vector_quad_type_node) = bitsize_int (GET_MODE_BITSIZE (XOmode));\n+  TYPE_PRECISION (vector_quad_type_node) = GET_MODE_BITSIZE (XOmode);\n+  TYPE_SIZE_UNIT (vector_quad_type_node) = size_int (GET_MODE_SIZE (XOmode));\n+  SET_TYPE_ALIGN (vector_quad_type_node, 512);\n+  TYPE_USER_ALIGN (vector_quad_type_node) = 0;\n+  lang_hooks.types.register_builtin_type (vector_quad_type_node,\n+\t\t\t\t\t  \"__vector_quad\");\n+  t = build_qualified_type (vector_quad_type_node, TYPE_QUAL_CONST);\n+  ptr_vector_quad_type_node = build_pointer_type (t);\n \n   /* Initialize the modes for builtin_function_type, mapping a machine mode to\n      tree type node.  */"}]}