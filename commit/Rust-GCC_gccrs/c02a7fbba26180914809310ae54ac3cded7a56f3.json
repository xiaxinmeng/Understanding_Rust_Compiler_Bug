{"sha": "c02a7fbba26180914809310ae54ac3cded7a56f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyYTdmYmJhMjYxODA5MTQ4MDkzMTBhZTU0YWMzY2RlZDdhNTZmMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:49:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:49:33Z"}, "message": "(memory_address): Fix error in last change.\n\nFrom-SVN: r6520", "tree": {"sha": "9aaa8f2682d8a41f6b13b4a85d6dcd865db6985a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aaa8f2682d8a41f6b13b4a85d6dcd865db6985a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c02a7fbba26180914809310ae54ac3cded7a56f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02a7fbba26180914809310ae54ac3cded7a56f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02a7fbba26180914809310ae54ac3cded7a56f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02a7fbba26180914809310ae54ac3cded7a56f3/comments", "author": null, "committer": null, "parents": [{"sha": "41109364f57e758fb7afd2c4c519a7f4b6c6cd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41109364f57e758fb7afd2c4c519a7f4b6c6cd48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41109364f57e758fb7afd2c4c519a7f4b6c6cd48"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "96c7c1269c7583cc539c36a1128bdc1f8303cd1c", "filename": "gcc/explow.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c02a7fbba26180914809310ae54ac3cded7a56f3/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c02a7fbba26180914809310ae54ac3cded7a56f3/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=c02a7fbba26180914809310ae54ac3cded7a56f3", "patch": "@@ -416,21 +416,21 @@ memory_address (mode, x)\n \tx = force_reg (Pmode, x);\n \n       goto done;\n-    }\n \n- win2:\n-  x = oldx;\n- win:\n-  if (flag_force_addr && ! cse_not_expected && GET_CODE (x) != REG\n-      /* Don't copy an addr via a reg if it is one of our stack slots.  */\n-      && ! (GET_CODE (x) == PLUS\n-\t    && (XEXP (x, 0) == virtual_stack_vars_rtx\n-\t\t|| XEXP (x, 0) == virtual_incoming_args_rtx)))\n-    {\n-      if (general_operand (x, Pmode))\n-\tx = force_reg (Pmode, x);\n-      else\n-\tx = force_operand (x, NULL_RTX);\n+    win2:\n+      x = oldx;\n+    win:\n+      if (flag_force_addr && ! cse_not_expected && GET_CODE (x) != REG\n+\t  /* Don't copy an addr via a reg if it is one of our stack slots.  */\n+\t  && ! (GET_CODE (x) == PLUS\n+\t\t&& (XEXP (x, 0) == virtual_stack_vars_rtx\n+\t\t    || XEXP (x, 0) == virtual_incoming_args_rtx)))\n+\t{\n+\t  if (general_operand (x, Pmode))\n+\t    x = force_reg (Pmode, x);\n+\t  else\n+\t    x = force_operand (x, NULL_RTX);\n+\t}\n     }\n \n  done:"}]}