{"sha": "9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxOWYzYjc5MjhhMWE3NDBhMzE5MjViNWIyZjNkNDA1M2QyZDNmZg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-11-15T05:00:40Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-11-15T05:00:40Z"}, "message": "invoke.texi (RS/6000 and PowerPC Options): Add -mmfcrf, -mpopcntb, -mfprnd.\n\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Add -mmfcrf,\n        -mpopcntb, -mfprnd. Add -mcpu=power5+.\n        * configure.ac: Add test for FP rounding instructions.\n        * configure: Regenerate.\n        * config.in: Regenerate.\n        * config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n        _ARCH_PPCSQ, _ARCH_PPCGR, _ARCH_PWR4, _ARCH_PWR5, _ARCH_PWR5X if\n        features enabled.\n        * config/rs6000/rs6000.opt (mfprnd): New.\n        * config/rs6000/rs6000.c (processor_target_table): Add power5+.\n        (POWERPC_MASKS): Add MASK_POPCNTB and MASK_FPRND.\n        * config/rs6000/aix52.h (ASM_CPU_SPEC): Add -mpower5+.\n        * config/rs6000/rs6000.h (ASM_CPU_SPEC): Add -mpower5+.\n        (TARGET_FPRND): New.\n        * config/rs6000/rs6000.md (UNSPEC_FRIM, UNSPEC_FRIN, UNSPEC_FRIP,\n        UNSPEC_FRIZ): New.\n        (btrunc<mode>2): New.\n        (ceil<mode>2): New.\n        (floor<mode>2): New.\n        (round<mode>2): New.\n\nFrom-SVN: r106938", "tree": {"sha": "e3c4173d584ff945858e97eecbb8ca939a360bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c4173d584ff945858e97eecbb8ca939a360bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/comments", "author": null, "committer": null, "parents": [{"sha": "f47bddec0c00f9301cb2feba9740a2e3caa8c236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47bddec0c00f9301cb2feba9740a2e3caa8c236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47bddec0c00f9301cb2feba9740a2e3caa8c236"}], "stats": {"total": 240, "additions": 222, "deletions": 18}, "files": [{"sha": "08501cf3d782cc114be430705e4625862968bc9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -1,3 +1,26 @@\n+2005-11-14  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Add -mmfcrf,\n+\t-mpopcntb, -mfprnd. Add -mcpu=power5+.\n+\t* configure.ac: Add test for FP rounding instructions.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n+\t_ARCH_PPCSQ, _ARCH_PPCGR, _ARCH_PWR4, _ARCH_PWR5, _ARCH_PWR5X if\n+\tfeatures enabled.\n+\t* config/rs6000/rs6000.opt (mfprnd): New.\n+\t* config/rs6000/rs6000.c (processor_target_table): Add power5+.\n+\t(POWERPC_MASKS): Add MASK_POPCNTB and MASK_FPRND.\n+\t* config/rs6000/aix52.h (ASM_CPU_SPEC): Add -mpower5+.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add -mpower5+.\n+\t(TARGET_FPRND): New.\n+\t* config/rs6000/rs6000.md (UNSPEC_FRIM, UNSPEC_FRIN, UNSPEC_FRIP,\n+\tUNSPEC_FRIZ): New.\n+\t(btrunc<mode>2): New.\n+\t(ceil<mode>2): New.\n+\t(floor<mode>2): New.\n+\t(round<mode>2): New.\n+\n 2005-11-14  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.c (version_compare_spec_function): Use fatal() rather than"}, {"sha": "d91891f0709835e4fa6a7c7d4aa108344e145df9", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -161,6 +161,12 @@\n #endif\n \n \n+/* Define if your assembler supports fprnd. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_FPRND\n+#endif\n+\n+\n /* Define if your assembler supports the --gdwarf2 option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_GDWARF2_DEBUG_FLAG"}, {"sha": "21f38f4e0f10d850ecc36f84b97d32e94c8f4d2f", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -61,6 +61,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=power3: -m620} \\\n %{mcpu=power4: -m620} \\\n %{mcpu=power5: -m620} \\\n+%{mcpu=power5+: -m620} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rs64a: -mppc} \\\n %{mcpu=603: -m603} \\"}, {"sha": "ecd403da75887d9e5f88bf9cd9efd90b4c550049", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -94,8 +94,18 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n     builtin_define (\"_ARCH_PWR\");\n   if (TARGET_POWERPC)\n     builtin_define (\"_ARCH_PPC\");\n+  if (TARGET_PPC_GPOPT)\n+    builtin_define (\"_ARCH_PPCSQ\");\n+  if (TARGET_PPC_GFXOPT)\n+    builtin_define (\"_ARCH_PPCGR\");\n   if (TARGET_POWERPC64)\n     builtin_define (\"_ARCH_PPC64\");\n+  if (TARGET_MFCRF)\n+    builtin_define (\"_ARCH_PWR4\");\n+  if (TARGET_POPCNTB)\n+    builtin_define (\"_ARCH_PWR5\");\n+  if (TARGET_FPRND)\n+    builtin_define (\"_ARCH_PWR5X\");\n   if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)\n     builtin_define (\"_ARCH_COM\");\n   if (TARGET_ALTIVEC)"}, {"sha": "fb3c3a1038398ff35600cc5082f4fd9a842d82db", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -1152,6 +1152,9 @@ rs6000_override_options (const char *default_cpu)\n \t {\"power5\", PROCESSOR_POWER5,\n \t  POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT\n \t  | MASK_MFCRF | MASK_POPCNTB},\n+\t {\"power5+\", PROCESSOR_POWER5,\n+\t  POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT\n+\t  | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND},\n \t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n@@ -1177,7 +1180,7 @@ rs6000_override_options (const char *default_cpu)\n     POWER_MASKS = MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n     POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT\n \t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n-\t\t     | MASK_MFCRF)\n+\t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND)\n   };\n \n   rs6000_init_hard_regno_mode_ok ();"}, {"sha": "d3b3eea0557682f6acbfa1be611642583000bb67", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -72,6 +72,7 @@\n %{mcpu=power3: -mppc64} \\\n %{mcpu=power4: -mpower4} \\\n %{mcpu=power5: -mpower4} \\\n+%{mcpu=power5+: -mpower4} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n@@ -151,6 +152,14 @@\n #define TARGET_POPCNTB 0\n #endif\n \n+/* Define TARGET_FPRND if the target assembler does not support the\n+   fp rounding instructions.  */\n+\n+#ifndef HAVE_AS_FPRND\n+#undef  TARGET_FPRND\n+#define TARGET_FPRND 0\n+#endif\n+\n #ifndef TARGET_SECURE_PLT\n #define TARGET_SECURE_PLT 0\n #endif"}, {"sha": "ee9cc427524adda56717248fad4adf5d75d10ffb", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -34,6 +34,10 @@\n    (UNSPEC_MOVSI_GOT\t\t8)\n    (UNSPEC_MV_CR_OV\t\t9)\t; move_from_CR_ov_bit\n    (UNSPEC_FCTIWZ\t\t10)\n+   (UNSPEC_FRIM\t\t\t11)\n+   (UNSPEC_FRIN\t\t\t12)\n+   (UNSPEC_FRIP\t\t\t13)\n+   (UNSPEC_FRIZ\t\t\t14)\n    (UNSPEC_LD_MPIC\t\t15)\t; load_macho_picbase\n    (UNSPEC_MPIC_CORRECT\t\t16)\t; macho_correct_pic\n    (UNSPEC_TLSGD\t\t17)\n@@ -5317,6 +5321,62 @@\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_insn \"btruncdf2\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIZ))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"friz %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"btruncsf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIZ))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frizs %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"ceildf2\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIP))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frip %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"ceilsf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIP))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frips %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"floordf2\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIM))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frim %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"floorsf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIM))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frims %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"rounddf2\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIN))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frin %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"roundsf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIN))]\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"frins %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n ; An UNSPEC is used so we don't have to support SImode in FP registers.\n (define_insn \"stfiwx\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")"}, {"sha": "05c6ce570f0dd9762c34f5d68a24088a7cbfcf1b", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -54,11 +54,15 @@ Use PowerPC Graphics group optional instructions\n \n mmfcrf\n Target Report Mask(MFCRF)\n-Generate single field mfcr instruction\n+Use PowerPC V2.01 single field mfcr instruction\n \n mpopcntb\n Target Report Mask(POPCNTB)\n-Use PowerPC/AS popcntb instruction\n+Use PowerPC V2.02 popcntb instruction\n+\n+mfprnd\n+Target Report Mask(FPRND)\n+Use PowerPC V2.02 floating point rounding instructions\n \n maltivec\n Target Report Mask(ALTIVEC)"}, {"sha": "37d7ac6508cedf8fcd9f316d99215b70097cf619", "filename": "gcc/configure", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -15574,6 +15574,52 @@ cat >>confdefs.h <<\\_ACEOF\n #define HAVE_AS_POPCNTB 1\n _ACEOF\n \n+fi\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr5x\"\n+\t.csect .text[PR]\n+\tfrin 1,1';;\n+      *) conftest_s='\t.machine power5x\n+\t.text\n+\tfrin 1,1';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for fp round support\" >&5\n+echo $ECHO_N \"checking assembler for fp round support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_fprnd+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_fprnd=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 17 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_fprnd=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_fprnd=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_fprnd\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_fprnd\" >&6\n+if test $gcc_cv_as_powerpc_fprnd = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_FPRND 1\n+_ACEOF\n+\n fi\n \n     case $target in"}, {"sha": "4669488d88a7b1151c54f8a024b67ae847cde054", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -2762,6 +2762,21 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_POPCNTB, 1,\n \t  [Define if your assembler supports popcntb field.])])\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr5x\"\n+\t.csect .text[[PR]]\n+\tfrin 1,1';;\n+      *) conftest_s='\t.machine power5x\n+\t.text\n+\tfrin 1,1';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([fp round support],\n+      gcc_cv_as_powerpc_fprnd, [2,17,0],,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_FPRND, 1,\n+\t  [Define if your assembler supports fprnd.])])\n+\n     case $target in\n       *-*-aix*) conftest_s='\t.csect .text[[PR]]\n LCF..0:"}, {"sha": "2b71c96432c8c959298360cf615e5d27f5f0ca7c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9719f3b7928a1a740a31925b5b2f3d4053d2d3ff/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9719f3b7928a1a740a31925b5b2f3d4053d2d3ff", "patch": "@@ -636,6 +636,7 @@ See RS/6000 and PowerPC Options.\n -maltivec  -mno-altivec @gol\n -mpowerpc-gpopt  -mno-powerpc-gpopt @gol\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt @gol\n+-mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb  -mfprnd  -mno-fprnd @gol\n -mnew-mnemonics  -mold-mnemonics @gol\n -mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc @gol\n -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe @gol\n@@ -10830,6 +10831,12 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @itemx -mno-powerpc-gfxopt\n @itemx -mpowerpc64\n @itemx -mno-powerpc64\n+@itemx -mmfcrf\n+@itemx -mno-mfcrf\n+@itemx -mpopcntb\n+@itemx -mno-popcntb\n+@itemx -mfprnd\n+@itemx -mno-fprnd\n @opindex mpower\n @opindex mno-power\n @opindex mpower2\n@@ -10842,12 +10849,18 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @opindex mno-powerpc-gfxopt\n @opindex mpowerpc64\n @opindex mno-powerpc64\n+@opindex mmfcrf\n+@opindex mno-mfcrf\n+@opindex mpopcntb\n+@opindex mno-popcntb\n+@opindex mfprnd\n+@opindex mno-fprnd\n GCC supports two related instruction set architectures for the\n RS/6000 and PowerPC@.  The @dfn{POWER} instruction set are those\n instructions supported by the @samp{rios} chip set used in the original\n RS/6000 systems and the @dfn{PowerPC} instruction set is the\n-architecture of the Motorola MPC5xx, MPC6xx, MPC8xx microprocessors, and\n-the IBM 4xx microprocessors.\n+architecture of the Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and\n+the IBM 4xx, 6xx, and follow-on microprocessors.\n \n Neither architecture is a subset of the other.  However there is a\n large common subset of instructions supported by both.  An MQ\n@@ -10875,6 +10888,18 @@ General Purpose group, including floating-point square root.  Specifying\n use the optional PowerPC architecture instructions in the Graphics\n group, including floating-point select.\n \n+The @option{-mmfcrf} option allows GCC to generate the move from\n+condition register field instruction implemented on the POWER4\n+processor and other processors that support the PowerPC V2.01\n+architecture.\n+The @option{-mpopcntb} option allows GCC to generate the popcount and\n+double precision FP reciprocal estimate instruction implemented on the\n+POWER5 processor and other processors that support the PowerPC V2.02\n+architecture.\n+The @option{-mfprnd} option allows GCC to generate the FP round to\n+integer instructions implemented on the POWER5+ processor and other\n+processors that support the PowerPC V2.03 architecture.\n+\n The @option{-mpowerpc64} option allows GCC to generate the additional\n 64-bit instructions that are found in the full PowerPC64 architecture\n and to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to\n@@ -10913,9 +10938,10 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{601}, @samp{602}, @samp{603}, @samp{603e}, @samp{604},\n @samp{604e}, @samp{620}, @samp{630}, @samp{740}, @samp{7400},\n @samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n-@samp{860}, @samp{970}, @samp{8540}, @samp{common}, @samp{ec603e}, @samp{G3},\n+@samp{860}, @samp{970}, @samp{8540}, @samp{ec603e}, @samp{G3},\n @samp{G4}, @samp{G5}, @samp{power}, @samp{power2}, @samp{power3},\n-@samp{power4}, @samp{power5}, @samp{powerpc}, @samp{powerpc64},\n+@samp{power4}, @samp{power5}, @samp{power5+},\n+@samp{common}, @samp{powerpc}, @samp{powerpc64},\n @samp{rios}, @samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n@@ -10935,19 +10961,20 @@ those options will run best on that processor, and may not run at all on\n others.\n \n The @option{-mcpu} options automatically enable or disable the\n-following options: @option{-maltivec}, @option{-mhard-float},\n-@option{-mmfcrf}, @option{-mmultiple}, @option{-mnew-mnemonics},\n-@option{-mpower}, @option{-mpower2}, @option{-mpowerpc64},\n-@option{-mpowerpc-gpopt}, @option{-mpowerpc-gfxopt},\n-@option{-mstring}.  The particular options set for any particular CPU\n-will vary between compiler versions, depending on what setting seems\n-to produce optimal code for that CPU; it doesn't necessarily reflect\n-the actual hardware's capabilities.  If you wish to set an individual\n-option to a particular value, you may specify it after the\n-@option{-mcpu} option, like @samp{-mcpu=970 -mno-altivec}.\n+following options: @option{-maltivec}, @option{-mfprnd},\n+@option{-mhard-float}, @option{-mmfcrf}, @option{-mmultiple},\n+@option{-mnew-mnemonics}, @option{-mpopcntb}, @option{-mpower},\n+@option{-mpower2}, @option{-mpowerpc64}, @option{-mpowerpc-gpopt},\n+@option{-mpowerpc-gfxopt}, @option{-mstring}.  The particular options\n+set for any particular CPU will vary between compiler versions,\n+depending on what setting seems to produce optimal code for that CPU;\n+it doesn't necessarily reflect the actual hardware's capabilities.  If\n+you wish to set an individual option to a particular value, you may\n+specify it after the @option{-mcpu} option, like @samp{-mcpu=970\n+-mno-altivec}.\n \n On AIX, the @option{-maltivec} and @option{-mpowerpc64} options are\n-not enabled or disabled by the @option{-mcpu} option at present, since\n+not enabled or disabled by the @option{-mcpu} option at present because\n AIX does not have full support for these options.  You may still\n enable or disable them individually if you're sure it'll work in your\n environment."}]}