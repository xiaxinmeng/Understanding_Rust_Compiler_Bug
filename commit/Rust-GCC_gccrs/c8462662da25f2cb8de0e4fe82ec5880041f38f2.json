{"sha": "c8462662da25f2cb8de0e4fe82ec5880041f38f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0NjI2NjJkYTI1ZjJjYjhkZTBlNGZlODJlYzU4ODAwNDFmMzhmMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-26T10:11:24Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-26T10:13:13Z"}, "message": "Support --dry-mode in git_update_version.py.\n\nThe patch improves the script based on Jakub's needs,\nI'm going to install the patch.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_update_version.py: Add 2 new options.", "tree": {"sha": "b14895896fe86475ef3c664b7280ab9be64a73f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b14895896fe86475ef3c664b7280ab9be64a73f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8462662da25f2cb8de0e4fe82ec5880041f38f2", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7M670ACgkQTcGC3A+n\nN4VMUgf/bHPcHCyRyvGHxHCKQ3rItRBeL2QM/kjJ/+ENv8s9STV5ocVqb8rqRd8A\nXPXewvSr9bAUdZfNURbs7+TVyjAfQu8Vl3ONWp2L7DdEh8UQOsDdqf6t21gfpbkY\nWqXbL12a/jjDAjv/etZBvgTau+iEfhJVxMzJOqsYajpAhR3ksIhjoLnNxVvZFhxn\nUxFphPgL11JvLuLfP2+UxpfEWKBzP97lyzJHXIqhYYKZuDVhlQE6UOKkeYBEfUmd\nC/vUF7Mw+FftDqGpoZoEiZpSBjwj7k/s1o4fg9Fx95b0CV1oeo7oU6LMJRI8kbKF\nJKl7BAAyPZXCzOnx9M+VuagFeQlqMw==\n=UG5W\n-----END PGP SIGNATURE-----", "payload": "tree b14895896fe86475ef3c664b7280ab9be64a73f7\nparent 5c8344e7289969e1ee3103beaf9631b284f5ebc3\nauthor Martin Liska <mliska@suse.cz> 1590487884 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590487993 +0200\n\nSupport --dry-mode in git_update_version.py.\n\nThe patch improves the script based on Jakub's needs,\nI'm going to install the patch.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_update_version.py: Add 2 new options.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8462662da25f2cb8de0e4fe82ec5880041f38f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8462662da25f2cb8de0e4fe82ec5880041f38f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8462662da25f2cb8de0e4fe82ec5880041f38f2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8344e7289969e1ee3103beaf9631b284f5ebc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8344e7289969e1ee3103beaf9631b284f5ebc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8344e7289969e1ee3103beaf9631b284f5ebc3"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "3dcc5625eda651d4668ff80e7dcaec5e393089f7", "filename": "contrib/gcc-changelog/git_update_version.py", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8462662da25f2cb8de0e4fe82ec5880041f38f2/contrib%2Fgcc-changelog%2Fgit_update_version.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8462662da25f2cb8de0e4fe82ec5880041f38f2/contrib%2Fgcc-changelog%2Fgit_update_version.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_update_version.py?ref=c8462662da25f2cb8de0e4fe82ec5880041f38f2", "patch": "@@ -31,7 +31,7 @@ def read_timestamp(path):\n     return open(path).read()\n \n \n-def prepend_to_changelog_files(repo, folder, git_commit):\n+def prepend_to_changelog_files(repo, folder, git_commit, add_to_git):\n     if not git_commit.success:\n         for error in git_commit.errors:\n             print(error)\n@@ -48,7 +48,8 @@ def prepend_to_changelog_files(repo, folder, git_commit):\n             if content:\n                 f.write('\\n\\n')\n                 f.write(content)\n-        repo.git.add(full_path)\n+        if add_to_git:\n+            repo.git.add(full_path)\n \n \n active_refs = ['master', 'releases/gcc-8', 'releases/gcc-9', 'releases/gcc-10']\n@@ -57,6 +58,12 @@ def prepend_to_changelog_files(repo, folder, git_commit):\n                                  'ChangeLog entries')\n parser.add_argument('-g', '--git-path', default='.',\n                     help='Path to git repository')\n+parser.add_argument('-p', '--push', action='store_true',\n+                    help='Push updated active branches')\n+parser.add_argument('-d', '--dry-mode',\n+                    help='Generate patch for ChangeLog entries and do it'\n+                         ' even if DATESTAMP is unchanged; folder argument'\n+                         ' is expected')\n args = parser.parse_args()\n \n repo = Repo(args.git_path)\n@@ -86,19 +93,31 @@ def prepend_to_changelog_files(repo, folder, git_commit):\n \n         print('%d revisions since last Daily bump' % commit_count)\n         datestamp_path = os.path.join(args.git_path, 'gcc/DATESTAMP')\n-        if read_timestamp(datestamp_path) != current_timestamp:\n-            print('DATESTAMP will be changed:')\n+        if (read_timestamp(datestamp_path) != current_timestamp\n+                or args.dry_mode):\n             commits = parse_git_revisions(args.git_path, '%s..HEAD'\n                                           % commit.hexsha)\n             for git_commit in reversed(commits):\n-                prepend_to_changelog_files(repo, args.git_path, git_commit)\n-            # update timestamp\n-            with open(datestamp_path, 'w+') as f:\n-                f.write(current_timestamp)\n-            repo.git.add(datestamp_path)\n-            repo.index.commit('Daily bump.')\n-            # TODO: push the repository\n-            # repo.git.push('origin', branch)\n+                prepend_to_changelog_files(repo, args.git_path, git_commit,\n+                                           not args.dry_mode)\n+            if args.dry_mode:\n+                diff = repo.git.diff('HEAD')\n+                patch = os.path.join(args.dry_mode,\n+                                     branch.name.split('/')[-1] + '.patch')\n+                with open(patch, 'w+') as f:\n+                    f.write(diff)\n+                print('branch diff written to %s' % patch)\n+                repo.git.checkout(force=True)\n+            else:\n+                # update timestamp\n+                print('DATESTAMP will be changed:')\n+                with open(datestamp_path, 'w+') as f:\n+                    f.write(current_timestamp)\n+                repo.git.add(datestamp_path)\n+                repo.index.commit('Daily bump.')\n+                if args.push:\n+                    repo.git.push('origin', branch)\n+                    print('branch is pushed')\n         else:\n             print('DATESTAMP unchanged')\n         print('branch is done\\n', flush=True)"}]}