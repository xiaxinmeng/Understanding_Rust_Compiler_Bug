{"sha": "5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzNWJjM2UxNmYwZTIzODQ4ODQyM2UzN2FlZDVkY2JiOWJmZGU0Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-04-10T09:58:57Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-04-10T09:58:57Z"}, "message": "[explow] PR target/85173: validize memory before passing it on to target probe_stack\n\nIn this PR the expansion code emits an invalid memory address for the stack probe, which the backend fails to recognise.\nThe address is created explicitly in anti_adjust_stack_and_probe_stack_clash in explow.c and passed down to gen_probe_stack\nwithout any validation in emit_stack_probe.\n\nThis patch fixes the ICE by calling validize_mem on the memory location before passing it down to the target.\nJakub pointed out that we also want to create valid addresses for the probe_stack_address case, so this patch\ncreates an expand operand and legitimizes it before passing it down to the probe_stack_address expander.\n\nThis patch passes bootstrap and testing on arm-none-linux-gnueabihf and aarch64-none-linux-gnu\nand ppc64le-redhat-linux on gcc112 in the compile farm.\n\n\tPR target/85173\n\t* explow.c (emit_stack_probe): Call validize_mem on memory location\n\tbefore passing it to gen_probe_stack.  Create address operand and\n\tlegitimize it for the probe_stack_address case.\n\n\t* gcc.target/arm/pr85173.c: New test.\n\nFrom-SVN: r259266", "tree": {"sha": "27ab70f24b85e6e1612c9b21b667002c9e38b01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ab70f24b85e6e1612c9b21b667002c9e38b01e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d96e546b765cf7e008584359065651008e728e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d96e546b765cf7e008584359065651008e728e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d96e546b765cf7e008584359065651008e728e1"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "805b4b4acb9f37df3928f53473c043f53c5ce429", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "patch": "@@ -1,3 +1,10 @@\n+2018-04-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/85173\n+\t* explow.c (emit_stack_probe): Call validize_mem on memory location\n+\tbefore passing it to gen_probe_stack.  Create address operand and\n+\tlegitimize it for the probe_stack_address case.\n+\n 2018-04-09  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/85078"}, {"sha": "fb2b7ff9f95f9e5ce0faec1e9bb2e32f6e1e7ce2", "filename": "gcc/explow.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "patch": "@@ -1626,18 +1626,25 @@ void\n emit_stack_probe (rtx address)\n {\n   if (targetm.have_probe_stack_address ())\n-    emit_insn (targetm.gen_probe_stack_address (address));\n+    {\n+      struct expand_operand ops[1];\n+      insn_code icode = targetm.code_for_probe_stack_address;\n+      create_address_operand (ops, address);\n+      maybe_legitimize_operands (icode, 0, 1, ops);\n+      expand_insn (icode, 1, ops);\n+    }\n   else\n     {\n       rtx memref = gen_rtx_MEM (word_mode, address);\n \n       MEM_VOLATILE_P (memref) = 1;\n+      memref = validize_mem (memref);\n \n       /* See if we have an insn to probe the stack.  */\n       if (targetm.have_probe_stack ())\n-        emit_insn (targetm.gen_probe_stack (memref));\n+\temit_insn (targetm.gen_probe_stack (memref));\n       else\n-        emit_move_insn (memref, const0_rtx);\n+\temit_move_insn (memref, const0_rtx);\n     }\n }\n "}, {"sha": "f7ca8340e8ffe77f046d8e0e1097a9ac9a2ca906", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "patch": "@@ -1,3 +1,8 @@\n+2018-04-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/85173\n+\t* gcc.target/arm/pr85173.c: New test.\n+\n 2018-04-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/85248"}, {"sha": "36105c96a73fb369c4612c6d902f6cf7f6d9153b", "filename": "gcc/testsuite/gcc.target/arm/pr85173.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr85173.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c35bc3e16f0e238488423e37aed5dcbb9bfde46/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr85173.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr85173.c?ref=5c35bc3e16f0e238488423e37aed5dcbb9bfde46", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/85173.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection --param stack-clash-protection-probe-interval=14\" } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+\n+__attribute__((noinline, noclone)) void\n+foo (char *p)\n+{\n+  asm volatile (\"\" : : \"r\" (p) : \"memory\");\n+}\n+\n+/* Nonconstant alloca, small local frame.  */\n+__attribute__((noinline, noclone)) void\n+f5 (int x)\n+{\n+  char locals[128];\n+  char *vla = __builtin_alloca (x);\n+  foo (vla);\n+}"}]}