{"sha": "50e9b3f17a56d615fa97b394de50f7ddb1e21868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBlOWIzZjE3YTU2ZDYxNWZhOTdiMzk0ZGU1MGY3ZGRiMWUyMTg2OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-16T23:10:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-16T23:10:36Z"}, "message": "flow.c (propagate_on_insn): Make trying to delete a prologue or epilogue insn an ICE, not a warning.\n\n\t* flow.c (propagate_on_insn): Make trying to delete a prologue\n\tor epilogue insn an ICE, not a warning.  Allow doing this if\n\tthe current function returns with stack pointer depressed.\n\nFrom-SVN: r39078", "tree": {"sha": "85ad051aa23b4802d7d4a98df66018876487047b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85ad051aa23b4802d7d4a98df66018876487047b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50e9b3f17a56d615fa97b394de50f7ddb1e21868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e9b3f17a56d615fa97b394de50f7ddb1e21868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e9b3f17a56d615fa97b394de50f7ddb1e21868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e9b3f17a56d615fa97b394de50f7ddb1e21868/comments", "author": null, "committer": null, "parents": [{"sha": "6953fdb48e46ebc61b7a4f762e19af1c6a42f36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6953fdb48e46ebc61b7a4f762e19af1c6a42f36e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6953fdb48e46ebc61b7a4f762e19af1c6a42f36e"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "f04fde68ebaf935f22a1b181b6339c52a02fef2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9b3f17a56d615fa97b394de50f7ddb1e21868/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9b3f17a56d615fa97b394de50f7ddb1e21868/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50e9b3f17a56d615fa97b394de50f7ddb1e21868", "patch": "@@ -1,5 +1,9 @@\n Tue Jan 16 17:20:43 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* flow.c (propagate_on_insn): Make trying to delete a prologue\n+\tor epilogue insn an ICE, not a warning.  Allow doing this if\n+\tthe current function returns with stack pointer depressed.\n+\n \t* combine.c (try_combine): If i3_subst_into_i2, properly check for\n \tI3 having more than one SET.\n "}, {"sha": "4d0bdff92ed310fcf5750ca0f42579ed49eb375c", "filename": "gcc/flow.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9b3f17a56d615fa97b394de50f7ddb1e21868/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9b3f17a56d615fa97b394de50f7ddb1e21868/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=50e9b3f17a56d615fa97b394de50f7ddb1e21868", "patch": "@@ -3764,35 +3764,31 @@ propagate_one_insn (pbi, insn)\n   note = find_reg_note (insn, REG_RETVAL, NULL_RTX);\n   if (flags & PROP_SCAN_DEAD_CODE)\n     {\n-      insn_is_dead = insn_dead_p (pbi, PATTERN (insn), 0,\n-\t\t\t\t  REG_NOTES (insn));\n+      insn_is_dead = insn_dead_p (pbi, PATTERN (insn), 0, REG_NOTES (insn));\n       libcall_is_dead = (insn_is_dead && note != 0\n \t\t\t && libcall_dead_p (pbi, note, insn));\n     }\n \n-  /* We almost certainly don't want to delete prologue or epilogue\n-     instructions.  Warn about probable compiler losage.  */\n-  if (insn_is_dead\n-      && reload_completed\n-      && (((HAVE_epilogue || HAVE_prologue)\n-\t   && prologue_epilogue_contains (insn))\n-\t  || (HAVE_sibcall_epilogue\n-\t      && sibcall_epilogue_contains (insn)))\n-      && find_reg_note (insn, REG_MAYBE_DEAD, NULL_RTX) == 0)\n-    {\n-      if (flags & PROP_KILL_DEAD_CODE)\n-\t{\n-\t  warning (\"ICE: would have deleted prologue/epilogue insn\");\n-\t  if (!inhibit_warnings)\n-\t    debug_rtx (insn);\n-\t}\n-      libcall_is_dead = insn_is_dead = 0;\n-    }\n-\n   /* If an instruction consists of just dead store(s) on final pass,\n      delete it.  */\n   if ((flags & PROP_KILL_DEAD_CODE) && insn_is_dead)\n     {\n+      /* If we're trying to delete a prologue or epilogue instruction\n+\t that isn't flagged as possibly being dead, something is wrong.\n+\t But if we are keeping the stack pointer depressed, we might well\n+\t be deleting insns that are used to compute the amount to update\n+\t it by, so they are fine.  */\n+      if (reload_completed\n+\t  && !(TREE_CODE (TREE_TYPE (current_function_decl)) == FUNCTION_TYPE\n+\t\t&& (TYPE_RETURNS_STACK_DEPRESSED\n+\t\t    (TREE_TYPE (current_function_decl))))\n+\t  && (((HAVE_epilogue || HAVE_prologue)\n+\t       && prologue_epilogue_contains (insn))\n+\t      || (HAVE_sibcall_epilogue\n+\t\t  && sibcall_epilogue_contains (insn)))\n+\t  && find_reg_note (insn, REG_MAYBE_DEAD, NULL_RTX) == 0)\n+\tabort ();\n+\n       /* Record sets.  Do this even for dead instructions, since they\n \t would have killed the values if they hadn't been deleted.  */\n       mark_set_regs (pbi, PATTERN (insn), insn);"}]}