{"sha": "f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmZjQzOWE1MDUwMGMwOWM3ZjgwMTZjYTAwZGZlMGJmZDExMDlhMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-06-25T17:25:31Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-06-25T17:25:31Z"}, "message": "re GNATS gcj/260 (\"Klass.class\" expression should cause Klass to be initialized)\n\n\t* parse.y (patch_incomplete_class_ref): Initialize the returned\n\tclass.  For PR gcj/260.\n\nFrom-SVN: r34695", "tree": {"sha": "d63d1f1e6cd319b39df884faaac61ea0f7642909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d63d1f1e6cd319b39df884faaac61ea0f7642909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/comments", "author": null, "committer": null, "parents": [{"sha": "6d77b53e7a196f01fc03bb481a7cb574213a4a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d77b53e7a196f01fc03bb481a7cb574213a4a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d77b53e7a196f01fc03bb481a7cb574213a4a6d"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "5b0e1a65aab1c6c226409356bcbe7f6a70e5d24a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "patch": "@@ -1,3 +1,8 @@\n+2000-06-23  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* parse.y (patch_incomplete_class_ref): Initialize the returned\n+\tclass.  For PR gcj/260.\n+\n 2000-06-21  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* except.c (prepare_eh_table_type): Use `CATCH_ALL_TYPE'."}, {"sha": "d6ece50a3dc0c50dd60f89e4e31b83457f3c623f", "filename": "gcc/java/parse.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "patch": "@@ -211,7 +211,7 @@ static tree lookup_method_invoke PARAMS ((int, tree, tree, tree, tree));\n static tree register_incomplete_type PARAMS ((int, tree, tree, tree));\n static tree obtain_incomplete_type PARAMS ((tree));\n static tree java_complete_lhs PARAMS ((tree));\n-tree java_complete_tree PARAMS ((tree));\n+static tree java_complete_tree PARAMS ((tree));\n static tree maybe_generate_pre_expand_clinit PARAMS ((tree));\n static int maybe_yank_clinit PARAMS ((tree));\n static void java_complete_expand_method PARAMS ((tree));\n@@ -13280,7 +13280,7 @@ breakdown_qualified (left, right, source)\n    local variable decls if present.\n    Same as java_complete_lhs, but does resolve static finals to values. */\n \n-tree\n+static tree\n java_complete_tree (node)\n      tree node;\n {\n@@ -15690,7 +15690,10 @@ patch_incomplete_class_ref (node)\n     return error_mark_node;\n \n   if (!flag_emit_class_files || JPRIMITIVE_TYPE_P (ref_type))\n-    return build_class_ref (ref_type);\n+    {\n+      /* A class referenced by `foo.class' is initialized.  */\n+      return build_class_init (ref_type, build_class_ref (ref_type));\n+    }\n \n   /* If we're emitting class files and we have to deal with non\n      primitive types, we invoke (and consider generating) the"}, {"sha": "3e0f83ea564f75d9cefc79cddf13cbcbab674121", "filename": "gcc/java/parse.y", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "patch": "@@ -12992,7 +12992,10 @@ patch_incomplete_class_ref (node)\n     return error_mark_node;\n \n   if (!flag_emit_class_files || JPRIMITIVE_TYPE_P (ref_type))\n-    return build_class_ref (ref_type);\n+    {\n+      /* A class referenced by `foo.class' is initialized.  */\n+      return build_class_init (ref_type, build_class_ref (ref_type));\n+    }\n \n   /* If we're emitting class files and we have to deal with non\n      primitive types, we invoke (and consider generating) the"}]}