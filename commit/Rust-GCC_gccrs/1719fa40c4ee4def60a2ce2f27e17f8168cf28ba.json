{"sha": "1719fa40c4ee4def60a2ce2f27e17f8168cf28ba", "node_id": "C_kwDOANBUbNoAKDE3MTlmYTQwYzRlZTRkZWY2MGEyY2UyZjI3ZTE3ZjgxNjhjZjI4YmE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-02T18:05:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-02T18:05:31Z"}, "message": "libiberty: Make strstr.c in libiberty ANSI compliant\n\nOn Fri, Nov 13, 2020 at 11:53:43AM -0700, Jeff Law via Gcc-patches wrote:\n>\n> On 5/1/20 6:06 PM, Seija Kijin via Gcc-patches wrote:\n> > The original code in libiberty says \"FIXME\" and then says it has not been\n> > validated to be ANSI compliant. However, this patch changes the function to\n> > match implementations that ARE compliant, and such code is in the public\n> > domain.\n> >\n> > I ran the test results, and there are no test failures.\n>\n> Thanks.\u00a0 This seems to be the standard \"simple\" strstr implementation.\u00a0\n> There's significantly faster implementations available, but I doubt it's\n> worth the effort as the version in this file only gets used if there is\n> no system strstr.c.\n\nExcept that PR109306 says the new version is non-compliant and\nis certainly slower than what we used to have.  The only problem I see\non the old version (sure, it is not very fast version) is that for\nstrstr (\"abcd\", \"\") it returned \"abcd\"+4 rather than \"abcd\" because\nstrchr in that case changed p to point to the last character and then\nstrncmp returned 0.\n\nThe question reported in PR109306 is whether memcmp is required not to\naccess characters beyond the first difference or not.\nFor all of memcmp/strcmp/strncmp, C17 says:\n\"The sign of a nonzero value returned by the comparison functions memcmp, strcmp, and strncmp\nis determined by the sign of the difference between the values of the first pair of characters (both\ninterpreted as unsigned char) that differ in the objects being compared.\"\nbut then in memcmp description says:\n\"The memcmp function compares the first n characters of the object pointed to by s1 to the first n\ncharacters of the object pointed to by s2.\"\nrather than something similar to strncmp wording:\n\"The strncmp function compares not more than n characters (characters that follow a null character\nare not compared) from the array pointed to by s1 to the array pointed to by\ns2.\"\nSo, while for strncmp it seems clearly well defined when there is zero\nterminator before reaching the n, for memcmp it is unclear if say\nint\nmemcmp (const void *s1, const void *s2, size_t n)\n{\n  int ret = 0;\n  size_t i;\n  const unsigned char *p1 = (const unsigned char *) s1;\n  const unsigned char *p2 = (const unsigned char *) s2;\n\n  for (i = n; i; i--)\n    if (p1[i - 1] != p2[i - 1])\n      ret = p1[i - 1] < p2[i - 1] ? -1 : 1;\n  return ret;\n}\nwouldn't be valid implementation (one which always compares all characters\nand just returns non-zero from the first one that differs).\n\nSo, shouldn't we just revert and handle the len == 0 case correctly?\n\nI think almost nothing really uses it, but still, the old version\nat least worked nicer with a fast strchr.\nCould as well strncmp (p + 1, s2 + 1, len - 1) if that is preferred\nbecause strchr already compared the first character.\n\n2023-04-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR other/109306\n\t* strstr.c: Revert the 2020-11-13 changes.\n\t(strstr): Return s1 if len is 0.", "tree": {"sha": "9c4d34b2cc538a2ef565caa8f6a608f0ba0543d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4d34b2cc538a2ef565caa8f6a608f0ba0543d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1719fa40c4ee4def60a2ce2f27e17f8168cf28ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1719fa40c4ee4def60a2ce2f27e17f8168cf28ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1719fa40c4ee4def60a2ce2f27e17f8168cf28ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1719fa40c4ee4def60a2ce2f27e17f8168cf28ba/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "802ab7d0db5b5aa46edc8d82526d97258c599927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802ab7d0db5b5aa46edc8d82526d97258c599927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802ab7d0db5b5aa46edc8d82526d97258c599927"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "49209e8229ffb44259877c446985fd73b4f58c31", "filename": "libiberty/strstr.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1719fa40c4ee4def60a2ce2f27e17f8168cf28ba/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1719fa40c4ee4def60a2ce2f27e17f8168cf28ba/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=1719fa40c4ee4def60a2ce2f27e17f8168cf28ba", "patch": "@@ -18,18 +18,23 @@ length, the function returns @var{string}.\n \n #include <stddef.h>\n \n-extern int memcmp (const void *, const void *, size_t);\n+extern char *strchr (const char *, int);\n+extern int strncmp (const void *, const void *, size_t);\n extern size_t strlen (const char *);\n \n char *\n strstr (const char *s1, const char *s2)\n {\n+  const char *p = s1;\n   const size_t len = strlen (s2);\n-  while (*s1)\n+\n+  if (!len)\n+    return s1;\n+\n+  for (; (p = strchr (p, *s2)) != 0; p++)\n     {\n-      if (!memcmp (s1, s2, len))\n-\treturn (char *)s1;\n-      ++s1;\n+      if (strncmp (p, s2, len) == 0)\n+\treturn (char *)p;\n     }\n   return (0);\n }"}]}