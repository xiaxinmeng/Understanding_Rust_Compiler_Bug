{"sha": "3f2960d5a51827b56ac09f3e7a6e6d29f214aef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyOTYwZDVhNTE4MjdiNTZhYzA5ZjNlN2E2ZTZkMjlmMjE0YWVmMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-04-24T22:16:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-04-24T22:16:48Z"}, "message": "re PR rtl-optimization/21163 (internal compiler error: in output_constant_pool_2, at varasm.c:3135)\n\n        PR rtl-opt/21163\n        * simplify-rtx.c (simplify_binary_operation) <IOR>: Check\n        for SCALAR_INT_MODE_P instead of not MODE_CC before returning\n        constm1_rtx.\n        <AND, LSHIFTRT, UMIN>: Use CONST0_RTX.\n        <UDIV, UMOD>: Use CONST0_RTX and CONST1_RTX.\n        <DIV, MOD>: Likewise.\n\nFrom-SVN: r98678", "tree": {"sha": "8638f0afd10ef58e9ef59ec776cc3ca7480f0ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8638f0afd10ef58e9ef59ec776cc3ca7480f0ff9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1/comments", "author": null, "committer": null, "parents": [{"sha": "98a3dad4119055bb5be8e66372b4fcf89235e660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a3dad4119055bb5be8e66372b4fcf89235e660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98a3dad4119055bb5be8e66372b4fcf89235e660"}], "stats": {"total": 120, "additions": 71, "deletions": 49}, "files": [{"sha": "1704e1c4404e63eeb22317e610b4e83f45d80f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f2960d5a51827b56ac09f3e7a6e6d29f214aef1", "patch": "@@ -1,3 +1,13 @@\n+2005-04-24  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/21163\n+\t* simplify-rtx.c (simplify_binary_operation) <IOR>: Check\n+\tfor SCALAR_INT_MODE_P instead of not MODE_CC before returning\n+\tconstm1_rtx.\n+\t<AND, LSHIFTRT, UMIN>: Use CONST0_RTX.\n+\t<UDIV, UMOD>: Use CONST0_RTX and CONST1_RTX.\n+\t<DIV, MOD>: Likewise.\n+\n 2005-04-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* collect2.c (main): Unlock the stdio streams."}, {"sha": "d7e9da6062f2a2b60380fa10ce2560ae5dfc22b8", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 61, "deletions": 49, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2960d5a51827b56ac09f3e7a6e6d29f214aef1/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3f2960d5a51827b56ac09f3e7a6e6d29f214aef1", "patch": "@@ -1624,7 +1624,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       if (((GET_CODE (op0) == NOT && rtx_equal_p (XEXP (op0, 0), op1))\n \t   || (GET_CODE (op1) == NOT && rtx_equal_p (XEXP (op1, 0), op0)))\n \t  && ! side_effects_p (op0)\n-\t  && GET_MODE_CLASS (mode) != MODE_CC)\n+\t  && SCALAR_INT_MODE_P (mode))\n \treturn constm1_rtx;\n       tem = simplify_associative_operation (code, mode, op0, op1);\n       if (tem)\n@@ -1665,8 +1665,8 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       break;\n \n     case AND:\n-      if (trueop1 == const0_rtx && ! side_effects_p (op0))\n-\treturn const0_rtx;\n+      if (trueop1 == CONST0_RTX (mode) && ! side_effects_p (op0))\n+\treturn trueop1;\n       /* If we are turning off bits already known off in OP0, we need\n \t not do an AND.  */\n       if (GET_CODE (trueop1) == CONST_INT\n@@ -1681,7 +1681,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t   || (GET_CODE (op1) == NOT && rtx_equal_p (XEXP (op1, 0), op0)))\n \t  && ! side_effects_p (op0)\n \t  && GET_MODE_CLASS (mode) != MODE_CC)\n-\treturn const0_rtx;\n+\treturn CONST0_RTX (mode);\n \n       /* Transform (and (extend X) C) into (zero_extend (and X C)) if\n \t there are no nonzero bits of C outside of X's mode.  */\n@@ -1752,18 +1752,20 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n     case UDIV:\n       /* 0/x is 0 (or x&0 if x has side-effects).  */\n-      if (trueop0 == const0_rtx)\n-\treturn side_effects_p (op1)\n-\t  ? simplify_gen_binary (AND, mode, op1, const0_rtx)\n-\t  : const0_rtx;\n-\t  /* x/1 is x.  */\n-\t  if (trueop1 == const1_rtx)\n-\t    return rtl_hooks.gen_lowpart_no_emit (mode, op0);\n-\t  /* Convert divide by power of two into shift.  */\n-\t  if (GET_CODE (trueop1) == CONST_INT\n-\t      && (val = exact_log2 (INTVAL (trueop1))) > 0)\n-\t    return simplify_gen_binary (LSHIFTRT, mode, op0, GEN_INT (val));\n-\t  break;\n+      if (trueop0 == CONST0_RTX (mode))\n+\t{\n+\t  if (side_effects_p (op1))\n+\t    return simplify_gen_binary (AND, mode, op1, trueop0);\n+\t  return trueop0;\n+\t}\n+      /* x/1 is x.  */\n+      if (trueop1 == CONST1_RTX (mode))\n+\treturn rtl_hooks.gen_lowpart_no_emit (mode, op0);\n+      /* Convert divide by power of two into shift.  */\n+      if (GET_CODE (trueop1) == CONST_INT\n+\t  && (val = exact_log2 (INTVAL (trueop1))) > 0)\n+\treturn simplify_gen_binary (LSHIFTRT, mode, op0, GEN_INT (val));\n+      break;\n \n     case DIV:\n       /* Handle floating point and integers separately.  */\n@@ -1808,12 +1810,14 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       else\n \t{\n \t  /* 0/x is 0 (or x&0 if x has side-effects).  */\n-\t  if (trueop0 == const0_rtx)\n-\t    return side_effects_p (op1)\n-\t      ? simplify_gen_binary (AND, mode, op1, const0_rtx)\n-\t      : const0_rtx;\n+\t  if (trueop0 == CONST0_RTX (mode))\n+\t    {\n+\t      if (side_effects_p (op1))\n+\t\treturn simplify_gen_binary (AND, mode, op1, trueop0);\n+\t      return trueop0;\n+\t    }\n \t  /* x/1 is x.  */\n-\t  if (trueop1 == const1_rtx)\n+\t  if (trueop1 == CONST1_RTX (mode))\n \t    return rtl_hooks.gen_lowpart_no_emit (mode, op0);\n \t  /* x/-1 is -x.  */\n \t  if (trueop1 == constm1_rtx)\n@@ -1826,34 +1830,42 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n     case UMOD:\n       /* 0%x is 0 (or x&0 if x has side-effects).  */\n-      if (trueop0 == const0_rtx)\n-\treturn side_effects_p (op1)\n-\t  ? simplify_gen_binary (AND, mode, op1, const0_rtx)\n-\t  : const0_rtx;\n-\t  /* x%1 is 0 (of x&0 if x has side-effects).  */\n-\t  if (trueop1 == const1_rtx)\n-\t    return side_effects_p (op0)\n-\t      ? simplify_gen_binary (AND, mode, op0, const0_rtx)\n-\t      : const0_rtx;\n-\t  /* Implement modulus by power of two as AND.  */\n-\t  if (GET_CODE (trueop1) == CONST_INT\n-\t      && exact_log2 (INTVAL (trueop1)) > 0)\n-\t    return simplify_gen_binary (AND, mode, op0,\n-\t\t\t\t\tGEN_INT (INTVAL (op1) - 1));\n-\t  break;\n+      if (trueop0 == CONST0_RTX (mode))\n+\t{\n+\t  if (side_effects_p (op1))\n+\t    return simplify_gen_binary (AND, mode, op1, trueop0);\n+\t  return trueop0;\n+\t}\n+      /* x%1 is 0 (of x&0 if x has side-effects).  */\n+      if (trueop1 == CONST1_RTX (mode))\n+\t{\n+\t  if (side_effects_p (op0))\n+\t    return simplify_gen_binary (AND, mode, op0, CONST0_RTX (mode));\n+\t  return CONST0_RTX (mode);\n+\t}\n+      /* Implement modulus by power of two as AND.  */\n+      if (GET_CODE (trueop1) == CONST_INT\n+\t  && exact_log2 (INTVAL (trueop1)) > 0)\n+\treturn simplify_gen_binary (AND, mode, op0,\n+\t\t\t\t    GEN_INT (INTVAL (op1) - 1));\n+      break;\n \n     case MOD:\n       /* 0%x is 0 (or x&0 if x has side-effects).  */\n-      if (trueop0 == const0_rtx)\n-\treturn side_effects_p (op1)\n-\t  ? simplify_gen_binary (AND, mode, op1, const0_rtx)\n-\t  : const0_rtx;\n-\t  /* x%1 and x%-1 is 0 (or x&0 if x has side-effects).  */\n-\t  if (trueop1 == const1_rtx || trueop1 == constm1_rtx)\n-\t    return side_effects_p (op0)\n-\t      ? simplify_gen_binary (AND, mode, op0, const0_rtx)\n-\t      : const0_rtx;\n-\t  break;\n+      if (trueop0 == CONST0_RTX (mode))\n+\t{\n+\t  if (side_effects_p (op1))\n+\t    return simplify_gen_binary (AND, mode, op1, trueop0);\n+\t  return trueop0;\n+\t}\n+      /* x%1 and x%-1 is 0 (or x&0 if x has side-effects).  */\n+      if (trueop1 == CONST1_RTX (mode) || trueop1 == constm1_rtx)\n+\t{\n+\t  if (side_effects_p (op0))\n+\t    return simplify_gen_binary (AND, mode, op0, CONST0_RTX (mode));\n+\t  return CONST0_RTX (mode);\n+\t}\n+      break;\n \n     case ROTATERT:\n     case ROTATE:\n@@ -1868,9 +1880,9 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n     case ASHIFT:\n     case LSHIFTRT:\n-      if (trueop1 == const0_rtx)\n+      if (trueop1 == CONST0_RTX (mode))\n \treturn op0;\n-      if (trueop0 == const0_rtx && ! side_effects_p (op1))\n+      if (trueop0 == CONST0_RTX (mode) && ! side_effects_p (op1))\n \treturn op0;\n       break;\n \n@@ -1902,7 +1914,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       break;\n \n     case UMIN:\n-      if (trueop1 == const0_rtx && ! side_effects_p (op0))\n+      if (trueop1 == CONST0_RTX (mode) && ! side_effects_p (op0))\n \treturn op1;\n       if (rtx_equal_p (trueop0, trueop1) && ! side_effects_p (op0))\n \treturn op0;"}]}