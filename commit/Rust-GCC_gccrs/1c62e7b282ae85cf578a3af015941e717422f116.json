{"sha": "1c62e7b282ae85cf578a3af015941e717422f116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2MmU3YjI4MmFlODVjZjU3OGEzYWYwMTU5NDFlNzE3NDIyZjExNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-01-27T02:33:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-01-27T02:33:22Z"}, "message": "system.h (CHAR_BITFIELD): Delete.\n\n\t* system.h (CHAR_BITFIELD): Delete.\n\t(BOOL_BITFIELD): New.\n\t* c-decl.c (c_scope): Use BOOL_BITFIELD.\n\t* gengtype-lex.l: Recognize BOOL_BITFIELD instead of CHAR_BITFIELD.\ncp:\n\t* cp-tree.h (language_function, lang_type_header): Use\n\tBOOL_BITFIELD.\n\t* name-lookup.h (cp_binding_level): Likewise.\n\nFrom-SVN: r76686", "tree": {"sha": "b72bec59563c306cade59d3562d4d103bc29ffb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b72bec59563c306cade59d3562d4d103bc29ffb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c62e7b282ae85cf578a3af015941e717422f116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c62e7b282ae85cf578a3af015941e717422f116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c62e7b282ae85cf578a3af015941e717422f116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c62e7b282ae85cf578a3af015941e717422f116/comments", "author": null, "committer": null, "parents": [{"sha": "ba9119ec894e7151e50cc5889fe3b6381d096e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9119ec894e7151e50cc5889fe3b6381d096e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9119ec894e7151e50cc5889fe3b6381d096e8c"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "1e9e491ca3cd72509cd728226eb5a0ca225a3e8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -1,3 +1,10 @@\n+2004-01-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h (CHAR_BITFIELD): Delete.\n+\t(BOOL_BITFIELD): New.\n+\t* c-decl.c (c_scope): Use BOOL_BITFIELD.\n+\t* gengtype-lex.l: Recognize BOOL_BITFIELD instead of CHAR_BITFIELD.\n+\n 2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/arc/arc.c (TARGET_PROMOTE_FUNCTION_ARGS): New."}, {"sha": "c0cd2193386e19fe2094c3d74331fa79323bfedc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -230,21 +230,21 @@ struct c_scope GTY(())\n \n   /* True if we are currently filling this scope with parameter\n      declarations.  */\n-  bool parm_flag : 1;\n+  BOOL_BITFIELD parm_flag : 1;\n \n   /* True if we already complained about forward parameter decls\n      in this scope.  This prevents double warnings on\n      foo (int a; int b; ...)  */\n-  bool warned_forward_parm_decls : 1;\n+  BOOL_BITFIELD warned_forward_parm_decls : 1;\n \n   /* True if this is the outermost block scope of a function body.\n      This scope contains the parameters, the local variables declared\n      in the outermost block, and all the labels (except those in\n      nested functions, or declared at block scope with __label__).  */\n-  bool function_body : 1;\n+  BOOL_BITFIELD function_body : 1;\n \n   /* True means make a BLOCK for this scope no matter what.  */\n-  bool keep : 1;\n+  BOOL_BITFIELD keep : 1;\n };\n \n /* The scope currently in effect.  */"}, {"sha": "001c992ac4da4a6eb1f355903b09a52e25adbe2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -1,3 +1,9 @@\n+2004-01-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h (language_function, lang_type_header): Use\n+\tBOOL_BITFIELD.\n+\t* name-lookup.h (cp_binding_level): Likewise.\n+\n 2004-01-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13663"}, {"sha": "0614d724be7622f54f1ce8d49d5b1ca22a714595", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -794,7 +794,7 @@ struct language_function GTY(())\n   int in_base_initializer;\n \n   /* True if this function can throw an exception.  */\n-  bool can_throw : 1;\n+  BOOL_BITFIELD can_throw : 1;\n \n   struct named_label_use_list *x_named_label_uses;\n   struct named_label_list *x_named_labels;\n@@ -1013,15 +1013,15 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n    are put in this structure to save space.  */\n struct lang_type_header GTY(())\n {\n-  CHAR_BITFIELD is_lang_type_class : 1;\n-\n-  CHAR_BITFIELD has_type_conversion : 1;\n-  CHAR_BITFIELD has_init_ref : 1;\n-  CHAR_BITFIELD has_default_ctor : 1;\n-  CHAR_BITFIELD uses_multiple_inheritance : 1;\n-  CHAR_BITFIELD const_needs_init : 1;\n-  CHAR_BITFIELD ref_needs_init : 1;\n-  CHAR_BITFIELD has_const_assign_ref : 1;\n+  BOOL_BITFIELD is_lang_type_class : 1;\n+\n+  BOOL_BITFIELD has_type_conversion : 1;\n+  BOOL_BITFIELD has_init_ref : 1;\n+  BOOL_BITFIELD has_default_ctor : 1;\n+  BOOL_BITFIELD uses_multiple_inheritance : 1;\n+  BOOL_BITFIELD const_needs_init : 1;\n+  BOOL_BITFIELD ref_needs_init : 1;\n+  BOOL_BITFIELD has_const_assign_ref : 1;\n };\n \n /* This structure provides additional information above and beyond"}, {"sha": "f9764fcfdec107c728b66f34b6487992f27c1048", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -215,7 +215,7 @@ struct cp_binding_level GTY(())\n \n     /* True if this scope is an SK_TEMPLATE_SPEC scope.  This field is\n        only valid if KIND == SK_TEMPLATE_PARMS.  */\n-    bool explicit_spec_p : 1;\n+    BOOL_BITFIELD explicit_spec_p : 1;\n \n     /* true means make a BLOCK for this level regardless of all else.  */\n     unsigned keep : 1;"}, {"sha": "2d0462beba5d24d5e8c6330c84b40785f5ce15af", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -47,7 +47,7 @@ update_lineno (const char *l, size_t len)\n \n ID\t[[:alpha:]_][[:alnum:]_]*\n WS\t[[:space:]]+\n-IWORD\tshort|long|(un)?signed|char|int|HOST_WIDE_INT|bool|size_t|CHAR_BITFIELD\n+IWORD\tshort|long|(un)?signed|char|int|HOST_WIDE_INT|bool|size_t|BOOL_BITFIELD\n ITYPE\t{IWORD}({WS}{IWORD})*\n \n %x in_struct in_struct_comment in_comment in_yacc_escape"}, {"sha": "defeed06601c33820a4676a33f4d9d8b95dd19e0", "filename": "gcc/system.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c62e7b282ae85cf578a3af015941e717422f116/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=1c62e7b282ae85cf578a3af015941e717422f116", "patch": "@@ -486,16 +486,21 @@ extern int snprintf (char *, size_t, const char *, ...);\n #define HOST_BIT_BUCKET \"/dev/null\"\n #endif\n \n-/* Be conservative and only use enum bitfields with GCC.  Likewise for\n-   char bitfields.\n+/* Be conservative and only use enum bitfields with GCC.\n    FIXME: provide a complete autoconf test for buggy enum bitfields.  */\n \n #if (GCC_VERSION > 2000)\n #define ENUM_BITFIELD(TYPE) __extension__ enum TYPE\n-#define CHAR_BITFIELD __extension__ unsigned char\n #else\n #define ENUM_BITFIELD(TYPE) unsigned int\n-#define CHAR_BITFIELD unsigned int\n+#endif\n+\n+/* We only use bool bitfields with gcc3.  Some supposedly C99\n+   compilers don't handle them correctly.  */\n+#if (GCC_VERSION >= 3000)\n+#define BOOL_BITFIELD _Bool\n+#else\n+#define BOOL_BITFIELD unsigned int\n #endif\n \n #ifndef offsetof"}]}