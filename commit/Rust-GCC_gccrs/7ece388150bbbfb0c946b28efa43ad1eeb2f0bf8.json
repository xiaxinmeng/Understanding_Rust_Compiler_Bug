{"sha": "7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjZTM4ODE1MGJiYmZiMGM5NDZiMjhlZmE0M2FkMWVlYjJmMGJmOA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-08-11T07:50:37Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-08-11T07:50:37Z"}, "message": "re PR target/49687 ([avr] Missed optimization for widening MUL)\n\n\t\n\tPR target/49687\n\t* config/avr/avr.md (smulqi3_highpart): New insn.\n\t(umulqi3_highpart): New insn.\n\t(*subqi3.ashiftrt7): New insn.\n\t(smulhi3_highpart): New expander.\n\t(umulhi3_highpart): Nex expander.\n\t(*smulhi3_highpart_call): New insn.\n\t(*umulhi3_highpart_call): New insn.\n\t(extend_u): New code attribute.\n\t(extend_prefix): Rename code attribute to extend_su.\n\t* config/avr/avr.c (avr_rtx_costs): Report costs of highpart of\n\twidening QI/HI multiply.\n\nFrom-SVN: r177648", "tree": {"sha": "336df3258cbf4c19f353f45981a4f0518f40ea77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/336df3258cbf4c19f353f45981a4f0518f40ea77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb2c2b167238f82d9103b7fb78ad24918548c245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2c2b167238f82d9103b7fb78ad24918548c245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2c2b167238f82d9103b7fb78ad24918548c245"}], "stats": {"total": 160, "additions": 118, "deletions": 42}, "files": [{"sha": "0220752fed5cea178683178ca235bff3e55355f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "patch": "@@ -1,3 +1,18 @@\n+2011-08-11  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/49687\n+\t* config/avr/avr.md (smulqi3_highpart): New insn.\n+\t(umulqi3_highpart): New insn.\n+\t(*subqi3.ashiftrt7): New insn.\n+\t(smulhi3_highpart): New expander.\n+\t(umulhi3_highpart): Nex expander.\n+\t(*smulhi3_highpart_call): New insn.\n+\t(*umulhi3_highpart_call): New insn.\n+\t(extend_u): New code attribute.\n+\t(extend_prefix): Rename code attribute to extend_su.\n+\t* config/avr/avr.c (avr_rtx_costs): Report costs of highpart of\n+\twidening QI/HI multiply.\n+\n 2011-08-11  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/50039"}, {"sha": "76542a87dc047a196174c5b03fc7bfbd0929e1fb", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "patch": "@@ -5954,6 +5954,20 @@ avr_rtx_costs (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED, int *total,\n       *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, speed);\n       return true;\n \n+    case TRUNCATE:\n+      if (AVR_HAVE_MUL\n+          && LSHIFTRT == GET_CODE (XEXP (x, 0))\n+          && MULT == GET_CODE (XEXP (XEXP (x, 0), 0))\n+          && CONST_INT_P (XEXP (XEXP (x, 0), 1)))\n+        {\n+          if (QImode == mode || HImode == mode)\n+            {\n+              *total = COSTS_N_INSNS (2);\n+              return true;\n+            }\n+        }\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "356b5095438043cabef60180e8efd8cec4cca853", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 89, "deletions": 42, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=7ece388150bbbfb0c946b28efa43ad1eeb2f0bf8", "patch": "@@ -141,10 +141,14 @@\n (define_code_iterator any_extend2 [sign_extend zero_extend])\n \n ;; Define code attributes\n-(define_code_attr extend_prefix\n+(define_code_attr extend_su\n   [(sign_extend \"s\")\n    (zero_extend \"u\")])\n \n+(define_code_attr extend_u\n+  [(sign_extend \"\")\n+   (zero_extend \"u\")])\n+\n \n ;;========================================================================\n ;; The following is used by nonlocal_goto and setjmp.\n@@ -1015,6 +1019,43 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn \"smulqi3_highpart\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(truncate:QI\n+         (lshiftrt:HI (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n+                               (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"d\")))\n+                      (const_int 8))))]\n+  \"AVR_HAVE_MUL\"\n+  \"muls %1,%2\n+\tmov %0,r1\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"3\")\n+   (set_attr \"cc\" \"clobber\")])\n+  \n+(define_insn \"umulqi3_highpart\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(truncate:QI\n+         (lshiftrt:HI (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                               (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\")))\n+                      (const_int 8))))]\n+  \"AVR_HAVE_MUL\"\n+  \"mul %1,%2\n+\tmov %0,r1\n+\tclr __zero_reg__\"\n+  [(set_attr \"length\" \"3\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+;; Used when expanding div or mod inline for some special values\n+(define_insn \"*subqi3.ashiftrt7\"\n+  [(set (match_operand:QI 0 \"register_operand\"                       \"=r\")\n+        (minus:QI (match_operand:QI 1 \"register_operand\"              \"0\")\n+                  (ashiftrt:QI (match_operand:QI 2 \"register_operand\" \"r\")\n+                               (const_int 7))))]\n+  \"\"\n+  \"sbrc %2,7\\;inc %0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n (define_insn \"mulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n@@ -1367,9 +1408,7 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-;; Operand 2 (reg:SI 18) not clobbered on the enhanced core.\n-;; All call-used registers clobbered otherwise - normal library call.\n-;;    To support widening multiplicatioon with constant we postpone\n+;; To support widening multiplicatioon with constant we postpone\n ;; expanding to the implicit library call until post combine and\n ;; prior to register allocation.  Clobber all hard registers that\n ;; might be used by the (widening) multiply until it is split and\n@@ -1535,19 +1574,12 @@\n         (reg:SI 22))]\n   \"\")\n \n-(define_expand \"mulhisi3\"\n+;; \"mulhisi3\"\n+;; \"umulhisi3\"\n+(define_expand \"<extend_u>mulhisi3\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-                   (mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n-                            (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"\"))))\n-              (clobber (reg:HI 26))\n-              (clobber (reg:DI 18))])]\n-  \"AVR_HAVE_MUL\"\n-  \"\")\n-\n-(define_expand \"umulhisi3\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-                   (mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n-                            (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"\"))))\n+                   (mult:SI (any_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n+                            (any_extend:SI (match_operand:HI 2 \"register_operand\" \"\"))))\n               (clobber (reg:HI 26))\n               (clobber (reg:DI 18))])]\n   \"AVR_HAVE_MUL\"\n@@ -1567,7 +1599,7 @@\n ;; \"*sumulqihisi3\" \"*sumulhiqisi3\" \"*sumulhihisi3\" \"*sumulqiqisi3\"\n ;; \"*ssmulqihisi3\" \"*ssmulhiqisi3\" \"*ssmulhihisi3\" \"*ssmulqiqisi3\"\n (define_insn_and_split\n-  \"*<any_extend:extend_prefix><any_extend2:extend_prefix>mul<QIHI:mode><QIHI2:mode>si3\"\n+  \"*<any_extend:extend_su><any_extend2:extend_su>mul<QIHI:mode><QIHI2:mode>si3\"\n   [(set (match_operand:SI 0 \"pseudo_register_operand\"                            \"=r\")\n         (mult:SI (any_extend:SI (match_operand:QIHI 1 \"pseudo_register_operand\"   \"r\"))\n                  (any_extend2:SI (match_operand:QIHI2 2 \"pseudo_register_operand\" \"r\"))))\n@@ -1618,6 +1650,24 @@\n       }\n   })\n \n+;; \"smulhi3_highpart\"\n+;; \"umulhi3_highpart\"\n+(define_expand \"<extend_su>mulhi3_highpart\"\n+  [(set (reg:HI 18)\n+        (match_operand:HI 1 \"nonmemory_operand\" \"\"))\n+   (set (reg:HI 26)\n+        (match_operand:HI 2 \"nonmemory_operand\" \"\"))\n+   (parallel [(set (reg:HI 24)\n+                   (truncate:HI (lshiftrt:SI (mult:SI (any_extend:SI (reg:HI 18))\n+                                                      (any_extend:SI (reg:HI 26)))\n+                                             (const_int 16))))\n+              (clobber (reg:HI 22))])\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n+        (reg:HI 24))]\n+  \"AVR_HAVE_MUL\"\n+  \"\")\n+\n+\n (define_insn \"*mulsi3_call\"\n   [(set (reg:SI 22)\n         (mult:SI (reg:SI 22)\n@@ -1628,21 +1678,27 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*mulhisi3_call\"\n+;; \"*mulhisi3_call\"\n+;; \"*umulhisi3_call\"\n+(define_insn \"*<extend_u>mulhisi3_call\"\n   [(set (reg:SI 22)\n-        (mult:SI (sign_extend:SI (reg:HI 18))\n-                 (sign_extend:SI (reg:HI 26))))]\n+        (mult:SI (any_extend:SI (reg:HI 18))\n+                 (any_extend:SI (reg:HI 26))))]\n   \"AVR_HAVE_MUL\"\n-  \"%~call __mulhisi3\"\n+  \"%~call __<extend_u>mulhisi3\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*umulhisi3_call\"\n-  [(set (reg:SI 22)\n-        (mult:SI (zero_extend:SI (reg:HI 18))\n-                 (zero_extend:SI (reg:HI 26))))]\n+;; \"*umulhi3_highpart_call\"\n+;; \"*smulhi3_highpart_call\"\n+(define_insn \"*<extend_su>mulhi3_highpart_call\"\n+  [(set (reg:HI 24)\n+        (truncate:HI (lshiftrt:SI (mult:SI (any_extend:SI (reg:HI 18))\n+                                           (any_extend:SI (reg:HI 26)))\n+                                  (const_int 16))))\n+   (clobber (reg:HI 22))]\n   \"AVR_HAVE_MUL\"\n-  \"%~call __umulhisi3\"\n+  \"%~call __<extend_u>mulhisi3\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -1655,21 +1711,12 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*muluhisi3_call\"\n-  [(set (reg:SI 22)\n-        (mult:SI (zero_extend:SI (reg:HI 26))\n-                 (reg:SI 18)))]\n-  \"AVR_HAVE_MUL\"\n-  \"%~call __muluhisi3\"\n-  [(set_attr \"type\" \"xcall\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"*mulshisi3_call\"\n+(define_insn \"*mul<extend_su>hisi3_call\"\n   [(set (reg:SI 22)\n-        (mult:SI (sign_extend:SI (reg:HI 26))\n+        (mult:SI (any_extend:SI (reg:HI 26))\n                  (reg:SI 18)))]\n   \"AVR_HAVE_MUL\"\n-  \"%~call __mulshisi3\"\n+  \"%~call __mul<extend_su>hisi3\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2269,7 +2316,7 @@\n \n ;; \"*ashluqihiqi3\"\n ;; \"*ashlsqihiqi3\"\n-(define_insn_and_split \"*ashl<extend_prefix>qihiqi3\"\n+(define_insn_and_split \"*ashl<extend_su>qihiqi3\"\n   [(set (match_operand:QI 0 \"register_operand\"                                     \"=r\")\n         (subreg:QI (ashift:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n                               (match_operand:QI 2 \"register_operand\"                \"r\"))\n@@ -2287,7 +2334,7 @@\n \n ;; \"*ashluqihiqi3.mem\"\n ;; \"*ashlsqihiqi3.mem\"\n-(define_insn_and_split \"*ashl<extend_prefix>qihiqi3.mem\"\n+(define_insn_and_split \"*ashl<extend_su>qihiqi3.mem\"\n   [(set (match_operand:QI 0 \"memory_operand\" \"=m\")\n         (subreg:QI (ashift:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n                               (match_operand:QI 2 \"register_operand\" \"r\"))\n@@ -2301,7 +2348,7 @@\n    (set (match_dup 0)\n         (match_dup 3))]\n   {\n-    operands[3] = force_reg (QImode, operands[0]);\n+    operands[3] = gen_reg_rtx (QImode);\n   })\n \n ;; Similar.\n@@ -2320,7 +2367,7 @@\n         (match_dup 4))]\n   {\n     operands[3] = simplify_gen_subreg (QImode, operands[1], HImode, 0);\n-    operands[4] = force_reg (QImode, operands[0]);\n+    operands[4] = gen_reg_rtx (QImode);\n   })\n \n ;; High part of 16-bit shift is unused after the instruction:"}]}