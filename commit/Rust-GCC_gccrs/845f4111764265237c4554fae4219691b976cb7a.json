{"sha": "845f4111764265237c4554fae4219691b976cb7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1ZjQxMTE3NjQyNjUyMzdjNDU1NGZhZTQyMTk2OTFiOTc2Y2I3YQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-15T22:01:26Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-15T22:01:26Z"}, "message": "sh.c: Update function attribute comments.\n\n\t* config/sh/sh.c: Update function attribute comments.\n\t* doc/extend.texi (function_vector): Rephrase SH2A specific part.\n\t(nosave_low_regs, renesas, trapa_handler): Document SH specific\n\tattributes.\n\t(sp_switch, trap_exit): Add to index.\n\nFrom-SVN: r192479", "tree": {"sha": "bf06e8efd96103cfe9f441fc86037e5f6f0c119e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf06e8efd96103cfe9f441fc86037e5f6f0c119e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/845f4111764265237c4554fae4219691b976cb7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845f4111764265237c4554fae4219691b976cb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845f4111764265237c4554fae4219691b976cb7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845f4111764265237c4554fae4219691b976cb7a/comments", "author": null, "committer": null, "parents": [{"sha": "e67ae07334003536ec8c29f656b8ef5c863bba3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67ae07334003536ec8c29f656b8ef5c863bba3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67ae07334003536ec8c29f656b8ef5c863bba3e"}], "stats": {"total": 90, "additions": 64, "deletions": 26}, "files": [{"sha": "765f6b403e823d53897753691a11ae6013556036", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845f4111764265237c4554fae4219691b976cb7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845f4111764265237c4554fae4219691b976cb7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=845f4111764265237c4554fae4219691b976cb7a", "patch": "@@ -1,3 +1,11 @@\n+2012-10-15  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.c: Update function attribute comments.\n+\t* doc/extend.texi (function_vector): Rephrase SH2A specific part.\n+\t(nosave_low_regs, renesas, trapa_handler): Document SH specific\n+\tattributes.\n+\t(sp_switch, trap_exit): Add to index.\n+\n 2012-10-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* config.gcc: Match arm*-*-linux-* for ARM Linux/GNU."}, {"sha": "bc4eb8bf259d58a56a03f2a555f7a9f81ef44052", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845f4111764265237c4554fae4219691b976cb7a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845f4111764265237c4554fae4219691b976cb7a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=845f4111764265237c4554fae4219691b976cb7a", "patch": "@@ -9451,30 +9451,42 @@ sh_insert_attributes (tree node, tree *attributes)\n   return;\n }\n \n-/* Supported attributes:\n+/*------------------------------------------------------------------------------\n+/* Target specific attributes\n+  Supported attributes are:\n+\n+   * interrupt_handler\n+\tSpecifies this function is an interrupt handler.\n \n-   interrupt_handler -- specifies this function is an interrupt handler.\n+   * trapa_handler\n+\tLike interrupt_handler, but don't save all registers.\n \n-   trapa_handler - like above, but don't save all registers.\n+   * sp_switch\n+\tSpecifies an alternate stack for an interrupt handler to run on.\n \n-   sp_switch -- specifies an alternate stack for an interrupt handler\n-   to run on.\n+   * trap_exit\n+\tUse a trapa to exit an interrupt function instead of rte.\n \n-   trap_exit -- use a trapa to exit an interrupt function instead of\n-   an rte instruction.\n+   * nosave_low_regs\n+\tDon't save r0..r7 in an interrupt handler function.\n+\tThis is useful on SH3* and SH4*, which have a separate set of low\n+\tregs for user and privileged modes.\n+\tThis is mainly to be used for non-reentrant interrupt handlers (i.e.\n+\tthose that run with interrupts disabled and thus can't be\n+\tinterrupted thenselves).\n \n-   nosave_low_regs - don't save r0..r7 in an interrupt handler.\n-     This is useful on the SH3 and upwards,\n-     which has a separate set of low regs for User and Supervisor modes.\n-     This should only be used for the lowest level of interrupts.  Higher levels\n-     of interrupts must save the registers in case they themselves are\n-     interrupted.\n+   * renesas\n+\tUse Renesas calling/layout conventions (functions and structures).\n \n-   renesas -- use Renesas calling/layout conventions (functions and\n-   structures).\n+   * resbank\n+\tIn case of an interrupt handler function, use a register bank to\n+\tsave registers R0-R14, MACH, MACL, GBR and PR.\n+\tThis is available only on SH2A targets.\n \n-   resbank -- In case of an ISR, use a register bank to save registers\n-   R0-R14, MACH, MACL, GBR and PR.  This is useful only on SH2A targets.\n+   * function_vector\n+\tDeclares a function to be called using the TBR relative addressing\n+\tmode.  Takes an argument that specifies the slot number in the table\n+\twhere this function can be looked up by the JSR/N @@(disp8,TBR) insn.\n */\n \n /* Handle a 'resbank' attribute.  */"}, {"sha": "3a2d6a874dd031746406279a931790e529835d6a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845f4111764265237c4554fae4219691b976cb7a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845f4111764265237c4554fae4219691b976cb7a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=845f4111764265237c4554fae4219691b976cb7a", "patch": "@@ -2682,17 +2682,16 @@ function through the function vector will reduce code size, however;\n the function vector has a limited size (maximum 128 entries on the H8/300\n and 64 entries on the H8/300H and H8S) and shares space with the interrupt vector.\n \n-In SH2A target, this attribute declares a function to be called using the\n+On SH2A targets, this attribute declares a function to be called using the\n TBR relative addressing mode.  The argument to this attribute is the entry\n number of the same function in a vector table containing all the TBR\n-relative addressable functions.  For the successful jump, register TBR\n-should contain the start address of this TBR relative vector table.\n-In the startup routine of the user application, user needs to care of this\n-TBR register initialization.  The TBR relative vector table can have at\n-max 256 function entries.  The jumps to these functions will be generated\n-using a SH2A specific, non delayed branch instruction JSR/N @@(disp8,TBR).\n-You must use GAS and GLD from GNU binutils version 2.7 or later for\n-this attribute to work correctly.\n+relative addressable functions.  For correct operation the TBR must be setup\n+accordingly to point to the start of the vector table before any functions with\n+this attribute are invoked.  Usually a good place to do the initialization is\n+the startup routine.  The TBR relative vector table can have at max 256 function\n+entries.  The jumps to these functions will be generated using a SH2A specific,\n+non delayed branch instruction JSR/N @@(disp8,TBR).  You must use GAS and GLD\n+from GNU binutils version 2.7 or later for this attribute to work correctly.\n \n Please refer the example of M16C target, to see the use of this\n attribute while declaring a function,\n@@ -3251,6 +3250,13 @@ with the notable exceptions of @code{qsort} and @code{bsearch} that\n take function pointer arguments.  The @code{nothrow} attribute is not\n implemented in GCC versions earlier than 3.3.\n \n+@item nosave_low_regs\n+@cindex @code{nosave_low_regs} attribute\n+Use this attribute on SH targets to indicate that an @code{interrupt_handler}\n+function should not save and restore registers R0..R7.  This can be used on SH3*\n+and SH4* targets which have a second R0..R7 register bank for non-reentrant\n+interrupt handlers.\n+\n @item optimize\n @cindex @code{optimize} function attribute\n The @code{optimize} attribute is used to specify that a function is to\n@@ -3428,6 +3434,11 @@ prologue and epilogue that realigns the runtime stack if necessary.\n This supports mixing legacy codes that run with a 4-byte aligned stack\n with modern codes that keep a 16-byte stack for SSE compatibility.\n \n+@item renesas\n+@cindex @code{renesas} attribute\n+On SH targets this attribute specifies that the function or struct follows the\n+Renesas ABI.\n+\n @item resbank\n @cindex @code{resbank} attribute\n On the SH2A target, this attribute enables the high-speed register\n@@ -3538,6 +3549,7 @@ If both @code{signal} and @code{interrupt} are specified for the same\n function, @code{signal} will be silently ignored.\n \n @item sp_switch\n+@cindex @code{sp_switch} attribute\n Use this attribute on the SH to indicate an @code{interrupt_handler}\n function should switch to an alternate stack.  It expects a string\n argument that names a global variable holding the address of the\n@@ -3929,10 +3941,16 @@ on data in the tiny data section.  Note the tiny data area is limited to\n slightly under 32kbytes of data.\n \n @item trap_exit\n+@cindex @code{trap_exit} attribute\n Use this attribute on the SH for an @code{interrupt_handler} to return using\n @code{trapa} instead of @code{rte}.  This attribute expects an integer\n argument specifying the trap number to be used.\n \n+@item trapa_handler\n+@cindex @code{trapa_handler} attribute\n+On SH targets this function attribute is similar to @code{interrupt_handler}\n+but it does not save and restore all registers.\n+\n @item unused\n @cindex @code{unused} attribute.\n This attribute, attached to a function, means that the function is meant"}]}