{"sha": "e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViZjhkZWU1NmFhZjRjNDg5YTFmM2NlY2EwNGE4ZmNkMWQyNjY1YQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-26T19:10:00Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-26T19:10:00Z"}, "message": "re PR fortran/89496 (gcc/fortran/trans-types.c:3015:9: runtime error: member access within null pointer of type 'struct gfc_formal_arglist')\n\n2019-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/89496\n\t* trans-types.c (get_formal_from_actual_arglist): If\n\tthe actual arglist has no expression, the corresponding\n\tformal arglist is an alternate return.\n\n2019-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/89496\n\t* gfortran.dg/altreturn_9_0.f90: New file.\n\t* gfortran.dg/altreturn_9_1.f90: New file.\n\nFrom-SVN: r269226", "tree": {"sha": "d91a3ddd87b0b57de059fb05f1b7671cf07e82b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d91a3ddd87b0b57de059fb05f1b7671cf07e82b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/comments", "author": null, "committer": null, "parents": [{"sha": "140a0bddcc12f14fcbc914e117ccf79cc6dd16cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140a0bddcc12f14fcbc914e117ccf79cc6dd16cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140a0bddcc12f14fcbc914e117ccf79cc6dd16cc"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "2646608faae45b9c9034b53d875ec699489432c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "patch": "@@ -1,3 +1,10 @@\n+2019-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/89496\n+\t* trans-types.c (get_formal_from_actual_arglist): If\n+\tthe actual arglist has no expression, the corresponding\n+\tformal arglist is an alternate return.\n+\n 2019-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/43210\n@@ -8,7 +15,7 @@\n \n \tPR fortran/89174\n \t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Add is_mold\n-\tto garguments. If we are dealing with a MOLD, call\n+\tto arguments. If we are dealing with a MOLD, call\n \tgfc_expr_to_initialize().\n \t* trans-stmt.c (gfc_trans_allocate): For MOLD, pass is_mold=true\n \tto gfc_find_and_cut_at_last_class_ref."}, {"sha": "58102bafed895ace49d729bb487901c39bc03626", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "patch": "@@ -2988,9 +2988,9 @@ get_formal_from_actual_arglist (gfc_symbol *sym, gfc_actual_arglist *actual_args\n   f = &sym->formal;\n   for (a = actual_args; a != NULL; a = a->next)\n     {\n+      (*f) = gfc_get_formal_arglist ();\n       if (a->expr)\n \t{\n-\t  (*f) = gfc_get_formal_arglist ();\n \t  snprintf (name, GFC_MAX_SYMBOL_LEN, \"_formal_%d\", var_num ++);\n \t  gfc_get_symbol (name, NULL, &s);\n \t  if (a->expr->ts.type == BT_PROCEDURE)\n@@ -3012,6 +3012,9 @@ get_formal_from_actual_arglist (gfc_symbol *sym, gfc_actual_arglist *actual_args\n \t  s->attr.intent = INTENT_UNKNOWN;\n \t  (*f)->sym = s;\n \t}\n+      else  /* If a->expr is NULL, this is an alternate rerturn.  */\n+\t(*f)->sym = NULL;\n+\n       f = &((*f)->next);\n     }\n }"}, {"sha": "2f700d73bba5df2a07123971dcd8fe35c7447974", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "patch": "@@ -1,3 +1,9 @@\n+2019-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/89496\n+\t* gfortran.dg/altreturn_9_0.f90: New file.\n+\t* gfortran.dg/altreturn_9_1.f90: New file.\n+\n 2019-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89481"}, {"sha": "58715c7db403f0a20cb776d5f8210cff986ac843", "filename": "gcc/testsuite/gfortran.dg/altreturn_9_0.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_9_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_9_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_9_0.f90?ref=e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do  run }\n+! { dg-options -std=gnu }\n+! { dg-additional-sources altreturn_9_1.f90 }\n+! PR 89496 - wrong type for alternate return was generated\n+\n+program main\n+  call sub(10, *10, 20)\n+  stop 1\n+10 continue\n+end program main"}, {"sha": "9549869a6beeba94c6d8ebe1d37867054efd2bb4", "filename": "gcc/testsuite/gfortran.dg/altreturn_9_1.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_9_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_9_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_9_1.f90?ref=e5bf8dee56aaf4c489a1f3ceca04a8fcd1d2665a", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! { dg-options \"-std=gnu\" }\n+! See altreturn_9_0.f90\n+subroutine sub(i, *, j)\n+  if (i == 10 .and. j == 20) return 1\n+  return\n+end subroutine sub"}]}