{"sha": "8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5MzJiZTNlMTUwMjQ4NWU5ZmI3ODY5NWI3YzJjNGJkYjc2NTNjZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-05-31T15:51:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-31T15:51:42Z"}, "message": "tm.texi (TARGET_GET_PCH_VALIDITY, [...]): Tweak the documentation to make it more future-proof.\n\n\t* doc/tm.texi (TARGET_GET_PCH_VALIDITY, TARGET_PCH_VALID_P): Tweak\n\tthe documentation to make it more future-proof.\n\t(TARGET_CHECK_PCH_TARGET_FLAGS): Document this new hook.\n\t* target.h (gcc_target): Add check_pch_target_flags.\n\t* target-def.h (TARGET_CHECK_PCH_TARGET_FLAGS): New macro.\n\t(TARGET_INITIALIZER): Include it.\n\t* toplev.c (default_pch_valid_p): Use targetm.check_pch_target_flags.\n\t* config/sh/sh.h (sh_pch_valid_p): Delete.\n\t* config/sh/sh.c (TARGET_PCH_VALID_P, sh_pch_valid_p): Delete.\n\t(sh_check_pch_target_flags): New function.\n\t(TARGET_CHECK_PCH_TARGET_FLAGS): Override default.\n\nFrom-SVN: r100392", "tree": {"sha": "6493f351baf9a917bfbcf8a8a1c3c4db18abd2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6493f351baf9a917bfbcf8a8a1c3c4db18abd2ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/comments", "author": null, "committer": null, "parents": [{"sha": "4ea73bfac370705eaf74e204264bf994c51bdfd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea73bfac370705eaf74e204264bf994c51bdfd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea73bfac370705eaf74e204264bf994c51bdfd9"}], "stats": {"total": 149, "additions": 63, "deletions": 86}, "files": [{"sha": "fd97205019b498b80dc961eb226e4a0b464fe7a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "patch": "@@ -1,3 +1,17 @@\n+2005-05-31  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* doc/tm.texi (TARGET_GET_PCH_VALIDITY, TARGET_PCH_VALID_P): Tweak\n+\tthe documentation to make it more future-proof.\n+\t(TARGET_CHECK_PCH_TARGET_FLAGS): Document this new hook.\n+\t* target.h (gcc_target): Add check_pch_target_flags.\n+\t* target-def.h (TARGET_CHECK_PCH_TARGET_FLAGS): New macro.\n+\t(TARGET_INITIALIZER): Include it.\n+\t* toplev.c (default_pch_valid_p): Use targetm.check_pch_target_flags.\n+\t* config/sh/sh.h (sh_pch_valid_p): Delete.\n+\t* config/sh/sh.c (TARGET_PCH_VALID_P, sh_pch_valid_p): Delete.\n+\t(sh_check_pch_target_flags): New function.\n+\t(TARGET_CHECK_PCH_TARGET_FLAGS): Override default.\n+\n 2005-05-31  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \t* fold-const.c (extract_array_ref): Handle more cases,"}, {"sha": "582fe3f52b26ead40ac959e0d2e29e7c17f57eee", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 64, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "patch": "@@ -228,6 +228,7 @@ static tree sh_handle_trap_exit_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_renesas_attribute (tree *, tree, tree, int, bool *);\n static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sh_insert_attributes (tree, tree *);\n+static const char *sh_check_pch_target_flags (int);\n static int sh_adjust_cost (rtx, rtx, rtx, int);\n static int sh_issue_rate (void);\n static int sh_dfa_new_cycle (FILE *, int, rtx, int, int, int *sort_p);\n@@ -467,8 +468,8 @@ static int hard_regs_intersect_p (HARD_REG_SET *, HARD_REG_SET *);\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P sh_vector_mode_supported_p\n \n-#undef TARGET_PCH_VALID_P\n-#define TARGET_PCH_VALID_P sh_pch_valid_p\n+#undef TARGET_CHECK_PCH_TARGET_FLAGS\n+#define TARGET_CHECK_PCH_TARGET_FLAGS sh_check_pch_target_flags\n \n #undef TARGET_DWARF_CALLING_CONVENTION\n #define TARGET_DWARF_CALLING_CONVENTION sh_dwarf_calling_convention\n@@ -7515,36 +7516,11 @@ sh_cfun_interrupt_handler_p (void)\n \t  != NULL_TREE);\n }\n \n-/* Like default_pch_valid_p, but only check certain target_flags.  */\n-const char *\n-sh_pch_valid_p (const void *data_p, size_t len)\n-{\n-#ifdef TARGET_OPTIONS\n-  /* ??? We have a copy of this in toplev.c, but it is static.  */\n-  static const struct\n-    {\n-      const char *const prefix;\n-      const char **const variable;\n-      const char *const description;\n-      const char *const value;\n-    }\n-  target_options[] = TARGET_OPTIONS;\n-#endif\n+/* Implement TARGET_CHECK_PCH_TARGET_FLAGS.  */\n \n-  const char *data = (const char *)data_p;\n-  const char *flag_that_differs = NULL;\n-  size_t i;\n-  int old_flags;\n-\n-  /* -fpic and -fpie also usually make a PCH invalid.  */\n-  if (data[0] != flag_pic)\n-    return _(\"created and used with different settings of -fpic\");\n-  if (data[1] != flag_pie)\n-    return _(\"created and used with different settings of -fpie\");\n-  data += 2;\n-\n-  /* Check target_flags.  */\n-  memcpy (&old_flags, data, sizeof (target_flags));\n+static const char *\n+sh_check_pch_target_flags (int old_flags)\n+{\n   if ((old_flags ^ target_flags) & (MASK_SH1 | MASK_SH2 | MASK_SH3\n \t\t\t\t    | MASK_SH_E | MASK_HARD_SH4\n \t\t\t\t    | MASK_FPU_SINGLE | MASK_SH4))\n@@ -7553,40 +7529,7 @@ sh_pch_valid_p (const void *data_p, size_t len)\n     return _(\"created and used with different ABIs\");\n   if ((old_flags ^ target_flags) & MASK_LITTLE_ENDIAN)\n     return _(\"created and used with different endianness\");\n-\n-  data += sizeof (target_flags);\n-  len -= sizeof (target_flags);\n-\n-  /* Check string options.  */\n-#ifdef TARGET_OPTIONS\n-  for (i = 0; i < ARRAY_SIZE (target_options); i++)\n-    {\n-      const char *str = *target_options[i].variable;\n-      size_t l;\n-      if (! str)\n-\tstr = \"\";\n-      l = strlen (str) + 1;\n-      if (len < l || memcmp (data, str, l) != 0)\n-\t{\n-\t  flag_that_differs = target_options[i].prefix;\n-\t  goto make_message;\n-\t}\n-      data += l;\n-      len -= l;\n-    }\n-#endif\n-\n   return NULL;\n-\n- make_message:\n-  {\n-    char *r;\n-    asprintf (&r, _(\"created and used with differing settings of '-m%s'\"),\n-\t\t  flag_that_differs);\n-    if (r == NULL)\n-      return _(\"out of memory\");\n-    return r;\n-  }\n }\n \f\n /* Predicates used by the templates.  */"}, {"sha": "a09f503f75436fd3c625964e80037dca1815c279", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "patch": "@@ -8668,24 +8668,32 @@ Default: empty.\n @section Parameters for Precompiled Header Validity Checking\n @cindex parameters, precompiled headers\n \n-@deftypefn {Target Hook} void * TARGET_GET_PCH_VALIDITY (size_t * @var{sz})\n-Define this hook if your target needs to check a different collection\n-of flags than the default, which is every flag defined by\n-@code{TARGET_SWITCHES} and @code{TARGET_OPTIONS}.  It should return\n-some data which will be saved in the PCH file and presented to\n-@code{TARGET_PCH_VALID_P} later; it should set @code{SZ} to the size\n-of the data.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} const char * TARGET_PCH_VALID_P (const void * @var{data}, size_t @var{sz})\n-Define this hook if your target needs to check a different collection of\n-flags than the default, which is every flag defined by @code{TARGET_SWITCHES}\n-and @code{TARGET_OPTIONS}.  It is given data which came from\n-@code{TARGET_GET_PCH_VALIDITY} (in this version of this compiler, so there\n-is no need for extensive validity checking).  It returns @code{NULL} if\n-it is safe to load a PCH file with this data, or a suitable error message\n-if not.  The error message will be presented to the user, so it should\n-be localized.\n+@deftypefn {Target Hook} void *TARGET_GET_PCH_VALIDITY (size_t *@var{sz})\n+This hook returns the data needed by @code{TARGET_PCH_VALID_P} and sets\n+@samp{*@var{sz}} to the size of the data in bytes.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} const char *TARGET_PCH_VALID_P (const void *@var{data}, size_t @var{sz})\n+This hook checks whether the options used to create a PCH file are\n+compatible with the current settings.  It returns @code{NULL}\n+if so and a suitable error message if not.  Error messages will\n+be presented to the user and must be localized using @samp{_(@var{msg})}.\n+\n+@var{data} is the data that was returned by @code{TARGET_GET_PCH_VALIDITY}\n+when the PCH file was created and @var{sz} is the size of that data in bytes.\n+It's safe to assume that the data was created by the same version of the\n+compiler, so no format checking is needed.\n+\n+The default definition of @code{default_pch_valid_p} should be\n+suitable for most targets.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} const char *TARGET_CHECK_PCH_TARGET_FLAGS (int @var{pch_flags})\n+If this hook is nonnull, the default implementation of\n+@code{TARGET_PCH_VALID_P} will use it to check for compatible values\n+of @code{target_flags}.  @var{pch_flags} specifies the value that\n+@code{target_flags} had when the PCH file was created.  The return\n+value is the same as for @code{TARGET_PCH_VALID_P}.\n @end deftypefn\n \n @node C++ ABI"}, {"sha": "f5d98f95e09018b3a82f7458edd641018729b274", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "patch": "@@ -379,6 +379,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_GET_PCH_VALIDITY default_get_pch_validity\n #define TARGET_PCH_VALID_P default_pch_valid_p\n+#define TARGET_CHECK_PCH_TARGET_FLAGS NULL\n \n #define TARGET_DEFAULT_SHORT_ENUMS hook_bool_void_false\n \n@@ -551,6 +552,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_GIMPLIFY_VA_ARG_EXPR,\t\t\t\\\n   TARGET_GET_PCH_VALIDITY,\t\t\t\\\n   TARGET_PCH_VALID_P,\t\t\t\t\\\n+  TARGET_CHECK_PCH_TARGET_FLAGS,\t\t\\\n   TARGET_DEFAULT_SHORT_ENUMS,\t\t\t\\\n   TARGET_BUILTIN_SETJMP_FRAME_VALUE,\t\t\\\n   TARGET_MD_ASM_CLOBBERS,\t\t\t\\"}, {"sha": "1527819d916fe66aad719187e3ceebf1d84373fa", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "patch": "@@ -485,6 +485,11 @@ struct gcc_target\n   void * (* get_pch_validity) (size_t *);\n   const char * (* pch_valid_p) (const void *, size_t);\n \n+  /* If nonnull, this function checks whether a PCH file with the\n+     given set of target flags can be used.  It returns NULL if so,\n+     otherwise it returns an error message.  */\n+  const char *(*check_pch_target_flags) (int);\n+\n   /* True if the compiler should give an enum type only as many\n      bytes as it takes to represent the range of possible values of\n      that type.  */"}, {"sha": "196595c680551d8d3eeed87da8098fa21e9223e9", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d932be3e1502485e9fb78695b7c2c4bdb7653cd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8d932be3e1502485e9fb78695b7c2c4bdb7653cd", "patch": "@@ -1487,6 +1487,7 @@ default_pch_valid_p (const void *data_p, size_t len)\n   const char *data = (const char *)data_p;\n   const char *flag_that_differs = NULL;\n   size_t i;\n+  int tf;\n \n   /* -fpic and -fpie also usually make a PCH invalid.  */\n   if (data[0] != flag_pic)\n@@ -1496,11 +1497,15 @@ default_pch_valid_p (const void *data_p, size_t len)\n   data += 2;\n \n   /* Check target_flags.  */\n-  if (memcmp (data, &target_flags, sizeof (target_flags)) != 0)\n+  memcpy (&tf, data, sizeof (target_flags));\n+  if (targetm.check_pch_target_flags)\n+    {\n+      const char *r = targetm.check_pch_target_flags (tf);\n+      if (r != NULL)\n+\treturn r;\n+    }\n+  else if (tf != target_flags)\n     {\n-      int tf;\n-\n-      memcpy (&tf, data, sizeof (target_flags));\n #ifdef TARGET_SWITCHES\n       for (i = 0; i < ARRAY_SIZE (target_switches); i++)\n \t{"}]}