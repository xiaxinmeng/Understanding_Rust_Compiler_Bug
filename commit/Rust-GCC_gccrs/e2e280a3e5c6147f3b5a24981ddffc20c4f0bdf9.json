{"sha": "e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlMjgwYTNlNWM2MTQ3ZjNiNWEyNDk4MWRkZmZjMjBjNGYwYmRmOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-03T06:40:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-03T06:40:50Z"}, "message": "Don't crash on large composite literal array index.\n\nFrom-SVN: r170645", "tree": {"sha": "c15e878094f5a7e884b5219383e170a3b720743f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c15e878094f5a7e884b5219383e170a3b720743f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9/comments", "author": null, "committer": null, "parents": [{"sha": "5a34af783af0043a094460492c1f65b27452a264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a34af783af0043a094460492c1f65b27452a264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a34af783af0043a094460492c1f65b27452a264"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "075ba6468fe6a897bbdbd0b59ff16edb6e68d9f0", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=e2e280a3e5c6147f3b5a24981ddffc20c4f0bdf9", "patch": "@@ -11885,6 +11885,7 @@ Composite_literal_expression::lower_array(Type* type)\n \t{\n \t  mpz_t ival;\n \t  mpz_init(ival);\n+\n \t  Type* dummy;\n \t  if (!index_expr->integer_constant_value(true, ival, &dummy))\n \t    {\n@@ -11893,20 +11894,45 @@ Composite_literal_expression::lower_array(Type* type)\n \t\t       \"index expression is not integer constant\");\n \t      return Expression::make_error(location);\n \t    }\n+\n \t  if (mpz_sgn(ival) < 0)\n \t    {\n \t      mpz_clear(ival);\n \t      error_at(index_expr->location(), \"index expression is negative\");\n \t      return Expression::make_error(location);\n \t    }\n+\n \t  index = mpz_get_ui(ival);\n \t  if (mpz_cmp_ui(ival, index) != 0)\n \t    {\n \t      mpz_clear(ival);\n \t      error_at(index_expr->location(), \"index value overflow\");\n \t      return Expression::make_error(location);\n \t    }\n+\n+\t  Named_type* ntype = Type::lookup_integer_type(\"int\");\n+\t  Integer_type* inttype = ntype->integer_type();\n+\t  mpz_t max;\n+\t  mpz_init_set_ui(max, 1);\n+\t  mpz_mul_2exp(max, max, inttype->bits() - 1);\n+\t  bool ok = mpz_cmp(ival, max) < 0;\n+\t  mpz_clear(max);\n+\t  if (!ok)\n+\t    {\n+\t      mpz_clear(ival);\n+\t      error_at(index_expr->location(), \"index value overflow\");\n+\t      return Expression::make_error(location);\n+\t    }\n+\n \t  mpz_clear(ival);\n+\n+\t  // FIXME: Our representation isn't very good; this avoids\n+\t  // thrashing.\n+\t  if (index > 0x1000000)\n+\t    {\n+\t      error_at(index_expr->location(), \"index too large for compiler\");\n+\t      return Expression::make_error(location);\n+\t    }\n \t}\n \n       if (index == vals.size())"}]}