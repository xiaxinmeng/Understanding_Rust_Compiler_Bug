{"sha": "e7f62ad38b97557bb103c16844ef69cd98af7ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmNjJhZDM4Yjk3NTU3YmIxMDNjMTY4NDRlZjY5Y2Q5OGFmN2VhMQ==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@s-direktnet.de", "date": "1998-05-24T00:44:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-24T00:44:00Z"}, "message": "Makefile.in (ENQUIRE_CFLAGS, [...]): Move down to the end of the Makefile.\n\n\t* Makefile.in (ENQUIRE_CFLAGS, ENQUIRE_LDFLAGS): Move down to the end\n\tof the Makefile.\n\t(FLOAT_H_TEST): Likewise.\n\t(ENQUIRE): Likewise.\n\t(float.h-nat): Likewise.\n\t(float.h-cross): Likewise.\n\t(enquire): Likewise.\n\t(enquire.o): Likewise.\n\t(stmp-int-hdrs): Fix comment about enquire; depend upon gfloat.h.\n\t(stmp-headers): Move actions to stmp-int-hdrs, retaining only a\n\tno-op.\n\t(FLOAT_H): Remove old float.h-nat version; move current definition\n\tto CROSS_FLOAT_H location.\n\t(all.cross): Remove comments about enquire stuff.\n\t* Makefile.in (all.cross): Swap $(LIBGCC) and $(STMP_FIXPROTO).\n\t(rest.encap): Likewise.\n\t(libgcc2.ready): Depend upon $(STMP_FIXPROTO)\n\nFrom-SVN: r20000", "tree": {"sha": "bbc504c0dfa454451058e2f758c34205a2e81d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbc504c0dfa454451058e2f758c34205a2e81d6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f62ad38b97557bb103c16844ef69cd98af7ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f62ad38b97557bb103c16844ef69cd98af7ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f62ad38b97557bb103c16844ef69cd98af7ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f62ad38b97557bb103c16844ef69cd98af7ea1/comments", "author": null, "committer": null, "parents": [{"sha": "d7336000fac8e9f1377dcb9b7b707b023ef6a9c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7336000fac8e9f1377dcb9b7b707b023ef6a9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7336000fac8e9f1377dcb9b7b707b023ef6a9c5"}], "stats": {"total": 152, "additions": 86, "deletions": 66}, "files": [{"sha": "8b7b64611228f2f880f2a8ffe3a0633cdf0fe91f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f62ad38b97557bb103c16844ef69cd98af7ea1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f62ad38b97557bb103c16844ef69cd98af7ea1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7f62ad38b97557bb103c16844ef69cd98af7ea1", "patch": "@@ -27,8 +27,24 @@ Sat May 23 23:35:14 1998  Jeffrey A Law  (law@cygnus.com)\n \n 1998-05-23  Manfred Hollstein  <manfred@s-direktnet.de>\n \n+\t* Makefile.in (ENQUIRE_CFLAGS, ENQUIRE_LDFLAGS): Move down to the end\n+\tof the Makefile.\n+\t(FLOAT_H_TEST): Likewise.\n+\t(ENQUIRE): Likewise.\n+\t(float.h-nat): Likewise.\n+\t(float.h-cross): Likewise.\n+\t(enquire): Likewise.\n+\t(enquire.o): Likewise.\n+\t(stmp-int-hdrs): Fix comment about enquire; depend upon gfloat.h.\n+\t(stmp-headers): Move actions to stmp-int-hdrs, retaining only a\n+\tno-op.\n+\t(FLOAT_H): Remove old float.h-nat version; move current definition\n+\tto CROSS_FLOAT_H location.\n+\t(all.cross): Remove comments about enquire stuff.\n+\n \t* Makefile.in (all.cross): Swap $(LIBGCC) and $(STMP_FIXPROTO).\n \t(rest.encap): Likewise.\n+\t(libgcc2.ready): Depend upon $(STMP_FIXPROTO)\n \n \t* toplev.h (tree_node): Provide global declaration to avoid\n \t`limited scope' warnings."}, {"sha": "c12b19da99b9f1dc46059cadf0cdfcd4594ade96", "filename": "gcc/Makefile.in", "status": "modified", "additions": 70, "deletions": 66, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f62ad38b97557bb103c16844ef69cd98af7ea1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f62ad38b97557bb103c16844ef69cd98af7ea1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e7f62ad38b97557bb103c16844ef69cd98af7ea1", "patch": "@@ -161,11 +161,6 @@ GCC_FOR_TARGET = ./xgcc -B./\n # It also specifies -I./include to find, e.g., stddef.h.\n GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -I./include $(TCFLAGS)\n \n-# Special flags for compiling enquire.\n-# We disable optimization to make floating point more reliable.\n-ENQUIRE_CFLAGS = -DNO_MEM -DNO_LONG_DOUBLE_IO -O0\n-ENQUIRE_LDFLAGS = $(LDFLAGS)\n-\n # Sed command to transform gcc to installed name.  Overwritten by configure.\n program_transform_name = @program_transform_name@\n program_transform_cross_name = s,^,$(target_alias)-,\n@@ -226,14 +221,6 @@ SYSTEM_HEADER_DIR = /usr/include\n # Control whether to run fixproto.\n STMP_FIXPROTO = stmp-fixproto\n \n-# Test to see whether <float.h> exists in the system header files,\n-# and is not derived from GCC.\n-FLOAT_H_TEST = \\\n-  [ -f $(SYSTEM_HEADER_DIR)/float.h ] && \\\n-  if grep 'ifndef _FLOAT_H___' $(SYSTEM_HEADER_DIR)/float.h >/dev/null; \\\n-  then false; \\\n-  else :; fi\n-\n # Test to see whether <limits.h> exists in the system header files.\n LIMITS_H_TEST = [ -f $(SYSTEM_HEADER_DIR)/limits.h ]\n \n@@ -353,10 +340,6 @@ TARGET_LIBGCC2_CFLAGS =\n # Some targets override this to stmp-int-hdrs\n LIBGCC2_DEPS =\n \n-# Enquire target (This is a variable so that a target can choose not to\n-# build it.)\n-ENQUIRE = enquire\n-\n # libgcc1-test target (must also be overridable for a target)\n LIBGCC1_TEST = libgcc1-test\n \n@@ -403,6 +386,10 @@ LIB2FUNCS_EXTRA =\n # This is overridden by configure.\n CROSS_FLOAT_H=$(srcdir)/config/float-@float_format@.h\n \n+# We do not try to build float.h anymore.  Let configure select the\n+# appropriate pre-built float.h file for the target.\n+FLOAT_H=$(srcdir)/config/float-@float_format@.h\n+\n # Program to convert libraries.\n LIBCONVERT = \n \n@@ -475,12 +462,6 @@ ALL=all.internal\n # Choose the real install target.\n INSTALL_TARGET=install-normal\n \n-# Source for float.h.  Overridden by cross-make.\n-FLOAT_H=float.h-nat\n-# We do not try to build float.h anymore.  Let configure select the\n-# appropriate pre-built float.h file for the target.\n-FLOAT_H=$(srcdir)/config/float-@float_format@.h\n-\n # Setup the testing framework, if you have one\n EXPECT = `if [ -f $${rootme}/../expect/expect ] ; then \\\n             echo $${rootme}/../expect/expect ; \\\n@@ -875,37 +856,6 @@ gfloat.h: $(FLOAT_H)\n \t-rm -f gfloat.h\n \tcp $(FLOAT_H) gfloat.h\n \n-# Create float.h source for the native machine.\n-# Make it empty if we can use the system float.h without changes.\n-float.h-nat: enquire\n-\t-./enquire -f > tmp-float.h\n-\tgrep '#define [^_]' tmp-float.h >/dev/null || true > tmp-float.h\n-\tmv tmp-float.h float.h-nat\n-\n-# Create a dummy float.h source for a cross-compiler.\n-# ??? This isn't used anymore.  Should we create config/float-unkn.h\n-# and make that the default float_format in configure?\n-float.h-cross:\n-\techo \"#ifndef\t__GCC_FLOAT_NOT_NEEDED\" > t-float.h-cross\n-\techo \"#error float.h values not known for cross-compiler\" >> t-float.h-cross\n-\techo \"#endif\" >> t-float.h-cross\n-\tmv t-float.h-cross float.h-cross\n-\n-# Used to compile enquire with standard cc, but have forgotten why.\n-# Let's try with GCC.\n-enquire: enquire.o $(GCC_PARTS)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@\n-enquire.o: $(srcdir)/enquire.c $(GCC_PASSES) stmp-int-hdrs\n-\trm -f include/float.h\n-\tif $(FLOAT_H_TEST); then \\\n-\t  SYS_FLOAT_H_WRAP=1; \\\n-\telse :; \\\n-\t  SYS_FLOAT_H_WRAP=0; \\\n-\tfi; \\\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) \\\n-\t  -DSYS_FLOAT_H_WRAP=$$SYS_FLOAT_H_WRAP \\\n-\t  -I. -c $(srcdir)/enquire.c\n-\n # Build the version of limits.h that we will install.\n xlimits.h: glimits.h limitx.h limity.h\n \tif $(LIMITS_H_TEST) ; then \\\n@@ -1040,7 +990,7 @@ libgcc1.S: libgcc1.c $(CONFIG_H) config.status\n # Compiling libgcc2.a requires making sure that cc1, etc. have been compiled.\n # But recompiling cc1 should not force recompilation of libgcc2.a.\n # If you want to force recompilation, delete libgcc2.a.\n-libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs\n+libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs $(STMP_FIXPROTO)\n \t-if [ -f libgcc2.ready ] ; then \\\n \t\ttrue; \\\n \telse \\\n@@ -1970,9 +1920,9 @@ gcov$(exeext): gcov.o $(LIBDEPS)\n # s-* so that mostlyclean does not force the include directory to\n # be rebuilt.\n \n-# Build the include directory except for float.h (which depends upon\n+# Build the include directory including float.h (which no longer depends upon\n # enquire).\n-stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h\n+stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h gfloat.h\n # Copy in the headers provided with gcc.\n # The sed command gets just the last file name component;\n # this is necessary because VPATH could add a dirname.\n@@ -1990,20 +1940,20 @@ stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h\n \trm -f include/limits.h\n \tcp xlimits.h include/limits.h\n \tchmod a+r include/limits.h\n-# Install the README\n-\trm -f include/README\n-\tcp $(srcdir)/README-fixinc include/README\n-\tchmod a+r include/README\n-\ttouch stmp-int-hdrs\n-\n-# Build the complete include directory, including float.h.\n-stmp-headers: stmp-int-hdrs gfloat.h\n \trm -f include/float.h\n \tif [ -s gfloat.h ]; then \\\n \t  cp gfloat.h include/float.h && \\\n \t  chmod a+r include/float.h; \\\n \telse :; fi\n-\ttouch stmp-headers\n+# Install the README\n+\trm -f include/README\n+\tcp $(srcdir)/README-fixinc include/README\n+\tchmod a+r include/README\n+\ttouch $@\n+\n+# Now that gfloat.h no longer depends upon enquire, this is actually a no-op.\n+stmp-headers:\n+\ttouch $@\n \n fixinc.sh :\n \tcd ../contrib/fixinc ; CC=$(CC) MAKE=$(MAKE) CFLAGS=$(CFLAGS) \\\n@@ -2900,3 +2850,57 @@ risky-stage4: stage4\n .PHONY: risky-stage1 risky-stage2 risky-stage3 risky-stage4\n \n force:\n+\n+# ---\n+# The enquire rules are still useful for building new float-anything.h.\n+# Special flags for compiling enquire.\n+# We disable optimization to make floating point more reliable.\n+ENQUIRE_CFLAGS = -DNO_MEM -DNO_LONG_DOUBLE_IO -O0\n+ENQUIRE_LDFLAGS = $(LDFLAGS)\n+\n+# Enquire target (This is a variable so that a target can choose not to\n+# build it.)\n+ENQUIRE = enquire\n+\n+# Test to see whether <float.h> exists in the system header files,\n+# and is not derived from GCC.\n+FLOAT_H_TEST = \\\n+  [ -f $(SYSTEM_HEADER_DIR)/float.h ] && \\\n+  if grep 'ifndef _FLOAT_H___' $(SYSTEM_HEADER_DIR)/float.h >/dev/null; \\\n+  then false; \\\n+  else :; fi\n+# We pretend to not having a usable <float.h>, hence disable the FLOAT_H_TEST\n+# to ensure, we're emitting a full blown <float.h> ourselves.\n+FLOAT_H_TEST = false\n+\n+# Used to compile enquire with standard cc, but have forgotten why.\n+# Let's try with GCC.\n+enquire: enquire.o $(GCC_PARTS)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@\n+enquire.o: $(srcdir)/enquire.c $(GCC_PASSES) stmp-int-hdrs\n+\tif $(FLOAT_H_TEST); then \\\n+\t  rm -f include/float.h; \\\n+\t  SYS_FLOAT_H_WRAP=1; \\\n+\telse :; \\\n+\t  SYS_FLOAT_H_WRAP=0; \\\n+\tfi; \\\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) \\\n+\t  -DSYS_FLOAT_H_WRAP=$$SYS_FLOAT_H_WRAP \\\n+\t  -I. -c $(srcdir)/enquire.c\n+\n+# Create float.h source for the native machine.\n+# Make it empty if we can use the system float.h without changes.\n+float.h-nat: enquire\n+\t-./enquire -f > tmp-float.h\n+\tgrep '#define [^_]' tmp-float.h >/dev/null || true > tmp-float.h\n+\tmv tmp-float.h float.h-nat\n+\n+# Create a dummy float.h source for a cross-compiler.\n+# ??? This isn't used anymore.  Should we create config/float-unkn.h\n+# and make that the default float_format in configure?\n+float.h-cross:\n+\techo \"#ifndef\t__GCC_FLOAT_NOT_NEEDED\" > t-float.h-cross\n+\techo \"#error float.h values not known for cross-compiler\" >> t-float.h-cross\n+\techo \"#endif\" >> t-float.h-cross\n+\tmv t-float.h-cross float.h-cross\n+"}]}