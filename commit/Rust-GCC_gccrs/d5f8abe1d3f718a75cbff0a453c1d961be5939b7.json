{"sha": "d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "node_id": "C_kwDOANBUbNoAKGQ1ZjhhYmUxZDNmNzE4YTc1Y2JmZjBhNDUzYzFkOTYxYmU1OTM5Yjc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-27T07:20:56Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-27T10:23:59Z"}, "message": "Use on-demand ranges in ssa_name_has_boolean_range before querying nonzero bits.\n\nThe function ssa_name_has_boolean_range looks at the nonzero bits stored\nin SSA_NAME_RANGE_INFO.  These are global in nature and are the result\nof a previous evrp/VRP run (technically other passes can also set them).\n\nHowever, we can do better if we use get_range_query.  Doing so will use\na ranger if enabled in a pass, or global ranges otherwise.  The call to\nget_nonzero_bits remains, as there are passes that will set them\nindependently of the global range info.\n\nTested on x86-64 Linux with a regstrap as well as in a DOM environment\nusing an on-demand ranger instead of evrp.\n\ngcc/ChangeLog:\n\n\t* tree-ssanames.c (ssa_name_has_boolean_range): Use\n\tget_range_query.", "tree": {"sha": "2daf0cc101c3d63d7df5e86c3fc269f236442954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2daf0cc101c3d63d7df5e86c3fc269f236442954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f8abe1d3f718a75cbff0a453c1d961be5939b7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d01f4973eee8d229ddc326ff7c3bd5f4cf32c1"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "f427c5a789b2879073bd84c92f080a41b116569b", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f8abe1d3f718a75cbff0a453c1d961be5939b7/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f8abe1d3f718a75cbff0a453c1d961be5939b7/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=d5f8abe1d3f718a75cbff0a453c1d961be5939b7", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"value-query.h\"\n \n /* Rewriting a function into SSA form can create a huge number of SSA_NAMEs,\n    many of which may be thrown away shortly after their creation if jumps\n@@ -484,7 +485,7 @@ get_nonzero_bits (const_tree name)\n \n    This can be because it is a boolean type, any unsigned integral\n    type with a single bit of precision, or has known range of [0..1]\n-   via VRP analysis.  */\n+   via range analysis.  */\n \n bool\n ssa_name_has_boolean_range (tree op)\n@@ -502,12 +503,20 @@ ssa_name_has_boolean_range (tree op)\n     return true;\n \n   /* An integral type with more precision, but the object\n-     only takes on values [0..1] as determined by VRP\n+     only takes on values [0..1] as determined by range\n      analysis.  */\n   if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n-      && (TYPE_PRECISION (TREE_TYPE (op)) > 1)\n-      && wi::eq_p (get_nonzero_bits (op), 1))\n-    return true;\n+      && (TYPE_PRECISION (TREE_TYPE (op)) > 1))\n+    {\n+      int_range<2> onezero (build_zero_cst (TREE_TYPE (op)),\n+\t\t\t    build_one_cst (TREE_TYPE (op)));\n+      int_range<2> r;\n+      if (get_range_query (cfun)->range_of_expr (r, op) && r == onezero)\n+\treturn true;\n+\n+      if (wi::eq_p (get_nonzero_bits (op), 1))\n+\treturn true;\n+    }\n \n   return false;\n }"}]}