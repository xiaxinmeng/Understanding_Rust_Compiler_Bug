{"sha": "cd9ed559fb0537f41266eda74fb8085e3a892de6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5ZWQ1NTlmYjA1MzdmNDEyNjZlZGE3NGZiODA4NWUzYTg5MmRlNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-06-16T19:52:37Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-06-16T19:52:37Z"}, "message": "jit: Add a test for compound assignment\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/all-non-failing-tests.h: Add test-compound-assignment.c.\n\t* jit.dg/test-compound-assignment.c: New testcase.\n\nFrom-SVN: r224536", "tree": {"sha": "4bac139c41d89ffde3f7bc79c193751db78cfa3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bac139c41d89ffde3f7bc79c193751db78cfa3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd9ed559fb0537f41266eda74fb8085e3a892de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9ed559fb0537f41266eda74fb8085e3a892de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9ed559fb0537f41266eda74fb8085e3a892de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9ed559fb0537f41266eda74fb8085e3a892de6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0710289199369c888d12ce1f1c0144f4c587e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0710289199369c888d12ce1f1c0144f4c587e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0710289199369c888d12ce1f1c0144f4c587e2d"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "918cf5283c8b547f9cdfcd7bd626b7c487a6d63b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9ed559fb0537f41266eda74fb8085e3a892de6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9ed559fb0537f41266eda74fb8085e3a892de6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd9ed559fb0537f41266eda74fb8085e3a892de6", "patch": "@@ -1,3 +1,8 @@\n+2015-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add test-compound-assignment.c.\n+\t* jit.dg/test-compound-assignment.c: New testcase.\n+\n 2015-06-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/66539"}, {"sha": "389e1c63ff0f7579831843e62e6decb6a7202b66", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9ed559fb0537f41266eda74fb8085e3a892de6/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9ed559fb0537f41266eda74fb8085e3a892de6/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=cd9ed559fb0537f41266eda74fb8085e3a892de6", "patch": "@@ -57,6 +57,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-compound-assignment.c */\n+#define create_code create_code_compound_assignment\n+#define verify_code verify_code_compound_assignment\n+#include \"test-compound-assignment.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-constants.c */\n #define create_code create_code_constants\n #define verify_code verify_code_constants\n@@ -219,6 +226,9 @@ const struct testcase testcases[] = {\n   {\"calling_function_ptr\",\n    create_code_calling_function_ptr,\n    verify_code_calling_function_ptr},\n+  {\"compound_assignment\",\n+   create_code_compound_assignment,\n+   verify_code_compound_assignment},\n   {\"constants\",\n    create_code_constants,\n    verify_code_constants},"}, {"sha": "8b82e09808c8b045042c986552d55e6d6f45f0e0", "filename": "gcc/testsuite/jit.dg/test-compound-assignment.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd9ed559fb0537f41266eda74fb8085e3a892de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-compound-assignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd9ed559fb0537f41266eda74fb8085e3a892de6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-compound-assignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-compound-assignment.c?ref=cd9ed559fb0537f41266eda74fb8085e3a892de6", "patch": "@@ -0,0 +1,157 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+struct assignable_struct\n+{\n+  int a;\n+  char b;\n+  float c;\n+};\n+\n+union assignable_union\n+{\n+  int a;\n+  char b;\n+  float c;\n+};\n+\n+/* Verify that compound assignment works; let's try to inject the\n+   equivalent of:\n+\n+     struct assignable_struct\n+     test_struct_assignment (struct assignable_struct x)\n+     {\n+       struct assignable_struct y, z;\n+       y = x;\n+       z = y;\n+       return z;\n+     }\n+\n+   and the same, for \"union assignable_union\".  */\n+\n+/* Make the type \"struct assignable_struct\" or \"union assignable_union\".  */\n+\n+static gcc_jit_type *\n+make_type (gcc_jit_context *ctxt, int make_union)\n+{\n+  gcc_jit_type *t_int =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *t_char =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR);\n+  gcc_jit_type *t_float =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_FLOAT);\n+\n+  gcc_jit_field *a =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       t_int,\n+\t\t\t       \"a\");\n+  gcc_jit_field *b =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       t_char,\n+\t\t\t       \"b\");\n+  gcc_jit_field *c =\n+    gcc_jit_context_new_field (ctxt,\n+\t\t\t       NULL,\n+\t\t\t       t_float,\n+\t\t\t       \"c\");\n+  gcc_jit_field *fields[] = {a, b, c};\n+  if (make_union)\n+      return gcc_jit_context_new_union_type (ctxt, NULL,\n+\t\t\t\t\t     \"assignable_union\",\n+\t\t\t\t\t     3, fields);\n+  else\n+    return gcc_jit_struct_as_type (\n+      gcc_jit_context_new_struct_type (ctxt, NULL,\n+\t\t\t\t       \"assignable_struct\",\n+\t\t\t\t       3, fields));\n+}\n+\n+static void\n+make_function (gcc_jit_context *ctxt, int make_union, const char *funcname)\n+{\n+  gcc_jit_type *test_type = make_type (ctxt, make_union);\n+  gcc_jit_param *x =\n+    gcc_jit_context_new_param (ctxt, NULL,\n+\t\t\t       test_type, \"x\");\n+  gcc_jit_function *fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  test_type,\n+\t\t\t\t  funcname,\n+\t\t\t\t  1, &x,\n+\t\t\t\t  0);\n+  gcc_jit_lvalue *y =\n+    gcc_jit_function_new_local (fn, NULL, test_type, \"y\");\n+  gcc_jit_lvalue *z =\n+    gcc_jit_function_new_local (fn, NULL, test_type, \"z\");\n+  gcc_jit_block *block =\n+    gcc_jit_function_new_block (fn, NULL);\n+  gcc_jit_block_add_assignment (block, NULL,\n+\t\t\t\ty, gcc_jit_param_as_rvalue (x));\n+  gcc_jit_block_add_assignment (block, NULL,\n+\t\t\t\tz, gcc_jit_lvalue_as_rvalue (y));\n+  gcc_jit_block_end_with_return (block, NULL,\n+\t\t\t\t gcc_jit_lvalue_as_rvalue (z));\n+}\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  make_function (ctxt, 0, \"test_struct_assignment\");\n+  make_function (ctxt, 1, \"test_union_assignment\");\n+}\n+\n+static void\n+verify_test_struct_assignment (gcc_jit_result *result)\n+{\n+  typedef struct assignable_struct (*fn_type) (struct assignable_struct);\n+  fn_type test_struct_assignment =\n+    (fn_type)gcc_jit_result_get_code (result, \"test_struct_assignment\");\n+  CHECK_NON_NULL (test_struct_assignment);\n+\n+  struct assignable_struct s, t;\n+  s.a = 500;\n+  s.b = 'A';\n+  s.c = 1.0;\n+  t = test_struct_assignment (s);\n+  CHECK_VALUE (t.a, 500);\n+  CHECK_VALUE (t.b, 'A');\n+  CHECK_VALUE (t.c, 1.0);\n+}\n+\n+static void\n+verify_test_union_assignment (gcc_jit_result *result)\n+{\n+  typedef union assignable_union (*fn_type) (union assignable_union);\n+  fn_type test_union_assignment =\n+    (fn_type)gcc_jit_result_get_code (result, \"test_union_assignment\");\n+  CHECK_NON_NULL (test_union_assignment);\n+\n+  union assignable_union p, q;\n+\n+  p.a = 500;\n+  q = test_union_assignment (p);\n+  CHECK_VALUE (q.a, 500);\n+\n+  p.b = 'A';\n+  q = test_union_assignment (p);\n+  CHECK_VALUE (q.b, 'A');\n+\n+  p.c = 1.0;\n+  q = test_union_assignment (p);\n+  CHECK_VALUE (q.c, 1.0);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_NON_NULL (result);\n+  verify_test_struct_assignment (result);\n+  verify_test_union_assignment (result);\n+}"}]}