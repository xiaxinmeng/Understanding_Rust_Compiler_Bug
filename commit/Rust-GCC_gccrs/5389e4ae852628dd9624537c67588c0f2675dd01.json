{"sha": "5389e4ae852628dd9624537c67588c0f2675dd01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4OWU0YWU4NTI2MjhkZDk2MjQ1MzdjNjc1ODhjMGYyNjc1ZGQwMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-05-26T08:12:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T08:12:15Z"}, "message": "exp_ch4.adb (Expand_N_Op_Expon): Deal with problem of wrong order in calling Duplicate_Subexpr.\n\n2015-05-26  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Expon): Deal with problem of wrong\n\torder in calling Duplicate_Subexpr.\n\t* einfo.ads: Fix documentation of Object/Value size for scalar types.\n\nFrom-SVN: r223665", "tree": {"sha": "3576f2d681f05deace29edc596ca82857e6ddbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3576f2d681f05deace29edc596ca82857e6ddbaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5389e4ae852628dd9624537c67588c0f2675dd01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5389e4ae852628dd9624537c67588c0f2675dd01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5389e4ae852628dd9624537c67588c0f2675dd01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5389e4ae852628dd9624537c67588c0f2675dd01/comments", "author": null, "committer": null, "parents": [{"sha": "ffcfb997e0a400614011e8f8b28f30eb68d1966a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcfb997e0a400614011e8f8b28f30eb68d1966a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffcfb997e0a400614011e8f8b28f30eb68d1966a"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "c0d03c39478a808e20b7c95ad6f80d5f7908951a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5389e4ae852628dd9624537c67588c0f2675dd01/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5389e4ae852628dd9624537c67588c0f2675dd01/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5389e4ae852628dd9624537c67588c0f2675dd01", "patch": "@@ -1,3 +1,9 @@\n+2015-05-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Deal with problem of wrong\n+\torder in calling Duplicate_Subexpr.\n+\t* einfo.ads: Fix documentation of Object/Value size for scalar types.\n+\n 2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_aggr.adb (Build_Array_Aggr_Code, Gen_Assign):"}, {"sha": "b5d776991effbeda54233aa6327669232aca1885", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5389e4ae852628dd9624537c67588c0f2675dd01/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5389e4ae852628dd9624537c67588c0f2675dd01/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5389e4ae852628dd9624537c67588c0f2675dd01", "patch": "@@ -218,11 +218,13 @@ package Einfo is\n \n --     subtype x4 is x2'base range 0 .. 10;        8               4\n \n---     subtype x5 is x2 range 0 .. dynamic;       16              (7)\n+--     dynamic : x2'Base range -64 .. +63;\n \n---     subtype x6 is x2'base range 0 .. dynamic;   8              (7)\n+--     subtype x5 is x2 range 0 .. dynamic;       16               3*\n \n---  Note: the entries marked (7) are not actually specified by the Ada 95 RM,\n+--     subtype x6 is x2'base range 0 .. dynamic;   8               7*\n+\n+--  Note: the entries marked * are not actually specified by the Ada 95 RM,\n --  but it seems in the spirit of the RM rules to allocate the minimum number\n --  of bits known to be large enough to hold the given range of values.\n "}, {"sha": "4dcc9be7bb926a4fe2e41ac034d4e131d19fccc3", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5389e4ae852628dd9624537c67588c0f2675dd01/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5389e4ae852628dd9624537c67588c0f2675dd01/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5389e4ae852628dd9624537c67588c0f2675dd01", "patch": "@@ -7779,6 +7779,9 @@ package body Exp_Ch4 is\n                TestS : Boolean;\n                --  Set True if we must test the shift count\n \n+               Test_Gt : Node_Id;\n+               --  Node for test against TestS\n+\n             begin\n                --  Compute maximum shift based on the underlying size. For a\n                --  modular type this is one less than the size.\n@@ -7841,15 +7844,21 @@ package body Exp_Ch4 is\n                   --  zero if this shift count is exceeded.\n \n                   if TestS then\n+\n+                     --  Note: build node for the comparison first, before we\n+                     --  reuse the Right_Opnd, so that we have proper parents\n+                     --  in place for the Duplicate_Subexpr call.\n+\n+                     Test_Gt :=\n+                       Make_Op_Gt (Loc,\n+                         Left_Opnd  => Duplicate_Subexpr (Right_Opnd (N)),\n+                         Right_Opnd => Make_Integer_Literal (Loc, MaxS));\n+\n                      Rewrite (N,\n                        Make_If_Expression (Loc,\n                          Expressions => New_List (\n-                           Make_Op_Gt (Loc,\n-                             Left_Opnd  => Duplicate_Subexpr (Right_Opnd (N)),\n-                             Right_Opnd => Make_Integer_Literal (Loc, MaxS)),\n-\n+                           Test_Gt,\n                            Make_Integer_Literal (Loc, Uint_0),\n-\n                            Make_Op_Shift_Left (Loc,\n                              Left_Opnd  => Make_Integer_Literal (Loc, Uint_1),\n                              Right_Opnd => Right_Opnd (N)))));"}]}