{"sha": "36952deaddbabacd278def77822ed74423fdf5e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5NTJkZWFkZGJhYmFjZDI3OGRlZjc3ODIyZWQ3NDQyM2ZkZjVlMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-09-21T20:46:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-21T20:46:57Z"}, "message": "parser.c (cp_lexer_peek_token, [...]): Don't handle CPP_PRAGMA tokens specially.\n\n\t* parser.c (cp_lexer_peek_token, cp_lexer_consume_token):\n\tDon't handle CPP_PRAGMA tokens specially.\n\t(cp_lexer_handle_pragma): Use cp_lexer_consume_token.  Don't\n\tpurge the token; do clear token->value after processing.  Add\n\tassertion at beginning that token->value is nonzero.\n\t(cp_parser_statement, cp_parser_declaration_seq_opt): Handle\n\tCPP_PRAGMA as a full statement or declaration in its own right.\n\nFrom-SVN: r87822", "tree": {"sha": "0d0806456056608d40bf64ac3c0d583809bceb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d0806456056608d40bf64ac3c0d583809bceb3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36952deaddbabacd278def77822ed74423fdf5e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36952deaddbabacd278def77822ed74423fdf5e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36952deaddbabacd278def77822ed74423fdf5e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36952deaddbabacd278def77822ed74423fdf5e3/comments", "author": null, "committer": null, "parents": [{"sha": "52c5701b4e38801ed913c8d65a154c99da34181c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5701b4e38801ed913c8d65a154c99da34181c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c5701b4e38801ed913c8d65a154c99da34181c"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "333bfc95e7ddfc164cac1c1f9a27ed856b7b6c57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36952deaddbabacd278def77822ed74423fdf5e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36952deaddbabacd278def77822ed74423fdf5e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=36952deaddbabacd278def77822ed74423fdf5e3", "patch": "@@ -1,9 +1,19 @@\n+2004-09-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* parser.c (cp_lexer_peek_token, cp_lexer_consume_token):\n+\tDon't handle CPP_PRAGMA tokens specially.\n+\t(cp_lexer_handle_pragma): Use cp_lexer_consume_token.  Don't\n+\tpurge the token; do clear token->value after processing.  Add\n+\tassertion at beginning that token->value is nonzero.\n+\t(cp_parser_statement, cp_parser_declaration_seq_opt): Handle\n+\tCPP_PRAGMA as a full statement or declaration in its own right.\n+\n 2004-09-21  Matt Austern  <austern@apple.com>\n \n \tPR c++/15049\n \t* decl.c (grokvardecl): Accept declarations of global variables\n \tusing anonymous types.\n-\t\n+\n 2004-09-21  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/7503"}, {"sha": "9c528e763f5e60a1966b6e1c497b9dd4cb501e34", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36952deaddbabacd278def77822ed74423fdf5e3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36952deaddbabacd278def77822ed74423fdf5e3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=36952deaddbabacd278def77822ed74423fdf5e3", "patch": "@@ -496,9 +496,6 @@ cp_lexer_peek_token (cp_lexer *lexer)\n   if (lexer->next_token->type == CPP_PURGED)\n     cp_lexer_skip_purged_tokens (lexer);\n \n-  if (lexer->next_token->type == CPP_PRAGMA)\n-    cp_lexer_handle_pragma (lexer);\n-\n   token = lexer->next_token;\n \n   /* Provide debugging output.  */\n@@ -601,9 +598,6 @@ cp_lexer_consume_token (cp_lexer* lexer)\n   if (lexer->next_token->type == CPP_PURGED)\n     cp_lexer_skip_purged_tokens (lexer);\n \n-  if (lexer->next_token->type == CPP_PRAGMA)\n-    cp_lexer_handle_pragma (lexer);\n-\n   token = lexer->next_token++;\n \n   /* Provide debugging output.  */\n@@ -652,27 +646,24 @@ cp_lexer_purge_tokens_after (cp_lexer *lexer, cp_token *tok)\n     }\n }\n \n-/* Handle a pragma token and skip over it. We need the loop because\n-   the next token might also be a pragma token. */\n+/* Consume and handle a pragma token.   */\n static void\n cp_lexer_handle_pragma (cp_lexer *lexer)\n {\n-  gcc_assert (lexer->next_token->type == CPP_PRAGMA);\n+  cpp_string s;\n+  cp_token *token = cp_lexer_consume_token (lexer);\n+  gcc_assert (token->type == CPP_PRAGMA);\n+  gcc_assert (token->value);\n \n-  while (lexer->next_token->type == CPP_PRAGMA)\n-    {\n-      tree t = lexer->next_token->value;\n-      cpp_string s;\n-      s.len = TREE_STRING_LENGTH (t);\n-      s.text = (const unsigned char *) TREE_STRING_POINTER (t);\n+  s.len = TREE_STRING_LENGTH (token->value);\n+  s.text = (const unsigned char *) TREE_STRING_POINTER (token->value);\n \n-      cp_lexer_set_source_position_from_token (lexer, lexer->next_token);\n-      cpp_handle_deferred_pragma (parse_in, &s);\n+  cp_lexer_set_source_position_from_token (lexer, token);\n+  cpp_handle_deferred_pragma (parse_in, &s);\n \n-      /* Make sure we don't run this pragma twice. */\n-      cp_lexer_purge_token (lexer);\n-      cp_lexer_skip_purged_tokens (lexer);\n-    }\n+  /* Clearing token->value here means that we will get an ICE if we\n+     try to process this #pragma again (which should be impossible).  */\n+  token->value = NULL;\n }\n \n /* Begin saving tokens.  All tokens consumed after this point will be\n@@ -5892,6 +5883,13 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr)\n   /* Anything that starts with a `{' must be a compound-statement.  */\n   else if (token->type == CPP_OPEN_BRACE)\n     statement = cp_parser_compound_statement (parser, NULL, false);\n+  /* CPP_PRAGMA is a #pragma inside a function body, which constitutes\n+     a statement all its own.  */\n+  else if (token->type == CPP_PRAGMA)\n+    {\n+      cp_lexer_handle_pragma (parser->lexer);\n+      return;\n+    }\n \n   /* Everything else must be a declaration-statement or an\n      expression-statement.  Try for the declaration-statement\n@@ -6649,6 +6647,16 @@ cp_parser_declaration_seq_opt (cp_parser* parser)\n \t  continue;\n \t}\n \n+      if (token->type == CPP_PRAGMA)\n+\t{\n+\t  /* A top-level declaration can consist solely of a #pragma.\n+\t     A nested declaration cannot, so this is done here and not\n+\t     in cp_parser_declaration.  (A #pragma at block scope is\n+\t     handled in cp_parser_statement.)  */\n+\t  cp_lexer_handle_pragma (parser->lexer);\n+\t  continue;\n+\t}\n+\n       /* The C lexer modifies PENDING_LANG_CHANGE when it wants the\n \t parser to enter or exit implicit `extern \"C\"' blocks.  */\n       while (pending_lang_change > 0)"}]}