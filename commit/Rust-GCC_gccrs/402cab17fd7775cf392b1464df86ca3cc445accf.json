{"sha": "402cab17fd7775cf392b1464df86ca3cc445accf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyY2FiMTdmZDc3NzVjZjM5MmIxNDY0ZGY4NmNhM2NjNDQ1YWNjZg==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-12-24T16:41:46Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-12-24T16:41:46Z"}, "message": "Fix computation of single entry/exit of a region.\n\nFor basic block with two preds, allow (as single entry) only when the other\nedge is a backedge. Similarly for basic block with two succs,\nallow (as single exit) only when the other edge is a back edge.\n\n2015-12-21  Aditya Kumar  <hiraditya@msn.com>\n\n        * graphite-scop-detection.c (scop_detection::get_nearest_dom_with_single_entry): Check l == l2.\n        (scop_detection::get_nearest_pdom_with_single_exit): Same.\n        (scop_detection::merge_sese): Whitespace.\n        (scop_detection::add_scop): Comment.\n        (build_scops): Whitespace.\n\nFrom-SVN: r231946", "tree": {"sha": "267857aa43b4a7480117ed14a553bd45a0ec7f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267857aa43b4a7480117ed14a553bd45a0ec7f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402cab17fd7775cf392b1464df86ca3cc445accf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402cab17fd7775cf392b1464df86ca3cc445accf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402cab17fd7775cf392b1464df86ca3cc445accf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402cab17fd7775cf392b1464df86ca3cc445accf/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e64f018315bbde89779f6c87ec9142ddee7d4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e64f018315bbde89779f6c87ec9142ddee7d4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e64f018315bbde89779f6c87ec9142ddee7d4a3"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "1a1032d8ffdda16c0589508d71b45da961e6942b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402cab17fd7775cf392b1464df86ca3cc445accf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402cab17fd7775cf392b1464df86ca3cc445accf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=402cab17fd7775cf392b1464df86ca3cc445accf", "patch": "@@ -1,3 +1,12 @@\n+2015-12-24  Aditya Kumar  <aditya.k7@samsung.com>\n+\n+\t* graphite-scop-detection.c\n+\t(scop_detection::get_nearest_dom_with_single_entry): Check l ==\tl2.\n+\t(scop_detection::get_nearest_pdom_with_single_exit): Same.\n+\t(scop_detection::merge_sese): Whitespace.\n+\t(scop_detection::add_scop): Comment.\n+\t(build_scops): Whitespace.\n+\n 2015-12-24  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PKU_SET): New."}, {"sha": "ad112274d9710263985cda72dc30c488ddd73527", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402cab17fd7775cf392b1464df86ca3cc445accf/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402cab17fd7775cf392b1464df86ca3cc445accf/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=402cab17fd7775cf392b1464df86ca3cc445accf", "patch": "@@ -693,18 +693,22 @@ scop_detection::get_nearest_dom_with_single_entry (basic_block dom)\n {\n   if (!dom->preds)\n     return NULL;\n-  /* If e1->src dominates e2->src then e1->src will also dominate dom.  */\n+\n+  /* If any of the dominators has two predecessors but one of them is a back\n+     edge, then that basic block also qualifies as a dominator with single\n+     entry.  */\n   if (dom->preds->length () == 2)\n     {\n+      /* If e1->src dominates e2->src then e1->src will also dominate dom.  */\n       edge e1 = (*dom->preds)[0];\n       edge e2 = (*dom->preds)[1];\n       loop_p l = dom->loop_father;\n       loop_p l1 = e1->src->loop_father;\n       loop_p l2 = e2->src->loop_father;\n-      if (l != l1\n+      if (l != l1 && l == l2\n \t  && dominated_by_p (CDI_DOMINATORS, e2->src, e1->src))\n \treturn e1;\n-      if (l != l2\n+      if (l != l2 && l == l1\n \t  && dominated_by_p (CDI_DOMINATORS, e1->src, e2->src))\n \treturn e2;\n     }\n@@ -728,17 +732,23 @@ scop_detection::get_nearest_pdom_with_single_exit (basic_block pdom)\n {\n   if (!pdom->succs)\n     return NULL;\n+\n+  /* If any of the post-dominators has two successors but one of them is a back\n+     edge, then that basic block also qualifies as a post-dominator with single\n+     exit. */\n   if (pdom->succs->length () == 2)\n     {\n+      /* If e1->dest post-dominates e2->dest then e1->dest will also\n+\t post-dominate pdom.  */\n       edge e1 = (*pdom->succs)[0];\n       edge e2 = (*pdom->succs)[1];\n       loop_p l = pdom->loop_father;\n       loop_p l1 = e1->dest->loop_father;\n       loop_p l2 = e2->dest->loop_father;\n-      if (l != l1\n+      if (l != l1 && l == l2\n \t  && dominated_by_p (CDI_POST_DOMINATORS, e2->dest, e1->dest))\n \treturn e1;\n-      if (l != l2\n+      if (l != l2 && l == l1\n \t  && dominated_by_p (CDI_POST_DOMINATORS, e1->dest, e2->dest))\n \treturn e2;\n     }\n@@ -805,7 +815,7 @@ scop_detection::merge_sese (sese_l first, sese_l second) const\n      EXIT->DEST should be in the same loop nest.  */\n   if (!dominated_by_p (CDI_DOMINATORS, pdom, dom)\n       || loop_depth (entry->src->loop_father)\n-         != loop_depth (exit->dest->loop_father))\n+\t != loop_depth (exit->dest->loop_father))\n     return invalid_sese;\n \n   /* For now we just want to bail out when exit does not post-dominate entry.\n@@ -1014,7 +1024,8 @@ scop_detection::add_scop (sese_l s)\n   /* Remove all the scops which are subsumed by s.  */\n   remove_subscops (s);\n \n-  /* Replace this with split-intersecting scops.  */\n+  /* Remove intersecting scops. FIXME: It will be a good idea to keep\n+     the non-intersecting part of the scop already in the list.  */\n   remove_intersecting_scops (s);\n \n   scops.safe_push (s);\n@@ -1960,9 +1971,9 @@ build_scops (vec<scop_p> *scops)\n       if (scop_nb_params (scop) > max_dim)\n \t{\n \t  DEBUG_PRINT (dp << \"[scop-detection-fail] too many parameters: \"\n-\t\t          << scop_nb_params (scop)\n-\t\t          << \" larger than --param graphite-max-nb-scop-params=\"\n-\t\t          << max_dim << \".\\n\");\n+\t\t\t  << scop_nb_params (scop)\n+\t\t\t  << \" larger than --param graphite-max-nb-scop-params=\"\n+\t\t\t  << max_dim << \".\\n\");\n \t  free_scop (scop);\n \t  continue;\n \t}"}]}