{"sha": "d282264edf36116d5c55d0da59a612468608d9ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4MjI2NGVkZjM2MTE2ZDVjNTVkMGRhNTlhNjEyNDY4NjA4ZDljYQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-05-02T19:50:37Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-05-02T19:50:37Z"}, "message": "re PR lto/52605 (LTO -g ICE when looking up context of VMTs of classes defined within functions)\n\n2012-05-02  Martin Jambor  <mjambor@suse.cz>\n\n\tPR lto/52605\n\t* dwarf2out.c (dwarf2out_decl): Only lookup die representing context\n\tof a variable when the contect is a function.\n\n\t* gcc/testsuite/g++.dg/lto/pr52605_0.C: New test.\n\nFrom-SVN: r187063", "tree": {"sha": "fc6987ad123a3e9be2b2a34bcdf17cccaad41c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc6987ad123a3e9be2b2a34bcdf17cccaad41c6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d282264edf36116d5c55d0da59a612468608d9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d282264edf36116d5c55d0da59a612468608d9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d282264edf36116d5c55d0da59a612468608d9ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d282264edf36116d5c55d0da59a612468608d9ca/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40f93bb5be85c6bb202bdb02b71efea13071e12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f93bb5be85c6bb202bdb02b71efea13071e12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f93bb5be85c6bb202bdb02b71efea13071e12a"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "8367cb6af25c0147fb84a13b87497a95d73b8472", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d282264edf36116d5c55d0da59a612468608d9ca", "patch": "@@ -1,3 +1,9 @@\n+2012-05-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR lto/52605\n+\t* dwarf2out.c (dwarf2out_decl): Only lookup die representing context\n+\tof a variable when the contect is a function.\n+\n 2012-05-02  Michael Matz  <matz@suse.de>\n \n \t* coretypes.h (gimple_seq, const_gimple_seq): Typedef as gimple."}, {"sha": "10a53894f63cb8949f9e04618a167622adea3880", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d282264edf36116d5c55d0da59a612468608d9ca", "patch": "@@ -19122,7 +19122,9 @@ dwarf2out_decl (tree decl)\n \treturn;\n \n       /* For local statics lookup proper context die.  */\n-      if (TREE_STATIC (decl) && decl_function_context (decl))\n+      if (TREE_STATIC (decl)\n+\t  && DECL_CONTEXT (decl)\n+\t  && TREE_CODE (DECL_CONTEXT (decl)) == FUNCTION_DECL)\n \tcontext_die = lookup_decl_die (DECL_CONTEXT (decl));\n \n       /* If we are in terse mode, don't generate any DIEs to represent any"}, {"sha": "4f831b1cecf892e7e702fde6dff0f58e159faaae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d282264edf36116d5c55d0da59a612468608d9ca", "patch": "@@ -1,3 +1,8 @@\n+2012-05-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR lto/52605\n+\t* g++.dg/lto/pr52605_0.C: New test.\n+\n 2012-05-02  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc.target/i386/hle-cmpxchg-acq-1.c: New."}, {"sha": "22540abf9e46ed3004121d948833ec07aca109a6", "filename": "gcc/testsuite/g++.dg/lto/pr52605_0.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr52605_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d282264edf36116d5c55d0da59a612468608d9ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr52605_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr52605_0.C?ref=d282264edf36116d5c55d0da59a612468608d9ca", "patch": "@@ -0,0 +1,39 @@\n+// { dg-lto-do link }\n+// { dg-lto-options {{-flto -g}} }\n+\n+extern \"C\" void abort (void);\n+\n+class A\n+{\n+public:\n+  virtual int foo (int i);\n+};\n+\n+int A::foo (int i)\n+{\n+  return i + 1;\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+\n+  class B : public A\n+  {\n+  public:\n+    int bar (int i)\n+    {\n+      return foo (i) + 2;\n+    }\n+  };\n+  class B b;\n+\n+  if (b.bar (get_input ()) != 4)\n+    abort ();\n+  return 0;\n+}\n+"}]}