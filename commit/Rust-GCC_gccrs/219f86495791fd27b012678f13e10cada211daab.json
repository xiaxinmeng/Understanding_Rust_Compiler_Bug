{"sha": "219f86495791fd27b012678f13e10cada211daab", "node_id": "C_kwDOANBUbNoAKDIxOWY4NjQ5NTc5MWZkMjdiMDEyNjc4ZjEzZTEwY2FkYTIxMWRhYWI", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-07-10T13:30:29Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-07-27T22:09:17Z"}, "message": "preprocessor: Set input_location to the most recently seen token\n\nWhen preprocessing with -E and -save-temps, input_location points always to the\nfirst character of the current file. This was previously irrelevant because\nnothing was called during the token streaming process that would inspect\ninput_location. But since r13-1544, \"#pragma GCC diagnostic\" is supported in\npreprocess-only mode, and that pragma relies on input_location to decide if a\ngiven source code location is subject to a diagnostic or not. Most diagnostics\nwork fine anyway, because they are handled as soon as they are seen and so\neverything is still seen in the expected order even though all the diagnostic\npragmas are treated as if they applied at the start of the file. One example\nthat doesn't work correctly is the new testcase, since here the warning is not\ntriggered until the end of the file and so it is necessary to track the location\nproperly.\n\nFixed by setting input_location to point to each token as it is being\nstreamed, similar to how C++ mode sets it.\n\ngcc/c-family/ChangeLog:\n\n\t* c-ppoutput.cc (token_streamer::stream): Update input_location\n\tprior to streaming each token.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/pragma-diag-14.c: New test.\n\t* c-c++-common/pragma-diag-15.c: New test.", "tree": {"sha": "c8ff636aad2d31c05cabfa408d3e56cdc3bac5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8ff636aad2d31c05cabfa408d3e56cdc3bac5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/219f86495791fd27b012678f13e10cada211daab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/219f86495791fd27b012678f13e10cada211daab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/219f86495791fd27b012678f13e10cada211daab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/219f86495791fd27b012678f13e10cada211daab/comments", "author": null, "committer": null, "parents": [{"sha": "66fb08fec305f7a847cb1d7fae1c01cb06bbd176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66fb08fec305f7a847cb1d7fae1c01cb06bbd176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66fb08fec305f7a847cb1d7fae1c01cb06bbd176"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "98081ccfbb0715f530fdf0732aae9f68fc8fbff6", "filename": "gcc/c-family/c-ppoutput.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219f86495791fd27b012678f13e10cada211daab/gcc%2Fc-family%2Fc-ppoutput.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219f86495791fd27b012678f13e10cada211daab/gcc%2Fc-family%2Fc-ppoutput.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.cc?ref=219f86495791fd27b012678f13e10cada211daab", "patch": "@@ -210,6 +210,10 @@ void\n token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n \t\t\tlocation_t loc)\n {\n+  /* Keep input_location up to date, since it is needed for processing early\n+     pragmas such as #pragma GCC diagnostic.  */\n+  input_location = loc;\n+\n   if (token->type == CPP_PADDING)\n     {\n       avoid_paste = true;"}, {"sha": "618e7e1ef274efd25320614e529cdf5eff236f21", "filename": "gcc/testsuite/c-c++-common/pragma-diag-14.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219f86495791fd27b012678f13e10cada211daab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219f86495791fd27b012678f13e10cada211daab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-14.c?ref=219f86495791fd27b012678f13e10cada211daab", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do preprocess } */\n+/* { dg-additional-options \"-Wunused-macros\" } */\n+\n+/* In the past, the pragma has erroneously disabled the warning because the\n+   location was not tracked properly with -E or -save-temps; check that it works\n+   now.  */\n+\n+#define X /* { dg-warning \"-:-Wunused-macros\" } */\n+#pragma GCC diagnostic ignored \"-Wunused-macros\""}, {"sha": "d8076b4f93a1dc32b56864d73b4439c4232f79c8", "filename": "gcc/testsuite/c-c++-common/pragma-diag-15.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/219f86495791fd27b012678f13e10cada211daab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/219f86495791fd27b012678f13e10cada211daab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-15.c?ref=219f86495791fd27b012678f13e10cada211daab", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wunused-macros\" } */\n+\n+/* In the past, the pragma has erroneously disabled the warning because the\n+   location was not tracked properly with -E or -save-temps; check that it works\n+   now.\n+\n+   This test currently fails for C++ but it's not because of the pragma, it's\n+   because the location of the macro definition is incorrectly set.  This is a\n+   separate issue, will resolve it in a later patch.  */\n+\n+#define X /* { dg-warning \"-:-Wunused-macros\" {} { xfail c++ } } */\n+#pragma GCC diagnostic ignored \"-Wunused-macros\""}]}