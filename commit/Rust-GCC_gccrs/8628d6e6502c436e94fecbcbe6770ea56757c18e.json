{"sha": "8628d6e6502c436e94fecbcbe6770ea56757c18e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYyOGQ2ZTY1MDJjNDM2ZTk0ZmVjYmNiZTY3NzBlYTU2NzU3YzE4ZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-02-23T21:46:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-02-23T21:46:18Z"}, "message": "re PR target/65109 (r220674 causes FAIL: gcc.target/powerpc/ppc64-abi-1.c execution test)\n\n\tPR target/65109\n\t* gcc.target/powerpc/ppc64-abi-1.c: Split test functions into\n\ttwo parts.  One to save registers, the other to verify the\n\tregisters have the right values.  Save register state into\n\tstatic data rather than on the stack.\n\nFrom-SVN: r220920", "tree": {"sha": "26d869edb773da8e10e6e4bc9b716f5be1dbfe42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26d869edb773da8e10e6e4bc9b716f5be1dbfe42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8628d6e6502c436e94fecbcbe6770ea56757c18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8628d6e6502c436e94fecbcbe6770ea56757c18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8628d6e6502c436e94fecbcbe6770ea56757c18e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8628d6e6502c436e94fecbcbe6770ea56757c18e/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86ee20386e04651a9e92b8d290d507df3c6aaed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ee20386e04651a9e92b8d290d507df3c6aaed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ee20386e04651a9e92b8d290d507df3c6aaed4"}], "stats": {"total": 239, "additions": 135, "deletions": 104}, "files": [{"sha": "e695467666a567a0ef916256d2ffa5bbb14cff46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628d6e6502c436e94fecbcbe6770ea56757c18e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628d6e6502c436e94fecbcbe6770ea56757c18e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8628d6e6502c436e94fecbcbe6770ea56757c18e", "patch": "@@ -1,3 +1,11 @@\n+2015-02-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR target/65109\n+\t* gcc.target/powerpc/ppc64-abi-1.c: Split test functions into\n+\ttwo parts.  One to save registers, the other to verify the\n+\tregisters have the right values.  Save register state into\n+\tstatic data rather than on the stack.\n+\n 2015-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/63888"}, {"sha": "b70003d23a37dc1a6bf120c742743d5254143f42", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-1.c", "status": "modified", "additions": 127, "deletions": 104, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628d6e6502c436e94fecbcbe6770ea56757c18e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628d6e6502c436e94fecbcbe6770ea56757c18e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-1.c?ref=8628d6e6502c436e94fecbcbe6770ea56757c18e", "patch": "@@ -1,9 +1,10 @@\n /* { dg-do run { target { powerpc*-*-* && lp64 } } } */\n /* { dg-skip-if \"\" { *-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2\" } */\n-#include <stdarg.h>\n-#include <signal.h>\n-#include <stdio.h>\n+\n+typedef __builtin_va_list va_list;\n+#define va_start(ap, arg) __builtin_va_start (ap, arg)\n+#define va_arg(ap, type)  __builtin_va_arg (ap, type)\n \n /* Testcase to check for ABI compliance of parameter passing\n    for the PowerPC64 ABI.  \n@@ -17,64 +18,68 @@ typedef struct\n   double fprs[13];\n } reg_parms_t;\n \n-reg_parms_t gparms;\n+volatile reg_parms_t gparms;\n \n \n-/* Testcase could break on future gcc's, if parameter regs\n-   are changed before this asm.  */\n+/* Testcase could break on future gcc's, if parameter regs are changed\n+   before this asm.  To minimize the risk of that happening the test\n+   consists of two sets of functions wih identical signatures:\n+   foo, which does nothing except save function argument registers\n+       to prevent them from getting clobbered (see PR65109),\n+   foo_check, which verifies that the values of function registers\n+       saved by foo match those passed to foo_check by the caller.  */\n \n #ifndef __MACH__\n-#define save_parms(lparms)\t\t\t\t\\\n-    asm volatile (\"ld 11,gparms@got(2)\\n\\t\"                \\\n-                  \"std 3,0(11)\\n\\t\"\t\t        \\\n-\t          \"std 4,8(11)\\n\\t\"\t\t\t\\\n-\t          \"std 5,16(11)\\n\\t\"\t\t\t\\\n-\t          \"std 6,24(11)\\n\\t\"\t\t\t\\\n-\t          \"std 7,32(11)\\n\\t\"\t\t\t\\\n-\t          \"std 8,40(11)\\n\\t\"\t\t\t\\\n-\t          \"std 9,48(11)\\n\\t\"\t\t\t\\\n-\t          \"std 10,56(11)\\n\\t\"                 \\\n-                  \"stfd 1,64(11)\\n\\t\"\t\t        \\\n-\t          \"stfd 2,72(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 3,80(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 4,88(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 5,96(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 6,104(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 7,112(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 8,120(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 9,128(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 10,136(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 11,144(11)\\n\\t\"\t\t\t\\\n-\t          \"stfd 12,152(11)\\n\\t\"                 \\\n-\t          \"stfd 13,160(11)\\n\\t\":::\"11\", \"memory\");  \\\n-                  lparms = gparms;\n+#define save_parms()\t\t\t\t\t \\\n+  asm volatile (\"ld 11,gparms@got(2)\\n\\t\"                \\\n+                  \"std 3,0(11)\\n\\t\"                     \\\n+                  \"std 4,8(11)\\n\\t\"                     \\\n+                  \"std 5,16(11)\\n\\t\"                    \\\n+                  \"std 6,24(11)\\n\\t\"                    \\\n+                  \"std 7,32(11)\\n\\t\"                    \\\n+                  \"std 8,40(11)\\n\\t\"                    \\\n+                  \"std 9,48(11)\\n\\t\"                    \\\n+                  \"std 10,56(11)\\n\\t\"                 \\\n+                  \"stfd 1,64(11)\\n\\t\"                   \\\n+                  \"stfd 2,72(11)\\n\\t\"                   \\\n+                  \"stfd 3,80(11)\\n\\t\"                   \\\n+                  \"stfd 4,88(11)\\n\\t\"                   \\\n+                  \"stfd 5,96(11)\\n\\t\"                   \\\n+                  \"stfd 6,104(11)\\n\\t\"                  \\\n+                  \"stfd 7,112(11)\\n\\t\"                  \\\n+                  \"stfd 8,120(11)\\n\\t\"                  \\\n+                  \"stfd 9,128(11)\\n\\t\"                  \\\n+                  \"stfd 10,136(11)\\n\\t\"                 \\\n+                  \"stfd 11,144(11)\\n\\t\"                 \\\n+                  \"stfd 12,152(11)\\n\\t\"                 \\\n+                  \"stfd 13,160(11)\\n\\t\":::\"11\", \"memory\")\n #else\n-#define save_parms(lparms)\t\t\t\t\\\n-    asm volatile (\"ld r11,gparms@got(r2)\\n\\t\"           \\\n-                  \"std r3,0(r11)\\n\\t\"\t\t        \\\n-\t          \"std r4,8(r11)\\n\\t\"\t\t\t\\\n-\t          \"std r5,16(r11)\\n\\t\"\t\t\t\\\n-\t          \"std r6,24(r11)\\n\\t\"\t\t\t\\\n-\t          \"std r7,32(r11)\\n\\t\"\t\t\t\\\n-\t          \"std r8,40(r11)\\n\\t\"\t\t\t\\\n-\t          \"std r9,48(r11)\\n\\t\"\t\t\t\\\n-\t          \"std r10,56(r11)\\n\\t\"                 \\\n-                  \"stfd f1,64(r11)\\n\\t\"\t\t        \\\n-\t          \"stfd f2,72(r11)\\n\\t\"\t\t\t\\\n-\t          \"stfd f3,80(r11)\\n\\t\"\t\t\t\\\n-\t          \"stfd f4,88(r11)\\n\\t\"\t\t\t\\\n-\t          \"stfd f5,96(r11)\\n\\t\"\t\t\t\\\n-\t          \"stfd f6,104(r11)\\n\\t\"\t\t\\\n-\t          \"stfd f7,112(r11)\\n\\t\"\t\t\\\n-\t          \"stfd f8,120(r11)\\n\\t\"\t\t\\\n-\t          \"stfd f9,128(r11)\\n\\t\"\t\t\\\n-\t          \"stfd f10,136(r11)\\n\\t\"\t\t\\\n-\t          \"stfd f11,144(r11)\\n\\t\"\t\t\\\n-\t          \"stfd f12,152(r11)\\n\\t\"               \\\n-\t          \"stfd f13,160(r11)\\n\\t\":::\"r11\", \"memory\");  \\\n-                  lparms = gparms;\n+#define save_parms()\t\t\t\t      \\\n+  asm volatile (\"ld r11,gparms@got(r2)\\n\\t\"           \\\n+                  \"std r3,0(r11)\\n\\t\"                   \\\n+                  \"std r4,8(r11)\\n\\t\"                   \\\n+                  \"std r5,16(r11)\\n\\t\"                  \\\n+                  \"std r6,24(r11)\\n\\t\"                  \\\n+                  \"std r7,32(r11)\\n\\t\"                  \\\n+                  \"std r8,40(r11)\\n\\t\"                  \\\n+                  \"std r9,48(r11)\\n\\t\"                  \\\n+                  \"std r10,56(r11)\\n\\t\"                 \\\n+                  \"stfd f1,64(r11)\\n\\t\"                 \\\n+                  \"stfd f2,72(r11)\\n\\t\"                 \\\n+                  \"stfd f3,80(r11)\\n\\t\"                 \\\n+                  \"stfd f4,88(r11)\\n\\t\"                 \\\n+                  \"stfd f5,96(r11)\\n\\t\"                 \\\n+                  \"stfd f6,104(r11)\\n\\t\"                \\\n+                  \"stfd f7,112(r11)\\n\\t\"                \\\n+                  \"stfd f8,120(r11)\\n\\t\"                \\\n+                  \"stfd f9,128(r11)\\n\\t\"                \\\n+                  \"stfd f10,136(r11)\\n\\t\"               \\\n+                  \"stfd f11,144(r11)\\n\\t\"               \\\n+                  \"stfd f12,152(r11)\\n\\t\"               \\\n+\t\t  \"stfd f13,160(r11)\\n\\t\":::\"r11\", \"memory\")\n #endif\n \n+\n /* Stackframe structure relevant for parameter passing.  */\n typedef union\n {\n@@ -104,16 +109,18 @@ typedef struct sf\n */\n void __attribute__ ((noinline)) fcld (char *s, long l, double d)\n {\n-  reg_parms_t lparms;\n-  save_parms (lparms);\n+  save_parms ();\n \n-  if (s != (char *) lparms.gprs[0])\n+}\n+void __attribute__ ((noinline)) fcld_check (char *s, long l, double d)\n+{\n+  if (s != (char *) gparms.gprs[0])\n     abort ();\n \n-  if (l != lparms.gprs[1])\n+  if (l != gparms.gprs[1])\n     abort ();\n \n-  if (d != lparms.fprs[0])\n+  if (d != gparms.fprs[0])\n     abort ();\n }\n \n@@ -126,19 +133,22 @@ void __attribute__ ((noinline)) fcld (char *s, long l, double d)\n void __attribute__ ((noinline))\n fcldi (char *s, long l, double d, signed int i)\n {\n-  reg_parms_t lparms;\n-  save_parms (lparms);\n+  save_parms ();\n+}\n \n-  if (s != (char *) lparms.gprs[0])\n+void __attribute__ ((noinline))\n+fcldi_check (char *s, long l, double d, signed int i)\n+{\n+  if (s != (char *) gparms.gprs[0])\n     abort ();\n \n-  if (l != lparms.gprs[1])\n+  if (l != gparms.gprs[1])\n     abort ();\n \n-  if (d != lparms.fprs[0])\n+  if (d != gparms.fprs[0])\n     abort ();\n \n-  if ((signed long) i != lparms.gprs[3])\n+  if ((signed long) i != gparms.gprs[3])\n     abort ();\n }\n \n@@ -151,19 +161,22 @@ fcldi (char *s, long l, double d, signed int i)\n void __attribute__ ((noinline))\n fcldu (char *s, long l, float d, unsigned int i)\n {\n-  reg_parms_t lparms;\n-  save_parms (lparms);\n+  save_parms ();\n+}\n \n-  if (s != (char *) lparms.gprs[0])\n+void __attribute__ ((noinline))\n+fcldu_check (char *s, long l, float d, unsigned int i)\n+{\n+  if (s != (char *) gparms.gprs[0])\n     abort ();\n \n-  if (l != lparms.gprs[1])\n+  if (l != gparms.gprs[1])\n     abort ();\n \n-  if ((double) d != lparms.fprs[0])\n+  if ((double) d != gparms.fprs[0])\n     abort ();\n \n-  if ((unsigned long) i != lparms.gprs[3])\n+  if ((unsigned long) i != gparms.gprs[3])\n     abort ();\n }\n \n@@ -172,19 +185,21 @@ fcldu (char *s, long l, float d, unsigned int i)\n    l : slot 1\n    d : slot 2\n */\n-\n void __attribute__ ((noinline)) fceld (char *s, ...)\n+{\n+  save_parms ();\n+}\n+\n+void __attribute__ ((noinline)) fceld_check (char *s, ...)\n {\n   stack_frame_t *sp;\n-  reg_parms_t lparms;\n   va_list arg;\n   double d;\n   long l;\n-  save_parms (lparms);\n \n   va_start (arg, s);\n \n-  if (s != (char *) lparms.gprs[0])\n+  if (s != (char *) gparms.gprs[0])\n     abort ();\n \n   l = va_arg (arg, long);\n@@ -209,23 +224,26 @@ void __attribute__ ((noinline)) fceld (char *s, ...)\n    l : slot 4\n */\n void __attribute__ ((noinline)) fciiedl (char *s, int i, int j, ...)\n+{\n+  save_parms ();\n+}\n+\n+void __attribute__ ((noinline)) fciiedl_check (char *s, int i, int j, ...)\n {\n   stack_frame_t *sp;\n-  reg_parms_t lparms;\n   va_list arg;\n   double d;\n   long l;\n-  save_parms (lparms);\n \n   va_start (arg, j);\n \n-  if (s != (char *) lparms.gprs[0])\n+  if (s != (char *) gparms.gprs[0])\n     abort ();\n \n-  if ((long) i != lparms.gprs[1])\n+  if ((long) i != gparms.gprs[1])\n     abort ();\n \n-  if ((long) j != lparms.gprs[2])\n+  if ((long) j != gparms.gprs[2])\n     abort ();\n \n   d = va_arg (arg, double);\n@@ -286,48 +304,51 @@ typedef union\n void __attribute__ ((noinline))\n fididisdsid (int c, double ff, int d, double ld, int f,\n \t     sparm s, double gg, sparm t, int e, double hh)\n+{\n+  save_parms ();\n+}\n+\n+void\n+fididisdsid_check (int c, double ff, int d, double ld, int f,\n+\t\t   sparm s, double gg, sparm t, int e, double hh)\n {\n   stack_frame_t *sp;\n-  reg_parms_t lparms;\n   double_t dx, dy;\n \n-  save_parms (lparms);\n-\n   /* Parm 0: int.  */\n-  if ((long) c != lparms.gprs[0])\n+  if ((long) c != gparms.gprs[0])\n     abort ();\n \n   /* Parm 1: double.  */\n-  if (ff != lparms.fprs[0])\n+  if (ff != gparms.fprs[0])\n     abort ();\n \n   /* Parm 2: int.  */\n-  if ((long) d != lparms.gprs[2])\n+  if ((long) d != gparms.gprs[2])\n     abort ();\n \n   /* Parm 3: double.  */\n-  if (ld != lparms.fprs[1])\n+  if (ld != gparms.fprs[1])\n     abort ();\n \n   /* Parm 4: int.  */\n-  if ((long) f != lparms.gprs[4])\n+  if ((long) f != gparms.gprs[4])\n     abort ();\n \n   /* Parm 5: struct sparm.  */\n-  dx.l = lparms.gprs[5];\n-  dy.l = lparms.gprs[6];\n+  dx.l = gparms.gprs[5];\n+  dy.l = gparms.gprs[6];\n \n   if (s.a != dx.i[0])\n     abort ();\n   if (s.dd != dy.d)\n     abort ();\n \n   /* Parm 6: double.  */\n-  if (gg != lparms.fprs[2])\n+  if (gg != gparms.fprs[2])\n     abort ();\n \n-  sp = __builtin_frame_address (0);\n-  sp = sp->backchain;\n+  sp = ((stack_frame_t*)__builtin_frame_address (0))->backchain;\n \n   /* Parm 7: struct sparm.  */\n   dx.l = sp->slot[8].l;\n@@ -343,7 +364,7 @@ fididisdsid (int c, double ff, int d, double ld, int f,\n \n   /* Parm 9: double.  */\n \n-  if (hh != lparms.fprs[3])\n+  if (hh != gparms.fprs[3])\n     abort ();\n }\n \n@@ -352,15 +373,17 @@ main ()\n {\n   char *s = \"ii\";\n \n-  fcld (s, 1, 1.0);\n-  fcldi (s, 1, 1.0, -2);\n-  fcldu (s, 1, 1.0, 2);\n-  fceld (s, 1, 1.0);\n-  fciiedl (s, 1, 2, 1.0, 3);\n-  fididisdsid (1, 1.0, 2, 2.0, -1, (sparm)\n-\t       {\n-\t       3, 3.0}, 4.0, (sparm)\n-\t       {\n-\t       5, 5.0}, 6, 7.0);\n+#define ABI_CHECK(func, args) \\\n+  func args, func ## _check args\n+\n+  ABI_CHECK (fcld, (s, 1, 1.0));\n+  ABI_CHECK (fcldi, (s, 1, 1.0, -2));\n+  ABI_CHECK (fcldu, (s, 1, 1.0, 2));\n+  ABI_CHECK (fceld, (s, 1, 1.0));\n+  ABI_CHECK (fciiedl, (s, 1, 2, 1.0, 3));\n+  ABI_CHECK (fididisdsid, (1, 1.0, 2, 2.0, -1,\n+\t\t\t   (sparm){3, 3.0}, 4.0, (sparm){5, 5.0},\n+\t\t\t   6, 7.0));\n+\n   return 0;\n }"}]}