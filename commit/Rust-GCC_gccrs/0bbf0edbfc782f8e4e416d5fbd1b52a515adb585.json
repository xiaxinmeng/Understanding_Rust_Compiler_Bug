{"sha": "0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiZjBlZGJmYzc4MmY4ZTRlNDE2ZDVmYmQxYjUyYTUxNWFkYjU4NQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-31T02:54:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-31T02:54:37Z"}, "message": "c++: placeholder type constraint and argument pack [PR99815]\n\nWhen checking dependence of a placeholder type constraint, if the first\ntemplate argument of the constraint is an argument pack, we need to\nexpand it in order to properly separate the implicit 'auto' argument\nfrom the rest.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99815\n\t* pt.c (placeholder_type_constraint_dependent_p): Expand\n\targument packs to separate the first non-pack argument\n\tfrom the rest.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99815\n\t* g++.dg/cpp2a/concepts-placeholder5.C: New test.", "tree": {"sha": "aeb995df7e895e1883c7959b486e5faf33d3f00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb995df7e895e1883c7959b486e5faf33d3f00b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585/comments", "author": null, "committer": null, "parents": [{"sha": "08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "dc6f2f37f9bb1548283fe7df1148c0a441251a76", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "patch": "@@ -28189,6 +28189,11 @@ placeholder_type_constraint_dependent_p (tree t)\n   tree id = unpack_concept_check (t);\n   tree args = TREE_OPERAND (id, 1);\n   tree first = TREE_VEC_ELT (args, 0);\n+  if (ARGUMENT_PACK_P (first))\n+    {\n+      args = expand_template_argument_pack (args);\n+      first = TREE_VEC_ELT (args, 0);\n+    }\n   gcc_checking_assert (TREE_CODE (first) == WILDCARD_DECL\n \t\t       || is_auto (first));\n   for (int i = 1; i < TREE_VEC_LENGTH (args); ++i)"}, {"sha": "eaea41a36eb69136b05e57ebe2bb11ea8117d75a", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder5.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder5.C?ref=0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/99815\n+// { dg-do compile { target c++20 } }\n+\n+template <class T, class U>\n+struct is_same { static constexpr bool value = false; };\n+\n+template <class T>\n+struct is_same<T, T> { static constexpr bool value = true; };\n+\n+template <class... Ts>\n+concept C = is_same<Ts...>::value; // { dg-error \"wrong number\" }\n+\n+template <class... Ts> void f() {\n+  C<Ts...> auto x = 0; // { dg-error \"constraints\" }\n+}\n+\n+template void f<int>(); // { dg-bogus \"\" }\n+template void f<char>(); // { dg-message \"required from here\" }\n+template void f<>(); // { dg-message \"required from here\" }\n+template void f<int, int>(); // { dg-message \"required from here\" }\n+\n+template <class... Ts> void g() {\n+  C<Ts..., int> auto x = 0; // { dg-error \"constraints\" }\n+}\n+\n+template void g<>(); // { dg-bogus \"\" }\n+template void g<int>(); // { dg-message \"required from here\" }\n+\n+template <class> void h() {\n+  C<char> auto x = 0; // { dg-error \"constraints\" }\n+  C<int> auto y = 0;\n+}"}]}