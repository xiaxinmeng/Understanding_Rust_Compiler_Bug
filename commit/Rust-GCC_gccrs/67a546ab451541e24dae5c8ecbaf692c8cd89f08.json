{"sha": "67a546ab451541e24dae5c8ecbaf692c8cd89f08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhNTQ2YWI0NTE1NDFlMjRkYWU1YzhlY2JhZjY5MmM4Y2Q4OWYwOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-07-14T01:22:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-07-14T01:22:25Z"}, "message": "compiler,runtime: Determine if allocations need new pointers in runtime.\n\n    \n    As the removed comment states, if the package being compiled played\n    certain tricks with pointers that looked like integers, the compiler\n    might allocate space for new pointers unnecessarily.  Since the type\n    information on the heap is now precise, this logic can be moved to the\n    runtime.\n    \n    Reviewed-on: https://go-review.googlesource.com/11581\n\nFrom-SVN: r225757", "tree": {"sha": "b317e5c995b24230c3a354dfb57ea03905f419de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b317e5c995b24230c3a354dfb57ea03905f419de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67a546ab451541e24dae5c8ecbaf692c8cd89f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a546ab451541e24dae5c8ecbaf692c8cd89f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a546ab451541e24dae5c8ecbaf692c8cd89f08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a546ab451541e24dae5c8ecbaf692c8cd89f08/comments", "author": null, "committer": null, "parents": [{"sha": "d8b6e6a172f6ab862c47dabbab6b1832cd49b1ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b6e6a172f6ab862c47dabbab6b1832cd49b1ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b6e6a172f6ab862c47dabbab6b1832cd49b1ee"}], "stats": {"total": 27, "additions": 4, "deletions": 23}, "files": [{"sha": "9a5a2f9df5044400b0ca2fcdf4acb0b59cf64c9a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a546ab451541e24dae5c8ecbaf692c8cd89f08/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a546ab451541e24dae5c8ecbaf692c8cd89f08/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=67a546ab451541e24dae5c8ecbaf692c8cd89f08", "patch": "@@ -1,4 +1,4 @@\n-83191e8e2cb9f47f7c1e6bcb9997f21163292612\n+2c985e4781691fea3eb4171de85265bfbc4e4997\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ad4672ffe059a20cf292b34dab535538a02e2724", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a546ab451541e24dae5c8ecbaf692c8cd89f08/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a546ab451541e24dae5c8ecbaf692c8cd89f08/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=67a546ab451541e24dae5c8ecbaf692c8cd89f08", "patch": "@@ -4391,15 +4391,7 @@ Gogo::allocate_memory(Type* type, Location location)\n   Expression* td = Expression::make_type_descriptor(type, location);\n   Expression* size =\n     Expression::make_type_info(type, Expression::TYPE_INFO_SIZE);\n-\n-  // If this package imports unsafe, then it may play games with\n-  // pointers that look like integers.  We should be able to determine\n-  // whether or not to use new pointers in libgo/go-new.c.  FIXME.\n-  bool use_new_pointers = this->imported_unsafe_ || type->has_pointer();\n-  return Runtime::make_call((use_new_pointers\n-\t\t\t     ? Runtime::NEW\n-\t\t\t     : Runtime::NEW_NOPOINTERS),\n-\t\t\t    location, 2, td, size);\n+  return Runtime::make_call(Runtime::NEW, location, 2, td, size);\n }\n \n // Traversal class used to check for return statements."}, {"sha": "2e79263a632da45ec62c5f1e79328d7233f4c317", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a546ab451541e24dae5c8ecbaf692c8cd89f08/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a546ab451541e24dae5c8ecbaf692c8cd89f08/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=67a546ab451541e24dae5c8ecbaf692c8cd89f08", "patch": "@@ -223,10 +223,6 @@ DEF_GO_RUNTIME(REGISTER_GC_ROOTS, \"__go_register_gc_roots\", P1(POINTER), R0())\n // Allocate memory.\n DEF_GO_RUNTIME(NEW, \"__go_new\", P2(TYPE, UINTPTR), R1(POINTER))\n \n-// Allocate memory which can not contain pointers.\n-DEF_GO_RUNTIME(NEW_NOPOINTERS, \"__go_new_nopointers\", P2(TYPE, UINTPTR), R1(POINTER))\n-\n-\n // Start a new goroutine.\n DEF_GO_RUNTIME(GO, \"__go_go\", P2(FUNC_PTR, POINTER), R0())\n "}, {"sha": "01bc2af31211056dd1d0386a2dc293648e68aa62", "filename": "libgo/runtime/go-new.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a546ab451541e24dae5c8ecbaf692c8cd89f08/libgo%2Fruntime%2Fgo-new.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a546ab451541e24dae5c8ecbaf692c8cd89f08/libgo%2Fruntime%2Fgo-new.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new.c?ref=67a546ab451541e24dae5c8ecbaf692c8cd89f08", "patch": "@@ -8,19 +8,12 @@\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n+#include \"go-type.h\"\n \n void *\n __go_new (const struct __go_type_descriptor *td, uintptr_t size)\n {\n   return runtime_mallocgc (size,\n \t\t\t   (uintptr) td | TypeInfo_SingleObject,\n-\t\t\t   0);\n-}\n-\n-void *\n-__go_new_nopointers (const struct __go_type_descriptor *td,  uintptr_t size)\n-{\n-  return runtime_mallocgc (size,\n-\t\t\t   (uintptr) td | TypeInfo_SingleObject,\n-\t\t\t   FlagNoScan);\n+\t\t\t   td->__code & GO_NO_POINTERS ? FlagNoScan : 0);\n }"}]}