{"sha": "b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliNTc1ZTZiNWQyNjgwNmIyZDQ1YzFkNWMzOTJmYTJjMjczNGRlMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-27T12:37:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-27T12:37:15Z"}, "message": "h8300.c (compute_saved_regs): Use a macro instead of a hard register number.\n\n\t* config/h8300/h8300.c (compute_saved_regs): Use a macro\n\tinstead of a hard register number.\n\t(get_shift_alg): Use an enumerated type instead of numbers.\n\t(h8300_shift_needs_scratch_p): Likewise.\n\nFrom-SVN: r57586", "tree": {"sha": "bf4f7ad9f03820a7a6d8029d981ed7a42aace0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4f7ad9f03820a7a6d8029d981ed7a42aace0d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2/comments", "author": null, "committer": null, "parents": [{"sha": "87b8359e65be50ee79b2ededa72fe0eb592d625f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b8359e65be50ee79b2ededa72fe0eb592d625f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b8359e65be50ee79b2ededa72fe0eb592d625f"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "997e37e9a88c3723c1a28429d67f7df62991ee5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "patch": "@@ -1,3 +1,10 @@\n+2002-09-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (compute_saved_regs): Use a macro\n+\tinstead of a hard register number.\n+\t(get_shift_alg): Use an enumerated type instead of numbers.\n+\t(h8300_shift_needs_scratch_p): Likewise.\n+\n 2002-09-26  David S. Miller  <davem@redhat.com>\n \n \tPR optimization/7335"}, {"sha": "0f276dee0af69e296bd57735949a56f50c71e775", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b575e6b5d26806b2d45c1d5c392fa2c2734de2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b9b575e6b5d26806b2d45c1d5c392fa2c2734de2", "patch": "@@ -444,7 +444,7 @@ compute_saved_regs ()\n   int regno;\n \n   /* Construct a bit vector of registers to be pushed/popped.  */\n-  for (regno = 0; regno <= 6; regno++)\n+  for (regno = 0; regno <= FRAME_POINTER_REGNUM; regno++)\n     {\n       if (WORD_REG_USED (regno))\n \tsaved_regs |= 1 << regno;\n@@ -2401,37 +2401,32 @@ get_shift_alg (shift_type, shift_mode, count, info)\n      unsigned int count;\n      struct shift_info *info;\n {\n-  int cpu;\n+  enum h8_cpu cpu;\n \n   /* Find the target CPU.  */\n   if (TARGET_H8300)\n-    cpu = 0;\n+    cpu = H8_300;\n   else if (TARGET_H8300H)\n-    cpu = 1;\n+    cpu = H8_300H;\n   else\n-    cpu = 2;\n+    cpu = H8_S;\n \n   /* Find the shift algorithm.  */\n+  info->alg = SHIFT_LOOP;\n   switch (shift_mode)\n     {\n     case QIshift:\n-      if (GET_MODE_BITSIZE (QImode) <= count)\n-\tinfo->alg = SHIFT_LOOP;\n-      else\n+      if (count < GET_MODE_BITSIZE (QImode))\n \tinfo->alg = shift_alg_qi[cpu][shift_type][count];\n       break;\n \n     case HIshift:\n-      if (GET_MODE_BITSIZE (HImode) <= count)\n-\tinfo->alg = SHIFT_LOOP;\n-      else\n+      if (count < GET_MODE_BITSIZE (HImode))\n \tinfo->alg = shift_alg_hi[cpu][shift_type][count];\n       break;\n \n     case SIshift:\n-      if (GET_MODE_BITSIZE (SImode) <= count)\n-\tinfo->alg = SHIFT_LOOP;\n-      else\n+      if (count < GET_MODE_BITSIZE (SImode))\n \tinfo->alg = shift_alg_si[cpu][shift_type][count];\n       break;\n \n@@ -2773,19 +2768,19 @@ h8300_shift_needs_scratch_p (count, mode)\n      int count;\n      enum machine_mode mode;\n {\n-  int cpu;\n+  enum h8_cpu cpu;\n   int a, lr, ar;\n \n   if (GET_MODE_BITSIZE (mode) <= count)\n     return 1;\n \n   /* Find out the target CPU.  */\n   if (TARGET_H8300)\n-    cpu = 0;\n+    cpu = H8_300;\n   else if (TARGET_H8300H)\n-    cpu = 1;\n+    cpu = H8_300H;\n   else\n-    cpu = 2;\n+    cpu = H8_S;\n \n   /* Find the shift algorithm.  */\n   switch (mode)"}]}