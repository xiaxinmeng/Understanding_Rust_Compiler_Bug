{"sha": "9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlOTM0ODRlZGUxZWRiOGFkZTdkMTZkOGFjOTVmZGE4OTQ0YWFlNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-22T18:35:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-22T18:35:53Z"}, "message": "re PR target/58779 (wrong code at -O1 on x86_64-linux-gnu)\n\n\tPR target/58779\n\t* config/i386/i386.c (put_condition_code) <case GTU, case LEU>:\n\tRemove CCCmode handling.\n\t<case LTU>: Return 'c' suffix for CCCmode.\n\t<case GEU>: Return 'nc' suffix for CCCmode.\n\t(ix86_cc_mode) <case GTU, case LEU>: Do not generate overflow checks.\n\t* config/i386/i386.md (*sub<mode>3_cconly_overflow): Remove.\n\t(*sub<mode>3_cc_overflow): Ditto.\n\t(*subsi3_zext_cc_overflow): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/58779\n\t* gcc.target/i386/pr30315.c: Remove MINUSCC, DECCC, MINUSCCONLY\n\tand MINUSCCZEXT defines. Update scan-assembler dg directive.\n\t* gcc.dg/torture/pr58779.c: New test.\n\nFrom-SVN: r203935", "tree": {"sha": "5ba440cd2b2d392980dee160ec036167afb2b1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ba440cd2b2d392980dee160ec036167afb2b1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/comments", "author": null, "committer": null, "parents": [{"sha": "fb61ee69c3540ec12d874e436c5ae96a46cb14df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb61ee69c3540ec12d874e436c5ae96a46cb14df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb61ee69c3540ec12d874e436c5ae96a46cb14df"}], "stats": {"total": 149, "additions": 62, "deletions": 87}, "files": [{"sha": "3f96894f7c32832cbe0b6d894bbcc1911ffc47ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "patch": "@@ -1,3 +1,15 @@\n+2013-10-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/58779\n+\t* config/i386/i386.c (put_condition_code) <case GTU, case LEU>:\n+\tRemove CCCmode handling.\n+\t<case LTU>: Return 'c' suffix for CCCmode.\n+\t<case GEU>: Return 'nc' suffix for CCCmode.\n+\t(ix86_cc_mode) <case GTU, case LEU>: Do not generate overflow checks.\n+\t* config/i386/i386.md (*sub<mode>3_cconly_overflow): Remove.\n+\t(*sub<mode>3_cc_overflow): Ditto.\n+\t(*subsi3_zext_cc_overflow): Ditto.\n+\n 2013-10-22  Steve Ellcey  <sellcey@mips.com>\n \n \t* config/mips/mips.c (mips_rtx_costs):  Fix cost estimate for nor"}, {"sha": "73049b9466c9832b4faab60e5edd2b64b954d711", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "patch": "@@ -14103,8 +14103,6 @@ put_condition_code (enum rtx_code code, enum machine_mode mode, bool reverse,\n \t Those same assemblers have the same but opposite lossage on cmov.  */\n       if (mode == CCmode)\n \tsuffix = fp ? \"nbe\" : \"a\";\n-      else if (mode == CCCmode)\n-\tsuffix = \"b\";\n       else\n \tgcc_unreachable ();\n       break;\n@@ -14126,8 +14124,12 @@ put_condition_code (enum rtx_code code, enum machine_mode mode, bool reverse,\n \t}\n       break;\n     case LTU:\n-      gcc_assert (mode == CCmode || mode == CCCmode);\n-      suffix = \"b\";\n+      if (mode == CCmode)\n+\tsuffix = \"b\";\n+      else if (mode == CCCmode)\n+\tsuffix = \"c\";\n+      else\n+\tgcc_unreachable ();\n       break;\n     case GE:\n       switch (mode)\n@@ -14147,20 +14149,20 @@ put_condition_code (enum rtx_code code, enum machine_mode mode, bool reverse,\n \t}\n       break;\n     case GEU:\n-      /* ??? As above.  */\n-      gcc_assert (mode == CCmode || mode == CCCmode);\n-      suffix = fp ? \"nb\" : \"ae\";\n+      if (mode == CCmode)\n+\tsuffix = fp ? \"nb\" : \"ae\";\n+      else if (mode == CCCmode)\n+\tsuffix = \"nc\";\n+      else\n+\tgcc_unreachable ();\n       break;\n     case LE:\n       gcc_assert (mode == CCmode || mode == CCGCmode || mode == CCNOmode);\n       suffix = \"le\";\n       break;\n     case LEU:\n-      /* ??? As above.  */\n       if (mode == CCmode)\n \tsuffix = \"be\";\n-      else if (mode == CCCmode)\n-\tsuffix = fp ? \"nb\" : \"ae\";\n       else\n \tgcc_unreachable ();\n       break;\n@@ -18862,12 +18864,7 @@ ix86_cc_mode (enum rtx_code code, rtx op0, rtx op1)\n \treturn CCmode;\n     case GTU:\t\t\t/* CF=0 & ZF=0 */\n     case LEU:\t\t\t/* CF=1 | ZF=1 */\n-      /* Detect overflow checks.  They need just the carry flag.  */\n-      if (GET_CODE (op0) == MINUS\n-\t  && rtx_equal_p (op1, XEXP (op0, 0)))\n-\treturn CCCmode;\n-      else\n-\treturn CCmode;\n+      return CCmode;\n       /* Codes possibly doable only with sign flag when\n          comparing against zero.  */\n     case GE:\t\t\t/* SF=OF   or   SF=0 */"}, {"sha": "d06de40b927e5123734949344b91d3788a3dd91f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "patch": "@@ -6489,7 +6489,7 @@\n    (set_attr \"use_carry\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n-;; Overflow setting add and subtract instructions\n+;; Overflow setting add instructions\n \n (define_insn \"*add<mode>3_cconly_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -6504,43 +6504,31 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*sub<mode>3_cconly_overflow\"\n+(define_insn \"*add<mode>3_cc_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (minus:SWI\n-\t    (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>m,<r>\")\n-\t    (match_operand:SWI 1 \"<general_operand>\" \"<r><i>,<r>m\"))\n-\t  (match_dup 0)))]\n-  \"\"\n-  \"cmp{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<plusminus_insn><mode>3_cc_overflow\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t    (plusminus:SWI\n-\t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"<comm>0,0\")\n+\t    (plus:SWI\n+\t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))\n \t    (match_dup 1)))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n-\t(plusminus:SWI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<plusminus_mnemonic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+\t(plus:SWI (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<plusminus_insn>si3_zext_cc_overflow\"\n+(define_insn \"*addsi3_zext_cc_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n-\t  (plusminus:SI\n-\t    (match_operand:SI 1 \"nonimmediate_operand\" \"<comm>0\")\n+\t  (plus:SI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n \t    (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))\n \t  (match_dup 1)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (plusminus:SI (match_dup 1) (match_dup 2))))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<plusminus_mnemonic>{l}\\t{%2, %k0|%k0, %2}\"\n+\t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n+  \"add{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n "}, {"sha": "58639a21e7697ad4fdf615a7027e0add0d2fa66d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "patch": "@@ -1,3 +1,10 @@\n+2013-10-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/58779\n+\t* gcc.target/i386/pr30315.c: Remove MINUSCC, DECCC, MINUSCCONLY\n+\tand MINUSCCZEXT defines. Update scan-assembler dg directive.\n+\t* gcc.dg/torture/pr58779.c: New test.\n+\n 2013-10-22  Steve Ellcey  <sellcey@mips.com>\n \n \t* gcc.target/mips/nor.c: New.\n@@ -27,8 +34,7 @@\n 2013-10-21  Vidya Praveen  <vidyapraveen@arm.com>\n \n \t* gcc.dg/20050922-1.c: Remove stdlib.h and declare abort().\n-\t* gcc.dg/20050922-1.c: Remove stdlib.h and declare abort() and\n-\texit().\n+\t* gcc.dg/20050922-1.c: Remove stdlib.h and declare abort() and exit().\n \n 2013-10-21  Richard Biener  <rguenther@suse.de>\n \n@@ -228,8 +234,8 @@\n \n 2013-10-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n-\t* gcc.dg/torture/pr58670.c (ASM_STR) [__i386__ || __x86_64__]: Use\n-\tbtsl.\n+\t* gcc.dg/torture/pr58670.c (ASM_STR) [__i386__ || __x86_64__]:\n+\tUse btsl.\n \n 2013-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "b0c0c869513009d36ba6f1667a51c20b29501cd7", "filename": "gcc/testsuite/gcc.dg/torture/pr58779.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58779.c?ref=9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+\n+int a, c;\n+\n+int main ()\n+{\n+  int e = -1;\n+  short d = (c <= 0) ^ e;\n+  if ((unsigned int) a - (a || d) <= (unsigned int) a)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "557b4f75174e145093ff37ceb862429901654218", "filename": "gcc/testsuite/gcc.target/i386/pr30315.c", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30315.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae93484ede1edb8ade7d16d8ac95fda8944aae4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30315.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30315.c?ref=9ae93484ede1edb8ade7d16d8ac95fda8944aae4", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-final { scan-assembler-times \"cmp\" 4 } } */\n+/* { dg-final { scan-assembler-not \"cmp\" } } */\n \n extern void abort (void);\n int c;\n@@ -34,39 +34,10 @@ void pluscconly##t##C (T a, T b)\t\\\n }\n #define PLUSCCONLY(T, t) PLUSCCONLY1(T, t, a) PLUSCCONLY1(T, t, b)\n \n-#define MINUSCC(T, t)\t\\\n-T minuscc##t (T a, T b)\t\\\n-{\t\\\n-  T difference = a - b;\t\\\n-  if (difference > a)\t\\\n-    abort ();\t\t\\\n-  return difference;\t\\\n-}\n-\n-#define DECCC(T, t)\t\\\n-T deccc##t (T a, T b)\t\\\n-{\t\\\n-  T difference = a - b;\t\\\n-  if (difference > a)\t\\\n-    c --;\t\t\\\n-  return difference;\t\\\n-}\n-\n-#define MINUSCCONLY(T, t)\t\\\n-void minuscconly##t (T a, T b)\t\\\n-{\t\\\n-  T difference = a - b;\t\\\n-  if (difference > a)\t\\\n-    abort ();\t\t\\\n-}\n-\n #define TEST(T, t)\t\\\n   PLUSCC(T, t)\t\t\\\n   PLUSCCONLY(T, t)\t\\\n-  INCCC(T, t)\t\t\\\n-  MINUSCC(T, t)\t\t\\\n-  MINUSCCONLY(T, t)\t\\\n-  DECCC(T, t)\n+  INCCC(T, t)\n \n TEST (unsigned long,  l)\n TEST (unsigned int,   i)\n@@ -84,14 +55,3 @@ unsigned long pluscczext##C (unsigned int a, unsigned int b)\t\\\n \n PLUSCCZEXT(a)\n PLUSCCZEXT(b)\n-\n-#define MINUSCCZEXT\t\\\n-unsigned long minuscczext (unsigned int a, unsigned int b)\t\\\n-{\t\\\n-  unsigned int difference = a - b;\t\\\n-  if (difference > a)\t\t\\\n-    abort ();\t\t\t\\\n-  return difference;\t\t\\\n-}\n-\n-MINUSCCZEXT"}]}