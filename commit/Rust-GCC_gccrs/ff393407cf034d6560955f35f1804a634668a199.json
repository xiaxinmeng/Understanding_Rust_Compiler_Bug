{"sha": "ff393407cf034d6560955f35f1804a634668a199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzOTM0MDdjZjAzNGQ2NTYwOTU1ZjM1ZjE4MDRhNjM0NjY4YTE5OQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-01-25T18:04:01Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-01-25T18:04:01Z"}, "message": "jvmti.cc (_Jv_JVMTI_GetMethodName): New function.\n\n        * jvmti.cc (_Jv_JVMTI_GetMethodName): New function.\n        (_Jv_JVMTI_Interface): Define GetMethodName.\n        * testsuite/libjava.jvmti/getmethodname.java: New file.\n        * testsuite/libjava.jvmti/natgetmethodname.cc: New file.\n        * testsuite/libjava.jvmti/getmethodname.out: New file.\n\nFrom-SVN: r121179", "tree": {"sha": "f4a5c5e2a3570b0db4fa58b4dfc90580cd568148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a5c5e2a3570b0db4fa58b4dfc90580cd568148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff393407cf034d6560955f35f1804a634668a199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff393407cf034d6560955f35f1804a634668a199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff393407cf034d6560955f35f1804a634668a199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff393407cf034d6560955f35f1804a634668a199/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d52200069f68d9e2ebd4ad4737c40505bfa0d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d52200069f68d9e2ebd4ad4737c40505bfa0d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d52200069f68d9e2ebd4ad4737c40505bfa0d9b"}], "stats": {"total": 237, "additions": 236, "deletions": 1}, "files": [{"sha": "655270591b5ee18b1d8724689fc8b49f159a5090", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff393407cf034d6560955f35f1804a634668a199/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff393407cf034d6560955f35f1804a634668a199/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ff393407cf034d6560955f35f1804a634668a199", "patch": "@@ -1,3 +1,11 @@\n+2007-01-25  Keith Seitz  <keiths@redhat.com>\n+\n+\t* jvmti.cc (_Jv_JVMTI_GetMethodName): New function.\n+\t(_Jv_JVMTI_Interface): Define GetMethodName.\n+\t* testsuite/libjava.jvmti/getmethodname.java: New file.\n+\t* testsuite/libjava.jvmti/natgetmethodname.cc: New file.\n+\t* testsuite/libjava.jvmti/getmethodname.out: New file. \n+\n 2007-01-24  Kyle Galloway  <kgallowa@redhat.com>\n \n     * libjava/testsuite/libjava.jvmti/jvmti-interp.exp: New file."}, {"sha": "f73298417470e8b3dff6f7c63dec20e11e702f0f", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff393407cf034d6560955f35f1804a634668a199/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff393407cf034d6560955f35f1804a634668a199/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=ff393407cf034d6560955f35f1804a634668a199", "patch": "@@ -567,6 +567,48 @@ _Jv_JVMTI_IsFieldSynthetic (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n   return JVMTI_ERROR_NONE;\n }\n \n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetMethodName (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n+\t\t\t char **name_ptr, char **signature_ptr,\n+\t\t\t char **generic_ptr)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n+\n+  if (method == NULL)\n+    return JVMTI_ERROR_INVALID_METHODID;\n+\n+  if (name_ptr != NULL)\n+    {\n+      int len = static_cast<int> (method->name->len ());\n+      *name_ptr = (char *) _Jv_MallocUnchecked (len + 1);\n+      if (*name_ptr == NULL)\n+\treturn JVMTI_ERROR_OUT_OF_MEMORY;\n+      strncpy (*name_ptr, method->name->chars (), len);\n+      (*name_ptr)[len] = '\\0';\n+    }\n+\n+  if (signature_ptr != NULL)\n+    {\n+      int len = static_cast<int> (method->signature->len ());\n+      *signature_ptr = (char *) _Jv_MallocUnchecked (len + 1);\n+      if (*signature_ptr == NULL)\n+\t{\n+\t  if (name_ptr != NULL)\n+\t    _Jv_Free (*name_ptr);\n+\t  return JVMTI_ERROR_OUT_OF_MEMORY;\n+\t}\n+      strncpy (*signature_ptr, method->signature->chars (), len);\n+      (*signature_ptr)[len] = '\\0';\n+    }\n+\n+  if (generic_ptr != NULL)\n+    {\n+      *generic_ptr = NULL;\n+    }\n+\n+  return JVMTI_ERROR_NONE;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_GetMethodModifiers (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n \t\t\t      jint *result)\n@@ -1497,7 +1539,7 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   UNIMPLEMENTED,\t\t// GetFieldDeclaringClass\n   _Jv_JVMTI_GetFieldModifiers,\t// GetFieldModifiers\n   _Jv_JVMTI_IsFieldSynthetic,\t// IsFieldSynthetic\n-  UNIMPLEMENTED,\t\t// GetMethodName\n+  _Jv_JVMTI_GetMethodName,\t// GetMethodName\n   _Jv_JVMTI_GetMethodDeclaringClass,  // GetMethodDeclaringClass\n   _Jv_JVMTI_GetMethodModifiers,\t// GetMethodModifers\n   RESERVED,\t\t\t// reserved67"}, {"sha": "a0e00a98c111d25c4d1ad0d29bf2fb29c8f10d5d", "filename": "libjava/testsuite/libjava.jvmti/getmethodname.java", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff393407cf034d6560955f35f1804a634668a199/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetmethodname.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff393407cf034d6560955f35f1804a634668a199/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetmethodname.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetmethodname.java?ref=ff393407cf034d6560955f35f1804a634668a199", "patch": "@@ -0,0 +1,10 @@\n+public class getmethodname\n+{\n+  public static native void do_getmethodname_tests ();\n+\n+  public static void main (String[] args)\n+  {\n+    System.out.println (\"JVMTI GetMethodName tests\");\n+    do_getmethodname_tests ();\n+  }\n+}"}, {"sha": "3f1a9ca148b6abff06e664e9b47f507da02b842f", "filename": "libjava/testsuite/libjava.jvmti/getmethodname.out", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff393407cf034d6560955f35f1804a634668a199/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetmethodname.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff393407cf034d6560955f35f1804a634668a199/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetmethodname.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetmethodname.out?ref=ff393407cf034d6560955f35f1804a634668a199", "patch": "@@ -0,0 +1,59 @@\n+JVMTI GetMethodName tests\n+null jmethodID: invalid method ID\n+GetClassMethods: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+GetMethodName - name: none\n+GetMethodName - signature: none\n+GetMethodName - generic: none\n+name=clone, signature=()Ljava.lang.Object;, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=equals, signature=(Ljava.lang.Object;)Z, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=finalize, signature=()V, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=getClass, signature=()Ljava.lang.Class;, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=hashCode, signature=()I, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=notify, signature=()V, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=notifyAll, signature=()V, generic=null\n+names match\n+signatures match\n+generic not yet\n+name=toString, signature=()Ljava.lang.String;, generic=null\n+names match\n+signatures match\n+generic not yet"}, {"sha": "3d759d58dd48c094c3be14d17c138e6e06a69ac2", "filename": "libjava/testsuite/libjava.jvmti/natgetmethodname.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff393407cf034d6560955f35f1804a634668a199/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatgetmethodname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff393407cf034d6560955f35f1804a634668a199/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatgetmethodname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatgetmethodname.cc?ref=ff393407cf034d6560955f35f1804a634668a199", "patch": "@@ -0,0 +1,116 @@\n+#include <gcj/cni.h>\n+\n+#include <jvm.h>\n+#include <jvmti.h>\n+#include <stdio.h>\n+\n+#include <java/lang/Object.h>\n+\n+#include \"getmethodname.h\"\n+\n+static void\n+print_error (jvmtiEnv *env, const char *msg,  jvmtiError err)\n+{\n+  char *error_msg;\n+  env->GetErrorName (err, &error_msg);\n+  printf (\"%s: %s\\n\", msg, error_msg);\n+  env->Deallocate (reinterpret_cast<unsigned char *> (error_msg));\n+}\n+\n+#define NUM_METHODS 8\n+static const char *function_names[] = { \"clone\",\n+\t\t\t\t\t\"equals\",\n+\t\t\t\t\t\"finalize\",\n+\t\t\t\t\t\"getClass\",\n+\t\t\t\t\t\"hashCode\",\n+\t\t\t\t\t\"notify\",\n+\t\t\t\t\t\"notifyAll\",\n+\t\t\t\t\t\"toString\" };\n+static int\n+function_index (const char *name)\n+{\n+  for (int i = 0; i < NUM_METHODS; ++i)\n+    {\n+      if (strcmp (function_names[i], name) == 0)\n+\treturn i;\n+    }\n+\n+  return -1;\n+}\n+\n+void\n+getmethodname::do_getmethodname_tests ()\n+{\n+  jvmtiEnv *env;\n+  JavaVM *vm = _Jv_GetJavaVM ();\n+  vm->GetEnv (reinterpret_cast<void **> (&env), JVMTI_VERSION_1_0);\n+\n+  jvmtiError err;\n+  err = env->GetMethodName (reinterpret_cast<jmethodID> (NULL),\n+\t\t\t    reinterpret_cast<char **> (NULL),\n+\t\t\t    reinterpret_cast<char **> (NULL),\n+\t\t\t    reinterpret_cast<char **> (NULL));\n+  print_error (env, \"null jmethodID\", err);\n+\n+  jint count;\n+  jmethodID *methods;\n+  err = env->GetClassMethods (&java::lang::Object::class$, &count, &methods);\n+  print_error (env, \"GetClassMethods\", err);\n+\n+  char *names[NUM_METHODS], *solo_names[NUM_METHODS];\n+  char *signatures[NUM_METHODS], *solo_signatures[NUM_METHODS];\n+  char *generics[NUM_METHODS], *solo_generics[NUM_METHODS];\n+\n+  for (jint i = 0; i < count; ++i)\n+    {\n+      char *name, *n;\n+      char *signature, *s;\n+      char *generic, *g;\n+      err = env->GetMethodName (methods[i], &name, &signature, &generic);\n+\n+      int idx = -1;\n+      if (err != JVMTI_ERROR_NONE)\n+\t{\n+\t  print_error (env, \"GetMethodName - all fields\", err);\n+\t  continue;\n+\t}\n+\n+      idx = function_index (name);\n+      if (idx == -1)\n+\tcontinue;\n+\n+      names[idx] = name;\n+      signatures[idx] = signature;\n+      generics[idx] = generic;\n+\n+      err = env->GetMethodName (methods[i], &n, NULL, NULL);\n+      print_error (env, \"GetMethodName - name\", err);\n+      solo_names[idx] = n;\n+\n+      err = env->GetMethodName (methods[i], NULL, &s, NULL);\n+      print_error (env, \"GetMethodName - signature\", err);\n+      solo_signatures[idx] = s;\n+\n+      err = env->GetMethodName (methods[i], NULL, NULL, &g);\n+      print_error (env, \"GetMethodName - generic\", err);\n+      solo_generics[idx] = g;\n+    }\n+\n+#define WRAP(X) ((X) == NULL ? \"null\" : (X))\n+#define MATCH(X,Y) (strcmp ((X),(Y)) == 0 ? \"match\" : \"do not match\")\n+  for (int i = 0; i < NUM_METHODS; ++i)\n+    {\n+      printf (\"name=%s, signature=%s, generic=%s\\n\",\n+\t      WRAP (names[i]), WRAP (signatures[i]), WRAP (generics[i]));\n+      printf (\"names %s\\n\", MATCH (solo_names[i], names[i]));\n+      printf (\"signatures %s\\n\", MATCH (solo_signatures[i], signatures[i]));\n+      printf (\"generic %s\\n\", \"not yet\");\n+\n+      env->Deallocate (reinterpret_cast<unsigned char *> (names[i]));\n+      env->Deallocate (reinterpret_cast<unsigned char *> (solo_names[i]));\n+      env->Deallocate (reinterpret_cast<unsigned char *> (signatures[i]));\n+      env->Deallocate (reinterpret_cast<unsigned char *> (solo_signatures[i]));\n+      env->Deallocate (reinterpret_cast<unsigned char *> (generics[i]));\n+      env->Deallocate (reinterpret_cast<unsigned char *> (solo_generics[i]));\n+    }\n+}"}]}