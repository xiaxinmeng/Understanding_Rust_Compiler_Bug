{"sha": "7c919c12be147c72e5d7ef2f9436adadcf2c2f24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5MTljMTJiZTE0N2M3MmU1ZDdlZjJmOTQzNmFkYWRjZjJjMmYyNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-11T08:41:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-11T08:43:38Z"}, "message": "Fix crash on array component with nonstandard index type\n\nThis is a regression present on mainline, 10 and 9 branches: the compiler\ngoes into an infinite recursion eventually exhausting the stack for the\ndeclaration of a discriminated record type with an array component having\na discriminant as bound and an index type that is an enumeration type with\na non-standard representation clause.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Only\n\tcreate extra subtypes for discriminants if the RM size of the base\n\ttype of the index type is lower than that of the index type.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/specs/discr7.ads: New test.", "tree": {"sha": "9bc31f147ed1158535d5d72e82926865f8c38833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc31f147ed1158535d5d72e82926865f8c38833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c919c12be147c72e5d7ef2f9436adadcf2c2f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c919c12be147c72e5d7ef2f9436adadcf2c2f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c919c12be147c72e5d7ef2f9436adadcf2c2f24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c919c12be147c72e5d7ef2f9436adadcf2c2f24/comments", "author": null, "committer": null, "parents": [{"sha": "e898facaf3cceb6c31bd34511b117c907b18a3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e898facaf3cceb6c31bd34511b117c907b18a3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e898facaf3cceb6c31bd34511b117c907b18a3e9"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "2b7392c62c0889a8e868a97c3918b72e1bcb1a03", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c919c12be147c72e5d7ef2f9436adadcf2c2f24/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c919c12be147c72e5d7ef2f9436adadcf2c2f24/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7c919c12be147c72e5d7ef2f9436adadcf2c2f24", "patch": "@@ -2480,17 +2480,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      tree gnu_base_orig_max = TYPE_MAX_VALUE (gnu_base_index_type);\n \t      tree gnu_min, gnu_max, gnu_high;\n \n-\t      /* We try to define subtypes for discriminants used as bounds\n-\t\t that are more restrictive than those declared by using the\n+\t      /* We try to create subtypes for discriminants used as bounds\n+\t\t that are more restrictive than those declared, by using the\n \t\t bounds of the index type of the base array type.  This will\n \t\t make it possible to calculate the maximum size of the record\n \t\t type more conservatively.  This may have already been done by\n \t\t the front-end (Exp_Ch3.Adjust_Discriminants), in which case\n \t\t there will be a conversion that needs to be removed first.  */\n \t      if (CONTAINS_PLACEHOLDER_P (gnu_orig_min)\n \t\t  && TYPE_RM_SIZE (gnu_base_index_type)\n-\t\t  && !tree_int_cst_lt (TYPE_RM_SIZE (gnu_index_type),\n-\t\t\t\t       TYPE_RM_SIZE (gnu_base_index_type)))\n+\t\t  && tree_int_cst_lt (TYPE_RM_SIZE (gnu_base_index_type),\n+\t\t\t\t      TYPE_RM_SIZE (gnu_index_type)))\n \t\t{\n \t\t  gnu_orig_min = remove_conversions (gnu_orig_min, false);\n \t\t  TREE_TYPE (gnu_orig_min)\n@@ -2501,8 +2501,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t      if (CONTAINS_PLACEHOLDER_P (gnu_orig_max)\n \t\t  && TYPE_RM_SIZE (gnu_base_index_type)\n-\t\t  && !tree_int_cst_lt (TYPE_RM_SIZE (gnu_index_type),\n-\t\t\t\t       TYPE_RM_SIZE (gnu_base_index_type)))\n+\t\t  && tree_int_cst_lt (TYPE_RM_SIZE (gnu_base_index_type),\n+\t\t\t\t      TYPE_RM_SIZE (gnu_index_type)))\n \t\t{\n \t\t  gnu_orig_max = remove_conversions (gnu_orig_max, false);\n \t\t  TREE_TYPE (gnu_orig_max)"}, {"sha": "ca35ced2e7ae5c680ff42f93f04d8b2600844d47", "filename": "gcc/testsuite/gnat.dg/specs/discr7.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c919c12be147c72e5d7ef2f9436adadcf2c2f24/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c919c12be147c72e5d7ef2f9436adadcf2c2f24/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr7.ads?ref=7c919c12be147c72e5d7ef2f9436adadcf2c2f24", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+\n+package Discr7 is\n+\n+  type Enum is (One, Two, Three);\n+  for Enum use (One => 1, Two => 2, Three => 3);\n+\n+  type Arr is array (Integer range <>, Enum range <>) of Boolean;\n+\n+  type Rec (D : Integer) is record\n+    A: Arr (1 .. D, Enum'Range);\n+  end record;\n+\n+end Discr7;"}]}