{"sha": "3801c801f35ca5e0c52b437161141c251aa33daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwMWM4MDFmMzVjYTVlMGM1MmI0MzcxNjExNDFjMjUxYWEzM2RhZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-06-21T14:16:39Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-06-21T14:16:39Z"}, "message": "Makefile.in (lib2funcs): Add _clrsbsi2 and _clrsbdi2.\n\n\tlibgcc/\n\t* Makefile.in (lib2funcs): Add _clrsbsi2 and _clrsbdi2.\n\t* libgcc-std.ver.in (GCC_4.7.0): New section.\n\n\tgcc/\n\t* doc/extend.texi (__builtin_clrsb, __builtin_clrsbl,\n\t__builtin_clrsbll): Document.\n\t* doc/rtl.texi (clrsb): New entry.\n\t* optabs.c (widen_leading): Renamed from widen_clz.  New argument\n\tUNOPTAB.  All callers changed.  Use UNOPTAB instead of clz_optab.\n\t(expand_unop): Handle clrsb_optab.\n\t(init_optabs): Initialize it.\n\t* optabs.h (enum optab_index): New entry OTI_clrsb.\n\t(clrsb_optab): Define.\n\t* genopinit.c (optabs): Add an entry for it.\n\t* builtins.c (expand_builtin): Handle clrsb builtin functions.\n\t* builtins.def (BUILT_IN_CLRSB, BUILT_IN_CLRSBIMAX, BUILT_IN_CLRSBL,\n\tBUILT_IN_CLRSBLL): New.\n\t* rtl.def (CLRSB): New code.\n\t* dwarf2out.c (mem_loc_descriptor): Handle it.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n\tUse op_mode rather than mode when optimizing ffs, clz, ctz, parity\n\tand popcount.\n\t* libgcc2.c (__clrsbSI2, __clrsbDI2): New functions.\n\t* libgcc2.h (__clrsbSI2, __clrsbDI2): Define and declare.\n\t(__ctzDI2): Move declaration.\n\t* config/bfin/bfin.md (clrsbsi2): New expander.\n\t(signbitssi2): Use the CLRSB rtx.\n\t(clrsbhi2): Renamed from signbitshi2.  Use the CLRSB rtx.\n\t* config/bfin/bfin.c (bdesc_1arg): Changed accordingly.\n\n\tgcc/testsuite/\n\t* gcc.c-torture/excute/builtin-bitops-1.c (MAKE_FUNS): Make\n\tmy_clrsb test functions.\n\t(main): Test clrsb.\n\t* gcc.dg/builtin-protos-1.c (test_s, test_u, test_sl, test_ul,\n\ttest_sll, test_ull): Add clrsb tests.\n\t* gcc.dg/torture/builtin-attr-1.c: Add tests for clrsb, clrsbl,\n\tclrsbll.\n\nFrom-SVN: r175261", "tree": {"sha": "ee32816cbc97cc6b5823412e083d7944b01b96a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee32816cbc97cc6b5823412e083d7944b01b96a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3801c801f35ca5e0c52b437161141c251aa33daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3801c801f35ca5e0c52b437161141c251aa33daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3801c801f35ca5e0c52b437161141c251aa33daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3801c801f35ca5e0c52b437161141c251aa33daf/comments", "author": null, "committer": null, "parents": [{"sha": "95f5c7757f027c4c9afbb97a7a24be0cc9ad7841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f5c7757f027c4c9afbb97a7a24be0cc9ad7841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f5c7757f027c4c9afbb97a7a24be0cc9ad7841"}], "stats": {"total": 264, "additions": 232, "deletions": 32}, "files": [{"sha": "af173123600745eb701cb969433759d77e612f62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -1,3 +1,31 @@\n+2011-06-21  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* doc/extend.texi (__builtin_clrsb, __builtin_clrsbl,\n+\t__builtin_clrsbll): Document.\n+\t* doc/rtl.texi (clrsb): New entry.\n+\t* optabs.c (widen_leading): Renamed from widen_clz.  New argument\n+\tUNOPTAB.  All callers changed.  Use UNOPTAB instead of clz_optab.\n+\t(expand_unop): Handle clrsb_optab.\n+\t(init_optabs): Initialize it.\n+\t* optabs.h (enum optab_index): New entry OTI_clrsb.\n+\t(clrsb_optab): Define.\n+\t* genopinit.c (optabs): Add an entry for it.\n+\t* builtins.c (expand_builtin): Handle clrsb builtin functions.\n+\t* builtins.def (BUILT_IN_CLRSB, BUILT_IN_CLRSBIMAX, BUILT_IN_CLRSBL,\n+\tBUILT_IN_CLRSBLL): New.\n+\t* rtl.def (CLRSB): New code.\n+\t* dwarf2out.c (mem_loc_descriptor): Handle it.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n+\tUse op_mode rather than mode when optimizing ffs, clz, ctz, parity\n+\tand popcount.\n+\t* libgcc2.c (__clrsbSI2, __clrsbDI2): New functions.\n+\t* libgcc2.h (__clrsbSI2, __clrsbDI2): Define and declare.\n+\t(__ctzDI2): Move declaration.\n+\t* config/bfin/bfin.md (clrsbsi2): New expander.\n+\t(signbitssi2): Use the CLRSB rtx.\n+\t(clrsbhi2): Renamed from signbitshi2.  Use the CLRSB rtx.\n+\t* config/bfin/bfin.c (bdesc_1arg): Changed accordingly.\n+\n 2011-06-21  Richard Guenther  <rguenther@suse.de>\n \n \t* ipa-inline-transform.c (inline_transform): Fix previous"}, {"sha": "8fc5ac34e541b37276868e691e3769df4f0e9aa5", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -5580,6 +5580,14 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    CASE_INT_FN (BUILT_IN_CLRSB):\n+    case BUILT_IN_CLRSBIMAX:\n+      target = expand_builtin_unop (target_mode, exp, target,\n+\t\t\t\t    subtarget, clrsb_optab);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     CASE_INT_FN (BUILT_IN_POPCOUNT):\n     case BUILT_IN_POPCOUNTIMAX:\n       target = expand_builtin_unop (target_mode, exp, target,"}, {"sha": "30699f3685a3c1a259462aaf2be8d11625a8540a", "filename": "gcc/builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -620,6 +620,10 @@ DEF_GCC_BUILTIN        (BUILT_IN_CTZ, \"ctz\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_\n DEF_GCC_BUILTIN        (BUILT_IN_CTZIMAX, \"ctzimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CTZL, \"ctzl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CTZLL, \"ctzll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLRSB, \"clrsb\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLRSBIMAX, \"clrsbimax\", BT_FN_INT_INTMAX, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLRSBL, \"clrsbl\", BT_FN_INT_LONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_CLRSBLL, \"clrsbll\", BT_FN_INT_LONGLONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DCGETTEXT, \"dcgettext\", BT_FN_STRING_CONST_STRING_CONST_STRING_INT, ATTR_FORMAT_ARG_2)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DGETTEXT, \"dgettext\", BT_FN_STRING_CONST_STRING_CONST_STRING, ATTR_FORMAT_ARG_2)\n DEF_GCC_BUILTIN        (BUILT_IN_DWARF_CFA, \"dwarf_cfa\", BT_FN_PTR, ATTR_NULL)"}, {"sha": "22fdfb79b15e3b6de8134cdebe6ac1f1f38da6c8", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -5879,11 +5879,11 @@ static const struct builtin_description bdesc_1arg[] =\n \n   { CODE_FOR_ones, \"__builtin_bfin_ones\", BFIN_BUILTIN_ONES, 0 },\n \n-  { CODE_FOR_signbitshi2, \"__builtin_bfin_norm_fr1x16\", BFIN_BUILTIN_NORM_1X16, 0 },\n+  { CODE_FOR_clrsbhi2, \"__builtin_bfin_norm_fr1x16\", BFIN_BUILTIN_NORM_1X16, 0 },\n   { CODE_FOR_ssneghi2, \"__builtin_bfin_negate_fr1x16\", BFIN_BUILTIN_NEG_1X16, 0 },\n   { CODE_FOR_abshi2, \"__builtin_bfin_abs_fr1x16\", BFIN_BUILTIN_ABS_1X16, 0 },\n \n-  { CODE_FOR_signbitssi2, \"__builtin_bfin_norm_fr1x32\", BFIN_BUILTIN_NORM_1X32, 0 },\n+  { CODE_FOR_clrsbsi2, \"__builtin_bfin_norm_fr1x32\", BFIN_BUILTIN_NORM_1X32, 0 },\n   { CODE_FOR_ssroundsi2, \"__builtin_bfin_round_fr1x32\", BFIN_BUILTIN_ROUND_1X32, 0 },\n   { CODE_FOR_ssnegsi2, \"__builtin_bfin_negate_fr1x32\", BFIN_BUILTIN_NEG_1X32, 0 },\n   { CODE_FOR_ssabssi2, \"__builtin_bfin_abs_fr1x32\", BFIN_BUILTIN_ABS_1X32, 0 },"}, {"sha": "a96d1a7bda6849d213b465ea902258a38b6c5588", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -1461,12 +1461,19 @@\n   \"%0 = ~%1;\"\n   [(set_attr \"type\" \"alu0\")])\n \n+(define_expand \"clrsbsi2\"\n+  [(set (match_dup 2)\n+\t(clrsb:HI (match_operand:SI 1 \"register_operand\" \"d\")))\n+   (set (match_operand:SI 0 \"register_operand\")\n+\t(zero_extend:SI (match_dup 2)))]\n+  \"\"\n+{\n+  operands[2] = gen_reg_rtx (HImode);\n+})\n+\n (define_insn \"signbitssi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(if_then_else:HI\n-\t (lt (match_operand:SI 1 \"register_operand\" \"d\") (const_int 0))\n-\t (clz:HI (not:SI (match_dup 1)))\n-\t (clz:HI (match_dup 1))))]\n+\t(clrsb:HI (match_operand:SI 1 \"register_operand\" \"d\")))]\n   \"\"\n   \"%h0 = signbits %1%!\"\n   [(set_attr \"type\" \"dsp32\")])\n@@ -1518,12 +1525,9 @@\n   \"%0 = -%1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"signbitshi2\"\n+(define_insn \"clrsbhi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(if_then_else:HI\n-\t (lt (match_operand:HI 1 \"register_operand\" \"d\") (const_int 0))\n-\t (clz:HI (not:HI (match_dup 1)))\n-\t (clz:HI (match_dup 1))))]\n+\t(clrsb:HI (match_operand:HI 1 \"register_operand\" \"d\")))]\n   \"\"\n   \"%h0 = signbits %h1%!\"\n   [(set_attr \"type\" \"dsp32\")])"}, {"sha": "2d9c689f98f16f263e71b64dd752185fb2378eea", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -7828,6 +7828,12 @@ Returns the number of trailing 0-bits in @var{x}, starting at the least\n significant bit position.  If @var{x} is 0, the result is undefined.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_clrsb (int x)\n+Returns the number of leading redundant sign bits in @var{x}, i.e. the\n+number of bits following the most significant bit which are identical\n+to it.  There are no special cases for 0 or other values. \n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_popcount (unsigned int x)\n Returns the number of 1-bits in @var{x}.\n @end deftypefn\n@@ -7852,6 +7858,11 @@ Similar to @code{__builtin_ctz}, except the argument type is\n @code{unsigned long}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_clrsbl (long)\n+Similar to @code{__builtin_clrsb}, except the argument type is\n+@code{long}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_popcountl (unsigned long)\n Similar to @code{__builtin_popcount}, except the argument type is\n @code{unsigned long}.\n@@ -7877,6 +7888,11 @@ Similar to @code{__builtin_ctz}, except the argument type is\n @code{unsigned long long}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_clrsbll (long long)\n+Similar to @code{__builtin_clrsb}, except the argument type is\n+@code{long long}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_popcountll (unsigned long long)\n Similar to @code{__builtin_popcount}, except the argument type is\n @code{unsigned long long}."}, {"sha": "ea30e38032e771e9cbfd050536535ec7752fb9fd", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -2400,6 +2400,14 @@ zero if @var{x} is zero.)  The mode of @var{x} need not be @var{m};\n depending on the target machine, various mode combinations may be\n valid.\n \n+@findex clrsb\n+@item (clrsb:@var{m} @var{x})\n+Represents the number of redundant leading sign bits in @var{x},\n+represented as an integer of mode @var{m}, starting at the most\n+significant bit position.  This is one less than the number of leading\n+sign bits (either 0 or 1), with no special cases.  The mode of @var{x}\n+will usually be an integer mode and may differ from @var{m}.\n+\n @findex clz\n @item (clz:@var{m} @var{x})\n Represents the number of leading 0-bits in @var{x}, represented as an"}, {"sha": "480e4e06e77e23d903d849b3cf4fc4f9d302c712", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -15377,6 +15377,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n     case STRICT_LOW_PART:\n     case CONST_VECTOR:\n     case CONST_FIXED:\n+    case CLRSB:\n       /* If delegitimize_address couldn't do anything with the UNSPEC, we\n \t can't express it in the debug info.  This can happen e.g. with some\n \t TLS UNSPECs.  */"}, {"sha": "570540dacb0542bd0107e11a5ab58602947a262d", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -199,6 +199,7 @@ static const char * const optabs[] =\n   \"set_optab_handler (ffs_optab, $A, CODE_FOR_$(ffs$a2$))\",\n   \"set_optab_handler (clz_optab, $A, CODE_FOR_$(clz$a2$))\",\n   \"set_optab_handler (ctz_optab, $A, CODE_FOR_$(ctz$a2$))\",\n+  \"set_optab_handler (clrsb_optab, $A, CODE_FOR_$(clrsb$a2$))\",\n   \"set_optab_handler (popcount_optab, $A, CODE_FOR_$(popcount$a2$))\",\n   \"set_optab_handler (parity_optab, $A, CODE_FOR_$(parity$a2$))\",\n   \"set_optab_handler (mov_optab, $A, CODE_FOR_$(mov$a$))\","}, {"sha": "57c40c5800f904d511f3f812aaebc14da774fb47", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -762,7 +762,50 @@ __ctzDI2 (UDWtype x)\n   return ret + add;\n }\n #endif\n+\f\n+#ifdef L_clrsbsi2\n+#undef int\n+int\n+__clrsbSI2 (Wtype x)\n+{\n+  Wtype ret;\n \n+  if (x < 0)\n+    x = ~x;\n+  if (x == 0)\n+    return W_TYPE_SIZE - 1;\n+  count_leading_zeros (ret, x);\n+  return ret - 1;\n+}\n+#endif\n+\f\n+#ifdef L_clrsbdi2\n+#undef int\n+int\n+__clrsbDI2 (DWtype x)\n+{\n+  const DWunion uu = {.ll = x};\n+  UWtype word;\n+  Wtype ret, add;\n+\n+  if (uu.s.high == 0)\n+    word = uu.s.low, add = W_TYPE_SIZE;\n+  else if (uu.s.high == -1)\n+    word = ~uu.s.low, add = W_TYPE_SIZE;\n+  else if (uu.s.high >= 0)\n+    word = uu.s.high, add = 0;\n+  else\n+    word = ~uu.s.high, add = 0;\n+\n+  if (word == 0)\n+    ret = W_TYPE_SIZE;\n+  else\n+    count_leading_zeros (ret, word);\n+\n+  return ret + add - 1;\n+}\n+#endif\n+\f\n #ifdef L_popcount_tab\n const UQItype __popcount_tab[256] =\n {"}, {"sha": "0c7d0e15623be73e9e82ac29a74954e49a5ea775", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -315,11 +315,13 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define __ffsSI2\t__NW(ffs,2)\n #define __clzSI2\t__NW(clz,2)\n #define __ctzSI2\t__NW(ctz,2)\n+#define __clrsbSI2\t__NW(clrsb,2)\n #define __popcountSI2\t__NW(popcount,2)\n #define __paritySI2\t__NW(parity,2)\n #define __ffsDI2\t__NDW(ffs,2)\n #define __clzDI2\t__NDW(clz,2)\n #define __ctzDI2\t__NDW(ctz,2)\n+#define __clrsbDI2\t__NDW(clrsb,2)\n #define __popcountDI2\t__NDW(popcount,2)\n #define __parityDI2\t__NDW(parity,2)\n \n@@ -508,9 +510,11 @@ extern const UQItype __clz_tab[256];\n extern int __clzDI2 (UDWtype);\n extern int __clzSI2 (UWtype);\n extern int __ctzSI2 (UWtype);\n+extern int __ctzDI2 (UDWtype);\n+extern int __clrsbSI2 (Wtype);\n+extern int __clrsbDI2 (DWtype);\n extern int __ffsSI2 (UWtype);\n extern int __ffsDI2 (DWtype);\n-extern int __ctzDI2 (UDWtype);\n extern int __popcountSI2 (UWtype);\n extern int __popcountDI2 (UDWtype);\n extern int __paritySI2 (UWtype);"}, {"sha": "7448450d23643c8b8998de950f908f450877896c", "filename": "gcc/optabs.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -2327,9 +2327,12 @@ expand_simple_unop (enum machine_mode mode, enum rtx_code code, rtx op0,\n /* Try calculating\n \t(clz:narrow x)\n    as\n-\t(clz:wide (zero_extend:wide x)) - ((width wide) - (width narrow)).  */\n+\t(clz:wide (zero_extend:wide x)) - ((width wide) - (width narrow)).\n+\n+   A similar operation can be used for clrsb.  UNOPTAB says which operation\n+   we are trying to expand.  */\n static rtx\n-widen_clz (enum machine_mode mode, rtx op0, rtx target)\n+widen_leading (enum machine_mode mode, rtx op0, rtx target, optab unoptab)\n {\n   enum mode_class mclass = GET_MODE_CLASS (mode);\n   if (CLASS_HAS_WIDER_MODES_P (mclass))\n@@ -2339,7 +2342,7 @@ widen_clz (enum machine_mode mode, rtx op0, rtx target)\n \t   wider_mode != VOIDmode;\n \t   wider_mode = GET_MODE_WIDER_MODE (wider_mode))\n \t{\n-\t  if (optab_handler (clz_optab, wider_mode) != CODE_FOR_nothing)\n+\t  if (optab_handler (unoptab, wider_mode) != CODE_FOR_nothing)\n \t    {\n \t      rtx xop0, temp, last;\n \n@@ -2348,7 +2351,7 @@ widen_clz (enum machine_mode mode, rtx op0, rtx target)\n \t      if (target == 0)\n \t\ttarget = gen_reg_rtx (mode);\n \t      xop0 = widen_operand (op0, wider_mode, mode, true, false);\n-\t      temp = expand_unop (wider_mode, clz_optab, xop0, NULL_RTX, true);\n+\t      temp = expand_unop (wider_mode, unoptab, xop0, NULL_RTX, true);\n \t      if (temp != 0)\n \t\ttemp = expand_binop (wider_mode, sub_optab, temp,\n \t\t\t\t     GEN_INT (GET_MODE_BITSIZE (wider_mode)\n@@ -2844,7 +2847,7 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n   /* Widening (or narrowing) clz needs special treatment.  */\n   if (unoptab == clz_optab)\n     {\n-      temp = widen_clz (mode, op0, target);\n+      temp = widen_leading (mode, op0, target, unoptab);\n       if (temp)\n \treturn temp;\n \n@@ -2856,7 +2859,15 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t    return temp;\n \t}\n \n-\tgoto try_libcall;\n+      goto try_libcall;\n+    }\n+\n+  if (unoptab == clrsb_optab)\n+    {\n+      temp = widen_leading (mode, op0, target, unoptab);\n+      if (temp)\n+\treturn temp;\n+      goto try_libcall;\n     }\n \n   /* Widening (or narrowing) bswap needs special treatment.  */\n@@ -3011,7 +3022,8 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n       /* All of these functions return small values.  Thus we choose to\n \t have them return something that isn't a double-word.  */\n       if (unoptab == ffs_optab || unoptab == clz_optab || unoptab == ctz_optab\n-\t  || unoptab == popcount_optab || unoptab == parity_optab)\n+\t  || unoptab == clrsb_optab || unoptab == popcount_optab\n+\t  || unoptab == parity_optab)\n \toutmode\n \t  = GET_MODE (hard_libcall_value (TYPE_MODE (integer_type_node),\n \t\t\t\t\t  optab_libfunc (unoptab, mode)));\n@@ -5958,6 +5970,7 @@ init_optabs (void)\n   init_optab (ffs_optab, FFS);\n   init_optab (clz_optab, CLZ);\n   init_optab (ctz_optab, CTZ);\n+  init_optab (clrsb_optab, CLRSB);\n   init_optab (popcount_optab, POPCOUNT);\n   init_optab (parity_optab, PARITY);\n   init_optab (sqrt_optab, SQRT);\n@@ -6188,6 +6201,9 @@ init_optabs (void)\n   ctz_optab->libcall_basename = \"ctz\";\n   ctz_optab->libcall_suffix = '2';\n   ctz_optab->libcall_gen = gen_int_libfunc;\n+  clrsb_optab->libcall_basename = \"clrsb\";\n+  clrsb_optab->libcall_suffix = '2';\n+  clrsb_optab->libcall_gen = gen_int_libfunc;\n   popcount_optab->libcall_basename = \"popcount\";\n   popcount_optab->libcall_suffix = '2';\n   popcount_optab->libcall_gen = gen_int_libfunc;"}, {"sha": "477fce356c7e8604ce15838f5a098b424cc96be9", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -220,6 +220,7 @@ enum optab_index\n   OTI_ffs,\n   OTI_clz,\n   OTI_ctz,\n+  OTI_clrsb,\n   OTI_popcount,\n   OTI_parity,\n   /* Square root */\n@@ -456,6 +457,7 @@ enum optab_index\n #define ffs_optab (&optab_table[OTI_ffs])\n #define clz_optab (&optab_table[OTI_clz])\n #define ctz_optab (&optab_table[OTI_ctz])\n+#define clrsb_optab (&optab_table[OTI_clrsb])\n #define popcount_optab (&optab_table[OTI_popcount])\n #define parity_optab (&optab_table[OTI_parity])\n #define sqrt_optab (&optab_table[OTI_sqrt])"}, {"sha": "8f04b2fe3cd2ff360c658f557016509ce781709e", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -613,6 +613,10 @@ DEF_RTL_EXPR(BSWAP, \"bswap\", \"e\", RTX_UNARY)\n    or 0 if arg is 0.  */\n DEF_RTL_EXPR(FFS, \"ffs\", \"e\", RTX_UNARY)\n \n+/* Count number of leading redundant sign bits (number of leading\n+   sign bits minus one).  */\n+DEF_RTL_EXPR(CLRSB, \"clrsb\", \"e\", RTX_UNARY)\n+\n /* Count leading zeros.  */\n DEF_RTL_EXPR(CLZ, \"clz\", \"e\", RTX_UNARY)\n "}, {"sha": "3c4df973ff5053cabf578b82770da88038a10541", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -1211,6 +1211,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t\t\t\trtx op, enum machine_mode op_mode)\n {\n   unsigned int width = GET_MODE_BITSIZE (mode);\n+  unsigned int op_width = GET_MODE_BITSIZE (op_mode);\n \n   if (code == VEC_DUPLICATE)\n     {\n@@ -1321,7 +1322,8 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n     }\n \n   if (CONST_INT_P (op)\n-      && width <= HOST_BITS_PER_WIDE_INT && width > 0)\n+      && width <= HOST_BITS_PER_WIDE_INT\n+      && op_width <= HOST_BITS_PER_WIDE_INT && op_width > 0)\n     {\n       HOST_WIDE_INT arg0 = INTVAL (op);\n       HOST_WIDE_INT val;\n@@ -1341,40 +1343,50 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  break;\n \n \tcase FFS:\n-\t  arg0 &= GET_MODE_MASK (mode);\n+\t  arg0 &= GET_MODE_MASK (op_mode);\n \t  val = ffs_hwi (arg0);\n \t  break;\n \n \tcase CLZ:\n-\t  arg0 &= GET_MODE_MASK (mode);\n-\t  if (arg0 == 0 && CLZ_DEFINED_VALUE_AT_ZERO (mode, val))\n+\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  if (arg0 == 0 && CLZ_DEFINED_VALUE_AT_ZERO (op_mode, val))\n \t    ;\n \t  else\n-\t    val = GET_MODE_BITSIZE (mode) - floor_log2 (arg0) - 1;\n+\t    val = GET_MODE_BITSIZE (op_mode) - floor_log2 (arg0) - 1;\n+\t  break;\n+\n+\tcase CLRSB:\n+\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  if (arg0 == 0)\n+\t    val = GET_MODE_BITSIZE (op_mode) - 1;\n+\t  else if (arg0 >= 0)\n+\t    val = GET_MODE_BITSIZE (op_mode) - floor_log2 (arg0) - 2;\n+\t  else if (arg0 < 0)\n+\t    val = GET_MODE_BITSIZE (op_mode) - floor_log2 (~arg0) - 2;\n \t  break;\n \n \tcase CTZ:\n-\t  arg0 &= GET_MODE_MASK (mode);\n+\t  arg0 &= GET_MODE_MASK (op_mode);\n \t  if (arg0 == 0)\n \t    {\n \t      /* Even if the value at zero is undefined, we have to come\n \t\t up with some replacement.  Seems good enough.  */\n-\t      if (! CTZ_DEFINED_VALUE_AT_ZERO (mode, val))\n-\t\tval = GET_MODE_BITSIZE (mode);\n+\t      if (! CTZ_DEFINED_VALUE_AT_ZERO (op_mode, val))\n+\t\tval = GET_MODE_BITSIZE (op_mode);\n \t    }\n \t  else\n \t    val = ctz_hwi (arg0);\n \t  break;\n \n \tcase POPCOUNT:\n-\t  arg0 &= GET_MODE_MASK (mode);\n+\t  arg0 &= GET_MODE_MASK (op_mode);\n \t  val = 0;\n \t  while (arg0)\n \t    val++, arg0 &= arg0 - 1;\n \t  break;\n \n \tcase PARITY:\n-\t  arg0 &= GET_MODE_MASK (mode);\n+\t  arg0 &= GET_MODE_MASK (op_mode);\n \t  val = 0;\n \t  while (arg0)\n \t    val++, arg0 &= arg0 - 1;"}, {"sha": "2f03f2ad508515a43f6ca1ba0f3da161c19ef914", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -1,3 +1,13 @@\n+2011-06-21  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc.c-torture/excute/builtin-bitops-1.c (MAKE_FUNS): Make\n+\tmy_clrsb test functions.\n+\t(main): Test clrsb.\n+\t* gcc.dg/builtin-protos-1.c (test_s, test_u, test_sl, test_ul,\n+\ttest_sll, test_ull): Add clrsb tests.\n+\t* gcc.dg/torture/builtin-attr-1.c: Add tests for clrsb, clrsbl,\n+\tclrsbll.\n+\n 2011-06-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/49112\n@@ -21,7 +31,7 @@\n \t* gcc.dg/vect/vect-peel-4.c: Likewise.\n \n 2011-06-22  Christian Bruel  <christian.bruel@st.com>\n-\t\n+\n \tPR middle-end/49139\n \t* gcc.dg/always_inline.c: Removed -Winline. Update checks\n \t* gcc.dg/always_inline2.c: Likewise.\n@@ -41,7 +51,7 @@\n \t* gcc.dg/uninit-pred-5_a.c: Likewise.\n \t* gcc.dg/uninit-pred-5_b.c: Likewise.\n \t* gcc.dg/fail_always_inline.c: New.\n-\t\n+\n 2011-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (check_gfortran_parallelize): Parallelize dg.exp"}, {"sha": "7907a753341cc0e0502f359a30a27e1472ebf326", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-bitops-1.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -62,6 +62,16 @@ int my_clz##suffix(type x) {\t\t\t\t\t\t\\\n     return i;\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+int my_clrsb##suffix(type x) {\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    int leading = (x >> CHAR_BIT * sizeof (type) - 1) & 1;\t\t\\\n+    for (i = 1; i < CHAR_BIT * sizeof (type); i++)\t\t\t\\\n+\tif (((x >> ((CHAR_BIT * sizeof (type)) - i - 1)) & 1)\t\t\\\n+\t    != leading)\t\t\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+    return i - 1;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n int my_popcount##suffix(type x) {\t\t\t\t\t\\\n     int i;\t\t\t\t\t\t\t\t\\\n     int count = 0;\t\t\t\t\t\t\t\\\n@@ -176,6 +186,8 @@ main (void)\n       if (ints[i] != 0\n \t  && __builtin_ctz (ints[i]) != my_ctz (ints[i]))\n \tabort ();\n+      if (__builtin_clrsb (ints[i]) != my_clrsb (ints[i]))\n+\tabort ();\n       if (__builtin_popcount (ints[i]) != my_popcount (ints[i]))\n \tabort ();\n       if (__builtin_parity (ints[i]) != my_parity (ints[i]))\n@@ -192,6 +204,8 @@ main (void)\n       if (longs[i] != 0\n \t  && __builtin_ctzl (longs[i]) != my_ctzl (longs[i]))\n \tabort ();\n+      if (__builtin_clrsbl (longs[i]) != my_clrsbl (longs[i]))\n+\tabort ();\n       if (__builtin_popcountl (longs[i]) != my_popcountl (longs[i]))\n \tabort ();\n       if (__builtin_parityl (longs[i]) != my_parityl (longs[i]))\n@@ -208,6 +222,8 @@ main (void)\n       if (longlongs[i] != 0\n \t  && __builtin_ctzll (longlongs[i]) != my_ctzll (longlongs[i]))\n \tabort ();\n+      if (__builtin_clrsbll (longlongs[i]) != my_clrsbll (longlongs[i]))\n+\tabort ();\n       if (__builtin_popcountll (longlongs[i]) != my_popcountll (longlongs[i]))\n \tabort ();\n       if (__builtin_parityll (longlongs[i]) != my_parityll (longlongs[i]))\n@@ -223,6 +239,8 @@ main (void)\n     abort ();\t\t\t\t\t\t\t\t\\\n   if (x != 0 && __builtin_ctz##suffix (x) != my_ctz##suffix (x))\t\\\n     abort ();\t\t\t\t\t\t\t\t\\\n+  if (__builtin_clrsb##suffix (x) != my_clrsb##suffix (x))\t\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n   if (__builtin_popcount##suffix (x) != my_popcount##suffix (x))\t\\\n     abort ();\t\t\t\t\t\t\t\t\\\n   if (__builtin_parity##suffix (x) != my_parity##suffix (x))\t\t\\"}, {"sha": "b9e939699fb9061b2f0cda07a411a9d0fe38183a", "filename": "gcc/testsuite/gcc.dg/builtin-protos-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -7,6 +7,7 @@ test_s (signed int x)\n   return __builtin_abs (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_clz (x)\t\t/* { dg-warning \"as unsigned due to prototype\" } */\n     + __builtin_ctz (x)\t\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_clrsb (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_ffs (x)\t\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_parity (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n     + __builtin_popcount (x);\t/* { dg-warning \"as unsigned due to prototype\" } */\n@@ -18,6 +19,7 @@ test_u (unsigned int x)\n   return __builtin_abs (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_clz (x)\t\t/* { dg-bogus \"as signed due to prototype\" } */\n     + __builtin_ctz (x)\t\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_clrsb (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_ffs (x)\t\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_parity (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n     + __builtin_popcount (x);\t/* { dg-bogus \"as signed due to prototype\" } */\n@@ -29,6 +31,7 @@ test_sl (signed long x)\n   return __builtin_labs (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_clzl (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n     + __builtin_ctzl (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_clrsbl (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_ffsl (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_parityl (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n     + __builtin_popcountl (x);\t/* { dg-warning \"as unsigned due to prototype\" } */\n@@ -40,6 +43,7 @@ test_ul (unsigned long x)\n   return __builtin_labs (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_clzl (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n     + __builtin_ctzl (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_clrsbl (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_ffsl (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_parityl (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n     + __builtin_popcountl (x);\t/* { dg-bogus \"as signed due to prototype\" } */\n@@ -51,6 +55,7 @@ test_sll (signed long long x)\n   return __builtin_llabs (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_clzll (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n     + __builtin_ctzll (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n+    + __builtin_clrsbll (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_ffsll (x)\t/* { dg-bogus \"as unsigned due to prototype\" } */\n     + __builtin_parityll (x)\t/* { dg-warning \"as unsigned due to prototype\" } */\n     + __builtin_popcountll (x);\t/* { dg-warning \"as unsigned due to prototype\" } */\n@@ -62,6 +67,7 @@ test_ull (unsigned long long x)\n   return __builtin_llabs (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_clzll (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n     + __builtin_ctzll (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n+    + __builtin_clrsbll (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_ffsll (x)\t/* { dg-warning \"as signed due to prototype\" } */\n     + __builtin_parityll (x)\t/* { dg-bogus \"as signed due to prototype\" } */\n     + __builtin_popcountll (x);\t/* { dg-bogus \"as signed due to prototype\" } */"}, {"sha": "c138b92342aba3f64738e82b6007e885c873c4b2", "filename": "gcc/testsuite/gcc.dg/torture/builtin-attr-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -416,6 +416,9 @@ BUILTIN_TEST1 (clzll, long long)\n BUILTIN_TEST1 (ctz, int)\n BUILTIN_TEST1 (ctzl, long)\n BUILTIN_TEST1 (ctzll, long long)\n+BUILTIN_TEST1 (clrsb, int)\n+BUILTIN_TEST1 (clrsbl, long)\n+BUILTIN_TEST1 (clrsbll, long long)\n TEST1         (ffs, int, int)\n TEST1         (ffsl, long, int)\n TEST1         (ffsll, long long, int)"}, {"sha": "08d8ef9a6a700cf9a7a8808e8a13750823bcef3c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -1,3 +1,8 @@\n+2011-06-21  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* Makefile.in (lib2funcs): Add _clrsbsi2 and _clrsbdi2.\n+\t* libgcc-std.ver.in (GCC_4.7.0): New section.\n+\n 2011-06-16  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \tPR target/49313"}, {"sha": "d0a1d1582ee638965340494fc47a8b76fd53aa7c", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -323,7 +323,7 @@ lib2funcs = _muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 _cmpdi2 _ucmpdi2\t   \\\n \t    _ctzsi2 _ctzdi2 _popcount_tab _popcountsi2 _popcountdi2\t   \\\n \t    _paritysi2 _paritydi2 _powisf2 _powidf2 _powixf2 _powitf2\t   \\\n \t    _mulsc3 _muldc3 _mulxc3 _multc3 _divsc3 _divdc3 _divxc3\t   \\\n-\t    _divtc3 _bswapsi2 _bswapdi2\n+\t    _divtc3 _bswapsi2 _bswapdi2 _clrsbsi2 _clrsbdi2\n \n # The floating-point conversion routines that involve a single-word integer.\n # XX stands for the integer mode."}, {"sha": "5552a6f001b0427d65dc59e2ca4e5cbce95e3434", "filename": "libgcc/libgcc-std.ver.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3801c801f35ca5e0c52b437161141c251aa33daf/libgcc%2Flibgcc-std.ver.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3801c801f35ca5e0c52b437161141c251aa33daf/libgcc%2Flibgcc-std.ver.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc-std.ver.in?ref=3801c801f35ca5e0c52b437161141c251aa33daf", "patch": "@@ -1920,3 +1920,10 @@ GCC_4.6.0 {\n   __morestack_initial_sp\n   __splitstack_find\n }\n+\n+%inherit GCC_4.7.0 GCC_4.6.0\n+GCC_4.7.0 {\n+  __PFX__clrsbsi2\n+  __PFX__clrsbdi2\n+  __PFX__clrsbti2\n+}"}]}