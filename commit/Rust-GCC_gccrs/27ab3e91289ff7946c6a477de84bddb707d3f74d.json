{"sha": "27ab3e91289ff7946c6a477de84bddb707d3f74d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhYjNlOTEyODlmZjc5NDZjNmE0NzdkZTg0YmRkYjcwN2QzZjc0ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-03-03T00:46:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-03-03T00:46:06Z"}, "message": "re PR middle-end/11767 (different code behaviour with -fnon-call-exceptions -fprofile-arcs)\n\n        PR middle-end/11767\n        * coverage.c (coverage_counter_ref): Set MEM_NOTRAP_P.\n        * optabs.c (prepare_cmp_insn): Force trapping memories to registers\n        before the compare, if flag_non_call_exceptions.\n        * g++.dg/other/profile1.C: New.\n\nFrom-SVN: r78805", "tree": {"sha": "89c4a2eac8c27b87bff6eb652865b74686befcd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c4a2eac8c27b87bff6eb652865b74686befcd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27ab3e91289ff7946c6a477de84bddb707d3f74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ab3e91289ff7946c6a477de84bddb707d3f74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ab3e91289ff7946c6a477de84bddb707d3f74d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ab3e91289ff7946c6a477de84bddb707d3f74d/comments", "author": null, "committer": null, "parents": [{"sha": "0b1d67d23b3498243272f751414b157054be4515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d67d23b3498243272f751414b157054be4515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1d67d23b3498243272f751414b157054be4515"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "ebcd2ec39d66b0380c545283b3828b6e8515d69d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ab3e91289ff7946c6a477de84bddb707d3f74d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ab3e91289ff7946c6a477de84bddb707d3f74d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27ab3e91289ff7946c6a477de84bddb707d3f74d", "patch": "@@ -1,3 +1,10 @@\n+2004-03-02  Richard Henderson  <rth@redhat.com>\n+\n+        PR middle-end/11767\n+        * coverage.c (coverage_counter_ref): Set MEM_NOTRAP_P.\n+        * optabs.c (prepare_cmp_insn): Force trapping memories to registers\n+        before the compare, if flag_non_call_exceptions.\n+\n 2004-03-02  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/14327"}, {"sha": "d045d79358cc0ab8ec5f271437ecc89c919d4255", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ab3e91289ff7946c6a477de84bddb707d3f74d/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ab3e91289ff7946c6a477de84bddb707d3f74d/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=27ab3e91289ff7946c6a477de84bddb707d3f74d", "patch": "@@ -399,6 +399,7 @@ coverage_counter_ref (unsigned counter, unsigned no)\n   ref = plus_constant (ctr_labels[counter], gcov_size / BITS_PER_UNIT * no);\n   ref = gen_rtx_MEM (mode, ref);\n   set_mem_alias_set (ref, new_alias_set ());\n+  MEM_NOTRAP_P (ref) = 1;\n \n   return ref;\n }"}, {"sha": "0826782473f111bc037a4d0e43b9c5bdc2cefddd", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ab3e91289ff7946c6a477de84bddb707d3f74d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ab3e91289ff7946c6a477de84bddb707d3f74d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=27ab3e91289ff7946c6a477de84bddb707d3f74d", "patch": "@@ -3650,6 +3650,16 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n       return;\n     }\n \n+  /* Don't allow operands to the compare to trap, as that can put the\n+     compare and branch in different basic blocks.  */\n+  if (flag_non_call_exceptions)\n+    {\n+      if (may_trap_p (x))\n+\tx = force_reg (mode, x);\n+      if (may_trap_p (y))\n+\ty = force_reg (mode, y);\n+    }\n+\n   *px = x;\n   *py = y;\n   if (can_compare_p (*pcomparison, mode, purpose))"}]}