{"sha": "b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjNjUzNGI4OGVlMzlmZjBlOTJiYTkwZDNlNjA2YTg5NGUxNGY4ZA==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2001-10-23T09:14:15Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2001-10-23T09:14:15Z"}, "message": "cp-tree.def (UNBOUND_CLASS_TEMPLATE): New tree node.\n\n\t* cp-tree.def (UNBOUND_CLASS_TEMPLATE): New tree node.\n\t* cp-tree.h (make_unbound_class_template): Prototype new function.\n\t* decl.c (make_unbound_class_template): New function.\n\t* decl2.c (arg_assoc_template_arg): Handle UNBOUND_CLASS_TEMPLATE.\n\t* error.c (dump_type): Likewise.\n\t* mangle.c (write_type): Likewise.\n\t* parse.y (template_parm): Likewise.\n\t(template_argument): Use make_unbound_class_template.\n\t* pt.c (convert_template_argument): Handle UNBOUND_CLASS_TEMPLATE.\n\t(tsubst): Likewise.\n\t(tsubst_copy): Likewise.\n\t(unify): Likewise.\n\t* tree.c (walk_tree): Likewise.\n\t* typeck.c (comptypes): Likewise.\n\nFrom-SVN: r46430", "tree": {"sha": "e337f303c7c3e814a36bdbf76e6e8b021e47b1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e337f303c7c3e814a36bdbf76e6e8b021e47b1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/comments", "author": null, "committer": null, "parents": [{"sha": "69f75f9daa41e53683e8ba8e2b87666620a7226b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f75f9daa41e53683e8ba8e2b87666620a7226b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f75f9daa41e53683e8ba8e2b87666620a7226b"}], "stats": {"total": 592, "additions": 569, "deletions": 23}, "files": [{"sha": "34abbc4fbb59b7d861a693ad0155ffde870a5010", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -1,3 +1,20 @@\n+2001-10-24  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* cp-tree.def (UNBOUND_CLASS_TEMPLATE): New tree node.\n+\t* cp-tree.h (make_unbound_class_template): Prototype new function.\n+\t* decl.c (make_unbound_class_template): New function.\n+\t* decl2.c (arg_assoc_template_arg): Handle UNBOUND_CLASS_TEMPLATE.\n+\t* error.c (dump_type): Likewise.\n+\t* mangle.c (write_type): Likewise.\n+\t* parse.y (template_parm): Likewise.\n+\t(template_argument): Use make_unbound_class_template.\n+\t* pt.c (convert_template_argument): Handle UNBOUND_CLASS_TEMPLATE.\n+\t(tsubst): Likewise.\n+\t(tsubst_copy): Likewise.\n+\t(unify): Likewise.\n+\t* tree.c (walk_tree): Likewise.\n+\t* typeck.c (comptypes): Likewise.\n+\n 2001-10-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* xref.c (GNU_xref_member): Use safe-ctype macros and/or fold"}, {"sha": "1395301d1d929857968f32e14e9dbbb0bbf82ba9", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -163,6 +163,11 @@ DEFTREECODE (BOUND_TEMPLATE_TEMPLATE_PARM, \"bound_template_template_parm\", 't',\n    of `T'.  */\n DEFTREECODE (TYPENAME_TYPE, \"typename_type\", 't', 0)\n \n+/* For template template argument of the form `T::template C'.\n+   TYPE_CONTEXT is `T', the template parameter dependent object.\n+   TYPE_NAME is an IDENTIFIER_NODE for `C', the member class template.  */\n+DEFTREECODE (UNBOUND_CLASS_TEMPLATE, \"unbound_class_template\", 't', 0)\n+\n /* A type designated by `__typeof (expr)'.  TYPE_FIELDS is the\n    expression in question.  */\n DEFTREECODE (TYPEOF_TYPE, \"typeof_type\", 't', 0)"}, {"sha": "f58e21547cbe657ba68c2d65a8f231cbb1c23244", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -3617,6 +3617,7 @@ extern void set_namespace_binding               PARAMS ((tree, tree, tree));\n extern tree lookup_namespace_name\t\tPARAMS ((tree, tree));\n extern tree build_typename_type                 PARAMS ((tree, tree, tree, tree));\n extern tree make_typename_type\t\t\tPARAMS ((tree, tree, int));\n+extern tree make_unbound_class_template\t\tPARAMS ((tree, tree, int));\n extern tree lookup_name_nonclass\t\tPARAMS ((tree));\n extern tree lookup_function_nonclass            PARAMS ((tree, tree));\n extern tree lookup_name\t\t\t\tPARAMS ((tree, int));"}, {"sha": "1b3fc9e83f494162d47203047c642359031eb18c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -5696,6 +5696,61 @@ make_typename_type (context, name, complain)\n   return build_typename_type (context, name, fullname,  NULL_TREE);\n }\n \n+/* Resolve `CONTEXT::template NAME'.  Returns an appropriate type,\n+   unless an error occurs, in which case error_mark_node is returned.\n+   If COMPLAIN zero, don't complain about any errors that occur.  */\n+\n+tree\n+make_unbound_class_template (context, name, complain)\n+     tree context, name;\n+     int complain;\n+{\n+  tree t;\n+  tree d;\n+\n+  if (TYPE_P (name))\n+    name = TYPE_IDENTIFIER (name);\n+  else if (DECL_P (name))\n+    name = DECL_NAME (name);\n+  if (TREE_CODE (name) != IDENTIFIER_NODE)\n+    my_friendly_abort (20010902);\n+\n+  if (!uses_template_parms (context)\n+      || currently_open_class (context))\n+    {\n+      tree tmpl = NULL_TREE;\n+\n+      if (IS_AGGR_TYPE (context))\n+\ttmpl = lookup_field (context, name, 0, 0);\n+\n+      if (!tmpl || !DECL_CLASS_TEMPLATE_P (tmpl))\n+\t{\n+\t  if (complain)\n+\t    cp_error (\"no class template named `%#T' in `%#T'\", name, context);\n+\t  return error_mark_node;\n+\t}\n+      \n+      if (!enforce_access (context, tmpl))\n+\treturn error_mark_node;\n+\n+      return tmpl;\n+    }\n+\n+  /* Build the UNBOUND_CLASS_TEMPLATE.  */\n+  t = make_aggr_type (UNBOUND_CLASS_TEMPLATE);\n+  TYPE_CONTEXT (t) = FROB_CONTEXT (context);\n+  TREE_TYPE (t) = NULL_TREE;\n+\n+  /* Build the corresponding TEMPLATE_DECL.  */\n+  d = build_decl (TEMPLATE_DECL, name, t);\n+  TYPE_NAME (TREE_TYPE (d)) = d;\n+  TYPE_STUB_DECL (TREE_TYPE (d)) = d;\n+  DECL_CONTEXT (d) = FROB_CONTEXT (context);\n+  DECL_ARTIFICIAL (d) = 1;\n+\n+  return t;\n+}\n+\n /* Select the right _DECL from multiple choices. */\n \n static tree"}, {"sha": "f384f0a64d3690fe250fc1be0563a4defc451d74", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -4559,7 +4559,8 @@ arg_assoc_template_arg (k, arg)\n      contribute to the set of associated namespaces.  ]  */\n \n   /* Consider first template template arguments.  */\n-  if (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM)\n+  if (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n+      || TREE_CODE (arg) == UNBOUND_CLASS_TEMPLATE)\n     return 0;\n   else if (TREE_CODE (arg) == TEMPLATE_DECL)\n     {"}, {"sha": "5cd3ee70c9b7e4a40c886b1abc5bb5cfd36d4db4", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -458,6 +458,13 @@ dump_type (t, flags)\n       dump_typename (t, flags);\n       break;\n \n+    case UNBOUND_CLASS_TEMPLATE:\n+      dump_type (TYPE_CONTEXT (t), flags);\n+      print_scope_operator (scratch_buffer);\n+      print_identifier (scratch_buffer, \"template \");\n+      dump_type (DECL_NAME (TYPE_NAME (t)), flags);\n+      break;\n+\n     case TYPEOF_TYPE:\n       output_add_string (scratch_buffer, \"__typeof (\");\n       dump_expr (TYPE_FIELDS (t), flags & ~TFF_EXPR_IN_PARENS);"}, {"sha": "0f6500ee4688adb37ebc92097b30a2e935e688c9", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -1393,7 +1393,9 @@ write_type (type)\n \t  break;\n \n \tcase TYPENAME_TYPE:\n-\t  /* We handle TYPENAME_TYPEs like ordinary nested names.  */\n+\tcase UNBOUND_CLASS_TEMPLATE:\n+\t  /* We handle TYPENAME_TYPEs and UNBOUND_CLASS_TEMPLATEs like\n+\t     ordinary nested names.  */\n \t  write_nested_name (TYPE_STUB_DECL (type));\n \t  break;\n "}, {"sha": "937e1c8e8177702432b9b7891250263499530b60", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -669,7 +669,8 @@ template_parm:\n \t\t{\n \t\t  if (TREE_CODE ($3) != TEMPLATE_DECL\n \t\t      && TREE_CODE ($3) != TEMPLATE_TEMPLATE_PARM\n-\t\t      && TREE_CODE ($3) != TYPE_DECL)\n+\t\t      && TREE_CODE ($3) != TYPE_DECL\n+\t\t      && TREE_CODE ($3) != UNBOUND_CLASS_TEMPLATE)\n \t\t    {\n \t\t      error (\"invalid default template argument\");\n \t\t      $3 = error_mark_node;\n@@ -1100,6 +1101,16 @@ template_arg:\n \t\t    $$ = TREE_TYPE ($$);\n \t\t}\n \t| expr_no_comma_rangle\n+\t| nested_name_specifier TEMPLATE identifier\n+\t\t{\n+\t\t  if (!processing_template_decl)\n+\t\t    {\n+\t\t      cp_error (\"use of template qualifier outside template\");\n+\t\t      $$ = error_mark_node;\n+\t\t    }\n+\t\t  else\n+\t\t    $$ = make_unbound_class_template ($1, $3, 1);\n+\t\t}\n \t;\n \n unop:"}, {"sha": "a99b80d32ec8bbbb7468581cd1f8b0a9e7fc127f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -3301,13 +3301,16 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n     = ((TREE_CODE (arg) == TEMPLATE_DECL\n \t&& TREE_CODE (DECL_TEMPLATE_RESULT (arg)) == TYPE_DECL)\n        || TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n+       || TREE_CODE (arg) == UNBOUND_CLASS_TEMPLATE\n        || (TREE_CODE (arg) == RECORD_TYPE\n \t   && CLASSTYPE_TEMPLATE_INFO (arg)\n \t   && TREE_CODE (TYPE_NAME (arg)) == TYPE_DECL\n \t   && DECL_ARTIFICIAL (TYPE_NAME (arg))\n \t   && requires_tmpl_type\n \t   && is_base_of_enclosing_class (arg, current_class_type)));\n-  if (is_tmpl_type && TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM)\n+  if (is_tmpl_type\n+      && (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM\n+\t  || TREE_CODE (arg) == UNBOUND_CLASS_TEMPLATE))\n     arg = TYPE_STUB_DECL (arg);\n   else if (is_tmpl_type && TREE_CODE (arg) == RECORD_TYPE)\n     arg = CLASSTYPE_TI_TEMPLATE (arg);\n@@ -3360,30 +3363,38 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n     {\n       if (requires_tmpl_type)\n \t{\n-\t  tree parmparm = DECL_INNERMOST_TEMPLATE_PARMS (parm);\n-\t  tree argparm = DECL_INNERMOST_TEMPLATE_PARMS (arg);\n-\n-\t  if (coerce_template_template_parms (parmparm, argparm, complain,\n-\t\t\t\t\t      in_decl, inner_args))\n-\t    {\n-\t      val = arg;\n-\t\t  \n-\t      /* TEMPLATE_TEMPLATE_PARM node is preferred over \n-\t\t TEMPLATE_DECL.  */\n-\t      if (val != error_mark_node \n-\t\t  && DECL_TEMPLATE_TEMPLATE_PARM_P (val))\n-\t\tval = TREE_TYPE (val);\n-\t    }\n+\t  if (TREE_CODE (TREE_TYPE (arg)) == UNBOUND_CLASS_TEMPLATE)\n+\t    /* The number of argument required is not known yet.\n+\t       Just accept it for now.  */\n+\t    val = TREE_TYPE (arg);\n \t  else\n \t    {\n-\t      if (in_decl && complain)\n+\t      tree parmparm = DECL_INNERMOST_TEMPLATE_PARMS (parm);\n+\t      tree argparm = DECL_INNERMOST_TEMPLATE_PARMS (arg);\n+\n+\t      if (coerce_template_template_parms (parmparm, argparm,\n+\t\t\t\t\t\t  complain, in_decl,\n+\t\t\t\t\t\t  inner_args))\n \t\t{\n-\t\t  cp_error (\"type/value mismatch at argument %d in template parameter list for `%D'\",\n-\t\t\t    i + 1, in_decl);\n-\t\t  cp_error (\"  expected a template of type `%D', got `%D'\", parm, arg);\n+\t\t  val = arg;\n+\t\t  \n+\t\t  /* TEMPLATE_TEMPLATE_PARM node is preferred over \n+\t\t     TEMPLATE_DECL.  */\n+\t\t  if (val != error_mark_node \n+\t\t      && DECL_TEMPLATE_TEMPLATE_PARM_P (val))\n+\t\t    val = TREE_TYPE (val);\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  if (in_decl && complain)\n+\t\t    {\n+\t\t      cp_error (\"type/value mismatch at argument %d in template parameter list for `%D'\",\n+\t\t\t\ti + 1, in_decl);\n+\t\t      cp_error (\"  expected a template of type `%D', got `%D'\", parm, arg);\n+\t\t    }\n \t\t  \n-\t      val = error_mark_node;\n+\t\t  val = error_mark_node;\n+\t\t}\n \t    }\n \t}\n       else\n@@ -6750,6 +6761,18 @@ tsubst (t, args, complain, in_decl)\n \t\t\t\t\t     complain);\n       }\n \n+    case UNBOUND_CLASS_TEMPLATE:\n+      {\n+\ttree ctx = tsubst_aggr_type (TYPE_CONTEXT (t), args, complain,\n+\t\t\t\t     in_decl, /*entering_scope=*/1);\n+\ttree name = TYPE_IDENTIFIER (t);\n+\n+\tif (ctx == error_mark_node || name == error_mark_node)\n+\t  return error_mark_node;\n+\n+\treturn make_unbound_class_template (ctx, name, complain);\n+      }\n+\n     case INDIRECT_REF:\n       {\n \ttree e = tsubst (TREE_OPERAND (t, 0), args, complain,\n@@ -7150,6 +7173,7 @@ tsubst_copy (t, args, complain, in_decl)\n     case METHOD_TYPE:\n     case ARRAY_TYPE:\n     case TYPENAME_TYPE:\n+    case UNBOUND_CLASS_TEMPLATE:\n     case TYPE_DECL:\n       return tsubst (t, args, complain, in_decl);\n \n@@ -8542,6 +8566,7 @@ unify (tparms, targs, parm, arg, strict)\n   switch (TREE_CODE (parm))\n     {\n     case TYPENAME_TYPE:\n+    case UNBOUND_CLASS_TEMPLATE:\n       /* In a type which contains a nested-name-specifier, template\n \t argument values cannot be deduced for template parameters used\n \t within the nested-name-specifier.  */"}, {"sha": "6ae0a352d38417fa8551448028335277ac0d4de9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -2079,6 +2079,7 @@ cp_walk_subtrees (tp, walk_subtrees_p, func, data, htab)\n     case DEFAULT_ARG:\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n+    case UNBOUND_CLASS_TEMPLATE:\n     case TEMPLATE_PARM_INDEX:\n     case TEMPLATE_TYPE_PARM:\n     case TYPENAME_TYPE:"}, {"sha": "dda76fe2fcdca2932ea1bf5fc35dd4668a3dc308", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -1097,6 +1097,12 @@ comptypes (t1, t2, strict)\n         return 0;\n       return same_type_p (TYPE_CONTEXT (t1), TYPE_CONTEXT (t2));\n \n+    case UNBOUND_CLASS_TEMPLATE:\n+      if (cp_tree_equal (TYPE_IDENTIFIER (t1),\n+                         TYPE_IDENTIFIER (t2)) < 1)\n+        return 0;\n+      return same_type_p (TYPE_CONTEXT (t1), TYPE_CONTEXT (t2));\n+\n     case COMPLEX_TYPE:\n       return same_type_p (TREE_TYPE (t1), TREE_TYPE (t2));\n "}, {"sha": "b97ef4275b1ad76fd7a9c55fe570c2722f3dfe29", "filename": "gcc/testsuite/g++.dg/template/qualttp1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp1.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <class T> struct X\n+{\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B> x; // { dg-error \"type\" }\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+}"}, {"sha": "8734ddc6724a5873450ac54cca5905b673b3dfe7", "filename": "gcc/testsuite/g++.dg/template/qualttp10.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp10.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+template <template <class> class TT> class C {\n+};\n+\n+template <class T> struct D {\n+\ttemplate <class U> class B {};\n+\tC<D<T>::template B> c;\n+};\n+\n+D<int> d;"}, {"sha": "fa5c860c5d210fd9d075a7c6418530599da4862b", "filename": "gcc/testsuite/g++.dg/template/qualttp11.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp11.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do link }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT> struct X\n+{\n+\tTT<int> y;\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B> x;\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+}"}, {"sha": "ebd4b645c89fd9b958d131c07407d2906b8f483a", "filename": "gcc/testsuite/g++.dg/template/qualttp12.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp12.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do link }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT> void f()\n+{\n+\tTT<int> y;\n+}\n+\n+template <class T> struct C\n+{\n+\tvoid g() { f<T::template B>(); }\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+\tc.g();\n+}"}, {"sha": "eefc604933d60e34c87a2fedfe033f085058b5f6", "filename": "gcc/testsuite/g++.dg/template/qualttp13.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp13.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+\n+template <class U> struct A\n+{\n+\ttemplate <class V> struct AA {\n+\t\ttemplate <class T> struct B {\n+\t\t\tint i;\n+\t\t\tB() : i(1) {}\n+\t\t};\n+\t};\n+};\n+\n+template <template <class> class TT> struct X\n+{\n+\tTT<int> y;\n+};\n+\n+template <class T, class U> struct C\n+{\n+\tX<T::template AA<U>::template B> x;\n+};\n+\n+int main()\n+{\n+\tC<A<char>, int> c;\n+}"}, {"sha": "055855759e7e717c53d4227e2f7afc68c7d33bb6", "filename": "gcc/testsuite/g++.dg/template/qualttp14.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp14.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do link }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT, class T> struct X\n+{\n+\tTT<int> y;\n+\tT z;\n+};\n+\n+template <class T> struct X<T::template B, T>\n+{\n+\ttypename T::template B<int> y;\n+\tT z;\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B, A> x;\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+}"}, {"sha": "1b1f3bb725d61d2084b289e5c4788fcafde05ce4", "filename": "gcc/testsuite/g++.dg/template/qualttp15.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT> struct X\n+{\n+\tTT<int> y;\n+};\n+\n+template <class T> struct X<T::template B>\n+{\t// { dg-error \"previous\" }\n+\tT z;\n+};\n+\n+template <class T> struct X<T::template B>\n+{\t// { dg-error \"redefinition\" }\n+\tT z;\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B> x;\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+}"}, {"sha": "1fd0e1f3535fa3e4346291779e0c360cff3ece8c", "filename": "gcc/testsuite/g++.dg/template/qualttp16.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp16.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT, class T> struct X\n+{\n+\tTT<int> y;\n+\tT z;\n+\tint f() { return 0; }\n+};\n+\n+template <class T> struct X<T::template B, T>\n+{\n+\ttypename T::template B<int> y;\n+\tT z;\n+\tint f() { return 1; }\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B, A> x;\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+\tX<A::B, A> x1;\n+\tX<A::B, int> x2;\n+\tif (x1.f() != 1)\n+\t\tabort();\n+\tif (x2.f() != 0)\n+\t\tabort();\n+}"}, {"sha": "4766c53847d5d4b90f90af0f4a088ec8be78ffb6", "filename": "gcc/testsuite/g++.dg/template/qualttp17.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp17.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+// { dg-options \"-fno-inline\" }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT> struct X\n+{\n+};\n+\n+template <class T> void f(X<T::template B>)\n+{\n+}\n+\n+int main()\n+{\n+\tX<A::B> x;\n+\tf<A>(x);\n+}\n+\n+// { dg-final { scan-assembler \"\\n_?_Z1fI1AEv1XIN1T1BEE\\[: \\t\\n\\]\" } }"}, {"sha": "2c9cf065ceb140b075456d0c018ed3352f9145c8", "filename": "gcc/testsuite/g++.dg/template/qualttp18.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp18.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <template <class> class TT> struct X\n+{\n+\tTT<int> y;\n+};\n+\n+struct C\n+{\n+\tX<A::template B> x; // { dg-error \"template|forbid\" }\n+};\n+\n+int main()\n+{\n+\tC c;\n+}"}, {"sha": "b25e15f5c997486a11a6c6f2fabadc1c7ef120a7", "filename": "gcc/testsuite/g++.dg/template/qualttp2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp2.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+struct A\n+{\n+\ttemplate <class T> class B {};\n+};\n+\n+template <int i> struct X\n+{\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B> x; // { dg-error \"type\" }\n+};\n+\n+int main()\n+{\n+\tC<A> c;\n+}"}, {"sha": "929fa628ca73e92bf13dd3423dc19de4ac27411a", "filename": "gcc/testsuite/g++.dg/template/qualttp3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp3.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+struct A\n+{\n+\ttemplate <class T, class U> class B {};\n+};\n+\n+template <template <class> class TT> struct X\n+{\n+\tTT<int> y;\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B> x; // { dg-error \"type\" \"\" }\n+};\n+\n+int main()\n+{\n+\tC<A> c; // { dg-error \"instantiated\" }\n+}"}, {"sha": "04335f16cc8b7667a66c78005e762e466c12a846", "filename": "gcc/testsuite/g++.dg/template/qualttp4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp4.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+struct A\n+{\n+\ttemplate <class T> struct B {};\n+};\n+\n+template <template <class, class> class TT> // { dg-error \"provided\" }\n+struct X\n+{\n+\tTT<int> y; // { dg-error \"number|type\" }\n+};\n+\n+template <class T> struct C\n+{\n+\tX<T::template B> x; // { dg-error \"type\" }\n+};\n+\n+int main()\n+{\n+\tC<A> c; // { dg-error \"instantiated\" }\n+}"}, {"sha": "7ac7a315abb823a85afd3aed4bfe72af0347253a", "filename": "gcc/testsuite/g++.dg/template/qualttp5.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp5.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+template <class U> struct A\n+{\n+\ttemplate <class T> class B {}; // { dg-error \"candidates\" }\n+};\n+\n+template <template <class> class TT> void f()\n+{\n+\tTT<int> y;\n+\ty = 0; // { dg-error \"no match\" }\n+}\n+\n+template <class T> struct C\n+{\n+\tvoid g() { f<A<T>::template B>(); } // { dg-error \"instantiated\" }\n+};\n+\n+int main()\n+{\n+\tC<int> c;\n+\tc.g(); // { dg-error \"instantiated\" }\n+}"}, {"sha": "046895830d838e384623a38f6b5495be04a69e33", "filename": "gcc/testsuite/g++.dg/template/qualttp6.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp6.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+template <template <class> class TT> class C {\n+};\n+\n+template <class T> struct D {\n+\tC<T::template B> c; // { dg-error \"no class template\" }\n+};\n+\n+struct E {\n+};\n+\n+D<E> d; // { dg-error \"instantiated\" }"}, {"sha": "f6573ac5d9516932fa421d3cc40db4c0e07267c8", "filename": "gcc/testsuite/g++.dg/template/qualttp7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp7.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+template <template <class> class TT> class C {\n+};\n+\n+template <class T> struct D {\n+\tC<T::template B> c; // { dg-error \"no class template\" }\n+};\n+\n+D<int> d; // { dg-error \"instantiated\" }"}, {"sha": "da67a09fc46837312dea41c9acf35ae945c7c94f", "filename": "gcc/testsuite/g++.dg/template/qualttp8.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp8.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+template <template <class> class TT> class C {\n+};\n+\n+template <class T> struct D {\n+\tC<T::template B> c; // { dg-error \"context\" }\n+};\n+\n+struct E {\n+\tprivate:\n+\ttemplate <class T> class B {}; // { dg-error \"private\" }\n+};\n+\n+D<E> d; // { dg-error \"instantiated\" }"}, {"sha": "8d90dabde7ca6e4a4fdd3937bca68dd4670d688b", "filename": "gcc/testsuite/g++.dg/template/qualttp9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c6534b88ee39ff0e92ba90d3e606a894e14f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp9.C?ref=b8c6534b88ee39ff0e92ba90d3e606a894e14f8d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright (C) 2001 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+template <template <class> class TT> class C {\n+};\n+\n+template <class T> struct D : T {\n+\tC<T::template B> c;\n+};\n+\n+struct E {\n+\tprotected:\n+\ttemplate <class T> class B {};\n+};\n+\n+D<E> d;"}]}