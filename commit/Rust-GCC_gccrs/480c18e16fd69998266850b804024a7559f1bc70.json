{"sha": "480c18e16fd69998266850b804024a7559f1bc70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwYzE4ZTE2ZmQ2OTk5ODI2Njg1MGI4MDQwMjRhNzU1OWYxYmM3MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-09-10T23:22:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-09-10T23:22:37Z"}, "message": "PR c++/91673 - ICE with noexcept in alias-declaration.\n\n\t* parser.c (CP_PARSER_FLAGS_DELAY_NOEXCEPT): New parser flag.\n\t(cp_parser_lambda_declarator_opt): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_exception_specification_opt.\n\t(cp_parser_direct_declarator): Adjust a call to\n\tcp_parser_exception_specification_opt.\n\t(cp_parser_member_declaration): Pass CP_PARSER_FLAGS_DELAY_NOEXCEPT\n\tto cp_parser_declarator if not processing a friend or typedef\n\tdeclaration.\n\t(cp_parser_late_noexcept_specifier): Adjust a call to\n\tcp_parser_noexcept_specification_opt.\n\t(cp_parser_noexcept_specification_opt): New parameter for parser flags,\n\tdrop the FRIEND_P parameter.  Use the new parameter.\n\t(cp_parser_exception_specification_opt): Likewise.\n\t(cp_parser_transaction): Adjust a call to\n\tcp_parser_noexcept_specification_opt.\n\t(cp_parser_transaction_expression): Likewise.\n\n\t* g++.dg/cpp1z/using7.C: New test.\n\t* g++.dg/cpp1z/using8.C: New test.\n\nFrom-SVN: r275617", "tree": {"sha": "04ea0ec010a6b86907503414d1c6839a48d20fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04ea0ec010a6b86907503414d1c6839a48d20fbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/480c18e16fd69998266850b804024a7559f1bc70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480c18e16fd69998266850b804024a7559f1bc70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/480c18e16fd69998266850b804024a7559f1bc70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480c18e16fd69998266850b804024a7559f1bc70/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d85569f63db86e656ecb79b81c74a906f27bf509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85569f63db86e656ecb79b81c74a906f27bf509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d85569f63db86e656ecb79b81c74a906f27bf509"}], "stats": {"total": 131, "additions": 105, "deletions": 26}, "files": [{"sha": "0c37460defbd5798892234414d535ad770ddbf64", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=480c18e16fd69998266850b804024a7559f1bc70", "patch": "@@ -1,3 +1,23 @@\n+2019-09-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91673 - ICE with noexcept in alias-declaration.\n+\t* parser.c (CP_PARSER_FLAGS_DELAY_NOEXCEPT): New parser flag.\n+\t(cp_parser_lambda_declarator_opt): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_exception_specification_opt.\n+\t(cp_parser_direct_declarator): Adjust a call to\n+\tcp_parser_exception_specification_opt.\n+\t(cp_parser_member_declaration): Pass CP_PARSER_FLAGS_DELAY_NOEXCEPT\n+\tto cp_parser_declarator if not processing a friend or typedef\n+\tdeclaration.\n+\t(cp_parser_late_noexcept_specifier): Adjust a call to\n+\tcp_parser_noexcept_specification_opt.\n+\t(cp_parser_noexcept_specification_opt): New parameter for parser flags,\n+\tdrop the FRIEND_P parameter.  Use the new parameter.\n+\t(cp_parser_exception_specification_opt): Likewise.\n+\t(cp_parser_transaction): Adjust a call to\n+\tcp_parser_noexcept_specification_opt.\n+\t(cp_parser_transaction_expression): Likewise.\n+\n 2019-09-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91705 - constexpr evaluation rejects ++/-- on floats."}, {"sha": "254a77ba54be97acb78cbdb1fe6f57dde213d52b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=480c18e16fd69998266850b804024a7559f1bc70", "patch": "@@ -247,8 +247,6 @@ static void cp_lexer_stop_debugging\n \n static cp_token_cache *cp_token_cache_new\n   (cp_token *, cp_token *);\n-static tree cp_parser_noexcept_specification_opt\n-  (cp_parser *, bool, bool *, bool, bool);\n static tree cp_parser_late_noexcept_specifier\n   (cp_parser *, tree);\n static void noexcept_override_late_checks\n@@ -1830,7 +1828,9 @@ enum\n   /* When parsing a decl-specifier-seq, only allow mutable or constexpr.  */\n   CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR = 0x10,\n   /* When parsing a decl-specifier-seq, allow missing typename.  */\n-  CP_PARSER_FLAGS_TYPENAME_OPTIONAL = 0x20\n+  CP_PARSER_FLAGS_TYPENAME_OPTIONAL = 0x20,\n+  /* When parsing of the noexcept-specifier should be delayed.  */\n+  CP_PARSER_FLAGS_DELAY_NOEXCEPT = 0x40\n };\n \n /* This type is used for parameters and variables which hold\n@@ -2380,7 +2380,7 @@ static void cp_parser_explicit_instantiation\n static void cp_parser_explicit_specialization\n   (cp_parser *);\n \n-/* Exception handling [gram.exception] */\n+/* Exception handling [gram.except] */\n \n static tree cp_parser_try_block\n   (cp_parser *);\n@@ -2395,9 +2395,11 @@ static tree cp_parser_exception_declaration\n static tree cp_parser_throw_expression\n   (cp_parser *);\n static tree cp_parser_exception_specification_opt\n-  (cp_parser *, bool = false);\n+  (cp_parser *, cp_parser_flags);\n static tree cp_parser_type_id_list\n   (cp_parser *);\n+static tree cp_parser_noexcept_specification_opt\n+  (cp_parser *, cp_parser_flags, bool, bool *, bool);\n \n /* GNU Extensions */\n \n@@ -10938,7 +10940,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       tx_qual = cp_parser_tx_qualifier_opt (parser);\n \n       /* Parse optional exception specification.  */\n-      exception_spec = cp_parser_exception_specification_opt (parser);\n+      exception_spec\n+\t= cp_parser_exception_specification_opt (parser, CP_PARSER_FLAGS_NONE);\n \n       std_attrs = cp_parser_std_attribute_spec_seq (parser);\n \n@@ -20877,7 +20880,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  tree tx_qual = cp_parser_tx_qualifier_opt (parser);\n \t\t  /* And the exception-specification.  */\n \t\t  exception_specification\n-\t\t    = cp_parser_exception_specification_opt (parser, friend_p);\n+\t\t    = cp_parser_exception_specification_opt (parser, flags);\n \n \t\t  attrs = cp_parser_std_attribute_spec_seq (parser);\n \n@@ -24780,11 +24783,15 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      tree asm_specification;\n \t      int ctor_dtor_or_conv_p;\n \t      bool static_p = (decl_specifiers.storage_class == sc_static);\n+\t      cp_parser_flags flags = CP_PARSER_FLAGS_TYPENAME_OPTIONAL;\n+\t      if (!friend_p\n+\t\t  && !decl_spec_seq_has_spec_p (&decl_specifiers, ds_typedef))\n+\t\tflags |= CP_PARSER_FLAGS_DELAY_NOEXCEPT;\n \n \t      /* Parse the declarator.  */\n \t      declarator\n \t\t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n-\t\t\t\t\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t\t\tflags,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n \t\t\t\t\t/*member_p=*/true,\n@@ -25359,10 +25366,10 @@ cp_parser_late_noexcept_specifier (cp_parser *parser, tree default_arg)\n   /* Parse the cached noexcept-specifier.  */\n   tree parsed_arg\n     = cp_parser_noexcept_specification_opt (parser,\n+\t\t\t\t\t    CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t    /*require_constexpr=*/true,\n \t\t\t\t\t    /*consumed_expr=*/NULL,\n-\t\t\t\t\t    /*return_cond=*/false,\n-\t\t\t\t\t    /*friend_p=*/false);\n+\t\t\t\t\t    /*return_cond=*/false);\n \n   /* Revert to the main lexer.  */\n   cp_parser_pop_lexer (parser);\n@@ -25411,15 +25418,15 @@ noexcept_override_late_checks (tree type, tree fndecl)\n    expression if parentheses follow noexcept, or return BOOLEAN_TRUE_NODE if\n    there are no parentheses.  CONSUMED_EXPR will be set accordingly.\n    Otherwise, returns a noexcept specification unless RETURN_COND is true,\n-   in which case a boolean condition is returned instead.  If FRIEND_P is true,\n-   the function with this noexcept-specification had the `friend' specifier.  */\n+   in which case a boolean condition is returned instead.  The parser flags\n+   FLAGS is used to control parsing.  */\n \n static tree\n cp_parser_noexcept_specification_opt (cp_parser* parser,\n+\t\t\t\t      cp_parser_flags flags,\n \t\t\t\t      bool require_constexpr,\n \t\t\t\t      bool* consumed_expr,\n-\t\t\t\t      bool return_cond,\n-\t\t\t\t      bool friend_p)\n+\t\t\t\t      bool return_cond)\n {\n   cp_token *token;\n   const char *saved_message;\n@@ -25446,8 +25453,10 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n \t  /* No need to delay parsing for a number literal or true/false.  */\n \t  && !literal_p\n \t  && at_class_scope_p ()\n-\t  /* Don't delay parsing for friend member functions.  */\n-\t  && !friend_p\n+\t  /* We don't delay parsing for friend member functions,\n+\t     alias-declarations, and typedefs, even though the standard seems\n+\t     to require it.  */\n+\t  && (flags & CP_PARSER_FLAGS_DELAY_NOEXCEPT)\n \t  && TYPE_BEING_DEFINED (current_class_type)\n \t  && !LAMBDA_TYPE_P (current_class_type))\n \treturn cp_parser_save_noexcept (parser);\n@@ -25522,11 +25531,11 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n      throw ( type-id-list [opt] )\n \n    Returns a TREE_LIST representing the exception-specification.  The\n-   TREE_VALUE of each node is a type.  If FRIEND_P is true, the function\n-   with this noexcept-specification had the `friend' specifier.  */\n+   TREE_VALUE of each node is a type.  The parser flags FLAGS is used to\n+   control parsing.  */\n \n static tree\n-cp_parser_exception_specification_opt (cp_parser* parser, bool friend_p)\n+cp_parser_exception_specification_opt (cp_parser* parser, cp_parser_flags flags)\n {\n   cp_token *token;\n   tree type_id_list;\n@@ -25537,11 +25546,10 @@ cp_parser_exception_specification_opt (cp_parser* parser, bool friend_p)\n \n   /* Is it a noexcept-specification?  */\n   type_id_list\n-    = cp_parser_noexcept_specification_opt (parser,\n+    = cp_parser_noexcept_specification_opt (parser, flags,\n \t\t\t\t\t    /*require_constexpr=*/true,\n \t\t\t\t\t    /*consumed_expr=*/NULL,\n-\t\t\t\t\t    /*return_cond=*/false,\n-\t\t\t\t\t    friend_p);\n+\t\t\t\t\t    /*return_cond=*/false);\n   if (type_id_list != NULL_TREE)\n     return type_id_list;\n \n@@ -41162,10 +41170,10 @@ cp_parser_transaction (cp_parser *parser, cp_token *token)\n     }\n   else\n     noex = cp_parser_noexcept_specification_opt (parser,\n+\t\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t\t /*require_constexpr=*/true,\n \t\t\t\t\t\t /*consumed_expr=*/NULL,\n-\t\t\t\t\t\t /*return_cond=*/true,\n-\t\t\t\t\t\t /*friend_p=*/false);\n+\t\t\t\t\t\t /*return_cond=*/true);\n \n   /* Keep track if we're in the lexical scope of an outer transaction.  */\n   new_in = this_in | (old_in & TM_STMT_ATTR_OUTER);\n@@ -41226,10 +41234,10 @@ cp_parser_transaction_expression (cp_parser *parser, enum rid keyword)\n \n   /* Parse a noexcept specification.  */\n   noex = cp_parser_noexcept_specification_opt (parser,\n+\t\t\t\t\t       CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t       /*require_constexpr=*/false,\n \t\t\t\t\t       &noex_expr,\n-\t\t\t\t\t       /*return_cond=*/true,\n-\t\t\t\t\t       /*friend_p=*/false);\n+\t\t\t\t\t       /*return_cond=*/true);\n \n   if (!noex || !noex_expr\n       || cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)"}, {"sha": "bbb5d9520fb38f183dc8438df8970b6f8ba7a034", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=480c18e16fd69998266850b804024a7559f1bc70", "patch": "@@ -1,3 +1,9 @@\n+2019-09-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91673 - ICE with noexcept in alias-declaration.\n+\t* g++.dg/cpp1z/using7.C: New test.\n+\t* g++.dg/cpp1z/using8.C: New test.\n+\n 2019-09-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91705 - constexpr evaluation rejects ++/-- on floats."}, {"sha": "f22ac4584a91886985e009d369e6b10fb0733824", "filename": "gcc/testsuite/g++.dg/cpp1z/using7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing7.C?ref=480c18e16fd69998266850b804024a7559f1bc70", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/91673 - ICE with noexcept in alias-declaration.\n+// { dg-do compile { target c++17 } }\n+\n+template<typename T, bool B>\n+using U1 = T() noexcept(B);\n+\n+template<bool B>\n+struct S {\n+  int I;\n+  static constexpr bool b = true;\n+\n+  template<typename T>\n+  using U2 = T() noexcept(B);\n+\n+  template<typename T>\n+  using U8 = T() noexcept(b);\n+\n+  template<typename T>\n+  using U10 = T(int p) noexcept(noexcept(p));\n+\n+  template<typename T, bool B2>\n+  using U11 = T() noexcept(B2);\n+\n+  using U3 = void() noexcept(B);\n+  using U9 = void() noexcept(b);\n+  using U4 = void() noexcept(noexcept (I));\n+  using U5 = void(int p) noexcept(noexcept(p));\n+\n+  typedef void(*T1)() noexcept(B);\n+  typedef void(*T2)(int p) noexcept(noexcept(p));\n+};\n+\n+S<true> s;"}, {"sha": "c3e1a06b297a56d68e1c15ced4e8c712847a3b28", "filename": "gcc/testsuite/g++.dg/cpp1z/using8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480c18e16fd69998266850b804024a7559f1bc70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing8.C?ref=480c18e16fd69998266850b804024a7559f1bc70", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/91673 - ICE with noexcept in alias-declaration.\n+// { dg-do compile { target c++17 } }\n+\n+template<typename Sig>\n+struct overload;\n+\n+template<typename Ret, typename... Args, bool NoExcept>\n+struct overload<Ret(Args...) noexcept(NoExcept)> {\n+    using signature_t = Ret(Args...) noexcept(NoExcept);\n+};\n+\n+overload<void()> x;"}]}