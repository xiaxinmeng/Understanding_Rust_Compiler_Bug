{"sha": "e3104f55001fa42614c49cab274e078978d64e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMxMDRmNTUwMDFmYTQyNjE0YzQ5Y2FiMjc0ZTA3ODk3OGQ2NGU1YQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-10-08T17:54:24Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-10-08T17:54:24Z"}, "message": "combine.c (label_tick_ebb_start): Fix comment.\n\n\t* combine.c (label_tick_ebb_start): Fix comment.\n\t(combine_instructions): Set label_tick and label_tick_ebb_start before\n\tcalling setup_incoming_promotions.  Start them from 1.  Increment\n\tlabel_tick instead of deriving it from the BB index.  Rather than\n\tcomparing ticks use the block from the previous iteration to decide\n\twhether to start a new EBB.  Remove empty lines before function.\n\ntestsuite/\n\t* gcc.target/mips/truncate-6.c: New test.\n\nFrom-SVN: r152567", "tree": {"sha": "4323ef63762199cb09a4a81657f966f46ad50f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4323ef63762199cb09a4a81657f966f46ad50f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3104f55001fa42614c49cab274e078978d64e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3104f55001fa42614c49cab274e078978d64e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3104f55001fa42614c49cab274e078978d64e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3104f55001fa42614c49cab274e078978d64e5a/comments", "author": null, "committer": null, "parents": [{"sha": "a020110e54d48068eb9c958a7f248715a534bb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a020110e54d48068eb9c958a7f248715a534bb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a020110e54d48068eb9c958a7f248715a534bb37"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "2a11001a74bd795d5ff36a9e42c9a82ae7f6a540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3104f55001fa42614c49cab274e078978d64e5a", "patch": "@@ -1,3 +1,12 @@\n+2009-10-08  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* combine.c (label_tick_ebb_start): Fix comment.\n+\t(combine_instructions): Set label_tick and label_tick_ebb_start before\n+\tcalling setup_incoming_promotions.  Start them from 1.  Increment\n+\tlabel_tick instead of deriving it from the BB index.  Rather than\n+\tcomparing ticks use the block from the previous iteration to decide\n+\twhether to start a new EBB.  Remove empty lines before function.\n+\n 2009-10-08  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/41573"}, {"sha": "af9cea2fe2a779c9523726a60f324a1cd8f3d56f", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e3104f55001fa42614c49cab274e078978d64e5a", "patch": "@@ -321,7 +321,7 @@ static rtx *uid_log_links;\n \n static int label_tick;\n \n-/* Reset to label_tick for each label.  */\n+/* Reset to label_tick for each extended basic block in scanning order.  */\n \n static int label_tick_ebb_start;\n \n@@ -1010,9 +1010,6 @@ clear_log_links (void)\n     if (INSN_P (insn))\n       free_INSN_LIST_list (&LOG_LINKS (insn));\n }\n-\n-\n-\n \f\n /* Main entry point for combiner.  F is the first insn of the function.\n    NREGS is the first unused pseudo-reg number.\n@@ -1028,6 +1025,7 @@ combine_instructions (rtx f, unsigned int nregs)\n #endif\n   rtx links, nextlinks;\n   rtx first;\n+  basic_block last_bb;\n \n   int new_direct_jump_p = 0;\n \n@@ -1058,6 +1056,7 @@ combine_instructions (rtx f, unsigned int nregs)\n      problems when, for example, we have j <<= 1 in a loop.  */\n \n   nonzero_sign_valid = 0;\n+  label_tick = label_tick_ebb_start = 1;\n \n   /* Scan all SETs and see if we can deduce anything about what\n      bits are known to be zero for some registers and how many copies\n@@ -1067,18 +1066,23 @@ combine_instructions (rtx f, unsigned int nregs)\n      for what bits are known to be set.  */\n \n   setup_incoming_promotions (first);\n+  /* Allow the entry block and the first block to fall into the same EBB.\n+     Conceptually the incoming promotions are assigned to the entry block.  */\n+  last_bb = ENTRY_BLOCK_PTR;\n \n   create_log_links ();\n-  label_tick_ebb_start = ENTRY_BLOCK_PTR->index;\n   FOR_EACH_BB (this_basic_block)\n     {\n       optimize_this_for_speed_p = optimize_bb_for_speed_p (this_basic_block);\n       last_call_luid = 0;\n       mem_last_set = -1;\n-      label_tick = this_basic_block->index;\n+\n+      label_tick++;\n       if (!single_pred_p (this_basic_block)\n-\t  || single_pred (this_basic_block)->index != label_tick - 1)\n+\t  || single_pred (this_basic_block) != last_bb)\n \tlabel_tick_ebb_start = label_tick;\n+      last_bb = this_basic_block;\n+\n       FOR_BB_INSNS (this_basic_block, insn)\n         if (INSN_P (insn) && BLOCK_FOR_INSN (insn))\n \t  {\n@@ -1109,20 +1113,23 @@ combine_instructions (rtx f, unsigned int nregs)\n   nonzero_sign_valid = 1;\n \n   /* Now scan all the insns in forward order.  */\n-\n-  label_tick_ebb_start = ENTRY_BLOCK_PTR->index;\n+  label_tick = label_tick_ebb_start = 1;\n   init_reg_last ();\n   setup_incoming_promotions (first);\n+  last_bb = ENTRY_BLOCK_PTR;\n \n   FOR_EACH_BB (this_basic_block)\n     {\n       optimize_this_for_speed_p = optimize_bb_for_speed_p (this_basic_block);\n       last_call_luid = 0;\n       mem_last_set = -1;\n-      label_tick = this_basic_block->index;\n+\n+      label_tick++;\n       if (!single_pred_p (this_basic_block)\n-\t  || single_pred (this_basic_block)->index != label_tick - 1)\n+\t  || single_pred (this_basic_block) != last_bb)\n \tlabel_tick_ebb_start = label_tick;\n+      last_bb = this_basic_block;\n+\n       rtl_profile_for_bb (this_basic_block);\n       for (insn = BB_HEAD (this_basic_block);\n \t   insn != NEXT_INSN (BB_END (this_basic_block));"}, {"sha": "4212a36e1e10c762c2f56f4b9a62fefb242989cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3104f55001fa42614c49cab274e078978d64e5a", "patch": "@@ -1,3 +1,7 @@\n+2009-10-08  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/truncate-6.c: New test.\n+\n 2009-10-08  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/rv-deduce.C: New."}, {"sha": "1ccd6c59c3d623c59724c6bc458ccd8b2dcf9f3a", "filename": "gcc/testsuite/gcc.target/mips/truncate-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3104f55001fa42614c49cab274e078978d64e5a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftruncate-6.c?ref=e3104f55001fa42614c49cab274e078978d64e5a", "patch": "@@ -0,0 +1,12 @@\n+/* setup_incoming_promotions should detect x to be already sign-extended due\n+   to PROMOTE_MODE.  Thus the truncation should be removed by combine.  Based\n+   on gcc.c-torture/execute/pr34070-2.c.  */\n+/* { dg-options \"-O -mgp64\" } */\n+/* { dg-final { scan-assembler-not \"\\tsll\\t\\[^\\n\\]*,0\" } } */\n+\n+NOMIPS16 int f(unsigned int x, int n, int *p)\n+{\n+  if (p)\n+    *p = 1;\n+  return ((int)x) / (1 << n);\n+}"}]}