{"sha": "5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwZTllYTI3ODljMWYyYzNlMjg0OTdhOTA2ODU3YzNiYTg5NTY0YQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-11-20T10:16:09Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-11-20T10:16:09Z"}, "message": "configure.in (HAVE_AS_GDWARF2_DEBUG_FLAG): Define.\n\n\t* configure.in (HAVE_AS_GDWARF2_DEBUG_FLAG): Define.\n\t(HAVE_AS_GSTABS_DEBUG_FLAG): Define.\n\t* configure: Regenerate.\n\t* config.in: Add dummy definitions of new flags.\n\t* toplev.c (PREFERRED_DEBUGGING_TYPE): Move definition to...\n\t* defaults.h (PREFERRED_DEBUGGING_TYPE): ... here.\n\t* gcc.c (ASM_DEBUG_SPEC): New macro.\n\t(asm_debug): New static variable.\n\t(default_compilers): Add asm_debug when assembling from\n\tuser input.\n\t(static_specs): Add asm_debug.\n\nFrom-SVN: r47210", "tree": {"sha": "fd1b1fc0714cb784db75a1235b1bd95e97dfc4a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd1b1fc0714cb784db75a1235b1bd95e97dfc4a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/comments", "author": null, "committer": null, "parents": [{"sha": "2d2e8123b5928675f46e2628e7cac9c13875d2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2e8123b5928675f46e2628e7cac9c13875d2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2e8123b5928675f46e2628e7cac9c13875d2cd"}], "stats": {"total": 226, "additions": 185, "deletions": 41}, "files": [{"sha": "bab397a8a19c2406410ad5d84f7b6aac32e14bc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -1,3 +1,17 @@\n+2001-11-19  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* configure.in (HAVE_AS_GDWARF2_DEBUG_FLAG): Define.\n+\t(HAVE_AS_GSTABS_DEBUG_FLAG): Define.\n+\t* configure: Regenerate.\n+\t* config.in: Add dummy definitions of new flags.\n+\t* toplev.c (PREFERRED_DEBUGGING_TYPE): Move definition to...\n+\t* defaults.h (PREFERRED_DEBUGGING_TYPE): ... here.\n+\t* gcc.c (ASM_DEBUG_SPEC): New macro.\n+\t(asm_debug): New static variable.\n+\t(default_compilers): Add asm_debug when assembling from\n+\tuser input.\n+\t(static_specs): Add asm_debug.\n+\n 2001-11-20  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* config.gcc (*-*-freebsd*): Remove configuration block."}, {"sha": "e3fde00baeb96c87b9a75a6c3604d0dc2664be11", "filename": "gcc/config.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -569,6 +569,11 @@\n /* Define 0/1 to force the choice for exception handling model. */\n #undef CONFIG_SJLJ_EXCEPTIONS\n \n+/* Define if your assembler supports the --gdwarf2 option. */\n+#undef HAVE_AS_GDWARF2_DEBUG_FLAG\n+\n+/* Define if your assembler supports the --gstabs option. */\n+#undef HAVE_AS_GSTABS_DEBUG_FLAG\n \n /* Bison unconditionally undefines `const' if neither `__STDC__' nor\n    __cplusplus are defined.  That's a problem since we use `const' in"}, {"sha": "7d2ae9de10f6e011a8bc7fa13c178edac11c46ef", "filename": "gcc/configure", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -2078,7 +2078,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in mawk gawk nawk awk\n+for ac_prog in gawk mawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -7616,6 +7616,63 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n+echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n+echo \"configure:7621: checking assembler --gdwarf2 support\" >&5\n+gcc_cv_as_gdwarf2_flag=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n+then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t-a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t-o \"$gcc_cv_gas_major_version\" -gt 2 \\\n+     && grep 'obj_format = elf' ../gas/Makefile > /dev/null \\\n+     && test x\"$insn\" != x ; then\n+    gcc_cv_as_gdwarf2_debug_flag=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x -a x\"$insn\" != x ; then\n+\techo '' > conftest.s\n+\t# ??? This fails with non-gnu grep.\n+\tif $gcc_cv_as --gdwarf2 -o conftest.o conftest.s > /dev/null 2>&1\n+\t  then\n+\t  gcc_cv_as_gdwarf2_flag=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o\n+fi\n+if test x\"$gcc_cv_as_gdwarf2_flag\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_GDWARF2_DEBUG_FLAG 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n+\n+echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n+echo \"configure:7650: checking assembler --gstabs support\" >&5\n+gcc_cv_as_gstabs_flag=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n+then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t-a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t-o \"$gcc_cv_gas_major_version\" -gt 2 \\\n+     && grep 'obj_format = elf' ../gas/Makefile > /dev/null \\\n+     && test x\"$insn\" != x ; then\n+    gcc_cv_as_gstabs_debug_flag=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x -a x\"$insn\" != x ; then\n+\techo '' > conftest.s\n+\t# ??? This fails with non-gnu grep.\n+\tif $gcc_cv_as --gstabs -o conftest.o conftest.s > /dev/null 2>&1 ; then\n+\t  gcc_cv_as_gstabs_flag=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o\n+fi\n+if test x\"$gcc_cv_as_gstabs_flag\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_GSTABS_DEBUG_FLAG 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n+\n if test \"$prefix\" != \"/usr\" && test \"$prefix\" != \"/usr/local\" ; then\n   cat >> confdefs.h <<EOF\n #define PREFIX_INCLUDE_DIR \"$prefix/include\"\n@@ -7759,7 +7816,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7763: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7820: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "fb022ff0293cf48dcb9bade3767a4dea56e29adc", "filename": "gcc/configure.in", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -1725,6 +1725,57 @@ if test x\"$gcc_cv_as_dwarf2_debug_line\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_as_dwarf2_debug_line)\n \n+AC_MSG_CHECKING(assembler --gdwarf2 support)\n+gcc_cv_as_gdwarf2_flag=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n+then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t-a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t-o \"$gcc_cv_gas_major_version\" -gt 2 \\\n+     && grep 'obj_format = elf' ../gas/Makefile > /dev/null \\\n+     && test x\"$insn\" != x ; then\n+    gcc_cv_as_gdwarf2_debug_flag=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x -a x\"$insn\" != x ; then\n+\techo '' > conftest.s\n+\t# ??? This fails with non-gnu grep.\n+\tif $gcc_cv_as --gdwarf2 -o conftest.o conftest.s > /dev/null 2>&1\n+\t  then\n+\t  gcc_cv_as_gdwarf2_flag=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o\n+fi\n+if test x\"$gcc_cv_as_gdwarf2_flag\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_GDWARF2_DEBUG_FLAG, 1,\n+[Define if your assembler supports the --gdwarf2 option.])\n+fi\n+AC_MSG_RESULT($gcc_cv_as_gdwarf2_flag)\n+\n+AC_MSG_CHECKING(assembler --gstabs support)\n+gcc_cv_as_gstabs_flag=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n+then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t-a \"$gcc_cv_gas_minor_version\" -ge 11 \\\n+\t-o \"$gcc_cv_gas_major_version\" -gt 2 \\\n+     && grep 'obj_format = elf' ../gas/Makefile > /dev/null \\\n+     && test x\"$insn\" != x ; then\n+    gcc_cv_as_gstabs_debug_flag=\"yes\"\n+  fi\n+elif test x$gcc_cv_as != x -a x\"$insn\" != x ; then\n+\techo '' > conftest.s\n+\t# ??? This fails with non-gnu grep.\n+\tif $gcc_cv_as --gstabs -o conftest.o conftest.s > /dev/null 2>&1 ; then\n+\t  gcc_cv_as_gstabs_flag=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o\n+fi\n+if test x\"$gcc_cv_as_gstabs_flag\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_GSTABS_DEBUG_FLAG, 1,\n+[Define if your assembler supports the --gstabs option.])\n+fi\n+AC_MSG_RESULT($gcc_cv_as_gstabs_flag)\n+\n if test \"$prefix\" != \"/usr\" && test \"$prefix\" != \"/usr/local\" ; then\n   AC_DEFINE_UNQUOTED(PREFIX_INCLUDE_DIR, \"$prefix/include\")\n fi"}, {"sha": "b83f25e2e39267657b20342b038485aa4a47b8a7", "filename": "gcc/defaults.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -410,4 +410,41 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASM_BYTE_OP\t\t\t\"\\t.byte\\t\"\n #endif\n \n+#ifndef DEFAULT_GDB_EXTENSIONS\n+#define DEFAULT_GDB_EXTENSIONS 1\n+#endif\n+\n+/* If more than one debugging type is supported, you must define\n+   PREFERRED_DEBUGGING_TYPE to choose a format in a system-dependent way.\n+\n+   This is one long line cause VAXC can't handle a \\-newline.  */\n+#if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) + defined (DWARF_DEBUGGING_INFO) + defined (DWARF2_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n+#ifndef PREFERRED_DEBUGGING_TYPE\n+You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n+#endif /* no PREFERRED_DEBUGGING_TYPE */\n+#else /* Only one debugging format supported.  Define PREFERRED_DEBUGGING_TYPE\n+\t so other code needn't care.  */\n+#ifdef DBX_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+#endif\n+#ifdef XCOFF_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE XCOFF_DEBUG\n+#endif\n+#endif /* More than one debugger format enabled.  */\n+\n+/* If still not defined, must have been because no debugging formats\n+   are supported.  */\n+#ifndef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "62ff7d03dfedc3efc0dfdfda604b7a2bfb9c5ed7", "filename": "gcc/gcc.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -586,6 +586,20 @@ proper position among the other output files.  */\n #define LINKER_NAME \"collect2\"\n #endif\n \n+/* Define ASM_DEBUG_SPEC to be a spec suitable for translating '-g'\n+   to the assembler.  */\n+#ifndef ASM_DEBUG_SPEC\n+# if defined(HAVE_AS_GDWARF2_DEBUG_FLAG) && defined(HAVE_AS_GSTABS_DEBUG_FLAG)\n+#  if PREFERRED_DEBUGGING_FORMAT == DBX_DEBUG\n+#    define ASM_DEBUG_SPEC \"%{gdwarf-2*:--gdwarf2}%{!gdwarf-2*:%{g*:--gstabs}}\"\n+#  else\n+#    define ASM_DEBUG_SPEC \"%{gstabs*:--gstabs}%{!gstabs*:%{g*:--gdwarf2}}\"\n+#  endif\n+# else\n+#  define ASM_DEBUG_SPEC \"\"\n+# endif\n+#endif\n+\n /* Here is the spec for running the linker, after compiling all files.  */\n \n /* -u* was put back because both BSD and SysV seem to support it.  */\n@@ -613,6 +627,7 @@ proper position among the other output files.  */\n # endif\n #endif\n \n+static const char *asm_debug = ASM_DEBUG_SPEC;\n static const char *cpp_spec = CPP_SPEC;\n static const char *cpp_predefines = CPP_PREDEFINES;\n static const char *cc1_spec = CC1_SPEC;\n@@ -820,11 +835,12 @@ static struct compiler default_compilers[] =\n    \"%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\".s\", \"@assembler\", 0},\n   {\"@assembler\",\n-   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_options) %i %A }}}}\", 0},\n+   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_debug) %(asm_options) %i %A }}}}\", 0},\n   {\".S\", \"@assembler-with-cpp\", 0},\n   {\"@assembler-with-cpp\",\n    \"%(trad_capable_cpp) -lang-asm %(cpp_options)\\\n-\t%{!M:%{!MM:%{!E:%(invoke_as)}}}\", 0},\n+      %{!M:%{!MM:%{!E:%{!S:-o %{|!pipe:%g.s} |\\n\\\n+       as %(asm_debug) %(asm_options) %{!pipe:%g.s} %A }}}}\", 0},\n #include \"specs.h\"\n   /* Mark end of table */\n   {0, 0, 0}\n@@ -1327,6 +1343,7 @@ struct spec_list\n static struct spec_list static_specs[] =\n {\n   INIT_STATIC_SPEC (\"asm\",\t\t\t&asm_spec),\n+  INIT_STATIC_SPEC (\"asm_debug\",\t\t&asm_debug),\n   INIT_STATIC_SPEC (\"asm_final\",\t\t&asm_final_spec),\n   INIT_STATIC_SPEC (\"asm_options\",\t\t&asm_options),\n   INIT_STATIC_SPEC (\"invoke_as\",\t\t&invoke_as),"}, {"sha": "f442b643a5b452fecaba03fa9da12d874e2ca5f9", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0e9ea2789c1f2c3e28497a906857c3ba89564a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5f0e9ea2789c1f2c3e28497a906857c3ba89564a", "patch": "@@ -114,43 +114,6 @@ vms_fopen (fname, type)\n #define fopen vms_fopen\n #endif\t/* VMS  */\n \n-#ifndef DEFAULT_GDB_EXTENSIONS\n-#define DEFAULT_GDB_EXTENSIONS 1\n-#endif\n-\n-/* If more than one debugging type is supported, you must define\n-   PREFERRED_DEBUGGING_TYPE to choose a format in a system-dependent way.\n-\n-   This is one long line cause VAXC can't handle a \\-newline.  */\n-#if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) + defined (DWARF_DEBUGGING_INFO) + defined (DWARF2_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n-#ifndef PREFERRED_DEBUGGING_TYPE\n-You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n-#endif /* no PREFERRED_DEBUGGING_TYPE */\n-#else /* Only one debugging format supported.  Define PREFERRED_DEBUGGING_TYPE\n-\t so the following code needn't care.  */\n-#ifdef DBX_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n-#endif\n-#ifdef XCOFF_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE XCOFF_DEBUG\n-#endif\n-#endif /* More than one debugger format enabled.  */\n-\n-/* If still not defined, must have been because no debugging formats\n-   are supported.  */\n-#ifndef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n-#endif\n-\n #if defined (HAVE_DECL_ENVIRON) && !HAVE_DECL_ENVIRON\n extern char **environ;\n #endif"}]}