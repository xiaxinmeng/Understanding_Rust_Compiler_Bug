{"sha": "781f4ec18fc8cba7f574256630f636424ae2401a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxZjRlYzE4ZmM4Y2JhN2Y1NzQyNTY2MzBmNjM2NDI0YWUyNDAxYQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-12-20T21:56:47Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-12-20T21:56:47Z"}, "message": "re PR target/12749 (i386 LP64 bug.)\n\n2003-12-20  Andrew Pinski  <pinskia@gcc.gnu.org>\n            Matt Thomas  <matt@3am-software.com>\n\n       PR target/12749\n       * config/i386/i386.c (print_operand): Print only the first\n       8 characters of the float in hex.\n\n2003-12-20  Andrew Pinski  <pinskia@gcc.gnu.org>\n\n       PR target/12749\n       * gcc.c-torture/compile/20031220-2.c: New test case.\n\nCo-Authored-By: Matt Thomas <matt@3am-software.com>\n\nFrom-SVN: r74893", "tree": {"sha": "48c1d8c22cabcd4478f077338325d478c4a144d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48c1d8c22cabcd4478f077338325d478c4a144d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/781f4ec18fc8cba7f574256630f636424ae2401a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781f4ec18fc8cba7f574256630f636424ae2401a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781f4ec18fc8cba7f574256630f636424ae2401a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781f4ec18fc8cba7f574256630f636424ae2401a/comments", "author": null, "committer": null, "parents": [{"sha": "3b24df36c08c710b71a76b683f4d3b972c162e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b24df36c08c710b71a76b683f4d3b972c162e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b24df36c08c710b71a76b683f4d3b972c162e9e"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "fa93489086cb8d05e5481f3a6ce840db1724a8b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=781f4ec18fc8cba7f574256630f636424ae2401a", "patch": "@@ -1,3 +1,10 @@\n+2003-12-20  Andrew Pinski  <pinskia@gcc.gnu.org>\n+            Matt Thomas  <matt@3am-software.com>\n+\n+\tPR target/12749\n+\t* config/i386/i386.c (print_operand): Print only the first\n+\t8 characters of the float in hex.\n+\n 2003-12-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.h (TRAMPOLINE_TEMPLATE): Shorten sequence when generating PA"}, {"sha": "cb6ffda4b8d2c391de001ca5bdce94199e5cf1c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=781f4ec18fc8cba7f574256630f636424ae2401a", "patch": "@@ -7457,7 +7457,7 @@ print_operand (FILE *file, rtx x, int code)\n \n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \tputc ('$', file);\n-      fprintf (file, \"0x%lx\", l);\n+      fprintf (file, \"0x%08lx\", l);\n     }\n \n   /* These float cases don't actually occur as immediate operands.  */"}, {"sha": "ccdbbe28eaa2febf84bd1df90521ba19f0f6ac68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=781f4ec18fc8cba7f574256630f636424ae2401a", "patch": "@@ -1,3 +1,8 @@\n+2003-12-20  Andrew Pinski  <pinskia@gcc.gnu.org>\n+\n+\tPR target/12749\n+\t* gcc.c-torture/compile/20031220-2.c: New test case.\n+\n 2003-12-20  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/13031"}, {"sha": "45c82779400d86cbd4a735c58cc9afd7dffe9327", "filename": "gcc/testsuite/gcc.c-torture/compile/20031220-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031220-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781f4ec18fc8cba7f574256630f636424ae2401a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031220-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031220-2.c?ref=781f4ec18fc8cba7f574256630f636424ae2401a", "patch": "@@ -0,0 +1,44 @@\n+/*  PR target/12749\n+  Orgin: Matt Thomas <matt@3am-software.com>\n+  This used to cause GCC to write out an instruction for i386 when using a L64 host\n+  which gas could not handle because GCC would write a full 64bit hex string out. */\n+\n+\n+float fabsf (float);\n+typedef int __int32_t;\n+typedef unsigned int __uint32_t;\n+typedef union\n+{\n+  float value;\n+  __uint32_t word;\n+} ieee_float_shape_type;\n+extern float __ieee754_expf (float);\n+extern float __ieee754_sinhf (float);\n+static const float one = 1.0, shuge = 1.0e37;\n+float\n+__ieee754_sinhf(float x)\n+{\n+        float t,w,h;\n+        __int32_t ix,jx;\n+        do { ieee_float_shape_type gf_u; gf_u.value = (x); (jx) = gf_u.word; } while (0);\n+        ix = jx&0x7fffffff;\n+        if(ix>=0x7f800000) return x+x;\n+        h = 0.5;\n+        if (jx<0) h = -h;\n+        if (ix < 0x41b00000) {\n+            if (ix<0x31800000)\n+                if(shuge+x>one) return x;\n+            t = expm1f(fabsf(x));\n+            if(ix<0x3f800000) return h*((float)2.0*t-t*t/(t+one));\n+            return h*(t+t/(t+one));\n+        }\n+        if (ix < 0x42b17180) return h*__ieee754_expf(fabsf(x));\n+        if (ix<=0x42b2d4fc) {\n+            w = __ieee754_expf((float)0.5*fabsf(x));\n+            t = h*w;\n+            return t*w;\n+        }\n+        return x*shuge;\n+}\n+\n+"}]}