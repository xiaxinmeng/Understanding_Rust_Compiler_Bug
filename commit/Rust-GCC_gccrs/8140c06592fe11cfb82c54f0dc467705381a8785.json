{"sha": "8140c06592fe11cfb82c54f0dc467705381a8785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0MGMwNjU5MmZlMTFjZmI4MmM1NGYwZGM0Njc3MDUzODFhODc4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-07-08T08:48:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-07-08T08:48:40Z"}, "message": "re PR target/57819 (Suboptimal shift patterns)\n\n\tPR target/57819\n\t* simplify-rtx.c (simplify_unary_operation_1) <case ZERO_EXTEND>:\n\tSimplify (zero_extend:SI (subreg:QI (and:SI (reg:SI)\n\t(const_int 63)) 0)).\n\t* combine.c (make_extraction): Create ZERO_EXTEND or SIGN_EXTEND\n\tusing simplify_gen_unary instead of gen_rtx_*_EXTEND.\n\t* config/i386/i386.md (*jcc_bt<mode>_1): New define_insn_and_split.\n\n\t* gcc.target/i386/pr57819.c: New test.\n\nFrom-SVN: r200775", "tree": {"sha": "38579d40ff3a272b2669af830c79e5de77e39b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38579d40ff3a272b2669af830c79e5de77e39b55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8140c06592fe11cfb82c54f0dc467705381a8785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8140c06592fe11cfb82c54f0dc467705381a8785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8140c06592fe11cfb82c54f0dc467705381a8785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8140c06592fe11cfb82c54f0dc467705381a8785/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78d432da45406aaeb97b7485f548d07fc3ca7049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d432da45406aaeb97b7485f548d07fc3ca7049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d432da45406aaeb97b7485f548d07fc3ca7049"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "4fc4e503dc7faed6116ff1c9a3b1957624b58d0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8140c06592fe11cfb82c54f0dc467705381a8785", "patch": "@@ -1,5 +1,13 @@\n 2013-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/57819\n+\t* simplify-rtx.c (simplify_unary_operation_1) <case ZERO_EXTEND>:\n+\tSimplify (zero_extend:SI (subreg:QI (and:SI (reg:SI)\n+\t(const_int 63)) 0)).\n+\t* combine.c (make_extraction): Create ZERO_EXTEND or SIGN_EXTEND\n+\tusing simplify_gen_unary instead of gen_rtx_*_EXTEND.\n+\t* config/i386/i386.md (*jcc_bt<mode>_1): New define_insn_and_split.\n+\n \tPR rtl-optimization/57829\n \t* simplify-rtx.c (simplify_binary_operation_1) <case IOR>: Ensure that\n \tmask bits outside of mode are just sign-extension from mode to HWI."}, {"sha": "ca311ff77973301e0b416200394f4eead0613f34", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8140c06592fe11cfb82c54f0dc467705381a8785", "patch": "@@ -7326,7 +7326,8 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n   if (pos_rtx != 0\n       && GET_MODE_SIZE (pos_mode) > GET_MODE_SIZE (GET_MODE (pos_rtx)))\n     {\n-      rtx temp = gen_rtx_ZERO_EXTEND (pos_mode, pos_rtx);\n+      rtx temp = simplify_gen_unary (ZERO_EXTEND, pos_mode, pos_rtx,\n+\t\t\t\t     GET_MODE (pos_rtx));\n \n       /* If we know that no extraneous bits are set, and that the high\n \t bit is not set, convert extraction to cheaper one - either\n@@ -7340,7 +7341,8 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n \t\t       >> 1))\n \t\t  == 0)))\n \t{\n-\t  rtx temp1 = gen_rtx_SIGN_EXTEND (pos_mode, pos_rtx);\n+\t  rtx temp1 = simplify_gen_unary (SIGN_EXTEND, pos_mode, pos_rtx,\n+\t\t\t\t\t  GET_MODE (pos_rtx));\n \n \t  /* Prefer ZERO_EXTENSION, since it gives more information to\n \t     backends.  */"}, {"sha": "2777e9c86179331c8ffea18ef1559fed3a91b674", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8140c06592fe11cfb82c54f0dc467705381a8785", "patch": "@@ -10474,6 +10474,39 @@\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n+;; Like *jcc_bt<mode>, but expect a SImode operand 2 instead of QImode\n+;; zero extended to SImode.\n+(define_insn_and_split \"*jcc_bt<mode>_1\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:SWI48\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 3))\n+\t\t      (pc)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], SImode, 0);\n+\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n ;; Avoid useless masking of bit offset operand.  \"and\" in SImode is correct\n ;; also for DImode, this is what combine produces.\n (define_insn_and_split \"*jcc_bt<mode>_mask\""}, {"sha": "17a3d12e076e52cd8c68278d83168fd96fbbf210", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8140c06592fe11cfb82c54f0dc467705381a8785", "patch": "@@ -1470,6 +1470,29 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t    }\n \t}\n \n+      /* (zero_extend:M (subreg:N <X:O>)) is <X:O> (for M == O) or\n+\t (zero_extend:M <X:O>), if X doesn't have any non-zero bits outside\n+\t of mode N.  E.g.\n+\t (zero_extend:SI (subreg:QI (and:SI (reg:SI) (const_int 63)) 0)) is\n+\t (and:SI (reg:SI) (const_int 63)).  */\n+      if (GET_CODE (op) == SUBREG\n+\t  && GET_MODE_PRECISION (GET_MODE (op))\n+\t     < GET_MODE_PRECISION (GET_MODE (SUBREG_REG (op)))\n+\t  && GET_MODE_PRECISION (GET_MODE (SUBREG_REG (op)))\n+\t     <= HOST_BITS_PER_WIDE_INT\n+\t  && GET_MODE_PRECISION (mode)\n+\t     >= GET_MODE_PRECISION (GET_MODE (SUBREG_REG (op)))\n+\t  && subreg_lowpart_p (op)\n+\t  && (nonzero_bits (SUBREG_REG (op), GET_MODE (SUBREG_REG (op)))\n+\t      & ~GET_MODE_MASK (GET_MODE (op))) == 0)\n+\t{\n+\t  if (GET_MODE_PRECISION (mode)\n+\t      == GET_MODE_PRECISION (GET_MODE (SUBREG_REG (op))))\n+\t    return SUBREG_REG (op);\n+\t  return simplify_gen_unary (ZERO_EXTEND, mode, SUBREG_REG (op),\n+\t\t\t\t     GET_MODE (SUBREG_REG (op)));\n+\t}\n+\n #if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n       /* As we do not know which address space the pointer is referring to,\n \t we can do this only if the target does not support different pointer"}, {"sha": "8de216fa48b59f3dc7e530a7cb5593c73fb47cdc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8140c06592fe11cfb82c54f0dc467705381a8785", "patch": "@@ -1,5 +1,8 @@\n 2013-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/57819\n+\t* gcc.target/i386/pr57819.c: New test.\n+\n \tPR rtl-optimization/57829\n \t* gcc.c-torture/execute/pr57829.c: New test.\n "}, {"sha": "b086a40c4ce7b0666854a6e16e70729fea8ce012", "filename": "gcc/testsuite/gcc.target/i386/pr57819.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57819.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8140c06592fe11cfb82c54f0dc467705381a8785/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57819.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57819.c?ref=8140c06592fe11cfb82c54f0dc467705381a8785", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/57819 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+void foo (void);\n+\n+__extension__ typedef __INTPTR_TYPE__ intptr_t;\n+\n+int\n+test1 (intptr_t x, intptr_t n)\n+{\n+  n &= sizeof (intptr_t) * __CHAR_BIT__ - 1;\n+\n+  if (x & ((intptr_t) 1 << n))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+int\n+test2 (intptr_t x, intptr_t n)\n+{\n+  if (x & ((intptr_t) 1 << ((int) n & (sizeof (intptr_t) * __CHAR_BIT__ - 1))))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+int\n+test3 (intptr_t x, intptr_t n)\n+{\n+  if (x & ((intptr_t) 1 << ((int) n & ((int) sizeof (intptr_t) * __CHAR_BIT__ - 1))))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}]}