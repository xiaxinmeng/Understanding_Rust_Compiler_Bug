{"sha": "2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmMjNmNjZlMjhmZTliNGM5ZDUzM2E2NTBjOWQ2NWUyMGI0YjFiYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:42:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:42:56Z"}, "message": "[multiple changes]\n\n2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch4.adb (Library_Level_Target): New function.\n\t(Expand_Concatenate): When optimization is enabled, also expand\n\tthe operation out-of-line if the concatenation is present within\n\tthe expression of the declaration of a library-level object and\n\tnot only if it is the expression of the declaration.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* freeze.adb (Freeze_Object_Declaration): Do\n\tnot Remove_Side_Effects if there is a pragma Linker_Section,\n\tbecause in that case we want static initialization in the\n\tappropriate section.\n\n2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_dbug.adb: Minor rewording and reformatting.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Statically_Denotes_Object): New predicate, to\n\thandle the proposed changes to rules concerning potentially\n\tunevaluated expressions, to include selected components that\n\tdo not depend on discriminants, and indexed components with\n\tstatic indices.\n\t* sem_util.adb (Is_Potentially_Unevaluated): Add check for\n\tpredicate in quantified expression, and fix bugs in the handling\n\tof case expressions and membership test.\n\t(Analyze_Attribute_Old_Result): use new predicate.\n\t(Analyze_Attribute, case Loop_Entry): ditto.\n\nFrom-SVN: r247167", "tree": {"sha": "a5bd6920b9d4f50280c3444d16787aab096a0dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5bd6920b9d4f50280c3444d16787aab096a0dbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/comments", "author": null, "committer": null, "parents": [{"sha": "d9049849d0052ba4c7ab5585d896c7e746add39f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9049849d0052ba4c7ab5585d896c7e746add39f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9049849d0052ba4c7ab5585d896c7e746add39f"}], "stats": {"total": 197, "additions": 171, "deletions": 26}, "files": [{"sha": "ac39123cec269065b2c6e729e1dafa03cf6adee3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "patch": "@@ -1,3 +1,35 @@\n+2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Library_Level_Target): New function.\n+\t(Expand_Concatenate): When optimization is enabled, also expand\n+\tthe operation out-of-line if the concatenation is present within\n+\tthe expression of the declaration of a library-level object and\n+\tnot only if it is the expression of the declaration.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* freeze.adb (Freeze_Object_Declaration): Do\n+\tnot Remove_Side_Effects if there is a pragma Linker_Section,\n+\tbecause in that case we want static initialization in the\n+\tappropriate section.\n+\n+2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_dbug.adb: Minor rewording and reformatting.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Statically_Denotes_Object): New predicate, to\n+\thandle the proposed changes to rules concerning potentially\n+\tunevaluated expressions, to include selected components that\n+\tdo not depend on discriminants, and indexed components with\n+\tstatic indices.\n+\t* sem_util.adb (Is_Potentially_Unevaluated): Add check for\n+\tpredicate in quantified expression, and fix bugs in the handling\n+\tof case expressions and membership test.\n+\t(Analyze_Attribute_Old_Result): use new predicate.\n+\t(Analyze_Attribute, case Loop_Entry): ditto.\n+\n 2017-04-25  Bob Duff  <duff@adacore.com>\n \n \t* s-secsta.adb (SS_Info): Add a comment"}, {"sha": "1fdc50cf5648d1c8f418b7b670abea69a7de9532", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "patch": "@@ -2767,6 +2767,10 @@ package body Exp_Ch4 is\n       --  Set True during generation of the assignments of operands into\n       --  result once an operand known to be non-null has been seen.\n \n+      function Library_Level_Target return Boolean;\n+      --  Return True if the concatenation is within the expression of the\n+      --  declaration of a library-level object.\n+\n       function Make_Artyp_Literal (Val : Nat) return Node_Id;\n       --  This function makes an N_Integer_Literal node that is returned in\n       --  analyzed form with the type set to Artyp. Importantly this literal\n@@ -2782,6 +2786,30 @@ package body Exp_Ch4 is\n       function To_Ityp (X : Node_Id) return Node_Id;\n       --  The inverse function (uses Val in the case of enumeration types)\n \n+      --------------------------\n+      -- Library_Level_Target --\n+      --------------------------\n+\n+      function Library_Level_Target return Boolean is\n+         P : Node_Id := Parent (Cnode);\n+\n+      begin\n+         while Present (P) loop\n+            if Nkind (P) = N_Object_Declaration then\n+               return Is_Library_Level_Entity (Defining_Identifier (P));\n+\n+            --  Prevent the search from going too far\n+\n+            elsif Is_Body_Or_Package_Declaration (P) then\n+               return False;\n+            end if;\n+\n+            P := Parent (P);\n+         end loop;\n+\n+         return False;\n+      end Library_Level_Target;\n+\n       ------------------------\n       -- Make_Artyp_Literal --\n       ------------------------\n@@ -2842,16 +2870,6 @@ package body Exp_Ch4 is\n \n       --  Local Declarations\n \n-      Lib_Level_Target : constant Boolean :=\n-        Nkind (Parent (Cnode)) = N_Object_Declaration\n-          and then\n-            Is_Library_Level_Entity (Defining_Identifier (Parent (Cnode)));\n-\n-      --  If the concatenation declares a library level entity, we call the\n-      --  built-in concatenation routines to prevent code bloat, regardless\n-      --  of optimization level. This is space-efficient, and prevent linking\n-      --  problems when units are compiled with different optimizations.\n-\n       Opnd_Typ : Entity_Id;\n       Ent      : Entity_Id;\n       Len      : Uint;\n@@ -3372,22 +3390,27 @@ package body Exp_Ch4 is\n \n       --    There are nine or fewer retained (non-null) operands\n \n-      --    The optimization level is -O0\n+      --    The optimization level is -O0 or the debug flag gnatd.C is set,\n+      --    and the debug flag gnatd.c is not set.\n \n       --    The corresponding System.Concat_n.Str_Concat_n routine is\n       --    available in the run time.\n \n-      --    The debug flag gnatd.c is not set\n-\n       --  If all these conditions are met then we generate a call to the\n       --  relevant concatenation routine. The purpose of this is to avoid\n       --  undesirable code bloat at -O0.\n \n+      --  If the concatenation is within the declaration of a library-level\n+      --  object, we call the built-in concatenation routines to prevent code\n+      --  bloat, regardless of the optimization level. This is space efficient\n+      --  and prevents linking problems when units are compiled with different\n+      --  optimization levels.\n+\n       if Atyp = Standard_String\n         and then NN in 2 .. 9\n-        and then (Lib_Level_Target\n-          or else ((Optimization_Level = 0 or else Debug_Flag_Dot_CC)\n-                     and then not Debug_Flag_Dot_C))\n+        and then (((Optimization_Level = 0 or else Debug_Flag_Dot_CC)\n+                     and then not Debug_Flag_Dot_C)\n+                  or else Library_Level_Target)\n       then\n          declare\n             RR : constant array (Nat range 2 .. 9) of RE_Id :="}, {"sha": "e463c79a3abeb8c7a54943f6e834cf9dd98f36aa", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "patch": "@@ -389,14 +389,15 @@ package body Exp_Dbug is\n          Ren := Original_Node (Ren);\n \n          case Nkind (Ren) is\n-            when N_Identifier | N_Expanded_Name =>\n-\n+            when N_Expanded_Name\n+               | N_Identifier\n+            =>\n                if not Present (Renamed_Object (Entity (Ren))) then\n                   exit;\n                end if;\n \n-               --  This is a renaming of a renaming: traverse until the\n-               --  final renaming to see if anything is packed on the way.\n+               --  This is a renaming of a renaming: traverse until the final\n+               --  renaming to see if anything is packed along the way.\n \n                Ren := Renamed_Object (Entity (Ren));\n \n@@ -443,11 +444,14 @@ package body Exp_Dbug is\n                Ren := Prefix (Ren);\n \n             when N_Slice =>\n+\n                --  Assuming X is an array:\n                --      X (Y1 .. Y2) (Y3)\n+\n                --  is equivalent to:\n                --      X (Y3)\n-               --  GDB cannot handle packed array slices, so avoid to describe\n+\n+               --  GDB cannot handle packed array slices, so avoid describing\n                --  the slice if we can avoid it.\n \n                if not Last_Is_Indexed_Comp then"}, {"sha": "523040e01704d66ce3db00cccf8080e74c2a00a5", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "patch": "@@ -3197,12 +3197,15 @@ package body Freeze is\n \n          --  Similar processing is needed for aspects that may affect\n          --  object layout, like Alignment, if there is an initialization\n-         --  expression.\n+         --  expression. We don't do this if there is a pragma Linker_Section,\n+         --  because it would prevent the back end from statically initializing\n+         --  the object; we don't want elaboration code in that case.\n \n          if Has_Delayed_Aspects (E)\n            and then Expander_Active\n            and then Is_Array_Type (Etype (E))\n            and then Present (Expression (Parent (E)))\n+           and then No (Linker_Section_Pragma (E))\n          then\n             declare\n                Decl : constant Node_Id := Parent (E);"}, {"sha": "833cb8ecdc005c54383dab49aa432eedc8468930", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "patch": "@@ -210,6 +210,15 @@ package body Sem_Attr is\n    --  Standard_True, depending on the value of the parameter B. The\n    --  result is marked as a static expression.\n \n+   function Statically_Denotes_Object (N : Node_Id) return Boolean;\n+   --  Predicate used to check the legality of the prefix to 'Loop_Entry and\n+   --  'Old, when the prefix is not an entity name. Current RM specfies that\n+   --  the prefix must be a direct or expanded name, but it has been proposed\n+   --  that the prefix be allowed to be a selected component that does not\n+   --  depend on a discriminant, or an indexed component with static indices.\n+   --  Current code for this predicate implements this more permissive\n+   --  implementation.\n+\n    -----------------------\n    -- Analyze_Attribute --\n    -----------------------\n@@ -4501,6 +4510,7 @@ package body Sem_Attr is\n \n          if Is_Entity_Name (P)\n            or else Nkind (Parent (P)) = N_Object_Renaming_Declaration\n+           or else Statically_Denotes_Object (P)\n          then\n             null;\n \n@@ -4999,7 +5009,9 @@ package body Sem_Attr is\n             --  Ensure that the prefix of attribute 'Old is an entity when it\n             --  is potentially unevaluated (6.1.1 (27/3)).\n \n-            if Is_Potentially_Unevaluated (N) then\n+            if Is_Potentially_Unevaluated (N)\n+              and then not Statically_Denotes_Object (P)\n+            then\n                Uneval_Old_Msg;\n \n             --  Detect a possible infinite recursion when the prefix denotes\n@@ -11808,6 +11820,59 @@ package body Sem_Attr is\n       end if;\n    end Set_Boolean_Result;\n \n+   -------------------------------\n+   -- Statically_Denotes_Object --\n+   -------------------------------\n+\n+   function Statically_Denotes_Object (N : Node_Id) return Boolean is\n+      Indx : Node_Id;\n+\n+   begin\n+      if Is_Entity_Name (N) then\n+         return True;\n+\n+      elsif Nkind (N) = N_Selected_Component\n+        and then Statically_Denotes_Object (Prefix (N))\n+        and then Present (Entity (Selector_Name (N)))\n+      then\n+         declare\n+            Sel_Id    : constant Entity_Id := Entity (Selector_Name (N));\n+            Comp_Decl : constant Node_Id   := Parent (Sel_Id);\n+\n+         begin\n+            if Depends_On_Discriminant (Sel_Id) then\n+               return False;\n+\n+            elsif Nkind (Parent (Parent (Comp_Decl))) = N_Variant then\n+               return False;\n+\n+            else\n+               return True;\n+            end if;\n+         end;\n+\n+      elsif Nkind (N) = N_Indexed_Component\n+        and then Statically_Denotes_Object (Prefix (N))\n+        and then Is_Constrained (Etype (Prefix (N)))\n+      then\n+         Indx := First (Expressions (N));\n+         while Present (Indx) loop\n+            if not Compile_Time_Known_Value (Indx)\n+              or else Do_Range_Check (Indx)\n+            then\n+               return False;\n+            end if;\n+\n+            Next (Indx);\n+         end loop;\n+\n+         return True;\n+\n+      else\n+         return False;\n+      end if;\n+   end Statically_Denotes_Object;\n+\n    --------------------------------\n    -- Stream_Attribute_Available --\n    --------------------------------"}, {"sha": "0db7f0f847f52fdd342c03e7d0dca753b8e37226", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2df23f66e28fe9b4c9d533a650c9d65e20b4b1ba", "patch": "@@ -14439,7 +14439,8 @@ package body Sem_Util is\n                                N_And_Then,\n                                N_Or_Else,\n                                N_In,\n-                               N_Not_In)\n+                               N_Not_In,\n+                               N_Quantified_Expression)\n       loop\n          Expr := Par;\n          Par  := Parent (Par);\n@@ -14448,7 +14449,10 @@ package body Sem_Util is\n          --  expansion of an enclosing construct (such as another attribute)\n          --  the predicate does not apply.\n \n-         if Nkind (Par) not in N_Subexpr\n+         if Nkind (Par) = N_Case_Expression_Alternative then\n+            null;\n+\n+         elsif Nkind (Par) not in N_Subexpr\n            or else not Comes_From_Source (Par)\n          then\n             return False;\n@@ -14465,7 +14469,21 @@ package body Sem_Util is\n          return Expr = Right_Opnd (Par);\n \n       elsif Nkind_In (Par, N_In, N_Not_In) then\n-         return Expr /= Left_Opnd (Par);\n+\n+         --  If the membership includes several alternatives, only the first is\n+         --  definitely evaluated.\n+\n+         if Present (Alternatives (Par)) then\n+            return Expr /= First (Alternatives (Par));\n+\n+         --  If this is a range membership both bounds are evaluated\n+\n+         else\n+            return False;\n+         end if;\n+\n+      elsif Nkind (Par) = N_Quantified_Expression then\n+         return Expr = Condition (Par);\n \n       else\n          return False;"}]}