{"sha": "630d42a0aef7a99b330446bc2e54ba049db9289b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwZDQyYTBhZWY3YTk5YjMzMDQ0NmJjMmU1NGJhMDQ5ZGI5Mjg5Yg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-01-30T20:47:32Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-01-30T20:47:32Z"}, "message": "Fix whitespace.\n\nFrom-SVN: r76990", "tree": {"sha": "71c58ea0d7c1399c37742df59600ad953f8e6889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71c58ea0d7c1399c37742df59600ad953f8e6889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630d42a0aef7a99b330446bc2e54ba049db9289b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630d42a0aef7a99b330446bc2e54ba049db9289b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630d42a0aef7a99b330446bc2e54ba049db9289b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630d42a0aef7a99b330446bc2e54ba049db9289b/comments", "author": null, "committer": null, "parents": [{"sha": "98e5e08701da5a0f77eb8f3efc824043ec635bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e5e08701da5a0f77eb8f3efc824043ec635bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e5e08701da5a0f77eb8f3efc824043ec635bdf"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "127f4b140c169ccbcf54b262d7136c04ce6e2c39", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630d42a0aef7a99b330446bc2e54ba049db9289b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630d42a0aef7a99b330446bc2e54ba049db9289b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=630d42a0aef7a99b330446bc2e54ba049db9289b", "patch": "@@ -3426,47 +3426,47 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t      adjust_address (operands[1], SImode, 4));\n       return;\n     }\n-    else if (mode == DImode && TARGET_POWERPC64\n-               && GET_CODE (operands[0]) == REG\n-               && GET_CODE (operands[1]) == MEM && optimize > 0\n-               && SLOW_UNALIGNED_ACCESS (DImode,\n-                                         MEM_ALIGN (operands[1]) > 32\n-                                         ? 32\n-                                         : MEM_ALIGN (operands[1]))\n-               && !no_new_pseudos)\n-      {\n-        rtx reg = gen_reg_rtx (SImode);\n-\temit_insn (gen_rtx_SET (SImode, reg,\n-\t\t\t\tadjust_address (operands[1], SImode, 0)));\n-        reg = simplify_gen_subreg (DImode, reg, SImode, 0);\n-        emit_insn (gen_insvdi (operands[0], GEN_INT (32), const0_rtx, reg));\n-        reg = gen_reg_rtx (SImode);\n-\temit_insn (gen_rtx_SET (SImode, reg,\n-\t\t\t\tadjust_address (operands[1], SImode, 4)));\n-        reg = simplify_gen_subreg (DImode, reg, SImode, 0);\n-        emit_insn (gen_insvdi (operands[0], GEN_INT (32), GEN_INT (32), reg));\n-        return;\n-      }\n-      else if (mode == DImode && TARGET_POWERPC64\n-               && GET_CODE (operands[1]) == REG\n-               && GET_CODE (operands[0]) == MEM && optimize > 0\n-               && SLOW_UNALIGNED_ACCESS (DImode,\n-                                         MEM_ALIGN (operands[0]) > 32\n-                                         ? 32\n-                                         : MEM_ALIGN (operands[0]))\n-               && !no_new_pseudos)\n+  else if (mode == DImode && TARGET_POWERPC64\n+\t   && GET_CODE (operands[0]) == REG\n+\t   && GET_CODE (operands[1]) == MEM && optimize > 0\n+\t   && SLOW_UNALIGNED_ACCESS (DImode,\n+\t\t\t\t     MEM_ALIGN (operands[1]) > 32\n+\t\t\t\t     ? 32\n+\t\t\t\t     : MEM_ALIGN (operands[1]))\n+\t   && !no_new_pseudos)\n+    {\n+      rtx reg = gen_reg_rtx (SImode);\n+      emit_insn (gen_rtx_SET (SImode, reg,\n+\t\t\t      adjust_address (operands[1], SImode, 0)));\n+      reg = simplify_gen_subreg (DImode, reg, SImode, 0);\n+      emit_insn (gen_insvdi (operands[0], GEN_INT (32), const0_rtx, reg));\n+      reg = gen_reg_rtx (SImode);\n+      emit_insn (gen_rtx_SET (SImode, reg,\n+\t\t\t      adjust_address (operands[1], SImode, 4)));\n+      reg = simplify_gen_subreg (DImode, reg, SImode, 0);\n+      emit_insn (gen_insvdi (operands[0], GEN_INT (32), GEN_INT (32), reg));\n+      return;\n+    }\n+  else if (mode == DImode && TARGET_POWERPC64\n+\t   && GET_CODE (operands[1]) == REG\n+\t   && GET_CODE (operands[0]) == MEM && optimize > 0\n+\t   && SLOW_UNALIGNED_ACCESS (DImode,\n+\t\t\t\t     MEM_ALIGN (operands[0]) > 32\n+\t\t\t\t     ? 32\n+\t\t\t\t     : MEM_ALIGN (operands[0]))\n+\t   && !no_new_pseudos)\n       {\n-        rtx reg = gen_reg_rtx (DImode);\n-        emit_move_insn (reg,\n+\trtx reg = gen_reg_rtx (DImode);\n+\temit_move_insn (reg,\n \t\t\tgen_rtx_LSHIFTRT (DImode, operands[1], GEN_INT (32)));\n-        emit_move_insn (adjust_address (operands[0], SImode, 0),\n+\temit_move_insn (adjust_address (operands[0], SImode, 0),\n \t\t\tsimplify_gen_subreg (SImode, reg, DImode, 0));\n-        emit_move_insn (reg, operands[1]);\n-        emit_move_insn (adjust_address (operands[0], SImode, 4),\n+\temit_move_insn (reg, operands[1]);\n+\temit_move_insn (adjust_address (operands[0], SImode, 4),\n \t\t\tsimplify_gen_subreg (SImode, reg, DImode, 0));\n-        return;\n+\treturn;\n       }\n-  \n+\n   if (!no_new_pseudos)\n     {\n       if (GET_CODE (operands[1]) == MEM && optimize > 0"}]}