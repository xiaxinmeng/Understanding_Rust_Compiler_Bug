{"sha": "7a2aa63fad06a72d9770b08491f1a7809eac7c50", "node_id": "C_kwDOANBUbNoAKDdhMmFhNjNmYWQwNmE3MmQ5NzcwYjA4NDkxZjFhNzgwOWVhYzdjNTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-18T08:07:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-18T08:07:31Z"}, "message": "libgomp: Fix up aligned_alloc arguments [PR102838]\n\nC says that aligned_alloc size must be an integral multiple of alignment.\nWhile glibc doesn't care about it, apparently Solaris does.\nSo, this patch decreases the priority of aligned_alloc among the other\nvariants because it needs more work and can waste more memory and rounds\nup the size to multiple of alignment.\n\n2021-11-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/102838\n\t* alloc.c (gomp_aligned_alloc): Prefer _aligned_alloc over\n\tmemalign over posix_memalign over aligned_alloc over fallback\n\twith malloc instead of aligned_alloc over _aligned_alloc over\n\tposix_memalign over memalign over fallback with malloc.  For\n\taligned_alloc, round up size up to multiple of al.", "tree": {"sha": "c251c62b7511133488cbaf393625f35042911603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c251c62b7511133488cbaf393625f35042911603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a2aa63fad06a72d9770b08491f1a7809eac7c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2aa63fad06a72d9770b08491f1a7809eac7c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2aa63fad06a72d9770b08491f1a7809eac7c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2aa63fad06a72d9770b08491f1a7809eac7c50/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72b7a455c144b29609c8ecf4dff12dc9040cf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72b7a455c144b29609c8ecf4dff12dc9040cf2c"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3109b86a4d1d090c5328a42bc8a263a712999da1", "filename": "libgomp/alloc.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2aa63fad06a72d9770b08491f1a7809eac7c50/libgomp%2Falloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2aa63fad06a72d9770b08491f1a7809eac7c50/libgomp%2Falloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Falloc.c?ref=7a2aa63fad06a72d9770b08491f1a7809eac7c50", "patch": "@@ -65,18 +65,24 @@ gomp_aligned_alloc (size_t al, size_t size)\n   void *ret;\n   if (al < sizeof (void *))\n     al = sizeof (void *);\n-#ifdef HAVE_ALIGNED_ALLOC\n-  ret = aligned_alloc (al, size);\n-#elif defined(HAVE__ALIGNED_MALLOC)\n+#ifdef HAVE__ALIGNED_MALLOC\n   ret = _aligned_malloc (size, al);\n-#elif defined(HAVE_POSIX_MEMALIGN)\n-  if (posix_memalign (&ret, al, size) != 0)\n-    ret = NULL;\n #elif defined(HAVE_MEMALIGN)\n   {\n     extern void *memalign (size_t, size_t);\n     ret = memalign (al, size);\n   }\n+#elif defined(HAVE_POSIX_MEMALIGN)\n+  if (posix_memalign (&ret, al, size) != 0)\n+    ret = NULL;\n+#lif defined(HAVE_ALIGNED_ALLOC)\n+  {\n+    size_t sz = (size + al - 1) & ~(al - 1);\n+    if (__builtin_expect (sz >= size, 1))\n+      ret = aligned_alloc (al, sz);\n+    else\n+      ret = NULL;\n+  }\n #else\n   ret = NULL;\n   if ((al & (al - 1)) == 0 && size)"}]}