{"sha": "3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "node_id": "C_kwDOANBUbNoAKDNmZTY2ZjdmOWYwOTQwY2JhZjVhMjEzNjZlY2RjNmM1NzM2MGIyZjE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-07T00:18:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-07T00:18:44Z"}, "message": "Daily bump.", "tree": {"sha": "480d0fd10a1e32769ffe9c419faa7b0badb4f727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480d0fd10a1e32769ffe9c419faa7b0badb4f727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/comments", "author": null, "committer": null, "parents": [{"sha": "dfe2ef7f2b6cac7017f32a0a04f74e1b6d9f1311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe2ef7f2b6cac7017f32a0a04f74e1b6d9f1311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe2ef7f2b6cac7017f32a0a04f74e1b6d9f1311"}], "stats": {"total": 555, "additions": 554, "deletions": 1}, "files": [{"sha": "6cfef781ce8a58f24fb5c814e977b66e516a1b00", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,7 @@\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.doxy (INPUT): Add gcc/analyzer subdirectory.\n+\n 2022-11-25  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "2e6869f5a2e46d26a1b2667705b0610dc3c2b1bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,105 @@\n+2022-12-06  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_bitmask_imm): Use unsigned type.\n+\t(aarch64_is_mov_xn_imm): New function.\n+\t(aarch64_move_imm): Refactor, assert mode is SImode or DImode.\n+\t(aarch64_internal_mov_immediate): Assert mode is SImode or DImode.\n+\tSimplify special cases.\n+\t(aarch64_uimm12_shift): Simplify code.\n+\t(aarch64_clamp_to_uimm12_shift): Likewise.\n+\t(aarch64_movw_imm): Rename to aarch64_is_movz.\n+\t(aarch64_float_const_rtx_p): Pass either SImode or DImode to\n+\taarch64_internal_mov_immediate.\n+\t(aarch64_rtx_costs): Likewise.\n+\t* config/aarch64/aarch64.md (movdi_aarch64): Merge 'N' and 'M'\n+\tconstraints into single 'O'.\n+\t(mov<mode>_aarch64): Likewise.\n+\t* config/aarch64/aarch64-protos.h (aarch64_move_imm): Use unsigned.\n+\t(aarch64_bitmask_imm): Likewise.\n+\t(aarch64_uimm12_shift): Likewise.\n+\t(aarch64_is_mov_xn_imm): New prototype.\n+\t* config/aarch64/constraints.md: Add 'O' for 32/64-bit immediates,\n+\tlimit 'N' to 64-bit only moves.\n+\n+2022-12-06  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* attribs.cc (strict_flex_array_level_of): New function.\n+\t* attribs.h (strict_flex_array_level_of): Prototype for new function.\n+\t* doc/invoke.texi: Update -Warray-bounds by specifying the impact from\n+\t-fstrict-flex-arrays. Also update -Warray-bounds=2 by eliminating its\n+\timpact on treating trailing arrays as flexible array members.\n+\t* gimple-array-bounds.cc (get_up_bounds_for_array_ref): New function.\n+\t(check_out_of_bounds_and_warn): New function.\n+\t(array_bounds_checker::check_array_ref): Update with call to the above\n+\tnew functions.\n+\t* tree.cc (array_ref_flexible_size_p): Add one new argument.\n+\t(component_ref_sam_type): New function.\n+\t(component_ref_size): Control with level of strict-flex-array.\n+\t* tree.h (array_ref_flexible_size_p): Update prototype.\n+\t(enum struct special_array_member): Add two new enum values.\n+\t(component_ref_sam_type): New prototype.\n+\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi: Drop out-of-date ideas for other checkers.\n+\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/call-details.o,\n+\tanalyzer/kf-analyzer.o, and kf-lang-cp.o.\n+\n+2022-12-06  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* gimplify.cc (optimize_target_teams): Set initial num_teams_upper\n+\tto \"-2\" instead of \"1\" for non-existing num_teams clause in order to\n+\tdisambiguate from the case of an existing num_teams clause with value 1.\n+\n+2022-12-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/107987\n+\t* config/arm/mve.md (mve_vcmp<mve_cmp_op>q_n_<mode>,\n+\t@mve_vcmp<mve_cmp_op>q_n_f<mode>): Apply vec_duplicate to scalar\n+\toperand.\n+\n+2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107969\n+\t* config/i386/i386.md (cbranchbf4, cstorebf4): Guard expanders\n+\twith the same condition as cbranchsf4 or cstoresf4 expanders.\n+\n+2022-12-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104475\n+\t* pointer-query.h (access_ref::ref_nullptr_p): New flag.\n+\t* pointer-query.cc (access_ref::access_ref): Initialize\n+\tref_nullptr_p.\n+\t(compute_objsize_r): Set ref_nullptr_p if we treat it that way.\n+\t(access_ref::inform_access): If ref was treated as nullptr\n+\tbased, indicate that.\n+\n+2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107972\n+\t* range-op-float.cc (frange_drop_infs): New function.\n+\t(float_binary_op_range_finish): Add DIV_OP2 argument.  If DIV_OP2 is\n+\tfalse and lhs is finite or if DIV_OP2 is true and lhs is non-zero and\n+\tnot NAN, r must be finite too.\n+\t(foperator_div::op2_range): Pass true to DIV_OP2 of\n+\tfloat_binary_op_range_finish.\n+\n+2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107975\n+\t* range-op-float.cc (foperator_mult::op1_range,\n+\tfoperator_div::op1_range, foperator_div::op2_range): Just\n+\treturn float_binary_op_range_finish result if lhs is known\n+\tNAN, or the other operand is known NAN or UNDEFINED.\n+\n+2022-12-06  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_expand_vector_init): Use dup\n+\tand zip1 for interleaving elements in vector initializer.\n+\n 2022-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/40635"}, {"sha": "ec18fda0770368245f241ff07850f8ecc996a319", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1 +1 @@\n-20221206\n+20221207"}, {"sha": "7ecefd88ba49db8fdb0e67fcfff72874e33918fb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,185 @@\n+2022-12-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* contracts.adb (Add_Contract_Item): Allow No_Caching on types.\n+\t(Check_Type_Or_Object_External_Properties): Check No_Caching.\n+\tCheck that non-effectively volatile types does not contain an\n+\teffectively volatile component (instead of just a volatile\n+\tcomponent).\n+\t(Analyze_Object_Contract): Remove shared checking of No_Caching.\n+\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part): Adapt checking\n+\tof No_Caching for types.\n+\t(Analyze_Pragma): Allow No_Caching on types.\n+\t* sem_util.adb (Has_Effectively_Volatile_Component): New query function.\n+\t(Is_Effectively_Volatile): Type with Volatile and No_Caching is not\n+\teffectively volatile.\n+\t(No_Caching_Enabled): Remove assertion to apply to all entities.\n+\t* sem_util.ads: Same.\n+\n+2022-12-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb\n+\t(Build_Static_Check_Helper_Call): Perform implicit type conversion\n+\tto ensure matching types and avoid reporting spurious errors.\n+\n+2022-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Bail out for a\n+\tmembership test with a mark for a subtype that is predicated.\n+\n+2022-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_elab.adb (Processing_In_State): Add Within_Freezing_Actions\n+\tcomponent.\n+\t(Process_Conditional_ABE_Call): Compute its value.\n+\t(Process_Conditional_ABE_Call_SPARK): For a call and a target in\n+\tthe main unit, do not emit any ABE diagnostics if the call occurs\n+\tin a freezing actions context.\n+\n+2022-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Actual_Subtype): Document additional usage.\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Replace test on\n+\tIs_Build_In_Place_Return_Object with Is_Special_Return_Object.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Factor out parts of the\n+\tprocessing done for build-in-place return objects and reuse them to\n+\timplement a similar processing for specific return objects.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Do not generate a tag\n+\tassignment or an adjustment if the allocator was made for a special\n+\treturn object.\n+\t(Expand_Concatenate): If the result is allocated on the secondary\n+\tstack, use an unconstrained allocation.\n+\t* exp_ch6.ads (Apply_CW_Accessibility_Check): New declaration.\n+\t(Is_By_Reference_Return_Object): Likewise.\n+\t(Is_Secondary_Stack_Return_Object): Likewise.\n+\t(Is_Special_Return_Object): Likewise.\n+\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Do not bail out for the\n+\texpression in the declaration of a special return object.\n+\t(Expand_N_Extended_Return_Statement): Add missing guard and move\n+\tthe class-wide accessibility check to Expand_N_Object_Declaration.\n+\t(Expand_Simple_Function_Return): Delete obsolete commentary.\n+\tSkip the special processing for types that require finalization or\n+\tare returned on the secondary stack if the return originally comes\n+\tfrom an extended return statement.  Add missing Constant_Present.\n+\t(Is_By_Reference_Return_Object): New predicate.\n+\t(Is_Secondary_Stack_Return_Object): Likewise.\n+\t(Is_Special_Return_Object): Likewise.\n+\t* exp_util.adb (Is_Related_To_Func_Return): Also return true if the\n+\tparent of the expression is the renaming declaration generated for\n+\tthe expansion of a return object.\n+\t* gen_il-fields.ads (Opt_Field_Enum): Replace Alloc_For_BIP_Return\n+\twith For_Special_Return_Object.\n+\t* gen_il-gen-gen_nodes.adb (N_Allocator): Likewise.\n+\t* gen_il-internals.adb (Image): Remove Alloc_For_BIP_Return.\n+\t* sem_ch3.adb (Check_Return_Subtype_Indication): New procedure\n+\tmoved from sem_ch6.adb.\n+\t(Analyze_Object_Declaration): Call it on a return object.\n+\t* sem_ch4.adb: Add with and use clauses for Rtsfind.\n+\t(Analyze_Allocator): Test For_Special_Return_Object to skip checks\n+\tfor allocators made for special return objects.\n+\tDo not report restriction violations for the return stack pool.\n+\t* sem_ch5.adb (Analyze_Assignment.Set_Assignment_Type): Return the\n+\tActual_Subtype for return objects that live on the secondary stack.\n+\t* sem_ch6.adb (Check_Return_Subtype_Indication): Move procedure to\n+\tsem_ch3.adb.\n+\t(Analyze_Function_Return): Do not call above procedure.\n+\t* sem_res.adb (Resolve_Allocator): Replace Alloc_For_BIP_Return\n+\twith For_Special_Return_Object.\n+\t* sinfo.ads: Likewise.\n+\t* treepr.adb (Image): Remove Alloc_For_BIP_Return.\n+\t* gcc-interface/trans.cc (gnat_to_gnu): Do not convert to the result\n+\ttype in the unconstrained array type case if the parent is a simple\n+\treturn statement.\n+\n+2022-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Membership_Op): Adjust latest change.\n+\n+2022-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_In) <Substitute_Valid_Check>: Rename to...\n+\t<Substitute_Valid_Test>: ...this.\n+\tUse Is_Entity_Name to test for the presence of entity references.\n+\tDo not warn or substitute a valid test for a test with a mark for\n+\ta subtype that is predicated.\n+\tApply the same transformation for a test with a mark for a subtype\n+\tthat is predicated as for a subtype that is not.\n+\tRemove useless return statement.\n+\t* sem_res.adb (Resolve_Membership_Op): Perform a special resolution\n+\tif the left operand is of a universal numeric type.\n+\n+2022-12-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* accessibility.adb, accessibility.ads\n+\t(Accessibility_Message): Moved from sem_attr.\n+\t(Apply_Accessibility_Check): Moved from checks.\n+\t(Apply_Accessibility_Check_For_Allocator): Moved from exp_ch4 and\n+\trenamed\n+\t(Check_Return_Construct_Accessibility): Moved from sem_ch6.\n+\t(Innermost_Master_Scope_Depth): Moved from sem_util. Add condition\n+\tto detect expanded iterators.\n+\t(Prefix_With_Safe_Accessibility_Level): Moved from sem_attr.\n+\t(Static_Accessibility_Level): Moved from sem_util.\n+\t(Has_Unconstrained_Access_Discriminants): Likewise.\n+\t(Has_Anonymous_Access_Discriminant): Likewise.\n+\t(Is_Anonymous_Access_Actual): Likewise.\n+\t(Is_Special_Aliased_Formal_Access): Likewise.\n+\t(Needs_Result_Accessibility_Level): Likewise.\n+\t(Subprogram_Access_Level): Likewise.\n+\t(Type_Access_Level): Likewise.\n+\t(Deepest_Type_Access_Level): Likewise.\n+\t(Effective_Extra_Accessibility): Likewise.\n+\t(Get_Dynamic_Accessibility): Likewise.\n+\t(Has_Access_Values): Likewise.\n+\t(Accessibility_Level): Likewise.\n+\t* exp_attr.adb (Access_Cases): Obtain the proper enclosing object\n+\twhich applies to a given 'Access by looking through type\n+\tconversions.\n+\t* exp_ch4.adb (Apply_Accessibility_Check): Moved to accessibility.\n+\t* exp_ch5.adb: Likewise.\n+\t* exp_ch6.adb: Likewise.\n+\t* exp_ch9.adb: Likewise.\n+\t* exp_disp.adb: Likewise.\n+\t* gen_il-fields.ads: Add new flag Comes_From_Iterator.\n+\t* gen_il-gen-gen_nodes.adb: Add new flag Comes_From_Iterator for\n+\tN_Object_Renaming_Declaration.\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Mark object\n+\trenamings resulting from iterator expansion with the new flag\n+\tComes_From_Iterator.\n+\t* sem_aggr.adb (Resolve_Container_Aggregate): Refine test.\n+\t* sem_ch13.adb: Add dependence on the accessibility package.\n+\t* sem_ch3.adb: Likewise.\n+\t* sem_ch4.adb: Likewise.\n+\t* sem_ch9.adb: Likewise.\n+\t* sem_res.adb: Likewise.\n+\t* sem_warn.adb: Likewise.\n+\t* exp_ch3.adb: Likewise.\n+\t* sem_attr.adb (Accessibility_Message): Moved to accessibility.\n+\t(Prefix_With_Safe_Accessibility_Level): Likewise.\n+\t* checks.adb, checks.ads (Apply_Accessibility_Check): Likewise.\n+\t* sem_ch6.adb (Check_Return_Construct_Accessibility): Likewise.\n+\t* sem_util.adb, sem_util.ads\n+\t(Accessibility_Level): Likewise.\n+\t(Deepest_Type_Access_Level): Likewise.\n+\t(Effective_Extra_Accessibility): Likewise.\n+\t(Get_Dynamic_Accessibility): Likewise.\n+\t(Has_Access_Values): Likewise.\n+\t(Has_Anonymous_Access_Discriminant): Likewise.\n+\t(Static_Accessibility_Level): Likewise.\n+\t(Has_Unconstrained_Access_Discriminants): Likewise.\n+\t(Is_Anonymous_Access_Actual): Likewise.\n+\t(Is_Special_Aliased_Formal_Access): Likewise.\n+\t(Needs_Result_Accessibility_Level): Likewise.\n+\t(Subprogram_Access_Level): Likewise.\n+\t(Type_Access_Level): Likewise.\n+\t* sinfo.ads: Document new flag Comes_From_Iterator.\n+\t* gcc-interface/Make-lang.in: Add entry for new Accessibility package.\n+\n+2022-12-06  Liaiss Merzougue  <merzougue@adacore.com>\n+\n+\t* libgnat/i-c.adb (To_C): Simplify code for having a single\n+\texception raise. Add pragma annotate about uninitialized value\n+\twhich happen only on exception raising.\n+\n 2022-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.cc (get_storage_model_access): Strip any type"}, {"sha": "9a4bb25f3db4ff70979e8e80e6dd067152389025", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,67 @@\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107882\n+\t* region-model.cc (region_model::get_store_value): Return an\n+\tunknown value for empty regions.\n+\t(region_model::set_value): Bail on empty regions.\n+\t* region.cc (region::empty_p): New.\n+\t* region.h (region::empty_p): New decl.\n+\t* state-purge.cc (same_binding_p): Bail if either region is empty.\n+\t* store.cc (binding_key::make): Assert that a concrete binding's\n+\tbit_size must be > 0.\n+\t(binding_cluster::mark_region_as_unknown): Bail on empty regions.\n+\t(binding_cluster::get_binding): Likewise.\n+\t(binding_cluster::remove_overlapping_bindings): Likewise.\n+\t(binding_cluster::on_unknown_fncall): Don't conjure values for\n+\tempty regions.\n+\t(store::fill_region): Bail on empty regions.\n+\t* store.h (class concrete_binding): Update comment to reflect that\n+\tthe range of bits must be non-empty.\n+\t(concrete_binding::concrete_binding): Assert that bit range is\n+\tnon-empty.\n+\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106325\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_null_ptr): New.\n+\t* region-model-manager.h\n+\t(region_model_manager::get_or_create_null_ptr): New decl.\n+\t* region-model.cc (region_model::on_top_level_param): Add\n+\t\"nonnull\" param and make use of it.\n+\t(region_model::push_frame): When handling a top-level entrypoint\n+\tto the analysis, determine which params __attribute__((nonnull))\n+\tapplies to, and pass to on_top_level_param.\n+\t* region-model.h (region_model::on_top_level_param): Add \"nonnull\"\n+\tparam.\n+\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (register_known_analyzer_functions): New decl.\n+\t(register_known_functions_lang_cp): New decl.\n+\t* call-details.cc: New file, split out from\n+\tregion-model-impl-calls.cc.\n+\t* call-details.h: New file, split out from region-model.h.\n+\t* call-info.cc: Include \"analyzer/call-details.h\".\n+\t* call-summary.h: Likewise.\n+\t* kf-analyzer.cc: New file, split out from\n+\tregion-model-impl-calls.cc.\n+\t* kf-lang-cp.cc: Likewise.\n+\t* known-function-manager.cc: Include \"analyzer/call-details.h\".\n+\t* region-model-impl-calls.cc: Move definitions of call_details's\n+\tmember functions to call-details.cc.  Move class kf_analyzer_* to\n+\tkf-analyzer.cc.  Move kf_operator_new and kf_operator_delete to\n+\tkf-lang-cp.cc.  Refresh #includes accordingly.\n+\t(register_known_functions): Replace registration of __analyzer_*\n+\tfunctions with a call to register_known_analyzer_functions.\n+\tReplace registration of C++ support functions with a call to\n+\tregister_known_functions_lang_cp.\n+\t* region-model.h (class call_details): Move to new call-details.h.\n+\t* sm-fd.cc: Include \"analyzer/call-details.h\".\n+\t* sm-file.cc: Likewise.\n+\t* sm-malloc.cc: Likewise.\n+\t* varargs.cc: Likewise.\n+\n 2022-12-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (struct event_loc_info): New forward decl."}, {"sha": "758b130034a0dd48baf8486d4a326ca87fede641", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,8 @@\n+2022-12-06  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* c-decl.cc (is_flexible_array_member_p): Call new function\n+\tstrict_flex_array_level_of.\n+\n 2022-11-24  Florian Weimer  <fweimer@redhat.com>\n \n \tPR c/107805"}, {"sha": "505821812d7228db25214295d558e0f5200f9307", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,81 @@\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107882\n+\t* gcc.dg/analyzer/memcpy-pr107882.c: New test.\n+\n+2022-12-06  Qing Zhao  <qing.zhao@oracle.com>\n+\n+\t* gcc.dg/Warray-bounds-11.c: Update warnings for -Warray-bounds=2.\n+\t* gcc.dg/Warray-bounds-flex-arrays-1.c: New test.\n+\t* gcc.dg/Warray-bounds-flex-arrays-2.c: New test.\n+\t* gcc.dg/Warray-bounds-flex-arrays-3.c: New test.\n+\t* gcc.dg/Warray-bounds-flex-arrays-4.c: New test.\n+\t* gcc.dg/Warray-bounds-flex-arrays-5.c: New test.\n+\t* gcc.dg/Warray-bounds-flex-arrays-6.c: New test.\n+\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106325\n+\t* gcc.dg/analyzer/attr-nonnull-pr106325.c: New test.\n+\t* gcc.dg/analyzer/attribute-nonnull.c (test_6): New.\n+\t(test_7): New.\n+\n+2022-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_kernel_plugin.c: Include\n+\t\"analyzer/call-details.h\".\n+\t* gcc.dg/plugin/analyzer_known_fns_plugin.c: Likewise.\n+\n+2022-12-06  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* c-c++-common/gomp/target-teams-1.c: Adapt expected values for\n+\tnum_teams from \"1\" to \"-2\" in cases without num_teams clause.\n+\t* g++.dg/gomp/target-teams-1.C: Likewise.\n+\t* gfortran.dg/gomp/defaultmap-4.f90: Likewise.\n+\t* gfortran.dg/gomp/defaultmap-5.f90: Likewise.\n+\t* gfortran.dg/gomp/defaultmap-6.f90: Likewise.\n+\n+2022-12-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/pr107987.c: New test.\n+\n+2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107969\n+\t* gcc.target/i386/pr107969.c: New test.\n+\n+2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/107046\n+\t* gcc.c-torture/execute/ieee/ieee.exp: For rx-*-* append\n+\t-mnofpu.\n+\n+2022-12-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107975\n+\t* gcc.dg/pr107975.c: New test.\n+\n+2022-12-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104165\n+\t* g++.dg/warn/Warray-bounds-pr104165-1.C: New testcase.\n+\n+2022-12-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.target/x86_64/abi/bf16/abi-bf16.exp: Use separate asm for Darwin.\n+\t* gcc.target/x86_64/abi/bf16/m256bf16/abi-bf16-ymm.exp: Likewise.\n+\t* gcc.target/x86_64/abi/bf16/m512bf16/abi-bf16-zmm.exp: Likewise.\n+\t* gcc.target/x86_64/abi/bf16/args.h: Make xmm_regs, x87_regs extern.\n+\t* gcc.target/x86_64/abi/bf16/m256bf16/args.h: Likewise.\n+\t* gcc.target/x86_64/abi/bf16/m512bf16/args.h: Likewise.\n+\t* gcc.target/x86_64/abi/bf16/asm-support-darwin.S: New file.\n+\t* gcc.target/x86_64/abi/bf16/m256bf16/asm-support-darwin.S: New file.\n+\t* gcc.target/x86_64/abi/bf16/m512bf16/asm-support-darwin.S: New file.\n+\n+2022-12-06  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gcc.target/aarch64/interleave-init-1.c: New test.\n+\n 2022-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/40635"}, {"sha": "bfad2c5e1b726bff8b745e43f1ce12bffe386383", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,46 @@\n+2022-12-06  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* config/gcn/icv-device.c (omp_get_teams_thread_limit): Added to\n+\tallow processing of device-specific values.\n+\t(omp_set_teams_thread_limit): Likewise.\n+\t(ialias): Likewise.\n+\t* config/nvptx/icv-device.c (omp_get_teams_thread_limit): Likewise.\n+\t(omp_set_teams_thread_limit): Likewise.\n+\t(ialias): Likewise.\n+\t* icv-device.c (omp_get_teams_thread_limit): Likewise.\n+\t(ialias): Likewise.\n+\t(omp_set_teams_thread_limit): Likewise.\n+\t* icv.c (omp_set_teams_thread_limit): Removed.\n+\t(omp_get_teams_thread_limit): Likewise.\n+\t(ialias): Likewise.\n+\t* libgomp.texi: Updated documentation for nvptx and gcn corresponding\n+\tto the limitation of the number of teams.\n+\t* plugin/plugin-gcn.c (limit_teams): New helper function that limits\n+\tthe number of teams by twice the number of compute units.\n+\t(parse_target_attributes): Limit the number of teams on gcn offload\n+\tdevices.\n+\t* target.c (get_gomp_offload_icvs): Added teams_thread_limit_var\n+\thandling.\n+\t(gomp_load_image_to_device): Added a size check for the ICVs struct\n+\tvariable.\n+\t(gomp_copy_back_icvs): New function that is used in GOMP_target_ext to\n+\tcopy back the ICV values from device to host.\n+\t(GOMP_target_ext): Update the number of teams and threads in the kernel\n+\targs also considering device-specific values.\n+\t* testsuite/libgomp.c-c++-common/icv-4.c: Fixed an error in the reading\n+\tof OMP_TEAMS_THREAD_LIMIT from the environment.\n+\t* testsuite/libgomp.c-c++-common/icv-5.c: Extended.\n+\t* testsuite/libgomp.c-c++-common/icv-6.c: Extended.\n+\t* testsuite/libgomp.c-c++-common/icv-7.c: Extended.\n+\t* testsuite/libgomp.c-c++-common/icv-9.c: New test.\n+\t* testsuite/libgomp.fortran/icv-5.f90: New test.\n+\t* testsuite/libgomp.fortran/icv-6.f90: New test.\n+\n+2022-12-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.2): Add missing 'the'.\n+\t(TR11): Add missing '@tab N @tab'.\n+\n 2022-11-30  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP Context Selectors): Add 'gfx803' to gcn's isa."}, {"sha": "cfa25d02e2b0e2299d978174c2fe9be404de3cfa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3fe66f7f9f0940cbaf5a21366ecdc6c57360b2f1", "patch": "@@ -1,3 +1,78 @@\n+2022-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107979\n+\t* testsuite/17_intro/names.cc: Do not check __unused on old\n+\tGlibc versions.\n+\n+2022-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107871\n+\t* include/std/format (_Iter_sink::_M_overflow): Add cast to\n+\tsize_t.\n+\t(_Iter_sink<CharT, contiguous_iterator auto>::_M_make_span): Use\n+\ttypedef instead of decltype.\n+\t* testsuite/std/format/functions/107871.cc: New test.\n+\n+2022-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (chrono::hh_mm_ss): Do not use 64-bit\n+\trepresentations for all four duration members. Reorder members.\n+\t(hh_mm_ss::hh_mm_ss()): Define as defaulted.\n+\t(hh_mm_ss::hh_mm_ss(Duration)): Delegate to a new private\n+\tconstructor, instead of calling chrono::abs repeatedly.\n+\t* testsuite/std/time/hh_mm_ss/1.cc: Check floating-point\n+\trepresentations. Check default constructor. Check sizes.\n+\n+2022-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/106434\n+\t* include/bits/vector.tcc (insert(const_iterator, const T&)):\n+\tAdd assertion and optimization hint that the iterator for the\n+\tinsertion point must be non-null.\n+\n+2022-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_mutex.h (mutex): Add nodiscard attribute to\n+\ttry_lock member function.\n+\t* include/bits/unique_lock.h (unique_lock): Likewise for\n+\ttry_lock, try_lock_until, try_lock_for member functions, and\n+\towns_lock and mutex member functions.\n+\t* include/std/mutex (recursive_mutex): Likewise for try_lock\n+\tmember function.\n+\t(timed_mutex, recursive_timed_mutex, try_lock): Likewise for\n+\ttry_lock, try_lock_until, try_lock_for member functions.\n+\t(try_lock): Likewise for non-member function.\n+\t* include/std/shared_mutex (shared_mutex): Likewise for try_lock\n+\tand try_lock_shared member functions.\n+\t(shared_timed_mutex): Likewise for try_lock, try_lock_for,\n+\ttry_lock_shared, try_lock_shared_for, try_lock_until, and\n+\ttry_lock_shared_until member functions.\n+\t(shared_lock): Likewise for try_lock, try_lock, try_lock_for,\n+\ttry_lock_until, owns_lock, and mutex member functions.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/clock_neg.cc:\n+\tCast discarded value expression to void.\n+\t* testsuite/30_threads/shared_lock/locking/3.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/locking/4.cc: Likewise.\n+\t* testsuite/30_threads/shared_lock/locking/clock_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/clock_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/clock_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/try_lock/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/60497.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/clock_neg.cc:\n+\tLikewise.\n+\n+2022-12-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format (basic_format_parse_context::next_arg_id):\n+\tOnly check arg-id is in range during constant evaluation.\n+\t* testsuite/std/format/functions/format.cc: Check \"{:#Lx}\".\n+\t* testsuite/std/format/parse_ctx.cc: Adjust expected results for\n+\tformat-strings using an out-of-range arg-id.\n+\n 2022-12-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/os/bsd/darwin/os_defines.h"}]}