{"sha": "ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1MGJjOGQ4MDNjNTZmYzllYzlhODFiNzA4NzdlNzRkNjFjN2MxNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-22T18:51:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-22T18:51:24Z"}, "message": "[multiple changes]\n\n2004-12-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n        * trans.c (mark_visited): Set TYPE_SIZES_GIMPLIFIED.\n\n2004-12-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n        * tree.h (TYPE_SIZES_GIMPLIFIED): New.\n        * function.c (gimplify_parm_type): Don't gimplify type if already done.\n        * gimplify.c (gimplify_decl_expr): Likewise.\n        (gimplify_type_sizes): Set TYPE_SIZES_GIMPLIFIED.  Examine nested\n        array types.\n\n2004-12-22  Richard Henderson  <rth@redhat.com>\n\n        * gimplify.c (eval_save_expr): Remove.\n        (gimplify_one_sizepos): Unshare expr before gimplifying.\n        * stor-layout.c (variable_size): Revert 2004-12-19 change.\n        (layout_decl): Revert 2004-12-18 change.\n        (layout_type): Revert 2004-12-21 change.\n\nFrom-SVN: r92495", "tree": {"sha": "0cb8336d9cec3f258c1db3f86494f5469b7908b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb8336d9cec3f258c1db3f86494f5469b7908b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/comments", "author": null, "committer": null, "parents": [{"sha": "ba9ce455bb060016e01dfd1aecf97cbe51623ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9ce455bb060016e01dfd1aecf97cbe51623ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9ce455bb060016e01dfd1aecf97cbe51623ee9"}], "stats": {"total": 113, "additions": 77, "deletions": 36}, "files": [{"sha": "b2e063b837043560e42a8f8c745a9df3766f70a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -1,3 +1,19 @@\n+2004-12-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* tree.h (TYPE_SIZES_GIMPLIFIED): New.\n+\t* function.c (gimplify_parm_type): Don't gimplify type if already done.\n+\t* gimplify.c (gimplify_decl_expr): Likewise.\n+\t(gimplify_type_sizes): Set TYPE_SIZES_GIMPLIFIED.  Examine nested\n+\tarray types.\n+\t\n+2004-12-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimplify.c (eval_save_expr): Remove.\n+\t(gimplify_one_sizepos): Unshare expr before gimplifying.\n+\t* stor-layout.c (variable_size): Revert 2004-12-19 change.\n+\t(layout_decl): Revert 2004-12-18 change.\n+\t(layout_type): Revert 2004-12-21 change.\n+\n 2004-12-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree-sra.c (type_can_be_decomposed_p): Reject variable sized types."}, {"sha": "479443a6fb9c87b4721fe906377ffa14df8f04b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -1,3 +1,7 @@\n+2004-12-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* trans.c (mark_visited): Set TYPE_SIZES_GIMPLIFIED.\n+\n 2004-12-19  Richard Henderson  <rth@redhat.com>\n \n \t* trans.c (gigi): Update gimplify_body call."}, {"sha": "0db170938117bae97b5f3573f1b50e83df382cfa", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -4283,9 +4283,10 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n     }\n }\n \n-/* Utility function to mark nodes with TREE_VISITED.  Called from walk_tree.\n-   We use this to indicate all variable sizes and positions in global types\n-   may not be shared by any subprogram.  */\n+/* Utility function to mark nodes with TREE_VISITED and types as having their\n+   sized gimplified.  Called from walk_tree.  We use this to indicate all\n+   variable sizes and positions in global types may not be shared by any\n+   subprogram.  */\n \n static tree\n mark_visited (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n@@ -4298,6 +4299,9 @@ mark_visited (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n   else if (!TYPE_IS_DUMMY_P (*tp))\n     TREE_VISITED (*tp) = 1;\n \n+  if (TYPE_P (*tp))\n+    TYPE_SIZES_GIMPLIFIED (*tp) = 1;\n+\n   return NULL_TREE;\n }\n "}, {"sha": "4f1af4f331d7022392bb4c7626e594ff1d26eb66", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -3172,7 +3172,8 @@ gimplify_parm_type (tree *tp, int *walk_subtrees, void *data)\n     {\n       if (POINTER_TYPE_P (t))\n \t*walk_subtrees = 1;\n-      else if (TYPE_SIZE (t) && !TREE_CONSTANT (TYPE_SIZE (t)))\n+      else if (TYPE_SIZE (t) && !TREE_CONSTANT (TYPE_SIZE (t))\n+\t       && !TYPE_SIZES_GIMPLIFIED (t))\n \t{\n \t  gimplify_type_sizes (t, (tree *) data);\n \t  *walk_subtrees = 1;"}, {"sha": "2434a815c7c355e7252c3212aa9f09bbd438870c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -996,7 +996,12 @@ gimplify_decl_expr (tree *stmt_p)\n \t     of the emitted code: see mx_register_decls().  */\n \t  tree t, args, addr, ptr_type;\n \n-\t  gimplify_type_sizes (TREE_TYPE (decl), stmt_p);\n+\t  /* ??? We really shouldn't need to gimplify the type of the variable\n+\t     since it already should have been done.  But leave this here\n+\t     for now to avoid disrupting too many things at once.  */\n+\t  if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (decl)))\n+\t    gimplify_type_sizes (TREE_TYPE (decl), stmt_p);\n+\n \t  gimplify_one_sizepos (&DECL_SIZE (decl), stmt_p);\n \t  gimplify_one_sizepos (&DECL_SIZE_UNIT (decl), stmt_p);\n \n@@ -4180,7 +4185,17 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n void\n gimplify_type_sizes (tree type, tree *list_p)\n {\n-  tree field;\n+  tree field, t;\n+\n+  /* Note that we do not check for TYPE_SIZES_GIMPLIFIED already set because\n+     that's not supposed to happen on types where gimplifcation does anything.\n+     We should assert that it isn't set, but we can indeed be called multiple\n+     times on pointers.  Unfortunately, this includes fat pointers which we\n+     can't easily test for.  We could pass TYPE down to gimplify_one_sizepos\n+     and test there, but it doesn't seem worth it.  */\n+\n+  /* We first do the main variant, then copy into any other variants. */\n+  type = TYPE_MAIN_VARIANT (type);\n \n   switch (TREE_CODE (type))\n     {\n@@ -4194,11 +4209,22 @@ gimplify_type_sizes (tree type, tree *list_p)\n     case REAL_TYPE:\n       gimplify_one_sizepos (&TYPE_MIN_VALUE (type), list_p);\n       gimplify_one_sizepos (&TYPE_MAX_VALUE (type), list_p);\n+\n+      for (t = TYPE_NEXT_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n+\t{\n+\t  TYPE_MIN_VALUE (t) = TYPE_MIN_VALUE (type);\n+\t  TYPE_MAX_VALUE (t) = TYPE_MAX_VALUE (type);\n+\t  TYPE_SIZES_GIMPLIFIED (t) = 1;\n+\t}\n       break;\n \n     case ARRAY_TYPE:\n-      /* These anonymous types don't have declarations, so handle them here.  */\n-      gimplify_type_sizes (TYPE_DOMAIN (type), list_p);\n+      /* These types may not have declarations, so handle them here.  */\n+      if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (type)))\n+\tgimplify_type_sizes (TREE_TYPE (type), list_p);\n+\n+      if (!TYPE_SIZES_GIMPLIFIED (TYPE_DOMAIN (type)))\n+\t  gimplify_type_sizes (TYPE_DOMAIN (type), list_p);\n       break;\n \n     case RECORD_TYPE:\n@@ -4215,23 +4241,15 @@ gimplify_type_sizes (tree type, tree *list_p)\n \n   gimplify_one_sizepos (&TYPE_SIZE (type), list_p);\n   gimplify_one_sizepos (&TYPE_SIZE_UNIT (type), list_p);\n-}\n \n-/* A subroutine of gimplify_one_sizepos, called via walk_tree.  Evaluate\n-   the expression if it's a SAVE_EXPR and add it to the statement list \n-   in DATA.  */\n-\n-static tree\n-eval_save_expr (tree *tp, int *walk_subtrees, void *data)\n-{\n-  if (TREE_CODE (*tp) == SAVE_EXPR)\n+  for (t = TYPE_NEXT_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n     {\n-      *walk_subtrees = 0;\n-      gimplify_and_add (*tp, (tree *) data);\n+      TYPE_SIZE (t) = TYPE_SIZE (type);\n+      TYPE_SIZE_UNIT (t) = TYPE_SIZE_UNIT (type);\n+      TYPE_SIZES_GIMPLIFIED (t) = 1;\n     }\n-  else if (TYPE_P (*tp) || DECL_P (*tp))\n-    *walk_subtrees = 0;\n-  return NULL;\n+\n+  TYPE_SIZES_GIMPLIFIED (type) = 1;\n }\n \n /* A subroutine of gimplify_type_sizes to make sure that *EXPR_P,\n@@ -4251,7 +4269,8 @@ gimplify_one_sizepos (tree *expr_p, tree *stmt_p)\n       || CONTAINS_PLACEHOLDER_P (*expr_p))\n     return;\n \n-  walk_tree (expr_p, eval_save_expr, stmt_p, NULL);\n+  *expr_p = unshare_expr (*expr_p);\n+  gimplify_expr (expr_p, stmt_p, NULL, is_gimple_val, fb_rvalue);\n }\n \f\n #ifdef ENABLE_CHECKING"}, {"sha": "ac7fb744f66b365b846e3418c970e94bff5ad680", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -125,19 +125,11 @@ variable_size (tree size)\n      just return SIZE unchanged.  Likewise for self-referential sizes and\n      constant sizes.  */\n   if (TREE_CONSTANT (size)\n-      || TREE_CODE (size) == SAVE_EXPR\n       || lang_hooks.decls.global_bindings_p () < 0\n       || CONTAINS_PLACEHOLDER_P (size))\n     return size;\n \n-  /* Force creation of a SAVE_EXPR.  This solves (1) code duplication \n-     problems between parent and nested functions that occasionally can't\n-     be cleaned up because of portions of the expression escaping the\n-     parent function via the FRAME object, and (2) tree sharing problems\n-     between the type system and the gimple code, which can leak SSA_NAME\n-     objects into e.g. TYPE_SIZE, which cause heartburn when emitting\n-     debug information.  */\n-  size = build1 (SAVE_EXPR, TREE_TYPE (size), size);\n+  size = save_expr (size);\n \n   /* If an array with a variable number of elements is declared, and\n      the elements require destruction, we will emit a cleanup for the\n@@ -333,8 +325,8 @@ layout_decl (tree decl, unsigned int known_align)\n \n   if (DECL_SIZE (decl) == 0)\n     {\n-      DECL_SIZE (decl) = unshare_expr (TYPE_SIZE (type));\n-      DECL_SIZE_UNIT (decl) = unshare_expr (TYPE_SIZE_UNIT (type));\n+      DECL_SIZE (decl) = TYPE_SIZE (type);\n+      DECL_SIZE_UNIT (decl) = TYPE_SIZE_UNIT (type);\n     }\n   else if (DECL_SIZE_UNIT (decl) == 0)\n     DECL_SIZE_UNIT (decl)\n@@ -1644,8 +1636,8 @@ layout_type (tree type)\n \tif (index && TYPE_MAX_VALUE (index) && TYPE_MIN_VALUE (index)\n \t    && TYPE_SIZE (element))\n \t  {\n-\t    tree ub = unshare_expr (TYPE_MAX_VALUE (index));\n-\t    tree lb = unshare_expr (TYPE_MIN_VALUE (index));\n+\t    tree ub = TYPE_MAX_VALUE (index);\n+\t    tree lb = TYPE_MIN_VALUE (index);\n \t    tree length;\n \t    tree element_size;\n "}, {"sha": "76424a5c6b993312f23bcfeb57d7deddee54c6f5", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad50bc8d803c56fc9ec9a81b70877e74d61c7c14/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ad50bc8d803c56fc9ec9a81b70877e74d61c7c14", "patch": "@@ -368,6 +368,8 @@ struct tree_common GTY(())\n            all expressions\n \t   all decls\n \t   all constants\n+       TYPE_SIZES_GIMPLIFIED\n+           ..._TYPE\n \n    unsigned_flag:\n \n@@ -934,6 +936,9 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    also appear in an expression or decl where the value is constant.  */\n #define TREE_CONSTANT(NODE) (NON_TYPE_CHECK (NODE)->common.constant_flag)\n \n+/* Nonzero if NODE, a type, has had its sizes gimplified.  */\n+#define TYPE_SIZES_GIMPLIFIED(NODE) (TYPE_CHECK (NODE)->common.constant_flag)\n+\n /* In a decl (most significantly a FIELD_DECL), means an unsigned field.  */\n #define DECL_UNSIGNED(NODE) (DECL_CHECK (NODE)->common.unsigned_flag)\n "}]}