{"sha": "9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU5ZjZiZjAwNzlmMWE4ZmY5NjVlZmU3ZDk3MWExYjYzNmYzNmZiYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-16T14:21:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-16T14:21:53Z"}, "message": "re PR tree-optimization/61482 (ICE in set_value_range, at tree-vrp.c:453 when compiling Firefox ESR 24)\n\n2014-06-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61482\n\t* tree-vrp.c (adjust_range_with_scev): Avoid setting of\n\t[-INF(OVF), +INF(OVF)] range.\n\n\t* g++.dg/torture/pr61482.C: New testcase.\n\nFrom-SVN: r211709", "tree": {"sha": "2b9a194e46f795ad0e483a1a60c0cc9bd9306b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9a194e46f795ad0e483a1a60c0cc9bd9306b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7964957f618c2d0c8f024cf6135006dfe9d8c9b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7964957f618c2d0c8f024cf6135006dfe9d8c9b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7964957f618c2d0c8f024cf6135006dfe9d8c9b6"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "786ed0cc832dd3b4d2904fbda61e94814bb1ab40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "patch": "@@ -1,3 +1,9 @@\n+2014-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61482\n+\t* tree-vrp.c (adjust_range_with_scev): Avoid setting of\n+\t[-INF(OVF), +INF(OVF)] range.\n+\n 2014-06-16  Ganesh Gopalasubramanian <Ganesh.Gopalasubramanian@amd.com>\n \n \t* config/i386/i386.c (ix86_expand_sse2_mulvxdi3): Issue"}, {"sha": "d6a3dd3c7e0cf32bb4bc840cd7b28fadaedf8853", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "patch": "@@ -1,3 +1,8 @@\n+2014-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61482\n+\t* g++.dg/torture/pr61482.C: New testcase.\n+\n 2014-06-16 Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* gcc.target/i386/xop-imul64-vector.c: Remove the check for"}, {"sha": "1e186cc5ed6e7e856216bad907764c60acbc4220", "filename": "gcc/testsuite/g++.dg/torture/pr61482.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61482.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61482.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61482.C?ref=9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+class A\n+{\n+public:\n+    int m_fn1 ();\n+};\n+class B\n+{\n+  void m_fn2 (const int &p1);\n+  A mThebesLayerDataStack;\n+};\n+int b, c;\n+void B::m_fn2 (const int &p1)\n+{\n+  if (c && b)\n+    {\n+      int i;\n+      i = mThebesLayerDataStack.m_fn1 ();\n+      for (; i >= 0;)\n+\t{\n+\t  ++i;\n+\t  break;\n+\t}\n+      --i;\n+      for (; i >= 0; --i)\n+\tmThebesLayerDataStack.m_fn1 ();\n+    }\n+}"}, {"sha": "b657546a3d7162684d4912b09fdb57eb5edfe2af", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9e9f6bf0079f1a8ff965efe7d971a1b636f36fbc", "patch": "@@ -3892,15 +3892,6 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n \tmax = init;\n       else\n \tmin = init;\n-\n-      /* If we would create an invalid range, then just assume we\n-\t know absolutely nothing.  This may be over-conservative,\n-\t but it's clearly safe, and should happen only in unreachable\n-         parts of code, or for invalid programs.  */\n-      if (compare_values (min, max) == 1)\n-\treturn;\n-\n-      set_value_range (vr, VR_RANGE, min, max, vr->equiv);\n     }\n   else if (vr->type == VR_RANGE)\n     {\n@@ -3933,16 +3924,20 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n \t      || compare_values (tmax, max) == -1)\n \t    max = tmax;\n \t}\n+    }\n+  else\n+    return;\n \n-      /* If we just created an invalid range with the minimum\n-\t greater than the maximum, we fail conservatively.\n-\t This should happen only in unreachable\n-\t parts of code, or for invalid programs.  */\n-      if (compare_values (min, max) == 1)\n-\treturn;\n+  /* If we just created an invalid range with the minimum\n+     greater than the maximum, we fail conservatively.\n+     This should happen only in unreachable\n+     parts of code, or for invalid programs.  */\n+  if (compare_values (min, max) == 1\n+      || (is_negative_overflow_infinity (min)\n+\t  && is_positive_overflow_infinity (max)))\n+    return;\n \n-      set_value_range (vr, VR_RANGE, min, max, vr->equiv);\n-    }\n+  set_value_range (vr, VR_RANGE, min, max, vr->equiv);\n }\n \n "}]}