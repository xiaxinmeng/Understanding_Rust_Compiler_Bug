{"sha": "e00cb200f39d8144de226e76c5d0257b613dbbf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwY2IyMDBmMzlkODE0NGRlMjI2ZTc2YzVkMDI1N2I2MTNkYmJmNg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-03-10T19:38:13Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-03-10T19:38:13Z"}, "message": "PR90763: PowerPC vec_xl_len should take const argument.\n\nPR target/90763\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n\tclause to handle P9V_BUILTIN_VEC_LXVL with const arguments.\n\n\t* gcc.target/powerpc/pr90763.c: New.", "tree": {"sha": "2a49be01a6334ac308e7273f290073eb03ffe59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a49be01a6334ac308e7273f290073eb03ffe59f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e00cb200f39d8144de226e76c5d0257b613dbbf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00cb200f39d8144de226e76c5d0257b613dbbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00cb200f39d8144de226e76c5d0257b613dbbf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00cb200f39d8144de226e76c5d0257b613dbbf6/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0c3a457319df1e8dc9321227162a7c57169a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0c3a457319df1e8dc9321227162a7c57169a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0c3a457319df1e8dc9321227162a7c57169a39"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "c5256616408b7569b2ec85ae467816eda580aaa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1,3 +1,9 @@\n+2020-03-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\tPR target/90763\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n+\tclause to handle P9V_BUILTIN_VEC_LXVL with const arguments.\n+\n 2020-03-10  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* loop-iv.c (find_simple_exit): Make it static."}, {"sha": "8c1fbbf90ee73dca2f3c57b75cd5f59a0213c27e", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1638,6 +1638,19 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  arg = fold_convert (type, arg);\n \t}\n \n+      /* For P9V_BUILTIN_VEC_LXVL, convert any const * to its non constant\n+\t equivalent to simplify the overload matching below.  */\n+      if (fcode == P9V_BUILTIN_VEC_LXVL)\n+\t{\n+\t  if (POINTER_TYPE_P (type)\n+\t      && TYPE_READONLY (TREE_TYPE (type)))\n+\t    {\n+\t      type = build_pointer_type (build_qualified_type (\n+\t\t\t\t\t\tTREE_TYPE (type),0));\n+\t      arg = fold_convert (type, arg);\n+\t    }\n+\t}\n+\n       args[n] = arg;\n       types[n] = type;\n     }"}, {"sha": "da525a38cf1efb5b4027541f248325000569972d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1,3 +1,8 @@\n+2020-03-10  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\tPR target/90763\n+\t* gcc.target/powerpc/pr90763.c: New.\n+\n 2020-03-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/pr80481.C (dg-final): Scan for SSE reg-reg moves only."}, {"sha": "55f1d461e8240e21c2e94f110394ee64198afbaf", "filename": "gcc/testsuite/gcc.target/powerpc/pr90763.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr90763.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr90763.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr90763.c?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+/* PR90763: PowerPC vec_xl_len should take const.\n+*/\n+\n+#include <altivec.h>\n+\n+vector unsigned char vec_load_uc(unsigned char *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned char vec_load_const_uc(const unsigned char *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector signed char vec_load_sc(signed char *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector signed char vec_load_const_sc(const signed char *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+\n+vector signed short vec_load_ss(signed short *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector signed short vec_load_const_ss(const signed short *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned short vec_load_us(unsigned short *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned short vec_load_const_us(const unsigned short *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+\n+vector signed int vec_load_si(signed int *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector signed int vec_load_const_si(const signed int *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned int vec_load_ui(unsigned int *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned int vec_load_const_ui(const unsigned int *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+\n+vector signed long long vec_load_sll(signed long long *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector signed long long vec_load_const_sll(const signed long long *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned long long vec_load_ull(unsigned long long *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned long long vec_load_const_ull(const unsigned long long *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+\n+vector signed __int128 vec_load_si128(signed __int128 *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector signed __int128 vec_load_const_si128(const signed __int128 *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned __int128 vec_load_ui128(unsigned __int128 *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector unsigned __int128 vec_load_const_ui128(const unsigned __int128 *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+\n+vector float vec_load_f(float *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector float vec_load_const_f(const float *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+\n+vector double vec_load_d(double *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+vector double vec_load_const_d(const double *p, int num) {\n+    return vec_xl_len(p, num);\n+}\n+"}]}