{"sha": "9eb71d8c3b520b6a2b556884ce3735289ff1a276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViNzFkOGMzYjUyMGI2YTJiNTU2ODg0Y2UzNzM1Mjg5ZmYxYTI3Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-09T06:44:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-09T06:44:20Z"}, "message": "cp-tree.h (cp_tree_index): Add CPTI_COMPLETE_CTOR_IDENTIFIER.\n\n\t* cp-tree.h (cp_tree_index): Add CPTI_COMPLETE_CTOR_IDENTIFIER.\n\t(complete_ctor_identifier): New macro.\n\t(special_function_kind): Add sfk_copy_constructor and\n\tsfk_assignment_operator.\n\t(LOOKUP_HAS_IN_CHARGE): Remove.\n\t(cons_up_default_function): Rename to ...\n\t(implicitly_declare_fn): ... this.\n\t* call.c (build_new_method_call): Add in-charge parameters for\n\tconstructors here.\n\t* class.c (add_implicitly_declared_members): Change parameter name\n\tfrom cant_have_assignment to cant_have_const_assignment.\n\tReplace calls to cons_up_default_function to implicitly_declare_fn.\n\t* cvt.c (ocp_convert): Use complete_ctor_identifier.\n\t* decl.c (initialize_predefined_identifiers): Initialize it.\n\t(start_function): Use DECL_CONSTRUCTOR_FOR_VBASE_P instead of\n\tcomplex expression.\n\t* init.c (expand_default_init): Don't calculate the in-charge\n\tparameter here.\n\t(build_new_1): Likewise.\n\t* lex.c (cons_up_default_function): Move to method.c.\n\t* method.c (synthesize_method): Use DECL_DESTRUCTOR_P.\n\t(implicitly_declare_fn): New function.\n\t* typeck.c (build_static_cast): Use complete_ctor_identifier.\n\t(build_modify_expr): Likewise.\n\t* typeck2.c (build_functional_cast): Likewise.\n\nFrom-SVN: r33038", "tree": {"sha": "f3b6fe18ed673930d5f0df67fa7c0c764fcf2746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3b6fe18ed673930d5f0df67fa7c0c764fcf2746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb71d8c3b520b6a2b556884ce3735289ff1a276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb71d8c3b520b6a2b556884ce3735289ff1a276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb71d8c3b520b6a2b556884ce3735289ff1a276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb71d8c3b520b6a2b556884ce3735289ff1a276/comments", "author": null, "committer": null, "parents": [{"sha": "568fe067bc84a419816b46848bbe44b18cd2c80f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568fe067bc84a419816b46848bbe44b18cd2c80f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568fe067bc84a419816b46848bbe44b18cd2c80f"}], "stats": {"total": 386, "additions": 182, "deletions": 204}, "files": [{"sha": "8fbd5546e13988cd65a326faec8c008fc77f8d58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -1,5 +1,31 @@\n 2000-04-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (cp_tree_index): Add CPTI_COMPLETE_CTOR_IDENTIFIER.\n+\t(complete_ctor_identifier): New macro.\n+\t(special_function_kind): Add sfk_copy_constructor and\n+\tsfk_assignment_operator.\n+\t(LOOKUP_HAS_IN_CHARGE): Remove.\n+\t(cons_up_default_function): Rename to ...\n+\t(implicitly_declare_fn): ... this.\n+\t* call.c (build_new_method_call): Add in-charge parameters for\n+\tconstructors here.\n+\t* class.c (add_implicitly_declared_members): Change parameter name\n+\tfrom cant_have_assignment to cant_have_const_assignment.\n+\tReplace calls to cons_up_default_function to implicitly_declare_fn.\n+\t* cvt.c (ocp_convert): Use complete_ctor_identifier.\n+\t* decl.c (initialize_predefined_identifiers): Initialize it.\n+\t(start_function): Use DECL_CONSTRUCTOR_FOR_VBASE_P instead of\n+\tcomplex expression.\n+\t* init.c (expand_default_init): Don't calculate the in-charge\n+\tparameter here.\n+\t(build_new_1): Likewise.\n+\t* lex.c (cons_up_default_function): Move to method.c.\n+\t* method.c (synthesize_method): Use DECL_DESTRUCTOR_P.\n+\t(implicitly_declare_fn): New function.\n+\t* typeck.c (build_static_cast): Use complete_ctor_identifier.\n+\t(build_modify_expr): Likewise.\n+\t* typeck2.c (build_functional_cast): Likewise.\n+\t\n \tUnder the new ABI, constructors don't return `this'.\n \t* cp-tree.h (warn_reorder): Declare.\n \t(special_function_kind): New enum."}, {"sha": "83eaac27cd2225f2adfcb481908c671f989bc70b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -4196,11 +4196,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       template_only = 1;\n     }\n \n-  /* If there is an extra argument for controlling virtual bases,\n-     remove it for error reporting.  */\n-  if (flags & LOOKUP_HAS_IN_CHARGE)\n-    user_args = TREE_CHAIN (args);\n-\n+  user_args = args;\n   args = resolve_args (args);\n \n   if (args == error_mark_node)\n@@ -4248,8 +4244,33 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       TREE_TYPE (instance_ptr) = build_pointer_type (basetype);\n     }\n \n-  pretty_name\n-    = (name == ctor_identifier ? constructor_name (basetype) : name);\n+  /* Callers should explicitly indicate whether they want to construct\n+     the complete object or just the part without virtual bases.  */\n+  my_friendly_assert (name != ctor_identifier, 20000408);\n+\n+  if (name == complete_ctor_identifier \n+      || name == base_ctor_identifier)\n+    {\n+      pretty_name = constructor_name (basetype);\n+      /* Add the in-charge parameter as an implicit first argument.  */\n+      if (TYPE_USES_VIRTUAL_BASECLASSES (basetype))\n+\t{\n+\t  tree in_charge;\n+\n+\t  if (name == complete_ctor_identifier)\n+\t    in_charge = integer_one_node;\n+\t  else\n+\t    in_charge = integer_zero_node;\n+\n+\t  args = tree_cons (NULL_TREE, in_charge, args);\n+\t}\n+\n+      /* We want to call the normal constructor function under the old\n+\t ABI.  */\n+      name = ctor_identifier;\n+    }\n+  else\n+    pretty_name = name;\n \n   fns = lookup_fnfields (basetype_path, name, 1);\n \n@@ -4259,21 +4280,14 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n     {\n       tree base = BINFO_TYPE (TREE_PURPOSE (fns));\n       tree fn = TREE_VALUE (fns);\n-      if (name == ctor_identifier && TYPE_USES_VIRTUAL_BASECLASSES (basetype)\n-\t  && ! (flags & LOOKUP_HAS_IN_CHARGE))\n-\t{\n-\t  flags |= LOOKUP_HAS_IN_CHARGE;\n-\t  args = tree_cons (NULL_TREE, integer_one_node, args);\n-\t}\n       mem_args = tree_cons (NULL_TREE, instance_ptr, args);\n       for (; fn; fn = OVL_NEXT (fn))\n \t{\n \t  tree t = OVL_CURRENT (fn);\n \t  tree this_arglist;\n \n \t  /* We can end up here for copy-init of same or base class.  */\n-\t  if (name == ctor_identifier\n-\t      && (flags & LOOKUP_ONLYCONVERTING)\n+\t  if ((flags & LOOKUP_ONLYCONVERTING)\n \t      && DECL_NONCONVERTING_P (t))\n \t    continue;\n \t  if (TREE_CODE (TREE_TYPE (t)) == METHOD_TYPE)"}, {"sha": "602aa9128f73779f4e03069415f35cdb9beabeb9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -2927,31 +2927,30 @@ extern int interface_only, interface_unknown;\n /* Create default constructors, assignment operators, and so forth for\n    the type indicated by T, if they are needed.\n    CANT_HAVE_DEFAULT_CTOR, CANT_HAVE_CONST_CTOR, and\n-   CANT_HAVE_ASSIGNMENT are nonzero if, for whatever reason, the class\n-   cannot have a default constructor, copy constructor taking a const\n-   reference argument, or an assignment operator, respectively.  If a\n-   virtual destructor is created, its DECL is returned; otherwise the\n-   return value is NULL_TREE.  */\n+   CANT_HAVE_CONST_ASSIGNMENT are nonzero if, for whatever reason, the\n+   class cannot have a default constructor, copy constructor taking a\n+   const reference argument, or an assignment operator taking a const\n+   reference, respectively.  If a virtual destructor is created, its\n+   DECL is returned; otherwise the return value is NULL_TREE.  */\n \n static tree\n add_implicitly_declared_members (t, cant_have_default_ctor,\n \t\t\t\t cant_have_const_cctor,\n-\t\t\t\t cant_have_assignment)\n+\t\t\t\t cant_have_const_assignment)\n      tree t;\n      int cant_have_default_ctor;\n      int cant_have_const_cctor;\n-     int cant_have_assignment;\n+     int cant_have_const_assignment;\n {\n   tree default_fn;\n   tree implicit_fns = NULL_TREE;\n-  tree name = TYPE_IDENTIFIER (t);\n   tree virtual_dtor = NULL_TREE;\n   tree *f;\n \n   /* Destructor.  */\n   if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) && !TYPE_HAS_DESTRUCTOR (t))\n     {\n-      default_fn = cons_up_default_function (t, name, 0);\n+      default_fn = implicitly_declare_fn (sfk_destructor, t, /*const_p=*/0);\n       check_for_override (default_fn, t);\n \n       /* If we couldn't make it work, then pretend we didn't need it.  */\n@@ -2973,7 +2972,7 @@ add_implicitly_declared_members (t, cant_have_default_ctor,\n   /* Default constructor.  */\n   if (! TYPE_HAS_CONSTRUCTOR (t) && ! cant_have_default_ctor)\n     {\n-      default_fn = cons_up_default_function (t, name, 2);\n+      default_fn = implicitly_declare_fn (sfk_constructor, t, /*const_p=*/0);\n       TREE_CHAIN (default_fn) = implicit_fns;\n       implicit_fns = default_fn;\n     }\n@@ -2983,17 +2982,19 @@ add_implicitly_declared_members (t, cant_have_default_ctor,\n     {\n       /* ARM 12.18: You get either X(X&) or X(const X&), but\n \t not both.  --Chip  */\n-      default_fn = cons_up_default_function (t, name,\n-\t\t\t\t\t     3 + cant_have_const_cctor);\n+      default_fn \n+\t= implicitly_declare_fn (sfk_copy_constructor, t,\n+\t\t\t\t /*const_p=*/!cant_have_const_cctor);\n       TREE_CHAIN (default_fn) = implicit_fns;\n       implicit_fns = default_fn;\n     }\n \n   /* Assignment operator.  */\n   if (! TYPE_HAS_ASSIGN_REF (t) && ! TYPE_FOR_JAVA (t))\n     {\n-      default_fn = cons_up_default_function (t, name,\n-\t\t\t\t\t     5 + cant_have_assignment);\n+      default_fn \n+\t= implicitly_declare_fn (sfk_assignment_operator, t,\n+\t\t\t\t /*const_p=*/!cant_have_const_assignment);\n       TREE_CHAIN (default_fn) = implicit_fns;\n       implicit_fns = default_fn;\n     }"}, {"sha": "b378689682b9c8559ef5a9f91b3e2f19748c7637", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -560,6 +560,7 @@ enum cp_tree_index\n     CPTI_ACCESS_PRIVATE_VIRTUAL,\n \n     CPTI_CTOR_IDENTIFIER,\n+    CPTI_COMPLETE_CTOR_IDENTIFIER,\n     CPTI_BASE_CTOR_IDENTIFIER,\n     CPTI_DTOR_IDENTIFIER,\n     CPTI_BASE_DTOR_IDENTIFIER,\n@@ -655,8 +656,11 @@ extern tree cp_global_trees[CPTI_MAX];\n /* We cache these tree nodes so as to call get_identifier less\n    frequently.  */\n \n-/* The name of a constructor that constructors virtual base classes.  */\n+/* The name of a constructor that takes an in-charge parameter to\n+   decide whether or not to call virtual base classes.  */\n #define ctor_identifier                 cp_global_trees[CPTI_CTOR_IDENTIFIER]\n+/* The name of a constructor that constructs virtual base classes.  */\n+#define complete_ctor_identifier        cp_global_trees[CPTI_COMPLETE_CTOR_IDENTIFIER]\n /* The name of a constructor that does not construct virtual base classes.  */\n #define base_ctor_identifier            cp_global_trees[CPTI_BASE_CTOR_IDENTIFIER]\n /* The name of a destructor that destroys virtual base classes.  */\n@@ -3105,6 +3109,8 @@ typedef enum access_kind {\n typedef enum special_function_kind {\n   sfk_none,                /* Not a special function.  */\n   sfk_constructor,         /* A constructor.  */\n+  sfk_copy_constructor,    /* A copy constructor.  */\n+  sfk_assignment_operator, /* An assignment operator.  */\n   sfk_destructor,          /* A destructor.  */\n   sfk_conversion           /* A conversion operator.  */\n } special_function_kind;\n@@ -3479,8 +3485,6 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n    LOOKUP_NONVIRTUAL means make a direct call to the member function found\n    LOOKUP_GLOBAL means search through the space of overloaded functions,\n      as well as the space of member functions.\n-   LOOKUP_HAS_IN_CHARGE means that the \"in charge\" variable is already\n-     in the parameter list.\n    LOOKUP_ONLYCONVERTING means that non-conversion constructors are not tried.\n    DIRECT_BIND means that if a temporary is created, it should be created so\n      that it lives as long as the current variable bindings; otherwise it\n@@ -3505,10 +3509,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define LOOKUP_PROTECT (1)\n #define LOOKUP_COMPLAIN (2)\n #define LOOKUP_NORMAL (3)\n-/* #define LOOKUP_UNUSED (4) */\n #define LOOKUP_NONVIRTUAL (8)\n #define LOOKUP_GLOBAL (16)\n-#define LOOKUP_HAS_IN_CHARGE (32)\n #define LOOKUP_SPECULATIVELY (64)\n #define LOOKUP_ONLYCONVERTING (128)\n #define DIRECT_BIND (256)\n@@ -4052,7 +4054,6 @@ extern void restore_pending_input\t\tPARAMS ((struct pending_input *));\n extern void yyungetc\t\t\t\tPARAMS ((int, int));\n extern void reinit_parse_for_method\t\tPARAMS ((int, tree));\n extern void reinit_parse_for_block\t\tPARAMS ((int, struct obstack *));\n-extern tree cons_up_default_function\t\tPARAMS ((tree, tree, int));\n extern void check_for_missing_semicolon\t\tPARAMS ((tree));\n extern void note_got_semicolon\t\t\tPARAMS ((tree));\n extern void note_list_got_semicolon\t\tPARAMS ((tree));\n@@ -4099,6 +4100,7 @@ extern tree make_thunk\t\t\t\tPARAMS ((tree, int, int));\n extern void emit_thunk\t\t\t\tPARAMS ((tree));\n extern void synthesize_method\t\t\tPARAMS ((tree));\n extern tree get_id_2\t\t\t\tPARAMS ((const char *, tree));\n+extern tree implicitly_declare_fn               PARAMS ((special_function_kind, tree, int));\n \n /* In optimize.c */\n extern void optimize_function                   PARAMS ((tree));"}, {"sha": "3d5613a118d68f5307d3d0a242fd41394dd889f9", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -806,7 +806,8 @@ ocp_convert (type, expr, convtype, flags)\n \t   the target with the temp (see [dcl.init]).  */\n \tctor = build_user_type_conversion (type, ctor, flags);\n       if (ctor)\n-\tctor = build_method_call (NULL_TREE, ctor_identifier,\n+\tctor = build_method_call (NULL_TREE, \n+\t\t\t\t  complete_ctor_identifier,\n \t\t\t\t  build_tree_list (NULL_TREE, ctor),\n \t\t\t\t  TYPE_BINFO (type), flags);\n       if (ctor)"}, {"sha": "dc290292c1b156ab270b2972790ce0d71d4e2598", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -6063,6 +6063,7 @@ initialize_predefined_identifiers ()\n     { \"Java\", &lang_name_java },\n     { CTOR_NAME, &ctor_identifier },\n     { \"__base_ctor\", &base_ctor_identifier },\n+    { \"__comp_ctor\", &complete_ctor_identifier },\n     { DTOR_NAME, &dtor_identifier },\n     { \"__base_dtor\", &base_dtor_identifier },\n     { \"__deleting_dtor\", &deleting_dtor_identifier },\n@@ -13441,13 +13442,8 @@ start_function (declspecs, declarator, attrs, flags)\n \n       /* Constructors and destructors need to know whether they're \"in\n \t charge\" of initializing virtual base classes.  */\n-      if (DECL_DESTRUCTOR_P (decl1))\n-\tcurrent_in_charge_parm = TREE_CHAIN (t);\n-      else if (DECL_CONSTRUCTOR_P (decl1)\n-\t       && TREE_CHAIN (t)\n-\t       && DECL_ARTIFICIAL (TREE_CHAIN (t))\n-\t       && (DECL_NAME (TREE_CHAIN (t))\n-\t\t   == in_charge_identifier))\n+      if (DECL_CONSTRUCTOR_FOR_VBASE_P (decl1)\n+\t  || DECL_DESTRUCTOR_P (decl1))\n \tcurrent_in_charge_parm = TREE_CHAIN (t);\n     }\n "}, {"sha": "5d9b968db1bf10e9f5ea7385e2f9c4f4840c9e62", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -1116,6 +1116,7 @@ expand_default_init (binfo, true_exp, exp, init, flags)\n      int flags;\n {\n   tree type = TREE_TYPE (exp);\n+  tree ctor_name;\n \n   /* It fails because there may not be a constructor which takes\n      its own type as the first (or only parameter), but which does\n@@ -1170,17 +1171,12 @@ expand_default_init (binfo, true_exp, exp, init, flags)\n   else\n     parms = build_tree_list (NULL_TREE, init);\n \n-  if (TYPE_USES_VIRTUAL_BASECLASSES (type))\n-    {\n-      if (true_exp == exp)\n-\tparms = tree_cons (NULL_TREE, integer_one_node, parms);\n-      else\n-\tparms = tree_cons (NULL_TREE, integer_zero_node, parms);\n-      flags |= LOOKUP_HAS_IN_CHARGE;\n-    }\n+  if (true_exp == exp)\n+    ctor_name = complete_ctor_identifier;\n+  else\n+    ctor_name = base_ctor_identifier;\n \n-  rval = build_method_call (exp, ctor_identifier,\n-\t\t\t    parms, binfo, flags);\n+  rval = build_method_call (exp, ctor_name, parms, binfo, flags);\n   if (TREE_SIDE_EFFECTS (rval))\n     finish_expr_stmt (rval);\n }\n@@ -2350,19 +2346,14 @@ build_new_1 (exp)\n \t     that argument.  */\n \t  int flags = LOOKUP_NORMAL|LOOKUP_NONVIRTUAL|LOOKUP_COMPLAIN;\n \n-\t  if (rval && TYPE_USES_VIRTUAL_BASECLASSES (true_type))\n-\t    {\n-\t      init = tree_cons (NULL_TREE, integer_one_node, init);\n-\t      flags |= LOOKUP_HAS_IN_CHARGE;\n-\t    }\n-\n \t  rval = save_expr (rval);\n \t  newrval = rval;\n \n \t  if (newrval && TREE_CODE (TREE_TYPE (newrval)) == POINTER_TYPE)\n \t    newrval = build_indirect_ref (newrval, NULL_PTR);\n \n-\t  newrval = build_method_call (newrval, ctor_identifier,\n+\t  newrval = build_method_call (newrval, \n+\t\t\t\t       complete_ctor_identifier,\n \t\t\t\t       init, TYPE_BINFO (true_type), flags);\n \n \t  if (newrval == NULL_TREE || newrval == error_mark_node)"}, {"sha": "3867ce044435b76fe0c529c62ecb722ce3db59a7", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -1978,142 +1978,6 @@ do_pending_defargs ()\n     }\n }\n \n-/* Build a default function named NAME for type TYPE.\n-   KIND says what to build.\n-\n-   When KIND == 0, build default destructor.\n-   When KIND == 1, build virtual destructor.\n-   When KIND == 2, build default constructor.\n-   When KIND == 3, build default X(const X&) constructor.\n-   When KIND == 4, build default X(X&) constructor.\n-   When KIND == 5, build default operator = (const X&).\n-   When KIND == 6, build default operator = (X&).  */\n-\n-tree\n-cons_up_default_function (type, full_name, kind)\n-     tree type, full_name;\n-     int kind;\n-{\n-  tree declspecs = NULL_TREE;\n-  tree fn, args = NULL_TREE;\n-  tree argtype;\n-  int retref = 0;\n-  tree name = constructor_name (full_name);\n-\n-  switch (kind)\n-    {\n-      /* Destructors.  */\n-    case 0:\n-      name = build_parse_node (BIT_NOT_EXPR, name);\n-      args = void_list_node;\n-      break;\n-\n-    case 2:\n-      /* Default constructor.  */\n-      args = void_list_node;\n-      break;\n-\n-    case 3:\n-      type = build_qualified_type (type, TYPE_QUAL_CONST);\n-      /* Fall through...  */\n-    case 4:\n-      /* According to ARM $12.8, the default copy ctor will be declared, but\n-\t not defined, unless it's needed.  */\n-      argtype = build_reference_type (type);\n-      args = tree_cons (NULL_TREE,\n-\t\t\tbuild_tree_list (hash_tree_chain (argtype, NULL_TREE),\n-\t\t\t\t\t get_identifier (\"_ctor_arg\")),\n-\t\t\tvoid_list_node);\n-      break;\n-\n-    case 5:\n-    case 6:\n-      retref = 1;\n-      declspecs = build_decl_list (NULL_TREE, type);\n-\n-      if (kind == 5)\n-\ttype = build_qualified_type (type, TYPE_QUAL_CONST);\n-\n-      name = ansi_opname [(int) MODIFY_EXPR];\n-\n-      argtype = build_reference_type (type);\n-      args = tree_cons (NULL_TREE,\n-\t\t\tbuild_tree_list (hash_tree_chain (argtype, NULL_TREE),\n-\t\t\t\t\t get_identifier (\"_ctor_arg\")),\n-\t\t\tvoid_list_node);\n-      break;\n-\n-    default:\n-      my_friendly_abort (59);\n-    }\n-\n-  declspecs = decl_tree_cons (NULL_TREE, ridpointers [(int) RID_INLINE],\n-\t\t\t      declspecs);\n-\n-  TREE_PARMLIST (args) = 1;\n-\n-  {\n-    tree declarator = make_call_declarator (name, args, NULL_TREE, NULL_TREE);\n-    if (retref)\n-      declarator = build_parse_node (ADDR_EXPR, declarator);\n-\n-    fn = grokfield (declarator, declspecs, NULL_TREE, NULL_TREE, NULL_TREE);\n-  }\n-  \n-  if (fn == void_type_node)\n-    return fn;\n-\n-  if (kind > 2)\n-    SET_DECL_ARTIFICIAL (TREE_CHAIN (DECL_ARGUMENTS (fn)));\n-\n-#if 0\n-  if (processing_template_defn)\n-    {\n-      SET_DECL_IMPLICIT_INSTANTIATION (fn);\n-      repo_template_used (fn);\n-    }\n-#endif\n-\n-#if 0\n-  if (CLASSTYPE_INTERFACE_KNOWN (type))\n-    {\n-      DECL_INTERFACE_KNOWN (fn) = 1;\n-      DECL_NOT_REALLY_EXTERN (fn) = (!CLASSTYPE_INTERFACE_ONLY (type)\n-\t\t\t\t     && flag_implement_inlines);\n-    }\n-  else\n-#endif\n-    DECL_NOT_REALLY_EXTERN (fn) = 1;\n-\n-  defer_fn (fn);\n-\n-#ifdef DEBUG_DEFAULT_FUNCTIONS\n-  { char *fn_type = NULL;\n-    tree t = name;\n-    switch (kind)\n-      {\n-      case 0: fn_type = \"default destructor\"; break;\n-      case 1: fn_type = \"virtual destructor\"; break;\n-      case 2: fn_type = \"default constructor\"; break;\n-      case 3: fn_type = \"default X(const X&)\"; break;\n-      case 4: fn_type = \"default X(X&)\"; break;\n-      }\n-    if (fn_type)\n-      {\n-\tif (TREE_CODE (name) == BIT_NOT_EXPR)\n-\t  t = TREE_OPERAND (name, 0);\n-\tfprintf (stderr, \"[[[[ %s for %s:\\n%s]]]]\\n\", fn_type,\n-\t\t IDENTIFIER_POINTER (t), func_buf);\n-      }\n-  }\n-#endif /* DEBUG_DEFAULT_FUNCTIONS */\n-\n-  /* Show that this function was generated by the compiler.  */\n-  SET_DECL_ARTIFICIAL (fn);\n-  \n-  return fn;\n-}\n-\n /* Heuristic to tell whether the user is missing a semicolon\n    after a struct or enum declaration.  Emit an error message\n    if we know the user has blown it.  */"}, {"sha": "549c9e08d8e5dc5ad44cb6536d2bee7a9e26756c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -2383,7 +2383,7 @@ synthesize_method (fndecl)\n       do_build_assign_ref (fndecl);\n       need_body = 0;\n     }\n-  else if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n+  else if (DECL_DESTRUCTOR_P (fndecl))\n     setup_vtbl_ptr ();\n   else\n     {\n@@ -2413,3 +2413,86 @@ synthesize_method (fndecl)\n   else if (nested)\n     pop_function_context_from (context);\n }\n+\n+/* Implicitly declare the special function indicated by KIND, as a\n+   member of TYPE.  For copy constructors and assignment operators,\n+   CONST_P indicates whether these functions should take a const\n+   reference argument or a non-const reference.  */\n+\n+tree\n+implicitly_declare_fn (kind, type, const_p)\n+     special_function_kind kind;\n+     tree type;\n+     int const_p;\n+{\n+  tree declspecs = NULL_TREE;\n+  tree fn, args = NULL_TREE;\n+  tree argtype;\n+  int retref = 0;\n+  tree name = constructor_name (TYPE_IDENTIFIER (type));\n+\n+  switch (kind)\n+    {\n+      /* Destructors.  */\n+    case sfk_destructor:\n+      name = build_parse_node (BIT_NOT_EXPR, name);\n+      args = void_list_node;\n+      break;\n+\n+    case sfk_constructor:\n+      /* Default constructor.  */\n+      args = void_list_node;\n+      break;\n+\n+    case sfk_copy_constructor:\n+      if (const_p)\n+\ttype = build_qualified_type (type, TYPE_QUAL_CONST);\n+      argtype = build_reference_type (type);\n+      args = tree_cons (NULL_TREE,\n+\t\t\tbuild_tree_list (hash_tree_chain (argtype, NULL_TREE),\n+\t\t\t\t\t get_identifier (\"_ctor_arg\")),\n+\t\t\tvoid_list_node);\n+      break;\n+\n+    case sfk_assignment_operator:\n+      retref = 1;\n+      declspecs = build_decl_list (NULL_TREE, type);\n+\n+      if (const_p)\n+\ttype = build_qualified_type (type, TYPE_QUAL_CONST);\n+\n+      name = ansi_opname [(int) MODIFY_EXPR];\n+\n+      argtype = build_reference_type (type);\n+      args = tree_cons (NULL_TREE,\n+\t\t\tbuild_tree_list (hash_tree_chain (argtype, NULL_TREE),\n+\t\t\t\t\t get_identifier (\"_ctor_arg\")),\n+\t\t\tvoid_list_node);\n+      break;\n+\n+    default:\n+      my_friendly_abort (59);\n+    }\n+\n+  TREE_PARMLIST (args) = 1;\n+\n+  {\n+    tree declarator = make_call_declarator (name, args, NULL_TREE, NULL_TREE);\n+    if (retref)\n+      declarator = build_parse_node (ADDR_EXPR, declarator);\n+\n+    fn = grokfield (declarator, declspecs, NULL_TREE, NULL_TREE, NULL_TREE);\n+  }\n+\n+  my_friendly_assert (TREE_CODE (fn) == FUNCTION_DECL, 20000408);\n+\n+  if (kind != sfk_constructor && kind != sfk_destructor)\n+    SET_DECL_ARTIFICIAL (TREE_CHAIN (DECL_ARGUMENTS (fn)));\n+  SET_DECL_ARTIFICIAL (fn);\n+  DECL_NOT_REALLY_EXTERN (fn) = 1;\n+  DECL_THIS_INLINE (fn) = 1;\n+  DECL_INLINE (fn) = 1;\n+  defer_fn (fn);\n+  \n+  return fn;\n+}"}, {"sha": "117f30f36e22539e1bb7e6b99969591779c61b60", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -5151,11 +5151,11 @@ build_static_cast (type, expr)\n \t\t\t\t   LOOKUP_COMPLAIN, NULL_TREE)));\n \n   if (IS_AGGR_TYPE (type))\n-    return build_cplus_new\n-      (type, (build_method_call\n-\t      (NULL_TREE, ctor_identifier, build_tree_list (NULL_TREE, expr),\n-\t       TYPE_BINFO (type), LOOKUP_NORMAL)));\n-\n+    return build_cplus_new (type, (build_method_call\n+\t\t\t\t   (NULL_TREE, complete_ctor_identifier, \n+\t\t\t\t    build_tree_list (NULL_TREE, expr),\n+\t\t\t\t    TYPE_BINFO (type), LOOKUP_NORMAL)));\n+  \n   expr = decay_conversion (expr);\n   intype = TREE_TYPE (expr);\n \n@@ -5671,7 +5671,7 @@ build_modify_expr (lhs, modifycode, rhs)\n \t/* Do the default thing */;\n       else\n \t{\n-\t  result = build_method_call (lhs, ctor_identifier,\n+\t  result = build_method_call (lhs, complete_ctor_identifier,\n \t\t\t\t      build_tree_list (NULL_TREE, rhs),\n \t\t\t\t      TYPE_BINFO (lhstype), LOOKUP_NORMAL);\n \t  if (result == NULL_TREE)"}, {"sha": "bcbe7ca6c062ecddb55a904037c7d8d3f9cb3036", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb71d8c3b520b6a2b556884ce3735289ff1a276/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=9eb71d8c3b520b6a2b556884ce3735289ff1a276", "patch": "@@ -1284,7 +1284,7 @@ build_functional_cast (exp, parms)\n       return get_target_expr (exp);\n     }\n \n-  exp = build_method_call (NULL_TREE, ctor_identifier, parms,\n+  exp = build_method_call (NULL_TREE, complete_ctor_identifier, parms,\n \t\t\t   TYPE_BINFO (type), LOOKUP_NORMAL);\n \n   if (exp == error_mark_node)"}]}