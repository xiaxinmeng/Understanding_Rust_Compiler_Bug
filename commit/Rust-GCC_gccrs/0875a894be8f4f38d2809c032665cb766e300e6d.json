{"sha": "0875a894be8f4f38d2809c032665cb766e300e6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3NWE4OTRiZThmNGYzOGQyODA5YzAzMjY2NWNiNzY2ZTMwMGU2ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2003-12-08T09:53:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-08T09:53:53Z"}, "message": "sinfo.h, [...]: Removed...\n\n\t* sinfo.h, einfo.h, nmake.ads, treeprs.ads: Removed, since they\n\tare automatically generated by Make-lang.in and cause nothing but\n\tmaintenance troubles.\n\nFrom-SVN: r74408", "tree": {"sha": "85e602f82d875ee2732375f939e5e139e9c9432d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85e602f82d875ee2732375f939e5e139e9c9432d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0875a894be8f4f38d2809c032665cb766e300e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0875a894be8f4f38d2809c032665cb766e300e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0875a894be8f4f38d2809c032665cb766e300e6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0875a894be8f4f38d2809c032665cb766e300e6d/comments", "author": null, "committer": null, "parents": [{"sha": "0eb31ee3566c07d81e5dfeb500215e224b42169f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb31ee3566c07d81e5dfeb500215e224b42169f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb31ee3566c07d81e5dfeb500215e224b42169f"}], "stats": {"total": 4806, "additions": 6, "deletions": 4800}, "files": [{"sha": "fac9736a760dc6f6ef5593d11bc5e14b3d3ffc2a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0875a894be8f4f38d2809c032665cb766e300e6d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0875a894be8f4f38d2809c032665cb766e300e6d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0875a894be8f4f38d2809c032665cb766e300e6d", "patch": "@@ -1,3 +1,9 @@\n+2003-12-08  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* sinfo.h, einfo.h, nmake.ads, treeprs.ads: Removed, since they\n+\tare automatically generated by Make-lang.in and cause nothing but\n+\tmaintenance troubles.\n+\n 2003-12-05  Thomas Quinot  <quinot@act-europe.fr>\n \n \t* 3ssoliop.ads: Fix comment (this is the Solaris, not the UnixWare,"}, {"sha": "d34aca9457058c68decb19592288f172d3608081", "filename": "gcc/ada/einfo.h", "status": "removed", "additions": 0, "deletions": 1814, "changes": 1814, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Feinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Feinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.h?ref=0eb31ee3566c07d81e5dfeb500215e224b42169f", "patch": "@@ -1,1814 +0,0 @@\n-/*--------------------------------------------------------------------------*/\n-/*                                                                          */\n-/*                         GNAT COMPILER COMPONENTS                         */\n-/*                                                                          */\n-/*                                E I N F O                                 */\n-/*                                                                          */\n-/*                              C Header File                               */\n-/*                                                                          */\n-/*          Copyright (C) 1992-2003 Free Software Foundation, Inc.          */\n-/*                                                                          */\n-/* GNAT is free software;  you can  redistribute it  and/or modify it under */\n-/* terms of the  GNU General Public License as published  by the Free Soft- */\n-/* ware  Foundation;  either version 2,  or (at your option) any later ver- */\n-/* sion.  GNAT is distributed in the hope that it will be useful, but WITH- */\n-/* OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY */\n-/* or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License */\n-/* for  more details.  You should have  received  a copy of the GNU General */\n-/* Public License  distributed with GNAT;  see file COPYING.  If not, write */\n-/* to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, */\n-/* MA 02111-1307, USA.                                                      */\n-/*                                                                          */\n-/* As a special exception,  if other files  instantiate  generics from this */\n-/* unit, or you link  this unit with other files  to produce an executable, */\n-/* this  unit  does not  by itself cause  the resulting  executable  to  be */\n-/* covered  by the  GNU  General  Public  License.  This exception does not */\n-/* however invalidate  any other reasons why  the executable file  might be */\n-/* covered by the  GNU Public License.                                      */\n-/*                                                                          */\n-/* GNAT was originally developed  by the GNAT team at  New York University. */\n-/* Extensive contributions were provided by Ada Core Technologies Inc.      */\n-/*                                                                          */\n-/*--------------------------------------------------------------------------*/\n-\n-   #define E_Void                           0\n-   #define E_Variable                       1\n-   #define E_Component                      2\n-   #define E_Constant                       3\n-   #define E_Discriminant                   4\n-   #define E_Loop_Parameter                 5\n-   #define E_In_Parameter                   6\n-   #define E_Out_Parameter                  7\n-   #define E_In_Out_Parameter               8\n-   #define E_Generic_In_Out_Parameter       9\n-   #define E_Generic_In_Parameter           10\n-   #define E_Named_Integer                  11\n-   #define E_Named_Real                     12\n-   #define E_Enumeration_Type               13\n-   #define E_Enumeration_Subtype            14\n-   #define E_Signed_Integer_Type            15\n-   #define E_Signed_Integer_Subtype         16\n-   #define E_Modular_Integer_Type           17\n-   #define E_Modular_Integer_Subtype        18\n-   #define E_Ordinary_Fixed_Point_Type      19\n-   #define E_Ordinary_Fixed_Point_Subtype   20\n-   #define E_Decimal_Fixed_Point_Type       21\n-   #define E_Decimal_Fixed_Point_Subtype    22\n-   #define E_Floating_Point_Type            23\n-   #define E_Floating_Point_Subtype         24\n-   #define E_Access_Type                    25\n-   #define E_Access_Subtype                 26\n-   #define E_Access_Attribute_Type          27\n-   #define E_Allocator_Type                 28\n-   #define E_General_Access_Type            29\n-   #define E_Access_Subprogram_Type         30\n-   #define E_Access_Protected_Subprogram_Type 31\n-   #define E_Anonymous_Access_Type          32\n-   #define E_Array_Type                     33\n-   #define E_Array_Subtype                  34\n-   #define E_String_Type                    35\n-   #define E_String_Subtype                 36\n-   #define E_String_Literal_Subtype         37\n-   #define E_Class_Wide_Type                38\n-   #define E_Class_Wide_Subtype             39\n-   #define E_Record_Type                    40\n-   #define E_Record_Subtype                 41\n-   #define E_Record_Type_With_Private       42\n-   #define E_Record_Subtype_With_Private    43\n-   #define E_Private_Type                   44\n-   #define E_Private_Subtype                45\n-   #define E_Limited_Private_Type           46\n-   #define E_Limited_Private_Subtype        47\n-   #define E_Incomplete_Type                48\n-   #define E_Task_Type                      49\n-   #define E_Task_Subtype                   50\n-   #define E_Protected_Type                 51\n-   #define E_Protected_Subtype              52\n-   #define E_Exception_Type                 53\n-   #define E_Subprogram_Type                54\n-   #define E_Enumeration_Literal            55\n-   #define E_Function                       56\n-   #define E_Operator                       57\n-   #define E_Procedure                      58\n-   #define E_Entry                          59\n-   #define E_Entry_Family                   60\n-   #define E_Block                          61\n-   #define E_Entry_Index_Parameter          62\n-   #define E_Exception                      63\n-   #define E_Generic_Function               64\n-   #define E_Generic_Procedure              65\n-   #define E_Generic_Package                66\n-   #define E_Label                          67\n-   #define E_Loop                           68\n-   #define E_Package                        69\n-   #define E_Package_Body                   70\n-   #define E_Protected_Object               71\n-   #define E_Protected_Body                 72\n-   #define E_Task_Body                      73\n-   #define E_Subprogram_Body                74\n-\n-   SUBTYPE (Access_Kind, Entity_Kind, \n-      E_Access_Type, E_Anonymous_Access_Type)\n-\n-   SUBTYPE (Array_Kind, Entity_Kind, \n-      E_Array_Type, E_String_Literal_Subtype)\n-\n-   SUBTYPE (Class_Wide_Kind, Entity_Kind, \n-      E_Class_Wide_Type, E_Class_Wide_Subtype)\n-\n-   SUBTYPE (Composite_Kind, Entity_Kind, \n-      E_Array_Type, E_Protected_Subtype)\n-\n-   SUBTYPE (Concurrent_Kind, Entity_Kind, \n-      E_Task_Type, E_Protected_Subtype)\n-\n-   SUBTYPE (Concurrent_Body_Kind, Entity_Kind, \n-      E_Protected_Body, E_Task_Body)\n-\n-   SUBTYPE (Decimal_Fixed_Point_Kind, Entity_Kind, \n-      E_Decimal_Fixed_Point_Type, E_Decimal_Fixed_Point_Subtype)\n-\n-   SUBTYPE (Digits_Kind, Entity_Kind, \n-      E_Decimal_Fixed_Point_Type, E_Floating_Point_Subtype)\n-\n-   SUBTYPE (Discrete_Kind, Entity_Kind, \n-      E_Enumeration_Type, E_Modular_Integer_Subtype)\n-\n-   SUBTYPE (Discrete_Or_Fixed_Point_Kind, Entity_Kind, \n-      E_Enumeration_Type, E_Decimal_Fixed_Point_Subtype)\n-\n-   SUBTYPE (Elementary_Kind, Entity_Kind, \n-      E_Enumeration_Type, E_Anonymous_Access_Type)\n-\n-   SUBTYPE (Enumeration_Kind, Entity_Kind, \n-      E_Enumeration_Type, E_Enumeration_Subtype)\n-\n-   SUBTYPE (Entry_Kind, Entity_Kind, \n-      E_Entry, E_Entry_Family)\n-\n-   SUBTYPE (Fixed_Point_Kind, Entity_Kind, \n-      E_Ordinary_Fixed_Point_Type, E_Decimal_Fixed_Point_Subtype)\n-\n-   SUBTYPE (Float_Kind, Entity_Kind, \n-      E_Floating_Point_Type, E_Floating_Point_Subtype)\n-\n-   SUBTYPE (Formal_Kind, Entity_Kind, \n-      E_In_Parameter, E_In_Out_Parameter)\n-\n-   SUBTYPE (Generic_Subprogram_Kind, Entity_Kind, \n-      E_Generic_Function, E_Generic_Procedure)\n-\n-   SUBTYPE (Generic_Unit_Kind, Entity_Kind, \n-      E_Generic_Function, E_Generic_Package)\n-\n-   SUBTYPE (Incomplete_Or_Private_Kind, Entity_Kind, \n-      E_Record_Type_With_Private, E_Incomplete_Type)\n-\n-   SUBTYPE (Integer_Kind, Entity_Kind, \n-      E_Signed_Integer_Type, E_Modular_Integer_Subtype)\n-\n-   SUBTYPE (Modular_Integer_Kind, Entity_Kind, \n-      E_Modular_Integer_Type, E_Modular_Integer_Subtype)\n-\n-   SUBTYPE (Named_Kind, Entity_Kind, \n-      E_Named_Integer, E_Named_Real)\n-\n-   SUBTYPE (Numeric_Kind, Entity_Kind, \n-      E_Signed_Integer_Type, E_Floating_Point_Subtype)\n-\n-   SUBTYPE (Object_Kind, Entity_Kind, \n-      E_Variable, E_Generic_In_Parameter)\n-\n-   SUBTYPE (Ordinary_Fixed_Point_Kind, Entity_Kind, \n-      E_Ordinary_Fixed_Point_Type, E_Ordinary_Fixed_Point_Subtype)\n-\n-   SUBTYPE (Overloadable_Kind, Entity_Kind, \n-      E_Enumeration_Literal, E_Entry)\n-\n-   SUBTYPE (Private_Kind, Entity_Kind, \n-      E_Record_Type_With_Private, E_Limited_Private_Subtype)\n-\n-   SUBTYPE (Protected_Kind, Entity_Kind, \n-      E_Protected_Type, E_Protected_Subtype)\n-\n-   SUBTYPE (Real_Kind, Entity_Kind, \n-      E_Ordinary_Fixed_Point_Type, E_Floating_Point_Subtype)\n-\n-   SUBTYPE (Record_Kind, Entity_Kind, \n-      E_Class_Wide_Type, E_Record_Subtype_With_Private)\n-\n-   SUBTYPE (Scalar_Kind, Entity_Kind, \n-      E_Enumeration_Type, E_Floating_Point_Subtype)\n-\n-   SUBTYPE (String_Kind, Entity_Kind, \n-      E_String_Type, E_String_Literal_Subtype)\n-\n-   SUBTYPE (Subprogram_Kind, Entity_Kind, \n-      E_Function, E_Procedure)\n-\n-   SUBTYPE (Signed_Integer_Kind, Entity_Kind, \n-      E_Signed_Integer_Type, E_Signed_Integer_Subtype)\n-\n-   SUBTYPE (Task_Kind, Entity_Kind, \n-      E_Task_Type, E_Task_Subtype)\n-\n-   SUBTYPE (Type_Kind, Entity_Kind, \n-      E_Enumeration_Type, E_Subprogram_Type)\n-\n-   typedef char Component_Alignment_Kind;\n-      #define Calign_Default           0\n-      #define Calign_Component_Size    1\n-      #define Calign_Component_Size_4  2\n-      #define Calign_Storage_Unit      3\n-\n-   typedef Boolean B;\n-   typedef Component_Alignment_Kind C;\n-   typedef Entity_Id E;\n-   typedef Mechanism_Type M;\n-   typedef Node_Id N;\n-   typedef Uint U;\n-   typedef Ureal R;\n-   typedef Elist_Id L;\n-   typedef List_Id S;\n-\n-   INLINE L Accept_Address                     (E Id);\n-   INLINE E Access_Disp_Table                  (E Id);\n-   INLINE E Actual_Subtype                     (E Id);\n-   INLINE B Address_Taken                      (E Id);\n-   INLINE E Alias                              (E Id);\n-   INLINE U Alignment                          (E Id);\n-   INLINE E Associated_Final_Chain             (E Id);\n-   INLINE E Associated_Formal_Package          (E Id);\n-   INLINE N Associated_Node_For_Itype          (E Id);\n-   INLINE E Associated_Storage_Pool            (E Id);\n-   INLINE N Barrier_Function                   (E Id);\n-   INLINE N Block_Node                         (E Id);\n-   INLINE E Body_Entity                        (E Id);\n-   INLINE B Body_Needed_For_SAL                (E Id);\n-   INLINE E CR_Discriminant                    (E Id);\n-   INLINE B C_Pass_By_Copy                     (E Id);\n-   INLINE B Can_Never_Be_Null                  (E Id);\n-   INLINE B Checks_May_Be_Suppressed           (E Id);\n-   INLINE E Class_Wide_Type                    (E Id);\n-   INLINE E Cloned_Subtype                     (E Id);\n-\n-   #define Component_Alignment einfo__component_alignment\n-   C Component_Alignment                (E Id);\n-\n-   INLINE N Component_Clause                   (E Id);\n-   INLINE U Component_Bit_Offset               (E Id);\n-   INLINE U Component_Size                     (E Id);\n-   INLINE E Component_Type                     (E Id);\n-   INLINE E Corresponding_Concurrent_Type      (E Id);\n-   INLINE E Corresponding_Discriminant         (E Id);\n-   INLINE E Corresponding_Equality             (E Id);\n-   INLINE E Corresponding_Record_Type          (E Id);\n-   INLINE E Corresponding_Remote_Type          (E Id);\n-   INLINE N Current_Value                      (E Id);\n-   INLINE B Debug_Info_Off                     (E Id);\n-   INLINE E Debug_Renaming_Link                (E Id);\n-   INLINE E DTC_Entity                         (E Id);\n-   INLINE U DT_Entry_Count                     (E Id);\n-   INLINE U DT_Position                        (E Id);\n-   INLINE E Default_Expr_Function              (E Id);\n-   INLINE B Default_Expressions_Processed      (E Id);\n-   INLINE N Default_Value                      (E Id);\n-   INLINE B Delay_Cleanups                     (E Id);\n-   INLINE B Delay_Subprogram_Descriptors       (E Id);\n-   INLINE R Delta_Value                        (E Id);\n-   INLINE L Dependent_Instances                (E Id);\n-   INLINE B Depends_On_Private                 (E Id);\n-   INLINE U Digits_Value                       (E Id);\n-   INLINE E Directly_Designated_Type           (E Id);\n-   INLINE B Discard_Names                      (E Id);\n-   INLINE E Discriminal                        (E Id);\n-   INLINE E Discriminal_Link                   (E Id);\n-   INLINE E Discriminant_Checking_Func         (E Id);\n-   INLINE L Discriminant_Constraint            (E Id);\n-   INLINE N Discriminant_Default_Value         (E Id);\n-   INLINE U Discriminant_Number                (E Id);\n-   INLINE B Elaborate_All_Desirable            (E Id);\n-   INLINE E Elaboration_Entity                 (E Id);\n-   INLINE B Elaboration_Entity_Required        (E Id);\n-   INLINE E Enclosing_Scope                    (E Id);\n-   INLINE B Entry_Accepted                     (E Id);\n-   INLINE E Entry_Bodies_Array                 (E Id);\n-   INLINE E Entry_Cancel_Parameter             (E Id);\n-   INLINE E Entry_Component                    (E Id);\n-   INLINE E Entry_Formal                       (E Id);\n-   INLINE E Entry_Index_Constant               (E Id);\n-   INLINE E Entry_Index_Type                   (E Id);\n-   INLINE E Entry_Parameters_Type              (E Id);\n-   INLINE E Enum_Pos_To_Rep                    (E Id);\n-   INLINE U Enumeration_Pos                    (E Id);\n-   INLINE U Enumeration_Rep                    (E Id);\n-   INLINE N Enumeration_Rep_Expr               (E Id);\n-   INLINE E Equivalent_Type                    (E Id);\n-   INLINE U Esize                              (E Id);\n-   INLINE U Exception_Code                     (E Id);\n-   INLINE E Extra_Accessibility                (E Id);\n-   INLINE E Extra_Constrained                  (E Id);\n-   INLINE E Extra_Formal                       (E Id);\n-   INLINE E Finalization_Chain_Entity          (E Id);\n-\n-   #define Finalize_Storage_Only einfo__finalize_storage_only\n-   B Finalize_Storage_Only              (E Id);\n-\n-   INLINE E First_Entity                       (E Id);\n-   INLINE N First_Index                        (E Id);\n-   INLINE E First_Literal                      (E Id);\n-   INLINE E First_Optional_Parameter           (E Id);\n-   INLINE E First_Private_Entity               (E Id);\n-   INLINE N First_Rep_Item                     (E Id);\n-   INLINE N Freeze_Node                        (E Id);\n-   INLINE B From_With_Type                     (E Id);\n-   INLINE E Full_View                          (E Id);\n-   INLINE B Function_Returns_With_DSP          (E Id);\n-   INLINE E Generic_Homonym                    (E Id);\n-   INLINE L Generic_Renamings                  (E Id);\n-   INLINE S Handler_Records                    (E Id);\n-   INLINE B Has_Aliased_Components             (E Id);\n-   INLINE B Has_Alignment_Clause               (E Id);\n-   INLINE B Has_All_Calls_Remote               (E Id);\n-   INLINE B Has_Atomic_Components              (E Id);\n-   INLINE B Has_Biased_Representation          (E Id);\n-   INLINE B Has_Completion                     (E Id);\n-   INLINE B Has_Completion_In_Body             (E Id);\n-   INLINE B Has_Complex_Representation         (E Id);\n-   INLINE B Has_Component_Size_Clause          (E Id);\n-   INLINE B Has_Contiguous_Rep                 (E Id);\n-   INLINE B Has_Controlled_Component           (E Id);\n-   INLINE B Has_Controlling_Result             (E Id);\n-   INLINE B Has_Convention_Pragma              (E Id);\n-   INLINE B Has_Delayed_Freeze                 (E Id);\n-   INLINE B Has_Discriminants                  (E Id);\n-   INLINE B Has_Enumeration_Rep_Clause         (E Id);\n-   INLINE B Has_Exit                           (E Id);\n-   INLINE B Has_External_Tag_Rep_Clause        (E Id);\n-   INLINE B Has_Fully_Qualified_Name           (E Id);\n-   INLINE B Has_Gigi_Rep_Item                  (E Id);\n-   INLINE B Has_Homonym                        (E Id);\n-\n-   #define Has_Interrupt_Handler einfo__has_interrupt_handler\n-   B Has_Interrupt_Handler              (E Id);\n-\n-   INLINE B Has_Machine_Radix_Clause           (E Id);\n-   INLINE B Has_Master_Entity                  (E Id);\n-   INLINE B Has_Missing_Return                 (E Id);\n-   INLINE B Has_Nested_Block_With_Handler      (E Id);\n-   INLINE B Has_Forward_Instantiation          (E Id);\n-   INLINE B Has_Non_Standard_Rep               (E Id);\n-   INLINE B Has_Object_Size_Clause             (E Id);\n-   INLINE B Has_Per_Object_Constraint          (E Id);\n-   INLINE B Has_Pragma_Controlled              (E Id);\n-   INLINE B Has_Pragma_Elaborate_Body          (E Id);\n-   INLINE B Has_Pragma_Inline                  (E Id);\n-   INLINE B Has_Pragma_Pack                    (E Id);\n-   INLINE B Has_Pragma_Pure_Function           (E Id);\n-   INLINE B Has_Pragma_Unreferenced            (E Id);\n-   INLINE B Has_Primitive_Operations           (E Id);\n-   INLINE B Has_Qualified_Name                 (E Id);\n-   INLINE B Has_Record_Rep_Clause              (E Id);\n-   INLINE B Has_Recursive_Call                 (E Id);\n-   INLINE B Has_Size_Clause                    (E Id);\n-   INLINE B Has_Small_Clause                   (E Id);\n-   INLINE B Has_Specified_Layout               (E Id);\n-   INLINE B Has_Storage_Size_Clause            (E Id);\n-   INLINE B Has_Subprogram_Descriptor          (E Id);\n-   INLINE B Has_Task                           (E Id);\n-   INLINE B Has_Unchecked_Union                (E Id);\n-   INLINE B Has_Unknown_Discriminants          (E Id);\n-   INLINE B Has_Volatile_Components            (E Id);\n-   INLINE B Has_Xref_Entry                     (E Id);\n-   INLINE E Hiding_Loop_Variable               (E Id);\n-   INLINE E Homonym                            (E Id);\n-   INLINE B In_Package_Body                    (E Id);\n-   INLINE B In_Private_Part                    (E Id);\n-   INLINE B In_Use                             (E Id);\n-   INLINE L Inner_Instances                    (E Id);\n-   INLINE N Interface_Name                     (E Id);\n-   INLINE B Is_AST_Entry                       (E Id);\n-   INLINE B Is_Abstract                        (E Id);\n-   INLINE B Is_Access_Constant                 (E Id);\n-   INLINE B Is_Aliased                         (E Id);\n-   INLINE B Is_Asynchronous                    (E Id);\n-   INLINE B Is_Atomic                          (E Id);\n-   INLINE B Is_Bit_Packed_Array                (E Id);\n-   INLINE B Is_CPP_Class                       (E Id);\n-   INLINE B Is_Called                          (E Id);\n-   INLINE B Is_Character_Type                  (E Id);\n-   INLINE B Is_Child_Unit                      (E Id);\n-   INLINE B Is_Class_Wide_Equivalent_Type      (E Id);\n-   INLINE B Is_Compilation_Unit                (E Id);\n-   INLINE B Is_Completely_Hidden               (E Id);\n-   INLINE B Is_Constr_Subt_For_UN_Aliased      (E Id);\n-   INLINE B Is_Constr_Subt_For_U_Nominal       (E Id);\n-   INLINE B Is_Constrained                     (E Id);\n-   INLINE B Is_Constructor                     (E Id);\n-   INLINE B Is_Controlled                      (E Id);\n-   INLINE B Is_Controlling_Formal              (E Id);\n-   INLINE B Is_Discrim_SO_Function             (E Id);\n-   INLINE B Is_Dispatching_Operation           (E Id);\n-   INLINE B Is_Eliminated                      (E Id);\n-   INLINE B Is_Entry_Formal                    (E Id);\n-   INLINE B Is_Exported                        (E Id);\n-   INLINE B Is_First_Subtype                   (E Id);\n-   INLINE B Is_For_Access_Subtype              (E Id);\n-   INLINE B Is_Frozen                          (E Id);\n-   INLINE B Is_Generic_Instance                (E Id);\n-   INLINE B Is_Hidden                          (E Id);\n-   INLINE B Is_Hidden_Open_Scope               (E Id);\n-   INLINE B Is_Immediately_Visible             (E Id);\n-   INLINE B Is_Imported                        (E Id);\n-   INLINE B Is_Inlined                         (E Id);\n-   INLINE B Is_Instantiated                    (E Id);\n-   INLINE B Is_Internal                        (E Id);\n-   INLINE B Is_Interrupt_Handler               (E Id);\n-   INLINE B Is_Intrinsic_Subprogram            (E Id);\n-   INLINE B Is_Itype                           (E Id);\n-   INLINE B Is_Known_Non_Null                  (E Id);\n-   INLINE B Is_Known_Valid                     (E Id);\n-   INLINE B Is_Limited_Composite               (E Id);\n-   INLINE B Is_Machine_Code_Subprogram         (E Id);\n-   INLINE B Is_Non_Static_Subtype              (E Id);\n-   INLINE B Is_Null_Init_Proc                  (E Id);\n-   INLINE B Is_Optional_Parameter              (E Id);\n-   INLINE B Is_Package_Body_Entity             (E Id);\n-   INLINE B Is_Packed                          (E Id);\n-   INLINE B Is_Packed_Array_Type               (E Id);\n-   INLINE B Is_Potentially_Use_Visible         (E Id);\n-   INLINE B Is_Preelaborated                   (E Id);\n-   INLINE B Is_Private_Composite               (E Id);\n-   INLINE B Is_Private_Descendant              (E Id);\n-   INLINE B Is_Psected                         (E Id);\n-   INLINE B Is_Public                          (E Id);\n-   INLINE B Is_Pure                            (E Id);\n-   INLINE B Is_Remote_Call_Interface           (E Id);\n-   INLINE B Is_Remote_Types                    (E Id);\n-   INLINE B Is_Renaming_Of_Object              (E Id);\n-   INLINE B Is_Shared_Passive                  (E Id);\n-   INLINE B Is_Statically_Allocated            (E Id);\n-   INLINE B Is_Tag                             (E Id);\n-   INLINE B Is_Tagged_Type                     (E Id);\n-   INLINE B Is_Thread_Body                     (E Id);\n-   INLINE B Is_True_Constant                   (E Id);\n-   INLINE B Is_Unchecked_Union                 (E Id);\n-   INLINE B Is_Unsigned_Type                   (E Id);\n-   INLINE B Is_VMS_Exception                   (E Id);\n-   INLINE B Is_Valued_Procedure                (E Id);\n-   INLINE B Is_Visible_Child_Unit              (E Id);\n-\n-   #define Is_Volatile einfo__is_volatile\n-   B Is_Volatile                        (E Id);\n-\n-   #define Is_Wrapper_Package einfo__is_wrapper_package\n-   B Is_Wrapper_Package                 (E Id);\n-\n-   INLINE B Kill_Elaboration_Checks            (E Id);\n-   INLINE B Kill_Range_Checks                  (E Id);\n-   INLINE B Kill_Tag_Checks                    (E Id);\n-   INLINE E Last_Entity                        (E Id);\n-   INLINE L Limited_Views                      (E Id);\n-   INLINE E Lit_Indexes                        (E Id);\n-   INLINE E Lit_Strings                        (E Id);\n-   INLINE B Machine_Radix_10                   (E Id);\n-   INLINE E Master_Id                          (E Id);\n-   INLINE B Materialize_Entity                 (E Id);\n-   INLINE M Mechanism                          (E Id);\n-   INLINE U Modulus                            (E Id);\n-   INLINE B Needs_Debug_Info                   (E Id);\n-   INLINE B Needs_No_Actuals                   (E Id);\n-   INLINE B Never_Set_In_Source                (E Id);\n-   INLINE E Next_Inlined_Subprogram            (E Id);\n-   INLINE B No_Pool_Assigned                   (E Id);\n-   INLINE B No_Return                          (E Id);\n-   INLINE B Non_Binary_Modulus                 (E Id);\n-   INLINE E Non_Limited_View                   (E Id);\n-   INLINE B Nonzero_Is_True                    (E Id);\n-   INLINE U Normalized_First_Bit               (E Id);\n-   INLINE U Normalized_Position                (E Id);\n-   INLINE U Normalized_Position_Max            (E Id);\n-   INLINE E Object_Ref                         (E Id);\n-   INLINE E Original_Array_Type                (E Id);\n-   INLINE E Original_Record_Component          (E Id);\n-   INLINE E Packed_Array_Type                  (E Id);\n-   INLINE E Parent_Subtype                     (E Id);\n-   INLINE L Primitive_Operations               (E Id);\n-   INLINE E Prival                             (E Id);\n-   INLINE L Privals_Chain                      (E Id);\n-   INLINE L Private_Dependents                 (E Id);\n-   INLINE N Private_View                       (E Id);\n-   INLINE E Protected_Body_Subprogram          (E Id);\n-   INLINE E Protected_Formal                   (E Id);\n-   INLINE E Protected_Operation                (E Id);\n-   INLINE U RM_Size                            (E Id);\n-   INLINE B Reachable                          (E Id);\n-   INLINE B Referenced                         (E Id);\n-   INLINE B Referenced_As_LHS                  (E Id);\n-   INLINE N Referenced_Object                  (E Id);\n-   INLINE N Register_Exception_Call            (E Id);\n-   INLINE E Related_Array_Object               (E Id);\n-   INLINE E Related_Instance                   (E Id);\n-   INLINE N Renamed_Entity                     (E Id);\n-   INLINE N Renamed_Object                     (E Id);\n-   INLINE U Renaming_Map                       (E Id);\n-   INLINE B Return_Present                     (E Id);\n-   INLINE B Returns_By_Ref                     (E Id);\n-   INLINE B Reverse_Bit_Order                  (E Id);\n-   INLINE N Scalar_Range                       (E Id);\n-   INLINE U Scale_Value                        (E Id);\n-   INLINE U Scope_Depth_Value                  (E Id);\n-   INLINE B Sec_Stack_Needed_For_Return        (E Id);\n-   INLINE S Shadow_Entities                    (E Id);\n-   INLINE E Shared_Var_Assign_Proc             (E Id);\n-   INLINE E Shared_Var_Read_Proc               (E Id);\n-   INLINE N Size_Check_Code                    (E Id);\n-   INLINE B Size_Known_At_Compile_Time         (E Id);\n-   INLINE B Size_Depends_On_Discriminant       (E Id);\n-   INLINE R Small_Value                        (E Id);\n-   INLINE E Spec_Entity                        (E Id);\n-   INLINE E Storage_Size_Variable              (E Id);\n-   INLINE L Stored_Constraint                  (E Id);\n-   INLINE B Strict_Alignment                   (E Id);\n-   INLINE U String_Literal_Length              (E Id);\n-   INLINE N String_Literal_Low_Bound           (E Id);\n-   INLINE B Suppress_Elaboration_Warnings      (E Id);\n-   INLINE B Suppress_Init_Proc                 (E Id);\n-   INLINE B Suppress_Style_Checks              (E Id);\n-   INLINE B Treat_As_Volatile                  (E Id);\n-   INLINE E Underlying_Full_View               (E Id);\n-   INLINE N Unset_Reference                    (E Id);\n-   INLINE B Uses_Sec_Stack                     (E Id);\n-   INLINE B Vax_Float                          (E Id);\n-   INLINE B Warnings_Off                       (E Id);\n-   INLINE B Is_Access_Type                     (E Id);\n-   INLINE B Is_Array_Type                      (E Id);\n-   INLINE B Is_Class_Wide_Type                 (E Id);\n-   INLINE B Is_Composite_Type                  (E Id);\n-   INLINE B Is_Concurrent_Body                 (E Id);\n-   INLINE B Is_Concurrent_Record_Type          (E Id);\n-   INLINE B Is_Concurrent_Type                 (E Id);\n-   INLINE B Is_Decimal_Fixed_Point_Type        (E Id);\n-   INLINE B Is_Digits_Type                     (E Id);\n-   INLINE B Is_Discrete_Or_Fixed_Point_Type    (E Id);\n-   INLINE B Is_Discrete_Type                   (E Id);\n-   INLINE B Is_Elementary_Type                 (E Id);\n-   INLINE B Is_Entry                           (E Id);\n-   INLINE B Is_Enumeration_Type                (E Id);\n-   INLINE B Is_Fixed_Point_Type                (E Id);\n-   INLINE B Is_Floating_Point_Type             (E Id);\n-   INLINE B Is_Formal                          (E Id);\n-   INLINE B Is_Formal_Subprogram               (E Id);\n-   INLINE B Is_Generic_Actual_Type             (E Id);\n-   INLINE B Is_Generic_Unit                    (E Id);\n-   INLINE B Is_Generic_Type                    (E Id);\n-   INLINE B Is_Generic_Subprogram              (E Id);\n-   INLINE B Is_Incomplete_Or_Private_Type      (E Id);\n-   INLINE B Is_Integer_Type                    (E Id);\n-   INLINE B Is_Limited_Record                  (E Id);\n-   INLINE B Is_Modular_Integer_Type            (E Id);\n-   INLINE B Is_Named_Number                    (E Id);\n-   INLINE B Is_Numeric_Type                    (E Id);\n-   INLINE B Is_Object                          (E Id);\n-   INLINE B Is_Ordinary_Fixed_Point_Type       (E Id);\n-   INLINE B Is_Overloadable                    (E Id);\n-   INLINE B Is_Overriding_Operation            (E Id);\n-   INLINE B Is_Private_Type                    (E Id);\n-   INLINE B Is_Protected_Type                  (E Id);\n-   INLINE B Is_Real_Type                       (E Id);\n-   INLINE B Is_Record_Type                     (E Id);\n-   INLINE B Is_Scalar_Type                     (E Id);\n-   INLINE B Is_Signed_Integer_Type             (E Id);\n-   INLINE B Is_Subprogram                      (E Id);\n-   INLINE B Is_Task_Type                       (E Id);\n-   INLINE B Is_Type                            (E Id);\n-\n-   #define Address_Clause einfo__address_clause\n-   N Address_Clause                     (E Id);\n-\n-   #define Alignment_Clause einfo__alignment_clause\n-   N Alignment_Clause                   (E Id);\n-\n-   #define Ancestor_Subtype einfo__ancestor_subtype\n-   E Ancestor_Subtype                   (E Id);\n-\n-   #define Base_Type einfo__base_type\n-   E Base_Type                          (E Id);\n-\n-   #define Constant_Value einfo__constant_value\n-   N Constant_Value                     (E Id);\n-\n-   #define Declaration_Node einfo__declaration_node\n-   N Declaration_Node                   (E Id);\n-\n-   #define Designated_Type einfo__designated_type\n-   E Designated_Type                    (E Id);\n-\n-   #define Enclosing_Dynamic_Scope einfo__enclosing_dynamic_scope\n-   E Enclosing_Dynamic_Scope            (E Id);\n-\n-   #define First_Component einfo__first_component\n-   E First_Component                    (E Id);\n-\n-   #define First_Discriminant einfo__first_discriminant\n-   E First_Discriminant                 (E Id);\n-\n-   #define First_Formal einfo__first_formal\n-   E First_Formal                       (E Id);\n-\n-   #define First_Stored_Discriminant einfo__first_stored_discriminant\n-   E First_Stored_Discriminant          (E Id);\n-\n-   #define First_Subtype einfo__first_subtype\n-   E First_Subtype                      (E Id);\n-\n-   #define Has_Attach_Handler einfo__has_attach_handler\n-   B Has_Attach_Handler                 (E Id);\n-\n-   #define Has_Entries einfo__has_entries\n-   B Has_Entries                        (E Id);\n-\n-   #define Has_Foreign_Convention einfo__has_foreign_convention\n-   B Has_Foreign_Convention             (E Id);\n-\n-   #define Has_Private_Ancestor einfo__has_private_ancestor\n-   B Has_Private_Ancestor               (E Id);\n-\n-   INLINE B Has_Private_Declaration            (E Id);\n-\n-   #define Implementation_Base_Type einfo__implementation_base_type\n-   E Implementation_Base_Type           (E Id);\n-\n-   #define Is_Always_Inlined einfo__is_always_inlined\n-   B Is_Always_Inlined                  (E Id);\n-\n-   #define Is_Boolean_Type einfo__is_boolean_type\n-   B Is_Boolean_Type                    (E Id);\n-\n-   #define Is_By_Copy_Type einfo__is_by_copy_type\n-   B Is_By_Copy_Type                    (E Id);\n-\n-   #define Is_By_Reference_Type einfo__is_by_reference_type\n-   B Is_By_Reference_Type               (E Id);\n-\n-   #define Is_Derived_Type einfo__is_derived_type\n-   B Is_Derived_Type                    (E Id);\n-\n-   #define Is_Dynamic_Scope einfo__is_dynamic_scope\n-   B Is_Dynamic_Scope                   (E Id);\n-\n-   #define Is_Indefinite_Subtype einfo__is_indefinite_subtype\n-   B Is_Indefinite_Subtype              (E Id);\n-\n-   #define Is_Limited_Type einfo__is_limited_type\n-   B Is_Limited_Type                    (E Id);\n-\n-   #define Is_Package einfo__is_package\n-   B Is_Package                         (E Id);\n-\n-   #define Is_Protected_Private einfo__is_protected_private\n-   B Is_Protected_Private               (E Id);\n-\n-   #define Is_Protected_Record_Type einfo__is_protected_record_type\n-   B Is_Protected_Record_Type           (E Id);\n-\n-   #define Is_Return_By_Reference_Type einfo__is_return_by_reference_type\n-   B Is_Return_By_Reference_Type        (E Id);\n-\n-   #define Is_String_Type einfo__is_string_type\n-   B Is_String_Type                     (E Id);\n-\n-   #define Is_Task_Record_Type einfo__is_task_record_type\n-   B Is_Task_Record_Type                (E Id);\n-\n-   #define Next_Component einfo__next_component\n-   E Next_Component                     (E Id);\n-\n-   #define Next_Discriminant einfo__next_discriminant\n-   E Next_Discriminant                  (E Id);\n-\n-   #define Next_Formal einfo__next_formal\n-   E Next_Formal                        (E Id);\n-\n-   #define Next_Formal_With_Extras einfo__next_formal_with_extras\n-   E Next_Formal_With_Extras            (E Id);\n-\n-   INLINE E Next_Literal                       (E Id);\n-\n-   #define Next_Stored_Discriminant einfo__next_stored_discriminant\n-   E Next_Stored_Discriminant           (E Id);\n-\n-   #define Number_Dimensions einfo__number_dimensions\n-   Pos Number_Dimensions                  (E Id);\n-\n-   #define Number_Discriminants einfo__number_discriminants\n-   Pos Number_Discriminants               (E Id);\n-\n-   #define Number_Entries einfo__number_entries\n-   Nat Number_Entries                     (E Id);\n-\n-   #define Number_Formals einfo__number_formals\n-   Pos Number_Formals                     (E Id);\n-\n-   INLINE Formal_Kind Parameter_Mode                     (E Id);\n-\n-   #define Root_Type einfo__root_type\n-   E Root_Type                          (E Id);\n-\n-   #define Scope_Depth_Set einfo__scope_depth_set\n-   B Scope_Depth_Set                    (E Id);\n-\n-   #define Size_Clause einfo__size_clause\n-   N Size_Clause                        (E Id);\n-\n-   #define Tag_Component einfo__tag_component\n-   E Tag_Component                      (E Id);\n-\n-   #define Type_High_Bound einfo__type_high_bound\n-   N Type_High_Bound                    (E Id);\n-\n-   #define Type_Low_Bound einfo__type_low_bound\n-   N Type_Low_Bound                     (E Id);\n-\n-   #define Underlying_Type einfo__underlying_type\n-   E Underlying_Type                    (E Id);\n-\n-   #define Known_Alignment einfo__known_alignment\n-   B Known_Alignment                       (Entity_Id E);\n-\n-   #define Known_Component_Bit_Offset einfo__known_component_bit_offset\n-   B Known_Component_Bit_Offset            (Entity_Id E);\n-\n-   #define Known_Component_Size einfo__known_component_size\n-   B Known_Component_Size                  (Entity_Id E);\n-\n-   #define Known_Esize einfo__known_esize\n-   B Known_Esize                           (Entity_Id E);\n-\n-   #define Known_Normalized_First_Bit einfo__known_normalized_first_bit\n-   B Known_Normalized_First_Bit            (Entity_Id E);\n-\n-   #define Known_Normalized_Position einfo__known_normalized_position\n-   B Known_Normalized_Position             (Entity_Id E);\n-\n-   #define Known_Normalized_Position_Max einfo__known_normalized_position_max\n-   B Known_Normalized_Position_Max         (Entity_Id E);\n-\n-   #define Known_RM_Size einfo__known_rm_size\n-   B Known_RM_Size                         (Entity_Id E);\n-\n-   #define Known_Static_Component_Bit_Offset einfo__known_static_component_bit_offset\n-   B Known_Static_Component_Bit_Offset     (Entity_Id E);\n-\n-   #define Known_Static_Component_Size einfo__known_static_component_size\n-   B Known_Static_Component_Size           (Entity_Id E);\n-\n-   #define Known_Static_Esize einfo__known_static_esize\n-   B Known_Static_Esize                    (Entity_Id E);\n-\n-   #define Known_Static_Normalized_First_Bit einfo__known_static_normalized_first_bit\n-   B Known_Static_Normalized_First_Bit     (Entity_Id E);\n-\n-   #define Known_Static_Normalized_Position einfo__known_static_normalized_position\n-   B Known_Static_Normalized_Position      (Entity_Id E);\n-\n-   #define Known_Static_Normalized_Position_Max einfo__known_static_normalized_position_max\n-   B Known_Static_Normalized_Position_Max  (Entity_Id E);\n-\n-   #define Known_Static_RM_Size einfo__known_static_rm_size\n-   B Known_Static_RM_Size                  (Entity_Id E);\n-\n-   #define Unknown_Alignment einfo__unknown_alignment\n-   B Unknown_Alignment                     (Entity_Id E);\n-\n-   #define Unknown_Component_Bit_Offset einfo__unknown_component_bit_offset\n-   B Unknown_Component_Bit_Offset          (Entity_Id E);\n-\n-   #define Unknown_Component_Size einfo__unknown_component_size\n-   B Unknown_Component_Size                (Entity_Id E);\n-\n-   #define Unknown_Esize einfo__unknown_esize\n-   B Unknown_Esize                         (Entity_Id E);\n-\n-   #define Unknown_Normalized_First_Bit einfo__unknown_normalized_first_bit\n-   B Unknown_Normalized_First_Bit          (Entity_Id E);\n-\n-   #define Unknown_Normalized_Position einfo__unknown_normalized_position\n-   B Unknown_Normalized_Position           (Entity_Id E);\n-\n-   #define Unknown_Normalized_Position_Max einfo__unknown_normalized_position_max\n-   B Unknown_Normalized_Position_Max       (Entity_Id E);\n-\n-   #define Unknown_RM_Size einfo__unknown_rm_size\n-   B Unknown_RM_Size                       (Entity_Id E);\n-\n-\n-   INLINE L Accept_Address (E Id)\n-      { return Elist21 (Id); }\n-\n-   INLINE E Access_Disp_Table (E Id)\n-      { return Node16 (Implementation_Base_Type (Id)); }\n-\n-   INLINE E Actual_Subtype (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE B Address_Taken (E Id)\n-      { return Flag104 (Id); }\n-\n-   INLINE E Alias (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE U Alignment (E Id)\n-      { return Uint14 (Id); }\n-\n-   INLINE E Associated_Final_Chain (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE E Associated_Formal_Package (E Id)\n-      { return Node12 (Id); }\n-\n-   INLINE N Associated_Node_For_Itype (E Id)\n-      { return Node8 (Id); }\n-\n-   INLINE E Associated_Storage_Pool (E Id)\n-      { return Node22 (Root_Type (Id)); }\n-\n-   INLINE N Barrier_Function (E Id)\n-      { return Node12 (Id); }\n-\n-   INLINE N Block_Node (E Id)\n-      { return Node11 (Id); }\n-\n-   INLINE E Body_Entity (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE B Body_Needed_For_SAL (E Id)\n-      { return Flag40 (Id); }\n-\n-   INLINE B C_Pass_By_Copy (E Id)\n-      { return Flag125 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Can_Never_Be_Null (E Id)\n-      { return Flag38 (Id); }\n-\n-   INLINE B Checks_May_Be_Suppressed (E Id)\n-      { return Flag31 (Id); }\n-\n-   INLINE E Class_Wide_Type (E Id)\n-      { return Node9 (Id); }\n-\n-   INLINE E Cloned_Subtype (E Id)\n-      { return Node16 (Id); }\n-\n-   INLINE U Component_Bit_Offset (E Id)\n-      { return Uint11 (Id); }\n-\n-   INLINE N Component_Clause (E Id)\n-      { return Node13 (Id); }\n-\n-   INLINE U Component_Size (E Id)\n-      { return Uint22 (Implementation_Base_Type (Id)); }\n-\n-   INLINE E Component_Type (E Id)\n-      { return Node20 (Implementation_Base_Type (Id)); }\n-\n-   INLINE E Corresponding_Concurrent_Type (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE E Corresponding_Discriminant (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE E Corresponding_Equality (E Id)\n-      { return Node13 (Id); }\n-\n-   INLINE E Corresponding_Record_Type (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE E Corresponding_Remote_Type (E Id)\n-      { return Node22 (Id); }\n-\n-   INLINE N Current_Value (E Id)\n-      { return Node9 (Id); }\n-\n-   INLINE E CR_Discriminant (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE B Debug_Info_Off (E Id)\n-      { return Flag166 (Id); }\n-\n-   INLINE E Debug_Renaming_Link (E Id)\n-      { return Node13 (Id); }\n-\n-   INLINE E Default_Expr_Function (E Id)\n-      { return Node21 (Id); }\n-\n-   INLINE B Default_Expressions_Processed (E Id)\n-      { return Flag108 (Id); }\n-\n-   INLINE N Default_Value (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE B Delay_Cleanups (E Id)\n-      { return Flag114 (Id); }\n-\n-   INLINE B Delay_Subprogram_Descriptors (E Id)\n-      { return Flag50 (Id); }\n-\n-   INLINE R Delta_Value (E Id)\n-      { return Ureal18 (Id); }\n-\n-   INLINE L Dependent_Instances (E Id)\n-      { return Elist8 (Id); }\n-\n-   INLINE B Depends_On_Private (E Id)\n-      { return Flag14 (Id); }\n-\n-   INLINE U Digits_Value (E Id)\n-      { return Uint17 (Id); }\n-\n-   INLINE E Directly_Designated_Type (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE B Discard_Names (E Id)\n-      { return Flag88 (Id); }\n-\n-   INLINE E Discriminal (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE N Discriminal_Link (E Id)\n-      { return Node10 (Id); }\n-\n-   INLINE E Discriminant_Checking_Func (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE L Discriminant_Constraint (E Id)\n-      { return Elist21 (Id); }\n-\n-   INLINE N Discriminant_Default_Value (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE U Discriminant_Number (E Id)\n-      { return Uint15 (Id); }\n-\n-   INLINE U DT_Entry_Count (E Id)\n-      { return Uint15 (Id); }\n-\n-   INLINE U DT_Position (E Id)\n-      { return Uint15 (Id); }\n-\n-   INLINE E DTC_Entity (E Id)\n-      { return Node16 (Id); }\n-\n-   INLINE B Elaborate_All_Desirable (E Id)\n-      { return Flag146 (Id); }\n-\n-   INLINE E Elaboration_Entity (E Id)\n-      { return Node13 (Id); }\n-\n-   INLINE B Elaboration_Entity_Required (E Id)\n-      { return Flag174 (Id); }\n-\n-   INLINE E Enclosing_Scope (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE B Entry_Accepted (E Id)\n-      { return Flag152 (Id); }\n-\n-   INLINE E Entry_Bodies_Array (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE E Entry_Cancel_Parameter (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE E Entry_Component (E Id)\n-      { return Node11 (Id); }\n-\n-   INLINE E Entry_Formal (E Id)\n-      { return Node16 (Id); }\n-\n-   INLINE N Entry_Index_Constant (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE E Entry_Parameters_Type (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE E Enum_Pos_To_Rep (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE Uint Enumeration_Pos (E Id)\n-      { return Uint11 (Id); }\n-\n-   INLINE U Enumeration_Rep (E Id)\n-      { return Uint12 (Id); }\n-\n-   INLINE N Enumeration_Rep_Expr (E Id)\n-      { return Node22 (Id); }\n-\n-   INLINE E Equivalent_Type (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE Uint Esize (E Id)\n-      { return Uint12 (Id); }\n-\n-   INLINE Uint Exception_Code (E Id)\n-      { return Uint22 (Id); }\n-\n-   INLINE E Extra_Accessibility (E Id)\n-      { return Node13 (Id); }\n-\n-   INLINE E Extra_Constrained (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE E Extra_Formal (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE E Finalization_Chain_Entity (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE E First_Entity (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE N First_Index (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE E First_Literal (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE E First_Optional_Parameter (E Id)\n-      { return Node14 (Id); }\n-\n-   INLINE E First_Private_Entity (E Id)\n-      { return Node16 (Id); }\n-\n-   INLINE E First_Rep_Item (E Id)\n-      { return Node6 (Id); }\n-\n-   INLINE N Freeze_Node (E Id)\n-      { return Node7 (Id); }\n-\n-   INLINE B From_With_Type (E Id)\n-      { return Flag159 (Id); }\n-\n-   INLINE E Full_View (E Id)\n-      { return Node11 (Id); }\n-\n-   INLINE B Function_Returns_With_DSP (E Id)\n-      { return Flag169 (Id); }\n-\n-   INLINE E Generic_Homonym (E Id)\n-      { return Node11 (Id); }\n-\n-   INLINE L Generic_Renamings (E Id)\n-      { return Elist23 (Id); }\n-\n-   INLINE S Handler_Records (E Id)\n-      { return List10 (Id); }\n-\n-   INLINE B Has_Aliased_Components (E Id)\n-      { return Flag135 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Alignment_Clause (E Id)\n-      { return Flag46 (Id); }\n-\n-   INLINE B Has_All_Calls_Remote (E Id)\n-      { return Flag79 (Id); }\n-\n-   INLINE B Has_Atomic_Components (E Id)\n-      { return Flag86 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Biased_Representation (E Id)\n-      { return Flag139 (Id); }\n-\n-   INLINE B Has_Completion (E Id)\n-      { return Flag26 (Id); }\n-\n-   INLINE B Has_Completion_In_Body (E Id)\n-      { return Flag71 (Id); }\n-\n-   INLINE B Has_Complex_Representation (E Id)\n-      { return Flag140 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Component_Size_Clause (E Id)\n-      { return Flag68 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Controlled_Component (E Id)\n-      { return Flag43 (Base_Type (Id)); }\n-\n-   INLINE B Has_Contiguous_Rep (E Id)\n-      { return Flag181 (Id); }\n-\n-   INLINE B Has_Controlling_Result (E Id)\n-      { return Flag98 (Id); }\n-\n-   INLINE B Has_Convention_Pragma (E Id)\n-      { return Flag119 (Id); }\n-\n-   INLINE B Has_Delayed_Freeze (E Id)\n-      { return Flag18 (Id); }\n-\n-   INLINE B Has_Discriminants (E Id)\n-      { return Flag5 (Id); }\n-\n-   INLINE B Has_Enumeration_Rep_Clause (E Id)\n-      { return Flag66 (Id); }\n-\n-   INLINE B Has_Exit (E Id)\n-      { return Flag47 (Id); }\n-\n-   INLINE B Has_External_Tag_Rep_Clause (E Id)\n-      { return Flag110 (Id); }\n-\n-   INLINE B Has_Forward_Instantiation (E Id)\n-      { return Flag175 (Id); }\n-\n-   INLINE B Has_Fully_Qualified_Name (E Id)\n-      { return Flag173 (Id); }\n-\n-   INLINE B Has_Gigi_Rep_Item (E Id)\n-      { return Flag82 (Id); }\n-\n-   INLINE B Has_Homonym (E Id)\n-      { return Flag56 (Id); }\n-\n-   INLINE B Has_Machine_Radix_Clause (E Id)\n-      { return Flag83 (Id); }\n-\n-   INLINE B Has_Master_Entity (E Id)\n-      { return Flag21 (Id); }\n-\n-   INLINE B Has_Missing_Return (E Id)\n-      { return Flag142 (Id); }\n-\n-   INLINE B Has_Nested_Block_With_Handler (E Id)\n-      { return Flag101 (Id); }\n-\n-   INLINE B Has_Non_Standard_Rep (E Id)\n-      { return Flag75 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Object_Size_Clause (E Id)\n-      { return Flag172 (Id); }\n-\n-   INLINE B Has_Per_Object_Constraint (E Id)\n-      { return Flag154 (Id); }\n-\n-   INLINE B Has_Pragma_Controlled (E Id)\n-      { return Flag27 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Pragma_Elaborate_Body (E Id)\n-      { return Flag150 (Id); }\n-\n-   INLINE B Has_Pragma_Inline (E Id)\n-      { return Flag157 (Id); }\n-\n-   INLINE B Has_Pragma_Pack (E Id)\n-      { return Flag121 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Pragma_Pure_Function (E Id)\n-      { return Flag179 (Id); }\n-\n-   INLINE B Has_Pragma_Unreferenced (E Id)\n-      { return Flag180 (Id); }\n-\n-   INLINE B Has_Primitive_Operations (E Id)\n-      { return Flag120 (Base_Type (Id)); }\n-\n-   INLINE B Has_Private_Declaration (E Id)\n-      { return Flag155 (Id); }\n-\n-   INLINE B Has_Qualified_Name (E Id)\n-      { return Flag161 (Id); }\n-\n-   INLINE B Has_Record_Rep_Clause (E Id)\n-      { return Flag65 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Recursive_Call (E Id)\n-      { return Flag143 (Id); }\n-\n-   INLINE B Has_Size_Clause (E Id)\n-      { return Flag29 (Id); }\n-\n-   INLINE B Has_Small_Clause (E Id)\n-      { return Flag67 (Id); }\n-\n-   INLINE B Has_Specified_Layout (E Id)\n-      { return Flag100 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Storage_Size_Clause (E Id)\n-      { return Flag23 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Subprogram_Descriptor (E Id)\n-      { return Flag93 (Id); }\n-\n-   INLINE B Has_Task (E Id)\n-      { return Flag30 (Base_Type (Id)); }\n-\n-   INLINE B Has_Unchecked_Union (E Id)\n-      { return Flag123 (Base_Type (Id)); }\n-\n-   INLINE B Has_Unknown_Discriminants (E Id)\n-      { return Flag72 (Id); }\n-\n-   INLINE B Has_Volatile_Components (E Id)\n-      { return Flag87 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Has_Xref_Entry (E Id)\n-      { return Flag182 (Implementation_Base_Type (Id)); }\n-\n-   INLINE E Hiding_Loop_Variable (E Id)\n-      { return Node8 (Id); }\n-\n-   INLINE E Homonym (E Id)\n-      { return Node4 (Id); }\n-\n-   INLINE B In_Package_Body (E Id)\n-      { return Flag48 (Id); }\n-\n-   INLINE B In_Private_Part (E Id)\n-      { return Flag45 (Id); }\n-\n-   INLINE B In_Use (E Id)\n-      { return Flag8 (Id); }\n-\n-   INLINE L Inner_Instances (E Id)\n-      { return Elist23 (Id); }\n-\n-   INLINE N Interface_Name (E Id)\n-      { return Node21 (Id); }\n-\n-   INLINE B Is_Abstract (E Id)\n-      { return Flag19 (Id); }\n-\n-   INLINE B Is_Access_Constant (E Id)\n-      { return Flag69 (Id); }\n-\n-   INLINE B Is_Aliased (E Id)\n-      { return Flag15 (Id); }\n-\n-   INLINE B Is_AST_Entry (E Id)\n-      { return Flag132 (Id); }\n-\n-   INLINE B Is_Asynchronous (E Id)\n-      { return Flag81 (Id); }\n-\n-   INLINE B Is_Atomic (E Id)\n-      { return Flag85 (Id); }\n-\n-   INLINE B Is_Bit_Packed_Array (E Id)\n-      { return Flag122 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Is_Called (E Id)\n-      { return Flag102 (Id); }\n-\n-   INLINE B Is_Character_Type (E Id)\n-      { return Flag63 (Id); }\n-\n-   INLINE B Is_Child_Unit (E Id)\n-      { return Flag73 (Id); }\n-\n-   INLINE B Is_Class_Wide_Equivalent_Type (E Id)\n-      { return Flag35 (Id); }\n-\n-   INLINE B Is_Compilation_Unit (E Id)\n-      { return Flag149 (Id); }\n-\n-   INLINE B Is_Completely_Hidden (E Id)\n-      { return Flag103 (Id); }\n-\n-   INLINE B Is_Constr_Subt_For_U_Nominal (E Id)\n-      { return Flag80 (Id); }\n-\n-   INLINE B Is_Constr_Subt_For_UN_Aliased (E Id)\n-      { return Flag141 (Id); }\n-\n-   INLINE B Is_Constrained (E Id)\n-      { return Flag12 (Id); }\n-\n-   INLINE B Is_Constructor (E Id)\n-      { return Flag76 (Id); }\n-\n-   INLINE B Is_Controlled (E Id)\n-      { return Flag42 (Base_Type (Id)); }\n-\n-   INLINE B Is_Controlling_Formal (E Id)\n-      { return Flag97 (Id); }\n-\n-   INLINE B Is_CPP_Class (E Id)\n-      { return Flag74 (Id); }\n-\n-   INLINE B Is_Discrim_SO_Function (E Id)\n-      { return Flag176 (Id); }\n-\n-   INLINE B Is_Dispatching_Operation (E Id)\n-      { return Flag6 (Id); }\n-\n-   INLINE B Is_Eliminated (E Id)\n-      { return Flag124 (Id); }\n-\n-   INLINE B Is_Entry_Formal (E Id)\n-      { return Flag52 (Id); }\n-\n-   INLINE B Is_Exported (E Id)\n-      { return Flag99 (Id); }\n-\n-   INLINE B Is_First_Subtype (E Id)\n-      { return Flag70 (Id); }\n-\n-   INLINE B Is_For_Access_Subtype (E Id)\n-      { return Flag118 (Id); }\n-\n-   INLINE B Is_Formal_Subprogram (E Id)\n-      { return Flag111 (Id); }\n-\n-   INLINE B Is_Frozen (E Id)\n-      { return Flag4 (Id); }\n-\n-   INLINE B Is_Generic_Actual_Type (E Id)\n-      { return Flag94 (Id); }\n-\n-   INLINE B Is_Generic_Instance (E Id)\n-      { return Flag130 (Id); }\n-\n-   INLINE B Is_Generic_Type (E Id)\n-      { return Flag13 (Id); }\n-\n-   INLINE B Is_Hidden (E Id)\n-      { return Flag57 (Id); }\n-\n-   INLINE B Is_Hidden_Open_Scope (E Id)\n-      { return Flag171 (Id); }\n-\n-   INLINE B Is_Immediately_Visible (E Id)\n-      { return Flag7 (Id); }\n-\n-   INLINE B Is_Imported (E Id)\n-      { return Flag24 (Id); }\n-\n-   INLINE B Is_Inlined (E Id)\n-      { return Flag11 (Id); }\n-\n-   INLINE B Is_Instantiated (E Id)\n-      { return Flag126 (Id); }\n-\n-   INLINE B Is_Internal (E Id)\n-      { return Flag17 (Id); }\n-\n-   INLINE B Is_Interrupt_Handler (E Id)\n-      { return Flag89 (Id); }\n-\n-   INLINE B Is_Intrinsic_Subprogram (E Id)\n-      { return Flag64 (Id); }\n-\n-   INLINE B Is_Itype (E Id)\n-      { return Flag91 (Id); }\n-\n-   INLINE B Is_Known_Non_Null (E Id)\n-      { return Flag37 (Id); }\n-\n-   INLINE B Is_Known_Valid (E Id)\n-      { return Flag170 (Id); }\n-\n-   INLINE B Is_Limited_Composite (E Id)\n-      { return Flag106 (Id); }\n-\n-   INLINE B Is_Limited_Record (E Id)\n-      { return Flag25 (Id); }\n-\n-   INLINE B Is_Machine_Code_Subprogram (E Id)\n-      { return Flag137 (Id); }\n-\n-   INLINE B Is_Non_Static_Subtype (E Id)\n-      { return Flag109 (Id); }\n-\n-   INLINE B Is_Null_Init_Proc (E Id)\n-      { return Flag178 (Id); }\n-\n-   INLINE B Is_Optional_Parameter (E Id)\n-      { return Flag134 (Id); }\n-\n-   INLINE B Is_Overriding_Operation (E Id)\n-      { return Flag39 (Id); }\n-\n-   INLINE B Is_Package_Body_Entity (E Id)\n-      { return Flag160 (Id); }\n-\n-   INLINE B Is_Packed (E Id)\n-      { return Flag51 (Implementation_Base_Type (Id)); }\n-\n-   INLINE B Is_Packed_Array_Type (E Id)\n-      { return Flag138 (Id); }\n-\n-   INLINE B Is_Potentially_Use_Visible (E Id)\n-      { return Flag9 (Id); }\n-\n-   INLINE B Is_Preelaborated (E Id)\n-      { return Flag59 (Id); }\n-\n-   INLINE B Is_Private_Composite (E Id)\n-      { return Flag107 (Id); }\n-\n-   INLINE B Is_Private_Descendant (E Id)\n-      { return Flag53 (Id); }\n-\n-   INLINE B Is_Psected (E Id)\n-      { return Flag153 (Id); }\n-\n-   INLINE B Is_Public (E Id)\n-      { return Flag10 (Id); }\n-\n-   INLINE B Is_Pure (E Id)\n-      { return Flag44 (Id); }\n-\n-   INLINE B Is_Remote_Call_Interface (E Id)\n-      { return Flag62 (Id); }\n-\n-   INLINE B Is_Remote_Types (E Id)\n-      { return Flag61 (Id); }\n-\n-   INLINE B Is_Renaming_Of_Object (E Id)\n-      { return Flag112 (Id); }\n-\n-   INLINE B Is_Shared_Passive (E Id)\n-      { return Flag60 (Id); }\n-\n-   INLINE B Is_Statically_Allocated (E Id)\n-      { return Flag28 (Id); }\n-\n-   INLINE B Is_Tag (E Id)\n-      { return Flag78 (Id); }\n-\n-   INLINE B Is_Tagged_Type (E Id)\n-      { return Flag55 (Id); }\n-\n-   INLINE B Is_Thread_Body (E Id)\n-      { return Flag77 (Id); }\n-\n-   INLINE B Is_True_Constant (E Id)\n-      { return Flag163 (Id); }\n-\n-   INLINE B Is_Unchecked_Union (E Id)\n-      { return Flag117 (Id); }\n-\n-   INLINE B Is_Unsigned_Type (E Id)\n-      { return Flag144 (Id); }\n-\n-   INLINE B Is_Valued_Procedure (E Id)\n-      { return Flag127 (Id); }\n-\n-   INLINE B Is_Visible_Child_Unit (E Id)\n-      { return Flag116 (Id); }\n-\n-   INLINE B Is_VMS_Exception (E Id)\n-      { return Flag133 (Id); }\n-\n-   INLINE B Kill_Elaboration_Checks (E Id)\n-      { return Flag32 (Id); }\n-\n-   INLINE B Kill_Range_Checks (E Id)\n-      { return Flag33 (Id); }\n-\n-   INLINE B Kill_Tag_Checks (E Id)\n-      { return Flag34 (Id); }\n-\n-   INLINE E Last_Entity (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE L Limited_Views (E Id)\n-      { return Elist23 (Id); }\n-\n-   INLINE E Lit_Indexes (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE E Lit_Strings (E Id)\n-      { return Node16 (Id); }\n-\n-   INLINE B Machine_Radix_10 (E Id)\n-      { return Flag84 (Id); }\n-\n-   INLINE E Master_Id (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE B Materialize_Entity (E Id)\n-      { return Flag168 (Id); }\n-\n-   INLINE M Mechanism (E Id)\n-      { return UI_To_Int (Uint8 (Id)); }\n-\n-   INLINE Uint Modulus (E Id)\n-      { return Uint17 (Base_Type (Id)); }\n-\n-   INLINE B Needs_Debug_Info (E Id)\n-      { return Flag147 (Id); }\n-\n-   INLINE B Needs_No_Actuals (E Id)\n-      { return Flag22 (Id); }\n-\n-   INLINE B Never_Set_In_Source (E Id)\n-      { return Flag115 (Id); }\n-\n-   INLINE E Next_Inlined_Subprogram (E Id)\n-      { return Node12 (Id); }\n-\n-   INLINE B No_Pool_Assigned (E Id)\n-      { return Flag131 (Root_Type (Id)); }\n-\n-   INLINE B No_Return (E Id)\n-      { return Flag113 (Id); }\n-\n-   INLINE B Non_Binary_Modulus (E Id)\n-      { return Flag58 (Base_Type (Id)); }\n-\n-   INLINE E Non_Limited_View (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE B Nonzero_Is_True (E Id)\n-      { return Flag162 (Base_Type (Id)); }\n-\n-   INLINE U Normalized_First_Bit (E Id)\n-      { return Uint8 (Id); }\n-\n-   INLINE U Normalized_Position (E Id)\n-      { return Uint14 (Id); }\n-\n-   INLINE U Normalized_Position_Max (E Id)\n-      { return Uint10 (Id); }\n-\n-   INLINE E Object_Ref (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE E Original_Array_Type (E Id)\n-      { return Node21 (Id); }\n-\n-   INLINE E Original_Record_Component (E Id)\n-      { return Node22 (Id); }\n-\n-   INLINE E Packed_Array_Type (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE E Parent_Subtype (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE L Primitive_Operations (E Id)\n-      { return Elist15 (Id); }\n-\n-   INLINE E Prival (E Id)\n-      { return Node17 (Id); }\n-\n-   INLINE L Privals_Chain (E Id)\n-      { return Elist23 (Id); }\n-\n-   INLINE L Private_Dependents (E Id)\n-      { return Elist18 (Id); }\n-\n-   INLINE N Private_View (E Id)\n-      { return Node22 (Id); }\n-\n-   INLINE E Protected_Body_Subprogram (E Id)\n-      { return Node11 (Id); }\n-\n-   INLINE E Protected_Formal (E Id)\n-      { return Node22 (Id); }\n-\n-   INLINE N Protected_Operation (E Id)\n-      { return Node23 (Id); }\n-\n-   INLINE B Reachable (E Id)\n-      { return Flag49 (Id); }\n-\n-   INLINE B Referenced (E Id)\n-      { return Flag156 (Id); }\n-\n-   INLINE B Referenced_As_LHS (E Id)\n-      { return Flag36 (Id); }\n-\n-   INLINE N Referenced_Object (E Id)\n-      { return Node10 (Id); }\n-\n-   INLINE N Register_Exception_Call (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE E Related_Array_Object (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE E Related_Instance (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE N Renamed_Entity (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE N Renamed_Object (E Id)\n-      { return Node18 (Id); }\n-\n-   INLINE U Renaming_Map (E Id)\n-      { return Uint9 (Id); }\n-\n-   INLINE B Return_Present (E Id)\n-      { return Flag54 (Id); }\n-\n-   INLINE B Returns_By_Ref (E Id)\n-      { return Flag90 (Id); }\n-\n-   INLINE B Reverse_Bit_Order (E Id)\n-      { return Flag164 (Base_Type (Id)); }\n-\n-   INLINE U RM_Size (E Id)\n-      { return Uint13 (Id); }\n-\n-   INLINE N Scalar_Range (E Id)\n-      { return Node20 (Id); }\n-\n-   INLINE U Scale_Value (E Id)\n-      { return Uint15 (Id); }\n-\n-   INLINE U Scope_Depth_Value (E Id)\n-      { return Uint22 (Id); }\n-\n-   INLINE B Sec_Stack_Needed_For_Return (E Id)\n-      { return Flag167 (Id); }\n-\n-   INLINE S Shadow_Entities (E Id)\n-      { return List14 (Id); }\n-\n-   INLINE E Shared_Var_Assign_Proc (E Id)\n-      { return Node22 (Id); }\n-\n-   INLINE E Shared_Var_Read_Proc (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE N Size_Check_Code (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE B Size_Depends_On_Discriminant (E Id)\n-      { return Flag177 (Id); }\n-\n-   INLINE B Size_Known_At_Compile_Time (E Id)\n-      { return Flag92 (Id); }\n-\n-   INLINE R Small_Value (E Id)\n-      { return Ureal21 (Id); }\n-\n-   INLINE E Spec_Entity (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE E Storage_Size_Variable (E Id)\n-      { return Node15 (Implementation_Base_Type (Id)); }\n-\n-   INLINE L Stored_Constraint (E Id)\n-      { return Elist23 (Id); }\n-\n-   INLINE B Strict_Alignment (E Id)\n-      { return Flag145 (Implementation_Base_Type (Id)); }\n-\n-   INLINE U String_Literal_Length (E Id)\n-      { return Uint16 (Id); }\n-\n-   INLINE N String_Literal_Low_Bound (E Id)\n-      { return Node15 (Id); }\n-\n-   INLINE B Suppress_Elaboration_Warnings (E Id)\n-      { return Flag148 (Id); }\n-\n-   INLINE B Suppress_Init_Proc (E Id)\n-      { return Flag105 (Base_Type (Id)); }\n-\n-   INLINE B Suppress_Style_Checks (E Id)\n-      { return Flag165 (Id); }\n-\n-   INLINE B Treat_As_Volatile (E Id)\n-      { return Flag41 (Id); }\n-\n-   INLINE E Underlying_Full_View (E Id)\n-      { return Node19 (Id); }\n-\n-   INLINE N Unset_Reference (E Id)\n-      { return Node16 (Id); }\n-\n-   INLINE B Uses_Sec_Stack (E Id)\n-      { return Flag95 (Id); }\n-\n-   INLINE B Vax_Float (E Id)\n-      { return Flag151 (Base_Type (Id)); }\n-\n-   INLINE B Warnings_Off (E Id)\n-      { return Flag96 (Id); }\n-\n-   INLINE B Is_Access_Type                      (E Id)\n-      { return IN (Ekind (Id), Access_Kind); }\n-\n-   INLINE B Is_Array_Type                       (E Id)\n-      { return IN (Ekind (Id), Array_Kind); }\n-\n-   INLINE B Is_Class_Wide_Type                  (E Id)\n-      { return IN (Ekind (Id), Class_Wide_Kind); }\n-\n-   INLINE B Is_Composite_Type                   (E Id)\n-      { return IN (Ekind (Id), Composite_Kind); }\n-\n-   INLINE B Is_Concurrent_Body                  (E Id)\n-      { return IN (Ekind (Id), Concurrent_Body_Kind); }\n-\n-   INLINE B Is_Concurrent_Record_Type           (E Id)\n-      { return Flag20 (Id); }\n-\n-   INLINE B Is_Concurrent_Type                  (E Id)\n-      { return IN (Ekind (Id), Concurrent_Kind); }\n-\n-   INLINE B Is_Decimal_Fixed_Point_Type         (E Id)\n-      { return IN (Ekind (Id), Decimal_Fixed_Point_Kind); }\n-\n-   INLINE B Is_Digits_Type                      (E Id)\n-      { return IN (Ekind (Id), Digits_Kind); }\n-\n-   INLINE B Is_Discrete_Or_Fixed_Point_Type     (E Id)\n-      { return IN (Ekind (Id), Discrete_Or_Fixed_Point_Kind); }\n-\n-   INLINE B Is_Discrete_Type                    (E Id)\n-      { return IN (Ekind (Id), Discrete_Kind); }\n-\n-   INLINE B Is_Elementary_Type                  (E Id)\n-      { return IN (Ekind (Id), Elementary_Kind); }\n-\n-   INLINE B Is_Entry                            (E Id)\n-      { return IN (Ekind (Id), Entry_Kind); }\n-\n-   INLINE B Is_Enumeration_Type                 (E Id)\n-      { return IN (Ekind (Id), Enumeration_Kind); }\n-\n-   INLINE B Is_Fixed_Point_Type                 (E Id)\n-      { return IN (Ekind (Id), Fixed_Point_Kind); }\n-\n-   INLINE B Is_Floating_Point_Type              (E Id)\n-      { return IN (Ekind (Id), Float_Kind); }\n-\n-   INLINE B Is_Formal                           (E Id)\n-      { return IN (Ekind (Id), Formal_Kind); }\n-\n-   INLINE B Is_Generic_Subprogram               (E Id)\n-      { return IN (Ekind (Id), Generic_Subprogram_Kind); }\n-\n-   INLINE B Is_Generic_Unit                     (E Id)\n-      { return IN (Ekind (Id), Generic_Unit_Kind); }\n-\n-   INLINE B Is_Incomplete_Or_Private_Type       (E Id)\n-      { return IN (Ekind (Id), Incomplete_Or_Private_Kind); }\n-\n-   INLINE B Is_Integer_Type                     (E Id)\n-      { return IN (Ekind (Id), Integer_Kind); }\n-\n-   INLINE B Is_Modular_Integer_Type             (E Id)\n-      { return IN (Ekind (Id), Modular_Integer_Kind); }\n-\n-   INLINE B Is_Named_Number                     (E Id)\n-      { return IN (Ekind (Id), Named_Kind); }\n-\n-   INLINE B Is_Numeric_Type                     (E Id)\n-      { return IN (Ekind (Id), Numeric_Kind); }\n-\n-   INLINE B Is_Object                           (E Id)\n-      { return IN (Ekind (Id), Object_Kind); }\n-\n-   INLINE B Is_Ordinary_Fixed_Point_Type        (E Id)\n-      { return IN (Ekind (Id), Ordinary_Fixed_Point_Kind); }\n-\n-   INLINE B Is_Overloadable                     (E Id)\n-      { return IN (Ekind (Id), Overloadable_Kind); }\n-\n-   INLINE B Is_Private_Type                     (E Id)\n-      { return IN (Ekind (Id), Private_Kind); }\n-\n-   INLINE B Is_Protected_Type                   (E Id)\n-      { return IN (Ekind (Id), Protected_Kind); }\n-\n-   INLINE B Is_Real_Type                        (E Id)\n-      { return IN (Ekind (Id), Real_Kind); }\n-\n-   INLINE B Is_Record_Type                      (E Id)\n-      { return IN (Ekind (Id), Record_Kind); }\n-\n-   INLINE B Is_Scalar_Type                      (E Id)\n-      { return IN (Ekind (Id), Scalar_Kind); }\n-\n-   INLINE B Is_Signed_Integer_Type              (E Id)\n-      { return IN (Ekind (Id), Signed_Integer_Kind); }\n-\n-   INLINE B Is_Subprogram                       (E Id)\n-      { return IN (Ekind (Id), Subprogram_Kind); }\n-\n-   INLINE B Is_Task_Type                        (E Id)\n-      { return IN (Ekind (Id), Task_Kind); }\n-\n-   INLINE B Is_Type                             (E Id)\n-      { return IN (Ekind (Id), Type_Kind); }\n-\n-   INLINE N Entry_Index_Type (E Id)\n-      { return Etype (Discrete_Subtype_Definition (Parent (Id))); }\n-\n-   INLINE Node_Id Next_Index (Node_Id Id)\n-      { return Next (Id); }\n-\n-   INLINE E Next_Literal (E Id)\n-      { return Next (Id); }\n-\n-   INLINE Formal_Kind Parameter_Mode (E Id)\n-      { return Ekind (Id); }\n-\n-/* End of einfo.h (C version of Einfo package specification) */"}, {"sha": "c8746ecdad7ab202303f887d8c99e3a641c1f8cf", "filename": "gcc/ada/nmake.ads", "status": "removed", "additions": 0, "deletions": 1348, "changes": 1348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Fnmake.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Fnmake.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnmake.ads?ref=0eb31ee3566c07d81e5dfeb500215e224b42169f", "patch": "@@ -1,1348 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                                N M A K E                                 --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Style_Checks (All_Checks);\n---  Turn off subprogram order checking, since the routines here are\n---  generated automatically in order.\n-\n-\n-with Nlists; use Nlists;\n-with Types;  use Types;\n-with Uintp;  use Uintp;\n-with Urealp; use Urealp;\n-\n-package Nmake is\n-\n---  This package contains a set of routines used to construct tree nodes\n---  using a functional style. There is one routine for each node type defined\n---  in Sinfo with the general interface:\n-\n---    function Make_xxx (Sloc : Source_Ptr,\n---                       Field_Name_1 : Field_Name_1_Type [:= default]\n---                       Field_Name_2 : Field_Name_2_Type [:= default]\n---                       ...)\n---    return Node_Id\n-\n---  Only syntactic fields are included (i.e. fields marked as \"-Sem\" or \"-Lib\"\n---  in the Sinfo spec are excluded). In addition, the following four syntactic\n---  fields are excluded:\n-\n---    Prev_Ids\n---    More_Ids\n---    Comes_From_Source\n---    Paren_Count\n-\n---  since they are very rarely set in expanded code. If they need to be set,\n---  to other than the default values (False, False, False, zero), then the\n---  appropriate Set_xxx procedures must be used on the returned value.\n-\n---  Default values are provided only for flag fields (where the default is\n---  False), and for optional fields. An optional field is one where the\n---  comment line describing the field contains the string \"(set to xxx if\".\n---  For such fields, a default value of xxx is provided.\"\n-\n---  Warning: since calls to Make_xxx routines are normal function calls, the\n---  arguments can be evaluated in any order. This means that at most one such\n---  argument can have side effects (e.g. be a call to a parse routine).\n-\n-   function Make_Unused_At_Start (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Unused_At_Start);\n-\n-   function Make_Unused_At_End (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Unused_At_End);\n-\n-   function Make_Identifier (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Identifier);\n-\n-   function Make_Integer_Literal (Sloc : Source_Ptr;\n-      Intval                       : Uint)\n-      return Node_Id;\n-   pragma Inline (Make_Integer_Literal);\n-\n-   function Make_Real_Literal (Sloc : Source_Ptr;\n-      Realval                      : Ureal)\n-      return Node_Id;\n-   pragma Inline (Make_Real_Literal);\n-\n-   function Make_Character_Literal (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Char_Literal_Value           : Char_Code)\n-      return Node_Id;\n-   pragma Inline (Make_Character_Literal);\n-\n-   function Make_String_Literal (Sloc : Source_Ptr;\n-      Strval                       : String_Id)\n-      return Node_Id;\n-   pragma Inline (Make_String_Literal);\n-\n-   function Make_Pragma (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Pragma_Argument_Associations : List_Id := No_List;\n-      Debug_Statement              : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Pragma);\n-\n-   function Make_Pragma_Argument_Association (Sloc : Source_Ptr;\n-      Chars                        : Name_Id := No_Name;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Pragma_Argument_Association);\n-\n-   function Make_Defining_Identifier (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Defining_Identifier);\n-\n-   function Make_Full_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Type_Definition              : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Full_Type_Declaration);\n-\n-   function Make_Subtype_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subtype_Declaration);\n-\n-   function Make_Subtype_Indication (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Constraint                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subtype_Indication);\n-\n-   function Make_Object_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Aliased_Present              : Boolean := False;\n-      Constant_Present             : Boolean := False;\n-      Object_Definition            : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Object_Declaration);\n-\n-   function Make_Number_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Number_Declaration);\n-\n-   function Make_Derived_Type_Definition (Sloc : Source_Ptr;\n-      Abstract_Present             : Boolean := False;\n-      Subtype_Indication           : Node_Id;\n-      Record_Extension_Part        : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Derived_Type_Definition);\n-\n-   function Make_Range_Constraint (Sloc : Source_Ptr;\n-      Range_Expression             : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Range_Constraint);\n-\n-   function Make_Range (Sloc : Source_Ptr;\n-      Low_Bound                    : Node_Id;\n-      High_Bound                   : Node_Id;\n-      Includes_Infinities          : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Range);\n-\n-   function Make_Enumeration_Type_Definition (Sloc : Source_Ptr;\n-      Literals                     : List_Id;\n-      End_Label                    : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Enumeration_Type_Definition);\n-\n-   function Make_Defining_Character_Literal (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Defining_Character_Literal);\n-\n-   function Make_Signed_Integer_Type_Definition (Sloc : Source_Ptr;\n-      Low_Bound                    : Node_Id;\n-      High_Bound                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Signed_Integer_Type_Definition);\n-\n-   function Make_Modular_Type_Definition (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Modular_Type_Definition);\n-\n-   function Make_Floating_Point_Definition (Sloc : Source_Ptr;\n-      Digits_Expression            : Node_Id;\n-      Real_Range_Specification     : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Floating_Point_Definition);\n-\n-   function Make_Real_Range_Specification (Sloc : Source_Ptr;\n-      Low_Bound                    : Node_Id;\n-      High_Bound                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Real_Range_Specification);\n-\n-   function Make_Ordinary_Fixed_Point_Definition (Sloc : Source_Ptr;\n-      Delta_Expression             : Node_Id;\n-      Real_Range_Specification     : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Ordinary_Fixed_Point_Definition);\n-\n-   function Make_Decimal_Fixed_Point_Definition (Sloc : Source_Ptr;\n-      Delta_Expression             : Node_Id;\n-      Digits_Expression            : Node_Id;\n-      Real_Range_Specification     : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Decimal_Fixed_Point_Definition);\n-\n-   function Make_Digits_Constraint (Sloc : Source_Ptr;\n-      Digits_Expression            : Node_Id;\n-      Range_Constraint             : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Digits_Constraint);\n-\n-   function Make_Unconstrained_Array_Definition (Sloc : Source_Ptr;\n-      Subtype_Marks                : List_Id;\n-      Aliased_Present              : Boolean := False;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Unconstrained_Array_Definition);\n-\n-   function Make_Constrained_Array_Definition (Sloc : Source_Ptr;\n-      Discrete_Subtype_Definitions : List_Id;\n-      Aliased_Present              : Boolean := False;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Constrained_Array_Definition);\n-\n-   function Make_Discriminant_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Type            : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Discriminant_Specification);\n-\n-   function Make_Index_Or_Discriminant_Constraint (Sloc : Source_Ptr;\n-      Constraints                  : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Index_Or_Discriminant_Constraint);\n-\n-   function Make_Discriminant_Association (Sloc : Source_Ptr;\n-      Selector_Names               : List_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Discriminant_Association);\n-\n-   function Make_Record_Definition (Sloc : Source_Ptr;\n-      End_Label                    : Node_Id := Empty;\n-      Abstract_Present             : Boolean := False;\n-      Tagged_Present               : Boolean := False;\n-      Limited_Present              : Boolean := False;\n-      Component_List               : Node_Id;\n-      Null_Present                 : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Record_Definition);\n-\n-   function Make_Component_List (Sloc : Source_Ptr;\n-      Component_Items              : List_Id;\n-      Variant_Part                 : Node_Id := Empty;\n-      Null_Present                 : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Component_List);\n-\n-   function Make_Component_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Aliased_Present              : Boolean := False;\n-      Subtype_Indication           : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Component_Declaration);\n-\n-   function Make_Variant_Part (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Variants                     : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Variant_Part);\n-\n-   function Make_Variant (Sloc : Source_Ptr;\n-      Discrete_Choices             : List_Id;\n-      Component_List               : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Variant);\n-\n-   function Make_Others_Choice (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Others_Choice);\n-\n-   function Make_Access_To_Object_Definition (Sloc : Source_Ptr;\n-      All_Present                  : Boolean := False;\n-      Subtype_Indication           : Node_Id;\n-      Constant_Present             : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Access_To_Object_Definition);\n-\n-   function Make_Access_Function_Definition (Sloc : Source_Ptr;\n-      Protected_Present            : Boolean := False;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Subtype_Mark                 : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Access_Function_Definition);\n-\n-   function Make_Access_Procedure_Definition (Sloc : Source_Ptr;\n-      Protected_Present            : Boolean := False;\n-      Parameter_Specifications     : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Access_Procedure_Definition);\n-\n-   function Make_Access_Definition (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Access_Definition);\n-\n-   function Make_Incomplete_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Incomplete_Type_Declaration);\n-\n-   function Make_Explicit_Dereference (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Explicit_Dereference);\n-\n-   function Make_Indexed_Component (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Expressions                  : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Indexed_Component);\n-\n-   function Make_Slice (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Discrete_Range               : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Slice);\n-\n-   function Make_Selected_Component (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Selector_Name                : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Selected_Component);\n-\n-   function Make_Attribute_Reference (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Attribute_Name               : Name_Id;\n-      Expressions                  : List_Id := No_List;\n-      Must_Be_Byte_Aligned         : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Attribute_Reference);\n-\n-   function Make_Aggregate (Sloc : Source_Ptr;\n-      Expressions                  : List_Id := No_List;\n-      Component_Associations       : List_Id := No_List;\n-      Null_Record_Present          : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Aggregate);\n-\n-   function Make_Component_Association (Sloc : Source_Ptr;\n-      Choices                      : List_Id;\n-      Expression                   : Node_Id;\n-      Box_Present                  : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Component_Association);\n-\n-   function Make_Extension_Aggregate (Sloc : Source_Ptr;\n-      Ancestor_Part                : Node_Id;\n-      Expressions                  : List_Id := No_List;\n-      Component_Associations       : List_Id := No_List;\n-      Null_Record_Present          : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Extension_Aggregate);\n-\n-   function Make_Null (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Null);\n-\n-   function Make_And_Then (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_And_Then);\n-\n-   function Make_Or_Else (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Or_Else);\n-\n-   function Make_In (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_In);\n-\n-   function Make_Not_In (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Not_In);\n-\n-   function Make_Op_And (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_And);\n-\n-   function Make_Op_Or (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Or);\n-\n-   function Make_Op_Xor (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Xor);\n-\n-   function Make_Op_Eq (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Eq);\n-\n-   function Make_Op_Ne (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Ne);\n-\n-   function Make_Op_Lt (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Lt);\n-\n-   function Make_Op_Le (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Le);\n-\n-   function Make_Op_Gt (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Gt);\n-\n-   function Make_Op_Ge (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Ge);\n-\n-   function Make_Op_Add (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Add);\n-\n-   function Make_Op_Subtract (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Subtract);\n-\n-   function Make_Op_Concat (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Concat);\n-\n-   function Make_Op_Multiply (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Multiply);\n-\n-   function Make_Op_Divide (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Divide);\n-\n-   function Make_Op_Mod (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Mod);\n-\n-   function Make_Op_Rem (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Rem);\n-\n-   function Make_Op_Expon (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Expon);\n-\n-   function Make_Op_Plus (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Plus);\n-\n-   function Make_Op_Minus (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Minus);\n-\n-   function Make_Op_Abs (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Abs);\n-\n-   function Make_Op_Not (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Not);\n-\n-   function Make_Type_Conversion (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Type_Conversion);\n-\n-   function Make_Qualified_Expression (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Qualified_Expression);\n-\n-   function Make_Allocator (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Allocator);\n-\n-   function Make_Null_Statement (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Null_Statement);\n-\n-   function Make_Label (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Label);\n-\n-   function Make_Assignment_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Assignment_Statement);\n-\n-   function Make_If_Statement (Sloc : Source_Ptr;\n-      Condition                    : Node_Id;\n-      Then_Statements              : List_Id;\n-      Elsif_Parts                  : List_Id := No_List;\n-      Else_Statements              : List_Id := No_List;\n-      End_Span                     : Uint := No_Uint)\n-      return Node_Id;\n-   pragma Inline (Make_If_Statement);\n-\n-   function Make_Elsif_Part (Sloc : Source_Ptr;\n-      Condition                    : Node_Id;\n-      Then_Statements              : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Elsif_Part);\n-\n-   function Make_Case_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id;\n-      Alternatives                 : List_Id;\n-      End_Span                     : Uint := No_Uint)\n-      return Node_Id;\n-   pragma Inline (Make_Case_Statement);\n-\n-   function Make_Case_Statement_Alternative (Sloc : Source_Ptr;\n-      Discrete_Choices             : List_Id;\n-      Statements                   : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Case_Statement_Alternative);\n-\n-   function Make_Loop_Statement (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id := Empty;\n-      Iteration_Scheme             : Node_Id := Empty;\n-      Statements                   : List_Id;\n-      End_Label                    : Node_Id;\n-      Has_Created_Identifier       : Boolean := False;\n-      Is_Null_Loop                 : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Loop_Statement);\n-\n-   function Make_Iteration_Scheme (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Loop_Parameter_Specification : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Iteration_Scheme);\n-\n-   function Make_Loop_Parameter_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Reverse_Present              : Boolean := False;\n-      Discrete_Subtype_Definition  : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Loop_Parameter_Specification);\n-\n-   function Make_Block_Statement (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id := Empty;\n-      Declarations                 : List_Id := No_List;\n-      Handled_Statement_Sequence   : Node_Id;\n-      Has_Created_Identifier       : Boolean := False;\n-      Is_Task_Allocation_Block     : Boolean := False;\n-      Is_Asynchronous_Call_Block   : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Block_Statement);\n-\n-   function Make_Exit_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id := Empty;\n-      Condition                    : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Exit_Statement);\n-\n-   function Make_Goto_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Goto_Statement);\n-\n-   function Make_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subprogram_Declaration);\n-\n-   function Make_Abstract_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Abstract_Subprogram_Declaration);\n-\n-   function Make_Function_Specification (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Subtype_Mark                 : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Function_Specification);\n-\n-   function Make_Procedure_Specification (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Parameter_Specifications     : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Procedure_Specification);\n-\n-   function Make_Designator (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Identifier                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Designator);\n-\n-   function Make_Defining_Program_Unit_Name (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Defining_Program_Unit_Name);\n-\n-   function Make_Operator_Symbol (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Strval                       : String_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Operator_Symbol);\n-\n-   function Make_Defining_Operator_Symbol (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Defining_Operator_Symbol);\n-\n-   function Make_Parameter_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      In_Present                   : Boolean := False;\n-      Out_Present                  : Boolean := False;\n-      Parameter_Type               : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Parameter_Specification);\n-\n-   function Make_Subprogram_Body (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id;\n-      Bad_Is_Detected              : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Subprogram_Body);\n-\n-   function Make_Procedure_Call_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Parameter_Associations       : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Procedure_Call_Statement);\n-\n-   function Make_Function_Call (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Parameter_Associations       : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Function_Call);\n-\n-   function Make_Parameter_Association (Sloc : Source_Ptr;\n-      Selector_Name                : Node_Id;\n-      Explicit_Actual_Parameter    : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Parameter_Association);\n-\n-   function Make_Return_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Return_Statement);\n-\n-   function Make_Package_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Package_Declaration);\n-\n-   function Make_Package_Specification (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Visible_Declarations         : List_Id;\n-      Private_Declarations         : List_Id := No_List;\n-      End_Label                    : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Package_Specification);\n-\n-   function Make_Package_Body (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Package_Body);\n-\n-   function Make_Private_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False;\n-      Abstract_Present             : Boolean := False;\n-      Tagged_Present               : Boolean := False;\n-      Limited_Present              : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Private_Type_Declaration);\n-\n-   function Make_Private_Extension_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False;\n-      Abstract_Present             : Boolean := False;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Private_Extension_Declaration);\n-\n-   function Make_Use_Package_Clause (Sloc : Source_Ptr;\n-      Names                        : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Use_Package_Clause);\n-\n-   function Make_Use_Type_Clause (Sloc : Source_Ptr;\n-      Subtype_Marks                : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Use_Type_Clause);\n-\n-   function Make_Object_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Subtype_Mark                 : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Object_Renaming_Declaration);\n-\n-   function Make_Exception_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Exception_Renaming_Declaration);\n-\n-   function Make_Package_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Package_Renaming_Declaration);\n-\n-   function Make_Subprogram_Renaming_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subprogram_Renaming_Declaration);\n-\n-   function Make_Generic_Package_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Generic_Package_Renaming_Declaration);\n-\n-   function Make_Generic_Procedure_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Generic_Procedure_Renaming_Declaration);\n-\n-   function Make_Generic_Function_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Generic_Function_Renaming_Declaration);\n-\n-   function Make_Task_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Task_Definition              : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Task_Type_Declaration);\n-\n-   function Make_Single_Task_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Task_Definition              : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Single_Task_Declaration);\n-\n-   function Make_Task_Definition (Sloc : Source_Ptr;\n-      Visible_Declarations         : List_Id;\n-      Private_Declarations         : List_Id := No_List;\n-      End_Label                    : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Task_Definition);\n-\n-   function Make_Task_Body (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Task_Body);\n-\n-   function Make_Protected_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Protected_Definition         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Protected_Type_Declaration);\n-\n-   function Make_Single_Protected_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Protected_Definition         : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Single_Protected_Declaration);\n-\n-   function Make_Protected_Definition (Sloc : Source_Ptr;\n-      Visible_Declarations         : List_Id;\n-      Private_Declarations         : List_Id := No_List;\n-      End_Label                    : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Protected_Definition);\n-\n-   function Make_Protected_Body (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Declarations                 : List_Id;\n-      End_Label                    : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Protected_Body);\n-\n-   function Make_Entry_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discrete_Subtype_Definition  : Node_Id := Empty;\n-      Parameter_Specifications     : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Entry_Declaration);\n-\n-   function Make_Accept_Statement (Sloc : Source_Ptr;\n-      Entry_Direct_Name            : Node_Id;\n-      Entry_Index                  : Node_Id := Empty;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Handled_Statement_Sequence   : Node_Id;\n-      Declarations                 : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Accept_Statement);\n-\n-   function Make_Entry_Body (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Entry_Body_Formal_Part       : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Entry_Body);\n-\n-   function Make_Entry_Body_Formal_Part (Sloc : Source_Ptr;\n-      Entry_Index_Specification    : Node_Id := Empty;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Condition                    : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Entry_Body_Formal_Part);\n-\n-   function Make_Entry_Index_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discrete_Subtype_Definition  : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Entry_Index_Specification);\n-\n-   function Make_Entry_Call_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Parameter_Associations       : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Entry_Call_Statement);\n-\n-   function Make_Requeue_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Abort_Present                : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Requeue_Statement);\n-\n-   function Make_Delay_Until_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Delay_Until_Statement);\n-\n-   function Make_Delay_Relative_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Delay_Relative_Statement);\n-\n-   function Make_Selective_Accept (Sloc : Source_Ptr;\n-      Select_Alternatives          : List_Id;\n-      Else_Statements              : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Selective_Accept);\n-\n-   function Make_Accept_Alternative (Sloc : Source_Ptr;\n-      Accept_Statement             : Node_Id;\n-      Condition                    : Node_Id := Empty;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Accept_Alternative);\n-\n-   function Make_Delay_Alternative (Sloc : Source_Ptr;\n-      Delay_Statement              : Node_Id;\n-      Condition                    : Node_Id := Empty;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Delay_Alternative);\n-\n-   function Make_Terminate_Alternative (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Pragmas_Before               : List_Id := No_List;\n-      Pragmas_After                : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Terminate_Alternative);\n-\n-   function Make_Timed_Entry_Call (Sloc : Source_Ptr;\n-      Entry_Call_Alternative       : Node_Id;\n-      Delay_Alternative            : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Timed_Entry_Call);\n-\n-   function Make_Entry_Call_Alternative (Sloc : Source_Ptr;\n-      Entry_Call_Statement         : Node_Id;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Entry_Call_Alternative);\n-\n-   function Make_Conditional_Entry_Call (Sloc : Source_Ptr;\n-      Entry_Call_Alternative       : Node_Id;\n-      Else_Statements              : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Conditional_Entry_Call);\n-\n-   function Make_Asynchronous_Select (Sloc : Source_Ptr;\n-      Triggering_Alternative       : Node_Id;\n-      Abortable_Part               : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Asynchronous_Select);\n-\n-   function Make_Triggering_Alternative (Sloc : Source_Ptr;\n-      Triggering_Statement         : Node_Id;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Triggering_Alternative);\n-\n-   function Make_Abortable_Part (Sloc : Source_Ptr;\n-      Statements                   : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Abortable_Part);\n-\n-   function Make_Abort_Statement (Sloc : Source_Ptr;\n-      Names                        : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Abort_Statement);\n-\n-   function Make_Compilation_Unit (Sloc : Source_Ptr;\n-      Context_Items                : List_Id;\n-      Private_Present              : Boolean := False;\n-      Unit                         : Node_Id;\n-      Aux_Decls_Node               : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Compilation_Unit);\n-\n-   function Make_Compilation_Unit_Aux (Sloc : Source_Ptr;\n-      Declarations                 : List_Id := No_List;\n-      Actions                      : List_Id := No_List;\n-      Pragmas_After                : List_Id := No_List;\n-      Config_Pragmas               : List_Id := Empty_List)\n-      return Node_Id;\n-   pragma Inline (Make_Compilation_Unit_Aux);\n-\n-   function Make_With_Clause (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      First_Name                   : Boolean := True;\n-      Last_Name                    : Boolean := True;\n-      Limited_Present              : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_With_Clause);\n-\n-   function Make_With_Type_Clause (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Tagged_Present               : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_With_Type_Clause);\n-\n-   function Make_Subprogram_Body_Stub (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subprogram_Body_Stub);\n-\n-   function Make_Package_Body_Stub (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Package_Body_Stub);\n-\n-   function Make_Task_Body_Stub (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Task_Body_Stub);\n-\n-   function Make_Protected_Body_Stub (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Protected_Body_Stub);\n-\n-   function Make_Subunit (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Proper_Body                  : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subunit);\n-\n-   function Make_Exception_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Exception_Declaration);\n-\n-   function Make_Handled_Sequence_Of_Statements (Sloc : Source_Ptr;\n-      Statements                   : List_Id;\n-      End_Label                    : Node_Id := Empty;\n-      Exception_Handlers           : List_Id := No_List;\n-      At_End_Proc                  : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Handled_Sequence_Of_Statements);\n-\n-   function Make_Exception_Handler (Sloc : Source_Ptr;\n-      Choice_Parameter             : Node_Id := Empty;\n-      Exception_Choices            : List_Id;\n-      Statements                   : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Exception_Handler);\n-\n-   function Make_Raise_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Raise_Statement);\n-\n-   function Make_Generic_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Generic_Formal_Declarations  : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Generic_Subprogram_Declaration);\n-\n-   function Make_Generic_Package_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Generic_Formal_Declarations  : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Generic_Package_Declaration);\n-\n-   function Make_Package_Instantiation (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Package_Instantiation);\n-\n-   function Make_Procedure_Instantiation (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Procedure_Instantiation);\n-\n-   function Make_Function_Instantiation (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Function_Instantiation);\n-\n-   function Make_Generic_Association (Sloc : Source_Ptr;\n-      Selector_Name                : Node_Id := Empty;\n-      Explicit_Generic_Actual_Parameter : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Generic_Association);\n-\n-   function Make_Formal_Object_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      In_Present                   : Boolean := False;\n-      Out_Present                  : Boolean := False;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Object_Declaration);\n-\n-   function Make_Formal_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Formal_Type_Definition       : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Type_Declaration);\n-\n-   function Make_Formal_Private_Type_Definition (Sloc : Source_Ptr;\n-      Abstract_Present             : Boolean := False;\n-      Tagged_Present               : Boolean := False;\n-      Limited_Present              : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Private_Type_Definition);\n-\n-   function Make_Formal_Derived_Type_Definition (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Private_Present              : Boolean := False;\n-      Abstract_Present             : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Derived_Type_Definition);\n-\n-   function Make_Formal_Discrete_Type_Definition (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Discrete_Type_Definition);\n-\n-   function Make_Formal_Signed_Integer_Type_Definition (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Signed_Integer_Type_Definition);\n-\n-   function Make_Formal_Modular_Type_Definition (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Modular_Type_Definition);\n-\n-   function Make_Formal_Floating_Point_Definition (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Floating_Point_Definition);\n-\n-   function Make_Formal_Ordinary_Fixed_Point_Definition (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Ordinary_Fixed_Point_Definition);\n-\n-   function Make_Formal_Decimal_Fixed_Point_Definition (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Decimal_Fixed_Point_Definition);\n-\n-   function Make_Formal_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Default_Name                 : Node_Id := Empty;\n-      Box_Present                  : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Subprogram_Declaration);\n-\n-   function Make_Formal_Package_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List;\n-      Box_Present                  : Boolean := False)\n-      return Node_Id;\n-   pragma Inline (Make_Formal_Package_Declaration);\n-\n-   function Make_Attribute_Definition_Clause (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Chars                        : Name_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Attribute_Definition_Clause);\n-\n-   function Make_Enumeration_Representation_Clause (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id;\n-      Array_Aggregate              : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Enumeration_Representation_Clause);\n-\n-   function Make_Record_Representation_Clause (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id;\n-      Mod_Clause                   : Node_Id := Empty;\n-      Component_Clauses            : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Record_Representation_Clause);\n-\n-   function Make_Component_Clause (Sloc : Source_Ptr;\n-      Component_Name               : Node_Id;\n-      Position                     : Node_Id;\n-      First_Bit                    : Node_Id;\n-      Last_Bit                     : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Component_Clause);\n-\n-   function Make_Code_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Code_Statement);\n-\n-   function Make_Op_Rotate_Left (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Rotate_Left);\n-\n-   function Make_Op_Rotate_Right (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Rotate_Right);\n-\n-   function Make_Op_Shift_Left (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Shift_Left);\n-\n-   function Make_Op_Shift_Right_Arithmetic (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Shift_Right_Arithmetic);\n-\n-   function Make_Op_Shift_Right (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Op_Shift_Right);\n-\n-   function Make_Delta_Constraint (Sloc : Source_Ptr;\n-      Delta_Expression             : Node_Id;\n-      Range_Constraint             : Node_Id := Empty)\n-      return Node_Id;\n-   pragma Inline (Make_Delta_Constraint);\n-\n-   function Make_At_Clause (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_At_Clause);\n-\n-   function Make_Mod_Clause (Sloc : Source_Ptr;\n-      Expression                   : Node_Id;\n-      Pragmas_Before               : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Mod_Clause);\n-\n-   function Make_Conditional_Expression (Sloc : Source_Ptr;\n-      Expressions                  : List_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Conditional_Expression);\n-\n-   function Make_Expanded_Name (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Prefix                       : Node_Id;\n-      Selector_Name                : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Expanded_Name);\n-\n-   function Make_Free_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Free_Statement);\n-\n-   function Make_Freeze_Entity (Sloc : Source_Ptr;\n-      Actions                      : List_Id := No_List)\n-      return Node_Id;\n-   pragma Inline (Make_Freeze_Entity);\n-\n-   function Make_Implicit_Label_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Implicit_Label_Declaration);\n-\n-   function Make_Itype_Reference (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Itype_Reference);\n-\n-   function Make_Raise_Constraint_Error (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Reason                       : Uint)\n-      return Node_Id;\n-   pragma Inline (Make_Raise_Constraint_Error);\n-\n-   function Make_Raise_Program_Error (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Reason                       : Uint)\n-      return Node_Id;\n-   pragma Inline (Make_Raise_Program_Error);\n-\n-   function Make_Raise_Storage_Error (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Reason                       : Uint)\n-      return Node_Id;\n-   pragma Inline (Make_Raise_Storage_Error);\n-\n-   function Make_Reference (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Reference);\n-\n-   function Make_Subprogram_Info (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Subprogram_Info);\n-\n-   function Make_Unchecked_Expression (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Unchecked_Expression);\n-\n-   function Make_Unchecked_Type_Conversion (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id;\n-   pragma Inline (Make_Unchecked_Type_Conversion);\n-\n-   function Make_Validate_Unchecked_Conversion (Sloc : Source_Ptr)\n-      return Node_Id;\n-   pragma Inline (Make_Validate_Unchecked_Conversion);\n-\n-end Nmake;"}, {"sha": "b78057553624cbb2e5d126301aea06481a2d44a3", "filename": "gcc/ada/sinfo.h", "status": "removed", "additions": 0, "deletions": 842, "changes": 842, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Fsinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Fsinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.h?ref=0eb31ee3566c07d81e5dfeb500215e224b42169f", "patch": "@@ -1,842 +0,0 @@\n-/*--------------------------------------------------------------------------*/\n-/*                                                                          */\n-/*                         GNAT COMPILER COMPONENTS                         */\n-/*                                                                          */\n-/*                                S I N F O                                 */\n-/*                                                                          */\n-/*                              C Header File                               */\n-/*                                                                          */\n-/*          Copyright (C) 1992-2003, Free Software Foundation, Inc.         */\n-/*                                                                          */\n-/* GNAT is free software;  you can  redistribute it  and/or modify it under */\n-/* terms of the  GNU General Public License as published  by the Free Soft- */\n-/* ware  Foundation;  either version 2,  or (at your option) any later ver- */\n-/* sion.  GNAT is distributed in the hope that it will be useful, but WITH- */\n-/* OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY */\n-/* or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License */\n-/* for  more details.  You should have  received  a copy of the GNU General */\n-/* Public License  distributed with GNAT;  see file COPYING.  If not, write */\n-/* to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, */\n-/* MA 02111-1307, USA.                                                      */\n-/*                                                                          */\n-/* As a special exception,  if other files  instantiate  generics from this */\n-/* unit, or you link  this unit with other files  to produce an executable, */\n-/* this  unit  does not  by itself cause  the resulting  executable  to  be */\n-/* covered  by the  GNU  General  Public  License.  This exception does not */\n-/* however invalidate  any other reasons why  the executable file  might be */\n-/* covered by the  GNU Public License.                                      */\n-/*                                                                          */\n-/* GNAT was originally developed  by the GNAT team at  New York University. */\n-/* Extensive contributions were provided by Ada Core Technologies Inc.      */\n-/*                                                                          */\n-/*--------------------------------------------------------------------------*/\n-\n-      #define N_Unused_At_Start 0\n-      #define N_At_Clause 1\n-      #define N_Component_Clause 2\n-      #define N_Enumeration_Representation_Clause 3\n-      #define N_Mod_Clause 4\n-      #define N_Record_Representation_Clause 5\n-      #define N_Attribute_Definition_Clause 6\n-      #define N_Empty 7\n-      #define N_Pragma 8\n-      #define N_Pragma_Argument_Association 9\n-      #define N_Error 10\n-      #define N_Defining_Character_Literal 11\n-      #define N_Defining_Identifier 12\n-      #define N_Defining_Operator_Symbol 13\n-      #define N_Expanded_Name 14\n-      #define N_Identifier 15\n-      #define N_Operator_Symbol 16\n-      #define N_Character_Literal 17\n-      #define N_Op_Add 18\n-      #define N_Op_Concat 19\n-      #define N_Op_Expon 20\n-      #define N_Op_Subtract 21\n-      #define N_Op_Divide 22\n-      #define N_Op_Mod 23\n-      #define N_Op_Multiply 24\n-      #define N_Op_Rem 25\n-      #define N_Op_And 26\n-      #define N_Op_Eq 27\n-      #define N_Op_Ge 28\n-      #define N_Op_Gt 29\n-      #define N_Op_Le 30\n-      #define N_Op_Lt 31\n-      #define N_Op_Ne 32\n-      #define N_Op_Or 33\n-      #define N_Op_Xor 34\n-      #define N_Op_Rotate_Left 35\n-      #define N_Op_Rotate_Right 36\n-      #define N_Op_Shift_Left 37\n-      #define N_Op_Shift_Right 38\n-      #define N_Op_Shift_Right_Arithmetic 39\n-      #define N_Op_Abs 40\n-      #define N_Op_Minus 41\n-      #define N_Op_Not 42\n-      #define N_Op_Plus 43\n-      #define N_Attribute_Reference 44\n-      #define N_And_Then 45\n-      #define N_Conditional_Expression 46\n-      #define N_Explicit_Dereference 47\n-      #define N_Function_Call 48\n-      #define N_In 49\n-      #define N_Indexed_Component 50\n-      #define N_Integer_Literal 51\n-      #define N_Not_In 52\n-      #define N_Null 53\n-      #define N_Or_Else 54\n-      #define N_Procedure_Call_Statement 55\n-      #define N_Qualified_Expression 56\n-      #define N_Raise_Constraint_Error 57\n-      #define N_Raise_Program_Error 58\n-      #define N_Raise_Storage_Error 59\n-      #define N_Aggregate 60\n-      #define N_Allocator 61\n-      #define N_Extension_Aggregate 62\n-      #define N_Range 63\n-      #define N_Real_Literal 64\n-      #define N_Reference 65\n-      #define N_Selected_Component 66\n-      #define N_Slice 67\n-      #define N_String_Literal 68\n-      #define N_Subprogram_Info 69\n-      #define N_Type_Conversion 70\n-      #define N_Unchecked_Expression 71\n-      #define N_Unchecked_Type_Conversion 72\n-      #define N_Subtype_Indication 73\n-      #define N_Component_Declaration 74\n-      #define N_Entry_Declaration 75\n-      #define N_Formal_Object_Declaration 76\n-      #define N_Formal_Type_Declaration 77\n-      #define N_Full_Type_Declaration 78\n-      #define N_Incomplete_Type_Declaration 79\n-      #define N_Loop_Parameter_Specification 80\n-      #define N_Object_Declaration 81\n-      #define N_Protected_Type_Declaration 82\n-      #define N_Private_Extension_Declaration 83\n-      #define N_Private_Type_Declaration 84\n-      #define N_Subtype_Declaration 85\n-      #define N_Function_Specification 86\n-      #define N_Procedure_Specification 87\n-      #define N_Entry_Index_Specification 88\n-      #define N_Freeze_Entity 89\n-      #define N_Access_Function_Definition 90\n-      #define N_Access_Procedure_Definition 91\n-      #define N_Task_Type_Declaration 92\n-      #define N_Package_Body_Stub 93\n-      #define N_Protected_Body_Stub 94\n-      #define N_Subprogram_Body_Stub 95\n-      #define N_Task_Body_Stub 96\n-      #define N_Function_Instantiation 97\n-      #define N_Package_Instantiation 98\n-      #define N_Procedure_Instantiation 99\n-      #define N_Package_Body 100\n-      #define N_Subprogram_Body 101\n-      #define N_Protected_Body 102\n-      #define N_Task_Body 103\n-      #define N_Implicit_Label_Declaration 104\n-      #define N_Package_Declaration 105\n-      #define N_Single_Task_Declaration 106\n-      #define N_Subprogram_Declaration 107\n-      #define N_Use_Package_Clause 108\n-      #define N_Generic_Package_Declaration 109\n-      #define N_Generic_Subprogram_Declaration 110\n-      #define N_Constrained_Array_Definition 111\n-      #define N_Unconstrained_Array_Definition 112\n-      #define N_Exception_Renaming_Declaration 113\n-      #define N_Object_Renaming_Declaration 114\n-      #define N_Package_Renaming_Declaration 115\n-      #define N_Subprogram_Renaming_Declaration 116\n-      #define N_Generic_Function_Renaming_Declaration 117\n-      #define N_Generic_Package_Renaming_Declaration 118\n-      #define N_Generic_Procedure_Renaming_Declaration 119\n-      #define N_Abort_Statement 120\n-      #define N_Accept_Statement 121\n-      #define N_Assignment_Statement 122\n-      #define N_Asynchronous_Select 123\n-      #define N_Block_Statement 124\n-      #define N_Case_Statement 125\n-      #define N_Code_Statement 126\n-      #define N_Conditional_Entry_Call 127\n-      #define N_Delay_Relative_Statement 128\n-      #define N_Delay_Until_Statement 129\n-      #define N_Entry_Call_Statement 130\n-      #define N_Free_Statement 131\n-      #define N_Goto_Statement 132\n-      #define N_Loop_Statement 133\n-      #define N_Null_Statement 134\n-      #define N_Raise_Statement 135\n-      #define N_Requeue_Statement 136\n-      #define N_Return_Statement 137\n-      #define N_Selective_Accept 138\n-      #define N_Timed_Entry_Call 139\n-      #define N_Exit_Statement 140\n-      #define N_If_Statement 141\n-      #define N_Accept_Alternative 142\n-      #define N_Delay_Alternative 143\n-      #define N_Elsif_Part 144\n-      #define N_Entry_Body_Formal_Part 145\n-      #define N_Iteration_Scheme 146\n-      #define N_Terminate_Alternative 147\n-      #define N_Abortable_Part 148\n-      #define N_Abstract_Subprogram_Declaration 149\n-      #define N_Access_Definition 150\n-      #define N_Access_To_Object_Definition 151\n-      #define N_Case_Statement_Alternative 152\n-      #define N_Compilation_Unit 153\n-      #define N_Compilation_Unit_Aux 154\n-      #define N_Component_Association 155\n-      #define N_Component_List 156\n-      #define N_Derived_Type_Definition 157\n-      #define N_Decimal_Fixed_Point_Definition 158\n-      #define N_Defining_Program_Unit_Name 159\n-      #define N_Delta_Constraint 160\n-      #define N_Designator 161\n-      #define N_Digits_Constraint 162\n-      #define N_Discriminant_Association 163\n-      #define N_Discriminant_Specification 164\n-      #define N_Enumeration_Type_Definition 165\n-      #define N_Entry_Body 166\n-      #define N_Entry_Call_Alternative 167\n-      #define N_Exception_Declaration 168\n-      #define N_Exception_Handler 169\n-      #define N_Floating_Point_Definition 170\n-      #define N_Formal_Decimal_Fixed_Point_Definition 171\n-      #define N_Formal_Derived_Type_Definition 172\n-      #define N_Formal_Discrete_Type_Definition 173\n-      #define N_Formal_Floating_Point_Definition 174\n-      #define N_Formal_Modular_Type_Definition 175\n-      #define N_Formal_Ordinary_Fixed_Point_Definition 176\n-      #define N_Formal_Package_Declaration 177\n-      #define N_Formal_Private_Type_Definition 178\n-      #define N_Formal_Signed_Integer_Type_Definition 179\n-      #define N_Formal_Subprogram_Declaration 180\n-      #define N_Generic_Association 181\n-      #define N_Handled_Sequence_Of_Statements 182\n-      #define N_Index_Or_Discriminant_Constraint 183\n-      #define N_Itype_Reference 184\n-      #define N_Label 185\n-      #define N_Modular_Type_Definition 186\n-      #define N_Number_Declaration 187\n-      #define N_Ordinary_Fixed_Point_Definition 188\n-      #define N_Others_Choice 189\n-      #define N_Package_Specification 190\n-      #define N_Parameter_Association 191\n-      #define N_Parameter_Specification 192\n-      #define N_Protected_Definition 193\n-      #define N_Range_Constraint 194\n-      #define N_Real_Range_Specification 195\n-      #define N_Record_Definition 196\n-      #define N_Signed_Integer_Type_Definition 197\n-      #define N_Single_Protected_Declaration 198\n-      #define N_Subunit 199\n-      #define N_Task_Definition 200\n-      #define N_Triggering_Alternative 201\n-      #define N_Use_Type_Clause 202\n-      #define N_Validate_Unchecked_Conversion 203\n-      #define N_Variant 204\n-      #define N_Variant_Part 205\n-      #define N_With_Clause 206\n-      #define N_With_Type_Clause 207\n-      #define N_Unused_At_End 208\n-\n-      #define Number_Node_Kinds 209\n-   SUBTYPE (N_Access_To_Subprogram_Definition, Node_Kind, \n-      N_Access_Function_Definition,\n-      N_Access_Procedure_Definition)\n-   SUBTYPE (N_Array_Type_Definition, Node_Kind, \n-      N_Constrained_Array_Definition,\n-      N_Unconstrained_Array_Definition)\n-   SUBTYPE (N_Binary_Op, Node_Kind, \n-      N_Op_Add,\n-      N_Op_Shift_Right_Arithmetic)\n-   SUBTYPE (N_Body_Stub, Node_Kind, \n-      N_Package_Body_Stub,\n-      N_Task_Body_Stub)\n-   SUBTYPE (N_Declaration, Node_Kind, \n-      N_Component_Declaration,\n-      N_Procedure_Specification)\n-   SUBTYPE (N_Direct_Name, Node_Kind, \n-      N_Identifier,\n-      N_Character_Literal)\n-   SUBTYPE (N_Entity, Node_Kind, \n-      N_Defining_Character_Literal,\n-      N_Defining_Operator_Symbol)\n-   SUBTYPE (N_Generic_Declaration, Node_Kind, \n-      N_Generic_Package_Declaration,\n-      N_Generic_Subprogram_Declaration)\n-   SUBTYPE (N_Generic_Instantiation, Node_Kind, \n-      N_Function_Instantiation,\n-      N_Procedure_Instantiation)\n-   SUBTYPE (N_Generic_Renaming_Declaration, Node_Kind, \n-      N_Generic_Function_Renaming_Declaration,\n-      N_Generic_Procedure_Renaming_Declaration)\n-   SUBTYPE (N_Has_Chars, Node_Kind, \n-      N_Attribute_Definition_Clause,\n-      N_Op_Plus)\n-   SUBTYPE (N_Has_Entity, Node_Kind, \n-      N_Expanded_Name,\n-      N_Attribute_Reference)\n-   SUBTYPE (N_Has_Etype, Node_Kind, \n-      N_Error,\n-      N_Subtype_Indication)\n-   SUBTYPE (N_Has_Treat_Fixed_As_Integer, Node_Kind, \n-      N_Op_Divide,\n-      N_Op_Rem)\n-   SUBTYPE (N_Later_Decl_Item, Node_Kind, \n-      N_Task_Type_Declaration,\n-      N_Generic_Subprogram_Declaration)\n-   SUBTYPE (N_Op, Node_Kind, \n-      N_Op_Add,\n-      N_Op_Plus)\n-   SUBTYPE (N_Op_Boolean, Node_Kind, \n-      N_Op_And,\n-      N_Op_Xor)\n-   SUBTYPE (N_Op_Compare, Node_Kind, \n-      N_Op_Eq,\n-      N_Op_Ne)\n-   SUBTYPE (N_Op_Shift, Node_Kind, \n-      N_Op_Rotate_Left,\n-      N_Op_Shift_Right_Arithmetic)\n-   SUBTYPE (N_Proper_Body, Node_Kind, \n-      N_Package_Body,\n-      N_Task_Body)\n-   SUBTYPE (N_Raise_xxx_Error, Node_Kind, \n-      N_Raise_Constraint_Error,\n-      N_Raise_Storage_Error)\n-   SUBTYPE (N_Renaming_Declaration, Node_Kind, \n-      N_Exception_Renaming_Declaration,\n-      N_Generic_Procedure_Renaming_Declaration)\n-   SUBTYPE (N_Representation_Clause, Node_Kind, \n-      N_At_Clause,\n-      N_Attribute_Definition_Clause)\n-   SUBTYPE (N_Statement_Other_Than_Procedure_Call, Node_Kind, \n-      N_Abort_Statement,\n-      N_If_Statement)\n-   SUBTYPE (N_Has_Condition, Node_Kind, \n-      N_Exit_Statement,\n-      N_Terminate_Alternative)\n-   SUBTYPE (N_Subexpr, Node_Kind, \n-      N_Expanded_Name,\n-      N_Unchecked_Type_Conversion)\n-   SUBTYPE (N_Subprogram_Specification, Node_Kind, \n-      N_Function_Specification,\n-      N_Procedure_Specification)\n-   SUBTYPE (N_Unary_Op, Node_Kind, \n-      N_Op_Abs,\n-      N_Op_Plus)\n-   SUBTYPE (N_Unit_Body, Node_Kind, \n-      N_Package_Body,\n-      N_Subprogram_Body)\n-   INLINE Boolean   ABE_Is_Certain                 (Node_Id N)\n-      { return Flag18 (N); }\n-   INLINE Boolean   Abort_Present                  (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Node_Id   Abortable_Part                 (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Boolean   Abstract_Present               (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE List_Id   Accept_Handler_Records         (Node_Id N)\n-      { return List5 (N); }\n-   INLINE Node_Id   Accept_Statement               (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Elist_Id  Access_Types_To_Process        (Node_Id N)\n-      { return Elist2 (N); }\n-   INLINE List_Id   Actions                        (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Node_Id   Activation_Chain_Entity        (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Acts_As_Spec                   (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Node_Id   Aggregate_Bounds               (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Aliased_Present                (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Boolean   All_Others                     (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Boolean   All_Present                    (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE List_Id   Alternatives                   (Node_Id N)\n-      { return List4 (N); }\n-   INLINE Node_Id   Ancestor_Part                  (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Node_Id   Array_Aggregate                (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Assignment_OK                  (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Node_Id   Associated_Node                (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   At_End_Proc                    (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Name_Id   Attribute_Name                 (Node_Id N)\n-      { return Name2 (N); }\n-   INLINE Node_Id   Aux_Decls_Node                 (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Boolean   Backwards_OK                   (Node_Id N)\n-      { return Flag6 (N); }\n-   INLINE Boolean   Bad_Is_Detected                (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Boolean   By_Ref                         (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Boolean   Body_Required                  (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Node_Id   Body_To_Inline                 (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Box_Present                    (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Char_Code Char_Literal_Value             (Node_Id N)\n-      { return Char_Code2 (N); }\n-   INLINE Name_Id   Chars                          (Node_Id N)\n-      { return Name1 (N); }\n-   INLINE Boolean   Check_Address_Alignment        (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Node_Id   Choice_Parameter               (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE List_Id   Choices                        (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Boolean   Compile_Time_Known_Aggregate   (Node_Id N)\n-      { return Flag18 (N); }\n-   INLINE List_Id   Component_Associations         (Node_Id N)\n-      { return List2 (N); }\n-   INLINE List_Id   Component_Clauses              (Node_Id N)\n-      { return List3 (N); }\n-   INLINE List_Id   Component_Items                (Node_Id N)\n-      { return List3 (N); }\n-   INLINE Node_Id   Component_List                 (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Component_Name                 (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Condition                      (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE List_Id   Condition_Actions              (Node_Id N)\n-      { return List3 (N); }\n-   INLINE List_Id   Config_Pragmas                 (Node_Id N)\n-      { return List4 (N); }\n-   INLINE Boolean   Constant_Present               (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE Node_Id   Constraint                     (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE List_Id   Constraints                    (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Boolean   Context_Installed              (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE List_Id   Context_Items                  (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Node_Id   Controlling_Argument           (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Boolean   Conversion_OK                  (Node_Id N)\n-      { return Flag14 (N); }\n-   INLINE Node_Id   Corresponding_Body             (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Corresponding_Generic_Association (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Uint      Corresponding_Integer_Value    (Node_Id N)\n-      { return Uint4 (N); }\n-   INLINE Node_Id   Corresponding_Spec             (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Corresponding_Stub             (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Entity_Id Dcheck_Function                (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Debug_Statement                (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE List_Id   Declarations                   (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Node_Id   Default_Expression             (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Default_Name                   (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Entity_Id Defining_Identifier            (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Defining_Unit_Name             (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Delay_Alternative              (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Boolean   Delay_Finalize_Attach          (Node_Id N)\n-      { return Flag14 (N); }\n-   INLINE Node_Id   Delay_Statement                (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Delta_Expression               (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Node_Id   Digits_Expression              (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Boolean   Discr_Check_Funcs_Built        (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE List_Id   Discrete_Choices               (Node_Id N)\n-      { return List4 (N); }\n-   INLINE Node_Id   Discrete_Range                 (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Discrete_Subtype_Definition    (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE List_Id   Discrete_Subtype_Definitions   (Node_Id N)\n-      { return List2 (N); }\n-   INLINE List_Id   Discriminant_Specifications    (Node_Id N)\n-      { return List4 (N); }\n-   INLINE Node_Id   Discriminant_Type              (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Boolean   Do_Accessibility_Check         (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Do_Discriminant_Check          (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Do_Division_Check              (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Do_Length_Check                (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Boolean   Do_Overflow_Check              (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE Boolean   Do_Range_Check                 (Node_Id N)\n-      { return Flag9 (N); }\n-   INLINE Boolean   Do_Storage_Check               (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE Boolean   Do_Tag_Check                   (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Elaborate_All_Present          (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Boolean   Elaborate_Present              (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Node_Id   Elaboration_Boolean            (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE List_Id   Else_Actions                   (Node_Id N)\n-      { return List3 (N); }\n-   INLINE List_Id   Else_Statements                (Node_Id N)\n-      { return List4 (N); }\n-   INLINE List_Id   Elsif_Parts                    (Node_Id N)\n-      { return List3 (N); }\n-   INLINE Node_Id   Enclosing_Variant              (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   End_Label                      (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Uint      End_Span                       (Node_Id N)\n-      { return Uint5 (N); }\n-   INLINE Node_Id   Entity                         (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Entity_Or_Associated_Node      (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Entry_Body_Formal_Part         (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Entry_Call_Alternative         (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Entry_Call_Statement           (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Entry_Direct_Name              (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Entry_Index                    (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Entry_Index_Specification      (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Etype                          (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE List_Id   Exception_Choices              (Node_Id N)\n-      { return List4 (N); }\n-   INLINE List_Id   Exception_Handlers             (Node_Id N)\n-      { return List5 (N); }\n-   INLINE Boolean   Exception_Junk                 (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Node_Id   Explicit_Actual_Parameter      (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Expansion_Delayed              (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Node_Id   Explicit_Generic_Actual_Parameter (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Expression                     (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE List_Id   Expressions                    (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Node_Id   First_Bit                      (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Entity_Id First_Inlined_Subprogram       (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   First_Name                     (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Node_Id   First_Named_Actual             (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   First_Real_Statement           (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Entity_Id First_Subtype_Link             (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Boolean   Float_Truncate                 (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Node_Id   Formal_Type_Definition         (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Forwards_OK                    (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Boolean   From_At_Mod                    (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE List_Id   Generic_Associations           (Node_Id N)\n-      { return List3 (N); }\n-   INLINE List_Id   Generic_Formal_Declarations    (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Node_Id   Generic_Parent                 (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Generic_Parent_Type            (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Handled_Statement_Sequence     (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Handler_List_Entry             (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Boolean   Has_Created_Identifier         (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Boolean   Has_Dynamic_Length_Check       (Node_Id N)\n-      { return Flag10 (N); }\n-   INLINE Boolean   Has_Dynamic_Range_Check        (Node_Id N)\n-      { return Flag12 (N); }\n-   INLINE Boolean   Has_No_Elaboration_Code        (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE Boolean   Has_Priority_Pragma            (Node_Id N)\n-      { return Flag6 (N); }\n-   INLINE Boolean   Has_Private_View               (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Boolean   Has_Storage_Size_Pragma        (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Boolean   Has_Task_Info_Pragma           (Node_Id N)\n-      { return Flag7 (N); }\n-   INLINE Boolean   Has_Task_Name_Pragma           (Node_Id N)\n-      { return Flag8 (N); }\n-   INLINE Boolean   Has_Wide_Character             (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Elist_Id  Hidden_By_Use_Clause           (Node_Id N)\n-      { return Elist4 (N); }\n-   INLINE Node_Id   High_Bound                     (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Identifier                     (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Boolean   Implicit_With                  (Node_Id N)\n-      { return Flag16 (N); }\n-   INLINE Boolean   In_Present                     (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Boolean   Includes_Infinities            (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Node_Id   Instance_Spec                  (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Uint      Intval                         (Node_Id N)\n-      { return Uint3 (N); }\n-   INLINE Boolean   Is_Asynchronous_Call_Block     (Node_Id N)\n-      { return Flag7 (N); }\n-   INLINE Boolean   Is_Component_Left_Opnd         (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Is_Component_Right_Opnd        (Node_Id N)\n-      { return Flag14 (N); }\n-   INLINE Boolean   Is_Controlling_Actual          (Node_Id N)\n-      { return Flag16 (N); }\n-   INLINE Boolean   Is_In_Discriminant_Check       (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Boolean   Is_Machine_Number              (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Boolean   Is_Null_Loop                   (Node_Id N)\n-      { return Flag16 (N); }\n-   INLINE Boolean   Is_Overloaded                  (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Boolean   Is_Power_Of_2_For_Shift        (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Is_Protected_Subprogram_Body   (Node_Id N)\n-      { return Flag7 (N); }\n-   INLINE Boolean   Is_Static_Expression           (Node_Id N)\n-      { return Flag6 (N); }\n-   INLINE Boolean   Is_Subprogram_Descriptor       (Node_Id N)\n-      { return Flag16 (N); }\n-   INLINE Boolean   Is_Task_Allocation_Block       (Node_Id N)\n-      { return Flag6 (N); }\n-   INLINE Boolean   Is_Task_Master                 (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Node_Id   Iteration_Scheme               (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Entity_Id Itype                          (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Boolean   Kill_Range_Check               (Node_Id N)\n-      { return Flag11 (N); }\n-   INLINE Node_Id   Label_Construct                (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Left_Opnd                      (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Last_Bit                       (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Boolean   Last_Name                      (Node_Id N)\n-      { return Flag6 (N); }\n-   INLINE Node_Id   Library_Unit                   (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Boolean   Limited_View_Installed         (Node_Id N)\n-      { return Flag18 (N); }\n-   INLINE Boolean   Limited_Present                (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE List_Id   Literals                       (Node_Id N)\n-      { return List1 (N); }\n-   INLINE List_Id   Loop_Actions                   (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Node_Id   Loop_Parameter_Specification   (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Low_Bound                      (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Mod_Clause                     (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Boolean   More_Ids                       (Node_Id N)\n-      { return Flag5 (N); }\n-   INLINE Boolean   Must_Be_Byte_Aligned           (Node_Id N)\n-      { return Flag14 (N); }\n-   INLINE Boolean   Must_Not_Freeze                (Node_Id N)\n-      { return Flag8 (N); }\n-   INLINE Node_Id   Name                           (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE List_Id   Names                          (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Node_Id   Next_Entity                    (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Next_Named_Actual              (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Next_Rep_Item                  (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Next_Use_Clause                (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   No_Ctrl_Actions                (Node_Id N)\n-      { return Flag7 (N); }\n-   INLINE Boolean   No_Entities_Ref_In_Spec        (Node_Id N)\n-      { return Flag8 (N); }\n-   INLINE Boolean   No_Initialization              (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   No_Truncation                  (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE Boolean   Null_Present                   (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Null_Record_Present            (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE Node_Id   Object_Definition              (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Boolean   OK_For_Stream                  (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Node_Id   Original_Discriminant          (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Entity_Id Original_Entity                (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE List_Id   Others_Discrete_Choices        (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Boolean   Out_Present                    (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE List_Id   Parameter_Associations         (Node_Id N)\n-      { return List3 (N); }\n-   INLINE Boolean   Parameter_List_Truncated       (Node_Id N)\n-      { return Flag17 (N); }\n-   INLINE List_Id   Parameter_Specifications       (Node_Id N)\n-      { return List3 (N); }\n-   INLINE Node_Id   Parameter_Type                 (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Parent_Spec                    (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Position                       (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE List_Id   Pragma_Argument_Associations   (Node_Id N)\n-      { return List2 (N); }\n-   INLINE List_Id   Pragmas_After                  (Node_Id N)\n-      { return List5 (N); }\n-   INLINE List_Id   Pragmas_Before                 (Node_Id N)\n-      { return List4 (N); }\n-   INLINE Node_Id   Prefix                         (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Uint      Present_Expr                   (Node_Id N)\n-      { return Uint3 (N); }\n-   INLINE Boolean   Prev_Ids                       (Node_Id N)\n-      { return Flag6 (N); }\n-   INLINE Boolean   Print_In_Hex                   (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE List_Id   Private_Declarations           (Node_Id N)\n-      { return List3 (N); }\n-   INLINE Boolean   Private_Present                (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Node_Id   Procedure_To_Call              (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Proper_Body                    (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Protected_Definition           (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Protected_Present              (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Boolean   Raises_Constraint_Error        (Node_Id N)\n-      { return Flag7 (N); }\n-   INLINE Node_Id   Range_Constraint               (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Range_Expression               (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Node_Id   Real_Range_Specification       (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE Ureal     Realval                        (Node_Id N)\n-      { return Ureal3 (N); }\n-   INLINE Uint      Reason                         (Node_Id N)\n-      { return Uint3 (N); }\n-   INLINE Node_Id   Record_Extension_Part          (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Redundant_Use                  (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Node_Id   Return_Type                    (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Boolean   Reverse_Present                (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Node_Id   Right_Opnd                     (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Boolean   Rounded_Result                 (Node_Id N)\n-      { return Flag18 (N); }\n-   INLINE Node_Id   Scope                          (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE List_Id   Select_Alternatives            (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Node_Id   Selector_Name                  (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE List_Id   Selector_Names                 (Node_Id N)\n-      { return List1 (N); }\n-   INLINE Boolean   Shift_Count_OK                 (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Entity_Id Source_Type                    (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Specification                  (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE List_Id   Statements                     (Node_Id N)\n-      { return List3 (N); }\n-   INLINE Boolean   Static_Processing_OK           (Node_Id N)\n-      { return Flag4 (N); }\n-   INLINE Node_Id   Storage_Pool                   (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE String_Id Strval                         (Node_Id N)\n-      { return Str3 (N); }\n-   INLINE Node_Id   Subtype_Indication             (Node_Id N)\n-      { return Node5 (N); }\n-   INLINE Node_Id   Subtype_Mark                   (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE List_Id   Subtype_Marks                  (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Boolean   Tagged_Present                 (Node_Id N)\n-      { return Flag15 (N); }\n-   INLINE Entity_Id Target_Type                    (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Entity_Id Task_Body_Procedure            (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Node_Id   Task_Definition                (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE List_Id   Then_Actions                   (Node_Id N)\n-      { return List2 (N); }\n-   INLINE List_Id   Then_Statements                (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Boolean   Treat_Fixed_As_Integer         (Node_Id N)\n-      { return Flag14 (N); }\n-   INLINE Node_Id   Triggering_Alternative         (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Node_Id   Triggering_Statement           (Node_Id N)\n-      { return Node1 (N); }\n-   INLINE Elist_Id  TSS_Elist                      (Node_Id N)\n-      { return Elist3 (N); }\n-   INLINE Node_Id   Type_Definition                (Node_Id N)\n-      { return Node3 (N); }\n-   INLINE Node_Id   Unit                           (Node_Id N)\n-      { return Node2 (N); }\n-   INLINE Boolean   Unknown_Discriminants_Present  (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Unreferenced_In_Spec           (Node_Id N)\n-      { return Flag7 (N); }\n-   INLINE Node_Id   Variant_Part                   (Node_Id N)\n-      { return Node4 (N); }\n-   INLINE List_Id   Variants                       (Node_Id N)\n-      { return List1 (N); }\n-   INLINE List_Id   Visible_Declarations           (Node_Id N)\n-      { return List2 (N); }\n-   INLINE Boolean   Was_Originally_Stub            (Node_Id N)\n-      { return Flag13 (N); }\n-   INLINE Boolean   Zero_Cost_Handling             (Node_Id N)\n-      { return Flag5 (N); }\n-"}, {"sha": "118f58eb330989de6a8e9cd1d00ac300bb982e76", "filename": "gcc/ada/treeprs.ads", "status": "removed", "additions": 0, "deletions": 796, "changes": 796, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Ftreeprs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb31ee3566c07d81e5dfeb500215e224b42169f/gcc%2Fada%2Ftreeprs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreeprs.ads?ref=0eb31ee3566c07d81e5dfeb500215e224b42169f", "patch": "@@ -1,796 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              T R E E P R S                               --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-\n---  This package contains the declaration of the string used by the Tree_Print\n---  package. It must be updated whenever the arrangements of the field names\n---  in package Sinfo is changed. The utility program XTREEPRS is used to\n---  do this update correctly using the template treeprs.adt as input.\n-\n-with Sinfo; use Sinfo;\n-\n-package Treeprs is\n-\n-   --------------------------------\n-   -- String Data for Node Print --\n-   --------------------------------\n-\n-   --  String data for print out. The Pchars array is a long string with the\n-   --  the entry for each node type consisting of a single blank, followed by\n-   --  a series of entries, one for each Op or Flag field used for the node.\n-   --  Each entry has a single character which identifies the field, followed\n-   --  by the synonym name. The starting location for a given node type is\n-   --  found from the corresponding entry in the Pchars_Pos_Array.\n-\n-   --  The following characters identify the field. These are characters\n-   --  which  could never occur in a field name, so they also mark the\n-   --  end of the previous name.\n-\n-   subtype Fchar is Character range '#' .. '9';\n-\n-   F_Field1     : constant Fchar := '#'; -- Character'Val (16#23#)\n-   F_Field2     : constant Fchar := '$'; -- Character'Val (16#24#)\n-   F_Field3     : constant Fchar := '%'; -- Character'Val (16#25#)\n-   F_Field4     : constant Fchar := '&'; -- Character'Val (16#26#)\n-   F_Field5     : constant Fchar := '''; -- Character'Val (16#27#)\n-   F_Flag1      : constant Fchar := '('; -- Character'Val (16#28#)\n-   F_Flag2      : constant Fchar := ')'; -- Character'Val (16#29#)\n-   F_Flag3      : constant Fchar := '*'; -- Character'Val (16#2A#)\n-   F_Flag4      : constant Fchar := '+'; -- Character'Val (16#2B#)\n-   F_Flag5      : constant Fchar := ','; -- Character'Val (16#2C#)\n-   F_Flag6      : constant Fchar := '-'; -- Character'Val (16#2D#)\n-   F_Flag7      : constant Fchar := '.'; -- Character'Val (16#2E#)\n-   F_Flag8      : constant Fchar := '/'; -- Character'Val (16#2F#)\n-   F_Flag9      : constant Fchar := '0'; -- Character'Val (16#30#)\n-   F_Flag10     : constant Fchar := '1'; -- Character'Val (16#31#)\n-   F_Flag11     : constant Fchar := '2'; -- Character'Val (16#32#)\n-   F_Flag12     : constant Fchar := '3'; -- Character'Val (16#33#)\n-   F_Flag13     : constant Fchar := '4'; -- Character'Val (16#34#)\n-   F_Flag14     : constant Fchar := '5'; -- Character'Val (16#35#)\n-   F_Flag15     : constant Fchar := '6'; -- Character'Val (16#36#)\n-   F_Flag16     : constant Fchar := '7'; -- Character'Val (16#37#)\n-   F_Flag17     : constant Fchar := '8'; -- Character'Val (16#38#)\n-   F_Flag18     : constant Fchar := '9'; -- Character'Val (16#39#)\n-\n-   --  Note this table does not include entity field and flags whose access\n-   --  functions are in Einfo (these are handled by the Print_Entity_Info\n-   --  procedure in Treepr, which uses the routines in Einfo to get the\n-   --  proper symbolic information). In addition, the following fields are\n-   --  handled by Treepr, and do not appear in the Pchars array:\n-\n-   --    Analyzed\n-   --    Cannot_Be_Constant\n-   --    Chars\n-   --    Comes_From_Source\n-   --    Error_Posted\n-   --    Etype\n-   --    Is_Controlling_Actual\n-   --    Is_Overloaded\n-   --    Is_Static_Expression\n-   --    Left_Opnd\n-   --    Must_Check_Expr\n-   --    Must_Not_Freeze\n-   --    No_Overflow_Expr\n-   --    Paren_Count\n-   --    Raises_Constraint_Error\n-   --    Right_Opnd\n-\n-   Pchars : constant String :=\n-      --  Unused_At_Start\n-      \"\" &\n-      --  At_Clause\n-      \"#Identifier%Expression\" &\n-      --  Component_Clause\n-      \"#Component_Name$Position%First_Bit&Last_Bit\" &\n-      --  Enumeration_Representation_Clause\n-      \"#Identifier%Array_Aggregate&Next_Rep_Item\" &\n-      --  Mod_Clause\n-      \"%Expression&Pragmas_Before\" &\n-      --  Record_Representation_Clause\n-      \"#Identifier$Mod_Clause%Component_Clauses&Next_Rep_Item\" &\n-      --  Attribute_Definition_Clause\n-      \"$Name%Expression&Next_Rep_Item+From_At_Mod2Check_Address_Alignment\" &\n-      --  Empty\n-      \"\" &\n-      --  Pragma\n-      \"$Pragma_Argument_Associations%Debug_Statement&Next_Rep_Item\" &\n-      --  Pragma_Argument_Association\n-      \"%Expression\" &\n-      --  Error\n-      \"\" &\n-      --  Defining_Character_Literal\n-      \"$Next_Entity%Scope\" &\n-      --  Defining_Identifier\n-      \"$Next_Entity%Scope\" &\n-      --  Defining_Operator_Symbol\n-      \"$Next_Entity%Scope\" &\n-      --  Expanded_Name\n-      \"%Prefix$Selector_Name&Entity&Associated_Node4Redundant_Use2Has_Privat\" &\n-         \"e_View\" &\n-      --  Identifier\n-      \"&Entity&Associated_Node$Original_Discriminant4Redundant_Use2Has_Priva\" &\n-         \"te_View\" &\n-      --  Operator_Symbol\n-      \"%Strval&Entity&Associated_Node2Has_Private_View\" &\n-      --  Character_Literal\n-      \"$Char_Literal_Value&Entity&Associated_Node2Has_Private_View\" &\n-      --  Op_Add\n-      \"\" &\n-      --  Op_Concat\n-      \"4Is_Component_Left_Opnd5Is_Component_Right_Opnd\" &\n-      --  Op_Expon\n-      \"4Is_Power_Of_2_For_Shift\" &\n-      --  Op_Subtract\n-      \"\" &\n-      --  Op_Divide\n-      \"5Treat_Fixed_As_Integer4Do_Division_Check9Rounded_Result\" &\n-      --  Op_Mod\n-      \"5Treat_Fixed_As_Integer4Do_Division_Check\" &\n-      --  Op_Multiply\n-      \"5Treat_Fixed_As_Integer9Rounded_Result\" &\n-      --  Op_Rem\n-      \"5Treat_Fixed_As_Integer4Do_Division_Check\" &\n-      --  Op_And\n-      \"+Do_Length_Check\" &\n-      --  Op_Eq\n-      \"\" &\n-      --  Op_Ge\n-      \"\" &\n-      --  Op_Gt\n-      \"\" &\n-      --  Op_Le\n-      \"\" &\n-      --  Op_Lt\n-      \"\" &\n-      --  Op_Ne\n-      \"\" &\n-      --  Op_Or\n-      \"+Do_Length_Check\" &\n-      --  Op_Xor\n-      \"+Do_Length_Check\" &\n-      --  Op_Rotate_Left\n-      \"+Shift_Count_OK\" &\n-      --  Op_Rotate_Right\n-      \"+Shift_Count_OK\" &\n-      --  Op_Shift_Left\n-      \"+Shift_Count_OK\" &\n-      --  Op_Shift_Right\n-      \"+Shift_Count_OK\" &\n-      --  Op_Shift_Right_Arithmetic\n-      \"+Shift_Count_OK\" &\n-      --  Op_Abs\n-      \"\" &\n-      --  Op_Minus\n-      \"\" &\n-      --  Op_Not\n-      \"\" &\n-      --  Op_Plus\n-      \"\" &\n-      --  Attribute_Reference\n-      \"%Prefix$Attribute_Name#Expressions&Entity&Associated_Node8Do_Overflow\" &\n-         \"_Check4Redundant_Use+OK_For_Stream5Must_Be_Byte_Aligned\" &\n-      --  And_Then\n-      \"#Actions\" &\n-      --  Conditional_Expression\n-      \"#Expressions$Then_Actions%Else_Actions\" &\n-      --  Explicit_Dereference\n-      \"%Prefix\" &\n-      --  Function_Call\n-      \"$Name%Parameter_Associations&First_Named_Actual#Controlling_Argument4\" &\n-         \"Do_Tag_Check8Parameter_List_Truncated9ABE_Is_Certain\" &\n-      --  In\n-      \"\" &\n-      --  Indexed_Component\n-      \"%Prefix#Expressions\" &\n-      --  Integer_Literal\n-      \"$Original_Entity%Intval4Print_In_Hex\" &\n-      --  Not_In\n-      \"\" &\n-      --  Null\n-      \"\" &\n-      --  Or_Else\n-      \"#Actions\" &\n-      --  Procedure_Call_Statement\n-      \"$Name%Parameter_Associations&First_Named_Actual#Controlling_Argument4\" &\n-         \"Do_Tag_Check8Parameter_List_Truncated9ABE_Is_Certain\" &\n-      --  Qualified_Expression\n-      \"&Subtype_Mark%Expression\" &\n-      --  Raise_Constraint_Error\n-      \"#Condition%Reason\" &\n-      --  Raise_Program_Error\n-      \"#Condition%Reason\" &\n-      --  Raise_Storage_Error\n-      \"#Condition%Reason\" &\n-      --  Aggregate\n-      \"#Expressions$Component_Associations8Null_Record_Present%Aggregate_Bou\" &\n-         \"nds&Associated_Node+Static_Processing_OK9Compile_Time_Known_Aggreg\" &\n-         \"ate2Expansion_Delayed\" &\n-      --  Allocator\n-      \"%Expression#Storage_Pool&Procedure_To_Call4No_Initialization8Do_Stora\" &\n-         \"ge_Check\" &\n-      --  Extension_Aggregate\n-      \"%Ancestor_Part&Associated_Node#Expressions$Component_Associations8Nul\" &\n-         \"l_Record_Present2Expansion_Delayed\" &\n-      --  Range\n-      \"#Low_Bound$High_Bound2Includes_Infinities\" &\n-      --  Real_Literal\n-      \"$Original_Entity%Realval&Corresponding_Integer_Value2Is_Machine_Numbe\" &\n-         \"r\" &\n-      --  Reference\n-      \"%Prefix\" &\n-      --  Selected_Component\n-      \"%Prefix$Selector_Name&Associated_Node4Do_Discriminant_Check2Is_In_Dis\" &\n-         \"criminant_Check\" &\n-      --  Slice\n-      \"%Prefix&Discrete_Range\" &\n-      --  String_Literal\n-      \"%Strval2Has_Wide_Character\" &\n-      --  Subprogram_Info\n-      \"#Identifier\" &\n-      --  Type_Conversion\n-      \"&Subtype_Mark%Expression4Do_Tag_Check+Do_Length_Check8Do_Overflow_Che\" &\n-         \"ck2Float_Truncate9Rounded_Result5Conversion_OK\" &\n-      --  Unchecked_Expression\n-      \"%Expression\" &\n-      --  Unchecked_Type_Conversion\n-      \"&Subtype_Mark%Expression2Kill_Range_Check8No_Truncation\" &\n-      --  Subtype_Indication\n-      \"&Subtype_Mark%Constraint/Must_Not_Freeze\" &\n-      --  Component_Declaration\n-      \"#Defining_Identifier+Aliased_Present'Subtype_Indication%Expression,Mo\" &\n-         \"re_Ids-Prev_Ids\" &\n-      --  Entry_Declaration\n-      \"#Defining_Identifier&Discrete_Subtype_Definition%Parameter_Specificat\" &\n-         \"ions'Corresponding_Body\" &\n-      --  Formal_Object_Declaration\n-      \"#Defining_Identifier6In_Present8Out_Present&Subtype_Mark%Expression,M\" &\n-         \"ore_Ids-Prev_Ids\" &\n-      --  Formal_Type_Declaration\n-      \"#Defining_Identifier%Formal_Type_Definition&Discriminant_Specificatio\" &\n-         \"ns4Unknown_Discriminants_Present\" &\n-      --  Full_Type_Declaration\n-      \"#Defining_Identifier&Discriminant_Specifications%Type_Definition2Disc\" &\n-         \"r_Check_Funcs_Built\" &\n-      --  Incomplete_Type_Declaration\n-      \"#Defining_Identifier&Discriminant_Specifications4Unknown_Discriminant\" &\n-         \"s_Present\" &\n-      --  Loop_Parameter_Specification\n-      \"#Defining_Identifier6Reverse_Present&Discrete_Subtype_Definition\" &\n-      --  Object_Declaration\n-      \"#Defining_Identifier+Aliased_Present8Constant_Present&Object_Definiti\" &\n-         \"on%Expression$Handler_List_Entry'Corresponding_Generic_Association\" &\n-         \",More_Ids-Prev_Ids4No_Initialization6Assignment_OK2Exception_Junk5\" &\n-         \"Delay_Finalize_Attach7Is_Subprogram_Descriptor\" &\n-      --  Protected_Type_Declaration\n-      \"#Defining_Identifier&Discriminant_Specifications%Protected_Definition\" &\n-         \"'Corresponding_Body\" &\n-      --  Private_Extension_Declaration\n-      \"#Defining_Identifier&Discriminant_Specifications4Unknown_Discriminant\" &\n-         \"s_Present+Abstract_Present'Subtype_Indication\" &\n-      --  Private_Type_Declaration\n-      \"#Defining_Identifier&Discriminant_Specifications4Unknown_Discriminant\" &\n-         \"s_Present+Abstract_Present6Tagged_Present8Limited_Present\" &\n-      --  Subtype_Declaration\n-      \"#Defining_Identifier'Subtype_Indication&Generic_Parent_Type2Exception\" &\n-         \"_Junk\" &\n-      --  Function_Specification\n-      \"#Defining_Unit_Name$Elaboration_Boolean%Parameter_Specifications&Subt\" &\n-         \"ype_Mark'Generic_Parent\" &\n-      --  Procedure_Specification\n-      \"#Defining_Unit_Name$Elaboration_Boolean%Parameter_Specifications'Gene\" &\n-         \"ric_Parent\" &\n-      --  Entry_Index_Specification\n-      \"#Defining_Identifier&Discrete_Subtype_Definition\" &\n-      --  Freeze_Entity\n-      \"&Entity$Access_Types_To_Process%TSS_Elist#Actions'First_Subtype_Link\" &\n-      --  Access_Function_Definition\n-      \"6Protected_Present%Parameter_Specifications&Subtype_Mark\" &\n-      --  Access_Procedure_Definition\n-      \"6Protected_Present%Parameter_Specifications\" &\n-      --  Task_Type_Declaration\n-      \"#Defining_Identifier$Task_Body_Procedure&Discriminant_Specifications%\" &\n-         \"Task_Definition'Corresponding_Body\" &\n-      --  Package_Body_Stub\n-      \"#Defining_Identifier&Library_Unit'Corresponding_Body\" &\n-      --  Protected_Body_Stub\n-      \"#Defining_Identifier&Library_Unit'Corresponding_Body\" &\n-      --  Subprogram_Body_Stub\n-      \"#Specification&Library_Unit'Corresponding_Body\" &\n-      --  Task_Body_Stub\n-      \"#Defining_Identifier&Library_Unit'Corresponding_Body\" &\n-      --  Function_Instantiation\n-      \"#Defining_Unit_Name$Name%Generic_Associations&Parent_Spec'Instance_Sp\" &\n-         \"ec9ABE_Is_Certain\" &\n-      --  Package_Instantiation\n-      \"#Defining_Unit_Name$Name%Generic_Associations&Parent_Spec'Instance_Sp\" &\n-         \"ec9ABE_Is_Certain\" &\n-      --  Procedure_Instantiation\n-      \"#Defining_Unit_Name$Name&Parent_Spec%Generic_Associations'Instance_Sp\" &\n-         \"ec9ABE_Is_Certain\" &\n-      --  Package_Body\n-      \"#Defining_Unit_Name$Declarations&Handled_Statement_Sequence'Correspon\" &\n-         \"ding_Spec4Was_Originally_Stub\" &\n-      --  Subprogram_Body\n-      \"#Specification$Declarations&Handled_Statement_Sequence%Activation_Cha\" &\n-         \"in_Entity'Corresponding_Spec+Acts_As_Spec6Bad_Is_Detected8Do_Stora\" &\n-         \"ge_Check-Has_Priority_Pragma.Is_Protected_Subprogram_Body,Is_Task_\" &\n-         \"Master4Was_Originally_Stub\" &\n-      --  Protected_Body\n-      \"#Defining_Identifier$Declarations&End_Label'Corresponding_Spec4Was_Or\" &\n-         \"iginally_Stub\" &\n-      --  Task_Body\n-      \"#Defining_Identifier$Declarations&Handled_Statement_Sequence,Is_Task_\" &\n-         \"Master%Activation_Chain_Entity'Corresponding_Spec4Was_Originally_S\" &\n-         \"tub\" &\n-      --  Implicit_Label_Declaration\n-      \"#Defining_Identifier$Label_Construct\" &\n-      --  Package_Declaration\n-      \"#Specification'Corresponding_Body&Parent_Spec%Activation_Chain_Entity\" &\n-      --  Single_Task_Declaration\n-      \"#Defining_Identifier%Task_Definition\" &\n-      --  Subprogram_Declaration\n-      \"#Specification%Body_To_Inline'Corresponding_Body&Parent_Spec\" &\n-      --  Use_Package_Clause\n-      \"$Names%Next_Use_Clause&Hidden_By_Use_Clause\" &\n-      --  Generic_Package_Declaration\n-      \"#Specification'Corresponding_Body$Generic_Formal_Declarations&Parent_\" &\n-         \"Spec%Activation_Chain_Entity\" &\n-      --  Generic_Subprogram_Declaration\n-      \"#Specification'Corresponding_Body$Generic_Formal_Declarations&Parent_\" &\n-         \"Spec\" &\n-      --  Constrained_Array_Definition\n-      \"$Discrete_Subtype_Definitions+Aliased_Present'Subtype_Indication\" &\n-      --  Unconstrained_Array_Definition\n-      \"$Subtype_Marks+Aliased_Present'Subtype_Indication\" &\n-      --  Exception_Renaming_Declaration\n-      \"#Defining_Identifier$Name\" &\n-      --  Object_Renaming_Declaration\n-      \"#Defining_Identifier&Subtype_Mark$Name'Corresponding_Generic_Associat\" &\n-         \"ion\" &\n-      --  Package_Renaming_Declaration\n-      \"#Defining_Unit_Name$Name&Parent_Spec\" &\n-      --  Subprogram_Renaming_Declaration\n-      \"#Specification$Name&Parent_Spec'Corresponding_Spec\" &\n-      --  Generic_Function_Renaming_Declaration\n-      \"#Defining_Unit_Name$Name&Parent_Spec\" &\n-      --  Generic_Package_Renaming_Declaration\n-      \"#Defining_Unit_Name$Name&Parent_Spec\" &\n-      --  Generic_Procedure_Renaming_Declaration\n-      \"#Defining_Unit_Name$Name&Parent_Spec\" &\n-      --  Abort_Statement\n-      \"$Names\" &\n-      --  Accept_Statement\n-      \"#Entry_Direct_Name'Entry_Index%Parameter_Specifications&Handled_State\" &\n-         \"ment_Sequence$Declarations\" &\n-      --  Assignment_Statement\n-      \"$Name%Expression4Do_Tag_Check+Do_Length_Check,Forwards_OK-Backwards_O\" &\n-         \"K.No_Ctrl_Actions\" &\n-      --  Asynchronous_Select\n-      \"#Triggering_Alternative$Abortable_Part\" &\n-      --  Block_Statement\n-      \"#Identifier$Declarations&Handled_Statement_Sequence,Is_Task_Master%Ac\" &\n-         \"tivation_Chain_Entity6Has_Created_Identifier-Is_Task_Allocation_Bl\" &\n-         \"ock.Is_Asynchronous_Call_Block\" &\n-      --  Case_Statement\n-      \"%Expression&Alternatives'End_Span\" &\n-      --  Code_Statement\n-      \"%Expression\" &\n-      --  Conditional_Entry_Call\n-      \"#Entry_Call_Alternative&Else_Statements\" &\n-      --  Delay_Relative_Statement\n-      \"%Expression\" &\n-      --  Delay_Until_Statement\n-      \"%Expression\" &\n-      --  Entry_Call_Statement\n-      \"$Name%Parameter_Associations&First_Named_Actual\" &\n-      --  Free_Statement\n-      \"%Expression#Storage_Pool&Procedure_To_Call\" &\n-      --  Goto_Statement\n-      \"$Name2Exception_Junk\" &\n-      --  Loop_Statement\n-      \"#Identifier$Iteration_Scheme%Statements&End_Label6Has_Created_Identif\" &\n-         \"ier7Is_Null_Loop\" &\n-      --  Null_Statement\n-      \"\" &\n-      --  Raise_Statement\n-      \"$Name\" &\n-      --  Requeue_Statement\n-      \"$Name6Abort_Present\" &\n-      --  Return_Statement\n-      \"%Expression#Storage_Pool&Procedure_To_Call4Do_Tag_Check$Return_Type,B\" &\n-         \"y_Ref\" &\n-      --  Selective_Accept\n-      \"#Select_Alternatives&Else_Statements\" &\n-      --  Timed_Entry_Call\n-      \"#Entry_Call_Alternative&Delay_Alternative\" &\n-      --  Exit_Statement\n-      \"$Name#Condition\" &\n-      --  If_Statement\n-      \"#Condition$Then_Statements%Elsif_Parts&Else_Statements'End_Span\" &\n-      --  Accept_Alternative\n-      \"$Accept_Statement#Condition%Statements&Pragmas_Before'Accept_Handler_\" &\n-         \"Records\" &\n-      --  Delay_Alternative\n-      \"$Delay_Statement#Condition%Statements&Pragmas_Before\" &\n-      --  Elsif_Part\n-      \"#Condition$Then_Statements%Condition_Actions\" &\n-      --  Entry_Body_Formal_Part\n-      \"&Entry_Index_Specification%Parameter_Specifications#Condition\" &\n-      --  Iteration_Scheme\n-      \"#Condition%Condition_Actions&Loop_Parameter_Specification\" &\n-      --  Terminate_Alternative\n-      \"#Condition&Pragmas_Before'Pragmas_After\" &\n-      --  Abortable_Part\n-      \"%Statements\" &\n-      --  Abstract_Subprogram_Declaration\n-      \"#Specification\" &\n-      --  Access_Definition\n-      \"&Subtype_Mark\" &\n-      --  Access_To_Object_Definition\n-      \"6All_Present'Subtype_Indication8Constant_Present\" &\n-      --  Case_Statement_Alternative\n-      \"&Discrete_Choices%Statements\" &\n-      --  Compilation_Unit\n-      \"&Library_Unit#Context_Items6Private_Present$Unit'Aux_Decls_Node8Has_N\" &\n-         \"o_Elaboration_Code4Body_Required+Acts_As_Spec%First_Inlined_Subpro\" &\n-         \"gram\" &\n-      --  Compilation_Unit_Aux\n-      \"$Declarations#Actions'Pragmas_After&Config_Pragmas\" &\n-      --  Component_Association\n-      \"#Choices$Loop_Actions%Expression6Box_Present\" &\n-      --  Component_List\n-      \"%Component_Items&Variant_Part4Null_Present\" &\n-      --  Derived_Type_Definition\n-      \"+Abstract_Present'Subtype_Indication%Record_Extension_Part\" &\n-      --  Decimal_Fixed_Point_Definition\n-      \"%Delta_Expression$Digits_Expression&Real_Range_Specification\" &\n-      --  Defining_Program_Unit_Name\n-      \"$Name#Defining_Identifier\" &\n-      --  Delta_Constraint\n-      \"%Delta_Expression&Range_Constraint\" &\n-      --  Designator\n-      \"$Name#Identifier\" &\n-      --  Digits_Constraint\n-      \"$Digits_Expression&Range_Constraint\" &\n-      --  Discriminant_Association\n-      \"#Selector_Names%Expression\" &\n-      --  Discriminant_Specification\n-      \"#Defining_Identifier'Discriminant_Type%Expression,More_Ids-Prev_Ids\" &\n-      --  Enumeration_Type_Definition\n-      \"#Literals&End_Label\" &\n-      --  Entry_Body\n-      \"#Defining_Identifier'Entry_Body_Formal_Part$Declarations&Handled_Stat\" &\n-         \"ement_Sequence%Activation_Chain_Entity\" &\n-      --  Entry_Call_Alternative\n-      \"#Entry_Call_Statement%Statements&Pragmas_Before\" &\n-      --  Exception_Declaration\n-      \"#Defining_Identifier%Expression,More_Ids-Prev_Ids\" &\n-      --  Exception_Handler\n-      \"$Choice_Parameter&Exception_Choices%Statements,Zero_Cost_Handling\" &\n-      --  Floating_Point_Definition\n-      \"$Digits_Expression&Real_Range_Specification\" &\n-      --  Formal_Decimal_Fixed_Point_Definition\n-      \"\" &\n-      --  Formal_Derived_Type_Definition\n-      \"&Subtype_Mark6Private_Present+Abstract_Present\" &\n-      --  Formal_Discrete_Type_Definition\n-      \"\" &\n-      --  Formal_Floating_Point_Definition\n-      \"\" &\n-      --  Formal_Modular_Type_Definition\n-      \"\" &\n-      --  Formal_Ordinary_Fixed_Point_Definition\n-      \"\" &\n-      --  Formal_Package_Declaration\n-      \"#Defining_Identifier$Name%Generic_Associations6Box_Present'Instance_S\" &\n-         \"pec9ABE_Is_Certain\" &\n-      --  Formal_Private_Type_Definition\n-      \"+Abstract_Present6Tagged_Present8Limited_Present\" &\n-      --  Formal_Signed_Integer_Type_Definition\n-      \"\" &\n-      --  Formal_Subprogram_Declaration\n-      \"#Specification$Default_Name6Box_Present\" &\n-      --  Generic_Association\n-      \"$Selector_Name#Explicit_Generic_Actual_Parameter\" &\n-      --  Handled_Sequence_Of_Statements\n-      \"%Statements&End_Label'Exception_Handlers#At_End_Proc$First_Real_State\" &\n-         \"ment,Zero_Cost_Handling\" &\n-      --  Index_Or_Discriminant_Constraint\n-      \"#Constraints\" &\n-      --  Itype_Reference\n-      \"#Itype\" &\n-      --  Label\n-      \"#Identifier2Exception_Junk\" &\n-      --  Modular_Type_Definition\n-      \"%Expression\" &\n-      --  Number_Declaration\n-      \"#Defining_Identifier%Expression,More_Ids-Prev_Ids\" &\n-      --  Ordinary_Fixed_Point_Definition\n-      \"%Delta_Expression&Real_Range_Specification\" &\n-      --  Others_Choice\n-      \"#Others_Discrete_Choices2All_Others\" &\n-      --  Package_Specification\n-      \"#Defining_Unit_Name$Visible_Declarations%Private_Declarations&End_Lab\" &\n-         \"el'Generic_Parent9Limited_View_Installed\" &\n-      --  Parameter_Association\n-      \"$Selector_Name%Explicit_Actual_Parameter&Next_Named_Actual\" &\n-      --  Parameter_Specification\n-      \"#Defining_Identifier6In_Present8Out_Present$Parameter_Type%Expression\" &\n-         \"4Do_Accessibility_Check,More_Ids-Prev_Ids'Default_Expression\" &\n-      --  Protected_Definition\n-      \"$Visible_Declarations%Private_Declarations&End_Label-Has_Priority_Pra\" &\n-         \"gma\" &\n-      --  Range_Constraint\n-      \"&Range_Expression\" &\n-      --  Real_Range_Specification\n-      \"#Low_Bound$High_Bound\" &\n-      --  Record_Definition\n-      \"&End_Label+Abstract_Present6Tagged_Present8Limited_Present#Component_\" &\n-         \"List4Null_Present\" &\n-      --  Signed_Integer_Type_Definition\n-      \"#Low_Bound$High_Bound\" &\n-      --  Single_Protected_Declaration\n-      \"#Defining_Identifier%Protected_Definition\" &\n-      --  Subunit\n-      \"$Name#Proper_Body%Corresponding_Stub\" &\n-      --  Task_Definition\n-      \"$Visible_Declarations%Private_Declarations&End_Label-Has_Priority_Pra\" &\n-         \"gma,Has_Storage_Size_Pragma.Has_Task_Info_Pragma/Has_Task_Name_Pra\" &\n-         \"gma\" &\n-      --  Triggering_Alternative\n-      \"#Triggering_Statement%Statements&Pragmas_Before\" &\n-      --  Use_Type_Clause\n-      \"$Subtype_Marks%Next_Use_Clause&Hidden_By_Use_Clause\" &\n-      --  Validate_Unchecked_Conversion\n-      \"#Source_Type$Target_Type\" &\n-      --  Variant\n-      \"&Discrete_Choices#Component_List$Enclosing_Variant%Present_Expr'Dchec\" &\n-         \"k_Function\" &\n-      --  Variant_Part\n-      \"$Name#Variants\" &\n-      --  With_Clause\n-      \"$Name&Library_Unit'Corresponding_Spec,First_Name-Last_Name4Context_In\" &\n-         \"stalled+Elaborate_Present6Elaborate_All_Present7Implicit_With8Limi\" &\n-         \"ted_Present9Limited_View_Installed.Unreferenced_In_Spec/No_Entitie\" &\n-         \"s_Ref_In_Spec\" &\n-      --  With_Type_Clause\n-      \"$Name6Tagged_Present\" &\n-      --  Unused_At_End\n-      \"\";\n-\n-   type Pchar_Pos_Array is array (Node_Kind) of Positive;\n-   Pchar_Pos : constant Pchar_Pos_Array := Pchar_Pos_Array'(\n-      N_Unused_At_Start                        => 1,\n-      N_At_Clause                              => 1,\n-      N_Component_Clause                       => 23,\n-      N_Enumeration_Representation_Clause      => 66,\n-      N_Mod_Clause                             => 107,\n-      N_Record_Representation_Clause           => 133,\n-      N_Attribute_Definition_Clause            => 187,\n-      N_Empty                                  => 253,\n-      N_Pragma                                 => 253,\n-      N_Pragma_Argument_Association            => 312,\n-      N_Error                                  => 323,\n-      N_Defining_Character_Literal             => 323,\n-      N_Defining_Identifier                    => 341,\n-      N_Defining_Operator_Symbol               => 359,\n-      N_Expanded_Name                          => 377,\n-      N_Identifier                             => 452,\n-      N_Operator_Symbol                        => 528,\n-      N_Character_Literal                      => 575,\n-      N_Op_Add                                 => 634,\n-      N_Op_Concat                              => 634,\n-      N_Op_Expon                               => 681,\n-      N_Op_Subtract                            => 705,\n-      N_Op_Divide                              => 705,\n-      N_Op_Mod                                 => 761,\n-      N_Op_Multiply                            => 802,\n-      N_Op_Rem                                 => 840,\n-      N_Op_And                                 => 881,\n-      N_Op_Eq                                  => 897,\n-      N_Op_Ge                                  => 897,\n-      N_Op_Gt                                  => 897,\n-      N_Op_Le                                  => 897,\n-      N_Op_Lt                                  => 897,\n-      N_Op_Ne                                  => 897,\n-      N_Op_Or                                  => 897,\n-      N_Op_Xor                                 => 913,\n-      N_Op_Rotate_Left                         => 929,\n-      N_Op_Rotate_Right                        => 944,\n-      N_Op_Shift_Left                          => 959,\n-      N_Op_Shift_Right                         => 974,\n-      N_Op_Shift_Right_Arithmetic              => 989,\n-      N_Op_Abs                                 => 1004,\n-      N_Op_Minus                               => 1004,\n-      N_Op_Not                                 => 1004,\n-      N_Op_Plus                                => 1004,\n-      N_Attribute_Reference                    => 1004,\n-      N_And_Then                               => 1128,\n-      N_Conditional_Expression                 => 1136,\n-      N_Explicit_Dereference                   => 1174,\n-      N_Function_Call                          => 1181,\n-      N_In                                     => 1302,\n-      N_Indexed_Component                      => 1302,\n-      N_Integer_Literal                        => 1321,\n-      N_Not_In                                 => 1357,\n-      N_Null                                   => 1357,\n-      N_Or_Else                                => 1357,\n-      N_Procedure_Call_Statement               => 1365,\n-      N_Qualified_Expression                   => 1486,\n-      N_Raise_Constraint_Error                 => 1510,\n-      N_Raise_Program_Error                    => 1527,\n-      N_Raise_Storage_Error                    => 1544,\n-      N_Aggregate                              => 1561,\n-      N_Allocator                              => 1717,\n-      N_Extension_Aggregate                    => 1794,\n-      N_Range                                  => 1897,\n-      N_Real_Literal                           => 1938,\n-      N_Reference                              => 2008,\n-      N_Selected_Component                     => 2015,\n-      N_Slice                                  => 2099,\n-      N_String_Literal                         => 2121,\n-      N_Subprogram_Info                        => 2147,\n-      N_Type_Conversion                        => 2158,\n-      N_Unchecked_Expression                   => 2273,\n-      N_Unchecked_Type_Conversion              => 2284,\n-      N_Subtype_Indication                     => 2339,\n-      N_Component_Declaration                  => 2379,\n-      N_Entry_Declaration                      => 2463,\n-      N_Formal_Object_Declaration              => 2555,\n-      N_Formal_Type_Declaration                => 2640,\n-      N_Full_Type_Declaration                  => 2741,\n-      N_Incomplete_Type_Declaration            => 2829,\n-      N_Loop_Parameter_Specification           => 2907,\n-      N_Object_Declaration                     => 2971,\n-      N_Protected_Type_Declaration             => 3218,\n-      N_Private_Extension_Declaration          => 3306,\n-      N_Private_Type_Declaration               => 3420,\n-      N_Subtype_Declaration                    => 3546,\n-      N_Function_Specification                 => 3620,\n-      N_Procedure_Specification                => 3712,\n-      N_Entry_Index_Specification              => 3791,\n-      N_Freeze_Entity                          => 3839,\n-      N_Access_Function_Definition             => 3907,\n-      N_Access_Procedure_Definition            => 3963,\n-      N_Task_Type_Declaration                  => 4006,\n-      N_Package_Body_Stub                      => 4109,\n-      N_Protected_Body_Stub                    => 4161,\n-      N_Subprogram_Body_Stub                   => 4213,\n-      N_Task_Body_Stub                         => 4259,\n-      N_Function_Instantiation                 => 4311,\n-      N_Package_Instantiation                  => 4397,\n-      N_Procedure_Instantiation                => 4483,\n-      N_Package_Body                           => 4569,\n-      N_Subprogram_Body                        => 4667,\n-      N_Protected_Body                         => 4894,\n-      N_Task_Body                              => 4976,\n-      N_Implicit_Label_Declaration             => 5114,\n-      N_Package_Declaration                    => 5150,\n-      N_Single_Task_Declaration                => 5219,\n-      N_Subprogram_Declaration                 => 5255,\n-      N_Use_Package_Clause                     => 5315,\n-      N_Generic_Package_Declaration            => 5358,\n-      N_Generic_Subprogram_Declaration         => 5455,\n-      N_Constrained_Array_Definition           => 5528,\n-      N_Unconstrained_Array_Definition         => 5592,\n-      N_Exception_Renaming_Declaration         => 5641,\n-      N_Object_Renaming_Declaration            => 5666,\n-      N_Package_Renaming_Declaration           => 5738,\n-      N_Subprogram_Renaming_Declaration        => 5774,\n-      N_Generic_Function_Renaming_Declaration  => 5824,\n-      N_Generic_Package_Renaming_Declaration   => 5860,\n-      N_Generic_Procedure_Renaming_Declaration => 5896,\n-      N_Abort_Statement                        => 5932,\n-      N_Accept_Statement                       => 5938,\n-      N_Assignment_Statement                   => 6033,\n-      N_Asynchronous_Select                    => 6119,\n-      N_Block_Statement                        => 6157,\n-      N_Case_Statement                         => 6322,\n-      N_Code_Statement                         => 6355,\n-      N_Conditional_Entry_Call                 => 6366,\n-      N_Delay_Relative_Statement               => 6405,\n-      N_Delay_Until_Statement                  => 6416,\n-      N_Entry_Call_Statement                   => 6427,\n-      N_Free_Statement                         => 6474,\n-      N_Goto_Statement                         => 6516,\n-      N_Loop_Statement                         => 6536,\n-      N_Null_Statement                         => 6621,\n-      N_Raise_Statement                        => 6621,\n-      N_Requeue_Statement                      => 6626,\n-      N_Return_Statement                       => 6645,\n-      N_Selective_Accept                       => 6719,\n-      N_Timed_Entry_Call                       => 6755,\n-      N_Exit_Statement                         => 6796,\n-      N_If_Statement                           => 6811,\n-      N_Accept_Alternative                     => 6874,\n-      N_Delay_Alternative                      => 6950,\n-      N_Elsif_Part                             => 7002,\n-      N_Entry_Body_Formal_Part                 => 7046,\n-      N_Iteration_Scheme                       => 7107,\n-      N_Terminate_Alternative                  => 7164,\n-      N_Abortable_Part                         => 7203,\n-      N_Abstract_Subprogram_Declaration        => 7214,\n-      N_Access_Definition                      => 7228,\n-      N_Access_To_Object_Definition            => 7241,\n-      N_Case_Statement_Alternative             => 7289,\n-      N_Compilation_Unit                       => 7317,\n-      N_Compilation_Unit_Aux                   => 7456,\n-      N_Component_Association                  => 7506,\n-      N_Component_List                         => 7550,\n-      N_Derived_Type_Definition                => 7592,\n-      N_Decimal_Fixed_Point_Definition         => 7650,\n-      N_Defining_Program_Unit_Name             => 7710,\n-      N_Delta_Constraint                       => 7735,\n-      N_Designator                             => 7769,\n-      N_Digits_Constraint                      => 7785,\n-      N_Discriminant_Association               => 7820,\n-      N_Discriminant_Specification             => 7846,\n-      N_Enumeration_Type_Definition            => 7913,\n-      N_Entry_Body                             => 7932,\n-      N_Entry_Call_Alternative                 => 8039,\n-      N_Exception_Declaration                  => 8086,\n-      N_Exception_Handler                      => 8135,\n-      N_Floating_Point_Definition              => 8200,\n-      N_Formal_Decimal_Fixed_Point_Definition  => 8243,\n-      N_Formal_Derived_Type_Definition         => 8243,\n-      N_Formal_Discrete_Type_Definition        => 8289,\n-      N_Formal_Floating_Point_Definition       => 8289,\n-      N_Formal_Modular_Type_Definition         => 8289,\n-      N_Formal_Ordinary_Fixed_Point_Definition => 8289,\n-      N_Formal_Package_Declaration             => 8289,\n-      N_Formal_Private_Type_Definition         => 8376,\n-      N_Formal_Signed_Integer_Type_Definition  => 8424,\n-      N_Formal_Subprogram_Declaration          => 8424,\n-      N_Generic_Association                    => 8463,\n-      N_Handled_Sequence_Of_Statements         => 8511,\n-      N_Index_Or_Discriminant_Constraint       => 8603,\n-      N_Itype_Reference                        => 8615,\n-      N_Label                                  => 8621,\n-      N_Modular_Type_Definition                => 8647,\n-      N_Number_Declaration                     => 8658,\n-      N_Ordinary_Fixed_Point_Definition        => 8707,\n-      N_Others_Choice                          => 8749,\n-      N_Package_Specification                  => 8784,\n-      N_Parameter_Association                  => 8893,\n-      N_Parameter_Specification                => 8951,\n-      N_Protected_Definition                   => 9080,\n-      N_Range_Constraint                       => 9152,\n-      N_Real_Range_Specification               => 9169,\n-      N_Record_Definition                      => 9190,\n-      N_Signed_Integer_Type_Definition         => 9276,\n-      N_Single_Protected_Declaration           => 9297,\n-      N_Subunit                                => 9338,\n-      N_Task_Definition                        => 9374,\n-      N_Triggering_Alternative                 => 9512,\n-      N_Use_Type_Clause                        => 9559,\n-      N_Validate_Unchecked_Conversion          => 9610,\n-      N_Variant                                => 9634,\n-      N_Variant_Part                           => 9713,\n-      N_With_Clause                            => 9727,\n-      N_With_Type_Clause                       => 9941,\n-      N_Unused_At_End                          => 9961);\n-\n-end Treeprs;"}]}