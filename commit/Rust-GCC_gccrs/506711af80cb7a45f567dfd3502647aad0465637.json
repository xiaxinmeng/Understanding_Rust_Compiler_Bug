{"sha": "506711af80cb7a45f567dfd3502647aad0465637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2NzExYWY4MGNiN2E0NWY1NjdkZmQzNTAyNjQ3YWFkMDQ2NTYzNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-14T11:26:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-07-14T11:26:35Z"}, "message": "(assemble_variable): If low part of size doesn't fit in an int,\n\nvariable is too large.\n\nFrom-SVN: r14428", "tree": {"sha": "ccb264bc55345ce089073dfa127eee3aa7f19935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccb264bc55345ce089073dfa127eee3aa7f19935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/506711af80cb7a45f567dfd3502647aad0465637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506711af80cb7a45f567dfd3502647aad0465637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506711af80cb7a45f567dfd3502647aad0465637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506711af80cb7a45f567dfd3502647aad0465637/comments", "author": null, "committer": null, "parents": [{"sha": "9ddca353b96f567da5733851dfb028ccdffb9156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddca353b96f567da5733851dfb028ccdffb9156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ddca353b96f567da5733851dfb028ccdffb9156"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "dae266244c8b050aa1b7408b33b0f176ddc12cf5", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506711af80cb7a45f567dfd3502647aad0465637/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506711af80cb7a45f567dfd3502647aad0465637/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=506711af80cb7a45f567dfd3502647aad0465637", "patch": "@@ -1272,14 +1272,18 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   if (! dont_output_data)\n     {\n+      int size;\n+\n       if (TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n \tgoto finish;\n \n       /* This is better than explicit arithmetic, since it avoids overflow.  */\n       size_tree = size_binop (CEIL_DIV_EXPR,\n \t\t\t      DECL_SIZE (decl), size_int (BITS_PER_UNIT));\n \n-      if (TREE_INT_CST_HIGH (size_tree) != 0)\n+      size = TREE_INT_CST_LOW (size_tree);\n+      if (TREE_INT_CST_HIGH (size_tree) != 0\n+\t  || size != TREE_INT_CST_LOW (size_tree))\n \t{\n \t  error_with_decl (decl, \"size of variable `%s' is too large\");\n \t  goto finish;"}]}