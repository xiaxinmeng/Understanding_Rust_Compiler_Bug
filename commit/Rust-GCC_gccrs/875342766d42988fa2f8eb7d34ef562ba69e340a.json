{"sha": "875342766d42988fa2f8eb7d34ef562ba69e340a", "node_id": "C_kwDOANBUbNoAKDg3NTM0Mjc2NmQ0Mjk4OGZhMmY4ZWI3ZDM0ZWY1NjJiYTY5ZTM0MGE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-28T13:43:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-28T13:43:07Z"}, "message": "gimple-fold: fix location of loads for memory ops [PR104308]\n\nPR analyzer/104308 reports that when -Wanalyzer-use-of-uninitialized-value\ncomplains about certain memmove operations where the source is\nuninitialized, the diagnostic uses UNKNOWN_LOCATION:\n\nIn function 'main':\ncc1: warning: use of uninitialized value '*(short unsigned int *)&s + 1' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n  'main': event 1\n    |\n    |pr104308.c:5:8:\n    |    5 |   char s[5]; /* { dg-message \"region created on stack here\" } */\n    |      |        ^\n    |      |        |\n    |      |        (1) region created on stack here\n    |\n  'main': event 2\n    |\n    |cc1:\n    | (2): use of uninitialized value '*(short unsigned int *)&s + 1' here\n    |\n\nThe issue is that gimple_fold_builtin_memory_op converts a memmove to:\n\n  _3 = MEM <unsigned short> [(char * {ref-all})_1];\n  MEM <unsigned short> [(char * {ref-all})&s] = _3;\n\nbut only sets the location of the 2nd stmt, not the 1st.\n\nFixed thusly, giving:\n\npr104308.c: In function 'main':\npr104308.c:6:3: warning: use of uninitialized value '*(short unsigned int *)&s + 1' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n    6 |   memmove(s, s + 1, 2); /* { dg-warning \"use of uninitialized value\" } */\n      |   ^~~~~~~~~~~~~~~~~~~~\n  'main': events 1-2\n    |\n    |    5 |   char s[5]; /* { dg-message \"region created on stack here\" } */\n    |      |        ^\n    |      |        |\n    |      |        (1) region created on stack here\n    |    6 |   memmove(s, s + 1, 2); /* { dg-warning \"use of uninitialized value\" } */\n    |      |   ~~~~~~~~~~~~~~~~~~~~\n    |      |   |\n    |      |   (2) use of uninitialized value '*(short unsigned int *)&s + 1' here\n    |\n\nOne side-effect of this change is a change in part of the output of\ngcc.dg/uninit-40.c from:\n\n  uninit-40.c:47:3: warning: \u2018*(long unsigned int *)(&u[1][0][0])\u2019 is used uninitialized [-Wuninitialized]\n     47 |   __builtin_memcpy (&v[1], &u[1], sizeof (V));\n        |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  uninit-40.c:45:5: note: \u2018*(long unsigned int *)(&u[1][0][0])\u2019 was declared here\n     45 |   V u[2], v[2];\n        |     ^\n\nto:\n\n  uninit-40.c:47:3: warning: \u2018u\u2019 is used uninitialized [-Wuninitialized]\n     47 |   __builtin_memcpy (&v[1], &u[1], sizeof (V));\n        |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  uninit-40.c:45:5: note: \u2018u\u2019 declared here\n     45 |   V u[2], v[2];\n        |     ^\n\nWhat's happening is that pass \"early_uninit\"(29)'s call to\nmaybe_warn_operand is guarded by this condition:\n  1051            else if (gimple_assign_load_p (stmt)\n  1052                     && gimple_has_location (stmt))\n\nBefore the patch, the stmt:\n  _3 = MEM <unsigned long> [(char * {ref-all})&u + 8B];\nhas no location, and so early_uninit skips this operand at line\n1052 above.  Later, pass \"uninit\"(217) tests the var_decl \"u$8\", and\nemits a warning for it.\n\nWith the patch, the stmt has a location, and so early_uninit emits a\nwarning for \"u\" and sets a NW_UNINIT warning suppression at that\nlocation.  Later, pass \"uninit\"(217)'s test of \"u$8\" is rejected\ndue to that per-location suppression of uninit warnings, from the\nearlier warning.\n\ngcc/ChangeLog:\n\tPR analyzer/104308\n\t* gimple-fold.cc (gimple_fold_builtin_memory_op): When optimizing\n\tto loads then stores, set the location of the new load stmt.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104308\n\t* gcc.dg/analyzer/pr104308.c: New test.\n\t* gcc.dg/uninit-40.c (foo): Update expression in expected message.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "16efcaf31e5671325a77f4303f041fe36b6be9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16efcaf31e5671325a77f4303f041fe36b6be9a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875342766d42988fa2f8eb7d34ef562ba69e340a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875342766d42988fa2f8eb7d34ef562ba69e340a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875342766d42988fa2f8eb7d34ef562ba69e340a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875342766d42988fa2f8eb7d34ef562ba69e340a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19b87a06482756739087283cd8b884cb3de693f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b87a06482756739087283cd8b884cb3de693f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b87a06482756739087283cd8b884cb3de693f9"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "e73bc6a71375dabbaa76bdf6b9c4c5cd64155cd9", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875342766d42988fa2f8eb7d34ef562ba69e340a/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875342766d42988fa2f8eb7d34ef562ba69e340a/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=875342766d42988fa2f8eb7d34ef562ba69e340a", "patch": "@@ -1039,6 +1039,7 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t\t\t\t\t\t  new_stmt);\n \t\t\t  gimple_assign_set_lhs (new_stmt, srcmem);\n \t\t\t  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n+\t\t\t  gimple_set_location (new_stmt, loc);\n \t\t\t  gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n \t\t\t}\n \t\t      if (dest_align < GET_MODE_ALIGNMENT (mode))"}, {"sha": "9cd5ee6feeeabdfb839720e868ebfb7e95cbc182", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104308.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875342766d42988fa2f8eb7d34ef562ba69e340a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875342766d42988fa2f8eb7d34ef562ba69e340a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c?ref=875342766d42988fa2f8eb7d34ef562ba69e340a", "patch": "@@ -0,0 +1,8 @@\n+#include <string.h>\n+\n+int main()\n+{\n+  char s[5]; /* { dg-message \"region created on stack here\" } */\n+  memmove(s, s + 1, 2); /* { dg-warning \"use of uninitialized value\" } */\n+  return 0;\n+}"}, {"sha": "567707a885eb40980554ebd1fb7165508d4740d4", "filename": "gcc/testsuite/gcc.dg/uninit-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875342766d42988fa2f8eb7d34ef562ba69e340a/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875342766d42988fa2f8eb7d34ef562ba69e340a/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-40.c?ref=875342766d42988fa2f8eb7d34ef562ba69e340a", "patch": "@@ -44,7 +44,7 @@ foo (int *q)\n   /* memcpy folding is too target dependent to test it everywhere.  */\n   V u[2], v[2];\n   u[0][0][0] = 1;\n-  __builtin_memcpy (&v[1], &u[1], sizeof (V));\t\t/* { dg-warning \"'\\\\*\\\\(\\(long \\)?long unsigned int \\\\*\\\\)\\\\(&u\\\\\\[1\\\\\\]\\\\\\[0\\\\\\]\\\\\\[0\\\\\\]\\\\)' is used uninitialized\" \"\" { target i?86-*-* x86_64-*-* } } */\n+  __builtin_memcpy (&v[1], &u[1], sizeof (V));\t\t/* { dg-warning \"'u' is used uninitialized\" \"\" { target i?86-*-* x86_64-*-* } } */\n   baz (&v[1]);\n #endif\n }"}]}