{"sha": "860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwYzhmM2JhOWJhZDhkZGMyMWFiOGI4N2IyODgxYjRjN2ZkYTI4ZA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-04-25T00:09:11Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-04-25T00:09:11Z"}, "message": "re PR fortran/20879 (argument to ICHAR must have length one)\n\n2005-04-25  Paul Brook  <paul@codesourcery.com>\n\tSteven G. Kargl  <kargls@comcast.net>\n\n\tPR fortran/20879\n\t* check.c (gfc_check_ichar_iachar): New function.\n\t* instinsic.h (gfc_check_ichar_iachar): Add prototype.\n\t* intrinsic.c (add_functions): Use it.\n\t* primary.c (match_varspec, gfc_match_rvalue): Clear incorrect\n\tcharacter expression lengths.\n\ntestsuite/\n\t* gfortran.dg/ichar_1.f90: New file.\n\nCo-Authored-By: Steven G. Kargl <kargls@comcast.net>\n\nFrom-SVN: r98686", "tree": {"sha": "3658d9e25126c9de8a4bcb31050b0b21afdca803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3658d9e25126c9de8a4bcb31050b0b21afdca803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/comments", "author": null, "committer": null, "parents": [{"sha": "1fb2fbeb218f505cd073a975b171eca5194bd6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb2fbeb218f505cd073a975b171eca5194bd6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb2fbeb218f505cd073a975b171eca5194bd6ef"}], "stats": {"total": 134, "additions": 132, "deletions": 2}, "files": [{"sha": "bf87e6ad396a7c18ff655ff1e1067eb6246709c4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -1,3 +1,13 @@\n+2005-04-25  Paul Brook  <paul@codesourcery.com>\n+\tSteven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/20879\n+\t* check.c (gfc_check_ichar_iachar): New function.\n+\t* instinsic.h (gfc_check_ichar_iachar): Add prototype.\n+\t* intrinsic.c (add_functions): Use it.\n+\t* primary.c (match_varspec, gfc_match_rvalue): Clear incorrect\n+\tcharacter expression lengths.\n+\n 2005-04-24  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/20059"}, {"sha": "7a27d04c13f3d772637ce92de0db44ab5fc426ca", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -921,6 +921,64 @@ gfc_check_ibset (gfc_expr * i, gfc_expr * pos)\n }\n \n \n+try\n+gfc_check_ichar_iachar (gfc_expr * c)\n+{\n+  int i;\n+\n+  if (type_check (c, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  /* Check that the argument is length one.  Non-constant lengths\n+     can't be checked here, so assume thay are ok.  */\n+  if (c->ts.cl && c->ts.cl->length)\n+    {\n+      /* If we already have a length for this expression then use it.  */\n+      if (c->ts.cl->length->expr_type != EXPR_CONSTANT)\n+\treturn SUCCESS;\n+      i = mpz_get_si (c->ts.cl->length->value.integer);\n+    }\n+  else if (c->expr_type == EXPR_VARIABLE || c->expr_type == EXPR_SUBSTRING)\n+    {\n+      gfc_expr *start;\n+      gfc_expr *end;\n+      gfc_ref *ref;\n+\n+      /* Substring references don't have the charlength set.  */\n+      ref = c->ref;\n+      while (ref && ref->type != REF_SUBSTRING)\n+\tref = ref->next;\n+\n+      gcc_assert (ref == NULL || ref->type == REF_SUBSTRING);\n+\n+      if (!ref)\n+\treturn SUCCESS;\n+\n+      start = ref->u.ss.start;\n+      end = ref->u.ss.end;\n+\n+      gcc_assert (start);\n+      if (end == NULL || end->expr_type != EXPR_CONSTANT\n+\t  || start->expr_type != EXPR_CONSTANT)\n+\treturn SUCCESS;\n+\n+      i = mpz_get_si (end->value.integer) + 1\n+\t  - mpz_get_si (start->value.integer);\n+    }\n+  else\n+    return SUCCESS;\n+\n+  if (i != 1)\n+    {\n+      gfc_error (\"Argument of %s at %L must be of length one\", \n+\t\t gfc_current_intrinsic, &c->where);\n+      return FAILURE;\n+    }\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_idnint (gfc_expr * a)\n {"}, {"sha": "0b50cdcaa11151be389fd0eaea66dac98bf3e66e", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -1342,7 +1342,7 @@ add_functions (void)\n   make_generic (\"huge\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_1 (\"iachar\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n-\t     NULL, gfc_simplify_iachar, NULL,\n+\t     gfc_check_ichar_iachar, gfc_simplify_iachar, NULL,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"iachar\", GFC_ISYM_IACHAR, GFC_STD_F95);\n@@ -1384,7 +1384,7 @@ add_functions (void)\n   make_generic (\"ibset\", GFC_ISYM_IBSET, GFC_STD_F95);\n \n   add_sym_1 (\"ichar\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n-\t     NULL, gfc_simplify_ichar, gfc_resolve_ichar,\n+\t     gfc_check_ichar_iachar, gfc_simplify_ichar, gfc_resolve_ichar,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"ichar\", GFC_ISYM_ICHAR, GFC_STD_F77);"}, {"sha": "15171d1aa1434c36a4cd0f58e1a89f3d03e40956", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -63,6 +63,7 @@ try gfc_check_iand (gfc_expr *, gfc_expr *);\n try gfc_check_ibclr (gfc_expr *, gfc_expr *);\n try gfc_check_ibits (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_ibset (gfc_expr *, gfc_expr *);\n+try gfc_check_ichar_iachar (gfc_expr *);\n try gfc_check_idnint (gfc_expr *);\n try gfc_check_ieor (gfc_expr *, gfc_expr *);\n try gfc_check_index (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "38f9939201f3b8ea423bbbe25577e51c015cc037", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -1516,6 +1516,9 @@ match_varspec (gfc_expr * primary, int equiv_flag)\n \t  if (primary->expr_type == EXPR_CONSTANT)\n \t    primary->expr_type = EXPR_SUBSTRING;\n \n+\t  if (substring)\n+\t    primary->ts.cl = NULL;\n+\n \t  break;\n \n \tcase MATCH_NO:\n@@ -1989,6 +1992,8 @@ gfc_match_rvalue (gfc_expr ** result)\n \t\t}\n \n \t      e->ts = sym->ts;\n+\t      if (e->ref)\n+\t\te->ts.cl = NULL;\n \t      m = MATCH_YES;\n \t      break;\n \t    }"}, {"sha": "479f1f45aadd829f02551bc5b8f55f193a567c65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -1,3 +1,9 @@\n+2005-04-25  Paul Brook  <paul@codesourcery.com>\n+\tSteven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/20879\n+\t* gfortran.dg/ichar_1.f90: New file.\n+\n 2005-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/20991"}, {"sha": "e63b57a8cf82636313d3e04f3e4fd8d7aa2e7e24", "filename": "gcc/testsuite/gfortran.dg/ichar_1.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90?ref=860c8f3ba9bad8ddc21ab8b87b2881b4c7fda28d", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+! PR20879\n+! Check that we reject expressions longer than one character for the\n+! ICHAR and IACHAR intrinsics.\n+\n+! Assumed length variables are special because the frontend doesn't have\n+! an expression for their length\n+subroutine test (c)\n+  character(len=*) :: c\n+  integer i\n+  i = ichar(c)\n+  i = ichar(c(2:))\n+  i = ichar(c(:1))\n+end subroutine\n+\n+program ichar_1\n+   integer i\n+   integer, parameter :: j = 2\n+   character(len=8) :: c = 'abcd'\n+   character(len=1) :: g1(2)\n+   character(len=1) :: g2(2,2)\n+   character*1, parameter :: s1 = 'e'\n+   character*2, parameter :: s2 = 'ef'\n+\n+   if (ichar(c(3:3)) /= 97) call abort\n+   if (ichar(c(:1)) /= 97) call abort\n+   if (ichar(c(j:j)) /= 98) call abort\n+   if (ichar(s1) /= 101) call abort\n+   if (ichar('f') /= 102) call abort\n+   g1(1) = 'a'\n+   if (ichar(g1(1)) /= 97) call abort\n+   if (ichar(g1(1)(:)) /= 97) call abort\n+   g2(1,1) = 'a'\n+   if (ichar(g2(1,1)) /= 97) call abort\n+\n+   i = ichar(c)      ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(c(:))   ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(s2)     ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(c(1:2)) ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(c(1:))  ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar('abc')  ! { dg-error \"must be of length one\" \"\" }\n+\n+   ! ichar and iachar use the same checking routines. DO a couple of tests to\n+   ! make sure it's not totally broken.\n+\n+   if (ichar(c(3:3)) /= 97) call abort\n+   i = ichar(c)      ! { dg-error \"must be of length one\" \"\" }\n+\n+   call test(g1(1))\n+end program ichar_1"}]}