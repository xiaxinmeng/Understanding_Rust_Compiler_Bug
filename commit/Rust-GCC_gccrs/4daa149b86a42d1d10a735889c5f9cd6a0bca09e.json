{"sha": "4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhYTE0OWI4NmE0MmQxZDEwYTczNTg4OWM1ZjljZDZhMGJjYTA5ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-25T22:33:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-25T22:33:32Z"}, "message": "gfortran.h (gfc_option_t): Remove flags moved as Var to .opt.\n\n2014-11-25  Tobias Burnus  <burnus@net-b.de>\n\ngcc/fortran/\n        * gfortran.h (gfc_option_t): Remove flags moved as Var to .opt.\n        (gfc_error_now_1): Renamed from gfc_error_now.\n        (gfc_error_now): Renamed from gfc_error_now_2.\n        (gfc_warning_now_1): Renamed from gfc_warning_now.\n        (gfc_warning_now): Renamed from gfc_warning_now_2.\n        * error.c (gfc_error_now_1): Renamed from gfc_error_now.\n        (gfc_error_now): Renamed from gfc_error_now_2.\n        (gfc_warning_now_1): Renamed from gfc_warning_now.\n        (gfc_warning_now): Renamed from gfc_warning_now_2.\n        (gfc_get_errors): Include common diagnostic in count.\n        * lang.opt (Wc-binding-type, Wconversion, Wconversion-extra,\n        Wintrinsics-std): Create a Var for those warnings.\n        * check.c (gfc_check_cmplx): Pass warning flag to\n        diagnostic function.\n        * decl.c (get_proc_name, gfc_verify_c_interop_param, build_sym\n        gfc_set_constant_character_len, verify_bind_c_sym): Ditto; use\n        _1 for old diagnostic, remove _2 for new diagnostic.\n        * expr.c (gfc_check_assign, gfc_check_vardef_context): Ditto.\n        * frontend-passes.c (doloop_code, do_function): Ditto.\n        * intrinsic.c (gfc_is_intrinsic, gfc_convert_type_warn): Ditto.\n        * match.c (gfc_match_common): Ditto.\n        * module.c (use_iso_fortran_env_module, gfc_use_module): Ditto.\n        * parse.c (decode_statement, decode_gcc_attribute, next_free,\n        next_fixed, gfc_check_do_variable): Ditto.\n        * resolve.c (resolve_common_vars, resolve_ordinary_assign):\n        Ditto.\n        * scanner.c (add_path_to_list, skip_free_comments,\n        gfc_next_char_literal, gfc_gobble_whitespace, load_line,\n        preprocessor_line, load_file): Ditto.\n        * symbol.c (gfc_set_default_type, verify_bind_c_derived_type):\n        Ditto.\n        * options.c (gfc_post_options): Ditto.\n        (gfc_init_options, set_Wall, gfc_handle_option): Ditto; remove\n        flags which now have a Var.\n        * invoke.texi (Wconversion-extra): Make clear that the flag\n        does not imply -Wconversion.\n\ngcc/testsuite/\n        * gfortran.dg/empty_label.f: Change test to continue testing\n        for -fmax-errors=1.\n        * gfortran.dg/empty_label.f90: Ditto.\n        * gfortran.dg/warnings_are_errors_1.f90: Update dg-*.\n\nFrom-SVN: r218067", "tree": {"sha": "473bf73756e4b0fb99262902721646ab2e7d2c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/473bf73756e4b0fb99262902721646ab2e7d2c49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/comments", "author": null, "committer": null, "parents": [{"sha": "b1edcad11f8688df33e136de11c63e61aea7a182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1edcad11f8688df33e136de11c63e61aea7a182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1edcad11f8688df33e136de11c63e61aea7a182"}], "stats": {"total": 460, "additions": 247, "deletions": 213}, "files": [{"sha": "970671a3553dc562367088afced23b2a5f238ef3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1,3 +1,42 @@\n+2014-11-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Remove flags moved as Var to .opt.\n+\t(gfc_error_now_1): Renamed from gfc_error_now.\n+\t(gfc_error_now): Renamed from gfc_error_now_2.\n+\t(gfc_warning_now_1): Renamed from gfc_warning_now.\n+\t(gfc_warning_now): Renamed from gfc_warning_now_2.\n+\t* error.c (gfc_error_now_1): Renamed from gfc_error_now.\n+\t(gfc_error_now): Renamed from gfc_error_now_2.\n+\t(gfc_warning_now_1): Renamed from gfc_warning_now.\n+\t(gfc_warning_now): Renamed from gfc_warning_now_2.\n+\t(gfc_get_errors): Include common diagnostic in count.\n+\t* lang.opt (Wc-binding-type, Wconversion, Wconversion-extra,\n+\tWintrinsics-std): Create a Var for those warnings.\n+\t* check.c (gfc_check_cmplx): Pass warning flag to\n+\tdiagnostic function.\n+\t* decl.c (get_proc_name, gfc_verify_c_interop_param, build_sym\n+\tgfc_set_constant_character_len, verify_bind_c_sym): Ditto; use\n+\t_1 for old diagnostic, remove _2 for new diagnostic.\n+\t* expr.c (gfc_check_assign, gfc_check_vardef_context): Ditto.\n+\t* frontend-passes.c (doloop_code, do_function): Ditto.\n+\t* intrinsic.c (gfc_is_intrinsic, gfc_convert_type_warn): Ditto.\n+\t* match.c (gfc_match_common): Ditto.\n+\t* module.c (use_iso_fortran_env_module, gfc_use_module): Ditto.\n+\t* parse.c (decode_statement, decode_gcc_attribute, next_free,\n+\tnext_fixed, gfc_check_do_variable): Ditto.\n+\t* resolve.c (resolve_common_vars, resolve_ordinary_assign):\n+\tDitto.\n+\t* scanner.c (add_path_to_list, skip_free_comments,\n+\tgfc_next_char_literal, gfc_gobble_whitespace, load_line,\n+\tpreprocessor_line, load_file): Ditto.\n+\t* symbol.c (gfc_set_default_type, verify_bind_c_derived_type):\n+\tDitto.\n+\t* options.c (gfc_post_options): Ditto.\n+\t(gfc_init_options, set_Wall, gfc_handle_option): Ditto; remove\n+\tflags which now have a Var.\n+\t* invoke.texi (Wconversion-extra): Make clear that the flag\n+\tdoes not imply -Wconversion.\n+\n 2014-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/63938"}, {"sha": "5fea5a860b5fe0d721ab3a69930d2ee662a16e8b", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1398,17 +1398,18 @@ gfc_check_cmplx (gfc_expr *x, gfc_expr *y, gfc_expr *kind)\n   if (!kind_check (kind, 2, BT_COMPLEX))\n     return false;\n \n-  if (!kind && gfc_option.gfc_warn_conversion\n+  if (!kind && warn_conversion\n       && x->ts.type == BT_REAL && x->ts.kind > gfc_default_real_kind)\n-    gfc_warning_now (\"Conversion from %s to default-kind COMPLEX(%d) at %L \"\n-\t\t     \"might lose precision, consider using the KIND argument\",\n-\t\t     gfc_typename (&x->ts), gfc_default_real_kind, &x->where);\n-  else if (y && !kind && gfc_option.gfc_warn_conversion\n+    gfc_warning_now (OPT_Wconversion, \"Conversion from %s to default-kind \"\n+\t\t     \"COMPLEX(%d) at %L might lose precision, consider using \"\n+\t\t     \"the KIND argument\", gfc_typename (&x->ts),\n+\t\t     gfc_default_real_kind, &x->where);\n+  else if (y && !kind && warn_conversion\n \t   && y->ts.type == BT_REAL && y->ts.kind > gfc_default_real_kind)\n-    gfc_warning_now (\"Conversion from %s to default-kind COMPLEX(%d) at %L \"\n-\t\t     \"might lose precision, consider using the KIND argument\",\n-\t\t     gfc_typename (&y->ts), gfc_default_real_kind, &y->where);\n-\n+    gfc_warning_now (OPT_Wconversion, \"Conversion from %s to default-kind \"\n+\t\t     \"COMPLEX(%d) at %L might lose precision, consider using \"\n+\t\t     \"the KIND argument\", gfc_typename (&y->ts),\n+\t\t     gfc_default_real_kind, &y->where);\n   return true;\n }\n "}, {"sha": "e7c06f3855bd8416d541bb724c9bf9bf58e3f39f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -898,17 +898,17 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n \t  && sym->attr.proc != 0\n \t  && (sym->attr.subroutine || sym->attr.function)\n \t  && sym->attr.if_source != IFSRC_UNKNOWN)\n-\tgfc_error_now (\"Procedure '%s' at %C is already defined at %L\",\n-\t\t       name, &sym->declared_at);\n+\tgfc_error_now_1 (\"Procedure '%s' at %C is already defined at %L\",\n+\t\t\t name, &sym->declared_at);\n \n       /* Trap a procedure with a name the same as interface in the\n \t encompassing scope.  */\n       if (sym->attr.generic != 0\n \t  && (sym->attr.subroutine || sym->attr.function)\n \t  && !sym->attr.mod_proc)\n-\tgfc_error_now (\"Name '%s' at %C is already defined\"\n-\t\t       \" as a generic interface at %L\",\n-\t\t       name, &sym->declared_at);\n+\tgfc_error_now_1 (\"Name '%s' at %C is already defined\"\n+\t\t\t \" as a generic interface at %L\",\n+\t\t\t name, &sym->declared_at);\n \n       /* Trap declarations of attributes in encompassing scope.  The\n \t signature for this is that ts.kind is set.  Legitimate\n@@ -919,9 +919,9 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n \t  && gfc_current_ns->parent != NULL\n \t  && sym->attr.access == 0\n \t  && !module_fcn_entry)\n-\tgfc_error_now (\"Procedure '%s' at %C has an explicit interface \"\n-\t\t       \"and must not have attributes declared at %L\",\n-\t\t       name, &sym->declared_at);\n+\tgfc_error_now_1 (\"Procedure '%s' at %C has an explicit interface \"\n+\t\t\t \"and must not have attributes declared at %L\",\n+\t\t\t name, &sym->declared_at);\n     }\n \n   if (gfc_current_ns->parent == NULL || *result == NULL)\n@@ -990,9 +990,9 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n     {\n       if (sym->attr.is_bind_c == 0)\n         {\n-          gfc_error_now_2 (\"Procedure %qs at %L must have the BIND(C) \"\n-\t\t\t   \"attribute to be C interoperable\", sym->name,\n-\t\t\t   &(sym->declared_at));\n+          gfc_error_now (\"Procedure %qs at %L must have the BIND(C) \"\n+\t\t\t \"attribute to be C interoperable\", sym->name,\n+\t\t\t &(sym->declared_at));\n           return false;\n         }\n       else\n@@ -1029,7 +1029,7 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t\t\t   \"because it is polymorphic\",\n \t\t\t   sym->name, &(sym->declared_at),\n \t\t\t   sym->ns->proc_name->name);\n-\t      else if (gfc_option.warn_c_binding_type)\n+\t      else if (warn_c_binding_type)\n \t\tgfc_warning (\"Variable '%s' at %L is a dummy argument of the \"\n \t\t\t     \"BIND(C) procedure '%s' but may not be C \"\n \t\t\t     \"interoperable\",\n@@ -1182,9 +1182,9 @@ build_sym (const char *name, gfc_charlen *cl, bool cl_deferred,\n       if (sym->common_block != NULL && sym->common_block->is_bind_c == 1\n           && sym->ts.is_c_interop != 1)\n         {\n-          gfc_error_now (\"Variable '%s' in common block '%s' at %C \"\n+          gfc_error_now (\"Variable %qs in common block %qs at %C \"\n                          \"must be declared with a C interoperable \"\n-                         \"kind since common block '%s' is BIND(C)\",\n+                         \"kind since common block %qs is BIND(C)\",\n                          sym->name, sym->common_block->name,\n                          sym->common_block->name);\n           gfc_clear_error ();\n@@ -1224,9 +1224,9 @@ gfc_set_constant_character_len (int len, gfc_expr *expr, int check_len)\n \tgfc_wide_memset (&s[slen], ' ', len - slen);\n \n       if (warn_character_truncation && slen > len)\n-\tgfc_warning_now_2 (OPT_Wcharacter_truncation,\n-\t\t\t   \"CHARACTER expression at %L is being truncated \"\n-\t\t\t   \"(%d/%d)\", &expr->where, slen, len);\n+\tgfc_warning_now (OPT_Wcharacter_truncation,\n+\t\t\t \"CHARACTER expression at %L is being truncated \"\n+\t\t\t \"(%d/%d)\", &expr->where, slen, len);\n \n       /* Apply the standard by 'hand' otherwise it gets cleared for\n \t initializers.  */\n@@ -4029,7 +4029,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n     {\n       tmp_sym = tmp_sym->result;\n       /* Make sure it wasn't an implicitly typed result.  */\n-      if (tmp_sym->attr.implicit_type && gfc_option.warn_c_binding_type)\n+      if (tmp_sym->attr.implicit_type && warn_c_binding_type)\n \t{\n \t  gfc_warning (\"Implicitly declared BIND(C) function '%s' at \"\n                        \"%L may not be C interoperable\", tmp_sym->name,\n@@ -4050,7 +4050,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n       if (!gfc_verify_c_interop (&(tmp_sym->ts)))\n \t{\n \t  /* See if we're dealing with a sym in a common block or not.\t*/\n-\t  if (is_in_common == 1 && gfc_option.warn_c_binding_type)\n+\t  if (is_in_common == 1 && warn_c_binding_type)\n \t    {\n \t      gfc_warning (\"Variable '%s' in common block '%s' at %L \"\n                            \"may not be a C interoperable \"\n@@ -4064,7 +4064,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n                 gfc_error (\"Type declaration '%s' at %L is not C \"\n                            \"interoperable but it is BIND(C)\",\n                            tmp_sym->name, &(tmp_sym->declared_at));\n-              else if (gfc_option.warn_c_binding_type)\n+              else if (warn_c_binding_type)\n                 gfc_warning (\"Variable '%s' at %L \"\n                              \"may not be a C interoperable \"\n                              \"kind but it is bind(c)\",\n@@ -4130,8 +4130,8 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n       && tmp_sym->binding_label)\n       /* Use gfc_warning_now because we won't say that the symbol fails\n \t just because of this.\t*/\n-      gfc_warning_now (\"Symbol '%s' at %L is marked PRIVATE but has been \"\n-\t\t       \"given the binding label '%s'\", tmp_sym->name,\n+      gfc_warning_now (\"Symbol %qs at %L is marked PRIVATE but has been \"\n+\t\t       \"given the binding label %qs\", tmp_sym->name,\n \t\t       &(tmp_sym->declared_at), tmp_sym->binding_label);\n \n   return retval;"}, {"sha": "a0ad2ad9c71fd9cbb9775bd1bddb5b7d6931db5e", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -933,10 +933,11 @@ gfc_notify_std (int std, const char *gmsgid, ...)\n \n \n /* Immediate warning (i.e. do not buffer the warning).  */\n-/* Use gfc_warning_now_2 instead, unless gmsgid contains a %L.  */\n+/* Use gfc_warning_now instead, unless two locations are used in the same\n+   warning or for scanner.c, if the location is not properly set up.  */\n \n void\n-gfc_warning_now (const char *gmsgid, ...)\n+gfc_warning_now_1 (const char *gmsgid, ...)\n {\n   va_list argp;\n   int i;\n@@ -1094,10 +1095,12 @@ gfc_diagnostic_finalizer (diagnostic_context *context,\n }\n \n /* Immediate warning (i.e. do not buffer the warning).  */\n-/* This function uses the common diagnostics, but does not support %L, yet.  */\n+/* This function uses the common diagnostics, but does not support\n+   two locations; when being used in scanner.c, ensure that the location\n+   is properly setup. Otherwise, use gfc_warning_now_1.   */\n \n bool\n-gfc_warning_now_2 (int opt, const char *gmsgid, ...)\n+gfc_warning_now (int opt, const char *gmsgid, ...)\n {\n   va_list argp;\n   diagnostic_info diagnostic;\n@@ -1113,10 +1116,12 @@ gfc_warning_now_2 (int opt, const char *gmsgid, ...)\n }\n \n /* Immediate warning (i.e. do not buffer the warning).  */\n-/* This function uses the common diagnostics, but does not support %L, yet.  */\n+/* This function uses the common diagnostics, but does not support\n+   two locations; when being used in scanner.c, ensure that the location\n+   is properly setup. Otherwise, use gfc_warning_now_1.   */\n \n bool\n-gfc_warning_now_2 (const char *gmsgid, ...)\n+gfc_warning_now (const char *gmsgid, ...)\n {\n   va_list argp;\n   diagnostic_info diagnostic;\n@@ -1132,10 +1137,12 @@ gfc_warning_now_2 (const char *gmsgid, ...)\n \n \n /* Immediate error (i.e. do not buffer).  */\n-/* This function uses the common diagnostics, but does not support %L, yet.  */\n+/* This function uses the common diagnostics, but does not support\n+   two locations; when being used in scanner.c, ensure that the location\n+   is properly setup. Otherwise, use gfc_error_now_1.   */\n \n void\n-gfc_error_now_2 (const char *gmsgid, ...)\n+gfc_error_now (const char *gmsgid, ...)\n {\n   va_list argp;\n   diagnostic_info diagnostic;\n@@ -1241,10 +1248,11 @@ gfc_error (const char *gmsgid, ...)\n \n \n /* Immediate error.  */\n-/* Use gfc_error_now_2 instead, unless gmsgid contains a %L.  */\n+/* Use gfc_error_now instead, unless two locations are used in the same\n+   warning or for scanner.c, if the location is not properly set up.  */\n \n void\n-gfc_error_now (const char *gmsgid, ...)\n+gfc_error_now_1 (const char *gmsgid, ...)\n {\n   va_list argp;\n   int i;\n@@ -1382,9 +1390,9 @@ void\n gfc_get_errors (int *w, int *e)\n {\n   if (w != NULL)\n-    *w = warnings;\n+    *w = warnings + warningcount + werrorcount;\n   if (e != NULL)\n-    *e = errors;\n+    *e = errors + errorcount + sorrycount + werrorcount;\n }\n \n "}, {"sha": "d5b48cfbb7895199c18c0f538830d36fc3a1fd26", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"arith.h\"\n #include \"match.h\"\n@@ -3227,7 +3228,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n   if (rvalue->expr_type == EXPR_CONSTANT && lvalue->ts.type == rvalue->ts.type\n       && (lvalue->ts.type == BT_REAL || lvalue->ts.type == BT_COMPLEX))\n     {\n-      if (lvalue->ts.kind < rvalue->ts.kind && gfc_option.gfc_warn_conversion)\n+      if (lvalue->ts.kind < rvalue->ts.kind && warn_conversion)\n \t{\n \t  /* As a special bonus, don't warn about REAL rvalues which are not\n \t     changed by the conversion if -Wconversion is specified.  */\n@@ -3258,8 +3259,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \t\t\t gfc_typename (&lvalue->ts), &rvalue->where);\n \n \t}\n-      else if (gfc_option.warn_conversion_extra\n-\t       && lvalue->ts.kind > rvalue->ts.kind)\n+      else if (warn_conversion_extra && lvalue->ts.kind > rvalue->ts.kind)\n \t{\n \t  gfc_warning (\"Conversion from %s to %s at %L\",\n \t\t       gfc_typename (&rvalue->ts),\n@@ -4971,11 +4971,12 @@ gfc_check_vardef_context (gfc_expr* e, bool pointer, bool alloc_obj,\n \t\t\t  if (gfc_dep_compare_expr (ec, en) == 0)\n \t\t\t    {\n \t\t\t      if (context)\n-\t\t\t\tgfc_error_now (\"Elements with the same value at %L\"\n-\t\t\t\t\t       \" and %L in vector subscript\"\n-\t\t\t\t\t       \" in a variable definition\"\n-\t\t\t\t\t       \" context (%s)\", &(ec->where),\n-\t\t\t\t\t     &(en->where), context);\n+\t\t\t\tgfc_error_now_1 (\"Elements with the same value \"\n+\t\t\t\t\t\t \"at %L and %L in vector \"\n+\t\t\t\t\t\t \"subscript in a variable \"\n+\t\t\t\t\t\t \"definition context (%s)\",\n+\t\t\t\t\t\t &(ec->where), &(en->where),\n+\t\t\t\t\t\t context);\n \t\t\t      return false;\n \t\t\t    }\n \t\t\t}"}, {"sha": "9b96f2955118f6c13be6cf8ef43609c06d080353", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1708,17 +1708,19 @@ doloop_code (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t\t  && a->expr->symtree->n.sym == do_sym)\n \t\t{\n \t\t  if (f->sym->attr.intent == INTENT_OUT)\n-\t\t    gfc_error_now(\"Variable '%s' at %L set to undefined value \"\n-\t\t\t\t  \"inside loop  beginning at %L as INTENT(OUT) \"\n-\t\t\t\t  \"argument to subroutine '%s'\", do_sym->name,\n-\t\t\t\t  &a->expr->where, &doloop_list[i]->loc,\n-\t\t\t\t  co->symtree->n.sym->name);\n+\t\t    gfc_error_now_1 (\"Variable '%s' at %L set to undefined \"\n+\t\t\t\t     \"value inside loop  beginning at %L as \"\n+\t\t\t\t     \"INTENT(OUT) argument to subroutine '%s'\",\n+\t\t\t\t     do_sym->name, &a->expr->where,\n+\t\t\t\t     &doloop_list[i]->loc,\n+\t\t\t\t     co->symtree->n.sym->name);\n \t\t  else if (f->sym->attr.intent == INTENT_INOUT)\n-\t\t    gfc_error_now(\"Variable '%s' at %L not definable inside loop \"\n-\t\t\t\t  \"beginning at %L as INTENT(INOUT) argument to \"\n-\t\t\t\t  \"subroutine '%s'\", do_sym->name,\n-\t\t\t\t  &a->expr->where, &doloop_list[i]->loc,\n-\t\t\t\t  co->symtree->n.sym->name);\n+\t\t    gfc_error_now_1 (\"Variable '%s' at %L not definable inside \"\n+\t\t\t\t     \"loop beginning at %L as INTENT(INOUT) \"\n+\t\t\t\t     \"argument to subroutine '%s'\",\n+\t\t\t\t     do_sym->name, &a->expr->where,\n+\t\t\t\t     &doloop_list[i]->loc,\n+\t\t\t\t     co->symtree->n.sym->name);\n \t\t}\n \t    }\n \t  a = a->next;\n@@ -1778,17 +1780,17 @@ do_function (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t      && a->expr->symtree->n.sym == do_sym)\n \t    {\n \t      if (f->sym->attr.intent == INTENT_OUT)\n-\t\tgfc_error_now(\"Variable '%s' at %L set to undefined value \"\n-\t\t\t      \"inside loop beginning at %L as INTENT(OUT) \"\n-\t\t\t      \"argument to function '%s'\", do_sym->name,\n-\t\t\t      &a->expr->where, &doloop_list[i]->loc,\n-\t\t\t      expr->symtree->n.sym->name);\n+\t\tgfc_error_now_1 (\"Variable '%s' at %L set to undefined value \"\n+\t\t\t\t \"inside loop beginning at %L as INTENT(OUT) \"\n+\t\t\t\t \"argument to function '%s'\", do_sym->name,\n+\t\t\t\t &a->expr->where, &doloop_list[i]->loc,\n+\t\t\t\t expr->symtree->n.sym->name);\n \t      else if (f->sym->attr.intent == INTENT_INOUT)\n-\t\tgfc_error_now(\"Variable '%s' at %L not definable inside loop \"\n-\t\t\t      \"beginning at %L as INTENT(INOUT) argument to \"\n-\t\t\t      \"function '%s'\", do_sym->name,\n-\t\t\t      &a->expr->where, &doloop_list[i]->loc,\n-\t\t\t      expr->symtree->n.sym->name);\n+\t\tgfc_error_now_1 (\"Variable '%s' at %L not definable inside loop\"\n+\t\t\t\t \" beginning at %L as INTENT(INOUT) argument to\"\n+\t\t\t\t \" function '%s'\", do_sym->name,\n+\t\t\t\t &a->expr->where, &doloop_list[i]->loc,\n+\t\t\t\t expr->symtree->n.sym->name);\n \t    }\n \t}\n       a = a->next;"}, {"sha": "095d526f025176ab911d644dc647299b96d56a21", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -2444,17 +2444,13 @@ typedef struct\n \n   int warn_aliasing;\n   int warn_ampersand;\n-  int gfc_warn_conversion;\n-  int warn_c_binding_type;\n-  int warn_conversion_extra;\n   int warn_function_elimination;\n   int warn_implicit_interface;\n   int warn_implicit_procedure;\n   int warn_line_truncation;\n   int warn_surprising;\n   int warn_underflow;\n   int warn_intrinsic_shadow;\n-  int warn_intrinsics_std;\n   int warn_array_temp;\n   int warn_align_commons;\n   int warn_real_q_constant;\n@@ -2695,16 +2691,16 @@ void gfc_buffer_error (int);\n const char *gfc_print_wide_char (gfc_char_t);\n \n void gfc_warning (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n-void gfc_warning_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n-bool gfc_warning_now_2 (const char *gmsgid, ...) ATTRIBUTE_GCC_GFC(1,2);\n-bool gfc_warning_now_2 (int opt, const char *gmsgid, ...) ATTRIBUTE_GCC_GFC(2,3);\n+void gfc_warning_now_1 (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+bool gfc_warning_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+bool gfc_warning_now (int opt, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n \n void gfc_clear_warning (void);\n void gfc_warning_check (void);\n \n void gfc_error (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_error_now_1 (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n void gfc_error_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n-void gfc_error_now_2 (const char *gmsgid, ...) ATTRIBUTE_GCC_GFC(1,2);\n void gfc_fatal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_clear_error (void);"}, {"sha": "8cbcac980bbe05fec7e5c7541a035144c5c34252", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1050,11 +1050,10 @@ gfc_is_intrinsic (gfc_symbol* sym, int subroutine_flag, locus loc)\n   if (!gfc_check_intrinsic_standard (isym, &symstd, false, loc)\n       && !sym->attr.artificial)\n     {\n-      if (sym->attr.proc == PROC_UNKNOWN\n-\t  && gfc_option.warn_intrinsics_std)\n-\tgfc_warning_now (\"The intrinsic '%s' at %L is not included in the\"\n-\t\t\t \" selected standard but %s and '%s' will be\"\n-\t\t\t \" treated as if declared EXTERNAL.  Use an\"\n+      if (sym->attr.proc == PROC_UNKNOWN && warn_intrinsics_std)\n+\tgfc_warning_now (OPT_Wintrinsics_std, \"The intrinsic %qs at %L is not \"\n+\t\t\t \"included in the selected standard but %s and %qs will\"\n+\t\t\t \" be treated as if declared EXTERNAL.  Use an\"\n \t\t\t \" appropriate -std=* option or define\"\n \t\t\t \" -fall-intrinsics to allow this intrinsic.\",\n \t\t\t sym->name, &loc, symstd, sym->name);\n@@ -4652,14 +4651,14 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t  /* Larger kinds can hold values of smaller kinds without problems.\n \t     Hence, only warn if target kind is smaller than the source\n \t     kind - or if -Wconversion-extra is specified.  */\n-\t  if (gfc_option.warn_conversion_extra)\n-\t    gfc_warning_now (\"Conversion from %s to %s at %L\",\n+\t  if (warn_conversion && from_ts.kind > ts->kind)\n+\t    gfc_warning_now (OPT_Wconversion, \"Possible change of value in \"\n+\t\t\t     \"conversion from %s to %s at %L\",\n \t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n \t\t\t     &expr->where);\n-\t  else if (gfc_option.gfc_warn_conversion\n-\t\t   && from_ts.kind > ts->kind)\n-\t    gfc_warning_now (\"Possible change of value in conversion \"\n-\t\t\t     \"from %s to %s at %L\", gfc_typename (&from_ts),\n+\t  else if (warn_conversion_extra)\n+\t    gfc_warning_now (OPT_Wconversion_extra, \"Conversion from %s to %s \"\n+\t\t\t     \"at %L\", gfc_typename (&from_ts),\n \t\t\t     gfc_typename (ts), &expr->where);\n \t}\n       else if ((from_ts.type == BT_REAL && ts->type == BT_INTEGER)\n@@ -4668,18 +4667,17 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t{\n \t  /* Conversion from REAL/COMPLEX to INTEGER or COMPLEX to REAL\n \t     usually comes with a loss of information, regardless of kinds.  */\n-\t  if (gfc_option.warn_conversion_extra\n-\t      || gfc_option.gfc_warn_conversion)\n-\t    gfc_warning_now (\"Possible change of value in conversion \"\n-\t\t\t     \"from %s to %s at %L\", gfc_typename (&from_ts),\n-\t\t\t     gfc_typename (ts), &expr->where);\n+\t  if (warn_conversion)\n+\t    gfc_warning_now (OPT_Wconversion, \"Possible change of value in \"\n+\t\t\t     \"conversion from %s to %s at %L\",\n+\t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n+\t\t\t     &expr->where);\n \t}\n       else if (from_ts.type == BT_HOLLERITH || ts->type == BT_HOLLERITH)\n \t{\n \t  /* If HOLLERITH is involved, all bets are off.  */\n-\t  if (gfc_option.warn_conversion_extra\n-\t      || gfc_option.gfc_warn_conversion)\n-\t    gfc_warning_now (\"Conversion from %s to %s at %L\",\n+\t  if (warn_conversion)\n+\t    gfc_warning_now (OPT_Wconversion, \"Conversion from %s to %s at %L\",\n \t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n \t\t\t     &expr->where);\n \t}"}, {"sha": "8782f125ed52f0c309a3615a95624f4f0f985a6b", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -803,7 +803,8 @@ the expression after conversion. Implied by @option{-Wall}.\n @opindex @code{Wconversion-extra}\n @cindex warnings, conversion\n @cindex conversion\n-Warn about implicit conversions between different types and kinds.\n+Warn about implicit conversions between different types and kinds. This\n+option does @emph{not} imply @option{-Wconversion}.\n \n @item -Wextra\n @opindex @code{Wextra}"}, {"sha": "dc7c2a7d522b5e2f7c041e24d1a765676220f346", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -210,7 +210,7 @@ Fortran Warning\n Warn about creation of array temporaries\n \n Wc-binding-type\n-Fortran Warning\n+Fortran Var(warn_c_binding_type) Warning LangEnabledBy(Fortran,Wall)\n Warn if the type of a variable might be not interoperable with C\n \n Wdate-time\n@@ -226,11 +226,11 @@ Fortran Warning\n Warn about equality comparisons involving REAL or COMPLEX expressions\n \n Wconversion\n-Fortran Warning\n+Fortran Var(warn_conversion) Warning LangEnabledBy(Fortran,Wall)\n ; Documented in C\n \n Wconversion-extra\n-Fortran Warning\n+Fortran Var(warn_conversion_extra) Warning\n Warn about most implicit conversions\n \n Wextra\n@@ -254,7 +254,7 @@ Fortran Warning\n Warn about truncated source lines\n \n Wintrinsics-std\n-Fortran Warning\n+Fortran Var(warn_intrinsics_std) Warning LangEnabledBy(Fortran,Wall)\n Warn on intrinsics not part of the selected standard\n \n Wmissing-include-dirs"}, {"sha": "bf3cd80689af6a4c375a3f20a64eabd91b472036", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -4299,18 +4299,18 @@ gfc_match_common (void)\n                   /* If we find an error, just print it and continue,\n                      cause it's just semantic, and we can see if there\n                      are more errors.  */\n-                  gfc_error_now (\"Variable '%s' at %L in common block '%s' \"\n-                                 \"at %C must be declared with a C \"\n-                                 \"interoperable kind since common block \"\n-                                 \"'%s' is bind(c)\",\n-                                 sym->name, &(sym->declared_at), t->name,\n-                                 t->name);\n+                  gfc_error_now_1 (\"Variable '%s' at %L in common block '%s' \"\n+\t\t\t\t   \"at %C must be declared with a C \"\n+\t\t\t\t   \"interoperable kind since common block \"\n+\t\t\t\t   \"'%s' is bind(c)\",\n+\t\t\t\t   sym->name, &(sym->declared_at), t->name,\n+\t\t\t\t   t->name);\n                 }\n \n               if (sym->attr.is_bind_c == 1)\n-                gfc_error_now (\"Variable '%s' in common block \"\n-                               \"'%s' at %C can not be bind(c) since \"\n-                               \"it is not global\", sym->name, t->name);\n+                gfc_error_now (\"Variable %qs in common block %qs at %C can not \"\n+                               \"be bind(c) since it is not global\", sym->name,\n+\t\t\t       t->name);\n             }\n \n \t  if (sym->attr.in_common)"}, {"sha": "2449bbcb37d59fca787fcac5f3fc8dee8cac7031", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -6602,7 +6602,7 @@ use_iso_fortran_env_module (void)\n \t\tgfc_warning_now (\"Use of the NUMERIC_STORAGE_SIZE named \"\n \t\t\t\t \"constant from intrinsic module \"\n \t\t\t\t \"ISO_FORTRAN_ENV at %L is incompatible with \"\n-\t\t\t\t \"option %s\", &u->where,\n+\t\t\t\t \"option %qs\", &u->where,\n \t\t\t\t gfc_option.flag_default_integer\n \t\t\t\t   ? \"-fdefault-integer-8\"\n \t\t\t\t   : \"-fdefault-real-8\");\n@@ -6745,8 +6745,8 @@ gfc_use_module (gfc_use_list *module)\n   current_intmod = INTMOD_NONE;\n \n   if (!only_flag)\n-    gfc_warning_now_2 (OPT_Wuse_without_only,\n-\t\t       \"USE statement at %C has no ONLY qualifier\");\n+    gfc_warning_now (OPT_Wuse_without_only,\n+\t\t     \"USE statement at %C has no ONLY qualifier\");\n \n   filename = XALLOCAVEC (char, strlen (module_name) + strlen (MODULE_EXTENSION)\n \t\t\t       + 1);"}, {"sha": "d8ba7988a00e8273090e0fe63e5d4acc2f7e0a3c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -96,16 +96,12 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_aliasing = 0;\n   gfc_option.warn_ampersand = 0;\n   gfc_option.warn_array_temp = 0;\n-  gfc_option.warn_c_binding_type = 0;\n-  gfc_option.gfc_warn_conversion = 0;\n-  gfc_option.warn_conversion_extra = 0;\n   gfc_option.warn_function_elimination = 0;\n   gfc_option.warn_implicit_interface = 0;\n   gfc_option.warn_line_truncation = 0;\n   gfc_option.warn_surprising = 0;\n   gfc_option.warn_underflow = 1;\n   gfc_option.warn_intrinsic_shadow = 0;\n-  gfc_option.warn_intrinsics_std = 0;\n   gfc_option.warn_align_commons = 1;\n   gfc_option.warn_real_q_constant = 0;\n   gfc_option.warn_unused_dummy_argument = 0;\n@@ -359,8 +355,8 @@ gfc_post_options (const char **pfilename)\n       if (gfc_current_form == FORM_UNKNOWN)\n \t{\n \t  gfc_current_form = FORM_FREE;\n-\t  gfc_warning_now_2 (\"Reading file %qs as free form\", \n-\t\t\t     (filename[0] == '\\0') ? \"<stdin>\" : filename);\n+\t  gfc_warning_now (\"Reading file %qs as free form\", \n+\t\t\t   (filename[0] == '\\0') ? \"<stdin>\" : filename);\n \t}\n     }\n \n@@ -369,10 +365,10 @@ gfc_post_options (const char **pfilename)\n   if (gfc_current_form == FORM_FREE)\n     {\n       if (gfc_option.flag_d_lines == 0)\n-\tgfc_warning_now_2 (\"%<-fd-lines-as-comments%> has no effect \"\n+\tgfc_warning_now (\"%<-fd-lines-as-comments%> has no effect \"\n \t\t\t   \"in free form\");\n       else if (gfc_option.flag_d_lines == 1)\n-\tgfc_warning_now_2 (\"%<-fd-lines-as-code%> has no effect in free form\");\n+\tgfc_warning_now (\"%<-fd-lines-as-code%> has no effect in free form\");\n     }\n \n   /* If -pedantic, warn about the use of GNU extensions.  */\n@@ -390,20 +386,20 @@ gfc_post_options (const char **pfilename)\n \n   if (!gfc_option.flag_automatic && gfc_option.flag_max_stack_var_size != -2\n       && gfc_option.flag_max_stack_var_size != 0)\n-    gfc_warning_now_2 (\"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n+    gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t       gfc_option.flag_max_stack_var_size);\n   else if (!gfc_option.flag_automatic && gfc_option.flag_recursive)\n-    gfc_warning_now_2 (\"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n+    gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n   else if (!gfc_option.flag_automatic && gfc_option.gfc_flag_openmp)\n-    gfc_warning_now_2 (\"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n+    gfc_warning_now (\"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n \t\t       \"%<-fopenmp%>\");\n   else if (gfc_option.flag_max_stack_var_size != -2\n \t   && gfc_option.flag_recursive)\n-    gfc_warning_now_2 (\"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n+    gfc_warning_now (\"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n \t\t       gfc_option.flag_max_stack_var_size);\n   else if (gfc_option.flag_max_stack_var_size != -2\n \t   && gfc_option.gfc_flag_openmp)\n-    gfc_warning_now_2 (\"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n+    gfc_warning_now (\"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n \t\t       \"implied by %<-fopenmp%>\", \n \t\t     gfc_option.flag_max_stack_var_size);\n \n@@ -452,13 +448,10 @@ set_Wall (int setting)\n {\n   gfc_option.warn_aliasing = setting;\n   gfc_option.warn_ampersand = setting;\n-  gfc_option.warn_c_binding_type = setting;\n-  gfc_option.gfc_warn_conversion = setting;\n   gfc_option.warn_line_truncation = setting;\n   gfc_option.warn_surprising = setting;\n   gfc_option.warn_underflow = setting;\n   gfc_option.warn_intrinsic_shadow = setting;\n-  gfc_option.warn_intrinsics_std = setting;\n   gfc_option.warn_real_q_constant = setting;\n   gfc_option.warn_unused_dummy_argument = setting;\n   gfc_option.warn_target_lifetime = setting;\n@@ -657,22 +650,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_array_temp = value;\n       break;\n \n-    case OPT_Wc_binding_type:\n-      gfc_option.warn_c_binding_type = value;\n-      break;\n-\n     case OPT_Wcompare_reals:\n       gfc_option.warn_compare_reals = value;\n       break;\n \n-    case OPT_Wconversion:\n-      gfc_option.gfc_warn_conversion = value;\n-      break;\n-\n-    case OPT_Wconversion_extra:\n-      gfc_option.warn_conversion_extra = value;\n-      break;\n-\n     case OPT_Wextra:\n       set_Wextra (value);\n       break;\n@@ -1063,10 +1044,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_std = 0;\n       break;\n \n-    case OPT_Wintrinsics_std:\n-      gfc_option.warn_intrinsics_std = value;\n-      break;\n-\n     case OPT_fshort_enums:\n       /* Handled in language-independent code.  */\n       break;"}, {"sha": "540424f88bdec84b40840bd90e4543b386a713f7", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -550,7 +550,7 @@ decode_statement (void)\n      stored an error message of some sort.  */\n \n   if (gfc_error_check () == 0)\n-    gfc_error_now_2 (\"Unclassifiable statement at %C\");\n+    gfc_error_now (\"Unclassifiable statement at %C\");\n \n   reject_statement ();\n \n@@ -797,7 +797,7 @@ decode_gcc_attribute (void)\n      stored an error message of some sort.  */\n \n   if (gfc_error_check () == 0)\n-    gfc_error_now_2 (\"Unclassifiable GCC directive at %C\");\n+    gfc_error_now (\"Unclassifiable GCC directive at %C\");\n \n   reject_statement ();\n \n@@ -836,17 +836,17 @@ next_free (void)\n \t  gfc_match_small_literal_int (&i, &cnt);\n \n \t  if (cnt > 5)\n-\t    gfc_error_now_2 (\"Too many digits in statement label at %C\");\n+\t    gfc_error_now (\"Too many digits in statement label at %C\");\n \n \t  if (i == 0)\n-\t    gfc_error_now_2 (\"Zero is not a valid statement label at %C\");\n+\t    gfc_error_now (\"Zero is not a valid statement label at %C\");\n \n \t  do\n \t    c = gfc_next_ascii_char ();\n \t  while (ISDIGIT(c));\n \n \t  if (!gfc_is_whitespace (c))\n-\t    gfc_error_now_2 (\"Non-numeric character in statement label at %C\");\n+\t    gfc_error_now (\"Non-numeric character in statement label at %C\");\n \n \t  return ST_NONE;\n \t}\n@@ -858,7 +858,7 @@ next_free (void)\n \n \t  if (at_bol && gfc_peek_ascii_char () == ';')\n \t    {\n-\t      gfc_error_now_2 (\"Semicolon at %C needs to be preceded by \"\n+\t      gfc_error_now (\"Semicolon at %C needs to be preceded by \"\n \t\t\t     \"statement\");\n \t      gfc_next_ascii_char (); /* Eat up the semicolon.  */\n \t      return ST_NONE;\n@@ -917,8 +917,8 @@ next_free (void)\n   if (at_bol && c == ';')\n     {\n       if (!(gfc_option.allow_std & GFC_STD_F2008))\n-\tgfc_error_now_2 (\"Fortran 2008: Semicolon at %C without preceding \"\n-\t\t\t \"statement\");\n+\tgfc_error_now (\"Fortran 2008: Semicolon at %C without preceding \"\n+\t\t       \"statement\");\n       gfc_next_ascii_char (); /* Eat up the semicolon.  */\n       return ST_NONE;\n     }\n@@ -1017,7 +1017,7 @@ next_fixed (void)\n   if (digit_flag)\n     {\n       if (label == 0)\n-\tgfc_warning_now_2 (\"Zero is not a valid statement label at %C\");\n+\tgfc_warning_now (\"Zero is not a valid statement label at %C\");\n       else\n \t{\n \t  /* We've found a valid statement label.  */\n@@ -3505,8 +3505,8 @@ gfc_check_do_variable (gfc_symtree *st)\n   for (s=gfc_state_stack; s; s = s->previous)\n     if (s->do_variable == st)\n       {\n-\tgfc_error_now(\"Variable '%s' at %C cannot be redefined inside \"\n-\t\t      \"loop beginning at %L\", st->name, &s->head->loc);\n+\tgfc_error_now_1 (\"Variable '%s' at %C cannot be redefined inside \"\n+\t\t\t \"loop beginning at %L\", st->name, &s->head->loc);\n \treturn 1;\n       }\n "}, {"sha": "08bbda413703fb127a81ab12efcc795667859286", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -924,23 +924,23 @@ resolve_common_vars (gfc_symbol *sym, bool named_common)\n \t}\n \n       if (UNLIMITED_POLY (csym))\n-\tgfc_error_now (\"'%s' in cannot appear in COMMON at %L \"\n+\tgfc_error_now (\"%qs in cannot appear in COMMON at %L \"\n \t\t       \"[F2008:C5100]\", csym->name, &csym->declared_at);\n \n       if (csym->ts.type != BT_DERIVED)\n \tcontinue;\n \n       if (!(csym->ts.u.derived->attr.sequence\n \t    || csym->ts.u.derived->attr.is_bind_c))\n-\tgfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n+\tgfc_error_now (\"Derived type variable %qs in COMMON at %L \"\n \t\t       \"has neither the SEQUENCE nor the BIND(C) \"\n \t\t       \"attribute\", csym->name, &csym->declared_at);\n       if (csym->ts.u.derived->attr.alloc_comp)\n-\tgfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n+\tgfc_error_now (\"Derived type variable %qs in COMMON at %L \"\n \t\t       \"has an ultimate component that is \"\n \t\t       \"allocatable\", csym->name, &csym->declared_at);\n       if (gfc_has_default_initializer (csym->ts.u.derived))\n-\tgfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n+\tgfc_error_now (\"Derived type variable %qs in COMMON at %L \"\n \t\t       \"may not have default initializer\", csym->name,\n \t\t       &csym->declared_at);\n \n@@ -9224,10 +9224,10 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \trlen = mpz_get_si (rhs->ts.u.cl->length->value.integer);\n \n       if (rlen && llen && rlen > llen)\n-\tgfc_warning_now_2 (OPT_Wcharacter_truncation,\n-\t\t\t   \"CHARACTER expression will be truncated \"\n-\t\t\t   \"in assignment (%d/%d) at %L\",\n-\t\t\t   llen, rlen, &code->loc);\n+\tgfc_warning_now (OPT_Wcharacter_truncation,\n+\t\t\t \"CHARACTER expression will be truncated \"\n+\t\t\t \"in assignment (%d/%d) at %L\",\n+\t\t\t llen, rlen, &code->loc);\n     }\n \n   /* Ensure that a vector index expression for the lvalue is evaluated"}, {"sha": "884fe70cb3efc2f65b618598eb5dc76ecadc37d0", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -324,16 +324,16 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n   if (stat (q, &st))\n     {\n       if (errno != ENOENT)\n-\tgfc_warning_now_2 (\"Include directory %qs: %s\", path,\n-\t\t\t   xstrerror(errno));\n+\tgfc_warning_now (\"Include directory %qs: %s\", path,\n+\t\t\t xstrerror(errno));\n       else if (warn)\n-\tgfc_warning_now_2 (OPT_Wmissing_include_dirs,\n-\t\t\t   \"Nonexistent include directory %qs\", path);\n+\tgfc_warning_now (OPT_Wmissing_include_dirs,\n+\t\t\t \"Nonexistent include directory %qs\", path);\n       return;\n     }\n   else if (!S_ISDIR (st.st_mode))\n     {\n-      gfc_warning_now_2 (\"%qs is not a directory\", path);\n+      gfc_warning_now (\"%qs is not a directory\", path);\n       return;\n     }\n \n@@ -775,10 +775,10 @@ skip_free_comments (void)\n \t\t\t\t}\n \t\t\t    }\n \t\t\t  else\n-\t\t\t    gfc_warning_now (\"!$OMP at %C starts a commented \"\n-\t\t\t\t\t     \"line as it neither is followed \"\n-\t\t\t\t\t     \"by a space nor is a \"\n-\t\t\t\t\t     \"continuation line\");\n+\t\t\t    gfc_warning_now_1 (\"!$OMP at %C starts a commented \"\n+\t\t\t\t\t       \"line as it neither is followed \"\n+\t\t\t\t\t       \"by a space nor is a \"\n+\t\t\t\t\t       \"continuation line\");\n \t\t\t}\n \t\t      gfc_current_locus = old_loc;\n \t\t      next_char ();\n@@ -1056,7 +1056,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \n \t  gfc_current_locus.lb->truncated = 0;\n \t  gfc_current_locus.nextc =  gfc_current_locus.lb->line + maxlen;\n-\t  gfc_warning_now (\"Line truncated at %L\", &gfc_current_locus);\n+\t  gfc_warning_now_1 (\"Line truncated at %L\", &gfc_current_locus);\n \t  gfc_current_locus.nextc = current_nextc;\n \t}\n \n@@ -1194,7 +1194,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \t  && gfc_current_locus.lb->truncated)\n \t{\n \t  gfc_current_locus.lb->truncated = 0;\n-\t  gfc_warning_now (\"Line truncated at %L\", &gfc_current_locus);\n+\t  gfc_warning_now_1 (\"Line truncated at %L\", &gfc_current_locus);\n \t}\n \n       prev_openmp_flag = openmp_flag;\n@@ -1388,7 +1388,7 @@ gfc_gobble_whitespace (void)\n \t  if (cur_linenum != linenum)\n \t    {\n \t      linenum = cur_linenum;\n-\t      gfc_warning_now (\"Nonconforming tab character at %C\");\n+\t      gfc_warning_now_1 (\"Nonconforming tab character at %C\");\n \t    }\n \t}\n     }\n@@ -1476,11 +1476,11 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t      && !seen_printable && seen_ampersand)\n \t    {\n \t      if (pedantic)\n-\t\tgfc_error_now_2 (\"%<&%> not allowed by itself in line %d\",\n-\t\t\t\t   current_line);\n+\t\tgfc_error_now (\"%<&%> not allowed by itself in line %d\",\n+\t\t\t       current_line);\n \t      else\n-\t\tgfc_warning_now_2 (\"%<&%> not allowed by itself in line %d\",\n-\t\t\t\t     current_line);\n+\t\tgfc_warning_now (\"%<&%> not allowed by itself in line %d\",\n+\t\t\t\t current_line);\n \t    }\n \t  break;\n \t}\n@@ -1537,9 +1537,9 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t  if (warn_tabs && seen_comment == 0 && current_line != linenum)\n \t    {\n \t      linenum = current_line;\n-\t      gfc_warning_now_2 (OPT_Wtabs,\n-\t\t\t\t \"Nonconforming tab character in column %d \"\n-\t\t\t\t \"of line %d\", i+1, linenum);\n+\t      gfc_warning_now (OPT_Wtabs,\n+\t\t\t       \"Nonconforming tab character in column %d \"\n+\t\t\t       \"of line %d\", i+1, linenum);\n \t    }\n \n \t  while (i < 6)\n@@ -1763,9 +1763,9 @@ preprocessor_line (gfc_char_t *c)\n       if (!current_file->up\n \t  || filename_cmp (current_file->up->filename, filename) != 0)\n \t{\n-\t  gfc_warning_now (\"%s:%d: file %s left but not entered\",\n-\t\t\t   current_file->filename, current_file->line,\n-\t\t\t   filename);\n+\t  gfc_warning_now_1 (\"%s:%d: file %s left but not entered\",\n+\t\t\t     current_file->filename, current_file->line,\n+\t\t\t     filename);\n \t  if (unescape)\n \t    free (wide_filename);\n \t  free (filename);\n@@ -1797,7 +1797,7 @@ preprocessor_line (gfc_char_t *c)\n   return;\n \n  bad_cpp_line:\n-  gfc_warning_now (\"%s:%d: Illegal preprocessor directive\",\n+  gfc_warning_now_1 (\"%s:%d: Illegal preprocessor directive\",\n \t\t   current_file->filename, current_file->line);\n   current_file->line++;\n }\n@@ -1922,7 +1922,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \tinput = gfc_open_file (realfilename);\n       if (input == NULL)\n \t{\n-\t  gfc_error_now_2 (\"Can't open file %qs\", filename);\n+\t  gfc_error_now (\"Can't open file %qs\", filename);\n \t  return false;\n \t}\n     }"}, {"sha": "aeb7dce3ef2568d5cfcce19e236a9f5998eb1754", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -270,11 +270,12 @@ gfc_set_default_type (gfc_symbol *sym, int error_flag, gfc_namespace *ns)\n \t   && !gfc_build_class_symbol (&sym->ts, &sym->attr, &sym->as))\n     return false;\n \n-  if (sym->attr.is_bind_c == 1 && gfc_option.warn_c_binding_type)\n+  if (sym->attr.is_bind_c == 1 && warn_c_binding_type)\n     {\n       /* BIND(C) variables should not be implicitly declared.  */\n-      gfc_warning_now (\"Implicitly declared BIND(C) variable '%s' at %L may \"\n-                       \"not be C interoperable\", sym->name, &sym->declared_at);\n+      gfc_warning_now (OPT_Wc_binding_type, \"Implicitly declared BIND(C) \"\n+\t\t       \"variable %qs at %L may not be C interoperable\",\n+\t\t       sym->name, &sym->declared_at);\n       sym->ts.f90_type = sym->ts.type;\n     }\n \n@@ -284,14 +285,15 @@ gfc_set_default_type (gfc_symbol *sym, int error_flag, gfc_namespace *ns)\n \t  && (sym->ns->proc_name->attr.subroutine != 0\n \t      || sym->ns->proc_name->attr.function != 0)\n \t  && sym->ns->proc_name->attr.is_bind_c != 0\n-\t  && gfc_option.warn_c_binding_type)\n+\t  && warn_c_binding_type)\n         {\n           /* Dummy args to a BIND(C) routine may not be interoperable if\n              they are implicitly typed.  */\n-          gfc_warning_now (\"Implicitly declared variable '%s' at %L may not \"\n-                           \"be C interoperable but it is a dummy argument to \"\n-                           \"the BIND(C) procedure '%s' at %L\", sym->name,\n-                           &(sym->declared_at), sym->ns->proc_name->name,\n+          gfc_warning_now (OPT_Wc_binding_type, \"Implicitly declared variable \"\n+\t\t\t   \"%qs at %L may not be C interoperable but it is a \"\n+\t\t\t   \"dummy argument to the BIND(C) procedure %qs at %L\",\n+\t\t\t   sym->name, &(sym->declared_at),\n+\t\t\t   sym->ns->proc_name->name,\n                            &(sym->ns->proc_name->declared_at));\n           sym->ts.f90_type = sym->ts.type;\n         }\n@@ -3854,7 +3856,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n   if (derived_sym->attr.is_bind_c != 1)\n     {\n       derived_sym->ts.is_c_interop = 0;\n-      gfc_error_now (\"Derived type '%s' declared at %L must have the BIND \"\n+      gfc_error_now (\"Derived type %qs declared at %L must have the BIND \"\n                      \"attribute to be C interoperable\", derived_sym->name,\n                      &(derived_sym->declared_at));\n       retval = false;\n@@ -3949,16 +3951,15 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n \t\t recompiles with different flags (e.g., -m32 and -m64 on\n \t\t x86_64 and using integer(4) to claim interop with a\n \t\t C_LONG).  */\n-\t      if (derived_sym->attr.is_bind_c == 1\n-\t\t  && gfc_option.warn_c_binding_type)\n+\t      if (derived_sym->attr.is_bind_c == 1 && warn_c_binding_type)\n \t\t/* If the derived type is bind(c), all fields must be\n \t\t   interop.  */\n \t\tgfc_warning (\"Component '%s' in derived type '%s' at %L \"\n                              \"may not be C interoperable, even though \"\n                              \"derived type '%s' is BIND(C)\",\n                              curr_comp->name, derived_sym->name,\n                              &(curr_comp->loc), derived_sym->name);\n-\t      else if (gfc_option.warn_c_binding_type)\n+\t      else if (warn_c_binding_type)\n \t\t/* If derived type is param to bind(c) routine, or to one\n \t\t   of the iso_c_binding procs, it must be interoperable, so\n \t\t   all fields must interop too.\t */"}, {"sha": "9811af8136bfc6255a57c25128deb1dcd7007122", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1,9 +1,16 @@\n+2014-11-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/empty_label.f: Change test to continue testing\n+\tfor -fmax-errors=1.\n+\t* gfortran.dg/empty_label.f90: Ditto.\n+\t* gfortran.dg/warnings_are_errors_1.f90: Update dg-*.\n+\n 2014-11-26  Andreas Tobler  <andreast@gcc.gnu.org>\n \n-        * g++.old-deja/g++.jason/enum6.C: Use arm_eabi for dg-options.\n-        Update comment.\n-        * g++.old-deja/g++.law/enum9.C: Likewise.\n-        * g++.old-deja/g++.other/enum4.C: Likewise.\n+\t* g++.old-deja/g++.jason/enum6.C: Use arm_eabi for dg-options.\n+\tUpdate comment.\n+\t* g++.old-deja/g++.law/enum9.C: Likewise.\n+\t* g++.old-deja/g++.other/enum4.C: Likewise.\n \n 2014-11-25  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "fe1665228d3535ed8f368285269f052cafd1f51c", "filename": "gcc/testsuite/gfortran.dg/empty_label.f", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1,6 +1,7 @@\n C { dg-do compile }\n C { dg-options \"-Werror -fmax-errors=1\" }\n-100   ! { dg-warning \"empty statement\" }\n+100   ! { dg-error \"empty statement\" }\n       end\n-C { dg-error \"count reached limit\" \"\" { target *-*-* } 0 }\n-C { dg-excess-errors \"compilation terminated\" }\n+subroutine foo ! Not checked ...\n+end function ! ... but an error\n+C { dg-excess-errors \"warnings being treated as errors\" }"}, {"sha": "af067b5f57a79b0cf94a24558005538c2ac730fb", "filename": "gcc/testsuite/gfortran.dg/empty_label.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_label.f90?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -1,6 +1,7 @@\n ! { dg-do compile }\n ! { dg-options \"-Werror -fmax-errors=1\" }\n-100   ! { dg-warning \"empty statement\" }\n+100   ! { dg-error \"empty statement\" }\n end\n-! { dg-error \"count reached limit\" \"\" { target *-*-* } 0 }\n-! { dg-excess-errors \"compilation terminated\" }\n+subroutine foo ! Not checked ...\n+end function ! ... but an error\n+! { dg-excess-errors \"warnings being treated as errors\" }"}, {"sha": "8ce4699ad38d0b46a1a07e81fa3913ad882bacf1", "filename": "gcc/testsuite/gfortran.dg/warnings_are_errors_1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daa149b86a42d1d10a735889c5f9cd6a0bca09e/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f90?ref=4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "patch": "@@ -21,6 +21,7 @@ end function char_\n       cplx = 20.\n \n ! gfc_warning_now:\n- 1 ! { dg-warning \"Ignoring statement label in empty statement\" }\n+ 1 ! { dg-error \"Ignoring statement label in empty statement\" }\n        end\n ! { dg-final { output-exists-not } }\n+! { dg-excess-errors \"warnings being treated as errors\" }"}]}