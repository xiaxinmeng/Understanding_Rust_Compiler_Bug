{"sha": "51e9e8a2e2098d87e4e1932424938bd11078860f", "node_id": "C_kwDOANBUbNoAKDUxZTllOGEyZTIwOThkODdlNGUxOTMyNDI0OTM4YmQxMTA3ODg2MGY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-14T10:06:03Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-14T10:08:26Z"}, "message": "x86_64: Improvements to arithmetic right shifts of V1TImode values.\n\nThis patch to the i386 backend's ix86_expand_v1ti_ashiftrt provides\nimproved (shorter) implementations of V1TI mode arithmetic right shifts\nfor constant amounts between 111 and 126 bits.  The significance of\nthis range is that this functionality is useful for (eventually)\nproviding sign extension from HImode and QImode to V1TImode.\n\nFor example, x>>112 (to sign extend a 16-bit value), was previously\ngenerated as a four operation sequence:\n\n        movdqa  %xmm0, %xmm1\t\t// word    7 6 5 4 3 2 1 0\n        psrad   $31, %xmm0\t\t// V8HI = [S,S,?,?,?,?,?,?]\n        psrad   $16, %xmm1\t\t// V8HI = [S,X,?,?,?,?,?,?]\n        punpckhqdq      %xmm0, %xmm1\t// V8HI = [S,S,?,?,S,X,?,?]\n        pshufd  $253, %xmm1, %xmm0\t// V8HI = [S,S,S,S,S,S,S,X]\n\nwith this patch, we now generates a three operation sequence:\n\n        psrad   $16, %xmm0\t\t// V8HI = [S,X,?,?,?,?,?,?]\n        pshufhw $254, %xmm0, %xmm0\t// V8HI = [S,S,S,X,?,?,?,?]\n        pshufd  $254, %xmm0, %xmm0\t// V8HI = [S,S,S,S,S,S,S,X]\n\nThe correctness of generated code is confirmed by the existing\nrun-time test gcc.target/i386/sse2-v1ti-ashiftrt-1.c in the testsuite.\nThis idiom is safe to use for shifts by 127, but that case gets handled\nby a two operation sequence earlier in this function.\n\n2022-01-14  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-expand.c (ix86_expand_v1ti_to_ti): Use force_reg.\n\t(ix86_expand_ti_to_v1ti): Use force_reg.\n\t(ix86_expand_v1ti_shift): Use force_reg.\n\t(ix86_expand_v1ti_rotate): Use force_reg.\n\t(ix86_expand_v1ti_ashiftrt): Provide new three operation\n\timplementations for shifts by 111..126 bits.  Use force_reg.", "tree": {"sha": "21578568f1da13e14d5c3977ae73d78314cbf288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21578568f1da13e14d5c3977ae73d78314cbf288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e9e8a2e2098d87e4e1932424938bd11078860f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e9e8a2e2098d87e4e1932424938bd11078860f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e9e8a2e2098d87e4e1932424938bd11078860f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e9e8a2e2098d87e4e1932424938bd11078860f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b4e316a02be9fda3b793a7be871f7c7913cd58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b4e316a02be9fda3b793a7be871f7c7913cd58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b4e316a02be9fda3b793a7be871f7c7913cd58"}], "stats": {"total": 265, "additions": 96, "deletions": 169}, "files": [{"sha": "c740d6e5c04b481671e9636e9f6d977d792a780c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 96, "deletions": 169, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e9e8a2e2098d87e4e1932424938bd11078860f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e9e8a2e2098d87e4e1932424938bd11078860f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=51e9e8a2e2098d87e4e1932424938bd11078860f", "patch": "@@ -6211,8 +6211,7 @@ ix86_expand_v1ti_to_ti (rtx x)\n   rtx result = gen_reg_rtx (TImode);\n   if (TARGET_SSE2)\n     {\n-      rtx temp = gen_reg_rtx (V2DImode);\n-      emit_move_insn (temp, gen_lowpart (V2DImode, x));\n+      rtx temp = force_reg (V2DImode, gen_lowpart (V2DImode, x));\n       rtx lo = gen_lowpart (DImode, result);\n       emit_insn (gen_vec_extractv2didi (lo, temp, const0_rtx));\n       rtx hi = gen_highpart (DImode, result);\n@@ -6227,18 +6226,16 @@ ix86_expand_v1ti_to_ti (rtx x)\n static rtx\n ix86_expand_ti_to_v1ti (rtx x)\n {\n-  rtx result = gen_reg_rtx (V1TImode);\n   if (TARGET_SSE2)\n     {\n       rtx lo = gen_lowpart (DImode, x);\n       rtx hi = gen_highpart (DImode, x);\n       rtx tmp = gen_reg_rtx (V2DImode);\n       emit_insn (gen_vec_concatv2di (tmp, lo, hi));\n-      emit_move_insn (result, gen_lowpart (V1TImode, tmp));\n+      return force_reg (V1TImode, gen_lowpart (V1TImode, tmp));\n     }\n-  else\n-    emit_move_insn (result, gen_lowpart (V1TImode, x));\n-  return result;\n+\n+  return force_reg (V1TImode, gen_lowpart (V1TImode, x));\n }\n \n /* Expand V1TI mode shift (of rtx_code CODE) by constant.  */\n@@ -6285,8 +6282,7 @@ ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n     emit_insn (gen_sse2_lshrv1ti3 (tmp1, op1, GEN_INT (64)));\n \n   /* tmp2 is operands[1] shifted by 64, in V2DImode.  */\n-  rtx tmp2 = gen_reg_rtx (V2DImode);\n-  emit_move_insn (tmp2, gen_lowpart (V2DImode, tmp1));\n+  rtx tmp2 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp1));\n \n   /* tmp3 will be the V2DImode result.  */\n   rtx tmp3 = gen_reg_rtx (V2DImode);\n@@ -6301,8 +6297,7 @@ ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n   else\n     {\n       /* tmp4 is operands[1], in V2DImode.  */\n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, op1));\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, op1));\n \n       rtx tmp5 = gen_reg_rtx (V2DImode);\n       if (code == ASHIFT)\n@@ -6320,8 +6315,7 @@ ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n     }\n \n   /* Convert the result back to V1TImode and store in operands[0].  */\n-  rtx tmp7 = gen_reg_rtx (V1TImode);\n-  emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp3));\n+  rtx tmp7 = force_reg (V1TImode, gen_lowpart (V1TImode, tmp3));\n   emit_move_insn (operands[0], tmp7);\n }\n \n@@ -6356,19 +6350,15 @@ ix86_expand_v1ti_rotate (enum rtx_code code, rtx operands[])\n \n   if ((bits & 31) == 0)\n     {\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      rtx tmp3 = gen_reg_rtx (V1TImode);\n-\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       if (bits == 32)\n \temit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0x93)));\n       else if (bits == 64)\n \temit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0x4e)));\n       else\n \temit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0x39)));\n-      emit_move_insn (tmp3, gen_lowpart (V1TImode, tmp2));\n-      emit_move_insn (operands[0], tmp3);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp2));\n       return;\n     }\n \n@@ -6385,8 +6375,7 @@ ix86_expand_v1ti_rotate (enum rtx_code code, rtx operands[])\n       return;\n     }\n \n-  rtx op1_v4si = gen_reg_rtx (V4SImode);\n-  emit_move_insn (op1_v4si, gen_lowpart (V4SImode, op1));\n+  rtx op1_v4si = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n \n   rtx lobits;\n   rtx hibits;\n@@ -6423,13 +6412,12 @@ ix86_expand_v1ti_rotate (enum rtx_code code, rtx operands[])\n   rtx tmp1 = gen_reg_rtx (V4SImode);\n   rtx tmp2 = gen_reg_rtx (V4SImode);\n   rtx tmp3 = gen_reg_rtx (V4SImode);\n-  rtx tmp4 = gen_reg_rtx (V1TImode);\n \n   emit_insn (gen_ashlv4si3 (tmp1, lobits, GEN_INT (bits & 31)));\n   emit_insn (gen_lshrv4si3 (tmp2, hibits, GEN_INT (32 - (bits & 31))));\n   emit_insn (gen_iorv4si3 (tmp3, tmp1, tmp2));\n-  emit_move_insn (tmp4, gen_lowpart (V1TImode, tmp3));\n-  emit_move_insn (operands[0], tmp4);\n+\n+  emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp3));\n }\n \n /* Expand V1TI mode ashiftrt by constant.  */\n@@ -6459,67 +6447,72 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n   if (bits == 127)\n     {\n       /* Two operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg(V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n       emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n \n-      rtx tmp4 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp4, gen_lowpart (V1TImode, tmp3));\n-      emit_move_insn (operands[0], tmp4);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp3));\n       return;\n     }\n \n   if (bits == 64)\n     {\n       /* Three operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg(V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n       emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n \n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n-      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp1));\n+      rtx tmp5 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp3));\n       rtx tmp6 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp1));\n-      emit_move_insn (tmp5, gen_lowpart (V2DImode, tmp3));\n       emit_insn (gen_vec_interleave_highv2di (tmp6, tmp4, tmp5));\n \n-      rtx tmp7 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp6));\n-      emit_move_insn (operands[0], tmp7);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp6));\n       return;\n     }\n \n   if (bits == 96)\n     {\n       /* Three operations.  */\n-      rtx tmp3 = gen_reg_rtx (V2DImode);\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg(V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (31)));\n \n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp3 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp1));\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp2));\n       rtx tmp5 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp3, gen_lowpart (V2DImode, tmp1));\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp2));\n       emit_insn (gen_vec_interleave_highv2di (tmp5, tmp3, tmp4));\n \n-      rtx tmp6 = gen_reg_rtx (V4SImode);\n+      rtx tmp6 = force_reg(V4SImode, gen_lowpart (V4SImode, tmp5));\n       rtx tmp7 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp6, gen_lowpart (V4SImode, tmp5));\n       emit_insn (gen_sse2_pshufd (tmp7, tmp6, GEN_INT (0xfd)));\n \n-      rtx tmp8 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp8, gen_lowpart (V1TImode, tmp7));\n-      emit_move_insn (operands[0], tmp8);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp7));\n+      return;\n+    }\n+\n+  if (bits >= 111)\n+    {\n+      /* Three operations.  */\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits - 96)));\n+\n+      rtx tmp3 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp2));\n+      rtx tmp4 = gen_reg_rtx (V8HImode);\n+      emit_insn (gen_sse2_pshufhw (tmp4, tmp3, GEN_INT (0xfe)));\n+\n+      rtx tmp5 = force_reg (V4SImode, gen_lowpart (V4SImode, tmp4));\n+      rtx tmp6 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_sse2_pshufd (tmp6, tmp5, GEN_INT (0xfe)));\n+\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp6));\n       return;\n     }\n \n@@ -6528,79 +6521,63 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       /* Three operations.  */\n       if (bits == 32)\n \t{\n-\t  rtx tmp1 = gen_reg_rtx (V4SImode);\n+\t  rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n \t  rtx tmp2 = gen_reg_rtx (V4SImode);\n-\t  emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n \t  emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (31)));\n \n \t  rtx tmp3 = gen_reg_rtx (V1TImode);\n \t  emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (32)));\n \n \t  if (TARGET_AVX2)\n \t    {\n-\t      rtx tmp4 = gen_reg_rtx (V4SImode);\n+\t      rtx tmp4 = force_reg (V4SImode, gen_lowpart (V4SImode, tmp3));\n \t      rtx tmp5 = gen_reg_rtx (V4SImode);\n-\t      emit_move_insn (tmp4, gen_lowpart (V4SImode, tmp3));\n \t      emit_insn (gen_avx2_pblenddv4si (tmp5, tmp2, tmp4,\n \t\t\t\t\t       GEN_INT (7)));\n \n-\t      rtx tmp6 = gen_reg_rtx (V1TImode);\n-\t      emit_move_insn (tmp6, gen_lowpart (V1TImode, tmp5));\n-\t      emit_move_insn (operands[0], tmp6);\n+\t      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp5));\n \t    }\n \t  else\n \t    {\n-\t      rtx tmp4 = gen_reg_rtx (V8HImode);\n-\t      rtx tmp5 = gen_reg_rtx (V8HImode);\n+\t      rtx tmp4 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp2));\n+\t      rtx tmp5 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp3));\n \t      rtx tmp6 = gen_reg_rtx (V8HImode);\n-\t      emit_move_insn (tmp4, gen_lowpart (V8HImode, tmp2));\n-\t      emit_move_insn (tmp5, gen_lowpart (V8HImode, tmp3));\n \t      emit_insn (gen_sse4_1_pblendw (tmp6, tmp4, tmp5,\n \t\t\t\t\t     GEN_INT (0x3f)));\n \n-\t      rtx tmp7 = gen_reg_rtx (V1TImode);\n-\t      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp6));\n-\t      emit_move_insn (operands[0], tmp7);\n+\t      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp6));\n \t    }\n \t  return;\n \t}\n \n       /* Three operations.  */\n       if (bits == 8 || bits == 16 || bits == 24)\n \t{\n-\t  rtx tmp1 = gen_reg_rtx (V4SImode);\n+\t  rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n \t  rtx tmp2 = gen_reg_rtx (V4SImode);\n-\t  emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n \t  emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits)));\n \n \t  rtx tmp3 = gen_reg_rtx (V1TImode);\n \t  emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (bits)));\n \n \t  if (TARGET_AVX2)\n \t    {\n-\t      rtx tmp4 = gen_reg_rtx (V4SImode);\n+\t      rtx tmp4 = force_reg (V4SImode, gen_lowpart (V4SImode, tmp3));\n \t      rtx tmp5 = gen_reg_rtx (V4SImode);\n-\t      emit_move_insn (tmp4, gen_lowpart (V4SImode, tmp3));\n \t      emit_insn (gen_avx2_pblenddv4si (tmp5, tmp2, tmp4,\n \t\t\t\t\t       GEN_INT (7)));\n \n-\t      rtx tmp6 = gen_reg_rtx (V1TImode);\n-\t      emit_move_insn (tmp6, gen_lowpart (V1TImode, tmp5));\n-\t      emit_move_insn (operands[0], tmp6);\n+\t      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp5));\n \t    }\n \t  else\n \t    {\n-\t      rtx tmp4 = gen_reg_rtx (V8HImode);\n-\t      rtx tmp5 = gen_reg_rtx (V8HImode);\n+\t      rtx tmp4 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp2));\n+\t      rtx tmp5 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp3));\n \t      rtx tmp6 = gen_reg_rtx (V8HImode);\n-\t      emit_move_insn (tmp4, gen_lowpart (V8HImode, tmp2));\n-\t      emit_move_insn (tmp5, gen_lowpart (V8HImode, tmp3));\n \t      emit_insn (gen_sse4_1_pblendw (tmp6, tmp4, tmp5,\n \t\t\t\t\t     GEN_INT (0x3f)));\n \n-\t      rtx tmp7 = gen_reg_rtx (V1TImode);\n-\t      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp6));\n-\t      emit_move_insn (operands[0], tmp7);\n+\t      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp6));\n \t    }\n \t  return;\n \t}\n@@ -6609,38 +6586,31 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n   if (bits > 96)\n     {\n       /* Four operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits - 96)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n       emit_insn (gen_ashrv4si3 (tmp3, tmp1, GEN_INT (31)));\n \n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n-      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp2));\n+      rtx tmp5 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp3));\n       rtx tmp6 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp2));\n-      emit_move_insn (tmp5, gen_lowpart (V2DImode, tmp3));\n       emit_insn (gen_vec_interleave_highv2di (tmp6, tmp4, tmp5));\n \n-      rtx tmp7 = gen_reg_rtx (V4SImode);\n+      rtx tmp7 = force_reg (V4SImode, gen_lowpart (V4SImode, tmp6));\n       rtx tmp8 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp7, gen_lowpart (V4SImode, tmp6));\n       emit_insn (gen_sse2_pshufd (tmp8, tmp7, GEN_INT (0xfd)));\n \n-      rtx tmp9 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp9, gen_lowpart (V1TImode, tmp8));\n-      emit_move_insn (operands[0], tmp9);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp8));\n       return;\n     }\n \n   if (TARGET_SSE4_1 && (bits == 48 || bits == 80))\n     {\n       /* Four operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n@@ -6649,26 +6619,21 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       rtx tmp4 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (bits)));\n \n-      rtx tmp5 = gen_reg_rtx (V8HImode);\n-      rtx tmp6 = gen_reg_rtx (V8HImode);\n+      rtx tmp5 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp3));\n+      rtx tmp6 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp4));\n       rtx tmp7 = gen_reg_rtx (V8HImode);\n-      emit_move_insn (tmp5, gen_lowpart (V8HImode, tmp3));\n-      emit_move_insn (tmp6, gen_lowpart (V8HImode, tmp4));\n       emit_insn (gen_sse4_1_pblendw (tmp7, tmp5, tmp6,\n \t\t\t\t     GEN_INT (bits == 48 ? 0x1f : 0x07)));\n \n-      rtx tmp8 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp8, gen_lowpart (V1TImode, tmp7));\n-      emit_move_insn (operands[0], tmp8);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp7));\n       return;\n     }\n \n   if ((bits & 7) == 0)\n     {\n       /* Five operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n@@ -6677,93 +6642,75 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       rtx tmp4 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (bits)));\n \n-      rtx tmp5 = gen_reg_rtx (V1TImode);\n+      rtx tmp5 = force_reg (V1TImode, gen_lowpart (V1TImode, tmp3));\n       rtx tmp6 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp5, gen_lowpart (V1TImode, tmp3));\n       emit_insn (gen_sse2_ashlv1ti3 (tmp6, tmp5, GEN_INT (128 - bits)));\n \n-      rtx tmp7 = gen_reg_rtx (V2DImode);\n-      rtx tmp8 = gen_reg_rtx (V2DImode);\n+      rtx tmp7 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp4));\n+      rtx tmp8 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp6));\n       rtx tmp9 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp7, gen_lowpart (V2DImode, tmp4));\n-      emit_move_insn (tmp8, gen_lowpart (V2DImode, tmp6));\n       emit_insn (gen_iorv2di3 (tmp9, tmp7, tmp8));\n \n-      rtx tmp10 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp10, gen_lowpart (V1TImode, tmp9));\n-      emit_move_insn (operands[0], tmp10);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp9));\n       return;\n     }\n \n   if (TARGET_AVX2 && bits < 32)\n     {\n       /* Six operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits)));\n \n       rtx tmp3 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (64)));\n \n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, op1));\n       rtx tmp5 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, op1));\n       emit_insn (gen_lshrv2di3 (tmp5, tmp4, GEN_INT (bits)));\n \n-      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      rtx tmp6 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp3));\n       rtx tmp7 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp6, gen_lowpart (V2DImode, tmp3));\n       emit_insn (gen_ashlv2di3 (tmp7, tmp6, GEN_INT (64 - bits)));\n \n       rtx tmp8 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_iorv2di3 (tmp8, tmp5, tmp7));\n \n-      rtx tmp9 = gen_reg_rtx (V4SImode);\n+      rtx tmp9 = force_reg (V4SImode, gen_lowpart (V4SImode, tmp8));\n       rtx tmp10 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp9, gen_lowpart (V4SImode, tmp8));\n       emit_insn (gen_avx2_pblenddv4si (tmp10, tmp2, tmp9, GEN_INT (7)));\n \n-      rtx tmp11 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp11, gen_lowpart (V1TImode, tmp10));\n-      emit_move_insn (operands[0], tmp11);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp10));\n       return;\n     }\n \n   if (TARGET_SSE4_1 && bits < 15)\n     {\n       /* Six operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits)));\n \n       rtx tmp3 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (64)));\n \n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, op1));\n       rtx tmp5 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, op1));\n       emit_insn (gen_lshrv2di3 (tmp5, tmp4, GEN_INT (bits)));\n \n-      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      rtx tmp6 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp3));\n       rtx tmp7 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp6, gen_lowpart (V2DImode, tmp3));\n       emit_insn (gen_ashlv2di3 (tmp7, tmp6, GEN_INT (64 - bits)));\n \n       rtx tmp8 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_iorv2di3 (tmp8, tmp5, tmp7));\n \n-      rtx tmp9 = gen_reg_rtx (V8HImode);\n-      rtx tmp10 = gen_reg_rtx (V8HImode);\n+      rtx tmp9 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp2));\n+      rtx tmp10 = force_reg (V8HImode, gen_lowpart (V8HImode, tmp8));\n       rtx tmp11 = gen_reg_rtx (V8HImode);\n-      emit_move_insn (tmp9, gen_lowpart (V8HImode, tmp2));\n-      emit_move_insn (tmp10, gen_lowpart (V8HImode, tmp8));\n       emit_insn (gen_sse4_1_pblendw (tmp11, tmp9, tmp10, GEN_INT (0x3f)));\n \n-      rtx tmp12 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp12, gen_lowpart (V1TImode, tmp11));\n-      emit_move_insn (operands[0], tmp12);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp11));\n       return;\n     }\n \n@@ -6773,14 +6720,12 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       rtx tmp1 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp1, op1, GEN_INT (64)));\n \n-      rtx tmp2 = gen_reg_rtx (V2DImode);\n+      rtx tmp2 = force_reg (V2DImode, gen_lowpart (V2DImode, op1));\n       rtx tmp3 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp2, gen_lowpart (V2DImode, op1));\n       emit_insn (gen_lshrv2di3 (tmp3, tmp2, GEN_INT (1)));\n \n-      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp4 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp1));\n       rtx tmp5 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp1));\n       emit_insn (gen_ashlv2di3 (tmp5, tmp4, GEN_INT (63)));\n \n       rtx tmp6 = gen_reg_rtx (V2DImode);\n@@ -6789,31 +6734,26 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       rtx tmp7 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_lshrv2di3 (tmp7, tmp2, GEN_INT (63)));\n \n-      rtx tmp8 = gen_reg_rtx (V4SImode);\n+      rtx tmp8 = force_reg (V4SImode, gen_lowpart (V4SImode, tmp7));\n       rtx tmp9 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp8, gen_lowpart (V4SImode, tmp7));\n       emit_insn (gen_sse2_pshufd (tmp9, tmp8, GEN_INT (0xbf)));\n \n-      rtx tmp10 = gen_reg_rtx (V2DImode);\n+      rtx tmp10 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp9));\n       rtx tmp11 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp10, gen_lowpart (V2DImode, tmp9));\n       emit_insn (gen_ashlv2di3 (tmp11, tmp10, GEN_INT (31)));\n \n       rtx tmp12 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_iorv2di3 (tmp12, tmp6, tmp11));\n \n-      rtx tmp13 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp13, gen_lowpart (V1TImode, tmp12));\n-      emit_move_insn (operands[0], tmp13);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp12));\n       return;\n     }\n \n   if (bits > 64)\n     {\n       /* Eight operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n@@ -6822,39 +6762,32 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       rtx tmp4 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (64)));\n \n-      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp4));\n       rtx tmp6 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp5, gen_lowpart (V2DImode, tmp4));\n       emit_insn (gen_lshrv2di3 (tmp6, tmp5, GEN_INT (bits - 64)));\n \n-      rtx tmp7 = gen_reg_rtx (V1TImode);\n+      rtx tmp7 = force_reg (V1TImode, gen_lowpart (V1TImode, tmp3));\n       rtx tmp8 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp3));\n       emit_insn (gen_sse2_ashlv1ti3 (tmp8, tmp7, GEN_INT (64)));\n  \n-      rtx tmp9 = gen_reg_rtx (V2DImode);\n+      rtx tmp9 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp3));\n       rtx tmp10 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp9, gen_lowpart (V2DImode, tmp3));\n       emit_insn (gen_ashlv2di3 (tmp10, tmp9, GEN_INT (128 - bits)));\n \n-      rtx tmp11 = gen_reg_rtx (V2DImode);\n+      rtx tmp11 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp8));\n       rtx tmp12 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp11, gen_lowpart (V2DImode, tmp8));\n       emit_insn (gen_iorv2di3 (tmp12, tmp10, tmp11));\n \n       rtx tmp13 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_iorv2di3 (tmp13, tmp6, tmp12));\n \n-      rtx tmp14 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp14, gen_lowpart (V1TImode, tmp13));\n-      emit_move_insn (operands[0], tmp14);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp13));\n     }\n   else\n     {\n       /* Nine operations.  */\n-      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp1 = force_reg (V4SImode, gen_lowpart (V4SImode, op1));\n       rtx tmp2 = gen_reg_rtx (V4SImode);\n-      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n       emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n \n       rtx tmp3 = gen_reg_rtx (V4SImode);\n@@ -6863,35 +6796,29 @@ ix86_expand_v1ti_ashiftrt (rtx operands[])\n       rtx tmp4 = gen_reg_rtx (V1TImode);\n       emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (64)));\n \n-      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = force_reg (V2DImode, gen_lowpart (V2DImode, op1));\n       rtx tmp6 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp5, gen_lowpart (V2DImode, op1));\n       emit_insn (gen_lshrv2di3 (tmp6, tmp5, GEN_INT (bits)));\n \n-      rtx tmp7 = gen_reg_rtx (V2DImode);\n+      rtx tmp7 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp4));\n       rtx tmp8 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp7, gen_lowpart (V2DImode, tmp4));\n       emit_insn (gen_ashlv2di3 (tmp8, tmp7, GEN_INT (64 - bits)));\n \n       rtx tmp9 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_iorv2di3 (tmp9, tmp6, tmp8));\n \n-      rtx tmp10 = gen_reg_rtx (V1TImode);\n+      rtx tmp10 = force_reg (V1TImode, gen_lowpart (V1TImode, tmp3));\n       rtx tmp11 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp10, gen_lowpart (V1TImode, tmp3));\n       emit_insn (gen_sse2_ashlv1ti3 (tmp11, tmp10, GEN_INT (64)));\n \n-      rtx tmp12 = gen_reg_rtx (V2DImode);\n+      rtx tmp12 = force_reg (V2DImode, gen_lowpart (V2DImode, tmp11));\n       rtx tmp13 = gen_reg_rtx (V2DImode);\n-      emit_move_insn (tmp12, gen_lowpart (V2DImode, tmp11));\n       emit_insn (gen_ashlv2di3 (tmp13, tmp12, GEN_INT (64 - bits)));\n \n       rtx tmp14 = gen_reg_rtx (V2DImode);\n       emit_insn (gen_iorv2di3 (tmp14, tmp9, tmp13));\n \n-      rtx tmp15 = gen_reg_rtx (V1TImode);\n-      emit_move_insn (tmp15, gen_lowpart (V1TImode, tmp14));\n-      emit_move_insn (operands[0], tmp15);\n+      emit_move_insn (operands[0], gen_lowpart (V1TImode, tmp14));\n     }\n }\n "}]}