{"sha": "122e7b4f9d0c2d54d865272463a1d812002d0a5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyZTdiNGY5ZDBjMmQ1NGQ4NjUyNzI0NjNhMWQ4MTIwMDJkMGE1Yw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2017-02-06T21:39:03Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-02-06T21:39:03Z"}, "message": "RISC-V Port: gcc/testsuite\n\ngcc/testsuite/ChangeLog:\n\n2017-02-06  Kito Cheng  <kito.cheng@gmail.com>\n\n        * lib/target-supports.exp: Define the RISC-V target.\n        * g++.dg/cpp0x/constexpr-rom.C: Skip on RISC-V\n        * gcc.dg/builtin-apply2.c: Likewise.\n        * gcc.dg/ifcvt-4.c: Likewise.\n        * gcc.dg/loop-8.c: Likewise.\n        * gcc.dg/sibcall-10.c: Likewise.\n        * gcc.dg/sibcall-9.c: Likewise.\n        * gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n        * gcc.dg/tree-ssa/20040204-1.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-dom-cse-2.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n        * gcc.c-torture/execute/20101011-1.c: Define DO_TEST on RISC-V.\n        * gcc.dg/20020312-2.c: Don't define PIC_REG on RISC-V.\n        * gcc.dg/stack-usage-1.c: Define SIZE on RISC-V.\n\nFrom-SVN: r245228", "tree": {"sha": "fcfa8f4114005b6b8befa8082e9aa387bff54eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcfa8f4114005b6b8befa8082e9aa387bff54eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/122e7b4f9d0c2d54d865272463a1d812002d0a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122e7b4f9d0c2d54d865272463a1d812002d0a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/122e7b4f9d0c2d54d865272463a1d812002d0a5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/122e7b4f9d0c2d54d865272463a1d812002d0a5c/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b906c007feeacdeea908ae40bc093ce53dc1ee1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b906c007feeacdeea908ae40bc093ce53dc1ee1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b906c007feeacdeea908ae40bc093ce53dc1ee1b"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "57fe2417997e747066757e27e57e8a3980e8c51f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -1,3 +1,20 @@\n+2017-02-06  Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* lib/target-supports.exp: Define the RISC-V target.\n+\t* g++.dg/cpp0x/constexpr-rom.C: Skip on RISC-V\n+\t* gcc.dg/builtin-apply2.c: Likewise.\n+\t* gcc.dg/ifcvt-4.c: Likewise.\n+\t* gcc.dg/loop-8.c: Likewise.\n+\t* gcc.dg/sibcall-10.c: Likewise.\n+\t* gcc.dg/sibcall-9.c: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040204-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-cse-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n+\t* gcc.c-torture/execute/20101011-1.c: Define DO_TEST on RISC-V.\n+\t* gcc.dg/20020312-2.c: Don't define PIC_REG on RISC-V.\n+\t* gcc.dg/stack-usage-1.c: Define SIZE on RISC-V.\n+\n 2017-02-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/66144"}, {"sha": "2e0ef685f36fa0482b800a0078200d015fe35d1c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-rom.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile { target c++11 } }\n // { dg-additional-options -G0 { target { { alpha*-*-* frv*-*-* ia64-*-* lm32*-*-* m32r*-*-* microblaze*-*-* mips*-*-* nios2-*-* powerpc*-*-* rs6000*-*-* } && { ! { *-*-darwin* *-*-aix* alpha*-*-*vms* } } } } }\n // { dg-final { scan-assembler \"\\\\.rdata\" { target mips*-*-* } } }\n-// { dg-final { scan-assembler \"rodata\" { target { { *-*-linux-gnu *-*-gnu* *-*-elf } && { ! mips*-*-* } } } } }\n+// { dg-final { scan-assembler \"rodata\" { target { { *-*-linux-gnu *-*-gnu* *-*-elf } && { ! { mips*-*-* riscv*-*-* } } } } } }\n \n struct Data\n {"}, {"sha": "899a401dd7567a17385140c7dc85c0b9941dd5bc", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -6,6 +6,9 @@\n #elif defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) || defined (__POWERPC__) || defined (__ppc)\n   /* On PPC division by zero does not trap.  */\n # define DO_TEST 0\n+#elif defined (__riscv)\n+  /* On RISC-V division by zero does not trap.  */\n+# define DO_TEST 0\n #elif defined (__SPU__)\n   /* On SPU division by zero does not trap.  */\n # define DO_TEST 0"}, {"sha": "f5929e0b05711e8379a0f4f6528e9b75536f8563", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -67,6 +67,8 @@ extern void abort (void);\n # else\n #  define PIC_REG  \"30\"\n # endif\n+#elif defined(__riscv)\n+/* No pic register.  */\n #elif defined(__RX__)\n /* No pic register.  */\n #elif defined(__s390__)"}, {"sha": "ad61d3b679219a521964f25327a9d37c37f5c0dc", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-effective-target untyped_assembly } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"avr-*-* nds32*-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs.\" { \"riscv*-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { arm*-*-* && arm_hf_eabi } { \"*\" } { \"\" } } */\n \n /* PR target/12503 */"}, {"sha": "466ad15160d813a44f954bcf434970bf598dd23f", "filename": "gcc/testsuite/gcc.dg/ifcvt-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-4.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-fdump-rtl-ce1 -O2 --param max-rtl-if-conversion-insns=3 --param max-rtl-if-conversion-unpredictable-cost=100\" } */\n /* { dg-additional-options \"-misel\" { target { powerpc*-*-* } } } */\n-/* { dg-skip-if \"Multiple set if-conversion not guaranteed on all subtargets\" { \"arm*-*-* hppa*64*-*-* visium-*-*\" } }  */\n+/* { dg-skip-if \"Multiple set if-conversion not guaranteed on all subtargets\" { \"arm*-*-* hppa*64*-*-* visium-*-*\" riscv*-*-* } }  */\n \n typedef int word __attribute__((mode(word)));\n "}, {"sha": "5fcab7b077bb640665d3cfbffc82be4e125f34f4", "filename": "gcc/testsuite/gcc.dg/loop-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fdump-rtl-loop2_invariant\" } */\n-/* { dg-skip-if \"unexpected IV\" { \"hppa*-*-* mips*-*-* visium-*-* powerpc*-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"unexpected IV\" { \"hppa*-*-* mips*-*-* visium-*-* powerpc*-*-* riscv*-*-*\" } { \"*\" } { \"\" } } */\n \n void\n f (int *a, int *b)"}, {"sha": "d89909a1fdcf59be23f11827a21d0a66dcc4215f", "filename": "gcc/testsuite/gcc.dg/sibcall-10.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -8,6 +8,8 @@\n /* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n+/* -msave-restore disables sibcall patterns.  */\n+/* { dg-skip-if \"\" { riscv*-*-* } { \"-msave-restore\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */\n \n /* The option -foptimize-sibling-calls is the default, but serves as"}, {"sha": "8e309522e5328823ce218ec71b1e0ae1c55afbca", "filename": "gcc/testsuite/gcc.dg/sibcall-9.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -8,6 +8,8 @@\n /* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* nvptx-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n+/* -msave-restore disables sibcall patterns.  */\n+/* { dg-skip-if \"\" { riscv*-*-* } { \"-msave-restore\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */\n \n /* The option -foptimize-sibling-calls is the default, but serves as"}, {"sha": "f10ba2061e7691137fe7e40124c8bbf659129d5d", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -63,6 +63,8 @@\n #  else\n #    define SIZE 240\n #  endif\n+#elif defined (__riscv)\n+#  define SIZE 240\n #elif defined (__AVR__)\n #if defined (__AVR_3_BYTE_PC__ )\n #  define SIZE 251 /* 256 - 2 bytes for Y - 3 bytes for return address */"}, {"sha": "eb9d3a9c22c03a941545e804e409adacaa4d1bec", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -9,7 +9,7 @@\n /* arm_hf_eabi: Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\n    avr: Variadic funcs don't pass arguments in registers, while normal funcs\n         do.  */\n-/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* } } \"*\" \"\" } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* } || { riscv*-*-* } } \"*\" \"\" } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { nds32*-*-* } \"*\" \"\" } */\n /* { dg-require-effective-target untyped_assembly } */\n    "}, {"sha": "a1237cf839baa6f3c1c700051c193fef5c443fb6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -33,4 +33,4 @@ void test55 (int x, int y)\n    that the && should be emitted (based on BRANCH_COST).  Fix this\n    by teaching dom to look through && and register all components\n    as true.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* spu-*-* visium-*-* x86_64-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* spu-*-* visium-*-* x86_64-*-* riscv*-*-*\" } } } } */"}, {"sha": "d2600db160a7afbff675c112ae5acc1dac35b241", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-cse-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-2.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -25,4 +25,4 @@ foo ()\n    but the loop reads only one element at a time, and DOM cannot resolve these.\n    The same happens on powerpc depending on the SIMD support available.  */\n \n-/* { dg-final { scan-tree-dump \"return 28;\" \"optimized\" { xfail { { alpha*-*-* hppa*64*-*-* powerpc64*-*-* } || { sparc*-*-* && lp64 } } } } } */\n+/* { dg-final { scan-tree-dump \"return 28;\" \"optimized\" { xfail { { alpha*-*-* hppa*64*-*-* powerpc64*-*-* } || { { sparc*-*-* && lp64 } || { riscv*-*-* && lp64 } } } } } } */"}, {"sha": "eda7118226334fd198fcafab22c38b827fe4115e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -18,4 +18,4 @@ foo (int a, int b)\n   return aa + bb;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) aa_.*with a_\" \"fre1\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) aa_.*with a_\" \"fre1\" { xfail { riscv*-*-* && lp64 } } } } */"}, {"sha": "2766af4f6794402cf541afe645fe95c3e3f4a2b5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/122e7b4f9d0c2d54d865272463a1d812002d0a5c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=122e7b4f9d0c2d54d865272463a1d812002d0a5c", "patch": "@@ -7971,6 +7971,7 @@ proc check_effective_target_logical_op_short_circuit {} {\n \t || [istarget s390*-*-*]\n \t || [istarget powerpc*-*-*]\n \t || [istarget nios2*-*-*]\n+\t || [istarget riscv*-*-*]\n \t || [istarget visium-*-*]\n \t || [check_effective_target_arm_cortex_m] } {\n \treturn 1"}]}