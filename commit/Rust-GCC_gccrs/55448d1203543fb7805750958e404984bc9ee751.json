{"sha": "55448d1203543fb7805750958e404984bc9ee751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0NDhkMTIwMzU0M2ZiNzgwNTc1MDk1OGU0MDQ5ODRiYzllZTc1MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-06-16T18:56:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-06-16T18:56:09Z"}, "message": "Whitespace change.\n\nFrom-SVN: r68031", "tree": {"sha": "a66dd604012ad22f41a6d4cd1dfce854d502d027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66dd604012ad22f41a6d4cd1dfce854d502d027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55448d1203543fb7805750958e404984bc9ee751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55448d1203543fb7805750958e404984bc9ee751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55448d1203543fb7805750958e404984bc9ee751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55448d1203543fb7805750958e404984bc9ee751/comments", "author": null, "committer": null, "parents": [{"sha": "5ab481e097ce751f0ed4b344b620ba14f33d17d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab481e097ce751f0ed4b344b620ba14f33d17d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab481e097ce751f0ed4b344b620ba14f33d17d1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "2df6902cdf053ff6ea9468e52e2f78d4931b9104", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55448d1203543fb7805750958e404984bc9ee751/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55448d1203543fb7805750958e404984bc9ee751/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=55448d1203543fb7805750958e404984bc9ee751", "patch": "@@ -309,7 +309,7 @@ struct tree_common GTY(())\n \n /* Special checks for TREE_OPERANDs.  */\n #define TREE_OPERAND_CHECK(T, I) __extension__\t\t\t\t\\\n-(*({const tree __t = EXPR_CHECK(T);\t\t\t\t\t\\\n+(*({const tree __t = EXPR_CHECK (T);\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n     if (__i < 0 || __i >= TREE_CODE_LENGTH (TREE_CODE (__t)))\t\t\\\n       tree_operand_check_failed (__i, TREE_CODE (__t),\t\t\t\\"}]}