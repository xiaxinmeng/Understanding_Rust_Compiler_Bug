{"sha": "817a77e41e22599a66610617b1112bb76850ff26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3YTc3ZTQxZTIyNTk5YTY2NjEwNjE3YjExMTJiYjc2ODUwZmYyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-02-12T03:31:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-02-12T03:31:02Z"}, "message": "PR c++/77659 - ICE with new and C++14 aggregate NSDMI\n\n\t* init.c (build_new): Make backups of any CONSTRUCTORs in init.\n\t(build_new_1): Use replace_placeholders.\n\t* tree.c (replace_placeholders_t): Also track whether we've seen a\n\tplaceholder.\n\t(replace_placeholders, replace_placeholders_r): Adjust.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r245372", "tree": {"sha": "5b93c54d8db50f37340efb1d9d46397ca795616d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b93c54d8db50f37340efb1d9d46397ca795616d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/817a77e41e22599a66610617b1112bb76850ff26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817a77e41e22599a66610617b1112bb76850ff26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817a77e41e22599a66610617b1112bb76850ff26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817a77e41e22599a66610617b1112bb76850ff26/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95bbcf58810306bb5f0c24e67620a9e710b0d691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95bbcf58810306bb5f0c24e67620a9e710b0d691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95bbcf58810306bb5f0c24e67620a9e710b0d691"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "486cb88575f13f40d7d236bb58d4d2e9ca446df4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=817a77e41e22599a66610617b1112bb76850ff26", "patch": "@@ -1,5 +1,13 @@\n 2017-02-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/77659 - ICE with new and C++14 aggregate NSDMI\n+\t* init.c (build_new): Make backups of any CONSTRUCTORs in init.\n+\t(build_new_1): Use replace_placeholders.\n+\t* tree.c (replace_placeholders_t): Also track whether we've seen a\n+\tplaceholder.\n+\t(replace_placeholders, replace_placeholders_r): Adjust.\n+\t* cp-tree.h: Adjust.\n+\n \tPR c++/77790 - ICE with auto function in C++11 mode\n \t* decl.c (undeduced_auto_decl): Remove C++14 limitation.\n \t(require_deduced_type): Add complain parm, return bool."}, {"sha": "6675ee5bb50eb42abf8647178404f5498d52479e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=817a77e41e22599a66610617b1112bb76850ff26", "patch": "@@ -6658,7 +6658,7 @@ extern tree array_type_nelts_total\t\t(tree);\n extern tree array_type_nelts_top\t\t(tree);\n extern tree break_out_target_exprs\t\t(tree);\n extern tree build_ctor_subob_ref\t\t(tree, tree, tree);\n-extern tree replace_placeholders\t\t(tree, tree);\n+extern tree replace_placeholders\t\t(tree, tree, bool * = NULL);\n extern tree get_type_decl\t\t\t(tree);\n extern tree decl_namespace_context\t\t(tree);\n extern bool decl_anon_ns_mem_p\t\t\t(const_tree);"}, {"sha": "524c583138f3e5cf7eb6ab05ad97e27c4c033642", "filename": "gcc/cp/init.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=817a77e41e22599a66610617b1112bb76850ff26", "patch": "@@ -3282,7 +3282,19 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t      init_expr = cp_build_modify_expr (input_location, init_expr,\n \t\t\t\t\t\tINIT_EXPR, ie, complain);\n \t    }\n-\t  stable = stabilize_init (init_expr, &init_preeval_expr);\n+\t  /* If the initializer uses C++14 aggregate NSDMI that refer to the\n+\t     object being initialized, replace them now and don't try to\n+\t     preevaluate.  */\n+\t  bool had_placeholder = false;\n+\t  if (cxx_dialect >= cxx14\n+\t      && !processing_template_decl\n+\t      && TREE_CODE (init_expr) == INIT_EXPR)\n+\t    TREE_OPERAND (init_expr, 1)\n+\t      = replace_placeholders (TREE_OPERAND (init_expr, 1),\n+\t\t\t\t      TREE_OPERAND (init_expr, 0),\n+\t\t\t\t      &had_placeholder);\n+\t  stable = (!had_placeholder\n+\t\t    && stabilize_init (init_expr, &init_preeval_expr));\n \t}\n \n       if (init_expr == error_mark_node)\n@@ -3454,7 +3466,17 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n       orig_placement = make_tree_vector_copy (*placement);\n       orig_nelts = nelts;\n       if (*init)\n-\torig_init = make_tree_vector_copy (*init);\n+\t{\n+\t  orig_init = make_tree_vector_copy (*init);\n+\t  /* Also copy any CONSTRUCTORs in *init, since reshape_init and\n+\t     digest_init clobber them in place.  */\n+\t  for (unsigned i = 0; i < orig_init->length(); ++i)\n+\t    {\n+\t      tree e = (**init)[i];\n+\t      if (TREE_CODE (e) == CONSTRUCTOR)\n+\t\t(**init)[i] = copy_node (e);\n+\t    }\n+\t}\n \n       make_args_non_dependent (*placement);\n       if (nelts)"}, {"sha": "d3c63b82cb347e9baadf8f4f76aefee4e04e5a75", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=817a77e41e22599a66610617b1112bb76850ff26", "patch": "@@ -2728,13 +2728,20 @@ build_ctor_subob_ref (tree index, tree type, tree obj)\n   return obj;\n }\n \n+struct replace_placeholders_t\n+{\n+  tree obj;\t    /* The object to be substituted for a PLACEHOLDER_EXPR.  */\n+  bool seen;\t    /* Whether we've encountered a PLACEHOLDER_EXPR.  */\n+};\n+\n /* Like substitute_placeholder_in_expr, but handle C++ tree codes and\n    build up subexpressions as we go deeper.  */\n \n static tree\n replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n {\n-  tree obj = static_cast<tree>(data_);\n+  replace_placeholders_t *d = static_cast<replace_placeholders_t*>(data_);\n+  tree obj = d->obj;\n \n   if (TREE_CONSTANT (*t))\n     {\n@@ -2753,6 +2760,7 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n \t  gcc_assert (TREE_CODE (x) == COMPONENT_REF);\n \t*t = x;\n \t*walk_subtrees = false;\n+\td->seen = true;\n       }\n       break;\n \n@@ -2778,9 +2786,10 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n \t\tif (TREE_CODE (*valp) == TARGET_EXPR)\n \t\t  valp = &TARGET_EXPR_INITIAL (*valp);\n \t      }\n-\n+\t    d->obj = subob;\n \t    cp_walk_tree (valp, replace_placeholders_r,\n-\t\t\t  subob, NULL);\n+\t\t\t  data_, NULL);\n+\t    d->obj = obj;\n \t  }\n \t*walk_subtrees = false;\n \tbreak;\n@@ -2794,12 +2803,15 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n }\n \n tree\n-replace_placeholders (tree exp, tree obj)\n+replace_placeholders (tree exp, tree obj, bool *seen_p)\n {\n   tree *tp = &exp;\n+  replace_placeholders_t data = { obj, false };\n   if (TREE_CODE (exp) == TARGET_EXPR)\n     tp = &TARGET_EXPR_INITIAL (exp);\n-  cp_walk_tree (tp, replace_placeholders_r, obj, NULL);\n+  cp_walk_tree (tp, replace_placeholders_r, &data, NULL);\n+  if (seen_p)\n+    *seen_p = data.seen;\n   return exp;\n }\n "}, {"sha": "83fdedde11e26290e6de20373d703426202fd808", "filename": "gcc/testsuite/g++.dg/cpp1y/nsdmi-aggr6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/817a77e41e22599a66610617b1112bb76850ff26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr6.C?ref=817a77e41e22599a66610617b1112bb76850ff26", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/77659\n+// { dg-do compile { target c++14 } }\n+\n+template <typename Type> Type get_max_value(Type);\n+struct A {\n+  struct B {\n+    int baz = get_max_value(baz);\n+  };\n+  template <typename> void m_fn1() { new B{}; }\n+};\n+void foo() {\n+  A a;\n+  a.m_fn1<int>();\n+}"}]}