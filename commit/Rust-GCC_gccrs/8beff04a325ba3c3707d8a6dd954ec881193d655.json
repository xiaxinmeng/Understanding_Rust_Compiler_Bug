{"sha": "8beff04a325ba3c3707d8a6dd954ec881193d655", "node_id": "C_kwDOANBUbNoAKDhiZWZmMDRhMzI1YmEzYzM3MDdkOGE2ZGQ5NTRlYzg4MTE5M2Q2NTU", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T15:43:48Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-14T17:41:32Z"}, "message": "middle-end: Support not decomposing specific divisions during vectorization.\n\nIn plenty of image and video processing code it's common to modify pixel values\nby a widening operation and then scale them back into range by dividing by 255.\n\ne.g.:\n\n   x = y / (2 ^ (bitsize (y)/2)-1\n\nThis patch adds a new target hook can_special_div_by_const, similar to\ncan_vec_perm which can be called to check if a target will handle a particular\ndivision in a special way in the back-end.\n\nThe vectorizer will then vectorize the division using the standard tree code\nand at expansion time the hook is called again to generate the code for the\ndivision.\n\nAlot of the changes in the patch are to pass down the tree operands in all paths\nthat can lead to the divmod expansion so that the target hook always has the\ntype of the expression you're expanding since the types can change the\nexpansion.\n\ngcc/ChangeLog:\n\n\t* expmed.h (expand_divmod): Pass tree operands down in addition to RTX.\n\t* expmed.cc (expand_divmod): Likewise.\n\t* explow.cc (round_push, align_dynamic_address): Likewise.\n\t* expr.cc (force_operand, expand_expr_divmod): Likewise.\n\t* optabs.cc (expand_doubleword_mod, expand_doubleword_divmod):\n\tLikewise.\n\t* target.h: Include tree-core.\n\t* target.def (can_special_div_by_const): New.\n\t* targhooks.cc (default_can_special_div_by_const): New.\n\t* targhooks.h (default_can_special_div_by_const): New.\n\t* tree-vect-generic.cc (expand_vector_operation): Use it.\n\t* doc/tm.texi.in: Document it.\n\t* doc/tm.texi: Regenerate.\n\t* tree-vect-patterns.cc (vect_recog_divmod_pattern): Check for support.\n\t* tree-vect-stmts.cc (vectorizable_operation): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/vect-div-bitmask-1.c: New test.\n\t* gcc.dg/vect/vect-div-bitmask-2.c: New test.\n\t* gcc.dg/vect/vect-div-bitmask-3.c: New test.\n\t* gcc.dg/vect/vect-div-bitmask.h: New file.", "tree": {"sha": "5500b57540f9a13b22f7dae5a4e9db85349049c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5500b57540f9a13b22f7dae5a4e9db85349049c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8beff04a325ba3c3707d8a6dd954ec881193d655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8beff04a325ba3c3707d8a6dd954ec881193d655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8beff04a325ba3c3707d8a6dd954ec881193d655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8beff04a325ba3c3707d8a6dd954ec881193d655/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2bb611d90d01f64a2456c29de2a2ca1211ac134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bb611d90d01f64a2456c29de2a2ca1211ac134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bb611d90d01f64a2456c29de2a2ca1211ac134"}], "stats": {"total": 266, "additions": 239, "deletions": 27}, "files": [{"sha": "af77d16030cf6746236331eb11915e452e876c4f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -6137,6 +6137,22 @@ instruction pattern.  There is no need for the hook to handle these two\n implementation approaches itself.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST (enum @var{tree_code}, tree @var{vectype}, wide_int @var{constant}, rtx *@var{output}, rtx @var{in0}, rtx @var{in1})\n+This hook is used to test whether the target has a special method of\n+division of vectors of type @var{vectype} using the value @var{constant},\n+and producing a vector of type @var{vectype}.  The division\n+will then not be decomposed by the vectorizer and kept as a div.\n+\n+When the hook is being used to test whether the target supports a special\n+divide, @var{in0}, @var{in1}, and @var{output} are all null.  When the hook\n+is being used to emit a division, @var{in0} and @var{in1} are the source\n+vectors of type @var{vecttype} and @var{output} is the destination vector of\n+type @var{vectype}.\n+\n+Return true if the operation is possible, emitting instructions for it\n+if rtxes are provided and updating @var{output}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (unsigned @var{code}, tree @var{vec_type_out}, tree @var{vec_type_in})\n This hook should return the decl of a function that implements the\n vectorized variant of the function with the @code{combined_fn} code"}, {"sha": "62c49ac46de69f5bdd50770ba00ceb375436df2d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -4173,6 +4173,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_VECTORIZE_VEC_PERM_CONST\n \n+@hook TARGET_VECTORIZE_CAN_SPECIAL_DIV_BY_CONST\n+\n @hook TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n \n @hook TARGET_VECTORIZE_BUILTIN_MD_VECTORIZED_FUNCTION"}, {"sha": "568e0eb1a158c696458ae678f5e346bf34ba0036", "filename": "gcc/explow.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexplow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexplow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -1037,7 +1037,7 @@ round_push (rtx size)\n      TRUNC_DIV_EXPR.  */\n   size = expand_binop (Pmode, add_optab, size, alignm1_rtx,\n \t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-  size = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, size, align_rtx,\n+  size = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, NULL, NULL, size, align_rtx,\n \t\t\tNULL_RTX, 1);\n   size = expand_mult (Pmode, size, align_rtx, NULL_RTX, 1);\n \n@@ -1203,7 +1203,7 @@ align_dynamic_address (rtx target, unsigned required_align)\n \t\t\t gen_int_mode (required_align / BITS_PER_UNIT - 1,\n \t\t\t\t       Pmode),\n \t\t\t NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-  target = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, target,\n+  target = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, NULL, NULL, target,\n \t\t\t  gen_int_mode (required_align / BITS_PER_UNIT,\n \t\t\t\t\tPmode),\n \t\t\t  NULL_RTX, 1);"}, {"sha": "b12b0e000c214592bb4f9dfb4bd598aecb6ed456", "filename": "gcc/expmed.cc", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -4222,8 +4222,8 @@ expand_sdiv_pow2 (scalar_int_mode mode, rtx op0, HOST_WIDE_INT d)\n \n rtx\n expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n-\t       rtx op0, rtx op1, rtx target, int unsignedp,\n-\t       enum optab_methods methods)\n+\t       tree treeop0, tree treeop1, rtx op0, rtx op1, rtx target,\n+\t       int unsignedp, enum optab_methods methods)\n {\n   machine_mode compute_mode;\n   rtx tquotient;\n@@ -4375,6 +4375,17 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \n   last_div_const = ! rem_flag && op1_is_constant ? INTVAL (op1) : 0;\n \n+  /* Check if the target has specific expansions for the division.  */\n+  tree cst;\n+  if (treeop0\n+      && treeop1\n+      && (cst = uniform_integer_cst_p (treeop1))\n+      && targetm.vectorize.can_special_div_by_const (code, TREE_TYPE (treeop0),\n+\t\t\t\t\t\t     wi::to_wide (cst),\n+\t\t\t\t\t\t     &target, op0, op1))\n+    return target;\n+\n+\n   /* Now convert to the best mode to use.  */\n   if (compute_mode != mode)\n     {\n@@ -4618,8 +4629,8 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t    || (optab_handler (sdivmod_optab, int_mode)\n \t\t\t\t!= CODE_FOR_nothing)))\n \t\t      quotient = expand_divmod (0, TRUNC_DIV_EXPR,\n-\t\t\t\t\t\tint_mode, op0,\n-\t\t\t\t\t\tgen_int_mode (abs_d,\n+\t\t\t\t\t\tint_mode, treeop0, treeop1,\n+\t\t\t\t\t\top0, gen_int_mode (abs_d,\n \t\t\t\t\t\t\t      int_mode),\n \t\t\t\t\t\tNULL_RTX, 0);\n \t\t    else\n@@ -4808,8 +4819,8 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t\t      size - 1, NULL_RTX, 0);\n \t\tt3 = force_operand (gen_rtx_MINUS (int_mode, t1, nsign),\n \t\t\t\t    NULL_RTX);\n-\t\tt4 = expand_divmod (0, TRUNC_DIV_EXPR, int_mode, t3, op1,\n-\t\t\t\t    NULL_RTX, 0);\n+\t\tt4 = expand_divmod (0, TRUNC_DIV_EXPR, int_mode, treeop0,\n+\t\t\t\t    treeop1, t3, op1, NULL_RTX, 0);\n \t\tif (t4)\n \t\t  {\n \t\t    rtx t5;"}, {"sha": "98fc5b7750d21a1f37973c584e1e88f1482c17a7", "filename": "gcc/expmed.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexpmed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexpmed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.h?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -710,8 +710,9 @@ extern rtx expand_shift (enum tree_code, machine_mode, rtx, poly_int64, rtx,\n extern rtx maybe_expand_shift (enum tree_code, machine_mode, rtx, int, rtx,\n \t\t\t       int);\n #ifdef GCC_OPTABS_H\n-extern rtx expand_divmod (int, enum tree_code, machine_mode, rtx, rtx,\n-\t\t\t  rtx, int, enum optab_methods = OPTAB_LIB_WIDEN);\n+extern rtx expand_divmod (int, enum tree_code, machine_mode, tree, tree,\n+\t\t\t  rtx, rtx, rtx, int,\n+\t\t\t  enum optab_methods = OPTAB_LIB_WIDEN);\n #endif\n #endif\n "}, {"sha": "d9407432ea5d051852ecd162459a4d1232db1eda", "filename": "gcc/expr.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -8204,16 +8204,17 @@ force_operand (rtx value, rtx target)\n \t    return expand_divmod (0,\n \t\t\t\t  FLOAT_MODE_P (GET_MODE (value))\n \t\t\t\t  ? RDIV_EXPR : TRUNC_DIV_EXPR,\n-\t\t\t\t  GET_MODE (value), op1, op2, target, 0);\n+\t\t\t\t  GET_MODE (value), NULL, NULL, op1, op2,\n+\t\t\t\t  target, 0);\n \tcase MOD:\n-\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), op1, op2,\n-\t\t\t\ttarget, 0);\n+\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), NULL, NULL,\n+\t\t\t\top1, op2, target, 0);\n \tcase UDIV:\n-\t  return expand_divmod (0, TRUNC_DIV_EXPR, GET_MODE (value), op1, op2,\n-\t\t\t\ttarget, 1);\n+\t  return expand_divmod (0, TRUNC_DIV_EXPR, GET_MODE (value), NULL, NULL,\n+\t\t\t\top1, op2, target, 1);\n \tcase UMOD:\n-\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), op1, op2,\n-\t\t\t\ttarget, 1);\n+\t  return expand_divmod (1, TRUNC_MOD_EXPR, GET_MODE (value), NULL, NULL,\n+\t\t\t\top1, op2, target, 1);\n \tcase ASHIFTRT:\n \t  return expand_simple_binop (GET_MODE (value), code, op1, op2,\n \t\t\t\t      target, 0, OPTAB_LIB_WIDEN);\n@@ -9166,11 +9167,13 @@ expand_expr_divmod (tree_code code, machine_mode mode, tree treeop0,\n       bool speed_p = optimize_insn_for_speed_p ();\n       do_pending_stack_adjust ();\n       start_sequence ();\n-      rtx uns_ret = expand_divmod (mod_p, code, mode, op0, op1, target, 1);\n+      rtx uns_ret = expand_divmod (mod_p, code, mode, treeop0, treeop1,\n+\t\t\t\t   op0, op1, target, 1);\n       rtx_insn *uns_insns = get_insns ();\n       end_sequence ();\n       start_sequence ();\n-      rtx sgn_ret = expand_divmod (mod_p, code, mode, op0, op1, target, 0);\n+      rtx sgn_ret = expand_divmod (mod_p, code, mode, treeop0, treeop1,\n+\t\t\t\t   op0, op1, target, 0);\n       rtx_insn *sgn_insns = get_insns ();\n       end_sequence ();\n       unsigned uns_cost = seq_cost (uns_insns, speed_p);\n@@ -9192,7 +9195,8 @@ expand_expr_divmod (tree_code code, machine_mode mode, tree treeop0,\n       emit_insn (sgn_insns);\n       return sgn_ret;\n     }\n-  return expand_divmod (mod_p, code, mode, op0, op1, target, unsignedp);\n+  return expand_divmod (mod_p, code, mode, treeop0, treeop1,\n+\t\t\top0, op1, target, unsignedp);\n }\n \n rtx"}, {"sha": "2d9ca4e56ab50fdcbb0c23dd7fd7f81be0c9abb9", "filename": "gcc/optabs.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -1104,8 +1104,9 @@ expand_doubleword_mod (machine_mode mode, rtx op0, rtx op1, bool unsignedp)\n \t\treturn NULL_RTX;\n \t    }\n \t}\n-      rtx remainder = expand_divmod (1, TRUNC_MOD_EXPR, word_mode, sum,\n-\t\t\t\t     gen_int_mode (INTVAL (op1), word_mode),\n+      rtx remainder = expand_divmod (1, TRUNC_MOD_EXPR, word_mode, NULL, NULL,\n+\t\t\t\t     sum, gen_int_mode (INTVAL (op1),\n+\t\t\t\t\t\t\tword_mode),\n \t\t\t\t     NULL_RTX, 1, OPTAB_DIRECT);\n       if (remainder == NULL_RTX)\n \treturn NULL_RTX;\n@@ -1208,8 +1209,8 @@ expand_doubleword_divmod (machine_mode mode, rtx op0, rtx op1, rtx *rem,\n \n   if (op11 != const1_rtx)\n     {\n-      rtx rem2 = expand_divmod (1, TRUNC_MOD_EXPR, mode, quot1, op11,\n-\t\t\t\tNULL_RTX, unsignedp, OPTAB_DIRECT);\n+      rtx rem2 = expand_divmod (1, TRUNC_MOD_EXPR, mode, NULL, NULL, quot1,\n+\t\t\t\top11, NULL_RTX, unsignedp, OPTAB_DIRECT);\n       if (rem2 == NULL_RTX)\n \treturn NULL_RTX;\n \n@@ -1223,8 +1224,8 @@ expand_doubleword_divmod (machine_mode mode, rtx op0, rtx op1, rtx *rem,\n       if (rem2 == NULL_RTX)\n \treturn NULL_RTX;\n \n-      rtx quot2 = expand_divmod (0, TRUNC_DIV_EXPR, mode, quot1, op11,\n-\t\t\t\t NULL_RTX, unsignedp, OPTAB_DIRECT);\n+      rtx quot2 = expand_divmod (0, TRUNC_DIV_EXPR, mode, NULL, NULL, quot1,\n+\t\t\t\t op11, NULL_RTX, unsignedp, OPTAB_DIRECT);\n       if (quot2 == NULL_RTX)\n \treturn NULL_RTX;\n "}, {"sha": "6707540dc99a6bed3d9cee19a5259b2e66db2877", "filename": "gcc/target.def", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -1905,6 +1905,25 @@ implementation approaches itself.\",\n \tconst vec_perm_indices &sel),\n  NULL)\n \n+DEFHOOK\n+(can_special_div_by_const,\n+ \"This hook is used to test whether the target has a special method of\\n\\\n+division of vectors of type @var{vectype} using the value @var{constant},\\n\\\n+and producing a vector of type @var{vectype}.  The division\\n\\\n+will then not be decomposed by the and kept as a div.\\n\\\n+\\n\\\n+When the hook is being used to test whether the target supports a special\\n\\\n+divide, @var{in0}, @var{in1}, and @var{output} are all null.  When the hook\\n\\\n+is being used to emit a division, @var{in0} and @var{in1} are the source\\n\\\n+vectors of type @var{vecttype} and @var{output} is the destination vector of\\n\\\n+type @var{vectype}.\\n\\\n+\\n\\\n+Return true if the operation is possible, emitting instructions for it\\n\\\n+if rtxes are provided and updating @var{output}.\",\n+ bool, (enum tree_code, tree vectype, wide_int constant, rtx *output,\n+\trtx in0, rtx in1),\n+ default_can_special_div_by_const)\n+\n /* Return true if the target supports misaligned store/load of a\n    specific factor denoted in the third parameter.  The last parameter\n    is true if the access is defined in a packed struct.  */"}, {"sha": "c836036ac7fa7910d62bd3da56f39c061f68b665", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -51,6 +51,7 @@\n #include \"insn-codes.h\"\n #include \"tm.h\"\n #include \"hard-reg-set.h\"\n+#include \"tree-core.h\"\n \n #if CHECKING_P\n "}, {"sha": "4bfdd586a3c59c13a1b415a129ff3ff7dc9883a6", "filename": "gcc/targhooks.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarghooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarghooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -1840,6 +1840,14 @@ default_have_conditional_execution (void)\n   return HAVE_conditional_execution;\n }\n \n+/* Default that no division by constant operations are special.  */\n+bool\n+default_can_special_div_by_const (enum tree_code, tree, wide_int, rtx *, rtx,\n+\t\t\t\t  rtx)\n+{\n+  return false;\n+}\n+\n /* By default we assume that c99 functions are present at the runtime,\n    but sincos is not.  */\n bool"}, {"sha": "cb18f486821ed0f6056e62f340cd04634723a565", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -209,6 +209,8 @@ extern void default_addr_space_diagnose_usage (addr_space_t, location_t);\n extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);\n+extern bool default_can_special_div_by_const (enum tree_code, tree, wide_int,\n+\t\t\t\t\t      rtx *, rtx, rtx);\n \n extern bool default_libc_has_function (enum function_class, tree);\n extern bool default_libc_has_fast_function (int fcode);"}, {"sha": "472cd710534bc8aa9b1b4916f3d7b4d5b64a19b9", "filename": "gcc/testsuite/gcc.dg/vect/vect-div-bitmask-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-1.c?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdint.h>\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+#define TYPE uint8_t \n+\n+__attribute__((noipa, noinline, optimize(\"O1\")))\n+void fun1(TYPE* restrict pixel, TYPE level, int n)\n+{\n+  for (int i = 0; i < n; i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xff;\n+}\n+\n+__attribute__((noipa, noinline, optimize(\"O3\")))\n+void fun2(TYPE* restrict pixel, TYPE level, int n)\n+{\n+  for (int i = 0; i < n; i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xff;\n+}\n+\n+#include \"vect-div-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_divmod_pattern: detected\" \"vect\" { target aarch64*-*-* } } } */"}, {"sha": "e904a71885b2e8487593a2cd3db75b3e4112e2cc", "filename": "gcc/testsuite/gcc.dg/vect/vect-div-bitmask-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-2.c?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdint.h>\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+#define TYPE uint16_t \n+\n+__attribute__((noipa, noinline, optimize(\"O1\")))\n+void fun1(TYPE* restrict pixel, TYPE level, int n)\n+{\n+  for (int i = 0; i < n; i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xffffU;\n+}\n+\n+__attribute__((noipa, noinline, optimize(\"O3\")))\n+void fun2(TYPE* restrict pixel, TYPE level, int n)\n+{\n+  for (int i = 0; i < n; i+=1)\n+    pixel[i] = (pixel[i] * level) / 0xffffU;\n+}\n+\n+#include \"vect-div-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_divmod_pattern: detected\" \"vect\" { target aarch64*-*-* } } } */"}, {"sha": "a1418ebbf5ea8731ed4e3e720157701d9d1cf852", "filename": "gcc/testsuite/gcc.dg/vect/vect-div-bitmask-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask-3.c?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fno-vect-cost-model\" { target aarch64*-*-* } } */\n+\n+#include <stdint.h>\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+#define TYPE uint32_t \n+\n+__attribute__((noipa, noinline, optimize(\"O1\")))\n+void fun1(TYPE* restrict pixel, TYPE level, int n)\n+{\n+  for (int i = 0; i < n; i+=1)\n+    pixel[i] = (pixel[i] * (uint64_t)level) / 0xffffffffUL;\n+}\n+\n+__attribute__((noipa, noinline, optimize(\"O3\")))\n+void fun2(TYPE* restrict pixel, TYPE level, int n)\n+{\n+  for (int i = 0; i < n; i+=1)\n+    pixel[i] = (pixel[i] * (uint64_t)level) / 0xffffffffUL;\n+}\n+\n+#include \"vect-div-bitmask.h\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_divmod_pattern: detected\" \"vect\" { target aarch64*-*-* } } } */"}, {"sha": "29a16739aa4b706616367bfd1832f28ebd07993e", "filename": "gcc/testsuite/gcc.dg/vect/vect-div-bitmask.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-div-bitmask.h?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -0,0 +1,43 @@\n+#include <stdio.h>\n+\n+#ifndef N\n+#define N 65\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE uint32_t\n+#endif\n+\n+#ifndef DEBUG\n+#define DEBUG 0\n+#endif\n+\n+#define BASE ((TYPE) -1 < 0 ? -126 : 4)\n+\n+int main ()\n+{\n+  TYPE a[N];\n+  TYPE b[N];\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 13;\n+      b[i] = BASE + i * 13;\n+      if (DEBUG)\n+        printf (\"%d: 0x%x\\n\", i, a[i]);\n+    }\n+\n+  fun1 (a, N / 2, N);\n+  fun2 (b, N / 2, N);\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (DEBUG)\n+        printf (\"%d = 0x%x == 0x%x\\n\", i, a[i], b[i]);\n+\n+      if (a[i] != b[i])\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "6ad6372c55eef94a742a8fa35e79d66aa24e2f3b", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -1237,6 +1237,17 @@ expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type\n \t  tree rhs2 = gimple_assign_rhs2 (assign);\n \t  tree ret;\n \n+\t  /* Check if the target was going to handle it through the special\n+\t     division callback hook.  */\n+\t  tree cst = uniform_integer_cst_p (rhs2);\n+\t  if (cst &&\n+\t      targetm.vectorize.can_special_div_by_const (code, type,\n+\t\t\t\t\t\t\t  wi::to_wide (cst),\n+\t\t\t\t\t\t\t  NULL,\n+\t\t\t\t\t\t\t  NULL_RTX, NULL_RTX))\n+\t    return NULL_TREE;\n+\n+\n \t  if (!optimize\n \t      || !VECTOR_INTEGER_TYPE_P (type)\n \t      || TREE_CODE (rhs2) != VECTOR_CST"}, {"sha": "f6c34bb32631cdb7885dbcae18b1b79836cc17fe", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -3749,7 +3749,7 @@ vect_recog_divmod_pattern (vec_info *vinfo,\n   gimple *pattern_stmt, *def_stmt;\n   enum tree_code rhs_code;\n   optab optab;\n-  tree q;\n+  tree q, cst;\n   int dummy_int, prec;\n \n   if (!is_gimple_assign (last_stmt))\n@@ -3913,6 +3913,14 @@ vect_recog_divmod_pattern (vec_info *vinfo,\n \n       return pattern_stmt;\n     }\n+  else if ((cst = uniform_integer_cst_p (oprnd1))\n+\t   && targetm.vectorize.can_special_div_by_const (rhs_code, vectype,\n+\t\t\t\t\t\t\t  wi::to_wide (cst),\n+\t\t\t\t\t\t\t  NULL, NULL_RTX,\n+\t\t\t\t\t\t\t  NULL_RTX))\n+    {\n+      return NULL;\n+    }\n \n   if (prec > HOST_BITS_PER_WIDE_INT\n       || integer_zerop (oprnd1))"}, {"sha": "bc0ef136f1976ea57c01969fe1bf54e98bdc1fb6", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8beff04a325ba3c3707d8a6dd954ec881193d655/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=8beff04a325ba3c3707d8a6dd954ec881193d655", "patch": "@@ -6260,6 +6260,15 @@ vectorizable_operation (vec_info *vinfo,\n \t}\n       target_support_p = (optab_handler (optab, vec_mode)\n \t\t\t  != CODE_FOR_nothing);\n+      tree cst;\n+      if (!target_support_p\n+\t  && op1\n+\t  && (cst = uniform_integer_cst_p (op1)))\n+\ttarget_support_p\n+\t  = targetm.vectorize.can_special_div_by_const (code, vectype,\n+\t\t\t\t\t\t\twi::to_wide (cst),\n+\t\t\t\t\t\t\tNULL, NULL_RTX,\n+\t\t\t\t\t\t\tNULL_RTX);\n     }\n \n   bool using_emulated_vectors_p = vect_emulated_vector_p (vectype);"}]}