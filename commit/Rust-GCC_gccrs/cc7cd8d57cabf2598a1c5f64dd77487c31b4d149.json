{"sha": "cc7cd8d57cabf2598a1c5f64dd77487c31b4d149", "node_id": "C_kwDOANBUbNoAKGNjN2NkOGQ1N2NhYmYyNTk4YTFjNWY2NGRkNzc0ODdjMzFiNGQxNDk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-16T08:44:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-16T09:04:51Z"}, "message": "Do not use DW_OP_not for TRUTH_NOT_EXPR in conditional expressions\n\nDW_OP_not is a bitwise, not a logical NOT, so it computes the wrong result\nin a DWARF conditional expression.\n\ngcc/\n\t* dwarf2out.cc (loc_list_from_tree_1) <TRUTH_NOT_EXPR>: Do a logical\n\tinstead of a bitwise negation.\n\t<COND_EXPR>: Swap the operands if the condition is TRUTH_NOT_EXPR.", "tree": {"sha": "5cf40ef94c4346506f69af239f9eb5e6272a430c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cf40ef94c4346506f69af239f9eb5e6272a430c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc7cd8d57cabf2598a1c5f64dd77487c31b4d149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7cd8d57cabf2598a1c5f64dd77487c31b4d149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7cd8d57cabf2598a1c5f64dd77487c31b4d149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7cd8d57cabf2598a1c5f64dd77487c31b4d149/comments", "author": null, "committer": null, "parents": [{"sha": "b90e43dbbb2ba00ef2f8b2468fb09b43a12ae13d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90e43dbbb2ba00ef2f8b2468fb09b43a12ae13d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90e43dbbb2ba00ef2f8b2468fb09b43a12ae13d"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "fccf59e8ec3245ea0cf851c92739ad11997dbbb1", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7cd8d57cabf2598a1c5f64dd77487c31b4d149/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7cd8d57cabf2598a1c5f64dd77487c31b4d149/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=cc7cd8d57cabf2598a1c5f64dd77487c31b4d149", "patch": "@@ -19448,6 +19448,14 @@ loc_list_from_tree_1 (tree loc, int want_address,\n       break;\n \n     case TRUTH_NOT_EXPR:\n+      list_ret = loc_list_from_tree_1 (TREE_OPERAND (loc, 0), 0, context);\n+      if (list_ret == 0)\n+\treturn 0;\n+\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_lit0, 0, 0));\n+      add_loc_descr_to_each (list_ret, new_loc_descr (DW_OP_eq, 0, 0));\n+      break;\n+\n     case BIT_NOT_EXPR:\n       op = DW_OP_not;\n       goto do_unop;\n@@ -19496,6 +19504,15 @@ loc_list_from_tree_1 (tree loc, int want_address,\n \t  list_ret\n \t    = loc_list_from_tree_1 (TREE_OPERAND (TREE_OPERAND (loc, 0), 0),\n \t\t\t\t    0, context);\n+\t/* Likewise, swap the operands for a logically negated condition.  */\n+\telse if (TREE_CODE (TREE_OPERAND (loc, 0)) == TRUTH_NOT_EXPR)\n+\t  {\n+\t    lhs = loc_descriptor_from_tree (TREE_OPERAND (loc, 2), 0, context);\n+\t    rhs = loc_list_from_tree_1 (TREE_OPERAND (loc, 1), 0, context);\n+\t    list_ret\n+\t      = loc_list_from_tree_1 (TREE_OPERAND (TREE_OPERAND (loc, 0), 0),\n+\t\t\t\t      0, context);\n+\t  }\n \telse\n \t  list_ret = loc_list_from_tree_1 (TREE_OPERAND (loc, 0), 0, context);\n \tif (list_ret == 0 || lhs == 0 || rhs == 0)"}]}