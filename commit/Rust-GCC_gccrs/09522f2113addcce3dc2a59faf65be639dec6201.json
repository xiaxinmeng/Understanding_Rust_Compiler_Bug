{"sha": "09522f2113addcce3dc2a59faf65be639dec6201", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk1MjJmMjExM2FkZGNjZTNkYzJhNTlmYWY2NWJlNjM5ZGVjNjIwMQ==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "1999-07-07T01:04:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-07T01:04:41Z"}, "message": "reload1.c (gen_reload): When synthesizing a 3 operand add sequence...\n\n\ufffd\n        * reload1.c (gen_reload): When synthesizing a 3 operand add\n        sequence, improve test for when to reload OP1 into the reload\n        register instead of OP0.\n\nFrom-SVN: r27987", "tree": {"sha": "7b22de3eb3464be0475c5841d818a1063ce71f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b22de3eb3464be0475c5841d818a1063ce71f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09522f2113addcce3dc2a59faf65be639dec6201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09522f2113addcce3dc2a59faf65be639dec6201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09522f2113addcce3dc2a59faf65be639dec6201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09522f2113addcce3dc2a59faf65be639dec6201/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "301e0aaa9fddbad570679bd5740a92cb08182323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301e0aaa9fddbad570679bd5740a92cb08182323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301e0aaa9fddbad570679bd5740a92cb08182323"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "7c17ec4fad825f1c2db9ecedcd361a218e3eff74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09522f2113addcce3dc2a59faf65be639dec6201/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09522f2113addcce3dc2a59faf65be639dec6201/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09522f2113addcce3dc2a59faf65be639dec6201", "patch": "@@ -1,3 +1,9 @@\n+Wed Jul  7 02:00:04 1999  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* reload1.c (gen_reload): When synthesizing a 3 operand add\n+\tsequence, improve test for when to reload OP1 into the reload\n+\tregister instead of OP0.\n+\n Wed Jul  7 01:38:03 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* unroll.c (unroll_loop): Don't delete NOTE_INSN_DELETED_LABEL notes."}, {"sha": "123cbf5edd317eb136ca57b1defd01f90aa3e40b", "filename": "gcc/reload1.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09522f2113addcce3dc2a59faf65be639dec6201/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09522f2113addcce3dc2a59faf65be639dec6201/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=09522f2113addcce3dc2a59faf65be639dec6201", "patch": "@@ -7811,17 +7811,27 @@ gen_reload (out, in, opnum, type)\n       delete_insns_since (last);\n \n       /* If that failed, we must use a conservative two-insn sequence.\n-\t use move to copy constant, MEM, or pseudo register to the reload\n-\t register since \"move\" will be able to handle an arbitrary operand,\n-\t unlike add which can't, in general.  Then add the registers.\n+\n+\t Use a move to copy one operand into the reload register.  Prefer\n+\t to reload a constant, MEM or pseudo since the move patterns can\n+\t handle an arbitrary operand.  If OP1 is not a constant, MEM or\n+\t pseudo and OP1 is not a valid operand for an add instruction, then\n+\t reload OP1.\n+\n+\t After reloading one of the operands into the reload register, add\n+\t the reload register to the output register.\n \n \t If there is another way to do this for a specific machine, a\n \t DEFINE_PEEPHOLE should be specified that recognizes the sequence\n \t we emit below.  */\n \n+      code = (int) add_optab->handlers[(int) GET_MODE (out)].insn_code;\n+\n       if (CONSTANT_P (op1) || GET_CODE (op1) == MEM || GET_CODE (op1) == SUBREG\n \t  || (GET_CODE (op1) == REG\n-\t      && REGNO (op1) >= FIRST_PSEUDO_REGISTER))\n+\t      && REGNO (op1) >= FIRST_PSEUDO_REGISTER)\n+\t  || (code != CODE_FOR_nothing\n+\t      && ! (*insn_operand_predicate[code][2]) (op1, insn_operand_mode[code][2])))\n \ttem = op0, op0 = op1, op1 = tem;\n \n       gen_reload (out, op0, opnum, type);"}]}