{"sha": "1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmZGJiMjkyMjA2NDkxZjQ4NzRhOGIzZGZhMmRiYjJkMGM4MzNlMw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-05-08T06:51:12Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-05-08T06:51:12Z"}, "message": "re PR rtl-optimization/33928 (30% performance slowdown in floating-point code caused by  r118475)\n\n2009-05-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR rtl-optimization/33928\n        * loop-invariant.c (struct use): Add addr_use_p.\n        (struct def): Add n_addr_uses.\n        (struct invariant): Add cheap_address.\n        (create_new_invariant): Set cheap_address.\n        (record_use): Accept df_ref.  Set addr_use_p and update n_addr_uses.\n        (record_uses): Pass df_ref to record_use.\n        (get_inv_cost): Do not add inv->cost to comp_cost for cheap addresses used\n\tonly as such.\n\nFrom-SVN: r147270", "tree": {"sha": "25983327877f8281329815e9a674e6f487f23d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25983327877f8281329815e9a674e6f487f23d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e79080ad4a95295a120444587af4002cf0078de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e79080ad4a95295a120444587af4002cf0078de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e79080ad4a95295a120444587af4002cf0078de"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "e959348eb5a3d819471fdef06b4a05f006da15cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3", "patch": "@@ -1,3 +1,15 @@\n+2009-05-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR rtl-optimization/33928\n+        * loop-invariant.c (struct use): Add addr_use_p.\n+        (struct def): Add n_addr_uses.\n+        (struct invariant): Add cheap_address.\n+        (create_new_invariant): Set cheap_address.\n+        (record_use): Accept df_ref.  Set addr_use_p and update n_addr_uses.\n+        (record_uses): Pass df_ref to record_use.\n+        (get_inv_cost): Do not add inv->cost to comp_cost for cheap addresses used\n+\tonly as such.\n+\n 2009-05-08  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c: Do not include c-pragma.h."}, {"sha": "3d718b19f1d8932d25afa22912d41a97b558ea8f", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=1bfdbb292206491f4874a8b3dfa2dbb2d0c833e3", "patch": "@@ -71,7 +71,7 @@ struct use\n {\n   rtx *pos;\t\t\t/* Position of the use.  */\n   rtx insn;\t\t\t/* The insn in that the use occurs.  */\n-\n+  unsigned addr_use_p;\t\t/* Whether the use occurs in an address.  */\n   struct use *next;\t\t/* Next use in the list.  */\n };\n \n@@ -82,6 +82,7 @@ struct def\n   struct use *uses;\t\t/* The list of uses that are uniquely reached\n \t\t\t\t   by it.  */\n   unsigned n_uses;\t\t/* Number of such uses.  */\n+  unsigned n_addr_uses;\t\t/* Number of uses in addresses.  */\n   unsigned invno;\t\t/* The corresponding invariant.  */\n };\n \n@@ -111,6 +112,9 @@ struct invariant\n   /* Whether to move the invariant.  */\n   bool move;\n \n+  /* Whether the invariant is cheap when used as an address.  */\n+  bool cheap_address;\n+\n   /* Cost of the invariant.  */\n   unsigned cost;\n \n@@ -679,9 +683,16 @@ create_new_invariant (struct def *def, rtx insn, bitmap depends_on,\n   /* If the set is simple, usually by moving it we move the whole store out of\n      the loop.  Otherwise we save only cost of the computation.  */\n   if (def)\n-    inv->cost = rtx_cost (set, SET, speed);\n+    {\n+      inv->cost = rtx_cost (set, SET, speed);\n+      inv->cheap_address = address_cost (SET_SRC (set), word_mode,\n+\t\t\t\t\t speed) < COSTS_N_INSNS (1);\n+    }\n   else\n-    inv->cost = rtx_cost (SET_SRC (set), SET, speed);\n+    {\n+      inv->cost = rtx_cost (SET_SRC (set), SET, speed);\n+      inv->cheap_address = false;\n+    }\n \n   inv->move = false;\n   inv->reg = NULL_RTX;\n@@ -708,17 +719,19 @@ create_new_invariant (struct def *def, rtx insn, bitmap depends_on,\n /* Record USE at DEF.  */\n \n static void\n-record_use (struct def *def, rtx *use, rtx insn)\n+record_use (struct def *def, df_ref use)\n {\n   struct use *u = XNEW (struct use);\n \n-  gcc_assert (REG_P (*use));\n-\n-  u->pos = use;\n-  u->insn = insn;\n+  u->pos = DF_REF_REAL_LOC (use);\n+  u->insn = DF_REF_INSN (use);\n+  u->addr_use_p = (DF_REF_TYPE (use) == DF_REF_REG_MEM_LOAD\n+\t\t   && DF_REF_TYPE (use) == DF_REF_REG_MEM_STORE);\n   u->next = def->uses;\n   def->uses = u;\n   def->n_uses++;\n+  if (u->addr_use_p)\n+    def->n_addr_uses++;\n }\n \n /* Finds the invariants USE depends on and store them to the DEPENDS_ON\n@@ -865,14 +878,14 @@ record_uses (rtx insn)\n       df_ref use = *use_rec;\n       inv = invariant_for_use (use);\n       if (inv)\n-\trecord_use (inv->def, DF_REF_REAL_LOC (use), DF_REF_INSN (use));\n+\trecord_use (inv->def, use);\n     }\n   for (use_rec = DF_INSN_INFO_EQ_USES (insn_info); *use_rec; use_rec++)\n     {\n       df_ref use = *use_rec;\n       inv = invariant_for_use (use);\n       if (inv)\n-\trecord_use (inv->def, DF_REF_REAL_LOC (use), DF_REF_INSN (use));\n+\trecord_use (inv->def, use);\n     }\n }\n \n@@ -992,7 +1005,9 @@ get_inv_cost (struct invariant *inv, int *comp_cost, unsigned *regs_needed)\n   inv->stamp = actual_stamp;\n \n   (*regs_needed)++;\n-  (*comp_cost) += inv->cost;\n+  if (!inv->cheap_address\n+      || inv->def->n_addr_uses < inv->def->n_uses)\n+    (*comp_cost) += inv->cost;\n \n #ifdef STACK_REGS\n   {"}]}