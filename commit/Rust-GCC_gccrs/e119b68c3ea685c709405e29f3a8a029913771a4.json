{"sha": "e119b68c3ea685c709405e29f3a8a029913771a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExOWI2OGMzZWE2ODVjNzA5NDA1ZTI5ZjNhOGEwMjk5MTM3NzFhNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1997-10-28T22:52:51Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1997-10-28T22:52:51Z"}, "message": "update doc for CONST_{,DOUBLE_}OK_FOR_LETTER_P, EXTRA_CONTSTRAINT\n\nFrom-SVN: r16220", "tree": {"sha": "3aed7dca8e064205328926ffab1f6e6fe2a7b5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aed7dca8e064205328926ffab1f6e6fe2a7b5be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e119b68c3ea685c709405e29f3a8a029913771a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e119b68c3ea685c709405e29f3a8a029913771a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e119b68c3ea685c709405e29f3a8a029913771a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e119b68c3ea685c709405e29f3a8a029913771a4/comments", "author": null, "committer": null, "parents": [{"sha": "42f4929d5a0ef969f8657e463c52a2f6af3758e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f4929d5a0ef969f8657e463c52a2f6af3758e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f4929d5a0ef969f8657e463c52a2f6af3758e8"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "3bbf12e72d51305b2c2689521d7c003375d8c64c", "filename": "gcc/tm.texi", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e119b68c3ea685c709405e29f3a8a029913771a4/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e119b68c3ea685c709405e29f3a8a029913771a4/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=e119b68c3ea685c709405e29f3a8a029913771a4", "patch": "@@ -1978,16 +1978,19 @@ letters.\n @table @code\n @findex CONST_OK_FOR_LETTER_P\n @item CONST_OK_FOR_LETTER_P (@var{value}, @var{c})\n-A C expression that defines the machine-dependent operand constraint letters\n-that specify particular ranges of integer values.  If @var{c} is one\n-of those letters, the expression should check that @var{value}, an integer,\n-is in the appropriate range and return 1 if so, 0 otherwise.  If @var{c} is\n-not one of those letters, the value should be 0 regardless of @var{value}.\n+A C expression that defines the machine-dependent operand constraint\n+letters (@samp{I}, @samp{J}, @samp{K}, @dots{} @samp{P}) that specify\n+particular ranges of integer values.  If @var{c} is one of those\n+letters, the expression should check that @var{value}, an integer, is in\n+the appropriate range and return 1 if so, 0 otherwise.  If @var{c} is\n+not one of those letters, the value should be 0 regardless of\n+@var{value}.\n \n @findex CONST_DOUBLE_OK_FOR_LETTER_P\n @item CONST_DOUBLE_OK_FOR_LETTER_P (@var{value}, @var{c})\n A C expression that defines the machine-dependent operand constraint\n-letters that specify particular ranges of @code{const_double} values.\n+letters that specify particular ranges of @code{const_double} values\n+(@samp{G} or @samp{H}).\n \n If @var{c} is one of those letters, the expression should check that\n @var{value}, an RTX of code @code{const_double}, is in the appropriate\n@@ -2002,13 +2005,13 @@ between these kinds.\n @findex EXTRA_CONSTRAINT\n @item EXTRA_CONSTRAINT (@var{value}, @var{c})\n A C expression that defines the optional machine-dependent constraint\n-letters that can be used to segregate specific types of operands,\n-usually memory references, for the target machine.  Normally this macro\n-will not be defined.  If it is required for a particular target machine,\n-it should return 1 if @var{value} corresponds to the operand type\n-represented by the constraint letter @var{c}.  If @var{c} is not defined\n-as an extra constraint, the value returned should be 0 regardless of\n-@var{value}.\n+letters (@item @samp{Q}, @samp{R}, @samp{S}, @dots{} @samp{U}) that can\n+be used to segregate specific types of operands, usually memory\n+references, for the target machine.  Normally this macro will not be\n+defined.  If it is required for a particular target machine, it should\n+return 1 if @var{value} corresponds to the operand type represented by\n+the constraint letter @var{c}.  If @var{c} is not defined as an extra\n+constraint, the value returned should be 0 regardless of @var{value}.\n \n For example, on the ROMP, load instructions cannot have their output in r0 if\n the memory reference contains a symbolic address.  Constraint letter"}]}