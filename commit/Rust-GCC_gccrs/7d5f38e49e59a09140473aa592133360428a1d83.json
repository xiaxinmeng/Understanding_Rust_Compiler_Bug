{"sha": "7d5f38e49e59a09140473aa592133360428a1d83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1ZjM4ZTQ5ZTU5YTA5MTQwNDczYWE1OTIxMzMzNjA0MjhhMWQ4Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-28T15:11:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-28T15:13:17Z"}, "message": "c++: Refactor push_template_decl\n\nSadly I need to wander into push_template_decl again.  But here's a\npiece of RAII goodness first.\n\n\tgcc/cp/\n\t* pt.c (push_template_decl): Refactor for some RAII.", "tree": {"sha": "3d30f0a31d269069979b2b9ca29a93d98ed936cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d30f0a31d269069979b2b9ca29a93d98ed936cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5f38e49e59a09140473aa592133360428a1d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5f38e49e59a09140473aa592133360428a1d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5f38e49e59a09140473aa592133360428a1d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5f38e49e59a09140473aa592133360428a1d83/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176b8b9679dfec881b7cf379f808cca3950b1e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176b8b9679dfec881b7cf379f808cca3950b1e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176b8b9679dfec881b7cf379f808cca3950b1e74"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "0d2946fd7c4b7e47fa5b6245b877bb62b2802392", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5f38e49e59a09140473aa592133360428a1d83/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5f38e49e59a09140473aa592133360428a1d83/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7d5f38e49e59a09140473aa592133360428a1d83", "patch": "@@ -5682,12 +5682,6 @@ template_parm_outer_level (tree t, void *data)\n tree\n push_template_decl (tree decl, bool is_friend)\n {\n-  tree tmpl;\n-  tree args;\n-  tree info;\n-  tree ctx;\n-  bool is_primary;\n-  bool is_partial;\n   int new_template_p = 0;\n   /* True if the template is a member template, in the sense of\n      [temp.mem].  */\n@@ -5697,19 +5691,20 @@ push_template_decl (tree decl, bool is_friend)\n     return error_mark_node;\n \n   /* See if this is a partial specialization.  */\n-  is_partial = ((DECL_IMPLICIT_TYPEDEF_P (decl)\n-\t\t && TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE\n-\t\t && CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (decl)))\n-\t\t|| (VAR_P (decl)\n-\t\t    && DECL_LANG_SPECIFIC (decl)\n-\t\t    && DECL_TEMPLATE_SPECIALIZATION (decl)\n-\t\t    && TINFO_USED_TEMPLATE_ID (DECL_TEMPLATE_INFO (decl))));\n+  bool is_partial = ((DECL_IMPLICIT_TYPEDEF_P (decl)\n+\t\t      && TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE\n+\t\t      && CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (decl)))\n+\t\t     || (VAR_P (decl)\n+\t\t\t && DECL_LANG_SPECIFIC (decl)\n+\t\t\t && DECL_TEMPLATE_SPECIALIZATION (decl)\n+\t\t\t && TINFO_USED_TEMPLATE_ID (DECL_TEMPLATE_INFO (decl))));\n \n   /* No surprising friend functions.  */\n   gcc_checking_assert (is_friend\n \t\t       || !(TREE_CODE (decl) == FUNCTION_DECL\n \t\t\t    && DECL_UNIQUE_FRIEND_P (decl)));\n \n+  tree ctx;\n   if (is_friend)\n     /* For a friend, we want the context of the friend, not\n        the type of which it is a friend.  */\n@@ -5731,14 +5726,16 @@ push_template_decl (tree decl, bool is_friend)\n     DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n \n   /* See if this is a primary template.  */\n+  bool is_primary = false;\n   if (is_friend && ctx\n       && uses_template_parms_level (ctx, processing_template_decl))\n     /* A friend template that specifies a class context, i.e.\n          template <typename T> friend void A<T>::f();\n        is not primary.  */\n-    is_primary = false;\n+    ;\n   else if (TREE_CODE (decl) == TYPE_DECL && LAMBDA_TYPE_P (TREE_TYPE (decl)))\n-    is_primary = false;\n+    /* Lambdas are not primary.  */\n+    ;\n   else\n     is_primary = template_parm_scope_p ();\n \n@@ -5871,8 +5868,9 @@ push_template_decl (tree decl, bool is_friend)\n   if (is_partial)\n     return process_partial_specialization (decl);\n \n-  args = current_template_args ();\n+  tree args = current_template_args ();\n \n+  tree tmpl;\n   if (!ctx\n       || TREE_CODE (ctx) == FUNCTION_DECL\n       || (CLASS_TYPE_P (ctx) && TYPE_BEING_DEFINED (ctx))\n@@ -6077,7 +6075,7 @@ push_template_decl (tree decl, bool is_friend)\n   if (DECL_TEMPLATE_INFO (tmpl))\n     args = add_outermost_template_args (DECL_TI_ARGS (tmpl), args);\n \n-  info = build_template_info (tmpl, args);\n+  tree info = build_template_info (tmpl, args);\n \n   if (DECL_IMPLICIT_TYPEDEF_P (decl))\n     SET_TYPE_TEMPLATE_INFO (TREE_TYPE (tmpl), info);"}]}