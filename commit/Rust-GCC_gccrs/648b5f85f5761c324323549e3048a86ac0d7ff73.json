{"sha": "648b5f85f5761c324323549e3048a86ac0d7ff73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4YjVmODVmNTc2MWMzMjQzMjM1NDllMzA0OGE4NmFjMGQ3ZmY3Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-27T16:06:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-27T16:06:21Z"}, "message": "tree-ssa-structalias.c (changed_count): Remove.\n\n2011-04-27  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (changed_count): Remove.\n\t(changed): Use a bitmap.\n\t(unify_nodes): Adjust.\n\t(do_sd_constraint): Likewise.\n\t(do_ds_constraint): Likewise.\n\t(do_complex_constraint): Likewise.\n\t(solve_graph): Likewise.\n\nFrom-SVN: r173040", "tree": {"sha": "44d87060f0b2e8c1bc60648ce85dd2fe5febca84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d87060f0b2e8c1bc60648ce85dd2fe5febca84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/648b5f85f5761c324323549e3048a86ac0d7ff73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648b5f85f5761c324323549e3048a86ac0d7ff73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/648b5f85f5761c324323549e3048a86ac0d7ff73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/648b5f85f5761c324323549e3048a86ac0d7ff73/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d5dcfb2f00a228ae69a2d7e84077374c3eb2c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5dcfb2f00a228ae69a2d7e84077374c3eb2c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d5dcfb2f00a228ae69a2d7e84077374c3eb2c37"}], "stats": {"total": 93, "additions": 30, "deletions": 63}, "files": [{"sha": "751eb3e4454b891ba211021a1883bf4b26029659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648b5f85f5761c324323549e3048a86ac0d7ff73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648b5f85f5761c324323549e3048a86ac0d7ff73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=648b5f85f5761c324323549e3048a86ac0d7ff73", "patch": "@@ -1,3 +1,13 @@\n+2011-04-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (changed_count): Remove.\n+\t(changed): Use a bitmap.\n+\t(unify_nodes): Adjust.\n+\t(do_sd_constraint): Likewise.\n+\t(do_ds_constraint): Likewise.\n+\t(do_complex_constraint): Likewise.\n+\t(solve_graph): Likewise.\n+\n 2011-04-27  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_process_new_functions): Fix ordering issue."}, {"sha": "9bae3ff319c399ae3c9c691f89f0df117853cdb5", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 20, "deletions": 63, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/648b5f85f5761c324323549e3048a86ac0d7ff73/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/648b5f85f5761c324323549e3048a86ac0d7ff73/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=648b5f85f5761c324323549e3048a86ac0d7ff73", "patch": "@@ -1360,8 +1360,7 @@ build_succ_graph (void)\n \n \n /* Changed variables on the last iteration.  */\n-static unsigned int changed_count;\n-static sbitmap changed;\n+static bitmap changed;\n \n /* Strongly Connected Component visitation info.  */\n \n@@ -1492,16 +1491,11 @@ unify_nodes (constraint_graph_t graph, unsigned int to, unsigned int from,\n   /* Mark TO as changed if FROM was changed. If TO was already marked\n      as changed, decrease the changed count.  */\n \n-  if (update_changed && TEST_BIT (changed, from))\n+  if (update_changed\n+      && bitmap_bit_p (changed, from))\n     {\n-      RESET_BIT (changed, from);\n-      if (!TEST_BIT (changed, to))\n-\tSET_BIT (changed, to);\n-      else\n-\t{\n-\t  gcc_assert (changed_count > 0);\n-\t  changed_count--;\n-\t}\n+      bitmap_clear_bit (changed, from);\n+      bitmap_set_bit (changed, to);\n     }\n   if (get_varinfo (from)->solution)\n     {\n@@ -1510,11 +1504,8 @@ unify_nodes (constraint_graph_t graph, unsigned int to, unsigned int from,\n       if (bitmap_ior_into (get_varinfo (to)->solution,\n \t\t\t   get_varinfo (from)->solution))\n \t{\n-\t  if (update_changed && !TEST_BIT (changed, to))\n-\t    {\n-\t      SET_BIT (changed, to);\n-\t      changed_count++;\n-\t    }\n+\t  if (update_changed)\n+\t    bitmap_set_bit (changed, to);\n \t}\n \n       BITMAP_FREE (get_varinfo (from)->solution);\n@@ -1675,11 +1666,7 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n   if (flag)\n     {\n       get_varinfo (lhs)->solution = sol;\n-      if (!TEST_BIT (changed, lhs))\n-\t{\n-\t  SET_BIT (changed, lhs);\n-\t  changed_count++;\n-\t}\n+      bitmap_set_bit (changed, lhs);\n     }\n }\n \n@@ -1713,13 +1700,7 @@ do_ds_constraint (constraint_t c, bitmap delta)\n       if (add_graph_edge (graph, t, rhs))\n \t{\n \t  if (bitmap_ior_into (get_varinfo (t)->solution, sol))\n-\t    {\n-\t      if (!TEST_BIT (changed, t))\n-\t\t{\n-\t\t  SET_BIT (changed, t);\n-\t\t  changed_count++;\n-\t\t}\n-\t    }\n+\t    bitmap_set_bit (changed, t);\n \t}\n       return;\n     }\n@@ -1759,12 +1740,8 @@ do_ds_constraint (constraint_t c, bitmap delta)\n \t\t{\n \t\t  t = find (escaped_id);\n \t\t  if (add_graph_edge (graph, t, rhs)\n-\t\t      && bitmap_ior_into (get_varinfo (t)->solution, sol)\n-\t\t      && !TEST_BIT (changed, t))\n-\t\t    {\n-\t\t      SET_BIT (changed, t);\n-\t\t      changed_count++;\n-\t\t    }\n+\t\t      && bitmap_ior_into (get_varinfo (t)->solution, sol))\n+\t\t    bitmap_set_bit (changed, t);\n \t\t  /* Enough to let rhs escape once.  */\n \t\t  escaped_p = true;\n \t\t}\n@@ -1774,12 +1751,8 @@ do_ds_constraint (constraint_t c, bitmap delta)\n \n \t      t = find (v->id);\n \t      if (add_graph_edge (graph, t, rhs)\n-\t\t  && bitmap_ior_into (get_varinfo (t)->solution, sol)\n-\t\t  && !TEST_BIT (changed, t))\n-\t\t{\n-\t\t  SET_BIT (changed, t);\n-\t\t  changed_count++;\n-\t\t}\n+\t\t  && bitmap_ior_into (get_varinfo (t)->solution, sol))\n+\t\tbitmap_set_bit (changed, t);\n \t    }\n \n \t  /* If the variable is not exactly at the requested offset\n@@ -1834,11 +1807,7 @@ do_complex_constraint (constraint_graph_t graph, constraint_t c, bitmap delta)\n       if (flag)\n \t{\n \t  get_varinfo (c->lhs.var)->solution = tmp;\n-\t  if (!TEST_BIT (changed, c->lhs.var))\n-\t    {\n-\t      SET_BIT (changed, c->lhs.var);\n-\t      changed_count++;\n-\t    }\n+\t  bitmap_set_bit (changed, c->lhs.var);\n \t}\n     }\n }\n@@ -2531,9 +2500,7 @@ solve_graph (constraint_graph_t graph)\n   unsigned int i;\n   bitmap pts;\n \n-  changed_count = 0;\n-  changed = sbitmap_alloc (size);\n-  sbitmap_zero (changed);\n+  changed = BITMAP_ALLOC (NULL);\n \n   /* Mark all initial non-collapsed nodes as changed.  */\n   for (i = 0; i < size; i++)\n@@ -2542,16 +2509,13 @@ solve_graph (constraint_graph_t graph)\n       if (find (i) == i && !bitmap_empty_p (ivi->solution)\n \t  && ((graph->succs[i] && !bitmap_empty_p (graph->succs[i]))\n \t      || VEC_length (constraint_t, graph->complex[i]) > 0))\n-\t{\n-\t  SET_BIT (changed, i);\n-\t  changed_count++;\n-\t}\n+\tbitmap_set_bit (changed, i);\n     }\n \n   /* Allocate a bitmap to be used to store the changed bits.  */\n   pts = BITMAP_ALLOC (&pta_obstack);\n \n-  while (changed_count > 0)\n+  while (!bitmap_empty_p (changed))\n     {\n       unsigned int i;\n       struct topo_info *ti = init_topo_info ();\n@@ -2577,17 +2541,14 @@ solve_graph (constraint_graph_t graph)\n \n \t  /* If the node has changed, we need to process the\n \t     complex constraints and outgoing edges again.  */\n-\t  if (TEST_BIT (changed, i))\n+\t  if (bitmap_clear_bit (changed, i))\n \t    {\n \t      unsigned int j;\n \t      constraint_t c;\n \t      bitmap solution;\n \t      VEC(constraint_t,heap) *complex = graph->complex[i];\n \t      bool solution_empty;\n \n-\t      RESET_BIT (changed, i);\n-\t      changed_count--;\n-\n \t      /* Compute the changed set of solution bits.  */\n \t      bitmap_and_compl (pts, get_varinfo (i)->solution,\n \t\t\t\tget_varinfo (i)->oldsolution);\n@@ -2650,11 +2611,7 @@ solve_graph (constraint_graph_t graph)\n \t\t      if (flag)\n \t\t\t{\n \t\t\t  get_varinfo (to)->solution = tmp;\n-\t\t\t  if (!TEST_BIT (changed, to))\n-\t\t\t    {\n-\t\t\t      SET_BIT (changed, to);\n-\t\t\t      changed_count++;\n-\t\t\t    }\n+\t\t\t  bitmap_set_bit (changed, to);\n \t\t\t}\n \t\t    }\n \t\t}\n@@ -2665,7 +2622,7 @@ solve_graph (constraint_graph_t graph)\n     }\n \n   BITMAP_FREE (pts);\n-  sbitmap_free (changed);\n+  BITMAP_FREE (changed);\n   bitmap_obstack_release (&oldpta_obstack);\n }\n "}]}