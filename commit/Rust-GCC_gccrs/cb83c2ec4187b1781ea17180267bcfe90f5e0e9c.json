{"sha": "cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4M2MyZWM0MTg3YjE3ODFlYTE3MTgwMjY3YmNmZTkwZjVlMGU5Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-07-21T06:51:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-07-21T06:51:25Z"}, "message": "re PR rtl-optimization/22167 (Strange optimization bug when using -Os)\n\n\tPR rtl-optimization/22167\n\t* gcse.c (hoist_code): Fix hoist_exprs[] check.\n\nFrom-SVN: r102219", "tree": {"sha": "814b2815853aadb05602d3e230648d6115fe2702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814b2815853aadb05602d3e230648d6115fe2702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/comments", "author": null, "committer": null, "parents": [{"sha": "5e5cbbfb8e0f8b3e20d5fe1da84fbd545e91f537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5cbbfb8e0f8b3e20d5fe1da84fbd545e91f537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5cbbfb8e0f8b3e20d5fe1da84fbd545e91f537"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "e5e533f9f1109a17d6558f99620eab4281b4417b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "patch": "@@ -1,3 +1,8 @@\n+2005-07-21  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR rtl-optimization/22167\n+\t* gcse.c (hoist_code): Fix hoist_exprs[] check.\n+\n 2005-07-20  Adam Nemet  <anemet@lnxw.com>\n \n \t* config/rs6000/lynx.h: Mark __do_global_ctors_aux and"}, {"sha": "e2d35e21286c6b7ddd37403356ffdfc7af760f3a", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "patch": "@@ -4898,7 +4898,7 @@ hoist_code (void)\n \t  insn_inserted_p = 0;\n \n \t  /* These tests should be the same as the tests above.  */\n-\t  if (TEST_BIT (hoist_vbeout[bb->index], i))\n+\t  if (TEST_BIT (hoist_exprs[bb->index], i))\n \t    {\n \t      /* We've found a potentially hoistable expression, now\n \t\t we look at every block BB dominates to see if it"}, {"sha": "99b9c799651fbf3980375e70ac86a95e89646181", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "patch": "@@ -1,3 +1,8 @@\n+2005-07-21  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR rtl-optimization/22167\n+\t* g++.dg/opt/pr22167.C: New test.\n+\n 2005-07-20  Douglas Gregor <doug.gregor@gmail.com>\n \n \tPR c++/2922"}, {"sha": "07af744624ab163d3c0ef1bedade6b0219de36ab", "filename": "gcc/testsuite/g++.dg/opt/pr22167.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr22167.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb83c2ec4187b1781ea17180267bcfe90f5e0e9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr22167.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr22167.C?ref=cb83c2ec4187b1781ea17180267bcfe90f5e0e9c", "patch": "@@ -0,0 +1,32 @@\n+// Derived from PR22167, which failed on some RISC targets.  The call to\n+// foo() has two successors, one normal and one exceptional, and both\n+// successors use &a[0] and x.  Expressions involving &a[0] can be hoisted\n+// before the call but those involving x cannot.\n+// { dg-options \"-Os\" }\n+// { dg-do run }\n+\n+int a[4];\n+\n+struct S {\n+  S() : x (0) {}\n+  ~S() { a[0] = x; }\n+  int x;\n+};\n+\n+void\n+foo (int *x)\n+{\n+  if (*x == 1)\n+    throw 1;\n+  *x = 1;\n+}\n+\n+int\n+main()\n+{\n+  S s;\n+  foo (&s.x);\n+  if (a[0] == s.x)\n+    a[0]++;\n+  return a[0];\n+}"}]}