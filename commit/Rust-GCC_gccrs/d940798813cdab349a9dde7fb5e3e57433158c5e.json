{"sha": "d940798813cdab349a9dde7fb5e3e57433158c5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0MDc5ODgxM2NkYWIzNDlhOWRkZTdmYjVlM2U1NzQzMzE1OGM1ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-05-09T17:41:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-05-09T17:41:03Z"}, "message": "Add fine grain control to -msdata\n\nFrom-SVN: r11959", "tree": {"sha": "05c07ef158c41fd7ac35c38844157c80d067dedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c07ef158c41fd7ac35c38844157c80d067dedc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d940798813cdab349a9dde7fb5e3e57433158c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d940798813cdab349a9dde7fb5e3e57433158c5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d940798813cdab349a9dde7fb5e3e57433158c5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d940798813cdab349a9dde7fb5e3e57433158c5e/comments", "author": null, "committer": null, "parents": [{"sha": "0821c881a28809b77b4b77d65a7b5d31ba6202e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0821c881a28809b77b4b77d65a7b5d31ba6202e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0821c881a28809b77b4b77d65a7b5d31ba6202e3"}], "stats": {"total": 221, "additions": 153, "deletions": 68}, "files": [{"sha": "2ebd552ccaa764ba04de92d8e55abf1f72ceaf9b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 96, "deletions": 10, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d940798813cdab349a9dde7fb5e3e57433158c5e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d940798813cdab349a9dde7fb5e3e57433158c5e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d940798813cdab349a9dde7fb5e3e57433158c5e", "patch": "@@ -82,6 +82,12 @@ int rs6000_pic_labelno;\n \n /* Which abi to adhere to */\n char *rs6000_abi_name = RS6000_ABI_NAME;\n+\n+/* Semantics of the small data area */\n+enum rs6000_sdata_type rs6000_sdata = SDATA_DATA;\n+\n+/* Which small data model to use */\n+char *rs6000_sdata_name = (char *)0;\n #endif\n \n /* Whether a System V.4 varargs area was created.  */\n@@ -224,6 +230,16 @@ output_options (file, f_options, f_len, W_options, W_len)\n     if (rs6000_select[j].string != (char *)0)\n       pos = output_option (file, rs6000_select[j].name, rs6000_select[j].string, pos);\n \n+#ifdef USING_SVR4_H\n+  switch (rs6000_sdata)\n+    {\n+    case SDATA_NONE: pos = output_option (file, \"-msdata=\", \"none\", pos); break;\n+    case SDATA_DATA: pos = output_option (file, \"-msdata=\", \"data\", pos); break;\n+    case SDATA_SYSV: pos = output_option (file, \"-msdata=\", \"sysv\", pos); break;\n+    case SDATA_EABI: pos = output_option (file, \"-msdata=\", \"eabi\", pos); break;\n+    }\n+#endif\n+\n   fputs (\"\\n\\n\", file);\n }\n \n@@ -1014,12 +1030,11 @@ small_data_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n+#ifdef TARGET_SDATA\n   rtx sym_ref, const_part;\n \n-#ifdef TARGET_SDATA\n-  if (!TARGET_SDATA)\n+  if (rs6000_sdata == SDATA_NONE || rs6000_sdata == SDATA_DATA)\n     return 0;\n-#endif\n \n   if (DEFAULT_ABI != ABI_V4 /* && DEFAULT_ABI != ABI_SOLARIS */)\n     return 0;\n@@ -1040,6 +1055,10 @@ small_data_operand (op, mode)\n     return 0;\n \n   return 1;\n+\n+#else\n+  return 0;\n+#endif\n }\n \n \f\n@@ -2080,8 +2099,8 @@ ccr_bit (op, scc_p)\n \f\n /* Print an operand.  Recognize special options, documented below.  */\n \n-#ifdef TARGET_EABI\n-#define SMALL_DATA_RELOC ((TARGET_EABI) ? \"sda21\" : \"sdarel\")\n+#ifdef TARGET_SDATA\n+#define SMALL_DATA_RELOC ((rs6000_sdata == SDATA_EABI) ? \"sda21\" : \"sdarel\")\n #else\n #define SMALL_DATA_RELOC \"sda21\"\n #endif\n@@ -4609,20 +4628,18 @@ rs6000_select_section (decl, reloc)\n \t  || (DECL_INITIAL (decl) != error_mark_node\n \t      && !TREE_CONSTANT (DECL_INITIAL (decl))))\n \t{\n-\t  if (TARGET_SDATA && (size > 0) && (size <= g_switch_value))\n+\t  if (rs6000_sdata != SDATA_NONE && (size > 0) && (size <= g_switch_value))\n \t    sdata_section ();\n \t  else\n \t    data_section ();\n \t}\n       else\n \t{\n-\t  if (TARGET_SDATA && (size > 0) && (size <= g_switch_value))\n+\t  if (rs6000_sdata != SDATA_NONE && (size > 0) && (size <= g_switch_value))\n \t    {\n-#ifdef TARGET_EABI\n-\t      if (TARGET_EABI)\n+\t      if (rs6000_sdata == SDATA_EABI)\n \t\tsdata2_section ();\n \t      else\n-#endif\n \t\tsdata_section ();\t/* System V doesn't have .sdata2/.sbss2 */\n \t    }\n \t  else\n@@ -4632,6 +4649,75 @@ rs6000_select_section (decl, reloc)\n   else\n     const_section ();\n }\n+\n+\f\n+\n+/* If we are referencing a function that is static or is known to be\n+   in this file, make the SYMBOL_REF special.  We can use this to indicate\n+   that we can branch to this function without emitting a no-op after the\n+   call.  For real AIX and NT calling sequences, we also replace the\n+   function name with the real name (1 or 2 leading .'s), rather than\n+   the function descriptor name.  This saves a lot of overriding code\n+   to readd the prefixes.  */\n+\n+void\n+rs6000_encode_section_info (decl)\n+     tree decl;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    {\n+      rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n+      if (TREE_ASM_WRITTEN (decl) || ! TREE_PUBLIC (decl))\n+\tSYMBOL_REF_FLAG (sym_ref) = 1;\n+\n+      if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT)\n+\t{\n+\t  char *prefix = (DEFAULT_ABI == ABI_AIX) ? \".\" : \"..\";\n+\t  char *str = permalloc (strlen (prefix) + 1\n+\t\t\t\t + strlen (XSTR (sym_ref, 0)));\n+\t  strcpy (str, prefix);\n+\t  strcat (str, XSTR (sym_ref, 0));\n+\t  XSTR (sym_ref, 0) = str;\n+\t}\n+    }\n+  else if (rs6000_sdata != SDATA_NONE\n+\t   && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n+\t   && TREE_CODE (decl) == VAR_DECL)\n+    {\n+      int size = int_size_in_bytes (TREE_TYPE (decl));\n+      tree section_name = DECL_SECTION_NAME (decl);\n+      char *name = (char *)0;\n+      int len = 0;\n+\n+      if (section_name)\n+\t{\n+\t  if (TREE_CODE (section_name) == STRING_CST)\n+\t    {\n+\t      name = TREE_STRING_POINTER (section_name);\n+\t      len = TREE_STRING_LENGTH (section_name);\n+\t    }\n+\t  else\n+\t    abort ();\n+\t}\n+\n+      if ((size > 0 && size <= g_switch_value)\n+\t  || (name\n+\t      && ((len == sizeof (\".sdata\")-1 && strcmp (name, \".sdata\") == 0)\n+\t\t  || (len == sizeof (\".sdata2\")-1 && strcmp (name, \".sdata2\") == 0)\n+\t\t  || (len == sizeof (\".sbss\")-1 && strcmp (name, \".sbss\") == 0)\n+\t\t  || (len == sizeof (\".sbss2\")-1 && strcmp (name, \".sbss2\") == 0)\n+\t\t  || (len == sizeof (\".PPC.EMB.sdata0\")-1 && strcmp (name, \".PPC.EMB.sdata0\") == 0)\n+\t\t  || (len == sizeof (\".PPC.EMB.sbss0\")-1 && strcmp (name, \".PPC.EMB.sbss0\") == 0))))\n+\t{\n+\t  rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n+\t  char *str = permalloc (2 + strlen (XSTR (sym_ref, 0)));\n+\t  strcpy (str, \"@\");\n+\t  strcat (str, XSTR (sym_ref, 0));\n+\t  XSTR (sym_ref, 0) = str;\n+\t}\n+    }\n+}\n+\n #endif /* USING_SVR4_H */\n \n \f"}, {"sha": "4531d0fd1bb2b1c9fab284f575bc5b4e8cd58093", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 57, "deletions": 58, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d940798813cdab349a9dde7fb5e3e57433158c5e/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d940798813cdab349a9dde7fb5e3e57433158c5e/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=d940798813cdab349a9dde7fb5e3e57433158c5e", "patch": "@@ -19,13 +19,21 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* eABI local switches -- put here rather than eabi.h, so the switches\n-   can be tested in macros.  */\n+/* Small data support types */\n+enum rs6000_sdata_type {\n+  SDATA_NONE,\t\t\t/* no small data support */\n+  SDATA_DATA,\t\t\t/* just put data in .sbss/.sdata, don't use relocs */\n+  SDATA_SYSV,\t\t\t/* Use r13 to point to .sdata/.sbss */\n+  SDATA_EABI\t\t\t/* Use r13 like above, r2 points to .sdata2/.sbss2 */\n+};\n \n+extern enum rs6000_sdata_type rs6000_sdata;\n+\n+/* V.4/eabi switches */\n #define\tMASK_NO_BITFIELD_TYPE\t0x40000000\t/* Set PCC_BITFIELD_TYPE_MATTERS to 0 */\n #define\tMASK_STRICT_ALIGN\t0x20000000\t/* Set STRICT_ALIGNMENT to 1.  */\n #define MASK_RELOCATABLE\t0x10000000\t/* GOT pointers are PC relative */\n-#define\tMASK_SDATA\t\t0x08000000\t/* use eabi .sdata/.sdata2/.sbss relocations */\n+#define\tMASK_SDATA\t\t0x08000000\t/* use small data areas */\n #define MASK_LITTLE_ENDIAN\t0x04000000\t/* target is little endian */\n #define MASK_REGNAMES\t\t0x02000000\t/* use alternate register names.  */\n #define MASK_PROTOTYPE\t\t0x01000000\t/* Only prototyped fcns pass variable args */\n@@ -67,6 +75,7 @@ Boston, MA 02111-1307, USA.  */\n   { \"relocatable\",\t-MASK_SDATA },\t\t\t\t\t\\\n   { \"no-relocatable\",\t-MASK_RELOCATABLE },\t\t\t\t\\\n   { \"relocatable-lib\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC }, \\\n+  { \"relocatable-lib\",\t-MASK_SDATA },\t\t\t\t\t\\\n   { \"no-relocatable-lib\", -MASK_RELOCATABLE },\t\t\t\t\\\n   { \"sdata\",\t\t MASK_SDATA },\t\t\t\t\t\\\n   { \"no-sdata\",\t\t-MASK_SDATA },\t\t\t\t\t\\\n@@ -89,13 +98,16 @@ Boston, MA 02111-1307, USA.  */\n   { \"emb\",\t\t 0 },\t\t\t\t\t\t\\\n   { \"newlib\",\t\t 0 },\n \n-/* Which abi to adhere to */\n-extern char *rs6000_abi_name;\n-\n /* Default ABI to use */\n #define RS6000_ABI_NAME \"sysv\"\n \n-#define SUBTARGET_OPTIONS {\"call-\", &rs6000_abi_name}\n+/* Strings provided by SUBTARGET_OPTIONS */\n+extern char *rs6000_abi_name;\n+extern char *rs6000_sdata_name;\n+\n+#define SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n+  { \"call-\",  &rs6000_abi_name},\t\t\t\t\t\\\n+  { \"sdata=\", &rs6000_sdata_name}\n \n /* Max # of bytes for variables to automatically be put into the .sdata\n    or .sdata2 sections.  */\n@@ -152,14 +164,41 @@ do {\t\t\t\t\t\t\t\t\t\\\n       error (\"Bad value for -mcall-%s\", rs6000_abi_name);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  /* CYGNUS LOCAL -fcombine-statics vs. -msdata */\t\t\t\\\n-  if (TARGET_SDATA)\t\t\t\t\t\t\t\\\n-    flag_combine_statics = 0;\t\t\t\t\t\t\\\n-  /* END CYGNUS LOCAL -fcombine-statics vs. -msdata */\t\t\t\\\n+  if (rs6000_sdata_name)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags |= MASK_SDATA;\t\t\t\t\t\\\n+      if (!strcmp (rs6000_sdata_name, \"none\"))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  rs6000_sdata = SDATA_NONE;\t\t\t\t\t\\\n+\t  target_flags &= ~MASK_SDATA;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (!strcmp (rs6000_sdata_name, \"data\"))\t\t\t\\\n+\trs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n+      else if (!strcmp (rs6000_sdata_name, \"default\"))\t\t\t\\\n+\trs6000_sdata = (TARGET_EABI) ? SDATA_EABI : SDATA_SYSV;\t\t\\\n+      else if (!strcmp (rs6000_sdata_name, \"sysv\"))\t\t\t\\\n+\trs6000_sdata = SDATA_SYSV;\t\t\t\t\t\\\n+      else if (!strcmp (rs6000_sdata_name, \"eabi\"))\t\t\t\\\n+\trs6000_sdata = SDATA_EABI;\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\terror (\"Bad value for -msdata=%s\", rs6000_sdata_name);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (TARGET_SDATA)\t\t\t\t\t\t\\\n+    rs6000_sdata = (TARGET_EABI) ? SDATA_EABI : SDATA_SYSV;\t\t\\\n+  else if (!TARGET_RELOCATABLE && !flag_pic\t\t\t\t\\\n+\t   && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS))\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n+      target_flags |= MASK_SDATA;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    rs6000_sdata = SDATA_NONE;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_RELOCATABLE && TARGET_SDATA)\t\t\t\t\\\n+  if (TARGET_RELOCATABLE &&\t\t\t\t\t\t\\\n+      (rs6000_sdata == SDATA_EABI || rs6000_sdata == SDATA_SYSV))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~MASK_SDATA;\t\t\t\t\t\\\n+      rs6000_sdata = SDATA_NONE;\t\t\t\t\t\\\n       error (\"-mrelocatable and -msdata are incompatible.\");\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -729,51 +768,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    to readd the prefixes.  */\n \n #undef\tENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx sym_ref = XEXP (DECL_RTL (DECL), 0);\t\t\t\\\n-\tif (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL))\t\t\\\n-\t  SYMBOL_REF_FLAG (sym_ref) = 1;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_NT)\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    char *prefix = (DEFAULT_ABI == ABI_AIX) ? \".\" : \"..\";\t\\\n-\t    char *str = permalloc (strlen (prefix) + 1\t\t\t\\\n-\t\t\t\t   + strlen (XSTR (sym_ref, 0)));\t\\\n-\t    strcpy (str, prefix);\t\t\t\t\t\\\n-\t    strcat (str, XSTR (sym_ref, 0));\t\t\t\t\\\n-\t    XSTR (sym_ref, 0) = str;\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else if (TARGET_SDATA\t\t\t\t\t\t\\\n-\t     && (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\t\\\n-\t     && TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tint size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n-\ttree section_name = DECL_SECTION_NAME (DECL);\t\t\t\\\n-\tchar *name = ((section_name)\t\t\t\t\t\\\n-\t\t\t    ? IDENTIFIER_POINTER (section_name)\t\t\\\n-\t\t\t    : (char *)0);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif ((size > 0 && size <= 8)\t\t\t\t\t\\\n-\t    || (name\t\t\t\t\t\t\t\\\n-\t\t&& (strcmp (name, \".sdata\") == 0\t\t\t\\\n-\t\t    || strcmp (name, \".sdata2\") == 0\t\t\t\\\n-\t\t    || strcmp (name, \".sbss\") == 0\t\t\t\\\n-\t\t    || strcmp (name, \".sbss2\") == 0\t\t\t\\\n-\t\t    || strcmp (name, \".PPC.EMB.sdata0\") == 0\t\t\\\n-\t\t    || strcmp (name, \".PPC.EMB.sbss0\") == 0)))\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    rtx sym_ref = XEXP (DECL_RTL (DECL), 0);\t\t\t\\\n-\t    char *str = permalloc (2 + strlen (XSTR (sym_ref, 0)));\t\\\n-\t    strcpy (str, \"@\");\t\t\t\t\t\t\\\n-\t    strcat (str, XSTR (sym_ref, 0));\t\t\t\t\\\n-\t    XSTR (sym_ref, 0) = str;\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define ENCODE_SECTION_INFO(DECL) rs6000_encode_section_info (DECL)\n+\n+extern void rs6000_encode_section_info ();\n \n /* This macro gets just the user-specified name\n    out of the string in a SYMBOL_REF.  Discard\n@@ -842,7 +839,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_SPEC\n #define ASM_SPEC \"-u %(asm_cpu) %{mregnames} \\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n-%{mrelocatable} %{mrelocatable-lib} %{memb} %{msdata: -memb} \\\n+%{mrelocatable} %{mrelocatable-lib} \\\n+%{memb} %{!memb: %{msdata: -memb} %{msdata=eabi: -memb} \\\n %{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian} \\\n %{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n     %{mcall-solaris: -mlittle} %{mcall-linux: -mbig} }}}}\"\n@@ -856,6 +854,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     %{mcall-solaris: -mlittle } \\\n     %{mcall-linux: -mbig} }}}} \\\n %{mcall-solaris: -mregnames } \\\n+%{mno-sdata: -msdata=none } \\\n %{meabi: %{!mcall-*: -mcall-sysv }} \\\n %{!meabi: %{!mno-eabi: \\\n     %{mcall-solaris: -mno-eabi } \\"}]}