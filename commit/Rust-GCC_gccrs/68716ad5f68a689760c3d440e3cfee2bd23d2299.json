{"sha": "68716ad5f68a689760c3d440e3cfee2bd23d2299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3MTZhZDVmNjhhNjg5NzYwYzNkNDQwZTNjZmVlMmJkMjNkMjI5OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-08-10T08:25:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-08-10T08:25:49Z"}, "message": "[multiple changes]\n\n2009-08-10  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb: Add ??? comment for last change\n\n2009-08-10  Vincent Celier  <celier@adacore.com>\n\n\t* prj-env.adb (Add_To_Buffer): New procedure\n\t(Create_Config_Pragmas_File): Write to temporary file in one shot\n\t(Create_Mapping_File): Ditto\n\t(Set_Ada_Paths): Ditto\n\nFrom-SVN: r150618", "tree": {"sha": "4f1087de4e724b43807042bc98ffc4d2fb4159c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f1087de4e724b43807042bc98ffc4d2fb4159c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68716ad5f68a689760c3d440e3cfee2bd23d2299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68716ad5f68a689760c3d440e3cfee2bd23d2299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68716ad5f68a689760c3d440e3cfee2bd23d2299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68716ad5f68a689760c3d440e3cfee2bd23d2299/comments", "author": null, "committer": null, "parents": [{"sha": "6d93ae145ef49eb37b5d32007d4e6c51e3dcfc86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d93ae145ef49eb37b5d32007d4e6c51e3dcfc86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d93ae145ef49eb37b5d32007d4e6c51e3dcfc86"}], "stats": {"total": 305, "additions": 177, "deletions": 128}, "files": [{"sha": "f4d02471f205e2c375d9f15412617d8e43663afb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68716ad5f68a689760c3d440e3cfee2bd23d2299/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68716ad5f68a689760c3d440e3cfee2bd23d2299/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=68716ad5f68a689760c3d440e3cfee2bd23d2299", "patch": "@@ -1,3 +1,14 @@\n+2009-08-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb: Add ??? comment for last change\n+\n+2009-08-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-env.adb (Add_To_Buffer): New procedure\n+\t(Create_Config_Pragmas_File): Write to temporary file in one shot\n+\t(Create_Mapping_File): Ditto\n+\t(Set_Ada_Paths): Ditto\n+\n 2009-08-10  Vincent Celier  <celier@adacore.com>\n \n \tPR ada/17566"}, {"sha": "8e7ecbc411068c085a1db2d7b9571f14da3f3f8f", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68716ad5f68a689760c3d440e3cfee2bd23d2299/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68716ad5f68a689760c3d440e3cfee2bd23d2299/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=68716ad5f68a689760c3d440e3cfee2bd23d2299", "patch": "@@ -3554,7 +3554,9 @@ package body Exp_Ch7 is\n       Loc  : constant Source_Ptr := Sloc (N);\n       E    : constant Entity_Id  := Make_Temporary (Loc, 'E', N);\n       Etyp : constant Entity_Id  := Etype (N);\n-      Expr : constant Node_Id    := Relocate_Node (N);\n+\n+      Expr : constant Node_Id := Relocate_Node (N);\n+      --  Capture this node because the call to Adjust_SCIL_Node can ???\n \n    begin\n       --  If the relocated node is a function call then check if some SCIL"}, {"sha": "392b356ee0d8be2ba5332d4d843e109eb72c12e3", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 163, "deletions": 127, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68716ad5f68a689760c3d440e3cfee2bd23d2299/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68716ad5f68a689760c3d440e3cfee2bd23d2299/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=68716ad5f68a689760c3d440e3cfee2bd23d2299", "patch": "@@ -32,6 +32,9 @@ with Tempdir;\n \n package body Prj.Env is\n \n+   Buffer_Initial : constant := 1_000;\n+   --  Initial size of Buffer\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -52,6 +55,12 @@ package body Prj.Env is\n       Table_Increment      => 100);\n    --  A table to store the object dirs, before creating the object path file\n \n+   procedure Add_To_Buffer\n+     (S           : String;\n+      Buffer      : in out String_Access;\n+      Buffer_Last : in out Natural);\n+   --  Add a string to Buffer, extending Buffer if needed\n+\n    procedure Add_To_Path\n      (Source_Dirs : String_List_Id;\n       In_Tree     : Project_Tree_Ref;\n@@ -209,6 +218,33 @@ package body Prj.Env is\n       return Project.Ada_Objects_Path;\n    end Ada_Objects_Path;\n \n+   -------------------\n+   -- Add_To_Buffer --\n+   -------------------\n+\n+   procedure Add_To_Buffer\n+     (S           : String;\n+      Buffer      : in out String_Access;\n+      Buffer_Last : in out Natural)\n+   is\n+      Last : constant Natural := Buffer_Last + S'Length;\n+   begin\n+      while Last > Buffer'Last loop\n+         declare\n+            New_Buffer : constant String_Access :=\n+              new String (1 .. 2 * Buffer'Last);\n+\n+         begin\n+            New_Buffer (1 .. Buffer_Last) := Buffer (1 .. Buffer_Last);\n+            Free (Buffer);\n+            Buffer := New_Buffer;\n+         end;\n+      end loop;\n+\n+      Buffer (Buffer_Last + 1 .. Last) := S;\n+      Buffer_Last := Last;\n+   end Add_To_Buffer;\n+\n    ------------------------\n    -- Add_To_Object_Path --\n    ------------------------\n@@ -410,32 +446,32 @@ package body Prj.Env is\n       Namings        : Naming_Table.Instance;\n       --  Table storing the naming data for gnatmake/gprmake\n \n+      Buffer : String_Access := new String (1 .. Buffer_Initial);\n+      Buffer_Last : Natural := 0;\n+\n       File_Name : Path_Name_Type  := No_Path;\n       File      : File_Descriptor := Invalid_FD;\n \n       Current_Naming  : Naming_Id;\n       Iter            : Source_Iterator;\n       Source          : Source_Id;\n \n-      Status : Boolean;\n-      --  For call to Close\n-\n       procedure Check (Project : Project_Id; State : in out Integer);\n       --  Recursive procedure that put in the config pragmas file any non\n       --  standard naming schemes, if it is not already in the file, then call\n       --  itself for any imported project.\n \n-      procedure Check_Temp_File;\n-      --  Check that a temporary file has been opened.\n-      --  If not, create one, and put its name in the project data,\n-      --  with the indication that it is a temporary file.\n-\n       procedure Put (Source : Source_Id);\n       --  Put an SFN pragma in the temporary file\n \n-      procedure Put (File : File_Descriptor; S : String);\n-      procedure Put_Line (File : File_Descriptor; S : String);\n-      --  Output procedures, analogous to normal Text_IO procs of same name\n+      procedure Put (S : String);\n+      procedure Put_Line (S : String);\n+      --  Output procedures, analogous to normal Text_IO procs of same name.\n+      --  The text is put in Buffer, then it will be writen into a temporary\n+      --  file with procedure Write_Temp_File below.\n+\n+      procedure Write_Temp_File;\n+      --  Create a temporary file and put the content of the buffer in it.\n \n       -----------\n       -- Check --\n@@ -485,113 +521,86 @@ package body Prj.Env is\n             Naming_Table.Increment_Last (Namings);\n             Namings.Table (Naming_Table.Last (Namings)) := Naming;\n \n-            --  We need a temporary file to be created\n-\n-            Check_Temp_File;\n-\n             --  Put the SFN pragmas for the naming scheme\n \n             --  Spec\n \n             Put_Line\n-              (File, \"pragma Source_File_Name_Project\");\n+              (\"pragma Source_File_Name_Project\");\n             Put_Line\n-              (File, \"  (Spec_File_Name  => \"\"*\" &\n+              (\"  (Spec_File_Name  => \"\"*\" &\n                Get_Name_String (Naming.Spec_Suffix) & \"\"\",\");\n             Put_Line\n-              (File, \"   Casing          => \" &\n+              (\"   Casing          => \" &\n                Image (Naming.Casing) & \",\");\n             Put_Line\n-              (File, \"   Dot_Replacement => \"\"\" &\n+              (\"   Dot_Replacement => \"\"\" &\n                Get_Name_String (Naming.Dot_Replacement) & \"\"\");\");\n \n             --  and body\n \n             Put_Line\n-              (File, \"pragma Source_File_Name_Project\");\n+              (\"pragma Source_File_Name_Project\");\n             Put_Line\n-              (File, \"  (Body_File_Name  => \"\"*\" &\n+              (\"  (Body_File_Name  => \"\"*\" &\n                Get_Name_String (Naming.Body_Suffix) & \"\"\",\");\n             Put_Line\n-              (File, \"   Casing          => \" &\n+              (\"   Casing          => \" &\n                Image (Naming.Casing) & \",\");\n             Put_Line\n-              (File, \"   Dot_Replacement => \"\"\" &\n+              (\"   Dot_Replacement => \"\"\" &\n                Get_Name_String (Naming.Dot_Replacement) &\n                \"\"\");\");\n \n             --  and maybe separate\n \n             if Naming.Body_Suffix /= Naming.Separate_Suffix then\n-               Put_Line (File, \"pragma Source_File_Name_Project\");\n+               Put_Line (\"pragma Source_File_Name_Project\");\n                Put_Line\n-                 (File, \"  (Subunit_File_Name  => \"\"*\" &\n+                 (\"  (Subunit_File_Name  => \"\"*\" &\n                   Get_Name_String (Naming.Separate_Suffix) & \"\"\",\");\n                Put_Line\n-                 (File, \"   Casing          => \" &\n+                 (\"   Casing          => \" &\n                   Image (Naming.Casing) & \",\");\n                Put_Line\n-                 (File, \"   Dot_Replacement => \"\"\" &\n+                 (\"   Dot_Replacement => \"\"\" &\n                   Get_Name_String (Naming.Dot_Replacement) &\n                   \"\"\");\");\n             end if;\n          end if;\n       end Check;\n \n-      ---------------------\n-      -- Check_Temp_File --\n-      ---------------------\n-\n-      procedure Check_Temp_File is\n-      begin\n-         if File = Invalid_FD then\n-            Create_Temp_File\n-              (In_Tree, File, File_Name, \"configuration pragmas\");\n-         end if;\n-      end Check_Temp_File;\n-\n       ---------\n       -- Put --\n       ---------\n \n       procedure Put (Source : Source_Id) is\n       begin\n-         --  A temporary file needs to be open\n-\n-         Check_Temp_File;\n-\n          --  Put the pragma SFN for the unit kind (spec or body)\n \n-         Put (File, \"pragma Source_File_Name_Project (\");\n-         Put (File, Namet.Get_Name_String (Source.Unit.Name));\n+         Put (\"pragma Source_File_Name_Project (\");\n+         Put (Namet.Get_Name_String (Source.Unit.Name));\n \n          if Source.Kind = Spec then\n-            Put (File, \", Spec_File_Name => \"\"\");\n+            Put (\", Spec_File_Name => \"\"\");\n          else\n-            Put (File, \", Body_File_Name => \"\"\");\n+            Put (\", Body_File_Name => \"\"\");\n          end if;\n \n-         Put (File, Namet.Get_Name_String (Source.File));\n-         Put (File, \"\"\"\");\n+         Put (Namet.Get_Name_String (Source.File));\n+         Put (\"\"\"\");\n \n          if Source.Index /= 0 then\n-            Put (File, \", Index =>\");\n-            Put (File, Source.Index'Img);\n+            Put (\", Index =>\");\n+            Put (Source.Index'Img);\n          end if;\n \n-         Put_Line (File, \");\");\n+         Put_Line (\");\");\n       end Put;\n \n-      procedure Put (File : File_Descriptor; S : String) is\n-         Last : Natural;\n-\n+      procedure Put (S : String) is\n       begin\n-         Last := Write (File, S (S'First)'Address, S'Length);\n-\n-         if Last /= S'Length then\n-            Prj.Com.Fail\n-              (\"Disk full when creating \" & Get_Name_String (File_Name));\n-         end if;\n+         Add_To_Buffer (S, Buffer, Buffer_Last);\n \n          if Current_Verbosity = High then\n             Write_Str (S);\n@@ -602,30 +611,42 @@ package body Prj.Env is\n       -- Put_Line --\n       --------------\n \n-      procedure Put_Line (File : File_Descriptor; S : String) is\n-         S0   : String (1 .. S'Length + 1);\n-         Last : Natural;\n-\n+      procedure Put_Line (S : String) is\n       begin\n          --  Add an ASCII.LF to the string. As this config file is supposed to\n          --  be used only by the compiler, we don't care about the characters\n          --  for the end of line. In fact we could have put a space, but\n          --  it is more convenient to be able to read gnat.adc during\n          --  development, for which the ASCII.LF is fine.\n \n-         S0 (1 .. S'Length) := S;\n-         S0 (S0'Last) := ASCII.LF;\n-         Last := Write (File, S0'Address, S0'Length);\n+         Put (S);\n+         Put (S => (1 => ASCII.LF));\n+      end Put_Line;\n \n-         if Last /= S'Length + 1 then\n-            Prj.Com.Fail\n-              (\"Disk full when creating \" & Get_Name_String (File_Name));\n+      ---------------------\n+      -- Write_Temp_File --\n+      ---------------------\n+\n+      procedure Write_Temp_File is\n+         Status : Boolean := False;\n+         Last   : Natural;\n+      begin\n+         Tempdir.Create_Temp_File (File, File_Name);\n+\n+         if File /= Invalid_FD then\n+            Last := Write (File, Buffer (1)'Address, Buffer_Last);\n+\n+            if Last = Buffer_Last then\n+               Close (File, Status);\n+            end if;\n          end if;\n \n-         if Current_Verbosity = High then\n-            Write_Line (S);\n+         if not Status then\n+            Prj.Com.Fail\n+              (\"could not create temporary file \" &\n+               Get_Name_String (File_Name));\n          end if;\n-      end Put_Line;\n+      end Write_Temp_File;\n \n       procedure Check_Imported_Projects is new For_Every_Project_Imported\n         (Integer, Check);\n@@ -662,31 +683,25 @@ package body Prj.Env is\n          --  standard naming scheme. This will tell the compiler that\n          --  a project file is used and will forbid any pragma SFN.\n \n-         if File = Invalid_FD then\n-            Check_Temp_File;\n+         if Buffer_Last = 0 then\n \n-            Put_Line (File, \"pragma Source_File_Name_Project\");\n-            Put_Line (File, \"   (Spec_File_Name  => \"\"*.ads\"\",\");\n-            Put_Line (File, \"    Dot_Replacement => \"\"-\"\",\");\n-            Put_Line (File, \"    Casing          => lowercase);\");\n+            Put_Line (\"pragma Source_File_Name_Project\");\n+            Put_Line (\"   (Spec_File_Name  => \"\"*.ads\"\",\");\n+            Put_Line (\"    Dot_Replacement => \"\"-\"\",\");\n+            Put_Line (\"    Casing          => lowercase);\");\n \n-            Put_Line (File, \"pragma Source_File_Name_Project\");\n-            Put_Line (File, \"   (Body_File_Name  => \"\"*.adb\"\",\");\n-            Put_Line (File, \"    Dot_Replacement => \"\"-\"\",\");\n-            Put_Line (File, \"    Casing          => lowercase);\");\n+            Put_Line (\"pragma Source_File_Name_Project\");\n+            Put_Line (\"   (Body_File_Name  => \"\"*.adb\"\",\");\n+            Put_Line (\"    Dot_Replacement => \"\"-\"\",\");\n+            Put_Line (\"    Casing          => lowercase);\");\n          end if;\n \n          --  Close the temporary file\n \n-         GNAT.OS_Lib.Close (File, Status);\n-\n-         if not Status then\n-            Prj.Com.Fail\n-              (\"Disk full when creating \" & Get_Name_String (File_Name));\n-         end if;\n+         Write_Temp_File;\n \n          if Opt.Verbose_Mode then\n-            Write_Str (\"Closing configuration file \"\"\");\n+            Write_Str (\"Created configuration file \"\"\");\n             Write_Str (Get_Name_String (File_Name));\n             Write_Line (\"\"\"\");\n          end if;\n@@ -695,6 +710,8 @@ package body Prj.Env is\n          For_Project.Config_File_Temp := True;\n          For_Project.Config_Checked   := True;\n       end if;\n+\n+      Free (Buffer);\n    end Create_Config_Pragmas_File;\n \n    --------------------\n@@ -739,33 +756,30 @@ package body Prj.Env is\n       Name     : out Path_Name_Type)\n    is\n       File   : File_Descriptor := Invalid_FD;\n-      Status : Boolean;\n+\n+      Buffer : String_Access := new String (1 .. Buffer_Initial);\n+      Buffer_Last : Natural := 0;\n \n       procedure Put_Name_Buffer;\n-      --  Put the line contained in the Name_Buffer in the mapping file\n+      --  Put the line contained in the Name_Buffer in the global buffer\n \n       procedure Process (Project : Project_Id; State : in out Integer);\n       --  Generate the mapping file for Project (not recursively)\n \n-      ---------\n-      -- Put --\n-      ---------\n+      ---------------------\n+      -- Put_Name_Buffer --\n+      ---------------------\n \n       procedure Put_Name_Buffer is\n-         Last : Natural;\n-\n       begin\n          Name_Len := Name_Len + 1;\n          Name_Buffer (Name_Len) := ASCII.LF;\n-         Last := Write (File, Name_Buffer (1)'Address, Name_Len);\n \n          if Current_Verbosity = High then\n             Write_Str (\"Mapping file: \" & Name_Buffer (1 .. Name_Len));\n          end if;\n \n-         if Last /= Name_Len then\n-            Prj.Com.Fail (\"Disk full, cannot write mapping file\");\n-         end if;\n+         Add_To_Buffer (Name_Buffer (1 .. Name_Len), Buffer, Buffer_Last);\n       end Put_Name_Buffer;\n \n       -------------\n@@ -851,22 +865,29 @@ package body Prj.Env is\n    --  Start of processing for Create_Mapping_File\n \n    begin\n+      For_Every_Imported_Project (Project, Dummy);\n \n-      --  Create the temporary file\n+      declare\n+         Last : Natural;\n+         Status : Boolean := False;\n \n-      Create_Temp_File (In_Tree, File, Name, \"mapping\");\n+      begin\n+         Create_Temp_File (In_Tree, File, Name, \"mapping\");\n \n-      For_Every_Imported_Project (Project, Dummy);\n-      GNAT.OS_Lib.Close (File, Status);\n+         if File /= Invalid_FD then\n+            Last := Write (File, Buffer (1)'Address, Buffer_Last);\n \n-      if not Status then\n+            if Last = Buffer_Last then\n+               GNAT.OS_Lib.Close (File, Status);\n+            end if;\n+         end if;\n \n-         --  We were able to create the temporary file, so there is no problem\n-         --  of protection. However, we are not able to close it, so there must\n-         --  be a capacity problem that we express using \"disk full\".\n+         if not Status then\n+            Prj.Com.Fail (\"could not write mapping file\");\n+         end if;\n+      end;\n \n-         Prj.Com.Fail (\"disk full, could not write mapping file\");\n-      end if;\n+      Free (Buffer);\n    end Create_Mapping_File;\n \n    ----------------------\n@@ -1505,7 +1526,10 @@ package body Prj.Env is\n       Status : Boolean;\n       --  For calls to Close\n \n-      Len : Natural;\n+      Last         : Natural;\n+\n+      Buffer       : String_Access := new String (1 .. Buffer_Initial);\n+      Buffer_Last : Natural := 0;\n \n       procedure Recursive_Add (Project : Project_Id; Dummy : in out Boolean);\n       --  Recursive procedure to add the source/object paths of extended/\n@@ -1594,44 +1618,54 @@ package body Prj.Env is\n       --  the previous version of the file.\n \n       if Source_FD /= Invalid_FD then\n+         Buffer_Last := 0;\n+\n          for Index in Source_Path_Table.First ..\n                       Source_Path_Table.Last (Source_Paths)\n          loop\n             Get_Name_String (Source_Paths.Table (Index));\n             Name_Len := Name_Len + 1;\n             Name_Buffer (Name_Len) := ASCII.LF;\n-            Len := Write (Source_FD, Name_Buffer (1)'Address, Name_Len);\n-\n-            if Len /= Name_Len then\n-               Prj.Com.Fail (\"disk full\");\n-            end if;\n+            Add_To_Buffer (Name_Buffer (1 .. Name_Len), Buffer, Buffer_Last);\n          end loop;\n \n-         Close (Source_FD, Status);\n+         Last := Write (Source_FD, Buffer (1)'Address, Buffer_Last);\n+\n+         if Last = Buffer_Last then\n+            Close (Source_FD, Status);\n+\n+         else\n+            Status := False;\n+         end if;\n \n          if not Status then\n-            Prj.Com.Fail (\"disk full\");\n+            Prj.Com.Fail (\"could not write temporary file\");\n          end if;\n       end if;\n \n       if Object_FD /= Invalid_FD then\n+         Buffer_Last := 0;\n+\n          for Index in Object_Path_Table.First ..\n                       Object_Path_Table.Last (Object_Paths)\n          loop\n             Get_Name_String (Object_Paths.Table (Index));\n             Name_Len := Name_Len + 1;\n             Name_Buffer (Name_Len) := ASCII.LF;\n-            Len := Write (Object_FD, Name_Buffer (1)'Address, Name_Len);\n-\n-            if Len /= Name_Len then\n-               Prj.Com.Fail (\"disk full\");\n-            end if;\n+            Add_To_Buffer (Name_Buffer (1 .. Name_Len), Buffer, Buffer_Last);\n          end loop;\n \n-         Close (Object_FD, Status);\n+         Last := Write (Object_FD, Buffer (1)'Address, Buffer_Last);\n+\n+         if Last = Buffer_Last then\n+            Close (Object_FD, Status);\n+\n+         else\n+            Status := False;\n+         end if;\n \n          if not Status then\n-            Prj.Com.Fail (\"disk full\");\n+            Prj.Com.Fail (\"could not write temporary file\");\n          end if;\n       end if;\n \n@@ -1672,6 +1706,8 @@ package body Prj.Env is\n                  (In_Tree.Private_Part.Current_Object_Path_File));\n          end if;\n       end if;\n+\n+      Free (Buffer);\n    end Set_Ada_Paths;\n \n    -----------------------"}]}