{"sha": "6feaa084f88c96b72f840c2e9ed280fc742b1f98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZlYWEwODRmODhjOTZiNzJmODQwYzJlOWVkMjgwZmM3NDJiMWY5OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-04-16T16:58:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-04-16T16:58:35Z"}, "message": "libiberty.h (unlock_stream): New.\n\ninclude:\n\t* libiberty.h (unlock_stream): New.\n\nlibiberty:\n\t* fopen_unlocked.c (unlock_stream): New.\n\tConsolidate unlocking code into a helper function.\n\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r98234", "tree": {"sha": "d156f4f535f6fa53299a5cfac16c2d29a981988e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d156f4f535f6fa53299a5cfac16c2d29a981988e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6feaa084f88c96b72f840c2e9ed280fc742b1f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6feaa084f88c96b72f840c2e9ed280fc742b1f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6feaa084f88c96b72f840c2e9ed280fc742b1f98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6feaa084f88c96b72f840c2e9ed280fc742b1f98/comments", "author": null, "committer": null, "parents": [{"sha": "41704a387ef7a69778f2d06325b1c10b800bca0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41704a387ef7a69778f2d06325b1c10b800bca0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41704a387ef7a69778f2d06325b1c10b800bca0d"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "9f0188e395766bec156982d960bf62992c1c3180", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6feaa084f88c96b72f840c2e9ed280fc742b1f98/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6feaa084f88c96b72f840c2e9ed280fc742b1f98/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6feaa084f88c96b72f840c2e9ed280fc742b1f98", "patch": "@@ -1,3 +1,7 @@\n+2005-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (unlock_stream): New.\n+\n 2005-04-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (fopen_unlocked, fdopen_unlocked, freopen_unlocked):"}, {"sha": "8254aafab0fa899c9ed736365d82e9ccf8ac1fa9", "filename": "include/libiberty.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6feaa084f88c96b72f840c2e9ed280fc742b1f98/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6feaa084f88c96b72f840c2e9ed280fc742b1f98/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=6feaa084f88c96b72f840c2e9ed280fc742b1f98", "patch": "@@ -48,6 +48,12 @@ extern \"C\" {\n \n #include <stdio.h>\n \n+/* If the OS supports it, ensure that the supplied stream is setup to\n+   avoid any multi-threaded locking.  Otherwise leave the FILE pointer\n+   unchanged.  If the stream is NULL do nothing.  */\n+\n+extern void unlock_stream (FILE *);\n+\n /* Open and return a FILE pointer.  If the OS supports it, ensure that\n    the stream is setup to avoid any multi-threaded locking.  Otherwise\n    return the FILE pointer unchanged.  */"}, {"sha": "a92bcdc76d78e6123e30e9859940ab7ef51af94c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6feaa084f88c96b72f840c2e9ed280fc742b1f98/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6feaa084f88c96b72f840c2e9ed280fc742b1f98/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=6feaa084f88c96b72f840c2e9ed280fc742b1f98", "patch": "@@ -1,3 +1,10 @@\n+2005-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fopen_unlocked.c (unlock_stream): New.\n+\tConsolidate unlocking code into a helper function.\n+\n+\t* functions.texi: Regenerate.\n+\n 2005-04-13  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* asprintf.c: Include config.h."}, {"sha": "8f9f300d10121b666ef8a46757fae01dac32db69", "filename": "libiberty/fopen_unlocked.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6feaa084f88c96b72f840c2e9ed280fc742b1f98/libiberty%2Ffopen_unlocked.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6feaa084f88c96b72f840c2e9ed280fc742b1f98/libiberty%2Ffopen_unlocked.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffopen_unlocked.c?ref=6feaa084f88c96b72f840c2e9ed280fc742b1f98", "patch": "@@ -20,6 +20,14 @@ Boston, MA 02111-1307, USA.  */\n \n /*\n \n+@deftypefn Extension void unlock_stream (FILE * @var{stream})\n+\n+If the OS supports it, ensure that the supplied stream is setup to\n+avoid any multi-threaded locking.  Otherwise leave the @code{FILE}\n+pointer unchanged.  If the @var{stream} is @code{NULL} do nothing.\n+\n+@end deftypefn\n+\n @deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n@@ -59,35 +67,44 @@ unchanged.\n \n #include \"libiberty.h\"\n \n-FILE *\n-fopen_unlocked (const char *path, const char *mode)\t\t\n+/* This is an inline helper function to consolidate attempts to unlock\n+   a stream.  */\n+\n+static inline void\n+unlock_1 (FILE *const fp ATTRIBUTE_UNUSED)\n {\n-  FILE *const fp = fopen (path, mode);\n #if defined(HAVE___FSETLOCKING) && defined(FSETLOCKING_BYCALLER)\n   if (fp)\n     __fsetlocking (fp, FSETLOCKING_BYCALLER);\n #endif\n+}\n+\n+void\n+unlock_stream(FILE *fp)\n+{\n+  unlock_1 (fp);\n+}\n+\n+FILE *\n+fopen_unlocked (const char *path, const char *mode)\t\t\n+{\n+  FILE *const fp = fopen (path, mode);\n+  unlock_1 (fp);\n   return fp;\n }\n \n FILE *\n fdopen_unlocked (int fildes, const char *mode)\n {\n   FILE *const fp = fdopen (fildes, mode);\n-#if defined(HAVE___FSETLOCKING) && defined(FSETLOCKING_BYCALLER)\n-  if (fp)\n-    __fsetlocking (fp, FSETLOCKING_BYCALLER);\n-#endif\n+  unlock_1 (fp);\n   return fp;\n }\n \n FILE *\n freopen_unlocked (const char *path, const char *mode, FILE *stream)\n {\n   FILE *const fp = freopen (path, mode, stream);\n-#if defined(HAVE___FSETLOCKING) && defined(FSETLOCKING_BYCALLER)\n-  if (fp)\n-    __fsetlocking (fp, FSETLOCKING_BYCALLER);\n-#endif\n+  unlock_1 (fp);\n   return fp;\n }"}, {"sha": "e55d2d50e715cd2659f24d7920b274f15e9c6aac", "filename": "libiberty/functions.texi", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6feaa084f88c96b72f840c2e9ed280fc742b1f98/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6feaa084f88c96b72f840c2e9ed280fc742b1f98/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=6feaa084f88c96b72f840c2e9ed280fc742b1f98", "patch": "@@ -362,7 +362,7 @@ and inode numbers.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:32\n+@c fopen_unlocked.c:40\n @deftypefn Extension FILE * fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n@@ -431,7 +431,7 @@ Ignores case when performing the comparison.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:23\n+@c fopen_unlocked.c:31\n @deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n@@ -451,7 +451,7 @@ itself.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:41\n+@c fopen_unlocked.c:49\n @deftypefn Extension FILE * freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n \n Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n@@ -1201,6 +1201,15 @@ was made to unlink the file because it is special.\n \n @end deftypefn\n \n+@c fopen_unlocked.c:23\n+@deftypefn Extension void unlock_stream (FILE * @var{stream})\n+\n+If the OS supports it, ensure that the supplied stream is setup to\n+avoid any multi-threaded locking.  Otherwise leave the @code{FILE}\n+pointer unchanged.  If the @var{stream} is @code{NULL} do nothing.\n+\n+@end deftypefn\n+\n @c vasprintf.c:47\n @deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n "}]}