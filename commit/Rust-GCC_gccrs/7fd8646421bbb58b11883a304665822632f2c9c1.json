{"sha": "7fd8646421bbb58b11883a304665822632f2c9c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkODY0NjQyMWJiYjU4YjExODgzYTMwNDY2NTgyMjYzMmYyYzljMQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-10T10:00:56Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-10T10:00:56Z"}, "message": "[AArch64] Revert wrong commit of \"Improve TLS Descriptor pattern to release RTL loop IV opt\"\n\nRevert the wrong commit of\n\n  2015-08-06    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t      Jiong Wang  <jiong.wang@arm.com>\n\n\t* config/aarch64/aarch64.d (tlsdesc_small_pseudo_<mode>): New pattern.\n\t* config/aarch64/aarch64.h (reg_class): New enumeration FIXED_REG0.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_class_max_nregs): Likewise.\n\t(aarch64_register_move_cost): Likewise.\n\t(aarch64_load_symref_appropriately): Invoke the new added pattern if\n\tpossible.\n\t* config/aarch64/constraints.md (Uc0): New constraint.\n\nFrom-SVN: r226756", "tree": {"sha": "43edab24006cb84b499811e1e1678f19adb0b0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43edab24006cb84b499811e1e1678f19adb0b0db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fd8646421bbb58b11883a304665822632f2c9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd8646421bbb58b11883a304665822632f2c9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd8646421bbb58b11883a304665822632f2c9c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd8646421bbb58b11883a304665822632f2c9c1/comments", "author": null, "committer": null, "parents": [{"sha": "9ca287086f04612d8e53546ab5fb64d8b93c7f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca287086f04612d8e53546ab5fb64d8b93c7f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca287086f04612d8e53546ab5fb64d8b93c7f66"}], "stats": {"total": 63, "additions": 5, "deletions": 58}, "files": [{"sha": "e991a494cfc29ea2b4a0aa2ba8df1febb27806c2", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd8646421bbb58b11883a304665822632f2c9c1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd8646421bbb58b11883a304665822632f2c9c1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7fd8646421bbb58b11883a304665822632f2c9c1", "patch": "@@ -1048,26 +1048,12 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \n \tgcc_assert (mode == Pmode || mode == ptr_mode);\n \n-\tif (can_create_pseudo_p ())\n-\t  {\n-\t    rtx reg = gen_reg_rtx (mode);\n-\n-\t    if (TARGET_ILP32)\n-\t      emit_insn (gen_tlsdesc_small_pseudo_si (imm, reg));\n-\t    else\n-\t      emit_insn (gen_tlsdesc_small_pseudo_di (imm, reg));\n-\n-\t    emit_use (reg);\n-\t  }\n+\t/* In ILP32, the got entry is always of SImode size.  Unlike\n+\t   small GOT, the dest is fixed at reg 0.  */\n+\tif (TARGET_ILP32)\n+\t  emit_insn (gen_tlsdesc_small_si (imm));\n \telse\n-\t  {\n-\t    /* In ILP32, the got entry is always of SImode size.  Unlike\n-\t       small GOT, the dest is fixed at reg 0.  */\n-\t    if (TARGET_ILP32)\n-\t      emit_insn (gen_tlsdesc_small_si (imm));\n-\t    else\n-\t      emit_insn (gen_tlsdesc_small_di (imm));\n-\t  }\n+\t  emit_insn (gen_tlsdesc_small_di (imm));\n \ttp = aarch64_load_tp (NULL);\n \n \tif (mode != Pmode)"}, {"sha": "7f9975328950bc72f083041dfb25a0fc437dbb5f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd8646421bbb58b11883a304665822632f2c9c1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd8646421bbb58b11883a304665822632f2c9c1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=7fd8646421bbb58b11883a304665822632f2c9c1", "patch": "@@ -4549,23 +4549,6 @@\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])\n \n-;; The same as tlsdesc_small_<mode> except that we don't expose hard register X0\n-;; as the destination of set as it will cause trouble for RTL loop iv.\n-;; RTL loop iv will abort ongoing optimization once it finds there is hard reg\n-;; as destination of set.  This pattern thus could help these tlsdesc\n-;; instruction sequences hoisted out of loop.\n-(define_insn \"tlsdesc_small_pseudo_<mode>\"\n-  [(set (match_operand:PTR 1 \"register_operand\" \"=r\")\n-        (unspec:PTR [(match_operand 0 \"aarch64_valid_symref\" \"S\")]\n-\t\t   UNSPEC_TLSDESC))\n-   (clobber (reg:DI R0_REGNUM))\n-   (clobber (reg:DI LR_REGNUM))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_TLS_DESC\"\n-  \"adrp\\\\tx0, %A0\\;ldr\\\\t%<w>1, [x0, #%L0]\\;add\\\\t<w>0, <w>0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%1\"\n-  [(set_attr \"type\" \"call\")\n-   (set_attr \"length\" \"16\")])\n-\n (define_insn \"stack_tie\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK [(match_operand:DI 0 \"register_operand\" \"rk\")"}, {"sha": "a1fd3b0f09f77fa6fbc4d6e404c2945150ea3813", "filename": "gcc/testsuite/gcc.target/aarch64/tlsdesc_hoist.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca287086f04612d8e53546ab5fb64d8b93c7f66/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsdesc_hoist.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca287086f04612d8e53546ab5fb64d8b93c7f66/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsdesc_hoist.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsdesc_hoist.c?ref=9ca287086f04612d8e53546ab5fb64d8b93c7f66", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target tls_native } */\n-/* { dg-options \"-O2 -fpic -fdump-rtl-loop2_invariant\" } */\n-/* { dg-skip-if \"-mcmodel=large, no support for -fpic\" { aarch64-*-* }  { \"-mcmodel=large\" } { \"\" } } */\n-\n-int cal (int, int);\n-__thread int tls_data;\n-\n-int\n-foo (int bound)\n-{\n-  int i = 0;\n-  int sum = 0;\n-\n-  for (i; i < bound; i++)\n-    sum = cal (sum, tls_data);\n-\n-  return sum;\n-}\n-\n-/* Insn sequences for TLS descriptor should be hoisted out of the loop.  */\n-/* { dg-final { scan-rtl-dump \"Decided\" \"loop2_invariant\" } } */"}]}