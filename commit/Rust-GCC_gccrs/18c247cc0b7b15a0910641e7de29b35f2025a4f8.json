{"sha": "18c247cc0b7b15a0910641e7de29b35f2025a4f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThjMjQ3Y2MwYjdiMTVhMDkxMDY0MWU3ZGUyOWIzNWYyMDI1YTRmOA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-14T20:42:08Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-14T20:42:08Z"}, "message": "[PR88370] acc_get_cuda_stream/acc_set_cuda_stream: acc_async_sync, acc_async_noval\n\nPer my reading of the OpenACC specification (and as supported by secondary\ndocumentation, such as code examples, or presentations), it's valid to call\n\"acc_get_cuda_stream\"/\"acc_set_cuda_stream\" also with \"acc_async_sync\",\n\"acc_async_noval\" arguments, not just with the nonnegative values as currently\nimplemented.\n\n\tlibgomp/\n\tPR libgomp/88370\n\t* libgomp.texi (acc_get_current_cuda_context, acc_get_cuda_stream)\n\t(acc_set_cuda_stream): Clarify.\n\t* oacc-cuda.c (acc_get_cuda_stream, acc_set_cuda_stream): Use\n\t\"async_valid_p\".\n\t* plugin/plugin-nvptx.c (nvptx_set_cuda_stream): Refuse \"async ==\n\tacc_async_sync\".\n\t* testsuite/libgomp.oacc-c-c++-common/acc_set_cuda_stream-1.c: New file.\n\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-84.c: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/lib-85.c: Likewise.\n\nFrom-SVN: r267147", "tree": {"sha": "a4dec1fa6554c8adfc9824efc21dd86ee3905c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4dec1fa6554c8adfc9824efc21dd86ee3905c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18c247cc0b7b15a0910641e7de29b35f2025a4f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c247cc0b7b15a0910641e7de29b35f2025a4f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c247cc0b7b15a0910641e7de29b35f2025a4f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c247cc0b7b15a0910641e7de29b35f2025a4f8/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d390fd3ae4e2de66b4f53efbb657ea01fee5620"}], "stats": {"total": 242, "additions": 222, "deletions": 20}, "files": [{"sha": "b4ab6b6905538cefb157b5a4db9a82010f7f9ef1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -1,3 +1,17 @@\n+2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/88370\n+\t* libgomp.texi (acc_get_current_cuda_context, acc_get_cuda_stream)\n+\t(acc_set_cuda_stream): Clarify.\n+\t* oacc-cuda.c (acc_get_cuda_stream, acc_set_cuda_stream): Use\n+\t\"async_valid_p\".\n+\t* plugin/plugin-nvptx.c (nvptx_set_cuda_stream): Refuse \"async ==\n+\tacc_async_sync\".\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_set_cuda_stream-1.c: New file.\n+\t* testsuite/libgomp.oacc-c-c++-common/async_queue-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-84.c: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-85.c: Likewise.\n+\n 2018-12-14  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.c-c++-common/function-not-offloaded-aux.c: New test."}, {"sha": "e6c20525bc0c3af17f41952f8b98405ec385e56e", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -2768,7 +2768,7 @@ as used by the CUDA Runtime or Driver API's.\n \n @item @emph{C/C++}:\n @multitable @columnfractions .20 .80\n-@item @emph{Prototype}: @tab @code{acc_get_current_cuda_context(void);}\n+@item @emph{Prototype}: @tab @code{void *acc_get_current_cuda_context(void);}\n @end multitable\n \n @item @emph{Reference}:\n@@ -2782,12 +2782,12 @@ A.2.1.2.\n @section @code{acc_get_cuda_stream} -- Get CUDA stream handle.\n @table @asis\n @item @emph{Description}\n-This function returns the CUDA stream handle. This handle is the same\n-as used by the CUDA Runtime or Driver API's.\n+This function returns the CUDA stream handle for the queue @var{async}.\n+This handle is the same as used by the CUDA Runtime or Driver API's.\n \n @item @emph{C/C++}:\n @multitable @columnfractions .20 .80\n-@item @emph{Prototype}: @tab @code{acc_get_cuda_stream(void);}\n+@item @emph{Prototype}: @tab @code{void *acc_get_cuda_stream(int async);}\n @end multitable\n \n @item @emph{Reference}:\n@@ -2802,11 +2802,16 @@ A.2.1.3.\n @table @asis\n @item @emph{Description}\n This function associates the stream handle specified by @var{stream} with\n-the asynchronous value specified by @var{async}.\n+the queue @var{async}.\n+\n+This cannot be used to change the stream handle associated with\n+@code{acc_async_sync}.\n+\n+The return value is not specified.\n \n @item @emph{C/C++}:\n @multitable @columnfractions .20 .80\n-@item @emph{Prototype}: @tab @code{acc_set_cuda_stream(int async void *stream);}\n+@item @emph{Prototype}: @tab @code{int acc_set_cuda_stream(int async, void *stream);}\n @end multitable\n \n @item @emph{Reference}:"}, {"sha": "4ee4c9b08576d35a2e7f96821522c9723809e03e", "filename": "libgomp/oacc-cuda.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Foacc-cuda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Foacc-cuda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-cuda.c?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -58,7 +58,7 @@ acc_get_cuda_stream (int async)\n {\n   struct goacc_thread *thr = goacc_thread ();\n \n-  if (!async_valid_stream_id_p (async))\n+  if (!async_valid_p (async))\n     return NULL;\n \n   if (thr && thr->dev && thr->dev->openacc.cuda.get_stream_func)\n@@ -72,7 +72,7 @@ acc_set_cuda_stream (int async, void *stream)\n {\n   struct goacc_thread *thr;\n \n-  if (!async_valid_stream_id_p (async) || stream == NULL)\n+  if (!async_valid_p (async) || stream == NULL)\n     return 0;\n \n   goacc_lazy_initialize ();"}, {"sha": "7d0d38e0c2e114b590b7a3a5f7090fee02133019", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -1753,8 +1753,14 @@ nvptx_set_cuda_stream (int async, void *stream)\n   pthread_t self = pthread_self ();\n   struct nvptx_thread *nvthd = nvptx_thread ();\n \n-  if (async < 0)\n-    GOMP_PLUGIN_fatal (\"bad async %d\", async);\n+  /* Due to the \"null_stream\" usage for \"acc_async_sync\", this cannot be used\n+     to change the stream handle associated with \"acc_async_sync\".  */\n+  if (async == acc_async_sync)\n+    {\n+      GOMP_PLUGIN_debug (0, \"Refusing request to set CUDA stream associated\"\n+\t\t\t \" with \\\"acc_async_sync\\\"\\n\");\n+      return 0;\n+    }\n \n   pthread_mutex_lock (&nvthd->ptx_dev->stream_lock);\n "}, {"sha": "93981ff5cb7f86db8d87a47593286a6b19e57753", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_set_cuda_stream-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_set_cuda_stream-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_set_cuda_stream-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_set_cuda_stream-1.c?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -0,0 +1,42 @@\n+/* Verify expected nvptx plugin behavior for \"acc_set_cuda_stream\" for\n+   \"acc_async_sync\".  */\n+\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-set-target-env-var GOMP_DEBUG \"1\" } */\n+\n+#undef NDEBUG\n+#include <assert.h>\n+#include <openacc.h>\n+\n+int main(void)\n+{\n+  int async = 42;\n+\n+  /* Initialize.  */\n+#pragma acc parallel async(acc_async_sync)\n+      ;\n+#pragma acc parallel async(async)\n+      ;\n+#pragma acc wait\n+\n+  void *cuda_stream_sync = acc_get_cuda_stream (acc_async_sync);\n+  assert (cuda_stream_sync == NULL);\n+  void *cuda_stream_async = acc_get_cuda_stream (async);\n+  assert (cuda_stream_async != NULL);\n+  int ret = acc_set_cuda_stream (acc_async_sync, cuda_stream_async);\n+  assert (ret == 0);\n+  void *cuda_stream_sync_ = acc_get_cuda_stream (acc_async_sync);\n+  assert (cuda_stream_sync_ == cuda_stream_sync);\n+  void *cuda_stream_async_ = acc_get_cuda_stream (async);\n+  assert (cuda_stream_async_ == cuda_stream_async);\n+\n+#pragma acc parallel async(acc_async_sync)\n+      ;\n+#pragma acc parallel async(async)\n+      ;\n+#pragma acc wait\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"Refusing request to set CUDA stream associated with \\\"acc_async_sync\\\"\" } */"}, {"sha": "48e1846a36e325e1e190a38a08ea712e551af884", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/async_queue-1.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync_queue-1.c?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -0,0 +1,97 @@\n+/* Test mapping of async values to specific underlying queues.  */\n+\n+#undef NDEBUG\n+#include <assert.h>\n+#include <openacc.h>\n+\n+/* This is implemented in terms of the \"acc_get_cuda_stream\" interface.  */\n+\n+struct\n+{\n+  int async;\n+  void *cuda_stream;\n+} queues[] = { { acc_async_sync, NULL },\n+\t       { acc_async_noval, NULL },\n+\t       { 0, NULL },\n+\t       { 1, NULL },\n+\t       { 2, NULL },\n+\t       { 36, NULL },\n+\t       { 1982, NULL } };\n+const size_t queues_n = sizeof queues / sizeof queues[0];\n+\n+int main(void)\n+{\n+  /* Explicitly initialize: it's not clear whether the following OpenACC\n+     runtime library calls implicitly initialize;\n+     <https://github.com/OpenACC/openacc-spec/issues/102>.  */\n+  acc_device_t d;\n+#if defined ACC_DEVICE_TYPE_nvidia\n+  d = acc_device_nvidia;\n+#elif defined ACC_DEVICE_TYPE_host\n+  d = acc_device_host;\n+#else\n+# error Not ported to this ACC_DEVICE_TYPE\n+#endif\n+  acc_init (d);\n+\n+  for (size_t i = 0; i < queues_n; ++i)\n+    {\n+      /* Before actually being used, there are all NULL.  */\n+      queues[i].cuda_stream = acc_get_cuda_stream (queues[i].async);\n+      assert (queues[i].cuda_stream == NULL);\n+    }\n+\n+  for (size_t i = 0; i < queues_n; ++i)\n+    {\n+      /* Use the queue to initialize it.  */\n+#pragma acc parallel async(queues[i].async)\n+      ;\n+#pragma acc wait\n+\n+      /* Verify CUDA stream used.  */\n+      queues[i].cuda_stream = acc_get_cuda_stream (queues[i].async);\n+#if defined ACC_DEVICE_TYPE_nvidia\n+      /* \"acc_async_sync\" maps to the NULL CUDA default stream.  */\n+      if (queues[i].async == acc_async_sync)\n+\tassert (queues[i].cuda_stream == NULL);\n+      else\n+\tassert (queues[i].cuda_stream != NULL);\n+#elif defined ACC_DEVICE_TYPE_host\n+      /* For \"acc_device_host\" there are no CUDA streams.  */\n+      assert (queues[i].cuda_stream == NULL);\n+#else\n+# error Not ported to this ACC_DEVICE_TYPE\n+#endif\n+    }\n+\n+  /* Verify same results.  */\n+  for (size_t i = 0; i < queues_n; ++i)\n+    {\n+      void *cuda_stream;\n+\n+      cuda_stream = acc_get_cuda_stream (queues[i].async);\n+      assert (cuda_stream == queues[i].cuda_stream);\n+\n+#pragma acc parallel async(queues[i].async)\n+      ;\n+#pragma acc wait\n+\n+      cuda_stream = acc_get_cuda_stream (queues[i].async);\n+      assert (cuda_stream == queues[i].cuda_stream);\n+    }\n+\n+  /* Verify individual underlying queues are all different.  */\n+  for (size_t i = 0; i < queues_n; ++i)\n+    {\n+      if (queues[i].cuda_stream == NULL)\n+\tcontinue;\n+      for (size_t j = i + 1; j < queues_n; ++j)\n+\t{\n+\t  if (queues[j].cuda_stream == NULL)\n+\t    continue;\n+\t  assert (queues[j].cuda_stream != queues[i].cuda_stream);\n+\t}\n+    }\n+\n+  return 0;\n+}"}, {"sha": "d793c743630044bcdcfbbcdbbbb9e670ff724e4f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-84.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-84.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-84.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-84.c?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -7,6 +7,14 @@\n #include <openacc.h>\n #include <cuda.h>\n \n+#if !defined __cplusplus\n+# undef static_assert\n+# define static_assert _Static_assert\n+#endif\n+\n+static_assert (acc_async_sync == -2, \"acc_async_sync?\");\n+static_assert (acc_async_noval == -1, \"acc_async_noval?\");\n+\n int\n main (int argc, char **argv)\n {\n@@ -20,9 +28,11 @@ main (int argc, char **argv)\n \n   (void) acc_get_device_num (acc_device_nvidia);\n \n-  streams = (CUstream *) malloc (N * sizeof (void *));\n+  streams = (CUstream *) malloc ((2 + N) * sizeof (void *));\n+  streams += 2;\n+  /* \"streams[i]\" is valid for i in [acc_async_sync..N).  */\n \n-  for (i = 0; i < N; i++)\n+  for (i = acc_async_sync; i < N; i++)\n     {\n       streams[i] = (CUstream) acc_get_cuda_stream (i);\n       if (streams[i] != NULL)\n@@ -35,11 +45,20 @@ main (int argc, char **argv)\n \t  abort ();\n \t}\n \n-        if (!acc_set_cuda_stream (i, streams[i]))\n-\t  abort ();\n+      int ret = acc_set_cuda_stream (i, streams[i]);\n+      if (i == acc_async_sync)\n+\t{\n+\t  if (ret == 1)\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (ret != 1)\n+\t    abort ();\n+\t}\n     }\n \n-  for (i = 0; i < N; i++)\n+  for (i = acc_async_sync; i < N; i++)\n     {\n       int j;\n       int cnt;\n@@ -48,7 +67,7 @@ main (int argc, char **argv)\n \n       s = streams[i];\n \n-      for (j = 0; j < N; j++)\n+      for (j = acc_async_sync; j < N; j++)\n \t{\n \t  if (s == streams[j])\n \t    cnt++;"}, {"sha": "141c83b53dd69578823792c4f3a20f47772ee9b0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/lib-85.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c247cc0b7b15a0910641e7de29b35f2025a4f8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Flib-85.c?ref=18c247cc0b7b15a0910641e7de29b35f2025a4f8", "patch": "@@ -7,6 +7,14 @@\n #include <stdio.h>\n #include <cuda.h>\n \n+#if !defined __cplusplus\n+# undef static_assert\n+# define static_assert _Static_assert\n+#endif\n+\n+static_assert (acc_async_sync == -2, \"acc_async_sync?\");\n+static_assert (acc_async_noval == -1, \"acc_async_noval?\");\n+\n int\n main (int argc, char **argv)\n {\n@@ -20,9 +28,11 @@ main (int argc, char **argv)\n \n   (void) acc_get_device_num (acc_device_nvidia);\n \n-  streams = (CUstream *) malloc (N * sizeof (void *));\n+  streams = (CUstream *) malloc ((2 + N) * sizeof (void *));\n+  streams += 2;\n+  /* \"streams[i]\" is valid for i in [acc_async_sync..N).  */\n \n-  for (i = 0; i < N; i++)\n+  for (i = acc_async_sync; i < N; i++)\n     {\n       streams[i] = (CUstream) acc_get_cuda_stream (i);\n       if (streams[i] != NULL)\n@@ -35,8 +45,17 @@ main (int argc, char **argv)\n \t  abort ();\n \t}\n \n-        if (!acc_set_cuda_stream (i, streams[i]))\n-\t  abort ();\n+      int ret = acc_set_cuda_stream (i, streams[i]);\n+      if (i == acc_async_sync)\n+\t{\n+\t  if (ret == 1)\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (ret != 1)\n+\t    abort ();\n+\t}\n     }\n \n   s = NULL;"}]}