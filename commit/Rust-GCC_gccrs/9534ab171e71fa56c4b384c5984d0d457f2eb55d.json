{"sha": "9534ab171e71fa56c4b384c5984d0d457f2eb55d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzNGFiMTcxZTcxZmE1NmM0YjM4NGM1OTg0ZDBkNDU3ZjJlYjU1ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:18:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:18:13Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.adb, einfo.ads (Formal_Proof_On): new flag set on subprogram\n\tentities whose body contains an Annotate pragma which forces formal\n\tproof on this body.\n\t* sem_ch11.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb,\n\tsem_ch6.adb, sem_ch9.adb, sem_res.adb: Adapt call to\n\tMark_Non_ALFA_Subprogram to pass in a message and node.\n\t* sem_prag.adb (Analyze_Pragma): add treatment of pragma Annotate\n\t(Forma_Proof, On) which sets the flag Formal_Proof_On in the\n\tsurrounding subprogram.\n\t* sem_util.adb, sem_util.ads (Mark_Non_ALFA_Subprogram,\n\tMark_Non_ALFA_Subprogram_Unconditional): if the subprogram being marked\n\tas not in ALFA is annotated with Formal_Proof being On, then an error\n\tis issued based on the additional parameters for message and node.\n\t* snames.ads-tmpl (Name_Formal_Proof): new name for annotation.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Do not generate\n\tFinalize_Address when CodePeer is enabled.\n\n2011-08-04  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_tmp_name): Use _tempnam() instead of tempnam() as\n\tthe latter returns a pointer to a static buffer which is deallocated\n\tat the end of the routine.\n\nFrom-SVN: r177328", "tree": {"sha": "d0172f181b3e0387bab1071971a969a1d5197954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0172f181b3e0387bab1071971a969a1d5197954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9534ab171e71fa56c4b384c5984d0d457f2eb55d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9534ab171e71fa56c4b384c5984d0d457f2eb55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9534ab171e71fa56c4b384c5984d0d457f2eb55d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9534ab171e71fa56c4b384c5984d0d457f2eb55d/comments", "author": null, "committer": null, "parents": [{"sha": "5c0e97dd35b7d16366bbae34539edff776f0b43c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0e97dd35b7d16366bbae34539edff776f0b43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0e97dd35b7d16366bbae34539edff776f0b43c"}], "stats": {"total": 405, "additions": 282, "deletions": 123}, "files": [{"sha": "09f342334e11a8cbf4a42e3d92abfb93c1681137", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -1,3 +1,32 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.adb, einfo.ads (Formal_Proof_On): new flag set on subprogram\n+\tentities whose body contains an Annotate pragma which forces formal\n+\tproof on this body.\n+\t* sem_ch11.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb,\n+\tsem_ch6.adb, sem_ch9.adb, sem_res.adb: Adapt call to\n+\tMark_Non_ALFA_Subprogram to pass in a message and node.\n+\t* sem_prag.adb (Analyze_Pragma): add treatment of pragma Annotate\n+\t(Forma_Proof, On) which sets the flag Formal_Proof_On in the\n+\tsurrounding subprogram.\n+\t* sem_util.adb, sem_util.ads (Mark_Non_ALFA_Subprogram,\n+\tMark_Non_ALFA_Subprogram_Unconditional): if the subprogram being marked\n+\tas not in ALFA is annotated with Formal_Proof being On, then an error\n+\tis issued based on the additional parameters for message and node.\n+\t* snames.ads-tmpl (Name_Formal_Proof): new name for annotation.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Do not generate\n+\tFinalize_Address when CodePeer is enabled.\n+\n+2011-08-04  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_tmp_name): Use _tempnam() instead of tempnam() as\n+\tthe latter returns a pointer to a static buffer which is deallocated\n+\tat the end of the routine.\n+\n 2011-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb (Array_Type_Declaration): move test for type in ALFA"}, {"sha": "b0fd8c590eca7e353a1a5009372a8a65c38add06", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -1183,7 +1183,7 @@ __gnat_tmp_name (char *tmp_filename)\n        directory specified by P_tmpdir in stdio.h if c:\\temp does not\n        exist. The filename will be created with the prefix \"gnat-\".  */\n \n-    pname = (char *) tempnam (\"c:\\\\temp\", \"gnat-\");\n+    pname = (char *) _tempnam (\"c:\\\\temp\", \"gnat-\");\n \n     /* if pname is NULL, the file was not created properly, the disk is full\n        or there is no more free temporary files */"}, {"sha": "be0081684dc333e34364f48e5d490d45d97c3e4b", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -522,7 +522,7 @@ package body Einfo is\n    --    Body_Is_In_ALFA                 Flag251\n    --    Is_Processed_Transient          Flag252\n    --    Is_Postcondition_Proc           Flag253\n-   --    (unused)                        Flag254\n+   --    Formal_Proof_On                 Flag254\n \n    -----------------------\n    -- Local subprograms --\n@@ -1126,6 +1126,12 @@ package body Einfo is\n       return Node6 (Id);\n    end First_Rep_Item;\n \n+   function Formal_Proof_On (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n+      return Flag254 (Id);\n+   end Formal_Proof_On;\n+\n    function Freeze_Node (Id : E) return N is\n    begin\n       return Node7 (Id);\n@@ -3606,6 +3612,12 @@ package body Einfo is\n       Set_Uint10 (Id, UI_From_Int (F'Pos (V)));\n    end Set_Float_Rep;\n \n+   procedure Set_Formal_Proof_On (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n+      Set_Flag254 (Id, V);\n+   end Set_Formal_Proof_On;\n+\n    procedure Set_Freeze_Node (Id : E; V : N) is\n    begin\n       Set_Node7 (Id, V);\n@@ -7430,6 +7442,7 @@ package body Einfo is\n       W (\"Entry_Accepted\",                  Flag152 (Id));\n       W (\"Can_Use_Internal_Rep\",            Flag229 (Id));\n       W (\"Finalize_Storage_Only\",           Flag158 (Id));\n+      W (\"Formal_Proof_On\",                 Flag254 (Id));\n       W (\"From_With_Type\",                  Flag159 (Id));\n       W (\"Has_Aliased_Components\",          Flag135 (Id));\n       W (\"Has_Alignment_Clause\",            Flag46  (Id));"}, {"sha": "10f7c78f30d6314ba5d2566cbb0c88e01c39b2bf", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -1272,6 +1272,10 @@ package Einfo is\n --       Float_Rep_Kind. Together with the Digits_Value uniquely defines\n --       the floating-point representation to be used.\n \n+--    Formal_Proof_On (Flag254)\n+--       Present in subprogram entities. Set for subprograms whose body\n+--       contains an Annotate pragma which forces formal proof on this body.\n+\n --    Freeze_Node (Node7)\n --       Present in all entities. If there is an associated freeze node for\n --       the entity, this field references this freeze node. If no freeze\n@@ -6068,6 +6072,7 @@ package Einfo is\n    function First_Private_Entity                (Id : E) return E;\n    function First_Rep_Item                      (Id : E) return N;\n    function Float_Rep                           (Id : E) return F;\n+   function Formal_Proof_On                     (Id : E) return B;\n    function Freeze_Node                         (Id : E) return N;\n    function From_With_Type                      (Id : E) return B;\n    function Full_View                           (Id : E) return E;\n@@ -6657,6 +6662,7 @@ package Einfo is\n    procedure Set_First_Private_Entity            (Id : E; V : E);\n    procedure Set_First_Rep_Item                  (Id : E; V : N);\n    procedure Set_Float_Rep                       (Id : E; V : F);\n+   procedure Set_Formal_Proof_On                 (Id : E; V : B := True);\n    procedure Set_Freeze_Node                     (Id : E; V : N);\n    procedure Set_From_With_Type                  (Id : E; V : B := True);\n    procedure Set_Full_View                       (Id : E; V : E);\n@@ -7354,6 +7360,7 @@ package Einfo is\n    pragma Inline (First_Optional_Parameter);\n    pragma Inline (First_Private_Entity);\n    pragma Inline (First_Rep_Item);\n+   pragma Inline (Formal_Proof_On);\n    pragma Inline (Freeze_Node);\n    pragma Inline (From_With_Type);\n    pragma Inline (Full_View);\n@@ -7798,6 +7805,7 @@ package Einfo is\n    pragma Inline (Set_First_Optional_Parameter);\n    pragma Inline (Set_First_Private_Entity);\n    pragma Inline (Set_First_Rep_Item);\n+   pragma Inline (Set_Formal_Proof_On);\n    pragma Inline (Set_Freeze_Node);\n    pragma Inline (Set_From_With_Type);\n    pragma Inline (Set_Full_View);"}, {"sha": "a5038a992a6b827f5647f4de48e0083b9097657b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -5576,6 +5576,12 @@ package body Exp_Ch3 is\n       if Restriction_Active (No_Finalization) then\n          return;\n \n+      --  Do not create TSS routine Finalize_Address when dispatching calls are\n+      --  disabled since the core of the routine is a dispatching call.\n+\n+      elsif Restriction_Active (No_Dispatching_Calls) then\n+         return;\n+\n       --  Do not create TSS routine Finalize_Address for concurrent class-wide\n       --  types. Ignore C, C++, CIL and Java types since it is assumed that the\n       --  non-Ada side will handle their destruction.\n@@ -5588,17 +5594,17 @@ package body Exp_Ch3 is\n       then\n          return;\n \n-      --  Do not create TSS routine Finalize_Address when dispatching calls are\n-      --  disabled since the core of the routine is a dispatching call.\n-\n-      elsif Restriction_Active (No_Dispatching_Calls) then\n-         return;\n-\n       --  Do not create TSS routine Finalize_Address for .NET/JVM because these\n       --  targets do not support address arithmetic and unchecked conversions.\n \n       elsif VM_Target /= No_VM then\n          return;\n+\n+      --  Do not create TSS routine Finalize_Address when compiling in CodePeer\n+      --  mode since the routine contains an Unchecked_Conversion.\n+\n+      elsif CodePeer_Mode then\n+         return;\n       end if;\n \n       --  Generate the body of Finalize_Address. This routine is accessible"}, {"sha": "1f119ee6fccf2c32bd2e1bd67081803816a11a23", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -1297,16 +1297,20 @@ ada/a-ioexce.o : ada/ada.ads ada/a-except.ads ada/a-ioexce.ads \\\n ada/ada.o : ada/ada.ads ada/system.ads \n \n ada/alfa.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n-   ada/a-uncdea.ads ada/alfa.ads ada/alfa.adb ada/alloc.ads ada/atree.ads \\\n-   ada/einfo.ads ada/snames.ads ada/interfac.ads ada/namet.ads \\\n-   ada/s-conca2.ads ada/sinfo.ads ada/table.ads ada/uintp.ads \\\n-   ada/urealp.ads ada/gnat.ads ada/g-table.ads \\\n-   ada/g-table.adb ada/hostparm.ads ada/output.ads ada/output.adb \\\n-   ada/put_alfa.ads ada/put_alfa.adb ada/system.ads ada/s-exctab.ads \\\n-   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-soflin.ads \\\n-   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/types.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads \n+   ada/a-uncdea.ads ada/alfa.ads ada/alfa.adb ada/alloc.ads \\\n+   ada/aspects.ads ada/atree.ads ada/atree.adb ada/casing.ads \\\n+   ada/debug.ads ada/einfo.ads ada/gnat.ads ada/g-htable.ads \\\n+   ada/g-table.ads ada/g-table.adb ada/hostparm.ads ada/interfac.ads \\\n+   ada/namet.ads ada/namet.adb ada/nlists.ads ada/nlists.adb ada/opt.ads \\\n+   ada/output.ads ada/output.adb ada/put_alfa.ads ada/put_alfa.adb \\\n+   ada/sinfo.ads ada/sinfo.adb ada/sinput.ads ada/snames.ads \\\n+   ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads \\\n+   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-secsta.ads \\\n+   ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n+   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/uintp.ads ada/uintp.adb ada/unchconv.ads \\\n+   ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/ali-util.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/ali.ads ada/ali.adb ada/ali-util.ads \\\n@@ -2094,16 +2098,15 @@ ada/exp_ch7.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/sem_ch8.ads ada/sem_ch9.ads ada/sem_dist.ads ada/sem_eval.ads \\\n    ada/sem_prag.ads ada/sem_res.ads ada/sem_type.ads ada/sem_util.ads \\\n    ada/sinfo.ads ada/sinfo.adb ada/sinput.ads ada/snames.ads ada/stand.ads \\\n-   ada/stringt.ads ada/stringt.adb ada/stylesw.ads ada/system.ads \\\n-   ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads ada/s-memory.ads \\\n-   ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads \\\n-   ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n-   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n-   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/targparm.ads \\\n-   ada/tbuild.ads ada/tbuild.adb ada/tree_io.ads ada/ttypes.ads \\\n-   ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/validsw.ads \\\n-   ada/widechar.ads \n+   ada/stringt.ads ada/stylesw.ads ada/system.ads ada/s-exctab.ads \\\n+   ada/s-htable.ads ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n+   ada/s-parame.ads ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads \\\n+   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n+   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n+   ada/table.ads ada/table.adb ada/targparm.ads ada/tbuild.ads \\\n+   ada/tbuild.adb ada/tree_io.ads ada/ttypes.ads ada/types.ads \\\n+   ada/uintp.ads ada/uintp.adb ada/uname.ads ada/unchconv.ads \\\n+   ada/unchdeal.ads ada/urealp.ads ada/validsw.ads ada/widechar.ads \n \n ada/exp_ch8.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/aspects.ads ada/atree.ads \\\n@@ -2745,13 +2748,17 @@ ada/g-u3spch.o : ada/gnat.ads ada/g-spchge.ads ada/g-spchge.adb \\\n    ada/g-u3spch.ads ada/g-u3spch.adb ada/system.ads ada/s-wchcnv.ads \\\n    ada/s-wchcon.ads \n \n-ada/get_alfa.o : ada/ada.ads ada/a-ioexce.ads ada/a-unccon.ads \\\n-   ada/a-uncdea.ads ada/alfa.ads ada/alfa.adb ada/get_alfa.ads \\\n-   ada/get_alfa.adb ada/gnat.ads ada/g-table.ads ada/g-table.adb \\\n-   ada/hostparm.ads ada/output.ads ada/put_alfa.ads ada/system.ads \\\n-   ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-stalib.ads \\\n-   ada/s-string.ads ada/s-unstyp.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads \n+ada/get_alfa.o : ada/ada.ads ada/a-except.ads ada/a-ioexce.ads \\\n+   ada/a-unccon.ads ada/a-uncdea.ads ada/alfa.ads ada/alfa.adb \\\n+   ada/alloc.ads ada/atree.ads ada/debug.ads ada/einfo.ads \\\n+   ada/get_alfa.ads ada/get_alfa.adb ada/gnat.ads ada/g-table.ads \\\n+   ada/g-table.adb ada/hostparm.ads ada/namet.ads ada/opt.ads \\\n+   ada/output.ads ada/put_alfa.ads ada/sinfo.ads ada/snames.ads \\\n+   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n+   ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads \\\n+   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n+   ada/tree_io.ads ada/types.ads ada/uintp.ads ada/unchconv.ads \\\n+   ada/unchdeal.ads ada/urealp.ads \n \n ada/get_scos.o : ada/ada.ads ada/a-ioexce.ads ada/a-unccon.ads \\\n    ada/get_scos.ads ada/get_scos.adb ada/gnat.ads ada/g-table.ads \\\n@@ -3303,12 +3310,16 @@ ada/prepcomp.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/uintp.adb ada/uname.ads ada/unchconv.ads ada/unchdeal.ads \\\n    ada/urealp.ads ada/widechar.ads \n \n-ada/put_alfa.o : ada/ada.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n-   ada/alfa.ads ada/alfa.adb ada/gnat.ads ada/g-table.ads ada/g-table.adb \\\n-   ada/hostparm.ads ada/output.ads ada/put_alfa.ads ada/put_alfa.adb \\\n-   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n-   ada/s-stalib.ads ada/s-string.ads ada/s-unstyp.ads ada/types.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads \n+ada/put_alfa.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n+   ada/a-uncdea.ads ada/alfa.ads ada/alfa.adb ada/alloc.ads ada/atree.ads \\\n+   ada/debug.ads ada/einfo.ads ada/gnat.ads ada/g-table.ads \\\n+   ada/g-table.adb ada/hostparm.ads ada/namet.ads ada/opt.ads \\\n+   ada/output.ads ada/put_alfa.ads ada/put_alfa.adb ada/sinfo.ads \\\n+   ada/snames.ads ada/system.ads ada/s-exctab.ads ada/s-memory.ads \\\n+   ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads \\\n+   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \n \n ada/put_scos.o : ada/ada.ads ada/a-unccon.ads ada/gnat.ads ada/g-table.ads \\\n    ada/g-table.adb ada/put_scos.ads ada/put_scos.adb ada/scos.ads \\"}, {"sha": "4ae09e1d14e956198996fade92f0a26248fb3568", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -434,7 +434,7 @@ package body Sem_Ch11 is\n       P              : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"raise statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n       Check_Unreachable_Code (N);\n "}, {"sha": "d6db4d96befff634cb95fd2db953fc89fa26bcab", "filename": "gcc/ada/sem_ch2.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch2.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -81,7 +81,7 @@ package body Sem_Ch2 is\n            and then Is_Object (Entity (N))\n            and then not Is_In_ALFA (Entity (N))\n          then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram (\"object is not in 'A'L'F'A\", N);\n          end if;\n       end if;\n    end Analyze_Identifier;"}, {"sha": "401436db2b86a3f25ee8e41ae0025730d5f1264b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -3052,10 +3052,12 @@ package body Sem_Ch3 is\n       --  The object is in ALFA if-and-only-if its type is in ALFA and it is\n       --  not aliased.\n \n-      if Is_In_ALFA (T) and then not Aliased_Present (N) then\n-         Set_Is_In_ALFA (Id);\n+      if not Is_In_ALFA (T) then\n+         Mark_Non_ALFA_Subprogram (\"object type is not in 'A'L'F'A\", N);\n+      elsif Aliased_Present (N) then\n+         Mark_Non_ALFA_Subprogram (\"ALIASED is not in 'A'L'F'A\", N);\n       else\n-         Mark_Non_ALFA_Subprogram;\n+         Set_Is_In_ALFA (Id);\n       end if;\n \n       --  These checks should be performed before the initialization expression"}, {"sha": "44cda4092be2e366c68552024cdb0a16b8c7c546", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -350,7 +350,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Aggregate (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"aggregate is not in 'A'L'F'A\", N);\n \n       if No (Etype (N)) then\n          Set_Etype (N, Any_Composite);\n@@ -371,7 +371,7 @@ package body Sem_Ch4 is\n       C        : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"allocator is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"allocator is not allowed\", N);\n \n       --  Deal with allocator restrictions\n@@ -988,10 +988,10 @@ package body Sem_Ch4 is\n          --  If this is an indirect call, or the subprogram called is not in\n          --  ALFA, then the call is not in ALFA.\n \n-         if not Is_Subprogram (Nam_Ent)\n-           or else not Is_In_ALFA (Nam_Ent)\n-         then\n-            Mark_Non_ALFA_Subprogram;\n+         if not Is_Subprogram (Nam_Ent) then\n+            Mark_Non_ALFA_Subprogram (\"indirect call is not in 'A'L'F'A\", N);\n+         elsif not Is_In_ALFA (Nam_Ent) then\n+            Mark_Non_ALFA_Subprogram (\"call to subprogram not in 'A'L'F'A\", N);\n          end if;\n \n          Analyze_One_Call (N, Nam_Ent, True, Success);\n@@ -1370,7 +1370,7 @@ package body Sem_Ch4 is\n       L  : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"concatenation is not in 'A'L'F'A\", N);\n \n       Candidate_Type := Empty;\n \n@@ -1540,7 +1540,8 @@ package body Sem_Ch4 is\n       --  resolution.\n \n       if Present (Else_Expr) and then not In_Pre_Post_Expression then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"this form of conditional expression is not in 'A'L'F'A\", N);\n       end if;\n \n       if Comes_From_Source (N) then\n@@ -1739,7 +1740,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Explicit_Dereference\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"explicit dereference is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n \n       Analyze (P);\n@@ -2622,7 +2623,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Null (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"null is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"null is not allowed\", N);\n \n       Set_Etype (N, Any_Access);\n@@ -3254,7 +3255,7 @@ package body Sem_Ch4 is\n       T    : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"qualified expression is not in 'A'L'F'A\", N);\n \n       Analyze_Expression (Expr);\n \n@@ -3314,7 +3315,7 @@ package body Sem_Ch4 is\n       Iterator : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"quantified expression is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"quantified expression is not allowed\", N);\n \n       Set_Etype  (Ent,  Standard_Void_Type);\n@@ -3480,7 +3481,7 @@ package body Sem_Ch4 is\n       Acc_Type : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"reference is not in 'A'L'F'A\", N);\n \n       Analyze (P);\n \n@@ -4346,7 +4347,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Slice\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"slice is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"slice is not allowed\", N);\n \n       Analyze (P);\n@@ -4416,7 +4417,8 @@ package body Sem_Ch4 is\n       --  type conversions are not allowed.\n \n       if not (Is_Scalar_Type (Etype (Expr)) and then Is_Scalar_Type (T)) then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"only type conversion between scalar types is in 'A'L'F'A\", N);\n       end if;\n \n       --  Only remaining step is validity checks on the argument. These\n@@ -4528,7 +4530,8 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Unchecked_Type_Conversion (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram\n+        (\"unchecked type conversion is not in 'A'L'F'A\", N);\n       Find_Type (Subtype_Mark (N));\n       Analyze_Expression (Expression (N));\n       Set_Etype (N, Entity (Subtype_Mark (N)));"}, {"sha": "b9c03c029328f902f8e0077c04654b16d59d60b8", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -1113,7 +1113,8 @@ package body Sem_Ch5 is\n       if Others_Present\n         and then List_Length (Alternatives (N)) = 1\n       then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"OTHERS as unique case alternative is not in 'A'L'F'A\", N);\n          Check_SPARK_Restriction\n            (\"OTHERS as unique case alternative is not allowed\", N);\n       end if;\n@@ -1195,7 +1196,9 @@ package body Sem_Ch5 is\n \n          else\n             if Has_Loop_In_Inner_Open_Scopes (U_Name) then\n-               Mark_Non_ALFA_Subprogram;\n+               Mark_Non_ALFA_Subprogram\n+                 (\"exit label must name the closest enclosing loop\"\n+                   & \" in 'A'L'F'A\", N);\n                Check_SPARK_Restriction\n                  (\"exit label must name the closest enclosing loop\", N);\n             end if;\n@@ -1242,38 +1245,46 @@ package body Sem_Ch5 is\n \n       if Present (Cond) then\n          if Nkind (Parent (N)) /= N_Loop_Statement then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram\n+              (\"exit with when clause must be directly in loop\"\n+                & \" in 'A'L'F'A\", N);\n             Check_SPARK_Restriction\n               (\"exit with when clause must be directly in loop\", N);\n          end if;\n \n       else\n          if Nkind (Parent (N)) /= N_If_Statement then\n-            Mark_Non_ALFA_Subprogram;\n             if Nkind (Parent (N)) = N_Elsif_Part then\n+               Mark_Non_ALFA_Subprogram\n+                 (\"exit must be in IF without ELSIF in 'A'L'F'A\", N);\n                Check_SPARK_Restriction\n                  (\"exit must be in IF without ELSIF\", N);\n             else\n+               Mark_Non_ALFA_Subprogram\n+                 (\"exit must be directly in IF in 'A'L'F'A\", N);\n                Check_SPARK_Restriction (\"exit must be directly in IF\", N);\n             end if;\n \n          elsif Nkind (Parent (Parent (N))) /= N_Loop_Statement then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram\n+              (\"exit must be in IF directly in loop in 'A'L'F'A\", N);\n             Check_SPARK_Restriction\n               (\"exit must be in IF directly in loop\", N);\n \n             --  First test the presence of ELSE, so that an exit in an ELSE\n             --  leads to an error mentioning the ELSE.\n \n          elsif Present (Else_Statements (Parent (N))) then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram\n+              (\"exit must be in IF without ELSE in 'A'L'F'A\", N);\n             Check_SPARK_Restriction (\"exit must be in IF without ELSE\", N);\n \n             --  An exit in an ELSIF does not reach here, as it would have been\n             --  detected in the case (Nkind (Parent (N)) /= N_If_Statement).\n \n          elsif Present (Elsif_Parts (Parent (N))) then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram\n+              (\"exit must be in IF without ELSIF in 'A'L'F'A\", N);\n             Check_SPARK_Restriction (\"exit must be in IF without ELSIF\", N);\n          end if;\n       end if;\n@@ -1302,7 +1313,7 @@ package body Sem_Ch5 is\n       Label_Ent   : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"goto statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"goto statement is not allowed\", N);\n \n       --  Actual semantic checks"}, {"sha": "4eaaaa6ab9b7fa61fc67a25f6453668433ff72e4", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -649,13 +649,14 @@ package body Sem_Ch6 is\n              (Nkind (Parent (Parent (N))) /= N_Subprogram_Body\n                or else Present (Next (N)))\n          then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram\n+              (\"RETURN should be the last statement in 'A'L'F'A\", N);\n             Check_SPARK_Restriction\n               (\"RETURN should be the last statement in function\", N);\n          end if;\n \n       else\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram (\"extended RETURN is not in 'A'L'F'A\", N);\n          Check_SPARK_Restriction (\"extended RETURN is not allowed\", N);\n \n          --  Analyze parts specific to extended_return_statement:\n@@ -8886,7 +8887,7 @@ package body Sem_Ch6 is\n          if Is_In_ALFA (Formal_Type) then\n             Set_Is_In_ALFA (Formal);\n          else\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram (\"formal is not in 'A'L'F'A\", Formal);\n          end if;\n \n          Default := Expression (Param_Spec);"}, {"sha": "204ecadd02a211f4d86b87938c68a0b80057beb1", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -101,7 +101,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"abort statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"abort statement is not allowed\", N);\n \n       T_Name := First (Names (N));\n@@ -140,7 +140,7 @@ package body Sem_Ch9 is\n    procedure Analyze_Accept_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"accept is not in 'A'L'F'A\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -174,7 +174,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"accept statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"accept statement is not allowed\", N);\n \n       --  Entry name is initialized to Any_Id. It should get reset to the\n@@ -406,7 +406,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (Max_Asynchronous_Select_Nesting, N);\n       Check_Restriction (No_Select_Statements, N);\n@@ -453,7 +453,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -500,7 +500,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"delay is not in 'A'L'F'A\", N);\n       Check_Restriction (No_Delay, N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -552,7 +552,7 @@ package body Sem_Ch9 is\n       E : constant Node_Id := Expression (N);\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"delay statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Relative_Delay, N);\n       Check_Restriction (No_Delay, N);\n@@ -571,7 +571,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"delay statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Delay, N);\n       Check_Potentially_Blocking_Operation (N);\n@@ -600,7 +600,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n \n       --  Entry_Name is initialized to Any_Id. It should get reset to the\n       --  matching entry entity. An error is signalled if it is not reset\n@@ -833,7 +833,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n \n       if Present (Index) then\n          Analyze (Index);\n@@ -861,7 +861,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"entry call is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"entry call is not allowed\", N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -897,7 +897,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Def_Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n \n       --  Case of no discrete subtype definition\n \n@@ -967,7 +967,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n       Analyze (Def);\n \n       --  There is no elaboration of the entry index specification. Therefore,\n@@ -1009,7 +1009,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"protected body is not in 'A'L'F'A\", N);\n       Set_Ekind (Body_Id, E_Protected_Body);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n \n@@ -1128,7 +1128,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"protected definition is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"protected definition is not allowed\", N);\n       Analyze_Declarations (Visible_Declarations (N));\n \n@@ -1182,7 +1182,7 @@ package body Sem_Ch9 is\n       end if;\n \n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"protected type is not in 'A'L'F'A\", N);\n       Check_Restriction (No_Protected_Types, N);\n \n       T := Find_Type_Name (N);\n@@ -1324,7 +1324,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"requeue statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"requeue statement is not allowed\", N);\n       Check_Restriction (No_Requeue_Statements, N);\n       Check_Unreachable_Code (N);\n@@ -1599,7 +1599,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -1720,7 +1720,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"protected object is not in 'A'L'F'A\", N);\n \n       --  The node is rewritten as a protected type declaration, in exact\n       --  analogy with what is done with single tasks.\n@@ -1782,7 +1782,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"task is not in 'A'L'F'A\", N);\n \n       --  The node is rewritten as a task type declaration, followed by an\n       --  object declaration of that anonymous task type.\n@@ -1860,7 +1860,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"task body is not in 'A'L'F'A\", N);\n       Set_Ekind (Body_Id, E_Task_Body);\n       Set_Scope (Body_Id, Current_Scope);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n@@ -1981,7 +1981,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"task definition is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"task definition is not allowed\", N);\n \n       if Present (Visible_Declarations (N)) then\n@@ -2016,7 +2016,7 @@ package body Sem_Ch9 is\n    begin\n       Check_Restriction (No_Tasking, N);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"task type is not in 'A'L'F'A\", N);\n       T := Find_Type_Name (N);\n       Generate_Definition (T);\n \n@@ -2122,7 +2122,7 @@ package body Sem_Ch9 is\n    procedure Analyze_Terminate_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"terminate is not in 'A'L'F'A\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -2144,7 +2144,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -2181,7 +2181,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram;\n+      Mark_Non_ALFA_Subprogram (\"triggering statement is not in 'A'L'F'A\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));"}, {"sha": "e9923157b14e608d3585274fcf9424eb21715ff9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -6103,6 +6103,53 @@ package body Sem_Prag is\n                Exp : Node_Id;\n \n             begin\n+               if Chars (Get_Pragma_Arg (Arg1)) = Name_Formal_Proof then\n+                  if No (Arg2) then\n+                     Error_Pragma_Arg\n+                       (\"missing second argument for pragma%\", Arg1);\n+                  end if;\n+\n+                  Check_Arg_Is_Identifier (Arg2);\n+                  Check_Arg_Count (2);\n+\n+                  if Chars (Get_Pragma_Arg (Arg2)) /= Name_On\n+                    and then Chars (Get_Pragma_Arg (Arg2)) /= Name_Off\n+                  then\n+                     Error_Pragma_Arg\n+                       (\"wrong second argument for pragma%\", Arg2);\n+                  end if;\n+\n+                  if Chars (Get_Pragma_Arg (Arg2)) = Name_On then\n+                     declare\n+                        Cur_Subp : constant Entity_Id := Current_Subprogram;\n+\n+                     begin\n+                        if Present (Cur_Subp)\n+                          and then (Is_Subprogram (Cur_Subp)\n+                                     or else Is_Generic_Subprogram (Cur_Subp))\n+                        then\n+                           --  Notify user if some ALFA violation occurred\n+                           --  before this point in Cur_Subp. These violations\n+                           --  are not precisly located, but this is better\n+                           --  than ignoring them.\n+\n+                           if not Is_In_ALFA (Cur_Subp)\n+                             or else not Body_Is_In_ALFA (Cur_Subp)\n+                           then\n+                              Error_Pragma\n+                                (\"pragma% is placed after violation\"\n+                                 & \" of 'A'L'F'A\");\n+                           end if;\n+\n+                           Set_Formal_Proof_On (Cur_Subp);\n+\n+                        else\n+                           Error_Pragma (\"wrong placement for pragma%\");\n+                        end if;\n+                     end;\n+                  end if;\n+               end if;\n+\n                --  Second unanalyzed parameter is optional\n \n                if No (Arg2) then"}, {"sha": "241abd622aa6761dee4786d73f329f783d69053a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -5796,12 +5796,14 @@ package body Sem_Res is\n       --  types or array types except String.\n \n       if Is_Boolean_Type (T) then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"ordering operator on boolean type is not in 'A'L'F'A\", N);\n          Check_SPARK_Restriction\n            (\"comparison is not defined on Boolean type\", N);\n \n       elsif Is_Array_Type (T) then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"ordering operator on array type is not in 'A'L'F'A\", N);\n \n          if Base_Type (T) /= Standard_String then\n             Check_SPARK_Restriction\n@@ -5861,7 +5863,8 @@ package body Sem_Res is\n       end if;\n \n       if Root_Type (Typ) /= Standard_Boolean then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"non-boolean conditional expression is not in 'A'L'F'A\", N);\n       end if;\n \n       Set_Etype (N, Typ);\n@@ -6664,7 +6667,8 @@ package body Sem_Res is\n          --  operands have equal static bounds.\n \n          if Is_Array_Type (T) then\n-            Mark_Non_ALFA_Subprogram;\n+            Mark_Non_ALFA_Subprogram\n+              (\"equality operator on array is not in 'A'L'F'A\", N);\n \n             --  Protect call to Matching_Static_Array_Bounds to avoid costly\n             --  operation if not needed.\n@@ -7214,7 +7218,8 @@ package body Sem_Res is\n       if Is_Array_Type (B_Typ)\n         and then Nkind (N) in N_Binary_Op\n       then\n-         Mark_Non_ALFA_Subprogram;\n+         Mark_Non_ALFA_Subprogram\n+           (\"binary operator on array is not in 'A'L'F'A\", N);\n \n          declare\n             Left_Typ  : constant Node_Id := Etype (Left_Opnd (N));"}, {"sha": "2a90f6778114972492b825057895159cc5b37169", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -141,9 +141,13 @@ package body Sem_Util is\n    --  T is a derived tagged type. Check whether the type extension is null.\n    --  If the parent type is fully initialized, T can be treated as such.\n \n-   procedure Mark_Non_ALFA_Subprogram_Unconditional;\n+   procedure Mark_Non_ALFA_Subprogram_Unconditional\n+     (Msg : String;\n+      N   : Node_Id);\n    --  Perform the action for Mark_Non_ALFA_Subprogram_Body, which allows the\n-   --  latter to be small and inlined.\n+   --  latter to be small and inlined. If the subprogram being marked as not in\n+   --  ALFA is annotated with Formal_Proof being On, then an error is issued\n+   --  with message Msg on node N.\n \n    ------------------------------\n    --  Abstract_Interface_List --\n@@ -2323,34 +2327,47 @@ package body Sem_Util is\n    -- Mark_Non_ALFA_Subprogram --\n    ------------------------------\n \n-   procedure Mark_Non_ALFA_Subprogram is\n+   procedure Mark_Non_ALFA_Subprogram (Msg : String; N : Node_Id) is\n    begin\n       --  Isolate marking of the current subprogram body so that the body of\n       --  Mark_Non_ALFA_Subprogram is small and inlined.\n \n       if ALFA_Mode then\n-         Mark_Non_ALFA_Subprogram_Unconditional;\n+         Mark_Non_ALFA_Subprogram_Unconditional (Msg, N);\n       end if;\n    end Mark_Non_ALFA_Subprogram;\n \n    --------------------------------------------\n    -- Mark_Non_ALFA_Subprogram_Unconditional --\n    --------------------------------------------\n \n-   procedure Mark_Non_ALFA_Subprogram_Unconditional is\n+   procedure Mark_Non_ALFA_Subprogram_Unconditional\n+     (Msg : String;\n+      N   : Node_Id)\n+   is\n       Cur_Subp : constant Entity_Id := Current_Subprogram;\n \n    begin\n       if Present (Cur_Subp)\n         and then (Is_Subprogram (Cur_Subp)\n                    or else Is_Generic_Subprogram (Cur_Subp))\n       then\n+         --  If the subprogram has been annotated with Formal_Proof being On,\n+         --  then an error must be issued to notify the user that this\n+         --  subprogram unexpectedly falls outside the ALFA subset.\n+\n+         if Formal_Proof_On (Cur_Subp) then\n+            Error_Msg_F (Msg, N);\n+         end if;\n+\n          --  If the non-ALFA construct is in a precondition or postcondition,\n-         --  then mark the subprogram as not in ALFA. Otherwise, mark the\n-         --  subprogram body as not in ALFA.\n+         --  then mark the subprogram as not in ALFA, because neither the\n+         --  subprogram nor its callers can be proved formally.\n \n-         --  This comment just says what is done, but not why ??? and it\n-         --  just repeats what is in the spec ???\n+         --  If the non-ALFA construct is in a regular piece of code inside the\n+         --  body of the subprogram, then mark the subprogram body as not in\n+         --  ALFA, because the subprogram cannot be proved formally, but its\n+         --  callers could.\n \n          if In_Pre_Post_Expression then\n             Set_Is_In_ALFA (Cur_Subp, False);"}, {"sha": "e8773a44a2886a685adcec9a9ca8752802c39938", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -277,17 +277,22 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n-   procedure Mark_Non_ALFA_Subprogram;\n+   procedure Mark_Non_ALFA_Subprogram (Msg : String; N : Node_Id);\n    --  If Current_Subprogram is not Empty, mark either its specification or its\n-   --  body as not being in ALFA. This procedure may be called during the\n-   --  analysis of a precondition or postcondition, as indicated by the flag\n-   --  In_Pre_Post_Expression, or during the analysis of a subprogram's body.\n-   --  In the first case, the specification of Current_Subprogram must be\n-   --  marked as not being in ALFA, as the contract is considered to be part of\n-   --  the specification, so that calls to this subprogram are not in ALFA. In\n-   --  the second case, mark the body as not being in ALFA, which does not\n-   --  prevent the subprogram's specification, and calls to the subprogram,\n-   --  from being in ALFA.\n+   --  body as not being in ALFA.\n+\n+   --  This procedure may be called during the analysis of a precondition or\n+   --  postcondition, as indicated by the flag In_Pre_Post_Expression, or\n+   --  during the analysis of a subprogram's body. In the first case, the\n+   --  specification of Current_Subprogram must be marked as not being in ALFA,\n+   --  as the contract is considered to be part of the specification, so that\n+   --  calls to this subprogram are not in ALFA. In the second case, mark the\n+   --  body as not being in ALFA, which does not prevent the subprogram's\n+   --  specification, and calls to the subprogram, from being in ALFA.\n+\n+   --  If the subprogram being marked as not in ALFA is annotated with\n+   --  Formal_Proof being On, then an error is issued with message Msg on node\n+   --  N.\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the"}, {"sha": "c3c7bead3b64038a6f662bd3a702ae4d1f29e147", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534ab171e71fa56c4b384c5984d0d457f2eb55d/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=9534ab171e71fa56c4b384c5984d0d457f2eb55d", "patch": "@@ -629,6 +629,7 @@ package Snames is\n    Name_External_Name                  : constant Name_Id := N + $;\n    Name_First_Optional_Parameter       : constant Name_Id := N + $;\n    Name_Form                           : constant Name_Id := N + $;\n+   Name_Formal_Proof                   : constant Name_Id := N + $;\n    Name_G_Float                        : constant Name_Id := N + $;\n    Name_Gcc                            : constant Name_Id := N + $;\n    Name_Gnat                           : constant Name_Id := N + $;"}]}