{"sha": "f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5MmY1MDkzOTJiYTUyZmRiOWNmZWQ3ZWE4YTNjYzkzZDI0ODE0Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-08-29T10:48:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-08-29T10:48:44Z"}, "message": "Fix possible aliasing problems\n\nFrom-SVN: r28963", "tree": {"sha": "2239bdd561d881db2c9667680ba470ed8f85fb20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2239bdd561d881db2c9667680ba470ed8f85fb20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f592f509392ba52fdb9cfed7ea8a3cc93d24814f/comments", "author": null, "committer": null, "parents": [{"sha": "6f1661e52511a14300cfbc8bc14de28b0847e1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1661e52511a14300cfbc8bc14de28b0847e1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1661e52511a14300cfbc8bc14de28b0847e1f3"}], "stats": {"total": 118, "additions": 91, "deletions": 27}, "files": [{"sha": "c43a6bba3f05b01531cbf30962f85aac921858a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f592f509392ba52fdb9cfed7ea8a3cc93d24814f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f592f509392ba52fdb9cfed7ea8a3cc93d24814f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "patch": "@@ -1,3 +1,9 @@\n+1999-08-29  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* fp-bit.c (add, sub, multiply, divide, compare, _eq_f2, _ne_f2,\n+\t_gt_f2, _ge_f2, _lt_f2, _le_f2, float_to_si, float_to_usi, negate,\n+\tsf_to_df, df_to_sf): Fix potential problem with alias analysis.\n+\n Sun Aug 29 04:30:52 1999  John Wehle  (john@feith.com)\n \n \t* jump.c (delete_prior_computation): Also check calls"}, {"sha": "25fe4ef451be4a5da5a7ac007885561c6596a2bd", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 85, "deletions": 27, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f592f509392ba52fdb9cfed7ea8a3cc93d24814f/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f592f509392ba52fdb9cfed7ea8a3cc93d24814f/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=f592f509392ba52fdb9cfed7ea8a3cc93d24814f", "patch": "@@ -780,9 +780,13 @@ add (FLO_type arg_a, FLO_type arg_b)\n   fp_number_type b;\n   fp_number_type tmp;\n   fp_number_type *res;\n+  FLO_union_type au, bu;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  au.value = arg_a;\n+  bu.value = arg_b;\n+\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   res = _fpadd_parts (&a, &b, &tmp);\n \n@@ -796,9 +800,13 @@ sub (FLO_type arg_a, FLO_type arg_b)\n   fp_number_type b;\n   fp_number_type tmp;\n   fp_number_type *res;\n+  FLO_union_type au, bu;\n+\n+  au.value = arg_a;\n+  bu.value = arg_b;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   b.sign ^= 1;\n \n@@ -986,9 +994,13 @@ multiply (FLO_type arg_a, FLO_type arg_b)\n   fp_number_type b;\n   fp_number_type tmp;\n   fp_number_type *res;\n+  FLO_union_type au, bu;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  au.value = arg_a;\n+  bu.value = arg_b;\n+\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   res = _fpmul_parts (&a, &b, &tmp);\n \n@@ -1092,9 +1104,13 @@ divide (FLO_type arg_a, FLO_type arg_b)\n   fp_number_type a;\n   fp_number_type b;\n   fp_number_type *res;\n+  FLO_union_type au, bu;\n+\n+  au.value = arg_a;\n+  bu.value = arg_b;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   res = _fpdiv_parts (&a, &b);\n \n@@ -1195,9 +1211,13 @@ compare (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  au.value = arg_a;\n+  bu.value = arg_b;\n+\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   return __fpcmp_parts (&a, &b);\n }\n@@ -1213,9 +1233,13 @@ _eq_f2 (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n+\n+  au.value = arg_a;\n+  bu.value = arg_b;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   if (isnan (&a) || isnan (&b))\n     return 1;\t\t\t/* false, truth == 0 */\n@@ -1230,9 +1254,13 @@ _ne_f2 (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  au.value = arg_a;\n+  bu.value = arg_b;\n+\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   if (isnan (&a) || isnan (&b))\n     return 1;\t\t\t/* true, truth != 0 */\n@@ -1247,9 +1275,13 @@ _gt_f2 (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n+\n+  au.value = arg_a;\n+  bu.value = arg_b;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   if (isnan (&a) || isnan (&b))\n     return -1;\t\t\t/* false, truth > 0 */\n@@ -1264,9 +1296,13 @@ _ge_f2 (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  au.value = arg_a;\n+  bu.value = arg_b;\n+\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   if (isnan (&a) || isnan (&b))\n     return -1;\t\t\t/* false, truth >= 0 */\n@@ -1280,9 +1316,13 @@ _lt_f2 (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n+\n+  au.value = arg_a;\n+  bu.value = arg_b;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   if (isnan (&a) || isnan (&b))\n     return 1;\t\t\t/* false, truth < 0 */\n@@ -1297,9 +1337,13 @@ _le_f2 (FLO_type arg_a, FLO_type arg_b)\n {\n   fp_number_type a;\n   fp_number_type b;\n+  FLO_union_type au, bu;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n-  unpack_d ((FLO_union_type *) & arg_b, &b);\n+  au.value = arg_a;\n+  bu.value = arg_b;\n+\n+  unpack_d (&au, &a);\n+  unpack_d (&bu, &b);\n \n   if (isnan (&a) || isnan (&b))\n     return 1;\t\t\t/* false, truth <= 0 */\n@@ -1354,8 +1398,11 @@ float_to_si (FLO_type arg_a)\n {\n   fp_number_type a;\n   SItype tmp;\n+  FLO_union_type au;\n+\n+  au.value = arg_a;\n+  unpack_d (&au, &a);\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n   if (iszero (&a))\n     return 0;\n   if (isnan (&a))\n@@ -1385,8 +1432,11 @@ USItype\n float_to_usi (FLO_type arg_a)\n {\n   fp_number_type a;\n+  FLO_union_type au;\n+\n+  au.value = arg_a;\n+  unpack_d (&au, &a);\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n   if (iszero (&a))\n     return 0;\n   if (isnan (&a))\n@@ -1415,8 +1465,11 @@ FLO_type\n negate (FLO_type arg_a)\n {\n   fp_number_type a;\n+  FLO_union_type au;\n+\n+  au.value = arg_a;\n+  unpack_d (&au, &a);\n \n-  unpack_d ((FLO_union_type *) & arg_a, &a);\n   flip_sign (&a);\n   return pack_d (&a);\n }\n@@ -1455,8 +1508,11 @@ DFtype\n sf_to_df (SFtype arg_a)\n {\n   fp_number_type in;\n+  FLO_union_type au;\n+\n+  au.value = arg_a;\n+  unpack_d (&au, &in);\n \n-  unpack_d ((FLO_union_type *) & arg_a, &in);\n   return __make_dp (in.class, in.sign, in.normal_exp,\n \t\t    ((UDItype) in.fraction.ll) << F_D_BITOFF);\n }\n@@ -1489,8 +1545,10 @@ df_to_sf (DFtype arg_a)\n {\n   fp_number_type in;\n   USItype sffrac;\n+  FLO_union_type au;\n \n-  unpack_d ((FLO_union_type *) & arg_a, &in);\n+  au.value = arg_a;\n+  unpack_d (&au, &in);\n \n   sffrac = in.fraction.ll >> F_D_BITOFF;\n "}]}